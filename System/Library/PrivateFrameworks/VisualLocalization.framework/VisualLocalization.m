void sub_21BAD4640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_21BAD492C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21BAD4E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  objc_destroyWeak(v32);

  objc_destroyWeak((id *)(v33 - 112));
  _Block_object_dispose(&a25, 8);

  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_21BAD4FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_21BAD4FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21BAD52D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21BAD54E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21BAD61BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

float64x2_t VLECEFFromCoordinate@<Q0>(float64x2_t *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  __double2 v7 = __sincos_stret(a2 * 0.0174532925);
  __double2 v9 = __sincos_stret(a3 * 0.0174532925);
  v8.f64[0] = v9.__cosval;
  double v10 = 6378137.0 / sqrt(v7.__sinval * -0.00669437999 * v7.__sinval + 1.0);
  v8.f64[1] = v9.__sinval;
  float64x2_t result = vmulq_n_f64(v8, v7.__cosval * (a4 + v10));
  v8.f64[0] = v7.__sinval * (a4 + v10 * 0.99330562);
  *a1 = result;
  a1[1] = v8;
  return result;
}

void sub_21BAD6978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,id a56)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL20VLGetTileProviderLogv_block_invoke()
{
  _MergedGlobals_1 = (uint64_t)os_log_create("com.apple.VisualLocalization", "TileProvider");
  return MEMORY[0x270F9A758]();
}

uint64_t __VLGetLocalizerLog_block_invoke()
{
  qword_26AC375C8 = (uint64_t)os_log_create("com.apple.VisualLocalization", "Localizer");
  return MEMORY[0x270F9A758]();
}

void sub_21BAD6B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double VLCoordinateFromECEF(float64x2_t *a1)
{
  float64x2_t v1 = *a1;
  long double v2 = a1->f64[1];
  double v3 = sqrt(vmlad_n_f64(vmuld_lane_f64(v2, *a1, 1), v1.f64[0], v1.f64[0]));
  double v4 = v3 * 0.99330562;
  double v5 = 1.57079633;
  if (v3 * 0.99330562 != 0.0)
  {
    double v14 = a1->f64[1];
    float64x2_t v15 = *a1;
    unsigned int v6 = 0;
    long double __y = a1[1].f64[0];
    double v5 = 0.0;
    double v7 = 0.0;
    do
    {
      double v9 = v5;
      double v5 = atan2(__y, v4);
      __double2 v10 = __sincos_stret(v5);
      double v11 = 6378137.0 / sqrt(v10.__sinval * -0.00669437999 * v10.__sinval + 1.0);
      double v12 = v3 / v10.__cosval - v11;
      if (vabdd_f64(v9, v5) < 0.000001)
      {
        if (vabdd_f64(v7, v12) < 0.001 || v6 >= 9)
        {
LABEL_10:
          v1.f64[0] = v15.f64[0];
          long double v2 = v14;
          goto LABEL_12;
        }
      }
      else if (v6 > 8)
      {
        goto LABEL_10;
      }
      ++v6;
      double v4 = v3 * (v11 / (v11 + v12) * -0.00669437999 + 1.0);
      double v7 = v3 / v10.__cosval - v11;
    }
    while (v4 != 0.0);
    v1.f64[0] = v15.f64[0];
    double v5 = 1.57079633;
    long double v2 = v14;
  }
LABEL_12:
  atan2(v2, v1.f64[0]);
  return v5 / 0.0174532925;
}

long double VLHeadingForTransform(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, float64x2_t a8)
{
  float64x2_t v9 = *(float64x2_t *)(a1 + 96);
  float64x2_t v10 = *(float64x2_t *)(a1 + 112);
  float64x2_t v11 = vmulq_f64(v10, v10);
  v11.f64[0] = 1.0 / sqrt(v11.f64[0] + vaddvq_f64(vmulq_f64(v9, v9)));
  float64x2_t v12 = vmulq_f64(v10, v11);
  float64x2_t v13 = vmulq_n_f64(v9, v11.f64[0]);
  float64x2_t v14 = (float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
  a8.f64[0] = -*(double *)(a1 + 16);
  float64x2_t v15 = vnegq_f64(*(float64x2_t *)a1);
  float64x2_t v16 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL);
  float64x2_t v18 = *(float64x2_t *)(a1 + 32);
  long long v17 = *(_OWORD *)(a1 + 48);
  if (vmulq_f64(a8, v12).f64[0] + vaddvq_f64(vmulq_f64(v15, v13)) >= 0.0)
  {
    float64x2_t v51 = vaddq_f64(v15, v13);
    float64x2_t v52 = vaddq_f64(a8, v12);
    v8.f64[0] = 1.0 / sqrt(vmulq_f64(v52, v52).f64[0] + vaddvq_f64(vmulq_f64(v51, v51)));
    float64x2_t v53 = vmulq_n_f64(v51, v8.f64[0]);
    float64x2_t v54 = vmulq_f64(v52, v8);
    v55.f64[0] = -*(double *)(a1 + 16);
    v55.f64[1] = v15.f64[0];
    v15.f64[1] = v16.f64[0];
    *(void *)&v50.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(vnegq_f64(a8), v53, 1), v54, v16);
    v56.f64[0] = v54.f64[0];
    v56.f64[1] = v53.f64[0];
    int64x2_t v57 = (int64x2_t)vmlaq_f64(vmulq_f64(v56, vnegq_f64(v15)), v53, v55);
    *(void *)&v50.f64[1] = v57.i64[0];
    *(void *)&v49.f64[0] = vdupq_laneq_s64(v57, 1).u64[0];
    v49.f64[1] = vmulq_f64(a8, v54).f64[0] + vaddvq_f64(vmulq_f64(v15, v53));
  }
  else
  {
    v19.f64[0] = v15.f64[0];
    v19.f64[1] = v16.f64[0];
    float64x2_t v20 = vmulq_f64(v19, v19);
    v20.f64[0] = 1.0 / sqrt(vmulq_f64(a8, a8).f64[0] + vaddvq_f64(v20));
    v21.f64[0] = v13.f64[0];
    v21.f64[1] = v14.f64[0];
    v8.f64[0] = 1.0 / sqrt(vmulq_f64(v12, v12).f64[0] + vaddvq_f64(vmulq_f64(v21, v21)));
    float64x2_t v22 = vmulq_f64(v12, v8);
    float64x2_t v23 = vaddq_f64(vmulq_n_f64(v19, v20.f64[0]), vmulq_n_f64(v21, v8.f64[0]));
    float64x2_t v24 = vaddq_f64(vmulq_f64(a8, v20), v22);
    float64x2_t v25 = vmulq_f64(v23, v23);
    v25.f64[0] = vmulq_f64(v24, v24).f64[0] + vaddvq_f64(v25);
    if (v25.f64[0] <= 4.93038066e-32)
    {
      v77.f64[0] = v15.f64[0];
      v77.f64[1] = v16.f64[0];
      float64x2_t v78 = vabsq_f64(v77);
      float64x2_t v79 = vabsq_f64(a8);
      if (v78.f64[0] > v78.f64[1] || v78.f64[0] > v79.f64[0])
      {
        if (v78.f64[1] <= v79.f64[0])
        {
          v92.f64[0] = v15.f64[0];
          v92.f64[1] = v16.f64[0];
          float64x2_t v93 = vmulq_f64(v92, (float64x2_t)vdupq_n_s64(0x8000000000000000));
          float64x2_t v85 = vnegq_f64(a8);
          a8.f64[1] = v15.f64[0];
          float64x2_t v86 = vmlaq_f64(v93, (float64x2_t)xmmword_21BB7A540, a8);
          _Q6 = 0uLL;
        }
        else
        {
          v79.f64[0] = -0.0;
          v84.f64[0] = v15.f64[0];
          v84.f64[1] = v16.f64[0];
          float64x2_t v85 = vmulq_f64(a8, v79);
          a8.f64[1] = v15.f64[0];
          float64x2_t v86 = vmlaq_f64(vmulq_f64(v84, (float64x2_t)xmmword_21BB7A550), (float64x2_t)0, a8);
          __asm { FMOV            V6.2D, #1.0 }
        }
        float64x2_t v94 = vmlaq_f64(v85, _Q6, v16);
        float64x2_t v95 = vmulq_f64(v86, v86);
        double v96 = vmulq_f64(v94, v94).f64[0];
        v94.f64[1] = v86.f64[0];
        v95.f64[0] = 1.0 / sqrt(v95.f64[1] + v96 + v95.f64[0]);
        float64x2_t v50 = vmulq_n_f64(v94, v95.f64[0]);
        float64x2_t v49 = (float64x2_t)(unint64_t)*(_OWORD *)&vmulq_laneq_f64(v95, v86, 1);
      }
      else
      {
        v80.f64[0] = -*(double *)(a1 + 16);
        v80.f64[1] = v15.f64[0];
        v15.f64[1] = v16.f64[0];
        v24.f64[0] = -0.0;
        float64x2_t v81 = vmlaq_f64(vmulq_f64(v15, (float64x2_t)xmmword_21BB7A560), (float64x2_t)xmmword_21BB7A570, v80);
        float64x2_t v82 = vmlaq_f64(vmulq_f64(a8, v24), (float64x2_t)0, v16);
        float64x2_t v83 = vmulq_f64(v81, v81);
        v80.f64[0] = vmulq_f64(v82, v82).f64[0];
        v82.f64[1] = v81.f64[0];
        v83.f64[0] = 1.0 / sqrt(v83.f64[1] + v80.f64[0] + v83.f64[0]);
        float64x2_t v50 = vmulq_n_f64(v82, v83.f64[0]);
        float64x2_t v49 = (float64x2_t)(unint64_t)*(_OWORD *)&vmulq_laneq_f64(v83, v81, 1);
      }
    }
    else
    {
      v25.f64[0] = 1.0 / sqrt(v25.f64[0]);
      *(void *)&v23.f64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
      float64x2_t v26 = vmulq_f64(v24, v25);
      float64x2_t v27 = vmulq_n_f64(v23, v25.f64[0]);
      float64x2_t v28 = vaddq_f64(v15, v27);
      float64x2_t v29 = vaddq_f64(a8, v26);
      float64x2_t v30 = vmulq_f64(v29, v29);
      v30.f64[0] = 1.0 / sqrt(v30.f64[0] + vaddvq_f64(vmulq_f64(v28, v28)));
      float64x2_t v31 = vmulq_n_f64(v28, v30.f64[0]);
      float64x2_t v32 = vmulq_f64(v29, v30);
      v30.f64[0] = -*(double *)(a1 + 16);
      v30.f64[1] = v15.f64[0];
      v15.f64[1] = v16.f64[0];
      *(void *)&double v33 = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(vnegq_f64(a8), v31, 1), v32, v16);
      double v34 = vmulq_f64(a8, v32).f64[0];
      v32.f64[1] = v31.f64[0];
      float64x2_t v35 = vmlaq_f64(vmulq_f64(v32, vnegq_f64(v15)), v31, v30);
      double v36 = v34 + vaddvq_f64(vmulq_f64(v15, v31));
      float64x2_t v37 = vaddq_f64(v13, v27);
      float64x2_t v38 = vaddq_f64(v12, v26);
      float64x2_t v39 = vmulq_f64(v38, v38);
      v39.f64[0] = 1.0 / sqrt(v39.f64[0] + vaddvq_f64(vmulq_f64(v37, v37)));
      float64x2_t v40 = vmulq_n_f64(v37, v39.f64[0]);
      float64x2_t v41 = vmulq_f64(v38, v39);
      float64x2_t v42 = vnegq_f64(v26);
      double v43 = vmulq_f64(v26, v41).f64[0];
      v26.f64[1] = v27.f64[0];
      int8x16_t v44 = (int8x16_t)vmlaq_laneq_f64(vmulq_laneq_f64(v42, v40, 1), v41, v27, 1);
      v41.f64[1] = v40.f64[0];
      int64x2_t v45 = (int64x2_t)vmlaq_f64(vmulq_f64(v41, vnegq_f64(v27)), v40, v26);
      *(void *)&v26.f64[0] = v44.i64[0];
      *(void *)&v26.f64[1] = v45.i64[0];
      v40.f64[0] = vaddvq_f64(vmulq_f64(v27, v40));
      *(void *)&v27.f64[0] = vdupq_laneq_s64(v45, 1).u64[0];
      v27.f64[1] = v43 + v40.f64[0];
      float64x2_t v46 = vnegq_f64(v26);
      float64x2_t v47 = (float64x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)vnegq_f64(v27), 8uLL);
      float64x2_t v48 = vmlaq_laneq_f64(vmulq_n_f64(v26, v36), (float64x2_t)vextq_s8((int8x16_t)v46, v44, 8uLL), v35, 1);
      float64x2_t v49 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, v36), v47, v35, 1), vmlaq_n_f64(vmulq_n_f64(v46, v35.f64[0]), (float64x2_t)vzip1q_s64(v45, (int64x2_t)v46), v33));
      float64x2_t v50 = vaddq_f64(v48, vmlaq_n_f64(vmulq_n_f64(v27, v35.f64[0]), v47, v33));
    }
  }
  v58.f64[0] = v12.f64[0];
  v58.f64[1] = v13.f64[0];
  v13.f64[1] = v14.f64[0];
  float64x2_t v59 = vmlaq_f64(vmulq_f64(v58, (float64x2_t)vdupq_n_s64(0x8000000000000000)), (float64x2_t)xmmword_21BB7A570, v13);
  float64x2_t v60 = vmlaq_f64(vnegq_f64(v14), (float64x2_t)0, v12);
  float64x2_t v61 = vmulq_f64(v59, v59);
  double v62 = vmulq_f64(v60, v60).f64[0];
  v60.f64[1] = v59.f64[0];
  v61.f64[0] = 1.0 / sqrt(v61.f64[1] + v62 + v61.f64[0]);
  float64x2_t v63 = vmulq_n_f64(v60, v61.f64[0]);
  float64x2_t v64 = vmulq_laneq_f64(v61, v59, 1);
  *(void *)&v65.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(vnegq_f64(v12), v63, 1), v64, v14);
  float64x2_t v66 = vmulq_f64(v49, (float64x2_t)xmmword_21BB7A580);
  int8x16_t v67 = (int8x16_t)vnegq_f64(v50);
  float64x2_t v68 = (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)vnegq_f64(v66), 8uLL);
  float64x2_t v69 = vmlaq_n_f64(vmlaq_n_f64(vmulq_laneq_f64(v50, v18, 1), (float64x2_t)vextq_s8(v67, (int8x16_t)v50, 8uLL), v18.f64[0]), v68, *(double *)&v17);
  float64x2_t v70 = vmlaq_n_f64(vmlaq_n_f64(vmulq_laneq_f64(v66, v18, 1), v68, v18.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v50, v67, 8uLL), *(double *)&v17);
  float64x2_t v71 = vnegq_f64(v70);
  float64x2_t v72 = (float64x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)vnegq_f64(v69), 8uLL);
  float64x2_t v73 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v69, v49, 1), v72, v49.f64[0]), vmlaq_n_f64(vmulq_laneq_f64(v71, v50, 1), (float64x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v71, 8uLL), v50.f64[0]));
  v68.f64[0] = vmulq_f64(v64, v73).f64[0];
  v64.f64[1] = v63.f64[0];
  float64x2_t v74 = vmlaq_f64(vmulq_f64(v64, vnegq_f64(v13)), v63, v58);
  v65.f64[1] = v74.f64[0];
  float64x2_t v75 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v70, v49, 1), (float64x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v70, 8uLL), v49.f64[0]), vmlaq_n_f64(vmulq_laneq_f64(v69, v50, 1), v72, v50.f64[0]));
  return (atan2(v68.f64[0] + vaddvq_f64(vmulq_f64(v63, v75)), vmulq_laneq_f64(v73, v74, 1).f64[0] + vaddvq_f64(vmulq_f64(v65, v75)))+ -1.57079633)* 180.0/ 3.14159265;
}

void VLLocationFromCLLocation(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  [v3 coordinate];
  double v5 = v4;
  [v3 coordinate];
  double v7 = v6;
  [v3 altitude];
  double v9 = v8;
  __double2 v10 = __sincos_stret(v5 * 0.0174532925);
  __double2 v11 = __sincos_stret(v7 * 0.0174532925);
  double v12 = 6378137.0 / sqrt(v10.__sinval * -0.00669437999 * v10.__sinval + 1.0);
  double v13 = v10.__cosval * (v9 + v12);
  double v14 = v11.__cosval * v13;
  double v15 = v11.__sinval * v13;
  double v16 = v10.__sinval * (v9 + v12 * 0.99330562);
  int v17 = [v3 isCoordinateFused];
  *(double *)a2 = v14;
  *(double *)(a2 + 8) = v15;
  *(double *)(a2 + 16) = v16;
  [v3 horizontalAccuracy];
  *(float *)&double v18 = v18;
  *(_DWORD *)(a2 + 24) = LODWORD(v18);
  *(_DWORD *)(a2 + 28) = v17;
  int v19 = [v3 type];

  if ((v19 - 1) > 0xC) {
    int v20 = 0;
  }
  else {
    int v20 = dword_21BB7A590[v19 - 1];
  }
  *(_DWORD *)(a2 + 32) = v20;
}

void sub_21BADA064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_21BADA07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

Class __getCIImageClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!qword_26AC37550)
  {
    v4[1] = MEMORY[0x263EF8330];
    v4[2] = 3221225472;
    v4[3] = __CoreImageLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2643B9F20;
    uint64_t v6 = 0;
    qword_26AC37550 = _sl_dlopen();
    long double v2 = (void *)v4[0];
    if (!qword_26AC37550)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("CIImage");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    long double v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  _MergedGlobals_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreImageLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_26AC37550 = result;
  return result;
}

Class __getCIContextClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!qword_26AC37550)
  {
    v4[1] = MEMORY[0x263EF8330];
    v4[2] = 3221225472;
    v4[3] = __CoreImageLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2643B9F20;
    uint64_t v6 = 0;
    qword_26AC37550 = _sl_dlopen();
    long double v2 = (void *)v4[0];
    if (!qword_26AC37550)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("CIContext");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    long double v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_26AC37558 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_21BADD000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21BADD068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VLTileDataProvider;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_21BADD278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21BADD290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21BADD604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21BADD6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21BADD6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21BADDD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  float64x2_t v32 = v30;
  objc_destroyWeak(v32);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v31 - 112), 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);

  _Unwind_Resume(a1);
}

void sub_21BADE9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Block_object_dispose((const void *)(v23 - 232), 8);
  _Unwind_Resume(a1);
}

void *std::list<VLLocalizationDataKey>::remove(void *result, uint64_t a2)
{
  int v20 = &v20;
  __p = &v20;
  uint64_t v22 = 0;
  long double v2 = (void *)result[1];
  if (v2 != result)
  {
    if (&v20 == result)
    {
      do
      {
        double v12 = (void *)v2[1];
        if (v2[2] == *(void *)a2 && v2[3] == *(void *)(a2 + 8))
        {
          if (v12 == result)
          {
            BOOL v14 = 1;
LABEL_34:
            double v12 = result;
          }
          else
          {
            while (1)
            {
              BOOL v14 = *((_OWORD *)v12 + 1) == *(_OWORD *)a2;
              if (*((_OWORD *)v12 + 1) != *(_OWORD *)a2) {
                break;
              }
              double v12 = (void *)v12[1];
              if (v12 == result) {
                goto LABEL_34;
              }
            }
          }
          if (v2 != v12)
          {
            uint64_t v15 = *v12;
            uint64_t v16 = *v2;
            *(void *)(v16 + 8) = *(void *)(*v12 + 8);
            **(void **)(v15 + 8) = v16;
            uint64_t v17 = *result;
            *(void *)(v17 + 8) = v2;
            void *v2 = v17;
            *Class result = v15;
            *(void *)(v15 + 8) = result;
          }
          if (!v14) {
            double v12 = (void *)v12[1];
          }
        }
        long double v2 = v12;
      }
      while (v12 != result);
    }
    else
    {
      uint64_t v3 = 0;
      double v4 = &v20;
      do
      {
        long long v5 = (void *)v2[1];
        if (v2[2] == *(void *)a2 && v2[3] == *(void *)(a2 + 8))
        {
          if (v5 == result)
          {
            BOOL v7 = 1;
LABEL_15:
            long long v5 = result;
          }
          else
          {
            while (1)
            {
              BOOL v7 = *((_OWORD *)v5 + 1) == *(_OWORD *)a2;
              if (*((_OWORD *)v5 + 1) != *(_OWORD *)a2) {
                break;
              }
              long long v5 = (void *)v5[1];
              if (v5 == result) {
                goto LABEL_15;
              }
            }
          }
          if (v2 != v5)
          {
            double v4 = (void *)*v5;
            uint64_t v8 = 1;
            if ((void *)*v5 != v2)
            {
              double v9 = v2;
              do
              {
                double v9 = (void *)v9[1];
                ++v8;
              }
              while (v9 != v4);
            }
            result[2] -= v8;
            v3 += v8;
            uint64_t v22 = v3;
            uint64_t v10 = *v2;
            *(void *)(v10 + 8) = v4[1];
            *(void *)v4[1] = v10;
            __double2 v11 = v20;
            v20[1] = v2;
            void *v2 = v11;
            int v20 = v4;
            v4[1] = &v20;
          }
          if (!v7) {
            long long v5 = (void *)v5[1];
          }
        }
        long double v2 = v5;
      }
      while (v5 != result);
      if (v3)
      {
        Class result = __p;
        uint64_t v18 = *(void *)__p;
        *(void *)(v18 + 8) = v4[1];
        *(void *)v4[1] = v18;
        uint64_t v22 = 0;
        if (result != &v20)
        {
          do
          {
            int v19 = (void *)result[1];
            operator delete(result);
            Class result = v19;
          }
          while (v19 != &v20);
        }
      }
    }
  }
  return result;
}

void sub_21BADF0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21BADF36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

uint64_t __VLGetTraceLog_block_invoke()
{
  qword_26AC37580 = (uint64_t)os_log_create("com.apple.VisualLocalization", "Trace");
  return MEMORY[0x270F9A758]();
}

uint64_t _vlTrackCallback(void *a1, _DWORD *a2, char **a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v6 = (void *)MEMORY[0x21D499780]();
  id v7 = a1;
  if (v7)
  {
    a1 = v7;
    if (qword_26AC375D0 == -1)
    {
      uint64_t v8 = qword_26AC375C8;
      if (!os_log_type_enabled((os_log_t)qword_26AC375C8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v22) = 0;
      _os_log_fault_impl(&dword_21BAD2000, &_os_log_internal, OS_LOG_TYPE_FAULT, "Assertion failed: self != ((void *)0)", (uint8_t *)&v22, 2u);
    }
    __break(1u);
  }
  dispatch_once(&qword_26AC375D0, &__block_literal_global_215);
  uint64_t v8 = qword_26AC375C8;
  if (os_log_type_enabled((os_log_t)qword_26AC375C8, OS_LOG_TYPE_DEBUG))
  {
LABEL_4:
    int v9 = a2[1];
    int v10 = a2[2];
    int v11 = a2[3];
    id v22 = (id)__PAIR64__(*a2, 67109888);
    __int16 v23 = 1024;
    int v24 = v9;
    __int16 v25 = 1024;
    int v26 = v10;
    __int16 v27 = 1024;
    int v28 = v11;
    _os_log_impl(&dword_21BAD2000, v8, OS_LOG_TYPE_DEBUG, "Loading track: <z: %i, x: %i, y: %i, uncertainty: %i>", (uint8_t *)&v22, 0x1Au);
  }
LABEL_5:
  id v22 = 0;
  double v12 = [a1 _fileURLForTile:a2 error:&v22];
  id v13 = v22;
  BOOL v14 = v13;
  if (v12)
  {
    id v15 = [v12 path];
    uint64_t v16 = (const char *)[v15 UTF8String];
    uint64_t v17 = [v12 path];
    *a3 = strndup(v16, [v17 lengthOfBytesUsingEncoding:4]);

    uint64_t v18 = 0;
  }
  else if ([v13 code] == 1)
  {
    int v19 = [v14 domain];
    int v20 = [v19 isEqualToString:@"VLLocalizationDataProviderErrorDomain"];

    if (v20) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = 2;
    }
  }
  else
  {
    uint64_t v18 = 2;
  }

  return v18;
}

void _vlLogCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (qword_26AC375E0 == -1)
  {
    uint64_t v3 = qword_26AC375D8;
    if (!os_log_type_enabled((os_log_t)qword_26AC375D8, OS_LOG_TYPE_INFO)) {
      return;
    }
  }
  else
  {
    dispatch_once(&qword_26AC375E0, &__block_literal_global_219);
    uint64_t v3 = qword_26AC375D8;
    if (!os_log_type_enabled((os_log_t)qword_26AC375D8, OS_LOG_TYPE_INFO)) {
      return;
    }
  }
  int v4 = 136315138;
  uint64_t v5 = a2;
  _os_log_impl(&dword_21BAD2000, v3, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&v4, 0xCu);
}

void _prepareAltitudeQuery(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  int v9 = a4;
  id v10 = a5;
  if (!a3)
  {
    long double v23 = *(double *)a2;
    long double v24 = *(double *)(a2 + 8);
    double v25 = *(double *)(a2 + 16);
    double v26 = sqrt(v24 * v24 + v23 * v23);
    if (v26 >= 0.001)
    {
      double v27 = atan2(*(long double *)(a2 + 16), v26 * 0.996647189);
    }
    else
    {
      double v27 = dbl_21BB7A6E0[v25 < 0.0];
      double v26 = 0.001;
    }
    __double2 v28 = __sincos_stret(v27);
    double v29 = atan2(v24, v23);
    *(void *)buf = 0;
    float v30 = atan2(v25 + v28.__sinval * (v28.__sinval * v28.__sinval) * 42841.3115, v26 + v28.__cosval * (v28.__cosval * v28.__cosval) * -42697.6727);
    float v31 = v29;
    int altitudes = vl_get_altitudes(a1, &v57, buf, v30, v31);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
    if (!altitudes)
    {
      if (qword_26AC375D0 == -1)
      {
        uint64_t v37 = qword_26AC375C8;
        if (!os_log_type_enabled((os_log_t)qword_26AC375C8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_39;
        }
      }
      else
      {
        dispatch_once(&qword_26AC375D0, &__block_literal_global_215);
        uint64_t v37 = qword_26AC375C8;
        if (!os_log_type_enabled((os_log_t)qword_26AC375C8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_39;
        }
      }
      __int16 v56 = 0;
      float64x2_t v38 = "Existing tile is usable for location. No need to vl_update";
      float64x2_t v39 = (uint8_t *)&v56;
      goto LABEL_32;
    }
    if (vl_update(a1, a2)) {
      goto LABEL_22;
    }
LABEL_26:
    if (qword_26AC375D0 == -1)
    {
      uint64_t v37 = qword_26AC375C8;
      if (!os_log_type_enabled((os_log_t)qword_26AC375C8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_39;
      }
    }
    else
    {
      dispatch_once(&qword_26AC375D0, &__block_literal_global_215);
      uint64_t v37 = qword_26AC375C8;
      if (!os_log_type_enabled((os_log_t)qword_26AC375C8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_39;
      }
    }
    *(_WORD *)buf = 0;
    float64x2_t v38 = "vl_update succeeded";
    float64x2_t v39 = buf;
LABEL_32:
    float64x2_t v40 = v37;
    os_log_type_t v41 = OS_LOG_TYPE_DEBUG;
    uint32_t v42 = 2;
LABEL_38:
    _os_log_impl(&dword_21BAD2000, v40, v41, v38, v39, v42);
    goto LABEL_39;
  }
  if (!vl_update(a1, a2)) {
    goto LABEL_26;
  }
  if (a3 > 0x63)
  {
    long double v12 = *(double *)a2;
    long double v11 = *(double *)(a2 + 8);
    double v13 = sqrt(v11 * v11 + v12 * v12);
    double v14 = v13 * 0.99330562;
    double v15 = 1.57079633;
    if (v13 * 0.99330562 != 0.0)
    {
      double v45 = *(double *)(a2 + 8);
      double v46 = *(double *)a2;
      unsigned int v16 = 0;
      long double __y = *(double *)(a2 + 16);
      double v15 = 0.0;
      double v17 = 0.0;
      do
      {
        double v18 = v15;
        double v15 = atan2(__y, v14);
        __double2 v19 = __sincos_stret(v15);
        double v20 = 6378137.0 / sqrt(v19.__sinval * -0.00669437999 * v19.__sinval + 1.0);
        double v21 = v13 / v19.__cosval - v20;
        if (vabdd_f64(v18, v15) >= 0.000001)
        {
          if (v16 > 8) {
            goto LABEL_34;
          }
        }
        else if (vabdd_f64(v17, v21) < 0.001 || v16 >= 9)
        {
          goto LABEL_34;
        }
        ++v16;
        double v14 = v13 * (v20 / (v20 + v21) * -0.00669437999 + 1.0);
        double v17 = v13 / v19.__cosval - v20;
      }
      while (v14 != 0.0);
      double v15 = 1.57079633;
LABEL_34:
      long double v11 = v45;
      long double v12 = v46;
    }
    double v43 = atan2(v11, v12);
    if (qword_26AC375D0 != -1)
    {
      dispatch_once(&qword_26AC375D0, &__block_literal_global_215);
      uint64_t v44 = qword_26AC375C8;
      if (!os_log_type_enabled((os_log_t)qword_26AC375C8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_39;
      }
      goto LABEL_37;
    }
    uint64_t v44 = qword_26AC375C8;
    if (os_log_type_enabled((os_log_t)qword_26AC375C8, OS_LOG_TYPE_ERROR))
    {
LABEL_37:
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v15 / 0.0174532925;
      __int16 v59 = 2048;
      double v60 = v43 / 0.0174532925;
      float64x2_t v38 = "vl_update failed, but have retried too many times for location: <%f, %f>";
      float64x2_t v39 = buf;
      float64x2_t v40 = v44;
      os_log_type_t v41 = OS_LOG_TYPE_ERROR;
      uint32_t v42 = 22;
      goto LABEL_38;
    }
LABEL_39:
    dispatch_async(v9, v10);
    goto LABEL_40;
  }
LABEL_22:
  if (qword_26AC375D0 != -1)
  {
    dispatch_once(&qword_26AC375D0, &__block_literal_global_215);
    double v33 = qword_26AC375C8;
    if (!os_log_type_enabled((os_log_t)qword_26AC375C8, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  double v33 = qword_26AC375C8;
  if (os_log_type_enabled((os_log_t)qword_26AC375C8, OS_LOG_TYPE_DEBUG))
  {
LABEL_24:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_21BAD2000, v33, OS_LOG_TYPE_DEBUG, "vl_update failed, sleeping for a while before trying again", buf, 2u);
  }
LABEL_25:
  unint64_t v34 = a3 + 1;
  dispatch_time_t v35 = dispatch_time(0, 100000000);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  long long v36 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v36;
  block[2] = ___prepareAltitudeQuery_block_invoke;
  block[3] = &unk_2643BA348;
  uint64_t v51 = a1;
  uint64_t v54 = *(void *)(a2 + 32);
  unint64_t v55 = v34;
  dispatch_queue_t v49 = v9;
  id v50 = v10;
  dispatch_after(v35, v49, block);

LABEL_40:
}

id getCLLocationClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_26AC375E8;
  uint64_t v7 = qword_26AC375E8;
  if (!qword_26AC375E8)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke;
    v3[3] = &unk_2643B9F00;
    v3[4] = &v4;
    __getCLLocationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21BAE4FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21BAE6E10(_Unwind_Exception *a1)
{
}

void sub_21BAE6E28(_Unwind_Exception *a1)
{
}

uint64_t __VLGetargoLog_block_invoke()
{
  qword_26AC375D8 = (uint64_t)os_log_create("com.apple.VisualLocalization", "argo");
  return MEMORY[0x270F9A758]();
}

uint64_t ___prepareAltitudeQuery_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96) + 1;
  uint64_t v5 = *(void *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 72);
  v8[0] = *(_OWORD *)(a1 + 56);
  v8[1] = v6;
  uint64_t v9 = v3;
  return _prepareAltitudeQuery(v2, v8, v4, v5, v1);
}

Class __getCLLocationClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!qword_26AC375F0)
  {
    v4[1] = MEMORY[0x263EF8330];
    v4[2] = 3221225472;
    v4[3] = __CoreLocationLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2643BA368;
    uint64_t v6 = 0;
    qword_26AC375F0 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_26AC375F0)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("CLLocation");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_26AC375E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_26AC375F0 = result;
  return result;
}

Class __getCIImageClass_block_invoke_0(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!qword_26AC37600)
  {
    v4[1] = MEMORY[0x263EF8330];
    v4[2] = 3221225472;
    v4[3] = __CoreImageLibraryCore_block_invoke_0;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2643BA380;
    uint64_t v6 = 0;
    qword_26AC37600 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_26AC37600)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("CIImage");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_26AC375F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreImageLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_26AC37600 = result;
  return result;
}

Class __getCIContextClass_block_invoke_0(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!qword_26AC37600)
  {
    v4[1] = MEMORY[0x263EF8330];
    v4[2] = 3221225472;
    v4[3] = __CoreImageLibraryCore_block_invoke_0;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2643BA380;
    uint64_t v6 = 0;
    qword_26AC37600 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_26AC37600)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("CIContext");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_26AC37608 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void g_jac_right_jacobian_so3(double *a1, double *a2)
{
  double v2 = *a2;
  double v3 = a2[1];
  double v4 = a2[2];
  *a1 = 1.0;
  a1[1] = 0.0;
  a1[2] = 0.0;
  a1[3] = 0.0;
  a1[4] = 1.0;
  a1[5] = 0.0;
  a1[6] = 0.0;
  a1[7] = 0.0;
  a1[8] = 1.0;
  double v5 = v2 * v2 + 0.0 + v3 * v3 + v4 * v4;
  if (v5 != 0.0)
  {
    double v7 = a2[1];
    double v8 = a2[2];
    double v9 = *a2;
    double v10 = 0.0 - v8 * v8;
    double v11 = v10 - v7 * v7;
    double v12 = 0.0 - v8 * 0.0 - v8 * 0.0 + v7 * *a2;
    double v13 = v7 * 0.0 + 0.0 + v8 * *a2 + v7 * 0.0;
    double v14 = v8 * 0.0 + 0.0 + v8 * 0.0 + *a2 * v7;
    double v15 = v10 + 0.0 - v9 * v9;
    double v16 = v8 * v7 + 0.0;
    double v17 = v16 - *a2 * 0.0 - *a2 * 0.0;
    double v18 = 0.0 - v7 * 0.0 + *a2 * v8 - v7 * 0.0;
    double v19 = v16 + *a2 * 0.0 + *a2 * 0.0;
    double v20 = 0.0 - v7 * v7 - v9 * v9 + 0.0;
    if (v5 >= 0.00001)
    {
      double v23 = sqrt(v5);
      double v33 = v15;
      double v34 = v11;
      double v31 = 0.0 - v7 * 0.0 + *a2 * v8 - v7 * 0.0;
      double v32 = v7 * 0.0 + 0.0 + v8 * *a2 + v7 * 0.0;
      double v30 = v16 + *a2 * 0.0 + *a2 * 0.0;
      __double2 v24 = __sincos_stret(v23);
      double v20 = 0.0 - v7 * v7 - v9 * v9 + 0.0;
      double v19 = v30;
      double v18 = v31;
      double v13 = v32;
      double v15 = v33;
      double v11 = v34;
      double v21 = (v24.__cosval + -1.0) / v5;
      double v22 = (1.0 - v24.__sinval / v23) / v5;
    }
    else
    {
      double v21 = v5 / 24.0 + -0.5;
      double v22 = v5 / -120.0 + 0.166666667;
    }
    double v25 = v21 * 0.0;
    double v26 = v7 * v21;
    double v27 = v8 * v21;
    double v28 = v9 * v21;
    double v29 = v25 + 1.0;
    *a1 = v29 + v11 * v22;
    a1[1] = v12 * v22 + 0.0 - v27;
    a1[2] = v13 * v22 + v26 + 0.0;
    a1[3] = v14 * v22 + v27 + 0.0;
    a1[4] = v29 + v15 * v22;
    a1[5] = v17 * v22 + 0.0 - v28;
    a1[6] = v18 * v22 + 0.0 - v26;
    a1[7] = v19 * v22 + v28 + 0.0;
    a1[8] = v29 + v20 * v22;
  }
}

void g_jac_apply_proj(double *a1, uint64_t a2, uint64_t a3, double *a4, int a5)
{
  uint64_t v368 = *MEMORY[0x263EF8340];
  double v9 = *a1;
  double v10 = a1[1];
  double v11 = v10 / *a1;
  double v12 = a1[2];
  double v13 = v12 / *a1;
  double v14 = -v10;
  double v15 = -v10 / (v9 * v9);
  double v16 = -v12 / (v9 * v9);
  int v17 = *(_DWORD *)a2;
  double v18 = 1.0 / *a1;
  switch(*(_DWORD *)a2)
  {
    case 0:
      if (a5 >= 1)
      {
        double v19 = v11 + *(double *)(a2 + 56);
        double v20 = v13 + *(double *)(a2 + 64);
        double v21 = sqrt(v19 * v19 + v20 * v20);
        double v22 = *(double *)(a2 + 72);
        double v23 = *(double *)(a2 + 80);
        double v24 = *(double *)(a2 + 88);
        double v25 = v22 * (v21 * v21) + 1.0 + v23 * (v21 * (v21 * v21)) + v24 * (v21 * (v21 * (v21 * v21)));
        double v26 = v23 * 3.0 * v21 + v22 * 2.0 + v24 * 4.0 * (v21 * v21);
        double v27 = *(double *)(a2 + 8);
        double v28 = *(double *)(a2 + 16);
        double v29 = v27 * (v25 + v19 * v19 * v26);
        double v30 = v19 * v20 * v26;
        double v31 = v28 * v30;
        double v32 = v27 * v30;
        double v33 = v28 * (v25 + v20 * v20 * v26);
        double v34 = v15 * v29 + 0.0 + v16 * (v27 * v30);
        double v35 = v15 * v31 + 0.0 + v16 * v33;
        double v36 = v18 * v29 + 0.0 + v27 * v30 * 0.0;
        double v37 = v18 * v31 + 0.0 + v33 * 0.0;
        double v38 = v29 * 0.0 + 0.0 + v18 * v32;
        double v39 = v31 * 0.0 + 0.0 + v18 * v33;
        uint64_t v40 = a5;
        os_log_type_t v41 = (double *)(a3 + 16);
        uint32_t v42 = a4 + 1;
        do
        {
          *(v42 - 1) = 0.0;
          double v43 = *(v41 - 2) * v34 + 0.0;
          *(v42 - 1) = v43;
          double v44 = v43 + *(v41 - 1) * v36;
          *(v42 - 1) = v44;
          *(v42 - 1) = v44 + *v41 * v38;
          *uint32_t v42 = 0.0;
          double v45 = *(v41 - 2) * v35 + 0.0;
          *uint32_t v42 = v45;
          double v46 = v45 + *(v41 - 1) * v37;
          *uint32_t v42 = v46;
          double v47 = *v41;
          v41 += 3;
          *uint32_t v42 = v46 + v47 * v39;
          v42 += 2;
          --v40;
        }
        while (v40);
      }
      return;
    case 1:
      double v48 = tan(*(double *)(a2 + 32) * 0.5);
      double v49 = sqrt(v10 * v10 + v9 * v9);
      double v50 = v49 * v49;
      double v51 = v49 * (v49 * v49);
      double v52 = 0.0;
      double v53 = 0.0;
      double v54 = 0.0;
      if (v49 * v49 != 0.0)
      {
        uint64_t v55 = *(int *)(a2 + 168);
        double v56 = *(double *)(a2 + 24);
        double v53 = v14 * (double)v55 / v56 / v50;
        double v54 = v9 * (double)v55 / v56 / v50;
      }
      double v57 = 0.0;
      if (v51 != 0.0)
      {
        uint64_t v58 = *(int *)(a2 + 172);
        double v52 = v12 * -(v9 * (double)v58) * 0.5 / v51 / v48;
        double v57 = v12 * (v14 * (double)v58) * 0.5 / v51 / v48;
      }
      if (v49 == 0.0)
      {
        double v59 = 0.0;
        if (a5 < 1) {
          return;
        }
      }
      else
      {
        double v59 = (double)*(int *)(a2 + 172) * 0.5 / v49 / v48;
        if (a5 < 1) {
          return;
        }
      }
      uint64_t v254 = a5;
      v255 = (double *)(a3 + 16);
      v256 = a4 + 1;
      do
      {
        *(v256 - 1) = 0.0;
        double v257 = *(v255 - 2) * v53 + 0.0;
        *(v256 - 1) = v257;
        double v258 = v257 + *(v255 - 1) * v54;
        *(v256 - 1) = v258;
        *(v256 - 1) = v258 + *v255 * 0.0;
        double *v256 = 0.0;
        double v259 = *(v255 - 2) * v52 + 0.0;
        double *v256 = v259;
        double v260 = v259 + *(v255 - 1) * v57;
        double *v256 = v260;
        double v261 = *v255;
        v255 += 3;
        double *v256 = v260 + v261 * v59;
        v256 += 2;
        --v254;
      }
      while (v254);
      return;
    case 2:
      double v60 = v10 * v10 + v9 * v9;
      double v61 = sqrt(v60);
      double v62 = v61 * v61;
      double v63 = v60 + v12 * v12;
      double v64 = 0.0;
      double v65 = 0.0;
      double v66 = 0.0;
      if (v61 * v61 != 0.0)
      {
        uint64_t v67 = *(int *)(a2 + 168);
        double v68 = *(double *)(a2 + 24);
        double v65 = v14 / v62 * (double)v67 / v68;
        double v66 = v9 / v62 * (double)v67 / v68;
      }
      double v69 = v63 * v61;
      double v70 = 0.0;
      if (v63 * v61 != 0.0)
      {
        uint64_t v71 = *(int *)(a2 + 172);
        double v72 = *(double *)(a2 + 32);
        double v64 = -(v9 * v12) / v69 * (double)v71 / v72;
        double v70 = v12 * v14 / v69 * (double)v71 / v72;
      }
      if (v63 == 0.0)
      {
        double v73 = 0.0;
        if (a5 < 1) {
          return;
        }
      }
      else
      {
        double v73 = v61 / v63 * (double)*(int *)(a2 + 172) / *(double *)(a2 + 32);
        if (a5 < 1) {
          return;
        }
      }
      uint64_t v262 = a5;
      v263 = (double *)(a3 + 16);
      v264 = a4 + 1;
      do
      {
        *(v264 - 1) = 0.0;
        double v265 = *(v263 - 2) * v65 + 0.0;
        *(v264 - 1) = v265;
        double v266 = v265 + *(v263 - 1) * v66;
        *(v264 - 1) = v266;
        *(v264 - 1) = v266 + *v263 * 0.0;
        double *v264 = 0.0;
        double v267 = *(v263 - 2) * v64 + 0.0;
        double *v264 = v267;
        double v268 = v267 + *(v263 - 1) * v70;
        double *v264 = v268;
        double v269 = *v263;
        v263 += 3;
        double *v264 = v268 + v269 * v73;
        v264 += 2;
        --v262;
      }
      while (v262);
      return;
    case 3:
      double v74 = sqrt(v11 * v11 + v13 * v13);
      double v75 = 0.0;
      if (v74 == 0.0)
      {
        double v76 = 1.0;
        double v77 = 0.0;
        double v78 = 1.0;
        double v79 = v13;
        double v80 = v10 / *a1;
        if ((2 * a5) < 0x97) {
          goto LABEL_22;
        }
LABEL_84:
        __assert_rtn("g_jac_apply_proj", "g_jac.c", 592, "ARR_SIZE(J_tmp) >= n_par * 2");
      }
      double v358 = v15;
      double v361 = v16;
      double v364 = 1.0 / *a1;
      double v270 = atan(v74);
      double v271 = v270 / v74;
      double v80 = v11 * (v270 / v74);
      double v79 = v13 * (v270 / v74);
      double v76 = 1.0;
      if (v270 / v74 == 1.0)
      {
        double v77 = 0.0;
        double v78 = 1.0;
        double v16 = v361;
        double v18 = v364;
        double v15 = v358;
        if ((2 * a5) >= 0x97) {
          goto LABEL_84;
        }
      }
      else
      {
        double v272 = v74 * v74 + 1.0;
        double v273 = v74 * (v74 * v74);
        double v274 = v11 / v74 / v272 / v74 + v270 * (-v11 / v273);
        double v76 = v271 + v274 * v11;
        double v75 = v13 * v274;
        double v275 = v13 / v74 / v272 / v74 + v270 * (-v13 / v273);
        double v77 = v11 * v275;
        double v78 = v271 + v275 * v13;
        double v16 = v361;
        double v18 = v364;
        double v15 = v358;
        if ((2 * a5) >= 0x97) {
          goto LABEL_84;
        }
      }
LABEL_22:
      double v81 = *(double *)(a2 + 56);
      double v82 = *(double *)(a2 + 64);
      double v83 = *(double *)(a2 + 72);
      double v84 = *(double *)(a2 + 80);
      double v85 = *(double *)(a2 + 88);
      double v86 = *(double *)(a2 + 8);
      double v87 = *(double *)(a2 + 16);
      if (a5 < 1) {
        goto LABEL_66;
      }
      if (a5 == 1)
      {
        uint64_t v88 = 0;
LABEL_64:
        uint64_t v282 = a5 - v88;
        v283 = &v365.f64[2 * v88 + 1];
        v284 = (double *)(a3 + 24 * v88 + 16);
        do
        {
          double v285 = *(v284 - 2);
          double v286 = *(v284 - 1);
          double v287 = *v284;
          v284 += 3;
          *(v283 - 1) = v285 * v15 + 0.0 + v286 * v18 + v287 * 0.0;
          double *v283 = v285 * v16 + 0.0 + v286 * 0.0 + v287 * v18;
          v283 += 2;
          --v282;
        }
        while (v282);
        goto LABEL_66;
      }
      uint64_t v88 = a5 & 0xFFFFFFFE;
      float64x2_t v276 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15, 0);
      float64x2_t v277 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0);
      float64x2_t v278 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0);
      v279 = &v365;
      uint64_t v280 = v88;
      v281 = (const double *)a3;
      do
      {
        float64x2x3_t v372 = vld3q_f64(v281);
        v281 += 6;
        v371.val[0] = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v276, v372.val[0]), v277, v372.val[1]), (float64x2_t)0, v372.val[2]);
        v371.val[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v278, v372.val[0]), (float64x2_t)0, v372.val[1]), v277, v372.val[2]);
        vst2q_f64(v279->f64, v371);
        v279 += 2;
        v280 -= 2;
      }
      while (v280);
      if (v88 != a5) {
        goto LABEL_64;
      }
LABEL_66:
      if (a5 < 1) {
        return;
      }
      double v288 = v80 + v81;
      double v289 = v79 + v82;
      double v290 = sqrt(v288 * v288 + v289 * v289);
      double v291 = v85 * 4.0;
      double v292 = v83 * (v290 * v290) + 1.0 + v84 * (v290 * (v290 * v290)) + v85 * (v290 * (v290 * (v290 * v290)));
      double v293 = v84 * 3.0 * v290 + v83 * 2.0 + v291 * (v290 * v290);
      double v294 = v292 + v288 * v288 * v293;
      double v295 = v288 * v289 * v293;
      double v296 = v292 + v289 * v289 * v293;
      double v297 = v86 * v294;
      double v298 = v87 * v295;
      double v299 = v86 * v295;
      double v300 = v87 * v296;
      double v301 = v76 * v297 + 0.0 + v75 * v299;
      double v302 = v76 * v298 + 0.0 + v75 * v300;
      double v303 = v77 * v297 + 0.0 + v78 * v299;
      double v304 = v77 * v298 + 0.0 + v78 * v300;
      if (a5 == 1)
      {
        uint64_t v305 = 0;
LABEL_72:
        uint64_t v313 = a5 - v305;
        uint64_t v314 = (16 * v305) | 8;
        v315 = (double *)((char *)a4 + v314);
        v316 = (double *)((char *)v365.f64 + v314);
        do
        {
          double v317 = *(v316 - 1);
          double v318 = v317 * v301 + 0.0 + *v316 * v303;
          double v319 = v317 * v302 + 0.0 + *v316 * v304;
          *(v315 - 1) = v318;
          double *v315 = v319;
          v315 += 2;
          v316 += 2;
          --v313;
        }
        while (v313);
        return;
      }
      float64x2_t v306 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v301, 0);
      float64x2_t v307 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v303, 0);
      float64x2_t v308 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v302, 0);
      uint64_t v305 = a5 & 0xFFFFFFFE;
      float64x2_t v309 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v304, 0);
      v310 = &v365;
      uint64_t v311 = v305;
      v312 = a4;
      do
      {
        float64x2x2_t v369 = vld2q_f64(v310->f64);
        v310 += 2;
        v370.val[0] = vmlaq_f64(vmlaq_f64((float64x2_t)0, v306, v369.val[0]), v307, v369.val[1]);
        v370.val[1] = vmlaq_f64(vmlaq_f64((float64x2_t)0, v308, v369.val[0]), v309, v369.val[1]);
        vst2q_f64(v312, v370);
        v312 += 4;
        v311 -= 2;
      }
      while (v311);
      if (v305 != a5) {
        goto LABEL_72;
      }
      return;
    case 4:
      if (a5 >= 1)
      {
        double v89 = *(double *)(a2 + 8);
        double v90 = *(double *)(a2 + 16);
        double v91 = v15 * v89 + 0.0 + v16 * 0.0;
        double v92 = v15 * 0.0 + 0.0 + v16 * v90;
        double v93 = v18 * v89 + 0.0 + 0.0;
        double v94 = v18 * 0.0 + 0.0 + v90 * 0.0;
        double v95 = v89 * 0.0 + 0.0 + v18 * 0.0;
        double v96 = v18 * v90 + 0.0;
        uint64_t v97 = a5;
        v98 = (double *)(a3 + 16);
        v99 = a4 + 1;
        do
        {
          *(v99 - 1) = 0.0;
          double v100 = *(v98 - 2) * v91 + 0.0;
          *(v99 - 1) = v100;
          double v101 = v100 + *(v98 - 1) * v93;
          *(v99 - 1) = v101;
          *(v99 - 1) = v101 + *v98 * v95;
          double *v99 = 0.0;
          double v102 = *(v98 - 2) * v92 + 0.0;
          double *v99 = v102;
          double v103 = v102 + *(v98 - 1) * v94;
          double *v99 = v103;
          double v104 = *v98;
          v98 += 3;
          double *v99 = v103 + v104 * v96;
          v99 += 2;
          --v97;
        }
        while (v97);
      }
      return;
    case 5:
      double v105 = v10 * v10 + v12 * v12;
      double v106 = sqrt(v105);
      double v107 = atan2(v106, *a1);
      double v108 = 0.0;
      double v109 = 0.0;
      if (v9 != 0.0)
      {
        if (v106 == 0.0)
        {
          double v108 = 0.707106781 / v9;
          double v109 = 0.707106781 / v9;
        }
        else
        {
          double v320 = v9 + v106 * v106 / v9;
          double v108 = v10 / v106 / v320;
          double v109 = v12 / v106 / v320;
        }
      }
      if (v106 == 0.0)
      {
        double v321 = 0.707106781;
        double v322 = -0.707106781;
        if (a5 < 1) {
          return;
        }
      }
      else
      {
        double v322 = -v12 / v105 * v107;
        double v321 = 1.0 / (v10 + v12 * v12 / v10) * v107;
        if (a5 < 1) {
          return;
        }
      }
      double v324 = *(double *)(a2 + 80);
      double v323 = *(double *)(a2 + 88);
      double v325 = *(double *)(a2 + 72);
      double v326 = v10 / (v106 + 1.0e-20);
      double v327 = v12 / (v106 + 1.0e-20);
      double v328 = v107 * (v107 * (v324 * 4.0) + v325 * 3.0 + v107 * (v323 * 5.0) * v107) * v107 + 1.0;
      uint64_t v329 = *(int *)(a2 + 168);
      double v330 = *(double *)(a2 + 24);
      double v331 = *(double *)(a2 + 32);
      double v332 = (double)*(int *)(a2 + 172);
      double v333 = v325 * (v107 * v107) + 1.0 + v324 * (v107 * (v107 * v107)) + v323 * (v107 * (v107 * (v107 * v107)));
      double v334 = -v106 / (v9 * v9 + v106 * v106);
      double v335 = v326 * v328 / v330 * (double)v329;
      double v336 = v327 * v328 / v331 * v332;
      double v337 = -(v327 * v333) / v330 * (double)v329;
      double v338 = v326 * v333 / v331 * v332;
      double v339 = v334 * v335 + 0.0 + v337 * 0.0;
      double v340 = v334 * v336 + 0.0 + v338 * 0.0;
      double v341 = v108 * v335 + 0.0 + v322 * v337;
      double v342 = v108 * v336 + 0.0 + v322 * v338;
      double v343 = v109 * v335 + 0.0 + v321 * v337;
      double v344 = v109 * v336 + 0.0 + v321 * v338;
      uint64_t v345 = a5;
      v346 = (double *)(a3 + 16);
      v347 = a4 + 1;
      do
      {
        *(v347 - 1) = 0.0;
        double v348 = *(v346 - 2) * v339 + 0.0;
        *(v347 - 1) = v348;
        double v349 = v348 + *(v346 - 1) * v341;
        *(v347 - 1) = v349;
        *(v347 - 1) = v349 + *v346 * v343;
        double *v347 = 0.0;
        double v350 = *(v346 - 2) * v340 + 0.0;
        double *v347 = v350;
        double v351 = v350 + *(v346 - 1) * v342;
        double *v347 = v351;
        double v352 = *v346;
        v346 += 3;
        double *v347 = v351 + v352 * v344;
        v347 += 2;
        --v345;
      }
      while (v345);
      return;
    case 8:
      if (a5 >= 1)
      {
        double v124 = sqrt(v11 * v11 + v13 * v13);
        double v125 = v124 * v124;
        double v126 = v125 * (v125 * v125);
        double v127 = v124 * v124 * v126;
        double v129 = *(double *)(a2 + 80);
        double v128 = *(double *)(a2 + 88);
        double v131 = *(double *)(a2 + 64);
        double v130 = *(double *)(a2 + 72);
        double v132 = *(double *)(a2 + 56);
        double v133 = v124
             * (v130 + v124 * (v128 + v124 * (v129 + v124 * (v132 + v124 * v131 * v124) * v124) * v124) * v124)
             * v124
             + 1.0;
        double v134 = v125 * (v128 * 4.0) + v130 * 2.0 + v129 * 6.0 * (v125 * v125) + v132 * 8.0 * v126 + v131 * 10.0 * v127;
        double v135 = *(double *)(a2 + 8);
        double v136 = *(double *)(a2 + 16);
        double v137 = v135 * (v133 + v11 * v11 * v134);
        double v138 = v11 * v13 * v134;
        double v139 = v136 * v138;
        double v140 = v135 * v138;
        double v141 = v136 * (v133 + v13 * v13 * v134);
        double v142 = v15 * v137 + 0.0 + v16 * (v135 * v138);
        double v143 = v15 * (v136 * v138) + 0.0 + v16 * v141;
        double v144 = v18 * v137 + 0.0 + v135 * v138 * 0.0;
        double v145 = v18 * (v136 * v138) + 0.0 + v141 * 0.0;
        double v146 = v137 * 0.0 + 0.0 + v18 * v140;
        double v147 = v139 * 0.0 + 0.0 + v18 * v141;
        uint64_t v148 = a5;
        v149 = (double *)(a3 + 16);
        v150 = a4 + 1;
        do
        {
          *(v150 - 1) = 0.0;
          double v151 = *(v149 - 2) * v142 + 0.0;
          *(v150 - 1) = v151;
          double v152 = v151 + *(v149 - 1) * v144;
          *(v150 - 1) = v152;
          *(v150 - 1) = v152 + *v149 * v146;
          double *v150 = 0.0;
          double v153 = *(v149 - 2) * v143 + 0.0;
          double *v150 = v153;
          double v154 = v153 + *(v149 - 1) * v145;
          double *v150 = v154;
          double v155 = *v149;
          v149 += 3;
          double *v150 = v154 + v155 * v147;
          v150 += 2;
          --v148;
        }
        while (v148);
      }
      return;
    case 0xA:
      double v156 = *(double *)(a2 + 72);
      double v157 = *(double *)(a2 + 80);
      double v158 = *(double *)(a2 + 96);
      double v353 = *(double *)(a2 + 88);
      double v354 = *(double *)(a2 + 24);
      double v355 = *(double *)(a2 + 32);
      int v160 = *(_DWORD *)(a2 + 168);
      int v159 = *(_DWORD *)(a2 + 172);
      double v161 = v11 + *(double *)(a2 + 56);
      double v162 = v13 + *(double *)(a2 + 64);
      double v163 = sqrt(v162 * v162 + v161 * v161);
      double v360 = v16;
      double v363 = 1.0 / *a1;
      double v357 = v15;
      double v164 = atan2(v163, 1.0);
      if (a5 >= 1)
      {
        double v165 = v161 / (v163 + 1.0e-20);
        double v166 = v162 / (v163 + 1.0e-20);
        double v167 = v164 * v164;
        double v168 = v167 * (v167 * v167);
        double v169 = v156 * (v164 * v164) + 1.0 + v157 * (v167 * v167) + v353 * v168 + v158 * (v167 * v167 * (v167 * v167));
        double v170 = 1.0 / (v163 * v163 + 1.0);
        double v171 = v170 * (v360 * (v162 / v163) + v161 / v163 * v357);
        double v172 = v170 * (v162 / v163 * 0.0 + v161 / v163 * v363);
        double v173 = v170 * (v363 * (v162 / v163) + v161 / v163 * 0.0);
        double v174 = v157 * 4.0 * (v164 * (v164 * v164))
             + (v156 + v156) * v164
             + v353 * 6.0 * (v164 * (v167 * v167))
             + v158 * 8.0 * (v164 * v168);
        double v175 = 1.0 / (v163 + 1.0e-20);
        double v176 = (v163 + 1.0e-20) * (v163 + 1.0e-20);
        double v177 = -v161 / v176;
        double v178 = v175 + v177 * (v161 / v163);
        double v179 = v162 / v163 * v177;
        double v180 = v360 * v179 + v178 * v357;
        double v181 = v179 * 0.0 + v178 * v363;
        double v182 = v363 * v179 + v178 * 0.0;
        double v183 = -v162 / v176;
        double v184 = v161 / v163 * v183;
        double v185 = v175 + v183 * (v162 / v163);
        double v186 = v360 * v185 + v184 * v357;
        double v187 = v185 * 0.0 + v184 * v363;
        double v188 = v363 * v185 + v184 * 0.0;
        double v189 = v164 * (v171 * v174);
        double v190 = v171 * v169;
        double v191 = v164 * v169;
        double v192 = v165 * (v171 * v169) + v189 * v165 + v164 * v169 * v180;
        double v193 = v164 * (v172 * v174);
        double v194 = v172 * v169;
        double v195 = v165 * v194 + v193 * v165 + v164 * v169 * v181;
        double v196 = v164 * (v173 * v174);
        double v197 = v173 * v169;
        double v198 = v165 * v197 + v196 * v165 + v191 * v182;
        double v199 = v166 * v190 + v189 * v166 + v191 * v186;
        double v200 = v166 * v194 + v193 * v166 + v191 * v187;
        double v201 = v166 * v197 + v196 * v166 + v191 * v188;
        double v202 = (double)v160 / v354;
        double v203 = v202 * v192;
        double v204 = v202 * v195;
        double v205 = v202 * v198;
        double v206 = (double)v159 / v355;
        double v207 = v206 * v199;
        double v208 = v206 * v200;
        double v209 = v206 * v201;
        uint64_t v210 = a5;
        v211 = (double *)(a3 + 16);
        v212 = a4 + 1;
        do
        {
          *(v212 - 1) = 0.0;
          double v213 = *(v211 - 2) * v203 + 0.0;
          *(v212 - 1) = v213;
          double v214 = v213 + *(v211 - 1) * v204;
          *(v212 - 1) = v214;
          *(v212 - 1) = v214 + *v211 * v205;
          double *v212 = 0.0;
          double v215 = *(v211 - 2) * v207 + 0.0;
          double *v212 = v215;
          double v216 = v215 + *(v211 - 1) * v208;
          double *v212 = v216;
          double v217 = *v211;
          v211 += 3;
          double *v212 = v216 + v217 * v209;
          v212 += 2;
          --v210;
        }
        while (v210);
      }
      return;
    case 0xB:
      if (a5 >= 1)
      {
        double v218 = v11 + *(double *)(a2 + 56);
        double v219 = v13 + *(double *)(a2 + 64);
        double v220 = sqrt(v218 * v218 + v219 * v219);
        double v221 = v220 * v220;
        double v222 = v221 * (v221 * v221);
        double v223 = v220 * v220 * v222;
        double v224 = *(double *)(a2 + 72);
        double v225 = *(double *)(a2 + 80);
        double v226 = *(double *)(a2 + 88);
        double v227 = *(double *)(a2 + 96);
        double v228 = *(double *)(a2 + 104);
        double v229 = *(double *)(a2 + 112);
        double v230 = *(double *)(a2 + 120);
        double v231 = v220
             * (v224
              + v220
              * (v225
               + v220
               * (v226 + v220 * (v227 + v220 * (v228 + v220 * (v229 + v220 * v230 * v220) * v220) * v220) * v220)
               * v220)
              * v220)
             * v220
             + 1.0;
        double v232 = v225 * 4.0 * v221
             + v224 * 2.0
             + v226 * 6.0 * (v221 * v221)
             + v227 * 8.0 * v222
             + v228 * 10.0 * v223
             + v229 * 12.0 * v223
             + v230 * 14.0 * v223;
        double v233 = *(double *)(a2 + 8);
        double v234 = *(double *)(a2 + 16);
        double v235 = v233 * (v231 + v218 * v218 * v232);
        double v236 = v218 * v219 * v232;
        double v237 = v234 * v236;
        double v238 = v233 * v236;
        double v239 = v234 * (v231 + v219 * v219 * v232);
        double v240 = v15 * v235 + 0.0 + v16 * v238;
        double v241 = v15 * v237 + 0.0 + v16 * v239;
        double v242 = v18 * v235 + 0.0 + v238 * 0.0;
        double v243 = v18 * v237 + 0.0 + v239 * 0.0;
        double v244 = v235 * 0.0 + 0.0 + v18 * v238;
        double v245 = v237 * 0.0 + 0.0 + v18 * v239;
        uint64_t v246 = a5;
        v247 = (double *)(a3 + 16);
        v248 = a4 + 1;
        do
        {
          *(v248 - 1) = 0.0;
          double v249 = *(v247 - 2) * v240 + 0.0;
          *(v248 - 1) = v249;
          double v250 = v249 + *(v247 - 1) * v242;
          *(v248 - 1) = v250;
          *(v248 - 1) = v250 + *v247 * v244;
          double *v248 = 0.0;
          double v251 = *(v247 - 2) * v241 + 0.0;
          double *v248 = v251;
          double v252 = v251 + *(v247 - 1) * v243;
          double *v248 = v252;
          double v253 = *v247;
          v247 += 3;
          double *v248 = v252 + v253 * v245;
          v248 += 2;
          --v246;
        }
        while (v246);
      }
      return;
    default:
      if ((v17 - 15) < 0xFFFFFFFD) {
        __assert_rtn("g_jac_apply_proj", "g_jac.c", 700, "0 && \"Not implemented!\"");
      }
      double v356 = -v10 / (v9 * v9);
      double v359 = -v12 / (v9 * v9);
      double v362 = 1.0 / *a1;
      if ((v17 - 12) >= 3) {
        __assert_rtn("g_proj_bspline_cnt", "g_camera.c", 924, "0 && \"Not a spline based camera model.\"");
      }
      g_pinhole_to_pixel_jac(0, 0, v17, (double *)(a2 + 72), dword_21BB7A740[v17 - 12], *(_DWORD *)(a2 + 168), *(_DWORD *)(a2 + 172), &v365, v11, v13, *(double *)(a2 + 8), *(double *)(a2 + 16), *(double *)(a2 + 40), *(double *)(a2 + 48), *(double *)(a2 + 56), *(double *)(a2 + 64), 0, 0, 0,
        0,
        0);
      if (a5 >= 1)
      {
        double v110 = v356 * v365.f64[0] + 0.0 + v359 * v365.f64[1];
        double v111 = v356 * v366 + 0.0 + v359 * v367;
        double v112 = v362 * v365.f64[0] + 0.0 + v365.f64[1] * 0.0;
        double v113 = v362 * v366 + 0.0 + v367 * 0.0;
        double v114 = v365.f64[0] * 0.0 + 0.0 + v362 * v365.f64[1];
        double v115 = v366 * 0.0 + 0.0 + v362 * v367;
        uint64_t v116 = a5;
        v117 = (double *)(a3 + 16);
        v118 = a4 + 1;
        do
        {
          *(v118 - 1) = 0.0;
          double v119 = *(v117 - 2) * v110 + 0.0;
          *(v118 - 1) = v119;
          double v120 = v119 + *(v117 - 1) * v112;
          *(v118 - 1) = v120;
          *(v118 - 1) = v120 + *v117 * v114;
          double *v118 = 0.0;
          double v121 = *(v117 - 2) * v111 + 0.0;
          double *v118 = v121;
          double v122 = v121 + *(v117 - 1) * v113;
          double *v118 = v122;
          double v123 = *v117;
          v117 += 3;
          double *v118 = v122 + v123 * v115;
          v118 += 2;
          --v116;
        }
        while (v116);
      }
      return;
  }
}

void g_jac_rel_pose_so3_scale(uint64_t a1, double *a2, double *a3, double *a4, int a5, unsigned int a6, int a7, int a8, int a9, double *a10, double *a11)
{
  uint64_t v193 = *MEMORY[0x263EF8340];
  if (a6 == 6)
  {
    double v173 = a10[1];
    double v174 = *a10;
    double v172 = a10[2];
    double v19 = a10[4];
    double v20 = a10[5];
    __double2 v21 = __sincos_stret(a10[3]);
    __double2 v22 = __sincos_stret(v19);
    __double2 v23 = __sincos_stret(v20);
    double v24 = v21.__cosval * v22.__cosval;
    double v25 = v21.__cosval * v22.__sinval * v23.__sinval - v21.__sinval * v23.__cosval;
    double v26 = v21.__sinval * v23.__sinval + v21.__cosval * v22.__sinval * v23.__cosval;
    double v27 = v21.__sinval * v22.__cosval;
    double v28 = v21.__cosval * v23.__cosval + v21.__sinval * v22.__sinval * v23.__sinval;
    double v29 = v21.__sinval * v22.__sinval * v23.__cosval - v21.__cosval * v23.__sinval;
    double v30 = -v22.__sinval;
    double v31 = v22.__cosval * v23.__sinval;
    double v32 = v22.__cosval * v23.__cosval;
    long long v178 = 0u;
    long long v179 = 0u;
    float64x2_t v177 = 0u;
    float64x2_t v175 = 0u;
    memset(v176, 0, sizeof(v176));
    if (a4)
    {
LABEL_3:
      double v33 = v26;
      double v170 = v31;
      double v34 = v27;
      double v35 = v28;
      double v36 = v32;
      double v37 = v24;
      double v38 = v29;
      g_coords_diff((double *)a1, a4, (uint64_t)&v175);
      double v29 = v38;
      double v24 = v37;
      double v32 = v36;
      double v28 = v35;
      double v27 = v34;
      double v31 = v170;
      double v26 = v33;
      goto LABEL_7;
    }
  }
  else
  {
    if (a6 != 3) {
      return;
    }
    double v39 = a10[1];
    double v40 = a10[2];
    __double2 v41 = __sincos_stret(*a10);
    __double2 v42 = __sincos_stret(v39);
    __double2 v43 = __sincos_stret(v40);
    double v24 = v41.__cosval * v42.__cosval;
    double v25 = v41.__cosval * v42.__sinval * v43.__sinval - v41.__sinval * v43.__cosval;
    double v26 = v41.__sinval * v43.__sinval + v41.__cosval * v42.__sinval * v43.__cosval;
    double v27 = v41.__sinval * v42.__cosval;
    double v28 = v41.__cosval * v43.__cosval + v41.__sinval * v42.__sinval * v43.__sinval;
    double v29 = v41.__sinval * v42.__sinval * v43.__cosval - v41.__cosval * v43.__sinval;
    double v30 = -v42.__sinval;
    double v31 = v42.__cosval * v43.__sinval;
    double v32 = v42.__cosval * v43.__cosval;
    double v173 = 0.0;
    double v174 = 0.0;
    double v172 = 0.0;
    long long v178 = 0u;
    long long v179 = 0u;
    float64x2_t v177 = 0u;
    float64x2_t v175 = 0u;
    memset(v176, 0, sizeof(v176));
    if (a4) {
      goto LABEL_3;
    }
  }
  float64x2_t v44 = *(float64x2_t *)(a1 + 48);
  v176[1] = *(_OWORD *)(a1 + 32);
  float64x2_t v177 = v44;
  long long v45 = *(_OWORD *)(a1 + 80);
  long long v178 = *(_OWORD *)(a1 + 64);
  long long v179 = v45;
  long long v46 = *(_OWORD *)(a1 + 16);
  float64x2_t v175 = *(float64x2_t *)a1;
  v176[0] = v46;
LABEL_7:
  double v47 = a2[1];
  double v49 = a2[2];
  double v48 = a2[3];
  double v50 = a2[6];
  double v51 = a2[7];
  float64_t v52 = v175.f64[0] * *a2 + 0.0 + *((double *)v176 + 1) * v48 + v177.f64[0] * v50;
  double v53 = a2[4];
  double v54 = a2[5];
  float64_t v55 = v175.f64[0] * v47 + 0.0 + *((double *)v176 + 1) * v53 + v177.f64[0] * v51;
  double v56 = a2[8];
  float64_t v57 = v175.f64[0] * v49 + 0.0 + *((double *)v176 + 1) * v54 + v177.f64[0] * v56;
  float64_t v58 = v175.f64[1] * *a2 + 0.0 + *(double *)&v176[1] * v48 + v177.f64[1] * v50;
  float64_t v59 = v175.f64[1] * v47 + 0.0 + *(double *)&v176[1] * v53 + v177.f64[1] * v51;
  float64_t v60 = v175.f64[1] * v49 + 0.0 + *(double *)&v176[1] * v54 + v177.f64[1] * v56;
  double v61 = *(double *)v176 * *a2 + 0.0 + *((double *)&v176[1] + 1) * v48 + *(double *)&v178 * v50;
  double v62 = *(double *)v176 * v47 + 0.0 + *((double *)&v176[1] + 1) * v53 + *(double *)&v178 * v51;
  double v63 = *(double *)v176 * v49 + 0.0 + *((double *)&v176[1] + 1) * v54 + *(double *)&v178 * v56;
  v190[0] = v24 * v52 + 0.0 + v27 * v58 + v30 * v61;
  v190[1] = v24 * v55 + 0.0 + v27 * v59 + v30 * v62;
  v190[2] = v24 * v57 + 0.0 + v27 * v60 + v30 * v63;
  v190[3] = v25 * v52 + 0.0 + v28 * v58 + v31 * v61;
  v190[4] = v25 * v55 + 0.0 + v28 * v59 + v31 * v62;
  v190[5] = v25 * v57 + 0.0 + v28 * v60 + v31 * v63;
  double v166 = v55;
  double v168 = v52;
  double v158 = v58;
  double v155 = v62;
  double v156 = v61;
  double v160 = v59;
  v190[6] = v26 * v52 + 0.0 + v29 * v58 + v32 * v61;
  v190[7] = v26 * v55 + 0.0 + v29 * v59 + v32 * v62;
  double v162 = v60;
  double v164 = v57;
  double v154 = v63;
  v190[8] = v26 * v57 + 0.0 + v29 * v60 + v32 * v63;
  g_log_so3((double *)&v191, v190);
  double v64 = a2[9];
  double v65 = a2[10];
  double v66 = a2[11];
  float64x2_t v67 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, v175, v64 - *((double *)&v178 + 1)), *(float64x2_t *)((char *)v176 + 8), v65 - *(double *)&v179), v177, v66 - *((double *)&v179 + 1));
  double v68 = *(double *)v176 * (v64 - *((double *)&v178 + 1))
      + 0.0
      + *((double *)&v176[1] + 1) * (v65 - *(double *)&v179)
      + *(double *)&v178 * (v66 - *((double *)&v179 + 1));
  if (a5)
  {
    double v69 = sqrt((*(double *)(a1 + 80) - v65) * (*(double *)(a1 + 80) - v65)+ (*(double *)(a1 + 72) - v64) * (*(double *)(a1 + 72) - v64)+ (*(double *)(a1 + 88) - v66) * (*(double *)(a1 + 88) - v66));
    double v70 = 1.0 / v69;
    BOOL v71 = v69 > 0.000001;
    double v72 = 1000000.0;
    if (v71) {
      double v72 = v70;
    }
    float64x2_t v67 = vmulq_n_f64(v67, v72);
    double v171 = v72;
    double v68 = v68 * v72;
    if (v71) {
      double v73 = v70;
    }
    else {
      double v73 = 0.0;
    }
  }
  else
  {
    double v171 = 1.0;
    double v73 = 1.0;
  }
  double v74 = a11;
  double v75 = v174;
  double v76 = v173;
  double v77 = v172;
  if (a3)
  {
    double v75 = v174 * *a3;
    double v76 = v173 * *a3;
    double v77 = v172 * *a3;
  }
  float64_t v78 = v67.f64[1];
  *(_OWORD *)a10 = v191;
  *((void *)a10 + 2) = v192;
  if (a6 != 3)
  {
    a10[3] = v75 - v67.f64[0];
    a10[4] = v76 - v67.f64[1];
    a10[5] = v77 - v68;
  }
  if (a11)
  {
    float64x2_t v153 = v67;
    g_jac_right_jacobian_so3(v189, (double *)&v191);
    g_inv_3x3(&v180, v189);
    if (a5)
    {
      if (a4) {
        __assert_rtn("g_jac_rel_pose_so3_scale", "g_jac.c", 2657, "!dpos");
      }
      double v79 = *(double *)(a1 + 72) - a2[9];
      double v80 = *(double *)(a1 + 80) - a2[10];
      double v81 = *(double *)(a1 + 88) - a2[11];
      float64x2_t v82 = vnegq_f64(v153);
      float64x2_t v148 = vmulq_n_f64(vmulq_n_f64(v82, v80), v73 * v73);
      float64x2_t v149 = vmulq_n_f64(vmulq_n_f64(v82, v79), v73 * v73);
      float64x2_t v147 = vmulq_n_f64(vmulq_n_f64(v82, v81), v73 * v73);
      double v150 = v73 * v73 * -(v68 * v80);
      double v151 = v73 * v73 * -(v68 * v81);
      double v152 = v73 * v73 * -(v68 * v79);
      if (a7 <= 0)
      {
LABEL_42:
        if (a8 >= 1)
        {
LABEL_43:
          float64x2_t v157 = v175;
          float64x2_t v159 = *(float64x2_t *)((char *)v176 + 8);
          double v163 = *(double *)v176;
          double v165 = *((double *)&v176[1] + 1);
          float64x2_t v161 = v177;
          double v112 = v180;
          double v113 = v181;
          double v114 = v182;
          double v115 = v183;
          double v116 = v184;
          double v167 = *(double *)&v178;
          double v169 = v185;
          double v74 = &a11[a7 * a6];
          double v117 = v186;
          double v118 = v187;
          double v119 = v188;
          bzero(v74, 8 * a6 * (unint64_t)a8);
          double v120 = -v112;
          double v121 = -v113;
          double v122 = -v114;
          double v123 = -v115;
          double v124 = -v116;
          double v125 = -v169;
          double v126 = -v117;
          double v127 = -v118;
          double v128 = -v119;
          BOOL v130 = a6 == 6 && a8 == 6;
          if (a6 == 3 && a8 == 3)
          {
            *double v74 = v122;
            v74[1] = v125;
            v74[6] = v120;
            v74[7] = v123;
            v74[2] = v128;
            v74[3] = v121;
            uint64_t v131 = 8;
            v74[4] = v124;
            v74[5] = v127;
          }
          else if (a6 == 3 && a8 == 6)
          {
            v74[9] = v122;
            v74[10] = v125;
            v74[15] = v120;
            v74[16] = v123;
            v74[11] = v128;
            v74[12] = v121;
            uint64_t v131 = 17;
            v74[13] = v124;
            v74[14] = v127;
          }
          else
          {
            if (!v130)
            {
              log_msg(1, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/g_jac.c", 2716, (uint64_t)"g_jac_rel_pose_so3_scale", "%s doesn't support n_par2 = %d and n_res = %d", "g_jac_rel_pose_so3_scale", a8, a6);
              abort();
            }
            v74[18] = v122;
            v74[19] = v125;
            *(float64x2_t *)(v74 + 3) = vmlaq_n_f64(vnegq_f64(v149), v157, v171);
            v74[24] = v121;
            v74[25] = v124;
            *(float64x2_t *)(v74 + 9) = vmlaq_n_f64(vnegq_f64(v148), v159, v171);
            v74[30] = v120;
            v74[31] = v123;
            *(float64x2_t *)(v74 + 15) = vmlaq_n_f64(vnegq_f64(v147), v161, v171);
            v74[20] = v128;
            v74[5] = -(v152 - v163 * v171);
            v74[26] = v127;
            v74[11] = -(v150 - v165 * v171);
            v74[32] = v126;
            double v126 = -(v151 - v167 * v171);
            uint64_t v131 = 17;
          }
          v74[v131] = v126;
        }
LABEL_58:
        if (a3)
        {
          if (a9 >= 1)
          {
            double v132 = &v74[a8 * a6];
            bzero(v132, 8 * a6 * (unint64_t)a9);
            v132[3] = -(v174 * v171);
            v132[4] = -(v173 * v171);
            v132[5] = -(v172 * v171);
          }
        }
        return;
      }
      float64x2_t v143 = v82;
      double v142 = -v68;
    }
    else
    {
      if (a7 <= 0)
      {
        double v150 = 0.0;
        double v151 = 0.0;
        double v152 = 0.0;
        float64x2_t v148 = 0u;
        float64x2_t v149 = 0u;
        float64x2_t v147 = 0u;
        if (a8 >= 1) {
          goto LABEL_43;
        }
        goto LABEL_58;
      }
      float64x2_t v143 = vnegq_f64(v153);
      double v142 = -v68;
      if (a4)
      {
        float64_t v144 = v78;
        double v145 = v68;
        double v83 = a4[1];
        double v84 = a4[2];
        double v85 = a4[3];
        double v86 = a4[4];
        double v87 = a4[5];
        double v134 = v175.f64[0] * v85 + 0.0 + *((double *)v176 + 1) * v86 + v177.f64[0] * v87;
        double v135 = v175.f64[0] * *a4 + 0.0 + *((double *)v176 + 1) * v83 + v177.f64[0] * v84;
        double v88 = a4[6];
        double v89 = a4[7];
        double v90 = a4[8];
        double v133 = v175.f64[0] * v88 + 0.0 + *((double *)v176 + 1) * v89 + v177.f64[0] * v90;
        double v136 = v175.f64[1] * v85 + 0.0 + *(double *)&v176[1] * v86 + v177.f64[1] * v87;
        double v137 = v175.f64[1] * v88 + 0.0 + *(double *)&v176[1] * v89 + v177.f64[1] * v90;
        double v138 = v175.f64[1] * *a4 + 0.0 + *(double *)&v176[1] * v83 + v177.f64[1] * v84;
        double v140 = *(double *)v176 * v85 + 0.0 + *((double *)&v176[1] + 1) * v86 + *(double *)&v178 * v87;
        double v141 = *(double *)v176 * *a4 + 0.0 + *((double *)&v176[1] + 1) * v83 + *(double *)&v178 * v84;
        double v152 = 0.0;
        double v139 = *(double *)v176 * v88 + 0.0 + *((double *)&v176[1] + 1) * v89 + *(double *)&v178 * v90;
        double v150 = 0.0;
        double v151 = 0.0;
        float64x2_t v148 = 0u;
        float64x2_t v149 = 0u;
        float64x2_t v147 = 0u;
        goto LABEL_27;
      }
      double v151 = 0.0;
      double v152 = 0.0;
      double v150 = 0.0;
      float64x2_t v148 = 0u;
      float64x2_t v149 = 0u;
      float64x2_t v147 = 0u;
    }
    float64_t v144 = v78;
    double v145 = v68;
    double v134 = *((double *)v176 + 1);
    double v135 = v175.f64[0];
    double v140 = *((double *)&v176[1] + 1);
    double v136 = *(double *)&v176[1];
    double v141 = *(double *)v176;
    double v137 = v177.f64[1];
    double v133 = v177.f64[0];
    double v138 = v175.f64[1];
    double v139 = *(double *)&v178;
LABEL_27:
    double v91 = v180;
    double v92 = v181;
    double v93 = v182;
    double v94 = v183;
    double v95 = v184;
    double v96 = v185;
    double v97 = v186;
    double v98 = v187;
    double v146 = v188;
    bzero(a11, 8 * a6 * (unint64_t)a7);
    double v99 = v91 * v168 + 0.0 + v92 * v166 + v93 * v164;
    double v100 = v91 * v158 + 0.0 + v92 * v160 + v93 * v162;
    double v101 = v91 * v156 + 0.0 + v92 * v155 + v93 * v154;
    double v102 = v94 * v168 + 0.0 + v95 * v166 + v96 * v164;
    double v103 = v94 * v158 + 0.0 + v95 * v160 + v96 * v162;
    double v104 = v94 * v156 + 0.0 + v95 * v155 + v96 * v154;
    double v105 = v97 * v168 + 0.0 + v98 * v166 + v146 * v164;
    double v106 = v97 * v158 + 0.0 + v98 * v160 + v146 * v162;
    double v107 = v97 * v156 + 0.0 + v98 * v155 + v146 * v154;
    BOOL v109 = a6 == 6 && a7 == 6;
    if (a6 == 3 && a7 == 3)
    {
      *a11 = v101;
      a11[1] = v104;
      a11[3] = v100;
      a11[4] = v103;
      a11[6] = v99;
      a11[7] = v102;
      uint64_t v110 = 8;
      uint64_t v111 = 5;
      a11[2] = v107;
    }
    else if (a6 == 3 && a7 == 6)
    {
      a11[9] = v101;
      a11[10] = v104;
      a11[12] = v100;
      a11[13] = v103;
      a11[15] = v99;
      a11[16] = v102;
      uint64_t v110 = 17;
      uint64_t v111 = 14;
      a11[11] = v107;
    }
    else
    {
      if (!v109)
      {
        log_msg(1, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/g_jac.c", 2692, (uint64_t)"g_jac_rel_pose_so3_scale", "%s doesn't support n_par1 = %d and n_res = %d", "g_jac_rel_pose_so3_scale", a7, a6);
        abort();
      }
      a11[33] = 0.0;
      a11[18] = v101;
      a11[19] = v104;
      a11[3] = v149.f64[0] - v135 * v171;
      a11[4] = v149.f64[1] - v138 * v171;
      a11[24] = v100;
      a11[25] = v103;
      a11[9] = v148.f64[0] - v134 * v171;
      a11[10] = v148.f64[1] - v136 * v171;
      a11[28] = 0.0;
      a11[15] = v147.f64[0] - v133 * v171;
      a11[16] = v147.f64[1] - v137 * v171;
      a11[34] = v145;
      a11[21] = v144;
      a11[22] = v143.f64[0];
      a11[20] = v107;
      a11[5] = v152 - v141 * v171;
      a11[23] = 0.0;
      a11[26] = v106;
      a11[27] = v142;
      a11[11] = v150 - v140 * v171;
      a11[29] = v153.f64[0];
      a11[30] = v99;
      a11[31] = v102;
      a11[32] = v105;
      double v106 = v151 - v139 * v171;
      double v105 = v143.f64[1];
      uint64_t v110 = 35;
      uint64_t v111 = 17;
    }
    a11[v111] = v106;
    a11[v110] = v105;
    goto LABEL_42;
  }
}

void g_jac_abs_pose_so3(double *a1, double *a2, int a3, int a4, double *a5, uint64_t a6)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a2)
    {
      double v10 = *a2;
      double v11 = a1[3];
      double v12 = a2[3];
      uint64_t v115 = (uint64_t)(a2 + 3);
      double v13 = a2[6];
      uint64_t v114 = (uint64_t)(a2 + 6);
      double v14 = a1[6];
      double v15 = *a1 * *a2 + 0.0 + v11 * v12 + v14 * v13;
      uint64_t v16 = (uint64_t)(a2 + 1);
      double v17 = a2[1];
      uint64_t v18 = (uint64_t)(a2 + 4);
      double v19 = a2[4];
      uint64_t v20 = (uint64_t)(a2 + 7);
      double v21 = a2[7];
      double v22 = *a1 * v17 + 0.0 + v11 * v19 + v14 * v21;
      uint64_t v23 = (uint64_t)(a2 + 2);
      double v24 = a2[2];
      double v116 = 0.0;
      uint64_t v25 = (uint64_t)(a2 + 5);
      double v26 = a2[5];
      double v27 = *a1 * v24 + 0.0 + v11 * v26;
      double v110 = 0.0;
      double v111 = 0.0;
      double v112 = 0.0;
      double v113 = 0.0;
      double v28 = 0.0;
      uint64_t v29 = (uint64_t)(a2 + 8);
      double v30 = a2[8];
      double v31 = 0.0;
      double v32 = 0.0;
      double v33 = 0.0;
      double v34 = 0.0;
      double v35 = 0.0;
      double v36 = 0.0;
    }
    else
    {
      double v110 = *a5;
      double v111 = a5[1];
      double v116 = a5[2];
      double v37 = a5[4];
      double v38 = a5[5];
      __double2 v39 = __sincos_stret(a5[3]);
      __double2 v40 = __sincos_stret(v37);
      __double2 v41 = __sincos_stret(v38);
      double v36 = v39.__cosval * v40.__cosval;
      double v17 = v39.__cosval * v40.__sinval * v41.__sinval - v39.__sinval * v41.__cosval;
      double v34 = v39.__sinval * v41.__sinval + v39.__cosval * v40.__sinval * v41.__cosval;
      double v12 = v39.__sinval * v40.__cosval;
      double v32 = v39.__cosval * v41.__cosval + v39.__sinval * v40.__sinval * v41.__sinval;
      double v26 = v39.__sinval * v40.__sinval * v41.__cosval - v39.__cosval * v41.__sinval;
      double v21 = v40.__cosval * v41.__sinval;
      double v30 = v40.__cosval * v41.__cosval;
      double v42 = a1[3];
      double v14 = a1[6];
      double v15 = *a1 * (v39.__cosval * v40.__cosval) + 0.0 + v42 * (v39.__sinval * v40.__cosval) - v14 * v40.__sinval;
      double v22 = *a1 * v17 + 0.0 + v42 * v32 + v14 * (v40.__cosval * v41.__sinval);
      uint64_t v25 = 40;
      uint64_t v20 = 56;
      uint64_t v16 = 8;
      uint64_t v115 = 24;
      uint64_t v114 = 48;
      uint64_t v18 = 32;
      uint64_t v23 = 16;
      uint64_t v29 = 64;
      double v28 = v40.__cosval * v41.__sinval;
      double v31 = v26;
      double v33 = v39.__sinval * v40.__cosval;
      double v35 = v17;
      double v10 = v39.__cosval * v40.__cosval;
      double v27 = *a1 * v34 + 0.0 + v42 * v26;
      double v112 = -v40.__sinval;
      double v113 = v40.__cosval * v41.__cosval;
      double v13 = -v40.__sinval;
      double v19 = v32;
      double v24 = v34;
    }
    v129[0] = v15;
    v129[1] = v22;
    double v43 = a1[1];
    double v44 = a1[2];
    double v45 = a1[4];
    double v46 = a1[5];
    double v47 = a1[7];
    double v48 = a1[8];
    v129[2] = v27 + v14 * v30;
    v129[3] = v43 * v10 + 0.0 + v45 * v12 + v47 * v13;
    v129[4] = v43 * v17 + 0.0 + v45 * v19 + v47 * v21;
    v129[5] = v43 * v24 + 0.0 + v45 * v26 + v47 * v30;
    v129[6] = v44 * v10 + 0.0 + v46 * v12 + v48 * v13;
    v129[7] = v44 * v17 + 0.0 + v46 * v19 + v48 * v21;
    v129[8] = v44 * v24 + 0.0 + v46 * v26 + v48 * v30;
    g_log_so3((double *)&v130, v129);
    g_jac_right_jacobian_so3(v128, (double *)&v130);
    g_inv_3x3(&v119, v128);
    if (a2)
    {
      double v36 = *a2;
      double v35 = *(double *)v16;
      double v49 = v121;
      double v34 = *(double *)v23;
      double v50 = v119 * *a2 + 0.0 + v120 * *(double *)v16 + v121 * *(double *)v23;
      double v33 = *(double *)v115;
      double v32 = *(double *)v18;
      double v31 = *(double *)v25;
      double v51 = v119 * *(double *)v115 + 0.0 + v120 * *(double *)v18 + v121 * *(double *)v25;
      double v52 = *(double *)v114;
      double v28 = *(double *)v20;
      double v53 = v119 * *(double *)v114 + 0.0 + v120 * *(double *)v20;
      double v54 = *(double *)v29;
      int v56 = a4;
      int v55 = a3;
    }
    else
    {
      double v49 = v121;
      double v50 = v119 * v36 + 0.0 + v120 * v35 + v121 * v34;
      double v51 = v119 * v33 + 0.0 + v120 * v32 + v121 * v31;
      double v52 = v112;
      double v53 = v119 * v112 + 0.0 + v120 * v28;
      int v56 = a4;
      int v55 = a3;
      double v54 = v113;
    }
    double v58 = v122;
    double v57 = v123;
    double v59 = v124;
    double v60 = v125;
    double v62 = v126;
    double v61 = v127;
    double v63 = *a1;
    double v64 = a1[1];
    double v65 = a1[6];
    double v66 = a1[7];
    double v68 = a1[2];
    double v67 = a1[3];
    double v70 = a1[4];
    double v69 = a1[5];
    double v71 = a1[8];
    *(_OWORD *)a5 = v130;
    *((void *)a5 + 2) = v131;
    double v72 = v116;
    if (v55 == 6)
    {
      if (a2)
      {
        a5[3] = a2[9] - a1[9];
        a5[4] = a2[10] - a1[10];
        double v72 = a2[11];
      }
      else
      {
        a5[3] = v110 - a1[9];
        a5[4] = v111 - a1[10];
      }
      a5[5] = v72 - a1[11];
    }
    if (v56 && a6)
    {
      if (v56 != v55) {
        __assert_rtn("g_jac_abs_pose_so3", "g_jac.c", 2875, "n_par == n_res");
      }
      double v73 = v60 * v36 + 0.0;
      double v74 = v58 * v36 + 0.0 + v57 * v35;
      double v75 = v52;
      double v76 = v74 + v59 * v34;
      double v77 = v73 + v62 * v35 + v61 * v34;
      double v78 = v58 * v33 + 0.0 + v57 * v32 + v59 * v31;
      double v79 = v58 * v75 + 0.0 + v57 * v28;
      double v80 = v60 * v33 + 0.0 + v62 * v32 + v61 * v31;
      double v81 = v53 + v49 * v54;
      double v82 = v79 + v59 * v54;
      double v83 = v60 * v75 + 0.0 + v62 * v28 + v61 * v54;
      double v84 = v50 * v63 + 0.0 + v51 * v67;
      double v85 = v50 * v64 + 0.0 + v51 * v70;
      double v86 = v50 * v68 + 0.0 + v51 * v69;
      double v87 = v76 * v63 + 0.0 + v78 * v67;
      double v88 = v76 * v64 + 0.0 + v78 * v70;
      double v89 = v76 * v68 + 0.0 + v78 * v69;
      double v90 = v77 * v63 + 0.0 + v80 * v67;
      double v91 = v77 * v64 + 0.0 + v80 * v70;
      double v92 = v77 * v68 + 0.0 + v80 * v69;
      double v93 = v84 + v81 * v65;
      double v94 = v85 + v81 * v66;
      double v95 = v86 + v81 * v71;
      double v96 = v87 + v82 * v65;
      double v97 = v88 + v82 * v66;
      double v98 = v89 + v82 * v71;
      double v99 = v90 + v83 * v65;
      double v100 = v91 + v83 * v66;
      double v101 = v92 + v83 * v71;
      if (v55 == 6)
      {
        *(_OWORD *)(a6 + 256) = 0u;
        *(_OWORD *)(a6 + 272) = 0u;
        *(_OWORD *)(a6 + 224) = 0u;
        *(_OWORD *)(a6 + 240) = 0u;
        *(_OWORD *)(a6 + 192) = 0u;
        *(_OWORD *)(a6 + 20_Block_object_dispose(&STACK[0x220], 8) = 0u;
        *(_OWORD *)(a6 + 160) = 0u;
        *(_OWORD *)(a6 + 176) = 0u;
        *(_OWORD *)(a6 + 12_Block_object_dispose(&STACK[0x220], 8) = 0u;
        *(_OWORD *)(a6 + 144) = 0u;
        *(_OWORD *)(a6 + 96) = 0u;
        *(_OWORD *)(a6 + 112) = 0u;
        *(_OWORD *)(a6 + 64) = 0u;
        *(_OWORD *)(a6 + 80) = 0u;
        *(_OWORD *)(a6 + 32) = 0u;
        *(_OWORD *)(a6 + 4_Block_object_dispose(&STACK[0x220], 8) = 0u;
        uint64_t v102 = 3;
        uint64_t v103 = 10;
        *(double *)(a6 + 192) = v94;
        uint64_t v104 = 17;
        uint64_t v105 = 32;
        *(double *)(a6 + 240) = v93;
        uint64_t v106 = 26;
        uint64_t v107 = 20;
        uint64_t v108 = 31;
        uint64_t v109 = 25;
        *(double *)(a6 + 144) = v95;
        *(double *)(a6 + 152) = v98;
        double v94 = v97;
        double v93 = v96;
        double v98 = v92 + v83 * v71;
        double v97 = v91 + v83 * v66;
        double v96 = v99;
        double v101 = 1.0;
        double v100 = 1.0;
        double v99 = 1.0;
        *(_OWORD *)a6 = 0u;
        *(_OWORD *)(a6 + 16) = 0u;
      }
      else
      {
        if (v55 != 3) {
          return;
        }
        *(double *)a6 = v95;
        uint64_t v102 = 8;
        uint64_t v103 = 5;
        uint64_t v104 = 2;
        uint64_t v105 = 7;
        uint64_t v106 = 4;
        uint64_t v107 = 1;
        uint64_t v108 = 6;
        uint64_t v109 = 3;
      }
      *(double *)(a6 + 8 * v109) = v94;
      *(double *)(a6 + 8 * v10_Block_object_dispose(&STACK[0x220], 8) = v93;
      *(double *)(a6 + 8 * v107) = v98;
      *(double *)(a6 + 8 * v106) = v97;
      *(double *)(a6 + 8 * v105) = v96;
      *(double *)(a6 + 8 * v104) = v101;
      *(double *)(a6 + 8 * v103) = v100;
      *(double *)(a6 + 8 * v102) = v99;
    }
  }
}

uint64_t int_pair_cmp_dec(int *a1, int *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (*a1 == *a2)
  {
    int v4 = a1[1];
    int v5 = a2[1];
    BOOL v7 = __OFSUB__(v4, v5);
    BOOL v6 = v4 - v5 < 0;
    if (v4 <= v5) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = -1;
    }
    if (v6 != v7) {
      return 1;
    }
    else {
      return v8;
    }
  }
  else
  {
    if (v2 <= v3) {
      unsigned int v10 = 0;
    }
    else {
      unsigned int v10 = -1;
    }
    if (v2 >= v3) {
      return v10;
    }
    else {
      return 1;
    }
  }
}

float vl_gt_get_pose_err(float32x2_t *a1, float32x2_t *a2, float *a3, float *a4)
{
  *a3 = 0.0;
  float v5 = a1[4].f32[1] - a2[4].f32[1];
  float v6 = (float)(v5 * v5) + 0.0;
  *a3 = v6;
  float v7 = a1[5].f32[0] - a2[5].f32[0];
  float v8 = v6 + (float)(v7 * v7);
  *a3 = v8;
  float v9 = a1[5].f32[1] - a2[5].f32[1];
  *a3 = sqrtf(v8 + (float)(v9 * v9));
  float64x2_t v10 = vcvtq_f64_f32(a2[1]);
  v18[0] = vcvtq_f64_f32(*a2);
  v18[1] = v10;
  *(float32x2_t *)&v10.f64[0] = a2[4];
  float64x2_t v11 = vcvtq_f64_f32(a2[5]);
  float64x2_t v12 = vcvtq_f64_f32(a2[3]);
  v18[2] = vcvtq_f64_f32(a2[2]);
  v18[3] = v12;
  v18[4] = vcvtq_f64_f32(*(float32x2_t *)&v10.f64[0]);
  v18[5] = v11;
  *(float32x2_t *)&v10.f64[0] = a1[4];
  float64x2_t v13 = vcvtq_f64_f32(a1[5]);
  float64x2_t v14 = vcvtq_f64_f32(a1[1]);
  v17[0] = vcvtq_f64_f32(*a1);
  v17[1] = v14;
  float64x2_t v15 = vcvtq_f64_f32(a1[3]);
  v17[2] = vcvtq_f64_f32(a1[2]);
  v17[3] = v15;
  v17[4] = vcvtq_f64_f32(*(float32x2_t *)&v10.f64[0]);
  v17[5] = v13;
  float result = g_coords_angle_diff((double *)v18, (double *)v17);
  *a4 = result;
  return result;
}

uint64_t vl_kpts_extract()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  int v2 = v1;
  int v4 = v3;
  float v6 = v5;
  float v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = v0;
  uint64_t v139 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(v0 + 212))
  {
    *(void *)(v0 + 120) -= mach_absolute_time();
    float v12 = *v8;
    BOOL v13 = *(_DWORD *)v8 == 1000 || LODWORD(v12) == 2;
    if (v13) {
      goto LABEL_17;
    }
  }
  else
  {
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v0 + 32));
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v11 + 16));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)v11);
    float v12 = *v8;
    if (*(_DWORD *)v8 == 1000 || LODWORD(v12) == 2) {
      goto LABEL_17;
    }
  }
  if (v12 == 0.0)
  {
    if (!*((_DWORD *)v8 + 1))
    {
      vl_dog_calculate_keypoints(v10, (uint64_t)(v8 + 9), (void *)(v11 + 1296), v6, v11 + 1320, v11 + 216, v11 + 432);
      int v15 = *((_DWORD *)v8 + 1);
      if (v15 == 1000) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    printf("%sError : ", (const char *)&unk_21BB738AE);
    printf("VL_KPTS_DET_DOG requires VL_KPTS_DESC_SIFT as descriptor");
  }
  else
  {
    printf("%sError : ", (const char *)&unk_21BB738AE);
    printf("Unsupported detection method %d");
  }
  putchar(10);
LABEL_17:
  int v15 = *((_DWORD *)v8 + 1);
  if (v15 == 1000) {
    goto LABEL_28;
  }
LABEL_18:
  if (v15 == 1)
  {
    if (!v2)
    {
      if (*(unsigned char *)(v11 + 1368) || *((_DWORD *)v8 + 29))
      {
        vl_lbl_desc(*((unsigned int *)v8 + 22), v10, v10 + 232, *((_DWORD *)v8 + 22), v11 + 1344, v11 + 648, v11 + 864, v6);
      }
      else if (v4)
      {
        uint64_t v130 = v6[3];
        uint64_t v131 = v6[5];
        if (v131 < 0) {
          v6[5] = (2 * v131) & ~((2 * v131) >> 63);
        }
        if (v130 < 0) {
          bzero((void *)(4 * v130 + v6[4]), -4 * v130);
        }
        v6[3] = 0;
      }
    }
    if (v8[27] > 0.0)
    {
      int v137 = 0;
      memset(v136, 0, sizeof(v136));
      lbl_par_ver((uint64_t)v136, *((_DWORD *)v8 + 22));
      vl_kpts_filter_lbl();
    }
  }
  else if (v15)
  {
    printf("%sError : ", (const char *)&unk_21BB738AE);
    printf("Unsupported extraction method %d", *((_DWORD *)v8 + 1));
    putchar(10);
  }
  else
  {
    vl_sift_desc(v11 + 1296, v6, v11 + 1320, v11 + 864);
  }
LABEL_28:
  *(void *)(v11 + 1320) = 0;
  printf("Verbose : ");
  printf("KPTS:  Extracted %s%llu%s kpts", (const char *)&unk_21BB738AE, *v6, (const char *)&unk_21BB738AE);
  putchar(10);
  if (*(_DWORD *)(v11 + 212))
  {
    *(void *)(v11 + 120) += mach_absolute_time();
    uint64_t v23 = v11;
    if (*(_DWORD *)(v11 + 212)) {
      goto LABEL_30;
    }
LABEL_33:
    uint64_t result = log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v16, v17, v18, v19, v20, v21, v22, (char)&str_4_1);
    if (!*(void *)(v23 + 1888)) {
      return result;
    }
    goto LABEL_34;
  }
  clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v11 + 64));
  clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v11 + 80));
  clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v11 + 48));
  uint64_t v25 = *(void *)(v11 + 56) - *(void *)(v11 + 8) + 1000000000 * (*(void *)(v11 + 48) - *(void *)v11);
  uint64_t v26 = *(void *)(v11 + 72) - *(void *)(v11 + 24) + 1000000000 * (*(void *)(v11 + 64) - *(void *)(v11 + 16));
  uint64_t v27 = *(void *)(v11 + 88) - *(void *)(v11 + 40) + 1000000000 * (*(void *)(v11 + 80) - *(void *)(v11 + 32));
  uint64_t v28 = *(void *)(v11 + 128);
  uint64_t v29 = v25 + *(void *)(v11 + 120);
  *(void *)(v11 + 96) = v25;
  *(void *)(v11 + 104) = v26;
  uint64_t v30 = v26 + v28;
  *(void *)(v11 + 112) = v27;
  *(void *)(v11 + 120) = v29;
  uint64_t v31 = v27 + *(void *)(v11 + 136);
  *(void *)(v11 + 12_Block_object_dispose(&STACK[0x220], 8) = v30;
  *(void *)(v11 + 136) = v31;
  ++*(_DWORD *)(v11 + 144);
  uint64_t v23 = v11;
  if (!*(_DWORD *)(v11 + 212)) {
    goto LABEL_33;
  }
LABEL_30:
  printf("Verbose : ");
  printf("Total time for %40s : %7.3f ms", (const char *)(v23 + 148), (double)*(uint64_t *)(v23 + 120) * 0.000001);
  uint64_t result = putchar(10);
  if (!*(void *)(v23 + 1888)) {
    return result;
  }
LABEL_34:
  uint64_t v32 = v23;
  if (*(void *)(v23 + 1896))
  {
    int v33 = *(_DWORD *)(v10 + 8);
    int v34 = *(_DWORD *)(v10 + 12);
    LODWORD(v35) = *(_DWORD *)(v23 + 1904);
    if ((int)v35 <= 100) {
      uint64_t v35 = 100;
    }
    else {
      uint64_t v35 = v35;
    }
    uint64_t v132 = v35;
    bzero(v138, 0x960uLL);
    uint64_t v36 = *v6;
    uint64_t v134 = v23;
    if (*v6 < 1) {
      goto LABEL_135;
    }
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    float v39 = (float)v33 / 10.0;
    float v40 = (float)v34 / 10.0;
    double v133 = v6;
    do
    {
      __double2 v41 = (float *)(v6[1] + v37);
      float v42 = v41[1];
      uint64_t v43 = (int)(float)(*v41 / v39);
      uint64_t v44 = (int)(float)(v42 / v40);
      double v45 = (uint64_t *)&v138[240 * v43 + 24 * v44];
      uint64_t v46 = *v45;
      uint64_t v47 = *v45 + 1;
      uint64_t v48 = v45[2];
      if (*v45 >= v48)
      {
        uint64_t v49 = 2 * v48;
        BOOL v13 = v48 == 0;
        uint64_t v50 = 32;
        if (!v13) {
          uint64_t v50 = v49;
        }
        if (v50 <= v46) {
          uint64_t v51 = *v45 + 1;
        }
        else {
          uint64_t v51 = v50;
        }
        if (v51)
        {
          double v52 = (void **)&v138[240 * (int)v43 + 24 * (int)v44];
          int v135 = (int)(float)(v42 / v40);
          double v53 = malloc_type_realloc(v52[1], 8 * v51, 0x5371AD0AuLL);
          LODWORD(v44) = v135;
          v52[1] = v53;
          float v6 = v133;
          uint64_t v36 = *v133;
        }
        v45[2] = v51;
      }
      *double v45 = v47;
      *(void *)(*(void *)&v138[240 * (int)v43 + 8 + 24 * (int)v44] + 8 * v46) = v41;
      ++v38;
      v37 += 288;
    }
    while (v36 > v38);
    uint64_t v32 = v134;
    if (v36 < 1)
    {
LABEL_135:
      double v63 = (char *)malloc_type_malloc(0x200uLL, 0x74F846BDuLL);
      uint64_t v55 = 0;
      int v56 = 0;
    }
    else
    {
      unsigned int v54 = 0;
      uint64_t v55 = 0;
      int v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = v132;
      do
      {
        int64_t v59 = v54 / 0x64uLL;
        if (*(void *)&v138[240 * (v54 % 0x64 / 0xA) + 24 * (v54 % 0x64 % 0xA)] > v59)
        {
          uint64_t v60 = *(void *)(*(void *)&v138[240 * (v54 % 0x64 / 0xA) + 8 + 24 * (v54 % 0x64 % 0xA)] + 8 * v59);
          if (v55 >= v57)
          {
            uint64_t v61 = 2 * v57;
            if (!v57) {
              uint64_t v61 = 32;
            }
            if (v61 <= v55) {
              uint64_t v57 = v55 + 1;
            }
            else {
              uint64_t v57 = v61;
            }
            if (v57)
            {
              double v62 = (char *)malloc_type_realloc(v56, 8 * v57, 0xA7D75265uLL);
              uint64_t v58 = v132;
              int v56 = v62;
              uint64_t v36 = *v6;
            }
          }
          *(void *)&v56[8 * v55++] = v60;
          uint64_t v32 = v134;
        }
        if (v55 >= v58) {
          break;
        }
        ++v54;
      }
      while (v55 < v36);
      double v63 = (char *)malloc_type_malloc(0x200uLL, 0x74F846BDuLL);
      if (v55)
      {
        uint64_t v64 = 0;
        BOOL v65 = 1;
        uint64_t v66 = 32;
        unint64_t v67 = v55;
        double v68 = v56;
        while (1)
        {
          uint64_t v69 = v64;
          while (1)
          {
            if (!v65)
            {
              --v69;
              double v70 = &v63[16 * v69];
              unint64_t v67 = *((void *)v70 + 1);
              double v68 = &v56[8 * *(void *)v70];
            }
            if ((uint64_t)v67 > 15) {
              break;
            }
            if ((uint64_t)v67 > 1)
            {
              uint64_t v71 = 0;
              double v72 = v68 + 8;
              for (uint64_t i = 1; i != v67; ++i)
              {
                uint64_t v74 = v71;
                do
                {
                  uint64_t v75 = *(void *)&v68[8 * v74];
                  uint64_t v76 = *(void *)&v72[8 * v74];
                  if ((float)(*(float *)(v75 + 16) - *(float *)(v76 + 16)) >= 0.0) {
                    break;
                  }
                  *(void *)&v72[8 * v74] = v75;
                  *(void *)&v68[8 * v74] = v76;
                  uint64_t v77 = v74-- + 1;
                }
                while (v77 > 1);
                ++v71;
              }
            }
            BOOL v65 = 0;
            unint64_t v67 = 0;
            if (v69 < 1) {
              goto LABEL_136;
            }
          }
          if (v67 > 0x27) {
            break;
          }
          unint64_t v78 = v67 >> 1;
          float v79 = *(float *)(*(void *)&v68[8 * (v67 >> 1)] + 16);
          uint64_t v80 = *(void *)v68;
          float v81 = *(float *)(*(void *)v68 + 16);
          float v82 = v79 - v81;
          unint64_t v83 = v67 - 1;
          float v84 = *(float *)(*(void *)&v68[8 * v67 - 8] + 16);
          float v85 = v84 - v81;
          float v86 = v84 - v79;
          if (v86 >= 0.0) {
            unint64_t v87 = v67 >> 1;
          }
          else {
            unint64_t v87 = v67 - 1;
          }
          if (v85 >= 0.0) {
            unint64_t v83 = 0;
          }
          else {
            unint64_t v87 = 0;
          }
          if (v86 >= 0.0) {
            unint64_t v78 = v83;
          }
          if (v82 >= 0.0) {
            unint64_t v78 = v87;
          }
LABEL_122:
          uint64_t v108 = 0;
          uint64_t v109 = 0;
          uint64_t v110 = 8 * v78;
          *(void *)double v68 = *(void *)&v68[v110];
          *(void *)&v68[v110] = v80;
          for (uint64_t j = 1; j != v67; ++j)
          {
            uint64_t v112 = *(void *)&v68[8 * j];
            if ((float)(*(float *)(*(void *)v68 + 16) - *(float *)(v112 + 16)) <= 0.0)
            {
              ++v109;
              *(void *)&v68[8 * j] = *(void *)&v68[8 * v109];
              *(void *)&v68[8 * v109] = v112;
              if ((float)(*(float *)(*(void *)v68 + 16) - *(float *)(*(void *)&v68[8 * j] + 16)) == 0.0)
              {
                ++v108;
                *(void *)&v68[8 * v109] = *(void *)&v68[8 * v108];
                *(void *)&v68[8 * v108] = v112;
              }
            }
          }
          uint64_t v113 = 8 * v109 - 8 * v108;
          uint64_t v114 = v108;
          do
          {
            uint64_t v115 = *(void *)&v68[v113];
            *(void *)&v68[v113] = *(void *)&v68[8 * v114];
            *(void *)&v68[8 * v114] = v115;
            v113 += 8;
          }
          while (v114-- > 0);
          uint64_t v64 = v69 + 1;
          if (v69 + 1 >= v66)
          {
            uint64_t v117 = 2 * v66;
            double v63 = (char *)malloc_type_realloc(v63, 32 * v66, 0x8C45E77AuLL);
            uint64_t v66 = v117;
            uint64_t v32 = v134;
          }
          double v118 = &v63[16 * v69];
          *(void *)double v118 = v109 + ((v68 - v56) >> 3) + 1;
          *((void *)v118 + 1) = v67 + ~v109;
          unint64_t v67 = v109 - v108;
          BOOL v65 = v109 != v108;
          if (v69 < 0 && !v67) {
            goto LABEL_136;
          }
        }
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        if (v67 <= 0x7D0) {
          uint64_t v90 = 8;
        }
        else {
          uint64_t v90 = 26;
        }
        if (v67 <= 0x7D0) {
          unint64_t v91 = 3;
        }
        else {
          unint64_t v91 = 9;
        }
        while (1)
        {
          uint64_t v92 = (uint64_t)(v67 - 1 + v88) / v90;
          float v93 = *(float *)(*(void *)&v68[8 * v92] + 16);
          float v94 = *(float *)(*(void *)&v68[8 * (v88 / v90)] + 16);
          uint64_t v95 = (uint64_t)(2 * v67 - 2 + v88) / v90;
          float v96 = *(float *)(*(void *)&v68[8 * v95] + 16);
          if ((float)(v93 - v94) >= 0.0)
          {
            if ((float)(v96 - v94) < 0.0) {
              goto LABEL_103;
            }
            if ((float)(v96 - v93) < 0.0)
            {
LABEL_105:
              *((void *)v136 + v89) = v95;
              goto LABEL_97;
            }
          }
          else if ((float)(v96 - v93) >= 0.0)
          {
            if ((float)(v96 - v94) < 0.0) {
              goto LABEL_105;
            }
LABEL_103:
            *((void *)v136 + v89) = v88 / v90;
            goto LABEL_97;
          }
          *((void *)v136 + v89) = v92;
LABEL_97:
          ++v89;
          v88 += 3 * v67 - 3;
          if (v91 == v89)
          {
            while (1)
            {
              uint64_t v97 = 0;
              uint64_t v98 = 0;
              unint64_t v99 = v91;
              v91 /= 3uLL;
              if (v91 <= 1) {
                uint64_t v100 = 1;
              }
              else {
                uint64_t v100 = v91;
              }
              uint64_t v101 = 8 * v100;
              do
              {
                uint64_t v102 = *(void *)((char *)v136 + v97);
                uint64_t v103 = *(void *)((char *)v136 + v97 + 8);
                uint64_t v104 = *(void *)((char *)&v136[1] + v97);
                float v105 = *(float *)(*(void *)&v68[8 * v103] + 16);
                float v106 = *(float *)(*(void *)&v68[8 * v102] + 16);
                float v107 = *(float *)(*(void *)&v68[8 * v104] + 16);
                if ((float)(v105 - v106) >= 0.0)
                {
                  if ((float)(v107 - v106) < 0.0) {
                    goto LABEL_118;
                  }
                  if ((float)(v107 - v105) >= 0.0)
                  {
LABEL_111:
                    *(void *)((char *)v136 + v9_Block_object_dispose(&STACK[0x220], 8) = v103;
                    goto LABEL_112;
                  }
                }
                else
                {
                  if ((float)(v107 - v105) < 0.0) {
                    goto LABEL_111;
                  }
                  if ((float)(v107 - v106) >= 0.0)
                  {
LABEL_118:
                    *(void *)((char *)v136 + v9_Block_object_dispose(&STACK[0x220], 8) = v102;
                    goto LABEL_112;
                  }
                }
                *(void *)((char *)v136 + v9_Block_object_dispose(&STACK[0x220], 8) = v104;
LABEL_112:
                v98 += 8;
                v97 += 24;
              }
              while (v101 != v98);
              if (v99 < 9)
              {
                unint64_t v78 = *(void *)&v136[0];
                uint64_t v80 = *(void *)v68;
                goto LABEL_122;
              }
            }
          }
        }
      }
    }
LABEL_136:
    free(v63);
    uint64_t v119 = *(int *)(v32 + 1904);
    if (v55 < v119) {
      uint64_t v119 = v55;
    }
    if (v119 < 1)
    {
      double v122 = 0;
      uint64_t v121 = 0;
    }
    else
    {
      uint64_t v120 = 0;
      uint64_t v121 = 0;
      double v122 = 0;
      uint64_t v123 = 0;
      do
      {
        uint64_t v125 = v121;
        double v126 = *(_DWORD **)&v56[8 * v120];
        if (v121 >= v123)
        {
          uint64_t v127 = 2 * v123;
          if (!v123) {
            uint64_t v127 = 64;
          }
          if (v127 <= v121 + 1) {
            uint64_t v123 = v121 + 1;
          }
          else {
            uint64_t v123 = v127;
          }
          double v122 = malloc_type_realloc(v122, 4 * v123, 0x8A6A4D9DuLL);
        }
        *((_DWORD *)v122 + v121) = *v126;
        v121 += 2;
        if (v125 + 2 > v123)
        {
          uint64_t v128 = 2 * v123;
          if (!v123) {
            uint64_t v128 = 64;
          }
          if (v128 <= v121) {
            uint64_t v123 = v125 + 2;
          }
          else {
            uint64_t v123 = v128;
          }
          if (v123) {
            double v122 = malloc_type_realloc(v122, 4 * v123, 0x36DEF258uLL);
          }
        }
        *((_DWORD *)v122 + v125 + 1) = v126[1];
        ++v120;
        uint64_t v124 = *(int *)(v32 + 1904);
        if (v55 < v124) {
          uint64_t v124 = v55;
        }
      }
      while (v124 > v120);
    }
    for (uint64_t k = 0; k != 2400; k += 240)
    {
      free(*(void **)&v138[k + 8]);
      free(*(void **)&v138[k + 32]);
      free(*(void **)&v138[k + 56]);
      free(*(void **)&v138[k + 80]);
      free(*(void **)&v138[k + 104]);
      free(*(void **)&v138[k + 128]);
      free(*(void **)&v138[k + 152]);
      free(*(void **)&v138[k + 176]);
      free(*(void **)&v138[k + 200]);
      free(*(void **)&v138[k + 224]);
    }
    free(v56);
    return (*(uint64_t (**)(void, uint64_t, void *))(v134 + 1888))(*(void *)(v134 + 1896), v121, v122);
  }
  return result;
}

uint64_t g_ps_cyl_z(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  int v20 = v19;
  uint64_t v663 = v21;
  uint64_t v664 = v12;
  uint64_t v665 = v22;
  float v24 = v23;
  float v26 = v25;
  float v28 = v27;
  float v30 = v29;
  uint64_t v32 = v31;
  uint64_t v33 = a11;
  uint64_t v34 = a12;
  uint64_t v840 = *MEMORY[0x263EF8340];
  v651 = malloc_type_calloc(v19, 1uLL, 0x5AF481C9uLL);
  v786 = 0;
  uint64_t v785 = 0;
  uint64_t v787 = 0;
  if (v18) {
    uint64_t v35 = v18;
  }
  else {
    uint64_t v35 = (float32x2_t *)v16;
  }
  v677 = v35;
  float v673 = v28;
  float v675 = v30;
  float v36 = v24;
  if (a10 >= 1)
  {
    uint64_t v37 = 0;
    float v38 = -INFINITY;
    float v39 = INFINITY;
    do
    {
      uint64_t v40 = v14 + 24 * v37;
      uint64_t v41 = *(unsigned int *)(v40 + 12);
      if ((int)v41 >= 1 && *(int *)(v14 + 24 * v37 + 8) >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = (float **)(a9 + 24 * v37);
        uint64_t v44 = *(float **)v40;
        double v45 = *v43;
        uint64_t v46 = 4 * (void)v43[2];
        do
        {
          uint64_t v47 = v44;
          uint64_t v48 = v45;
          uint64_t v49 = *(unsigned int *)(v14 + 24 * v37 + 8);
          do
          {
            if (v39 >= (float)(*v47 - *v48)) {
              float v39 = *v47 - *v48;
            }
            if (v38 <= (float)(*v47 + *v48)) {
              float v38 = *v47 + *v48;
            }
            ++v48;
            ++v47;
            --v49;
          }
          while (v49);
          ++v42;
          double v45 = (float *)((char *)v45 + v46);
          v44 += *(void *)(v14 + 24 * v37 + 16);
        }
        while (v42 != v41);
      }
      ++v37;
    }
    while (v37 != a10);
    if (v39 <= v38)
    {
      int v50 = 1 << *(_DWORD *)(a11 + 12);
      float v51 = *(float *)(a11 + 4) / (float)v50;
      __int32 v52 = *(_DWORD *)(a11 + 24);
      float v53 = *(float *)(a11 + 8) / (float)v50;
      unsigned int v54 = (float32x2_t *)malloc_type_calloc(1uLL, 0x40uLL, 0x10A004074A90200uLL);
      int v55 = (int)(float)((float)(v38 - v39) / v53);
      int v56 = (int)(float)((float)(v36 + v36) / v51) + 1;
      if (v56 <= v55 + 1) {
        int v56 = v55 + 1;
      }
      unsigned int v57 = vcvtps_s32_f32(log2f((float)v56));
      float v58 = (float)((1 << v57) + 1);
      v54[1] = vmla_n_f32(*v677, (float32x2_t)0x3F0000003F000000, -(float)(v58 * v51));
      v54[2].f32[0] = (float)((float)(v53 * v58) * -0.5) + (float)((float)(v39 + v38) * 0.5);
      v54[2].f32[1] = v51;
      v54[3].f32[0] = v53;
      v54[3].i32[1] = v57;
      v54[4].i32[0] = v52;
      float32x2_t v59 = v54[5];
      int v60 = 16 * v52;
      uint64_t v655 = v32;
      int v768 = v20;
      if (v59)
      {
        float32x2_t v61 = (float32x2_t)(*(void *)&v59 - 1);
        v54[5] = v61;
        double v62 = *(void **)(*(void *)&v54[6] + 8 * *(void *)&v61);
        bzero(v62, v60 + 2432);
      }
      else
      {
        double v62 = malloc_type_calloc(1uLL, v60 + 2432, 0x8B962782uLL);
      }
      uint64_t v63 = v54[4].i32[0];
      v62[2] = v62 + 304;
      v63 *= 2;
      uint64_t v64 = (char *)v62 + v63 + 2432;
      v62[40] = v64;
      BOOL v65 = &v64[v63];
      v62[78] = v65;
      uint64_t v66 = &v65[v63];
      v62[116] = v66;
      unint64_t v67 = &v66[v63];
      v62[154] = v67;
      double v68 = &v67[v63];
      v62[192] = v68;
      uint64_t v69 = &v68[v63];
      v62[230] = v69;
      v62[268] = &v69[v63];
      *unsigned int v54 = (float32x2_t)v62;
      LODWORD(v69) = v54[3].i32[1] - *(_DWORD *)(a11 + 12);
      int v70 = v69 & ~((int)v69 >> 31);
      float v71 = -v675;
      double v72 = v677;
      if (v70 != 31)
      {
        signed int v80 = 0;
        int v81 = 1 << v70;
        if (1 << v70 <= 1) {
          int v81 = 1;
        }
        int v773 = v81;
        do
        {
          signed int v82 = 0;
          do
          {
            int v83 = 1 << (v54[3].i32[1] - v70);
            float v84 = v54[2].f32[1];
            float v85 = v54[1].f32[0] + (float)((float)((float)((float)v80 + 0.5) * (float)v83) * v84);
            float v86 = v54[1].f32[1] + (float)((float)((float)((float)v82 + 0.5) * (float)v83) * v84);
            float v87 = (float)((float)(v86 - v72->f32[1]) * (float)(v86 - v72->f32[1]))
                + (float)((float)(v85 - v72->f32[0]) * (float)(v85 - v72->f32[0]));
            if (v87 <= (float)(v36 * v36) && v87 >= (float)(v26 * v26))
            {
              for (uint64_t i = 0; i != a10; ++i)
              {
                uint64_t v90 = v14 + 24 * i;
                uint64_t v91 = *(unsigned int *)(v90 + 8);
                LODWORD(v72) = vcvtms_s32_f32((float)(v85 - (float)(*v16 + (float)(v71 * 0.5))) * (float)((float)(int)v91 / v675));
                if ((v72 & 0x80000000) == 0 && (int)v91 > (int)v72)
                {
                  int v92 = *(_DWORD *)(v90 + 12);
                  LODWORD(v91) = vcvtms_s32_f32((float)(v86 - (float)(v16[1] + (float)((float)-v673 * 0.5)))* (float)((float)v92 / v673));
                  if ((v91 & 0x80000000) == 0 && v92 > (int)v91)
                  {
                    float v93 = *(float *)(*(void *)v90 + 4 * ((void)v72 + *(void *)(v14 + 24 * i + 16) * v91));
                    float v94 = *(float *)(*(void *)(a9 + 24 * i) + 4 * ((void)v72 + *(void *)(a9 + 24 * i + 16) * v91));
                    float v95 = v54[2].f32[0];
                    float v96 = v54[3].f32[0];
                    double v72 = (float32x2_t *)(int)(float)((float)((float)(v93 + v94) - v95) / v96);
                    signed int v97 = (int)(float)((float)((float)(v93 - v94) - v95) / v96) >> (v54[3].i8[4] - v70);
                    int v98 = (int)v72 >> (v54[3].i8[4] - v70);
                    if (v97 <= v98)
                    {
                      int v99 = v98 + 1;
                      do
                        octnode_insert((uint64_t)v54, *v54, v70, v80, v82, v97++);
                      while (v99 != v97);
                    }
                  }
                }
                float v71 = -v675;
              }
            }
            ++v82;
            double v72 = v677;
          }
          while (v82 != v773);
          ++v80;
        }
        while (v80 != v773);
      }
      if (v768 < 1)
      {
        uint64_t v75 = 0;
        ptr = 0;
        uint64_t v73 = 0;
        uint64_t v34 = a12;
        uint64_t v76 = v655;
      }
      else
      {
        uint64_t v73 = 0;
        ptr = 0;
        uint64_t v74 = 0;
        uint64_t v75 = v768;
        uint64_t v34 = a12;
        uint64_t v76 = v655;
        do
        {
          uint64_t v77 = v75;
          uint64_t v78 = v74 + 1;
          if (v74 >= v73)
          {
            uint64_t v79 = 2 * v73;
            if (!v73) {
              uint64_t v79 = 64;
            }
            if (v79 <= v74) {
              uint64_t v73 = v74 + 1;
            }
            else {
              uint64_t v73 = v79;
            }
            if (v73) {
              ptr = (int *)malloc_type_realloc(ptr, 4 * v73, 0xB2B63D52uLL);
            }
          }
          ptr[v74] = v74;
          ++v74;
          uint64_t v75 = v77;
        }
        while (v77 != v78);
      }
      uint64_t v100 = a11;
      int v101 = *(_DWORD *)(a11 + 12);
      if ((v101 & 0x80000000) == 0)
      {
        uint64_t v652 = v73;
        __int32 v102 = v54[3].i32[1];
        __int32 v654 = v102 - v101;
        float v684 = v36 * v36;
        float v683 = v26 * v26;
        v650 = (long long *)(v34 + 104);
        v680 = (void *)(v14 + 16);
        float v103 = 0.5;
        float v104 = v673;
        float v105 = v675;
        while (1)
        {
          uint64_t v106 = v75;
          if (v75 < 1)
          {
            uint64_t v667 = 0;
            uint64_t v108 = v654;
          }
          else
          {
            uint64_t v107 = 0;
            uint64_t v108 = v654;
            if (v654 == v102 - *(_DWORD *)(v100 + 12)) {
              int v109 = -1;
            }
            else {
              int v109 = v654 - 1;
            }
            do
            {
              uint64_t v113 = ptr[v107];
              if (v76) {
                uint64_t v110 = *(unsigned __int16 *)(v76 + 2 * v113);
              }
              else {
                uint64_t v110 = 1;
              }
              if (v663) {
                double v111 = (float *)(v663 + 8 * v113);
              }
              else {
                double v111 = 0;
              }
              if ((int)v113 <= 0) {
                uint64_t v112 = -(-(int)v113 & 0x7FF);
              }
              else {
                uint64_t v112 = v113 & 0x7FF;
              }
              v651[v113] = compute_score(v54, (uint64_t)*v54, v110, (float32x2_t *)(v665 + 12 * (int)v113), v111, a11, v654, v112, *(float *)(v664 + 8 * v113), *(float *)(v664 + 8 * v113 + 4), v109) == 0;
              ++v107;
            }
            while (v106 != v107);
            uint64_t v667 = 0;
            uint64_t v114 = ptr;
            uint64_t v115 = v106;
            uint64_t v100 = a11;
            do
            {
              uint64_t v117 = *v114++;
              int v116 = v117;
              if (!v651[v117]) {
                ptr[v667++] = v116;
              }
              --v115;
            }
            while (v115);
          }
          uint64_t v118 = v667;
          if (v667 <= v652) {
            goto LABEL_88;
          }
          uint64_t v119 = 2 * v652;
          if (!v652) {
            uint64_t v119 = 64;
          }
          if (v119 <= v667) {
            uint64_t v119 = v667;
          }
          if (v119) {
            break;
          }
          uint64_t v652 = 0;
          uint64_t v120 = v667 - v106;
          if (v667 > v106) {
            goto LABEL_89;
          }
LABEL_90:
          integrate_score_to_leafs((uint64_t)*v54, 0, v108, v100);
          uint64_t v785 = 0;
          uint64_t v121 = *(int *)(v100 + 16);
          get_level(*v54, v108, (uint64_t)&v785);
          uint64_t v123 = v785;
          if (v785 >= 1)
          {
            uint64_t v124 = v786;
            uint64_t v125 = v54[4].u32[0];
            double v126 = (uint64_t *)v786;
            uint64_t v127 = v785;
            if ((int)v125 <= 1)
            {
              do
              {
                uint64_t v141 = *v126++;
                double v142 = *(_WORD **)(v141 + 16);
                *(_DWORD *)(v141 + 24) = 0;
                LOWORD(v122) = *v142;
                float v122 = (float)LODWORD(v122);
                *(float *)(v141 + 32) = v122;
                --v127;
              }
              while (v127);
            }
            else
            {
              uint64_t v128 = 0;
              uint64_t v129 = v125 - 1;
              do
              {
                uint64_t v130 = v124[v128];
                uint64_t v131 = *(_WORD **)(v130 + 16);
                double v133 = (char *)(v131 + 1);
                unsigned __int16 v132 = *v131;
                uint64_t v134 = v129;
                int v135 = (char *)v131;
                double v136 = (char *)(v131 + 1);
                do
                {
                  unsigned int v138 = *(unsigned __int16 *)v136;
                  v136 += 2;
                  unsigned __int16 v137 = v138;
                  BOOL v139 = v132 >= v138;
                  if (v132 <= v138) {
                    unsigned __int16 v132 = v137;
                  }
                  if (!v139) {
                    int v135 = v133;
                  }
                  double v133 = v136;
                  --v134;
                }
                while (v134);
                unint64_t v140 = (unint64_t)(v135 - (char *)v131) >> 1;
                *(_DWORD *)(v130 + 24) = v140;
                LOWORD(v122) = v131[(int)v140];
                float v122 = (float)LODWORD(v122);
                *(float *)(v130 + 32) = v122;
                ++v128;
              }
              while (v128 != v123);
            }
            uint64_t v143 = 0;
            uint64_t v144 = 0;
            float v145 = *(float *)(a11 + 36) * 32.0;
            while (1)
            {
              double v146 = (float *)v124[v144];
              float v147 = v146[8];
              if (v147 < v145) {
                goto LABEL_104;
              }
              float32x2_t v148 = *v54;
              float v149 = *v146;
              int v150 = *((_DWORD *)v146 + 1);
              int v152 = *((_DWORD *)v146 + 2);
              unsigned int v151 = *((_DWORD *)v146 + 3);
              unsigned int v153 = v150 - 1;
              if (v150 >= 1)
              {
                int v154 = **(_DWORD **)&v148;
                char v155 = LOBYTE(v149) + ~**(_DWORD **)&v148;
                if (v152 < 0 || v153 >> v155 > 1 || (v151 & 0x80000000) != 0) {
                  goto LABEL_121;
                }
                BOOL v156 = v152 >> v155 > 1 || v151 >> v155 > 1;
                if (v156) {
                  goto LABEL_121;
                }
                float32x2_t v157 = *v54;
                if (v154 == LODWORD(v149))
                {
LABEL_118:
                  LOWORD(v147) = *(_WORD *)(*(void *)(*(void *)&v157 + 16)
                                          + 2 * *(int *)(*(void *)&v157 + 24));
                  HIWORD(v159) = 16243;
                  float v147 = (float)LODWORD(v147) * 0.95;
                  LOWORD(v159) = *(_WORD *)(*((void *)v146 + 2) + 2 * *((int *)v146 + 6));
                  if (v147 > (float)v159) {
                    goto LABEL_104;
                  }
                }
                else
                {
                  float32x2_t v157 = *v54;
                  while (1)
                  {
                    uint64_t v158 = *(void *)(*(void *)&v157 + 296);
                    if (!v158) {
                      break;
                    }
                    float32x2_t v157 = (float32x2_t)(v158
                                       + 304
                                       * ((v153 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1 | (2
                                                                                       * ((v152 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1)) & 0xFFFFFFFB | (4 * ((v151 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1))));
                    int v154 = **(_DWORD **)&v157;
                    if (**(_DWORD **)&v157 == LODWORD(v149)) {
                      goto LABEL_118;
                    }
                  }
                }
              }
              if (v150 >= -1)
              {
                int v154 = **(_DWORD **)&v148;
                char v155 = LOBYTE(v149) + ~**(_DWORD **)&v148;
LABEL_121:
                if ((v152 & 0x80000000) == 0
                  && (v150 + 1) >> v155 <= 1
                  && (v151 & 0x80000000) == 0
                  && v152 >> v155 <= 1
                  && v151 >> v155 <= 1)
                {
                  float32x2_t v161 = *v54;
                  if (v154 == LODWORD(v149))
                  {
LABEL_132:
                    LOWORD(v147) = *(_WORD *)(*(void *)(*(void *)&v161 + 16)
                                            + 2 * *(int *)(*(void *)&v161 + 24));
                    HIWORD(v164) = 16243;
                    float v147 = (float)LODWORD(v147) * 0.95;
                    LOWORD(v164) = *(_WORD *)(*((void *)v146 + 2) + 2 * *((int *)v146 + 6));
                    if (v147 > (float)v164) {
                      goto LABEL_104;
                    }
                  }
                  else
                  {
                    LOBYTE(v162) = v154;
                    float32x2_t v161 = *v54;
                    while (1)
                    {
                      uint64_t v163 = *(void *)(*(void *)&v161 + 296);
                      if (!v163) {
                        break;
                      }
                      float32x2_t v161 = (float32x2_t)(v163
                                         + 304
                                         * (((v150 + 1) >> (LOBYTE(v149) + ~(_BYTE)v162)) & 1 | (2 * ((v152 >> (LOBYTE(v149) + ~(_BYTE)v162)) & 1)) & 0xFFFFFFFB | (4 * ((v151 >> (LOBYTE(v149) + ~(_BYTE)v162)) & 1))));
                      int v162 = **(_DWORD **)&v161;
                      if (**(_DWORD **)&v161 == LODWORD(v149)) {
                        goto LABEL_132;
                      }
                    }
                  }
                }
                if ((v150 & 0x80000000) == 0)
                {
                  unsigned int v165 = v150 >> v155;
                  if (v152 >= 1
                    && v165 <= 1
                    && (v151 & 0x80000000) == 0
                    && (v152 - 1) >> v155 <= 1
                    && v151 >> v155 <= 1)
                  {
                    float32x2_t v166 = *v54;
                    if (v154 == LODWORD(v149))
                    {
LABEL_143:
                      LOWORD(v147) = *(_WORD *)(*(void *)(*(void *)&v166 + 16)
                                              + 2 * *(int *)(*(void *)&v166 + 24));
                      HIWORD(v169) = 16243;
                      float v147 = (float)LODWORD(v147) * 0.95;
                      LOWORD(v169) = *(_WORD *)(*((void *)v146 + 2) + 2 * *((int *)v146 + 6));
                      if (v147 > (float)v169) {
                        goto LABEL_104;
                      }
                    }
                    else
                    {
                      LOBYTE(v167) = v154;
                      float32x2_t v166 = *v54;
                      while (1)
                      {
                        uint64_t v168 = *(void *)(*(void *)&v166 + 296);
                        if (!v168) {
                          break;
                        }
                        float32x2_t v166 = (float32x2_t)(v168
                                           + 304
                                           * ((v150 >> (LOBYTE(v149) + ~(_BYTE)v167)) & 1 | (2 * (((v152 - 1) >> (LOBYTE(v149) + ~(_BYTE)v167)) & 1)) & 0xFFFFFFFB | (4 * ((v151 >> (LOBYTE(v149) + ~(_BYTE)v167)) & 1))));
                        int v167 = **(_DWORD **)&v166;
                        if (**(_DWORD **)&v166 == LODWORD(v149)) {
                          goto LABEL_143;
                        }
                      }
                    }
                  }
                  if (v152 >= -1 && v165 <= 1 && (v151 & 0x80000000) == 0)
                  {
                    unsigned int v170 = v152 + 1;
                    if (v170 >> v155 <= 1 && v151 >> v155 <= 1)
                    {
                      if (v154 == LODWORD(v149))
                      {
LABEL_152:
                        LOWORD(v147) = *(_WORD *)(*(void *)(*(void *)&v148 + 16)
                                                + 2 * *(int *)(*(void *)&v148 + 24));
                        HIWORD(v172) = 16243;
                        LOWORD(v172) = *(_WORD *)(*((void *)v146 + 2) + 2 * *((int *)v146 + 6));
                        if ((float)((float)LODWORD(v147) * 0.95) > (float)v172) {
                          goto LABEL_104;
                        }
                      }
                      else
                      {
                        while (1)
                        {
                          uint64_t v171 = *(void *)(*(void *)&v148 + 296);
                          if (!v171) {
                            break;
                          }
                          float32x2_t v148 = (float32x2_t)(v171
                                             + 304
                                             * ((v150 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1 | (2 * ((v170 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1)) & 0xFFFFFFFB | (4 * ((v151 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1))));
                          int v154 = **(_DWORD **)&v148;
                          if (**(_DWORD **)&v148 == LODWORD(v149)) {
                            goto LABEL_152;
                          }
                        }
                      }
                    }
                  }
                }
              }
              v124[v143++] = v146;
LABEL_104:
              if (++v144 == v123) {
                goto LABEL_155;
              }
            }
          }
          uint64_t v143 = 0;
LABEL_155:
          if (v143 <= v787)
          {
            uint64_t v175 = v143 - v123;
            if (v143 <= v123) {
              goto LABEL_164;
            }
          }
          else
          {
            uint64_t v173 = 32;
            if (v787) {
              uint64_t v173 = 2 * v787;
            }
            if (v173 <= v143) {
              uint64_t v174 = v143;
            }
            else {
              uint64_t v174 = v173;
            }
            if (v174) {
              v786 = malloc_type_realloc(v786, 8 * v174, 0x67F96349uLL);
            }
            uint64_t v787 = v174;
            uint64_t v175 = v143 - v123;
            if (v143 <= v123)
            {
LABEL_164:
              uint64_t v785 = v143;
              double v176 = (char *)malloc_type_malloc(0x200uLL, 0xF3239948uLL);
              if (v143) {
                goto LABEL_168;
              }
              goto LABEL_236;
            }
          }
          bzero((char *)v786 + 8 * v123, 8 * v175);
          uint64_t v785 = v143;
          double v176 = (char *)malloc_type_malloc(0x200uLL, 0xF3239948uLL);
          if (v143)
          {
LABEL_168:
            uint64_t v177 = 0;
            BOOL v178 = 1;
            long long v179 = (char *)v786;
            uint64_t v180 = 32;
            while (1)
            {
              uint64_t v181 = v177;
              while (1)
              {
                if (!v178)
                {
                  --v181;
                  double v182 = &v176[16 * v181];
                  uint64_t v143 = *((void *)v182 + 1);
                  long long v179 = (char *)v786 + 8 * *(void *)v182;
                }
                if (v143 > 15) {
                  break;
                }
                if (v143 > 1)
                {
                  uint64_t v183 = 0;
                  double v184 = v179 + 8;
                  for (uint64_t j = 1; j != v143; ++j)
                  {
                    uint64_t v186 = v183;
                    do
                    {
                      uint64_t v187 = *(void *)&v179[8 * v186];
                      uint64_t v188 = *(void *)&v184[8 * v186];
                      if ((float)(*(float *)(v187 + 32) - *(float *)(v188 + 32)) >= 0.0) {
                        break;
                      }
                      *(void *)&v184[8 * v186] = v187;
                      *(void *)&v179[8 * v186] = v188;
                      uint64_t v189 = v186-- + 1;
                    }
                    while (v189 > 1);
                    ++v183;
                  }
                }
                BOOL v178 = 0;
                uint64_t v143 = 0;
                if (v181 < 1) {
                  goto LABEL_236;
                }
              }
              if ((unint64_t)v143 > 0x27) {
                break;
              }
              unint64_t v190 = (unint64_t)v143 >> 1;
              float v191 = *(float *)(*(void *)&v179[8 * ((unint64_t)v143 >> 1)] + 32);
              uint64_t v192 = *(void *)v179;
              float v193 = *(float *)(*(void *)v179 + 32);
              float v194 = v191 - v193;
              uint64_t v195 = v143 - 1;
              float v196 = *(float *)(*(void *)&v179[8 * v143 - 8] + 32);
              float v197 = v196 - v193;
              float v198 = v196 - v191;
              if (v198 >= 0.0) {
                unint64_t v199 = (unint64_t)v143 >> 1;
              }
              else {
                unint64_t v199 = v143 - 1;
              }
              if (v197 >= 0.0) {
                uint64_t v195 = 0;
              }
              else {
                unint64_t v199 = 0;
              }
              if (v198 >= 0.0) {
                unint64_t v190 = v195;
              }
              if (v194 >= 0.0) {
                unint64_t v190 = v199;
              }
LABEL_224:
              uint64_t v220 = 0;
              uint64_t v221 = 0;
              uint64_t v222 = 8 * v190;
              *(void *)long long v179 = *(void *)&v179[v222];
              *(void *)&v179[v222] = v192;
              for (uint64_t k = 1; k != v143; ++k)
              {
                uint64_t v224 = *(void *)&v179[8 * k];
                if ((float)(*(float *)(*(void *)v179 + 32) - *(float *)(v224 + 32)) <= 0.0)
                {
                  ++v221;
                  *(void *)&v179[8 * k] = *(void *)&v179[8 * v221];
                  *(void *)&v179[8 * v221] = v224;
                  if ((float)(*(float *)(*(void *)v179 + 32) - *(float *)(*(void *)&v179[8 * k] + 32)) == 0.0)
                  {
                    ++v220;
                    *(void *)&v179[8 * v221] = *(void *)&v179[8 * v220];
                    *(void *)&v179[8 * v220] = v224;
                  }
                }
              }
              uint64_t v225 = 8 * v221 - 8 * v220;
              uint64_t v226 = v220;
              do
              {
                uint64_t v227 = *(void *)&v179[v225];
                *(void *)&v179[v225] = *(void *)&v179[8 * v226];
                *(void *)&v179[8 * v226] = v227;
                v225 += 8;
                BOOL v156 = v226-- <= 0;
              }
              while (!v156);
              uint64_t v177 = v181 + 1;
              if (v181 + 1 >= v180)
              {
                uint64_t v228 = 2 * v180;
                double v176 = (char *)malloc_type_realloc(v176, 32 * v180, 0xB6BF364FuLL);
                uint64_t v180 = v228;
              }
              double v229 = &v176[16 * v181];
              *(void *)double v229 = v221 + ((v179 - (unsigned char *)v786) >> 3) + 1;
              *((void *)v229 + 1) = v143 + ~v221;
              uint64_t v143 = v221 - v220;
              BOOL v178 = v221 != v220;
              uint64_t v118 = v667;
              if (v181 < 0 && !v143) {
                goto LABEL_236;
              }
            }
            uint64_t v200 = 0;
            uint64_t v201 = 0;
            uint64_t v202 = 26;
            if ((unint64_t)v143 <= 0x7D0) {
              uint64_t v202 = 8;
            }
            unint64_t v203 = 3;
            if ((unint64_t)v143 > 0x7D0) {
              unint64_t v203 = 9;
            }
            while (2)
            {
              uint64_t v204 = (v143 - 1 + v200) / v202;
              float v205 = *(float *)(*(void *)&v179[8 * v204] + 32);
              float v206 = *(float *)(*(void *)&v179[8 * (v200 / v202)] + 32);
              uint64_t v207 = (2 * v143 - 2 + v200) / v202;
              float v208 = *(float *)(*(void *)&v179[8 * v207] + 32);
              if ((float)(v205 - v206) >= 0.0)
              {
                if ((float)(v208 - v206) < 0.0) {
                  goto LABEL_205;
                }
                if ((float)(v208 - v205) < 0.0) {
                  goto LABEL_207;
                }
              }
              else if ((float)(v208 - v205) >= 0.0)
              {
                if ((float)(v208 - v206) < 0.0)
                {
LABEL_207:
                  *((void *)&v796 + v201) = v207;
LABEL_199:
                  ++v201;
                  v200 += 3 * v143 - 3;
                  if (v203 != v201) {
                    continue;
                  }
                  while (2)
                  {
                    uint64_t v209 = 0;
                    uint64_t v210 = 0;
                    unint64_t v211 = v203;
                    v203 /= 3uLL;
                    if (v203 <= 1) {
                      uint64_t v212 = 1;
                    }
                    else {
                      uint64_t v212 = v203;
                    }
                    uint64_t v213 = 8 * v212;
LABEL_215:
                    uint64_t v214 = *(void *)((char *)&v796 + v209);
                    uint64_t v215 = *(void *)((char *)&v796 + v209 + 8);
                    uint64_t v216 = *(void *)((char *)&v796 + v209 + 16);
                    float v217 = *(float *)(*(void *)&v179[8 * v215] + 32);
                    float v218 = *(float *)(*(void *)&v179[8 * v214] + 32);
                    float v219 = *(float *)(*(void *)&v179[8 * v216] + 32);
                    if ((float)(v217 - v218) >= 0.0)
                    {
                      if ((float)(v219 - v218) < 0.0) {
                        goto LABEL_220;
                      }
                      if ((float)(v219 - v217) < 0.0) {
                        goto LABEL_222;
                      }
                    }
                    else if ((float)(v219 - v217) >= 0.0)
                    {
                      if ((float)(v219 - v218) < 0.0)
                      {
LABEL_222:
                        *(void *)((char *)&v796 + v210) = v216;
LABEL_214:
                        v210 += 8;
                        v209 += 24;
                        if (v213 == v210)
                        {
                          if (v211 < 9)
                          {
                            unint64_t v190 = v796;
                            uint64_t v192 = *(void *)v179;
                            goto LABEL_224;
                          }
                          continue;
                        }
                        goto LABEL_215;
                      }
LABEL_220:
                      *(void *)((char *)&v796 + v210) = v214;
                      goto LABEL_214;
                    }
                    break;
                  }
                  *(void *)((char *)&v796 + v210) = v215;
                  goto LABEL_214;
                }
LABEL_205:
                *((void *)&v796 + v201) = v200 / v202;
                goto LABEL_199;
              }
              break;
            }
            *((void *)&v796 + v201) = v204;
            goto LABEL_199;
          }
LABEL_236:
          free(v176);
          uint64_t v230 = v785;
          uint64_t v34 = a12;
          uint64_t v100 = a11;
          if (v785 > v121)
          {
            if (v787 < v121)
            {
              uint64_t v231 = 32;
              if (v787) {
                uint64_t v231 = 2 * v787;
              }
              if (v231 <= v121) {
                uint64_t v232 = v121;
              }
              else {
                uint64_t v232 = v231;
              }
              if (v232) {
                v786 = malloc_type_realloc(v786, 8 * v232, 0x170297F0uLL);
              }
              uint64_t v787 = v232;
            }
            uint64_t v785 = v121;
            uint64_t v230 = v121;
          }
          float v653 = *(float *)(a12 + 104 * *(int *)(a11 + 52) - 8);
          if (v230 >= 1)
          {
            uint64_t v233 = 0;
            uint64_t v659 = 0;
            v660 = 0;
            uint64_t v657 = 0;
            uint64_t v658 = 0;
            double v234 = 0;
            v661 = 0;
            uint64_t v662 = 0;
            while (1)
            {
              uint64_t v235 = *((void *)v786 + v233);
              long long v794 = 0u;
              long long v795 = 0u;
              long long v792 = 0u;
              long long v793 = 0u;
              long long v790 = 0u;
              long long v791 = 0u;
              float v236 = *(float *)(v34 + 104 * *(int *)(v100 + 52) - 8);
              if (*(float *)(v235 + 32) >= v236)
              {
                int v237 = *(_DWORD *)v235;
                int v239 = *(_DWORD *)(v235 + 4);
                int v238 = *(_DWORD *)(v235 + 8);
                int v240 = *(_DWORD *)(v235 + 12);
                __int32 v241 = v54[3].i32[1];
                float v243 = v54[1].f32[0];
                float v242 = v54[1].f32[1];
                float v244 = v54[2].f32[0];
                float v245 = v54[2].f32[1];
                float v246 = v54[3].f32[0];
                uint64_t v656 = v233;
                if (v118 >= 1)
                {
                  __int32 v769 = v54[3].i32[1];
                  int v774 = *(_DWORD *)v235;
                  uint64_t v247 = 0;
                  uint64_t v248 = 0;
                  uint64_t v249 = 0;
                  uint64_t v779 = v235 + 40;
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          while (1)
                          {
                            while (1)
                            {
                              uint64_t v250 = v249;
                              uint64_t v251 = ptr[v247];
                              int v252 = ptr[v247] & 0x7FF;
                              if ((int)v251 <= 0) {
                                int v252 = -(-(int)v251 & 0x7FF);
                              }
                              if ((*(void *)(v779 + 8 * (v252 >> 6)) >> v252)) {
                                break;
                              }
                              uint64_t v249 = v250;
                              if (v118 <= ++v247) {
                                goto LABEL_338;
                              }
                            }
                            uint64_t v253 = v248;
                            uint64_t v668 = v118;
                            LODWORD(v796) = 0;
                            uint64_t v789 = 0;
                            uint64_t v254 = (float32x2_t *)(v665 + 12 * (int)v251);
                            float v788 = 0.0;
                            uint64_t v255 = v235;
                            if (compute_theta_alpha_node(v54, v235, v254, (float *)&v796, (float *)&v789 + 1, (float *)&v789, &v788))break; {
                            uint64_t v249 = v250;
                            }
                            uint64_t v248 = v253;
                            uint64_t v235 = v255;
                            uint64_t v118 = v668;
                            if (v668 <= ++v247) {
                              goto LABEL_338;
                            }
                          }
                          float v257 = *(float *)(v664 + 8 * v251 + 4);
                          double v258 = (float *)(v663 + 8 * v251);
                          if (!v663) {
                            double v258 = 0;
                          }
                          float v259 = *(float *)(v100 + 28);
                          BOOL v260 = (float)(*(float *)&v796 - v259) > v257 || (float)(*((float *)&v789 + 1) + v259) < v257;
                          uint64_t v248 = v253;
                          if (!v260) {
                            break;
                          }
                          uint64_t v249 = v250;
                          uint64_t v235 = v255;
                          uint64_t v118 = v668;
                          if (v668 <= ++v247) {
                            goto LABEL_338;
                          }
                        }
                        v256.i32[0] = v789;
                        uint64_t v235 = v255;
                        if (!v258) {
                          break;
                        }
                        float v261 = *v258;
                        float v262 = v258[1];
                        float v263 = (float)(*(float *)&v789 - *v258)
                             + (double)(int)((__PAIR64__((int)((float)(*(float *)&v789 - *v258) * 0.159154943), *(float *)&v789 - *v258)- COERCE_UNSIGNED_INT(0.0)) >> 32)* -6.28318531;
                        if (v263 > 0.0 && v262 > v263) {
                          break;
                        }
                        float v265 = (float)(v788 - v261)
                             + (double)(int)((__PAIR64__((int)((float)(v788 - v261) * 0.159154943), v788 - v261)
                                            - COERCE_UNSIGNED_INT(0.0)) >> 32)
                             * -6.28318531;
                        if (v265 > 0.0 && v262 > v265) {
                          break;
                        }
                        v267.f32[0] = v261 + (float)(v262 * 0.5);
                        v267.f32[1] = v788;
                        float32x2_t v268 = vsub_f32(v267, (float32x2_t)vdup_lane_s32(v256, 0));
                        float64x2_t v269 = vcvtq_f64_f32(v268);
                        int32x2_t v270 = vadd_s32(vmovn_s64(vcvtq_s64_f64(vmulq_f64(v269, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL)))), vcltz_f32(v268));
                        v271.i64[0] = v270.i32[0];
                        v271.i64[1] = v270.i32[1];
                        float64x2_t v272 = vmlaq_f64(v269, (float64x2_t)vdupq_n_s64(0xC01921FB54442D18), vcvtq_f64_s64(v271));
                        if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v272, 1), v272))).u8[0] & 1) == 0)break; {
                        uint64_t v249 = v250;
                        }
                        uint64_t v118 = v668;
                        if (v668 <= ++v247) {
                          goto LABEL_338;
                        }
                      }
                      double v273 = (float *)(v664 + 8 * v251);
                      int v274 = *(_DWORD *)(v100 + 24);
                      int v275 = (int)(float)((float)((float)((float)(*(float *)&v789 - *v273) * 0.15915)
                                                - (float)(int)((__PAIR64__((int)(float)((float)(*(float *)&v789 - *v273) * 0.15915), (float)(*(float *)&v789 - *v273) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v274);
                      if (v274 - 1 < v275) {
                        int v275 = v274 - 1;
                      }
                      int v276 = (int)(float)((float)((float)((float)(v788 - *v273) * 0.15915)
                                                - (float)(int)((__PAIR64__((int)(float)((float)(v788 - *v273) * 0.15915), (float)(v788 - *v273) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v274);
                      if (v274 - 1 < v276) {
                        int v276 = v274 - 1;
                      }
                      if (v276 >= v275) {
                        int v277 = v275;
                      }
                      else {
                        int v277 = v276;
                      }
                      if (v276 > v275) {
                        int v275 = v276;
                      }
                      int v278 = v275 - v277;
                      if (v275 - v277 < 0) {
                        int v278 = v277 - v275;
                      }
                      int v279 = v274 >= 0 ? *(_DWORD *)(v100 + 24) : v274 + 1;
                      int v280 = *(_DWORD *)(v255 + 24);
                      if (v278 < v279 >> 1) {
                        break;
                      }
                      if (v275 > v280 && v280 > v277) {
                        goto LABEL_315;
                      }
LABEL_304:
                      uint64_t v282 = v253 + 1;
                      if (v253 >= v659)
                      {
                        uint64_t v283 = 2 * v659;
                        if (!v659) {
                          uint64_t v283 = 21;
                        }
                        if (v283 <= v253) {
                          uint64_t v283 = v253 + 1;
                        }
                        if (v283)
                        {
                          uint64_t v659 = v283;
                          v284 = (float *)malloc_type_realloc(v660, 12 * v283, 0xE91C7A4FuLL);
                          double v273 = (float *)(v664 + 8 * v251);
                          uint64_t v282 = v253 + 1;
                          uint64_t v235 = v255;
                          uint64_t v248 = v253;
                          v660 = v284;
                        }
                        else
                        {
                          uint64_t v659 = 0;
                        }
                      }
                      float32x2_t v286 = *v254;
                      double v287 = (float32x2_t *)&v660[3 * v248];
                      v287[1].i32[0] = v254[1].i32[0];
                      *double v287 = v286;
                      if (v250 >= v657)
                      {
                        uint64_t v288 = 2 * v657;
                        if (!v657) {
                          uint64_t v288 = 32;
                        }
                        if (v288 <= v250) {
                          uint64_t v288 = v250 + 1;
                        }
                        if (v288)
                        {
                          uint64_t v657 = v288;
                          double v289 = v273;
                          double v290 = (float *)malloc_type_realloc(v661, 8 * v288, 0x9DF99B6EuLL);
                          double v273 = v289;
                          uint64_t v235 = v255;
                          v661 = v290;
                        }
                        else
                        {
                          uint64_t v657 = 0;
                        }
                      }
                      *(void *)&v661[2 * v250] = *(void *)v273;
                      uint64_t v291 = v662;
                      if (v662 < v658) {
                        goto LABEL_333;
                      }
                      uint64_t v292 = 2 * v658;
                      if (!v658) {
                        uint64_t v292 = 64;
                      }
                      uint64_t v291 = v662;
                      if (v292 <= v662) {
                        uint64_t v292 = v662 + 1;
                      }
                      if (v292)
                      {
                        uint64_t v658 = v292;
                        double v293 = malloc_type_realloc(v234, 4 * v292, 0x38B56759uLL);
                        uint64_t v235 = v255;
                        uint64_t v291 = v662;
                        double v234 = v293;
LABEL_333:
                        uint64_t v294 = v655;
                        if (!v655) {
                          goto LABEL_336;
                        }
                        goto LABEL_334;
                      }
                      uint64_t v658 = 0;
                      uint64_t v294 = v655;
                      if (!v655)
                      {
LABEL_336:
                        int v295 = 1;
                        goto LABEL_337;
                      }
LABEL_334:
                      int v295 = *(unsigned __int16 *)(v294 + 2 * v251);
LABEL_337:
                      *((float *)v234 + v291) = (float)v295;
                      uint64_t v249 = v250 + 1;
                      ++v662;
                      uint64_t v248 = v282;
                      uint64_t v100 = a11;
                      uint64_t v118 = v668;
                      if (v668 <= ++v247)
                      {
LABEL_338:
                        uint64_t v669 = v118;
                        float v236 = *(float *)(a12 + 104 * *(int *)(v100 + 52) - 8);
                        LOBYTE(v237) = v774;
                        LOBYTE(v241) = v769;
                        goto LABEL_340;
                      }
                    }
                    if (v277 <= v280 && v280 <= v275) {
                      goto LABEL_304;
                    }
LABEL_315:
                    uint64_t v100 = a11;
                    uint64_t v249 = v250;
                    uint64_t v118 = v668;
                    if (v668 <= ++v247) {
                      goto LABEL_338;
                    }
                  }
                }
                uint64_t v669 = v118;
                LODWORD(v249) = 0;
LABEL_340:
                float v296 = (float)(1 << (v241 - v237));
                float v297 = v243 + (float)((float)((float)((float)v239 + 0.5) * v296) * v245);
                float v298 = v242 + (float)((float)((float)((float)v238 + 0.5) * v296) * v245);
                float v299 = v244 + (float)((float)((float)((float)v240 + 0.5) * v296) * v246);
                float v300 = (float)((float)*(int *)(v235 + 24) + 0.5) / (float)v54[4].i32[0];
                float v301 = (float)(v300 + v300) * 3.14159265;
                float v302 = *(float *)v100 * 32.0;
                if ((float)((float)(*(float *)(v100 + 36) * 0.5) * 32.0) > v236) {
                  float v236 = (float)(*(float *)(v100 + 36) * 0.5) * 32.0;
                }
                float v671 = v236;
                double v695 = v298;
                double v696 = v297;
                double v694 = v299;
                double v303 = v301;
                uint64_t v676 = (int)v249;
                v681 = (unsigned __int8 *)malloc_type_calloc((int)v249, 1uLL, 0xEFCCC514uLL);
                __double2 v304 = __sincos_stret(v303);
                unsigned int v674 = 0;
                double cosval = v304.__cosval;
                double sinval = v304.__sinval;
                double v701 = v304.__cosval * 0.0 + v304.__sinval * 0.0;
                double v702 = -(v304.__sinval - v304.__cosval * 0.0 * 0.0);
                double v703 = 0.0;
                double v699 = v304.__sinval * 0.0 - v304.__cosval * 0.0;
                double v700 = v304.__cosval + v304.__sinval * 0.0 * 0.0;
                float v672 = v302 * 3.0;
                uint64_t v678 = v249;
                double v698 = -0.0;
                double v697 = 1.0;
                int v679 = v249;
                do
                {
                  int v311 = 0;
                  do
                  {
                    int v682 = v311;
                    unint64_t v806 = 0;
                    long long v804 = 0u;
                    long long v805 = 0u;
                    long long v802 = 0u;
                    long long v803 = 0u;
                    long long v800 = 0u;
                    long long v801 = 0u;
                    long long v798 = 0u;
                    long long v799 = 0u;
                    long long v796 = 0u;
                    long long v797 = 0u;
                    if ((int)v249 < 1)
                    {
                      int v316 = 0;
                      float v740 = 0.0;
                    }
                    else
                    {
                      int v316 = 0;
                      float v317 = cosval;
                      float v693 = -v317;
                      float v318 = v702;
                      float v692 = -v318;
                      float v319 = v701;
                      float v691 = -v319;
                      float v320 = sinval;
                      float v690 = -v320;
                      float v321 = v700;
                      float v689 = -v321;
                      float v322 = v699;
                      float v688 = -v322;
                      float v323 = v698;
                      float v687 = -v323;
                      float v324 = v703;
                      float v686 = -v324;
                      float v325 = v697;
                      float v685 = -v325;
                      float v326 = 0.0;
                      double v328 = v661 + 1;
                      double v327 = v660 + 1;
                      uint64_t v329 = (float *)v234;
                      uint64_t v330 = v676;
                      double v331 = v681;
                      float v332 = 0.0;
                      float v333 = 0.0;
                      float v334 = 0.0;
                      float v335 = 0.0;
                      *(float *)&unsigned int v336 = 0.0;
                      float v337 = 0.0;
                      *(float *)&unsigned int v338 = 0.0;
                      *(float *)&unsigned int v339 = 0.0;
                      *(float *)&unsigned int v340 = 0.0;
                      *(float *)&unsigned int v341 = 0.0;
                      *(float *)&unsigned int v342 = 0.0;
                      *(float *)&unsigned int v343 = 0.0;
                      *(float *)&unsigned int v344 = 0.0;
                      *(float *)&unsigned int v345 = 0.0;
                      *(float *)&unsigned int v346 = 0.0;
                      *(float *)&unsigned int v347 = 0.0;
                      *(float *)&unsigned int v348 = 0.0;
                      *(float *)&unsigned int v349 = 0.0;
                      *(float *)&unsigned int v350 = 0.0;
                      *(float *)&unsigned int v351 = 0.0;
                      float v775 = 0.0;
                      float v770 = 0.0;
                      float v765 = 0.0;
                      float v738 = 0.0;
                      float v736 = 0.0;
                      float v762 = 0.0;
                      float v759 = 0.0;
                      float v757 = 0.0;
                      float v755 = 0.0;
                      float v735 = 0.0;
                      float v734 = 0.0;
                      float v753 = 0.0;
                      float v751 = 0.0;
                      float v749 = 0.0;
                      float v747 = 0.0;
                      float v733 = 0.0;
                      float v732 = 0.0;
                      long long v742 = 0uLL;
                      float v740 = 0.0;
                      do
                      {
                        if (!*v331++)
                        {
                          float v731 = v326;
                          float v730 = v332;
                          float v729 = v333;
                          float v728 = v334;
                          float v727 = v335;
                          float v726 = *(float *)&v336;
                          float v725 = v337;
                          float v724 = *(float *)&v338;
                          float v723 = *(float *)&v339;
                          float v722 = *(float *)&v340;
                          float v721 = *(float *)&v341;
                          float v720 = *(float *)&v342;
                          float v719 = *(float *)&v343;
                          float v718 = *(float *)&v344;
                          float v717 = *(float *)&v345;
                          float v716 = *(float *)&v346;
                          float v715 = *(float *)&v347;
                          float v714 = *(float *)&v348;
                          float v713 = *(float *)&v349;
                          float v712 = *(float *)&v350;
                          float v781 = *(float *)&v351;
                          if (v234) {
                            float v352 = *v329;
                          }
                          else {
                            float v352 = 1.0;
                          }
                          float v353 = *(v328 - 1);
                          float v709 = *v328;
                          double v354 = *(v327 - 1) - v696;
                          double v355 = *v327 - v695;
                          double v356 = v327[1] - v694;
                          float v357 = sinval * v355 + cosval * v354 + v698 * v356;
                          float v358 = v700 * v355 + v702 * v354 + v703 * v356;
                          float v359 = v699 * v355 + v701 * v354 + v697 * v356;
                          float v360 = atan2f(v358, v357);
                          float v361 = (float)(v358 * v358) + (float)(v357 * v357);
                          float v362 = sqrtf(v361);
                          float v363 = atanf(v359 / v362);
                          double v711 = ((float)(v353 - v360)
                                + 3.14159265
                                + (double)((int)(((float)(v353 - v360) + 3.14159265) * 0.159154943)
                                         - ((float)(v353 - v360) + 3.14159265 < 0.0))
                                * -6.28318531
                                + -3.14159265)
                               * v352;
                          float v364 = (float)(v359 * v359) + (float)(v362 * v362);
                          float v365 = (float)-v359 / v364;
                          float v366 = v352 * (float)((float)-v358 / v361);
                          float v367 = v352 * (float)((float)(v357 / v362) * v365);
                          float v368 = v352 * (float)(v357 / v361);
                          float v369 = v352 * (float)((float)(v358 / v362) * v365);
                          float v370 = (float)((float)(v367 * v693) + 0.0) + (float)(v369 * v692);
                          float v710 = v709 - v363;
                          float v371 = (float)((float)(v367 * v690) + 0.0) + (float)(v369 * v689);
                          float v372 = (float)((float)(v367 * v687) + 0.0) + (float)(v369 * v686);
                          float v373 = (float)((float)(v367 * v358) + 0.0) - (float)(v369 * v357);
                          float v374 = v352 * (float)(v362 / v364);
                          float v375 = (float)((float)(0.0 - (float)(v366 * v359)) + (float)(v368 * 0.0))
                               + (float)((float)(v352 * 0.0) * v357);
                          float v376 = (float)((float)(0.0 - (float)(v367 * v359)) + (float)(v369 * 0.0))
                               + (float)(v374 * v357);
                          float v377 = (float)((float)((float)(v366 * v693) + 0.0) + (float)(v368 * v692))
                               + (float)((float)(v352 * 0.0) * v691);
                          float v378 = (float)((float)((float)(v366 * v690) + 0.0) + (float)(v368 * v689))
                               + (float)((float)(v352 * 0.0) * v688);
                          float v379 = (float)((float)((float)(v366 * v687) + 0.0) + (float)(v368 * v686))
                               + (float)((float)(v352 * 0.0) * v685);
                          float v380 = (float)((float)((float)(v366 * v358) + 0.0) - (float)(v368 * v357))
                               + (float)((float)(v352 * 0.0) * 0.0);
                          float v381 = (float)((float)((float)(v366 * 0.0) + 0.0) + (float)(v368 * v359))
                               - (float)((float)(v352 * 0.0) * v358);
                          float v382 = (float)((float)((float)(v367 * 0.0) + 0.0) + (float)(v369 * v359))
                               - (float)(v374 * v358);
                          float v383 = v370 + (float)(v374 * v691);
                          float v384 = v371 + (float)(v374 * v688);
                          float v385 = v372 + (float)(v374 * v685);
                          float v386 = v373 + (float)(v374 * 0.0);
                          *(float *)&long long v742 = *(float *)&v742
                                          + (float)((float)((float)(v377 * v377) + 0.0) + (float)(v383 * v383));
                          float v387 = (float)((float)(v378 * v377) + 0.0) + (float)(v384 * v383);
                          *((float *)&v742 + 1) = *((float *)&v742 + 1) + v387;
                          float v747 = v747 + v387;
                          float v749 = v749 + (float)((float)((float)(v378 * v378) + 0.0) + (float)(v384 * v384));
                          float v388 = (float)((float)(v379 * v377) + 0.0) + (float)(v385 * v383);
                          *((float *)&v742 + 2) = *((float *)&v742 + 2) + v388;
                          float v755 = v755 + v388;
                          float v389 = (float)((float)(v379 * v378) + 0.0) + (float)(v385 * v384);
                          float v751 = v751 + v389;
                          float v757 = v757 + v389;
                          float v759 = v759 + (float)((float)((float)(v379 * v379) + 0.0) + (float)(v385 * v385));
                          float v390 = (float)((float)(v380 * v377) + 0.0) + (float)(v386 * v383);
                          *((float *)&v742 + 3) = *((float *)&v742 + 3) + v390;
                          float v765 = v765 + v390;
                          float v391 = (float)((float)(v380 * v378) + 0.0) + (float)(v386 * v384);
                          float v753 = v753 + v391;
                          float v770 = v770 + v391;
                          float v392 = (float)((float)(v380 * v379) + 0.0) + (float)(v386 * v385);
                          float v762 = v762 + v392;
                          float v775 = v775 + v392;
                          *(float *)&unsigned int v780 = v781 + (float)((float)((float)(v380 * v380) + 0.0) + (float)(v386 * v386));
                          float v393 = (float)((float)(v375 * v377) + 0.0) + (float)(v376 * v383);
                          *(float *)&unsigned int v394 = v732 + v393;
                          *(float *)&unsigned int v395 = v714 + v393;
                          float v396 = (float)((float)(v375 * v378) + 0.0) + (float)(v376 * v384);
                          *(float *)&unsigned int v397 = v734 + v396;
                          float v398 = v352;
                          *(float *)&unsigned int v399 = v715 + v396;
                          float v400 = (float)((float)(v375 * v379) + 0.0) + (float)(v376 * v385);
                          *(float *)&unsigned int v401 = v736 + v400;
                          *(float *)&unsigned int v402 = v716 + v400;
                          float v707 = v380;
                          float v708 = v386;
                          float v403 = (float)((float)(v375 * v380) + 0.0) + (float)(v376 * v386);
                          *(float *)&unsigned int v404 = v712 + v403;
                          *(float *)&unsigned int v405 = v717 + v403;
                          float v706 = v376;
                          *(float *)&unsigned int v406 = v718 + (float)((float)((float)(v375 * v375) + 0.0) + (float)(v376 * v376));
                          float v407 = v381;
                          float v408 = v382;
                          float v409 = (float)((float)(v381 * v377) + 0.0) + (float)(v382 * v383);
                          *(float *)&unsigned int v410 = v733 + v409;
                          *(float *)&unsigned int v411 = v720 + v409;
                          float v412 = (float)((float)(v381 * v378) + 0.0) + (float)(v382 * v384);
                          *(float *)&unsigned int v413 = v735 + v412;
                          *(float *)&unsigned int v414 = v721 + v412;
                          float v415 = (float)((float)(v381 * v379) + 0.0) + (float)(v382 * v385);
                          *(float *)&unsigned int v416 = v738 + v415;
                          *(float *)&unsigned int v417 = v722 + v415;
                          float v418 = (float)((float)(v381 * v380) + 0.0) + (float)(v408 * v708);
                          *(float *)&unsigned int v419 = v713 + v418;
                          *(float *)&unsigned int v420 = v723 + v418;
                          float v421 = v407;
                          float v422 = (float)((float)(v407 * v375) + 0.0) + (float)(v408 * v376);
                          float v423 = v408;
                          *(float *)&unsigned int v424 = v719 + v422;
                          *(float *)&unsigned int v425 = v724 + v422;
                          float v337 = v725 + (float)((float)((float)(v421 * v421) + 0.0) + (float)(v423 * v423));
                          float v426 = v398 * v710;
                          float v427 = v711;
                          *(float *)&unsigned int v428 = (float)(v726 + (float)(v377 * v427)) + (float)(v383 * v426);
                          float v335 = (float)(v727 + (float)(v378 * v427)) + (float)(v384 * v426);
                          float v334 = (float)(v728 + (float)(v379 * v427)) + (float)(v385 * v426);
                          float v333 = (float)(v729 + (float)(v707 * v427)) + (float)(v708 * v426);
                          float v332 = (float)(v730 + (float)(v375 * v427)) + (float)(v706 * v426);
                          float v326 = (float)(v731 + (float)(v421 * v427)) + (float)(v423 * v426);
                          float v740 = v740 + (float)((float)(v426 * v426) + (float)(v427 * v427));
                          long long v796 = v742;
                          float v732 = *(float *)&v394;
                          *(void *)&long long v797 = __PAIR64__(v410, v394);
                          float v733 = *(float *)&v410;
                          *((void *)&v797 + 1) = __PAIR64__(LODWORD(v749), LODWORD(v747));
                          *(void *)&long long v798 = __PAIR64__(LODWORD(v753), LODWORD(v751));
                          float v734 = *(float *)&v397;
                          *((void *)&v798 + 1) = __PAIR64__(v413, v397);
                          float v735 = *(float *)&v413;
                          *(void *)&long long v799 = __PAIR64__(LODWORD(v757), LODWORD(v755));
                          *((void *)&v799 + 1) = __PAIR64__(LODWORD(v762), LODWORD(v759));
                          float v736 = *(float *)&v401;
                          *(void *)&long long v800 = __PAIR64__(v416, v401);
                          float v738 = *(float *)&v416;
                          *((void *)&v800 + 1) = __PAIR64__(LODWORD(v770), LODWORD(v765));
                          *(void *)&long long v801 = __PAIR64__(v780, LODWORD(v775));
                          unsigned int v351 = v780;
                          unsigned int v350 = v404;
                          *((void *)&v801 + 1) = __PAIR64__(v419, v404);
                          unsigned int v349 = v419;
                          unsigned int v348 = v395;
                          *(void *)&long long v802 = __PAIR64__(v399, v395);
                          unsigned int v347 = v399;
                          unsigned int v346 = v402;
                          *((void *)&v802 + 1) = __PAIR64__(v405, v402);
                          unsigned int v345 = v405;
                          unsigned int v344 = v406;
                          *(void *)&long long v803 = __PAIR64__(v424, v406);
                          unsigned int v343 = v424;
                          unsigned int v342 = v411;
                          *((void *)&v803 + 1) = __PAIR64__(v414, v411);
                          unsigned int v341 = v414;
                          unsigned int v340 = v417;
                          *(void *)&long long v804 = __PAIR64__(v420, v417);
                          unsigned int v339 = v420;
                          unsigned int v338 = v425;
                          *((void *)&v804 + 1) = __PAIR64__(LODWORD(v337), v425);
                          unsigned int v336 = v428;
                          *(void *)&long long v805 = __PAIR64__(LODWORD(v335), v428);
                          *((void *)&v805 + 1) = __PAIR64__(LODWORD(v333), LODWORD(v334));
                          unint64_t v806 = __PAIR64__(LODWORD(v326), LODWORD(v332));
                          ++v316;
                        }
                        ++v329;
                        v327 += 3;
                        v328 += 2;
                        --v330;
                      }
                      while (v330);
                    }
                    unint64_t v430 = 0;
                    v431 = (float *)&v796;
                    uint64_t v432 = 2;
                    v433 = &v819;
                    do
                    {
                      float v434 = *v431;
                      float *v433 = *v431;
                      if (v430)
                      {
                        v435 = &v433[-v430];
                        uint64_t v436 = -(uint64_t)v430;
                        do
                        {
                          float v434 = v434 - (float)(v433[v436] * v433[v436]);
                          float *v433 = v434;
                          BOOL v139 = __CFADD__(v436++, 1);
                        }
                        while (!v139);
                        float *v433 = sqrtf(v434);
                        uint64_t v437 = v430 + 1;
                        v438 = v431 + 1;
                        if (v430 <= 4)
                        {
                          v439 = &v433[v430 + 1];
                          uint64_t v440 = v432;
                          do
                          {
                            float v441 = *v438;
                            float *v439 = *v438;
                            v442 = &v439[-v430];
                            float v443 = v441 - (float)(*v442 * *v435);
                            float *v439 = v443;
                            if (v430 != 1)
                            {
                              float v443 = v443 - (float)(v442[1] * v435[1]);
                              float *v439 = v443;
                              if (v430 != 2)
                              {
                                float v443 = v443 - (float)(v442[2] * v435[2]);
                                float *v439 = v443;
                                if (v430 != 3)
                                {
                                  float v443 = v443 - (float)(v442[3] * v435[3]);
                                  float *v439 = v443;
                                }
                              }
                            }
                            float *v439 = v443 / *v433;
                            v439 += v440;
                            ++v438;
                            ++v440;
                          }
                          while (v440 != 7);
                        }
                      }
                      else
                      {
                        float *v433 = sqrtf(v434);
                        v444 = v433 + 1;
                        v438 = v431 + 1;
                        uint64_t v445 = v432;
                        do
                        {
                          float v446 = *v438++;
                          float *v444 = v446;
                          float *v444 = v446 / *v433;
                          v444 += v445++;
                        }
                        while (v445 != 7);
                        uint64_t v437 = 1;
                      }
                      v433 += v430 + 2;
                      v431 = &v438[v437];
                      ++v432;
                      unint64_t v430 = v437;
                    }
                    while (v437 != 6);
                    float v813 = *(float *)&v805 / v819;
                    float v814 = (float)(*((float *)&v805 + 1) - (float)(v820 * (float)(*(float *)&v805 / v819))) / v821;
                    float v447 = (float)((float)(*((float *)&v805 + 2) - (float)(v822 * (float)(*(float *)&v805 / v819)))
                                 - (float)(v823 * v814))
                         / v824;
                    float v815 = v447;
                    float v816 = (float)((float)((float)(*((float *)&v805 + 3)
                                                 - (float)(v825 * (float)(*(float *)&v805 / v819)))
                                         - (float)(v826 * v814))
                                 - (float)(v827 * v447))
                         / v828;
                    float v448 = (float)((float)((float)((float)(*(float *)&v806
                                                         - (float)(v829 * (float)(*(float *)&v805 / v819)))
                                                 - (float)(v830 * v814))
                                         - (float)(v831 * v447))
                                 - (float)(v832 * v816))
                         / v833;
                    float v817 = v448;
                    float v818 = (float)((float)((float)((float)((float)(*((float *)&v806 + 1)
                                                                 - (float)(v834 * (float)(*(float *)&v805 / v819)))
                                                         - (float)(v835 * v814))
                                                 - (float)(v836 * v447))
                                         - (float)(v837 * v816))
                                 - (float)(v838 * v448))
                         / v839;
                    float v812 = v818 / v839;
                    float v811 = (float)(v448 - (float)(v838 * (float)(v818 / v839))) / v833;
                    float v449 = (float)((float)(v816 - (float)(v832 * v811)) - (float)(v837 * (float)(v818 / v839))) / v828;
                    float v810 = v449;
                    float v809 = (float)((float)((float)(v447 - (float)(v827 * v449)) - (float)(v831 * v811))
                                 - (float)(v836 * (float)(v818 / v839)))
                         / v824;
                    float v808 = (float)((float)((float)((float)(v814 - (float)(v823 * v809)) - (float)(v826 * v449))
                                         - (float)(v830 * v811))
                                 - (float)(v835 * (float)(v818 / v839)))
                         / v821;
                    float v807 = (float)((float)((float)((float)((float)((float)(*(float *)&v805 / v819) - (float)(v820 * v808))
                                                         - (float)(v822 * v809))
                                                 - (float)(v825 * v449))
                                         - (float)(v829 * v811))
                                 - (float)(v834 * (float)(v818 / v839)))
                         / v819;
                    float v737 = v807;
                    double v782 = v696 + v807;
                    float v739 = v808;
                    double v776 = v695 + v808;
                    float v743 = v809;
                    double v771 = v694 + v809;
                    float v744 = v449;
                    float v745 = v811;
                    double v450 = v811;
                    float v746 = v818 / v839;
                    double v451 = (float)(v818 / v839);
                    __double2 v452 = __sincos_stret(v449);
                    __double2 v453 = __sincos_stret(v450);
                    double v454 = v453.__cosval;
                    __double2 v455 = __sincos_stret(v451);
                    double v456 = v453.__sinval * v452.__cosval * v455.__sinval - v452.__sinval * v455.__cosval;
                    double v457 = v455.__sinval * v452.__sinval + v453.__sinval * v452.__cosval * v455.__cosval;
                    double v458 = v455.__cosval * v452.__cosval + v453.__sinval * v452.__sinval * v455.__sinval;
                    double v459 = v453.__sinval * v452.__sinval * v455.__cosval - v452.__cosval * v455.__sinval;
                    double v766 = cosval * (v454 * v452.__cosval) + 0.0 + v702 * (v454 * v452.__sinval) - v701 * v453.__sinval;
                    double v763 = cosval * v456 + 0.0 + v702 * v458 + v701 * (v455.__sinval * v453.__cosval);
                    double v760 = cosval * v457 + 0.0 + v702 * v459 + v701 * (v455.__cosval * v453.__cosval);
                    double v758 = sinval * (v454 * v452.__cosval) + 0.0 + v700 * (v454 * v452.__sinval) - v699 * v453.__sinval;
                    double v756 = sinval * v456 + 0.0 + v700 * v458 + v699 * (v455.__sinval * v453.__cosval);
                    double v754 = sinval * v457 + 0.0 + v700 * v459 + v699 * (v455.__cosval * v453.__cosval);
                    double v752 = v698 * (v454 * v452.__cosval) + 0.0 + v703 * (v454 * v452.__sinval) - v697 * v453.__sinval;
                    double v750 = v698 * v456 + 0.0 + v703 * v458 + v697 * (v455.__sinval * v453.__cosval);
                    double v748 = v698 * v457 + 0.0 + v703 * v459 + v697 * (v455.__cosval * v453.__cosval);
                    if ((int)v249 < 1)
                    {
                      int v460 = 0;
                      float v463 = 0.0;
                      float v103 = 0.5;
                    }
                    else
                    {
                      int v460 = 0;
                      v461 = v661 + 1;
                      v462 = v660 + 1;
                      float v463 = 0.0;
                      v464 = (float *)v234;
                      uint64_t v465 = v678;
                      v466 = v681;
                      float v103 = 0.5;
                      do
                      {
                        if (!*v466++)
                        {
                          if (v234) {
                            float v467 = *v464;
                          }
                          else {
                            float v467 = 1.0;
                          }
                          float v469 = *(v461 - 1);
                          float v468 = *v461;
                          double v470 = *(v462 - 1) - v782;
                          double v471 = *v462 - v776;
                          double v472 = v462[1] - v771;
                          float v473 = v758 * v471 + v766 * v470 + v752 * v472;
                          float v474 = v756 * v471 + v763 * v470 + v750 * v472;
                          float v475 = v754 * v471 + v760 * v470 + v748 * v472;
                          float v476 = atan2f(v474, v473);
                          float v477 = atanf(v475 / sqrtf((float)(v474 * v474) + (float)(v473 * v473)));
                          float v478 = ((float)(v469 - v476)
                                + 3.14159265
                                + (double)((int)(((float)(v469 - v476) + 3.14159265) * 0.159154943)
                                         - ((float)(v469 - v476) + 3.14159265 < 0.0))
                                * -6.28318531
                                + -3.14159265)
                               * v467;
                          float v463 = v463
                               + (float)((float)((float)(v467 * (float)(v468 - v477))
                                               * (float)(v467 * (float)(v468 - v477)))
                                       + (float)(v478 * v478));
                          ++v460;
                          float v103 = 0.5;
                        }
                        ++v464;
                        v462 += 3;
                        v461 += 2;
                        --v465;
                      }
                      while (v465);
                    }
                    float v314 = v463 / (float)v460;
                    LODWORD(v249) = v679;
                    if (v314 >= (float)(v740 / (float)v316))
                    {
                      float v741 = v740 / (float)v316;
                      float v807 = v737 * v103;
                      float v808 = v739 * v103;
                      float v809 = v743 * v103;
                      float v810 = v744 * v103;
                      float v811 = v745 * v103;
                      float v812 = v746 * v103;
                      double v782 = v696 + (float)(v737 * v103);
                      double v776 = v695 + (float)(v739 * v103);
                      double v771 = v694 + (float)(v743 * v103);
                      __double2 v480 = __sincos_stret((float)(v744 * v103));
                      __double2 v481 = __sincos_stret((float)(v745 * v103));
                      double v482 = v481.__cosval;
                      __double2 v483 = __sincos_stret((float)(v746 * v103));
                      double v484 = v481.__sinval * v480.__cosval * v483.__sinval - v480.__sinval * v483.__cosval;
                      double v485 = v483.__sinval * v480.__sinval + v481.__sinval * v480.__cosval * v483.__cosval;
                      double v486 = v483.__cosval * v480.__cosval + v481.__sinval * v480.__sinval * v483.__sinval;
                      double v487 = v481.__sinval * v480.__sinval * v483.__cosval - v480.__cosval * v483.__sinval;
                      double v766 = cosval * (v482 * v480.__cosval)
                           + 0.0
                           + v702 * (v482 * v480.__sinval)
                           - v701 * v481.__sinval;
                      double v763 = cosval * v484 + 0.0 + v702 * v486 + v701 * (v483.__sinval * v481.__cosval);
                      double v760 = cosval * v485 + 0.0 + v702 * v487 + v701 * (v483.__cosval * v481.__cosval);
                      double v758 = sinval * (v482 * v480.__cosval)
                           + 0.0
                           + v700 * (v482 * v480.__sinval)
                           - v699 * v481.__sinval;
                      double v756 = sinval * v484 + 0.0 + v700 * v486 + v699 * (v483.__sinval * v481.__cosval);
                      double v754 = sinval * v485 + 0.0 + v700 * v487 + v699 * (v483.__cosval * v481.__cosval);
                      double v752 = v698 * (v482 * v480.__cosval) + 0.0 + v703 * (v482 * v480.__sinval) - v697 * v481.__sinval;
                      double v750 = v698 * v484 + 0.0 + v703 * v486 + v697 * (v483.__sinval * v481.__cosval);
                      double v748 = v698 * v485 + 0.0 + v703 * v487 + v697 * (v483.__cosval * v481.__cosval);
                      if (v679 < 1)
                      {
                        int v312 = 0;
                        float v313 = 0.0;
                        float v103 = 0.5;
                      }
                      else
                      {
                        int v312 = 0;
                        v488 = v661 + 1;
                        v489 = v660 + 1;
                        float v313 = 0.0;
                        v490 = (float *)v234;
                        uint64_t v491 = v678;
                        v492 = v681;
                        float v103 = 0.5;
                        do
                        {
                          if (!*v492++)
                          {
                            if (v234) {
                              float v493 = *v490;
                            }
                            else {
                              float v493 = 1.0;
                            }
                            float v494 = *(v488 - 1);
                            float v495 = *v488;
                            double v496 = *(v489 - 1) - v782;
                            double v497 = *v489 - v776;
                            double v498 = v489[1] - v771;
                            float v499 = v758 * v497 + v766 * v496 + v752 * v498;
                            float v500 = v756 * v497 + v763 * v496 + v750 * v498;
                            float v501 = v754 * v497 + v760 * v496 + v748 * v498;
                            float v502 = atan2f(v500, v499);
                            float v503 = atanf(v501 / sqrtf((float)(v500 * v500) + (float)(v499 * v499)));
                            float v504 = ((float)(v494 - v502)
                                  + 3.14159265
                                  + (double)((int)(((float)(v494 - v502) + 3.14159265) * 0.159154943)
                                           - ((float)(v494 - v502) + 3.14159265 < 0.0))
                                  * -6.28318531
                                  + -3.14159265)
                                 * v493;
                            float v313 = v313
                                 + (float)((float)((float)(v493 * (float)(v495 - v503))
                                                 * (float)(v493 * (float)(v495 - v503)))
                                         + (float)(v504 * v504));
                            ++v312;
                            float v103 = 0.5;
                          }
                          ++v490;
                          v489 += 3;
                          v488 += 2;
                          --v491;
                        }
                        while (v491);
                      }
                      float v314 = v313 / (float)v312;
                      float v315 = v741;
                      LODWORD(v249) = v679;
                      if (v314 >= v741) {
                        break;
                      }
                    }
                    int v311 = v682 + 1;
                    double v701 = v760;
                    double v702 = v763;
                    double cosval = v766;
                    double sinval = v758;
                    double v699 = v754;
                    double v700 = v756;
                    double v703 = v750;
                    double v697 = v748;
                    double v698 = v752;
                    double v695 = v776;
                    double v696 = v782;
                    double v694 = v771;
                    float v315 = v314;
                  }
                  while (v682 != 3);
                  float v506 = sqrtf(v315);
                  if (v506 <= v672 || v674 >= 0x12) {
                    float v506 = v672;
                  }
                  float v777 = v506;
                  if ((int)v249 < 1)
                  {
                    float v305 = 0.0;
                    int v306 = 1;
                  }
                  else
                  {
                    float v783 = v506 * v506;
                    int v306 = 1;
                    v509 = v661 + 1;
                    v508 = v660 + 1;
                    float v305 = 0.0;
                    v510 = v681;
                    v511 = (float *)v234;
                    uint64_t v512 = v678;
                    do
                    {
                      if (v234) {
                        float v513 = *v511;
                      }
                      else {
                        float v513 = 1.0;
                      }
                      int v514 = *v510;
                      float v516 = *(v509 - 1);
                      float v515 = *v509;
                      double v517 = *(v508 - 1) - v696;
                      double v518 = *v508 - v695;
                      double v519 = v508[1] - v694;
                      float v520 = sinval * v518 + cosval * v517 + v698 * v519;
                      float v521 = v700 * v518 + v702 * v517 + v703 * v519;
                      float v522 = v699 * v518 + v701 * v517 + v697 * v519;
                      float v523 = atan2f(v521, v520);
                      float v524 = atanf(v522 / sqrtf((float)(v521 * v521) + (float)(v520 * v520)));
                      float v525 = ((float)(v516 - v523)
                            + 3.14159265
                            + (double)((int)(((float)(v516 - v523) + 3.14159265) * 0.159154943)
                                     - ((float)(v516 - v523) + 3.14159265 < 0.0))
                            * -6.28318531
                            + -3.14159265)
                           * v513;
                      float v526 = (float)((float)(v513 * (float)(v515 - v524)) * (float)(v513 * (float)(v515 - v524)))
                           + (float)(v525 * v525);
                      int v527 = v526 > v783;
                      unsigned __int8 *v510 = v527;
                      float v528 = 0.0;
                      if (v526 <= v783) {
                        float v528 = 1.0;
                      }
                      BOOL v529 = v514 == v527;
                      if (v234)
                      {
                        float v103 = 0.5;
                        if (v526 <= v783) {
                          float v528 = *v511;
                        }
                      }
                      else
                      {
                        float v103 = 0.5;
                      }
                      v306 &= v529;
                      ++v511;
                      float v305 = v305 + v528;
                      ++v510;
                      v509 += 2;
                      v508 += 3;
                      --v512;
                    }
                    while (v512);
                  }
                  if (v306) {
                    BOOL v307 = v777 == v672;
                  }
                  else {
                    BOOL v307 = 0;
                  }
                  unsigned int v308 = v674 + 1;
                  BOOL v309 = v307 || v305 < v671;
                  ++v674;
                  BOOL v310 = v309 || v308 == 20;
                  LODWORD(v249) = v679;
                }
                while (!v310);
                *(double *)&long long v790 = cosval;
                *((double *)&v790 + 1) = v702;
                *(double *)&long long v791 = v701;
                *((double *)&v791 + 1) = sinval;
                *(double *)&long long v792 = v700;
                *((double *)&v792 + 1) = v699;
                *(double *)&long long v793 = v698;
                *((double *)&v793 + 1) = v703;
                *(double *)&long long v794 = v697;
                *((double *)&v794 + 1) = v696;
                *(double *)&long long v795 = v695;
                *((double *)&v795 + 1) = v694;
                free(v681);
                uint64_t v100 = a11;
                uint64_t v530 = *(int *)(a11 + 52);
                uint64_t v531 = v530 - 1;
                uint64_t v34 = a12;
                float v104 = v673;
                float v105 = v675;
                if (v305 <= *(float *)(a12 + 104 * (v530 - 1) + 96))
                {
                  uint64_t v118 = v669;
LABEL_444:
                  uint64_t v233 = v656;
                  goto LABEL_250;
                }
                double v532 = *(double *)&v794;
                uint64_t v118 = v669;
                if (v532 > cosf(*(float *)(a11 + 32)))
                {
                  if ((int)v530 < 1)
                  {
LABEL_436:
                    v562 = (_OWORD *)(a12 + 104 * v531);
                    long long v563 = v793;
                    v562[2] = v792;
                    v562[3] = v563;
                    long long v564 = v795;
                    v562[4] = v794;
                    v562[5] = v564;
                    long long v565 = v791;
                    _OWORD *v562 = v790;
                    v562[1] = v565;
                    LODWORD(v562) = *(_DWORD *)(v100 + 52);
                    *(float *)(a12 + 104 * ((int)v562 - 1) + 96) = v305;
                    if ((int)v562 > 1)
                    {
                      v566 = v650;
                      uint64_t v567 = 2;
                      uint64_t v568 = 1;
                      do
                      {
                        v569 = (float *)v566;
                        uint64_t v570 = v567;
                        do
                        {
                          if ((float)(*(float *)(a12 + 104 * (v570 - 2) + 96) - v569[24]) >= 0.0) {
                            break;
                          }
                          long long v571 = *((_OWORD *)v569 + 5);
                          v572 = (long long *)(a12 + 104 * (v570 - 2));
                          long long v800 = *((_OWORD *)v569 + 4);
                          long long v801 = v571;
                          *(void *)&long long v802 = *((void *)v569 + 12);
                          long long v573 = *((_OWORD *)v569 + 1);
                          long long v796 = *(_OWORD *)v569;
                          long long v797 = v573;
                          long long v574 = *((_OWORD *)v569 + 3);
                          long long v798 = *((_OWORD *)v569 + 2);
                          long long v799 = v574;
                          long long v576 = v572[1];
                          long long v575 = v572[2];
                          *(_OWORD *)v569 = *v572;
                          *((_OWORD *)v569 + 1) = v576;
                          *((_OWORD *)v569 + 2) = v575;
                          long long v578 = v572[4];
                          long long v577 = v572[5];
                          long long v579 = v572[3];
                          *((void *)v569 + 12) = *((void *)v572 + 12);
                          *((_OWORD *)v569 + 4) = v578;
                          *((_OWORD *)v569 + 5) = v577;
                          *((_OWORD *)v569 + 3) = v579;
                          long long v580 = v797;
                          long long *v572 = v796;
                          v572[1] = v580;
                          *((void *)v572 + 12) = v802;
                          long long v581 = v801;
                          v572[4] = v800;
                          v572[5] = v581;
                          long long v582 = v799;
                          --v570;
                          v569 -= 26;
                          v572[2] = v798;
                          v572[3] = v582;
                        }
                        while (v570 > 1);
                        ++v568;
                        ++v567;
                        v566 = (long long *)((char *)v566 + 104);
                      }
                      while (*(_DWORD *)(v100 + 52) > (int)v568);
                    }
                  }
                  else
                  {
                    uint64_t v533 = 0;
                    uint64_t v534 = a12;
                    while (1)
                    {
                      float v536 = (*((double *)&v794 + 1) - *(double *)(v534 + 72))
                           * (*((double *)&v794 + 1) - *(double *)(v534 + 72))
                           + 0.0;
                      float v537 = v536
                           + (*(double *)&v795 - *(double *)(v534 + 80)) * (*(double *)&v795 - *(double *)(v534 + 80));
                      float v538 = v537
                           + (*((double *)&v795 + 1) - *(double *)(v534 + 88))
                           * (*((double *)&v795 + 1) - *(double *)(v534 + 88));
                      float v539 = sqrtf(v538);
                      double v540 = g_coords_angle_diff((double *)&v790, (double *)v534);
                      uint64_t v100 = a11;
                      if (v539 < *(float *)(a11 + 44))
                      {
                        float v541 = v540;
                        if (*(float *)(a11 + 48) > v541) {
                          break;
                        }
                      }
                      ++v533;
                      uint64_t v535 = *(int *)(a11 + 52);
                      v534 += 104;
                      if (v533 >= v535)
                      {
                        uint64_t v531 = v535 - 1;
                        goto LABEL_436;
                      }
                    }
                    if (*(float *)(v534 + 96) <= v305)
                    {
                      long long v542 = v791;
                      *(_OWORD *)uint64_t v534 = v790;
                      *(_OWORD *)(v534 + 16) = v542;
                      long long v543 = v795;
                      *(_OWORD *)(v534 + 64) = v794;
                      *(_OWORD *)(v534 + 80) = v543;
                      long long v544 = v793;
                      *(_OWORD *)(v534 + 32) = v792;
                      *(_OWORD *)(v534 + 4_Block_object_dispose(&STACK[0x220], 8) = v544;
                      *(float *)(v534 + 96) = v305;
                      if (*(int *)(a11 + 52) >= 2)
                      {
                        v545 = v650;
                        uint64_t v546 = 2;
                        uint64_t v547 = 1;
                        do
                        {
                          v548 = (float *)v545;
                          uint64_t v549 = v546;
                          do
                          {
                            if ((float)(*(float *)(a12 + 104 * (v549 - 2) + 96) - v548[24]) >= 0.0) {
                              break;
                            }
                            long long v550 = *((_OWORD *)v548 + 5);
                            v551 = (long long *)(a12 + 104 * (v549 - 2));
                            long long v800 = *((_OWORD *)v548 + 4);
                            long long v801 = v550;
                            *(void *)&long long v802 = *((void *)v548 + 12);
                            long long v552 = *((_OWORD *)v548 + 1);
                            long long v796 = *(_OWORD *)v548;
                            long long v797 = v552;
                            long long v553 = *((_OWORD *)v548 + 3);
                            long long v798 = *((_OWORD *)v548 + 2);
                            long long v799 = v553;
                            long long v555 = v551[1];
                            long long v554 = v551[2];
                            *(_OWORD *)v548 = *v551;
                            *((_OWORD *)v548 + 1) = v555;
                            *((_OWORD *)v548 + 2) = v554;
                            long long v557 = v551[4];
                            long long v556 = v551[5];
                            long long v558 = v551[3];
                            *((void *)v548 + 12) = *((void *)v551 + 12);
                            *((_OWORD *)v548 + 4) = v557;
                            *((_OWORD *)v548 + 5) = v556;
                            *((_OWORD *)v548 + 3) = v558;
                            long long v559 = v797;
                            long long *v551 = v796;
                            v551[1] = v559;
                            *((void *)v551 + 12) = v802;
                            long long v560 = v801;
                            v551[4] = v800;
                            v551[5] = v560;
                            long long v561 = v799;
                            --v549;
                            v548 -= 26;
                            v551[2] = v798;
                            v551[3] = v561;
                          }
                          while (v549 > 1);
                          ++v547;
                          ++v546;
                          v545 = (long long *)((char *)v545 + 104);
                        }
                        while (*(_DWORD *)(a11 + 52) > (int)v547);
                      }
                    }
                  }
                  if (*(float *)(a12 + 96) >= (float)(*(float *)(v100 + 40) * 32.0)) {
                    goto LABEL_446;
                  }
                  goto LABEL_444;
                }
                uint64_t v233 = v656;
              }
LABEL_250:
              if (v785 <= ++v233) {
                goto LABEL_446;
              }
            }
          }
          v660 = 0;
          v661 = 0;
          double v234 = 0;
LABEL_446:
          free(v660);
          free(v661);
          free(v234);
          float v583 = *(float *)(v34 + 104 * *(int *)(v100 + 52) - 8);
          if ((float)(v653 / v583) >= 0.98 || *(float *)(v34 + 96) >= (float)(*(float *)(v100 + 40) * 32.0)) {
            goto LABEL_511;
          }
          uint64_t v584 = v785;
          if (v785 < 1)
          {
            uint64_t v585 = 0;
            v589 = (float *)v677;
          }
          else
          {
            uint64_t v585 = 0;
            v586 = v786;
            v587 = (char *)v786;
            uint64_t v588 = v785;
            v589 = (float *)v677;
            do
            {
              if (*(float *)(*(void *)v587 + 32) > v583) {
                v586[v585++] = *(void *)v587;
              }
              v587 += 8;
              --v588;
            }
            while (v588);
          }
          if (v585 <= v787)
          {
            uint64_t v670 = v118;
            uint64_t v592 = v585 - v584;
            if (v585 <= v584) {
              goto LABEL_463;
            }
          }
          else
          {
            uint64_t v590 = 32;
            if (v787) {
              uint64_t v590 = 2 * v787;
            }
            if (v590 <= v585) {
              uint64_t v591 = v585;
            }
            else {
              uint64_t v591 = v590;
            }
            if (v591) {
              v786 = malloc_type_realloc(v786, 8 * v591, 0x822BDEF7uLL);
            }
            uint64_t v787 = v591;
            uint64_t v670 = v118;
            uint64_t v592 = v585 - v584;
            if (v585 <= v584)
            {
LABEL_463:
              uint64_t v785 = v585;
              if (v654 < v54[3].i32[1]) {
                goto LABEL_467;
              }
              goto LABEL_60;
            }
          }
          bzero((char *)v786 + 8 * v584, 8 * v592);
          uint64_t v785 = v585;
          if (v654 < v54[3].i32[1])
          {
LABEL_467:
            deactivate_tree((uint64_t)v54, (uint64_t)*v54);
            if (v585 < 1)
            {
              remove_inactive_nodes(v54, (uint64_t)*v54);
            }
            else
            {
              uint64_t v593 = 0;
              v594 = (_DWORD **)v786;
              do
              {
                octnode_insert((uint64_t)v54, *v54, *v594[v593], v594[v593][1], v594[v593][2], v594[v593][3]);
                ++v593;
              }
              while (v585 != v593);
              remove_inactive_nodes(v54, (uint64_t)*v54);
              uint64_t v595 = 0;
              float v596 = -v675;
              float v597 = -v673;
              uint64_t v764 = v585;
              v761 = v594;
              do
              {
                int v778 = 0;
                uint64_t v767 = v595;
                v598 = v594[v595];
                char v599 = 1;
                do
                {
                  int v600 = 0;
                  char v772 = v599;
                  char v601 = 1;
                  do
                  {
                    char v784 = v601;
                    signed int v602 = v778 | (2 * v598[1]);
                    signed int v603 = v600 | (2 * v598[2]);
                    uint64_t v604 = (1 << (v54[3].i32[1] + ~*v598));
                    float v605 = v54[2].f32[1];
                    float v606 = v54[1].f32[0] + (float)((float)((float)((float)v602 + v103) * (float)(int)v604) * v605);
                    signed int v607 = 2 * v598[3];
                    float v608 = v54[1].f32[1] + (float)((float)((float)((float)v603 + v103) * (float)(int)v604) * v605);
                    float v609 = (float)((float)(v608 - v589[1]) * (float)(v608 - v589[1]))
                         + (float)((float)(v606 - *v589) * (float)(v606 - *v589));
                    if (v609 <= v684 && v609 >= v683)
                    {
                      v611 = v680;
                      v612 = (void *)(a9 + 16);
                      uint64_t v613 = a10;
                      do
                      {
                        uint64_t v614 = *((unsigned int *)v611 - 2);
                        LODWORD(v604) = vcvtms_s32_f32((float)(v606 - (float)(*v16 + (float)(v596 * v103)))* (float)((float)(int)v614 / v105));
                        if ((v604 & 0x80000000) == 0 && (int)v614 > (int)v604)
                        {
                          int v615 = *((_DWORD *)v611 - 1);
                          LODWORD(v614) = vcvtms_s32_f32((float)(v608 - (float)(v16[1] + (float)(v597 * v103)))* (float)((float)v615 / v104));
                          if ((v614 & 0x80000000) == 0 && v615 > (int)v614)
                          {
                            float v616 = *(float *)(*(v611 - 2) + 4 * (v604 + *v611 * v614));
                            float v617 = *(float *)(*(v612 - 2) + 4 * (v604 + *v612 * v614));
                            float v618 = v54[2].f32[0];
                            float v619 = v54[3].f32[0];
                            uint64_t v604 = ((int)(float)((float)((float)(v616 - v617) - v618) / v619) >> (v54[3].i8[4] - (*(unsigned char *)v598 + 1)));
                            if ((int)v604 <= v607
                              && v607 <= (int)(float)((float)((float)(v616 + v617) - v618) / v619) >> (v54[3].i8[4] - (*(unsigned char *)v598 + 1)))
                            {
                              octnode_insert((uint64_t)v54, *v54, *v598 + 1, v602, v603, v607);
                              float v597 = -v673;
                              float v596 = -v675;
                            }
                          }
                        }
                        v612 += 3;
                        v611 += 3;
                        --v613;
                      }
                      while (v613);
                      float v621 = v54[2].f32[1];
                      v589 = (float *)v677;
                      signed int v602 = v778 | (2 * v598[1]);
                      signed int v603 = v600 | (2 * v598[2]);
                      signed int v607 = 2 * v598[3];
                      uint64_t v604 = (1 << (v54[3].i32[1] + ~*v598));
                      float v606 = v54[1].f32[0] + (float)((float)((float)((float)v602 + v103) * (float)(int)v604) * v621);
                      float v608 = v54[1].f32[1] + (float)((float)((float)((float)v603 + v103) * (float)(int)v604) * v621);
                      float v609 = (float)((float)(v608 - v677->f32[1]) * (float)(v608 - v677->f32[1]))
                           + (float)((float)(v606 - v677->f32[0]) * (float)(v606 - v677->f32[0]));
                    }
                    if (v609 <= v684 && v609 >= v683)
                    {
                      signed int v623 = v607 | 1;
                      v624 = v680;
                      v625 = (void *)(a9 + 16);
                      uint64_t v626 = a10;
                      do
                      {
                        uint64_t v627 = *((unsigned int *)v624 - 2);
                        LODWORD(v604) = vcvtms_s32_f32((float)(v606 - (float)(*v16 + (float)(v596 * v103)))* (float)((float)(int)v627 / v105));
                        if ((v604 & 0x80000000) == 0 && (int)v627 > (int)v604)
                        {
                          int v628 = *((_DWORD *)v624 - 1);
                          LODWORD(v627) = vcvtms_s32_f32((float)(v608 - (float)(v16[1] + (float)(v597 * v103)))* (float)((float)v628 / v104));
                          if ((v627 & 0x80000000) == 0 && v628 > (int)v627)
                          {
                            float v629 = *(float *)(*(v624 - 2) + 4 * (v604 + *v624 * v627));
                            float v630 = *(float *)(*(v625 - 2) + 4 * (v604 + *v625 * v627));
                            float v631 = v54[2].f32[0];
                            float v632 = v54[3].f32[0];
                            uint64_t v604 = ((int)(float)((float)((float)(v629 - v630) - v631) / v632) >> (v54[3].i8[4] - (*(unsigned char *)v598 + 1)));
                            if ((int)v604 <= v623
                              && v623 <= (int)(float)((float)((float)(v629 + v630) - v631) / v632) >> (v54[3].i8[4] - (*(unsigned char *)v598 + 1)))
                            {
                              octnode_insert((uint64_t)v54, *v54, *v598 + 1, v602, v603, v623);
                              float v597 = -v673;
                              float v596 = -v675;
                            }
                          }
                        }
                        v625 += 3;
                        v624 += 3;
                        --v626;
                      }
                      while (v626);
                    }
                    char v601 = 0;
                    int v600 = 1;
                  }
                  while ((v784 & 1) != 0);
                  char v599 = 0;
                  int v778 = 1;
                }
                while ((v772 & 1) != 0);
                uint64_t v595 = v767 + 1;
                v594 = v761;
              }
              while (v767 + 1 != v764);
            }
          }
LABEL_60:
          __int32 v102 = v54[3].i32[1];
          BOOL v156 = v654++ < v102;
          uint64_t v34 = a12;
          uint64_t v76 = v655;
          uint64_t v100 = a11;
          uint64_t v75 = v670;
          if (!v156) {
            goto LABEL_511;
          }
        }
        uint64_t v652 = v119;
        ptr = (int *)malloc_type_realloc(ptr, 4 * v119, 0x1AAE717CuLL);
LABEL_88:
        uint64_t v120 = v667 - v106;
        if (v667 <= v106) {
          goto LABEL_90;
        }
LABEL_89:
        bzero(&ptr[v106], 4 * v120);
        goto LABEL_90;
      }
LABEL_511:
      uint64_t v634 = (uint64_t)*v54;
      if (*(void *)(v100 + 56)) {
        *(void *)(v100 + 56) = mem_usage((uint64_t *)v54, (uint64_t)*v54);
      }
      otree_free_children(v634);
      free(*(void **)v54);
      if (*(void *)&v54[5] >= 1)
      {
        uint64_t v635 = 0;
        do
          free(*(void **)(*(void *)&v54[6] + 8 * v635++));
        while (v635 < *(void *)&v54[5]);
      }
      free(*(void **)&v54[6]);
      free(v54);
      free(v651);
      free(v786);
      free(ptr);
      uint64_t v33 = v100;
    }
  }
  uint64_t v636 = *(unsigned int *)(v33 + 52);
  if ((int)v636 < 1) {
    return 0;
  }
  float v637 = *(float *)(v33 + 36) * 32.0;
  if (v636 == 1)
  {
    uint64_t v638 = 0;
    LODWORD(result) = 0;
LABEL_528:
    uint64_t v647 = v636 - v638;
    v648 = (float *)(v34 + 104 * v638 + 96);
    do
    {
      float v649 = *v648;
      v648 += 26;
      if (v649 < v637) {
        uint64_t result = result;
      }
      else {
        uint64_t result = (result + 1);
      }
      --v647;
    }
    while (v647);
    return result;
  }
  int v640 = 0;
  int v641 = 0;
  uint64_t v638 = v636 & 0xFFFFFFFE;
  v642 = (float *)(v34 + 200);
  uint64_t v643 = v638;
  do
  {
    float v644 = *(v642 - 26);
    float v645 = *v642;
    v642 += 52;
    float v646 = v645;
    if (v644 >= v637) {
      ++v640;
    }
    if (v646 >= v637) {
      ++v641;
    }
    v643 -= 2;
  }
  while (v643);
  uint64_t result = (v641 + v640);
  if (v638 != v636) {
    goto LABEL_528;
  }
  return result;
}

uint64_t compute_score(float32x2_t *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, int a11)
{
  if (!*(_DWORD *)(a2 + 28)) {
    return 0;
  }
  int v21 = *(_DWORD *)a2;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v22 = (int)a8 >> 6;
  if (v21 <= a11 && ((*(void *)(a2 + 8 * v22 + 40) >> a8) & 1) == 0) {
    return 0;
  }
  int v23 = compute_theta_alpha_node(a1, a2, a4, (float *)&v92 + 1, (float *)&v92, (float *)&v91 + 1, (float *)&v91);
  if (v23)
  {
    float v25 = *(float *)(a6 + 28);
    if ((float)(*((float *)&v92 + 1) - v25) > a10 || (float)(*(float *)&v92 + v25) < a10) {
      return 0;
    }
    if (a5)
    {
      v24.i32[0] = HIDWORD(v91);
      float v27 = *a5;
      float v28 = a5[1];
      float v29 = (float)(*((float *)&v91 + 1) - *a5)
          + (double)(int)((__PAIR64__((int)((float)(*((float *)&v91 + 1) - *a5) * 0.159154943), *((float *)&v91 + 1) - *a5)- COERCE_UNSIGNED_INT(0.0)) >> 32)* -6.28318531;
      BOOL v30 = v29 <= 0.0 || v28 <= v29;
      if (v30)
      {
        float v31 = (float)(*(float *)&v91 - v27)
            + (double)(int)((__PAIR64__((int)((float)(*(float *)&v91 - v27) * 0.159154943), *(float *)&v91 - v27)
                           - COERCE_UNSIGNED_INT(0.0)) >> 32)
            * -6.28318531;
        if (v31 <= 0.0 || v28 <= v31)
        {
          v33.f32[0] = v27 + (float)(v28 * 0.5);
          v33.i32[1] = v91;
          float32x2_t v34 = vsub_f32(v33, (float32x2_t)vdup_lane_s32(v24, 0));
          float64x2_t v35 = vcvtq_f64_f32(v34);
          int32x2_t v36 = vadd_s32(vmovn_s64(vcvtq_s64_f64(vmulq_f64(v35, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL)))), vcltz_f32(v34));
          v37.i64[0] = v36.i32[0];
          v37.i64[1] = v36.i32[1];
          float64x2_t v38 = vmlaq_f64(v35, (float64x2_t)vdupq_n_s64(0xC01921FB54442D18), vcvtq_f64_s64(v37));
          if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1), v38))).u32[0]) {
            return 0;
          }
        }
      }
    }
  }
  *(void *)(a2 + 8 * v22 + 40) |= 1 << a8;
  if (v21 < (int)a7 || !v23)
  {
    if (v21 < (int)a7)
    {
      uint64_t v56 = *(void *)(a2 + 296);
      if (v56)
      {
        int v57 = ((uint64_t (*)(float32x2_t *, uint64_t, uint64_t, float32x2_t *, float *, uint64_t, uint64_t, uint64_t, float, float, int))compute_score)(a1, v56, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        compute_score(a1, *(void *)(a2 + 296) + 304, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        int v89 = v58 | v57;
        compute_score(a1, *(void *)(a2 + 296) + 608, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        int v60 = v59;
        compute_score(a1, *(void *)(a2 + 296) + 912, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        int v90 = v89 | v60 | v61;
        compute_score(a1, *(void *)(a2 + 296) + 1216, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        int v63 = v62;
        compute_score(a1, *(void *)(a2 + 296) + 1520, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        int v65 = v63 | v64;
        compute_score(a1, *(void *)(a2 + 296) + 1824, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        int v67 = v90 | v65 | v66;
        compute_score(a1, *(void *)(a2 + 296) + 2128, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        return v67 | v68;
      }
    }
    return 0;
  }
  int v39 = *(_DWORD *)(a6 + 24);
  int v40 = v39 - 1;
  int v41 = (int)(float)((float)((float)((float)(*((float *)&v91 + 1) - a9) * 0.15915)
                           - (float)(int)((__PAIR64__((int)(float)((float)(*((float *)&v91 + 1) - a9) * 0.15915), (float)(*((float *)&v91 + 1) - a9) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v39);
  if (v39 - 1 >= v41) {
    LODWORD(v42) = (int)(float)((float)((float)((float)(*((float *)&v91 + 1) - a9) * 0.15915)
  }
                                      - (float)(int)((__PAIR64__((int)(float)((float)(*((float *)&v91 + 1) - a9) * 0.15915), (float)(*((float *)&v91 + 1) - a9) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v39);
  else {
    LODWORD(v42) = v39 - 1;
  }
  int v43 = (int)(float)((float)((float)((float)(*(float *)&v91 - a9) * 0.15915)
                           - (float)(int)((__PAIR64__((int)(float)((float)(*(float *)&v91 - a9) * 0.15915), (float)(*(float *)&v91 - a9) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v39);
  if (v40 >= v43) {
    int v44 = (int)(float)((float)((float)((float)(*(float *)&v91 - a9) * 0.15915)
  }
                             - (float)(int)((__PAIR64__((int)(float)((float)(*(float *)&v91 - a9) * 0.15915), (float)(*(float *)&v91 - a9) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v39);
  else {
    int v44 = v39 - 1;
  }
  if (v44 >= (int)v42) {
    unsigned int v45 = v42;
  }
  else {
    unsigned int v45 = v44;
  }
  if (v44 > (int)v42) {
    LODWORD(v42) = v44;
  }
  if (v39 >= 0) {
    int v46 = *(_DWORD *)(a6 + 24);
  }
  else {
    int v46 = v39 + 1;
  }
  if ((int)(v42 - v45) < v46 >> 1)
  {
    uint64_t v47 = *(void *)(a2 + 16);
    if (v41 >= v43) {
      int v48 = v43;
    }
    else {
      int v48 = v41;
    }
    if (v48 >= v40) {
      int v48 = v40;
    }
    uint64_t v49 = v48;
    if (v41 >= v40) {
      int v41 = v40;
    }
    if (v48 <= v41) {
      int v48 = v41;
    }
    if (v43 < v40) {
      int v40 = v43;
    }
    if (v48 <= v40) {
      int v48 = v40;
    }
    unint64_t v50 = v48 - v49 + 1;
    uint64_t v51 = v49;
    if (v50 < 0x10) {
      goto LABEL_79;
    }
    uint64_t v51 = (v50 & 0xFFFFFFFFFFFFFFF0) + v49;
    int16x8_t v52 = vdupq_n_s16(a3);
    float v53 = (int16x8_t *)(v47 + 2 * v49 + 16);
    unint64_t v54 = v50 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v55 = vaddq_s16(*v53, v52);
      v53[-1] = vaddq_s16(v53[-1], v52);
      *float v53 = v55;
      v53 += 2;
      v54 -= 16;
    }
    while (v54);
    if (v50 != (v50 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_79:
      do
      {
        *(_WORD *)(v47 + 2 * v51) += a3;
        BOOL v30 = v51++ < (int)v42;
      }
      while (v30);
    }
    return 1;
  }
  if ((int)v42 < v39)
  {
    uint64_t v70 = *(void *)(a2 + 16);
    uint64_t v71 = (int)v42;
    uint64_t v72 = (v39 + ~v42);
    uint64_t v42 = (int)v42;
    if (v72 < 0xF) {
      goto LABEL_66;
    }
    uint64_t v73 = v72 + 1;
    uint64_t v42 = (v73 & 0x1FFFFFFF0) + (int)v42;
    int16x8_t v74 = vdupq_n_s16(a3);
    uint64_t v75 = (int16x8_t *)(v70 + 2 * v71 + 16);
    uint64_t v76 = v73 & 0x1FFFFFFF0;
    do
    {
      int16x8_t v77 = vaddq_s16(*v75, v74);
      v75[-1] = vaddq_s16(v75[-1], v74);
      *uint64_t v75 = v77;
      v75 += 2;
      v76 -= 16;
    }
    while (v76);
    if (v73 != (v73 & 0x1FFFFFFF0))
    {
LABEL_66:
      int v78 = v39 - v42;
      uint64_t v79 = (_WORD *)(v70 + 2 * v42);
      do
      {
        *v79++ += a3;
        --v78;
      }
      while (v78);
    }
  }
  if ((v45 & 0x80000000) != 0) {
    return 1;
  }
  signed int v80 = *(int16x8_t **)(a2 + 16);
  uint64_t v81 = v45 + 1;
  if (v45 >= 0xF)
  {
    uint64_t v82 = v81 & 0xFFFFFFF0;
    int16x8_t v83 = vdupq_n_s16(a3);
    float v84 = v80 + 1;
    uint64_t v85 = v82;
    do
    {
      int16x8_t v86 = vaddq_s16(*v84, v83);
      v84[-1] = vaddq_s16(v84[-1], v83);
      *float v84 = v86;
      v84 += 2;
      v85 -= 16;
    }
    while (v85);
    if (v82 == v81) {
      return 1;
    }
  }
  else
  {
    uint64_t v82 = 0;
  }
  uint64_t v87 = v81 - v82;
  uint64_t v88 = &v80->i16[v82];
  do
  {
    *v88++ += a3;
    --v87;
  }
  while (v87);
  return 1;
}

uint64_t integrate_score_to_leafs(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 28))
  {
    uint64_t v6 = result;
    while (1)
    {
      if (!a2) {
        goto LABEL_18;
      }
      uint64_t v7 = *(unsigned int *)(a4 + 24);
      if ((int)v7 < 1) {
        goto LABEL_18;
      }
      unint64_t v8 = *(void *)(v6 + 16);
      unint64_t v9 = *(void *)(a2 + 16);
      if (v7 >= 0x10 && (v8 < v9 + 2 * v7 ? (BOOL v10 = v9 >= v8 + 2 * v7) : (BOOL v10 = 1), v10))
      {
        uint64_t v11 = v7 & 0x7FFFFFF0;
        uint64_t v12 = (int16x8_t *)(v8 + 16);
        uint64_t v13 = (int16x8_t *)(v9 + 16);
        uint64_t v14 = v7 & 0xFFFFFFF0;
        do
        {
          int16x8_t v15 = vaddq_s16(*v12, *v13);
          v12[-1] = vaddq_s16(v12[-1], v13[-1]);
          int16x8_t *v12 = v15;
          v12 += 2;
          v13 += 2;
          v14 -= 16;
        }
        while (v14);
        if (v11 == v7) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v16 = v7 - v11;
      uint64_t v17 = 2 * v11;
      uint64_t v18 = (__int16 *)(v9 + v17);
      int v19 = (_WORD *)(v8 + v17);
      do
      {
        __int16 v20 = *v18++;
        *v19++ += v20;
        --v16;
      }
      while (v16);
LABEL_18:
      uint64_t result = *(void *)(v6 + 296);
      if (result)
      {
        if (*(_DWORD *)v6 < (int)a3)
        {
          ((void (*)(void))integrate_score_to_leafs)();
          integrate_score_to_leafs(*(void *)(v6 + 296) + 304, v6, a3, a4);
          integrate_score_to_leafs(*(void *)(v6 + 296) + 608, v6, a3, a4);
          integrate_score_to_leafs(*(void *)(v6 + 296) + 912, v6, a3, a4);
          integrate_score_to_leafs(*(void *)(v6 + 296) + 1216, v6, a3, a4);
          integrate_score_to_leafs(*(void *)(v6 + 296) + 1520, v6, a3, a4);
          uint64_t result = integrate_score_to_leafs(*(void *)(v6 + 296) + 1824, v6, a3, a4);
          uint64_t v21 = *(void *)(v6 + 296);
          a2 = v6;
          uint64_t v6 = v21 + 2128;
          if (*(_DWORD *)(v21 + 2156)) {
            continue;
          }
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t mem_usage(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v15 = *a1;
  if (*a1 == a2) {
    goto LABEL_4;
  }
  while (1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a2 + 296);
    if (!v5) {
      break;
    }
    while (1)
    {
      int v16 = 16 * *((_DWORD *)a1 + 8) + 2432;
      uint64_t v7 = mem_usage(a1, v5);
      uint64_t v8 = mem_usage(a1, v5 + 304);
      uint64_t v9 = mem_usage(a1, v5 + 608);
      uint64_t v10 = mem_usage(a1, v5 + 912);
      uint64_t v11 = mem_usage(a1, v5 + 1216);
      uint64_t v12 = mem_usage(a1, v5 + 1520);
      uint64_t v13 = mem_usage(a1, v5 + 1824);
      a2 = v5 + 2128;
      v3 += v4 + v7 + v8 + v16 + v9 + v10 + v11 + v12 + v13;
      if (v15 != v5 + 2128) {
        break;
      }
LABEL_4:
      uint64_t v6 = 16 * *((_DWORD *)a1 + 8) + 2432;
      uint64_t v4 = v6 + 8 * a1[7] + a1[5] * v6;
      uint64_t v5 = *(void *)(a2 + 296);
      if (!v5) {
        return v4 + v3;
      }
    }
  }
  return v4 + v3;
}

void octnode_insert(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  a2[7] = 1;
  int v6 = *a2;
  if (*a2 != a3)
  {
    uint64_t v11 = a2;
    do
    {
      uint64_t v13 = (_OWORD *)*((void *)v11 + 37);
      if (!v13)
      {
        uint64_t v23 = *(void *)(a1 + 40);
        if (v23)
        {
          uint64_t v24 = v23 - 1;
          *(void *)(a1 + 40) = v24;
          uint64_t v13 = *(_OWORD **)(*(void *)(a1 + 48) + 8 * v24);
          bzero(v13, 16 * *(_DWORD *)(a1 + 32) + 2432);
        }
        else
        {
          uint64_t v13 = malloc_type_calloc(1uLL, 16 * *(_DWORD *)(a1 + 32) + 2432, 0x8B962782uLL);
        }
        uint64_t v14 = *(int *)(a1 + 32);
        *((void *)v13 + 2) = v13 + 152;
        v14 *= 2;
        uint64_t v15 = (char *)v13 + v14 + 2432;
        *((void *)v13 + 40) = v15;
        int v16 = &v15[v14];
        *((void *)v13 + 7_Block_object_dispose(&STACK[0x220], 8) = v16;
        uint64_t v17 = &v16[v14];
        *((void *)v13 + 116) = v17;
        uint64_t v18 = &v17[v14];
        *((void *)v13 + 154) = v18;
        int v19 = &v18[v14];
        *((void *)v13 + 192) = v19;
        __int16 v20 = &v19[v14];
        *((void *)v13 + 230) = v20;
        *((void *)v13 + 26_Block_object_dispose(&STACK[0x220], 8) = &v20[v14];
        v21.i64[0] = 0x100000001;
        v21.i64[1] = 0x100000001;
        int32x4_t v22 = vaddq_s32(*(int32x4_t *)v11, *(int32x4_t *)v11);
        v22.i32[0] = vaddq_s32(*(int32x4_t *)v11, v21).u32[0];
        *((void *)v11 + 37) = v13;
        *uint64_t v13 = v22;
        LODWORD(v14) = *((_DWORD *)v11 + 1);
        *((_DWORD *)v13 + 76) = *(_DWORD *)v11 + 1;
        *((_DWORD *)v13 + 77) = (2 * v14) | 1;
        *((int32x2_t *)v13 + 39) = vadd_s32(*(int32x2_t *)((char *)v11 + 8), *(int32x2_t *)((char *)v11 + 8));
        v21.i32[0] = vadd_s32(*(int32x2_t *)v11, (int32x2_t)0x100000001).u32[0];
        v21.i32[1] = vadd_s32(*(int32x2_t *)v11, *(int32x2_t *)v11).i32[1];
        *((void *)v13 + 76) = v21.i64[0];
        LODWORD(v14) = *((_DWORD *)v11 + 3);
        *((_DWORD *)v13 + 154) = (2 * *((_DWORD *)v11 + 2)) | 1;
        *((_DWORD *)v13 + 155) = 2 * v14;
        *((_DWORD *)v13 + 22_Block_object_dispose(&STACK[0x220], 8) = *(_DWORD *)v11 + 1;
        *(void *)((char *)v13 + 916) = *(void *)&vadd_s32(*(int32x2_t *)((char *)v11 + 4), *(int32x2_t *)((char *)v11 + 4)) | 0x100000001;
        *((_DWORD *)v13 + 231) = 2 * *((_DWORD *)v11 + 3);
        v21.i32[0] = vadd_s32(*(int32x2_t *)v11, (int32x2_t)0x100000001).u32[0];
        v21.i32[1] = vadd_s32(*(int32x2_t *)v11, *(int32x2_t *)v11).i32[1];
        *((void *)v13 + 152) = v21.i64[0];
        LODWORD(v14) = *((_DWORD *)v11 + 3);
        *((_DWORD *)v13 + 306) = 2 * *((_DWORD *)v11 + 2);
        *((_DWORD *)v13 + 307) = (2 * v14) | 1;
        LODWORD(v14) = *((_DWORD *)v11 + 1);
        *((_DWORD *)v13 + 380) = *(_DWORD *)v11 + 1;
        *((_DWORD *)v13 + 381) = (2 * v14) | 1;
        LODWORD(v14) = *((_DWORD *)v11 + 3);
        *((_DWORD *)v13 + 382) = 2 * *((_DWORD *)v11 + 2);
        *((_DWORD *)v13 + 383) = (2 * v14) | 1;
        v21.i32[0] = vadd_s32(*(int32x2_t *)v11, (int32x2_t)0x100000001).u32[0];
        v21.i32[1] = vadd_s32(*(int32x2_t *)v11, *(int32x2_t *)v11).i32[1];
        *((void *)v13 + 22_Block_object_dispose(&STACK[0x220], 8) = v21.i64[0];
        *((void *)v13 + 229) = *(void *)&vadd_s32(*(int32x2_t *)((char *)v11 + 8), *(int32x2_t *)((char *)v11 + 8)) | 0x100000001;
        *((_DWORD *)v13 + 532) = *(_DWORD *)v11 + 1;
        *(void *)((char *)v13 + 2132) = *(void *)&vadd_s32(*(int32x2_t *)((char *)v11 + 4), *(int32x2_t *)((char *)v11 + 4)) | 0x100000001;
        *((_DWORD *)v13 + 535) = (2 * *((_DWORD *)v11 + 3)) | 1;
        int v6 = *(_DWORD *)v11;
      }
      uint64_t v11 = &v13[19
               * ((a4 >> (~(_BYTE)v6 + a3)) & 1 | (2 * ((a5 >> (~(_BYTE)v6 + a3)) & 1)) & 0xFFFFFFFB | (4 * ((a6 >> (~(_BYTE)v6 + a3)) & 1)))];
      *((_DWORD *)v11 + 7) = 1;
      int v6 = *(_DWORD *)v11;
    }
    while (*(_DWORD *)v11 != a3);
  }
}

uint64_t compute_theta_alpha_node(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float *a4, float *a5, float *a6, float *a7)
{
  float v7 = (float)(1 << (a1[3].i32[1] - *(_DWORD *)a2));
  float v8 = a1[2].f32[1];
  float v9 = (float)(v8 * v7) * 0.5;
  float32x2_t v10 = vsub_f32(*a3, vmla_n_f32(a1[1], vmul_n_f32(vadd_f32(vcvt_f32_s32(*(int32x2_t *)(a2 + 4)), (float32x2_t)0x3F0000003F000000), v7), v8));
  float v11 = v10.f32[1];
  float v12 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v10.f32[1], v10, 1), v10.f32[0], v10.f32[0]));
  float v13 = v9 * 1.4142;
  if (v12 < (float)(v9 * 1.4142)) {
    return 0;
  }
  float v15 = a1[3].f32[0];
  float v16 = (float)(v15 * v7) * 0.5;
  float v17 = a3[1].f32[0] - (float)(a1[2].f32[0] + (float)((float)((float)((float)*(int *)(a2 + 12) + 0.5) * v7) * v15));
  float v18 = v17 - v16;
  float v19 = (float)(v17 - v16) / (float)(v12 + (float)(v9 * -1.4142));
  if (v19 >= 0.0) {
    float v20 = (float)(v17 - v16) / (float)(v12 + (float)(v9 * -1.4142));
  }
  else {
    float v20 = -v19;
  }
  BOOL v21 = v20 < 1.0;
  if (v20 >= 1.0) {
    float v20 = 1.0 / v20;
  }
  float v22 = v20
      + (float)((float)((float)(v20 * v20)
                      * (float)((float)((float)((float)((float)(v20 * v20) * -0.046496) + 0.15931) * (float)(v20 * v20))
                              + -0.32762))
              * v20);
  if (!v21) {
    float v22 = 1.5708 - v22;
  }
  BOOL v21 = v19 < 0.0;
  float v23 = -v22;
  if (!v21) {
    float v23 = v22;
  }
  float v24 = v18 / (float)(v12 + (float)(v9 * 1.4142));
  float v25 = -v24;
  if (v24 >= 0.0) {
    float v25 = v18 / (float)(v12 + (float)(v9 * 1.4142));
  }
  BOOL v26 = v25 < 1.0;
  if (v25 >= 1.0) {
    float v25 = 1.0 / v25;
  }
  float v27 = v25
      + (float)((float)((float)(v25 * v25)
                      * (float)((float)((float)((float)((float)(v25 * v25) * -0.046496) + 0.15931) * (float)(v25 * v25))
                              + -0.32762))
              * v25);
  if (!v26) {
    float v27 = 1.5708 - v27;
  }
  BOOL v21 = v24 < 0.0;
  float v28 = -v27;
  if (!v21) {
    float v28 = v27;
  }
  if (v18 > 0.0) {
    float v29 = v28;
  }
  else {
    float v29 = v23;
  }
  *a4 = v29;
  float v30 = v16 + v17;
  float v31 = v30 / (float)(v12 + (float)(v9 * 1.4142));
  float v32 = -v31;
  if (v31 >= 0.0) {
    float v32 = v30 / (float)(v12 + (float)(v9 * 1.4142));
  }
  BOOL v33 = v32 < 1.0;
  if (v32 >= 1.0) {
    float v32 = 1.0 / v32;
  }
  float v34 = v32
      + (float)((float)((float)(v32 * v32)
                      * (float)((float)((float)((float)((float)(v32 * v32) * -0.046496) + 0.15931) * (float)(v32 * v32))
                              + -0.32762))
              * v32);
  if (!v33) {
    float v34 = 1.5708 - v34;
  }
  BOOL v21 = v31 < 0.0;
  float v35 = -v34;
  if (!v21) {
    float v35 = v34;
  }
  float v36 = v30 / (float)(v12 + (float)(v9 * -1.4142));
  float v37 = -v36;
  if (v36 >= 0.0) {
    float v37 = v36;
  }
  if (v37 >= 1.0) {
    float v38 = 1.0 / v37;
  }
  else {
    float v38 = v37;
  }
  float v39 = v38
      + (float)((float)((float)(v38 * v38)
                      * (float)((float)((float)((float)((float)(v38 * v38) * -0.046496) + 0.15931) * (float)(v38 * v38))
                              + -0.32762))
              * v38);
  if (v37 >= 1.0) {
    float v39 = 1.5708 - v39;
  }
  BOOL v21 = v36 < 0.0;
  float v40 = -v39;
  if (!v21) {
    float v40 = v39;
  }
  if (v30 <= 0.0) {
    float v40 = v35;
  }
  int32x2_t v41 = vcltz_f32(v10);
  __int8 v42 = v41.i8[0];
  if (v41.i8[0]) {
    v10.f32[0] = -v10.f32[0];
  }
  if (v41.i8[4]) {
    float v11 = -v10.f32[1];
  }
  BOOL v43 = v10.f32[0] < v11;
  if (v10.f32[0] >= v11) {
    float v44 = v11;
  }
  else {
    float v44 = v10.f32[0];
  }
  if (v10.f32[0] <= v11) {
    v10.f32[0] = v11;
  }
  float v45 = v44 / v10.f32[0];
  float v46 = v45
      + (float)((float)((float)(v45 * v45)
                      * (float)((float)((float)((float)((float)(v45 * v45) * -0.046496) + 0.15931) * (float)(v45 * v45))
                              + -0.32762))
              * v45);
  if (v43) {
    float v46 = 1.5708 - v46;
  }
  if (v42) {
    float v46 = 3.1416 - v46;
  }
  *a5 = v40;
  if (v41.i8[4]) {
    float v46 = -v46;
  }
  float v47 = v13 / v12;
  *a6 = v46 - v47;
  *a7 = v47 + v46;
  return 1;
}

_DWORD *get_level(_DWORD *result, uint64_t a2, uint64_t a3)
{
  if (result[7])
  {
    uint64_t v5 = result;
    while (*v5 != a2)
    {
      if (*v5 <= (int)a2)
      {
        uint64_t result = (_DWORD *)*((void *)v5 + 37);
        if (result)
        {
          get_level(result, a2, a3);
          get_level(*((void *)v5 + 37) + 304, a2, a3);
          get_level(*((void *)v5 + 37) + 608, a2, a3);
          get_level(*((void *)v5 + 37) + 912, a2, a3);
          get_level(*((void *)v5 + 37) + 1216, a2, a3);
          get_level(*((void *)v5 + 37) + 1520, a2, a3);
          uint64_t result = (_DWORD *)get_level(*((void *)v5 + 37) + 1824, a2, a3);
          uint64_t v6 = *((void *)v5 + 37);
          uint64_t v5 = (_DWORD *)(v6 + 2128);
          if (*(_DWORD *)(v6 + 2156)) {
            continue;
          }
        }
      }
      return result;
    }
    uint64_t v7 = *(void *)a3;
    uint64_t v8 = *(void *)(a3 + 16);
    if (*(void *)a3 >= v8)
    {
      uint64_t v9 = 2 * v8;
      BOOL v10 = v8 == 0;
      uint64_t v11 = 32;
      if (!v10) {
        uint64_t v11 = v9;
      }
      if (v11 <= v7) {
        uint64_t v12 = v7 + 1;
      }
      else {
        uint64_t v12 = v11;
      }
      if (v12)
      {
        uint64_t result = malloc_type_realloc(*(void **)(a3 + 8), 8 * v12, 0xC46EAF16uLL);
        *(void *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = result;
        uint64_t v7 = *(void *)a3;
      }
      *(void *)(a3 + 16) = v12;
    }
    *(void *)a3 = v7 + 1;
    *(void *)(*(void *)(a3 + 8) + 8 * v7) = v5;
  }
  return result;
}

void deactivate_tree(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(_DWORD *)(a2 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 32);
  if ((int)v4 >= 1) {
LABEL_2:
  }
    bzero(*(void **)(v2 + 16), 2 * v4);
  while (1)
  {
    *(_DWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    if (!*(void *)(v2 + 296)) {
      break;
    }
    deactivate_tree(a1);
    deactivate_tree(a1);
    deactivate_tree(a1);
    deactivate_tree(a1);
    deactivate_tree(a1);
    deactivate_tree(a1);
    deactivate_tree(a1);
    uint64_t v2 = *(void *)(v2 + 296) + 2128;
    *(_DWORD *)(v2 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
    uint64_t v4 = *(unsigned int *)(a1 + 32);
    if ((int)v4 >= 1) {
      goto LABEL_2;
    }
  }
}

void *remove_inactive_nodes(void *result, uint64_t a2)
{
  if (*(void *)(a2 + 296))
  {
    uint64_t v3 = result;
    ((void (*)(void))remove_inactive_nodes)();
    remove_inactive_nodes(v3, *(void *)(a2 + 296) + 304);
    remove_inactive_nodes(v3, *(void *)(a2 + 296) + 608);
    remove_inactive_nodes(v3, *(void *)(a2 + 296) + 912);
    remove_inactive_nodes(v3, *(void *)(a2 + 296) + 1216);
    remove_inactive_nodes(v3, *(void *)(a2 + 296) + 1520);
    remove_inactive_nodes(v3, *(void *)(a2 + 296) + 1824);
    uint64_t result = (void *)remove_inactive_nodes(v3, *(void *)(a2 + 296) + 2128);
    if (!*(_DWORD *)(a2 + 28))
    {
      uint64_t v4 = *((void *)v3 + 5);
      uint64_t v5 = *((void *)v3 + 7);
      if (v4 >= v5)
      {
        uint64_t v6 = 2 * v5;
        BOOL v7 = v5 == 0;
        uint64_t v8 = 32;
        if (!v7) {
          uint64_t v8 = v6;
        }
        if (v8 <= v4) {
          uint64_t v9 = v4 + 1;
        }
        else {
          uint64_t v9 = v8;
        }
        if (v9)
        {
          uint64_t result = malloc_type_realloc(*((void **)v3 + 6), 8 * v9, 0x85CDE417uLL);
          *((void *)v3 + 6) = result;
          uint64_t v4 = *((void *)v3 + 5);
        }
        *((void *)v3 + 7) = v9;
      }
      *((void *)v3 + 5) = v4 + 1;
      *(void *)(*((void *)v3 + 6) + 8 * v4) = *(void *)(a2 + 296);
      *(void *)(a2 + 296) = 0;
    }
  }
  return result;
}

void otree_free_children(uint64_t a1)
{
  if (*(void *)(a1 + 296))
  {
    ((void (*)(void))otree_free_children)();
    otree_free_children(*(void *)(a1 + 296) + 304);
    otree_free_children(*(void *)(a1 + 296) + 608);
    otree_free_children(*(void *)(a1 + 296) + 912);
    otree_free_children(*(void *)(a1 + 296) + 1216);
    otree_free_children(*(void *)(a1 + 296) + 1520);
    otree_free_children(*(void *)(a1 + 296) + 1824);
    otree_free_children(*(void *)(a1 + 296) + 2128);
    free(*(void **)(a1 + 296));
    *(void *)(a1 + 296) = 0;
  }
}

void vl_ps_get_hyps(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = a1[6];
  uint64_t v7 = *(int *)(a4 + 80);
  uint64_t v8 = malloc_type_calloc(1uLL, 0x30uLL, 0x1030040F6295BD8uLL);
  *uint64_t v8 = malloc_type_malloc(0x5B8uLL, 0x1080040A085CBA5uLL);
  uint64_t v69 = v8;
  *((_OWORD *)v8 + 2) = xmmword_21BB7A7B0;
  if (*a3 >= 1)
  {
    uint64_t v10 = a3[1];
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 1;
LABEL_4:
      uint64_t v13 = v10 + v11;
      free(*(void **)(v10 + v11 + 144));
      free(*(void **)(v13 + 120));
      free(*(void **)(v13 + 96));
      while (v12 < *a3)
      {
        uint64_t v10 = a3[1];
        ++v12;
        v11 += 160;
        if (v10) {
          goto LABEL_4;
        }
      }
    }
  }
  *a3 = 0;
  uint64_t v14 = v7 + 1;
  uint64_t v15 = a3[2];
  int v82 = v7 + 1;
  if (v15 < v7 + 1)
  {
    if (v15) {
      uint64_t v16 = 2 * v15;
    }
    else {
      uint64_t v16 = 1;
    }
    if (v16 <= v14) {
      uint64_t v17 = v7 + 1;
    }
    else {
      uint64_t v17 = v16;
    }
    if (v17)
    {
      float v18 = malloc_type_realloc((void *)a3[1], 160 * v17, 0xB5968FC3uLL);
      uint64_t v14 = v7 + 1;
      a3[1] = (uint64_t)v18;
    }
    a3[2] = v17;
  }
  if ((v7 & 0x80000000) == 0)
  {
    bzero((void *)(a3[1] + 160 * *a3), 160 * v14);
    uint64_t v14 = v7 + 1;
  }
  int v76 = v7;
  int v78 = a3;
  *a3 = v14;
  if ((int)v6 < 1)
  {
    int v20 = 0;
  }
  else
  {
    unint64_t v19 = 0;
    int v20 = 0;
    uint64_t v21 = v6;
    uint64_t v80 = a3[1];
    do
    {
      unint64_t v26 = a1[7];
      unint64_t v27 = v19 % v26;
      uint64_t v28 = *(void *)(a1[4] + 8 * (v19 / v26));
      float v29 = (uint64_t *)(v28 + 52 * (v19 % v26));
      if (*((_WORD *)v29 + 22))
      {
        if (*((_DWORD *)v69 + 9) != v20) {
          __assert_rtn("vl_ps_get_hyps", "vl_pose_ps.c", 228, "pq->n == hyp_added");
        }
        if (v20 == v14)
        {
          int v20 = v14;
          uint64_t v22 = pqueue_delete((void **)v69, 1, 0);
          free(*(void **)(v22 + 144));
          free(*(void **)(v22 + 120));
          free(*(void **)(v22 + 96));
        }
        else
        {
          uint64_t v22 = v80 + 160 * v20++;
        }
        *(_OWORD *)(v22 + 12_Block_object_dispose(&STACK[0x220], 8) = 0u;
        *(_OWORD *)(v22 + 144) = 0u;
        *(_OWORD *)(v22 + 96) = 0u;
        *(_OWORD *)(v22 + 112) = 0u;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)(v22 + 4_Block_object_dispose(&STACK[0x220], 8) = 0u;
        *(_OWORD *)uint64_t v22 = 0u;
        *(_OWORD *)(v22 + 16) = 0u;
        float v23 = (float)*((unsigned __int16 *)v29 + 22);
        *(float *)uint64_t v22 = v23;
        uint64_t v24 = v28 + 52 * v27;
        LOWORD(v9) = *(_WORD *)(v24 + 48);
        *(float *)(v22 + 20) = (float)((float)v9 + 0.5) * 0.012272;
        uint64_t v25 = *v29;
        *(_DWORD *)(v22 + 16) = *((_DWORD *)v29 + 2);
        *(void *)(v22 + _Block_object_dispose(&STACK[0x220], 8) = v25;
        *(void *)(v22 + 24) = *(void *)(v24 + 16);
        *(_DWORD *)(v22 + 32) = *(_DWORD *)(v24 + 24);
        *(_DWORD *)(v22 + 36) = 1011421147;
        pqueue_push((uint64_t)v69, v22, (float)-v23 + *(float *)(v24 + 12) * 0.001);
        LODWORD(v14) = v82;
      }
      ++v19;
    }
    while (v19 != v21);
  }
  if (v20 > (int)v14) {
    __assert_rtn("vl_ps_get_hyps", "vl_pose_ps.c", 240, "hyp_added <= max_hyp+1");
  }
  uint64_t v30 = *v78;
  uint64_t v31 = v78[2];
  if (v31 >= v20)
  {
    float v32 = (char *)v78[1];
    uint64_t v33 = v20 - v30;
    if (v20 <= v30) {
      goto LABEL_33;
    }
LABEL_44:
    bzero(&v32[160 * *v78], 160 * v33);
    float v32 = (char *)v78[1];
    *int v78 = v20;
    if (v20) {
      goto LABEL_34;
    }
    goto LABEL_45;
  }
  if (v31) {
    uint64_t v35 = 2 * v31;
  }
  else {
    uint64_t v35 = 1;
  }
  if (v35 <= v20) {
    uint64_t v36 = v20;
  }
  else {
    uint64_t v36 = v35;
  }
  if (v36) {
    v78[1] = (uint64_t)malloc_type_realloc((void *)v78[1], 160 * v36, 0xCA829B2CuLL);
  }
  v78[2] = v36;
  float v32 = (char *)v78[1];
  uint64_t v33 = v20 - v30;
  if (v20 > v30) {
    goto LABEL_44;
  }
LABEL_33:
  *int v78 = v20;
  if (v20)
  {
LABEL_34:
    qsort(v32, v20, 0xA0uLL, (int (__cdecl *)(const void *, const void *))vl_ps_hyp_cmp);
    uint64_t v34 = *v78;
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v34 = 0;
LABEL_46:
  if (v76 >= v20) {
    int v37 = v20;
  }
  else {
    int v37 = v76;
  }
  uint64_t v38 = v37;
  uint64_t v39 = v78[2];
  if (v39 < v38)
  {
    if (v39) {
      uint64_t v41 = 2 * v39;
    }
    else {
      uint64_t v41 = 1;
    }
    if (v41 <= v38) {
      uint64_t v42 = v38;
    }
    else {
      uint64_t v42 = v41;
    }
    if (v42) {
      v78[1] = (uint64_t)malloc_type_realloc((void *)v78[1], 160 * v42, 0x982ABA18uLL);
    }
    v78[2] = v42;
    uint64_t v40 = v38 - v34;
    if (v38 <= v34)
    {
LABEL_51:
      *int v78 = v38;
      if ((int)v38 < 1) {
        goto LABEL_67;
      }
      goto LABEL_63;
    }
  }
  else
  {
    uint64_t v40 = v38 - v34;
    if (v38 <= v34) {
      goto LABEL_51;
    }
  }
  bzero((void *)(v78[1] + 160 * *v78), 160 * v40);
  *int v78 = v38;
  if ((int)v38 < 1) {
    goto LABEL_67;
  }
LABEL_63:
  BOOL v43 = *(float **)(a2 + 144);
  uint64_t v44 = v78[1] + 44;
  do
  {
    *(_OWORD *)(v44 - 4) = xmmword_21BB7A730;
    *(_OWORD *)(v44 + 12) = xmmword_21BB7A730;
    *(_DWORD *)(v44 + 2_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
    *(void *)(v44 + 32) = *(void *)(v44 - 36);
    float v83 = *(float *)(v44 - 24);
    *(_DWORD *)(v44 + 40) = *(_DWORD *)(v44 - 28);
    float v59 = v43[59];
    float v60 = v43[60];
    float v61 = v43[58];
    float v62 = (float)(v59 * v59) - (float)(v60 * v61);
    float v63 = (float)(v60 * v60) - (float)(v61 * v59);
    float v64 = (float)(v61 * v61) - (float)(v59 * v60);
    double v65 = sqrt((float)((float)((float)(v63 * v63) + (float)(v62 * v62)) + (float)(v64 * v64)));
    float v66 = 0.0;
    float v67 = 0.0;
    float v68 = 0.0;
    if (v65 > 0.0)
    {
      float v66 = v62 / v65;
      float v67 = v63 / v65;
      float v68 = v64 / v65;
    }
    float v45 = (float)(v67 * v60) - (float)(v68 * v59);
    float v46 = (float)(v68 * v61) - (float)(v66 * v60);
    float v75 = (float)(v66 * v59) - (float)(v67 * v61);
    *(float *)(v44 - 4) = v45;
    *(float *)uint64_t v44 = v66;
    *(float *)(v44 + _Block_object_dispose(&STACK[0x220], 8) = v46;
    *(float *)(v44 + 12) = v67;
    *(float *)(v44 + 20) = v75;
    *(float *)(v44 + 24) = v68;
    float v47 = v43[58];
    *(float *)(v44 + 4) = v47;
    float v48 = v43[59];
    *(float *)(v44 + 16) = v48;
    float v73 = v43[60];
    float v49 = atan2(v66, v45);
    __double2 v50 = __sincos_stret((float)-v49);
    float cosval = v50.__cosval;
    float sinval = v50.__sinval;
    float v81 = (float)((float)((float)(cosval * v45) + 0.0) - (float)(sinval * v66)) + (float)(v47 * 0.0);
    float v79 = (float)((float)((float)(cosval * v46) + 0.0) - (float)(sinval * v67)) + (float)(v48 * 0.0);
    float v77 = (float)((float)((float)(cosval * v75) + 0.0) - (float)(sinval * v68)) + (float)(v73 * 0.0);
    float v71 = (float)((float)((float)(sinval * v46) + 0.0) + (float)(cosval * v67)) + (float)(v48 * 0.0);
    float v72 = (float)((float)((float)(sinval * v45) + 0.0) + (float)(cosval * v66)) + (float)(v47 * 0.0);
    float v70 = (float)((float)((float)(sinval * v75) + 0.0) + (float)(cosval * v68)) + (float)(v73 * 0.0);
    float v53 = (float)((float)((float)(v45 * 0.0) + 0.0) + (float)(v66 * 0.0)) + v47;
    float v54 = (float)((float)((float)(v46 * 0.0) + 0.0) + (float)(v67 * 0.0)) + v48;
    float v55 = (float)((float)((float)(v75 * 0.0) + 0.0) + (float)(v68 * 0.0)) + v73;
    __double2 v56 = __sincos_stret(v83);
    float v57 = v56.__cosval;
    float v58 = v56.__sinval;
    *(float *)(v44 - 4) = (float)((float)((float)(v57 * v81) + 0.0) - (float)(v58 * v72)) + (float)(v53 * 0.0);
    *(float *)uint64_t v44 = (float)((float)((float)(v57 * v79) + 0.0) - (float)(v58 * v71)) + (float)(v54 * 0.0);
    *(float *)(v44 + 4) = (float)((float)((float)(v57 * v77) + 0.0) - (float)(v58 * v70)) + (float)(v55 * 0.0);
    *(float *)(v44 + _Block_object_dispose(&STACK[0x220], 8) = (float)((float)((float)(v58 * v81) + 0.0) + (float)(v57 * v72)) + (float)(v53 * 0.0);
    *(float *)(v44 + 12) = (float)((float)((float)(v58 * v79) + 0.0) + (float)(v57 * v71)) + (float)(v54 * 0.0);
    *(float *)(v44 + 16) = (float)((float)((float)(v58 * v77) + 0.0) + (float)(v57 * v70)) + (float)(v55 * 0.0);
    *(float *)(v44 + 20) = v53 + (float)((float)((float)(v81 * 0.0) + 0.0) + (float)(v72 * 0.0));
    *(float *)(v44 + 24) = v54 + (float)((float)((float)(v79 * 0.0) + 0.0) + (float)(v71 * 0.0));
    *(float *)(v44 + 2_Block_object_dispose(&STACK[0x220], 8) = v55 + (float)((float)((float)(v77 * 0.0) + 0.0) + (float)(v70 * 0.0));
    v44 += 160;
    --v38;
  }
  while (v38);
LABEL_67:
  if (*(void *)v69) {
    free(*(void **)v69);
  }
  if (*((_DWORD *)v69 + 8)) {
    free(*((void **)v69 + 2));
  }
  free(v69);
}

uint64_t vl_ps_hyp_cmp(float *a1, float *a2)
{
  if (*a1 > *a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a1 < *a2) {
    return 1;
  }
  float v3 = a1[2];
  float v4 = a2[2];
  if (v3 < v4) {
    return 0xFFFFFFFFLL;
  }
  if (v3 > v4) {
    return 1;
  }
  float v5 = a1[3];
  float v6 = a2[3];
  if (v5 < v6) {
    return 0xFFFFFFFFLL;
  }
  if (v5 > v6) {
    return 1;
  }
  float v7 = a1[4];
  float v8 = a2[4];
  if (v7 < v8) {
    return 1;
  }
  if (v7 <= v8) {
    return 0;
  }
  return 0xFFFFFFFFLL;
}

void vl_ps_precomp_create(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2[9];
  uint64_t v8 = v7;
  uint64_t v9 = a2[18];
  float v10 = *(float *)(v9 + 252);
  BOOL v28 = v10 != 0.0 && *(_DWORD *)(a4 + 64) != 0;
  float v11 = *(float *)(v9 + 244);
  *(float *)a3 = v11;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(void *)(a3 + 40) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(void *)(a3 + 4_Block_object_dispose(&STACK[0x220], 8) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(void *)(a3 + 56) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(void *)(a3 + 64) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(void *)(a3 + 16) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(void *)(a3 + 24) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(void *)(a3 + 32) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(void *)(a3 + 72) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(void *)(a3 + 80) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  if ((int)v7 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    double v14 = v10 + 0.785398163;
    while (1)
    {
      uint64_t v21 = a2[10];
      uint64_t v22 = *(void *)(a1 + 8);
      uint64_t v23 = *(unsigned __int16 *)(v21 + v12);
      uint64_t v24 = 4 * *(unsigned __int16 *)(v21 + v12 + 2);
      float v25 = *(float *)(a2[1] + v24);
      int v26 = *(_DWORD *)(a2[4] + v24);
      if (v28)
      {
        float v15 = v11 + v25;
        *(float *)&unsigned int v27 = (float)((float)((float)(v11 + v25) - *(float *)(*(void *)(a1 + 104) + 8 * v23 + 4)) + 3.1416)
                       + 3.1416;
        if (v14 < fabsf((float)(*(float *)&v27+ (float)((float)(int)((__PAIR64__((int)(float)(*(float *)&v27 * 0.15915), v27)- COERCE_UNSIGNED_INT(0.0)) >> 32)* -6.2832))+ -3.1416))goto LABEL_8; {
      }
        }
      else
      {
        float v15 = v11 + v25;
      }
      *(_DWORD *)(*(void *)(a3 + 8) + 4 * v13) = *(_DWORD *)(v21 + v12);
      __float2 v16 = __sincosf_stret(v15);
      uint64_t v17 = *(void *)(a3 + 32);
      *(float *)(*(void *)(a3 + 40) + 4 * v13) = v16.__cosval;
      uint64_t v18 = *(void *)(a3 + 56);
      *(float *)(*(void *)(a3 + 48) + 4 * v13) = v16.__sinval;
      *(_DWORD *)(v18 + 4 * v13) = v26;
      *(float *)(*(void *)(a3 + 64) + 4 * v13) = v25;
      uint64_t v19 = *(void *)(a3 + 24);
      *(_DWORD *)(*(void *)(a3 + 16) + 4 * v13) = *(_DWORD *)(v22 + 12 * v23);
      uint64_t v20 = v22 + 12 * v23;
      *(_DWORD *)(v19 + 4 * v13) = *(_DWORD *)(v20 + 4);
      *(_DWORD *)(v17 + 4 * v13++) = *(_DWORD *)(v20 + 8);
LABEL_8:
      v12 += 4;
      if (4 * v8 == v12) {
        goto LABEL_13;
      }
    }
  }
  int v13 = 0;
LABEL_13:
  *(_DWORD *)(a3 + 4) = v13;
}

double vl_ps_precomp_free(uint64_t a1)
{
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 40));
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 56));
  free(*(void **)(a1 + 64));
  free(*(void **)(a1 + 16));
  free(*(void **)(a1 + 24));
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 72));
  free(*(void **)(a1 + 80));
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

BOOL vl_ps_cam_init(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  float v6 = v3;
  float v149 = v7;
  uint64_t v8 = v2;
  v160[2187] = *MEMORY[0x263EF8340];
  unsigned int v151 = v9;
  uint64_t v152 = v10;
  uint64_t v11 = *v9;
  uint64_t v159 = *v9;
  if (!v10) {
    LODWORD(v11) = 0;
  }
  int v157 = v11;
  uint64_t v12 = v3[3];
  int v13 = (int32x4_t *)malloc_type_malloc(4 * (int)v12, 0x100004052888210uLL);
  if (*(int *)(v5 + 28) > 1)
  {
    printf("%sError : ", (const char *)&unk_21BB738AE);
    printf("Can not run with more than %d nn", 1);
    putchar(10);
  }
  if ((int)v12 >= 1)
  {
    if (v12 < 8uLL)
    {
      uint64_t v14 = 0;
      do
      {
LABEL_11:
        v13->i32[v14] = v14;
        ++v14;
      }
      while (v12 != v14);
      goto LABEL_12;
    }
    uint64_t v14 = v12 & 0x7FFFFFF8;
    int32x4_t v15 = (int32x4_t)xmmword_21BB7A770;
    __float2 v16 = v13 + 1;
    v17.i64[0] = 0x400000004;
    v17.i64[1] = 0x400000004;
    v18.i64[0] = 0x800000008;
    v18.i64[1] = 0x800000008;
    uint64_t v19 = v12 & 0xFFFFFFF8;
    do
    {
      v16[-1] = v15;
      *__float2 v16 = vaddq_s32(v15, v17);
      int32x4_t v15 = vaddq_s32(v15, v18);
      v16 += 2;
      v19 -= 8;
    }
    while (v19);
    if ((v12 & 7) != 0) {
      goto LABEL_11;
    }
  }
LABEL_12:
  uint64_t v20 = (char *)malloc_type_malloc(0x200uLL, 0x1FC406B3uLL);
  if (v12 << 32)
  {
    uint64_t v21 = 0;
    unint64_t v22 = (int)v12;
    BOOL v23 = 1;
    uint64_t v24 = 32;
    float v25 = (char *)v13;
    while (1)
    {
      uint64_t v26 = v21;
      while (1)
      {
        if (!v23)
        {
          --v26;
          unsigned int v27 = &v20[16 * v26];
          unint64_t v22 = *((void *)v27 + 1);
          float v25 = &v13->i8[4 * *(void *)v27];
        }
        if ((uint64_t)v22 > 15) {
          break;
        }
        if ((uint64_t)v22 > 1)
        {
          uint64_t v28 = 0;
          uint64_t v29 = v6[4];
          uint64_t v30 = (int *)(v25 + 4);
          for (uint64_t i = 1; i != v22; ++i)
          {
            uint64_t v32 = v28;
            do
            {
              uint64_t v33 = v30[v32];
              uint64_t v34 = *(int *)&v25[4 * v32];
              if ((float)(*(float *)(v29 + 8 * v33) - *(float *)(v29 + 8 * v34)) >= 0.0) {
                break;
              }
              v30[v32] = v34;
              *(_DWORD *)&v25[4 * v32] = v33;
              uint64_t v35 = v32-- + 1;
            }
            while (v35 > 1);
            ++v28;
          }
        }
        BOOL v23 = 0;
        unint64_t v22 = 0;
        if (v26 < 1) {
          goto LABEL_83;
        }
      }
      if (v22 > 0x27) {
        break;
      }
      unint64_t v36 = v22 >> 1;
      uint64_t v37 = v6[4];
      uint64_t v38 = *(int *)v25;
      float v39 = *(float *)(v37 + 8 * v38);
      float v40 = *(float *)(v37 + 8 * *(int *)&v25[4 * (v22 >> 1)]);
      float v41 = *(float *)(v37 + 8 * *(int *)&v25[4 * v22 - 4]);
      if ((float)(v39 - v40) >= 0.0)
      {
        if ((float)(v39 - v41) >= 0.0)
        {
          if ((float)(v40 - v41) < 0.0) {
            unint64_t v36 = v22 - 1;
          }
        }
        else
        {
          unint64_t v36 = 0;
        }
      }
      else if ((float)(v40 - v41) >= 0.0)
      {
        if ((float)(v39 - v41) >= 0.0) {
          unint64_t v36 = 0;
        }
        else {
          unint64_t v36 = v22 - 1;
        }
      }
LABEL_65:
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 4 * v36;
      *(_DWORD *)float v25 = *(_DWORD *)&v25[v64];
      *(_DWORD *)&v25[v64] = v38;
      for (uint64_t j = 1; j != v22; ++j)
      {
        uint64_t v66 = *(int *)&v25[4 * j];
        if ((float)(*(float *)(v37 + 8 * v66) - *(float *)(v37 + 8 * *(int *)v25)) <= 0.0)
        {
          ++v63;
          *(_DWORD *)&v25[4 * j] = *(_DWORD *)&v25[4 * v63];
          *(_DWORD *)&v25[4 * v63] = v66;
          if ((float)(*(float *)(v37 + 8 * *(int *)&v25[4 * j]) - *(float *)(v37 + 8 * *(int *)v25)) == 0.0)
          {
            ++v62;
            *(_DWORD *)&v25[4 * v63] = *(_DWORD *)&v25[4 * v62];
            *(_DWORD *)&v25[4 * v62] = v66;
          }
        }
      }
      uint64_t v67 = 4 * v63 - 4 * v62;
      uint64_t v68 = v62;
      do
      {
        int v69 = *(_DWORD *)&v25[v67];
        *(_DWORD *)&v25[v67] = *(_DWORD *)&v25[4 * v68];
        *(_DWORD *)&v25[4 * v68] = v69;
        v67 += 4;
      }
      while (v68-- > 0);
      uint64_t v21 = v26 + 1;
      if (v26 + 1 >= v24)
      {
        uint64_t v154 = 2 * v24;
        uint64_t v20 = (char *)malloc_type_realloc(v20, 32 * v24, 0x90B28DBCuLL);
        uint64_t v24 = v154;
        uint64_t v21 = v26 + 1;
      }
      float v71 = &v20[16 * v26];
      *(void *)float v71 = v63 + ((v25 - (char *)v13) >> 2) + 1;
      *((void *)v71 + 1) = v22 + ~v63;
      unint64_t v22 = v63 - v62;
      BOOL v23 = v63 != v62;
      if (v26 < 0 && !v22) {
        goto LABEL_83;
      }
    }
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    if (v22 <= 0x7D0) {
      uint64_t v44 = 8;
    }
    else {
      uint64_t v44 = 26;
    }
    if (v22 <= 0x7D0) {
      unint64_t v45 = 3;
    }
    else {
      unint64_t v45 = 9;
    }
    uint64_t v37 = v6[4];
    while (1)
    {
      uint64_t v46 = (uint64_t)(v22 - 1 + v42) / v44;
      float v47 = *(float *)(v37 + 8 * *(int *)&v25[4 * (v42 / v44)]);
      float v48 = *(float *)(v37 + 8 * *(int *)&v25[4 * v46]);
      uint64_t v49 = (uint64_t)(2 * v22 - 2 + v42) / v44;
      float v50 = *(float *)(v37 + 8 * *(int *)&v25[4 * v49]);
      if ((float)(v47 - v48) >= 0.0)
      {
        if ((float)(v47 - v50) < 0.0) {
          goto LABEL_46;
        }
        if ((float)(v48 - v50) < 0.0)
        {
LABEL_48:
          v160[v43] = v49;
          goto LABEL_40;
        }
      }
      else if ((float)(v48 - v50) >= 0.0)
      {
        if ((float)(v47 - v50) < 0.0) {
          goto LABEL_48;
        }
LABEL_46:
        v160[v43] = v42 / v44;
        goto LABEL_40;
      }
      v160[v43] = v46;
LABEL_40:
      ++v43;
      v42 += 3 * v22 - 3;
      if (v45 == v43)
      {
        while (1)
        {
          uint64_t v51 = 0;
          unint64_t v52 = 0;
          unint64_t v53 = v45;
          v45 /= 3uLL;
          if (v45 <= 1) {
            uint64_t v54 = 1;
          }
          else {
            uint64_t v54 = v45;
          }
          uint64_t v55 = 8 * v54;
          do
          {
            uint64_t v56 = v160[v51];
            uint64_t v57 = v160[v51 + 1];
            uint64_t v58 = v160[v51 + 2];
            float v59 = *(float *)(v37 + 8 * *(int *)&v25[4 * v56]);
            float v60 = *(float *)(v37 + 8 * *(int *)&v25[4 * v57]);
            float v61 = *(float *)(v37 + 8 * *(int *)&v25[4 * v58]);
            if ((float)(v59 - v60) >= 0.0)
            {
              if ((float)(v59 - v61) < 0.0) {
                goto LABEL_61;
              }
              if ((float)(v60 - v61) >= 0.0)
              {
LABEL_54:
                v160[v52 / 8] = v57;
                goto LABEL_55;
              }
            }
            else
            {
              if ((float)(v60 - v61) < 0.0) {
                goto LABEL_54;
              }
              if ((float)(v59 - v61) >= 0.0)
              {
LABEL_61:
                v160[v52 / 8] = v56;
                goto LABEL_55;
              }
            }
            v160[v52 / 8] = v58;
LABEL_55:
            v52 += 8;
            v51 += 3;
          }
          while (v55 != v52);
          if (v53 < 9)
          {
            unint64_t v36 = v160[0];
            LODWORD(v3_Block_object_dispose(&STACK[0x220], 8) = *(_DWORD *)v25;
            goto LABEL_65;
          }
        }
      }
    }
  }
LABEL_83:
  free(v20);
  float v72 = (float)*v6;
  float v73 = *(float *)(v5 + 132) * v72;
  if (v73 <= v72) {
    float v72 = *(float *)(v5 + 132) * v72;
  }
  BOOL v74 = v73 < 0.0;
  float v75 = 0.0;
  if (!v74) {
    float v75 = v72;
  }
  uint64_t v76 = (int)v75;
  *(void *)(v8 + 72) = 0;
  if ((int)v76 >= 1)
  {
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    LODWORD(v79) = *(_DWORD *)(v5 + 28);
    do
    {
      uint64_t v80 = (_DWORD *)(v6[1] + 8 * v13->i32[v78]);
      if ((*v80 & 0x80000000) != 0)
      {
        if (v79 != 1) {
          __assert_rtn("vl_ps_cam_init", "vl_pose_ps.c", 463, "par->nn == 1 && \"does not work for nn > 1, fix or remove\"");
        }
        LODWORD(v79) = 1;
      }
      else if ((int)v79 >= 1)
      {
        uint64_t v81 = 0;
        do
        {
          uint64_t v83 = *(void *)(v8 + 88);
          if (v77 >= v83)
          {
            if (v83) {
              uint64_t v84 = 2 * v83;
            }
            else {
              uint64_t v84 = 64;
            }
            if (v84 <= v77) {
              uint64_t v85 = v77 + 1;
            }
            else {
              uint64_t v85 = v84;
            }
            if (v85)
            {
              *(void *)(v8 + 80) = malloc_type_realloc(*(void **)(v8 + 80), 4 * v85, 0xDC147B87uLL);
              uint64_t v77 = *(void *)(v8 + 72);
            }
            *(void *)(v8 + 8_Block_object_dispose(&STACK[0x220], 8) = v85;
          }
          *(void *)(v8 + 72) = v77 + 1;
          *(_DWORD *)(*(void *)(v8 + 80) + 4 * v77) = 0;
          uint64_t v77 = *(void *)(v8 + 72);
          uint64_t v82 = *(void *)(v8 + 80) + 4 * v77;
          *(_WORD *)(v82 - 2) = v13->i32[v78];
          *(_WORD *)(v82 - 4) = v80[v81++];
          uint64_t v79 = *(int *)(v5 + 28);
        }
        while (v81 < v79);
      }
      ++v78;
    }
    while (v78 != v76);
  }
  printf("Spam : ");
  printf("# correspondences used in scoring : %llu", *(void *)(v8 + 72));
  putchar(10);
  free(v13);
  uint64_t v86 = *(void *)(v8 + 72);
  uint64_t v87 = *(void *)v8;
  uint64_t v88 = v157 + (int)v159;
  uint64_t v89 = *(void *)(v8 + 16);
  if (v88 <= v89)
  {
    uint64_t v94 = v88 - v87;
    if (v88 <= v87) {
      goto LABEL_115;
    }
  }
  else
  {
    uint64_t v90 = 2 * v89;
    BOOL v91 = v89 == 0;
    uint64_t v92 = 64;
    if (!v91) {
      uint64_t v92 = v90;
    }
    if (v92 <= v88) {
      uint64_t v93 = v157 + (int)v159;
    }
    else {
      uint64_t v93 = v92;
    }
    if (v93) {
      *(void *)(v8 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(v8 + 8), 4 * v93, 0x3383BCFBuLL);
    }
    *(void *)(v8 + 16) = v93;
    uint64_t v94 = v88 - v87;
    if (v88 <= v87)
    {
LABEL_115:
      *(void *)uint64_t v8 = v88;
      uint64_t v95 = *(void *)(v8 + 24);
      uint64_t v96 = *(void *)(v8 + 40);
      if (v88 > v96) {
        goto LABEL_116;
      }
LABEL_136:
      uint64_t v100 = v88 - v95;
      if (v88 <= v95) {
        goto LABEL_124;
      }
      goto LABEL_137;
    }
  }
  bzero((void *)(*(void *)(v8 + 8) + 4 * *(void *)v8), 4 * v94);
  *(void *)uint64_t v8 = v88;
  uint64_t v95 = *(void *)(v8 + 24);
  uint64_t v96 = *(void *)(v8 + 40);
  if (v88 <= v96) {
    goto LABEL_136;
  }
LABEL_116:
  uint64_t v97 = 2 * v96;
  BOOL v91 = v96 == 0;
  uint64_t v98 = 64;
  if (!v91) {
    uint64_t v98 = v97;
  }
  if (v98 <= v88) {
    uint64_t v99 = v157 + (int)v159;
  }
  else {
    uint64_t v99 = v98;
  }
  if (v99) {
    *(void *)(v8 + 32) = malloc_type_realloc(*(void **)(v8 + 32), 4 * v99, 0x640240CuLL);
  }
  *(void *)(v8 + 40) = v99;
  uint64_t v100 = v88 - v95;
  if (v88 <= v95)
  {
LABEL_124:
    *(void *)(v8 + 24) = v88;
    uint64_t v101 = *(void *)(v8 + 48);
    uint64_t v102 = *(void *)(v8 + 64);
    if (v88 > v102) {
      goto LABEL_125;
    }
LABEL_138:
    uint64_t v106 = v88 - v101;
    if (v88 <= v101) {
      goto LABEL_140;
    }
    goto LABEL_139;
  }
LABEL_137:
  bzero((void *)(*(void *)(v8 + 32) + 4 * *(void *)(v8 + 24)), 4 * v100);
  *(void *)(v8 + 24) = v88;
  uint64_t v101 = *(void *)(v8 + 48);
  uint64_t v102 = *(void *)(v8 + 64);
  if (v88 <= v102) {
    goto LABEL_138;
  }
LABEL_125:
  uint64_t v103 = 2 * v102;
  BOOL v91 = v102 == 0;
  uint64_t v104 = 32;
  if (!v91) {
    uint64_t v104 = v103;
  }
  if (v104 <= v88) {
    uint64_t v105 = v157 + (int)v159;
  }
  else {
    uint64_t v105 = v104;
  }
  if (v105) {
    *(void *)(v8 + 56) = malloc_type_realloc(*(void **)(v8 + 56), 8 * v105, 0x204F70D1uLL);
  }
  *(void *)(v8 + 64) = v105;
  uint64_t v106 = v88 - v101;
  if (v88 > v101) {
LABEL_139:
  }
    bzero((void *)(*(void *)(v8 + 56) + 8 * *(void *)(v8 + 48)), 8 * v106);
LABEL_140:
  *(void *)(v8 + 4_Block_object_dispose(&STACK[0x220], 8) = v88;
  float v107 = v149[58];
  float v108 = v149[59];
  float v109 = v149[60];
  float v110 = sqrtf((float)((float)(v108 * v108) + (float)(v107 * v107)) + (float)(v109 * v109));
  float v111 = 0.0;
  float v112 = 0.0;
  float v113 = 0.0;
  if (v110 > 0.0)
  {
    float v111 = v107 / v110;
    float v112 = v108 / v110;
    float v113 = v109 / v110;
  }
  float v114 = (float)(v113 * -0.0) + (float)(v112 * 0.0);
  float v115 = v113 + (float)(v111 * -0.0);
  float v153 = v111;
  float v116 = -(float)(v112 - (float)(v111 * 0.0));
  float v117 = (float)((float)(v115 * v115) + (float)(v114 * v114)) + (float)(v116 * v116);
  double v148 = sqrt(v117);
  float v158 = v112;
  float v156 = v113;
  if (v148 <= 0.00001)
  {
    printf("%sError : ", (const char *)&unk_21BB738AE);
    printf("fix this case if needed");
    putchar(10);
    float v113 = v156;
    float v112 = v158;
  }
  float v118 = sqrtf(v117);
  float v155 = 0.0;
  float v119 = 0.0;
  float v120 = 0.0;
  if (v118 > 0.0)
  {
    float v155 = v114 / v118;
    float v119 = v115 / v118;
    float v120 = v116 / v118;
  }
  if ((int)v86 >= 1)
  {
    uint64_t v86 = v86;
    float v121 = (float)(v120 * v153) - (float)(v155 * v113);
    float v122 = (float)(v155 * v112) - (float)(v119 * v153);
    float v150 = (float)(v119 * v113) - (float)(v120 * v112);
    uint64_t v123 = *(void *)(v8 + 8);
    uint64_t v124 = *(void *)(v8 + 32);
    uint64_t v125 = *(void *)(v8 + 56);
    double v126 = (unsigned __int16 *)(*(void *)(v8 + 80) + 2);
    do
    {
      int v141 = *v126;
      v126 += 2;
      uint64_t v140 = v141;
      int v142 = v141 - v159;
      if (v141 >= (int)v159)
      {
        uint64_t v127 = (float *)(*(void *)(v152 + 8) + 268 * v142);
        float v129 = *v127;
        float v128 = v127[1];
        float v130 = v127[2];
        float v131 = (float)((float)((float)(v150 * *v127) + 0.0) + (float)(v121 * v128)) + (float)(v122 * v130);
        float v132 = (float)((float)((float)(v155 * *v127) + 0.0) + (float)(v119 * v128)) + (float)(v120 * v130);
        float v133 = 1.0;
        float v134 = 1.0 / sqrtf((float)(v132 * v132) + (float)(v131 * v131));
        float v135 = (float)((float)((float)((float)(v153 * *v127) + 0.0) + (float)(v112 * v128)) + (float)(v113 * v130))
             * v134;
        float v136 = atan2f(v132 * v134, v131 * v134);
        float v137 = v130 / v129;
      }
      else
      {
        uint64_t v143 = v151[1] + 288 * v140;
        float v133 = *(float *)v143;
        float v137 = *(float *)(v143 + 4);
        float v144 = (float)((float)(v150 + 0.0) + (float)(v121 * *(float *)v143)) + (float)(v122 * v137);
        float v145 = (float)((float)(v155 + 0.0) + (float)(v119 * *(float *)v143)) + (float)(v120 * v137);
        float v146 = 1.0 / sqrtf((float)(v145 * v145) + (float)(v144 * v144));
        float v135 = (float)((float)((float)(v153 + 0.0) + (float)(v112 * *(float *)v143)) + (float)(v113 * v137)) * v146;
        float v136 = atan2((float)(v145 * v146), (float)(v144 * v146));
      }
      uint64_t v138 = 4 * v140;
      *(float *)(v123 + v13_Block_object_dispose(&STACK[0x220], 8) = v136;
      *(float *)(v124 + v13_Block_object_dispose(&STACK[0x220], 8) = v135;
      BOOL v139 = (float *)(v125 + 8 * v140);
      *BOOL v139 = v133;
      v139[1] = v137;
      --v86;
      float v112 = v158;
      float v113 = v156;
    }
    while (v86);
  }
  BOOL result = v148 <= 0.00001;
  *(void *)(v8 + 144) = v149;
  return result;
}

uint64_t vl_ps_grid_cell_add(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 76);
  if (v2 == -1)
  {
    unint64_t v9 = *(void *)(a1 + 48);
    unint64_t v10 = *(void *)(a1 + 56);
    if (v9 == *(void *)(a1 + 24) * v10)
    {
      if ((52 * v10) >> 31 >= 5) {
        __assert_rtn("vl_ps_grid_cell_add", "vl_pose_ps.c", 535, "n_bytes < 10*GB && \"Page size too large, try allocating smaller pages\"");
      }
      uint64_t v11 = malloc_type_malloc(52 * v10, 0xAA52A4A0uLL);
      uint64_t v12 = *(void *)(a1 + 24);
      uint64_t v13 = *(void *)(a1 + 40);
      if (v12 >= v13)
      {
        uint64_t v14 = 2 * v13;
        BOOL v15 = v13 == 0;
        uint64_t v16 = 32;
        if (!v15) {
          uint64_t v16 = v14;
        }
        if (v16 <= v12) {
          uint64_t v17 = v12 + 1;
        }
        else {
          uint64_t v17 = v16;
        }
        if (v17)
        {
          *(void *)(a1 + 32) = malloc_type_realloc(*(void **)(a1 + 32), 8 * v17, 0xE6C7ABECuLL);
          uint64_t v12 = *(void *)(a1 + 24);
        }
        *(void *)(a1 + 40) = v17;
      }
      *(void *)(a1 + 24) = v12 + 1;
      *(void *)(*(void *)(a1 + 32) + 8 * v12) = 0;
      *(void *)(*(void *)(a1 + 32) + 8 * *(void *)(a1 + 24) - _Block_object_dispose(&STACK[0x220], 8) = v11;
      unint64_t v9 = *(void *)(a1 + 48);
      unint64_t v10 = *(void *)(a1 + 56);
    }
    if (v9 % v10) {
      uint64_t v18 = *(void *)(a1 + 64) + 52;
    }
    else {
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8 * (int)((int)v9 / v10)) + 52 * (int)((int)v9 % v10);
    }
    *(void *)(a1 + 64) = v18;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = v9 + 1;
    *(_DWORD *)(v18 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)uint64_t v18 = 0u;
    uint64_t result = *(void *)(a1 + 64);
    int v8 = *(_DWORD *)(a1 + 48) - 1;
  }
  else
  {
    unint64_t v3 = *(void *)(a1 + 56);
    unint64_t v4 = v2 / v3;
    int v5 = v2 % v3;
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * (int)v4);
    if (*(_DWORD *)(v6 + 52 * v5 + 28) != -1) {
      __assert_rtn("vl_ps_grid_cell_add", "vl_pose_ps.c", 528, "c->sub_region_flag == -1");
    }
    uint64_t result = v6 + 52 * v5;
    int v8 = *(_DWORD *)(result + 36);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(result + 40);
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_DWORD *)(result + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
    *(_OWORD *)uint64_t result = 0u;
  }
  *(_DWORD *)(result + 36) = v8;
  *(_DWORD *)(result + 40) = -1;
  return result;
}

float vl_ps_grid_setup(uint64_t a1, double *a2, long long *a3, int *a4, uint64_t a5, float a6)
{
  float v12 = *(float *)(a5 + 16);
  float v13 = ceilf((float)(a6 + a6) / v12);
  if (v13 < 1.0)
  {
    int v14 = 1;
    if (*(int *)(a5 + 48) < 1) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v13 <= 512.0)
  {
    int v14 = (int)v13;
    if (*(int *)(a5 + 48) < 1) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v14 = 512;
  if (*(int *)(a5 + 48) >= 1)
  {
LABEL_8:
    printf("Verbose : ");
    printf("vl_ps_grid_setup: Testing %d cells (Search radius: %.1f m)\n", v14 * v14, a6);
    putchar(10);
  }
LABEL_9:
  long long v15 = *a3;
  *(void *)(a1 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a1 = v15;
  if (v14 >= 1)
  {
    int v16 = 0;
    float v17 = (float)(v14 - 1);
    float v18 = 0.0;
    float v19 = -0.5;
    while (1)
    {
      int v20 = 0;
      float v21 = v12 * (float)((float)v16 + (float)(v17 * v19));
      float v22 = v21 * v21;
      double v43 = v21;
      do
      {
        while (1)
        {
          while (1)
          {
            size_t __nel = 0;
            __base = 0;
            uint64_t v46 = 0;
            float v23 = v12 * (float)((float)v20 + (float)(v17 * v19));
            float v24 = v22 + (float)(v23 * v23);
            if (v24 < (float)((float)((float)(v12 * 0.5) * (float)v14) * (float)((float)(v12 * 0.5) * (float)v14))) {
              break;
            }
            free(0);
            if (++v20 == v14) {
              goto LABEL_11;
            }
          }
          double v25 = *(double *)(a1 + 8);
          float v26 = *(double *)a1 + v23;
          float v27 = v25 + v43;
          if (v18 <= v24) {
            float v18 = v22 + (float)(v23 * v23);
          }
          float v28 = v25 + v43;
          vl_height_get_for_cs(a4, a2, (uint64_t)&__nel, v26, v28);
          if (__nel)
          {
            uint64_t v29 = (float *)__base;
            qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))cmp_float_asc);
            int64_t v30 = __nel;
            if ((uint64_t)__nel < 2)
            {
              size_t __nel = 1;
              break;
            }
            uint64_t v31 = v29;
            int64_t v32 = 1;
            uint64_t v33 = 1;
            do
            {
              uint64_t v35 = v29;
              float v36 = v29[1];
              ++v29;
              if (*v31 == v36)
              {
                uint64_t v34 = v31;
              }
              else
              {
                uint64_t v34 = v31 + 1;
                ++v32;
                if (v35 != v31)
                {
                  *uint64_t v34 = *v29;
                  int64_t v30 = __nel;
                }
              }
              ++v33;
              uint64_t v31 = v34;
            }
            while (v33 < v30);
            size_t __nel = v32;
            if (v32 > 0) {
              break;
            }
          }
          float v19 = -0.5;
          free(__base);
          if (++v20 == v14) {
            goto LABEL_11;
          }
        }
        int64_t v37 = 0;
        float v38 = sqrtf(v24);
        do
        {
          uint64_t v39 = vl_ps_grid_cell_add(a1);
          *(float *)uint64_t v39 = v26;
          *(float *)(v39 + 4) = v27;
          *(float *)(v39 + 16) = v12;
          *(float *)(v39 + 20) = v12;
          *(float *)(v39 + 12) = v38;
          *(_DWORD *)(v39 + 24) = *(_DWORD *)(a5 + 20);
          int64_t v41 = __nel;
          float v40 = __base;
          *(float *)(v39 + _Block_object_dispose(&STACK[0x220], 8) = *((float *)__base + v37++) - *(float *)(a5 + 60);
        }
        while (v41 > v37);
        float v19 = -0.5;
        free(v40);
        ++v20;
      }
      while (v20 != v14);
LABEL_11:
      if (++v16 == v14) {
        goto LABEL_34;
      }
    }
  }
  float v18 = 0.0;
LABEL_34:
  if (*(int *)(a5 + 48) >= 1)
  {
    printf("Verbose : ");
    printf("vl_ps_grid_setup: Added %d cells of size %f from a %d x %d = grid.", *(void *)(a1 + 48), v12, v14, v14);
    putchar(10);
  }
  float result = sqrtf(v18);
  *(float *)(a1 + 72) = result;
  return result;
}

uint64_t cmp_float_asc(float *a1, float *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 == *a2) {
    return 0;
  }
  else {
    return v2;
  }
}

void vl_ps_get_inliers(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  size_t v7 = *(int *)(a2 + 4);
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  unint64_t v9 = a4;
  if (!a4) {
    unint64_t v9 = (char *)malloc_type_calloc(v7, 4uLL, 0x100004052888210uLL);
  }
  __double2 v10 = __sincos_stret((float)(*(float *)(a1 + 20) - *(float *)a2));
  float v11 = *(float *)(a1 + 36) * 0.5;
  float v12 = (float32x2_t *)malloc_type_malloc(4 * v7, 0x100004052888210uLL);
  float v13 = (float32x2_t *)malloc_type_malloc(4 * v7, 0x100004052888210uLL);
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v54 = 0;
  uint64_t v50 = *(void *)(a1 + 8);
  int v51 = *(_DWORD *)(a1 + 16);
  *(void *)((char *)&v52 + 4) = *(void *)(a1 + 24);
  HIDWORD(v52) = *(_DWORD *)(a1 + 32);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 48);
  if ((int)v8 >= 1)
  {
    double v17 = -v10.__sinval;
    if (v7 < 8)
    {
      uint64_t v18 = 0;
LABEL_14:
      uint64_t v29 = v8 - v18;
      uint64_t v30 = 4 * v18;
      uint64_t v31 = (_DWORD *)v13 + v18;
      int64_t v32 = (float *)((char *)v12 + v30);
      uint64_t v33 = (float *)(v16 + v30);
      uint64_t v34 = (float *)(v15 + v30);
      do
      {
        float v35 = *v34++;
        double v36 = v35;
        float v37 = *v33++;
        float v38 = v17 * v37 + v10.__cosval * v36;
        v14.f64[0] = v10.__cosval * v37 + v10.__sinval * v36;
        *(float *)v14.f64 = v14.f64[0];
        *v32++ = v38;
        *v31++ = LODWORD(v14.f64[0]);
        --v29;
      }
      while (v29);
      goto LABEL_16;
    }
    uint64_t v18 = 0;
    if ((unint64_t)((char *)v13 - (char *)v12) < 8) {
      goto LABEL_14;
    }
    if ((unint64_t)v12 - v15 < 8) {
      goto LABEL_14;
    }
    if ((unint64_t)v12 - v16 < 8) {
      goto LABEL_14;
    }
    if ((unint64_t)v13 - v15 < 8) {
      goto LABEL_14;
    }
    if ((unint64_t)v13 - v16 < 8) {
      goto LABEL_14;
    }
    uint64_t v18 = v8 & 0xFFFFFFFE;
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10.__cosval, 0);
    uint64_t v19 = v18;
    float64x2_t v20 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10.__sinval, 0);
    float v21 = v13;
    float v22 = v12;
    float v23 = *(float32x2_t **)(a2 + 48);
    float v24 = *(float32x2_t **)(a2 + 40);
    do
    {
      float32x2_t v25 = *v24++;
      float64x2_t v26 = vcvtq_f64_f32(v25);
      float32x2_t v27 = *v23++;
      float64x2_t v28 = vcvtq_f64_f32(v27);
      *v22++ = vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v28, v17), v26, v14));
      *v21++ = vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v28, v10.__cosval), v26, v20));
      v19 -= 2;
    }
    while (v19);
    if (v18 != v8) {
      goto LABEL_14;
    }
  }
LABEL_16:
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = v13;
  LODWORD(v14.f64[0]) = *(_DWORD *)(a3 + 136);
  vl_ps_filter_corr((float *)&v50, a2, a2, (uint64_t)v9, v11, v14.f64[0]);
  uint64_t v39 = *(void **)(a2 + 40);
  float v48 = *(void **)(a2 + 48);
  *(void *)(a2 + 40) = v15;
  *(void *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = v16;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 0;
  if ((int)v8 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    do
    {
      if (*(_DWORD *)&v9[v40])
      {
        uint64_t v42 = (unsigned __int16 *)(*(void *)(a2 + 8) + v40);
        unsigned int v43 = *v42;
        unsigned int v44 = v42[1];
        uint64_t v45 = *(void *)(a1 + 104);
        if (v41 >= v45)
        {
          if (v45) {
            uint64_t v46 = 2 * v45;
          }
          else {
            uint64_t v46 = 32;
          }
          if (v46 <= v41) {
            uint64_t v47 = v41 + 1;
          }
          else {
            uint64_t v47 = v46;
          }
          if (v47)
          {
            *(void *)(a1 + 96) = malloc_type_realloc(*(void **)(a1 + 96), 8 * v47, 0xDCE4FB49uLL);
            uint64_t v41 = *(void *)(a1 + 88);
          }
          *(void *)(a1 + 104) = v47;
        }
        *(void *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = v41 + 1;
        *(void *)(*(void *)(a1 + 96) + 8 * v41++) = __PAIR64__(v44, v43);
      }
      v40 += 4;
    }
    while (4 * v8 != v40);
  }
  free(v39);
  free(v48);
  if (!a4)
  {
    free(v9);
  }
}

uint64_t vl_ps_filter_corr(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, double a6)
{
  v6.f32[0] = a5;
  uint64_t v11 = *(int *)(a2 + 4);
  __float2 v13 = __sincosf_stret(a5);
  *(float *)v12.i32 = v13.__cosval;
  float v14 = a1[4] * 0.5;
  float v15 = a1[6] * 0.5;
  uint64_t v16 = a1;
  float32x4_t v18 = vld1q_dup_f32(v16);
  double v17 = v16 + 1;
  if ((int)v11 <= 0) {
    int v19 = -(-(int)v11 & 3);
  }
  else {
    int v19 = v11 & 3;
  }
  unint64_t v20 = (v11 - v19);
  if ((int)v20 < 1)
  {
    uint64_t result = 0;
    LODWORD(v23) = 0;
    float v28 = *(float *)&a6;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t result = 0;
    unint64_t v23 = 0;
    float32x4_t v24 = vld1q_dup_f32(v17);
    float32x2_t v25 = a1 + 2;
    float32x4_t v26 = vld1q_dup_f32(v25);
    float32x4_t v27 = (float32x4_t)vdupq_lane_s32(v12, 0);
    float v28 = *(float *)&a6;
    float32x4_t v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
    int8x8_t v30 = (int8x8_t)vdup_lane_s32(vcgt_f32(v6, 0), 0);
    __asm { FMOV            V19.4S, #1.0 }
    v36.i64[0] = 0x3F0000003F000000;
    v36.i64[1] = 0x3F0000003F000000;
    v37.i64[0] = 0x8000000080000000;
    v37.i64[1] = 0x8000000080000000;
    do
    {
      float32x4_t v38 = *(float32x4_t *)(*(void *)(a2 + 40) + v21);
      float32x4_t v39 = *(float32x4_t *)(*(void *)(a2 + 48) + v21);
      float32x4_t v40 = vsubq_f32(*(float32x4_t *)(*(void *)(a2 + 16) + v21), v18);
      float32x4_t v41 = vsubq_f32(*(float32x4_t *)(*(void *)(a2 + 24) + v21), v24);
      float32x4_t v42 = vaddq_f32(vmulq_f32(v40, v40), vmulq_f32(v41, v41));
      float32x4_t v43 = vdivq_f32(_Q19, vsqrtq_f32(v42));
      float32x4_t v44 = vmulq_n_f32(v43, v14);
      float32x4_t v45 = vsubq_f32(_Q19, vmulq_f32(vmulq_f32(v44, v44), v36));
      float32x4_t v46 = vmulq_f32(v43, vaddq_f32(vmulq_f32(v40, v38), vmulq_f32(v41, v39)));
      int8x16_t v47 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vand_s8(vorn_s8(vand_s8((int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vcltzq_f32(vaddq_f32(v27, v45)), (int8x16_t)vcltzq_f32(v45)), (int8x16_t)vcgtq_f32(v46, vsubq_f32(vmulq_n_f32(v45, v13.__cosval), vmulq_n_f32(v44, v13.__sinval))))), v30), v30), vand_s8((int8x8_t)vmovn_s32(vcgtq_f32(v42, v36)), (int8x8_t)vmovn_s32(vcgtq_f32(v29, vsubq_f32(vabdq_f32(vmulq_f32(
                                                                                    vsubq_f32(*(float32x4_t *)(*(void *)(a2 + 32) + v21), v26), v43), *(float32x4_t *)(*(void *)(a2 + 56)+ v21)), vmulq_n_f32(v43, v15))))))), 0x1FuLL));
      *(int8x16_t *)(a4 + v21) = v47;
      unsigned __int32 v48 = vqtbl1q_s8(v47, (int8x16_t)xmmword_21BB7A7C0).u32[0];
      if (v48)
      {
        float32x4_t v49 = vmulq_f32(vaddq_f32(v46, _Q19), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32(vmulq_f32(v41, v38), vmulq_f32(v40, v39)), v37), (int8x16_t)_Q19));
        uint64_t v50 = *(void *)(a3 + 72);
        uint64_t v51 = *(void *)(a3 + 80);
        uint64_t v52 = 4 * (int)result;
        *(_DWORD *)(v50 + v52) = v44.i32[0];
        *(_DWORD *)(v51 + v52) = v49.i32[0];
        if ((_BYTE)v48) {
          unsigned int v53 = result + 1;
        }
        else {
          unsigned int v53 = result;
        }
        uint64_t v54 = 4 * (int)v53;
        *(_DWORD *)(v50 + v54) = v44.i32[1];
        *(_DWORD *)(v51 + v54) = v49.i32[1];
        if ((v48 & 0xFF00) != 0) {
          ++v53;
        }
        uint64_t v55 = 4 * (int)v53;
        *(_DWORD *)(v50 + v55) = v44.i32[2];
        *(_DWORD *)(v51 + v55) = v49.i32[2];
        if ((v48 & 0xFF0000) != 0) {
          ++v53;
        }
        uint64_t v56 = 4 * (int)v53;
        *(_DWORD *)(v50 + v56) = v44.i32[3];
        *(_DWORD *)(v51 + v56) = v49.i32[3];
        if ((v48 & 0xFF000000) != 0) {
          uint64_t result = v53 + 1;
        }
        else {
          uint64_t result = v53;
        }
      }
      v23 += 4;
      v21 += 16;
    }
    while (v23 < v20);
  }
  if ((int)v23 < (int)v11)
  {
    uint64_t v57 = *(void *)(a2 + 16);
    uint64_t v58 = *(void *)(a2 + 24);
    uint64_t v59 = *(void *)(a2 + 32);
    uint64_t v60 = *(void *)(a2 + 40);
    float v61 = -v15;
    unint64_t v23 = (int)v23;
    uint64_t v62 = *(void *)(a2 + 48);
    uint64_t v63 = *(void *)(a2 + 56);
    do
    {
      float v64 = *(float *)(v57 + 4 * v23) - *a1;
      float v65 = *(float *)(v58 + 4 * v23) - a1[1];
      float v66 = (float)(v65 * v65) + (float)(v64 * v64);
      float v67 = *(float *)(v60 + 4 * v23);
      float v68 = 1.0 / sqrtf(v66);
      float v69 = *(float *)(v62 + 4 * v23);
      float v70 = v68 * (float)((float)(v65 * v69) + (float)(v64 * v67));
      float v71 = v14 * v68;
      float v72 = (float)((float)(v71 * v71) * -0.5) + 1.0;
      BOOL v73 = (float)(v13.__cosval + v72) < 0.0;
      if ((float)((float)(v72 * v13.__cosval) - (float)((float)(v14 * v68) * v13.__sinval)) < v70) {
        BOOL v73 = 1;
      }
      if (v72 < 0.0) {
        BOOL v73 = 1;
      }
      float v74 = fabsf(-(float)(*(float *)(v63 + 4 * v23) - (float)((float)(*(float *)(v59 + 4 * v23) - a1[2]) * v68)))
          + (float)(v61 * v68);
      if (v6.f32[0] <= 0.0) {
        BOOL v73 = 1;
      }
      if (v74 >= v28) {
        BOOL v73 = 0;
      }
      if (v66 <= 0.5) {
        BOOL v73 = 0;
      }
      *(_DWORD *)(a4 + 4 * v23) = v73;
      if (v73)
      {
        if ((float)((float)(v65 * v67) - (float)(v64 * v69)) <= 0.0) {
          float v75 = -(float)(v70 + 1.0);
        }
        else {
          float v75 = v70 + 1.0;
        }
        uint64_t v76 = 4 * (int)result;
        uint64_t v77 = *(void *)(a3 + 80);
        *(float *)(*(void *)(a3 + 72) + v76) = v71;
        *(float *)(v77 + v76) = v75;
        uint64_t result = (result + 1);
      }
      ++v23;
    }
    while (v11 != v23);
  }
  if ((int)result > (int)v11) {
    __assert_rtn("vl_ps_filter_corr", "vl_pose_ps.c", 730, "n_matches <= n_corr");
  }
  return result;
}

uint64_t vl_ps_vote_prio(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v290 = v8;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v285 = v3;
  uint64_t v354 = *MEMORY[0x263EF8340];
  uint64_t v13 = *(int *)(v9 + 4);
  float v14 = *(float *)(*(void *)(v11 + 144) + 252);
  float v15 = (int64x2_t *)malloc_type_malloc(0x402uLL, 0x100004040BEE09CuLL);
  double v293 = malloc_type_malloc(4 * v13, 0x100004052888210uLL);
  if (4 * *(_DWORD *)(v12 + 200) <= 4) {
    int v16 = 4;
  }
  else {
    int v16 = 4 * *(_DWORD *)(v12 + 200);
  }
  double v17 = malloc_type_calloc(1uLL, 0x30uLL, 0x1030040F6295BD8uLL);
  unsigned int v18 = v16 | 1;
  *double v17 = malloc_type_malloc(24 * v18, 0x1080040A085CBA5uLL);
  v17[4] = 0;
  *((_DWORD *)v17 + 10) = v18;
  *((_DWORD *)v17 + 11) = 0;
  unsigned long long v340 = 0u;
  unsigned long long v341 = 0u;
  unsigned long long v342 = 0u;
  long long v343 = 0u;
  long long v344 = 0u;
  long long v345 = 0u;
  long long v346 = 0u;
  long long v347 = 0u;
  long long v348 = 0u;
  long long v350 = unk_21BB7A820;
  long long v351 = xmmword_21BB7A830;
  long long v352 = unk_21BB7A840;
  float v19 = *(float *)(v5 + 12);
  v349[0] = 0;
  *(_OWORD *)&v349[1] = *(_OWORD *)"timer";
  int v353 = 1;
  *((void *)&v347 + 1) = -(uint64_t)mach_absolute_time();
  if (*(_DWORD *)(v5 + 124) * *(_DWORD *)(v5 + 124) * *(_DWORD *)(v5 + 128) > 64) {
    __assert_rtn("vl_ps_vote_prio", "vl_pose_ps.c", 946, "SQR(par->cell_split_factor_xy) * par->cell_split_factor_z <= 64 && \"Too many children in cell split\"");
  }
  if (*(uint64_t *)(v12 + 200) >= 1)
  {
    unint64_t v20 = 0;
    do
    {
      pqueue_push((uint64_t)v17, *(void *)(*(void *)(v12 + 184) + 8 * (v20 / *(void *)(v12 + 208))) + 52 * (v20 % *(void *)(v12 + 208)), 3.40282347e38);
      ++v20;
    }
    while (*(void *)(v12 + 200) > (int64_t)v20);
  }
  uint64_t v295 = v12;
  int v276 = v15;
  int v277 = (void **)v17;
  if (*((int *)v17 + 9) >= 1)
  {
    uint64_t v21 = v12 + 152;
    double v289 = v19;
    int64x2_t v271 = (timespec *)(v7 + 664);
    float64x2_t v272 = (timespec *)(v7 + 680);
    uint64_t v282 = (timespec *)(v7 + 16);
    uint64_t v283 = (timespec *)(v7 + 32);
    float v22 = (timespec *)(v7 + 216);
    int v280 = (timespec *)(v7 + 232);
    v281 = (timespec *)(v7 + 248);
    uint64_t v294 = (timespec *)(v7 + 432);
    int v278 = (timespec *)(v7 + 448);
    int v279 = (timespec *)(v7 + 464);
    double v287 = (timespec *)(v7 + 648);
    uint64_t v288 = (timespec *)(v7 + 864);
    double v23 = 0.0;
    double v273 = (timespec *)(v7 + 880);
    int v274 = (timespec *)(v7 + 896);
    float v284 = v14;
    float v286 = v19;
    uint64_t v291 = (timespec *)(v7 + 216);
    uint64_t v292 = v10;
    uint64_t v275 = v7;
    while (1)
    {
      double v305 = 0.0;
      if (v19 <= 0.0) {
        goto LABEL_19;
      }
      vl_timer_stop((uint64_t)&v340);
      if (v353)
      {
        uint64_t v24 = *((void *)&v347 + 1);
        info[0] = 0;
        mach_timebase_info(info);
        uint64_t v25 = v24 * info[0].numer;
        float v22 = v291;
        LODWORD(v26) = info[0].denom;
        double v27 = (double)v25 / ((double)v26 * 1000000.0);
        double v28 = 0.001;
      }
      else
      {
        double v27 = (double)(uint64_t)v347;
        double v28 = 0.000000001;
      }
      if (v27 * v28 * 1000.0 > v289) {
        goto LABEL_100;
      }
      if (v353) {
        break;
      }
      clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)&v342);
      clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)&v341);
      clock_gettime(_CLOCK_MONOTONIC, (timespec *)&v340);
      if (*((_DWORD *)v17 + 9))
      {
LABEL_20:
        float32x4_t v29 = (float32x2_t *)pqueue_delete((void **)v17, 1, &v305);
        if (v305 <= v23) {
          goto LABEL_100;
        }
        goto LABEL_24;
      }
LABEL_23:
      float32x4_t v29 = 0;
      if (v305 <= v23) {
        goto LABEL_100;
      }
LABEL_24:
      __int32 v30 = v29[4].i32[0];
      __int32 v31 = *(_DWORD *)(v5 + 120);
      if (v30 == v31 && v29[5].i16[2])
      {
        int16x8_t v338 = 0uLL;
        uint64_t v339 = 0;
        if (*(_DWORD *)(v7 + 860))
        {
          *(void *)(v7 + 768) -= mach_absolute_time();
        }
        else
        {
          clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v272);
          clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v271);
          clock_gettime(_CLOCK_MONOTONIC, v287);
        }
        LOWORD(v14) = v29[5].i16[2];
        LOWORD(v2) = v29[6].i16[0];
        float32x2_t v301 = *v29;
        __int32 v303 = v29[1].i32[0];
        float32x2_t v91 = v29[2];
        __int32 v92 = v29[3].i32[0];
        uint64_t v93 = v338.i64[0];
        if (v338.i64[0] >= v339)
        {
          if (v339) {
            uint64_t v94 = 2 * v339;
          }
          else {
            uint64_t v94 = 1;
          }
          if (v94 <= v338.i64[0]) {
            uint64_t v95 = v338.i64[0] + 1;
          }
          else {
            uint64_t v95 = v94;
          }
          if (v95)
          {
            v338.i64[1] = (uint64_t)malloc_type_realloc((void *)v338.i64[1], 160 * v95, 0xEEB1B0EFuLL);
            uint64_t v93 = v338.i64[0];
          }
          uint64_t v339 = v95;
          float v22 = v291;
        }
        v338.i64[0] = v93 + 1;
        uint64_t v96 = v338.i64[1] + 160 * v93;
        *(float *)uint64_t v96 = (float)LODWORD(v14);
        *(_DWORD *)(v96 + 4) = 0;
        *(float32x2_t *)(v96 + _Block_object_dispose(&STACK[0x220], 8) = v301;
        *(_DWORD *)(v96 + 16) = v303;
        *(float *)(v96 + 20) = (float)((float)LODWORD(v2) + 0.5) * 0.012272;
        *(float32x2_t *)(v96 + 24) = v91;
        *(_DWORD *)(v96 + 32) = v92;
        *(_DWORD *)(v96 + 36) = 1011421147;
        *(_OWORD *)(v96 + 40) = 0u;
        *(_OWORD *)(v96 + 56) = 0u;
        *(_OWORD *)(v96 + 72) = 0u;
        *(_OWORD *)(v96 + 8_Block_object_dispose(&STACK[0x220], 8) = 0u;
        *(_OWORD *)(v96 + 104) = 0u;
        *(_OWORD *)(v96 + 120) = 0u;
        *(_OWORD *)(v96 + 136) = 0u;
        *(void *)(v96 + 152) = 0;
        vl_ps_refine(v285, v295);
        int v97 = *(_DWORD *)v338.i64[1];
        float v2 = *(float *)(v338.i64[1] + 4);
        uint64_t v302 = *(void *)(v338.i64[1] + 8);
        int v304 = *(_DWORD *)(v338.i64[1] + 16);
        long long v98 = *(_OWORD *)(v338.i64[1] + 20);
        int v99 = *(_DWORD *)(v338.i64[1] + 36);
        long long v100 = *(_OWORD *)(v338.i64[1] + 120);
        long long v310 = *(_OWORD *)(v338.i64[1] + 104);
        long long v311 = v100;
        long long v312 = *(_OWORD *)(v338.i64[1] + 136);
        *(void *)&long long v313 = *(void *)(v338.i64[1] + 152);
        long long v101 = *(_OWORD *)(v338.i64[1] + 56);
        *(_OWORD *)&info[0].numer = *(_OWORD *)(v338.i64[1] + 40);
        long long v307 = v101;
        long long v102 = *(_OWORD *)(v338.i64[1] + 88);
        long long v308 = *(_OWORD *)(v338.i64[1] + 72);
        long long v309 = v102;
        if (v23 <= (float)(v2 * 0.03125)) {
          double v23 = (float)(v2 * 0.03125);
        }
        uint64_t v103 = (void *)v290;
        uint64_t v104 = *(void *)v290;
        uint64_t v105 = *(void *)(v290 + 16);
        if (*(void *)v290 >= v105)
        {
          if (v105) {
            uint64_t v106 = 2 * v105;
          }
          else {
            uint64_t v106 = 1;
          }
          if (v106 <= v104) {
            uint64_t v107 = v104 + 1;
          }
          else {
            uint64_t v107 = v106;
          }
          float v14 = v284;
          if (v107)
          {
            long long v300 = v98;
            float v108 = malloc_type_realloc(*(void **)(v290 + 8), 160 * v107, 0x6984EA3CuLL);
            long long v98 = v300;
            uint64_t v103 = (void *)v290;
            *(void *)(v290 + _Block_object_dispose(&STACK[0x220], 8) = v108;
            uint64_t v104 = *(void *)v290;
          }
          v103[2] = v107;
          float v22 = v291;
        }
        else
        {
          float v14 = v284;
        }
        *uint64_t v103 = v104 + 1;
        uint64_t v109 = v103[1] + 160 * v104;
        *(_DWORD *)uint64_t v109 = v97;
        *(float *)(v109 + 4) = v2;
        *(void *)(v109 + _Block_object_dispose(&STACK[0x220], 8) = v302;
        *(_DWORD *)(v109 + 16) = v304;
        *(_OWORD *)(v109 + 20) = v98;
        *(_DWORD *)(v109 + 36) = v99;
        *(_OWORD *)(v109 + 104) = v310;
        *(_OWORD *)(v109 + 120) = v311;
        *(_OWORD *)(v109 + 136) = v312;
        *(void *)(v109 + 152) = v313;
        *(_OWORD *)(v109 + 40) = *(_OWORD *)&info[0].numer;
        *(_OWORD *)(v109 + 56) = v307;
        *(_OWORD *)(v109 + 72) = v308;
        *(_OWORD *)(v109 + 8_Block_object_dispose(&STACK[0x220], 8) = v309;
        free((void *)v338.i64[1]);
        v29[5].i32[0] = *(_DWORD *)(v295 + 228);
        v29[3].i32[1] = -1;
        *(_DWORD *)(v295 + 22_Block_object_dispose(&STACK[0x220], 8) = v29[4].i32[1];
        vl_timer_stop((uint64_t)v287);
        float v19 = v286;
        goto LABEL_11;
      }
      if (v30 > v31) {
        __assert_rtn("vl_ps_vote_prio", "vl_pose_ps.c", 998, "cell->n_splits <= par->n_split_steps");
      }
      if (*(_DWORD *)(v7 + 212))
      {
        *(void *)(v7 + 120) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v283);
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v282);
        clock_gettime(_CLOCK_MONOTONIC, (timespec *)v7);
      }
      LODWORD(v32) = *(_DWORD *)(v5 + 136);
      uint64_t v33 = vl_ps_filter_corr((float *)v29, v10, v10, (uint64_t)v293, v14, v32);
      vl_timer_stop(v7);
      if (*(_DWORD *)(v7 + 428))
      {
        *(void *)(v7 + 336) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v281);
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v280);
        clock_gettime(_CLOCK_MONOTONIC, v22);
      }
      bzero(v15, 0x402uLL);
      uint64_t v34 = v33;
      uint64_t v10 = v292;
      vl_ps_cell_vote(v34, v292, (uint64_t)v15, v35);
      vl_timer_stop((uint64_t)v22);
      if (*(_DWORD *)(v7 + 644))
      {
        *(void *)(v7 + 552) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v279);
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v278);
        clock_gettime(_CLOCK_MONOTONIC, v294);
      }
      v15->i16[0] = v15[64].i16[0];
      int16x8_t v36 = 0uLL;
      unsigned int v37 = -8;
      float32x4_t v38 = v15;
      int8x16_t v39 = 0uLL;
      int16x8_t v40 = (int16x8_t)xmmword_21BB7A7D0;
      int16x8_t v41 = 0uLL;
      v42.i64[0] = 0x8000800080008;
      v42.i64[1] = 0x8000800080008;
      v43.i64[0] = 0xFFFF0000FFFF0000;
      v43.i64[1] = 0xFFFF0000FFFF0000;
      v44.i64[0] = 0xFFFFFFFF00000000;
      v44.i64[1] = 0xFFFFFFFF00000000;
      v45.i64[0] = 0xFFFF0000FFFFLL;
      v45.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        int16x8_t v46 = *(int16x8_t *)v38;
        if (vorrq_s8((int8x16_t)vdupq_laneq_s64(*v38, 1), *(int8x16_t *)v38).u64[0])
        {
          int16x8_t v47 = vaddq_s16(v46, (int16x8_t)vqtbl1q_s8((int8x16_t)v46, (int8x16_t)xmmword_21BB7A7E0));
          *(int32x2_t *)v48.i8 = vrev64_s32(*(int32x2_t *)v47.i8);
          v48.u64[1] = (unint64_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL));
          int16x8_t v49 = vaddq_s16(v47, v48);
          int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL);
          int16x8_t v51 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)v46, v45), v41), (int16x8_t)vandq_s8((int8x16_t)v47, v43)), (int16x8_t)vandq_s8((int8x16_t)v48, v44)), (int16x8_t)vandq_s8((int8x16_t)v50, (int8x16_t)xmmword_21BB7A7F0));
          int16x8_t v41 = vaddq_s16(vaddq_s16(v49, v41), v50);
          int8x16_t v52 = (int8x16_t)vcgtq_s16(v51, v36);
          int16x8_t v36 = vmaxq_s16(v51, v36);
          int8x16_t v39 = vbslq_s8(v52, (int8x16_t)v40, v39);
        }
        int16x8_t v40 = vaddq_s16(v40, v42);
        ++v38;
        v37 += 8;
      }
      while (v37 < 0x1F8);
      *(int8x16_t *)&info[0].numer = v39;
      int16x8_t v338 = v36;
      uint64_t v53 = 2;
      if (*(unsigned __int16 *)((unint64_t)&v338 | (2 * (v36.u16[1] > v36.u16[0]))) >= v36.u16[2]) {
        uint64_t v53 = v36.u16[1] > v36.u16[0];
      }
      if (*(unsigned __int16 *)((unint64_t)&v338 | (2 * v53)) < v36.u16[3]) {
        uint64_t v53 = 3;
      }
      if (*(unsigned __int16 *)((unint64_t)&v338 | (2 * v53)) < v36.u16[4]) {
        uint64_t v53 = 4;
      }
      if (*(unsigned __int16 *)((unint64_t)&v338 | (2 * v53)) < v36.u16[5]) {
        uint64_t v53 = 5;
      }
      if (*(unsigned __int16 *)((unint64_t)&v338 | (2 * v53)) < v36.u16[6]) {
        uint64_t v53 = 6;
      }
      if (v338.u16[v53] < v36.u16[7]) {
        uint64_t v53 = 7;
      }
      uint64_t v54 = v53;
      v29[6].i16[0] = *(_WORD *)((char *)&info[0].numer + v54 * 2);
      v29[5].i16[2] = v338.i16[v54];
      vl_timer_stop((uint64_t)v294);
      LOWORD(v55) = v29[5].i16[2];
      if (pow(*(float *)(v5 + 4), (double)(*(_DWORD *)(v5 + 120) - v29[4].i32[0])) * (double)v55 * *(float *)(v5 + 8) > v23)
      {
        if (*(_DWORD *)(v7 + 1076))
        {
          *(void *)(v7 + 984) -= mach_absolute_time();
          __int32 v57 = v29[4].i32[0];
          int v58 = *(_DWORD *)(v5 + 120);
          BOOL v59 = __OFSUB__(v58, v57);
          int v60 = v58 - v57;
          if (!((v60 < 0) ^ v59 | (v60 == 0))) {
            goto LABEL_57;
          }
LABEL_73:
          LOWORD(v56) = v29[5].i16[2];
          double v89 = (double)v56;
          long double v90 = pow(*(float *)(v5 + 4), (double)v60);
          pqueue_push((uint64_t)v17, (uint64_t)v29, v90 * v89 * *(float *)(v5 + 8));
        }
        else
        {
          clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v274);
          clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v273);
          clock_gettime(_CLOCK_MONOTONIC, v288);
          __int32 v87 = v29[4].i32[0];
          int v88 = *(_DWORD *)(v5 + 120);
          BOOL v59 = __OFSUB__(v88, v87);
          int v60 = v88 - v87;
          if ((v60 < 0) ^ v59 | (v60 == 0)) {
            goto LABEL_73;
          }
LABEL_57:
          long long v336 = 0u;
          long long v337 = 0u;
          long long v334 = 0u;
          long long v335 = 0u;
          long long v332 = 0u;
          long long v333 = 0u;
          long long v330 = 0u;
          long long v331 = 0u;
          long long v328 = 0u;
          long long v329 = 0u;
          long long v326 = 0u;
          long long v327 = 0u;
          long long v324 = 0u;
          long long v325 = 0u;
          long long v322 = 0u;
          long long v323 = 0u;
          long long v320 = 0u;
          long long v321 = 0u;
          long long v318 = 0u;
          long long v319 = 0u;
          long long v316 = 0u;
          long long v317 = 0u;
          long long v314 = 0u;
          long long v315 = 0u;
          long long v313 = 0u;
          long long v311 = 0u;
          long long v312 = 0u;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          *(_OWORD *)&info[0].numer = 0u;
          int v61 = *(_DWORD *)(v5 + 124);
          uint64_t v63 = *(int *)(v5 + 128);
          double v62 = (double)v63;
          *(float *)&uint64_t v63 = (float)v61;
          double v64 = ceilf((float)(v29[3].f32[0] / v29[2].f32[0]) * (float)v61);
          if (v62 >= v64) {
            double v62 = v64;
          }
          int v298 = *(_DWORD *)(v5 + 124);
          uint64_t v65 = v5;
          if (v61 >= 1)
          {
            int v66 = (int)v62;
            if ((int)v62 >= 1)
            {
              uint64_t v270 = v5;
              int v67 = 0;
              int v68 = 0;
              float v2 = (float)v66;
              float32x2_t v69 = (float32x2_t)vdup_lane_s32((int32x2_t)v63, 0);
              do
              {
                int v70 = 0;
                int v296 = v68;
                float v297 = (float)v68 + 0.5;
                do
                {
                  uint64_t v71 = 0;
                  int v72 = v67;
                  int v73 = v67;
                  v74.f32[0] = v297;
                  v74.f32[1] = (float)v70 + 0.5;
                  float32x2_t v299 = v74;
                  float v75 = &info[v67];
                  unsigned int v76 = v67 + 1;
                  do
                  {
                    unsigned int v77 = v76;
                    uint64_t v78 = (float32x2_t *)vl_ps_grid_cell_add(v21);
                    *(float *)&unint64_t v80 = v29[3].f32[0] / v2;
                    v78[3].i32[0] = v80;
                    float32x2_t v79 = vdiv_f32(v29[2], v69);
                    v78[2] = v79;
                    *uint64_t v78 = vmla_f32(vmla_f32(*v29, (float32x2_t)0xBF000000BF000000, v29[2]), v79, v299);
                    *(float *)&unint64_t v80 = (float)(v29[1].f32[0] + (float)(v29[3].f32[0] * -0.5))
                                   + (float)((float)((float)(int)v71 + 0.5) * *(float *)&v80);
                    v78[1].i32[0] = v80;
                    v78[1].i32[1] = -1082130432;
                    v78[4].i32[0] = v29[4].i32[0] + 1;
                    v78[5].i16[3] = v29[5].i16[2];
                    v75[v71++] = (mach_timebase_info)v78;
                    unsigned int v76 = v77 + 1;
                  }
                  while (v66 != v71);
                  ++v70;
                  int v67 = v73 + v71;
                }
                while (v70 != v298);
                int v68 = v296 + 1;
                int v67 = v71 + v72;
              }
              while (v296 + 1 != v298);
              int v81 = v72 + v71;
              float v15 = v276;
              double v17 = v277;
              uint64_t v65 = v270;
              float v19 = v286;
              if (v81 >= 1)
              {
                uint64_t v82 = v77;
                uint64_t v83 = info;
                do
                {
                  uint64_t v84 = (uint64_t)*v83++;
                  LOWORD(v80) = v29[5].i16[2];
                  double v85 = (double)v80;
                  long double v86 = pow(*(float *)(v270 + 4), (double)(*(_DWORD *)(v270 + 120) - v29[4].i32[0]));
                  pqueue_push((uint64_t)v277, v84, v86 * v85 * *(float *)(v270 + 8));
                  --v82;
                }
                while (v82);
              }
            }
          }
          v29[5].i32[0] = *(_DWORD *)(v295 + 228);
          v29[3].i32[1] = -1;
          *(_DWORD *)(v295 + 22_Block_object_dispose(&STACK[0x220], 8) = v29[4].i32[1];
          uint64_t v5 = v65;
          uint64_t v7 = v275;
          float v22 = v291;
          uint64_t v10 = v292;
        }
        vl_timer_stop((uint64_t)v288);
        goto LABEL_11;
      }
      v29[5].i32[0] = *(_DWORD *)(v295 + 228);
      v29[3].i32[1] = -1;
      *(_DWORD *)(v295 + 22_Block_object_dispose(&STACK[0x220], 8) = v29[4].i32[1];
LABEL_11:
      if (*((int *)v17 + 9) <= 0) {
        goto LABEL_100;
      }
    }
    *((void *)&v347 + 1) -= mach_absolute_time();
LABEL_19:
    if (*((_DWORD *)v17 + 9)) {
      goto LABEL_20;
    }
    goto LABEL_23;
  }
LABEL_100:
  float v110 = (char *)malloc_type_malloc(0x200uLL, 0x725B3E76uLL);
  uint64_t v111 = v290;
  unint64_t v112 = *(void *)v290;
  if (*(void *)v290)
  {
    uint64_t v113 = 0;
    BOOL v114 = 1;
    uint64_t v115 = *(void *)(v290 + 8);
    uint64_t v116 = 32;
    long long v117 = 0uLL;
    while (1)
    {
      uint64_t v118 = v113;
      while (1)
      {
        if (!v114)
        {
          --v118;
          float v119 = &v110[16 * v118];
          unint64_t v112 = *((void *)v119 + 1);
          uint64_t v115 = *(void *)(v111 + 8) + 160 * *(void *)v119;
        }
        if ((uint64_t)v112 > 15) {
          break;
        }
        if ((uint64_t)v112 > 1)
        {
          uint64_t v120 = v115 + 160;
          uint64_t v121 = 2;
          for (uint64_t i = 1; i != v112; ++i)
          {
            uint64_t v123 = v120;
            uint64_t v124 = v121;
            do
            {
              if ((float)(*(float *)(v115 + 160 * (v124 - 2) + 4) - *(float *)(v123 + 4)) >= 0.0) {
                break;
              }
              uint64_t v125 = (_OWORD *)(v115 + 160 * (v124 - 2));
              long long v314 = v117;
              long long v315 = v117;
              long long v313 = v117;
              long long v311 = v117;
              long long v312 = v117;
              long long v309 = v117;
              long long v310 = v117;
              long long v307 = v117;
              long long v308 = v117;
              *(_OWORD *)&info[0].numer = v117;
              long long v126 = *(_OWORD *)(v123 + 16);
              *(_OWORD *)&info[0].numer = *(_OWORD *)v123;
              long long v307 = v126;
              long long v127 = *(_OWORD *)(v123 + 32);
              long long v128 = *(_OWORD *)(v123 + 48);
              long long v129 = *(_OWORD *)(v123 + 80);
              long long v310 = *(_OWORD *)(v123 + 64);
              long long v311 = v129;
              long long v308 = v127;
              long long v309 = v128;
              long long v130 = *(_OWORD *)(v123 + 96);
              long long v131 = *(_OWORD *)(v123 + 112);
              long long v132 = *(_OWORD *)(v123 + 144);
              long long v314 = *(_OWORD *)(v123 + 128);
              long long v315 = v132;
              long long v313 = v131;
              long long v312 = v130;
              long long v133 = v125[1];
              *(_OWORD *)uint64_t v123 = *v125;
              *(_OWORD *)(v123 + 16) = v133;
              long long v134 = v125[2];
              long long v135 = v125[3];
              long long v136 = v125[5];
              *(_OWORD *)(v123 + 64) = v125[4];
              *(_OWORD *)(v123 + 80) = v136;
              *(_OWORD *)(v123 + 32) = v134;
              *(_OWORD *)(v123 + 4_Block_object_dispose(&STACK[0x220], 8) = v135;
              long long v137 = v125[6];
              long long v138 = v125[7];
              long long v139 = v125[9];
              *(_OWORD *)(v123 + 12_Block_object_dispose(&STACK[0x220], 8) = v125[8];
              *(_OWORD *)(v123 + 144) = v139;
              *(_OWORD *)(v123 + 96) = v137;
              *(_OWORD *)(v123 + 112) = v138;
              long long v140 = v307;
              *uint64_t v125 = *(_OWORD *)&info[0].numer;
              v125[1] = v140;
              long long v141 = v308;
              long long v142 = v309;
              long long v143 = v311;
              v125[4] = v310;
              v125[5] = v143;
              v125[2] = v141;
              v125[3] = v142;
              long long v144 = v312;
              long long v145 = v313;
              long long v146 = v315;
              v125[8] = v314;
              v125[9] = v146;
              v125[6] = v144;
              v125[7] = v145;
              --v124;
              v123 -= 160;
            }
            while (v124 > 1);
            ++v121;
            v120 += 160;
          }
        }
        BOOL v114 = 0;
        unint64_t v112 = 0;
        if (v118 < 1) {
          goto LABEL_169;
        }
      }
      if (v112 > 0x27) {
        break;
      }
      mach_timebase_info v147 = (mach_timebase_info)(v112 >> 1);
      float v148 = *(float *)(v115 + 160 * (v112 >> 1) + 4);
      float v149 = *(float *)(v115 + 4);
      float v150 = *(float *)(v115 + 160 * (v112 - 1) + 4);
      if ((float)(v148 - v149) >= 0.0)
      {
        if ((float)(v150 - v149) >= 0.0)
        {
          if ((float)(v150 - v148) < 0.0) {
            mach_timebase_info v147 = (mach_timebase_info)(v112 - 1);
          }
        }
        else
        {
          mach_timebase_info v147 = 0;
        }
      }
      else if ((float)(v150 - v148) >= 0.0)
      {
        if ((float)(v150 - v149) >= 0.0) {
          mach_timebase_info v147 = 0;
        }
        else {
          mach_timebase_info v147 = (mach_timebase_info)(v112 - 1);
        }
      }
LABEL_152:
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      long long v314 = v117;
      long long v315 = v117;
      long long v313 = v117;
      long long v311 = v117;
      long long v312 = v117;
      long long v309 = v117;
      long long v310 = v117;
      long long v307 = v117;
      long long v308 = v117;
      *(_OWORD *)&info[0].numer = v117;
      long long v173 = *(_OWORD *)(v115 + 16);
      *(_OWORD *)&info[0].numer = *(_OWORD *)v115;
      long long v307 = v173;
      long long v174 = *(_OWORD *)(v115 + 32);
      long long v175 = *(_OWORD *)(v115 + 48);
      long long v176 = *(_OWORD *)(v115 + 80);
      long long v310 = *(_OWORD *)(v115 + 64);
      long long v311 = v176;
      long long v308 = v174;
      long long v309 = v175;
      long long v177 = *(_OWORD *)(v115 + 96);
      long long v178 = *(_OWORD *)(v115 + 112);
      long long v179 = *(_OWORD *)(v115 + 144);
      long long v314 = *(_OWORD *)(v115 + 128);
      long long v315 = v179;
      long long v313 = v178;
      long long v312 = v177;
      uint64_t v180 = (_OWORD *)(v115 + 160 * *(void *)&v147);
      long long v181 = v180[1];
      *(_OWORD *)uint64_t v115 = *v180;
      *(_OWORD *)(v115 + 16) = v181;
      long long v182 = v180[2];
      long long v183 = v180[3];
      long long v184 = v180[5];
      *(_OWORD *)(v115 + 64) = v180[4];
      *(_OWORD *)(v115 + 80) = v184;
      *(_OWORD *)(v115 + 32) = v182;
      *(_OWORD *)(v115 + 4_Block_object_dispose(&STACK[0x220], 8) = v183;
      long long v185 = v180[6];
      long long v186 = v180[7];
      long long v187 = v180[9];
      *(_OWORD *)(v115 + 12_Block_object_dispose(&STACK[0x220], 8) = v180[8];
      *(_OWORD *)(v115 + 144) = v187;
      *(_OWORD *)(v115 + 96) = v185;
      *(_OWORD *)(v115 + 112) = v186;
      long long v188 = v307;
      *uint64_t v180 = *(_OWORD *)&info[0].numer;
      v180[1] = v188;
      long long v189 = v308;
      long long v190 = v309;
      long long v191 = v311;
      v180[4] = v310;
      v180[5] = v191;
      v180[2] = v189;
      v180[3] = v190;
      long long v192 = v312;
      long long v193 = v313;
      long long v194 = v315;
      v180[8] = v314;
      v180[9] = v194;
      v180[6] = v192;
      v180[7] = v193;
      unint64_t v195 = v112 - 1;
      uint64_t v196 = v115 + 164;
      do
      {
        if ((float)(*(float *)(v115 + 4) - *(float *)v196) <= 0.0)
        {
          ++v172;
          long long v314 = v117;
          long long v315 = v117;
          long long v313 = v117;
          long long v311 = v117;
          long long v312 = v117;
          long long v309 = v117;
          long long v310 = v117;
          long long v307 = v117;
          long long v308 = v117;
          *(_OWORD *)&info[0].numer = v117;
          long long v197 = *(_OWORD *)(v196 + 12);
          *(_OWORD *)&info[0].numer = *(_OWORD *)(v196 - 4);
          long long v307 = v197;
          long long v198 = *(_OWORD *)(v196 + 28);
          long long v199 = *(_OWORD *)(v196 + 44);
          long long v200 = *(_OWORD *)(v196 + 76);
          long long v310 = *(_OWORD *)(v196 + 60);
          long long v311 = v200;
          long long v308 = v198;
          long long v309 = v199;
          long long v201 = *(_OWORD *)(v196 + 92);
          long long v202 = *(_OWORD *)(v196 + 108);
          long long v203 = *(_OWORD *)(v196 + 140);
          long long v314 = *(_OWORD *)(v196 + 124);
          long long v315 = v203;
          long long v313 = v202;
          long long v312 = v201;
          uint64_t v204 = (long long *)(v115 + 160 * v172);
          long long v205 = *v204;
          *(_OWORD *)(v196 + 12) = v204[1];
          *(_OWORD *)(v196 - 4) = v205;
          long long v206 = v204[2];
          long long v207 = v204[3];
          long long v208 = v204[4];
          *(_OWORD *)(v196 + 76) = v204[5];
          *(_OWORD *)(v196 + 60) = v208;
          *(_OWORD *)(v196 + 44) = v207;
          *(_OWORD *)(v196 + 2_Block_object_dispose(&STACK[0x220], 8) = v206;
          long long v209 = v204[6];
          long long v210 = v204[7];
          long long v211 = v204[8];
          *(_OWORD *)(v196 + 140) = v204[9];
          *(_OWORD *)(v196 + 124) = v211;
          *(_OWORD *)(v196 + 10_Block_object_dispose(&STACK[0x220], 8) = v210;
          *(_OWORD *)(v196 + 92) = v209;
          long long v212 = v307;
          *uint64_t v204 = *(_OWORD *)&info[0].numer;
          v204[1] = v212;
          long long v213 = v308;
          long long v214 = v309;
          long long v215 = v311;
          v204[4] = v310;
          v204[5] = v215;
          v204[2] = v213;
          v204[3] = v214;
          long long v216 = v312;
          long long v217 = v313;
          long long v218 = v315;
          v204[8] = v314;
          v204[9] = v218;
          v204[6] = v216;
          v204[7] = v217;
          if ((float)(*(float *)(v115 + 4) - *(float *)v196) == 0.0)
          {
            ++v171;
            long long v314 = v117;
            long long v315 = v117;
            long long v313 = v117;
            long long v311 = v117;
            long long v312 = v117;
            long long v309 = v117;
            long long v310 = v117;
            long long v307 = v117;
            long long v308 = v117;
            *(_OWORD *)&info[0].numer = v117;
            long long v219 = v204[1];
            *(_OWORD *)&info[0].numer = *v204;
            long long v307 = v219;
            long long v220 = v204[2];
            long long v221 = v204[3];
            long long v222 = v204[5];
            long long v310 = v204[4];
            long long v311 = v222;
            long long v308 = v220;
            long long v309 = v221;
            long long v223 = v204[6];
            long long v224 = v204[7];
            long long v225 = v204[9];
            long long v314 = v204[8];
            long long v315 = v225;
            long long v313 = v224;
            long long v312 = v223;
            uint64_t v226 = (long long *)(v115 + 160 * v171);
            long long v227 = v226[1];
            *uint64_t v204 = *v226;
            v204[1] = v227;
            long long v228 = v226[2];
            long long v229 = v226[3];
            long long v230 = v226[5];
            v204[4] = v226[4];
            v204[5] = v230;
            v204[2] = v228;
            v204[3] = v229;
            long long v231 = v226[6];
            long long v232 = v226[7];
            long long v233 = v226[9];
            v204[8] = v226[8];
            v204[9] = v233;
            v204[6] = v231;
            v204[7] = v232;
            long long v234 = v307;
            *uint64_t v226 = *(_OWORD *)&info[0].numer;
            v226[1] = v234;
            long long v235 = v308;
            long long v236 = v309;
            long long v237 = v311;
            v226[4] = v310;
            v226[5] = v237;
            v226[2] = v235;
            v226[3] = v236;
            long long v238 = v312;
            long long v239 = v313;
            long long v240 = v315;
            v226[8] = v314;
            v226[9] = v240;
            v226[6] = v238;
            v226[7] = v239;
          }
        }
        v196 += 160;
        --v195;
      }
      while (v195);
      uint64_t v241 = v171 + 1;
      uint64_t v242 = 160 * v171;
      uint64_t v243 = -160 * v171 + 160 * v172;
      do
      {
        long long v314 = v117;
        long long v315 = v117;
        long long v313 = v117;
        long long v311 = v117;
        long long v312 = v117;
        long long v309 = v117;
        long long v310 = v117;
        long long v307 = v117;
        long long v308 = v117;
        *(_OWORD *)&info[0].numer = v117;
        float v244 = (_OWORD *)(v115 + v243);
        long long v245 = *(_OWORD *)(v115 + v243 + 16);
        *(_OWORD *)&info[0].numer = *(_OWORD *)(v115 + v243);
        long long v307 = v245;
        long long v246 = *(_OWORD *)(v115 + v243 + 32);
        long long v247 = *(_OWORD *)(v115 + v243 + 48);
        long long v248 = *(_OWORD *)(v115 + v243 + 80);
        long long v310 = *(_OWORD *)(v115 + v243 + 64);
        long long v311 = v248;
        long long v308 = v246;
        long long v309 = v247;
        long long v249 = *(_OWORD *)(v115 + v243 + 96);
        long long v250 = *(_OWORD *)(v115 + v243 + 112);
        long long v251 = *(_OWORD *)(v115 + v243 + 144);
        long long v314 = *(_OWORD *)(v115 + v243 + 128);
        long long v315 = v251;
        long long v313 = v250;
        long long v312 = v249;
        int v252 = (_OWORD *)(v115 + v242);
        long long v253 = *(_OWORD *)(v115 + v242 + 16);
        *float v244 = *(_OWORD *)(v115 + v242);
        v244[1] = v253;
        long long v254 = *(_OWORD *)(v115 + v242 + 32);
        long long v255 = *(_OWORD *)(v115 + v242 + 48);
        long long v256 = *(_OWORD *)(v115 + v242 + 80);
        v244[4] = *(_OWORD *)(v115 + v242 + 64);
        v244[5] = v256;
        v244[2] = v254;
        v244[3] = v255;
        long long v257 = *(_OWORD *)(v115 + v242 + 96);
        long long v258 = *(_OWORD *)(v115 + v242 + 112);
        long long v259 = *(_OWORD *)(v115 + v242 + 144);
        v244[8] = *(_OWORD *)(v115 + v242 + 128);
        v244[9] = v259;
        v244[6] = v257;
        v244[7] = v258;
        long long v260 = v307;
        *int v252 = *(_OWORD *)&info[0].numer;
        v252[1] = v260;
        long long v261 = v308;
        long long v262 = v309;
        long long v263 = v311;
        v252[4] = v310;
        v252[5] = v263;
        v252[2] = v261;
        v252[3] = v262;
        long long v264 = v312;
        long long v265 = v313;
        long long v266 = v315;
        v252[8] = v314;
        v252[9] = v266;
        v252[6] = v264;
        v252[7] = v265;
        --v241;
        v242 -= 160;
        v243 += 160;
      }
      while (v241 > 0);
      uint64_t v113 = v118 + 1;
      if (v118 + 1 >= v116)
      {
        uint64_t v267 = 2 * v116;
        float v110 = (char *)malloc_type_realloc(v110, 32 * v116, 0xEED9FCE9uLL);
        long long v117 = 0uLL;
        uint64_t v111 = v290;
        uint64_t v116 = v267;
      }
      float32x2_t v268 = &v110[16 * v118];
      *(void *)float32x2_t v268 = v172 - 0x3333333333333333 * ((v115 - *(void *)(v111 + 8)) >> 5) + 1;
      *((void *)v268 + 1) = v112 + ~v172;
      unint64_t v112 = v172 - v171;
      BOOL v114 = v172 != v171;
      float v15 = v276;
      if (v118 < 0 && !v112) {
        goto LABEL_169;
      }
    }
    uint64_t v151 = 0;
    uint64_t v152 = 0;
    if (v112 <= 0x7D0) {
      uint64_t v153 = 8;
    }
    else {
      uint64_t v153 = 26;
    }
    if (v112 <= 0x7D0) {
      unint64_t v154 = 3;
    }
    else {
      unint64_t v154 = 9;
    }
    while (1)
    {
      uint64_t v155 = (uint64_t)(v112 - 1 + v151) / v153;
      float v156 = *(float *)(v115 + 160 * v155 + 4);
      float v157 = *(float *)(v115 + 160 * (v151 / v153) + 4);
      uint64_t v158 = (uint64_t)(2 * v112 - 2 + v151) / v153;
      float v159 = *(float *)(v115 + 160 * v158 + 4);
      if ((float)(v156 - v157) >= 0.0)
      {
        if ((float)(v159 - v157) < 0.0) {
          goto LABEL_133;
        }
        if ((float)(v159 - v156) < 0.0)
        {
LABEL_135:
          info[v152] = (mach_timebase_info)v158;
          goto LABEL_127;
        }
      }
      else if ((float)(v159 - v156) >= 0.0)
      {
        if ((float)(v159 - v157) < 0.0) {
          goto LABEL_135;
        }
LABEL_133:
        info[v152] = (mach_timebase_info)(v151 / v153);
        goto LABEL_127;
      }
      info[v152] = (mach_timebase_info)v155;
LABEL_127:
      ++v152;
      v151 += 3 * v112 - 3;
      if (v154 == v152)
      {
        while (1)
        {
          uint64_t v160 = 0;
          unint64_t v161 = 0;
          unint64_t v162 = v154;
          v154 /= 3uLL;
          if (v154 <= 1) {
            uint64_t v163 = 1;
          }
          else {
            uint64_t v163 = v154;
          }
          uint64_t v164 = 8 * v163;
          do
          {
            mach_timebase_info v165 = info[v160];
            mach_timebase_info v166 = info[v160 + 1];
            mach_timebase_info v167 = info[v160 + 2];
            float v168 = *(float *)(v115 + 160 * *(void *)&v166 + 4);
            float v169 = *(float *)(v115 + 160 * *(void *)&v165 + 4);
            float v170 = *(float *)(v115 + 160 * *(void *)&v167 + 4);
            if ((float)(v168 - v169) >= 0.0)
            {
              if ((float)(v170 - v169) < 0.0) {
                goto LABEL_148;
              }
              if ((float)(v170 - v168) >= 0.0)
              {
LABEL_141:
                info[v161 / 8] = v166;
                goto LABEL_142;
              }
            }
            else
            {
              if ((float)(v170 - v168) < 0.0) {
                goto LABEL_141;
              }
              if ((float)(v170 - v169) >= 0.0)
              {
LABEL_148:
                info[v161 / 8] = v165;
                goto LABEL_142;
              }
            }
            info[v161 / 8] = v167;
LABEL_142:
            v161 += 8;
            v160 += 3;
          }
          while (v164 != v161);
          if (v162 < 9)
          {
            mach_timebase_info v147 = info[0];
            goto LABEL_152;
          }
        }
      }
    }
  }
LABEL_169:
  free(v110);
  if (*v277) {
    free(*v277);
  }
  if (*((_DWORD *)v277 + 8)) {
    free(v277[2]);
  }
  free(v277);
  free(v15);
  free(v293);
  return 0;
}

uint64_t vl_timer_stop(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 212))
  {
    uint64_t result = mach_absolute_time();
    *(void *)(a1 + 120) += result;
  }
  else
  {
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a1 + 64));
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a1 + 80));
    uint64_t result = clock_gettime(_CLOCK_MONOTONIC, (timespec *)(a1 + 48));
    uint64_t v3 = *(void *)(a1 + 56) - *(void *)(a1 + 8) + 1000000000 * (*(void *)(a1 + 48) - *(void *)a1);
    uint64_t v4 = *(void *)(a1 + 72) - *(void *)(a1 + 24) + 1000000000 * (*(void *)(a1 + 64) - *(void *)(a1 + 16));
    uint64_t v5 = *(void *)(a1 + 88) - *(void *)(a1 + 40) + 1000000000 * (*(void *)(a1 + 80) - *(void *)(a1 + 32));
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = v3 + *(void *)(a1 + 120);
    *(void *)(a1 + 96) = v3;
    *(void *)(a1 + 104) = v4;
    uint64_t v8 = v4 + v6;
    *(void *)(a1 + 112) = v5;
    *(void *)(a1 + 120) = v7;
    uint64_t v9 = v5 + *(void *)(a1 + 136);
    *(void *)(a1 + 12_Block_object_dispose(&STACK[0x220], 8) = v8;
    *(void *)(a1 + 136) = v9;
    ++*(_DWORD *)(a1 + 144);
  }
  return result;
}

uint64_t vl_ps_cell_vote(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  if ((int)result <= 0) {
    int v4 = -(-(int)result & 3);
  }
  else {
    int v4 = result & 3;
  }
  unint64_t v5 = (result - v4);
  LODWORD(a4) = *(_DWORD *)a2;
  if ((int)v5 < 1)
  {
    LODWORD(v6) = 0;
    if ((int)result <= 0) {
      return result;
    }
  }
  else
  {
    unint64_t v6 = 0;
    float32x4_t v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    __asm { FMOV            V2.4S, #1.0 }
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x3E2AAAABu);
    float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x3D99999Au);
    __asm { FMOV            V6.4S, #-1.0 }
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0xBC996E30);
    float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x3D981627u);
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0xBE593484);
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3FC90DA4u);
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
    v21.i64[0] = 0x8000000080000000;
    v21.i64[1] = 0x8000000080000000;
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x42A2F983u);
    v23.i64[0] = 0x4400000044000000;
    v23.i64[1] = 0x4400000044000000;
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x44004000u);
    uint64_t v25 = *(float32x4_t **)(a2 + 72);
    unint64_t v26 = *(int8x16_t **)(a2 + 80);
    v27.i64[0] = 0x100000001;
    v27.i64[1] = 0x100000001;
    v28.i64[0] = 0x100000001;
    v28.i64[1] = 0x100000001;
    do
    {
      float32x4_t v29 = *v25++;
      float32x4_t v30 = v29;
      int8x16_t v31 = *v26++;
      float32x4_t v32 = vmulq_f32(v30, v30);
      float32x4_t v33 = vmulq_f32(v30, v32);
      float32x4_t v34 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v31 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), _Q6), _Q6), _Q2);
      float32x4_t v35 = vabsq_f32(v34);
      int8x16_t v36 = (int8x16_t)vclezq_f32(v34);
      float32x4_t v37 = vmulq_f32(vsqrtq_f32(vsubq_f32(_Q2, v35)), vmlaq_f32(v19, v35, vmlaq_f32(v18, v35, vmlaq_f32(v17, v16, v35))));
      float32x4_t v38 = (float32x4_t)vbslq_s8(vcltzq_s8((int8x16_t)vcgtq_f32(v30, _Q2)), (int8x16_t)xmmword_21BB7A800, (int8x16_t)vaddq_f32(v30, vaddq_f32(vmulq_f32(v33, v13), vmulq_f32(vmulq_f32(v32, v33), v14))));
      float32x4_t v39 = vaddq_f32(v7, vmulq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v20, v36), vsubq_f32(v37, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(v37, v37), v36))), (float32x4_t)vorrq_s8(vandq_s8(v31, v21), (int8x16_t)_Q2)));
      int32x4_t v40 = (int32x4_t)vandq_s8((int8x16_t)vcvtq_s32_f32(vaddq_f32(vmulq_f32(vsubq_f32(v39, v38), v22), v23)), v27);
      int32x4_t v41 = (int32x4_t)vandq_s8((int8x16_t)vcvtq_s32_f32(vaddq_f32(vmulq_f32(vaddq_f32(v39, v38), v22), v24)), v27);
      int8x16_t v42 = vorrq_s8(vbicq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v40, (uint32x4_t)v41), (int8x16_t)vceqzq_s32(v41)), vorrq_s8((int8x16_t)vceqzq_s32(v40), (int8x16_t)vceqq_f32(v38, v20)));
      ++*(_WORD *)(a3 + 2 * v40.u32[0]);
      int8x16_t v43 = vbslq_s8(vcltzq_s8(v42), (int8x16_t)vminq_s32(v40, v41), (int8x16_t)v41);
      ++*(_WORD *)(a3 + 2 * v40.u32[1]);
      ++*(_WORD *)(a3 + 2 * v40.u32[2]);
      ++*(_WORD *)(a3 + 2 * v40.u32[3]);
      --*(_WORD *)(a3 + 2 * v43.i32[0]);
      --*(_WORD *)(a3 + 2 * v43.i32[1]);
      --*(_WORD *)(a3 + 2 * v43.i32[2]);
      --*(_WORD *)(a3 + 2 * v43.i32[3]);
      int32x4_t v44 = (int32x4_t)vandq_s8(v42, v28);
      int32x4_t v45 = vpaddq_s32(v44, v44);
      *(_WORD *)(a3 + 1024) += vpaddq_s32(v45, v45).u16[0];
      v6 += 4;
    }
    while (v6 < v5);
    if ((int)v6 >= (int)result) {
      return result;
    }
  }
  uint64_t v46 = *(void *)(a2 + 72);
  unint64_t v6 = (int)v6;
  uint64_t v47 = (int)result;
  int v48 = *(unsigned __int16 *)(a3 + 1024);
  uint64_t result = 1078530011;
  do
  {
    while (1)
    {
      float v65 = *(float *)(v46 + 4 * v6);
      if (v65 < 1.0) {
        break;
      }
      ++v48;
      if (v47 == ++v6) {
        goto LABEL_32;
      }
    }
    float v49 = *(float *)(*(void *)(a2 + 80) + 4 * v6);
    float v50 = (float)(v65 + (float)((float)(v65 * (float)(v65 * v65)) * 0.16667))
        + (float)((float)((float)(v65 * v65) * (float)(v65 * (float)(v65 * v65))) * 0.075);
    float v51 = fabsf(v49) + -1.0;
    if (v51 <= 1.0) {
      float v52 = v51;
    }
    else {
      float v52 = 1.0;
    }
    if (v51 >= -1.0) {
      float v53 = v52;
    }
    else {
      float v53 = -1.0;
    }
    if (v49 <= 0.0) {
      float v54 = -1.0;
    }
    else {
      float v54 = 1.0;
    }
    if (v53 >= 0.0) {
      float v55 = 0.0;
    }
    else {
      float v55 = 1.0;
    }
    float v56 = fabsf(v53);
    float v57 = (float)(v56 * (float)((float)(v56 * (float)((float)(v56 * -0.018729) + 0.074261)) + -0.21211)) + 1.5707;
    float v58 = sqrtf(1.0 - v56);
    float v59 = *(float *)&a4
        + (float)(v54
                * (float)((float)((float)(v58 * v57) + (float)((float)(v55 * -2.0) * (float)(v58 * v57)))
                        + (float)(v55 * 3.1416)));
    __int16 v60 = vcvtms_s32_f32((float)(v59 - v50) * 81.487);
    unsigned int v61 = vcvtms_s32_f32((float)((float)(v50 + v59) * 81.487) + 1.0) & 0x1FF;
    BOOL v62 = v61 < (v60 & 0x1FFu) && v61 != 0;
    unsigned int v63 = v60 & 0x1FF;
    int v64 = (v60 & 0x1FF) == 0 || v62;
    ++*(_WORD *)(a3 + 2 * v63);
    --*(_WORD *)(a3 + 2 * v61);
    v48 += v64;
    ++v6;
  }
  while (v47 != v6);
LABEL_32:
  *(_WORD *)(a3 + 1024) = v48;
  return result;
}

void vl_ps_vote(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(int *)(a3 + 4);
  if (*(_DWORD *)(a5 + 64)) {
    float v9 = *(float *)(*(void *)(a2 + 144) + 252);
  }
  else {
    float v9 = 0.0;
  }
  uint64_t v10 = (int64x2_t *)malloc_type_malloc(0x402uLL, 0x100004040BEE09CuLL);
  uint64_t v39 = (uint64_t)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
  if ((v39 & 0xF) != 0) {
    __assert_rtn("vl_ps_vote", "vl_pose_ps.c", 1072, "((size_t) flg) % 16 == 0");
  }
  if ((uint64_t)a1[6] >= 1)
  {
    int64_t v11 = 0;
    int32x4_t v40 = (timespec *)(a4 + 432);
    do
    {
      unint64_t v15 = a1[7];
      uint64_t v16 = *(void *)(a1[4] + 8 * (v11 / v15));
      if (*(_DWORD *)(a4 + 212))
      {
        *(void *)(a4 + 120) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a4 + 32));
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a4 + 16));
        clock_gettime(_CLOCK_MONOTONIC, (timespec *)a4);
      }
      unint64_t v18 = v11 % v15;
      LODWORD(v17) = *(_DWORD *)(a5 + 136);
      uint64_t v19 = vl_ps_filter_corr((float *)(v16 + 52 * v18), a3, a3, v39, v9, v17);
      vl_timer_stop(a4);
      if (*(_DWORD *)(a4 + 428))
      {
        *(void *)(a4 + 336) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a4 + 248));
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a4 + 232));
        clock_gettime(_CLOCK_MONOTONIC, (timespec *)(a4 + 216));
      }
      bzero(v10, 0x402uLL);
      vl_ps_cell_vote(v19, a3, (uint64_t)v10, v20);
      vl_timer_stop(a4 + 216);
      if (*(_DWORD *)(a4 + 644))
      {
        *(void *)(a4 + 552) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a4 + 464));
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a4 + 448));
        clock_gettime(_CLOCK_MONOTONIC, v40);
      }
      v10->i16[0] = v10[64].i16[0];
      int16x8_t v21 = 0uLL;
      unsigned int v22 = -8;
      float32x4_t v23 = v10;
      int8x16_t v24 = 0uLL;
      int16x8_t v25 = (int16x8_t)xmmword_21BB7A7D0;
      int16x8_t v26 = 0uLL;
      v27.i64[0] = 0x8000800080008;
      v27.i64[1] = 0x8000800080008;
      v28.i64[0] = 0xFFFF0000FFFF0000;
      v28.i64[1] = 0xFFFF0000FFFF0000;
      v29.i64[0] = 0xFFFFFFFF00000000;
      v29.i64[1] = 0xFFFFFFFF00000000;
      v30.i64[0] = 0xFFFF0000FFFFLL;
      v30.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        int16x8_t v31 = *(int16x8_t *)v23;
        if (vorrq_s8((int8x16_t)vdupq_laneq_s64(*v23, 1), *(int8x16_t *)v23).u64[0])
        {
          int16x8_t v32 = vaddq_s16(v31, (int16x8_t)vqtbl1q_s8((int8x16_t)v31, (int8x16_t)xmmword_21BB7A7E0));
          *(int32x2_t *)v33.i8 = vrev64_s32(*(int32x2_t *)v32.i8);
          v33.u64[1] = (unint64_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL));
          int16x8_t v34 = vaddq_s16(v32, v33);
          int16x8_t v35 = (int16x8_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL);
          int16x8_t v36 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)v31, v30), v26), (int16x8_t)vandq_s8((int8x16_t)v32, v28)), (int16x8_t)vandq_s8((int8x16_t)v33, v29)), (int16x8_t)vandq_s8((int8x16_t)v35, (int8x16_t)xmmword_21BB7A7F0));
          int16x8_t v26 = vaddq_s16(vaddq_s16(v34, v26), v35);
          int8x16_t v37 = (int8x16_t)vcgtq_s16(v36, v21);
          int16x8_t v21 = vmaxq_s16(v36, v21);
          int8x16_t v24 = vbslq_s8(v37, (int8x16_t)v25, v24);
        }
        int16x8_t v25 = vaddq_s16(v25, v27);
        ++v23;
        v22 += 8;
      }
      while (v22 < 0x1F8);
      uint64_t v12 = v16 + 52 * v18;
      int8x16_t v42 = v24;
      int16x8_t v41 = v21;
      uint64_t v13 = 2;
      if (*(unsigned __int16 *)((unint64_t)&v41 | (2 * (v21.u16[1] > v21.u16[0]))) >= v21.u16[2]) {
        uint64_t v13 = v21.u16[1] > v21.u16[0];
      }
      if (*(unsigned __int16 *)((unint64_t)&v41 | (2 * v13)) < v21.u16[3]) {
        uint64_t v13 = 3;
      }
      if (*(unsigned __int16 *)((unint64_t)&v41 | (2 * v13)) < v21.u16[4]) {
        uint64_t v13 = 4;
      }
      if (*(unsigned __int16 *)((unint64_t)&v41 | (2 * v13)) < v21.u16[5]) {
        uint64_t v13 = 5;
      }
      if (*(unsigned __int16 *)((unint64_t)&v41 | (2 * v13)) < v21.u16[6]) {
        uint64_t v13 = 6;
      }
      if (v41.u16[v13] < v21.u16[7]) {
        uint64_t v13 = 7;
      }
      uint64_t v14 = v13;
      *(_WORD *)(v12 + 4_Block_object_dispose(&STACK[0x220], 8) = v42.i16[v14];
      *(_WORD *)(v12 + 44) = v41.i16[v14];
      vl_timer_stop((uint64_t)v40);
      ++v11;
    }
    while (a1[6] > v11);
  }
  free(v10);
  free((void *)v39);
}

void vl_stats_get(uint64_t a1, void **a2)
{
  float v2 = a2;
  uint64_t v3 = a1;
  if (*(_DWORD *)(a1 + 976))
  {
    v747.__darwin_time_t tv_sec = 0;
    *(void *)&v747.uint64_t tv_usec = 0;
    if (gettimeofday(&v747, 0) || (double)(v747.tv_usec + 1000000 * v747.tv_sec) / 1000000.0 <= 1514764800.0) {
      goto LABEL_488;
    }
    size_t __n = v747.tv_usec + 1000000 * v747.tv_sec;
    float v713 = (pthread_mutex_t *)(v3 + 11664);
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 11664));
    if (*(_DWORD *)(v3 + 4) == 1) {
      int v4 = 64;
    }
    else {
      int v4 = 256;
    }
    int64_t v5 = *(unsigned int *)(v3 + 988);
    uint64_t v6 = *(void *)(v3 + 11736);
    if ((v5 & 0x80000000) != 0)
    {
      if (v6 < 1)
      {
        int v130 = 0;
        LODWORD(v42) = 0;
        float v720 = 0;
        uint64_t v131 = 0;
        int v132 = 0;
        int v133 = 0;
        goto LABEL_282;
      }
      int16x8_t v41 = *(const void **)(v3 + 11744);
      uint64_t v12 = (double *)malloc_type_realloc(0, 864 * v6, 0x7BF64200uLL);
      float v2 = a2;
      memcpy(v12, v41, 864 * *(void *)(v3 + 11736));
      uint64_t v42 = *(void *)(v3 + 11736);
    }
    else
    {
      uint64_t v7 = (v6 - 2);
      if ((int)v6 - 2 >= 0)
      {
        uint64_t v8 = (_DWORD *)(*(void *)(v3 + 11744) + 864 * v7 + 4);
        while (!*v8)
        {
          v8 -= 216;
          if (v7-- <= 0)
          {
            LODWORD(v7) = -1;
            break;
          }
        }
      }
      if (v6 < 1)
      {
        uint64_t v42 = 0;
        uint64_t v12 = 0;
      }
      else
      {
        int v730 = v4;
        uint64_t v10 = 0;
        int64_t v11 = 0;
        uint64_t v12 = 0;
        int64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = (int)v7;
        do
        {
          if (v14 > v15)
          {
            uint64_t v16 = *(void *)(a1 + 11744);
            if (v11 >= v13)
            {
              if (2 * v13 <= v11) {
                int64_t v13 = v11 + 1;
              }
              else {
                v13 *= 2;
              }
              if (v13) {
                uint64_t v12 = (double *)malloc_type_realloc(v12, 864 * v13, 0x21180E1BuLL);
              }
            }
            memcpy(&v12[108 * v11], (const void *)(v16 + v10), 0x360uLL);
            uint64_t v6 = *(void *)(a1 + 11736);
            ++v11;
            float v2 = a2;
          }
          ++v14;
          v10 += 864;
        }
        while (v14 < v6);
        if (v11 <= v5)
        {
          uint64_t v42 = v11;
          uint64_t v3 = a1;
        }
        else
        {
          int16x8_t v21 = (unsigned __int8 *)malloc_type_calloc(v11, 1uLL, 0x100004077774924uLL);
          v21[v11 - 1] = 1;
          *int16x8_t v21 = 1;
          if ((int)v5 >= 3)
          {
            int v22 = 2;
            do
            {
              uint64_t v23 = 0;
              unsigned int v24 = -1;
              float v25 = -INFINITY;
              do
              {
                if (!v21[v23])
                {
                  int16x8_t v27 = &v12[108 * v23];
                  int8x16_t v28 = v27 + 2;
                  int8x16_t v29 = v27 + 5;
                  int8x16_t v30 = v27 + 8;
                  float v31 = INFINITY;
                  int16x8_t v32 = v21;
                  int16x8_t v33 = v12 + 5;
                  int64_t v34 = v11;
                  do
                  {
                    if (*v32++)
                    {
                      double v36 = *(v33 - 3);
                      float v37 = 1.0
                          - (*v29 * *v33 + *v28 * v36 + *v30 * v33[3])
                          / (sqrt((*v29 * *v29 + *v28 * *v28 + *v30 * *v30) * (*v33 * *v33 + v36 * v36 + v33[3] * v33[3]))
                           + 1.0e-20);
                      if (v31 > v37) {
                        float v31 = v37;
                      }
                    }
                    v33 += 108;
                    --v34;
                  }
                  while (v34);
                  BOOL v26 = v31 > v25 || v24 == -1;
                  if (v26)
                  {
                    float v25 = v31;
                    unsigned int v24 = v23;
                  }
                }
                ++v23;
              }
              while (v23 != v11);
              if ((v24 & 0x80000000) != 0) {
                __assert_rtn("vl_stats_pick_frames", "vl_stats.c", 273, "best_frame >= 0");
              }
              v21[v24] = 1;
              ++v22;
            }
            while (v22 != v5);
          }
          uint64_t v38 = 0;
          if (v12)
          {
            int64_t v39 = 0;
            int32x4_t v40 = v12;
            uint64_t v3 = a1;
            do
            {
              if (v21[v39]) {
                memcpy(&v12[108 * v38++], v40, 0x360uLL);
              }
              ++v39;
              v40 += 108;
            }
            while (v39 < v11);
          }
          else
          {
            uint64_t v3 = a1;
          }
          float v2 = a2;
          if (v38 > v13)
          {
            uint64_t v354 = 2 * v13;
            if (2 * v13 <= v38) {
              uint64_t v354 = v38;
            }
            if (v354) {
              uint64_t v12 = (double *)malloc_type_realloc(v12, 864 * v354, 0x7B494C7BuLL);
            }
          }
          if (v38 > v11) {
            bzero(&v12[108 * v11], 864 * (v38 - v11));
          }
          free(v21);
          uint64_t v42 = v38;
        }
        int v4 = v730;
      }
      if (v42 > *(int *)(v3 + 988)) {
        __assert_rtn("vl_stats_get_from_history", "vl_stats.c", 440, "da_size(&frames) <= vl->par.history.stats_max_frames");
      }
    }
    float v720 = v12;
    if (v42 < 1)
    {
      int v130 = 0;
      int v132 = 0;
      int v133 = 0;
LABEL_281:
      uint64_t v131 = v42;
LABEL_282:
      uint64_t v732 = v131;
      int v724 = v42;
      v2[62] = 0;
      *((_OWORD *)v2 + 29) = 0u;
      *((_OWORD *)v2 + 30) = 0u;
      *((_OWORD *)v2 + 27) = 0u;
      *((_OWORD *)v2 + 2_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *((_OWORD *)v2 + 25) = 0u;
      *((_OWORD *)v2 + 26) = 0u;
      *((_OWORD *)v2 + 23) = 0u;
      *((_OWORD *)v2 + 24) = 0u;
      *((_OWORD *)v2 + 21) = 0u;
      *((_OWORD *)v2 + 22) = 0u;
      *((_OWORD *)v2 + 19) = 0u;
      *((_OWORD *)v2 + 20) = 0u;
      *((_OWORD *)v2 + 17) = 0u;
      *((_OWORD *)v2 + 1_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *((_OWORD *)v2 + 15) = 0u;
      *((_OWORD *)v2 + 16) = 0u;
      *((_OWORD *)v2 + 13) = 0u;
      *((_OWORD *)v2 + 14) = 0u;
      *((_OWORD *)v2 + 11) = 0u;
      *((_OWORD *)v2 + 12) = 0u;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 7) = 0u;
      *((_OWORD *)v2 + _Block_object_dispose(&STACK[0x220], 8) = 0u;
      *((_OWORD *)v2 + 5) = 0u;
      *((_OWORD *)v2 + 6) = 0u;
      *((_OWORD *)v2 + 3) = 0u;
      *((_OWORD *)v2 + 4) = 0u;
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *(_OWORD *)float v2 = 0u;
      *(void **)((char *)v2 + 92) = 0;
      *((_DWORD *)v2 + 25) = 0;
      *((_DWORD *)v2 + 22) = v133;
      *((_DWORD *)v2 + 34) = v42;
      *((_DWORD *)v2 + 73) = v132;
      *((_DWORD *)v2 + 52) = v4;
      a2[10] = 0;
      *a2 = malloc_type_malloc(24 * v133, 0x100004000313F17uLL);
      a2[1] = malloc_type_malloc(8 * v133, 0x100004052888210uLL);
      a2[2] = malloc_type_malloc(4 * v133, 0x100004052888210uLL);
      a2[3] = malloc_type_malloc(2 * (int)v131, 0x1000040BDFB0063uLL);
      a2[4] = malloc_type_malloc(2 * v133, 0x1000040BDFB0063uLL);
      a2[8] = malloc_type_malloc(0, 0x100004052888210uLL);
      a2[9] = malloc_type_malloc(0, 0x100004052888210uLL);
      a2[13] = malloc_type_malloc(16 * (int)v131, 0x1000040451B5BE8uLL);
      a2[14] = malloc_type_calloc(16 * (int)v42, 1uLL, 0x100004077774924uLL);
      a2[15] = malloc_type_malloc(248 * (int)v131, 0x10000409B83B951uLL);
      a2[16] = malloc_type_malloc(4 * (int)v131, 0x100004052888210uLL);
      a2[30] = malloc_type_malloc((uint64_t)((unint64_t)(3 * v131) << 34) >> 30, 0x100004052888210uLL);
      a2[31] = malloc_type_malloc(8 * (int)v131, 0x100004000313F17uLL);
      a2[24] = malloc_type_malloc(12 * v132, 0x100004052888210uLL);
      a2[29] = malloc_type_malloc(4 * v132, 0x100004052888210uLL);
      a2[25] = malloc_type_malloc(*((int *)a2 + 52) * (uint64_t)v132, 0x100004077774924uLL);
      float v368 = a2;
      a2[27] = malloc_type_malloc(8 * v132, 0x100004052888210uLL);
      a2[28] = malloc_type_malloc(4 * v132, 0x100004052888210uLL);
      a2[32] = malloc_type_malloc(4 * (int)v131, 0x100004052888210uLL);
      a2[33] = malloc_type_malloc((uint64_t)((unint64_t)(3 * v131) << 34) >> 30, 0x100004052888210uLL);
      a2[34] = malloc_type_malloc(36 * v131, 0x100004052888210uLL);
      a2[35] = malloc_type_malloc(8 * v42, 0x100004052888210uLL);
      if (v131)
      {
        float v369 = v720;
        *((_DWORD *)a2 + 72) = *((_DWORD *)&v720[108 * v131 - 107] - 1) != 0;
        if (v130)
        {
          float v370 = v720 + 1;
          uint64_t v371 = v131;
          while (*v370 != 1)
          {
            v370 += 216;
            if (!--v371) {
              goto LABEL_287;
            }
          }
          *((_DWORD *)a2 + 13) = 1;
          uint64_t v372 = v131;
          uint64_t v718 = v131;
          if ((int)v42 >= 1) {
            goto LABEL_292;
          }
LABEL_343:
          long long v751 = 0u;
          long long v752 = 0u;
          long long v749 = 0u;
          long long v750 = 0u;
          timeval v747 = (timeval)0;
          long long v748 = 0u;
          if (v372)
          {
            double v486 = (int *)&v369[108 * v372 - 107];
            uint64_t v487 = v372;
            while ((int)v487 >= 1)
            {
              --v487;
              int v488 = *v486;
              v486 -= 216;
              if (v488 == 1) {
                goto LABEL_352;
              }
            }
            uint64_t v487 = v732 - 1;
LABEL_352:
            v489 = &v369[108 * v487];
            v490 = (void *)*((void *)v489 + 11);
            *((void *)&v751 + 1) = v490;
            uint64_t v491 = (void *)*((void *)v489 + 12);
            *(void *)&long long v752 = v491;
            v492 = (void *)*((void *)v489 + 13);
            *((void *)&v752 + 1) = v492;
            __darwin_time_t v494 = *((void *)v489 + 2);
            float v493 = v489 + 2;
            v747.__darwin_time_t tv_sec = v494;
            *((void *)&v748 + 1) = v493[3];
            *(void *)&long long v750 = v493[6];
            *(void *)&v747.uint64_t tv_usec = v493[1];
            *(void *)&long long v749 = v493[4];
            *((void *)&v750 + 1) = v493[7];
            *(void *)&long long v748 = v493[2];
            *((void *)&v749 + 1) = v493[5];
            *(void *)&long long v751 = v493[8];
            double v495 = *((double *)v493 + 6);
            if (fabs(v495) >= 1.0)
            {
              long double v499 = *((double *)v493 + 1);
              if (*((double *)v493 + 6) <= -1.0)
              {
                long double v501 = atan2(v499, *((long double *)v493 + 2));
                float v368 = a2;
                a2[18] = v490;
                a2[19] = v491;
                a2[20] = v492;
                a2[21] = 0;
                a2[22] = (void *)0x3FF921FB54442D18;
                *((long double *)a2 + 23) = v501 + 0.0;
                if (v724 < 1) {
                  goto LABEL_349;
                }
              }
              else
              {
                long double v500 = atan2(-v499, -*((double *)v493 + 2));
                float v368 = a2;
                a2[18] = v490;
                a2[19] = v491;
                a2[20] = v492;
                a2[21] = 0;
                a2[22] = (void *)0xBFF921FB54442D18;
                *((long double *)a2 + 23) = v500;
                if (v724 < 1)
                {
LABEL_349:
                  if (*((_DWORD *)v368 + 73)) {
                    goto LABEL_492;
                  }
                  goto LABEL_368;
                }
              }
            }
            else
            {
              long double v496 = asin(-v495);
              long double v497 = atan2(*((long double *)v493 + 3), *(long double *)v493);
              long double v498 = atan2(*((long double *)v493 + 7), *((long double *)v493 + 8));
              float v368 = a2;
              a2[18] = v490;
              a2[19] = v491;
              a2[20] = v492;
              *((long double *)a2 + 21) = v497;
              *((long double *)a2 + 22) = v496;
              *((long double *)a2 + 23) = v498;
              if (v724 < 1) {
                goto LABEL_349;
              }
            }
          }
          else
          {
            v368[18] = 0;
            v368[19] = 0;
            v368[20] = 0;
            v368[21] = 0;
            v368[22] = 0;
            v368[23] = 0;
            if (v724 < 1) {
              goto LABEL_349;
            }
          }
          uint64_t v502 = 0;
          int v503 = 0;
          do
          {
            float v504 = &v369[108 * v502];
            *((double *)v368[31] + v502) = v504[68];
            long long v745 = 0u;
            long long v746 = 0u;
            long long v743 = 0u;
            long long v744 = 0u;
            *(_OWORD *)&info[0].numer = 0u;
            long long v742 = 0u;
            float64x2_t v739 = 0u;
            float64x2_t v740 = 0u;
            float64x2_t v737 = 0u;
            float64x2_t v738 = 0u;
            *(_OWORD *)__s = 0u;
            float64x2_t v736 = 0u;
            *((double *)&v745 + 1) = v504[11];
            long long v746 = *((_OWORD *)v504 + 6);
            info[0] = (mach_timebase_info)v504[2];
            *((double *)&v742 + 1) = v504[5];
            *(double *)&long long v744 = v504[8];
            info[1] = (mach_timebase_info)v504[3];
            *(double *)&long long v743 = v504[6];
            *((double *)&v744 + 1) = v504[9];
            *(double *)&long long v742 = v504[4];
            *((double *)&v743 + 1) = v504[7];
            *(double *)&long long v745 = v504[10];
            g_coords_diff((double *)info, (double *)&v747.tv_sec, (uint64_t)__s);
            v505 = (float32x4_t *)((char *)v368[30] + 4 * (12 * v502));
            float32x4_t *v505 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)__s), v736);
            v505[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v737), v738);
            v505[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v739), v740);
            if (*((uint64_t *)v504 + 78) >= 1)
            {
              uint64_t v506 = 0;
              uint64_t v507 = 0;
              float v733 = v504 + 78;
              v508 = &v369[108 * v502 + 79];
              uint64_t v509 = v502;
              uint64_t v510 = v503;
              uint64_t v511 = 2 * v503;
              int v725 = v503;
              int v512 = 2 * v503;
              float v513 = v368;
              uint64_t v514 = 4 * (v511 + v510);
              do
              {
                float v515 = (_DWORD *)(*(void *)v508 + v506);
                uint64_t v516 = (uint64_t)v513[24] + v514;
                *(void *)uint64_t v516 = 0;
                *(_DWORD *)(v516 + _Block_object_dispose(&STACK[0x220], 8) = 0;
                memcpy((char *)v513[25] + (v510 + v507) * *((int *)v513 + 52), v515 + 8, *((int *)v513 + 52));
                uint64_t v517 = 2 * v507;
                *(_WORD *)((char *)v513[29] + v511 + v517) = 1;
                double v518 = v513[27];
                v518[v512] = *v515;
                v518[v512 + 1] = v515[1];
                *(_WORD *)((char *)v513[28] + v511 + v517) = v509;
                ++v507;
                v512 += 2;
                v514 += 12;
                v506 += 288;
              }
              while (*v733 > v507);
              uint64_t v3 = a1;
              int v503 = v725 + v507;
              float v368 = v513;
              uint64_t v372 = v718;
              float v369 = v720;
              uint64_t v502 = v509;
            }
            ++v502;
          }
          while (v502 != v372);
          if (v503 != *((_DWORD *)v368 + 73)) {
LABEL_492:
          }
            __assert_rtn("vl_stats_get_from_history_frames", "vl_stats.c", 397, "n_tracks == vl_stats->num_slam_pt3s");
          uint64_t v519 = 0;
          uint64_t v520 = 0;
          uint64_t v521 = 0;
          float v522 = (_DWORD *)v369 + 155;
          do
          {
            *((_DWORD *)v368[32] + v521) = *v522;
            float v523 = (char *)v368[33] + v519;
            long long v524 = *((_OWORD *)v522 - 3);
            long long v525 = *((_OWORD *)v522 - 1);
            v523[1] = *((_OWORD *)v522 - 2);
            v523[2] = v525;
            *float v523 = v524;
            uint64_t v526 = (uint64_t)v368[34] + 4 * v520;
            long long v527 = *(_OWORD *)(v522 - 41);
            long long v528 = *(_OWORD *)(v522 - 37);
            *(_DWORD *)(v526 + 32) = *(v522 - 33);
            *(_OWORD *)uint64_t v526 = v527;
            *(_OWORD *)(v526 + 16) = v528;
            *((void *)v368[35] + v521++) = *((void *)v522 - 16);
            v520 += 9;
            v519 += 48;
            v522 += 216;
          }
          while (v372 != v521);
LABEL_368:
          free(v369);
          *((_DWORD *)v368 + 10) = *(_DWORD *)(v3 + 1256);
          *((_DWORD *)v368 + 11) = *(_DWORD *)(v3 + 1260);
          *((_DWORD *)v368 + 12) = *(_DWORD *)(v3 + 1264);
          if (*(_DWORD *)(v3 + 3076))
          {
            uint64_t v529 = *(void *)(v3 + 2984);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v530 = v529 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v531) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 3_Block_object_dispose(&STACK[0x220], 8) = (double)v530 / ((double)v531 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 3292)) {
              goto LABEL_370;
            }
          }
          else
          {
            *((double *)v368 + 3_Block_object_dispose(&STACK[0x220], 8) = (double)*(uint64_t *)(v3 + 2976) * 0.000000001;
            if (*(_DWORD *)(v3 + 3292))
            {
LABEL_370:
              uint64_t v532 = *(void *)(v3 + 3200);
              v747.__darwin_time_t tv_sec = 0;
              mach_timebase_info((mach_timebase_info_t)&v747);
              uint64_t v533 = v532 * LODWORD(v747.tv_sec);
              float v368 = a2;
              LODWORD(v534) = HIDWORD(v747.tv_sec);
              *((double *)a2 + 39) = (double)v533 / ((double)v534 * 1000000.0) * 0.001;
              if (*(_DWORD *)(v3 + 3508)) {
                goto LABEL_371;
              }
              goto LABEL_401;
            }
          }
          *((double *)v368 + 39) = (double)*(uint64_t *)(v3 + 3192) * 0.000000001;
          if (*(_DWORD *)(v3 + 3508))
          {
LABEL_371:
            uint64_t v535 = *(void *)(v3 + 3416);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v536 = v535 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v537) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 40) = (double)v536 / ((double)v537 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 3724)) {
              goto LABEL_372;
            }
            goto LABEL_402;
          }
LABEL_401:
          *((double *)v368 + 40) = (double)*(uint64_t *)(v3 + 3408) * 0.000000001;
          if (*(_DWORD *)(v3 + 3724))
          {
LABEL_372:
            uint64_t v538 = *(void *)(v3 + 3632);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v539 = v538 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v540) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 41) = (double)v539 / ((double)v540 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 3940)) {
              goto LABEL_373;
            }
            goto LABEL_403;
          }
LABEL_402:
          *((double *)v368 + 41) = (double)*(uint64_t *)(v3 + 3624) * 0.000000001;
          if (*(_DWORD *)(v3 + 3940))
          {
LABEL_373:
            uint64_t v541 = *(void *)(v3 + 3848);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v542 = v541 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v543) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 42) = (double)v542 / ((double)v543 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 4156)) {
              goto LABEL_374;
            }
            goto LABEL_404;
          }
LABEL_403:
          *((double *)v368 + 42) = (double)*(uint64_t *)(v3 + 3840) * 0.000000001;
          if (*(_DWORD *)(v3 + 4156))
          {
LABEL_374:
            uint64_t v544 = *(void *)(v3 + 4064);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v545 = v544 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v546) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 45) = (double)v545 / ((double)v546 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 6124)) {
              goto LABEL_375;
            }
            goto LABEL_405;
          }
LABEL_404:
          *((double *)v368 + 45) = (double)*(uint64_t *)(v3 + 4056) * 0.000000001;
          if (*(_DWORD *)(v3 + 6124))
          {
LABEL_375:
            uint64_t v547 = *(void *)(v3 + 6032);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v548 = v547 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v549) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 43) = (double)v548 / ((double)v549 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 6340)) {
              goto LABEL_376;
            }
            goto LABEL_406;
          }
LABEL_405:
          *((double *)v368 + 43) = (double)*(uint64_t *)(v3 + 6024) * 0.000000001;
          if (*(_DWORD *)(v3 + 6340))
          {
LABEL_376:
            uint64_t v550 = *(void *)(v3 + 6248);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v551 = v550 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v552) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 44) = (double)v551 / ((double)v552 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 6556)) {
              goto LABEL_377;
            }
            goto LABEL_407;
          }
LABEL_406:
          *((double *)v368 + 44) = (double)*(uint64_t *)(v3 + 6240) * 0.000000001;
          if (*(_DWORD *)(v3 + 6556))
          {
LABEL_377:
            uint64_t v553 = *(void *)(v3 + 6464);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v554 = v553 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v555) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 46) = (double)v554 / ((double)v555 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 6772)) {
              goto LABEL_378;
            }
            goto LABEL_408;
          }
LABEL_407:
          *((double *)v368 + 46) = (double)*(uint64_t *)(v3 + 6456) * 0.000000001;
          if (*(_DWORD *)(v3 + 6772))
          {
LABEL_378:
            uint64_t v556 = *(void *)(v3 + 6680);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v557 = v556 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v55_Block_object_dispose(&STACK[0x220], 8) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 47) = (double)v557 / ((double)v558 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 6988)) {
              goto LABEL_379;
            }
            goto LABEL_409;
          }
LABEL_408:
          *((double *)v368 + 47) = (double)*(uint64_t *)(v3 + 6672) * 0.000000001;
          if (*(_DWORD *)(v3 + 6988))
          {
LABEL_379:
            uint64_t v559 = *(void *)(v3 + 6896);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v560 = v559 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v561) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 4_Block_object_dispose(&STACK[0x220], 8) = (double)v560 / ((double)v561 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 7204)) {
              goto LABEL_380;
            }
            goto LABEL_410;
          }
LABEL_409:
          *((double *)v368 + 4_Block_object_dispose(&STACK[0x220], 8) = (double)*(uint64_t *)(v3 + 6888) * 0.000000001;
          if (*(_DWORD *)(v3 + 7204))
          {
LABEL_380:
            uint64_t v562 = *(void *)(v3 + 7112);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v563 = v562 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v564) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 49) = (double)v563 / ((double)v564 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 11484)) {
              goto LABEL_381;
            }
            goto LABEL_411;
          }
LABEL_410:
          *((double *)v368 + 49) = (double)*(uint64_t *)(v3 + 7104) * 0.000000001;
          if (*(_DWORD *)(v3 + 11484))
          {
LABEL_381:
            uint64_t v565 = *(void *)(v3 + 11392);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v566 = v565 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v567) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 50) = (double)v566 / ((double)v567 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 8276)) {
              goto LABEL_382;
            }
            goto LABEL_412;
          }
LABEL_411:
          *((double *)v368 + 50) = (double)*(uint64_t *)(v3 + 11384) * 0.000000001;
          if (*(_DWORD *)(v3 + 8276))
          {
LABEL_382:
            uint64_t v568 = *(void *)(v3 + 8184);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v569 = v568 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v570) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 51) = (double)v569 / ((double)v570 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 8492)) {
              goto LABEL_383;
            }
            goto LABEL_413;
          }
LABEL_412:
          *((double *)v368 + 51) = (double)*(uint64_t *)(v3 + 8176) * 0.000000001;
          if (*(_DWORD *)(v3 + 8492))
          {
LABEL_383:
            uint64_t v571 = *(void *)(v3 + 8400);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v572 = v571 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v573) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 52) = (double)v572 / ((double)v573 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 8708)) {
              goto LABEL_384;
            }
            goto LABEL_414;
          }
LABEL_413:
          *((double *)v368 + 52) = (double)*(uint64_t *)(v3 + 8392) * 0.000000001;
          if (*(_DWORD *)(v3 + 8708))
          {
LABEL_384:
            uint64_t v574 = *(void *)(v3 + 8616);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v575 = v574 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v576) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 53) = (double)v575 / ((double)v576 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 8924)) {
              goto LABEL_385;
            }
            goto LABEL_415;
          }
LABEL_414:
          *((double *)v368 + 53) = (double)*(uint64_t *)(v3 + 8608) * 0.000000001;
          if (*(_DWORD *)(v3 + 8924))
          {
LABEL_385:
            uint64_t v577 = *(void *)(v3 + 8832);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v578 = v577 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v579) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 54) = (double)v578 / ((double)v579 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 9140)) {
              goto LABEL_386;
            }
            goto LABEL_416;
          }
LABEL_415:
          *((double *)v368 + 54) = (double)*(uint64_t *)(v3 + 8824) * 0.000000001;
          if (*(_DWORD *)(v3 + 9140))
          {
LABEL_386:
            uint64_t v580 = *(void *)(v3 + 9048);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v581 = v580 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v582) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 55) = (double)v581 / ((double)v582 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 9356)) {
              goto LABEL_387;
            }
            goto LABEL_417;
          }
LABEL_416:
          *((double *)v368 + 55) = (double)*(uint64_t *)(v3 + 9040) * 0.000000001;
          if (*(_DWORD *)(v3 + 9356))
          {
LABEL_387:
            uint64_t v583 = *(void *)(v3 + 9264);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v584 = v583 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v585) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 56) = (double)v584 / ((double)v585 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 7868)) {
              goto LABEL_388;
            }
            goto LABEL_418;
          }
LABEL_417:
          *((double *)v368 + 56) = (double)*(uint64_t *)(v3 + 9256) * 0.000000001;
          if (*(_DWORD *)(v3 + 7868))
          {
LABEL_388:
            uint64_t v586 = *(void *)(v3 + 7776);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v587 = v586 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v58_Block_object_dispose(&STACK[0x220], 8) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 57) = (double)v587 / ((double)v588 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 9916)) {
              goto LABEL_389;
            }
            goto LABEL_419;
          }
LABEL_418:
          *((double *)v368 + 57) = (double)*(uint64_t *)(v3 + 7768) * 0.000000001;
          if (*(_DWORD *)(v3 + 9916))
          {
LABEL_389:
            uint64_t v589 = *(void *)(v3 + 9824);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v590 = v589 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v591) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 5_Block_object_dispose(&STACK[0x220], 8) = (double)v590 / ((double)v591 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 11268)) {
              goto LABEL_390;
            }
            goto LABEL_420;
          }
LABEL_419:
          *((double *)v368 + 5_Block_object_dispose(&STACK[0x220], 8) = (double)*(uint64_t *)(v3 + 9816) * 0.000000001;
          if (*(_DWORD *)(v3 + 11268))
          {
LABEL_390:
            uint64_t v592 = *(void *)(v3 + 11176);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v593 = v592 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v594) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 59) = (double)v593 / ((double)v594 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 12076)) {
              goto LABEL_391;
            }
            goto LABEL_421;
          }
LABEL_420:
          *((double *)v368 + 59) = (double)*(uint64_t *)(v3 + 11168) * 0.000000001;
          if (*(_DWORD *)(v3 + 12076))
          {
LABEL_391:
            uint64_t v595 = *(void *)(v3 + 11984);
            v747.__darwin_time_t tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            uint64_t v596 = v595 * LODWORD(v747.tv_sec);
            float v368 = a2;
            LODWORD(v597) = HIDWORD(v747.tv_sec);
            v598 = v713;
            *((double *)a2 + 60) = (double)v596 / ((double)v597 * 1000000.0) * 0.001;
            char v599 = *(void **)(v3 + 1016);
            if (!v599)
            {
LABEL_393:
              v368[61] = v599;
              *((_DWORD *)v368 + 124) = 0;
              pthread_mutex_unlock(v598);
              if (!*(_DWORD *)(v3 + 984) || !*((_DWORD *)v368 + 72)) {
                goto LABEL_481;
              }
              v747.__darwin_time_t tv_sec = 0;
              *(void *)&v747.uint64_t tv_usec = 0;
              gettimeofday(&v747, 0);
              __darwin_time_t tv_sec = v747.tv_sec;
              uint64_t tv_usec = v747.tv_usec;
              uint64_t v602 = *((int *)v368 + 73);
              int v603 = *(_DWORD *)(v3 + 984) * *((_DWORD *)v368 + 52);
              uint64_t v604 = (int *)malloc_type_malloc(4 * v602, 0x100004052888210uLL);
              int v605 = vl_desc_cluster_similar((uint8x8_t *)v368[25], *((_DWORD *)v368 + 52), *((_DWORD *)v368 + 73), v604, v603, 0x7FFF);
              vl_desc_cluster_centroids((uint8x16_t *)v368[25], *((_DWORD *)v368 + 52), *((_DWORD *)v368 + 73), (char *)v368[25], v604, v605);
              v368[25] = malloc_type_realloc(v368[25], *((int *)v368 + 52) * (uint64_t)v605, 0x100004077774924uLL);
              float v606 = (__int16 *)malloc_type_calloc(v605, 2uLL, 0x1000040BDFB0063uLL);
              signed int v607 = v606;
              uint64_t v608 = *((unsigned int *)v368 + 73);
              if ((int)v608 < 1)
              {
                int v609 = 0;
              }
              else
              {
                int v609 = 0;
                v610 = (__int16 *)v368[29];
                v611 = v604;
                do
                {
                  int v613 = *v610++;
                  __int16 v612 = v613;
                  v609 += v613;
                  uint64_t v614 = *v611++;
                  v606[v614] += v612;
                  --v608;
                }
                while (v608);
              }
              int v615 = (int *)malloc_type_malloc(4 * v605, 0x100004052888210uLL);
              float v616 = v615;
              *int v615 = 0;
              if (v605 > 1)
              {
                int v617 = 0;
                uint64_t v618 = v605 - 1;
                float v619 = v615 + 1;
                v620 = v607 + 1;
                do
                {
                  if (*v620 <= 0) {
                    __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 805, "slam_tracks_len[i] > 0");
                  }
                  v617 += *(v620 - 1);
                  *v619++ = v617;
                  ++v620;
                  --v618;
                }
                while (v618);
              }
              int v726 = v602;
              uint64_t v728 = tv_usec;
              __darwin_time_t v734 = tv_sec;
              int v621 = 3 * v605;
              v622 = (char *)malloc_type_calloc(3 * v605, 4uLL, 0x100004052888210uLL);
              signed int v623 = (float *)malloc_type_malloc(8 * v609, 0x100004052888210uLL);
              v624 = (__int16 *)malloc_type_malloc(4 * v609, 0x1000040BDFB0063uLL);
              if (v605 >= 1)
              {
                if (v621 <= 1) {
                  unsigned int v625 = 1;
                }
                else {
                  unsigned int v625 = 3 * v605;
                }
                memset_pattern16(v622, &unk_21BB7A860, 4 * v625);
              }
              if (v609 >= 1)
              {
                if (v609 >= 0x10)
                {
                  uint64_t v626 = v609 & 0xFFFFFFF0;
                  uint64_t v627 = (int32x4_t *)(v623 + 16);
                  int v628 = v624 + 8;
                  int32x4_t v629 = vdupq_n_s32(0x7FC00000u);
                  *(void *)&long long v630 = -1;
                  *((void *)&v630 + 1) = -1;
                  uint64_t v631 = v626;
                  do
                  {
                    v627[-2] = v629;
                    v627[-1] = v629;
                    v627[-4] = v629;
                    v627[-3] = v629;
                    v627[2] = v629;
                    v627[3] = v629;
                    *uint64_t v627 = v629;
                    v627[1] = v629;
                    v627 += 8;
                    *(v628 - 1) = v630;
                    *int v628 = v630;
                    v628 += 2;
                    v631 -= 16;
                  }
                  while (v631);
                  if (v626 == v609) {
                    goto LABEL_441;
                  }
                }
                else
                {
                  uint64_t v626 = 0;
                }
                uint64_t v632 = v609 - v626;
                v633 = &v624[v626];
                uint64_t v634 = (int32x2_t *)&v623[2 * v626];
                int32x2_t v635 = vdup_n_s32(0x7FC00000u);
                do
                {
                  *v634++ = v635;
                  *v633++ = -1;
                  --v632;
                }
                while (v632);
              }
LABEL_441:
              int v636 = *((_DWORD *)a2 + 73);
              if (v636 >= 1)
              {
                uint64_t v637 = 0;
                int v638 = 0;
                v639 = (char *)a2[24];
                int v640 = (__int16 *)a2[29];
                do
                {
                  uint64_t v641 = v604[v637];
                  v642 = &v639[12 * v637];
                  *(_DWORD *)&v622[12 * v641] = *(_DWORD *)v642;
                  uint64_t v643 = &v622[12 * v641];
                  *((_DWORD *)v643 + 1) = *((_DWORD *)v642 + 1);
                  *((_DWORD *)v643 + 2) = *((_DWORD *)v642 + 2);
                  if (v640[v637] >= 1)
                  {
                    uint64_t v644 = 0;
                    uint64_t v645 = v616[v641];
                    float v646 = (float *)a2[27];
                    int v647 = v616[v641];
                    uint64_t v648 = (uint64_t)a2[28] + 2 * v638;
                    int v649 = 2 * v638;
                    v650 = &v624[v645];
                    int v651 = 2 * v645;
                    do
                    {
                      v623[v651] = v646[v649];
                      v623[v651 + 1] = v646[v649 + 1];
                      v650[v644] = *(_WORD *)(v648 + 2 * v644);
                      ++v644;
                      v649 += 2;
                      v651 += 2;
                    }
                    while ((int)v644 < v640[v637]);
                    v638 += v644;
                    v616[v641] = v647 + v644;
                    int v636 = *((_DWORD *)a2 + 73);
                  }
                  ++v637;
                }
                while (v637 < v636);
              }
              if (v605 >= 1)
              {
                if (v621 <= 1) {
                  uint64_t v652 = 1;
                }
                else {
                  uint64_t v652 = v621;
                }
                float v653 = (float *)v622;
                do
                {
                  float v654 = fabsf(*v653);
                  if (v654 >= INFINITY && v654 <= INFINITY) {
                    __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 845, "isfinite(slam_pt3s[i])");
                  }
                  ++v653;
                  --v652;
                }
                while (v652);
                if (*v616 != *v607) {
                  goto LABEL_487;
                }
                if (v605 != 1)
                {
                  uint64_t v655 = v605 - 1;
                  uint64_t v656 = v607 + 1;
                  uint64_t v657 = v616 + 1;
                  int v658 = 0;
                  while (1)
                  {
                    int v659 = *v657++;
                    int v660 = v659 - v616[v658];
                    int v661 = *v656++;
                    if (v660 != v661) {
                      break;
                    }
                    ++v658;
                    if (!--v655) {
                      goto LABEL_462;
                    }
                  }
LABEL_487:
                  __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 850, "n_i == slam_tracks_len[i]");
                }
              }
LABEL_462:
              if (v609 <= 0)
              {
                uint64_t v662 = (unsigned __int16 *)a2[28];
              }
              else
              {
                if (fabsf(*v623) == INFINITY) {
                  goto LABEL_472;
                }
                uint64_t v662 = (unsigned __int16 *)a2[28];
                if ((__int16)*v662 < 0) {
LABEL_489:
                }
                  __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 856, "stats->slam_tracks_img_idx[i] >= 0");
                int v663 = *((_DWORD *)a2 + 34);
                if (v663 <= *v662) {
LABEL_490:
                }
                  __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 857, "stats->slam_tracks_img_idx[i] < stats->num_frames");
                int v664 = *v624;
                if (v664 < 0 || v663 <= v664) {
LABEL_491:
                }
                  __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 858, "slam_tracks_img_idx[i] >= 0 && slam_tracks_img_idx[i] < stats->num_frames");
                if (v609 != 1)
                {
                  uint64_t v665 = v609 - 1;
                  uint64_t v666 = 1;
                  while (1)
                  {
                    float v667 = fabsf(v623[v666 * 2]);
                    if (v667 >= INFINITY && v667 <= INFINITY) {
                      break;
                    }
                    if ((__int16)v662[v666] < 0) {
                      goto LABEL_489;
                    }
                    if (v663 <= v662[v666]) {
                      goto LABEL_490;
                    }
                    int v668 = v624[v666];
                    if (v668 < 0 || v663 <= v668) {
                      goto LABEL_491;
                    }
                    ++v666;
                    if (!--v665) {
                      goto LABEL_480;
                    }
                  }
LABEL_472:
                  __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 854, "isfinite(slam_tracks[i*2+0])");
                }
              }
LABEL_480:
              *((_DWORD *)a2 + 73) = v605;
              uint64_t v669 = a2[24];
              a2[24] = v622;
              uint64_t v670 = a2[29];
              a2[28] = v624;
              a2[29] = v607;
              float v671 = a2[27];
              a2[27] = v623;
              free(v616);
              free(v670);
              free(v662);
              free(v671);
              free(v669);
              free(v604);
              v747.__darwin_time_t tv_sec = 0;
              *(void *)&v747.uint64_t tv_usec = 0;
              gettimeofday(&v747, 0);
              __darwin_time_t v672 = v747.tv_sec;
              uint64_t v673 = v747.tv_usec;
              printf("Verbose (toc) : ");
              printf("Sparsified slam tracks: %d => %d (%.1f%%)", v726, *((_DWORD *)a2 + 73), (double)*((int *)a2 + 73) * 100.0 / ((double)v726 + 0.000000001));
              __darwin_time_t v674 = v672 - v734;
              float v368 = a2;
              printf(": %f ms", (float)((float)(1000000 * v674 - v728 + v673) / 1000.0));
              putchar(10);
LABEL_481:
              v747.__darwin_time_t tv_sec = 0;
              *(void *)&v747.uint64_t tv_usec = 0;
              if (!gettimeofday(&v747, 0))
              {
                __darwin_time_t v682 = v747.tv_usec + 1000000 * v747.tv_sec;
                if ((double)v682 / 1000000.0 > 1514764800.0)
                {
                  double v683 = (double)(uint64_t)(v682 - __n);
                  *((double *)v368 + 49) = v683 / 1000000.0;
                  if (*((_DWORD *)v368 + 72))
                  {
                    double v684 = v683 / 1000.0;
                    log_col_app((uint64_t)"track dedupe: %.1f ms", v675, v676, v677, v678, v679, v680, v681, SLOBYTE(v684));
                  }
                  return;
                }
              }
LABEL_488:
              __assert_rtn("u_timel", "arch_dtime.c", 118, "ret == 0 && result/1e6 > 1514764800L");
            }
LABEL_392:
            char v599 = (void *)v599[95];
            goto LABEL_393;
          }
LABEL_421:
          v598 = v713;
          *((double *)v368 + 60) = (double)*(uint64_t *)(v3 + 11976) * 0.000000001;
          char v599 = *(void **)(v3 + 1016);
          if (!v599) {
            goto LABEL_393;
          }
          goto LABEL_392;
        }
LABEL_287:
        *((_DWORD *)a2 + 13) = 0;
        uint64_t v372 = v131;
        uint64_t v718 = v131;
        if ((int)v42 < 1) {
          goto LABEL_343;
        }
      }
      else
      {
        *((_DWORD *)a2 + 72) = 0;
        float v369 = v720;
        *((_DWORD *)a2 + 13) = 0;
        uint64_t v372 = 0;
        uint64_t v718 = 0;
        if ((int)v42 < 1) {
          goto LABEL_343;
        }
      }
LABEL_292:
      uint64_t v373 = 0;
      LODWORD(v374) = 0;
      *(void *)&long long v375 = -1;
      *((void *)&v375 + 1) = -1;
      while (1)
      {
        float v376 = &v369[108 * v373];
        float v377 = (char *)v368[14] + 16 * v373;
        *float v377 = 0;
        v377[1] = 0;
        *((_OWORD *)v368[13] + v373) = *(_OWORD *)(v376 + 55);
        uint64_t v378 = (uint64_t)v368[15] + 248 * v373;
        long long v379 = *((_OWORD *)v376 + 1);
        long long v380 = *((_OWORD *)v376 + 2);
        long long v381 = *((_OWORD *)v376 + 4);
        *(_OWORD *)(v378 + 32) = *((_OWORD *)v376 + 3);
        *(_OWORD *)(v378 + 4_Block_object_dispose(&STACK[0x220], 8) = v381;
        *(_OWORD *)uint64_t v378 = v379;
        *(_OWORD *)(v378 + 16) = v380;
        long long v382 = *((_OWORD *)v376 + 5);
        long long v383 = *((_OWORD *)v376 + 6);
        long long v384 = *((_OWORD *)v376 + 8);
        *(_OWORD *)(v378 + 96) = *((_OWORD *)v376 + 7);
        *(_OWORD *)(v378 + 112) = v384;
        *(_OWORD *)(v378 + 64) = v382;
        *(_OWORD *)(v378 + 80) = v383;
        long long v385 = *((_OWORD *)v376 + 9);
        long long v386 = *((_OWORD *)v376 + 10);
        long long v387 = *((_OWORD *)v376 + 12);
        *(_OWORD *)(v378 + 160) = *((_OWORD *)v376 + 11);
        *(_OWORD *)(v378 + 176) = v387;
        *(_OWORD *)(v378 + 12_Block_object_dispose(&STACK[0x220], 8) = v385;
        *(_OWORD *)(v378 + 144) = v386;
        long long v388 = *((_OWORD *)v376 + 13);
        long long v389 = *((_OWORD *)v376 + 14);
        long long v390 = *((_OWORD *)v376 + 15);
        *(double *)(v378 + 240) = v376[32];
        *(_OWORD *)(v378 + 20_Block_object_dispose(&STACK[0x220], 8) = v389;
        *(_OWORD *)(v378 + 224) = v390;
        *(_OWORD *)(v378 + 192) = v388;
        *((_DWORD *)v368[16] + v373) = *((_DWORD *)v376 + 2);
        uint64_t v391 = *((void *)v376 + 98);
        *((_WORD *)v368[3] + v373) = v391;
        unint64_t v392 = v391 - 1;
        if (v391 >= 1)
        {
          float v393 = &v369[108 * v373];
          unsigned int v394 = (char *)(v393 + 84);
          unint64_t v395 = (int)v374;
          unint64_t v396 = *((void *)v376 + 99);
          unsigned int v397 = (const float *)*((void *)v393 + 102);
          unint64_t v398 = *((void *)v393 + 105);
          unsigned int v399 = (char *)*v368;
          float v400 = v368[1];
          unsigned int v401 = (char *)v368[2];
          unsigned int v402 = v368[4];
          if ((unint64_t)v391 >= 0x10)
          {
            uint64_t v403 = 0;
            int v404 = 2 * v374;
            BOOL v405 = !is_mul_ok(v392, 0x18uLL);
            unint64_t v406 = (unint64_t)&v400[2 * v374];
            if (v406 + 4 + 8 * v392 < v406 + 4
              || v406 + 8 * v392 < v406
              || 2 * ((int)v374 + (int)v392) < v404
              || (int v407 = (2 * v374) | 1, ((v392 & 0x40000000) != 0) ^ __OFSUB__(v407 + 2 * v392, v407))
              || v392 >> 31
              || (float v408 = (double *)&v399[24 * (int)v374], v409 = 3 * v392, &v408[v409 + 1] < v408 + 1)
              || v405
              || &v408[v409 + 2] < v408 + 2)
            {
              float v368 = a2;
            }
            else if (v405 || &v408[v409] < v408 || v405)
            {
              float v368 = a2;
            }
            else
            {
              uint64_t v403 = 0;
              unint64_t v410 = (unint64_t)(v376 + 84);
              unint64_t v411 = (unint64_t)(v376 + 96);
              unint64_t v412 = (unint64_t)&v400[v404];
              unint64_t v413 = v412 + 8 * v391;
              BOOL v415 = (unint64_t)v397 < v413 && v412 < (unint64_t)&v397[3 * v391];
              BOOL v417 = v396 < v413 && v412 < v396 + 8 * v391;
              BOOL v419 = (unint64_t)&v401[4 * (int)v374] < v398 + 8 * v391 - 4
                  && v398 < (unint64_t)&v401[4 * v391 + 4 * (int)v374];
              if (v410 >= (unint64_t)&v399[24 * v391 + 24 * (int)v374]
                || (unint64_t)&v399[24 * (int)v374] >= v411)
              {
                float v368 = a2;
                uint64_t v372 = v718;
                float v369 = v720;
                if (!v415 && !v417 && !v419)
                {
                  uint64_t v403 = v391 & 0x7FFFFFFFFFFFFFF8;
                  unint64_t v374 = (v391 & 0xFFFFFFFFFFFFFFF8) + (int)v374;
                  float v421 = (int *)(v398 + 32);
                  float v422 = v397;
                  unint64_t v423 = v396;
                  unint64_t v424 = v391 & 0xFFFFFFFFFFFFFFF8;
                  unsigned int v425 = &v402[v395];
                  float v426 = (float64x2_t *)&v401[4 * v395];
                  do
                  {
                    float v427 = v422;
                    float32x4x3_t v755 = vld3q_f32(v427);
                    v427 += 12;
                    float64x2_t v428 = vcvtq_f64_f32(*(float32x2_t *)v755.val[0].f32);
                    float32x4x3_t v756 = vld3q_f32(v427);
                    float64x2_t v429 = vcvt_hight_f64_f32(v755.val[0]);
                    float64x2_t v430 = vcvtq_f64_f32(*(float32x2_t *)v756.val[0].f32);
                    float64x2_t v431 = vcvt_hight_f64_f32(v756.val[0]);
                    float64x2_t v432 = vcvt_hight_f64_f32(v756.val[1]);
                    float64x2_t v433 = vcvt_hight_f64_f32(v755.val[1]);
                    float64x2_t v434 = vcvtq_f64_f32(*(float32x2_t *)v756.val[1].f32);
                    float64x2_t v435 = vcvtq_f64_f32(*(float32x2_t *)v755.val[1].f32);
                    float64x2_t v436 = vcvt_hight_f64_f32(v756.val[2]);
                    float64x2_t v437 = vcvt_hight_f64_f32(v755.val[2]);
                    float64x2_t v438 = vcvtq_f64_f32(*(float32x2_t *)v755.val[2].f32);
                    v439 = (const double *)v394;
                    float64x2_t v440 = vcvtq_f64_f32(*(float32x2_t *)v756.val[2].f32);
                    v755.val[1] = (float32x4_t)vld1q_dup_f64(v439++);
                    v755.val[2] = (float32x4_t)vmlaq_f64(vmulq_n_f64(v432, *v439), v431, (float64x2_t)v755.val[1]);
                    v756.val[0] = (float32x4_t)vmlaq_f64(vmulq_n_f64(v434, *v439), v430, (float64x2_t)v755.val[1]);
                    v755.val[0] = (float32x4_t)vmlaq_f64(vmulq_n_f64(v433, *v439), v429, (float64x2_t)v755.val[1]);
                    float64x2_t v441 = vmlaq_f64(vmulq_n_f64(v435, *v439), v428, (float64x2_t)v755.val[1]);
                    v755.val[1].i64[0] = *((void *)v394 + 2);
                    double v442 = *((double *)v394 + 3);
                    float64x2_t v443 = vmlaq_n_f64(v441, v438, *(double *)v755.val[1].i64);
                    v755.val[0] = (float32x4_t)vmlaq_n_f64((float64x2_t)v755.val[0], v437, *(double *)v755.val[1].i64);
                    v444 = (const double *)(v394 + 72);
                    v756.val[0] = (float32x4_t)vmlaq_n_f64((float64x2_t)v756.val[0], v440, *(double *)v755.val[1].i64);
                    v756.val[1] = (float32x4_t)vld1q_dup_f64(v444);
                    v756.val[2].i64[0] = *((void *)v394 + 4);
                    double v445 = *((double *)v394 + 5);
                    float64x2_t v446 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v432, *(double *)v756.val[2].i64), v431, v442), v436, v445);
                    float v447 = (const double *)(v394 + 80);
                    float64x2_t v448 = vld1q_dup_f64(v447);
                    v755.val[1] = (float32x4_t)vaddq_f64((float64x2_t)v756.val[1], vmlaq_n_f64((float64x2_t)v755.val[2], v436, *(double *)v755.val[1].i64));
                    double v449 = *((double *)v394 + 6);
                    double v450 = *((double *)v394 + 7);
                    float64x2_t v451 = vmlaq_n_f64(vmulq_n_f64(v432, v450), v431, v449);
                    v431.f64[0] = *((float64_t *)v394 + 8);
                    v755.val[2] = (float32x4_t)vaddq_f64(v448, v446);
                    float64x2_t v452 = vmlaq_n_f64(v451, v436, v431.f64[0]);
                    __double2 v453 = (const double *)(v394 + 88);
                    float64x2_t v454 = vld1q_dup_f64(v453);
                    float64x2_t v455 = vaddq_f64(v454, v452);
                    v754.val[0] = vaddq_f64((float64x2_t)v756.val[1], (float64x2_t)v756.val[0]);
                    v754.val[1] = vaddq_f64(v448, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v434, *(double *)v756.val[2].i64), v430, v442), v440, v445));
                    v754.val[2] = vaddq_f64(v454, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v434, v450), v430, v449), v440, v431.f64[0]));
                    v757.val[0] = vaddq_f64((float64x2_t)v756.val[1], (float64x2_t)v755.val[0]);
                    v757.val[1] = vaddq_f64(v448, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v433, *(double *)v756.val[2].i64), v429, v442), v437, v445));
                    v757.val[2] = vaddq_f64(v454, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v433, v450), v429, v449), v437, v431.f64[0]));
                    v753.val[0] = vaddq_f64((float64x2_t)v756.val[1], v443);
                    v753.val[1] = vaddq_f64(v448, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v435, *(double *)v756.val[2].i64), v428, v442), v438, v445));
                    v753.val[2] = vaddq_f64(v454, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v435, v450), v428, v449), v438, v431.f64[0]));
                    double v456 = v408;
                    double v457 = v408 + 12;
                    double v458 = v408 + 18;
                    vst3q_f64(v456, v753);
                    v456 += 6;
                    vst3q_f64(v457, v754);
                    vst3q_f64(v458, *(float64x2x3_t *)((char *)&v755 + 16));
                    vst3q_f64(v456, v757);
                    double v459 = v421 - 4;
                    int v460 = v421 - 2;
                    v461 = v421 + 2;
                    v462 = v421 + 4;
                    v757.val[2] = *(float64x2_t *)v423;
                    v757.val[1] = *(float64x2_t *)(v423 + 16);
                    long long v463 = *(_OWORD *)(v423 + 48);
                    uint64_t v464 = (uint64_t)&v400[v407 - 1];
                    *(_OWORD *)(v464 + 32) = *(_OWORD *)(v423 + 32);
                    *(_OWORD *)(v464 + 4_Block_object_dispose(&STACK[0x220], 8) = v463;
                    *(float64x2_t *)uint64_t v464 = v757.val[2];
                    *(float64x2_t *)(v464 + 16) = v757.val[1];
                    LODWORD(v757.val[1].f64[0]) = *(v421 - 8);
                    HIDWORD(v757.val[1].f64[0]) = *(v421 - 6);
                    uint64_t v465 = v421 + 6;
                    int v466 = *v421;
                    v421 += 16;
                    LODWORD(v757.val[2].f64[0]) = v466;
                    HIDWORD(v757.val[2].f64[0]) = *v461;
                    LODWORD(v757.val[1].f64[1]) = *v459;
                    LODWORD(v757.val[2].f64[1]) = *v462;
                    HIDWORD(v757.val[2].f64[1]) = *v465;
                    HIDWORD(v757.val[1].f64[1]) = *v460;
                    *float v426 = v757.val[1];
                    v426[1] = v757.val[2];
                    v426 += 2;
                    *v425++ = v375;
                    v408 += 24;
                    v407 += 16;
                    v423 += 64;
                    v422 += 24;
                    v424 -= 8;
                  }
                  while (v424);
                  unint64_t v395 = v374;
                  uint64_t v3 = a1;
                  float v368 = a2;
                  uint64_t v372 = v718;
                  float v369 = v720;
                  if (v391 == v403) {
                    goto LABEL_293;
                  }
                }
              }
              else
              {
                float v368 = a2;
                uint64_t v372 = v718;
                float v369 = v720;
              }
            }
          }
          else
          {
            uint64_t v403 = 0;
          }
          uint64_t v467 = 0;
          float v468 = &v401[4 * v395];
          int v469 = 2 * v395;
          double v470 = (float *)&v397[3 * v403 + 2];
          double v471 = (int *)(v398 + 8 * v403);
          double v472 = (double *)&v399[24 * v395 + 16];
          uint64_t v473 = v391 - v403;
          float v474 = (int *)(v396 + 8 * v403 + 4);
          do
          {
            double v475 = *(v470 - 2);
            double v476 = *(v470 - 1);
            float v477 = *v470;
            v470 += 3;
            double v478 = *((double *)v394 + 4) * v476 + *((double *)v394 + 3) * v475 + *((double *)v394 + 5) * v477;
            double v479 = *((double *)v394 + 8);
            double v480 = *((double *)v394 + 9)
                 + *((double *)v394 + 1) * v476
                 + *(double *)v394 * v475
                 + *((double *)v394 + 2) * v477;
            double v481 = *((double *)v394 + 7) * v476 + *((double *)v394 + 6) * v475;
            double v482 = *((double *)v394 + 11);
            double v483 = *((double *)v394 + 10) + v478;
            *(v472 - 2) = v480;
            *(v472 - 1) = v483;
            *double v472 = v482 + v481 + v479 * v477;
            v472 += 3;
            v400[v469] = *(v474 - 1);
            int v484 = *v474;
            v474 += 2;
            v400[v469 + 1] = v484;
            int v485 = *v471;
            v471 += 2;
            *(_DWORD *)&v468[4 * v467] = v485;
            v402[v395 + v467++] = -1;
            v469 += 2;
          }
          while (v473 != v467);
          LODWORD(v374) = v395 + v467;
        }
LABEL_293:
        if (++v373 == v372) {
          goto LABEL_343;
        }
      }
    }
    if (v42 == 1)
    {
      int v132 = 0;
      unint64_t v355 = 0;
    }
    else
    {
      int v356 = 0;
      int v357 = 0;
      unint64_t v355 = v42 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v358 = v42 & 0xFFFFFFFFFFFFFFFELL;
      float v359 = v12;
      do
      {
        v356 += *((_DWORD *)v359 + 156);
        v357 += *((_DWORD *)v359 + 372);
        v359 += 216;
        v358 -= 2;
      }
      while (v358);
      int v132 = v357 + v356;
      if (v42 == v355)
      {
LABEL_273:
        if ((unint64_t)v42 >= 2)
        {
          int v363 = 0;
          int v364 = 0;
          unint64_t v362 = v42 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v365 = v42 & 0xFFFFFFFFFFFFFFFELL;
          float v366 = v12;
          do
          {
            v363 += *((_DWORD *)v366 + 196);
            v364 += *((_DWORD *)v366 + 412);
            v366 += 216;
            v365 -= 2;
          }
          while (v365);
          int v133 = v364 + v363;
          if (v42 == v362) {
            goto LABEL_280;
          }
        }
        else
        {
          int v133 = 0;
          unint64_t v362 = 0;
        }
        uint64_t v367 = 864 * v362 + 784;
        do
        {
          v133 += *(_DWORD *)((char *)v12 + v367);
          ++v362;
          v367 += 864;
        }
        while (v42 != v362);
LABEL_280:
        int v130 = 1;
        goto LABEL_281;
      }
    }
    unint64_t v360 = v42 - v355;
    float v361 = &v12[108 * v355 + 78];
    do
    {
      v132 += *(_DWORD *)v361;
      v361 += 108;
      --v360;
    }
    while (v360);
    goto LABEL_273;
  }
  uint64_t v17 = *(void *)(a1 + 7208);
  uint64_t v704 = *(void *)(a1 + 11512);
  *(_DWORD *)__s = 0;
  *(void *)&long long v752 = 0;
  long long v750 = 0u;
  long long v751 = 0u;
  long long v748 = 0u;
  long long v749 = 0u;
  timeval v747 = (timeval)0;
  hash_map_create((uint64_t)&v747, 8, 4);
  uint64_t v18 = *(void *)(v3 + 7232);
  if (v18 < 1)
  {
    int v19 = 0;
    goto LABEL_62;
  }
  if (v18 == 1)
  {
    int v19 = 0;
    unint64_t v20 = 0;
LABEL_60:
    unint64_t v47 = v18 - v20;
    int v48 = (int *)(*(void *)(v3 + 7240) + 80 * v20);
    do
    {
      int v49 = *v48;
      v48 += 20;
      v19 += v49;
      --v47;
    }
    while (v47);
    goto LABEL_62;
  }
  int v43 = 0;
  int v44 = 0;
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v45 = v18 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v46 = *(_DWORD **)(v3 + 7240);
  do
  {
    v43 += *v46;
    v44 += v46[20];
    v46 += 40;
    v45 -= 2;
  }
  while (v45);
  int v19 = v44 + v43;
  if (v18 != v20) {
    goto LABEL_60;
  }
LABEL_62:
  v2[1] = malloc_type_malloc(8 * v19, 0x96E97201uLL);
  uint64_t v700 = v19;
  void *v2 = malloc_type_malloc(24 * v19, 0x3AF1A546uLL);
  int v702 = v19;
  v2[2] = malloc_type_malloc(4 * v19, 0x100004052888210uLL);
  a2[3] = malloc_type_malloc(2 * (int)v17, 0x1000040BDFB0063uLL);
  a2[13] = malloc_type_malloc(16 * (int)v17, 0x1000040451B5BE8uLL);
  a2[14] = malloc_type_malloc(16 * (int)v17, 0x7F76BDEEuLL);
  float v50 = a2;
  a2[15] = malloc_type_malloc(248 * (int)v17, 0x10000409B83B951uLL);
  a2[16] = malloc_type_malloc(4 * (int)v17, 0x100004052888210uLL);
  *(_DWORD *)__s = 0;
  if ((int)v17 >= 1)
  {
    uint64_t v51 = 0;
    do
    {
      uint64_t v52 = *(void *)(v3 + 7240);
      float v53 = (uint64_t *)(v52 + 80 * v51);
      uint64_t v54 = *(void *)(v3 + 7288);
      uint64_t v55 = *v53;
      *((_WORD *)a2[3] + v51) = *v53;
      *((_OWORD *)a2[13] + v51) = *(_OWORD *)(*(void *)(v3 + 7264) + 16 * v51);
      uint64_t v56 = (uint64_t)a2[15] + 248 * v51;
      uint64_t v57 = *(void *)(v3 + 7312) + 248 * v51;
      long long v58 = *(_OWORD *)(v57 + 112);
      long long v60 = *(_OWORD *)(v57 + 64);
      long long v59 = *(_OWORD *)(v57 + 80);
      *(_OWORD *)(v56 + 96) = *(_OWORD *)(v57 + 96);
      *(_OWORD *)(v56 + 112) = v58;
      *(_OWORD *)(v56 + 64) = v60;
      *(_OWORD *)(v56 + 80) = v59;
      long long v61 = *(_OWORD *)(v57 + 176);
      long long v63 = *(_OWORD *)(v57 + 128);
      long long v62 = *(_OWORD *)(v57 + 144);
      *(_OWORD *)(v56 + 160) = *(_OWORD *)(v57 + 160);
      *(_OWORD *)(v56 + 176) = v61;
      *(_OWORD *)(v56 + 12_Block_object_dispose(&STACK[0x220], 8) = v63;
      *(_OWORD *)(v56 + 144) = v62;
      long long v65 = *(_OWORD *)(v57 + 208);
      long long v64 = *(_OWORD *)(v57 + 224);
      long long v66 = *(_OWORD *)(v57 + 192);
      *(void *)(v56 + 240) = *(void *)(v57 + 240);
      *(_OWORD *)(v56 + 20_Block_object_dispose(&STACK[0x220], 8) = v65;
      *(_OWORD *)(v56 + 224) = v64;
      *(_OWORD *)(v56 + 192) = v66;
      long long v67 = *(_OWORD *)v57;
      long long v68 = *(_OWORD *)(v57 + 16);
      long long v69 = *(_OWORD *)(v57 + 48);
      *(_OWORD *)(v56 + 32) = *(_OWORD *)(v57 + 32);
      *(_OWORD *)(v56 + 4_Block_object_dispose(&STACK[0x220], 8) = v69;
      *(_OWORD *)uint64_t v56 = v67;
      *(_OWORD *)(v56 + 16) = v68;
      *((_DWORD *)a2[16] + v51) = *(_DWORD *)(*(void *)(v3 + 7336) + 4 * v51);
      if ((int)v55 >= 1)
      {
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        int v72 = (double *)(v54 + 112 * v51);
        uint64_t v73 = v52 + 80 * v51;
        float32x2_t v74 = (void *)(v73 + 32);
        float v75 = (void *)(v73 + 56);
        int v76 = *(_DWORD *)__s;
        uint64_t v77 = 12 * v55;
        do
        {
          uint64_t v78 = v53[1];
          float32x2_t v79 = (float *)(*v74 + v71);
          uint32_t v80 = *(_DWORD *)(*v75 + v70 + 4);
          double v81 = *v79;
          double v82 = v79[1];
          double v83 = v79[2];
          info[0] = 0;
          double v84 = v72[9] + v72[1] * v82 + *v72 * v81 + v72[2] * v83;
          double v85 = v72[4] * v82 + v72[3] * v81 + v72[5] * v83;
          long double v86 = (_DWORD *)(v78 + v70);
          double v87 = v72[7] * v82 + v72[6] * v81;
          double v88 = v72[10] + v85;
          double v89 = v72[11] + v87 + v72[8] * v83;
          long double v90 = a2[1];
          v90[2 * v76] = *v86;
          v90[2 * v76 + 1] = v86[1];
          float32x2_t v91 = *a2;
          *((double *)*a2 + 3 * v76) = v84;
          uint64_t v92 = (uint64_t)v91 + 24 * v76;
          *(double *)(v92 + _Block_object_dispose(&STACK[0x220], 8) = v88;
          *(double *)(v92 + 16) = v89;
          *((_DWORD *)a2[2] + v76) = *(_DWORD *)(*v75 + v70);
          info[0].numer = v51;
          info[0].denom = v80;
          hash_map_add((uint64_t)&v747, info, __s);
          int v76 = ++*(_DWORD *)__s;
          v71 += 12;
          v70 += 8;
        }
        while (v77 != v71);
      }
      ++v51;
      uint64_t v3 = a1;
    }
    while (v51 != v17);
  }
  int v93 = v704;
  unint64_t v94 = v704;
  uint64_t v95 = *(void *)(v3 + 14424);
  if (!v95) {
    goto LABEL_175;
  }
  int v96 = *(_DWORD *)(v3 + 4);
  if (v96 == 1) {
    uint64_t v97 = 64;
  }
  else {
    uint64_t v97 = 256;
  }
  int v98 = *(_DWORD *)(v95 + 368);
  uint64_t v99 = *(void *)(v3 + 7208);
  int v731 = *(_DWORD *)(v95 + 588);
  int v100 = *(_DWORD *)(v95 + 592);
  *((_DWORD *)a2 + 72) = *(_DWORD *)(v3 + 7360);
  *((_DWORD *)a2 + 13) = *(_DWORD *)(v3 + 7364);
  int v101 = *(_DWORD *)(v3 + 660);
  if (v101 >= v98) {
    int v102 = v98;
  }
  else {
    int v102 = *(_DWORD *)(v3 + 660);
  }
  if (v101) {
    int v103 = v102;
  }
  else {
    int v103 = v98;
  }
  *((_DWORD *)a2 + 73) = v103;
  *((_DWORD *)a2 + 34) = v99;
  size_t __na = v97;
  *((_DWORD *)a2 + 52) = v97;
  *((_DWORD *)a2 + 74) = *(_DWORD *)(v3 + 7352) - v99;
  double v104 = *(double *)(v3 + 14432);
  double v105 = *(double *)(v3 + 14480);
  double v106 = *(double *)(v3 + 14440);
  double v107 = *(double *)(v3 + 14488);
  double v108 = *(double *)(v3 + 14448);
  double v109 = *(double *)(v3 + 14496);
  int v697 = v100;
  float v110 = (double *)(*(void *)(v95 + 304) + 880 * v100);
  double v111 = v110[1];
  double v113 = v110[2];
  double v112 = v110[3];
  double v114 = v104 * *v110 + 0.0 + v106 * v111 + v108 * v113;
  double v116 = v110[4];
  double v115 = v110[5];
  double v117 = v104 * v112 + 0.0 + v106 * v116 + v108 * v115;
  double v119 = v110[6];
  double v118 = v110[7];
  double v120 = v104 * v119 + 0.0 + v106 * v118;
  double v121 = v110[8];
  double v714 = v110[9];
  double v716 = *(double *)(v3 + 14456);
  double v698 = v117;
  double v699 = v120 + v108 * v121;
  double v122 = *(double *)(v3 + 14464);
  double v701 = *(double *)(v3 + 14472);
  double v123 = v716 * *v110 + 0.0 + v122 * v111 + v701 * v113;
  double v124 = v105 * *v110 + 0.0 + v107 * v111 + v109 * v113;
  double v719 = v118;
  double v722 = v115;
  double v125 = v105 * v112 + 0.0 + v107 * v116 + v109 * v115;
  double v688 = v121;
  double v126 = v105 * v119 + 0.0 + v107 * v118 + v109 * v121;
  double v689 = v110[11];
  double v690 = v126;
  double v127 = v125;
  double v128 = v124;
  int v703 = v99;
  int v686 = v96;
  double v695 = *(double *)(v3 + 14512);
  double v696 = *(double *)(v3 + 14504);
  double v694 = *(double *)(v3 + 14520);
  double v687 = v110[10];
  double v711 = v123;
  double v705 = v119;
  double v707 = v116;
  if (fabs(v124) >= 1.0)
  {
    if (v124 <= -1.0)
    {
      double v691 = atan2(v117, v699) + 0.0;
      long double v692 = 0.0;
      *(double *)&unint64_t v129 = 1.57079633;
    }
    else
    {
      double v691 = atan2(-v117, -v699);
      long double v692 = 0.0;
      *(double *)&unint64_t v129 = -1.57079633;
    }
    long double v693 = *(double *)&v129;
  }
  else
  {
    long double v693 = asin(-v124);
    long double v692 = atan2(v123, v114);
    double v691 = atan2(v125, v126);
  }
  double v134 = v114;
  double v135 = v716 * v112 + 0.0;
  long long v136 = (int32x4_t *)malloc_type_calloc(v103, 4uLL, 0x100004052888210uLL);
  long long v137 = v136;
  long long v138 = *(void **)(v3 + 14424);
  int v139 = *(_DWORD *)(v3 + 1032);
  int v140 = *(_DWORD *)(v3 + 1036);
  int v141 = *(_DWORD *)(v3 + 664);
  uint64_t v142 = *((unsigned int *)a2 + 73);
  uint64_t v143 = v138[46];
  double v144 = v128;
  if ((int)v142 >= 1 && v142 == v143)
  {
    if (v142 >= 8)
    {
      uint64_t v145 = v142 & 0x7FFFFFF8;
      int32x4_t v146 = (int32x4_t)xmmword_21BB7A770;
      mach_timebase_info v147 = v136 + 1;
      v148.i64[0] = 0x400000004;
      v148.i64[1] = 0x400000004;
      v149.i64[0] = 0x800000008;
      v149.i64[1] = 0x800000008;
      uint64_t v150 = v142 & 0xFFFFFFF8;
      do
      {
        v147[-1] = v146;
        *mach_timebase_info v147 = vaddq_s32(v146, v148);
        int32x4_t v146 = vaddq_s32(v146, v149);
        v147 += 2;
        v150 -= 8;
      }
      while (v150);
      if (v145 == v142) {
        goto LABEL_94;
      }
    }
    else
    {
      uint64_t v145 = 0;
    }
    do
    {
      v136->i32[v145] = v145;
      ++v145;
    }
    while (v142 != v145);
  }
LABEL_94:
  double v151 = v135 + v122 * v707;
  double v152 = v716 * v705 + 0.0;
  int v685 = v139;
  uint64_t v706 = (int)v142;
  size_t v153 = (unint64_t)(ceil((double)v139 / (double)v141) * ceil((double)v140 / (double)v141));
  if (v153)
  {
    uint64_t v154 = 0;
    uint64_t v155 = 0;
    uint64_t v156 = 0;
    float v157 = 0;
    double v158 = v127;
    double v159 = v722;
    do
    {
      uint64_t v161 = v155 + 1;
      if (v155 >= v156)
      {
        uint64_t v162 = 2 * v156;
        if (!v156) {
          uint64_t v162 = 10;
        }
        if (v162 <= v155) {
          uint64_t v156 = v155 + 1;
        }
        else {
          uint64_t v156 = v162;
        }
        uint64_t v163 = (void **)malloc_type_realloc(v157, 24 * v156, 0x20C2751EuLL);
        double v144 = v128;
        double v158 = v127;
        float v157 = v163;
      }
      uint64_t v160 = &v157[v154];
      *uint64_t v160 = 0;
      v160[1] = 0;
      v160[2] = 0;
      v154 += 3;
      uint64_t v155 = v161;
    }
    while (v153 != v161);
  }
  else
  {
    float v157 = 0;
    double v158 = v127;
    double v159 = v722;
  }
  double v164 = v151 + v701 * v159;
  double v165 = v152 + v122 * v719;
  double v166 = v134 * v714 + 0.0;
  double v167 = v711 * v714 + 0.0;
  double v168 = v144 * v714 + 0.0;
  float v721 = v137;
  if ((int)v143 < 1)
  {
    int v708 = 0;
    long double v171 = v693;
  }
  else
  {
    float v169 = 0;
    int v708 = 0;
    float v715 = (pthread_mutex_t *)v143;
    float v717 = v157;
    float v170 = (float)v141;
    int v712 = v685 / v141;
    long double v171 = v693;
    do
    {
      uint64_t v174 = 0;
      float v723 = v169;
      long long v175 = (uint64_t *)(v138[40] + 24 * (void)v169);
      do
      {
        info[0] = 0;
        unint64_t v177 = *(unsigned int *)(v175[1] + 4 * v174);
        unsigned int v178 = *(_DWORD *)(v175[1] + 4 * v174) & 0x7FFF;
        unint64_t v179 = v177 >> 15;
        uint64_t v180 = v138[38];
        info[0] = (mach_timebase_info)(v177 & 0x7FFF);
        info[0].denom = v177 >> 15;
        unsigned int v181 = ((uint64_t (*)(mach_timebase_info *, void))v749)(info, (int)v748);
        if (LODWORD(v747.tv_sec))
        {
          unsigned int v182 = v181;
          uint64_t v183 = *(void *)(v750 + 8 * (v181 % LODWORD(v747.tv_sec)));
          if (v183)
          {
            while (v182 != *(_DWORD *)(v183 + 8)
                 || (*((unsigned int (**)(mach_timebase_info *, void, void))&v749 + 1))(info, *(void *)v183, (int)v748))
            {
              uint64_t v183 = *(void *)(v183 + 24);
              if (!v183) {
                goto LABEL_111;
              }
            }
            if (*(void *)(v183 + 16))
            {
              if (v708 >= (int)v706)
              {
                float v157 = v717;
                long long v137 = v721;
                double v158 = v127;
                long long v173 = v723;
              }
              else
              {
                long long v137 = v721;
                long long v173 = v723;
                v721->i32[v708++] = (int)v723;
                double v158 = v127;
                float v157 = v717;
              }
              goto LABEL_109;
            }
          }
        }
LABEL_111:
        ++v174;
        uint64_t v176 = *v175;
      }
      while (*v175 > v174);
      long long v184 = (float *)(*(void *)(v180 + 880 * v178 + 376) + 8 * v179);
      uint64_t v185 = (int)(vcvtms_s32_f32(*v184 / v170) + v712 * vcvtms_s32_f32(v184[1] / v170));
      float v157 = v717;
      long long v186 = (uint64_t *)&v717[3 * v185];
      uint64_t v187 = *v186;
      uint64_t v188 = v186[2];
      if (*v186 < v188)
      {
        long long v137 = v721;
      }
      else
      {
        uint64_t v189 = 2 * v188;
        BOOL v26 = v188 == 0;
        uint64_t v190 = 32;
        if (!v26) {
          uint64_t v190 = v189;
        }
        if (v190 <= v187) {
          uint64_t v191 = v187 + 1;
        }
        else {
          uint64_t v191 = v190;
        }
        long long v137 = v721;
        if (v191)
        {
          v717[3 * (int)v185 + 1] = malloc_type_realloc(v717[3 * (int)v185 + 1], 8 * v191, 0xE3AC5CB4uLL);
          uint64_t v187 = *v186;
        }
        v186[2] = v191;
      }
      double v158 = v127;
      *long long v186 = v187 + 1;
      uint64_t v172 = (char *)v717[3 * (int)v185 + 1] + 8 * v187;
      long long v173 = v723;
      *uint64_t v172 = v176;
      v172[1] = v723;
LABEL_109:
      float v169 = (pthread_mutex_t *)((char *)&v173->__sig + 1);
    }
    while (v169 != v715);
  }
  double v192 = v165 + v701 * v688;
  double v193 = v167 + v164 * v687;
  double v194 = v168 + v158 * v687;
  uint64_t v3 = a1;
  if (v153)
  {
    unint64_t v195 = v157 + 1;
    size_t v196 = v153;
    do
    {
      size_t v197 = (size_t)*(v195 - 1);
      if (v197) {
        qsort(*v195, v197, 8uLL, (int (__cdecl *)(const void *, const void *))int_pair_cmp_dec);
      }
      v195 += 3;
      --v196;
    }
    while (v196);
  }
  double v198 = v193 + v192 * v689;
  long long v199 = (int *)malloc_type_calloc(v153, 4uLL, 0x100004052888210uLL);
  long long v200 = v199;
  if (v708 < (int)v706)
  {
    LODWORD(v201) = 0;
    uint64_t v202 = v708;
    do
    {
      uint64_t v204 = v199[(int)v201];
      if ((uint64_t)v157[3 * (int)v201] > v204)
      {
        uint64_t v203 = (int)v201;
      }
      else
      {
        do
        {
          unint64_t v201 = ((int)v201 + 1) % v153;
          uint64_t v204 = v199[(int)v201];
        }
        while ((uint64_t)v157[3 * (int)v201] <= v204);
        uint64_t v203 = (int)v201;
      }
      v137->i32[v202] = *((_DWORD *)v157[3 * (int)v203 + 1] + 2 * v204 + 1);
      ++v199[v203];
      ++v202;
    }
    while (v202 != v706);
  }
  double v205 = v695 - v198;
  if (v153)
  {
    long long v206 = v157 + 1;
    do
    {
      long long v207 = *v206;
      v206 += 3;
      free(v207);
      --v153;
    }
    while (v153);
  }
  free(v157);
  free(v200);
  *((double *)a2 + 1_Block_object_dispose(&STACK[0x220], 8) = v696 - (v166 + v698 * v687 + v699 * v689);
  *((double *)a2 + 19) = v205;
  *((double *)a2 + 20) = v694 - (v194 + v690 * v689);
  *((long double *)a2 + 21) = v692;
  *((long double *)a2 + 22) = v171;
  *((double *)a2 + 23) = v691;
  a2[24] = malloc_type_malloc(12 * *((int *)a2 + 73), 0x2786B20BuLL);
  a2[25] = malloc_type_malloc(*((int *)a2 + 73) * (uint64_t)*((int *)a2 + 52), 0x837C128FuLL);
  a2[29] = malloc_type_malloc(2 * *((int *)a2 + 73), 0x1000040BDFB0063uLL);
  a2[4] = malloc_type_malloc(2 * v700, 0x1000040BDFB0063uLL);
  int v208 = *((_DWORD *)a2 + 73);
  if (v208 < 1)
  {
    uint64_t v220 = 0;
  }
  else
  {
    uint64_t v209 = 0;
    uint64_t v210 = 0;
    int v211 = 0;
    if (v686 == 1) {
      char v212 = 6;
    }
    else {
      char v212 = 8;
    }
    do
    {
      __int32 v213 = v137->i32[v210];
      long long v214 = *(void **)(v3 + 14424);
      uint64_t v215 = v214[40];
      long long v216 = (_DWORD *)(v214[47] + 12 * v213);
      long long v217 = (char *)a2[24] + v209;
      *long long v217 = *v216;
      v217[1] = v216[1];
      v217[2] = v216[2];
      int v218 = *(__int16 *)(v215 + 24 * v213);
      *((_WORD *)a2[29] + v210) = *(_WORD *)(v215 + 24 * v213);
      if (v218)
      {
        unsigned int v219 = **(_DWORD **)(v215 + 24 * v213 + 8);
        memcpy((char *)a2[25] + (int)(v210 << v212), (const void *)(*(void *)(v214[38] + 880 * (v219 & 0x7FFF) + 384) + (v219 >> 15 << v212)), __na);
        int v208 = *((_DWORD *)a2 + 73);
      }
      v211 += v218;
      ++v210;
      v209 += 12;
      uint64_t v3 = a1;
    }
    while (v210 < v208);
    uint64_t v220 = v211;
  }
  a2[27] = malloc_type_malloc(8 * v220, 0x9F74F4A7uLL);
  size_t v221 = 2 * v220;
  long long v222 = a2;
  a2[28] = malloc_type_malloc(v221, 0x1000040BDFB0063uLL);
  int v223 = *((_DWORD *)a2 + 73);
  if (v223 >= 1)
  {
    uint64_t v224 = 0;
    LODWORD(v225) = 0;
    do
    {
      __int32 v226 = v137->i32[v224];
      uint64_t v227 = *(void *)(*(void *)(v3 + 14424) + 320);
      long long v228 = (uint64_t *)(v227 + 24 * v226);
      if (*v228 >= 1)
      {
        uint64_t v229 = 0;
        long long v230 = (void *)(v227 + 24 * v226 + 8);
        uint64_t v225 = (int)v225;
        do
        {
          info[0] = 0;
          unsigned int v231 = *(_DWORD *)(*v230 + 4 * v229) & 0x7FFF;
          unint64_t v232 = (unint64_t)*(unsigned int *)(*v230 + 4 * v229) >> 15;
          long long v233 = (_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 14424) + 304) + 880 * v231 + 376) + 8 * v232);
          long long v234 = v222[27];
          v234[2 * v225] = *v233;
          v234[2 * (int)v225 + 1] = v233[1];
          *((_WORD *)v222[28] + v225) = v231;
          info[0].numer = (int)(v231 - (v697 - v703 + 1)) % v731;
          info[0].denom = v232;
          unsigned int v235 = ((uint64_t (*)(mach_timebase_info *, void))v749)(info, (int)v748);
          if (LODWORD(v747.tv_sec))
          {
            unsigned int v236 = v235;
            uint64_t v237 = *(void *)(v750 + 8 * (v235 % LODWORD(v747.tv_sec)));
            if (v237)
            {
              while (v236 != *(_DWORD *)(v237 + 8)
                   || (*((unsigned int (**)(mach_timebase_info *, void, void))&v749 + 1))(info, *(void *)v237, (int)v748))
              {
                uint64_t v237 = *(void *)(v237 + 24);
                if (!v237) {
                  goto LABEL_162;
                }
              }
              long long v238 = *(int **)(v237 + 16);
              if (v238) {
                *((_WORD *)a2[4] + *v23_Block_object_dispose(&STACK[0x220], 8) = v224;
              }
            }
          }
LABEL_162:
          ++v225;
          ++v229;
          long long v222 = a2;
        }
        while (*v228 > v229);
        int v223 = *((_DWORD *)a2 + 73);
        long long v137 = v721;
      }
      ++v224;
    }
    while (v224 < v223);
  }
  a2[32] = malloc_type_malloc(4 * v703, 0x100004052888210uLL);
  size_t v239 = 48 * v703;
  a2[33] = malloc_type_malloc(v239, 0xFFEAD3A3uLL);
  float v50 = a2;
  a2[34] = malloc_type_malloc(36 * v703, 0x51322E9DuLL);
  a2[35] = malloc_type_malloc(8 * v703, 0x71992A8CuLL);
  a2[30] = malloc_type_malloc(v239, 0xFD21E773uLL);
  a2[31] = malloc_type_malloc(8 * v703, 0x100004000313F17uLL);
  if (v703 >= 1)
  {
    uint64_t v240 = 0;
    uint64_t v241 = 0;
    uint64_t v242 = 0;
    uint64_t v243 = 0;
    do
    {
      float v244 = (long long *)(*(void *)(v3 + 7216) + v240);
      uint64_t v245 = *(void *)(*(void *)(v3 + 14424) + 304) + 880 * ((v697 + v731 - v703 + 1 + (int)v243) % v731);
      *((_DWORD *)a2[32] + v243) = *((_DWORD *)v244 + 41);
      long long v246 = (char *)a2[33] + v241;
      long long v247 = *(long long *)((char *)v244 + 116);
      long long v248 = *(long long *)((char *)v244 + 148);
      v246[1] = *(long long *)((char *)v244 + 132);
      v246[2] = v248;
      *long long v246 = v247;
      uint64_t v249 = (uint64_t)a2[34] + 4 * v242;
      long long v250 = *v244;
      long long v251 = v244[1];
      *(_DWORD *)(v249 + 32) = *((_DWORD *)v244 + 8);
      *(_OWORD *)uint64_t v249 = v250;
      *(_OWORD *)(v249 + 16) = v251;
      uint64_t v252 = 8 * v243;
      *(void *)((char *)a2[35] + v252) = *(void *)((char *)v244 + 36);
      long long v253 = (float32x4_t *)((char *)a2[30] + v241);
      *long long v253 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v245), *(float64x2_t *)(v245 + 16));
      v253[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v245 + 32)), *(float64x2_t *)(v245 + 48));
      v253[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v245 + 64)), *(float64x2_t *)(v245 + 80));
      *(void *)((char *)a2[31] + v252) = *(void *)(v245 + 504);
      ++v243;
      v242 += 9;
      v241 += 48;
      v240 += 168;
    }
    while (v703 != v243);
  }
  free(v137);
  int v93 = v704;
  unint64_t v94 = v704;
LABEL_175:
  v50[8] = malloc_type_malloc(4 * (int)v94, 0x100004052888210uLL);
  long long v254 = (char *)malloc_type_malloc(4 * (int)v94, 0x100004052888210uLL);
  v50[9] = v254;
  if (v93 < 1) {
    goto LABEL_188;
  }
  uint64_t v255 = *(void *)(v3 + 11520);
  long long v256 = (char *)v50[8];
  uint64_t v257 = *(void *)(v3 + 11544);
  if (v94 < 0x10)
  {
    uint64_t v258 = 0;
LABEL_186:
    uint64_t v266 = v94 - v258;
    uint64_t v267 = 4 * v258;
    float32x2_t v268 = &v254[4 * v258];
    float64x2_t v269 = (int *)(v257 + v267);
    uint64_t v270 = &v256[v267];
    int64x2_t v271 = (int *)(v255 + v267);
    do
    {
      int v272 = *v271++;
      *(_DWORD *)uint64_t v270 = v272;
      v270 += 4;
      int v273 = *v269++;
      *(_DWORD *)float32x2_t v268 = v273;
      v268 += 4;
      --v266;
    }
    while (v266);
    goto LABEL_188;
  }
  uint64_t v258 = 0;
  if ((unint64_t)(v254 - v256) < 0x20) {
    goto LABEL_186;
  }
  if ((unint64_t)&v256[-v255] < 0x20) {
    goto LABEL_186;
  }
  if ((unint64_t)(v257 - (void)v256) < 0x20) {
    goto LABEL_186;
  }
  if ((unint64_t)&v254[-v255] < 0x20) {
    goto LABEL_186;
  }
  if ((unint64_t)&v254[-v257] < 0x20) {
    goto LABEL_186;
  }
  uint64_t v258 = v94 & 0xFFFFFFF8;
  long long v259 = (long long *)(v255 + 16);
  long long v260 = v256 + 16;
  long long v261 = (long long *)(v257 + 16);
  long long v262 = v254 + 16;
  uint64_t v263 = v258;
  do
  {
    long long v264 = *v259;
    *(v260 - 1) = *(v259 - 1);
    *long long v260 = v264;
    long long v265 = *v261;
    v259 += 2;
    *(v262 - 1) = *(v261 - 1);
    *long long v262 = v265;
    v260 += 2;
    v261 += 2;
    v262 += 2;
    v263 -= 8;
  }
  while (v263);
  if ((v94 & 7) != 0) {
    goto LABEL_186;
  }
LABEL_188:
  *((_DWORD *)v50 + 10) = *(_DWORD *)(v3 + 1256);
  *((_DWORD *)v50 + 11) = *(_DWORD *)(v3 + 1260);
  *((_DWORD *)v50 + 12) = *(_DWORD *)(v3 + 1264);
  *((_DWORD *)v50 + 22) = v702;
  *((_DWORD *)v50 + 21) = *(_DWORD *)(v3 + 2128);
  *((_DWORD *)v50 + 23) = *(void *)(v3 + 1936);
  uint64_t v274 = *(void *)(v3 + 1016);
  if (v274) {
    LODWORD(v274) = *(_DWORD *)(v274 + 48);
  }
  *((_DWORD *)v50 + 24) = v274;
  *((_DWORD *)v50 + 25) = *(void *)(v3 + 2008);
  *((_DWORD *)v50 + 20) = v93;
  *((_DWORD *)v50 + 14) = *(_DWORD *)(v3 + 8056);
  if (*(_DWORD *)(v3 + 3076))
  {
    uint64_t v275 = *(void *)(v3 + 2984);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v276 = v275 * info[0].numer;
    float v50 = a2;
    LODWORD(v277) = info[0].denom;
    *((double *)a2 + 3_Block_object_dispose(&STACK[0x220], 8) = (double)v276 / ((double)v277 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 3292)) {
      goto LABEL_192;
    }
  }
  else
  {
    *((double *)v50 + 3_Block_object_dispose(&STACK[0x220], 8) = (double)*(uint64_t *)(v3 + 2976) * 0.000000001;
    if (*(_DWORD *)(v3 + 3292))
    {
LABEL_192:
      uint64_t v278 = *(void *)(v3 + 3200);
      info[0] = 0;
      mach_timebase_info(info);
      uint64_t v279 = v278 * info[0].numer;
      float v50 = a2;
      LODWORD(v280) = info[0].denom;
      *((double *)a2 + 39) = (double)v279 / ((double)v280 * 1000000.0) * 0.001;
      if (*(_DWORD *)(v3 + 3508)) {
        goto LABEL_193;
      }
      goto LABEL_221;
    }
  }
  *((double *)v50 + 39) = (double)*(uint64_t *)(v3 + 3192) * 0.000000001;
  if (*(_DWORD *)(v3 + 3508))
  {
LABEL_193:
    uint64_t v281 = *(void *)(v3 + 3416);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v282 = v281 * info[0].numer;
    float v50 = a2;
    LODWORD(v283) = info[0].denom;
    *((double *)a2 + 40) = (double)v282 / ((double)v283 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 3724)) {
      goto LABEL_194;
    }
    goto LABEL_222;
  }
LABEL_221:
  *((double *)v50 + 40) = (double)*(uint64_t *)(v3 + 3408) * 0.000000001;
  if (*(_DWORD *)(v3 + 3724))
  {
LABEL_194:
    uint64_t v284 = *(void *)(v3 + 3632);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v285 = v284 * info[0].numer;
    float v50 = a2;
    LODWORD(v286) = info[0].denom;
    *((double *)a2 + 41) = (double)v285 / ((double)v286 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 3940)) {
      goto LABEL_195;
    }
    goto LABEL_223;
  }
LABEL_222:
  *((double *)v50 + 41) = (double)*(uint64_t *)(v3 + 3624) * 0.000000001;
  if (*(_DWORD *)(v3 + 3940))
  {
LABEL_195:
    uint64_t v287 = *(void *)(v3 + 3848);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v288 = v287 * info[0].numer;
    float v50 = a2;
    LODWORD(v289) = info[0].denom;
    *((double *)a2 + 42) = (double)v288 / ((double)v289 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 4156)) {
      goto LABEL_196;
    }
    goto LABEL_224;
  }
LABEL_223:
  *((double *)v50 + 42) = (double)*(uint64_t *)(v3 + 3840) * 0.000000001;
  if (*(_DWORD *)(v3 + 4156))
  {
LABEL_196:
    uint64_t v290 = *(void *)(v3 + 4064);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v291 = v290 * info[0].numer;
    float v50 = a2;
    LODWORD(v292) = info[0].denom;
    *((double *)a2 + 45) = (double)v291 / ((double)v292 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 6124)) {
      goto LABEL_197;
    }
    goto LABEL_225;
  }
LABEL_224:
  *((double *)v50 + 45) = (double)*(uint64_t *)(v3 + 4056) * 0.000000001;
  if (*(_DWORD *)(v3 + 6124))
  {
LABEL_197:
    uint64_t v293 = *(void *)(v3 + 6032);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v294 = v293 * info[0].numer;
    float v50 = a2;
    LODWORD(v295) = info[0].denom;
    *((double *)a2 + 43) = (double)v294 / ((double)v295 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 6340)) {
      goto LABEL_198;
    }
    goto LABEL_226;
  }
LABEL_225:
  *((double *)v50 + 43) = (double)*(uint64_t *)(v3 + 6024) * 0.000000001;
  if (*(_DWORD *)(v3 + 6340))
  {
LABEL_198:
    uint64_t v296 = *(void *)(v3 + 6248);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v297 = v296 * info[0].numer;
    float v50 = a2;
    LODWORD(v29_Block_object_dispose(&STACK[0x220], 8) = info[0].denom;
    *((double *)a2 + 44) = (double)v297 / ((double)v298 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 6556)) {
      goto LABEL_199;
    }
    goto LABEL_227;
  }
LABEL_226:
  *((double *)v50 + 44) = (double)*(uint64_t *)(v3 + 6240) * 0.000000001;
  if (*(_DWORD *)(v3 + 6556))
  {
LABEL_199:
    uint64_t v299 = *(void *)(v3 + 6464);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v300 = v299 * info[0].numer;
    float v50 = a2;
    LODWORD(v301) = info[0].denom;
    *((double *)a2 + 46) = (double)v300 / ((double)v301 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 6772)) {
      goto LABEL_200;
    }
    goto LABEL_228;
  }
LABEL_227:
  *((double *)v50 + 46) = (double)*(uint64_t *)(v3 + 6456) * 0.000000001;
  if (*(_DWORD *)(v3 + 6772))
  {
LABEL_200:
    uint64_t v302 = *(void *)(v3 + 6680);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v303 = v302 * info[0].numer;
    float v50 = a2;
    LODWORD(v304) = info[0].denom;
    *((double *)a2 + 47) = (double)v303 / ((double)v304 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 6988)) {
      goto LABEL_201;
    }
    goto LABEL_229;
  }
LABEL_228:
  *((double *)v50 + 47) = (double)*(uint64_t *)(v3 + 6672) * 0.000000001;
  if (*(_DWORD *)(v3 + 6988))
  {
LABEL_201:
    uint64_t v305 = *(void *)(v3 + 6896);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v306 = v305 * info[0].numer;
    float v50 = a2;
    LODWORD(v307) = info[0].denom;
    *((double *)a2 + 4_Block_object_dispose(&STACK[0x220], 8) = (double)v306 / ((double)v307 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 7204)) {
      goto LABEL_202;
    }
    goto LABEL_230;
  }
LABEL_229:
  *((double *)v50 + 4_Block_object_dispose(&STACK[0x220], 8) = (double)*(uint64_t *)(v3 + 6888) * 0.000000001;
  if (*(_DWORD *)(v3 + 7204))
  {
LABEL_202:
    uint64_t v308 = *(void *)(v3 + 7112);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v309 = v308 * info[0].numer;
    float v50 = a2;
    LODWORD(v310) = info[0].denom;
    *((double *)a2 + 49) = (double)v309 / ((double)v310 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 11484)) {
      goto LABEL_203;
    }
    goto LABEL_231;
  }
LABEL_230:
  *((double *)v50 + 49) = (double)*(uint64_t *)(v3 + 7104) * 0.000000001;
  if (*(_DWORD *)(v3 + 11484))
  {
LABEL_203:
    uint64_t v311 = *(void *)(v3 + 11392);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v312 = v311 * info[0].numer;
    float v50 = a2;
    LODWORD(v313) = info[0].denom;
    *((double *)a2 + 50) = (double)v312 / ((double)v313 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 8276)) {
      goto LABEL_204;
    }
    goto LABEL_232;
  }
LABEL_231:
  *((double *)v50 + 50) = (double)*(uint64_t *)(v3 + 11384) * 0.000000001;
  if (*(_DWORD *)(v3 + 8276))
  {
LABEL_204:
    uint64_t v314 = *(void *)(v3 + 8184);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v315 = v314 * info[0].numer;
    float v50 = a2;
    LODWORD(v316) = info[0].denom;
    *((double *)a2 + 51) = (double)v315 / ((double)v316 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 8492)) {
      goto LABEL_205;
    }
    goto LABEL_233;
  }
LABEL_232:
  *((double *)v50 + 51) = (double)*(uint64_t *)(v3 + 8176) * 0.000000001;
  if (*(_DWORD *)(v3 + 8492))
  {
LABEL_205:
    uint64_t v317 = *(void *)(v3 + 8400);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v318 = v317 * info[0].numer;
    float v50 = a2;
    LODWORD(v319) = info[0].denom;
    *((double *)a2 + 52) = (double)v318 / ((double)v319 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 8708)) {
      goto LABEL_206;
    }
    goto LABEL_234;
  }
LABEL_233:
  *((double *)v50 + 52) = (double)*(uint64_t *)(v3 + 8392) * 0.000000001;
  if (*(_DWORD *)(v3 + 8708))
  {
LABEL_206:
    uint64_t v320 = *(void *)(v3 + 8616);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v321 = v320 * info[0].numer;
    float v50 = a2;
    LODWORD(v322) = info[0].denom;
    *((double *)a2 + 53) = (double)v321 / ((double)v322 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 8924)) {
      goto LABEL_207;
    }
    goto LABEL_235;
  }
LABEL_234:
  *((double *)v50 + 53) = (double)*(uint64_t *)(v3 + 8608) * 0.000000001;
  if (*(_DWORD *)(v3 + 8924))
  {
LABEL_207:
    uint64_t v323 = *(void *)(v3 + 8832);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v324 = v323 * info[0].numer;
    float v50 = a2;
    LODWORD(v325) = info[0].denom;
    *((double *)a2 + 54) = (double)v324 / ((double)v325 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 9140)) {
      goto LABEL_208;
    }
    goto LABEL_236;
  }
LABEL_235:
  *((double *)v50 + 54) = (double)*(uint64_t *)(v3 + 8824) * 0.000000001;
  if (*(_DWORD *)(v3 + 9140))
  {
LABEL_208:
    uint64_t v326 = *(void *)(v3 + 9048);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v327 = v326 * info[0].numer;
    float v50 = a2;
    LODWORD(v32_Block_object_dispose(&STACK[0x220], 8) = info[0].denom;
    *((double *)a2 + 55) = (double)v327 / ((double)v328 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 9356)) {
      goto LABEL_209;
    }
    goto LABEL_237;
  }
LABEL_236:
  *((double *)v50 + 55) = (double)*(uint64_t *)(v3 + 9040) * 0.000000001;
  if (*(_DWORD *)(v3 + 9356))
  {
LABEL_209:
    uint64_t v329 = *(void *)(v3 + 9264);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v330 = v329 * info[0].numer;
    float v50 = a2;
    LODWORD(v331) = info[0].denom;
    *((double *)a2 + 56) = (double)v330 / ((double)v331 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 7868)) {
      goto LABEL_210;
    }
    goto LABEL_238;
  }
LABEL_237:
  *((double *)v50 + 56) = (double)*(uint64_t *)(v3 + 9256) * 0.000000001;
  if (*(_DWORD *)(v3 + 7868))
  {
LABEL_210:
    uint64_t v332 = *(void *)(v3 + 7776);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v333 = v332 * info[0].numer;
    float v50 = a2;
    LODWORD(v334) = info[0].denom;
    *((double *)a2 + 57) = (double)v333 / ((double)v334 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 9916)) {
      goto LABEL_211;
    }
    goto LABEL_239;
  }
LABEL_238:
  *((double *)v50 + 57) = (double)*(uint64_t *)(v3 + 7768) * 0.000000001;
  if (*(_DWORD *)(v3 + 9916))
  {
LABEL_211:
    uint64_t v335 = *(void *)(v3 + 9824);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v336 = v335 * info[0].numer;
    float v50 = a2;
    LODWORD(v337) = info[0].denom;
    *((double *)a2 + 5_Block_object_dispose(&STACK[0x220], 8) = (double)v336 / ((double)v337 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 11268)) {
      goto LABEL_212;
    }
    goto LABEL_240;
  }
LABEL_239:
  *((double *)v50 + 5_Block_object_dispose(&STACK[0x220], 8) = (double)*(uint64_t *)(v3 + 9816) * 0.000000001;
  if (*(_DWORD *)(v3 + 11268))
  {
LABEL_212:
    uint64_t v338 = *(void *)(v3 + 11176);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v339 = v338 * info[0].numer;
    float v50 = a2;
    LODWORD(v340) = info[0].denom;
    *((double *)a2 + 59) = (double)v339 / ((double)v340 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 12076)) {
      goto LABEL_213;
    }
    goto LABEL_241;
  }
LABEL_240:
  *((double *)v50 + 59) = (double)*(uint64_t *)(v3 + 11168) * 0.000000001;
  if (*(_DWORD *)(v3 + 12076))
  {
LABEL_213:
    uint64_t v341 = *(void *)(v3 + 11984);
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v342 = v341 * info[0].numer;
    float v50 = a2;
    LODWORD(v343) = info[0].denom;
    *((double *)a2 + 60) = (double)v342 / ((double)v343 * 1000000.0) * 0.001;
    long long v344 = *(void **)(v3 + 1016);
    if (!v344) {
      goto LABEL_215;
    }
    goto LABEL_214;
  }
LABEL_241:
  *((double *)v50 + 60) = (double)*(uint64_t *)(v3 + 11976) * 0.000000001;
  long long v344 = *(void **)(v3 + 1016);
  if (v344) {
LABEL_214:
  }
    long long v344 = (void *)v344[95];
LABEL_215:
  v50[61] = v344;
  *((_DWORD *)v50 + 124) = 0;
  if (v752)
  {
    long long v345 = (void *)*((void *)&v751 + 1);
    if (*((void *)&v751 + 1))
    {
      do
      {
        long long v346 = (void *)v345[2];
        free(v345);
        long long v345 = v346;
      }
      while (v346);
    }
  }
  else
  {
    uint64_t tv_sec_low = LODWORD(v747.tv_sec);
    if (SLODWORD(v747.tv_sec) >= 1)
    {
      uint64_t v348 = 0;
      unsigned int v349 = 0;
      uint64_t v350 = v750;
      do
      {
        long long v351 = *(void **)(v350 + 8 * v348);
        if (v351)
        {
          long long v352 = v349;
          do
          {
            unsigned int v349 = v351;
            long long v351 = (void *)v351[3];
            v349[3] = v352;
            long long v352 = v349;
          }
          while (v351);
        }
        ++v348;
      }
      while (v348 != tv_sec_low);
      if (v349)
      {
        do
        {
          int v353 = (void *)v349[3];
          free(v349);
          unsigned int v349 = v353;
        }
        while (v353);
      }
    }
    free((void *)v750);
  }
}

void vl_stats_free(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 8));
    free(*(void **)a1);
    free(*(void **)(a1 + 16));
    free(*(void **)(a1 + 24));
    free(*(void **)(a1 + 32));
    free(*(void **)(a1 + 104));
    free(*(void **)(a1 + 112));
    free(*(void **)(a1 + 120));
    free(*(void **)(a1 + 128));
    free(*(void **)(a1 + 64));
    free(*(void **)(a1 + 72));
    free(*(void **)(a1 + 192));
    free(*(void **)(a1 + 200));
    free(*(void **)(a1 + 232));
    free(*(void **)(a1 + 216));
    free(*(void **)(a1 + 224));
    free(*(void **)(a1 + 256));
    free(*(void **)(a1 + 264));
    free(*(void **)(a1 + 272));
    free(*(void **)(a1 + 280));
    free(*(void **)(a1 + 240));
    float v2 = *(void **)(a1 + 248);
    free(v2);
  }
}

double vl_par_version@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 480) = 0u;
  *(_OWORD *)(a2 + 496) = 0u;
  *(_OWORD *)(a2 + 44_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a2 + 464) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 36_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 28_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 20_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 12_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  vl_par_default((char *)a2);
  printf("Verbose : ");
  printf("%s: %d \n", "vl_par_version", a1);
  putchar(10);
  if (a1 <= 1999)
  {
    switch(a1)
    {
      case 0:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        return result;
      case 1:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 152) = 2;
        return result;
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 134:
      case 149:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 204:
      case 207:
      case 208:
      case 209:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
      case 240:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 246:
      case 247:
      case 248:
      case 249:
      case 256:
      case 257:
      case 259:
      case 260:
      case 261:
      case 262:
      case 263:
      case 264:
      case 265:
      case 266:
      case 267:
      case 268:
      case 269:
      case 270:
      case 271:
      case 272:
      case 273:
      case 274:
      case 275:
      case 276:
      case 277:
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
      case 286:
      case 287:
      case 288:
      case 289:
      case 290:
      case 291:
      case 292:
      case 293:
      case 294:
      case 295:
      case 296:
      case 297:
      case 298:
      case 299:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 316:
      case 317:
      case 318:
      case 319:
      case 320:
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 334:
      case 335:
      case 336:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 352:
      case 353:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 367:
      case 368:
      case 369:
      case 370:
      case 371:
      case 372:
      case 373:
      case 374:
      case 375:
      case 376:
      case 377:
      case 378:
      case 379:
      case 380:
      case 381:
      case 382:
      case 383:
      case 384:
      case 385:
      case 386:
      case 387:
      case 388:
      case 389:
      case 390:
      case 391:
      case 392:
      case 393:
      case 394:
      case 395:
      case 396:
      case 397:
      case 398:
      case 399:
      case 405:
      case 406:
      case 407:
      case 408:
      case 409:
      case 414:
      case 417:
      case 418:
      case 419:
      case 422:
      case 423:
      case 424:
      case 426:
      case 427:
      case 428:
      case 429:
      case 430:
      case 431:
      case 432:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 476:
      case 477:
      case 478:
      case 479:
      case 481:
      case 482:
      case 483:
      case 484:
      case 485:
      case 486:
      case 487:
      case 488:
      case 489:
      case 490:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 496:
      case 497:
      case 498:
      case 499:
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 540:
      case 541:
      case 542:
      case 543:
      case 544:
      case 545:
      case 546:
      case 547:
      case 548:
      case 549:
      case 550:
      case 551:
      case 552:
      case 553:
      case 554:
      case 555:
      case 556:
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
      case 563:
      case 564:
      case 565:
      case 566:
      case 567:
      case 568:
      case 569:
      case 570:
      case 571:
      case 572:
      case 573:
      case 574:
      case 575:
      case 576:
      case 577:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
      case 586:
      case 587:
      case 588:
      case 589:
      case 590:
      case 591:
      case 592:
      case 593:
      case 594:
      case 595:
      case 596:
      case 597:
      case 598:
      case 599:
      case 600:
      case 601:
      case 602:
      case 603:
      case 604:
      case 605:
      case 606:
      case 607:
      case 608:
      case 609:
      case 610:
      case 611:
      case 612:
      case 613:
      case 614:
      case 615:
      case 616:
      case 617:
      case 618:
      case 619:
      case 620:
      case 621:
      case 622:
      case 623:
      case 624:
      case 625:
      case 626:
      case 627:
      case 628:
      case 629:
      case 630:
      case 631:
      case 632:
      case 633:
      case 634:
      case 635:
      case 636:
      case 637:
      case 638:
      case 639:
      case 640:
      case 641:
      case 642:
      case 643:
      case 644:
      case 645:
      case 646:
      case 647:
      case 648:
      case 649:
      case 650:
      case 651:
      case 652:
      case 653:
      case 654:
      case 655:
      case 656:
      case 657:
      case 658:
      case 659:
      case 660:
      case 661:
      case 662:
      case 663:
      case 664:
      case 665:
      case 666:
      case 667:
      case 668:
      case 669:
      case 670:
      case 671:
      case 672:
      case 673:
      case 674:
      case 675:
      case 676:
      case 677:
      case 678:
      case 679:
      case 680:
      case 681:
      case 682:
      case 683:
      case 684:
      case 685:
      case 686:
      case 687:
      case 688:
      case 689:
      case 690:
      case 691:
      case 692:
      case 693:
      case 694:
      case 695:
      case 696:
      case 697:
      case 698:
      case 699:
      case 700:
      case 701:
      case 702:
      case 703:
      case 704:
      case 705:
      case 710:
      case 711:
      case 712:
      case 713:
      case 714:
      case 715:
      case 716:
      case 717:
      case 718:
      case 719:
      case 720:
      case 721:
      case 722:
      case 723:
      case 724:
      case 725:
      case 726:
      case 727:
      case 728:
      case 729:
      case 730:
      case 731:
      case 732:
      case 733:
      case 734:
      case 735:
      case 736:
      case 737:
      case 738:
      case 739:
      case 740:
      case 741:
      case 742:
      case 743:
      case 744:
      case 745:
      case 746:
      case 747:
      case 748:
      case 749:
      case 750:
      case 751:
      case 752:
      case 753:
      case 754:
      case 755:
      case 756:
      case 757:
      case 758:
      case 759:
      case 760:
      case 761:
      case 762:
      case 763:
      case 764:
      case 765:
      case 766:
      case 767:
      case 768:
      case 769:
      case 770:
      case 771:
      case 772:
      case 773:
      case 774:
      case 775:
      case 776:
      case 777:
      case 778:
      case 779:
      case 780:
      case 781:
      case 782:
      case 783:
      case 784:
      case 785:
      case 786:
      case 787:
      case 788:
      case 789:
      case 790:
      case 791:
      case 792:
      case 793:
      case 794:
      case 795:
      case 796:
      case 797:
      case 798:
      case 799:
      case 801:
      case 802:
      case 803:
      case 804:
      case 805:
      case 806:
      case 807:
      case 808:
      case 809:
      case 810:
      case 811:
      case 812:
      case 813:
      case 814:
      case 815:
      case 816:
      case 817:
      case 818:
      case 819:
      case 820:
      case 821:
      case 822:
      case 823:
      case 824:
      case 825:
      case 826:
      case 827:
      case 828:
      case 829:
      case 830:
      case 831:
      case 832:
      case 833:
      case 834:
      case 835:
      case 836:
      case 837:
      case 838:
      case 839:
      case 840:
      case 841:
      case 842:
      case 843:
      case 844:
      case 845:
      case 846:
      case 847:
      case 848:
      case 849:
        goto LABEL_343;
      case 4:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 152) = 2;
        goto LABEL_421;
      case 10:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 12_Block_object_dispose(&STACK[0x220], 8) = 1;
        return result;
      case 102:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 176) = 8;
        *(_DWORD *)(a2 + 252) = 1065353216;
        return result;
      case 103:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 176) = 8;
        *(_DWORD *)(a2 + 252) = 1065353216;
        *(_DWORD *)(a2 + 500) = 1;
        *(_DWORD *)(a2 + 300) = 1;
        return result;
      case 104:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 176) = 8;
        *(_DWORD *)(a2 + 252) = 1065353216;
        *(_DWORD *)(a2 + 300) = 1;
        return result;
      case 105:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 176) = 8;
        *(_DWORD *)(a2 + 252) = 1065353216;
        *(_DWORD *)(a2 + 304) = 1;
        return result;
      case 106:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 176) = 8;
        uint64_t v7 = a2 + 176;
        *(_DWORD *)(v7 + 76) = 1065353216;
        *(_DWORD *)(v7 + 324) = 1;
        *(void *)(v7 + 124) = 0x100000001;
        return result;
      case 131:
        uint64_t v8 = (void *)a2;
        return vl_par_ver_131(v8);
      case 132:
        uint64_t v8 = (void *)a2;
        return vl_par_ver_131(v8);
      case 133:
        return vl_par_ver_133((void *)a2);
      case 135:
        uint64_t v8 = (void *)a2;
        return vl_par_ver_131(v8);
      case 136:
        return vl_par_ver_136((void *)a2);
      case 137:
        *(float *)&double result = vl_par_ver_137((void *)a2);
        return result;
      case 138:
        return vl_par_ver_138((void *)a2);
      case 139:
        return vl_par_ver_139((void *)a2);
      case 140:
        return vl_par_ver_140((void *)a2);
      case 141:
        *(float *)&double result = vl_par_ver_141((void *)a2);
        return result;
      case 142:
        return vl_par_ver_142((void *)a2);
      case 143:
        return vl_par_ver_143((void *)a2);
      case 144:
        return vl_par_ver_144((void *)a2);
      case 145:
        return vl_par_ver_145((void *)a2);
      case 146:
        *(float *)&double result = vl_par_ver_146((void *)a2);
        return result;
      case 147:
        return vl_par_ver_147((void *)a2);
      case 148:
        return vl_par_ver_148((void *)a2);
      case 150:
        return vl_par_ver_150((void *)a2);
      case 151:
        return vl_par_ver_151((void *)a2);
      case 152:
        return vl_par_ver_152((void *)a2);
      case 153:
        return vl_par_ver_153((void *)a2);
      case 154:
        *(float *)&double result = vl_par_ver_154((void *)a2);
        return result;
      case 155:
        return vl_par_ver_155((void *)a2);
      case 156:
        *(float *)&double result = vl_par_ver_156((void *)a2);
        return result;
      case 157:
        uint64_t v6 = (void *)a2;
        goto LABEL_30;
      case 200:
        return vl_par_ver_200((void *)a2);
      case 201:
        return vl_par_ver_201((void *)a2);
      case 202:
        return vl_par_ver_202((void *)a2);
      case 203:
        return vl_par_ver_203((void *)a2);
      case 205:
        return vl_par_ver_205((void *)a2);
      case 206:
        return vl_par_ver_206((void *)a2);
      case 210:
        return vl_par_ver_210((void *)a2);
      case 227:
        return vl_par_ver_227((void *)a2);
      case 228:
        return vl_par_ver_228((void *)a2);
      case 250:
        return vl_par_ver_250((void *)a2);
      case 251:
        return vl_par_ver_251((void *)a2);
      case 252:
        return vl_par_ver_252((void *)a2);
      case 253:
        float v9 = (void *)a2;
        return vl_par_ver_253(v9);
      case 254:
        return vl_par_ver_254((void *)a2);
      case 255:
        return vl_par_ver_255((void *)a2);
      case 258:
        float v9 = (void *)a2;
        return vl_par_ver_253(v9);
      case 300:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 84) = 12000;
        *(void *)(a2 + 52) = 0xB3CF5C28FLL;
        *(void *)&double result = 0x6700000002;
        *(void *)(a2 + 152) = 0x6700000002;
        return result;
      case 301:
        return vl_par_ver_301(a2);
      case 302:
        return vl_par_ver_302(a2);
      case 303:
        return vl_par_ver_303(a2);
      case 304:
        return vl_par_ver_304(a2);
      case 305:
        return vl_par_ver_305(a2);
      case 306:
        return vl_par_ver_306(a2);
      case 307:
        return vl_par_ver_307(a2);
      case 308:
        return vl_par_ver_308(a2);
      case 400:
        return vl_par_ver_400((void *)a2);
      case 401:
        *(float *)&double result = vl_par_ver_401((void *)a2);
        return result;
      case 402:
        return vl_par_ver_402((void *)a2);
      case 403:
        return vl_par_ver_403((void *)a2);
      case 404:
        return vl_par_ver_404((void *)a2);
      case 410:
        return vl_par_ver_410((void *)a2);
      case 411:
        return vl_par_ver_411((void *)a2);
      case 412:
        return vl_par_ver_412((void *)a2);
      case 413:
        return vl_par_ver_413((void *)a2);
      case 415:
        return vl_par_ver_415((void *)a2);
      case 416:
        return vl_par_ver_416((void *)a2);
      case 420:
        return vl_par_ver_420((void *)a2);
      case 421:
        return vl_par_ver_421((void *)a2);
      case 425:
        return vl_par_ver_425((void *)a2);
      case 433:
        return vl_par_ver_433((void *)a2);
      case 444:
        return vl_par_ver_444((void *)a2);
      case 445:
        return vl_par_ver_445((void *)a2);
      case 446:
        return vl_par_ver_446((void *)a2);
      case 447:
        return vl_par_ver_447((void *)a2);
      case 448:
        return vl_par_ver_448((void *)a2);
      case 449:
        return vl_par_ver_449((void *)a2);
      case 450:
        return vl_par_ver_450((void *)a2);
      case 451:
        return vl_par_ver_451((void *)a2);
      case 452:
        return vl_par_ver_452((void *)a2);
      case 453:
        return vl_par_ver_453((void *)a2);
      case 454:
        return vl_par_ver_454((void *)a2);
      case 455:
        return vl_par_ver_455((void *)a2);
      case 456:
        return vl_par_ver_456((void *)a2);
      case 457:
        return vl_par_ver_457((void *)a2);
      case 458:
        return vl_par_ver_458((void *)a2);
      case 459:
        return vl_par_ver_459((void *)a2);
      case 460:
        return vl_par_ver_460((void *)a2);
      case 461:
        return vl_par_ver_461((void *)a2);
      case 462:
        return vl_par_ver_462((void *)a2);
      case 463:
        return vl_par_ver_463((void *)a2);
      case 464:
        double result = vl_par_ver_463((void *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        return result;
      case 465:
        return vl_par_ver_465((void *)a2);
      case 466:
        vl_par_ver_463((void *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        *(_DWORD *)(a2 + 236) = 1;
        double result = 0.0000976562877;
        *(void *)(a2 + 240) = 0x3F19999A3F5EB852;
        *(_DWORD *)(a2 + 24_Block_object_dispose(&STACK[0x220], 8) = 1128792064;
        return result;
      case 467:
        double result = vl_par_ver_463((void *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        *(_DWORD *)(a2 + 552) = 0;
        *(_DWORD *)(a2 + 640) = 1063675494;
        *(_DWORD *)(a2 + 300) = 0;
        return result;
      case 468:
        goto LABEL_20;
      case 469:
        double result = vl_par_ver_463((void *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        goto LABEL_300;
      case 470:
        double result = vl_par_ver_463((void *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        *(_DWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
LABEL_300:
        *(_DWORD *)(a2 + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
        return result;
      case 471:
        double result = vl_par_ver_463((void *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        *(_DWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
        *(_DWORD *)(a2 + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
        *(_DWORD *)(a2 + 656) = 1;
        return result;
      case 472:
        vl_par_ver_472(a2);
        return result;
      case 473:
        return vl_par_ver_473(a2);
      case 474:
        vl_par_ver_474(a2);
        return result;
      case 475:
        return vl_par_ver_475(a2);
      case 480:
        *(float *)&double result = vl_par_ver_480((void *)a2);
        return result;
      case 706:
        return vl_par_ver_706((void *)a2);
      case 707:
        return vl_par_ver_707((void *)a2);
      case 708:
        return vl_par_ver_708((void *)a2);
      case 709:
        return vl_par_ver_709((void *)a2);
      case 800:
        return vl_par_ver_800((void *)a2);
      case 850:
        return vl_par_ver_850((void *)a2);
      case 851:
        return vl_par_ver_851((void *)a2);
      default:
        if (a1 == 1481)
        {
          double result = vl_par_ver_1481((void *)a2);
        }
        else
        {
          if (a1 != 1946) {
            goto LABEL_343;
          }
          uint64_t v6 = (void *)a2;
LABEL_30:
          *(float *)&double result = vl_par_ver_157(v6);
        }
        break;
    }
    return result;
  }
  if (a1 <= 4469)
  {
    if (a1 > 2099)
    {
      if (a1 != 2100)
      {
        if (a1 == 2200)
        {
LABEL_23:
          vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(void *)&double result = 0xFD00000000;
          *(void *)(a2 + 560) = 0xFD00000000;
          int v5 = 1060320051;
        }
        else
        {
          if (a1 != 2300)
          {
LABEL_343:
            printf("%sError : ", (const char *)&unk_21BB738AE);
            printf("%s: ver %d not implemented", "vl_par_version", a1);
            putchar(10);
            return result;
          }
LABEL_17:
          vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(void *)&double result = 0xFD00000000;
          *(void *)(a2 + 560) = 0xFD00000000;
          int v5 = 1053609165;
        }
        goto LABEL_24;
      }
LABEL_22:
      double result = vl_par_ver_463((void *)a2);
      *(_DWORD *)(a2 + 564) = 253;
      *(_DWORD *)(a2 + 552) = 0;
      *(_DWORD *)(a2 + 640) = 1063675494;
      *(_DWORD *)(a2 + 300) = 0;
    }
    else
    {
      if (a1 != 2000)
      {
        if (a1 != 2050)
        {
          if (a1 == 2051)
          {
            double result = vl_par_ver_463((void *)a2);
            *(_DWORD *)(a2 + 564) = 253;
            *(_DWORD *)(a2 + 552) = 0;
            *(_DWORD *)(a2 + 640) = 1063675494;
            *(_DWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
            *(_DWORD *)(a2 + 500) = 0;
            return result;
          }
          goto LABEL_343;
        }
LABEL_21:
        double result = vl_par_ver_463((void *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        *(_DWORD *)(a2 + 552) = 0;
        int v5 = 1063675494;
LABEL_24:
        *(_DWORD *)(a2 + 640) = v5;
        goto LABEL_25;
      }
LABEL_20:
      double result = vl_par_ver_463((void *)a2);
      *(_DWORD *)(a2 + 564) = 253;
    }
LABEL_25:
    *(_DWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
    return result;
  }
  switch(a1)
  {
    case 4470:
      return vl_par_ver_4470((void *)a2);
    case 4471:
      return vl_par_ver_4471((void *)a2);
    case 4472:
    case 4473:
    case 4474:
    case 4475:
    case 4476:
    case 4477:
    case 4478:
    case 4479:
    case 4482:
    case 4483:
    case 4484:
    case 4485:
    case 4486:
    case 4487:
    case 4488:
    case 4489:
    case 4492:
    case 4493:
    case 4494:
    case 4495:
    case 4496:
    case 4497:
    case 4498:
    case 4499:
    case 4500:
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4509:
    case 4510:
    case 4511:
    case 4512:
    case 4513:
    case 4514:
    case 4515:
    case 4516:
    case 4517:
    case 4518:
    case 4519:
    case 4520:
    case 4521:
    case 4522:
    case 4523:
    case 4524:
    case 4525:
    case 4526:
    case 4527:
    case 4528:
    case 4529:
    case 4530:
    case 4533:
    case 4534:
    case 4535:
    case 4536:
    case 4537:
    case 4538:
    case 4539:
    case 4540:
    case 4542:
    case 4543:
    case 4544:
    case 4545:
    case 4546:
    case 4547:
    case 4548:
    case 4549:
    case 4550:
    case 4552:
    case 4553:
    case 4554:
    case 4555:
    case 4556:
    case 4557:
    case 4558:
    case 4559:
    case 4560:
    case 4562:
    case 4563:
    case 4564:
    case 4565:
    case 4566:
    case 4567:
    case 4568:
    case 4569:
    case 4570:
    case 4577:
    case 4578:
    case 4579:
    case 4580:
    case 4581:
    case 4582:
    case 4583:
    case 4584:
    case 4585:
    case 4586:
    case 4587:
    case 4588:
    case 4589:
    case 4590:
    case 4591:
    case 4592:
    case 4593:
    case 4594:
    case 4595:
    case 4596:
    case 4597:
    case 4598:
    case 4599:
    case 4600:
    case 4603:
    case 4604:
    case 4605:
    case 4606:
    case 4607:
    case 4608:
    case 4609:
    case 4610:
    case 4611:
    case 4612:
    case 4613:
    case 4614:
    case 4615:
    case 4616:
    case 4617:
    case 4618:
    case 4619:
    case 4620:
    case 4621:
    case 4622:
    case 4623:
    case 4624:
    case 4625:
    case 4626:
    case 4627:
    case 4628:
    case 4629:
    case 4630:
    case 4637:
    case 4638:
    case 4639:
    case 4640:
    case 4645:
    case 4646:
    case 4647:
    case 4648:
    case 4649:
    case 4650:
    case 4653:
    case 4654:
    case 4655:
    case 4656:
    case 4657:
    case 4658:
    case 4659:
    case 4660:
    case 4663:
    case 4664:
    case 4665:
    case 4666:
    case 4667:
    case 4668:
    case 4669:
    case 4670:
    case 4671:
    case 4672:
    case 4673:
    case 4674:
    case 4675:
    case 4676:
    case 4677:
    case 4678:
    case 4679:
    case 4680:
    case 4685:
    case 4686:
    case 4687:
    case 4688:
    case 4689:
    case 4690:
    case 4691:
    case 4692:
    case 4693:
    case 4694:
    case 4695:
    case 4696:
    case 4697:
    case 4698:
    case 4699:
    case 4700:
    case 4701:
    case 4702:
    case 4703:
    case 4704:
    case 4705:
    case 4706:
    case 4707:
    case 4708:
    case 4709:
    case 4710:
    case 4711:
    case 4712:
    case 4713:
    case 4714:
    case 4715:
    case 4716:
    case 4717:
    case 4718:
    case 4719:
    case 4720:
    case 4721:
    case 4722:
    case 4723:
    case 4724:
    case 4725:
    case 4726:
    case 4727:
    case 4728:
    case 4729:
    case 4730:
    case 4734:
    case 4735:
    case 4736:
    case 4737:
    case 4738:
    case 4739:
    case 4740:
    case 4741:
    case 4742:
    case 4743:
    case 4744:
    case 4745:
    case 4746:
    case 4747:
    case 4748:
    case 4749:
    case 4750:
      goto LABEL_343;
    case 4480:
      return vl_par_ver_4480((void *)a2);
    case 4481:
      return vl_par_ver_4481((void *)a2);
    case 4490:
      return vl_par_ver_4490((void *)a2);
    case 4491:
      return vl_par_ver_4491((void *)a2);
    case 4531:
      return vl_par_ver_4531((void *)a2);
    case 4532:
      return vl_par_ver_4532((void *)a2);
    case 4541:
      return vl_par_ver_4541((void *)a2);
    case 4551:
      return vl_par_ver_4551((void *)a2);
    case 4561:
      return vl_par_ver_4561((void *)a2);
    case 4571:
      return vl_par_ver_4571((void *)a2);
    case 4572:
      return vl_par_ver_4572((void *)a2);
    case 4573:
      return vl_par_ver_4573((void *)a2);
    case 4574:
      return vl_par_ver_4574((void *)a2);
    case 4575:
      return vl_par_ver_4575((void *)a2);
    case 4576:
      return vl_par_ver_4576((void *)a2);
    case 4601:
      return vl_par_ver_4601((void *)a2);
    case 4602:
      return vl_par_ver_4602((void *)a2);
    case 4631:
      double result = vl_par_ver_463((void *)a2);
      goto LABEL_418;
    case 4632:
      double result = vl_par_ver_463((void *)a2);
      goto LABEL_420;
    case 4633:
      double result = vl_par_ver_463((void *)a2);
      *(_DWORD *)(a2 + 552) = 0;
      *(_DWORD *)(a2 + 640) = 1063675494;
      *(_DWORD *)(a2 + 176) = 8;
      *(_DWORD *)(a2 + 132) = 0;
      *(_DWORD *)(a2 + 10_Block_object_dispose(&STACK[0x220], 8) = 0;
      *(_DWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = 3009;
      *(_DWORD *)(a2 + 116) = 1;
      return result;
    case 4634:
      double result = vl_par_ver_463((void *)a2);
      unsigned __int16 v10 = 15204;
      goto LABEL_406;
    case 4635:
      double result = vl_par_ver_463((void *)a2);
      unsigned __int16 v10 = -16777;
      goto LABEL_406;
    case 4636:
      double result = vl_par_ver_463((void *)a2);
      unsigned __int16 v10 = -8389;
LABEL_406:
      *(_DWORD *)(a2 + 640) = v10 | 0x3F7F0000;
      return result;
    case 4641:
      double result = vl_par_ver_463((void *)a2);
      *(_DWORD *)(a2 + 564) = 253;
      goto LABEL_418;
    case 4642:
      double result = vl_par_ver_463((void *)a2);
      *(_DWORD *)(a2 + 564) = 253;
      goto LABEL_420;
    case 4643:
      vl_par_ver_463((void *)a2);
      *(_DWORD *)(a2 + 552) = 0;
      *(void *)&double result = 0xFD00000000;
      *(void *)(a2 + 560) = 0xFD00000000;
      *(_DWORD *)(a2 + 640) = 1053609165;
      return result;
    case 4644:
      vl_par_ver_463((void *)a2);
      *(_DWORD *)(a2 + 552) = 0;
      *(void *)&double result = 0xFD00000000;
      *(void *)(a2 + 560) = 0xFD00000000;
      *(_DWORD *)(a2 + 640) = 1060320051;
      return result;
    case 4651:
      return vl_par_ver_4651((void *)a2);
    case 4652:
      return vl_par_ver_4652((void *)a2);
    case 4661:
      vl_par_ver_463((void *)a2);
      *(_DWORD *)(a2 + 564) = 253;
      *(_DWORD *)(a2 + 236) = 1;
      double result = 0.0000976562877;
      *(void *)(a2 + 240) = 0x3F19999A3F5EB852;
      *(_DWORD *)(a2 + 24_Block_object_dispose(&STACK[0x220], 8) = 1128792064;
LABEL_418:
      *(_DWORD *)(a2 + 552) = 0;
      *(_DWORD *)(a2 + 640) = 1063675494;
      break;
    case 4662:
      vl_par_ver_463((void *)a2);
      *(_DWORD *)(a2 + 564) = 253;
      *(_DWORD *)(a2 + 236) = 1;
      double result = 0.0000976562877;
      *(void *)(a2 + 240) = 0x3F19999A3F5EB852;
      *(_DWORD *)(a2 + 24_Block_object_dispose(&STACK[0x220], 8) = 1128792064;
LABEL_420:
      *(_DWORD *)(a2 + 552) = 0;
      *(_DWORD *)(a2 + 640) = 1063675494;
LABEL_421:
      *(_DWORD *)(a2 + 176) = 8;
      break;
    case 4681:
      goto LABEL_21;
    case 4682:
      goto LABEL_22;
    case 4683:
      goto LABEL_23;
    case 4684:
      goto LABEL_17;
    case 4731:
      double result = vl_par_ver_4731(a2);
      break;
    case 4732:
      double result = vl_par_ver_4732(a2);
      break;
    case 4733:
      double result = vl_par_ver_4733(a2);
      break;
    case 4751:
      double result = vl_par_ver_4751(a2);
      break;
    case 4752:
      double result = vl_par_ver_4752(a2);
      break;
    default:
      switch(a1)
      {
        case 46311:
          double result = vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          *(_DWORD *)(a2 + 496) = 0;
          goto LABEL_438;
        case 46312:
          double result = vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          *(_DWORD *)(a2 + 496) = 1;
LABEL_438:
          *(_DWORD *)(a2 + 176) = 64;
          return result;
        case 46313:
        case 46314:
        case 46315:
        case 46316:
        case 46317:
        case 46318:
        case 46319:
        case 46320:
        case 46321:
        case 46322:
        case 46323:
        case 46324:
        case 46325:
        case 46326:
        case 46327:
        case 46328:
        case 46329:
        case 46330:
        case 46331:
        case 46332:
        case 46333:
        case 46334:
        case 46335:
        case 46336:
        case 46337:
        case 46338:
        case 46339:
        case 46340:
        case 46341:
        case 46342:
        case 46343:
        case 46344:
        case 46345:
        case 46346:
        case 46347:
        case 46348:
        case 46349:
        case 46350:
        case 46351:
        case 46352:
        case 46353:
        case 46354:
        case 46355:
        case 46356:
        case 46357:
        case 46358:
        case 46359:
        case 46360:
        case 46361:
        case 46362:
        case 46363:
        case 46364:
        case 46365:
        case 46366:
        case 46367:
        case 46368:
        case 46369:
        case 46370:
        case 46371:
        case 46372:
        case 46373:
        case 46374:
        case 46375:
        case 46376:
        case 46377:
        case 46378:
        case 46379:
        case 46380:
        case 46381:
        case 46382:
        case 46383:
        case 46384:
        case 46385:
        case 46386:
        case 46387:
        case 46388:
        case 46389:
        case 46390:
        case 46391:
        case 46392:
        case 46393:
        case 46394:
        case 46395:
        case 46396:
        case 46397:
        case 46398:
        case 46399:
        case 46400:
        case 46401:
        case 46402:
        case 46403:
        case 46404:
        case 46405:
        case 46406:
        case 46407:
        case 46408:
        case 46409:
        case 46410:
        case 46421:
        case 46422:
        case 46423:
        case 46424:
        case 46425:
        case 46426:
        case 46427:
        case 46428:
        case 46429:
        case 46431:
        case 46433:
        case 46437:
        case 46438:
        case 46439:
        case 46440:
          goto LABEL_343;
        case 46411:
          double result = vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          int v11 = 1063675494;
          goto LABEL_471;
        case 46412:
          double result = vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          int v12 = 1063675494;
          goto LABEL_473;
        case 46413:
          double result = vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          int v13 = 1063675494;
          goto LABEL_475;
        case 46414:
          return vl_par_ver_46414(a2);
        case 46415:
          double result = vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          int v14 = 1063675494;
          goto LABEL_480;
        case 46416:
          return vl_par_ver_46416(a2);
        case 46417:
          return vl_par_ver_46417(a2);
        case 46418:
          double result = vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          *(_DWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
          int v15 = 512;
          goto LABEL_482;
        case 46419:
          double result = vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          int v16 = 3022;
          goto LABEL_481;
        case 46420:
          double result = vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          int v16 = 3024;
          goto LABEL_481;
        case 46430:
          *(float *)&double result = vl_par_ver_46430((void *)a2);
          return result;
        case 46432:
          *(float *)&double result = vl_par_ver_46432((void *)a2);
          return result;
        case 46434:
          *(float *)&double result = vl_par_ver_46434((void *)a2);
          return result;
        case 46435:
          return vl_par_ver_46435((void *)a2);
        case 46436:
          return vl_par_ver_46436((void *)a2);
        case 46441:
          vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(void *)&double result = 0xFD00000000;
          *(void *)(a2 + 560) = 0xFD00000000;
          int v11 = 1060320051;
LABEL_471:
          *(_DWORD *)(a2 + 640) = v11;
          int v16 = 3011;
          goto LABEL_481;
        case 46442:
          vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(void *)&double result = 0xFD00000000;
          *(void *)(a2 + 560) = 0xFD00000000;
          int v12 = 1060320051;
LABEL_473:
          *(_DWORD *)(a2 + 640) = v12;
          *(_DWORD *)(a2 + 104) = 384;
          *(_DWORD *)(a2 + 116) = 0;
          *(_DWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = 3021;
          return result;
        case 46443:
          vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(void *)&double result = 0xFD00000000;
          *(void *)(a2 + 560) = 0xFD00000000;
          int v13 = 1060320051;
LABEL_475:
          *(_DWORD *)(a2 + 640) = v13;
          *(_DWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
          *(_DWORD *)(a2 + 116) = 0;
          return result;
        case 46444:
          return vl_par_ver_46444(a2);
        case 46445:
          vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(void *)&double result = 0xFD00000000;
          *(void *)(a2 + 560) = 0xFD00000000;
          int v14 = 1060320051;
LABEL_480:
          *(_DWORD *)(a2 + 640) = v14;
          int v16 = 3012;
LABEL_481:
          *(_DWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = v16;
          int v15 = 384;
LABEL_482:
          *(_DWORD *)(a2 + 104) = v15;
          *(_DWORD *)(a2 + 116) = 0;
          break;
        case 46446:
          double result = vl_par_ver_46446(a2);
          break;
        case 46447:
          double result = vl_par_ver_46447(a2);
          break;
        default:
          if (a1 != 46810) {
            goto LABEL_343;
          }
          vl_par_ver_463((void *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          *(_DWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
          *(void *)&double result = 0xFD00000000;
          *(void *)(a2 + 560) = 0xFD00000000;
          break;
      }
      break;
  }
  return result;
}

double vl_par_ver_131(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  double result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  return result;
}

double vl_par_ver_133(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  double result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 27) = 1082130432;
  return result;
}

double vl_par_ver_136(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  double result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 63) = 1056964608;
  return result;
}

float vl_par_ver_137(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  float result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  return result;
}

double vl_par_ver_138(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)&double result = 0xC800000001;
  a1[70] = 0xC800000001;
  return result;
}

double vl_par_ver_139(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *(void *)((char *)a1 + 18_Block_object_dispose(&STACK[0x220], 8) = 0x3F6666663F733333;
  *((_DWORD *)a1 + 40) = 0;
  *(void *)&double result = 0x271000000002;
  a1[22] = 0x271000000002;
  return result;
}

double vl_par_ver_140(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  double result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 44) = 16;
  return result;
}

float vl_par_ver_141(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  float result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  return result;
}

double vl_par_ver_142(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[19] = 0x6700000000;
  *(void *)&double result = 0x1400000001;
  a1[21] = 0x1400000001;
  return result;
}

double vl_par_ver_143(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *(void *)((char *)a1 + 18_Block_object_dispose(&STACK[0x220], 8) = 0x3F6666663F733333;
  *((_DWORD *)a1 + 40) = 0;
  *((_DWORD *)a1 + 140) = 1;
  *(void *)&double result = 0x271000000002;
  a1[22] = 0x271000000002;
  return result;
}

double vl_par_ver_144(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  double result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  return result;
}

double vl_par_ver_145(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  double result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 24) = 4;
  *((_DWORD *)a1 + 162) = 1;
  return result;
}

float vl_par_ver_146(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  float result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  return result;
}

double vl_par_ver_147(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  double result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  return result;
}

double vl_par_ver_148(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  *(void *)&double result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  return result;
}

double vl_par_ver_1481(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  a1[78] = 0x3FB657184AE74487;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  a1[70] = 0xFA00000001;
  *(void *)((char *)a1 + 18_Block_object_dispose(&STACK[0x220], 8) = 0x3F6666663F733333;
  *(void *)&double result = 0x271000000002;
  a1[22] = 0x271000000002;
  return result;
}

double vl_par_ver_150(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  double result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 125) = 0;
  *((_DWORD *)a1 + 27) = 1082130432;
  return result;
}

double vl_par_ver_151(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  double result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 125) = 0;
  *((_DWORD *)a1 + 27) = 1082130432;
  *((_DWORD *)a1 + 75) = 1;
  return result;
}

double vl_par_ver_152(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  double result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 125) = 0;
  *((_DWORD *)a1 + 27) = 1082130432;
  *(void *)((char *)a1 + 300) = 0x100000001;
  return result;
}

double vl_par_ver_153(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  double result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 125) = 0;
  *((_DWORD *)a1 + 27) = 1082130432;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

float vl_par_ver_154(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  float result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 101) = 0x40000000;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  return result;
}

double vl_par_ver_155(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  a1[22] = 0x271000000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)&double result = 0x12C00000010;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  return result;
}

float vl_par_ver_156(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  float result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 22) = 3006;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  return result;
}

float vl_par_ver_157(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  float result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  return result;
}

double vl_par_ver_200(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  double result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 27) = 1082130432;
  *((_DWORD *)a1 + 125) = 1;
  return result;
}

double vl_par_ver_201(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  double result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 27) = 1082130432;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 76) = 1;
  return result;
}

double vl_par_ver_202(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  double result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 27) = 1082130432;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  return result;
}

double vl_par_ver_203(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 125) = 1;
  *(void *)((char *)a1 + 300) = 0x100000001;
  double result = 3.49370689e-30;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x39D1B71740800000;
  return result;
}

double vl_par_ver_205(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 125) = 1;
  *(void *)((char *)a1 + 300) = 0x100000001;
  double result = 3.49370689e-30;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x39D1B71740800000;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_206(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)&double result = 0x6700000002;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  return result;
}

double vl_par_ver_210(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  double result = 1.30048408e-36;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  return result;
}

double vl_par_ver_227(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *(void *)((char *)a1 + 604) = 0;
  a1[74] = 0;
  double result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  return result;
}

double vl_par_ver_228(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *(void *)((char *)a1 + 604) = 0;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(void *)&double result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  return result;
}

double vl_par_ver_250(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x220], 8) = 2;
  *((_DWORD *)a1 + 125) = 1;
  *(void *)((char *)a1 + 300) = 0x100000001;
  double result = 3.49370689e-30;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x39D1B71740800000;
  *((_DWORD *)a1 + 72) = 0;
  return result;
}

double vl_par_ver_251(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)&double result = 0x6700000002;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_252(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *(void *)((char *)a1 + 604) = 0;
  a1[74] = 0;
  double result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_253(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)&double result = 0x6700000002;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 22) = 3004;
  *((_DWORD *)a1 + 125) = 0;
  return result;
}

double vl_par_ver_254(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *(void *)((char *)a1 + 604) = 0;
  a1[74] = 0;
  double result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  *((_DWORD *)a1 + 125) = 0;
  return result;
}

double vl_par_ver_255(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *(void *)((char *)a1 + 604) = 0;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(void *)&double result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_301(uint64_t a1)
{
  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 12000;
  *(void *)(a1 + 52) = 0xB3CF5C28FLL;
  *(void *)&double result = 0x6700000002;
  *(void *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_302(uint64_t a1)
{
  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 10000;
  *(void *)(a1 + 52) = 0xB3CF5C28FLL;
  *(void *)&double result = 0x6700000002;
  *(void *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_303(uint64_t a1)
{
  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 8000;
  *(void *)(a1 + 52) = 0xB3CF5C28FLL;
  *(void *)&double result = 0x6700000002;
  *(void *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_304(uint64_t a1)
{
  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 6000;
  *(void *)(a1 + 52) = 0xB3CF5C28FLL;
  *(void *)&double result = 0x6700000002;
  *(void *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_305(uint64_t a1)
{
  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 4000;
  *(void *)(a1 + 52) = 0xB3CF5C28FLL;
  *(void *)&double result = 0x6700000002;
  *(void *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_306(uint64_t a1)
{
  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 2000;
  *(void *)(a1 + 52) = 0xB3CF5C28FLL;
  *(void *)&double result = 0x6700000002;
  *(void *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_307(uint64_t a1)
{
  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 1000;
  *(void *)(a1 + 52) = 0xB3CF5C28FLL;
  *(void *)&double result = 0x6700000002;
  *(void *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_308(uint64_t a1)
{
  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 800;
  *(void *)(a1 + 52) = 0xB3CF5C28FLL;
  *(void *)&double result = 0x6700000002;
  *(void *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_400(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)&double result = 0x6700000002;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  return result;
}

float vl_par_ver_401(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  float result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 103) = 0;
  return result;
}

double vl_par_ver_402(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *(void *)((char *)a1 + 252) = 0x3FC0000040000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9E0;
  *(void *)&double result = 0x3C0000001ELL;
  a1[39] = 0x3C0000001ELL;
  return result;
}

double vl_par_ver_403(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 252) = 0x3FC0000040000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9E0;
  a1[39] = 0x3C0000001ELL;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(void *)&double result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_404(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 252) = 0x3FC0000040000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9E0;
  a1[39] = 0x3C0000001ELL;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(void *)&double result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  return result;
}

double vl_par_ver_410(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  *(void *)&double result = 0x780000001ELL;
  a1[39] = 0x780000001ELL;
  return result;
}

double vl_par_ver_411(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  *(void *)&double result = 0x1E0000001ELL;
  a1[39] = 0x1E0000001ELL;
  return result;
}

double vl_par_ver_412(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(void *)&double result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_413(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(void *)&double result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  *((_DWORD *)a1 + 22) = 3006;
  return result;
}

double vl_par_ver_415(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  *((_DWORD *)a1 + 92) = 1056964608;
  *((_DWORD *)a1 + 95) = 8;
  *(void *)&double result = 0xA00000001ELL;
  a1[39] = 0xA00000001ELL;
  return result;
}

double vl_par_ver_416(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  *((_DWORD *)a1 + 92) = 1053609165;
  *((_DWORD *)a1 + 95) = 6;
  *(void *)&double result = 0x500000001ELL;
  a1[39] = 0x500000001ELL;
  return result;
}

double vl_par_ver_420(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 64) = 1069547520;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  *((_DWORD *)a1 + 59) = 1;
  double result = 0.0000976562877;
  *((_OWORD *)a1 + 15) = xmmword_21BB7AA00;
  return result;
}

double vl_par_ver_421(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 64) = 1069547520;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  *((_DWORD *)a1 + 59) = 1;
  double result = 0.0000976562877;
  *((_OWORD *)a1 + 15) = xmmword_21BB7AA10;
  return result;
}

double vl_par_ver_425(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 64) = 1069547520;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  *((_DWORD *)a1 + 92) = 1056964608;
  *((_DWORD *)a1 + 95) = 8;
  a1[39] = 0xA00000001ELL;
  *((_DWORD *)a1 + 59) = 1;
  double result = 0.0000976562877;
  *((_OWORD *)a1 + 15) = xmmword_21BB7AA20;
  return result;
}

double vl_par_ver_433(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  a1[70] = 0xFA00000001;
  *((_DWORD *)a1 + 63) = 1065353216;
  a1[78] = 0x3FB657184AE74487;
  *(void *)&double result = 0x900000000;
  a1[76] = 0x900000000;
  return result;
}

double vl_par_ver_444(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  a1[22] = 0x271000000019;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  double result = 2.24711695e307;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  return result;
}

double vl_par_ver_445(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  a1[22] = 0x271000000019;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  double result = 1.30048408e-36;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  return result;
}

double vl_par_ver_446(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[22] = 0x271000000019;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  double result = 1.30048408e-36;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_447(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  a1[22] = 0x271000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4470(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  a1[22] = 0x271000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4471(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_448(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  a1[22] = 0x271000000010;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4480(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  a1[22] = 0x271000000010;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4481(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000010;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_449(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  a1[22] = 0x271000000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4490(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  a1[22] = 0x271000000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4491(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_450(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(void *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000009;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_451(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  a1[22] = 0x271000000019;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  double result = 1.30048408e-36;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *(void *)((char *)a1 + 156) = 0x40E0000000000068;
  return result;
}

double vl_par_ver_452(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[22] = 0x271000000019;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  double result = 1.30048408e-36;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *(void *)((char *)a1 + 156) = 0x40E0000000000068;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_453(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA30;
  *(void *)&double result = 0x5DC0000012CLL;
  *(void *)((char *)a1 + 220) = 0x5DC0000012CLL;
  *((_DWORD *)a1 + 57) = 1069547520;
  return result;
}

double vl_par_ver_4531(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA30;
  *(void *)&double result = 0x5DC0000012CLL;
  *(void *)((char *)a1 + 220) = 0x5DC0000012CLL;
  *((_DWORD *)a1 + 57) = 1069547520;
  return result;
}

double vl_par_ver_4532(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA30;
  *(void *)&double result = 0x5DC0000012CLL;
  *(void *)((char *)a1 + 220) = 0x5DC0000012CLL;
  *((_DWORD *)a1 + 57) = 1069547520;
  *((_DWORD *)a1 + 26) = 2048;
  return result;
}

double vl_par_ver_454(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)&double result = 0x3E8000000C8;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  return result;
}

double vl_par_ver_4541(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)&double result = 0x3E8000000C8;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  return result;
}

double vl_par_ver_455(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[22] = 0x271000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4551(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_456(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[22] = 0x271000000010;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4561(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(void *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000010;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_457(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4571(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 22) = 3004;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[80] = 0x400000003F666666;
  return result;
}

double vl_par_ver_4572(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 22) = 3004;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4573(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  double result = 1.3004839e-36;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88200000000;
  *((_DWORD *)a1 + 22) = 3009;
  *((_DWORD *)a1 + 29) = 1;
  return result;
}

double vl_par_ver_4574(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 22) = 3006;
  double result = 3.49300435e-38;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x3827C5AC00000000;
  *((_DWORD *)a1 + 29) = 0;
  return result;
}

double vl_par_ver_4575(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 22) = 3006;
  double result = 1.30048408e-36;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88240400000;
  *((_DWORD *)a1 + 29) = 0;
  return result;
}

double vl_par_ver_4576(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 22) = 3006;
  double result = 1.3004839e-36;
  *(void *)((char *)a1 + 10_Block_object_dispose(&STACK[0x220], 8) = 0x387BA88200000000;
  *((_DWORD *)a1 + 29) = 1;
  return result;
}

double vl_par_ver_458(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)&double result = 0x3E8000000C8;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  return result;
}

double vl_par_ver_459(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_460(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7EB852;
  return result;
}

double vl_par_ver_4601(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[80] = 0x400000003F666666;
  return result;
}

double vl_par_ver_4602(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_461(void *a1)
{
  memset(v3, 0, 276);
  vl_par_default(__src);
  memcpy(a1, __src, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  lbl_par_ver((uint64_t)v3, 808);
  *((_DWORD *)a1 + 33) = 1;
  double result = *(double *)((char *)&v3[16] + 12);
  a1[17] = *(void *)((char *)&v3[16] + 12);
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  return result;
}

double vl_par_ver_462(void *a1)
{
  memset(v3, 0, 276);
  vl_par_default(__src);
  memcpy(a1, __src, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  lbl_par_ver((uint64_t)v3, 808);
  *((_DWORD *)a1 + 33) = 1;
  double result = *(double *)((char *)&v3[16] + 12);
  a1[17] = *(void *)((char *)&v3[16] + 12);
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  *((_DWORD *)a1 + 44) = 8;
  return result;
}

double vl_par_ver_463(void *a1)
{
  memset(v3, 0, 276);
  vl_par_default(__src);
  memcpy(a1, __src, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  lbl_par_ver((uint64_t)v3, 808);
  *((_DWORD *)a1 + 33) = 1;
  double result = *(double *)((char *)&v3[16] + 12);
  a1[17] = *(void *)((char *)&v3[16] + 12);
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  *((_DWORD *)a1 + 44) = 40;
  *((_DWORD *)a1 + 140) = 1;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7EB852;
  return result;
}

double vl_par_ver_46414(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 640) = 1063675494;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)&double result = 0x100000001;
  *(_OWORD *)(a1 + 992) = xmmword_21BB7AA50;
  return result;
}

double vl_par_ver_46416(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 640) = 1063675494;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
  *(_DWORD *)(a1 + 104) = 384;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)&double result = 0x12000000180;
  *(void *)(a1 + 1000) = 0x12000000180;
  *(_DWORD *)(a1 + 992) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  return result;
}

double vl_par_ver_46417(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 640) = 1063675494;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
  *(_DWORD *)(a1 + 104) = 384;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)&double result = 0xD800000180;
  *(void *)(a1 + 1000) = 0xD800000180;
  *(_DWORD *)(a1 + 992) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  return result;
}

float vl_par_ver_46430(void *a1)
{
  int v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 16;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 116) = 1053609165;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 109) = 9;
  *((_DWORD *)v1 + 104) = 1;
  *((_DWORD *)v1 + 85) = 1065353216;
  *(void *)((char *)v1 + 196) = 0x3D0EFA353C8EFA35;
  v1[56] = 0x3FA1DF46A0000000;
  *(void *)((char *)v1 + 252) = 0x3D0EFA353C8EFA35;
  float result = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((float *)v1 + 66) = result;
  *(v1 - 2) = 0xA00000000;
  return result;
}

float vl_par_ver_46432(void *a1)
{
  int v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 16;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 116) = 1053609165;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 104) = 1;
  *((_DWORD *)v1 + 85) = 1065353216;
  *(void *)((char *)v1 + 196) = 0x3D0EFA353C8EFA35;
  v1[56] = 0x3FA1DF46A0000000;
  *(void *)((char *)v1 + 252) = 0x3D0EFA353C8EFA35;
  float result = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((float *)v1 + 66) = result;
  *(v1 - 2) = 0xA00000000;
  *((_DWORD *)v1 + 109) = 15;
  return result;
}

float vl_par_ver_46434(void *a1)
{
  int v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 48;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 104) = 1;
  *((_DWORD *)v1 + 85) = 1065353216;
  *(void *)((char *)v1 + 196) = 0x3D0EFA353C8EFA35;
  v1[56] = 0x3FA1DF46A0000000;
  *(void *)((char *)v1 + 252) = 0x3D0EFA353C8EFA35;
  float result = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((float *)v1 + 66) = result;
  *((_DWORD *)v1 + 109) = 4;
  *((_DWORD *)v1 + 116) = 0;
  *(void *)((char *)v1 - 20) = 101;
  *((_DWORD *)v1 - 3) = 10;
  return result;
}

double vl_par_ver_46435(void *a1)
{
  int v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 176;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 104) = 1;
  *(void *)((char *)v1 + 340) = 0x23F800000;
  *(void *)((char *)v1 + 196) = 0x3D5677503C8EFA35;
  *(void *)((char *)v1 + 252) = 0x3D5677503C8EFA35;
  *((float *)v1 + 66) = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((_DWORD *)v1 + 109) = 4;
  *(void *)((char *)v1 - 20) = 101;
  *((_DWORD *)v1 - 3) = 10;
  *((_DWORD *)v1 + 56) = 995522384;
  *((_DWORD *)v1 + 82) = 0x40000000;
  v1[56] = 0x3FAACEEA00000000;
  double result = -0.0078125;
  v1[58] = 0xBF80000000000000;
  *((_DWORD *)v1 + 30) = 1069547520;
  return result;
}

double vl_par_ver_46436(void *a1)
{
  int v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 176;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 104) = 1;
  *(void *)((char *)v1 + 340) = 0x23F800000;
  *(void *)((char *)v1 + 196) = 0x3D5677503C8EFA35;
  *(void *)((char *)v1 + 252) = 0x3D5677503C8EFA35;
  *((float *)v1 + 66) = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((_DWORD *)v1 + 109) = 4;
  *(void *)((char *)v1 - 20) = 101;
  *((_DWORD *)v1 - 3) = 10;
  *((_DWORD *)v1 + 56) = 987133776;
  *((_DWORD *)v1 + 82) = 1077936128;
  v1[56] = 0x3FAACEEA00000000;
  double result = -0.0078125;
  v1[58] = 0xBF80000000000000;
  *((_DWORD *)v1 + 30) = 1069547520;
  return result;
}

double vl_par_ver_46444(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0xFD00000000;
  *(_DWORD *)(a1 + 640) = 1060320051;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)&double result = 0x100000001;
  *(_OWORD *)(a1 + 992) = xmmword_21BB7AA50;
  return result;
}

double vl_par_ver_46446(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0xFD00000000;
  *(_DWORD *)(a1 + 640) = 1060320051;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
  *(_DWORD *)(a1 + 104) = 384;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)&double result = 0x12000000180;
  *(void *)(a1 + 1000) = 0x12000000180;
  *(_DWORD *)(a1 + 992) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  return result;
}

double vl_par_ver_46447(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0xFD00000000;
  *(_DWORD *)(a1 + 640) = 1060320051;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
  *(_DWORD *)(a1 + 104) = 384;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)&double result = 0xD800000180;
  *(void *)(a1 + 1000) = 0xD800000180;
  *(_DWORD *)(a1 + 992) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  return result;
}

double vl_par_ver_465(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 1;
  a1[80] = 0x400000003F7EB852;
  *((_DWORD *)a1 + 59) = 1;
  double result = 0.0000976562877;
  a1[30] = 0x3F19999A3F5EB852;
  *((_DWORD *)a1 + 62) = 1128792064;
  return result;
}

double vl_par_ver_4651(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 59) = 1;
  a1[30] = 0x3F19999A3F5EB852;
  *((_DWORD *)a1 + 62) = 1128792064;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 0;
  double result = 2.00000047;
  a1[80] = 0x400000003F666666;
  return result;
}

double vl_par_ver_4652(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 59) = 1;
  a1[30] = 0x3F19999A3F5EB852;
  *((_DWORD *)a1 + 62) = 1128792064;
  *((_DWORD *)a1 + 13_Block_object_dispose(&STACK[0x220], 8) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

void *vl_par_ver_472(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  return memcpy((void *)(a1 + 672), v3, 0x130uLL);
}

double vl_par_ver_473(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(void *)&double result = 0x7D000000001;
  *(void *)(a1 + 656) = 0x7D000000001;
  return result;
}

double vl_par_ver_4731(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(void *)&double result = 0x7D000000001;
  *(void *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 640) = 1063675494;
  return result;
}

double vl_par_ver_4732(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(void *)&double result = 0x7D000000001;
  *(void *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
  return result;
}

double vl_par_ver_4733(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(void *)&double result = 0x7D000000001;
  *(void *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 976) = 1;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 0;
  return result;
}

void *vl_par_ver_474(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(void *)(a1 + 656) = 0x7D000000001;
  slam_tracker_vo_par_ver(71, (uint64_t)v3);
  return memcpy((void *)(a1 + 672), v3, 0x130uLL);
}

double vl_par_ver_475(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(void *)&double result = 0x7D000000001;
  *(void *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_DWORD *)(a1 + 976) = 1;
  *(_DWORD *)(a1 + 98_Block_object_dispose(&STACK[0x220], 8) = 4;
  *(_DWORD *)(a1 + 640) = 1065017672;
  return result;
}

double vl_par_ver_4751(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(void *)&double result = 0x7D000000001;
  *(void *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_DWORD *)(a1 + 976) = 1;
  *(_DWORD *)(a1 + 98_Block_object_dispose(&STACK[0x220], 8) = 4;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 640) = 1063675494;
  return result;
}

double vl_par_ver_4752(uint64_t a1)
{
  vl_par_ver_463((void *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3010;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(void *)&double result = 0x7D000000001;
  *(void *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = 3011;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_DWORD *)(a1 + 976) = 1;
  *(_DWORD *)(a1 + 98_Block_object_dispose(&STACK[0x220], 8) = 4;
  *(_DWORD *)(a1 + 640) = 1065017672;
  *(_DWORD *)(a1 + 560) = 0;
  return result;
}

float vl_par_ver_480(void *a1)
{
  int v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 42;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 116) = 1053609165;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 104) = 1;
  *((_DWORD *)v1 + 85) = 1065353216;
  *(void *)((char *)v1 + 252) = 0x3D0EFA353C8EFA35;
  float result = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((float *)v1 + 66) = result;
  *(v1 - 2) = 0xA00000000;
  *((_DWORD *)v1 + 82) = 0x40000000;
  *((_DWORD *)v1 + 109) = 2;
  *(void *)((char *)v1 + 196) = 0x3DB2B8C23C8EFA35;
  v1[56] = 0x3FB6571840000000;
  return result;
}

double vl_par_ver_706(void *a1)
{
  memset(v3, 0, 276);
  vl_par_default(__src);
  memcpy(a1, __src, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  lbl_par_ver((uint64_t)v3, 808);
  *((_DWORD *)a1 + 33) = 1;
  a1[17] = *(void *)((char *)&v3[16] + 12);
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  *((_DWORD *)a1 + 44) = 8;
  *(void *)&double result = 0xFD00000001;
  a1[70] = 0xFD00000001;
  *((_DWORD *)a1 + 160) = 1063675494;
  return result;
}

double vl_par_ver_707(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 161) = 2143289344;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 160) = 1063675494;
  return result;
}

double vl_par_ver_708(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 161) = 2143289344;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 160) = 1063675494;
  *((_DWORD *)a1 + 22) = 3007;
  return result;
}

double vl_par_ver_709(void *a1)
{
  memset(v3, 0, 276);
  memset(v4, 0, 276);
  vl_par_default(__src);
  memcpy(a1, __src, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  lbl_par_ver((uint64_t)v4, 808);
  *((_DWORD *)a1 + 33) = 1;
  a1[17] = *(void *)((char *)&v4[16] + 12);
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  *((_DWORD *)a1 + 44) = 8;
  a1[70] = 0xFD00000001;
  *((_DWORD *)a1 + 160) = 1063675494;
  lbl_par_ver((uint64_t)v3, 3008);
  *((_DWORD *)a1 + 33) = 1;
  double result = *(double *)((char *)&v3[16] + 12);
  a1[17] = *(void *)((char *)&v3[16] + 12);
  return result;
}

double vl_par_ver_800(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[19] = 0x6700000000;
  *(void *)&double result = 0x1400000001;
  a1[21] = 0x1400000001;
  return result;
}

double vl_par_ver_850(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_851(void *a1)
{
  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(void *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(void *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_21BB7A9F0;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(void *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(void *)((char *)a1 + 412) = 0xF00000001;
  double result = 0.00750000117;
  *((_DWORD *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_21BB7A720;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(void *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_21BB7AA40;
  *(void *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 9_Block_object_dispose(&STACK[0x220], 8) = 1;
  return result;
}

unint64_t vl_locability_score(uint64_t a1, uint64_t a2, float *a3, int a4)
{
  float v8 = *a3;
  float v9 = a3[1];
  float v10 = a3[2];
  double v11 = atan2((float)-(float)((float)(v9 * 0.0) - (float)(*a3 * 0.0)), (float)(v10 + (float)((float)(v9 * 0.0) + (float)(*a3 * 0.0))));
  double v12 = atan2((float)(v8 - (float)(v9 * 0.0)), (float)((float)(v9 + (float)(v8 * 0.0)) + (float)(v10 * 0.0)));
  if (!model || *(_DWORD *)model != a4 && (vl_locability_model_free(), !model)) {
    vl_locability_model_load(a4, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), (const char *)(a1 + 216));
  }
  double v13 = fabs(v12);
  double v14 = fabs(v11);
  float v15 = *a3;
  double v16 = sqrt((float)((float)((float)(a3[1] * a3[1]) + (float)(v15 * v15)) + (float)(a3[2] * a3[2])));
  if (v16 >= 0.001)
  {
    float v17 = (float)-v15 / v16;
  }
  else
  {
    printf("%sWarning : ", (const char *)&str_1_0);
    printf("%s: Bad CM-gravity, vector has length %f", "preprocess_tilt", v16);
    putchar(10);
    float v17 = -1.0;
  }
  int v18 = *(_DWORD *)(a2 + 8);
  int v19 = *(_DWORD *)(a2 + 12);
  if (v18 >= v19) {
    int v20 = *(_DWORD *)(a2 + 12);
  }
  else {
    int v20 = *(_DWORD *)(a2 + 8);
  }
  int v21 = *(_DWORD *)(model + 4);
  int v22 = v20 / v21;
  if (v18 <= v19) {
    int v18 = *(_DWORD *)(a2 + 12);
  }
  int v23 = v18 / v21;
  if (v13 >= v14)
  {
    uint64_t v24 = v23;
    unint64_t v25 = pmem_alloc_ex((v22 + 16) * (uint64_t)v23, 0, 0) + 8 * v23;
    int v26 = v23;
    if (v22 >= 1 && v23 >= 1) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  uint64_t v24 = v22;
  unint64_t v28 = pmem_alloc_ex((v23 + 16) * (uint64_t)v22, 0, 0);
  uint64_t v29 = 8 * v22;
  unint64_t v25 = v28 + v29;
  if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
  {
    int v26 = v22;
    int v22 = v23;
    if (v23 >= 1 && v26 >= 1)
    {
LABEL_35:
      uint64_t v38 = 0;
      unint64_t v39 = v25;
      do
      {
        if (v26 >= 1)
        {
          uint64_t v40 = 0;
          uint64_t v41 = model;
          do
          {
            int v42 = *(_DWORD *)(v41 + 4);
            unsigned int v43 = v42 * v40;
            if (((v42 * v40) & 0x80000000) == 0 && (signed int)v43 < *(_DWORD *)(a2 + 8))
            {
              uint64_t v44 = (v42 * v38);
              if ((v44 & 0x80000000) == 0 && (int)v44 < *(_DWORD *)(a2 + 12))
              {
                *(unsigned char *)(v39 + v40) = *(unsigned char *)(*(void *)a2 + *(void *)(a2 + 16) * v44 + v43);
                uint64_t v41 = model;
              }
            }
            ++v40;
          }
          while (v40 < v26);
        }
        ++v38;
        v39 += v24;
      }
      while (v38 < v22);
    }
LABEL_34:
    int v23 = v22;
    goto LABEL_80;
  }
  unint64_t v30 = v28;
  unint64_t v31 = pmem_alloc_ex((v22 + 16) * (uint64_t)v23, 0, 0);
  uint64_t v32 = 8 * v23;
  unint64_t v33 = v31 + v32;
  if (v22 >= 1 && v23 >= 1)
  {
    uint64_t v45 = 0;
    uint64_t v46 = model;
    unint64_t v47 = v31 + v32;
    do
    {
      uint64_t v48 = 0;
      do
      {
        int v49 = *(_DWORD *)(v46 + 4);
        unsigned int v50 = v49 * v48;
        if (((v49 * v48) & 0x80000000) == 0 && (signed int)v50 < *(_DWORD *)(a2 + 8))
        {
          uint64_t v51 = (v49 * v45);
          if ((v51 & 0x80000000) == 0 && (int)v51 < *(_DWORD *)(a2 + 12))
          {
            *(unsigned char *)(v47 + v4_Block_object_dispose(&STACK[0x220], 8) = *(unsigned char *)(*(void *)a2 + *(void *)(a2 + 16) * v51 + v50);
            uint64_t v46 = model;
          }
        }
        ++v48;
      }
      while (v23 != v48);
      ++v45;
      v47 += v23;
    }
    while (v45 != v22);
    uint64_t v52 = 0;
    unint64_t v53 = v30 + 8;
    unint64_t v54 = v32 + v31;
    BOOL v56 = v23 < 8 || v22 != 1;
    uint64_t v57 = (long long *)(v54 + 16);
    uint64_t v58 = v29 + v30 + 16;
    unint64_t v59 = v33;
    while (1)
    {
      char v60 = v53 + v52 - (v54 + v52 * v23) < 0x20 || v56;
      if (v60)
      {
        unint64_t v61 = 0;
      }
      else
      {
        if (v23 < 0x20)
        {
          unint64_t v62 = 0;
LABEL_72:
          long long v67 = (uint64_t *)(v59 + v62);
          long long v68 = (void *)(v30 + v22 * (v62 + 8));
          unint64_t v69 = v62 - (v23 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v70 = *v67++;
            *long long v68 = v70;
            long long v68 = (void *)((char *)v68 + v29);
            v69 += 8;
          }
          while (v69);
          unint64_t v61 = v23 & 0xFFFFFFFFFFFFFFF8;
          if (v61 == v23) {
            goto LABEL_60;
          }
          goto LABEL_75;
        }
        long long v63 = (_OWORD *)v58;
        long long v64 = v57;
        unint64_t v65 = v23 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v66 = *v64;
          *(v63 - 1) = *(v64 - 1);
          *long long v63 = v66;
          v64 += 2;
          v63 += 2 * v22;
          v65 -= 32;
        }
        while (v65);
        if ((v23 & 0xFFFFFFFFFFFFFFE0) == v23) {
          goto LABEL_60;
        }
        unint64_t v62 = v23 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v61 = v62;
        if ((v23 & 0x18) != 0) {
          goto LABEL_72;
        }
      }
LABEL_75:
      uint64_t v71 = v22 * (v61 + 8);
      do
      {
        *(unsigned char *)(v30 + v71) = *(unsigned char *)(v59 + v61++);
        v71 += v22;
      }
      while (v23 != v61);
LABEL_60:
      ++v52;
      uint64_t v57 = (long long *)((char *)v57 + v23);
      ++v58;
      v59 += v23;
      ++v30;
      if (v52 == v22) {
        goto LABEL_26;
      }
    }
  }
  if (v31)
  {
LABEL_26:
    uint64_t v35 = *(void *)(v33 - 8 * v23 - 8);
    signed int v36 = atomic_fetch_add((atomic_uint *volatile)(v35 + 24), 0xFFFFFFFF) - 1;
    if (v36 < 0) {
      goto LABEL_108;
    }
    if (v36)
    {
      atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_or(&global_stats[2], 0);
      atomic_fetch_or(global_stats, 0);
      atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_or(&_pmem_total_blocks, 0);
      atomic_fetch_or(&pmem_bytes_allocated, 0);
    }
    else
    {
      unint64_t v72 = -*(void *)(v35 + 8);
      atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_add(&global_stats[2], 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_add(global_stats, v72);
      atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_add(&_pmem_total_blocks, 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_add(&pmem_bytes_allocated, v72);
      (*(void (**)(uint64_t))(v35 + 40))(v35);
      free((void *)v35);
    }
  }
  int v26 = v22;
LABEL_80:
  bzero(*(void **)(model + 32), 4 * v23 * v26);
  **(_DWORD **)(model + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
  uint64_t v74 = *(void *)(model + 32);
  float v75 = *(float **)(model + 48);
  int v76 = *(float **)(model + 64);
  if (v26 >= 1 && v23 >= 1)
  {
    uint64_t v77 = 0;
    uint64_t v78 = 4 * v26;
    uint64_t v79 = v26 & 0xFFFFFFF8;
    float64x2_t v80 = (float64x2_t)vdupq_n_s64(0xC05FE00000000000);
    float64x2_t v81 = (float64x2_t)vdupq_n_s64(0x405FE00000000000uLL);
    double v82 = *(float32x4_t **)(model + 32);
    double v83 = (int8x16_t *)v25;
    do
    {
      if (v26 >= 8)
      {
        if (v74 + v78 * v77 >= v25 + v26 + v24 * v77 || v25 + v24 * v77 >= v74 + v78 + v78 * v77)
        {
          if (v26 < 0x10)
          {
            uint64_t v86 = 0;
LABEL_97:
            uint64_t v115 = 4 * v86;
            do
            {
              uint64_t v116 = *(uint64_t *)((char *)v83->i64 + v86);
              v117.i32[0] = BYTE6(v116);
              v117.i32[1] = HIBYTE(v116);
              int8x8_t v118 = vand_s8(v117, (int8x8_t)0xFF000000FFLL);
              v119.i32[0] = BYTE4(v116);
              v119.i32[1] = BYTE5(v116);
              int8x8_t v120 = vand_s8(v119, (int8x8_t)0xFF000000FFLL);
              v121.i32[0] = BYTE2(v116);
              v122.i64[0] = v118.u32[0];
              v122.i64[1] = v118.u32[1];
              uint64x2_t v123 = v122;
              v122.i64[0] = v120.u32[0];
              v122.i64[1] = v120.u32[1];
              uint64x2_t v124 = v122;
              v121.i32[1] = BYTE3(v116);
              int8x8_t v125 = vand_s8(v121, (int8x8_t)0xFF000000FFLL);
              v122.i64[0] = v125.u32[0];
              v122.i64[1] = v125.u32[1];
              uint64x2_t v126 = v122;
              v127.i32[0] = v116;
              __int32 v128 = BYTE1(v116);
              float64x2_t v129 = vcvtq_f64_u64(v124);
              v127.i32[1] = v128;
              *(int8x8_t *)v124.i8 = vand_s8(v127, (int8x8_t)0xFF000000FFLL);
              v122.i64[0] = v124.u32[0];
              v122.i64[1] = v124.u32[1];
              float32x4_t v73 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(v129, v80), v81)), vdivq_f64(vaddq_f64(vcvtq_f64_u64(v123), v80), v81));
              int v130 = (float32x4_t *)((char *)v82 + v115);
              *int v130 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(vcvtq_f64_u64(v122), v80), v81)), vdivq_f64(vaddq_f64(vcvtq_f64_u64(v126), v80), v81));
              v130[1] = v73;
              v86 += 8;
              v115 += 32;
            }
            while (v79 != v86);
            uint64_t v84 = v26 & 0xFFFFFFF8;
            if (v79 == v26) {
              goto LABEL_83;
            }
            goto LABEL_100;
          }
          uint64_t v87 = v26 & 0xFFFFFFF0;
          double v88 = v82;
          double v89 = v83;
          do
          {
            int8x16_t v90 = *v89++;
            unint64_t v91 = vextq_s8(v90, v90, 8uLL).u64[0];
            v92.i32[0] = BYTE6(v91);
            v92.i32[1] = HIBYTE(v91);
            v93.i32[0] = BYTE4(v91);
            v93.i32[1] = BYTE5(v91);
            v94.i32[0] = BYTE2(v91);
            int8x8_t v95 = vand_s8(v92, (int8x8_t)0xFF000000FFLL);
            int8x8_t v96 = vand_s8(v93, (int8x8_t)0xFF000000FFLL);
            v94.i32[1] = BYTE3(v91);
            int8x8_t v97 = vand_s8(v94, (int8x8_t)0xFF000000FFLL);
            v98.i32[0] = v91;
            v98.i32[1] = BYTE1(v91);
            v99.i64[0] = v95.u32[0];
            v99.i64[1] = v95.u32[1];
            uint64x2_t v100 = v99;
            v95.i32[0] = v90.u8[6];
            v99.i64[0] = v96.u32[0];
            v99.i64[1] = v96.u32[1];
            uint64x2_t v101 = v99;
            int8x8_t v102 = vand_s8(v98, (int8x8_t)0xFF000000FFLL);
            v95.i32[1] = v90.u8[7];
            int8x8_t v103 = vand_s8(v95, (int8x8_t)0xFF000000FFLL);
            v99.i64[0] = v103.u32[0];
            v99.i64[1] = v103.u32[1];
            uint64x2_t v104 = v99;
            v99.i64[0] = v97.u32[0];
            v99.i64[1] = v97.u32[1];
            uint64x2_t v105 = v99;
            v106.i32[0] = v90.u8[4];
            v99.i64[0] = v102.u32[0];
            v99.i64[1] = v102.u32[1];
            uint64x2_t v107 = v99;
            v106.i32[1] = v90.u8[5];
            int8x8_t v108 = vand_s8(v106, (int8x8_t)0xFF000000FFLL);
            v99.i64[0] = v108.u32[0];
            v99.i64[1] = v108.u32[1];
            float64x2_t v109 = vcvtq_f64_u64(v99);
            v110.i32[0] = v90.u8[2];
            v110.i32[1] = v90.u8[3];
            int8x8_t v111 = vand_s8(v110, (int8x8_t)0xFF000000FFLL);
            v99.i64[0] = v111.u32[0];
            v99.i64[1] = v111.u32[1];
            float64x2_t v112 = vcvtq_f64_u64(v99);
            v113.i32[0] = v90.u8[0];
            float64x2_t v114 = vcvtq_f64_u64(v107);
            v113.i32[1] = v90.u8[1];
            *(int8x8_t *)v107.i8 = vand_s8(v113, (int8x8_t)0xFF000000FFLL);
            v99.i64[0] = v107.u32[0];
            v99.i64[1] = v107.u32[1];
            float32x4_t v73 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(v114, v80), v81)), vdivq_f64(vaddq_f64(vcvtq_f64_u64(v105), v80), v81));
            *double v88 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(vcvtq_f64_u64(v99), v80), v81)), vdivq_f64(vaddq_f64(v112, v80), v81));
            v88[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(v109, v80), v81)), vdivq_f64(vaddq_f64(vcvtq_f64_u64(v104), v80), v81));
            v88[2] = v73;
            v88[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(vcvtq_f64_u64(v101), v80), v81)), vdivq_f64(vaddq_f64(vcvtq_f64_u64(v100), v80), v81));
            v88 += 4;
            v87 -= 16;
          }
          while (v87);
          if ((v26 & 0xFFFFFFF0) == (unint64_t)v26) {
            goto LABEL_83;
          }
          uint64_t v86 = v26 & 0xFFFFFFF0;
          uint64_t v84 = v86;
          if ((v26 & 8) != 0) {
            goto LABEL_97;
          }
        }
        else
        {
          uint64_t v84 = 0;
        }
      }
      else
      {
        uint64_t v84 = 0;
      }
      do
      {
LABEL_100:
        v73.i8[0] = v83->i8[v84];
        *(double *)v73.i64 = ((double)v73.u64[0] + -127.5) / 127.5;
        v73.f32[0] = *(double *)v73.i64;
        v82->i32[v84++] = v73.i32[0];
      }
      while (v26 != v84);
LABEL_83:
      ++v77;
      double v83 = (int8x16_t *)((char *)v83 + v24);
      double v82 = (float32x4_t *)((char *)v82 + v78);
    }
    while (v77 != v23);
  }
  *float v75 = v17;
  vl_locability_forward();
  float v131 = *v76;
  float v132 = *(float *)(model + 8);
  if (v25)
  {
    uint64_t v133 = *(void *)(v25 - 8 * v24 - 8);
    signed int v134 = atomic_fetch_add((atomic_uint *volatile)(v133 + 24), 0xFFFFFFFF) - 1;
    if (v134 >= 0)
    {
      if (v134)
      {
        atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_or(&global_stats[2], 0);
        atomic_fetch_or(global_stats, 0);
        atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_or(&_pmem_total_blocks, 0);
        atomic_fetch_or(&pmem_bytes_allocated, 0);
      }
      else
      {
        unint64_t v135 = -*(void *)(v133 + 8);
        atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(&global_stats[2], 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(global_stats, v135);
        atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(&_pmem_total_blocks, 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(&pmem_bytes_allocated, v135);
        (*(void (**)(uint64_t))(v133 + 40))(v133);
        free((void *)v133);
      }
      return LODWORD(v131) | ((unint64_t)(v131 < v132) << 32);
    }
LABEL_108:
    __assert_rtn("pmem_free", "pmem.c", 302, "count >= 0 && \"Negative count! Something is broken, double free? Memory corruption?\"");
  }
  return LODWORD(v131) | ((unint64_t)(v131 < v132) << 32);
}

float vl_pose_refine_multi(double *a1, double *a2, uint64_t a3, uint64_t a4, int a5, int a6, double *a7, uint64_t a8, float a9, float a10, float a11, float a12)
{
  int v14 = 2 * a5;
  uint64_t v15 = (6 * a5);
  uint64_t v16 = (v15 * v15);
  double v192 = (float *)malloc_type_malloc(4 * ((int)v16 + 24 * a5 + ((((6 * a5) | 1) * (int)v15) >> 1)), 0x100004052888210uLL);
  float v17 = (float32x4_t *)malloc_type_malloc(48 * v14, 0x1000040EED21634uLL);
  timeval v209 = (timeval)0;
  gettimeofday(&v209, 0);
  timeval v189 = v209;
  if (a5 >= 1)
  {
    unint64_t v18 = 0;
    do
    {
      float64x2_t v213 = 0u;
      float64x2_t v214 = 0u;
      float64x2_t v211 = 0u;
      float64x2_t v212 = 0u;
      timeval v209 = (timeval)0;
      float64x2_t v210 = 0u;
      g_coords_diff(&a1[v18 / 8], a1, (uint64_t)&v209);
      int v19 = &v17[v18 / 0x10];
      *int v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v209), v210);
      v19[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v211), v212);
      float32x4_t v20 = v17[v18 / 0x10];
      float32x4_t v21 = v17[v18 / 0x10 + 1];
      v19[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v213), v214);
      v19[3] = v20;
      float32x4_t v22 = v17[v18 / 0x10 + 2];
      v19[4] = v21;
      v19[5] = v22;
      v18 += 96;
    }
    while (96 * a5 != v18);
  }
  int v23 = v192;
  uint64_t v24 = &v192[v16];
  uint64_t v25 = (int)v15;
  int v26 = &v24[v25];
  int16x8_t v27 = &v24[v25 + v25];
  double v193 = &v27[v25];
  uint64_t v188 = (v15 * v15);
  if (a6 < 1)
  {
    float v32 = NAN;
LABEL_63:
    if (a5 >= 1) {
      goto LABEL_64;
    }
    float v33 = v32;
    goto LABEL_73;
  }
  int v28 = 0;
  if ((int)v15 <= 1) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v15;
  }
  uint64_t v199 = v29;
  uint64_t v30 = v29 & 0x7FFFFFF8;
  uint64_t v31 = 4 * (int)v15 + 4 * v16;
  uint64_t v191 = (char *)&v192[v15] + v31;
  long long v200 = &v17[1].i8[8];
  unint64_t v201 = a1;
  size_t v197 = (char *)v192 + v31;
  uint64_t v198 = v30;
  uint64_t v196 = (uint64_t)v192 + v31 + 16;
  while (1)
  {
    int v195 = v28;
    int64_t v34 = (float *)v17;
    float v35 = refine_multi_lin(a1, a2, a3, a4, a5, v17, (uint64_t)v23, v24, a9, a10, a11, a12);
    if (a5 >= 1)
    {
      uint64_t v36 = 0;
      uint64_t v37 = 1;
      uint64_t v38 = v193;
      unint64_t v39 = v23;
      do
      {
        float v40 = *v39;
        *uint64_t v38 = *v39;
        if (v36)
        {
          uint64_t v41 = -v36;
          do
          {
            float v40 = v40 - (float)(v38[v41] * v38[v41]);
            *uint64_t v38 = v40;
            BOOL v95 = __CFADD__(v41++, 1);
          }
          while (!v95);
          *uint64_t v38 = sqrtf(v40);
          uint64_t v42 = v36 + 1;
          unsigned int v43 = v39 + 1;
          if (v36 + 1 < v15)
          {
            uint64_t v44 = &v38[v36 + 1];
            uint64_t v45 = v37;
            do
            {
              float v46 = *v43;
              *uint64_t v44 = *v43;
              unint64_t v47 = &v44[-v36];
              uint64_t v48 = -v36;
              do
              {
                float v49 = *v47++;
                float v46 = v46 - (float)(v49 * v38[v48]);
                *uint64_t v44 = v46;
                BOOL v95 = __CFADD__(v48++, 1);
              }
              while (!v95);
              *uint64_t v44 = v46 / *v38;
              v44 += ++v45;
              ++v43;
            }
            while (v45 != v15);
          }
        }
        else
        {
          *uint64_t v38 = sqrtf(v40);
          unsigned int v50 = v38 + 1;
          unsigned int v43 = v39 + 1;
          uint64_t v51 = v37;
          do
          {
            float v52 = *v43++;
            *unsigned int v50 = v52;
            *unsigned int v50 = v52 / *v38;
            v50 += ++v51;
          }
          while (v15 != v51);
          uint64_t v42 = 1;
        }
        v38 += v36 + 2;
        unint64_t v39 = &v43[v42];
        ++v37;
        uint64_t v36 = v42;
      }
      while (v42 != v15);
      uint64_t v53 = 0;
      unint64_t v54 = v193;
      do
      {
        float v56 = v24[v53];
        v27[v53] = v56;
        if (v53)
        {
          uint64_t v57 = v27;
          uint64_t v58 = v53;
          uint64_t v55 = v54;
          do
          {
            float v59 = *v55++;
            float v60 = v59;
            float v61 = *v57++;
            float v56 = v56 - (float)(v60 * v61);
            v27[v53] = v56;
            --v58;
          }
          while (v58);
        }
        else
        {
          uint64_t v55 = v54;
        }
        unint64_t v54 = v55 + 1;
        v27[v53++] = v56 / *v55;
      }
      while (v53 != v15);
      int v62 = 0;
      long long v63 = v191;
      uint64_t v64 = v15;
      do
      {
        uint64_t v67 = (v64 - 1);
        float v68 = v27[v67];
        v26[v67] = v68;
        if (v64 < v15)
        {
          uint64_t v69 = 0;
          uint64_t v70 = &v55[v64];
          do
          {
            float v68 = v68 - (float)(*v70 * *(float *)&v63[4 * v69]);
            v26[v67] = v68;
            v70 += v64 + v69++ + 1;
          }
          while (v62 != v69);
        }
        float v65 = v68 / *v55;
        v55 -= v64;
        v26[v67] = v65;
        ++v62;
        v63 -= 4;
        BOOL v66 = v64-- <= 1;
      }
      while (!v66);
      uint64_t v71 = v200;
      int v72 = a5;
      float32x4_t v73 = v26;
      do
      {
        *(_OWORD *)(v71 + 24) = *(_OWORD *)(v71 - 24);
        *(_OWORD *)(v71 + 40) = *(_OWORD *)(v71 - 8);
        *(_OWORD *)(v71 + 56) = *(_OWORD *)(v71 + 8);
        float v74 = *((float *)v71 + 4);
        *((float *)v71 + 3) = *v73 + *((float *)v71 + 3);
        *((float *)v71 + 4) = v73[1] + v74;
        *((float *)v71 + 5) = v73[2] + *((float *)v71 + 5);
        float v75 = v73[4];
        float v76 = v73[5];
        __float2 v77 = __sincosf_stret(v73[3]);
        __float2 v78 = __sincosf_stret(v75);
        __float2 v79 = __sincosf_stret(v76);
        float v80 = (float)((float)(v77.__cosval * v78.__sinval) * v79.__sinval) - (float)(v77.__sinval * v79.__cosval);
        float v81 = (float)(v77.__sinval * v79.__sinval) + (float)((float)(v77.__cosval * v78.__sinval) * v79.__cosval);
        float v82 = (float)(v77.__cosval * v79.__cosval) + (float)((float)(v77.__sinval * v78.__sinval) * v79.__sinval);
        float v83 = (float)((float)(v77.__sinval * v78.__sinval) * v79.__cosval) - (float)(v77.__cosval * v79.__sinval);
        float v84 = *((float *)v71 - 6);
        float v85 = *((float *)v71 - 5);
        float v86 = *((float *)v71 - 4);
        float v87 = *((float *)v71 - 3);
        float v88 = *((float *)v71 - 2);
        float v89 = *((float *)v71 - 1);
        float v90 = *(float *)v71;
        float v91 = *((float *)v71 + 1);
        float v92 = *((float *)v71 + 2);
        *((float *)v71 - 6) = (float)((float)((float)(v84 * (float)(v77.__cosval * v78.__cosval)) + 0.0)
                                    + (float)(v85 * (float)(v77.__sinval * v78.__cosval)))
                            - (float)(v86 * v78.__sinval);
        *((float *)v71 - 5) = (float)((float)((float)(v84 * v80) + 0.0) + (float)(v85 * v82))
                            + (float)(v86 * (float)(v78.__cosval * v79.__sinval));
        *((float *)v71 - 4) = (float)((float)((float)(v84 * v81) + 0.0) + (float)(v85 * v83))
                            + (float)(v86 * (float)(v78.__cosval * v79.__cosval));
        *((float *)v71 - 3) = (float)((float)((float)(v87 * (float)(v77.__cosval * v78.__cosval)) + 0.0)
                                    + (float)(v88 * (float)(v77.__sinval * v78.__cosval)))
                            - (float)(v89 * v78.__sinval);
        *((float *)v71 - 2) = (float)((float)((float)(v87 * v80) + 0.0) + (float)(v88 * v82))
                            + (float)(v89 * (float)(v78.__cosval * v79.__sinval));
        *((float *)v71 - 1) = (float)((float)((float)(v87 * v81) + 0.0) + (float)(v88 * v83))
                            + (float)(v89 * (float)(v78.__cosval * v79.__cosval));
        *(float *)uint64_t v71 = (float)((float)((float)(v90 * (float)(v77.__cosval * v78.__cosval)) + 0.0)
                              + (float)(v91 * (float)(v77.__sinval * v78.__cosval)))
                      - (float)(v92 * v78.__sinval);
        *((float *)v71 + 1) = (float)((float)((float)(v90 * v80) + 0.0) + (float)(v91 * v82))
                            + (float)(v92 * (float)(v78.__cosval * v79.__sinval));
        *((float *)v71 + 2) = (float)((float)((float)(v90 * v81) + 0.0) + (float)(v91 * v83))
                            + (float)(v92 * (float)(v78.__cosval * v79.__cosval));
        v71 += 96;
        v73 += 6;
        --v72;
      }
      while (v72);
    }
    a1 = v201;
    float v17 = (float32x4_t *)v34;
    float v32 = refine_multi_lin_7(v201, a2, a3, a4, a5, v34, a9, a10, a11, a12);
    if (v32 >= v35) {
      break;
    }
LABEL_10:
    int v28 = v195 + 1;
    if (v195 + 1 == a6) {
      goto LABEL_63;
    }
  }
  unsigned int v93 = 0;
  do
  {
    if (a5 >= 1)
    {
      if (v199 >= 8)
      {
        uint64_t v99 = v198;
        uint64x2_t v100 = (float32x4_t *)v196;
        v101.i64[0] = 0x3F0000003F000000;
        v101.i64[1] = 0x3F0000003F000000;
        do
        {
          float32x4_t v102 = vmulq_f32(*v100, v101);
          v100[-1] = vmulq_f32(v100[-1], v101);
          *uint64x2_t v100 = v102;
          v100 += 2;
          v99 -= 8;
        }
        while (v99);
        uint64_t v96 = v198;
        int8x8_t v97 = v34;
        uint64_t v98 = a5;
        if (v198 == v199) {
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v96 = 0;
        int8x8_t v97 = v34;
        uint64_t v98 = a5;
      }
      uint64_t v103 = v199 - v96;
      uint64x2_t v104 = (float *)&v197[4 * v96];
      do
      {
        *uint64x2_t v104 = *v104 * 0.5;
        ++v104;
        --v103;
      }
      while (v103);
LABEL_57:
      uint64x2_t v105 = v97;
      uint64_t v106 = v98;
      do
      {
        long long v107 = *((_OWORD *)v105 + 4);
        *(_OWORD *)uint64x2_t v105 = *((_OWORD *)v105 + 3);
        *((_OWORD *)v105 + 1) = v107;
        *((_OWORD *)v105 + 2) = *((_OWORD *)v105 + 5);
        v105 += 24;
        --v106;
      }
      while (v106);
      int8x8_t v108 = v200;
      int v109 = a5;
      int8x8_t v110 = v26;
      do
      {
        *(_OWORD *)(v108 + 24) = *(_OWORD *)(v108 - 24);
        *(_OWORD *)(v108 + 40) = *(_OWORD *)(v108 - 8);
        *(_OWORD *)(v108 + 56) = *(_OWORD *)(v108 + 8);
        float v111 = *((float *)v108 + 4);
        *((float *)v108 + 3) = *v110 + *((float *)v108 + 3);
        *((float *)v108 + 4) = v110[1] + v111;
        *((float *)v108 + 5) = v110[2] + *((float *)v108 + 5);
        float v112 = v110[4];
        float v113 = v110[5];
        __float2 v114 = __sincosf_stret(v110[3]);
        __float2 v115 = __sincosf_stret(v112);
        __float2 v116 = __sincosf_stret(v113);
        float v117 = (float)((float)(v114.__cosval * v115.__sinval) * v116.__sinval) - (float)(v114.__sinval * v116.__cosval);
        float v118 = (float)(v114.__sinval * v116.__sinval) + (float)((float)(v114.__cosval * v115.__sinval) * v116.__cosval);
        float v119 = (float)(v114.__cosval * v116.__cosval) + (float)((float)(v114.__sinval * v115.__sinval) * v116.__sinval);
        float v120 = (float)((float)(v114.__sinval * v115.__sinval) * v116.__cosval) - (float)(v114.__cosval * v116.__sinval);
        float v121 = *((float *)v108 - 6);
        float v122 = *((float *)v108 - 5);
        float v123 = *((float *)v108 - 4);
        float v124 = *((float *)v108 - 3);
        float v125 = *((float *)v108 - 2);
        float v126 = *((float *)v108 - 1);
        float v127 = *(float *)v108;
        float v128 = *((float *)v108 + 1);
        float v129 = *((float *)v108 + 2);
        *((float *)v108 - 6) = (float)((float)((float)(v121 * (float)(v114.__cosval * v115.__cosval)) + 0.0)
                                     + (float)(v122 * (float)(v114.__sinval * v115.__cosval)))
                             - (float)(v123 * v115.__sinval);
        *((float *)v108 - 5) = (float)((float)((float)(v121 * v117) + 0.0) + (float)(v122 * v119))
                             + (float)(v123 * (float)(v115.__cosval * v116.__sinval));
        *((float *)v108 - 4) = (float)((float)((float)(v121 * v118) + 0.0) + (float)(v122 * v120))
                             + (float)(v123 * (float)(v115.__cosval * v116.__cosval));
        *((float *)v108 - 3) = (float)((float)((float)(v124 * (float)(v114.__cosval * v115.__cosval)) + 0.0)
                                     + (float)(v125 * (float)(v114.__sinval * v115.__cosval)))
                             - (float)(v126 * v115.__sinval);
        *((float *)v108 - 2) = (float)((float)((float)(v124 * v117) + 0.0) + (float)(v125 * v119))
                             + (float)(v126 * (float)(v115.__cosval * v116.__sinval));
        *((float *)v108 - 1) = (float)((float)((float)(v124 * v118) + 0.0) + (float)(v125 * v120))
                             + (float)(v126 * (float)(v115.__cosval * v116.__cosval));
        *(float *)int8x8_t v108 = (float)((float)((float)(v127 * (float)(v114.__cosval * v115.__cosval)) + 0.0)
                               + (float)(v128 * (float)(v114.__sinval * v115.__cosval)))
                       - (float)(v129 * v115.__sinval);
        *((float *)v108 + 1) = (float)((float)((float)(v127 * v117) + 0.0) + (float)(v128 * v119))
                             + (float)(v129 * (float)(v115.__cosval * v116.__sinval));
        *((float *)v108 + 2) = (float)((float)((float)(v127 * v118) + 0.0) + (float)(v128 * v120))
                             + (float)(v129 * (float)(v115.__cosval * v116.__cosval));
        v108 += 96;
        v110 += 6;
        --v109;
      }
      while (v109);
    }
    float v17 = (float32x4_t *)v34;
    float v94 = refine_multi_lin_7(v201, a2, a3, a4, a5, v34, a9, a10, a11, a12);
    BOOL v95 = v94 < v35 || v93++ >= 2;
  }
  while (!v95);
  float v32 = v94;
  float v33 = v35;
  int v23 = v192;
  a1 = v201;
  if (v94 < v35) {
    goto LABEL_10;
  }
  if (a5 < 1)
  {
LABEL_73:
    uint64_t v134 = a8;
    uint64_t v133 = v193;
    if (!a8) {
      goto LABEL_119;
    }
    goto LABEL_74;
  }
  unint64_t v135 = v34;
  uint64_t v136 = a5;
  do
  {
    long long v137 = *((_OWORD *)v135 + 4);
    *(_OWORD *)unint64_t v135 = *((_OWORD *)v135 + 3);
    *((_OWORD *)v135 + 1) = v137;
    *((_OWORD *)v135 + 2) = *((_OWORD *)v135 + 5);
    v135 += 24;
    --v136;
  }
  while (v136);
  float v32 = v35;
LABEL_64:
  int v130 = (float32x2_t *)&v17[1].u32[2];
  float v131 = a7;
  uint64_t v132 = a5;
  do
  {
    float64x2_t v214 = vcvtq_f64_f32(v130[2]);
    timeval v209 = (timeval)vcvtq_f64_f32(v130[-3]);
    float64x2_t v212 = vcvtq_f64_f32(*v130);
    float64x2_t v210 = vcvtq_f64_f32(v130[-2]);
    float64x2_t v211 = vcvtq_f64_f32(v130[-1]);
    float64x2_t v213 = vcvtq_f64_f32(v130[1]);
    g_coords_conv((double *)&v209.tv_sec, a1, v131);
    v131 += 12;
    v130 += 12;
    --v132;
  }
  while (v132);
  float v33 = v32;
  int v23 = v192;
  uint64_t v133 = v193;
  uint64_t v134 = a8;
  if (a8)
  {
LABEL_74:
    refine_multi_lin(a1, a2, a3, a4, a5, v17, (uint64_t)v23, v24, a9, a10, a11, a12);
    if (a5 >= 1)
    {
      uint64_t v138 = 0;
      uint64_t v139 = 1;
      int v140 = v133;
      int v141 = v23;
      do
      {
        float v142 = *v141;
        *int v140 = *v141;
        if (v138)
        {
          uint64_t v143 = -v138;
          do
          {
            float v142 = v142 - (float)(v140[v143] * v140[v143]);
            *int v140 = v142;
            BOOL v95 = __CFADD__(v143++, 1);
          }
          while (!v95);
          *int v140 = sqrtf(v142);
          uint64_t v144 = v138 + 1;
          uint64_t v145 = v141 + 1;
          if (v138 + 1 < v15)
          {
            int32x4_t v146 = &v140[v138 + 1];
            uint64_t v147 = v139;
            do
            {
              float v148 = *v145;
              *int32x4_t v146 = *v145;
              int32x4_t v149 = &v146[-v138];
              uint64_t v150 = -v138;
              do
              {
                float v151 = *v149++;
                float v148 = v148 - (float)(v151 * v140[v150]);
                *int32x4_t v146 = v148;
                BOOL v95 = __CFADD__(v150++, 1);
              }
              while (!v95);
              *int32x4_t v146 = v148 / *v140;
              v146 += ++v147;
              ++v145;
            }
            while (v147 != v15);
          }
        }
        else
        {
          *int v140 = sqrtf(v142);
          double v152 = v140 + 1;
          uint64_t v145 = v141 + 1;
          uint64_t v153 = v139;
          do
          {
            float v154 = *v145++;
            *double v152 = v154;
            *double v152 = v154 / *v140;
            v152 += ++v153;
          }
          while (v15 != v153);
          uint64_t v144 = 1;
        }
        v140 += v138 + 2;
        int v141 = &v145[v144];
        ++v139;
        uint64_t v138 = v144;
      }
      while (v144 != v15);
    }
    unint64_t v155 = 0;
    if ((int)v15 <= 1) {
      uint64_t v156 = 1;
    }
    else {
      uint64_t v156 = v15;
    }
    int64x2_t v157 = vdupq_n_s64(4uLL);
    int64x2_t v158 = vdupq_n_s64(8uLL);
    while (a5 < 1)
    {
LABEL_95:
      double v159 = (_DWORD *)(v134 + 24 * v155);
      *double v159 = *(_DWORD *)v26;
      v159[1] = *((_DWORD *)v26 + 1);
      v159[2] = *((_DWORD *)v26 + 2);
      v159[3] = *((_DWORD *)v26 + 3);
      v159[4] = *((_DWORD *)v26 + 4);
      v159[5] = *((_DWORD *)v26 + 5);
      if (++v155 == 6) {
        goto LABEL_119;
      }
    }
    if (v156 >= 8)
    {
      int64x2_t v161 = vdupq_n_s64(v155);
      uint64_t v162 = v156 & 0x7FFFFFF8;
      uint64_t v163 = (float32x4_t *)&v23[v188 + 4];
      int64x2_t v164 = (int64x2_t)xmmword_21BB7A720;
      int64x2_t v165 = (int64x2_t)xmmword_21BB7A760;
      do
      {
        v163[-1] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v164, v161), (int32x4_t)vceqq_s64(v165, v161))), (int8x8_t)0x1000100010001)));
        *uint64_t v163 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(vaddq_s64(v164, v157), v161), (int32x4_t)vceqq_s64(vaddq_s64(v165, v157), v161))), (int8x8_t)0x1000100010001)));
        int64x2_t v165 = vaddq_s64(v165, v158);
        int64x2_t v164 = vaddq_s64(v164, v158);
        v163 += 2;
        v162 -= 8;
      }
      while (v162);
      uint64_t v160 = v156 & 0x7FFFFFF8;
      if (v160 == v156) {
        goto LABEL_106;
      }
    }
    else
    {
      uint64_t v160 = 0;
    }
    do
    {
      if (v155 == v160) {
        float v166 = 1.0;
      }
      else {
        float v166 = 0.0;
      }
      v24[v160++] = v166;
    }
    while (v156 != v160);
LABEL_106:
    uint64_t v167 = 0;
    double v168 = v133;
    do
    {
      float v170 = v24[v167];
      v27[v167] = v170;
      if (v167)
      {
        long double v171 = v27;
        uint64_t v172 = v167;
        float v169 = v168;
        do
        {
          float v173 = *v169++;
          float v174 = v173;
          float v175 = *v171++;
          float v170 = v170 - (float)(v174 * v175);
          v27[v167] = v170;
          --v172;
        }
        while (v172);
      }
      else
      {
        float v169 = v168;
      }
      double v168 = v169 + 1;
      v27[v167++] = v170 / *v169;
    }
    while (v167 != v15);
    int v176 = 0;
    unint64_t v177 = &v23[v188 + (int)v15 + v15];
    uint64_t v178 = v15;
    do
    {
      uint64_t v180 = (v178 - 1);
      float v181 = v27[v180];
      v26[v180] = v181;
      if (v178 < v15)
      {
        uint64_t v182 = 0;
        uint64_t v183 = &v169[v178];
        do
        {
          float v181 = v181 - (float)(*v183 * v177[v182]);
          v26[v180] = v181;
          v183 += v178 + v182++ + 1;
        }
        while (v176 != v182);
      }
      float v179 = v181 / *v169;
      v169 -= v178;
      v26[v180] = v179;
      ++v176;
      --v177;
      BOOL v66 = v178-- <= 1;
    }
    while (!v66);
    goto LABEL_95;
  }
LABEL_119:
  free(v23);
  free(v17);
  v209.__darwin_time_t tv_sec = 0;
  *(void *)&v209.uint64_t tv_usec = 0;
  gettimeofday(&v209, 0);
  __darwin_time_t tv_sec = v209.tv_sec;
  uint64_t tv_usec = v209.tv_usec;
  printf("Verbose (toc) : ");
  printf("%s (%d poses, final rmse = %f)", "vl_pose_refine_multi", a5, v33);
  printf(": %f ms", (float)((float)(1000000 * (tv_sec - v189.tv_sec) - *(void *)&v189.tv_usec + tv_usec) / 1000.0));
  putchar(10);
  return v33;
}

float refine_multi_lin(double *a1, double *a2, uint64_t a3, uint64_t a4, int a5, float32x4_t *a6, uint64_t a7, float *a8, float a9, float a10, float a11, float a12)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  int v15 = 6 * a5;
  if (a8)
  {
    if (a5 < 1)
    {
      int v251 = 0;
      float v23 = 0.0;
      return sqrtf(v23 / (float)v251);
    }
    int v16 = 0;
    if (v15 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v15;
    }
    size_t v18 = 4 * v17;
    do
    {
      bzero((void *)(a7 + 4 * v16), v18);
      v16 += v15;
      --v17;
    }
    while (v17);
    bzero(a8, v18);
  }
  uint64_t v250 = a7;
  if (a5 <= 1)
  {
    int v251 = 0;
    float v23 = 0.0;
    if (a5 < 1) {
      return sqrtf(v23 / (float)v251);
    }
  }
  else
  {
    int v251 = a5 - 1;
    uint64_t v19 = 4 * v15;
    uint64_t v277 = v15 + 4;
    uint64_t v276 = (float32x2_t *)(a7 + 4 * v277);
    uint64_t v270 = (float32x4_t *)(a7 + 8 * v15);
    uint64_t v268 = 2 * v15 + 4;
    uint64_t v266 = (float32x2_t *)(a7 + 4 * v268);
    float v20 = 1.0 / a9;
    uint64_t v263 = (float32x4_t *)(a7 + v19);
    long long v260 = (float32x4_t *)(a7 + 12 * v15);
    uint64_t v258 = 3 * v15 + 4;
    long long v256 = (float32x2_t *)(a7 + 4 * v258);
    float v21 = (float)(1.0 / a9) * 0.0;
    long long v254 = (float32x4_t *)(a7 + 16 * v15);
    uint64_t v246 = v19 | 4;
    uint64_t v240 = (float32x4_t *)(a7 + 20 * v15);
    uint64_t v243 = (float32x2_t *)(a7 + 4 * (v19 | 4));
    uint64_t v237 = 5 * v15 + 4;
    unsigned int v235 = (float32x2_t *)(a7 + 4 * v237);
    uint64_t v22 = 1;
    float v23 = 0.0;
    float v279 = v20;
    do
    {
      long long v288 = 0u;
      long long v289 = 0u;
      float32x4_t v286 = 0u;
      long long v287 = 0u;
      float32x4_t v284 = 0u;
      float32x4_t v285 = 0u;
      uint64_t v24 = (6 * v22);
      if (a8) {
        uint64_t v25 = &a8[v24];
      }
      else {
        uint64_t v25 = 0;
      }
      g_coords_diff(&a2[12 * v22], a2, (uint64_t)&v284);
      float v26 = *((double *)&v288 + 1);
      float v27 = *(double *)&v289;
      float v28 = *((double *)&v289 + 1);
      float v29 = a6[2].f32[0];
      float v30 = a6[6 * v22 + 2].f32[1] - a6[2].f32[1];
      float v31 = a6[6 * v22 + 2].f32[2] - a6[2].f32[2];
      float v33 = a6->f32[2];
      float v32 = a6->f32[3];
      float v34 = a6->f32[1];
      float v35 = (float)(v32 * v31) + (float)(a6->f32[0] * v30);
      float v36 = a6[6 * v22 + 2].f32[3] - a6[2].f32[3];
      float v38 = a6[1].f32[0];
      float v37 = a6[1].f32[1];
      float v39 = (float)(v31 * v38) + (float)(v34 * v30);
      float v40 = (float)(v31 * v37) + (float)(v33 * v30);
      float v42 = a6[1].f32[2];
      float v41 = a6[1].f32[3];
      float v43 = v35 + (float)(v42 * v36);
      float v44 = v39 + (float)(v41 * v36);
      float v45 = v40 + (float)(v29 * v36);
      float v46 = v279 * (float)(v26 - v43);
      float v47 = v279 * (float)(v27 - v44);
      float v48 = v279 * (float)(v28 - v45);
      if (a8)
      {
        float v49 = -(float)(a6->f32[0] * v279);
        float v50 = -(float)(v34 * v279);
        *(float *)v290.f64 = v49;
        *((float *)v290.f64 + 1) = v50;
        uint64_t v51 = v250 + 4 * (int)(6 * v22 * (v15 | 1));
        uint64_t v52 = v250 + v24 * 4;
        float v53 = -(float)(v33 * v279);
        float v54 = -(float)(v32 * v279);
        *(float *)&v290.f64[1] = v53;
        *((float *)&v290.f64[1] + 1) = v54;
        float v55 = -(float)(v38 * v279);
        float v56 = -(float)(v37 * v279);
        *(float *)v291.f64 = v55;
        *((float *)v291.f64 + 1) = v56;
        float v57 = -(float)(v42 * v279);
        float v58 = -(float)(v41 * v279);
        *(float *)&v291.f64[1] = v57;
        *((float *)&v291.f64[1] + 1) = v58;
        float v59 = -(float)(v29 * v279);
        float v60 = v279 * v44;
        *(float *)v292.f64 = v59;
        *((float *)v292.f64 + 1) = v279 * v44;
        float v61 = -(float)(v43 * v279);
        *(float *)&v292.f64[1] = v61;
        *((float *)&v292.f64[1] + 1) = v21;
        float v62 = -(float)(v45 * v279);
        *(float *)v293.f64 = v62;
        *((float *)v293.f64 + 1) = v21;
        float v63 = v279 * v43;
        *(void *)&v293.f64[1] = __PAIR64__(LODWORD(v21), LODWORD(v63));
        float v64 = v279 * v45;
        float v65 = -(float)(v44 * v279);
        uint64_t v66 = -72;
        uint64_t v67 = (float *)&v300 + 1;
        *(float *)uint64_t v294 = v64;
        *(float *)&v294[4] = v65;
        do
        {
          *(v67 - 5) = 0.0;
          float v68 = (float)(v49 * *(float *)&v294[v66 + 8]) + 0.0;
          *(v67 - 5) = v68;
          float v69 = v68 + (float)(v50 * *(float *)&v294[v66 + 12]);
          *(v67 - 5) = v69;
          *(v67 - 5) = v69 + (float)(v53 * *(float *)&v294[v66 + 16]);
          *(v67 - 4) = 0.0;
          float v70 = (float)(v54 * *(float *)&v294[v66 + 8]) + 0.0;
          *(v67 - 4) = v70;
          float v71 = v70 + (float)(v55 * *(float *)&v294[v66 + 12]);
          *(v67 - 4) = v71;
          *(v67 - 4) = v71 + (float)(v56 * *(float *)&v294[v66 + 16]);
          *(v67 - 3) = 0.0;
          float v72 = (float)(v57 * *(float *)&v294[v66 + 8]) + 0.0;
          *(v67 - 3) = v72;
          float v73 = v72 + (float)(v58 * *(float *)&v294[v66 + 12]);
          *(v67 - 3) = v73;
          *(v67 - 3) = v73 + (float)(v59 * *(float *)&v294[v66 + 16]);
          *(v67 - 2) = 0.0;
          float v74 = (float)(v60 * *(float *)&v294[v66 + 8]) + 0.0;
          *(v67 - 2) = v74;
          float v75 = v74 + (float)(v61 * *(float *)&v294[v66 + 12]);
          *(v67 - 2) = v75;
          *(v67 - 2) = v75 + (float)(v21 * *(float *)&v294[v66 + 16]);
          *(v67 - 1) = 0.0;
          float v76 = (float)(v62 * *(float *)&v294[v66 + 8]) + 0.0;
          *(v67 - 1) = v76;
          float v77 = v76 + (float)(v21 * *(float *)&v294[v66 + 12]);
          *(v67 - 1) = v77;
          *(v67 - 1) = v77 + (float)(v63 * *(float *)&v294[v66 + 16]);
          *uint64_t v67 = 0.0;
          float v78 = (float)(v21 * *(float *)&v294[v66 + 8]) + 0.0;
          *uint64_t v67 = v78;
          float v79 = v78 + (float)(v64 * *(float *)&v294[v66 + 12]);
          *uint64_t v67 = v79;
          *uint64_t v67 = v79 + (float)(v65 * *(float *)&v294[v66 + 16]);
          v67 += 6;
          v66 += 12;
        }
        while (v66);
        *(float32x4_t *)uint64_t v250 = vaddq_f32(*(float32x4_t *)v250, v299);
        float32x2_t v80 = v302;
        *(float32x2_t *)(v250 + 16) = vadd_f32(*(float32x2_t *)(v250 + 16), v300);
        float32x4_t *v263 = vaddq_f32(*v263, v301);
        *uint64_t v276 = vadd_f32(*v276, v80);
        *uint64_t v270 = vaddq_f32(*v270, v303);
        float32x2_t v81 = v306;
        *uint64_t v266 = vadd_f32(*v266, v304);
        *long long v260 = vaddq_f32(*v260, v305);
        float32x2_t *v256 = vadd_f32(*v256, v81);
        *long long v254 = vaddq_f32(*v254, v307);
        float32x2_t v82 = v310;
        *uint64_t v243 = vadd_f32(*v243, v308);
        *uint64_t v240 = vaddq_f32(*v240, v309);
        *unsigned int v235 = vadd_f32(*v235, v82);
        float v83 = a8[1];
        *a8 = (float)((float)(*a8 + (float)(v49 * v46)) + (float)(v50 * v47)) + (float)(v53 * v48);
        a8[1] = (float)((float)(v83 + (float)(v54 * v46)) + (float)(v55 * v47)) + (float)(v56 * v48);
        float v84 = (float)((float)(a8[3] + (float)(v60 * v46)) + (float)(v61 * v47)) + (float)(v21 * v48);
        a8[2] = (float)((float)(a8[2] + (float)(v57 * v46)) + (float)(v58 * v47)) + (float)(v59 * v48);
        a8[3] = v84;
        float v85 = (float)((float)(a8[5] + (float)(v21 * v46)) + (float)(v64 * v47)) + (float)(v65 * v48);
        a8[4] = (float)((float)(a8[4] + (float)(v62 * v46)) + (float)(v21 * v47)) + (float)(v63 * v48);
        a8[5] = v85;
        float32x4_t v86 = a6[1];
        float32x4_t v87 = vmulq_n_f32(*a6, v279);
        *(float32x4_t *)&v294[8] = v87;
        float32x4_t v88 = vmulq_n_f32(v86, v279);
        float v89 = v279 * a6[2].f32[0];
        *(float32x4_t *)&v294[24] = v88;
        float v295 = v89;
        float v298 = 0.0;
        long long v296 = 0u;
        long long v297 = 0u;
        float v90 = (float *)&v300 + 1;
        do
        {
          *(v90 - 5) = 0.0;
          float v91 = (float)(v87.f32[0] * *(float *)&v294[v66 + 8]) + 0.0;
          *(v90 - 5) = v91;
          float v92 = v91 + (float)(v87.f32[1] * *(float *)&v294[v66 + 12]);
          *(v90 - 5) = v92;
          *(v90 - 5) = v92 + (float)(v87.f32[2] * *(float *)&v294[v66 + 16]);
          *(v90 - 4) = 0.0;
          float v93 = (float)(v87.f32[3] * *(float *)&v294[v66 + 8]) + 0.0;
          *(v90 - 4) = v93;
          float v94 = v93 + (float)(v88.f32[0] * *(float *)&v294[v66 + 12]);
          *(v90 - 4) = v94;
          *(v90 - 4) = v94 + (float)(v88.f32[1] * *(float *)&v294[v66 + 16]);
          *(v90 - 3) = 0.0;
          float v95 = (float)(v88.f32[2] * *(float *)&v294[v66 + 8]) + 0.0;
          *(v90 - 3) = v95;
          float v96 = v95 + (float)(v88.f32[3] * *(float *)&v294[v66 + 12]);
          *(v90 - 3) = v96;
          *(v90 - 3) = v96 + (float)(v89 * *(float *)&v294[v66 + 16]);
          *(v90 - 2) = 0.0;
          float v97 = (float)(*(float *)&v294[v66 + 8] * 0.0) + 0.0;
          *(v90 - 2) = v97;
          float v98 = v97 + (float)(*(float *)&v294[v66 + 12] * 0.0);
          *(v90 - 2) = v98;
          *(v90 - 2) = v98 + (float)(*(float *)&v294[v66 + 16] * 0.0);
          *(v90 - 1) = 0.0;
          float v99 = (float)(*(float *)&v294[v66 + 8] * 0.0) + 0.0;
          *(v90 - 1) = v99;
          float v100 = v99 + (float)(*(float *)&v294[v66 + 12] * 0.0);
          *(v90 - 1) = v100;
          *(v90 - 1) = v100 + (float)(*(float *)&v294[v66 + 16] * 0.0);
          *float v90 = 0.0;
          float v101 = (float)(*(float *)&v294[v66 + 8] * 0.0) + 0.0;
          *float v90 = v101;
          float v102 = v101 + (float)(*(float *)&v294[v66 + 12] * 0.0);
          *float v90 = v102;
          *float v90 = v102 + (float)(*(float *)&v294[v66 + 16] * 0.0);
          v90 += 6;
          v66 += 12;
        }
        while (v66 != 72);
        uint64_t v103 = 0;
        *(float32x4_t *)uint64_t v51 = vaddq_f32(*(float32x4_t *)v51, v299);
        float32x2_t v104 = v302;
        *(float32x2_t *)(v51 + 16) = vadd_f32(*(float32x2_t *)(v51 + 16), v300);
        *(float32x4_t *)(v51 + 4 * v15) = vaddq_f32(*(float32x4_t *)(v51 + 4 * v15), v301);
        *(float32x2_t *)(v51 + 4 * v277) = vadd_f32(*(float32x2_t *)(v51 + 4 * v277), v104);
        *(float32x4_t *)(v51 + 8 * v15) = vaddq_f32(*(float32x4_t *)(v51 + 8 * v15), v303);
        float32x2_t v105 = v306;
        *(float32x2_t *)(v51 + 4 * v26_Block_object_dispose(&STACK[0x220], 8) = vadd_f32(*(float32x2_t *)(v51 + 4 * v268), v304);
        *(float32x4_t *)(v51 + 12 * v15) = vaddq_f32(*(float32x4_t *)(v51 + 12 * v15), v305);
        *(float32x2_t *)(v51 + 4 * v25_Block_object_dispose(&STACK[0x220], 8) = vadd_f32(*(float32x2_t *)(v51 + 4 * v258), v105);
        *(float32x4_t *)(v51 + 16 * v15) = vaddq_f32(*(float32x4_t *)(v51 + 16 * v15), v307);
        float32x2_t v106 = v310;
        *(float32x2_t *)(v51 + 4 * v246) = vadd_f32(*(float32x2_t *)(v51 + 4 * v246), v308);
        *(float32x4_t *)(v51 + 20 * v15) = vaddq_f32(*(float32x4_t *)(v51 + 20 * v15), v309);
        *(float32x2_t *)(v51 + 4 * v237) = vadd_f32(*(float32x2_t *)(v51 + 4 * v237), v106);
        long long v107 = v296;
        long long v108 = v297;
        float v109 = v298;
        float v110 = (float)((float)(v25[1] + (float)(v87.f32[3] * v46)) + (float)(v88.f32[0] * v47))
             + (float)(v88.f32[1] * v48);
        *uint64_t v25 = (float)((float)(*v25 + (float)(v87.f32[0] * v46)) + (float)(v87.f32[1] * v47))
             + (float)(v87.f32[2] * v48);
        v25[1] = v110;
        float v111 = (float)((float)(v25[3] + (float)(*(float *)&v107 * v46)) + (float)(*((float *)&v107 + 1) * v47))
             + (float)(*((float *)&v107 + 2) * v48);
        v25[2] = (float)((float)(v25[2] + (float)(v88.f32[2] * v46)) + (float)(v88.f32[3] * v47)) + (float)(v89 * v48);
        v25[3] = v111;
        float v112 = (float)((float)(v25[5] + (float)(*((float *)&v108 + 2) * v46)) + (float)(*((float *)&v108 + 3) * v47))
             + (float)(v109 * v48);
        v25[4] = (float)((float)(v25[4] + (float)(*((float *)&v107 + 3) * v46)) + (float)(*(float *)&v108 * v47))
               + (float)(*((float *)&v108 + 1) * v48);
        v25[5] = v112;
        float v113 = (float *)&v300 + 1;
        do
        {
          *(v113 - 5) = 0.0;
          float v114 = (float)(v87.f32[0] * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *(v113 - 5) = v114;
          float v115 = v114 + (float)(v87.f32[1] * *(float *)((char *)v290.f64 + v103 + 4));
          *(v113 - 5) = v115;
          *(v113 - 5) = v115 + (float)(v87.f32[2] * *(float *)((char *)&v290.f64[1] + v103));
          *(v113 - 4) = 0.0;
          float v116 = (float)(v87.f32[3] * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *(v113 - 4) = v116;
          float v117 = v116 + (float)(v88.f32[0] * *(float *)((char *)v290.f64 + v103 + 4));
          *(v113 - 4) = v117;
          *(v113 - 4) = v117 + (float)(v88.f32[1] * *(float *)((char *)&v290.f64[1] + v103));
          *(v113 - 3) = 0.0;
          float v118 = (float)(v88.f32[2] * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *(v113 - 3) = v118;
          float v119 = v118 + (float)(v88.f32[3] * *(float *)((char *)v290.f64 + v103 + 4));
          *(v113 - 3) = v119;
          *(v113 - 3) = v119 + (float)(v89 * *(float *)((char *)&v290.f64[1] + v103));
          *(v113 - 2) = 0.0;
          float v120 = (float)(*(float *)&v107 * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *(v113 - 2) = v120;
          float v121 = v120 + (float)(*((float *)&v107 + 1) * *(float *)((char *)v290.f64 + v103 + 4));
          *(v113 - 2) = v121;
          *(v113 - 2) = v121 + (float)(*((float *)&v107 + 2) * *(float *)((char *)&v290.f64[1] + v103));
          *(v113 - 1) = 0.0;
          float v122 = (float)(*((float *)&v107 + 3) * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *(v113 - 1) = v122;
          float v123 = v122 + (float)(*(float *)&v108 * *(float *)((char *)v290.f64 + v103 + 4));
          *(v113 - 1) = v123;
          *(v113 - 1) = v123 + (float)(*((float *)&v108 + 1) * *(float *)((char *)&v290.f64[1] + v103));
          *float v113 = 0.0;
          float v124 = (float)(*((float *)&v108 + 2) * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *float v113 = v124;
          float v125 = v124 + (float)(*((float *)&v108 + 3) * *(float *)((char *)v290.f64 + v103 + 4));
          *float v113 = v125;
          *float v113 = v125 + (float)(v109 * *(float *)((char *)&v290.f64[1] + v103));
          v113 += 6;
          v103 += 12;
        }
        while (v103 != 72);
        *(float32x4_t *)uint64_t v52 = vaddq_f32(*(float32x4_t *)v52, v299);
        float32x2_t v126 = v302;
        *(float32x2_t *)(v52 + 16) = vadd_f32(*(float32x2_t *)(v52 + 16), v300);
        *(float32x4_t *)(v52 + 4 * v15) = vaddq_f32(*(float32x4_t *)(v52 + 4 * v15), v301);
        *(float32x2_t *)(v52 + 4 * v277) = vadd_f32(*(float32x2_t *)(v52 + 4 * v277), v126);
        *(float32x4_t *)(v52 + 8 * v15) = vaddq_f32(*(float32x4_t *)(v52 + 8 * v15), v303);
        float32x2_t v127 = v306;
        *(float32x2_t *)(v52 + 4 * v26_Block_object_dispose(&STACK[0x220], 8) = vadd_f32(*(float32x2_t *)(v52 + 4 * v268), v304);
        *(float32x4_t *)(v52 + 12 * v15) = vaddq_f32(*(float32x4_t *)(v52 + 12 * v15), v305);
        *(float32x2_t *)(v52 + 4 * v25_Block_object_dispose(&STACK[0x220], 8) = vadd_f32(*(float32x2_t *)(v52 + 4 * v258), v127);
        *(float32x4_t *)(v52 + 16 * v15) = vaddq_f32(*(float32x4_t *)(v52 + 16 * v15), v307);
        float32x2_t v128 = v310;
        *(float32x2_t *)(v52 + 4 * v246) = vadd_f32(*(float32x2_t *)(v52 + 4 * v246), v308);
        *(float32x4_t *)(v52 + 20 * v15) = vaddq_f32(*(float32x4_t *)(v52 + 20 * v15), v309);
        *(float32x2_t *)(v52 + 4 * v237) = vadd_f32(*(float32x2_t *)(v52 + 4 * v237), v128);
      }
      float v23 = v23 + (float)((float)((float)(v47 * v47) + (float)(v46 * v46)) + (float)(v48 * v48));
      ++v22;
    }
    while (v22 != a5);
  }
  uint64_t v129 = 0;
  uint64_t v130 = 2 * v15;
  int v244 = v15 | 1;
  uint64_t v131 = 4 * v15;
  uint64_t v241 = v15 | 1;
  uint64_t v242 = v131;
  uint64_t v132 = 4 * (v15 + 2);
  uint64_t v133 = 4 * (v15 + 3);
  uint64_t v134 = 4 * (v15 + 4);
  uint64_t v135 = 4 * (v15 + 5);
  uint64_t v136 = v130 | 3;
  uint64_t v137 = 8 * v15;
  uint64_t v138 = v130 + 4;
  uint64_t v139 = 4 * (v130 | 1);
  uint64_t v140 = v130 + 5;
  uint64_t v141 = 4 * (v130 | 2);
  uint64_t v142 = 3 * v15;
  uint64_t v272 = 3 * v15;
  uint64_t v271 = v142 | 1;
  uint64_t v269 = v142 + 2;
  uint64_t v267 = v142 + 3;
  uint64_t v264 = v142 + 5;
  uint64_t v265 = v142 + 4;
  uint64_t v143 = 5 * v15;
  uint64_t v262 = 4 * v15;
  uint64_t v261 = v131 | 1;
  uint64_t v259 = v131 | 2;
  uint64_t v257 = v131 | 3;
  uint64_t v255 = v131 | 4;
  uint64_t v144 = v131 | 5;
  uint64_t v145 = 5 * v15;
  uint64_t v146 = v143 | 1;
  uint64_t v147 = v143 + 2;
  uint64_t v148 = v143 + 3;
  uint64_t v149 = v143 + 4;
  uint64_t v150 = v143 + 5;
  uint64_t v247 = a5;
  uint64_t v238 = v133;
  uint64_t v239 = v132;
  uint64_t v234 = v135;
  uint64_t v236 = v134;
  uint64_t v232 = v139;
  uint64_t v233 = v137;
  uint64_t v230 = v136;
  uint64_t v231 = v141;
  uint64_t v228 = v140;
  uint64_t v229 = v138;
  do
  {
    memset(v294, 0, 32);
    float64x2_t v292 = 0u;
    float64x2_t v293 = 0u;
    float64x2_t v290 = 0u;
    float64x2_t v291 = 0u;
    float32x4_t v285 = 0u;
    float32x4_t v286 = 0u;
    long long v283 = 0u;
    float32x4_t v284 = 0u;
    uint64_t v151 = 3 * v129;
    uint64_t v152 = 6 * v129;
    uint64_t v153 = v129;
    long long v281 = 0u;
    long long v282 = 0u;
    g_coords_diff(&a1[12 * v129], a1, (uint64_t)&v290);
    float32x4_t v284 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v290), v291);
    float32x4_t v285 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v292), v293);
    float32x4_t v286 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v294), *(float64x2_t *)&v294[16]);
    f32 = a6[v152].f32;
    g_coordsf_diff((uint64_t)&v284, (uint64_t)f32, (uint64_t)&v281);
    uint64_t v155 = *(void *)(a3 + 24 * v153);
    if (v155 >= 1)
    {
      uint64_t v156 = 0;
      long long v157 = v281;
      int64x2_t v158 = (float *)(v250 + 4 * 6 * (int)v153 * v244);
      long long v159 = v282;
      float v160 = *((float *)&v283 + 1);
      float v278 = *(float *)&v283;
      uint64_t v161 = *((void *)&v283 + 1);
      uint64_t v162 = &a8[(6 * v153)];
      if (!a8) {
        uint64_t v162 = 0;
      }
      uint64_t v163 = (float *)(*(void *)(a4 + 8 * v151 + 8) + 8);
      uint64_t v164 = *(void *)(a3 + 24 * v153);
      do
      {
        float v165 = *(v163 - 2);
        float v166 = *(v163 - 1);
        float v167 = *v163;
        float v168 = v160
             + (float)((float)((float)(*((float *)&v157 + 1) * v166) + (float)(*(float *)&v157 * v165))
                     + (float)(*((float *)&v157 + 2) * *v163));
        float v169 = 0.0;
        if (v168 > 0.1)
        {
          float v170 = (float)((float)((float)(1.0 / v165) * a11) * (float)((float)(1.0 / v165) * a11)) + (float)(a10 * a10);
          float v171 = sqrtf(v170 + (float)((float)(v166 * a12) * (float)(v166 * a12)));
          float v172 = sqrtf(v170 + (float)((float)(v167 * a12) * (float)(v167 * a12)));
          float v173 = *(float *)&v161
               + (float)((float)((float)(*(float *)&v159 * v166) + (float)(*((float *)&v157 + 3) * v165))
                       + (float)(*((float *)&v159 + 1) * v167));
          float v174 = *((float *)&v161 + 1)
               + (float)((float)((float)(*((float *)&v159 + 3) * v166) + (float)(*((float *)&v159 + 2) * v165))
                       + (float)(v278 * v167));
          float v175 = 1.0 / v171;
          float v176 = 1.0 / v172;
          unint64_t v177 = (float *)(*(void *)(a3 + 8 * v151 + 8) + v156);
          float v178 = (float)(1.0 / v171) * (float)(*v177 - (float)(v173 / v168));
          float v179 = (float)(1.0 / v172) * (float)(v177[1] - (float)(v174 / v168));
          float v169 = (float)(v179 * v179) + (float)(v178 * v178);
          if (v162)
          {
            float v180 = f32[1];
            float v181 = f32[2];
            float v182 = f32[3];
            float v183 = f32[4];
            float v184 = f32[5];
            float v185 = f32[6];
            float v186 = f32[7];
            float v187 = f32[8];
            float v188 = v175 * (float)((float)-v173 / (float)(v168 * v168));
            float v189 = (float)(1.0 / v168) * v175;
            float v190 = v176 * (float)((float)-v174 / (float)(v168 * v168));
            float v191 = (float)(1.0 / v168) * v176;
            float v192 = (float)((float)(0.0 - (float)(v188 * *f32)) - (float)(v189 * v180)) - (float)(v181 * 0.0);
            float v193 = (float)((float)(0.0 - (float)(v190 * *f32)) - (float)(v180 * 0.0)) - (float)(v191 * v181);
            float v194 = (float)((float)(0.0 - (float)(v188 * v182)) - (float)(v189 * v183)) - (float)(v184 * 0.0);
            float v195 = (float)((float)(0.0 - (float)(v190 * v182)) - (float)(v183 * 0.0)) - (float)(v191 * v184);
            float v196 = (float)((float)(0.0 - (float)(v188 * v185)) - (float)(v189 * v186)) - (float)(v187 * 0.0);
            float v197 = (float)((float)(0.0 - (float)(v190 * v185)) - (float)(v186 * 0.0)) - (float)(v191 * v187);
            float v198 = (float)((float)((float)(v188 * v173) + 0.0) - (float)(v189 * v168)) + 0.0;
            float v199 = (float)((float)((float)(v190 * v173) + 0.0) - (float)(v168 * 0.0)) + (float)(v191 * 0.0);
            float v200 = (float)((float)(0.0 - (float)(v188 * v174)) + (float)(v189 * 0.0)) + (float)(v168 * 0.0);
            float v201 = (float)((float)(0.0 - (float)(v190 * v174)) + 0.0) + (float)(v191 * v168);
            float v202 = (float)((float)((float)(v188 * 0.0) + 0.0) + (float)(v189 * v174)) - (float)(v173 * 0.0);
            float v203 = (float)((float)((float)(v190 * 0.0) + 0.0) + (float)(v174 * 0.0)) - (float)(v191 * v173);
            float v204 = (float)((float)(v194 * v192) + 0.0) + (float)(v195 * v193);
            float v205 = (float)((float)(v196 * v192) + 0.0) + (float)(v197 * v193);
            float v206 = (float)((float)(v198 * v192) + 0.0) + (float)(v199 * v193);
            float v207 = (float)((float)(v200 * v192) + 0.0) + (float)(v201 * v193);
            float v208 = (float)((float)(v202 * v192) + 0.0) + (float)(v203 * v193);
            float v209 = (float)((float)(v196 * v194) + 0.0) + (float)(v197 * v195);
            float v210 = (float)((float)(v198 * v194) + 0.0) + (float)(v199 * v195);
            float v211 = v204 + v158[1];
            *int64x2_t v158 = (float)((float)((float)(v192 * v192) + 0.0) + (float)(v193 * v193)) + *v158;
            v158[1] = v211;
            float v212 = v206 + v158[3];
            v158[2] = v205 + v158[2];
            v158[3] = v212;
            float v213 = v208 + v158[5];
            v158[4] = v207 + v158[4];
            v158[5] = v213;
            *(float *)((char *)v158 + v242) = v204 + *(float *)((char *)v158 + v242);
            float v214 = (float)((float)(v200 * v194) + 0.0) + (float)(v201 * v195);
            v158[v241] = (float)((float)((float)(v194 * v194) + 0.0) + (float)(v195 * v195)) + v158[v241];
            *(float *)((char *)v158 + v239) = v209 + *(float *)((char *)v158 + v239);
            float v215 = (float)((float)(v202 * v194) + 0.0) + (float)(v203 * v195);
            *(float *)((char *)v158 + v23_Block_object_dispose(&STACK[0x220], 8) = v210 + *(float *)((char *)v158 + v238);
            *(float *)((char *)v158 + v236) = v214 + *(float *)((char *)v158 + v236);
            *(float *)((char *)v158 + v234) = v215 + *(float *)((char *)v158 + v234);
            *(float *)((char *)v158 + v233) = v205 + *(float *)((char *)v158 + v233);
            float v216 = (float)((float)(v198 * v196) + 0.0) + (float)(v199 * v197);
            *(float *)((char *)v158 + v232) = v209 + *(float *)((char *)v158 + v232);
            *(float *)((char *)v158 + v231) = (float)((float)((float)(v196 * v196) + 0.0) + (float)(v197 * v197))
                                            + *(float *)((char *)v158 + v231);
            float v217 = (float)((float)(v200 * v196) + 0.0) + (float)(v201 * v197);
            v158[v230] = v216 + v158[v230];
            v158[v229] = v217 + v158[v229];
            float v218 = (float)((float)(v202 * v196) + 0.0) + (float)(v203 * v197);
            v158[v228] = v218 + v158[v228];
            v158[v272] = v206 + v158[v272];
            v158[v271] = v210 + v158[v271];
            v158[v269] = v216 + v158[v269];
            float v219 = (float)((float)(v200 * v198) + 0.0) + (float)(v201 * v199);
            v158[v267] = (float)((float)((float)(v198 * v198) + 0.0) + (float)(v199 * v199)) + v158[v267];
            v158[v265] = v219 + v158[v265];
            float v220 = (float)((float)(v202 * v198) + 0.0) + (float)(v203 * v199);
            v158[v264] = v220 + v158[v264];
            v158[v262] = v207 + v158[v262];
            v158[v261] = v214 + v158[v261];
            v158[v259] = v217 + v158[v259];
            v158[v257] = v219 + v158[v257];
            v158[v255] = (float)((float)((float)(v200 * v200) + 0.0) + (float)(v201 * v201)) + v158[v255];
            float v221 = (float)((float)(v202 * v200) + 0.0) + (float)(v203 * v201);
            v158[v144] = v221 + v158[v144];
            v158[v145] = v208 + v158[v145];
            v158[v146] = v215 + v158[v146];
            v158[v147] = v218 + v158[v147];
            v158[v148] = v220 + v158[v148];
            v158[v149] = v221 + v158[v149];
            v158[v150] = (float)((float)((float)(v202 * v202) + 0.0) + (float)(v203 * v203)) + v158[v150];
            float v222 = (float)(v162[1] + (float)(v194 * v178)) + (float)(v195 * v179);
            float v223 = (float)(v162[2] + (float)(v196 * v178)) + (float)(v197 * v179);
            float v224 = (float)(v162[3] + (float)(v198 * v178)) + (float)(v199 * v179);
            float v225 = (float)(v162[4] + (float)(v200 * v178)) + (float)(v201 * v179);
            float v226 = (float)(v162[5] + (float)(v202 * v178)) + (float)(v203 * v179);
            *uint64_t v162 = (float)(*v162 + (float)(v192 * v178)) + (float)(v193 * v179);
            v162[1] = v222;
            v162[2] = v223;
            v162[3] = v224;
            v162[4] = v225;
            v162[5] = v226;
          }
        }
        float v23 = v23 + v169;
        v156 += 8;
        v163 += 3;
        --v164;
      }
      while (v164);
      v251 += v155;
    }
    uint64_t v129 = v153 + 1;
  }
  while (v153 + 1 != v247);
  return sqrtf(v23 / (float)v251);
}

float vl_pose_refine(float32x2_t *a1, uint64_t a2, uint64_t *a3, int a4, float32x2_t *a5, uint64_t a6, float a7, float a8, float a9)
{
  uint64_t v70 = 0;
  float v71 = 0;
  uint64_t v72 = 0;
  uint64_t v17 = *a3;
  if (*a3 <= 0)
  {
    uint64_t v70 = *a3;
  }
  else
  {
    if (v17 <= 21) {
      uint64_t v19 = 21;
    }
    else {
      uint64_t v19 = *a3;
    }
    float v20 = (float32x2_t *)malloc_type_realloc(0, 12 * v19, 0x7C5287FEuLL);
    float v71 = v20;
    uint64_t v72 = v19;
    bzero(v20, 12 * v17);
    uint64_t v70 = *a3;
    if (v70 >= 1)
    {
      unint64_t v21 = a3[1];
      if ((unint64_t)v70 >= 5)
      {
        uint64_t v22 = 0;
        float v23 = (char *)v20 + 12 * v70;
        BOOL v25 = (unint64_t)v20 < v21 + 12 * v70 && v21 < (unint64_t)v23;
        BOOL v26 = v23 <= (char *)a1 || v20 >= &a1[6];
        if (v26 && !v25)
        {
          uint64_t v27 = v70 & 3;
          if ((v70 & 3) == 0) {
            uint64_t v27 = 4;
          }
          uint64_t v22 = v70 - v27;
          uint64_t v28 = v22;
          float v29 = (const float *)a3[1];
          float v30 = (float *)v20;
          do
          {
            float32x4x3_t v73 = vld3q_f32(v29);
            v29 += 12;
            float v31 = (const float *)&a1[4] + 1;
            float32x4_t v32 = vld1q_dup_f32(v31);
            float v33 = (const float *)&a1[5];
            float32x4_t v34 = vld1q_dup_f32(v33);
            float32x4_t v35 = vsubq_f32(v73.val[0], v32);
            float32x4_t v36 = vsubq_f32(v73.val[1], v34);
            float v37 = (const float *)&a1[5] + 1;
            float32x4_t v38 = vld1q_dup_f32(v37);
            float32x4_t v39 = vsubq_f32(v73.val[2], v38);
            v74.val[0] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, a1[1].f32[1]), v35, a1->f32[0]), v39, a1[3].f32[0]);
            v74.val[1] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, a1[2].f32[0]), v35, a1->f32[1]), v39, a1[3].f32[1]);
            v74.val[2] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, a1[2].f32[1]), v35, a1[1].f32[0]), v39, a1[4].f32[0]);
            vst3q_f32(v30, v74);
            v30 += 12;
            v28 -= 4;
          }
          while (v28);
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v40 = v70 - v22;
      uint64_t v41 = 12 * v22;
      float v42 = (float *)(v41 + v21 + 4);
      float v43 = (float *)((char *)&v20[1] + v41);
      do
      {
        float v44 = *v42;
        float v45 = v42[1];
        *(v43 - 2) = (float)((float)(a1[1].f32[1] * (float)(*v42 - a1[5].f32[0]))
                           + (float)(a1->f32[0] * (float)(*(v42 - 1) - a1[4].f32[1])))
                   + (float)(a1[3].f32[0] * (float)(v45 - a1[5].f32[1]));
        float v46 = *(v42 - 1);
        *(v43 - 1) = (float)((float)(a1[2].f32[0] * (float)(v44 - a1[5].f32[0]))
                           + (float)(a1->f32[1] * (float)(v46 - a1[4].f32[1])))
                   + (float)(a1[3].f32[1] * (float)(v45 - a1[5].f32[1]));
        float v47 = *v42;
        v42 += 3;
        *float v43 = (float)((float)(a1[2].f32[1] * (float)(v47 - a1[5].f32[0]))
                     + (float)(a1[1].f32[0] * (float)(v46 - a1[4].f32[1])))
             + (float)(a1[4].f32[0] * (float)(v45 - a1[5].f32[1]));
        v43 += 3;
        --v40;
      }
      while (v40);
    }
  }
  float64x2_t v48 = vcvtq_f64_f32(a1[1]);
  float64x2_t v64 = vcvtq_f64_f32(*a1);
  float64x2_t v65 = v48;
  float64x2_t v49 = vcvtq_f64_f32(a1[3]);
  float64x2_t v66 = vcvtq_f64_f32(a1[2]);
  float64x2_t v67 = v49;
  float64x2_t v50 = vcvtq_f64_f32(a1[5]);
  float64x2_t v68 = vcvtq_f64_f32(a1[4]);
  float64x2_t v69 = v50;
  float64x2_t v51 = vcvtq_f64_f32(a5[1]);
  float64x2_t v58 = vcvtq_f64_f32(*a5);
  float64x2_t v59 = v51;
  float64x2_t v52 = vcvtq_f64_f32(a5[3]);
  float64x2_t v60 = vcvtq_f64_f32(a5[2]);
  float64x2_t v61 = v52;
  float64x2_t v53 = vcvtq_f64_f32(a5[5]);
  float64x2_t v62 = vcvtq_f64_f32(a5[4]);
  float64x2_t v63 = v53;
  float v54 = vl_pose_refine_multi(v64.f64, 0, a2, (uint64_t)&v70, 1, a4, v58.f64, a6, NAN, a7, a8, a9);
  float32x4_t v55 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v66), v67);
  *(float32x4_t *)a1->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v64), v65);
  *(float32x4_t *)a1[2].f32 = v55;
  *(float32x4_t *)a1[4].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v68), v69);
  float32x4_t v56 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v60), v61);
  *(float32x4_t *)a5->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v58), v59);
  *(float32x4_t *)a5[2].f32 = v56;
  *(float32x4_t *)a5[4].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v62), v63);
  free(v71);
  return v54;
}

float vl_pose_irefine(long long *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, uint64_t a8, float a9)
{
  double v13 = (char *)malloc_type_malloc(8 * *a2, 0x26069818uLL);
  int v14 = v13;
  float v195 = a2;
  uint64_t v15 = *a2;
  if ((uint64_t)*a2 >= 1)
  {
    uint64_t v16 = a2[1];
    if (v15 == 1)
    {
      unint64_t v17 = 0;
LABEL_7:
      uint64_t v22 = v15 - v17;
      float v23 = &v13[8 * v17];
      uint64_t v24 = (void *)(v16 + 288 * v17);
      do
      {
        *(void *)float v23 = *v24;
        v23 += 8;
        v24 += 36;
        --v22;
      }
      while (v22);
      goto LABEL_9;
    }
    unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v19 = v13;
    float v20 = (void *)a2[1];
    do
    {
      *(void *)&long long v21 = *v20;
      *((void *)&v21 + 1) = v20[36];
      *v19++ = v21;
      v20 += 72;
      v18 -= 2;
    }
    while (v18);
    if (v15 != v17) {
      goto LABEL_7;
    }
  }
LABEL_9:
  v199[0] = (void *)0x3D4CCCCD00000010;
  LODWORD(v199[1]) = 0;
  BOOL v25 = (int32x4_t *)malloc_type_malloc(4 * (int)v15, 0x100004052888210uLL);
  if ((int)v15 < 1) {
    goto LABEL_16;
  }
  if (v15 < 8uLL)
  {
    unint64_t v26 = 0;
    do
    {
LABEL_15:
      v25->i32[v26] = v26;
      ++v26;
    }
    while (v15 != v26);
    goto LABEL_16;
  }
  unint64_t v26 = v15 - (unint64_t)(v15 & 7);
  int32x4_t v27 = (int32x4_t)xmmword_21BB7A770;
  uint64_t v28 = v25 + 1;
  v29.i64[0] = 0x400000004;
  v29.i64[1] = 0x400000004;
  v30.i64[0] = 0x800000008;
  v30.i64[1] = 0x800000008;
  unint64_t v31 = v26;
  do
  {
    v28[-1] = v27;
    *uint64_t v28 = vaddq_s32(v27, v29);
    int32x4_t v27 = vaddq_s32(v27, v30);
    v28 += 2;
    v31 -= 8;
  }
  while (v31);
  if ((v15 & 7) != 0) {
    goto LABEL_15;
  }
LABEL_16:
  float v187 = (void **)rkd_create_ex(v14, (uint64_t)v25, 2, v15, 0, (uint64_t)v199);
  __b = (char *)malloc_type_malloc(4 * *a2, 0xAB4654AAuLL);
  float32x4_t v32 = (int32x4_t *)malloc_type_malloc(4 * *a2, 0xCB59ACBEuLL);
  float v33 = *(float *)(a5 + 328);
  uint64_t v34 = a8;
  if (a8)
  {
    *(void *)a8 = 0;
    *(void *)(a8 + 24) = 0;
    *(void *)(a8 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
    uint64_t v35 = *(void *)(a8 + 16);
    if (v35 <= 31)
    {
      uint64_t v36 = 2 * v35;
      if (2 * v35 <= 32) {
        uint64_t v36 = 32;
      }
      if (v35) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 32;
      }
      *(void *)(a8 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a8 + 8), 8 * v37, 0xE564B9A6uLL);
      *(void *)(a8 + 16) = v37;
    }
    uint64_t v38 = *(void *)(a8 + 40);
    if (v38 <= 31)
    {
      uint64_t v39 = 2 * v38;
      if (2 * v38 <= 32) {
        uint64_t v39 = 32;
      }
      if (v38) {
        uint64_t v40 = v39;
      }
      else {
        uint64_t v40 = 32;
      }
      *(void *)(a8 + 32) = malloc_type_realloc(*(void **)(a8 + 32), 12 * v40, 0x2F6E04E9uLL);
      *(void *)(a8 + 40) = v40;
    }
    *(_OWORD *)float v199 = *(_OWORD *)a8;
    uint64_t v200 = *(void *)(a8 + 16);
    *(_OWORD *)float v197 = *(_OWORD *)(a8 + 24);
    uint64_t v198 = *(void *)(a8 + 40);
  }
  else
  {
    uint64_t v41 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
    v199[0] = 0;
    v199[1] = v41;
    uint64_t v200 = 32;
    v197[0] = 0;
    v197[1] = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
    uint64_t v198 = 32;
  }
  long long v42 = *a1;
  long long v43 = a1[2];
  *(_OWORD *)a6[2].f32 = a1[1];
  *(_OWORD *)a6[4].f32 = v43;
  *(_OWORD *)a6->f32 = v42;
  if (*(int *)(a5 + 372) >= 1)
  {
    int v44 = 0;
    uint64_t v177 = a5;
    float v45 = -0.5;
    float v186 = v33 / a9;
    float v178 = a6;
    while (1)
    {
      float v47 = *(float **)(a3 + 8);
      int v48 = *(_DWORD *)a3;
      uint64_t v49 = *(void *)(a3 + 200);
      uint64_t v50 = *(unsigned int *)(a3 + 216);
      float v51 = *(float *)(a5 + 368);
      v205[0] = 8;
      float v204 = (int *)malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
      float v54 = a6[5].f32[0];
      float v53 = a6[5].f32[1];
      float v55 = a6->f32[0];
      float v192 = a6->f32[1];
      float v56 = a6[3].f32[0];
      float v57 = a6[1].f32[1];
      float v189 = a6[1].f32[0];
      float v190 = a6[3].f32[1];
      float v58 = a6[2].f32[1];
      float v188 = a6[2].f32[0];
      float v59 = a6[4].f32[0];
      float v60 = a6[4].f32[1];
      if ((uint64_t)*v195 >= 1)
      {
        float v182 = v51;
        float v61 = a6[4].f32[0];
        float v62 = a6[2].f32[1];
        float v63 = a6[5].f32[0];
        float v184 = a6[1].f32[1];
        float v64 = a6[3].f32[0];
        float v65 = a6->f32[0];
        float v66 = a6[4].f32[1];
        memset(__b, 255, 4 * *v195);
        float v60 = v66;
        float v55 = v65;
        float v56 = v64;
        float v57 = v184;
        float v54 = v63;
        float v58 = v62;
        float v59 = v61;
        float v51 = v182;
      }
      uint64_t v67 = *(void *)(a4 + 24);
      float v68 = 0.5;
      int v69 = v48;
      if (v67 >= 1)
      {
        uint64_t v70 = *(void *)(a4 + 32);
        *(float *)v52.i32 = v51 * v51;
        if ((unint64_t)v67 > 8)
        {
          uint64_t v72 = *(void *)(a4 + 24) & 7;
          if ((v67 & 7) == 0) {
            uint64_t v72 = 8;
          }
          uint64_t v71 = v67 - v72;
          float32x4_t v73 = (float32x4_t)vdupq_lane_s32(v52, 0);
          float32x4x3_t v74 = (const float *)(v70 + 32);
          uint64_t v75 = v71;
          float v76 = v32 + 1;
          v77.i64[0] = 0xBF000000BF000000;
          v77.i64[1] = 0xBF000000BF000000;
          v78.i64[0] = 0x3F0000003F000000;
          v78.i64[1] = 0x3F0000003F000000;
          do
          {
            float v79 = v74 - 8;
            unsigned long long v80 = (unsigned __int128)vld2q_f32(v79);
            unsigned long long v81 = (unsigned __int128)vld2q_f32(v74);
            v76[-1] = vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_n_f32((float32x4_t)v80, *(float *)v52.i32)), v78, v77), v73, (float32x4_t)v80));
            *float v76 = vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_n_f32((float32x4_t)v81, *(float *)v52.i32)), v78, v77), v73, (float32x4_t)v81));
            v74 += 16;
            v76 += 2;
            v75 -= 8;
          }
          while (v75);
          float v68 = 0.5;
        }
        else
        {
          uint64_t v71 = 0;
        }
        uint64_t v82 = v67 - v71;
        float v83 = &v32->i32[v71];
        float v84 = (float *)(v70 + 8 * v71);
        do
        {
          float v85 = *v84;
          v84 += 2;
          float v86 = v85;
          if ((float)(*(float *)v52.i32 * v85) <= 0.0) {
            float v87 = v45;
          }
          else {
            float v87 = v68;
          }
          *v83++ = (int)(float)(v87 + (float)(v86 * *(float *)v52.i32));
          --v82;
        }
        while (v82);
      }
      int v185 = v44;
      if (v48 >= 1)
      {
        float v88 = (float)((float)(v57 * v54) + (float)(v55 * v60)) + (float)(v56 * v53);
        float v89 = (float)((float)(v54 * v188) + (float)(v192 * v60)) + (float)(v190 * v53);
        float v90 = (float)((float)(v54 * v58) + (float)(v189 * v60)) + (float)(v59 * v53);
        if ((int)v50 > 0)
        {
          int v91 = 0;
          uint64_t v92 = v50 & 0xFFFFFFE0;
          uint64_t v93 = v50 & 0xFFFFFFF8;
          while (1)
          {
            float v94 = *v47;
            float v95 = v47[1];
            float v96 = v47[2];
            float v97 = (float)((float)((float)(v57 * v95) + (float)(v55 * *v47)) + (float)(v56 * v96)) - v88;
            float v201 = v97;
            if (v97 > 0.0)
            {
              float v202 = (float)((float)((float)((float)(v188 * v95) + (float)(v192 * v94)) + (float)(v190 * v96)) - v89)
                   * (float)(1.0 / v97);
              float v203 = (float)((float)((float)((float)(v58 * v95) + (float)(v189 * v94)) + (float)(v59 * v96)) - v90)
                   * (float)(1.0 / v97);
              int v98 = rkd_inside((uint64_t)v187, &v202, 0, (void **)&v204, v205, v186);
              int v69 = v48;
              if (v98 > 0) {
                break;
              }
            }
LABEL_55:
            v49 += (int)v50;
            v47 += 3;
            if (++v91 == v69) {
              goto LABEL_82;
            }
          }
          uint64_t v99 = 0;
          float v100 = v204;
          uint64_t v101 = v195[1];
          while (2)
          {
            uint64_t v102 = v100[v99];
            uint64_t v103 = v101 + 288 * (int)v102 + 32;
            if (v50 < 8)
            {
              uint64_t v104 = 0;
              int v105 = 0;
              goto LABEL_71;
            }
            if (v50 >= 0x20)
            {
              uint64_t v107 = 0;
              int32x4_t v108 = 0uLL;
              int32x4_t v109 = 0uLL;
              uint64_t v110 = v101 + 48 + 288 * (int)v102;
              int32x4_t v111 = 0uLL;
              int32x4_t v112 = 0uLL;
              int32x4_t v113 = 0uLL;
              int32x4_t v114 = 0uLL;
              int32x4_t v115 = 0uLL;
              int32x4_t v116 = 0uLL;
              do
              {
                uint8x16_t v117 = *(uint8x16_t *)(v49 + v107);
                uint8x16_t v118 = *(uint8x16_t *)(v49 + v107 + 16);
                uint8x16_t v119 = *(uint8x16_t *)(v110 + v107 - 16);
                uint8x16_t v120 = *(uint8x16_t *)(v110 + v107);
                int16x8_t v121 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v117.i8, *(uint8x8_t *)v119.i8);
                int16x8_t v122 = (int16x8_t)vsubl_high_u8(v117, v119);
                int16x8_t v123 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v118.i8, *(uint8x8_t *)v120.i8);
                int16x8_t v124 = (int16x8_t)vsubl_high_u8(v118, v120);
                int32x4_t v112 = vmlal_high_s16(v112, v122, v122);
                int32x4_t v111 = vmlal_s16(v111, *(int16x4_t *)v122.i8, *(int16x4_t *)v122.i8);
                int32x4_t v109 = vmlal_high_s16(v109, v121, v121);
                int32x4_t v108 = vmlal_s16(v108, *(int16x4_t *)v121.i8, *(int16x4_t *)v121.i8);
                int32x4_t v116 = vmlal_high_s16(v116, v124, v124);
                int32x4_t v115 = vmlal_s16(v115, *(int16x4_t *)v124.i8, *(int16x4_t *)v124.i8);
                int32x4_t v114 = vmlal_high_s16(v114, v123, v123);
                int32x4_t v113 = vmlal_s16(v113, *(int16x4_t *)v123.i8, *(int16x4_t *)v123.i8);
                v107 += 32;
              }
              while (v92 != v107);
              int v105 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v113, v108), vaddq_s32(v115, v111)), vaddq_s32(vaddq_s32(v114, v109), vaddq_s32(v116, v112))));
              if (v92 != v50)
              {
                uint64_t v106 = v50 & 0x7FFFFFE0;
                uint64_t v104 = v50 & 0xFFFFFFE0;
                if ((v50 & 0x18) == 0) {
                  goto LABEL_71;
                }
                goto LABEL_68;
              }
            }
            else
            {
              int v105 = 0;
              uint64_t v106 = 0;
LABEL_68:
              int32x4_t v125 = 0uLL;
              int32x4_t v126 = (int32x4_t)v105;
              do
              {
                int16x8_t v127 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v49 + v106), *(uint8x8_t *)(v103 + v106));
                int32x4_t v125 = vmlal_high_s16(v125, v127, v127);
                int32x4_t v126 = vmlal_s16(v126, *(int16x4_t *)v127.i8, *(int16x4_t *)v127.i8);
                v106 += 8;
              }
              while (v93 != v106);
              int v105 = vaddvq_s32(vaddq_s32(v126, v125));
              uint64_t v104 = v50 & 0xFFFFFFF8;
              if (v93 != v50)
              {
                do
                {
LABEL_71:
                  int v128 = *(unsigned __int8 *)(v49 + v104) - *(unsigned __int8 *)(v103 + v104);
                  v105 += v128 * v128;
                  ++v104;
                }
                while (v50 != v104);
              }
            }
            if (v105 <= v32->i32[v102])
            {
              uint64_t v129 = v102;
              v32->i32[v129] = v105;
              *(_DWORD *)&__b[v129 * 4] = v91;
            }
            if (++v99 == v98) {
              goto LABEL_55;
            }
            continue;
          }
        }
        int v130 = 0;
        do
        {
          float v131 = *v47;
          float v132 = v47[1];
          float v133 = v47[2];
          float v134 = (float)((float)((float)(v57 * v132) + (float)(v55 * *v47)) + (float)(v56 * v133)) - v88;
          float v201 = v134;
          if (v134 > 0.0)
          {
            float v202 = (float)((float)((float)((float)(v188 * v132) + (float)(v192 * v131)) + (float)(v190 * v133)) - v89)
                 * (float)(1.0 / v134);
            float v203 = (float)((float)((float)((float)(v58 * v132) + (float)(v189 * v131)) + (float)(v59 * v133)) - v90)
                 * (float)(1.0 / v134);
            int v135 = rkd_inside((uint64_t)v187, &v202, 0, (void **)&v204, v205, v186);
            int v69 = v48;
            if (v135 >= 1)
            {
              uint64_t v136 = v204;
              uint64_t v137 = v135;
              do
              {
                uint64_t v139 = *v136++;
                uint64_t v138 = v139;
                if ((v32->i32[v139] & 0x80000000) == 0)
                {
                  uint64_t v140 = v138;
                  v32->i32[v140] = 0;
                  *(_DWORD *)&__b[v140 * 4] = v130;
                }
                --v137;
              }
              while (v137);
            }
          }
          v47 += 3;
          ++v130;
        }
        while (v130 != v69);
      }
LABEL_82:
      free(v204);
      v199[0] = 0;
      v197[0] = 0;
      if (a8) {
        *(void *)(a8 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
      }
      uint64_t v141 = v195;
      uint64_t v142 = __b;
      float v45 = -0.5;
      if ((uint64_t)*v195 < 1)
      {
        uint64_t v146 = 0;
        uint64_t v145 = 0;
      }
      else
      {
        uint64_t v143 = 0;
        uint64_t v144 = 0;
        uint64_t v145 = 0;
        uint64_t v146 = 0;
        uint64_t v147 = v199[1];
        uint64_t v148 = v200;
        uint64_t v149 = (char *)v197[1];
        uint64_t v150 = v198;
        do
        {
          if (*(_DWORD *)&v142[4 * v144] != -1)
          {
            uint64_t v152 = *(void *)(v141[1] + v143);
            uint64_t v153 = v145 + 1;
            if ((uint64_t)v145 >= v148)
            {
              uint64_t v154 = 2 * v148;
              if (!v148) {
                uint64_t v154 = 32;
              }
              if (v154 <= (uint64_t)v145) {
                uint64_t v148 = (uint64_t)(v145 + 1);
              }
              else {
                uint64_t v148 = v154;
              }
              if (v148)
              {
                uint64_t v155 = v149;
                uint64_t v147 = malloc_type_realloc(v147, 8 * v148, 0x70821ED8uLL);
                uint64_t v153 = v145 + 1;
                uint64_t v149 = v155;
                uint64_t v141 = v195;
                uint64_t v142 = __b;
              }
            }
            *((void *)v147 + (void)v145) = v152;
            uint64_t v156 = (char *)(v146 + 1);
            if (v146 >= v150)
            {
              uint64_t v157 = 2 * v150;
              if (!v150) {
                uint64_t v157 = 21;
              }
              if (v157 <= v146) {
                uint64_t v150 = v146 + 1;
              }
              else {
                uint64_t v150 = v157;
              }
              if (v150)
              {
                int64x2_t v158 = v147;
                long long v159 = v153;
                float v160 = (char *)malloc_type_realloc(v149, 12 * v150, 0xB5E6406EuLL);
                uint64_t v153 = v159;
                uint64_t v141 = v195;
                uint64_t v142 = __b;
                uint64_t v149 = v160;
                uint64_t v147 = v158;
              }
            }
            uint64_t v161 = *(void *)(a3 + 8) + 12 * *(int *)&v142[4 * v144];
            uint64_t v162 = *(void *)v161;
            uint64_t v163 = &v149[12 * v146];
            *((_DWORD *)v163 + 2) = *(_DWORD *)(v161 + 8);
            *(void *)uint64_t v163 = v162;
            if (a8)
            {
              int v164 = *(_DWORD *)&v142[4 * v144];
              uint64_t v165 = *(void *)(a8 + 48);
              uint64_t v166 = *(void *)(a8 + 64);
              if (v165 >= v166)
              {
                uint64_t v167 = 2 * v166;
                BOOL v168 = v166 == 0;
                uint64_t v169 = 32;
                if (!v168) {
                  uint64_t v169 = v167;
                }
                if (v169 <= v165) {
                  uint64_t v170 = v165 + 1;
                }
                else {
                  uint64_t v170 = v169;
                }
                if (v170)
                {
                  float v191 = v153;
                  float v193 = v147;
                  float v171 = v149;
                  float v172 = malloc_type_realloc(*(void **)(a8 + 56), 8 * v170, 0x6074363AuLL);
                  uint64_t v149 = v171;
                  uint64_t v141 = v195;
                  uint64_t v142 = __b;
                  *(void *)(a8 + 56) = v172;
                  uint64_t v153 = v191;
                  uint64_t v147 = v193;
                  uint64_t v165 = *(void *)(a8 + 48);
                }
                *(void *)(a8 + 64) = v170;
              }
              *(void *)(a8 + 4_Block_object_dispose(&STACK[0x220], 8) = v165 + 1;
              uint64_t v151 = (_DWORD *)(*(void *)(a8 + 56) + 8 * v165);
              *uint64_t v151 = v164;
              v151[1] = v144;
            }
            uint64_t v146 = (uint64_t)v156;
            uint64_t v145 = v153;
          }
          ++v144;
          v143 += 288;
        }
        while (*v141 > v144);
        v199[1] = v147;
        uint64_t v200 = v148;
        v197[1] = v149;
        uint64_t v198 = v150;
      }
      v199[0] = v145;
      v197[0] = (void *)v146;
      a5 = v177;
      a6 = v178;
      float v46 = vl_pose_refine(v178, (uint64_t)v199, (uint64_t *)v197, *(_DWORD *)(v177 + 364), v178, a7, *(float *)(v177 + 348) / a9, *(float *)(v177 + 356), *(float *)(v177 + 360));
      int v44 = v185 + 1;
      if (v185 + 1 >= *(_DWORD *)(v177 + 372))
      {
        float v173 = v46;
        uint64_t v34 = a8;
        float v174 = v187;
        float v175 = __b;
        if (a8) {
          goto LABEL_118;
        }
LABEL_122:
        free(v199[1]);
        free(v197[1]);
        float v175 = __b;
        if (!v174) {
          goto LABEL_120;
        }
LABEL_119:
        free(*v174);
        free(v174[1]);
        free(v174[2]);
        free(v174);
        float v175 = __b;
        goto LABEL_120;
      }
    }
  }
  float v173 = 0.0;
  float v174 = v187;
  float v175 = __b;
  if (!a8) {
    goto LABEL_122;
  }
LABEL_118:
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v199;
  *(void *)(v34 + 16) = v200;
  *(_OWORD *)(v34 + 24) = *(_OWORD *)v197;
  *(void *)(v34 + 40) = v198;
  if (v174) {
    goto LABEL_119;
  }
LABEL_120:
  free(v175);
  free(v32);
  return v173;
}

float refine_multi_lin_7(double *a1, double *a2, uint64_t a3, uint64_t a4, int a5, float *a6, float a7, float a8, float a9, float a10)
{
  int v17 = a5 - 1;
  if (a5 <= 1)
  {
    int v17 = 0;
    float v21 = 0.0;
    if (a5 < 1) {
      return sqrtf(v21 / (float)v17);
    }
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v20 = 96 * a5 - 96;
    float v21 = 0.0;
    float v22 = 1.0 / a7;
    do
    {
      float64x2_t v60 = 0u;
      float64x2_t v61 = 0u;
      float64x2_t v58 = 0u;
      float64x2_t v59 = 0u;
      float64x2_t v56 = 0u;
      float64x2_t v57 = 0u;
      g_coords_diff(&a2[v19 / 8 + 12], a2, (uint64_t)&v56);
      float v23 = v61.f64[1];
      float v24 = a6[v19 / 4 + 35] - a6[11];
      float v25 = a6[v19 / 4 + 33] - a6[9];
      float v26 = a6[v19 / 4 + 34] - a6[10];
      float v27 = v61.f64[0];
      float v28 = v22 * (float)(v23 - (float)((float)((float)(v26 * a6[5]) + (float)(a6[2] * v25)) + (float)(a6[8] * v24)));
      float v29 = v22 * (float)(v27 - (float)((float)((float)(v26 * a6[4]) + (float)(a6[1] * v25)) + (float)(a6[7] * v24)));
      float v30 = v60.f64[1];
      float v31 = (float)(v26 * a6[3]) + (float)(*a6 * v25);
      float v21 = v21
          + (float)((float)((float)(v29 * v29)
                          + (float)((float)(v22 * (float)(v30 - (float)(v31 + (float)(a6[6] * v24))))
                                  * (float)(v22 * (float)(v30 - (float)(v31 + (float)(a6[6] * v24))))))
                  + (float)(v28 * v28));
      v19 += 96;
    }
    while (v20 != v19);
    if (a5 < 1) {
      return sqrtf(v21 / (float)v17);
    }
  }
  uint64_t v32 = 0;
  do
  {
    float64x2_t v60 = 0u;
    float64x2_t v61 = 0u;
    float64x2_t v58 = 0u;
    float64x2_t v59 = 0u;
    float64x2_t v56 = 0u;
    float64x2_t v57 = 0u;
    float32x4_t v54 = 0u;
    float32x4_t v55 = 0u;
    long long v52 = 0u;
    float32x4_t v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    g_coords_diff(&a1[12 * v32], a1, (uint64_t)&v56);
    float32x4_t v53 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v56), v57);
    float32x4_t v54 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v58), v59);
    float32x4_t v55 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v60), v61);
    g_coordsf_diff((uint64_t)&v53, (uint64_t)&a6[24 * v32], (uint64_t)&v50);
    uint64_t v33 = *(void *)(a3 + 24 * v32);
    if (v33 >= 1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = (float *)(*(void *)(a4 + 24 * v32 + 8) + 8);
      uint64_t v36 = *(void *)(a3 + 24 * v32);
      do
      {
        float v37 = *(v35 - 2);
        float v38 = *(v35 - 1);
        float v39 = *v35;
        float v40 = *((float *)&v52 + 1)
            + (float)((float)((float)(*((float *)&v50 + 1) * v38) + (float)(*(float *)&v50 * v37))
                    + (float)(*((float *)&v50 + 2) * *v35));
        float v41 = 0.0;
        if (v40 > 0.1)
        {
          float v42 = (float)((float)((float)(1.0 / v37) * a9) * (float)((float)(1.0 / v37) * a9)) + (float)(a8 * a8);
          float v43 = sqrtf(v42 + (float)((float)(v39 * a10) * (float)(v39 * a10)));
          float v44 = sqrtf(v42 + (float)((float)(v38 * a10) * (float)(v38 * a10)));
          float v45 = *((float *)&v52 + 3)
              + (float)((float)((float)(*((float *)&v51 + 3) * v38) + (float)(*((float *)&v51 + 2) * v37))
                      + (float)(*(float *)&v52 * v39));
          float v46 = (float *)(*(void *)(a3 + 24 * v32 + 8) + v34);
          float v47 = (float)(*((float *)&v52 + 2)
                      + (float)((float)((float)(*(float *)&v51 * v38) + (float)(*((float *)&v50 + 3) * v37))
                              + (float)(*((float *)&v51 + 1) * v39)))
              / v40;
          float v41 = (float)((float)((float)(1.0 / v43) * (float)(v46[1] - (float)(v45 / v40)))
                      * (float)((float)(1.0 / v43) * (float)(v46[1] - (float)(v45 / v40))))
              + (float)((float)((float)(1.0 / v44) * (float)(*v46 - v47))
                      * (float)((float)(1.0 / v44) * (float)(*v46 - v47)));
        }
        float v21 = v21 + v41;
        v34 += 8;
        v35 += 3;
        --v36;
      }
      while (v36);
      v17 += v33;
    }
    ++v32;
  }
  while (v32 != a5);
  return sqrtf(v21 / (float)v17);
}

void *vl_kpts2_to_kpt_list(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  uint64_t v6 = a2[2];
  if (*a1 <= v6)
  {
    uint64_t v7 = v5 - v4;
    if (v5 <= v4) {
      goto LABEL_3;
    }
LABEL_11:
    bzero((void *)(a2[1] + 288 * *a2), 288 * v7);
    uint64_t v8 = *a1;
    *a2 = *a1;
    if (v8 < 1) {
      goto LABEL_31;
    }
    goto LABEL_12;
  }
  uint64_t v9 = 2 * v6;
  if (v9 <= v5) {
    uint64_t v10 = *a1;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v10) {
    a2[1] = (uint64_t)malloc_type_realloc((void *)a2[1], 288 * v10, 0x82B09BA4uLL);
  }
  a2[2] = v10;
  uint64_t v7 = v5 - v4;
  if (v5 > v4) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v8 = *a1;
  *a2 = *a1;
  if (v8 < 1) {
    goto LABEL_31;
  }
LABEL_12:
  LODWORD(v11) = *((_DWORD *)a1 + 24);
  if ((int)v11 < 1)
  {
    int v17 = (uint64_t *)a1[1];
    uint64_t v18 = a2[1];
    if (a1[3])
    {
      unint64_t v19 = (_DWORD *)a1[4];
      uint64_t v20 = (_DWORD *)(v18 + 16);
      do
      {
        uint64_t v21 = *v17++;
        *((void *)v20 - 2) = v21;
        LODWORD(v21) = *v19++;
        *uint64_t v20 = v21;
        v20 += 72;
        --v8;
      }
      while (v8);
      goto LABEL_31;
    }
    if ((unint64_t)v8 >= 2)
    {
      unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFFELL;
      float v23 = v17 + 1;
      unint64_t v24 = v8 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v25 = a2[1];
      do
      {
        int v26 = v23[1];
        *(_DWORD *)(v25 + 28_Block_object_dispose(&STACK[0x220], 8) = *v23;
        *(void *)uint64_t v25 = *((void *)v23 - 1);
        *(_DWORD *)(v25 + 292) = v26;
        v23 += 4;
        v25 += 576;
        v24 -= 2;
      }
      while (v24);
      if (v8 == v22) {
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v22 = 0;
    }
    unint64_t v27 = v8 - v22;
    float v28 = (void *)(v18 + 288 * v22);
    float v29 = &v17[v22];
    do
    {
      uint64_t v30 = *v29++;
      *float v28 = v30;
      v28 += 36;
      --v27;
    }
    while (v27);
    goto LABEL_31;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 32;
  do
  {
    uint64_t v14 = a1[7];
    *(void *)(a2[1] + 288 * v12) = *(void *)(a1[1] + 8 * v12);
    if ((int)v11 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v14 + (int)v11 * (int)v12;
      do
      {
        *(unsigned char *)(a2[1] + v13 + v15) = *(unsigned char *)(v16 + v15);
        ++v15;
        uint64_t v11 = *((int *)a1 + 24);
      }
      while (v15 < v11);
    }
    if (a1[3]) {
      *(_DWORD *)(a2[1] + 288 * v12 + 16) = *(_DWORD *)(a1[4] + 4 * v12);
    }
    ++v12;
    v13 += 288;
  }
  while (*a1 > v12);
LABEL_31:
  uint64_t v31 = a2[3];
  uint64_t v32 = (unint64_t)a1[9] >> 2;
  uint64_t v33 = a2[5];
  if (v32 > v33)
  {
    uint64_t v34 = 2 * v33;
    BOOL v35 = v33 == 0;
    uint64_t v36 = 64;
    if (!v35) {
      uint64_t v36 = v34;
    }
    if (v36 <= v32) {
      uint64_t v37 = (unint64_t)a1[9] >> 2;
    }
    else {
      uint64_t v37 = v36;
    }
    if (v37) {
      a2[4] = (uint64_t)malloc_type_realloc((void *)a2[4], 4 * v37, 0xBFFC3401uLL);
    }
    a2[5] = v37;
  }
  if (v32 > v31) {
    bzero((void *)(a2[4] + 4 * a2[3]), 4 * (v32 - v31));
  }
  size_t v39 = a1[9];
  float v38 = (const void *)a1[10];
  a2[3] = v39 >> 2;
  float v40 = (void *)a2[4];
  return memcpy(v40, v38, v39);
}

float slam_vo_map_triangulate_track(uint64_t a1, int *a2, unsigned int a3, uint64_t a4)
{
  v84[3] = *(double *)MEMORY[0x263EF8340];
  uint64_t v73 = a3;
  if ((a3 & 0x80000000) != 0 || *(void *)(a1 + 392) <= (uint64_t)a3) {
    int v6 = -1;
  }
  else {
    int v6 = *(_DWORD *)(*(void *)(a1 + 400) + 4 * a3);
  }
  int v71 = v6;
  int v7 = *a2;
  unsigned int v8 = *(_DWORD *)(a1 + 608);
  if (v8 <= 1) {
    unsigned int v8 = 1;
  }
  int v9 = v7 * v8;
  uint64_t v75 = (char *)malloc_type_malloc(48 * (int)(v7 * v8), 0x1000040EED21634uLL);
  uint64_t v10 = (float *)malloc_type_malloc(8 * v9, 0x100004000313F17uLL);
  float v15 = *(float *)(a1 + 160);
  float v16 = *(float *)(*(void *)(a1 + 304) + 880 * *(int *)(a1 + 592) + 360);
  if (*(uint64_t *)a2 < 1)
  {
    LODWORD(v25) = 0;
    unint64_t v19 = v75;
  }
  else
  {
    uint64_t v17 = 0;
    int v18 = 0;
    unint64_t v19 = v75;
    do
    {
      unsigned int v20 = *(_DWORD *)(*((void *)a2 + 1) + 4 * v17) & 0x7FFF;
      unint64_t v21 = (unint64_t)*(unsigned int *)(*((void *)a2 + 1) + 4 * v17) >> 15;
      uint64_t v22 = *(void *)(a1 + 304);
      uint64_t v23 = v22 + 880 * v20;
      unint64_t v24 = (float32x4_t *)&v19[48 * v18];
      *unint64_t v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v23), *(float64x2_t *)(v23 + 16));
      v24[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v23 + 32)), *(float64x2_t *)(v23 + 48));
      float64x2_t v11 = *(float64x2_t *)(v23 + 80);
      v24[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v23 + 64)), v11);
      *(void *)&v10[2 * v18] = *(void *)(*(void *)(v23 + 368) + 8 * v21);
      uint64_t v25 = v18 + 1;
      if (*(void *)(v23 + 768))
      {
        int v26 = v10;
        unint64_t v27 = (uint64_t *)(v23 + 768);
        float64x2_t v81 = 0u;
        float64x2_t v82 = 0u;
        float64x2_t v79 = 0u;
        float64x2_t v80 = 0u;
        float64x2_t v77 = 0u;
        float64x2_t v78 = 0u;
        g_coords_conv((double *)(v22 + 880 * v20 + 776), (double *)v23, v77.f64);
        unint64_t v19 = v75;
        float v28 = (float32x4_t *)&v75[48 * v25];
        *float v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v77), v78);
        v28[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v79), v80);
        HIDWORD(v11.f64[0]) = HIDWORD(v82.f64[0]);
        v28[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v81), v82);
        uint64_t v29 = *v27;
        uint64_t v10 = v26;
        *(void *)&v26[2 * v25] = *(void *)(v29 + 8 * v21);
        LODWORD(v25) = v18 + 2;
      }
      ++v17;
      int v18 = v25;
    }
    while (*(void *)a2 > v17);
  }
  if ((a3 & 0x80000000) != 0 || *(void *)(a1 + 368) <= v73)
  {
    int v36 = v25 - 1;
    uint64_t v32 = (float *)a4;
    if ((int)v25 <= 1)
    {
      log_msg(1, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/slam/slam_vo_map.c", 105, (uint64_t)"slam_vo_map_triangulate_track", "n <= 1");
      __assert_rtn("slam_vo_map_triangulate_track", "slam_vo_map.c", 105, "0");
    }
    uint64_t v35 = (uint64_t)&v19[48 * v36];
    uint64_t v37 = &v10[2 * v36];
    float v38 = *v10;
    float v39 = v10[1];
    double v76 = 0.0;
    float64x2_t v77 = vcvtq_f64_f32(*(float32x2_t *)(v35 + 36));
    v78.f64[0] = *(float *)(v35 + 44);
    double v40 = *v37;
    double v41 = v37[1];
    double v42 = v40 * *(float *)(v35 + 16) + *(float *)(v35 + 12) + *(float *)(v35 + 20) * v41 + v77.f64[1];
    double v43 = v40 * *(float *)(v35 + 28) + *(float *)(v35 + 24) + *(float *)(v35 + 32) * v41 + v78.f64[0];
    v78.f64[1] = v40 * *(float *)(v35 + 4) + *(float *)v35 + *(float *)(v35 + 8) * v41 + v77.f64[0];
    v79.f64[0] = v42;
    v79.f64[1] = v43;
    LODWORD(v43) = *((_DWORD *)v19 + 8);
    LODWORD(v41) = *((_DWORD *)v19 + 11);
    double v44 = *((float *)v19 + 10);
    v83[0] = *((float *)v19 + 9);
    v83[1] = v44;
    v83[2] = *(float *)&v41;
    double v45 = v38;
    double v46 = v39;
    double v47 = v45 * *((float *)v19 + 4) + *((float *)v19 + 3) + *((float *)v19 + 5) * v46 + v44;
    double v48 = *((float *)v19 + 6);
    double v49 = *((float *)v19 + 7);
    v84[0] = v45 * *((float *)v19 + 1) + *(float *)v19 + *((float *)v19 + 2) * v46 + v83[0];
    v84[1] = v47;
    v84[2] = v45 * v49 + v48 + *(float *)&v43 * v46 + *(float *)&v41;
    if (g_isect_line_line_ex2(v77.f64, &v78.f64[1], v83, v84, 0, 0, &v76, 0, 0.0000001) == 1
      && v76 >= 0.0)
    {
      double v54 = 100000.0;
      if (v76 <= 100000.0) {
        double v54 = v76;
      }
      double v50 = 1.0;
      if (v76 >= 1.0) {
        double v53 = v54;
      }
      else {
        double v53 = 1.0;
      }
    }
    else
    {
      double v53 = 100000.0;
    }
    uint64_t v33 = 0;
    double v55 = 1.0;
    float v56 = 1.0 / v53;
    *(float *)a4 = v56;
    v11.f64[0] = *(float64_t *)v37;
    *(void *)(a4 + 4) = *(void *)v37;
    uint64_t v34 = (uint64_t *)a4;
  }
  else
  {
    uint64_t v30 = *(void *)(a1 + 376) + 12 * v73;
    uint64_t v31 = *(void *)v30;
    uint64_t v32 = (float *)a4;
    *(_DWORD *)(a4 + _Block_object_dispose(&STACK[0x220], 8) = *(_DWORD *)(v30 + 8);
    *(void *)a4 = v31;
    if (v71 == -1)
    {
      uint64_t v33 = 0;
      uint64_t v35 = (uint64_t)&v19[48 * (int)v25 - 48];
      uint64_t v34 = (uint64_t *)a4;
    }
    else
    {
      uint64_t v33 = *(void *)(a1 + 472) + 36 * v71;
      uint64_t v34 = (uint64_t *)(*(void *)(a1 + 448) + 12 * v71);
      uint64_t v35 = *(void *)(a1 + 568) + 48 * v71;
    }
    float v57 = *(float *)a4 - *(float *)(v35 + 36);
    float v58 = *(float *)(a4 + 4) - *(float *)(v35 + 40);
    *(float *)&double v12 = *(float *)(a4 + 8) - *(float *)(v35 + 44);
    *(float *)v11.f64 = (float)((float)(*(float *)(v35 + 12) * v58) + (float)(*(float *)v35 * v57))
                      + (float)(*(float *)(v35 + 24) * *(float *)&v12);
    double v52 = *(double *)(v35 + 16);
    float32x2_t v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v11.f64[0], 0);
    double v50 = COERCE_DOUBLE(vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)&v52, v58), *(float32x2_t *)(v35 + 4), v57), *(float32x2_t *)(v35 + 28), *(float *)&v12));
    double v55 = COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)&v50, v51));
    *(double *)(a4 + 4) = v55;
    LODWORD(v55) = 1.0;
    *(float *)a4 = 1.0 / *(float *)v11.f64;
  }
  *(float *)v11.f64 = 1.0 / (float)(v15 * v16);
  g_triangulate_inv_depthf((uint64_t)v75, (uint64_t)v10, 0, v25, v35, v32, v34, v33, v11.f64[0], v55, v50, *(double *)&v51, v12, v52, v13, v14, 0);
  float v60 = v59;
  float v61 = *v32;
  float v62 = v32[1] / *v32;
  float v63 = v32[2] / *v32;
  v32[1] = v62;
  v32[2] = v63;
  float v64 = 1.0 / v61;
  float *v32 = v64;
  float v65 = *(float *)(v35 + 36)
      + (float)((float)((float)(v62 * *(float *)(v35 + 4)) + (float)(*(float *)v35 * v64))
              + (float)(*(float *)(v35 + 8) * v63));
  float v66 = (float)((float)(v62 * *(float *)(v35 + 16)) + (float)(*(float *)(v35 + 12) * v64))
      + (float)(*(float *)(v35 + 20) * v63);
  float v67 = (float)(v62 * *(float *)(v35 + 28)) + (float)(*(float *)(v35 + 24) * v64);
  float v68 = *(float *)(v35 + 40) + v66;
  float v69 = *(float *)(v35 + 44) + (float)(v67 + (float)(*(float *)(v35 + 32) * v63));
  float *v32 = v65;
  v32[1] = v68;
  v32[2] = v69;
  free(v75);
  free(v10);
  return v60;
}

uint64_t slam_vo_map_marginalize_cam(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v240 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 304);
  long long v236 = xmmword_21BB7AA70;
  uint64_t v237 = 0;
  float v7 = *(float *)(a1 + 292);
  v232.__darwin_time_t tv_sec = 0;
  *(void *)&v232.uint64_t tv_usec = 0;
  if (gettimeofday(&v232, 0) || (double)(v232.tv_usec + 1000000 * v232.tv_sec) / 1000000.0 <= 1514764800.0) {
LABEL_267:
  }
    __assert_rtn("u_timel", "arch_dtime.c", 118, "ret == 0 && result/1e6 > 1514764800L");
  uint64_t v223 = a3;
  if (*(_DWORD *)(v6 + 880 * a2 + 516))
  {
    int v226 = 0;
  }
  else
  {
    int v226 = 0;
    if (v7 > 0.0 && *(float *)(v6 + 880 * a2 + 512) < *(float *)(v5 + 268))
    {
      LODWORD(v230) = 0;
      v232.__darwin_time_t tv_sec = 1;
      *(void *)&v232.uint64_t tv_usec = &v230;
      v233.i64[0] = 0;
      uint64_t v8 = *(void *)(v5 + 304);
      uint64_t v9 = v8 + 880 * a2;
      int v10 = *(_DWORD *)(v9 + 488);
      if (v10 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v8 + 880 * a2;
        float v13 = (void *)(v12 + 400);
        uint64_t v227 = (float *)(v12 + 360);
        uint64_t v228 = (int *)(v9 + 488);
        int v14 = a2 & 0x7FFF;
        do
        {
          uint64_t v15 = *(int *)(*v13 + 4 * v11);
          if (v15 != -1)
          {
            uint64_t v16 = *(int *)(*(void *)(v5 + 400) + 4 * v15);
            if (v16 != -1)
            {
              DWORD2(v238[0]) = 0;
              *(void *)&v238[0] = 0;
              uint64_t v17 = *(void *)(v5 + 448) + 12 * (int)v16;
              int v18 = *(_DWORD *)(v17 + 8);
              *(void *)&v238[0] = *(void *)v17;
              DWORD2(v238[0]) = v18;
              uint64_t v19 = *(void *)(v5 + 568) + 48 * (int)v16;
              uint64_t v20 = *(void *)(v5 + 472) + 36 * v16;
              float v21 = *(float *)(v5 + 160) * *v227;
              LODWORD(v230) = v14;
              triangulate_track(v5, &v232.tv_sec, v19, (float *)v238, v20, v20, v21);
              uint64_t v22 = *(void *)(v5 + 304) + 880 * a2;
              size_t v23 = *(int *)(v5 + 16);
              unint64_t v24 = (const void *)(*(void *)(v22 + 384) + (int)v23 * (int)v11);
              uint64_t v25 = *(void *)(v22 + 504);
              uint64_t v26 = *(void *)(v5 + 448) + 12 * (int)v16;
              uint64_t v27 = *(void *)&v238[0];
              *(_DWORD *)(v26 + _Block_object_dispose(&STACK[0x220], 8) = DWORD2(v238[0]);
              *(void *)uint64_t v26 = v27;
              uint64_t v28 = *(void *)(v5 + 472) + 36 * v16;
              long long v29 = *(_OWORD *)v20;
              long long v30 = *(_OWORD *)(v20 + 16);
              *(_DWORD *)(v28 + 32) = *(_DWORD *)(v20 + 32);
              *(_OWORD *)uint64_t v28 = v29;
              *(_OWORD *)(v28 + 16) = v30;
              memcpy((void *)(*(void *)(v5 + 496) + (int)v23 * (int)v16), v24, v23);
              ++*(_DWORD *)(*(void *)(v5 + 520) + 4 * v16);
              *(void *)(*(void *)(v5 + 544) + 8 * v16) = v25;
              int v10 = *v228;
              a3 = v223;
            }
          }
          ++v11;
          v14 += 0x8000;
        }
        while (v11 < v10);
      }
      int v226 = 1;
    }
  }
  uint64_t v31 = v6 + 880 * a2;
  int v32 = *(_DWORD *)(v31 + 488);
  if (v32 >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    float v224 = (int *)(v31 + 488);
    uint64_t v225 = v5;
    uint64_t v35 = v6 + 880 * a2;
    int v36 = (uint64_t *)(v35 + 400);
    float v219 = (float *)(v35 + 360);
    int v221 = a2;
    uint64_t v229 = (uint64_t *)(v35 + 400);
    while (1)
    {
      uint64_t v45 = *v36;
      int v46 = *(_DWORD *)(*v36 + 4 * v33);
      if (v46 == -1) {
        goto LABEL_19;
      }
      uint64_t v47 = *(void *)(v5 + 320);
      double v48 = (uint64_t *)(v47 + 24 * v46);
      int v235 = 0;
      int v49 = *(_DWORD *)(*(void *)(v5 + 400) + 4 * *(int *)(v45 + 4 * v33));
      uint64_t v50 = *v48;
      if (*v48 < 1)
      {
        int v52 = 0;
        uint64_t v55 = 0;
      }
      else
      {
        uint64_t v51 = 0;
        int v52 = 0;
        double v53 = *(int **)(v47 + 24 * v46 + 8);
        do
        {
          while (1)
          {
            int v54 = v53[v51];
            if ((v54 & 0x7FFF) != a2) {
              break;
            }
            int v235 = v53[v51];
            v53[v51] = -1;
            uint64_t v34 = &v235;
            if (v50 == ++v51) {
              goto LABEL_28;
            }
          }
          if (!*(_DWORD *)(*(void *)(v5 + 304) + 880 * (v54 & 0x7FFF) + 668)) {
            int v52 = 1;
          }
          ++v51;
        }
        while (v50 != v51);
LABEL_28:
        uint64_t v55 = 0;
        *((void *)&v236 + 1) = v34;
        float v56 = v53;
        uint64_t v57 = v50;
        do
        {
          int v59 = *v56++;
          int v58 = v59;
          if (v59 != -1) {
            v53[v55++] = v58;
          }
          --v57;
        }
        while (v57);
      }
      uint64_t v60 = v47 + 24 * v46;
      uint64_t v63 = *(void *)(v60 + 16);
      float v62 = (uint64_t *)(v60 + 16);
      uint64_t v61 = v63;
      if (v55 > v63)
      {
        uint64_t v64 = 2 * v61;
        BOOL v141 = v61 == 0;
        uint64_t v65 = 64;
        if (!v141) {
          uint64_t v65 = v64;
        }
        if (v65 <= v55) {
          uint64_t v66 = v55;
        }
        else {
          uint64_t v66 = v65;
        }
        if (v66)
        {
          uint64_t v67 = v47 + 24 * v46;
          float v68 = v34;
          int v69 = v49;
          uint64_t v220 = v47;
          uint64_t v70 = malloc_type_realloc(*(void **)(v67 + 8), 4 * v66, 0xB49AF189uLL);
          int v49 = v69;
          uint64_t v34 = v68;
          uint64_t v47 = v220;
          a2 = v221;
          *(void *)(v67 + _Block_object_dispose(&STACK[0x220], 8) = v70;
          double v48 = (uint64_t *)v67;
          a3 = v223;
        }
        *float v62 = v66;
      }
      uint64_t v71 = v55 - v50;
      if (v55 > v50)
      {
        uint64_t v72 = v34;
        int v73 = v49;
        bzero((void *)(*(void *)(v47 + 24 * v46 + 8) + 4 * *v48), 4 * v71);
        int v49 = v73;
        uint64_t v34 = v72;
        a2 = v221;
      }
      *double v48 = v55;
      int v36 = v229;
      *(unsigned char *)(a3 + *(int *)(*v229 + 4 * v33)) = v55 == 0;
      int v74 = v226;
      if (!v52) {
        int v74 = 0;
      }
      uint64_t v5 = v225;
      if (v74 == 1 && v49 == -1) {
        break;
      }
LABEL_18:
      int v32 = *v224;
LABEL_19:
      if (++v33 >= v32) {
        goto LABEL_104;
      }
    }
    float v75 = *(float *)(v225 + 160) * *v219;
    float32x4_t v233 = 0u;
    float32x4_t v234 = 0u;
    timeval v232 = (timeval)0;
    int v231 = 0;
    uint64_t v230 = 0;
    uint64_t v76 = *(void *)(v225 + 376) + 12 * *(int *)(*v229 + 4 * v33);
    int v77 = *(_DWORD *)(v76 + 8);
    uint64_t v230 = *(void *)v76;
    int v231 = v77;
    float64x2_t v78 = v34;
    unsigned int v79 = *v34;
    unsigned int v80 = *v34 & 0x7FFF;
    float64x2_t v81 = (float64x2_t *)(*(void *)(v225 + 304) + 880 * v80);
    timeval v232 = (timeval)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v81), v81[1]);
    float32x4_t v233 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v81[2]), v81[3]);
    float32x4_t v234 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v81[4]), v81[5]);
    triangulate_track(v225, (uint64_t *)&v236, (uint64_t)&v232, (float *)&v230, 0, (uint64_t)v238, v75);
    uint64_t v82 = *(void *)(v225 + 440);
    *(_DWORD *)(*(void *)(v225 + 400) + 4 * *(int *)(*v229 + 4 * v33)) = v82;
    uint64_t v83 = *(void *)(v225 + 304) + 880 * v80;
    uint64_t v222 = *(void *)(v83 + 384);
    size_t v84 = *(int *)(v225 + 16);
    uint64_t v85 = *(void *)(v83 + 504);
    uint64_t v86 = (int)v82 + 1;
    uint64_t v87 = *(void *)(v225 + 456);
    if (v87 < v86)
    {
      uint64_t v98 = 2 * v87;
      BOOL v141 = v87 == 0;
      uint64_t v99 = 21;
      if (!v141) {
        uint64_t v99 = v98;
      }
      if (v99 <= v86) {
        uint64_t v100 = (int)v82 + 1;
      }
      else {
        uint64_t v100 = v99;
      }
      if (v100) {
        *(void *)(v225 + 44_Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(v225 + 448), 12 * v100, 0xF428F9F7uLL);
      }
      *(void *)(v225 + 456) = v100;
      *(void *)(v225 + 440) = v86;
      uint64_t v88 = 9 * (int)v86;
      uint64_t v89 = *(void *)(v225 + 480);
      if (v89 >= v88)
      {
LABEL_50:
        *(void *)(v225 + 464) = v88;
        int64_t v90 = (int)v84 * (int)v86;
        int64_t v91 = *(void *)(v225 + 504);
        if (v91 >= v90) {
          goto LABEL_51;
        }
        goto LABEL_72;
      }
    }
    else
    {
      *(void *)(v225 + 440) = v86;
      uint64_t v88 = 9 * (int)v86;
      uint64_t v89 = *(void *)(v225 + 480);
      if (v89 >= v88) {
        goto LABEL_50;
      }
    }
    uint64_t v101 = 2 * v89;
    BOOL v141 = v89 == 0;
    uint64_t v102 = 64;
    if (!v141) {
      uint64_t v102 = v101;
    }
    if (v102 <= v88) {
      uint64_t v103 = v88;
    }
    else {
      uint64_t v103 = v102;
    }
    if (v103) {
      *(void *)(v225 + 472) = malloc_type_realloc(*(void **)(v225 + 472), 4 * v103, 0x84AA5280uLL);
    }
    *(void *)(v225 + 480) = v103;
    *(void *)(v225 + 464) = v88;
    int64_t v90 = (int)v84 * (int)v86;
    int64_t v91 = *(void *)(v225 + 504);
    if (v91 >= v90)
    {
LABEL_51:
      *(void *)(v225 + 48_Block_object_dispose(&STACK[0x220], 8) = v90;
      uint64_t v92 = *(void *)(v225 + 512);
      uint64_t v93 = *(void *)(v225 + 528);
      if (v93 >= v86) {
        goto LABEL_52;
      }
      goto LABEL_80;
    }
LABEL_72:
    uint64_t v104 = 2 * v91;
    BOOL v141 = v91 == 0;
    uint64_t v105 = 256;
    if (!v141) {
      uint64_t v105 = v104;
    }
    if (v105 <= v90) {
      size_t v106 = v90;
    }
    else {
      size_t v106 = v105;
    }
    if (v106) {
      *(void *)(v225 + 496) = malloc_type_realloc(*(void **)(v225 + 496), v106, 0xBE03D1B5uLL);
    }
    *(void *)(v225 + 504) = v106;
    *(void *)(v225 + 48_Block_object_dispose(&STACK[0x220], 8) = v90;
    uint64_t v92 = *(void *)(v225 + 512);
    uint64_t v93 = *(void *)(v225 + 528);
    if (v93 >= v86)
    {
LABEL_52:
      uint64_t v94 = v86 - v92;
      if (v86 <= v92) {
        goto LABEL_53;
      }
      goto LABEL_88;
    }
LABEL_80:
    uint64_t v107 = 2 * v93;
    BOOL v141 = v93 == 0;
    uint64_t v108 = 64;
    if (!v141) {
      uint64_t v108 = v107;
    }
    if (v108 <= v86) {
      uint64_t v109 = (int)v82 + 1;
    }
    else {
      uint64_t v109 = v108;
    }
    if (v109) {
      *(void *)(v225 + 520) = malloc_type_realloc(*(void **)(v225 + 520), 4 * v109, 0xDA342B4EuLL);
    }
    *(void *)(v225 + 52_Block_object_dispose(&STACK[0x220], 8) = v109;
    uint64_t v94 = v86 - v92;
    if (v86 <= v92)
    {
LABEL_53:
      *(void *)(v225 + 512) = v86;
      uint64_t v95 = *(void *)(v225 + 552);
      if (v95 >= v86) {
        goto LABEL_54;
      }
      goto LABEL_89;
    }
LABEL_88:
    bzero((void *)(*(void *)(v225 + 520) + 4 * *(void *)(v225 + 512)), 4 * v94);
    *(void *)(v225 + 512) = v86;
    uint64_t v95 = *(void *)(v225 + 552);
    if (v95 >= v86)
    {
LABEL_54:
      *(void *)(v225 + 536) = v86;
      uint64_t v96 = *(void *)(v225 + 560);
      uint64_t v97 = *(void *)(v225 + 576);
      if (v96 < v97)
      {
LABEL_17:
        *(void *)(v225 + 560) = v96 + 1;
        uint64_t v37 = (timeval *)(*(void *)(v225 + 568) + 48 * v96);
        timeval v38 = v232;
        float32x4_t v39 = v234;
        v37[1] = (timeval)v233;
        v37[2] = (timeval)v39;
        *uint64_t v37 = v38;
        uint64_t v40 = *(void *)(v225 + 448) + 12 * (int)v82;
        uint64_t v41 = v230;
        *(_DWORD *)(v40 + _Block_object_dispose(&STACK[0x220], 8) = v231;
        *(void *)uint64_t v40 = v41;
        uint64_t v42 = *(void *)(v225 + 472) + 36 * v82;
        long long v43 = v238[0];
        long long v44 = v238[1];
        *(_DWORD *)(v42 + 32) = v239;
        *(_OWORD *)uint64_t v42 = v43;
        *(_OWORD *)(v42 + 16) = v44;
        memcpy((void *)(*(void *)(v225 + 496) + (int)v84 * (int)v82), (const void *)(v222 + (int)v84 * (uint64_t)(v79 >> 15)), v84);
        ++*(_DWORD *)(*(void *)(v225 + 520) + 4 * (int)v82);
        *(void *)(*(void *)(v225 + 544) + 8 * (int)v82) = v85;
        int v36 = v229;
        uint64_t v34 = v78;
        a3 = v223;
        goto LABEL_18;
      }
LABEL_97:
      uint64_t v113 = 2 * v97;
      BOOL v141 = v97 == 0;
      uint64_t v114 = 5;
      if (!v141) {
        uint64_t v114 = v113;
      }
      if (v114 <= v96) {
        uint64_t v115 = v96 + 1;
      }
      else {
        uint64_t v115 = v114;
      }
      if (v115)
      {
        *(void *)(v225 + 56_Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(v225 + 568), 48 * v115, 0xB205ADDCuLL);
        uint64_t v96 = *(void *)(v225 + 560);
      }
      *(void *)(v225 + 576) = v115;
      goto LABEL_17;
    }
LABEL_89:
    uint64_t v110 = 2 * v95;
    BOOL v141 = v95 == 0;
    uint64_t v111 = 32;
    if (!v141) {
      uint64_t v111 = v110;
    }
    if (v111 <= v86) {
      uint64_t v112 = (int)v82 + 1;
    }
    else {
      uint64_t v112 = v111;
    }
    if (v112) {
      *(void *)(v225 + 544) = malloc_type_realloc(*(void **)(v225 + 544), 8 * v112, 0x3185B363uLL);
    }
    *(void *)(v225 + 552) = v112;
    *(void *)(v225 + 536) = v86;
    uint64_t v96 = *(void *)(v225 + 560);
    uint64_t v97 = *(void *)(v225 + 576);
    if (v96 < v97) {
      goto LABEL_17;
    }
    goto LABEL_97;
  }
LABEL_104:
  if (v226)
  {
    uint64_t v116 = *(void *)(v5 + 464);
    if (v116 >= 1)
    {
      float v117 = (float)(1.0 / *(float *)(v5 + 292)) * (float)(1.0 / *(float *)(v5 + 292));
      uint8x16_t v118 = *(float32x4_t **)(v5 + 472);
      if ((unint64_t)v116 < 8)
      {
        uint64_t v119 = 0;
LABEL_111:
        uint64_t v123 = v116 - v119;
        int16x8_t v124 = &v118->f32[v119];
        do
        {
          *int16x8_t v124 = v117 * *v124;
          ++v124;
          --v123;
        }
        while (v123);
        goto LABEL_113;
      }
      uint64_t v119 = v116 & 0x7FFFFFFFFFFFFFF8;
      uint8x16_t v120 = v118 + 1;
      unint64_t v121 = v116 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v122 = vmulq_n_f32(*v120, v117);
        v120[-1] = vmulq_n_f32(v120[-1], v117);
        *uint8x16_t v120 = v122;
        v120 += 2;
        v121 -= 8;
      }
      while (v121);
      if (v116 != v119) {
        goto LABEL_111;
      }
    }
  }
LABEL_113:
  v232.__darwin_time_t tv_sec = 0;
  *(void *)&v232.uint64_t tv_usec = 0;
  if (gettimeofday(&v232, 0) || (double)(v232.tv_usec + 1000000 * v232.tv_sec) / 1000000.0 <= 1514764800.0) {
    goto LABEL_267;
  }
  int64_t v125 = *(void *)(v5 + 440);
  if (v125 >= 5001)
  {
    uint64_t v126 = *(int *)(v5 + 16);
    int16x8_t v127 = (unsigned __int8 *)malloc_type_calloc(v125, 1uLL, 0xD940C57AuLL);
    int v128 = malloc_type_malloc(4 * *(void *)(v5 + 440), 0x7D88154BuLL);
    uint64_t v129 = v128;
    uint64_t v130 = *(void *)(v5 + 392);
    if (v130 <= 0)
    {
      uint64_t v134 = *(void *)(v5 + 440);
      if (v134 >= 1)
      {
LABEL_131:
        int v137 = 0;
        uint64_t v138 = v127;
        uint64_t v139 = (int *)v128;
        do
        {
          int v140 = *v138++;
          BOOL v141 = v140 == 0;
          if (v140) {
            int v142 = v137;
          }
          else {
            int v142 = -1;
          }
          if (!v141) {
            ++v137;
          }
          *v139++ = v142;
          --v134;
        }
        while (v134);
        uint64_t v134 = *(void *)(v5 + 440);
        if (v134 < 1)
        {
          uint64_t v144 = 0;
          uint64_t v151 = *(void *)(v5 + 456);
          if (v151 >= 0)
          {
LABEL_149:
            uint64_t v152 = v144 - v134;
            if (v144 <= v134) {
              goto LABEL_150;
            }
            goto LABEL_167;
          }
LABEL_159:
          uint64_t v158 = 2 * v151;
          BOOL v141 = v151 == 0;
          uint64_t v159 = 21;
          if (!v141) {
            uint64_t v159 = v158;
          }
          if (v159 <= v144) {
            uint64_t v160 = v144;
          }
          else {
            uint64_t v160 = v159;
          }
          if (v160) {
            *(void *)(v5 + 44_Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(v5 + 448), 12 * v160, 0x87E043F8uLL);
          }
          *(void *)(v5 + 456) = v160;
          uint64_t v152 = v144 - v134;
          if (v144 <= v134)
          {
LABEL_150:
            *(void *)(v5 + 440) = v144;
            uint64_t v153 = *(void *)(v5 + 464);
            if (v153 >= 1) {
              goto LABEL_151;
            }
            goto LABEL_168;
          }
LABEL_167:
          bzero((void *)(*(void *)(v5 + 448) + 12 * *(void *)(v5 + 440)), 12 * v152);
          *(void *)(v5 + 440) = v144;
          uint64_t v153 = *(void *)(v5 + 464);
          if (v153 >= 1)
          {
LABEL_151:
            uint64_t v154 = 0;
            unint64_t v155 = 0;
            uint64_t v156 = *(void *)(v5 + 472);
            do
            {
              if (v127[v155 / 9]) {
                BOOL v157 = v156 == 0;
              }
              else {
                BOOL v157 = 1;
              }
              if (!v157) {
                *(_DWORD *)(v156 + 4 * v154++) = *(_DWORD *)(v156 + 4 * v155);
              }
              ++v155;
            }
            while (v153 != v155);
LABEL_169:
            uint64_t v161 = *(void *)(v5 + 480);
            if (v154 > v161)
            {
              uint64_t v168 = 2 * v161;
              BOOL v141 = v161 == 0;
              uint64_t v169 = 64;
              if (!v141) {
                uint64_t v169 = v168;
              }
              if (v169 <= v154) {
                uint64_t v170 = v154;
              }
              else {
                uint64_t v170 = v169;
              }
              if (v170) {
                *(void *)(v5 + 472) = malloc_type_realloc(*(void **)(v5 + 472), 4 * v170, 0x6554386DuLL);
              }
              *(void *)(v5 + 480) = v170;
              uint64_t v162 = v154 - v153;
              if (v154 <= v153)
              {
LABEL_171:
                *(void *)(v5 + 464) = v154;
                uint64_t v163 = *(void *)(v5 + 488);
                if (v163 >= 1) {
                  goto LABEL_172;
                }
                goto LABEL_188;
              }
            }
            else
            {
              uint64_t v162 = v154 - v153;
              if (v154 <= v153) {
                goto LABEL_171;
              }
            }
            bzero((void *)(*(void *)(v5 + 472) + 4 * *(void *)(v5 + 464)), 4 * v162);
            *(void *)(v5 + 464) = v154;
            uint64_t v163 = *(void *)(v5 + 488);
            if (v163 >= 1)
            {
LABEL_172:
              int64_t v164 = 0;
              for (uint64_t i = 0; i < v163; ++i)
              {
                uint64_t v166 = *(void *)(v5 + 496);
                if (v127[i / v126]) {
                  BOOL v167 = v166 == 0;
                }
                else {
                  BOOL v167 = 1;
                }
                if (!v167)
                {
                  *(unsigned char *)(v166 + v164++) = *(unsigned char *)(v166 + i);
                  uint64_t v163 = *(void *)(v5 + 488);
                }
              }
LABEL_189:
              int64_t v171 = *(void *)(v5 + 504);
              if (v164 > v171)
              {
                uint64_t v180 = 2 * v171;
                BOOL v141 = v171 == 0;
                uint64_t v181 = 256;
                if (!v141) {
                  uint64_t v181 = v180;
                }
                if (v181 <= v164) {
                  size_t v182 = v164;
                }
                else {
                  size_t v182 = v181;
                }
                if (v182) {
                  *(void *)(v5 + 496) = malloc_type_realloc(*(void **)(v5 + 496), v182, 0x5AC28B1EuLL);
                }
                *(void *)(v5 + 504) = v182;
                size_t v172 = v164 - v163;
                if (v164 <= v163)
                {
LABEL_191:
                  *(void *)(v5 + 48_Block_object_dispose(&STACK[0x220], 8) = v164;
                  uint64_t v173 = *(void *)(v5 + 512);
                  if (v173 >= 1)
                  {
LABEL_192:
                    uint64_t v174 = *(void *)(v5 + 520);
                    if (!v174)
                    {
                      uint64_t v175 = 0;
                      uint64_t v183 = *(void *)(v5 + 528);
                      if (v183 >= 0)
                      {
LABEL_208:
                        uint64_t v184 = v175 - v173;
                        if (v175 <= v173) {
                          goto LABEL_209;
                        }
                        goto LABEL_224;
                      }
LABEL_216:
                      uint64_t v192 = 2 * v183;
                      BOOL v141 = v183 == 0;
                      uint64_t v193 = 64;
                      if (!v141) {
                        uint64_t v193 = v192;
                      }
                      if (v193 <= v175) {
                        uint64_t v194 = v175;
                      }
                      else {
                        uint64_t v194 = v193;
                      }
                      if (v194) {
                        *(void *)(v5 + 520) = malloc_type_realloc(*(void **)(v5 + 520), 4 * v194, 0xB64F8733uLL);
                      }
                      *(void *)(v5 + 52_Block_object_dispose(&STACK[0x220], 8) = v194;
                      uint64_t v184 = v175 - v173;
                      if (v175 <= v173)
                      {
LABEL_209:
                        *(void *)(v5 + 512) = v175;
                        uint64_t v185 = *(void *)(v5 + 536);
                        if (v185 >= 1)
                        {
LABEL_210:
                          uint64_t v186 = *(void *)(v5 + 544);
                          if (!v186)
                          {
                            uint64_t v187 = 0;
                            uint64_t v195 = *(void *)(v5 + 552);
                            if (v195 >= 0)
                            {
LABEL_227:
                              uint64_t v196 = v187 - v185;
                              if (v187 <= v185) {
                                goto LABEL_228;
                              }
                              goto LABEL_245;
                            }
LABEL_237:
                            uint64_t v207 = 2 * v195;
                            BOOL v141 = v195 == 0;
                            uint64_t v208 = 32;
                            if (!v141) {
                              uint64_t v208 = v207;
                            }
                            if (v208 <= v187) {
                              uint64_t v209 = v187;
                            }
                            else {
                              uint64_t v209 = v208;
                            }
                            if (v209) {
                              *(void *)(v5 + 544) = malloc_type_realloc(*(void **)(v5 + 544), 8 * v209, 0x6C110647uLL);
                            }
                            *(void *)(v5 + 552) = v209;
                            uint64_t v196 = v187 - v185;
                            if (v187 <= v185)
                            {
LABEL_228:
                              *(void *)(v5 + 536) = v187;
                              uint64_t v197 = *(void *)(v5 + 560);
                              if (v197 >= 1) {
                                goto LABEL_229;
                              }
                              goto LABEL_246;
                            }
LABEL_245:
                            bzero((void *)(*(void *)(v5 + 544) + 8 * *(void *)(v5 + 536)), 8 * v196);
                            *(void *)(v5 + 536) = v187;
                            uint64_t v197 = *(void *)(v5 + 560);
                            if (v197 >= 1)
                            {
LABEL_229:
                              uint64_t v198 = 0;
                              uint64_t v199 = 0;
                              for (uint64_t j = 0; j < v197; ++j)
                              {
                                uint64_t v201 = *(void *)(v5 + 568);
                                if (v127[j]) {
                                  BOOL v202 = v201 == 0;
                                }
                                else {
                                  BOOL v202 = 1;
                                }
                                if (!v202)
                                {
                                  float v203 = (long long *)(v201 + v198);
                                  float v204 = (_OWORD *)(v201 + 48 * v199);
                                  long long v205 = *v203;
                                  long long v206 = v203[2];
                                  v204[1] = v203[1];
                                  v204[2] = v206;
                                  *float v204 = v205;
                                  ++v199;
                                  uint64_t v197 = *(void *)(v5 + 560);
                                }
                                v198 += 48;
                              }
LABEL_247:
                              uint64_t v210 = *(void *)(v5 + 576);
                              if (v199 > v210)
                              {
                                uint64_t v213 = 2 * v210;
                                BOOL v141 = v210 == 0;
                                uint64_t v214 = 5;
                                if (!v141) {
                                  uint64_t v214 = v213;
                                }
                                if (v214 <= v199) {
                                  uint64_t v215 = v199;
                                }
                                else {
                                  uint64_t v215 = v214;
                                }
                                if (v215) {
                                  *(void *)(v5 + 56_Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(v5 + 568), 48 * v215, 0x5BC1632uLL);
                                }
                                *(void *)(v5 + 576) = v215;
                                uint64_t v211 = v199 - v197;
                                if (v199 <= v197)
                                {
LABEL_249:
                                  *(void *)(v5 + 560) = v199;
                                  uint64_t v212 = *(void *)(v5 + 392);
                                  if (v212 < 1) {
                                    goto LABEL_264;
                                  }
                                  goto LABEL_260;
                                }
                              }
                              else
                              {
                                uint64_t v211 = v199 - v197;
                                if (v199 <= v197) {
                                  goto LABEL_249;
                                }
                              }
                              bzero((void *)(*(void *)(v5 + 568) + 48 * *(void *)(v5 + 560)), 48 * v211);
                              *(void *)(v5 + 560) = v199;
                              uint64_t v212 = *(void *)(v5 + 392);
                              if (v212 < 1)
                              {
LABEL_264:
                                free(v127);
                                free(v129);
                                goto LABEL_265;
                              }
LABEL_260:
                              float v216 = *(int **)(v5 + 400);
                              do
                              {
                                uint64_t v217 = *v216;
                                if (v217 != -1) {
                                  LODWORD(v217) = *((_DWORD *)v129 + v217);
                                }
                                *v216++ = v217;
                                --v212;
                              }
                              while (v212);
                              goto LABEL_264;
                            }
LABEL_246:
                            uint64_t v199 = 0;
                            goto LABEL_247;
                          }
                          uint64_t v187 = 0;
                          float v188 = v127;
                          float v189 = *(void **)(v5 + 544);
                          uint64_t v190 = v185;
                          do
                          {
                            if (*v188++) {
                              *(void *)(v186 + 8 * v187++) = *v189;
                            }
                            ++v189;
                            --v190;
                          }
                          while (v190);
LABEL_226:
                          uint64_t v195 = *(void *)(v5 + 552);
                          if (v187 <= v195) {
                            goto LABEL_227;
                          }
                          goto LABEL_237;
                        }
LABEL_225:
                        uint64_t v187 = 0;
                        goto LABEL_226;
                      }
LABEL_224:
                      bzero((void *)(*(void *)(v5 + 520) + 4 * *(void *)(v5 + 512)), 4 * v184);
                      *(void *)(v5 + 512) = v175;
                      uint64_t v185 = *(void *)(v5 + 536);
                      if (v185 >= 1) {
                        goto LABEL_210;
                      }
                      goto LABEL_225;
                    }
                    uint64_t v175 = 0;
                    float v176 = v127;
                    uint64_t v177 = *(_DWORD **)(v5 + 520);
                    uint64_t v178 = v173;
                    do
                    {
                      if (*v176++) {
                        *(_DWORD *)(v174 + 4 * v175++) = *v177;
                      }
                      ++v177;
                      --v178;
                    }
                    while (v178);
LABEL_207:
                    uint64_t v183 = *(void *)(v5 + 528);
                    if (v175 <= v183) {
                      goto LABEL_208;
                    }
                    goto LABEL_216;
                  }
LABEL_206:
                  uint64_t v175 = 0;
                  goto LABEL_207;
                }
              }
              else
              {
                size_t v172 = v164 - v163;
                if (v164 <= v163) {
                  goto LABEL_191;
                }
              }
              bzero((void *)(*(void *)(v5 + 488) + *(void *)(v5 + 496)), v172);
              *(void *)(v5 + 48_Block_object_dispose(&STACK[0x220], 8) = v164;
              uint64_t v173 = *(void *)(v5 + 512);
              if (v173 >= 1) {
                goto LABEL_192;
              }
              goto LABEL_206;
            }
LABEL_188:
            int64_t v164 = 0;
            goto LABEL_189;
          }
LABEL_168:
          uint64_t v154 = 0;
          goto LABEL_169;
        }
        uint64_t v143 = 0;
        uint64_t v144 = 0;
        for (uint64_t k = 0; k < v134; ++k)
        {
          uint64_t v146 = *(void *)(v5 + 448);
          if (v127[k]) {
            BOOL v147 = v146 == 0;
          }
          else {
            BOOL v147 = 1;
          }
          if (!v147)
          {
            uint64_t v148 = (uint64_t *)(v146 + v143);
            uint64_t v149 = v146 + 12 * v144;
            uint64_t v150 = *v148;
            *(_DWORD *)(v149 + _Block_object_dispose(&STACK[0x220], 8) = *((_DWORD *)v148 + 2);
            *(void *)uint64_t v149 = v150;
            ++v144;
            uint64_t v134 = *(void *)(v5 + 440);
          }
          v143 += 12;
        }
LABEL_148:
        uint64_t v151 = *(void *)(v5 + 456);
        if (v144 <= v151) {
          goto LABEL_149;
        }
        goto LABEL_159;
      }
    }
    else
    {
      uint64_t v131 = 0;
      int v132 = 0;
      do
      {
        uint64_t v133 = *(int *)(*(void *)(v5 + 400) + 4 * v131);
        if (v133 != -1)
        {
          v127[v133] = 1;
          ++v132;
          uint64_t v130 = *(void *)(v5 + 392);
        }
        ++v131;
      }
      while (v130 > v131);
      uint64_t v134 = *(void *)(v5 + 440);
      if (v134 >= 1 && v132 >= 5001)
      {
        uint64_t v136 = 0;
        do
        {
          if (v127[v136])
          {
            v127[v136] = 0;
            --v132;
            uint64_t v134 = *(void *)(v5 + 440);
          }
          ++v136;
        }
        while (v134 > v136 && v132 > 5000);
      }
      if (v134 >= 1) {
        goto LABEL_131;
      }
    }
    uint64_t v144 = 0;
    goto LABEL_148;
  }
LABEL_265:
  v232.__darwin_time_t tv_sec = 0;
  *(void *)&v232.uint64_t tv_usec = 0;
  uint64_t result = gettimeofday(&v232, 0);
  if (result || (double)(v232.tv_usec + 1000000 * v232.tv_sec) / 1000000.0 <= 1514764800.0) {
    goto LABEL_267;
  }
  return result;
}

void triangulate_track(uint64_t a1, uint64_t *a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v14 = *a2;
  uint64_t v15 = (float32x4_t *)malloc_type_malloc(48 * (int)*a2, 0x1000040EED21634uLL);
  uint64_t v16 = (float64_t *)malloc_type_malloc(8 * (int)v14, 0x100004000313F17uLL);
  uint64_t v25 = v16;
  if ((int)v14 >= 1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v15 + 2;
    do
    {
      unint64_t v28 = *(unsigned int *)(a2[1] + 4 * v26);
      uint64_t v29 = *(void *)(a1 + 304) + 880 * (v28 & 0x7FFF);
      float32x4_t v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v29 + 32)), *(float64x2_t *)(v29 + 48));
      v27[-2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v29), *(float64x2_t *)(v29 + 16));
      v27[-1] = v19;
      float64x2_t v17 = *(float64x2_t *)(v29 + 80);
      float32x4_t v18 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v29 + 64)), v17);
      *uint64_t v27 = v18;
      v27 += 3;
      v16[v26++] = *(float64_t *)(*(void *)(v29 + 368) + ((v28 >> 12) & 0xFFFF8));
    }
    while (v14 != v26);
  }
  if (a5) {
    goto LABEL_8;
  }
  float v30 = *a4 - *(float *)(a3 + 36);
  float v31 = a4[1] - *(float *)(a3 + 40);
  *(float *)&double v21 = a4[2] - *(float *)(a3 + 44);
  *(float *)v17.f64 = (float)((float)(*(float *)(a3 + 12) * v31) + (float)(*(float *)a3 * v30))
                    + (float)(*(float *)(a3 + 24) * *(float *)&v21);
  double v20 = *(double *)(a3 + 4);
  double v22 = *(double *)(a3 + 16);
  *(float32x2_t *)v19.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)&v22, v31), *(float32x2_t *)&v20, v30), *(float32x2_t *)(a3 + 28), *(float *)&v21);
  *(float32x2_t *)v18.f32 = vdiv_f32(*(float32x2_t *)v19.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v17.f64[0], 0));
  *(void *)(a4 + 1) = v18.i64[0];
  v18.i32[0] = 1.0;
  *a4 = 1.0 / *(float *)v17.f64;
  if (*a2 != 1) {
    goto LABEL_8;
  }
  v17.f64[0] = *v16;
  *(float64_t *)(a4 + 1) = *v16;
  if (a6)
  {
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    float v32 = (float)(1.0 / a7) * (float)(1.0 / a7);
    *(float *)(a6 + 16) = v32;
    *(float *)(a6 + 32) = v32;
    free(v15);
    free(v25);
  }
  else
  {
LABEL_8:
    *(float *)v17.f64 = 1.0 / a7;
    g_triangulate_inv_depthf((uint64_t)v15, (uint64_t)v16, 0, v14, a3, a4, (uint64_t *)a4, a5, v17.f64[0], *(double *)v18.i64, *(double *)v19.i64, v20, v21, v22, v23, v24, a6);
    free(v15);
    free(v25);
  }
}

uint64_t vl_context_history_add_frame(uint64_t a1, const void *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 88);
  if (v4 >= v5)
  {
    uint64_t v6 = 2 * v5;
    if (v6 <= v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v6;
    }
    if (v7)
    {
      *(void *)(a1 + 80) = malloc_type_realloc(*(void **)(a1 + 80), 864 * v7, 0x81EFFEF7uLL);
      uint64_t v4 = *(void *)(a1 + 72);
    }
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = v7;
  }
  *(void *)(a1 + 72) = v4 + 1;
  memcpy((void *)(*(void *)(a1 + 80) + 864 * v4), a2, 0x360uLL);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 72) - 1;
  int v10 = *(_DWORD *)(a1 + 64);
  int v11 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(v8 + 864 * v9) = v10;
  *(_DWORD *)(a1 + 64) = v10 + 1;
  if (v11 + 10 <= v10 && *(_DWORD *)(v8 + 864 * v9 + 8) == 1)
  {
    *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x220], 8) = v10;
    *(_DWORD *)(v8 + 864 * v9 + 4) = 1;
  }
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

uint64_t vl_context_history_trim(uint64_t a1, int a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(void *)(a1 + 72) > a2)
  {
    do
    {
      uint64_t v4 = *(void ***)(a1 + 80);
      free(v4[79]);
      free(v4[99]);
      free(v4[102]);
      free(v4[105]);
      uint64_t v5 = *(void *)(a1 + 72) - 1;
      if (*(void *)(a1 + 72) != 1)
      {
        memmove(*(void **)(a1 + 80), (const void *)(*(void *)(a1 + 80) + 864), 864 * v5);
        uint64_t v5 = *(void *)(a1 + 72) - 1;
      }
      *(void *)(a1 + 72) = v5;
    }
    while (v5 > a2);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

uint64_t vl_context_init(uint64_t a1, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  memcpy(__dst, "com.apple.3dv.vl", sizeof(__dst));
  if (a2 && *a2) {
    __strcpy_chk();
  }
  *(_OWORD *)(a1 + 988_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 9872) = 0u;
  *(_OWORD *)(a1 + 9904) = 0u;
  *(_OWORD *)(a1 + 9920) = 0u;
  *(void *)(a1 + 9936) = 0;
  *(_OWORD *)(a1 + 9856) = 0u;
  *(_OWORD *)(a1 + 9840) = 0u;
  *(_OWORD *)(a1 + 9824) = 0u;
  *(_OWORD *)(a1 + 980_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 9792) = 0u;
  *(_OWORD *)(a1 + 9776) = 0u;
  *(_OWORD *)(a1 + 9760) = 0u;
  *(_OWORD *)(a1 + 9744) = 0u;
  *(_OWORD *)(a1 + 972_Block_object_dispose(&STACK[0x220], 8) = 0u;
  strcpy((char *)(a1 + 9876), "VL total                ");
  *(unsigned char *)(a1 + 9901) = 0;
  *(_WORD *)(a1 + 9902) = 0;
  *(_DWORD *)(a1 + 9904) = 0;
  *(_OWORD *)(a1 + 990_Block_object_dispose(&STACK[0x220], 8) = xmmword_21BB7AD10;
  *(_OWORD *)(a1 + 9924) = unk_21BB7AD20;
  *(void *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 88_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 80_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 72_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 924) = unk_21BB7AD61;
  *(_OWORD *)(a1 + 90_Block_object_dispose(&STACK[0x220], 8) = xmmword_21BB7AD51;
  *(unsigned char *)(a1 + 901) = unk_21BB7AD4A;
  *(_WORD *)(a1 + 902) = unk_21BB7AD4B;
  *(_DWORD *)(a1 + 904) = unk_21BB7AD4D;
  strcpy((char *)(a1 + 876), "Kpts total              ");
  *(void *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 108_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 100_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 1140) = unk_21BB7ADA2;
  *(_OWORD *)(a1 + 1124) = xmmword_21BB7AD92;
  *(unsigned char *)(a1 + 1117) = unk_21BB7AD8B;
  *(_WORD *)(a1 + 111_Block_object_dispose(&STACK[0x220], 8) = unk_21BB7AD8C;
  *(_DWORD *)(a1 + 1120) = unk_21BB7AD8E;
  strcpy((char *)(a1 + 1092), "Kpts pyramid            ");
  *(void *)(a1 + 136_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 128_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 120_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1356) = unk_21BB7ADE3;
  *(_OWORD *)(a1 + 1340) = xmmword_21BB7ADD3;
  *(unsigned char *)(a1 + 1333) = 0;
  *(_WORD *)(a1 + 1334) = 0;
  *(_DWORD *)(a1 + 1336) = 0;
  strcpy((char *)(a1 + 1308), "Kpts det                ");
  *(void *)(a1 + 1584) = 0;
  *(_OWORD *)(a1 + 156_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 148_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 140_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1572) = unk_21BB7AE24;
  *(_OWORD *)(a1 + 1556) = xmmword_21BB7AE14;
  *(unsigned char *)(a1 + 1549) = unk_21BB7AE0D;
  *(_WORD *)(a1 + 1550) = unk_21BB7AE0E;
  *(_DWORD *)(a1 + 1552) = unk_21BB7AE10;
  strcpy((char *)(a1 + 1524), "Kpts model              ");
  *(void *)(a1 + 1800) = 0;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 176_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 168_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 160_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 178_Block_object_dispose(&STACK[0x220], 8) = unk_21BB7AE65;
  *(_OWORD *)(a1 + 1772) = xmmword_21BB7AE55;
  *(unsigned char *)(a1 + 1765) = unk_21BB7AE4E;
  *(_WORD *)(a1 + 1766) = unk_21BB7AE4F;
  *(_DWORD *)(a1 + 176_Block_object_dispose(&STACK[0x220], 8) = unk_21BB7AE51;
  strcpy((char *)(a1 + 1740), "Kpts desc               ");
  *(void *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 196_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 188_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 180_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 2004) = unk_21BB7AEA6;
  *(_OWORD *)(a1 + 198_Block_object_dispose(&STACK[0x220], 8) = xmmword_21BB7AE96;
  *(unsigned char *)(a1 + 1981) = unk_21BB7AE8F;
  *(_WORD *)(a1 + 1982) = unk_21BB7AE90;
  *(_DWORD *)(a1 + 1984) = unk_21BB7AE92;
  strcpy((char *)(a1 + 1956), "Kpts PCA                ");
  *(void *)(a1 + 4416) = 0;
  *(_OWORD *)(a1 + 4400) = 0u;
  *(_OWORD *)(a1 + 4384) = 0u;
  *(_OWORD *)(a1 + 436_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4352) = 0u;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_OWORD *)(a1 + 4320) = 0u;
  *(_OWORD *)(a1 + 4304) = 0u;
  *(_OWORD *)(a1 + 428_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4272) = 0u;
  *(_OWORD *)(a1 + 4256) = 0u;
  *(_OWORD *)(a1 + 4240) = 0u;
  *(_OWORD *)(a1 + 4224) = 0u;
  *(_OWORD *)(a1 + 420_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4404) = unk_21BB7AEE7;
  *(_OWORD *)(a1 + 438_Block_object_dispose(&STACK[0x220], 8) = xmmword_21BB7AED7;
  *(unsigned char *)(a1 + 4381) = unk_21BB7AED0;
  *(_WORD *)(a1 + 4382) = unk_21BB7AED1;
  *(_DWORD *)(a1 + 4384) = unk_21BB7AED3;
  strcpy((char *)(a1 + 4356), "Matching total          ");
  *(void *)(a1 + 4632) = 0;
  *(_OWORD *)(a1 + 4424) = 0u;
  *(_OWORD *)(a1 + 4600) = 0u;
  *(_OWORD *)(a1 + 4616) = 0u;
  *(_OWORD *)(a1 + 456_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4584) = 0u;
  *(_OWORD *)(a1 + 4536) = 0u;
  *(_OWORD *)(a1 + 4552) = 0u;
  *(_OWORD *)(a1 + 4504) = 0u;
  *(_OWORD *)(a1 + 4520) = 0u;
  *(_OWORD *)(a1 + 4472) = 0u;
  *(_OWORD *)(a1 + 448_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4440) = 0u;
  *(_OWORD *)(a1 + 4456) = 0u;
  *(_OWORD *)(a1 + 4620) = unk_21BB7AF28;
  *(_OWORD *)(a1 + 4604) = xmmword_21BB7AF18;
  *(unsigned char *)(a1 + 4597) = 0;
  *(_WORD *)(a1 + 459_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_DWORD *)(a1 + 4600) = 0;
  strcpy((char *)(a1 + 4572), "Matching sss            ");
  *(void *)(a1 + 484_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_OWORD *)(a1 + 4832) = 0u;
  *(_OWORD *)(a1 + 4816) = 0u;
  *(_OWORD *)(a1 + 4800) = 0u;
  *(_OWORD *)(a1 + 4784) = 0u;
  *(_OWORD *)(a1 + 476_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4752) = 0u;
  *(_OWORD *)(a1 + 4736) = 0u;
  *(_OWORD *)(a1 + 4720) = 0u;
  *(_OWORD *)(a1 + 4704) = 0u;
  *(_OWORD *)(a1 + 468_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(_OWORD *)(a1 + 4656) = 0u;
  *(_OWORD *)(a1 + 4640) = 0u;
  *(void *)(a1 + 484_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_OWORD *)(a1 + 4832) = 0u;
  *(_OWORD *)(a1 + 4816) = 0u;
  *(_OWORD *)(a1 + 4800) = 0u;
  *(_OWORD *)(a1 + 4784) = 0u;
  *(_OWORD *)(a1 + 476_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4752) = 0u;
  *(_OWORD *)(a1 + 4736) = 0u;
  *(_OWORD *)(a1 + 4720) = 0u;
  *(_OWORD *)(a1 + 4704) = 0u;
  *(_OWORD *)(a1 + 468_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(_OWORD *)(a1 + 4656) = 0u;
  *(_OWORD *)(a1 + 4640) = 0u;
  *(_OWORD *)(a1 + 4836) = unk_21BB7AF69;
  *(_OWORD *)(a1 + 4820) = xmmword_21BB7AF59;
  *(unsigned char *)(a1 + 4813) = unk_21BB7AF52;
  *(_WORD *)(a1 + 4814) = unk_21BB7AF53;
  *(_DWORD *)(a1 + 4816) = unk_21BB7AF55;
  strcpy((char *)(a1 + 4788), "Matching filter         ");
  *(void *)(a1 + 5064) = 0;
  *(_OWORD *)(a1 + 5032) = 0u;
  *(_OWORD *)(a1 + 504_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 5000) = 0u;
  *(_OWORD *)(a1 + 5016) = 0u;
  *(_OWORD *)(a1 + 496_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_OWORD *)(a1 + 4904) = 0u;
  *(_OWORD *)(a1 + 4920) = 0u;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(_OWORD *)(a1 + 488_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4856) = 0u;
  *(_OWORD *)(a1 + 5052) = unk_21BB7AFAA;
  *(_OWORD *)(a1 + 5036) = xmmword_21BB7AF9A;
  *(unsigned char *)(a1 + 5029) = unk_21BB7AF93;
  *(_WORD *)(a1 + 5030) = unk_21BB7AF94;
  *(_DWORD *)(a1 + 5032) = unk_21BB7AF96;
  strcpy((char *)(a1 + 5004), "Slam tracker            ");
  *(void *)(a1 + 9344) = 0;
  *(_OWORD *)(a1 + 932_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 9312) = 0u;
  *(_OWORD *)(a1 + 9296) = 0u;
  *(_OWORD *)(a1 + 9280) = 0u;
  *(_OWORD *)(a1 + 9264) = 0u;
  *(_OWORD *)(a1 + 924_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 9232) = 0u;
  *(_OWORD *)(a1 + 9216) = 0u;
  *(_OWORD *)(a1 + 9200) = 0u;
  *(_OWORD *)(a1 + 9184) = 0u;
  *(_OWORD *)(a1 + 916_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 9152) = 0u;
  *(_OWORD *)(a1 + 9136) = 0u;
  *(_OWORD *)(a1 + 9332) = unk_21BB7AFEB;
  *(_OWORD *)(a1 + 9316) = xmmword_21BB7AFDB;
  *(unsigned char *)(a1 + 9309) = 0;
  *(_WORD *)(a1 + 9310) = 0;
  *(_DWORD *)(a1 + 9312) = 0;
  strcpy((char *)(a1 + 9284), "Pose total              ");
  *(void *)(a1 + 7216) = 0;
  *(_OWORD *)(a1 + 7200) = 0u;
  *(_OWORD *)(a1 + 7184) = 0u;
  *(_OWORD *)(a1 + 716_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 7152) = 0u;
  *(_OWORD *)(a1 + 7136) = 0u;
  *(_OWORD *)(a1 + 7120) = 0u;
  *(_OWORD *)(a1 + 7104) = 0u;
  *(_OWORD *)(a1 + 708_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 7072) = 0u;
  *(_OWORD *)(a1 + 7056) = 0u;
  *(_OWORD *)(a1 + 7040) = 0u;
  *(_OWORD *)(a1 + 7024) = 0u;
  *(_OWORD *)(a1 + 700_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 7204) = unk_21BB7B02C;
  *(_OWORD *)(a1 + 718_Block_object_dispose(&STACK[0x220], 8) = xmmword_21BB7B01C;
  *(unsigned char *)(a1 + 7181) = unk_21BB7B015;
  *(_WORD *)(a1 + 7182) = unk_21BB7B016;
  *(_DWORD *)(a1 + 7184) = unk_21BB7B018;
  strcpy((char *)(a1 + 7156), "Pose score              ");
  *(void *)(a1 + 572_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_OWORD *)(a1 + 5712) = 0u;
  *(_OWORD *)(a1 + 5696) = 0u;
  *(_OWORD *)(a1 + 5680) = 0u;
  *(_OWORD *)(a1 + 5664) = 0u;
  *(_OWORD *)(a1 + 564_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 5632) = 0u;
  *(_OWORD *)(a1 + 5616) = 0u;
  *(_OWORD *)(a1 + 5600) = 0u;
  *(_OWORD *)(a1 + 5584) = 0u;
  *(_OWORD *)(a1 + 556_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 5552) = 0u;
  *(_OWORD *)(a1 + 5536) = 0u;
  *(_OWORD *)(a1 + 5520) = 0u;
  *(_OWORD *)(a1 + 5716) = unk_21BB7B06D;
  *(_OWORD *)(a1 + 5700) = xmmword_21BB7B05D;
  *(unsigned char *)(a1 + 5693) = unk_21BB7B056;
  *(_WORD *)(a1 + 5694) = unk_21BB7B057;
  *(_DWORD *)(a1 + 5696) = unk_21BB7B059;
  strcpy((char *)(a1 + 5668), "Pose ransac             ");
  *(void *)(a1 + 7776) = 0;
  *(_OWORD *)(a1 + 7760) = 0u;
  *(_OWORD *)(a1 + 7744) = 0u;
  *(_OWORD *)(a1 + 772_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 7712) = 0u;
  *(_OWORD *)(a1 + 7696) = 0u;
  *(_OWORD *)(a1 + 7680) = 0u;
  *(_OWORD *)(a1 + 7664) = 0u;
  *(_OWORD *)(a1 + 764_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 7632) = 0u;
  *(_OWORD *)(a1 + 7616) = 0u;
  *(_OWORD *)(a1 + 7600) = 0u;
  *(_OWORD *)(a1 + 7584) = 0u;
  *(_OWORD *)(a1 + 756_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 7764) = unk_21BB7B0AE;
  *(_OWORD *)(a1 + 774_Block_object_dispose(&STACK[0x220], 8) = xmmword_21BB7B09E;
  *(unsigned char *)(a1 + 7741) = unk_21BB7B097;
  *(_WORD *)(a1 + 7742) = unk_21BB7B098;
  *(_DWORD *)(a1 + 7744) = unk_21BB7B09A;
  strcpy((char *)(a1 + 7716), "Pose referee            ");
  *(void *)(a1 + 912_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_OWORD *)(a1 + 9112) = 0u;
  *(_OWORD *)(a1 + 9096) = 0u;
  *(_OWORD *)(a1 + 9080) = 0u;
  *(_OWORD *)(a1 + 9064) = 0u;
  *(_OWORD *)(a1 + 904_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 9032) = 0u;
  *(_OWORD *)(a1 + 9016) = 0u;
  *(_OWORD *)(a1 + 9000) = 0u;
  *(_OWORD *)(a1 + 8984) = 0u;
  *(_OWORD *)(a1 + 896_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 8952) = 0u;
  *(_OWORD *)(a1 + 8936) = 0u;
  *(_OWORD *)(a1 + 8920) = 0u;
  *(_OWORD *)(a1 + 9116) = unk_21BB7B0EF;
  *(_OWORD *)(a1 + 9100) = xmmword_21BB7B0DF;
  *(unsigned char *)(a1 + 9093) = unk_21BB7B0D8;
  *(_WORD *)(a1 + 9094) = unk_21BB7B0D9;
  *(_DWORD *)(a1 + 9096) = unk_21BB7B0DB;
  strcpy((char *)(a1 + 9068), "Pose fuse               ");
  *(void *)(a1 + 3984) = 0;
  *(_OWORD *)(a1 + 396_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 3952) = 0u;
  *(_OWORD *)(a1 + 3936) = 0u;
  *(_OWORD *)(a1 + 3920) = 0u;
  *(_OWORD *)(a1 + 3904) = 0u;
  *(_OWORD *)(a1 + 388_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 3872) = 0u;
  *(_OWORD *)(a1 + 3856) = 0u;
  *(_OWORD *)(a1 + 3840) = 0u;
  *(_OWORD *)(a1 + 3824) = 0u;
  *(_OWORD *)(a1 + 380_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 3792) = 0u;
  *(_OWORD *)(a1 + 3776) = 0u;
  *(_OWORD *)(a1 + 3972) = unk_21BB7B130;
  *(_OWORD *)(a1 + 3956) = xmmword_21BB7B120;
  *(unsigned char *)(a1 + 3949) = 0;
  *(_WORD *)(a1 + 3950) = 0;
  *(_DWORD *)(a1 + 3952) = 0;
  strcpy((char *)(a1 + 3924), "Track file loading      ");
  *(void *)(a1 + 4200) = 0;
  *(_OWORD *)(a1 + 416_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(_OWORD *)(a1 + 4152) = 0u;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_OWORD *)(a1 + 4072) = 0u;
  *(_OWORD *)(a1 + 408_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(_OWORD *)(a1 + 400_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 4024) = 0u;
  *(_OWORD *)(a1 + 3992) = 0u;
  *(_OWORD *)(a1 + 418_Block_object_dispose(&STACK[0x220], 8) = unk_21BB7B171;
  *(_OWORD *)(a1 + 4172) = xmmword_21BB7B161;
  *(unsigned char *)(a1 + 4165) = unk_21BB7B15A;
  *(_WORD *)(a1 + 4166) = unk_21BB7B15B;
  *(_DWORD *)(a1 + 416_Block_object_dispose(&STACK[0x220], 8) = unk_21BB7B15D;
  strcpy((char *)(a1 + 4140), "SSS build               ");
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  __strcpy_chk();
  *(_DWORD *)(a1 + 2612) = -1;
  *(void *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(void *)(a1 + 5072) = 0;
  *(void *)(a1 + 5224) = 0;
  *(void *)(a1 + 5216) = 0;
  __strcpy_chk();
  strcpy((char *)(a1 + 216), __dst);
  *(_OWORD *)(a1 + 9592) = 0u;
  *(_OWORD *)(a1 + 960_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 9560) = 0u;
  *(_OWORD *)(a1 + 9576) = 0u;
  *(_OWORD *)(a1 + 952_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 9544) = 0u;
  *(_DWORD *)(a1 + 9596) = 0x80000000;
  return pthread_mutex_init((pthread_mutex_t *)(a1 + 9528), 0);
}

uint64_t vl_context_free(uint64_t a1)
{
  vl_dog_free_octave_list((uint64_t *)(a1 + 2024));
  free(*(void **)(a1 + 2056));
  int v2 = *(_DWORD *)(a1 + 2608);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 2072;
    do
    {
      uint64_t v5 = *(lbl_feature2d_t **)(v4 + 8 * v3);
      if (v5)
      {
        lbl_feature2d_t::~lbl_feature2d_t(v5);
        MEMORY[0x21D498F90]();
        *(void *)(v4 + 8 * v3) = 0;
        int v2 = *(_DWORD *)(a1 + 2608);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  free(*(void **)(a1 + 5456));
  free(*(void **)(a1 + 5480));
  free(*(void **)(a1 + 5504));
  free(*(void **)(a1 + 5768));
  free(*(void **)(a1 + 5744));
  if (*(uint64_t *)(a1 + 9352) >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 9360);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 1;
LABEL_9:
      uint64_t v9 = v6 + v7;
      free(*(void **)(v6 + v7 + 144));
      free(*(void **)(v9 + 120));
      free(*(void **)(v9 + 96));
      while (v8 < *(void *)(a1 + 9352))
      {
        uint64_t v6 = *(void *)(a1 + 9360);
        v7 += 160;
        ++v8;
        if (v6) {
          goto LABEL_9;
        }
      }
    }
  }
  free(*(void **)(a1 + 9360));
  free(*(void **)(a1 + 9384));
  free(*(void **)(a1 + 9408));
  vl_pose_fuse_free(*(int **)(a1 + 9424));
  vl_hs_model_free();
  free(*(void **)(a1 + 5080));
  if (*(uint64_t *)(a1 + 5096) >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (void **)(*(void *)(a1 + 5104) + v10);
      free(v12[1]);
      free(v12[4]);
      free(v12[7]);
      ++v11;
      v10 += 80;
    }
    while (v11 < *(void *)(a1 + 5096));
  }
  free(*(void **)(a1 + 5104));
  free(*(void **)(a1 + 5128));
  free(*(void **)(a1 + 5152));
  free(*(void **)(a1 + 5176));
  free(*(void **)(a1 + 5200));
  vl_context_history_clear(a1 + 9528);
  free(*(void **)(a1 + 9608));
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 9528));
}

uint64_t vl_context_history_clear(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x220], 8) = 0x80000000;
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 840;
    do
    {
      uint64_t v4 = (void **)(*(void *)(a1 + 80) + v3);
      free(*(v4 - 26));
      free(*(v4 - 6));
      free(*(v4 - 3));
      free(*v4);
      ++v2;
      v3 += 864;
    }
    while (v2 < *(void *)(a1 + 72));
  }
  *(void *)(a1 + 72) = 0;
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

void vl_get_model_path(char *a1, const char *a2, const char *a3)
{
  CFStringRef v5 = CFStringCreateWithCStringNoCopy(0, a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(v5);
  CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], a3, 0x8000100u);
  CFURLRef v8 = CFBundleCopyResourceURL(BundleWithIdentifier, @"model.espresso", @"net", v7);
  CFStringRef v9 = CFURLCopyPath(v8);
  CStringPtr = CFStringGetCStringPtr(v9, 0x8000100u);
  strcpy(a1, CStringPtr);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v8);
  CFRelease(v5);
}

uint64_t lbl_feature2d_t::forward(uint64_t a1, uint64_t a2, int a3, int a4, void *a5, int32x2_t *a6, int a7, int a8)
{
  uint64_t v225 = *MEMORY[0x263EF8340];
  gettimeofday(&v166, 0);
  __darwin_time_t tv_sec = v166.tv_sec;
  uint64_t tv_usec = v166.tv_usec;
  *(void *)(a1 + 1592) = a2;
  *(void *)(a1 + 1600) = a4;
  *(void *)(a1 + 160_Block_object_dispose(&STACK[0x220], 8) = a3;
  *(void *)(a1 + 1616) = a3;
  if (a3 < a4) {
    __assert_rtn("forward", "vl_kpts_lbl.mm", 475, "width >= height");
  }
  if ((a7 & 0xFFFFFFFD) == 1)
  {
    uint64_t v18 = *(void *)(a1 + 1568);
    if (!v18) {
      operator new();
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 1576);
    if (!v18) {
      operator new();
    }
  }
  int v161 = a8;
  int v19 = *(_DWORD *)(v18 + 416);
  double v20 = *(int **)(a1 + 1560);
  if (!v20) {
    operator new();
  }
  if (*(void *)(a1 + 1608) < *(void *)(a1 + 1600)) {
    __assert_rtn("process", "vl_kpts_lbl.mm", 303, "vimg_input->width >= vimg_input->height");
  }
  uint64_t v93 = a5;
  if (*((void *)v20 + 10))
  {
    double v21 = (void *)*((void *)v20 + 9);
  }
  else
  {
    vImage_Error v22 = vImageScale_Planar8((const vImage_Buffer *)(a1 + 1592), (const vImage_Buffer *)(v20 + 2), 0, 0x80u);
    *((void *)v20 + 10) = v22;
    double v21 = malloc_type_valloc(v22, 0x584B1CFCuLL);
    *((void *)v20 + 9) = v21;
  }
  float v23 = v20 + 2;
  if (vImageScale_Planar8((const vImage_Buffer *)(a1 + 1592), (const vImage_Buffer *)(v20 + 2), v21, 4u)) {
    [MEMORY[0x263EFF940] raise:@"Lbl2d runtime exception" format:@"Failed to downscale src vImage"];
  }
  uint64_t v94 = v18;
  switch(a7)
  {
    case 0:
      goto LABEL_22;
    case 1:
    case 3:
      uint64_t v24 = v20[1];
      *((void *)v20 + 6) = *v20;
      *((void *)v20 + 7) = v24;
      *((void *)v20 + _Block_object_dispose(&STACK[0x220], 8) = v24;
      if (!vImageRotate90_Planar8((const vImage_Buffer *)(v20 + 2), (const vImage_Buffer *)(v20 + 10), a7, 0, 0)) {
        goto LABEL_21;
      }
      uint64_t v25 = (void *)MEMORY[0x263EFF940];
      uint64_t v26 = @"Failed to rot src vImage";
      goto LABEL_20;
    case 2:
      uint64_t v27 = *v20;
      *((void *)v20 + 6) = v20[1];
      *((void *)v20 + 7) = v27;
      *((void *)v20 + _Block_object_dispose(&STACK[0x220], 8) = v27;
      vImageRotate90_Planar8((const vImage_Buffer *)(v20 + 2), (const vImage_Buffer *)(v20 + 10), 2u, 0, 0);
      goto LABEL_21;
    default:
      uint64_t v25 = (void *)MEMORY[0x263EFF940];
      uint64_t v26 = @"Failed to rotate src vImage";
LABEL_20:
      [v25 raise:@"Lbl2d runtime exception" format:v26];
LABEL_21:
      float v23 = v20 + 10;
LABEL_22:
      printf("Info : ");
      gettimeofday(&v166, 0);
      printf("prepro time: %lf ms", (double)(1000000 * (v166.tv_sec - tv_sec) - tv_usec + v166.tv_usec) / 1000.0);
      putchar(10);
      gettimeofday(&v166, 0);
      __darwin_time_t v28 = v166.tv_sec;
      uint64_t v29 = v166.tv_usec;
      long long v30 = *((_OWORD *)v23 + 1);
      timeval v166 = *(timeval *)v23;
      long long v167 = v30;
      if ((espresso_network_bind_input_vimagebuffer_planar8() & 0x80000000) != 0)
      {
        uint64_t v83 = (FILE *)*MEMORY[0x263EF8348];
        status_string = (const char *)espresso_get_status_string();
        fprintf(v83, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 131, status_string);
        exception = __cxa_allocate_exception(0x10uLL);
        uint64_t v86 = espresso_get_status_string();
        MEMORY[0x21D498F60](exception, v86);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      if ((espresso_plan_execute_sync() & 0x80000000) != 0)
      {
        uint64_t v87 = (FILE *)*MEMORY[0x263EF8348];
        uint64_t v88 = (const char *)espresso_get_status_string();
        fprintf(v87, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 132, v88);
        uint64_t v89 = __cxa_allocate_exception(0x10uLL);
        uint64_t v90 = espresso_get_status_string();
        MEMORY[0x21D498F60](v89, v90);
        __cxa_throw(v89, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      printf("Info : ");
      gettimeofday(&v166, 0);
      printf("cnn time: %lf ms", (double)(1000000 * (v166.tv_sec - v28) - v29 + v166.tv_usec) / 1000.0);
      putchar(10);
      gettimeofday(&v166, 0);
      if (v19) {
        __assert_rtn("forward", "vl_kpts_lbl.mm", 523, "0");
      }
      float v31 = *(float **)(v94 + 392);
      uint64_t v160 = *(void *)(v94 + 400);
      uint64_t v32 = *(void *)(v94 + 136);
      uint64_t v96 = *(void *)(v94 + 304);
      float v33 = *(float *)(a1 + 1552);
      gettimeofday(&v166, 0);
      __darwin_time_t v34 = v166.tv_sec;
      uint64_t v35 = v166.tv_usec;
      uint64_t v37 = *(void *)(v94 + 144);
      uint64_t v36 = *(void *)(v94 + 152);
      uint64_t v38 = *(void *)(v94 + 136);
      uint64_t v39 = v37 * v36;
      if (*(void *)(a1 + 1624))
      {
        if (v161)
        {
LABEL_27:
          if (v36 && v37 && v38)
          {
            uint64_t v40 = 0;
            for (uint64_t i = 0; i != v37; ++i)
            {
              uint64_t v42 = 0;
              long long v43 = v31;
              uint64_t v44 = v40;
              do
              {
                uint64_t v45 = v43;
                uint64_t v46 = v44;
                uint64_t v47 = v36;
                do
                {
                  int v48 = (int)(float)(*v45 / v33);
                  if (v48 <= 126) {
                    int v49 = (int)(float)(*v45 / v33);
                  }
                  else {
                    LOBYTE(v49) = 127;
                  }
                  if (v48 <= -128) {
                    char v50 = 0x80;
                  }
                  else {
                    char v50 = v49;
                  }
                  *(unsigned char *)(*(void *)(a1 + 1624) + v46++) = v50;
                  v45 += v37 * v32;
                  --v47;
                }
                while (v47);
                ++v42;
                v44 += v36;
                ++v43;
              }
              while (v42 != v38);
              v40 += v38 * v36;
              v31 += v32;
            }
          }
          goto LABEL_56;
        }
      }
      else
      {
        *(void *)(a1 + 1624) = malloc_type_malloc(4 * v38 * v39, 0x100004052888210uLL);
        if (v161) {
          goto LABEL_27;
        }
      }
      if (v39 && v38)
      {
        uint64_t v51 = 0;
        for (uint64_t j = 0; j != v39; ++j)
        {
          double v53 = v31;
          uint64_t v54 = v51;
          uint64_t v55 = v38;
          do
          {
            float v56 = *v53++;
            int v57 = (int)(float)(v56 / v33);
            if (v57 <= 126) {
              char v58 = v57;
            }
            else {
              char v58 = 127;
            }
            if (v57 <= -128) {
              char v59 = 0x80;
            }
            else {
              char v59 = v58;
            }
            *(unsigned char *)(*(void *)(a1 + 1624) + v54++) = v59;
            --v55;
          }
          while (v55);
          v51 += v38;
          v31 += v32;
        }
      }
LABEL_56:
      printf("Info : ");
      gettimeofday(&v166, 0);
      printf("copy time: %lf", (double)(1000000 * (v166.tv_sec - v34) - v35 + v166.tv_usec) / 1000.0);
      putchar(10);
      gettimeofday(&v166, 0);
      if (*(void *)(v94 + 320) != 65) {
        __assert_rtn("softmax65_permute_to16i", "vl_kpts_lbl.h", 48, "channel == 65");
      }
      uint64_t v91 = v166.tv_usec;
      __darwin_time_t v92 = v166.tv_sec;
      uint64_t v60 = *(void *)(v94 + 312);
      uint64_t v162 = *(void *)(v94 + 304);
      uint64_t v95 = v60;
      if (*(void *)(a1 + 1632))
      {
        if (!v60) {
          goto LABEL_68;
        }
      }
      else
      {
        *(void *)(a1 + 1632) = malloc_type_malloc((v60 * v162) << 7, 0x1000040BDFB0063uLL);
        uint64_t v60 = v95;
        if (!v95) {
          goto LABEL_68;
        }
      }
      if (v162)
      {
        uint64_t v61 = 0;
        uint64_t v62 = v60 * v96;
        uint64_t v159 = 11 * v60 * v96;
        uint64_t v158 = 13 * v60 * v96;
        uint64_t v157 = 19 * v60 * v96;
        uint64_t v156 = 21 * v60 * v96;
        uint64_t v155 = 22 * v60 * v96;
        uint64_t v154 = 23 * v60 * v96;
        uint64_t v153 = 25 * v60 * v96;
        uint64_t v152 = 26 * v60 * v96;
        uint64_t v151 = 27 * v60 * v96;
        uint64_t v149 = 35 * v60 * v96;
        uint64_t v150 = 29 * v60 * v96;
        uint64_t v147 = 38 * v60 * v96;
        uint64_t v148 = 37 * v60 * v96;
        uint64_t v145 = 41 * v60 * v96;
        uint64_t v146 = 39 * v60 * v96;
        uint64_t v144 = 42 * v60 * v96;
        uint64_t v143 = 43 * v60 * v96;
        uint64_t v142 = 44 * v60 * v96;
        uint64_t v141 = 45 * v60 * v96;
        uint64_t v140 = 46 * v60 * v96;
        uint64_t v139 = 47 * v60 * v96;
        uint64_t v137 = 50 * v60 * v96;
        uint64_t v138 = 49 * v60 * v96;
        uint64_t v135 = 52 * v60 * v96;
        uint64_t v136 = 51 * v60 * v96;
        uint64_t v133 = 54 * v60 * v96;
        uint64_t v134 = 53 * v60 * v96;
        uint64_t v131 = 57 * v60 * v96;
        uint64_t v132 = 55 * v60 * v96;
        uint64_t v129 = 59 * v60 * v96;
        uint64_t v130 = 58 * v60 * v96;
        uint64_t v128 = 61 * v60 * v96;
        uint64_t v63 = 2 * v60 * v96;
        uint64_t v64 = 3 * v60 * v96;
        uint64_t v65 = 4 * v60 * v96;
        uint64_t v124 = 2 * v64;
        uint64_t v122 = 7 * v62;
        uint64_t v119 = 4 * v64;
        uint64_t v120 = 2 * (v65 + v62);
        uint64_t v117 = 16 * v62 - v63;
        uint64_t v118 = 16 * v62;
        uint64_t v116 = 15 * v62;
        uint64_t v114 = 18 * v62;
        uint64_t v115 = 17 * v62;
        uint64_t v113 = 4 * (v65 + v62);
        uint64_t v112 = 8 * v64;
        uint64_t v110 = 32 * v62 - v65;
        uint64_t v111 = 32 * v62;
        uint64_t v109 = 32 * v62 - v63;
        uint64_t v107 = 33 * v62;
        uint64_t v108 = 31 * v62;
        uint64_t v121 = 9 * v62;
        uint64_t v105 = 36 * v62;
        uint64_t v106 = 34 * v62;
        uint64_t v125 = v65 + v62;
        uint64_t v126 = v65;
        uint64_t v127 = v64;
        uint64_t v103 = 16 * v64;
        uint64_t v104 = 8 * (v65 + v62);
        uint64_t v123 = 8 * v62;
        uint64_t v100 = (v62 << 6) - v65;
        uint64_t v101 = 56 * v62;
        uint64_t v102 = v63;
        uint64_t v99 = (v62 << 6) - v63;
        uint64_t v66 = v62;
        uint64_t v67 = v62 << 6;
        uint64_t v98 = 63 * v62;
        do
        {
          uint64_t v68 = 0;
          uint64_t v69 = v61 * v96;
          uint64_t v97 = v61;
          int v70 = 8 * v61;
          do
          {
            uint64_t v71 = (_DWORD *)(v160 + 4 * (v68 + v69));
            LODWORD(v166.tv_sec) = *v71;
            HIDWORD(v166.tv_sec) = v71[v66];
            v166.uint64_t tv_usec = v71[v102];
            *(&v166.tv_usec + 1) = v71[v127];
            LODWORD(v167) = v71[v126];
            DWORD1(v167) = v71[v125];
            DWORD2(v167) = v71[v124];
            HIDWORD(v167) = v71[v122];
            int v168 = v71[v123];
            int v169 = v71[v121];
            int v170 = v71[v120];
            int v171 = v71[v159];
            int v172 = v71[v119];
            int v173 = v71[v158];
            int v174 = v71[v117];
            int v175 = v71[v116];
            int v176 = v71[v118];
            int v177 = v71[v115];
            int v178 = v71[v114];
            int v179 = v71[v157];
            int v180 = v71[v113];
            int v181 = v71[v156];
            int v182 = v71[v155];
            int v183 = v71[v154];
            int v184 = v71[v112];
            int v185 = v71[v153];
            int v186 = v71[v152];
            int v187 = v71[v151];
            int v188 = v71[v110];
            int v189 = v71[v150];
            int v190 = v71[v109];
            int v191 = v71[v108];
            int v192 = v71[v111];
            int v193 = v71[v107];
            int v194 = v71[v106];
            int v195 = v71[v149];
            int v196 = v71[v105];
            int v197 = v71[v148];
            int v198 = v71[v147];
            int v199 = v71[v146];
            int v200 = v71[v104];
            int v201 = v71[v145];
            int v202 = v71[v144];
            int v203 = v71[v143];
            int v204 = v71[v142];
            int v205 = v71[v141];
            int v206 = v71[v140];
            int v207 = v71[v139];
            int v208 = v71[v103];
            int v209 = v71[v138];
            int v210 = v71[v137];
            int v211 = v71[v136];
            int v212 = v71[v135];
            int v213 = v71[v134];
            int v214 = v71[v133];
            int v215 = v71[v132];
            int v216 = v71[v101];
            int v217 = v71[v131];
            int v218 = v71[v130];
            int v219 = v71[v129];
            int v220 = v71[v100];
            int v221 = v71[v128];
            int v222 = v71[v99];
            int v223 = v71[v98];
            int v224 = v71[v67];
            int __N = 65;
            uint64_t __B = 0;
            vDSP_vsadd((const float *)&v166, 1, (const float *)&__B + 1, __N_4, 1, 0x41uLL);
            vvexpf(__N_4, __N_4, &__N);
            vDSP_sve(__N_4, 1, (float *)&__B, __N);
            vDSP_vsdiv(__N_4, 1, (const float *)&__B, __N_4, 1, __N);
            uint64_t v72 = 0;
            unint64_t v73 = (8 * v68);
            uint64_t v74 = *(void *)(a1 + 1632);
            do
            {
              float v75 = &__N_4[v72];
              float v76 = fmin((float)(*v75 * 65535.0), 65535.0);
              float v77 = fmin((float)(v75[1] * 65535.0), 65535.0);
              uint64_t v78 = 8 * v162 * (v70 + (v72 >> 3));
              *(_WORD *)(v74 + 2 * ((v72 & 6 | v73) + v78)) = (int)v76;
              *(_WORD *)(v74 + 2 * ((((_BYTE)v72 + 1) & 7 | v73) + v78)) = (int)v77;
              v72 += 2;
            }
            while (v72 != 64);
            ++v68;
          }
          while (v68 != v162);
          uint64_t v61 = v97 + 1;
        }
        while (v97 + 1 != v95);
      }
LABEL_68:
      printf("Info : ");
      gettimeofday(&v166, 0);
      printf("softmax time: %lf", (double)(1000000 * (v166.tv_sec - v92) - v91 + v166.tv_usec) / 1000.0);
      uint64_t result = putchar(10);
      int v80 = *(_DWORD *)(v94 + 152);
      *a6 = *(int32x2_t *)(a1 + 1624);
      int32x2_t v81 = (int32x2_t)(int)(*(_OWORD *)(v94 + 136) * v80);
      a6[1] = vmovn_s64(*(int64x2_t *)(v94 + 136));
      a6[2] = v81;
      *uint64_t v93 = *(void *)(a1 + 1632);
      int32x2_t v82 = vshl_n_s32(vmovn_s64(*(int64x2_t *)(v94 + 304)), 3uLL);
      v93[1] = v82;
      v93[2] = v82.i32[0];
      return result;
  }
}

void sub_21BB09D60(_Unwind_Exception *a1)
{
  MEMORY[0x21D498F90](v1, 0x1080C409FDDAA90);
  _Unwind_Resume(a1);
}

void sub_21BB09D88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB09D9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB09DB0(_Unwind_Exception *a1)
{
  MEMORY[0x21D498F90](v1, 0x1080C4095AC591FLL);
  _Unwind_Resume(a1);
}

void lbl_feature2d_t::lbl_feature2d_t(lbl_feature2d_t *this, const char *a2, int a3)
{
  uint64_t v6 = (char *)this + 1032;
  bzero(this, 0x608uLL);
  if ((a3 - 3006) < 3 || a3 == 3010)
  {
    strcpy(v6, "espressos/lbl2d_v4_ind_pl.mlmodelc");
    *((void *)this + 193) = 0x100000040;
    *((void *)this + 194) = 0x3E0D447B3CB916B3;
  }
  else
  {
    if (a3 != 3011) {
      __assert_rtn("lbl_feature2d_par_ver", "vl_kpts_lbl.mm", 389, "0");
    }
    strcpy(v6, "espressos/lbl2d_v5.mlmodelc");
    *((void *)this + 193) = 64;
    *((_DWORD *)this + 38_Block_object_dispose(&STACK[0x220], 8) = 989888641;
  }
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *((void *)this + 203) = 0;
  *((void *)this + 205) = 0;
  *((void *)this + 204) = 0;
  log_col_app((uint64_t)"Loading model at: %s", v7, v8, v9, v10, v11, v12, v13, (char)v6);
  vl_get_model_path((char *)this + 8, a2, v6);
  id v14 = MTLCreateSystemDefaultDevice();
  uint64_t v15 = *(void **)this;
  *(void *)this = v14;

  operator new();
}

void sub_21BB09F90(_Unwind_Exception *a1)
{
  MEMORY[0x21D498F90](v2, 0x1080C409FDDAA90);

  _Unwind_Resume(a1);
}

void sub_21BB09FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t lbl_2d_metal_t::lbl_2d_metal_t(uint64_t a1, void *a2)
{
  id v4 = a2;
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = a1 + 56;
  objc_storeStrong((id *)a1, a2);
  uint64_t v5 = [v4 newCommandQueue];
  uint64_t v6 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v5;

  objc_msgSend(NSString, "stringWithUTF8String:", "\nconstant ushort ushort_arg0[[function_constant(0)]];\n"
    "constant ushort ushort_arg1[[function_constant(1)]];\n"
    "constant ushort ushort_arg2[[function_constant(2)]];\n"
    "\n"
    "#include <metal_stdlib>\n"
    "using namespace metal;\n"
    "\n"
    "\n"
    "kernel void copy_tex_toi8(texture2d_array<half, access::read> tex[[texture(0)]],\n"
    "                                 device char* buf[[buffer(0)]],\n"
    "                                 constant float *alpha[[buffer(1)]],\n"
    "                                 ushort3 gid[[thread_position_in_grid]]) {\n"
    "  const ushort C = ushort_arg0;\n"
    "  const ushort H = ushort_arg1;\n"
    "  const ushort W = ushort_arg2;\n"
    "  ushort i;\n"
    "  \n"
    "  if (gid.x >= W || gid.y >= H) {\n"
    "    return;\n"
    "  }\n"
    "  half4 t = tex.read(gid.xy, gid.z);\n"
    "\n"
    "  for (uint64_t i = 0; i < 4; ++i){\n"
    "    int c = (int)(gid.z) * 4 + i;\n"
    "    if (c < C){\n"
    "      int ind = c * (int)H * (int)W + ((int)(gid.y) * W + (int)(gid.x));\n"
    "      buf[ind] = (char)fmax(fmin(t[i] * alpha[0], 127.), -128.);\n"
    "    }\n"
    "  }\n"
    "}\n"
    "\n"
    "kernel void copy_tex_toi8_trans(texture2d_array<half, access::read> tex[[texture(0)]],\n"
    "                                 device char* buf[[buffer(0)]],\n"
    "                                 constant float *alpha[[buffer(1)]],\n"
    "                                 ushort3 gid[[thread_position_in_grid]]) {\n"
    "  const ushort C = ushort_arg0;\n"
    "  const ushort H = ushort_arg1;\n"
    "  const ushort W = ushort_arg2;\n"
    "  ushort i;\n"
    "  \n"
    "  if (gid.x >= W || gid.y >= H) {\n"
    "    return;\n"
    "  }\n"
    "  half4 t = tex.read(gid.xy, gid.z);\n"
    "\n"
    "  for (uint64_t i = 0; i < 4; ++i){\n"
    "    int c = (int)(gid.z) * 4 + i;\n"
    "    if (c < C){\n"
    "      int ind = ((int)(gid.y) * W + (int)(gid.x)) * C + c;\n"
    "      buf[ind] = (char)fmax(fmin(t[i] * alpha[0], 127.), -128.);\n"
    "    }\n"
    "  }\n"
    "}\n"
    "\n"
    "\n"
    "kernel void copy_tex_tof16(texture2d_array<half, access::read> tex[[texture(0)]],\n"
    "                                 device half* buf[[buffer(0)]],\n"
    "                                 constant float *alpha[[buffer(1)]],\n"
    "                                 ushort3 gid[[thread_position_in_grid]]) {\n"
    "  const ushort C = ushort_arg0;\n"
    "  const ushort H = ushort_arg1;\n"
    "  const ushort W = ushort_arg2;\n"
    "  ushort i;\n"
    "  \n"
    "  if (gid.x >= W || gid.y >= H) {\n"
    "    return;\n"
    "  }\n"
    "  half4 t = tex.read(gid.xy, gid.z);\n"
    "\n"
    "  for (uint64_t i = 0; i < 4; ++i){\n"
    "    int c = (int)(gid.z) * 4 + i;\n"
    "    if (c < C){\n"
    "      int ind = c * (int)H * (int)W + ((int)(gid.y) * W + (int)(gid.x));\n"
    "      buf[ind] = t[i];\n"
    "    }\n"
    "  }\n"
    "}\n"
    "\n"
    "kernel void copy_tex_tof16_trans(texture2d_array<half, access::read> tex[[texture(0)]],\n"
    "                                 device half* buf[[buffer(0)]],\n"
    "                                 constant float *alpha[[buffer(1)]],\n"
    "                                 ushort3 gid[[thread_position_in_grid]]) {\n"
    "  const ushort C = ushort_arg0;\n"
    "  const ushort H = ushort_arg1;\n"
    "  const ushort W = ushort_arg2;\n"
    "  ushort i;\n"
    "  \n"
    "  if (gid.x >= W || gid.y >= H) {\n"
    "    return;\n"
    "  }\n"
    "  half4 t = tex.read(gid.xy, gid.z);\n"
    "\n"
    "  for (uint64_t i = 0; i < 4; ++i){\n"
    "    int c = (int)(gid.z) * 4 + i;\n"
    "    if (c < C){\n"
    "      int ind = ((int)(gid.y) * W + (int)(gid.x)) * C + c;\n"
    "      buf[ind] = t[i];\n"
    "    }\n"
    "  }\n"
    "}\n"
  uint64_t v7 = "\n");
  id v8 = *(id *)a1;
  id v13 = 0;
  uint64_t v9 = [v8 newLibraryWithSource:v7 options:0 error:&v13];
  id v10 = v13;
  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v9;

  if (!*(void *)(a1 + 16) || v10) {
    NSLog(&cfstr_FailedToLoadLi.isa);
  }

  return a1;
}

void sub_21BB0A0EC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*(char **)(v2 + 56));
  std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*(char **)(v2 + 32));

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*((void *)a1 + 1));

    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

void lbl_2d_cnn_t::lbl_2d_cnn_t(lbl_2d_cnn_t *this, const char *a2, const char *a3)
{
  id v4 = (void *)MEMORY[0x21D499780]();
  uint64_t context = espresso_create_context();
  *((_DWORD *)this + 104) = 0;
  if (!context)
  {
    uint64_t context = espresso_create_context();
    *((_DWORD *)this + 104) = 1;
    if (!context)
    {
      uint64_t context = espresso_create_context();
      *((_DWORD *)this + 104) = 2;
    }
  }
  *((void *)this + 3) = context;
  NSLog(&cfstr_InitWithNetDev.isa, *((unsigned int *)this + 104));
  *((void *)this + 4) = espresso_create_plan();
  espresso_get_default_storage_type();
  if ((espresso_plan_add_network() & 0x80000000) != 0)
  {
    uint64_t v6 = (FILE *)*MEMORY[0x263EF8348];
    status_string = (const char *)espresso_get_status_string();
    fprintf(v6, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 100, status_string);
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v9 = espresso_get_status_string();
    MEMORY[0x21D498F60](exception, v9);
    goto LABEL_16;
  }
  if ((espresso_network_select_configuration() & 0x80000000) != 0)
  {
    id v10 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v11 = (const char *)espresso_get_status_string();
    fprintf(v10, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 101, v11);
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v12 = espresso_get_status_string();
    MEMORY[0x21D498F60](exception, v12);
    goto LABEL_16;
  }
  if ((espresso_plan_build() & 0x80000000) != 0)
  {
    id v13 = (FILE *)*MEMORY[0x263EF8348];
    id v14 = (const char *)espresso_get_status_string();
    fprintf(v13, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 102, v14);
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v15 = espresso_get_status_string();
    MEMORY[0x21D498F60](exception, v15);
LABEL_16:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if ((espresso_network_query_blob_dimensions() & 0x80000000) != 0)
  {
    uint64_t v16 = (FILE *)*MEMORY[0x263EF8348];
    float64x2_t v17 = (const char *)espresso_get_status_string();
    fprintf(v16, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 106, v17);
    uint64_t v18 = __cxa_allocate_exception(0x10uLL);
    uint64_t v19 = espresso_get_status_string();
    MEMORY[0x21D498F60](v18, v19);
    __cxa_throw(v18, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *((int32x2_t *)this + 51) = vmovn_s64(v36);
  if ((espresso_network_query_blob_dimensions() & 0x80000000) != 0)
  {
    double v20 = (FILE *)*MEMORY[0x263EF8348];
    double v21 = (const char *)espresso_get_status_string();
    fprintf(v20, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 110, v21);
    vImage_Error v22 = __cxa_allocate_exception(0x10uLL);
    uint64_t v23 = espresso_get_status_string();
    MEMORY[0x21D498F60](v22, v23);
    __cxa_throw(v22, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *((void *)this + 49) = malloc_type_malloc(4 * v38 * v37 * v36.i64[1] * v36.i64[0], 0x100004052888210uLL);
  espresso_buffer_pack_tensor_shape();
  *((void *)this + 7) = *((void *)this + 49);
  if ((espresso_network_bind_buffer() & 0x80000000) != 0)
  {
    uint64_t v24 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v25 = (const char *)espresso_get_status_string();
    fprintf(v24, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 117, v25);
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    uint64_t v27 = espresso_get_status_string();
    MEMORY[0x21D498F60](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if ((espresso_network_query_blob_dimensions() & 0x80000000) != 0)
  {
    __darwin_time_t v28 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v29 = (const char *)espresso_get_status_string();
    fprintf(v28, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 119, v29);
    long long v30 = __cxa_allocate_exception(0x10uLL);
    uint64_t v31 = espresso_get_status_string();
    MEMORY[0x21D498F60](v30, v31);
    __cxa_throw(v30, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *((void *)this + 50) = malloc_type_malloc(4 * v38 * v37 * v36.i64[1] * v36.i64[0], 0x100004052888210uLL);
  espresso_buffer_pack_tensor_shape();
  *((void *)this + 2_Block_object_dispose(&STACK[0x220], 8) = *((void *)this + 50);
  if ((espresso_network_bind_buffer() & 0x80000000) != 0)
  {
    uint64_t v32 = (FILE *)*MEMORY[0x263EF8348];
    float v33 = (const char *)espresso_get_status_string();
    fprintf(v32, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 126, v33);
    __darwin_time_t v34 = __cxa_allocate_exception(0x10uLL);
    uint64_t v35 = espresso_get_status_string();
    MEMORY[0x21D498F60](v34, v35);
    __cxa_throw(v34, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_21BB0A7EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB0A800(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB0A814(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB0A828(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB0A83C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB0A850(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB0A864(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB0A878(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void lbl_feature2d_t::~lbl_feature2d_t(lbl_feature2d_t *this)
{
  uint64_t v2 = *((void *)this + 195);
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 8);
    if (v3) {
      free(v3);
    }
    id v4 = *(void **)(v2 + 40);
    if (v4) {
      free(v4);
    }
    if (*(void *)(v2 + 80)) {
      free(*(void **)(v2 + 72));
    }
    MEMORY[0x21D498F90](v2, 0x1080C4095AC591FLL);
  }
  uint64_t v5 = *((void *)this + 197);
  if (v5)
  {
    if (espresso_plan_destroy() || espresso_context_destroy()) {
      NSLog(&cfstr_WarningFaildTo.isa);
    }
    uint64_t v6 = *(void **)(v5 + 392);
    if (v6) {
      free(v6);
    }
    uint64_t v7 = *(void **)(v5 + 400);
    if (v7) {
      free(v7);
    }
    MEMORY[0x21D498F90](v5, 0x1080C409FDDAA90);
  }
  uint64_t v8 = *((void *)this + 196);
  if (v8)
  {
    if (espresso_plan_destroy() || espresso_context_destroy()) {
      NSLog(&cfstr_WarningFaildTo.isa);
    }
    uint64_t v9 = *(void **)(v8 + 392);
    if (v9) {
      free(v9);
    }
    id v10 = *(void **)(v8 + 400);
    if (v10) {
      free(v10);
    }
    MEMORY[0x21D498F90](v8, 0x1080C409FDDAA90);
  }
  uint64_t v11 = *((void *)this + 198);
  if (v11)
  {
    std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*(char **)(v11 + 56));
    std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*(char **)(v11 + 32));

    MEMORY[0x21D498F90](v11, 0x10A0C40A7699F9ELL);
  }
  free(*((void **)this + 203));
  free(*((void **)this + 204));
  free(*((void **)this + 205));
}

void bon_eval_fnc_relpose(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9, float32x2_t *a10, int a11)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v11 = *a8;
  uint64_t v12 = a8[1];
  id v13 = *(_OWORD **)(a5 + 32 * v11);
  long long v14 = v13[1];
  v26[0] = *v13;
  v26[1] = v14;
  long long v15 = v13[2];
  uint64_t v16 = *(long long **)(a5 + 32 * v12);
  long long v17 = *v16;
  long long v18 = v16[1];
  v26[2] = v15;
  v26[3] = v17;
  long long v19 = v16[2];
  v26[4] = v18;
  v26[5] = v19;
  if (a2)
  {
    int v20 = *(_DWORD *)(a5 + 32 * v11 + 16);
    BOOL v21 = v20 == 0;
    if (v20) {
      vImage_Error v22 = a2;
    }
    else {
      vImage_Error v22 = 0;
    }
    uint64_t v23 = 9;
    if (v21) {
      uint64_t v23 = 0;
    }
    uint64_t v24 = &a2[v23];
    if (*(_DWORD *)(a5 + 32 * v12 + 16)) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
  }
  else
  {
    vImage_Error v22 = 0;
    uint64_t v25 = 0;
  }
  bon_eval_fnc_relpose_(a1, v22, v25, (float32x2_t *)v26, a10, a11, a2 != 0);
}

void bon_eval_fnc_relpose_(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x2_t *a4, float32x2_t *a5, int a6, int a7)
{
  if (a2) {
    int v14 = 6;
  }
  else {
    int v14 = 0;
  }
  if (a3) {
    int v15 = 6;
  }
  else {
    int v15 = 0;
  }
  if (a7)
  {
    uint64_t v16 = (float64x2_t *)malloc_type_calloc((v15 + v14) * a6, 8uLL, 0x100004000313F17uLL);
    if (a6 == 6) {
      goto LABEL_9;
    }
LABEL_17:
    __assert_rtn("bon_eval_fnc_relpose_", "bon.c", 911, "n_res == 6");
  }
  uint64_t v16 = 0;
  if (a6 != 6) {
    goto LABEL_17;
  }
LABEL_9:
  float64x2_t v17 = vcvtq_f64_f32(a4[1]);
  v26[0] = vcvtq_f64_f32(*a4);
  v26[1] = v17;
  float64x2_t v18 = vcvtq_f64_f32(a4[3]);
  v26[2] = vcvtq_f64_f32(a4[2]);
  v26[3] = v18;
  float64x2_t v19 = vcvtq_f64_f32(a4[5]);
  v26[4] = vcvtq_f64_f32(a4[4]);
  v26[5] = v19;
  float64x2_t v20 = vcvtq_f64_f32(a4[7]);
  v25[0] = vcvtq_f64_f32(a4[6]);
  v25[1] = v20;
  float64x2_t v21 = vcvtq_f64_f32(a4[9]);
  v25[2] = vcvtq_f64_f32(a4[8]);
  v25[3] = v21;
  float64x2_t v22 = vcvtq_f64_f32(a4[11]);
  v25[4] = vcvtq_f64_f32(a4[10]);
  v25[5] = v22;
  float64x2_t v23 = vcvtq_f64_f32(a5[1]);
  float64x2_t v27 = vcvtq_f64_f32(*a5);
  float64x2_t v28 = v23;
  float64x2_t v29 = vcvtq_f64_f32(a5[2]);
  g_jac_rel_pose_so3_scale((uint64_t)v26, (double *)v25, 0, 0, 0, 6u, v14, v15, 0, v27.f64, v16->f64);
  *(float32x4_t *)a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27), v28);
  *(float32x2_t *)(a1 + 16) = vcvt_f32_f64(v29);
  if (a7)
  {
    uint64_t v24 = v16;
    if (a2)
    {
      *a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v16), v16[1]);
      a2[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[2]), v16[3]);
      a2[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[4]), v16[5]);
      a2[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[6]), v16[7]);
      a2[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[8]), v16[9]);
      a2[5] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[10]), v16[11]);
      a2[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[12]), v16[13]);
      a2[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[14]), v16[15]);
      uint64_t v24 = v16 + 18;
      a2[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[16]), v16[17]);
    }
    if (a3)
    {
      *a3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v24), v24[1]);
      a3[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[2]), v24[3]);
      a3[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[4]), v24[5]);
      a3[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[6]), v24[7]);
      a3[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[8]), v24[9]);
      a3[5] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[10]), v24[11]);
      a3[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[12]), v24[13]);
      a3[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[14]), v24[15]);
      a3[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[16]), v24[17]);
    }
    free(v16);
  }
}

void bon_eval_fnc_abspose(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9, float32x2_t *a10, int a11)
{
  id v13 = *(float32x2_t **)(a5 + 32 * *a8);
  float32x2_t v14 = *v13;
  float32x2_t v15 = v13[1];
  float32x2_t v16 = v13[2];
  float32x2_t v17 = v13[3];
  float32x2_t v18 = v13[4];
  float32x2_t v19 = v13[5];
  if (a2) {
    int v20 = 6;
  }
  else {
    int v20 = 0;
  }
  if (a2)
  {
    float64x2_t v21 = (float64x2_t *)malloc_type_calloc(6 * a11, 8uLL, 0x100004000313F17uLL);
    if (a11 == 6) {
      goto LABEL_6;
    }
LABEL_10:
    __assert_rtn("bon_eval_fnc_abspose_", "bon.c", 952, "n_res == 6");
  }
  float64x2_t v21 = 0;
  if (a11 != 6) {
    goto LABEL_10;
  }
LABEL_6:
  v23[0] = vcvtq_f64_f32(v14);
  v23[1] = vcvtq_f64_f32(v15);
  v23[2] = vcvtq_f64_f32(v16);
  v23[3] = vcvtq_f64_f32(v17);
  v23[4] = vcvtq_f64_f32(v18);
  v23[5] = vcvtq_f64_f32(v19);
  float64x2_t v22 = vcvtq_f64_f32(a10[1]);
  float64x2_t v24 = vcvtq_f64_f32(*a10);
  float64x2_t v25 = v22;
  float64x2_t v26 = vcvtq_f64_f32(a10[2]);
  g_jac_abs_pose_so3((double *)v23, 0, 6, v20, v24.f64, (uint64_t)v21);
  *(float32x4_t *)a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24), v25);
  *(float32x2_t *)(a1 + 16) = vcvt_f32_f64(v26);
  if (a2)
  {
    *a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v21), v21[1]);
    a2[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[2]), v21[3]);
    a2[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[4]), v21[5]);
    a2[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[6]), v21[7]);
    a2[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[8]), v21[9]);
    a2[5] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[10]), v21[11]);
    a2[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[12]), v21[13]);
    a2[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[14]), v21[15]);
    a2[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[16]), v21[17]);
    free(v21);
  }
}

float bon_eval_fnc_distance(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9, float *a10, int a11)
{
  uint64_t v11 = *a8;
  uint64_t v12 = a8[1];
  if (!a2)
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    if (a11 == 1) {
      goto LABEL_10;
    }
LABEL_19:
    __assert_rtn("bon_eval_fnc_distance_", "bon.c", 986, "n_res == 1");
  }
  int v13 = *(_DWORD *)(a5 + 32 * v11 + 16);
  BOOL v14 = v13 == 0;
  if (v13) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = 24;
  if (v14) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = a2 + v16;
  if (!*(_DWORD *)(a5 + 32 * v12 + 16)) {
    uint64_t v17 = 0;
  }
  if (a11 != 1) {
    goto LABEL_19;
  }
LABEL_10:
  float32x2_t v18 = *(float **)(a5 + 32 * v11);
  float32x2_t v19 = *(float **)(a5 + 32 * v12);
  float v21 = v18[9];
  float v20 = v18[10];
  float result = v18[11];
  float v24 = v19[9];
  float v23 = v19[10];
  float v25 = v19[11];
  float v26 = v21 - v24;
  float v27 = v20 - v23;
  float v28 = result - v25;
  float v29 = sqrtf((float)((float)(v27 * v27) + (float)(v26 * v26)) + (float)(v28 * v28));
  *a1 = *a10 - v29;
  if (a2)
  {
    if (v29 <= 0.000001) {
      float v29 = 0.000001;
    }
    if (v15)
    {
      *(float *)uint64_t v15 = v26 / v29;
      *(float *)(v15 + 4) = v27 / v29;
      *(float *)(v15 + _Block_object_dispose(&STACK[0x220], 8) = v28 / v29;
      *(void *)(v15 + 16) = 0;
      *(_DWORD *)(v15 + 12) = 0;
    }
    if (v17)
    {
      *(float *)uint64_t v17 = (float)(v24 - v21) / v29;
      *(float *)(v17 + 4) = (float)(v23 - v20) / v29;
      float result = (float)(v25 - result) / v29;
      *(float *)(v17 + _Block_object_dispose(&STACK[0x220], 8) = result;
      *(void *)(v17 + 16) = 0;
      *(_DWORD *)(v17 + 12) = 0;
    }
  }
  return result;
}

float32x2_t *bon_eval_acc(float32x2_t *result, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9, float *a10)
{
  uint64_t v10 = *a8;
  if (a2)
  {
    int v11 = *(_DWORD *)(a5 + 32 * v10 + 16);
    BOOL v12 = v11 == 0;
    if (v11) {
      int v13 = a2;
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = 18;
    if (v12) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = 18;
    }
    uint64_t v16 = &a2[v15];
    uint64_t v17 = a8[1];
    uint64_t v18 = a8[2];
    int v19 = *(_DWORD *)(a5 + 32 * v17 + 16);
    BOOL v20 = v19 == 0;
    if (v19) {
      float v21 = v16;
    }
    else {
      float v21 = 0;
    }
    if (v20) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = 18;
    }
    float v23 = &v16[v22];
    int v24 = *(_DWORD *)(a5 + 32 * v18 + 16);
    BOOL v25 = v24 == 0;
    if (v24) {
      float v26 = v23;
    }
    else {
      float v26 = 0;
    }
    if (v25) {
      uint64_t v14 = 0;
    }
    float v27 = &v23[v14];
    uint64_t v28 = a8[3];
    if (!*(_DWORD *)(a5 + 32 * v28 + 16)) {
      float v27 = 0;
    }
  }
  else
  {
    int v13 = 0;
    float v21 = 0;
    float v26 = 0;
    float v27 = 0;
    uint64_t v17 = a8[1];
    uint64_t v18 = a8[2];
    uint64_t v28 = a8[3];
  }
  uint64_t v29 = *(void *)(a5 + 32 * v10);
  uint64_t v30 = *(void *)(a5 + 32 * v17);
  uint64_t v31 = *(void *)(a5 + 32 * v18);
  float v32 = a10[1];
  float v33 = *(float **)(a5 + 32 * v28);
  float v34 = a10[2];
  float v35 = 1.0 / *a10;
  float v36 = 1.0 / (float)(v32 - *a10);
  float v37 = 1.0 / (float)(v34 - v32);
  float v38 = 2.0 / v32;
  float v39 = 2.0 / (float)(v34 - *a10);
  float v40 = *(float *)(v29 + 32);
  float v42 = *(float *)(v30 + 32);
  float v41 = *(float *)(v30 + 36);
  float v43 = v41 - *(float *)(v29 + 36);
  float v44 = *(float *)(v30 + 40);
  float v45 = *(float *)(v30 + 44);
  float v46 = v44 - *(float *)(v29 + 40);
  float v47 = v45 - *(float *)(v29 + 44);
  float v48 = (float)(v46 * *(float *)(v29 + 20)) + (float)(*(float *)(v29 + 8) * v43);
  float v49 = v48 + (float)(v40 * v47);
  float v50 = *(float *)(v31 + 36);
  float v51 = v50 - v41;
  float v52 = *(float *)(v31 + 40);
  float v53 = *(float *)(v31 + 44);
  float v54 = v52 - v44;
  float v55 = v53 - v45;
  float v56 = (float)((float)(v52 - v44) * *(float *)(v30 + 20)) + (float)(*(float *)(v30 + 8) * v51);
  float v57 = v56 + (float)(v42 * (float)(v53 - v45));
  float v58 = v33[9] - v50;
  float v59 = v33[10] - v52;
  float v60 = v33[11] - v53;
  float v61 = (float)((float)(v59 * *(float *)(v31 + 20)) + (float)(*(float *)(v31 + 8) * v58))
      + (float)(*(float *)(v31 + 32) * v60);
  float32x2_t v62 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v29 + 12), v46), *(float32x2_t *)v29, v43), *(float32x2_t *)(v29 + 24), v47);
  float32x2_t v63 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v30 + 12), v54), *(float32x2_t *)v30, v51), *(float32x2_t *)(v30 + 24), v55);
  float32x2_t v64 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v31 + 12), v59), *(float32x2_t *)v31, v58), *(float32x2_t *)(v31 + 24), v60);
  float32x2_t v65 = vneg_f32(v62);
  float32x2_t v66 = vneg_f32(v63);
  *float result = vadd_f32(vsub_f32(vmul_n_f32(vmla_n_f32(vmul_n_f32(v66, v36), v64, v37), v39), vmul_n_f32(vmla_n_f32(vmul_n_f32(v65, v35), v63, v36), v38)), 0);
  result[1].f32[0] = (float)((float)(v39 * (float)((float)(v61 * v37) - (float)(v57 * v36)))
                           - (float)(v38 * (float)((float)(v57 * v36) - (float)(v49 * v35))))
                   + 0.0;
  if (a2)
  {
    if (v13)
    {
      float v67 = -(float)(v48 + (float)(v40 * v47));
      float v68 = *(float *)v29;
      *int v13 = -*(float *)v29;
      float v69 = *(float *)(v29 + 4);
      v13[1] = -v69;
      float v70 = *(float *)(v29 + 8);
      v13[2] = -v70;
      float v71 = *(float *)(v29 + 12);
      v13[3] = -v71;
      float v72 = *(float *)(v29 + 16);
      v13[4] = -v72;
      float v73 = *(float *)(v29 + 20);
      v13[5] = -v73;
      float v74 = *(float *)(v29 + 24);
      v13[6] = -v74;
      float v75 = *(float *)(v29 + 28);
      v13[7] = -v75;
      float v76 = *(float *)(v29 + 32);
      float v77 = -(float)(v35 * v38);
      *int v13 = -(float)(v68 * v77);
      v13[1] = -(float)(v69 * v77);
      v13[2] = -(float)(v70 * v77);
      v13[3] = -(float)(v71 * v77);
      v13[4] = -(float)(v72 * v77);
      v13[5] = -(float)(v73 * v77);
      v13[6] = -(float)(v74 * v77);
      v13[7] = -(float)(v75 * v77);
      v13[8] = -(float)(v76 * v77);
      v13[9] = vmuls_lane_f32(v77, v62, 1);
      v13[10] = v77 * v65.f32[0];
      v13[11] = v77 * 0.0;
      v13[12] = v77 * v67;
      v13[13] = v77 * 0.0;
      v13[14] = v77 * v62.f32[0];
      v13[15] = v77 * 0.0;
      v13[16] = v77 * v49;
      v13[17] = vmuls_lane_f32(v77, v65, 1);
    }
    if (v21)
    {
      float v78 = -(float)(v56 + (float)(v42 * v55));
      float v79 = *(float *)v30;
      *float v21 = -*(float *)v30;
      float v80 = *(float *)(v30 + 4);
      v21[1] = -v80;
      float v81 = *(float *)(v30 + 8);
      v21[2] = -v81;
      float v82 = *(float *)(v30 + 12);
      v21[3] = -v82;
      float v83 = *(float *)(v30 + 16);
      v21[4] = -v83;
      float v84 = *(float *)(v30 + 20);
      v21[5] = -v84;
      float v85 = *(float *)(v30 + 24);
      v21[6] = -v85;
      float v86 = *(float *)(v30 + 28);
      v21[7] = -v86;
      float v87 = *(float *)(v30 + 32);
      float v88 = v36 * (float)(v38 + v39);
      float v89 = -(float)(v79 * v88);
      float v90 = -(float)(v80 * v88);
      *float v21 = v89;
      v21[1] = v90;
      float v91 = -(float)(v81 * v88);
      float v92 = -(float)(v82 * v88);
      v21[2] = v91;
      v21[3] = v92;
      float v93 = -(float)(v83 * v88);
      float v94 = -(float)(v84 * v88);
      v21[4] = v93;
      v21[5] = v94;
      float v95 = -(float)(v85 * v88);
      float v96 = -(float)(v86 * v88);
      v21[6] = v95;
      v21[7] = v96;
      float v97 = -(float)(v87 * v88);
      v21[8] = v97;
      v21[9] = vmuls_lane_f32(v88, v63, 1);
      v21[10] = v88 * v66.f32[0];
      v21[11] = v88 * 0.0;
      v21[12] = v88 * v78;
      v21[13] = v88 * 0.0;
      v21[14] = v88 * v63.f32[0];
      v21[15] = v88 * 0.0;
      v21[16] = v88 * v57;
      v21[17] = vmuls_lane_f32(v88, v66, 1);
      float v98 = -(float)(v35 * v38);
      *float v21 = v89 + (float)(*(float *)v29 * v98);
      v21[3] = v92 + (float)(*(float *)(v29 + 12) * v98);
      v21[6] = v95 + (float)(*(float *)(v29 + 24) * v98);
      v21[1] = v90 + (float)(*(float *)(v29 + 4) * v98);
      v21[4] = v93 + (float)(*(float *)(v29 + 16) * v98);
      v21[7] = v96 + (float)(*(float *)(v29 + 28) * v98);
      v21[2] = v91 + (float)(*(float *)(v29 + 8) * v98);
      v21[5] = v94 + (float)(*(float *)(v29 + 20) * v98);
      v21[8] = v97 + (float)(*(float *)(v29 + 32) * v98);
    }
    if (v26)
    {
      float v99 = *(float *)v31;
      *float v26 = -*(float *)v31;
      float v100 = *(float *)(v31 + 4);
      v26[1] = -v100;
      float v101 = *(float *)(v31 + 8);
      v26[2] = -v101;
      float v102 = *(float *)(v31 + 12);
      v26[3] = -v102;
      float v103 = *(float *)(v31 + 16);
      v26[4] = -v103;
      float v104 = *(float *)(v31 + 20);
      v26[5] = -v104;
      float v105 = *(float *)(v31 + 24);
      _OWORD v26[6] = -v105;
      float v106 = *(float *)(v31 + 28);
      v26[7] = -v106;
      float v107 = *(float *)(v31 + 32);
      float v108 = -(float)(v37 * v39);
      float v109 = -(float)(v99 * v108);
      float v110 = -(float)(v100 * v108);
      *float v26 = v109;
      v26[1] = v110;
      float v111 = -(float)(v101 * v108);
      float v112 = -(float)(v102 * v108);
      v26[2] = v111;
      v26[3] = v112;
      float v113 = -(float)(v103 * v108);
      float v114 = -(float)(v104 * v108);
      v26[4] = v113;
      v26[5] = v114;
      float v115 = -(float)(v105 * v108);
      float v116 = -(float)(v106 * v108);
      _OWORD v26[6] = v115;
      v26[7] = v116;
      float v117 = -(float)(v107 * v108);
      v26[8] = v117;
      v26[9] = vmuls_lane_f32(v108, v64, 1);
      v26[10] = -(float)(v64.f32[0] * v108);
      v26[11] = v108 * 0.0;
      v26[12] = -(float)(v61 * v108);
      v26[13] = v108 * 0.0;
      v26[14] = v108 * v64.f32[0];
      v26[15] = v108 * 0.0;
      v26[16] = v108 * v61;
      v26[17] = -(float)(v64.f32[1] * v108);
      float v118 = (float)(v36 * v39) + (float)(v36 * v38);
      *float v26 = v109 + (float)(*(float *)v30 * v118);
      v26[3] = v112 + (float)(*(float *)(v30 + 12) * v118);
      _OWORD v26[6] = v115 + (float)(*(float *)(v30 + 24) * v118);
      v26[1] = v110 + (float)(*(float *)(v30 + 4) * v118);
      v26[4] = v113 + (float)(*(float *)(v30 + 16) * v118);
      v26[7] = v116 + (float)(*(float *)(v30 + 28) * v118);
      v26[2] = v111 + (float)(*(float *)(v30 + 8) * v118);
      v26[5] = v114 + (float)(*(float *)(v30 + 20) * v118);
      v26[8] = v117 + (float)(*(float *)(v30 + 32) * v118);
    }
    if (v27)
    {
      float v119 = -(float)(v37 * v39);
      *float v27 = v119 * *(float *)v31;
      v27[9] = 0.0;
      v27[3] = v119 * *(float *)(v31 + 12);
      v27[12] = 0.0;
      v27[6] = v119 * *(float *)(v31 + 24);
      v27[15] = 0.0;
      v27[1] = v119 * *(float *)(v31 + 4);
      v27[10] = 0.0;
      v27[4] = v119 * *(float *)(v31 + 16);
      v27[13] = 0.0;
      v27[7] = v119 * *(float *)(v31 + 28);
      v27[16] = 0.0;
      v27[2] = v119 * *(float *)(v31 + 8);
      v27[11] = 0.0;
      v27[5] = v119 * *(float *)(v31 + 20);
      v27[14] = 0.0;
      v27[8] = v119 * *(float *)(v31 + 32);
      v27[17] = 0.0;
    }
  }
  return result;
}

void bon_eval_fnc_bs(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9, long long *a10, int a11)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v13 = *(_OWORD **)(a5 + 32 * *a8);
  long long v14 = v13[1];
  v23[0] = *v13;
  v23[1] = v14;
  long long v15 = *a10;
  long long v16 = a10[1];
  v23[2] = v13[2];
  v23[3] = v15;
  long long v17 = a10[2];
  v23[4] = v16;
  v23[5] = v17;
  memset(v22, 0, sizeof(v22));
  bon_eval_fnc_relpose_((uint64_t)__src, v25, 0, (float32x2_t *)v23, v22, 6, a2 != 0);
  if (!a2)
  {
LABEL_5:
    if (a11 < 1) {
      return;
    }
    goto LABEL_6;
  }
  if (a11 != 3)
  {
    long long v18 = v29;
    *(_OWORD *)(a2 + 96) = v28;
    *(_OWORD *)(a2 + 112) = v18;
    *(_OWORD *)(a2 + 12_Block_object_dispose(&STACK[0x220], 8) = v30;
    float32x4_t v19 = v25[3];
    *(float32x4_t *)(a2 + 32) = v25[2];
    *(float32x4_t *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = v19;
    long long v20 = v27;
    *(_OWORD *)(a2 + 64) = v26;
    *(_OWORD *)(a2 + 80) = v20;
    float32x4_t v21 = v25[1];
    *(float32x4_t *)a2 = v25[0];
    *(float32x4_t *)(a2 + 16) = v21;
    goto LABEL_5;
  }
  *(void *)a2 = *((void *)&v26 + 1);
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = v27;
  *(void *)(a2 + 12) = v28;
  *(_DWORD *)(a2 + 20) = DWORD2(v28);
  *(void *)(a2 + 24) = *((void *)&v29 + 1);
  *(_DWORD *)(a2 + 32) = v30;
LABEL_6:
  memcpy(a1, __src, 4 * a11);
}

int8x8_t *bon_eval_fnc_fm(int8x8_t *result, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  uint64_t v8 = *a8;
  if (a2)
  {
    int v9 = *(_DWORD *)(a5 + 32 * v8 + 16);
    BOOL v10 = v9 == 0;
    if (v9) {
      int v11 = a2;
    }
    else {
      int v11 = 0;
    }
    uint64_t v12 = 12;
    if (v10) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = 12;
    }
    long long v14 = &a2[v13];
    uint64_t v15 = a8[1];
    uint64_t v16 = a8[2];
    int v17 = *(_DWORD *)(a5 + 32 * v15 + 16);
    BOOL v18 = v17 == 0;
    if (v17) {
      float32x4_t v19 = v14;
    }
    else {
      float32x4_t v19 = 0;
    }
    if (v18) {
      uint64_t v12 = 0;
    }
    long long v20 = &v14[v12];
    if (!*(_DWORD *)(a5 + 32 * v16 + 16)) {
      long long v20 = 0;
    }
  }
  else
  {
    int v11 = 0;
    float32x4_t v19 = 0;
    long long v20 = 0;
    uint64_t v15 = a8[1];
    uint64_t v16 = a8[2];
  }
  float32x4_t v21 = *(float **)(a5 + 32 * v8);
  uint64_t v22 = *(float **)(a5 + 32 * v15);
  uint64_t v23 = *(void *)(a5 + 32 * v16);
  float v24 = v22[9] - v21[9];
  float v25 = v22[10] - v21[10];
  float v26 = v22[11] - v21[11];
  float v27 = (float)((float)(v21[3] * v25) + (float)(*v21 * v24)) + (float)(v21[6] * v26);
  float v28 = (float)((float)(v25 * v21[4]) + (float)(v21[1] * v24)) + (float)(v21[7] * v26);
  float v29 = (float)((float)(v25 * v21[5]) + (float)(v21[2] * v24)) + (float)(v21[8] * v26);
  float v30 = *(float *)v23;
  float v31 = v27 - *(float *)(v23 + 36);
  float v32 = *(float *)(v23 + 12);
  float v33 = v28 - *(float *)(v23 + 40);
  float v34 = *(float *)(v23 + 24);
  float v35 = v29 - *(float *)(v23 + 44);
  float32x2_t v36 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v23 + 16), v33), *(float32x2_t *)(v23 + 4), v31), *(float32x2_t *)(v23 + 28), v35);
  int8x8_t v37 = (int8x8_t)vneg_f32(v36);
  *float result = v37;
  if (a2)
  {
    if (v11)
    {
      float v38 = v21[1];
      float v39 = v21[2];
      float v40 = v21[3];
      float v41 = v21[4];
      float v42 = v21[5];
      float v43 = v21[6];
      float v44 = v21[7];
      float v45 = v21[8];
      float v46 = *(float *)(v23 + 4);
      float v47 = *(float *)(v23 + 8);
      float v48 = *(float *)(v23 + 16);
      float v49 = *(float *)(v23 + 20);
      float v50 = *(float *)(v23 + 28);
      float v51 = *(float *)(v23 + 32);
      float v52 = (float)((float)(0.0 - (float)(v47 * *v21)) - (float)(v49 * v38)) - (float)(v51 * v39);
      float *v11 = (float)((float)(0.0 - (float)(v46 * *v21)) - (float)(v48 * v38)) - (float)(v50 * v39);
      v11[1] = v52;
      v11[2] = (float)((float)(0.0 - (float)(v46 * v40)) - (float)(v48 * v41)) - (float)(v50 * v42);
      v11[3] = (float)((float)(0.0 - (float)(v47 * v40)) - (float)(v49 * v41)) - (float)(v51 * v42);
      v11[4] = (float)((float)(0.0 - (float)(v46 * v43)) - (float)(v48 * v44)) - (float)(v50 * v45);
      v11[5] = (float)((float)(0.0 - (float)(v47 * v43)) - (float)(v49 * v44)) - (float)(v51 * v45);
      v11[6] = (float)((float)((float)(v46 * v28) + 0.0) - (float)(v48 * v27)) + (float)(v50 * 0.0);
      v11[7] = (float)((float)((float)(v47 * v28) + 0.0) - (float)(v49 * v27)) + (float)(v51 * 0.0);
      v11[8] = (float)((float)(0.0 - (float)(v46 * v29)) + (float)(v48 * 0.0)) + (float)(v50 * v27);
      v11[9] = (float)((float)(0.0 - (float)(v47 * v29)) + (float)(v49 * 0.0)) + (float)(v51 * v27);
      v11[10] = (float)((float)((float)(v46 * 0.0) + 0.0) + (float)(v48 * v29)) - (float)(v50 * v28);
      v11[11] = (float)((float)((float)(v47 * 0.0) + 0.0) + (float)(v49 * v29)) - (float)(v51 * v28);
    }
    if (v19)
    {
      float v53 = v21[1];
      float v54 = *(float *)(v23 + 4);
      float v55 = *(float *)(v23 + 8);
      float v56 = *(float *)(v23 + 16);
      float v57 = *(float *)(v23 + 20);
      float v58 = *(float *)(v23 + 28);
      float v59 = *(float *)(v23 + 32);
      float v60 = v21[2];
      float v61 = v21[3];
      float v62 = (float)((float)((float)(*v21 * v54) + 0.0) + (float)(v53 * v56)) + (float)(v60 * v58);
      float v63 = (float)((float)((float)(*v21 * v55) + 0.0) + (float)(v53 * v57)) + (float)(v60 * v59);
      float v64 = v21[4];
      float v65 = v21[5];
      float v66 = (float)((float)((float)(v61 * v54) + 0.0) + (float)(v64 * v56)) + (float)(v65 * v58);
      float v67 = (float)((float)((float)(v61 * v55) + 0.0) + (float)(v64 * v57)) + (float)(v65 * v59);
      float v68 = v21[6];
      float v69 = v21[7];
      float v70 = v21[8];
      *float32x4_t v19 = v62;
      v19[1] = v63;
      v19[2] = v66;
      v19[3] = v67;
      v19[4] = (float)((float)((float)(v68 * v54) + 0.0) + (float)(v69 * v56)) + (float)(v70 * v58);
      v19[5] = (float)((float)((float)(v68 * v55) + 0.0) + (float)(v69 * v57)) + (float)(v70 * v59);
      *((void *)v19 + 4) = 0;
      *((void *)v19 + 5) = 0;
      *((void *)v19 + 3) = 0;
    }
    if (v20)
    {
      float v71 = (float)((float)(v32 * v33) + (float)(v30 * v31)) + (float)(v34 * v35);
      *long long v20 = -v71;
      v20[1] = 0.0;
      v20[2] = 0.0;
      v20[3] = v71;
      *((int8x8_t *)v20 + 2) = vext_s8((int8x8_t)v36, v37, 4uLL);
    }
  }
  return result;
}

float bon_upd_cs(uint64_t a1, float *a2)
{
  uint64_t v2 = *(float **)a1;
  if (*(_DWORD *)(a1 + 16) == 6)
  {
    float v3 = v2[10];
    v2[9] = *a2 + v2[9];
    v2[10] = a2[1] + v3;
    v2[11] = a2[2] + v2[11];
    a2 += 3;
  }
  float v4 = a2[1];
  float v5 = a2[2];
  __float2 v6 = __sincosf_stret(*a2);
  __float2 v7 = __sincosf_stret(v4);
  __float2 v8 = __sincosf_stret(v5);
  float v9 = (float)((float)(v6.__cosval * v7.__sinval) * v8.__sinval) - (float)(v6.__sinval * v8.__cosval);
  float v10 = (float)(v6.__sinval * v8.__sinval) + (float)((float)(v6.__cosval * v7.__sinval) * v8.__cosval);
  float v11 = (float)(v6.__cosval * v8.__cosval) + (float)((float)(v6.__sinval * v7.__sinval) * v8.__sinval);
  float v12 = (float)((float)(v6.__sinval * v7.__sinval) * v8.__cosval) - (float)(v6.__cosval * v8.__sinval);
  float v13 = *v2;
  float v14 = v2[1];
  float v15 = v2[2];
  float v16 = v2[3];
  float v17 = v2[4];
  float v18 = v2[5];
  float v19 = v2[6];
  float v20 = v2[7];
  float v21 = v2[8];
  float v22 = (float)((float)((float)(*v2 * v9) + 0.0) + (float)(v14 * v11))
      + (float)(v15 * (float)(v7.__cosval * v8.__sinval));
  float *v2 = (float)((float)((float)(*v2 * (float)(v6.__cosval * v7.__cosval)) + 0.0)
              + (float)(v14 * (float)(v6.__sinval * v7.__cosval)))
      - (float)(v15 * v7.__sinval);
  v2[1] = v22;
  v2[2] = (float)((float)((float)(v13 * v10) + 0.0) + (float)(v14 * v12))
        + (float)(v15 * (float)(v7.__cosval * v8.__cosval));
  v2[3] = (float)((float)((float)(v16 * (float)(v6.__cosval * v7.__cosval)) + 0.0)
                + (float)(v17 * (float)(v6.__sinval * v7.__cosval)))
        - (float)(v18 * v7.__sinval);
  v2[4] = (float)((float)((float)(v16 * v9) + 0.0) + (float)(v17 * v11))
        + (float)(v18 * (float)(v7.__cosval * v8.__sinval));
  v2[5] = (float)((float)((float)(v16 * v10) + 0.0) + (float)(v17 * v12))
        + (float)(v18 * (float)(v7.__cosval * v8.__cosval));
  v2[6] = (float)((float)((float)(v19 * (float)(v6.__cosval * v7.__cosval)) + 0.0)
                + (float)(v20 * (float)(v6.__sinval * v7.__cosval)))
        - (float)(v21 * v7.__sinval);
  v2[7] = (float)((float)((float)(v19 * v9) + 0.0) + (float)(v20 * v11))
        + (float)(v21 * (float)(v7.__cosval * v8.__sinval));
  float result = (float)((float)((float)(v19 * v10) + 0.0) + (float)(v20 * v12))
         + (float)(v21 * (float)(v7.__cosval * v8.__cosval));
  v2[8] = result;
  return result;
}

float bon2(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int *a7, uint64_t a8, int a9, uint64_t a10)
{
  uint64_t v13 = a2;
  v249[0] = a1;
  size_t v250 = 0;
  uint64_t v14 = a2;
  if ((int)a2 < 1)
  {
    size_t v16 = 0;
  }
  else
  {
    if (a2 >= 5)
    {
      uint64_t v17 = a2 & 3;
      if (!v17) {
        uint64_t v17 = 4;
      }
      uint64_t v15 = a2 - v17;
      float v18 = a1 + 9;
      int64x2_t v19 = 0uLL;
      uint64_t v20 = v15;
      int64x2_t v21 = 0uLL;
      do
      {
        int32x2_t v22 = vzip1_s32(v18[-8], v18[-4]);
        int32x2_t v23 = v18[4];
        int32x2_t v24 = *v18;
        v18 += 16;
        int64x2_t v19 = vaddw_s32(v19, v22);
        int64x2_t v21 = vaddw_s32(v21, vzip1_s32(v24, v23));
        v20 -= 4;
      }
      while (v20);
      size_t v16 = vaddvq_s64(vaddq_s64(v21, v19));
    }
    else
    {
      uint64_t v15 = 0;
      size_t v16 = 0;
    }
    uint64_t v25 = a2 - v15;
    float v26 = &a1[4 * v15 + 1];
    do
    {
      uint64_t v27 = v26->i32[0];
      v26 += 4;
      v16 += v27;
      --v25;
    }
    while (v25);
    size_t v250 = v16;
  }
  __dst = (char *)malloc_type_malloc(v16, 0x57329693uLL);
  v249[1] = __dst;
  int v244 = (float32x4_t *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  uint64_t v252 = v244;
  size_t __n = 4 * a4;
  __src = malloc_type_malloc(__n, 0x100004052888210uLL);
  long long v253 = __src;
  uint64_t v28 = a4;
  if (a4 >= 1)
  {
    float v29 = (__int32 *)(a3 + 48);
    float v30 = v244;
    uint64_t v31 = a4;
    do
    {
      __int32 v32 = *v29;
      v29 += 20;
      v30->i32[0] = v32;
      float v30 = (float32x4_t *)((char *)v30 + 4);
      --v31;
    }
    while (v31);
  }
  uint64_t v251 = v13;
  int v254 = a4;
  int v255 = a6;
  if ((int)v13 >= 1)
  {
    int v33 = 0;
    float v34 = a1 + 2;
    uint64_t v35 = v14;
    do
    {
      int v36 = v34->i32[0];
      if (v34->i32[0]) {
        int v37 = v33;
      }
      else {
        int v37 = -1;
      }
      v34[-1].i32[1] = v37;
      v33 += v36;
      v34 += 4;
      --v35;
    }
    while (v35);
    float v38 = (const void **)&a1[1];
    uint64_t v39 = v14;
    float v40 = __dst;
    do
    {
      memcpy(v40, *(v38 - 1), *(int *)v38);
      v40 += *(int *)v38;
      v38 += 4;
      --v39;
    }
    while (v39);
  }
  memcpy(__src, v244, __n);
  if (a7[4]) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = a4;
  }
  __b = malloc_type_malloc(4 * (int)v41, 0x100004052888210uLL);
  LODWORD(v42) = a7[3];
  long long v224 = v42;
  v256.__darwin_time_t tv_sec = 0;
  *(void *)&v256.uint64_t tv_usec = 0;
  if (gettimeofday(&v256, 0)) {
    goto LABEL_218;
  }
  __darwin_time_t v43 = v256.tv_usec + 1000000 * v256.tv_sec;
  if ((double)v43 / 1000000.0 <= 1514764800.0) {
    goto LABEL_218;
  }
  int v239 = *a7;
  if ((int)v41 >= 1) {
    memset_pattern16(__b, &unk_21BB7B1B0, 4 * v41);
  }
  uint64_t v220 = a8;
  uint64_t v219 = v43;
  if ((int)v13 < 1)
  {
    __darwin_suseconds_t v45 = 0;
  }
  else
  {
    if (v13 >= 5)
    {
      uint64_t v46 = v14 & 3;
      if ((v14 & 3) == 0) {
        uint64_t v46 = 4;
      }
      uint64_t v44 = v14 - v46;
      int32x2_t v47 = 0;
      float v48 = a1 + 10;
      uint64_t v49 = v44;
      int32x2_t v50 = 0;
      do
      {
        int32x2_t v51 = vzip1_s32(v48[-8], v48[-4]);
        int32x2_t v52 = v48[4];
        int32x2_t v53 = *v48;
        v48 += 16;
        int32x2_t v47 = vadd_s32(v51, v47);
        int32x2_t v50 = vadd_s32(vzip1_s32(v53, v52), v50);
        v49 -= 4;
      }
      while (v49);
      int32x2_t v54 = vadd_s32(v50, v47);
      __darwin_suseconds_t v45 = vpadd_s32(v54, v54).u32[0];
    }
    else
    {
      uint64_t v44 = 0;
      __darwin_suseconds_t v45 = 0;
    }
    uint64_t v55 = v14 - v44;
    float v56 = &a1[4 * v44 + 2];
    do
    {
      int v57 = v56->i32[0];
      v56 += 4;
      v45 += v57;
      --v55;
    }
    while (v55);
  }
  uint64_t v247 = (v45 + v41);
  float v58 = cholskyf_create((uint64_t)__b, v41, v45 + (int)v41);
  uint64_t v241 = a7[4] ? 0 : (float *)malloc_type_malloc(__n, 0x100004052888210uLL);
  float v59 = (float *)malloc_type_malloc(4 * (int)v247 * v45, 0x100004052888210uLL);
  size_t v60 = 4 * (int)v247;
  long long v248 = (float32x4_t *)malloc_type_malloc(v60, 0x100004052888210uLL);
  float v61 = (float32x4_t *)malloc_type_malloc(v60, 0x100004052888210uLL);
  v256.__darwin_time_t tv_sec = 0;
  *(void *)&v256.uint64_t tv_usec = 0;
  if (gettimeofday(&v256, 0)
    || (__darwin_time_t v242 = v256.tv_usec + 1000000 * v256.tv_sec, (double)v242 / 1000000.0 <= 1514764800.0))
  {
LABEL_218:
    __assert_rtn("u_timel", "arch_dtime.c", 118, "ret == 0 && result/1e6 > 1514764800L");
  }
  v256.__darwin_time_t tv_sec = (__darwin_time_t)v59;
  int v62 = v45 + v41;
  v256.uint64_t tv_usec = v45;
  *(&v256.tv_usec + 1) = v45 + v41;
  __darwin_suseconds_t v257 = v45;
  int v258 = 0;
  float v63 = linearize((uint64_t)v249, a3);
  float v64 = v63;
  if (v239)
  {
    double v65 = sqrtf(v63);
    __darwin_time_t v242 = toc_explicit(3, v242, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 801, (uint64_t)"solve", "linearize %f", SLOBYTE(v65));
  }
  long long v66 = v224;
  if (fabsf(v64) == INFINITY)
  {
    float v154 = sqrtf(v64);
    log_msg(2, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 803, (uint64_t)"solve", "%s: rmse is %f", "solve", v154);
    if (a4 >= 1) {
      goto LABEL_215;
    }
    goto LABEL_217;
  }
  int v67 = a7[1];
  uint64_t v245 = (void **)v58;
  __darwin_time_t v234 = (__darwin_time_t)v59;
  int v68 = 0;
  if (v67 < 1) {
    goto LABEL_156;
  }
  uint64_t v69 = (int)v13;
  uint64_t v231 = v41 & 0xFFFFFFF8;
  BOOL v71 = v244 < (float32x4_t *)&v61->f32[v41] && v61 < (float32x4_t *)&v244->f32[v41];
  char v228 = v71;
  while (1)
  {
LABEL_60:
    char v232 = v68;
    if (*(float *)&v66 > 0.0)
    {
      if (v45 >= 1)
      {
        uint64_t v72 = 0;
        int v73 = v41 * v45;
        uint64_t v74 = v45;
        do
        {
          v59[v72 + v73] = *(float *)&v66 + v59[v72 + v73];
          ++v72;
          v73 += v45;
          --v74;
        }
        while (v74);
      }
      if ((int)v41 >= 1)
      {
        if (v41 < 8)
        {
          uint64_t v75 = 0;
LABEL_70:
          uint64_t v80 = v41 - v75;
          float v81 = &v241[v75];
          do
          {
            *float v81 = *(float *)&v66 + *v81;
            ++v81;
            --v80;
          }
          while (v80);
          goto LABEL_72;
        }
        float32x4_t v76 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v66, 0);
        uint64_t v77 = v41 & 0xFFFFFFF8;
        float v78 = (float32x4_t *)(v241 + 4);
        do
        {
          float32x4_t v79 = vaddq_f32(v76, *v78);
          v78[-1] = vaddq_f32(v76, v78[-1]);
          *float v78 = v79;
          v78 += 2;
          v77 -= 8;
        }
        while (v77);
        uint64_t v75 = v41 & 0xFFFFFFF8;
        if (v231 != v41) {
          goto LABEL_70;
        }
      }
    }
LABEL_72:
    int v222 = v67;
    int v223 = v68 + 1;
    long long v225 = v66;
    factorizef(v58, v241, (uint64_t)__b, v59, 0, 0, 0.0);
    if (v239)
    {
      __darwin_time_t v82 = toc_explicit(3, v242, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 817, (uint64_t)"solve", "%d: cholskyf_factorize", v68);
      uint64_t v83 = (uint64_t)v58;
      uint64_t v84 = v82;
      cholskyf_solve(v83, (uint64_t)v61, (uint64_t)v248);
      __darwin_time_t v242 = toc_explicit(3, v84, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 821, (uint64_t)"solve", "%d: cholskyf_solve", v68);
      uint64_t v87 = v13;
      if ((int)v41 < 1) {
        goto LABEL_91;
      }
    }
    else
    {
      cholskyf_solve((uint64_t)v58, (uint64_t)v61, (uint64_t)v248);
      uint64_t v87 = v13;
      if ((int)v41 < 1) {
        goto LABEL_91;
      }
    }
    v85.i32[0] = a7[6];
    v86.i32[0] = a7[7];
    char v88 = v228;
    if (v41 < 8) {
      char v88 = 1;
    }
    if (v88)
    {
      uint64_t v89 = 0;
    }
    else
    {
      float32x4_t v90 = (float32x4_t)vdupq_lane_s32(v85, 0);
      float32x4_t v91 = (float32x4_t)vdupq_lane_s32(v86, 0);
      uint64_t v92 = v41 & 0xFFFFFFF8;
      float v93 = v244 + 1;
      float v94 = v61 + 1;
      do
      {
        float32x4_t v95 = vaddq_f32(v94[-1], v93[-1]);
        float32x4_t v96 = vaddq_f32(*v94, *v93);
        v93[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v90, v95), (int8x16_t)v90, vbslq_s8((int8x16_t)vcgtq_f32(v95, v91), (int8x16_t)v91, (int8x16_t)v95));
        *(int8x16_t *)float v93 = vbslq_s8((int8x16_t)vcgtq_f32(v90, v96), (int8x16_t)v90, vbslq_s8((int8x16_t)vcgtq_f32(v96, v91), (int8x16_t)v91, (int8x16_t)v96));
        v94 += 2;
        v93 += 2;
        v92 -= 8;
      }
      while (v92);
      uint64_t v89 = v41 & 0xFFFFFFF8;
      if (v231 == v41) {
        goto LABEL_91;
      }
    }
    uint64_t v97 = v41 - v89;
    uint64_t v98 = v89;
    float v99 = &v244->f32[v89];
    float v100 = &v61->f32[v98];
    do
    {
      float v101 = *v100++;
      float v102 = v101 + *v99;
      if (v102 <= *(float *)v86.i32) {
        float v103 = v102;
      }
      else {
        float v103 = *(float *)v86.i32;
      }
      if (v102 >= *(float *)v85.i32) {
        float v104 = v103;
      }
      else {
        float v104 = *(float *)v85.i32;
      }
      *v99++ = v104;
      --v97;
    }
    while (v97);
LABEL_91:
    float v105 = a1;
    uint64_t v106 = v69;
    int v107 = v41;
    if ((int)v87 >= 1)
    {
      do
      {
        if (v105[1].i32[1] != -1)
        {
          ((void (*)(int32x2_t *, uint64_t))v105[3])(v105, (uint64_t)v61->i64 + 4 * v107);
          v107 += v105[2].i32[0];
        }
        v105 += 4;
        --v106;
      }
      while (v106);
    }
    v256.__darwin_time_t tv_sec = (__darwin_time_t)v59;
    uint64_t v108 = (v45 + v41);
    v256.uint64_t tv_usec = v45;
    *(&v256.tv_usec + 1) = v45 + v41;
    __darwin_suseconds_t v257 = v45;
    int v258 = 0;
    float v109 = linearize((uint64_t)v249, a3);
    if (v239) {
      __darwin_time_t v242 = toc_explicit(3, v242, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 828, (uint64_t)"solve", "%d: linearize new %f (%f) %d", v232);
    }
    uint64_t v13 = v87;
    if (v109 >= v64) {
      break;
    }
    float v149 = 0.5;
    float v64 = v109;
    if ((int)v87 >= 1)
    {
LABEL_148:
      uint64_t v150 = (const void **)&a1[1];
      uint64_t v151 = v69;
      uint64_t v152 = __dst;
      do
      {
        memcpy(v152, *(v150 - 1), *(int *)v150);
        v152 += *(int *)v150;
        v150 += 4;
        --v151;
      }
      while (v151);
    }
LABEL_150:
    long long v153 = v225;
    *(float *)&long long v153 = *(float *)&v225 * v149;
    long long v227 = v153;
    memcpy(__src, v244, __n);
    long long v66 = v227;
    int v67 = a7[1];
    int v68 = v223;
    float v58 = (uint64_t *)v245;
    int v62 = v45 + v41;
    if (v223 >= v67) {
      goto LABEL_156;
    }
  }
  int v110 = 0;
  while (v110 < a7[2])
  {
    if ((int)v108 < 1) {
      goto LABEL_109;
    }
    if (v108 < 8)
    {
      uint64_t v111 = 0;
LABEL_107:
      uint64_t v116 = v108 - v111;
      float v117 = &v61->f32[v111];
      do
      {
        float *v117 = *v117 * 0.5;
        ++v117;
        --v116;
      }
      while (v116);
      goto LABEL_109;
    }
    uint64_t v112 = v247 & 0xFFFFFFF8;
    float v113 = v61 + 1;
    v114.i64[0] = 0x3F0000003F000000;
    v114.i64[1] = 0x3F0000003F000000;
    do
    {
      float32x4_t v115 = vmulq_f32(*v113, v114);
      v113[-1] = vmulq_f32(v113[-1], v114);
      *float v113 = v115;
      v113 += 2;
      v112 -= 8;
    }
    while (v112);
    uint64_t v111 = v247 & 0xFFFFFFF8;
    if (v111 != v108) {
      goto LABEL_107;
    }
LABEL_109:
    if ((int)v13 >= 1)
    {
      float v118 = (void **)&a1[1];
      uint64_t v119 = v69;
      uint64_t v120 = __dst;
      do
      {
        memcpy(*(v118 - 1), v120, *(int *)v118);
        v120 += *(int *)v118;
        v118 += 4;
        --v119;
      }
      while (v119);
    }
    memcpy(v244, __src, __n);
    if ((int)v41 < 1) {
      goto LABEL_128;
    }
    v121.i32[0] = a7[6];
    v122.i32[0] = a7[7];
    char v123 = v228;
    if (v41 < 8) {
      char v123 = 1;
    }
    if (v123)
    {
      uint64_t v124 = 0;
LABEL_120:
      uint64_t v132 = v41 - v124;
      uint64_t v133 = v124;
      uint64_t v134 = &v244->f32[v124];
      uint64_t v135 = &v61->f32[v133];
      do
      {
        float v136 = *v135++;
        float v137 = v136 + *v134;
        if (v137 <= *(float *)v122.i32) {
          float v138 = v137;
        }
        else {
          float v138 = *(float *)v122.i32;
        }
        if (v137 >= *(float *)v121.i32) {
          float v139 = v138;
        }
        else {
          float v139 = *(float *)v121.i32;
        }
        *v134++ = v139;
        --v132;
      }
      while (v132);
      goto LABEL_128;
    }
    float32x4_t v125 = (float32x4_t)vdupq_lane_s32(v121, 0);
    float32x4_t v126 = (float32x4_t)vdupq_lane_s32(v122, 0);
    uint64_t v127 = v41 & 0xFFFFFFF8;
    uint64_t v128 = v244 + 1;
    uint64_t v129 = v61 + 1;
    do
    {
      float32x4_t v130 = vaddq_f32(v129[-1], v128[-1]);
      float32x4_t v131 = vaddq_f32(*v129, *v128);
      v128[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v125, v130), (int8x16_t)v125, vbslq_s8((int8x16_t)vcgtq_f32(v130, v126), (int8x16_t)v126, (int8x16_t)v130));
      *(int8x16_t *)uint64_t v128 = vbslq_s8((int8x16_t)vcgtq_f32(v125, v131), (int8x16_t)v125, vbslq_s8((int8x16_t)vcgtq_f32(v131, v126), (int8x16_t)v126, (int8x16_t)v131));
      v129 += 2;
      v128 += 2;
      v127 -= 8;
    }
    while (v127);
    uint64_t v124 = v41 & 0xFFFFFFF8;
    if (v231 != v41) {
      goto LABEL_120;
    }
LABEL_128:
    if ((int)v87 >= 1)
    {
      uint64_t v140 = 0;
      uint64_t v141 = a1;
      int v142 = v41;
      do
      {
        if (v141[1].i32[1] != -1)
        {
          ((void (*)(int32x2_t *, uint64_t))v141[3])(v141, (uint64_t)v61->i64 + 4 * v142);
          v142 += v141[2].i32[0];
        }
        ++v140;
        v141 += 4;
      }
      while (v140 < v69);
    }
    ++v110;
    float v59 = (float *)v234;
    v256.__darwin_time_t tv_sec = v234;
    uint64_t v108 = (v45 + v41);
    v256.uint64_t tv_usec = v45;
    *(&v256.tv_usec + 1) = v45 + v41;
    __darwin_suseconds_t v257 = v45;
    int v258 = 0;
    float v143 = linearize((uint64_t)v249, a3);
    if (v239) {
      __darwin_time_t v242 = toc_explicit(3, v242, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 837, (uint64_t)"solve", "%d: retry %d linearize new %f (%f) %d", v232);
    }
    uint64_t v13 = v87;
    if (v143 < v64)
    {
      float v149 = 2.0;
      float v64 = v143;
      if ((int)v87 < 1) {
        goto LABEL_150;
      }
      goto LABEL_148;
    }
  }
  if ((int)v13 >= 1)
  {
    uint64_t v144 = (void **)&a1[1];
    uint64_t v145 = v69;
    uint64_t v146 = __dst;
    do
    {
      memcpy(*(v144 - 1), v146, *(int *)v144);
      v146 += *(int *)v144;
      v144 += 4;
      --v145;
    }
    while (v145);
  }
  long long v147 = v225;
  *(float *)&long long v147 = *(float *)&v147 + *(float *)&v147;
  long long v226 = v147;
  memcpy(v244, __src, __n);
  long long v66 = v226;
  int v68 = v223;
  if (*(float *)&v226 == 0.0 || v223 >= v222)
  {
    float v58 = (uint64_t *)v245;
    int v62 = v45 + v41;
    if (*(float *)&v226 == 0.0) {
      goto LABEL_156;
    }
    int v67 = a7[1];
    if (v223 >= v67) {
      goto LABEL_156;
    }
    goto LABEL_60;
  }
  v256.__darwin_time_t tv_sec = (__darwin_time_t)v59;
  int v62 = v45 + v41;
  v256.uint64_t tv_usec = v45;
  *(&v256.tv_usec + 1) = v45 + v41;
  __darwin_suseconds_t v257 = v45;
  int v258 = 0;
  linearize((uint64_t)v249, a3);
  if (v239) {
    __darwin_time_t v242 = toc_explicit(3, v242, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 856, (uint64_t)"solve", "%d: revert linearize", v232);
  }
  float v58 = (uint64_t *)v245;
  long long v66 = v226;
  int v67 = a7[1];
  if (v223 < v67) {
    goto LABEL_60;
  }
LABEL_156:
  if (v239) {
    toc_explicit(3, v219, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 866, (uint64_t)"solve", "bon solve %d tracks, %d active cams (%d iter)", a4);
  }
  uint64_t v155 = v220;
  if (a9 >= 1)
  {
    if (v62 > 0)
    {
      uint64_t v156 = 0;
      uint64_t v157 = v62 & 0xFFFFFFF8;
      int64x2_t v158 = vdupq_n_s64(4uLL);
      int64x2_t v159 = vdupq_n_s64(8uLL);
      int64x2_t v238 = v159;
      int64x2_t v240 = v158;
      while (1)
      {
        int v161 = &a1[4 * *(int *)(v155 + 4 * v156)];
        int v163 = v161[2].i32[0];
        uint64_t v162 = v161 + 2;
        uint64_t v160 = v163;
        if (v163 >= 1) {
          break;
        }
LABEL_162:
        a10 += 4 * (v160 * v160);
        if (++v156 == a9) {
          goto LABEL_214;
        }
      }
      uint64_t v229 = v156;
      uint64_t v164 = 0;
      uint64_t v165 = 0;
      timeval v166 = (int *)&a1[4 * *(int *)(v155 + 4 * v156) + 1] + 1;
      uint64_t v167 = 4 * v160;
      int v168 = (_OWORD *)(a10 + 16);
      int v169 = a4;
      while (2)
      {
        int v170 = *v166;
        if (v247 >= 8)
        {
          int64x2_t v172 = vdupq_n_s64((v165 + a4 + v170));
          uint64_t v173 = v157;
          int v174 = v248 + 1;
          int64x2_t v175 = (int64x2_t)xmmword_21BB7A720;
          int64x2_t v176 = (int64x2_t)xmmword_21BB7A760;
          do
          {
            v174[-1] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v175, v172), (int32x4_t)vceqq_s64(v176, v172))), (int8x8_t)0x1000100010001)));
            *int v174 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(vaddq_s64(v175, v158), v172), (int32x4_t)vceqq_s64(vaddq_s64(v176, v158), v172))), (int8x8_t)0x1000100010001)));
            int64x2_t v176 = vaddq_s64(v176, v159);
            int64x2_t v175 = vaddq_s64(v175, v159);
            v174 += 2;
            v173 -= 8;
          }
          while (v173);
          uint64_t v171 = v157;
          if (v157 != v247) {
            goto LABEL_171;
          }
        }
        else
        {
          uint64_t v171 = 0;
LABEL_171:
          uint64_t v177 = v247 - v171;
          uint64_t v178 = (v170 + v169) - v171;
          int v179 = &v248->f32[v171];
          do
          {
            if (v178) {
              float v180 = 0.0;
            }
            else {
              float v180 = 1.0;
            }
            *v179++ = v180;
            --v178;
            --v177;
          }
          while (v177);
        }
        cholskyf_solve((uint64_t)v245, (uint64_t)v61, (uint64_t)v248);
        uint64_t v181 = v162->u32[0];
        if ((int)v181 >= 1)
        {
          int v182 = *v166;
          if (v181 < 0x10
            || ((int v183 = v182 + a4, v182 + a4 + (int)v181 - 1 >= v182 + a4)
              ? (BOOL v184 = (unint64_t)(v181 - 1) >> 32 == 0)
              : (BOOL v184 = 0),
                !v184 || (unint64_t)(a10 + v167 * v165 - ((void)v61 + 4 * v183)) < 0x20))
          {
            uint64_t v185 = 0;
            goto LABEL_185;
          }
          uint64_t v185 = v181 & 0x7FFFFFF8;
          uint64_t v189 = v181 & 0xFFFFFFF8;
          int v190 = v168;
          do
          {
            int v191 = (_OWORD *)&v61->f32[v183];
            long long v192 = v191[1];
            *(v190 - 1) = *v191;
            *int v190 = v192;
            v190 += 2;
            v183 += 8;
            v189 -= 8;
          }
          while (v189);
          if (v185 != v181)
          {
LABEL_185:
            uint64_t v186 = v181 - v185;
            int v187 = (_DWORD *)(a10 + 4 * (v185 + v164));
            int v188 = a4 + v182 + v185;
            do
            {
              *v187++ = v61->i32[v188++];
              --v186;
            }
            while (v186);
          }
        }
        ++v165;
        ++v169;
        int v168 = (_OWORD *)((char *)v168 + v167);
        v164 += v160;
        int64x2_t v159 = v238;
        int64x2_t v158 = v240;
        if (v165 >= (int)v181)
        {
          uint64_t v155 = v220;
          uint64_t v156 = v229;
          float v59 = (float *)v234;
          LODWORD(v160) = a1[4 * *(int *)(v220 + 4 * v229) + 2].i32[0];
          goto LABEL_162;
        }
        continue;
      }
    }
    uint64_t v193 = 0;
    while (1)
    {
      int v195 = &a1[4 * *(int *)(v155 + 4 * v193)];
      int v197 = v195[2].i32[0];
      int v196 = v195 + 2;
      uint64_t v194 = v197;
      if (v197 >= 1) {
        break;
      }
LABEL_194:
      a10 += 4 * (v194 * v194);
      if (++v193 == a9) {
        goto LABEL_214;
      }
    }
    uint64_t v198 = 0;
    uint64_t v199 = 0;
    int v200 = (int *)&a1[4 * *(int *)(v155 + 4 * v193) + 1] + 1;
    uint64_t v201 = 4 * v194;
    int v202 = (_OWORD *)(a10 + 16);
    while (2)
    {
      cholskyf_solve((uint64_t)v245, (uint64_t)v61, (uint64_t)v248);
      uint64_t v203 = v196->u32[0];
      if ((int)v203 >= 1)
      {
        int v204 = *v200;
        if (v203 < 0x10
          || ((int v205 = v204 + a4, v204 + a4 + (int)v203 - 1 >= v204 + a4)
            ? (BOOL v206 = (unint64_t)(v203 - 1) >> 32 == 0)
            : (BOOL v206 = 0),
              !v206 || (unint64_t)(a10 + v201 * v199 - ((void)v61 + 4 * v205)) < 0x20))
        {
          uint64_t v207 = 0;
          goto LABEL_207;
        }
        uint64_t v207 = v203 & 0x7FFFFFF8;
        uint64_t v211 = v203 & 0xFFFFFFF8;
        int v212 = v202;
        do
        {
          int v213 = (_OWORD *)&v61->f32[v205];
          long long v214 = v213[1];
          *(v212 - 1) = *v213;
          _OWORD *v212 = v214;
          v212 += 2;
          v205 += 8;
          v211 -= 8;
        }
        while (v211);
        if (v207 != v203)
        {
LABEL_207:
          uint64_t v208 = v203 - v207;
          int v209 = (_DWORD *)(a10 + 4 * (v207 + v198));
          int v210 = a4 + v204 + v207;
          do
          {
            *v209++ = v61->i32[v210++];
            --v208;
          }
          while (v208);
        }
      }
      ++v199;
      int v202 = (_OWORD *)((char *)v202 + v201);
      v198 += v194;
      if (v199 >= (int)v203)
      {
        uint64_t v155 = v220;
        LODWORD(v194) = a1[4 * *(int *)(v220 + 4 * v193) + 2].i32[0];
        goto LABEL_194;
      }
      continue;
    }
  }
LABEL_214:
  free(v245[2]);
  free(*v245);
  free(v245);
  free(__b);
  free(v241);
  free(v248);
  free(v61);
  free(v59);
  float v154 = sqrtf(v64);
  uint64_t v28 = a4;
  if (a4 >= 1)
  {
LABEL_215:
    int v215 = (__int32 *)(a3 + 48);
    int v216 = v244;
    do
    {
      __int32 v217 = v216->i32[0];
      int v216 = (float32x4_t *)((char *)v216 + 4);
      *int v215 = v217;
      v215 += 20;
      --v28;
    }
    while (v28);
  }
LABEL_217:
  free(__dst);
  free(v244);
  free(__src);
  return v154;
}

float linearize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x270FA5388](a1, a2);
  int v9 = v5;
  float v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  float v18 = v4;
  uint64_t v996 = *MEMORY[0x263EF8340];
  float v20 = v19[5];
  float v21 = v19[8];
  float v22 = v19[9];
  v915 = v19;
  uint64_t v24 = *((unsigned int *)v4 + 2);
  uint64_t v23 = *((unsigned int *)v4 + 3);
  uint64_t v943 = v3;
  uint64_t v917 = *(unsigned int *)(v3 + 48);
  uint64_t v918 = v16;
  float v25 = 0.0;
  if (v21 == 0.0) {
    float v26 = 0.0;
  }
  else {
    float v26 = 1.0 / v21;
  }
  *(float *)&v947 = v20;
  if (v20 == 0.0) {
    float v27 = 1.0;
  }
  else {
    float v27 = v20;
  }
  v938 = v13;
  v939 = v4;
  if (v5)
  {
    if (v13 && (int)v917 >= 1)
    {
      bzero(v13, 4 * v917);
      uint64_t v17 = v918;
      float v18 = v939;
    }
    if ((int)v23 >= 1)
    {
      uint64_t v28 = v15;
      if ((int)v24 > 0)
      {
        float v29 = *v939;
        uint64_t v30 = 4 * *((int *)v939 + 4);
        uint64_t v31 = v23;
        do
        {
          bzero(v29, 4 * v24);
          v29 += v30;
          --v31;
        }
        while (v31);
      }
      bzero(v11, 4 * v23);
      uint64_t v13 = v938;
      float v18 = v939;
      uint64_t v17 = v918;
      uint64_t v15 = v28;
    }
  }
  int v941 = v23 - v24;
  int v919 = v9;
  v921 = v11;
  uint64_t v940 = v15;
  if ((int)v917 >= 1)
  {
    uint64_t v32 = 0;
    int v942 = 0;
    *(float *)&long long v6 = 1.0 / *(float *)&v947;
    long long v946 = v6;
    *(float *)&uint64_t v945 = (float)(v22 / v27) * (float)(v22 / v27);
    BOOL v34 = v26 == 0.0 || v13 == 0;
    BOOL v916 = v34;
    int32x4_t v927 = vdupq_lane_s32(*(int32x2_t *)&v6, 0);
    v913 = v984;
    v914 = &v955;
    float v25 = 0.0;
    *(float *)&uint64_t v948 = v26;
    while (1)
    {
      uint64_t v36 = v17 + 80 * v32;
      uint64_t v37 = *(void *)(v36 + 32);
      uint64_t v38 = *(int *)(v36 + 52);
      uint64_t v40 = *(void *)v36;
      uint64_t v39 = *(void *)(v36 + 8);
      uint64_t v41 = (float *)(v39 + 8 * v38);
      uint64_t v42 = *(void *)v943;
      uint64_t v920 = *(unsigned __int16 *)(v37 + 4 * v38);
      uint64_t v43 = v42 + 32 * v920;
      uint64_t v44 = *(float **)v43;
      BOOL v45 = *(_DWORD *)(v43 + 16) != 0;
      v933 = (float32x4_t *)(4 * v32);
      if (v40 >= 1)
      {
        uint64_t v46 = 0;
        uint64_t v47 = *(void *)(v36 + 24);
        float v48 = v41 + 1;
        v928 = (float32x2_t *)(v43 + 12);
        while (1)
        {
          int v49 = *(_DWORD *)(v37 + 4 * ((int)v46 % (int)v47));
          uint64_t v50 = (unsigned __int16)v49;
          uint64_t v51 = v42 + 32 * (unsigned __int16)v49;
          int v52 = *(_DWORD *)(v51 + 16);
          BOOL v53 = v52 != 0;
          if (v46 == v38) {
            goto LABEL_32;
          }
          int32x2_t v54 = (float *)(v39 + 8 * v46);
          uint64_t v55 = *(float **)v51;
          *(float *)&uint64_t v951 = v25;
          if (v46 >= (int)v47) {
            break;
          }
          float v56 = *(float *)(*(void *)(v943 + 32) + 4 * v32);
          float v57 = *v41;
          LODWORD(v949) = *v48;
          float v58 = v44[1];
          float v59 = *v55;
          float v60 = v55[1];
          float v62 = v44[2];
          float v61 = v44[3];
          float v64 = v55[2];
          float v63 = v55[3];
          float v66 = v44[6];
          float v65 = v44[7];
          float v68 = v55[6];
          float v67 = v55[7];
          float v69 = (float)((float)((float)(*v55 * *v44) + 0.0) + (float)(v63 * v61)) + (float)(v68 * v66);
          float v70 = v44[4];
          float v71 = v44[5];
          float v72 = (float)((float)((float)(*v55 * v58) + 0.0) + (float)(v63 * v70)) + (float)(v68 * v65);
          float v73 = v44[8];
          float v74 = (float)((float)((float)(*v55 * v62) + 0.0) + (float)(v63 * v71)) + (float)(v68 * v73);
          float v76 = v55[4];
          float v75 = v55[5];
          float v77 = (float)((float)((float)(v60 * *v44) + 0.0) + (float)(v76 * v61)) + (float)(v67 * v66);
          float v78 = (float)((float)((float)(v60 * v58) + 0.0) + (float)(v76 * v70)) + (float)(v67 * v65);
          float v79 = (float)((float)((float)(v60 * v62) + 0.0) + (float)(v76 * v71)) + (float)(v67 * v73);
          float v80 = v55[8];
          float v81 = (float)((float)((float)(v64 * *v44) + 0.0) + (float)(v75 * v61)) + (float)(v80 * v66);
          float v82 = (float)((float)((float)(v64 * v58) + 0.0) + (float)(v75 * v70)) + (float)(v80 * v65);
          float v83 = v44[9] - v55[9];
          float v84 = v44[11];
          float v85 = v55[11];
          float v86 = v44[10] - v55[10];
          *(float *)&v935 = v62;
          float v87 = (float)((float)((float)(v64 * v62) + 0.0) + (float)(v75 * v71)) + (float)(v80 * v73);
          float v88 = 1.0 / v56;
          float v89 = v84 - v85;
          *(float *)&uint64_t v944 = v57;
          float v90 = v88 * v57;
          float v91 = (float)((float)((float)(v59 * v83) + 0.0) + (float)(v63 * v86)) + (float)(v68 * v89);
          float v92 = (float)((float)((float)(v60 * v83) + 0.0) + (float)(v76 * v86)) + (float)(v67 * v89);
          float v93 = (float)((float)((float)(v64 * v83) + 0.0) + (float)(v75 * v86)) + (float)(v80 * v89);
          float v94 = v88 * *(float *)&v949;
          *(float *)&v936 = v72;
          *(float *)&uint64_t v937 = v69;
          float v95 = (float)((float)((float)((float)(v88 * v57) * v72) + (float)(v69 * v88))
                      + (float)(v74 * (float)(v88 * *(float *)&v949)))
              + v91;
          float v96 = (float)((float)((float)((float)(v88 * v57) * v78) + (float)(v77 * v88))
                      + (float)(v79 * (float)(v88 * *(float *)&v949)))
              + v92;
          float v97 = (float)((float)((float)((float)(v88 * v57) * v82) + (float)(v81 * v88))
                      + (float)(v87 * (float)(v88 * *(float *)&v949)))
              + v93;
          float v98 = 1.0 / v95;
          float v99 = *v54 - (float)(v96 * (float)(1.0 / v95));
          float v100 = *(float *)(v39 + 8 * v46 + 4) - (float)(v97 * (float)(1.0 / v95));
          if (!v9)
          {
            uint64_t v13 = v938;
            float v157 = *(float *)&v951;
            float v26 = *(float *)&v948;
            float v158 = *(float *)&v946;
            float v159 = *(float *)&v945;
            if (*(float *)&v947 == 0.0) {
              goto LABEL_64;
            }
            goto LABEL_58;
          }
          *(float *)&uint64_t v934 = v95;
          *(float *)&uint64_t v950 = v100;
          *(float *)&v931 = v96;
          *(float *)&uint64_t v932 = v97;
          *(float *)&v930 = -v96;
          float v101 = (float)(v98 * v98) * (float)-v96;
          *(float *)&v929 = -v97;
          float v102 = (float)(v98 * v98) * (float)-v97;
          uint64_t v13 = v938;
          if (v938)
          {
            float v103 = -(float)(v88 * v88);
            float v104 = v103
                 * (float)((float)(*(float *)&v937 + (float)(*(float *)&v936 * *(float *)&v944))
                         + (float)(v74 * *(float *)&v949));
            v989.f32[0] = (float)((float)(v103
                                        * (float)((float)(v77 + (float)(v78 * *(float *)&v944))
                                                + (float)(v79 * *(float *)&v949)))
                                * v98)
                        + (float)(v101 * v104);
            v989.f32[1] = (float)((float)(v103
                                        * (float)((float)(v81 + (float)(v82 * *(float *)&v944))
                                                + (float)(v87 * *(float *)&v949)))
                                * v98)
                        + (float)(v102 * v104);
          }
          if (v45)
          {
            float v105 = v44[1];
            float v106 = (float)(v88 * v105) - (float)(*v44 * v90);
            float v107 = (float)(v88 * v70) - (float)(v61 * v90);
            float v108 = (float)(v88 * v65) - (float)(v66 * v90);
            float v109 = (float)(*v44 * v94) - (float)(v88 * *(float *)&v935);
            float v110 = (float)(v61 * v94) - (float)(v88 * v71);
            float v111 = (float)(v66 * v94) - (float)(v88 * v73);
            float v112 = (float)(v90 * *(float *)&v935) - (float)(v105 * v94);
            float v113 = (float)(v90 * v71) - (float)(v70 * v94);
            float v114 = (float)(v90 * v73) - (float)(v65 * v94);
            float v115 = v55[1];
            float v116 = (float)(*v55 + 0.0) + (float)(v63 * 0.0);
            float v117 = (float)(v115 + 0.0) + (float)(v76 * 0.0);
            float v118 = v99;
            float v119 = (float)(*v55 * 0.0) + 0.0;
            float v120 = (float)(v115 * 0.0) + 0.0;
            float v121 = (float)((float)(*v55 * v106) + 0.0) + (float)(v63 * v107);
            float v122 = (float)((float)(v115 * v106) + 0.0) + (float)(v76 * v107);
            float v123 = (float)((float)(v64 * v106) + 0.0) + (float)(v75 * v107);
            float v124 = (float)((float)(*v55 * v109) + 0.0) + (float)(v63 * v110);
            float v125 = (float)((float)(v115 * v109) + 0.0) + (float)(v76 * v110);
            float v126 = (float)((float)(v64 * v109) + 0.0) + (float)(v75 * v110);
            float v127 = v63 + v119;
            float v128 = v119 + (float)(v63 * 0.0);
            float v129 = (float)((float)(*v55 * v112) + 0.0) + (float)(v63 * v113);
            float v130 = v76 + v120;
            float v131 = v120 + (float)(v76 * 0.0);
            float v132 = (float)((float)(v115 * v112) + 0.0) + (float)(v76 * v113);
            float v133 = (float)(v64 + 0.0) + (float)(v75 * 0.0);
            float v134 = (float)(v64 * v112) + 0.0;
            float v135 = (float)(v64 * 0.0) + 0.0;
            float v136 = v134 + (float)(v75 * v113);
            float v137 = v135 + v75;
            float v138 = v135 + (float)(v75 * 0.0);
            float v139 = v121 + (float)(v68 * v108);
            float v140 = v122 + (float)(v67 * v108);
            float v141 = v123 + (float)(v80 * v108);
            float v142 = v124 + (float)(v68 * v111);
            float v143 = v125 + (float)(v67 * v111);
            float v144 = v126 + (float)(v80 * v111);
            float v145 = v116 + (float)(v68 * 0.0);
            float v146 = v127 + (float)(v68 * 0.0);
            float v147 = v68 + v128;
            float v99 = v118;
            float v148 = v129 + (float)(v68 * v114);
            v990.f32[0] = (float)(v98 * (float)(v117 + (float)(v67 * 0.0))) + (float)(v101 * v145);
            v990.f32[1] = (float)((float)(v133 + (float)(v80 * 0.0)) * v98) + (float)(v102 * v145);
            v990.f32[2] = (float)(v98 * (float)(v130 + (float)(v67 * 0.0))) + (float)(v101 * v146);
            v990.f32[3] = (float)((float)(v137 + (float)(v80 * 0.0)) * v98) + (float)(v102 * v146);
            v991.f32[0] = (float)(v98 * (float)(v67 + v131)) + (float)(v101 * v147);
            v991.f32[1] = (float)((float)(v138 + v80) * v98) + (float)(v102 * v147);
            v991.f32[2] = (float)(v98 * v140) + (float)(v101 * v139);
            v991.f32[3] = (float)(v98 * v141) + (float)(v102 * v139);
            v992.f32[0] = (float)(v98 * v143) + (float)(v101 * v142);
            v992.f32[1] = (float)(v98 * v144) + (float)(v102 * v142);
            v992.f32[2] = (float)(v98 * (float)(v132 + (float)(v67 * v114))) + (float)(v101 * v148);
            v992.f32[3] = (float)(v98 * (float)(v136 + (float)(v80 * v114))) + (float)(v102 * v148);
          }
          if (v52)
          {
            float v149 = v55[3];
            float v150 = v55[4];
            float v151 = v55[5];
            float v152 = v55[6];
            float v153 = v55[7];
            float v154 = v55[8];
            float32_t v155 = (float)-(float)(v55[2] * v98) - (float)(v102 * *v55);
            v993.f32[0] = (float)-(float)(v55[1] * v98) - (float)(v101 * *v55);
            v993.f32[1] = v155;
            v993.f32[2] = (float)-(float)(v150 * v98) - (float)(v101 * v149);
            v993.f32[3] = (float)-(float)(v151 * v98) - (float)(v102 * v149);
            v994.f32[0] = (float)-(float)(v153 * v98) - (float)(v101 * v152);
            v994.f32[1] = (float)-(float)(v154 * v98) - (float)(v102 * v152);
            v994.f32[2] = (float)(v101 * *(float *)&v931) - (float)(*(float *)&v934 * v98);
            v994.f32[3] = (float)(v98 * 0.0) + (float)(v102 * *(float *)&v931);
            v995.f32[0] = (float)(v98 * 0.0) + (float)(v101 * *(float *)&v929);
            v995.f32[1] = (float)(*(float *)&v934 * v98) + (float)(v102 * *(float *)&v929);
            v995.f32[2] = (float)(*(float *)&v932 * v98) + (float)(v101 * 0.0);
            float v156 = (float)(v98 * *(float *)&v930) + (float)(v102 * 0.0);
            float v157 = *(float *)&v951;
            float v26 = *(float *)&v948;
            float v158 = *(float *)&v946;
            float v159 = *(float *)&v945;
LABEL_51:
            v995.f32[3] = v156;
            BOOL v53 = 1;
            float v100 = *(float *)&v950;
            if (*(float *)&v947 == 0.0) {
              goto LABEL_64;
            }
            goto LABEL_58;
          }
          BOOL v53 = 0;
          float v157 = *(float *)&v951;
          float v26 = *(float *)&v948;
          float v158 = *(float *)&v946;
          float v159 = *(float *)&v945;
          float v100 = *(float *)&v950;
          if (*(float *)&v947 == 0.0) {
            goto LABEL_64;
          }
LABEL_58:
          if (v13) {
            float32x2_t v989 = vmul_f32(*(float32x2_t *)v927.i8, v989);
          }
          if (v45)
          {
            float32x4_t v990 = vmulq_n_f32(v990, v158);
            float32x4_t v991 = vmulq_n_f32(v991, v158);
            float32x4_t v992 = vmulq_n_f32(v992, v158);
          }
          float v99 = v158 * v99;
          float v100 = v158 * v100;
          if (v53)
          {
            float32x4_t v993 = vmulq_n_f32(v993, v158);
            float32x4_t v994 = vmulq_n_f32(v994, v158);
            float32x4_t v995 = vmulq_n_f32(v995, v158);
          }
LABEL_64:
          float v355 = (float)(v100 * v100) + (float)(v99 * v99);
          v942 += 2;
          if (v355 > v159)
          {
            BOOL v45 = 0;
            float v25 = v159 + v157;
            goto LABEL_32;
          }
          float v25 = v157 + v355;
          if (!v9) {
            goto LABEL_32;
          }
          if (v13)
          {
            float v357 = v989.f32[1];
            float v356 = v989.f32[0];
            *(float *)((char *)v933->f32 + (void)v13) = (float)((float)((float)(v989.f32[0] * v989.f32[0]) + 0.0)
                                                                + (float)(v989.f32[1] * v989.f32[1]))
                                                        + *(float *)((char *)v933->f32 + (void)v13);
            if (v45)
            {
              int v358 = *((_DWORD *)v18 + 4);
              int v359 = v358 * v32;
              unint64_t v360 = (float *)&(*v18)[4 * v928->i32[0] + 4 * v358 * (int)v32];
              float v361 = v360[1];
              *unint64_t v360 = (float)((float)((float)(v990.f32[0] * v356) + 0.0) + (float)(v990.f32[1] * v357)) + *v360;
              v360[1] = (float)((float)((float)(v990.f32[2] * v989.f32[0]) + 0.0) + (float)(v990.f32[3] * v989.f32[1]))
                      + v361;
              float v362 = v360[3];
              v360[2] = (float)((float)((float)(v991.f32[0] * v989.f32[0]) + 0.0) + (float)(v991.f32[1] * v989.f32[1]))
                      + v360[2];
              v360[3] = (float)((float)((float)(v991.f32[2] * v989.f32[0]) + 0.0) + (float)(v991.f32[3] * v989.f32[1]))
                      + v362;
              float v363 = v360[5];
              v360[4] = (float)((float)((float)(v992.f32[0] * v989.f32[0]) + 0.0) + (float)(v992.f32[1] * v989.f32[1]))
                      + v360[4];
              v360[5] = (float)((float)((float)(v992.f32[2] * v989.f32[0]) + 0.0) + (float)(v992.f32[3] * v989.f32[1]))
                      + v363;
              if (!v53)
              {
                BOOL v364 = 0;
                goto LABEL_77;
              }
              float v357 = v989.f32[1];
              float v356 = v989.f32[0];
            }
            else
            {
              if (!v53)
              {
                int v381 = 0;
                BOOL v45 = 0;
                goto LABEL_103;
              }
              int v358 = *((_DWORD *)v18 + 4);
              int v359 = v358 * v32;
            }
            unint64_t v365 = (float *)&(*v18)[4 * *(_DWORD *)(v42 + 32 * v50 + 12) + 4 * v359];
            float v366 = v365[1];
            *unint64_t v365 = (float)((float)((float)(v993.f32[0] * v356) + 0.0) + (float)(v993.f32[1] * v357)) + *v365;
            v365[1] = (float)((float)((float)(v993.f32[2] * v989.f32[0]) + 0.0) + (float)(v993.f32[3] * v989.f32[1]))
                    + v366;
            float v367 = v365[3];
            v365[2] = (float)((float)((float)(v994.f32[0] * v989.f32[0]) + 0.0) + (float)(v994.f32[1] * v989.f32[1]))
                    + v365[2];
            v365[3] = (float)((float)((float)(v994.f32[2] * v989.f32[0]) + 0.0) + (float)(v994.f32[3] * v989.f32[1]))
                    + v367;
            float v368 = v365[5];
            v365[4] = (float)((float)((float)(v995.f32[0] * v989.f32[0]) + 0.0) + (float)(v995.f32[1] * v989.f32[1]))
                    + v365[4];
            v365[5] = (float)((float)((float)(v995.f32[2] * v989.f32[0]) + 0.0) + (float)(v995.f32[3] * v989.f32[1]))
                    + v368;
            if (!v45) {
              goto LABEL_85;
            }
            BOOL v364 = 1;
          }
          else
          {
            BOOL v364 = v53;
            if (!v45)
            {
              if (!v53)
              {
                BOOL v45 = 0;
                goto LABEL_32;
              }
              int v358 = *((_DWORD *)v18 + 4);
LABEL_85:
              BOOL v45 = 0;
              int v380 = 0;
              uint64_t v370 = v358;
LABEL_86:
              uint64_t v382 = 0;
              uint64_t v383 = (uint64_t)*v18;
              __int32 v384 = *(_DWORD *)(v42 + 32 * v50 + 12);
              int v385 = (v384 + v941) * v358;
              long long v386 = (float *)&(*v18)[4 * v385 + 12 + 4 * v384];
              uint64_t v387 = 4 * v370;
              do
              {
                float v388 = *(v386 - 2);
                float v389 = *(v386 - 3) + (float)(v993.f32[0] * v993.f32[v382]);
                *(v386 - 3) = v389;
                *(v386 - 3) = v389 + (float)(v993.f32[1] * v993.f32[v382 + 1]);
                float v390 = v388 + (float)(v993.f32[2] * v993.f32[v382]);
                *(v386 - 2) = v390;
                *(v386 - 2) = v390 + (float)(v993.f32[3] * v993.f32[v382 + 1]);
                float v391 = *(v386 - 1) + (float)(v994.f32[0] * v993.f32[v382]);
                *(v386 - 1) = v391;
                *(v386 - 1) = v391 + (float)(v994.f32[1] * v993.f32[v382 + 1]);
                float v392 = v386[1];
                float v393 = *v386 + (float)(v994.f32[2] * v993.f32[v382]);
                *long long v386 = v393;
                *long long v386 = v393 + (float)(v994.f32[3] * v993.f32[v382 + 1]);
                float v394 = v392 + (float)(v995.f32[0] * v993.f32[v382]);
                v386[1] = v394;
                v386[1] = v394 + (float)(v995.f32[1] * v993.f32[v382 + 1]);
                float v395 = v386[2] + (float)(v995.f32[2] * v993.f32[v382]);
                v386[2] = v395;
                v386[2] = v395 + (float)(v995.f32[3] * v993.f32[v382 + 1]);
                v382 += 2;
                long long v386 = (float *)((char *)v386 + v387);
              }
              while (v382 != 12);
              int v9 = v919;
              if (v380)
              {
                __int32 v396 = v928->i32[0];
                if (v928->i32[0] <= v384)
                {
                  uint64_t v407 = 0;
                  float v408 = (float *)(v383 + 4 * (v384 + (v396 + v941) * v358) + 12);
                  float v11 = v921;
                  do
                  {
                    float v409 = *(v408 - 2);
                    float v410 = *(v408 - 3) + (float)(v993.f32[0] * v990.f32[v407]);
                    *(v408 - 3) = v410;
                    *(v408 - 3) = v410 + (float)(v993.f32[1] * v990.f32[v407 + 1]);
                    float v411 = v409 + (float)(v993.f32[2] * v990.f32[v407]);
                    *(v408 - 2) = v411;
                    *(v408 - 2) = v411 + (float)(v993.f32[3] * v990.f32[v407 + 1]);
                    float v412 = *(v408 - 1) + (float)(v994.f32[0] * v990.f32[v407]);
                    *(v408 - 1) = v412;
                    *(v408 - 1) = v412 + (float)(v994.f32[1] * v990.f32[v407 + 1]);
                    float v413 = v408[1];
                    float v414 = *v408 + (float)(v994.f32[2] * v990.f32[v407]);
                    *float v408 = v414;
                    *float v408 = v414 + (float)(v994.f32[3] * v990.f32[v407 + 1]);
                    float v415 = v413 + (float)(v995.f32[0] * v990.f32[v407]);
                    v408[1] = v415;
                    v408[1] = v415 + (float)(v995.f32[1] * v990.f32[v407 + 1]);
                    float v416 = v408[2] + (float)(v995.f32[2] * v990.f32[v407]);
                    v408[2] = v416;
                    v408[2] = v416 + (float)(v995.f32[3] * v990.f32[v407 + 1]);
                    v407 += 2;
                    float v408 = (float *)((char *)v408 + v387);
                  }
                  while (v407 != 12);
                  int v381 = 1;
                  BOOL v53 = 1;
                  uint64_t v13 = v938;
                  float v18 = v939;
                  if (!v938) {
                    goto LABEL_104;
                  }
                }
                else
                {
                  uint64_t v397 = 0;
                  unint64_t v398 = (float *)(v383 + 4 * (v396 + v385) + 12);
                  do
                  {
                    float v399 = *(v398 - 2);
                    float v400 = *(v398 - 3) + (float)(v990.f32[0] * v993.f32[v397]);
                    *(v398 - 3) = v400;
                    *(v398 - 3) = v400 + (float)(v990.f32[1] * v993.f32[v397 + 1]);
                    float v401 = v399 + (float)(v990.f32[2] * v993.f32[v397]);
                    *(v398 - 2) = v401;
                    *(v398 - 2) = v401 + (float)(v990.f32[3] * v993.f32[v397 + 1]);
                    float v402 = *(v398 - 1) + (float)(v991.f32[0] * v993.f32[v397]);
                    *(v398 - 1) = v402;
                    *(v398 - 1) = v402 + (float)(v991.f32[1] * v993.f32[v397 + 1]);
                    float v403 = v398[1];
                    float v404 = *v398 + (float)(v991.f32[2] * v993.f32[v397]);
                    *unint64_t v398 = v404;
                    *unint64_t v398 = v404 + (float)(v991.f32[3] * v993.f32[v397 + 1]);
                    float v405 = v403 + (float)(v992.f32[0] * v993.f32[v397]);
                    v398[1] = v405;
                    v398[1] = v405 + (float)(v992.f32[1] * v993.f32[v397 + 1]);
                    float v406 = v398[2] + (float)(v992.f32[2] * v993.f32[v397]);
                    v398[2] = v406;
                    v398[2] = v406 + (float)(v992.f32[3] * v993.f32[v397 + 1]);
                    v397 += 2;
                    unint64_t v398 = (float *)((char *)v398 + v387);
                  }
                  while (v397 != 12);
                  int v381 = 1;
                  BOOL v53 = 1;
                  float v11 = v921;
                  uint64_t v13 = v938;
                  float v18 = v939;
                  if (!v938) {
                    goto LABEL_104;
                  }
                }
              }
              else
              {
                uint64_t v13 = v938;
                if (!v938)
                {
                  float v11 = v921;
                  float v18 = v939;
LABEL_107:
                  float v421 = (float *)&v11[4 * *(_DWORD *)(*(void *)v943 + 32 * v50 + 12) + 4 * v941];
                  float v422 = v993.f32[3];
                  float v423 = v421[1] + (float)(v993.f32[2] * v99);
                  float v424 = v994.f32[1];
                  float v425 = v421[2] + (float)(v994.f32[0] * v99);
                  float v426 = v994.f32[3];
                  float v427 = v421[3] + (float)(v994.f32[2] * v99);
                  float v428 = v995.f32[1];
                  float v429 = v421[4] + (float)(v995.f32[0] * v99);
                  float v430 = v995.f32[3];
                  float v431 = v421[5] + (float)(v995.f32[2] * v99);
                  *float v421 = (float)(*v421 + (float)(v993.f32[0] * v99)) + (float)(v993.f32[1] * v100);
                  v421[1] = v423 + (float)(v422 * v100);
                  v421[2] = v425 + (float)(v424 * v100);
                  v421[3] = v427 + (float)(v426 * v100);
                  v421[4] = v429 + (float)(v428 * v100);
                  v421[5] = v431 + (float)(v430 * v100);
                  goto LABEL_32;
                }
                BOOL v53 = 0;
                int v381 = 1;
                float v11 = v921;
                float v18 = v939;
              }
              goto LABEL_103;
            }
            int v358 = *((_DWORD *)v18 + 4);
          }
LABEL_77:
          uint64_t v369 = 0;
          uint64_t v370 = v358;
          uint64_t v371 = (float *)&(*v18)[4 * v928->i32[0] + 12 + 4 * (v928->i32[0] + v941) * v358];
          do
          {
            float v372 = *(v371 - 2);
            float v373 = *(v371 - 3) + (float)(v990.f32[0] * v990.f32[v369]);
            *(v371 - 3) = v373;
            *(v371 - 3) = v373 + (float)(v990.f32[1] * v990.f32[v369 + 1]);
            float v374 = v372 + (float)(v990.f32[2] * v990.f32[v369]);
            *(v371 - 2) = v374;
            *(v371 - 2) = v374 + (float)(v990.f32[3] * v990.f32[v369 + 1]);
            float v375 = *(v371 - 1) + (float)(v991.f32[0] * v990.f32[v369]);
            *(v371 - 1) = v375;
            *(v371 - 1) = v375 + (float)(v991.f32[1] * v990.f32[v369 + 1]);
            float v376 = v371[1];
            float v377 = *v371 + (float)(v991.f32[2] * v990.f32[v369]);
            *uint64_t v371 = v377;
            *uint64_t v371 = v377 + (float)(v991.f32[3] * v990.f32[v369 + 1]);
            float v378 = v376 + (float)(v992.f32[0] * v990.f32[v369]);
            v371[1] = v378;
            v371[1] = v378 + (float)(v992.f32[1] * v990.f32[v369 + 1]);
            float v379 = v371[2] + (float)(v992.f32[2] * v990.f32[v369]);
            v371[2] = v379;
            v371[2] = v379 + (float)(v992.f32[3] * v990.f32[v369 + 1]);
            v369 += 2;
            v371 += v358;
          }
          while (v369 != 12);
          if (v364)
          {
            int v380 = 1;
            goto LABEL_86;
          }
          int v381 = 0;
          uint64_t v13 = v938;
          if (!v938)
          {
            float v11 = v921;
LABEL_104:
            BOOL v417 = (float *)&v11[4 * *(_DWORD *)(*(void *)v943 + 32 * v920 + 12) + 4 * v941];
            float v418 = (float)(v417[1] + (float)(v990.f32[2] * v99)) + (float)(v990.f32[3] * v100);
            *BOOL v417 = (float)(*v417 + (float)(v990.f32[0] * v99)) + (float)(v990.f32[1] * v100);
            v417[1] = v418;
            float v419 = (float)(v417[3] + (float)(v991.f32[2] * v99)) + (float)(v991.f32[3] * v100);
            v417[2] = (float)(v417[2] + (float)(v991.f32[0] * v99)) + (float)(v991.f32[1] * v100);
            v417[3] = v419;
            float v420 = (float)(v417[5] + (float)(v992.f32[2] * v99)) + (float)(v992.f32[3] * v100);
            v417[4] = (float)(v417[4] + (float)(v992.f32[0] * v99)) + (float)(v992.f32[1] * v100);
            v417[5] = v420;
            if (v381) {
              goto LABEL_107;
            }
            goto LABEL_32;
          }
          BOOL v53 = 1;
          float v11 = v921;
LABEL_103:
          *(float *)((char *)v933->f32 + (void)v11) = (float)(*(float *)((char *)v933->f32 + (void)v11)
                                                              + (float)(v989.f32[0] * v99))
                                                      + (float)(v989.f32[1] * v100);
          if (v53) {
            goto LABEL_104;
          }
          if (v381) {
            goto LABEL_107;
          }
LABEL_32:
          if (++v46 == v40) {
            goto LABEL_109;
          }
        }
        *(float *)&uint64_t v950 = *v54;
        uint64_t v160 = *(float **)(v42 + 32 * (v49 >> 16));
        float v161 = *(float *)v48;
        float v162 = v44[1];
        float v163 = *v55;
        float v164 = v55[1];
        float v166 = v44[2];
        float v165 = v44[3];
        float v168 = v55[2];
        float v167 = v55[3];
        float v169 = v44[6];
        float v170 = v44[7];
        float v171 = v55[6];
        float v172 = v55[7];
        float v173 = (float)((float)((float)(*v55 * *v44) + 0.0) + (float)(v167 * v165)) + (float)(v171 * v169);
        float v174 = v44[4];
        float v175 = v44[5];
        float v176 = (float)((float)((float)(*v55 * v162) + 0.0) + (float)(v167 * v174)) + (float)(v171 * v170);
        float v177 = v44[8];
        float v178 = v44[9];
        float v179 = (float)((float)((float)(*v55 * v166) + 0.0) + (float)(v167 * v175)) + (float)(v171 * v177);
        float v181 = v55[4];
        float v180 = v55[5];
        float v182 = (float)((float)((float)(v164 * *v44) + 0.0) + (float)(v181 * v165)) + (float)(v172 * v169);
        float v183 = (float)((float)((float)(v164 * v162) + 0.0) + (float)(v181 * v174)) + (float)(v172 * v170);
        float v184 = (float)((float)((float)(v164 * v166) + 0.0) + (float)(v181 * v175)) + (float)(v172 * v177);
        float v185 = v55[8];
        float v186 = v55[9];
        float v187 = (float)((float)((float)(v168 * *v44) + 0.0) + (float)(v180 * v165)) + (float)(v185 * v169);
        float v188 = (float)((float)((float)(v168 * v162) + 0.0) + (float)(v180 * v174)) + (float)(v185 * v170);
        float v189 = (float)((float)((float)(v168 * v166) + 0.0) + (float)(v180 * v175)) + (float)(v185 * v177);
        float v190 = 1.0 / *(float *)(*(void *)(v943 + 32) + 4 * v32);
        *(float *)&v935 = *v41;
        float v191 = v190 * *(float *)&v935;
        float v192 = v44[10] - v55[10];
        float v193 = v44[11] - v55[11];
        float v194 = (float)((float)((float)(v163 * (float)(v178 - v186)) + 0.0) + (float)(v167 * v192))
             + (float)(v171 * v193);
        float v195 = (float)((float)((float)(v164 * (float)(v178 - v186)) + 0.0) + (float)(v181 * v192))
             + (float)(v172 * v193);
        float v196 = (float)((float)((float)(v168 * (float)(v178 - v186)) + 0.0) + (float)(v180 * v192))
             + (float)(v185 * v193);
        *(float *)&uint64_t v934 = v161;
        float v197 = v190 * v161;
        float v198 = (float)((float)((float)((float)(v190 * *(float *)&v935) * v183) + (float)(v182 * v190))
                     + (float)(v184 * (float)(v190 * v161)))
             + v195;
        float v199 = (float)((float)((float)((float)(v190 * *(float *)&v935) * v188) + (float)(v187 * v190))
                     + (float)(v189 * (float)(v190 * v161)))
             + v196;
        float v201 = v160[8];
        float v200 = v160[9];
        *(float *)&uint64_t v937 = (float)((float)((float)((float)(v190 * *(float *)&v935) * v176) + (float)(v173 * v190))
                                + (float)(v179 * (float)(v190 * v161)))
                        + v194;
        float v202 = *(float *)&v937 - v200;
        float v203 = v160[10];
        float v204 = v160[11];
        *(float *)&uint64_t v944 = v198;
        float v205 = v198 - v203;
        float v207 = v160[2];
        float v206 = v160[3];
        float v208 = v206 * (float)(v198 - v203);
        float v209 = *v160;
        float v210 = v160[1];
        float v211 = v208 + (float)(*v160 * v202);
        float v213 = v160[4];
        float v212 = v160[5];
        float v214 = (float)(v205 * v213) + (float)(v210 * v202);
        float v215 = (float)(v205 * v212) + (float)(v207 * v202);
        *(float *)&v936 = v199;
        float v216 = v199 - v204;
        float v217 = v160[6];
        float v218 = v160[7];
        float v219 = 1.0 / (float)(v211 + (float)(v217 * v216));
        *(float *)&uint64_t v949 = *(float *)&v950 - (float)((float)(v214 + (float)(v218 * v216)) * v219);
        *(float *)&uint64_t v950 = *(float *)(v39 + 8 * v46 + 4) - (float)((float)(v215 + (float)(v201 * v216)) * v219);
        if ((int)v46 % (int)v47 == v38)
        {
          BOOL v45 = 0;
          BOOL v53 = 0;
        }
        uint64_t v13 = v938;
        if (!v9) {
          goto LABEL_53;
        }
        float v220 = (float)(v219 * v219) * (float)-(float)(v214 + (float)(v218 * v216));
        float v221 = (float)(v219 * v219) * (float)-(float)(v215 + (float)(v201 * v216));
        if (v938)
        {
          float v222 = (float)((float)((float)(v207 * v179) + 0.0) + (float)(v212 * v184)) + (float)(v201 * v189);
          *(float *)&uint64_t v932 = (float)((float)((float)(v207 * v176) + 0.0) + (float)(v212 * v183)) + (float)(v201 * v188);
          float v223 = (float)((float)((float)(v207 * v173) + 0.0) + (float)(v212 * v182)) + (float)(v201 * v187);
          float v224 = (float)((float)((float)(v210 * v179) + 0.0) + (float)(v213 * v184)) + (float)(v218 * v189);
          float v225 = (float)((float)((float)(v210 * v176) + 0.0) + (float)(v213 * v183)) + (float)(v218 * v188);
          float v226 = (float)((float)((float)(v210 * v173) + 0.0) + (float)(v213 * v182)) + (float)(v218 * v187);
          float v227 = (float)((float)((float)(v209 * v179) + 0.0) + (float)(v206 * v184)) + (float)(v217 * v189);
          float v228 = (float)((float)(v209 * v176) + 0.0) + (float)(v206 * v183);
          float v229 = (float)((float)((float)(v209 * v173) + 0.0) + (float)(v206 * v182)) + (float)(v217 * v187);
          float v230 = -(float)(v190 * v190);
          float v231 = v230
               * (float)((float)(v229 + (float)((float)(v228 + (float)(v217 * v188)) * *(float *)&v935))
                       + (float)(v227 * *(float *)&v934));
          v989.f32[0] = (float)(v219
                              * (float)(v230
                                      * (float)((float)(v226 + (float)(v225 * *(float *)&v935))
                                              + (float)(v224 * *(float *)&v934))))
                      + (float)(v220 * v231);
          v989.f32[1] = (float)(v219
                              * (float)(v230
                                      * (float)((float)(v223 + (float)(*(float *)&v932 * *(float *)&v935))
                                              + (float)(v222 * *(float *)&v934))))
                      + (float)(v221 * v231);
        }
        if (v45)
        {
          float v232 = *v44;
          float v233 = v44[1];
          float v234 = (float)(v190 * v233) - (float)(*v44 * v191);
          float v235 = v44[4];
          float v236 = v44[5];
          float v238 = v44[2];
          float v237 = v44[3];
          float v239 = (float)(v190 * v235) - (float)(v237 * v191);
          float v240 = v44[6];
          float v241 = v44[7];
          *(float *)&v935 = (float)(v190 * v241) - (float)(v240 * v191);
          float v242 = (float)(v232 * v197) - (float)(v190 * v238);
          *(float *)&uint64_t v932 = v221;
          float v243 = (float)(v237 * v197) - (float)(v190 * v236);
          float v244 = v44[8];
          *(float *)&uint64_t v934 = (float)(v240 * v197) - (float)(v190 * v244);
          float v245 = (float)(v191 * v238) - (float)(v233 * v197);
          float v246 = (float)(v191 * v236) - (float)(v235 * v197);
          float v247 = (float)(v191 * v244) - (float)(v241 * v197);
          float v248 = *v55;
          float v249 = v55[1];
          *(float *)&v931 = v220;
          float v250 = v55[3];
          float v251 = v55[4];
          float v252 = (float)(v248 + 0.0) + (float)(v250 * 0.0);
          *(float *)&v925 = (float)(v249 + 0.0) + (float)(v251 * 0.0);
          float v253 = (float)(v248 * 0.0) + 0.0;
          float v254 = (float)(v249 * 0.0) + 0.0;
          float v255 = v253 + v250;
          float v256 = v254 + v251;
          float v257 = v253 + (float)(v250 * 0.0);
          float v258 = v254 + (float)(v251 * 0.0);
          *(float *)&v930 = v234;
          *(float *)&v929 = v239;
          float v259 = (float)((float)(v248 * v234) + 0.0) + (float)(v250 * v239);
          float v260 = (float)((float)(v249 * v234) + 0.0) + (float)(v251 * v239);
          *(float *)&v926 = v242;
          float v261 = (float)((float)(v248 * v242) + 0.0) + (float)(v250 * v243);
          float v262 = (float)((float)(v248 * v245) + 0.0) + (float)(v250 * v246);
          float v263 = (float)((float)(v249 * v242) + 0.0) + (float)(v251 * v243);
          float v264 = (float)((float)(v249 * v245) + 0.0) + (float)(v251 * v246);
          float v265 = v55[6];
          float v266 = v55[7];
          float v267 = v252 + (float)(v265 * 0.0);
          float v268 = v255 + (float)(v265 * 0.0);
          float v269 = v257 + v265;
          float v270 = v259 + (float)(v265 * *(float *)&v935);
          float v271 = v261 + (float)(v265 * *(float *)&v934);
          float v272 = v262 + (float)(v265 * v247);
          float v273 = *(float *)&v925 + (float)(v266 * 0.0);
          float v274 = v256 + (float)(v266 * 0.0);
          float v275 = v258 + v266;
          float v276 = v260 + (float)(v266 * *(float *)&v935);
          float v277 = v263 + (float)(v266 * *(float *)&v934);
          float v278 = v264 + (float)(v266 * v247);
          float v279 = *v160;
          float v280 = v160[1];
          *(float *)&v925 = (float)((float)(*v160 * v267) + 0.0) + (float)(v206 * v273);
          float v924 = (float)((float)(v280 * v267) + 0.0) + (float)(v213 * v273);
          float v923 = (float)((float)(v207 * v267) + 0.0) + (float)(v212 * v273);
          float v922 = (float)((float)(v279 * v268) + 0.0) + (float)(v206 * v274);
          float v281 = (float)((float)(v280 * v268) + 0.0) + (float)(v213 * v274);
          float v282 = (float)((float)(v207 * v268) + 0.0) + (float)(v212 * v274);
          float v283 = (float)((float)(v279 * v269) + 0.0) + (float)(v206 * v275);
          float v284 = (float)((float)(v280 * v269) + 0.0) + (float)(v213 * v275);
          float v285 = (float)((float)(v207 * v269) + 0.0) + (float)(v212 * v275);
          float v286 = (float)((float)(v279 * v270) + 0.0) + (float)(v206 * v276);
          float v287 = (float)((float)(v280 * v270) + 0.0) + (float)(v213 * v276);
          float v288 = (float)((float)(v207 * v270) + 0.0) + (float)(v212 * v276);
          float v289 = (float)((float)(v279 * v271) + 0.0) + (float)(v206 * v277);
          float v290 = (float)((float)(v280 * v271) + 0.0) + (float)(v213 * v277);
          float v291 = (float)((float)(v207 * v271) + 0.0) + (float)(v212 * v277);
          float v292 = (float)((float)(v279 * v272) + 0.0) + (float)(v206 * v278);
          float v293 = (float)((float)(v280 * v272) + 0.0) + (float)(v213 * v278);
          float v294 = (float)((float)(v207 * v272) + 0.0) + (float)(v212 * v278);
          float v295 = (float)((float)(v168 * *(float *)&v930) + 0.0) + (float)(v180 * *(float *)&v929);
          float v296 = (float)((float)(v168 * *(float *)&v926) + 0.0) + (float)(v180 * v243);
          float v221 = *(float *)&v932;
          float v297 = (float)(v168 + 0.0) + (float)(v180 * 0.0);
          float v298 = (float)(v168 * v245) + 0.0;
          float v299 = (float)(v168 * 0.0) + 0.0;
          float v300 = v298 + (float)(v180 * v246);
          float v301 = v299 + v180;
          float v302 = v299 + (float)(v180 * 0.0);
          float v303 = v295 + (float)(v185 * *(float *)&v935);
          float v304 = v296 + (float)(v185 * *(float *)&v934);
          float v305 = v300 + (float)(v185 * v247);
          float v306 = v297 + (float)(v185 * 0.0);
          float v307 = v301 + (float)(v185 * 0.0);
          float v308 = v302 + v185;
          float v309 = *(float *)&v925 + (float)(v217 * v306);
          float v310 = v922 + (float)(v217 * v307);
          float v311 = v281 + (float)(v218 * v307);
          float v312 = v282 + (float)(v201 * v307);
          float v313 = v283 + (float)(v217 * v308);
          float v314 = v286 + (float)(v217 * v303);
          float v315 = v289 + (float)(v217 * v304);
          float v316 = v292 + (float)(v217 * v305);
          v990.f32[0] = (float)(v219 * (float)(v924 + (float)(v218 * v306))) + (float)(v220 * v309);
          v990.f32[1] = (float)(v219 * (float)(v923 + (float)(v201 * v306))) + (float)(*(float *)&v932 * v309);
          v990.f32[2] = (float)(v219 * v311) + (float)(v220 * v310);
          v990.f32[3] = (float)(v219 * v312) + (float)(*(float *)&v932 * v310);
          v991.f32[0] = (float)(v219 * (float)(v284 + (float)(v218 * v308))) + (float)(v220 * v313);
          v991.f32[1] = (float)(v219 * (float)(v285 + (float)(v201 * v308))) + (float)(*(float *)&v932 * v313);
          v991.f32[2] = (float)(v219 * (float)(v287 + (float)(v218 * v303))) + (float)(v220 * v314);
          v991.f32[3] = (float)(v219 * (float)(v288 + (float)(v201 * v303))) + (float)(*(float *)&v932 * v314);
          v992.f32[0] = (float)(v219 * (float)(v290 + (float)(v218 * v304))) + (float)(v220 * v315);
          v992.f32[1] = (float)(v219 * (float)(v291 + (float)(v201 * v304))) + (float)(*(float *)&v932 * v315);
          v992.f32[2] = (float)(v219 * (float)(v293 + (float)(v218 * v305))) + (float)(v220 * v316);
          v992.f32[3] = (float)(v219 * (float)(v294 + (float)(v201 * v305))) + (float)(*(float *)&v932 * v316);
        }
        if (!v53)
        {
LABEL_53:
          float v157 = *(float *)&v951;
          float v26 = *(float *)&v948;
          float v158 = *(float *)&v946;
          float v159 = *(float *)&v945;
          float v99 = *(float *)&v949;
          float v100 = *(float *)&v950;
          if (*(float *)&v947 == 0.0) {
            goto LABEL_64;
          }
          goto LABEL_58;
        }
        float v317 = v55[1];
        float v318 = v55[2];
        float v319 = v55[3];
        float v320 = v55[4];
        float v321 = v55[5];
        float v322 = v160[1];
        float v323 = v160[2];
        float v324 = v160[3];
        float v325 = (float)(0.0 - (float)(*v160 * *v55)) - (float)(v324 * v317);
        float v326 = v55[6];
        float v327 = v55[7];
        float v328 = v55[8];
        float v329 = v160[4];
        float v330 = v160[5];
        float v331 = (float)(0.0 - (float)(v322 * *v55)) - (float)(v329 * v317);
        float v332 = (float)(0.0 - (float)(v323 * *v55)) - (float)(v330 * v317);
        float v333 = v220;
        float v334 = v160[6];
        float v335 = v160[7];
        float v336 = v325 - (float)(v334 * v318);
        float v337 = v331 - (float)(v335 * v318);
        float v338 = v160[8];
        float v339 = v332 - (float)(v338 * v318);
        float v340 = 0.0 - (float)(*v160 * v319);
        float v341 = 0.0 - (float)(v322 * v319);
        float v342 = (float)(0.0 - (float)(v323 * v319)) - (float)(v330 * v320);
        float v343 = (float)(v340 - (float)(v324 * v320)) - (float)(v334 * v321);
        float v344 = (float)(v341 - (float)(v329 * v320)) - (float)(v335 * v321);
        float v345 = v342 - (float)(v338 * v321);
        float v346 = 0.0 - (float)(*v160 * v326);
        float v347 = 0.0 - (float)(v322 * v326);
        float v348 = (float)(0.0 - (float)(v323 * v326)) - (float)(v330 * v327);
        float v349 = (float)(v346 - (float)(v324 * v327)) - (float)(v334 * v328);
        float v350 = (float)(v347 - (float)(v329 * v327)) - (float)(v335 * v328);
        float v351 = v348 - (float)(v338 * v328);
        float v352 = (float)((float)((float)(*v160 * *(float *)&v944) + 0.0) - (float)(v324 * *(float *)&v937))
             + (float)(v334 * 0.0);
        float v353 = (float)((float)(0.0 - (float)(*v160 * *(float *)&v936)) + (float)(v324 * 0.0))
             + (float)(v334 * *(float *)&v937);
        float v354 = (float)((float)((float)(*v160 * 0.0) + 0.0) + (float)(v324 * *(float *)&v936))
             - (float)(v334 * *(float *)&v944);
        v993.f32[0] = (float)(v219 * v337) + (float)(v333 * v336);
        v993.f32[1] = (float)(v219 * v339) + (float)(v221 * v336);
        v993.f32[2] = (float)(v219 * v344) + (float)(v333 * v343);
        v993.f32[3] = (float)(v219 * v345) + (float)(v221 * v343);
        v994.f32[0] = (float)(v219 * v350) + (float)(v333 * v349);
        v994.f32[1] = (float)(v219 * v351) + (float)(v221 * v349);
        v994.f32[2] = (float)(v219
                            * (float)((float)((float)((float)(v322 * *(float *)&v944) + 0.0)
                                            - (float)(v329 * *(float *)&v937))
                                    + (float)(v335 * 0.0)))
                    + (float)(v333 * v352);
        v994.f32[3] = (float)(v219
                            * (float)((float)((float)((float)(v323 * *(float *)&v944) + 0.0)
                                            - (float)(v330 * *(float *)&v937))
                                    + (float)(v338 * 0.0)))
                    + (float)(v221 * v352);
        v995.f32[0] = (float)(v219
                            * (float)((float)((float)(0.0 - (float)(v322 * *(float *)&v936)) + (float)(v329 * 0.0))
                                    + (float)(v335 * *(float *)&v937)))
                    + (float)(v333 * v353);
        v995.f32[1] = (float)(v219
                            * (float)((float)((float)(0.0 - (float)(v323 * *(float *)&v936)) + (float)(v330 * 0.0))
                                    + (float)(v338 * *(float *)&v937)))
                    + (float)(v221 * v353);
        v995.f32[2] = (float)(v219
                            * (float)((float)((float)((float)(v322 * 0.0) + 0.0) + (float)(v329 * *(float *)&v936))
                                    - (float)(v335 * *(float *)&v944)))
                    + (float)(v333 * v354);
        float v156 = (float)(v219
                     * (float)((float)((float)((float)(v323 * 0.0) + 0.0) + (float)(v330 * *(float *)&v936))
                             - (float)(v338 * *(float *)&v944)))
             + (float)(v221 * v354);
        float v157 = *(float *)&v951;
        float v26 = *(float *)&v948;
        float v158 = *(float *)&v946;
        float v159 = *(float *)&v945;
        float v99 = *(float *)&v949;
        goto LABEL_51;
      }
LABEL_109:
      uint64_t v17 = v918;
      uint64_t v432 = *(void *)(v918 + 80 * v32 + 56);
      if (v432)
      {
        *(float *)&uint64_t v951 = v25;
        uint64_t v433 = v918 + 80 * v32;
        float v434 = *(float *)(*(void *)(v943 + 32) + 4 * v32);
        float64x2_t v435 = *(float **)(v433 + 72);
        float v436 = *v41;
        LODWORD(v949) = *(_DWORD *)(v39 + 8 * v38 + 4);
        float v437 = v44[1];
        float v438 = *v435;
        float v439 = v435[1];
        float v441 = v44[2];
        float v440 = v44[3];
        float v443 = v435[2];
        float v442 = v435[3];
        float v445 = v44[6];
        float v444 = v44[7];
        float v447 = v435[6];
        float v446 = v435[7];
        float v448 = (float)((float)((float)(*v435 * *v44) + 0.0) + (float)(v442 * v440)) + (float)(v447 * v445);
        float v449 = v44[4];
        float v450 = v44[5];
        float v451 = (float)((float)((float)(*v435 * v437) + 0.0) + (float)(v442 * v449)) + (float)(v447 * v444);
        float v452 = v44[8];
        float v453 = (float)((float)((float)(*v435 * v441) + 0.0) + (float)(v442 * v450)) + (float)(v447 * v452);
        float v455 = v435[4];
        float v454 = v435[5];
        float v456 = (float)((float)((float)(v439 * *v44) + 0.0) + (float)(v455 * v440)) + (float)(v446 * v445);
        float v457 = (float)((float)(v443 * *v44) + 0.0) + (float)(v454 * v440);
        float v458 = v435[8];
        float v459 = v44[9] - v435[9];
        float v460 = v44[10] - v435[10];
        float v461 = (float)((float)((float)(v439 * v437) + 0.0) + (float)(v455 * v449)) + (float)(v446 * v444);
        float v462 = v44[11] - v435[11];
        float v463 = (float)((float)((float)(v439 * v441) + 0.0) + (float)(v455 * v450)) + (float)(v446 * v452);
        float v464 = v457 + (float)(v458 * v445);
        *(float *)&uint64_t v937 = v444;
        float v465 = (float)((float)((float)(v443 * v437) + 0.0) + (float)(v454 * v449)) + (float)(v458 * v444);
        float v466 = (float)((float)((float)(v443 * v441) + 0.0) + (float)(v454 * v450)) + (float)(v458 * v452);
        float v467 = 1.0 / v434;
        float v468 = (float)((float)(v438 * v459) + 0.0) + (float)(v442 * v460);
        float v469 = v436;
        float v470 = (float)(1.0 / v434) * v436;
        float v471 = v468 + (float)(v447 * v462);
        float v472 = (float)((float)((float)(v439 * v459) + 0.0) + (float)(v455 * v460)) + (float)(v446 * v462);
        float v473 = (float)((float)((float)(v443 * v459) + 0.0) + (float)(v454 * v460)) + (float)(v458 * v462);
        float v474 = v467 * *(float *)&v949;
        float v475 = (float)((float)((float)(v470 * v451) + (float)(v448 * v467))
                     + (float)(v453 * (float)(v467 * *(float *)&v949)))
             + v471;
        *(float *)&uint64_t v950 = (float)((float)((float)(v470 * v461) + (float)(v456 * v467))
                                + (float)(v463 * (float)(v467 * *(float *)&v949)))
                        + v472;
        float v476 = (float)((float)((float)(v470 * v465) + (float)(v464 * v467))
                     + (float)(v466 * (float)(v467 * *(float *)&v949)))
             + v473;
        float v477 = 1.0 / v475;
        float v478 = *(float *)v432;
        LODWORD(v944) = *(_DWORD *)(v432 + 4);
        float v479 = *(float *)(v432 + 8);
        if (v9)
        {
          float v480 = v477 * v477;
          float v481 = (float)(v477 * v477) * (float)-*(float *)&v950;
          float v482 = (float)(v477 * v477) * (float)-v476;
          if (v13)
          {
            float v483 = -(float)(v467 * v467);
            float v484 = v483 * (float)((float)(v448 + (float)(v451 * v469)) + (float)(v453 * *(float *)&v949));
            float v485 = *(float *)(v432 + 8);
            float v952 = -(float)(v480 * v484);
            float v953 = (float)((float)(v483 * (float)((float)(v456 + (float)(v461 * v469)) + (float)(v463 * *(float *)&v949)))
                         * v477)
                 + (float)(v481 * v484);
            float v479 = v485;
            float v954 = (float)((float)(v483 * (float)((float)(v464 + (float)(v465 * v469)) + (float)(v466 * *(float *)&v949)))
                         * v477)
                 + (float)(v482 * v484);
          }
          if (v45)
          {
            *(float *)&uint64_t v949 = v479;
            float v486 = *v44;
            float v487 = v44[1];
            float v488 = (float)(v467 * v487) - (float)(*v44 * v470);
            *(float *)&v936 = v478;
            float v490 = v44[2];
            float v489 = v44[3];
            float v491 = (float)(v467 * v449) - (float)(v489 * v470);
            float v492 = (float)(v467 * *(float *)&v937) - (float)(v445 * v470);
            float v493 = (float)(v486 * v474) - (float)(v467 * v490);
            float v494 = (float)(v489 * v474) - (float)(v467 * v450);
            float v495 = (float)(v445 * v474) - (float)(v467 * v452);
            float v496 = (float)(v470 * v490) - (float)(v487 * v474);
            float v497 = (float)(v470 * v450) - (float)(v449 * v474);
            float v498 = (float)(v470 * v452) - (float)(*(float *)&v937 * v474);
            float v499 = v435[1];
            float v501 = v435[2];
            float v500 = v435[3];
            float v502 = (float)(*v435 + 0.0) + (float)(v500 * 0.0);
            float v503 = (float)(v499 + 0.0) + (float)(v455 * 0.0);
            float v504 = (float)(*v435 * 0.0) + 0.0;
            float v505 = (float)(v499 * 0.0) + 0.0;
            float v506 = (float)((float)(*v435 * v488) + 0.0) + (float)(v500 * v491);
            float v507 = (float)((float)(v499 * v488) + 0.0) + (float)(v455 * v491);
            float v508 = (float)((float)(v501 * v488) + 0.0) + (float)(v454 * v491);
            float v509 = (float)((float)(*v435 * v493) + 0.0) + (float)(v500 * v494);
            float v510 = (float)((float)(v499 * v493) + 0.0) + (float)(v455 * v494);
            float v511 = (float)((float)(v501 * v493) + 0.0) + (float)(v454 * v494);
            float v512 = v504 + v500;
            float v513 = v504 + (float)(v500 * 0.0);
            float v514 = (float)((float)(*v435 * v496) + 0.0) + (float)(v500 * v497);
            float v515 = v455 + v505;
            float v516 = v505 + (float)(v455 * 0.0);
            float v517 = (float)((float)(v499 * v496) + 0.0) + (float)(v455 * v497);
            float v518 = (float)(v501 + 0.0) + (float)(v454 * 0.0);
            float v519 = (float)(v501 * v496) + 0.0;
            float v520 = (float)(v501 * 0.0) + 0.0;
            float v521 = v519 + (float)(v454 * v497);
            float v522 = v454 + v520;
            float v523 = v520 + (float)(v454 * 0.0);
            float v524 = v435[6];
            float v525 = v506 + (float)(v524 * v492);
            float v526 = v507 + (float)(v446 * v492);
            float v527 = v508 + (float)(v458 * v492);
            float v528 = v509 + (float)(v524 * v495);
            float v529 = v510 + (float)(v446 * v495);
            float v530 = v511 + (float)(v458 * v495);
            float v531 = v502 + (float)(v524 * 0.0);
            float v532 = v512 + (float)(v524 * 0.0);
            float v533 = v513 + v524;
            float v534 = v514 + (float)(v524 * v498);
            float v535 = v503 + (float)(v446 * 0.0);
            float v536 = v515 + (float)(v446 * 0.0);
            float v537 = v446 + v516;
            float v538 = v517 + (float)(v446 * v498);
            float v539 = v521 + (float)(v458 * v498);
            float v955 = -(float)(v480 * v531);
            float v956 = (float)(v477 * v535) + (float)(v481 * v531);
            float v957 = (float)(v477 * (float)(v518 + (float)(v458 * 0.0))) + (float)(v482 * v531);
            float v958 = -(float)(v480 * v532);
            float v959 = (float)(v477 * v536) + (float)(v481 * v532);
            float v960 = (float)(v477 * (float)(v522 + (float)(v458 * 0.0))) + (float)(v482 * v532);
            float v961 = -(float)(v480 * v533);
            float v962 = (float)(v477 * v537) + (float)(v481 * v533);
            float v540 = (float)(v477 * (float)(v458 + v523)) + (float)(v482 * v533);
            float v478 = *(float *)&v936;
            float v963 = v540;
            float v964 = -(float)(v480 * v525);
            float v965 = (float)(v477 * v526) + (float)(v481 * v525);
            float v966 = (float)(v477 * v527) + (float)(v482 * v525);
            float v967 = -(float)(v480 * v528);
            float v968 = (float)(v477 * v529) + (float)(v481 * v528);
            float v969 = (float)(v477 * v530) + (float)(v482 * v528);
            float v970 = -(float)(v480 * v534);
            float v971 = (float)(v477 * v538) + (float)(v481 * v534);
            float v479 = *(float *)&v949;
            float v972 = (float)(v477 * v539) + (float)(v482 * v534);
          }
        }
        uint64_t v541 = *(float **)(v433 + 64);
        *(float *)v2.i32 = v478 - v477;
        *(float *)v8.i32 = *(float *)&v944 - (float)(*(float *)&v950 * v477);
        *(float *)v7.i32 = v479 - (float)(v476 * v477);
        float v542 = v541[5];
        float v543 = (float)((float)((float)((float)((float)((float)((float)(*v541 * (float)(v478 - v477)) + 0.0)
                                                     + (float)(v541[1] * *(float *)v8.i32))
                                             + (float)(v541[2] * *(float *)v7.i32))
                                     * (float)(v478 - v477))
                             + 0.0)
                     + (float)((float)((float)((float)((float)(v541[3] * (float)(v478 - v477)) + 0.0)
                                             + (float)(v541[4] * *(float *)v8.i32))
                                     + (float)(v542 * *(float *)v7.i32))
                             * *(float *)v8.i32))
             + (float)((float)((float)((float)((float)(v541[6] * (float)(v478 - v477)) + 0.0)
                                     + (float)(v541[7] * *(float *)v8.i32))
                             + (float)(v541[8] * *(float *)v7.i32))
                     * *(float *)v7.i32);
        float v544 = (float)(v915[10] * v915[10]) * 3.0;
        if (v543 < v544) {
          float v545 = (float)((float)((float)((float)((float)((float)((float)(*v541 * (float)(v478 - v477)) + 0.0)
        }
                                                       + (float)(v541[1] * *(float *)v8.i32))
                                               + (float)(v541[2] * *(float *)v7.i32))
                                       * (float)(v478 - v477))
                               + 0.0)
                       + (float)((float)((float)((float)((float)(v541[3] * (float)(v478 - v477)) + 0.0)
                                               + (float)(v541[4] * *(float *)v8.i32))
                                       + (float)(v542 * *(float *)v7.i32))
                               * *(float *)v8.i32))
               + (float)((float)((float)((float)((float)(v541[6] * (float)(v478 - v477)) + 0.0)
                                       + (float)(v541[7] * *(float *)v8.i32))
                               + (float)(v541[8] * *(float *)v7.i32))
                       * *(float *)v7.i32);
        else {
          float v545 = (float)(v915[10] * v915[10]) * 3.0;
        }
        uint64_t v15 = v940;
        float v546 = *(float *)&v951;
        float v26 = *(float *)&v948;
        if (v9 && v543 < v544)
        {
          if (v45)
          {
            *(float *)&uint64_t v950 = v545;
            int v547 = *(_DWORD *)(*(void *)v943 + 32 * v920 + 12);
            int v548 = v547 + v941;
            uint64_t v549 = (uint64_t)*v18;
            uint64_t v550 = *((int *)v18 + 4);
            int v551 = v547 + v550 * (v547 + v941);
            v973.i32[0] = 0;
            float32_t v552 = (float)(v955 * *v541) + 0.0;
            *(float *)&uint64_t v949 = v955;
            v973.f32[0] = v552;
            v973.f32[0] = v552 + (float)(v956 * v541[1]);
            float v553 = v973.f32[0] + (float)(v957 * v541[2]);
            v973.f32[0] = v553;
            v973.i32[1] = 0;
            float32_t v554 = (float)(v958 * *v541) + 0.0;
            *(float *)&uint64_t v944 = v958;
            v973.f32[1] = v554;
            v973.f32[1] = v554 + (float)(v959 * v541[1]);
            float v555 = v973.f32[1] + (float)(v960 * v541[2]);
            *(float *)&uint64_t v937 = v960;
            *(uint64_t *)((char *)v973.i64 + 4) = LODWORD(v555);
            v973.f32[2] = (float)(v961 * *v541) + 0.0;
            float32_t v556 = v973.f32[2] + (float)(v962 * v541[1]);
            *(float *)&v936 = v962;
            v973.f32[2] = v556;
            float v557 = v556 + (float)(v963 * v541[2]);
            v973.f32[2] = v557;
            v973.i32[3] = 0;
            v973.f32[3] = (float)(v964 * *v541) + 0.0;
            v973.f32[3] = v973.f32[3] + (float)(v965 * v541[1]);
            float v558 = v973.f32[3] + (float)(v966 * v541[2]);
            v973.f32[3] = v558;
            v974.i32[0] = 0;
            v974.f32[0] = (float)(v967 * *v541) + 0.0;
            v974.f32[0] = v974.f32[0] + (float)(v968 * v541[1]);
            float v559 = v974.f32[0] + (float)(v969 * v541[2]);
            v974.f32[0] = v559;
            v974.i32[1] = 0;
            v974.f32[1] = (float)(v970 * *v541) + 0.0;
            v974.f32[1] = v974.f32[1] + (float)(v971 * v541[1]);
            float v560 = v974.f32[1] + (float)(v972 * v541[2]);
            v974.f32[1] = v560;
            v975.i32[0] = 0;
            v975.f32[0] = (float)(v955 * v541[3]) + 0.0;
            v975.f32[0] = v975.f32[0] + (float)(v956 * v541[4]);
            float v561 = v975.f32[0] + (float)(v957 * v541[5]);
            v975.f32[0] = v561;
            v975.i32[1] = 0;
            v975.f32[1] = (float)(v958 * v541[3]) + 0.0;
            v975.f32[1] = v975.f32[1] + (float)(v959 * v541[4]);
            float v562 = v975.f32[1] + (float)(v960 * v541[5]);
            v975.f32[1] = v562;
            v975.i32[2] = 0;
            v975.f32[2] = (float)(v961 * v541[3]) + 0.0;
            v975.f32[2] = v975.f32[2] + (float)(v962 * v541[4]);
            float v563 = v975.f32[2] + (float)(v963 * v541[5]);
            v975.f32[2] = v563;
            v975.i32[3] = 0;
            v975.f32[3] = (float)(v964 * v541[3]) + 0.0;
            v975.f32[3] = v975.f32[3] + (float)(v965 * v541[4]);
            float v564 = v975.f32[3] + (float)(v966 * v541[5]);
            v975.f32[3] = v564;
            v976.i32[0] = 0;
            v976.f32[0] = (float)(v967 * v541[3]) + 0.0;
            v976.f32[0] = v976.f32[0] + (float)(v968 * v541[4]);
            float v565 = v976.f32[0] + (float)(v969 * v541[5]);
            v976.f32[0] = v565;
            v976.i32[1] = 0;
            v976.f32[1] = (float)(v970 * v541[3]) + 0.0;
            v976.f32[1] = v976.f32[1] + (float)(v971 * v541[4]);
            float v566 = v976.f32[1] + (float)(v972 * v541[5]);
            v976.f32[1] = v566;
            v977.i32[0] = 0;
            v977.f32[0] = (float)(v955 * v541[6]) + 0.0;
            v977.f32[0] = v977.f32[0] + (float)(v956 * v541[7]);
            float v567 = v977.f32[0] + (float)(v957 * v541[8]);
            v977.f32[0] = v567;
            v977.i32[1] = 0;
            v977.f32[1] = (float)(v958 * v541[6]) + 0.0;
            v977.f32[1] = v977.f32[1] + (float)(v959 * v541[7]);
            float v568 = v977.f32[1] + (float)(v960 * v541[8]);
            v977.f32[1] = v568;
            v977.i32[2] = 0;
            v977.f32[2] = (float)(v961 * v541[6]) + 0.0;
            v977.f32[2] = v977.f32[2] + (float)(v962 * v541[7]);
            float v569 = v977.f32[2] + (float)(v963 * v541[8]);
            v977.f32[2] = v569;
            v977.i32[3] = 0;
            v977.f32[3] = (float)(v964 * v541[6]) + 0.0;
            v977.f32[3] = v977.f32[3] + (float)(v965 * v541[7]);
            float v570 = v977.f32[3] + (float)(v966 * v541[8]);
            v977.f32[3] = v570;
            v978.i32[0] = 0;
            v978.f32[0] = (float)(v967 * v541[6]) + 0.0;
            v978.f32[0] = v978.f32[0] + (float)(v968 * v541[7]);
            float v571 = v978.f32[0] + (float)(v969 * v541[8]);
            v978.f32[0] = v571;
            v978.i32[1] = 0;
            v978.f32[1] = (float)(v970 * v541[6]) + 0.0;
            v978.f32[1] = v978.f32[1] + (float)(v971 * v541[7]);
            float v572 = v978.f32[1] + (float)(v972 * v541[8]);
            v978.f32[1] = v572;
            unint64_t v573 = v913;
            for (uint64_t i = 20; i != 92; i += 12)
            {
              *(void *)(v573 - 1) = 0;
              *(void *)(v573 - 3) = 0;
              *(void *)(v573 - 5) = 0;
              float v575 = *(v573 - 4);
              float v576 = *(v573 - 5) + (float)(v553 * *(float *)((char *)&v951 + i));
              *(v573 - 5) = v576;
              float v577 = v575 + (float)(v555 * *(float *)((char *)&v951 + i));
              *(v573 - 4) = v577;
              float v578 = *(v573 - 2);
              float v579 = *(v573 - 3) + (float)(v557 * *(float *)((char *)&v951 + i));
              *(v573 - 3) = v579;
              float v580 = v578 + (float)(v558 * *(float *)((char *)&v951 + i));
              *(v573 - 2) = v580;
              float v581 = *v573;
              float v582 = *(v573 - 1) + (float)(v559 * *(float *)((char *)&v951 + i));
              *(v573 - 1) = v582;
              float v583 = v581 + (float)(v560 * *(float *)((char *)&v951 + i));
              *unint64_t v573 = v583;
              float v584 = v576 + (float)(v561 * *(float *)((char *)&v951 + i + 4));
              *(v573 - 5) = v584;
              float v585 = v577 + (float)(v562 * *(float *)((char *)&v951 + i + 4));
              *(v573 - 4) = v585;
              float v586 = v579 + (float)(v563 * *(float *)((char *)&v951 + i + 4));
              *(v573 - 3) = v586;
              float v587 = v580 + (float)(v564 * *(float *)((char *)&v951 + i + 4));
              *(v573 - 2) = v587;
              float v588 = v582 + (float)(v565 * *(float *)((char *)&v951 + i + 4));
              *(v573 - 1) = v588;
              float v589 = v583 + (float)(v566 * *(float *)((char *)&v951 + i + 4));
              *unint64_t v573 = v589;
              *(v573 - 5) = v584 + (float)(v567 * *(float *)((char *)&v952 + i));
              *(v573 - 4) = v585 + (float)(v568 * *(float *)((char *)&v952 + i));
              *(v573 - 3) = v586 + (float)(v569 * *(float *)((char *)&v952 + i));
              *(v573 - 2) = v587 + (float)(v570 * *(float *)((char *)&v952 + i));
              *(v573 - 1) = v588 + (float)(v571 * *(float *)((char *)&v952 + i));
              *unint64_t v573 = v589 + (float)(v572 * *(float *)((char *)&v952 + i));
              v573 += 6;
            }
            uint64_t v590 = (float *)(v549 + 4 * v551);
            float v591 = v590[1];
            *uint64_t v590 = *v590 + v979;
            v590[1] = v591 + v980;
            float v592 = v590[3];
            v590[2] = v590[2] + v981;
            v590[3] = v592 + v982;
            float v593 = v590[5];
            v590[4] = v590[4] + v983;
            v590[5] = v593 + v984[0];
            unint64_t v594 = &v590[v550];
            float v595 = v594[1];
            *unint64_t v594 = *v594 + v984[1];
            v594[1] = v595 + v984[2];
            float v596 = v594[3];
            v594[2] = v594[2] + v984[3];
            v594[3] = v596 + v984[4];
            float v597 = v594[5];
            v594[4] = v594[4] + v984[5];
            v594[5] = v597 + v984[6];
            v598 = &v590[2 * v550];
            float v599 = v598[1];
            float *v598 = *v598 + v984[7];
            v598[1] = v599 + v984[8];
            float v600 = v598[3];
            v598[2] = v598[2] + v984[9];
            v598[3] = v600 + v984[10];
            float v601 = v598[5];
            v598[4] = v598[4] + v984[11];
            v598[5] = v601 + v984[12];
            uint64_t v602 = &v590[3 * (int)v550];
            float v603 = v602[1];
            *uint64_t v602 = *v602 + v984[13];
            v602[1] = v603 + v984[14];
            float v604 = v602[3];
            v602[2] = v602[2] + v984[15];
            v602[3] = v604 + v984[16];
            float v605 = v602[5];
            v602[4] = v602[4] + v984[17];
            v602[5] = v605 + v984[18];
            float v606 = &v590[4 * v550];
            float v607 = v606[1];
            *float v606 = *v606 + v984[19];
            v606[1] = v607 + v984[20];
            float v608 = v606[3];
            v606[2] = v606[2] + v984[21];
            v606[3] = v608 + v984[22];
            float v609 = v606[5];
            v606[4] = v606[4] + v984[23];
            v606[5] = v609 + v984[24];
            v610 = &v590[5 * (int)v550];
            float v611 = v610[1];
            float *v610 = *v610 + v984[25];
            v610[1] = v611 + v984[26];
            float v612 = v610[3];
            v610[2] = v610[2] + v984[27];
            v610[3] = v612 + v984[28];
            float v613 = v610[5];
            v610[4] = v610[4] + v984[29];
            v610[5] = v613 + v984[30];
            uint64_t v614 = (float32x2_t *)&v11[4 * v548];
            *(float32x4_t *)v614->f32 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(*(float32x4_t *)v614->f32, v973, *(float *)v2.i32), v975, *(float *)v8.i32), v977, *(float *)v7.i32);
            v614[2] = vmla_f32(vmla_f32(vmla_f32(v614[2], (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v2, 0), v974), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v8, 0), v976), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v7, 0), v978);
            float v18 = v939;
            float v546 = *(float *)&v951;
            float v26 = *(float *)&v948;
            float v545 = *(float *)&v950;
          }
          if (v13)
          {
            float v615 = v952;
            float v616 = v953;
            float v617 = v954;
            uint64_t v618 = v933;
            *(float *)((char *)v933->f32 + (void)v13) = *(float *)((char *)v933->f32 + (void)v13)
                                                        + (float)((float)((float)((float)((float)((float)((float)((float)(*v541 * v952) + 0.0) + (float)(v541[1] * v953))
                                                                                                + (float)(v541[2] * v954))
                                                                                        * v952)
                                                                                + 0.0)
                                                                        + (float)((float)((float)((float)((float)(v541[3] * v952) + 0.0)
                                                                                                + (float)(v541[4] * v953))
                                                                                        + (float)(v541[5] * v954))
                                                                                * v953))
                                                                + (float)((float)((float)((float)((float)(v541[6] * v952)
                                                                                                + 0.0)
                                                                                        + (float)(v541[7] * v953))
                                                                                + (float)(v541[8] * v954))
                                                                        * v954));
            float v619 = v914;
            *(void *)v914 = 0;
            v619[2] = 0.0;
            float v955 = (float)(*v541 * *(float *)v2.i32) + 0.0;
            float v956 = (float)(v541[1] * *(float *)v2.i32) + 0.0;
            float v957 = (float)(v541[2] * *(float *)v2.i32) + 0.0;
            float v620 = v956 + (float)(v541[4] * *(float *)v8.i32);
            float v621 = v541[6];
            float v622 = v957 + (float)(v541[5] * *(float *)v8.i32);
            float v955 = v955 + (float)(v541[3] * *(float *)v8.i32);
            float v956 = v620;
            float v957 = v622;
            *(float *)((char *)v618->f32 + (void)v11) = (float)((float)(*(float *)((char *)v618->f32 + (void)v11)
                                                                        + (float)(v615
                                                                                * (float)(v955
                                                                                        + (float)(v621 * *(float *)v7.i32))))
                                                                + (float)(v616
                                                                        * (float)(v620
                                                                                + (float)(v541[7] * *(float *)v7.i32))))
                                                        + (float)(v617
                                                                * (float)(v622 + (float)(v541[8] * *(float *)v7.i32)));
          }
        }
        float v25 = v546 + v545;
        v942 += 3;
        if (v916)
        {
LABEL_24:
          if (v9) {
            goto LABEL_25;
          }
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v15 = v940;
        if (v916) {
          goto LABEL_24;
        }
      }
      float v623 = -(float)(*(float *)(*(void *)(v943 + 32) + 4 * v32) * v26);
      float v25 = v25 + (float)(v623 * v623);
      ++v942;
      if (v9)
      {
        v624 = v933;
        *(float *)((char *)v933->f32 + (void)v13) = *(float *)((char *)v933->f32 + (void)v13) + (float)(v26 * v26);
        *(float *)((char *)v624->f32 + (void)v11) = *(float *)((char *)v624->f32 + (void)v11) + (float)(v26 * v623);
LABEL_25:
        float v35 = *(float *)((char *)v933->f32 + (void)v13);
        if (v35 < 0.000001) {
          float v35 = 0.000001;
        }
        *(float *)((char *)v933->f32 + (void)v13) = v35;
      }
LABEL_28:
      if (++v32 == v917) {
        goto LABEL_132;
      }
    }
  }
  int v942 = 0;
LABEL_132:
  int v625 = *(_DWORD *)(v943 + 52);
  if (v625 >= 1)
  {
    uint64_t v626 = 0;
    if (v9) {
      uint64_t v627 = &v952;
    }
    else {
      uint64_t v627 = 0;
    }
    v925 = v11 + 4;
    v926 = v627;
    int v628 = (int *)(v15 + 24);
    v927.i64[0] = (uint64_t)&v988;
    uint64_t v629 = 2;
    long long v630 = &v989;
    do
    {
      if (!*(void *)(v15 + 80 * v626)) {
        goto LABEL_139;
      }
      v930 = &v912;
      int v631 = *(_DWORD *)(v15 + 80 * v626 + 20);
      uint64_t v951 = v631;
      if (v13) {
        BOOL v632 = v631 < 0;
      }
      else {
        BOOL v632 = 1;
      }
      int v633 = v632;
      __int16 v986 = 0;
      uint64_t v985 = 0;
      uint64_t v634 = *(unsigned int *)(v15 + 80 * v626 + 16);
      LODWORD(v635) = MEMORY[0x270FA5388](v629, v630);
      v933 = (float32x4_t *)((char *)&v912 - v641);
      if (v633) {
        uint64_t v635 = v635;
      }
      else {
        uint64_t v635 = v634;
      }
      v931 = v628;
      uint64_t v932 = v635;
      if (v633) {
        long long v630 = v636;
      }
      else {
        long long v630 = v637;
      }
      BOOL v642 = (v633 & 1) != 0;
      if (v633) {
        uint64_t v643 = v637;
      }
      else {
        uint64_t v643 = (float32x2_t *)((char *)v637 + 4 * v640);
      }
      uint64_t v644 = v15 + v626 * v638;
      int v647 = *(_DWORD *)(v644 + 64);
      uint64_t v645 = (int *)(v644 + 64);
      uint64_t v646 = v647;
      if (v647 < 1)
      {
        float v653 = (float *)v933;
        if ((unint64_t)((char *)v643 - (char *)v637) >> 2 >= 0x401) {
          goto LABEL_371;
        }
      }
      else
      {
        uint64_t v648 = *(void *)v943;
        int v649 = &v985;
        v650 = (_DWORD *)v927.i64[0];
        int v651 = v628;
        uint64_t v652 = v646;
        float v653 = (float *)v933;
        do
        {
          while (1)
          {
            uint64_t v654 = *v651++;
            int v655 = *(_DWORD *)(v648 + 32 * v654 + 16);
            if (v655) {
              break;
            }
            *(unsigned char *)int v649 = 1;
            int v649 = (uint64_t *)((char *)v649 + 1);
            v650 += 6;
            if (!--v652) {
              goto LABEL_161;
            }
          }
          BOOL v642 = 0;
          *((void *)v650 - 2) = v643;
          *(v650 - 2) = v634;
          *(v650 - 1) = v655;
          _DWORD *v650 = v634;
          v650 += 6;
          uint64_t v643 = (float32x2_t *)((char *)v643 + 4 * v655 * (int)v634);
          int v649 = (uint64_t *)((char *)v649 + 1);
          --v652;
        }
        while (v652);
LABEL_161:
        if ((unint64_t)((char *)v643 - (char *)v637) >> 2 >= 0x401) {
LABEL_371:
        }
          __assert_rtn("linearize", "bon.c", 690, "ptr - buf <= ARR_SIZE(buf)");
      }
      if (v642)
      {
        int v628 = v931;
        uint64_t v629 = v932;
        goto LABEL_138;
      }
      uint64_t v656 = *v639;
      uint64_t v657 = v15 + 80 * v626;
      int v658 = v645;
      v928 = v630;
      v656(v653, v926);
      int v659 = v658;
      long long v630 = v928;
      uint64_t v660 = *(void *)(v657 + 72);
      if (v660)
      {
        uint64_t v661 = v932;
        if ((int)v634 >= 1)
        {
          uint64_t v662 = (float *)(v660 + 4 * (((int)v634 + (int)v634 * (int)v634) / 2 - 1));
          unint64_t v663 = v634 - 1;
          int v664 = &v653[(v634 - 1)];
          float v665 = *v662 * *v664;
          *int v664 = v665;
          if (v634 != 1)
          {
            int v666 = v634 - 2;
            do
            {
              float v667 = &v653[v666];
              --v662;
              int v668 = v663;
              do
              {
                float v669 = *v662--;
                float v670 = v669;
                float v671 = *v667--;
                float v665 = v665 + (float)(v670 * v671);
                *int v664 = v665;
                --v668;
              }
              while (v668 > 0);
              --v666;
              int v664 = &v653[(v663 - 1)];
              float v665 = *v662 * *v664;
              *int v664 = v665;
              BOOL v719 = v663-- >= 2;
            }
            while (v719);
          }
        }
        if ((int)v661 < 1) {
          char v672 = 1;
        }
        else {
          char v672 = v633;
        }
        if ((v672 & 1) == 0)
        {
          unint64_t v673 = v661 - 1;
          __darwin_time_t v674 = (float *)(v660 + 4 * (((int)v661 + (int)v661 * (int)v661) / 2 - 1));
          uint64_t v675 = (float *)v928 + v661 - 1;
          float v676 = *v674 * *v675;
          *uint64_t v675 = v676;
          if (v661 != 1)
          {
            unsigned int v677 = v661 - 2;
            do
            {
              uint64_t v678 = (float *)v928 + v677;
              --v674;
              int v679 = v673;
              do
              {
                float v680 = *v674--;
                float v681 = v680;
                float v682 = *v678--;
                float v676 = v676 + (float)(v681 * v682);
                *uint64_t v675 = v676;
                --v679;
              }
              while (v679 > 0);
              --v677;
              BOOL v632 = v673-- > 1;
              uint64_t v675 = (float *)v928 + v673;
              float v676 = *v674 * *v675;
              *uint64_t v675 = v676;
            }
            while (v632);
          }
        }
        uint64_t v683 = *v658;
        if ((int)v683 >= 1)
        {
          for (uint64_t j = 0; j != v683; ++j)
          {
            if (!*((unsigned char *)&v985 + j))
            {
              int v685 = &v987[3 * j];
              int v686 = *((_DWORD *)v685 + 3);
              if (v686 >= 1)
              {
                uint64_t v687 = *((unsigned int *)v685 + 2);
                uint64_t v688 = (int)v687;
                int v689 = v688 + v688 * v688;
                int v690 = v689 >= 0 ? v687 + v687 * v687 : v689 + 1;
                if ((int)v687 >= 1)
                {
                  uint64_t v691 = *v685;
                  long double v692 = (float *)(v660 + 4 * ((v690 >> 1) - 1));
                  unint64_t v693 = v687 - 1;
                  uint64_t v694 = (v687 - 1);
                  if (v687 == 1)
                  {
                    double v695 = (float *)(v691 + 4 * v694);
                    do
                    {
                      *double v695 = *v692 * *v695;
                      ++v695;
                      --v686;
                    }
                    while (v686);
                  }
                  else
                  {
                    int v696 = 0;
                    unsigned int v697 = v688 - 2;
                    uint64_t v698 = 4 * v688;
                    do
                    {
                      double v699 = (float *)(v691 + 4 * v694);
                      float v700 = *v692 * *v699;
                      *double v699 = v700;
                      unint64_t v701 = v693;
                      int v702 = v692;
                      unsigned int v703 = v697;
                      do
                      {
                        uint64_t v704 = 4 * v703;
                        --v702;
                        int v705 = v701;
                        do
                        {
                          float v706 = *v702--;
                          float v700 = v700 + (float)(v706 * *(float *)(v691 + v704));
                          *double v699 = v700;
                          --v705;
                          v704 -= 4;
                        }
                        while (v705 > 0);
                        --v703;
                        BOOL v632 = v701-- > 1;
                        double v699 = (float *)(v691 + 4 * v701);
                        float v700 = *v702 * *v699;
                        *double v699 = v700;
                      }
                      while (v632);
                      v691 += v698;
                      ++v696;
                    }
                    while (v696 != v686);
                  }
                }
              }
            }
          }
        }
      }
      if ((int)v634 < 1)
      {
        int v628 = v931;
        uint64_t v629 = v932;
        float32x4_t v709 = 0uLL;
        uint64_t v710 = v951;
        uint64_t v15 = v940;
        if (!v9) {
          goto LABEL_138;
        }
      }
      else
      {
        double v707 = v653;
        uint64_t v708 = v634;
        int v628 = v931;
        uint64_t v629 = v932;
        float32x4_t v709 = 0uLL;
        uint64_t v710 = v951;
        uint64_t v15 = v940;
        do
        {
          float v711 = *v707++;
          float v25 = v25 + (float)(v711 * v711);
          --v708;
        }
        while (v708);
        v942 += v634;
        if (!v9) {
          goto LABEL_138;
        }
      }
      if (v633)
      {
        uint64_t v944 = *v659;
        if ((int)v944 >= 1) {
          goto LABEL_276;
        }
        goto LABEL_369;
      }
      float v712 = 0.0;
      if ((int)v634 >= 1)
      {
        float v713 = (float *)v928;
        do
        {
          float v714 = *v713++;
          float v712 = v712 + (float)(v714 * v714);
          --v634;
        }
        while (v634);
      }
      *((float *)v13 + v710) = v712 + *((float *)v13 + v710);
      if ((int)v629 < 1) {
        goto LABEL_233;
      }
      float v715 = (float *)&v11[4 * v710];
      float v716 = *v715;
      if (v629 >= 0x10)
      {
        uint64_t v717 = 0;
        unint64_t v718 = (unint64_t)&v925[4 * v710];
        BOOL v719 = v715 >= &v933->f32[v629] || (unint64_t)v933 >= v718;
        char v720 = !v719;
        if (((unint64_t)v928 >= v718 || v715 >= (float *)v928 + v629) && (v720 & 1) == 0)
        {
          uint64_t v717 = v629 & 0xFFFFFFF8;
          double v722 = (float32x4_t *)&v928[2];
          float v723 = v933 + 1;
          uint64_t v724 = v717;
          do
          {
            float32x4_t v725 = vmulq_f32(v722[-1], v723[-1]);
            float32x4_t v726 = vmulq_f32(*v722, *v723);
            float v716 = (float)((float)((float)((float)((float)((float)((float)(v716 + v725.f32[0]) + v725.f32[1])
                                                         + v725.f32[2])
                                                 + v725.f32[3])
                                         + v726.f32[0])
                                 + v726.f32[1])
                         + v726.f32[2])
                 + v726.f32[3];
            v722 += 2;
            v723 += 2;
            v724 -= 8;
          }
          while (v724);
          *float v715 = v716;
          if (v717 == v629) {
            goto LABEL_233;
          }
        }
      }
      else
      {
        uint64_t v717 = 0;
      }
      uint64_t v727 = v629 - v717;
      uint64_t v728 = 4 * v717;
      float v729 = &v933->f32[v717];
      int v730 = (float *)((char *)v928 + v728);
      do
      {
        float v731 = *v730++;
        float v732 = v731;
        float v733 = *v729++;
        float v716 = v716 + (float)(v732 * v733);
        *float v715 = v716;
        --v727;
      }
      while (v727);
LABEL_233:
      if (*v659 < 1) {
        goto LABEL_369;
      }
      uint64_t v734 = *v659;
      uint64_t v735 = 0;
      do
      {
        if (*((unsigned char *)&v985 + v735)) {
          goto LABEL_235;
        }
        float64x2_t v736 = &v987[3 * v735];
        uint64_t v737 = *((unsigned int *)v736 + 3);
        if ((int)v737 < 1) {
          goto LABEL_235;
        }
        uint64_t v738 = *v736;
        int v739 = *((_DWORD *)v736 + 2);
        uint64_t v740 = *((int *)v736 + 4);
        float v741 = *v939;
        int v742 = *(_DWORD *)(*(void *)v943 + 32 * *(int *)(v940 + 80 * v626 + 4 * v735 + 24) + 12)
             + *((_DWORD *)v939 + 4) * v951;
        long long v743 = (float *)&(*v939)[4 * v742];
        if (v739 > 7)
        {
          int v746 = v739 & 0x7FFFFFF8;
          if ((int)(v739 & 0xFFFFFFF8) >= v739)
          {
            for (uint64_t k = 0; k != v737; ++k)
            {
              char v772 = (float32x4_t *)(v738 + 4 * k * v740);
              float32x4_t v773 = 0uLL;
              int v774 = 8;
              float v775 = (float32x4_t *)v928;
              float32x4_t v776 = 0uLL;
              do
              {
                float32x4_t v777 = *v772;
                float32x4_t v778 = v772[1];
                v772 += 2;
                float32x4_t v779 = *v775;
                float32x4_t v780 = v775[1];
                v775 += 2;
                float32x4_t v773 = vmlaq_f32(v773, v779, v777);
                float32x4_t v776 = vmlaq_f32(v776, v780, v778);
                v774 += 8;
              }
              while (v774 <= v739);
              v743[k] = (float)((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v773, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v773, 2), vaddq_f32(v773, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v773.f32, 1)))).f32[0]+ 0.0)+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v776, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v776, 2), vaddq_f32(v776, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v776.f32, 1)))).f32[0])+ v743[k];
            }
            goto LABEL_235;
          }
          uint64_t v747 = 0;
          uint64_t v748 = (v739 + ~v746);
          uint64_t v749 = (v748 + 1) & 0x1FFFFFFF8;
          uint64_t v750 = v749;
          while (2)
          {
            long long v751 = (float32x4_t *)(v738 + 4 * v747 * v740);
            float32x4_t v752 = 0uLL;
            int v753 = 8;
            float64x2x3_t v754 = (float32x4_t *)v928;
            float32x4_t v755 = 0uLL;
            do
            {
              float32x4_t v756 = *v751;
              float32x4_t v757 = v751[1];
              v751 += 2;
              float32x4_t v758 = *v754;
              float32x4_t v759 = v754[1];
              v754 += 2;
              float32x4_t v752 = vmlaq_f32(v752, v758, v756);
              float32x4_t v755 = vmlaq_f32(v755, v759, v757);
              v753 += 8;
            }
            while (v753 <= v739);
            float v760 = (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v752, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v752, 2), vaddq_f32(v752, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v752.f32, 1)))).f32[0]+ 0.0)+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v755, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v755, 2), vaddq_f32(v755, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v755.f32, 1)))).f32[0];
            if (v748 >= 7)
            {
              uint64_t v764 = 0;
              v761 = &v751->f32[v750];
              float v762 = &v754->f32[v750];
              uint64_t v765 = (v748 + 1) & 0x1FFFFFFF8;
              do
              {
                float32x4_t v766 = vmulq_f32(v751[v764], v754[v764]);
                float32x4_t v767 = vmulq_f32(v751[v764 + 1], v754[v764 + 1]);
                float v760 = (float)((float)((float)((float)((float)((float)((float)(v760 + v766.f32[0]) + v766.f32[1])
                                                             + v766.f32[2])
                                                     + v766.f32[3])
                                             + v767.f32[0])
                                     + v767.f32[1])
                             + v767.f32[2])
                     + v767.f32[3];
                v764 += 2;
                v765 -= 8;
              }
              while (v765);
              if (v748 + 1 != v749)
              {
                int v763 = v739 - (v746 + v749);
                goto LABEL_260;
              }
            }
            else
            {
              v761 = (float *)v751;
              float v762 = (float *)v754;
              int v763 = v739 - v746;
              do
              {
LABEL_260:
                float v768 = *v761++;
                float v769 = v768;
                float v770 = *v762++;
                float v760 = v760 + (float)(v769 * v770);
                --v763;
              }
              while (v763);
            }
            v743[v747] = v760 + v743[v747];
            if (++v747 == v737) {
              goto LABEL_235;
            }
            continue;
          }
        }
        if (v739 <= 0)
        {
          if (v737 < 8)
          {
            uint64_t v781 = 0;
LABEL_272:
            uint64_t v785 = v737 - v781;
            v786 = (float *)&v741[4 * v781 + 4 * v742];
            do
            {
              float *v786 = *v786 + 0.0;
              ++v786;
              --v785;
            }
            while (v785);
            goto LABEL_235;
          }
          uint64_t v781 = v737 & 0x7FFFFFF8;
          double v782 = (float32x4_t *)&v741[4 * v742 + 16];
          uint64_t v783 = v737 & 0xFFFFFFF8;
          do
          {
            float32x4_t v784 = vaddq_f32(*v782, v709);
            v782[-1] = vaddq_f32(v782[-1], v709);
            *double v782 = v784;
            v782 += 2;
            v783 -= 8;
          }
          while (v783);
          if (v781 != v737) {
            goto LABEL_272;
          }
        }
        else
        {
          long long v744 = (float *)(v738 + 12);
          do
          {
            float v745 = (float)(*(v744 - 3) * v928->f32[0]) + 0.0;
            if (v739 != 1)
            {
              float v745 = v745 + (float)(*(v744 - 2) * v928->f32[1]);
              if (v739 != 2)
              {
                float v745 = v745 + (float)(*(v744 - 1) * v928[1].f32[0]);
                if (v739 != 3)
                {
                  float v745 = v745 + (float)(*v744 * v928[1].f32[1]);
                  if (v739 != 4)
                  {
                    float v745 = v745 + (float)(v744[1] * v928[2].f32[0]);
                    if (v739 != 5)
                    {
                      float v745 = v745 + (float)(v744[2] * v928[2].f32[1]);
                      if (v739 != 6) {
                        float v745 = v745 + (float)(v744[3] * v928[3].f32[0]);
                      }
                    }
                  }
                }
              }
            }
            *long long v743 = v745 + *v743;
            ++v743;
            v744 += v740;
            --v737;
          }
          while (v737);
        }
LABEL_235:
        ++v735;
      }
      while (v735 != v734);
      uint64_t v629 = v932;
      uint64_t v944 = v734;
      if ((int)v734 >= 1)
      {
LABEL_276:
        uint64_t v937 = v626;
        uint64_t v787 = 0;
        v929 = (char *)&v933[1];
        uint64_t v788 = v944;
        while (1)
        {
          uint64_t v934 = v787;
          if (!*((unsigned char *)&v985 + v787)) {
            break;
          }
LABEL_277:
          uint64_t v787 = v934 + 1;
          if (v934 + 1 == v788)
          {
            int v9 = v919;
            float v11 = v921;
            uint64_t v626 = v937;
            uint64_t v13 = v938;
            uint64_t v15 = v940;
            int v628 = v931;
            uint64_t v629 = v932;
            long long v630 = v928;
            goto LABEL_138;
          }
        }
        uint64_t v789 = v933;
        uint64_t v790 = v934;
        v935 = (float32x4_t **)&v987[3 * v934];
        uint64_t v791 = *((unsigned int *)v935 + 3);
        long long v792 = v921;
        uint64_t v793 = v940;
        uint64_t v794 = v937;
        long long v795 = (float32x4_t *)v929;
        if ((int)v791 >= 1)
        {
          uint64_t v796 = LODWORD(v987[3 * v934 + 1]);
          if ((int)v796 >= 1)
          {
            uint64_t v797 = 0;
            uint64_t v798 = 4 * (*(_DWORD *)(*(void *)v943 + 32 * *(int *)(v940 + 80 * v937 + 4 * v934 + 24) + 12) + v941);
            long long v799 = &v921[v798];
            uint64_t v800 = 4 * SLODWORD(v987[3 * v934 + 2]);
            long long v801 = *v935;
            long long v802 = &v933->i8[4 * v796];
            uint64_t v803 = (uint64_t)&(*v935)[1];
            long long v804 = *v935;
            do
            {
              float v805 = *(float *)&v799[4 * v797];
              if (v796 >= 0xC)
              {
                uint64_t v806 = 0;
                unint64_t v814 = (unint64_t)&v792[4 * v797 + 4 + v798];
                unint64_t v815 = (unint64_t)&v792[4 * v797 + v798];
                BOOL v817 = v815 < (unint64_t)v802 && (unint64_t)v789 < v814;
                if (((unint64_t)v801 + v800 * v797 >= v814
                   || v815 >= (unint64_t)v801->u64 + 4 * v796 + v800 * v797)
                  && !v817)
                {
                  uint64_t v819 = v796 & 0x7FFFFFF8;
                  float v820 = v795;
                  float v821 = (float32x4_t *)v803;
                  do
                  {
                    float32x4_t v822 = vmulq_f32(v821[-1], v820[-1]);
                    float32x4_t v823 = vmulq_f32(*v821, *v820);
                    float v805 = (float)((float)((float)((float)((float)((float)((float)(v805 + v822.f32[0]) + v822.f32[1])
                                                                 + v822.f32[2])
                                                         + v822.f32[3])
                                                 + v823.f32[0])
                                         + v823.f32[1])
                                 + v823.f32[2])
                         + v823.f32[3];
                    v821 += 2;
                    v820 += 2;
                    v819 -= 8;
                  }
                  while (v819);
                  *(float *)&v799[4 * v797] = v805;
                  uint64_t v806 = v796 & 0xFFFFFFF8;
                  if (v806 == v796) {
                    goto LABEL_282;
                  }
                }
              }
              else
              {
                uint64_t v806 = 0;
              }
              uint64_t v807 = v796 - v806;
              uint64_t v808 = v806;
              float v809 = &v789->f32[v806];
              float v810 = &v804->f32[v808];
              do
              {
                float v811 = *v810++;
                float v812 = v811;
                float v813 = *v809++;
                float v805 = v805 + (float)(v812 * v813);
                *(float *)&v799[4 * v797] = v805;
                --v807;
              }
              while (v807);
LABEL_282:
              ++v797;
              v803 += v800;
              long long v804 = (float32x4_t *)((char *)v804 + v800);
            }
            while (v797 != v791);
          }
        }
        v936 = (int *)(v793 + 80 * v794 + 4 * v790 + 24);
        while (2)
        {
          uint64_t v945 = v790;
          if (*((unsigned char *)&v985 + v790)) {
            goto LABEL_305;
          }
          int v824 = *(_DWORD *)(*(void *)v943 + 32 * *v936 + 12);
          int v825 = *(_DWORD *)(*(void *)v943 + 32 * *(int *)(v940 + 80 * v937 + 4 * v945 + 24) + 12);
          float v826 = (float32x4_t **)&v987[3 * v945];
          float v827 = *v939;
          uint64_t v951 = *((int *)v939 + 4);
          uint64_t v828 = *((unsigned int *)v826 + 3);
          if (v824 < v825)
          {
            if ((int)v791 >= 1)
            {
              uint64_t v829 = *((unsigned int *)v826 + 2);
              if ((int)v828 >= 1 && (int)v829 >= 1)
              {
                uint64_t v831 = 0;
                float v832 = *v826;
                uint64_t v833 = v825 + (int)v951 * (v824 + v941);
                float v834 = &v827[4 * v833];
                uint64_t v835 = *((int *)v935 + 4);
                uint64_t v836 = *((int *)v826 + 4);
                uint64_t v949 = 4 * v951;
                uint64_t v950 = 4 * v833;
                uint64_t v837 = 4 * v836;
                uint64_t v838 = 4 * v829;
                uint64_t v839 = 4 * v835;
                uint64_t v840 = *v935;
                *(void *)&long long v946 = v832 + 1;
                v841 = v840 + 1;
                v947 = v840;
                uint64_t v948 = 4 * v833 + 4;
                do
                {
                  uint64_t v842 = 0;
                  uint64_t v843 = v950 + v949 * v831;
                  uint64_t v844 = v948 + v949 * v831;
                  unint64_t v845 = (unint64_t)v947 + v839 * v831;
                  unint64_t v846 = (unint64_t)v947 + v838 + v839 * v831;
                  uint64_t v847 = v831 * v951;
                  v848 = v832;
                  v849 = (float32x4_t *)v946;
                  do
                  {
                    uint64_t v850 = v842 + v847;
                    float v851 = *(float *)&v834[4 * v842 + 4 * v847];
                    if (v829 < 0xC)
                    {
                      uint64_t v852 = 0;
LABEL_319:
                      uint64_t v853 = v829 - v852;
                      uint64_t v854 = v852;
                      v855 = &v840->f32[v852];
                      v856 = &v848->f32[v854];
                      do
                      {
                        float v857 = *v856++;
                        float v858 = v857;
                        float v859 = *v855++;
                        float v851 = v851 + (float)(v858 * v859);
                        *(float *)&v834[4 * v850] = v851;
                        --v853;
                      }
                      while (v853);
                      goto LABEL_316;
                    }
                    uint64_t v852 = 0;
                    unint64_t v860 = (unint64_t)&v827[4 * v842 + v844];
                    unint64_t v861 = (unint64_t)&v827[4 * v842 + v843];
                    BOOL v863 = v861 < v846 && v845 < v860;
                    if ((unint64_t)v832 + v837 * v842 < v860
                      && v861 < (unint64_t)v832 + v838 + v837 * v842)
                    {
                      goto LABEL_319;
                    }
                    if (v863) {
                      goto LABEL_319;
                    }
                    uint64_t v865 = v829 & 0xFFFFFFF8;
                    v866 = v841;
                    v867 = v849;
                    do
                    {
                      float32x4_t v868 = vmulq_f32(v867[-1], v866[-1]);
                      float32x4_t v869 = vmulq_f32(*v867, *v866);
                      float v851 = (float)((float)((float)((float)((float)((float)((float)(v851 + v868.f32[0]) + v868.f32[1])
                                                                   + v868.f32[2])
                                                           + v868.f32[3])
                                                   + v869.f32[0])
                                           + v869.f32[1])
                                   + v869.f32[2])
                           + v869.f32[3];
                      v867 += 2;
                      v866 += 2;
                      v865 -= 8;
                    }
                    while (v865);
                    *(float *)&v834[4 * v850] = v851;
                    uint64_t v852 = v829 & 0xFFFFFFF8;
                    if (v852 != v829) {
                      goto LABEL_319;
                    }
LABEL_316:
                    ++v842;
                    v849 = (float32x4_t *)((char *)v849 + v837);
                    v848 = (float32x4_t *)((char *)v848 + v837);
                  }
                  while (v842 != v828);
                  ++v831;
                  v841 = (float32x4_t *)((char *)v841 + v839);
                  uint64_t v840 = (float32x4_t *)((char *)v840 + v839);
                }
                while (v831 != v791);
              }
            }
LABEL_305:
            uint64_t v788 = v944;
            uint64_t v790 = v945 + 1;
            if (v945 + 1 == v944) {
              goto LABEL_277;
            }
            continue;
          }
          break;
        }
        if ((int)v791 < 1) {
          goto LABEL_305;
        }
        uint64_t v870 = *((unsigned int *)v935 + 2);
        if ((int)v828 < 1 || (int)v870 < 1) {
          goto LABEL_305;
        }
        uint64_t v872 = 0;
        v873 = *v935;
        uint64_t v874 = v824 + (int)v951 * (v825 + v941);
        v875 = &v827[4 * v874];
        uint64_t v876 = *((int *)v826 + 4);
        uint64_t v877 = *((int *)v935 + 4);
        uint64_t v949 = 4 * v951;
        uint64_t v950 = 4 * v874;
        uint64_t v878 = 4 * v877;
        uint64_t v879 = 4 * v870;
        uint64_t v880 = 4 * v876;
        v881 = *v826;
        *(void *)&long long v946 = v873 + 1;
        v882 = v881 + 1;
        v947 = v881;
        uint64_t v948 = 4 * v874 + 4;
        while (2)
        {
          uint64_t v883 = 0;
          uint64_t v884 = v950 + v949 * v872;
          uint64_t v885 = v948 + v949 * v872;
          unint64_t v886 = (unint64_t)v947 + v880 * v872;
          unint64_t v887 = (unint64_t)v947 + v879 + v880 * v872;
          uint64_t v888 = v872 * v951;
          v889 = v873;
          v890 = (float32x4_t *)v946;
LABEL_347:
          uint64_t v891 = v883 + v888;
          float v892 = *(float *)&v875[4 * v883 + 4 * v888];
          if (v870 < 0xC)
          {
            uint64_t v893 = 0;
            goto LABEL_349;
          }
          uint64_t v893 = 0;
          unint64_t v901 = (unint64_t)&v827[4 * v883 + v885];
          unint64_t v902 = (unint64_t)&v827[4 * v883 + v884];
          BOOL v904 = v902 < v887 && v886 < v901;
          if ((unint64_t)v873 + v878 * v883 < v901 && v902 < (unint64_t)v873 + v879 + v878 * v883) {
            goto LABEL_349;
          }
          if (v904) {
            goto LABEL_349;
          }
          uint64_t v906 = v870 & 0xFFFFFFF8;
          v907 = v882;
          v908 = v890;
          do
          {
            float32x4_t v909 = vmulq_f32(v908[-1], v907[-1]);
            float32x4_t v910 = vmulq_f32(*v908, *v907);
            float v892 = (float)((float)((float)((float)((float)((float)((float)(v892 + v909.f32[0]) + v909.f32[1])
                                                         + v909.f32[2])
                                                 + v909.f32[3])
                                         + v910.f32[0])
                                 + v910.f32[1])
                         + v910.f32[2])
                 + v910.f32[3];
            v908 += 2;
            v907 += 2;
            v906 -= 8;
          }
          while (v906);
          *(float *)&v875[4 * v891] = v892;
          uint64_t v893 = v870 & 0xFFFFFFF8;
          if (v893 != v870)
          {
LABEL_349:
            uint64_t v894 = v870 - v893;
            uint64_t v895 = v893;
            v896 = &v881->f32[v893];
            v897 = &v889->f32[v895];
            do
            {
              float v898 = *v897++;
              float v899 = v898;
              float v900 = *v896++;
              float v892 = v892 + (float)(v899 * v900);
              *(float *)&v875[4 * v891] = v892;
              --v894;
            }
            while (v894);
          }
          ++v883;
          v890 = (float32x4_t *)((char *)v890 + v878);
          v889 = (float32x4_t *)((char *)v889 + v878);
          if (v883 == v791)
          {
            ++v872;
            v882 = (float32x4_t *)((char *)v882 + v880);
            v881 = (float32x4_t *)((char *)v881 + v880);
            if (v872 == v828) {
              goto LABEL_305;
            }
            continue;
          }
          goto LABEL_347;
        }
      }
LABEL_369:
      uint64_t v15 = v940;
LABEL_138:
      int v625 = *(_DWORD *)(v943 + 52);
LABEL_139:
      ++v626;
      v628 += 20;
    }
    while (v626 < v625);
  }
  return v25 / (float)v942;
}

void vl_pose_g_ps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v213 = v9;
  uint64_t v238 = v10;
  uint64_t v227 = v11;
  v270[1288] = *MEMORY[0x263EF8340];
  float v211 = v13;
  uint64_t v212 = v12;
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = *((void *)v13 + 15);
  int v230 = v14 * v15;
  v18.i32[0] = *(_DWORD *)(v17 + 120);
  int v255 = 0;
  uint64_t v254 = 0;
  int v253 = 0;
  float32x2_t v252 = 0;
  long long v250 = 0u;
  long long v251 = 0u;
  long long v248 = 0u;
  long long v249 = 0u;
  long long v246 = 0u;
  long long v247 = 0u;
  float v225 = v19;
  uint64_t v206 = *v19;
  float64x2_t v244 = 0u;
  float64x2_t v245 = 0u;
  float64x2_t v242 = 0u;
  float64x2_t v243 = 0u;
  float64x2_t v240 = 0u;
  float64x2_t v241 = 0u;
  uint64_t v207 = v16 / ((int)v14 * (int)v15);
  uint64_t v208 = v17;
  if ((int)v207 >= 1)
  {
    int v20 = 0;
    float v21 = 0;
    uint64_t v22 = (int)v15;
    uint64_t v23 = 4 * (int)v15;
    uint64_t v209 = (32 * (int)v15) | 0x10;
    uint64_t v210 = 32 * (int)v15;
    float v223 = *(float *)v18.i32;
    float32x4_t v216 = (float32x4_t)vdupq_n_s32(0x479C4000u);
    float32x4_t v218 = (float32x4_t)vdupq_lane_s32(v18, 0);
    int32x4_t v214 = vdupq_n_s32(0x3E99999Au);
    int8x16_t v215 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
    uint64_t v236 = v14;
    uint64_t v24 = v23 * ((int)v14 + 16);
    while (1)
    {
      float v232 = v21;
      int ptr = v20;
      uint64_t v25 = 24 * (void)v21;
      float v26 = &v263[3 * (void)v21];
      *((_DWORD *)v26 + 2) = v15;
      *((_DWORD *)v26 + 3) = v14;
      v26[2] = v22;
      uint64_t v27 = v22;
      float v228 = (char *)pmem_alloc_ex(v24, 0, 0);
      *float v26 = &v228[v210];
      uint64_t v28 = &v262[v25];
      *((_DWORD *)v28 + 2) = v15;
      *((_DWORD *)v28 + 3) = v236;
      *((void *)v28 + 2) = v27;
      unint64_t v29 = pmem_alloc_ex(v24, 0, 0);
      uint64_t v22 = v27;
      LODWORD(v14) = v236;
      *(void *)uint64_t v28 = v29 + v210;
      if ((int)v236 >= 1 && (int)v15 >= 1) {
        break;
      }
LABEL_3:
      float v21 = v232 + 1;
      int v20 = ptr + v230;
      if (v232 + 1 == (char *)v207) {
        goto LABEL_26;
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v32 = v232 * v230;
    unint64_t v33 = v210 + v29;
    uint64_t v34 = *((void *)v211 + 16);
    float v35 = &v228[v210];
    uint64_t v36 = (int32x4_t *)(v29 + v209);
    uint64_t v37 = (float32x4_t *)&v228[v209];
    int v38 = ptr;
    while (v15 >= 0xC)
    {
      uint64_t v39 = 0;
      if (v32 + (int)v31 * (int)v15 + (int)v15 - 1 < v32 + (int)v31 * (int)v15
        || (unint64_t)(v15 - 1) >> 32 != 0)
      {
        goto LABEL_13;
      }
      unint64_t v47 = v33 + v23 * v31;
      float v48 = &v35[v23 * v31];
      if (v47 - (unint64_t)v48 < 0x20) {
        goto LABEL_13;
      }
      uint64_t v49 = v34 + 4 * (v32 + (int)v31 * (int)v15);
      if ((unint64_t)&v48[-v49] < 0x20) {
        goto LABEL_13;
      }
      if (v47 - v49 < 0x20) {
        goto LABEL_13;
      }
      uint64_t v50 = v37;
      uint64_t v51 = v15 & 0xFFFFFFF8;
      int v52 = v36;
      int v53 = v38;
      do
      {
        int32x2_t v54 = (float32x4_t *)(v34 + 4 * v53);
        float32x4_t v55 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vabsq_f32(v54[1]), v216), v215, (int8x16_t)v54[1]), v218);
        v50[-1] = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vabsq_f32(*v54), v216), v215, *(int8x16_t *)v54), v218);
        *uint64_t v50 = v55;
        v52[-1] = v214;
        *int v52 = v214;
        v53 += 8;
        v52 += 2;
        v50 += 2;
        v51 -= 8;
      }
      while (v51);
      uint64_t v39 = v15 & 0x7FFFFFF8;
      if ((v15 & 0xFFFFFFF8) != v15) {
        goto LABEL_13;
      }
LABEL_17:
      ++v31;
      v38 += v15;
      uint64_t v36 = (int32x4_t *)((char *)v36 + v23);
      uint64_t v37 = (float32x4_t *)((char *)v37 + v23);
      v30 += v27;
      if (v31 == v236) {
        goto LABEL_3;
      }
    }
    uint64_t v39 = 0;
LABEL_13:
    uint64_t v41 = v15 - v39;
    uint64_t v42 = 4 * (v39 + v30);
    uint64_t v43 = (_DWORD *)(v33 + v42);
    uint64_t v44 = (float *)&v35[v42];
    int v45 = v38 + v39;
    do
    {
      float v46 = *(float *)(v34 + 4 * v45);
      if (fabsf(v46) > 80000.0) {
        float v46 = NAN;
      }
      *v44++ = v46 - v223;
      *v43++ = 1050253722;
      ++v45;
      --v41;
    }
    while (v41);
    goto LABEL_17;
  }
LABEL_26:
  g_coords_diff((double *)(v227 + 240), (double *)v211 + 1, (uint64_t)&v240);
  v239[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v240), v241);
  v239[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v242), v243);
  v239[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v244), v245);
  double v56 = *(float *)(v212 + 232);
  double v57 = *(float *)(v212 + 236);
  double v58 = *(float *)(v212 + 240);
  double v59 = 0.0;
  double v60 = v58 * -0.0 + v57 * 0.0;
  double v61 = v58 + v56 * -0.0;
  double v62 = -(v57 - v56 * 0.0);
  double v63 = v61 * v58 - v62 * v57;
  double v64 = v62 * v56 - v60 * v58;
  double v65 = v60 * v57 - v61 * v56;
  double v66 = sqrt(v64 * v64 + v63 * v63 + v65 * v65);
  double v67 = 0.0;
  double v68 = 0.0;
  double v69 = 0.0;
  if (v66 > 0.0)
  {
    double v67 = v63 / v66;
    double v68 = v64 / v66;
    double v69 = v65 / v66;
  }
  double v70 = sqrt(v61 * v61 + v60 * v60 + v62 * v62);
  double v71 = 0.0;
  double v72 = 0.0;
  if (v70 > 0.0)
  {
    double v59 = v60 / v70;
    double v71 = v61 / v70;
    double v72 = v62 / v70;
  }
  double v73 = sqrt(v57 * v57 + v56 * v56 + v58 * v58);
  double v74 = 0.0;
  double v75 = 0.0;
  double v76 = 0.0;
  if (v73 > 0.0)
  {
    double v74 = v56 / v73;
    double v75 = v57 / v73;
    double v76 = v58 / v73;
  }
  double v77 = v67 * 0.0 + 0.0 + v68 * 0.0 + v69 * 0.0;
  double v78 = v59 * v77 + 0.0 + v71 * (v59 * v77 + 0.0) + v72 * 0.0;
  *(double *)&long long v246 = v67;
  *((double *)&v246 + 1) = v68;
  *(double *)&long long v247 = v69;
  *((double *)&v247 + 1) = v59;
  *(double *)&long long v248 = v71;
  *((double *)&v248 + 1) = v72;
  *(double *)&long long v249 = v74;
  *((double *)&v249 + 1) = v75;
  *(double *)&long long v250 = v76;
  *((double *)&v250 + 1) = -v77;
  *(double *)&long long v251 = -v78;
  *((double *)&v251 + 1) = -(v74 * v77 + 0.0 + v75 * v78 + v76 * (v74 * v77 + 0.0 + v75 * v78));
  uint64_t v79 = v208;
  if ((int)v206 >= 1)
  {
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    float v229 = 0;
    float v231 = 0;
    uint64_t v220 = 0;
    uint64_t v221 = 0;
    uint64_t v83 = 0;
    float v233 = 0;
    ptra = 0;
    uint64_t v84 = 0;
    uint64_t v222 = 0;
    float v224 = 0;
    uint64_t v237 = 0;
    uint64_t v217 = 0;
    uint64_t v85 = 0;
    uint64_t v219 = 0;
    while (1)
    {
      float v86 = (float *)(*(void *)(v238 + 32) + v81);
      float v87 = 1.0
          - (float)((float)(sqrtf(*v86) - *(float *)(v79 + 308)) / (float)(*(float *)(v79 + 312) - *(float *)(v79 + 308)));
      float v88 = 0.0;
      if (v87 >= 0.0)
      {
        float v88 = 1.0;
        if (v87 <= 1.0) {
          float v88 = v87;
        }
      }
      uint64_t v89 = *(int *)(*(void *)(v238 + 8) + v81);
      uint64_t v90 = v225[1];
      float v91 = (float)(1.0 - powf((float)(*v86 / v86[1]) / *(float *)(v79 + 304), 8.0)) * v88;
      float v92 = v91 * 32.0;
      if (v91 > 1.0) {
        float v92 = 32.0;
      }
      if (v91 >= 0.0) {
        float v93 = v92;
      }
      else {
        float v93 = 0.0;
      }
      if (v93 < 0.001) {
        goto LABEL_34;
      }
      double v94 = *(float *)(v90 + v80);
      double v95 = *(float *)(v90 + v80 + 4);
      float v96 = *((double *)&v250 + 1) + *(double *)&v246 + *((double *)&v246 + 1) * v94 + *(double *)&v247 * v95;
      float v97 = *(double *)&v251 + *((double *)&v247 + 1) + *(double *)&v248 * v94 + *((double *)&v248 + 1) * v95;
      float v98 = *((double *)&v251 + 1) + *(double *)&v249 + *((double *)&v249 + 1) * v94 + *(double *)&v250 * v95;
      float v99 = atan2f(v97, v96);
      float v100 = v98 / sqrt((float)((float)(v97 * v97) + (float)(v96 * v96)));
      float v101 = atanf(v100);
      uint64_t v102 = *(void *)(v227 + 104);
      *(void *)&long long v264 = 0x40C90FDB00000000;
      double v103 = *(float *)(v102 + 8 * v89 + 4) + 3.14159265;
      double v104 = v103 + -1.04719758;
      *(float *)&double v104 = v103 + -1.04719758;
      *(float *)&double v103 = v103 + 1.04719758;
      angle_combine((float *)&v264, *(int32x2_t *)&v104, *(float32_t *)&v103);
      if (*(_DWORD *)(v79 + 124) && *(float *)(v212 + 248) > 0.0)
      {
        float v106 = *(float *)(v212 + 252);
        float v107 = v99 + *(float *)(v212 + 244);
        *(float *)v105.i32 = v107 - v106;
        angle_combine((float *)&v264, v105, v106 + v107);
      }
      if (*((float *)&v264 + 1) == 0.0) {
        goto LABEL_34;
      }
      uint64_t v108 = v83 + 1;
      if (v83 >= v221)
      {
        uint64_t v114 = 2 * v221;
        if (!v221) {
          uint64_t v114 = 32;
        }
        if (v114 <= v83) {
          uint64_t v114 = v83 + 1;
        }
        uint64_t v109 = v219;
        if (v114)
        {
          uint64_t v221 = v114;
          ptra = malloc_type_realloc(ptra, 8 * v114, 0x62A5CA65uLL);
          *((void *)ptra + v83) = v264;
          uint64_t v110 = v85 + 1;
          if (v85 < v219) {
            goto LABEL_50;
          }
        }
        else
        {
          uint64_t v221 = 0;
          *((void *)ptra + v83) = v264;
          uint64_t v110 = v85 + 1;
          if (v85 < v219)
          {
LABEL_50:
            v224[v85] = v82;
            uint64_t v111 = v84 + 1;
            uint64_t v112 = v222;
            if (v84 >= v222) {
              goto LABEL_66;
            }
            goto LABEL_51;
          }
        }
      }
      else
      {
        uint64_t v109 = v219;
        *((void *)ptra + v83) = v264;
        uint64_t v110 = v85 + 1;
        if (v85 < v219) {
          goto LABEL_50;
        }
      }
      uint64_t v115 = 2 * v109;
      if (!v109) {
        uint64_t v115 = 64;
      }
      if (v115 <= v85) {
        uint64_t v115 = v110;
      }
      if (v115)
      {
        uint64_t v219 = v115;
        float v224 = malloc_type_realloc(v224, 4 * v115, 0x1CC7D690uLL);
        v224[v85] = v82;
        uint64_t v111 = v84 + 1;
        uint64_t v112 = v222;
        if (v84 >= v222) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v219 = 0;
        v224[v85] = v82;
        uint64_t v111 = v84 + 1;
        uint64_t v112 = v222;
        if (v84 >= v222)
        {
LABEL_66:
          uint64_t v116 = v112;
          uint64_t v117 = 2 * v112;
          if (!v116) {
            uint64_t v117 = 21;
          }
          if (v117 <= v84) {
            uint64_t v117 = v111;
          }
          uint64_t v113 = v217;
          if (v117)
          {
            uint64_t v222 = v117;
            float v233 = (char *)malloc_type_realloc(v233, 12 * v117, 0xE8B161DFuLL);
          }
          else
          {
            uint64_t v222 = 0;
          }
          goto LABEL_75;
        }
      }
LABEL_51:
      uint64_t v113 = v217;
LABEL_75:
      float v118 = &v233[12 * v84];
      uint64_t v119 = *(void *)(v227 + 8) + 12 * (int)v89;
      uint64_t v120 = *(void *)v119;
      *((_DWORD *)v118 + 2) = *(_DWORD *)(v119 + 8);
      *(void *)float v118 = v120;
      double v121 = *(float *)v118;
      double v122 = *((float *)v118 + 1);
      double v123 = *((float *)v118 + 2);
      float64_t v124 = v244.f64[1] + v240.f64[1] * v122 + v240.f64[0] * v121 + v241.f64[0] * v123;
      float64_t v125 = v242.f64[0] * v122 + v241.f64[1] * v121 + v242.f64[1] * v123;
      float64_t v126 = v245.f64[1] + v243.f64[1] * v122 + v243.f64[0] * v121 + v244.f64[0] * v123;
      *(float *)&float64_t v124 = v124;
      *(float *)&double v122 = v245.f64[0] + v125;
      *(_DWORD *)float v118 = LODWORD(v124);
      *((_DWORD *)v118 + 1) = LODWORD(v122);
      *(float *)&float64_t v126 = v126;
      *((_DWORD *)v118 + 2) = LODWORD(v126);
      if (v82 >= v220)
      {
        uint64_t v127 = 2 * v220;
        if (!v220) {
          uint64_t v127 = 32;
        }
        if (v127 <= v82) {
          uint64_t v127 = v82 + 1;
        }
        if (v127)
        {
          uint64_t v220 = v127;
          float v229 = (char *)malloc_type_realloc(v229, 8 * v127, 0xE684AE95uLL);
        }
        else
        {
          uint64_t v220 = 0;
        }
      }
      float v128 = (float *)&v229[8 * v82];
      *float v128 = v99;
      v128[1] = v101;
      if (v237 >= v113)
      {
        uint64_t v129 = 2 * v113;
        if (!v113) {
          uint64_t v129 = 128;
        }
        if (v129 <= v237) {
          uint64_t v129 = v237 + 1;
        }
        if (v129)
        {
          uint64_t v217 = v129;
          float v231 = malloc_type_realloc(v231, 2 * v129, 0xFE88C135uLL);
        }
        else
        {
          uint64_t v217 = 0;
        }
      }
      *((_WORD *)v231 + v237) = (int)v93;
      uint64_t v85 = v110;
      ++v237;
      uint64_t v84 = v111;
      uint64_t v83 = v108;
      ++v82;
      uint64_t v79 = v208;
LABEL_34:
      v81 += 8;
      v80 += 288;
      if (8 * v206 == v81) {
        goto LABEL_93;
      }
    }
  }
  uint64_t v219 = 0;
  uint64_t v222 = 0;
  float v224 = 0;
  uint64_t v85 = 0;
  uint64_t v217 = 0;
  float v231 = 0;
  float v233 = 0;
  ptra = 0;
  uint64_t v237 = 0;
  uint64_t v84 = 0;
  uint64_t v220 = 0;
  uint64_t v221 = 0;
  uint64_t v83 = 0;
  float v229 = 0;
  uint64_t v82 = 0;
LABEL_93:
  if (v213)
  {
    long long v269 = 0u;
    long long v268 = 0u;
    long long v267 = 0u;
    long long v266 = 0u;
    long long v265 = 0u;
    long long v264 = 0u;
    g_coords_delta((double *)(*(void *)v213 + 464 * *(int *)(v213 + 64)), (double *)&v246, (double *)&v264);
    uint64_t v130 = *(void *)(v213 + 8);
    if (v130 >= 1)
    {
      if (*(_DWORD *)(v213 + 64))
      {
        uint64_t v131 = 0;
        uint64_t v132 = 0;
        uint64_t v133 = v213;
        while (1)
        {
          while (1)
          {
            if (*(_DWORD *)(v133 + 64))
            {
              float v134 = *(float **)(v238 + 32);
              float v135 = 1.0
                   - (float)((float)(sqrtf(*v134) - *(float *)(v79 + 308))
                           / (float)(*(float *)(v79 + 312) - *(float *)(v79 + 308)));
              float v136 = 0.0;
              if (v135 >= 0.0)
              {
                float v136 = 1.0;
                if (v135 <= 1.0) {
                  float v136 = v135;
                }
              }
              float v137 = (float *)(*(void *)(v213 + 16) + v131);
              float v138 = *v137;
              float v139 = v137[1];
              float v140 = v137[2];
              uint64_t v141 = **(int **)(*(void *)v213 + 424);
              float v142 = (float)(1.0 - powf((float)(*v134 / v134[1]) / *(float *)(v79 + 304), 8.0)) * v136;
              float v143 = v142 * 32.0;
              if (v142 > 1.0) {
                float v143 = 32.0;
              }
              float v144 = v142 >= 0.0 ? v143 : 0.0;
              if (v144 >= 0.001)
              {
                double v145 = *((double *)&v269 + 1)
                     + *((double *)&v267 + 1) * v139
                     + *(double *)&v267 * v138
                     + *(double *)&v268 * v140;
                float v146 = *((double *)&v268 + 1)
                     + *((double *)&v264 + 1) * v139
                     + *(double *)&v264 * v138
                     + *(double *)&v265 * v140;
                float v147 = *(double *)&v269
                     + *(double *)&v266 * v139
                     + *((double *)&v265 + 1) * v138
                     + *((double *)&v266 + 1) * v140;
                float v148 = v145;
                float v149 = atan2f(v147, v146);
                float v150 = atanf(v148 / sqrtf((float)(v147 * v147) + (float)(v146 * v146)));
                uint64_t v151 = *(void *)(v227 + 104);
                v256.f64[0] = 12831.7109;
                double v152 = *(float *)(v151 + 8 * v141 + 4) + 3.14159265;
                double v153 = v152 + -1.04719758;
                *(float *)&double v153 = v152 + -1.04719758;
                *(float *)&double v152 = v152 + 1.04719758;
                angle_combine((float *)&v256, *(int32x2_t *)&v153, *(float32_t *)&v152);
                if (*(_DWORD *)(v79 + 124) && *(float *)(v212 + 248) > 0.0)
                {
                  float v155 = *(float *)(v212 + 252);
                  float v156 = v149 + *(float *)(v212 + 244);
                  *(float *)v154.i32 = v156 - v155;
                  angle_combine((float *)&v256, v154, v155 + v156);
                }
                if (*((float *)v256.f64 + 1) != 0.0) {
                  break;
                }
              }
            }
            uint64_t v133 = v213;
            ++v132;
            v131 += 12;
            if (v130 <= v132) {
              goto LABEL_154;
            }
          }
          uint64_t v226 = v83 + 1;
          if (v83 >= v221)
          {
            uint64_t v157 = 2 * v221;
            if (!v221) {
              uint64_t v157 = 32;
            }
            if (v157 <= v83) {
              uint64_t v157 = v83 + 1;
            }
            if (v157)
            {
              uint64_t v221 = v157;
              ptra = malloc_type_realloc(ptra, 8 * v157, 0x7802388DuLL);
            }
            else
            {
              uint64_t v221 = 0;
            }
          }
          *((void *)ptra + v83) = *(void *)&v256.f64[0];
          uint64_t v158 = v85 + 1;
          if (v85 < v219) {
            goto LABEL_127;
          }
          uint64_t v159 = 2 * v219;
          if (!v219) {
            uint64_t v159 = 64;
          }
          if (v159 <= v85) {
            uint64_t v159 = v85 + 1;
          }
          if (v159) {
            break;
          }
          uint64_t v219 = 0;
          v224[v85] = v82;
          uint64_t v160 = v84 + 1;
          uint64_t v161 = v222;
          if (v84 >= v222)
          {
LABEL_130:
            uint64_t v163 = v161;
            uint64_t v164 = 2 * v161;
            if (!v163) {
              uint64_t v164 = 21;
            }
            if (v164 <= v84) {
              uint64_t v164 = v160;
            }
            uint64_t v162 = v217;
            if (v164)
            {
              uint64_t v222 = v164;
              float v233 = (char *)malloc_type_realloc(v233, 12 * v164, 0xD0827E02uLL);
            }
            else
            {
              uint64_t v222 = 0;
            }
            goto LABEL_137;
          }
LABEL_128:
          uint64_t v162 = v217;
LABEL_137:
          float v165 = &v233[12 * v84];
          uint64_t v166 = *(void *)(v227 + 8) + 12 * (int)v141;
          uint64_t v167 = *(void *)v166;
          *((_DWORD *)v165 + 2) = *(_DWORD *)(v166 + 8);
          *(void *)float v165 = v167;
          double v168 = *(float *)v165;
          double v169 = *((float *)v165 + 1);
          double v170 = *((float *)v165 + 2);
          float64_t v171 = v244.f64[1] + v240.f64[1] * v169 + v240.f64[0] * v168 + v241.f64[0] * v170;
          float64_t v172 = v242.f64[0] * v169 + v241.f64[1] * v168 + v242.f64[1] * v170;
          float64_t v173 = v245.f64[1] + v243.f64[1] * v169 + v243.f64[0] * v168 + v244.f64[0] * v170;
          *(float *)&float64_t v171 = v171;
          *(float *)&double v169 = v245.f64[0] + v172;
          *(_DWORD *)float v165 = LODWORD(v171);
          *((_DWORD *)v165 + 1) = LODWORD(v169);
          *(float *)&float64_t v173 = v173;
          *((_DWORD *)v165 + 2) = LODWORD(v173);
          if (v82 >= v220)
          {
            uint64_t v174 = 2 * v220;
            if (!v220) {
              uint64_t v174 = 32;
            }
            if (v174 <= v82) {
              uint64_t v174 = v82 + 1;
            }
            if (v174)
            {
              uint64_t v220 = v174;
              float v229 = (char *)malloc_type_realloc(v229, 8 * v174, 0xFBE007C4uLL);
            }
            else
            {
              uint64_t v220 = 0;
            }
          }
          float v175 = (float *)&v229[8 * v82];
          *float v175 = v149;
          v175[1] = v150;
          if (v237 >= v162)
          {
            uint64_t v176 = 2 * v162;
            if (!v162) {
              uint64_t v176 = 128;
            }
            if (v176 <= v237) {
              uint64_t v176 = v237 + 1;
            }
            if (v176)
            {
              uint64_t v217 = v176;
              float v231 = malloc_type_realloc(v231, 2 * v176, 0xD1CE3155uLL);
            }
            else
            {
              uint64_t v217 = 0;
            }
          }
          *((_WORD *)v231 + v237) = (int)v144;
          uint64_t v85 = v158;
          uint64_t v133 = v213;
          uint64_t v130 = *(void *)(v213 + 8);
          ++v237;
          uint64_t v84 = v160;
          uint64_t v83 = v226;
          ++v82;
          ++v132;
          v131 += 12;
          if (v130 <= v132) {
            goto LABEL_154;
          }
        }
        uint64_t v219 = v159;
        float v224 = malloc_type_realloc(v224, 4 * v159, 0x7A1F4571uLL);
LABEL_127:
        v224[v85] = v82;
        uint64_t v160 = v84 + 1;
        uint64_t v161 = v222;
        if (v84 >= v222) {
          goto LABEL_130;
        }
        goto LABEL_128;
      }
    }
  }
LABEL_154:
  double v177 = *(double *)(v212 + 200) - *((double *)v211 + 10);
  double v178 = *(double *)(v212 + 208) - *((double *)v211 + 11);
  double v179 = *(double *)(v212 + 216) - *((double *)v211 + 12);
  double v180 = v178 * *((double *)v211 + 6) + *((double *)v211 + 3) * v177 + *((double *)v211 + 9) * v179;
  float32x2_t v252 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*((float64x2_t *)v211 + 2), v178), *(float64x2_t *)(v211 + 2), v177), *(float64x2_t *)(v211 + 14), v179));
  *(float *)&double v177 = v180;
  int v253 = LODWORD(v177);
  bzero(&v264, 0x28A0uLL);
  *(void *)(v79 + 280) = 1;
  int v181 = g_ps_cyl_z((uint64_t)v229, (uint64_t)v231, (uint64_t)v233, (uint64_t)ptra, v82, (uint64_t)&v252, (uint64_t)&v254, (uint64_t)v263, (uint64_t)v262, v207, v79 + 224, (uint64_t)&v264);
  if (*(void *)(v79 + 280) <= 1uLL) {
    unint64_t v182 = 1;
  }
  else {
    unint64_t v182 = *(void *)(v79 + 280);
  }
  if (v181 > 0)
  {
    uint64_t v183 = v181;
    float v184 = (float *)v270;
    uint64_t v185 = v181;
    while (*v184 <= (float)(*(float *)(v79 + 264) * 32.0))
    {
      v184 += 26;
      if (!--v185) {
        goto LABEL_161;
      }
    }
    *(void *)(v79 + 280) = v182;
    goto LABEL_166;
  }
LABEL_161:
  int v186 = g_ps_cyl_z((uint64_t)v229, (uint64_t)v231, (uint64_t)v233, (uint64_t)ptra, v82, (uint64_t)&v252, (uint64_t)&v254, (uint64_t)v263, (uint64_t)v262, v207, v79 + 224, (uint64_t)&v264);
  unint64_t v187 = *(void *)(v79 + 280);
  if (v182 > v187) {
    unint64_t v187 = v182;
  }
  *(void *)(v79 + 280) = v187;
  if (v186 >= 1)
  {
    uint64_t v183 = v186;
LABEL_166:
    float v188 = (double *)&v264;
    do
    {
      float64x2_t v260 = 0u;
      float64x2_t v261 = 0u;
      float64x2_t v258 = 0u;
      float64x2_t v259 = 0u;
      float64x2_t v256 = 0u;
      float64x2_t v257 = 0u;
      uint64_t v190 = *(void *)a9;
      uint64_t v191 = *(void *)(a9 + 16);
      if (*(void *)a9 >= v191)
      {
        if (v191) {
          uint64_t v192 = 2 * v191;
        }
        else {
          uint64_t v192 = 5;
        }
        if (v192 <= v190) {
          uint64_t v193 = v190 + 1;
        }
        else {
          uint64_t v193 = v192;
        }
        if (v193)
        {
          *(void *)(a9 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a9 + 8), 48 * v193, 0x779DECABuLL);
          uint64_t v190 = *(void *)a9;
        }
        *(void *)(a9 + 16) = v193;
      }
      *(void *)a9 = v190 + 1;
      float v189 = (float32x4_t *)(*(void *)(a9 + 8) + 48 * v190);
      g_coords_conv((double *)&v246, v188, v256.f64);
      *float v189 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v256), v257);
      v189[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v258), v259);
      v189[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v260), v261);
      v188 += 13;
      --v183;
    }
    while (v183);
  }
  if (*(uint64_t *)a9 >= 1)
  {
    uint64_t v194 = 0;
    uint64_t v195 = 0;
    do
    {
      g_coordsf_diff(*(void *)(a9 + 8) + v194, (uint64_t)v239, *(void *)(a9 + 8) + v194);
      ++v195;
      v194 += 48;
    }
    while (v195 < *(void *)a9);
  }
  if ((int)v207 >= 1)
  {
    uint64_t v196 = v207;
    float v197 = (uint64_t *)v262;
    float v198 = v263;
    while (1)
    {
      if (!*v198) {
        goto LABEL_189;
      }
      uint64_t v200 = *(void *)(*v198 - 32 * v198[2] - 8);
      signed int v201 = atomic_fetch_add((atomic_uint *volatile)(v200 + 24), 0xFFFFFFFF) - 1;
      if (v201 < 0) {
        goto LABEL_196;
      }
      if (v201) {
        break;
      }
      unint64_t v205 = -*(void *)(v200 + 8);
      atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_add(&global_stats[2], 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_add(global_stats, v205);
      atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_add(&_pmem_total_blocks, 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_add(&pmem_bytes_allocated, v205);
      (*(void (**)(uint64_t))(v200 + 40))(v200);
      free((void *)v200);
      *float v198 = 0;
      uint64_t v202 = *v197;
      if (!*v197) {
        goto LABEL_184;
      }
LABEL_190:
      uint64_t v203 = *(void *)(v202 - 32 * v197[2] - 8);
      signed int v204 = atomic_fetch_add((atomic_uint *volatile)(v203 + 24), 0xFFFFFFFF) - 1;
      if (v204 < 0) {
LABEL_196:
      }
        __assert_rtn("pmem_free", "pmem.c", 302, "count >= 0 && \"Negative count! Something is broken, double free? Memory corruption?\"");
      if (v204)
      {
        atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_or(&global_stats[2], 0);
        atomic_fetch_or(global_stats, 0);
        atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_or(&_pmem_total_blocks, 0);
        atomic_fetch_or(&pmem_bytes_allocated, 0);
      }
      else
      {
        unint64_t v199 = -*(void *)(v203 + 8);
        atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(&global_stats[2], 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(global_stats, v199);
        atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(&_pmem_total_blocks, 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(&pmem_bytes_allocated, v199);
        (*(void (**)(uint64_t))(v203 + 40))(v203);
        free((void *)v203);
      }
LABEL_184:
      *float v197 = 0;
      v197 += 3;
      v198 += 3;
      if (!--v196) {
        goto LABEL_195;
      }
    }
    atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
    atomic_fetch_or(&global_stats[2], 0);
    atomic_fetch_or(global_stats, 0);
    atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
    atomic_fetch_or(&_pmem_total_blocks, 0);
    atomic_fetch_or(&pmem_bytes_allocated, 0);
LABEL_189:
    *float v198 = 0;
    uint64_t v202 = *v197;
    if (!*v197) {
      goto LABEL_184;
    }
    goto LABEL_190;
  }
LABEL_195:
  free(v224);
  free(v231);
  free(v229);
  free(v233);
  free(ptra);
}

float angle_combine(float *a1, int32x2_t a2, float32_t a3)
{
  float v3 = a1[1];
  float v4 = (float)(*(float *)a2.i32 - *a1)
     - (double)(int)((__PAIR64__((int)((float)(*(float *)a2.i32 - *a1) * 0.159154943), *(float *)a2.i32 - *a1)
                    - COERCE_UNSIGNED_INT(0.0)) >> 32)
     * 6.28318531;
  float v5 = (float)(a3 - *a1)
     - (double)(int)((__PAIR64__((int)((float)(a3 - *a1) * 0.159154943), a3 - *a1) - COERCE_UNSIGNED_INT(0.0)) >> 32)
     * 6.28318531;
  if (v4 <= 0.0 || v3 <= v4)
  {
    if (v5 <= 0.0 || v3 <= v5)
    {
      v8.f32[0] = *a1 + (float)(v3 * 0.5);
      v8.f32[1] = a3;
      float32x2_t v9 = vsub_f32(v8, (float32x2_t)vdup_lane_s32(a2, 0));
      float64x2_t v10 = vcvtq_f64_f32(v9);
      a2 = vadd_s32(vmovn_s64(vcvtq_s64_f64(vmulq_f64(v10, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL)))), vcltz_f32(v9));
      v11.i64[0] = a2.i32[0];
      v11.i64[1] = a2.i32[1];
      float64x2_t v12 = vmlaq_f64(v10, (float64x2_t)vdupq_n_s64(0xC01921FB54442D18), vcvtq_f64_s64(v11));
      a2.i32[0] = vmovn_s64(vcgtq_f64(v12, (float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1))).u32[0];
      if (a2.i8[0]) {
        *(void *)a1 = 0;
      }
    }
    else
    {
      a1[1] = v5;
    }
  }
  else
  {
    float v13 = *(float *)a2.i32
        + (double)(int)((__PAIR64__((int)(*(float *)a2.i32 * 0.159154943), a2.u32[0]) - COERCE_UNSIGNED_INT(0.0)) >> 32)
        * -6.28318531;
    *a1 = v13;
    if (v3 <= v5)
    {
      *(float *)a2.i32 = v3 - v4;
      a1[1] = v3 - v4;
    }
    else
    {
      *(float *)a2.i32 = (float)(a3 - *(float *)a2.i32)
                       + (double)(int)((__PAIR64__((int)((float)(a3 - *(float *)a2.i32) * 0.159154943), a3 - *(float *)a2.i32)- COERCE_UNSIGNED_INT(0.0)) >> 32)* -6.28318531;
      a1[1] = *(float *)a2.i32;
    }
  }
  return *(float *)a2.i32;
}

uint64_t pqueue_push(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = *(int *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 36);
  int v8 = v7 + 1;
  if (*(_DWORD *)(a1 + 44)) {
    BOOL v9 = v7 == v6 - 1;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    if (v8 >= 0) {
      int v19 = v7 + 1;
    }
    else {
      int v19 = v7 + 2;
    }
    int v20 = v19 >> 1;
    uint64_t v17 = *(double **)a1;
    if (v20 <= v7)
    {
      float v21 = &v17[3 * v20 + 1];
      unsigned int v16 = -1;
      double v22 = 1.79769313e308;
      do
      {
        double v23 = *v21;
        v21 += 3;
        double v24 = v23;
        if (v23 < v22)
        {
          double v22 = v24;
          unsigned int v16 = v20;
        }
        ++v20;
      }
      while (v8 != v20);
    }
    else
    {
      unsigned int v16 = -1;
    }
    if (v17[3 * (int)v16 + 1] >= a3) {
      return 0xFFFFFFFFLL;
    }
    signed int v18 = v16;
  }
  else
  {
    *(_DWORD *)(a1 + 36) = v8;
    if (v8 >= (int)v6)
    {
      *(_DWORD *)(a1 + 40) = 2 * v6;
      *(void *)a1 = malloc_type_realloc(*(void **)a1, 48 * v6, 0x1080040A085CBA5uLL);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v10 = *(void *)(a1 + 8);
      if (v10 >= 0x7FFFFFFF) {
        __assert_rtn("pqueue_push", "pqueue.c", 391, "da_size(&pq->supp_ind) < INT_MAX && \"pqueue has grown larger than can be indexed with a 32-bit integer\"");
      }
      int v11 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(*(void *)a1 + 24 * v11 + 16) = v10;
      uint64_t v12 = *(void *)(a1 + 24);
      if (v10 >= v12)
      {
        uint64_t v13 = 2 * v12;
        BOOL v9 = v12 == 0;
        uint64_t v14 = 64;
        if (!v9) {
          uint64_t v14 = v13;
        }
        if (v14 <= v10) {
          uint64_t v15 = v10 + 1;
        }
        else {
          uint64_t v15 = v14;
        }
        if (v15)
        {
          *(void *)(a1 + 16) = malloc_type_realloc(*(void **)(a1 + 16), 4 * v15, 0x633A7CB7uLL);
          uint64_t v10 = *(void *)(a1 + 8);
          int v11 = *(_DWORD *)(a1 + 36);
        }
        *(void *)(a1 + 24) = v15;
      }
      *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v10 + 1;
      *(_DWORD *)(*(void *)(a1 + 16) + 4 * v10) = v11;
    }
    unsigned int v16 = *(_DWORD *)(a1 + 36);
    uint64_t v17 = *(double **)a1;
    signed int v18 = v16;
  }
  uint64_t v25 = 3 * v18;
  *(void *)&v17[v25] = a2;
  v17[v25 + 1] = -1.79769313e308;
  if (a3 >= -1.79769313e308)
  {
    uint64_t v26 = *(void *)(a1 + 16);
    v17[v25 + 1] = a3;
    if ((int)v16 >= 2)
    {
      do
      {
        unsigned int v28 = v16 >> 1;
        unint64_t v29 = &v17[3 * (v16 >> 1)];
        uint64_t v30 = &v17[3 * v16];
        if (v29[1] >= v30[1]) {
          break;
        }
        unsigned int v31 = v16;
        long long v36 = *(_OWORD *)v30;
        uint64_t v37 = *((void *)v30 + 2);
        if (*(_DWORD *)(a1 + 32))
        {
          uint64_t v32 = 4 * SLODWORD(v17[3 * v16 + 2]);
          int v33 = *(_DWORD *)(v26 + v32);
          uint64_t v34 = 4 * SLODWORD(v17[3 * v28 + 2]);
          *(_DWORD *)(v26 + v32) = *(_DWORD *)(v26 + v34);
          *(_DWORD *)(v26 + v34) = v33;
        }
        long long v27 = *(_OWORD *)v29;
        v30[2] = v29[2];
        *(_OWORD *)uint64_t v30 = v27;
        *(_OWORD *)unint64_t v29 = v36;
        *((void *)v29 + 2) = v37;
        unsigned int v16 = v28;
      }
      while (v31 > 3);
    }
  }
  if (*(_DWORD *)(a1 + 32)) {
    return (*(_DWORD *)(a1 + 8) - 1);
  }
  return 0xFFFFFFFFLL;
}

uint64_t pqueue_delete(void **a1, uint64_t a2, double *a3)
{
  float v3 = (char *)*a1;
  uint64_t v4 = (uint64_t)*a1 + 24 * (int)a2;
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = (double *)(v4 + 8);
  double v7 = *(double *)(v4 + 8);
  if (a3) {
    *a3 = v7;
  }
  int v8 = &v3[24 * *((int *)a1 + 9)];
  long long v9 = *(_OWORD *)v8;
  *(void *)(v4 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v4 = v9;
  if (*((_DWORD *)a1 + 8)) {
    *((_DWORD *)a1[2] + *(int *)&v3[24 * (int)a2 + 16]) = a2;
  }
  int v10 = *((_DWORD *)a1 + 9) - 1;
  *((_DWORD *)a1 + 9) = v10;
  double v11 = *v6;
  if (v7 >= *v6)
  {
    while (1)
    {
      int v29 = a2;
      uint64_t v30 = (char *)*a1;
      unsigned int v31 = (char *)a1[2];
      if (2 * (int)a2 > v10
        || (uint64_t v32 = 2 * (int)a2, *(double *)&v30[48 * (int)a2 + 8] <= *(double *)&v30[24 * (int)a2 + 8]))
      {
        uint64_t v32 = a2;
      }
      int v33 = (2 * a2) | 1;
      if (v33 <= v10 && *(double *)&v30[24 * v33 + 8] > *(double *)&v30[24 * (int)v32 + 8]) {
        uint64_t v32 = (2 * (int)a2) | 1;
      }
      if (v32 == a2) {
        break;
      }
      uint64_t v34 = &v30[24 * (int)v32];
      long long v41 = *(_OWORD *)v34;
      uint64_t v43 = *((void *)v34 + 2);
      if (*((_DWORD *)a1 + 8))
      {
        uint64_t v24 = 4 * *(int *)&v30[24 * (int)v32 + 16];
        int v25 = *(_DWORD *)&v31[v24];
        uint64_t v26 = 4 * *(int *)&v30[24 * (int)a2 + 16];
        *(_DWORD *)&v31[v24] = *(_DWORD *)&v31[v26];
        *(_DWORD *)&v31[v26] = v25;
      }
      else
      {
        int v29 = a2;
      }
      long long v27 = &v30[24 * v29];
      long long v28 = *(_OWORD *)v27;
      *((void *)v34 + 2) = *((void *)v27 + 2);
      *(_OWORD *)uint64_t v34 = v28;
      *(_OWORD *)long long v27 = v41;
      *((void *)v27 + 2) = v43;
      int v10 = *((_DWORD *)a1 + 9);
      a2 = v32;
    }
  }
  else
  {
    uint64_t v12 = (char *)*a1;
    uint64_t v13 = (uint64_t)*a1 + 24 * (int)a2;
    double v15 = *(double *)(v13 + 8);
    uint64_t v14 = (double *)(v13 + 8);
    if (v15 <= v11)
    {
      unsigned int v16 = (char *)a1[2];
      *uint64_t v14 = v11;
      if ((int)a2 >= 2)
      {
        do
        {
          signed int v18 = &v12[24 * (a2 >> 1)];
          int v19 = &v12[24 * a2];
          if (*((double *)v18 + 1) >= *((double *)v19 + 1)) {
            break;
          }
          unsigned int v20 = a2;
          long long v40 = *(_OWORD *)v19;
          uint64_t v42 = *((void *)v19 + 2);
          if (*((_DWORD *)a1 + 8))
          {
            uint64_t v21 = 4 * *(int *)&v12[24 * a2 + 16];
            int v22 = *(_DWORD *)&v16[v21];
            uint64_t v23 = 4 * *(int *)&v12[24 * (a2 >> 1) + 16];
            *(_DWORD *)&v16[v21] = *(_DWORD *)&v16[v23];
            *(_DWORD *)&v16[v23] = v22;
          }
          long long v17 = *(_OWORD *)v18;
          *((void *)v19 + 2) = *((void *)v18 + 2);
          *(_OWORD *)int v19 = v17;
          *(_OWORD *)signed int v18 = v40;
          *((void *)v18 + 2) = v42;
          LODWORD(a2) = a2 >> 1;
        }
        while (v20 > 3);
      }
    }
  }
  if (*((_DWORD *)a1 + 11)) {
    return v5;
  }
  int v37 = *((_DWORD *)a1 + 9);
  int v36 = *((_DWORD *)a1 + 10);
  int v38 = v36 + 3;
  if (v36 >= 0) {
    int v38 = *((_DWORD *)a1 + 10);
  }
  if (v37 < 17 || v37 >= v38 >> 2) {
    return v5;
  }
  int v39 = v36 / 2;
  *((_DWORD *)a1 + 10) = v39;
  *a1 = malloc_type_realloc(*a1, 24 * v39, 0x1080040A085CBA5uLL);
  return v5;
}

uint64_t vl_pose_score(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v351 = v18;
  uint64_t v352 = v19;
  uint64_t v20 = v9;
  uint64_t v402 = *MEMORY[0x263EF8340];
  unint64_t v391 = 0;
  memset(&v390[64], 0, 32);
  memset(&v390[32], 0, 32);
  memset(v390, 0, 32);
  float32x4_t v388 = 0u;
  long long v389 = 0u;
  *(_OWORD *)long long v386 = 0u;
  float32x4_t v387 = 0u;
  *(_OWORD *)__int32 v384 = 0u;
  long long v385 = 0u;
  long long v382 = 0u;
  *(_OWORD *)uint64_t v383 = 0u;
  *(_OWORD *)int v381 = 0u;
  uint64_t v380 = 0;
  memset(v379, 0, sizeof(v379));
  *(void *)&v392.uint64_t tv_usec = 0;
  v392.__darwin_time_t tv_sec = 0;
  gettimeofday(&v392, 0);
  timeval v376 = (timeval)0;
  float64x2_t v374 = 0u;
  memset(v375, 0, sizeof(v375));
  timeval v373 = (timeval)0;
  uint64_t v360 = v11;
  int v349 = *(_DWORD *)(v11 + 76);
  uint64_t v370 = 0;
  int ptr = 0;
  uint64_t v372 = 0;
  *(_DWORD *)&v390[84] = -1;
  *(_OWORD *)&v390[64] = 0x400uLL;
  uint64_t v21 = malloc_type_malloc(0xD000uLL, 0xDF3E8BC9uLL);
  *(_OWORD *)&v390[48] = xmmword_21BB7B1E0;
  *(void *)&v390[40] = malloc_type_realloc(0, 0x100uLL, 0x9D019C11uLL);
  *(void *)&v390[32] = 1;
  **(void **)&v390[40] = v21;
  *(&v376.tv_usec + 1) = -1;
  v375[3] = (void *)1024;
  v376.__darwin_time_t tv_sec = 0;
  int v22 = malloc_type_malloc(0xD000uLL, 0xDF3E8BC9uLL);
  *(_OWORD *)&v375[1] = xmmword_21BB7B1E0;
  *(void *)&v374.f64[1] = 1;
  v375[0] = malloc_type_realloc(0, 0x100uLL, 0x9D019C11uLL);
  *(void *)v375[0] = v22;
  if (*(_DWORD *)(v20 + 1412))
  {
    *(void *)(v20 + 1320) -= mach_absolute_time();
    float64x2_t v377 = 0uLL;
    double v378 = 0.0;
    if (!vl_ps_debug_printout) {
      goto LABEL_8;
    }
  }
  else
  {
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v20 + 1232));
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v20 + 1216));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v20 + 1200));
    float64x2_t v377 = 0uLL;
    double v378 = 0.0;
    if (!vl_ps_debug_printout) {
      goto LABEL_8;
    }
  }
  timeval v396 = (timeval)0;
  timeval v397 = (timeval)0;
  float64x2_t v394 = 0u;
  float64x2_t v395 = 0u;
  timeval v392 = (timeval)0;
  float64x2_t v393 = 0u;
  g_camera_global_to_local((double *)(v17 + 240), (double *)(v20 + 1440), (double *)&v392.tv_sec);
  float v23 = *(double *)&v396.tv_usec;
  float v24 = *(double *)&v397.tv_sec;
  float v25 = *(double *)&v397.tv_usec;
  float32x4_t v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v392), v393);
  float32x4_t v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v394), v395);
  float v28 = *(double *)&v396.tv_sec;
  double v29 = 0.0;
  if (fabsf(vcvt_f32_f64(v395).f32[0]) < 1.0)
  {
    float32x4_t v365 = v26;
    float32x4_t v362 = v27;
    double v29 = atan2(v26.f32[3], v26.f32[0]);
    float32x4_t v27 = v362;
    float32x4_t v26 = v365;
  }
  *(float *)&v390[88] = v23;
  *(float *)&v390[92] = v24;
  *(float *)&unsigned int v30 = v29;
  unint64_t v391 = __PAIR64__(v30, LODWORD(v25));
  *((float *)&v389 + 3) = v25;
  float32x4_t v387 = v26;
  float32x4_t v388 = v27;
  *(void *)((char *)&v389 + 4) = __PAIR64__(LODWORD(v24), LODWORD(v23));
  *(float *)&long long v389 = v28;
LABEL_8:
  vl_dump_ps_args_store(*(void *)(v20 + 1536), (const void *)v351, v352, (uint64_t *)v17, v15, (uint64_t)v13, (_OWORD *)(v20 + 1440));
  *(_DWORD *)(v11 + 4_Block_object_dispose(&STACK[0x220], 8) = 1;
  *(_OWORD *)(v20 + 120) = 0u;
  *(_OWORD *)(v20 + 264) = 0u;
  *(_OWORD *)(v20 + 280) = 0u;
  *(_OWORD *)(v20 + 296) = 0u;
  *(_OWORD *)(v20 + 312) = 0u;
  *(void *)(v20 + 32_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_OWORD *)(v20 + 232) = 0u;
  *(_OWORD *)(v20 + 24_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 200) = 0u;
  *(_OWORD *)(v20 + 216) = 0u;
  *(_OWORD *)(v20 + 16_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 184) = 0u;
  *(_OWORD *)(v20 + 136) = 0u;
  *(_OWORD *)(v20 + 152) = 0u;
  *(_OWORD *)(v20 + 26_Block_object_dispose(&STACK[0x220], 8) = *(_OWORD *)"filter_corr";
  *(_OWORD *)(v20 + 284) = unk_21BB7B200;
  *(_OWORD *)(v20 + 300) = xmmword_21BB7B210;
  *(_OWORD *)(v20 + 316) = unk_21BB7B220;
  *(_DWORD *)(v20 + 332) = 1;
  *(_OWORD *)(v20 + 52_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 512) = 0u;
  *(_OWORD *)(v20 + 496) = 0u;
  *(_OWORD *)(v20 + 480) = 0u;
  *(void *)(v20 + 544) = 0;
  *(_OWORD *)(v20 + 464) = 0u;
  *(_OWORD *)(v20 + 44_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 432) = 0u;
  *(_OWORD *)(v20 + 416) = 0u;
  *(_OWORD *)(v20 + 400) = 0u;
  *(_OWORD *)(v20 + 384) = 0u;
  *(_OWORD *)(v20 + 36_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 352) = 0u;
  *(_OWORD *)(v20 + 336) = 0u;
  *(_OWORD *)(v20 + 516) = xmmword_21BB7B251;
  *(_OWORD *)(v20 + 500) = unk_21BB7B241;
  *(_OWORD *)(v20 + 484) = *(_OWORD *)"vote";
  *(_OWORD *)(v20 + 532) = unk_21BB7B261;
  *(_DWORD *)(v20 + 54_Block_object_dispose(&STACK[0x220], 8) = 1;
  *(void *)(v20 + 760) = 0;
  *(_OWORD *)(v20 + 72_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 744) = 0u;
  *(_OWORD *)(v20 + 696) = 0u;
  *(_OWORD *)(v20 + 712) = 0u;
  *(_OWORD *)(v20 + 664) = 0u;
  *(_OWORD *)(v20 + 680) = 0u;
  *(_OWORD *)(v20 + 632) = 0u;
  *(_OWORD *)(v20 + 64_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 600) = 0u;
  *(_OWORD *)(v20 + 616) = 0u;
  *(_OWORD *)(v20 + 56_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 584) = 0u;
  *(_OWORD *)(v20 + 552) = 0u;
  *(_OWORD *)(v20 + 74_Block_object_dispose(&STACK[0x220], 8) = unk_21BB7B2A2;
  *(_OWORD *)(v20 + 732) = xmmword_21BB7B292;
  *(_OWORD *)(v20 + 716) = unk_21BB7B282;
  *(_OWORD *)(v20 + 700) = *(_OWORD *)"find_peaks";
  *(_DWORD *)(v20 + 764) = 1;
  *(void *)(v20 + 976) = 0;
  *(_OWORD *)(v20 + 960) = 0u;
  *(_OWORD *)(v20 + 944) = 0u;
  *(_OWORD *)(v20 + 92_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 912) = 0u;
  *(_OWORD *)(v20 + 896) = 0u;
  *(_OWORD *)(v20 + 880) = 0u;
  *(_OWORD *)(v20 + 864) = 0u;
  *(_OWORD *)(v20 + 84_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 832) = 0u;
  *(_OWORD *)(v20 + 816) = 0u;
  *(_OWORD *)(v20 + 800) = 0u;
  *(_OWORD *)(v20 + 784) = 0u;
  *(_OWORD *)(v20 + 76_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 964) = unk_21BB7B2E3;
  *(_OWORD *)(v20 + 94_Block_object_dispose(&STACK[0x220], 8) = xmmword_21BB7B2D3;
  *(_OWORD *)(v20 + 932) = unk_21BB7B2C3;
  *(_OWORD *)(v20 + 916) = *(_OWORD *)"refine";
  *(_DWORD *)(v20 + 980) = 1;
  *(void *)(v20 + 1192) = 0;
  *(_OWORD *)(v20 + 1176) = 0u;
  *(_OWORD *)(v20 + 1160) = 0u;
  *(_OWORD *)(v20 + 112_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 1144) = 0u;
  *(_OWORD *)(v20 + 1096) = 0u;
  *(_OWORD *)(v20 + 1112) = 0u;
  *(_OWORD *)(v20 + 1064) = 0u;
  *(_OWORD *)(v20 + 1080) = 0u;
  *(_OWORD *)(v20 + 1032) = 0u;
  *(_OWORD *)(v20 + 104_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v20 + 1000) = 0u;
  *(_OWORD *)(v20 + 1016) = 0u;
  *(_OWORD *)(v20 + 984) = 0u;
  *(_OWORD *)(v20 + 1180) = unk_21BB7B324;
  *(_OWORD *)(v20 + 1164) = xmmword_21BB7B314;
  *(_OWORD *)(v20 + 114_Block_object_dispose(&STACK[0x220], 8) = unk_21BB7B304;
  float v356 = (timespec *)(v20 + 984);
  *(_OWORD *)(v20 + 1132) = *(_OWORD *)"other";
  *(_DWORD *)(v20 + 1196) = 1;
  uint64_t v358 = v20 + 120;
  *(void *)(v20 + 1104) -= mach_absolute_time();
  if (!*(_DWORD *)v11 && *(float *)(v11 + 12) != 0.0) {
    __assert_rtn("vl_pose_score", "vl_pose_score.c", 399, "(par->use_vote_prio || par->max_time_ms == 0) && \"Max time can only be used with prio voting.\"");
  }
  double v31 = *(double *)(v351 + 200) - *(double *)(v17 + 312);
  double v32 = *(double *)(v351 + 208) - *(double *)(v17 + 320);
  double v33 = *(double *)(v351 + 216) - *(double *)(v17 + 328);
  double v34 = v32 * *(double *)(v17 + 280) + *(double *)(v17 + 256) * v31 + *(double *)(v17 + 304) * v33;
  float64x2_t v377 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v17 + 264), v32), *(float64x2_t *)(v17 + 240), v31), *(float64x2_t *)(v17 + 288), v33);
  double v378 = v34;
  if (*(float *)(v351 + 252) == 0.0 && *(float *)(v351 + 244) != 0.0) {
    __assert_rtn("vl_pose_score", "vl_pose_score.c", 405, "img->true_heading == 0 && \"If no heading prior is available, we require true_heading to be set to 0.\"");
  }
  uint64_t v346 = v20 + 336;
  uint64_t v347 = v20 + 552;
  float v350 = (timespec *)(v20 + 768);
  uint64_t v348 = v20 + 1200;
  uint64_t v359 = v20;
  *(void *)&v392.uint64_t tv_usec = 0;
  v392.__darwin_time_t tv_sec = 0;
  gettimeofday(&v392, 0);
  __darwin_time_t tv_sec = v392.tv_sec;
  uint64_t tv_usec = v392.tv_usec;
  int v37 = (int *)v360;
  vl_ps_grid_setup((uint64_t)&v390[8], (double *)(v17 + 240), (long long *)&v377, v13, v360, *(float *)(v351 + 228));
  *(void *)&v392.uint64_t tv_usec = 0;
  v392.__darwin_time_t tv_sec = 0;
  gettimeofday(&v392, 0);
  __darwin_time_t v38 = v392.tv_usec + 1000000 * v392.tv_sec;
  printf("Verbose (toc) : ");
  printf("vl_pose_score:grid setup");
  printf(": %f ms", (float)((float)(-1000000 * tv_sec - tv_usec + v38) / 1000.0));
  putchar(10);
  vl_ps_cam_init((uint64_t)v381, v351);
  vl_ps_precomp_create(v17, v381, (uint64_t)v379, v360);
  uint64_t v39 = *(void *)&v390[56];
  if (*(uint64_t *)&v390[56] >= 1)
  {
    uint64_t v40 = *(void *)&v390[40];
    uint64_t v41 = *(unsigned int *)(v360 + 116);
    if ((int)v41 < 1)
    {
      *(_DWORD *)(**(void **)&v390[40] + 2_Block_object_dispose(&STACK[0x220], 8) = -1;
    }
    else
    {
      unint64_t v42 = 0;
      unint64_t v43 = *(void *)&v390[64];
      float v44 = *(float *)&v390[80];
      double v45 = *(float *)&v390[80];
      while (1)
      {
        while (1)
        {
          uint64_t v46 = *(void *)(v40 + 8 * (v42 / v43)) + 52 * (v42 % v43);
          *(_DWORD *)(v46 + 2_Block_object_dispose(&STACK[0x220], 8) = -1;
          unint64_t v47 = (float *)(v46 + 28);
          if (v41 == 1) {
            float v48 = 3.4028e38;
          }
          else {
            float v48 = *(float *)(v360 + 84);
          }
          float v49 = *(v47 - 4);
          float v50 = 3.4028e38;
          if (v48 * 1.5 <= v45) {
            float v50 = v48;
          }
          if (v48 < v44) {
            float v48 = v50;
          }
          if (v49 < 0.0 || v49 >= v48) {
            break;
          }
          *unint64_t v47 = 0.0;
          if (++v42 == v39) {
            goto LABEL_44;
          }
        }
        if (v41 == 1) {
          break;
        }
        uint64_t v52 = 0;
        while (1)
        {
          if (v52 + 1 >= (unint64_t)(v41 - 1)) {
            float v53 = 3.4028e38;
          }
          else {
            float v53 = *(float *)(v360 + 88 + 4 * v52);
          }
          if (v53 < v44 && v53 * 1.5 > v45) {
            float v53 = 3.4028e38;
          }
          if (v49 >= *(float *)(v360 + 4 * v52 + 84) && v49 < v53) {
            break;
          }
          if (v41 - 1 == ++v52) {
            goto LABEL_252;
          }
        }
        *(_DWORD *)unint64_t v47 = v52 + 1;
        if (++v42 == v39) {
          goto LABEL_44;
        }
      }
    }
LABEL_252:
    __assert_rtn("vl_ps_grid_flag_concentric", "vl_pose_score.c", 205, "cell->sub_region_flag != -1 && \"Cell not part of any sub-region\"");
  }
LABEL_44:
  *(void *)&v392.uint64_t tv_usec = 0;
  v392.__darwin_time_t tv_sec = 0;
  gettimeofday(&v392, 0);
  __darwin_time_t v56 = v392.tv_sec;
  uint64_t v57 = v392.tv_usec;
  printf("Verbose (toc) : ");
  printf("vl_pose_score:other setup");
  printf(": %f ms", (float)((float)(1000000 * v56 - v38 + v57) / 1000.0));
  putchar(10);
  uint64_t v58 = v359;
  if (*(_DWORD *)v360)
  {
    int v353 = vl_ps_vote_prio(v351, (uint64_t)v381);
  }
  else if (*(int *)(v360 + 116) < 1)
  {
    int v353 = 1;
  }
  else
  {
    int v123 = 0;
    float v354 = (timespec *)(v359 + 1000);
    float v355 = (timespec *)(v359 + 1016);
    int v353 = 1;
    while (1)
    {
      uint64_t v367 = 0;
      __src = 0;
      uint64_t v369 = 0;
      *(&v376.tv_usec + 1) = -1;
      v376.__darwin_time_t tv_sec = 0;
      timeval v373 = *(timeval *)&v390[8];
      v375[2] = 0;
      v374.f64[0] = *(float64_t *)&v390[24];
      *(_DWORD *)&v390[80] = -1082130432;
      uint64_t v124 = *(void *)&v390[56];
      int v357 = v123;
      if (*(uint64_t *)&v390[56] >= 1)
      {
        unint64_t v125 = 0;
        do
        {
          uint64_t v126 = *(void *)(*(void *)&v390[40] + 8 * (v125 / *(void *)&v390[64]));
          if (*(_DWORD *)(v126 + 52 * (v125 % *(void *)&v390[64]) + 28) == v123)
          {
            uint64_t v127 = (long long *)(v126 + 52 * (v125 % *(void *)&v390[64]));
            uint64_t v128 = vl_ps_grid_cell_add((uint64_t)&v373);
            int v123 = v357;
            long long v129 = *v127;
            long long v130 = v127[1];
            long long v131 = v127[2];
            *(_DWORD *)(v128 + 4_Block_object_dispose(&STACK[0x220], 8) = *((_DWORD *)v127 + 12);
            *(_OWORD *)(v128 + 16) = v130;
            *(_OWORD *)(v128 + 32) = v131;
            *(_OWORD *)uint64_t v128 = v129;
            uint64_t v124 = *(void *)&v390[56];
          }
          ++v125;
        }
        while (v124 > (uint64_t)v125);
      }
      vl_timer_stop((uint64_t)v356);
      float64x2_t v394 = *(float64x2_t *)&v390[40];
      float64x2_t v395 = *(float64x2_t *)&v390[56];
      timeval v396 = *(timeval *)&v390[72];
      timeval v392 = *(timeval *)&v390[8];
      float64x2_t v393 = *(float64x2_t *)&v390[24];
      *(_OWORD *)&v390[40] = *(_OWORD *)v375;
      *(_OWORD *)&v390[56] = *(_OWORD *)&v375[2];
      *(timeval *)&v390[72] = v376;
      *(timeval *)&v390[8] = v373;
      *(float64x2_t *)&v390[24] = v374;
      *(float64x2_t *)&v375[2] = v395;
      timeval v376 = v396;
      float64x2_t v374 = v393;
      *(float64x2_t *)float v375 = v394;
      timeval v373 = v392;
      if ((v37[30] & 0x80000000) == 0)
      {
        int v132 = 0;
        do
        {
          vl_ps_vote(&v390[8], (uint64_t)v381, (uint64_t)v379, v358, (uint64_t)v37);
          if (*(_DWORD *)(v58 + 1196))
          {
            *(void *)(v58 + 1104) -= mach_absolute_time();
          }
          else
          {
            clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v355);
            clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v354);
            clock_gettime(_CLOCK_MONOTONIC, v356);
          }
          vl_ps_get_hyps(&v390[8], (uint64_t)v381, &v367, (uint64_t)v37);
          if (v37[12] >= 2)
          {
            if (v367 >= 1)
            {
              float v137 = (char *)__src;
              if (__src)
              {
                uint64_t v138 = 0;
                uint64_t v139 = 1;
LABEL_100:
                float v140 = (float *)&v137[v138];
                printf(" %4.1f, ", *(float *)&v137[v138]);
                printf(" angle : %4.1f  (offset : %3.2f, %3.2f, %3.2f) \n", v140[5] * 180.0 / 3.14159265, v140[2], v140[3], v140[4]);
                while (v367 > v139)
                {
                  float v137 = (char *)__src;
                  ++v139;
                  v138 += 160;
                  if (__src) {
                    goto LABEL_100;
                  }
                }
              }
            }
            puts("\n--------------------------");
          }
          if (vl_ps_debug_printout && v37[12] <= 1)
          {
            if (v367 >= 1)
            {
              uint64_t v141 = (char *)__src;
              if (__src)
              {
                uint64_t v142 = 0;
                uint64_t v143 = 1;
LABEL_109:
                float v144 = (float *)&v141[v142];
                printf(" %4.1f, ", *(float *)&v141[v142]);
                printf(" angle : %4.1f  (offset : %3.2f, %3.2f, %3.2f) \n", v144[5] * 180.0 / 3.14159265, v144[2], v144[3], v144[4]);
                while (v367 > v143)
                {
                  uint64_t v141 = (char *)__src;
                  ++v143;
                  v142 += 160;
                  if (__src) {
                    goto LABEL_109;
                  }
                }
              }
            }
            puts("\n--------------------------");
          }
          int v361 = v132;
          if (v132 < v37[30])
          {
            *(_DWORD *)&v390[84] = -1;
            *(void *)&v390[56] = 0;
            *(void *)&v390[72] = 0;
            uint64_t v145 = v367;
            if (v367 >= 1)
            {
              int v366 = *(_DWORD *)(v360 + 124);
              if (v366 >= 1)
              {
                uint64_t v146 = 0;
                double v147 = (double)*(int *)(v360 + 128);
                float v148 = (float)v366;
                do
                {
                  float v149 = (float *)((char *)__src + 160 * v146);
                  float v151 = v149[8];
                  float v150 = v149 + 8;
                  double v152 = v150 - 2;
                  double v153 = ceilf((float)(v151 / *(v150 - 2)) * v148);
                  if (v147 < v153) {
                    double v153 = v147;
                  }
                  int v154 = (int)v153;
                  if ((int)v153 >= 1)
                  {
                    uint64_t v363 = v146;
                    int v155 = 0;
                    float v156 = v150 - 1;
                    do
                    {
                      int v157 = 0;
                      int v364 = v155;
                      float v158 = (float)v155 + 0.5;
                      do
                      {
                        int v159 = 0;
                        do
                        {
                          uint64_t v160 = (float *)vl_ps_grid_cell_add((uint64_t)&v390[8]);
                          float v161 = *v152;
                          float v162 = *v152 / v148;
                          v160[4] = v162;
                          float v163 = *v156;
                          float v164 = *v156 / v148;
                          v160[5] = v164;
                          float v165 = *v150;
                          float v166 = *v150 / (float)v154;
                          v160[6] = v166;
                          float v167 = (float)(*(v150 - 6) + (float)(v161 * -0.5)) + (float)(v158 * v162);
                          *uint64_t v160 = v167;
                          float v168 = (float)(*(v150 - 5) + (float)(v163 * -0.5))
                               + (float)((float)((float)v157 + 0.5) * v164);
                          v160[1] = v168;
                          float v169 = (float)(*(v150 - 4) + (float)(v165 * -0.5))
                               + (float)((float)((float)v159 + 0.5) * v166);
                          v160[2] = v169;
                          float v170 = sqrt((v168 - *(double *)&v390[16]) * (v168 - *(double *)&v390[16])+ (v167 - *(double *)&v390[8]) * (v167 - *(double *)&v390[8])+ (v169 - *(double *)&v390[24]) * (v169 - *(double *)&v390[24]));
                          v160[3] = v170;
                          ++v159;
                        }
                        while (v154 != v159);
                        ++v157;
                      }
                      while (v157 != v366);
                      int v155 = v364 + 1;
                    }
                    while (v364 + 1 != v366);
                    uint64_t v145 = v367;
                    uint64_t v146 = v363;
                  }
                  ++v146;
                }
                while (v145 > v146);
              }
            }
          }
          uint64_t v58 = v359;
          if (*(_DWORD *)(v359 + 1196))
          {
            uint64_t v133 = *(void *)(v359 + 1104) + mach_absolute_time();
          }
          else
          {
            clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v359 + 1048));
            clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v359 + 1064));
            clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v359 + 1032));
            uint64_t v134 = *(void *)(v359 + 1040)
                 - *(void *)(v359 + 992)
                 + 1000000000 * (*(void *)(v359 + 1032) - *(void *)(v359 + 984));
            *(void *)(v359 + 1080) = v134;
            uint64_t v133 = v134 + *(void *)(v359 + 1104);
            uint64_t v135 = *(void *)(v359 + 1056)
                 - *(void *)(v359 + 1008)
                 + 1000000000 * (*(void *)(v359 + 1048) - *(void *)(v359 + 1000));
            *(void *)(v359 + 108_Block_object_dispose(&STACK[0x220], 8) = v135;
            *(void *)(v359 + 1112) += v135;
            uint64_t v136 = *(void *)(v359 + 1072)
                 - *(void *)(v359 + 1024)
                 + 1000000000 * (*(void *)(v359 + 1064) - *(void *)(v359 + 1016));
            *(void *)(v359 + 1096) = v136;
            *(void *)(v359 + 1120) += v136;
            ++*(_DWORD *)(v359 + 1128);
          }
          int v37 = (int *)v360;
          *(void *)(v359 + 1104) = v133;
          int v132 = v361 + 1;
        }
        while (v361 < *(_DWORD *)(v360 + 120));
      }
      if (*(_DWORD *)(v58 + 980))
      {
        *(void *)(v58 + 888) -= mach_absolute_time();
        uint64_t v171 = (uint64_t)v350;
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v359 + 800));
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v359 + 784));
        uint64_t v171 = (uint64_t)v350;
        clock_gettime(_CLOCK_MONOTONIC, v350);
      }
      BOOL v172 = vl_ps_refine(v351, (uint64_t)v381);
      vl_timer_stop(v171);
      float64x2_t v394 = *(float64x2_t *)&v390[40];
      float64x2_t v395 = *(float64x2_t *)&v390[56];
      timeval v396 = *(timeval *)&v390[72];
      timeval v392 = *(timeval *)&v390[8];
      float64x2_t v393 = *(float64x2_t *)&v390[24];
      *(_OWORD *)&v390[40] = *(_OWORD *)v375;
      *(_OWORD *)&v390[56] = *(_OWORD *)&v375[2];
      *(timeval *)&v390[72] = v376;
      *(timeval *)&v390[8] = v373;
      *(float64x2_t *)&v390[24] = v374;
      *(float64x2_t *)&v375[2] = v395;
      timeval v376 = v396;
      float64x2_t v374 = v393;
      *(float64x2_t *)float v375 = v394;
      timeval v373 = v392;
      if (*(_DWORD *)(v58 + 1196))
      {
        *(void *)(v58 + 1104) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v355);
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v354);
        clock_gettime(_CLOCK_MONOTONIC, v356);
      }
      int v173 = v172 ? v353 : 0;
      int v353 = v173;
      uint64_t v174 = v367;
      unint64_t v175 = v370;
      if (v367 <= 0)
      {
        double v179 = (char *)ptr;
        double v180 = (char *)malloc_type_malloc(0x200uLL, 0x42120B2FuLL);
        if (v175) {
          goto LABEL_150;
        }
      }
      else
      {
        uint64_t v176 = __src;
        if (v370 + v367 > v372)
        {
          if (v372) {
            uint64_t v177 = 2 * v372;
          }
          else {
            uint64_t v177 = 1;
          }
          if (v177 <= v370 + v367) {
            uint64_t v178 = v370 + v367;
          }
          else {
            uint64_t v178 = v177;
          }
          if (v178)
          {
            int ptr = malloc_type_realloc(ptr, 160 * v178, 0x284D5EB8uLL);
            uint64_t v174 = v367;
          }
          uint64_t v372 = v178;
        }
        double v179 = (char *)ptr;
        memcpy((char *)ptr + 160 * v175, v176, 160 * v174);
        v175 += v367;
        uint64_t v370 = v175;
        double v180 = (char *)malloc_type_malloc(0x200uLL, 0x42120B2FuLL);
        if (v175)
        {
LABEL_150:
          uint64_t v181 = 0;
          BOOL v182 = 1;
          uint64_t v183 = 32;
          timeval v184 = (timeval)0;
          while (1)
          {
            uint64_t v185 = ptr;
            uint64_t v186 = v181;
            while (1)
            {
              if (!v182)
              {
                --v186;
                unint64_t v187 = &v180[16 * v186];
                unint64_t v175 = *((void *)v187 + 1);
                double v179 = &v185[160 * *(void *)v187];
              }
              if ((uint64_t)v175 > 15) {
                break;
              }
              if ((uint64_t)v175 > 1)
              {
                float v188 = (float *)(v179 + 160);
                uint64_t v189 = 2;
                for (uint64_t i = 1; i != v175; ++i)
                {
                  uint64_t v191 = v188;
                  uint64_t v192 = v189;
                  do
                  {
                    if ((float)(*(float *)&v179[160 * (v192 - 2) + 4] - v191[1]) >= 0.0) {
                      break;
                    }
                    uint64_t v193 = (timeval *)&v179[160 * (v192 - 2)];
                    timeval v400 = v184;
                    timeval v401 = v184;
                    timeval v398 = v184;
                    timeval v399 = v184;
                    timeval v396 = v184;
                    timeval v397 = v184;
                    float64x2_t v394 = (float64x2_t)v184;
                    float64x2_t v395 = (float64x2_t)v184;
                    timeval v392 = v184;
                    float64x2_t v393 = (float64x2_t)v184;
                    float64x2_t v194 = *(float64x2_t *)(v191 + 4);
                    timeval v392 = *(timeval *)v191;
                    float64x2_t v393 = v194;
                    float64x2_t v195 = *(float64x2_t *)(v191 + 8);
                    float64x2_t v196 = *(float64x2_t *)(v191 + 12);
                    timeval v197 = (timeval)*((_OWORD *)v191 + 5);
                    timeval v396 = (timeval)*((_OWORD *)v191 + 4);
                    timeval v397 = v197;
                    float64x2_t v394 = v195;
                    float64x2_t v395 = v196;
                    timeval v198 = (timeval)*((_OWORD *)v191 + 6);
                    timeval v199 = (timeval)*((_OWORD *)v191 + 7);
                    timeval v200 = (timeval)*((_OWORD *)v191 + 9);
                    timeval v400 = (timeval)*((_OWORD *)v191 + 8);
                    timeval v401 = v200;
                    timeval v398 = v198;
                    timeval v399 = v199;
                    timeval v201 = v193[1];
                    *(timeval *)uint64_t v191 = *v193;
                    *((timeval *)v191 + 1) = v201;
                    timeval v202 = v193[2];
                    timeval v203 = v193[3];
                    timeval v204 = v193[5];
                    *((timeval *)v191 + 4) = v193[4];
                    *((timeval *)v191 + 5) = v204;
                    *((timeval *)v191 + 2) = v202;
                    *((timeval *)v191 + 3) = v203;
                    timeval v205 = v193[6];
                    timeval v206 = v193[7];
                    timeval v207 = v193[9];
                    *((timeval *)v191 + _Block_object_dispose(&STACK[0x220], 8) = v193[8];
                    *((timeval *)v191 + 9) = v207;
                    *((timeval *)v191 + 6) = v205;
                    *((timeval *)v191 + 7) = v206;
                    float64x2_t v208 = v393;
                    *uint64_t v193 = v392;
                    v193[1] = (timeval)v208;
                    float64x2_t v209 = v394;
                    float64x2_t v210 = v395;
                    timeval v211 = v397;
                    v193[4] = v396;
                    v193[5] = v211;
                    v193[2] = (timeval)v209;
                    v193[3] = (timeval)v210;
                    timeval v212 = v398;
                    timeval v213 = v399;
                    timeval v214 = v401;
                    v193[8] = v400;
                    v193[9] = v214;
                    v193[6] = v212;
                    v193[7] = v213;
                    --v192;
                    v191 -= 40;
                  }
                  while (v192 > 1);
                  ++v189;
                  v188 += 40;
                }
              }
              BOOL v182 = 0;
              unint64_t v175 = 0;
              if (v186 < 1) {
                goto LABEL_216;
              }
            }
            if (v175 > 0x27) {
              break;
            }
            unint64_t v215 = v175 >> 1;
            float v216 = *(float *)&v179[160 * (v175 >> 1) + 4];
            float v217 = *((float *)v179 + 1);
            float v218 = *(float *)&v179[160 * v175 - 156];
            if ((float)(v216 - v217) >= 0.0)
            {
              if ((float)(v218 - v217) >= 0.0)
              {
                if ((float)(v218 - v216) < 0.0) {
                  unint64_t v215 = v175 - 1;
                }
              }
              else
              {
                unint64_t v215 = 0;
              }
            }
            else if ((float)(v218 - v216) >= 0.0)
            {
              if ((float)(v218 - v217) >= 0.0) {
                unint64_t v215 = 0;
              }
              else {
                unint64_t v215 = v175 - 1;
              }
            }
LABEL_204:
            uint64_t v239 = 0;
            uint64_t v240 = 0;
            timeval v400 = v184;
            timeval v401 = v184;
            timeval v398 = v184;
            timeval v399 = v184;
            timeval v396 = v184;
            timeval v397 = v184;
            float64x2_t v394 = (float64x2_t)v184;
            float64x2_t v395 = (float64x2_t)v184;
            timeval v392 = v184;
            float64x2_t v393 = (float64x2_t)v184;
            float64x2_t v241 = *((float64x2_t *)v179 + 1);
            timeval v392 = *(timeval *)v179;
            float64x2_t v393 = v241;
            float64x2_t v242 = *((float64x2_t *)v179 + 2);
            float64x2_t v243 = *((float64x2_t *)v179 + 3);
            timeval v244 = (timeval)*((_OWORD *)v179 + 5);
            timeval v396 = (timeval)*((_OWORD *)v179 + 4);
            timeval v397 = v244;
            float64x2_t v394 = v242;
            float64x2_t v395 = v243;
            timeval v245 = (timeval)*((_OWORD *)v179 + 6);
            timeval v246 = (timeval)*((_OWORD *)v179 + 7);
            timeval v247 = (timeval)*((_OWORD *)v179 + 9);
            timeval v400 = (timeval)*((_OWORD *)v179 + 8);
            timeval v401 = v247;
            timeval v398 = v245;
            timeval v399 = v246;
            long long v248 = (timeval *)&v179[160 * v215];
            timeval v249 = v248[1];
            *(timeval *)double v179 = *v248;
            *((timeval *)v179 + 1) = v249;
            timeval v250 = v248[2];
            timeval v251 = v248[3];
            timeval v252 = v248[5];
            *((timeval *)v179 + 4) = v248[4];
            *((timeval *)v179 + 5) = v252;
            *((timeval *)v179 + 2) = v250;
            *((timeval *)v179 + 3) = v251;
            timeval v253 = v248[6];
            timeval v254 = v248[7];
            timeval v255 = v248[9];
            *((timeval *)v179 + _Block_object_dispose(&STACK[0x220], 8) = v248[8];
            *((timeval *)v179 + 9) = v255;
            *((timeval *)v179 + 6) = v253;
            *((timeval *)v179 + 7) = v254;
            float64x2_t v256 = v393;
            timeval *v248 = v392;
            v248[1] = (timeval)v256;
            float64x2_t v257 = v394;
            float64x2_t v258 = v395;
            timeval v259 = v397;
            v248[4] = v396;
            v248[5] = v259;
            v248[2] = (timeval)v257;
            v248[3] = (timeval)v258;
            timeval v260 = v398;
            timeval v261 = v399;
            timeval v262 = v401;
            v248[8] = v400;
            v248[9] = v262;
            v248[6] = v260;
            v248[7] = v261;
            unint64_t v263 = v175 - 1;
            long long v264 = v179 + 164;
            do
            {
              if ((float)(*((float *)v179 + 1) - *(float *)v264) <= 0.0)
              {
                ++v240;
                timeval v400 = v184;
                timeval v401 = v184;
                timeval v398 = v184;
                timeval v399 = v184;
                timeval v396 = v184;
                timeval v397 = v184;
                float64x2_t v394 = (float64x2_t)v184;
                float64x2_t v395 = (float64x2_t)v184;
                timeval v392 = v184;
                float64x2_t v393 = (float64x2_t)v184;
                float64x2_t v287 = *(float64x2_t *)(v264 + 12);
                timeval v392 = *(timeval *)(v264 - 4);
                float64x2_t v393 = v287;
                float64x2_t v288 = *(float64x2_t *)(v264 + 28);
                float64x2_t v289 = *(float64x2_t *)(v264 + 44);
                timeval v290 = *(timeval *)(v264 + 76);
                timeval v396 = *(timeval *)(v264 + 60);
                timeval v397 = v290;
                float64x2_t v394 = v288;
                float64x2_t v395 = v289;
                timeval v291 = *(timeval *)(v264 + 92);
                timeval v292 = *(timeval *)(v264 + 108);
                timeval v293 = *(timeval *)(v264 + 140);
                timeval v400 = *(timeval *)(v264 + 124);
                timeval v401 = v293;
                timeval v398 = v291;
                timeval v399 = v292;
                float v294 = &v179[160 * v240];
                timeval v295 = *(timeval *)v294;
                *(_OWORD *)(v264 + 12) = *((_OWORD *)v294 + 1);
                *(timeval *)(v264 - 4) = v295;
                long long v296 = *((_OWORD *)v294 + 2);
                long long v297 = *((_OWORD *)v294 + 3);
                long long v298 = *((_OWORD *)v294 + 4);
                *(_OWORD *)(v264 + 76) = *((_OWORD *)v294 + 5);
                *(_OWORD *)(v264 + 60) = v298;
                *(_OWORD *)(v264 + 44) = v297;
                *(_OWORD *)(v264 + 2_Block_object_dispose(&STACK[0x220], 8) = v296;
                long long v299 = *((_OWORD *)v294 + 6);
                long long v300 = *((_OWORD *)v294 + 7);
                long long v301 = *((_OWORD *)v294 + 8);
                *(_OWORD *)(v264 + 140) = *((_OWORD *)v294 + 9);
                *(_OWORD *)(v264 + 124) = v301;
                *(_OWORD *)(v264 + 10_Block_object_dispose(&STACK[0x220], 8) = v300;
                *(_OWORD *)(v264 + 92) = v299;
                float64x2_t v302 = v393;
                *(timeval *)float v294 = v392;
                *((float64x2_t *)v294 + 1) = v302;
                float64x2_t v303 = v394;
                float64x2_t v304 = v395;
                timeval v305 = v397;
                *((timeval *)v294 + 4) = v396;
                *((timeval *)v294 + 5) = v305;
                *((float64x2_t *)v294 + 2) = v303;
                *((float64x2_t *)v294 + 3) = v304;
                timeval v306 = v398;
                timeval v307 = v399;
                timeval v308 = v401;
                *((timeval *)v294 + _Block_object_dispose(&STACK[0x220], 8) = v400;
                *((timeval *)v294 + 9) = v308;
                *((timeval *)v294 + 6) = v306;
                *((timeval *)v294 + 7) = v307;
                if ((float)(*((float *)v179 + 1) - *(float *)v264) == 0.0)
                {
                  ++v239;
                  timeval v400 = v184;
                  timeval v401 = v184;
                  timeval v398 = v184;
                  timeval v399 = v184;
                  timeval v396 = v184;
                  timeval v397 = v184;
                  float64x2_t v394 = (float64x2_t)v184;
                  float64x2_t v395 = (float64x2_t)v184;
                  timeval v392 = v184;
                  float64x2_t v393 = (float64x2_t)v184;
                  float64x2_t v265 = *((float64x2_t *)v294 + 1);
                  timeval v392 = *(timeval *)v294;
                  float64x2_t v393 = v265;
                  float64x2_t v266 = *((float64x2_t *)v294 + 2);
                  float64x2_t v267 = *((float64x2_t *)v294 + 3);
                  timeval v268 = (timeval)*((_OWORD *)v294 + 5);
                  timeval v396 = (timeval)*((_OWORD *)v294 + 4);
                  timeval v397 = v268;
                  float64x2_t v394 = v266;
                  float64x2_t v395 = v267;
                  timeval v269 = (timeval)*((_OWORD *)v294 + 6);
                  timeval v270 = (timeval)*((_OWORD *)v294 + 7);
                  timeval v271 = (timeval)*((_OWORD *)v294 + 9);
                  timeval v400 = (timeval)*((_OWORD *)v294 + 8);
                  timeval v401 = v271;
                  timeval v398 = v269;
                  timeval v399 = v270;
                  float v272 = (timeval *)&v179[160 * v239];
                  timeval v273 = v272[1];
                  *(timeval *)float v294 = *v272;
                  *((timeval *)v294 + 1) = v273;
                  timeval v274 = v272[2];
                  timeval v275 = v272[3];
                  timeval v276 = v272[5];
                  *((timeval *)v294 + 4) = v272[4];
                  *((timeval *)v294 + 5) = v276;
                  *((timeval *)v294 + 2) = v274;
                  *((timeval *)v294 + 3) = v275;
                  timeval v277 = v272[6];
                  timeval v278 = v272[7];
                  timeval v279 = v272[9];
                  *((timeval *)v294 + _Block_object_dispose(&STACK[0x220], 8) = v272[8];
                  *((timeval *)v294 + 9) = v279;
                  *((timeval *)v294 + 6) = v277;
                  *((timeval *)v294 + 7) = v278;
                  float64x2_t v280 = v393;
                  *float v272 = v392;
                  v272[1] = (timeval)v280;
                  float64x2_t v281 = v394;
                  float64x2_t v282 = v395;
                  timeval v283 = v397;
                  v272[4] = v396;
                  v272[5] = v283;
                  v272[2] = (timeval)v281;
                  v272[3] = (timeval)v282;
                  timeval v284 = v398;
                  timeval v285 = v399;
                  timeval v286 = v401;
                  v272[8] = v400;
                  v272[9] = v286;
                  v272[6] = v284;
                  v272[7] = v285;
                }
              }
              v264 += 160;
              --v263;
            }
            while (v263);
            uint64_t v309 = v239 + 1;
            uint64_t v310 = 160 * v239;
            uint64_t v311 = -160 * v239 + 160 * v240;
            do
            {
              timeval v400 = v184;
              timeval v401 = v184;
              timeval v398 = v184;
              timeval v399 = v184;
              timeval v396 = v184;
              timeval v397 = v184;
              float64x2_t v394 = (float64x2_t)v184;
              float64x2_t v395 = (float64x2_t)v184;
              timeval v392 = v184;
              float64x2_t v393 = (float64x2_t)v184;
              float v312 = &v179[v311];
              float64x2_t v313 = *(float64x2_t *)&v179[v311 + 16];
              timeval v392 = *(timeval *)&v179[v311];
              float64x2_t v393 = v313;
              float64x2_t v314 = *(float64x2_t *)&v179[v311 + 32];
              float64x2_t v315 = *(float64x2_t *)&v179[v311 + 48];
              timeval v316 = *(timeval *)&v179[v311 + 80];
              timeval v396 = *(timeval *)&v179[v311 + 64];
              timeval v397 = v316;
              float64x2_t v394 = v314;
              float64x2_t v395 = v315;
              timeval v317 = *(timeval *)&v179[v311 + 96];
              timeval v318 = *(timeval *)&v179[v311 + 112];
              timeval v319 = *(timeval *)&v179[v311 + 144];
              timeval v400 = *(timeval *)&v179[v311 + 128];
              timeval v401 = v319;
              timeval v398 = v317;
              timeval v399 = v318;
              float v320 = (float64x2_t *)&v179[v310];
              long long v321 = *(_OWORD *)&v179[v310 + 16];
              *(_OWORD *)float v312 = *(_OWORD *)&v179[v310];
              *((_OWORD *)v312 + 1) = v321;
              long long v322 = *(_OWORD *)&v179[v310 + 32];
              long long v323 = *(_OWORD *)&v179[v310 + 48];
              long long v324 = *(_OWORD *)&v179[v310 + 80];
              *((_OWORD *)v312 + 4) = *(_OWORD *)&v179[v310 + 64];
              *((_OWORD *)v312 + 5) = v324;
              *((_OWORD *)v312 + 2) = v322;
              *((_OWORD *)v312 + 3) = v323;
              long long v325 = *(_OWORD *)&v179[v310 + 96];
              long long v326 = *(_OWORD *)&v179[v310 + 112];
              long long v327 = *(_OWORD *)&v179[v310 + 144];
              *((_OWORD *)v312 + _Block_object_dispose(&STACK[0x220], 8) = *(_OWORD *)&v179[v310 + 128];
              *((_OWORD *)v312 + 9) = v327;
              *((_OWORD *)v312 + 6) = v325;
              *((_OWORD *)v312 + 7) = v326;
              float64x2_t v328 = v393;
              *(timeval *)float v320 = v392;
              v320[1] = v328;
              float64x2_t v329 = v394;
              float64x2_t v330 = v395;
              timeval v331 = v397;
              v320[4] = (float64x2_t)v396;
              v320[5] = (float64x2_t)v331;
              v320[2] = v329;
              v320[3] = v330;
              timeval v332 = v398;
              timeval v333 = v399;
              timeval v334 = v401;
              v320[8] = (float64x2_t)v400;
              v320[9] = (float64x2_t)v334;
              v320[6] = (float64x2_t)v332;
              v320[7] = (float64x2_t)v333;
              --v309;
              v310 -= 160;
              v311 += 160;
            }
            while (v309 > 0);
            uint64_t v181 = v186 + 1;
            if (v186 + 1 >= v183)
            {
              uint64_t v335 = 2 * v183;
              double v180 = (char *)malloc_type_realloc(v180, 32 * v183, 0xD95F13A0uLL);
              timeval v184 = (timeval)0;
              uint64_t v185 = ptr;
              uint64_t v183 = v335;
            }
            float v336 = &v180[16 * v186];
            *(void *)float v336 = v240 - 0x3333333333333333 * ((v179 - v185) >> 5) + 1;
            *((void *)v336 + 1) = v175 + ~v240;
            unint64_t v175 = v240 - v239;
            BOOL v182 = v240 != v239;
            int v37 = (int *)v360;
            if (v186 < 0 && !v175) {
              goto LABEL_216;
            }
          }
          uint64_t v219 = 0;
          uint64_t v220 = 0;
          uint64_t v221 = 26;
          if (v175 <= 0x7D0) {
            uint64_t v221 = 8;
          }
          unint64_t v222 = 3;
          if (v175 > 0x7D0) {
            unint64_t v222 = 9;
          }
          while (2)
          {
            uint64_t v223 = (uint64_t)(v175 - 1 + v219) / v221;
            float v224 = *(float *)&v179[160 * v223 + 4];
            float v225 = *(float *)&v179[160 * (v219 / v221) + 4];
            uint64_t v226 = (uint64_t)(2 * v175 - 2 + v219) / v221;
            float v227 = *(float *)&v179[160 * v226 + 4];
            if ((float)(v224 - v225) >= 0.0)
            {
              if ((float)(v227 - v225) < 0.0) {
                goto LABEL_181;
              }
              if ((float)(v227 - v224) < 0.0) {
                goto LABEL_183;
              }
            }
            else if ((float)(v227 - v224) >= 0.0)
            {
              if ((float)(v227 - v225) < 0.0)
              {
LABEL_183:
                *(&v392.tv_sec + v220) = v226;
LABEL_175:
                ++v220;
                v219 += 3 * v175 - 3;
                if (v222 != v220) {
                  continue;
                }
                while (2)
                {
                  uint64_t v228 = 0;
                  uint64_t v229 = 0;
                  unint64_t v230 = v222;
                  v222 /= 3uLL;
                  if (v222 <= 1) {
                    uint64_t v231 = 1;
                  }
                  else {
                    uint64_t v231 = v222;
                  }
                  uint64_t v232 = 8 * v231;
LABEL_191:
                  __darwin_time_t v233 = *(__darwin_time_t *)((char *)&v392.tv_sec + v228);
                  __darwin_time_t v234 = *(void *)((char *)&v392.tv_usec + v228);
                  __darwin_time_t v235 = *(void *)((char *)&v392 + v228 + 16);
                  float v236 = *(float *)&v179[160 * v234 + 4];
                  float v237 = *(float *)&v179[160 * v233 + 4];
                  float v238 = *(float *)&v179[160 * v235 + 4];
                  if ((float)(v236 - v237) >= 0.0)
                  {
                    if ((float)(v238 - v237) < 0.0) {
                      goto LABEL_196;
                    }
                    if ((float)(v238 - v236) < 0.0) {
                      goto LABEL_198;
                    }
                  }
                  else if ((float)(v238 - v236) >= 0.0)
                  {
                    if ((float)(v238 - v237) < 0.0)
                    {
LABEL_198:
                      *(__darwin_time_t *)((char *)&v392.tv_sec + v229) = v235;
LABEL_190:
                      v229 += 8;
                      v228 += 24;
                      if (v232 == v229)
                      {
                        if (v230 < 9)
                        {
                          unint64_t v215 = v392.tv_sec;
                          goto LABEL_204;
                        }
                        continue;
                      }
                      goto LABEL_191;
                    }
LABEL_196:
                    *(__darwin_time_t *)((char *)&v392.tv_sec + v229) = v233;
                    goto LABEL_190;
                  }
                  break;
                }
                *(__darwin_time_t *)((char *)&v392.tv_sec + v229) = v234;
                goto LABEL_190;
              }
LABEL_181:
              *(&v392.tv_sec + v220) = v219 / v221;
              goto LABEL_175;
            }
            break;
          }
          *(&v392.tv_sec + v220) = v223;
          goto LABEL_175;
        }
      }
LABEL_216:
      free(v180);
      uint64_t v337 = v370;
      if (v370 >= 1)
      {
        uint64_t v338 = 0;
        uint64_t v339 = 0;
        do
        {
          if (v339 >= v37[20] && ptr)
          {
            float v340 = (void **)((char *)ptr + v338);
            free(*(void **)((char *)ptr + v338 + 144));
            free(v340[15]);
            free(v340[12]);
          }
          ++v339;
          v338 += 160;
        }
        while (v337 != v339);
      }
      int v341 = v37[20];
      if (v341 >= (int)v337) {
        int v341 = v337;
      }
      uint64_t v342 = v341;
      if (v372 < v341)
      {
        if (v372) {
          uint64_t v343 = 2 * v372;
        }
        else {
          uint64_t v343 = 1;
        }
        if (v343 <= v342) {
          uint64_t v344 = v342;
        }
        else {
          uint64_t v344 = v343;
        }
        if (v344) {
          int ptr = malloc_type_realloc(ptr, 160 * v344, 0x429D749uLL);
        }
        uint64_t v372 = v344;
      }
      if (v342 > v337) {
        bzero((char *)ptr + 160 * v337, 160 * (v342 - v337));
      }
      int v345 = v37[20];
      if (v345 >= (int)v337) {
        int v345 = v337;
      }
      uint64_t v370 = v345;
      if ((v349 & 0x80000000) == 0 && v345 >= 1 && *((float *)ptr + 1) > (float)(32 * v349)) {
        break;
      }
      free(__src);
      int v123 = v357 + 1;
      if (v357 + 1 >= v37[29]) {
        goto LABEL_46;
      }
    }
    free(__src);
  }
LABEL_46:
  *(_DWORD *)(v58 + 112) = v353;
  uint64_t v59 = v370;
  if (v370 >= 1)
  {
    uint64_t v60 = 0;
    uint64_t v61 = 40;
    do
    {
      double v65 = (char *)ptr;
      uint64_t v66 = *(void *)a9;
      uint64_t v67 = *(void *)(a9 + 16);
      if (*(void *)a9 >= v67)
      {
        if (v67) {
          uint64_t v68 = 2 * v67;
        }
        else {
          uint64_t v68 = 5;
        }
        if (v68 <= v66) {
          uint64_t v69 = v66 + 1;
        }
        else {
          uint64_t v69 = v68;
        }
        if (v69)
        {
          *(void *)(a9 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a9 + 8), 48 * v69, 0x8178B5D9uLL);
          uint64_t v66 = *(void *)a9;
          uint64_t v59 = v370;
        }
        *(void *)(a9 + 16) = v69;
      }
      *(void *)a9 = v66 + 1;
      double v62 = (_OWORD *)(*(void *)(a9 + 8) + 48 * v66);
      long long v63 = *(_OWORD *)&v65[v61];
      long long v64 = *(_OWORD *)&v65[v61 + 32];
      v62[1] = *(_OWORD *)&v65[v61 + 16];
      v62[2] = v64;
      *double v62 = v63;
      ++v60;
      v61 += 160;
    }
    while (v60 < v59);
  }
  if (*(uint64_t *)&v374.f64[1] >= 1)
  {
    uint64_t v70 = 0;
    do
      free(*((void **)v375[0] + v70++));
    while (v70 < *(uint64_t *)&v374.f64[1]);
  }
  free(v375[0]);
  timeval v376 = (timeval)0;
  float64x2_t v374 = 0u;
  memset(v375, 0, sizeof(v375));
  timeval v373 = (timeval)0;
  vl_ps_precomp_free((uint64_t)v379);
  if (*(uint64_t *)&v390[32] >= 1)
  {
    uint64_t v71 = 0;
    do
      free(*(void **)(*(void *)&v390[40] + 8 * v71++));
    while (v71 < *(uint64_t *)&v390[32]);
  }
  free(*(void **)&v390[40]);
  memset(&v390[8], 0, 80);
  free(v381[1]);
  free(v386[0]);
  free(v383[0]);
  free(v384[1]);
  *(void *)float v390 = 0;
  float32x4_t v388 = 0u;
  long long v389 = 0u;
  *(_OWORD *)long long v386 = 0u;
  float32x4_t v387 = 0u;
  *(_OWORD *)__int32 v384 = 0u;
  long long v385 = 0u;
  long long v382 = 0u;
  *(_OWORD *)uint64_t v383 = 0u;
  *(_OWORD *)int v381 = 0u;
  if (v370 >= 1)
  {
    double v72 = (char *)ptr;
    if (ptr)
    {
      uint64_t v73 = 0;
      uint64_t v74 = 1;
LABEL_69:
      double v75 = (void **)&v72[v73];
      free(*(void **)&v72[v73 + 144]);
      free(v75[15]);
      free(v75[12]);
      while (v74 < v370)
      {
        double v72 = (char *)ptr;
        v73 += 160;
        ++v74;
        if (ptr) {
          goto LABEL_69;
        }
      }
    }
  }
  free(ptr);
  vl_timer_stop((uint64_t)v356);
  if (*(_DWORD *)(v359 + 332))
  {
    printf("Verbose : ");
    printf("Total time for %40s : %7.3f ms", (const char *)(v358 + 148), (double)*(uint64_t *)(v359 + 240) * 0.000001);
    putchar(10);
    uint64_t v90 = (const char *)(v347 + 148);
    if (*(_DWORD *)(v359 + 548)) {
      goto LABEL_73;
    }
  }
  else
  {
    log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v76, v77, v78, v79, v80, v81, v82, (char)&str_4_1);
    uint64_t v90 = (const char *)(v347 + 148);
    if (*(_DWORD *)(v359 + 548))
    {
LABEL_73:
      printf("Verbose : ");
      printf("Total time for %40s : %7.3f ms", (const char *)(v346 + 148), (double)*(uint64_t *)(v359 + 456) * 0.000001);
      putchar(10);
      float v98 = (char *)&v350[9].tv_sec + 4;
      if (*(_DWORD *)(v359 + 764)) {
        goto LABEL_74;
      }
      goto LABEL_244;
    }
  }
  log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v83, v84, v85, v86, v87, v88, v89, (char)&str_4_1);
  float v98 = (char *)&v350[9].tv_sec + 4;
  if (*(_DWORD *)(v359 + 764))
  {
LABEL_74:
    printf("Verbose : ");
    printf("Total time for %40s : %7.3f ms", v90, (double)*(uint64_t *)(v359 + 672) * 0.000001);
    putchar(10);
    float v106 = (char *)&v356[9].tv_sec + 4;
    if (*(_DWORD *)(v359 + 980)) {
      goto LABEL_75;
    }
    goto LABEL_245;
  }
LABEL_244:
  log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v91, v92, v93, v94, v95, v96, v97, (char)&str_4_1);
  float v106 = (char *)&v356[9].tv_sec + 4;
  if (*(_DWORD *)(v359 + 980))
  {
LABEL_75:
    printf("Verbose : ");
    printf("Total time for %40s : %7.3f ms", v98, (double)*(uint64_t *)(v359 + 888) * 0.000001);
    putchar(10);
    uint64_t v114 = v348;
    if (*(_DWORD *)(v359 + 1196)) {
      goto LABEL_76;
    }
LABEL_246:
    log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v107, v108, v109, v110, v111, v112, v113, (char)&str_4_1);
    vl_timer_stop(v114);
    if (*(_DWORD *)(v359 + 1412)) {
      goto LABEL_77;
    }
    return log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v115, v116, v117, v118, v119, v120, v121, (char)&str_4_1);
  }
LABEL_245:
  log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v99, v100, v101, v102, v103, v104, v105, (char)&str_4_1);
  uint64_t v114 = v348;
  if (!*(_DWORD *)(v359 + 1196)) {
    goto LABEL_246;
  }
LABEL_76:
  printf("Verbose : ");
  printf("Total time for %40s : %7.3f ms", v106, (double)*(uint64_t *)(v359 + 1104) * 0.000001);
  putchar(10);
  vl_timer_stop(v114);
  if (*(_DWORD *)(v359 + 1412))
  {
LABEL_77:
    printf("Verbose : ");
    printf("Total time for %40s : %7.3f ms", (const char *)(v359 + 1348), (double)*(uint64_t *)(v359 + 1320) * 0.000001);
    return putchar(10);
  }
  return log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v115, v116, v117, v118, v119, v120, v121, (char)&str_4_1);
}

uint64_t log_col_app(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = (const char *)MEMORY[0x270FA5388]();
  uint64_t v16 = *MEMORY[0x263EF8340];
  v14[0] = v10;
  v14[1] = v11;
  v14[2] = v12;
  __vsprintf_chk(v15, 0, 0x4000uLL, v9, &a9);
  if (vl_log_callback) {
    return vl_log_callback(vl_log_callback_context, v15, v14);
  }
  printf("Verbose : ");
  printf("%s", v15);
  return putchar(10);
}

uint64_t vl_randperm_int_s(uint64_t result, int a2, int32x4_t *a3, unsigned int *a4)
{
  int v7 = result;
  if ((int)result < a2)
  {
    printf("%sError : ", (const char *)&str_1_3);
    printf("n needs to be equal or larger than k");
    float result = putchar(10);
  }
  if (v7 == a2)
  {
    if (v7 < 1) {
      return result;
    }
    uint64_t v8 = v7;
    if (v7 >= 8)
    {
      uint64_t v9 = v7 & 0x7FFFFFF8;
      int32x4_t v16 = (int32x4_t)xmmword_21BB7A770;
      uint64_t v17 = a3 + 1;
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      v19.i64[0] = 0x800000008;
      v19.i64[1] = 0x800000008;
      uint64_t v20 = v7 & 0xFFFFFFF8;
      do
      {
        v17[-1] = v16;
        *uint64_t v17 = vaddq_s32(v16, v18);
        int32x4_t v16 = vaddq_s32(v16, v19);
        v17 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v9 == v7) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    do
    {
      a3->i32[v9] = v9;
      ++v9;
    }
    while (v7 != v9);
LABEL_20:
    uint64_t v21 = 0;
    do
    {
      unsigned int v22 = 214013 * *a4 + 2531011;
      *a4 = v22;
      __int32 v23 = a3->i32[v21];
      uint64_t v24 = v21 + ((int)(HIWORD(v22) & 0x7FFF) % (int)v8);
      a3->i32[v21] = a3->i32[v24];
      a3->i32[v24] = v23;
      ++v21;
      --v8;
    }
    while (v8);
    return result;
  }
  if (a2 >= 1)
  {
    uint64_t v10 = 0;
    int v11 = v7 + 1;
    do
    {
      unsigned int v12 = 214013 * *a4 + 2531011;
      *a4 = v12;
      int v13 = (int)(HIWORD(v12) & 0x7FFF) % v11;
      a3->i32[v10] = v13;
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          while (v13 == a3->i32[i])
          {
            unsigned int v15 = 214013 * *a4 + 2531011;
            *a4 = v15;
            int v13 = (int)(HIWORD(v15) & 0x7FFF) % v11;
            a3->i32[v10] = v13;
          }
        }
      }
      ++v10;
    }
    while (v10 != a2);
  }
  return result;
}

void hash_map_grow(unsigned int *a1, signed int a2)
{
  float v3 = (void *)*((void *)a1 + 6);
  uint64_t v4 = *a1;
  if ((int)v4 < 1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      uint64_t v8 = v3[v5];
      if (v8)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = *(void *)(v8 + 24);
          *(void *)(v7 + 24) = v6;
          uint64_t v6 = v7;
        }
        while (v8);
      }
      else
      {
        uint64_t v7 = v6;
      }
      ++v5;
      uint64_t v6 = v7;
    }
    while (v5 != v4);
  }
  *a1 = a2;
  if (!a1[20])
  {
    size_t v16 = 8 * a2;
    uint64_t v17 = malloc_type_malloc(v16, 0x2004093837F09uLL);
    *((void *)a1 + 6) = v17;
    bzero(v17, v16);
    uint64_t v15 = 0;
    if (!v7) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  size_t v9 = 8 * a2;
  uint64_t v10 = (void *)*((void *)a1 + 9);
  size_t v11 = v9 + v9 * (0x400000 / v9);
  while (1)
  {
    if (v10)
    {
      uint64_t v13 = v10[1];
      if (*v10 - v13 >= v9) {
        break;
      }
    }
    unsigned int v12 = malloc_type_malloc(v11 + 32, 0xBF9F2525uLL);
    v12[2] = v10;
    v12[3] = v12 + 4;
    void *v12 = v11;
    v12[1] = 0;
    *((void *)a1 + 9) = v12;
    uint64_t v10 = v12;
  }
  v10[1] = v13 + v9;
  uint64_t v14 = (char *)v10[3];
  v10[3] = &v14[v9];
  *((void *)a1 + 6) = v14;
  bzero(v14, v9);
  uint64_t v15 = 0;
  if (v7)
  {
LABEL_17:
    unsigned int v18 = *a1;
    do
    {
      uint64_t v19 = *((void *)a1 + 6);
      uint64_t v20 = 8 * (*(_DWORD *)(v7 + 8) % v18);
      uint64_t v21 = *(void *)(v7 + 24);
      *(void *)(v7 + 24) = *(void *)(v19 + v20);
      *(void *)(v19 + v20) = v7;
      ++v15;
      uint64_t v7 = v21;
    }
    while (v21);
  }
LABEL_19:
  *((void *)a1 + 1) = v15;
  if (!a1[20])
  {
    free(v3);
  }
}

uint64_t jenkins_hash(char *a1, uint64_t a2)
{
  unsigned int v2 = 0;
  if (a2)
  {
    do
    {
      int v3 = *a1++;
      unsigned int v2 = (1025 * (v2 + v3)) ^ ((1025 * (v2 + v3)) >> 6);
      --a2;
    }
    while (a2);
    v2 *= 9;
  }
  return 32769 * (v2 ^ (v2 >> 11));
}

void hash_map_create(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 16) = a2;
  if (a3 >= 8) {
    int v3 = 8;
  }
  else {
    int v3 = a3;
  }
  if (a2 >= 1 && v3 >= 1)
  {
    int v4 = a2 % v3;
    unsigned int v5 = v3 - a2 % v3;
    if (!v4) {
      unsigned int v5 = 0;
    }
    a2 += v5;
  }
  *(_DWORD *)(a1 + 20) = a2;
  *(void *)(a1 + 32) = jenkins_hash;
  *(void *)(a1 + 40) = MEMORY[0x263EF89B8];
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  hash_map_grow((unsigned int *)a1, 50);
}

void *hash_map_add(uint64_t a1, void *__src, char *__s)
{
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 24);
  size_t v8 = v7;
  if (__s && v7 == -1) {
    size_t v8 = strlen(__s) + 1;
  }
  if (*(_DWORD *)(a1 + 80))
  {
    unint64_t v9 = v8 + *(int *)(a1 + 20) + 48;
    uint64_t v10 = *(void **)(a1 + 72);
    unint64_t v11 = v9 + v9 * (0x400000 / v9);
    while (1)
    {
      if (v10)
      {
        uint64_t v13 = v10[1];
        if (*v10 - v13 >= v9) {
          break;
        }
      }
      unsigned int v12 = malloc_type_malloc(v11 + 32, 0xBF9F2525uLL);
      v12[2] = v10;
      v12[3] = v12 + 4;
      void *v12 = v11;
      v12[1] = 0;
      *(void *)(a1 + 72) = v12;
      uint64_t v10 = v12;
    }
    v10[1] = v13 + v9;
    uint64_t v14 = (void *)v10[3];
    v10[3] = (char *)v14 + v9;
  }
  else
  {
    uint64_t v14 = malloc_type_malloc(v8 + *(int *)(a1 + 20) + 48, 0x8C66EF07uLL);
  }
  *uint64_t v14 = v14 + 6;
  size_t v15 = *(int *)(a1 + 16);
  size_t v16 = (char *)v14 + *(int *)(a1 + 20) + 48;
  v14[2] = v16;
  memcpy(v14 + 6, __src, v15);
  if (__s) {
    memcpy(v16, __s, v8);
  }
  v14[4] = 0;
  v14[5] = v6;
  *(void *)(a1 + 56) = v14;
  uint64_t v17 = (void *)(a1 + 64);
  if (v6) {
    uint64_t v17 = (void *)(v6 + 32);
  }
  *uint64_t v17 = v14;
  unsigned int v18 = (*(uint64_t (**)(void *, void))(a1 + 32))(__src, *(int *)(a1 + 16));
  *((_DWORD *)v14 + 2) = v18;
  int v19 = *(_DWORD *)a1;
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v21 = 8 * (v18 % *(_DWORD *)a1);
  _DWORD v14[3] = *(void *)(v20 + v21);
  *(void *)(v20 + v21) = v14;
  uint64_t v22 = *(void *)(a1 + 8) + 1;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v22;
  if ((float)((float)v19 * 1.5) < (float)v22) {
    hash_map_grow((unsigned int *)a1, 3 * v19);
  }
  return v14;
}

void vl_match(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v280 = 0;
  float64x2_t v281 = 0;
  size_t v282 = 0;
  size_t v16 = (void *)(int)a7[3];
  timeval v277 = v16;
  if (v16)
  {
    int v17 = v16 * *(_DWORD *)a2;
    unsigned int v18 = (char *)malloc_type_malloc(8 * v17, 0x3829EB77uLL);
    if (*a7 != 2) {
      __assert_rtn("vl_match", "vl_match.c", 244, "par->method == VL_MATCH_METHOD_SSS && \"only SSS supports this\"");
    }
    int v19 = &v18[4 * v17];
    timeval v268 = v18;
    uint64_t v20 = a9;
    timeval v275 = a7;
    if (*(_DWORD *)(a1 + 212)) {
      goto LABEL_4;
    }
  }
  else
  {
    int v19 = 0;
    timeval v268 = 0;
    uint64_t v20 = a9;
    timeval v275 = a7;
    if (*(_DWORD *)(a1 + 212))
    {
LABEL_4:
      *(void *)(a1 + 120) -= mach_absolute_time();
      goto LABEL_7;
    }
  }
  clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a1 + 32));
  clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a1 + 16));
  clock_gettime(_CLOCK_MONOTONIC, (timespec *)a1);
LABEL_7:
  LODWORD(v21) = vl_dump_detail_add_hash(v20, (uint64_t)"vl_match input", a2, 0, (void *)a4).n128_u32[0];
  size_t v22 = *(int *)(a4 + 216);
  uint64_t v269 = a8;
  uint64_t v270 = *a3;
  uint64_t v23 = *a2 * v22;
  uint64_t v266 = a1;
  uint64_t v267 = a4;
  uint64_t v261 = *a2;
  uint64_t v265 = v20;
  if (v23 < 1)
  {
    float32x4_t v27 = 0;
    int64_t v258 = 0;
    if (*a2 < 1) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v23 <= 256) {
    size_t v24 = 256;
  }
  else {
    size_t v24 = *a2 * v22;
  }
  float v25 = (char *)malloc_type_realloc(0, v24, 0x64C6F953uLL);
  uint64_t v26 = *a2;
  uint64_t v23 = *a2 * v22;
  float32x4_t v27 = v25;
  float64x2_t v281 = v25;
  size_t v282 = v24;
  int64_t v258 = v24;
  if (v26 >= 1)
  {
LABEL_14:
    uint64_t v28 = 0;
    uint64_t v29 = 32;
    unsigned int v30 = v27;
    do
    {
      memcpy(v30, (const void *)(a2[1] + v29), v22);
      ++v28;
      v29 += 288;
      v30 += v22;
    }
    while (v28 < *a2);
  }
LABEL_16:
  uint64_t v31 = *a3;
  uint64_t v32 = (int)v23 + *a3 * v22;
  if (v32 > v258)
  {
    uint64_t v33 = 2 * v258;
    if (!v258) {
      uint64_t v33 = 256;
    }
    if (v33 <= v32) {
      size_t v34 = (int)v23 + *a3 * v22;
    }
    else {
      size_t v34 = v33;
    }
    float v35 = (char *)malloc_type_realloc(v27, v34, 0xCB8F7F85uLL);
    uint64_t v31 = *a3;
    uint64_t v32 = (int)v23 + *a3 * v22;
    float32x4_t v27 = v35;
    float64x2_t v281 = v35;
    size_t v282 = v34;
  }
  int v271 = v270 + v261;
  uint64_t v262 = v32;
  uint64_t v280 = v32;
  if (v31 >= 1)
  {
    uint64_t v36 = 0;
    int v37 = &v27[(int)v23];
    uint64_t v38 = 12;
    do
    {
      memcpy(v37, (const void *)(a3[1] + v38), v22);
      ++v36;
      v38 += 268;
      v37 += v22;
    }
    while (v36 < *a3);
  }
  uint64_t v39 = (uint64_t *)v269;
  uint64_t v40 = *(void *)v269;
  uint64_t v41 = *(void *)(v269 + 16);
  uint64_t v42 = v267;
  if (v271 > v41)
  {
    uint64_t v54 = 2 * v41;
    BOOL v220 = v41 == 0;
    uint64_t v55 = 32;
    if (!v220) {
      uint64_t v55 = v54;
    }
    if (v55 <= v271) {
      uint64_t v56 = v271;
    }
    else {
      uint64_t v56 = v55;
    }
    if (v56) {
      *(void *)(v269 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(v269 + 8), 8 * v56, 0xAFED2E99uLL);
    }
    *(void *)(v269 + 16) = v56;
    uint64_t v43 = v271 - v40;
    if (v271 <= v40)
    {
LABEL_28:
      *(void *)uint64_t v269 = v271;
      uint64_t v44 = *(void *)(v269 + 24);
      uint64_t v45 = *(void *)(v269 + 40);
      if (v271 <= v45) {
        goto LABEL_29;
      }
LABEL_42:
      uint64_t v57 = 2 * v45;
      BOOL v220 = v45 == 0;
      uint64_t v58 = 32;
      if (!v220) {
        uint64_t v58 = v57;
      }
      if (v58 <= v271) {
        uint64_t v59 = v271;
      }
      else {
        uint64_t v59 = v58;
      }
      if (v59) {
        *(void *)(v269 + 32) = malloc_type_realloc(*(void **)(v269 + 32), 8 * v59, 0xFE5128DAuLL);
      }
      *(void *)(v269 + 40) = v59;
      uint64_t v46 = v275;
      unint64_t v47 = v277;
      uint64_t v48 = v271 - v44;
      if (v271 <= v44) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v43 = v271 - v40;
    if (v271 <= v40) {
      goto LABEL_28;
    }
  }
  bzero((void *)(*(void *)(v269 + 8) + 8 * *(void *)v269), 8 * v43);
  *(void *)uint64_t v269 = v271;
  uint64_t v44 = *(void *)(v269 + 24);
  uint64_t v45 = *(void *)(v269 + 40);
  if (v271 > v45) {
    goto LABEL_42;
  }
LABEL_29:
  uint64_t v46 = v275;
  unint64_t v47 = v277;
  uint64_t v48 = v271 - v44;
  if (v271 > v44) {
LABEL_30:
  }
    bzero((void *)(*(void *)(v269 + 32) + 8 * *(void *)(v269 + 24)), 8 * v48);
LABEL_31:
  *(void *)(v269 + 24) = v271;
  uint64_t v49 = v266;
  switch(*v46)
  {
    case 0:
      int v50 = *(_DWORD *)(v267 + 216);
      uint64_t v51 = v266;
      uint64_t v52 = (void *)v267;
      int v53 = 0;
      goto LABEL_53;
    case 1:
      int v50 = *(_DWORD *)(v267 + 216);
      uint64_t v51 = v266;
      uint64_t v52 = (void *)v267;
      int v53 = 1;
LABEL_53:
      vl_match_exhaustive(v21, v51, &v280, v52, v50, v53, v269);
      if (!v47) {
        goto LABEL_105;
      }
      goto LABEL_73;
    case 2:
      uint64_t v272 = v266 + 216;
      if (*(_DWORD *)(v266 + 428))
      {
        *(void *)(v266 + 336) -= mach_absolute_time();
        uint64_t v60 = *a5;
        uint64_t v61 = v267;
        uint64_t v62 = *(int *)(v267 + 216);
        long long v63 = v46 + 1;
        if (v47) {
          goto LABEL_57;
        }
LABEL_66:
        uint64_t v39 = (uint64_t *)v269;
        vl_match_sss(v266, &v280, v61, v60, v62, v63, (void *)v269);
        vl_timer_stop(v272);
        if (*(_DWORD *)(v266 + 428)) {
          goto LABEL_72;
        }
LABEL_67:
        log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v69, v70, v71, v72, v73, v74, v75, (char)&str_4_1);
        uint64_t v42 = v267;
        if (!v47) {
          goto LABEL_105;
        }
        goto LABEL_73;
      }
      clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v266 + 248));
      clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v266 + 232));
      clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v266 + 216));
      uint64_t v60 = *a5;
      uint64_t v61 = v267;
      uint64_t v62 = *(int *)(v267 + 216);
      long long v63 = v46 + 1;
      if (!v47) {
        goto LABEL_66;
      }
LABEL_57:
      long long v284 = 0u;
      memset(v285, 0, 28);
      long long v283 = 0u;
      sss_par_version(*v63, (uint64_t)&v283);
      if ((int)(v262 / v62) >= 1)
      {
        long long v64 = v281;
        float v65 = (float)(255 * v62);
        uint64_t v66 = (v262 / v62);
        if (v19)
        {
          uint64_t v67 = 0;
          uint64_t v68 = 0;
          do
          {
            sss_knn(v60, (uint64_t)&v283, v65, (uint64_t)v64 + v68 * *(int *)(v60 + 260), &v268[v67], (uint64_t)&v19[v67], v47);
            long long v64 = v281;
            ++v68;
            v67 += 4 * (void)v277;
          }
          while (v66 != v68);
        }
        else
        {
          uint64_t v76 = 0;
          uint64_t v77 = v268;
          do
          {
            sss_knn(v60, (uint64_t)&v283, v65, (uint64_t)v64 + v76 * *(int *)(v60 + 260), v77, 0, (int)v277);
            long long v64 = v281;
            ++v76;
            v77 += 4 * (void)v277;
          }
          while (v66 != v76);
        }
      }
      uint64_t v49 = v266;
      uint64_t v39 = (uint64_t *)v269;
      uint64_t v46 = v275;
      vl_timer_stop(v272);
      if (!*(_DWORD *)(v266 + 428)) {
        goto LABEL_67;
      }
LABEL_72:
      printf("Verbose : ");
      printf("Total time for %40s : %7.3f ms", (const char *)(v49 + 364), (double)*(uint64_t *)(v49 + 336) * 0.000001);
      putchar(10);
      uint64_t v42 = v267;
      if (!v47) {
        goto LABEL_105;
      }
LABEL_73:
      float v78 = *(float *)(a6 + 252) * 3.14159265 / 180.0;
      float v79 = tanf(v78);
      if ((int)v277 <= 1) {
        __assert_rtn("vl_match_filter_prior", "vl_match.c", 149, "knn >= VL_MATCH_MAX_NN");
      }
      float v278 = v79;
      long long v286 = 0u;
      long long v287 = 0u;
      memset(v285, 0, sizeof(v285));
      long long v283 = 0u;
      long long v284 = 0u;
      g_coords_diff((double *)(a6 + 304), (double *)(v42 + 240), (uint64_t)&v283);
      long long v80 = v287;
      long long v81 = v283;
      double v83 = *(double *)&v285[3];
      double v82 = *(double *)&v285[2];
      double v84 = *((double *)&v284 + 1);
      double v85 = *(double *)&v284;
      double v86 = *(double *)&v285[1];
      double v87 = *(double *)v285;
      double v88 = *((double *)&v286 + 1);
      double v89 = *(double *)&v286;
      uint64_t v90 = *a2;
      uint64_t v91 = (float32x2_t *)a2[1];
      if ((int)*a2 >= 1)
      {
        double v257 = *((double *)&v286 + 1);
        double v259 = *((double *)&v284 + 1);
        double v263 = *(double *)v285;
        double v273 = *(double *)&v285[2];
        uint64_t v92 = *a2;
        do
        {
          v290[0] = vcvtq_f64_f32(*v91);
          uint64_t v288 = 0;
          float64x2_t v289 = 0uLL;
          g_improj2_to_xyz(a6 + 24, v290, (double *)&v288);
          *uint64_t v91 = vcvt_f32_f64(v289);
          v91 += 36;
          --v92;
        }
        while (v92);
        uint64_t v90 = *a2;
        uint64_t v91 = (float32x2_t *)a2[1];
        double v82 = v273;
        double v84 = v259;
        double v87 = v263;
        double v88 = v257;
      }
      if (v90 >= 1)
      {
        uint64_t v93 = 0;
        float v94 = v88;
        float v98 = v84;
        float v99 = v82;
        float v101 = v87;
        float v102 = v83;
        float v103 = v85;
        uint64_t v105 = v268;
        uint64_t v106 = *(void *)(v269 + 8);
        uint64_t v107 = *(void *)(v269 + 32);
        uint64_t v108 = 4 * v47;
        uint64_t v110 = v107;
        uint64_t v111 = v106;
        do
        {
          unint64_t v112 = 0;
          uint64_t v113 = 0;
          uint64_t v114 = (float *)&v91[36 * v93];
          uint64_t v115 = v114 + 1;
          do
          {
            if (v112 <= 1)
            {
              uint64_t v116 = 4 * v112;
              *(_DWORD *)(v111 + v116) = *(_DWORD *)&v105[4 * v112];
              *(float *)(v110 + v116) = (float)(255 * *(_DWORD *)(v42 + 216));
            }
            int v117 = *(_DWORD *)&v105[4 * v112];
            if (v117 != -1)
            {
              uint64_t v118 = (float *)(*(void *)(v42 + 8) + 12 * v117);
              float v119 = *v118 - v94;
              float v95 = *(double *)&v80;
              float v120 = v118[1] - v95;
              float v96 = *((double *)&v80 + 1);
              float v121 = v118[2] - v96;
              float v97 = *(double *)&v81;
              float v122 = (float)((float)(v120 * v98) + (float)(v97 * v119)) + (float)(v99 * v121);
              float v100 = *((double *)&v81 + 1);
              float v123 = (float)((float)(v120 * v101) + (float)(v100 * v119)) + (float)(v102 * v121);
              float v104 = v86;
              float v109 = v89;
              float v124 = (float)((float)(v120 * v104) + (float)(v103 * v119)) + (float)(v109 * v121);
              float v125 = *(float *)(a6 + 228);
              float v126 = *v114;
              float v127 = *v115;
              float v128 = 0.0;
              if ((float)((float)((float)((float)(v122 * *v115) - v124) * (float)((float)(v122 * *v115) - v124))
                         + (float)((float)((float)(*v114 * v122) - v123) * (float)((float)(*v114 * v122) - v123))) > (float)(v125 * v125))
              {
                if (v125 <= 1.0) {
                  float v129 = *(float *)(a6 + 228);
                }
                else {
                  float v129 = 1.0;
                }
                if (v122 >= 1.0) {
                  float v130 = v122;
                }
                else {
                  float v130 = v129;
                }
                float v131 = sqrtf((float)((float)(v126 * v126) + 1.0) + (float)(v127 * v127));
                float v128 = 0.0;
                float v132 = 0.0;
                float v133 = 0.0;
                float v134 = 0.0;
                if (v131 > 0.0)
                {
                  float v132 = 1.0 / v131;
                  float v133 = v126 / v131;
                  float v134 = v127 / v131;
                }
                float v135 = (float)((float)(v123 * v133) + (float)(v130 * v132)) + (float)(v124 * v134);
                float v136 = v133 * v135;
                float v137 = v134 * v135;
                float v138 = (float)(v132 * v135) - v122;
                float v139 = v136 - v123;
                float v140 = v137 - v124;
                float v141 = (float)((float)(v139 * v139) + (float)(v138 * v138)) + (float)(v140 * v140);
                if (v141 > (float)(v125 * v125))
                {
                  float v142 = v125 / sqrtf(v141);
                  float v128 = (float)((float)(v127
                                       - (float)((float)(v124 + (float)(v140 * v142))
                                               / (float)(v122 + (float)(v138 * v142))))
                               * (float)(v127
                                       - (float)((float)(v124 + (float)(v140 * v142))
                                               / (float)(v122 + (float)(v138 * v142)))))
                       + (float)((float)(v126
                                       - (float)((float)(v123 + (float)(v139 * v142))
                                               / (float)(v122 + (float)(v138 * v142))))
                               * (float)(v126
                                       - (float)((float)(v123 + (float)(v139 * v142))
                                               / (float)(v122 + (float)(v138 * v142)))));
                }
              }
              if (v128 <= (float)(v278 * v278))
              {
                uint64_t v143 = 4 * v113;
                *(_DWORD *)(v106 + 8 * v93 + v143) = v117;
                *(float *)(v107 + 8 * v93 + v143) = (float)*(int *)&v19[4 * v112];
                ++v113;
              }
            }
            ++v112;
          }
          while (v112 < v47 && (int)v113 < 2);
          ++v93;
          v105 += v108;
          v111 += 8;
          v110 += 8;
          v19 += v108;
        }
        while (v93 != v90);
      }
      if ((int)v90 >= 1)
      {
        uint64_t v144 = v90;
        do
        {
          v290[0] = 0uLL;
          uint64_t v288 = 0x3FF0000000000000;
          float64x2_t v289 = vcvtq_f64_f32(*v91);
          g_xyz_to_improj2(a6 + 24, (uint64_t)&v288, v290[0].f64, 0, v90);
          *uint64_t v91 = vcvt_f32_f64(v290[0]);
          v91 += 36;
          --v144;
        }
        while (v144);
      }
      uint64_t v49 = v266;
      uint64_t v42 = v267;
      uint64_t v39 = (uint64_t *)v269;
      uint64_t v46 = v275;
LABEL_105:
      vl_dump_detail_match(v265, (uint64_t)v39);
      if (*((float *)v46 + 2) > 0.0)
      {
        if (*(_DWORD *)(v49 + 644))
        {
          *(void *)(v49 + 552) -= mach_absolute_time();
          float v145 = *((float *)v46 + 2);
          if (v145 <= 0.0) {
            goto LABEL_108;
          }
        }
        else
        {
          clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v49 + 464));
          clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v49 + 448));
          clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v49 + 432));
          float v145 = *((float *)v46 + 2);
          if (v145 <= 0.0)
          {
LABEL_108:
            vl_timer_stop(v49 + 432);
            if (*(_DWORD *)(v49 + 644))
            {
LABEL_109:
              printf("Verbose : ");
              printf("Total time for %40s : %7.3f ms", (const char *)(v49 + 580), (double)*(uint64_t *)(v49 + 552) * 0.000001);
              putchar(10);
              goto LABEL_237;
            }
            goto LABEL_236;
          }
        }
        uint64_t v260 = v49 + 432;
        uint64_t v264 = *(void *)v42;
        uint64_t v153 = *(void *)v42;
        uint64_t v154 = *a2;
        uint64_t v155 = *a2;
        float v156 = malloc_type_calloc((int)v155, 1uLL, 0x100004077774924uLL);
        uint64_t v274 = v153;
        timeval v279 = (void **)malloc_type_calloc((int)v153, 0x18uLL, 0x1010040A500212DuLL);
        if ((int)v154 >= 1)
        {
          uint64_t v157 = 0;
          uint64_t v158 = 0;
          do
          {
            int v159 = *(_DWORD *)(v39[1] + v157);
            if (v159 != -1)
            {
              uint64_t v160 = (uint64_t *)&v279[3 * v159];
              uint64_t v161 = *v160;
              uint64_t v162 = v160[2];
              if (*v160 >= v162)
              {
                uint64_t v163 = 2 * v162;
                BOOL v220 = v162 == 0;
                uint64_t v164 = 64;
                if (!v220) {
                  uint64_t v164 = v163;
                }
                if (v164 <= v161) {
                  uint64_t v165 = v161 + 1;
                }
                else {
                  uint64_t v165 = v164;
                }
                if (v165)
                {
                  v279[3 * v159 + 1] = malloc_type_realloc(v279[3 * v159 + 1], 4 * v165, 0xBDB83E4FuLL);
                  uint64_t v161 = *v160;
                }
                v160[2] = v165;
                uint64_t v39 = (uint64_t *)v269;
              }
              *uint64_t v160 = v161 + 1;
              *((_DWORD *)v279[3 * v159 + 1] + v161) = v158;
            }
            ++v158;
            v157 += 8;
          }
          while (v155 != v158);
        }
        if ((int)v264 >= 1)
        {
          uint64_t v166 = 0;
          float v167 = v145 * v145;
          while (1)
          {
            uint64_t v276 = v166;
            float v168 = (uint64_t *)&v279[3 * v166];
            uint64_t v169 = *v168;
            if (*v168 >= 2) {
              break;
            }
LABEL_127:
            uint64_t v166 = v276 + 1;
            if (v276 + 1 == v274) {
              goto LABEL_173;
            }
          }
          float v170 = (char *)&v279[3 * v166];
          uint64_t v171 = (void **)(v170 + 8);
          BOOL v172 = (uint64_t *)(v170 + 16);
          while (1)
          {
            uint64_t v173 = a2[1];
            uint64_t v174 = (int *)*v171;
            unint64_t v175 = (float *)(v173 + 288 * *(int *)*v171);
            uint64_t v176 = v175 + 1;
            uint64_t v177 = 1;
            float v178 = v175[1];
            float v179 = *v175;
            int v180 = 1;
            do
            {
              uint64_t v181 = (float *)(v173 + 288 * v174[v177]);
              float v182 = *v181;
              float v183 = (float)((float)(v175[1] - v181[1]) * (float)(v175[1] - v181[1]))
                   + (float)((float)(*v175 - *v181) * (float)(*v175 - *v181));
              if (v183 > v167) {
                float v182 = -0.0;
              }
              else {
                ++v180;
              }
              float v179 = v179 + v182;
              if (v183 > v167) {
                float v184 = -0.0;
              }
              else {
                float v184 = v181[1];
              }
              float v178 = v178 + v184;
              ++v177;
            }
            while (v169 != v177);
            float v185 = v179 / (float)v180;
            *unint64_t v175 = v185;
            uint64_t v186 = v169 <= 2 ? 2 : v169;
            uint64_t v187 = v186 - 1;
            float v188 = v178 / (float)v180;
            *uint64_t v176 = v188;
            uint64_t v189 = v174 + 1;
            int v190 = 1;
            float v191 = v188;
            float v192 = v185;
            do
            {
              int v193 = *v189++;
              float64x2_t v194 = (float *)(v173 + 288 * v193);
              float v195 = *v194;
              float v196 = (float)((float)(v188 - v194[1]) * (float)(v188 - v194[1]))
                   + (float)((float)(v185 - *v194) * (float)(v185 - *v194));
              if (v196 > v167) {
                float v195 = -0.0;
              }
              else {
                ++v190;
              }
              float v192 = v192 + v195;
              if (v196 > v167) {
                float v197 = -0.0;
              }
              else {
                float v197 = v194[1];
              }
              float v191 = v191 + v197;
              --v187;
            }
            while (v187);
            float v198 = v192 / (float)v190;
            *unint64_t v175 = v198;
            float v199 = v191 / (float)v190;
            *uint64_t v176 = v199;
            uint64_t v200 = v169;
            uint64_t v201 = 1;
            do
            {
              uint64_t v202 = *((int *)*v171 + v201);
              timeval v203 = (float *)(a2[1] + 288 * (int)v202);
              if ((float)((float)((float)(*v176 - v203[1]) * (float)(*v176 - v203[1]))
                         + (float)((float)(*v175 - *v203) * (float)(*v175 - *v203))) <= v167)
              {
                v156[v202] = 1;
                uint64_t v200 = *v168;
              }
              ++v201;
            }
            while (v200 > v201);
            *unint64_t v175 = v198;
            *uint64_t v176 = v199;
            if (v200 >= 1)
            {
              uint64_t v169 = 0;
              uint64_t v209 = v200 - 1;
              if (v200 != 1)
              {
                float64x2_t v210 = *v171;
                timeval v211 = (int *)((char *)*v171 + 4);
                do
                {
                  uint64_t v213 = *v211++;
                  int v212 = v213;
                  if (!v156[v213]) {
                    v210[v169++] = v212;
                  }
                  --v209;
                }
                while (v209);
              }
            }
            else
            {
              uint64_t v169 = 0;
            }
            uint64_t v204 = *v172;
            if (v169 > *v172) {
              break;
            }
            uint64_t v205 = v169 - v200;
            if (v169 > v200) {
              goto LABEL_167;
            }
LABEL_130:
            *float v168 = v169;
            if (v169 <= 1) {
              goto LABEL_127;
            }
          }
          uint64_t v206 = 2 * v204;
          BOOL v220 = v204 == 0;
          uint64_t v207 = 64;
          if (!v220) {
            uint64_t v207 = v206;
          }
          if (v207 <= v169) {
            uint64_t v208 = v169;
          }
          else {
            uint64_t v208 = v207;
          }
          if (v208) {
            *uint64_t v171 = malloc_type_realloc(*v171, 4 * v208, 0x90001D16uLL);
          }
          *BOOL v172 = v208;
          uint64_t v205 = v169 - v200;
          if (v169 <= v200) {
            goto LABEL_130;
          }
LABEL_167:
          bzero((char *)*v171 + 4 * *v168, 4 * v205);
          goto LABEL_130;
        }
LABEL_173:
        uint64_t v214 = *a2;
        if (*a2 < 1)
        {
          uint64_t v216 = 0;
          uint64_t v218 = v260;
        }
        else
        {
          uint64_t v215 = 0;
          uint64_t v216 = 0;
          uint64_t v217 = 0;
          uint64_t v218 = v260;
          do
          {
            uint64_t v219 = a2[1];
            if (v156[v217]) {
              BOOL v220 = 1;
            }
            else {
              BOOL v220 = v219 == 0;
            }
            if (!v220)
            {
              memcpy((void *)(v219 + 288 * v216++), (const void *)(v219 + v215), 0x120uLL);
              uint64_t v214 = *a2;
            }
            ++v217;
            v215 += 288;
          }
          while (v217 < v214);
        }
        uint64_t v221 = a2[2];
        uint64_t v39 = (uint64_t *)v269;
        if (v216 > v221)
        {
          uint64_t v225 = 2 * v221;
          if (v225 <= v216) {
            uint64_t v226 = v216;
          }
          else {
            uint64_t v226 = v225;
          }
          if (v226) {
            a2[1] = (uint64_t)malloc_type_realloc((void *)a2[1], 288 * v226, 0x5E8DA77AuLL);
          }
          a2[2] = v226;
          uint64_t v222 = v216 - v214;
          if (v216 <= v214)
          {
LABEL_184:
            *a2 = v216;
            uint64_t v223 = *(void *)(v269 + 24);
            uint64_t v224 = v274;
            if (v223 < 1) {
              goto LABEL_200;
            }
            goto LABEL_193;
          }
        }
        else
        {
          uint64_t v222 = v216 - v214;
          if (v216 <= v214) {
            goto LABEL_184;
          }
        }
        bzero((void *)(a2[1] + 288 * *a2), 288 * v222);
        *a2 = v216;
        uint64_t v223 = *(void *)(v269 + 24);
        uint64_t v224 = v274;
        if (v223 < 1) {
          goto LABEL_200;
        }
LABEL_193:
        uint64_t v227 = *(void *)(v269 + 32);
        if (v227)
        {
          uint64_t v228 = 0;
          unint64_t v229 = 0;
          uint64_t v230 = 2 * v223;
          if (2 * v223 <= 1) {
            uint64_t v230 = 1;
          }
          do
          {
            if (!v156[v229 >> 1]) {
              *(_DWORD *)(v227 + 4 * v228++) = *(_DWORD *)(v227 + 4 * v229);
            }
            ++v229;
          }
          while (v230 != v229);
        }
LABEL_200:
        uint64_t v231 = *(void *)(v269 + 40);
        if (v216 > v231)
        {
          uint64_t v235 = 2 * v231;
          BOOL v220 = v231 == 0;
          uint64_t v236 = 32;
          if (!v220) {
            uint64_t v236 = v235;
          }
          if (v236 <= v216) {
            uint64_t v237 = v216;
          }
          else {
            uint64_t v237 = v236;
          }
          if (v237) {
            *(void *)(v269 + 32) = malloc_type_realloc(*(void **)(v269 + 32), 8 * v237, 0xC0609243uLL);
          }
          *(void *)(v269 + 40) = v237;
          uint64_t v224 = v274;
          uint64_t v232 = v216 - v223;
          if (v216 <= v223)
          {
LABEL_202:
            uint64_t v233 = *a2;
            *(void *)(v269 + 24) = *a2;
            uint64_t v234 = *(void *)v269;
            if (*(uint64_t *)v269 < 1) {
              goto LABEL_220;
            }
            goto LABEL_213;
          }
        }
        else
        {
          uint64_t v232 = v216 - v223;
          if (v216 <= v223) {
            goto LABEL_202;
          }
        }
        bzero((void *)(*(void *)(v269 + 32) + 8 * *(void *)(v269 + 24)), 8 * v232);
        uint64_t v233 = *a2;
        *(void *)(v269 + 24) = *a2;
        uint64_t v234 = *(void *)v269;
        if (*(uint64_t *)v269 < 1) {
          goto LABEL_220;
        }
LABEL_213:
        uint64_t v238 = *(void *)(v269 + 8);
        if (v238)
        {
          uint64_t v239 = 0;
          unint64_t v240 = 0;
          uint64_t v241 = 2 * v234;
          if (2 * v234 <= 1) {
            uint64_t v241 = 1;
          }
          do
          {
            if (!v156[v240 >> 1]) {
              *(_DWORD *)(v238 + 4 * v239++) = *(_DWORD *)(v238 + 4 * v240);
            }
            ++v240;
          }
          while (v241 != v240);
        }
LABEL_220:
        uint64_t v242 = *(void *)(v269 + 16);
        if (v233 > v242)
        {
          uint64_t v244 = 2 * v242;
          BOOL v220 = v242 == 0;
          uint64_t v245 = 32;
          if (!v220) {
            uint64_t v245 = v244;
          }
          if (v245 <= v233) {
            uint64_t v246 = v233;
          }
          else {
            uint64_t v246 = v245;
          }
          if (v246) {
            *(void *)(v269 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(v269 + 8), 8 * v246, 0x551CDAF9uLL);
          }
          *(void *)(v269 + 16) = v246;
          uint64_t v224 = v274;
          uint64_t v243 = v233 - v234;
          if (v233 <= v234)
          {
LABEL_222:
            *(void *)uint64_t v269 = *a2;
            uint64_t v49 = v266;
            if ((int)v264 < 1) {
              goto LABEL_235;
            }
            goto LABEL_233;
          }
        }
        else
        {
          uint64_t v243 = v233 - v234;
          if (v233 <= v234) {
            goto LABEL_222;
          }
        }
        bzero((void *)(*(void *)(v269 + 8) + 8 * *(void *)v269), 8 * v243);
        *(void *)uint64_t v269 = *a2;
        uint64_t v49 = v266;
        if ((int)v264 < 1) {
          goto LABEL_235;
        }
LABEL_233:
        timeval v247 = v279 + 1;
        do
        {
          long long v248 = *v247;
          v247 += 3;
          free(v248);
          --v224;
        }
        while (v224);
LABEL_235:
        free(v279);
        free(v156);
        uint64_t v42 = v267;
        vl_timer_stop(v218);
        if (*(_DWORD *)(v49 + 644)) {
          goto LABEL_109;
        }
LABEL_236:
        log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v146, v147, v148, v149, v150, v151, v152, (char)&str_4_1);
      }
LABEL_237:
      vl_dump_detail_add_hash(v265, (uint64_t)"vl_match output", a2, v39, (void *)v42);
      printf("Verbose : ");
      printf("MATCH: Found %s%llu%s matches", (const char *)&unk_21BB738AE, *v39, (const char *)&unk_21BB738AE);
      putchar(10);
      vl_timer_stop(v49);
      if (*(_DWORD *)(v49 + 212))
      {
        printf("Verbose : ");
        printf("Total time for %40s : %7.3f ms", (const char *)(v49 + 148), (double)*(uint64_t *)(v49 + 120) * 0.000001);
        putchar(10);
      }
      else
      {
        log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v249, v250, v251, v252, v253, v254, v255, (char)&str_4_1);
      }
      free(v281);
      free(v268);
      return;
    case 3:
      printf("Info : ");
      printf("Skipping feature matching (VL_MATCH_METHOD_NONE)");
      goto LABEL_63;
    default:
      printf("%sError : ", (const char *)&unk_21BB738AE);
      printf("Unsupported match method %d");
LABEL_63:
      putchar(10);
      if (!v47) {
        goto LABEL_105;
      }
      goto LABEL_73;
  }
}

uint64_t vl_desc_cluster_similar(uint8x8_t *a1, int a2, int a3, int *a4, int a5, int a6)
{
  int v134 = 0;
  uint64_t v135 = 0x3DCCCCCD3F800000;
  v133[0] = xmmword_21BB7B340;
  v133[1] = xmmword_21BB7B350;
  long long v136 = xmmword_21BB7B360;
  ids = sss_create_ids(a1, 0, a2, a3, v133);
  uint64_t v10 = (char *)malloc_type_malloc(32 * a3, 0x100004052888210uLL);
  uint64_t v11 = a3;
  float v122 = v10;
  uint64_t v105 = ids;
  int v106 = a3;
  if (a3 < 1)
  {
    int v17 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = v10;
    do
    {
      sss_knn((uint64_t)ids, (uint64_t)v133, (float)a5, (uint64_t)a1 + v12 * ids[65], v13, 0, 8);
      ++v12;
      v13 += 32;
    }
    while (v11 != v12);
    memset(a4, 255, 4 * v11);
    int v14 = a6;
    if (a6 > 0)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      int v17 = 0;
      int v18 = a2;
      int v19 = a2 & 0xF;
      int v20 = a5 * a5;
      uint64_t v21 = a2;
      uint64_t v22 = a2 & 0xFFFFFFE0;
      size_t v24 = a1;
      uint64_t v23 = v122;
      uint64_t v107 = a2 & 0xFFFFFFF8;
      int8x16_t v25 = 0uLL;
      uint64_t v26 = a1;
      float32x4_t v27 = a1 + 2;
      int v112 = a5 * a5;
      uint64_t v132 = v11;
      while ((a4[v15] & 0x80000000) == 0)
      {
LABEL_6:
        ++v15;
        float32x4_t v27 = (uint8x8_t *)((char *)v27 + v21);
        uint64_t v26 = (uint8x8_t *)((char *)v26 + v21);
        if (v15 == v11) {
          goto LABEL_138;
        }
      }
      float v130 = v27;
      uint64_t v131 = v15;
      if (v16 <= 0)
      {
        uint64_t v28 = 2 * v16;
        if (2 * v16 <= 1) {
          uint64_t v28 = 1;
        }
        if (v16) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 64;
        }
        int v17 = malloc_type_realloc(v17, 4 * v29, 0xAEE287F0uLL);
        uint64_t v16 = v29;
        float32x4_t v27 = v130;
        uint64_t v15 = v131;
        int8x16_t v25 = 0uLL;
        uint64_t v22 = a2 & 0xFFFFFFE0;
        uint64_t v21 = a2;
        int v20 = v112;
        int v19 = a2 & 0xF;
        size_t v24 = a1;
        uint64_t v23 = v122;
        int v18 = a2;
        int v14 = a6;
      }
      int v30 = 0;
      *int v17 = v15;
      int v31 = -2 - v15;
      uint64_t v32 = 1;
      int v123 = -2 - v15;
      while (1)
      {
        uint64_t v33 = v17[v32 - 1];
        if ((v33 & 0x80000000) != 0 || (int v34 = a4[v33], (v34 & 0x80000000) == 0))
        {
LABEL_18:
          --v32;
          goto LABEL_19;
        }
        if (v34 == v31) {
          goto LABEL_6;
        }
        int v35 = v17[v32 - 1];
        a4[v33] = v31;
        uint64_t v36 = (char *)v24 + (int)v33 * (uint64_t)(int)v21;
        if (v19)
        {
          if (v18 < 1) {
            goto LABEL_42;
          }
          if (v18 < 8)
          {
            uint64_t v37 = 0;
            int v38 = 0;
            do
            {
LABEL_40:
              int v73 = v26->u8[v37] - v36[v37];
              v38 += v73 * v73;
              ++v37;
            }
            while (a2 != v37);
            goto LABEL_41;
          }
          uint64_t v45 = (int)v33 * (uint64_t)(int)v21;
          if (v18 >= 0x20)
          {
            int32x4_t v47 = 0uLL;
            uint64_t v48 = (uint8x8_t *)((char *)a1 + v45 + 16);
            int32x4_t v49 = 0uLL;
            uint64_t v50 = v22;
            uint64_t v51 = v27;
            int32x4_t v52 = 0uLL;
            int32x4_t v53 = 0uLL;
            int32x4_t v54 = 0uLL;
            int32x4_t v55 = 0uLL;
            int32x4_t v56 = 0uLL;
            int32x4_t v57 = 0uLL;
            do
            {
              uint8x16_t v58 = *(uint8x16_t *)v51[-2].i8;
              uint8x16_t v59 = *(uint8x16_t *)v48[-2].i8;
              int16x8_t v60 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v58.i8, *(uint8x8_t *)v59.i8);
              int16x8_t v61 = (int16x8_t)vsubl_high_u8(v58, v59);
              int16x8_t v62 = (int16x8_t)vsubl_u8(*v51, *v48);
              int16x8_t v63 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v51->i8, *(uint8x16_t *)v48->i8);
              int32x4_t v53 = vmlal_high_s16(v53, v61, v61);
              int32x4_t v52 = vmlal_s16(v52, *(int16x4_t *)v61.i8, *(int16x4_t *)v61.i8);
              int32x4_t v49 = vmlal_high_s16(v49, v60, v60);
              int32x4_t v47 = vmlal_s16(v47, *(int16x4_t *)v60.i8, *(int16x4_t *)v60.i8);
              int32x4_t v57 = vmlal_high_s16(v57, v63, v63);
              int32x4_t v56 = vmlal_s16(v56, *(int16x4_t *)v63.i8, *(int16x4_t *)v63.i8);
              int32x4_t v55 = vmlal_high_s16(v55, v62, v62);
              int32x4_t v54 = vmlal_s16(v54, *(int16x4_t *)v62.i8, *(int16x4_t *)v62.i8);
              v51 += 4;
              v48 += 4;
              v50 -= 32;
            }
            while (v50);
            int v38 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v54, v47), vaddq_s32(v56, v52)), vaddq_s32(vaddq_s32(v55, v49), vaddq_s32(v57, v53))));
            if (v22 == a2) {
              goto LABEL_41;
            }
            uint64_t v46 = v22;
            uint64_t v37 = v22;
            if ((a2 & 0x18) == 0) {
              goto LABEL_40;
            }
          }
          else
          {
            int v38 = 0;
            uint64_t v46 = 0;
          }
          int32x4_t v64 = 0uLL;
          int32x4_t v65 = (int32x4_t)v38;
          uint64_t v66 = (uint8x8_t *)((char *)v26 + v46);
          uint64_t v67 = (uint8x8_t *)((char *)v24 + v46 + v45);
          uint64_t v68 = v46 - v107;
          do
          {
            uint8x8_t v69 = *v66++;
            uint8x8_t v70 = v69;
            uint8x8_t v71 = *v67++;
            int16x8_t v72 = (int16x8_t)vsubl_u8(v70, v71);
            int32x4_t v64 = vmlal_high_s16(v64, v72, v72);
            int32x4_t v65 = vmlal_s16(v65, *(int16x4_t *)v72.i8, *(int16x4_t *)v72.i8);
            v68 += 8;
          }
          while (v68);
          int v38 = vaddvq_s32(vaddq_s32(v65, v64));
          uint64_t v37 = a2 & 0xFFFFFFF8;
          if (v107 != a2) {
            goto LABEL_40;
          }
        }
        else
        {
          int32x4_t v39 = 0uLL;
          if (v18 >= 16)
          {
            uint64_t v40 = 0;
            do
            {
              int8x16_t v41 = *(int8x16_t *)v26[2 * v40].i8;
              int8x16_t v42 = *(int8x16_t *)&v36[16 * v40];
              int16x8_t v43 = (int16x8_t)vabdq_u16((uint16x8_t)vzip1q_s8(v41, v25), (uint16x8_t)vzip1q_s8(v42, v25));
              int16x8_t v44 = (int16x8_t)vabdq_u16((uint16x8_t)vzip2q_s8(v41, v25), (uint16x8_t)vzip2q_s8(v42, v25));
              int32x4_t v39 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v39, (uint16x8_t)vmulq_s16(v43, v43)), (uint16x8_t)vmulq_s16(v44, v44));
              ++v40;
            }
            while (a2 >> 4 != v40);
          }
          int v38 = vaddvq_s32(v39);
        }
LABEL_41:
        if (v38 > v20) {
          goto LABEL_18;
        }
LABEL_42:
        a4[v33] = v15;
        ++v30;
        int v74 = v23[8 * (int)v33];
        if (v74 == v33)
        {
          --v32;
          uint64_t v75 = 8 * (int)v33;
          uint64_t v76 = 32 * (int)v33;
          int v77 = *(_DWORD *)((char *)v23 + (v76 | 4));
          if (v77 == v33) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v74 < 0)
          {
            --v32;
            uint64_t v11 = v132;
            goto LABEL_19;
          }
          if (v32 > v16)
          {
            uint64_t v84 = 2 * v16;
            if (!v16) {
              uint64_t v84 = 64;
            }
            if (v84 <= v32) {
              uint64_t v84 = v32;
            }
            if (v84)
            {
              uint64_t v124 = v84;
              int v17 = malloc_type_realloc(v17, 4 * v84, 0x3A09BCB0uLL);
              int v31 = v123;
              uint64_t v16 = v124;
              float32x4_t v27 = v130;
              int8x16_t v25 = 0uLL;
              uint64_t v22 = a2 & 0xFFFFFFE0;
              uint64_t v21 = a2;
              int v20 = v112;
              int v19 = a2 & 0xF;
              uint64_t v15 = v131;
              size_t v24 = a1;
              uint64_t v23 = v122;
              int v18 = a2;
              int v14 = a6;
            }
            else
            {
              uint64_t v16 = 0;
            }
          }
          v17[v32 - 1] = v74;
          uint64_t v75 = 8 * (int)v33;
          uint64_t v76 = 32 * (int)v33;
          int v77 = *(_DWORD *)((char *)v23 + (v76 | 4));
          if (v77 == v33)
          {
LABEL_44:
            int v78 = *(_DWORD *)((char *)v23 + (v76 | 8));
            if (v78 == v33) {
              goto LABEL_45;
            }
            goto LABEL_71;
          }
        }
        if (v77 < 0) {
          goto LABEL_122;
        }
        if (v32 < v16) {
          goto LABEL_70;
        }
        uint64_t v85 = 2 * v16;
        if (!v16) {
          uint64_t v85 = 64;
        }
        if (v85 <= v32) {
          uint64_t v85 = v32 + 1;
        }
        if (v85)
        {
          uint64_t v125 = v85;
          uint64_t v113 = v76;
          uint64_t v108 = v75;
          int v17 = malloc_type_realloc(v17, 4 * v85, 0x3A09BCB0uLL);
          uint64_t v75 = v108;
          uint64_t v22 = a2 & 0xFFFFFFE0;
          uint64_t v76 = v113;
          int v18 = a2;
          int v31 = v123;
          uint64_t v16 = v125;
          float32x4_t v27 = v130;
          int8x16_t v25 = 0uLL;
          uint64_t v21 = a2;
          int v20 = v112;
          int v19 = a2 & 0xF;
          uint64_t v15 = v131;
          size_t v24 = a1;
          uint64_t v23 = v122;
          int v14 = a6;
LABEL_70:
          v17[v32++] = v77;
          int v78 = *(_DWORD *)((char *)v23 + (v76 | 8));
          if (v78 == v33) {
            goto LABEL_45;
          }
          goto LABEL_71;
        }
        uint64_t v16 = 0;
        v17[v32++] = v77;
        int v78 = *(_DWORD *)((char *)v23 + (v76 | 8));
        if (v78 == v33)
        {
LABEL_45:
          int v79 = *(_DWORD *)((char *)v23 + (v76 | 0xC));
          if (v79 == v33) {
            goto LABEL_46;
          }
          goto LABEL_80;
        }
LABEL_71:
        if (v78 < 0) {
          goto LABEL_122;
        }
        if (v32 < v16) {
          goto LABEL_79;
        }
        uint64_t v86 = 2 * v16;
        if (!v16) {
          uint64_t v86 = 64;
        }
        if (v86 <= v32) {
          uint64_t v86 = v32 + 1;
        }
        if (v86)
        {
          uint64_t v126 = v86;
          uint64_t v114 = v76;
          uint64_t v109 = v75;
          int v17 = malloc_type_realloc(v17, 4 * v86, 0x3A09BCB0uLL);
          uint64_t v75 = v109;
          uint64_t v22 = a2 & 0xFFFFFFE0;
          uint64_t v76 = v114;
          int v18 = a2;
          int v31 = v123;
          uint64_t v16 = v126;
          float32x4_t v27 = v130;
          int8x16_t v25 = 0uLL;
          uint64_t v21 = a2;
          int v20 = v112;
          int v19 = a2 & 0xF;
          uint64_t v15 = v131;
          size_t v24 = a1;
          uint64_t v23 = v122;
          int v14 = a6;
LABEL_79:
          v17[v32++] = v78;
          int v79 = *(_DWORD *)((char *)v23 + (v76 | 0xC));
          if (v79 == v33) {
            goto LABEL_46;
          }
          goto LABEL_80;
        }
        uint64_t v16 = 0;
        v17[v32++] = v78;
        int v79 = *(_DWORD *)((char *)v23 + (v76 | 0xC));
        if (v79 == v33)
        {
LABEL_46:
          int v80 = *(_DWORD *)((char *)v23 + (v76 | 0x10));
          if (v80 == v33) {
            goto LABEL_47;
          }
          goto LABEL_89;
        }
LABEL_80:
        if (v79 < 0) {
          goto LABEL_122;
        }
        if (v32 < v16) {
          goto LABEL_88;
        }
        uint64_t v87 = 2 * v16;
        if (!v16) {
          uint64_t v87 = 64;
        }
        if (v87 <= v32) {
          uint64_t v87 = v32 + 1;
        }
        if (v87)
        {
          uint64_t v127 = v87;
          uint64_t v115 = v76;
          uint64_t v110 = v75;
          int v17 = malloc_type_realloc(v17, 4 * v87, 0x3A09BCB0uLL);
          uint64_t v75 = v110;
          uint64_t v22 = a2 & 0xFFFFFFE0;
          uint64_t v76 = v115;
          int v18 = a2;
          int v31 = v123;
          uint64_t v16 = v127;
          float32x4_t v27 = v130;
          int8x16_t v25 = 0uLL;
          uint64_t v21 = a2;
          int v20 = v112;
          int v19 = a2 & 0xF;
          uint64_t v15 = v131;
          size_t v24 = a1;
          uint64_t v23 = v122;
          int v14 = a6;
LABEL_88:
          v17[v32++] = v79;
          int v80 = *(_DWORD *)((char *)v23 + (v76 | 0x10));
          if (v80 == v33) {
            goto LABEL_47;
          }
          goto LABEL_89;
        }
        uint64_t v16 = 0;
        v17[v32++] = v79;
        int v80 = *(_DWORD *)((char *)v23 + (v76 | 0x10));
        if (v80 == v33)
        {
LABEL_47:
          int v81 = *(_DWORD *)((char *)v23 + ((4 * v75) | 0x14));
          if (v81 == v33) {
            goto LABEL_48;
          }
          goto LABEL_105;
        }
LABEL_89:
        if (v80 < 0) {
          goto LABEL_122;
        }
        if (v32 >= v16)
        {
          uint64_t v88 = 2 * v16;
          if (!v16) {
            uint64_t v88 = 64;
          }
          if (v88 <= v32) {
            uint64_t v88 = v32 + 1;
          }
          if (v88)
          {
            uint64_t v128 = v88;
            uint64_t v116 = v76;
            uint64_t v111 = v75;
            int v17 = malloc_type_realloc(v17, 4 * v88, 0x3A09BCB0uLL);
            uint64_t v75 = v111;
            uint64_t v22 = a2 & 0xFFFFFFE0;
            uint64_t v76 = v116;
            int v18 = a2;
            int v31 = v123;
            uint64_t v16 = v128;
            float32x4_t v27 = v130;
            int8x16_t v25 = 0uLL;
            uint64_t v21 = a2;
            int v20 = v112;
            int v19 = a2 & 0xF;
            uint64_t v15 = v131;
            size_t v24 = a1;
            uint64_t v23 = v122;
            int v14 = a6;
          }
          else
          {
            uint64_t v16 = 0;
          }
        }
        v17[v32++] = v80;
        int v81 = *(_DWORD *)((char *)v23 + ((4 * v75) | 0x14));
        if (v81 == v33)
        {
LABEL_48:
          int v82 = *(_DWORD *)((char *)v23 + (v76 | 0x18));
          if (v82 != v33) {
            goto LABEL_114;
          }
          goto LABEL_49;
        }
LABEL_105:
        if (v81 < 0) {
          goto LABEL_122;
        }
        if (v32 < v16) {
          goto LABEL_113;
        }
        uint64_t v89 = 2 * v16;
        if (!v16) {
          uint64_t v89 = 64;
        }
        if (v89 <= v32) {
          uint64_t v89 = v32 + 1;
        }
        if (v89)
        {
          uint64_t v129 = v89;
          uint64_t v117 = v76;
          int v17 = malloc_type_realloc(v17, 4 * v89, 0x3A09BCB0uLL);
          uint64_t v76 = v117;
          int v18 = a2;
          int v31 = v123;
          uint64_t v16 = v129;
          float32x4_t v27 = v130;
          int8x16_t v25 = 0uLL;
          uint64_t v22 = a2 & 0xFFFFFFE0;
          uint64_t v21 = a2;
          int v20 = v112;
          int v19 = a2 & 0xF;
          uint64_t v15 = v131;
          size_t v24 = a1;
          uint64_t v23 = v122;
          int v14 = a6;
LABEL_113:
          v17[v32++] = v81;
          int v82 = *(_DWORD *)((char *)v23 + (v76 | 0x18));
          if (v82 != v33) {
            goto LABEL_114;
          }
          goto LABEL_49;
        }
        uint64_t v16 = 0;
        v17[v32++] = v81;
        int v82 = *(_DWORD *)((char *)v23 + (v76 | 0x18));
        if (v82 != v33)
        {
LABEL_114:
          if ((v82 & 0x80000000) == 0)
          {
            if (v32 >= v16)
            {
              uint64_t v90 = 2 * v16;
              if (!v16) {
                uint64_t v90 = 64;
              }
              if (v90 <= v32) {
                uint64_t v90 = v32 + 1;
              }
              if (v90)
              {
                uint64_t v91 = v90;
                uint64_t v118 = v76;
                int v17 = malloc_type_realloc(v17, 4 * v90, 0x3A09BCB0uLL);
                uint64_t v76 = v118;
                int v18 = a2;
                int v31 = v123;
                uint64_t v16 = v91;
                float32x4_t v27 = v130;
                uint64_t v15 = v131;
                int8x16_t v25 = 0uLL;
                uint64_t v22 = a2 & 0xFFFFFFE0;
                uint64_t v21 = a2;
                int v20 = v112;
                int v19 = a2 & 0xF;
                size_t v24 = a1;
                uint64_t v23 = v122;
                int v14 = a6;
              }
              else
              {
                uint64_t v16 = 0;
              }
            }
            v17[v32++] = v82;
            int v83 = *(_DWORD *)((char *)v23 + (v76 | 0x1C));
            uint64_t v11 = v132;
            if (v83 == v35) {
              goto LABEL_19;
            }
LABEL_127:
            if ((v83 & 0x80000000) == 0)
            {
              if (v32 >= v16)
              {
                uint64_t v92 = 2 * v16;
                if (!v16) {
                  uint64_t v92 = 64;
                }
                if (v92 <= v32) {
                  uint64_t v92 = v32 + 1;
                }
                if (v92)
                {
                  uint64_t v93 = v92;
                  int v17 = malloc_type_realloc(v17, 4 * v92, 0x3A09BCB0uLL);
                  int v31 = v123;
                  uint64_t v16 = v93;
                  float32x4_t v27 = v130;
                  uint64_t v15 = v131;
                  int8x16_t v25 = 0uLL;
                  uint64_t v22 = a2 & 0xFFFFFFE0;
                  uint64_t v21 = a2;
                  int v20 = v112;
                  int v19 = a2 & 0xF;
                  size_t v24 = a1;
                  uint64_t v23 = v122;
                  int v18 = a2;
                  int v14 = a6;
                }
                else
                {
                  uint64_t v16 = 0;
                }
              }
              v17[v32++] = v83;
            }
            goto LABEL_19;
          }
LABEL_122:
          uint64_t v11 = v132;
          goto LABEL_19;
        }
LABEL_49:
        int v83 = *(_DWORD *)((char *)v23 + (v76 | 0x1C));
        uint64_t v11 = v132;
        if (v83 != v35) {
          goto LABEL_127;
        }
LABEL_19:
        if (!v32 || v30 >= v14) {
          goto LABEL_6;
        }
      }
    }
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    int v17 = 0;
    do
    {
      if (a4[v103] < 0)
      {
        if (v104 <= 0)
        {
          int v17 = malloc_type_realloc(v17, 0x100uLL, 0xAEE287F0uLL);
          uint64_t v104 = 64;
        }
        *int v17 = v103;
      }
      ++v103;
    }
    while (v11 != v103);
  }
LABEL_138:
  free(v17);
  float v94 = malloc_type_malloc(4 * v106, 0x100004052888210uLL);
  if (v106 < 1)
  {
    uint64_t v96 = 0;
    float v100 = v105;
  }
  else
  {
    uint64_t v95 = 0;
    LODWORD(v96) = 0;
    do
    {
      uint64_t v97 = a4[v95];
      BOOL v98 = v95 == v97;
      if (v95 == v97) {
        int v99 = v96;
      }
      else {
        int v99 = -1;
      }
      if (v98) {
        uint64_t v96 = (v96 + 1);
      }
      else {
        uint64_t v96 = v96;
      }
      v94[v95++] = v99;
    }
    while (v11 != v95);
    float v100 = v105;
    do
    {
      *a4 = v94[*a4];
      ++a4;
      --v11;
    }
    while (v11);
  }
  free(v94);
  printf("Verbose : ");
  printf("Clustered descriptors: %d => %d (%.1f%%)\n", v106, v96, (double)(int)v96 * 100.0 / (double)v106);
  putchar(10);
  if (v100)
  {
    if (v100[64] >= 1)
    {
      uint64_t v101 = 0;
      do
      {
        sss_node_free(*(void *)&v100[2 * v101]);
        free(*(void **)(*(void *)&v100[2 * v101] + 32));
        free(*(void **)(*(void *)&v100[2 * v101] + 40));
        free(*(void **)&v100[2 * v101++]);
      }
      while (v101 < v100[64]);
    }
    free(v100);
  }
  free(v122);
  return v96;
}

void vl_desc_cluster_centroids(uint8x16_t *a1, int a2, int a3, char *a4, int *a5, int a6)
{
  LODWORD(v6) = a6;
  uint64_t v12 = malloc_type_calloc(a3, 4uLL, 0x100004052888210uLL);
  uint64_t v13 = (char *)malloc_type_calloc((int)v6 * a2, 4uLL, 0x100004052888210uLL);
  if (a3 >= 1)
  {
    if (a2 > 0)
    {
      uint64_t v14 = 0;
      uint64_t v15 = a2 & 0xFFFFFFF8;
      uint64_t v16 = a1;
      while (1)
      {
        uint64_t v17 = a5[v14];
        ++v12[v17];
        int v18 = v17 * a2;
        unint64_t v19 = (unint64_t)&v13[4 * (int)v17 * a2];
        if (a2 >= 8)
        {
          if (v19 >= (unint64_t)a1->u64 + a2 + v14 * a2
            || &a1->i8[v14 * a2] >= &v13[4 * a2 + 4 * v18])
          {
            if (a2 < 0x10)
            {
              uint64_t v22 = 0;
LABEL_18:
              uint64_t v33 = (uint32x4_t *)&v13[4 * v22 + 4 * v18];
              do
              {
                uint16x8_t v34 = vmovl_u8(*(uint8x8_t *)&v16->i8[v22]);
                uint32x4_t v35 = vaddw_u16(*v33, *(uint16x4_t *)v34.i8);
                uint32x4_t v36 = vaddw_high_u16(v33[1], v34);
                *uint64_t v33 = v35;
                v33[1] = v36;
                v33 += 2;
                v22 += 8;
              }
              while (v15 != v22);
              uint64_t v20 = a2 & 0xFFFFFFF8;
              if (v15 == a2) {
                goto LABEL_4;
              }
              goto LABEL_21;
            }
            uint64_t v23 = a2 & 0xFFFFFFF0;
            size_t v24 = (uint32x4_t *)&v13[4 * v18];
            int8x16_t v25 = v16;
            do
            {
              uint8x16_t v26 = *v25++;
              uint16x8_t v27 = vmovl_high_u8(v26);
              uint16x8_t v28 = vmovl_u8(*(uint8x8_t *)v26.i8);
              uint32x4_t v29 = vaddw_u16(*v24, *(uint16x4_t *)v28.i8);
              uint32x4_t v30 = vaddw_high_u16(v24[1], v28);
              uint32x4_t v31 = vaddw_u16(v24[2], *(uint16x4_t *)v27.i8);
              uint32x4_t v32 = vaddw_high_u16(v24[3], v27);
              v24[2] = v31;
              v24[3] = v32;
              *size_t v24 = v29;
              v24[1] = v30;
              v24 += 4;
              v23 -= 16;
            }
            while (v23);
            if ((a2 & 0xFFFFFFF0) == (unint64_t)a2) {
              goto LABEL_4;
            }
            uint64_t v22 = a2 & 0xFFFFFFF0;
            uint64_t v20 = v22;
            if ((a2 & 8) != 0) {
              goto LABEL_18;
            }
          }
          else
          {
            uint64_t v20 = 0;
          }
        }
        else
        {
          uint64_t v20 = 0;
        }
        do
        {
LABEL_21:
          *(_DWORD *)(v19 + 4 * v20) += v16->u8[v20];
          ++v20;
        }
        while (a2 != v20);
LABEL_4:
        ++v14;
        uint64_t v16 = (uint8x16_t *)((char *)v16 + a2);
        if (v14 == a3) {
          goto LABEL_25;
        }
      }
    }
    uint64_t v37 = a3;
    do
    {
      uint64_t v38 = *a5++;
      ++v12[v38];
      --v37;
    }
    while (v37);
  }
LABEL_25:
  if ((int)v6 >= 1)
  {
    size_t v39 = a2;
    uint64_t v6 = v6;
    if (a2 <= 0)
    {
      uint64_t v50 = v12;
      do
      {
        if (!*v50++) {
          bzero(a4, v39);
        }
        a4 += v39;
        --v6;
      }
      while (v6);
    }
    else
    {
      uint64_t v40 = 0;
      int8x16_t v41 = (int *)v13;
      int8x16_t v42 = a4;
      do
      {
        if (v12[v40])
        {
          int16x8_t v43 = v41;
          int16x8_t v44 = v42;
          uint64_t v45 = a2;
          do
          {
            int v47 = *v43++;
            int v46 = v47;
            int v48 = v12[v40];
            if (v48 >= 0) {
              int v49 = v12[v40];
            }
            else {
              int v49 = v48 + 1;
            }
            *v44++ = (v46 + (v49 >> 1)) / v48;
            --v45;
          }
          while (v45);
        }
        else
        {
          bzero(&a4[v40 * a2], a2);
        }
        ++v40;
        v42 += a2;
        v41 += a2;
      }
      while (v40 != v6);
    }
  }
  free(v12);
  free(v13);
}

uint64_t vl_img_get_gv(uint64_t a1, int a2, float *a3)
{
  int v5 = *(_DWORD *)(a1 + 164);
  float v26 = *(float *)(a1 + 112);
  float v6 = -v26;
  float v24 = *(float *)(a1 + 108);
  float v25 = *(float *)(a1 + 104);
  float v7 = -v24;
  float v8 = -v25;
  _Q1 = *(_OWORD *)(a1 + 132);
  long long v27 = *(_OWORD *)(a1 + 116);
  long long v28 = _Q1;
  long long v29 = *(_OWORD *)(a1 + 148);
  v36[0] = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  v36[1] = _Q1;
  HIDWORD(v37) = 1065353216;
  long long v35 = 0u;
  memset(v34, 0, sizeof(v34));
  DWORD1(v34[0]) = 1065353216;
  HIDWORD(v34[0]) = 1065353216;
  LODWORD(v35) = -1082130432;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  memset(v30, 0, sizeof(v30));
  g_coordsf_conv((float *)&v27, (float *)v36, (float *)v30);
  g_coordsf_conv((float *)v34, (float *)v30, (float *)&v31);
  float v13 = *((float *)&v31 + 2);
  *(void *)&long long v27 = __PAIR64__(HIDWORD(v31), v31);
  *((void *)&v27 + 1) = __PAIR64__(DWORD1(v31), DWORD2(v32));
  float v14 = *(float *)&v33;
  float v15 = *((float *)&v32 + 1);
  *(void *)&long long v28 = __PAIR64__(HIDWORD(v32), v32);
  *((void *)&v28 + 1) = __PAIR64__(DWORD1(v32), DWORD2(v31));
  LODWORD(v29) = v33;
  *((float *)&v29 + 1) = -(float)((float)((float)((float)(*(float *)&v31 * *((float *)&v33 + 1)) + 0.0)
                                        + (float)(*((float *)&v31 + 3) * *((float *)&v33 + 2)))
                                + (float)(*((float *)&v32 + 2) * *((float *)&v33 + 3)));
  *((float *)&v29 + 2) = -(float)((float)((float)((float)(*((float *)&v31 + 1) * *((float *)&v33 + 1)) + 0.0)
                                        + (float)(*(float *)&v32 * *((float *)&v33 + 2)))
                                + (float)(*((float *)&v32 + 3) * *((float *)&v33 + 3)));
  *((float *)&v29 + 3) = -(float)((float)((float)((float)(*((float *)&v31 + 2) * *((float *)&v33 + 1)) + 0.0)
                                        + (float)(*((float *)&v32 + 1) * *((float *)&v33 + 2)))
                                + (float)(*(float *)&v33 * *((float *)&v33 + 3)));
  float v16 = (float)((float)(*((float *)&v32 + 1) * *((float *)&v32 + 1))
              + (float)(*((float *)&v31 + 2) * *((float *)&v31 + 2)))
      + (float)(*(float *)&v29 * *(float *)&v29);
  float v17 = sqrtf(v16);
  if (v17 != 0.0 && v5 == 0)
  {
    float v19 = acos((float)((float)((float)((float)(*((float *)&v32 + 1) * v7) + (float)(v6 * *((float *)&v31 + 2)))
                             + (float)(v8 * *(float *)&v33))
                     / (float)(sqrtf((float)((float)((float)(v24 * v24) + (float)(v26 * v26)) + (float)(v25 * v25)) * v16)
                             + 1.0e-20)));
    double v20 = v19;
    if (v19 > 0.034906585)
    {
      printf("%sWarning : ", (const char *)&unk_21BB738AE);
      printf("%sWarning%s core-motion and VIO gravity does not agree, diff %.1f deg", (const char *)&unk_21BB738AE, (const char *)&unk_21BB738AE, v20 * 180.0 / 3.14159265);
      putchar(10);
      printf("%sWarning : ", (const char *)&unk_21BB738AE);
      printf("%s(%.3f %.3f %.3f) vs (%.3f %.3f %.3f)%s", (const char *)&unk_21BB738AE, v6, v7, v8, v13, v15, v14, (const char *)&unk_21BB738AE);
      putchar(10);
    }
  }
  if (a2 != 1 || v5)
  {
    BOOL v22 = a2 == 1 && v5 != 0;
    if (a2 && !v22)
    {
      printf("%sError : ", (const char *)&unk_21BB738AE);
      printf("Unknown gv source type: %d");
      goto LABEL_23;
    }
    *a3 = v6;
    a3[1] = v7;
    a3[2] = v8;
    if (fabsf(sqrtf((float)((float)(v24 * v24) + (float)(v26 * v26)) + (float)(v25 * v25)) + -1.0) > 0.05)
    {
      printf("%sError : ", (const char *)&unk_21BB738AE);
      printf("Core motion gravity not ok (%f, %f, %f)");
      goto LABEL_23;
    }
  }
  else
  {
    *a3 = v13;
    a3[1] = v15;
    a3[2] = v14;
    if (fabsf(v17 + -1.0) > 0.05)
    {
      printf("%sError : ", (const char *)&unk_21BB738AE);
      printf("VIO gravity not ok (%f, %f, %f)");
LABEL_23:
      putchar(10);
      return 1;
    }
  }
  return 0;
}

uint64_t vl_img_init(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  if (!a4)
  {
    int v11 = *(_DWORD *)(a1 + 8);
    int v12 = *(_DWORD *)(a1 + 12);
    double v13 = (float)v11;
    double v14 = *(float *)a2;
    long double v15 = atan(v13 / (v14 + v14));
    double v16 = v15 + v15;
    double v17 = (float)v12;
    double v18 = *(float *)(a2 + 16);
    long double v19 = atan(v17 / (v18 + v18));
    long double v20 = v19 + v19;
    double v21 = *(float *)(a2 + 36);
    double v56 = *(float *)(a2 + 40);
    double v22 = (*(float *)(a2 + 8) - (v13 + -1.0) * 0.5) / v14;
    double v23 = (*(float *)(a2 + 20) - (v17 + -1.0) * 0.5) / v18;
    *(_DWORD *)(a6 + 24) = 0;
    long double v24 = tan(v16 * 0.5);
    long double v25 = (double)v11 / (v24 + v24);
    long double v26 = tan(v20 * 0.5);
    *(long double *)(a6 + 32) = v25;
    *(long double *)(a6 + 40) = (double)v12 / (v26 + v26);
    *(double *)(a6 + 4_Block_object_dispose(&STACK[0x220], 8) = v16;
    *(long double *)(a6 + 56) = v20;
    *(double *)(a6 + 96) = v21;
    *(void *)(a6 + 104) = 0;
    *(double *)(a6 + 112) = v56;
    *(_OWORD *)(a6 + 120) = 0u;
    *(_OWORD *)(a6 + 136) = 0u;
    *(_OWORD *)(a6 + 152) = 0u;
    *(_OWORD *)(a6 + 16_Block_object_dispose(&STACK[0x220], 8) = 0u;
    *(void *)(a6 + 184) = 0;
    *(double *)(a6 + 64) = v22;
    *(double *)(a6 + 72) = v23;
    *(void *)(a6 + 80) = 0;
    *(void *)(a6 + 8_Block_object_dispose(&STACK[0x220], 8) = 0;
    *(_DWORD *)(a6 + 192) = v11;
    *(_DWORD *)(a6 + 196) = v12;
    if (v20 == 0.0) {
      *(void *)(a6 + 56) = 0;
    }
    if (v16 == 0.0) {
      *(void *)(a6 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
    }
  }
  *(_OWORD *)(a6 + 200) = *(_OWORD *)(a2 + 48);
  *(void *)(a6 + 216) = *(void *)(a2 + 64);
  float v27 = *(float *)(a3 + 408);
  if (v27 <= *(float *)(a2 + 72)) {
    float v27 = *(float *)(a2 + 72);
  }
  *(float *)(a6 + 224) = v27;
  float v28 = *(float *)(a3 + 332);
  if (v28 <= 0.0)
  {
    float v35 = v27 * *(float *)(a3 + 336);
  }
  else
  {
    long long v29 = (float *)&unk_21BB7B228;
    uint32x4_t v30 = (float *)&dword_21BB7B380;
    do
    {
      float v31 = *v30++;
      v29 += 100;
    }
    while (v31 < v27);
    float v32 = v28 * 100.0;
    int v33 = (int)(float)(v28 * 100.0);
    float v34 = 0.0;
    if (v32 >= 1.0) {
      float v34 = v29[v33 - 1];
    }
    float v35 = v34 + (float)((float)(v29[v33] - v34) * (float)(v32 - (float)v33));
  }
  *(float *)(a6 + 22_Block_object_dispose(&STACK[0x220], 8) = v35;
  float32x2_t v36 = *(float32x2_t *)(a2 + 96);
  BOOL v37 = v36.f32[0] < 0.0 || v36.f32[0] > 360.0;
  if (v37 || v36.f32[1] <= 0.0)
  {
    *(_DWORD *)(a6 + 244) = 0;
    *(_DWORD *)(a6 + 24_Block_object_dispose(&STACK[0x220], 8) = 0;
    *(_DWORD *)(a6 + 252) = 0;
    if (a5) {
      goto LABEL_22;
    }
  }
  else
  {
    float32x2_t v38 = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(v36), (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL)), (float64x2_t)vdupq_n_s64(0x4066800000000000uLL)));
    *(float32x2_t *)(a6 + 244) = v38;
    if (v38.f32[1] == 0.0)
    {
      *(_DWORD *)(a6 + 252) = 0;
      if (a5)
      {
LABEL_22:
        *(void *)(a6 + _Block_object_dispose(&STACK[0x220], 8) = *(void *)(a1 + 8);
        goto LABEL_23;
      }
    }
    else
    {
      float v53 = *(float *)(a3 + 340) * v38.f32[1];
      if (v53 > 3.11017673) {
        float v53 = 3.1102;
      }
      *(float *)(a6 + 252) = v53;
      if (a5) {
        goto LABEL_22;
      }
    }
  }
  if (*(_DWORD *)(a1 + 16))
  {
    printf("%sError : ", (const char *)&unk_21BB738AE);
    printf("Only support grey scale image");
LABEL_36:
    putchar(10);
    return 1;
  }
  int v54 = *(_DWORD *)(a1 + 8);
  if (!v54 || (int v55 = *(_DWORD *)(a1 + 12)) == 0)
  {
    printf("%sError : ", (const char *)&unk_21BB738AE);
    printf("Image size 0");
    goto LABEL_36;
  }
  *(void *)a6 = *(void *)a1;
  *(_DWORD *)(a6 + _Block_object_dispose(&STACK[0x220], 8) = v54;
  *(_DWORD *)(a6 + 12) = v55;
  *(void *)(a6 + 16) = v54;
LABEL_23:
  *(_DWORD *)(a6 + 292) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a6 + 296) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a6 + 300) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a6 + 256) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a6 + 26_Block_object_dispose(&STACK[0x220], 8) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a6 + 280) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a6 + 260) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a6 + 272) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a6 + 284) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a6 + 264) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a6 + 276) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a6 + 28_Block_object_dispose(&STACK[0x220], 8) = *(_DWORD *)(a2 + 148);
  v63[0] = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  v63[1] = _D1;
  HIDWORD(v64) = 1065353216;
  long long v62 = 0u;
  long long v60 = 0u;
  memset(v61, 0, sizeof(v61));
  DWORD1(v61[0]) = 1065353216;
  HIDWORD(v61[0]) = 1065353216;
  LODWORD(v62) = -1082130432;
  long long v58 = 0u;
  long long v59 = 0u;
  memset(v57, 0, sizeof(v57));
  g_coordsf_conv((float *)(a6 + 256), (float *)v63, (float *)v57);
  g_coordsf_conv((float *)v61, (float *)v57, (float *)&v58);
  uint64_t v44 = v58;
  *(_DWORD *)(a6 + 256) = v58;
  uint64_t v45 = *((void *)&v58 + 1);
  *(_DWORD *)(a6 + 260) = HIDWORD(v58);
  *(_DWORD *)(a6 + 26_Block_object_dispose(&STACK[0x220], 8) = HIDWORD(v44);
  uint64_t v46 = *((void *)&v59 + 1);
  *(_DWORD *)(a6 + 264) = DWORD2(v59);
  *(_DWORD *)(a6 + 280) = v45;
  long long v47 = v60;
  float v48 = (float)((float)(*(float *)&v44 * *((float *)&v60 + 1)) + 0.0)
      + (float)(*((float *)&v45 + 1) * *((float *)&v60 + 2));
  uint64_t v49 = v59;
  *(_DWORD *)(a6 + 272) = v59;
  *(_DWORD *)(a6 + 276) = HIDWORD(v46);
  *(_DWORD *)(a6 + 284) = HIDWORD(v49);
  *(_DWORD *)(a6 + 28_Block_object_dispose(&STACK[0x220], 8) = v47;
  *(float *)(a6 + 292) = -(float)(v48 + (float)(*(float *)&v46 * *((float *)&v47 + 3)));
  *(float *)(a6 + 296) = -(float)((float)((float)((float)(*((float *)&v44 + 1) * *((float *)&v47 + 1)) + 0.0)
                                        + (float)(*(float *)&v49 * *((float *)&v47 + 2)))
                                + (float)(*((float *)&v46 + 1) * *((float *)&v47 + 3)));
  *(float *)(a6 + 300) = -(float)((float)((float)((float)(*(float *)&v45 * *((float *)&v47 + 1)) + 0.0)
                                        + (float)(*((float *)&v49 + 1) * *((float *)&v47 + 2)))
                                + (float)(*(float *)&v47 * *((float *)&v47 + 3)));
  uint64_t result = vl_img_get_gv(a2, *(_DWORD *)(a3 + 324), (float *)(a6 + 232));
  if (!result)
  {
    *(_OWORD *)(a6 + 376) = *(_OWORD *)(a6 + 200);
    float64x2_t v51 = vcvtq_f64_f32(*(float32x2_t *)(a6 + 264));
    *(float64x2_t *)(a6 + 304) = vcvtq_f64_f32(*(float32x2_t *)(a6 + 256));
    *(float64x2_t *)(a6 + 320) = v51;
    float64x2_t v52 = vcvtq_f64_f32(*(float32x2_t *)(a6 + 280));
    *(float64x2_t *)(a6 + 336) = vcvtq_f64_f32(*(float32x2_t *)(a6 + 272));
    *(float64x2_t *)(a6 + 352) = v52;
    *(double *)(a6 + 36_Block_object_dispose(&STACK[0x220], 8) = *(float *)(a6 + 288);
    *(void *)(a6 + 392) = *(void *)(a6 + 216);
    return result;
  }
  return 1;
}

uint64_t vl_printf(char *__format, ...)
{
  va_start(va, __format);
  uint64_t result = vsnprintf((char *)(qword_26AC37618 + _MergedGlobals_4), 100000 - _MergedGlobals_4, __format, va);
  _MergedGlobals_4 += result;
  return result;
}

void vl_t_print(uint64_t a1, uint64_t a2, const char *a3)
{
  qword_26AC37618 = (uint64_t)malloc_type_malloc(0x186A0uLL, 0x2EAA327BuLL);
  vl_printf("%s", "struct vl_t");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "  ", "vl_par_t", "par");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "    ", "vl_par_kpt_t", "kpt");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %u\n", "      ", "vl_kpts_detect_method_t", "detect_method", *(_DWORD *)a1);
  vl_printf("%s%s %s = %u\n", "      ", "vl_kpts_desc_method_t", "desc_method", *(_DWORD *)(a1 + 4));
  vl_printf("%s%s %s =", "      ", "vl_par_kpt_ocv_sift_t", "par_sift");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_octaves", *(_DWORD *)(a1 + 8));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_octaves_layers", *(_DWORD *)(a1 + 12));
  vl_printf("%s%s %s = %d\n", "        ", "int", "upscale", *(_DWORD *)(a1 + 16));
  vl_printf("%s%s %s = %f\n", "        ", "float", "contrast_threshold", *(float *)(a1 + 20));
  vl_printf("%s%s %s = %f\n", "        ", "float", "edge_threshold", *(float *)(a1 + 24));
  vl_printf("%s%s %s = %f\n", "        ", "float", "sigma", *(float *)(a1 + 28));
  vl_printf("%s%s %s = %d\n", "        ", "int", "max_n_kpts", *(_DWORD *)(a1 + 32));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_dog_par_t", "par_dog");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "        ", "float", "sigma", *(float *)(a1 + 36));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_octave_layers", *(_DWORD *)(a1 + 40));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_octaves", *(_DWORD *)(a1 + 44));
  vl_printf("%s%s %s = %d\n", "        ", "int", "upscale", *(_DWORD *)(a1 + 48));
  vl_printf("%s%s %s = %f\n", "        ", "float", "contrast_threshold", *(float *)(a1 + 52));
  vl_printf("%s%s %s = %d\n", "        ", "int", "edge_threshold", *(_DWORD *)(a1 + 56));
  vl_printf("%s%s %s = %f\n", "        ", "float", "radius_init", *(float *)(a1 + 60));
  vl_printf("%s%s %s = %d\n", "        ", "int", "image_boundary", *(_DWORD *)(a1 + 64));
  vl_printf("%s%s %s = %f\n", "        ", "float", "orientation_radius", *(float *)(a1 + 68));
  vl_printf("%s%s %s = %f\n", "        ", "float", "orientation_weight", *(float *)(a1 + 72));
  vl_printf("%s%s %s = %d\n", "        ", "int", "orientation_nbins", *(_DWORD *)(a1 + 76));
  vl_printf("%s%s %s = %f\n", "        ", "float", "orientation_threshold", *(float *)(a1 + 80));
  vl_printf("%s%s %s = %d\n", "        ", "int", "max_kpts_octave", *(_DWORD *)(a1 + 84));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_par_kpt_lbl_t", "lbl_par");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "lbl_version", *(_DWORD *)(a1 + 88));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_kpts", *(_DWORD *)(a1 + 92));
  vl_printf("%s%s %s = %d\n", "        ", "int", "nms_radius", *(_DWORD *)(a1 + 96));
  vl_printf("%s%s %s = %f\n", "        ", "float", "det_thr", *(float *)(a1 + 100));
  vl_printf("%s%s %s = %d\n", "        ", "int", "scaled_width", *(_DWORD *)(a1 + 104));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %f\n", "      ", "float", "lbl_filter_dist", *(float *)(a1 + 108));
  vl_printf("%s%s %s = %f\n", "      ", "float", "lbl_filter_ddist", *(float *)(a1 + 112));
  vl_printf("%s%s %s = %d\n", "      ", "int", "run_simplified", *(_DWORD *)(a1 + 116));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_map_t", "map");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "      ", "float", "rebuild_dist_thr", *(float *)(a1 + 120));
  vl_printf("%s%s %s = %f\n", "      ", "float", "validate_dist_thr", *(float *)(a1 + 124));
  vl_printf("%s%s %s = %d\n", "      ", "int", "load_ddir", *(_DWORD *)(a1 + 128));
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "quantize");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "flg", *(_DWORD *)(a1 + 132));
  vl_printf("%s%s %s = %f\n", "        ", "float", "mn", *(float *)(a1 + 136));
  vl_printf("%s%s %s = %f\n", "        ", "float", "mx", *(float *)(a1 + 140));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %d\n", "      ", "int", "level", *(_DWORD *)(a1 + 144));
  vl_printf("%s%s %s = %d\n", "      ", "int", "data_version", *(_DWORD *)(a1 + 148));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_match_t", "match");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %u\n", "      ", "vl_match_method_t", "method", *(_DWORD *)(a1 + 152));
  vl_printf("%s%s %s =", "      ", "vl_par_match_sss_t", "par_sss");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "ver", *(_DWORD *)(a1 + 156));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %f\n", "      ", "float", "post_filter_radius", *(float *)(a1 + 160));
  vl_printf("%s%s %s = %d\n", "      ", "int", "knn_prior", *(_DWORD *)(a1 + 164));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_retrieval_t", "retrieval");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "enabled", *(_DWORD *)(a1 + 168));
  vl_printf("%s%s %s = %d\n", "      ", "int", "topk", *(_DWORD *)(a1 + 172));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_pose_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %u\n", "      ", "vl_pose_method_t", "method", *(_DWORD *)(a1 + 176));
  vl_printf("%s%s %s =", "      ", "vl_par_pose_ransac_t", "ransac");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_iter", *(_DWORD *)(a1 + 180));
  vl_printf("%s%s %s = %f\n", "        ", "float", "reproj_th", *(float *)(a1 + 184));
  vl_printf("%s%s %s = %f\n", "        ", "float", "lowe_th", *(float *)(a1 + 188));
  vl_printf("%s%s %s = %f\n", "        ", "float", "lowe_lt_th", *(float *)(a1 + 192));
  vl_printf("%s%s %s = %d\n", "        ", "int", "min_inlier", *(_DWORD *)(a1 + 196));
  vl_printf("%s%s %s = %f\n", "        ", "float", "p_th", *(float *)(a1 + 200));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_sol_refine", *(_DWORD *)(a1 + 204));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_model", *(_DWORD *)(a1 + 208));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_model_brute", *(_DWORD *)(a1 + 212));
  vl_printf("%s%s %s = %d\n", "        ", "int", "step_brute", *(_DWORD *)(a1 + 216));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_test_sub", *(_DWORD *)(a1 + 220));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_test", *(_DWORD *)(a1 + 224));
  vl_printf("%s%s %s = %f\n", "        ", "float", "s_test_sub", *(float *)(a1 + 228));
  vl_printf("%s%s %s = %d\n", "        ", "int", "lowe_prio", *(_DWORD *)(a1 + 232));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_par_pose_score_t", "score");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "use_vote_prio", *(_DWORD *)(a1 + 236));
  vl_printf("%s%s %s = %f\n", "        ", "float", "split_comp", *(float *)(a1 + 240));
  vl_printf("%s%s %s = %f\n", "        ", "float", "refine_comp", *(float *)(a1 + 244));
  vl_printf("%s%s %s = %f\n", "        ", "float", "max_time_ms", *(float *)(a1 + 248));
  vl_printf("%s%s %s = %f\n", "        ", "float", "cell_size_xy", *(float *)(a1 + 252));
  vl_printf("%s%s %s = %f\n", "        ", "float", "cell_size_z", *(float *)(a1 + 256));
  vl_printf("%s%s %s = %f\n", "        ", "float", "lowe_th", *(float *)(a1 + 260));
  vl_printf("%s%s %s = %d\n", "        ", "int", "nn", *(_DWORD *)(a1 + 264));
  vl_printf("%s%s %s = %f\n", "        ", "float", "height_th", *(float *)(a1 + 268));
  vl_printf("%s%s %s = %f\n", "        ", "float", "size_th", *(float *)(a1 + 272));
  vl_printf("%s%s %s = %f\n", "        ", "float", "ori_th", *(float *)(a1 + 276));
  vl_printf("%s%s %s = %f\n", "        ", "float", "view_angle_th", *(float *)(a1 + 280));
  vl_printf("%s%s %s = %d\n", "        ", "int", "debug_print_level", *(_DWORD *)(a1 + 284));
  vl_printf("%s%s %s = %d\n", "        ", "int", "refine", *(_DWORD *)(a1 + 288));
  vl_printf("%s%s %s = %d\n", "        ", "int", "use_learned_confidence", *(_DWORD *)(a1 + 292));
  vl_printf("%s%s %s = %f\n", "        ", "float", "human_offset", *(float *)(a1 + 296));
  vl_printf("%s%s %s = %d\n", "        ", "int", "use_ori_prior", *(_DWORD *)(a1 + 300));
  vl_printf("%s%s %s = %d\n", "        ", "int", "multi_img", *(_DWORD *)(a1 + 304));
  vl_printf("%s%s %s = %f\n", "        ", "float", "ori_sigma_fac", *(float *)(a1 + 308));
  vl_printf("%s%s %s = %d\n", "        ", "int", "early_out_th", *(_DWORD *)(a1 + 312));
  vl_printf("%s%s %s = %d\n", "        ", "int", "max_hyps", *(_DWORD *)(a1 + 316));
  vl_printf("%s%s %s = *%p\n", "        ", "float[8]", "region_r", (const void *)(a1 + 320));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_regions", *(_DWORD *)(a1 + 352));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_split_steps", *(_DWORD *)(a1 + 356));
  vl_printf("%s%s %s = %d\n", "        ", "int", "cell_split_factor_xy", *(_DWORD *)(a1 + 360));
  vl_printf("%s%s %s = %d\n", "        ", "int", "cell_split_factor_z", *(_DWORD *)(a1 + 364));
  vl_printf("%s%s %s = %f\n", "        ", "float", "matches_lim", *(float *)(a1 + 368));
  vl_printf("%s%s %s = %f\n", "        ", "float", "grav_uncertainty", *(float *)(a1 + 372));
  vl_printf("%s%s %s = %f\n", "        ", "float", "grav_thr", *(float *)(a1 + 376));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_iter", *(_DWORD *)(a1 + 380));
  vl_printf("%s%s %s = %f\n", "        ", "float", "inlier_thr", *(float *)(a1 + 384));
  vl_printf("%s%s %s = %d\n", "        ", "int", "min_inliers", *(_DWORD *)(a1 + 388));
  vl_printf("%s%s %s = %d\n", "        ", "int", "use_pose_refine", *(_DWORD *)(a1 + 392));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_par_pose_g_ps_par_t", "g_ps");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_ps_par_t", "g_ps_par");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "float", "thr", *(float *)(a1 + 400));
  vl_printf("%s%s %s = %f\n", "          ", "float", "res_xy", *(float *)(a1 + 404));
  vl_printf("%s%s %s = %f\n", "          ", "float", "res_z", *(float *)(a1 + 408));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_lev_refine", *(_DWORD *)(a1 + 412));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_keep_refine", *(_DWORD *)(a1 + 416));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_min_refine", *(_DWORD *)(a1 + 420));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_ang", *(_DWORD *)(a1 + 424));
  vl_printf("%s%s %s = %f\n", "          ", "float", "unc_gv", *(float *)(a1 + 428));
  vl_printf("%s%s %s = %f\n", "          ", "float", "thr_gv", *(float *)(a1 + 432));
  vl_printf("%s%s %s = %f\n", "          ", "float", "min_score", *(float *)(a1 + 436));
  vl_printf("%s%s %s = %f\n", "          ", "float", "sat_score", *(float *)(a1 + 440));
  vl_printf("%s%s %s = %f\n", "          ", "float", "thr_sim_xyz_peak", *(float *)(a1 + 444));
  vl_printf("%s%s %s = %f\n", "          ", "float", "thr_sim_ang_peak", *(float *)(a1 + 448));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_peaks", *(_DWORD *)(a1 + 452));
  vl_printf("%s%s %s = %zu\n", "          ", "size_t", "mem_usage", *(void *)(a1 + 456));
  vl_printf("%s%s %s =", "          ", "g_pos3f_t", "gt");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "            ", "float", "x", *(float *)(a1 + 464));
  vl_printf("%s%s %s = %f\n", "            ", "float", "y", *(float *)(a1 + 468));
  vl_printf("%s%s %s = %f\n", "            ", "float", "z", *(float *)(a1 + 472));
  vl_printf("%s}\n", "          ");
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %f\n", "        ", "float", "mw_t_lowe", *(float *)(a1 + 480));
  vl_printf("%s%s %s = %f\n", "        ", "float", "mw_a", *(float *)(a1 + 484));
  vl_printf("%s%s %s = %f\n", "        ", "float", "mw_b", *(float *)(a1 + 488));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_par_pose_csl_t", "csl");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "save_data", *(_DWORD *)(a1 + 496));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %u\n", "      ", "vl_img_gv_source_t", "gv_src", *(_DWORD *)(a1 + 500));
  vl_printf("%s%s %s = %f\n", "      ", "float", "inlier_thr", *(float *)(a1 + 504));
  vl_printf("%s%s %s = %f\n", "      ", "float", "gps_bin_err_quantile", *(float *)(a1 + 508));
  vl_printf("%s%s %s = %f\n", "      ", "float", "gps_sigma_fac", *(float *)(a1 + 512));
  vl_printf("%s%s %s = %f\n", "      ", "float", "heading_sigma_fac", *(float *)(a1 + 516));
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "refine");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %u\n", "        ", "enum (unnamed)", "type", *(_DWORD *)(a1 + 520));
  vl_printf("%s%s %s = %f\n", "        ", "float", "sdev_im", *(float *)(a1 + 524));
  vl_printf("%s%s %s = %f\n", "        ", "float", "sdev_vio", *(float *)(a1 + 528));
  vl_printf("%s%s %s = %f\n", "        ", "float", "sdev_3dp", *(float *)(a1 + 532));
  vl_printf("%s%s %s = %f\n", "        ", "float", "sdev_inv_depth", *(float *)(a1 + 536));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_iter_lm", *(_DWORD *)(a1 + 540));
  vl_printf("%s%s %s = %f\n", "        ", "float", "irefine_ratio_thr", *(float *)(a1 + 544));
  vl_printf("%s%s %s = %d\n", "        ", "int", "irefine_n_iter", *(_DWORD *)(a1 + 548));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "fuse");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "enable", *(_DWORD *)(a1 + 552));
  vl_printf("%s%s %s = %d\n", "        ", "int", "max_im", *(_DWORD *)(a1 + 556));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "referee");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "enable", *(_DWORD *)(a1 + 560));
  vl_printf("%s%s %s = %d\n", "        ", "int", "version", *(_DWORD *)(a1 + 564));
  vl_printf("%s%s %s = %d\n", "        ", "int", "write_tfrecords", *(_DWORD *)(a1 + 568));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "locability");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "enable", *(_DWORD *)(a1 + 572));
  vl_printf("%s%s %s = %d\n", "        ", "int", "version", *(_DWORD *)(a1 + 576));
  vl_printf("%s%s %s = %d\n", "        ", "int", "write_tfrecords", *(_DWORD *)(a1 + 580));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %f\n", "      ", "float", "gps_min_uncertainty", *(float *)(a1 + 584));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_pose_verify_t", "post_verify");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "use_inlier_rejection", *(_DWORD *)(a1 + 592));
  vl_printf("%s%s %s = %d\n", "      ", "int", "use_height_rejection", *(_DWORD *)(a1 + 596));
  vl_printf("%s%s %s = %d\n", "      ", "int", "use_gravity_rejection", *(_DWORD *)(a1 + 600));
  vl_printf("%s%s %s = %d\n", "      ", "int", "use_gps_rejection", *(_DWORD *)(a1 + 604));
  vl_printf("%s%s %s = %d\n", "      ", "int", "use_heading_rejection", *(_DWORD *)(a1 + 608));
  vl_printf("%s%s %s = %d\n", "      ", "int", "inlier_thr", *(_DWORD *)(a1 + 612));
  vl_printf("%s%s %s = %f\n", "      ", "float", "max_height", *(float *)(a1 + 616));
  vl_printf("%s%s %s = %f\n", "      ", "float", "min_height", *(float *)(a1 + 620));
  vl_printf("%s%s %s = %f\n", "      ", "double", "gv_angle_thr", *(double *)(a1 + 624));
  vl_printf("%s%s %s = %f\n", "      ", "float", "gps_uncertainty_coeff", *(float *)(a1 + 632));
  vl_printf("%s%s %s = %f\n", "      ", "float", "heading_accuracy_coeff", *(float *)(a1 + 636));
  vl_printf("%s%s %s = %f\n", "      ", "float", "conf_threshold", *(float *)(a1 + 640));
  vl_printf("%s%s %s = %f\n", "      ", "float", "sdev_threshold", *(float *)(a1 + 644));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_tracker_t", "tracker");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "enable", *(_DWORD *)(a1 + 648));
  vl_printf("%s%s %s = %d\n", "      ", "int", "size", *(_DWORD *)(a1 + 652));
  vl_printf("%s%s %s = %d\n", "      ", "int", "force", *(_DWORD *)(a1 + 656));
  vl_printf("%s%s %s = %d\n", "      ", "int", "max_tracks", *(_DWORD *)(a1 + 660));
  vl_printf("%s%s %s = %d\n", "      ", "int", "bin_size", *(_DWORD *)(a1 + 664));
  vl_printf("%s%s %s =", "      ", "slam_tracker_vo_par_t", "vo_par");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_cam_max", *(_DWORD *)(a1 + 672));
  vl_printf("%s%s %s = %f\n", "        ", "double", "ortho_every_s", *(double *)(a1 + 680));
  vl_printf("%s%s %s = %d\n", "        ", "int", "desc_dim", *(_DWORD *)(a1 + 688));
  vl_printf("%s%s %s = %d\n", "        ", "int", "md_desc", *(_DWORD *)(a1 + 692));
  vl_printf("%s%s %s = %f\n", "        ", "float", "r0", *(float *)(a1 + 696));
  vl_printf("%s%s %s = %f\n", "        ", "float", "r1", *(float *)(a1 + 700));
  vl_printf("%s%s %s = %f\n", "        ", "float", "r0s", *(float *)(a1 + 704));
  vl_printf("%s%s %s = %f\n", "        ", "float", "md_im_search", *(float *)(a1 + 708));
  vl_printf("%s%s %s = %f\n", "        ", "float", "md_im_bundle", *(float *)(a1 + 712));
  vl_printf("%s%s %s = %f\n", "        ", "float", "lowe_cam", *(float *)(a1 + 716));
  vl_printf("%s%s %s = %f\n", "        ", "float", "lowe_map", *(float *)(a1 + 720));
  vl_printf("%s%s %s =", "        ", "struct (unnamed)", "spawn");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "          ", "int", "iter", *(_DWORD *)(a1 + 724));
  vl_printf("%s%s %s = %f\n", "          ", "float", "depth_eps", *(float *)(a1 + 728));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_pos6f_t", "velocity_max");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "float", "x", *(float *)(a1 + 732));
  vl_printf("%s%s %s = %f\n", "          ", "float", "y", *(float *)(a1 + 736));
  vl_printf("%s%s %s = %f\n", "          ", "float", "z", *(float *)(a1 + 740));
  vl_printf("%s%s %s = %f\n", "          ", "float", "yaw", *(float *)(a1 + 744));
  vl_printf("%s%s %s = %f\n", "          ", "float", "pitch", *(float *)(a1 + 748));
  vl_printf("%s%s %s = %f\n", "          ", "float", "roll", *(float *)(a1 + 752));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "struct (unnamed)", "subpix");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "          ", "int", "on", *(_DWORD *)(a1 + 756));
  vl_printf("%s%s %s = %d\n", "          ", "int", "patch_width", *(_DWORD *)(a1 + 760));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %d\n", "        ", "int", "always_use_vo_prediction", *(_DWORD *)(a1 + 764));
  vl_printf("%s%s %s = %d\n", "        ", "int", "predict_const_ang_velocity", *(_DWORD *)(a1 + 768));
  vl_printf("%s%s %s = %d\n", "        ", "int", "predict_prior_scale", *(_DWORD *)(a1 + 772));
  vl_printf("%s%s %s =", "        ", "g_pos6f_t", "predict_velocity_dampening");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "float", "x", *(float *)(a1 + 776));
  vl_printf("%s%s %s = %f\n", "          ", "float", "y", *(float *)(a1 + 780));
  vl_printf("%s%s %s = %f\n", "          ", "float", "z", *(float *)(a1 + 784));
  vl_printf("%s%s %s = %f\n", "          ", "float", "yaw", *(float *)(a1 + 788));
  vl_printf("%s%s %s = %f\n", "          ", "float", "pitch", *(float *)(a1 + 792));
  vl_printf("%s%s %s = %f\n", "          ", "float", "roll", *(float *)(a1 + 796));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "struct (unnamed)", "bundle");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "          ", "int", "big_iter", *(_DWORD *)(a1 + 800));
  vl_printf("%s%s %s = %u\n", "          ", "enum (unnamed)", "priors", *(_DWORD *)(a1 + 804));
  vl_printf("%s%s %s = %d\n", "          ", "int", "skip_prior_vo_pred", *(_DWORD *)(a1 + 808));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_cam_opt", *(_DWORD *)(a1 + 812));
  vl_printf("%s%s %s = %d\n", "          ", "int", "max_iter", *(_DWORD *)(a1 + 816));
  vl_printf("%s%s %s = %d\n", "          ", "int", "max_retries", *(_DWORD *)(a1 + 820));
  vl_printf("%s%s %s = %f\n", "          ", "float", "lm_damping", *(float *)(a1 + 824));
  vl_printf("%s%s %s = %f\n", "          ", "float", "thr_tracks", *(float *)(a1 + 828));
  vl_printf("%s%s %s = %f\n", "          ", "float", "sdev_uv", *(float *)(a1 + 832));
  vl_printf("%s%s %s = %f\n", "          ", "float", "sdev_abs_ang", *(float *)(a1 + 836));
  vl_printf("%s%s %s = %f\n", "          ", "float", "sdev_abs_xyz", *(float *)(a1 + 840));
  vl_printf("%s%s %s =", "          ", "g_pos6f_t", "sdev_rel");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "            ", "float", "x", *(float *)(a1 + 844));
  vl_printf("%s%s %s = %f\n", "            ", "float", "y", *(float *)(a1 + 848));
  vl_printf("%s%s %s = %f\n", "            ", "float", "z", *(float *)(a1 + 852));
  vl_printf("%s%s %s = %f\n", "            ", "float", "yaw", *(float *)(a1 + 856));
  vl_printf("%s%s %s = %f\n", "            ", "float", "pitch", *(float *)(a1 + 860));
  vl_printf("%s%s %s = %f\n", "            ", "float", "roll", *(float *)(a1 + 864));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "g_pos3f_t", "sdev_smacc");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "            ", "float", "x", *(float *)(a1 + 868));
  vl_printf("%s%s %s = %f\n", "            ", "float", "y", *(float *)(a1 + 872));
  vl_printf("%s%s %s = %f\n", "            ", "float", "z", *(float *)(a1 + 876));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "g_pos6f_t", "sdev_rel_stop");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "            ", "float", "x", *(float *)(a1 + 880));
  vl_printf("%s%s %s = %f\n", "            ", "float", "y", *(float *)(a1 + 884));
  vl_printf("%s%s %s = %f\n", "            ", "float", "z", *(float *)(a1 + 888));
  vl_printf("%s%s %s = %f\n", "            ", "float", "yaw", *(float *)(a1 + 892));
  vl_printf("%s%s %s = %f\n", "            ", "float", "pitch", *(float *)(a1 + 896));
  vl_printf("%s%s %s = %f\n", "            ", "float", "roll", *(float *)(a1 + 900));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s = %f\n", "          ", "float", "sdev_dist", *(float *)(a1 + 904));
  vl_printf("%s%s %s = %f\n", "          ", "float", "sdev_w0", *(float *)(a1 + 908));
  vl_printf("%s%s %s = %d\n", "          ", "int", "delta_t_rel", *(_DWORD *)(a1 + 912));
  vl_printf("%s%s %s = %d\n", "          ", "int", "min_started", *(_DWORD *)(a1 + 916));
  vl_printf("%s%s %s =", "          ", "g_pos3f_t", "sdev_fm");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "            ", "float", "x", *(float *)(a1 + 920));
  vl_printf("%s%s %s = %f\n", "            ", "float", "y", *(float *)(a1 + 924));
  vl_printf("%s%s %s = %f\n", "            ", "float", "z", *(float *)(a1 + 928));
  vl_printf("%s}\n", "          ");
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %d\n", "        ", "int", "min_tracks_length", *(_DWORD *)(a1 + 932));
  vl_printf("%s%s %s = %f\n", "        ", "float", "stind_thr", *(float *)(a1 + 936));
  vl_printf("%s%s %s = %f\n", "        ", "float", "stind_thr_low", *(float *)(a1 + 940));
  vl_printf("%s%s %s =", "        ", "g_vec4f_t", "stind_classifier");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "float", "x", *(float *)(a1 + 944));
  vl_printf("%s%s %s = %f\n", "          ", "float", "y", *(float *)(a1 + 948));
  vl_printf("%s%s %s = %f\n", "          ", "float", "z", *(float *)(a1 + 952));
  vl_printf("%s%s %s = %f\n", "          ", "float", "w", *(float *)(a1 + 956));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %f\n", "        ", "float", "fail_match_thr", *(float *)(a1 + 960));
  vl_printf("%s%s %s = %f\n", "        ", "float", "smap_sdev_mult", *(float *)(a1 + 964));
  vl_printf("%s%s %s = %d\n", "        ", "int", "relpose_idx", *(_DWORD *)(a1 + 968));
  vl_printf("%s%s %s = %d\n", "        ", "int", "benchmark", *(_DWORD *)(a1 + 972));
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_history_t", "history");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "enable", *(_DWORD *)(a1 + 976));
  vl_printf("%s%s %s = %d\n", "      ", "int", "max_frames", *(_DWORD *)(a1 + 980));
  vl_printf("%s%s %s = %d\n", "      ", "int", "sparsify_thr", *(_DWORD *)(a1 + 984));
  vl_printf("%s%s %s = %d\n", "      ", "int", "stats_max_frames", *(_DWORD *)(a1 + 988));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_expt_t", "expt");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "downsample", *(_DWORD *)(a1 + 992));
  vl_printf("%s%s %s = %d\n", "      ", "int", "upsample", *(_DWORD *)(a1 + 996));
  vl_printf("%s%s %s = %d\n", "      ", "int", "rescale_width", *(_DWORD *)(a1 + 1000));
  vl_printf("%s%s %s = %d\n", "      ", "int", "rescale_height", *(_DWORD *)(a1 + 1004));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s = %d\n", "  ", "int", "ver", *(_DWORD *)(a1 + 1008));
  vl_printf("%s%s %s = %p\n", "  ", "vl_map_t *", "map", *(const void **)(a1 + 1016));
  vl_printf("%s%s %s =", "  ", "vl_img_t", "img");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "    ", "p_image", "img");
  vl_printf(" {\n");
  vl_printf("%s%s %s = \"%.32s\"\n", "      ", "unsigned char *", "mem", *(const char **)(a1 + 1024));
  vl_printf("%s%s %s = %d\n", "      ", "int", "x_size", *(_DWORD *)(a1 + 1032));
  vl_printf("%s%s %s = %d\n", "      ", "int", "y_size", *(_DWORD *)(a1 + 1036));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "pitch", *(void *)(a1 + 1040));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "g_proj2_t", "proj");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "type", *(_DWORD *)(a1 + 1048));
  vl_printf("%s%s %s = %f\n", "      ", "double", "foc_s", *(double *)(a1 + 1056));
  vl_printf("%s%s %s = %f\n", "      ", "double", "foc_h", *(double *)(a1 + 1064));
  vl_printf("%s%s %s = %f\n", "      ", "double", "fov_s", *(double *)(a1 + 1072));
  vl_printf("%s%s %s = %f\n", "      ", "double", "fov_h", *(double *)(a1 + 1080));
  vl_printf("%s%s %s = %f\n", "      ", "double", "cx", *(double *)(a1 + 1088));
  vl_printf("%s%s %s = %f\n", "      ", "double", "cy", *(double *)(a1 + 1096));
  vl_printf("%s%s %s = %f\n", "      ", "double", "lx", *(double *)(a1 + 1104));
  vl_printf("%s%s %s = %f\n", "      ", "double", "ly", *(double *)(a1 + 1112));
  vl_printf("%s%s %s =", "      ", "g_lens_t", "lens");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_lens_k4_t", "k4");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "double", "k2", *(double *)(a1 + 1120));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k3", *(double *)(a1 + 1128));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k4", *(double *)(a1 + 1136));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_lens_kannala_t", "kannala");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "double", "k2", *(double *)(a1 + 1120));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k4", *(double *)(a1 + 1128));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k6", *(double *)(a1 + 1136));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k8", *(double *)(a1 + 1144));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_lens_opencv_t", "opencv");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "double", "k2", *(double *)(a1 + 1120));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k6", *(double *)(a1 + 1128));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k4", *(double *)(a1 + 1136));
  vl_printf("%s%s %s = %f\n", "          ", "double", "p1", *(double *)(a1 + 1144));
  vl_printf("%s%s %s = %f\n", "          ", "double", "p2", *(double *)(a1 + 1152));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_lens_bspline_t", "bsp");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[12]", "k", (const void *)(a1 + 1120));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_lens_lseg_t", "lseg");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[12]", "k", (const void *)(a1 + 1120));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_lens_k14_t", "k14");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[7]", "k", (const void *)(a1 + 1120));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %d\n", "      ", "int", "xs", *(_DWORD *)(a1 + 1216));
  vl_printf("%s%s %s = %d\n", "      ", "int", "ys", *(_DWORD *)(a1 + 1220));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "g_pos3_t", "pos_init");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "      ", "double", "x", *(double *)(a1 + 1224));
  vl_printf("%s%s %s = %f\n", "      ", "double", "y", *(double *)(a1 + 1232));
  vl_printf("%s%s %s = %f\n", "      ", "double", "z", *(double *)(a1 + 1240));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s = %f\n", "    ", "float", "gps_uncertainty", *(float *)(a1 + 1248));
  vl_printf("%s%s %s = %f\n", "    ", "float", "search_radius", *(float *)(a1 + 1252));
  vl_printf("%s%s %s =", "    ", "g_pos3f_t", "gv");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "      ", "float", "x", *(float *)(a1 + 1256));
  vl_printf("%s%s %s = %f\n", "      ", "float", "y", *(float *)(a1 + 1260));
  vl_printf("%s%s %s = %f\n", "      ", "float", "z", *(float *)(a1 + 1264));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s = %f\n", "    ", "float", "true_heading", *(float *)(a1 + 1268));
  vl_printf("%s%s %s = %f\n", "    ", "float", "heading_accuracy", *(float *)(a1 + 1272));
  vl_printf("%s%s %s = %f\n", "    ", "float", "search_angle", *(float *)(a1 + 1276));
  vl_printf("%s%s %s =", "    ", "g_coordsf_t", "vio_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "      ", "float[3][3]", "R", (const void *)(a1 + 1280));
  vl_printf("%s%s %s = *%p\n", "      ", "float[3]", "t", (const void *)(a1 + 1316));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "g_coords_t", "pose_init");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "      ", "double[3][3]", "R", (const void *)(a1 + 1328));
  vl_printf("%s%s %s = *%p\n", "      ", "double[3]", "t", (const void *)(a1 + 1400));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s = *%p\n", "  ", "char[512]", "uuid", (const void *)(a1 + 1424));
  vl_printf("%s%s %s =", "  ", "vl_kpt_list_t", "kpt_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "    ", "int64_t", "n_items", *(void *)(a1 + 1936));
  vl_printf("%s%s %s = %p\n", "    ", "vl_kpt_t *", "items", *(const void **)(a1 + 1944));
  vl_printf("%s%s %s = %lld\n", "    ", "int64_t", "n_items_max", *(void *)(a1 + 1952));
  vl_printf("%s%s %s =", "    ", "float_list_t", "global_desc");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 1960));
  vl_printf("%s%s %s = %p\n", "      ", "float *", "items", *(const void **)(a1 + 1968));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 1976));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "vl_kpt3_list_t", "kpt3_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "    ", "int64_t", "n_items", *(void *)(a1 + 1984));
  vl_printf("%s%s %s = %p\n", "    ", "vl_kpt3_t *", "items", *(const void **)(a1 + 1992));
  vl_printf("%s%s %s = %lld\n", "    ", "int64_t", "n_items_max", *(void *)(a1 + 2000));
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "vl_matches_t", "matches");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "    ", "int_nn_list_t", "desc_indices");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 2008));
  vl_printf("%s%s %s = %p\n", "      ", "int_nn_t *", "items", *(const void **)(a1 + 2016));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 2024));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "float_nn_list_t", "desc_dists");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 2032));
  vl_printf("%s%s %s = %p\n", "      ", "float_nn_t *", "items", *(const void **)(a1 + 2040));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 2048));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "vl_inliers_t", "inliers");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "    ", "g_pos2f_list_t", "pts2d");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 2056));
  vl_printf("%s%s %s = %p\n", "      ", "g_pos2f_t *", "items", *(const void **)(a1 + 2064));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 2072));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "g_pos3f_list_t", "pts3d");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 2080));
  vl_printf("%s%s %s = %p\n", "      ", "g_pos3f_t *", "items", *(const void **)(a1 + 2088));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 2096));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "int_pair_list_t", "inlier_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 2104));
  vl_printf("%s%s %s = %p\n", "      ", "int_pair_t *", "items", *(const void **)(a1 + 2112));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 2120));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s = %d\n", "    ", "int", "n_inliers_gt_pose", *(_DWORD *)(a1 + 2128));
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "vl_context_t", "context");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "    ", "vl_context_locability_t", "locability");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 2136));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 2184));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 2232));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 2256));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 2280));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 2284));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 2348));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = *%p\n", "      ", "char[512]", "framework_id", (const void *)(a1 + 2352));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_kpts_t", "kpts");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_total");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 2864));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 2912));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 2960));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 2984));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 3008));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 3012));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 3076));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_pyramid");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 3080));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 3128));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 3176));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 3200));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 3224));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 3228));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 3292));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_detector");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 3296));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 3344));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 3392));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 3416));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 3440));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 3444));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 3508));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_model");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 3512));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 3560));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 3608));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 3632));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 3656));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 3660));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 3724));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_descriptor");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 3728));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 3776));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 3824));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 3848));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 3872));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 3876));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 3940));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_pca");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 3944));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 3992));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 4040));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 4064));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 4088));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 4092));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 4156));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_dog_octave_list_t", "oct");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 4160));
  vl_printf("%s%s %s = %p\n", "        ", "vl_dog_octave_t *", "items", *(const void **)(a1 + 4168));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 4176));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_dog_meta_t", "dog_meta");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "int_pair_list_t", "oct_layers");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 4184));
  vl_printf("%s%s %s = %p\n", "          ", "int_pair_t *", "items", *(const void **)(a1 + 4192));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 4200));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "lbl_desc2d_t", "lbl2d");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "lbl_feature2d_t *[3]", "nets", (const void *)(a1 + 4208));
  vl_printf("%s%s %s = *%p\n", "        ", "char[512]", "framework_identifier", (const void *)(a1 + 4232));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_resolution", *(_DWORD *)(a1 + 4744));
  vl_printf("%s%s %s = %d\n", "        ", "int", "lbl_query_version", *(_DWORD *)(a1 + 4748));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %p\n", "      ", "vl_kpts_callback_t", "kpts_callback", *(const void **)(a1 + 4752));
  vl_printf("%s%s %s = %p\n", "      ", "void *", "kpts_callback_context", *(const void **)(a1 + 4760));
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_kpts_export", *(_DWORD *)(a1 + 4768));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_map_t", "map");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "force_rebuild", *(_DWORD *)(a1 + 4776));
  vl_printf("%s%s %s = %d\n", "      ", "int", "status", *(_DWORD *)(a1 + 4780));
  vl_printf("%s%s %s =", "      ", "g_pos3_t", "updated_pos");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "        ", "double", "x", *(double *)(a1 + 4784));
  vl_printf("%s%s %s = %f\n", "        ", "double", "y", *(double *)(a1 + 4792));
  vl_printf("%s%s %s = %f\n", "        ", "double", "z", *(double *)(a1 + 4800));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %f\n", "      ", "float", "updated_uncert", *(float *)(a1 + 4808));
  vl_printf("%s%s %s = %p\n", "      ", "vl_map_t *", "updated_map", *(const void **)(a1 + 4816));
  vl_printf("%s%s %s = %d\n", "      ", "int", "is_running", *(_DWORD *)(a1 + 4824));
  vl_printf("%s%s %s = *%p\n", "      ", "char[512]", "track_base_path", (const void *)(a1 + 4828));
  vl_printf("%s%s %s = %p\n", "      ", "void *", "track_callback_context", *(const void **)(a1 + 5344));
  vl_printf("%s%s %s = %p\n", "      ", "vl_track_callback_t", "track_callback", *(const void **)(a1 + 5352));
  vl_printf("%s%s %s = %p\n", "      ", "vl_map_t *", "map", *(const void **)(a1 + 5360));
  vl_printf("%s%s %s =", "      ", "vl_tile_t", "latest_tile");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "level", *(_DWORD *)(a1 + 5368));
  vl_printf("%s%s %s = %d\n", "        ", "int", "x", *(_DWORD *)(a1 + 5372));
  vl_printf("%s%s %s = %d\n", "        ", "int", "y", *(_DWORD *)(a1 + 5376));
  vl_printf("%s%s %s = %d\n", "        ", "int", "uncertainty", *(_DWORD *)(a1 + 5380));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_gnd_t", "gnd");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_coords_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[3][3]", "R", (const void *)(a1 + 5384));
  vl_printf("%s%s %s = *%p\n", "          ", "double[3]", "t", (const void *)(a1 + 5456));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %f\n", "        ", "double", "w", *(double *)(a1 + 5480));
  vl_printf("%s%s %s = %f\n", "        ", "double", "h", *(double *)(a1 + 5488));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %p\n", "      ", "void *", "cache_meta", *(const void **)(a1 + 5496));
  vl_printf("%s%s %s = %p\n", "      ", "pthread_t", "build_thread", *(const void **)(a1 + 5504));
  vl_printf("%s%s %s =", "      ", "pthread_rwlock_t", "update_lock");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %ld\n", "        ", "long", "__sig", *(void *)(a1 + 5512));
  vl_printf("%s%s %s = *%p\n", "        ", "char[192]", "__opaque", (const void *)(a1 + 5520));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "pthread_rwlock_t", "map_lock");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %ld\n", "        ", "long", "__sig", *(void *)(a1 + 5712));
  vl_printf("%s%s %s = *%p\n", "        ", "char[192]", "__opaque", (const void *)(a1 + 5720));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_load");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 5912));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 5960));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 6008));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 6032));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 6056));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 6060));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 6124));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_sss");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 6128));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 6176));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 6224));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 6248));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 6272));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 6276));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 6340));
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_match_t", "match");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_total");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 6344));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 6392));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 6440));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 6464));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 6488));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 6492));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 6556));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_sss");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 6560));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 6608));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 6656));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 6680));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 6704));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 6708));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 6772));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_filter");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 6776));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 6824));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 6872));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 6896));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 6920));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 6924));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 6988));
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_slam_tracker_t", "slam_tracker");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 6992));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 7040));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 7088));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 7112));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 7136));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 7140));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 7204));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_image_meta_list_t", "img_meta_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 7208));
  vl_printf("%s%s %s = %p\n", "        ", "vl_image_meta_t *", "items", *(const void **)(a1 + 7216));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 7224));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_inliers_list_t", "inliers_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 7232));
  vl_printf("%s%s %s = %p\n", "        ", "vl_inliers_t *", "items", *(const void **)(a1 + 7240));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 7248));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_tile_list_t", "tile_id_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 7256));
  vl_printf("%s%s %s = %p\n", "        ", "vl_tile_t *", "items", *(const void **)(a1 + 7264));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 7272));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_gnd_list_t", "gnd_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 7280));
  vl_printf("%s%s %s = %p\n", "        ", "vl_gnd_t *", "items", *(const void **)(a1 + 7288));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 7296));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_pose_list_t", "pose_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 7304));
  vl_printf("%s%s %s = %p\n", "        ", "vl_pose_t *", "items", *(const void **)(a1 + 7312));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 7320));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "int_list_t", "status_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 7328));
  vl_printf("%s%s %s = %p\n", "        ", "int *", "items", *(const void **)(a1 + 7336));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 7344));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_frame", *(_DWORD *)(a1 + 7352));
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_frame_sub", *(_DWORD *)(a1 + 7356));
  vl_printf("%s%s %s = %d\n", "      ", "int", "keyframe", *(_DWORD *)(a1 + 7360));
  vl_printf("%s%s %s = %d\n", "      ", "int", "localized", *(_DWORD *)(a1 + 7364));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_retrieval_t", "retrieval");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 7368));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 7416));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 7464));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 7488));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 7512));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 7516));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 7580));
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_pose_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_ransac_t", "ransac");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_pos2f_list_t", "pt2_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 7584));
  vl_printf("%s%s %s = %p\n", "          ", "g_pos2f_t *", "items", *(const void **)(a1 + 7592));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 7600));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_pos3f_list_t", "pt3_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 7608));
  vl_printf("%s%s %s = %p\n", "          ", "g_pos3f_t *", "items", *(const void **)(a1 + 7616));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 7624));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_pos3f_list_t", "view_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 7632));
  vl_printf("%s%s %s = %p\n", "          ", "g_pos3f_t *", "items", *(const void **)(a1 + 7640));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 7648));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "start_time", (const void *)(a1 + 7656));
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "stop_time", (const void *)(a1 + 7704));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 7752));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "total_time", (const void *)(a1 + 7776));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_measurements", *(_DWORD *)(a1 + 7800));
  vl_printf("%s%s %s = *%p\n", "          ", "char[64]", "name", (const void *)(a1 + 7804));
  vl_printf("%s%s %s = %d\n", "          ", "int", "is_rt_timer", *(_DWORD *)(a1 + 7868));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_gp2pt_t", "gp2pt");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "int_list_t", "pt3_indices");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 7872));
  vl_printf("%s%s %s = %p\n", "          ", "int *", "items", *(const void **)(a1 + 7880));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 7888));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "vl_kpt_list_t", "kpt_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 7896));
  vl_printf("%s%s %s = %p\n", "          ", "vl_kpt_t *", "items", *(const void **)(a1 + 7904));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 7912));
  vl_printf("%s%s %s =", "          ", "float_list_t", "global_desc");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "            ", "int64_t", "n_items", *(void *)(a1 + 7920));
  vl_printf("%s%s %s = %p\n", "            ", "float *", "items", *(const void **)(a1 + 7928));
  vl_printf("%s%s %s = %lld\n", "            ", "int64_t", "n_items_max", *(void *)(a1 + 7936));
  vl_printf("%s}\n", "          ");
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_score_t", "score");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "vl_gnd_t", "gnd");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "          ", "g_coords_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "double[3][3]", "R", (const void *)(a1 + 7944));
  vl_printf("%s%s %s = *%p\n", "            ", "double[3]", "t", (const void *)(a1 + 8016));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s = %f\n", "          ", "double", "w", *(double *)(a1 + 8040));
  vl_printf("%s%s %s = %f\n", "          ", "double", "h", *(double *)(a1 + 8048));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %d\n", "        ", "int", "status", *(_DWORD *)(a1 + 8056));
  vl_printf("%s%s %s =", "        ", "vl_ps_timers_t", "timers");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "          ", "vl_timer_t", "filter");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "start_time", (const void *)(a1 + 8064));
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "stop_time", (const void *)(a1 + 8112));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 8160));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "total_time", (const void *)(a1 + 8184));
  vl_printf("%s%s %s = %d\n", "            ", "int", "n_measurements", *(_DWORD *)(a1 + 8208));
  vl_printf("%s%s %s = *%p\n", "            ", "char[64]", "name", (const void *)(a1 + 8212));
  vl_printf("%s%s %s = %d\n", "            ", "int", "is_rt_timer", *(_DWORD *)(a1 + 8276));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "vl_timer_t", "vote");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "start_time", (const void *)(a1 + 8280));
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "stop_time", (const void *)(a1 + 8328));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 8376));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "total_time", (const void *)(a1 + 8400));
  vl_printf("%s%s %s = %d\n", "            ", "int", "n_measurements", *(_DWORD *)(a1 + 8424));
  vl_printf("%s%s %s = *%p\n", "            ", "char[64]", "name", (const void *)(a1 + 8428));
  vl_printf("%s%s %s = %d\n", "            ", "int", "is_rt_timer", *(_DWORD *)(a1 + 8492));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "vl_timer_t", "find_peak");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "start_time", (const void *)(a1 + 8496));
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "stop_time", (const void *)(a1 + 8544));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 8592));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "total_time", (const void *)(a1 + 8616));
  vl_printf("%s%s %s = %d\n", "            ", "int", "n_measurements", *(_DWORD *)(a1 + 8640));
  vl_printf("%s%s %s = *%p\n", "            ", "char[64]", "name", (const void *)(a1 + 8644));
  vl_printf("%s%s %s = %d\n", "            ", "int", "is_rt_timer", *(_DWORD *)(a1 + 8708));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "vl_timer_t", "refine");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "start_time", (const void *)(a1 + 8712));
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "stop_time", (const void *)(a1 + 8760));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 8808));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "total_time", (const void *)(a1 + 8832));
  vl_printf("%s%s %s = %d\n", "            ", "int", "n_measurements", *(_DWORD *)(a1 + 8856));
  vl_printf("%s%s %s = *%p\n", "            ", "char[64]", "name", (const void *)(a1 + 8860));
  vl_printf("%s%s %s = %d\n", "            ", "int", "is_rt_timer", *(_DWORD *)(a1 + 8924));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "vl_timer_t", "other");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "start_time", (const void *)(a1 + 8928));
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "stop_time", (const void *)(a1 + 8976));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 9024));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "total_time", (const void *)(a1 + 9048));
  vl_printf("%s%s %s = %d\n", "            ", "int", "n_measurements", *(_DWORD *)(a1 + 9072));
  vl_printf("%s%s %s = *%p\n", "            ", "char[64]", "name", (const void *)(a1 + 9076));
  vl_printf("%s%s %s = %d\n", "            ", "int", "is_rt_timer", *(_DWORD *)(a1 + 9140));
  vl_printf("%s}\n", "          ");
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "start_time", (const void *)(a1 + 9144));
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "stop_time", (const void *)(a1 + 9192));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 9240));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "total_time", (const void *)(a1 + 9264));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_measurements", *(_DWORD *)(a1 + 9288));
  vl_printf("%s%s %s = *%p\n", "          ", "char[64]", "name", (const void *)(a1 + 9292));
  vl_printf("%s%s %s = %d\n", "          ", "int", "is_rt_timer", *(_DWORD *)(a1 + 9356));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "vl_memuse_t", "memuse");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "double", "max", *(double *)(a1 + 9360));
  vl_printf("%s%s %s = %f\n", "          ", "double", "mem_tot", *(double *)(a1 + 9368));
  vl_printf("%s%s %s = %llu\n", "          ", "uint64_t", "n", *(void *)(a1 + 9376));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "struct (unnamed)", "debug");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "          ", "g_coords_t", "gt_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "double[3][3]", "R", (const void *)(a1 + 9384));
  vl_printf("%s%s %s = *%p\n", "            ", "double[3]", "t", (const void *)(a1 + 9456));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s = %p\n", "          ", "void *", "args_data", *(const void **)(a1 + 9480));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_refine_t", "refine");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "start_time", (const void *)(a1 + 9488));
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "stop_time", (const void *)(a1 + 9536));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 9584));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "total_time", (const void *)(a1 + 9608));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_measurements", *(_DWORD *)(a1 + 9632));
  vl_printf("%s%s %s = *%p\n", "          ", "char[64]", "name", (const void *)(a1 + 9636));
  vl_printf("%s%s %s = %d\n", "          ", "int", "is_rt_timer", *(_DWORD *)(a1 + 9700));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_referee_t", "referee");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "start_time", (const void *)(a1 + 9704));
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "stop_time", (const void *)(a1 + 9752));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 9800));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "total_time", (const void *)(a1 + 9824));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_measurements", *(_DWORD *)(a1 + 9848));
  vl_printf("%s%s %s = *%p\n", "          ", "char[64]", "name", (const void *)(a1 + 9852));
  vl_printf("%s%s %s = %d\n", "          ", "int", "is_rt_timer", *(_DWORD *)(a1 + 9916));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = *%p\n", "        ", "char[512]", "framework_id", (const void *)(a1 + 9920));
  vl_printf("%s%s %s =", "        ", "vl_hs_tfrecord_meta_t", "tfrecord_meta");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "          ", "int", "write_to_tfrecord", *(_DWORD *)(a1 + 10432));
  vl_printf("%s%s %s =", "          ", "g_coords_t", "gt_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "double[3][3]", "R", (const void *)(a1 + 10440));
  vl_printf("%s%s %s = *%p\n", "            ", "double[3]", "t", (const void *)(a1 + 10512));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s = %f\n", "          ", "double", "sample_t", *(double *)(a1 + 10536));
  vl_printf("%s%s %s = *%p\n", "          ", "char[512]", "folder_path", (const void *)(a1 + 10544));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_fuse_t", "fuse");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "start_time", (const void *)(a1 + 11056));
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "stop_time", (const void *)(a1 + 11104));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 11152));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "total_time", (const void *)(a1 + 11176));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_measurements", *(_DWORD *)(a1 + 11200));
  vl_printf("%s%s %s = *%p\n", "          ", "char[64]", "name", (const void *)(a1 + 11204));
  vl_printf("%s%s %s = %d\n", "          ", "int", "is_rt_timer", *(_DWORD *)(a1 + 11268));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 11272));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 11320));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 11368));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 11392));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 11416));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 11420));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 11484));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_ps_hyp_list_t", "hyp_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 11488));
  vl_printf("%s%s %s = %p\n", "        ", "vl_ps_hyp_t *", "items", *(const void **)(a1 + 11496));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 11504));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "float_list_t", "solver_conf_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 11512));
  vl_printf("%s%s %s = %p\n", "        ", "float *", "items", *(const void **)(a1 + 11520));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 11528));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "float_list_t", "fused_conf_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 11536));
  vl_printf("%s%s %s = %p\n", "        ", "float *", "items", *(const void **)(a1 + 11544));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 11552));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %p\n", "      ", "vl_pose_fuse_t *", "pf", *(const void **)(a1 + 11560));
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "debug");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_coords_t", "gt_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[3][3]", "R", (const void *)(a1 + 11568));
  vl_printf("%s%s %s = *%p\n", "          ", "double[3]", "t", (const void *)(a1 + 11640));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_history_t", "history");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "pthread_mutex_t", "mutex");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %ld\n", "        ", "long", "__sig", *(void *)(a1 + 11664));
  vl_printf("%s%s %s = *%p\n", "        ", "char[56]", "__opaque", (const void *)(a1 + 11672));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %d\n", "      ", "int", "frames_processed", *(_DWORD *)(a1 + 11728));
  vl_printf("%s%s %s = %d\n", "      ", "int", "last_keyframe", *(_DWORD *)(a1 + 11732));
  vl_printf("%s%s %s =", "      ", "vl_context_history_frame_list_t", "frames");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 11736));
  vl_printf("%s%s %s = %p\n", "        ", "vl_context_history_frame_t *", "items", *(const void **)(a1 + 11744));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 11752));
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_meta_gt_t", "gt");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "g_coords_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "double[3][3]", "R", (const void *)(a1 + 11760));
  vl_printf("%s%s %s = *%p\n", "        ", "double[3]", "t", (const void *)(a1 + 11832));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %d\n", "      ", "int", "cluster_idx", *(_DWORD *)(a1 + 11856));
  vl_printf("%s%s %s = %u\n", "      ", "vl_meta_gt_type_t", "type_flags", *(_DWORD *)(a1 + 11860));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "start_time", (const void *)(a1 + 11864));
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "stop_time", (const void *)(a1 + 11912));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 11960));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "total_time", (const void *)(a1 + 11984));
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_measurements", *(_DWORD *)(a1 + 12008));
  vl_printf("%s%s %s = *%p\n", "      ", "char[64]", "name", (const void *)(a1 + 12012));
  vl_printf("%s%s %s = %d\n", "      ", "int", "is_rt_timer", *(_DWORD *)(a1 + 12076));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "vl_dump_t", "dump");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "    ", "int", "recording", *(_DWORD *)(a1 + 12080));
  vl_printf("%s%s %s = %d\n", "    ", "int", "dump_flag", *(_DWORD *)(a1 + 12084));
  vl_printf("%s%s %s = %p\n", "    ", "pthread_t", "dump_thread", *(const void **)(a1 + 12088));
  vl_printf("%s%s %s =", "    ", "struct timespec", "start_time");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %ld\n", "      ", "__darwin_time_t", "tv_sec", *(void *)(a1 + 12096));
  vl_printf("%s%s %s = %ld\n", "      ", "long", "tv_nsec", *(void *)(a1 + 12104));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s = %d\n", "    ", "int", "dump_thread_running", *(_DWORD *)(a1 + 12112));
  vl_printf("%s%s %s = *%p\n", "    ", "char[512]", "base_path", (const void *)(a1 + 12116));
  vl_printf("%s%s %s = *%p\n", "    ", "char[512]", "path", (const void *)(a1 + 12628));
  vl_printf("%s%s %s =", "    ", "pthread_mutex_t", "lock");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %ld\n", "      ", "long", "__sig", *(void *)(a1 + 13144));
  vl_printf("%s%s %s = *%p\n", "      ", "char[56]", "__opaque", (const void *)(a1 + 13152));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_update_data_list_t", "update_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 13208));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_update_data_t *", "items", *(const void **)(a1 + 13216));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 13224));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_locate_ptr_list_t", "locate_ptr_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 13232));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_locate_data_t **", "items", *(const void **)(a1 + 13240));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 13248));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_timer_t", "timer_locate");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "start_time", (const void *)(a1 + 13256));
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "stop_time", (const void *)(a1 + 13304));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 13352));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "total_time", (const void *)(a1 + 13376));
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_measurements", *(_DWORD *)(a1 + 13400));
  vl_printf("%s%s %s = *%p\n", "      ", "char[64]", "name", (const void *)(a1 + 13404));
  vl_printf("%s%s %s = %d\n", "      ", "int", "is_rt_timer", *(_DWORD *)(a1 + 13468));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_kpts_ptr_list_t", "kpts_ptr_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 13472));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_kpts_data_t **", "items", *(const void **)(a1 + 13480));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 13488));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_timer_t", "timer_kpts");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "start_time", (const void *)(a1 + 13496));
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "stop_time", (const void *)(a1 + 13544));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 13592));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "total_time", (const void *)(a1 + 13616));
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_measurements", *(_DWORD *)(a1 + 13640));
  vl_printf("%s%s %s = *%p\n", "      ", "char[64]", "name", (const void *)(a1 + 13644));
  vl_printf("%s%s %s = %d\n", "      ", "int", "is_rt_timer", *(_DWORD *)(a1 + 13708));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_result_ptr_list_t", "result_ptr_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 13712));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_result_data_t **", "items", *(const void **)(a1 + 13720));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 13728));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_detail_data_t", "detail_data");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "      ", "double", "time_stamp", *(double *)(a1 + 13736));
  vl_printf("%s%s %s =", "      ", "vl_dump_hash_list_t", "hashes");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 13744));
  vl_printf("%s%s %s = %p\n", "        ", "vl_dump_hash_t *", "items", *(const void **)(a1 + 13752));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 13760));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_matches_t", "matches");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "int_nn_list_t", "desc_indices");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 13768));
  vl_printf("%s%s %s = %p\n", "          ", "int_nn_t *", "items", *(const void **)(a1 + 13776));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 13784));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "float_nn_list_t", "desc_dists");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 13792));
  vl_printf("%s%s %s = %p\n", "          ", "float_nn_t *", "items", *(const void **)(a1 + 13800));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 13808));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_kpt_list_t", "pose_kpt_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 13816));
  vl_printf("%s%s %s = %p\n", "        ", "vl_kpt_t *", "items", *(const void **)(a1 + 13824));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 13832));
  vl_printf("%s%s %s =", "        ", "float_list_t", "global_desc");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 13840));
  vl_printf("%s%s %s = %p\n", "          ", "float *", "items", *(const void **)(a1 + 13848));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 13856));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_matches_t", "pose_matches");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "int_nn_list_t", "desc_indices");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 13864));
  vl_printf("%s%s %s = %p\n", "          ", "int_nn_t *", "items", *(const void **)(a1 + 13872));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 13880));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "float_nn_list_t", "desc_dists");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 13888));
  vl_printf("%s%s %s = %p\n", "          ", "float_nn_t *", "items", *(const void **)(a1 + 13896));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 13904));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "g_coords_list_t", "scoring_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 13912));
  vl_printf("%s%s %s = %p\n", "        ", "g_coords_t *", "items", *(const void **)(a1 + 13920));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 13928));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "float_list_t", "scoring_score");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 13936));
  vl_printf("%s%s %s = %p\n", "        ", "float *", "items", *(const void **)(a1 + 13944));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 13952));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "g_coords_list_t", "referee_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 13960));
  vl_printf("%s%s %s = %p\n", "        ", "g_coords_t *", "items", *(const void **)(a1 + 13968));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 13976));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "float_list_t", "referee_score");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 13984));
  vl_printf("%s%s %s = %p\n", "        ", "float *", "items", *(const void **)(a1 + 13992));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 14000));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "g_coords_list_t", "fused_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 14008));
  vl_printf("%s%s %s = %p\n", "        ", "g_coords_t *", "items", *(const void **)(a1 + 14016));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 14024));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "float_list_t", "fused_score");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(void *)(a1 + 14032));
  vl_printf("%s%s %s = %p\n", "        ", "float *", "items", *(const void **)(a1 + 14040));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(void *)(a1 + 14048));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "g_coords_t", "best_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "double[3][3]", "R", (const void *)(a1 + 14056));
  vl_printf("%s%s %s = *%p\n", "        ", "double[3]", "t", (const void *)(a1 + 14128));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %f\n", "      ", "float", "best_score", *(float *)(a1 + 14152));
  vl_printf("%s%s %s =", "      ", "vl_inliers_t", "inliers");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_pos2f_list_t", "pts2d");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 14160));
  vl_printf("%s%s %s = %p\n", "          ", "g_pos2f_t *", "items", *(const void **)(a1 + 14168));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 14176));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_pos3f_list_t", "pts3d");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 14184));
  vl_printf("%s%s %s = %p\n", "          ", "g_pos3f_t *", "items", *(const void **)(a1 + 14192));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 14200));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "int_pair_list_t", "inlier_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(void *)(a1 + 14208));
  vl_printf("%s%s %s = %p\n", "          ", "int_pair_t *", "items", *(const void **)(a1 + 14216));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(void *)(a1 + 14224));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_inliers_gt_pose", *(_DWORD *)(a1 + 14232));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_gnd_t", "gnd");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_coords_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[3][3]", "R", (const void *)(a1 + 14240));
  vl_printf("%s%s %s = *%p\n", "          ", "double[3]", "t", (const void *)(a1 + 14312));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %f\n", "        ", "double", "w", *(double *)(a1 + 14336));
  vl_printf("%s%s %s = %f\n", "        ", "double", "h", *(double *)(a1 + 14344));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = \"%.32s\"\n", "      ", "char *", "debug_char", *(const char **)(a1 + 14352));
  vl_printf("%s%s %s = %d\n", "      ", "int", "debug_len", *(_DWORD *)(a1 + 14360));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_detail_ptr_list_t", "detail_ptr_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 14368));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_detail_data_t **", "items", *(const void **)(a1 + 14376));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 14384));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_stats_ptr_list_t", "stats_ptr_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(void *)(a1 + 14392));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_stats_data_t **", "items", *(const void **)(a1 + 14400));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(void *)(a1 + 14408));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s = %p\n", "  ", "vl_replay_t *", "replay", *(const void **)(a1 + 14416));
  vl_printf("%s%s %s = %p\n", "  ", "slam_tracker_vo_t *", "tracker", *(const void **)(a1 + 14424));
  vl_printf("%s%s %s =", "  ", "vl_pose_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "    ", "double[3][3]", "R", (const void *)(a1 + 14432));
  vl_printf("%s%s %s = *%p\n", "    ", "double[3]", "t", (const void *)(a1 + 14504));
  vl_printf("%s%s %s = %f\n", "    ", "float", "confidence", *(float *)(a1 + 14528));
  vl_printf("%s%s %s = *%p\n", "    ", "float[36]", "cov_pose", (const void *)(a1 + 14532));
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "struct (unnamed)", "time");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "    ", "double", "query", *(double *)(a1 + 14680));
  vl_printf("%s%s %s = %d\n", "    ", "int", "user_set", *(_DWORD *)(a1 + 14688));
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "struct (unnamed)", "use_preloaded");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "    ", "int", "calib", *(_DWORD *)(a1 + 14696));
  vl_printf("%s%s %s = %d\n", "    ", "int", "kpts", *(_DWORD *)(a1 + 14700));
  vl_printf("%s%s %s = %d\n", "    ", "int", "matches", *(_DWORD *)(a1 + 14704));
  vl_printf("%s%s %s = %d\n", "    ", "int", "kpts3d", *(_DWORD *)(a1 + 14708));
  vl_printf("%s}\n", "  ");
  vl_printf("}\n");
  int v4 = (char *)malloc_type_malloc(_MergedGlobals_4, 0x100004077774924uLL);
  *(void *)(a1 + 14352) = v4;
  strcpy(v4, (const char *)qword_26AC37618);
  *(_DWORD *)(a1 + 14360) = _MergedGlobals_4;
  if (*a3)
  {
    uint64_t v5 = vl_fio_open(a3, "wb", "DDEB");
    uint64_t v6 = v5;
    if (!v5)
    {
      printf("%sError : ", (const char *)&unk_21BB738AE);
      printf("Could not open %s to print!", a3);
      putchar(10);
LABEL_50:
      vl_fio_close(v6);
      goto LABEL_51;
    }
    __int ptr = 1;
    float v7 = *(FILE **)(v5 + 552);
    if (v7)
    {
      fwrite(&__ptr, 8uLL, 1uLL, v7);
      size_t v8 = __ptr;
      unint64_t v9 = *(FILE **)(v6 + 552);
      if (!v9)
      {
        if (!__ptr)
        {
          size_t v23 = strlen((const char *)qword_26AC37618);
          __int ptr = v23;
          goto LABEL_31;
        }
        uint64_t v10 = *(void *)(v6 + 520);
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(v5 + 520);
      size_t v12 = v11 + 8;
      unint64_t v13 = *(void *)(v5 + 536);
      if (v11 + 8 <= v13)
      {
        double v16 = *(char **)(v5 + 528);
      }
      else
      {
        unint64_t v14 = 2 * v13;
        if (!v13) {
          unint64_t v14 = 256;
        }
        if (v14 <= v12) {
          size_t v15 = v12;
        }
        else {
          size_t v15 = v14;
        }
        double v16 = (char *)malloc_type_realloc(*(void **)(v5 + 528), v15, 0x768BF38DuLL);
        *(void *)(v6 + 52_Block_object_dispose(&STACK[0x220], 8) = v16;
        *(void *)(v6 + 536) = v15;
        uint64_t v11 = *(void *)(v6 + 520);
      }
      *(void *)&v16[v11] = __ptr;
      uint64_t v10 = *(void *)(v6 + 520) + 8;
      *(void *)(v6 + 520) = v10;
      unint64_t v9 = *(FILE **)(v6 + 552);
      size_t v8 = 1;
      if (!v9)
      {
LABEL_18:
        size_t v17 = v10 + v8;
        size_t v18 = *(void *)(v6 + 536);
        if (v10 + v8 <= v18)
        {
          double v21 = *(char **)(v6 + 528);
        }
        else
        {
          unint64_t v19 = 2 * v18;
          if (!v18) {
            unint64_t v19 = 256;
          }
          if (v19 <= v17) {
            size_t v20 = v17;
          }
          else {
            size_t v20 = v19;
          }
          double v21 = (char *)malloc_type_realloc(*(void **)(v6 + 528), v20, 0x768BF38DuLL);
          *(void *)(v6 + 52_Block_object_dispose(&STACK[0x220], 8) = v21;
          *(void *)(v6 + 536) = v20;
          uint64_t v10 = *(void *)(v6 + 520);
        }
        memcpy(&v21[v10], "\n", v8);
        *(void *)(v6 + 520) += v8;
LABEL_27:
        double v22 = *(FILE **)(v6 + 552);
        size_t v23 = strlen((const char *)qword_26AC37618);
        __int ptr = v23;
        if (v22)
        {
          fwrite(&__ptr, 8uLL, 1uLL, v22);
          size_t v24 = __ptr;
          long double v25 = (const void *)qword_26AC37618;
          long double v26 = *(FILE **)(v6 + 552);
          if (v26)
          {
LABEL_29:
            fwrite(v25, 1uLL, v24, v26);
            goto LABEL_50;
          }
LABEL_40:
          if (v24)
          {
            uint64_t v33 = *(void *)(v6 + 520);
            size_t v34 = v33 + v24;
            size_t v35 = *(void *)(v6 + 536);
            if (v33 + v24 <= v35)
            {
              float32x2_t v38 = *(char **)(v6 + 528);
            }
            else
            {
              unint64_t v36 = 2 * v35;
              if (!v35) {
                unint64_t v36 = 256;
              }
              if (v36 <= v34) {
                size_t v37 = v34;
              }
              else {
                size_t v37 = v36;
              }
              float32x2_t v38 = (char *)malloc_type_realloc(*(void **)(v6 + 528), v37, 0x768BF38DuLL);
              *(void *)(v6 + 52_Block_object_dispose(&STACK[0x220], 8) = v38;
              *(void *)(v6 + 536) = v37;
              uint64_t v33 = *(void *)(v6 + 520);
            }
            memcpy(&v38[v33], v25, v24);
            *(void *)(v6 + 520) += v24;
          }
          goto LABEL_50;
        }
LABEL_31:
        size_t v24 = v23;
        uint64_t v27 = *(void *)(v6 + 520);
        size_t v28 = v27 + 8;
        unint64_t v29 = *(void *)(v6 + 536);
        if (v27 + 8 <= v29)
        {
          float v32 = *(char **)(v6 + 528);
        }
        else
        {
          unint64_t v30 = 2 * v29;
          if (!v29) {
            unint64_t v30 = 256;
          }
          if (v30 <= v28) {
            size_t v31 = v28;
          }
          else {
            size_t v31 = v30;
          }
          float v32 = (char *)malloc_type_realloc(*(void **)(v6 + 528), v31, 0x768BF38DuLL);
          *(void *)(v6 + 52_Block_object_dispose(&STACK[0x220], 8) = v32;
          *(void *)(v6 + 536) = v31;
          uint64_t v27 = *(void *)(v6 + 520);
        }
        *(void *)&v32[v27] = __ptr;
        *(void *)(v6 + 520) += 8;
        long double v25 = (const void *)qword_26AC37618;
        long double v26 = *(FILE **)(v6 + 552);
        if (v26) {
          goto LABEL_29;
        }
        goto LABEL_40;
      }
    }
    fwrite("\n", 1uLL, v8, v9);
    goto LABEL_27;
  }
LABEL_51:
  free((void *)qword_26AC37618);
  qword_26AC37618 = 0;
  _MergedGlobals_4 = 0;
}

void vl_mat_imgnd_to_xyz(double *a1, double *a2, int a3, int a4, double a5, double a6, double a7)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  double v9 = (double)a3 * 0.5 + -0.5;
  double v10 = (double)a4 * 0.5 + -0.5;
  double v11 = v9 * -0.0 + 1.0;
  double v12 = v10 * -0.0 + 0.0;
  a1[2] = 0.0;
  a1[3] = 0.0;
  double v13 = v9 * -0.0 + 0.0;
  double v14 = v10 * -0.0 + 1.0;
  a1[6] = 0.0;
  a1[7] = 0.0;
  a1[10] = 1.0;
  a1[11] = 0.0;
  double v15 = 0.0 - v9;
  double v16 = 0.0 - v10;
  *((_OWORD *)a1 + 7) = xmmword_21BB7A540;
  double v17 = -(v12 - v11 * 6.123234e-17);
  double v18 = v12 * 6.123234e-17;
  double v19 = v11 + v12 * 6.123234e-17;
  *a1 = v17;
  a1[1] = v19;
  double v20 = -(v14 - v13 * 6.123234e-17);
  double v21 = v13 + v14 * 6.123234e-17;
  a1[4] = v20;
  a1[5] = v21;
  double v22 = -(v12 - v13 * 6.123234e-17);
  double v23 = v13 + v18;
  a1[8] = v22;
  a1[9] = v23;
  double v24 = -(v16 - v15 * 6.123234e-17);
  double v25 = v15 + v16 * 6.123234e-17;
  a1[12] = v24;
  a1[13] = v25;
  double v26 = a2[13] / (double)a4;
  double v27 = a2[12] / (double)a3;
  *a1 = v17 * v26;
  a1[1] = v19 * v27;
  a1[2] = a7 * -0.0;
  a1[4] = v20 * v26;
  a1[5] = v21 * v27;
  a1[6] = a7 * -0.0;
  a1[8] = v22 * v26;
  a1[9] = v23 * v27;
  a1[10] = -a7;
  a1[12] = v24 * v26;
  a1[13] = v25 * v27;
  a1[14] = a7 * -0.0;
  uint64_t v71 = 0x3FF0000000000000;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v74 = 0x3FF0000000000000;
  double v77 = -a5;
  double v78 = -a6;
  uint64_t v79 = 0x3FF0000000000000;
  long long v80 = 0u;
  long long v81 = 0u;
  uint64_t v82 = 0x3FF0000000000000;
  g_mul_4x4(a1, a1, (double *)&v71);
  double v28 = a2[1];
  double v30 = a2[2];
  double v29 = a2[3];
  double v31 = a2[4];
  double v32 = a2[5];
  double v33 = a2[6];
  double v34 = a2[7];
  double v35 = a2[8];
  double v36 = a1[1];
  double v37 = a1[2];
  double v38 = a1[3];
  double v39 = *a1 * *a2 + 0.0 + v36 * v28 + v37 * v30 + v38 * 0.0;
  double v40 = *a1 * v29 + 0.0 + v36 * v31 + v37 * v32 + v38 * 0.0;
  double v41 = *a1 * v33 + 0.0 + v36 * v34 + v37 * v35 + v38 * 0.0;
  double v42 = v38 + *a1 * 0.0 + 0.0 + v36 * 0.0 + v37 * 0.0;
  double v43 = a1[4];
  double v44 = a1[5];
  double v45 = a1[6];
  double v46 = a1[7];
  double v47 = v43 * *a2 + 0.0 + v44 * v28 + v45 * v30 + v46 * 0.0;
  double v48 = v43 * v29 + 0.0 + v44 * v31 + v45 * v32 + v46 * 0.0;
  double v49 = v43 * v33 + 0.0 + v44 * v34 + v45 * v35 + v46 * 0.0;
  double v50 = v46 + v43 * 0.0 + 0.0 + v44 * 0.0 + v45 * 0.0;
  double v51 = a1[8];
  double v52 = a1[9];
  double v53 = a1[10];
  double v54 = a1[11];
  double v55 = v51 * *a2 + 0.0 + v52 * v28 + v53 * v30 + v54 * 0.0;
  double v56 = v51 * v29 + 0.0 + v52 * v31 + v53 * v32 + v54 * 0.0;
  double v57 = v51 * v33 + 0.0 + v52 * v34 + v53 * v35 + v54 * 0.0;
  double v58 = v54 + v51 * 0.0 + 0.0 + v52 * 0.0 + v53 * 0.0;
  double v59 = a1[12];
  double v60 = a1[13];
  double v61 = v59 * *a2 + 0.0 + v60 * v28;
  double v62 = a1[14];
  double v63 = a1[15];
  double v64 = v61 + v62 * v30 + v63 * 0.0;
  double v65 = v59 * v29 + 0.0 + v60 * v31 + v62 * v32 + v63 * 0.0;
  double v66 = v59 * v33 + 0.0 + v60 * v34 + v62 * v35 + v63 * 0.0;
  double v67 = v63 + v59 * 0.0 + 0.0 + v60 * 0.0 + v62 * 0.0;
  *a1 = v39;
  a1[1] = v40;
  a1[2] = v41;
  a1[3] = v42;
  a1[4] = v47;
  a1[5] = v48;
  a1[6] = v49;
  a1[7] = v50;
  a1[8] = v55;
  a1[9] = v56;
  a1[10] = v57;
  a1[11] = v58;
  a1[12] = v64;
  a1[13] = v65;
  a1[14] = v66;
  a1[15] = v67;
  double v68 = a2[9];
  double v69 = a2[10];
  double v70 = a2[11];
  *a1 = v39 + v42 * v68;
  a1[1] = v40 + v42 * v69;
  a1[2] = v41 + v42 * v70;
  a1[4] = v47 + v50 * v68;
  a1[5] = v48 + v50 * v69;
  a1[6] = v49 + v50 * v70;
  a1[8] = v55 + v58 * v68;
  a1[9] = v56 + v58 * v69;
  a1[10] = v57 + v58 * v70;
  a1[12] = v64 + v67 * v68;
  a1[13] = v65 + v67 * v69;
  a1[14] = v66 + v67 * v70;
}

_DWORD *huff_table_create(int a1, signed int a2)
{
  int v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x1010040F32E1FD2uLL);
  unsigned int v5 = 32 - __clz(a2);
  _DWORD *v4 = v5;
  v4[1] = a2;
  signed int v6 = 32 - __clz(a1 - 1);
  v4[2] = v6;
  v4[3] = a1;
  if (v6 > a2) {
    __assert_rtn("huff_table_create", "huff_coder.c", 779, "t->symbol_bits <= max_code_length && \"Max code length not enough to represent symbols\"");
  }
  if ((int)(v5 + a2) >= 33) {
    __assert_rtn("huff_table_create", "huff_coder.c", 780, "max_code_length + t->length_bits <= 32 && \"32 bit isn't enough!\"");
  }
  float v7 = v4;
  *((void *)v4 + 2) = malloc_type_malloc(4 * a1, 0x100004052888210uLL);
  *((void *)v7 + 3) = malloc_type_calloc(1 << a2, 4uLL, 0x100004052888210uLL);
  return v7;
}

unint64_t huff_decompress(uint64_t a1, uint64_t a2, void *a3, int a4, char *a5, unint64_t a6)
{
  uint64_t v6 = a1 + 8;
  if (*(void *)a1 != a2) {
    __assert_rtn("huff_decompress", "huff_coder.c", 1161, "src_len == _src_len");
  }
  uint64_t v10 = a2;
  uint64_t v11 = bswap32(*(_DWORD *)(a1 + 12));
  unint64_t v12 = v11 << 37;
  double v13 = (unsigned int *)(a1 + 16);
  double v14 = huff_table_create(bswap32(*(_DWORD *)(a1 + 8)), v11 >> 27);
  double v15 = (void **)v14;
  if (v14[3] < 1)
  {
    int v18 = 27;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = *((void *)v14 + 2);
    int v18 = 27;
    do
    {
      int v19 = *v14;
      if (v18 < *v14)
      {
        unsigned int v20 = *v13++;
        v12 |= (unint64_t)bswap32(v20) << (32 - v18);
        v18 += 32;
      }
      unint64_t v21 = v12 >> -(char)v19;
      int v22 = v18 - v19;
      unint64_t v23 = v12 << v19;
      if (v18 - v19 < (int)v21)
      {
        unsigned int v24 = *v13++;
        v23 |= (unint64_t)bswap32(v24) << (32 - v22);
        v22 += 32;
      }
      unint64_t v25 = v23 >> -(char)v21;
      int v26 = (v25 << v19) | v21;
      int v27 = v14[1] - v21;
      *(_DWORD *)(v17 + 4 * v16) = v26;
      if (v27 != 31)
      {
        int v28 = v25 << v27;
        if (1 << v27 <= 1) {
          uint64_t v29 = 1;
        }
        else {
          uint64_t v29 = (1 << v27);
        }
        double v30 = (_DWORD *)(*((void *)v14 + 3) + 4 * v28);
        do
        {
          if (*v30) {
            __assert_rtn("huff_table_set_code", "huff_coder.c", 809, "table->decode[bits] == 0");
          }
          *v30++ = (v16 << *v14) | v21;
          --v29;
        }
        while (v29);
      }
      int v18 = v22 - v21;
      unint64_t v12 = v23 << v21;
      ++v16;
    }
    while (v16 < v14[3]);
  }
  unint64_t v46 = a6;
  if (v10)
  {
    unint64_t v31 = 0;
    int v32 = 0;
    double v33 = a5;
    do
    {
      int v34 = v14[1];
      if (v18 < v34)
      {
        unsigned int v35 = *v13++;
        v12 |= (unint64_t)bswap32(v35) << (32 - v18);
        v18 += 32;
      }
      unint64_t v36 = v12 >> -(char)v34;
      unsigned int v37 = 1 << v34;
      if (v37 <= v36) {
        __assert_rtn("huff_table_decode_symbol", "huff_coder.c", 825, "bits < (1 << table->max_code_length)");
      }
      unsigned int v38 = v37 - 1;
      int v39 = *v14;
      unsigned int v40 = *(_DWORD *)(*((void *)v14 + 3) + 4 * (v38 & v36));
      if (v32 >= 32)
      {
        unint64_t v41 = HIDWORD(v31);
        v31 <<= 32;
        *(_DWORD *)a5 = bswap32(v41);
        a5 += 4;
        v32 -= 32;
      }
      v18 -= v40 & ~(-1 << v39);
      v12 <<= v40 & ~(-1 << v39);
      v32 += a4;
      v31 |= ((int)(v40 >> v39) & (unint64_t)~(-1 << a4)) << -(char)v32;
      --v10;
    }
    while (v10);
    double v42 = a3;
    if (v32 >= 1)
    {
      do
      {
        unint64_t v43 = HIDWORD(v31);
        v31 <<= 32;
        *(_DWORD *)a5 = bswap32(v43);
        a5 += 4;
        BOOL v44 = v32 >= 0x20;
        v32 -= 32;
      }
      while (v32 != 0 && v44);
    }
  }
  else
  {
    int v32 = 0;
    double v33 = a5;
    double v42 = a3;
  }
  free(*((void **)v14 + 2));
  free(v15[3]);
  free(v15);
  if (v42) {
    *double v42 = ((unint64_t)(8 * ((void)v13 - v6) - v18 + 7) >> 3) + 8;
  }
  unint64_t result = a5 - v33 + ((unint64_t)(v32 + 7) >> 3);
  if (v46 < (int)result) {
    __assert_rtn("huff_decompress", "huff_coder.c", 1178, "bytes_written <= dst_size");
  }
  return result;
}

uint64_t vl_pose_ransac(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v13 = v12;
  unint64_t v815 = v14;
  uint64_t v876 = v15;
  uint64_t v17 = v16;
  uint64_t v871 = v18;
  int v20 = v19;
  unint64_t v21 = v11;
  *(void *)&v904[4] = *MEMORY[0x263EF8340];
  int v22 = *(_DWORD *)(v12 + 28);
  if (*(_DWORD *)(v11 + 284))
  {
    *(void *)(v11 + 192) -= mach_absolute_time();
  }
  else
  {
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v11 + 104));
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v21 + 88));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v21 + 72));
  }
  unint64_t v23 = v21;
  float v24 = *(float *)(v13 + 8);
  float v25 = *(float *)(v13 + 12);
  int v26 = *(_DWORD *)(v13 + 52);
  unsigned int v27 = *(_DWORD *)(v13 + 44);
  uint64_t v28 = v876[3];
  uint64_t v29 = v28;
  uint64_t v865 = (char *)malloc_type_malloc(8 * (int)v28, 0x100004000313F17uLL);
  *(void *)unint64_t v23 = 0;
  *(void *)(v23 + 24) = 0;
  uint64_t v817 = v23 + 24;
  unint64_t v845 = v23;
  *(void *)(v23 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
  int v822 = v20;
  uint64_t v828 = (int *)v13;
  if (v25 < v24)
  {
    if ((int)v28 > 0)
    {
      int v30 = 0;
      uint64_t v31 = 0;
      LODWORD(v23) = 0;
      int v32 = (float *)(v876[4] + 4);
      double v33 = (int *)v845;
      int v34 = (float *)v865;
      do
      {
        float v35 = *(v32 - 1);
        float v36 = v35 / *v32;
        if (v36 < (float)(v24 * v24))
        {
          unsigned int v37 = &v865[8 * (int)v23];
          *((_DWORD *)v37 + 1) = v31;
          if (v26) {
            float v35 = v36;
          }
          *(float *)unsigned int v37 = v35;
          unint64_t v23 = (int)v23 + 1;
          if (v36 < (float)(v25 * v25))
          {
            *(float *)&v865[8 * v23] = v36 + -1.0;
            ++v30;
          }
        }
        ++v31;
        v32 += 2;
      }
      while (v29 != v31);
      goto LABEL_20;
    }
    int v30 = 0;
LABEL_95:
    double v33 = (int *)v23;
    unint64_t v43 = (char *)malloc_type_malloc(0x200uLL, 0xE015D4F4uLL);
    goto LABEL_96;
  }
  if ((int)v28 < 1)
  {
    int v30 = v22;
    goto LABEL_95;
  }
  float v38 = v24 * v24;
  double v33 = (int *)v23;
  uint64_t v39 = 0;
  LODWORD(v23) = 0;
  unsigned int v40 = (float *)(v876[4] + 4);
  if (v26)
  {
    int v34 = (float *)v865;
    do
    {
      float v41 = *(v40 - 1) / *v40;
      if (v41 < v38)
      {
        double v42 = &v865[8 * (int)v23];
        *((_DWORD *)v42 + 1) = v39;
        *(float *)double v42 = v41;
        LODWORD(v23) = v23 + 1;
      }
      ++v39;
      v40 += 2;
    }
    while (v29 != v39);
    int v30 = v22;
LABEL_20:
    unint64_t v43 = (char *)malloc_type_malloc(0x200uLL, 0xE015D4F4uLL);
    if (v23) {
      goto LABEL_21;
    }
    goto LABEL_96;
  }
  int v34 = (float *)v865;
  do
  {
    float v231 = *(v40 - 1);
    if ((float)(v231 / *v40) < v38)
    {
      uint64_t v232 = &v865[8 * (int)v23];
      *((_DWORD *)v232 + 1) = v39;
      *(float *)uint64_t v232 = v231;
      LODWORD(v23) = v23 + 1;
    }
    ++v39;
    v40 += 2;
  }
  while (v29 != v39);
  int v30 = v22;
  unint64_t v43 = (char *)malloc_type_malloc(0x200uLL, 0xE015D4F4uLL);
  if (v23)
  {
LABEL_21:
    int v858 = v30;
    unsigned int v852 = v27;
    int v855 = v22;
    uint64_t v44 = 0;
    unsigned int v861 = v23;
    unint64_t v23 = (int)v23;
    char v45 = 1;
    uint64_t v46 = 32;
    double v47 = v34;
    while (1)
    {
      uint64_t v48 = v44;
      int v30 = v858;
      while (1)
      {
        if ((v45 & 1) == 0)
        {
          --v48;
          double v49 = &v43[16 * v48];
          unint64_t v23 = *((void *)v49 + 1);
          double v47 = &v34[2 * *(void *)v49];
        }
        if ((uint64_t)v23 > 15) {
          break;
        }
        if ((uint64_t)v23 > 1)
        {
          double v50 = v47 + 2;
          uint64_t v51 = 2;
          for (uint64_t i = 1; i != v23; ++i)
          {
            double v53 = v50;
            uint64_t v54 = v51;
            do
            {
              double v55 = &v47[2 * (v54 - 2)];
              if ((float)(*v53 - *v55) >= 0.0) {
                break;
              }
              uint64_t v56 = *(void *)v53;
              *(void *)double v53 = *(void *)v55;
              v53 -= 2;
              *(void *)double v55 = v56;
              --v54;
            }
            while (v54 > 1);
            ++v51;
            v50 += 2;
          }
        }
        char v45 = 0;
        unint64_t v23 = 0;
        if (v48 < 1)
        {
          unsigned int v94 = v861;
          int v22 = v855;
          unsigned int v27 = v852;
          goto LABEL_97;
        }
      }
      if (v23 > 0x27) {
        break;
      }
      unint64_t v57 = v23 >> 1;
      float v58 = *v47;
      float v59 = v47[2 * (v23 >> 1)];
      float v60 = v47[2 * v23 - 2];
      if ((float)(*v47 - v59) >= 0.0)
      {
        if ((float)(v58 - v60) >= 0.0)
        {
          if ((float)(v59 - v60) < 0.0) {
            unint64_t v57 = v23 - 1;
          }
        }
        else
        {
          unint64_t v57 = 0;
        }
      }
      else if ((float)(v59 - v60) >= 0.0)
      {
        if ((float)(v58 - v60) >= 0.0) {
          unint64_t v57 = 0;
        }
        else {
          unint64_t v57 = v23 - 1;
        }
      }
LABEL_76:
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      uint64_t v83 = 2 * v57;
      uint64_t v84 = *(void *)v47;
      *(void *)double v47 = *(void *)&v47[v83];
      *(void *)&v47[v83] = v84;
      unint64_t v85 = v23 - 1;
      uint64_t v86 = 2;
      do
      {
        if ((float)(v47[v86] - *v47) <= 0.0)
        {
          ++v82;
          uint64_t v87 = *(void *)&v47[v86];
          *(void *)&v47[v86] = *(void *)&v47[2 * v82];
          *(void *)&v47[2 * v82] = v87;
          if ((float)(v47[v86] - *v47) == 0.0)
          {
            ++v81;
            *(void *)&v47[2 * v82] = *(void *)&v47[2 * v81];
            *(void *)&v47[2 * v81] = v87;
          }
        }
        v86 += 2;
        --v85;
      }
      while (v85);
      uint64_t v88 = 8 * v82 - 8 * v81;
      uint64_t v89 = v81;
      do
      {
        uint64_t v90 = *(void *)((char *)v47 + v88);
        *(void *)((char *)v47 + v8_Block_object_dispose(&STACK[0x220], 8) = *(void *)&v47[2 * v89];
        *(void *)&v47[2 * v89] = v90;
        v88 += 8;
        BOOL v214 = v89-- <= 0;
      }
      while (!v214);
      uint64_t v44 = v48 + 1;
      if (v48 + 1 >= v46)
      {
        uint64_t v91 = 2 * v46;
        unint64_t v43 = (char *)malloc_type_realloc(v43, 32 * v46, 0xBBC2CF03uLL);
        uint64_t v46 = v91;
        double v33 = (int *)v845;
      }
      uint64_t v92 = &v43[16 * v48];
      *(void *)uint64_t v92 = v82 + (((char *)v47 - v865) >> 3) + 1;
      *((void *)v92 + 1) = v23 + ~v82;
      unint64_t v23 = v82 - v81;
      BOOL v93 = v82 == v81;
      int v34 = (float *)v865;
      char v45 = !v93;
      if (v48 < 0 && !v23)
      {
        unsigned int v94 = v861;
        int v22 = v855;
        unsigned int v27 = v852;
        int v30 = v858;
        goto LABEL_97;
      }
    }
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    if (v23 <= 0x7D0) {
      uint64_t v63 = 8;
    }
    else {
      uint64_t v63 = 26;
    }
    if (v23 <= 0x7D0) {
      unint64_t v64 = 3;
    }
    else {
      unint64_t v64 = 9;
    }
    while (1)
    {
      uint64_t v65 = (uint64_t)(v23 - 1 + v61) / v63;
      float v66 = v47[2 * (v61 / v63)];
      float v67 = v47[2 * v65];
      uint64_t v68 = (uint64_t)(2 * v23 - 2 + v61) / v63;
      float v69 = v47[2 * v68];
      if ((float)(v66 - v67) >= 0.0)
      {
        if ((float)(v66 - v69) < 0.0) {
          goto LABEL_53;
        }
        if ((float)(v67 - v69) < 0.0)
        {
LABEL_55:
          *((void *)&v894 + v62) = v68;
          goto LABEL_47;
        }
      }
      else if ((float)(v67 - v69) >= 0.0)
      {
        if ((float)(v66 - v69) < 0.0) {
          goto LABEL_55;
        }
LABEL_53:
        *((void *)&v894 + v62) = v61 / v63;
        goto LABEL_47;
      }
      *((void *)&v894 + v62) = v65;
LABEL_47:
      ++v62;
      v61 += 3 * v23 - 3;
      if (v64 == v62)
      {
        while (1)
        {
          uint64_t v70 = 0;
          uint64_t v71 = 0;
          unint64_t v72 = v64;
          v64 /= 3uLL;
          if (v64 <= 1) {
            uint64_t v73 = 1;
          }
          else {
            uint64_t v73 = v64;
          }
          uint64_t v74 = 8 * v73;
          do
          {
            uint64_t v75 = *(void *)((char *)&v894 + v70);
            uint64_t v76 = *(void *)((char *)&v894 + v70 + 8);
            float v77 = v47[2 * v75];
            float v78 = v47[2 * v76];
            uint64_t v79 = *(void *)((char *)&v894 + v70 + 16);
            float v80 = v47[2 * v79];
            if ((float)(v77 - v78) >= 0.0)
            {
              if ((float)(v77 - v80) < 0.0) {
                goto LABEL_68;
              }
              if ((float)(v78 - v80) >= 0.0)
              {
LABEL_61:
                *(void *)((char *)&v894 + v71) = v76;
                goto LABEL_62;
              }
            }
            else
            {
              if ((float)(v78 - v80) < 0.0) {
                goto LABEL_61;
              }
              if ((float)(v77 - v80) >= 0.0)
              {
LABEL_68:
                *(void *)((char *)&v894 + v71) = v75;
                goto LABEL_62;
              }
            }
            *(void *)((char *)&v894 + v71) = v79;
LABEL_62:
            v71 += 8;
            v70 += 24;
          }
          while (v74 != v71);
          if (v72 < 9)
          {
            unint64_t v57 = v894;
            goto LABEL_76;
          }
        }
      }
    }
  }
LABEL_96:
  unsigned int v94 = 0;
LABEL_97:
  free(v43);
  int v862 = v94;
  if ((int)v94 >= (int)v27) {
    uint64_t v95 = v27;
  }
  else {
    uint64_t v95 = v94;
  }
  if (v30 >= (int)v95) {
    int v96 = v95;
  }
  else {
    int v96 = v30;
  }
  if (v96 >= v22) {
    int v97 = v22;
  }
  else {
    int v97 = v96;
  }
  if ((int)v95 >= 1)
  {
    BOOL v98 = (int *)(v865 + 4);
    do
    {
      uint64_t v104 = *v98;
      v98 += 2;
      uint64_t v105 = *(int *)(v876[1] + 8 * v104);
      uint64_t v106 = *(void *)(*(void *)(v871 + 8) + 288 * (int)v104);
      uint64_t v107 = v17[1];
      uint64_t v108 = *(void *)v33;
      uint64_t v109 = *((void *)v33 + 2);
      if (*(void *)v33 >= v109)
      {
        uint64_t v110 = 2 * v109;
        BOOL v93 = v109 == 0;
        uint64_t v111 = 32;
        if (!v93) {
          uint64_t v111 = v110;
        }
        if (v111 <= v108) {
          uint64_t v112 = v108 + 1;
        }
        else {
          uint64_t v112 = v111;
        }
        if (v112)
        {
          *((void *)v33 + 1) = malloc_type_realloc(*((void **)v33 + 1), 8 * v112, 0xE7D2178EuLL);
          uint64_t v108 = *(void *)v33;
        }
        *((void *)v33 + 2) = v112;
      }
      *(void *)double v33 = v108 + 1;
      *(void *)(*((void *)v33 + 1) + 8 * v10_Block_object_dispose(&STACK[0x220], 8) = v106;
      uint64_t v113 = *((void *)v33 + 3);
      uint64_t v114 = *((void *)v33 + 5);
      if (v113 >= v114)
      {
        uint64_t v115 = 2 * v114;
        BOOL v93 = v114 == 0;
        uint64_t v116 = 21;
        if (!v93) {
          uint64_t v116 = v115;
        }
        if (v116 <= v113) {
          uint64_t v117 = v113 + 1;
        }
        else {
          uint64_t v117 = v116;
        }
        if (v117)
        {
          *((void *)v33 + 4) = malloc_type_realloc(*((void **)v33 + 4), 12 * v117, 0xCE79F0E5uLL);
          uint64_t v113 = *((void *)v33 + 3);
        }
        *((void *)v33 + 5) = v117;
      }
      uint64_t v118 = (uint64_t *)(v107 + 12 * (int)v105);
      *((void *)v33 + 3) = v113 + 1;
      uint64_t v119 = *((void *)v33 + 4) + 12 * v113;
      uint64_t v120 = *v118;
      *(_DWORD *)(v119 + _Block_object_dispose(&STACK[0x220], 8) = *((_DWORD *)v118 + 2);
      *(void *)uint64_t v119 = v120;
      if (v17[12])
      {
        uint64_t v121 = v17[13];
        uint64_t v122 = *((void *)v33 + 6);
        uint64_t v123 = *((void *)v33 + 8);
        if (v122 >= v123)
        {
          uint64_t v124 = 2 * v123;
          BOOL v93 = v123 == 0;
          uint64_t v125 = 21;
          if (!v93) {
            uint64_t v125 = v124;
          }
          if (v125 <= v122) {
            uint64_t v126 = v122 + 1;
          }
          else {
            uint64_t v126 = v125;
          }
          if (v126)
          {
            *((void *)v33 + 7) = malloc_type_realloc(*((void **)v33 + 7), 12 * v126, 0x448F908FuLL);
            uint64_t v122 = *((void *)v33 + 6);
          }
          *((void *)v33 + _Block_object_dispose(&STACK[0x220], 8) = v126;
        }
        int v99 = (float *)(v121 + 8 * v105);
        *((void *)v33 + 6) = v122 + 1;
        float v100 = (float *)(*((void *)v33 + 7) + 12 * v122);
        float v101 = *v99;
        __float2 v102 = __sincosf_stret(v99[1]);
        __float2 v103 = __sincosf_stret(v101);
        *float v100 = v103.__sinval * v102.__cosval;
        v100[1] = v103.__sinval * v102.__sinval;
        v100[2] = v103.__cosval;
        double v33 = (int *)v845;
      }
      --v95;
    }
    while (v95);
  }
  free(v865);
  printf("Spam : ");
  printf("POSE:  num of matches after lowe: %s%llu / %d, (m: %d), %s", (const char *)&unk_21BB738AE, *(void *)v33, v862, v97, (const char *)&unk_21BB738AE);
  putchar(10);
  int v819 = *v828;
  v881[0] = 0;
  int v127 = *v33;
  float v903 = 0.0;
  memset(v902, 0, sizeof(v902));
  int v128 = v828[6];
  if (v128 <= 1) {
    size_t v129 = 1;
  }
  else {
    size_t v129 = v128;
  }
  int v823 = v129;
  float v130 = (int *)malloc_type_calloc(v129, 0x34uLL, 0x10000403884A0CCuLL);
  float32x2_t v135 = *v815;
  float v136 = v815[1].f32[0];
  if (v822 != 32 && v822 != 1)
  {
    float v145 = 0;
    int v814 = 0;
    int v146 = 3;
    if (v97 > 3) {
      goto LABEL_164;
    }
    goto LABEL_154;
  }
  int v137 = v828[8];
  if (!v137)
  {
    float v145 = 0;
    int v146 = 2;
    int v814 = 1;
    if (v97 > 2) {
      goto LABEL_164;
    }
LABEL_154:
    free(v130);
    free(v145);
    uint64_t v147 = 32;
    unint64_t v148 = v845;
    if (!*(_DWORD *)(v845 + 284)) {
      goto LABEL_488;
    }
    goto LABEL_155;
  }
  if (v137 >= v97) {
    int v138 = v97;
  }
  else {
    int v138 = v828[8];
  }
  float32x2_t v877 = *v815;
  if (v138 <= 0)
  {
    uint64_t v157 = (char *)malloc_type_malloc(0, 0x1000040BDFB0063uLL);
    float32x2_t v135 = v877;
    float v145 = v157;
    int v141 = 0;
    goto LABEL_161;
  }
  unsigned int v139 = v828[9];
  if (v139 <= 1) {
    unsigned int v140 = 1;
  }
  else {
    unsigned int v140 = v828[9];
  }
  if (v138 == 1)
  {
    int v141 = 0;
    unsigned int v142 = 0;
    unsigned int v143 = -v139;
    int v144 = v828[9];
  }
  else
  {
    int v186 = 0;
    int v187 = 0;
    int v188 = 0;
    unsigned int v142 = v138 & 0xFFFFFFFE;
    unsigned int v143 = -v139 - (v138 & 0xFFFFFFFE);
    int v144 = v139 + (v138 & 0xFFFFFFFE);
    int v189 = v139 + 1;
    int v190 = v828[9];
    do
    {
      if (v97 <= v189) {
        int v191 = v189;
      }
      else {
        int v191 = v97;
      }
      unsigned int v192 = v186 + ~v139 + v191;
      v188 += (v192 - (v192 != 0)) / v140;
      if (v192) {
        ++v188;
      }
      if (v97 <= v190) {
        int v193 = v190;
      }
      else {
        int v193 = v97;
      }
      unsigned int v194 = v186 - v139 + v193;
      v187 += (v194 - (v194 != 0)) / v140;
      if (v194) {
        ++v187;
      }
      v186 -= 2;
      v190 += 2;
      v189 += 2;
    }
    while (-(v138 & 0xFFFFFFFE) != v186);
    int v141 = v188 + v187;
    if (v138 == v142) {
      goto LABEL_203;
    }
  }
  unsigned int v195 = v138 - v142;
  do
  {
    if (v97 <= v144) {
      int v196 = v144;
    }
    else {
      int v196 = v97;
    }
    unsigned int v197 = v196 + v143;
    BOOL v93 = v197 == 0;
    int v198 = (v197 - (v197 != 0)) / v140 + v141;
    if (v93) {
      int v141 = v198;
    }
    else {
      int v141 = v198 + 1;
    }
    ++v144;
    --v143;
    --v195;
  }
  while (v195);
LABEL_203:
  float v145 = (char *)malloc_type_malloc(4 * v141, 0x1000040BDFB0063uLL);
  int v199 = 0;
  unsigned int v200 = 0;
  int v201 = 2 * v139;
  int v202 = -2 * v139;
  int16x8_t v131 = vmulq_s16(vdupq_n_s16(v139), (int16x8_t)xmmword_21BB7A7D0);
  int16x8_t v132 = vdupq_n_s16(8 * v139);
  timeval v203 = v145 - 2;
  float32x2_t v135 = v877;
  do
  {
    signed int v204 = v201 + v200;
    if (v97 <= (int)(v201 + v200)) {
      int v205 = v201 + v200;
    }
    else {
      int v205 = v97;
    }
    unsigned int v206 = v205 + v202 - v200;
    signed int v207 = v200 + v139;
    if ((int)(v200 + v139) < v97)
    {
      if (v97 > v204) {
        signed int v204 = v97;
      }
      unsigned int v208 = v204 + v202 - v200;
      BOOL v93 = v208 == 0;
      unsigned int v209 = v208 - (v208 != 0);
      int v210 = v199;
      LODWORD(v211) = v209 / v139;
      if (v93) {
        uint64_t v211 = v211;
      }
      else {
        uint64_t v211 = (v211 + 1);
      }
      if (v211 < 0x27) {
        goto LABEL_229;
      }
      unsigned int v212 = (v206 - (v206 != 0)) / v139 + (v206 != 0);
      int v213 = 2 * v199;
      BOOL v214 = 2 * v199 > (int)(2 * (v199 + v212)) || (int)(((2 * v199) | 1) + 2 * v212) < ((2 * v199) | 1);
      if (v214 || (v212 & 0x80000000) != 0) {
        goto LABEL_229;
      }
      uint64_t v215 = 2 * v213;
      uint64_t v216 = &v145[v215];
      uint64_t v217 = 4 * v212;
      uint64_t v218 = &v145[v215 + v217];
      uint64_t v219 = &v145[v215 + 2];
      BOOL v220 = &v219[v217];
      BOOL v221 = v218 >= v216 && v220 >= v219;
      if (!v221) {
        goto LABEL_229;
      }
      uint64_t v222 = v211 + 1;
      uint64_t v223 = (v211 + 1) & 0x1FFFFFFF0;
      v210 += v223;
      int16x8_t v224 = vdupq_n_s16(v207);
      v207 += v139 * v223;
      int16x8_t v225 = vaddq_s16(v224, v131);
      int8x16_t v133 = (int8x16_t)vdupq_n_s16(v200);
      int v226 = v213 + 17;
      uint64_t v227 = v223;
      do
      {
        v906.val[1] = vaddq_s16(v225, v132);
        uint64_t v228 = (__int16 *)&v203[2 * v226 - 32];
        int32x4_t v134 = (int32x4_t)v225;
        vst2q_s16(v228, *(int16x8x2_t *)v133.i8);
        unint64_t v229 = (__int16 *)&v203[2 * v226];
        v906.val[0] = (int16x8_t)v133;
        vst2q_s16(v229, v906);
        int16x8_t v225 = vaddq_s16(v906.val[1], v132);
        v226 += 32;
        v227 -= 16;
      }
      while (v227);
      if (v222 != v223)
      {
LABEL_229:
        int v230 = 2 * v210;
        do
        {
          *(_WORD *)&v145[2 * v230] = v200;
          *(_WORD *)&v145[2 * v230 + 2] = v207;
          ++v210;
          v207 += v139;
          v230 += 2;
        }
        while (v207 < v97);
      }
      int v199 = v210;
    }
    ++v200;
  }
  while (v200 != v138);
LABEL_161:
  int v158 = *v828;
  if (v141 < *v828) {
    int v158 = v141;
  }
  int v819 = v158;
  int v146 = 2;
  int v814 = 1;
  if (v97 <= 2) {
    goto LABEL_154;
  }
LABEL_164:
  float v818 = (unsigned __int16 *)v145;
  if (v822 != 1)
  {
    float v170 = v135.f32[1];
    v134.i32[0] = v135.i32[0];
    if (v822 != 32)
    {
      float v811 = v136;
      float v812 = v135.f32[0];
      uint64_t v810 = a9;
      if (v819 < 1) {
        goto LABEL_485;
      }
      goto LABEL_251;
    }
    v131.i64[0] = 0;
    v171.f32[0] = (float)(v136 * -0.0) + (float)(v135.f32[1] * 0.0);
    float v172 = v136 + (float)(v135.f32[0] * -0.0);
    float v173 = -(float)(v135.f32[1] - (float)(v135.f32[0] * 0.0));
    float v174 = (float)(v172 * v136) - (float)(v173 * v135.f32[1]);
    float v175 = (float)(v173 * v135.f32[0]) - (float)(v171.f32[0] * v136);
    float v176 = (float)(v171.f32[0] * v135.f32[1]) - (float)(v172 * v135.f32[0]);
    double v177 = sqrt((float)((float)((float)(v175 * v175) + (float)(v174 * v174)) + (float)(v176 * v176)));
    v132.i64[0] = 0;
    v133.i64[0] = 0;
    v134.i64[0] = 0;
    if (v177 > 0.0)
    {
      *(double *)v132.i64 = v174 / v177;
      *(float *)v132.i32 = *(double *)v132.i64;
      *(double *)v133.i64 = v175 / v177;
      *(float *)v133.i32 = *(double *)v133.i64;
      *(double *)v134.i64 = v176 / v177;
      *(float *)v134.i32 = *(double *)v134.i64;
    }
    double v178 = sqrt((float)((float)((float)(v172 * v172) + (float)(v171.f32[0] * v171.f32[0])) + (float)(v173 * v173)));
    float32x2_t v179 = 0;
    uint64_t v180 = 0;
    if (v178 > 0.0)
    {
      v171.f32[1] = v136 + (float)(v135.f32[0] * -0.0);
      uint64_t v180 = (uint64_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(v171), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v178, 0)));
      *(double *)v131.i64 = v173 / v178;
      *(float *)v131.i32 = *(double *)v131.i64;
    }
    double v181 = sqrt((float)((float)((float)(v135.f32[1] * v135.f32[1]) + (float)(v135.f32[0] * v135.f32[0]))
                      + (float)(v136 * v136)));
    float v182 = 0.0;
    float v812 = 0.0;
    if (v181 > 0.0)
    {
      float32x2_t v179 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(v135), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v181, 0)));
      float v182 = v136 / v181;
    }
    v902[0].i64[0] = __PAIR64__(v133.u32[0], v132.u32[0]);
    v902[0].i32[2] = v134.i32[0];
    *(uint64_t *)((char *)&v902[0].i64[1] + 4) = v180;
    v902[1].i32[1] = v131.i32[0];
    *(float32x2_t *)&v902[1].u32[2] = v179;
    float v903 = v182;
    unint64_t v183 = *(void *)v845;
    if (*(uint64_t *)v845 < 1)
    {
      float v811 = 1.0;
      goto LABEL_250;
    }
    unint64_t v184 = *(void *)(v845 + 8);
    if (v183 >= 4)
    {
      float v811 = 1.0;
      if (v184 >= (unint64_t)v904 || (unint64_t)v902 >= v184 + 8 * v183)
      {
        unint64_t v185 = v183 & 0xFFFFFFFFFFFFFFFCLL;
        int16x8_t v131 = 0uLL;
        v132.i64[0] = 0;
        unint64_t v233 = v183 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v234 = *(float **)(v845 + 8);
        do
        {
          float32x4x2_t v905 = vld2q_f32(v234);
          float32x4_t v235 = vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32(v902[0], (float32x4_t)0), 0), v905.val[0], v902[0].f32[1]), v905.val[1], v902[0].f32[2]);
          float32x4_t v236 = vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)&v902[1].u32[2], 0), 0), v905.val[0], v902[1].f32[3]), v905.val[1], v903);
          int8x16_t v133 = (int8x16_t)vdivq_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32(*(float32x4_t *)((char *)v902 + 12), (float32x4_t)0), 0), v905.val[0], v902[1].f32[0]), v905.val[1], v902[1].f32[1]), v235);
          int32x4_t v134 = (int32x4_t)vdivq_f32(v236, v235);
          vst2q_f32(v234, *(float32x4x2_t *)v133.i8);
          v234 += 8;
          v233 -= 4;
        }
        while (v233);
        if (v183 == v185)
        {
LABEL_250:
          float v170 = 0.0;
          uint64_t v810 = a9;
          if (v819 < 1) {
            goto LABEL_485;
          }
          goto LABEL_251;
        }
      }
      else
      {
        unint64_t v185 = 0;
      }
    }
    else
    {
      float v811 = 1.0;
      unint64_t v185 = 0;
    }
    unint64_t v237 = v183 - v185;
    uint64_t v238 = (float *)(v184 + 8 * v185 + 4);
    do
    {
      float v239 = *(v238 - 1);
      *(float *)v133.i32 = (float)((float)(v902[0].f32[0] + 0.0) + (float)(v902[0].f32[1] * v239))
                         + (float)(v902[0].f32[2] * *v238);
      *(float *)v134.i32 = (float)((float)(v902[0].f32[3] + 0.0) + (float)(v902[1].f32[0] * v239))
                         + (float)(v902[1].f32[1] * *v238);
      *(float *)v132.i32 = *(float *)v134.i32 / *(float *)v133.i32;
      float v240 = (float)((float)((float)(v902[1].f32[2] + 0.0) + (float)(v902[1].f32[3] * v239)) + (float)(v903 * *v238))
           / *(float *)v133.i32;
      *(v238 - 1) = *(float *)v134.i32 / *(float *)v133.i32;
      *uint64_t v238 = v240;
      v238 += 2;
      --v237;
    }
    while (v237);
    v131.i32[1] = 0;
    float v812 = 0.0;
    goto LABEL_250;
  }
  float v811 = v136;
  float v160 = v815->f32[1];
  float v159 = v815[1].f32[0];
  float v161 = v815->f32[0];
  float v162 = sqrtf((float)((float)(v159 * v159) + (float)(v160 * v160)) + (float)(v161 * v161));
  v133.i64[0] = 0;
  v132.i64[0] = 0;
  v131.i64[0] = 0;
  if (v162 > 0.0)
  {
    *(float *)v133.i32 = v160 / v162;
    *(float *)v132.i32 = v159 / v162;
    *(float *)v131.i32 = v161 / v162;
  }
  float v163 = (float)(*(float *)v131.i32 * -0.0) + (float)(*(float *)v132.i32 * 0.0);
  float v164 = *(float *)v131.i32 + (float)(*(float *)v133.i32 * -0.0);
  float v165 = -(float)(*(float *)v132.i32 - (float)(*(float *)v133.i32 * 0.0));
  float v166 = (float)((float)(v164 * v164) + (float)(v163 * v163)) + (float)(v165 * v165);
  if (sqrt(v166) <= 0.00001) {
    __assert_rtn("vl_pose_p2p_get_base_from_z", "vl_pose_p2p.c", 107, "g_len3(&ya) > 1e-5 && \"new_z_axis and x_ini are too similar.\"");
  }
  float v167 = sqrtf(v166);
  v134.i64[0] = 0;
  float v168 = 0.0;
  float v169 = 0.0;
  if (v167 > 0.0)
  {
    *(float *)v134.i32 = v163 / v167;
    float v168 = v164 / v167;
    float v169 = v165 / v167;
  }
  v902[0].f32[0] = (float)(v168 * *(float *)v131.i32) - (float)(v169 * *(float *)v132.i32);
  *(uint64_t *)((char *)v902[0].i64 + 4) = __PAIR64__(v133.u32[0], v134.u32[0]);
  v902[0].f32[3] = (float)(v169 * *(float *)v133.i32) - (float)(*(float *)v134.i32 * *(float *)v131.i32);
  *(float *)v133.i32 = (float)(*(float *)v134.i32 * *(float *)v132.i32) - (float)(v168 * *(float *)v133.i32);
  v902[1].i64[0] = __PAIR64__(v132.u32[0], LODWORD(v168));
  v902[1].i64[1] = __PAIR64__(LODWORD(v169), v133.u32[0]);
  float v903 = *(float *)v131.i32;
  float v170 = v135.f32[1];
  float v812 = v135.f32[0];
  uint64_t v810 = a9;
  if (v819 >= 1)
  {
LABEL_251:
    uint64_t v821 = 0;
    int v241 = 0;
    unsigned int v866 = 0;
    unsigned int v813 = v97 - 1;
    *(float *)v131.i32 = (float)v127;
    uint64_t v844 = v130 + 12;
    float v242 = 2.0;
    float v243 = 1.0;
    unint64_t v244 = v845;
    int v245 = v822;
    uint64_t v246 = (float *)v828;
    float v829 = v170;
    int v816 = v146;
    while (1)
    {
      int v820 = v241;
      if (v818)
      {
        int v247 = 0;
        int v248 = v818[(v146 * v821)];
        int v899 = v248;
        int v249 = v818[(v146 * v821 + 1)];
        int v900 = v249;
        if (v245 != 1 && v245 != 32) {
          int v247 = v818[(v146 * v821 + 2)];
        }
        int v901 = v247;
      }
      else
      {
        vl_randperm_int_s(v813, v146, (int32x4_t *)&v899, v881);
        int v248 = v899;
        int v249 = v900;
      }
      uint64_t v250 = *(void *)(v244 + 8);
      uint64_t v251 = *(void *)(v244 + 32);
      uint64_t v252 = (float *)(v250 + 8 * v248);
      uint64_t v253 = (float *)(v250 + 8 * v249);
      uint64_t v254 = (float *)(v251 + 12 * v248);
      switch(v245)
      {
        case 32:
          int v255 = vl_pose_p2p_z(v252, v253, v254, (float *)(v251 + 12 * v249), (uint64_t)&v894);
          if (v255 < 1) {
            goto LABEL_263;
          }
          break;
        case 2:
          int v255 = vl_pose_p3p(v252, v253, (float *)(v250 + 8 * v901), v254, (float *)(v251 + 12 * v249), (float *)(v251 + 12 * v901), (uint64_t)&v894, *(double *)v131.i64, *(double *)v132.i64, v133, (int8x16_t)v134);
          if (v255 < 1)
          {
LABEL_263:
            int v265 = 0;
            goto LABEL_296;
          }
          break;
        case 1:
          int v255 = vl_pose_p2p(v252, v253, v254, (float *)(v251 + 12 * v249), v902[0].f32, (float *)&v894);
          if (v255 < 1) {
            goto LABEL_263;
          }
          break;
        default:
          printf("%sError : ", (const char *)&unk_21BB738AE);
          printf("pose method not recognized");
          putchar(10);
          int v265 = 0;
          goto LABEL_296;
      }
      uint64_t v266 = 0;
      int v265 = 0;
      float v267 = v815[1].f32[1];
      v132.i32[0] = v815[2].i32[0];
      int v268 = v899;
      int v269 = v900;
      int v270 = v901;
      do
      {
        v134.i32[0] = DWORD2(v896);
        v133.i32[0] = DWORD1(v896);
        if ((float)((float)((float)(*((float *)&v896 + 2) - *(float *)v132.i32)
                           * (float)(*((float *)&v896 + 2) - *(float *)v132.i32))
                   + (float)((float)(*((float *)&v896 + 1) - v267) * (float)(*((float *)&v896 + 1) - v267))) <= 6400.0)
        {
          uint64_t v273 = *(void *)(v244 + 32);
          if (!v814)
          {
            uint64_t v274 = (float *)(v273 + 12 * v270);
            float v843 = *v274;
            float v842 = v274[1];
            float v836 = v274[2];
          }
          timeval v275 = (float *)(v273 + 12 * v268);
          float v276 = *v275;
          float v277 = v275[1];
          float v278 = (float *)(v273 + 12 * v269);
          float v279 = *v278;
          float v280 = v278[1];
          double v256 = *(float *)&v894;
          double v257 = *((float *)&v894 + 3);
          *(double *)v258.i64 = *((float *)&v895 + 2);
          *(double *)v262.i64 = *((float *)&v894 + 3) * (float)(v277 - *((float *)&v896 + 2))
                              + *(float *)&v894 * (float)(*v275 - *((float *)&v896 + 1));
          *(float *)v262.i32 = *(double *)v262.i64 + *((float *)&v895 + 2) * (float)(v275[2] - *((float *)&v896 + 3));
          *(double *)v261.i64 = (float)(v278[2] - *((float *)&v896 + 3));
          *(double *)v263.i64 = *((float *)&v894 + 3) * (float)(v280 - *((float *)&v896 + 2));
          *(double *)v260.i64 = *(double *)v263.i64
                              + *(float *)&v894 * (float)(*v278 - *((float *)&v896 + 1))
                              + *((float *)&v895 + 2) * *(double *)v261.i64;
          v261.f32[0] = *(double *)v260.i64;
          if (*(float *)v262.i32 >= v261.f32[0]) {
            float v281 = *(double *)v260.i64;
          }
          else {
            float v281 = *(float *)v262.i32;
          }
          if (*(float *)v262.i32 > v261.f32[0]) {
            v261.f32[0] = *(float *)v262.i32;
          }
          if ((v814 & 1) == 0)
          {
            *(double *)v262.i64 = (float)(v843 - *((float *)&v896 + 1));
            *(double *)v263.i64 = (float)(v842 - *((float *)&v896 + 2));
            *(double *)v259.i64 = (float)(v836 - *((float *)&v896 + 3));
            double v257 = v257 * *(double *)v263.i64;
            double v256 = v257 + v256 * *(double *)v262.i64 + *(double *)v258.i64 * *(double *)v259.i64;
            *(float *)&double v256 = v256;
            if (v281 >= *(float *)&v256) {
              float v281 = *(float *)&v256;
            }
            if (v261.f32[0] <= *(float *)&v256) {
              v261.f32[0] = *(float *)&v256;
            }
          }
          if ((float)(v281 / v261.f32[0]) >= -0.1)
          {
            uint64_t v282 = *(void *)(v244 + 56);
            long long v283 = (float *)(v282 + 12 * v268);
            float v284 = *((float *)&v896 + 1) - v276;
            float v285 = *((float *)&v896 + 2) - v277;
            float v286 = v283[1];
            *(double *)v258.i64 = (float)((float)(v285 * v286) + (float)(v284 * *v283));
            double v256 = *(double *)v258.i64
                 / (sqrt((float)((float)((float)(v285 * v285) + (float)(v284 * v284))
                               * (float)((float)(v286 * v286) + (float)(*v283 * *v283))))
                  + 1.0e-20);
            if (v256 >= 0.258819073)
            {
              long long v287 = (float *)(v282 + 12 * v269);
              float v288 = *((float *)&v896 + 1) - v279;
              float v289 = *((float *)&v896 + 2) - v280;
              float v290 = v287[1];
              *(double *)v258.i64 = (float)((float)(v289 * v290) + (float)(v288 * *v287));
              double v291 = *(double *)v258.i64
                   / (sqrt((float)((float)((float)(v289 * v289) + (float)(v288 * v288))
                                 * (float)((float)(v290 * v290) + (float)(*v287 * *v287))))
                    + 1.0e-20);
              char v292 = v291 < 0.258819073 ? 1 : v814;
              int v293 = v291 >= 0.258819073 ? v814 : 0;
              if ((v292 & 1) == 0
                && (float v294 = (float *)(v282 + 12 * v270),
                    float v295 = v294[1],
                    double v256 = (float)((float)((float)(*((float *)&v896 + 2) - v842) * v295)
                                 + (float)((float)(*((float *)&v896 + 1) - v843) * *v294)),
                    *(float *)v134.i32 = (float)(v295 * v295) + (float)(*v294 * *v294),
                    *(double *)v133.i64 = v256
                                        / (sqrt((float)((float)((float)((float)(*((float *)&v896 + 2) - v842)
                                                                      * (float)(*((float *)&v896 + 2) - v842))
                                                              + (float)((float)(*((float *)&v896 + 1) - v843)
                                                                      * (float)(*((float *)&v896 + 1) - v843)))
                                                      * *(float *)v134.i32))
                                         + 1.0e-20),
                    int v293 = v814,
                    *(double *)v133.i64 >= 0.258819073)
                || v293)
              {
                int v271 = (int8x16_t *)(&v894 + 3 * v265);
                int8x16_t v133 = *(int8x16_t *)((char *)&v894 + v266);
                int32x4_t v134 = *(int32x4_t *)((char *)&v894 + v266 + 16);
                int8x16_t v272 = *(int8x16_t *)((char *)&v896 + v266);
                v271[1] = (int8x16_t)v134;
                v271[2] = v272;
                *int v271 = v133;
                ++v265;
              }
            }
          }
        }
        v266 += 48;
      }
      while (48 * v255 != v266);
LABEL_296:
      int v296 = *(_DWORD *)v244;
      int v297 = *((_DWORD *)v246 + 10);
      if (v297 <= *(_DWORD *)v244 - 100) {
        uint64_t v298 = v297;
      }
      else {
        uint64_t v298 = v296;
      }
      if (v265 >= 1)
      {
        uint64_t v299 = 0;
        int v300 = *((_DWORD *)v246 + 4);
        float v851 = (float)v300;
        int v301 = v296 - v298;
        uint64_t v302 = v265;
        float v849 = (float)(int)v298;
        uint64_t v835 = 8 * (v298 & 0xFFFFFFF8);
        uint64_t v847 = (~v298 + v296);
        uint64_t v848 = (int)v298;
        uint64_t v863 = v298 & 0xFFFFFFF8;
        uint64_t v834 = 3 * v863;
        uint64_t v303 = (v847 + 1) & 0x1FFFFFFF8;
        uint64_t v826 = 8 * v303;
        uint64_t v827 = v847 + 1;
        uint64_t v846 = v303;
        uint64_t v824 = 8 * (int)v298;
        uint64_t v825 = 12 * v303;
        int v837 = v298 - v296;
        uint64_t v841 = v298;
        int v840 = v300;
        int v839 = v296 - v298;
        uint64_t v838 = v302;
        do
        {
          float64x2_t v304 = &v894 + 3 * v299;
          timeval v305 = (float *)v304 + 9;
          timeval v306 = (float *)v304 + 10;
          timeval v307 = (_DWORD *)v304 + 11;
          float v308 = v246[1] * v246[1];
          v9.i32[0] = *(_DWORD *)v304;
          float v309 = *((float *)v304 + 3);
          if (v245 == 32)
          {
            float v310 = *v305;
            float v311 = *v306;
            v10.i32[0] = *((_DWORD *)v304 + 1);
            v133.i32[0] = *((_DWORD *)v304 + 4);
            LODWORD(v264) = *v307;
            if ((int)v298 < 1) {
              goto LABEL_310;
            }
            *(float *)&double v256 = (float)(v309 * v311) + (float)(*(float *)v9.i32 * v310);
            *(float *)&double v257 = (float)(v311 * *(float *)v133.i32) + (float)(*(float *)v10.i32 * v310);
            float v312 = *(const float **)(v244 + 32);
            uint64_t v313 = *(void *)(v244 + 8);
            if (v298 >= 8)
            {
              float v324 = *v305;
              float v325 = *v306;
              timeval v316 = (float *)(v313 + v835);
              timeval v317 = (float *)&v312[v834];
              int16x8_t v132 = v9;
              float32x4_t v326 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
              float32x4_t v259 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v256, 0);
              int32x4_t v134 = v10;
              float32x4_t v260 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
              float32x4_t v261 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v257, 0);
              long long v327 = (const float *)(v313 + 32);
              int32x4_t v262 = 0uLL;
              long long v328 = v264;
              float32x4_t v263 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v264, 0);
              uint64_t v329 = v863;
              int32x4_t v330 = 0uLL;
              do
              {
                timeval v331 = v312;
                float32x4x3_t v926 = vld3q_f32(v331);
                v331 += 12;
                float32x4x3_t v928 = vld3q_f32(v331);
                timeval v332 = v327 - 8;
                float32x4_t v333 = vsubq_f32(vmlaq_f32(vmulq_n_f32(v926.val[1], v309), v926.val[0], v326), v259);
                float32x4x2_t v907 = vld2q_f32(v332);
                float32x4_t v334 = vsubq_f32(vmlaq_f32(vmulq_n_f32(v928.val[1], v309), v928.val[0], v326), v259);
                float32x4x2_t v909 = vld2q_f32(v327);
                float32x4_t v335 = vmlsq_f32(vsubq_f32(vmlaq_f32(vmulq_n_f32(v926.val[1], *(float *)v133.i32), v926.val[0], v260), v261), v333, v907.val[0]);
                v926.val[0] = vmlsq_f32(vsubq_f32(v926.val[2], v263), v333, v907.val[1]);
                v926.val[1] = vmlsq_f32(vsubq_f32(v928.val[2], v263), v334, v909.val[1]);
                float32x4_t v336 = vmlsq_f32(vsubq_f32(vmlaq_f32(vmulq_n_f32(v928.val[1], *(float *)v133.i32), v928.val[0], v260), v261), v334, v909.val[0]);
                int32x4_t v262 = vsubq_s32(v262, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v333, v333), v308), vmlaq_f32(vmulq_f32(v926.val[0], v926.val[0]), v335, v335)), (int8x16_t)vcgtzq_f32(v333)));
                int32x4_t v330 = vsubq_s32(v330, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v334, v334), v308), vmlaq_f32(vmulq_f32(v926.val[1], v926.val[1]), v336, v336)), (int8x16_t)vcgtzq_f32(v334)));
                v312 += 24;
                v327 += 16;
                v329 -= 8;
              }
              while (v329);
              float32x4_t v258 = (float32x4_t)vaddq_s32(v330, v262);
              int v315 = vaddvq_s32((int32x4_t)v258);
              int v314 = v863;
              float v242 = 2.0;
              float v243 = 1.0;
              int16x8_t v9 = v132;
              int32x4_t v10 = v134;
              float v311 = v325;
              float v310 = v324;
              long long v264 = v328;
              if (v863 == v298) {
                goto LABEL_326;
              }
            }
            else
            {
              int v314 = 0;
              int v315 = 0;
              timeval v316 = *(float **)(v244 + 8);
              timeval v317 = *(float **)(v244 + 32);
            }
            int v337 = v298 - v314;
            do
            {
              float v338 = v317[1];
              float v339 = (float)(*(float *)v133.i32 * v338) + (float)(*(float *)v10.i32 * *v317);
              float v340 = (float)((float)(v309 * v338) + (float)(*(float *)v9.i32 * *v317)) - *(float *)&v256;
              float v341 = *v316;
              float v342 = v316[1];
              v316 += 2;
              float v343 = (float)(v317[2] - *(float *)&v264) - (float)(v342 * v340);
              int v344 = (float)((float)(v343 * v343)
                           + (float)((float)((float)(v339 - *(float *)&v257) - (float)(v341 * v340))
                                   * (float)((float)(v339 - *(float *)&v257) - (float)(v341 * v340)))) < (float)(v308 * (float)(v340 * v340));
              if (v340 <= 0.0) {
                int v344 = 0;
              }
              v315 += v344;
              v317 += 3;
              --v337;
            }
            while (v337);
          }
          else
          {
            float v310 = *v305;
            float v311 = *v306;
            LODWORD(v264) = *v307;
            v10.i32[0] = *((_DWORD *)v304 + 1);
            v133.i32[0] = *((_DWORD *)v304 + 4);
            if ((int)v298 < 1)
            {
LABEL_310:
              int v315 = 0;
              goto LABEL_326;
            }
            float v318 = *((float *)v304 + 5);
            LODWORD(v256) = *((_DWORD *)v304 + 6);
            v258.f32[0] = (float)((float)(v309 * v311) + (float)(*(float *)v9.i32 * v310))
                        + (float)(*(float *)&v256 * *(float *)&v264);
            v259.i32[0] = *((_DWORD *)v304 + 7);
            v260.i32[0] = *((_DWORD *)v304 + 8);
            v261.f32[0] = (float)((float)(v311 * *(float *)v133.i32) + (float)(*(float *)v10.i32 * v310))
                        + (float)(v259.f32[0] * *(float *)&v264);
            v262.i32[0] = *((_DWORD *)v304 + 2);
            v263.f32[0] = (float)((float)(v311 * v318) + (float)(*(float *)v262.i32 * v310))
                        + (float)(v260.f32[0] * *(float *)&v264);
            timeval v319 = *(const float **)(v244 + 32);
            uint64_t v320 = *(void *)(v244 + 8);
            if (v298 >= 8)
            {
              long long v853 = v264;
              int32x4_t v856 = v10;
              float v872 = *v305;
              float v878 = *v306;
              long long v322 = (float *)(v320 + v835);
              long long v323 = (float *)&v319[v834];
              int16x8_t v859 = v9;
              float32x4_t v345 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
              float32x4_t v346 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v256, 0);
              float32x4_t v830 = v261;
              float32x4_t v832 = v258;
              float32x4_t v347 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v258.f32, 0);
              float32x4_t v348 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
              float32x4_t v349 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v259.f32, 0);
              float v350 = (const float *)(v320 + 32);
              float32x4_t v351 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v261.f32, 0);
              float32x4_t v352 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v262.i8, 0);
              int32x4_t v353 = 0uLL;
              uint64_t v354 = v863;
              float32x4_t v355 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v260.f32, 0);
              int32x4_t v356 = 0uLL;
              float32x4_t v357 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v263.f32, 0);
              do
              {
                uint64_t v358 = v319;
                float32x4x3_t v919 = vld3q_f32(v358);
                v358 += 12;
                float32x4x3_t v913 = vld3q_f32(v358);
                uint64_t v359 = v350 - 8;
                float32x4_t v360 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v919.val[1], v309), v919.val[0], v345), v919.val[2], v346), v347);
                float32x4_t v361 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v919.val[1], *(float *)v133.i32), v919.val[0], v348), v919.val[2], v349), v351);
                float32x4_t v362 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v913.val[1], v309), v913.val[0], v345), v913.val[2], v346);
                float32x4_t v363 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v913.val[1], *(float *)v133.i32), v913.val[0], v348), v913.val[2], v349);
                float32x4_t v364 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v913.val[1], v318), v913.val[0], v352), v913.val[2], v355);
                *(float32x4x2_t *)v913.val[0].f32 = vld2q_f32(v359);
                v913.val[2] = vsubq_f32(v362, v347);
                float32x4_t v365 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v919.val[1], v318), v919.val[0], v352), v919.val[2], v355), v357);
                *(float32x4x2_t *)v919.val[0].f32 = vld2q_f32(v350);
                float32x4_t v366 = vmlsq_f32(v361, v360, v913.val[0]);
                float32x4_t v367 = vmlsq_f32(v365, v360, v913.val[1]);
                float32x4_t v368 = vmlsq_f32(vsubq_f32(v364, v357), v913.val[2], v919.val[1]);
                float32x4_t v369 = vmlsq_f32(vsubq_f32(v363, v351), v913.val[2], v919.val[0]);
                int32x4_t v134 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v913.val[2], v913.val[2]), v308), vmlaq_f32(vmulq_f32(v368, v368), v369, v369)), (int8x16_t)vcgtzq_f32(v913.val[2]));
                int32x4_t v353 = vsubq_s32(v353, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v360, v360), v308), vmlaq_f32(vmulq_f32(v367, v367), v366, v366)), (int8x16_t)vcgtzq_f32(v360)));
                int32x4_t v356 = vsubq_s32(v356, v134);
                v319 += 24;
                v350 += 16;
                v354 -= 8;
              }
              while (v354);
              int16x8_t v132 = (int16x8_t)vaddq_s32(v356, v353);
              v132.i32[0] = vaddvq_s32((int32x4_t)v132);
              int v315 = v132.i32[0];
              int v321 = v863;
              float v170 = v829;
              float v242 = 2.0;
              float v243 = 1.0;
              int32x4_t v10 = v856;
              int16x8_t v9 = v859;
              float v311 = v878;
              float v310 = v872;
              long long v264 = v853;
              float32x4_t v261 = v830;
              float32x4_t v258 = v832;
              if (v863 == v298) {
                goto LABEL_326;
              }
            }
            else
            {
              int v321 = 0;
              int v315 = 0;
              long long v322 = *(float **)(v244 + 8);
              long long v323 = *(float **)(v244 + 32);
            }
            int v370 = v298 - v321;
            do
            {
              float v371 = v323[1];
              float v372 = v323[2];
              float v373 = (float)((float)((float)(v309 * v371) + (float)(*(float *)v9.i32 * *v323))
                           + (float)(*(float *)&v256 * v372))
                   - v258.f32[0];
              float v374 = (float)(v318 * v371) + (float)(*(float *)v262.i32 * *v323);
              float v375 = (float)((float)((float)(*(float *)v133.i32 * v371) + (float)(*(float *)v10.i32 * *v323))
                           + (float)(v259.f32[0] * v372))
                   - v261.f32[0];
              float v376 = (float)(v374 + (float)(v260.f32[0] * v372)) - v263.f32[0];
              float v377 = *v322;
              float v378 = v322[1];
              v322 += 2;
              *(float *)v132.i32 = (float)((float)(v376 - (float)(v378 * v373)) * (float)(v376 - (float)(v378 * v373)))
                                 + (float)((float)(v375 - (float)(v377 * v373)) * (float)(v375 - (float)(v377 * v373)));
              *(float *)v134.i32 = v308 * (float)(v373 * v373);
              int v379 = *(float *)v132.i32 < *(float *)v134.i32;
              if (v373 <= 0.0) {
                int v379 = 0;
              }
              v315 += v379;
              v323 += 3;
              --v370;
            }
            while (v370);
          }
LABEL_326:
          if ((int)v298 < v296)
          {
            *(float *)v132.i32 = (float)(v315 * v296);
            float v380 = v246[12] * (float)v130[12];
            if (v380 <= v851) {
              float v380 = v851;
            }
            *(float *)v134.i32 = v380 * v849;
            if (*(float *)v134.i32 > *(float *)v132.i32) {
              goto LABEL_302;
            }
          }
          float v381 = v309 * v311;
          float v382 = v311 * *(float *)v133.i32;
          if (v245 == 32)
          {
            if (v301 < 1) {
              goto LABEL_337;
            }
            *(float *)&double v256 = v381 + (float)(*(float *)v9.i32 * v310);
            *(float *)&double v257 = v382 + (float)(*(float *)v10.i32 * v310);
            uint64_t v383 = *(void *)(v244 + 32) + 12 * (int)v848;
            uint64_t v384 = *(void *)(v244 + 8);
            long long v385 = (float *)(v384 + 8 * v848);
            if (v847 < 7)
            {
              int v386 = 0;
              int v387 = 0;
              float32x4_t v388 = (float *)(*(void *)(v244 + 32) + 12 * (int)v848);
LABEL_341:
              int v409 = v837 + v386;
              do
              {
                float v410 = v388[1];
                float v411 = (float)(*(float *)v133.i32 * v410) + (float)(*(float *)v10.i32 * *v388);
                float v412 = (float)((float)(v309 * v410) + (float)(*(float *)v9.i32 * *v388)) - *(float *)&v256;
                float v413 = *v385;
                float v414 = v385[1];
                v385 += 2;
                float v415 = (float)(v388[2] - *(float *)&v264) - (float)(v414 * v412);
                *(float *)v132.i32 = (float)(v415 * v415)
                                   + (float)((float)((float)(v411 - *(float *)&v257) - (float)(v413 * v412))
                                           * (float)((float)(v411 - *(float *)&v257) - (float)(v413 * v412)));
                *(float *)v134.i32 = v308 * (float)(v412 * v412);
                int v416 = *(float *)v132.i32 < *(float *)v134.i32;
                if (v412 <= 0.0) {
                  int v416 = 0;
                }
                v387 += v416;
                v388 += 3;
                BOOL v221 = __CFADD__(v409++, 1);
              }
              while (!v221);
              goto LABEL_355;
            }
            float v873 = v310;
            float v397 = v170;
            float v879 = v311;
            long long v385 = (float *)((char *)v385 + v826);
            float32x4_t v258 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
            float32x4_t v259 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v256, 0);
            float32x4_t v388 = (float *)(v383 + v825);
            float32x4_t v260 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
            float32x4_t v261 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v257, 0);
            timeval v398 = (const float *)(v384 + v824 + 32);
            long long v399 = v264;
            float32x4_t v263 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v264, 0);
            int32x4_t v262 = 0uLL;
            uint64_t v400 = (v847 + 1) & 0x1FFFFFFF8;
            int32x4_t v401 = 0uLL;
            do
            {
              uint64_t v402 = (const float *)v383;
              float32x4x3_t v911 = vld3q_f32(v402);
              v402 += 12;
              float32x4x3_t v927 = vld3q_f32(v402);
              float v403 = v398 - 8;
              float32x4_t v404 = vsubq_f32(vmlaq_f32(vmulq_n_f32(v911.val[1], v309), v911.val[0], v258), v259);
              float32x4x2_t v910 = vld2q_f32(v403);
              float32x4_t v405 = vsubq_f32(vmlaq_f32(vmulq_n_f32(v927.val[1], v309), v927.val[0], v258), v259);
              float32x4x2_t v908 = vld2q_f32(v398);
              float32x4_t v406 = vmlsq_f32(vsubq_f32(vmlaq_f32(vmulq_n_f32(v911.val[1], *(float *)v133.i32), v911.val[0], v260), v261), v404, v910.val[0]);
              v911.val[0] = vmlsq_f32(vsubq_f32(v911.val[2], v263), v404, v910.val[1]);
              v911.val[1] = vmlsq_f32(vsubq_f32(v927.val[2], v263), v405, v908.val[1]);
              float32x4_t v407 = vmlsq_f32(vsubq_f32(vmlaq_f32(vmulq_n_f32(v927.val[1], *(float *)v133.i32), v927.val[0], v260), v261), v405, v908.val[0]);
              int32x4_t v408 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v404, v404), v308), vmlaq_f32(vmulq_f32(v911.val[0], v911.val[0]), v406, v406)), (int8x16_t)vcgtzq_f32(v404));
              int32x4_t v134 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v405, v405), v308), vmlaq_f32(vmulq_f32(v911.val[1], v911.val[1]), v407, v407)), (int8x16_t)vcgtzq_f32(v405));
              int32x4_t v262 = vsubq_s32(v262, v408);
              int32x4_t v401 = vsubq_s32(v401, v134);
              v383 += 96;
              v398 += 16;
              v400 -= 8;
            }
            while (v400);
            int16x8_t v132 = (int16x8_t)vaddq_s32(v401, v262);
            int v387 = vaddvq_s32((int32x4_t)v132);
            int v386 = (v847 + 1) & 0xFFFFFFF8;
            float v311 = v879;
            *(float *)v132.i32 = v397;
            float v243 = 1.0;
            float v310 = v873;
            long long v264 = v399;
            float v170 = *(float *)v132.i32;
            if (v827 != v846) {
              goto LABEL_341;
            }
          }
          else
          {
            if (v301 < 1)
            {
LABEL_337:
              int v387 = 0;
              goto LABEL_355;
            }
            float v389 = v381 + (float)(*(float *)v9.i32 * v310);
            float v390 = *((float *)v304 + 5);
            LODWORD(v256) = *((_DWORD *)v304 + 6);
            v258.f32[0] = v389 + (float)(*(float *)&v256 * *(float *)&v264);
            float v391 = v382 + (float)(*(float *)v10.i32 * v310);
            v259.i32[0] = *((_DWORD *)v304 + 7);
            v260.i32[0] = *((_DWORD *)v304 + 8);
            v261.f32[0] = v391 + (float)(v259.f32[0] * *(float *)&v264);
            v262.i32[0] = *((_DWORD *)v304 + 2);
            v263.f32[0] = (float)((float)(v311 * v390) + (float)(*(float *)v262.i32 * v310))
                        + (float)(v260.f32[0] * *(float *)&v264);
            uint64_t v392 = *(void *)(v244 + 32) + 12 * (int)v848;
            uint64_t v393 = *(void *)(v244 + 8);
            float64x2_t v394 = (float *)(v393 + 8 * v848);
            if (v847 < 7)
            {
              int v395 = 0;
              int v387 = 0;
              timeval v396 = (float *)(*(void *)(v244 + 32) + 12 * (int)v848);
LABEL_350:
              int v441 = v837 + v395;
              do
              {
                float v442 = v396[1];
                float v443 = v396[2];
                float v444 = (float)((float)((float)(v309 * v442) + (float)(*(float *)v9.i32 * *v396))
                             + (float)(*(float *)&v256 * v443))
                     - v258.f32[0];
                float v445 = (float)(v390 * v442) + (float)(*(float *)v262.i32 * *v396);
                float v446 = (float)((float)((float)(*(float *)v133.i32 * v442) + (float)(*(float *)v10.i32 * *v396))
                             + (float)(v259.f32[0] * v443))
                     - v261.f32[0];
                float v447 = (float)(v445 + (float)(v260.f32[0] * v443)) - v263.f32[0];
                float v448 = *v394;
                float v449 = v394[1];
                v394 += 2;
                *(float *)v132.i32 = (float)((float)(v447 - (float)(v449 * v444)) * (float)(v447 - (float)(v449 * v444)))
                                   + (float)((float)(v446 - (float)(v448 * v444)) * (float)(v446 - (float)(v448 * v444)));
                *(float *)v134.i32 = v308 * (float)(v444 * v444);
                int v450 = *(float *)v132.i32 < *(float *)v134.i32;
                if (v444 <= 0.0) {
                  int v450 = 0;
                }
                v387 += v450;
                v396 += 3;
                BOOL v221 = __CFADD__(v441++, 1);
              }
              while (!v221);
              goto LABEL_355;
            }
            long long v854 = v264;
            int32x4_t v857 = v10;
            float v874 = v310;
            float v880 = v311;
            float64x2_t v394 = (float *)((char *)v394 + v826);
            int16x8_t v860 = v9;
            float32x4_t v417 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
            float32x4_t v418 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v256, 0);
            float32x4_t v831 = v261;
            float32x4_t v833 = v258;
            float32x4_t v419 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v258.f32, 0);
            timeval v396 = (float *)(v392 + v825);
            float32x4_t v420 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
            float32x4_t v421 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v259.f32, 0);
            float v422 = (const float *)(v393 + v824 + 32);
            float32x4_t v423 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v261.f32, 0);
            float32x4_t v424 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v262.i8, 0);
            int32x4_t v425 = 0uLL;
            uint64_t v426 = (v847 + 1) & 0x1FFFFFFF8;
            float32x4_t v427 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v260.f32, 0);
            int32x4_t v428 = 0uLL;
            float32x4_t v429 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v263.f32, 0);
            do
            {
              float v430 = (const float *)v392;
              float32x4x3_t v912 = vld3q_f32(v430);
              v430 += 12;
              float32x4x3_t v920 = vld3q_f32(v430);
              float v431 = v422 - 8;
              float32x4_t v432 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v912.val[1], v309), v912.val[0], v417), v912.val[2], v418), v419);
              float32x4_t v433 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v912.val[1], *(float *)v133.i32), v912.val[0], v420), v912.val[2], v421), v423);
              float32x4_t v434 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v912.val[1], v390), v912.val[0], v424), v912.val[2], v427);
              float32x4_t v435 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v920.val[1], *(float *)v133.i32), v920.val[0], v420), v920.val[2], v421);
              float32x4_t v436 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v920.val[1], v390), v920.val[0], v424), v920.val[2], v427);
              *(float32x4x2_t *)v912.val[0].f32 = vld2q_f32(v431);
              v912.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v920.val[1], v309), v920.val[0], v417), v920.val[2], v418), v419);
              *(float32x4x2_t *)v920.val[0].f32 = vld2q_f32(v422);
              float32x4_t v437 = vmlsq_f32(v433, v432, v912.val[0]);
              float32x4_t v438 = vmlsq_f32(vsubq_f32(v434, v429), v432, v912.val[1]);
              float32x4_t v439 = vmlsq_f32(vsubq_f32(v436, v429), v912.val[2], v920.val[1]);
              float32x4_t v440 = vmlsq_f32(vsubq_f32(v435, v423), v912.val[2], v920.val[0]);
              int32x4_t v134 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v912.val[2], v912.val[2]), v308), vmlaq_f32(vmulq_f32(v439, v439), v440, v440)), (int8x16_t)vcgtzq_f32(v912.val[2]));
              int32x4_t v425 = vsubq_s32(v425, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v432, v432), v308), vmlaq_f32(vmulq_f32(v438, v438), v437, v437)), (int8x16_t)vcgtzq_f32(v432)));
              int32x4_t v428 = vsubq_s32(v428, v134);
              v392 += 96;
              v422 += 16;
              v426 -= 8;
            }
            while (v426);
            int16x8_t v132 = (int16x8_t)vaddq_s32(v428, v425);
            v132.i32[0] = vaddvq_s32((int32x4_t)v132);
            int v387 = v132.i32[0];
            int v395 = (v847 + 1) & 0xFFFFFFF8;
            float v170 = v829;
            float v242 = 2.0;
            float v243 = 1.0;
            int32x4_t v10 = v857;
            int16x8_t v9 = v860;
            float v311 = v880;
            float v310 = v874;
            long long v264 = v854;
            float32x4_t v261 = v831;
            float32x4_t v258 = v833;
            if (v827 != v846) {
              goto LABEL_350;
            }
          }
LABEL_355:
          int v451 = v387 + v315;
          if (v387 + v315 < v130[12] || v451 < v300) {
            goto LABEL_302;
          }
          double v891 = v310;
          double v892 = v311;
          double v893 = *(float *)&v264;
          *(double *)v134.i64 = *(float *)v10.i32;
          *(double *)&long long v887 = *(float *)v9.i32;
          *((double *)&v887 + 1) = *(float *)v10.i32;
          *((double *)&v888 + 1) = v309;
          *(double *)v889 = *(float *)v133.i32;
          *(double *)&long long v888 = *((float *)v304 + 2);
          *(float64x2_t *)&v889[8] = vcvtq_f64_f32(*(float32x2_t *)((char *)v304 + 20));
          float64x2_t v890 = vcvtq_f64_f32(*(float32x2_t *)((char *)v304 + 28));
          if ((int)v866 >= 1)
          {
            uint64_t v453 = 0;
            char v454 = 0;
LABEL_361:
            float v455 = (float *)v844 + 13 * v453;
            while (1)
            {
              double v884 = *(v455 - 3);
              double v885 = *(v455 - 2);
              double v886 = *(v455 - 1);
              v882[0] = vcvtq_f64_f32(*(float32x2_t *)(v455 - 12));
              v882[3] = vcvtq_f64_f32(*(float32x2_t *)(v455 - 6));
              v882[1] = vcvtq_f64_f32(*(float32x2_t *)(v455 - 10));
              v882[2] = vcvtq_f64_f32(*(float32x2_t *)(v455 - 8));
              double v883 = *(v455 - 4);
              float v456 = (v891 - v884) * (v891 - v884) + 0.0;
              float v457 = v456 + (v892 - v885) * (v892 - v885);
              float v458 = v457 + (v893 - v886) * (v893 - v886);
              float v459 = sqrtf(v458);
              *(double *)v131.i64 = g_coords_angle_diff((double *)&v887, (double *)v882);
              *(float *)v131.i32 = *(double *)v131.i64;
              v132.i32[0] = 1024391733;
              if (v459 < v242 && *(float *)v131.i32 < 0.034907)
              {
                if (*(_DWORD *)v455 >= v451)
                {
                  ++v453;
                  char v454 = 1;
                  if (v453 < v866) {
                    goto LABEL_361;
                  }
LABEL_373:
                  if (v866 <= 1uLL) {
                    unint64_t v461 = 1;
                  }
                  else {
                    unint64_t v461 = v866;
                  }
                  if (v461 < 2)
                  {
                    uint64_t v462 = 0;
                    unint64_t v244 = v845;
                    int v245 = v822;
                    uint64_t v246 = (float *)v828;
                    uint64_t v298 = v841;
                    int v300 = v840;
                    int v301 = v839;
                    uint64_t v302 = v838;
LABEL_394:
                    uint64_t v481 = v461 - v462;
                    float v482 = (_DWORD *)v844 + 13 * v462;
                    do
                    {
                      *v482 &= ~0x80000000;
                      v482 += 13;
                      --v481;
                    }
                    while (v481);
                    goto LABEL_302;
                  }
                  uint64_t v462 = v461 & 0xFFFFFFFE;
                  uint64_t v478 = v462;
                  float v479 = v130 + 25;
                  unint64_t v244 = v845;
                  int v245 = v822;
                  uint64_t v246 = (float *)v828;
                  uint64_t v298 = v841;
                  int v300 = v840;
                  int v301 = v839;
                  uint64_t v302 = v838;
                  do
                  {
                    int v480 = *v479 & 0x7FFFFFFF;
                    *(v479 - 13) &= ~0x80000000;
                    *float v479 = v480;
                    v479 += 26;
                    v478 -= 2;
                  }
                  while (v478);
                  if (v461 != v462) {
                    goto LABEL_394;
                  }
                  goto LABEL_302;
                }
                *(_DWORD *)v455 |= 0x80000000;
              }
              ++v453;
              v455 += 13;
              if (v453 >= v866)
              {
                if (v454) {
                  goto LABEL_373;
                }
                unint64_t v464 = 0;
                int v463 = 0;
                float v465 = v130;
                int v245 = v822;
                uint64_t v246 = (float *)v828;
                do
                {
                  while (v465[12] < 0)
                  {
                    ++v464;
                    v465 += 13;
                    if (v464 >= v866) {
                      goto LABEL_383;
                    }
                  }
                  float v466 = &v130[13 * v463];
                  long long v467 = *(_OWORD *)v465;
                  long long v468 = *((_OWORD *)v465 + 1);
                  long long v469 = *((_OWORD *)v465 + 2);
                  v466[12] = v465[12];
                  *((_OWORD *)v466 + 1) = v468;
                  *((_OWORD *)v466 + 2) = v469;
                  *(_OWORD *)float v466 = v467;
                  ++v463;
                  ++v464;
                  v465 += 13;
                }
                while (v464 < v866);
                goto LABEL_383;
              }
            }
          }
          int v463 = 0;
LABEL_383:
          if (v463 >= v823) {
            int v470 = v463;
          }
          else {
            int v470 = v463 + 1;
          }
          float v471 = &v130[13 * v470];
          int16x8_t v131 = (int16x8_t)*v304;
          int16x8_t v132 = (int16x8_t)v304[1];
          int8x16_t v133 = (int8x16_t)v304[2];
          *(int8x16_t *)(v471 - 5) = v133;
          *(int16x8_t *)(v471 - 9) = v132;
          *(int16x8_t *)(v471 - 13) = v131;
          *(v471 - 1) = v451;
          unsigned int v866 = v470;
          if (v470 <= 1)
          {
            unint64_t v244 = v845;
            uint64_t v298 = v841;
            int v300 = v840;
            int v301 = v839;
            uint64_t v302 = v838;
          }
          else
          {
            unint64_t v244 = v845;
            uint64_t v298 = v841;
            int v300 = v840;
            int v301 = v839;
            uint64_t v302 = v838;
            do
            {
              unsigned int v472 = v470 - 1;
              unsigned int v473 = v470 - 2;
              if (v130[13 * v473 + 12] >= v130[13 * v472 + 12]) {
                break;
              }
              float v474 = (int16x8_t *)&v130[13 * v473];
              __int32 v475 = v474[3].i32[0];
              int16x8_t v132 = v474[1];
              int16x8_t v131 = v474[2];
              int8x16_t v133 = *(int8x16_t *)v474;
              float v476 = &v130[13 * v472];
              int16x8_t v477 = *((int16x8_t *)v476 + 1);
              *float v474 = *(int16x8_t *)v476;
              v474[1] = v477;
              int32x4_t v134 = *((int32x4_t *)v476 + 2);
              v474[2] = (int16x8_t)v134;
              v474[3].i32[0] = v476[12];
              *(int8x16_t *)float v476 = v133;
              *((int16x8_t *)v476 + 1) = v132;
              *((int16x8_t *)v476 + 2) = v131;
              v476[12] = v475;
              int v470 = v472;
            }
            while (v472 > 1);
          }
LABEL_302:
          ++v299;
        }
        while (v299 != v302);
      }
      v131.i32[0] = (__int32)v246[5];
      int v241 = v130[12];
      if (*(float *)v131.i32 < v243 && v820 < v241)
      {
        *(float *)v133.i32 = (float)v241 / (float)v127;
        float v484 = 1.0;
        int v146 = v816;
        unsigned int v485 = v816;
        do
        {
          if (v485) {
            v134.i32[0] = v133.i32[0];
          }
          else {
            *(float *)v134.i32 = v243;
          }
          float v484 = v484 * *(float *)v134.i32;
          *(float *)v133.i32 = *(float *)v133.i32 * *(float *)v133.i32;
          BOOL v214 = v485 > 1;
          v485 >>= 1;
        }
        while (v214);
        float v486 = v243 - v484;
        v132.i32[0] = 1065353199;
        if (v486 < 1.0)
        {
          float v487 = log2f(v243 - *(float *)v131.i32);
          *(float *)v131.i32 = ceilf(v487 / log2f(v486));
          if (*(float *)v131.i32 > (float)v819) {
            *(float *)v131.i32 = (float)v819;
          }
          int v819 = (int)*(float *)v131.i32;
        }
      }
      else
      {
        int v146 = v816;
      }
      if (++v821 >= v819)
      {
        if (!*((_DWORD *)v246 + 6) || (int)v866 < 1) {
          break;
        }
        uint64_t v488 = 0;
        float v850 = (float)((float)(v170 * v170) + (float)(v812 * v812)) + (float)(v811 * v811);
        uint64_t v864 = v866;
        uint64_t v489 = 52 * v866;
        double v490 = 1.0;
        float v491 = -1.0;
        float v492 = "isual localization is not supported on this device";
LABEL_415:
        unint64_t v493 = 0;
        do
        {
          float v518 = (float *)&v130[v493 / 4];
          float v519 = *(float *)&v130[v493 / 4 + 6];
          if (fabs(v519) < v490)
          {
            long double v494 = v518[8];
            long double v495 = v518[7];
            long double v496 = v518[3];
            long double v497 = *v518;
            double v498 = asin(-v519);
            double v499 = atan2(v496, v497);
            double v500 = atan2(v495, v494);
          }
          else
          {
            long double v520 = v518[1];
            long double v521 = v518[2];
            if (v519 <= v491)
            {
              double v499 = 0.0;
              double v500 = atan2(v520, v521) + 0.0;
              double v498 = 1.57079633;
            }
            else
            {
              double v500 = atan2(-v520, -v521);
              double v499 = 0.0;
              double v498 = *((double *)v492 + 165);
            }
          }
          __double2 v501 = __sincos_stret(v499);
          __double2 v502 = __sincos_stret(v498);
          __double2 v506 = __sincos_stret(v500);
          double v512 = v502.__sinval * v501.__cosval * v506.__sinval - v501.__sinval * v506.__cosval;
          double v510 = v502.__cosval * v501.__sinval;
          double v507 = v501.__cosval * v506.__cosval + v502.__sinval * v501.__sinval * v506.__sinval;
          double v508 = v502.__sinval * v501.__sinval * v506.__cosval - v501.__cosval * v506.__sinval;
          float v509 = v502.__cosval * v501.__cosval;
          *(float *)&double v510 = v502.__cosval * v501.__sinval;
          float sinval = v502.__sinval;
          *(float *)&double v512 = v512;
          *float v518 = v509;
          v518[1] = *(float *)&v512;
          float v513 = v507;
          float v514 = v502.__cosval * v506.__sinval;
          v518[6] = -sinval;
          v518[7] = v514;
          float v515 = v501.__sinval * v506.__sinval + v502.__sinval * v501.__cosval * v506.__cosval;
          v518[2] = v515;
          v518[3] = *(float *)&v510;
          float v516 = v508;
          v518[4] = v513;
          v518[5] = v516;
          float v517 = v502.__cosval * v506.__cosval;
          v518[8] = v517;
          v493 += 52;
        }
        while (v489 != v493);
        float v522 = v492;
        float v523 = &v130[13 * v488];
        float v524 = *((float *)v828 + 1);
        long long v897 = 0u;
        long long v898 = 0u;
        long long v895 = 0u;
        long long v896 = 0u;
        long long v894 = 0u;
        long long v526 = *((_OWORD *)v523 + 1);
        long long v525 = *((_OWORD *)v523 + 2);
        long long v527 = *(_OWORD *)v523;
        long long v887 = *(_OWORD *)v523;
        long long v888 = v526;
        *(_OWORD *)v889 = v525;
        unint64_t v528 = *(void *)v845;
        float32x4_t v875 = (float32x4_t)vdupq_n_s32(0x378637BEu);
        if ((int)*(void *)v845 < 1)
        {
          int v532 = 0;
        }
        else
        {
          LODWORD(v525) = HIDWORD(v887);
          LODWORD(v526) = DWORD2(v887);
          LODWORD(v512) = DWORD1(v887);
          LODWORD(v527) = v887;
          LODWORD(v510) = *(_DWORD *)v889;
          LODWORD(v507) = HIDWORD(v888);
          LODWORD(v50_Block_object_dispose(&STACK[0x220], 8) = DWORD2(v888);
          *(float *)v503.i32 = (float)((float)(*((float *)&v887 + 3) * *(float *)&v889[8])
                                     + (float)(*(float *)&v887 * *(float *)&v889[4]))
                             + (float)(*((float *)&v888 + 2) * *(float *)&v889[12]);
          *(float *)v504.i32 = (float)((float)(*(float *)&v889[8] * *(float *)&v888)
                                     + (float)(*((float *)&v887 + 1) * *(float *)&v889[4]))
                             + (float)(*((float *)&v888 + 3) * *(float *)&v889[12]);
          *(float *)v505.i32 = (float)((float)(*(float *)&v889[8] * *((float *)&v888 + 1))
                                     + (float)(*((float *)&v887 + 2) * *(float *)&v889[4]))
                             + (float)(*(float *)v889 * *(float *)&v889[12]);
          float v529 = *(const float **)(v845 + 32);
          uint64_t v530 = *(void *)(v845 + 8);
          if (*(void *)v845 >= 8uLL)
          {
            float v867 = v524;
            int v531 = v528 & 0xFFFFFFF8;
            float v533 = (float *)(v530 + 8 * (*(void *)v845 & 0xFFFFFFF8));
            float v534 = (float *)&v529[3 * (*(void *)v845 & 0xFFFFFFF8)];
            float32x4_t v535 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v527, 0);
            float32x4_t v536 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v508, 0);
            float32x4_t v537 = (float32x4_t)vdupq_lane_s32(v503, 0);
            float32x4_t v538 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v512, 0);
            float32x4_t v539 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v507, 0);
            float v540 = (const float *)(v530 + 32);
            float32x4_t v541 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v504.i8, 0);
            float32x4_t v542 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v526, 0);
            v504.i64[0] = 0;
            v504.i64[1] = 0;
            uint64_t v543 = *(void *)v845 & 0xFFFFFFF8;
            float32x4_t v544 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v510, 0);
            int32x4_t v545 = 0uLL;
            float32x4_t v546 = (float32x4_t)vdupq_lane_s32(v505, 0);
            do
            {
              int v547 = v529;
              float32x4x3_t v914 = vld3q_f32(v547);
              v547 += 12;
              float32x4x3_t v921 = vld3q_f32(v547);
              int v548 = v540 - 8;
              float32x4_t v549 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v914.val[1], *((float *)&v887 + 3)), v914.val[0], v535), v914.val[2], v536), v537);
              float32x4_t v550 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v914.val[1], *(float *)&v888), v914.val[0], v538), v914.val[2], v539), v541);
              float32x4_t v551 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v914.val[1], *((float *)&v888 + 1)), v914.val[0], v542), v914.val[2], v544);
              float32x4_t v552 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v921.val[1], *(float *)&v888), v921.val[0], v538), v921.val[2], v539);
              float32x4_t v553 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v921.val[1], *((float *)&v888 + 1)), v921.val[0], v542), v921.val[2], v544);
              *(float32x4x2_t *)v914.val[0].f32 = vld2q_f32(v548);
              v914.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v921.val[1], *((float *)&v887 + 3)), v921.val[0], v535), v921.val[2], v536), v537);
              *(float32x4x2_t *)v921.val[0].f32 = vld2q_f32(v540);
              float32x4_t v554 = vmlsq_f32(v550, v549, v914.val[0]);
              float32x4_t v555 = vmlsq_f32(vsubq_f32(v551, v546), v549, v914.val[1]);
              float32x4_t v556 = vmlsq_f32(vsubq_f32(v553, v546), v914.val[2], v921.val[1]);
              float32x4_t v557 = vmlsq_f32(vsubq_f32(v552, v541), v914.val[2], v921.val[0]);
              int32x4_t v504 = vsubq_s32(v504, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v549, v549), v875), vmlaq_f32(vmulq_f32(v555, v555), v554, v554)), (int8x16_t)vcgtzq_f32(v549)));
              int32x4_t v545 = vsubq_s32(v545, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v914.val[2], v914.val[2]), v875), vmlaq_f32(vmulq_f32(v556, v556), v557, v557)), (int8x16_t)vcgtzq_f32(v914.val[2])));
              v529 += 24;
              v540 += 16;
              v543 -= 8;
            }
            while (v543);
            int v532 = vaddvq_s32(vaddq_s32(v545, v504));
            float v170 = v829;
            double v490 = 1.0;
            float v491 = -1.0;
            float v524 = v867;
            *(float *)v503.i32 = (float)((float)(*((float *)&v887 + 3) * *(float *)&v889[8])
                                       + (float)(*(float *)&v887 * *(float *)&v889[4]))
                               + (float)(*((float *)&v888 + 2) * *(float *)&v889[12]);
            *(float *)v505.i32 = (float)((float)(*(float *)&v889[8] * *((float *)&v888 + 1))
                                       + (float)(*((float *)&v887 + 2) * *(float *)&v889[4]))
                               + (float)(*(float *)v889 * *(float *)&v889[12]);
            *(float *)v504.i32 = (float)((float)(*(float *)&v889[8] * *(float *)&v888)
                                       + (float)(*((float *)&v887 + 1) * *(float *)&v889[4]))
                               + (float)(*((float *)&v888 + 3) * *(float *)&v889[12]);
            if ((v528 & 7) != 0) {
              goto LABEL_429;
            }
          }
          else
          {
            int v531 = 0;
            int v532 = 0;
            float v533 = *(float **)(v845 + 8);
            float v534 = *(float **)(v845 + 32);
LABEL_429:
            int v558 = v528 - v531;
            do
            {
              float v559 = v534[1];
              float v560 = v534[2];
              float v561 = (float)((float)((float)(*((float *)&v887 + 3) * v559) + (float)(*(float *)&v887 * *v534))
                           + (float)(*((float *)&v888 + 2) * v560))
                   - *(float *)v503.i32;
              float v562 = (float)((float)(*((float *)&v888 + 1) * v559) + (float)(*((float *)&v887 + 2) * *v534))
                   + (float)(*(float *)v889 * v560);
              float v563 = (float)((float)((float)(*(float *)&v888 * v559) + (float)(*((float *)&v887 + 1) * *v534))
                           + (float)(*((float *)&v888 + 3) * v560))
                   - *(float *)v504.i32;
              float v564 = *v533;
              float v565 = v533[1];
              v533 += 2;
              int v566 = (float)((float)((float)((float)(v562 - *(float *)v505.i32) - (float)(v565 * v561))
                                   * (float)((float)(v562 - *(float *)v505.i32) - (float)(v565 * v561)))
                           + (float)((float)(v563 - (float)(v564 * v561)) * (float)(v563 - (float)(v564 * v561)))) < (float)((float)(v561 * v561) * 0.000016);
              if (v561 <= 0.0) {
                int v566 = 0;
              }
              v532 += v566;
              v534 += 3;
              --v558;
            }
            while (v558);
          }
        }
        float v567 = &v130[13 * v488];
        v567[12] = v532;
        float v568 = v567 + 12;
        vl_pose_count_inliers((uint64_t)&v887, (uint64_t *)v845, v817, 0, (uint64_t)&v894, v524, *(double *)&v525, *(double *)&v526, *(double *)&v527, v512, v510);
        float v569 = vl_pose_refine((float32x2_t *)&v887, (uint64_t)&v894, (uint64_t *)&v895 + 1, 2, (float32x2_t *)&v887, 0, 1.0, 0.0, 0.0);
        uint64_t v579 = *(void *)v845;
        if ((int)*(void *)v845 < 1)
        {
          int v583 = 0;
        }
        else
        {
          v576.i32[0] = DWORD2(v887);
          LODWORD(v571) = DWORD1(v887);
          v570.i32[0] = v887;
          LODWORD(v572) = *(_DWORD *)v889;
          v574.i32[0] = HIDWORD(v888);
          v573.i32[0] = DWORD2(v888);
          *(float *)v575.i32 = (float)((float)(*((float *)&v887 + 3) * *(float *)&v889[8])
                                     + (float)(*(float *)&v887 * *(float *)&v889[4]))
                             + (float)(*((float *)&v888 + 2) * *(float *)&v889[12]);
          *(float *)v577.i32 = (float)((float)(*(float *)&v889[8] * *(float *)&v888)
                                     + (float)(*((float *)&v887 + 1) * *(float *)&v889[4]))
                             + (float)(*((float *)&v888 + 3) * *(float *)&v889[12]);
          *(float *)v578.i32 = (float)((float)(*(float *)&v889[8] * *((float *)&v888 + 1))
                                     + (float)(*((float *)&v887 + 2) * *(float *)&v889[4]))
                             + (float)(*(float *)v889 * *(float *)&v889[12]);
          float v580 = *(const float **)(v845 + 32);
          uint64_t v581 = *(void *)(v845 + 8);
          if (*(void *)v845 >= 8uLL)
          {
            float v868 = v569;
            int v582 = v579 & 0xFFFFFFF8;
            float v584 = (float *)(v581 + 8 * (*(void *)v845 & 0xFFFFFFF8));
            float v585 = (float *)&v580[3 * (*(void *)v845 & 0xFFFFFFF8)];
            float32x4_t v586 = (float32x4_t)vdupq_lane_s32(v570, 0);
            float32x4_t v587 = (float32x4_t)vdupq_lane_s32(v573, 0);
            float32x4_t v588 = (float32x4_t)vdupq_lane_s32(v575, 0);
            float32x4_t v589 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v571, 0);
            float32x4_t v590 = (float32x4_t)vdupq_lane_s32(v574, 0);
            float v591 = (const float *)(v581 + 32);
            float32x4_t v592 = (float32x4_t)vdupq_lane_s32(v577, 0);
            float32x4_t v593 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v576.i8, 0);
            int32x4_t v576 = 0uLL;
            uint64_t v594 = *(void *)v845 & 0xFFFFFFF8;
            float32x4_t v595 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v572, 0);
            int32x4_t v596 = 0uLL;
            float32x4_t v597 = (float32x4_t)vdupq_lane_s32(v578, 0);
            do
            {
              v598 = v580;
              float32x4x3_t v915 = vld3q_f32(v598);
              v598 += 12;
              float32x4x3_t v922 = vld3q_f32(v598);
              float v599 = v591 - 8;
              float32x4_t v600 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v915.val[1], *((float *)&v887 + 3)), v915.val[0], v586), v915.val[2], v587), v588);
              float32x4_t v601 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v915.val[1], *(float *)&v888), v915.val[0], v589), v915.val[2], v590), v592);
              float32x4_t v602 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v915.val[1], *((float *)&v888 + 1)), v915.val[0], v593), v915.val[2], v595);
              float32x4_t v603 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v922.val[1], *(float *)&v888), v922.val[0], v589), v922.val[2], v590);
              float32x4_t v604 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v922.val[1], *((float *)&v888 + 1)), v922.val[0], v593), v922.val[2], v595);
              *(float32x4x2_t *)v915.val[0].f32 = vld2q_f32(v599);
              v915.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v922.val[1], *((float *)&v887 + 3)), v922.val[0], v586), v922.val[2], v587), v588);
              *(float32x4x2_t *)v922.val[0].f32 = vld2q_f32(v591);
              float32x4_t v605 = vmlsq_f32(v601, v600, v915.val[0]);
              float32x4_t v606 = vmlsq_f32(vsubq_f32(v602, v597), v600, v915.val[1]);
              float32x4_t v607 = vmlsq_f32(vsubq_f32(v604, v597), v915.val[2], v922.val[1]);
              float32x4_t v608 = vmlsq_f32(vsubq_f32(v603, v592), v915.val[2], v922.val[0]);
              int32x4_t v576 = vsubq_s32(v576, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v600, v600), v875), vmlaq_f32(vmulq_f32(v606, v606), v605, v605)), (int8x16_t)vcgtzq_f32(v600)));
              int32x4_t v596 = vsubq_s32(v596, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v915.val[2], v915.val[2]), v875), vmlaq_f32(vmulq_f32(v607, v607), v608, v608)), (int8x16_t)vcgtzq_f32(v915.val[2])));
              v580 += 24;
              v591 += 16;
              v594 -= 8;
            }
            while (v594);
            int v583 = vaddvq_s32(vaddq_s32(v596, v576));
            float v170 = v829;
            double v490 = 1.0;
            float v491 = -1.0;
            float v569 = v868;
            *(float *)v575.i32 = (float)((float)(*((float *)&v887 + 3) * *(float *)&v889[8])
                                       + (float)(*(float *)&v887 * *(float *)&v889[4]))
                               + (float)(*((float *)&v888 + 2) * *(float *)&v889[12]);
            v576.i32[0] = DWORD2(v887);
            *(float *)v578.i32 = (float)((float)(*(float *)&v889[8] * *((float *)&v888 + 1))
                                       + (float)(*((float *)&v887 + 2) * *(float *)&v889[4]))
                               + (float)(*(float *)v889 * *(float *)&v889[12]);
            *(float *)v577.i32 = (float)((float)(*(float *)&v889[8] * *(float *)&v888)
                                       + (float)(*((float *)&v887 + 1) * *(float *)&v889[4]))
                               + (float)(*((float *)&v888 + 3) * *(float *)&v889[12]);
            if ((v579 & 7) != 0) {
              goto LABEL_440;
            }
          }
          else
          {
            int v582 = 0;
            int v583 = 0;
            float v584 = *(float **)(v845 + 8);
            float v585 = *(float **)(v845 + 32);
LABEL_440:
            int v609 = v579 - v582;
            do
            {
              float v610 = v585[1];
              float v611 = v585[2];
              float v612 = (float)((float)((float)(*((float *)&v887 + 3) * v610) + (float)(*(float *)&v887 * *v585))
                           + (float)(*((float *)&v888 + 2) * v611))
                   - *(float *)v575.i32;
              float v613 = (float)((float)(*((float *)&v888 + 1) * v610) + (float)(*(float *)v576.i32 * *v585))
                   + (float)(*(float *)v889 * v611);
              float v614 = (float)((float)((float)(*(float *)&v888 * v610) + (float)(*((float *)&v887 + 1) * *v585))
                           + (float)(*((float *)&v888 + 3) * v611))
                   - *(float *)v577.i32;
              float v615 = *v584;
              float v616 = v584[1];
              v584 += 2;
              int v617 = (float)((float)((float)((float)(v613 - *(float *)v578.i32) - (float)(v616 * v612))
                                   * (float)((float)(v613 - *(float *)v578.i32) - (float)(v616 * v612)))
                           + (float)((float)(v614 - (float)(v615 * v612)) * (float)(v614 - (float)(v615 * v612)))) < (float)((float)(v612 * v612) * 0.000016);
              if (v612 <= 0.0) {
                int v617 = 0;
              }
              v583 += v617;
              v585 += 3;
              --v609;
            }
            while (v609);
          }
        }
        if (v583 >= *v568)
        {
          long long v619 = v887;
          HIDWORD(v61_Block_object_dispose(&STACK[0x220], 8) = DWORD1(v888);
          long long v620 = *(_OWORD *)v889;
          *((_OWORD *)v523 + 1) = v888;
          *((_OWORD *)v523 + 2) = v620;
          *(_OWORD *)float v523 = v619;
          *float v568 = v583;
          LODWORD(v61_Block_object_dispose(&STACK[0x220], 8) = 998445679;
          vl_pose_count_inliers((uint64_t)&v887, (uint64_t *)v845, v817, 0, (uint64_t)&v894, fmaxf(v569 + v569, 0.004), v618, *(double *)&v620, *(double *)&v619, v571, v572);
          float v621 = vl_pose_refine((float32x2_t *)&v887, (uint64_t)&v894, (uint64_t *)&v895 + 1, 2, (float32x2_t *)&v887, 0, 1.0, 0.0, 0.0);
          uint64_t v631 = *(void *)v845;
          if ((int)*(void *)v845 < 1)
          {
            int v635 = 0;
          }
          else
          {
            v628.i32[0] = DWORD2(v887);
            LODWORD(v623) = DWORD1(v887);
            v622.i32[0] = v887;
            LODWORD(v624) = *(_DWORD *)v889;
            v626.i32[0] = HIDWORD(v888);
            v625.i32[0] = DWORD2(v888);
            *(float *)v627.i32 = (float)((float)(*((float *)&v887 + 3) * *(float *)&v889[8])
                                       + (float)(*(float *)&v887 * *(float *)&v889[4]))
                               + (float)(*((float *)&v888 + 2) * *(float *)&v889[12]);
            *(float *)v629.i32 = (float)((float)(*(float *)&v889[8] * *(float *)&v888)
                                       + (float)(*((float *)&v887 + 1) * *(float *)&v889[4]))
                               + (float)(*((float *)&v888 + 3) * *(float *)&v889[12]);
            *(float *)v630.i32 = (float)((float)(*(float *)&v889[8] * *((float *)&v888 + 1))
                                       + (float)(*((float *)&v887 + 2) * *(float *)&v889[4]))
                               + (float)(*(float *)v889 * *(float *)&v889[12]);
            BOOL v632 = *(const float **)(v845 + 32);
            uint64_t v633 = *(void *)(v845 + 8);
            if (*(void *)v845 >= 8uLL)
            {
              float v869 = v621;
              int v634 = v631 & 0xFFFFFFF8;
              int v636 = (float *)(v633 + 8 * (*(void *)v845 & 0xFFFFFFF8));
              uint64_t v637 = (float *)&v632[3 * (*(void *)v845 & 0xFFFFFFF8)];
              float32x4_t v638 = (float32x4_t)vdupq_lane_s32(v622, 0);
              float32x4_t v639 = (float32x4_t)vdupq_lane_s32(v625, 0);
              float32x4_t v640 = (float32x4_t)vdupq_lane_s32(v627, 0);
              float32x4_t v641 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v623, 0);
              float32x4_t v642 = (float32x4_t)vdupq_lane_s32(v626, 0);
              uint64_t v643 = (const float *)(v633 + 32);
              float32x4_t v644 = (float32x4_t)vdupq_lane_s32(v629, 0);
              float32x4_t v645 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v628.i8, 0);
              int32x4_t v628 = 0uLL;
              uint64_t v646 = *(void *)v845 & 0xFFFFFFF8;
              float32x4_t v647 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v624, 0);
              int32x4_t v648 = 0uLL;
              float32x4_t v649 = (float32x4_t)vdupq_lane_s32(v630, 0);
              do
              {
                v650 = v632;
                float32x4x3_t v916 = vld3q_f32(v650);
                v650 += 12;
                float32x4x3_t v923 = vld3q_f32(v650);
                int v651 = v643 - 8;
                float32x4_t v652 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v916.val[1], *((float *)&v887 + 3)), v916.val[0], v638), v916.val[2], v639), v640);
                float32x4_t v653 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v916.val[1], *(float *)&v888), v916.val[0], v641), v916.val[2], v642), v644);
                float32x4_t v654 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v916.val[1], *((float *)&v888 + 1)), v916.val[0], v645), v916.val[2], v647);
                float32x4_t v655 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v923.val[1], *(float *)&v888), v923.val[0], v641), v923.val[2], v642);
                float32x4_t v656 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v923.val[1], *((float *)&v888 + 1)), v923.val[0], v645), v923.val[2], v647);
                *(float32x4x2_t *)v916.val[0].f32 = vld2q_f32(v651);
                v916.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v923.val[1], *((float *)&v887 + 3)), v923.val[0], v638), v923.val[2], v639), v640);
                *(float32x4x2_t *)v923.val[0].f32 = vld2q_f32(v643);
                float32x4_t v657 = vmlsq_f32(v653, v652, v916.val[0]);
                float32x4_t v658 = vmlsq_f32(vsubq_f32(v654, v649), v652, v916.val[1]);
                float32x4_t v659 = vmlsq_f32(vsubq_f32(v656, v649), v916.val[2], v923.val[1]);
                float32x4_t v660 = vmlsq_f32(vsubq_f32(v655, v644), v916.val[2], v923.val[0]);
                int32x4_t v628 = vsubq_s32(v628, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v652, v652), v875), vmlaq_f32(vmulq_f32(v658, v658), v657, v657)), (int8x16_t)vcgtzq_f32(v652)));
                int32x4_t v648 = vsubq_s32(v648, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v916.val[2], v916.val[2]), v875), vmlaq_f32(vmulq_f32(v659, v659), v660, v660)), (int8x16_t)vcgtzq_f32(v916.val[2])));
                v632 += 24;
                v643 += 16;
                v646 -= 8;
              }
              while (v646);
              int v635 = vaddvq_s32(vaddq_s32(v648, v628));
              float v170 = v829;
              double v490 = 1.0;
              float v491 = -1.0;
              float v621 = v869;
              *(float *)v627.i32 = (float)((float)(*((float *)&v887 + 3) * *(float *)&v889[8])
                                         + (float)(*(float *)&v887 * *(float *)&v889[4]))
                                 + (float)(*((float *)&v888 + 2) * *(float *)&v889[12]);
              v628.i32[0] = DWORD2(v887);
              *(float *)v630.i32 = (float)((float)(*(float *)&v889[8] * *((float *)&v888 + 1))
                                         + (float)(*((float *)&v887 + 2) * *(float *)&v889[4]))
                                 + (float)(*(float *)v889 * *(float *)&v889[12]);
              *(float *)v629.i32 = (float)((float)(*(float *)&v889[8] * *(float *)&v888)
                                         + (float)(*((float *)&v887 + 1) * *(float *)&v889[4]))
                                 + (float)(*((float *)&v888 + 3) * *(float *)&v889[12]);
              if ((v631 & 7) != 0) {
                goto LABEL_452;
              }
            }
            else
            {
              int v634 = 0;
              int v635 = 0;
              int v636 = *(float **)(v845 + 8);
              uint64_t v637 = *(float **)(v845 + 32);
LABEL_452:
              int v661 = v631 - v634;
              do
              {
                float v662 = v637[1];
                float v663 = v637[2];
                float v664 = (float)((float)((float)(*((float *)&v887 + 3) * v662) + (float)(*(float *)&v887 * *v637))
                             + (float)(*((float *)&v888 + 2) * v663))
                     - *(float *)v627.i32;
                float v665 = (float)((float)(*((float *)&v888 + 1) * v662) + (float)(*(float *)v628.i32 * *v637))
                     + (float)(*(float *)v889 * v663);
                float v666 = (float)((float)((float)(*(float *)&v888 * v662) + (float)(*((float *)&v887 + 1) * *v637))
                             + (float)(*((float *)&v888 + 3) * v663))
                     - *(float *)v629.i32;
                float v667 = *v636;
                float v668 = v636[1];
                v636 += 2;
                int v669 = (float)((float)((float)((float)(v665 - *(float *)v630.i32) - (float)(v668 * v664))
                                     * (float)((float)(v665 - *(float *)v630.i32) - (float)(v668 * v664)))
                             + (float)((float)(v666 - (float)(v667 * v664)) * (float)(v666 - (float)(v667 * v664)))) < (float)((float)(v664 * v664) * 0.000016);
                if (v664 <= 0.0) {
                  int v669 = 0;
                }
                v635 += v669;
                v637 += 3;
                --v661;
              }
              while (v661);
            }
          }
          if (v635 >= *v568)
          {
            long long v671 = v887;
            HIDWORD(v670) = DWORD1(v888);
            long long v672 = *(_OWORD *)v889;
            *((_OWORD *)v523 + 1) = v888;
            *((_OWORD *)v523 + 2) = v672;
            *(_OWORD *)float v523 = v671;
            *float v568 = v635;
            LODWORD(v670) = 998445679;
            vl_pose_count_inliers((uint64_t)&v887, (uint64_t *)v845, v817, 0, (uint64_t)&v894, fmaxf(v621 + v621, 0.004), v670, *(double *)&v672, *(double *)&v671, v623, v624);
            float v673 = vl_pose_refine((float32x2_t *)&v887, (uint64_t)&v894, (uint64_t *)&v895 + 1, 2, (float32x2_t *)&v887, 0, 1.0, 0.0, 0.0);
            uint64_t v683 = *(void *)v845;
            if ((int)*(void *)v845 < 1)
            {
              int v687 = 0;
            }
            else
            {
              v680.i32[0] = DWORD2(v887);
              LODWORD(v675) = DWORD1(v887);
              v674.i32[0] = v887;
              LODWORD(v676) = *(_DWORD *)v889;
              v678.i32[0] = HIDWORD(v888);
              v677.i32[0] = DWORD2(v888);
              *(float *)v679.i32 = (float)((float)(*((float *)&v887 + 3) * *(float *)&v889[8])
                                         + (float)(*(float *)&v887 * *(float *)&v889[4]))
                                 + (float)(*((float *)&v888 + 2) * *(float *)&v889[12]);
              *(float *)v681.i32 = (float)((float)(*(float *)&v889[8] * *(float *)&v888)
                                         + (float)(*((float *)&v887 + 1) * *(float *)&v889[4]))
                                 + (float)(*((float *)&v888 + 3) * *(float *)&v889[12]);
              *(float *)v682.i32 = (float)((float)(*(float *)&v889[8] * *((float *)&v888 + 1))
                                         + (float)(*((float *)&v887 + 2) * *(float *)&v889[4]))
                                 + (float)(*(float *)v889 * *(float *)&v889[12]);
              double v684 = *(const float **)(v845 + 32);
              uint64_t v685 = *(void *)(v845 + 8);
              if (*(void *)v845 >= 8uLL)
              {
                float v870 = v673;
                int v686 = v683 & 0xFFFFFFF8;
                uint64_t v688 = (float *)(v685 + 8 * (*(void *)v845 & 0xFFFFFFF8));
                int v689 = (float *)&v684[3 * (*(void *)v845 & 0xFFFFFFF8)];
                float32x4_t v690 = (float32x4_t)vdupq_lane_s32(v674, 0);
                float32x4_t v691 = (float32x4_t)vdupq_lane_s32(v677, 0);
                float32x4_t v692 = (float32x4_t)vdupq_lane_s32(v679, 0);
                float32x4_t v693 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v675, 0);
                float32x4_t v694 = (float32x4_t)vdupq_lane_s32(v678, 0);
                double v695 = (const float *)(v685 + 32);
                float32x4_t v696 = (float32x4_t)vdupq_lane_s32(v681, 0);
                float32x4_t v697 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v680.i8, 0);
                int32x4_t v680 = 0uLL;
                uint64_t v698 = *(void *)v845 & 0xFFFFFFF8;
                float32x4_t v699 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v676, 0);
                int32x4_t v700 = 0uLL;
                float32x4_t v701 = (float32x4_t)vdupq_lane_s32(v682, 0);
                do
                {
                  int v702 = v684;
                  float32x4x3_t v917 = vld3q_f32(v702);
                  v702 += 12;
                  float32x4x3_t v924 = vld3q_f32(v702);
                  unsigned int v703 = v695 - 8;
                  float32x4_t v704 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v917.val[1], *((float *)&v887 + 3)), v917.val[0], v690), v917.val[2], v691), v692);
                  float32x4_t v705 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v917.val[1], *(float *)&v888), v917.val[0], v693), v917.val[2], v694), v696);
                  float32x4_t v706 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v917.val[1], *((float *)&v888 + 1)), v917.val[0], v697), v917.val[2], v699);
                  float32x4_t v707 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v924.val[1], *(float *)&v888), v924.val[0], v693), v924.val[2], v694);
                  float32x4_t v708 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v924.val[1], *((float *)&v888 + 1)), v924.val[0], v697), v924.val[2], v699);
                  *(float32x4x2_t *)v917.val[0].f32 = vld2q_f32(v703);
                  v917.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v924.val[1], *((float *)&v887 + 3)), v924.val[0], v690), v924.val[2], v691), v692);
                  *(float32x4x2_t *)v924.val[0].f32 = vld2q_f32(v695);
                  float32x4_t v709 = vmlsq_f32(v705, v704, v917.val[0]);
                  float32x4_t v710 = vmlsq_f32(vsubq_f32(v706, v701), v704, v917.val[1]);
                  float32x4_t v711 = vmlsq_f32(vsubq_f32(v708, v701), v917.val[2], v924.val[1]);
                  float32x4_t v712 = vmlsq_f32(vsubq_f32(v707, v696), v917.val[2], v924.val[0]);
                  int32x4_t v680 = vsubq_s32(v680, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v704, v704), v875), vmlaq_f32(vmulq_f32(v710, v710), v709, v709)), (int8x16_t)vcgtzq_f32(v704)));
                  int32x4_t v700 = vsubq_s32(v700, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v917.val[2], v917.val[2]), v875), vmlaq_f32(vmulq_f32(v711, v711), v712, v712)), (int8x16_t)vcgtzq_f32(v917.val[2])));
                  v684 += 24;
                  v695 += 16;
                  v698 -= 8;
                }
                while (v698);
                int v687 = vaddvq_s32(vaddq_s32(v700, v680));
                float v170 = v829;
                double v490 = 1.0;
                float v491 = -1.0;
                float v673 = v870;
                *(float *)v679.i32 = (float)((float)(*((float *)&v887 + 3) * *(float *)&v889[8])
                                           + (float)(*(float *)&v887 * *(float *)&v889[4]))
                                   + (float)(*((float *)&v888 + 2) * *(float *)&v889[12]);
                v680.i32[0] = DWORD2(v887);
                *(float *)v682.i32 = (float)((float)(*(float *)&v889[8] * *((float *)&v888 + 1))
                                           + (float)(*((float *)&v887 + 2) * *(float *)&v889[4]))
                                   + (float)(*(float *)v889 * *(float *)&v889[12]);
                *(float *)v681.i32 = (float)((float)(*(float *)&v889[8] * *(float *)&v888)
                                           + (float)(*((float *)&v887 + 1) * *(float *)&v889[4]))
                                   + (float)(*((float *)&v888 + 3) * *(float *)&v889[12]);
                if ((v683 & 7) != 0) {
                  goto LABEL_464;
                }
              }
              else
              {
                int v686 = 0;
                int v687 = 0;
                uint64_t v688 = *(float **)(v845 + 8);
                int v689 = *(float **)(v845 + 32);
LABEL_464:
                int v713 = v683 - v686;
                do
                {
                  float v714 = v689[1];
                  float v715 = v689[2];
                  float v716 = (float)((float)((float)(*((float *)&v887 + 3) * v714) + (float)(*(float *)&v887 * *v689))
                               + (float)(*((float *)&v888 + 2) * v715))
                       - *(float *)v679.i32;
                  float v717 = (float)((float)(*((float *)&v888 + 1) * v714) + (float)(*(float *)v680.i32 * *v689))
                       + (float)(*(float *)v889 * v715);
                  float v718 = (float)((float)((float)(*(float *)&v888 * v714) + (float)(*((float *)&v887 + 1) * *v689))
                               + (float)(*((float *)&v888 + 3) * v715))
                       - *(float *)v681.i32;
                  float v719 = *v688;
                  float v720 = v688[1];
                  v688 += 2;
                  int v721 = (float)((float)((float)((float)(v717 - *(float *)v682.i32) - (float)(v720 * v716))
                                       * (float)((float)(v717 - *(float *)v682.i32) - (float)(v720 * v716)))
                               + (float)((float)(v718 - (float)(v719 * v716)) * (float)(v718 - (float)(v719 * v716)))) < (float)((float)(v716 * v716) * 0.000016);
                  if (v716 <= 0.0) {
                    int v721 = 0;
                  }
                  v687 += v721;
                  v689 += 3;
                  --v713;
                }
                while (v713);
              }
            }
            if (v687 >= *v568)
            {
              long long v723 = v887;
              HIDWORD(v722) = DWORD1(v888);
              long long v724 = *(_OWORD *)v889;
              *((_OWORD *)v523 + 1) = v888;
              *((_OWORD *)v523 + 2) = v724;
              *(_OWORD *)float v523 = v723;
              *float v568 = v687;
              LODWORD(v722) = 998445679;
              vl_pose_count_inliers((uint64_t)&v887, (uint64_t *)v845, v817, 0, (uint64_t)&v894, fmaxf(v673 + v673, 0.004), v722, *(double *)&v724, *(double *)&v723, v675, v676);
              vl_pose_refine((float32x2_t *)&v887, (uint64_t)&v894, (uint64_t *)&v895 + 1, 2, (float32x2_t *)&v887, 0, 1.0, 0.0, 0.0);
              uint64_t v734 = *(void *)v845;
              if ((int)*(void *)v845 < 1)
              {
                int v738 = 0;
              }
              else
              {
                v725.i32[0] = DWORD2(v887);
                v727.i32[0] = DWORD1(v887);
                v726.i32[0] = v887;
                v728.i32[0] = *(_DWORD *)v889;
                v730.i32[0] = HIDWORD(v888);
                v729.i32[0] = DWORD2(v888);
                *(float *)v731.i32 = (float)((float)(*((float *)&v887 + 3) * *(float *)&v889[8])
                                           + (float)(*(float *)&v887 * *(float *)&v889[4]))
                                   + (float)(*((float *)&v888 + 2) * *(float *)&v889[12]);
                *(float *)v732.i32 = (float)((float)(*(float *)&v889[8] * *(float *)&v888)
                                           + (float)(*((float *)&v887 + 1) * *(float *)&v889[4]))
                                   + (float)(*((float *)&v888 + 3) * *(float *)&v889[12]);
                *(float *)v733.i32 = (float)((float)(*(float *)&v889[8] * *((float *)&v888 + 1))
                                           + (float)(*((float *)&v887 + 2) * *(float *)&v889[4]))
                                   + (float)(*(float *)v889 * *(float *)&v889[12]);
                uint64_t v735 = *(const float **)(v845 + 32);
                uint64_t v736 = *(void *)(v845 + 8);
                if (*(void *)v845 >= 8uLL)
                {
                  int v737 = v734 & 0xFFFFFFF8;
                  int v739 = (float *)(v736 + 8 * (*(void *)v845 & 0xFFFFFFF8));
                  uint64_t v740 = (float *)&v735[3 * (*(void *)v845 & 0xFFFFFFF8)];
                  float32x4_t v741 = (float32x4_t)vdupq_lane_s32(v726, 0);
                  float32x4_t v742 = (float32x4_t)vdupq_lane_s32(v729, 0);
                  float32x4_t v743 = (float32x4_t)vdupq_lane_s32(v731, 0);
                  float32x4_t v744 = (float32x4_t)vdupq_lane_s32(v727, 0);
                  float32x4_t v745 = (float32x4_t)vdupq_lane_s32(v730, 0);
                  int v746 = (const float *)(v736 + 32);
                  float32x4_t v747 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v732.i8, 0);
                  float32x4_t v748 = (float32x4_t)vdupq_lane_s32(v725, 0);
                  int32x4_t v732 = 0uLL;
                  uint64_t v749 = *(void *)v845 & 0xFFFFFFF8;
                  float32x4_t v750 = (float32x4_t)vdupq_lane_s32(v728, 0);
                  int32x4_t v751 = 0uLL;
                  float32x4_t v752 = (float32x4_t)vdupq_lane_s32(v733, 0);
                  do
                  {
                    int v753 = v735;
                    float32x4x3_t v918 = vld3q_f32(v753);
                    v753 += 12;
                    float32x4x3_t v925 = vld3q_f32(v753);
                    float64x2x3_t v754 = v746 - 8;
                    float32x4_t v755 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v918.val[1], *((float *)&v887 + 3)), v918.val[0], v741), v918.val[2], v742), v743);
                    float32x4_t v756 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v918.val[1], *(float *)&v888), v918.val[0], v744), v918.val[2], v745), v747);
                    float32x4_t v757 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v918.val[1], *((float *)&v888 + 1)), v918.val[0], v748), v918.val[2], v750);
                    float32x4_t v758 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v925.val[1], *(float *)&v888), v925.val[0], v744), v925.val[2], v745);
                    float32x4_t v759 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v925.val[1], *((float *)&v888 + 1)), v925.val[0], v748), v925.val[2], v750);
                    *(float32x4x2_t *)v918.val[0].f32 = vld2q_f32(v754);
                    v918.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v925.val[1], *((float *)&v887 + 3)), v925.val[0], v741), v925.val[2], v742), v743);
                    *(float32x4x2_t *)v925.val[0].f32 = vld2q_f32(v746);
                    float32x4_t v760 = vmlsq_f32(v756, v755, v918.val[0]);
                    float32x4_t v761 = vmlsq_f32(vsubq_f32(v757, v752), v755, v918.val[1]);
                    float32x4_t v762 = vmlsq_f32(vsubq_f32(v759, v752), v918.val[2], v925.val[1]);
                    float32x4_t v763 = vmlsq_f32(vsubq_f32(v758, v747), v918.val[2], v925.val[0]);
                    int32x4_t v732 = vsubq_s32(v732, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v755, v755), v875), vmlaq_f32(vmulq_f32(v761, v761), v760, v760)), (int8x16_t)vcgtzq_f32(v755)));
                    int32x4_t v751 = vsubq_s32(v751, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v918.val[2], v918.val[2]), v875), vmlaq_f32(vmulq_f32(v762, v762), v763, v763)), (int8x16_t)vcgtzq_f32(v918.val[2])));
                    v735 += 24;
                    v746 += 16;
                    v749 -= 8;
                  }
                  while (v749);
                  int v738 = vaddvq_s32(vaddq_s32(v751, v732));
                  float v170 = v829;
                  double v490 = 1.0;
                  float v491 = -1.0;
                  *(float *)v732.i32 = (float)((float)(*(float *)&v889[8] * *(float *)&v888)
                                             + (float)(*((float *)&v887 + 1) * *(float *)&v889[4]))
                                     + (float)(*((float *)&v888 + 3) * *(float *)&v889[12]);
                  *(float *)v731.i32 = (float)((float)(*((float *)&v887 + 3) * *(float *)&v889[8])
                                             + (float)(*(float *)&v887 * *(float *)&v889[4]))
                                     + (float)(*((float *)&v888 + 2) * *(float *)&v889[12]);
                  *(float *)v733.i32 = (float)((float)(*(float *)&v889[8] * *((float *)&v888 + 1))
                                             + (float)(*((float *)&v887 + 2) * *(float *)&v889[4]))
                                     + (float)(*(float *)v889 * *(float *)&v889[12]);
                  if ((v734 & 7) != 0) {
                    goto LABEL_476;
                  }
                }
                else
                {
                  int v737 = 0;
                  int v738 = 0;
                  int v739 = *(float **)(v845 + 8);
                  uint64_t v740 = *(float **)(v845 + 32);
LABEL_476:
                  int v764 = v734 - v737;
                  do
                  {
                    float v765 = v740[1];
                    float v766 = v740[2];
                    float v767 = (float)((float)((float)(*((float *)&v887 + 3) * v765) + (float)(*(float *)&v887 * *v740))
                                 + (float)(*((float *)&v888 + 2) * v766))
                         - *(float *)v731.i32;
                    float v768 = (float)((float)(*((float *)&v888 + 1) * v765) + (float)(*((float *)&v887 + 2) * *v740))
                         + (float)(*(float *)v889 * v766);
                    float v769 = (float)((float)((float)(*(float *)&v888 * v765) + (float)(*((float *)&v887 + 1) * *v740))
                                 + (float)(*((float *)&v888 + 3) * v766))
                         - *(float *)v732.i32;
                    float v770 = *v739;
                    float v771 = v739[1];
                    v739 += 2;
                    int v772 = (float)((float)((float)((float)(v768 - *(float *)v733.i32) - (float)(v771 * v767))
                                         * (float)((float)(v768 - *(float *)v733.i32) - (float)(v771 * v767)))
                                 + (float)((float)(v769 - (float)(v770 * v767)) * (float)(v769 - (float)(v770 * v767)))) < (float)((float)(v767 * v767) * 0.000016);
                    if (v767 <= 0.0) {
                      int v772 = 0;
                    }
                    v738 += v772;
                    v740 += 3;
                    --v764;
                  }
                  while (v764);
                }
              }
              if (v738 >= *v568)
              {
                long long v773 = v887;
                long long v774 = *(_OWORD *)v889;
                *((_OWORD *)v523 + 1) = v888;
                *((_OWORD *)v523 + 2) = v774;
                *(_OWORD *)float v523 = v773;
                *float v568 = v738;
              }
            }
          }
        }
        free(*((void **)&v894 + 1));
        free((void *)v896);
        free(*((void **)&v897 + 1));
        if (*v568 > v130[12]
          && (float)((float)((float)((float)(v170 * *((float *)v523 + 7)) + (float)(*((float *)v523 + 6) * v812))
                           + (float)(*((float *)v523 + 8) * v811))
                   / (float)(sqrtf(v850* (float)((float)((float)(*((float *)v523 + 7) * *((float *)v523 + 7))+ (float)(*((float *)v523 + 6) * *((float *)v523 + 6)))+ (float)(*((float *)v523 + 8) * *((float *)v523 + 8))))+ 1.0e-20)) > 0.99619)
        {
          long long v775 = *(_OWORD *)v523;
          long long v776 = *((_OWORD *)v523 + 1);
          long long v777 = *((_OWORD *)v523 + 2);
          v130[12] = v523[12];
          *((_OWORD *)v130 + 1) = v776;
          *((_OWORD *)v130 + 2) = v777;
          *(_OWORD *)float v130 = v775;
        }
        ++v488;
        float v492 = v522;
        if (v488 == v864) {
          break;
        }
        goto LABEL_415;
      }
    }
  }
LABEL_485:
  long long v778 = *(_OWORD *)v130;
  long long v779 = *((_OWORD *)v130 + 2);
  *(_OWORD *)(v810 + 16) = *((_OWORD *)v130 + 1);
  *(_OWORD *)(v810 + 32) = v779;
  *(_OWORD *)uint64_t v810 = v778;
  if (v822 == 32)
  {
    *(_DWORD *)uint64_t v810 = 0;
    uint64_t v780 = v902[0].i64[0];
    float v781 = (float)(*(float *)v130 * v902[0].f32[0]) + 0.0;
    *(float *)uint64_t v810 = v781;
    uint64_t v782 = v902[0].i64[1];
    float v783 = v781 + (float)(*((float *)v130 + 1) * v902[0].f32[3]);
    *(float *)uint64_t v810 = v783;
    uint64_t v784 = v902[1].i64[1];
    *(float *)uint64_t v810 = v783 + (float)(*((float *)v130 + 2) * v902[1].f32[2]);
    *(_DWORD *)(v810 + 4) = 0;
    float v785 = (float)(*(float *)v130 * *((float *)&v780 + 1)) + 0.0;
    *(float *)(v810 + 4) = v785;
    uint64_t v786 = v902[1].i64[0];
    float v787 = v785 + (float)(*((float *)v130 + 1) * v902[1].f32[0]);
    *(float *)(v810 + 4) = v787;
    *(float *)(v810 + 4) = v787 + (float)(*((float *)v130 + 2) * *((float *)&v784 + 1));
    *(_DWORD *)(v810 + _Block_object_dispose(&STACK[0x220], 8) = 0;
    float v788 = (float)(*(float *)v130 * *(float *)&v782) + 0.0;
    *(float *)(v810 + _Block_object_dispose(&STACK[0x220], 8) = v788;
    float v789 = v788 + (float)(*((float *)v130 + 1) * *((float *)&v786 + 1));
    *(float *)(v810 + _Block_object_dispose(&STACK[0x220], 8) = v789;
    float v790 = v903;
    *(float *)(v810 + _Block_object_dispose(&STACK[0x220], 8) = v789 + (float)(*((float *)v130 + 2) * v903);
    *(_DWORD *)(v810 + 12) = 0;
    float v791 = (float)(*((float *)v130 + 3) * *(float *)&v780) + 0.0;
    *(float *)(v810 + 12) = v791;
    float v792 = v791 + (float)(*((float *)v130 + 4) * *((float *)&v782 + 1));
    *(float *)(v810 + 12) = v792;
    *(float *)(v810 + 12) = v792 + (float)(*((float *)v130 + 5) * *(float *)&v784);
    *(_DWORD *)(v810 + 16) = 0;
    float v793 = (float)(*((float *)v130 + 3) * *((float *)&v780 + 1)) + 0.0;
    *(float *)(v810 + 16) = v793;
    float v794 = v793 + (float)(*((float *)v130 + 4) * *(float *)&v786);
    *(float *)(v810 + 16) = v794;
    *(float *)(v810 + 16) = v794 + (float)(*((float *)v130 + 5) * *((float *)&v784 + 1));
    *(_DWORD *)(v810 + 20) = 0;
    float v795 = (float)(*((float *)v130 + 3) * *(float *)&v782) + 0.0;
    *(float *)(v810 + 20) = v795;
    float v796 = v795 + (float)(*((float *)v130 + 4) * *((float *)&v786 + 1));
    *(float *)(v810 + 20) = v796;
    *(float *)(v810 + 20) = v796 + (float)(*((float *)v130 + 5) * v790);
    *(_DWORD *)(v810 + 24) = 0;
    float v797 = (float)(*((float *)v130 + 6) * *(float *)&v780) + 0.0;
    *(float *)(v810 + 24) = v797;
    float v798 = v797 + (float)(*((float *)v130 + 7) * *((float *)&v782 + 1));
    *(float *)(v810 + 24) = v798;
    *(float *)(v810 + 24) = v798 + (float)(*((float *)v130 + 8) * *(float *)&v784);
    *(_DWORD *)(v810 + 2_Block_object_dispose(&STACK[0x220], 8) = 0;
    float v799 = (float)(*((float *)v130 + 6) * *((float *)&v780 + 1)) + 0.0;
    *(float *)(v810 + 2_Block_object_dispose(&STACK[0x220], 8) = v799;
    float v800 = v799 + (float)(*((float *)v130 + 7) * *(float *)&v786);
    *(float *)(v810 + 2_Block_object_dispose(&STACK[0x220], 8) = v800;
    *(float *)(v810 + 2_Block_object_dispose(&STACK[0x220], 8) = v800 + (float)(*((float *)v130 + 8) * *((float *)&v784 + 1));
    *(_DWORD *)(v810 + 32) = 0;
    float v801 = (float)(*((float *)v130 + 6) * *(float *)&v782) + 0.0;
    *(float *)(v810 + 32) = v801;
    float v802 = v801 + (float)(*((float *)v130 + 7) * *((float *)&v786 + 1));
    *(float *)(v810 + 32) = v802;
    *(float *)(v810 + 32) = v802 + (float)(*((float *)v130 + 8) * v790);
  }
  free(v130);
  free(v818);
  uint64_t v147 = 1;
  unint64_t v148 = v845;
  if (!*(_DWORD *)(v845 + 284))
  {
LABEL_488:
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v845 + 136));
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v845 + 152));
    unint64_t v148 = v845;
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v845 + 120));
    uint64_t v803 = *(void *)(v148 + 128)
         - *(void *)(v148 + 80)
         + 1000000000 * (*(void *)(v148 + 120) - *(void *)(v148 + 72));
    uint64_t v804 = *(void *)(v148 + 144)
         - *(void *)(v148 + 96)
         + 1000000000 * (*(void *)(v148 + 136) - *(void *)(v148 + 88));
    uint64_t v805 = *(void *)(v148 + 160)
         - *(void *)(v148 + 112)
         + 1000000000 * (*(void *)(v148 + 152) - *(void *)(v148 + 104));
    uint64_t v806 = *(void *)(v845 + 200);
    uint64_t v807 = v803 + *(void *)(v845 + 192);
    *(void *)(v845 + 16_Block_object_dispose(&STACK[0x220], 8) = v803;
    *(void *)(v845 + 176) = v804;
    uint64_t v808 = v804 + v806;
    *(void *)(v845 + 184) = v805;
    *(void *)(v845 + 192) = v807;
    uint64_t v809 = v805 + *(void *)(v845 + 208);
    *(void *)(v845 + 200) = v808;
    *(void *)(v845 + 20_Block_object_dispose(&STACK[0x220], 8) = v809;
    ++*(_DWORD *)(v845 + 216);
    if (!*(_DWORD *)(v845 + 284)) {
      goto LABEL_489;
    }
    goto LABEL_156;
  }
LABEL_155:
  *(void *)(v148 + 192) += mach_absolute_time();
  if (!*(_DWORD *)(v148 + 284))
  {
LABEL_489:
    log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v149, v150, v151, v152, v153, v154, v155, (char)&str_4_1);
    return v147;
  }
LABEL_156:
  printf("Verbose : ");
  printf("Total time for %40s : %7.3f ms", (const char *)(v148 + 220), (double)*(uint64_t *)(v148 + 192) * 0.000001);
  putchar(10);
  return v147;
}

void vl_kpts_filter_lbl()
{
  uint64_t v0 = (uint64_t *)MEMORY[0x270FA5388]();
  float v2 = v1;
  float v4 = v3;
  unsigned int v5 = v0;
  uint64_t v455 = *MEMORY[0x263EF8340];
  uint64_t v6 = *v0;
  uint64_t v7 = *v0 << 32;
  unint64_t v8 = *v0;
  uint64_t v9 = (int)*v0;
  int32x4_t v10 = (char *)malloc_type_malloc(v7 >> 28, 0x10200405730B0C9uLL);
  int v437 = v6;
  if ((int)v6 >= 1)
  {
    uint64_t v11 = v5[1];
    if (v8 < 2)
    {
      uint64_t v12 = 0;
LABEL_7:
      uint64_t v17 = v8 - v12;
      uint64_t v18 = (uint64_t)&v10[16 * v12 + 4];
      uint64_t v19 = v11 + 288 * v12;
      do
      {
        *(_DWORD *)(v18 - 4) = -1;
        *(void *)(v18 + 4) = v19;
        *(_DWORD *)uint64_t v18 = *(_DWORD *)(v19 + 4);
        v18 += 16;
        v19 += 288;
        --v17;
      }
      while (v17);
      goto LABEL_9;
    }
    uint64_t v12 = v8 & 0xFFFFFFFE;
    uint64_t v13 = v10 + 16;
    uint64_t v14 = v5[1];
    uint64_t v15 = v12;
    do
    {
      *((_DWORD *)v13 - 4) = -1;
      *(_DWORD *)uint64_t v13 = -1;
      *((void *)v13 - 1) = v14;
      *((void *)v13 + 1) = v14 + 288;
      int v16 = *(_DWORD *)(v14 + 292);
      *((_DWORD *)v13 - 3) = *(_DWORD *)(v14 + 4);
      *((_DWORD *)v13 + 1) = v16;
      v14 += 576;
      v13 += 32;
      v15 -= 2;
    }
    while (v15);
    if (v8) {
      goto LABEL_7;
    }
  }
LABEL_9:
  float32x4_t v435 = v5;
  float32x4_t v438 = v10;
  int v20 = (char *)malloc_type_malloc(0x200uLL, 0x8C8DB8D1uLL);
  if (v7)
  {
    uint64_t v21 = 0;
    BOOL v22 = 1;
    uint64_t v23 = 32;
    float v24 = (float *)v438;
    unint64_t v25 = v9;
    while (1)
    {
      uint64_t v26 = v21;
      while (1)
      {
        if (!v22)
        {
          --v26;
          unsigned int v27 = &v20[16 * v26];
          unint64_t v25 = *((void *)v27 + 1);
          float v24 = (float *)&v438[16 * *(void *)v27];
        }
        if ((uint64_t)v25 > 15) {
          break;
        }
        if ((uint64_t)v25 > 1)
        {
          uint64_t v28 = (char *)(v24 + 4);
          uint64_t v29 = 2;
          for (uint64_t i = 1; i != v25; ++i)
          {
            uint64_t v31 = v28;
            uint64_t v32 = v29;
            do
            {
              uint64_t v33 = (v32 - 2);
              if ((float)(v24[4 * v33 + 1] - *((float *)v31 + 1)) >= 0.0) {
                break;
              }
              uint64_t v34 = 4 * v33;
              v454[0] = 0uLL;
              v454[0] = *(_OWORD *)v31;
              *(_OWORD *)uint64_t v31 = *(_OWORD *)&v24[v34];
              v31 -= 16;
              *(_OWORD *)&v24[v34] = v454[0];
              --v32;
            }
            while (v32 > 1);
            ++v29;
            v28 += 16;
          }
        }
        BOOL v22 = 0;
        unint64_t v25 = 0;
        if (v26 < 1) {
          goto LABEL_78;
        }
      }
      if (v25 > 0x27) {
        break;
      }
      unint64_t v35 = v25 >> 1;
      float v36 = v24[4 * (v25 >> 1) + 1];
      float v37 = v24[1];
      float v38 = v24[4 * v25 - 3];
      if ((float)(v36 - v37) >= 0.0)
      {
        if ((float)(v38 - v37) >= 0.0)
        {
          if ((float)(v38 - v36) < 0.0) {
            unint64_t v35 = v25 - 1;
          }
        }
        else
        {
          unint64_t v35 = 0;
        }
      }
      else if ((float)(v38 - v36) >= 0.0)
      {
        if ((float)(v38 - v37) >= 0.0) {
          unint64_t v35 = 0;
        }
        else {
          unint64_t v35 = v25 - 1;
        }
      }
LABEL_61:
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      v454[0] = 0uLL;
      v454[0] = *(_OWORD *)v24;
      uint64_t v61 = 4 * v35;
      *(_OWORD *)float v24 = *(_OWORD *)&v24[v61];
      *(_OWORD *)&v24[v61] = v454[0];
      unint64_t v62 = v25 - 1;
      uint64_t v63 = v24 + 5;
      do
      {
        if ((float)(v24[1] - *v63) <= 0.0)
        {
          ++v59;
          v454[0] = 0uLL;
          v454[0] = *(_OWORD *)(v63 - 1);
          unint64_t v64 = (char *)&v24[4 * v59];
          *(_OWORD *)(v63 - 1) = *(_OWORD *)v64;
          *(_OWORD *)unint64_t v64 = v454[0];
          if ((float)(v24[1] - *v63) == 0.0)
          {
            ++v60;
            v454[0] = 0uLL;
            v454[0] = *(_OWORD *)v64;
            *(_OWORD *)unint64_t v64 = *(_OWORD *)&v24[4 * v60];
            *(_OWORD *)&v24[4 * v60] = v454[0];
          }
        }
        v63 += 4;
        --v62;
      }
      while (v62);
      uint64_t v65 = v60 + 1;
      uint64_t v66 = 4 * v60;
      uint64_t v67 = 16 * v59 - 16 * v60;
      do
      {
        v454[0] = 0uLL;
        v454[0] = *(_OWORD *)((char *)v24 + v67);
        *(_OWORD *)((char *)v24 + v67) = *(_OWORD *)&v24[v66];
        *(_OWORD *)&v24[v66] = v454[0];
        --v65;
        v66 -= 4;
        v67 += 16;
      }
      while (v65 > 0);
      uint64_t v21 = v26 + 1;
      if (v26 + 1 >= v23)
      {
        ptra = (void *)v7;
        uint64_t v68 = 2 * v23;
        int v20 = (char *)malloc_type_realloc(v20, 32 * v23, 0x9E1D27C6uLL);
        uint64_t v23 = v68;
        uint64_t v7 = (uint64_t)ptra;
      }
      float v69 = &v20[16 * v26];
      *(void *)float v69 = v59 + (((char *)v24 - v438) >> 4) + 1;
      *((void *)v69 + 1) = v25 + ~v59;
      unint64_t v25 = v59 - v60;
      BOOL v22 = v59 != v60;
      if (v26 < 0 && !v25) {
        goto LABEL_78;
      }
    }
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    if (v25 <= 0x7D0) {
      uint64_t v41 = 8;
    }
    else {
      uint64_t v41 = 26;
    }
    if (v25 <= 0x7D0) {
      unint64_t v42 = 3;
    }
    else {
      unint64_t v42 = 9;
    }
    while (1)
    {
      uint64_t v43 = (uint64_t)(v25 - 1 + v39) / v41;
      float v44 = v24[4 * v43 + 1];
      float v45 = v24[4 * (v39 / v41) + 1];
      uint64_t v46 = (uint64_t)(2 * v25 - 2 + v39) / v41;
      float v47 = v24[4 * v46 + 1];
      if ((float)(v44 - v45) >= 0.0)
      {
        if ((float)(v47 - v45) < 0.0) {
          goto LABEL_42;
        }
        if ((float)(v47 - v44) < 0.0)
        {
LABEL_44:
          *((void *)v454 + v40) = v46;
          goto LABEL_36;
        }
      }
      else if ((float)(v47 - v44) >= 0.0)
      {
        if ((float)(v47 - v45) < 0.0) {
          goto LABEL_44;
        }
LABEL_42:
        *((void *)v454 + v40) = v39 / v41;
        goto LABEL_36;
      }
      *((void *)v454 + v40) = v43;
LABEL_36:
      ++v40;
      v39 += 3 * v25 - 3;
      if (v42 == v40)
      {
        while (1)
        {
          uint64_t v48 = 0;
          uint64_t v49 = 0;
          unint64_t v50 = v42;
          v42 /= 3uLL;
          if (v42 <= 1) {
            uint64_t v51 = 1;
          }
          else {
            uint64_t v51 = v42;
          }
          uint64_t v52 = 8 * v51;
          do
          {
            uint64_t v53 = *(void *)((char *)v454 + v48);
            uint64_t v54 = *(void *)((char *)v454 + v48 + 8);
            uint64_t v55 = *(void *)((char *)&v454[1] + v48);
            float v56 = v24[4 * v54 + 1];
            float v57 = v24[4 * v53 + 1];
            float v58 = v24[4 * v55 + 1];
            if ((float)(v56 - v57) >= 0.0)
            {
              if ((float)(v58 - v57) < 0.0) {
                goto LABEL_57;
              }
              if ((float)(v58 - v56) >= 0.0)
              {
LABEL_50:
                *(void *)((char *)v454 + v49) = v54;
                goto LABEL_51;
              }
            }
            else
            {
              if ((float)(v58 - v56) < 0.0) {
                goto LABEL_50;
              }
              if ((float)(v58 - v57) >= 0.0)
              {
LABEL_57:
                *(void *)((char *)v454 + v49) = v53;
                goto LABEL_51;
              }
            }
            *(void *)((char *)v454 + v49) = v55;
LABEL_51:
            v49 += 8;
            v48 += 24;
          }
          while (v52 != v49);
          if (v50 < 9)
          {
            unint64_t v35 = *(void *)&v454[0];
            goto LABEL_61;
          }
        }
      }
    }
  }
LABEL_78:
  free(v20);
  uint64_t v70 = v438;
  if (v437 >= 1)
  {
    uint64_t v71 = 0;
    int v72 = 0;
    uint64_t v73 = v438 + 8;
    uint64_t v74 = 1;
    do
    {
      if (*(_DWORD *)&v438[16 * v71] == -1)
      {
        uint64_t v75 = *(float **)&v438[16 * v71 + 8];
        float v76 = *v75;
        float v77 = v75[1];
        float v78 = v73;
        uint64_t v79 = v74;
        do
        {
          float v81 = v77 - *(float *)(*(void *)v78 + 4);
          if ((float)((float)(v81 * v81) + (float)((float)(v76 - **(float **)v78) * (float)(v76 - **(float **)v78))) < (float)(v4 * v4)) {
            *((_DWORD *)v78 - 2) = v72;
          }
          BOOL v80 = v81 <= v4 && v79++ < v9;
          v78 += 16;
        }
        while (v80);
        ++v72;
      }
      ++v71;
      ++v74;
      v73 += 16;
    }
    while (v71 != v8);
  }
  uint64_t v82 = (char *)malloc_type_malloc(0x200uLL, 0x19EE46D4uLL);
  if (v7)
  {
    uint64_t v83 = 0;
    char v84 = 1;
    uint64_t v85 = 32;
    uint64_t v86 = v438;
    while (1)
    {
      uint64_t v87 = v83;
      while (1)
      {
        if ((v84 & 1) == 0)
        {
          --v87;
          uint64_t v88 = &v82[16 * v87];
          uint64_t v9 = *((void *)v88 + 1);
          uint64_t v86 = &v70[16 * *(void *)v88];
        }
        if (v9 > 15) {
          break;
        }
        if (v9 > 1)
        {
          int v89 = 2;
          for (uint64_t j = 1; j != v9; ++j)
          {
            int v91 = v89;
            do
            {
              int v92 = v91 - 1;
              BOOL v93 = &v86[16 * (v91 - 1)];
              unsigned int v94 = &v86[16 * (v91 - 2)];
              if (*(_DWORD *)v93 >= *(_DWORD *)v94) {
                break;
              }
              v454[0] = 0uLL;
              v454[0] = *(_OWORD *)v93;
              *(_OWORD *)BOOL v93 = *(_OWORD *)v94;
              *(_OWORD *)unsigned int v94 = v454[0];
              int v91 = v92;
            }
            while (v92 > 1);
            ++v89;
          }
        }
        char v84 = 0;
        uint64_t v9 = 0;
        if (v87 < 1) {
          goto LABEL_162;
        }
      }
      if ((unint64_t)v9 > 0x27) {
        break;
      }
      unint64_t v95 = (unint64_t)v9 >> 1;
      int v96 = *(_DWORD *)&v86[16 * ((unint64_t)v9 >> 1)];
      int v97 = *(_DWORD *)v86;
      int v98 = *(_DWORD *)&v86[16 * v9 - 16];
      if (*(_DWORD *)v86 >= v96)
      {
        if (v97 >= v98)
        {
          if (v96 < v98) {
            unint64_t v95 = v9 - 1;
          }
        }
        else
        {
          unint64_t v95 = 0;
        }
      }
      else if (v96 >= v98)
      {
        if (v97 >= v98) {
          unint64_t v95 = 0;
        }
        else {
          unint64_t v95 = v9 - 1;
        }
      }
LABEL_142:
      uint64_t v119 = 0;
      uint64_t v120 = 0;
      v454[0] = 0uLL;
      v454[0] = *(_OWORD *)v86;
      uint64_t v121 = 16 * v95;
      *(_OWORD *)uint64_t v86 = *(_OWORD *)&v86[v121];
      *(_OWORD *)&v86[v121] = v454[0];
      uint64_t v122 = v9 - 1;
      uint64_t v123 = 16;
      do
      {
        uint64_t v124 = &v86[v123];
        if (*(_DWORD *)&v86[v123] <= *(_DWORD *)v86)
        {
          ++v120;
          v454[0] = 0uLL;
          v454[0] = *(_OWORD *)v124;
          uint64_t v125 = &v86[16 * v120];
          *(_OWORD *)uint64_t v124 = *(_OWORD *)v125;
          *(_OWORD *)uint64_t v125 = v454[0];
          if (*(_DWORD *)v124 == *(_DWORD *)v86)
          {
            ++v119;
            v454[0] = 0uLL;
            v454[0] = *(_OWORD *)v125;
            *(_OWORD *)uint64_t v125 = *(_OWORD *)&v86[16 * v119];
            *(_OWORD *)&v86[16 * v119] = v454[0];
          }
        }
        v123 += 16;
        --v122;
      }
      while (v122);
      uint64_t v126 = v119 + 1;
      uint64_t v127 = 16 * v119;
      uint64_t v128 = 16 * v120 - 16 * v119;
      do
      {
        v454[0] = 0uLL;
        v454[0] = *(_OWORD *)&v86[v128];
        *(_OWORD *)&v86[v128] = *(_OWORD *)&v86[v127];
        *(_OWORD *)&v86[v127] = v454[0];
        --v126;
        v127 -= 16;
        v128 += 16;
      }
      while (v126 > 0);
      uint64_t v83 = v87 + 1;
      if (v87 + 1 >= v85)
      {
        uint64_t v129 = 2 * v85;
        uint64_t v82 = (char *)malloc_type_realloc(v82, 32 * v85, 0x17966CE3uLL);
        uint64_t v85 = v129;
      }
      float v130 = &v82[16 * v87];
      *(void *)float v130 = v120 + ((v86 - v438) >> 4) + 1;
      *((void *)v130 + 1) = v9 + ~v120;
      uint64_t v9 = v120 - v119;
      BOOL v131 = v120 == v119;
      uint64_t v70 = v438;
      char v84 = !v131;
      if (v87 < 0 && !v9) {
        goto LABEL_162;
      }
    }
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    if ((unint64_t)v9 <= 0x7D0) {
      uint64_t v101 = 8;
    }
    else {
      uint64_t v101 = 26;
    }
    if ((unint64_t)v9 <= 0x7D0) {
      unint64_t v102 = 3;
    }
    else {
      unint64_t v102 = 9;
    }
    while (1)
    {
      uint64_t v103 = (v9 - 1 + v99) / v101;
      int v104 = *(_DWORD *)&v86[16 * (v99 / v101)];
      int v105 = *(_DWORD *)&v86[16 * v103];
      uint64_t v106 = (2 * v9 - 2 + v99) / v101;
      int v107 = *(_DWORD *)&v86[16 * v106];
      if (v104 >= v105)
      {
        if (v104 < v107) {
          goto LABEL_123;
        }
        if (v105 < v107)
        {
LABEL_125:
          *((void *)v454 + v100) = v106;
          goto LABEL_117;
        }
      }
      else if (v105 >= v107)
      {
        if (v104 < v107) {
          goto LABEL_125;
        }
LABEL_123:
        *((void *)v454 + v100) = v99 / v101;
        goto LABEL_117;
      }
      *((void *)v454 + v100) = v103;
LABEL_117:
      ++v100;
      v99 += 3 * v9 - 3;
      if (v102 == v100)
      {
        while (1)
        {
          uint64_t v108 = 0;
          uint64_t v109 = 0;
          unint64_t v110 = v102;
          v102 /= 3uLL;
          if (v102 <= 1) {
            uint64_t v111 = 1;
          }
          else {
            uint64_t v111 = v102;
          }
          uint64_t v112 = 8 * v111;
          do
          {
            uint64_t v113 = *(void *)((char *)v454 + v108);
            uint64_t v114 = *(void *)((char *)v454 + v108 + 8);
            uint64_t v115 = *(void *)((char *)&v454[1] + v108);
            int v116 = *(_DWORD *)&v86[16 * v113];
            int v117 = *(_DWORD *)&v86[16 * v114];
            int v118 = *(_DWORD *)&v86[16 * v115];
            if (v116 >= v117)
            {
              if (v116 < v118) {
                goto LABEL_138;
              }
              if (v117 >= v118)
              {
LABEL_131:
                *(void *)((char *)v454 + v109) = v114;
                goto LABEL_132;
              }
            }
            else
            {
              if (v117 < v118) {
                goto LABEL_131;
              }
              if (v116 >= v118)
              {
LABEL_138:
                *(void *)((char *)v454 + v109) = v113;
                goto LABEL_132;
              }
            }
            *(void *)((char *)v454 + v109) = v115;
LABEL_132:
            v109 += 8;
            v108 += 24;
          }
          while (v112 != v109);
          if (v110 < 9)
          {
            unint64_t v95 = *(void *)&v454[0];
            goto LABEL_142;
          }
        }
      }
    }
  }
LABEL_162:
  free(v82);
  uint64_t v132 = (v437 - 1);
  if (v437 >= 1)
  {
    int v133 = 0;
    uint64_t v448 = 0;
    uint64_t v449 = 0;
    __src = 0;
    uint64_t v134 = 0;
    float32x2_t v135 = 0;
    uint64_t v136 = 0;
    uint64_t v137 = 0;
    int v138 = 0;
    float32x4_t v436 = v70 + 24;
    while (1)
    {
      uint64_t v439 = v134;
      if (v137 <= 0)
      {
        uint64_t v140 = 2 * v137;
        if (2 * v137 <= 1) {
          uint64_t v140 = 1;
        }
        if (v137) {
          uint64_t v141 = v140;
        }
        else {
          uint64_t v141 = 32;
        }
        int v142 = v133;
        unsigned int v143 = (float32x2_t **)malloc_type_realloc(v138, 8 * v141, 0xF9675DCDuLL);
        uint64_t v137 = v141;
        int v133 = v142;
        int v138 = v143;
      }
      *int v138 = *(float32x2_t **)&v438[16 * v133 + 8];
      int ptr = v135;
      int v441 = v133;
      if (v133 >= (int)v132)
      {
        uint64_t v440 = v137;
        uint64_t v151 = 1;
      }
      else
      {
        uint64_t v144 = 0;
        uint64_t v145 = v132 - v133;
        int v146 = &v436[2 * v133];
        do
        {
          uint64_t v151 = v144 + 1;
          if (*((_DWORD *)v146 - 6) != *((_DWORD *)v146 - 2))
          {
            uint64_t v440 = v137;
            int v154 = v441 + v144;
            goto LABEL_188;
          }
          if (v151 >= v137)
          {
            uint64_t v152 = v144 + 2;
            uint64_t v153 = 2 * v137;
            if (!v137) {
              uint64_t v153 = 32;
            }
            if (v153 > v151) {
              uint64_t v152 = v153;
            }
            if (v152)
            {
              uint64_t v147 = v138;
              uint64_t v148 = v152;
              uint64_t v149 = (float32x2_t **)malloc_type_realloc(v147, 8 * v152, 0xFA9C8A28uLL);
              uint64_t v137 = v148;
              int v138 = v149;
            }
            else
            {
              uint64_t v137 = 0;
            }
          }
          uint64_t v150 = (float32x2_t *)*v146;
          v146 += 2;
          v138[++v144] = v150;
        }
        while (v145 != v144);
        uint64_t v440 = v137;
        uint64_t v151 = v144 + 1;
        int v154 = v437 - 1;
LABEL_188:
        int v441 = v154;
      }
      size_t v155 = 4 * (v151 * v151);
      uint64_t v156 = v151;
      uint64_t v157 = (float32x4_t *)malloc_type_malloc(v155, 0x100004052888210uLL);
      float v443 = malloc_type_malloc(v155, 0x100004052888210uLL);
      uint64_t v158 = v156 << 32;
      float v159 = (int *)malloc_type_malloc(((v156 << 32) + 0x100000000) >> 29, 0x100004000313F17uLL);
      int v447 = v156;
      float v444 = (__int8 *)malloc_type_malloc(8 * (int)v156, 0x100004000313F17uLL);
      if (v136 >= 1)
      {
        float v160 = ptr + 1;
        do
        {
          float v161 = *v160;
          v160 += 3;
          free(v161);
          --v136;
        }
        while (v136);
      }
      unint64_t v162 = v447;
      uint64_t v163 = 4 * v447;
      int v445 = v447 - 1;
      if (v447 >= 1)
      {
        uint64_t v164 = 0;
        float v165 = &v157->f32[1];
        float v166 = (uint8x16_t **)(v138 + 1);
        uint64_t v167 = 1;
        do
        {
          uint64_t v168 = v164 + 1;
          if (v164 + 1 < v447)
          {
            float v169 = (uint8x16_t *)v138[v164];
            float v170 = v166;
            float32x2_t v171 = v165;
            uint64_t v172 = v447;
            do
            {
              float v173 = *v170++;
              uint8x16_t v174 = v169[2];
              uint8x16_t v175 = v169[3];
              uint8x16_t v176 = v173[2];
              uint8x16_t v177 = v173[3];
              int16x8_t v178 = (int16x8_t)vsubl_high_u8(v174, v176);
              int16x8_t v179 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v174.i8, *(uint8x8_t *)v176.i8);
              int16x8_t v180 = (int16x8_t)vsubl_high_u8(v175, v177);
              int16x8_t v181 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v175.i8, *(uint8x8_t *)v177.i8);
              uint8x16_t v182 = v169[4];
              uint8x16_t v183 = v169[5];
              uint8x16_t v184 = v173[4];
              uint8x16_t v185 = v173[5];
              int16x8_t v186 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v182.i8, *(uint8x8_t *)v184.i8);
              int16x8_t v187 = (int16x8_t)vsubl_high_u8(v182, v184);
              int16x8_t v188 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v183.i8, *(uint8x8_t *)v185.i8);
              int16x8_t v189 = (int16x8_t)vsubl_high_u8(v183, v185);
              int32x4_t v190 = vmull_s16(*(int16x4_t *)v187.i8, *(int16x4_t *)v187.i8);
              int32x4_t v191 = vmull_s16(*(int16x4_t *)v186.i8, *(int16x4_t *)v186.i8);
              int32x4_t v192 = vmull_high_s16(v186, v186);
              int32x4_t v193 = vmull_s16(*(int16x4_t *)v189.i8, *(int16x4_t *)v189.i8);
              int32x4_t v194 = vmull_s16(*(int16x4_t *)v188.i8, *(int16x4_t *)v188.i8);
              int32x4_t v195 = vmlal_high_s16(v192, v179, v179);
              int32x4_t v196 = vmlal_high_s16(vmull_high_s16(v187, v187), v178, v178);
              int32x4_t v197 = vmlal_s16(v191, *(int16x4_t *)v179.i8, *(int16x4_t *)v179.i8);
              int32x4_t v198 = vmlal_s16(v190, *(int16x4_t *)v178.i8, *(int16x4_t *)v178.i8);
              int32x4_t v199 = vmlal_high_s16(vmull_high_s16(v188, v188), v181, v181);
              int32x4_t v200 = vmlal_high_s16(vmull_high_s16(v189, v189), v180, v180);
              int32x4_t v201 = vmlal_s16(v194, *(int16x4_t *)v181.i8, *(int16x4_t *)v181.i8);
              uint8x16_t v202 = v169[6];
              uint8x16_t v203 = v169[7];
              uint8x16_t v204 = v173[6];
              uint8x16_t v205 = v173[7];
              int16x8_t v206 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v202.i8, *(uint8x8_t *)v204.i8);
              int32x4_t v207 = vmlal_s16(v193, *(int16x4_t *)v180.i8, *(int16x4_t *)v180.i8);
              int16x8_t v208 = (int16x8_t)vsubl_high_u8(v202, v204);
              int16x8_t v209 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v203.i8, *(uint8x8_t *)v205.i8);
              int16x8_t v210 = (int16x8_t)vsubl_high_u8(v203, v205);
              int32x4_t v211 = vmlal_s16(v198, *(int16x4_t *)v208.i8, *(int16x4_t *)v208.i8);
              int32x4_t v212 = vmlal_s16(v197, *(int16x4_t *)v206.i8, *(int16x4_t *)v206.i8);
              int32x4_t v213 = vmlal_high_s16(v196, v208, v208);
              int32x4_t v214 = vmlal_high_s16(v195, v206, v206);
              int32x4_t v215 = vmlal_s16(v207, *(int16x4_t *)v210.i8, *(int16x4_t *)v210.i8);
              int32x4_t v216 = vmlal_s16(v201, *(int16x4_t *)v209.i8, *(int16x4_t *)v209.i8);
              uint8x16_t v217 = v169[8];
              uint8x16_t v218 = v169[9];
              int32x4_t v219 = vmlal_high_s16(v200, v210, v210);
              uint8x16_t v220 = v173[8];
              uint8x16_t v221 = v173[9];
              int16x8_t v222 = (int16x8_t)vsubl_high_u8(v217, v220);
              int16x8_t v223 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v217.i8, *(uint8x8_t *)v220.i8);
              int16x8_t v224 = (int16x8_t)vsubl_high_u8(v218, v221);
              int32x4_t v225 = vmlal_high_s16(v199, v209, v209);
              int16x8_t v226 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v218.i8, *(uint8x8_t *)v221.i8);
              int32x4_t v227 = vmlal_high_s16(v214, v223, v223);
              int32x4_t v228 = vmlal_s16(v212, *(int16x4_t *)v223.i8, *(int16x4_t *)v223.i8);
              int32x4_t v229 = vmlal_high_s16(v225, v226, v226);
              int32x4_t v230 = vmlal_high_s16(v219, v224, v224);
              int32x4_t v231 = vmlal_s16(v216, *(int16x4_t *)v226.i8, *(int16x4_t *)v226.i8);
              uint8x16_t v232 = v169[10];
              uint8x16_t v233 = v169[11];
              int32x4_t v234 = vmlal_s16(v215, *(int16x4_t *)v224.i8, *(int16x4_t *)v224.i8);
              uint8x16_t v236 = v173[10];
              uint8x16_t v235 = v173[11];
              int16x8_t v237 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v232.i8, *(uint8x8_t *)v236.i8);
              int16x8_t v238 = (int16x8_t)vsubl_high_u8(v232, v236);
              int16x8_t v239 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v233.i8, *(uint8x8_t *)v235.i8);
              int16x8_t v240 = (int16x8_t)vsubl_high_u8(v233, v235);
              int32x4_t v241 = vmlal_s16(vmlal_s16(v211, *(int16x4_t *)v222.i8, *(int16x4_t *)v222.i8), *(int16x4_t *)v238.i8, *(int16x4_t *)v238.i8);
              int32x4_t v242 = vmlal_s16(v228, *(int16x4_t *)v237.i8, *(int16x4_t *)v237.i8);
              int32x4_t v243 = vmlal_high_s16(vmlal_high_s16(v213, v222, v222), v238, v238);
              int32x4_t v244 = vmlal_high_s16(v227, v237, v237);
              int32x4_t v245 = vmlal_s16(v234, *(int16x4_t *)v240.i8, *(int16x4_t *)v240.i8);
              int32x4_t v246 = vmlal_s16(v231, *(int16x4_t *)v239.i8, *(int16x4_t *)v239.i8);
              int32x4_t v247 = vmlal_high_s16(v230, v240, v240);
              uint8x16_t v248 = v169[12];
              uint8x16_t v249 = v169[13];
              uint8x16_t v250 = v173[12];
              uint8x16_t v251 = v173[13];
              int16x8_t v252 = (int16x8_t)vsubl_high_u8(v248, v250);
              int16x8_t v253 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v248.i8, *(uint8x8_t *)v250.i8);
              int16x8_t v254 = (int16x8_t)vsubl_high_u8(v249, v251);
              int16x8_t v255 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v249.i8, *(uint8x8_t *)v251.i8);
              int32x4_t v256 = vmlal_high_s16(v244, v253, v253);
              int32x4_t v257 = vmlal_high_s16(v243, v252, v252);
              int32x4_t v258 = vmlal_s16(v242, *(int16x4_t *)v253.i8, *(int16x4_t *)v253.i8);
              int32x4_t v259 = vmlal_s16(v241, *(int16x4_t *)v252.i8, *(int16x4_t *)v252.i8);
              int32x4_t v260 = vmlal_high_s16(vmlal_high_s16(v229, v239, v239), v255, v255);
              int32x4_t v261 = vmlal_high_s16(v247, v254, v254);
              uint8x16_t v262 = v169[14];
              uint8x16_t v263 = v169[15];
              int32x4_t v264 = vmlal_s16(v246, *(int16x4_t *)v255.i8, *(int16x4_t *)v255.i8);
              uint8x16_t v265 = v173[14];
              uint8x16_t v266 = v173[15];
              int16x8_t v267 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v262.i8, *(uint8x8_t *)v265.i8);
              int16x8_t v268 = (int16x8_t)vsubl_high_u8(v262, v265);
              int16x8_t v269 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v263.i8, *(uint8x8_t *)v266.i8);
              int32x4_t v270 = vmlal_s16(v245, *(int16x4_t *)v254.i8, *(int16x4_t *)v254.i8);
              int16x8_t v271 = (int16x8_t)vsubl_high_u8(v263, v266);
              int32x4_t v272 = vmlal_s16(v259, *(int16x4_t *)v268.i8, *(int16x4_t *)v268.i8);
              int32x4_t v273 = vmlal_high_s16(v257, v268, v268);
              int32x4_t v274 = vmlal_s16(v270, *(int16x4_t *)v271.i8, *(int16x4_t *)v271.i8);
              int32x4_t v275 = vmlal_s16(v264, *(int16x4_t *)v269.i8, *(int16x4_t *)v269.i8);
              int32x4_t v276 = vmlal_high_s16(v261, v271, v271);
              uint8x16_t v277 = v169[16];
              uint8x16_t v278 = v169[17];
              int32x4_t v279 = vmlal_high_s16(v260, v269, v269);
              uint8x16_t v281 = v173[16];
              uint8x16_t v280 = v173[17];
              int16x8_t v282 = (int16x8_t)vsubl_high_u8(v277, v281);
              int16x8_t v283 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v277.i8, *(uint8x8_t *)v281.i8);
              int16x8_t v284 = (int16x8_t)vsubl_high_u8(v278, v280);
              int16x8_t v285 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v278.i8, *(uint8x8_t *)v280.i8);
              *v171++ = (float)vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vmlal_s16(v275, *(int16x4_t *)v285.i8, *(int16x4_t *)v285.i8), vmlal_s16(vmlal_s16(v258, *(int16x4_t *)v267.i8, *(int16x4_t *)v267.i8), *(int16x4_t *)v283.i8, *(int16x4_t *)v283.i8)), vaddq_s32(vmlal_s16(v274, *(int16x4_t *)v284.i8, *(int16x4_t *)v284.i8), vmlal_s16(v272, *(int16x4_t *)v282.i8, *(int16x4_t *)v282.i8))), vaddq_s32(vaddq_s32(vmlal_high_s16(v279, v285, v285), vmlal_high_s16(vmlal_high_s16(v256, v267, v267), v283, v283)), vaddq_s32(vmlal_high_s16(v276, v284, v284), vmlal_high_s16(v273, v282, v282)))))* 0.0039062;
              --v172;
            }
            while (v167 != v172);
          }
          ++v167;
          float v165 = (float *)((char *)v165 + v163 + 4);
          ++v166;
          uint64_t v164 = v168;
        }
        while (v168 != v447);
        uint64_t v286 = 0;
        long long v287 = v157;
        float v288 = v157;
        do
        {
          v157->i32[v286 + ((v286 * v158) >> 32)] = 0;
          if (v286)
          {
            uint64_t v289 = 0;
            float v290 = v287;
            do
            {
              v288->i32[v289++] = v290->i32[0];
              float v290 = (float32x4_t *)((char *)v290 + v163);
            }
            while (v286 != v289);
          }
          ++v286;
          float v288 = (float32x4_t *)((char *)v288 + v163);
          long long v287 = (float32x4_t *)((char *)v287 + 4);
        }
        while (v286 != v447);
        if (v447 < 8uLL || v444 < &v157->i8[4 * v447] && v157 < (float32x4_t *)&v444[8 * v447 - 4])
        {
          unint64_t v291 = 0;
LABEL_209:
          char v292 = &v444[8 * v291 + 4];
          do
          {
            *((_DWORD *)v292 - 1) = v157->i32[v291];
            *(_DWORD *)char v292 = v291;
            v292 += 8;
            ++v291;
          }
          while (v447 != v291);
          goto LABEL_211;
        }
        unint64_t v291 = v447 - (unint64_t)(v447 & 7);
        float32x4_t v418 = (float *)(v444 + 32);
        int32x4_t v419 = (int32x4_t)xmmword_21BB7A770;
        float32x4_t v420 = v157 + 1;
        unint64_t v421 = v291;
        v422.i64[0] = 0x400000004;
        v422.i64[1] = 0x400000004;
        v423.i64[0] = 0x800000008;
        v423.i64[1] = 0x800000008;
        do
        {
          v457.val[1] = (float32x4_t)vaddq_s32(v419, v422);
          float32x4_t v424 = v420[-1];
          v457.val[0] = *v420;
          int32x4_t v425 = v418 - 8;
          vst2q_f32(v425, *(float32x4x2_t *)(&v419 - 1));
          vst2q_f32(v418, v457);
          int32x4_t v419 = vaddq_s32(v419, v423);
          v418 += 16;
          v420 += 2;
          v421 -= 8;
        }
        while (v421);
        if ((v447 & 7) != 0) {
          goto LABEL_209;
        }
      }
LABEL_211:
      int v450 = v159;
      int v293 = (char *)malloc_type_malloc(0x200uLL, 0x44A2D10AuLL);
      float v446 = v138;
      if (v158)
      {
        uint64_t v294 = 0;
        BOOL v295 = 1;
        uint64_t v296 = 32;
        int v297 = (float *)v444;
        while (1)
        {
          uint64_t v298 = v294;
          while (1)
          {
            if (!v295)
            {
              --v298;
              uint64_t v299 = &v293[16 * v298];
              unint64_t v162 = *((void *)v299 + 1);
              int v297 = (float *)&v444[8 * *(void *)v299];
            }
            if ((uint64_t)v162 > 15) {
              break;
            }
            if ((uint64_t)v162 > 1)
            {
              int v300 = v297 + 2;
              uint64_t v301 = 2;
              for (uint64_t k = 1; k != v162; ++k)
              {
                uint64_t v303 = v300;
                uint64_t v304 = v301;
                do
                {
                  timeval v305 = &v297[2 * (v304 - 2)];
                  if ((float)(*v303 - *v305) >= 0.0) {
                    break;
                  }
                  uint64_t v306 = *(void *)v303;
                  *(void *)uint64_t v303 = *(void *)v305;
                  v303 -= 2;
                  *(void *)timeval v305 = v306;
                  --v304;
                }
                while (v304 > 1);
                ++v301;
                v300 += 2;
              }
            }
            BOOL v295 = 0;
            unint64_t v162 = 0;
            if (v298 < 1) {
              goto LABEL_280;
            }
          }
          if (v162 > 0x27) {
            break;
          }
          unint64_t v307 = v162 >> 1;
          float v308 = *v297;
          float v309 = v297[2 * (v162 >> 1)];
          float v310 = v297[2 * v162 - 2];
          if ((float)(*v297 - v309) >= 0.0)
          {
            if ((float)(v308 - v310) >= 0.0)
            {
              if ((float)(v309 - v310) < 0.0) {
                unint64_t v307 = v162 - 1;
              }
            }
            else
            {
              unint64_t v307 = 0;
            }
          }
          else if ((float)(v309 - v310) >= 0.0)
          {
            if ((float)(v308 - v310) >= 0.0) {
              unint64_t v307 = 0;
            }
            else {
              unint64_t v307 = v162 - 1;
            }
          }
LABEL_262:
          uint64_t v331 = 0;
          uint64_t v332 = 0;
          uint64_t v333 = 2 * v307;
          uint64_t v334 = *(void *)v297;
          *(void *)int v297 = *(void *)&v297[v333];
          *(void *)&v297[v333] = v334;
          unint64_t v335 = v162 - 1;
          uint64_t v336 = 2;
          do
          {
            if ((float)(v297[v336] - *v297) <= 0.0)
            {
              ++v332;
              uint64_t v337 = *(void *)&v297[v336];
              *(void *)&v297[v336] = *(void *)&v297[2 * v332];
              *(void *)&v297[2 * v332] = v337;
              if ((float)(v297[v336] - *v297) == 0.0)
              {
                ++v331;
                *(void *)&v297[2 * v332] = *(void *)&v297[2 * v331];
                *(void *)&v297[2 * v331] = v337;
              }
            }
            v336 += 2;
            --v335;
          }
          while (v335);
          uint64_t v338 = 8 * v332 - 8 * v331;
          uint64_t v339 = v331;
          do
          {
            uint64_t v340 = *(void *)((char *)v297 + v338);
            *(void *)((char *)v297 + v33_Block_object_dispose(&STACK[0x220], 8) = *(void *)&v297[2 * v339];
            *(void *)&v297[2 * v339] = v340;
            v338 += 8;
            BOOL v80 = v339-- <= 0;
          }
          while (!v80);
          uint64_t v294 = v298 + 1;
          if (v298 + 1 >= v296)
          {
            uint64_t v341 = 2 * v296;
            int v293 = (char *)malloc_type_realloc(v293, 32 * v296, 0x3B4D2A35uLL);
            uint64_t v296 = v341;
          }
          float v342 = &v293[16 * v298];
          *(void *)float v342 = v332 + (((char *)v297 - v444) >> 3) + 1;
          *((void *)v342 + 1) = v162 + ~v332;
          unint64_t v162 = v332 - v331;
          BOOL v295 = v332 != v331;
          if (v298 < 0 && !v162) {
            goto LABEL_280;
          }
        }
        uint64_t v311 = 0;
        uint64_t v312 = 0;
        uint64_t v313 = 26;
        if (v162 <= 0x7D0) {
          uint64_t v313 = 8;
        }
        unint64_t v314 = 3;
        if (v162 > 0x7D0) {
          unint64_t v314 = 9;
        }
        while (1)
        {
          uint64_t v315 = (uint64_t)(v162 - 1 + v311) / v313;
          float v316 = v297[2 * (v311 / v313)];
          float v317 = v297[2 * v315];
          uint64_t v318 = (uint64_t)(2 * v162 - 2 + v311) / v313;
          float v319 = v297[2 * v318];
          if ((float)(v316 - v317) >= 0.0)
          {
            if ((float)(v316 - v319) < 0.0) {
              goto LABEL_243;
            }
            if ((float)(v317 - v319) < 0.0)
            {
LABEL_245:
              *((void *)v454 + v312) = v318;
              goto LABEL_237;
            }
          }
          else if ((float)(v317 - v319) >= 0.0)
          {
            if ((float)(v316 - v319) < 0.0) {
              goto LABEL_245;
            }
LABEL_243:
            *((void *)v454 + v312) = v311 / v313;
            goto LABEL_237;
          }
          *((void *)v454 + v312) = v315;
LABEL_237:
          ++v312;
          v311 += 3 * v162 - 3;
          if (v314 == v312)
          {
            while (1)
            {
              uint64_t v320 = 0;
              uint64_t v321 = 0;
              unint64_t v322 = v314;
              v314 /= 3uLL;
              if (v314 <= 1) {
                uint64_t v323 = 1;
              }
              else {
                uint64_t v323 = v314;
              }
              uint64_t v324 = 8 * v323;
              do
              {
                uint64_t v325 = *(void *)((char *)v454 + v320);
                uint64_t v326 = *(void *)((char *)v454 + v320 + 8);
                float v327 = v297[2 * v325];
                float v328 = v297[2 * v326];
                uint64_t v329 = *(void *)((char *)&v454[1] + v320);
                float v330 = v297[2 * v329];
                if ((float)(v327 - v328) >= 0.0)
                {
                  if ((float)(v327 - v330) < 0.0) {
                    goto LABEL_258;
                  }
                  if ((float)(v328 - v330) >= 0.0)
                  {
LABEL_251:
                    *(void *)((char *)v454 + v321) = v326;
                    goto LABEL_252;
                  }
                }
                else
                {
                  if ((float)(v328 - v330) < 0.0) {
                    goto LABEL_251;
                  }
                  if ((float)(v327 - v330) >= 0.0)
                  {
LABEL_258:
                    *(void *)((char *)v454 + v321) = v325;
                    goto LABEL_252;
                  }
                }
                *(void *)((char *)v454 + v321) = v329;
LABEL_252:
                v321 += 8;
                v320 += 24;
              }
              while (v324 != v321);
              if (v322 < 9)
              {
                unint64_t v307 = *(void *)&v454[0];
                goto LABEL_262;
              }
            }
          }
        }
      }
LABEL_280:
      free(v293);
      int v343 = v447;
      if (v447 <= 0)
      {
        float32x4_t v346 = v450;
        *int v450 = 0;
        *(void *)int v450 = 0;
        uint64_t v393 = v450 + 1;
        if (!v450[1]) {
          goto LABEL_374;
        }
      }
      else
      {
        uint64_t v344 = 0;
        float32x4_t v345 = v443;
        float32x4_t v346 = v450;
        do
        {
          int v347 = *(_DWORD *)&v444[8 * v344 + 4] * v447;
          float32x4_t v348 = (int *)(v444 + 4);
          float32x4_t v349 = v345;
          uint64_t v350 = v447;
          do
          {
            int v351 = *v348;
            v348 += 2;
            *v349++ = v157->i32[v351 + v347];
            --v350;
          }
          while (v350);
          ++v344;
          float32x4_t v345 = (_DWORD *)((char *)v345 + v163);
        }
        while (v344 != v447);
        uint64_t v352 = 0;
        signed int v353 = 0;
        *int v450 = 0;
        uint64_t v354 = (char *)v443;
        do
        {
          int v355 = v353 * v343;
          uint64_t v356 = v353;
          if (v343 <= v353 + 1) {
            ++v353;
          }
          else {
            signed int v353 = v343;
          }
          float32x4_t v357 = &v354[4 * v355];
          do
          {
            if (fabsf(*(float *)&v357[4 * v356]) >= v2)
            {
              signed int v353 = v356;
              *(int32x2_t *)&v346[2 * v352 + 1] = vdup_n_s32(v356);
              if (v356 != v445) {
                goto LABEL_297;
              }
              goto LABEL_287;
            }
            ++v356;
          }
          while (v356 < v447);
          *(int32x2_t *)&v346[2 * v352 + 1] = vdup_n_s32(v353);
          if (v353 != v445)
          {
LABEL_297:
            uint64_t v358 = (char *)malloc_type_malloc(0x200uLL, 0x5DFA11BBuLL);
            if (v447 != v353)
            {
              uint64_t v359 = 0;
              float32x4_t v360 = &v354[4 * v353 * (v447 + 1)];
              unint64_t v361 = v447 - v353;
              char v362 = 1;
              uint64_t v363 = 32;
              float32x4_t v364 = v360;
              while (1)
              {
                uint64_t v365 = v359;
                while (1)
                {
                  if ((v362 & 1) == 0)
                  {
                    --v365;
                    float32x4_t v366 = &v358[16 * v365];
                    unint64_t v361 = *((void *)v366 + 1);
                    float32x4_t v364 = &v360[4 * *(void *)v366];
                  }
                  if ((uint64_t)v361 > 15) {
                    break;
                  }
                  if ((uint64_t)v361 > 1)
                  {
                    int v367 = 2;
                    for (uint64_t m = 1; m != v361; ++m)
                    {
                      int v369 = v367;
                      do
                      {
                        int v370 = v369 - 1;
                        float v371 = &v364[4 * (v369 - 1)];
                        float v372 = &v364[4 * (v369 - 2)];
                        if (v371 - v372 >= 0) {
                          break;
                        }
                        int v373 = *(_DWORD *)v371;
                        *(_DWORD *)float v371 = *(_DWORD *)v372;
                        *(_DWORD *)float v372 = v373;
                        int v369 = v370;
                      }
                      while (v370 > 1);
                      ++v367;
                    }
                  }
                  char v362 = 0;
                  unint64_t v361 = 0;
                  if (v365 < 1) {
                    goto LABEL_286;
                  }
                }
                if (v361 > 0x27) {
                  break;
                }
                unint64_t v374 = v361 >> 1;
                if (v361 >> 1 >= v361 - 1) {
                  unint64_t v374 = v361 - 1;
                }
LABEL_346:
                uint64_t v390 = 4 * v374;
                int v391 = *(_DWORD *)v364;
                *(_DWORD *)float32x4_t v364 = *(_DWORD *)&v364[v390];
                *(_DWORD *)&v364[v390] = v391;
                uint64_t v359 = v365 + 1;
                if (v365 + 1 >= v363)
                {
                  uint64_t v442 = 2 * v363;
                  uint64_t v358 = (char *)malloc_type_realloc(v358, 32 * v363, 0xAEAE4FF4uLL);
                  uint64_t v363 = v442;
                }
                char v362 = 0;
                uint64_t v392 = &v358[16 * v365];
                *(void *)uint64_t v392 = ((v364 - v360) >> 2) + 1;
                *((void *)v392 + 1) = v361 - 1;
                unint64_t v361 = 0;
                if (v365 < 0) {
                  goto LABEL_286;
                }
              }
              uint64_t v375 = 0;
              uint64_t v376 = 0;
              uint64_t v377 = 26;
              if (v361 <= 0x7D0) {
                uint64_t v377 = 8;
              }
              unint64_t v378 = 3;
              if (v361 > 0x7D0) {
                unint64_t v378 = 9;
              }
              while (2)
              {
                uint64_t v379 = v375 / v377;
                uint64_t v380 = (uint64_t)(v361 - 1 + v375) / v377;
                uint64_t v381 = (uint64_t)(2 * v361 - 2 + v375) / v377;
                if (v375 / v377 >= v380)
                {
                  if (v379 < v381) {
                    goto LABEL_327;
                  }
                  if (v380 < v381) {
                    goto LABEL_329;
                  }
                }
                else if (v380 >= v381)
                {
                  if (v379 < v381)
                  {
LABEL_329:
                    *((void *)v454 + v376) = v381;
LABEL_321:
                    ++v376;
                    v375 += 3 * v361 - 3;
                    if (v378 != v376) {
                      continue;
                    }
                    while (2)
                    {
                      uint64_t v382 = 0;
                      uint64_t v383 = 0;
                      unint64_t v384 = v378;
                      v378 /= 3uLL;
                      if (v378 <= 1) {
                        uint64_t v385 = 1;
                      }
                      else {
                        uint64_t v385 = v378;
                      }
                      uint64_t v386 = 8 * v385;
LABEL_337:
                      uint64_t v387 = *(void *)((char *)v454 + v382);
                      uint64_t v388 = *(void *)((char *)v454 + v382 + 8);
                      uint64_t v389 = *(void *)((char *)&v454[1] + v382);
                      if (v387 >= v388)
                      {
                        if (v387 < v389) {
                          goto LABEL_342;
                        }
                        if (v388 < v389) {
                          goto LABEL_344;
                        }
                      }
                      else if (v388 >= v389)
                      {
                        if (v387 < v389)
                        {
LABEL_344:
                          *(void *)((char *)v454 + v383) = v389;
LABEL_336:
                          v383 += 8;
                          v382 += 24;
                          if (v386 == v383)
                          {
                            if (v384 < 9)
                            {
                              unint64_t v374 = *(void *)&v454[0];
                              goto LABEL_346;
                            }
                            continue;
                          }
                          goto LABEL_337;
                        }
LABEL_342:
                        *(void *)((char *)v454 + v383) = v387;
                        goto LABEL_336;
                      }
                      break;
                    }
                    *(void *)((char *)v454 + v383) = v388;
                    goto LABEL_336;
                  }
LABEL_327:
                  *((void *)v454 + v376) = v379;
                  goto LABEL_321;
                }
                break;
              }
              *((void *)v454 + v376) = v380;
              goto LABEL_321;
            }
LABEL_286:
            free(v358);
            uint64_t v354 = (char *)v443;
            float32x4_t v346 = v450;
            int v343 = v447;
          }
LABEL_287:
          ++v352;
        }
        while (v343 > v353);
        *(void *)&v346[2 * v352] = 0;
        uint64_t v393 = v346 + 1;
        if (!v346[1])
        {
LABEL_374:
          uint64_t v136 = 0;
          goto LABEL_375;
        }
      }
      uint64_t v394 = 0;
      int v395 = v346;
      do
      {
        uint64_t v136 = v394 + 1;
        if (v394 >= v448)
        {
          uint64_t v396 = 2 * v448;
          if (!v448) {
            uint64_t v396 = 10;
          }
          if (v396 <= v394) {
            uint64_t v396 = v394 + 1;
          }
          if (v396)
          {
            uint64_t v448 = v396;
            int ptr = (void **)malloc_type_realloc(ptr, 24 * v396, 0x800791D6uLL);
          }
          else
          {
            uint64_t v448 = 0;
          }
        }
        float v397 = (uint64_t *)&ptr[3 * v394];
        *float v397 = 0;
        v397[1] = 0;
        v397[2] = 0;
        uint64_t v398 = *v395;
        int v399 = *v393;
        if ((int)v398 < *v393)
        {
          uint64_t v400 = &ptr[3 * v394];
          uint64_t v403 = (uint64_t)v400[2];
          int32x4_t v401 = (uint64_t *)(v400 + 2);
          uint64_t v402 = v403;
          float32x4_t v404 = (void **)(v401 - 1);
          uint64_t v405 = *v397;
          do
          {
            if (v405 >= v402)
            {
              uint64_t v406 = 2 * v402;
              if (!v402) {
                uint64_t v406 = 32;
              }
              if (v406 <= v405) {
                uint64_t v402 = v405 + 1;
              }
              else {
                uint64_t v402 = v406;
              }
              if (v402)
              {
                *float32x4_t v404 = malloc_type_realloc(*v404, 8 * v402, 0x80966612uLL);
                uint64_t v405 = *v397;
                int v399 = *v393;
              }
              *int32x4_t v401 = v402;
            }
            *float v397 = v405 + 1;
            *((void *)*v404 + v405++) = v446[v398++];
          }
          while (v398 < v399);
        }
        float32x4_t v346 = v450;
        int v395 = &v450[2 * v136];
        uint64_t v393 = v395 + 1;
        uint64_t v394 = v136;
      }
      while (v395[1]);
LABEL_375:
      free(v157);
      free(v443);
      free(v346);
      free(v444);
      if (v136 >= 1)
      {
        uint64_t v407 = 0;
        float32x2_t v135 = ptr;
        int v138 = v446;
        uint64_t v408 = v439;
        while (1)
        {
          uint64_t v410 = (uint64_t)ptr[3 * v407];
          if (v410 < 1)
          {
            float32x2_t v412 = 0;
            float v413 = 0.0;
          }
          else
          {
            float v411 = (float32x2_t **)ptr[3 * v407 + 1];
            float32x2_t v412 = 0;
            float v413 = 0.0;
            do
            {
              float v414 = *v411++;
              float32x2_t v412 = vadd_f32(v412, *v414);
              float v413 = v413 + 1.0;
              --v410;
            }
            while (v410);
          }
          float v415 = *v446;
          **float v446 = vmul_n_f32(v412, 1.0 / v413);
          uint64_t v139 = v408 + 1;
          if (v408 >= v449)
          {
            uint64_t v416 = 2 * v449;
            if (2 * v449 <= v408) {
              uint64_t v416 = v408 + 1;
            }
            if (v416)
            {
              uint64_t v449 = v416;
              uint64_t v417 = v408;
              int v409 = (char *)malloc_type_realloc(__src, 288 * v416, 0x42467C6EuLL);
              uint64_t v408 = v417;
              goto LABEL_379;
            }
            uint64_t v449 = 0;
          }
          int v409 = __src;
LABEL_379:
          __src = v409;
          memcpy(&v409[288 * v408], v415, 0x120uLL);
          ++v407;
          uint64_t v408 = v139;
          if (v407 == v136) {
            goto LABEL_165;
          }
        }
      }
      uint64_t v139 = v439;
      float32x2_t v135 = ptr;
      int v138 = v446;
LABEL_165:
      uint64_t v137 = v440;
      int v133 = v441 + 1;
      uint64_t v134 = v139;
      uint64_t v132 = (v437 - 1);
      if (v441 + 1 >= v437) {
        goto LABEL_395;
      }
    }
  }
  int v138 = 0;
  uint64_t v136 = 0;
  float32x2_t v135 = 0;
  uint64_t v139 = 0;
  __src = 0;
LABEL_395:
  uint64_t v426 = *v435;
  uint64_t v427 = v435[2];
  if (v139 <= v427)
  {
    uint64_t v431 = v139 - v426;
    if (v139 <= v426) {
      goto LABEL_402;
    }
  }
  else
  {
    int32x4_t v428 = v138;
    uint64_t v429 = 2 * v427;
    if (v429 <= v139) {
      uint64_t v430 = v139;
    }
    else {
      uint64_t v430 = v429;
    }
    if (v430) {
      v435[1] = (uint64_t)malloc_type_realloc((void *)v435[1], 288 * v430, 0xD8D1DA35uLL);
    }
    v435[2] = v430;
    int v138 = v428;
    uint64_t v431 = v139 - v426;
    if (v139 <= v426)
    {
LABEL_402:
      uint64_t *v435 = v139;
      float32x4_t v432 = __src;
      if (v139 < 1) {
        goto LABEL_404;
      }
      goto LABEL_403;
    }
  }
  bzero((void *)(v435[1] + 288 * *v435), 288 * v431);
  uint64_t *v435 = v139;
  float32x4_t v432 = __src;
  if (v139 >= 1) {
LABEL_403:
  }
    memcpy((void *)v435[1], v432, 288 * v139);
LABEL_404:
  free(v432);
  free(v138);
  if (v136 >= 1)
  {
    float32x4_t v433 = v135 + 1;
    do
    {
      float32x4_t v434 = *v433;
      v433 += 3;
      free(v434);
      --v136;
    }
    while (v136);
  }
  free(v135);
  free(v438);
}

uint64_t g_triangulate_inv_depthf(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, uint64_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, float a15, float a16, uint64_t a17)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  long long v46 = 0u;
  long long v47 = 0u;
  v38[0] = a1;
  v38[1] = a2;
  v38[2] = a3;
  int v39 = LODWORD(a9);
  int v40 = a4;
  uint64_t v41 = *(void *)a6;
  float v42 = a6[2];
  uint64_t v43 = v41;
  float v44 = v42;
  uint64_t v45 = 0;
  LODWORD(v46) = 0;
  *((void *)&v46 + 1) = a5;
  *(void *)&long long v47 = a8;
  DWORD2(v47) = 2143289344;
  if (a7)
  {
    uint64_t v45 = *a7;
    LODWORD(v46) = *((_DWORD *)a7 + 2);
  }
  tri_inv_depthf_calc_JtJ_Jtr_err((uint64_t)v38, (uint64_t)&v48, (uint64_t)&v51, a9, 0.0, a11, a12, a13, a14, a15, a16);
  float v19 = v18;
  float v60 = sqrtf(*(float *)&v48);
  float v61 = *((float *)&v48 + 1) / v60;
  float v62 = sqrtf(*(float *)&v49 - (float)(v61 * v61));
  float v63 = *((float *)&v48 + 2) / v60;
  float v20 = (float)(*((float *)&v49 + 1) - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(*((float *)&v48 + 1) / v60)))
      / v62;
  float v64 = v20;
  float v65 = sqrtf((float)(v50 - (float)(v63 * v63)) - (float)(v20 * v20));
  float v21 = (float)(v52 - (float)((float)(*((float *)&v48 + 1) / v60) * (float)(v51 / v60))) / v62;
  float v58 = v21;
  float v59 = (float)((float)(v53 - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(v51 / v60))) - (float)(v20 * v21))
      / v65;
  float v56 = v59 / v65;
  float v57 = v51 / v60;
  float v22 = (float)(v21 - (float)(v20 * (float)(v59 / v65))) / v62;
  float v54 = (float)((float)((float)(v51 / v60) - (float)((float)(*((float *)&v48 + 1) / v60) * v22))
              - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(v59 / v65)))
      / v60;
  float v55 = v22;
  uint64_t v43 = v41;
  float v44 = v42;
  *(float *)&uint64_t v41 = *(float *)&v41 + v54;
  *((float *)&v41 + 1) = v22 + *((float *)&v41 + 1);
  float v42 = (float)(v59 / v65) + v42;
  uint64_t result = tri_inv_depthf_calc_JtJ_Jtr_err_1((uint64_t)v38);
  if (*(float *)&v24 >= v19) {
    goto LABEL_5;
  }
  tri_inv_depthf_calc_JtJ_Jtr_err((uint64_t)v38, (uint64_t)&v48, (uint64_t)&v51, v24, v25, v26, v27, v28, v29, v30, v31);
  float v33 = v32;
  float v60 = sqrtf(*(float *)&v48);
  float v61 = *((float *)&v48 + 1) / v60;
  float v62 = sqrtf(*(float *)&v49 - (float)(v61 * v61));
  float v63 = *((float *)&v48 + 2) / v60;
  float v34 = (float)(*((float *)&v49 + 1) - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(*((float *)&v48 + 1) / v60)))
      / v62;
  float v64 = v34;
  float v65 = sqrtf((float)(v50 - (float)(v63 * v63)) - (float)(v34 * v34));
  float v35 = (float)(v52 - (float)((float)(*((float *)&v48 + 1) / v60) * (float)(v51 / v60))) / v62;
  float v58 = v35;
  float v59 = (float)((float)(v53 - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(v51 / v60))) - (float)(v34 * v35))
      / v65;
  float v56 = v59 / v65;
  float v57 = v51 / v60;
  float v36 = (float)(v35 - (float)(v34 * (float)(v59 / v65))) / v62;
  float v54 = (float)((float)((float)(v51 / v60) - (float)((float)(*((float *)&v48 + 1) / v60) * v36))
              - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(v59 / v65)))
      / v60;
  float v55 = v36;
  float v44 = v42;
  uint64_t v43 = v41;
  *(float *)&uint64_t v41 = *(float *)&v41 + v54;
  *((float *)&v41 + 1) = v36 + *((float *)&v41 + 1);
  float v42 = (float)(v59 / v65) + v42;
  uint64_t result = tri_inv_depthf_calc_JtJ_Jtr_err_1((uint64_t)v38);
  if (*(float *)&v24 >= v33)
  {
LABEL_5:
    uint64_t v41 = v43;
    float v42 = v44;
  }
  *(void *)a6 = v41;
  a6[2] = v42;
  if (a17)
  {
    uint64_t result = tri_inv_depthf_calc_JtJ_Jtr_err((uint64_t)v38, (uint64_t)&v48, (uint64_t)&v51, v24, v25, v26, v27, v28, v29, v30, v31);
    long long v37 = v49;
    *(_OWORD *)a17 = v48;
    *(_OWORD *)(a17 + 16) = v37;
    *(float *)(a17 + 32) = v50;
  }
  return result;
}

uint64_t tri_inv_depthf_calc_JtJ_Jtr_err(uint64_t result, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10, float a11)
{
  uint64_t v12 = *(unsigned int *)(result + 28);
  uint64_t v13 = *(float **)(result + 80);
  if (a2)
  {
    *(_DWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = 0;
    *(void *)a3 = 0;
  }
  if ((int)v12 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(float **)(result + 72);
    uint64_t v16 = *(void *)(result + 16);
    uint64_t v17 = (float *)(*(void *)(result + 8) + 4);
    float v18 = (float *)(*(void *)result + 24);
    float v19 = 0.0;
    do
    {
      float v115 = v19;
      float v24 = *(float *)(result + 36);
      float v25 = *(float *)(result + 40);
      float v26 = v15[1];
      float v28 = *(v18 - 6);
      float v27 = *(v18 - 5);
      float v30 = v15[2];
      float v29 = v15[3];
      float v32 = *(v18 - 4);
      float v31 = *(v18 - 3);
      float v33 = v15[6];
      float v34 = v15[7];
      float v35 = v18[1];
      float v36 = (float)((float)((float)(v28 * *v15) + 0.0) + (float)(v31 * v29)) + (float)(*v18 * v33);
      float v37 = v15[4];
      float v38 = v15[5];
      float v39 = (float)((float)((float)(v28 * v26) + 0.0) + (float)(v31 * v37)) + (float)(*v18 * v34);
      float v40 = v15[8];
      float v41 = (float)((float)((float)(v28 * v30) + 0.0) + (float)(v31 * v38)) + (float)(*v18 * v40);
      float v42 = *(v18 - 2);
      float v43 = *(v18 - 1);
      float v44 = (float)((float)((float)(v27 * *v15) + 0.0) + (float)(v42 * v29)) + (float)(v35 * v33);
      float v45 = v18[2];
      float v46 = (float)((float)((float)(v32 * *v15) + 0.0) + (float)(v43 * v29)) + (float)(v45 * v33);
      float v47 = (float)((float)((float)(v27 * v26) + 0.0) + (float)(v42 * v37)) + (float)(v35 * v34);
      float v48 = (float)((float)(v32 * v26) + 0.0) + (float)(v43 * v37);
      float v49 = (float)((float)((float)(v27 * v30) + 0.0) + (float)(v42 * v38)) + (float)(v35 * v40);
      float v50 = v48 + (float)(v45 * v34);
      float v51 = (float)((float)((float)(v32 * v30) + 0.0) + (float)(v43 * v38)) + (float)(v45 * v40);
      float v52 = 1.0 / *(float *)(result + 32);
      float v53 = v15[9] - v18[3];
      float v54 = v15[10] - v18[4];
      float v55 = v15[11] - v18[5];
      float v56 = (float)((float)((float)(v28 * v53) + 0.0) + (float)(v31 * v54)) + (float)(*v18 * v55);
      float v57 = (float)((float)((float)(v27 * v53) + 0.0) + (float)(v42 * v54)) + (float)(v35 * v55);
      float v58 = (float)((float)((float)(v32 * v53) + 0.0) + (float)(v43 * v54)) + (float)(v45 * v55);
      float v59 = (float)((float)((float)((float)(v52 * v24) * v39) + (float)(v36 * v52)) + (float)(v41 * (float)(v52 * v25)))
          + v56;
      float v60 = (float)((float)((float)((float)(v52 * v24) * v47) + (float)(v44 * v52)) + (float)(v49 * (float)(v52 * v25)))
          + v57;
      float v61 = (float)((float)((float)((float)(v52 * v24) * v50) + (float)(v46 * v52)) + (float)(v51 * (float)(v52 * v25)))
          + v58;
      if (v59 <= 0.0) {
        float v62 = NAN;
      }
      else {
        float v62 = 1.0 / v59;
      }
      if (a2)
      {
        float v63 = (float)(v62 * v62) * (float)-v60;
        float v64 = (float)(v62 * v62) * (float)-v61;
        float v65 = -(float)(v52 * v52);
        float v66 = v65 * (float)((float)(v36 + (float)(v39 * v24)) + (float)(v41 * v25));
        float v113 = (float)((float)(v65 * (float)((float)(v46 + (float)(v50 * v24)) + (float)(v51 * v25))) * v62)
             + (float)(v64 * v66);
        float v114 = (float)((float)(v65 * (float)((float)(v44 + (float)(v47 * v24)) + (float)(v49 * v25))) * v62)
             + (float)(v63 * v66);
        float v112 = (float)((float)(v52 * v47) * v62) + (float)(v63 * (float)(v52 * v39));
        a10 = (float)((float)(v52 * v50) * v62) + (float)(v64 * (float)(v52 * v39));
        a11 = (float)((float)(v52 * v49) * v62) + (float)(v63 * (float)(v52 * v41));
        float v11 = (float)((float)(v52 * v51) * v62) + (float)(v64 * (float)(v52 * v41));
      }
      float v67 = *(v17 - 1) - (float)(v60 * v62);
      float v68 = *v17 - (float)(v61 * v62);
      if (v16)
      {
        float v69 = (float *)(v16 + 4 * (v14 & 0xFFFFFFFC));
        float v70 = *v69;
        float v71 = v69[1];
        float v72 = v69[2];
        float v73 = v69[3];
        float v19 = v115
            + (float)((float)((float)((float)((float)((float)(*v69 * v67) + 0.0) + (float)(v71 * v68)) * v67) + 0.0)
                    + (float)((float)((float)((float)(v72 * v67) + 0.0) + (float)(v73 * v68)) * v68));
        if (!a2) {
          goto LABEL_6;
        }
        float v74 = (float)((float)(v70 * v114) + 0.0) + (float)(v72 * v113);
        float v75 = (float)((float)(v71 * v114) + 0.0) + (float)(v73 * v113);
        float v76 = (float)((float)(v70 * v112) + 0.0) + (float)(v72 * a10);
        float v77 = (float)((float)(v71 * v112) + 0.0) + (float)(v73 * a10);
        float v78 = (float)((float)(v70 * a11) + 0.0) + (float)(v72 * v11);
        float v79 = (float)((float)(v71 * a11) + 0.0) + (float)(v73 * v11);
        float v80 = (float)(*(float *)(a3 + 4) + (float)(v76 * v67)) + (float)(v77 * v68);
        *(float *)a3 = (float)(*(float *)a3 + (float)(v74 * v67)) + (float)(v75 * v68);
        *(float *)(a3 + 4) = v80;
        *(float *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = (float)(*(float *)(a3 + 8) + (float)(v78 * v67)) + (float)(v79 * v68);
        float v81 = (float)((float)(v114 * v74) + 0.0) + (float)(v113 * v75);
        float v82 = (float)((float)(v112 * v74) + 0.0) + (float)(a10 * v75);
        float v83 = (float)((float)(a11 * v74) + 0.0) + (float)(v11 * v75);
        float v84 = (float)((float)(v114 * v76) + 0.0) + (float)(v113 * v77);
        float v85 = (float)((float)(v112 * v76) + 0.0) + (float)(a10 * v77);
        float v86 = (float)((float)(a11 * v76) + 0.0) + (float)(v11 * v77);
        float v87 = (float)((float)(v114 * v78) + 0.0) + (float)(v113 * v79);
        float v88 = (float)((float)(v112 * v78) + 0.0) + (float)(a10 * v79);
        float v89 = (float)((float)(a11 * v78) + 0.0) + (float)(v11 * v79);
      }
      else
      {
        float v90 = *(float *)(result + 24);
        float v91 = v67 * v90;
        float v92 = v68 * v90;
        float v19 = v115 + (float)((float)(v92 * v92) + (float)(v91 * v91));
        if (!a2) {
          goto LABEL_6;
        }
        float v93 = v114 * v90;
        float v94 = v113 * v90;
        float v95 = v112 * v90;
        a10 = a10 * v90;
        a11 = a11 * v90;
        float v11 = v11 * v90;
        float v96 = (float)(*(float *)(a3 + 4) + (float)((float)(v112 * v90) * v91)) + (float)(a10 * v92);
        *(float *)a3 = (float)(*(float *)a3 + (float)((float)(v114 * v90) * v91)) + (float)((float)(v113 * v90) * v92);
        *(float *)(a3 + 4) = v96;
        *(float *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = (float)(*(float *)(a3 + 8) + (float)(a11 * v91)) + (float)(v11 * v92);
        float v81 = (float)((float)(v93 * v93) + 0.0) + (float)(v94 * v94);
        float v84 = (float)((float)((float)(v112 * v90) * (float)(v114 * v90)) + 0.0) + (float)(a10 * (float)(v113 * v90));
        float v113 = v94;
        float v114 = v93;
        float v87 = (float)((float)(a11 * v93) + 0.0) + (float)(v11 * v94);
        float v85 = (float)((float)(v95 * v95) + 0.0) + (float)(a10 * a10);
        float v112 = v95;
        float v88 = (float)((float)(a11 * v95) + 0.0) + (float)(v11 * a10);
        float v89 = (float)((float)(a11 * a11) + 0.0) + (float)(v11 * v11);
        float v86 = v88;
        float v83 = v87;
        float v82 = (float)((float)(v95 * v93) + 0.0) + (float)(a10 * v94);
      }
      float v20 = v82 + *(float *)(a2 + 4);
      *(float *)a2 = v81 + *(float *)a2;
      *(float *)(a2 + 4) = v20;
      float v21 = v84 + *(float *)(a2 + 12);
      *(float *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = v83 + *(float *)(a2 + 8);
      *(float *)(a2 + 12) = v21;
      float v22 = v86 + *(float *)(a2 + 20);
      *(float *)(a2 + 16) = v85 + *(float *)(a2 + 16);
      *(float *)(a2 + 20) = v22;
      float v23 = v88 + *(float *)(a2 + 28);
      *(float *)(a2 + 24) = v87 + *(float *)(a2 + 24);
      *(float *)(a2 + 2_Block_object_dispose(&STACK[0x220], 8) = v23;
      *(float *)(a2 + 32) = v89 + *(float *)(a2 + 32);
LABEL_6:
      v14 += 4;
      v17 += 2;
      v18 += 12;
    }
    while (4 * v12 != v14);
  }
  if (v13)
  {
    float v97 = *(float *)(result + 56) - *(float *)(result + 32);
    float v98 = *(float *)(result + 60) - *(float *)(result + 36);
    float v99 = *(float *)(result + 64) - *(float *)(result + 40);
    if (!a2) {
      return result;
    }
    float v100 = *(float *)(a2 + 4);
    *(float *)a2 = *v13 + *(float *)a2;
    *(float *)(a2 + 4) = v100 + v13[1];
    float v101 = *(float *)(a2 + 12);
    *(float *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = *(float *)(a2 + 8) + v13[2];
    *(float *)(a2 + 12) = v101 + v13[3];
    float v102 = *(float *)(a2 + 20);
    *(float *)(a2 + 16) = *(float *)(a2 + 16) + v13[4];
    *(float *)(a2 + 20) = v102 + v13[5];
    float v103 = *(float *)(a2 + 28);
    *(float *)(a2 + 24) = *(float *)(a2 + 24) + v13[6];
    *(float *)(a2 + 2_Block_object_dispose(&STACK[0x220], 8) = v103 + v13[7];
    *(float *)(a2 + 32) = *(float *)(a2 + 32) + v13[8];
    float v104 = *(float *)(a3 + 4);
    float v105 = *(float *)a3 + (float)(*v13 * v97);
    *(float *)a3 = v105;
    float v106 = v105 + (float)(v13[1] * v98);
    *(float *)a3 = v106;
    *(float *)a3 = v106 + (float)(v13[2] * v99);
    float v107 = v104 + (float)(v13[3] * v97);
    *(float *)(a3 + 4) = v107;
    float v108 = v107 + (float)(v13[4] * v98);
    *(float *)(a3 + 4) = v108;
    *(float *)(a3 + 4) = v108 + (float)(v13[5] * v99);
    float v109 = *(float *)(a3 + 8) + (float)(v13[6] * v97);
    *(float *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = v109;
    float v110 = v109 + (float)(v13[7] * v98);
    *(float *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = v110;
    *(float *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = v110 + (float)(v13[8] * v99);
  }
  else if (!a2)
  {
    return result;
  }
  float v111 = *(float *)a2;
  if (*(float *)a2 < 0.000001) {
    float v111 = 0.000001;
  }
  *(float *)a2 = v111;
  return result;
}

uint64_t tri_inv_depthf_calc_JtJ_Jtr_err_1(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 28);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    float v3 = *(float **)(result + 72);
    uint64_t v4 = *(void *)(result + 16);
    float v5 = *v3;
    float v6 = v3[1];
    float v7 = v3[6];
    float v8 = v3[7];
    float v10 = v3[2];
    float v9 = v3[3];
    float v11 = v3[4];
    float v12 = v3[5];
    float v13 = 1.0 / *(float *)(result + 32);
    float v14 = v13 * *(float *)(result + 36);
    float v15 = v3[8];
    float v16 = v3[9];
    float v17 = v3[10];
    float v18 = v3[11];
    float v19 = v13 * *(float *)(result + 40);
    uint64_t v20 = 4 * v1;
    float v21 = (float *)(*(void *)(result + 8) + 4);
    float v22 = (float *)(*(void *)result + 24);
    float v23 = 0.0;
    do
    {
      while (1)
      {
        float v24 = *(v22 - 6);
        float v25 = *(v22 - 5);
        float v27 = *(v22 - 4);
        float v26 = *(v22 - 3);
        float v28 = *(v22 - 2);
        float v29 = *(v22 - 1);
        float v30 = v16 - v22[3];
        float v31 = v17 - v22[4];
        float v32 = v18 - v22[5];
        float v33 = (float)((float)((float)(v14
                                    * (float)((float)((float)((float)(v24 * v6) + 0.0) + (float)(v26 * v11))
                                            + (float)(*v22 * v8)))
                            + (float)((float)((float)((float)((float)(v24 * v5) + 0.0) + (float)(v26 * v9))
                                            + (float)(*v22 * v7))
                                    * v13))
                    + (float)((float)((float)((float)((float)(v24 * v10) + 0.0) + (float)(v26 * v12))
                                    + (float)(*v22 * v15))
                            * v19))
            + (float)((float)((float)((float)(v24 * v30) + 0.0) + (float)(v26 * v31)) + (float)(*v22 * v32));
        float v34 = (float)((float)((float)(v14
                                    * (float)((float)((float)((float)(v25 * v6) + 0.0) + (float)(v28 * v11))
                                            + (float)(v22[1] * v8)))
                            + (float)((float)((float)((float)((float)(v25 * v5) + 0.0) + (float)(v28 * v9))
                                            + (float)(v22[1] * v7))
                                    * v13))
                    + (float)((float)((float)((float)((float)(v25 * v10) + 0.0) + (float)(v28 * v12))
                                    + (float)(v22[1] * v15))
                            * v19))
            + (float)((float)((float)((float)(v25 * v30) + 0.0) + (float)(v28 * v31)) + (float)(v22[1] * v32));
        float v35 = (float)((float)((float)(v14
                                    * (float)((float)((float)((float)(v27 * v6) + 0.0) + (float)(v29 * v11))
                                            + (float)(v22[2] * v8)))
                            + (float)((float)((float)((float)((float)(v27 * v5) + 0.0) + (float)(v29 * v9))
                                            + (float)(v22[2] * v7))
                                    * v13))
                    + (float)((float)((float)((float)((float)(v27 * v10) + 0.0) + (float)(v29 * v12))
                                    + (float)(v22[2] * v15))
                            * v19))
            + (float)((float)((float)((float)(v27 * v30) + 0.0) + (float)(v29 * v31)) + (float)(v22[2] * v32));
        float v36 = 1.0 / v33;
        BOOL v37 = v33 > 0.0;
        float v38 = NAN;
        if (v37) {
          float v38 = v36;
        }
        float v39 = *(v21 - 1) - (float)(v34 * v38);
        float v40 = *v21 - (float)(v35 * v38);
        if (!v4) {
          break;
        }
        float v23 = v23
            + (float)((float)((float)((float)((float)((float)(*(float *)(v4 + 4 * (v2 & 0xFFFFFFFC))
                                                            * v39)
                                                    + 0.0)
                                            + (float)(*(float *)(v4 + 4 * (v2 & 0xFFFFFFFC) + 4) * v40))
                                    * v39)
                            + 0.0)
                    + (float)((float)((float)((float)(*(float *)(v4 + 4 * (v2 & 0xFFFFFFFC) + 8) * v39)
                                            + 0.0)
                                    + (float)(*(float *)(v4 + 4 * (v2 & 0xFFFFFFFC) + 12) * v40))
                            * v40));
        v2 += 4;
        v21 += 2;
        v22 += 12;
        if (v20 == v2) {
          return result;
        }
      }
      float v23 = v23
          + (float)((float)((float)(v40 * *(float *)(result + 24)) * (float)(v40 * *(float *)(result + 24)))
                  + (float)((float)(v39 * *(float *)(result + 24)) * (float)(v39 * *(float *)(result + 24))));
      v2 += 4;
      v21 += 2;
      v22 += 12;
    }
    while (v20 != v2);
  }
  return result;
}

uint64_t vl_dump_stop(uint64_t result)
{
  if (*(unsigned char *)(result + 548))
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 32))
    {
      *(_DWORD *)(result + 32) = 0;
      pthread_join(*(pthread_t *)(result + 8), 0);
      free(*(void **)(v1 + 1136));
      free(*(void **)(v1 + 1160));
      free(*(void **)(v1 + 1400));
      free(*(void **)(v1 + 1640));
      free(*(void **)(v1 + 2296));
      free(*(void **)(v1 + 2320));
      if (*(_DWORD *)(v1 + 2280))
      {
        free(*(void **)(v1 + 2272));
        *(_DWORD *)(v1 + 2280) = 0;
      }
      uint64_t result = pthread_mutex_destroy((pthread_mutex_t *)(v1 + 1064));
      *(_DWORD *)uint64_t v1 = 0;
    }
  }
  return result;
}

uint64_t vl_dump_clear(uint64_t a1)
{
  return nftw((const char *)(a1 + 548), (int (__cdecl *)(const char *, const stat *, int, FTW *))unlink_cb, 64, 5);
}

BOOL unlink_cb(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  BOOL result = remove(a1, a2);
  BOOL v4 = result;
  if (result)
  {
    perror((const char *)a1);
    return v4;
  }
  return result;
}

uint64_t vl_dump_update(uint64_t result, uint64_t *a2, int a3, float a4)
{
  if (result)
  {
    uint64_t v4 = result;
    if (*(_DWORD *)result)
    {
      if ((*(unsigned char *)(result + 4) & 0x10) != 0 && *(_DWORD *)(result + 32) && *(unsigned char *)(result + 548))
      {
        v19.__darwin_time_t tv_sec = 0;
        v19.tv_nsec = 0;
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, &v19);
        double v8 = (double)(v19.tv_nsec - *(void *)(v4 + 24)) * 0.000000001 + (double)(v19.tv_sec - *(void *)(v4 + 16));
        uint64_t v9 = *a2;
        uint64_t v10 = a2[1];
        uint64_t v11 = a2[2];
        pthread_mutex_lock((pthread_mutex_t *)(v4 + 1064));
        uint64_t v12 = *(void *)(v4 + 1128);
        uint64_t v13 = *(void *)(v4 + 1144);
        if (v12 >= v13)
        {
          uint64_t v14 = 2 * v13;
          BOOL v15 = v13 == 0;
          uint64_t v16 = 6;
          if (!v15) {
            uint64_t v16 = v14;
          }
          if (v16 <= v12) {
            uint64_t v17 = v12 + 1;
          }
          else {
            uint64_t v17 = v16;
          }
          if (v17)
          {
            *(void *)(v4 + 1136) = realloc(*(void **)(v4 + 1136), 40 * v17);
            uint64_t v12 = *(void *)(v4 + 1128);
          }
          *(void *)(v4 + 1144) = v17;
        }
        *(void *)(v4 + 112_Block_object_dispose(&STACK[0x220], 8) = v12 + 1;
        uint64_t v18 = *(void *)(v4 + 1136) + 40 * v12;
        *(double *)uint64_t v18 = v8;
        *(void *)(v18 + _Block_object_dispose(&STACK[0x220], 8) = v9;
        *(void *)(v18 + 16) = v10;
        *(void *)(v18 + 24) = v11;
        *(float *)(v18 + 32) = a4;
        *(_DWORD *)(v18 + 36) = a3;
        return pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1064));
      }
    }
  }
  return result;
}

uint64_t vl_dump_locate(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v4 = result;
    if (*(_DWORD *)result)
    {
      if ((*(unsigned char *)(result + 4) & 1) != 0 && *(_DWORD *)(result + 32) && *(unsigned char *)(result + 548))
      {
        double v8 = (char *)malloc(0x2C8uLL);
        double v9 = *(double *)(a3 + 88);
        if (v9 == 0.0)
        {
          v26.__darwin_time_t tv_sec = 0;
          v26.tv_nsec = 0;
          clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, &v26);
          double v9 = (double)(v26.tv_nsec - *(void *)(v4 + 24)) * 0.000000001 + (double)(v26.tv_sec - *(void *)(v4 + 16));
        }
        *(double *)double v8 = v9;
        int v10 = *(_DWORD *)(a2 + 12);
        int v11 = *(_DWORD *)(a2 + 16);
        *((_DWORD *)v8 + 176) = v11;
        int v12 = *(_DWORD *)(a2 + 8);
        *((_DWORD *)v8 + 174) = v12;
        *((_DWORD *)v8 + 175) = v10;
        if (v11) {
          __assert_rtn("vl_dump_locate", "vl_dump.c", 1721, "image->type == 0 && \"Only support grey scale image\"");
        }
        size_t v13 = v10 * v12;
        uint64_t v14 = malloc(v13);
        *((void *)v8 + 86) = v14;
        memcpy(v14, *(const void **)a2, v13);
        long long v15 = *(_OWORD *)(a3 + 144);
        *(_OWORD *)(v8 + 64_Block_object_dispose(&STACK[0x220], 8) = *(_OWORD *)(a3 + 128);
        *(_OWORD *)(v8 + 664) = v15;
        *((void *)v8 + 85) = *(void *)(a3 + 160);
        long long v16 = *(_OWORD *)(a3 + 80);
        *(_OWORD *)(v8 + 584) = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(v8 + 600) = v16;
        long long v17 = *(_OWORD *)(a3 + 112);
        *(_OWORD *)(v8 + 616) = *(_OWORD *)(a3 + 96);
        *(_OWORD *)(v8 + 632) = v17;
        long long v18 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(v8 + 520) = *(_OWORD *)a3;
        *(_OWORD *)(v8 + 536) = v18;
        long long v19 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(v8 + 552) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(v8 + 56_Block_object_dispose(&STACK[0x220], 8) = v19;
        if (a4) {
          __strcpy_chk();
        }
        pthread_mutex_lock((pthread_mutex_t *)(v4 + 1064));
        uint64_t v20 = *(void *)(v4 + 1152);
        uint64_t v21 = *(void *)(v4 + 1168);
        if (v20 >= v21)
        {
          uint64_t v22 = 2 * v21;
          BOOL v23 = v21 == 0;
          uint64_t v24 = 32;
          if (!v23) {
            uint64_t v24 = v22;
          }
          if (v24 <= v20) {
            uint64_t v25 = v20 + 1;
          }
          else {
            uint64_t v25 = v24;
          }
          if (v25)
          {
            *(void *)(v4 + 1160) = realloc(*(void **)(v4 + 1160), 8 * v25);
            uint64_t v20 = *(void *)(v4 + 1152);
          }
          *(void *)(v4 + 116_Block_object_dispose(&STACK[0x220], 8) = v25;
        }
        *(void *)(v4 + 1152) = v20 + 1;
        *(void *)(*(void *)(v4 + 1160) + 8 * v20) = v8;
        return pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1064));
      }
    }
  }
  return result;
}

void vl_dump_kpts(uint64_t a1, uint64_t *a2)
{
  vl_dump_detail_add_hash(a1, (uint64_t)"vl_kpts", a2, 0, 0);
  if (a1 && *(_DWORD *)a1 && (*(unsigned char *)(a1 + 4) & 2) != 0 && *(_DWORD *)(a1 + 32) && *(unsigned char *)(a1 + 548))
  {
    uint64_t v4 = (double *)malloc(0x38uLL);
    v13.__darwin_time_t tv_sec = 0;
    v13.tv_nsec = 0;
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, &v13);
    double *v4 = (double)(v13.tv_nsec - *(void *)(a1 + 24)) * 0.000000001 + (double)(v13.tv_sec - *(void *)(a1 + 16));
    uint64_t v5 = *a2;
    if (*a2 <= 0)
    {
      v4[2] = 0.0;
      *((void *)v4 + 3) = v5;
      *((void *)v4 + 1) = v5;
    }
    else
    {
      float v6 = malloc(288 * v5);
      *((void *)v4 + 2) = v6;
      bzero(v6, 288 * v5);
      *((void *)v4 + 3) = v5;
      *((void *)v4 + 1) = v5;
      memcpy(v6, (const void *)a2[1], 288 * v5);
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1064));
    uint64_t v7 = *(void *)(a1 + 1392);
    uint64_t v8 = *(void *)(a1 + 1408);
    if (v7 >= v8)
    {
      uint64_t v9 = 2 * v8;
      BOOL v10 = v8 == 0;
      uint64_t v11 = 32;
      if (!v10) {
        uint64_t v11 = v9;
      }
      if (v11 <= v7) {
        uint64_t v12 = v7 + 1;
      }
      else {
        uint64_t v12 = v11;
      }
      if (v12)
      {
        *(void *)(a1 + 1400) = realloc(*(void **)(a1 + 1400), 8 * v12);
        uint64_t v7 = *(void *)(a1 + 1392);
      }
      *(void *)(a1 + 140_Block_object_dispose(&STACK[0x220], 8) = v12;
    }
    *(void *)(a1 + 1392) = v7 + 1;
    *(void *)(*(void *)(a1 + 1400) + 8 * v7) = v4;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1064));
  }
}

__n128 vl_dump_detail_add_hash(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  result.n128_u64[0] = 0;
  long long v44 = 0u;
  if (!a1 || !*(_DWORD *)a1 || (*(unsigned char *)(a1 + 4) & 8) == 0) {
    return result;
  }
  if (a3)
  {
    HIDWORD(v44) = *a3;
    unint64_t v9 = 288 * *a3;
    if (v9)
    {
      unint64_t v10 = 0;
      uint64_t v11 = (char *)a3[1];
      do
      {
        uint64_t v12 = *v11++;
        unint64_t v10 = (1025 * (v10 + v12)) ^ ((1025 * (v10 + v12)) >> 6);
        --v9;
      }
      while (v9);
      unint64_t v9 = 9 * v10;
    }
    uint64_t v45 = 32769 * (v9 ^ (v9 >> 11));
    __strcpy_chk();
    *(void *)&long long v44 = 0x2020207374704BLL;
    uint64_t v13 = *(void *)(a1 + 1664);
    uint64_t v14 = *(void *)(a1 + 1680);
    if (v13 >= v14)
    {
      uint64_t v15 = 2 * v14;
      BOOL v16 = v14 == 0;
      uint64_t v17 = 4;
      if (!v16) {
        uint64_t v17 = v15;
      }
      if (v17 <= v13) {
        uint64_t v18 = v13 + 1;
      }
      else {
        uint64_t v18 = v17;
      }
      if (v18)
      {
        *(void *)(a1 + 1672) = realloc(*(void **)(a1 + 1672), 56 * v18);
        uint64_t v13 = *(void *)(a1 + 1664);
      }
      *(void *)(a1 + 1680) = v18;
    }
    *(void *)(a1 + 1664) = v13 + 1;
    uint64_t v19 = *(void *)(a1 + 1672) + 56 * v13;
    __n128 result = 0u;
    *(void *)(v19 + 4_Block_object_dispose(&STACK[0x220], 8) = v45;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = v44;
    *(_OWORD *)uint64_t v19 = 0u;
  }
  if (a4)
  {
    uint64_t v20 = *a4;
    HIDWORD(v44) = *a4;
    uint64_t v21 = 8 * a4[3];
    if (v21)
    {
      unint64_t v22 = 0;
      BOOL v23 = (char *)a4[4];
      do
      {
        uint64_t v24 = *v23++;
        unint64_t v22 = (1025 * (v22 + v24)) ^ ((1025 * (v22 + v24)) >> 6);
        --v21;
      }
      while (v21);
      uint64_t v25 = 8 * v20;
      if (!v25) {
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v22 = 0;
      uint64_t v25 = 8 * v20;
      if (!v25)
      {
LABEL_28:
        unint64_t v46 = 32769 * ((9 * v22) ^ ((9 * v22) >> 11));
        __strcpy_chk();
        *(void *)&long long v44 = 0x7365686374614DLL;
        uint64_t v28 = *(void *)(a1 + 1664);
        uint64_t v29 = *(void *)(a1 + 1680);
        if (v28 >= v29)
        {
          uint64_t v30 = 2 * v29;
          BOOL v16 = v29 == 0;
          uint64_t v31 = 4;
          if (!v16) {
            uint64_t v31 = v30;
          }
          if (v31 <= v28) {
            uint64_t v32 = v28 + 1;
          }
          else {
            uint64_t v32 = v31;
          }
          if (v32)
          {
            *(void *)(a1 + 1672) = realloc(*(void **)(a1 + 1672), 56 * v32);
            uint64_t v28 = *(void *)(a1 + 1664);
          }
          *(void *)(a1 + 1680) = v32;
        }
        *(void *)(a1 + 1664) = v28 + 1;
        uint64_t v33 = *(void *)(a1 + 1672) + 56 * v28;
        __n128 result = 0u;
        *(void *)(v33 + 4_Block_object_dispose(&STACK[0x220], 8) = v46;
        *(_OWORD *)(v33 + 16) = 0u;
        *(_OWORD *)(v33 + 32) = v44;
        *(_OWORD *)uint64_t v33 = 0u;
        goto LABEL_38;
      }
    }
    timespec v26 = (char *)a4[1];
    do
    {
      uint64_t v27 = *v26++;
      unint64_t v22 = (1025 * (v22 + v27)) ^ ((1025 * (v22 + v27)) >> 6);
      --v25;
    }
    while (v25);
    goto LABEL_28;
  }
LABEL_38:
  if (a5)
  {
    HIDWORD(v44) = *a5;
    unint64_t v34 = 12 * *a5;
    if (v34)
    {
      unint64_t v35 = 0;
      float v36 = (char *)a5[1];
      do
      {
        uint64_t v37 = *v36++;
        unint64_t v35 = (1025 * (v35 + v37)) ^ ((1025 * (v35 + v37)) >> 6);
        --v34;
      }
      while (v34);
      unint64_t v34 = 9 * v35;
    }
    uint64_t v47 = 32769 * (v34 ^ (v34 >> 11));
    __strcpy_chk();
    *(void *)&long long v44 = 0x20736B63617254;
    uint64_t v38 = *(void *)(a1 + 1664);
    uint64_t v39 = *(void *)(a1 + 1680);
    if (v38 >= v39)
    {
      uint64_t v40 = 2 * v39;
      BOOL v16 = v39 == 0;
      uint64_t v41 = 4;
      if (!v16) {
        uint64_t v41 = v40;
      }
      if (v41 <= v38) {
        uint64_t v42 = v38 + 1;
      }
      else {
        uint64_t v42 = v41;
      }
      if (v42)
      {
        *(void *)(a1 + 1672) = realloc(*(void **)(a1 + 1672), 56 * v42);
        uint64_t v38 = *(void *)(a1 + 1664);
      }
      *(void *)(a1 + 1680) = v42;
    }
    *(void *)(a1 + 1664) = v38 + 1;
    uint64_t v43 = *(void *)(a1 + 1672) + 56 * v38;
    __n128 result = 0u;
    *(void *)(v43 + 4_Block_object_dispose(&STACK[0x220], 8) = v47;
    *(_OWORD *)(v43 + 16) = 0u;
    *(_OWORD *)(v43 + 32) = v44;
    *(_OWORD *)uint64_t v43 = 0u;
  }
  return result;
}

uint64_t vl_dump_result(uint64_t result, uint64_t a2, _OWORD *a3, int a4)
{
  if (result)
  {
    uint64_t v4 = result;
    if (*(_DWORD *)result)
    {
      if ((*(unsigned char *)(result + 4) & 4) != 0 && *(_DWORD *)(result + 32) && *(unsigned char *)(result + 548))
      {
        uint64_t v8 = (char *)malloc(0x118uLL);
        v22.__darwin_time_t tv_sec = 0;
        v22.tv_nsec = 0;
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, &v22);
        *(double *)uint64_t v8 = (double)(v22.tv_nsec - *(void *)(v4 + 24)) * 0.000000001
                      + (double)(v22.tv_sec - *(void *)(v4 + 16));
        long long v9 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(v8 + 200) = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(v8 + 216) = v9;
        *(_OWORD *)(v8 + 232) = *(_OWORD *)(a2 + 224);
        *((void *)v8 + 31) = *(void *)(a2 + 240);
        long long v10 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(v8 + 136) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(v8 + 152) = v10;
        long long v11 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(v8 + 16_Block_object_dispose(&STACK[0x220], 8) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(v8 + 184) = v11;
        long long v12 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(v8 + 8_Block_object_dispose(&STACK[0x220], 8) = v12;
        long long v13 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(v8 + 104) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(v8 + 120) = v13;
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(v8 + _Block_object_dispose(&STACK[0x220], 8) = *(_OWORD *)a2;
        *(_OWORD *)(v8 + 24) = v14;
        long long v15 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(v8 + 56) = v15;
        *((_OWORD *)v8 + 16) = *a3;
        *((_DWORD *)v8 + 6_Block_object_dispose(&STACK[0x220], 8) = a4;
        pthread_mutex_lock((pthread_mutex_t *)(v4 + 1064));
        uint64_t v16 = *(void *)(v4 + 1632);
        uint64_t v17 = *(void *)(v4 + 1648);
        if (v16 >= v17)
        {
          uint64_t v18 = 2 * v17;
          BOOL v19 = v17 == 0;
          uint64_t v20 = 32;
          if (!v19) {
            uint64_t v20 = v18;
          }
          if (v20 <= v16) {
            uint64_t v21 = v16 + 1;
          }
          else {
            uint64_t v21 = v20;
          }
          if (v21)
          {
            *(void *)(v4 + 1640) = realloc(*(void **)(v4 + 1640), 8 * v21);
            uint64_t v16 = *(void *)(v4 + 1632);
          }
          *(void *)(v4 + 164_Block_object_dispose(&STACK[0x220], 8) = v21;
        }
        *(void *)(v4 + 1632) = v16 + 1;
        *(void *)(*(void *)(v4 + 1640) + 8 * v16) = v8;
        return pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1064));
      }
    }
  }
  return result;
}

uint64_t vl_dump_stats(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(_DWORD *)result)
    {
      if ((*(unsigned char *)(result + 4) & 0x20) != 0 && *(_DWORD *)(result + 32) && *(unsigned char *)(result + 548))
      {
        uint64_t v4 = (void **)malloc(0x200uLL);
        v11.__darwin_time_t tv_sec = 0;
        v11.tv_nsec = 0;
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, &v11);
        *(double *)uint64_t v4 = (double)(v11.tv_nsec - *(void *)(v2 + 24)) * 0.000000001
                      + (double)(v11.tv_sec - *(void *)(v2 + 16));
        vl_stats_get(a2, v4 + 1);
        pthread_mutex_lock((pthread_mutex_t *)(v2 + 1064));
        uint64_t v5 = *(void *)(v2 + 2312);
        uint64_t v6 = *(void *)(v2 + 2328);
        if (v5 >= v6)
        {
          uint64_t v7 = 2 * v6;
          BOOL v8 = v6 == 0;
          uint64_t v9 = 32;
          if (!v8) {
            uint64_t v9 = v7;
          }
          if (v9 <= v5) {
            uint64_t v10 = v5 + 1;
          }
          else {
            uint64_t v10 = v9;
          }
          if (v10)
          {
            *(void *)(v2 + 2320) = realloc(*(void **)(v2 + 2320), 8 * v10);
            uint64_t v5 = *(void *)(v2 + 2312);
          }
          *(void *)(v2 + 232_Block_object_dispose(&STACK[0x220], 8) = v10;
        }
        *(void *)(v2 + 2312) = v5 + 1;
        *(void *)(*(void *)(v2 + 2320) + 8 * v5) = v4;
        return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 1064));
      }
    }
  }
  return result;
}

void vl_dump_detail(uint64_t a1, uint64_t a2, double *a3)
{
  if (a1 && *(_DWORD *)a1 && (*(unsigned char *)(a1 + 4) & 8) != 0)
  {
    long long v5 = *(_OWORD *)a3;
    long long v6 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(a1 + 2192) = *((_OWORD *)a3 + 2);
    *(_OWORD *)(a1 + 2176) = v6;
    *(_OWORD *)(a1 + 2160) = v5;
    long long v7 = *((_OWORD *)a3 + 3);
    long long v8 = *((_OWORD *)a3 + 4);
    long long v9 = *((_OWORD *)a3 + 5);
    *(_OWORD *)(a1 + 2256) = *((_OWORD *)a3 + 6);
    *(_OWORD *)(a1 + 2240) = v9;
    *(_OWORD *)(a1 + 2224) = v8;
    *(_OWORD *)(a1 + 220_Block_object_dispose(&STACK[0x220], 8) = v7;
    unsigned long long v44 = 0uLL;
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)&v44);
    *(double *)(a1 + 1656) = (double)(uint64_t)(*((void *)&v44 + 1) - *(void *)(a1 + 24)) * 0.000000001
                           + (double)(uint64_t)(v44 - *(void *)(a1 + 16));
    if (*(uint64_t *)(a1 + 1832) >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      do
      {
        long long v12 = (float64x2_t *)(*(void *)(a1 + 1840) + v10);
        float64x2_t v13 = vcvtq_f64_f32(vcvt_f32_f64(v12[1]));
        float64x2_t v14 = vcvtq_f64_f32(vcvt_f32_f64(v12[3]));
        float64x2_t v15 = vcvtq_f64_f32(vcvt_f32_f64(v12[2]));
        float32x2_t v16 = vcvt_f32_f64(v12[4]);
        float64x2_t v17 = vcvtq_f64_f32(vcvt_f32_f64(v12[5]));
        unsigned long long v44 = (unsigned __int128)vcvtq_f64_f32(vcvt_f32_f64(*v12));
        float64x2_t v45 = v13;
        float64x2_t v46 = v15;
        float64x2_t v47 = v14;
        float64x2_t v48 = vcvtq_f64_f32(v16);
        float64x2_t v49 = v17;
        g_camera_local_to_global(a3, (double *)&v44, v12->f64);
        ++v11;
        v10 += 96;
      }
      while (*(void *)(a1 + 1832) > v11);
    }
    if (*(uint64_t *)(a1 + 1880) >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = (float64x2_t *)(*(void *)(a1 + 1888) + v18);
        float64x2_t v21 = vcvtq_f64_f32(vcvt_f32_f64(v20[1]));
        float64x2_t v22 = vcvtq_f64_f32(vcvt_f32_f64(v20[3]));
        float64x2_t v23 = vcvtq_f64_f32(vcvt_f32_f64(v20[2]));
        float32x2_t v24 = vcvt_f32_f64(v20[4]);
        float64x2_t v25 = vcvtq_f64_f32(vcvt_f32_f64(v20[5]));
        unsigned long long v44 = (unsigned __int128)vcvtq_f64_f32(vcvt_f32_f64(*v20));
        float64x2_t v45 = v21;
        float64x2_t v46 = v23;
        float64x2_t v47 = v22;
        float64x2_t v48 = vcvtq_f64_f32(v24);
        float64x2_t v49 = v25;
        g_camera_local_to_global(a3, (double *)&v44, v20->f64);
        ++v19;
        v18 += 96;
      }
      while (*(void *)(a1 + 1880) > v19);
    }
    if (*(uint64_t *)(a1 + 1928) >= 1)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = (float64x2_t *)(*(void *)(a1 + 1936) + v26);
        float64x2_t v29 = vcvtq_f64_f32(vcvt_f32_f64(v28[1]));
        float64x2_t v30 = vcvtq_f64_f32(vcvt_f32_f64(v28[3]));
        float64x2_t v31 = vcvtq_f64_f32(vcvt_f32_f64(v28[2]));
        float32x2_t v32 = vcvt_f32_f64(v28[4]);
        float64x2_t v33 = vcvtq_f64_f32(vcvt_f32_f64(v28[5]));
        unsigned long long v44 = (unsigned __int128)vcvtq_f64_f32(vcvt_f32_f64(*v28));
        float64x2_t v45 = v29;
        float64x2_t v46 = v31;
        float64x2_t v47 = v30;
        float64x2_t v48 = vcvtq_f64_f32(v32);
        float64x2_t v49 = v33;
        g_camera_local_to_global(a3, (double *)&v44, v28->f64);
        ++v27;
        v26 += 96;
      }
      while (*(void *)(a1 + 1928) > v27);
    }
    float64x2_t v34 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 1992)));
    unsigned long long v44 = (unsigned __int128)vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 1976)));
    float64x2_t v45 = v34;
    float64x2_t v35 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 2024)));
    float64x2_t v46 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 2008)));
    float64x2_t v47 = v35;
    float64x2_t v36 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 2056)));
    float64x2_t v48 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 2040)));
    float64x2_t v49 = v36;
    g_camera_local_to_global(a3, (double *)&v44, (double *)(a1 + 1976));
    if (*(_DWORD *)(a1 + 32) && *(unsigned char *)(a1 + 548))
    {
      uint64_t v37 = malloc(0x278uLL);
      memcpy(v37, (const void *)(a1 + 1656), 0x278uLL);
      bzero((void *)(a1 + 1656), 0x278uLL);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1064));
      uint64_t v38 = *(void *)(a1 + 2288);
      uint64_t v39 = *(void *)(a1 + 2304);
      if (v38 >= v39)
      {
        uint64_t v40 = 2 * v39;
        BOOL v41 = v39 == 0;
        uint64_t v42 = 32;
        if (!v41) {
          uint64_t v42 = v40;
        }
        if (v42 <= v38) {
          uint64_t v43 = v38 + 1;
        }
        else {
          uint64_t v43 = v42;
        }
        if (v43)
        {
          *(void *)(a1 + 2296) = realloc(*(void **)(a1 + 2296), 8 * v43);
          uint64_t v38 = *(void *)(a1 + 2288);
        }
        *(void *)(a1 + 2304) = v43;
      }
      *(void *)(a1 + 228_Block_object_dispose(&STACK[0x220], 8) = v38 + 1;
      *(void *)(*(void *)(a1 + 2296) + 8 * v3_Block_object_dispose(&STACK[0x220], 8) = v37;
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1064));
    }
  }
}

void vl_dump_detail_match(uint64_t a1, uint64_t a2)
{
  if (!a1 || !*(_DWORD *)a1 || (*(unsigned char *)(a1 + 4) & 8) == 0) {
    return;
  }
  if (*(uint64_t *)a2 >= 1)
  {
    uint64_t v4 = malloc(8 * *(void *)a2);
    *(void *)(a1 + 1696) = v4;
    *(void *)(a1 + 168_Block_object_dispose(&STACK[0x220], 8) = 0;
    uint64_t v5 = *(void *)a2;
    *(void *)(a1 + 1704) = *(void *)a2;
    if (v5 < 1) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v4 = 0;
  *(void *)(a1 + 1696) = 0;
  *(void *)(a1 + 168_Block_object_dispose(&STACK[0x220], 8) = 0;
  uint64_t v5 = *(void *)a2;
  *(void *)(a1 + 1704) = *(void *)a2;
  if (v5 >= 1) {
LABEL_6:
  }
    bzero(v4, 8 * v5);
LABEL_7:
  *(void *)(a1 + 168_Block_object_dispose(&STACK[0x220], 8) = v5;
  if (*(uint64_t *)a2 >= 1) {
    memcpy(v4, *(const void **)(a2 + 8), 8 * *(void *)a2);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6 >= 1)
  {
    long long v7 = malloc(8 * v6);
    *(void *)(a1 + 1720) = v7;
    *(void *)(a1 + 1712) = 0;
    uint64_t v8 = *(void *)(a2 + 24);
    *(void *)(a1 + 172_Block_object_dispose(&STACK[0x220], 8) = v8;
    if (v8 < 1) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  long long v7 = 0;
  *(void *)(a1 + 1720) = 0;
  *(void *)(a1 + 1712) = 0;
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 172_Block_object_dispose(&STACK[0x220], 8) = v8;
  if (v8 >= 1) {
LABEL_11:
  }
    bzero(v7, 8 * v8);
LABEL_12:
  *(void *)(a1 + 1712) = v8;
  uint64_t v9 = *(void *)(a2 + 24);
  if (v9 >= 1)
  {
    uint64_t v10 = *(const void **)(a2 + 32);
    memcpy(v7, v10, 8 * v9);
  }
}

void vl_dump_detail_pose_input(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !*(_DWORD *)a1 || (*(unsigned char *)(a1 + 4) & 8) == 0) {
    return;
  }
  if (*(uint64_t *)a2 >= 1)
  {
    uint64_t v6 = malloc(288 * *(void *)a2);
    *(void *)(a1 + 1744) = v6;
    *(void *)(a1 + 1736) = 0;
    uint64_t v7 = *(void *)a2;
    *(void *)(a1 + 1752) = *(void *)a2;
    if (v7 < 1) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 1744) = 0;
  *(void *)(a1 + 1736) = 0;
  uint64_t v7 = *(void *)a2;
  *(void *)(a1 + 1752) = *(void *)a2;
  if (v7 >= 1) {
LABEL_6:
  }
    bzero(v6, 288 * v7);
LABEL_7:
  *(void *)(a1 + 1736) = v7;
  if (*(uint64_t *)a2 >= 1) {
    memcpy(v6, *(const void **)(a2 + 8), 288 * *(void *)a2);
  }
  if (*(uint64_t *)a3 >= 1)
  {
    uint64_t v8 = malloc(8 * *(void *)a3);
    *(void *)(a1 + 1792) = v8;
    *(void *)(a1 + 1784) = 0;
    uint64_t v9 = *(void *)a3;
    *(void *)(a1 + 1800) = *(void *)a3;
    if (v9 < 1) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v8 = 0;
  *(void *)(a1 + 1792) = 0;
  *(void *)(a1 + 1784) = 0;
  uint64_t v9 = *(void *)a3;
  *(void *)(a1 + 1800) = *(void *)a3;
  if (v9 >= 1) {
LABEL_11:
  }
    bzero(v8, 8 * v9);
LABEL_12:
  *(void *)(a1 + 1784) = v9;
  if (*(uint64_t *)a3 >= 1) {
    memcpy(v8, *(const void **)(a3 + 8), 8 * *(void *)a3);
  }
  uint64_t v10 = *(void *)(a3 + 24);
  if (v10 >= 1)
  {
    uint64_t v11 = malloc(8 * v10);
    *(void *)(a1 + 1816) = v11;
    *(void *)(a1 + 180_Block_object_dispose(&STACK[0x220], 8) = 0;
    uint64_t v12 = *(void *)(a3 + 24);
    *(void *)(a1 + 1824) = v12;
    if (v12 < 1) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  *(void *)(a1 + 1816) = 0;
  *(void *)(a1 + 180_Block_object_dispose(&STACK[0x220], 8) = 0;
  uint64_t v12 = *(void *)(a3 + 24);
  *(void *)(a1 + 1824) = v12;
  if (v12 >= 1) {
LABEL_16:
  }
    bzero(v11, 8 * v12);
LABEL_17:
  *(void *)(a1 + 180_Block_object_dispose(&STACK[0x220], 8) = v12;
  uint64_t v13 = *(void *)(a3 + 24);
  if (v13 >= 1)
  {
    float64x2_t v14 = *(const void **)(a3 + 32);
    memcpy(v11, v14, 8 * v13);
  }
}

float vl_dump_detail_pose_score(uint64_t a1, uint64_t *a2)
{
  if (a1 && *(_DWORD *)a1 && (*(unsigned char *)(a1 + 4) & 8) != 0)
  {
    uint64_t v4 = *a2;
    if (*a2 < 1)
    {
      *(void *)(a1 + 1840) = 0;
      uint64_t v5 = (uint64_t *)(a1 + 1832);
      uint64_t v6 = (uint64_t *)(a1 + 1848);
      *(void *)(a1 + 1832) = 0;
      *(void *)(a1 + 184_Block_object_dispose(&STACK[0x220], 8) = v4;
      *(void *)(a1 + 1864) = 0;
      *(void *)(a1 + 1856) = 0;
      *(void *)(a1 + 1872) = v4;
      if (*a2 < 1) {
        return result;
      }
    }
    else
    {
      *(void *)(a1 + 1840) = malloc(96 * v4);
      uint64_t v5 = (uint64_t *)(a1 + 1832);
      *(void *)(a1 + 1832) = 0;
      uint64_t v6 = (uint64_t *)(a1 + 1848);
      *(void *)(a1 + 184_Block_object_dispose(&STACK[0x220], 8) = v4;
      *(void *)(a1 + 1864) = malloc(4 * v4);
      *(void *)(a1 + 1856) = 0;
      *(void *)(a1 + 1872) = v4;
      if (*a2 < 1) {
        return result;
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = 272;
    do
    {
      uint64_t v10 = a2[1];
      uint64_t v11 = *v5;
      uint64_t v12 = *v6;
      if (*v5 >= *v6)
      {
        if (v12) {
          uint64_t v13 = 2 * v12;
        }
        else {
          uint64_t v13 = 2;
        }
        if (v13 <= v11) {
          uint64_t v14 = v11 + 1;
        }
        else {
          uint64_t v14 = v13;
        }
        if (v14)
        {
          *(void *)(a1 + 1840) = realloc(*(void **)(a1 + 1840), 96 * v14);
          uint64_t v11 = *(void *)(a1 + 1832);
        }
        *uint64_t v6 = v14;
      }
      *(void *)(a1 + 1832) = v11 + 1;
      float64x2_t v15 = (_OWORD *)(*(void *)(a1 + 1840) + 96 * v11);
      v15[4] = 0u;
      v15[5] = 0u;
      v15[2] = 0u;
      v15[3] = 0u;
      *float64x2_t v15 = 0u;
      v15[1] = 0u;
      uint64_t v16 = *(void *)(a1 + 1840) + 96 * *(void *)(a1 + 1832);
      float64x2_t v17 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 264));
      *(float64x2_t *)(v16 - 96) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 272));
      *(float64x2_t *)(v16 - 80) = v17;
      float64x2_t v18 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 248));
      *(float64x2_t *)(v16 - 64) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 256));
      *(float64x2_t *)(v16 - 4_Block_object_dispose(&STACK[0x220], 8) = v18;
      float64x2_t v19 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 232));
      *(float64x2_t *)(v16 - 32) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 240));
      *(float64x2_t *)(v16 - 16) = v19;
      uint64_t v20 = *(void *)(a1 + 1856);
      uint64_t v21 = *(void *)(a1 + 1872);
      if (v20 >= v21)
      {
        uint64_t v22 = 2 * v21;
        BOOL v23 = v21 == 0;
        uint64_t v24 = 64;
        if (!v23) {
          uint64_t v24 = v22;
        }
        if (v24 <= v20) {
          uint64_t v25 = v20 + 1;
        }
        else {
          uint64_t v25 = v24;
        }
        if (v25)
        {
          *(void *)(a1 + 1864) = realloc(*(void **)(a1 + 1864), 4 * v25);
          uint64_t v20 = *(void *)(a1 + 1856);
        }
        *(void *)(a1 + 1872) = v25;
      }
      *(void *)(a1 + 1856) = v20 + 1;
      float result = *(float *)(v10 + v9);
      *(float *)(*(void *)(a1 + 1864) + 4 * v20) = result;
      ++v8;
      v9 += 280;
    }
    while (*a2 > v8);
  }
  return result;
}

float vl_dump_detail_pose_referee(uint64_t a1, uint64_t *a2)
{
  if (a1 && *(_DWORD *)a1 && (*(unsigned char *)(a1 + 4) & 8) != 0)
  {
    uint64_t v4 = *a2;
    if (*a2 < 1)
    {
      *(void *)(a1 + 188_Block_object_dispose(&STACK[0x220], 8) = 0;
      uint64_t v5 = (uint64_t *)(a1 + 1880);
      uint64_t v6 = (uint64_t *)(a1 + 1896);
      *(void *)(a1 + 1880) = 0;
      *(void *)(a1 + 1896) = v4;
      *(void *)(a1 + 1912) = 0;
      *(void *)(a1 + 1904) = 0;
      *(void *)(a1 + 1920) = v4;
      if (*a2 < 1) {
        return result;
      }
    }
    else
    {
      *(void *)(a1 + 188_Block_object_dispose(&STACK[0x220], 8) = malloc(96 * v4);
      uint64_t v5 = (uint64_t *)(a1 + 1880);
      *(void *)(a1 + 1880) = 0;
      uint64_t v6 = (uint64_t *)(a1 + 1896);
      *(void *)(a1 + 1896) = v4;
      *(void *)(a1 + 1912) = malloc(4 * v4);
      *(void *)(a1 + 1904) = 0;
      *(void *)(a1 + 1920) = v4;
      if (*a2 < 1) {
        return result;
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = 272;
    do
    {
      uint64_t v10 = a2[1];
      uint64_t v11 = *v5;
      uint64_t v12 = *v6;
      if (*v5 >= *v6)
      {
        if (v12) {
          uint64_t v13 = 2 * v12;
        }
        else {
          uint64_t v13 = 2;
        }
        if (v13 <= v11) {
          uint64_t v14 = v11 + 1;
        }
        else {
          uint64_t v14 = v13;
        }
        if (v14)
        {
          *(void *)(a1 + 188_Block_object_dispose(&STACK[0x220], 8) = realloc(*(void **)(a1 + 1888), 96 * v14);
          uint64_t v11 = *(void *)(a1 + 1880);
        }
        *uint64_t v6 = v14;
      }
      *(void *)(a1 + 1880) = v11 + 1;
      float64x2_t v15 = (_OWORD *)(*(void *)(a1 + 1888) + 96 * v11);
      v15[4] = 0u;
      v15[5] = 0u;
      v15[2] = 0u;
      v15[3] = 0u;
      *float64x2_t v15 = 0u;
      v15[1] = 0u;
      uint64_t v16 = *(void *)(a1 + 1888) + 96 * *(void *)(a1 + 1880);
      float64x2_t v17 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 264));
      *(float64x2_t *)(v16 - 96) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 272));
      *(float64x2_t *)(v16 - 80) = v17;
      float64x2_t v18 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 248));
      *(float64x2_t *)(v16 - 64) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 256));
      *(float64x2_t *)(v16 - 4_Block_object_dispose(&STACK[0x220], 8) = v18;
      float64x2_t v19 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 232));
      *(float64x2_t *)(v16 - 32) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 240));
      *(float64x2_t *)(v16 - 16) = v19;
      uint64_t v20 = *(void *)(a1 + 1904);
      uint64_t v21 = *(void *)(a1 + 1920);
      if (v20 >= v21)
      {
        uint64_t v22 = 2 * v21;
        BOOL v23 = v21 == 0;
        uint64_t v24 = 64;
        if (!v23) {
          uint64_t v24 = v22;
        }
        if (v24 <= v20) {
          uint64_t v25 = v20 + 1;
        }
        else {
          uint64_t v25 = v24;
        }
        if (v25)
        {
          *(void *)(a1 + 1912) = realloc(*(void **)(a1 + 1912), 4 * v25);
          uint64_t v20 = *(void *)(a1 + 1904);
        }
        *(void *)(a1 + 1920) = v25;
      }
      *(void *)(a1 + 1904) = v20 + 1;
      float result = *(float *)(v10 + v9);
      *(float *)(*(void *)(a1 + 1912) + 4 * v20) = result;
      ++v8;
      v9 += 280;
    }
    while (*a2 > v8);
  }
  return result;
}

float vl_dump_detail_pose_fuse(uint64_t a1, uint64_t *a2)
{
  if (a1 && *(_DWORD *)a1 && (*(unsigned char *)(a1 + 4) & 8) != 0)
  {
    uint64_t v4 = *a2;
    if (*a2 < 1)
    {
      *(void *)(a1 + 1936) = 0;
      uint64_t v5 = (uint64_t *)(a1 + 1928);
      uint64_t v6 = (uint64_t *)(a1 + 1944);
      *(void *)(a1 + 192_Block_object_dispose(&STACK[0x220], 8) = 0;
      *(void *)(a1 + 1944) = v4;
      *(void *)(a1 + 1960) = 0;
      *(void *)(a1 + 1952) = 0;
      *(void *)(a1 + 196_Block_object_dispose(&STACK[0x220], 8) = v4;
      if (*a2 < 1) {
        return result;
      }
    }
    else
    {
      *(void *)(a1 + 1936) = malloc(96 * v4);
      uint64_t v5 = (uint64_t *)(a1 + 1928);
      *(void *)(a1 + 192_Block_object_dispose(&STACK[0x220], 8) = 0;
      uint64_t v6 = (uint64_t *)(a1 + 1944);
      *(void *)(a1 + 1944) = v4;
      *(void *)(a1 + 1960) = malloc(4 * v4);
      *(void *)(a1 + 1952) = 0;
      *(void *)(a1 + 196_Block_object_dispose(&STACK[0x220], 8) = v4;
      if (*a2 < 1) {
        return result;
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = 272;
    do
    {
      uint64_t v10 = a2[1];
      uint64_t v11 = *v5;
      uint64_t v12 = *v6;
      if (*v5 >= *v6)
      {
        if (v12) {
          uint64_t v13 = 2 * v12;
        }
        else {
          uint64_t v13 = 2;
        }
        if (v13 <= v11) {
          uint64_t v14 = v11 + 1;
        }
        else {
          uint64_t v14 = v13;
        }
        if (v14)
        {
          *(void *)(a1 + 1936) = realloc(*(void **)(a1 + 1936), 96 * v14);
          uint64_t v11 = *(void *)(a1 + 1928);
        }
        *uint64_t v6 = v14;
      }
      *(void *)(a1 + 192_Block_object_dispose(&STACK[0x220], 8) = v11 + 1;
      float64x2_t v15 = (_OWORD *)(*(void *)(a1 + 1936) + 96 * v11);
      v15[4] = 0u;
      v15[5] = 0u;
      v15[2] = 0u;
      v15[3] = 0u;
      *float64x2_t v15 = 0u;
      v15[1] = 0u;
      uint64_t v16 = *(void *)(a1 + 1936) + 96 * *(void *)(a1 + 1928);
      float64x2_t v17 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 264));
      *(float64x2_t *)(v16 - 96) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 272));
      *(float64x2_t *)(v16 - 80) = v17;
      float64x2_t v18 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 248));
      *(float64x2_t *)(v16 - 64) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 256));
      *(float64x2_t *)(v16 - 4_Block_object_dispose(&STACK[0x220], 8) = v18;
      float64x2_t v19 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 232));
      *(float64x2_t *)(v16 - 32) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 240));
      *(float64x2_t *)(v16 - 16) = v19;
      uint64_t v20 = *(void *)(a1 + 1952);
      uint64_t v21 = *(void *)(a1 + 1968);
      if (v20 >= v21)
      {
        uint64_t v22 = 2 * v21;
        BOOL v23 = v21 == 0;
        uint64_t v24 = 64;
        if (!v23) {
          uint64_t v24 = v22;
        }
        if (v24 <= v20) {
          uint64_t v25 = v20 + 1;
        }
        else {
          uint64_t v25 = v24;
        }
        if (v25)
        {
          *(void *)(a1 + 1960) = realloc(*(void **)(a1 + 1960), 4 * v25);
          uint64_t v20 = *(void *)(a1 + 1952);
        }
        *(void *)(a1 + 196_Block_object_dispose(&STACK[0x220], 8) = v25;
      }
      *(void *)(a1 + 1952) = v20 + 1;
      float result = *(float *)(v10 + v9);
      *(float *)(*(void *)(a1 + 1960) + 4 * v20) = result;
      ++v8;
      v9 += 280;
    }
    while (*a2 > v8);
  }
  return result;
}

void vl_dump_detail_pose_result(uint64_t a1, float32x2_t *a2, uint64_t a3, float a4)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  long long v86 = 0u;
  long long v87 = 0u;
  if (!a1 || !*(_DWORD *)a1 || (*(unsigned char *)(a1 + 4) & 8) == 0) {
    return;
  }
  *(float64x2_t *)(a1 + 2056) = vcvtq_f64_f32(a2[5]);
  *(float64x2_t *)(a1 + 1976) = vcvtq_f64_f32(*a2);
  *(float64x2_t *)(a1 + 2024) = vcvtq_f64_f32(a2[3]);
  *(float64x2_t *)(a1 + 1992) = vcvtq_f64_f32(a2[1]);
  *(float64x2_t *)(a1 + 200_Block_object_dispose(&STACK[0x220], 8) = vcvtq_f64_f32(a2[2]);
  *(float64x2_t *)(a1 + 2040) = vcvtq_f64_f32(a2[4]);
  *(float *)(a1 + 2072) = a4;
  uint64_t v7 = *(void *)(a1 + 2080);
  uint64_t v8 = *(void *)a3;
  uint64_t v9 = *(void *)(a1 + 2096);
  if (*(void *)a3 > v9)
  {
    uint64_t v77 = 2 * v9;
    BOOL v73 = v9 == 0;
    uint64_t v78 = 32;
    if (!v73) {
      uint64_t v78 = v77;
    }
    if (v78 <= v8) {
      uint64_t v79 = *(void *)a3;
    }
    else {
      uint64_t v79 = v78;
    }
    if (v79) {
      *(void *)(a1 + 208_Block_object_dispose(&STACK[0x220], 8) = realloc(*(void **)(a1 + 2088), 8 * v79);
    }
    *(void *)(a1 + 2096) = v79;
    uint64_t v10 = v8 - v7;
    if (v8 <= v7)
    {
LABEL_6:
      *(void *)(a1 + 2080) = *(void *)a3;
      uint64_t v11 = *(void *)a3;
      if (*(uint64_t *)a3 < 1) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v10 = v8 - v7;
    if (v8 <= v7) {
      goto LABEL_6;
    }
  }
  bzero((void *)(*(void *)(a1 + 2088) + 8 * *(void *)(a1 + 2080)), 8 * v10);
  *(void *)(a1 + 2080) = *(void *)a3;
  uint64_t v11 = *(void *)a3;
  if (*(uint64_t *)a3 >= 1) {
LABEL_7:
  }
    memcpy(*(void **)(a1 + 2088), *(const void **)(a3 + 8), 8 * v11);
LABEL_8:
  uint64_t v12 = *(void *)(a1 + 2104);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(a1 + 2120);
  if (v13 > v14)
  {
    uint64_t v80 = 2 * v14;
    BOOL v73 = v14 == 0;
    uint64_t v81 = 21;
    if (!v73) {
      uint64_t v81 = v80;
    }
    if (v81 <= v13) {
      uint64_t v82 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v82 = v81;
    }
    if (v82) {
      *(void *)(a1 + 2112) = realloc(*(void **)(a1 + 2112), 12 * v82);
    }
    *(void *)(a1 + 2120) = v82;
    uint64_t v15 = v13 - v12;
    if (v13 <= v12)
    {
LABEL_10:
      *(void *)(a1 + 2104) = *(void *)(a3 + 24);
      uint64_t v16 = *(void *)(a3 + 24);
      if (v16 < 1) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v15 = v13 - v12;
    if (v13 <= v12) {
      goto LABEL_10;
    }
  }
  bzero((void *)(*(void *)(a1 + 2112) + 12 * *(void *)(a1 + 2104)), 12 * v15);
  *(void *)(a1 + 2104) = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(a3 + 24);
  if (v16 >= 1) {
LABEL_11:
  }
    memcpy(*(void **)(a1 + 2112), *(const void **)(a3 + 32), 12 * v16);
LABEL_12:
  uint64_t v17 = *(void *)(a1 + 2128);
  uint64_t v18 = *(void *)(a3 + 48);
  uint64_t v19 = *(void *)(a1 + 2144);
  if (v18 <= v19)
  {
    uint64_t v20 = v18 - v17;
    if (v18 <= v17) {
      goto LABEL_14;
    }
LABEL_55:
    bzero((void *)(*(void *)(a1 + 2136) + 8 * *(void *)(a1 + 2128)), 8 * v20);
    *(void *)(a1 + 212_Block_object_dispose(&STACK[0x220], 8) = *(void *)(a3 + 48);
    uint64_t v21 = *(void *)(a3 + 48);
    if (v21 < 1) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v83 = 2 * v19;
  BOOL v73 = v19 == 0;
  uint64_t v84 = 32;
  if (!v73) {
    uint64_t v84 = v83;
  }
  if (v84 <= v18) {
    uint64_t v85 = *(void *)(a3 + 48);
  }
  else {
    uint64_t v85 = v84;
  }
  if (v85) {
    *(void *)(a1 + 2136) = realloc(*(void **)(a1 + 2136), 8 * v85);
  }
  *(void *)(a1 + 2144) = v85;
  uint64_t v20 = v18 - v17;
  if (v18 > v17) {
    goto LABEL_55;
  }
LABEL_14:
  *(void *)(a1 + 212_Block_object_dispose(&STACK[0x220], 8) = *(void *)(a3 + 48);
  uint64_t v21 = *(void *)(a3 + 48);
  if (v21 >= 1) {
LABEL_15:
  }
    memcpy(*(void **)(a1 + 2136), *(const void **)(a3 + 56), 8 * v21);
LABEL_16:
  unsigned int v22 = 1025 * (((1025 * a2->i8[0]) ^ ((1025 * a2->i8[0]) >> 6)) + a2->i8[1]);
  unsigned int v23 = 1025 * ((v22 ^ (v22 >> 6)) + a2->i8[2]);
  unsigned int v24 = 1025 * ((v23 ^ (v23 >> 6)) + a2->i8[3]);
  unsigned int v25 = 1025 * ((v24 ^ (v24 >> 6)) + a2->i8[4]);
  unsigned int v26 = 1025 * ((v25 ^ (v25 >> 6)) + a2->i8[5]);
  unsigned int v27 = 1025 * ((v26 ^ (v26 >> 6)) + a2->i8[6]);
  unsigned int v28 = 1025 * ((v27 ^ (v27 >> 6)) + a2->i8[7]);
  unsigned int v29 = 1025 * ((v28 ^ (v28 >> 6)) + a2[1].i8[0]);
  unsigned int v30 = 1025 * ((v29 ^ (v29 >> 6)) + a2[1].i8[1]);
  unsigned int v31 = 1025 * ((v30 ^ (v30 >> 6)) + a2[1].i8[2]);
  unsigned int v32 = 1025 * ((v31 ^ (v31 >> 6)) + a2[1].i8[3]);
  unsigned int v33 = 1025 * ((v32 ^ (v32 >> 6)) + a2[1].i8[4]);
  unsigned int v34 = 1025 * ((v33 ^ (v33 >> 6)) + a2[1].i8[5]);
  unsigned int v35 = 1025 * ((v34 ^ (v34 >> 6)) + a2[1].i8[6]);
  unsigned int v36 = 1025 * ((v35 ^ (v35 >> 6)) + a2[1].i8[7]);
  unsigned int v37 = 1025 * ((v36 ^ (v36 >> 6)) + a2[2].i8[0]);
  unsigned int v38 = 1025 * ((v37 ^ (v37 >> 6)) + a2[2].i8[1]);
  unsigned int v39 = 1025 * ((v38 ^ (v38 >> 6)) + a2[2].i8[2]);
  unsigned int v40 = 1025 * ((v39 ^ (v39 >> 6)) + a2[2].i8[3]);
  unsigned int v41 = 1025 * ((v40 ^ (v40 >> 6)) + a2[2].i8[4]);
  unsigned int v42 = 1025 * ((v41 ^ (v41 >> 6)) + a2[2].i8[5]);
  unsigned int v43 = 1025 * ((v42 ^ (v42 >> 6)) + a2[2].i8[6]);
  unsigned int v44 = 1025 * ((v43 ^ (v43 >> 6)) + a2[2].i8[7]);
  unsigned int v45 = 1025 * ((v44 ^ (v44 >> 6)) + a2[3].i8[0]);
  unsigned int v46 = 1025 * ((v45 ^ (v45 >> 6)) + a2[3].i8[1]);
  unsigned int v47 = 1025 * ((v46 ^ (v46 >> 6)) + a2[3].i8[2]);
  unsigned int v48 = 1025 * ((v47 ^ (v47 >> 6)) + a2[3].i8[3]);
  unsigned int v49 = 1025 * ((v48 ^ (v48 >> 6)) + a2[3].i8[4]);
  unsigned int v50 = 1025 * ((v49 ^ (v49 >> 6)) + a2[3].i8[5]);
  unsigned int v51 = 1025 * ((v50 ^ (v50 >> 6)) + a2[3].i8[6]);
  unsigned int v52 = 1025 * ((v51 ^ (v51 >> 6)) + a2[3].i8[7]);
  unsigned int v53 = 1025 * ((v52 ^ (v52 >> 6)) + a2[4].i8[0]);
  unsigned int v54 = 1025 * ((v53 ^ (v53 >> 6)) + a2[4].i8[1]);
  unsigned int v55 = 1025 * ((v54 ^ (v54 >> 6)) + a2[4].i8[2]);
  unsigned int v56 = 1025 * ((v55 ^ (v55 >> 6)) + a2[4].i8[3]);
  unsigned int v57 = 1025 * ((v56 ^ (v56 >> 6)) + a2[4].i8[4]);
  unsigned int v58 = 1025 * ((v57 ^ (v57 >> 6)) + a2[4].i8[5]);
  unsigned int v59 = 1025 * ((v58 ^ (v58 >> 6)) + a2[4].i8[6]);
  unsigned int v60 = 1025 * ((v59 ^ (v59 >> 6)) + a2[4].i8[7]);
  unsigned int v61 = 1025 * ((v60 ^ (v60 >> 6)) + a2[5].i8[0]);
  unsigned int v62 = 1025 * ((v61 ^ (v61 >> 6)) + a2[5].i8[1]);
  unsigned int v63 = 1025 * ((v62 ^ (v62 >> 6)) + a2[5].i8[2]);
  unsigned int v64 = 1025 * ((v63 ^ (v63 >> 6)) + a2[5].i8[3]);
  unsigned int v65 = 1025 * ((v64 ^ (v64 >> 6)) + a2[5].i8[4]);
  unsigned int v66 = 1025 * ((v65 ^ (v65 >> 6)) + a2[5].i8[5]);
  unsigned int v67 = 1025 * ((v66 ^ (v66 >> 6)) + a2[5].i8[6]);
  unsigned int v68 = 1025 * ((v67 ^ (v67 >> 6)) + a2[5].i8[7]);
  uint64_t v69 = 32769 * ((9 * (v68 ^ (v68 >> 6))) ^ ((9 * (v68 ^ (v68 >> 6))) >> 11));
  strcpy((char *)&v86, "vl_pose output");
  uint64_t v70 = *(void *)(a1 + 1664);
  uint64_t v71 = *(void *)(a1 + 1680);
  if (v70 >= v71)
  {
    uint64_t v72 = 2 * v71;
    BOOL v73 = v71 == 0;
    uint64_t v74 = 4;
    if (!v73) {
      uint64_t v74 = v72;
    }
    if (v74 <= v70) {
      uint64_t v75 = v70 + 1;
    }
    else {
      uint64_t v75 = v74;
    }
    if (v75)
    {
      *(void *)(a1 + 1672) = realloc(*(void **)(a1 + 1672), 56 * v75);
      uint64_t v70 = *(void *)(a1 + 1664);
    }
    *(void *)(a1 + 1680) = v75;
  }
  *(void *)(a1 + 1664) = v70 + 1;
  uint64_t v76 = *(void *)(a1 + 1672) + 56 * v70;
  *(_OWORD *)uint64_t v76 = v86;
  *(_OWORD *)(v76 + 16) = v87;
  *(void *)(v76 + 32) = 0x20202065736F50;
  *(void *)(v76 + 40) = 0x100000000;
  *(void *)(v76 + 4_Block_object_dispose(&STACK[0x220], 8) = v69;
}

void vl_dump_ps_args_store(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  if (!a1) {
    return;
  }
  uint64_t v13 = *(void *)a1;
  uint64_t v14 = *(void *)(a1 + 16);
  if (*(void *)a1 >= v14)
  {
    uint64_t v15 = 2 * v14;
    if (v15 <= v13) {
      uint64_t v16 = v13 + 1;
    }
    else {
      uint64_t v16 = v15;
    }
    if (v16)
    {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = realloc(*(void **)(a1 + 8), 400 * v16);
      uint64_t v13 = *(void *)a1;
    }
    *(void *)(a1 + 16) = v16;
  }
  *(void *)a1 = v13 + 1;
  uint64_t v17 = (_OWORD *)(*(void *)(a1 + 8) + 400 * v13);
  long long v18 = 0uLL;
  v17[23] = 0u;
  v17[24] = 0u;
  v17[21] = 0u;
  v17[22] = 0u;
  v17[19] = 0u;
  v17[20] = 0u;
  v17[17] = 0u;
  v17[18] = 0u;
  v17[15] = 0u;
  v17[16] = 0u;
  v17[13] = 0u;
  v17[14] = 0u;
  v17[11] = 0u;
  v17[12] = 0u;
  v17[9] = 0u;
  v17[10] = 0u;
  v17[7] = 0u;
  v17[8] = 0u;
  v17[5] = 0u;
  _OWORD v17[6] = 0u;
  v17[3] = 0u;
  v17[4] = 0u;
  v17[1] = 0u;
  v17[2] = 0u;
  *uint64_t v17 = 0u;
  uint64_t v20 = *(void *)a1;
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v21 = *(void *)(a1 + 24);
  uint64_t v22 = *(void *)(a1 + 40);
  uint64_t v110 = a3;
  uint64_t v106 = a5;
  if (v21 >= v22)
  {
    uint64_t v23 = 2 * v22;
    BOOL v24 = v22 == 0;
    uint64_t v25 = 5;
    if (!v24) {
      uint64_t v25 = v23;
    }
    if (v25 <= v21) {
      uint64_t v26 = v21 + 1;
    }
    else {
      uint64_t v26 = v25;
    }
    if (v26)
    {
      unsigned int v27 = realloc(*(void **)(a1 + 32), 48 * v26);
      long long v18 = 0uLL;
      *(void *)(a1 + 32) = v27;
      uint64_t v21 = *(void *)(a1 + 24);
    }
    *(void *)(a1 + 40) = v26;
  }
  *(void *)(a1 + 24) = v21 + 1;
  unsigned int v28 = (_OWORD *)(*(void *)(a1 + 32) + 48 * v21);
  v28[1] = v18;
  v28[2] = v18;
  *unsigned int v28 = v18;
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = *(void *)(a1 + 32);
  uint64_t v31 = *(void *)(a1 + 48);
  uint64_t v32 = *(void *)(a1 + 64);
  if (v31 >= v32)
  {
    uint64_t v33 = *(void *)(a1 + 32);
    uint64_t v34 = 2 * v32;
    if (v34 <= v31) {
      uint64_t v35 = v31 + 1;
    }
    else {
      uint64_t v35 = v34;
    }
    if (v35)
    {
      *(void *)(a1 + 56) = realloc(*(void **)(a1 + 56), 560 * v35);
      uint64_t v31 = *(void *)(a1 + 48);
    }
    *(void *)(a1 + 64) = v35;
    uint64_t v30 = v33;
  }
  uint64_t v36 = v19 + 400 * v20;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = v31 + 1;
  bzero((void *)(*(void *)(a1 + 56) + 560 * v31), 0x230uLL);
  uint64_t v113 = *(void *)(a1 + 56);
  uint64_t v37 = *(void *)(a1 + 72);
  uint64_t v38 = *(void *)(a1 + 88);
  uint64_t v105 = *(void *)(a1 + 48);
  if (v37 >= v38)
  {
    uint64_t v39 = 2 * v38;
    BOOL v24 = v38 == 0;
    uint64_t v40 = 5;
    if (!v24) {
      uint64_t v40 = v39;
    }
    if (v40 <= v37) {
      uint64_t v41 = v37 + 1;
    }
    else {
      uint64_t v41 = v40;
    }
    if (v41)
    {
      *(void *)(a1 + 80) = realloc(*(void **)(a1 + 80), 48 * v41);
      uint64_t v37 = *(void *)(a1 + 72);
    }
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = v41;
  }
  uint64_t v42 = v29 - 1;
  unsigned int v43 = (void *)(v36 - 400);
  *(void *)(a1 + 72) = v37 + 1;
  unsigned int v44 = (_OWORD *)(*(void *)(a1 + 80) + 48 * v37);
  long long v45 = 0uLL;
  v44[1] = 0u;
  v44[2] = 0u;
  *unsigned int v44 = 0u;
  uint64_t v46 = *(void *)(a1 + 96);
  uint64_t v47 = *(void *)(a1 + 112);
  uint64_t v111 = *(void *)(a1 + 80);
  uint64_t v107 = *(void *)(a1 + 72);
  if (v46 >= v47)
  {
    if (v47) {
      uint64_t v48 = 2 * v47;
    }
    else {
      uint64_t v48 = 1;
    }
    if (v48 <= v46) {
      uint64_t v49 = v46 + 1;
    }
    else {
      uint64_t v49 = v48;
    }
    if (v49)
    {
      unsigned int v50 = realloc(*(void **)(a1 + 104), 144 * v49);
      long long v45 = 0uLL;
      *(void *)(a1 + 104) = v50;
      uint64_t v46 = *(void *)(a1 + 96);
    }
    *(void *)(a1 + 112) = v49;
  }
  *(void *)(a1 + 96) = v46 + 1;
  unsigned int v51 = (_OWORD *)(*(void *)(a1 + 104) + 144 * v46);
  v51[7] = v45;
  v51[8] = v45;
  unsigned int v52 = (uint64_t *)(v30 + 48 * v42);
  v51[5] = v45;
  v51[6] = v45;
  v51[3] = v45;
  v51[4] = v45;
  v51[1] = v45;
  v51[2] = v45;
  *unsigned int v51 = v45;
  uint64_t v53 = *(void *)(a1 + 120);
  uint64_t v54 = *(void *)(a1 + 136);
  uint64_t v112 = *(void *)(a1 + 104);
  uint64_t v108 = *(void *)(a1 + 96);
  uint64_t v55 = v30;
  if (v53 >= v54)
  {
    uint64_t v56 = 2 * v54;
    BOOL v24 = v54 == 0;
    uint64_t v57 = 2;
    if (!v24) {
      uint64_t v57 = v56;
    }
    if (v57 <= v53) {
      uint64_t v58 = v53 + 1;
    }
    else {
      uint64_t v58 = v57;
    }
    if (v58)
    {
      *(void *)(a1 + 12_Block_object_dispose(&STACK[0x220], 8) = realloc(*(void **)(a1 + 128), 96 * v58);
      uint64_t v53 = *(void *)(a1 + 120);
    }
    *(void *)(a1 + 136) = v58;
  }
  uint64_t v59 = v105 - 1;
  *(void *)(a1 + 120) = v53 + 1;
  unsigned int v60 = (_OWORD *)(*(void *)(a1 + 128) + 96 * v53);
  long long v61 = a7[1];
  *unsigned int v60 = *a7;
  long long v62 = a7[2];
  long long v63 = a7[3];
  long long v64 = a7[5];
  v60[4] = a7[4];
  v60[5] = v64;
  v60[2] = v62;
  v60[3] = v63;
  v60[1] = v61;
  memcpy(v43, a2, 0x190uLL);
  *unsigned int v43 = 0;
  if (*(uint64_t *)v110 < 1) {
    unsigned int v65 = 0;
  }
  else {
    unsigned int v65 = malloc(288 * *(void *)v110);
  }
  unsigned int v66 = (uint64_t *)(v113 + 560 * v59);
  uint64_t v67 = v55 + 48 * v42;
  *(void *)(v67 + _Block_object_dispose(&STACK[0x220], 8) = v65;
  uint64_t v68 = v67 + 8;
  *unsigned int v52 = 0;
  uint64_t v69 = *(void *)v110;
  *(void *)(v68 + _Block_object_dispose(&STACK[0x220], 8) = *(void *)v110;
  if (v69 >= 1) {
    bzero(v65, 288 * v69);
  }
  *unsigned int v52 = v69;
  if (*(uint64_t *)v110 >= 1) {
    memcpy(*(void **)v68, *(const void **)(v110 + 8), 288 * *(void *)v110);
  }
  memcpy(v66, a4, 0x230uLL);
  if (*a4 < 1)
  {
    uint64_t v70 = 0;
    *unsigned int v66 = 0;
    v66[1] = 0;
    uint64_t v71 = *a4;
    v66[2] = *a4;
    if (v71 < 1) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  uint64_t v70 = malloc(12 * *a4);
  *unsigned int v66 = 0;
  v66[1] = (uint64_t)v70;
  uint64_t v71 = *a4;
  v66[2] = *a4;
  if (v71 >= 1) {
LABEL_62:
  }
    bzero(v70, 12 * v71);
LABEL_63:
  *unsigned int v66 = v71;
  if (*a4 >= 1) {
    memcpy(v70, (const void *)a4[1], 12 * *a4);
  }
  uint64_t v72 = (void *)(v113 + 560 * v59);
  v72[5] = 0;
  v72[6] = 0;
  v72[3] = 0;
  v72[4] = 0;
  v72[7] = 0;
  v72[8] = 0;
  v72[10] = 0;
  v72[11] = 0;
  v72[9] = 0;
  uint64_t v73 = a4[12];
  if (v73 < 1) {
    uint64_t v74 = 0;
  }
  else {
    uint64_t v74 = malloc(8 * v73);
  }
  uint64_t v75 = v107 - 1;
  uint64_t v76 = v113 + 560 * v59;
  *(void *)(v76 + 96) = 0;
  *(void *)(v76 + 104) = v74;
  uint64_t v77 = (uint64_t *)(v76 + 96);
  uint64_t v78 = a4[12];
  v77[2] = v78;
  if (v78 >= 1) {
    bzero(v74, 8 * v78);
  }
  uint64_t v79 = (uint64_t *)(v111 + 48 * v75);
  *uint64_t v77 = v78;
  uint64_t v80 = a4[12];
  if (v80 >= 1) {
    memcpy(v74, (const void *)a4[13], 8 * v80);
  }
  uint64_t v81 = v113 + 560 * v59;
  *(_OWORD *)(v81 + 120) = 0u;
  *(_OWORD *)(v81 + 136) = 0u;
  *(_OWORD *)(v81 + 152) = 0u;
  *(_OWORD *)(v81 + 16_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v81 + 184) = 0u;
  *(_OWORD *)(v81 + 200) = 0u;
  *(void *)(v81 + 360) = 0;
  *(_OWORD *)(v81 + 36_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(v81 + 384) = 0u;
  *(void *)(v81 + 400) = 0;
  *(void *)(v81 + 424) = 0;
  *(_OWORD *)(v81 + 40_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(void *)(v81 + 44_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_OWORD *)(v81 + 432) = 0u;
  *(void *)(v81 + 480) = 0;
  *(_OWORD *)(v81 + 464) = 0u;
  *(void *)(v81 + 504) = 0;
  *(_OWORD *)(v81 + 48_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(void *)(v81 + 52_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(_OWORD *)(v81 + 512) = 0u;
  *(void *)(v81 + 552) = 0;
  *(_OWORD *)(v81 + 536) = 0u;
  if (*(uint64_t *)v106 < 1) {
    uint64_t v82 = 0;
  }
  else {
    uint64_t v82 = malloc(8 * *(void *)v106);
  }
  *uint64_t v79 = 0;
  v79[1] = (uint64_t)v82;
  uint64_t v83 = *(void *)v106;
  v79[2] = *(void *)v106;
  if (v83 >= 1) {
    bzero(v82, 8 * v83);
  }
  *uint64_t v79 = v83;
  if (*(uint64_t *)v106 >= 1) {
    memcpy(v82, *(const void **)(v106 + 8), 8 * *(void *)v106);
  }
  uint64_t v84 = v108 - 1;
  uint64_t v85 = *(void *)(v106 + 24);
  if (v85 < 1) {
    long long v86 = 0;
  }
  else {
    long long v86 = malloc(8 * v85);
  }
  long long v87 = (_OWORD *)(v112 + 144 * v84);
  uint64_t v88 = v111 + 48 * v75;
  *(void *)(v88 + 24) = 0;
  *(void *)(v88 + 32) = v86;
  float v89 = (uint64_t *)(v88 + 24);
  uint64_t v90 = *(void *)(v106 + 24);
  v89[2] = v90;
  if (v90 >= 1) {
    bzero(v86, 8 * v90);
  }
  *float v89 = v90;
  uint64_t v91 = *(void *)(v106 + 24);
  if (v91 >= 1) {
    memcpy(v86, *(const void **)(v106 + 32), 8 * v91);
  }
  *long long v87 = *(_OWORD *)a6;
  long long v92 = *(_OWORD *)(a6 + 16);
  long long v93 = *(_OWORD *)(a6 + 32);
  long long v94 = *(_OWORD *)(a6 + 64);
  v87[3] = *(_OWORD *)(a6 + 48);
  v87[4] = v94;
  v87[1] = v92;
  v87[2] = v93;
  long long v95 = *(_OWORD *)(a6 + 80);
  long long v96 = *(_OWORD *)(a6 + 96);
  long long v97 = *(_OWORD *)(a6 + 128);
  v87[7] = *(_OWORD *)(a6 + 112);
  v87[8] = v97;
  v87[5] = v95;
  v87[6] = v96;
  uint64_t v98 = *(void *)(a6 + 120);
  if (v98 < 1) {
    float v99 = 0;
  }
  else {
    float v99 = malloc(4 * v98);
  }
  uint64_t v100 = v112 + 144 * v84;
  *(void *)(v100 + 120) = 0;
  *(void *)(v100 + 12_Block_object_dispose(&STACK[0x220], 8) = v99;
  float v101 = (uint64_t *)(v100 + 120);
  uint64_t v102 = *(void *)(a6 + 120);
  v101[2] = v102;
  if (v102 >= 1) {
    bzero(v99, 4 * v102);
  }
  *float v101 = v102;
  uint64_t v103 = *(void *)(a6 + 120);
  if (v103 >= 1)
  {
    float v104 = *(const void **)(a6 + 128);
    memcpy(v99, v104, 4 * v103);
  }
}

void *vl_hs_model_get_par_version@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 44_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 36_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 28_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 20_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 12_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = xmmword_21BB7C9B0;
  *(int64x2_t *)(a2 + 16) = vdupq_n_s64(0x40uLL);
  *(_DWORD *)(a2 + 52) = -1;
  *(void *)(a2 + 36) = 0x3BDA740E3F4CCCCDLL;
  *(_DWORD *)(a2 + 44) = 1023969417;
  *(_DWORD *)model_0 = result;
  if ((int)result > 249)
  {
    switch(result)
    {
      case 0xFA:
        *(void *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = 4;
        *(void *)(a2 + 24) = 64;
        *(void *)(a2 + 44) = 0x59D93D088889;
        float result = memcpy((void *)(a2 + 60), &unk_21BB7C9E8, 0x194uLL);
        *(_DWORD *)(a2 + 56) = 1;
        *(void *)(a2 + 32) = 0x3F4CCCCD3F5C21DCLL;
        return result;
      case 0xFC:
        *(void *)(a2 + 16) = 64;
        *(_DWORD *)(a2 + 40) = 1004172302;
        *(void *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = -4294944295;
        float result = memcpy((void *)(a2 + 60), &unk_21BB7C9E8, 0x194uLL);
        *(_DWORD *)(a2 + 56) = 1;
        int v3 = 1063002588;
        break;
      case 0xFD:
        *(void *)(a2 + 16) = 64;
        *(_DWORD *)(a2 + 40) = 1004172302;
        *(void *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = -4294944295;
        float result = memcpy((void *)(a2 + 60), &unk_21BB7CB7C, 0x194uLL);
        *(_DWORD *)(a2 + 56) = 1;
        int v3 = 1055249678;
        break;
      default:
LABEL_15:
        printf("%sError : ", (const char *)&str_1_4);
        printf("In %s : model version %d not defined");
        goto LABEL_16;
    }
    *(_DWORD *)(a2 + 32) = v3;
    *(void *)a2 = 2;
    return result;
  }
  if (result != 1)
  {
    if (result == 100)
    {
      *(_OWORD *)(a2 + 56) = 0u;
      *(void *)(a2 + 456) = 0;
      *(_OWORD *)(a2 + 424) = 0u;
      *(_OWORD *)(a2 + 440) = 0u;
      *(_OWORD *)(a2 + 392) = 0u;
      *(_OWORD *)(a2 + 40_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *(_OWORD *)(a2 + 360) = 0u;
      *(_OWORD *)(a2 + 376) = 0u;
      *(_OWORD *)(a2 + 32_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *(_OWORD *)(a2 + 344) = 0u;
      *(_OWORD *)(a2 + 296) = 0u;
      *(_OWORD *)(a2 + 312) = 0u;
      *(_OWORD *)(a2 + 264) = 0u;
      *(_OWORD *)(a2 + 280) = 0u;
      *(_OWORD *)(a2 + 232) = 0u;
      *(_OWORD *)(a2 + 24_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *(_OWORD *)(a2 + 200) = 0u;
      *(_OWORD *)(a2 + 216) = 0u;
      *(_OWORD *)(a2 + 16_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *(_OWORD *)(a2 + 184) = 0u;
      *(_OWORD *)(a2 + 136) = 0u;
      *(_OWORD *)(a2 + 152) = 0u;
      *(_OWORD *)(a2 + 104) = 0u;
      *(_OWORD *)(a2 + 120) = 0u;
      *(_OWORD *)(a2 + 72) = 0u;
      *(_OWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *(void *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = 4;
      *(void *)(a2 + 24) = 64;
      *(void *)(a2 + 44) = 0x59D83D088889;
      *(void *)(a2 + 32) = 0x3F4CCCCD3F5850F0;
      return result;
    }
    if (result == 200)
    {
      *(_OWORD *)(a2 + 56) = 0u;
      *(void *)(a2 + 456) = 0;
      *(_OWORD *)(a2 + 424) = 0u;
      *(_OWORD *)(a2 + 440) = 0u;
      *(_OWORD *)(a2 + 392) = 0u;
      *(_OWORD *)(a2 + 40_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *(_OWORD *)(a2 + 360) = 0u;
      *(_OWORD *)(a2 + 376) = 0u;
      *(_OWORD *)(a2 + 32_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *(_OWORD *)(a2 + 344) = 0u;
      *(_OWORD *)(a2 + 296) = 0u;
      *(_OWORD *)(a2 + 312) = 0u;
      *(_OWORD *)(a2 + 264) = 0u;
      *(_OWORD *)(a2 + 280) = 0u;
      *(_OWORD *)(a2 + 232) = 0u;
      *(_OWORD *)(a2 + 24_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *(_OWORD *)(a2 + 200) = 0u;
      *(_OWORD *)(a2 + 216) = 0u;
      *(_OWORD *)(a2 + 16_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *(_OWORD *)(a2 + 184) = 0u;
      *(_OWORD *)(a2 + 136) = 0u;
      *(_OWORD *)(a2 + 152) = 0u;
      *(_OWORD *)(a2 + 104) = 0u;
      *(_OWORD *)(a2 + 120) = 0u;
      *(_OWORD *)(a2 + 72) = 0u;
      *(_OWORD *)(a2 + 8_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *(void *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = 4;
      *(void *)(a2 + 24) = 64;
      *(void *)(a2 + 44) = 0x59D93D088889;
      *(void *)(a2 + 32) = 0x3F4CCCCD3F35AE2ELL;
      return result;
    }
    goto LABEL_15;
  }
  printf("%sError : ", (const char *)&str_1_4);
  printf("Promote your VL pose verification model here!");
LABEL_16:
  return (void *)putchar(10);
}

uint64_t vl_hs_compute_hypothesis_scores(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v10 = a1;
  unint64_t v11 = *a2;
  if ((uint64_t)*a2 < 1)
  {
    int v18 = 0;
    uint8x16_t v184 = 0;
    if (*(_DWORD *)(a1 + 212)) {
      goto LABEL_18;
    }
    goto LABEL_10;
  }
  uint64_t v13 = 3;
  if (v11 > 3) {
    uint64_t v13 = *a2;
  }
  uint64_t v14 = (char *)malloc_type_realloc(0, 80 * v13, 0x77C13A6BuLL);
  bzero(v14, 80 * v11);
  unint64_t v11 = *a2;
  if ((uint64_t)*a2 < 1)
  {
    int v18 = 0;
    uint8x16_t v184 = v14;
    if (*(_DWORD *)(v10 + 212)) {
      goto LABEL_18;
    }
    goto LABEL_10;
  }
  unint64_t v15 = a2[1];
  if (v11 == 1)
  {
    unint64_t v16 = 0;
    uint64_t v17 = v14;
LABEL_15:
    unint64_t v23 = v15 + 280 * v16;
    uint64_t v24 = 80 * v16;
    do
    {
      *(void *)&v17[v24] = v23;
      ++v16;
      v23 += 280;
      v24 += 80;
    }
    while (v11 != v16);
    goto LABEL_17;
  }
  unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v11 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = a2[1];
  uint64_t v17 = v14;
  uint64_t v22 = (unint64_t *)v14;
  do
  {
    unint64_t *v22 = v21;
    v22[10] = v21 + 280;
    v22 += 20;
    v21 += 560;
    v20 -= 2;
  }
  while (v20);
  if (v11 != v16) {
    goto LABEL_15;
  }
LABEL_17:
  int v18 = 1;
  uint8x16_t v184 = v17;
  if (*(_DWORD *)(v10 + 212))
  {
LABEL_18:
    *(void *)(v10 + 120) -= mach_absolute_time();
    uint64_t v19 = (_DWORD *)model_0;
    if (!model_0) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
LABEL_10:
  clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v10 + 32));
  clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v10 + 16));
  clock_gettime(_CLOCK_MONOTONIC, (timespec *)v10);
  uint64_t v19 = (_DWORD *)model_0;
  if (!model_0) {
    goto LABEL_21;
  }
LABEL_19:
  if (*v19 != a7)
  {
    vl_hs_model_free();
    if (!model_0) {
LABEL_21:
    }
      vl_hs_model_load(a7, (const char *)(v10 + 216));
  }
  uint8x16_t v177 = (_DWORD *)(a3 + 24);
  double v25 = (double)*(uint64_t *)a5 * 0.1;
  if (v25 <= 0.0)
  {
    float64x2_t v197 = 0uLL;
    uint64_t v28 = (uint64_t)v25;
    *(void *)&v198.f64[0] = (uint64_t)v25;
  }
  else
  {
    uint64_t v26 = malloc_type_malloc(vcvtd_n_u64_f64(v25, 2uLL), 0x975E914DuLL);
    double v27 = (double)*(uint64_t *)a5 * 0.1;
    v197.f64[0] = 0.0;
    *(void *)&v197.f64[1] = v26;
    uint64_t v28 = (uint64_t)v27;
    *(void *)&v198.f64[0] = (uint64_t)v27;
    if (v27 > 0.0)
    {
      uint64_t v29 = malloc_type_malloc(vcvtd_n_u64_f64(v27, 3uLL), 0xFC00B5C6uLL);
      uint64_t v28 = (uint64_t)((double)*(uint64_t *)a5 * 0.1);
      goto LABEL_27;
    }
  }
  uint64_t v29 = 0;
LABEL_27:
  float32x4_t v196 = 0uLL;
  ptr[0] = 0;
  ptr[1] = v29;
  *(void *)&long long v191 = v28;
  get_img_borders_normalized(v177, &v196.f32[2], v196.f32);
  uint64_t v172 = v10;
  unint64_t v178 = v11;
  if (v18)
  {
    int v31 = v18;
    uint64_t v32 = 0;
    float32x4_t v33 = v196;
    *(float32x4_t *)int16x8_t v188 = v196;
    do
    {
      ptr[0] = 0;
      v197.f64[0] = 0.0;
      uint64_t v34 = *(void *)a5;
      uint64_t v35 = v184;
      if (*(uint64_t *)a5 >= 1)
      {
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = (float32x2_t **)&v184[80 * v32];
        do
        {
          uint64_t v40 = (float *)(*(void *)(a5 + 8) + v36);
          float v41 = *v40 - (*v39)[4].f32[1];
          float v42 = v40[1] - (*v39)[5].f32[0];
          float v43 = v40[2] - (*v39)[5].f32[1];
          float v44 = (float)((float)((*v39)[1].f32[1] * v42) + (float)((*v39)->f32[0] * v41))
              + (float)((*v39)[3].f32[0] * v43);
          if (v44 > 0.0)
          {
            *(float32x2_t *)&long long v30 = vmul_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((*v39)[2], v42), *(float32x2_t *)((char *)*v39 + 4), v41), *(float32x2_t *)((char *)*v39 + 28), v43), 1.0 / v44);
            v45.i64[0] = v30;
            v45.i64[1] = v30;
            v46.i32[0] = vmovn_s32(vcgtq_f32(v45, v33)).u32[0];
            v46.i32[1] = vmovn_s32(vcgtq_f32(v33, v45)).i32[1];
            if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v46, 0xFuLL))) & 1) == 0)
            {
              uint64_t v47 = (char *)ptr[0];
              if ((uint64_t)ptr[0] >= (uint64_t)v191)
              {
                if ((void)v191) {
                  uint64_t v48 = 2 * v191;
                }
                else {
                  uint64_t v48 = 32;
                }
                if (v48 <= (uint64_t)ptr[0]) {
                  uint64_t v49 = (uint64_t)ptr[0] + 1;
                }
                else {
                  uint64_t v49 = v48;
                }
                if (v49)
                {
                  long long v186 = v30;
                  unsigned int v50 = malloc_type_realloc(ptr[1], 8 * v49, 0x30313320uLL);
                  long long v30 = v186;
                  float32x4_t v33 = *(float32x4_t *)v188;
                  uint64_t v35 = v184;
                  ptr[1] = v50;
                  uint64_t v47 = (char *)ptr[0];
                  uint64_t v37 = *(void *)&v197.f64[0];
                }
                *(void *)&long long v191 = v49;
              }
              ptr[0] = v47 + 1;
              *((void *)ptr[1] + (void)v47) = v30;
              if (v37 >= *(uint64_t *)&v198.f64[0])
              {
                if (*(void *)&v198.f64[0]) {
                  uint64_t v51 = 2 * *(void *)&v198.f64[0];
                }
                else {
                  uint64_t v51 = 64;
                }
                if (v51 <= v37) {
                  uint64_t v52 = v37 + 1;
                }
                else {
                  uint64_t v52 = v51;
                }
                if (v52)
                {
                  uint64_t v53 = malloc_type_realloc(*(void **)&v197.f64[1], 4 * v52, 0xE6E02957uLL);
                  float32x4_t v33 = *(float32x4_t *)v188;
                  uint64_t v35 = v184;
                  *(void *)&v197.f64[1] = v53;
                  uint64_t v37 = *(void *)&v197.f64[0];
                }
                *(void *)&v198.f64[0] = v52;
              }
              *(void *)&v197.f64[0] = v37 + 1;
              *(_DWORD *)(*(void *)&v197.f64[1] + 4 * v37) = v38;
              uint64_t v34 = *(void *)a5;
              ++v37;
            }
          }
          ++v38;
          v36 += 12;
        }
        while (v34 > v38);
      }
      vl_match_exhaustive_knn_rematch(a4, a5, *(_DWORD *)(a5 + 216), (uint64_t)&v197, (uint64_t *)ptr, (uint64_t *)&v35[80 * v32 + 32], a6, 0xAu, *(float *)(model_0 + 52));
      float32x4_t v33 = *(float32x4_t *)v188;
      ++v32;
    }
    while (v32 != v11);
    uint64_t v29 = ptr[1];
    uint64_t v10 = v172;
    int v18 = v31;
  }
  free(v29);
  free(*(void **)&v197.f64[1]);
  float v59 = *(float *)(model_0 + 48);
  float64x2_t v200 = 0u;
  float64x2_t v201 = 0u;
  float64x2_t v198 = 0u;
  float64x2_t v199 = 0u;
  float64x2_t v197 = 0u;
  int v171 = v18;
  if (!v18)
  {
    float64_t v68 = 0.0;
    goto LABEL_77;
  }
  unsigned int v60 = (uint64_t *)(v184 + 32);
  do
  {
    vl_pose_get_inliers(*(v60 - 4), (uint64_t)a4, a5, v60, (uint64_t)&v197, v59, v54, v55, v56, v57, v58);
    uint64_t v61 = *(v60 - 3);
    float64_t v62 = v200.f64[0];
    uint64_t v63 = *(v60 - 1);
    if (*(uint64_t *)&v200.f64[0] > v63)
    {
      if (v63) {
        uint64_t v66 = 2 * v63;
      }
      else {
        uint64_t v66 = 32;
      }
      if (v66 <= *(uint64_t *)&v200.f64[0]) {
        uint64_t v67 = *(void *)&v200.f64[0];
      }
      else {
        uint64_t v67 = v66;
      }
      if (v67) {
        *(v60 - 2) = (uint64_t)malloc_type_realloc((void *)*(v60 - 2), 8 * v67, 0x4723CB62uLL);
      }
      *(v60 - 1) = v67;
      uint64_t v10 = v172;
      uint64_t v64 = *(void *)&v62 - v61;
      if (*(uint64_t *)&v62 > v61)
      {
LABEL_73:
        bzero((void *)(*(v60 - 2) + 8 * *(v60 - 3)), 8 * v64);
        uint64_t v65 = *(void *)&v200.f64[0];
        *(v60 - 3) = *(void *)&v200.f64[0];
        if (v65 < 1) {
          goto LABEL_59;
        }
LABEL_74:
        memcpy((void *)*(v60 - 2), *(const void **)&v200.f64[1], 8 * v65);
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v64 = *(void *)&v200.f64[0] - v61;
      if (*(uint64_t *)&v200.f64[0] > v61) {
        goto LABEL_73;
      }
    }
    uint64_t v65 = *(void *)&v200.f64[0];
    *(v60 - 3) = *(void *)&v200.f64[0];
    if (v65 >= 1) {
      goto LABEL_74;
    }
LABEL_59:
    v60 += 10;
    --v11;
  }
  while (v11);
  float64_t v68 = v197.f64[1];
  unint64_t v11 = v178;
LABEL_77:
  free(*(void **)&v68);
  free(*(void **)&v199.f64[0]);
  free(*(void **)&v200.f64[1]);
  if ((int)((uint64_t)((v11 + (((*(void *)(model_0 + 8) << 32) - 0x100000000) >> 32)) & -*(_DWORD *)(model_0 + 8))
           / (int)*(void *)(model_0 + 8)) >= 1)
  {
    uint64_t v69 = 0;
    uint64_t v176 = ((uint64_t)((v11 + (((*(void *)(model_0 + 8) << 32) - 0x100000000) >> 32)) & -*(_DWORD *)(model_0 + 8))
                        / (int)*(void *)(model_0 + 8));
    uint64_t v179 = 1;
    do
    {
      int v71 = v69;
      uint64_t v72 = *(void *)(model_0 + 8);
      uint64_t v73 = *(void *)(model_0 + 16);
      uint64_t v74 = *(void *)(model_0 + 24);
      uint64_t v75 = *(void *)(model_0 + 32);
      float32x4_t v196 = 0uLL;
      get_img_borders_normalized(v177, &v196.f32[2], v196.f32);
      uint64_t v181 = v74 * v73;
      uint64_t v182 = v73;
      bzero(*(void **)(model_0 + 480), 4 * v72 * v74 * v73 * v75);
      uint64_t v76 = *(void *)(model_0 + 480);
      uint64_t v77 = *(float **)(model_0 + 496);
      ++v69;
      unint64_t v78 = v72 * v69;
      int v79 = v71 * v72;
      unint64_t v11 = v178;
      if (v72 * v69 >= v178) {
        unint64_t v78 = v178;
      }
      if (v78 <= v79)
      {
        if (*(_DWORD *)(v10 + 728)) {
          goto LABEL_149;
        }
        vl_hs_forward();
        uint64_t v70 = 0;
      }
      else
      {
        uint64_t v174 = v79;
        uint64_t v175 = v69;
        uint64_t v80 = 0;
        int16x8_t v189 = 0;
        uint64_t v187 = 0;
        float v81 = (float)(int)v75;
        float v82 = (float)(int)v74;
        uint64_t v83 = v72 * v179;
        unint64_t v173 = v72 * v179;
        if (v178 < v72 * v179) {
          uint64_t v83 = v178;
        }
        uint64_t v183 = v83 - v79;
        uint64_t v84 = v79;
        uint64_t v85 = v184;
        do
        {
          long long v86 = (float32x2_t **)&v85[80 * v84];
          long long v194 = 0u;
          long long v195 = 0u;
          long long v192 = 0u;
          long long v193 = 0u;
          *(_OWORD *)int ptr = 0u;
          long long v191 = 0u;
          long long v87 = *v86;
          float64x2_t v202 = vcvtq_f64_f32((*v86)[5]);
          float64x2_t v88 = vcvtq_f64_f32(v87[3]);
          float64x2_t v197 = vcvtq_f64_f32(*v87);
          float64x2_t v200 = v88;
          float64x2_t v198 = vcvtq_f64_f32(v87[1]);
          float64x2_t v199 = vcvtq_f64_f32(v87[2]);
          float64x2_t v201 = vcvtq_f64_f32(v87[4]);
          g_camera_local_to_global((double *)(a5 + 240), v197.f64, (double *)ptr);
          uint64_t v89 = v80 + 1;
          if (v80 >= v187)
          {
            uint64_t v91 = 2 * v187;
            if (!v187) {
              uint64_t v91 = 2;
            }
            if (v91 <= v80) {
              uint64_t v91 = v80 + 1;
            }
            uint64_t v90 = v189;
            if (v91)
            {
              uint64_t v187 = v91;
              uint64_t v90 = (char *)malloc_type_realloc(v189, 96 * v91, 0xBC4F9644uLL);
            }
            else
            {
              uint64_t v187 = 0;
            }
          }
          else
          {
            uint64_t v90 = v189;
          }
          int16x8_t v189 = v90;
          long long v92 = &v90[96 * v80];
          long long v93 = v191;
          *(_OWORD *)long long v92 = *(_OWORD *)ptr;
          *((_OWORD *)v92 + 1) = v93;
          long long v94 = v192;
          long long v95 = v193;
          long long v96 = v195;
          *((_OWORD *)v92 + 4) = v194;
          *((_OWORD *)v92 + 5) = v96;
          *((_OWORD *)v92 + 2) = v94;
          *((_OWORD *)v92 + 3) = v95;
          uint64_t v85 = v184;
          uint64_t v97 = *(void *)&v184[80 * v84 + 8];
          if (v97 >= 1)
          {
            uint64_t v98 = a4[1];
            float v99 = *v86;
            uint64_t v100 = *(void *)(a5 + 8);
            uint64_t v101 = v196.i64[1];
            float v102 = v196.f32[0] - v196.f32[2];
            float v103 = v196.f32[1] - v196.f32[3];
            float v104 = (int *)(*(void *)&v184[80 * v84 + 16] + 4);
            do
            {
              uint64_t v105 = (float *)(v100 + 12 * *(v104 - 1));
              float v106 = *v105 - v99[4].f32[1];
              float v107 = v105[1] - v99[5].f32[0];
              float v108 = v105[2] - v99[5].f32[1];
              float v109 = (float)((float)(v99[1].f32[1] * v107) + (float)(v99->f32[0] * v106))
                   + (float)(v99[3].f32[0] * v108);
              if (v109 > 0.0)
              {
                float v110 = 1.0 / v109;
                int v111 = (int)(float)((float)((float)((float)(v110
                                                          * (float)((float)((float)(v107 * v99[2].f32[0])
                                                                          + (float)(v99->f32[1] * v106))
                                                                  + (float)(v99[3].f32[1] * v108)))
                                                  - *(float *)&v101)
                                          / v102)
                                  * v81);
                if ((v111 & 0x80000000) == 0 && v111 < (int)v75)
                {
                  int v112 = (int)(float)((float)((float)((float)(v110
                                                            * (float)((float)((float)(v107 * v99[2].f32[1])
                                                                            + (float)(v99[1].f32[0] * v106))
                                                                    + (float)(v99[4].f32[0] * v108)))
                                                    - *((float *)&v101 + 1))
                                            / v103)
                                    * v82);
                  if ((v112 & 0x80000000) == 0 && v112 < (int)v74)
                  {
                    uint64_t v113 = (float *)(v98 + 288 * *v104);
                    int v114 = (int)(float)((float)((float)(*v113 - *(float *)&v101) / v102) * v81);
                    if ((v114 & 0x80000000) == 0 && v114 < (int)v75)
                    {
                      int v115 = (int)(float)((float)((float)(v113[1] - *((float *)&v101 + 1)) / v103) * v82);
                      if ((v115 & 0x80000000) == 0 && v115 < (int)v74)
                      {
                        *(_DWORD *)(v76 + 4 * ((v80 * v181 + v115) * v75 + v114)) = 1065353216;
                        *(_DWORD *)(v76 + 4 * ((v80 * v181 + v74 + v112) * v75 + v111)) = 1065353216;
                      }
                    }
                  }
                }
              }
              v104 += 2;
              --v97;
            }
            while (v97);
          }
          int v116 = &v184[80 * v84];
          uint64_t v119 = *((void *)v116 + 4);
          int v117 = v116 + 32;
          uint64_t v118 = v119;
          if (v119 >= 1)
          {
            uint64_t v120 = 0;
            uint64_t v121 = *(void *)(a6 + 32);
            uint64_t v122 = *(void *)&v184[80 * v84 + 64];
            uint64_t v123 = model_0;
            uint64_t v124 = v196.i64[1];
            float v125 = v196.f32[0] - v196.f32[2];
            float v126 = v196.f32[1] - v196.f32[3];
            uint64_t v127 = (float *)(a4[1] + 4);
            do
            {
              if ((float)(*(float *)(v121 + v120) / *(float *)(v122 + v120)) >= *(float *)(v123 + 44))
              {
                uint64_t v128 = *v86;
                uint64_t v129 = (float *)(*(void *)(a5 + 8) + 12 * *(int *)(*((void *)v117 + 1) + v120));
                float v130 = *v129 - (*v86)[4].f32[1];
                float v131 = v129[1] - (*v86)[5].f32[0];
                float v132 = v129[2] - (*v86)[5].f32[1];
                float v133 = (float)((float)((*v86)[1].f32[1] * v131) + (float)((*v86)->f32[0] * v130))
                     + (float)((*v86)[3].f32[0] * v132);
                if (v133 > 0.0)
                {
                  float v134 = 1.0 / v133;
                  int v135 = (int)(float)((float)((float)((float)(v134
                                                            * (float)((float)((float)(v131 * v128[2].f32[0])
                                                                            + (float)(v128->f32[1] * v130))
                                                                    + (float)(v128[3].f32[1] * v132)))
                                                    - *(float *)&v124)
                                            / v125)
                                    * v81);
                  if ((v135 & 0x80000000) == 0 && v135 < (int)v75)
                  {
                    int v136 = (int)(float)((float)((float)((float)(v134
                                                              * (float)((float)((float)(v131 * v128[2].f32[1])
                                                                              + (float)(v128[1].f32[0] * v130))
                                                                      + (float)(v128[4].f32[0] * v132)))
                                                      - *((float *)&v124 + 1))
                                              / v126)
                                      * v82);
                    if ((v136 & 0x80000000) == 0 && v136 < (int)v74)
                    {
                      int v137 = (int)(float)((float)((float)(*(v127 - 1) - *(float *)&v124) / v125) * v81);
                      if ((v137 & 0x80000000) == 0 && v137 < (int)v75)
                      {
                        int v138 = (int)(float)((float)((float)(*v127 - *((float *)&v124 + 1)) / v126) * v82);
                        if ((v138 & 0x80000000) == 0 && v138 < (int)v74)
                        {
                          *(_DWORD *)(v76
                                    + 4 * (((v80 * v182 + 2) * v74 + v138) * v75 + v137)) = 1065353216;
                          *(_DWORD *)(v76
                                    + 4 * (((v80 * v182 + 3) * v74 + v136) * v75 + v135)) = 1065353216;
                        }
                      }
                    }
                  }
                }
              }
              v120 += 8;
              v127 += 72;
              --v118;
            }
            while (v118);
          }
          ++v84;
          ++v80;
        }
        while (v89 != v183);
        uint64_t v10 = v172;
        unint64_t v11 = v178;
        uint64_t v69 = v175;
        if (*(_DWORD *)(v172 + 728))
        {
LABEL_149:
          printf("%sAborting : ", (const char *)&str_1_4);
          putchar(10);
          __assert_rtn("vl_hs_write_grid_to_tfrecord", "vl_verify_hs.c", 580, "0");
        }
        vl_hs_forward();
        if (*(_DWORD *)(model_0 + 64))
        {
          uint64_t v139 = model_0 + 68;
          unint64_t v140 = v173;
          if (v178 < v173) {
            unint64_t v140 = v178;
          }
          uint64_t v141 = v140 - v174;
          int v142 = &v184[80 * (int)v174];
          uint64_t v70 = v189;
          do
          {
            float v143 = *v77++;
            float v144 = v143 * 100.0;
            float v145 = floorf(v143 * 100.0);
            double v146 = v145;
            if (v145 > 99.0) {
              double v146 = 99.0;
            }
            int v147 = (int)v146;
            if (v145 < 0.0) {
              int v147 = 0;
            }
            uint64_t v148 = *(void *)v142;
            v142 += 80;
            *(float *)(v148 + 272) = *(float *)(v139 + 4 * v147)
                                   + (float)((float)(v144 - (float)v147)
                                           * (float)(*(float *)(v139 + 4 * v147 + 4) - *(float *)(v139 + 4 * v147)));
            --v141;
          }
          while (v141);
        }
        else
        {
          unint64_t v149 = v173;
          if (v178 < v173) {
            unint64_t v149 = v178;
          }
          uint64_t v150 = v149 - v174;
          uint64_t v151 = &v184[80 * (int)v174];
          uint64_t v70 = v189;
          do
          {
            float v152 = *v77++;
            float v153 = v152;
            uint64_t v154 = *(void *)v151;
            v151 += 80;
            *(float *)(v154 + 272) = v153;
            --v150;
          }
          while (v150);
        }
      }
      free(v70);
      ++v179;
    }
    while (v69 != v176);
  }
  if (v171)
  {
    size_t v155 = (void **)(v184 + 40);
    do
    {
      free(v155[3]);
      free(*v155);
      free(*(v155 - 3));
      v155 += 10;
      --v11;
    }
    while (v11);
  }
  free(v184);
  if (*(_DWORD *)(v10 + 212))
  {
    *(void *)(v10 + 120) += mach_absolute_time();
    if (*(_DWORD *)(v10 + 212)) {
      goto LABEL_146;
    }
    return log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v156, v157, v158, v159, v160, v161, v162, (char)&str_4_1);
  }
  else
  {
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v10 + 64));
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v10 + 80));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v10 + 48));
    uint64_t v164 = *(void *)(v10 + 56) - *(void *)(v10 + 8) + 1000000000 * (*(void *)(v10 + 48) - *(void *)v10);
    uint64_t v165 = *(void *)(v10 + 72)
         - *(void *)(v10 + 24)
         + 1000000000 * (*(void *)(v10 + 64) - *(void *)(v10 + 16));
    uint64_t v166 = *(void *)(v10 + 88)
         - *(void *)(v10 + 40)
         + 1000000000 * (*(void *)(v10 + 80) - *(void *)(v10 + 32));
    uint64_t v167 = *(void *)(v10 + 128);
    uint64_t v168 = v164 + *(void *)(v10 + 120);
    *(void *)(v10 + 96) = v164;
    *(void *)(v10 + 104) = v165;
    uint64_t v169 = v165 + v167;
    *(void *)(v10 + 112) = v166;
    *(void *)(v10 + 120) = v168;
    uint64_t v170 = v166 + *(void *)(v10 + 136);
    *(void *)(v10 + 12_Block_object_dispose(&STACK[0x220], 8) = v169;
    *(void *)(v10 + 136) = v170;
    ++*(_DWORD *)(v10 + 144);
    if (!*(_DWORD *)(v10 + 212)) {
      return log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v156, v157, v158, v159, v160, v161, v162, (char)&str_4_1);
    }
LABEL_146:
    printf("Verbose : ");
    printf("Total time for %40s : %7.3f ms", (const char *)(v10 + 148), (double)*(uint64_t *)(v10 + 120) * 0.000001);
    return putchar(10);
  }
}

float get_img_borders_normalized(_DWORD *a1, float *a2, float *a3)
{
  uint64_t v21 = 0;
  float64x2_t v22 = 0uLL;
  int v6 = *a1;
  float64x2_t v23 = (float64x2_t)0xBFE0000000000000;
  if (v6 == 3)
  {
    v23.f64[1] = (double)(a1[43] / 2) + -0.5;
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
    float v7 = v22.f64[0];
    *a2 = v7;
    v23.f64[0] = (double)(a1[42] / 2) + -0.5;
    v23.f64[1] = -0.5;
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
    float v8 = v22.f64[1];
    a2[1] = v8;
    int v9 = a1[43];
    v23.f64[0] = (double)(int)a1[42] + -0.5;
    v23.f64[1] = (double)(v9 / 2) + -0.5;
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
    float v10 = v22.f64[0];
    *a3 = v10;
    double v11 = (double)(int)a1[43] + -0.5;
    v23.f64[0] = (double)(a1[42] / 2) + -0.5;
    v23.f64[1] = v11;
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
  }
  else
  {
    v23.f64[1] = -0.5;
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
    *(float32x2_t *)a2 = vcvt_f32_f64(v22);
    uint64_t v12 = *((void *)a1 + 21);
    v13.i64[0] = (int)v12;
    v13.i64[1] = SHIDWORD(v12);
    __asm { FMOV            V1.2D, #-0.5 }
    float64x2_t v23 = vaddq_f64(vcvtq_f64_s64(v13), _Q1);
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
    float v19 = v22.f64[0];
    *a3 = v19;
  }
  float result = v22.f64[1];
  a3[1] = result;
  return result;
}

double sss_par_version@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_21BB7B340;
  *(_OWORD *)(a2 + 16) = xmmword_21BB7B350;
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a2 + 36) = 0x3DCCCCCD3F800000;
  *(void *)&double result = 0xA7FFFFFFFLL;
  *(_OWORD *)(a2 + 44) = xmmword_21BB7B360;
  if (a1 <= 199)
  {
    switch(a1)
    {
      case 'd':
        *(_DWORD *)(a2 + 40) = 1065353216;
        *(_DWORD *)(a2 + 32) = 1;
        *(_DWORD *)(a2 + 24) = 2;
        *(void *)&double result = 0x800000040;
        *(void *)(a2 + 16) = 0x800000040;
        return result;
      case 'e':
        *(_DWORD *)(a2 + 40) = 1065353216;
        *(_DWORD *)(a2 + 32) = 1;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 52) = 4;
        *(void *)&double result = 0xA00000040;
        *(void *)(a2 + 16) = 0xA00000040;
        return result;
      case 'f':
        *(_DWORD *)(a2 + 40) = 1065353216;
        *(_DWORD *)(a2 + 32) = 1;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 52) = 10;
        *(void *)&double result = 0x1000000040;
        *(void *)(a2 + 16) = 0x1000000040;
        return result;
      case 'g':
        *(_DWORD *)(a2 + 40) = 1065353216;
        *(_DWORD *)(a2 + 32) = 1;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 52) = 2;
        *(void *)&double result = 0x600000040;
        *(void *)(a2 + 16) = 0x600000040;
        return result;
      case 'h':
        *(_DWORD *)(a2 + 40) = 1065353216;
        *(_DWORD *)(a2 + 32) = 1;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 52) = 2;
        *(void *)&double result = 0x400000050;
        *(void *)(a2 + 16) = 0x400000050;
        return result;
      default:
        if (!a1) {
          return result;
        }
        goto LABEL_18;
    }
  }
  if (a1 > 201)
  {
    if (a1 == 202)
    {
      *(_DWORD *)(a2 + 24) = 2;
      *(void *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = 0x100000006;
      *(void *)&double result = 0x400000050;
      *(void *)(a2 + 16) = 0x400000050;
    }
    else
    {
      if (a1 != 706) {
LABEL_18:
      }
        __assert_rtn("sss_par_version", "sss.c", 255, "0 && \"Not implemented\"");
      *(_DWORD *)(a2 + 40) = 1065353216;
      *(_DWORD *)(a2 + 32) = 1;
      *(_DWORD *)(a2 + 24) = 2;
      *(_DWORD *)(a2 + 52) = 2;
      *(void *)&double result = 0x800000060;
      *(void *)(a2 + 16) = 0x800000060;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 24) = 2;
    if (a1 == 200)
    {
      *(_DWORD *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = 6;
      *(void *)&double result = 0x200000050;
      *(void *)(a2 + 16) = 0x200000050;
    }
    else
    {
      *(void *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = 6;
      *(void *)&double result = 0x300000050;
      *(void *)(a2 + 16) = 0x300000050;
    }
  }
  return result;
}

_DWORD *sss_create_ids(void *a1, const void *a2, int a3, int a4, _DWORD *a5)
{
  unsigned int v50 = malloc_type_calloc(1uLL, 0x108uLL, 0x10200408B489881uLL);
  float v10 = a1;
  int v49 = a3;
  if (!*a5)
  {
    float v10 = a1;
    if ((int)a5[14] > 1)
    {
      if (a1)
      {
        float v10 = malloc_type_malloc(a4 * a3, 0xA2EA7F68uLL);
        memcpy(v10, a1, a4 * a3);
      }
      else
      {
        float v10 = 0;
      }
    }
  }
  float32x4_t v45 = a1;
  __src = v10;
  v50[65] = a3;
  v50[64] = a5[5];
  double v11 = (char *)malloc_type_malloc(8 * a4 + a4 * (uint64_t)a3, 0x9A0C56FDuLL);
  uint64_t v12 = v11;
  int v13 = a5[5];
  uint64_t v14 = (v13 - 1);
  if (v13 >= 1)
  {
    size_t v15 = a4 * (uint64_t)a3;
    uint64_t v48 = (uint64_t)&v11[v15];
    uint64_t v47 = &v11[4 * a4 + v15];
    if (a2)
    {
      if (__src)
      {
        do
        {
          unsigned int v51 = v14 + a5[1];
          if (v14 || (unint64_t v16 = v45, *a5))
          {
            unint64_t v16 = malloc_type_malloc(v15, 0xA2EA7F68uLL);
            memcpy(v16, __src, v15);
          }
          uint64_t v17 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B004018EF0026uLL);
          int v18 = malloc_type_malloc(4 * a4, 0xA2EA7F68uLL);
          memcpy(v18, a2, 4 * a4);
          v17[4] = v16;
          v17[5] = v18;
          *((_DWORD *)v17 + 12) = a4;
          *(void *)&v50[2 * v14] = v17;
          sss_split_km((void **)v17, a5, v49, &v51, v12, v48, v47);
          BOOL v19 = v14-- <= 0;
        }
        while (!v19);
      }
      else
      {
        do
        {
          unsigned int v51 = v14 + a5[1];
          if (v14 || (unint64_t v20 = v45, *a5)) {
            unint64_t v20 = 0;
          }
          uint64_t v21 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B004018EF0026uLL);
          float64x2_t v22 = malloc_type_malloc(4 * a4, 0xA2EA7F68uLL);
          memcpy(v22, a2, 4 * a4);
          v21[4] = v20;
          v21[5] = v22;
          *((_DWORD *)v21 + 12) = a4;
          *(void *)&v50[2 * v14] = v21;
          sss_split_km((void **)v21, a5, a3, &v51, v12, v48, v47);
          BOOL v19 = v14-- <= 0;
        }
        while (!v19);
      }
      goto LABEL_47;
    }
    uint64_t v44 = a4 & 0xFFFFFFF8;
    if (__src)
    {
      while (1)
      {
        int v23 = v13;
        int v13 = v14;
        unsigned int v51 = a5[1] + v14;
        if (v23 != 1 || (uint64_t v24 = v45, *a5))
        {
          uint64_t v24 = malloc_type_malloc(v15, 0xA2EA7F68uLL);
          memcpy(v24, __src, v15);
        }
        double v25 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B004018EF0026uLL);
        uint64_t v26 = (int32x4_t *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
        if (a4 < 1) {
          goto LABEL_22;
        }
        if (a4 >= 8)
        {
          uint64_t v28 = v26 + 1;
          uint64_t v29 = a4 & 0xFFFFFFF8;
          int32x4_t v30 = (int32x4_t)xmmword_21BB7A770;
          v31.i64[0] = 0x400000004;
          v31.i64[1] = 0x400000004;
          v32.i64[0] = 0x800000008;
          v32.i64[1] = 0x800000008;
          do
          {
            v28[-1] = v30;
            *uint64_t v28 = vaddq_s32(v30, v31);
            int32x4_t v30 = vaddq_s32(v30, v32);
            v28 += 2;
            v29 -= 8;
          }
          while (v29);
          uint64_t v27 = a4 & 0xFFFFFFF8;
          if (v44 == a4) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v27 = 0;
        }
        do
        {
          v26->i32[v27] = v27;
          ++v27;
        }
        while (a4 != v27);
LABEL_22:
        float32x4_t v25[4] = v24;
        v25[5] = v26;
        *((_DWORD *)v25 + 12) = a4;
        *(void *)&v50[2 * v14] = v25;
        sss_split_km((void **)v25, a5, a3, &v51, v12, v48, v47);
        BOOL v19 = v14-- <= 0;
        if (v19) {
          goto LABEL_47;
        }
      }
    }
    do
    {
      int v33 = v13;
      int v13 = v14;
      unsigned int v51 = a5[1] + v14;
      if (v33 != 1 || (uint64_t v34 = v45, *a5)) {
        uint64_t v34 = 0;
      }
      uint64_t v35 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B004018EF0026uLL);
      uint64_t v36 = (int32x4_t *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
      if (a4 < 1) {
        goto LABEL_35;
      }
      if (a4 >= 8)
      {
        uint64_t v38 = v36 + 1;
        uint64_t v39 = a4 & 0xFFFFFFF8;
        int32x4_t v40 = (int32x4_t)xmmword_21BB7A770;
        v41.i64[0] = 0x400000004;
        v41.i64[1] = 0x400000004;
        v42.i64[0] = 0x800000008;
        v42.i64[1] = 0x800000008;
        do
        {
          v38[-1] = v40;
          *uint64_t v38 = vaddq_s32(v40, v41);
          int32x4_t v40 = vaddq_s32(v40, v42);
          v38 += 2;
          v39 -= 8;
        }
        while (v39);
        uint64_t v37 = a4 & 0xFFFFFFF8;
        if (v44 == a4) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v37 = 0;
      }
      do
      {
        v36->i32[v37] = v37;
        ++v37;
      }
      while (a4 != v37);
LABEL_35:
      v35[4] = v34;
      v35[5] = v36;
      *((_DWORD *)v35 + 12) = a4;
      *(void *)&v50[2 * v14] = v35;
      sss_split_km((void **)v35, a5, a3, &v51, v12, v48, v47);
      BOOL v19 = v14-- <= 0;
    }
    while (!v19);
  }
LABEL_47:
  free(v12);
  if (__src != v45) {
    free(__src);
  }
  return v50;
}

void sss_split_km(void **a1, _DWORD *a2, int a3, unsigned int *a4, char *a5, uint64_t a6, _DWORD *a7)
{
  int v7 = a2[3];
  int v8 = *((_DWORD *)a1 + 12) / a2[4];
  if (v7 >= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = v7;
  }
  if ((int)v9 < 2) {
    return;
  }
  size_t v252 = (int)v9 * a3;
  *a1 = malloc_type_malloc(v252, 0xE0B6BE08uLL);
  a1[1] = malloc_type_malloc(4 * v9, 0x100004052888210uLL);
  *((_DWORD *)a1 + 4) = v9;
  a1[3] = malloc_type_calloc(v9, 0x38uLL, 0x10B004018EF0026uLL);
  size_t v251 = 4 * v9;
  uint64_t v14 = malloc_type_malloc(v251, 0x100004052888210uLL);
  int v15 = 0;
  int v16 = *((_DWORD *)a1 + 12);
  int v17 = v9 - 1;
  do
  {
    int v19 = rand_r(a4) % (v16 - v15);
    if (v15)
    {
      uint64_t v20 = v17;
      while (1)
      {
        uint64_t v21 = (char *)&v14[v20];
        int v22 = *((_DWORD *)v21 + 1);
        if (v19 < v22) {
          break;
        }
        uint64_t v18 = v20 + 1;
        uint64_t v23 = v20;
        int v24 = v14[v23];
        v14[v23] = v22;
        *((_DWORD *)v21 + 1) = v24;
        ++v19;
        uint64_t v20 = v18;
        if (v18 >= (v9 - 1)) {
          goto LABEL_7;
        }
      }
      LODWORD(v1_Block_object_dispose(&STACK[0x220], 8) = v20;
    }
    else
    {
      LODWORD(v1_Block_object_dispose(&STACK[0x220], 8) = v9 - 1;
    }
LABEL_7:
    v14[(int)v18] = v19;
    ++v15;
    --v17;
  }
  while (v15 != v9);
  if (a3 >= 1)
  {
    uint64_t v25 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      uint64_t v27 = 0;
      do
      {
        *((unsigned char *)*a1 + v25 + v27) = *((unsigned char *)a1[4] + (int)v14[i] * (uint64_t)a3 + v27);
        ++v27;
      }
      while (a3 != v27);
      v25 += a3;
    }
  }
  free(v14);
  uint64_t v28 = (char *)malloc_type_malloc(8 * v252, 0x100004000313F17uLL);
  uint64_t v29 = (int *)malloc_type_malloc(v251, 0x100004052888210uLL);
  int32x4_t v30 = (char *)malloc_type_malloc(v251, 0x100004052888210uLL);
  int32x4_t v31 = v30;
  LODWORD(v32) = *((_DWORD *)a1 + 12);
  if ((int)v32 >= 1)
  {
    uint64_t v33 = 0;
    do
    {
      a7[v33++] = -1;
      uint64_t v32 = *((int *)a1 + 12);
    }
    while (v33 < v32);
  }
  if ((int)a2[6] < 1 || (a3 <= 1 ? (uint64_t v34 = 1) : (uint64_t v34 = a3), (int)v32 < 1))
  {
LABEL_132:
    free(a1[3]);
    a1[3] = 0;
    free(*a1);
    *a1 = 0;
    free(a1[1]);
    int v144 = 0;
    a1[1] = 0;
    goto LABEL_133;
  }
  int32x4_t v247 = v30;
  int v35 = 0;
  int v36 = 0;
  uint64_t v37 = a3 & 0xFFFFFFE0;
  uint64_t v38 = a3 & 0x18;
  uint64_t v39 = a3 & 0xFFFFFFF8;
  uint64_t v250 = v34;
  do
  {
    int32x4_t v40 = (char *)*a1;
    int32x4_t v41 = (int8x16_t *)a1[4];
    if (a3 == 64)
    {
      uint64_t v42 = 0;
      int v43 = 1;
      uint64_t v44 = (char *)a1[4];
      do
      {
        uint64_t v45 = 0;
        int v46 = 0x7FFFFFFF;
        uint64_t v47 = v40;
        do
        {
          unint64_t v48 = 0;
          int v49 = 0;
          do
          {
            uint8x16_t v50 = vabdq_u8(*(uint8x16_t *)&v47[v48], *(uint8x16_t *)&v44[v48]);
            v49 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v50.i8), vmull_high_u8(v50, v50)));
            BOOL v102 = v48 >= 0x30;
            v48 += 16;
          }
          while (!v102);
          if (v49 < v46)
          {
            int v43 = v43 & (v42 == a7[v45]);
            a7[v42] = v45;
            int v46 = v49;
          }
          ++v45;
          v47 += 64;
        }
        while (v45 != v9);
        v44 += 64;
        ++v42;
      }
      while (v42 != v32);
      goto LABEL_72;
    }
    if ((a3 & 0xF) != 0)
    {
      if (a3 <= 0)
      {
        uint64_t v88 = 0;
        LOBYTE(v43) = 1;
        do
        {
          int v43 = v43 & (v88 == *a7);
          a7[v88++] = 0;
        }
        while (v32 != v88);
        goto LABEL_72;
      }
      uint64_t v51 = 0;
      int v43 = 1;
      uint64_t v52 = (char *)a1[4];
LABEL_42:
      uint64_t v53 = 0;
      int v54 = 0x7FFFFFFF;
      double v55 = v40;
      while (1)
      {
        if (a3 >= 8)
        {
          if (a3 < 0x20)
          {
            int v57 = 0;
            uint64_t v58 = 0;
LABEL_52:
            int32x4_t v76 = 0uLL;
            int32x4_t v77 = (int32x4_t)v57;
            do
            {
              int16x8_t v78 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v55[v58], *(uint8x8_t *)&v52[v58]);
              int32x4_t v76 = vmlal_high_s16(v76, v78, v78);
              int32x4_t v77 = vmlal_s16(v77, *(int16x4_t *)v78.i8, *(int16x4_t *)v78.i8);
              v58 += 8;
            }
            while (v39 != v58);
            int v57 = vaddvq_s32(vaddq_s32(v77, v76));
            uint64_t v56 = a3 & 0xFFFFFFF8;
            if (v39 == a3) {
              goto LABEL_56;
            }
            goto LABEL_55;
          }
          uint64_t v59 = 0;
          int32x4_t v60 = 0uLL;
          int32x4_t v61 = 0uLL;
          int32x4_t v62 = 0uLL;
          int32x4_t v63 = 0uLL;
          int32x4_t v64 = 0uLL;
          int32x4_t v65 = 0uLL;
          int32x4_t v66 = 0uLL;
          int32x4_t v67 = 0uLL;
          do
          {
            uint8x16_t v68 = *(uint8x16_t *)&v55[v59];
            uint8x16_t v69 = *(uint8x16_t *)&v55[v59 + 16];
            uint8x16_t v70 = *(uint8x16_t *)&v52[v59];
            uint8x16_t v71 = *(uint8x16_t *)&v52[v59 + 16];
            int16x8_t v72 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v70.i8);
            int16x8_t v73 = (int16x8_t)vsubl_high_u8(v68, v70);
            int16x8_t v74 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v69.i8, *(uint8x8_t *)v71.i8);
            int16x8_t v75 = (int16x8_t)vsubl_high_u8(v69, v71);
            int32x4_t v63 = vmlal_high_s16(v63, v73, v73);
            int32x4_t v62 = vmlal_s16(v62, *(int16x4_t *)v73.i8, *(int16x4_t *)v73.i8);
            int32x4_t v61 = vmlal_high_s16(v61, v72, v72);
            int32x4_t v60 = vmlal_s16(v60, *(int16x4_t *)v72.i8, *(int16x4_t *)v72.i8);
            int32x4_t v67 = vmlal_high_s16(v67, v75, v75);
            int32x4_t v66 = vmlal_s16(v66, *(int16x4_t *)v75.i8, *(int16x4_t *)v75.i8);
            int32x4_t v65 = vmlal_high_s16(v65, v74, v74);
            int32x4_t v64 = vmlal_s16(v64, *(int16x4_t *)v74.i8, *(int16x4_t *)v74.i8);
            v59 += 32;
          }
          while (v37 != v59);
          int v57 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v64, v60), vaddq_s32(v66, v62)), vaddq_s32(vaddq_s32(v65, v61), vaddq_s32(v67, v63))));
          if (v37 == a3) {
            goto LABEL_56;
          }
          uint64_t v58 = a3 & 0xFFFFFFE0;
          uint64_t v56 = v58;
          if (v38) {
            goto LABEL_52;
          }
        }
        else
        {
          uint64_t v56 = 0;
          int v57 = 0;
        }
        do
        {
LABEL_55:
          int v79 = v55[v56] - v52[v56];
          v57 += v79 * v79;
          ++v56;
        }
        while (a3 != v56);
LABEL_56:
        if (v57 < v54)
        {
          int v43 = v43 & (v51 == a7[v53]);
          a7[v51] = v53;
          int v54 = v57;
        }
        ++v53;
        v55 += a3;
        if (v53 == v9)
        {
          v52 += a3;
          if (++v51 == v32) {
            goto LABEL_72;
          }
          goto LABEL_42;
        }
      }
    }
    if (a3 <= 0)
    {
      uint64_t v89 = 0;
      LOBYTE(v43) = 1;
      do
      {
        int v43 = v43 & (v89 == *a7);
        a7[v89++] = 0;
      }
      while (v32 != v89);
    }
    else
    {
      uint64_t v80 = 0;
      int v43 = 1;
      float v81 = (char *)a1[4];
      do
      {
        uint64_t v82 = 0;
        int v83 = 0x7FFFFFFF;
        uint64_t v84 = v40;
        do
        {
          unint64_t v85 = 0;
          int v86 = 0;
          do
          {
            uint8x16_t v87 = vabdq_u8(*(uint8x16_t *)&v84[v85], *(uint8x16_t *)&v81[v85]);
            v86 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v87.i8), vmull_high_u8(v87, v87)));
            v85 += 16;
          }
          while (v85 < a3);
          if (v86 < v83)
          {
            int v43 = v43 & (v80 == a7[v82]);
            a7[v80] = v82;
            int v83 = v86;
          }
          ++v82;
          v84 += a3;
        }
        while (v82 != v9);
        v81 += a3;
        ++v80;
      }
      while (v80 != v32);
    }
LABEL_72:
    if (v43) {
      break;
    }
    int v254 = v36;
    if ((int)v252 >= 1) {
      bzero(v28, 8 * v252);
    }
    bzero(v29, v251);
    if (a2[7])
    {
      int v91 = v254;
      int v92 = *((_DWORD *)a1 + 12);
      if (v254 + 1 >= a2[6])
      {
        uint64_t v93 = v250;
        uint64_t v38 = a3 & 0x18;
        if (v92 >= 1)
        {
          uint64_t v94 = 0;
          do
          {
            uint64_t v95 = (int)a7[v94];
            ++v29[v95];
            ++v94;
          }
          while (v94 < *((int *)a1 + 12));
        }
        goto LABEL_105;
      }
    }
    else
    {
      int v92 = *((_DWORD *)a1 + 12);
      int v91 = v254;
    }
    uint64_t v93 = v250;
    uint64_t v38 = a3 & 0x18;
    if (v92 >= 1)
    {
      uint64_t v96 = 0;
      uint64_t v97 = v41;
      while (1)
      {
        uint64_t v98 = (int)a7[v96];
        if (a3 >= 1) {
          break;
        }
LABEL_84:
        ++v29[v98];
        ++v96;
        uint64_t v97 = (int8x16_t *)((char *)v97 + a3);
        if (v96 >= *((int *)a1 + 12)) {
          goto LABEL_105;
        }
      }
      int v99 = v98 * a3;
      unint64_t v100 = (unint64_t)&v28[8 * (int)v98 * a3];
      if (a3 >= 8)
      {
        BOOL v102 = v100 >= (unint64_t)v41->u64 + a3 + v96 * a3
            || &v41->i8[v96 * a3] >= &v28[8 * a3 + 8 * v99];
        if (v102)
        {
          if (a3 >= 0x10)
          {
            uint64_t v110 = a3 & 0xFFFFFFF0;
            int v111 = v97;
            int v112 = (uint64x2_t *)&v28[8 * v99];
            do
            {
              int8x16_t v113 = *v111++;
              uint32x4_t v114 = (uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_21BB7AAE0);
              uint32x4_t v115 = (uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_21BB7AAD0);
              uint32x4_t v116 = (uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_21BB7AAC0);
              uint32x4_t v117 = (uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_21BB7AAB0);
              uint64x2_t v118 = vaddw_u32(*v112, *(uint32x2_t *)v114.i8);
              uint64x2_t v119 = vaddw_u32(v112[2], *(uint32x2_t *)v115.i8);
              uint64x2_t v120 = vaddw_u32(v112[4], *(uint32x2_t *)v116.i8);
              uint64x2_t v121 = vaddw_u32(v112[6], *(uint32x2_t *)v117.i8);
              uint64x2_t v122 = vaddw_high_u32(v112[1], v114);
              uint64x2_t v123 = vaddw_high_u32(v112[3], v115);
              uint64x2_t v124 = vaddw_high_u32(v112[5], v116);
              int8x16_t v90 = (int8x16_t)vaddw_high_u32(v112[7], v117);
              v112[6] = v121;
              v112[7] = (uint64x2_t)v90;
              v112[4] = v120;
              v112[5] = v124;
              v112[2] = v119;
              v112[3] = v123;
              *int v112 = v118;
              v112[1] = v122;
              v112 += 8;
              v110 -= 16;
            }
            while (v110);
            if ((a3 & 0xFFFFFFF0) == (unint64_t)a3) {
              goto LABEL_84;
            }
            uint64_t v103 = a3 & 0xFFFFFFF0;
            uint64_t v101 = v103;
            if ((a3 & 8) == 0) {
              goto LABEL_98;
            }
          }
          else
          {
            uint64_t v103 = 0;
          }
          float v104 = (uint64x2_t *)&v28[8 * v103 + 8 * v99];
          do
          {
            v90.i64[0] = *(uint64_t *)((char *)v97->i64 + v103);
            uint32x4_t v105 = (uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_21BB7AAE0);
            uint32x4_t v106 = (uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_21BB7AAD0);
            uint64x2_t v107 = vaddw_u32(*v104, *(uint32x2_t *)v105.i8);
            uint64x2_t v108 = vaddw_u32(v104[2], *(uint32x2_t *)v106.i8);
            uint64x2_t v109 = vaddw_high_u32(v104[1], v105);
            int8x16_t v90 = (int8x16_t)vaddw_high_u32(v104[3], v106);
            v104[2] = v108;
            v104[3] = (uint64x2_t)v90;
            *float v104 = v107;
            v104[1] = v109;
            v104 += 4;
            v103 += 8;
          }
          while (v39 != v103);
          uint64_t v101 = a3 & 0xFFFFFFF8;
          if (v39 == a3) {
            goto LABEL_84;
          }
          goto LABEL_98;
        }
        uint64_t v101 = 0;
      }
      else
      {
        uint64_t v101 = 0;
      }
      do
      {
LABEL_98:
        *(void *)(v100 + 8 * v101) += v97->u8[v101];
        ++v101;
      }
      while (a3 != v101);
      goto LABEL_84;
    }
LABEL_105:
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    int v35 = 0;
    int v36 = v91 + 1;
    do
    {
      if (!v29[v126]) {
        goto LABEL_106;
      }
      ++v35;
      if (a2[7])
      {
        if (a3 < 1 || v36 >= a2[6]) {
          goto LABEL_106;
        }
      }
      else if (a3 < 1)
      {
        goto LABEL_106;
      }
      uint64_t v127 = v125;
      uint64_t v128 = v93;
      do
      {
        unint64_t v129 = v29[v126];
        if ((v129 & 0x80000000) == 0) {
          int v130 = v29[v126];
        }
        else {
          int v130 = v129 + 1;
        }
        *((unsigned char *)*a1 + v127) = (*(void *)&v28[8 * v127] + (v130 >> 1)) / v129;
        ++v127;
        --v128;
      }
      while (v128);
LABEL_106:
      ++v126;
      v125 += a3;
    }
    while (v126 != v9);
    if (v36 >= a2[6]) {
      break;
    }
    LODWORD(v32) = *((_DWORD *)a1 + 12);
  }
  while ((int)v32 >= 1);
  int32x4_t v31 = v247;
  if (v35 <= 1) {
    goto LABEL_132;
  }
  int v131 = v35;
  int16x8_t v255 = (float32x4_t *)a1[1];
  bzero(v255, v251);
  uint64_t v132 = *((unsigned int *)a1 + 12);
  if (a3 != 64)
  {
    int v133 = v131;
    uint64_t v134 = a6;
    int v135 = v255;
    if ((int)v132 < 1) {
      goto LABEL_163;
    }
    uint64_t v149 = 0;
    uint64_t v150 = (char *)*a1;
    uint64_t v151 = (uint8x8_t *)a1[4];
    uint64_t v152 = (uint64_t)*a1 + 16;
    float v153 = v151 + 2;
    while (1)
    {
      uint64_t v157 = (int)a7[v149];
      uint64_t v158 = &v150[(int)v157 * (uint64_t)a3];
      if ((a3 & 0xF) != 0)
      {
        if (a3 >= 1)
        {
          if (a3 < 8)
          {
            uint64_t v159 = 0;
            int v154 = 0;
            do
            {
LABEL_161:
              int v190 = v158[v159] - v151->u8[v159];
              v154 += v190 * v190;
              ++v159;
            }
            while (a3 != v159);
            goto LABEL_141;
          }
          uint64_t v162 = (int)v157 * (uint64_t)a3;
          if (a3 >= 0x20)
          {
            int32x4_t v164 = 0uLL;
            uint64_t v165 = (uint8x8_t *)(v152 + v162);
            int32x4_t v166 = 0uLL;
            uint64_t v167 = a3 & 0xFFFFFFE0;
            uint64_t v168 = v153;
            int32x4_t v169 = 0uLL;
            int32x4_t v170 = 0uLL;
            int32x4_t v171 = 0uLL;
            int32x4_t v172 = 0uLL;
            int32x4_t v173 = 0uLL;
            int32x4_t v174 = 0uLL;
            do
            {
              uint8x16_t v175 = *(uint8x16_t *)v165[-2].i8;
              uint8x16_t v176 = *(uint8x16_t *)v168[-2].i8;
              int16x8_t v177 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v175.i8, *(uint8x8_t *)v176.i8);
              int16x8_t v178 = (int16x8_t)vsubl_high_u8(v175, v176);
              int16x8_t v179 = (int16x8_t)vsubl_u8(*v165, *v168);
              int16x8_t v180 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v165->i8, *(uint8x16_t *)v168->i8);
              int32x4_t v170 = vmlal_high_s16(v170, v178, v178);
              int32x4_t v169 = vmlal_s16(v169, *(int16x4_t *)v178.i8, *(int16x4_t *)v178.i8);
              int32x4_t v166 = vmlal_high_s16(v166, v177, v177);
              int32x4_t v164 = vmlal_s16(v164, *(int16x4_t *)v177.i8, *(int16x4_t *)v177.i8);
              int32x4_t v174 = vmlal_high_s16(v174, v180, v180);
              int32x4_t v173 = vmlal_s16(v173, *(int16x4_t *)v180.i8, *(int16x4_t *)v180.i8);
              int32x4_t v172 = vmlal_high_s16(v172, v179, v179);
              int32x4_t v171 = vmlal_s16(v171, *(int16x4_t *)v179.i8, *(int16x4_t *)v179.i8);
              v165 += 4;
              v168 += 4;
              v167 -= 32;
            }
            while (v167);
            int v154 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v171, v164), vaddq_s32(v173, v169)), vaddq_s32(vaddq_s32(v172, v166), vaddq_s32(v174, v170))));
            if ((a3 & 0xFFFFFFE0) == (unint64_t)a3) {
              goto LABEL_141;
            }
            uint64_t v163 = a3 & 0xFFFFFFE0;
            uint64_t v159 = v163;
            if ((a3 & 0x18) == 0) {
              goto LABEL_161;
            }
          }
          else
          {
            int v154 = 0;
            uint64_t v163 = 0;
          }
          int32x4_t v181 = 0uLL;
          int32x4_t v182 = (int32x4_t)v154;
          uint64_t v183 = (uint8x8_t *)&v150[v163 + v162];
          uint8x16_t v184 = (uint8x8_t *)((char *)v151 + v163);
          uint64_t v185 = v163 - (a3 & 0xFFFFFFF8);
          do
          {
            uint8x8_t v186 = *v183++;
            uint8x8_t v187 = v186;
            uint8x8_t v188 = *v184++;
            int16x8_t v189 = (int16x8_t)vsubl_u8(v187, v188);
            int32x4_t v181 = vmlal_high_s16(v181, v189, v189);
            int32x4_t v182 = vmlal_s16(v182, *(int16x4_t *)v189.i8, *(int16x4_t *)v189.i8);
            v185 += 8;
          }
          while (v185);
          int v154 = vaddvq_s32(vaddq_s32(v182, v181));
          uint64_t v159 = a3 & 0xFFFFFFF8;
          if (v159 == a3) {
            goto LABEL_141;
          }
          goto LABEL_161;
        }
      }
      else if (a3 >= 1)
      {
        unint64_t v160 = 0;
        int v154 = 0;
        do
        {
          uint8x16_t v161 = vabdq_u8(*(uint8x16_t *)&v158[v160], *(uint8x16_t *)v151[v160 / 8].i8);
          v154 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v161.i8, *(uint8x8_t *)v161.i8), vmull_high_u8(v161, v161)));
          v160 += 16;
        }
        while (v160 < a3);
        goto LABEL_141;
      }
      int v154 = 0;
LABEL_141:
      float v155 = (float)v154;
      uint64_t v156 = v157;
      if (v255->f32[v156] >= (float)v154) {
        float v155 = v255->f32[v156];
      }
      v255->f32[v156] = v155;
      ++v149;
      float v153 = (uint8x8_t *)((char *)v153 + a3);
      uint64_t v151 = (uint8x8_t *)((char *)v151 + a3);
      if (v149 == v132) {
        goto LABEL_163;
      }
    }
  }
  int v133 = v131;
  uint64_t v134 = a6;
  int v135 = v255;
  if ((int)v132 >= 1)
  {
    uint64_t v136 = 0;
    int v137 = (char *)*a1;
    int v138 = (char *)a1[4];
    do
    {
      unint64_t v139 = 0;
      int v140 = 0;
      uint64_t v141 = (int)a7[v136];
      do
      {
        uint8x16_t v142 = vabdq_u8(*(uint8x16_t *)&v137[64 * v141 + v139], *(uint8x16_t *)&v138[v139]);
        v140 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v142.i8, *(uint8x8_t *)v142.i8), vmull_high_u8(v142, v142)));
        BOOL v102 = v139 >= 0x30;
        v139 += 16;
      }
      while (!v102);
      float v143 = (float)v140;
      if (v255->f32[v141] >= (float)v140) {
        float v143 = v255->f32[v141];
      }
      v255->f32[v141] = v143;
      ++v136;
      v138 += 64;
    }
    while (v136 != v132);
  }
LABEL_163:
  if (v9 < 8)
  {
    size_t v191 = 0;
    goto LABEL_168;
  }
  size_t v191 = v9 & 0x7FFFFFF8;
  long long v192 = v135 + 1;
  uint64_t v193 = v9 & 0xFFFFFFF8;
  do
  {
    float32x4_t v194 = vsqrtq_f32(*v192);
    v192[-1] = vsqrtq_f32(v192[-1]);
    *long long v192 = v194;
    v192 += 2;
    v193 -= 8;
  }
  while (v193);
  if (v191 != v9)
  {
LABEL_168:
    size_t v195 = v9 - v191;
    float32x4_t v196 = &v135->f32[v191];
    do
    {
      *float32x4_t v196 = sqrtf(*v196);
      ++v196;
      --v195;
    }
    while (v195);
  }
  *(_DWORD *)int32x4_t v247 = 0;
  float64x2_t v197 = (char *)a1[3];
  int v198 = *v29;
  *((_OWORD *)v197 + 2) = *((_OWORD *)a1 + 2);
  *((_DWORD *)v197 + 12) = v198;
  float64x2_t v199 = v197 + 104;
  if (v247 >= &v197[56 * v9 - 4] || v199 >= &v247[4 * v9])
  {
    float64x2_t v201 = v247 + 4;
    LODWORD(v202) = *(_DWORD *)v247;
    size_t v203 = v9 - 1;
    uint8x16_t v204 = v29 + 1;
    do
    {
      uint64_t v202 = *(v204 - 1) + (uint64_t)(int)v202;
      *v201++ = v202;
      uint64_t v205 = (uint64_t)a1[5] + 4 * v202;
      int v206 = *v204++;
      *((void *)v199 - 2) = (char *)a1[4] + v202 * a3;
      *((void *)v199 - 1) = v205;
      *(_DWORD *)float64x2_t v199 = v206;
      v199 += 56;
      --v203;
    }
    while (v203);
  }
  else
  {
    size_t v207 = v9 - 1;
    int16x8_t v208 = v247 + 4;
    int16x8_t v209 = v29 + 1;
    do
    {
      uint64_t v210 = *(v209 - 1) + (uint64_t)(int)*(v208 - 1);
      *v208++ = v210;
      uint64_t v211 = (uint64_t)a1[4] + v210 * a3;
      uint64_t v212 = (uint64_t)a1[5] + 4 * v210;
      int v213 = *v209++;
      *((void *)v199 - 2) = v211;
      *((void *)v199 - 1) = v212;
      *(_DWORD *)float64x2_t v199 = v213;
      v199 += 56;
      --v207;
    }
    while (v207);
  }
  int v214 = *((_DWORD *)a1 + 12);
  if (v214 * a3 >= 1)
  {
    uint64_t v215 = 0;
    do
    {
      a5[v215] = *((unsigned char *)a1[4] + v215);
      ++v215;
      int v214 = *((_DWORD *)a1 + 12);
    }
    while (v215 < v214 * a3);
  }
  if (v214 >= 1)
  {
    uint64_t v216 = 0;
    uint8x16_t v217 = (char *)a1[5];
    do
    {
      *(_DWORD *)(v134 + 4 * v216) = *(_DWORD *)&v217[4 * v216];
      ++v216;
      uint64_t v218 = *((int *)a1 + 12);
    }
    while (v216 < v218);
    if ((int)v218 >= 1)
    {
      uint64_t v219 = 0;
      uint8x16_t v220 = a5;
      do
      {
        uint64_t v221 = 4 * (int)a7[v219];
        uint64_t v222 = *(int *)&v247[v221];
        *(_DWORD *)&v247[v221] = v222 + 1;
        if (a3 >= 1)
        {
          uint64_t v223 = (int)v222 * a3;
          int16x8_t v224 = v220;
          uint64_t v225 = a3;
          do
          {
            char v226 = *v224++;
            *((unsigned char *)a1[4] + v223++) = v226;
            --v225;
          }
          while (v225);
          uint8x16_t v217 = (char *)a1[5];
        }
        *(_DWORD *)&v217[4 * v222] = *(_DWORD *)(v134 + 4 * v219++);
        v220 += a3;
      }
      while (v219 < *((int *)a1 + 12));
    }
  }
  if ((int)v9 < v133)
  {
    uint64_t v227 = 0;
    int v228 = 0;
    uint64_t v229 = 48;
    do
    {
      int32x4_t v230 = *a1;
      if (*(_DWORD *)((char *)a1[3] + v229)) {
        BOOL v231 = v230 == 0;
      }
      else {
        BOOL v231 = 1;
      }
      if (!v231) {
        v230[v228++] = v230[v227];
      }
      ++v227;
      v229 += 56;
    }
    while (v9 != v227);
    int v232 = 0;
    uint8x16_t v233 = (char *)a1[1];
    int32x4_t v234 = (int *)((char *)a1[3] + 48);
    uint8x16_t v235 = v233;
    size_t v236 = v9;
    do
    {
      int v237 = *v234;
      v234 += 14;
      if (v237) {
        BOOL v238 = v233 == 0;
      }
      else {
        BOOL v238 = 1;
      }
      if (!v238) {
        *(_DWORD *)&v233[4 * v232++] = *(_DWORD *)v235;
      }
      v235 += 4;
      --v236;
    }
    while (v236);
    uint64_t v239 = 0;
    int v144 = 0;
    do
    {
      int16x8_t v240 = (char *)a1[3];
      int32x4_t v241 = &v240[v239];
      if (v240) {
        BOOL v242 = *(_DWORD *)&v240[v239 + 48] == 0;
      }
      else {
        BOOL v242 = 1;
      }
      if (!v242)
      {
        int32x4_t v243 = &v240[56 * v144];
        long long v244 = *(_OWORD *)v241;
        long long v245 = *((_OWORD *)v241 + 1);
        long long v246 = *((_OWORD *)v241 + 2);
        *((void *)v243 + 6) = *((void *)v241 + 6);
        *((_OWORD *)v243 + 1) = v245;
        *((_OWORD *)v243 + 2) = v246;
        *(_OWORD *)int32x4_t v243 = v244;
        ++v144;
      }
      v239 += 56;
      --v9;
    }
    while (v9);
LABEL_133:
    *((_DWORD *)a1 + 4) = v144;
    LODWORD(v9) = v144;
  }
  free(v28);
  free(v29);
  free(v31);
  float v145 = a5;
  if ((int)v9 >= 1)
  {
    uint64_t v146 = 0;
    uint64_t v147 = 56 * v9;
    do
    {
      uint64_t v148 = v145;
      sss_split_km();
      float v145 = v148;
      v146 += 56;
    }
    while (v147 != v146);
  }
}

void sss_node_free(uint64_t a1)
{
  if (*(int *)(a1 + 16) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    do
    {
      sss_node_free(*(void *)(a1 + 24) + v2);
      ++v3;
      v2 += 56;
    }
    while (v3 < *(int *)(a1 + 16));
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 8));
  uint64_t v4 = *(void **)(a1 + 24);
  free(v4);
}

uint64_t sss_knn(uint64_t a1, uint64_t a2, float a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a7 < 17)
  {
    uint64_t v12 = v18;
    if (a7 < 1) {
      goto LABEL_6;
    }
    uint64_t v13 = a7;
    uint64_t v12 = v18;
  }
  else
  {
    uint64_t v12 = malloc_type_malloc(4 * (2 * a7), 0x100004052888210uLL);
    uint64_t v13 = a7;
  }
  memset(a5, 255, 4 * v13);
LABEL_6:
  if (*(int *)(a1 + 256) >= 1)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    do
    {
      float v16 = sss_nn_node();
      if (v16 >= a3) {
        ++v15;
      }
      else {
        int v15 = 0;
      }
      if (v15 > *(_DWORD *)(a2 + 52)) {
        break;
      }
      ++v14;
      a3 = v16;
    }
    while (v14 < *(int *)(a1 + 256));
  }
  if (a7 >= 17) {
    free(v12);
  }
  return 0;
}

float sss_nn_node()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v8 = v7;
  float v9 = v6;
  uint64_t v10 = v2;
  double v11 = v1;
  uint64_t v12 = v0;
  v337[2187] = *MEMORY[0x263EF8340];
  uint64_t v13 = *(uint8x8_t **)v0;
  if (!*(void *)v0)
  {
LABEL_163:
    float v195 = 46340.0;
    if ((float)(v9 * v9) < 2147500000.0) {
      float v195 = v9;
    }
    int v196 = (int)v195 * (int)v195;
    int v197 = v4[1];
    ++*v4;
    int v198 = *(_DWORD *)(v12 + 48);
    v4[1] = v197 + v198;
    if (v10 == 64)
    {
      if (v198 >= 1)
      {
        uint64_t v199 = 0;
        uint64_t v200 = *(void *)(v12 + 32);
        int v201 = (int)v195 * (int)v195;
        do
        {
          unint64_t v202 = 0;
          int v203 = 0;
          do
          {
            uint8x16_t v204 = vabdq_u8(*(uint8x16_t *)(v200 + v202 * 8), *(uint8x16_t *)v11[v202].i8);
            v203 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v204.i8, *(uint8x8_t *)v204.i8), vmull_high_u8(v204, v204)));
            BOOL v24 = v202 >= 6;
            v202 += 2;
          }
          while (!v24);
          if (v203 <= v201)
          {
            int v205 = *(_DWORD *)(*(void *)(v12 + 40) + 4 * v199);
            uint64_t v206 = *(unsigned int *)(v8 + 20);
            size_t v207 = *(int **)v8;
            uint64_t v208 = v206;
            int16x8_t v209 = *(int **)v8;
            if ((int)v206 < 1)
            {
LABEL_176:
              if ((int)v206 < *(_DWORD *)(v8 + 16)) {
                LODWORD(v206) = v206 + 1;
              }
              *(_DWORD *)(v8 + 20) = v206;
              v207[(int)v206 - 1] = v205;
              uint64_t v211 = *(void *)(v8 + 8);
              *(_DWORD *)(v211 + 4 * *(int *)(v8 + 20) - 4) = v203;
              uint64_t v212 = *(unsigned int *)(v8 + 20);
              if ((int)v212 > 1)
              {
                do
                {
                  uint64_t v213 = v212 - 1;
                  int v214 = *(_DWORD *)(v211 + 4 * (v212 - 1));
                  uint64_t v215 = (v212 - 2);
                  int v216 = *(_DWORD *)(v211 + 4 * v215);
                  if (v214 >= v216) {
                    break;
                  }
                  uint64_t v217 = v213;
                  *(_DWORD *)(v211 + v217 * 4) = v216;
                  uint64_t v218 = v215;
                  *(_DWORD *)(v211 + v218 * 4) = v214;
                  int v219 = v207[v217];
                  v207[v217] = v207[v218];
                  v207[v218] = v219;
                  uint64_t v212 = v213;
                }
                while ((unint64_t)(v213 + 1) > 2);
                LODWORD(v212) = *(_DWORD *)(v8 + 20);
              }
              if (v212 == *(_DWORD *)(v8 + 16)) {
                int v201 = *(_DWORD *)(v211 + 4 * ((int)v212 - 1));
              }
            }
            else
            {
              while (1)
              {
                int v210 = *v209++;
                if (v210 == v205) {
                  break;
                }
                if (!--v208) {
                  goto LABEL_176;
                }
              }
            }
          }
          ++v199;
          v200 += 64;
        }
        while (v199 < *(int *)(v12 + 48));
        goto LABEL_219;
      }
LABEL_218:
      int v201 = (int)v195 * (int)v195;
LABEL_219:
      float v271 = sqrtf((float)v201);
      if (v201 < v196) {
        return v271;
      }
      return v9;
    }
    if (v198 < 1) {
      goto LABEL_218;
    }
    uint64_t v220 = 0;
    uint64_t v221 = *(uint8x8_t **)(v12 + 32);
    uint64_t v222 = v10 & 0xFFFFFFF8;
    uint64_t v223 = v221 + 2;
    int v201 = (int)v195 * (int)v195;
    while (1)
    {
      if ((v10 & 0xF) != 0)
      {
        if ((int)v10 >= 1)
        {
          if (v10 < 8)
          {
            uint64_t v224 = 0;
            int v225 = 0;
            do
            {
LABEL_205:
              int v255 = v221->u8[v224] - v11->u8[v224];
              v225 += v255 * v255;
              ++v224;
            }
            while (v10 != v224);
            goto LABEL_206;
          }
          if (v10 >= 0x20)
          {
            int32x4_t v229 = 0uLL;
            uint64_t v230 = v10 & 0xFFFFFFE0;
            int32x4_t v231 = 0uLL;
            int v232 = v11 + 2;
            uint8x16_t v233 = v223;
            int32x4_t v234 = 0uLL;
            int32x4_t v235 = 0uLL;
            int32x4_t v236 = 0uLL;
            int32x4_t v237 = 0uLL;
            int32x4_t v238 = 0uLL;
            int32x4_t v239 = 0uLL;
            do
            {
              uint8x16_t v240 = *(uint8x16_t *)v233[-2].i8;
              uint8x16_t v241 = *(uint8x16_t *)v232[-2].i8;
              int16x8_t v242 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v240.i8, *(uint8x8_t *)v241.i8);
              int16x8_t v243 = (int16x8_t)vsubl_high_u8(v240, v241);
              int16x8_t v244 = (int16x8_t)vsubl_u8(*v233, *v232);
              int16x8_t v245 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v233->i8, *(uint8x16_t *)v232->i8);
              int32x4_t v235 = vmlal_high_s16(v235, v243, v243);
              int32x4_t v234 = vmlal_s16(v234, *(int16x4_t *)v243.i8, *(int16x4_t *)v243.i8);
              int32x4_t v231 = vmlal_high_s16(v231, v242, v242);
              int32x4_t v229 = vmlal_s16(v229, *(int16x4_t *)v242.i8, *(int16x4_t *)v242.i8);
              int32x4_t v239 = vmlal_high_s16(v239, v245, v245);
              int32x4_t v238 = vmlal_s16(v238, *(int16x4_t *)v245.i8, *(int16x4_t *)v245.i8);
              int32x4_t v237 = vmlal_high_s16(v237, v244, v244);
              int32x4_t v236 = vmlal_s16(v236, *(int16x4_t *)v244.i8, *(int16x4_t *)v244.i8);
              v233 += 4;
              v232 += 4;
              v230 -= 32;
            }
            while (v230);
            int v225 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v236, v229), vaddq_s32(v238, v234)), vaddq_s32(vaddq_s32(v237, v231), vaddq_s32(v239, v235))));
            if ((v10 & 0xFFFFFFE0) == v10) {
              goto LABEL_206;
            }
            uint64_t v228 = v10 & 0xFFFFFFE0;
            uint64_t v224 = v228;
            if ((v10 & 0x18) == 0) {
              goto LABEL_205;
            }
          }
          else
          {
            int v225 = 0;
            uint64_t v228 = 0;
          }
          int32x4_t v246 = 0uLL;
          int32x4_t v247 = (int32x4_t)v225;
          uint8x16_t v248 = (uint8x8_t *)((char *)v221 + v228);
          uint8x16_t v249 = (uint8x8_t *)((char *)v11 + v228);
          uint64_t v250 = v228 - v222;
          do
          {
            uint8x8_t v251 = *v248++;
            uint8x8_t v252 = v251;
            uint8x8_t v253 = *v249++;
            int16x8_t v254 = (int16x8_t)vsubl_u8(v252, v253);
            int32x4_t v246 = vmlal_high_s16(v246, v254, v254);
            int32x4_t v247 = vmlal_s16(v247, *(int16x4_t *)v254.i8, *(int16x4_t *)v254.i8);
            v250 += 8;
          }
          while (v250);
          int v225 = vaddvq_s32(vaddq_s32(v247, v246));
          uint64_t v224 = v10 & 0xFFFFFFF8;
          if (v222 == v10) {
            goto LABEL_206;
          }
          goto LABEL_205;
        }
      }
      else if ((int)v10 >= 1)
      {
        unint64_t v226 = 0;
        int v225 = 0;
        do
        {
          uint8x16_t v227 = vabdq_u8(*(uint8x16_t *)v221[v226 / 8].i8, *(uint8x16_t *)v11[v226 / 8].i8);
          v225 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v227.i8, *(uint8x8_t *)v227.i8), vmull_high_u8(v227, v227)));
          v226 += 16;
        }
        while (v226 < v10);
        goto LABEL_206;
      }
      int v225 = 0;
LABEL_206:
      if (v225 <= v201)
      {
        int v256 = *(_DWORD *)(*(void *)(v12 + 40) + 4 * v220);
        uint64_t v257 = *(unsigned int *)(v8 + 20);
        int32x4_t v258 = *(int **)v8;
        uint64_t v259 = v257;
        int32x4_t v260 = *(int **)v8;
        if ((int)v257 < 1)
        {
LABEL_210:
          if ((int)v257 < *(_DWORD *)(v8 + 16)) {
            LODWORD(v257) = v257 + 1;
          }
          *(_DWORD *)(v8 + 20) = v257;
          v258[(int)v257 - 1] = v256;
          uint64_t v262 = *(void *)(v8 + 8);
          *(_DWORD *)(v262 + 4 * *(int *)(v8 + 20) - 4) = v225;
          uint64_t v263 = *(unsigned int *)(v8 + 20);
          if ((int)v263 > 1)
          {
            do
            {
              uint64_t v264 = v263 - 1;
              int v265 = *(_DWORD *)(v262 + 4 * (v263 - 1));
              uint64_t v266 = (v263 - 2);
              int v267 = *(_DWORD *)(v262 + 4 * v266);
              if (v265 >= v267) {
                break;
              }
              uint64_t v268 = v264;
              *(_DWORD *)(v262 + v268 * 4) = v267;
              uint64_t v269 = v266;
              *(_DWORD *)(v262 + v269 * 4) = v265;
              int v270 = v258[v268];
              v258[v268] = v258[v269];
              v258[v269] = v270;
              uint64_t v263 = v264;
            }
            while ((unint64_t)(v264 + 1) > 2);
            LODWORD(v263) = *(_DWORD *)(v8 + 20);
          }
          if (v263 == *(_DWORD *)(v8 + 16)) {
            int v201 = *(_DWORD *)(v262 + 4 * ((int)v263 - 1));
          }
        }
        else
        {
          while (1)
          {
            int v261 = *v260++;
            if (v261 == v256) {
              break;
            }
            if (!--v259) {
              goto LABEL_210;
            }
          }
        }
      }
      ++v220;
      uint64_t v223 = (uint8x8_t *)((char *)v223 + (int)v10);
      uint64_t v221 = (uint8x8_t *)((char *)v221 + (int)v10);
      if (v220 >= *(int *)(v12 + 48)) {
        goto LABEL_219;
      }
    }
  }
  uint64_t v14 = v5;
  int v15 = v2 & 0xF;
  int v16 = v2;
  if (!*(_DWORD *)(v5 + 32))
  {
    int v26 = v3;
    uint64_t v336 = v4;
    uint64_t v27 = (int *)malloc_type_malloc(8 * *(int *)(v0 + 16), 0x14A0D62uLL);
    uint64_t v28 = v27;
    uint64_t v29 = *(int *)(v12 + 16);
    int32x4_t v30 = &v27[v29];
    if (v10 == 64)
    {
      if ((int)v29 >= 1)
      {
        uint64_t v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = *(uint8x8_t **)v12;
        uint64_t v34 = *(void *)(v12 + 8);
        do
        {
          unint64_t v35 = 0;
          int v36 = 0;
          do
          {
            uint8x16_t v37 = vabdq_u8(*(uint8x16_t *)v33[v35].i8, *(uint8x16_t *)v11[v35].i8);
            v36 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v37.i8), vmull_high_u8(v37, v37)));
            BOOL v24 = v35 >= 6;
            v35 += 2;
          }
          while (!v24);
          float v38 = sqrtf((float)v36);
          uint64_t v39 = v32;
          *(float *)&v30[v39] = v38;
          v27[v39] = v31;
          if ((float)(v38 - *(float *)(v34 + 4 * v31)) < v9) {
            ++v32;
          }
          ++v31;
          v33 += 8;
          int v40 = v32;
        }
        while (v31 < *(int *)(v12 + 16));
LABEL_25:
        if (v40)
        {
          int v335 = v15;
          uint64_t v334 = v8;
          if (v40 > 16)
          {
            int v331 = v26;
            uint64_t v332 = (float *)v30;
            unsigned int v333 = v40;
            int32x4_t v41 = (char *)malloc_type_malloc(0x200uLL, 0x356C0F7AuLL);
            uint64_t v42 = v332;
            uint64_t v43 = 0;
            BOOL v44 = 1;
            uint64_t v45 = 32;
            int v46 = v332;
            uint64_t v47 = v28;
            unint64_t v48 = v333;
            while (1)
            {
              uint64_t v49 = v43;
              while (1)
              {
                if (!v44)
                {
                  --v49;
                  uint8x16_t v50 = (uint64_t *)&v41[16 * v49];
                  unint64_t v48 = v50[1];
                  uint64_t v51 = *v50;
                  int v46 = &v42[v51];
                  uint64_t v47 = &v28[v51];
                }
                if ((uint64_t)v48 > 15) {
                  break;
                }
                if ((uint64_t)v48 > 1)
                {
                  uint64_t v52 = 0;
                  uint64_t v53 = v47 + 1;
                  int v54 = v46 + 1;
                  for (uint64_t i = 1; i != v48; ++i)
                  {
                    uint64_t v56 = v52;
                    do
                    {
                      float v57 = *(float *)&v54[v56];
                      float v58 = v46[v56];
                      if ((float)(v57 - v58) >= 0.0) {
                        break;
                      }
                      uint64_t v59 = v56;
                      *(float *)&v54[v59] = v58;
                      uint64_t v60 = v56;
                      v46[v60] = v57;
                      int v61 = v53[v56];
                      v53[v59] = v47[v60];
                      v47[v60] = v61;
                      uint64_t v62 = v56-- + 1;
                    }
                    while (v62 > 1);
                    ++v52;
                  }
                }
                BOOL v44 = 0;
                unint64_t v48 = 0;
                if (v49 < 1) {
                  goto LABEL_96;
                }
              }
              if (v48 > 0x27) {
                break;
              }
              unint64_t v63 = v48 >> 1;
              float v64 = *v46;
              float v65 = v46[v48 >> 1];
              unint64_t v66 = v48 - 1;
              float v67 = v46[v48 - 1];
              float v68 = *v46 - v65;
              float v69 = v65 - v67;
              if (v69 >= 0.0) {
                unint64_t v70 = v48 >> 1;
              }
              else {
                unint64_t v70 = v48 - 1;
              }
              if ((float)(*v46 - v67) >= 0.0) {
                unint64_t v66 = 0;
              }
              else {
                unint64_t v70 = 0;
              }
              if (v69 >= 0.0) {
                unint64_t v63 = v66;
              }
              if (v68 >= 0.0) {
                unint64_t v63 = v70;
              }
LABEL_84:
              uint64_t v91 = 0;
              uint64_t v92 = 0;
              uint64_t v93 = v63;
              *int v46 = v46[v93];
              v46[v93] = v64;
              int v94 = *v47;
              *uint64_t v47 = v47[v93];
              v47[v93] = v94;
              for (uint64_t j = 1; j != v48; ++j)
              {
                float v96 = v46[j];
                if ((float)(v96 - *v46) <= 0.0)
                {
                  uint64_t v97 = ++v91;
                  uint64_t v98 = j;
                  v46[v98] = v46[v91];
                  v46[v97] = v96;
                  int v99 = v47[j];
                  v47[v98] = v47[v91];
                  v47[v97] = v99;
                  if ((float)(v46[j] - *v46) == 0.0)
                  {
                    uint64_t v100 = ++v92;
                    v46[v91] = v46[v92];
                    v46[v100] = v96;
                    v47[v91] = v47[v92];
                    v47[v100] = v99;
                  }
                }
              }
              uint64_t v101 = 4 * v91 - 4 * v92;
              uint64_t v102 = v92;
              do
              {
                float v103 = *(float *)((char *)v46 + v101);
                uint64_t v104 = v102;
                *(float *)((char *)v46 + v101) = v46[v102];
                v46[v104] = v103;
                int v105 = *(int *)((char *)v47 + v101);
                *(int *)((char *)v47 + v101) = v47[v102];
                v47[v104] = v105;
                v101 += 4;
              }
              while (v102-- > 0);
              uint64_t v43 = v49 + 1;
              if (v49 + 1 >= v45)
              {
                uint64_t v328 = 2 * v45;
                uint64_t v330 = v91;
                uint64_t v329 = v92;
                int32x4_t v41 = (char *)malloc_type_realloc(v41, 32 * v45, 0x60FA9D2CuLL);
                uint64_t v43 = v49 + 1;
                uint64_t v92 = v329;
                uint64_t v91 = v330;
                uint64_t v42 = v332;
                uint64_t v45 = v328;
              }
              uint64x2_t v107 = &v41[16 * v49];
              *(void *)uint64x2_t v107 = v91 + v46 - v42 + 1;
              *((void *)v107 + 1) = v48 + ~v91;
              unint64_t v48 = v91 - v92;
              BOOL v44 = v91 != v92;
              if (v49 < 0 && !v48)
              {
LABEL_96:
                free(v41);
                int v40 = v333;
                uint64_t v8 = v334;
                uint64x2_t v108 = v336;
                int v26 = v331;
                goto LABEL_229;
              }
            }
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            if (v48 <= 0x7D0) {
              uint64_t v73 = 8;
            }
            else {
              uint64_t v73 = 26;
            }
            if (v48 <= 0x7D0) {
              unint64_t v74 = 3;
            }
            else {
              unint64_t v74 = 9;
            }
            while (1)
            {
              uint64_t v75 = (uint64_t)(v48 - 1 + v71) / v73;
              float v76 = v46[v71 / v73];
              float v77 = v46[v75];
              uint64_t v78 = (uint64_t)(2 * v48 - 2 + v71) / v73;
              float v79 = v46[v78];
              if ((float)(v76 - v77) >= 0.0)
              {
                if ((float)(v76 - v79) < 0.0) {
                  goto LABEL_65;
                }
                if ((float)(v77 - v79) < 0.0)
                {
LABEL_67:
                  v337[v72] = v78;
                  goto LABEL_59;
                }
              }
              else if ((float)(v77 - v79) >= 0.0)
              {
                if ((float)(v76 - v79) < 0.0) {
                  goto LABEL_67;
                }
LABEL_65:
                v337[v72] = v71 / v73;
                goto LABEL_59;
              }
              v337[v72] = v75;
LABEL_59:
              ++v72;
              v71 += 3 * v48 - 3;
              if (v74 == v72)
              {
                while (1)
                {
                  uint64_t v80 = 0;
                  unint64_t v81 = 0;
                  unint64_t v82 = v74;
                  v74 /= 3uLL;
                  if (v74 <= 1) {
                    uint64_t v83 = 1;
                  }
                  else {
                    uint64_t v83 = v74;
                  }
                  uint64_t v84 = 8 * v83;
                  do
                  {
                    uint64_t v85 = v337[v80];
                    uint64_t v86 = v337[v80 + 1];
                    uint64_t v87 = v337[v80 + 2];
                    float v88 = v46[v85];
                    float v89 = v46[v86];
                    float v90 = v46[v87];
                    if ((float)(v88 - v89) >= 0.0)
                    {
                      if ((float)(v88 - v90) < 0.0) {
                        goto LABEL_80;
                      }
                      if ((float)(v89 - v90) >= 0.0)
                      {
LABEL_73:
                        v337[v81 / 8] = v86;
                        goto LABEL_74;
                      }
                    }
                    else
                    {
                      if ((float)(v89 - v90) < 0.0) {
                        goto LABEL_73;
                      }
                      if ((float)(v88 - v90) >= 0.0)
                      {
LABEL_80:
                        v337[v81 / 8] = v85;
                        goto LABEL_74;
                      }
                    }
                    v337[v81 / 8] = v87;
LABEL_74:
                    v81 += 8;
                    v80 += 3;
                  }
                  while (v84 != v81);
                  if (v82 < 9)
                  {
                    unint64_t v63 = v337[0];
                    float v64 = *v46;
                    goto LABEL_84;
                  }
                }
              }
            }
          }
          uint64x2_t v108 = v336;
          if (v40 >= 2)
          {
            uint64_t v273 = 1;
            int32x4_t v274 = &v28[v29];
            do
            {
              uint64_t v275 = v273;
              do
              {
                uint64_t v276 = v275 - 1;
                float v277 = *(float *)&v274[v275];
                float v278 = *(float *)&v30[(v275 - 1)];
                if ((float)(v277 - v278) >= 0.0) {
                  break;
                }
                uint64_t v279 = v275;
                *(float *)&v274[v279] = v278;
                uint64_t v280 = v276;
                *(float *)&v30[v280] = v277;
                int v281 = v28[v279];
                v28[v279] = v28[v280];
                v28[v280] = v281;
                uint64_t v275 = v276;
              }
              while (v276 + 1 > 1);
              ++v273;
            }
            while (v273 != v40);
          }
LABEL_229:
          uint64_t v282 = (int)(float)(*(float *)(v14 + 36) * (float)v40);
          uint64_t v283 = (v26 + 1);
          float v9 = sss_nn_node(*(void *)(v12 + 24) + 56 * *v28, v11, v10, v8, v283, v108, v14, v9);
          if ((int)v282 >= 2)
          {
            uint64_t v284 = 1;
            int16x8_t v285 = v336;
            do
            {
              if (*v285 >= *(_DWORD *)(v14 + 48) || v285[1] >= *(_DWORD *)(v14 + 44)) {
                break;
              }
              uint64_t v286 = *(uint8x8_t **)v12;
              uint64_t v287 = v28[v284];
              if (v335)
              {
                if ((int)v10 >= 1)
                {
                  uint64_t v288 = (int)v287 * (uint64_t)(int)v10;
                  if (v10 < 8)
                  {
                    uint64_t v289 = 0;
                    int v290 = 0;
LABEL_252:
                    uint64_t v321 = v10 - v289;
                    unint64_t v322 = (uint8x8_t *)((char *)v11 + v289);
                    uint64_t v323 = (uint8x8_t *)((char *)v286 + v289 + v288);
                    do
                    {
                      int v325 = v323->u8[0];
                      uint64_t v323 = (uint8x8_t *)((char *)v323 + 1);
                      int v324 = v325;
                      int v326 = v322->u8[0];
                      unint64_t v322 = (uint8x8_t *)((char *)v322 + 1);
                      v290 += (v324 - v326) * (v324 - v326);
                      --v321;
                    }
                    while (v321);
                    goto LABEL_254;
                  }
                  if (v10 >= 0x20)
                  {
                    int32x4_t v295 = 0uLL;
                    int32x4_t v296 = 0uLL;
                    int v297 = (uint8x8_t *)((char *)v286 + v288 + 16);
                    uint64_t v298 = v16 & 0xFFFFFFE0;
                    uint64_t v299 = v11 + 2;
                    int32x4_t v300 = 0uLL;
                    int32x4_t v301 = 0uLL;
                    int32x4_t v302 = 0uLL;
                    int32x4_t v303 = 0uLL;
                    int32x4_t v304 = 0uLL;
                    int32x4_t v305 = 0uLL;
                    do
                    {
                      uint8x16_t v306 = *(uint8x16_t *)v297[-2].i8;
                      uint8x16_t v307 = *(uint8x16_t *)v299[-2].i8;
                      int16x8_t v308 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v306.i8, *(uint8x8_t *)v307.i8);
                      int16x8_t v309 = (int16x8_t)vsubl_high_u8(v306, v307);
                      int16x8_t v310 = (int16x8_t)vsubl_u8(*v297, *v299);
                      int16x8_t v311 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v297->i8, *(uint8x16_t *)v299->i8);
                      int32x4_t v301 = vmlal_high_s16(v301, v309, v309);
                      int32x4_t v300 = vmlal_s16(v300, *(int16x4_t *)v309.i8, *(int16x4_t *)v309.i8);
                      int32x4_t v296 = vmlal_high_s16(v296, v308, v308);
                      int32x4_t v295 = vmlal_s16(v295, *(int16x4_t *)v308.i8, *(int16x4_t *)v308.i8);
                      int32x4_t v305 = vmlal_high_s16(v305, v311, v311);
                      int32x4_t v304 = vmlal_s16(v304, *(int16x4_t *)v311.i8, *(int16x4_t *)v311.i8);
                      int32x4_t v303 = vmlal_high_s16(v303, v310, v310);
                      int32x4_t v302 = vmlal_s16(v302, *(int16x4_t *)v310.i8, *(int16x4_t *)v310.i8);
                      v297 += 4;
                      v299 += 4;
                      v298 -= 32;
                    }
                    while (v298);
                    int v290 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v302, v295), vaddq_s32(v304, v300)), vaddq_s32(vaddq_s32(v303, v296), vaddq_s32(v305, v301))));
                    if ((v16 & 0xFFFFFFE0) == (unint64_t)v10) {
                      goto LABEL_254;
                    }
                    uint64_t v294 = v16 & 0xFFFFFFE0;
                    uint64_t v289 = v294;
                    if ((v16 & 0x18) == 0) {
                      goto LABEL_252;
                    }
                  }
                  else
                  {
                    int v290 = 0;
                    uint64_t v294 = 0;
                  }
                  int32x4_t v312 = 0uLL;
                  int32x4_t v313 = (int32x4_t)v290;
                  unint64_t v314 = (uint8x8_t *)((char *)v286 + v294 + v288);
                  uint64_t v315 = (uint8x8_t *)((char *)v11 + v294);
                  uint64_t v316 = v294 - (v16 & 0xFFFFFFF8);
                  do
                  {
                    uint8x8_t v317 = *v314++;
                    uint8x8_t v318 = v317;
                    uint8x8_t v319 = *v315++;
                    int16x8_t v320 = (int16x8_t)vsubl_u8(v318, v319);
                    int32x4_t v312 = vmlal_high_s16(v312, v320, v320);
                    int32x4_t v313 = vmlal_s16(v313, *(int16x4_t *)v320.i8, *(int16x4_t *)v320.i8);
                    v316 += 8;
                  }
                  while (v316);
                  int v290 = vaddvq_s32(vaddq_s32(v313, v312));
                  uint64_t v289 = v16 & 0xFFFFFFF8;
                  if (v289 == v10) {
                    goto LABEL_254;
                  }
                  goto LABEL_252;
                }
              }
              else if ((int)v10 >= 1)
              {
                unint64_t v291 = 0;
                int v290 = 0;
                uint64_t v292 = (uint64_t)v286 + (int)v287 * (uint64_t)(int)v10;
                do
                {
                  uint8x16_t v293 = vabdq_u8(*(uint8x16_t *)(v292 + v291), *(uint8x16_t *)v11[v291 / 8].i8);
                  v290 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v293.i8, *(uint8x8_t *)v293.i8), vmull_high_u8(v293, v293)));
                  v291 += 16;
                }
                while (v291 < v10);
                goto LABEL_254;
              }
              int v290 = 0;
LABEL_254:
              if ((float)(sqrtf((float)v290) - *(float *)(*(void *)(v12 + 8) + 4 * v287)) < (float)(v9 * *(float *)(v14 + 40)))
              {
                float v327 = sss_nn_node(*(void *)(v12 + 24) + 56 * (int)v287, v11, v10, v334, v283, v336, v14, v9);
                int16x8_t v285 = v336;
                float v9 = v327;
              }
              ++v284;
            }
            while (v284 != v282);
          }
        }
      }
LABEL_256:
      free(v28);
      return v9;
    }
    if ((int)v29 < 1) {
      goto LABEL_256;
    }
    uint64_t v147 = 0;
    int v40 = 0;
    uint64_t v149 = *(uint8x8_t **)v12;
    uint64_t v148 = *(void *)(v12 + 8);
    uint64_t v150 = *(void *)v12 + 16;
    while (1)
    {
      if (v15)
      {
        if ((int)v10 >= 1)
        {
          if (v10 < 8)
          {
            uint64_t v154 = 0;
            int v151 = 0;
            do
            {
LABEL_145:
              int v184 = v149->u8[v154] - v11->u8[v154];
              v151 += v184 * v184;
              ++v154;
            }
            while (v10 != v154);
            goto LABEL_125;
          }
          if (v10 >= 0x20)
          {
            int32x4_t v158 = 0uLL;
            uint64_t v159 = v16 & 0xFFFFFFE0;
            int32x4_t v160 = 0uLL;
            uint8x16_t v161 = v11 + 2;
            uint64_t v162 = (uint8x8_t *)v150;
            int32x4_t v163 = 0uLL;
            int32x4_t v164 = 0uLL;
            int32x4_t v165 = 0uLL;
            int32x4_t v166 = 0uLL;
            int32x4_t v167 = 0uLL;
            int32x4_t v168 = 0uLL;
            do
            {
              uint8x16_t v169 = *(uint8x16_t *)v162[-2].i8;
              uint8x16_t v170 = *(uint8x16_t *)v161[-2].i8;
              int16x8_t v171 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v169.i8, *(uint8x8_t *)v170.i8);
              int16x8_t v172 = (int16x8_t)vsubl_high_u8(v169, v170);
              int16x8_t v173 = (int16x8_t)vsubl_u8(*v162, *v161);
              int16x8_t v174 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v162->i8, *(uint8x16_t *)v161->i8);
              int32x4_t v164 = vmlal_high_s16(v164, v172, v172);
              int32x4_t v163 = vmlal_s16(v163, *(int16x4_t *)v172.i8, *(int16x4_t *)v172.i8);
              int32x4_t v160 = vmlal_high_s16(v160, v171, v171);
              int32x4_t v158 = vmlal_s16(v158, *(int16x4_t *)v171.i8, *(int16x4_t *)v171.i8);
              int32x4_t v168 = vmlal_high_s16(v168, v174, v174);
              int32x4_t v167 = vmlal_s16(v167, *(int16x4_t *)v174.i8, *(int16x4_t *)v174.i8);
              int32x4_t v166 = vmlal_high_s16(v166, v173, v173);
              int32x4_t v165 = vmlal_s16(v165, *(int16x4_t *)v173.i8, *(int16x4_t *)v173.i8);
              v162 += 4;
              v161 += 4;
              v159 -= 32;
            }
            while (v159);
            int v151 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v165, v158), vaddq_s32(v167, v163)), vaddq_s32(vaddq_s32(v166, v160), vaddq_s32(v168, v164))));
            if ((v16 & 0xFFFFFFE0) == (unint64_t)v10) {
              goto LABEL_125;
            }
            uint64_t v157 = v16 & 0xFFFFFFE0;
            uint64_t v154 = v157;
            if ((v16 & 0x18) == 0) {
              goto LABEL_145;
            }
          }
          else
          {
            int v151 = 0;
            uint64_t v157 = 0;
          }
          int32x4_t v175 = 0uLL;
          int32x4_t v176 = (int32x4_t)v151;
          int16x8_t v177 = (uint8x8_t *)((char *)v149 + v157);
          int16x8_t v178 = (uint8x8_t *)((char *)v11 + v157);
          uint64_t v179 = v157 - (v16 & 0xFFFFFFF8);
          do
          {
            uint8x8_t v180 = *v177++;
            uint8x8_t v181 = v180;
            uint8x8_t v182 = *v178++;
            int16x8_t v183 = (int16x8_t)vsubl_u8(v181, v182);
            int32x4_t v175 = vmlal_high_s16(v175, v183, v183);
            int32x4_t v176 = vmlal_s16(v176, *(int16x4_t *)v183.i8, *(int16x4_t *)v183.i8);
            v179 += 8;
          }
          while (v179);
          int v151 = vaddvq_s32(vaddq_s32(v176, v175));
          uint64_t v154 = v10 & 0xFFFFFFF8;
          if ((v16 & 0xFFFFFFF8) == (unint64_t)v10) {
            goto LABEL_125;
          }
          goto LABEL_145;
        }
      }
      else if ((int)v10 >= 1)
      {
        unint64_t v155 = 0;
        int v151 = 0;
        do
        {
          uint8x16_t v156 = vabdq_u8(*(uint8x16_t *)v149[v155 / 8].i8, *(uint8x16_t *)v11[v155 / 8].i8);
          v151 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v156.i8, *(uint8x8_t *)v156.i8), vmull_high_u8(v156, v156)));
          v155 += 16;
        }
        while (v155 < v10);
        goto LABEL_125;
      }
      int v151 = 0;
LABEL_125:
      float v152 = sqrtf((float)v151);
      uint64_t v153 = v40;
      *(float *)&v30[v153] = v152;
      v28[v153] = v147;
      if ((float)(v152 - *(float *)(v148 + 4 * v147)) < v9) {
        ++v40;
      }
      ++v147;
      v150 += (int)v10;
      uint64_t v149 = (uint8x8_t *)((char *)v149 + (int)v10);
      if (v147 >= *(int *)(v12 + 16)) {
        goto LABEL_25;
      }
    }
  }
  if (v2 == 64)
  {
    while (1)
    {
      uint64_t v17 = *(unsigned int *)(v12 + 16);
      if ((int)v17 < 1) {
        return v9;
      }
      uint64_t v18 = 0;
      int v19 = -1;
      float v20 = INFINITY;
      do
      {
        unint64_t v21 = 0;
        int v22 = 0;
        do
        {
          uint8x16_t v23 = vabdq_u8(*(uint8x16_t *)v13[v21].i8, *(uint8x16_t *)v1[v21].i8);
          v22 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v23.i8), vmull_high_u8(v23, v23)));
          BOOL v24 = v21 >= 6;
          v21 += 2;
        }
        while (!v24);
        float v25 = sqrtf((float)v22);
        if (v25 < v20 && (float)(v25 - *(float *)(*(void *)(v12 + 8) + 4 * v18)) < (float)(*(float *)(v5 + 40) * v9))
        {
          int v19 = v18;
          float v20 = v25;
        }
        ++v18;
        v13 += 8;
      }
      while (v18 != v17);
      if (v19 == -1) {
        return v9;
      }
      uint64_t v12 = *(void *)(v12 + 24) + 56 * v19;
      uint64_t v13 = *(uint8x8_t **)v12;
      if (!*(void *)v12) {
        goto LABEL_163;
      }
    }
  }
  if ((v2 & 0xF) != 0)
  {
    uint64_t v109 = v2 & 0xFFFFFFE0;
    uint64_t v110 = v2 & 0xFFFFFFF8;
    while (1)
    {
      uint64_t v111 = *(unsigned int *)(v12 + 16);
      if ((int)v111 <= 0) {
        return v9;
      }
      uint64_t v112 = 0;
      int8x16_t v113 = v13 + 2;
      int v114 = -1;
      float v115 = INFINITY;
      do
      {
        if ((int)v10 < 1)
        {
          int v117 = 0;
          goto LABEL_116;
        }
        if (v10 < 8)
        {
          uint64_t v116 = 0;
          int v117 = 0;
          do
          {
LABEL_115:
            int v145 = v13->u8[v116] - v11->u8[v116];
            v117 += v145 * v145;
            ++v116;
          }
          while (v10 != v116);
          goto LABEL_116;
        }
        if (v10 >= 0x20)
        {
          int32x4_t v119 = 0uLL;
          uint64_t v120 = v16 & 0xFFFFFFE0;
          int32x4_t v121 = 0uLL;
          uint64x2_t v122 = v11 + 2;
          uint64x2_t v123 = v113;
          int32x4_t v124 = 0uLL;
          int32x4_t v125 = 0uLL;
          int32x4_t v126 = 0uLL;
          int32x4_t v127 = 0uLL;
          int32x4_t v128 = 0uLL;
          int32x4_t v129 = 0uLL;
          do
          {
            uint8x16_t v130 = *(uint8x16_t *)v123[-2].i8;
            uint8x16_t v131 = *(uint8x16_t *)v122[-2].i8;
            int16x8_t v132 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v130.i8, *(uint8x8_t *)v131.i8);
            int16x8_t v133 = (int16x8_t)vsubl_high_u8(v130, v131);
            int16x8_t v134 = (int16x8_t)vsubl_u8(*v123, *v122);
            int16x8_t v135 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v123->i8, *(uint8x16_t *)v122->i8);
            int32x4_t v125 = vmlal_high_s16(v125, v133, v133);
            int32x4_t v124 = vmlal_s16(v124, *(int16x4_t *)v133.i8, *(int16x4_t *)v133.i8);
            int32x4_t v121 = vmlal_high_s16(v121, v132, v132);
            int32x4_t v119 = vmlal_s16(v119, *(int16x4_t *)v132.i8, *(int16x4_t *)v132.i8);
            int32x4_t v129 = vmlal_high_s16(v129, v135, v135);
            int32x4_t v128 = vmlal_s16(v128, *(int16x4_t *)v135.i8, *(int16x4_t *)v135.i8);
            int32x4_t v127 = vmlal_high_s16(v127, v134, v134);
            int32x4_t v126 = vmlal_s16(v126, *(int16x4_t *)v134.i8, *(int16x4_t *)v134.i8);
            v123 += 4;
            v122 += 4;
            v120 -= 32;
          }
          while (v120);
          int v117 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v126, v119), vaddq_s32(v128, v124)), vaddq_s32(vaddq_s32(v127, v121), vaddq_s32(v129, v125))));
          if (v109 == v10) {
            goto LABEL_116;
          }
          uint64_t v118 = v16 & 0xFFFFFFE0;
          uint64_t v116 = v118;
          if ((v16 & 0x18) == 0) {
            goto LABEL_115;
          }
        }
        else
        {
          int v117 = 0;
          uint64_t v118 = 0;
        }
        int32x4_t v136 = 0uLL;
        int32x4_t v137 = (int32x4_t)v117;
        int v138 = (uint8x8_t *)((char *)v13 + v118);
        unint64_t v139 = (uint8x8_t *)((char *)v11 + v118);
        uint64_t v140 = v118 - (v16 & 0xFFFFFFF8);
        do
        {
          uint8x8_t v141 = *v138++;
          uint8x8_t v142 = v141;
          uint8x8_t v143 = *v139++;
          int16x8_t v144 = (int16x8_t)vsubl_u8(v142, v143);
          int32x4_t v136 = vmlal_high_s16(v136, v144, v144);
          int32x4_t v137 = vmlal_s16(v137, *(int16x4_t *)v144.i8, *(int16x4_t *)v144.i8);
          v140 += 8;
        }
        while (v140);
        int v117 = vaddvq_s32(vaddq_s32(v137, v136));
        uint64_t v116 = v10 & 0xFFFFFFF8;
        if (v110 != v10) {
          goto LABEL_115;
        }
LABEL_116:
        float v146 = sqrtf((float)v117);
        if (v146 < v115
          && (float)(v146 - *(float *)(*(void *)(v12 + 8) + 4 * v112)) < (float)(*(float *)(v5 + 40) * v9))
        {
          int v114 = v112;
          float v115 = v146;
        }
        ++v112;
        int8x16_t v113 = (uint8x8_t *)((char *)v113 + (int)v10);
        uint64_t v13 = (uint8x8_t *)((char *)v13 + (int)v10);
      }
      while (v112 != v111);
      if (v114 == -1) {
        return v9;
      }
      uint64_t v12 = *(void *)(v12 + 24) + 56 * v114;
      uint64_t v13 = *(uint8x8_t **)v12;
      if (!*(void *)v12) {
        goto LABEL_163;
      }
    }
  }
  while (1)
  {
    uint64_t v185 = *(unsigned int *)(v12 + 16);
    if ((int)v185 < 1) {
      return v9;
    }
    if ((int)v2 <= 0)
    {
      uint64_t v193 = 0;
      int v187 = -1;
      float v194 = INFINITY;
      do
      {
        if (v194 > 0.0
          && (float)(0.0 - *(float *)(*(void *)(v12 + 8) + 4 * v193)) < (float)(*(float *)(v5 + 40) * v6))
        {
          float v194 = 0.0;
          int v187 = v193;
        }
        ++v193;
      }
      while (v185 != v193);
    }
    else
    {
      uint64_t v186 = 0;
      int v187 = -1;
      float v188 = INFINITY;
      do
      {
        unint64_t v189 = 0;
        int v190 = 0;
        do
        {
          uint8x16_t v191 = vabdq_u8(*(uint8x16_t *)v13[v189 / 8].i8, *(uint8x16_t *)v1[v189 / 8].i8);
          v190 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v191.i8, *(uint8x8_t *)v191.i8), vmull_high_u8(v191, v191)));
          v189 += 16;
        }
        while (v189 < v2);
        float v192 = sqrtf((float)v190);
        if (v192 < v188
          && (float)(v192 - *(float *)(*(void *)(v12 + 8) + 4 * v186)) < (float)(*(float *)(v5 + 40) * v6))
        {
          int v187 = v186;
          float v188 = v192;
        }
        ++v186;
        uint64_t v13 = (uint8x8_t *)((char *)v13 + (int)v2);
      }
      while (v186 != v185);
    }
    if (v187 == -1) {
      return v9;
    }
    uint64_t v12 = *(void *)(v12 + 24) + 56 * v187;
    uint64_t v13 = *(uint8x8_t **)v12;
    if (!*(void *)v12) {
      goto LABEL_163;
    }
  }
}

void g_norm_rot3(double *a1)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  double v3 = a1[7];
  double v2 = a1[8];
  double v5 = a1[2];
  double v4 = a1[3];
  double v7 = a1[5];
  double v6 = a1[6];
  double v9 = *a1;
  double v8 = a1[1];
  double v10 = a1[4];
  double v11 = *a1 * v8 + 0.0 + v4 * v10 + v6 * v3;
  v73[0] = v9 * v9 + 0.0 + v4 * v4 + v6 * v6;
  v73[1] = v11;
  double v74 = v9 * v5 + 0.0 + v4 * v7 + v6 * v2;
  double v75 = v11;
  double v76 = v8 * v8 + 0.0 + v10 * v10 + v3 * v3;
  double v77 = v8 * v5 + 0.0 + v10 * v7 + v3 * v2;
  double v78 = v74;
  double v79 = v77;
  double v69 = v2;
  double v80 = v5 * v5 + 0.0 + v7 * v7 + v2 * v2;
  eig_sym3x3(v73, &v70, &v81);
  double v12 = v83;
  double v13 = v86;
  double v14 = v89;
  double v15 = v71;
  if (v70 >= 1.0e-20) {
    double v16 = v70;
  }
  else {
    double v16 = 1.0e-20;
  }
  if (v71 < 1.0e-20) {
    double v15 = 1.0e-20;
  }
  double v17 = v81 * v81;
  double v18 = v81 * v84;
  double v19 = v81 * v87;
  double v20 = v84 * v84;
  double v21 = v84 * v87;
  double v22 = v87 * v87;
  if (v72 <= 1.0e-20)
  {
    double v38 = 1.0 / v16;
    double v39 = 1.0 / v15;
    double v40 = v17 * v38 + v82 * v82 * (1.0 / v15);
    double v41 = v18 * v38 + v82 * v85 * v39;
    double v42 = v19 * v38 + v82 * v88 * v39;
    double v43 = v20 * v38 + v85 * v85 * v39;
    double v44 = v21 * v38 + v85 * v88 * v39;
    double v45 = v22 * v38 + v88 * v88 * v39;
    double v46 = v9 * v40 + 0.0 + v8 * v41 + v5 * v42;
    double v47 = v9 * v41 + 0.0 + v8 * v43 + v5 * v44;
    double v48 = v9 * v42 + 0.0 + v8 * v44 + v5 * v45;
    double v49 = v4 * v40 + 0.0 + v10 * v41 + v7 * v42;
    double v50 = v4 * v41 + 0.0 + v10 * v43 + v7 * v44;
    double v51 = v4 * v42 + 0.0 + v10 * v44 + v7 * v45;
    double v52 = v6 * v40 + 0.0 + v3 * v41 + v69 * v42;
    double v53 = v6 * v41 + 0.0 + v3 * v43 + v69 * v44;
    double v54 = v6 * v42 + 0.0 + v3 * v44 + v69 * v45;
    double v55 = v83 * v87;
    double v56 = v83 * v88;
    double v57 = v83 * v89;
    double v58 = v87 * v86;
    double v59 = v86 * v88;
    double v60 = v86 * v89;
    double v61 = v87 * v89;
    double v62 = v88 * v89;
    double v63 = v89 * v89;
    double v64 = v83 * v87 + v46;
    double v65 = v56 + v47;
    *a1 = v64;
    a1[1] = v56 + v47;
    double v66 = v57 + v48;
    double v67 = v58 + v49;
    a1[2] = v57 + v48;
    a1[3] = v58 + v49;
    double v68 = v59 + v50;
    a1[4] = v59 + v50;
    a1[5] = v60 + v51;
    a1[6] = v61 + v52;
    a1[7] = v62 + v53;
    a1[8] = v63 + v54;
    if (v64 * v68 * (v63 + v54)
       + 0.0
       + (v62 + v53) * v67 * v66
       + v65 * (v61 + v52) * (v60 + v51)
       + -((v61 + v52) * v68) * v66
       + -(v67 * v65) * (v63 + v54)
       + -(v64 * (v62 + v53)) * (v60 + v51) >= 0.0)
      return;
    *a1 = v64 - v55 - v55;
    a1[1] = v65 - v56 - v56;
    a1[2] = v66 - v57 - v57;
    a1[3] = v67 - v58 - v58;
    a1[4] = v68 - v59 - v59;
    a1[5] = v60 + v51 - v60 - v60;
    a1[6] = v61 + v52 - v61 - v61;
    a1[7] = v62 + v53 - v62 - v62;
    double v37 = v63 + v54 - v63 - v63;
  }
  else
  {
    double v23 = 1.0 / sqrt(v16);
    double v24 = v17 * v23;
    double v25 = 1.0 / sqrt(v15);
    double v26 = v18 * v23 + v82 * v85 * v25;
    double v27 = v20 * v23 + v85 * v85 * v25;
    double v28 = v21 * v23 + v85 * v88 * v25;
    double v29 = v22 * v23 + v88 * v88 * v25;
    if (v9 * v10 * v69 + 0.0 + v4 * v3 * v5 + v6 * v8 * v7 + -(v6 * v10) * v5 + -(v4 * v8) * v69 + -(v9 * v3) * v7 < 0.0)
    {
      double v14 = -v89;
      double v13 = -v86;
      double v12 = -v83;
    }
    double v30 = 1.0 / sqrt(v72);
    double v31 = v12 * v13 * v30;
    double v32 = v13 * v13 * v30;
    double v33 = v12 * v12 * v30 + v24 + v82 * v82 * v25;
    double v34 = v12 * v14 * v30 + v19 * v23 + v82 * v88 * v25;
    double v35 = v13 * v14 * v30 + v28;
    double v36 = v14 * v14 * v30 + v29;
    *a1 = v9 * v33 + 0.0 + v8 * (v31 + v26) + v5 * v34;
    a1[1] = v9 * (v31 + v26) + 0.0 + v8 * (v32 + v27) + v5 * v35;
    a1[2] = v9 * v34 + 0.0 + v8 * v35 + v5 * v36;
    a1[3] = v4 * v33 + 0.0 + v10 * (v31 + v26) + v7 * v34;
    a1[4] = v4 * (v31 + v26) + 0.0 + v10 * (v32 + v27) + v7 * v35;
    a1[5] = v4 * v34 + 0.0 + v10 * v35 + v7 * v36;
    a1[6] = v6 * v33 + 0.0 + v3 * (v31 + v26) + v69 * v34;
    a1[7] = v6 * (v31 + v26) + 0.0 + v3 * (v32 + v27) + v69 * v35;
    double v37 = v6 * v34 + 0.0 + v3 * v35 + v69 * v36;
  }
  a1[8] = v37;
}

double eig_sym3x3(double *a1, double *a2, double *a3)
{
  double v5 = a1[1];
  double v6 = fmax(fabs(*a1), 1.0e-10);
  double v7 = fabs(v5);
  if (v7 > v6) {
    double v6 = v7;
  }
  double v8 = a1[2];
  double v9 = fabs(v8);
  if (v9 > v6) {
    double v6 = v9;
  }
  double v75 = a1[3];
  double v10 = fabs(v75);
  if (v10 > v6) {
    double v6 = v10;
  }
  double v11 = a1[4];
  double v12 = a1[5];
  double v13 = fabs(v11);
  if (v13 > v6) {
    double v6 = v13;
  }
  double v14 = fabs(v12);
  if (v14 > v6) {
    double v6 = v14;
  }
  double v73 = a1[7];
  double v74 = a1[6];
  double v15 = fabs(v74);
  if (v15 > v6) {
    double v6 = v15;
  }
  double v16 = fabs(a1[7]);
  if (v16 > v6) {
    double v6 = v16;
  }
  double v17 = a1[8];
  double v18 = fabs(v17);
  if (v18 <= v6) {
    double v18 = v6;
  }
  double v81 = v18;
  double v19 = 1.0 / v18;
  double v20 = *a1 * (1.0 / v18);
  double v76 = a1[2];
  double v77 = a1[1];
  double v21 = v5 * (1.0 / v18);
  double v22 = v8 * (1.0 / v18);
  double v23 = v11 * v19;
  double v24 = v17 * v19;
  double v78 = v21;
  double v79 = v12 * v19;
  double v80 = v22;
  double v25 = v20 * (v11 * v19) - v21 * v21 + v20 * (v17 * v19) - v22 * v22 + v11 * v19 * (v17 * v19) - v79 * v79;
  double v26 = v17 * v19 + v20 + v11 * v19;
  double v27 = v26 / 3.0;
  double v28 = (v25 - v26 * (v26 / 3.0)) / 3.0;
  if (v28 > 0.0) {
    double v28 = 0.0;
  }
  double v29 = (v12 * v19 * (v22 * (v21 + v21))
       + v20 * v23 * (v17 * v19)
       + -(v20 * (v12 * v19)) * (v12 * v19)
       + -(v23 * v22) * v22
       + -(v17 * v19 * v21) * v21
       + v27 * -(v25 - (v27 + v27) * v27))
      * 0.5;
  double v30 = v28 * (v28 * v28) + v29 * v29;
  if (v30 > 0.0) {
    double v30 = 0.0;
  }
  double v31 = sqrt(-v28);
  long double v32 = atan2(sqrt(-v30), v29);
  __double2 v33 = __sincos_stret(v32 / 3.0);
  double v34 = v27 + (v31 + v31) * v33.__cosval;
  double v35 = v27 - v31 * (v33.__cosval + v33.__sinval * 1.73205081);
  *a2 = v34;
  a2[1] = v35;
  double v36 = v27 - v31 * (v33.__cosval + v33.__sinval * -1.73205081);
  a2[2] = v36;
  if (v36 <= v35)
  {
    double v37 = v27 - v31 * (v33.__cosval + v33.__sinval * 1.73205081);
    double v35 = v27 - v31 * (v33.__cosval + v33.__sinval * -1.73205081);
    if (v36 <= v34)
    {
LABEL_23:
      double v38 = v35;
      double v35 = v27 + (v31 + v31) * v33.__cosval;
      if (v37 <= v34) {
        goto LABEL_24;
      }
      goto LABEL_46;
    }
  }
  else
  {
    a2[1] = v36;
    a2[2] = v35;
    double v37 = v27 - v31 * (v33.__cosval + v33.__sinval * -1.73205081);
    if (v35 <= v34) {
      goto LABEL_23;
    }
  }
  a2[2] = v34;
  *a2 = v35;
  double v38 = v27 + (v31 + v31) * v33.__cosval;
  if (v37 <= v35)
  {
LABEL_24:
    double v39 = v37;
    double v37 = v35;
    if (a3) {
      goto LABEL_25;
    }
LABEL_47:
    double v69 = v81;
    double v70 = v81 * v37;
    goto LABEL_50;
  }
LABEL_46:
  *a2 = v37;
  a2[1] = v35;
  double v39 = v35;
  if (!a3) {
    goto LABEL_47;
  }
LABEL_25:
  if (v37 < 1.0e-10 || v37 - v38 < 1.0e-10)
  {
    *a3 = 1.0;
    a3[1] = 0.0;
    a3[2] = 0.0;
    a3[3] = 0.0;
    a3[4] = 1.0;
    a3[5] = 0.0;
    a3[6] = 0.0;
    a3[7] = 0.0;
    a3[8] = 1.0;
  }
  else
  {
    double v40 = v75 * v19;
    double v41 = v74 * v19;
    double v42 = v73 * v19;
    double v43 = -(v77 * v19);
    double v44 = -(v76 * v19);
    double v45 = -(v12 * v19);
    double v46 = v20 - v37;
    double v47 = v23 - v37;
    double v48 = (v23 - v37) * v44 + v78 * v79;
    double v49 = v80 * (v75 * v19) - (v20 - v37) * v79;
    double v50 = v75 * v19 * v43 + (v20 - v37) * (v23 - v37);
    double v51 = v49 * v49 + v48 * v48 + v50 * v50;
    if (v51 < 1.0e-10)
    {
      double v52 = v24 - v37;
      double v48 = v42 * v44 + v78 * (v24 - v37);
      double v49 = (v24 - v37) * -v46 + v80 * v41;
      double v50 = v41 * v43 + v46 * v42;
      double v51 = v49 * v49 + v48 * v48 + v50 * v50;
      if (v51 < 1.0e-10)
      {
        double v48 = v42 * v45 + v47 * v52;
        double v49 = v79 * v41 - v40 * v52;
        double v50 = v40 * v42 - v47 * v41;
        double v51 = v49 * v49 + v48 * v48 + v50 * v50;
      }
    }
    double v53 = 1.0 / sqrt(v51);
    double v54 = v48 * v53;
    double v55 = v49 * v53;
    double v56 = v50 * v53;
    double v57 = v55 * v44 + v78 * v56;
    double v58 = v80 * v54 - (v20 - v39) * v56;
    double v59 = v54 * v43 + (v20 - v39) * v55;
    double v60 = v58 * v58 + v57 * v57 + v59 * v59;
    if (v60 < 1.0e-10)
    {
      double v57 = v55 * v45 + (v23 - v39) * v56;
      double v58 = v79 * v54 - v40 * v56;
      double v59 = v40 * v55 - (v23 - v39) * v54;
      double v60 = v58 * v58 + v57 * v57 + v59 * v59;
      if (v60 < 1.0e-10)
      {
        double v57 = v42 * v56 - (v24 - v39) * v55;
        double v58 = (v24 - v39) * v54 - v41 * v56;
        double v59 = v41 * v55 - v42 * v54;
        double v60 = v58 * v58 + v57 * v57 + v59 * v59;
        if (v60 < 1.0e-10)
        {
          BOOL v61 = fabs(v54) <= fabs(v55);
          double v62 = 0.0;
          if (v61) {
            double v63 = 0.0;
          }
          else {
            double v63 = -v56;
          }
          if (v61) {
            double v62 = -v56;
          }
          if (v61) {
            double v64 = v55;
          }
          else {
            double v64 = v54;
          }
          double v57 = v62 * v56 - v64 * v55;
          double v58 = v64 * v54 - v63 * v56;
          double v59 = v63 * v55 - v62 * v54;
          double v60 = v58 * v58 + v57 * v57 + v59 * v59;
        }
      }
    }
    double v65 = 1.0 / sqrt(v60);
    double v66 = v57 * v65;
    double v67 = v58 * v65;
    double v68 = v59 * v65;
    *a3 = v54;
    a3[1] = v66;
    a3[2] = v55 * v68 - v56 * v67;
    a3[3] = v55;
    a3[4] = v67;
    a3[5] = v56 * v66 - v54 * v68;
    a3[6] = v56;
    a3[7] = v68;
    a3[8] = v54 * v67 - v55 * v66;
  }
  double v39 = a2[1];
  double v69 = v81;
  double v70 = v81 * *a2;
LABEL_50:
  *a2 = v70;
  double result = v69 * v39;
  double v72 = v69 * a2[2];
  a2[1] = v69 * v39;
  a2[2] = v72;
  return result;
}

uint64_t g_isect_line_line_ex2(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double a9)
{
  double v9 = *a3;
  double v10 = a3[1];
  double v11 = a3[2];
  double v12 = a4[1];
  double v13 = a4[2];
  double v14 = vabdd_f64(v12, v10);
  double v15 = vabdd_f64(v13, v11);
  if (vabdd_f64(*a4, *a3) < a9 && v14 < a9 && v15 < a9) {
    return 0;
  }
  double v19 = *a1;
  double v18 = a1[1];
  double v20 = a1[2];
  double v21 = a2[1];
  double v22 = a2[2];
  double v23 = vabdd_f64(v21, v18);
  double v24 = vabdd_f64(v22, v20);
  BOOL v25 = vabdd_f64(*a2, *a1) < a9 && v23 < a9;
  if (v25 && v24 < a9) {
    return 0;
  }
  double v27 = *a4 - v9;
  double v28 = v12 - v10;
  double v29 = v13 - v11;
  double v30 = *a2 - v19;
  double v31 = v21 - v18;
  double v32 = v22 - v20;
  double v33 = v28 * (v21 - v18) + v27 * v30 + (v13 - v11) * (v22 - v20);
  double v34 = v28 * v28 + v27 * v27 + v29 * v29;
  double v35 = (v31 * v31 + v30 * v30 + v32 * v32) * v34 - v33 * v33;
  if (fabs(v35) < a9) {
    return 0;
  }
  double v37 = v19 - v9;
  double v38 = v18 - v10;
  double v39 = v20 - v11;
  double v40 = v38 * v31 + v37 * v30 + (v20 - v11) * v32;
  double v41 = v38 * v28 + v37 * v27 + v39 * v29;
  double v42 = (v41 * v33 - v40 * v34) / v35;
  if (a5)
  {
    *a5 = v19 + v42 * v30;
    a5[1] = v18 + v42 * v31;
    a5[2] = v20 + v42 * v32;
  }
  if (a7) {
    *a7 = v42;
  }
  double v43 = (v41 + v33 * v42) / v34;
  if (a6)
  {
    double v44 = a3[1] + v43 * v28;
    *a6 = *a3 + v43 * v27;
    a6[1] = v44;
    a6[2] = a3[2] + v43 * v29;
  }
  if (a8) {
    *a8 = v43;
  }
  return 1;
}

uint64_t vl_fio_open(const char *a1, const char *a2, char *a3)
{
  unsigned int v6 = *(unsigned __int8 *)a2 - 97;
  BOOL v7 = v6 > 0x16 || ((1 << (*a2 - 97)) & 0x420001) == 0;
  if (v7 && (a2[1] & 0xFE) != 0x62) {
    __assert_rtn("vl_fio_open", "vl_fio.c", 348, "(mode[0] == 'r' || mode[0] == 'w' || mode[0] == 'a' || mode[1] == 'b' || mode[1] == 'c') && \"mode not allowed\"");
  }
  if (!*a3 || !a3[1] || !a3[2] || !a3[3])
  {
    printf("%sError : ", (const char *)&str_4_3);
    printf("Wrong file signature %s");
LABEL_17:
    putchar(10);
    return 0;
  }
  if (v6 > 0x16 || ((1 << v6) & 0x420001) == 0 || (a2[1] & 0xFE) != 0x62)
  {
    printf("%sError : ", (const char *)&str_4_3);
    printf("Wrong file mode: %s");
    goto LABEL_17;
  }
  double v8 = malloc_type_calloc(1uLL, 0x238uLL, 0x10300402769EC20uLL);
  uint64_t v9 = (uint64_t)v8;
  *((unsigned char *)v8 + 512) = *a2;
  *((unsigned char *)v8 + 513) = a2[1];
  if (a2[1] == 98)
  {
    *((void *)v8 + 69) = fopen(a1, a2);
    goto LABEL_55;
  }
  int v11 = *(unsigned __int8 *)a2;
  if (v11 == 119)
  {
    *((void *)v8 + 69) = 0;
    uint64_t v22 = *((void *)v8 + 67);
    if (v22 < 102400)
    {
      uint64_t v23 = 2 * v22;
      if (2 * v22 <= 102400) {
        uint64_t v23 = 102400;
      }
      if (v22) {
        size_t v24 = v23;
      }
      else {
        size_t v24 = 102400;
      }
      *((void *)v8 + 66) = malloc_type_realloc(*((void **)v8 + 66), v24, 0xE82FF9BAuLL);
      *(void *)(v9 + 536) = v24;
    }
    strncpy((char *)v9, a1, 0x200uLL);
  }
  else
  {
    if (v11 != 114)
    {
      printf("%sAborting : ", (const char *)&str_4_3);
      printf("mode not supported");
      putchar(10);
      __assert_rtn("vl_fopen", "vl_fio.c", 122, "0");
    }
    double v12 = fopen(a1, "rb");
    if (!v12) {
      goto LABEL_65;
    }
    double v13 = v12;
    fseek(v12, 0, 2);
    size_t v14 = MEMORY[0x21D499560](v13);
    rewind(v13);
    *(void *)(v9 + 560) = v14;
    if (v14)
    {
      double v15 = malloc_type_malloc(v14, 0xC8FCFE37uLL);
      if (fread(v15, 1uLL, v14, v13) != v14)
      {
        printf("%sError : ", (const char *)&str_4_3);
        printf("Failed to read file");
        putchar(10);
      }
      uint64_t v16 = 2 * v14;
      int64_t v17 = *(void *)(v9 + 536);
      if ((uint64_t)(2 * v14) > v17)
      {
        uint64_t v18 = 2 * v17;
        if (!v17) {
          uint64_t v18 = 256;
        }
        if (v18 <= v16) {
          int64_t v17 = 2 * v14;
        }
        else {
          int64_t v17 = v18;
        }
        if (v17) {
          *(void *)(v9 + 52_Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(v9 + 528), v17, 0x6502D765uLL);
        }
        *(void *)(v9 + 536) = v17;
      }
      *(void *)(v9 + 520) = v16;
      for (size_t i = compression_decode_buffer(*(uint8_t **)(v9 + 528), (int)v17, (const uint8_t *)v15, v14, 0, COMPRESSION_LZFSE);
            i == (int)v17;
            size_t i = compression_decode_buffer(*(uint8_t **)(v9 + 528), (int)v17, (const uint8_t *)v15, v14, 0, COMPRESSION_LZFSE))
      {
        int64_t v20 = 2 * (int)v17;
        int64_t v17 = *(void *)(v9 + 536);
        if (v17 < v20)
        {
          uint64_t v21 = 2 * v17;
          if (!v17) {
            uint64_t v21 = 256;
          }
          if (v21 <= v20) {
            int64_t v17 = v20;
          }
          else {
            int64_t v17 = v21;
          }
          if (v17) {
            *(void *)(v9 + 52_Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(v9 + 528), v17, 0xACEB7C9EuLL);
          }
          *(void *)(v9 + 536) = v17;
        }
        *(void *)(v9 + 520) = v20;
      }
      *(void *)(v9 + 520) = i;
      free(v15);
      if (fclose(v13))
      {
LABEL_65:
        free((void *)v9);
        printf("%sError : ", (const char *)&str_4_3);
        printf("File %s could not be opened");
        goto LABEL_17;
      }
    }
  }
LABEL_55:
  int v25 = *(unsigned __int8 *)a2;
  if (v25 == 119)
  {
    vl_fio_write_header(v9, a3);
    return v9;
  }
  if (v25 == 114)
  {
    double v26 = *(FILE **)(v9 + 552);
    if (v26) {
      int v27 = feof(v26);
    }
    else {
      int v27 = *(void *)(v9 + 520) <= *(int *)(v9 + 544);
    }
    if (!v27)
    {
      vl_fio_check_header(v9, a3);
      return v9;
    }
    printf("%sError : ", (const char *)&str_4_3);
    printf("File %s empty, needs at least a header");
    goto LABEL_17;
  }
  return v9;
}

uint64_t vl_fio_check_header(uint64_t a1, char *__s1)
{
  double v3 = *(FILE **)(a1 + 552);
  if (v3)
  {
    fread(&__ptr, 1uLL, 4uLL, v3);
    uint64_t result = strncmp(__s1, (const char *)&__ptr, 4uLL);
    if (!result) {
      return result;
    }
    goto LABEL_3;
  }
  int v6 = *(_DWORD *)(a1 + 544);
  uint64_t v7 = v6;
  if ((unint64_t)(v6 + 4) > *(void *)(a1 + 520))
  {
    printf("%sError : ", (const char *)&str_4_3);
    printf("Trying to read non existing data");
    putchar(10);
    int v6 = *(_DWORD *)(a1 + 544);
    uint64_t v7 = v6;
  }
  __int ptr = *(_DWORD *)(*(void *)(a1 + 528) + v7);
  *(_DWORD *)(a1 + 544) = v6 + 4;
  uint64_t result = strncmp(__s1, (const char *)&__ptr, 4uLL);
  if (result)
  {
LABEL_3:
    printf("%sError : ", (const char *)&str_4_3);
    printf("Unknown file format: (%s), should be (%s)", (const char *)&__ptr, __s1);
    return putchar(10);
  }
  return result;
}

char *vl_fio_write_header(uint64_t a1, unsigned char *__ptr)
{
  if (!*__ptr || !__ptr[1] || !__ptr[2] || !__ptr[3]) {
    __assert_rtn("vl_fio_write_header", "vl_fio.c", 330, "signature[0] != 0 && signature[1] != 0 && signature[2] != 0 && signature[3] != 0 && \"Signature needs to be 4 chars\"");
  }
  double v4 = *(FILE **)(a1 + 552);
  if (v4)
  {
    return (char *)fwrite(__ptr, 1uLL, 4uLL, v4);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 520);
    size_t v7 = v6 + 4;
    unint64_t v8 = *(void *)(a1 + 536);
    if (v6 + 4 <= v8)
    {
      uint64_t result = *(char **)(a1 + 528);
    }
    else
    {
      unint64_t v9 = 2 * v8;
      if (!v8) {
        unint64_t v9 = 256;
      }
      if (v9 <= v7) {
        size_t v10 = v7;
      }
      else {
        size_t v10 = v9;
      }
      uint64_t result = (char *)malloc_type_realloc(*(void **)(a1 + 528), v10, 0x768BF38DuLL);
      *(void *)(a1 + 52_Block_object_dispose(&STACK[0x220], 8) = result;
      *(void *)(a1 + 536) = v10;
      uint64_t v6 = *(void *)(a1 + 520);
    }
    *(_DWORD *)&result[v6] = *(_DWORD *)__ptr;
    *(void *)(a1 + 520) += 4;
  }
  return result;
}

uint64_t vl_fio_close(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  double v2 = *(FILE **)(a1 + 552);
  if (v2)
  {
    int v3 = fclose(v2);
    uint64_t v4 = *(void *)(a1 + 560);
    free((void *)a1);
    if (!v3) {
      return v4;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 512) == 119)
    {
      size_t v6 = *(void *)(a1 + 520);
      size_t v7 = (uint8_t *)malloc_type_malloc(v6, 0xDC7CCFCDuLL);
      unint64_t v8 = v7;
      *(void *)(a1 + 560) = 0;
      while (1)
      {
        size_t v9 = compression_encode_buffer(v7, v6, *(const uint8_t **)(a1 + 528), v6, 0, COMPRESSION_LZFSE);
        *(void *)(a1 + 560) += v9;
        if (v9) {
          break;
        }
        free(v8);
        v6 += *(void *)(a1 + 520) / 2;
        size_t v7 = (uint8_t *)malloc_type_malloc(v6, 0x473EC266uLL);
        unint64_t v8 = v7;
      }
      size_t v11 = v9;
      double v12 = fopen((const char *)a1, "wb");
      fwrite(v8, 1uLL, v11, v12);
      int v10 = fclose(v12);
      free(v8);
    }
    else
    {
      int v10 = 0;
    }
    free(*(void **)(a1 + 528));
    uint64_t v4 = *(void *)(a1 + 560);
    free((void *)a1);
    if (!v10) {
      return v4;
    }
  }
  printf("%sError : ", (const char *)&str_4_3);
  printf("Problem closing file");
  putchar(10);
  return v4;
}

os_log_t __vl_os_log_block_invoke()
{
  os_log_t result = os_log_create("com.apple.3dv.vl", "vl");
  vl_os_log_log = (uint64_t)result;
  return result;
}

void vl_geo_calc_tile(double *a1, uint64_t a2, int __e, _DWORD *a4, _DWORD *a5)
{
  char v7 = __e;
  double v10 = ldexp(1.0, __e);
  long double v11 = *(double *)a2;
  long double v12 = *(double *)(a2 + 8);
  double v13 = *(double *)(a2 + 16);
  double v14 = sqrt(v12 * v12 + v11 * v11);
  if (v14 >= 0.001)
  {
    double v15 = atan2(*(long double *)(a2 + 16), v14 * 0.996647189);
  }
  else
  {
    double v15 = dbl_21BB7A6E0[v13 < 0.0];
    double v14 = 0.001;
  }
  __double2 v16 = __sincos_stret(v15);
  long double v17 = atan2(v13 + v16.__sinval * (v16.__sinval * v16.__sinval) * 42841.3115, v14 + v16.__cosval * (v16.__cosval * v16.__cosval) * -42697.6727);
  double v18 = sin(v17);
  if (fabs(v18) <= 0.9999) {
    double v19 = log((v18 + 1.0) / (1.0 - v18)) * 3189068.5;
  }
  else {
    double v19 = dbl_21BB7CDA0[v18 > 0.0];
  }
  long double v20 = atan2(v12, v11) + 3.14159265;
  int v21 = (int)(v10 + -1.0);
  double v22 = (((v20 + (double)((int)(v20 * 0.159154943) - (v20 < 0.0)) * -6.28318531 + -3.14159265) * 6378137.0 - a1[1])
       / a1[3]
       + 0.5)
      * (double)(1 << v7);
  double v23 = floor(((v19 - *a1) / a1[2] + 0.5) * (double)(1 << v7));
  if (v23 < 0.0) {
    double v23 = 0.0;
  }
  if (v23 >= (double)v21) {
    double v23 = (double)v21;
  }
  *a4 = (int)v23;
  double v24 = floor(v22);
  if (v24 < 0.0) {
    double v24 = 0.0;
  }
  if (v24 >= (double)v21) {
    double v24 = (double)v21;
  }
  *a5 = (int)v24;
}

void vl_geo_calc_gnd(float64x2_t *a1, char a2, int a3, int a4, uint64_t a5)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  *(double *)&uint64_t v6 = (double)(1 << a2);
  *(double *)(a5 + 72) = a1->f64[0] + (((double)a3 + 0.5) / *(double *)&v6 + -0.5) * a1[1].f64[0];
  *(double *)(a5 + 80) = a1->f64[1] + (((double)a4 + 0.5) / *(double *)&v6 + -0.5) * a1[1].f64[1];
  *(void *)(a5 + 8_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)a5 = 0x3FF0000000000000;
  *(void *)(a5 + _Block_object_dispose(&STACK[0x220], 8) = 0;
  char v7 = (double *)(a5 + 8);
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0x3FF0000000000000;
  *(void *)(a5 + 40) = 0;
  *(void *)(a5 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)(a5 + 56) = 0;
  *(void *)(a5 + 64) = 0x3FF0000000000000;
  *(float64x2_t *)(a5 + 96) = vdivq_f64(a1[1], (float64x2_t)vdupq_lane_s64(v6, 0));
  vl_mat_imgnd_to_xyz(&v106, (double *)a5, 1, 1, 0.0, 0.0, 1.0);
  double v86 = v109;
  double v8 = v108;
  double v82 = v109 * -0.5;
  double v103 = v106;
  double v101 = v112;
  double v96 = v107;
  double v98 = v113;
  double v94 = v115;
  double v78 = v114;
  double v79 = v108;
  double v84 = v110;
  double v85 = v111;
  double v80 = v110 * -0.5;
  double v92 = v116;
  double v99 = v117;
  double v9 = v111 * -0.5;
  double v10 = v117 + v111 * -0.5 + v108 * -0.5 + v114 * 0.0;
  double v11 = (v116 + v110 * -0.5 + v107 * -0.5 + v113 * 0.0) / 6378137.0;
  long double v12 = sinh((v115 + v109 * -0.5 + v106 * -0.5 + v112 * 0.0) / 6378137.0);
  double v13 = atan(v12);
  __double2 v14 = __sincos_stret(v13);
  __double2 v15 = __sincos_stret(v11);
  double v16 = 6378137.0 / sqrt(v14.__sinval * -0.00669437999 * v14.__sinval + 1.0);
  double v17 = v14.__cosval * (v16 - v10);
  double v88 = v15.__sinval * v17;
  double v89 = v15.__cosval * v17;
  double v87 = v14.__sinval * -(v10 - v16 * 0.99330562);
  double v18 = v99 + v9 + v8 * 0.5 + v78 * 0.0;
  long double v19 = sinh((v94 + v82 + v103 * 0.5 + v101 * 0.0) / 6378137.0);
  double v20 = atan(v19);
  __double2 v21 = __sincos_stret(v20);
  __double2 v22 = __sincos_stret((v92 + v80 + v96 * 0.5 + v98 * 0.0) / 6378137.0);
  double v23 = 6378137.0 / sqrt(v21.__sinval * -0.00669437999 * v21.__sinval + 1.0);
  double v24 = v21.__cosval * (v23 - v18);
  double v81 = v22.__sinval * v24;
  double v83 = v22.__cosval * v24;
  double v25 = v21.__sinval * -(v18 - v23 * 0.99330562);
  double v26 = v99 + v85 * 0.5 + v79 * -0.5 + v78 * 0.0;
  long double v27 = sinh((v94 + v86 * 0.5 + v103 * -0.5 + v101 * 0.0) / 6378137.0);
  double v28 = atan(v27);
  __double2 v29 = __sincos_stret(v28);
  __double2 v30 = __sincos_stret((v92 + v84 * 0.5 + v96 * -0.5 + v98 * 0.0) / 6378137.0);
  double v31 = 6378137.0 / sqrt(v29.__sinval * -0.00669437999 * v29.__sinval + 1.0);
  double v32 = v29.__cosval * (v31 - v26);
  *(double *)(a5 + 96) = sqrt((v88 - v81) * (v88 - v81) + (v89 - v83) * (v89 - v83) + (v87 - v25) * (v87 - v25));
  *(double *)(a5 + 104) = sqrt((v88 - v30.__sinval * v32) * (v88 - v30.__sinval * v32)+ (v89 - v30.__cosval * v32) * (v89 - v30.__cosval * v32)+ (v87 - v29.__sinval * -(v26 - v31 * 0.99330562))* (v87 - v29.__sinval * -(v26 - v31 * 0.99330562)));
  double v33 = *(double *)(a5 + 72);
  double v104 = *(double *)(a5 + 80);
  double v34 = *(double *)(a5 + 88);
  double v35 = *(double *)(a5 + 48);
  if (fabs(v35) >= 1.0)
  {
    long double v39 = *v7;
    if (v35 <= -1.0)
    {
      double v37 = 0.0;
      double v38 = atan2(v39, *(long double *)(a5 + 16)) + 0.0;
      double v36 = 1.57079633;
    }
    else
    {
      double v38 = atan2(-v39, -*(double *)(a5 + 16));
      double v37 = 0.0;
      double v36 = -1.57079633;
    }
  }
  else
  {
    double v36 = asin(-v35);
    double v37 = atan2(*(long double *)(a5 + 24), *(long double *)a5);
    double v38 = atan2(*(long double *)(a5 + 56), *(long double *)(a5 + 64));
  }
  __double2 v40 = __sincos_stret(v36);
  __double2 v41 = __sincos_stret(v37);
  __double2 v42 = __sincos_stret(v38);
  double v43 = v33 + v40.__cosval * v41.__cosval;
  double v44 = v33;
  double v45 = v104 + v40.__cosval * v41.__sinval;
  double v90 = v43;
  double v93 = v104 + v41.__cosval * v42.__cosval + v40.__sinval * v41.__sinval * v42.__sinval;
  double v95 = v44 + v40.__sinval * v41.__cosval * v42.__sinval - v41.__sinval * v42.__cosval;
  double v97 = v34 + v40.__cosval * v42.__sinval;
  long double v46 = sinh(v44 / 6378137.0);
  double v47 = atan(v46);
  __double2 v48 = __sincos_stret(v47);
  __double2 v49 = __sincos_stret(v104 / 6378137.0);
  double v50 = 6378137.0 / sqrt(v48.__sinval * -0.00669437999 * v48.__sinval + 1.0);
  double v51 = v48.__cosval * (v50 - v34);
  double v102 = v49.__sinval * v51;
  double v105 = v49.__cosval * v51;
  double v100 = v48.__sinval * -(v34 - v50 * 0.99330562);
  long double v52 = sinh(v90 / 6378137.0);
  double v53 = atan(v52);
  __double2 v54 = __sincos_stret(v53);
  __double2 v55 = __sincos_stret(v45 / 6378137.0);
  double v56 = 6378137.0 / sqrt(v54.__sinval * -0.00669437999 * v54.__sinval + 1.0);
  double v57 = v54.__cosval * (v56 - (v34 - v40.__sinval));
  double v91 = v55.__cosval * v57;
  double v58 = v55.__sinval * v57;
  double v59 = v54.__sinval * -(v34 - v40.__sinval - v56 * 0.99330562);
  long double v60 = sinh(v95 / 6378137.0);
  double v61 = atan(v60);
  __double2 v62 = __sincos_stret(v61);
  __double2 v63 = __sincos_stret(v93 / 6378137.0);
  double v64 = 6378137.0 / sqrt(v62.__sinval * -0.00669437999 * v62.__sinval + 1.0);
  double v65 = v62.__cosval * (v64 - v97);
  double v66 = v91 - v105;
  long double v67 = v58 - v102;
  double v68 = v59 - v100;
  double v69 = v63.__cosval * v65 - v105;
  double v70 = v63.__sinval * v65 - v102;
  double v71 = v62.__sinval * -(v97 - v64 * 0.99330562) - v100;
  double v72 = atan2(v67, v91 - v105);
  double v73 = atan2(-(v59 - v100), sqrt(v67 * v67 + v66 * v66));
  double v74 = atan2((v67 * v71 - v68 * v70) * v67 - v66 * (v68 * v69 - v66 * v71), -(v67 * v68) * (v68 * v69 - v66 * v71)+ (v67 * v71 - v68 * v70) * -(v66 * v68)+ (v66 * v70 - v67 * v69) * (v66 * v66 + v67 * v67));
  *(double *)(a5 + 72) = v105;
  *(double *)(a5 + 80) = v102;
  *(double *)(a5 + 8_Block_object_dispose(&STACK[0x220], 8) = v100;
  __double2 v75 = __sincos_stret(v72);
  __double2 v76 = __sincos_stret(v73);
  __double2 v77 = __sincos_stret(v74);
  *(double *)a5 = v75.__cosval * v76.__cosval;
  *(double *)(a5 + _Block_object_dispose(&STACK[0x220], 8) = v75.__cosval * v76.__sinval * v77.__sinval - v75.__sinval * v77.__cosval;
  *(double *)(a5 + 16) = v75.__sinval * v77.__sinval + v75.__cosval * v76.__sinval * v77.__cosval;
  *(double *)(a5 + 24) = v75.__sinval * v76.__cosval;
  *(double *)(a5 + 32) = v75.__cosval * v77.__cosval + v75.__sinval * v76.__sinval * v77.__sinval;
  *(double *)(a5 + 40) = v75.__sinval * v76.__sinval * v77.__cosval - v75.__cosval * v77.__sinval;
  *(double *)(a5 + 4_Block_object_dispose(&STACK[0x220], 8) = -v76.__sinval;
  *(double *)(a5 + 56) = v76.__cosval * v77.__sinval;
  *(double *)(a5 + 64) = v76.__cosval * v77.__cosval;
}

void g_interp_bspline3_mix2(int a1, double *a2, double *a3, void *a4, int a5, double a6, double a7, double a8)
{
  if ((a5 & 3) != 0) {
    int v15 = 0;
  }
  else {
    int v15 = -1;
  }
  if ((a5 & 3) == 3) {
    int v16 = 1;
  }
  else {
    int v16 = v15;
  }
  double v42 = 1.0 / (double)(v16 + a1);
  double v17 = a6 / v42;
  int v18 = vcvtmd_s64_f64(v17);
  double v19 = v17 - (double)v18;
  double v20 = v19 * (v19 * v19);
  double v21 = v20 * -0.166666667 + 0.0 + v19 * v19 * 0.5 + v19 * -0.5;
  double v22 = v20 * 0.5 + 0.0 - v19 * v19 + v19 * 0.0;
  double v23 = v20 * -0.5 + 0.0 + v19 * v19 * 0.5 + v19 * 0.5;
  double v24 = v20 * 0.166666667 + 0.0 + v19 * v19 * 0.0 + v19 * 0.0;
  double v25 = 0.0;
  double v26 = 0.0;
  double v27 = 0.0;
  double v28 = 0.0;
  if (a2)
  {
    double v37 = v24;
    double v38 = v23;
    double v39 = v22;
    double v40 = v21;
    double a = g_interp_get_a(v18 - 1, a1, a2, a5, a7, a8);
    double v29 = g_interp_get_a(v18, a1, a2, a5, a7, a8);
    double v30 = g_interp_get_a(v18 + 1, a1, a2, a5, a7, a8);
    double v31 = g_interp_get_a(v18 + 2, a1, a2, a5, a7, a8);
    double v23 = v38;
    double v22 = v39;
    double v21 = v40;
    double v27 = v30;
    double v26 = v29;
    double v25 = a;
    double v28 = v31;
    double v24 = v37;
  }
  double v32 = v21 + 0.166666667;
  double v33 = v22 + 0.666666667;
  double v34 = v23 + 0.166666667;
  double v35 = v24 + 0.0;
  if (a4)
  {
    double v44 = v25;
    double v41 = v26;
    double v36 = v27;
    bzero(a4, 8 * a1);
    g_interp_acc_wa(v18 - 1, a1, (double *)a4, a5, v32);
    g_interp_acc_wa(v18, a1, (double *)a4, a5, v33);
    g_interp_acc_wa(v18 + 1, a1, (double *)a4, a5, v34);
    g_interp_acc_wa(v18 + 2, a1, (double *)a4, a5, v35);
    double v27 = v36;
    double v26 = v41;
    double v25 = v44;
  }
  if (a3) {
    *a3 = ((v19 * v19 * 1.5 + 0.0 + v19 * -2.0 + 0.0) * v26
  }
         + v25 * (v19 + v19 * v19 * -0.5 + 0.0 + -0.5)
         + v27 * (v19 + v19 * v19 * -1.5 + 0.0 + 0.5)
         + v28 * (v19 * v19 * 0.5 + 0.0 + v19 * 0.0 + 0.0))
        / v42;
}

double g_interp_get_a(int a1, int a2, double *a3, int a4, double result, double a6)
{
  switch(a4)
  {
    case 0:
      if (a1 < 0) {
        return *a3 + (double)a1 * (a3[1] - *a3);
      }
      int v6 = a1 - a2;
      if (a1 >= a2) {
        goto LABEL_12;
      }
      return a3[a1];
    case 1:
      if (a1 < 0) {
        goto LABEL_19;
      }
      if (!a1) {
        return result;
      }
      int v6 = a1 - a2;
      if (a1 <= a2) {
        goto LABEL_20;
      }
LABEL_12:
      os_log_t result = a3[a2 - 1] + (double)(v6 + 1) * (a3[a2 - 1] - a3[a2 - 2]);
      break;
    case 2:
      if (a1 < 0) {
        return *a3 + (double)a1 * (a3[1] - *a3);
      }
      if (a1 < a2) {
        return a3[a1];
      }
      if (a1 == a2) {
        return a6;
      }
      return a6 + (double)(a1 - a2) * (a6 - a3[a2 - 1]);
    case 3:
      if (a1 < 0)
      {
LABEL_19:
        os_log_t result = result + (double)a1 * (*a3 - result);
      }
      else if (a1)
      {
        if (a1 <= a2)
        {
LABEL_20:
          os_log_t result = a3[a1 - 1];
        }
        else if (a2 + 1 == a1)
        {
          os_log_t result = a6;
        }
        else
        {
          os_log_t result = a6 + (double)(~a2 + a1) * (a6 - a3[a2 - 1]);
        }
      }
      break;
    default:
      __assert_rtn("g_interp_get_a", "g_interp.c", 518, "0");
  }
  return result;
}

double g_interp_acc_wa(int a1, int a2, double *a3, int a4, double result)
{
  switch(a4)
  {
    case 0:
      if (a1 < 0) {
        goto LABEL_16;
      }
      int v5 = a1 - a2;
      if (a1 >= a2) {
        goto LABEL_11;
      }
      goto LABEL_7;
    case 1:
      if (a1 < 0) {
        goto LABEL_17;
      }
      if (!a1) {
        return result;
      }
      int v5 = a1 - a2;
      if (a1 <= a2) {
        goto LABEL_18;
      }
LABEL_11:
      char v7 = &a3[a2];
      double v8 = *(v7 - 2) - result * (double)(v5 + 1);
      os_log_t result = *(v7 - 1) + result * (double)(v5 + 2);
      *(v7 - 2) = v8;
      *(v7 - 1) = result;
      break;
    case 2:
      if (a1 < 0)
      {
LABEL_16:
        double v10 = *a3 + result * (double)(1 - a1);
        os_log_t result = a3[1] + result * (double)a1;
        *a3 = v10;
        a3[1] = result;
      }
      else if (a1 >= a2)
      {
        if (a1 != a2)
        {
          uint64_t v12 = a2 - 1;
          os_log_t result = a3[v12] - result * (double)(a1 - a2);
          a3[v12] = result;
        }
      }
      else
      {
LABEL_7:
        uint64_t v6 = a1;
        os_log_t result = a3[v6] + result;
        a3[v6] = result;
      }
      return result;
    case 3:
      if (a1 < 0)
      {
LABEL_17:
        os_log_t result = *a3 + result * (double)a1;
        *a3 = result;
      }
      else if (a1)
      {
        if (a1 <= a2)
        {
LABEL_18:
          uint64_t v11 = (a1 - 1);
          os_log_t result = a3[v11] + result;
          a3[v11] = result;
        }
        else
        {
          double v9 = &a3[a2];
          os_log_t result = *(v9 - 1) - result * (double)(~a2 + a1);
          *(v9 - 1) = result;
        }
      }
      break;
    default:
      __assert_rtn("g_interp_acc_wa", "g_interp.c", 539, "0");
  }
  return result;
}

uint64_t vl_dom_dirs_read(const char *a1, uint64_t a2)
{
  uint64_t v3 = vl_fio_open(a1, "rc", "DOMD");
  uint64_t result = 1;
  __int ptr = 1;
  if (v3)
  {
    int v5 = *(FILE **)(v3 + 552);
    if (v5)
    {
      fread(&__ptr, 4uLL, 1uLL, v5);
      size_t __nitems = 0;
      uint64_t v6 = *(FILE **)(v3 + 552);
      if (v6) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v11 = *(int *)(v3 + 544);
      if ((unint64_t)(v11 + 4) > *(void *)(v3 + 520))
      {
        printf("%sError : ", "");
        printf("Trying to read non existing data");
        putchar(10);
        LODWORD(v11) = *(_DWORD *)(v3 + 544);
      }
      *(_DWORD *)(v3 + 544) = v11 + 4;
      size_t __nitems = 0;
      uint64_t v6 = *(FILE **)(v3 + 552);
      if (v6)
      {
LABEL_4:
        fread(&__nitems, 8uLL, 1uLL, v6);
        int64_t v7 = __nitems;
        int64_t v8 = *(void *)(a2 + 16);
        if ((uint64_t)__nitems <= v8) {
          goto LABEL_5;
        }
        goto LABEL_13;
      }
    }
    int v12 = *(_DWORD *)(v3 + 544);
    uint64_t v13 = v12;
    if ((unint64_t)(v12 + 8) > *(void *)(v3 + 520))
    {
      printf("%sError : ", "");
      printf("Trying to read non existing data");
      putchar(10);
      int v12 = *(_DWORD *)(v3 + 544);
      uint64_t v13 = v12;
    }
    int64_t v7 = *(void *)(*(void *)(v3 + 528) + v13);
    *(_DWORD *)(v3 + 544) = v12 + 8;
    int64_t v8 = *(void *)(a2 + 16);
    if (v7 <= v8)
    {
LABEL_5:
      *(void *)a2 = v7;
      double v9 = *(void **)(a2 + 8);
      double v10 = *(FILE **)(v3 + 552);
      if (v10)
      {
LABEL_6:
        fread(v9, 0x30uLL, v7, v10);
LABEL_24:
        vl_fio_close(v3);
        return 0;
      }
LABEL_21:
      size_t v18 = 48 * v7;
      uint64_t v19 = *(int *)(v3 + 544);
      if (v18 + v19 > *(void *)(v3 + 520))
      {
        printf("%sError : ", "");
        printf("Trying to read non existing data");
        putchar(10);
        uint64_t v19 = *(int *)(v3 + 544);
      }
      memcpy(v9, (const void *)(*(void *)(v3 + 528) + v19), v18);
      *(_DWORD *)(v3 + 544) += v18;
      goto LABEL_24;
    }
LABEL_13:
    uint64_t v14 = 2 * v8;
    BOOL v15 = v8 == 0;
    uint64_t v16 = 5;
    if (!v15) {
      uint64_t v16 = v14;
    }
    if (v16 <= v7) {
      int64_t v17 = v7;
    }
    else {
      int64_t v17 = v16;
    }
    if (v17) {
      *(void *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a2 + 8), 48 * v17, 0xEF13C9F5uLL);
    }
    *(void *)(a2 + 16) = v17;
    *(void *)a2 = v7;
    double v9 = *(void **)(a2 + 8);
    double v10 = *(FILE **)(v3 + 552);
    if (v10) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
  return result;
}

uint64_t vl_rw_get_inv_filename(const char *a1, int a2, int a3, int a4, int a5, uint64_t a6, char *a7)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  __int16 v16 = 0;
  memset(v15, 0, sizeof(v15));
  if (parse_vl_path(a1, "meta:", (char *)v15, &v14)
    || parse_vl_path(a1, "metahttp:", (char *)v15, &v14))
  {
    printf("%sAborting : ", "");
    printf("Not support read track using meta tile");
    putchar(10);
    __assert_rtn("vl_rw_get_inv_filename_from_meta", "vl_map_rw.c", 645, "0");
  }
  sprintf(a7, "%s/tracks/%d/%d/%d/tracks_%d.vtrk", a1, a2, a3, a4, a5);
  return 0;
}

uint64_t parse_vl_path(const char *a1, char *__s, char *a3, int *a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  size_t v8 = (int)strlen(__s);
  if (strncmp(a1, __s, v8)) {
    return 0;
  }
  if (!strncmp(a1, "meta", 4uLL))
  {
    double v10 = (char *)&a1[v8];
    uint64_t v11 = strchr(v10, 58);
    strncpy(a3, v10, v11 - v10);
    __strcpy_chk();
    *a4 = atoi(v12);
  }
  return 1;
}

uint64_t vl_map_read_mem_ex()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  int v6 = v5;
  size_t v8 = v7;
  double v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = v0;
  v76[568] = *MEMORY[0x263EF8340];
  bzero(__src, 0x1200uLL);
  char v73 = 0;
  int v72 = 0;
  if (v2 < 4 || (int v14 = *v4, v72 = *v4, (v2 & 0xFFFFFFFFFFFFFFFCLL) == 4) || v14 != 1414545741)
  {
    printf("%sError : ", "");
    printf("error reading header: %s", (const char *)&v72);
    putchar(10);
    return 0xFFFFFFFFLL;
  }
  if (v2 - 8 <= 0xF) {
    return 0xFFFFFFFFLL;
  }
  int v15 = v4[1];
  if (v15 < 7)
  {
    unint64_t v18 = v2 - 24;
    if (v2 - 24 < 4)
    {
      BOOL v21 = 0;
      LODWORD(v19) = 0;
      double v20 = (char *)(v4 + 6);
      uint64_t v16 = 2;
      goto LABEL_36;
    }
    uint64_t v19 = v4[6];
    double v20 = (char *)(v4 + 7);
    unint64_t v18 = v2 - 28;
    BOOL v21 = (int)v19 > 0;
    if ((int)v19 >= 1)
    {
      uint64_t v16 = 0;
      int v22 = 0;
      double v23 = &v75;
      uint64_t v24 = v19;
      while (1)
      {
        if (!v22)
        {
          if (v18 >= 0x20)
          {
            double v25 = v23 - 4;
            long long v26 = *((_OWORD *)v20 + 1);
            *(_OWORD *)double v25 = *(_OWORD *)v20;
            *((_OWORD *)v25 + 1) = v26;
            if (v16)
            {
              v18 -= 32;
              v20 += 32;
              goto LABEL_16;
            }
            if (v18 - 32 < 4)
            {
              v18 -= 32;
              v20 += 32;
            }
            else
            {
              *(_DWORD *)double v23 = *((_DWORD *)v20 + 8);
              unint64_t v27 = v18 - 36;
              if (v18 - 36 >= 4)
              {
                *((_DWORD *)v23 + 1) = *((_DWORD *)v20 + 9);
                unint64_t v27 = v18 - 40;
                if (v18 - 40 >= 4)
                {
                  *((_DWORD *)v23 + 2) = *((_DWORD *)v20 + 10);
                  unint64_t v27 = v18 - 44;
                  if (v18 - 44 >= 4)
                  {
                    *((_DWORD *)v23 + 3) = *((_DWORD *)v20 + 11);
                    unint64_t v27 = v18 - 48;
                    if (v18 - 48 >= 8)
                    {
                      v23[2] = *((void *)v20 + 6);
                      unint64_t v27 = v18 - 56;
                      if (v18 - 56 >= 8)
                      {
                        v23[3] = *((void *)v20 + 7);
                        v20 += 64;
                        v18 -= 64;
                        goto LABEL_16;
                      }
                      v20 += 56;
                    }
                    else
                    {
                      v20 += 48;
                    }
                  }
                  else
                  {
                    v20 += 44;
                  }
                }
                else
                {
                  v20 += 40;
                }
              }
              else
              {
                v20 += 36;
              }
              unint64_t v18 = v27;
            }
          }
          uint64_t v16 = 2;
        }
LABEL_16:
        v23 += 9;
        int v22 = v16;
        if (!--v24)
        {
          BOOL v21 = 1;
          goto LABEL_36;
        }
      }
    }
    uint64_t v16 = 0;
LABEL_36:
    if (v10)
    {
      *size_t v8 = v19;
      int v28 = v19;
      BOOL v29 = v21;
      memcpy(v10, __src, 72 * (int)v19);
      BOOL v21 = v29;
      LODWORD(v19) = v28;
    }
    if (!v16)
    {
      if (v18 >= 4)
      {
        *(_DWORD *)(v13 + 216) = *(_DWORD *)v20;
        if (v18 - 4 >= 8)
        {
          *(void *)(v13 + 224) = *(void *)(v20 + 4);
          if (v18 - 12 >= 8)
          {
            *(void *)(v13 + 232) = *(void *)(v20 + 12);
            double v30 = v20 + 20;
            unint64_t v31 = v18 - 20;
            if (v18 - 20 >= 0x70)
            {
              long long v32 = *(_OWORD *)v30;
              long long v33 = *(_OWORD *)(v20 + 52);
              *(_OWORD *)(v13 + 256) = *(_OWORD *)(v20 + 36);
              *(_OWORD *)(v13 + 272) = v33;
              *(_OWORD *)(v13 + 240) = v32;
              long long v34 = *(_OWORD *)(v20 + 68);
              long long v35 = *(_OWORD *)(v20 + 84);
              long long v36 = *(_OWORD *)(v20 + 116);
              *(_OWORD *)(v13 + 320) = *(_OWORD *)(v20 + 100);
              *(_OWORD *)(v13 + 336) = v36;
              *(_OWORD *)(v13 + 28_Block_object_dispose(&STACK[0x220], 8) = v34;
              *(_OWORD *)(v13 + 304) = v35;
              double v30 = v20 + 132;
              unint64_t v31 = v18 - 132;
              if (v18 - 132 >= 8)
              {
                if (v12) {
                  *(void *)uint64_t v12 = *(void *)v30;
                }
                double v30 = v20 + 140;
                unint64_t v31 = v18 - 140;
                if (v18 - 140 > 0x6F)
                {
                  long long v60 = *(_OWORD *)v30;
                  long long v61 = *(_OWORD *)(v20 + 156);
                  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v20 + 172);
                  *(_OWORD *)(v12 + 24) = v61;
                  *(_OWORD *)(v12 + _Block_object_dispose(&STACK[0x220], 8) = v60;
                  long long v62 = *(_OWORD *)(v20 + 188);
                  long long v63 = *(_OWORD *)(v20 + 204);
                  long long v64 = *(_OWORD *)(v20 + 220);
                  *(_OWORD *)(v12 + 104) = *(_OWORD *)(v20 + 236);
                  *(_OWORD *)(v12 + 8_Block_object_dispose(&STACK[0x220], 8) = v64;
                  *(_OWORD *)(v12 + 72) = v63;
                  *(_OWORD *)(v12 + 56) = v62;
                  double v38 = v20 + 252;
                  unint64_t v37 = v18 - 252;
                  if (v15 < 1)
                  {
                    int v39 = 0;
                    uint64_t v16 = 0;
                    goto LABEL_54;
                  }
                  if (v37 >= 4)
                  {
                    *(_DWORD *)(v13 + 352) = *((_DWORD *)v20 + 63);
                    unint64_t v37 = v18 - 256;
                    if (v18 - 256 > 3)
                    {
                      *(_DWORD *)(v13 + 356) = *((_DWORD *)v20 + 64);
                      if (v15 < 3)
                      {
                        uint64_t v16 = 0;
                      }
                      else
                      {
                        if (v18 - 260 >= 4)
                        {
                          *(_DWORD *)(v13 + 456) = *((_DWORD *)v20 + 65);
                          if (v18 - 264 >= 4)
                          {
                            uint64_t v16 = 0;
                            *(_DWORD *)(v13 + 460) = *((_DWORD *)v20 + 66);
                            v20 += 268;
                            v18 -= 268;
                            int v39 = 1;
                          }
                          else
                          {
                            v20 += 264;
                            uint64_t v16 = 2;
                            int v39 = 1;
                            v18 -= 264;
                          }
                          goto LABEL_56;
                        }
                        uint64_t v16 = 2;
                      }
                      int v39 = 1;
                      v18 -= 260;
                      v20 += 260;
                      goto LABEL_56;
                    }
                    double v38 = v20 + 256;
                  }
                  uint64_t v16 = 2;
                  goto LABEL_53;
                }
              }
            }
            uint64_t v16 = 2;
            unint64_t v18 = v31;
            double v20 = v30;
          }
          else
          {
            v20 += 12;
            uint64_t v16 = 2;
            v18 -= 12;
          }
        }
        else
        {
          uint64_t v16 = 2;
          v18 -= 4;
          v20 += 4;
        }
      }
      else
      {
        uint64_t v16 = 2;
      }
    }
    if (v15 > 0)
    {
      unint64_t v37 = v18;
      double v38 = v20;
LABEL_53:
      int v39 = 1;
LABEL_54:
      unint64_t v18 = v37;
      double v20 = v38;
      goto LABEL_56;
    }
    int v39 = 0;
LABEL_56:
    if (v6) {
      return v16;
    }
    int v69 = v39;
    BOOL v71 = v21;
    int v70 = v19;
    if (v21)
    {
      uint64_t v40 = (int)v19;
      double v41 = v76;
      do
      {
        size_t v42 = *(v41 - 1);
        double v43 = malloc_type_malloc(v42, 0xDB0818EuLL);
        *double v41 = v43;
        if (!v16)
        {
          if (v18 < v42)
          {
            LODWORD(v16) = 2;
          }
          else
          {
            if (v43) {
              memcpy(v43, v20, v42);
            }
            LODWORD(v16) = 0;
            v20 += v42;
            v18 -= v42;
          }
        }
        v41 += 9;
        --v40;
      }
      while (v40);
    }
    if (v16)
    {
      int v44 = 0;
    }
    else
    {
      int v68 = vl_map_block_decode_tag(v13, "pos_list", __src, v70);
      int v67 = vl_map_block_decode_tag(v13 + 24, "normal_list", __src, v70);
      int v66 = vl_map_block_decode_tag(v13 + 48, "size_list", __src, v70);
      int v65 = vl_map_block_decode_tag(v13 + 72, "ori_list", __src, v70);
      int v48 = vl_map_block_decode_tag(v13 + 96, "view_list", __src, v70);
      int v49 = vl_map_block_decode_tag(v13 + 120, "view_angle_list", __src, v70);
      int v50 = vl_map_block_decode_tag(v13 + 144, "label_list", __src, v70);
      double v51 = (uint64_t *)(v13 + 192);
      int v52 = vl_map_block_decode_tag(v13 + 192, "desc", __src, v70);
      int v44 = (vl_map_block_decode_tag(v12 + 120, "height_list", __src, v70) | v52 | v50 | v49 | v48 | v65 | v66 | v67 | v68) != 0;
      if (v69)
      {
        int v53 = vl_map_block_decode_tag(v13 + 360, "pca_eigen_vectors", __src, v70);
        if (vl_map_block_decode_tag(v13 + 384, "pca_mean", __src, v70) | v53) {
          int v44 = 1;
        }
        if (v15 >= 3)
        {
          int v54 = vl_map_block_decode_tag(v13 + 408, "img_index_list_size", __src, v70);
          int v55 = vl_map_block_decode_tag(v13 + 432, "img_index_list", __src, v70);
          if (vl_map_block_decode_tag(v13 + 464, "global_desc", __src, v70) | v55 | v54) {
            int v44 = 1;
          }
          if (v15 != 3)
          {
            int v56 = vl_map_block_decode_tag(v13 + 512, "cam_pos", __src, v70);
            if (vl_map_block_decode_tag(v13 + 536, "cam_phi", __src, v70) | v56) {
              int v44 = 1;
            }
          }
        }
      }
      if (!v71) {
        return v44 | v16;
      }
      uint64_t v57 = v70;
      double v58 = __src;
      while (strcmp(v58, "desc"))
      {
        v58 += 72;
        if (!--v57) {
          goto LABEL_68;
        }
      }
      if (*((_DWORD *)v58 + 10) == 15 && v44 == 0) {
        int v44 = vl_map_desc_decode_mst(v51);
      }
    }
LABEL_68:
    if (v71)
    {
      uint64_t v45 = v70;
      long double v46 = (void **)v76;
      do
      {
        double v47 = *v46;
        v46 += 9;
        free(v47);
        --v45;
      }
      while (v45);
    }
    return v44 | v16;
  }
  return v15 | 0x10000u;
}

uint64_t split_track_path(const char *a1, char *a2, char *a3, char *a4, char *a5, char *a6)
{
  if (!strncmp(a1, "blob", 4uLL))
  {
    uint64_t v13 = a1 + 5;
    int v14 = strchr((char *)a1 + 5, 58);
    size_t v15 = v14 - a1 - 5;
  }
  else if (!strncmp(a1, "bithub", 6uLL))
  {
    uint64_t v13 = a1 + 7;
    int v14 = strchr((char *)a1 + 7, 58);
    size_t v15 = v14 - a1 - 7;
  }
  else
  {
    if (strncmp(a1, "https://3dv-data.geo.apple.com/blob", 0x23uLL)) {
      return 0;
    }
    uint64_t v13 = a1 + 36;
    int v14 = strchr((char *)a1 + 36, 47);
    size_t v15 = v14 - a1 - 36;
  }
  strncpy(a2, v13, v15);
  a2[v15] = 0;
  uint64_t v16 = strchr(v14 + 1, 47);
  strncpy(a4, a1, v16 - a1);
  a4[v16 - a1] = 0;
  strncpy(a3, v14 + 1, (size_t)&v16[~(unint64_t)v14]);
  v16[~(unint64_t)v14 + (void)a3] = 0;
  uint64_t result = strncmp(v16, "/t/", 3uLL);
  if (result)
  {
    uint64_t v17 = strchr(v16 + 1, 47);
    unint64_t v18 = strchr(v17 + 1, 47);
    uint64_t v19 = strchr(v18 + 1, 47);
    double v20 = strchr(v19 + 1, 47);
    size_t v21 = v20 - (v16 + 8);
    strncpy(a5, v16 + 8, v21);
    a5[v21] = 0;
    strncpy(a6, v20 + 1, 0x200uLL);
    return 1;
  }
  return result;
}

FILE *vl_open_track(const char *a1, const char *a2)
{
  v14[64] = *MEMORY[0x263EF8340];
  if (!split_track_path(a1, (char *)v14, v13, v12, v11, v10)
    || (v14[0] == 0x5F6C736C5F766433 ? (BOOL v4 = v14[1] == 0x31306775626564) : (BOOL v4 = 0), v4))
  {
    int v6 = "Open track file from: %s";
    goto LABEL_9;
  }
  __sprintf_chk(__filename, 0, 0x200uLL, "%s/t/%s", v12, v9);
  int v5 = fopen(__filename, a2);
  printf("Verbose : ");
  printf("Open track file from: %s", __filename);
  putchar(10);
  if (!v5)
  {
    int v6 = "Open track file failed, second try from: %s";
LABEL_9:
    int v5 = fopen(a1, a2);
    printf("Verbose : ");
    printf(v6, a1);
    putchar(10);
  }
  return v5;
}

uint64_t vl_map_load_fn(const char *a1, void **a2, size_t *a3, int a4)
{
  int64_t v7 = vl_open_track(a1, "r");
  if (!v7) {
    return 1;
  }
  size_t v8 = v7;
  char v17 = 0;
  __int ptr = 0;
  if (fread(&__ptr, 1uLL, 4uLL, v7) != 4) {
    goto LABEL_10;
  }
  if (__ptr != 1414545741)
  {
    printf("%sError : ", "");
    printf("error reading header: %s", (const char *)&__ptr);
    putchar(10);
LABEL_10:
    fclose(v8);
    return 0xFFFFFFFFLL;
  }
  int v15 = 0;
  if (fread(&v15, 4uLL, 1uLL, v8) != 1) {
    goto LABEL_10;
  }
  uint64_t v14 = 0;
  if (fread(&v14, 8uLL, 1uLL, v8) != 1) {
    goto LABEL_10;
  }
  uint64_t v13 = 0;
  if (fread(&v13, 8uLL, 1uLL, v8) != 1 || fseek(v8, -24, 1)) {
    goto LABEL_10;
  }
  double v10 = (size_t *)&v14;
  if (!a4) {
    double v10 = (size_t *)&v13;
  }
  size_t v11 = *v10;
  *a3 = *v10;
  uint64_t v12 = malloc_type_malloc(v11, 0x6EA4917EuLL);
  *a2 = v12;
  if (fread(v12, *a3, 1uLL, v8) == 1)
  {
    fclose(v8);
    return 0;
  }
  else
  {
    free(*a2);
    fclose(v8);
    return 2;
  }
}

uint64_t vl_map_block_decode_tag(uint64_t a1, char *__s2, char *__s1, int a4)
{
  if (a4 < 1) {
    return 0x80000000;
  }
  uint64_t v7 = a4;
  while (strcmp(__s1, __s2))
  {
    __s1 += 72;
    if (!--v7) {
      return 0x80000000;
    }
  }
  int v10 = *((_DWORD *)__s1 + 11);
  if (!v10)
  {
    unsigned int v15 = *((_DWORD *)__s1 + 10);
    if (v15 <= 0xF) {
      goto LABEL_14;
    }
    return 1;
  }
  if (v10 != 1) {
    return 1;
  }
  unint64_t v12 = *((void *)__s1 + 7);
  size_t v11 = (uint8_t *)*((void *)__s1 + 8);
  uint64_t v13 = (uint8_t *)malloc_type_malloc(*((void *)__s1 + 6), 0x9851C6B8uLL);
  *((void *)__s1 + _Block_object_dispose(&STACK[0x220], 8) = v13;
  if (v12 < 8
    || v12 - 8 < *(void *)v11
    || (uint64_t v14 = *((void *)__s1 + 6)) != 0
    && compression_decode_buffer(v13, *((void *)__s1 + 6), v11 + 8, *(void *)v11, 0, COMPRESSION_LZFSE) != v14)
  {
    free(v11);
    return 1;
  }
  free(v11);
  unsigned int v15 = *((_DWORD *)__s1 + 10);
LABEL_14:
  uint64_t v16 = decode_fncs[v15];
  uint64_t v17 = *((unsigned int *)__s1 + 8);
  v8.n128_u32[0] = *((_DWORD *)__s1 + 9);
  uint64_t v18 = *((void *)__s1 + 8);
  uint64_t v19 = *((void *)__s1 + 6);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))v16)(a1, v17, v18, v19, v8);
}

uint64_t vl_map_desc_decode_mst(uint64_t *a1)
{
  *(void *)&v63.uint64_t tv_usec = 0;
  unint64_t v64 = 0;
  v63.__darwin_time_t tv_sec = 0;
  gettimeofday(&v63, 0);
  unint64_t v2 = *a1;
  if ((unint64_t)*a1 < 4
    || (unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFCLL, (v2 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    || v3 == 8
    || v3 == 12)
  {
    BOOL v4 = 0;
    uint64_t v5 = 1;
    goto LABEL_6;
  }
  BOOL v4 = 0;
  uint64_t v5 = 1;
  if (v3 != 16)
  {
    uint64_t v7 = (int *)a1[1];
    if (*v7 <= 0)
    {
      uint64_t tv_usec = v63.tv_usec;
      __darwin_time_t tv_sec = v63.tv_sec;
      uint64_t v8 = v7[1];
      uint64_t v9 = v7[2];
      int v11 = v7[3];
      int v10 = v7[4];
      unint64_t v12 = v2 - 20;
      uint64_t v13 = (uint64_t)(v7 + 5);
      uint64_t v58 = v7[2];
      int v59 = v9 * v8;
      int v14 = ((int)v9 * (int)v8 + v10 - 1) / v10;
      int v15 = v11 + 1;
      int v16 = v10 * (v11 + 1);
      uint64_t v62 = v8;
      size_t v17 = (v58 + 2) * v8;
      BOOL v4 = (char *)malloc_type_malloc(v17, 0xD7F30E8BuLL);
      int v18 = huff_decompress(v13, v14, &v64, v16, v4, v17);
      if (v12 >= v64) {
        unint64_t v19 = v64;
      }
      else {
        unint64_t v19 = 0;
      }
      if (v17) {
        BOOL v20 = v4 == 0;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20 || (BOOL v21 = v17 >= v18, v22 = v17 - v18, !v21))
      {
        if (v12 >= v64) {
          __assert_rtn("vl_map_desc_decode_mst", "vl_map_rw.c", 1998, "!buf2.err");
        }
LABEL_61:
        __assert_rtn("vl_map_desc_decode_mst", "vl_map_rw.c", 1997, "!buf.err");
      }
      if (v12 < v64) {
        goto LABEL_61;
      }
      uint64_t v23 = v13 + v19;
      uint64_t v57 = v18;
      uint64_t v24 = &v4[v18];
      v63.__darwin_time_t tv_sec = 0;
      *(void *)&v63.uint64_t tv_usec = 0;
      gettimeofday(&v63, 0);
      __darwin_time_t v25 = v63.tv_usec + 1000000 * v63.tv_sec;
      printf("Verbose (toc) : ");
      printf("vl_map_desc_decode_mst: desc decompress");
      printf(": %f ms", (float)((float)(-1000000 * tv_sec - tv_usec + v25) / 1000.0));
      putchar(10);
      if (2 * v62 != (int)huff_decompress(v23, 2 * v62, 0, 8, v24, v22)) {
        __assert_rtn("vl_map_desc_decode_mst", "vl_map_rw.c", 2007, "bytes_written == n * sizeof(uint16_t)");
      }
      if (v22 < 2 * v62) {
        __assert_rtn("vl_map_desc_decode_mst", "vl_map_rw.c", 2012, "!buf2.err");
      }
      v63.__darwin_time_t tv_sec = 0;
      *(void *)&v63.uint64_t tv_usec = 0;
      gettimeofday(&v63, 0);
      __darwin_time_t v26 = v63.tv_usec + 1000000 * v63.tv_sec;
      printf("Verbose (toc) : ");
      printf("vl_map_desc_decode_mst: parent array decompress");
      printf(": %f ms", (float)((float)(v26 - v25) / 1000.0));
      putchar(10);
      uint64_t v27 = *a1;
      uint64_t v28 = a1[2];
      if (v28 < v59)
      {
        uint64_t v29 = 2 * v28;
        BOOL v20 = v28 == 0;
        uint64_t v30 = 256;
        if (!v20) {
          uint64_t v30 = v29;
        }
        if (v30 <= v59) {
          size_t v31 = v59;
        }
        else {
          size_t v31 = v30;
        }
        if (v31) {
          a1[1] = (uint64_t)malloc_type_realloc((void *)a1[1], v31, 0x5DAF2424uLL);
        }
        a1[2] = v31;
      }
      long long v32 = (unsigned char *)a1[1];
      if (v59 > v27)
      {
        bzero(&v32[*a1], v59 - v27);
        long long v32 = (unsigned char *)a1[1];
      }
      *a1 = v59;
      char v33 = 8 - v11;
      int v34 = 1 << (7 - v11);
      if ((int)v62 <= 1)
      {
        if ((int)v58 >= 1)
        {
          unint64_t v50 = 0;
          int v51 = 0;
          uint64_t v52 = v58;
          int v53 = (unsigned int *)v4;
          do
          {
            if (v51 <= v11)
            {
              unsigned int v54 = *v53++;
              v50 |= (unint64_t)bswap32(v54) << (32 - v51);
              v51 += 32;
            }
            *v32++ = (v50 >> (63 - v11) << v33) + v34;
            v50 <<= v15;
            v51 -= v15;
            --v52;
          }
          while (v52);
        }
      }
      else
      {
        int v35 = *(unsigned __int16 *)v24;
        uint64_t v36 = v62 - 1;
        uint64_t v37 = v57 + 2;
        do
        {
          v35 += *(unsigned __int16 *)&v4[v37];
          *(_WORD *)&v4[v37] = v35;
          v37 += 2;
          --v36;
        }
        while (v36);
        if ((int)v9 > 0)
        {
          uint64_t v38 = 0;
          unint64_t v39 = 0;
          int v40 = 0;
          char v41 = 63 - v11;
          size_t v42 = &v32[v9];
          double v43 = (unsigned int *)v4;
          do
          {
            if (v40 <= v11)
            {
              unsigned int v44 = *v43++;
              v39 |= (unint64_t)bswap32(v44) << (32 - v40);
              v40 += 32;
            }
            v32[v38] = (v39 >> v41 << v33) + v34;
            v39 <<= v15;
            v40 -= v15;
            uint64_t v45 = v42;
            unint64_t v46 = 1;
            do
            {
              if (v40 <= v11)
              {
                unsigned int v47 = *v43++;
                v39 |= (unint64_t)bswap32(v47) << (32 - v40);
                v40 += 32;
              }
              unint64_t v48 = v39 >> v41;
              if ((int)(v39 >> v41) < 1 || 2 << v11 <= (int)v48) {
                __assert_rtn("_desc_unpack", "vl_map_rw.c", 1718, "diff > 0 && diff < 2 * zero");
              }
              if (v46 <= *(unsigned __int16 *)&v24[2 * v46]) {
                __assert_rtn("_desc_unpack", "vl_map_rw.c", 1722, "parent[i] < i");
              }
              int v49 = (-1 << v11)
                  + v48
                  + (v32[v38 + (int)v9 * (unint64_t)*(unsigned __int16 *)&v24[2 * v46]] >> v33);
              if (v49 < 0) {
                __assert_rtn("_desc_unpack", "vl_map_rw.c", 1726, "val + diff >= 0");
              }
              *uint64_t v45 = ((_BYTE)v49 << v33) + v34;
              ++v46;
              v39 <<= v15;
              v40 -= v15;
              v45 += v9;
            }
            while (v62 != v46);
            ++v38;
            ++v42;
          }
          while (v38 != v9);
        }
      }
      v63.__darwin_time_t tv_sec = 0;
      *(void *)&v63.uint64_t tv_usec = 0;
      gettimeofday(&v63, 0);
      __darwin_time_t v55 = v63.tv_sec;
      uint64_t v56 = v63.tv_usec;
      printf("Verbose (toc) : ");
      printf("vl_map_desc_decode_mst: unpack");
      printf(": %f ms", (float)((float)(1000000 * v55 - v26 + v56) / 1000.0));
      putchar(10);
      uint64_t v5 = 0;
    }
  }
LABEL_6:
  free(v4);
  return v5;
}

uint64_t decode_pos3f_list(uint64_t a1, int a2, char *__src, unint64_t a4)
{
  uint64_t v5 = __src;
  unint64_t v7 = a4 - 4;
  if (a4 < 4)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 2;
    unint64_t v7 = a4;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= 0) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v5 = __src + 4;
    uint64_t v9 = *(int *)__src;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= v9) {
      goto LABEL_13;
    }
  }
  uint64_t v11 = 2 * v10;
  BOOL v12 = v10 == 0;
  uint64_t v13 = 21;
  if (!v12) {
    uint64_t v13 = v11;
  }
  if (v13 <= v9) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), 12 * v14, 0x2AE914C0uLL);
  }
  *(void *)(a1 + 16) = v14;
LABEL_13:
  *(void *)a1 = v9;
  if (a4 >= 4)
  {
    if (v7 >= 12 * v9)
    {
      int v15 = *(void **)(a1 + 8);
      if (v15) {
        memcpy(v15, v5, 12 * v9);
      }
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t decode_pos2f_list(uint64_t a1, int a2, char *__src, unint64_t a4)
{
  uint64_t v5 = __src;
  unint64_t v7 = a4 - 4;
  if (a4 < 4)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 2;
    unint64_t v7 = a4;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= 0) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v5 = __src + 4;
    uint64_t v9 = *(int *)__src;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= v9) {
      goto LABEL_13;
    }
  }
  uint64_t v11 = 2 * v10;
  BOOL v12 = v10 == 0;
  uint64_t v13 = 32;
  if (!v12) {
    uint64_t v13 = v11;
  }
  if (v13 <= v9) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), 8 * v14, 0xDFCCD919uLL);
  }
  *(void *)(a1 + 16) = v14;
LABEL_13:
  *(void *)a1 = v9;
  if (a4 >= 4)
  {
    if (v7 >= 8 * v9)
    {
      int v15 = *(void **)(a1 + 8);
      if (v15) {
        memcpy(v15, v5, 8 * v9);
      }
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t decode_float_list(uint64_t a1, int a2, char *__src, unint64_t a4)
{
  uint64_t v5 = __src;
  unint64_t v7 = a4 - 4;
  if (a4 < 4)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 2;
    unint64_t v7 = a4;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= 0) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v5 = __src + 4;
    uint64_t v9 = *(int *)__src;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= v9) {
      goto LABEL_13;
    }
  }
  uint64_t v11 = 2 * v10;
  BOOL v12 = v10 == 0;
  uint64_t v13 = 64;
  if (!v12) {
    uint64_t v13 = v11;
  }
  if (v13 <= v9) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), 4 * v14, 0x1FB4A5AuLL);
  }
  *(void *)(a1 + 16) = v14;
LABEL_13:
  *(void *)a1 = v9;
  if (a4 >= 4)
  {
    if (v7 >= 4 * v9)
    {
      int v15 = *(void **)(a1 + 8);
      if (v15) {
        memcpy(v15, v5, 4 * v9);
      }
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t decode_ushort_list(uint64_t a1, int a2, char *__src, unint64_t a4)
{
  uint64_t v5 = __src;
  unint64_t v7 = a4 - 4;
  if (a4 < 4)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 2;
    unint64_t v7 = a4;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= 0) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v5 = __src + 4;
    uint64_t v9 = *(int *)__src;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= v9) {
      goto LABEL_13;
    }
  }
  uint64_t v11 = 2 * v10;
  BOOL v12 = v10 == 0;
  uint64_t v13 = 128;
  if (!v12) {
    uint64_t v13 = v11;
  }
  if (v13 <= v9) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), 2 * v14, 0xC69F78ABuLL);
  }
  *(void *)(a1 + 16) = v14;
LABEL_13:
  *(void *)a1 = v9;
  if (a4 >= 4)
  {
    if (v7 >= 2 * v9)
    {
      int v15 = *(void **)(a1 + 8);
      if (v15) {
        memcpy(v15, v5, 2 * v9);
      }
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t decode_uchar_list(uint64_t a1, int a2, char *__src, unint64_t a4)
{
  uint64_t v5 = __src;
  unint64_t v7 = a4 - 4;
  if (a4 < 4)
  {
    int64_t v9 = 0;
    uint64_t v8 = 2;
    unint64_t v7 = a4;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= 0) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v5 = __src + 4;
    int64_t v9 = *(int *)__src;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= v9) {
      goto LABEL_13;
    }
  }
  uint64_t v11 = 2 * v10;
  BOOL v12 = v10 == 0;
  uint64_t v13 = 256;
  if (!v12) {
    uint64_t v13 = v11;
  }
  if (v13 <= v9) {
    size_t v14 = v9;
  }
  else {
    size_t v14 = v13;
  }
  if (v14) {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), v14, 0xB56A7CCCuLL);
  }
  *(void *)(a1 + 16) = v14;
LABEL_13:
  *(void *)a1 = v9;
  if (a4 >= 4)
  {
    if (v7 >= v9)
    {
      int v15 = *(void **)(a1 + 8);
      if (v15) {
        memcpy(v15, v5, v9);
      }
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t decode_pos3f_list_ff(uint64_t a1, int a2, int *a3, unint64_t a4)
{
  v24[0] = a3;
  if (a4 < 4) {
    return 2;
  }
  int v7 = *a3;
  v24[1] = a3 + 1;
  v24[2] = a4 - 4;
  uint64_t v8 = v7;
  int64_t v9 = (int8x16_t *)malloc_type_malloc(4 * v7, 0x100004052888210uLL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 < v7)
  {
    uint64_t v11 = 2 * v10;
    BOOL v12 = v10 == 0;
    uint64_t v13 = 21;
    if (!v12) {
      uint64_t v13 = v11;
    }
    if (v13 <= v8) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = v13;
    }
    if (v14) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), 12 * v14, 0x2ADF69EBuLL);
    }
    *(void *)(a1 + 16) = v14;
  }
  uint64_t v25 = 0;
  *(void *)a1 = v8;
  float_frac_decompress(v9, v8, a2, (uint64_t)v24);
  if ((int)v8 <= 0)
  {
    float_frac_decompress(v9, v8, a2, (uint64_t)v24);
    float_frac_decompress(v9, v8, a2, (uint64_t)v24);
  }
  else
  {
    unint64_t v15 = 0;
    int v16 = *(_DWORD **)(a1 + 8);
    uint64_t v17 = v8;
    uint64_t v18 = 4 * v8;
    do
    {
      *int v16 = v9->i32[v15 / 4];
      v16 += 3;
      v15 += 4;
    }
    while (v18 != v15);
    float_frac_decompress(v9, v8, a2, (uint64_t)v24);
    unint64_t v19 = 0;
    BOOL v20 = (_DWORD *)(*(void *)(a1 + 8) + 4);
    do
    {
      *BOOL v20 = v9->i32[v19 / 4];
      v20 += 3;
      v19 += 4;
    }
    while (v18 != v19);
    float_frac_decompress(v9, v8, a2, (uint64_t)v24);
    BOOL v21 = (__int32 *)(*(void *)(a1 + 8) + 8);
    unint64_t v22 = v9;
    do
    {
      __int32 v23 = v22->i32[0];
      unint64_t v22 = (int8x16_t *)((char *)v22 + 4);
      *BOOL v21 = v23;
      v21 += 3;
      --v17;
    }
    while (v17);
  }
  free(v9);
  return v25;
}

uint64_t decode_hm_ff(uint64_t a1, int a2, unsigned int *a3, unint64_t a4)
{
  v24[0] = a3;
  if (a4 < 4) {
    return 2;
  }
  uint64_t v7 = (int)*a3;
  uint64_t v8 = *a3;
  v24[1] = a3 + 1;
  v24[2] = a4 - 4;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 < v7)
  {
    uint64_t v10 = 2 * v9;
    BOOL v11 = v9 == 0;
    uint64_t v12 = 64;
    if (!v11) {
      uint64_t v12 = v10;
    }
    if (v12 <= v7) {
      uint64_t v13 = v7;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), 4 * v13, 0x6C616311uLL);
    }
    *(void *)(a1 + 16) = v13;
  }
  uint64_t v25 = 0;
  *(void *)a1 = v7;
  float_frac_decompress(*(int8x16_t **)(a1 + 8), v8, a2, (uint64_t)v24);
  if ((int)v8 >= 1)
  {
    uint64_t v14 = *(float32x4_t **)(a1 + 8);
    if (v7 < 8)
    {
      uint64_t v15 = 0;
      goto LABEL_18;
    }
    uint64_t v15 = v8 & 0x7FFFFFF8;
    int v16 = v14 + 1;
    v17.i64[0] = 0x6000000060000000;
    v17.i64[1] = 0x6000000060000000;
    int8x16_t v18 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
    uint64_t v19 = v8 & 0xFFFFFFF8;
    do
    {
      int8x16_t v20 = vbslq_s8((int8x16_t)vceqq_f32(*v16, v17), v18, *(int8x16_t *)v16);
      v16[-1] = (float32x4_t)vbslq_s8((int8x16_t)vceqq_f32(v16[-1], v17), v18, (int8x16_t)v16[-1]);
      *int v16 = (float32x4_t)v20;
      v16 += 2;
      v19 -= 8;
    }
    while (v19);
    if (v15 != v8)
    {
LABEL_18:
      uint64_t v21 = v8 - v15;
      unint64_t v22 = &v14->f32[v15];
      do
      {
        float v23 = *v22;
        if (*v22 == 3.6893e19) {
          float v23 = 3.4028e38;
        }
        *v22++ = v23;
        --v21;
      }
      while (v21);
    }
  }
  return v25;
}

uint64_t decode_ang_fix(uint64_t a1, char a2, int *a3, unint64_t a4, double a5)
{
  unint64_t v5 = a4 - 4;
  if (a4 < 4) {
    return 2;
  }
  uint64_t v10 = *a3;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 < v10)
  {
    uint64_t v12 = 2 * v11;
    BOOL v13 = v11 == 0;
    uint64_t v14 = 64;
    if (!v13) {
      uint64_t v14 = v12;
    }
    if (v14 <= v10) {
      uint64_t v15 = *a3;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v15) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), 4 * v15, 0x3BEEFAB5uLL);
    }
    *(void *)(a1 + 16) = v15;
  }
  *(void *)a1 = v10;
  if (v5 < 2 * v10) {
    return 2;
  }
  if ((int)v10 >= 1)
  {
    int v16 = *(float32x4_t **)(a1 + 8);
    *(float *)&a5 = 6.2832 / (float)(1 << a2);
    if (v10 >= 0x10)
    {
      uint64_t v17 = v10 & 0x7FFFFFF0;
      float32x4_t v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
      uint64_t v19 = (uint16x8_t *)(a3 + 5);
      int8x16_t v20 = v16 + 2;
      v21.i64[0] = 0x3F0000003F000000;
      v21.i64[1] = 0x3F0000003F000000;
      uint64_t v22 = v10 & 0xFFFFFFF0;
      do
      {
        uint16x8_t v23 = v19[-1];
        float32x4_t v24 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v19)), v21);
        float32x4_t v25 = vmlaq_f32((float32x4_t)0, v18, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v23.i8)), v21));
        float32x4_t v26 = vmlaq_f32((float32x4_t)0, v18, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v23)), v21));
        float32x4_t v27 = vmlaq_f32((float32x4_t)0, v18, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v19->i8)), v21));
        v20[-2] = v25;
        v20[-1] = v26;
        *int8x16_t v20 = v27;
        v20[1] = vmlaq_f32((float32x4_t)0, v18, v24);
        v20 += 4;
        v19 += 2;
        v22 -= 16;
      }
      while (v22);
      if (v17 == v10) {
        return 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v28 = v10 - v17;
    uint64_t v29 = &v16->f32[v17];
    uint64_t v30 = (unsigned __int16 *)a3 + v17 + 2;
    do
    {
      unsigned int v31 = *v30++;
      *v29++ = (float)((float)((float)v31 + 0.5) * *(float *)&a5) + 0.0;
      --v28;
    }
    while (v28);
  }
  return 0;
}

uint64_t decode_ang2_fix(uint64_t a1, char a2, int *a3, unint64_t a4)
{
  unint64_t v4 = a4 - 4;
  if (a4 >= 4)
  {
    uint64_t v9 = (uint16x8_t *)(a3 + 1);
    uint64_t v10 = *a3;
    uint64_t v11 = (float32x4_t *)malloc_type_malloc(4 * v10, 0x100004052888210uLL);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 < v10)
    {
      uint64_t v14 = 2 * v13;
      BOOL v15 = v13 == 0;
      uint64_t v16 = 32;
      if (!v15) {
        uint64_t v16 = v14;
      }
      if (v16 <= v10) {
        uint64_t v17 = v10;
      }
      else {
        uint64_t v17 = v16;
      }
      if (v17) {
        *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), 8 * v17, 0x6CA8E040uLL);
      }
      *(void *)(a1 + 16) = v17;
    }
    *(void *)a1 = v10;
    unint64_t v18 = 2 * v10;
    if ((int)v10 < 1)
    {
      if (v4 - v18 >= v18 && v4 >= v18) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = 2;
      }
      goto LABEL_44;
    }
    *(float *)v12.i32 = 6.2832 / (float)(1 << a2);
    uint64_t v19 = v10;
    int8x16_t v20 = *(_DWORD **)(a1 + 8);
    unint64_t v21 = v4 - v18;
    if (v4 < v18)
    {
      uint64_t v5 = 2;
      unint64_t v21 = v4;
LABEL_29:
      uint64_t v38 = v11;
      unint64_t v39 = v20;
      uint64_t v40 = v10;
      do
      {
        int v41 = v38->i32[0];
        uint64_t v38 = (float32x4_t *)((char *)v38 + 4);
        *unint64_t v39 = v41;
        v39 += 2;
        --v40;
      }
      while (v40);
      if (v4 < v18) {
        goto LABEL_42;
      }
      if (v21 < v18)
      {
        uint64_t v5 = 2;
        goto LABEL_42;
      }
      if (v10 >= 0x10)
      {
        uint64_t v42 = v10 & 0x7FFFFFF0;
        float32x4_t v43 = (float32x4_t)vdupq_lane_s32(v12, 0);
        unsigned int v44 = v9 + 1;
        uint64_t v45 = v11 + 2;
        v46.i64[0] = 0x3F0000003F000000;
        v46.i64[1] = 0x3F0000003F000000;
        uint64_t v47 = v10 & 0xFFFFFFF0;
        do
        {
          uint16x8_t v48 = v44[-1];
          float32x4_t v49 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v44)), v46);
          float32x4_t v50 = vmlaq_f32((float32x4_t)0, v43, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v48.i8)), v46));
          float32x4_t v51 = vmlaq_f32((float32x4_t)0, v43, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v48)), v46));
          float32x4_t v52 = vmlaq_f32((float32x4_t)0, v43, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v44->i8)), v46));
          v45[-2] = v50;
          v45[-1] = v51;
          *uint64_t v45 = v52;
          v45[1] = vmlaq_f32((float32x4_t)0, v43, v49);
          v45 += 4;
          v44 += 2;
          v47 -= 16;
        }
        while (v47);
        if (v42 == v10) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v42 = 0;
      }
      uint64_t v53 = v10 - v42;
      unsigned int v54 = &v11->f32[v42];
      __darwin_time_t v55 = (unsigned __int16 *)v9 + v42;
      do
      {
        unsigned int v56 = *v55++;
        *v54++ = (float)((float)((float)v56 + 0.5) * *(float *)v12.i32) + 0.0;
        --v53;
      }
      while (v53);
LABEL_41:
      uint64_t v5 = 0;
LABEL_42:
      uint64_t v57 = v20 + 1;
      uint64_t v58 = v11;
      do
      {
        int v59 = v58->i32[0];
        uint64_t v58 = (float32x4_t *)((char *)v58 + 4);
        _DWORD *v57 = v59;
        v57 += 2;
        --v19;
      }
      while (v19);
LABEL_44:
      free(v11);
      return v5;
    }
    if (v10 >= 0x10)
    {
      uint64_t v23 = v10 & 0x7FFFFFF0;
      float32x4_t v24 = (float32x4_t)vdupq_lane_s32(v12, 0);
      float32x4_t v25 = (uint16x8_t *)(a3 + 5);
      float32x4_t v26 = v11 + 2;
      v27.i64[0] = 0x3F0000003F000000;
      v27.i64[1] = 0x3F0000003F000000;
      uint64_t v28 = v10 & 0xFFFFFFF0;
      do
      {
        uint16x8_t v29 = v25[-1];
        float32x4_t v30 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v25)), v27);
        float32x4_t v31 = vmlaq_f32((float32x4_t)0, v24, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v29.i8)), v27));
        float32x4_t v32 = vmlaq_f32((float32x4_t)0, v24, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v29)), v27));
        float32x4_t v33 = vmlaq_f32((float32x4_t)0, v24, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v25->i8)), v27));
        v26[-2] = v31;
        v26[-1] = v32;
        *float32x4_t v26 = v33;
        v26[1] = vmlaq_f32((float32x4_t)0, v24, v30);
        v26 += 4;
        v25 += 2;
        v28 -= 16;
      }
      while (v28);
      if (v23 == v10) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v34 = v10 - v23;
    int v35 = &v11->f32[v23];
    uint64_t v36 = (unsigned __int16 *)a3 + v23 + 2;
    do
    {
      unsigned int v37 = *v36++;
      *v35++ = (float)((float)((float)v37 + 0.5) * *(float *)v12.i32) + 0.0;
      --v34;
    }
    while (v34);
LABEL_28:
    uint64_t v5 = 0;
    uint64_t v9 = (uint16x8_t *)((char *)v9 + v18);
    goto LABEL_29;
  }
  return 2;
}

uint64_t decode_desc_dictionary()
{
  return 0xFFFFFFFFLL;
}

uint64_t decode_uchar_list_4bit(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if ((a4 & 0xFFFFFFFC) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a3 + 1;
  uint64_t v6 = *a3;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7 < v6)
  {
    uint64_t v8 = 2 * v7;
    BOOL v9 = v7 == 0;
    uint64_t v10 = 256;
    if (!v9) {
      uint64_t v10 = v8;
    }
    if (v10 <= v6) {
      size_t v11 = *a3;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), v11, 0xE1827A63uLL);
    }
    *(void *)(a1 + 16) = v11;
  }
  *(void *)a1 = v6;
  if ((int)v6 >= 1)
  {
    uint64_t v12 = 0;
    do
    {
      *(unsigned char *)(*(void *)(a1 + 8) + v12) = (16
                                             * (*((unsigned __int8 *)v5 + (v12 >> 1)) >> (4 * (v12 & 1)))) | 8;
      ++v12;
    }
    while (v6 != v12);
  }
  return 0;
}

uint64_t decode_pos3f_list_rtp(uint64_t a1, int a2, int *a3, unint64_t a4, float a5)
{
  float v5 = -0.5;
  if (a5 > 0.0) {
    float v5 = 0.5;
  }
  double v96 = a3;
  if (a4 >= 4)
  {
    uint64_t v9 = *a3;
    float v10 = v5 + a5;
    uint64_t v11 = *a3;
    src_buffer = (uint8_t *)(a3 + 1);
    unint64_t v98 = a4 - 4;
    uint64_t v12 = (int8x16_t *)malloc_type_malloc(12 * v9, 0x100004052888210uLL);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 < v9)
    {
      uint64_t v14 = 2 * v13;
      BOOL v15 = v13 == 0;
      uint64_t v16 = 21;
      if (!v15) {
        uint64_t v16 = v14;
      }
      if (v16 <= v9) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = v16;
      }
      if (v17) {
        *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), 12 * v17, 0xA153A654uLL);
      }
      *(void *)(a1 + 16) = v17;
    }
    int v18 = (int)v10;
    uint64_t v99 = 0;
    *(void *)a1 = v9;
    float_frac_decompress(v12, v9, a2, (uint64_t)&v96);
    size_t v19 = 2 * v9;
    int8x16_t v20 = (uint8_t *)malloc_type_malloc(2 * v9, 0x1000040BDFB0063uLL);
    unint64_t v21 = (uint16x8_t *)v20;
    uint64_t v6 = v99;
    if (!v99)
    {
      unint64_t v22 = v98 - 8;
      if (v98 < 8)
      {
        uint64_t v6 = 2;
        goto LABEL_26;
      }
      uint64_t v23 = v11;
      float32x4_t v24 = src_buffer + 8;
      size_t v25 = *(void *)src_buffer;
      src_buffer += 8;
      v98 -= 8;
      unint64_t v26 = v22 - v25;
      if (v22 < v25)
      {
        uint64_t v6 = 4;
LABEL_25:
        uint64_t v11 = v23;
        size_t v19 = 2 * v9;
        goto LABEL_26;
      }
      if (!v23) {
        goto LABEL_24;
      }
      if (compression_decode_buffer(v20, 2 * v9, v24, v25, 0, COMPRESSION_LZFSE) != 2 * v9)
      {
        uint64_t v6 = 4;
        uint64_t v11 = v23;
        size_t v19 = 2 * v9;
        goto LABEL_26;
      }
      src_buffer = (uint8_t *)&v24[v25];
      unint64_t v98 = v26;
      if ((int)v9 < 1)
      {
LABEL_24:
        uint64_t v6 = 0;
        goto LABEL_25;
      }
      *(float *)v27.i32 = 3.1416 / (float)(1 << (v18 - 1));
      if (v9 >= 0x10)
      {
        float32x4_t v64 = (float32x4_t)vdupq_lane_s32(v27, 0);
        uint64_t v11 = v23;
        uint64_t v28 = v23 & 0xFFFFFFF0;
        int v65 = v21 + 1;
        uint64_t v66 = (uint64_t)v12[2].i64 + 4 * v9;
        v67.i64[0] = 0x3F0000003F000000;
        v67.i64[1] = 0x3F0000003F000000;
        uint64_t v68 = v28;
        do
        {
          uint16x8_t v69 = v65[-1];
          float32x4_t v70 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v65)), v67);
          float32x4_t v71 = vmlaq_f32((float32x4_t)0, v64, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v69.i8)), v67));
          float32x4_t v72 = vmlaq_f32((float32x4_t)0, v64, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v69)), v67));
          float32x4_t v73 = vmlaq_f32((float32x4_t)0, v64, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v65->i8)), v67));
          *(float32x4_t *)(v66 - 32) = v71;
          *(float32x4_t *)(v66 - 16) = v72;
          *(float32x4_t *)uint64_t v66 = v73;
          *(float32x4_t *)(v66 + 16) = vmlaq_f32((float32x4_t)0, v64, v70);
          v66 += 64;
          v65 += 2;
          v68 -= 16;
        }
        while (v68);
        size_t v19 = 2 * v9;
        if (v28 == v23)
        {
          uint64_t v6 = 0;
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v11 = v23;
        size_t v19 = 2 * v9;
      }
      uint64_t v74 = v11 - v28;
      uint64_t v75 = (float *)&v12->i32[v28 + v9];
      __double2 v76 = (unsigned __int16 *)v21 + v28;
      uint64_t v6 = 0;
      do
      {
        unsigned int v77 = *v76++;
        *v75++ = (float)((float)((float)v77 + 0.5) * *(float *)v27.i32) + 0.0;
        --v74;
      }
      while (v74);
    }
LABEL_26:
    free(v21);
    uint16x8_t v29 = (uint8_t *)malloc_type_malloc(v19, 0x1000040BDFB0063uLL);
    float32x4_t v30 = (uint16x8_t *)v29;
    if (v6) {
      goto LABEL_36;
    }
    if (v98 < 8)
    {
      uint64_t v6 = 2;
      goto LABEL_36;
    }
    if (v98 - 8 >= *(void *)src_buffer)
    {
      if (!v9) {
        goto LABEL_66;
      }
      if (compression_decode_buffer(v29, v19, src_buffer + 8, *(void *)src_buffer, 0, COMPRESSION_LZFSE) == v19)
      {
        if ((int)v11 >= 1)
        {
          *(float *)v31.i32 = 6.2832 / (float)(1 << v18);
          if (v11 >= 0x10)
          {
            uint64_t v32 = v11 & 0x7FFFFFF0;
            float32x4_t v78 = (float32x4_t)vdupq_lane_s32(v31, 0);
            double v79 = v30 + 1;
            uint64_t v80 = (uint64_t)v12[2].i64 + 4 * v19;
            v81.i64[0] = 0x3F0000003F000000;
            v81.i64[1] = 0x3F0000003F000000;
            float32x4_t v82 = (float32x4_t)vdupq_n_s32(0xC0490FDB);
            uint64_t v83 = v11 & 0xFFFFFFF0;
            do
            {
              uint16x8_t v84 = v79[-1];
              float32x4_t v85 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v79)), v81);
              float32x4_t v86 = vmlaq_f32(v82, v78, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v84.i8)), v81));
              float32x4_t v87 = vmlaq_f32(v82, v78, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v84)), v81));
              float32x4_t v88 = vmlaq_f32(v82, v78, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v79->i8)), v81));
              *(float32x4_t *)(v80 - 32) = v86;
              *(float32x4_t *)(v80 - 16) = v87;
              *(float32x4_t *)uint64_t v80 = v88;
              *(float32x4_t *)(v80 + 16) = vmlaq_f32(v82, v78, v85);
              v80 += 64;
              v79 += 2;
              v83 -= 16;
            }
            while (v83);
            if (v32 == v11)
            {
              uint64_t v6 = 0;
              goto LABEL_36;
            }
          }
          else
          {
            uint64_t v32 = 0;
          }
          uint64_t v89 = v11 - v32;
          double v90 = (float *)&v12->i32[v32 + v19];
          double v91 = (unsigned __int16 *)v30 + v32;
          uint64_t v6 = 0;
          do
          {
            unsigned int v92 = *v91++;
            *v90++ = (float)((float)((float)v92 + 0.5) * *(float *)v31.i32) + -3.1416;
            --v89;
          }
          while (v89);
LABEL_36:
          free(v30);
          if ((int)v11 >= 1)
          {
            unint64_t v33 = *(void *)(a1 + 8);
            if (v9 >= 4)
            {
              uint64_t v34 = 0;
              unint64_t v48 = v33 + 12 * v11;
              BOOL v50 = v33 < (unint64_t)v12 + 4 * v9 + 4 * v11 && (unint64_t)v12 + 4 * v9 < v48;
              BOOL v52 = v33 < (unint64_t)v12 + 4 * v11 && (unint64_t)v12 < v48;
              if (((unint64_t)v12 + 8 * v9 >= v48 || v33 >= (unint64_t)v12 + 4 * v19 + 4 * v11)
                && !v50
                && !v52)
              {
                size_t dst_size = v19;
                uint64_t v34 = v11 & 0xFFFFFFFE;
                uint64_t v54 = 4 * v19;
                uint64_t v55 = v34;
                unsigned int v56 = (uint64_t *)v12;
                uint64_t v57 = *(float **)(a1 + 8);
                do
                {
                  float32x2_t v58 = (float32x2_t)*v56;
                  LODWORD(v95) = *(uint64_t *)((char *)v56 + 4 * v9);
                  __float2 v59 = __sincosf_stret(COERCE_FLOAT(HIDWORD(*(unint64_t *)((char *)v56 + 4 * v9))));
                  __float2 v60 = __sincosf_stret(v95);
                  float32x2_t v61 = vmul_f32(v58, (float32x2_t)__PAIR64__(LODWORD(v59.__sinval), LODWORD(v60.__sinval)));
                  LODWORD(v94) = *(uint64_t *)((char *)v56 + v54);
                  __float2 v62 = __sincosf_stret(COERCE_FLOAT(HIDWORD(*(unint64_t *)((char *)v56 + v54))));
                  __float2 v63 = __sincosf_stret(v94);
                  v100.val[0] = vmul_f32(v61, (float32x2_t)__PAIR64__(LODWORD(v62.__cosval), LODWORD(v63.__cosval)));
                  v100.val[1] = vmul_f32(v61, (float32x2_t)__PAIR64__(LODWORD(v62.__sinval), LODWORD(v63.__sinval)));
                  v100.val[2] = vmul_f32(v58, (float32x2_t)__PAIR64__(LODWORD(v59.__cosval), LODWORD(v60.__cosval)));
                  vst3_f32(v57, v100);
                  v57 += 6;
                  ++v56;
                  v55 -= 2;
                }
                while (v55);
                size_t v19 = dst_size;
                if (v34 == v11) {
                  goto LABEL_41;
                }
              }
            }
            else
            {
              uint64_t v34 = 0;
            }
            size_t v35 = v19;
            uint64_t v36 = v11 - v34;
            unsigned int v37 = (float *)&v12->i32[v34];
            uint64_t v38 = (float *)(v33 + 12 * v34 + 4);
            unint64_t v39 = (float *)&v12->i32[v34 + v35];
            uint64_t v40 = (float *)&v12->i32[v34 + v9];
            do
            {
              float v41 = *v37;
              float v42 = v41 * sinf(*v40);
              *(v38 - 1) = v42 * cosf(*v39);
              float v43 = *v39++;
              *uint64_t v38 = v42 * sinf(v43);
              float v44 = *v37++;
              float v45 = v44;
              float v46 = *v40++;
              v38[1] = v45 * cosf(v46);
              v38 += 3;
              --v36;
            }
            while (v36);
          }
LABEL_41:
          free(v12);
          return v6;
        }
LABEL_66:
        free(v30);
        uint64_t v6 = 0;
        goto LABEL_41;
      }
    }
    uint64_t v6 = 4;
    goto LABEL_36;
  }
  return 2;
}

uint64_t decode_eigv_fix(uint64_t a1, char a2, int *a3, unint64_t a4, double a5)
{
  unint64_t v5 = a4 - 4;
  if (a4 < 4) {
    return 2;
  }
  uint64_t v10 = *a3;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 < v10)
  {
    uint64_t v12 = 2 * v11;
    _ZF = v11 == 0;
    uint64_t v14 = 64;
    if (!_ZF) {
      uint64_t v14 = v12;
    }
    if (v14 <= v10) {
      uint64_t v15 = *a3;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v15) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), 4 * v15, 0x98E736BFuLL);
    }
    *(void *)(a1 + 16) = v15;
  }
  *(void *)a1 = v10;
  if (v5 < 2 * v10) {
    return 2;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v16 = *(float32x4_t **)(a1 + 8);
    *(float *)&a5 = 2.0 / (float)(1 << a2);
    if (v10 >= 0x10)
    {
      float32x4_t v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
      uint64_t v17 = v10 & 0xFFFFFFF0;
      size_t v19 = (uint16x8_t *)(a3 + 5);
      int8x16_t v20 = v16 + 2;
      v21.i64[0] = 0x3F0000003F000000;
      v21.i64[1] = 0x3F0000003F000000;
      __asm { FMOV            V3.4S, #-1.0 }
      uint64_t v26 = v17;
      do
      {
        uint16x8_t v27 = v19[-1];
        float32x4_t v28 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v19)), v21);
        float32x4_t v29 = vmlaq_f32(_Q3, v18, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v27.i8)), v21));
        float32x4_t v30 = vmlaq_f32(_Q3, v18, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v27)), v21));
        float32x4_t v31 = vmlaq_f32(_Q3, v18, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v19->i8)), v21));
        v20[-2] = v29;
        v20[-1] = v30;
        *int8x16_t v20 = v31;
        v20[1] = vmlaq_f32(_Q3, v18, v28);
        v20 += 4;
        v19 += 2;
        v26 -= 16;
      }
      while (v26);
      if (v17 == v10) {
        return 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v32 = v10 - v17;
    unint64_t v33 = &v16->f32[v17];
    uint64_t v34 = (unsigned __int16 *)a3 + v17 + 2;
    do
    {
      unsigned int v35 = *v34++;
      *v33++ = (float)((float)((float)v35 + 0.5) * *(float *)&a5) + -1.0;
      --v32;
    }
    while (v32);
  }
  return 0;
}

uint64_t decode_uchar_list_2bit(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if ((a4 & 0xFFFFFFFC) == 0) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v5 = a3 + 1;
  uint64_t v6 = *a3;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7 < v6)
  {
    uint64_t v8 = 2 * v7;
    BOOL v9 = v7 == 0;
    uint64_t v10 = 256;
    if (!v9) {
      uint64_t v10 = v8;
    }
    if (v10 <= v6) {
      size_t v11 = *a3;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), v11, 0x6C4C9951uLL);
    }
    *(void *)(a1 + 16) = v11;
  }
  *(void *)a1 = v6;
  if ((int)v6 >= 1)
  {
    uint64_t v12 = 0;
    do
    {
      *(unsigned char *)(*(void *)(a1 + 8) + v12) = (*((unsigned __int8 *)v5 + (v12 >> 2)) >> (2 * (v12 & 3)) << 6) | 0x20;
      ++v12;
    }
    while (v6 != v12);
  }
  return 0;
}

uint64_t decode_uchar_list_1bit(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if ((a4 & 0xFFFFFFFC) == 0) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v5 = a3 + 1;
  uint64_t v6 = *a3;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7 < v6)
  {
    uint64_t v8 = 2 * v7;
    BOOL v9 = v7 == 0;
    uint64_t v10 = 256;
    if (!v9) {
      uint64_t v10 = v8;
    }
    if (v10 <= v6) {
      size_t v11 = *a3;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_realloc(*(void **)(a1 + 8), v11, 0xFDA5699CuLL);
    }
    *(void *)(a1 + 16) = v11;
  }
  *(void *)a1 = v6;
  if ((int)v6 >= 1)
  {
    uint64_t v12 = 0;
    do
    {
      *(unsigned char *)(*(void *)(a1 + 8) + v12) = (*((unsigned __int8 *)v5 + (v12 >> 3)) >> (v12 & 7) << 7) | 0x40;
      ++v12;
    }
    while (v6 != v12);
  }
  return 0;
}

void float_frac_decompress(int8x16_t *a1, int a2, int a3, uint64_t a4)
{
  size_t v8 = 2 * a2;
  BOOL v9 = (uint8_t *)malloc_type_malloc(v8, 0x1000040BDFB0063uLL);
  uint64_t v10 = (uint8_t *)malloc_type_malloc(v8, 0x1000040BDFB0063uLL);
  if (!*(_DWORD *)(a4 + 24))
  {
    unint64_t v11 = *(void *)(a4 + 16);
    if (v11 <= 7) {
      goto LABEL_12;
    }
    uint64_t v12 = *(void **)(a4 + 8);
    size_t v15 = *v12;
    uint64_t v13 = (const uint8_t *)(v12 + 1);
    size_t v14 = v15;
    unint64_t v16 = v11 - 8;
    *(void *)(a4 + _Block_object_dispose(&STACK[0x220], 8) = v13;
    *(void *)(a4 + 16) = v16;
    if (v16 >= v15)
    {
      if (!a2) {
        goto LABEL_7;
      }
      if (compression_decode_buffer(v9, v8, v13, v14, 0, COMPRESSION_LZFSE) == v8)
      {
        uint64_t v13 = (const uint8_t *)(*(void *)(a4 + 8) + v14);
        unint64_t v16 = *(void *)(a4 + 16) - v14;
        *(void *)(a4 + _Block_object_dispose(&STACK[0x220], 8) = v13;
        *(void *)(a4 + 16) = v16;
        if (*(_DWORD *)(a4 + 24)) {
          goto LABEL_15;
        }
LABEL_7:
        if (v16 > 7)
        {
          size_t v19 = *(void *)v13;
          uint64_t v17 = v13 + 8;
          size_t v18 = v19;
          unint64_t v20 = v16 - 8;
          *(void *)(a4 + _Block_object_dispose(&STACK[0x220], 8) = v17;
          *(void *)(a4 + 16) = v20;
          if (v20 >= v19)
          {
            if (!a2) {
              goto LABEL_23;
            }
            if (compression_decode_buffer(v10, v8, v17, v18, 0, COMPRESSION_LZFSE) == v8)
            {
              size_t v21 = *(void *)(a4 + 16) - v18;
              *(void *)(a4 + 8) += v18;
              *(void *)(a4 + 16) = v21;
              goto LABEL_15;
            }
          }
          goto LABEL_13;
        }
LABEL_12:
        int v22 = 2;
LABEL_14:
        *(_DWORD *)(a4 + 24) = v22;
        goto LABEL_15;
      }
    }
LABEL_13:
    int v22 = 4;
    goto LABEL_14;
  }
LABEL_15:
  if (a2 < 1) {
    goto LABEL_23;
  }
  unsigned int v23 = 32 - a3;
  if (a2 < 0x10)
  {
    uint64_t v24 = 0;
LABEL_21:
    uint64_t v37 = a2 - v24;
    uint64_t v38 = &a1->i32[v24];
    uint64_t v39 = 2 * v24;
    uint64_t v40 = &v10[2 * v24];
    float v41 = &v9[v39];
    do
    {
      int v42 = *(unsigned __int16 *)v40;
      v40 += 2;
      int v43 = v42 << v23;
      int v44 = *(unsigned __int16 *)v41;
      v41 += 2;
      *v38++ = v43 | (v44 << 23);
      --v37;
    }
    while (v37);
    goto LABEL_23;
  }
  uint64_t v24 = a2 & 0x7FFFFFF0;
  uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(v23);
  uint64_t v26 = (uint16x4_t *)(v9 + 16);
  uint16x8_t v27 = (uint16x4_t *)(v10 + 16);
  float32x4_t v28 = a1 + 2;
  uint64_t v29 = a2 & 0xFFFFFFF0;
  do
  {
    uint16x8_t v30 = *(uint16x8_t *)v26[-2].i8;
    uint16x8_t v31 = *(uint16x8_t *)v27[-2].i8;
    uint32x4_t v32 = vmovl_u16(*(uint16x4_t *)v31.i8);
    int32x4_t v33 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v30.i8);
    int8x16_t v34 = vorrq_s8((int8x16_t)vshlq_u32(vmovl_high_u16(v31), v25), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v30), 0x17uLL));
    int8x16_t v35 = vorrq_s8((int8x16_t)vshlq_u32(vmovl_u16(*v27), v25), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*v26), 0x17uLL));
    int8x16_t v36 = vorrq_s8((int8x16_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v27->i8), v25), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(*(uint16x8_t *)v26->i8), 0x17uLL));
    v28[-2] = vorrq_s8((int8x16_t)vshlq_u32(v32, v25), (int8x16_t)vshlq_n_s32(v33, 0x17uLL));
    v28[-1] = v34;
    *float32x4_t v28 = v35;
    v28[1] = v36;
    v28 += 4;
    v26 += 4;
    v27 += 4;
    v29 -= 16;
  }
  while (v29);
  if (v24 != a2) {
    goto LABEL_21;
  }
LABEL_23:
  free(v9);
  free(v10);
}

BOOL vl_pose_fuse(uint64_t *a1, double *a2, float32x2_t *a3, const void *a4, const void *a5, unsigned int a6, float32x2_t *a7, float *a8, float a9, double a10, float32x4_t *a11, _DWORD *a12, uint64_t a13, uint64_t a14)
{
  v185[2] = *(_OWORD **)MEMORY[0x263EF8340];
  __src[0] = 0uLL;
  gettimeofday(__src, 0);
  timeval v167 = __src[0];
  bzero(&__src[6], 0x268uLL);
  float64x2_t v173 = 0u;
  float64x2_t v174 = 0u;
  float64x2_t v171 = 0u;
  float64x2_t v172 = 0u;
  float64x2_t v169 = 0u;
  float64x2_t v170 = 0u;
  *(double *)&__src[28].__darwin_time_t tv_sec = a10;
  *(double *)&__src[27].__darwin_time_t tv_sec = a9;
  float64x2_t v23 = vcvtq_f64_f32(a3[1]);
  __src[0] = (timeval)vcvtq_f64_f32(*a3);
  __src[1] = (timeval)v23;
  float64x2_t v24 = vcvtq_f64_f32(a3[3]);
  __src[2] = (timeval)vcvtq_f64_f32(a3[2]);
  __src[3] = (timeval)v24;
  float64x2_t v25 = vcvtq_f64_f32(a3[5]);
  __src[4] = (timeval)vcvtq_f64_f32(a3[4]);
  __src[5] = (timeval)v25;
  g_coords_conv((double *)&__src[0].tv_sec, a2, (double *)&__src[0].tv_sec);
  float64x2_t v26 = vcvtq_f64_f32(a7[1]);
  __src[6] = (timeval)vcvtq_f64_f32(*a7);
  __src[7] = (timeval)v26;
  float64x2_t v27 = vcvtq_f64_f32(a7[3]);
  __src[8] = (timeval)vcvtq_f64_f32(a7[2]);
  __src[9] = (timeval)v27;
  float64x2_t v28 = vcvtq_f64_f32(a7[5]);
  __src[10] = (timeval)vcvtq_f64_f32(a7[4]);
  __src[11] = (timeval)v28;
  if ((int)a6 >= 1)
  {
    __darwin_time_t tv_sec = __src[30].tv_sec;
    if (__src[30].tv_sec + a6 > __src[31].tv_sec)
    {
      __darwin_time_t v30 = 32;
      if (__src[31].tv_sec) {
        __darwin_time_t v30 = 2 * __src[31].tv_sec;
      }
      if (v30 <= __src[30].tv_sec + a6) {
        __darwin_time_t v31 = __src[30].tv_sec + a6;
      }
      else {
        __darwin_time_t v31 = v30;
      }
      if (v31)
      {
        *(void *)&__src[30].uint64_t tv_usec = malloc_type_realloc(*(void **)&__src[30].tv_usec, 8 * v31, 0x283F7A53uLL);
        __darwin_time_t tv_sec = __src[30].tv_sec;
      }
      __src[31].__darwin_time_t tv_sec = v31;
    }
    memcpy((void *)(*(void *)&__src[30].tv_usec + 8 * tv_sec), a4, 8 * a6);
    __src[30].tv_sec += a6;
    uint64_t v32 = *(void *)&__src[28].tv_usec;
    if (*(void *)&__src[28].tv_usec + a6 > *(uint64_t *)&__src[29].tv_usec)
    {
      uint64_t v33 = 21;
      if (*(void *)&__src[29].tv_usec) {
        uint64_t v33 = 2 * *(void *)&__src[29].tv_usec;
      }
      if (v33 <= *(void *)&__src[28].tv_usec + a6) {
        uint64_t v34 = *(void *)&__src[28].tv_usec + a6;
      }
      else {
        uint64_t v34 = v33;
      }
      if (v34)
      {
        __src[29].__darwin_time_t tv_sec = (__darwin_time_t)malloc_type_realloc((void *)__src[29].tv_sec, 12 * v34, 0xA55CECBEuLL);
        uint64_t v32 = *(void *)&__src[28].tv_usec;
      }
      *(void *)&__src[29].uint64_t tv_usec = v34;
    }
    memcpy((void *)(__src[29].tv_sec + 12 * v32), a5, 12 * a6);
    *(void *)&__src[28].tv_usec += a6;
  }
  v179.__darwin_time_t tv_sec = 0x3D4CCCCD00000010;
  v179.uint64_t tv_usec = 0;
  int8x16_t v35 = (int32x4_t *)malloc_type_malloc(4 * (int)a6, 0x100004052888210uLL);
  if ((int)a6 >= 1)
  {
    if (a6 < 8)
    {
      uint64_t v36 = 0;
      do
      {
LABEL_27:
        v35->i32[v36] = v36;
        ++v36;
      }
      while (a6 != v36);
      goto LABEL_28;
    }
    uint64_t v36 = a6 & 0xFFFFFFF8;
    int32x4_t v37 = (int32x4_t)xmmword_21BB7A770;
    uint64_t v38 = v35 + 1;
    v39.i64[0] = 0x400000004;
    v39.i64[1] = 0x400000004;
    v40.i64[0] = 0x800000008;
    v40.i64[1] = 0x800000008;
    uint64_t v41 = v36;
    do
    {
      v38[-1] = v37;
      *uint64_t v38 = vaddq_s32(v37, v39);
      int32x4_t v37 = vaddq_s32(v37, v40);
      v38 += 2;
      v41 -= 8;
    }
    while (v41);
    if (v36 != a6) {
      goto LABEL_27;
    }
  }
LABEL_28:
  *(void *)&__src[31].uint64_t tv_usec = rkd_create_ex(a4, (uint64_t)v35, 2, a6, 1, (uint64_t)&v179);
  g_coords_diff(a2, (double *)&__src[0].tv_sec, (uint64_t)&v169);
  uint64_t v42 = *(void *)&__src[28].tv_usec;
  if (*(uint64_t *)&__src[28].tv_usec >= 1)
  {
    __darwin_time_t v43 = __src[29].tv_sec;
    float64x2_t v44 = v169;
    float64x2_t v45 = v170;
    float64x2_t v46 = v171;
    float64x2_t v47 = v172;
    float64x2_t v48 = v173;
    float64x2_t v49 = v174;
    if (*(void *)&__src[28].tv_usec == 1)
    {
      unint64_t v50 = 0;
    }
    else
    {
      unint64_t v50 = *(void *)&__src[28].tv_usec & 0xFFFFFFFFFFFFFFFELL;
      float64x2_t v51 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v169.f64[0], 0);
      float64x2_t v52 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v170.f64[0], 0);
      float64x2_t v53 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v173.f64[1], 0);
      float64x2_t v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v170.f64[1], 0);
      float64x2_t v55 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v171.f64[1], 0);
      float64x2_t v56 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0);
      float64x2_t v57 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v172.f64[0], 0);
      float64x2_t v58 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v173.f64[0], 0);
      unint64_t v59 = *(void *)&__src[28].tv_usec & 0xFFFFFFFFFFFFFFFELL;
      __float2 v60 = (float *)__src[29].tv_sec;
      float64x2_t v61 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[1], 0);
      do
      {
        float32x2x3_t v186 = vld3_f32(v60);
        float64x2_t v62 = vcvtq_f64_f32(v186.val[0]);
        float64x2_t v63 = vcvtq_f64_f32(v186.val[1]);
        *(float64x2_t *)v186.val[0].f32 = vcvtq_f64_f32(v186.val[2]);
        float64x2_t v64 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v63, v44.f64[1]), v62, v51), *(float64x2_t *)v186.val[0].f32, v52);
        *(float64x2_t *)v186.val[2].f32 = vaddq_f64(v56, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v63, v46.f64[0]), v62, v54), *(float64x2_t *)v186.val[0].f32, v55));
        *(float64x2_t *)v186.val[0].f32 = vaddq_f64(v61, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v63, v47.f64[1]), v62, v57), *(float64x2_t *)v186.val[0].f32, v58));
        *(float32x2_t *)&v62.f64[0] = vcvt_f32_f64(vaddq_f64(v53, v64));
        *(float32x2_t *)&v63.f64[0] = vcvt_f32_f64(*(float64x2_t *)v186.val[2].f32);
        *(float32x2_t *)&v64.f64[0] = vcvt_f32_f64(*(float64x2_t *)v186.val[0].f32);
        vst3_f32(v60, *(float32x2x3_t *)v62.f64);
        v60 += 6;
        v59 -= 2;
      }
      while (v59);
      if (v42 == v50) {
        goto LABEL_36;
      }
    }
    uint64_t v65 = v42 - v50;
    uint64_t v66 = (float *)(v43 + 12 * v50 + 8);
    do
    {
      double v67 = *(v66 - 2);
      double v68 = *(v66 - 1);
      double v69 = *v66;
      float64_t v70 = v48.f64[1] + v44.f64[1] * v68 + v44.f64[0] * v67 + v45.f64[0] * v69;
      float64_t v71 = v49.f64[0] + v46.f64[0] * v68 + v45.f64[1] * v67 + v46.f64[1] * v69;
      float64_t v72 = v49.f64[1] + v47.f64[1] * v68 + v47.f64[0] * v67 + v48.f64[0] * v69;
      *(float *)&double v68 = v70;
      *(float *)&float64_t v70 = v71;
      *(v66 - 2) = *(float *)&v68;
      *(v66 - 1) = *(float *)&v70;
      *(float *)&float64_t v72 = v72;
      *uint64_t v66 = *(float *)&v72;
      v66 += 3;
      --v65;
    }
    while (v65);
  }
LABEL_36:
  if (a14)
  {
    long long v73 = *(_OWORD *)(a14 + 144);
    *(timeval *)&__src[41].uint64_t tv_usec = *(timeval *)(a14 + 128);
    *(_OWORD *)&__src[42].uint64_t tv_usec = v73;
    *(timeval *)&__src[43].uint64_t tv_usec = *(timeval *)(a14 + 160);
    long long v74 = *(_OWORD *)(a14 + 80);
    *(timeval *)&__src[37].uint64_t tv_usec = *(timeval *)(a14 + 64);
    *(_OWORD *)&__src[38].uint64_t tv_usec = v74;
    long long v75 = *(_OWORD *)(a14 + 112);
    *(timeval *)&__src[39].uint64_t tv_usec = *(timeval *)(a14 + 96);
    *(_OWORD *)&__src[40].uint64_t tv_usec = v75;
    long long v76 = *(_OWORD *)(a14 + 16);
    *(timeval *)&__src[33].uint64_t tv_usec = *(timeval *)a14;
    *(_OWORD *)&__src[34].uint64_t tv_usec = v76;
    long long v77 = *(_OWORD *)(a14 + 48);
    *(timeval *)&__src[35].uint64_t tv_usec = *(timeval *)(a14 + 32);
    *(_OWORD *)&__src[36].uint64_t tv_usec = v77;
  }
  int32x4_t v166 = a2;
  int v78 = *((_DWORD *)a1 + 2);
  if (v78 < 1) {
    goto LABEL_56;
  }
  uint64_t v79 = 0;
  uint64_t v80 = 528;
  do
  {
    uint64_t v82 = *a1;
    uint64_t v83 = *a1 + v80;
    if (a10 - *(double *)(v83 - 80) > *((double *)a1 + 2))
    {
      free(*(void **)(v83 - 40));
      free(*(void **)(v83 - 64));
      uint16x8_t v84 = *(void ***)(v83 - 24);
      if (v84)
      {
        free(*v84);
        free(v84[1]);
        free(v84[2]);
        free(v84);
      }
      uint64_t v85 = *(void *)(v82 + v80 - 16);
      if (v85)
      {
        uint64_t v86 = *(void *)(v85 - 8 * *(void *)(v82 + v80) - 8);
        signed int v87 = atomic_fetch_add((atomic_uint *volatile)(v86 + 24), 0xFFFFFFFF) - 1;
        if (v87 < 0) {
          goto LABEL_148;
        }
        if (v87)
        {
          atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_or(&global_stats[2], 0);
          atomic_fetch_or(global_stats, 0);
          atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_or(&_pmem_total_blocks, 0);
          atomic_fetch_or(&pmem_bytes_allocated, 0);
        }
        else
        {
          unint64_t v81 = -*(void *)(v86 + 8);
          atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(&global_stats[2], 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(global_stats, v81);
          atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(&_pmem_total_blocks, 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(&pmem_bytes_allocated, v81);
          (*(void (**)(uint64_t))(v86 + 40))(v86);
          free((void *)v86);
        }
      }
      bzero((void *)(v83 - 528), 0x2C8uLL);
      int v78 = *((_DWORD *)a1 + 2);
    }
    ++v79;
    v80 += 712;
  }
  while (v79 < v78);
  if (v78 < 1)
  {
LABEL_56:
    int v90 = 0;
  }
  else
  {
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    int v90 = 0;
    do
    {
      uint64_t v91 = *a1;
      if (*a1 && a10 - *(double *)(v91 + v88 + 448) <= *((double *)a1 + 2))
      {
        memcpy((void *)(v91 + 712 * v90++), (const void *)(v91 + v88), 0x2C8uLL);
        int v78 = *((_DWORD *)a1 + 2);
      }
      ++v89;
      v88 += 712;
    }
    while (v89 < v78);
  }
  *((_DWORD *)a1 + 2) = v90;
  double v92 = 1.0 - *(double *)&__src[27].tv_sec;
  double v93 = malloc_type_calloc(v90, 1uLL, 0x3E5DA429uLL);
  float v94 = (_OWORD **)malloc_type_calloc(*((int *)a1 + 2) + 1, 8uLL, 0x2004093837F09uLL);
  *float v94 = (_OWORD *)__src;
  if (*((int *)a1 + 2) <= 0)
  {
    int v116 = 0;
    *(double *)&__src[27].uint64_t tv_usec = 1.0 - v92;
    int v117 = 1;
    goto LABEL_109;
  }
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  int v168 = 1;
  do
  {
    long long v183 = 0u;
    long long v184 = 0u;
    long long v181 = 0u;
    long long v182 = 0u;
    timeval v179 = (timeval)0;
    long long v180 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    unint64_t v98 = (double *)(*a1 + v95);
    memset(v176, 0, sizeof(v176));
    g_coords_diff(v98, (double *)&__src[0].tv_sec, (uint64_t)&v179);
    g_coords_diff((double *)(*a1 + v95 + 96), (double *)&__src[6].tv_sec, (uint64_t)v176);
    uint64_t v99 = *a1 + v95;
    int v100 = *((_DWORD *)a1 + 6);
    float v101 = *((double *)a1 + 4);
    int v102 = pose_est_inlier_sim(v99, (uint64_t)__src, v101);
    int v103 = pose_est_inlier_sim((uint64_t)__src, v99, v101);
    BOOL v104 = v103 + v102 > 1
        && *(_DWORD *)(*(void *)(v99 + 504) + 28)
         - (v103
          + v102)
         + *(_DWORD *)(*(void *)&__src[31].tv_usec + 28) < v100;
    char v105 = v104;
    v93[v96] = v105;
    if (!v104)
    {
      double v106 = *((double *)a1 + 5);
      double v107 = *((double *)a1 + 7);
      if (g_coords_angle_diff((double *)&v179.tv_sec, (double *)v176) < v107
        && (*(double *)&v184 - *(double *)&v178) * (*(double *)&v184 - *(double *)&v178)
         + (*((double *)&v183 + 1) - *((double *)&v177 + 1)) * (*((double *)&v183 + 1) - *((double *)&v177 + 1))
         + (*((double *)&v184 + 1) - *((double *)&v178 + 1)) * (*((double *)&v184 + 1) - *((double *)&v178 + 1)) < v106 * v106)
      {
        double v108 = (_OWORD *)(*a1 + v95);
        v185[0] = (_OWORD *)__src;
        v185[1] = v108;
        refine_poses(v185, 2, 0, 0, (uint64_t)&v179);
        double v109 = *((double *)a1 + 6);
        double v110 = *((double *)a1 + 8);
        if (g_coords_angle_diff((double *)&v179.tv_sec, (double *)v176) < v110
          && (*(double *)&v184 - *(double *)&v178) * (*(double *)&v184 - *(double *)&v178)
           + (*((double *)&v183 + 1) - *((double *)&v177 + 1)) * (*((double *)&v183 + 1) - *((double *)&v177 + 1))
           + (*((double *)&v184 + 1) - *((double *)&v178 + 1)) * (*((double *)&v184 + 1) - *((double *)&v178 + 1)) < v109 * v109)
        {
          double v92 = v92 * (1.0 - *(double *)(*a1 + v95 + 432));
          v93[v96] = 2;
          v94[v168++] = (_OWORD *)(*a1 + v95);
        }
      }
    }
    ++v96;
    uint64_t v97 = *((int *)a1 + 2);
    v95 += 712;
  }
  while (v96 < v97);
  *(double *)&__src[27].uint64_t tv_usec = 1.0 - v92;
  if ((int)v97 < 1)
  {
    int v116 = 0;
LABEL_108:
    int v117 = v168;
    goto LABEL_109;
  }
  uint64_t v111 = 0;
  char v112 = 0;
LABEL_74:
  uint64_t v113 = 712 * v111 + 440;
  do
  {
    if ((v93[v111] & 1) != 0 && *(double *)(*a1 + v113) > 1.0 - v92)
    {
      char v112 = 1;
      if (v97 - 1 == v111++)
      {
LABEL_82:
        refine_poses(v94, v168, &__src[12].tv_sec, (uint64_t)&__src[18], 0);
        int v115 = 1;
        goto LABEL_125;
      }
      goto LABEL_74;
    }
    ++v111;
    v113 += 712;
  }
  while (v97 != v111);
  if (v112) {
    goto LABEL_82;
  }
  int32x4_t v164 = v94;
  uint64_t v118 = 0;
  uint64_t v119 = 528;
  do
  {
    if (v93[v118])
    {
      uint64_t v121 = *a1;
      uint64_t v122 = *a1 + v119;
      free(*(void **)(v122 - 40));
      free(*(void **)(v122 - 64));
      uint64x2_t v123 = *(void ***)(v122 - 24);
      if (v123)
      {
        free(*v123);
        free(v123[1]);
        free(v123[2]);
        free(v123);
      }
      uint64_t v124 = *(void *)(v122 - 16);
      if (v124)
      {
        uint64_t v125 = *(void *)(v124 - 8 * *(void *)(v121 + v119) - 8);
        signed int v126 = atomic_fetch_add((atomic_uint *volatile)(v125 + 24), 0xFFFFFFFF) - 1;
        if (v126 < 0) {
          goto LABEL_148;
        }
        if (v126)
        {
          atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_or(&global_stats[2], 0);
          atomic_fetch_or(global_stats, 0);
          atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_or(&_pmem_total_blocks, 0);
          atomic_fetch_or(&pmem_bytes_allocated, 0);
        }
        else
        {
          unint64_t v120 = -*(void *)(v125 + 8);
          atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(&global_stats[2], 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(global_stats, v120);
          atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(&_pmem_total_blocks, 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(&pmem_bytes_allocated, v120);
          (*(void (**)(uint64_t))(v125 + 40))(v125);
          free((void *)v125);
        }
      }
      bzero((void *)(v122 - 528), 0x2C8uLL);
      LODWORD(v97) = *((_DWORD *)a1 + 2);
    }
    ++v118;
    v119 += 712;
  }
  while (v118 < (int)v97);
  if ((int)v97 < 1) {
    goto LABEL_107;
  }
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  int v129 = 0;
  do
  {
    if ((v93[v128] & 1) == 0 && *a1)
    {
      memcpy((void *)(*a1 + 712 * v129++), (const void *)(*a1 + v127), 0x2C8uLL);
      LODWORD(v97) = *((_DWORD *)a1 + 2);
    }
    ++v128;
    v127 += 712;
  }
  while (v128 < (int)v97);
  if ((int)v97 < 1)
  {
LABEL_107:
    int v116 = 0;
    float v94 = v164;
    goto LABEL_108;
  }
  uint64_t v130 = 0;
  int v116 = 0;
  float v94 = v164;
  int v117 = v168;
  do
  {
    if ((v93[v130] & 1) == 0)
    {
      v93[v116++] = v93[v130];
      LODWORD(v97) = *((_DWORD *)a1 + 2);
    }
    ++v130;
  }
  while (v130 < (int)v97);
LABEL_109:
  *((_DWORD *)a1 + 2) = v116;
  refine_poses(v94, v117, &__src[12].tv_sec, (uint64_t)&__src[18], 0);
  int v131 = *((_DWORD *)a1 + 2);
  if (v131 == *((_DWORD *)a1 + 3))
  {
    if (*(double *)&__src[27].tv_sec >= 0.1)
    {
      uint64_t v133 = *a1;
      free(*(void **)(*a1 + 488));
      free(*(void **)(v133 + 464));
      int16x8_t v134 = *(void ***)(v133 + 504);
      if (v134)
      {
        free(*v134);
        free(v134[1]);
        free(v134[2]);
        free(v134);
      }
      int16x8_t v135 = v94;
      uint64_t v136 = *(void *)(v133 + 512);
      if (v136)
      {
        uint64_t v137 = *(void *)(v136 - 8 * *(void *)(v133 + 528) - 8);
        signed int v138 = atomic_fetch_add((atomic_uint *volatile)(v137 + 24), 0xFFFFFFFF) - 1;
        if (v138 < 0) {
          goto LABEL_148;
        }
        if (v138)
        {
          atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_or(&global_stats[2], 0);
          atomic_fetch_or(global_stats, 0);
          atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_or(&_pmem_total_blocks, 0);
          atomic_fetch_or(&pmem_bytes_allocated, 0);
        }
        else
        {
          unint64_t v139 = -*(void *)(v137 + 8);
          atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(&global_stats[2], 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(global_stats, v139);
          atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(&_pmem_total_blocks, 0xFFFFFFFFFFFFFFFFLL);
          atomic_fetch_add(&pmem_bytes_allocated, v139);
          (*(void (**)(uint64_t))(v137 + 40))(v137);
          free((void *)v137);
        }
      }
      bzero((void *)v133, 0x2C8uLL);
      int v140 = *((_DWORD *)a1 + 2);
      uint64_t v141 = *a1;
      if (v140 >= 1)
      {
        if (v140 == 1)
        {
          int v140 = 1;
        }
        else
        {
          int v161 = 0;
          uint64_t v162 = 1;
          uint64_t v163 = 712;
          do
          {
            if (v141)
            {
              memcpy((void *)(v141 + 712 * v161++), (const void *)(v141 + v163), 0x2C8uLL);
              int v140 = *((_DWORD *)a1 + 2);
            }
            ++v162;
            uint64_t v141 = *a1;
            v163 += 712;
          }
          while (v162 < v140);
        }
      }
      memcpy((void *)(v141 + 712 * (v140 - 1)), __src, 0x2C8uLL);
      int v115 = 0;
      float v94 = v135;
    }
    else
    {
      int v115 = 1;
    }
  }
  else
  {
    uint64_t v132 = *a1;
    *((_DWORD *)a1 + 2) = v131 + 1;
    memcpy((void *)(v132 + 712 * v131), __src, 0x2C8uLL);
    int v115 = 0;
  }
LABEL_125:
  free(v93);
  free(v94);
  *a8 = 0.0;
  uint64_t v142 = *((unsigned int *)a1 + 2);
  uint64_t v143 = *a1;
  if ((int)v142 < 1)
  {
    int v145 = 0;
  }
  else
  {
    uint64_t v144 = 0;
    int v145 = 0;
    float v146 = (double *)(v143 + 440);
    float v147 = 0.0;
    do
    {
      if (*v146 > v147)
      {
        float v147 = *v146;
        *a8 = v147;
        int v145 = v144;
      }
      ++v144;
      v146 += 89;
    }
    while (v142 != v144);
  }
  int v148 = v145;
  g_coords_diff((double *)&__src[6].tv_sec, (double *)(v143 + 712 * v145 + 96), (uint64_t)&v169);
  g_coords_conv(v169.f64, (double *)(*a1 + 712 * v145 + 192), v169.f64);
  g_coords_diff(v169.f64, v166, (uint64_t)&v169);
  float32x4_t v149 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v171), v172);
  *a11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v169), v170);
  a11[1] = v149;
  a11[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v173), v174);
  if (a12)
  {
    uint64_t v150 = (_DWORD *)(*a1 + 712 * v145);
    *a12 = v150[72];
    a12[1] = v150[73];
    a12[2] = v150[74];
    a12[3] = v150[75];
    a12[4] = v150[76];
    a12[5] = v150[77];
    a12[6] = v150[78];
    a12[7] = v150[79];
    a12[8] = v150[80];
    a12[9] = v150[81];
    a12[10] = v150[82];
    a12[11] = v150[83];
    a12[12] = v150[84];
    a12[13] = v150[85];
    a12[14] = v150[86];
    a12[15] = v150[87];
    a12[16] = v150[88];
    a12[17] = v150[89];
    a12[18] = v150[90];
    a12[19] = v150[91];
    a12[20] = v150[92];
    a12[21] = v150[93];
    a12[22] = v150[94];
    a12[23] = v150[95];
    a12[24] = v150[96];
    a12[25] = v150[97];
    a12[26] = v150[98];
    a12[27] = v150[99];
    a12[28] = v150[100];
    a12[29] = v150[101];
    a12[30] = v150[102];
    a12[31] = v150[103];
    a12[32] = v150[104];
    a12[33] = v150[105];
    a12[34] = v150[106];
    a12[35] = v150[107];
  }
  v179.__darwin_time_t tv_sec = 0;
  *(void *)&v179.uint64_t tv_usec = 0;
  gettimeofday(&v179, 0);
  __darwin_time_t v151 = v179.tv_sec;
  uint64_t tv_usec = v179.tv_usec;
  printf("Verbose (toc) : ");
  printf("%s: fuse", "vl_pose_fuse");
  printf(": %f ms", (float)((float)(1000000 * (v151 - v167.tv_sec) - *(void *)&v167.tv_usec + tv_usec) / 1000.0));
  putchar(10);
  if (v115)
  {
    free(*(void **)&__src[30].tv_usec);
    free((void *)__src[29].tv_sec);
    uint64_t v153 = *(void ***)&__src[31].tv_usec;
    if (*(void *)&__src[31].tv_usec)
    {
      free(**(void ***)&__src[31].tv_usec);
      free(v153[1]);
      free(v153[2]);
      free(v153);
    }
    if (!__src[32].tv_sec) {
      return 1;
    }
    uint64_t v154 = *(void *)(__src[32].tv_sec - 8 * __src[33].tv_sec - 8);
    signed int v155 = atomic_fetch_add((atomic_uint *volatile)(v154 + 24), 0xFFFFFFFF) - 1;
    if (v155 >= 0)
    {
      if (v155)
      {
        atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_or(&global_stats[2], 0);
        atomic_fetch_or(global_stats, 0);
        atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_or(&_pmem_total_blocks, 0);
        atomic_fetch_or(&pmem_bytes_allocated, 0);
      }
      else
      {
        unint64_t v160 = -*(void *)(v154 + 8);
        atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(&global_stats[2], 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(global_stats, v160);
        atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(&_pmem_total_blocks, 0xFFFFFFFFFFFFFFFFLL);
        atomic_fetch_add(&pmem_bytes_allocated, v160);
        (*(void (**)(uint64_t))(v154 + 40))(v154);
        free((void *)v154);
      }
      return 1;
    }
LABEL_148:
    __assert_rtn("pmem_free", "pmem.c", 302, "count >= 0 && \"Negative count! Something is broken, double free? Memory corruption?\"");
  }
  uint64_t v156 = *((int *)a1 + 2) - 1;
  uint64_t v157 = *a1 + 712 * v156;
  double v158 = *(double *)(v157 + 440);
  if (v158 >= *((double *)a1 + 9)) {
    double v158 = *((double *)a1 + 9);
  }
  *(double *)(v157 + 440) = v158;
  return v148 != v156;
}

void vl_pose_fuse_free(int *a1)
{
  if (a1)
  {
    if (a1[2] >= 1)
    {
      uint64_t v2 = 0;
      uint64_t v3 = 528;
      do
      {
        unint64_t v5 = *(char **)a1;
        uint64_t v6 = *(void *)a1 + v3;
        free(*(void **)(v6 - 40));
        free(*(void **)(v6 - 64));
        uint64_t v7 = *(void ***)(v6 - 24);
        if (v7)
        {
          free(*v7);
          free(v7[1]);
          free(v7[2]);
          free(v7);
        }
        uint64_t v8 = *(void *)(v6 - 16);
        if (v8)
        {
          uint64_t v9 = *(void *)(v8 - 8 * *(void *)&v5[v3] - 8);
          signed int v10 = atomic_fetch_add((atomic_uint *volatile)(v9 + 24), 0xFFFFFFFF) - 1;
          if (v10 < 0) {
            __assert_rtn("pmem_free", "pmem.c", 302, "count >= 0 && \"Negative count! Something is broken, double free? Memory corruption?\"");
          }
          if (v10)
          {
            atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
            atomic_fetch_or(&global_stats[2], 0);
            atomic_fetch_or(global_stats, 0);
            atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
            atomic_fetch_or(&_pmem_total_blocks, 0);
            atomic_fetch_or(&pmem_bytes_allocated, 0);
          }
          else
          {
            unint64_t v4 = -*(void *)(v9 + 8);
            atomic_fetch_add(&global_stats[1], 0xFFFFFFFFFFFFFFFFLL);
            atomic_fetch_add(&global_stats[2], 0xFFFFFFFFFFFFFFFFLL);
            atomic_fetch_add(global_stats, v4);
            atomic_fetch_add(&pmem_total_refs, 0xFFFFFFFFFFFFFFFFLL);
            atomic_fetch_add(&_pmem_total_blocks, 0xFFFFFFFFFFFFFFFFLL);
            atomic_fetch_add(&pmem_bytes_allocated, v4);
            (*(void (**)(uint64_t))(v9 + 40))(v9);
            free((void *)v9);
          }
        }
        bzero((void *)(v6 - 528), 0x2C8uLL);
        ++v2;
        v3 += 712;
      }
      while (v2 < a1[2]);
    }
    free(*(void **)a1);
    free(a1);
  }
}

void refine_poses(_OWORD **a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = 3 * a2;
  size_t v11 = 96 * a2;
  uint64_t v12 = (double *)malloc_type_malloc(v11, 0x1000040565EDBD2uLL);
  uint64_t v13 = malloc_type_malloc(v11, 0x1000040565EDBD2uLL);
  size_t v14 = 8 * v10;
  size_t v15 = malloc_type_malloc(8 * v10, 0x1020040FBFA920DuLL);
  unint64_t v16 = malloc_type_malloc(v14, 0x1020040FBFA920DuLL);
  uint64_t v17 = v16;
  if (a2 >= 1)
  {
    size_t v18 = v12;
    size_t v19 = v13;
    unint64_t v20 = v15;
    size_t v21 = v16;
    uint64_t v22 = a2;
    do
    {
      float64x2_t v23 = *a1;
      long long v24 = (*a1)[1];
      *(_OWORD *)size_t v18 = **a1;
      *((_OWORD *)v18 + 1) = v24;
      long long v25 = v23[2];
      long long v26 = v23[3];
      long long v27 = v23[5];
      *((_OWORD *)v18 + 4) = v23[4];
      *((_OWORD *)v18 + 5) = v27;
      *((_OWORD *)v18 + 2) = v25;
      *((_OWORD *)v18 + 3) = v26;
      float64x2_t v28 = *a1;
      long long v29 = (*a1)[7];
      *size_t v19 = (*a1)[6];
      v19[1] = v29;
      long long v30 = v28[8];
      long long v31 = v28[9];
      long long v32 = v28[11];
      v19[4] = v28[10];
      v19[5] = v32;
      v19[2] = v30;
      v19[3] = v31;
      long long v33 = (*a1)[30];
      v20[2] = *((void *)*a1 + 62);
      *(_OWORD *)unint64_t v20 = v33;
      v20 += 3;
      uint64_t v34 = *a1++;
      long long v35 = *(_OWORD *)((char *)v34 + 456);
      v21[2] = *((void *)v34 + 59);
      *(_OWORD *)size_t v21 = v35;
      v21 += 3;
      v19 += 6;
      v18 += 12;
      --v22;
    }
    while (v22);
  }
  vl_pose_refine_multi(v12, (double *)v13, (uint64_t)v15, (uint64_t)v16, a2, 5, (double *)v13, a4, 0.1, 0.0026667, 0.05, 0.00049751);
  if (a3)
  {
    long long v36 = *((_OWORD *)v13 + 1);
    *a3 = *(_OWORD *)v13;
    a3[1] = v36;
    long long v37 = *((_OWORD *)v13 + 2);
    long long v38 = *((_OWORD *)v13 + 3);
    long long v39 = *((_OWORD *)v13 + 5);
    a3[4] = *((_OWORD *)v13 + 4);
    a3[5] = v39;
    a3[2] = v37;
    a3[3] = v38;
  }
  if (a5) {
    g_coords_diff((double *)v13 + 12, (double *)v13, a5);
  }
  free(v12);
  free(v13);
  free(v15);
  free(v17);
}

uint64_t pose_est_inlier_sim(uint64_t a1, uint64_t a2, float a3)
{
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  g_coords_diff((double *)a1, (double *)a2, (uint64_t)&v33);
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 504) + 28);
  if ((int)v6 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  float v8 = *((double *)&v37 + 1);
  float v9 = *(double *)&v38;
  float v10 = *((double *)&v38 + 1);
  float v30 = v10;
  float v31 = v9;
  float v11 = *(double *)&v33;
  float v12 = *((double *)&v34 + 1);
  float v13 = *(double *)&v36;
  float v28 = v13;
  float v29 = v12;
  float v14 = *((double *)&v33 + 1);
  float v15 = *(double *)&v35;
  float v27 = v15;
  float v16 = *((double *)&v36 + 1);
  float v17 = *(double *)&v34;
  float v18 = *((double *)&v35 + 1);
  float v19 = *(double *)&v37;
  unint64_t v20 = (float *)(*(void *)(a1 + 464) + 8);
  do
  {
    float v21 = *(v20 - 2);
    float v22 = *(v20 - 1);
    float v23 = *v20;
    float v24 = (float)((float)((float)(v22 * v14) + (float)(v11 * v21)) + (float)(v17 * *v20)) + v8;
    if (v24 > 0.0)
    {
      v32[0] = (float)((float)((float)((float)(v22 * v27) + (float)(v29 * v21)) + (float)(v18 * v23)) + v31) / v24;
      v32[1] = (float)((float)((float)((float)(v22 * v16) + (float)(v28 * v21)) + (float)(v19 * v23)) + v30) / v24;
      rkd_nn_app(*(void *)(a2 + 504), v32, 0, 0, 0x7FFFFFFF, a3);
      if (v25 < a3) {
        uint64_t v7 = (v7 + 1);
      }
    }
    v20 += 3;
    --v6;
  }
  while (v6);
  return v7;
}

void vl_hs_model_load(void *a1, const char *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v4 = malloc_type_calloc(1uLL, 0x200uLL, 0x1080040DA4BCE92uLL);
  model_0 = (uint64_t)v4;
  _DWORD *v4 = a1;
  vl_hs_model_get_par_version(a1, (uint64_t)__src);
  memcpy(v4 + 2, __src, 0x1D0uLL);
  uint64_t v5 = *(void *)(model_0 + 8);
  uint64_t v6 = *(void *)(model_0 + 16);
  uint64_t v7 = *(void *)(model_0 + 24);
  uint64_t v8 = *(void *)(model_0 + 32);
  free(*(void **)(model_0 + 472));
  v5 *= 4;
  float v9 = malloc_type_malloc(v5 * v6 * v7 * v8 + 4095, 0x994B4668uLL);
  uint64_t v10 = model_0;
  *(void *)(model_0 + 472) = v9;
  *(void *)(v10 + 480) = (char *)v9 + (-(int)v9 & 0xFFFLL);
  free(*(void **)(v10 + 488));
  float v11 = malloc_type_malloc(v5 + 4095, 0x48C00740uLL);
  uint64_t v12 = model_0;
  *(void *)(model_0 + 48_Block_object_dispose(&STACK[0x220], 8) = v11;
  *(void *)(v12 + 496) = (char *)v11 + (-(int)v11 & 0xFFFLL);
  sprintf(v16, "espressos/hs_v%d.mlmodelc", v4[14]);
  if (a2) {
    float v13 = a2;
  }
  else {
    float v13 = "com.apple.3dv.vl";
  }
  vl_get_model_path(&v15, v13, v16);
  operator new();
}

void sub_21BB339D0(_Unwind_Exception *a1)
{
  MEMORY[0x21D498F90](v1, 0x1080C40AA79BA9DLL);
  _Unwind_Resume(a1);
}

void vl_hs_model_free()
{
  uint64_t v0 = model_0;
  if (model_0)
  {
    uint64_t v1 = *(void *)(model_0 + 504);
    if (v1)
    {
      espresso_plan_build_clean();
      espresso_plan_destroy();
      espresso_context_destroy();
      MEMORY[0x21D498F90](v1, 0x1080C40AA79BA9DLL);
      *(void *)(v0 + 504) = 0;
      uint64_t v0 = model_0;
    }
    free(*(void **)(v0 + 472));
    free(*(void **)(model_0 + 488));
    free((void *)model_0);
    model_0 = 0;
  }
}

uint64_t vl_hs_forward()
{
  uint64_t result = espresso_plan_execute_sync();
  if ((result & 0x80000000) != 0)
  {
    uint64_t v1 = (FILE *)*MEMORY[0x263EF8348];
    status_string = (const char *)espresso_get_status_string();
    fprintf(v1, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 155, status_string);
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v4 = espresso_get_status_string();
    MEMORY[0x21D498F60](exception, v4);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_21BB33B40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *vl_hs_esp_net_t::vl_hs_esp_net_t(uint64_t *a1)
{
  *a1 = espresso_create_context_auto();
  a1[1] = espresso_create_plan();
  espresso_get_default_storage_type();
  if ((espresso_plan_add_network() & 0x80000000) != 0)
  {
    uint64_t v3 = (FILE *)*MEMORY[0x263EF8348];
    status_string = (const char *)espresso_get_status_string();
    fprintf(v3, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 68, status_string);
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v6 = espresso_get_status_string();
    MEMORY[0x21D498F60](exception, v6);
    goto LABEL_14;
  }
  if ((espresso_network_change_blob_shape() & 0x80000000) != 0)
  {
    uint64_t v7 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v8 = (const char *)espresso_get_status_string();
    fprintf(v7, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 74, v8);
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v9 = espresso_get_status_string();
    MEMORY[0x21D498F60](exception, v9);
    goto LABEL_14;
  }
  if ((espresso_network_change_blob_shape() & 0x80000000) != 0)
  {
    uint64_t v10 = (FILE *)*MEMORY[0x263EF8348];
    float v11 = (const char *)espresso_get_status_string();
    fprintf(v10, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 75, v11);
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v12 = espresso_get_status_string();
    MEMORY[0x21D498F60](exception, v12);
    goto LABEL_14;
  }
  if ((espresso_plan_build() & 0x80000000) != 0)
  {
    float v13 = (FILE *)*MEMORY[0x263EF8348];
    float v14 = (const char *)espresso_get_status_string();
    fprintf(v13, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 77, v14);
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v15 = espresso_get_status_string();
    MEMORY[0x21D498F60](exception, v15);
LABEL_14:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if ((espresso_buffer_pack_tensor_shape() & 0x80000000) != 0)
  {
    float v16 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v17 = (const char *)espresso_get_status_string();
    fprintf(v16, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 84, v17);
    float v18 = __cxa_allocate_exception(0x10uLL);
    uint64_t v19 = espresso_get_status_string();
    MEMORY[0x21D498F60](v18, v19);
    __cxa_throw(v18, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if ((espresso_buffer_pack_tensor_shape() & 0x80000000) != 0)
  {
    unint64_t v20 = (FILE *)*MEMORY[0x263EF8348];
    float v21 = (const char *)espresso_get_status_string();
    fprintf(v20, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 85, v21);
    float v22 = __cxa_allocate_exception(0x10uLL);
    uint64_t v23 = espresso_get_status_string();
    MEMORY[0x21D498F60](v22, v23);
    __cxa_throw(v22, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if ((espresso_network_bind_buffer() & 0x80000000) != 0)
  {
    float v24 = (FILE *)*MEMORY[0x263EF8348];
    float v25 = (const char *)espresso_get_status_string();
    fprintf(v24, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 88, v25);
    long long v26 = __cxa_allocate_exception(0x10uLL);
    uint64_t v27 = espresso_get_status_string();
    MEMORY[0x21D498F60](v26, v27);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if ((espresso_network_bind_buffer() & 0x80000000) != 0)
  {
    float v28 = (FILE *)*MEMORY[0x263EF8348];
    float v29 = (const char *)espresso_get_status_string();
    fprintf(v28, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 90, v29);
    float v30 = __cxa_allocate_exception(0x10uLL);
    uint64_t v31 = espresso_get_status_string();
    MEMORY[0x21D498F60](v30, v31);
    __cxa_throw(v30, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_21BB340C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB340D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB340EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB34100(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB34114(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB34128(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB3413C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BB34150(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t vl_retrieval(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = *((int *)a3 + 114);
  uint64_t v81 = *((int *)a3 + 115);
  int64_t v82 = *((unsigned int *)a3 + 114);
  uint64_t v9 = *((unsigned int *)a3 + 115);
  uint64_t v80 = *a3;
  uint64_t v10 = a3[59];
  uint64_t v11 = *(void *)(a2 + 32);
  int64_t v83 = 0;
  uint16x8_t v84 = 0;
  int64_t v85 = 0;
  if (*(_DWORD *)(a1 + 212))
  {
    *(void *)(a1 + 120) -= mach_absolute_time();
    if (*(void *)(a2 + 24) == v81) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a1 + 32));
  clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v7 + 16));
  clock_gettime(_CLOCK_MONOTONIC, (timespec *)v7);
  if (*(void *)(a2 + 24) != v81)
  {
LABEL_3:
    printf("%sError : ", (const char *)&unk_21BB738AE);
    printf("global_desc size mismatches %llu vs %d", *(void *)(a2 + 24), v9);
    putchar(10);
  }
LABEL_4:
  if ((int)v82 <= 0)
  {
    float v25 = malloc_type_malloc(0, 0x38CCE670uLL);
    qsort(v25, 0, 0xCuLL, (int (__cdecl *)(const void *, const void *))cmp_float_asc_0);
    free(v25);
    int64_t v26 = 0;
    float v13 = 0;
    uint64_t v27 = 0;
    size_t v28 = 4 * v8;
    int v29 = v80;
  }
  else
  {
    uint64_t v78 = a4;
    uint64_t v79 = v7;
    unsigned int v77 = v8;
    if ((int)v9 > 0)
    {
      uint64_t v12 = 0;
      float v13 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        if (v81 >= 8)
        {
          uint64_t v17 = 0;
          float v16 = 0.0;
          do
          {
            float32x4_t v18 = vsubq_f32(*(float32x4_t *)(v11 + v17), *(float32x4_t *)(v10 + v17));
            float32x4_t v19 = vsubq_f32(*(float32x4_t *)(v11 + v17 + 16), *(float32x4_t *)(v10 + v17 + 16));
            float32x4_t v20 = vmulq_f32(v18, v18);
            float32x4_t v21 = vmulq_f32(v19, v19);
            float v16 = (float)((float)((float)((float)((float)((float)((float)(v16 + v20.f32[0]) + v20.f32[1]) + v20.f32[2])
                                                + v20.f32[3])
                                        + v21.f32[0])
                                + v21.f32[1])
                        + v21.f32[2])
                + v21.f32[3];
            v17 += 32;
          }
          while (((4 * v9) & 0x3FFFFFFE0) != v17);
          uint64_t v15 = v9 & 0xFFFFFFF8;
          if (v15 == v9) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v15 = 0;
          float v16 = 0.0;
        }
        do
        {
          float v22 = *(float *)(v11 + 4 * v15) - *(float *)(v10 + 4 * v15);
          float v16 = v16 + (float)(v22 * v22);
          ++v15;
        }
        while (v9 != v15);
LABEL_14:
        uint64_t v23 = v14 + 1;
        if (v14 >= v12)
        {
          uint64_t v24 = 2 * v12;
          if (!v12) {
            uint64_t v24 = 64;
          }
          if (v24 <= v14) {
            uint64_t v12 = v14 + 1;
          }
          else {
            uint64_t v12 = v24;
          }
          float v13 = malloc_type_realloc(v13, 4 * v12, 0xEF0A7654uLL);
        }
        *((float *)v13 + v14) = v16;
        v10 += 4 * v81;
        ++v14;
        if (v23 == v82) {
          goto LABEL_33;
        }
      }
    }
    uint64_t v30 = 0;
    float v13 = 0;
    uint64_t v31 = 0;
    do
    {
      uint64_t v32 = v31 + 1;
      if (v31 >= v30)
      {
        uint64_t v33 = 2 * v30;
        if (!v30) {
          uint64_t v33 = 64;
        }
        if (v33 <= v31) {
          uint64_t v30 = v31 + 1;
        }
        else {
          uint64_t v30 = v33;
        }
        float v13 = malloc_type_realloc(v13, 4 * v30, 0xEF0A7654uLL);
      }
      *((_DWORD *)v13 + v31++) = 0;
    }
    while (v82 != v32);
LABEL_33:
    _da_sort_indexed((char *)v13, v82, &v84, &v83, &v85, 4uLL, (int (__cdecl *)(const void *, const void *))cmp_float_asc_0);
    size_t v28 = 4 * v82;
    if (v77 <= 0x40) {
      size_t v34 = 256;
    }
    else {
      size_t v34 = 4 * v82;
    }
    uint64_t v27 = malloc_type_realloc(0, v34, 0xCC2CD23DuLL);
    int64_t v26 = v83;
    uint64_t v7 = v79;
    int v29 = v80;
    a4 = v78;
  }
  bzero(v27, v28);
  uint64_t v35 = *(int *)(a4 + 4);
  if (v26 < v35) {
    uint64_t v35 = v26;
  }
  if (v35 >= 1)
  {
    int64_t v36 = 0;
    long long v37 = v84;
    do
    {
      *((_DWORD *)v27 + v37[v36++]) = 1;
      int64_t v38 = *(int *)(a4 + 4);
      if (v26 < v38) {
        int64_t v38 = v26;
      }
    }
    while (v38 > v36);
  }
  uint64_t v39 = 0;
  a3[61] = 0;
  uint64_t v40 = a3[63];
  if (v29 > v40)
  {
    uint64_t v41 = 2 * v40;
    if (!v40) {
      uint64_t v41 = 64;
    }
    if (v41 <= v29) {
      uint64_t v42 = v29;
    }
    else {
      uint64_t v42 = v41;
    }
    if (v42)
    {
      a3[62] = (uint64_t)malloc_type_realloc((void *)a3[62], 4 * v42, 0xAEC2B596uLL);
      uint64_t v39 = a3[61];
    }
    else
    {
      uint64_t v39 = 0;
    }
    a3[63] = v42;
  }
  bzero((void *)(a3[62] + 4 * v39), 4 * v29);
  uint64_t v43 = a3[61];
  uint64_t v44 = v43 + v29;
  a3[61] = v44;
  if (v29 >= 1)
  {
    uint64_t v45 = 0;
    int v46 = 0;
    uint64_t v47 = a3[52];
    do
    {
      int v48 = *(unsigned __int16 *)(v47 + 2 * v45);
      if (*(_WORD *)(v47 + 2 * v45))
      {
        float64x2_t v49 = (unsigned __int16 *)(a3[55] + 2 * v46);
        int v50 = *(unsigned __int16 *)(v47 + 2 * v45);
        do
        {
          unsigned int v51 = *v49++;
          if (*((_DWORD *)v27 + v51)) {
            *(_DWORD *)(a3[62] + 4 * v45) = 1;
          }
          --v50;
        }
        while (v50);
        v46 += v48;
      }
      ++v45;
    }
    while (v45 != v29);
  }
  if (v44 < 1)
  {
    int v54 = 0;
    goto LABEL_72;
  }
  float64x2_t v52 = (int32x4_t *)a3[62];
  if ((unint64_t)v44 < 8)
  {
    uint64_t v53 = 0;
    int v54 = 0;
LABEL_70:
    uint64_t v59 = v43 + v29 - v53;
    __float2 v60 = &v52->i32[v53];
    do
    {
      int v61 = *v60++;
      v54 += v61;
      --v59;
    }
    while (v59);
    goto LABEL_72;
  }
  uint64_t v53 = v44 & 0x7FFFFFFFFFFFFFF8;
  float64x2_t v55 = v52 + 1;
  int32x4_t v56 = 0uLL;
  unint64_t v57 = v44 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v58 = 0uLL;
  do
  {
    int32x4_t v56 = vaddq_s32(v55[-1], v56);
    int32x4_t v58 = vaddq_s32(*v55, v58);
    v55 += 2;
    v57 -= 8;
  }
  while (v57);
  int v54 = vaddvq_s32(vaddq_s32(v58, v56));
  if (v44 != v53) {
    goto LABEL_70;
  }
LABEL_72:
  printf("Verbose : ");
  printf("%d/%d tracks retained", v54, v29);
  putchar(10);
  free(v13);
  free(v84);
  free(v27);
  if (!*(_DWORD *)(v7 + 212))
  {
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v7 + 64));
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v7 + 80));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v7 + 48));
    uint64_t v70 = *(void *)(v7 + 56) - *(void *)(v7 + 8) + 1000000000 * (*(void *)(v7 + 48) - *(void *)v7);
    uint64_t v71 = *(void *)(v7 + 72) - *(void *)(v7 + 24) + 1000000000 * (*(void *)(v7 + 64) - *(void *)(v7 + 16));
    uint64_t v72 = *(void *)(v7 + 88) - *(void *)(v7 + 40) + 1000000000 * (*(void *)(v7 + 80) - *(void *)(v7 + 32));
    uint64_t v73 = *(void *)(v7 + 128);
    uint64_t v74 = v70 + *(void *)(v7 + 120);
    *(void *)(v7 + 96) = v70;
    *(void *)(v7 + 104) = v71;
    uint64_t v75 = v71 + v73;
    *(void *)(v7 + 112) = v72;
    *(void *)(v7 + 120) = v74;
    uint64_t v76 = v72 + *(void *)(v7 + 136);
    *(void *)(v7 + 12_Block_object_dispose(&STACK[0x220], 8) = v75;
    *(void *)(v7 + 136) = v76;
    ++*(_DWORD *)(v7 + 144);
    if (*(_DWORD *)(v7 + 212)) {
      goto LABEL_74;
    }
    return log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v62, v63, v64, v65, v66, v67, v68, (char)&str_4_1);
  }
  *(void *)(v7 + 120) += mach_absolute_time();
  if (!*(_DWORD *)(v7 + 212)) {
    return log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v62, v63, v64, v65, v66, v67, v68, (char)&str_4_1);
  }
LABEL_74:
  printf("Verbose : ");
  printf("Total time for %40s : %7.3f ms", (const char *)(v7 + 148), (double)*(uint64_t *)(v7 + 120) * 0.000001);
  return putchar(10);
}

uint64_t cmp_float_asc_0(float *a1, float *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 == *a2) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t vl_pose_p3p(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6, uint64_t a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  uint64_t v279 = *MEMORY[0x263EF8340];
  float v11 = *a1;
  float v12 = a1[1];
  float v13 = *a2;
  float v14 = a2[1];
  float v15 = *a3;
  float v16 = a3[1];
  if (fabsf((float)((float)(*a2 * (float)(v16 - v12)) + (float)(*a1 * (float)(v14 - v16)))+ (float)(*a3 * (float)(v12 - v14))) < 0.001)return 0; {
  float v17 = *a4;
  }
  float v18 = a4[1];
  float v19 = a4[2];
  float v20 = a5[1];
  float v21 = a5[2];
  float v22 = a6[1];
  float v23 = a6[2];
  float v24 = *a4 - *a6;
  float v25 = *a4 - *a5;
  float v26 = fabsf((float)((float)(v19 - v23) * v25) - (float)(v24 * (float)(v19 - v21)));
  float v27 = fabsf((float)(v24 * (float)(v18 - v20)) - (float)((float)(v18 - v22) * v25));
  BOOL v28 = fabsf((float)((float)(v18 - v22) * (float)(v19 - v21)) - (float)((float)(v19 - v23) * (float)(v18 - v20))) < 0.001
     && v26 < 0.001;
  if (v28 && v27 < 0.001) {
    return 0;
  }
  float v273 = *a5;
  float v275 = a4[1];
  float v247 = a6[1];
  float v249 = *a6;
  float v251 = a5[2];
  float v253 = a5[1];
  float v245 = a6[2];
  float v31 = (float)((float)((float)(v24 * v24) + 0.0) + (float)((float)(v18 - v22) * (float)(v18 - v22)))
      + (float)((float)(v19 - v23) * (float)(v19 - v23));
  float v32 = (float)((float)((float)(v25 * v25) + 0.0) + (float)((float)(v18 - v20) * (float)(v18 - v20)))
      + (float)((float)(v19 - v21) * (float)(v19 - v21));
  float v33 = (float)((float)((float)((float)(*a5 - *a6) * (float)(*a5 - *a6)) + 0.0)
              + (float)((float)(v20 - v22) * (float)(v20 - v22)))
      + (float)((float)(v21 - v23) * (float)(v21 - v23));
  float v34 = sqrtf((float)((float)(v12 * v12) + (float)(v11 * v11)) + 1.0);
  float v35 = v11 / v34;
  float v36 = v12 / v34;
  float v37 = 1.0 / v34;
  float v38 = sqrtf((float)((float)(v14 * v14) + (float)(v13 * v13)) + 1.0);
  float v39 = v13 / v38;
  float v40 = v14 / v38;
  float v41 = 1.0 / v38;
  float v42 = sqrtf((float)((float)(v16 * v16) + (float)(v15 * v15)) + 1.0);
  float v43 = v15 / v42;
  float v44 = v16 / v42;
  float v45 = 1.0 / v42;
  float v46 = (float)((float)(v39 * v43) + 0.0) + (float)(v40 * v44);
  float v259 = v40;
  float v260 = v39;
  float v47 = (float)((float)((float)(v35 * v39) + 0.0) + (float)(v36 * v40)) + (float)(v37 * v41);
  float v262 = v36;
  float v263 = v35;
  float v256 = v44;
  float v257 = v43;
  float v261 = v37;
  float v48 = (float)((float)((float)(v35 * v43) + 0.0) + (float)(v36 * v44)) + (float)(v37 * v45);
  float v258 = v41;
  float v255 = v45;
  float v49 = v46 + (float)(v41 * v45);
  float v50 = v49 * v48;
  float v51 = v32 + (float)(v33 - v31);
  float v52 = (float)(v33 - v31) - v32;
  float v266 = v48;
  float v53 = v48 * v48;
  float v54 = (float)((float)(v32 * (float)(v31 * 4.0)) * (float)(v49 * v49)) - (float)(v52 * v52);
  float v55 = (float)(v32 * 4.0) * (float)(v31 - v32);
  float v56 = (float)(v33 - v31) * 4.0;
  float v57 = (float)((float)((float)((float)(v47 * (float)(v50 * (float)((float)(v32 * 8.0) * (float)(v33 + v31))))
                              + (float)((float)((float)(v32 * 4.0) * (float)(v33 - v32)) * v53))
                      + (float)(v55 * (float)(v49 * v49)))
              + (float)((float)(v52 * -2.0) * v51))
      + (float)((float)-(float)(v56 * (float)(v33 - v31)) * (float)(v47 * v47));
  float v58 = (float)(v47 * (float)(v49 * (float)(v49 * (float)(v32 * (float)(v31 * -8.0)))))
      + (float)((float)((float)(v32 * -4.0) * (float)((float)(v33 + v31) - v32)) * v50);
  float v59 = v32 * (float)(v33 * 4.0);
  float v60 = (float)((float)((float)(v53 * (float)(v32 * (float)(v33 * -8.0))) * v47) - (float)(v55 * v50))
      - (float)(v59 * v50);
  *(float *)a11.i32 = (float)(v59 * v53) - (float)(v51 * v51);
  float v61 = v58 + (float)((float)((float)(v33 - v31) * (float)(v52 * 4.0)) * v47);
  *(float *)a10.i32 = v60 + (float)((float)(v56 * v51) * v47);
  float v264 = v47;
  float v265 = v32;
  if (fabsf(v54) >= 0.0000001)
  {
    float v271 = *a4;
    float v62 = (float)(1.0 / v54) * v61;
    float v63 = (float)(1.0 / v54) * v57;
    float v64 = (float)(1.0 / v54) * *(float *)a10.i32;
    float v65 = (float)(*(float *)a11.i32 * (float)(1.0 / v54)) * 4.0;
    *(float *)a11.i32 = (float)((float)(v65 * v63)
                              + (float)((float)-(float)((float)(*(float *)a11.i32 * (float)(1.0 / v54)) * v62) * v62))
                      - (float)(v64 * v64);
    *(float *)a10.i32 = -(float)(v65 - (float)(v64 * v62));
    if (solve_cubic(v278, 1.0, -v63, a10, a11))
    {
      float v66 = (float)((float)((float)(v62 * v62) * 0.25) - v63) + v278[0];
      if (v66 > 0.0)
      {
        float v67 = sqrtf(v66);
        float v47 = v264;
        if (fabsf(v67) >= 0.0000001)
        {
          float v68 = (float)((float)((float)(v62 * v278[0]) * 0.5) - v64) / (float)(v67 + v67);
          float v69 = (float)(v62 * 0.5) - v67;
          float v70 = sqrtf((float)((float)((float)(v278[0] * 0.5) - v68) * -4.0) + (float)(v69 * v69));
          v277[0] = (float)(v70 - v69) * 0.5;
          v277[1] = (float)((float)-v69 - v70) * 0.5;
          float v71 = (float)(v62 * 0.5) + v67;
          float v72 = sqrtf((float)((float)((float)(v278[0] * 0.5) + v68) * -4.0) + (float)(v71 * v71));
          v277[2] = (float)(v72 - v71) * 0.5;
          v277[3] = (float)((float)-v71 - v72) * 0.5;
          LODWORD(v73) = 4;
          float v74 = v265;
          float v17 = v271;
          goto LABEL_15;
        }
      }
    }
    return 0;
  }
  float v74 = v32;
  LODWORD(v73) = solve_cubic(v277, v61, v57, a10, a11);
  if ((int)v73 < 1) {
    return 0;
  }
LABEL_15:
  uint64_t result = 0;
  float v270 = (float)(v74 + v31) - v33;
  float v272 = (float)(v31 - v33) - v74;
  float v268 = v49 * (float)(v74 + v74);
  float v269 = v47 * (float)((float)(v33 - v31) + (float)(v33 - v31));
  float v76 = -2.0;
  float v267 = v266 * (float)(v74 * -2.0);
  float v77 = (float)((float)(v17 + v273) + v249) / 3.0;
  float v78 = (float)((float)(v275 + v253) + v247) / 3.0;
  float v79 = (float)((float)(v19 + v251) + v245) / 3.0;
  float v80 = v17 - v77;
  float v81 = v19 - v79;
  float v82 = v273 - v77;
  float v83 = v253 - v78;
  float v84 = v251 - v79;
  float v252 = v78;
  float v254 = v77;
  float v240 = v249 - v77;
  float v241 = v84;
  float v85 = v247 - v78;
  float v248 = v80;
  float v250 = v79;
  float v238 = v245 - v79;
  float v239 = v85;
  float v86 = (float)((float)(v275 - v78) * v84) - (float)((float)(v19 - v79) * v83);
  float v244 = v81;
  float v246 = v275 - v78;
  float v87 = (float)(v81 * v82) - (float)(v80 * v84);
  float v242 = v83;
  float v243 = v82;
  float v88 = (float)(v80 * v83) - (float)((float)(v275 - v78) * v82);
  float v89 = 1.0;
  float v90 = 1.0 / sqrtf((float)((float)((float)(v86 * v86) + 0.0) + (float)(v87 * v87)) + (float)(v88 * v88));
  float v236 = v87 * v90;
  float v237 = v86 * v90;
  float v234 = -(float)(v88 * v90);
  float v235 = v88 * v90;
  float v232 = -(float)(v87 * v90);
  float v233 = -(float)(v86 * v90);
  uint64_t v73 = v73;
  uint64_t v91 = v277;
  do
  {
    float v92 = *v91;
    float v93 = sqrtf(v74 / (float)((float)(v89 + (float)(v92 * v92)) + (float)((float)(*v91 * v76) * v47)));
    if (v93 > 0.0)
    {
      float v94 = v92 * v93;
      if ((float)(v92 * v93) > 0.0)
      {
        float v95 = (float)((float)((float)(v272 + (float)((float)(v270 * v92) * v92)) + (float)(v269 * v92))
                    / (float)(v267 + (float)(v268 * v92)))
            * v93;
        if (v95 > 0.0)
        {
          float v96 = v263 * v93;
          float v97 = v262 * v93;
          float v98 = v261 * v93;
          float v99 = v260 * v94;
          float v100 = v259 * v94;
          float v101 = v258 * v94;
          float v276 = v257 * v95;
          float v102 = v256 * v95;
          float v103 = v255 * v95;
          float v104 = (float)((float)(v256 * v95) + (float)(v97 + v100)) / 3.0;
          float v105 = (float)((float)(v255 * v95) + (float)(v98 + v101)) / 3.0;
          float v274 = (float)((float)(v257 * v95) + (float)(v96 + v99)) / 3.0;
          float v106 = v96 - v274;
          float v107 = v97 - v104;
          float v108 = v98 - v105;
          float v109 = v99 - v274;
          float v110 = v100 - v104;
          float v111 = v101 - v105;
          float v112 = (float)((float)(v97 - v104) * (float)(v101 - v105))
               - (float)((float)(v98 - v105) * (float)(v100 - v104));
          float v113 = (float)(v108 * (float)(v99 - v274)) - (float)((float)(v96 - v274) * (float)(v101 - v105));
          float v114 = (float)((float)(v96 - v274) * (float)(v100 - v104))
               - (float)((float)(v97 - v104) * (float)(v99 - v274));
          float v115 = v89 / sqrtf((float)((float)((float)(v112 * v112) + 0.0) + (float)(v113 * v113)) + (float)(v114 * v114));
          float v116 = v112 * v115;
          float v117 = v113 * v115;
          float v118 = v114 * v115;
          float v119 = (float)((float)(v113 * v115) * v234) + (float)(v236 * (float)(v114 * v115));
          float v120 = (float)((float)(v114 * v115) * v233) + (float)(v235 * v116);
          float v121 = (float)(v116 * v232) + (float)(v237 * v117);
          float v122 = sqrtf((float)((float)((float)(v119 * v119) + 0.0) + (float)(v120 * v120)) + (float)(v121 * v121));
          float v123 = v119 * (float)(v89 / v122);
          float v124 = v120 * (float)(v89 / v122);
          float v125 = v121 * (float)(v89 / v122);
          float v126 = (float)((float)((float)(v237 * v116) + 0.0) + (float)(v236 * v117)) + (float)(v235 * v118);
          float v127 = (float)(1.0 - v126) * (float)(v123 * v124);
          float v128 = (float)(1.0 - v126) * (float)(v123 * v125);
          float v129 = (float)(1.0 - v126) * (float)(v124 * v124);
          float v130 = (float)(1.0 - v126) * (float)(v124 * v125);
          float v131 = (float)(1.0 - v126) * (float)(v125 * v125);
          float v132 = v122 * v125;
          float v133 = v122 * v124;
          float v134 = v122 * v123;
          float v135 = v126 + (float)((float)(1.0 - v126) * (float)(v123 * v123));
          float v136 = v126 + v129;
          float v137 = v126 + v131;
          float v138 = v127 - v132;
          float v139 = v133 + v128;
          float v140 = v132 + v127;
          float v141 = v130 - v134;
          float v142 = v128 - v133;
          float v143 = v134 + v130;
          float v144 = (float)((float)((float)(v135 * v248) + 0.0) + (float)(v138 * v246))
               + (float)((float)(v133 + v128) * v244);
          float v145 = (float)((float)((float)(v140 * v248) + 0.0) + (float)(v136 * v246))
               + (float)((float)(v130 - v134) * v244);
          float v146 = (float)((float)((float)((float)(v128 - v133) * v248) + 0.0) + (float)(v143 * v246))
               + (float)(v137 * v244);
          float v147 = (float)((float)((float)(v135 * v243) + 0.0) + (float)(v138 * v242))
               + (float)((float)(v133 + v128) * v241);
          float v148 = (float)((float)((float)(v106 * v144) + 0.0) + (float)(v107 * v145)) + (float)(v108 * v146);
          float v149 = (float)(v145 * v108) - (float)(v146 * v107);
          float v150 = (float)(v146 * v106) - (float)(v144 * v108);
          float v151 = (float)((float)((float)(v140 * v243) + 0.0) + (float)(v136 * v242)) + (float)(v141 * v241);
          float v152 = -(float)(v145 * v106);
          float v153 = (float)((float)((float)(v142 * v243) + 0.0) + (float)(v143 * v242)) + (float)(v137 * v241);
          float v154 = v152 + (float)(v144 * v107);
          float v155 = (float)((float)((float)(v109 * v147) + 0.0) + (float)(v110 * v151)) + (float)(v111 * v153);
          float v156 = (float)(v151 * v111) - (float)(v153 * v110);
          float v157 = (float)(v153 * v109) - (float)(v147 * v111);
          float v158 = v103 - v105;
          float v159 = (float)(v147 * v110) - (float)(v151 * v109);
          float v160 = (float)((float)((float)(v135 * v240) + 0.0) + (float)(v138 * v239)) + (float)(v139 * v238);
          float v161 = (float)((float)((float)(v140 * v240) + 0.0) + (float)(v136 * v239)) + (float)(v141 * v238);
          float v162 = v148 + v155;
          float v163 = (float)((float)((float)(v142 * v240) + 0.0) + (float)(v143 * v239)) + (float)(v137 * v238);
          float v164 = (float)((float)((float)((float)((float)(v276 - v274) * v160) + 0.0)
                               + (float)((float)(v102 - v104) * v161))
                       + (float)(v158 * v163))
               + v162;
          float v165 = (float)((float)((float)((float)((float)((float)(v161 * v158) - (float)(v163 * (float)(v102 - v104)))
                                               * v116)
                                       + 0.0)
                               + (float)((float)((float)(v163 * (float)(v276 - v274)) - (float)(v160 * v158)) * v117))
                       + (float)((float)((float)(v160 * (float)(v102 - v104)) - (float)(v161 * (float)(v276 - v274)))
                               * v118))
               + (float)((float)((float)((float)((float)(v149 * v116) + 0.0) + (float)(v150 * v117))
                               + (float)(v154 * v118))
                       + (float)((float)((float)((float)(v156 * v116) + 0.0) + (float)(v157 * v117))
                               + (float)(v159 * v118)));
          float v166 = sqrtf((float)(v164 * v164) + (float)(v165 * v165));
          float v167 = fabsf(v166);
          float v168 = 1.0 / v166;
          if (v167 < 0.0000001) {
            float v168 = 1.0;
          }
          float v169 = v165 * v168;
          float v170 = v164 * v168;
          float v171 = (float)(v116 * v117) * (float)(1.0 - v170);
          float v172 = (float)(v116 * v118) * (float)(1.0 - v170);
          float v173 = (float)(v117 * v118) * (float)(1.0 - v170);
          float v174 = v118 * v169;
          float v175 = v117 * v169;
          float v176 = v116 * v169;
          float v177 = v170 + (float)((float)(v116 * v116) * (float)(1.0 - v170));
          float v178 = v170 + (float)((float)(v117 * v117) * (float)(1.0 - v170));
          float v179 = v171 - v174;
          float v180 = v174 + v171;
          float v181 = (float)((float)(v177 * v135) + 0.0) + (float)(v179 * v140);
          float v182 = (float)((float)(v177 * v138) + 0.0) + (float)(v179 * v136);
          float v183 = (float)((float)(v177 * v139) + 0.0) + (float)(v179 * v141);
          float v184 = (float)((float)(v180 * v135) + 0.0) + (float)(v178 * v140);
          float v185 = (float)((float)(v180 * v138) + 0.0) + (float)(v178 * v136);
          float v186 = (float)((float)(v180 * v139) + 0.0) + (float)(v178 * v141);
          float v187 = (float)((float)((float)(v172 - v175) * v135) + 0.0) + (float)((float)(v176 + v173) * v140);
          float v188 = (float)((float)((float)(v172 - v175) * v138) + 0.0) + (float)((float)(v176 + v173) * v136);
          float v189 = (float)((float)((float)(v172 - v175) * v139) + 0.0) + (float)((float)(v176 + v173) * v141);
          float v190 = v170 + (float)((float)(v118 * v118) * (float)(1.0 - v170));
          float v191 = v175 + v172;
          float v192 = v173 - v176;
          float v193 = v181 + (float)((float)(v175 + v172) * v142);
          float v194 = v182 + (float)((float)(v175 + v172) * v143);
          float v195 = v183 + (float)(v191 * v137);
          float v196 = v184 + (float)(v192 * v142);
          float v197 = v185 + (float)(v192 * v143);
          float v198 = v186 + (float)(v192 * v137);
          float v199 = v187 + (float)(v190 * v142);
          float v200 = v188 + (float)(v190 * v143);
          float v47 = v264;
          float v74 = v265;
          float v201 = v189 + (float)(v190 * v137);
          float v202 = v274
               - (float)((float)((float)((float)(v193 * v254) + 0.0) + (float)(v194 * v252)) + (float)(v195 * v250));
          float v203 = v104
               - (float)((float)((float)((float)(v196 * v254) + 0.0) + (float)(v197 * v252)) + (float)(v198 * v250));
          float v204 = v105
               - (float)((float)((float)((float)(v199 * v254) + 0.0) + (float)(v200 * v252)) + (float)(v201 * v250));
          float v205 = (float)(v193 * 0.0) + 0.0;
          float v206 = v199 + (float)(v205 + (float)(v196 * 0.0));
          float v207 = (float)(v193 + 0.0) + (float)(v196 * 0.0);
          float v208 = v196 + v205;
          float v209 = (float)(v194 * 0.0) + 0.0;
          float v210 = v207 + (float)(v199 * 0.0);
          float v211 = v208 + (float)(v199 * 0.0);
          float v212 = v200 + (float)(v209 + (float)(v197 * 0.0));
          float v213 = (float)(v194 + 0.0) + (float)(v197 * 0.0);
          float v214 = v197 + v209;
          float v215 = (float)(v195 * 0.0) + 0.0;
          float v216 = v213 + (float)(v200 * 0.0);
          float v217 = v214 + (float)(v200 * 0.0);
          float v218 = v201 + (float)(v215 + (float)(v198 * 0.0));
          float v219 = (float)((float)(v195 + 0.0) + (float)(v198 * 0.0)) + (float)(v201 * 0.0);
          float v220 = (float)(v198 + v215) + (float)(v201 * 0.0);
          float v221 = (float)(v202 * 0.0) + 0.0;
          float v222 = v221 + (float)(v203 * 0.0);
          float v223 = (float)(v202 + 0.0) + (float)(v203 * 0.0);
          float v224 = v203 + v221;
          float v225 = v204 + v222;
          float v226 = v223 + (float)(v204 * 0.0);
          float v227 = v224 + (float)(v204 * 0.0);
          uint64_t v228 = (float *)(a7 + 48 * (int)result);
          *uint64_t v228 = v206;
          v228[1] = v210;
          float v229 = (float)((float)(v206 * (float)(v204 + v222)) + 0.0) + (float)(v210 * v226);
          v228[6] = v218;
          v228[7] = v219;
          float v89 = 1.0;
          v228[2] = v211;
          v228[3] = v212;
          v228[4] = v216;
          v228[5] = v217;
          float v230 = -(float)((float)((float)((float)(v212 * v225) + 0.0) + (float)(v216 * v226)) + (float)(v217 * v227));
          float v231 = -(float)((float)((float)((float)(v218 * v225) + 0.0) + (float)(v219 * v226)) + (float)(v220 * v227));
          float v76 = -2.0;
          v228[8] = v220;
          v228[9] = -(float)(v229 + (float)(v211 * v227));
          v228[10] = v230;
          v228[11] = v231;
          uint64_t result = (result + 1);
        }
      }
    }
    ++v91;
    --v73;
  }
  while (v73);
  return result;
}

uint64_t solve_cubic(float *a1, float a2, float a3, int8x16_t a4, int8x16_t a5)
{
  if (fabsf(a2) < 0.0000001)
  {
    float v20 = sqrtf((float)((float)(a3 * -4.0) * *(float *)a5.i32) + (float)(*(float *)a4.i32 * *(float *)a4.i32));
    float v21 = a3 + a3;
    *a1 = (float)(v20 - *(float *)a4.i32) / v21;
    a1[1] = (float)((float)-*(float *)a4.i32 - v20) / v21;
    return 2;
  }
  else
  {
    float v6 = a3 / a2;
    float v7 = *(float *)a4.i32 / a2;
    float v8 = (float)((float)(v6 * v6) + (float)(v7 * -3.0)) / 9.0;
    float v9 = (float)((float)((float)((float)(v6 * -9.0) * v7) + (float)((float)((float)(v6 * v6) + (float)(v6 * v6)) * v6))
               + (float)((float)(*(float *)a5.i32 / a2) * 27.0))
       / 54.0;
    float v10 = (float)(v8 * (float)-(float)(v8 * v8)) + (float)(v9 * v9);
    if (v10 >= 0.0)
    {
      if (v10 <= 0.0)
      {
        float v26 = v6 / 3.0;
        int v27 = LODWORD(v9);
        float v28 = sqrtf(v8);
        if (v27 < 0) {
          float v28 = -v28;
        }
        *a1 = -(float)(v26 - (float)(v28 * -2.0));
        a1[1] = v28 - v26;
        return 2;
      }
      else
      {
        *(float *)a4.i32 = -v9;
        a5.i32[0] = 1.0;
        v22.i64[0] = 0x8000000080000000;
        v22.i64[1] = 0x8000000080000000;
        float v23 = *(float *)vbslq_s8(v22, a5, a4).i32 * cbrtf(fabsf(v9) + sqrtf(v10));
        float v24 = v6 / 3.0;
        if (fabsf(v23) < 0.0000001) {
          float v25 = -v24;
        }
        else {
          float v25 = (float)(v23 + (float)(v8 / v23)) - v24;
        }
        *a1 = v25;
        return 1;
      }
    }
    else
    {
      float v11 = sqrtf(v8);
      float v12 = v9 / (float)(v8 * v11);
      float v13 = -1.0;
      BOOL v14 = v12 > 1.0 || v12 < -1.0;
      if (v12 >= -1.0 || v12 > 1.0) {
        float v13 = 1.0;
      }
      if (v14) {
        float v12 = v13;
      }
      float v15 = acosf(v12);
      float v16 = cosf(v15 / 3.0);
      float v17 = 1.0 - (float)(v16 * v16);
      if (v17 < 0.0) {
        float v17 = 0.0;
      }
      float v18 = sqrtf(v17);
      *a1 = (float)(v6 / -3.0) + (float)((float)(v11 * -2.0) * v16);
      a1[1] = (float)(v6 / -3.0) + (float)(v11 * (float)(v16 + (float)(v18 * 1.7321)));
      a1[2] = (float)(v6 / -3.0) + (float)(v11 * (float)(v16 + (float)(v18 * -1.7321)));
      return 3;
    }
  }
}

void vl_map_free(uint64_t a1)
{
  if (a1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    free(*(void **)(a1 + 56));
    free(*(void **)(a1 + 104));
    free(*(void **)(a1 + 128));
    free(*(void **)(a1 + 248));
    free(*(void **)(a1 + 80));
    free(*(void **)(a1 + 152));
    free(*(void **)(a1 + 176));
    free(*(void **)(a1 + 200));
    free(*(void **)(a1 + 224));
    free(*(void **)(a1 + 416));
    free(*(void **)(a1 + 440));
    free(*(void **)(a1 + 520));
    free(*(void **)(a1 + 464));
    free(*(void **)(a1 + 488));
    unsigned int v2 = *(void **)(a1 + 544);
    if (v2) {
      free(v2);
    }
    free(*(void **)(a1 + 568));
    free(*(void **)(a1 + 592));
    free(*(void **)(a1 + 736));
    uint64_t v3 = *(int **)(a1 + 752);
    if (v3)
    {
      if (v3[64] >= 1)
      {
        uint64_t v4 = 0;
        do
        {
          sss_node_free(*(void *)&v3[2 * v4]);
          free(*(void **)(*(void *)&v3[2 * v4] + 32));
          free(*(void **)(*(void *)&v3[2 * v4] + 40));
          free(*(void **)&v3[2 * v4++]);
        }
        while (v4 < v3[64]);
      }
      free(v3);
    }
    free((void *)a1);
  }
}

uint64_t vl_map_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  float v12 = malloc_type_malloc(0x18uLL, 0x20040960023A9uLL);
  if (a4)
  {
    *(void *)(a1 + 56_Block_object_dispose(&STACK[0x220], 8) = a5;
    *(void *)(a1 + 576) = a4;
  }
  else if (a6)
  {
    strncpy((char *)(a1 + 52), a6, 0x200uLL);
  }
  else
  {
    printf("%sError : ", (const char *)&str_4_4);
    printf("Needs either map_callback or track_base_path");
    putchar(10);
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)(a1 + 584) = 0;
  if (pthread_rwlock_init((pthread_rwlock_t *)(a1 + 736), 0))
  {
    printf("%sWarning : ", (const char *)&str_4_4);
    printf("rwlock initialization failed.");
    putchar(10);
  }
  if (pthread_rwlock_init((pthread_rwlock_t *)(a1 + 936), 0))
  {
    printf("%sWarning : ", (const char *)&str_4_4);
    printf("rwlock initialization failed.");
    putchar(10);
  }
  void *v12 = a1;
  v12[1] = a2;
  v12[2] = a3;
  return pthread_create((pthread_t *)(a1 + 728), 0, (void *(__cdecl *)(void *))vl_map_build_thread, v12);
}

uint64_t vl_map_build_thread(uint64_t *a1)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = (pthread_rwlock_t *)(*a1 + 736);
  uint64_t v4 = *a1 + 8;
  uint64_t v5 = *a1 + 1136;
  float v100 = (timespec *)(*a1 + 1152);
  __tp = (timespec *)(*a1 + 1168);
  uint64_t v102 = *a1 + 720;
  float v103 = (const char *)(*a1 + 52);
  float v6 = (_DWORD *)a1[2];
  *(_DWORD *)(v2 + 4_Block_object_dispose(&STACK[0x220], 8) = 1;
  float v105 = v6 + 1;
  float v106 = (timespec *)v5;
  uint64_t v108 = v1;
  float v109 = (pthread_rwlock_t *)(v2 + 936);
  int64x2_t v104 = vdupq_n_s64(0x41831BF8457C1095uLL);
  float v107 = v6;
  float32x4_t v98 = (float32x4_t)vdupq_n_s32(0xC2FF0000);
  do
  {
    if (*(_DWORD *)(v2 + 4) != 1)
    {
      usleep(0x186A0u);
      continue;
    }
    pthread_rwlock_wrlock(v3);
    long long v110 = *(_OWORD *)v4;
    uint64_t v111 = *(void *)(v4 + 16);
    float v7 = *(float *)(v2 + 32);
    float v8 = *(_DWORD **)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    pthread_rwlock_unlock(v3);
    if (v8)
    {
      if (vl_os_log_once_token == -1) {
        goto LABEL_7;
      }
      goto LABEL_57;
    }
    float v8 = malloc_type_calloc(1uLL, 0x300uLL, 0x10B0040D0EE5E44uLL);
    *float v8 = 1;
    if (vl_os_log_once_token != -1) {
      dispatch_once(&vl_os_log_once_token, &__block_literal_global_4);
    }
    float v15 = vl_os_log_log;
    os_signpost_id_t v16 = os_signpost_id_make_with_pointer((os_log_t)vl_os_log_log, v8);
    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v17 = v16;
      if (os_signpost_enabled(v15))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_21BAD2000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v17, "vl_map_load", (const char *)&unk_21BB79E01, buf, 2u);
      }
    }
    if (*(_DWORD *)(v2 + 1348))
    {
      *(void *)(v2 + 1256) -= mach_absolute_time();
    }
    else
    {
      clock_gettime(_CLOCK_THREAD_CPUTIME_ID, __tp);
      clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v100);
      clock_gettime(_CLOCK_MONOTONIC, v106);
    }
    float v18 = *(uint64_t (**)(uint64_t, long long *, void **))(v2 + 576);
    uint64_t v19 = *(void *)(v2 + 568);
    long long v112 = *(unsigned int *)(v108 + 24);
    char v20 = v112;
    memset(buf, 0, sizeof(buf));
    int64x2_t v117 = v104;
    vl_geo_calc_tile((double *)buf, (uint64_t)&v110, v112, (_DWORD *)&v112 + 1, (_DWORD *)&v112 + 2);
    int v21 = DWORD2(v112);
    int v22 = ~(-1 << v20) - DWORD1(v112);
    *(void *)((char *)&v112 + 4) = __PAIR64__(v22, DWORD2(v112));
    int v23 = uncertainty_limits;
    if (*(float *)&uncertainty_limits < v7)
    {
      int v23 = dword_267C60C44;
      if (*(float *)&dword_267C60C44 < v7) {
        int v23 = dword_267C60C48;
      }
    }
    HIDWORD(v112) = (int)*(float *)&v23;
    long long v147 = 0u;
    long long v146 = 0u;
    long long v145 = 0u;
    long long v144 = 0u;
    long long v143 = 0u;
    long long v142 = 0u;
    long long v141 = 0u;
    long long v140 = 0u;
    long long v139 = 0u;
    long long v138 = 0u;
    long long v137 = 0u;
    long long v136 = 0u;
    long long v135 = 0u;
    long long v134 = 0u;
    long long v133 = 0u;
    long long v132 = 0u;
    long long v131 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    int64x2_t v117 = 0u;
    long long v118 = 0u;
    *(_OWORD *)buf = 0u;
    if (v18 && v19)
    {
      float v114 = 0;
      int inv_filename = v18(v19, &v112, &v114);
      if (!inv_filename)
      {
        __strcpy_chk();
        free(v114);
      }
      uint64_t v25 = v108;
    }
    else
    {
      uint64_t v25 = v108;
      int inv_filename = vl_rw_get_inv_filename(v103, *(_DWORD *)(v108 + 24), v21, v22, (int)*(float *)&v23, v102, (char *)buf);
    }
    float v6 = v107;
    printf("Verbose : ");
    printf("MAP:   Loading track for %d, %d, %d, %d.", *(_DWORD *)(v25 + 24), DWORD1(v112), DWORD2(v112), HIDWORD(v112));
    putchar(10);
    if (inv_filename == 3)
    {
      printf("Verbose : ");
      printf("Track meta tile unavailable or broken : %d %d %d", DWORD1(v112), DWORD2(v112), HIDWORD(v112));
      putchar(10);
      char v36 = 0;
      int v37 = 3;
      if (vl_os_log_once_token != -1) {
        goto LABEL_102;
      }
    }
    else
    {
      if (inv_filename == 1)
      {
        printf("Verbose : ");
        printf("Downloading Tile : %d %d %d", DWORD1(v112), DWORD2(v112), HIDWORD(v112));
        putchar(10);
        if (vl_os_log_once_token != -1) {
          dispatch_once(&vl_os_log_once_token, &__block_literal_global_4);
        }
        float v38 = vl_os_log_log;
        os_signpost_id_t v39 = os_signpost_id_make_with_pointer((os_log_t)vl_os_log_log, v8);
        if (v39 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          os_signpost_id_t v40 = v39;
          if (os_signpost_enabled(v38))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_21BAD2000, v38, OS_SIGNPOST_INTERVAL_END, v40, "vl_map_load", (const char *)&unk_21BB79E01, buf, 2u);
          }
        }
        vl_timer_stop((uint64_t)v106);
        usleep(0x186A0u);
        vl_map_free((uint64_t)v8);
        continue;
      }
      if (inv_filename
        || (size_t v113 = 0, v114 = 0, vl_map_load_fn((const char *)buf, &v114, &v113, 0))
        || (size_t v26 = v113, v27 = v114, mem = vl_map_read_mem_ex(), free(v27), mem))
      {
        printf("%sError : ", (const char *)&str_4_4);
        printf("Track unavailable or broken : %d %d %d", DWORD1(v112), DWORD2(v112), HIDWORD(v112));
        putchar(10);
        printf("%sError : ", (const char *)&str_4_4);
        printf("Filepath: %s", (const char *)buf);
        putchar(10);
        char v36 = 0;
        int v37 = 2;
        if (vl_os_log_once_token != -1) {
          goto LABEL_102;
        }
        goto LABEL_52;
      }
      *((void *)v8 + 95) = v26;
      if (*(_DWORD *)(v108 + 8)) {
        vl_dom_dirs_read(v115, (uint64_t)(v8 + 6));
      }
      v44.i64[0] = 0xFF000000FFLL;
      v44.i64[1] = 0xFF000000FFLL;
      if (*(_DWORD *)(v108 + 12) == 1)
      {
        uint64_t v45 = *((void *)v8 + 30);
        if (v45 >= 1)
        {
          uint64_t v46 = 0;
          int v47 = 0;
          unsigned int v48 = v8[66];
          while (2)
          {
            if ((int)v48 < 1) {
              goto LABEL_68;
            }
            uint64_t v49 = *((void *)v8 + 31);
            uint64_t v50 = v48;
            if (v48 < 8)
            {
              uint64_t v51 = 0;
              v52.i64[0] = 0;
              goto LABEL_81;
            }
            if (v48 >= 0x20)
            {
              uint64_t v51 = v48 & 0x7FFFFFE0;
              float v53 = (int8x16_t *)(v49 + v46 + 16);
              v52.i32[0] = 0;
              uint64_t v54 = v48 & 0xFFFFFFE0;
              do
              {
                int8x16_t v55 = v53[-1];
                float32x4_t v56 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_21BB7AAE0)), v98);
                float32x4_t v57 = vmulq_f32(v56, v56);
                float32x4_t v58 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_21BB7AAD0)), v98);
                float32x4_t v59 = vmulq_f32(v58, v58);
                float v60 = (float)((float)((float)((float)((float)((float)(v52.f32[0] + v57.f32[0]) + v57.f32[1]) + v57.f32[2])
                                            + v57.f32[3])
                                    + v59.f32[0])
                            + v59.f32[1])
                    + v59.f32[2];
                float32x4_t v61 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_21BB7AAC0)), v98);
                float32x4_t v62 = vmulq_f32(v61, v61);
                float32x4_t v63 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_21BB7AAB0)), v98);
                float32x4_t v64 = vmulq_f32(v63, v63);
                float v65 = (float)((float)((float)((float)((float)((float)((float)(v60 + v59.f32[3]) + v62.f32[0])
                                                            + v62.f32[1])
                                                    + v62.f32[2])
                                            + v62.f32[3])
                                    + v64.f32[0])
                            + v64.f32[1])
                    + v64.f32[2];
                float32x4_t v66 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v53, (int8x16_t)xmmword_21BB7AAE0)), v98);
                int8x16_t v35 = (int8x16_t)vmulq_f32(v66, v66);
                float v67 = (float)((float)((float)(v65 + v64.f32[3]) + *(float *)v35.i32) + *(float *)&v35.i32[1])
                    + *(float *)&v35.i32[2];
                float32x4_t v68 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v53, (int8x16_t)xmmword_21BB7AAD0)), v98);
                int8x16_t v34 = (int8x16_t)vmulq_f32(v68, v68);
                float32x4_t v69 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v53, (int8x16_t)xmmword_21BB7AAC0)), v98);
                float32x4_t v70 = vmulq_f32(v69, v69);
                *(float *)v34.i32 = (float)((float)((float)((float)((float)((float)((float)(v67 + *(float *)&v35.i32[3])
                                                                                  + *(float *)v34.i32)
                                                                          + *(float *)&v34.i32[1])
                                                                  + *(float *)&v34.i32[2])
                                                          + *(float *)&v34.i32[3])
                                                  + v70.f32[0])
                                          + v70.f32[1])
                                  + v70.f32[2];
                float32x4_t v71 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v53, (int8x16_t)xmmword_21BB7AAB0)), v98);
                float32x4_t v52 = vmulq_f32(v71, v71);
                v52.f32[0] = (float)((float)((float)((float)(*(float *)v34.i32 + v70.f32[3]) + v52.f32[0]) + v52.f32[1])
                                   + v52.f32[2])
                           + v52.f32[3];
                v53 += 2;
                v54 -= 32;
              }
              while (v54);
              if (v51 != v48)
              {
                if ((v48 & 0x18) == 0) {
                  goto LABEL_81;
                }
                goto LABEL_78;
              }
            }
            else
            {
              uint64_t v51 = 0;
              v52.i64[0] = 0;
LABEL_78:
              uint64_t v72 = v51;
              uint64_t v51 = v48 & 0xFFFFFFF8;
              uint64_t v73 = (uint64_t *)(v49 + v46 + v72);
              uint64_t v74 = v72 - v51;
              do
              {
                uint64_t v75 = *v73++;
                v34.i64[0] = v75;
                float32x4_t v76 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v34, (int8x16_t)xmmword_21BB7AAE0)), v98);
                float32x4_t v77 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v34, (int8x16_t)xmmword_21BB7AAD0)), v98);
                int8x16_t v34 = (int8x16_t)vmulq_f32(v77, v77);
                float32x4_t v78 = vmulq_f32(v76, v76);
                v52.f32[0] = (float)((float)((float)((float)((float)((float)((float)(v52.f32[0] + v78.f32[0])
                                                                           + v78.f32[1])
                                                                   + v78.f32[2])
                                                           + v78.f32[3])
                                                   + *(float *)v34.i32)
                                           + *(float *)&v34.i32[1])
                                   + *(float *)&v34.i32[2])
                           + *(float *)&v34.i32[3];
                v74 += 8;
              }
              while (v74);
              if (v51 != v48)
              {
LABEL_81:
                uint64_t v79 = v48 - v51;
                float v80 = (unsigned __int8 *)(v49 + v51 + v46);
                do
                {
                  unsigned int v81 = *v80++;
                  v52.f32[0] = v52.f32[0] + (float)((float)((float)v81 + -127.5) * (float)((float)v81 + -127.5));
                  --v79;
                }
                while (v79);
              }
            }
            float v82 = 0.0;
            if (v52.f32[0] > 0.0) {
              float v82 = 1.0 / sqrtf(v52.f32[0]);
            }
            v52.i32[0] = *(_DWORD *)(v108 + 16);
            v83.i32[0] = 1132462080;
            float v84 = 256.0 / (float)(*(float *)(v108 + 20) - v52.f32[0]);
            if (v48 >= 8)
            {
              if (v48 >= 0x10)
              {
                float v86 = (int8x16_t *)(v49 + v46);
                uint64_t v85 = v48 & 0xFFFFFFF0;
                float32x4_t v83 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0);
                uint64_t v87 = v50 & 0xFFFFFFF0;
                do
                {
                  unsigned long long v88 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v86, (int8x16_t)xmmword_21BB7AAC0)), v98), v82), v83), v84)), v44), (int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(
                                                           vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v86, (int8x16_t)xmmword_21BB7AAB0)), v98), v82), v83), v84)), v44)) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
                  v150.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v88);
                  unsigned long long v89 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v86, (int8x16_t)xmmword_21BB7AAE0)), v98), v82), v83), v84)), v44), (int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(
                                                           vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v86, (int8x16_t)xmmword_21BB7AAD0)), v98), v82), v83), v84)), v44)) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
                  v150.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v89);
                  v150.val[2] = (int8x16_t)vmovl_u16(*(uint16x4_t *)&v88);
                  v150.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)&v89);
                  int8x16_t v35 = vqtbl4q_s8(v150, (int8x16_t)xmmword_21BB7AA90);
                  *v86++ = v35;
                  v87 -= 16;
                }
                while (v87);
                if (v85 == v50) {
                  goto LABEL_67;
                }
                if ((v50 & 8) == 0) {
                  goto LABEL_96;
                }
              }
              else
              {
                uint64_t v85 = 0;
              }
              uint64_t v90 = v85;
              uint64_t v85 = v50 & 0xFFFFFFF8;
              float32x4_t v83 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0);
              uint64_t v91 = (uint64_t *)(v49 + v90 + v46);
              uint64_t v92 = v90 - v85;
              do
              {
                v35.i64[0] = *v91;
                unsigned long long v93 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_21BB7AAE0)), v98), v82), v83), v84)), v44), (int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(
                                                         vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_21BB7AAD0)), v98), v82), v83), v84)), v44)) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
                v149.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v93);
                v149.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)&v93);
                int8x16_t v35 = vqtbl2q_s8(v149, (int8x16_t)xmmword_21BB7AAA0);
                *v91++ = v35.i64[0];
                v92 += 8;
              }
              while (v92);
              if (v85 != v50) {
                goto LABEL_96;
              }
            }
            else
            {
              uint64_t v85 = 0;
LABEL_96:
              uint64_t v94 = v50 - v85;
              float v95 = (__int8 *)(v49 + v85 + v46);
              do
              {
                v83.i8[0] = *v95;
                v83.f32[0] = v84 * (float)((float)(v82 * (float)((float)v83.u32[0] + -127.5)) - v52.f32[0]);
                int v96 = (int)v83.f32[0];
                if ((int)v83.f32[0] >= 255) {
                  int v96 = 255;
                }
                *v95++ = v96 & ~(v96 >> 31);
                --v94;
              }
              while (v94);
            }
LABEL_67:
            unsigned int v48 = v8[66];
            uint64_t v45 = *((void *)v8 + 30);
LABEL_68:
            v47 += v48;
            uint64_t v46 = v47;
            if (v45 <= v47) {
              break;
            }
            continue;
          }
        }
      }
      *(_OWORD *)(v8 + 1) = v112;
      log_col_app((uint64_t)"%sMAP: loaded %d track points%s", (uint64_t)"isual localization is not supported on this device", (uint64_t)"isual localization is not supported on this device", v29, v30, v31, v32, v33, (char)&str_4_4);
      char v36 = 1;
      int v37 = 2;
      if (vl_os_log_once_token != -1) {
LABEL_102:
      }
        dispatch_once(&vl_os_log_once_token, &__block_literal_global_4);
    }
LABEL_52:
    float v41 = vl_os_log_log;
    os_signpost_id_t v42 = os_signpost_id_make_with_pointer((os_log_t)vl_os_log_log, v8);
    os_signpost_id_t v43 = v42;
    if (v36)
    {
      if (v42 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_21BAD2000, v41, OS_SIGNPOST_INTERVAL_END, v43, "vl_map_load", (const char *)&unk_21BB79E01, buf, 2u);
      }
      vl_timer_stop((uint64_t)v106);
      float v6 = v107;
      if (vl_os_log_once_token == -1) {
        goto LABEL_7;
      }
LABEL_57:
      dispatch_once(&vl_os_log_once_token, &__block_literal_global_4);
LABEL_7:
      float v9 = vl_os_log_log;
      os_signpost_id_t v10 = os_signpost_id_make_with_pointer((os_log_t)vl_os_log_log, v8);
      if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v11 = v10;
        if (os_signpost_enabled(v9))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_21BAD2000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v11, "vl_map_index", (const char *)&unk_21BB79E01, buf, 2u);
        }
      }
      if (*v6 == 2)
      {
        *((void *)v8 + 94) = vl_match_sss_build(v2, *((void **)v8 + 31), *((void *)v8 + 30) / (int)v8[66], v8[66], v105);
        printf("Verbose : ");
        printf("MAP: Built SSS search index");
      }
      else
      {
        printf("%sWarning : ", (const char *)&str_4_4);
        printf("Unknown match index: %d");
      }
      putchar(10);
      if (vl_os_log_once_token != -1) {
        dispatch_once(&vl_os_log_once_token, &__block_literal_global_4);
      }
      float v12 = vl_os_log_log;
      os_signpost_id_t v13 = os_signpost_id_make_with_pointer((os_log_t)vl_os_log_log, v8);
      if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v14 = v13;
        if (os_signpost_enabled(v12))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_21BAD2000, v12, OS_SIGNPOST_INTERVAL_END, v14, "vl_map_index", (const char *)&unk_21BB79E01, buf, 2u);
        }
      }
      pthread_rwlock_wrlock(v109);
      vl_map_free(*(void *)(v2 + 584));
      if (v8) {
        atomic_fetch_add(v8, 1u);
      }
      *(void *)(v2 + 584) = v8;
      pthread_rwlock_unlock(v109);
      pthread_rwlock_wrlock(v3);
      vl_map_free((uint64_t)v8);
      *(_DWORD *)(v2 + 4) = 0;
      pthread_rwlock_unlock(v3);
      printf("Verbose : ");
      printf("Map:   Update Successfully");
      putchar(10);
      continue;
    }
    if (v42 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_21BAD2000, v41, OS_SIGNPOST_INTERVAL_END, v43, "vl_map_load", (const char *)&unk_21BB79E01, buf, 2u);
    }
    vl_timer_stop((uint64_t)v106);
    usleep(0x186A0u);
    vl_map_free((uint64_t)v8);
    pthread_rwlock_wrlock(v3);
    *(_DWORD *)(v2 + 4) = v37;
    pthread_rwlock_unlock(v3);
    float v6 = v107;
  }
  while (*(_DWORD *)(v2 + 48));
  vl_map_free(*(void *)(v2 + 584));
  *(void *)(v2 + 584) = 0;
  free(a1);
  return 0;
}

uint64_t vl_map_update(int *a1, float a2, uint64_t a3, double *a4, uint64_t a5)
{
  if (!a1[12])
  {
    printf("Verbose : ");
    printf("Map build thread haven't started");
    putchar(10);
    return 4294967294;
  }
  int v9 = a1[1];
  if ((v9 - 2) < 2)
  {
    if (v9 == 2) {
      uint64_t v10 = 2;
    }
    else {
      uint64_t v10 = 4;
    }
    pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 184));
    a1[1] = 0;
    pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 184));
    if (vabdd_f64(*((double *)a1 + 1), *a4) <= 0.0001
      && vabdd_f64(*((double *)a1 + 2), a4[1]) <= 0.0001
      && vabdd_f64(*((double *)a1 + 3), a4[2]) <= 0.0001
      && *((float *)a1 + 8) == a2)
    {
      printf("Verbose : ");
      printf("Map update not finished: %f %f %f", *a4, a4[1], a4[2]);
      putchar(10);
      return v10;
    }
LABEL_15:
    if (a5)
    {
      pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 234));
      uint64_t v11 = *((void *)a1 + 73);
      pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 234));
      if (v11 == a5) {
        return 0;
      }
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 184));
      uint64_t v10 = 1;
      a1[1] = 1;
      *((void *)a1 + 5) = a5;
      float v12 = (pthread_rwlock_t *)(a1 + 184);
    }
    else
    {
      int v13 = *a1;
      printf("Verbose : ");
      double v14 = *a4;
      double v15 = a4[2];
      if (v13)
      {
        printf("Map force update: %f %f %f", v14, a4[1], v15);
        putchar(10);
        pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 184));
        *a1 = 0;
        pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 184));
        uint64_t v10 = 3;
      }
      else
      {
        printf("Map update: %f %f %f", v14, a4[1], v15);
        putchar(10);
        pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 234));
        uint64_t v16 = *((void *)a1 + 73);
        if (v16)
        {
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          v22[0] = 0uLL;
          v22[1] = (float64x2_t)vdupq_n_s64(0x41831BF8457C1095uLL);
          long long v23 = 0u;
          vl_geo_calc_gnd(v22, *(_DWORD *)(v16 + 4), ~(-1 << *(_DWORD *)(v16 + 4)) - *(_DWORD *)(v16 + 12), *(_DWORD *)(v16 + 8), (uint64_t)&v23);
          double v17 = *a4 - *((double *)&v27 + 1);
          double v18 = a4[1] - *(double *)&v28;
          double v19 = a4[2] - *((double *)&v28 + 1);
          if (fabs(*((double *)&v24 + 1) * v18 + *(double *)&v23 * v17 + *(double *)&v26 * v19)
             + *((double *)&v29 + 1) * -0.5 <= 2.0
            && fabs(v18 * *(double *)&v25 + *((double *)&v23 + 1) * v17 + *((double *)&v26 + 1) * v19)
             + *(double *)&v29 * -0.5 <= 2.0)
          {
            if (*(double *)(v16 + 272) >= a2 || *(float *)&dword_267C60C48 < a2)
            {
              pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 234));
              return 0;
            }
            printf("Verbose : ");
            printf("MAP: Need rebuild, uncertainty > current map uncertainty (%f > %f)");
          }
          else
          {
            printf("Verbose : ");
            printf("MAP: Need rebuild, point outside current map gnd");
          }
        }
        else
        {
          printf("Verbose : ");
          printf("Map: Need rebuild, no map");
        }
        putchar(10);
        pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 234));
        uint64_t v10 = 1;
      }
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 184));
      a1[1] = 1;
      uint64_t v20 = *((void *)a4 + 2);
      *(_OWORD *)(a1 + 2) = *(_OWORD *)a4;
      *((void *)a1 + 3) = v20;
      *((float *)a1 + _Block_object_dispose(&STACK[0x220], 8) = a2;
      *((void *)a1 + 5) = 0;
      float v12 = (pthread_rwlock_t *)(a1 + 184);
    }
    pthread_rwlock_unlock(v12);
    return v10;
  }
  if (v9 != 1) {
    goto LABEL_15;
  }
  printf("Verbose : ");
  if (a4) {
    printf("Map update not finished: %f %f %f");
  }
  else {
    printf("Map update not finished.");
  }
  putchar(10);
  return 0xFFFFFFFFLL;
}

uint64_t vl_map_get(uint64_t a1, float a2, uint64_t a3, double *a4, uint64_t a5)
{
  int v9 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 936));
  uint64_t v10 = *(double **)(a1 + 584);
  if (v10)
  {
    double v11 = *a4 - v10[45];
    double v12 = a4[1] - v10[46];
    double v13 = a4[2] - v10[47];
    double v14 = v10[39] * v12 + v10[36] * v11 + v10[42] * v13;
    double v15 = sqrt((v12 * v10[40] + v10[37] * v11 + v10[43] * v13) * (v12 * v10[40] + v10[37] * v11 + v10[43] * v13)+ v14 * v14);
    if (v15 > v10[89] * 0.5 || v15 > v10[90] * 0.5)
    {
      printf("Verbose : ");
      printf("MAP: Map not validated, distance: %f > (%f, %f)", v15, v10[89] * 0.5, v10[90] * 0.5);
      uint64_t v16 = 3;
      putchar(10);
      pthread_rwlock_unlock(v9);
      if (!a5) {
        return v16;
      }
      goto LABEL_7;
    }
    pthread_rwlock_unlock(v9);
    if (a5)
    {
      pthread_rwlock_rdlock(v9);
      double v19 = *(atomic_uint **)(a1 + 584);
      if (v19) {
        atomic_fetch_add(v19, 1u);
      }
      *(void *)a5 = v19;
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(*(void *)(a1 + 584) + 4);
      printf("Verbose : ");
      printf("MAP:   Using map with %s%llu%s tracks", (const char *)&str_4_4, *(void *)(*(void *)a5 + 48), (const char *)&str_4_4);
      putchar(10);
      pthread_rwlock_unlock(v9);
      uint64_t v16 = 0;
      uint64_t v20 = *(_OWORD **)a5;
      long long v21 = *(_OWORD *)(*(void *)a5 + 336);
      long long v22 = *(_OWORD *)(*(void *)a5 + 352);
      long long v23 = *(_OWORD *)(*(void *)a5 + 384);
      *(_OWORD *)(a1 + 68_Block_object_dispose(&STACK[0x220], 8) = *(_OWORD *)(*(void *)a5 + 368);
      *(_OWORD *)(a1 + 704) = v23;
      *(_OWORD *)(a1 + 656) = v21;
      *(_OWORD *)(a1 + 672) = v22;
      long long v25 = v20[19];
      long long v24 = v20[20];
      *(_OWORD *)(a1 + 60_Block_object_dispose(&STACK[0x220], 8) = v20[18];
      *(_OWORD *)(a1 + 624) = v25;
      *(_OWORD *)(a1 + 640) = v24;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    printf("Verbose : ");
    printf("MAP: Not validate, no map");
    uint64_t v16 = 2;
    putchar(10);
    pthread_rwlock_unlock(v9);
    if (a5)
    {
LABEL_7:
      *(void *)a5 = 0;
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 736));
      *(_DWORD *)(a1 + 4) = 1;
      uint64_t v17 = *((void *)a4 + 2);
      *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = *(_OWORD *)a4;
      *(void *)(a1 + 24) = v17;
      *(float *)(a1 + 32) = a2;
      *(void *)(a1 + 40) = 0;
      pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 736));
    }
  }
  return v16;
}

__n64 p_klt(uint64_t *a1, uint64_t *a2, float *a3, float *a4, int a5, float a6, float a7)
{
  *a3 = a6;
  *a4 = a7;
  uint64_t v11 = *((unsigned int *)a2 + 2);
  if (v11 != *((_DWORD *)a2 + 3)) {
    __assert_rtn("p_klt", "p_corr.c", 60, "im_template->x_size == im_template->y_size");
  }
  float v12 = (float)(v11 * v11 * v11 * v11);
  float v13 = (float)(2 * v11);
  if ((int)v11 < 1)
  {
    result.n64_u32[1] = 0;
    if ((float)(0.0 / v12) >= v13)
    {
      int v58 = (a5 & ~(a5 >> 31)) + 1;
      do
      {
        *a3 = NAN;
        *a4 = NAN;
        --v58;
      }
      while (v58);
      return 0;
    }
LABEL_40:
    result.n64_u32[0] = 2139095039;
    return result;
  }
  int v14 = 0;
  uint64_t v15 = *a2;
  float v16 = (float)(int)v11 * 0.5;
  uint64_t v17 = a2[2];
  uint64_t v18 = *a1;
  uint64_t v19 = a1[2];
  do
  {
    int v20 = 0;
    float v21 = (float)(a7 - v16) + 0.5;
    float v22 = 0.0;
    float v23 = 0.0;
    float v24 = 0.0;
    uint64_t v25 = v15;
    result.n64_u64[0] = 0;
    float v27 = 0.0;
    float v28 = 0.0;
    do
    {
      uint64_t v29 = 0;
      float v30 = v21 + (float)v20;
      int v31 = (int)v30;
      do
      {
        float v47 = (float)((float)(*a3 - v16) + 0.5) + (float)(int)v29;
        int v48 = (int)v47;
        if ((int)v47 < 0)
        {
          if (v48 == -1)
          {
            int v51 = 0;
            if (*((_DWORD *)a1 + 2) - 1 <= -1) {
              LODWORD(v52) = *((_DWORD *)a1 + 2) - 1;
            }
            else {
              LODWORD(v52) = 0;
            }
            uint64_t v52 = (int)v52;
            if ((v31 & 0x80000000) == 0)
            {
LABEL_7:
              int v32 = *((_DWORD *)a1 + 3);
              LODWORD(v33) = v32 - 1;
              if (v32 <= v31) {
                int v34 = v32 - 1;
              }
              else {
                int v34 = (int)v30;
              }
              goto LABEL_10;
            }
          }
          else
          {
            int v51 = 0;
            uint64_t v52 = 0;
            if ((v31 & 0x80000000) == 0) {
              goto LABEL_7;
            }
          }
        }
        else
        {
          int v49 = *((_DWORD *)a1 + 2);
          int v50 = v49 - 1;
          if (v49 <= v48) {
            int v51 = v49 - 1;
          }
          else {
            int v51 = (int)v47;
          }
          if (v50 <= v48) {
            LODWORD(v52) = v50;
          }
          else {
            LODWORD(v52) = v48 + 1;
          }
          uint64_t v52 = (int)v52;
          if ((v31 & 0x80000000) == 0) {
            goto LABEL_7;
          }
        }
        if (v31 != -1)
        {
          int v34 = 0;
          uint64_t v33 = 0;
          goto LABEL_13;
        }
        int v34 = 0;
        LODWORD(v33) = *((_DWORD *)a1 + 3) - 1;
LABEL_10:
        if ((int)v33 > v31) {
          LODWORD(v33) = (int)v30 + 1;
        }
        uint64_t v33 = (int)v33;
LABEL_13:
        float v35 = v47 - (float)v51;
        *(float *)&unsigned int v36 = v30 - (float)v34;
        uint64_t v37 = v19 * v34;
        LOBYTE(v7) = *(unsigned char *)(v18 + v37 + v51);
        float v38 = (float)LODWORD(v7);
        uint64_t v39 = v33 * v19;
        LOBYTE(v_Block_object_dispose(&STACK[0x220], 8) = *(unsigned char *)(v18 + v39 + v51);
        float v40 = (float)LODWORD(v8);
        LOBYTE(v9) = *(unsigned char *)(v18 + v37 + v52);
        float v41 = (float)LODWORD(v9);
        LOBYTE(v10) = *(unsigned char *)(v18 + v39 + v52);
        float v10 = (float)((float)(v38 + (float)LODWORD(v10)) - v40) - v41;
        float v9 = v41 - v38;
        float v8 = v40 - v38;
        float v42 = v9 + (float)(*(float *)&v36 * v10);
        float v43 = v8 + (float)(v35 * v10);
        float v44 = (float)((float)(v35 * v9) + (float)((float)(v35 * *(float *)&v36) * v10)) + (float)(*(float *)&v36 * v8);
        LOBYTE(v36) = *(unsigned char *)(v25 + v29);
        float v45 = v44 + v38;
        float v46 = (float)v36;
        float v7 = v45 - v46;
        result.n64_f32[0] = result.n64_f32[0] + vabds_f32(v45, v46);
        float v22 = v22 + (float)(v42 * v42);
        float v24 = v24 + (float)(v42 * v43);
        float v23 = v23 + (float)(v43 * v43);
        float v28 = v28 - (float)((float)(v45 - v46) * v42);
        float v27 = v27 - (float)((float)(v45 - v46) * v43);
        ++v29;
      }
      while (v11 != v29);
      v25 += v17;
      ++v20;
    }
    while (v20 != v11);
    float v53 = (float)(v22 * v23) - (float)(v24 * v24);
    if ((float)(v53 / v12) < v13) {
      goto LABEL_40;
    }
    float v54 = (float)((float)(v28 * v23) - (float)(v27 * v24)) / v53;
    float v55 = (float)((float)(v27 * v22) - (float)(v28 * v24)) / v53;
    *a3 = *a3 + v54;
    a7 = v55 + *a4;
    *a4 = a7;
    float v56 = fabsf(v54);
    float v57 = fabsf(v55);
    if (v56 <= v57) {
      float v56 = v57;
    }
    if (v14 >= a5) {
      break;
    }
    ++v14;
  }
  while (v56 >= 0.0001);
  return result;
}

BOOL vl_ps_refine(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v1437 = v7;
  uint64_t v1542 = v8;
  float v10 = v9;
  v1435 = v11;
  uint64_t v1618 = *MEMORY[0x263EF8340];
  uint64_t v1429 = v3;
  v1430 = v9;
  if (*(_DWORD *)(v4 + 156))
  {
    int v12 = *(_DWORD *)(v4 + 80);
    int v1515 = vl_ps_debug_printout;
    int ptr = 0;
    uint64_t v1575 = 0;
    uint64_t v1577 = 0;
    v1503 = (char *)malloc_type_malloc(4 * *(int *)(v3 + 4), 0x100004052888210uLL);
    uint64_t v13 = *(unsigned int *)(v6 + 4);
    if ((int)v13 <= 0)
    {
      int ptr = 0;
      uint64_t v1575 = 0;
      uint64_t v1577 = (int)v13;
    }
    else
    {
      int v14 = malloc_type_malloc(8 * v13, 0x100004000313F17uLL);
      uint64_t v13 = *(int *)(v6 + 4);
      int ptr = v14;
      uint64_t v1575 = 0;
      uint64_t v1577 = v13;
      if ((int)v13 >= 1)
      {
        v1573 = malloc_type_malloc(12 * v13, 0x10000403E1C8BA9uLL);
        uint64_t v15 = *(int *)(v6 + 4);
        uint64_t v1572 = 0;
        uint64_t v1574 = v15;
        unint64_t v16 = *v10;
        if (!*v10) {
          goto LABEL_795;
        }
LABEL_606:
        if (v12 >= (int)v16) {
          unint64_t v16 = v16;
        }
        else {
          unint64_t v16 = v12;
        }
        unint64_t v1502 = v16;
        uint64_t v1434 = v5;
        if ((int)v16 >= 1)
        {
          uint64_t v824 = 0;
          do
          {
            uint64_t v1528 = v824;
            unint64_t v1514 = v10[1];
            uint64_t v825 = v1514 + 160 * v824;
            long long v1571 = 0u;
            long long v1570 = 0u;
            long long v1569 = 0u;
            long long v1568 = 0u;
            long long v1566 = 0u;
            long long v1567 = 0u;
            uint64_t v826 = *(void *)(v825 + 8);
            int v827 = *(_DWORD *)(v825 + 16);
            float v828 = *(float *)(v825 + 20);
            vl_ps_get_inliers(v825, v6, v5, v1503);
            *(void *)((char *)&v1571 + 4) = v826;
            HIDWORD(v1571) = v827;
            __float2 v829 = __sincosf_stret(v828);
            *(float *)&long long v1569 = v829.__cosval;
            *((float *)&v1569 + 1) = -(float)(v829.__sinval - (float)((float)(v829.__cosval * 0.0) * 0.0));
            *((float *)&v1569 + 2) = (float)(v829.__cosval * 0.0) + (float)(v829.__sinval * 0.0);
            HIDWORD(v1569) = LODWORD(v829.__sinval);
            *(float *)&long long v1570 = v829.__cosval + (float)((float)(v829.__sinval * 0.0) * 0.0);
            *((float *)&v1570 + 1) = (float)(v829.__sinval * 0.0) - (float)(v829.__cosval * 0.0);
            *((void *)&v1570 + 1) = 0x80000000;
            LODWORD(v1571) = 1065353216;
            apply_pose_rotation((float *)&v1569, (float32x2_t *)(*(void *)&v1435[18] + 232), (float *)&v1566);
            uint64_t v1575 = 0;
            uint64_t v1572 = 0;
            uint64_t v838 = (void *)(v825 + 88);
            if (*(uint64_t *)(v825 + 88) >= 1)
            {
              uint64_t v839 = 0;
              uint64_t v840 = 0;
              uint64_t v841 = (void *)(v1514 + 160 * v1528 + 96);
              do
              {
                uint64_t v843 = *(void *)(*(void *)(v1542 + 8) + 288 * *(int *)(*v841 + v839 + 4));
                uint64_t v844 = *(void *)(v1437 + 8) + 12 * *(int *)(*v841 + v839);
                v1578[0] = *(void **)v844;
                LODWORD(v1578[1]) = *(_DWORD *)(v844 + 8);
                uint64_t v845 = v1575;
                if (v1575 >= v1577)
                {
                  uint64_t v846 = 32;
                  if (v1577) {
                    uint64_t v846 = 2 * v1577;
                  }
                  if (v846 <= v1575) {
                    uint64_t v847 = v1575 + 1;
                  }
                  else {
                    uint64_t v847 = v846;
                  }
                  if (v847)
                  {
                    int ptr = malloc_type_realloc(ptr, 8 * v847, 0xF2A7A0E4uLL);
                    uint64_t v845 = v1575;
                  }
                  uint64_t v1577 = v847;
                }
                uint64_t v1575 = v845 + 1;
                *((void *)ptr + v845) = v843;
                uint64_t v848 = v1572;
                if (v1572 >= v1574)
                {
                  uint64_t v849 = 21;
                  if (v1574) {
                    uint64_t v849 = 2 * v1574;
                  }
                  if (v849 <= v1572) {
                    uint64_t v850 = v1572 + 1;
                  }
                  else {
                    uint64_t v850 = v849;
                  }
                  if (v850)
                  {
                    v1573 = malloc_type_realloc(v1573, 12 * v850, 0xD421A375uLL);
                    uint64_t v848 = v1572;
                  }
                  uint64_t v1574 = v850;
                }
                uint64_t v1572 = v848 + 1;
                float v842 = (char *)v1573 + 12 * v848;
                *(void **)float v842 = v1578[0];
                *((_DWORD *)v842 + 2) = v1578[1];
                ++v840;
                v839 += 8;
              }
              while (*v838 > v840);
            }
            if (v1515)
            {
              printf("Info : ");
              printf("\n  ------- Testing hyp %d (hist count %.0f, inliers %d), x: %.2f, y: %.2f, z: %.2f, ang: %.2f --------  ", v1528, *(float *)v825, *v838, *(float *)(v825 + 8), *(float *)(v825 + 12), *(float *)(v825 + 16), *(float *)(v825 + 20) * 180.0 / 3.14159265);
              putchar(10);
            }
            long long v1582 = 0u;
            *(_OWORD *)v1581 = 0u;
            *(_OWORD *)v1580 = 0u;
            long long v1579 = 0u;
            *(_OWORD *)v1578 = 0u;
            v851.i32[1] = DWORD1(v1567);
            long long v1555 = v1566;
            long long v1556 = v1567;
            *(_OWORD *)v1557 = v1568;
            float32x4_t v1541 = (float32x4_t)vdupq_n_s32(0x378637BEu);
            if ((int)v1575 < 1)
            {
              int v854 = 0;
              goto LABEL_646;
            }
            v851.i32[0] = DWORD2(v1555);
            v831.i32[0] = DWORD1(v1555);
            v830.i32[0] = v1555;
            v832.i32[0] = (__int32)v1557[0];
            v834.i32[0] = HIDWORD(v1556);
            v833.i32[0] = DWORD2(v1556);
            *(float *)v835.i32 = (float)((float)(*((float *)&v1555 + 3) * *(float *)&v1557[1])
                                       + (float)(*(float *)&v1555 * *((float *)v1557 + 1)))
                               + (float)(*((float *)&v1556 + 2) * *((float *)&v1557[1] + 1));
            *(float *)v836.i32 = (float)((float)(*(float *)&v1557[1] * *(float *)&v1556)
                                       + (float)(*((float *)&v1555 + 1) * *((float *)v1557 + 1)))
                               + (float)(*((float *)&v1556 + 3) * *((float *)&v1557[1] + 1));
            *(float *)v837.i32 = (float)((float)(*(float *)&v1557[1] * *((float *)&v1556 + 1))
                                       + (float)(*((float *)&v1555 + 2) * *((float *)v1557 + 1)))
                               + (float)(*(float *)v1557 * *((float *)&v1557[1] + 1));
            unsigned int v852 = (const float *)v1573;
            if (v1575 >= 8uLL)
            {
              unint64_t v853 = v1575 - (unint64_t)(v1575 & 7);
              int v855 = (float *)((char *)ptr + 8 * v853);
              int32x4_t v856 = (float *)((char *)v1573 + 12 * v853);
              float32x4_t v857 = (float32x4_t)vdupq_lane_s32(v830, 0);
              float32x4_t v858 = (float32x4_t)vdupq_lane_s32(v833, 0);
              float32x4_t v859 = (float32x4_t)vdupq_lane_s32(v835, 0);
              float32x4_t v860 = (float32x4_t)vdupq_lane_s32(v831, 0);
              float32x4_t v861 = (float32x4_t)vdupq_lane_s32(v834, 0);
              float32x4_t v862 = (float32x4_t)vdupq_lane_s32(v836, 0);
              uint64_t v863 = (const float *)((char *)ptr + 32);
              float32x4_t v864 = (float32x4_t)vdupq_lane_s32(v851, 0);
              int32x4_t v865 = 0uLL;
              unint64_t v866 = v853;
              float32x4_t v867 = (float32x4_t)vdupq_lane_s32(v832, 0);
              int32x4_t v868 = 0uLL;
              float32x4_t v869 = (float32x4_t)vdupq_lane_s32(v837, 0);
              do
              {
                float v870 = v852;
                float32x4x3_t v1628 = vld3q_f32(v870);
                v870 += 12;
                float32x4x3_t v1619 = vld3q_f32(v870);
                uint64_t v871 = v863 - 8;
                float32x4_t v872 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1628.val[1], *((float *)&v1555 + 3)), v1628.val[0], v857), v1628.val[2], v858), v859);
                float32x4_t v873 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1628.val[1], *(float *)&v1556), v1628.val[0], v860), v1628.val[2], v861), v862);
                float32x4_t v874 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1619.val[1], *((float *)&v1555 + 3)), v1619.val[0], v857), v1619.val[2], v858);
                float32x4_t v875 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1619.val[1], *(float *)&v1556), v1619.val[0], v860), v1619.val[2], v861);
                float32x4_t v876 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1619.val[1], *((float *)&v1556 + 1)), v1619.val[0], v864), v1619.val[2], v867);
                *(float32x4x2_t *)v1619.val[0].f32 = vld2q_f32(v871);
                v1619.val[2] = vsubq_f32(v874, v859);
                float32x4_t v877 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1628.val[1], *((float *)&v1556 + 1)), v1628.val[0], v864), v1628.val[2], v867), v869);
                *(float32x4x2_t *)v1628.val[0].f32 = vld2q_f32(v863);
                float32x4_t v878 = vmlsq_f32(v873, v872, v1619.val[0]);
                float32x4_t v879 = vmlsq_f32(v877, v872, v1619.val[1]);
                float32x4_t v880 = vmlsq_f32(vsubq_f32(v876, v869), v1619.val[2], v1628.val[0]);
                float32x4_t v882 = vmlsq_f32(vsubq_f32(v875, v862), v1619.val[2], v881);
                int32x4_t v865 = vsubq_s32(v865, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v872, v872), v1541), vmlaq_f32(vmulq_f32(v879, v879), v878, v878)), (int8x16_t)vcgtzq_f32(v872)));
                int32x4_t v868 = vsubq_s32(v868, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1619.val[2], v1619.val[2]), v1541), vmlaq_f32(vmulq_f32(v880, v880), v882, v882)), (int8x16_t)vcgtzq_f32(v1619.val[2])));
                v852 += 24;
                v863 += 16;
                v866 -= 8;
              }
              while (v866);
              int v854 = vaddvq_s32(vaddq_s32(v868, v865));
              *(float *)v836.i32 = (float)((float)(*(float *)&v1557[1] * *(float *)&v1556)
                                         + (float)(*((float *)&v1555 + 1) * *((float *)v1557 + 1)))
                                 + (float)(*((float *)&v1556 + 3) * *((float *)&v1557[1] + 1));
              *(float *)v835.i32 = (float)((float)(*((float *)&v1555 + 3) * *(float *)&v1557[1])
                                         + (float)(*(float *)&v1555 * *((float *)v1557 + 1)))
                                 + (float)(*((float *)&v1556 + 2) * *((float *)&v1557[1] + 1));
              *(float *)v837.i32 = (float)((float)(*(float *)&v1557[1] * *((float *)&v1556 + 1))
                                         + (float)(*((float *)&v1555 + 2) * *((float *)v1557 + 1)))
                                 + (float)(*(float *)v1557 * *((float *)&v1557[1] + 1));
              if ((v1575 & 7) == 0) {
                goto LABEL_646;
              }
            }
            else
            {
              LODWORD(v853) = 0;
              int v854 = 0;
              int v855 = (float *)ptr;
              int32x4_t v856 = (float *)v1573;
            }
            int v883 = v1575 - v853;
            do
            {
              float v884 = v856[1];
              float v885 = v856[2];
              float v886 = (float)((float)((float)(*((float *)&v1555 + 3) * v884) + (float)(*(float *)&v1555 * *v856))
                           + (float)(*((float *)&v1556 + 2) * v885))
                   - *(float *)v835.i32;
              float v887 = (float)((float)(*((float *)&v1556 + 1) * v884) + (float)(*((float *)&v1555 + 2) * *v856))
                   + (float)(*(float *)v1557 * v885);
              float v888 = (float)((float)((float)(*(float *)&v1556 * v884) + (float)(*((float *)&v1555 + 1) * *v856))
                           + (float)(*((float *)&v1556 + 3) * v885))
                   - *(float *)v836.i32;
              float v889 = *v855;
              float v890 = v855[1];
              v855 += 2;
              int v891 = (float)((float)((float)((float)(v887 - *(float *)v837.i32) - (float)(v890 * v886))
                                   * (float)((float)(v887 - *(float *)v837.i32) - (float)(v890 * v886)))
                           + (float)((float)(v888 - (float)(v889 * v886)) * (float)(v888 - (float)(v889 * v886)))) < (float)((float)(v886 * v886) * 0.000016);
              if (v886 <= 0.0) {
                int v891 = 0;
              }
              v854 += v891;
              v856 += 3;
              --v883;
            }
            while (v883);
LABEL_646:
            if (v1575 >= 1)
            {
              uint64_t v892 = 0;
              double v893 = 0;
              uint64_t v894 = 0;
              uint64_t v895 = 0;
              do
              {
                uint64_t v898 = v895 + 1;
                if (v895 >= v894)
                {
                  uint64_t v899 = 2 * v894;
                  if (!v894) {
                    uint64_t v899 = 32;
                  }
                  if (v899 <= v895) {
                    uint64_t v894 = v895 + 1;
                  }
                  else {
                    uint64_t v894 = v899;
                  }
                  if (v894)
                  {
                    double v893 = malloc_type_realloc(v893, 8 * v894, 0x8D151193uLL);
                    v1578[1] = v893;
                  }
                  *(void *)&long long v1579 = v894;
                }
                v1578[0] = (void *)(v895 + 1);
                *((void *)v893 + v895) = *((void *)ptr + v895);
                uint64_t v900 = *((void *)&v1579 + 1);
                uint64_t v901 = *((void *)&v1579 + 1) + 1;
                if (*((uint64_t *)&v1579 + 1) >= (uint64_t)v1580[1])
                {
                  uint64_t v902 = 21;
                  if (v1580[1]) {
                    uint64_t v902 = 2 * (uint64_t)v1580[1];
                  }
                  if (v902 <= *((uint64_t *)&v1579 + 1)) {
                    uint64_t v903 = *((void *)&v1579 + 1) + 1;
                  }
                  else {
                    uint64_t v903 = v902;
                  }
                  if (v903) {
                    v1580[0] = malloc_type_realloc(v1580[0], 12 * v903, 0x8F9A1826uLL);
                  }
                  v1580[1] = (void *)v903;
                }
                *((void *)&v1579 + 1) = v901;
                long long v896 = (char *)v1580[0] + 12 * v900;
                uint64_t v897 = *(void *)((char *)v1573 + v892);
                *((_DWORD *)v896 + 2) = *(_DWORD *)((char *)v1573 + v892 + 8);
                *(void *)long long v896 = v897;
                v892 += 12;
                uint64_t v895 = v898;
              }
              while (v1575 > v898);
            }
            float v904 = vl_pose_refine((float32x2_t *)&v1555, (uint64_t)v1578, (uint64_t *)&v1579 + 1, 2, (float32x2_t *)&v1555, 0, 1.0, 0.0, 0.0);
            if ((int)v1575 < 1)
            {
              uint64_t v915 = v1528;
              goto LABEL_719;
            }
            v911.i32[0] = DWORD2(v1555);
            LODWORD(v906) = DWORD1(v1555);
            LODWORD(v905) = v1555;
            LODWORD(v907) = v1557[0];
            v909.i32[0] = HIDWORD(v1556);
            v908.i32[0] = DWORD2(v1556);
            *(float *)v910.i32 = (float)((float)(*((float *)&v1555 + 3) * *(float *)&v1557[1])
                                       + (float)(*(float *)&v1555 * *((float *)v1557 + 1)))
                               + (float)(*((float *)&v1556 + 2) * *((float *)&v1557[1] + 1));
            *(float *)v912.i32 = (float)((float)(*(float *)&v1557[1] * *(float *)&v1556)
                                       + (float)(*((float *)&v1555 + 1) * *((float *)v1557 + 1)))
                               + (float)(*((float *)&v1556 + 3) * *((float *)&v1557[1] + 1));
            *(float *)v913.i32 = (float)((float)(*(float *)&v1557[1] * *((float *)&v1556 + 1))
                                       + (float)(*((float *)&v1555 + 2) * *((float *)v1557 + 1)))
                               + (float)(*(float *)v1557 * *((float *)&v1557[1] + 1));
            float32x4x3_t v914 = (const float *)v1573;
            uint64_t v915 = v1528;
            if (v1575 >= 8uLL)
            {
              float v1495 = v904;
              int v916 = v1575 & 0xFFFFFFF8;
              float32x4x3_t v918 = (float *)((char *)ptr + 8 * (v1575 & 0xFFFFFFF8));
              float32x4x3_t v919 = (float *)((char *)v1573 + 12 * (v1575 & 0xFFFFFFF8));
              float32x4_t v920 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v905, 0);
              float32x4_t v921 = (float32x4_t)vdupq_lane_s32(v908, 0);
              float32x4_t v922 = (float32x4_t)vdupq_lane_s32(v910, 0);
              float32x4_t v923 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v906, 0);
              float32x4_t v924 = (float32x4_t)vdupq_lane_s32(v909, 0);
              float32x4x3_t v925 = (const float *)((char *)ptr + 32);
              float32x4_t v926 = (float32x4_t)vdupq_lane_s32(v912, 0);
              float32x4_t v927 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v911.i8, 0);
              int32x4_t v911 = 0uLL;
              uint64_t v928 = v1575 & 0xFFFFFFF8;
              float32x4_t v929 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v907, 0);
              int32x4_t v930 = 0uLL;
              float32x4_t v931 = (float32x4_t)vdupq_lane_s32(v913, 0);
              do
              {
                uint64_t v932 = v914;
                float32x4x3_t v1620 = vld3q_f32(v932);
                v932 += 12;
                float32x4x3_t v1624 = vld3q_f32(v932);
                v933 = v925 - 8;
                float32x4_t v934 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1620.val[1], *((float *)&v1555 + 3)), v1620.val[0], v920), v1620.val[2], v921), v922);
                float32x4_t v935 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1620.val[1], *(float *)&v1556), v1620.val[0], v923), v1620.val[2], v924), v926);
                float32x4_t v936 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1620.val[1], *((float *)&v1556 + 1)), v1620.val[0], v927), v1620.val[2], v929);
                float32x4_t v937 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1624.val[1], *(float *)&v1556), v1624.val[0], v923), v1624.val[2], v924);
                float32x4_t v938 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1624.val[1], *((float *)&v1556 + 1)), v1624.val[0], v927), v1624.val[2], v929);
                *(float32x4x2_t *)v1620.val[0].f32 = vld2q_f32(v933);
                v1620.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1624.val[1], *((float *)&v1555 + 3)), v1624.val[0], v920), v1624.val[2], v921), v922);
                *(float32x4x2_t *)v1624.val[0].f32 = vld2q_f32(v925);
                float32x4_t v939 = vmlsq_f32(v935, v934, v1620.val[0]);
                float32x4_t v940 = vmlsq_f32(vsubq_f32(v936, v931), v934, v1620.val[1]);
                float32x4_t v941 = vmlsq_f32(vsubq_f32(v938, v931), v1620.val[2], v1624.val[1]);
                float32x4_t v942 = vmlsq_f32(vsubq_f32(v937, v926), v1620.val[2], v1624.val[0]);
                int32x4_t v911 = vsubq_s32(v911, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v934, v934), v1541), vmlaq_f32(vmulq_f32(v940, v940), v939, v939)), (int8x16_t)vcgtzq_f32(v934)));
                int32x4_t v930 = vsubq_s32(v930, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1620.val[2], v1620.val[2]), v1541), vmlaq_f32(vmulq_f32(v941, v941), v942, v942)), (int8x16_t)vcgtzq_f32(v1620.val[2])));
                v914 += 24;
                v925 += 16;
                v928 -= 8;
              }
              while (v928);
              int v917 = vaddvq_s32(vaddq_s32(v930, v911));
              float v904 = v1495;
              *(float *)v910.i32 = (float)((float)(*((float *)&v1555 + 3) * *(float *)&v1557[1])
                                         + (float)(*(float *)&v1555 * *((float *)v1557 + 1)))
                                 + (float)(*((float *)&v1556 + 2) * *((float *)&v1557[1] + 1));
              v911.i32[0] = DWORD2(v1555);
              *(float *)v913.i32 = (float)((float)(*(float *)&v1557[1] * *((float *)&v1556 + 1))
                                         + (float)(*((float *)&v1555 + 2) * *((float *)v1557 + 1)))
                                 + (float)(*(float *)v1557 * *((float *)&v1557[1] + 1));
              *(float *)v912.i32 = (float)((float)(*(float *)&v1557[1] * *(float *)&v1556)
                                         + (float)(*((float *)&v1555 + 1) * *((float *)v1557 + 1)))
                                 + (float)(*((float *)&v1556 + 3) * *((float *)&v1557[1] + 1));
              if ((v1575 & 7) == 0) {
                goto LABEL_678;
              }
            }
            else
            {
              int v916 = 0;
              int v917 = 0;
              float32x4x3_t v918 = (float *)ptr;
              float32x4x3_t v919 = (float *)v1573;
            }
            int v943 = v1575 - v916;
            do
            {
              float v944 = v919[1];
              float v945 = v919[2];
              float v946 = (float)((float)((float)(*((float *)&v1555 + 3) * v944) + (float)(*(float *)&v1555 * *v919))
                           + (float)(*((float *)&v1556 + 2) * v945))
                   - *(float *)v910.i32;
              float v947 = (float)((float)(*((float *)&v1556 + 1) * v944) + (float)(*(float *)v911.i32 * *v919))
                   + (float)(*(float *)v1557 * v945);
              float v948 = (float)((float)((float)(*(float *)&v1556 * v944) + (float)(*((float *)&v1555 + 1) * *v919))
                           + (float)(*((float *)&v1556 + 3) * v945))
                   - *(float *)v912.i32;
              float v949 = *v918;
              float v950 = v918[1];
              v918 += 2;
              int v951 = (float)((float)((float)((float)(v947 - *(float *)v913.i32) - (float)(v950 * v946))
                                   * (float)((float)(v947 - *(float *)v913.i32) - (float)(v950 * v946)))
                           + (float)((float)(v948 - (float)(v949 * v946)) * (float)(v948 - (float)(v949 * v946)))) < (float)((float)(v946 * v946) * 0.000016);
              if (v946 <= 0.0) {
                int v951 = 0;
              }
              v917 += v951;
              v919 += 3;
              --v943;
            }
            while (v943);
LABEL_678:
            if (v917 < v854 || v917 == 0) {
              goto LABEL_719;
            }
            long long v1566 = v1555;
            long long v1567 = v1556;
            HIDWORD(v953) = HIDWORD(v1557[0]);
            long long v1568 = *(_OWORD *)v1557;
            LODWORD(v953) = 998445679;
            vl_pose_count_inliers((uint64_t)&v1555, &v1575, (uint64_t)&v1572, 0, (uint64_t)v1578, fmaxf(v904 + v904, 0.004), v953, *(double *)&v1555, v905, v906, v907);
            float v954 = vl_pose_refine((float32x2_t *)&v1555, (uint64_t)v1578, (uint64_t *)&v1579 + 1, 2, (float32x2_t *)&v1555, 0, 1.0, 0.0, 0.0);
            if ((int)v1575 < 1)
            {
              int v966 = 0;
              goto LABEL_693;
            }
            v961.i32[0] = DWORD2(v1555);
            LODWORD(v956) = DWORD1(v1555);
            LODWORD(v955) = v1555;
            LODWORD(v957) = v1557[0];
            v959.i32[0] = HIDWORD(v1556);
            v958.i32[0] = DWORD2(v1556);
            *(float *)v960.i32 = (float)((float)(*((float *)&v1555 + 3) * *(float *)&v1557[1])
                                       + (float)(*(float *)&v1555 * *((float *)v1557 + 1)))
                               + (float)(*((float *)&v1556 + 2) * *((float *)&v1557[1] + 1));
            *(float *)v962.i32 = (float)((float)(*(float *)&v1557[1] * *(float *)&v1556)
                                       + (float)(*((float *)&v1555 + 1) * *((float *)v1557 + 1)))
                               + (float)(*((float *)&v1556 + 3) * *((float *)&v1557[1] + 1));
            *(float *)v963.i32 = (float)((float)(*(float *)&v1557[1] * *((float *)&v1556 + 1))
                                       + (float)(*((float *)&v1555 + 2) * *((float *)v1557 + 1)))
                               + (float)(*(float *)v1557 * *((float *)&v1557[1] + 1));
            float v964 = (const float *)v1573;
            if (v1575 >= 8uLL)
            {
              float v1496 = v954;
              int v965 = v1575 & 0xFFFFFFF8;
              float v967 = (float *)((char *)ptr + 8 * (v1575 & 0xFFFFFFF8));
              float v968 = (float *)((char *)v1573 + 12 * (v1575 & 0xFFFFFFF8));
              float32x4_t v969 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v955, 0);
              float32x4_t v970 = (float32x4_t)vdupq_lane_s32(v958, 0);
              float32x4_t v971 = (float32x4_t)vdupq_lane_s32(v960, 0);
              float32x4_t v972 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v956, 0);
              float32x4_t v973 = (float32x4_t)vdupq_lane_s32(v959, 0);
              float32x2_t v974 = (const float *)((char *)ptr + 32);
              float32x4_t v975 = (float32x4_t)vdupq_lane_s32(v962, 0);
              float32x4_t v976 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v961.i8, 0);
              int32x4_t v961 = 0uLL;
              uint64_t v977 = v1575 & 0xFFFFFFF8;
              float32x4_t v978 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v957, 0);
              int32x4_t v979 = 0uLL;
              float32x4_t v980 = (float32x4_t)vdupq_lane_s32(v963, 0);
              do
              {
                float v981 = v964;
                float32x4x3_t v1621 = vld3q_f32(v981);
                v981 += 12;
                float32x4x3_t v1625 = vld3q_f32(v981);
                float v982 = v974 - 8;
                float32x4_t v983 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1621.val[1], *((float *)&v1555 + 3)), v1621.val[0], v969), v1621.val[2], v970), v971);
                float32x4_t v984 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1621.val[1], *(float *)&v1556), v1621.val[0], v972), v1621.val[2], v973), v975);
                float32x4_t v985 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1621.val[1], *((float *)&v1556 + 1)), v1621.val[0], v976), v1621.val[2], v978);
                float32x4_t v986 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1625.val[1], *(float *)&v1556), v1625.val[0], v972), v1625.val[2], v973);
                float32x4_t v987 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1625.val[1], *((float *)&v1556 + 1)), v1625.val[0], v976), v1625.val[2], v978);
                *(float32x4x2_t *)v1621.val[0].f32 = vld2q_f32(v982);
                v1621.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1625.val[1], *((float *)&v1555 + 3)), v1625.val[0], v969), v1625.val[2], v970), v971);
                *(float32x4x2_t *)v1625.val[0].f32 = vld2q_f32(v974);
                float32x4_t v988 = vmlsq_f32(v984, v983, v1621.val[0]);
                float32x4_t v989 = vmlsq_f32(vsubq_f32(v985, v980), v983, v1621.val[1]);
                float32x4_t v990 = vmlsq_f32(vsubq_f32(v987, v980), v1621.val[2], v1625.val[1]);
                float32x4_t v991 = vmlsq_f32(vsubq_f32(v986, v975), v1621.val[2], v1625.val[0]);
                int32x4_t v961 = vsubq_s32(v961, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v983, v983), v1541), vmlaq_f32(vmulq_f32(v989, v989), v988, v988)), (int8x16_t)vcgtzq_f32(v983)));
                int32x4_t v979 = vsubq_s32(v979, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1621.val[2], v1621.val[2]), v1541), vmlaq_f32(vmulq_f32(v990, v990), v991, v991)), (int8x16_t)vcgtzq_f32(v1621.val[2])));
                v964 += 24;
                v974 += 16;
                v977 -= 8;
              }
              while (v977);
              int v966 = vaddvq_s32(vaddq_s32(v979, v961));
              float v954 = v1496;
              *(float *)v960.i32 = (float)((float)(*((float *)&v1555 + 3) * *(float *)&v1557[1])
                                         + (float)(*(float *)&v1555 * *((float *)v1557 + 1)))
                                 + (float)(*((float *)&v1556 + 2) * *((float *)&v1557[1] + 1));
              v961.i32[0] = DWORD2(v1555);
              *(float *)v963.i32 = (float)((float)(*(float *)&v1557[1] * *((float *)&v1556 + 1))
                                         + (float)(*((float *)&v1555 + 2) * *((float *)v1557 + 1)))
                                 + (float)(*(float *)v1557 * *((float *)&v1557[1] + 1));
              *(float *)v962.i32 = (float)((float)(*(float *)&v1557[1] * *(float *)&v1556)
                                         + (float)(*((float *)&v1555 + 1) * *((float *)v1557 + 1)))
                                 + (float)(*((float *)&v1556 + 3) * *((float *)&v1557[1] + 1));
              if ((v1575 & 7) == 0) {
                goto LABEL_693;
              }
            }
            else
            {
              int v965 = 0;
              int v966 = 0;
              float v967 = (float *)ptr;
              float v968 = (float *)v1573;
            }
            int v992 = v1575 - v965;
            do
            {
              float v993 = v968[1];
              float v994 = v968[2];
              float v995 = (float)((float)((float)(*((float *)&v1555 + 3) * v993) + (float)(*(float *)&v1555 * *v968))
                           + (float)(*((float *)&v1556 + 2) * v994))
                   - *(float *)v960.i32;
              float v996 = (float)((float)(*((float *)&v1556 + 1) * v993) + (float)(*(float *)v961.i32 * *v968))
                   + (float)(*(float *)v1557 * v994);
              float v997 = (float)((float)((float)(*(float *)&v1556 * v993) + (float)(*((float *)&v1555 + 1) * *v968))
                           + (float)(*((float *)&v1556 + 3) * v994))
                   - *(float *)v962.i32;
              float v998 = *v967;
              float v999 = v967[1];
              v967 += 2;
              int v1000 = (float)((float)((float)((float)(v996 - *(float *)v963.i32) - (float)(v999 * v995))
                                    * (float)((float)(v996 - *(float *)v963.i32) - (float)(v999 * v995)))
                            + (float)((float)(v997 - (float)(v998 * v995)) * (float)(v997 - (float)(v998 * v995)))) < (float)((float)(v995 * v995) * 0.000016);
              if (v995 <= 0.0) {
                int v1000 = 0;
              }
              v966 += v1000;
              v968 += 3;
              --v992;
            }
            while (v992);
LABEL_693:
            int v854 = v917;
            if (v966 < v917) {
              goto LABEL_719;
            }
            long long v1566 = v1555;
            long long v1567 = v1556;
            HIDWORD(v1001) = HIDWORD(v1557[0]);
            long long v1568 = *(_OWORD *)v1557;
            LODWORD(v1001) = 998445679;
            vl_pose_count_inliers((uint64_t)&v1555, &v1575, (uint64_t)&v1572, 0, (uint64_t)v1578, fmaxf(v954 + v954, 0.004), v1001, *(double *)&v1555, v955, v956, v957);
            float v1002 = vl_pose_refine((float32x2_t *)&v1555, (uint64_t)v1578, (uint64_t *)&v1579 + 1, 2, (float32x2_t *)&v1555, 0, 1.0, 0.0, 0.0);
            if ((int)v1575 < 1)
            {
              int v1014 = 0;
              goto LABEL_705;
            }
            v1009.i32[0] = DWORD2(v1555);
            LODWORD(v1004) = DWORD1(v1555);
            LODWORD(v1003) = v1555;
            LODWORD(v1005) = v1557[0];
            v1007.i32[0] = HIDWORD(v1556);
            v1006.i32[0] = DWORD2(v1556);
            *(float *)v1008.i32 = (float)((float)(*((float *)&v1555 + 3) * *(float *)&v1557[1])
                                        + (float)(*(float *)&v1555 * *((float *)v1557 + 1)))
                                + (float)(*((float *)&v1556 + 2) * *((float *)&v1557[1] + 1));
            *(float *)v1010.i32 = (float)((float)(*(float *)&v1557[1] * *(float *)&v1556)
                                        + (float)(*((float *)&v1555 + 1) * *((float *)v1557 + 1)))
                                + (float)(*((float *)&v1556 + 3) * *((float *)&v1557[1] + 1));
            *(float *)v1011.i32 = (float)((float)(*(float *)&v1557[1] * *((float *)&v1556 + 1))
                                        + (float)(*((float *)&v1555 + 2) * *((float *)v1557 + 1)))
                                + (float)(*(float *)v1557 * *((float *)&v1557[1] + 1));
            v1012 = (const float *)v1573;
            if (v1575 >= 8uLL)
            {
              float v1497 = v1002;
              int v1013 = v1575 & 0xFFFFFFF8;
              v1015 = (float *)((char *)ptr + 8 * (v1575 & 0xFFFFFFF8));
              v1016 = (float *)((char *)v1573 + 12 * (v1575 & 0xFFFFFFF8));
              float32x4_t v1017 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1003, 0);
              float32x4_t v1018 = (float32x4_t)vdupq_lane_s32(v1006, 0);
              float32x4_t v1019 = (float32x4_t)vdupq_lane_s32(v1008, 0);
              float32x4_t v1020 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1004, 0);
              float32x4_t v1021 = (float32x4_t)vdupq_lane_s32(v1007, 0);
              v1022 = (const float *)((char *)ptr + 32);
              float32x4_t v1023 = (float32x4_t)vdupq_lane_s32(v1010, 0);
              float32x4_t v1024 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1009.i8, 0);
              int32x4_t v1009 = 0uLL;
              uint64_t v1025 = v1575 & 0xFFFFFFF8;
              float32x4_t v1026 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1005, 0);
              int32x4_t v1027 = 0uLL;
              float32x4_t v1028 = (float32x4_t)vdupq_lane_s32(v1011, 0);
              do
              {
                v1029 = v1012;
                float32x4x3_t v1622 = vld3q_f32(v1029);
                v1029 += 12;
                float32x4x3_t v1626 = vld3q_f32(v1029);
                v1030 = v1022 - 8;
                float32x4_t v1031 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1622.val[1], *((float *)&v1555 + 3)), v1622.val[0], v1017), v1622.val[2], v1018), v1019);
                float32x4_t v1032 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1622.val[1], *(float *)&v1556), v1622.val[0], v1020), v1622.val[2], v1021), v1023);
                float32x4_t v1033 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1622.val[1], *((float *)&v1556 + 1)), v1622.val[0], v1024), v1622.val[2], v1026);
                float32x4_t v1034 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1626.val[1], *(float *)&v1556), v1626.val[0], v1020), v1626.val[2], v1021);
                float32x4_t v1035 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1626.val[1], *((float *)&v1556 + 1)), v1626.val[0], v1024), v1626.val[2], v1026);
                *(float32x4x2_t *)v1622.val[0].f32 = vld2q_f32(v1030);
                v1622.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1626.val[1], *((float *)&v1555 + 3)), v1626.val[0], v1017), v1626.val[2], v1018), v1019);
                *(float32x4x2_t *)v1626.val[0].f32 = vld2q_f32(v1022);
                float32x4_t v1036 = vmlsq_f32(v1032, v1031, v1622.val[0]);
                float32x4_t v1037 = vmlsq_f32(vsubq_f32(v1033, v1028), v1031, v1622.val[1]);
                float32x4_t v1038 = vmlsq_f32(vsubq_f32(v1035, v1028), v1622.val[2], v1626.val[1]);
                float32x4_t v1039 = vmlsq_f32(vsubq_f32(v1034, v1023), v1622.val[2], v1626.val[0]);
                int32x4_t v1009 = vsubq_s32(v1009, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1031, v1031), v1541), vmlaq_f32(vmulq_f32(v1037, v1037), v1036, v1036)), (int8x16_t)vcgtzq_f32(v1031)));
                int32x4_t v1027 = vsubq_s32(v1027, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1622.val[2], v1622.val[2]), v1541), vmlaq_f32(vmulq_f32(v1038, v1038), v1039, v1039)), (int8x16_t)vcgtzq_f32(v1622.val[2])));
                v1012 += 24;
                v1022 += 16;
                v1025 -= 8;
              }
              while (v1025);
              int v1014 = vaddvq_s32(vaddq_s32(v1027, v1009));
              float v1002 = v1497;
              *(float *)v1008.i32 = (float)((float)(*((float *)&v1555 + 3) * *(float *)&v1557[1])
                                          + (float)(*(float *)&v1555 * *((float *)v1557 + 1)))
                                  + (float)(*((float *)&v1556 + 2) * *((float *)&v1557[1] + 1));
              v1009.i32[0] = DWORD2(v1555);
              *(float *)v1011.i32 = (float)((float)(*(float *)&v1557[1] * *((float *)&v1556 + 1))
                                          + (float)(*((float *)&v1555 + 2) * *((float *)v1557 + 1)))
                                  + (float)(*(float *)v1557 * *((float *)&v1557[1] + 1));
              *(float *)v1010.i32 = (float)((float)(*(float *)&v1557[1] * *(float *)&v1556)
                                          + (float)(*((float *)&v1555 + 1) * *((float *)v1557 + 1)))
                                  + (float)(*((float *)&v1556 + 3) * *((float *)&v1557[1] + 1));
              if ((v1575 & 7) == 0) {
                goto LABEL_705;
              }
            }
            else
            {
              int v1013 = 0;
              int v1014 = 0;
              v1015 = (float *)ptr;
              v1016 = (float *)v1573;
            }
            int v1040 = v1575 - v1013;
            do
            {
              float v1041 = v1016[1];
              float v1042 = v1016[2];
              float v1043 = (float)((float)((float)(*((float *)&v1555 + 3) * v1041) + (float)(*(float *)&v1555 * *v1016))
                            + (float)(*((float *)&v1556 + 2) * v1042))
                    - *(float *)v1008.i32;
              float v1044 = (float)((float)(*((float *)&v1556 + 1) * v1041) + (float)(*(float *)v1009.i32 * *v1016))
                    + (float)(*(float *)v1557 * v1042);
              float v1045 = (float)((float)((float)(*(float *)&v1556 * v1041) + (float)(*((float *)&v1555 + 1) * *v1016))
                            + (float)(*((float *)&v1556 + 3) * v1042))
                    - *(float *)v1010.i32;
              float v1046 = *v1015;
              float v1047 = v1015[1];
              v1015 += 2;
              int v1048 = (float)((float)((float)((float)(v1044 - *(float *)v1011.i32) - (float)(v1047 * v1043))
                                    * (float)((float)(v1044 - *(float *)v1011.i32) - (float)(v1047 * v1043)))
                            + (float)((float)(v1045 - (float)(v1046 * v1043)) * (float)(v1045 - (float)(v1046 * v1043)))) < (float)((float)(v1043 * v1043) * 0.000016);
              if (v1043 <= 0.0) {
                int v1048 = 0;
              }
              v1014 += v1048;
              v1016 += 3;
              --v1040;
            }
            while (v1040);
LABEL_705:
            int v854 = v966;
            if (v1014 >= v966)
            {
              long long v1566 = v1555;
              long long v1567 = v1556;
              HIDWORD(v1049) = HIDWORD(v1557[0]);
              long long v1568 = *(_OWORD *)v1557;
              LODWORD(v1049) = 998445679;
              vl_pose_count_inliers((uint64_t)&v1555, &v1575, (uint64_t)&v1572, 0, (uint64_t)v1578, fmaxf(v1002 + v1002, 0.004), v1049, *(double *)&v1555, v1003, v1004, v1005);
              float v1050 = vl_pose_refine((float32x2_t *)&v1555, (uint64_t)v1578, (uint64_t *)&v1579 + 1, 2, (float32x2_t *)&v1555, 0, 1.0, 0.0, 0.0);
              if ((int)v1575 < 1)
              {
                int v1062 = 0;
              }
              else
              {
                v1057.i32[0] = DWORD2(v1555);
                LODWORD(v1052) = DWORD1(v1555);
                LODWORD(v1051) = v1555;
                LODWORD(v1053) = v1557[0];
                v1055.i32[0] = HIDWORD(v1556);
                v1054.i32[0] = DWORD2(v1556);
                *(float *)v1056.i32 = (float)((float)(*((float *)&v1555 + 3) * *(float *)&v1557[1])
                                            + (float)(*(float *)&v1555 * *((float *)v1557 + 1)))
                                    + (float)(*((float *)&v1556 + 2) * *((float *)&v1557[1] + 1));
                *(float *)v1058.i32 = (float)((float)(*(float *)&v1557[1] * *(float *)&v1556)
                                            + (float)(*((float *)&v1555 + 1) * *((float *)v1557 + 1)))
                                    + (float)(*((float *)&v1556 + 3) * *((float *)&v1557[1] + 1));
                *(float *)v1059.i32 = (float)((float)(*(float *)&v1557[1] * *((float *)&v1556 + 1))
                                            + (float)(*((float *)&v1555 + 2) * *((float *)v1557 + 1)))
                                    + (float)(*(float *)v1557 * *((float *)&v1557[1] + 1));
                v1060 = (const float *)v1573;
                if (v1575 >= 8uLL)
                {
                  float v1498 = v1050;
                  int v1061 = v1575 & 0xFFFFFFF8;
                  v1063 = (float *)((char *)ptr + 8 * (v1575 & 0xFFFFFFF8));
                  v1064 = (float *)((char *)v1573 + 12 * (v1575 & 0xFFFFFFF8));
                  float32x4_t v1065 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1051, 0);
                  float32x4_t v1066 = (float32x4_t)vdupq_lane_s32(v1054, 0);
                  float32x4_t v1067 = (float32x4_t)vdupq_lane_s32(v1056, 0);
                  float32x4_t v1068 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1052, 0);
                  float32x4_t v1069 = (float32x4_t)vdupq_lane_s32(v1055, 0);
                  v1070 = (const float *)((char *)ptr + 32);
                  float32x4_t v1071 = (float32x4_t)vdupq_lane_s32(v1058, 0);
                  float32x4_t v1072 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1057.i8, 0);
                  int32x4_t v1057 = 0uLL;
                  uint64_t v1073 = v1575 & 0xFFFFFFF8;
                  float32x4_t v1074 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1053, 0);
                  int32x4_t v1075 = 0uLL;
                  float32x4_t v1076 = (float32x4_t)vdupq_lane_s32(v1059, 0);
                  do
                  {
                    v1077 = v1060;
                    float32x4x3_t v1623 = vld3q_f32(v1077);
                    v1077 += 12;
                    float32x4x3_t v1627 = vld3q_f32(v1077);
                    v1078 = v1070 - 8;
                    float32x4_t v1079 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1623.val[1], *((float *)&v1555 + 3)), v1623.val[0], v1065), v1623.val[2], v1066), v1067);
                    float32x4_t v1080 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1623.val[1], *(float *)&v1556), v1623.val[0], v1068), v1623.val[2], v1069), v1071);
                    float32x4_t v1081 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1623.val[1], *((float *)&v1556 + 1)), v1623.val[0], v1072), v1623.val[2], v1074);
                    float32x4_t v1082 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1627.val[1], *(float *)&v1556), v1627.val[0], v1068), v1627.val[2], v1069);
                    float32x4_t v1083 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1627.val[1], *((float *)&v1556 + 1)), v1627.val[0], v1072), v1627.val[2], v1074);
                    *(float32x4x2_t *)v1623.val[0].f32 = vld2q_f32(v1078);
                    v1623.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1627.val[1], *((float *)&v1555 + 3)), v1627.val[0], v1065), v1627.val[2], v1066), v1067);
                    *(float32x4x2_t *)v1627.val[0].f32 = vld2q_f32(v1070);
                    float32x4_t v1084 = vmlsq_f32(v1080, v1079, v1623.val[0]);
                    float32x4_t v1085 = vmlsq_f32(vsubq_f32(v1081, v1076), v1079, v1623.val[1]);
                    float32x4_t v1086 = vmlsq_f32(vsubq_f32(v1083, v1076), v1623.val[2], v1627.val[1]);
                    float32x4_t v1087 = vmlsq_f32(vsubq_f32(v1082, v1071), v1623.val[2], v1627.val[0]);
                    int32x4_t v1057 = vsubq_s32(v1057, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1079, v1079), v1541), vmlaq_f32(vmulq_f32(v1085, v1085), v1084, v1084)), (int8x16_t)vcgtzq_f32(v1079)));
                    int32x4_t v1075 = vsubq_s32(v1075, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1623.val[2], v1623.val[2]), v1541), vmlaq_f32(vmulq_f32(v1086, v1086), v1087, v1087)), (int8x16_t)vcgtzq_f32(v1623.val[2])));
                    v1060 += 24;
                    v1070 += 16;
                    v1073 -= 8;
                  }
                  while (v1073);
                  int v1062 = vaddvq_s32(vaddq_s32(v1075, v1057));
                  float v1050 = v1498;
                  *(float *)v1056.i32 = (float)((float)(*((float *)&v1555 + 3) * *(float *)&v1557[1])
                                              + (float)(*(float *)&v1555 * *((float *)v1557 + 1)))
                                      + (float)(*((float *)&v1556 + 2) * *((float *)&v1557[1] + 1));
                  v1057.i32[0] = DWORD2(v1555);
                  *(float *)v1059.i32 = (float)((float)(*(float *)&v1557[1] * *((float *)&v1556 + 1))
                                              + (float)(*((float *)&v1555 + 2) * *((float *)v1557 + 1)))
                                      + (float)(*(float *)v1557 * *((float *)&v1557[1] + 1));
                  *(float *)v1058.i32 = (float)((float)(*(float *)&v1557[1] * *(float *)&v1556)
                                              + (float)(*((float *)&v1555 + 1) * *((float *)v1557 + 1)))
                                      + (float)(*((float *)&v1556 + 3) * *((float *)&v1557[1] + 1));
                  if ((v1575 & 7) != 0) {
                    goto LABEL_713;
                  }
                }
                else
                {
                  int v1061 = 0;
                  int v1062 = 0;
                  v1063 = (float *)ptr;
                  v1064 = (float *)v1573;
LABEL_713:
                  int v1088 = v1575 - v1061;
                  do
                  {
                    float v1089 = v1064[1];
                    float v1090 = v1064[2];
                    float v1091 = (float)((float)((float)(*((float *)&v1555 + 3) * v1089) + (float)(*(float *)&v1555 * *v1064))
                                  + (float)(*((float *)&v1556 + 2) * v1090))
                          - *(float *)v1056.i32;
                    float v1092 = (float)((float)(*((float *)&v1556 + 1) * v1089) + (float)(*(float *)v1057.i32 * *v1064))
                          + (float)(*(float *)v1557 * v1090);
                    float v1093 = (float)((float)((float)(*(float *)&v1556 * v1089) + (float)(*((float *)&v1555 + 1) * *v1064))
                                  + (float)(*((float *)&v1556 + 3) * v1090))
                          - *(float *)v1058.i32;
                    float v1094 = *v1063;
                    float v1095 = v1063[1];
                    v1063 += 2;
                    int v1096 = (float)((float)((float)((float)(v1092 - *(float *)v1059.i32) - (float)(v1095 * v1091))
                                          * (float)((float)(v1092 - *(float *)v1059.i32) - (float)(v1095 * v1091)))
                                  + (float)((float)(v1093 - (float)(v1094 * v1091))
                                          * (float)(v1093 - (float)(v1094 * v1091)))) < (float)((float)(v1091 * v1091)
                                                                                              * 0.000016);
                    if (v1091 <= 0.0) {
                      int v1096 = 0;
                    }
                    v1062 += v1096;
                    v1064 += 3;
                    --v1088;
                  }
                  while (v1088);
                }
              }
              int v854 = v1014;
              if (v1062 >= v1014)
              {
                long long v1566 = v1555;
                long long v1567 = v1556;
                HIDWORD(v1097) = HIDWORD(v1557[0]);
                long long v1568 = *(_OWORD *)v1557;
                LODWORD(v1097) = 998445679;
                vl_pose_count_inliers((uint64_t)&v1555, &v1575, (uint64_t)&v1572, 0, (uint64_t)v1578, fmaxf(v1050 + v1050, 0.004), v1097, *(double *)&v1555, v1051, v1052, v1053);
                int v854 = v1062;
              }
            }
LABEL_719:
            free(v1578[1]);
            free(v1580[0]);
            free(v1581[1]);
            float v1098 = (float)(32 * v854);
            unint64_t v1099 = v1514 + 160 * v915;
            *(float *)(v1099 + 4) = v1098;
            unint64_t v1100 = v1099 + 4;
            long long v1101 = v1566;
            long long v1102 = v1567;
            *(_OWORD *)(v1100 + 6_Block_object_dispose(&STACK[0x220], 8) = v1568;
            *(_OWORD *)(v1100 + 52) = v1102;
            *(_OWORD *)(v1100 + 36) = v1101;
            uint64_t v5 = v1434;
            double v1103 = *(float *)(*(void *)&v1435[18] + 236) * *(float *)(v1100 + 64)
                  + *(float *)(v1100 + 60) * *(float *)(*(void *)&v1435[18] + 232)
                  + *(float *)(v1100 + 68) * *(float *)(*(void *)&v1435[18] + 240);
            double v1104 = fabs(v1103);
            double v1105 = cosf(*(float *)(v1434 + 140));
            if (v1515)
            {
              printf("Info : ");
              double v1106 = (float)(*(float *)v1100 * 0.03125);
              float v1107 = v1103;
              float v1108 = acosf(v1107);
              printf(" score: %6.3f (gravity test: %d (%f degrees))", v1106, v1104 > v1105, v1108 * 180.0 / 3.14159265);
              putchar(10);
            }
            uint64_t v6 = v1429;
            if (v1104 <= v1105) {
              *(_DWORD *)unint64_t v1100 = 0;
            }
            float v10 = v1430;
            if (v1515)
            {
              LODWORD(v1578[0]) = 0;
              LODWORD(v1555) = 0;
              vl_gt_get_pose_err(v1435 + 12, (float32x2_t *)(v1100 + 36), (float *)v1578, (float *)&v1555);
              printf("Info : ");
              printf("  diff from gt : (%s%.2f%s, %s%.2f%s)", "", *(float *)&v1555 * 180.0 / 3.14159265, "", "", *(float *)v1578, "");
              putchar(10);
            }
            uint64_t v824 = v915 + 1;
          }
          while (v824 != v1502);
        }
        v1109 = (char *)malloc_type_malloc(0x200uLL, 0xD6D21C9FuLL);
        unint64_t v1110 = *v10;
        if (*v10)
        {
          uint64_t v1111 = 0;
          BOOL v1112 = 1;
          uint64_t v1113 = v10[1];
          uint64_t v1114 = 32;
          long long v1115 = 0uLL;
          while (1)
          {
            uint64_t v1116 = v1111;
            while (1)
            {
              if (!v1112)
              {
                --v1116;
                v1117 = &v1109[16 * v1116];
                unint64_t v1110 = *((void *)v1117 + 1);
                uint64_t v1113 = v10[1] + 160 * *(void *)v1117;
              }
              if ((uint64_t)v1110 > 15) {
                break;
              }
              if ((uint64_t)v1110 > 1)
              {
                uint64_t v1118 = v1113 + 160;
                uint64_t v1119 = 2;
                for (uint64_t i = 1; i != v1110; ++i)
                {
                  uint64_t v1121 = v1118;
                  uint64_t v1122 = v1119;
                  do
                  {
                    if ((float)(*(float *)(v1113 + 160 * (v1122 - 2) + 4) - *(float *)(v1121 + 4)) >= 0.0) {
                      break;
                    }
                    v1123 = (_OWORD *)(v1113 + 160 * (v1122 - 2));
                    long long v1587 = v1115;
                    long long v1586 = v1115;
                    long long v1585 = v1115;
                    long long v1584 = v1115;
                    long long v1583 = v1115;
                    long long v1582 = v1115;
                    *(_OWORD *)v1581 = v1115;
                    *(_OWORD *)v1580 = v1115;
                    long long v1579 = v1115;
                    *(_OWORD *)v1578 = v1115;
                    long long v1124 = *(_OWORD *)v1121;
                    long long v1579 = *(_OWORD *)(v1121 + 16);
                    *(_OWORD *)v1578 = v1124;
                    long long v1125 = *(_OWORD *)(v1121 + 32);
                    long long v1126 = *(_OWORD *)(v1121 + 48);
                    long long v1127 = *(_OWORD *)(v1121 + 64);
                    long long v1583 = *(_OWORD *)(v1121 + 80);
                    long long v1582 = v1127;
                    *(_OWORD *)v1581 = v1126;
                    *(_OWORD *)v1580 = v1125;
                    long long v1128 = *(_OWORD *)(v1121 + 96);
                    long long v1129 = *(_OWORD *)(v1121 + 112);
                    long long v1130 = *(_OWORD *)(v1121 + 128);
                    long long v1587 = *(_OWORD *)(v1121 + 144);
                    long long v1586 = v1130;
                    long long v1585 = v1129;
                    long long v1584 = v1128;
                    long long v1131 = v1123[1];
                    *(_OWORD *)uint64_t v1121 = *v1123;
                    *(_OWORD *)(v1121 + 16) = v1131;
                    long long v1132 = v1123[2];
                    long long v1133 = v1123[3];
                    long long v1134 = v1123[5];
                    *(_OWORD *)(v1121 + 64) = v1123[4];
                    *(_OWORD *)(v1121 + 80) = v1134;
                    *(_OWORD *)(v1121 + 32) = v1132;
                    *(_OWORD *)(v1121 + 4_Block_object_dispose(&STACK[0x220], 8) = v1133;
                    long long v1135 = v1123[6];
                    long long v1136 = v1123[7];
                    long long v1137 = v1123[9];
                    *(_OWORD *)(v1121 + 12_Block_object_dispose(&STACK[0x220], 8) = v1123[8];
                    *(_OWORD *)(v1121 + 144) = v1137;
                    *(_OWORD *)(v1121 + 96) = v1135;
                    *(_OWORD *)(v1121 + 112) = v1136;
                    long long v1138 = v1579;
                    _OWORD *v1123 = *(_OWORD *)v1578;
                    v1123[1] = v1138;
                    long long v1139 = *(_OWORD *)v1580;
                    long long v1140 = *(_OWORD *)v1581;
                    long long v1141 = v1583;
                    v1123[4] = v1582;
                    v1123[5] = v1141;
                    v1123[2] = v1139;
                    v1123[3] = v1140;
                    long long v1142 = v1584;
                    long long v1143 = v1585;
                    long long v1144 = v1587;
                    v1123[8] = v1586;
                    v1123[9] = v1144;
                    v1123[6] = v1142;
                    v1123[7] = v1143;
                    --v1122;
                    v1121 -= 160;
                  }
                  while (v1122 > 1);
                  ++v1119;
                  v1118 += 160;
                }
              }
              BOOL v1112 = 0;
              unint64_t v1110 = 0;
              if (v1116 < 1) {
                goto LABEL_794;
              }
            }
            if (v1110 > 0x27) {
              break;
            }
            unint64_t v1145 = v1110 >> 1;
            float v1146 = *(float *)(v1113 + 160 * (v1110 >> 1) + 4);
            float v1147 = *(float *)(v1113 + 4);
            float v1148 = *(float *)(v1113 + 160 * (v1110 - 1) + 4);
            if ((float)(v1146 - v1147) >= 0.0)
            {
              if ((float)(v1148 - v1147) >= 0.0)
              {
                if ((float)(v1148 - v1146) < 0.0) {
                  unint64_t v1145 = v1110 - 1;
                }
              }
              else
              {
                unint64_t v1145 = 0;
              }
            }
            else if ((float)(v1148 - v1146) >= 0.0)
            {
              if ((float)(v1148 - v1147) >= 0.0) {
                unint64_t v1145 = 0;
              }
              else {
                unint64_t v1145 = v1110 - 1;
              }
            }
LABEL_777:
            uint64_t v1169 = 0;
            uint64_t v1170 = 0;
            long long v1587 = v1115;
            long long v1586 = v1115;
            long long v1585 = v1115;
            long long v1584 = v1115;
            long long v1583 = v1115;
            long long v1582 = v1115;
            *(_OWORD *)v1581 = v1115;
            *(_OWORD *)v1580 = v1115;
            long long v1579 = v1115;
            *(_OWORD *)v1578 = v1115;
            long long v1171 = *(_OWORD *)v1113;
            long long v1579 = *(_OWORD *)(v1113 + 16);
            *(_OWORD *)v1578 = v1171;
            long long v1172 = *(_OWORD *)(v1113 + 32);
            long long v1173 = *(_OWORD *)(v1113 + 48);
            long long v1174 = *(_OWORD *)(v1113 + 64);
            long long v1583 = *(_OWORD *)(v1113 + 80);
            long long v1582 = v1174;
            *(_OWORD *)v1581 = v1173;
            *(_OWORD *)v1580 = v1172;
            long long v1175 = *(_OWORD *)(v1113 + 96);
            long long v1176 = *(_OWORD *)(v1113 + 112);
            long long v1177 = *(_OWORD *)(v1113 + 128);
            long long v1587 = *(_OWORD *)(v1113 + 144);
            long long v1586 = v1177;
            long long v1585 = v1176;
            long long v1584 = v1175;
            v1178 = (_OWORD *)(v1113 + 160 * v1145);
            long long v1179 = v1178[1];
            *(_OWORD *)uint64_t v1113 = *v1178;
            *(_OWORD *)(v1113 + 16) = v1179;
            long long v1180 = v1178[2];
            long long v1181 = v1178[3];
            long long v1182 = v1178[5];
            *(_OWORD *)(v1113 + 64) = v1178[4];
            *(_OWORD *)(v1113 + 80) = v1182;
            *(_OWORD *)(v1113 + 32) = v1180;
            *(_OWORD *)(v1113 + 4_Block_object_dispose(&STACK[0x220], 8) = v1181;
            long long v1183 = v1178[6];
            long long v1184 = v1178[7];
            long long v1185 = v1178[9];
            *(_OWORD *)(v1113 + 12_Block_object_dispose(&STACK[0x220], 8) = v1178[8];
            *(_OWORD *)(v1113 + 144) = v1185;
            *(_OWORD *)(v1113 + 96) = v1183;
            *(_OWORD *)(v1113 + 112) = v1184;
            long long v1186 = v1579;
            _OWORD *v1178 = *(_OWORD *)v1578;
            v1178[1] = v1186;
            long long v1187 = *(_OWORD *)v1580;
            long long v1188 = *(_OWORD *)v1581;
            long long v1189 = v1583;
            v1178[4] = v1582;
            v1178[5] = v1189;
            v1178[2] = v1187;
            v1178[3] = v1188;
            long long v1190 = v1584;
            long long v1191 = v1585;
            long long v1192 = v1587;
            v1178[8] = v1586;
            v1178[9] = v1192;
            v1178[6] = v1190;
            v1178[7] = v1191;
            unint64_t v1193 = v1110 - 1;
            uint64_t v1194 = v1113 + 164;
            do
            {
              if ((float)(*(float *)(v1113 + 4) - *(float *)v1194) <= 0.0)
              {
                ++v1170;
                long long v1587 = v1115;
                long long v1586 = v1115;
                long long v1585 = v1115;
                long long v1584 = v1115;
                long long v1583 = v1115;
                long long v1582 = v1115;
                *(_OWORD *)v1581 = v1115;
                *(_OWORD *)v1580 = v1115;
                long long v1579 = v1115;
                *(_OWORD *)v1578 = v1115;
                long long v1195 = *(_OWORD *)(v1194 - 4);
                long long v1579 = *(_OWORD *)(v1194 + 12);
                *(_OWORD *)v1578 = v1195;
                long long v1196 = *(_OWORD *)(v1194 + 28);
                long long v1197 = *(_OWORD *)(v1194 + 44);
                long long v1198 = *(_OWORD *)(v1194 + 60);
                long long v1583 = *(_OWORD *)(v1194 + 76);
                long long v1582 = v1198;
                *(_OWORD *)v1581 = v1197;
                *(_OWORD *)v1580 = v1196;
                long long v1199 = *(_OWORD *)(v1194 + 92);
                long long v1200 = *(_OWORD *)(v1194 + 108);
                long long v1201 = *(_OWORD *)(v1194 + 124);
                long long v1587 = *(_OWORD *)(v1194 + 140);
                long long v1586 = v1201;
                long long v1585 = v1200;
                long long v1584 = v1199;
                v1202 = (long long *)(v1113 + 160 * v1170);
                long long v1203 = *v1202;
                *(_OWORD *)(v1194 + 12) = v1202[1];
                *(_OWORD *)(v1194 - 4) = v1203;
                long long v1204 = v1202[2];
                long long v1205 = v1202[3];
                long long v1206 = v1202[4];
                *(_OWORD *)(v1194 + 76) = v1202[5];
                *(_OWORD *)(v1194 + 60) = v1206;
                *(_OWORD *)(v1194 + 44) = v1205;
                *(_OWORD *)(v1194 + 2_Block_object_dispose(&STACK[0x220], 8) = v1204;
                long long v1207 = v1202[6];
                long long v1208 = v1202[7];
                long long v1209 = v1202[8];
                *(_OWORD *)(v1194 + 140) = v1202[9];
                *(_OWORD *)(v1194 + 124) = v1209;
                *(_OWORD *)(v1194 + 10_Block_object_dispose(&STACK[0x220], 8) = v1208;
                *(_OWORD *)(v1194 + 92) = v1207;
                long long v1210 = v1579;
                long long *v1202 = *(_OWORD *)v1578;
                v1202[1] = v1210;
                long long v1211 = *(_OWORD *)v1580;
                long long v1212 = *(_OWORD *)v1581;
                long long v1213 = v1583;
                v1202[4] = v1582;
                v1202[5] = v1213;
                v1202[2] = v1211;
                v1202[3] = v1212;
                long long v1214 = v1584;
                long long v1215 = v1585;
                long long v1216 = v1587;
                v1202[8] = v1586;
                v1202[9] = v1216;
                v1202[6] = v1214;
                v1202[7] = v1215;
                if ((float)(*(float *)(v1113 + 4) - *(float *)v1194) == 0.0)
                {
                  ++v1169;
                  long long v1587 = v1115;
                  long long v1586 = v1115;
                  long long v1585 = v1115;
                  long long v1584 = v1115;
                  long long v1583 = v1115;
                  long long v1582 = v1115;
                  *(_OWORD *)v1581 = v1115;
                  *(_OWORD *)v1580 = v1115;
                  long long v1579 = v1115;
                  *(_OWORD *)v1578 = v1115;
                  long long v1217 = *v1202;
                  long long v1579 = v1202[1];
                  *(_OWORD *)v1578 = v1217;
                  long long v1218 = v1202[2];
                  long long v1219 = v1202[3];
                  long long v1220 = v1202[4];
                  long long v1583 = v1202[5];
                  long long v1582 = v1220;
                  *(_OWORD *)v1581 = v1219;
                  *(_OWORD *)v1580 = v1218;
                  long long v1221 = v1202[6];
                  long long v1222 = v1202[7];
                  long long v1223 = v1202[8];
                  long long v1587 = v1202[9];
                  long long v1586 = v1223;
                  long long v1585 = v1222;
                  long long v1584 = v1221;
                  v1224 = (long long *)(v1113 + 160 * v1169);
                  long long v1225 = v1224[1];
                  long long *v1202 = *v1224;
                  v1202[1] = v1225;
                  long long v1226 = v1224[2];
                  long long v1227 = v1224[3];
                  long long v1228 = v1224[5];
                  v1202[4] = v1224[4];
                  v1202[5] = v1228;
                  v1202[2] = v1226;
                  v1202[3] = v1227;
                  long long v1229 = v1224[6];
                  long long v1230 = v1224[7];
                  long long v1231 = v1224[9];
                  v1202[8] = v1224[8];
                  v1202[9] = v1231;
                  v1202[6] = v1229;
                  v1202[7] = v1230;
                  long long v1232 = v1579;
                  long long *v1224 = *(_OWORD *)v1578;
                  v1224[1] = v1232;
                  long long v1233 = *(_OWORD *)v1580;
                  long long v1234 = *(_OWORD *)v1581;
                  long long v1235 = v1583;
                  v1224[4] = v1582;
                  v1224[5] = v1235;
                  v1224[2] = v1233;
                  v1224[3] = v1234;
                  long long v1236 = v1584;
                  long long v1237 = v1585;
                  long long v1238 = v1587;
                  v1224[8] = v1586;
                  v1224[9] = v1238;
                  v1224[6] = v1236;
                  v1224[7] = v1237;
                }
              }
              v1194 += 160;
              --v1193;
            }
            while (v1193);
            uint64_t v1239 = v1169 + 1;
            uint64_t v1240 = 160 * v1169;
            uint64_t v1241 = -160 * v1169 + 160 * v1170;
            do
            {
              long long v1587 = v1115;
              long long v1586 = v1115;
              long long v1585 = v1115;
              long long v1584 = v1115;
              long long v1583 = v1115;
              long long v1582 = v1115;
              *(_OWORD *)v1581 = v1115;
              *(_OWORD *)v1580 = v1115;
              long long v1579 = v1115;
              *(_OWORD *)v1578 = v1115;
              v1242 = (_OWORD *)(v1113 + v1241);
              long long v1243 = *(_OWORD *)(v1113 + v1241);
              long long v1579 = *(_OWORD *)(v1113 + v1241 + 16);
              *(_OWORD *)v1578 = v1243;
              long long v1244 = *(_OWORD *)(v1113 + v1241 + 32);
              long long v1245 = *(_OWORD *)(v1113 + v1241 + 48);
              long long v1246 = *(_OWORD *)(v1113 + v1241 + 64);
              long long v1583 = *(_OWORD *)(v1113 + v1241 + 80);
              long long v1582 = v1246;
              *(_OWORD *)v1581 = v1245;
              *(_OWORD *)v1580 = v1244;
              long long v1247 = *(_OWORD *)(v1113 + v1241 + 96);
              long long v1248 = *(_OWORD *)(v1113 + v1241 + 112);
              long long v1249 = *(_OWORD *)(v1113 + v1241 + 128);
              long long v1587 = *(_OWORD *)(v1113 + v1241 + 144);
              long long v1586 = v1249;
              long long v1585 = v1248;
              long long v1584 = v1247;
              v1250 = (_OWORD *)(v1113 + v1240);
              long long v1251 = *(_OWORD *)(v1113 + v1240 + 16);
              _OWORD *v1242 = *(_OWORD *)(v1113 + v1240);
              v1242[1] = v1251;
              long long v1252 = *(_OWORD *)(v1113 + v1240 + 32);
              long long v1253 = *(_OWORD *)(v1113 + v1240 + 48);
              long long v1254 = *(_OWORD *)(v1113 + v1240 + 80);
              v1242[4] = *(_OWORD *)(v1113 + v1240 + 64);
              v1242[5] = v1254;
              v1242[2] = v1252;
              v1242[3] = v1253;
              long long v1255 = *(_OWORD *)(v1113 + v1240 + 96);
              long long v1256 = *(_OWORD *)(v1113 + v1240 + 112);
              long long v1257 = *(_OWORD *)(v1113 + v1240 + 144);
              v1242[8] = *(_OWORD *)(v1113 + v1240 + 128);
              v1242[9] = v1257;
              v1242[6] = v1255;
              v1242[7] = v1256;
              long long v1258 = v1579;
              _OWORD *v1250 = *(_OWORD *)v1578;
              v1250[1] = v1258;
              long long v1259 = *(_OWORD *)v1580;
              long long v1260 = *(_OWORD *)v1581;
              long long v1261 = v1583;
              v1250[4] = v1582;
              v1250[5] = v1261;
              v1250[2] = v1259;
              v1250[3] = v1260;
              long long v1262 = v1584;
              long long v1263 = v1585;
              long long v1264 = v1587;
              v1250[8] = v1586;
              v1250[9] = v1264;
              v1250[6] = v1262;
              v1250[7] = v1263;
              --v1239;
              v1240 -= 160;
              v1241 += 160;
            }
            while (v1239 > 0);
            uint64_t v1111 = v1116 + 1;
            if (v1116 + 1 >= v1114)
            {
              uint64_t v1265 = 2 * v1114;
              v1109 = (char *)malloc_type_realloc(v1109, 32 * v1114, 0xFAF60E10uLL);
              long long v1115 = 0uLL;
              uint64_t v1114 = v1265;
              float v10 = v1430;
            }
            v1266 = &v1109[16 * v1116];
            *(void *)v1266 = v1170 - 0x3333333333333333 * ((uint64_t)(v1113 - v10[1]) >> 5) + 1;
            *((void *)v1266 + 1) = v1110 + ~v1170;
            unint64_t v1110 = v1170 - v1169;
            BOOL v1112 = v1170 != v1169;
            if (v1116 < 0 && !v1110) {
              goto LABEL_794;
            }
          }
          uint64_t v1149 = 0;
          uint64_t v1150 = 0;
          if (v1110 <= 0x7D0) {
            uint64_t v1151 = 8;
          }
          else {
            uint64_t v1151 = 26;
          }
          if (v1110 <= 0x7D0) {
            unint64_t v1152 = 3;
          }
          else {
            unint64_t v1152 = 9;
          }
          while (1)
          {
            uint64_t v1153 = (uint64_t)(v1110 - 1 + v1149) / v1151;
            float v1154 = *(float *)(v1113 + 160 * v1153 + 4);
            float v1155 = *(float *)(v1113 + 160 * (v1149 / v1151) + 4);
            uint64_t v1156 = (uint64_t)(2 * v1110 - 2 + v1149) / v1151;
            float v1157 = *(float *)(v1113 + 160 * v1156 + 4);
            if ((float)(v1154 - v1155) >= 0.0)
            {
              if ((float)(v1157 - v1155) < 0.0) {
                goto LABEL_758;
              }
              if ((float)(v1157 - v1154) < 0.0)
              {
LABEL_760:
                v1578[v1150] = (void *)v1156;
                goto LABEL_752;
              }
            }
            else if ((float)(v1157 - v1154) >= 0.0)
            {
              if ((float)(v1157 - v1155) < 0.0) {
                goto LABEL_760;
              }
LABEL_758:
              v1578[v1150] = (void *)(v1149 / v1151);
              goto LABEL_752;
            }
            v1578[v1150] = (void *)v1153;
LABEL_752:
            ++v1150;
            v1149 += 3 * v1110 - 3;
            if (v1152 == v1150)
            {
              while (1)
              {
                uint64_t v1158 = 0;
                unint64_t v1159 = 0;
                unint64_t v1160 = v1152;
                v1152 /= 3uLL;
                if (v1152 <= 1) {
                  uint64_t v1161 = 1;
                }
                else {
                  uint64_t v1161 = v1152;
                }
                uint64_t v1162 = 8 * v1161;
                do
                {
                  v1163 = v1578[v1158];
                  v1164 = v1578[v1158 + 1];
                  v1165 = v1578[v1158 + 2];
                  float v1166 = *(float *)(v1113 + 160 * (void)v1164 + 4);
                  float v1167 = *(float *)(v1113 + 160 * (void)v1163 + 4);
                  float v1168 = *(float *)(v1113 + 160 * (void)v1165 + 4);
                  if ((float)(v1166 - v1167) >= 0.0)
                  {
                    if ((float)(v1168 - v1167) < 0.0) {
                      goto LABEL_773;
                    }
                    if ((float)(v1168 - v1166) >= 0.0)
                    {
LABEL_766:
                      v1578[v1159 / 8] = v1164;
                      goto LABEL_767;
                    }
                  }
                  else
                  {
                    if ((float)(v1168 - v1166) < 0.0) {
                      goto LABEL_766;
                    }
                    if ((float)(v1168 - v1167) >= 0.0)
                    {
LABEL_773:
                      v1578[v1159 / 8] = v1163;
                      goto LABEL_767;
                    }
                  }
                  v1578[v1159 / 8] = v1165;
LABEL_767:
                  v1159 += 8;
                  v1158 += 3;
                }
                while (v1162 != v1159);
                if (v1160 < 9)
                {
                  unint64_t v1145 = (unint64_t)v1578[0];
                  goto LABEL_777;
                }
              }
            }
          }
        }
LABEL_794:
        free(v1109);
        if (*(float *)(v10[1] + 4) >= (float)(32 * *(_DWORD *)(v1434 + 152)))
        {
          BOOL v1267 = 0;
          goto LABEL_867;
        }
LABEL_795:
        BOOL v1267 = 1;
LABEL_867:
        free(v1573);
        free(ptr);
        free(v1503);
        return v1267;
      }
    }
    v1573 = 0;
    uint64_t v1572 = 0;
    uint64_t v1574 = (int)v13;
    unint64_t v16 = *v10;
    if (!*v10) {
      goto LABEL_795;
    }
    goto LABEL_606;
  }
  double v17 = *(double *)(v2 + 48);
  int v18 = *(_DWORD *)(v4 + 80);
  int v1431 = vl_ps_debug_printout;
  float v19 = *(float *)(v4 + 148);
  int v20 = *(_DWORD *)(v2 + 8);
  v1565 = 0;
  long long v1563 = 0u;
  long long v1564 = 0u;
  long long v1561 = 0u;
  long long v1562 = 0u;
  long long v1560 = 0u;
  memset(v1559, 0, sizeof(v1559));
  *(_OWORD *)v1557 = 0u;
  long long v1558 = 0u;
  size_t v21 = 4 * *(int *)(v3 + 4);
  long long v1555 = 0u;
  long long v1556 = 0u;
  v1428 = (char *)malloc_type_malloc(v21, 0x100004052888210uLL);
  hyp_refine_create((uint64_t)&v1555, 200);
  unint64_t v22 = *v10;
  if (!*v10)
  {
    BOOL v1267 = 1;
    goto LABEL_870;
  }
  uint64_t v1433 = v5;
  if (v18 >= (int)v22) {
    unint64_t v22 = v22;
  }
  else {
    unint64_t v22 = v18;
  }
  unint64_t v1427 = v22;
  if ((int)v22 < 1) {
    goto LABEL_796;
  }
  uint64_t v23 = 0;
  float v24 = v17 * v19 / (double)v20;
  float v1438 = (float)(v24 * 32.0) * 3.0;
  long long v25 = 0uLL;
  while (2)
  {
    unint64_t v26 = v10[1];
    long long v1571 = v25;
    float v27 = (float *)(v26 + 160 * v23);
    long long v1570 = v25;
    long long v1569 = v25;
    uint64_t v28 = v23;
    vl_ps_get_inliers((uint64_t)v27, v6, v1433, v1428);
    if (v1431)
    {
      printf("Info : ");
      unint64_t v29 = v26 + 160 * v28;
      printf("\n  ------- Testing hyp %d (hist count %.0f, inliers %d), x: %.2f, y: %.2f, z: %.2f, ang: %.2f --------  ", v28, *v27, *(void *)(v29 + 88), *(float *)(v29 + 8), *(float *)(v29 + 12), *(float *)(v29 + 16), *(float *)(v29 + 20) * 180.0 / 3.14159265);
      putchar(10);
    }
    uint64_t v1432 = v28;
    unint64_t v1436 = v26;
    uint64_t v30 = *(void *)(v26 + 160 * v28 + 88);
    if (SLODWORD(v1559[0]) < (int)v30)
    {
      hyp_refine_free((uint64_t)&v1555);
      hyp_refine_create((uint64_t)&v1555, v30);
    }
    uint64_t v31 = v30;
    DWORD2(v155_Block_object_dispose(&STACK[0x220], 8) = v30;
    bzero(v1557[1], (int)v30);
    if ((int)v30 >= 1)
    {
      float32x2_t v1543 = v1435[1];
      float32x2_t v1529 = v1435[4];
      uint64_t v32 = *(void *)(v1437 + 8);
      int v34 = (float *)*((void *)&v1555 + 1);
      uint64_t v33 = (_DWORD *)v1555;
      unsigned int v36 = (_DWORD *)*((void *)&v1556 + 1);
      float v35 = (_DWORD *)v1556;
      uint64_t v37 = v1557[0];
      float v38 = (_DWORD *)v1558;
      uint64_t v39 = (int *)(*(void *)(v26 + 160 * v1432 + 96) + 4);
      do
      {
        int v40 = *(v39 - 1);
        uint64_t v41 = 4 * *v39;
        int v42 = *(_DWORD *)(*(void *)&v1543 + v41);
        float v43 = atanf(*(float *)(*(void *)&v1529 + v41));
        float v44 = (int *)(v32 + 12 * v40);
        int v45 = *v44;
        int v46 = v44[1];
        int v47 = v44[2];
        *v33++ = v42;
        *v34++ = v43;
        *v35++ = v45;
        *v36++ = v46;
        *v37++ = v47;
        *v38++ = 1107296256;
        v39 += 2;
        --v31;
      }
      while (v31);
    }
    unint64_t v48 = v1436;
    unint64_t v49 = v1436 + 160 * v1432;
    int v50 = *(_DWORD *)(v1433 + 144);
    int v52 = *(_DWORD *)(v49 + 16);
    float v51 = *(float *)(v49 + 20);
    *((void *)&v1559[2] + 1) = *(void *)(v49 + 8);
    LODWORD(v1559[3]) = v52;
    __float2 v53 = __sincosf_stret(v51);
    float v54 = 0.0;
    DWORD1(v1559[0]) = LODWORD(v53.__cosval);
    *((float *)v1559 + 2) = -(float)(v53.__sinval - (float)((float)(v53.__cosval * 0.0) * 0.0));
    *((float *)v1559 + 3) = (float)(v53.__cosval * 0.0) + (float)(v53.__sinval * 0.0);
    *(float *)&v1559[1] = v53.__sinval;
    *((float *)&v1559[1] + 1) = v53.__cosval + (float)((float)(v53.__sinval * 0.0) * 0.0);
    *((float *)&v1559[1] + 2) = (float)(v53.__sinval * 0.0) - (float)(v53.__cosval * 0.0);
    *(void *)((char *)&v1559[1] + 12) = 0x80000000;
    DWORD1(v1559[2]) = 1065353216;
    *(_OWORD *)((char *)&v1559[3] + 4) = *(_OWORD *)((char *)v1559 + 4);
    *(_OWORD *)((char *)&v1559[4] + 4) = *(_OWORD *)((char *)&v1559[1] + 4);
    *(_OWORD *)((char *)&v1559[5] + 4) = *(_OWORD *)((char *)&v1559[2] + 4);
    int v1439 = v50;
    float32x4_t v55 = 0uLL;
    if (v50 < 1) {
      goto LABEL_598;
    }
    int v1440 = 0;
    LODWORD(v56) = DWORD2(v1558);
    while (2)
    {
      HIDWORD(v155_Block_object_dispose(&STACK[0x220], 8) = 0;
      if ((int)v56 < 1)
      {
        int v57 = 0;
        int v71 = 0;
      }
      else
      {
        int v57 = 0;
        float32x4_t v59 = (_DWORD *)*((void *)&v1555 + 1);
        int v58 = (_DWORD *)v1555;
        uint64_t v56 = v56;
        long long v60 = v1560;
        float32x4_t v62 = (_DWORD *)*((void *)&v1556 + 1);
        float32x4_t v61 = (_DWORD *)v1556;
        float32x4_t v63 = (unsigned __int8 *)v1557[1];
        float32x4_t v64 = v1557[0];
        long long v65 = v1561;
        uint64_t v66 = *((void *)&v1559[6] + 1);
        float v67 = (_DWORD *)v1558;
        uint64_t v68 = *((void *)&v1563 + 1);
        do
        {
          if (!*v63++)
          {
            uint64_t v70 = 4 * v57;
            *(_DWORD *)(v66 + v70) = *v58;
            *(_DWORD *)(v60 + v70) = *v59;
            *(_DWORD *)(*((void *)&v60 + 1) + v70) = *v61;
            *(_DWORD *)(v65 + v70) = *v62;
            *(_DWORD *)(*((void *)&v65 + 1) + v70) = *v64;
            *(_DWORD *)(v68 + v70) = *v67;
            HIDWORD(v155_Block_object_dispose(&STACK[0x220], 8) = ++v57;
          }
          ++v67;
          ++v64;
          ++v62;
          ++v61;
          ++v59;
          ++v58;
          --v56;
        }
        while (v56);
        int v71 = 0;
      }
      while (1)
      {
        int v73 = v57 <= 0 ? -(-v57 & 3) : v57 & 3;
        unint64_t v74 = (v57 - v73);
        int v1441 = v71;
        if ((int)v74 < 1)
        {
          LODWORD(v90) = 0;
          if (v57 <= 0) {
            goto LABEL_42;
          }
        }
        else
        {
          uint64_t v75 = 0;
          unint64_t v76 = 0;
          uint64_t v77 = *(void *)((char *)v1559 + 4);
          float v78 = *((float *)v1559 + 3);
          float v79 = *(float *)&v1559[1];
          float v80 = *(float *)&v1559[2];
          uint64_t v81 = *(void *)((char *)&v1559[1] + 4);
          float v82 = *((float *)&v1559[1] + 3);
          float v83 = *((float *)&v1559[2] + 1);
          float32x4_t v84 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 8), 0);
          float32x4_t v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 12), 0);
          float32x4_t v86 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1559[3], 0);
          do
          {
            float32x4_t v87 = vsubq_f32(*(float32x4_t *)(*((void *)&v1560 + 1) + v75), v84);
            float32x4_t v88 = vsubq_f32(*(float32x4_t *)(v1561 + v75), v85);
            float32x4_t v89 = vsubq_f32(*(float32x4_t *)(*((void *)&v1561 + 1) + v75), v86);
            *(float32x4_t *)(v1562 + v75) = vaddq_f32(vaddq_f32(vmulq_n_f32(v87, *(float *)&v77), vmulq_n_f32(v88, v79)), vmulq_n_f32(v89, v82));
            *(float32x4_t *)(*((void *)&v1562 + 1) + v75) = vaddq_f32(vaddq_f32(vmulq_n_f32(v87, *((float *)&v77 + 1)), vmulq_n_f32(v88, *(float *)&v81)), vmulq_n_f32(v89, v80));
            *(float32x4_t *)(v1563 + v75) = vaddq_f32(vaddq_f32(vmulq_n_f32(v87, v78), vmulq_n_f32(v88, *((float *)&v81 + 1))), vmulq_n_f32(v89, v83));
            v76 += 4;
            v75 += 16;
          }
          while (v76 < v74);
          LODWORD(v90) = v76;
          if ((int)v76 >= v57) {
            goto LABEL_42;
          }
        }
        uint64_t v91 = *((void *)&v1560 + 1);
        long long v92 = v1561;
        long long v93 = v1562;
        uint64_t v94 = v1563;
        unint64_t v90 = (int)v90;
        uint64_t v95 = v57;
        if ((unint64_t)(v57 - (uint64_t)(int)v90) < 0xC) {
          goto LABEL_873;
        }
        uint64_t v1507 = v57 - (uint64_t)(int)v90;
        uint64_t v166 = 4 * (int)v90;
        unint64_t v167 = v1562 + v166;
        unint64_t v168 = v1562 + 4 * v95;
        unint64_t v169 = *((void *)&v1562 + 1) + v166;
        unint64_t v170 = *((void *)&v1562 + 1) + 4 * v95;
        unint64_t v171 = v1563 + v166;
        unint64_t v172 = v1563 + 4 * v95;
        unint64_t v173 = *((void *)&v1560 + 1) + v166;
        unint64_t v174 = *((void *)&v1560 + 1) + 4 * v95;
        unint64_t v175 = v1561 + v166;
        unint64_t v176 = v1561 + 4 * v95;
        unint64_t v177 = *((void *)&v1561 + 1) + v166;
        unint64_t v178 = *((void *)&v1561 + 1) + 4 * v95;
        _CF = (uint64_t)v1562 + v166 >= v172 || v171 >= v168;
        BOOL v180 = !_CF;
        BOOL v1545 = v180;
        BOOL v181 = v167 >= v174 || v173 >= v168;
        BOOL v182 = !v181;
        BOOL v1531 = v182;
        BOOL v183 = v167 >= v176 || v175 >= v168;
        BOOL v184 = !v183;
        BOOL v1520 = v184;
        BOOL v185 = v167 >= v178 || v177 >= v168;
        BOOL v186 = !v185;
        BOOL v187 = v167 >= (unint64_t)&v1559[3] + 4 || (unint64_t)v1559 + 4 >= v168;
        BOOL v188 = !v187;
        BOOL v189 = v169 >= v172 || v171 >= v170;
        BOOL v190 = !v189;
        BOOL v191 = v169 >= v174 || v173 >= v170;
        BOOL v192 = !v191;
        BOOL v193 = v169 >= v176 || v175 >= v170;
        BOOL v194 = !v193;
        BOOL v195 = v169 >= v178 || v177 >= v170;
        BOOL v196 = !v195;
        BOOL v197 = v169 >= (unint64_t)&v1559[3] + 4 || (unint64_t)v1559 + 4 >= v170;
        BOOL v198 = !v197;
        BOOL v199 = v171 >= v174 || v173 >= v172;
        BOOL v200 = !v199;
        BOOL v201 = v171 >= v176 || v175 >= v172;
        BOOL v202 = !v201;
        BOOL v203 = v171 >= v178 || v177 >= v172;
        BOOL v204 = !v203;
        BOOL v205 = v171 >= (unint64_t)&v1559[3] + 4 || (unint64_t)v1559 + 4 >= v172;
        BOOL v206 = !v205;
        if (v169 < v168 && v167 < v170) {
          goto LABEL_873;
        }
        if (v1545) {
          goto LABEL_873;
        }
        if (v1531) {
          goto LABEL_873;
        }
        if (v1520) {
          goto LABEL_873;
        }
        if (v186) {
          goto LABEL_873;
        }
        if (v188) {
          goto LABEL_873;
        }
        if (v190) {
          goto LABEL_873;
        }
        if (v192) {
          goto LABEL_873;
        }
        if (v194) {
          goto LABEL_873;
        }
        if (v196) {
          goto LABEL_873;
        }
        if (v198) {
          goto LABEL_873;
        }
        if (v200) {
          goto LABEL_873;
        }
        if (v202) {
          goto LABEL_873;
        }
        if (v204) {
          goto LABEL_873;
        }
        if (v206) {
          goto LABEL_873;
        }
        unint64_t v90 = (v1507 & 0xFFFFFFFFFFFFFFFCLL) + (int)v90;
        float v208 = (float32x4_t *)(*((void *)&v1560 + 1) + v166);
        float v209 = (float32x4_t *)(v1561 + v166);
        float v210 = (float32x4_t *)(*((void *)&v1561 + 1) + v166);
        float v211 = (float32x4_t *)(v1562 + v166);
        float v212 = (float32x4_t *)(*((void *)&v1562 + 1) + v166);
        float v213 = (float32x4_t *)(v1563 + v166);
        unint64_t v214 = v1507 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float32x4_t v215 = *v208++;
          float32x4_t v216 = v215;
          float32x4_t v217 = *v209++;
          float32x4_t v218 = v217;
          float32x4_t v219 = *v210++;
          float32x4_t v220 = vsubq_f32(v216, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 8), 0));
          float32x4_t v221 = vsubq_f32(v218, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 12), 0));
          float32x4_t v222 = vsubq_f32(v219, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1559[3], 0));
          float32x4_t v223 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v221, *(float *)&v1559[1]), v220, *((float *)v1559 + 1)), v222, *((float *)&v1559[1] + 3));
          float32x4_t v224 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v221, *((float *)&v1559[1] + 1)), v220, *((float *)v1559 + 2)), v222, *(float *)&v1559[2]);
          float32x4_t v225 = vmlaq_n_f32(vmulq_n_f32(v221, *((float *)&v1559[1] + 2)), v220, *((float *)v1559 + 3));
          v220.i32[0] = DWORD1(v1559[2]);
          *v211++ = v223;
          *v212++ = v224;
          *v213++ = vmlaq_n_f32(v225, v222, v220.f32[0]);
          v214 -= 4;
        }
        while (v214);
        if (v1507 != (v1507 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_873:
          do
          {
            uint64_t v96 = 4 * v90;
            float v97 = *(float *)(v91 + 4 * v90) - *((float *)&v1559[2] + 2);
            float v98 = *(float *)(v92 + 4 * v90) - *((float *)&v1559[2] + 3);
            float v99 = *(float *)(*((void *)&v92 + 1) + 4 * v90) - *(float *)&v1559[3];
            float v100 = (float)((float)(*(float *)&v1559[1] * v98) + (float)(*((float *)v1559 + 1) * v97))
                 + (float)(*((float *)&v1559[1] + 3) * v99);
            float v101 = (float)((float)(v98 * *((float *)&v1559[1] + 1)) + (float)(*((float *)v1559 + 2) * v97))
                 + (float)(*(float *)&v1559[2] * v99);
            float v102 = (float)((float)(v98 * *((float *)&v1559[1] + 2)) + (float)(*((float *)v1559 + 3) * v97))
                 + (float)(*((float *)&v1559[2] + 1) * v99);
            *(float *)(v93 + v96) = v100;
            *(float *)(*((void *)&v93 + 1) + v96) = v101;
            *(float *)(v94 + v96) = v102;
            ++v90;
          }
          while (v95 != v90);
        }
LABEL_42:
        uint64_t v103 = SHIDWORD(v1558);
        uint64_t v104 = *((void *)&v1563 + 1);
        uint64_t v105 = v1564;
        int v106 = SHIDWORD(v1558) <= 0 ? -(-HIDWORD(v1558) & 3) : BYTE12(v1558) & 3;
        unint64_t v107 = (HIDWORD(v1558) - v106);
        float32x4_t v108 = (float32x4_t)vdupq_n_s32(0xBD3E7316);
        float32x4_t v109 = (float32x4_t)vdupq_n_s32(0x3E232344u);
        float32x4_t v110 = (float32x4_t)vdupq_n_s32(0xBEA7BE2C);
        float32x4_t v111 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
        float32x4_t v112 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
        float32x4_t v113 = (float32x4_t)vdupq_n_s32(0x3E4CCCCDu);
        float32x4_t v114 = (float32x4_t)vdupq_n_s32(0xBEAAAAAB);
        float32x4_t v115 = (float32x4_t)vdupq_n_s32(0x3E22F983u);
        __asm { FMOV            V29.4S, #1.0 }
        float32x4_t v119 = (float32x4_t)vdupq_n_s32(0xC0490FDB);
        float32x4_t v120 = (float32x4_t)vdupq_n_s32(0xC0C90FDB);
        if ((int)v107 < 1)
        {
          LODWORD(v122) = 0;
          float32x4_t v123 = 0uLL;
        }
        else
        {
          unint64_t v121 = 0;
          unint64_t v122 = 0;
          float32x4_t v123 = 0uLL;
          do
          {
            float32x4_t v137 = *(float32x4_t *)(*((void *)&v1559[6] + 1) + v121);
            float32x4_t v138 = *(float32x4_t *)(v1560 + v121);
            float32x4_t v139 = *(float32x4_t *)(v1562 + v121);
            float32x4_t v140 = *(float32x4_t *)(*((void *)&v1562 + 1) + v121);
            float32x4_t v141 = *(float32x4_t *)(v1563 + v121);
            float32x4_t v142 = *(float32x4_t *)(v104 + v121);
            float32x4_t v143 = vsqrtq_f32(vaddq_f32(vmulq_f32(v139, v139), vmulq_f32(v140, v140)));
            if (v105) {
              *(float32x4_t *)(v105 + v121) = v143;
            }
            float32x4_t v124 = vabsq_f32(v139);
            float32x4_t v125 = vabsq_f32(v140);
            float32x4_t v126 = vdivq_f32(vminq_f32(v124, v125), vmaxq_f32(v124, v125));
            float32x4_t v127 = vmulq_f32(v126, v126);
            float32x4_t v128 = vaddq_f32(v126, vmulq_f32(vmulq_f32(v126, v127), vaddq_f32(vmulq_f32(v127, vaddq_f32(vmulq_f32(v127, v108), v109)), v110)));
            float32x4_t v129 = (float32x4_t)vbslq_s8((int8x16_t)vcagtq_f32(v140, v139), (int8x16_t)vsubq_f32(v111, v128), (int8x16_t)vaddq_f32(v128, v55));
            float32x4_t v130 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v139), (int8x16_t)vsubq_f32(v112, v129), (int8x16_t)v129);
            float32x4_t v131 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v140), (int8x16_t)vsubq_f32(v55, v130), (int8x16_t)v130);
            float32x4_t v132 = vdivq_f32(v141, v143);
            float32x4_t v133 = vmulq_f32(v132, v132);
            float32x4_t v134 = vsubq_f32(v137, v131);
            float32x4_t v135 = vmulq_f32(v142, vaddq_f32(v134, vmulq_f32(vcvtq_f32_s32(vaddq_s32(vcvtq_s32_f32(vmulq_f32(vaddq_f32(v134, v112), v115)), vcgtq_f32(v119, v134))), v120)));
            float32x4_t v136 = vmulq_f32(v142, vsubq_f32(v138, vmulq_f32(v132, vaddq_f32(vaddq_f32(vmulq_f32(vmulq_f32(v133, v133), v113), vmulq_f32(v133, v114)), _Q29))));
            *(float32x4_t *)(*((void *)&v1564 + 1) + v121) = v135;
            *(float32x4_t *)&v1565[v121 / 4] = v136;
            float32x4_t v123 = vaddq_f32(v123, vaddq_f32(vmulq_f32(v136, v136), vmulq_f32(v135, v135)));
            v122 += 4;
            v121 += 16;
          }
          while (v122 < v107);
        }
        float32x4_t v144 = vpaddq_f32(v123, v123);
        HIDWORD(v145) = 0;
        float v146 = vpaddq_f32(v144, v144).f32[0] + 0.0;
        float32x4_t v1452 = v109;
        float32x4_t v1453 = v108;
        float32x4_t v1450 = v111;
        float32x4_t v1451 = v110;
        float32x4_t v1448 = v113;
        float32x4_t v1449 = v112;
        float32x4_t v1446 = v115;
        float32x4_t v1447 = v114;
        float32x4_t v1444 = v119;
        float32x4_t v1445 = _Q29;
        float32x4_t v1443 = v120;
        if ((int)v122 < (int)v103)
        {
          uint64_t v147 = *((void *)&v1559[6] + 1);
          uint64_t v148 = v1560;
          uint64_t v150 = *((void *)&v1562 + 1);
          uint64_t v149 = v1562;
          uint64_t v151 = v1563;
          uint64_t v152 = *((void *)&v1564 + 1);
          uint64_t v153 = (int)v122;
          float v154 = v1565;
          uint64_t v1544 = v103;
          uint64_t v1530 = *((void *)&v1559[6] + 1);
          uint64_t v1519 = v1560;
          long long v155 = v1562;
          uint64_t v1505 = v1563;
          if (v105)
          {
            do
            {
              float v156 = *(float *)(v147 + 4 * v153);
              float v157 = *(float *)(v148 + 4 * v153);
              float v158 = *(float *)(v149 + 4 * v153);
              float v159 = *(float *)(v150 + 4 * v153);
              float v160 = *(float *)(v151 + 4 * v153);
              float v161 = atan2f(v159, v158);
              float v162 = sqrtf((float)(v159 * v159) + (float)(v158 * v158));
              *(float *)(v105 + 4 * v153) = v162;
              float v163 = atanf(v160 / v162);
              uint64_t v151 = v1505;
              uint64_t v150 = *((void *)&v155 + 1);
              uint64_t v149 = v155;
              uint64_t v148 = v1519;
              LODWORD(v103) = v1544;
              uint64_t v147 = v1530;
              float v164 = *(float *)(v104 + 4 * v153);
              double v145 = ((float)(v156 - v161)
                    + 3.14159265
                    + (double)((int)(((float)(v156 - v161) + 3.14159265) * 0.159154943)
                             - ((float)(v156 - v161) + 3.14159265 < 0.0))
                    * -6.28318531
                    + -3.14159265)
                   * v164;
              *(float *)&double v145 = v145;
              float v165 = (float)(v157 - v163) * v164;
              *(_DWORD *)(v152 + 4 * v153) = LODWORD(v145);
              v154[v153] = v165;
              float v146 = v146 + (float)((float)(v165 * v165) + (float)(*(float *)&v145 * *(float *)&v145));
              ++v153;
            }
            while (v1544 != v153);
          }
          else
          {
            do
            {
              float v226 = *(float *)(v147 + 4 * v153);
              float v227 = *(float *)(v148 + 4 * v153);
              float v228 = *(float *)(v149 + 4 * v153);
              float v229 = *(float *)(v150 + 4 * v153);
              float v230 = *(float *)(v151 + 4 * v153);
              float v231 = atan2f(v229, v228);
              float v232 = atanf(v230 / sqrtf((float)(v229 * v229) + (float)(v228 * v228)));
              uint64_t v151 = v1505;
              uint64_t v150 = *((void *)&v155 + 1);
              uint64_t v149 = v155;
              uint64_t v148 = v1519;
              LODWORD(v103) = v1544;
              uint64_t v147 = v1530;
              float v233 = *(float *)(v104 + 4 * v153);
              double v145 = ((float)(v226 - v231)
                    + 3.14159265
                    + (double)((int)(((float)(v226 - v231) + 3.14159265) * 0.159154943)
                             - ((float)(v226 - v231) + 3.14159265 < 0.0))
                    * -6.28318531
                    + -3.14159265)
                   * v233;
              *(float *)&double v145 = v145;
              float v234 = (float)(v227 - v232) * v233;
              *(_DWORD *)(v152 + 4 * v153) = LODWORD(v145);
              v154[v153] = v234;
              float v146 = v146 + (float)((float)(v234 * v234) + (float)(*(float *)&v145 * *(float *)&v145));
              ++v153;
            }
            while (v1544 != v153);
          }
        }
        float v1442 = v146;
        unint64_t v1588 = 0;
        long long v1587 = 0u;
        long long v1586 = 0u;
        long long v1585 = 0u;
        long long v1584 = 0u;
        long long v1583 = 0u;
        long long v1582 = 0u;
        *(_OWORD *)v1581 = 0u;
        *(_OWORD *)v1580 = 0u;
        long long v1579 = 0u;
        *(_OWORD *)v1578 = 0u;
        int v235 = HIDWORD(v1558);
        if (SHIDWORD(v1558) >= 1)
        {
          float v1462 = -*((float *)v1559 + 1);
          float v1461 = -*((float *)v1559 + 2);
          float v1460 = -*((float *)v1559 + 3);
          float v1459 = -*(float *)&v1559[1];
          float v1458 = -*((float *)&v1559[1] + 1);
          float v1457 = -*((float *)&v1559[1] + 2);
          float v1456 = -*((float *)&v1559[1] + 3);
          float v1455 = -*(float *)&v1559[2];
          float v1454 = -*((float *)&v1559[2] + 1);
          double v145 = 0.0;
          *(float *)&unsigned int v236 = 0.0;
          float v1521 = 0.0;
          float v1516 = 0.0;
          float v237 = 0.0;
          *(float *)&unsigned int v238 = 0.0;
          float v239 = 0.0;
          float v241 = (float *)*((void *)&v1563 + 1);
          float v240 = (float *)v1563;
          uint64_t v242 = HIDWORD(v1558);
          float v243 = 0.0;
          float v244 = 0.0;
          float v245 = v1565;
          float v246 = 0.0;
          float v247 = 0.0;
          float v248 = 0.0;
          float v250 = (float *)*((void *)&v1562 + 1);
          float v249 = (float *)v1562;
          float v251 = 0.0;
          float v252 = 0.0;
          float v253 = 0.0;
          float v254 = (float *)*((void *)&v1564 + 1);
          float v255 = (float *)v1564;
          float v256 = 0.0;
          float v257 = 0.0;
          float v1508 = 0.0;
          float v258 = 0.0;
          float v1499 = 0.0;
          float v1506 = 0.0;
          float v1494 = 0.0;
          float v1504 = 0.0;
          float v1501 = 0.0;
          float v1493 = 0.0;
          float v1492 = 0.0;
          float v1491 = 0.0;
          float v1490 = 0.0;
          float v1489 = 0.0;
          float v1500 = 0.0;
          v1488 = 0;
          v1487 = 0;
          float v1486 = 0.0;
          float v1485 = 0.0;
          float v1484 = 0.0;
          float v1483 = 0.0;
          v1482 = 0;
          float v1481 = 0.0;
          float v1480 = 0.0;
          do
          {
            float v1547 = *(float *)&v145;
            float v1533 = *(float *)&v236;
            float v1479 = v239;
            float v1478 = v243;
            float v1477 = v244;
            float v1476 = v246;
            float v1475 = v247;
            float v1474 = v248;
            float v1473 = v251;
            float v1472 = v252;
            float v1471 = v253;
            float v1470 = v256;
            float v1469 = v257;
            float v1468 = v258;
            if (*((void *)&v1563 + 1)) {
              float v259 = *v241;
            }
            else {
              float v259 = 1.0;
            }
            float v260 = *(float *)&v238;
            float v261 = *v255;
            float v262 = (float)-(float)(v259 * *v250) / (float)(v261 * v261);
            float v263 = (float)(v261 * v261) + (float)(*v240 * *v240);
            float v264 = -(float)(v259 * (float)(*v240 / v263));
            float v265 = (float)(*v249 / *v255) * v264;
            float v266 = (float)(*v250 / *v255) * v264;
            float v267 = (float)(*v249 * v259) / (float)(v261 * v261);
            float v268 = (float)(*v255 * v259) / v263;
            float v269 = (float)((float)((float)(v262 * v1462) + 0.0) + (float)(v267 * v1461)) + (float)(v1460 * 0.0);
            float v270 = (float)((float)((float)(v265 * v1462) + 0.0) + (float)(v266 * v1461)) + (float)(v268 * v1460);
            float v271 = (float)((float)((float)(v262 * v1459) + 0.0) + (float)(v267 * v1458)) + (float)(v1457 * 0.0);
            float v272 = (float)((float)((float)(v265 * v1459) + 0.0) + (float)(v266 * v1458)) + (float)(v268 * v1457);
            float v273 = (float)((float)((float)(v262 * v1456) + 0.0) + (float)(v267 * v1455)) + (float)(v1454 * 0.0);
            float v274 = (float)((float)((float)(v265 * v1456) + 0.0) + (float)(v266 * v1455)) + (float)(v268 * v1454);
            float v275 = (float)((float)((float)(v262 * *v250) + 0.0) - (float)(v267 * *v249)) + 0.0;
            float v276 = (float)((float)((float)(v265 * *v250) + 0.0) - (float)(v266 * *v249)) + (float)(v268 * 0.0);
            float v277 = (float)((float)(0.0 - (float)(v262 * *v240)) + (float)(v267 * 0.0)) + (float)(*v249 * 0.0);
            float v278 = (float)((float)(0.0 - (float)(v265 * *v240)) + (float)(v266 * 0.0)) + (float)(v268 * *v249);
            float v279 = (float)((float)(v265 * 0.0) + 0.0) + (float)(v266 * *v240);
            float v280 = (float)((float)((float)(v262 * 0.0) + 0.0) + (float)(v267 * *v240)) - (float)(*v250 * 0.0);
            float v281 = v279 - (float)(v268 * *v250);
            float v282 = (float)((float)(v271 * v269) + 0.0) + (float)(v272 * v270);
            float v283 = (float)((float)(v273 * v269) + 0.0) + (float)(v274 * v270);
            float v1467 = (float)((float)(v275 * v269) + 0.0) + (float)(v276 * v270);
            float v284 = (float)((float)(v277 * v269) + 0.0) + (float)(v278 * v270);
            float v285 = (float)((float)(v280 * v269) + 0.0) + (float)(v281 * v270);
            float v286 = (float)((float)(v271 * v271) + 0.0) + (float)(v272 * v272);
            float v287 = (float)((float)(v273 * v271) + 0.0) + (float)(v274 * v272);
            float v288 = (float)((float)(v275 * v271) + 0.0) + (float)(v276 * v272);
            float v289 = (float)((float)(v277 * v271) + 0.0) + (float)(v278 * v272);
            float v290 = (float)((float)(v280 * v271) + 0.0) + (float)(v281 * v272);
            float v1466 = (float)((float)(v273 * v273) + 0.0) + (float)(v274 * v274);
            *(float *)&unsigned int v1465 = (float)(v260 + (float)(v269 * *v254)) + (float)(v270 * *v245);
            float v291 = (float)((float)(v275 * v273) + 0.0) + (float)(v276 * v274);
            float v292 = (float)((float)(v277 * v273) + 0.0) + (float)(v278 * v274);
            *(float *)&unsigned int v1464 = (float)(v237 + (float)(v271 * *v254)) + (float)(v272 * *v245);
            float v293 = (float)((float)(v280 * v273) + 0.0) + (float)(v281 * v274);
            float v294 = (float)((float)(v275 * v275) + 0.0) + (float)(v276 * v276);
            float v1516 = (float)(v1516 + (float)(v273 * *v254)) + (float)(v274 * *v245);
            float v295 = (float)((float)(v277 * v275) + 0.0) + (float)(v278 * v276);
            float v296 = v1521 + (float)(v275 * *v254);
            float v297 = (float)((float)(v280 * v275) + 0.0) + (float)(v281 * v276);
            float v1521 = v296 + (float)(v276 * *v245);
            float v1463 = (float)((float)(v280 * v277) + 0.0) + (float)(v281 * v278);
            *(float *)&unsigned int v1532 = (float)(v1533 + (float)(v277 * *v254)) + (float)(v278 * *v245);
            *(float *)&unsigned int v1546 = (float)(v1547 + (float)(v280 * *v254)) + (float)(v281 * *v245);
            *(float *)&unsigned int v298 = v1481 + v282;
            *(float *)&unsigned int v299 = v1485 + v282;
            float v1500 = v1500 + v283;
            float v1501 = v1501 + v1467;
            float v1504 = v1504 + v288;
            *(float *)&unsigned int v300 = v1491 + v291;
            *(float *)&unsigned int v301 = v1494 + v291;
            float v1506 = v1506 + v294;
            float v1508 = v1508 + v284;
            float v302 = v1499 + v295;
            float v303 = v1471 + v295;
            float v304 = v1475 + v290;
            float v1480 = v1480 + (float)((float)((float)(v269 * v269) + 0.0) + (float)(v270 * v270));
            v1578[0] = (void *)__PAIR64__(v298, LODWORD(v1480));
            float v1481 = *(float *)&v298;
            *(float *)&v1482 = *(float *)&v1482 + v283;
            *((float *)&v1482 + 1) = *((float *)&v1482 + 1) + v1467;
            v1578[1] = v1482;
            float v1483 = v1483 + v284;
            *(float *)&long long v1579 = v1483;
            float v1484 = v1484 + v285;
            *(void *)((char *)&v1579 + 4) = __PAIR64__(v299, LODWORD(v1484));
            float v1485 = *(float *)&v299;
            float v1486 = v1486 + v286;
            *((float *)&v1579 + 3) = v1486;
            *(float *)&v1487 = *(float *)&v1487 + v287;
            *((float *)&v1487 + 1) = *((float *)&v1487 + 1) + v288;
            v1580[0] = v1487;
            *(float *)&v1488 = *(float *)&v1488 + v289;
            *((float *)&v1488 + 1) = *((float *)&v1488 + 1) + v290;
            v1580[1] = v1488;
            *(float *)v1581 = v1500;
            float v1489 = v1489 + v287;
            *((float *)v1581 + 1) = v1489;
            float v1490 = v1490 + v1466;
            v1581[1] = (void *)__PAIR64__(v300, LODWORD(v1490));
            float v1491 = *(float *)&v300;
            float v1492 = v1492 + v292;
            *(float *)&long long v1582 = v1492;
            float v1493 = v1493 + v293;
            *(void *)((char *)&v1582 + 4) = __PAIR64__(LODWORD(v1501), LODWORD(v1493));
            *((float *)&v1582 + 3) = v1504;
            float v1494 = *(float *)&v301;
            *(void *)&long long v1583 = __PAIR64__(LODWORD(v1506), v301);
            float v1499 = v302;
            *((float *)&v1583 + 2) = v302;
            float v258 = v1468 + v297;
            *((float *)&v1583 + 3) = v1468 + v297;
            *(float *)&long long v1584 = v1508;
            float v257 = v1469 + v289;
            *((float *)&v1584 + 1) = v1469 + v289;
            float v256 = v1470 + v292;
            *((float *)&v1584 + 2) = v1470 + v292;
            float v253 = v303;
            *((float *)&v1584 + 3) = v303;
            float v252 = v1472 + (float)((float)((float)(v277 * v277) + 0.0) + (float)(v278 * v278));
            *(float *)&long long v1585 = v252;
            float v251 = v251 + v1463;
            *((float *)&v1585 + 1) = v1473 + v1463;
            float v248 = v248 + v285;
            *((float *)&v1585 + 2) = v1474 + v285;
            float v247 = v304;
            *((float *)&v1585 + 3) = v304;
            float v246 = v246 + v293;
            *(float *)&long long v1586 = v1476 + v293;
            float v244 = v1477 + v297;
            *((float *)&v1586 + 1) = v1477 + v297;
            float v243 = v1478 + v1463;
            *((float *)&v1586 + 2) = v1478 + v1463;
            float v239 = v1479 + (float)((float)((float)(v280 * v280) + 0.0) + (float)(v281 * v281));
            *((float *)&v1586 + 3) = v239;
            unsigned int v238 = v1465;
            *(void *)&long long v1587 = __PAIR64__(v1464, v1465);
            float v237 = *(float *)&v1464;
            *((void *)&v1587 + 1) = __PAIR64__(LODWORD(v1521), LODWORD(v1516));
            ++v241;
            ++v255;
            ++v240;
            ++v250;
            unsigned int v236 = v1532;
            unint64_t v1588 = __PAIR64__(v1546, v1532);
            LODWORD(v145) = v1546;
            ++v249;
            ++v245;
            ++v254;
            --v242;
          }
          while (v242);
        }
        unint64_t v305 = 0;
        float v306 = v1442 / (float)(int)v103;
        uint8x16_t v307 = v1578;
        uint64_t v308 = 2;
        int16x8_t v309 = &v1597;
        do
        {
          float v310 = *(float *)v307;
          *int16x8_t v309 = *(float *)v307;
          if (v305)
          {
            int16x8_t v311 = &v309[-v305];
            uint64_t v312 = -(uint64_t)v305;
            do
            {
              float v310 = v310 - (float)(v309[v312] * v309[v312]);
              *int16x8_t v309 = v310;
              _CF = __CFADD__(v312++, 1);
            }
            while (!_CF);
            *int16x8_t v309 = sqrtf(v310);
            uint64_t v313 = v305 + 1;
            unint64_t v314 = (float *)v307 + 1;
            if (v305 <= 4)
            {
              uint64_t v315 = &v309[v305 + 1];
              uint64_t v316 = v308;
              do
              {
                float v317 = *v314;
                float *v315 = *v314;
                uint8x8_t v318 = &v315[-v305];
                float v319 = v317 - (float)(*v318 * *v311);
                float *v315 = v319;
                if (v305 != 1)
                {
                  float v319 = v319 - (float)(v318[1] * v311[1]);
                  float *v315 = v319;
                  if (v305 != 2)
                  {
                    float v319 = v319 - (float)(v318[2] * v311[2]);
                    float *v315 = v319;
                    if (v305 != 3)
                    {
                      float v319 = v319 - (float)(v318[3] * v311[3]);
                      float *v315 = v319;
                    }
                  }
                }
                float *v315 = v319 / *v309;
                v315 += v316;
                ++v314;
                ++v316;
              }
              while (v316 != 7);
            }
          }
          else
          {
            *int16x8_t v309 = sqrtf(v310);
            int16x8_t v320 = v309 + 1;
            unint64_t v314 = (float *)v307 + 1;
            uint64_t v321 = v308;
            do
            {
              float v322 = *v314++;
              *int16x8_t v320 = v322;
              *int16x8_t v320 = v322 / *v309;
              v320 += v321++;
            }
            while (v321 != 7);
            uint64_t v313 = 1;
          }
          v309 += v305 + 2;
          uint8x16_t v307 = (void **)&v314[v313];
          ++v308;
          unint64_t v305 = v313;
        }
        while (v313 != 6);
        float v1591 = *(float *)&v1587 / v1597;
        float v1592 = (float)(*((float *)&v1587 + 1) - (float)(v1598 * (float)(*(float *)&v1587 / v1597))) / v1599;
        float v323 = (float)((float)(*((float *)&v1587 + 2) - (float)(v1600 * (float)(*(float *)&v1587 / v1597)))
                     - (float)(v1601 * v1592))
             / v1602;
        float v1593 = v323;
        float v1594 = (float)((float)((float)(*((float *)&v1587 + 3) - (float)(v1603 * (float)(*(float *)&v1587 / v1597)))
                              - (float)(v1604 * v1592))
                      - (float)(v1605 * v323))
              / v1606;
        float v324 = (float)((float)((float)((float)(*(float *)&v1588 - (float)(v1607 * (float)(*(float *)&v1587 / v1597)))
                                     - (float)(v1608 * v1592))
                             - (float)(v1609 * v323))
                     - (float)(v1610 * v1594))
             / v1611;
        float v1595 = v324;
        float v1596 = (float)((float)((float)((float)((float)(*((float *)&v1588 + 1)
                                                      - (float)(v1612 * (float)(*(float *)&v1587 / v1597)))
                                              - (float)(v1613 * v1592))
                                      - (float)(v1614 * v323))
                              - (float)(v1615 * v1594))
                      - (float)(v1616 * v324))
              / v1617;
        float v325 = v1596 / v1617;
        float v326 = (float)(v324 - (float)(v1616 * (float)(v1596 / v1617))) / v1611;
        v1590.f32[1] = v1596 / v1617;
        v1590.f32[0] = v326;
        float v327 = (float)((float)(v1594 - (float)(v1610 * v326)) - (float)(v1615 * (float)(v1596 / v1617))) / v1606;
        v1589.f32[3] = v327;
        v1589.f32[2] = (float)((float)((float)(v323 - (float)(v1605 * v327)) - (float)(v1609 * v326))
                             - (float)(v1614 * (float)(v1596 / v1617)))
                     / v1602;
        float32_t v328 = (float)((float)((float)((float)(v1592 - (float)(v1601 * v1589.f32[2])) - (float)(v1604 * v327))
                             - (float)(v1608 * v326))
                     - (float)(v1613 * (float)(v1596 / v1617)))
             / v1599;
        v1589.f32[1] = v328;
        v1589.f32[0] = (float)((float)((float)((float)((float)((float)(*(float *)&v1587 / v1597) - (float)(v1598 * v328))
                                                     - (float)(v1600 * v1589.f32[2]))
                                             - (float)(v1603 * v327))
                                     - (float)(v1607 * v326))
                             - (float)(v1612 * (float)(v1596 / v1617)))
                     / v1597;
        v329.i32[1] = DWORD2(v1559[0]);
        *(_OWORD *)((char *)&v1559[4] + 4) = *(_OWORD *)((char *)&v1559[1] + 4);
        *(_OWORD *)((char *)&v1559[5] + 4) = *(_OWORD *)((char *)&v1559[2] + 4);
        *(_OWORD *)((char *)&v1559[3] + 4) = *(_OWORD *)((char *)v1559 + 4);
        *(float *)&double v145 = *((float *)&v1559[2] + 3) + v328;
        *((float *)&v1559[2] + 2) = *((float *)&v1559[2] + 2) + v1589.f32[0];
        v329.i32[0] = SDWORD2(v1559[2]);
        int32x2_t v1548 = *(int32x2_t *)&v145;
        *((float *)&v1559[2] + 3) = *((float *)&v1559[2] + 3) + v328;
        *(float *)&double v145 = v1589.f32[2] + *(float *)&v1559[3];
        int32x2_t v1522 = v329;
        int32x2_t v1534 = *(int32x2_t *)&v145;
        *(float *)&v1559[3] = v1589.f32[2] + *(float *)&v1559[3];
        __float2 v330 = __sincosf_stret(v327);
        __float2 v331 = __sincosf_stret(v326);
        float cosval = v331.__cosval;
        __float2 v333 = __sincosf_stret(v325);
        float v334 = (float)((float)(v331.__sinval * v330.__cosval) * v333.__sinval) - (float)(v330.__sinval * v333.__cosval);
        float v335 = (float)(v333.__sinval * v330.__sinval) + (float)((float)(v331.__sinval * v330.__cosval) * v333.__cosval);
        float v336 = (float)(v333.__cosval * v330.__cosval) + (float)((float)(v331.__sinval * v330.__sinval) * v333.__sinval);
        float v337 = (float)((float)(v331.__sinval * v330.__sinval) * v333.__cosval) - (float)(v330.__cosval * v333.__sinval);
        uint64_t v338 = *(void *)((char *)v1559 + 4);
        float v339 = *(float *)&v1559[1];
        float v340 = *((float *)&v1559[1] + 3);
        float v341 = *(float *)&v1559[2];
        float v342 = (float)((float)((float)(*((float *)v1559 + 1) * (float)(cosval * v330.__cosval)) + 0.0)
                     + (float)(*((float *)v1559 + 2) * (float)(cosval * v330.__sinval)))
             - (float)(*((float *)v1559 + 3) * v331.__sinval);
        float v343 = (float)((float)((float)(*((float *)v1559 + 1) * v334) + 0.0) + (float)(*((float *)v1559 + 2) * v336))
             + (float)(*((float *)v1559 + 3) * (float)(v333.__sinval * v331.__cosval));
        *((float *)v1559 + 1) = v342;
        *((float *)v1559 + 2) = v343;
        float v344 = (float)((float)((float)(*(float *)&v338 * v335) + 0.0) + (float)(*((float *)&v338 + 1) * v337))
             + (float)(*((float *)v1559 + 3) * (float)(v333.__cosval * v331.__cosval));
        float v345 = (float)((float)((float)(*(float *)&v1559[1] * (float)(cosval * v330.__cosval)) + 0.0)
                     + (float)(*((float *)&v1559[1] + 1) * (float)(cosval * v330.__sinval)))
             - (float)(*((float *)&v1559[1] + 2) * v331.__sinval);
        *((float *)v1559 + 3) = v344;
        *(float *)&v1559[1] = v345;
        float v346 = (float)((float)((float)(v339 * v334) + 0.0) + (float)(*((float *)&v1559[1] + 1) * v336))
             + (float)(*((float *)&v1559[1] + 2) * (float)(v333.__sinval * v331.__cosval));
        float v347 = (float)((float)((float)(v339 * v335) + 0.0) + (float)(*((float *)&v1559[1] + 1) * v337))
             + (float)(*((float *)&v1559[1] + 2) * (float)(v333.__cosval * v331.__cosval));
        *(void *)((char *)&v1559[1] + 4) = __PAIR64__(LODWORD(v347), LODWORD(v346));
        float v348 = (float)((float)((float)(*((float *)&v1559[1] + 3) * (float)(cosval * v330.__cosval)) + 0.0)
                     + (float)(*(float *)&v1559[2] * (float)(cosval * v330.__sinval)))
             - (float)(*((float *)&v1559[2] + 1) * v331.__sinval);
        float v349 = (float)((float)((float)(*((float *)&v1559[1] + 3) * v334) + 0.0) + (float)(*(float *)&v1559[2] * v336))
             + (float)(*((float *)&v1559[2] + 1) * (float)(v333.__sinval * v331.__cosval));
        *((float *)&v1559[1] + 3) = v348;
        *(float *)&v1559[2] = v349;
        float v350 = (float)((float)((float)(v340 * v335) + 0.0) + (float)(v341 * v337))
             + (float)(*((float *)&v1559[2] + 1) * (float)(v333.__cosval * v331.__cosval));
        *((float *)&v1559[2] + 1) = v350;
        int v351 = v235 <= 0 ? -(-v235 & 3) : v235 & 3;
        unint64_t v352 = (v235 - v351);
        if ((int)v352 < 1)
        {
          LODWORD(v372) = 0;
          float32x4_t v373 = 0uLL;
          float32x4_t v359 = v1452;
          float32x4_t v358 = v1453;
          float32x4_t v361 = v1450;
          float32x4_t v360 = v1451;
          float32x4_t v363 = v1448;
          float32x4_t v362 = v1449;
          float32x4_t v365 = v1446;
          float32x4_t v364 = v1447;
          float32x4_t v367 = v1444;
          float32x4_t v366 = v1445;
          float32x4_t v368 = v1443;
          if (v235 <= 0) {
            goto LABEL_197;
          }
        }
        else
        {
          uint64_t v353 = 0;
          unint64_t v354 = 0;
          float32x4_t v355 = (float32x4_t)vdupq_lane_s32(v1522, 0);
          float32x4_t v356 = (float32x4_t)vdupq_lane_s32(v1548, 0);
          float32x4_t v357 = (float32x4_t)vdupq_lane_s32(v1534, 0);
          float32x4_t v359 = v1452;
          float32x4_t v358 = v1453;
          float32x4_t v361 = v1450;
          float32x4_t v360 = v1451;
          float32x4_t v363 = v1448;
          float32x4_t v362 = v1449;
          float32x4_t v365 = v1446;
          float32x4_t v364 = v1447;
          float32x4_t v367 = v1444;
          float32x4_t v366 = v1445;
          float32x4_t v368 = v1443;
          do
          {
            float32x4_t v369 = vsubq_f32(*(float32x4_t *)(*((void *)&v1560 + 1) + v353), v355);
            float32x4_t v370 = vsubq_f32(*(float32x4_t *)(v1561 + v353), v356);
            float32x4_t v371 = vsubq_f32(*(float32x4_t *)(*((void *)&v1561 + 1) + v353), v357);
            *(float32x4_t *)(v1562 + v353) = vaddq_f32(vaddq_f32(vmulq_n_f32(v369, v342), vmulq_n_f32(v370, v345)), vmulq_n_f32(v371, v348));
            *(float32x4_t *)(*((void *)&v1562 + 1) + v353) = vaddq_f32(vaddq_f32(vmulq_n_f32(v369, v343), vmulq_n_f32(v370, v346)), vmulq_n_f32(v371, v349));
            *(float32x4_t *)(v1563 + v353) = vaddq_f32(vaddq_f32(vmulq_n_f32(v369, v344), vmulq_n_f32(v370, v347)), vmulq_n_f32(v371, v350));
            v354 += 4;
            v353 += 16;
          }
          while (v354 < v352);
          LODWORD(v372) = v354;
          float32x4_t v373 = 0uLL;
          if ((int)v354 >= v235) {
            goto LABEL_197;
          }
        }
        uint64_t v374 = *((void *)&v1560 + 1);
        long long v375 = v1561;
        long long v376 = v1562;
        uint64_t v377 = v1563;
        unint64_t v372 = (int)v372;
        uint64_t v378 = v235;
        if ((unint64_t)(v235 - (uint64_t)(int)v372) < 0xC) {
          goto LABEL_874;
        }
        uint64_t v1510 = v235 - (uint64_t)(int)v372;
        uint64_t v479 = 4 * (int)v372;
        unint64_t v480 = v1562 + v479;
        unint64_t v481 = v1562 + 4 * v235;
        unint64_t v482 = *((void *)&v1562 + 1) + v479;
        unint64_t v483 = *((void *)&v1562 + 1) + 4 * v235;
        unint64_t v484 = v1563 + v479;
        unint64_t v485 = v1563 + 4 * v235;
        unint64_t v486 = *((void *)&v1560 + 1) + v479;
        unint64_t v487 = *((void *)&v1560 + 1) + 4 * v235;
        unint64_t v488 = v1561 + v479;
        unint64_t v489 = v1561 + 4 * v235;
        unint64_t v490 = *((void *)&v1561 + 1) + v479;
        unint64_t v491 = *((void *)&v1561 + 1) + 4 * v235;
        BOOL v492 = (uint64_t)v1562 + v479 >= v485 || v484 >= v481;
        BOOL v493 = !v492;
        BOOL v1551 = v493;
        BOOL v494 = v480 >= v487 || v486 >= v481;
        BOOL v495 = !v494;
        BOOL v1537 = v495;
        BOOL v496 = v480 >= v489 || v488 >= v481;
        BOOL v497 = !v496;
        BOOL v1524 = v497;
        BOOL v498 = v480 >= v491 || v490 >= v481;
        BOOL v499 = !v498;
        BOOL v500 = v480 >= (unint64_t)&v1559[3] + 4 || (unint64_t)v1559 + 4 >= v481;
        BOOL v501 = !v500;
        BOOL v502 = v482 >= v485 || v484 >= v483;
        BOOL v503 = !v502;
        BOOL v504 = v482 >= v487 || v486 >= v483;
        BOOL v505 = !v504;
        BOOL v506 = v482 >= v489 || v488 >= v483;
        BOOL v507 = !v506;
        BOOL v508 = v482 >= v491 || v490 >= v483;
        BOOL v509 = !v508;
        BOOL v510 = v482 >= (unint64_t)&v1559[3] + 4 || (unint64_t)v1559 + 4 >= v483;
        BOOL v511 = !v510;
        BOOL v512 = v484 >= v487 || v486 >= v485;
        BOOL v513 = !v512;
        BOOL v514 = v484 >= v489 || v488 >= v485;
        BOOL v515 = !v514;
        BOOL v516 = v484 >= v491 || v490 >= v485;
        BOOL v517 = !v516;
        BOOL v518 = v484 >= (unint64_t)&v1559[3] + 4 || (unint64_t)v1559 + 4 >= v485;
        BOOL v519 = !v518;
        if (v482 < v481 && v480 < v483) {
          goto LABEL_874;
        }
        if (v1551) {
          goto LABEL_874;
        }
        if (v1537) {
          goto LABEL_874;
        }
        if (v1524) {
          goto LABEL_874;
        }
        if (v499) {
          goto LABEL_874;
        }
        if (v501) {
          goto LABEL_874;
        }
        if (v503) {
          goto LABEL_874;
        }
        if (v505) {
          goto LABEL_874;
        }
        if (v507) {
          goto LABEL_874;
        }
        if (v509) {
          goto LABEL_874;
        }
        if (v511) {
          goto LABEL_874;
        }
        if (v513) {
          goto LABEL_874;
        }
        if (v515) {
          goto LABEL_874;
        }
        if (v517) {
          goto LABEL_874;
        }
        if (v519) {
          goto LABEL_874;
        }
        unint64_t v372 = (v1510 & 0xFFFFFFFFFFFFFFFCLL) + (int)v372;
        long double v521 = (float32x4_t *)(*((void *)&v1560 + 1) + v479);
        float v522 = (float32x4_t *)(v1561 + v479);
        float v523 = (float32x4_t *)(*((void *)&v1561 + 1) + v479);
        float v524 = (float32x4_t *)(v1562 + v479);
        long long v525 = (float32x4_t *)(*((void *)&v1562 + 1) + v479);
        long long v526 = (float32x4_t *)(v1563 + v479);
        unint64_t v527 = v1510 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float32x4_t v528 = *v521++;
          float32x4_t v529 = v528;
          float32x4_t v530 = *v522++;
          float32x4_t v531 = v530;
          float32x4_t v532 = *v523++;
          float32x4_t v533 = vsubq_f32(v529, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 8), 0));
          float32x4_t v534 = vsubq_f32(v531, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 12), 0));
          float32x4_t v535 = vsubq_f32(v532, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1559[3], 0));
          float32x4_t v536 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v534, *(float *)&v1559[1]), v533, *((float *)v1559 + 1)), v535, *((float *)&v1559[1] + 3));
          float32x4_t v537 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v534, *((float *)&v1559[1] + 1)), v533, *((float *)v1559 + 2)), v535, *(float *)&v1559[2]);
          float32x4_t v538 = vmlaq_n_f32(vmulq_n_f32(v534, *((float *)&v1559[1] + 2)), v533, *((float *)v1559 + 3));
          v533.i32[0] = DWORD1(v1559[2]);
          *v524++ = v536;
          *v525++ = v537;
          *v526++ = vmlaq_n_f32(v538, v535, v533.f32[0]);
          v527 -= 4;
        }
        while (v527);
        if (v1510 != (v1510 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_874:
          do
          {
            uint64_t v379 = 4 * v372;
            float v380 = *(float *)(v374 + 4 * v372) - *((float *)&v1559[2] + 2);
            float v381 = *(float *)(v375 + 4 * v372) - *((float *)&v1559[2] + 3);
            float v382 = *(float *)(*((void *)&v375 + 1) + 4 * v372) - *(float *)&v1559[3];
            float v383 = (float)((float)(*(float *)&v1559[1] * v381) + (float)(*((float *)v1559 + 1) * v380))
                 + (float)(*((float *)&v1559[1] + 3) * v382);
            float v384 = (float)((float)(v381 * *((float *)&v1559[1] + 1)) + (float)(*((float *)v1559 + 2) * v380))
                 + (float)(*(float *)&v1559[2] * v382);
            float v385 = (float)((float)(v381 * *((float *)&v1559[1] + 2)) + (float)(*((float *)v1559 + 3) * v380))
                 + (float)(*((float *)&v1559[2] + 1) * v382);
            *(float *)(v376 + v379) = v383;
            *(float *)(*((void *)&v376 + 1) + v379) = v384;
            *(float *)(v377 + v379) = v385;
            ++v372;
          }
          while (v378 != v372);
        }
LABEL_197:
        uint64_t v386 = *((void *)&v1563 + 1);
        if (SHIDWORD(v1558) <= 0) {
          int v387 = -(-HIDWORD(v1558) & 3);
        }
        else {
          int v387 = BYTE12(v1558) & 3;
        }
        unint64_t v388 = (HIDWORD(v1558) - v387);
        if ((int)v388 < 1)
        {
          LODWORD(v389) = 0;
          float32x4_t v394 = 0uLL;
        }
        else
        {
          unint64_t v389 = 0;
          uint64_t v390 = (float32x4_t *)*((void *)&v1559[6] + 1);
          int v391 = (float32x4_t *)v1560;
          uint64_t v393 = (float32x4_t *)*((void *)&v1562 + 1);
          uint64_t v392 = (float32x4_t *)v1562;
          float32x4_t v394 = 0uLL;
          int v395 = (float32x4_t *)*((void *)&v1563 + 1);
          uint64_t v396 = (float32x4_t *)v1563;
          do
          {
            float32x4_t v397 = *v390++;
            float32x4_t v398 = v397;
            float32x4_t v399 = *v391++;
            float32x4_t v400 = v399;
            float32x4_t v401 = *v392++;
            float32x4_t v402 = v401;
            float32x4_t v403 = *v393++;
            float32x4_t v404 = v403;
            float32x4_t v405 = vabsq_f32(v402);
            float32x4_t v406 = vabsq_f32(v403);
            float32x4_t v407 = vdivq_f32(vminq_f32(v405, v406), vmaxq_f32(v405, v406));
            float32x4_t v408 = vmulq_f32(v407, v407);
            float32x4_t v409 = vaddq_f32(v407, vmulq_f32(vmulq_f32(v407, v408), vaddq_f32(vmulq_f32(v408, vaddq_f32(vmulq_f32(v408, v358), v359)), v360)));
            float32x4_t v410 = *v396++;
            float32x4_t v411 = v410;
            float32x4_t v412 = (float32x4_t)vbslq_s8((int8x16_t)vcagtq_f32(v404, v402), (int8x16_t)vsubq_f32(v361, v409), (int8x16_t)vaddq_f32(v409, v373));
            float32x4_t v413 = *v395++;
            float32x4_t v414 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v402), (int8x16_t)vsubq_f32(v362, v412), (int8x16_t)v412);
            float32x4_t v415 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v404), (int8x16_t)vsubq_f32(v373, v414), (int8x16_t)v414);
            float32x4_t v416 = vdivq_f32(v411, vsqrtq_f32(vaddq_f32(vmulq_f32(v402, v402), vmulq_f32(v404, v404))));
            float32x4_t v417 = vmulq_f32(v416, v416);
            float32x4_t v418 = vsubq_f32(v398, v415);
            float32x4_t v419 = vmulq_f32(v413, vsubq_f32(v400, vmulq_f32(v416, vaddq_f32(vaddq_f32(vmulq_f32(vmulq_f32(v417, v417), v363), vmulq_f32(v417, v364)), v366))));
            float32x4_t v420 = vmulq_f32(v413, vaddq_f32(v418, vmulq_f32(vcvtq_f32_s32(vaddq_s32(vcvtq_s32_f32(vmulq_f32(vaddq_f32(v418, v362), v365)), vcgtq_f32(v367, v418))), v368)));
            float32x4_t v394 = vaddq_f32(v394, vaddq_f32(vmulq_f32(v419, v419), vmulq_f32(v420, v420)));
            v389 += 4;
          }
          while (v389 < v388);
        }
        unint64_t v1509 = v388;
        uint64_t v421 = SHIDWORD(v1558);
        float32x4_t v422 = vpaddq_f32(v394, v394);
        float v423 = vpaddq_f32(v422, v422).f32[0] + 0.0;
        int v1517 = HIDWORD(v1558);
        if ((int)v389 < SHIDWORD(v1558))
        {
          uint64_t v1549 = *((void *)&v1559[6] + 1);
          uint64_t v1535 = v1560;
          long long v424 = v1562;
          uint64_t v425 = (int)v389;
          uint64_t v426 = v1563;
          do
          {
            float v427 = *(float *)(v1549 + 4 * v425);
            float v428 = *(float *)(v1535 + 4 * v425);
            float v429 = *(float *)(v424 + 4 * v425);
            float v430 = *(float *)(*((void *)&v424 + 1) + 4 * v425);
            float v431 = *(float *)(v426 + 4 * v425);
            float v432 = atan2f(v430, v429);
            float v433 = atanf(v431 / sqrtf((float)(v430 * v430) + (float)(v429 * v429)));
            float v434 = *(float *)(v386 + 4 * v425);
            float v435 = ((float)(v427 - v432)
                  + 3.14159265
                  + (double)((int)(((float)(v427 - v432) + 3.14159265) * 0.159154943)
                           - ((float)(v427 - v432) + 3.14159265 < 0.0))
                  * -6.28318531
                  + -3.14159265)
                 * v434;
            float v423 = v423
                 + (float)((float)((float)((float)(v428 - v433) * v434) * (float)((float)(v428 - v433) * v434))
                         + (float)(v435 * v435));
            ++v425;
          }
          while (v421 != v425);
        }
        int v57 = v1517;
        float v72 = v423 / (float)v1517;
        if (v72 < v306) {
          goto LABEL_30;
        }
        v436.i64[0] = 0x3F0000003F000000;
        v436.i64[1] = 0x3F0000003F000000;
        float32x4_t v1589 = vmulq_f32(v1589, v436);
        float32x2_t v1550 = vmul_f32(v1590, (float32x2_t)0x3F0000003F000000);
        float32x2_t v1590 = v1550;
        *(_OWORD *)((char *)&v1559[1] + 4) = *(_OWORD *)((char *)&v1559[4] + 4);
        DWORD1(v1559[2]) = DWORD1(v1559[5]);
        *(_OWORD *)((char *)v1559 + 4) = *(_OWORD *)((char *)&v1559[3] + 4);
        *(float32x2_t *)v436.f32 = vadd_f32(*(float32x2_t *)v1589.f32, (float32x2_t)(*(_OWORD *)((char *)&v1559[5] + 4) >> 32));
        int32x2_t v1536 = *(int32x2_t *)v436.f32;
        *((void *)&v1559[2] + 1) = v436.i64[0];
        v436.f32[0] = v1589.f32[2] + *(float *)&v1559[6];
        int32x2_t v1523 = *(int32x2_t *)v436.f32;
        *(float *)&v1559[3] = v1589.f32[2] + *(float *)&v1559[6];
        __float2 v437 = __sincosf_stret(v1589.f32[3]);
        __float2 v438 = __sincosf_stret(v1550.f32[0]);
        float v439 = v438.__cosval;
        __float2 v440 = __sincosf_stret(v1550.f32[1]);
        float v441 = (float)((float)(v437.__cosval * v438.__sinval) * v440.__sinval) - (float)(v437.__sinval * v440.__cosval);
        float v442 = (float)(v437.__sinval * v440.__sinval) + (float)((float)(v437.__cosval * v438.__sinval) * v440.__cosval);
        float v443 = (float)(v437.__cosval * v440.__cosval) + (float)((float)(v437.__sinval * v438.__sinval) * v440.__sinval);
        float v444 = (float)((float)(v437.__sinval * v438.__sinval) * v440.__cosval) - (float)(v437.__cosval * v440.__sinval);
        uint64_t v445 = *(void *)((char *)v1559 + 4);
        float v446 = *(float *)&v1559[1];
        float v447 = *((float *)&v1559[1] + 3);
        float v448 = *(float *)&v1559[2];
        float v449 = (float)((float)((float)(*((float *)v1559 + 1) * (float)(v437.__cosval * v439)) + 0.0)
                     + (float)(*((float *)v1559 + 2) * (float)(v437.__sinval * v439)))
             - (float)(*((float *)v1559 + 3) * v438.__sinval);
        float v450 = (float)((float)((float)(*((float *)v1559 + 1) * v441) + 0.0) + (float)(*((float *)v1559 + 2) * v443))
             + (float)(*((float *)v1559 + 3) * (float)(v438.__cosval * v440.__sinval));
        *((float *)v1559 + 1) = v449;
        *((float *)v1559 + 2) = v450;
        float v451 = (float)((float)((float)(*(float *)&v445 * v442) + 0.0) + (float)(*((float *)&v445 + 1) * v444))
             + (float)(*((float *)v1559 + 3) * (float)(v438.__cosval * v440.__cosval));
        float v452 = (float)((float)((float)(*(float *)&v1559[1] * (float)(v437.__cosval * v439)) + 0.0)
                     + (float)(*((float *)&v1559[1] + 1) * (float)(v437.__sinval * v439)))
             - (float)(*((float *)&v1559[1] + 2) * v438.__sinval);
        *((float *)v1559 + 3) = v451;
        *(float *)&v1559[1] = v452;
        float v453 = (float)((float)((float)(v446 * v441) + 0.0) + (float)(*((float *)&v1559[1] + 1) * v443))
             + (float)(*((float *)&v1559[1] + 2) * (float)(v438.__cosval * v440.__sinval));
        float v454 = (float)((float)((float)(v446 * v442) + 0.0) + (float)(*((float *)&v1559[1] + 1) * v444))
             + (float)(*((float *)&v1559[1] + 2) * (float)(v438.__cosval * v440.__cosval));
        *(void *)((char *)&v1559[1] + 4) = __PAIR64__(LODWORD(v454), LODWORD(v453));
        float v455 = (float)((float)((float)(*((float *)&v1559[1] + 3) * (float)(v437.__cosval * v439)) + 0.0)
                     + (float)(*(float *)&v1559[2] * (float)(v437.__sinval * v439)))
             - (float)(*((float *)&v1559[2] + 1) * v438.__sinval);
        float v456 = (float)((float)((float)(*((float *)&v1559[1] + 3) * v441) + 0.0) + (float)(*(float *)&v1559[2] * v443))
             + (float)(*((float *)&v1559[2] + 1) * (float)(v438.__cosval * v440.__sinval));
        *((float *)&v1559[1] + 3) = v455;
        *(float *)&v1559[2] = v456;
        float v457 = (float)((float)((float)(v447 * v442) + 0.0) + (float)(v448 * v444))
             + (float)(*((float *)&v1559[2] + 1) * (float)(v438.__cosval * v440.__cosval));
        *((float *)&v1559[2] + 1) = v457;
        if ((int)v1509 < 1)
        {
          LODWORD(v47_Block_object_dispose(&STACK[0x220], 8) = 0;
          float32x4_t v463 = 0uLL;
          float32x4_t v465 = v1452;
          float32x4_t v464 = v1453;
          float32x4_t v467 = v1450;
          float32x4_t v466 = v1451;
          float32x4_t v468 = v1448;
          float32x4_t v469 = v1449;
          float32x4_t v471 = v1446;
          float32x4_t v470 = v1447;
          float32x4_t v473 = v1444;
          float32x4_t v472 = v1445;
          float32x4_t v474 = v1443;
          if (v1517 <= 0) {
            goto LABEL_324;
          }
        }
        else
        {
          uint64_t v458 = 0;
          unint64_t v459 = 0;
          float32x4_t v460 = (float32x4_t)vdupq_lane_s32(v1536, 0);
          float32x4_t v461 = (float32x4_t)vdupq_lane_s32(v1536, 1);
          float32x4_t v462 = (float32x4_t)vdupq_lane_s32(v1523, 0);
          float32x4_t v463 = 0uLL;
          float32x4_t v465 = v1452;
          float32x4_t v464 = v1453;
          float32x4_t v467 = v1450;
          float32x4_t v466 = v1451;
          float32x4_t v468 = v1448;
          float32x4_t v469 = v1449;
          float32x4_t v471 = v1446;
          float32x4_t v470 = v1447;
          float32x4_t v473 = v1444;
          float32x4_t v472 = v1445;
          float32x4_t v474 = v1443;
          do
          {
            float32x4_t v475 = vsubq_f32(*(float32x4_t *)(*((void *)&v1560 + 1) + v458), v460);
            float32x4_t v476 = vsubq_f32(*(float32x4_t *)(v1561 + v458), v461);
            float32x4_t v477 = vsubq_f32(*(float32x4_t *)(*((void *)&v1561 + 1) + v458), v462);
            *(float32x4_t *)(v1562 + v45_Block_object_dispose(&STACK[0x220], 8) = vaddq_f32(vaddq_f32(vmulq_n_f32(v475, v449), vmulq_n_f32(v476, v452)), vmulq_n_f32(v477, v455));
            *(float32x4_t *)(*((void *)&v1562 + 1) + v45_Block_object_dispose(&STACK[0x220], 8) = vaddq_f32(vaddq_f32(vmulq_n_f32(v475, v450), vmulq_n_f32(v476, v453)), vmulq_n_f32(v477, v456));
            *(float32x4_t *)(v1563 + v45_Block_object_dispose(&STACK[0x220], 8) = vaddq_f32(vaddq_f32(vmulq_n_f32(v475, v451), vmulq_n_f32(v476, v454)), vmulq_n_f32(v477, v457));
            v459 += 4;
            v458 += 16;
          }
          while (v459 < v1509);
          LODWORD(v47_Block_object_dispose(&STACK[0x220], 8) = v459;
          if ((int)v459 >= v1517) {
            goto LABEL_324;
          }
        }
        uint64_t v539 = *((void *)&v1560 + 1);
        long long v540 = v1561;
        long long v541 = v1562;
        uint64_t v542 = v1563;
        unint64_t v478 = (int)v478;
        if ((unint64_t)(v421 - (int)v478) >= 0xC)
        {
          uint64_t v1511 = v421 - (int)v478;
          uint64_t v599 = 4 * (int)v478;
          uint64_t v600 = v421;
          unint64_t v601 = v1562 + v599;
          uint64_t v602 = v600;
          uint64_t v603 = 4 * v600;
          unint64_t v604 = v1562 + 4 * v600;
          unint64_t v605 = *((void *)&v1562 + 1) + v599;
          unint64_t v606 = *((void *)&v1562 + 1) + 4 * v600;
          unint64_t v607 = v1563 + v599;
          unint64_t v608 = v1563 + 4 * v600;
          unint64_t v609 = *((void *)&v1560 + 1) + v599;
          unint64_t v610 = *((void *)&v1560 + 1) + 4 * v600;
          unint64_t v611 = v1561 + v599;
          unint64_t v612 = v1561 + 4 * v600;
          unint64_t v613 = *((void *)&v1561 + 1) + v599;
          unint64_t v614 = *((void *)&v1561 + 1) + v603;
          BOOL v616 = (uint64_t)v1562 + v599 < v608 && v607 < v604;
          BOOL v1553 = v616;
          BOOL v618 = v601 < v610 && v609 < v604;
          BOOL v1539 = v618;
          BOOL v620 = v601 < v612 && v611 < v604;
          BOOL v1526 = v620;
          BOOL v622 = v601 < v614 && v613 < v604;
          BOOL v624 = v601 < (unint64_t)&v1559[3] + 4 && (unint64_t)v1559 + 4 < v604;
          BOOL v626 = v605 < v608 && v607 < v606;
          BOOL v628 = v605 < v610 && v609 < v606;
          BOOL v630 = v605 < v612 && v611 < v606;
          BOOL v632 = v605 < v614 && v613 < v606;
          BOOL v634 = v605 < (unint64_t)&v1559[3] + 4 && (unint64_t)v1559 + 4 < v606;
          BOOL v636 = v607 < v610 && v609 < v608;
          BOOL v638 = v607 < v612 && v611 < v608;
          BOOL v640 = v607 < v614 && v613 < v608;
          BOOL v642 = v607 < (unint64_t)&v1559[3] + 4 && (unint64_t)v1559 + 4 < v608;
          if (v605 >= v604 || v601 >= v606)
          {
            uint64_t v421 = v602;
            if (!v1553
              && !v1539
              && !v1526
              && !v622
              && !v624
              && !v626
              && !v628
              && !v630
              && !v632
              && !v634
              && !v636
              && !v638
              && !v640
              && !v642)
            {
              unint64_t v478 = (v1511 & 0xFFFFFFFFFFFFFFFCLL) + (int)v478;
              float32x4_t v644 = (float32x4_t *)(*((void *)&v1560 + 1) + v599);
              float32x4_t v645 = (float32x4_t *)(v1561 + v599);
              uint64_t v646 = (float32x4_t *)(*((void *)&v1561 + 1) + v599);
              float32x4_t v647 = (float32x4_t *)(v1562 + v599);
              int32x4_t v648 = (float32x4_t *)(*((void *)&v1562 + 1) + v599);
              float32x4_t v649 = (float32x4_t *)(v1563 + v599);
              unint64_t v650 = v1511 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                float32x4_t v651 = *v644++;
                float32x4_t v652 = v651;
                float32x4_t v653 = *v645++;
                float32x4_t v654 = v653;
                float32x4_t v655 = *v646++;
                float32x4_t v656 = vsubq_f32(v652, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 8), 0));
                float32x4_t v657 = vsubq_f32(v654, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 12), 0));
                float32x4_t v658 = vsubq_f32(v655, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1559[3], 0));
                float32x4_t v659 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v657, *(float *)&v1559[1]), v656, *((float *)v1559 + 1)), v658, *((float *)&v1559[1] + 3));
                float32x4_t v660 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v657, *((float *)&v1559[1] + 1)), v656, *((float *)v1559 + 2)), v658, *(float *)&v1559[2]);
                float32x4_t v661 = vmlaq_n_f32(vmulq_n_f32(v657, *((float *)&v1559[1] + 2)), v656, *((float *)v1559 + 3));
                v656.i32[0] = DWORD1(v1559[2]);
                *v647++ = v659;
                *v648++ = v660;
                *v649++ = vmlaq_n_f32(v661, v658, v656.f32[0]);
                v650 -= 4;
              }
              while (v650);
              if (v1511 == (v1511 & 0xFFFFFFFFFFFFFFFCLL)) {
                goto LABEL_324;
              }
            }
          }
          else
          {
            uint64_t v421 = v602;
          }
        }
        do
        {
          uint64_t v543 = 4 * v478;
          float v544 = *(float *)(v539 + 4 * v478) - *((float *)&v1559[2] + 2);
          float v545 = *(float *)(v540 + 4 * v478) - *((float *)&v1559[2] + 3);
          float v546 = *(float *)(*((void *)&v540 + 1) + 4 * v478) - *(float *)&v1559[3];
          float v547 = (float)((float)(*(float *)&v1559[1] * v545) + (float)(*((float *)v1559 + 1) * v544))
               + (float)(*((float *)&v1559[1] + 3) * v546);
          float v548 = (float)((float)(v545 * *((float *)&v1559[1] + 1)) + (float)(*((float *)v1559 + 2) * v544))
               + (float)(*(float *)&v1559[2] * v546);
          float v549 = (float)((float)(v545 * *((float *)&v1559[1] + 2)) + (float)(*((float *)v1559 + 3) * v544))
               + (float)(*((float *)&v1559[2] + 1) * v546);
          *(float *)(v541 + v543) = v547;
          *(float *)(*((void *)&v541 + 1) + v543) = v548;
          *(float *)(v542 + v543) = v549;
          ++v478;
        }
        while (v421 != v478);
LABEL_324:
        uint64_t v550 = *((void *)&v1563 + 1);
        if (SHIDWORD(v1558) <= 0) {
          int v551 = -(-HIDWORD(v1558) & 3);
        }
        else {
          int v551 = BYTE12(v1558) & 3;
        }
        unint64_t v552 = (HIDWORD(v1558) - v551);
        if ((int)v552 < 1)
        {
          LODWORD(v553) = 0;
          float32x4_t v558 = 0uLL;
        }
        else
        {
          unint64_t v553 = 0;
          float32x4_t v554 = (float32x4_t *)*((void *)&v1559[6] + 1);
          float32x4_t v555 = (float32x4_t *)v1560;
          float32x4_t v557 = (float32x4_t *)*((void *)&v1562 + 1);
          float32x4_t v556 = (float32x4_t *)v1562;
          float32x4_t v558 = 0uLL;
          float v559 = (float32x4_t *)*((void *)&v1563 + 1);
          float v560 = (float32x4_t *)v1563;
          do
          {
            float32x4_t v561 = *v554++;
            float32x4_t v562 = v561;
            float32x4_t v563 = *v555++;
            float32x4_t v564 = v563;
            float32x4_t v565 = *v556++;
            float32x4_t v566 = v565;
            float32x4_t v567 = *v557++;
            float32x4_t v568 = v567;
            float32x4_t v569 = vabsq_f32(v566);
            float32x4_t v570 = vabsq_f32(v567);
            float32x4_t v571 = vdivq_f32(vminq_f32(v569, v570), vmaxq_f32(v569, v570));
            float32x4_t v572 = vmulq_f32(v571, v571);
            float32x4_t v573 = vaddq_f32(v571, vmulq_f32(vmulq_f32(v571, v572), vaddq_f32(vmulq_f32(v572, vaddq_f32(vmulq_f32(v572, v464), v465)), v466)));
            float32x4_t v574 = *v560++;
            float32x4_t v575 = v574;
            float32x4_t v576 = (float32x4_t)vbslq_s8((int8x16_t)vcagtq_f32(v568, v566), (int8x16_t)vsubq_f32(v467, v573), (int8x16_t)vaddq_f32(v573, v463));
            float32x4_t v577 = *v559++;
            float32x4_t v578 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v566), (int8x16_t)vsubq_f32(v469, v576), (int8x16_t)v576);
            float32x4_t v579 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v568), (int8x16_t)vsubq_f32(v463, v578), (int8x16_t)v578);
            float32x4_t v580 = vdivq_f32(v575, vsqrtq_f32(vaddq_f32(vmulq_f32(v566, v566), vmulq_f32(v568, v568))));
            float32x4_t v581 = vmulq_f32(v580, v580);
            float32x4_t v582 = vsubq_f32(v562, v579);
            float32x4_t v583 = vmulq_f32(v577, vsubq_f32(v564, vmulq_f32(v580, vaddq_f32(vaddq_f32(vmulq_f32(vmulq_f32(v581, v581), v468), vmulq_f32(v581, v470)), v472))));
            float32x4_t v584 = vmulq_f32(v577, vaddq_f32(v582, vmulq_f32(vcvtq_f32_s32(vaddq_s32(vcvtq_s32_f32(vmulq_f32(vaddq_f32(v582, v469), v471)), vcgtq_f32(v473, v582))), v474)));
            float32x4_t v558 = vaddq_f32(v558, vaddq_f32(vmulq_f32(v583, v583), vmulq_f32(v584, v584)));
            v553 += 4;
          }
          while (v553 < v552);
        }
        float32x4_t v585 = vpaddq_f32(v558, v558);
        float v586 = vpaddq_f32(v585, v585).f32[0] + 0.0;
        int v1518 = HIDWORD(v1558);
        if ((int)v553 < SHIDWORD(v1558))
        {
          uint64_t v1552 = SHIDWORD(v1558);
          uint64_t v1538 = *((void *)&v1559[6] + 1);
          uint64_t v1525 = v1560;
          long long v587 = v1562;
          uint64_t v588 = (int)v553;
          uint64_t v589 = v1563;
          do
          {
            float v590 = *(float *)(v1538 + 4 * v588);
            float v591 = *(float *)(v1525 + 4 * v588);
            float v592 = *(float *)(v587 + 4 * v588);
            float v593 = *(float *)(*((void *)&v587 + 1) + 4 * v588);
            float v594 = *(float *)(v589 + 4 * v588);
            float v595 = atan2f(v593, v592);
            float v596 = atanf(v594 / sqrtf((float)(v593 * v593) + (float)(v592 * v592)));
            float v597 = *(float *)(v550 + 4 * v588);
            float v598 = ((float)(v590 - v595)
                  + 3.14159265
                  + (double)((int)(((float)(v590 - v595) + 3.14159265) * 0.159154943)
                           - ((float)(v590 - v595) + 3.14159265 < 0.0))
                  * -6.28318531
                  + -3.14159265)
                 * v597;
            float v586 = v586
                 + (float)((float)((float)((float)(v591 - v596) * v597) * (float)((float)(v591 - v596) * v597))
                         + (float)(v598 * v598));
            ++v588;
          }
          while (v1552 != v588);
        }
        int v57 = v1518;
        float v72 = v586 / (float)v1518;
        if (v72 >= v306) {
          break;
        }
LABEL_30:
        int v71 = v1441 + 1;
        float32x4_t v55 = 0uLL;
        if (v1441 == 3) {
          goto LABEL_444;
        }
      }
      *(_OWORD *)((char *)v1559 + 4) = *(_OWORD *)((char *)&v1559[3] + 4);
      *(_OWORD *)((char *)&v1559[1] + 4) = *(_OWORD *)((char *)&v1559[4] + 4);
      *(_OWORD *)((char *)&v1559[2] + 4) = *(_OWORD *)((char *)&v1559[5] + 4);
      float v72 = v306;
      float32x4_t v55 = 0uLL;
LABEL_444:
      float v662 = sqrtf(v72);
      BOOL v663 = v662 > v1438 && v1440 + 2 < v1439;
      if (v663) {
        float v664 = v662;
      }
      else {
        float v664 = v1438;
      }
      uint64_t v665 = SDWORD2(v1558);
      if (SDWORD2(v1558) <= 0) {
        int v666 = -(-DWORD2(v1558) & 3);
      }
      else {
        int v666 = BYTE8(v1558) & 3;
      }
      unint64_t v667 = (DWORD2(v1558) - v666);
      if ((int)v667 < 1)
      {
        LODWORD(v694) = 0;
        float32x4_t v681 = v1452;
        float32x4_t v680 = v1453;
        float32x4_t v683 = v1450;
        float32x4_t v682 = v1451;
        float32x4_t v684 = v1448;
        float32x4_t v685 = v1449;
        float32x4_t v687 = v1446;
        float32x4_t v686 = v1447;
        float32x4_t v689 = v1444;
        float32x4_t v688 = v1445;
        float32x4_t v690 = v1443;
        if (*(uint64_t *)((char *)&v1558 + 4) > 0) {
          goto LABEL_459;
        }
      }
      else
      {
        uint64_t v668 = 0;
        unint64_t v669 = 0;
        uint64_t v670 = *(void *)((char *)v1559 + 4);
        float v671 = *((float *)v1559 + 3);
        float v672 = *(float *)&v1559[1];
        float v673 = *(float *)&v1559[2];
        uint64_t v674 = *(void *)((char *)&v1559[1] + 4);
        float v675 = *((float *)&v1559[1] + 3);
        float v676 = *((float *)&v1559[2] + 1);
        float32x4_t v677 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 8), 0);
        float32x4_t v678 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 12), 0);
        float32x4_t v679 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1559[3], 0);
        float32x4_t v681 = v1452;
        float32x4_t v680 = v1453;
        float32x4_t v683 = v1450;
        float32x4_t v682 = v1451;
        float32x4_t v684 = v1448;
        float32x4_t v685 = v1449;
        float32x4_t v687 = v1446;
        float32x4_t v686 = v1447;
        float32x4_t v689 = v1444;
        float32x4_t v688 = v1445;
        float32x4_t v690 = v1443;
        do
        {
          float32x4_t v691 = vsubq_f32(*(float32x4_t *)(v1556 + v668), v677);
          float32x4_t v692 = vsubq_f32(*(float32x4_t *)(*((void *)&v1556 + 1) + v668), v678);
          float32x4_t v693 = vsubq_f32(*(float32x4_t *)((char *)v1557[0] + v668), v679);
          *(float32x4_t *)(v1562 + v66_Block_object_dispose(&STACK[0x220], 8) = vaddq_f32(vaddq_f32(vmulq_n_f32(v691, *(float *)&v670), vmulq_n_f32(v692, v672)), vmulq_n_f32(v693, v675));
          *(float32x4_t *)(*((void *)&v1562 + 1) + v66_Block_object_dispose(&STACK[0x220], 8) = vaddq_f32(vaddq_f32(vmulq_n_f32(v691, *((float *)&v670 + 1)), vmulq_n_f32(v692, *(float *)&v674)), vmulq_n_f32(v693, v673));
          *(float32x4_t *)(v1563 + v66_Block_object_dispose(&STACK[0x220], 8) = vaddq_f32(vaddq_f32(vmulq_n_f32(v691, v671), vmulq_n_f32(v692, *((float *)&v674 + 1))), vmulq_n_f32(v693, v676));
          v669 += 4;
          v668 += 16;
        }
        while (v669 < v667);
        LODWORD(v694) = v669;
        if ((int)v669 >= (int)v665) {
          goto LABEL_461;
        }
LABEL_459:
        long long v695 = v1556;
        float32x4_t v696 = (float *)v1557[0];
        long long v697 = v1562;
        uint64_t v698 = v1563;
        unint64_t v694 = (int)v694;
        if ((unint64_t)(v665 - (int)v694) < 0xC) {
          goto LABEL_875;
        }
        uint64_t v1513 = v665 - (int)v694;
        uint64_t v756 = 4 * (int)v694;
        unint64_t v757 = v1562 + v756;
        unint64_t v758 = v1562 + 4 * v665;
        unint64_t v759 = *((void *)&v1562 + 1) + v756;
        unint64_t v760 = *((void *)&v1562 + 1) + 4 * v665;
        unint64_t v761 = v1563 + v756;
        unint64_t v762 = v1563 + 4 * v665;
        unint64_t v763 = v1556 + v756;
        unint64_t v764 = v1556 + 4 * v665;
        unint64_t v765 = *((void *)&v1556 + 1) + v756;
        unint64_t v766 = *((void *)&v1556 + 1) + 4 * v665;
        float v767 = (char *)v1557[0] + v756;
        float v768 = (char *)v1557[0] + 4 * v665;
        BOOL v769 = (uint64_t)v1562 + v756 >= v762 || v761 >= v758;
        BOOL v770 = !v769;
        BOOL v1554 = v770;
        BOOL v771 = v757 >= v764 || v763 >= v758;
        BOOL v772 = !v771;
        BOOL v1540 = v772;
        BOOL v773 = v757 >= v766 || v765 >= v758;
        BOOL v774 = !v773;
        BOOL v1527 = v774;
        BOOL v775 = v757 >= (unint64_t)v768 || (unint64_t)v767 >= v758;
        BOOL v776 = !v775;
        BOOL v777 = v757 >= (unint64_t)&v1559[3] + 4 || (unint64_t)v1559 + 4 >= v758;
        BOOL v778 = !v777;
        BOOL v779 = v759 >= v762 || v761 >= v760;
        BOOL v780 = !v779;
        BOOL v781 = v759 >= v764 || v763 >= v760;
        BOOL v782 = !v781;
        BOOL v783 = v759 >= v766 || v765 >= v760;
        BOOL v784 = !v783;
        BOOL v785 = v759 >= (unint64_t)v768 || (unint64_t)v767 >= v760;
        BOOL v786 = !v785;
        BOOL v787 = v759 >= (unint64_t)&v1559[3] + 4 || (unint64_t)v1559 + 4 >= v760;
        BOOL v788 = !v787;
        BOOL v789 = v761 >= v764 || v763 >= v762;
        BOOL v790 = !v789;
        BOOL v791 = v761 >= v766 || v765 >= v762;
        BOOL v792 = !v791;
        BOOL v793 = v761 >= (unint64_t)v768 || (unint64_t)v767 >= v762;
        BOOL v794 = !v793;
        BOOL v795 = v761 >= (unint64_t)&v1559[3] + 4 || (unint64_t)v1559 + 4 >= v762;
        BOOL v796 = !v795;
        if (v759 < v758 && v757 < v760) {
          goto LABEL_875;
        }
        if (v1554) {
          goto LABEL_875;
        }
        if (v1540) {
          goto LABEL_875;
        }
        if (v1527) {
          goto LABEL_875;
        }
        if (v776) {
          goto LABEL_875;
        }
        if (v778) {
          goto LABEL_875;
        }
        if (v780) {
          goto LABEL_875;
        }
        if (v782) {
          goto LABEL_875;
        }
        if (v784) {
          goto LABEL_875;
        }
        if (v786) {
          goto LABEL_875;
        }
        if (v788) {
          goto LABEL_875;
        }
        if (v790) {
          goto LABEL_875;
        }
        if (v792) {
          goto LABEL_875;
        }
        if (v794) {
          goto LABEL_875;
        }
        if (v796) {
          goto LABEL_875;
        }
        unint64_t v694 = (v1513 & 0xFFFFFFFFFFFFFFFCLL) + (int)v694;
        float v798 = (float32x4_t *)(v1556 + v756);
        float v799 = (float32x4_t *)(*((void *)&v1556 + 1) + v756);
        float v800 = (float32x4_t *)((char *)v1557[0] + v756);
        float v801 = (float32x4_t *)(v1562 + v756);
        float v802 = (float32x4_t *)(*((void *)&v1562 + 1) + v756);
        uint64_t v803 = (float32x4_t *)(v1563 + v756);
        unint64_t v804 = v1513 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float32x4_t v805 = *v798++;
          float32x4_t v806 = v805;
          float32x4_t v807 = *v799++;
          float32x4_t v808 = v807;
          float32x4_t v809 = *v800++;
          float32x4_t v810 = vsubq_f32(v806, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 8), 0));
          float32x4_t v811 = vsubq_f32(v808, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1559[2] + 12), 0));
          float32x4_t v812 = vsubq_f32(v809, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1559[3], 0));
          float32x4_t v813 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v811, *(float *)&v1559[1]), v810, *((float *)v1559 + 1)), v812, *((float *)&v1559[1] + 3));
          float32x4_t v814 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v811, *((float *)&v1559[1] + 1)), v810, *((float *)v1559 + 2)), v812, *(float *)&v1559[2]);
          float32x4_t v815 = vmlaq_n_f32(vmulq_n_f32(v811, *((float *)&v1559[1] + 2)), v810, *((float *)v1559 + 3));
          v810.i32[0] = DWORD1(v1559[2]);
          *v801++ = v813;
          *v802++ = v814;
          *v803++ = vmlaq_n_f32(v815, v812, v810.f32[0]);
          v804 -= 4;
        }
        while (v804);
        if (v1513 != (v1513 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_875:
          do
          {
            uint64_t v699 = 4 * v694;
            float v700 = *(float *)(v695 + 4 * v694) - *((float *)&v1559[2] + 2);
            float v701 = *(float *)(*((void *)&v695 + 1) + 4 * v694) - *((float *)&v1559[2] + 3);
            float v702 = v696[v694] - *(float *)&v1559[3];
            float v703 = (float)((float)(*(float *)&v1559[1] * v701) + (float)(*((float *)v1559 + 1) * v700))
                 + (float)(*((float *)&v1559[1] + 3) * v702);
            float v704 = (float)((float)(v701 * *((float *)&v1559[1] + 1)) + (float)(*((float *)v1559 + 2) * v700))
                 + (float)(*(float *)&v1559[2] * v702);
            float v705 = (float)((float)(v701 * *((float *)&v1559[1] + 2)) + (float)(*((float *)v1559 + 3) * v700))
                 + (float)(*((float *)&v1559[2] + 1) * v702);
            *(float *)(v697 + v699) = v703;
            *(float *)(*((void *)&v697 + 1) + v699) = v704;
            *(float *)(v698 + v699) = v705;
            ++v694;
          }
          while (v665 != v694);
        }
      }
LABEL_461:
      uint64_t v706 = v1558;
      uint64_t v707 = SDWORD2(v1558);
      if (SDWORD2(v1558) <= 0) {
        int v708 = -(-DWORD2(v1558) & 3);
      }
      else {
        int v708 = BYTE8(v1558) & 3;
      }
      unint64_t v709 = (DWORD2(v1558) - v708);
      if ((int)v709 < 1)
      {
        LODWORD(j) = 0;
        int32x2_t v727 = "isual localization is not supported on this device";
        int32x2_t v728 = "isual localization is not supported on this device";
        int32x2_t v729 = "isual localization is not supported on this device";
        int32x2_t v730 = "isual localization is not supported on this device";
        if (*(uint64_t *)((char *)&v1558 + 4) <= 0) {
          goto LABEL_472;
        }
        goto LABEL_470;
      }
      unint64_t v710 = 0;
      for (unint64_t j = 0; j < v709; j += 4)
      {
        float32x4_t v712 = *(float32x4_t *)(v1562 + v710);
        float32x4_t v713 = *(float32x4_t *)(*((void *)&v1562 + 1) + v710);
        float32x4_t v714 = *(float32x4_t *)(v706 + v710);
        float32x4_t v715 = vabsq_f32(v712);
        float32x4_t v716 = vabsq_f32(v713);
        float32x4_t v717 = vdivq_f32(vminq_f32(v715, v716), vmaxq_f32(v715, v716));
        float32x4_t v718 = vmulq_f32(v717, v717);
        float32x4_t v719 = vaddq_f32(v717, vmulq_f32(vmulq_f32(v717, v718), vaddq_f32(vmulq_f32(v718, vaddq_f32(vmulq_f32(v718, v680), v681)), v682)));
        float32x4_t v720 = (float32x4_t)vbslq_s8((int8x16_t)vcagtq_f32(v713, v712), (int8x16_t)vsubq_f32(v683, v719), (int8x16_t)vaddq_f32(v719, v55));
        float32x4_t v721 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v712), (int8x16_t)vsubq_f32(v685, v720), (int8x16_t)v720);
        float32x4_t v722 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v713), (int8x16_t)vsubq_f32(v55, v721), (int8x16_t)v721);
        float32x4_t v723 = vdivq_f32(*(float32x4_t *)(v1563 + v710), vsqrtq_f32(vaddq_f32(vmulq_f32(v712, v712), vmulq_f32(v713, v713))));
        float32x4_t v724 = vmulq_f32(v723, v723);
        float32x4_t v725 = vsubq_f32(*(float32x4_t *)(v1555 + v710), v722);
        float32x4_t v726 = vmulq_f32(v714, vsubq_f32(*(float32x4_t *)(*((void *)&v1555 + 1) + v710), vmulq_f32(v723, vaddq_f32(vaddq_f32(vmulq_f32(vmulq_f32(v724, v724), v684), vmulq_f32(v724, v686)), v688))));
        *(float32x4_t *)(*((void *)&v1564 + 1) + v710) = vmulq_f32(v714, vaddq_f32(v725, vmulq_f32(vcvtq_f32_s32(vaddq_s32(vcvtq_s32_f32(vmulq_f32(vaddq_f32(v725, v685), v687)), vcgtq_f32(v689, v725))), v690)));
        *(float32x4_t *)&v1565[v710 / 4] = v726;
        v710 += 16;
      }
      int32x2_t v727 = "prepareWithLocation: Visual localization is not supported on this device" + 22;
      int32x2_t v728 = "prepareWithLocation: Visual localization is not supported on this device" + 22;
      int32x2_t v729 = "prepareWithLocation: Visual localization is not supported on this device" + 22;
      int32x2_t v730 = "prepareWithLocation: Visual localization is not supported on this device" + 22;
      if ((int)j < (int)v707)
      {
LABEL_470:
        long long v731 = v1555;
        long long v732 = v1562;
        uint64_t v1512 = v1563;
        uint64_t v733 = *((void *)&v1564 + 1);
        uint64_t v734 = (int)j;
        uint64_t v735 = v1565;
        do
        {
          float v736 = *(float *)(v731 + 4 * v734);
          float v737 = *(float *)(*((void *)&v731 + 1) + 4 * v734);
          float v738 = *(float *)(v732 + 4 * v734);
          float v739 = *(float *)(*((void *)&v732 + 1) + 4 * v734);
          float v740 = *(float *)(v1512 + 4 * v734);
          uint64_t v741 = v707;
          float32x4_t v742 = v728;
          float v743 = atan2f(v739, v738);
          float v744 = atanf(v740 / sqrtf((float)(v739 * v739) + (float)(v738 * v738)));
          int32x2_t v728 = v742;
          uint64_t v707 = v741;
          double v745 = (float)(v736 - v743) + *((double *)v727 + 166);
          float v746 = *(float *)(v706 + 4 * v734);
          *(float *)&double v745 = (v745
                           + (double)((int)(v745 * *((double *)v742 + 241)) - (v745 < 0.0)) * *((double *)v729 + 242)
                           + *((double *)v730 + 243))
                          * v746;
          *(_DWORD *)(v733 + 4 * v734) = LODWORD(v745);
          v735[v734++] = (float)(v737 - v744) * v746;
        }
        while (v741 != v734);
      }
LABEL_472:
      LODWORD(v56) = DWORD2(v1558);
      if (SDWORD2(v1558) < 1)
      {
        float v54 = 0.0;
        int v749 = 1;
        unint64_t v48 = v1436;
      }
      else
      {
        uint64_t v747 = 0;
        float v748 = v664 * v664;
        float v54 = 0.0;
        LOBYTE(v749) = 1;
        unint64_t v48 = v1436;
        do
        {
          float v751 = (float)(v1565[v747] * v1565[v747])
               + (float)(*(float *)(*((void *)&v1564 + 1) + 4 * v747) * *(float *)(*((void *)&v1564 + 1) + 4 * v747));
          int v752 = v751 > v748;
          BOOL v663 = v751 <= v748;
          float v750 = 0.0;
          if (v663)
          {
            if ((void)v1558) {
              float v750 = *(float *)(v1558 + 4 * v747);
            }
            else {
              float v750 = 1.0;
            }
          }
          int v749 = v749 & (*((unsigned __int8 *)v1557[1] + v747) == v752);
          float v54 = v54 + v750;
          *((unsigned char *)v1557[1] + v747++) = v752;
          LODWORD(v56) = DWORD2(v1558);
        }
        while (v747 < SDWORD2(v1558));
      }
      if (v749) {
        _ZF = v664 == v1438;
      }
      else {
        _ZF = 0;
      }
      if (!_ZF)
      {
        int v754 = ++v1440;
        BOOL v755 = v54 < 0.0 || v754 == v1439;
        float32x4_t v55 = 0uLL;
        if (!v755) {
          continue;
        }
      }
      break;
    }
LABEL_598:
    long long v1569 = *(_OWORD *)((char *)v1559 + 4);
    long long v1570 = *(_OWORD *)((char *)&v1559[1] + 4);
    long long v1571 = *(_OWORD *)((char *)&v1559[2] + 4);
    unint64_t v816 = v48 + 160 * v1432;
    *(float *)(v816 + 4) = v54;
    unint64_t v817 = v816 + 4;
    apply_pose_rotation((float *)&v1569, (float32x2_t *)(*(void *)&v1435[18] + 232), (float *)(v817 + 36));
    double v818 = *(float *)(*(void *)&v1435[18] + 236) * *(float *)(v817 + 64)
         + *(float *)(v817 + 60) * *(float *)(*(void *)&v1435[18] + 232)
         + *(float *)(v817 + 68) * *(float *)(*(void *)&v1435[18] + 240);
    double v819 = fabs(v818);
    double v820 = cosf(*(float *)(v1433 + 140));
    if (v1431)
    {
      printf("Info : ");
      double v821 = (float)(*(float *)v817 * 0.03125);
      float v822 = v818;
      float v823 = acosf(v822);
      printf(" score: %6.3f (gravity test: %d (%f degrees))", v821, v819 > v820, v823 * 180.0 / 3.14159265);
      putchar(10);
    }
    uint64_t v6 = v1429;
    if (v819 <= v820) {
      *(_DWORD *)unint64_t v817 = 0;
    }
    float v10 = v1430;
    if (v1431)
    {
      LODWORD(v1578[0]) = 0;
      LODWORD(v1566) = 0;
      vl_gt_get_pose_err(v1435 + 12, (float32x2_t *)(v817 + 36), (float *)v1578, (float *)&v1566);
      printf("Info : ");
      printf("  diff from gt : (%s%.2f%s, %s%.2f%s)", "", *(float *)&v1566 * 180.0 / 3.14159265, "", "", *(float *)v1578, "");
      putchar(10);
    }
    uint64_t v23 = v1432 + 1;
    long long v25 = 0uLL;
    if (v1432 + 1 != v1427) {
      continue;
    }
    break;
  }
LABEL_796:
  v1268 = (char *)malloc_type_malloc(0x200uLL, 0xCE6FC97FuLL);
  unint64_t v1269 = *v10;
  if (*v10)
  {
    uint64_t v1270 = 0;
    BOOL v1271 = 1;
    uint64_t v1272 = v10[1];
    uint64_t v1273 = 32;
    long long v1274 = 0uLL;
    while (1)
    {
      uint64_t v1275 = v1270;
      while (1)
      {
        if (!v1271)
        {
          --v1275;
          v1276 = &v1268[16 * v1275];
          unint64_t v1269 = *((void *)v1276 + 1);
          uint64_t v1272 = v10[1] + 160 * *(void *)v1276;
        }
        if ((uint64_t)v1269 > 15) {
          break;
        }
        if ((uint64_t)v1269 > 1)
        {
          uint64_t v1277 = v1272 + 160;
          uint64_t v1278 = 2;
          for (uint64_t k = 1; k != v1269; ++k)
          {
            uint64_t v1280 = v1277;
            uint64_t v1281 = v1278;
            do
            {
              if ((float)(*(float *)(v1272 + 160 * (v1281 - 2) + 4) - *(float *)(v1280 + 4)) >= 0.0) {
                break;
              }
              v1282 = (_OWORD *)(v1272 + 160 * (v1281 - 2));
              long long v1587 = v1274;
              long long v1586 = v1274;
              long long v1585 = v1274;
              long long v1584 = v1274;
              long long v1583 = v1274;
              long long v1582 = v1274;
              *(_OWORD *)v1581 = v1274;
              *(_OWORD *)v1580 = v1274;
              long long v1579 = v1274;
              *(_OWORD *)v1578 = v1274;
              long long v1283 = *(_OWORD *)v1280;
              long long v1579 = *(_OWORD *)(v1280 + 16);
              *(_OWORD *)v1578 = v1283;
              long long v1284 = *(_OWORD *)(v1280 + 32);
              long long v1285 = *(_OWORD *)(v1280 + 48);
              long long v1286 = *(_OWORD *)(v1280 + 64);
              long long v1583 = *(_OWORD *)(v1280 + 80);
              long long v1582 = v1286;
              *(_OWORD *)v1581 = v1285;
              *(_OWORD *)v1580 = v1284;
              long long v1287 = *(_OWORD *)(v1280 + 96);
              long long v1288 = *(_OWORD *)(v1280 + 112);
              long long v1289 = *(_OWORD *)(v1280 + 128);
              long long v1587 = *(_OWORD *)(v1280 + 144);
              long long v1586 = v1289;
              long long v1585 = v1288;
              long long v1584 = v1287;
              long long v1290 = v1282[1];
              *(_OWORD *)uint64_t v1280 = *v1282;
              *(_OWORD *)(v1280 + 16) = v1290;
              long long v1291 = v1282[2];
              long long v1292 = v1282[3];
              long long v1293 = v1282[5];
              *(_OWORD *)(v1280 + 64) = v1282[4];
              *(_OWORD *)(v1280 + 80) = v1293;
              *(_OWORD *)(v1280 + 32) = v1291;
              *(_OWORD *)(v1280 + 4_Block_object_dispose(&STACK[0x220], 8) = v1292;
              long long v1294 = v1282[6];
              long long v1295 = v1282[7];
              long long v1296 = v1282[9];
              *(_OWORD *)(v1280 + 12_Block_object_dispose(&STACK[0x220], 8) = v1282[8];
              *(_OWORD *)(v1280 + 144) = v1296;
              *(_OWORD *)(v1280 + 96) = v1294;
              *(_OWORD *)(v1280 + 112) = v1295;
              long long v1297 = v1579;
              _OWORD *v1282 = *(_OWORD *)v1578;
              v1282[1] = v1297;
              long long v1298 = *(_OWORD *)v1580;
              long long v1299 = *(_OWORD *)v1581;
              long long v1300 = v1583;
              v1282[4] = v1582;
              v1282[5] = v1300;
              v1282[2] = v1298;
              v1282[3] = v1299;
              long long v1301 = v1584;
              long long v1302 = v1585;
              long long v1303 = v1587;
              v1282[8] = v1586;
              v1282[9] = v1303;
              v1282[6] = v1301;
              v1282[7] = v1302;
              --v1281;
              v1280 -= 160;
            }
            while (v1281 > 1);
            ++v1278;
            v1277 += 160;
          }
        }
        BOOL v1271 = 0;
        unint64_t v1269 = 0;
        if (v1275 < 1) {
          goto LABEL_865;
        }
      }
      if (v1269 > 0x27) {
        break;
      }
      unint64_t v1304 = v1269 >> 1;
      float v1305 = *(float *)(v1272 + 160 * (v1269 >> 1) + 4);
      float v1306 = *(float *)(v1272 + 4);
      float v1307 = *(float *)(v1272 + 160 * (v1269 - 1) + 4);
      if ((float)(v1305 - v1306) >= 0.0)
      {
        if ((float)(v1307 - v1306) >= 0.0)
        {
          if ((float)(v1307 - v1305) < 0.0) {
            unint64_t v1304 = v1269 - 1;
          }
        }
        else
        {
          unint64_t v1304 = 0;
        }
      }
      else if ((float)(v1307 - v1305) >= 0.0)
      {
        if ((float)(v1307 - v1306) >= 0.0) {
          unint64_t v1304 = 0;
        }
        else {
          unint64_t v1304 = v1269 - 1;
        }
      }
LABEL_848:
      uint64_t v1328 = 0;
      uint64_t v1329 = 0;
      long long v1587 = v1274;
      long long v1586 = v1274;
      long long v1585 = v1274;
      long long v1584 = v1274;
      long long v1583 = v1274;
      long long v1582 = v1274;
      *(_OWORD *)v1581 = v1274;
      *(_OWORD *)v1580 = v1274;
      long long v1579 = v1274;
      *(_OWORD *)v1578 = v1274;
      long long v1330 = *(_OWORD *)v1272;
      long long v1579 = *(_OWORD *)(v1272 + 16);
      *(_OWORD *)v1578 = v1330;
      long long v1331 = *(_OWORD *)(v1272 + 32);
      long long v1332 = *(_OWORD *)(v1272 + 48);
      long long v1333 = *(_OWORD *)(v1272 + 64);
      long long v1583 = *(_OWORD *)(v1272 + 80);
      long long v1582 = v1333;
      *(_OWORD *)v1581 = v1332;
      *(_OWORD *)v1580 = v1331;
      long long v1334 = *(_OWORD *)(v1272 + 96);
      long long v1335 = *(_OWORD *)(v1272 + 112);
      long long v1336 = *(_OWORD *)(v1272 + 128);
      long long v1587 = *(_OWORD *)(v1272 + 144);
      long long v1586 = v1336;
      long long v1585 = v1335;
      long long v1584 = v1334;
      v1337 = (_OWORD *)(v1272 + 160 * v1304);
      long long v1338 = v1337[1];
      *(_OWORD *)uint64_t v1272 = *v1337;
      *(_OWORD *)(v1272 + 16) = v1338;
      long long v1339 = v1337[2];
      long long v1340 = v1337[3];
      long long v1341 = v1337[5];
      *(_OWORD *)(v1272 + 64) = v1337[4];
      *(_OWORD *)(v1272 + 80) = v1341;
      *(_OWORD *)(v1272 + 32) = v1339;
      *(_OWORD *)(v1272 + 4_Block_object_dispose(&STACK[0x220], 8) = v1340;
      long long v1342 = v1337[6];
      long long v1343 = v1337[7];
      long long v1344 = v1337[9];
      *(_OWORD *)(v1272 + 12_Block_object_dispose(&STACK[0x220], 8) = v1337[8];
      *(_OWORD *)(v1272 + 144) = v1344;
      *(_OWORD *)(v1272 + 96) = v1342;
      *(_OWORD *)(v1272 + 112) = v1343;
      long long v1345 = v1579;
      _OWORD *v1337 = *(_OWORD *)v1578;
      v1337[1] = v1345;
      long long v1346 = *(_OWORD *)v1580;
      long long v1347 = *(_OWORD *)v1581;
      long long v1348 = v1583;
      v1337[4] = v1582;
      v1337[5] = v1348;
      v1337[2] = v1346;
      v1337[3] = v1347;
      long long v1349 = v1584;
      long long v1350 = v1585;
      long long v1351 = v1587;
      v1337[8] = v1586;
      v1337[9] = v1351;
      v1337[6] = v1349;
      v1337[7] = v1350;
      unint64_t v1352 = v1269 - 1;
      uint64_t v1353 = v1272 + 164;
      do
      {
        if ((float)(*(float *)(v1272 + 4) - *(float *)v1353) <= 0.0)
        {
          ++v1329;
          long long v1587 = v1274;
          long long v1586 = v1274;
          long long v1585 = v1274;
          long long v1584 = v1274;
          long long v1583 = v1274;
          long long v1582 = v1274;
          *(_OWORD *)v1581 = v1274;
          *(_OWORD *)v1580 = v1274;
          long long v1579 = v1274;
          *(_OWORD *)v1578 = v1274;
          long long v1354 = *(_OWORD *)(v1353 - 4);
          long long v1579 = *(_OWORD *)(v1353 + 12);
          *(_OWORD *)v1578 = v1354;
          long long v1355 = *(_OWORD *)(v1353 + 28);
          long long v1356 = *(_OWORD *)(v1353 + 44);
          long long v1357 = *(_OWORD *)(v1353 + 60);
          long long v1583 = *(_OWORD *)(v1353 + 76);
          long long v1582 = v1357;
          *(_OWORD *)v1581 = v1356;
          *(_OWORD *)v1580 = v1355;
          long long v1358 = *(_OWORD *)(v1353 + 92);
          long long v1359 = *(_OWORD *)(v1353 + 108);
          long long v1360 = *(_OWORD *)(v1353 + 124);
          long long v1587 = *(_OWORD *)(v1353 + 140);
          long long v1586 = v1360;
          long long v1585 = v1359;
          long long v1584 = v1358;
          v1361 = (long long *)(v1272 + 160 * v1329);
          long long v1362 = *v1361;
          *(_OWORD *)(v1353 + 12) = v1361[1];
          *(_OWORD *)(v1353 - 4) = v1362;
          long long v1363 = v1361[2];
          long long v1364 = v1361[3];
          long long v1365 = v1361[4];
          *(_OWORD *)(v1353 + 76) = v1361[5];
          *(_OWORD *)(v1353 + 60) = v1365;
          *(_OWORD *)(v1353 + 44) = v1364;
          *(_OWORD *)(v1353 + 2_Block_object_dispose(&STACK[0x220], 8) = v1363;
          long long v1366 = v1361[6];
          long long v1367 = v1361[7];
          long long v1368 = v1361[8];
          *(_OWORD *)(v1353 + 140) = v1361[9];
          *(_OWORD *)(v1353 + 124) = v1368;
          *(_OWORD *)(v1353 + 10_Block_object_dispose(&STACK[0x220], 8) = v1367;
          *(_OWORD *)(v1353 + 92) = v1366;
          long long v1369 = v1579;
          long long *v1361 = *(_OWORD *)v1578;
          v1361[1] = v1369;
          long long v1370 = *(_OWORD *)v1580;
          long long v1371 = *(_OWORD *)v1581;
          long long v1372 = v1583;
          v1361[4] = v1582;
          v1361[5] = v1372;
          v1361[2] = v1370;
          v1361[3] = v1371;
          long long v1373 = v1584;
          long long v1374 = v1585;
          long long v1375 = v1587;
          v1361[8] = v1586;
          v1361[9] = v1375;
          v1361[6] = v1373;
          v1361[7] = v1374;
          if ((float)(*(float *)(v1272 + 4) - *(float *)v1353) == 0.0)
          {
            ++v1328;
            long long v1587 = v1274;
            long long v1586 = v1274;
            long long v1585 = v1274;
            long long v1584 = v1274;
            long long v1583 = v1274;
            long long v1582 = v1274;
            *(_OWORD *)v1581 = v1274;
            *(_OWORD *)v1580 = v1274;
            long long v1579 = v1274;
            *(_OWORD *)v1578 = v1274;
            long long v1376 = *v1361;
            long long v1579 = v1361[1];
            *(_OWORD *)v1578 = v1376;
            long long v1377 = v1361[2];
            long long v1378 = v1361[3];
            long long v1379 = v1361[4];
            long long v1583 = v1361[5];
            long long v1582 = v1379;
            *(_OWORD *)v1581 = v1378;
            *(_OWORD *)v1580 = v1377;
            long long v1380 = v1361[6];
            long long v1381 = v1361[7];
            long long v1382 = v1361[8];
            long long v1587 = v1361[9];
            long long v1586 = v1382;
            long long v1585 = v1381;
            long long v1584 = v1380;
            v1383 = (long long *)(v1272 + 160 * v1328);
            long long v1384 = v1383[1];
            long long *v1361 = *v1383;
            v1361[1] = v1384;
            long long v1385 = v1383[2];
            long long v1386 = v1383[3];
            long long v1387 = v1383[5];
            v1361[4] = v1383[4];
            v1361[5] = v1387;
            v1361[2] = v1385;
            v1361[3] = v1386;
            long long v1388 = v1383[6];
            long long v1389 = v1383[7];
            long long v1390 = v1383[9];
            v1361[8] = v1383[8];
            v1361[9] = v1390;
            v1361[6] = v1388;
            v1361[7] = v1389;
            long long v1391 = v1579;
            long long *v1383 = *(_OWORD *)v1578;
            v1383[1] = v1391;
            long long v1392 = *(_OWORD *)v1580;
            long long v1393 = *(_OWORD *)v1581;
            long long v1394 = v1583;
            v1383[4] = v1582;
            v1383[5] = v1394;
            v1383[2] = v1392;
            v1383[3] = v1393;
            long long v1395 = v1584;
            long long v1396 = v1585;
            long long v1397 = v1587;
            v1383[8] = v1586;
            v1383[9] = v1397;
            v1383[6] = v1395;
            v1383[7] = v1396;
          }
        }
        v1353 += 160;
        --v1352;
      }
      while (v1352);
      uint64_t v1398 = v1328 + 1;
      uint64_t v1399 = 160 * v1328;
      uint64_t v1400 = -160 * v1328 + 160 * v1329;
      do
      {
        long long v1587 = v1274;
        long long v1586 = v1274;
        long long v1585 = v1274;
        long long v1584 = v1274;
        long long v1583 = v1274;
        long long v1582 = v1274;
        *(_OWORD *)v1581 = v1274;
        *(_OWORD *)v1580 = v1274;
        long long v1579 = v1274;
        *(_OWORD *)v1578 = v1274;
        v1401 = (_OWORD *)(v1272 + v1400);
        long long v1402 = *(_OWORD *)(v1272 + v1400);
        long long v1579 = *(_OWORD *)(v1272 + v1400 + 16);
        *(_OWORD *)v1578 = v1402;
        long long v1403 = *(_OWORD *)(v1272 + v1400 + 32);
        long long v1404 = *(_OWORD *)(v1272 + v1400 + 48);
        long long v1405 = *(_OWORD *)(v1272 + v1400 + 64);
        long long v1583 = *(_OWORD *)(v1272 + v1400 + 80);
        long long v1582 = v1405;
        *(_OWORD *)v1581 = v1404;
        *(_OWORD *)v1580 = v1403;
        long long v1406 = *(_OWORD *)(v1272 + v1400 + 96);
        long long v1407 = *(_OWORD *)(v1272 + v1400 + 112);
        long long v1408 = *(_OWORD *)(v1272 + v1400 + 128);
        long long v1587 = *(_OWORD *)(v1272 + v1400 + 144);
        long long v1586 = v1408;
        long long v1585 = v1407;
        long long v1584 = v1406;
        v1409 = (_OWORD *)(v1272 + v1399);
        long long v1410 = *(_OWORD *)(v1272 + v1399 + 16);
        _OWORD *v1401 = *(_OWORD *)(v1272 + v1399);
        v1401[1] = v1410;
        long long v1411 = *(_OWORD *)(v1272 + v1399 + 32);
        long long v1412 = *(_OWORD *)(v1272 + v1399 + 48);
        long long v1413 = *(_OWORD *)(v1272 + v1399 + 80);
        v1401[4] = *(_OWORD *)(v1272 + v1399 + 64);
        v1401[5] = v1413;
        v1401[2] = v1411;
        v1401[3] = v1412;
        long long v1414 = *(_OWORD *)(v1272 + v1399 + 96);
        long long v1415 = *(_OWORD *)(v1272 + v1399 + 112);
        long long v1416 = *(_OWORD *)(v1272 + v1399 + 144);
        v1401[8] = *(_OWORD *)(v1272 + v1399 + 128);
        v1401[9] = v1416;
        v1401[6] = v1414;
        v1401[7] = v1415;
        long long v1417 = v1579;
        _OWORD *v1409 = *(_OWORD *)v1578;
        v1409[1] = v1417;
        long long v1418 = *(_OWORD *)v1580;
        long long v1419 = *(_OWORD *)v1581;
        long long v1420 = v1583;
        v1409[4] = v1582;
        v1409[5] = v1420;
        v1409[2] = v1418;
        v1409[3] = v1419;
        long long v1421 = v1584;
        long long v1422 = v1585;
        long long v1423 = v1587;
        v1409[8] = v1586;
        v1409[9] = v1423;
        v1409[6] = v1421;
        v1409[7] = v1422;
        --v1398;
        v1399 -= 160;
        v1400 += 160;
      }
      while (v1398 > 0);
      uint64_t v1270 = v1275 + 1;
      if (v1275 + 1 >= v1273)
      {
        uint64_t v1424 = 2 * v1273;
        v1268 = (char *)malloc_type_realloc(v1268, 32 * v1273, 0x65BCD1F0uLL);
        long long v1274 = 0uLL;
        uint64_t v1273 = v1424;
        float v10 = v1430;
      }
      v1425 = &v1268[16 * v1275];
      *(void *)v1425 = v1329 - 0x3333333333333333 * ((uint64_t)(v1272 - v10[1]) >> 5) + 1;
      *((void *)v1425 + 1) = v1269 + ~v1329;
      unint64_t v1269 = v1329 - v1328;
      BOOL v1271 = v1329 != v1328;
      if (v1275 < 0 && !v1269) {
        goto LABEL_865;
      }
    }
    uint64_t v1308 = 0;
    uint64_t v1309 = 0;
    if (v1269 <= 0x7D0) {
      uint64_t v1310 = 8;
    }
    else {
      uint64_t v1310 = 26;
    }
    if (v1269 <= 0x7D0) {
      unint64_t v1311 = 3;
    }
    else {
      unint64_t v1311 = 9;
    }
    while (2)
    {
      uint64_t v1312 = (uint64_t)(v1269 - 1 + v1308) / v1310;
      float v1313 = *(float *)(v1272 + 160 * v1312 + 4);
      float v1314 = *(float *)(v1272 + 160 * (v1308 / v1310) + 4);
      uint64_t v1315 = (uint64_t)(2 * v1269 - 2 + v1308) / v1310;
      float v1316 = *(float *)(v1272 + 160 * v1315 + 4);
      if ((float)(v1313 - v1314) >= 0.0)
      {
        if ((float)(v1316 - v1314) < 0.0) {
          goto LABEL_829;
        }
        if ((float)(v1316 - v1313) < 0.0) {
          goto LABEL_831;
        }
      }
      else if ((float)(v1316 - v1313) >= 0.0)
      {
        if ((float)(v1316 - v1314) < 0.0)
        {
LABEL_831:
          v1578[v1309] = (void *)v1315;
LABEL_823:
          ++v1309;
          v1308 += 3 * v1269 - 3;
          if (v1311 != v1309) {
            continue;
          }
          while (2)
          {
            uint64_t v1317 = 0;
            unint64_t v1318 = 0;
            unint64_t v1319 = v1311;
            v1311 /= 3uLL;
            if (v1311 <= 1) {
              uint64_t v1320 = 1;
            }
            else {
              uint64_t v1320 = v1311;
            }
            uint64_t v1321 = 8 * v1320;
LABEL_839:
            v1322 = v1578[v1317];
            v1323 = v1578[v1317 + 1];
            v1324 = v1578[v1317 + 2];
            float v1325 = *(float *)(v1272 + 160 * (void)v1323 + 4);
            float v1326 = *(float *)(v1272 + 160 * (void)v1322 + 4);
            float v1327 = *(float *)(v1272 + 160 * (void)v1324 + 4);
            if ((float)(v1325 - v1326) >= 0.0)
            {
              if ((float)(v1327 - v1326) < 0.0) {
                goto LABEL_844;
              }
              if ((float)(v1327 - v1325) < 0.0) {
                goto LABEL_846;
              }
            }
            else if ((float)(v1327 - v1325) >= 0.0)
            {
              if ((float)(v1327 - v1326) < 0.0)
              {
LABEL_846:
                v1578[v1318 / 8] = v1324;
LABEL_838:
                v1318 += 8;
                v1317 += 3;
                if (v1321 == v1318)
                {
                  if (v1319 < 9)
                  {
                    unint64_t v1304 = (unint64_t)v1578[0];
                    goto LABEL_848;
                  }
                  continue;
                }
                goto LABEL_839;
              }
LABEL_844:
              v1578[v1318 / 8] = v1322;
              goto LABEL_838;
            }
            break;
          }
          v1578[v1318 / 8] = v1323;
          goto LABEL_838;
        }
LABEL_829:
        v1578[v1309] = (void *)(v1308 / v1310);
        goto LABEL_823;
      }
      break;
    }
    v1578[v1309] = (void *)v1312;
    goto LABEL_823;
  }
LABEL_865:
  free(v1268);
  BOOL v1267 = *(float *)(v10[1] + 4) < (float)(32 * *(_DWORD *)(v1433 + 152));
LABEL_870:
  free(v1428);
  hyp_refine_free((uint64_t)&v1555);
  return v1267;
}

void *hyp_refine_create(uint64_t a1, int a2)
{
  *(void *)(a1 + 40) = malloc_type_calloc(a2, 1uLL, 0x100004077774924uLL);
  *(void *)a1 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x220], 8) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x220], 8) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 176) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 256) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 16) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 184) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x220], 8) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 24) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 192) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 216) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 32) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 200) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 224) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 232) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  __n64 result = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)(a1 + 240) = result;
  *(_DWORD *)(a1 + 64) = a2;
  return result;
}

float apply_pose_rotation(float *a1, float32x2_t *a2, float *a3)
{
  _D1 = *a2;
  float v4 = a2[1].f32[0];
  int v32 = 0;
  uint64_t v31 = 0;
  _S2 = 0.0;
  __asm { FMLA            S7, S2, V1.S[1] }
  float v11 = v4 + (float)(-0.0 * _D1.f32[0]);
  float v12 = vmlas_n_f32(-_D1.f32[1], 0.0, _D1.f32[0]);
  float v13 = vmuls_lane_f32(-(float)((float)(_D1.f32[0] * 0.0) - _D1.f32[1]), _D1, 1) + (float)(v11 * v4);
  float v14 = vmlas_n_f32(-(float)(_D7.f32[0] * v4), v12, _D1.f32[0]);
  __asm { FMLA            S20, S7, V1.S[1] }
  double v16 = sqrt((float)((float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(_S20 * _S20)));
  float v17 = 0.0;
  float v18 = 0.0;
  float v19 = 0.0;
  if (v16 > 0.0)
  {
    float v19 = v13 / v16;
    float v18 = v14 / v16;
    float v17 = _S20 / v16;
  }
  double v20 = sqrt((float)((float)((float)(v11 * v11) + (float)(_D7.f32[0] * _D7.f32[0])) + (float)(v12 * v12)));
  float32x2_t v21 = 0;
  float32x2_t v22 = 0;
  if (v20 > 0.0)
  {
    _D7.f32[1] = v4 + (float)(-0.0 * _D1.f32[0]);
    float32x2_t v22 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(_D7), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v20, 0)));
    _S2 = v12 / v20;
  }
  double v23 = sqrt((float)((float)((float)(_D1.f32[1] * _D1.f32[1]) + (float)(_D1.f32[0] * _D1.f32[0])) + (float)(v4 * v4)));
  float v24 = 0.0;
  if (v23 > 0.0)
  {
    float32x2_t v21 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(_D1), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23, 0)));
    float v24 = v4 / v23;
  }
  v26[0] = v19;
  v26[1] = v18;
  v26[2] = v17;
  float32x2_t v27 = v22;
  float v28 = _S2;
  float32x2_t v29 = v21;
  float v30 = v24;
  return g_coordsf_conv(v26, a1, a3);
}

void hyp_refine_free(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 0;
}

void *rkd_create_ex(const void *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  float v12 = malloc_type_calloc(1uLL, 0x20uLL, 0x10B0040E7E5B2BFuLL);
  unint64_t v13 = a4 * (uint64_t)(int)a3;
  if (v13 >= 0x7FFFFFFF) {
    __assert_rtn("rkd_create_ex", "rkd.c", 690, "(size_t)n * k < INT32_MAX && \"Cannot create a rkd tree with more then INT32_MAX elements\"");
  }
  float v14 = v12;
  if (a5)
  {
    size_t v15 = 4 * v13;
    double v16 = malloc_type_malloc(4 * v13, 0x100004052888210uLL);
    *float v14 = v16;
    if (a4) {
      memcpy(v16, a1, v15);
    }
  }
  else
  {
    void *v12 = a1;
  }
  v14[1] = a2;
  if (a4 <= 1) {
    size_t v17 = 1;
  }
  else {
    size_t v17 = a4;
  }
  float v18 = malloc_type_calloc(v17, 0xCuLL, 0x10000403E1C8BA9uLL);
  v14[2] = v18;
  *((_DWORD *)v14 + 6) = a3;
  *((_DWORD *)v14 + 7) = a4;
  if (a4 >= 1 && (a4 <= 0xC350 || v18)) {
    rkd_split_node((uint64_t)v18, (float32x4_t *)*v14, (_DWORD *)v14[1], a3, a4, -1, a6);
  }
  return v14;
}

double rkd_split_node(uint64_t a1, float32x4_t *a2, _DWORD *a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  v76[1] = *MEMORY[0x263EF8340];
  v76[0] = (int)a4;
  size_t v14 = 4 * (int)a4;
  MEMORY[0x270FA5388](a1, a2);
  double v16 = (char *)v76 - v15;
  bzero((char *)v76 - v15, v14);
  if (*(_DWORD *)a7 > a5) {
    goto LABEL_2;
  }
  int v21 = *(_DWORD *)(a7 + 8);
  if (v21 == 2)
  {
    uint64_t v45 = rkd_split_dim_bbox(a2, a4, a5);
  }
  else
  {
    if (v21 != 1)
    {
      if (v21) {
        uint64_t v22 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v22 = ((a6 + 1) % (int)a4);
      }
      goto LABEL_39;
    }
    uint64_t v45 = rkd_split_dim_sdev(a2, a4, a5);
  }
  uint64_t v22 = v45;
LABEL_39:
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v22;
  uint64_t v46 = rkd_split_median((uint64_t)a2, (uint64_t)a3, a4, a5, v22, v16, *(float *)(a7 + 4));
  if (v46 == -1)
  {
    if ((int)a4 < 2)
    {
LABEL_2:
      if (a5 <= 2)
      {
        float v23 = 0.0;
        if (a5 != 2)
        {
LABEL_85:
          *(float *)a1 = v23;
          double result = NAN;
          *(void *)(a1 + 4) = -1;
          return result;
        }
      }
      else
      {
        int v17 = rkd_closest_to_mean((float32x2_t *)a2, a4, a5);
        float v18 = &a2->f32[v17 * (int)a4];
        memcpy(v16, v18, v14);
        memmove(v18, a2, v14);
        memcpy(a2, v16, v14);
        if (a3)
        {
          uint64_t v19 = v17;
          int v20 = a3[v19];
          a3[v19] = *a3;
          *a3 = v20;
        }
      }
      int v24 = a5 - 1;
      if (a4 == 2)
      {
        float v30 = a2->f32[0];
        uint64_t v31 = &a2->f32[v76[0] + 1];
        float v28 = 0.0;
        do
        {
          float v32 = (float)(a2->f32[1] - *v31) * (float)(a2->f32[1] - *v31);
          if ((float)(v32 + (float)((float)(v30 - *(v31 - 1)) * (float)(v30 - *(v31 - 1)))) > v28) {
            float v28 = v32 + (float)((float)(v30 - *(v31 - 1)) * (float)(v30 - *(v31 - 1)));
          }
          v31 += v76[0];
          --v24;
        }
        while (v24);
        goto LABEL_84;
      }
      if (a4 == 3)
      {
        float v25 = a2->f32[0];
        float v26 = a2->f32[1];
        float32x2_t v27 = &a2->f32[v76[0] + 2];
        float v28 = 0.0;
        do
        {
          float v29 = a2->f32[2] - *v27;
          if ((float)((float)((float)((float)(v26 - *(v27 - 1)) * (float)(v26 - *(v27 - 1)))
                             + (float)((float)(v25 - *(v27 - 2)) * (float)(v25 - *(v27 - 2))))
                     + (float)(v29 * v29)) > v28)
            float v28 = (float)((float)((float)(v26 - *(v27 - 1)) * (float)(v26 - *(v27 - 1)))
                        + (float)((float)(v25 - *(v27 - 2)) * (float)(v25 - *(v27 - 2))))
                + (float)(v29 * v29);
          v27 += v76[0];
          --v24;
        }
        while (v24);
        goto LABEL_84;
      }
      if ((int)a4 < 1)
      {
        float v28 = 0.0;
LABEL_84:
        float v23 = sqrtf(v28);
        goto LABEL_85;
      }
      int v33 = 0;
      float v28 = 0.0;
      uint64_t v34 = v76[0];
      while (1)
      {
        if (a4 >= 8)
        {
          float v36 = 0.0;
          uint64_t v37 = a4 & 0xFFFFFFF8;
          float v38 = a2;
          do
          {
            float32x4_t v39 = vsubq_f32(*v38, *(float32x4_t *)((char *)v38 + v34 * 4));
            float32x4_t v40 = vsubq_f32(v38[1], *(float32x4_t *)((char *)v38 + v34 * 4 + 16));
            float32x4_t v41 = vmulq_f32(v39, v39);
            float32x4_t v42 = vmulq_f32(v40, v40);
            float v36 = (float)((float)((float)((float)((float)((float)((float)(v36 + v41.f32[0]) + v41.f32[1]) + v41.f32[2])
                                                + v41.f32[3])
                                        + v42.f32[0])
                                + v42.f32[1])
                        + v42.f32[2])
                + v42.f32[3];
            v38 += 2;
            v37 -= 8;
          }
          while (v37);
          uint64_t v35 = a4 & 0xFFFFFFF8;
          if (v35 == a4) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v35 = 0;
          float v36 = 0.0;
        }
        uint64_t v43 = a4 - v35;
        float v44 = &a2->f32[v35];
        do
        {
          float v36 = v36 + (float)((float)(*v44 - v44[v34]) * (float)(*v44 - v44[v34]));
          ++v44;
          --v43;
        }
        while (v43);
LABEL_24:
        if (v36 > v28) {
          float v28 = v36;
        }
        ++v33;
        v34 += v76[0];
        if (v33 == v24) {
          goto LABEL_84;
        }
      }
    }
    int v55 = 1;
    while (1)
    {
      uint64_t v56 = ((*(_DWORD *)(a1 + 8) + 1) % (int)a4);
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v56;
      uint64_t v57 = rkd_split_median((uint64_t)a2, (uint64_t)a3, a4, a5, v56, v16, *(float *)(a7 + 4));
      if (v57 != -1) {
        break;
      }
      if (a4 == ++v55) {
        goto LABEL_2;
      }
    }
    uint64_t v46 = v57;
  }
  memcpy(v16, &a2->f32[(int)v46 * (int)a4], v14);
  memmove(&a2->f32[(int)v46 * (int)a4], a2, v14);
  memcpy(a2, v16, v14);
  if (a3)
  {
    uint64_t v47 = (int)v46;
    int v48 = a3[v47];
    a3[v47] = *a3;
    *a3 = v48;
  }
  double result = 0.0;
  int v50 = a5 - 1;
  if (a5 > 1)
  {
    if (a4 == 2)
    {
      float v58 = a2->f32[0];
      float32x4_t v59 = &a2->f32[v76[0] + 1];
      do
      {
        float v60 = (float)(a2->f32[1] - *v59) * (float)(a2->f32[1] - *v59);
        if ((float)(v60 + (float)((float)(v58 - *(v59 - 1)) * (float)(v58 - *(v59 - 1)))) > *(float *)&result) {
          *(float *)&double result = v60 + (float)((float)(v58 - *(v59 - 1)) * (float)(v58 - *(v59 - 1)));
        }
        v59 += v76[0];
        --v50;
      }
      while (v50);
      goto LABEL_73;
    }
    if (a4 == 3)
    {
      float v51 = a2->f32[0];
      float v52 = a2->f32[1];
      __float2 v53 = &a2->f32[v76[0] + 2];
      do
      {
        float v54 = a2->f32[2] - *v53;
        if ((float)((float)((float)((float)(v52 - *(v53 - 1)) * (float)(v52 - *(v53 - 1)))
                           + (float)((float)(v51 - *(v53 - 2)) * (float)(v51 - *(v53 - 2))))
                   + (float)(v54 * v54)) > *(float *)&result)
          *(float *)&double result = (float)((float)((float)(v52 - *(v53 - 1)) * (float)(v52 - *(v53 - 1)))
                                    + (float)((float)(v51 - *(v53 - 2)) * (float)(v51 - *(v53 - 2))))
                            + (float)(v54 * v54);
        v53 += v76[0];
        --v50;
      }
      while (v50);
      goto LABEL_73;
    }
    if ((int)a4 >= 1)
    {
      int v61 = 0;
      uint64_t v62 = v76[0];
      do
      {
        if (a4 >= 8)
        {
          float v64 = 0.0;
          uint64_t v65 = a4 & 0xFFFFFFF8;
          uint64_t v66 = a2;
          do
          {
            float32x4_t v67 = vsubq_f32(*v66, *(float32x4_t *)((char *)v66 + v62 * 4));
            float32x4_t v68 = vsubq_f32(v66[1], *(float32x4_t *)((char *)v66 + v62 * 4 + 16));
            float32x4_t v69 = vmulq_f32(v67, v67);
            float32x4_t v70 = vmulq_f32(v68, v68);
            float v64 = (float)((float)((float)((float)((float)((float)((float)(v64 + v69.f32[0]) + v69.f32[1]) + v69.f32[2])
                                                + v69.f32[3])
                                        + v70.f32[0])
                                + v70.f32[1])
                        + v70.f32[2])
                + v70.f32[3];
            v66 += 2;
            v65 -= 8;
          }
          while (v65);
          uint64_t v63 = a4 & 0xFFFFFFF8;
          if (v63 == a4) {
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v63 = 0;
          float v64 = 0.0;
        }
        uint64_t v71 = a4 - v63;
        float v72 = &a2->f32[v63];
        do
        {
          float v64 = v64 + (float)((float)(*v72 - v72[v62]) * (float)(*v72 - v72[v62]));
          ++v72;
          --v71;
        }
        while (v71);
LABEL_62:
        if (v64 > *(float *)&result) {
          *(float *)&double result = v64;
        }
        ++v61;
        v62 += v76[0];
      }
      while (v61 != v50);
    }
  }
LABEL_73:
  *(float *)&double result = sqrtf(*(float *)&result);
  *(_DWORD *)a1 = LODWORD(result);
  *(_DWORD *)(a1 + 4) = v46;
  if ((int)v46 >= 1)
  {
    if (a3) {
      int v73 = a3 + 1;
    }
    else {
      int v73 = 0;
    }
    rkd_split_node(a1 + 12, &a2->f32[v76[0]], v73, a4, v46, *(unsigned int *)(a1 + 8), a7);
  }
  uint64_t v74 = (a5 - (v46 + 1));
  if ((int)v74 >= 1)
  {
    if (a3) {
      uint64_t v75 = (uint64_t)&a3[(int)v46 + 1];
    }
    else {
      uint64_t v75 = 0;
    }
    rkd_split_node(a1 + 12 * (int)v46 + 12, &a2->f32[((int)v46 + 1) * (int)a4], v75, a4, v74, *(unsigned int *)(a1 + 8), a7);
  }
  return result;
}

uint64_t rkd_knn_sort(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 >= 2)
  {
    uint64_t v4 = 0;
    if (a3)
    {
      if (a4)
      {
        uint64_t v5 = a4 + 4;
        uint64_t v6 = a3 + 8;
        uint64_t v7 = result + 4;
        for (uint64_t i = 1; i != a2; ++i)
        {
          uint64_t v9 = v4;
          do
          {
            float v10 = *(float *)(v7 + 4 * v9);
            float v11 = *(float *)(result + 4 * v9);
            if (v10 >= v11) {
              break;
            }
            uint64_t v12 = 4 * v9;
            *(float *)(v7 + v12) = v11;
            uint64_t v13 = 4 * v9;
            *(float *)(result + v13) = v10;
            uint64_t v14 = *(void *)(v6 + 8 * v9);
            uint64_t v15 = 8 * v9;
            *(void *)(v6 + 8 * v9) = *(void *)(a3 + v15);
            *(void *)(a3 + v15) = v14;
            LODWORD(v15) = *(_DWORD *)(v5 + 4 * v9);
            *(_DWORD *)(v5 + v12) = *(_DWORD *)(a4 + v13);
            *(_DWORD *)(a4 + v13) = v15;
            uint64_t v16 = v9-- + 1;
          }
          while (v16 > 1);
          ++v4;
        }
      }
      else
      {
        uint64_t v27 = a3 + 8;
        uint64_t v28 = result + 4;
        for (uint64_t j = 1; j != a2; ++j)
        {
          uint64_t v30 = v4;
          do
          {
            float v31 = *(float *)(v28 + 4 * v30);
            float v32 = *(float *)(result + 4 * v30);
            if (v31 >= v32) {
              break;
            }
            *(float *)(v28 + 4 * v30) = v32;
            *(float *)(result + 4 * v30) = v31;
            uint64_t v33 = *(void *)(v27 + 8 * v30);
            uint64_t v34 = 8 * v30;
            *(void *)(v27 + 8 * v30) = *(void *)(a3 + v34);
            *(void *)(a3 + v34) = v33;
            uint64_t v35 = v30-- + 1;
          }
          while (v35 > 1);
          ++v4;
        }
      }
    }
    else if (a4)
    {
      uint64_t v17 = a4 + 4;
      uint64_t v18 = result + 4;
      for (uint64_t k = 1; k != a2; ++k)
      {
        uint64_t v20 = v4;
        do
        {
          float v21 = *(float *)(v18 + 4 * v20);
          float v22 = *(float *)(result + 4 * v20);
          if (v21 >= v22) {
            break;
          }
          uint64_t v23 = 4 * v20;
          *(float *)(v18 + v23) = v22;
          uint64_t v24 = 4 * v20;
          *(float *)(result + v24) = v21;
          int v25 = *(_DWORD *)(v17 + 4 * v20);
          *(_DWORD *)(v17 + v23) = *(_DWORD *)(a4 + v24);
          *(_DWORD *)(a4 + v24) = v25;
          uint64_t v26 = v20-- + 1;
        }
        while (v26 > 1);
        ++v4;
      }
    }
    else
    {
      uint64_t v36 = result + 4;
      for (uint64_t m = 1; m != a2; ++m)
      {
        uint64_t v38 = v4;
        do
        {
          float v39 = *(float *)(v36 + 4 * v38);
          float v40 = *(float *)(result + 4 * v38);
          if (v39 >= v40) {
            break;
          }
          *(float *)(v36 + 4 * v3_Block_object_dispose(&STACK[0x220], 8) = v40;
          *(float *)(result + 4 * v3_Block_object_dispose(&STACK[0x220], 8) = v39;
          uint64_t v41 = v38-- + 1;
        }
        while (v41 > 1);
        ++v4;
      }
    }
  }
  return result;
}

unint64_t rkd_nn_app(unint64_t result, float *a2, float **a3, _DWORD *a4, int a5, float a6)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  int v6 = *(_DWORD *)(result + 28);
  if (v6 < 1) {
    return result;
  }
  int v7 = 0;
  int v8 = 0;
  float v10 = *(_DWORD **)(result + 8);
  uint64_t v9 = *(float **)(result + 16);
  float v11 = *(float **)result;
  uint64_t v12 = *(int *)(result + 24);
  uint64_t v13 = *(unsigned int *)(result + 24);
  uint64_t v14 = v13 & 0xFFFFFFF8;
LABEL_3:
  if (v12 == 2)
  {
    float v16 = (float)((float)(v11[1] - a2[1]) * (float)(v11[1] - a2[1]))
        + (float)((float)(*v11 - *a2) * (float)(*v11 - *a2));
    goto LABEL_16;
  }
  if (v12 == 3)
  {
    float v15 = v11[2] - a2[2];
    float v16 = (float)((float)((float)(v11[1] - a2[1]) * (float)(v11[1] - a2[1]))
                + (float)((float)(*v11 - *a2) * (float)(*v11 - *a2)))
        + (float)(v15 * v15);
    goto LABEL_16;
  }
  if ((int)v12 < 1)
  {
    float v16 = 0.0;
    goto LABEL_16;
  }
  if (v12 < 8)
  {
    uint64_t v17 = 0;
    float v16 = 0.0;
LABEL_14:
    uint64_t v25 = v13 - v17;
    uint64_t v26 = v17;
    uint64_t v27 = &a2[v17];
    uint64_t v28 = &v11[v26];
    do
    {
      float v29 = *v28++;
      float v30 = v29;
      float v31 = *v27++;
      float v16 = v16 + (float)((float)(v30 - v31) * (float)(v30 - v31));
      --v25;
    }
    while (v25);
    goto LABEL_16;
  }
  uint64_t v18 = (float32x4_t *)(v11 + 4);
  float v16 = 0.0;
  uint64_t v19 = v13 & 0xFFFFFFF8;
  uint64_t v20 = (float32x4_t *)(a2 + 4);
  do
  {
    float32x4_t v21 = vsubq_f32(v18[-1], v20[-1]);
    float32x4_t v22 = vsubq_f32(*v18, *v20);
    float32x4_t v23 = vmulq_f32(v21, v21);
    float32x4_t v24 = vmulq_f32(v22, v22);
    float v16 = (float)((float)((float)((float)((float)((float)((float)(v16 + v23.f32[0]) + v23.f32[1]) + v23.f32[2])
                                        + v23.f32[3])
                                + v24.f32[0])
                        + v24.f32[1])
                + v24.f32[2])
        + v24.f32[3];
    v18 += 2;
    v20 += 2;
    v19 -= 8;
  }
  while (v19);
  uint64_t v17 = v13 & 0xFFFFFFF8;
  if (v14 != v13) {
    goto LABEL_14;
  }
LABEL_16:
  float v32 = sqrtf(v16);
  if (v32 < a6)
  {
    if (a3) {
      *a3 = v11;
    }
    a6 = v32;
    if (a4)
    {
      *a4 = *v10;
      a6 = v32;
    }
  }
  double result = *((unsigned int *)v9 + 1);
  float v33 = *v9;
  if (result != -1) {
    goto LABEL_22;
  }
  if ((float)(v32 - v33) >= a6) {
    goto LABEL_68;
  }
  float v42 = a6 * a6;
  if (v6 > 1)
  {
    v11 += v12;
    uint64_t v43 = 1;
    while (1)
    {
      if (v13 == 2)
      {
        float v32 = (float)((float)(v11[1] - a2[1]) * (float)(v11[1] - a2[1]))
            + (float)((float)(*v11 - *a2) * (float)(*v11 - *a2));
      }
      else if (v13 == 3)
      {
        float v44 = v11[2] - a2[2];
        float v32 = (float)((float)((float)(v11[1] - a2[1]) * (float)(v11[1] - a2[1]))
                    + (float)((float)(*v11 - *a2) * (float)(*v11 - *a2)))
            + (float)(v44 * v44);
      }
      else if ((int)v13 < 1)
      {
        float v32 = 0.0;
      }
      else
      {
        if (v13 >= 8)
        {
          unint64_t v46 = 0;
          float v32 = 0.0;
          do
          {
            float32x4_t v47 = vsubq_f32(*(float32x4_t *)&v11[v46 / 4], *(float32x4_t *)&a2[v46 / 4]);
            float32x4_t v48 = vsubq_f32(*(float32x4_t *)&v11[v46 / 4 + 4], *(float32x4_t *)&a2[v46 / 4 + 4]);
            float32x4_t v49 = vmulq_f32(v47, v47);
            float32x4_t v50 = vmulq_f32(v48, v48);
            float v32 = (float)((float)((float)((float)((float)((float)((float)(v32 + v49.f32[0]) + v49.f32[1]) + v49.f32[2])
                                                + v49.f32[3])
                                        + v50.f32[0])
                                + v50.f32[1])
                        + v50.f32[2])
                + v50.f32[3];
            v46 += 32;
          }
          while (((4 * v13) & 0x3FFFFFFE0) != v46);
          uint64_t v45 = v13 & 0x7FFFFFF8;
          if (v14 == v13) {
            goto LABEL_50;
          }
        }
        else
        {
          uint64_t v45 = 0;
          float v32 = 0.0;
        }
        do
        {
          float v51 = v11[v45] - a2[v45];
          float v32 = v32 + (float)(v51 * v51);
          ++v45;
        }
        while (v13 != v45);
      }
LABEL_50:
      if (v32 < v42)
      {
        if (a3) {
          *a3 = v11;
        }
        float v42 = v32;
        if (a4)
        {
          *a4 = v10[v43];
          float v42 = v32;
        }
      }
      ++v43;
      v11 += v12;
      if (v43 == v6)
      {
        double result = *((unsigned int *)v9 + 1);
        a6 = sqrtf(v42);
        if (result == -1) {
          goto LABEL_68;
        }
LABEL_22:
        if ((float)(v32 - v33) >= a6) {
          goto LABEL_68;
        }
        uint64_t v34 = *((int *)v9 + 2);
        float v35 = a2[v34];
        float v36 = v11[v34];
        if (v35 >= v36)
        {
          if ((int)result >= 1)
          {
            float v52 = v35 - v36;
            if (v52 < a6)
            {
              __float2 v53 = &v60[2 * v7];
              *(void *)__float2 v53 = v9 + 3;
              *((void *)v53 + 1) = &v11[v12];
              float v54 = v10 + 1;
              if (!v10) {
                float v54 = 0;
              }
              *((void *)v53 + 2) = v54;
              *((_DWORD *)v53 + 6) = result;
              *((float *)v53 + 7) = v52;
              ++v7;
            }
          }
          int v55 = result;
          uint64_t v56 = (int)result + 1;
          if (v6 <= (int)v56) {
            goto LABEL_68;
          }
          v11 += (int)v56 * (int)v13;
          uint64_t v57 = &v10[v56];
          if (v10) {
            float v10 = v57;
          }
          else {
            float v10 = 0;
          }
          double result = (v6 + ~result);
          v9 += 3 * v55 + 3;
          int v6 = result;
          if ((int)result <= 0) {
            return result;
          }
        }
        else
        {
          int v37 = v6 + ~result;
          if (v37 >= 1)
          {
            float v38 = v36 - v35;
            if (v38 < a6)
            {
              float v39 = &v60[2 * v7];
              uint64_t v40 = (int)result + 1;
              *(void *)float v39 = &v9[3 * (int)result + 3];
              *((void *)v39 + 1) = &v11[(int)v40 * (int)v12];
              uint64_t v41 = &v10[v40];
              if (!v10) {
                uint64_t v41 = 0;
              }
              *((void *)v39 + 2) = v41;
              *((_DWORD *)v39 + 6) = v37;
              *((float *)v39 + 7) = v38;
              ++v7;
            }
          }
          if ((int)result < 1) {
            goto LABEL_68;
          }
          v11 += v12;
          if (v10) {
            ++v10;
          }
          else {
            float v10 = 0;
          }
          v9 += 3;
          int v6 = result;
        }
        goto LABEL_3;
      }
    }
  }
  a6 = sqrtf(v42);
LABEL_68:
  if (v8 != a5)
  {
    double result = (unint64_t)&v60[2 * v7];
    while (1)
    {
      BOOL v58 = __OFSUB__(v7--, 1);
      if (v7 < 0 != v58) {
        break;
      }
      float v59 = *(float *)(result - 4);
      result -= 32;
      if (v59 < a6)
      {
        uint64_t v9 = *(float **)result;
        float v11 = *(float **)(result + 8);
        float v10 = *(_DWORD **)(result + 16);
        ++v8;
        double result = *(unsigned int *)(result + 24);
        int v6 = result;
        if ((int)result > 0) {
          goto LABEL_3;
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t rkd_knn_app(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float a7)
{
  int v156 = a6;
  uint64_t v159 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(int **)(a1 + 8);
  uint64_t v157 = *(void *)(a1 + 16);
  uint64_t v13 = *(float **)a1;
  int v14 = *(_DWORD *)(a1 + 28);
  uint64_t v15 = *(int *)(a1 + 24);
  MEMORY[0x270FA5388](a1, 4 * (int)a5);
  uint64_t v17 = (char *)&v146 - v16;
  bzero((char *)&v146 - v16, v18);
  if (v14 < 1)
  {
    uint64_t v22 = 0;
    LODWORD(v27) = a5;
    goto LABEL_131;
  }
  int v19 = v14;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = v15;
  uint64_t v24 = (int)a5 - 1;
  uint64_t v155 = v15 & 0xFFFFFFF8;
  uint64_t v149 = (float32x4_t *)(a2 + 4);
  uint64_t v25 = 4 * v15;
  uint64_t v26 = (4 * v15) & 0x3FFFFFFE0;
  uint64_t v27 = a5;
  int v28 = v156;
  uint64_t v29 = v15;
  uint64_t v30 = v157;
  float v31 = v12;
LABEL_3:
  if (v29 == 2)
  {
    float v33 = (float)((float)(v13[1] - a2[1]) * (float)(v13[1] - a2[1]))
        + (float)((float)(*v13 - *a2) * (float)(*v13 - *a2));
    goto LABEL_16;
  }
  if (v29 == 3)
  {
    float v32 = v13[2] - a2[2];
    float v33 = (float)((float)((float)(v13[1] - a2[1]) * (float)(v13[1] - a2[1]))
                + (float)((float)(*v13 - *a2) * (float)(*v13 - *a2)))
        + (float)(v32 * v32);
    goto LABEL_16;
  }
  if ((int)v29 < 1)
  {
    float v33 = 0.0;
    goto LABEL_16;
  }
  if (v29 < 8)
  {
    uint64_t v34 = 0;
    float v33 = 0.0;
LABEL_14:
    uint64_t v42 = v23 - v34;
    uint64_t v43 = v34;
    float v44 = &a2[v34];
    uint64_t v45 = &v13[v43];
    do
    {
      float v46 = *v45++;
      float v47 = v46;
      float v48 = *v44++;
      float v33 = v33 + (float)((float)(v47 - v48) * (float)(v47 - v48));
      --v42;
    }
    while (v42);
    goto LABEL_16;
  }
  float v35 = (float32x4_t *)(v13 + 4);
  float v33 = 0.0;
  uint64_t v36 = v155;
  int v37 = v149;
  do
  {
    float32x4_t v38 = vsubq_f32(v35[-1], v37[-1]);
    float32x4_t v39 = vsubq_f32(*v35, *v37);
    float32x4_t v40 = vmulq_f32(v38, v38);
    float32x4_t v41 = vmulq_f32(v39, v39);
    float v33 = (float)((float)((float)((float)((float)((float)((float)(v33 + v40.f32[0]) + v40.f32[1]) + v40.f32[2])
                                        + v40.f32[3])
                                + v41.f32[0])
                        + v41.f32[1])
                + v41.f32[2])
        + v41.f32[3];
    v35 += 2;
    v37 += 2;
    v36 -= 8;
  }
  while (v36);
  uint64_t v34 = v155;
  if (v155 != v23) {
    goto LABEL_14;
  }
LABEL_16:
  float v49 = sqrtf(v33);
  if (v49 >= a7) {
    goto LABEL_47;
  }
  if (v31)
  {
    int v50 = *v31;
    uint64_t v51 = (int)v22;
    if ((int)v22 < (int)v27) {
      goto LABEL_19;
    }
LABEL_26:
    uint64_t v55 = v51 - 1;
    *(float *)&v17[4 * v55] = v49;
    if (a3) {
      *(void *)(a3 + 8 * v55) = v13;
    }
    if (a4) {
      *(_DWORD *)(a4 + 4 * v55) = v50;
    }
    if ((int)v22 >= 2)
    {
      uint64_t v56 = v55;
      if (a3)
      {
        if (a4)
        {
          do
          {
            float v57 = *(float *)&v17[4 * v56];
            uint64_t v58 = v56 - 1;
            float v59 = *(float *)&v17[4 * (v56 - 1)];
            if (v57 >= v59) {
              break;
            }
            uint64_t v60 = 4 * v56;
            *(float *)&v17[v60] = v59;
            uint64_t v61 = 4 * (v56 - 1);
            *(float *)&v17[v61] = v57;
            uint64_t v62 = 8 * v56;
            uint64_t v63 = *(void *)(a3 + v62);
            uint64_t v64 = 8 * v58;
            *(void *)(a3 + v62) = *(void *)(a3 + v64);
            *(void *)(a3 + v64) = v63;
            LODWORD(v62) = *(_DWORD *)(a4 + v60);
            *(_DWORD *)(a4 + v60) = *(_DWORD *)(a4 + v61);
            *(_DWORD *)(a4 + v61) = v62;
            uint64_t v56 = v58;
          }
          while ((unint64_t)(v58 + 1) > 1);
        }
        else
        {
          do
          {
            float v65 = *(float *)&v17[4 * v56];
            uint64_t v66 = v56 - 1;
            float v67 = *(float *)&v17[4 * (v56 - 1)];
            if (v65 >= v67) {
              break;
            }
            *(float *)&v17[4 * v56] = v67;
            *(float *)&v17[4 * (v56 - 1)] = v65;
            uint64_t v68 = 8 * v56;
            uint64_t v69 = *(void *)(a3 + v68);
            uint64_t v70 = 8 * v66;
            *(void *)(a3 + v6_Block_object_dispose(&STACK[0x220], 8) = *(void *)(a3 + v70);
            *(void *)(a3 + v70) = v69;
            uint64_t v56 = v66;
          }
          while ((unint64_t)(v66 + 1) > 1);
        }
      }
      else if (a4)
      {
        do
        {
          float v71 = *(float *)&v17[4 * v56];
          uint64_t v72 = v56 - 1;
          float v73 = *(float *)&v17[4 * (v56 - 1)];
          if (v71 >= v73) {
            break;
          }
          uint64_t v74 = 4 * v56;
          *(float *)&v17[v74] = v73;
          uint64_t v75 = 4 * v72;
          *(float *)&v17[v75] = v71;
          int v76 = *(_DWORD *)(a4 + v74);
          *(_DWORD *)(a4 + v74) = *(_DWORD *)(a4 + v75);
          *(_DWORD *)(a4 + v75) = v76;
          uint64_t v56 = v72;
        }
        while ((unint64_t)(v72 + 1) > 1);
      }
      else
      {
        do
        {
          float v77 = *(float *)&v17[4 * v56];
          uint64_t v78 = v56 - 1;
          float v79 = *(float *)&v17[4 * (v56 - 1)];
          if (v77 >= v79) {
            break;
          }
          *(float *)&v17[4 * v56] = v79;
          *(float *)&v17[4 * --v56] = v77;
        }
        while ((unint64_t)(v78 + 1) > 1);
      }
    }
LABEL_45:
    if (v22 != v27) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  int v50 = -1;
  uint64_t v51 = (int)v22;
  if ((int)v22 >= (int)v27) {
    goto LABEL_26;
  }
LABEL_19:
  *(float *)&v17[4 * (int)v22] = v49;
  if (a3) {
    *(void *)(a3 + 8 * v51) = v13;
  }
  if (a4) {
    *(_DWORD *)(a4 + 4 * v51) = v50;
  }
  uint64_t v22 = (v22 + 1);
  if (v22 != v27) {
    goto LABEL_45;
  }
  uint64_t v153 = v25;
  uint64_t v154 = v24;
  uint64_t v151 = v31;
  uint64_t v152 = v26;
  uint64_t v52 = v27;
  uint64_t v157 = v30;
  uint64_t v53 = v29;
  LODWORD(v146) = v21;
  uint64_t v54 = v23;
  int v150 = v19;
  rkd_knn_sort((uint64_t)v17, v27, a3, a4);
  int v19 = v150;
  float v31 = v151;
  uint64_t v26 = v152;
  uint64_t v25 = v153;
  uint64_t v24 = v154;
  uint64_t v23 = v54;
  uint64_t v21 = v146;
  uint64_t v29 = v53;
  int v28 = v156;
  uint64_t v30 = v157;
  uint64_t v27 = v52;
LABEL_46:
  a7 = *(float *)&v17[4 * v24];
  uint64_t v22 = v27;
LABEL_47:
  int v80 = *(_DWORD *)(v30 + 4);
  float v81 = *(float *)v30;
  if (v80 == -1)
  {
    if ((float)(v49 - v81) >= a7) {
      goto LABEL_124;
    }
    float v90 = a7 * a7;
    if (v19 <= 1)
    {
      a7 = sqrtf(v90);
      goto LABEL_124;
    }
    uint64_t v157 = v30;
    v13 += v29;
    uint64_t v91 = 1;
    uint64_t v92 = v19;
    uint64_t v147 = a4;
    uint64_t v148 = a3;
    uint64_t v153 = v25;
    uint64_t v154 = v24;
    uint64_t v151 = v31;
    uint64_t v152 = v26;
    int v150 = v19;
    uint64_t v146 = v19;
    while (1)
    {
      if (v23 == 2)
      {
        float v100 = (float)((float)(v13[1] - a2[1]) * (float)(v13[1] - a2[1]))
             + (float)((float)(*v13 - *a2) * (float)(*v13 - *a2));
        goto LABEL_79;
      }
      if (v23 == 3)
      {
        float v99 = v13[2] - a2[2];
        float v100 = (float)((float)((float)(v13[1] - a2[1]) * (float)(v13[1] - a2[1]))
                     + (float)((float)(*v13 - *a2) * (float)(*v13 - *a2)))
             + (float)(v99 * v99);
        goto LABEL_79;
      }
      if ((int)v23 < 1)
      {
        float v100 = 0.0;
        goto LABEL_79;
      }
      if (v23 < 8) {
        break;
      }
      unint64_t v102 = 0;
      float v100 = 0.0;
      do
      {
        float32x4_t v103 = vsubq_f32(*(float32x4_t *)&v13[v102 / 4], *(float32x4_t *)&a2[v102 / 4]);
        float32x4_t v104 = vsubq_f32(*(float32x4_t *)&v13[v102 / 4 + 4], *(float32x4_t *)&a2[v102 / 4 + 4]);
        float32x4_t v105 = vmulq_f32(v103, v103);
        float32x4_t v106 = vmulq_f32(v104, v104);
        float v100 = (float)((float)((float)((float)((float)((float)((float)(v100 + v105.f32[0]) + v105.f32[1]) + v105.f32[2])
                                             + v105.f32[3])
                                     + v106.f32[0])
                             + v106.f32[1])
                     + v106.f32[2])
             + v106.f32[3];
        v102 += 32;
      }
      while (v26 != v102);
      uint64_t v101 = v155;
      if (v155 != v23) {
        goto LABEL_78;
      }
LABEL_79:
      if (v100 >= v90) {
        goto LABEL_66;
      }
      if (v31)
      {
        int v108 = v31[v91];
        float v109 = sqrtf(v100);
        if ((int)v22 >= (int)v27) {
          goto LABEL_89;
        }
      }
      else
      {
        int v108 = -1;
        float v109 = sqrtf(v100);
        if ((int)v22 >= (int)v27)
        {
LABEL_89:
          uint64_t v110 = (int)v22 - 1;
          *(float *)&v17[4 * v110] = v109;
          if (a3) {
            *(void *)(a3 + 8 * v110) = v13;
          }
          if (a4) {
            *(_DWORD *)(a4 + 4 * v110) = v108;
          }
          if ((int)v22 >= 2)
          {
            uint64_t v111 = v110;
            if (a3)
            {
              if (a4)
              {
                do
                {
                  float v112 = *(float *)&v17[4 * v111];
                  uint64_t v113 = v111 - 1;
                  float v114 = *(float *)&v17[4 * (v111 - 1)];
                  if (v112 >= v114) {
                    break;
                  }
                  uint64_t v115 = 4 * v111;
                  *(float *)&v17[v115] = v114;
                  uint64_t v116 = 4 * (v111 - 1);
                  *(float *)&v17[v116] = v112;
                  uint64_t v117 = 8 * v111;
                  uint64_t v118 = *(void *)(a3 + v117);
                  uint64_t v119 = 8 * v113;
                  *(void *)(a3 + v117) = *(void *)(a3 + v119);
                  *(void *)(a3 + v119) = v118;
                  LODWORD(v117) = *(_DWORD *)(a4 + v115);
                  *(_DWORD *)(a4 + v115) = *(_DWORD *)(a4 + v116);
                  *(_DWORD *)(a4 + v116) = v117;
                  uint64_t v111 = v113;
                }
                while ((unint64_t)(v113 + 1) > 1);
              }
              else
              {
                do
                {
                  float v120 = *(float *)&v17[4 * v111];
                  uint64_t v121 = v111 - 1;
                  float v122 = *(float *)&v17[4 * (v111 - 1)];
                  if (v120 >= v122) {
                    break;
                  }
                  *(float *)&v17[4 * v111] = v122;
                  *(float *)&v17[4 * (v111 - 1)] = v120;
                  uint64_t v123 = 8 * v111;
                  uint64_t v124 = *(void *)(a3 + v123);
                  uint64_t v125 = 8 * v121;
                  *(void *)(a3 + v123) = *(void *)(a3 + v125);
                  *(void *)(a3 + v125) = v124;
                  uint64_t v111 = v121;
                }
                while ((unint64_t)(v121 + 1) > 1);
              }
            }
            else if (a4)
            {
              do
              {
                float v126 = *(float *)&v17[4 * v111];
                uint64_t v127 = v111 - 1;
                float v128 = *(float *)&v17[4 * (v111 - 1)];
                if (v126 >= v128) {
                  break;
                }
                uint64_t v129 = 4 * v111;
                *(float *)&v17[v129] = v128;
                uint64_t v130 = 4 * v127;
                *(float *)&v17[v130] = v126;
                int v131 = *(_DWORD *)(a4 + v129);
                *(_DWORD *)(a4 + v129) = *(_DWORD *)(a4 + v130);
                *(_DWORD *)(a4 + v130) = v131;
                uint64_t v111 = v127;
              }
              while ((unint64_t)(v127 + 1) > 1);
            }
            else
            {
              do
              {
                float v132 = *(float *)&v17[4 * v111];
                uint64_t v133 = v111 - 1;
                float v134 = *(float *)&v17[4 * (v111 - 1)];
                if (v132 >= v134) {
                  break;
                }
                *(float *)&v17[4 * v111] = v134;
                *(float *)&v17[4 * --v111] = v132;
              }
              while ((unint64_t)(v133 + 1) > 1);
            }
          }
LABEL_108:
          if (v22 != v27) {
            goto LABEL_65;
          }
          goto LABEL_64;
        }
      }
      *(float *)&v17[4 * (int)v22] = v109;
      if (a3) {
        *(void *)(a3 + 8 * (int)v22) = v13;
      }
      if (a4) {
        *(_DWORD *)(a4 + 4 * (int)v22) = v108;
      }
      uint64_t v22 = (v22 + 1);
      if (v22 != v27) {
        goto LABEL_108;
      }
      uint64_t v93 = a3;
      uint64_t v94 = a4;
      uint64_t v95 = v27;
      uint64_t v96 = v29;
      uint64_t v97 = v21;
      uint64_t v98 = v23;
      rkd_knn_sort((uint64_t)v17, v27, v93, v94);
      int v19 = v150;
      float v31 = v151;
      uint64_t v26 = v152;
      uint64_t v25 = v153;
      uint64_t v24 = v154;
      uint64_t v23 = v98;
      uint64_t v21 = v97;
      uint64_t v92 = v146;
      a4 = v147;
      a3 = v148;
      uint64_t v29 = v96;
      uint64_t v27 = v95;
LABEL_64:
      a7 = *(float *)&v17[4 * v24];
      uint64_t v22 = v27;
LABEL_65:
      float v90 = a7 * a7;
LABEL_66:
      ++v91;
      uint64_t v13 = (float *)((char *)v13 + v25);
      if (v91 == v92)
      {
        uint64_t v30 = v157;
        int v80 = *(_DWORD *)(v157 + 4);
        a7 = sqrtf(v90);
        int v28 = v156;
        if (v80 == -1 || (float)(v100 - *(float *)v157) >= a7) {
          goto LABEL_124;
        }
LABEL_49:
        uint64_t v82 = *(int *)(v30 + 8);
        float v83 = a2[v82];
        float v84 = v13[v82];
        if (v83 >= v84)
        {
          if (v80 >= 1)
          {
            float v135 = v83 - v84;
            if (v135 < a7)
            {
              float32x4_t v136 = &v158[2 * v20];
              *(void *)float32x4_t v136 = v30 + 12;
              *((void *)v136 + 1) = &v13[v29];
              float32x4_t v137 = v31 + 1;
              if (!v31) {
                float32x4_t v137 = 0;
              }
              *((void *)v136 + 2) = v137;
              *((_DWORD *)v136 + 6) = v80;
              *((float *)v136 + 7) = v135;
              ++v20;
            }
          }
          uint64_t v138 = v80 + 1;
          if (v19 <= (int)v138) {
            goto LABEL_124;
          }
          v13 += (int)v138 * (int)v23;
          float32x4_t v139 = &v31[v138];
          if (v31) {
            float v31 = v139;
          }
          else {
            float v31 = 0;
          }
          v30 += 12 * v80 + 12;
          v19 += ~v80;
          if (v19 <= 0) {
            goto LABEL_131;
          }
        }
        else
        {
          int v85 = v19 + ~v80;
          if (v85 >= 1)
          {
            float v86 = v84 - v83;
            if (v86 < a7)
            {
              float32x4_t v87 = &v158[2 * v20];
              uint64_t v88 = v80 + 1;
              *(void *)float32x4_t v87 = v30 + 12 * v80 + 12;
              *((void *)v87 + 1) = &v13[(int)v88 * (int)v29];
              float32x4_t v89 = &v31[v88];
              if (!v31) {
                float32x4_t v89 = 0;
              }
              *((void *)v87 + 2) = v89;
              *((_DWORD *)v87 + 6) = v85;
              *((float *)v87 + 7) = v86;
              ++v20;
            }
          }
          if (v80 < 1) {
            goto LABEL_124;
          }
          v13 += v29;
          if (v31) {
            ++v31;
          }
          else {
            float v31 = 0;
          }
          v30 += 12;
          int v19 = v80;
        }
        goto LABEL_3;
      }
    }
    uint64_t v101 = 0;
    float v100 = 0.0;
    do
    {
LABEL_78:
      float v107 = v13[v101] - a2[v101];
      float v100 = v100 + (float)(v107 * v107);
      ++v101;
    }
    while (v23 != v101);
    goto LABEL_79;
  }
  if ((float)(v49 - v81) < a7) {
    goto LABEL_49;
  }
LABEL_124:
  if (v21 != v28)
  {
    float32x4_t v140 = &v158[2 * v20];
    while (1)
    {
      BOOL v141 = __OFSUB__(v20--, 1);
      if (v20 < 0 != v141) {
        break;
      }
      float v142 = *((float *)v140 - 1);
      v140 -= 2;
      if (v142 < a7)
      {
        uint64_t v30 = *(void *)v140;
        uint64_t v13 = (float *)*((void *)v140 + 1);
        float v31 = (int *)*((void *)v140 + 2);
        uint64_t v21 = (v21 + 1);
        int v19 = *((_DWORD *)v140 + 6);
        if (v19 > 0) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
LABEL_131:
  if (v22 != v27)
  {
    uint64_t v143 = a4;
    uint64_t v144 = v22;
    rkd_knn_sort((uint64_t)v17, v22, a3, v143);
    return v144;
  }
  return v22;
}

uint64_t rkd_inside(uint64_t a1, float *a2, void **a3, void **a4, unsigned int *a5, float a6)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  int v8 = *(_DWORD *)(a1 + 28);
  if (!a5)
  {
    uint64_t v9 = 0;
    uint64_t v92 = 0;
    if (v8 >= 1) {
      goto LABEL_3;
    }
LABEL_146:
    uint64_t v39 = 0;
    goto LABEL_147;
  }
  uint64_t v9 = *a5;
  uint64_t v92 = a5;
  if (v8 < 1) {
    goto LABEL_146;
  }
LABEL_3:
  uint64_t v97 = a4;
  int v98 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = *(int *)(a1 + 24);
  uint64_t v13 = *(int **)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  int v14 = *(float **)a1;
  uint64_t v15 = *(unsigned int *)(a1 + 24);
  uint64_t v91 = (float32x4_t *)(a2 + 4);
  uint64_t v16 = 4 * v11;
  float v17 = a6 * a6;
  uint64_t v18 = v9;
  uint64_t v95 = v11;
  uint64_t v96 = a3;
  uint64_t v93 = v15 & 0xFFFFFFF8;
  uint64_t v94 = 4 * v11;
  while (2)
  {
    if (v11 == 2)
    {
      float v22 = (float)((float)(v14[1] - a2[1]) * (float)(v14[1] - a2[1]))
          + (float)((float)(*v14 - *a2) * (float)(*v14 - *a2));
      goto LABEL_22;
    }
    if (v11 == 3)
    {
      float v21 = v14[2] - a2[2];
      float v22 = (float)((float)((float)(v14[1] - a2[1]) * (float)(v14[1] - a2[1]))
                  + (float)((float)(*v14 - *a2) * (float)(*v14 - *a2)))
          + (float)(v21 * v21);
      goto LABEL_22;
    }
    if ((int)v11 < 1)
    {
      float v22 = 0.0;
      goto LABEL_22;
    }
    if (v11 < 8)
    {
      uint64_t v23 = 0;
      float v22 = 0.0;
LABEL_20:
      uint64_t v31 = v15 - v23;
      uint64_t v32 = v23;
      float v33 = &a2[v23];
      uint64_t v34 = &v14[v32];
      do
      {
        float v35 = *v34++;
        float v36 = v35;
        float v37 = *v33++;
        float v22 = v22 + (float)((float)(v36 - v37) * (float)(v36 - v37));
        --v31;
      }
      while (v31);
      goto LABEL_22;
    }
    uint64_t v24 = (float32x4_t *)(v14 + 4);
    float v22 = 0.0;
    uint64_t v25 = v15 & 0xFFFFFFF8;
    uint64_t v26 = v91;
    do
    {
      float32x4_t v27 = vsubq_f32(v24[-1], v26[-1]);
      float32x4_t v28 = vsubq_f32(*v24, *v26);
      float32x4_t v29 = vmulq_f32(v27, v27);
      float32x4_t v30 = vmulq_f32(v28, v28);
      float v22 = (float)((float)((float)((float)((float)((float)((float)(v22 + v29.f32[0]) + v29.f32[1]) + v29.f32[2])
                                          + v29.f32[3])
                                  + v30.f32[0])
                          + v30.f32[1])
                  + v30.f32[2])
          + v30.f32[3];
      v24 += 2;
      v26 += 2;
      v25 -= 8;
    }
    while (v25);
    uint64_t v23 = v15 & 0xFFFFFFF8;
    if (v93 != v15) {
      goto LABEL_20;
    }
LABEL_22:
    float v38 = sqrtf(v22);
    unsigned int v100 = v8;
    uint64_t v99 = v12;
    if (v38 < a6)
    {
      if ((float)(v38 + *(float *)v12) < a6)
      {
        uint64_t v39 = (v10 + v8);
        if ((int)v39 <= (int)v18)
        {
          if (a4)
          {
            if (a3) {
              goto LABEL_69;
            }
            uint64_t v55 = *a4;
            uint64_t v56 = v8;
            if (v8 < 0x10) {
              goto LABEL_90;
            }
            goto LABEL_87;
          }
          if (a3) {
            goto LABEL_76;
          }
        }
        else
        {
          if (2 * (int)v39 <= 10) {
            uint64_t v18 = 10;
          }
          else {
            uint64_t v18 = (2 * v39);
          }
          if (a3)
          {
            float32x4_t v40 = malloc_type_realloc(*a3, 8 * v18, 0x80040B8603338uLL);
            a3 = v96;
            a4 = v97;
            *uint64_t v96 = v40;
            if (!v97)
            {
              uint64_t v16 = v94;
              uint64_t v11 = v95;
              int v8 = v100;
LABEL_76:
              uint64_t v60 = 8 * (int)v10;
              uint64_t v61 = v8;
              do
              {
                *(void *)((char *)*a3 + v60) = v14;
                v60 += 8;
                int v14 = (float *)((char *)v14 + v16);
                --v61;
              }
              while (v61);
              uint64_t v9 = v18;
              uint64_t v62 = (v98 - 1);
              if (v98 >= 1) {
                goto LABEL_138;
              }
              goto LABEL_147;
            }
LABEL_67:
            uint64_t v55 = malloc_type_realloc(*a4, 4 * v18, 0x100004052888210uLL);
            a3 = v96;
            a4 = v97;
            *uint64_t v97 = v55;
            if (v96)
            {
              uint64_t v16 = v94;
              uint64_t v11 = v95;
              int v8 = v100;
LABEL_69:
              uint64_t v58 = v8;
              do
              {
                *((void *)*a3 + (int)v10) = v14;
                int v59 = *v13++;
                *((_DWORD *)*a4 + (int)v10) = v59;
                LODWORD(v10) = v10 + 1;
                int v14 = (float *)((char *)v14 + v16);
                --v58;
              }
              while (v58);
              goto LABEL_93;
            }
            uint64_t v16 = v94;
            uint64_t v11 = v95;
            uint64_t v56 = v100;
            if (v100 < 0x10) {
              goto LABEL_90;
            }
LABEL_87:
            uint64_t v64 = 0;
            if ((int)v10 + (int)v56 - 1 < (int)v10 || (unint64_t)(v56 - 1) >> 32) {
              goto LABEL_91;
            }
            if ((unint64_t)(&v55[4 * (int)v10] - (unsigned char *)v13) >= 0x20)
            {
              uint64_t v64 = v56 & 0xFFFFFFF8;
              int v85 = (long long *)(v13 + 4);
              int v86 = v10;
              uint64_t v87 = v64;
              do
              {
                long long v88 = *v85;
                float32x4_t v89 = &v55[4 * v86];
                *float32x4_t v89 = *(v85 - 1);
                v89[1] = v88;
                v85 += 2;
                v86 += 8;
                v87 -= 8;
              }
              while (v87);
              if (v64 == v56) {
                goto LABEL_93;
              }
              goto LABEL_91;
            }
LABEL_90:
            uint64_t v64 = 0;
LABEL_91:
            uint64_t v65 = v56 - v64;
            int v66 = v10 + v64;
            float v67 = &v13[v64];
            do
            {
              int v68 = *v67++;
              *(_DWORD *)&v55[4 * v66++] = v68;
              --v65;
            }
            while (v65);
            goto LABEL_93;
          }
          if (a4) {
            goto LABEL_67;
          }
        }
LABEL_93:
        uint64_t v9 = v18;
        goto LABEL_137;
      }
      uint64_t v39 = (v10 + 1);
      if ((int)v10 < (int)v18)
      {
        if (!a4)
        {
          if (a3)
          {
            uint64_t v9 = v18;
            *((void *)*a3 + (int)v10) = v14;
            int v20 = *(_DWORD *)(v12 + 4);
            float v41 = *(float *)v12;
            if (v20 != -1) {
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v9 = v18;
            int v20 = *(_DWORD *)(v12 + 4);
            float v41 = *(float *)v12;
            if (v20 != -1)
            {
LABEL_32:
              if ((float)(v38 - v41) >= a6) {
                goto LABEL_137;
              }
              goto LABEL_33;
            }
          }
          goto LABEL_97;
        }
        if (a3)
        {
          uint64_t v9 = v18;
          goto LABEL_83;
        }
        uint64_t v63 = *a4;
        uint64_t v9 = v18;
LABEL_95:
        v63[(int)v10] = *v13;
LABEL_96:
        int v20 = *(_DWORD *)(v12 + 4);
        float v41 = *(float *)v12;
        if (v20 != -1) {
          goto LABEL_32;
        }
        goto LABEL_97;
      }
      if (2 * (int)v39 <= 10) {
        uint64_t v9 = 10;
      }
      else {
        uint64_t v9 = (2 * v39);
      }
      if (a3)
      {
        float v57 = malloc_type_realloc(*a3, 8 * v9, 0x80040B8603338uLL);
        a3 = v96;
        a4 = v97;
        *uint64_t v96 = v57;
        if (!v97)
        {
          uint64_t v16 = v94;
          uint64_t v11 = v95;
          int v8 = v100;
          uint64_t v12 = v99;
          v57[(int)v10] = v14;
          int v20 = *(_DWORD *)(v99 + 4);
          float v41 = *(float *)v99;
          if (v20 != -1) {
            goto LABEL_32;
          }
          goto LABEL_97;
        }
      }
      else if (!a4)
      {
        goto LABEL_96;
      }
      uint64_t v63 = malloc_type_realloc(*a4, 4 * v9, 0x100004052888210uLL);
      a3 = v96;
      a4 = v97;
      *uint64_t v97 = v63;
      if (v96)
      {
        uint64_t v16 = v94;
        uint64_t v11 = v95;
        int v8 = v100;
        uint64_t v12 = v99;
LABEL_83:
        *((void *)*a3 + (int)v10) = v14;
        *((_DWORD *)*a4 + (int)v10) = *v13;
        int v20 = *(_DWORD *)(v12 + 4);
        float v41 = *(float *)v12;
        if (v20 != -1) {
          goto LABEL_32;
        }
        goto LABEL_97;
      }
      uint64_t v16 = v94;
      uint64_t v11 = v95;
      int v8 = v100;
      uint64_t v12 = v99;
      goto LABEL_95;
    }
    uint64_t v39 = v10;
    uint64_t v9 = v18;
    int v20 = *(_DWORD *)(v12 + 4);
    float v41 = *(float *)v12;
    if (v20 != -1) {
      goto LABEL_32;
    }
LABEL_97:
    if ((float)(v38 - v41) >= a6 || v8 <= 1) {
      goto LABEL_137;
    }
    v14 += v11;
    uint64_t v70 = 1;
    uint64_t v71 = v8;
    do
    {
      if (v15 == 2)
      {
        float v73 = (float)((float)(v14[1] - a2[1]) * (float)(v14[1] - a2[1]))
            + (float)((float)(*v14 - *a2) * (float)(*v14 - *a2));
        goto LABEL_118;
      }
      if (v15 == 3)
      {
        float v72 = v14[2] - a2[2];
        float v73 = (float)((float)((float)(v14[1] - a2[1]) * (float)(v14[1] - a2[1]))
                    + (float)((float)(*v14 - *a2) * (float)(*v14 - *a2)))
            + (float)(v72 * v72);
        goto LABEL_118;
      }
      if ((int)v15 < 1)
      {
        float v73 = 0.0;
        goto LABEL_118;
      }
      if (v15 < 8)
      {
        uint64_t v74 = 0;
        float v73 = 0.0;
        do
        {
LABEL_117:
          float v80 = v14[v74] - a2[v74];
          float v73 = v73 + (float)(v80 * v80);
          ++v74;
        }
        while (v15 != v74);
        goto LABEL_118;
      }
      unint64_t v75 = 0;
      float v73 = 0.0;
      do
      {
        float32x4_t v76 = vsubq_f32(*(float32x4_t *)&v14[v75 / 4], *(float32x4_t *)&a2[v75 / 4]);
        float32x4_t v77 = vsubq_f32(*(float32x4_t *)&v14[v75 / 4 + 4], *(float32x4_t *)&a2[v75 / 4 + 4]);
        float32x4_t v78 = vmulq_f32(v76, v76);
        float32x4_t v79 = vmulq_f32(v77, v77);
        float v73 = (float)((float)((float)((float)((float)((float)((float)(v73 + v78.f32[0]) + v78.f32[1]) + v78.f32[2])
                                            + v78.f32[3])
                                    + v79.f32[0])
                            + v79.f32[1])
                    + v79.f32[2])
            + v79.f32[3];
        v75 += 32;
      }
      while (((4 * v15) & 0x3FFFFFFE0) != v75);
      uint64_t v74 = v15 & 0xFFFFFFF8;
      if (v93 != v15) {
        goto LABEL_117;
      }
LABEL_118:
      if (v73 < v17)
      {
        int v81 = v39 + 1;
        if ((int)v39 >= (int)v9)
        {
          if (2 * v81 <= 10) {
            uint64_t v9 = 10;
          }
          else {
            uint64_t v9 = (2 * v81);
          }
          if (a3)
          {
            float v83 = malloc_type_realloc(*a3, 8 * v9, 0x80040B8603338uLL);
            a3 = v96;
            a4 = v97;
            *uint64_t v96 = v83;
            if (!v97)
            {
              uint64_t v16 = v94;
              uint64_t v11 = v95;
              int v8 = v100;
              uint64_t v12 = v99;
              v83[(int)v39] = v14;
              goto LABEL_104;
            }
          }
          else if (!a4)
          {
            goto LABEL_104;
          }
          uint64_t v82 = malloc_type_realloc(*a4, 4 * v9, 0x100004052888210uLL);
          a3 = v96;
          a4 = v97;
          *uint64_t v97 = v82;
          if (v96)
          {
            uint64_t v16 = v94;
            uint64_t v11 = v95;
            int v8 = v100;
            uint64_t v12 = v99;
            goto LABEL_103;
          }
          uint64_t v16 = v94;
          uint64_t v11 = v95;
          int v8 = v100;
          uint64_t v12 = v99;
LABEL_134:
          v82[(int)v39] = v13[v70];
        }
        else if (a4)
        {
          if (!a3)
          {
            uint64_t v82 = *a4;
            goto LABEL_134;
          }
LABEL_103:
          *((void *)*a3 + (int)v39) = v14;
          *((_DWORD *)*a4 + (int)v39) = v13[v70];
        }
        else if (a3)
        {
          *((void *)*a3 + (int)v39) = v14;
        }
LABEL_104:
        uint64_t v39 = (v39 + 1);
      }
      ++v70;
      int v14 = (float *)((char *)v14 + v16);
    }
    while (v70 != v71);
    int v20 = *(_DWORD *)(v12 + 4);
    if (v20 == -1 || (float)(v73 - *(float *)v12) >= a6) {
      goto LABEL_137;
    }
LABEL_33:
    uint64_t v42 = *(int *)(v12 + 8);
    float v43 = a2[v42];
    float v44 = v14[v42];
    if (v43 >= v44)
    {
      if (v20 >= 1)
      {
        float v50 = v43 - v44;
        if (v50 < a6)
        {
          uint64_t v51 = &v101[2 * v98];
          *(void *)uint64_t v51 = v12 + 12;
          *((void *)v51 + 1) = &v14[v11];
          uint64_t v52 = v13 + 1;
          if (!v13) {
            uint64_t v52 = 0;
          }
          *((void *)v51 + 2) = v52;
          *((_DWORD *)v51 + 6) = v20;
          *((float *)v51 + 7) = v50;
          ++v98;
        }
      }
      int v53 = v20;
      uint64_t v54 = v20 + 1;
      if (v8 <= (int)v54) {
        goto LABEL_137;
      }
      v14 += (int)v54 * (int)v15;
      int v19 = &v13[v54];
      if (v13) {
        uint64_t v13 = v19;
      }
      else {
        uint64_t v13 = 0;
      }
      int v20 = v8 + ~v20;
      v12 += 12 * v53 + 12;
LABEL_8:
      int v8 = v20;
      uint64_t v18 = v9;
      uint64_t v10 = v39;
      if (v20 <= 0) {
        goto LABEL_147;
      }
      continue;
    }
    break;
  }
  int v45 = v8 + ~v20;
  if (v45 >= 1)
  {
    float v46 = v44 - v43;
    if (v46 < a6)
    {
      float v47 = &v101[2 * v98];
      uint64_t v48 = v20 + 1;
      *(void *)float v47 = v12 + 12 * v20 + 12;
      *((void *)v47 + 1) = &v14[(int)v48 * (int)v11];
      float v49 = &v13[v48];
      if (!v13) {
        float v49 = 0;
      }
      *((void *)v47 + 2) = v49;
      *((_DWORD *)v47 + 6) = v45;
      *((float *)v47 + 7) = v46;
      ++v98;
    }
  }
  if (v20 >= 1)
  {
    v14 += v11;
    if (v13) {
      ++v13;
    }
    else {
      uint64_t v13 = 0;
    }
    v12 += 12;
    goto LABEL_8;
  }
LABEL_137:
  uint64_t v62 = (v98 - 1);
  if (v98 >= 1)
  {
LABEL_138:
    float v84 = &v101[2 * v62];
    uint64_t v12 = *(void *)v84;
    int v14 = (float *)*((void *)v84 + 1);
    uint64_t v13 = (int *)*((void *)v84 + 2);
    int v20 = *((_DWORD *)v84 + 6);
    int v98 = v62;
    goto LABEL_8;
  }
LABEL_147:
  if (v92) {
    *uint64_t v92 = v9;
  }
  return v39;
}

uint64_t rkd_split_median(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, void *a6, float a7)
{
  long long v65 = xmmword_21BB7CDF0;
  if ((int)a4 < 2) {
    return 0;
  }
  uint64_t v8 = a3;
  uint64_t v9 = a1;
  int v10 = 0;
  signed int v11 = a4 - 1;
  unint64_t v52 = a4;
  size_t v12 = 4 * (int)a3;
  uint64_t v59 = (int)a5;
  int v58 = (int)(float)((float)(int)a4 * a7);
  int v55 = 0;
  int v56 = a4 >> 1;
  size_t v54 = a1 + v12;
  while (1)
  {
    int v13 = v11 - v10;
    uint64_t v14 = (v11 - v10 + 1);
    int v62 = v11;
    if (v11 - v10 > 8)
    {
      if (v13 > 0x62)
      {
        if (v13 > 0x270E)
        {
          uint64_t v25 = v9;
          uint64_t v26 = v8;
          uint64_t v27 = a4;
          uint64_t v28 = a5;
          int v29 = v13 > 0xF423E ? 6 : 5;
        }
        else
        {
          uint64_t v25 = v9;
          uint64_t v26 = v8;
          uint64_t v27 = a4;
          uint64_t v28 = a5;
          int v29 = 2;
        }
        signed int v18 = rkd_sample_median(v25, v26, v27, v28, v29, (unint64_t *)&v65);
      }
      else
      {
        unint64_t v17 = (*((void *)&v65 + 1) >> 5) ^ (((unint64_t)v65 ^ ((void)v65 << 23)) >> 18) ^ *((void *)&v65 + 1) ^ v65 ^ ((void)v65 << 23);
        signed int v18 = (v17 + *((void *)&v65 + 1)) % v52;
        unint64_t v19 = ((*((void *)&v65 + 1) ^ (*((void *)&v65 + 1) << 23)) >> 18) ^ (v17 >> 5) ^ *((void *)&v65 + 1) ^ (*((void *)&v65 + 1) << 23) ^ v17;
        signed int v20 = (v19 + v17) % v52;
        *(void *)&long long v65 = v19;
        *((void *)&v65 + 1) = ((v17 ^ (v17 << 23)) >> 18) ^ (v19 >> 5) ^ v17 ^ (v17 << 23) ^ v19;
        signed int v21 = (*((void *)&v65 + 1) + v19) % v52;
        float v22 = *(float *)(v9 + 4 * ((int)a5 + v18 * (int)v8));
        float v23 = *(float *)(v9 + 4 * ((int)a5 + v20 * (int)v8));
        float v24 = *(float *)(v9 + 4 * ((int)a5 + v21 * (int)v8));
        if (v22 >= v23)
        {
          if (v22 > v24)
          {
            if (v23 <= v24) {
              signed int v18 = v21;
            }
            else {
              signed int v18 = v20;
            }
          }
        }
        else if (v22 < v24)
        {
          if (v23 >= v24) {
            signed int v18 = v21;
          }
          else {
            signed int v18 = v20;
          }
        }
      }
      BOOL v30 = v18 - v10 >= 0 && v18 <= v11;
      int v16 = v30 ? v18 - v10 : v14 >> 1;
    }
    else
    {
      int v15 = (int)v14 >= 0 ? v11 - v10 + 1 : v11 - v10 + 2;
      int v16 = v15 >> 1;
    }
    uint64_t v31 = v10 * (int)v8;
    uint64_t v32 = (float *)(v9 + 4 * v31);
    int v61 = v10;
    float v33 = a2 ? (_DWORD *)(a2 + 4 * v10) : 0;
    uint64_t v34 = &v32[v16 * (int)v8];
    memcpy(a6, v34, v12);
    memmove(v34, (const void *)(v9 + 4 * v31), v12);
    memcpy((void *)(v9 + 4 * v31), a6, v12);
    if (v33)
    {
      uint64_t v35 = v16;
      int v36 = v33[v35];
      v33[v35] = *v33;
      *float v33 = v36;
      if (v13 < 1) {
        goto LABEL_47;
      }
      int v37 = 0;
      uint64_t v38 = v14 - 1;
      uint64_t v39 = v33 + 1;
      float32x4_t v40 = (char *)(v54 + 4 * v31);
      do
      {
        if (*(float *)&v40[4 * v59] < v32[v59])
        {
          float v41 = &v32[++v37 * (int)a3];
          memcpy(a6, v40, v12);
          memmove(v40, v41, v12);
          memcpy(v41, a6, v12);
          int v42 = *v39;
          uint64_t v43 = v37;
          *uint64_t v39 = v33[v43];
          v33[v43] = v42;
        }
        ++v39;
        v40 += v12;
        --v38;
      }
      while (v38);
    }
    else
    {
      if (v13 <= 0)
      {
LABEL_47:
        int v37 = 0;
        goto LABEL_48;
      }
      int v37 = 0;
      uint64_t v44 = v14 - 1;
      int v45 = (char *)(v54 + 4 * v31);
      do
      {
        if (*(float *)&v45[4 * v59] < v32[v59])
        {
          float v46 = &v32[++v37 * (int)a3];
          memcpy(a6, v45, v12);
          memmove(v45, v46, v12);
          memcpy(v46, a6, v12);
        }
        v45 += v12;
        --v44;
      }
      while (v44);
    }
LABEL_48:
    uint64_t v8 = a3;
    float v47 = &v32[v37 * (int)a3];
    memcpy(a6, v32, v12);
    memmove(v32, v47, v12);
    memcpy(v47, a6, v12);
    if (v33)
    {
      int v48 = *v33;
      uint64_t v49 = v37;
      *float v33 = v33[v49];
      v33[v49] = v48;
    }
    signed int v11 = v62;
    if (v37) {
      goto LABEL_53;
    }
    if (v55 > 1) {
      return 0xFFFFFFFFLL;
    }
    ++v55;
LABEL_53:
    uint64_t v9 = a1;
    int v10 = v61;
    uint64_t result = (v37 + v61);
    int v50 = result - v56;
    if ((int)result - v56 < 0) {
      int v50 = v56 - result;
    }
    if (v50 <= v58) {
      return result;
    }
    if ((int)result > v56)
    {
      signed int v11 = result - 1;
    }
    else
    {
      int v10 = v37 + v61;
      if ((int)result >= v62) {
        return result;
      }
    }
    if (v11 < v10) {
      return (v10 + v37);
    }
  }
}

uint64_t rkd_closest_to_mean(float32x2_t *a1, uint64_t a2, int a3)
{
  unsigned int v4 = a2;
  uint64_t v5 = a1;
  v54[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = (int)a2;
  size_t v7 = 4 * (int)a2;
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v9 = (float *)((char *)v54 - v8);
  bzero((char *)v54 - v8, v7);
  bzero(v9, v7);
  if (v4 != 2)
  {
    if (v4 == 3)
    {
      float32x2_t v11 = *(float32x2_t *)v9;
      float v12 = v9[2];
      int v13 = (float *)&v5[1];
      int v14 = a3;
      do
      {
        float32x2_t v11 = vadd_f32(v11, *(float32x2_t *)(v13 - 2));
        float v12 = v12 + *v13;
        v13 += v6;
        --v14;
      }
      while (v14);
      *(float32x2_t *)uint64_t v9 = v11;
      v9[2] = v12;
      goto LABEL_9;
    }
    if ((int)v4 < 1) {
      goto LABEL_26;
    }
    int v18 = 0;
    unint64_t v19 = v5;
    while (1)
    {
      if (v4 >= 8)
      {
        unint64_t v21 = 0;
        do
        {
          float v22 = (float32x4_t *)&v9[v21 / 4];
          float32x4_t v10 = vaddq_f32(*(float32x4_t *)&v9[v21 / 4], *(float32x4_t *)v19[v21 / 8].f32);
          float32x4_t v23 = vaddq_f32(*(float32x4_t *)&v9[v21 / 4 + 4], *(float32x4_t *)v19[v21 / 8 + 2].f32);
          float32x4_t *v22 = v10;
          v22[1] = v23;
          v21 += 32;
        }
        while (((4 * v4) & 0x3FFFFFFE0) != v21);
        uint64_t v20 = v4 & 0xFFFFFFF8;
        if (v20 == v4) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v20 = 0;
      }
      do
      {
        v9[v20] = v9[v20] + v19->f32[v20];
        ++v20;
      }
      while (v4 != v20);
LABEL_13:
      ++v18;
      unint64_t v19 = (float32x2_t *)((char *)v19 + 4 * v6);
      if (v18 == a3) {
        goto LABEL_9;
      }
    }
  }
  v10.i64[0] = *(void *)v9;
  int v15 = v5;
  int v16 = a3;
  do
  {
    *(float32x2_t *)v10.f32 = vadd_f32(*(float32x2_t *)v10.f32, *v15);
    int v15 = (float32x2_t *)((char *)v15 + 4 * v6);
    --v16;
  }
  while (v16);
  *(void *)uint64_t v9 = v10.i64[0];
LABEL_9:
  v10.f32[0] = (float)a3;
  if (v4 < 8)
  {
    uint64_t v17 = 0;
LABEL_24:
    uint64_t v28 = v4 - v17;
    int v29 = &v9[v17];
    do
    {
      *int v29 = *v29 / v10.f32[0];
      ++v29;
      --v28;
    }
    while (v28);
    goto LABEL_26;
  }
  uint64_t v17 = v4 & 0x7FFFFFF8;
  float32x4_t v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
  uint64_t v25 = (float32x4_t *)(v9 + 4);
  uint64_t v26 = v4 & 0xFFFFFFF8;
  do
  {
    float32x4_t v27 = vdivq_f32(*v25, v24);
    v25[-1] = vdivq_f32(v25[-1], v24);
    *uint64_t v25 = v27;
    v25 += 2;
    v26 -= 8;
  }
  while (v26);
  if (v17 != v4) {
    goto LABEL_24;
  }
LABEL_26:
  if (v4 == 2)
  {
    LODWORD(result) = 0;
    unsigned int v37 = 0;
    float v38 = *v9;
    float32x4_t v40 = (float *)v5 + 1;
    float v41 = 3.4028e38;
    do
    {
      float v39 = v9[1];
      if ((float)((float)((float)(*v40 - v39) * (float)(*v40 - v39))
                 + (float)((float)(*(v40 - 1) - v38) * (float)(*(v40 - 1) - v38))) >= v41)
      {
        uint64_t result = result;
      }
      else
      {
        float v41 = (float)((float)(*v40 - v39) * (float)(*v40 - v39))
            + (float)((float)(*(v40 - 1) - v38) * (float)(*(v40 - 1) - v38));
        uint64_t result = v37;
      }
      ++v37;
      v40 += v6;
    }
    while (a3 != v37);
  }
  else
  {
    if (v4 == 3)
    {
      LODWORD(result) = 0;
      unsigned int v31 = 0;
      float v32 = *v9;
      uint64_t v35 = (float *)&v5[1];
      float v36 = 3.4028e38;
      do
      {
        float v33 = v9[1];
        float v34 = v9[2];
        if ((float)((float)((float)((float)(*(v35 - 1) - v33) * (float)(*(v35 - 1) - v33))
                           + (float)((float)(*(v35 - 2) - v32) * (float)(*(v35 - 2) - v32)))
                   + (float)((float)(*v35 - v34) * (float)(*v35 - v34))) >= v36)
        {
          uint64_t result = result;
        }
        else
        {
          float v36 = (float)((float)((float)(*(v35 - 1) - v33) * (float)(*(v35 - 1) - v33))
                      + (float)((float)(*(v35 - 2) - v32) * (float)(*(v35 - 2) - v32)))
              + (float)((float)(*v35 - v34) * (float)(*v35 - v34));
          uint64_t result = v31;
        }
        ++v31;
        v35 += v6;
      }
      while (a3 != v31);
      return result;
    }
    if ((int)v4 > 0)
    {
      LODWORD(result) = 0;
      unsigned int v42 = 0;
      float v43 = 3.4028e38;
      while (v4 >= 8)
      {
        unint64_t v46 = 0;
        float v45 = 0.0;
        do
        {
          float32x4_t v47 = vsubq_f32(*(float32x4_t *)v5[v46 / 8].f32, *(float32x4_t *)&v9[v46 / 4]);
          float32x4_t v48 = vsubq_f32(*(float32x4_t *)v5[v46 / 8 + 2].f32, *(float32x4_t *)&v9[v46 / 4 + 4]);
          float32x4_t v49 = vmulq_f32(v47, v47);
          float32x4_t v50 = vmulq_f32(v48, v48);
          float v45 = (float)((float)((float)((float)((float)((float)((float)(v45 + v49.f32[0]) + v49.f32[1]) + v49.f32[2])
                                              + v49.f32[3])
                                      + v50.f32[0])
                              + v50.f32[1])
                      + v50.f32[2])
              + v50.f32[3];
          v46 += 32;
        }
        while (((4 * v4) & 0x3FFFFFFE0) != v46);
        uint64_t v44 = v4 & 0xFFFFFFF8;
        if (v44 != v4) {
          goto LABEL_51;
        }
LABEL_42:
        if (v45 >= v43)
        {
          uint64_t result = result;
        }
        else
        {
          float v43 = v45;
          uint64_t result = v42;
        }
        ++v42;
        uint64_t v5 = (float32x2_t *)((char *)v5 + 4 * v6);
        if (v42 == a3) {
          return result;
        }
      }
      uint64_t v44 = 0;
      float v45 = 0.0;
      do
      {
LABEL_51:
        float v51 = v5->f32[v44] - v9[v44];
        float v45 = v45 + (float)(v51 * v51);
        ++v44;
      }
      while (v4 != v44);
      goto LABEL_42;
    }
    LODWORD(result) = 0;
    unsigned int v52 = 0;
    float v53 = 3.4028e38;
    do
    {
      if (v53 <= 0.0)
      {
        uint64_t result = result;
      }
      else
      {
        float v53 = 0.0;
        uint64_t result = v52;
      }
      ++v52;
    }
    while (a3 != v52);
  }
  return result;
}

uint64_t rkd_split_dim_sdev(float32x4_t *a1, int a2, int a3)
{
  uint64_t v5 = a1;
  v32[1] = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388](a1, 16 * a2);
  size_t v7 = (float64x2_t *)((char *)v32 - v6);
  if (a2 < 1) {
    return 0;
  }
  uint64_t v8 = (char *)&v7->f64[a2];
  bzero((char *)v32 - v6, v6);
  *(void *)uint64_t v8 = 0;
  if (a3 > 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = a2;
    BOOL v12 = v7 < (float64x2_t *)&v7->f64[a2 + (unint64_t)a2] && v8 < (char *)&v7->f64[a2];
    uint64_t v13 = 8 * a2;
    while (1)
    {
      char v14 = a2 < 4 || v12;
      if (v14)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v16 = a2 & 0x7FFFFFFC;
        uint64_t v17 = v7;
        int v18 = v5;
        do
        {
          float32x4_t v19 = *v18++;
          float32x4_t v20 = vmulq_f32(v19, v19);
          float64x2_t v21 = vaddq_f64(v17[1], vcvt_hight_f64_f32(v20));
          *uint64_t v17 = vaddq_f64(*v17, vcvtq_f64_f32(*(float32x2_t *)v20.f32));
          v17[1] = v21;
          float v22 = (float64x2_t *)((char *)v17 + v13);
          float64x2_t v23 = vaddq_f64(*(float64x2_t *)((char *)v17 + v13 + 16), vcvt_hight_f64_f32(v19));
          float64x2_t *v22 = vaddq_f64(*(float64x2_t *)((char *)v17 + 8 * a2), vcvtq_f64_f32(*(float32x2_t *)v19.f32));
          v22[1] = v23;
          v17 += 2;
          v16 -= 4;
        }
        while (v16);
        uint64_t v15 = a2 & 0x7FFFFFFC;
        if (v15 == a2) {
          goto LABEL_10;
        }
      }
      do
      {
        float v24 = v5->f32[v15];
        uint64_t v25 = v15;
        v7->f64[v25] = v7->f64[v15] + (float)(v24 * v24);
        *(double *)&v8[v25 * 8] = *(double *)&v8[8 * v15++] + v24;
      }
      while (a2 != v15);
LABEL_10:
      ++v9;
      uint64_t v5 = (float32x4_t *)((char *)v5 + 4 * a2);
      if (v9 == a3) {
        goto LABEL_23;
      }
    }
  }
  uint64_t v10 = a2;
LABEL_23:
  uint64_t v27 = 0;
  LODWORD(result) = 0;
  double v28 = (double)a3;
  double v29 = -1.17549435e-38;
  do
  {
    double v30 = *(double *)&v8[8 * v27] / v28;
    double v31 = v7->f64[v27] / v28 - v30 * v30;
    if (v31 <= v29) {
      uint64_t result = result;
    }
    else {
      uint64_t result = v27;
    }
    if (v31 > v29) {
      double v29 = v7->f64[v27] / v28 - v30 * v30;
    }
    ++v27;
  }
  while (v10 != v27);
  return result;
}

uint64_t rkd_split_dim_bbox(float32x4_t *a1, int a2, int a3)
{
  uint64_t v5 = a1;
  v40[1] = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388](a1, 16 * a2);
  size_t v7 = (char *)v40 - v6;
  if (a2 < 1) {
    return 0;
  }
  bzero((char *)v40 - v6, v6);
  uint64_t v8 = 0;
  uint64_t v9 = 8 * a2;
  if (a2 < 6) {
    goto LABEL_7;
  }
  if ((a2 & 0x1FFFFFFFFFFFFFFCLL) == 0) {
    goto LABEL_7;
  }
  int64x2_t v10 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  uint64_t v8 = a2 & 0xFFFFFFFC;
  int64x2_t v11 = vdupq_n_s64(0xC7EFFFFFE0000000);
  uint64_t v12 = v8;
  uint64_t v13 = (int64x2_t *)v7;
  do
  {
    *uint64_t v13 = v10;
    v13[1] = v10;
    char v14 = (int64x2_t *)((char *)v13 + v9);
    *char v14 = v11;
    v14[1] = v11;
    v13 += 2;
    v12 -= 4;
  }
  while (v12);
  if (v8 != a2)
  {
LABEL_7:
    uint64_t v15 = a2 - v8;
    uint64_t v16 = &v7[8 * v8];
    do
    {
      *(void *)uint64_t v16 = 0x47EFFFFFE0000000;
      *(void *)&v16[8 * a2] = 0xC7EFFFFFE0000000;
      v16 += 8;
      --v15;
    }
    while (v15);
  }
  if (a3 > 0)
  {
    uint64_t v17 = 0;
    int v18 = &v7[8 * a2];
    BOOL v20 = v7 < &v7[8 * a2 + 8 * (unint64_t)a2] && v18 < &v7[8 * a2];
    while (1)
    {
      char v21 = a2 < 4 || v20;
      if (v21) {
        break;
      }
      uint64_t v23 = a2 & 0xFFFFFFFC;
      float v24 = (float64x2_t *)v7;
      uint64_t v25 = v5;
      do
      {
        float32x4_t v26 = *v25++;
        float64x2_t v27 = vcvtq_f64_f32(*(float32x2_t *)v26.f32);
        float64x2_t v28 = vcvt_hight_f64_f32(v26);
        int8x16_t v29 = vbslq_s8((int8x16_t)vcgtq_f64(v24[1], v28), (int8x16_t)v28, (int8x16_t)v24[1]);
        *(int8x16_t *)float v24 = vbslq_s8((int8x16_t)vcgtq_f64(*v24, v27), (int8x16_t)v27, *(int8x16_t *)v24);
        v24[1] = (float64x2_t)v29;
        double v30 = (int8x16_t *)((char *)v24 + v9);
        int8x16_t v31 = vbslq_s8((int8x16_t)vcgtq_f64(v28, *(float64x2_t *)((char *)v24 + v9 + 16)), (int8x16_t)v28, *(int8x16_t *)((char *)&v24[1] + v9));
        int8x16_t *v30 = vbslq_s8((int8x16_t)vcgtq_f64(v27, *(float64x2_t *)((char *)v24 + 8 * a2)), (int8x16_t)v27, *(int8x16_t *)((char *)v24 + 8 * a2));
        v30[1] = v31;
        v24 += 2;
        v23 -= 4;
      }
      while (v23);
      uint64_t v22 = a2 & 0x7FFFFFFC;
      if ((a2 & 0xFFFFFFFC) != (unint64_t)a2) {
        goto LABEL_25;
      }
LABEL_16:
      ++v17;
      uint64_t v5 = (float32x4_t *)((char *)v5 + 4 * a2);
      if (v17 == a3) {
        goto LABEL_31;
      }
    }
    uint64_t v22 = 0;
    do
    {
LABEL_25:
      double v32 = v5->f32[v22];
      double v33 = *(double *)&v7[8 * v22];
      if (v33 > v32) {
        double v33 = v5->f32[v22];
      }
      *(double *)&v7[8 * v22] = v33;
      if (*(double *)&v18[8 * v22] >= v32) {
        double v32 = *(double *)&v18[8 * v22];
      }
      *(double *)&v18[8 * v22++] = v32;
    }
    while (a2 != v22);
    goto LABEL_16;
  }
LABEL_31:
  uint64_t v34 = 0;
  LODWORD(result) = 0;
  double v37 = -1.17549435e-38;
  do
  {
    double v38 = *(double *)&v7[8 * v34];
    float v36 = &v7[8 * a2];
    double v39 = *(double *)&v36[8 * v34] - v38;
    if (v39 <= v37) {
      uint64_t result = result;
    }
    else {
      uint64_t result = v34;
    }
    if (v39 > v37) {
      double v37 = *(double *)&v36[8 * v34] - v38;
    }
    ++v34;
  }
  while (a2 != v34);
  return result;
}

unint64_t rkd_sample_median(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t *a6)
{
  if (a5)
  {
    uint64_t v11 = (a5 - 1);
    unint64_t v12 = rkd_sample_median(a1, a2, a3, a4, v11, a6);
    unsigned int v13 = rkd_sample_median(a1, a2, a3, a4, v11, a6);
    unsigned int v14 = rkd_sample_median(a1, a2, a3, a4, v11, a6);
  }
  else
  {
    unint64_t v15 = a6[1];
    unint64_t v16 = (v15 >> 5) ^ ((*a6 ^ (*a6 << 23)) >> 18) ^ v15 ^ *a6 ^ (*a6 << 23);
    unint64_t v12 = (v16 + v15) % a3;
    unint64_t v17 = ((v15 ^ (v15 << 23)) >> 18) ^ (v16 >> 5) ^ v15 ^ (v15 << 23) ^ v16;
    unsigned int v13 = (v17 + v16) % a3;
    unint64_t v18 = ((v16 ^ (v16 << 23)) >> 18) ^ (v17 >> 5) ^ v16 ^ (v16 << 23) ^ v17;
    *a6 = v17;
    a6[1] = v18;
    unsigned int v14 = (v18 + v17) % a3;
  }
  float v19 = *(float *)(a1 + 4 * ((int)a4 + (int)v12 * (int)a2));
  float v20 = *(float *)(a1 + 4 * (int)(a4 + v13 * a2));
  float v21 = *(float *)(a1 + 4 * (int)(a4 + v14 * a2));
  if (v19 >= v20)
  {
    if (v19 > v21)
    {
      if (v20 <= v21) {
        return v14;
      }
      else {
        return v13;
      }
    }
  }
  else if (v19 < v21)
  {
    if (v20 >= v21) {
      return v14;
    }
    else {
      return v13;
    }
  }
  return v12;
}

float vl_match_exhaustive(float result, uint64_t a2, void *a3, void *a4, int a5, int a6, uint64_t a7)
{
  v174[1] = *MEMORY[0x263EF8340];
  if (a6)
  {
    printf("%sAborting : ", (const char *)&unk_21BB738AE);
    printf("%s: CUDA is not available on Apple devices", "vl_match_exhaustive_cuda");
    putchar(10);
    __assert_rtn("vl_match_exhaustive_cuda", "vl_match_exhaustive.c", 214, "0");
  }
  uint64_t v7 = a5;
  if ((int)(*a3 / a5) >= 1)
  {
    int v9 = a5 >> 4;
    float v161 = a3;
    uint64_t v162 = (*a3 / a5);
    if ((uint64_t)a4[61] >= 1)
    {
      int v158 = a5 & 0xF;
      uint64_t v10 = 0;
      uint64_t v168 = 0;
      uint64_t v11 = a5 & 0xFFFFFFE0;
      uint64_t v12 = a5 & 0xFFFFFFF8;
      uint64_t v159 = a5;
      while (1)
      {
        uint64_t v16 = a3[1];
        uint64_t v164 = *(void *)(a7 + 8);
        uint64_t v166 = *(void *)(a7 + 32);
        uint64_t v17 = a4[24];
        uint64_t v18 = a4[25];
        v174[0] = -1;
        uint64_t v19 = v17 / v7;
        memset_pattern16(&__b, &unk_21BB7CE00, 8uLL);
        if ((int)v19 >= 1)
        {
          uint64_t v20 = a4[62];
          if (v158)
          {
            if (a5 > 0)
            {
              uint64_t v21 = 0;
              uint64_t v22 = v16 + v10;
              while (!*(_DWORD *)(v20 + 4 * v21))
              {
LABEL_11:
                v18 += v7;
                if (++v21 == v19) {
                  goto LABEL_60;
                }
              }
              if (a5 < 8)
              {
                uint64_t v23 = 0;
                int v24 = 0;
                goto LABEL_24;
              }
              if (a5 >= 0x20)
              {
                uint64_t v26 = 0;
                int32x4_t v27 = 0uLL;
                int32x4_t v28 = 0uLL;
                int32x4_t v29 = 0uLL;
                int32x4_t v30 = 0uLL;
                int32x4_t v31 = 0uLL;
                int32x4_t v32 = 0uLL;
                int32x4_t v33 = 0uLL;
                int32x4_t v34 = 0uLL;
                do
                {
                  uint8x16_t v35 = *(uint8x16_t *)(v22 + v26);
                  uint8x16_t v36 = *(uint8x16_t *)(v22 + v26 + 16);
                  uint8x16_t v37 = *(uint8x16_t *)(v18 + v26);
                  uint8x16_t v38 = *(uint8x16_t *)(v18 + v26 + 16);
                  int16x8_t v39 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v37.i8);
                  int16x8_t v40 = (int16x8_t)vsubl_high_u8(v35, v37);
                  int16x8_t v41 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v38.i8);
                  int16x8_t v42 = (int16x8_t)vsubl_high_u8(v36, v38);
                  int32x4_t v30 = vmlal_high_s16(v30, v40, v40);
                  int32x4_t v29 = vmlal_s16(v29, *(int16x4_t *)v40.i8, *(int16x4_t *)v40.i8);
                  int32x4_t v28 = vmlal_high_s16(v28, v39, v39);
                  int32x4_t v27 = vmlal_s16(v27, *(int16x4_t *)v39.i8, *(int16x4_t *)v39.i8);
                  int32x4_t v34 = vmlal_high_s16(v34, v42, v42);
                  int32x4_t v33 = vmlal_s16(v33, *(int16x4_t *)v42.i8, *(int16x4_t *)v42.i8);
                  int32x4_t v32 = vmlal_high_s16(v32, v41, v41);
                  int32x4_t v31 = vmlal_s16(v31, *(int16x4_t *)v41.i8, *(int16x4_t *)v41.i8);
                  v26 += 32;
                }
                while (v11 != v26);
                int v24 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v31, v27), vaddq_s32(v33, v29)), vaddq_s32(vaddq_s32(v32, v28), vaddq_s32(v34, v30))));
                if (v11 != a5)
                {
                  uint64_t v25 = a5 & 0xFFFFFFE0;
                  uint64_t v23 = v25;
                  if ((a5 & 0x18) == 0) {
                    goto LABEL_24;
                  }
                  goto LABEL_21;
                }
              }
              else
              {
                int v24 = 0;
                uint64_t v25 = 0;
LABEL_21:
                int32x4_t v43 = 0uLL;
                int32x4_t v44 = (int32x4_t)v24;
                do
                {
                  int16x8_t v45 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v22 + v25), *(uint8x8_t *)(v18 + v25));
                  int32x4_t v43 = vmlal_high_s16(v43, v45, v45);
                  int32x4_t v44 = vmlal_s16(v44, *(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8);
                  v25 += 8;
                }
                while (v12 != v25);
                int v24 = vaddvq_s32(vaddq_s32(v44, v43));
                uint64_t v23 = a5 & 0xFFFFFFF8;
                if (v12 != a5)
                {
                  do
                  {
LABEL_24:
                    int v46 = *(unsigned __int8 *)(v22 + v23) - *(unsigned __int8 *)(v18 + v23);
                    v24 += v46 * v46;
                    ++v23;
                  }
                  while (a5 != v23);
                }
              }
              if (v24 < __b || v24 < v173)
              {
                if (__b >= v173) {
                  p_b = &__b;
                }
                else {
                  p_b = &v173;
                }
                uint64_t v49 = ((char *)p_b - (char *)&__b) << 30 >> 30;
                *(_DWORD *)((char *)v174 + v49) = v21;
                *(int *)((char *)&__b + v49) = v24;
              }
              goto LABEL_11;
            }
            uint64_t v61 = 0;
            do
            {
              if (*(_DWORD *)(v20 + 4 * v61))
              {
                if (__b > 0 || v173 >= 1)
                {
                  if (__b >= v173) {
                    uint64_t v63 = &__b;
                  }
                  else {
                    uint64_t v63 = &v173;
                  }
                  uint64_t v64 = ((char *)v63 - (char *)&__b) << 30 >> 30;
                  *(_DWORD *)((char *)v174 + v64) = v61;
                  *(int *)((char *)&__b + v64) = 0;
                }
              }
              ++v61;
            }
            while (v19 != v61);
          }
          else
          {
            uint64_t v50 = 0;
            do
            {
              if (*(_DWORD *)(v20 + 4 * v50))
              {
                int32x4_t v51 = 0uLL;
                if (a5 >= 16)
                {
                  uint64_t v52 = 0;
                  do
                  {
                    int8x16_t v53 = *(int8x16_t *)(v16 + v10 + 16 * v52);
                    int8x16_t v54 = *(int8x16_t *)(v18 + 16 * v52);
                    int16x8_t v55 = (int16x8_t)vabdq_u16((uint16x8_t)vzip1q_s8(v53, (int8x16_t)0), (uint16x8_t)vzip1q_s8(v54, (int8x16_t)0));
                    int16x8_t v56 = (int16x8_t)vabdq_u16((uint16x8_t)vzip2q_s8(v53, (int8x16_t)0), (uint16x8_t)vzip2q_s8(v54, (int8x16_t)0));
                    int32x4_t v51 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v51, (uint16x8_t)vmulq_s16(v55, v55)), (uint16x8_t)vmulq_s16(v56, v56));
                    ++v52;
                  }
                  while (v9 != v52);
                }
                int v57 = vaddvq_s32(v51);
                if (v57 < __b || v57 < v173)
                {
                  if (__b >= v173) {
                    uint64_t v59 = &__b;
                  }
                  else {
                    uint64_t v59 = &v173;
                  }
                  uint64_t v60 = ((char *)v59 - (char *)&__b) << 30 >> 30;
                  *(_DWORD *)((char *)v174 + v60) = v50;
                  *(int *)((char *)&__b + v60) = v57;
                }
              }
              v18 += v7;
              ++v50;
            }
            while (v50 != v19);
          }
        }
LABEL_60:
        long long v65 = malloc_type_malloc(0x200uLL, 0xD7C3B485uLL);
        int v66 = __b;
        int v67 = HIDWORD(v174[0]);
        uint64_t v68 = v10;
        if (v173 < __b)
        {
          int __b = v173;
          int v173 = v66;
          int v13 = v174[0];
        }
        else
        {
          int v13 = HIDWORD(v174[0]);
          int v67 = v174[0];
        }
        unsigned int v14 = (_DWORD *)(v164 + 8 * v168);
        unint64_t v15 = (float *)(v166 + 8 * v168);
        free(v65);
        *unsigned int v14 = v67;
        *unint64_t v15 = (float)__b;
        v14[1] = v13;
        uint64_t result = (float)v173;
        v15[1] = (float)v173;
        uint64_t v10 = v68 + v159;
        ++v168;
        uint64_t v7 = v159;
        a3 = v161;
        if (v168 == v162) {
          return result;
        }
      }
    }
    if ((a5 & 0xF) != 0)
    {
      if (a5 > 0)
      {
        uint64_t v69 = 0;
        uint64_t v169 = 0;
        uint64_t v70 = a5 & 0xFFFFFFE0;
        uint64_t v71 = a5 & 0xFFFFFFF8;
        while (1)
        {
          uint64_t v75 = a3[1];
          uint64_t v165 = *(void *)(a7 + 8);
          uint64_t v76 = *(void *)(a7 + 32);
          uint64_t v77 = a4[24];
          uint64_t v78 = a4[25];
          v174[0] = 0;
          uint64_t v79 = v77 / v7;
          memset_pattern16(&__b, &unk_21BB7CE00, 8uLL);
          if ((int)v79 >= 1) {
            break;
          }
          int v110 = 0;
          int v109 = 0;
LABEL_93:
          uint64_t v111 = malloc_type_malloc(0x200uLL, 0x94865AD4uLL);
          int v112 = __b;
          uint64_t v167 = v69;
          if (v173 < __b)
          {
            int __b = v173;
            int v173 = v112;
            int v72 = v109;
          }
          else
          {
            int v72 = v110;
            int v110 = v109;
          }
          float v73 = (_DWORD *)(v165 + 8 * v169);
          uint64_t v74 = (float *)(v76 + 8 * v169);
          free(v111);
          *float v73 = v110;
          *uint64_t v74 = (float)__b;
          v73[1] = v72;
          uint64_t result = (float)v173;
          v74[1] = (float)v173;
          uint64_t v69 = v167 + v7;
          ++v169;
          a3 = v161;
          if (v169 == v162) {
            return result;
          }
        }
        int v80 = 0;
        uint64_t v81 = v75 + v69;
        while (1)
        {
          if (a5 < 8)
          {
            uint64_t v82 = 0;
            int v83 = 0;
            do
            {
LABEL_81:
              int v105 = *(unsigned __int8 *)(v81 + v82) - *(unsigned __int8 *)(v78 + v82);
              v83 += v105 * v105;
              ++v82;
            }
            while (a5 != v82);
            goto LABEL_82;
          }
          if (a5 >= 0x20)
          {
            uint64_t v85 = 0;
            int32x4_t v86 = 0uLL;
            int32x4_t v87 = 0uLL;
            int32x4_t v88 = 0uLL;
            int32x4_t v89 = 0uLL;
            int32x4_t v90 = 0uLL;
            int32x4_t v91 = 0uLL;
            int32x4_t v92 = 0uLL;
            int32x4_t v93 = 0uLL;
            do
            {
              uint8x16_t v94 = *(uint8x16_t *)(v81 + v85);
              uint8x16_t v95 = *(uint8x16_t *)(v81 + v85 + 16);
              uint8x16_t v96 = *(uint8x16_t *)(v78 + v85);
              uint8x16_t v97 = *(uint8x16_t *)(v78 + v85 + 16);
              int16x8_t v98 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v94.i8, *(uint8x8_t *)v96.i8);
              int16x8_t v99 = (int16x8_t)vsubl_high_u8(v94, v96);
              int16x8_t v100 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v95.i8, *(uint8x8_t *)v97.i8);
              int16x8_t v101 = (int16x8_t)vsubl_high_u8(v95, v97);
              int32x4_t v89 = vmlal_high_s16(v89, v99, v99);
              int32x4_t v88 = vmlal_s16(v88, *(int16x4_t *)v99.i8, *(int16x4_t *)v99.i8);
              int32x4_t v87 = vmlal_high_s16(v87, v98, v98);
              int32x4_t v86 = vmlal_s16(v86, *(int16x4_t *)v98.i8, *(int16x4_t *)v98.i8);
              int32x4_t v93 = vmlal_high_s16(v93, v101, v101);
              int32x4_t v92 = vmlal_s16(v92, *(int16x4_t *)v101.i8, *(int16x4_t *)v101.i8);
              int32x4_t v91 = vmlal_high_s16(v91, v100, v100);
              int32x4_t v90 = vmlal_s16(v90, *(int16x4_t *)v100.i8, *(int16x4_t *)v100.i8);
              v85 += 32;
            }
            while (v70 != v85);
            int v83 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v90, v86), vaddq_s32(v92, v88)), vaddq_s32(vaddq_s32(v91, v87), vaddq_s32(v93, v89))));
            if (v70 == a5) {
              goto LABEL_82;
            }
            uint64_t v84 = a5 & 0xFFFFFFE0;
            uint64_t v82 = v84;
            if ((a5 & 0x18) == 0) {
              goto LABEL_81;
            }
          }
          else
          {
            int v83 = 0;
            uint64_t v84 = 0;
          }
          int32x4_t v102 = 0uLL;
          int32x4_t v103 = (int32x4_t)v83;
          do
          {
            int16x8_t v104 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v81 + v84), *(uint8x8_t *)(v78 + v84));
            int32x4_t v102 = vmlal_high_s16(v102, v104, v104);
            int32x4_t v103 = vmlal_s16(v103, *(int16x4_t *)v104.i8, *(int16x4_t *)v104.i8);
            v84 += 8;
          }
          while (v71 != v84);
          int v83 = vaddvq_s32(vaddq_s32(v103, v102));
          uint64_t v82 = a5 & 0xFFFFFFF8;
          if (v71 != a5) {
            goto LABEL_81;
          }
LABEL_82:
          if (v83 < __b || v83 < v173)
          {
            if (__b >= v173) {
              float v107 = &__b;
            }
            else {
              float v107 = &v173;
            }
            uint64_t v108 = ((char *)v107 - (char *)&__b) << 30 >> 30;
            *(_DWORD *)((char *)v174 + v10_Block_object_dispose(&STACK[0x220], 8) = v80;
            *(int *)((char *)&__b + v10_Block_object_dispose(&STACK[0x220], 8) = v83;
          }
          v78 += v7;
          if (++v80 == v79)
          {
            int v109 = v174[0];
            int v110 = HIDWORD(v174[0]);
            goto LABEL_93;
          }
        }
      }
      uint64_t v142 = 0;
      do
      {
        uint64_t v146 = *(void *)(a7 + 8);
        uint64_t v147 = *(void *)(a7 + 32);
        uint64_t v148 = a4[24];
        v174[0] = 0;
        uint64_t v149 = v148 / v7;
        memset_pattern16(&__b, &unk_21BB7CE00, 8uLL);
        if ((int)v149 < 1)
        {
          int v154 = 0;
          int v155 = 0;
        }
        else
        {
          int v150 = 0;
          do
          {
            if (__b > 0 || v173 >= 1)
            {
              if (__b >= v173) {
                uint64_t v152 = &__b;
              }
              else {
                uint64_t v152 = &v173;
              }
              uint64_t v153 = ((char *)v152 - (char *)&__b) << 30 >> 30;
              *(_DWORD *)((char *)v174 + v153) = v150;
              *(int *)((char *)&__b + v153) = 0;
            }
            ++v150;
          }
          while (v149 != v150);
          int v155 = v174[0];
          int v154 = HIDWORD(v174[0]);
        }
        int v156 = malloc_type_malloc(0x200uLL, 0x94865AD4uLL);
        int v157 = __b;
        if (v173 < __b)
        {
          int __b = v173;
          int v173 = v157;
          int v143 = v155;
        }
        else
        {
          int v143 = v154;
          int v154 = v155;
        }
        uint64_t v144 = (_DWORD *)(v146 + 8 * v142);
        double v145 = (float *)(v147 + 8 * v142);
        free(v156);
        *uint64_t v144 = v154;
        *double v145 = (float)__b;
        v144[1] = v143;
        uint64_t result = (float)v173;
        v145[1] = (float)v173;
        ++v142;
      }
      while (v142 != v162);
    }
    else
    {
      uint64_t v113 = 0;
      uint64_t v114 = 0;
      do
      {
        uint64_t v119 = a3[1];
        uint64_t v170 = *(void *)(a7 + 8);
        uint64_t v120 = *(void *)(a7 + 32);
        uint64_t v121 = a4[24];
        uint64_t v122 = a4[25];
        v174[0] = 0;
        uint64_t v123 = v121 / v7;
        memset_pattern16(&__b, &unk_21BB7CE00, 8uLL);
        if ((int)v123 >= 1)
        {
          if (a5 <= 15)
          {
            int v135 = 0;
            do
            {
              if (__b > 0 || v173 >= 1)
              {
                if (__b >= v173) {
                  float32x4_t v137 = &__b;
                }
                else {
                  float32x4_t v137 = &v173;
                }
                uint64_t v138 = ((char *)v137 - (char *)&__b) << 30 >> 30;
                *(_DWORD *)((char *)v174 + v13_Block_object_dispose(&STACK[0x220], 8) = v135;
                *(int *)((char *)&__b + v13_Block_object_dispose(&STACK[0x220], 8) = 0;
              }
              ++v135;
            }
            while (v123 != v135);
          }
          else
          {
            int v124 = 0;
            do
            {
              uint64_t v125 = 0;
              int32x4_t v126 = 0uLL;
              do
              {
                int8x16_t v127 = *(int8x16_t *)(v119 + v113 + 16 * v125);
                int8x16_t v128 = *(int8x16_t *)(v122 + 16 * v125);
                int16x8_t v129 = (int16x8_t)vabdq_u16((uint16x8_t)vzip1q_s8(v127, (int8x16_t)0), (uint16x8_t)vzip1q_s8(v128, (int8x16_t)0));
                int16x8_t v130 = (int16x8_t)vabdq_u16((uint16x8_t)vzip2q_s8(v127, (int8x16_t)0), (uint16x8_t)vzip2q_s8(v128, (int8x16_t)0));
                int32x4_t v126 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v126, (uint16x8_t)vmulq_s16(v129, v129)), (uint16x8_t)vmulq_s16(v130, v130));
                ++v125;
              }
              while (v9 != v125);
              int v131 = vaddvq_s32(v126);
              if (v131 < __b || v131 < v173)
              {
                if (__b >= v173) {
                  uint64_t v133 = &__b;
                }
                else {
                  uint64_t v133 = &v173;
                }
                uint64_t v134 = ((char *)v133 - (char *)&__b) << 30 >> 30;
                *(_DWORD *)((char *)v174 + v134) = v124;
                *(int *)((char *)&__b + v134) = v131;
              }
              v122 += v7;
              ++v124;
            }
            while (v124 != v123);
          }
        }
        float32x4_t v139 = malloc_type_malloc(0x200uLL, 0x94865AD4uLL);
        int v140 = __b;
        int v141 = HIDWORD(v174[0]);
        if (v173 < __b)
        {
          int __b = v173;
          int v173 = v140;
          int v115 = v174[0];
        }
        else
        {
          int v115 = HIDWORD(v174[0]);
          int v141 = v174[0];
        }
        uint64_t v116 = v120;
        uint64_t v117 = (_DWORD *)(v170 + 8 * v114);
        uint64_t v118 = (float *)(v116 + 8 * v114);
        free(v139);
        _DWORD *v117 = v141;
        float *v118 = (float)__b;
        v117[1] = v115;
        uint64_t result = (float)v173;
        v118[1] = (float)v173;
        ++v114;
        v113 += v7;
        a3 = v161;
      }
      while (v114 != v162);
    }
  }
  return result;
}

void vl_match_exhaustive_knn_rematch(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, unsigned int a8, float a9)
{
  unsigned int v139 = a8;
  uint64_t v132 = a7;
  uint64_t v133 = a4;
  uint64_t v131 = a2;
  uint64_t v144 = *MEMORY[0x263EF8340];
  float32x4_t v137 = a1;
  uint64_t v12 = *a1;
  uint64_t v13 = *a5;
  unsigned int v14 = (const void *)a5[1];
  uint64_t v141 = *a1;
  uint64_t v142 = 0x3D4CCCCD00000010;
  int v143 = 0;
  unint64_t v15 = (int32x4_t *)malloc_type_malloc(4 * (int)v13, 0x100004052888210uLL);
  if ((int)v13 >= 1)
  {
    if (v13 < 8uLL)
    {
      uint64_t v16 = 0;
      do
      {
LABEL_7:
        v15->i32[v16] = v16;
        ++v16;
      }
      while (v13 != v16);
      goto LABEL_8;
    }
    uint64_t v16 = v13 & 0x7FFFFFF8;
    int32x4_t v17 = (int32x4_t)xmmword_21BB7A770;
    uint64_t v18 = v15 + 1;
    v19.i64[0] = 0x400000004;
    v19.i64[1] = 0x400000004;
    v20.i64[0] = 0x800000008;
    v20.i64[1] = 0x800000008;
    uint64_t v21 = v13 & 0xFFFFFFF8;
    do
    {
      v18[-1] = v17;
      *uint64_t v18 = vaddq_s32(v17, v19);
      int32x4_t v17 = vaddq_s32(v17, v20);
      v18 += 2;
      v21 -= 8;
    }
    while (v21);
    if ((v13 & 7) != 0) {
      goto LABEL_7;
    }
  }
LABEL_8:
  uint64_t v22 = (uint8x8_t *)rkd_create_ex(v14, (uint64_t)v15, 2, v13, 1, (uint64_t)&v142);
  int v140 = (void **)v22;
  uint64_t v24 = *a6;
  uint64_t v25 = (int)v141;
  uint64_t v26 = a6[2];
  if ((int)v141 > v26)
  {
    uint64_t v31 = 2 * v26;
    BOOL v32 = v26 == 0;
    uint64_t v33 = 32;
    if (!v32) {
      uint64_t v33 = v31;
    }
    if (v33 <= (int)v141) {
      uint64_t v34 = (int)v141;
    }
    else {
      uint64_t v34 = v33;
    }
    if (v34)
    {
      uint64_t v22 = (uint8x8_t *)malloc_type_realloc((void *)a6[1], 8 * v34, 0xA239823FuLL);
      a6[1] = (uint64_t)v22;
    }
    a6[2] = v34;
    uint64_t v27 = v25 - v24;
    if (v25 <= v24)
    {
LABEL_10:
      *a6 = v25;
      uint64_t v28 = a6[3];
      uint64_t v29 = a6[5];
      if (v25 <= v29) {
        goto LABEL_11;
      }
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v27 = (int)v141 - v24;
    if ((int)v141 <= v24) {
      goto LABEL_10;
    }
  }
  bzero((void *)(a6[1] + 8 * *a6), 8 * v27);
  *a6 = v25;
  uint64_t v28 = a6[3];
  uint64_t v29 = a6[5];
  if (v25 <= v29)
  {
LABEL_11:
    uint64_t v30 = v25 - v28;
    if (v25 <= v28) {
      goto LABEL_12;
    }
LABEL_31:
    bzero((void *)(a6[4] + 8 * a6[3]), 8 * v30);
    uint64_t v138 = a6;
    a6[3] = v25;
    if ((int)v12 < 1) {
      goto LABEL_80;
    }
    goto LABEL_32;
  }
LABEL_23:
  uint64_t v35 = 2 * v29;
  BOOL v32 = v29 == 0;
  uint64_t v36 = 32;
  if (!v32) {
    uint64_t v36 = v35;
  }
  if (v36 <= v25) {
    uint64_t v37 = v25;
  }
  else {
    uint64_t v37 = v36;
  }
  if (v37)
  {
    uint64_t v22 = (uint8x8_t *)malloc_type_realloc((void *)a6[4], 8 * v37, 0xFB6ACFAAuLL);
    a6[4] = (uint64_t)v22;
  }
  a6[5] = v37;
  uint64_t v30 = v25 - v28;
  if (v25 > v28) {
    goto LABEL_31;
  }
LABEL_12:
  uint64_t v138 = a6;
  a6[3] = v25;
  if ((int)v12 < 1) {
    goto LABEL_80;
  }
LABEL_32:
  if ((a3 & 0xF) != 0)
  {
    if (a3 > 0)
    {
      uint64_t v38 = 0;
      uint64_t v39 = a3 & 0xFFFFFFF8;
      uint64_t v40 = 48;
      uint64_t v41 = 32;
      uint64_t v129 = a3 & 0x18;
      uint64_t v130 = 4 * v139;
      uint64_t v128 = -v39;
      while (1)
      {
        uint64_t v134 = &v128;
        uint64_t v135 = v40;
        uint64_t v43 = v137[1];
        uint64_t v142 = *(void *)(v43 + 288 * v38);
        MEMORY[0x270FA5388](v22, v23);
        int16x8_t v45 = (char *)&v128 - ((v44 + 15) & 0x7FFFFFFF0);
        uint64_t v46 = v138[1];
        uint64_t v136 = v47;
        uint64_t v48 = 8 * v47;
        uint64_t v49 = (_DWORD *)(v46 + 8 * v47);
        uint64_t v50 = (float *)(v138[4] + 8 * v47);
        uint64_t v22 = (uint8x8_t *)rkd_knn_app((uint64_t)v140, (float *)&v142, 0, (uint64_t)v45, v139, 0x7FFFFFFF, a9);
        if ((int)v22 > 0) {
          break;
        }
        uint64_t v89 = v132;
        *uint64_t v49 = *(_DWORD *)(*(void *)(v132 + 8) + v48);
        *uint64_t v50 = *(float *)(*(void *)(v89 + 32) + v48);
        v49[1] = -1;
        v50[1] = -1.0;
        uint64_t v57 = v135;
        uint64_t v56 = v136;
LABEL_36:
        uint64_t v38 = v56 + 1;
        uint64_t v40 = v57 + 288;
        v41 += 288;
        if (v38 == v141) {
          goto LABEL_80;
        }
      }
      int v51 = 0;
      uint64_t v52 = 0;
      *uint64_t v49 = 0;
      *uint64_t v50 = 2147500000.0;
      uint64_t v53 = *(void *)(v133 + 8);
      uint64_t v54 = *(void *)(v131 + 200);
      uint64_t v55 = v22;
      uint64_t v57 = v135;
      uint64_t v56 = v136;
      float v58 = 2147500000.0;
      uint64_t v60 = v128;
      uint64_t v59 = v129;
      while (1)
      {
        uint64_t v61 = *(int *)(v53 + 4 * *(int *)&v45[4 * v52]) * (uint64_t)a3;
        if (a3 >= 8)
        {
          if (a3 < 0x20)
          {
            int v62 = 0;
            uint64_t v63 = 0;
LABEL_48:
            int32x4_t v79 = 0uLL;
            int32x4_t v80 = (int32x4_t)v62;
            uint64_t v81 = (uint8x8_t *)(v43 + v41 + v63);
            uint64_t v22 = (uint8x8_t *)(v54 + v63 + v61);
            uint64_t v82 = v60 + v63;
            do
            {
              uint8x8_t v83 = *v81++;
              uint8x8_t v84 = v83;
              uint8x8_t v85 = *v22++;
              int16x8_t v86 = (int16x8_t)vsubl_u8(v84, v85);
              int32x4_t v79 = vmlal_high_s16(v79, v86, v86);
              int32x4_t v80 = vmlal_s16(v80, *(int16x4_t *)v86.i8, *(int16x4_t *)v86.i8);
              v82 += 8;
            }
            while (v82);
            int v62 = vaddvq_s32(vaddq_s32(v80, v79));
            uint64_t v23 = a3 & 0xFFFFFFF8;
            if (v39 == a3) {
              goto LABEL_53;
            }
            goto LABEL_51;
          }
          int32x4_t v64 = 0uLL;
          long long v65 = (uint8x8_t *)(v54 + 16 + v61);
          int32x4_t v66 = 0uLL;
          uint64_t v22 = (uint8x8_t *)(v43 + v57);
          uint64_t v23 = a3 & 0xFFFFFFE0;
          int32x4_t v67 = 0uLL;
          int32x4_t v68 = 0uLL;
          int32x4_t v69 = 0uLL;
          int32x4_t v70 = 0uLL;
          int32x4_t v71 = 0uLL;
          int32x4_t v72 = 0uLL;
          do
          {
            uint8x16_t v73 = *(uint8x16_t *)v22[-2].i8;
            uint8x16_t v74 = *(uint8x16_t *)v65[-2].i8;
            int16x8_t v75 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v73.i8, *(uint8x8_t *)v74.i8);
            int16x8_t v76 = (int16x8_t)vsubl_high_u8(v73, v74);
            int16x8_t v77 = (int16x8_t)vsubl_u8(*v22, *v65);
            int16x8_t v78 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v22->i8, *(uint8x16_t *)v65->i8);
            int32x4_t v68 = vmlal_high_s16(v68, v76, v76);
            int32x4_t v67 = vmlal_s16(v67, *(int16x4_t *)v76.i8, *(int16x4_t *)v76.i8);
            int32x4_t v66 = vmlal_high_s16(v66, v75, v75);
            int32x4_t v64 = vmlal_s16(v64, *(int16x4_t *)v75.i8, *(int16x4_t *)v75.i8);
            int32x4_t v72 = vmlal_high_s16(v72, v78, v78);
            int32x4_t v71 = vmlal_s16(v71, *(int16x4_t *)v78.i8, *(int16x4_t *)v78.i8);
            int32x4_t v70 = vmlal_high_s16(v70, v77, v77);
            int32x4_t v69 = vmlal_s16(v69, *(int16x4_t *)v77.i8, *(int16x4_t *)v77.i8);
            v22 += 4;
            v65 += 4;
            v23 -= 32;
          }
          while (v23);
          int v62 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v69, v64), vaddq_s32(v71, v67)), vaddq_s32(vaddq_s32(v70, v66), vaddq_s32(v72, v68))));
          if ((a3 & 0xFFFFFFE0) == (unint64_t)a3) {
            goto LABEL_53;
          }
          uint64_t v63 = a3 & 0xFFFFFFE0;
          uint64_t v23 = v63;
          if (v59) {
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v23 = 0;
          int v62 = 0;
        }
LABEL_51:
        uint64_t v22 = (uint8x8_t *)(a3 - v23);
        int32x4_t v87 = (unsigned __int8 *)(v54 + v23 + v61);
        v23 += v43;
        do
        {
          int v88 = *v87++;
          v62 += (*(unsigned __int8 *)(v23 + v41) - v88) * (*(unsigned __int8 *)(v23 + v41) - v88);
          ++v23;
          uint64_t v22 = (uint8x8_t *)((char *)v22 - 1);
        }
        while (v22);
LABEL_53:
        if (v58 > (float)v62)
        {
          *uint64_t v49 = v52;
          *uint64_t v50 = (float)v62;
          int v51 = v52;
          float v58 = (float)v62;
        }
        if (++v52 == v55)
        {
          uint64_t v42 = *(int *)&v45[4 * v51];
          *uint64_t v49 = *(_DWORD *)(v53 + 4 * v42);
          v49[1] = v42;
          goto LABEL_36;
        }
      }
    }
    uint64_t v117 = 0;
    uint64_t v118 = 4 * v139;
    do
    {
      while (1)
      {
        uint64_t v142 = *(void *)(v137[1] + 288 * v117);
        MEMORY[0x270FA5388](v22, v23);
        uint64_t v120 = (_DWORD *)(v138[1] + 8 * v117);
        uint64_t v121 = (_DWORD *)(v138[4] + 8 * v117);
        uint64_t v22 = (uint8x8_t *)rkd_knn_app((uint64_t)v140, (float *)&v142, 0, (uint64_t)&v128 - ((v118 + 15) & 0x7FFFFFFF0), v139, 0x7FFFFFFF, a9);
        if ((int)v22 >= 1) {
          break;
        }
        uint64_t v126 = v132;
        *uint64_t v120 = *(_DWORD *)(*(void *)(v132 + 8) + 8 * v117);
        *uint64_t v121 = *(_DWORD *)(*(void *)(v126 + 32) + 8 * v117);
        v120[1] = -1;
        v121[1] = -1082130432;
        if (++v117 == v141) {
          goto LABEL_80;
        }
      }
      int v122 = 0;
      int v123 = 0;
      *uint64_t v120 = 0;
      *uint64_t v121 = 1325400064;
      uint64_t v124 = *(void *)(v133 + 8);
      float v125 = 2147500000.0;
      do
      {
        if (v125 > 0.0)
        {
          *uint64_t v120 = v123;
          *uint64_t v121 = 0;
          float v125 = 0.0;
          int v122 = v123;
        }
        ++v123;
      }
      while (v22 != v123);
      uint64_t v119 = *(int *)((char *)&v128 + 4 * v122 - ((v118 + 15) & 0x7FFFFFFF0));
      *uint64_t v120 = *(_DWORD *)(v124 + 4 * v119);
      v120[1] = v119;
      ++v117;
    }
    while (v117 != v141);
  }
  else
  {
    uint64_t v90 = 0;
    uint64_t v91 = 4 * v139;
    do
    {
      while (1)
      {
        int32x4_t v93 = (uint64_t *)(v137[1] + 288 * v90);
        uint64_t v95 = *v93;
        uint8x16_t v94 = (int8x16_t *)(v93 + 4);
        uint64_t v142 = v95;
        MEMORY[0x270FA5388](v22, v23);
        uint8x16_t v96 = (char *)&v128 - ((v91 + 15) & 0x7FFFFFFF0);
        uint8x16_t v97 = (_DWORD *)(v138[1] + 8 * v90);
        int16x8_t v98 = (float *)(v138[4] + 8 * v90);
        uint64_t v22 = (uint8x8_t *)rkd_knn_app((uint64_t)v140, (float *)&v142, 0, (uint64_t)v96, v139, 0x7FFFFFFF, a9);
        if ((int)v22 > 0) {
          break;
        }
        uint64_t v114 = v132;
        *uint8x16_t v97 = *(_DWORD *)(*(void *)(v132 + 8) + 8 * v90);
        float *v98 = *(float *)(*(void *)(v114 + 32) + 8 * v90);
        v97[1] = -1;
        v98[1] = -1.0;
        if (++v90 == v141) {
          goto LABEL_80;
        }
      }
      *uint8x16_t v97 = 0;
      float *v98 = 2147500000.0;
      uint64_t v99 = *(void *)(v133 + 8);
      if (a3 <= 15)
      {
        int v100 = 0;
        uint64_t v115 = 0;
        float v116 = 2147500000.0;
        do
        {
          if (v116 > 0.0)
          {
            *uint8x16_t v97 = v115;
            float *v98 = 0.0;
            float v116 = 0.0;
            int v100 = v115;
          }
          ++v115;
        }
        while (v22 != v115);
      }
      else
      {
        int v100 = 0;
        uint64_t v101 = 0;
        uint64_t v102 = *(void *)(v131 + 200);
        float v103 = 2147500000.0;
        do
        {
          int16x8_t v104 = (int8x16_t *)(v102 + *(int *)(v99 + 4 * *(int *)&v96[4 * v101]) * (uint64_t)a3);
          int32x4_t v105 = 0uLL;
          int v106 = a3 >> 4;
          float v107 = v94;
          do
          {
            int8x16_t v108 = *v107++;
            int8x16_t v109 = v108;
            int8x16_t v110 = *v104++;
            int16x8_t v111 = (int16x8_t)vabdq_u16((uint16x8_t)vzip1q_s8(v109, (int8x16_t)0), (uint16x8_t)vzip1q_s8(v110, (int8x16_t)0));
            int16x8_t v112 = (int16x8_t)vabdq_u16((uint16x8_t)vzip2q_s8(v109, (int8x16_t)0), (uint16x8_t)vzip2q_s8(v110, (int8x16_t)0));
            int32x4_t v105 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v105, (uint16x8_t)vmulq_s16(v111, v111)), (uint16x8_t)vmulq_s16(v112, v112));
            --v106;
          }
          while (v106);
          float v113 = (float)vaddvq_s32(v105);
          if (v103 > v113)
          {
            *uint8x16_t v97 = v101;
            float *v98 = v113;
            int v100 = v101;
            float v103 = v113;
          }
          ++v101;
        }
        while (v101 != v22);
      }
      uint64_t v92 = *(int *)&v96[4 * v100];
      *uint8x16_t v97 = *(_DWORD *)(v99 + 4 * v92);
      v97[1] = v92;
      ++v90;
    }
    while (v90 != v141);
  }
LABEL_80:
  int8x16_t v127 = v140;
  if (v140)
  {
    free(*v140);
    free(v127[1]);
    free(v127[2]);
    free(v127);
  }
}

uint64_t vl_lbl_desc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int32x2_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  memset(v59, 0, sizeof(v59));
  int v58 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  memset(v53, 0, sizeof(v53));
  float v13 = atan2((float)(*(float *)(a3 + 4) - *(float *)(a3 + 8)), (float)((float)(*(float *)(a3 + 8) + *(float *)(a3 + 4)) + 0.0));
  double v14 = v13;
  if (v13 < 0.0 || v14 >= 1.57079633)
  {
    if (v14 < 1.57079633 || v14 >= 3.14159265)
    {
      if (v13 < 0.0 && v14 >= -1.57079633)
      {
        int v51 = 0;
        if (*(_DWORD *)(a6 + 212)) {
          goto LABEL_16;
        }
LABEL_10:
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a6 + 32));
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a6 + 16));
        clock_gettime(_CLOCK_MONOTONIC, (timespec *)a6);
        if (*(_DWORD *)(a5 + 540) != a4) {
          goto LABEL_17;
        }
        goto LABEL_23;
      }
      int v15 = v14 < -1.57079633 && v14 >= -3.14159265;
    }
    else
    {
      int v15 = 2;
    }
  }
  else
  {
    int v15 = 3;
  }
  int v51 = v15;
  if (!*(_DWORD *)(a6 + 212)) {
    goto LABEL_10;
  }
LABEL_16:
  *(void *)(a6 + 120) -= mach_absolute_time();
  if (*(_DWORD *)(a5 + 540) != a4)
  {
LABEL_17:
    printf("Info : ");
    printf("Load lbl model: %d", a4);
    putchar(10);
    int v16 = *(_DWORD *)(a5 + 536);
    if (v16 >= 1)
    {
      for (uint64_t i = 0; i < v16; ++i)
      {
        uint64_t v18 = *(lbl_feature2d_t **)(a5 + 8 * i);
        if (v18)
        {
          lbl_feature2d_t::~lbl_feature2d_t(v18);
          MEMORY[0x21D498F90]();
          *(void *)(a5 + 8 * i) = 0;
          int v16 = *(_DWORD *)(a5 + 536);
        }
      }
    }
    *(void *)a5 = 0;
    *(void *)(a5 + _Block_object_dispose(&STACK[0x220], 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(_DWORD *)(a5 + 536) = 1;
    operator new();
  }
LABEL_23:
  vl_timer_stop(a6);
  if (*(_DWORD *)(a5 + 536) != 1)
  {
    printf("%sError : ", (const char *)&unk_21BB738AE);
    printf("Multi-scale not supported on device");
    putchar(10);
  }
  uint64_t v19 = *(void *)a5;
  v63.__darwin_time_t tv_sec = 0;
  *(void *)&v63.uint64_t tv_usec = 0;
  gettimeofday(&v63, 0);
  __darwin_time_t tv_sec = v63.tv_sec;
  uint64_t tv_usec = v63.tv_usec;
  uint64_t v50 = a7;
  if (*(_DWORD *)(a7 + 212))
  {
    *(void *)(a7 + 120) -= mach_absolute_time();
  }
  else
  {
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a7 + 32));
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a7 + 16));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)a7);
  }
  lbl_par_ver((uint64_t)v53, a4);
  v63.__darwin_time_t tv_sec = 0;
  *(void *)&v63.uint64_t tv_usec = 0;
  gettimeofday(&v63, 0);
  __darwin_time_t v22 = v63.tv_usec + 1000000 * v63.tv_sec;
  printf("Info (toc) : ");
  printf("scale and rot");
  printf(": %f ms", (float)((float)(-1000000 * tv_sec - tv_usec + v22) / 1000.0));
  uint64_t v23 = putchar(10);
  int v24 = DWORD2(v56);
  uint64_t v25 = *(void *)a2;
  int v27 = *(_DWORD *)(a2 + 8);
  int v26 = *(_DWORD *)(a2 + 12);
  uint64_t v28 = (void *)MEMORY[0x21D499780](v23);
  lbl_feature2d_t::forward(v19, v25, v27, v26, v59, &v60, v51, v24);
  v63.__darwin_time_t tv_sec = 0;
  *(void *)&v63.uint64_t tv_usec = 0;
  gettimeofday(&v63, 0);
  __darwin_time_t v29 = v63.tv_usec + 1000000 * v63.tv_sec;
  printf("Info (toc) : ");
  printf("run_desc");
  printf(": %f ms", (float)((float)(v29 - v22) / 1000.0));
  putchar(10);
  long long v67 = 0u;
  long long v65 = 0u;
  memset(v66, 0, sizeof(v66));
  timeval v63 = (timeval)0;
  long long v64 = 0u;
  uint64_t v68 = (v62 / (int)v61);
  lbl_feature_extract_kpts_score_map((uint64_t)&v63, (uint64_t)v66, (uint64_t)&v64 + 8, (uint64_t)v59, 0, (uint64_t)&v60, 0, DWORD2(v57), DWORD1(v57), SHIDWORD(v54), v57, SDWORD2(v56), 0);
  vl_kpts2_to_kpt_list(&v63.tv_sec, a8);
  free(*(void **)&v63.tv_usec);
  free((void *)v65);
  free(*((void **)&v66[0] + 1));
  free((void *)v67);
  v63.__darwin_time_t tv_sec = 0;
  *(void *)&v63.uint64_t tv_usec = 0;
  gettimeofday(&v63, 0);
  __darwin_time_t v30 = v63.tv_usec + 1000000 * v63.tv_sec;
  printf("Info (toc) : ");
  printf("get_points");
  printf(": %f ms", (float)((float)(v30 - v29) / 1000.0));
  putchar(10);
  uint64_t v31 = *(void *)(v19 + 1576);
  if (v31)
  {
    BOOL v32 = (signed int *)(v31 + 408);
    uint64_t v33 = (signed int *)(v31 + 412);
    uint64_t v34 = *a8;
    uint64_t v35 = v50;
    if (*a8 < 1) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(v19 + 1568);
    BOOL v32 = (signed int *)(v36 + 412);
    uint64_t v33 = (signed int *)(v36 + 408);
    uint64_t v34 = *a8;
    uint64_t v35 = v50;
    if (*a8 < 1) {
      goto LABEL_44;
    }
  }
  signed int v37 = *v33;
  signed int v38 = *v32;
  if (v38 < v37) {
    __assert_rtn("_rotate_back_kpts90", "vl_kpts_lbl.c", 40, "width >= height");
  }
  int32x2_t v39 = (int32x2_t)__PAIR64__(v37, v38);
  v40.i64[0] = v38;
  v40.i64[1] = v37;
  float32x2_t v41 = vdiv_f32(vcvt_f32_s32(*(int32x2_t *)(a2 + 8)), vcvt_f32_f64(vcvtq_f64_u64(v40)));
  uint64_t v42 = (float32x2_t *)a8[1];
  if (v51)
  {
    float32x2_t v43 = vcvt_f32_s32(vadd_s32(v39, (int32x2_t)-1));
    if (v51 == 1)
    {
      do
      {
        v44.f32[0] = v43.f32[0] - v42->f32[1];
        v44.i32[1] = v42->i32[0];
        *uint64_t v42 = vmul_f32(v41, v44);
        v42 += 36;
        --v34;
      }
      while (v34);
    }
    else if (v51 == 2)
    {
      do
      {
        *uint64_t v42 = vmul_f32(v41, vsub_f32(v43, *v42));
        v42 += 36;
        --v34;
      }
      while (v34);
    }
    else
    {
      int16x8_t v45 = (float *)v42 + 1;
      do
      {
        float v46 = v41.f32[1] * (float)(v43.f32[1] - *(v45 - 1));
        *(v45 - 1) = v41.f32[0] * *v45;
        *int16x8_t v45 = v46;
        v45 += 72;
        --v34;
      }
      while (v34);
    }
  }
  else
  {
    do
    {
      *uint64_t v42 = vmul_f32(v41, *v42);
      v42 += 36;
      --v34;
    }
    while (v34);
  }
LABEL_44:
  v63.__darwin_time_t tv_sec = 0;
  *(void *)&v63.uint64_t tv_usec = 0;
  gettimeofday(&v63, 0);
  __darwin_time_t v47 = v63.tv_sec;
  uint64_t v48 = v63.tv_usec;
  printf("Info (toc) : ");
  printf("scale_and_rotate_inv");
  printf(": %f ms", (float)((float)(1000000 * v47 - v30 + v48) / 1000.0));
  putchar(10);
  return vl_timer_stop(v35);
}

void sub_21BB41230(_Unwind_Exception *a1)
{
  MEMORY[0x21D498F90](v1, 0x10B0C402CB8F842);
  _Unwind_Resume(a1);
}

void vl_gauss16(uint64_t *a1, unint64_t *a2, float a3)
{
  unsigned int v4 = malloc_type_calloc(*((int *)a1 + 2), 2uLL, 0x1000040BDFB0063uLL);
  float v5 = (float)(a3 * 6.0) + 1.0;
  double v6 = v5;
  BOOL v7 = v5 <= 0.0;
  double v8 = -0.5;
  if (!v7) {
    double v8 = 0.5;
  }
  unsigned int v9 = (int)(v8 + v6);
  uint64_t v10 = v9 | 1;
  uint64_t v11 = (float *)malloc_type_calloc((int)v10, 4uLL, 0x100004052888210uLL);
  uint64_t v12 = (uint16x4_t *)malloc_type_calloc((int)v10, 2uLL, 0x1000040BDFB0063uLL);
  v3521 = v4;
  int v3474 = v9;
  if ((v9 & 0x80000000) != 0)
  {
    __int16 v29 = 0;
  }
  else
  {
    float v13 = a3 * a3;
    if ((int)v10 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v10;
    }
    int v15 = -(v9 >> 1);
    float v16 = 0.0;
    int32x4_t v17 = v11;
    uint64_t v18 = v14;
    float v19 = -0.5 / v13;
    do
    {
      float v20 = expf((float)(v19 * (float)v15) * (float)v15);
      *v17++ = v20;
      float v16 = v16 + v20;
      ++v15;
      --v18;
    }
    while (v18);
    uint64_t v21 = v11;
    __darwin_time_t v22 = v12;
    uint64_t v23 = v14;
    do
    {
      float v24 = *v21++;
      float v25 = ldexpf(v24 / v16, 15);
      double v26 = v25;
      if (v25 <= 0.0) {
        double v27 = -0.5;
      }
      else {
        double v27 = 0.5;
      }
      v22->i16[0] = (int)(v27 + v26);
      __darwin_time_t v22 = (uint16x4_t *)((char *)v22 + 2);
      --v23;
    }
    while (v23);
    if (v14 >= 0x10)
    {
      uint64_t v28 = v14 & 0x7FFFFFF0;
      __darwin_time_t v30 = (uint16x8_t *)&v12[2];
      int32x4_t v31 = 0uLL;
      uint64_t v32 = v28;
      int32x4_t v33 = 0uLL;
      int32x4_t v34 = 0uLL;
      int32x4_t v35 = 0uLL;
      unsigned int v4 = v3521;
      do
      {
        uint16x8_t v36 = v30[-1];
        int32x4_t v33 = (int32x4_t)vaddw_high_u16((uint32x4_t)v33, v36);
        int32x4_t v31 = (int32x4_t)vaddw_u16((uint32x4_t)v31, *(uint16x4_t *)v36.i8);
        int32x4_t v35 = (int32x4_t)vaddw_high_u16((uint32x4_t)v35, *v30);
        int32x4_t v34 = (int32x4_t)vaddw_u16((uint32x4_t)v34, *(uint16x4_t *)v30->i8);
        v30 += 2;
        v32 -= 16;
      }
      while (v32);
      __int16 v29 = vaddvq_s32(vaddq_s32(vaddq_s32(v34, v31), vaddq_s32(v35, v33)));
    }
    else
    {
      uint64_t v28 = 0;
      __int16 v29 = 0;
      unsigned int v4 = v3521;
    }
    uint64_t v37 = v14 - v28;
    signed int v38 = (__int16 *)v12 + v28;
    do
    {
      __int16 v39 = *v38++;
      v29 += v39;
      --v37;
    }
    while (v37);
  }
  uint64_t v40 = (v3474 >> 1);
  v12->i16[(int)v40] = (v12->i16[(int)v40] - v29) ^ 0x8000;
  free(v11);
  switch((int)v40)
  {
    case 3:
      unint64_t v41 = *((unsigned int *)a1 + 2);
      if ((int)v41 < 1) {
        goto LABEL_920;
      }
      uint64_t v42 = (uint16x4_t *)*a1;
      uint64_t v43 = a1[2];
      uint64_t v44 = 2 * v43;
      unint64_t v45 = *a2;
      uint64_t v46 = 4 * v43;
      uint64_t v47 = 2 * v41;
      if (v41 < 8)
      {
        for (uint64_t i = 0; i != v41; ++i)
LABEL_378:
          *(_WORD *)(v45 + 2 * i) = (vaddvq_s32((int32x4_t)vmovl_u16(*v12)) * v42->u16[i]
                                   + v12[1].u16[0] * v42->u16[i + (unint64_t)v44 / 2]
                                   + v12[1].u16[1] * v42->u16[2 * v43 + i]
                                   + v12[1].u16[2] * v42->u16[3 * v43 + i]) >> 15;
        goto LABEL_379;
      }
      uint64_t i = 0;
      unint64_t v546 = v45 + v47;
      BOOL v548 = v45 < (unint64_t)v42 + 6 * v43 + v47 && (unint64_t)v42 + 6 * v43 < v546;
      BOOL v550 = v45 < (unint64_t)v42 + v46 + v47 && (unint64_t)v42 + v46 < v546;
      BOOL v552 = v45 < (unint64_t)v42 + v44 + v47 && (unint64_t)v42 + v44 < v546;
      BOOL v554 = v45 < (unint64_t)v42 + v47 && (unint64_t)v42 < v546;
      if ((unint64_t)v12 < v546 && v45 < (unint64_t)&v12[1] + 6) {
        goto LABEL_378;
      }
      if (v548) {
        goto LABEL_378;
      }
      if (v550) {
        goto LABEL_378;
      }
      if (v552) {
        goto LABEL_378;
      }
      if (v554) {
        goto LABEL_378;
      }
      float32x4_t v556 = (const __int16 *)v12;
      uint16x4_t v557 = (uint16x4_t)vld1_dup_s16(v556++);
      uint64_t i = v41 & 0xFFFFFFF8;
      uint16x4_t v558 = (uint16x4_t)vld1_dup_s16(v556);
      uint32x4_t v559 = vaddl_u16(v558, v557);
      float v560 = (const __int16 *)v12 + 2;
      uint16x4_t v561 = (uint16x4_t)vld1_dup_s16(v560);
      uint32x4_t v562 = vaddw_u16(v559, v561);
      float32x4_t v563 = (const __int16 *)v12 + 3;
      uint16x4_t v564 = (uint16x4_t)vld1_dup_s16(v563);
      int16x8_t v565 = (int16x8_t)vaddw_u16(v562, v564);
      float32x4_t v566 = (const __int16 *)&v12[1];
      uint16x4_t v567 = (uint16x4_t)vld1_dup_s16(v566);
      int16x8_t v568 = (int16x8_t)vmovl_u16(v567);
      float32x4_t v569 = (const __int16 *)&v12[1] + 1;
      uint16x4_t v570 = (uint16x4_t)vld1_dup_s16(v569);
      int16x8_t v571 = (int16x8_t)vmovl_u16(v570);
      float32x4_t v572 = (const __int16 *)&v12[1] + 2;
      uint16x4_t v573 = (uint16x4_t)vld1_dup_s16(v572);
      int16x8_t v574 = (int16x8_t)vmovl_u16(v573);
      uint16x8_t v575 = (uint16x8_t)vuzp1q_s16(v565, v568);
      uint16x4_t v576 = (uint16x4_t)vmovn_s32((int32x4_t)v568);
      uint16x8_t v577 = (uint16x8_t)vuzp1q_s16(v565, v571);
      uint16x4_t v578 = (uint16x4_t)vmovn_s32((int32x4_t)v571);
      uint16x8_t v579 = (uint16x8_t)vuzp1q_s16(v565, v574);
      uint16x4_t v580 = (uint16x4_t)vmovn_s32((int32x4_t)v574);
      uint64_t v581 = i;
      float32x4_t v582 = (int16x8_t *)*a2;
      float32x4_t v583 = (uint16x4_t *)*a1;
      do
      {
        *v582++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v565, (int32x4_t)vmovl_u16(*v583)), v576, *(uint16x4_t *)((char *)v583 + 2 * v43)), v578, *(uint16x4_t *)((char *)v583 + 4 * v43)), v580, *(uint16x4_t *)((char *)v583 + 6 * v43)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v565, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)v583->i8)), v575,
                                     *(uint16x8_t *)&v583->i8[2 * v43]),
                                   v577,
                                   *(uint16x8_t *)&v583->i8[4 * v43]),
                                 v579,
                                 *(uint16x8_t *)&v583->i8[6 * v43]),
                    0xFuLL);
        v583 += 2;
        v581 -= 8;
      }
      while (v581);
      if (i != v41) {
        goto LABEL_378;
      }
LABEL_379:
      unint64_t v584 = a2[2];
      uint64_t v585 = v43;
      if (v41 < 8)
      {
        uint64_t v586 = 0;
LABEL_600:
        uint64_t v873 = v41 - v586;
        float32x4_t v874 = (_WORD *)(v45 + 2 * (v586 + v584));
        float32x4_t v875 = (unsigned __int16 *)v42 + v586;
        do
        {
          float32x4_t v876 = &v875[(unint64_t)v44 / 2 + (unint64_t)v44 / 2];
          *v874++ = ((v12->u16[1] + v12->u16[0] + v12->u16[2]) * *v875
                   + v12->u16[3] * v875[v43]
                   + v12[1].u16[0] * *v876
                   + v12[1].u16[1] * v876[v43]
                   + v12[1].u16[2] * v876[v43 + v43]) >> 15;
          ++v875;
          --v873;
        }
        while (v873);
        goto LABEL_602;
      }
      uint64_t v586 = 0;
      unint64_t v830 = v45 + 2 * v584;
      unint64_t v831 = v45 + v47 + 2 * v584;
      BOOL v833 = v830 < (unint64_t)&v42[v585] + v47 && (unint64_t)&v42[v585] < v831;
      BOOL v835 = v830 < (unint64_t)v42 + 6 * v43 + v47 && (unint64_t)v42 + 6 * v43 < v831;
      BOOL v837 = v830 < (unint64_t)v42 + v46 + v47 && (unint64_t)v42 + v46 < v831;
      BOOL v839 = v830 < (unint64_t)v42 + v44 + v47 && (unint64_t)v42 + v44 < v831;
      BOOL v841 = v830 < (unint64_t)v42 + v47 && (unint64_t)v42 < v831;
      if ((unint64_t)v12 < v831 && v830 < (unint64_t)&v12[1] + 6) {
        goto LABEL_600;
      }
      if (v833) {
        goto LABEL_600;
      }
      if (v835) {
        goto LABEL_600;
      }
      if (v837) {
        goto LABEL_600;
      }
      if (v839) {
        goto LABEL_600;
      }
      if (v841) {
        goto LABEL_600;
      }
      uint64_t v843 = (const __int16 *)v12;
      uint16x4_t v844 = (uint16x4_t)vld1_dup_s16(v843++);
      uint16x4_t v845 = (uint16x4_t)vld1_dup_s16(v843);
      uint64_t v846 = (const __int16 *)v12 + 2;
      uint16x4_t v847 = (uint16x4_t)vld1_dup_s16(v846);
      int16x8_t v848 = (int16x8_t)vaddw_u16(vaddl_u16(v845, v844), v847);
      uint64_t v849 = (const __int16 *)v12 + 3;
      uint16x4_t v850 = (uint16x4_t)vld1_dup_s16(v849);
      int16x8_t v851 = (int16x8_t)vmovl_u16(v850);
      unsigned int v852 = (const __int16 *)&v12[1];
      uint16x4_t v853 = (uint16x4_t)vld1_dup_s16(v852);
      int v854 = (const __int16 *)&v12[1] + 1;
      uint16x4_t v855 = (uint16x4_t)vld1_dup_s16(v854);
      int16x8_t v856 = (int16x8_t)vmovl_u16(v853);
      int16x8_t v857 = (int16x8_t)vmovl_u16(v855);
      float32x4_t v858 = (const __int16 *)&v12[1] + 2;
      uint16x4_t v859 = (uint16x4_t)vld1_dup_s16(v858);
      int16x8_t v860 = (int16x8_t)vmovl_u16(v859);
      uint16x8_t v861 = (uint16x8_t)vuzp1q_s16(v848, v851);
      uint16x4_t v862 = (uint16x4_t)vmovn_s32((int32x4_t)v851);
      uint64_t v586 = v41 & 0xFFFFFFF8;
      uint64_t v863 = (int16x8_t *)(v45 + 2 * v584);
      uint16x8_t v864 = (uint16x8_t)vuzp1q_s16(v848, v856);
      uint16x4_t v865 = (uint16x4_t)vmovn_s32((int32x4_t)v856);
      uint16x8_t v866 = (uint16x8_t)vuzp1q_s16(v848, v857);
      uint16x4_t v867 = (uint16x4_t)vmovn_s32((int32x4_t)v857);
      uint16x8_t v868 = (uint16x8_t)vuzp1q_s16(v848, v860);
      uint16x4_t v869 = (uint16x4_t)vmovn_s32((int32x4_t)v860);
      uint64_t v870 = v586;
      uint64_t v871 = v42;
      do
      {
        float32x4_t v872 = (uint16x4_t *)((char *)v871 + v44 + v44);
        *v863++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v848, (int32x4_t)vmovl_u16(*v871)), v862, *(uint16x4_t *)((char *)v871 + 2 * v43)), v865, *v872), v867, *(uint16x4_t *)((char *)v872 + v44)), v869, *(uint16x4_t *)((char *)v872 + 2 * v43 + v44)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(
                                       (uint32x4_t)vmulq_s32((int32x4_t)v848, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)v871->i8)), v861, *(uint16x8_t *)&v871->i8[2 * v43]), v864, *(uint16x8_t *)v872->i8), v866, *(uint16x8_t *)&v872->i8[v44]), v868, *(uint16x8_t *)&v872->i8[2 * v43 + v44]), 0xFuLL);
        v871 += 2;
        v870 -= 8;
      }
      while (v870);
      if (v586 != v41) {
        goto LABEL_600;
      }
LABEL_602:
      if (v41 < 8)
      {
        uint64_t v877 = 0;
LABEL_918:
        uint64_t v1290 = v41 - v877;
        long long v1291 = (_WORD *)(v45 + 2 * v877 + 4 * v584);
        long long v1292 = (unsigned __int16 *)v42 + v877;
        do
        {
          long long v1293 = &v1292[(unint64_t)v44 / 2 + (unint64_t)v44 / 2];
          *v1291++ = ((v12->u16[1] + v12->u16[0]) * *v1292
                    + v12->u16[2] * v1292[(unint64_t)v44 / 2]
                    + v12->u16[3] * *v1293
                    + v12[1].u16[0] * v1293[(unint64_t)v44 / 2]
                    + v12[1].u16[1] * v1293[(unint64_t)v44 / 2 + (unint64_t)v44 / 2]
                    + v12[1].u16[2]
                    * v1293[(unint64_t)v44 / 2
                                        + (unint64_t)v44 / 2
                                        + (unint64_t)v44 / 2]) >> 15;
          ++v1292;
          --v1290;
        }
        while (v1290);
        goto LABEL_920;
      }
      uint64_t v877 = 0;
      unint64_t v1227 = v45 + 4 * v584;
      unint64_t v1228 = v45 + 4 * v584 + v47;
      long long v1229 = (char *)v42 + 10 * v43;
      unint64_t v1230 = (unint64_t)v42 + 10 * v43 + v47;
      long long v1231 = &v42[v585];
      unint64_t v1232 = (unint64_t)&v42[v585] + v47;
      uint64_t v1233 = 6 * v43;
      long long v1234 = (char *)v42 + v1233;
      unint64_t v1235 = (unint64_t)v42 + v1233 + v47;
      long long v1236 = (char *)v42 + v46;
      unint64_t v1237 = (unint64_t)v42 + v46 + v47;
      BOOL v145 = v1227 >= v1230;
      unint64_t v1238 = (unint64_t)v42 + v44 + v47;
      unint64_t v1239 = (unint64_t)v42 + v47;
      char v1241 = !v145 && (unint64_t)v1229 < v1228;
      BOOL v1243 = v1227 < v1232 && (unint64_t)v1231 < v1228;
      BOOL v1245 = v1227 < v1235 && (unint64_t)v1234 < v1228;
      BOOL v1247 = v1227 < v1237 && (unint64_t)v1236 < v1228;
      BOOL v1249 = v1227 < v1238 && (unint64_t)v42 + v44 < v1228;
      BOOL v1251 = v1227 < v1239 && (unint64_t)v42 < v1228;
      if ((unint64_t)v12 < v1228 && v1227 < (unint64_t)&v12[1] + 6) {
        goto LABEL_918;
      }
      if (v1241) {
        goto LABEL_918;
      }
      if (v1243) {
        goto LABEL_918;
      }
      if (v1245) {
        goto LABEL_918;
      }
      if (v1247) {
        goto LABEL_918;
      }
      if (v1249) {
        goto LABEL_918;
      }
      if (v1251) {
        goto LABEL_918;
      }
      long long v1253 = (const __int16 *)v12;
      uint16x4_t v1254 = (uint16x4_t)vld1_dup_s16(v1253++);
      uint16x4_t v1255 = (uint16x4_t)vld1_dup_s16(v1253);
      int16x8_t v1256 = (int16x8_t)vaddl_u16(v1255, v1254);
      long long v1257 = (const __int16 *)v12 + 2;
      uint16x4_t v1258 = (uint16x4_t)vld1_dup_s16(v1257);
      int16x8_t v1259 = (int16x8_t)vmovl_u16(v1258);
      long long v1260 = (const __int16 *)v12 + 3;
      uint16x4_t v1261 = (uint16x4_t)vld1_dup_s16(v1260);
      long long v1262 = (const __int16 *)&v12[1];
      uint16x4_t v1263 = (uint16x4_t)vld1_dup_s16(v1262);
      int16x8_t v1264 = (int16x8_t)vmovl_u16(v1261);
      int16x8_t v1265 = (int16x8_t)vmovl_u16(v1263);
      v1266 = (const __int16 *)&v12[1] + 1;
      uint16x4_t v1267 = (uint16x4_t)vld1_dup_s16(v1266);
      int16x8_t v1268 = (int16x8_t)vmovl_u16(v1267);
      unint64_t v1269 = (const __int16 *)&v12[1] + 2;
      uint16x4_t v1270 = (uint16x4_t)vld1_dup_s16(v1269);
      int16x8_t v1271 = (int16x8_t)vmovl_u16(v1270);
      uint16x8_t v1272 = (uint16x8_t)vuzp1q_s16(v1256, v1259);
      uint16x4_t v1273 = (uint16x4_t)vmovn_s32((int32x4_t)v1259);
      uint64_t v877 = v41 & 0xFFFFFFF8;
      uint16x8_t v1274 = (uint16x8_t)vuzp1q_s16(v1256, v1264);
      uint64_t v1275 = (int16x8_t *)(v45 + 4 * v584);
      uint16x4_t v1276 = (uint16x4_t)vmovn_s32((int32x4_t)v1264);
      uint16x8_t v1277 = (uint16x8_t)vuzp1q_s16(v1256, v1265);
      uint16x4_t v1278 = (uint16x4_t)vmovn_s32((int32x4_t)v1265);
      uint16x8_t v1279 = (uint16x8_t)vuzp1q_s16(v1256, v1268);
      uint16x4_t v1280 = (uint16x4_t)vmovn_s32((int32x4_t)v1268);
      uint16x8_t v1281 = (uint16x8_t)vuzp1q_s16(v1256, v1271);
      uint16x4_t v1282 = (uint16x4_t)vmovn_s32((int32x4_t)v1271);
      uint64_t v1283 = v877;
      long long v1284 = (uint16x8_t *)v42;
      do
      {
        uint16x8_t v1285 = *(uint16x8_t *)((char *)v1284 + v44);
        long long v1286 = (uint16x8_t *)((char *)v1284 + v44 + v44);
        uint32x4_t v1287 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1256, (int32x4_t)vmovl_high_u16(*v1284)), v1272, v1285), v1274, *v1286);
        uint32x4_t v1288 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1256, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1284->i8)), v1273, *(uint16x4_t *)v1285.i8), v1276, *(uint16x4_t *)v1286->i8);
        long long v1289 = (uint16x4_t *)&v1286->i8[v44];
        *v1275++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1288, v1278, *v1289), v1280, *(uint16x4_t *)((char *)v1289 + v44)), v1282, *(uint16x4_t *)((char *)v1289 + v44 + v44)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1287, v1277, *(uint16x8_t *)v1289->i8), v1279, *(uint16x8_t *)&v1289->i8[v44]), v1281, *(uint16x8_t *)&v1289->i8[v44 + v44]), 0xFuLL);
        ++v1284;
        v1283 -= 8;
      }
      while (v1283);
      if (v877 != v41) {
        goto LABEL_918;
      }
LABEL_920:
      long long v1294 = a1;
      uint64_t v3487 = *((int *)a1 + 3);
      unint64_t v3520 = v41;
      if ((int)v3487 > 6)
      {
        uint64_t v1295 = 0;
        uint64_t v1296 = 0;
        uint64_t v1297 = (v3487 - 6);
        uint64_t v3502 = 2 * v41;
        uint64_t v3490 = v41 & 0xFFFFFFF8;
        uint64_t v1298 = 3;
        uint64_t v1299 = 6;
        while ((int)v41 <= 0)
        {
          uint64_t v1300 = v1296 + 1;
LABEL_923:
          ++v1298;
          ++v1295;
          v1299 += 2;
          uint64_t v1296 = v1300;
          if (v1300 == v1297) {
            goto LABEL_989;
          }
        }
        uint64_t v1301 = *v1294;
        uint64_t v1302 = v1294[2];
        unint64_t v1303 = *a2;
        unint64_t v1304 = a2[2];
        uint64_t v1300 = v1296 + 1;
        uint64_t v1305 = v1296 + 6;
        uint64_t v1306 = 2 * v1302;
        if (v41 >= 8)
        {
          uint64_t v1307 = 0;
          uint64_t v1308 = v1296 + 5;
          uint64_t v1309 = v1296 + 4;
          uint64_t v1310 = v1296 + 3;
          uint64_t v1311 = v1296 + 2;
          unint64_t v1312 = v1303 + v1304 * (2 * v1295 + 6);
          unint64_t v1313 = v1312 + v3502;
          uint64_t v1314 = 2 * v1296 * v1302;
          uint64_t v1315 = v1306 * v1311;
          unint64_t v1316 = v1301 + v1315;
          unint64_t v1317 = v1301 + v3502 + v1315;
          uint64_t v1318 = v1306 * v1310;
          unint64_t v1319 = v1301 + v1318;
          unint64_t v1320 = v1301 + v3502 + v1318;
          uint64_t v1321 = v1306 * v1309;
          unint64_t v1322 = v1301 + v1321;
          unint64_t v1323 = v1301 + v3502 + v1321;
          uint64_t v1324 = v1306 * v1308;
          unint64_t v1325 = v1301 + v1324;
          unint64_t v1326 = v1301 + v3502 + v1324;
          BOOL v1328 = v1312 < v1301 + v3502 + v1314 && v1301 + v1314 < v1313;
          BOOL v1330 = v1312 < v1301 + v3502 + v1306 * v1300 && v1301 + v1306 * v1300 < v1313;
          BOOL v1332 = v1312 < v1317 && v1316 < v1313;
          BOOL v1334 = v1312 < v1320 && v1319 < v1313;
          BOOL v1336 = v1312 < v1323 && v1322 < v1313;
          BOOL v1338 = v1312 < v1326 && v1325 < v1313;
          BOOL v1340 = v1312 < v1301 + v3502 + v1306 * v1305 && v1301 + v1306 * v1305 < v1313;
          if ((unint64_t)v12 >= v1313 || v1312 >= (unint64_t)&v12[1] + 6)
          {
            long long v1294 = a1;
            unint64_t v41 = v3520;
            if (!v1328 && !v1330 && !v1332 && !v1334 && !v1336 && !v1338)
            {
              uint64_t v1297 = (v3487 - 6);
              if (!v1340)
              {
                long long v1342 = (const __int16 *)&v12[1] + 2;
                uint16x4_t v1343 = (uint16x4_t)vld1_dup_s16(v1342);
                int16x8_t v1344 = (int16x8_t)vmovl_u16(v1343);
                long long v1345 = (const __int16 *)&v12[1] + 1;
                uint16x4_t v1346 = (uint16x4_t)vld1_dup_s16(v1345);
                int16x8_t v1347 = (int16x8_t)vmovl_u16(v1346);
                long long v1348 = (const __int16 *)&v12[1];
                uint16x4_t v1349 = (uint16x4_t)vld1_dup_s16(v1348);
                long long v1350 = (const __int16 *)v12 + 3;
                uint16x4_t v1351 = (uint16x4_t)vld1_dup_s16(v1350);
                int16x8_t v1352 = (int16x8_t)vmovl_u16(v1349);
                int16x8_t v1353 = (int16x8_t)vmovl_u16(v1351);
                long long v1354 = (const __int16 *)v12 + 2;
                uint16x4_t v1355 = (uint16x4_t)vld1_dup_s16(v1354);
                int16x8_t v1356 = (int16x8_t)vmovl_u16(v1355);
                long long v1357 = (const __int16 *)v12;
                uint16x4_t v1358 = (uint16x4_t)vld1_dup_s16(v1357++);
                uint16x4_t v1359 = (uint16x4_t)vld1_dup_s16(v1357);
                int16x8_t v1360 = (int16x8_t)vmovl_u16(v1359);
                int16x8_t v1361 = (int16x8_t)vmovl_u16(v1358);
                long long v1362 = (uint16x4_t *)(v1301 + v1306 * v1305);
                long long v1363 = (int16x8_t *)(v1303 + v1304 * v1299);
                uint64_t v1364 = v3490;
                do
                {
                  long long v1365 = (uint16x8_t *)((char *)v1362 - v1306 - v1306);
                  uint16x8_t v1366 = *v1365;
                  long long v1367 = (uint16x8_t *)((char *)v1365 - v1306);
                  uint16x8_t v1368 = *v1367;
                  long long v1369 = (uint16x8_t *)((char *)v1367 - v1306);
                  uint16x8_t v1370 = *v1369;
                  long long v1371 = (uint16x4_t *)((char *)v1369 - v1306);
                  *v1363++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v1362 - v1306), (uint16x4_t)vmovn_s32((int32x4_t)v1347)), *v1362, (uint16x4_t)vmovn_s32((int32x4_t)v1344)), *(uint16x4_t *)v1366.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1352)), *(uint16x4_t *)v1368.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1353)), *(uint16x4_t *)v1370.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1356)), *v1371,
                                                (uint16x4_t)vmovn_s32((int32x4_t)v1360)),
                                              *(uint16x4_t *)((char *)v1371 - v1306),
                                              (uint16x4_t)vmovn_s32((int32x4_t)v1361)),
                                 0xFuLL),
                               (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v1362->i8[-v1306], (uint16x8_t)vuzp1q_s16(v1344, v1347)), *(uint16x8_t *)v1362->i8, (uint16x8_t)vuzp1q_s16(v1344, v1344)), v1366, (uint16x8_t)vuzp1q_s16(v1344, v1352)), v1368, (uint16x8_t)vuzp1q_s16(v1344, v1353)), v1370, (uint16x8_t)vuzp1q_s16(v1344, v1356)), *(uint16x8_t *)v1371->i8, (uint16x8_t)vuzp1q_s16(v1344, v1360)), *(uint16x8_t *)&v1371->i8[-v1306],
                                            (uint16x8_t)vuzp1q_s16(v1344, v1361)),
                               0xFuLL);
                  v1362 += 2;
                  v1364 -= 8;
                }
                while (v1364);
                uint64_t v1307 = v3490;
                if (v3490 == v3520) {
                  goto LABEL_923;
                }
              }
              goto LABEL_986;
            }
          }
          else
          {
            unint64_t v41 = v3520;
          }
          uint64_t v1297 = (v3487 - 6);
        }
        else
        {
          uint64_t v1307 = 0;
        }
LABEL_986:
        uint64_t v1372 = v41 - v1307;
        long long v1373 = (_WORD *)(v1303 + 2 * (v1307 + v1304 * v1298));
        long long v1374 = (unsigned __int16 *)(v1301 + v1306 * v1305 + 2 * v1307);
        uint64_t v1375 = -v1306;
        do
        {
          long long v1376 = (unsigned __int16 *)((char *)v1374 + v1375 + v1375);
          int v1377 = *v1376;
          long long v1378 = (unsigned __int16 *)((char *)v1376 + v1375);
          int v1379 = *v1378;
          long long v1380 = (unsigned __int16 *)((char *)v1378 + v1375);
          *v1373++ = (*v1374 * v12[1].u16[2]
                    + *(unsigned __int16 *)((char *)v1374 + v1375) * v12[1].u16[1]
                    + v1377 * v12[1].u16[0]
                    + v1379 * v12->u16[3]
                    + *v1380 * v12->u16[2]
                    + *(unsigned __int16 *)((char *)v1380 + v1375) * v12->u16[1]
                    + *(unsigned __int16 *)((char *)v1380 + v1375 + v1375) * v12->u16[0]) >> 15;
          ++v1374;
          --v1372;
        }
        while (v1372);
        long long v1294 = a1;
        goto LABEL_923;
      }
LABEL_989:
      if ((int)v41 < 1) {
        goto LABEL_2246;
      }
      uint64_t v1381 = v3487 - 1;
      uint64_t v1382 = (int)v3487 - 2;
      uint64_t v1383 = (int)v3487 - 3;
      long long v1384 = (uint16x4_t *)*a1;
      uint64_t v1385 = a1[2];
      uint64_t v1386 = v1385 * (v3487 - 1);
      unint64_t v1387 = *a2;
      unint64_t v3509 = a2[2];
      unint64_t v1388 = v3509 * v1383;
      if ((int)v3487 + 1 >= (int)v3487 - 3)
      {
        uint64_t v1682 = 4 * v1385;
        if (v1383 + 3 < v1381)
        {
          uint64_t v1683 = 0;
          uint64_t v1684 = v1383 - 3;
          if (v1383 - 3 >= v1382) {
            uint64_t v1684 = (int)v3487 - 2;
          }
          unint64_t v1685 = v1382 - v1684 + 1;
          v1686 = (char *)v1384 + 2 * v1385 * v1382;
          v1687 = (char *)v1384 + 2 * v1385 * (v1382 - 1);
          while (1)
          {
            if (v1685 >= 2)
            {
              uint64_t v1691 = 0;
              int v1692 = 0;
              int v1693 = 0;
              unint64_t v1694 = v1685 & 0xFFFFFFFFFFFFFFFELL;
              v1695 = (unsigned __int16 *)v12 + 1;
              do
              {
                int v1696 = *(v1695 - 1);
                int v1697 = *v1695;
                v1695 += 2;
                v1692 += v1696 * *(unsigned __int16 *)&v1686[v1691];
                v1693 += v1697 * *(unsigned __int16 *)&v1687[v1691];
                v1691 -= v1682;
                v1694 -= 2;
              }
              while (v1694);
              unsigned int v1689 = v1693 + v1692;
              uint64_t v1690 = v1382 - (v1685 & 0xFFFFFFFFFFFFFFFELL);
              unint64_t v1688 = v1685 & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v41 = v3520;
              if (v1685 == (v1685 & 0xFFFFFFFFFFFFFFFELL)) {
                goto LABEL_1222;
              }
            }
            else
            {
              unint64_t v1688 = 0;
              unsigned int v1689 = 0;
              uint64_t v1690 = (int)v3487 - 2;
            }
            uint64_t v1698 = v1690 + 1;
            v1699 = (unsigned __int16 *)v1384 + v1683 + v1385 * v1690;
            v1700 = (unsigned __int16 *)v12 + v1688;
            do
            {
              int v1701 = *v1700++;
              v1689 += v1701 * *v1699;
              --v1698;
              v1699 -= v1385;
            }
            while (v1698 >= v1383 - 2);
LABEL_1222:
            *(_WORD *)(v1387 + 2 * (v1683 + v1388)) = v1689 >> 15;
            ++v1683;
            v1686 += 2;
            v1687 += 2;
            if (v1683 == v41) {
              goto LABEL_2183;
            }
          }
        }
        uint64_t v3236 = 0;
        uint64_t v3237 = v1383 - 3;
        if (v1383 - 3 >= v1382) {
          uint64_t v3237 = (int)v3487 - 2;
        }
        unint64_t v3238 = v1382 - v3237 + 1;
        v3239 = (char *)v1384 + 2 * v1385 * v1382;
        v3240 = (char *)v1384 + 2 * v1385 * (v1382 - 1);
        while (1)
        {
          unsigned int v3241 = (v12->u16[1] + v12->u16[0]) * v1384->u16[v3236 + v1386];
          if (v3238 >= 2)
          {
            uint64_t v3244 = 0;
            int v3245 = 0;
            unint64_t v3246 = v3238 & 0xFFFFFFFFFFFFFFFELL;
            v3247 = (unsigned __int16 *)v12 + 3;
            do
            {
              int v3248 = *(v3247 - 1);
              int v3249 = *v3247;
              v3247 += 2;
              v3241 += v3248 * *(unsigned __int16 *)&v3239[v3244];
              v3245 += v3249 * *(unsigned __int16 *)&v3240[v3244];
              v3244 -= v1682;
              v3246 -= 2;
            }
            while (v3246);
            v3241 += v3245;
            uint64_t v3242 = v1382 - (v3238 & 0xFFFFFFFFFFFFFFFELL);
            unint64_t v3243 = (v3238 & 0xFFFFFFFFFFFFFFFELL) + 2;
            unint64_t v41 = v3520;
            if (v3238 == (v3238 & 0xFFFFFFFFFFFFFFFELL)) {
              goto LABEL_2201;
            }
          }
          else
          {
            uint64_t v3242 = (int)v3487 - 2;
            unint64_t v3243 = 2;
          }
          uint64_t v3250 = v3242 + 1;
          v3251 = (unsigned __int16 *)v1384 + v3236 + v1385 * v3242;
          v3252 = (unsigned __int16 *)v12 + v3243;
          do
          {
            int v3253 = *v3252++;
            v3241 += v3253 * *v3251;
            --v3250;
            v3251 -= v1385;
          }
          while (v3250 >= v1383 - 2);
LABEL_2201:
          *(_WORD *)(v1387 + 2 * (v3236 + v1388)) = v3241 >> 15;
          ++v3236;
          v3239 += 2;
          v3240 += 2;
          if (v3236 == v41) {
            goto LABEL_2183;
          }
        }
      }
      if (v41 < 0x10)
      {
        unint64_t v1389 = 0;
LABEL_2181:
        unint64_t v3212 = v41 - v1389;
        v3213 = (_WORD *)(v1387 + 2 * (v1389 + v1388));
        v3214 = (unsigned __int16 *)v1384 + v1389 + v1386;
        do
        {
          int v3215 = *v3214++;
          *v3213++ = ((v12->u16[1] + v12->u16[0]) * v3215) >> 15;
          --v3212;
        }
        while (v3212);
        goto LABEL_2183;
      }
      unint64_t v1389 = 0;
      unint64_t v3199 = v1387 + 2 * v1388;
      unint64_t v3200 = v1387 + 2 * v41 + 2 * v1388;
      BOOL v3202 = v3199 < (unint64_t)v1384 + 2 * v41 + 2 * v1386 && (unint64_t)v1384 + 2 * v1386 < v3200;
      if ((unint64_t)v12 < v3200 && v3199 < (unint64_t)v12 + 4) {
        goto LABEL_2181;
      }
      if (v3202) {
        goto LABEL_2181;
      }
      unint64_t v1389 = v41 & 0x7FFFFFF0;
      v3204 = (const __int16 *)v12;
      uint16x4_t v3205 = (uint16x4_t)vld1_dup_s16(v3204++);
      uint16x4_t v3206 = (uint16x4_t)vld1_dup_s16(v3204);
      int32x4_t v3207 = (int32x4_t)vaddl_u16(v3206, v3205);
      v3208 = (uint16x4_t *)((char *)v1384 + 2 * v1386 + 16);
      v3209 = (int16x8_t *)(v1387 + 2 * v1388 + 16);
      uint64_t v3210 = v41 & 0xFFFFFFF0;
      do
      {
        int16x8_t v3211 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v3207, (int32x4_t)vmovl_u16(*v3208)), 0xFuLL), vmulq_s32(v3207, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)v3208->i8)), 0xFuLL);
        v3209[-1] = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v3207, (int32x4_t)vmovl_u16(v3208[-2])), 0xFuLL), vmulq_s32(v3207, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)v3208[-2].i8)), 0xFuLL);
        int16x8_t *v3209 = v3211;
        v3208 += 4;
        v3209 += 2;
        v3210 -= 16;
      }
      while (v3210);
      if (v41 != v1389) {
        goto LABEL_2181;
      }
LABEL_2183:
      if (v1383 + 1 < v3487)
      {
        uint64_t v3216 = v3509 * (v1383 + 1);
        if (v1383 + 4 < v1381)
        {
          uint64_t v3217 = 0;
          uint64_t v3218 = v1383 - 2;
          if (v1383 - 2 >= v1382) {
            uint64_t v3218 = (int)v3487 - 2;
          }
          unint64_t v3219 = v1382 - v3218 + 1;
          v3220 = (char *)v1384 + 2 * v1385 * v1382;
          v3221 = (char *)v1384 + 2 * v1385 * (v1382 - 1);
          while (1)
          {
            if (v3219 >= 2)
            {
              uint64_t v3225 = 0;
              int v3226 = 0;
              int v3227 = 0;
              unint64_t v3228 = v3219 & 0xFFFFFFFFFFFFFFFELL;
              v3229 = (unsigned __int16 *)v12 + 1;
              do
              {
                int v3230 = *(v3229 - 1);
                int v3231 = *v3229;
                v3229 += 2;
                v3226 += v3230 * *(unsigned __int16 *)&v3220[v3225];
                v3227 += v3231 * *(unsigned __int16 *)&v3221[v3225];
                v3225 -= 4 * v1385;
                v3228 -= 2;
              }
              while (v3228);
              unsigned int v3223 = v3227 + v3226;
              uint64_t v3224 = v1382 - (v3219 & 0xFFFFFFFFFFFFFFFELL);
              unint64_t v3222 = v3219 & 0xFFFFFFFFFFFFFFFELL;
              if (v3219 == (v3219 & 0xFFFFFFFFFFFFFFFELL)) {
                goto LABEL_2188;
              }
            }
            else
            {
              unint64_t v3222 = 0;
              unsigned int v3223 = 0;
              uint64_t v3224 = (int)v3487 - 2;
            }
            v3232 = (unsigned __int16 *)v1384 + v3217 + v1385 * v3224;
            v3233 = (unsigned __int16 *)v12 + v3222;
            unint64_t v3234 = ~v1382 + v3218 + v3222;
            do
            {
              int v3235 = *v3233++;
              v3223 += v3235 * *v3232;
              v3232 -= v1385;
              BOOL v145 = __CFADD__(v3234++, 1);
            }
            while (!v145);
LABEL_2188:
            *(_WORD *)(v1387 + 2 * (v3217 + v3216)) = v3223 >> 15;
            ++v3217;
            v3220 += 2;
            v3221 += 2;
            if (v3217 == v41) {
              goto LABEL_2223;
            }
          }
        }
        uint64_t v3254 = 0;
        uint64_t v3255 = v1383 - 2;
        if (v1383 - 2 >= v1382) {
          uint64_t v3255 = (int)v3487 - 2;
        }
        unint64_t v3256 = v1382 - v3255 + 1;
        v3257 = (char *)v1384 + 2 * v1385 * v1382;
        v3258 = (char *)v1384 + 2 * v1385 * (v1382 - 1);
        while (1)
        {
          unsigned int v3259 = (v12->u16[1] + v12->u16[0] + v12->u16[2]) * v1384->u16[v3254 + v1386];
          if (v3256 >= 2)
          {
            uint64_t v3262 = 0;
            int v3263 = 0;
            unint64_t v3264 = v3256 & 0xFFFFFFFFFFFFFFFELL;
            v3265 = v12 + 1;
            do
            {
              int v3266 = v3265[-1].u16[3];
              int v3267 = v3265->u16[0];
              v3265 = (uint16x4_t *)((char *)v3265 + 4);
              v3259 += v3266 * *(unsigned __int16 *)&v3257[v3262];
              v3263 += v3267 * *(unsigned __int16 *)&v3258[v3262];
              v3262 -= 4 * v1385;
              v3264 -= 2;
            }
            while (v3264);
            v3259 += v3263;
            uint64_t v3260 = v1382 - (v3256 & 0xFFFFFFFFFFFFFFFELL);
            unint64_t v3261 = (v3256 & 0xFFFFFFFFFFFFFFFELL) + 3;
            unint64_t v41 = v3520;
            if (v3256 == (v3256 & 0xFFFFFFFFFFFFFFFELL)) {
              goto LABEL_2213;
            }
          }
          else
          {
            uint64_t v3260 = (int)v3487 - 2;
            unint64_t v3261 = 3;
          }
          v3268 = (unsigned __int16 *)v1384 + v3254 + v1385 * v3260;
          v3269 = (unsigned __int16 *)v12 + v3261;
          unint64_t v3270 = v3255 - v1382 - 4 + v3261;
          do
          {
            int v3271 = *v3269++;
            v3259 += v3271 * *v3268;
            v3268 -= v1385;
            BOOL v145 = __CFADD__(v3270++, 1);
          }
          while (!v145);
LABEL_2213:
          *(_WORD *)(v1387 + 2 * (v3254 + v3216)) = v3259 >> 15;
          ++v3254;
          v3257 += 2;
          v3258 += 2;
          if (v3254 == v41)
          {
LABEL_2223:
            uint64_t v3272 = v3509 * (v1383 + 2);
            uint64_t v3273 = v1383 - 1;
            if (v1383 - 1 >= v1382) {
              uint64_t v3273 = (int)v3487 - 2;
            }
            unint64_t v3274 = v1382 - v3273 + 1;
            unint64_t v3275 = v3274 & 0xFFFFFFFFFFFFFFFELL;
            if (v1383 + 5 < v1381)
            {
              uint64_t v3276 = 0;
              v3277 = (char *)v1384 + 2 * v1385 * v1382;
              v3278 = (char *)v1384 + 2 * v1385 * (v1382 - 1);
              while (1)
              {
                if (v3274 >= 2)
                {
                  uint64_t v3282 = 0;
                  int v3283 = 0;
                  int v3284 = 0;
                  unint64_t v3285 = v3274 & 0xFFFFFFFFFFFFFFFELL;
                  v3286 = (unsigned __int16 *)v12 + 1;
                  do
                  {
                    int v3287 = *(v3286 - 1);
                    int v3288 = *v3286;
                    v3286 += 2;
                    v3283 += v3287 * *(unsigned __int16 *)&v3277[v3282];
                    v3284 += v3288 * *(unsigned __int16 *)&v3278[v3282];
                    v3282 -= 4 * v1385;
                    v3285 -= 2;
                  }
                  while (v3285);
                  unsigned int v3280 = v3284 + v3283;
                  uint64_t v3281 = v1382 - (v3274 & 0xFFFFFFFFFFFFFFFELL);
                  unint64_t v3279 = v3274 & 0xFFFFFFFFFFFFFFFELL;
                  if (v3274 == v3275) {
                    goto LABEL_2227;
                  }
                }
                else
                {
                  unint64_t v3279 = 0;
                  unsigned int v3280 = 0;
                  uint64_t v3281 = (int)v3487 - 2;
                }
                uint64_t v3289 = v3281 + 1;
                v3290 = (unsigned __int16 *)v1384 + v3276 + v1385 * v3281;
                v3291 = (unsigned __int16 *)v12 + v3279;
                do
                {
                  int v3292 = *v3291++;
                  v3280 += v3292 * *v3290;
                  --v3289;
                  v3290 -= v1385;
                }
                while (v3289 >= v1383);
LABEL_2227:
                *(_WORD *)(v1387 + 2 * (v3276 + v3272)) = v3280 >> 15;
                ++v3276;
                v3277 += 2;
                v3278 += 2;
                if (v3276 == v41) {
                  goto LABEL_2246;
                }
              }
            }
            uint64_t v3293 = 0;
            v3294 = (char *)v1384 + 2 * v1385 * v1382;
            v3295 = (char *)v1384 + 2 * v1385 * (v1382 - 1);
LABEL_2238:
            unsigned int v3296 = vaddvq_s32((int32x4_t)vmovl_u16(*v12)) * v1384->u16[v3293 + v1386];
            if (v3274 < 2)
            {
              uint64_t v3297 = (int)v3487 - 2;
              uint64_t v3298 = 4;
              goto LABEL_2243;
            }
            uint64_t v3299 = 0;
            int v3300 = 0;
            unint64_t v3301 = v3274 & 0xFFFFFFFFFFFFFFFELL;
            v3302 = (unsigned __int16 *)&v12[1] + 1;
            do
            {
              int v3303 = *(v3302 - 1);
              int v3304 = *v3302;
              v3302 += 2;
              v3296 += v3303 * *(unsigned __int16 *)&v3294[v3299];
              v3300 += v3304 * *(unsigned __int16 *)&v3295[v3299];
              v3299 -= 4 * v1385;
              v3301 -= 2;
            }
            while (v3301);
            v3296 += v3300;
            uint64_t v3297 = v1382 - (v3274 & 0xFFFFFFFFFFFFFFFELL);
            uint64_t v3298 = v3275 + 4;
            if (v3274 != v3275)
            {
LABEL_2243:
              uint64_t v3305 = v3297 + 1;
              v3306 = (unsigned __int16 *)v1384 + v3293 + v1385 * v3297;
              v3307 = (unsigned __int16 *)v12 + v3298;
              do
              {
                int v3308 = *v3307++;
                v3296 += v3308 * *v3306;
                --v3305;
                v3306 -= v1385;
              }
              while (v3305 >= v1383);
            }
            *(_WORD *)(v1387 + 2 * (v3293 + v3272)) = v3296 >> 15;
            ++v3293;
            v3294 += 2;
            v3295 += 2;
            if (v3293 == v41) {
              break;
            }
            goto LABEL_2238;
          }
        }
      }
LABEL_2246:
      v3309 = a1;
      unsigned int v4 = v3521;
      if ((int)v3487 >= 1)
      {
        uint64_t v3310 = 0;
        uint64_t v3311 = 0;
        unint64_t v3312 = (unint64_t)(v3521 + 3);
        v3313 = v12 + 2;
        do
        {
          unint64_t v3314 = *a2;
          unint64_t v3315 = a2[2];
          v3316 = (unsigned __int16 *)(*a2 + 2 * v3315 * v3311);
          _WORD *v3521 = ((v12->u16[1] + v12->u16[0] + v12->u16[2] + v12->u16[3]) * *v3316
                  + v3316[1] * v12[1].u16[0]
                  + v3316[2] * v12[1].u16[1]
                  + v3316[3] * v12[1].u16[2]) >> 15;
          v3521[1] = ((v12->u16[1] + v12->u16[0] + v12->u16[2]) * *v3316
                    + v3316[1] * v12->u16[3]
                    + v3316[2] * v12[1].u16[0]
                    + v3316[3] * v12[1].u16[1]
                    + v3316[4] * v12[1].u16[2]) >> 15;
          v3521[2] = ((v12->u16[1] + v12->u16[0]) * *v3316
                    + v3316[1] * v12->u16[2]
                    + v3316[2] * v12->u16[3]
                    + v3316[3] * v12[1].u16[0]
                    + v3316[4] * v12[1].u16[1]
                    + v3316[5] * v12[1].u16[2]) >> 15;
          uint64_t v3317 = *((int *)v3309 + 2);
          if ((int)v3317 > 6)
          {
            uint64_t v3318 = (v3317 - 6);
            if (v3318 < 8)
            {
              uint64_t v3319 = 0;
              uint64_t v3320 = 3;
LABEL_2268:
              v3349 = &v3521[v3320];
              v3350 = (unsigned __int16 *)(v3314 + 2 * (v3319 + v3315 * v3311) + 12);
              uint64_t v3351 = v3318 - v3319;
              do
              {
                int32x4_t v3352 = (int32x4_t)vmull_u16(*(uint16x4_t *)(v3350 - 6), *v12);
                int v3353 = *(v3350 - 2);
                int v3354 = *(v3350 - 1);
                int v3355 = *v3350++;
                *v3349++ = (vaddvq_s32(v3352)
                          + v3353 * v12[1].u16[0]
                          + v3355 * v12[1].u16[2]
                          + v3354 * v12[1].u16[1]) >> 15;
                --v3351;
              }
              while (v3351);
              goto LABEL_2270;
            }
            uint64_t v3319 = 0;
            unint64_t v3321 = v3312 + 2 * v3318;
            uint64_t v3322 = v3315 * 2 * v3311;
            BOOL v3324 = v3312 < v3314 + 2 * v3318 + v3322 + 12 && v3314 + v3322 < v3321;
            uint64_t v3320 = 3;
            if ((unint64_t)v12 < v3321 && v3312 < (unint64_t)&v12[1] + 6) {
              goto LABEL_2268;
            }
            if (v3324) {
              goto LABEL_2268;
            }
            v3326 = (const __int16 *)v12;
            uint16x4_t v3327 = (uint16x4_t)vld1_dup_s16(v3326++);
            uint64_t v3319 = v3318 & 0xFFFFFFF8;
            uint64_t v3320 = v3319 | 3;
            int16x8_t v3328 = (int16x8_t)vmovl_u16(v3327);
            uint16x4_t v3329 = (uint16x4_t)vld1_dup_s16(v3326);
            int16x8_t v3330 = (int16x8_t)vmovl_u16(v3329);
            v3331 = (const __int16 *)v12 + 2;
            uint16x4_t v3332 = (uint16x4_t)vld1_dup_s16(v3331);
            v3333 = (const __int16 *)v12 + 3;
            uint16x4_t v3334 = (uint16x4_t)vld1_dup_s16(v3333);
            int16x8_t v3335 = (int16x8_t)vmovl_u16(v3332);
            int16x8_t v3336 = (int16x8_t)vmovl_u16(v3334);
            v3337 = (const __int16 *)&v12[1];
            uint16x4_t v3338 = (uint16x4_t)vld1_dup_s16(v3337);
            int16x8_t v3339 = (int16x8_t)vmovl_u16(v3338);
            v3340 = (const __int16 *)&v12[1] + 1;
            uint16x4_t v3341 = (uint16x4_t)vld1_dup_s16(v3340);
            v3342 = (const __int16 *)&v12[1] + 2;
            uint16x4_t v3343 = (uint16x4_t)vld1_dup_s16(v3342);
            int16x8_t v3344 = (int16x8_t)vmovl_u16(v3341);
            int16x8_t v3345 = (int16x8_t)vmovl_u16(v3343);
            uint64_t v3346 = v3314 + v3315 * v3310 + 6;
            v3347 = (int16x8_t *)(v3521 + 3);
            uint64_t v3348 = v3319;
            do
            {
              *v3347++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)(v3346 - 4), (uint16x4_t)vmovn_s32((int32x4_t)v3330)), *(uint16x4_t *)(v3346 - 6), (uint16x4_t)vmovn_s32((int32x4_t)v3328)), *(uint16x4_t *)(v3346 - 2), (uint16x4_t)vmovn_s32((int32x4_t)v3335)), *(uint16x4_t *)v3346, (uint16x4_t)vmovn_s32((int32x4_t)v3336)), *(uint16x4_t *)(v3346 + 2), (uint16x4_t)vmovn_s32((int32x4_t)v3339)), *(uint16x4_t *)(v3346 + 4),
                                            (uint16x4_t)vmovn_s32((int32x4_t)v3344)),
                                          *(uint16x4_t *)(v3346 + 6),
                                          (uint16x4_t)vmovn_s32((int32x4_t)v3345)),
                             0xFuLL),
                           (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)(v3346 - 4), (uint16x8_t)vuzp1q_s16(v3328, v3330)), *(uint16x8_t *)(v3346 - 6), (uint16x8_t)vuzp1q_s16(v3328, v3328)), *(uint16x8_t *)(v3346 - 2), (uint16x8_t)vuzp1q_s16(v3328, v3335)), *(uint16x8_t *)v3346, (uint16x8_t)vuzp1q_s16(v3328, v3336)), *(uint16x8_t *)(v3346 + 2), (uint16x8_t)vuzp1q_s16(v3328, v3339)), *(uint16x8_t *)(v3346 + 4), (uint16x8_t)vuzp1q_s16(v3328, v3344)), *(uint16x8_t *)(v3346 + 6),
                                        (uint16x8_t)vuzp1q_s16(v3328, v3345)),
                           0xFuLL);
              v3346 += 16;
              v3348 -= 8;
            }
            while (v3348);
            if (v3319 != v3318) {
              goto LABEL_2268;
            }
          }
LABEL_2270:
          int v3356 = v3317 - 3;
          uint64_t v3357 = v3317 - 1;
          uint64_t v3358 = (int)v3317 - 3;
          if (v3358 + 3 >= v3317 - 1)
          {
            int v3360 = v12->u16[1] + v12->u16[0];
            uint64_t v3359 = 2;
          }
          else
          {
            uint64_t v3359 = 0;
            int v3360 = 0;
          }
          uint64_t v3361 = v3315 * v3311 + v3357;
          uint64_t v3362 = (int)v3317 - 2;
          unsigned int v3363 = v3360 * *(unsigned __int16 *)(v3314 + 2 * v3361);
          if ((int)v3317 + 1 >= v3356)
          {
            uint64_t v3364 = v3356 - 3;
            if (v3358 - 3 >= v3362) {
              uint64_t v3364 = (int)v3317 - 2;
            }
            unint64_t v3365 = v3362 - v3364 + 1;
            if (v3365 < 0x10)
            {
              uint64_t v3366 = (int)v3317 - 2;
              unint64_t v3367 = v3359;
LABEL_2281:
              v3380 = (unsigned __int16 *)v12 + v3367;
              do
              {
                int v3381 = *v3380++;
                v3363 += v3381 * *(unsigned __int16 *)(v3314 + v3315 * v3310 + 2 * v3366);
                BOOL v7 = v3366-- < v3358 - 2;
              }
              while (!v7);
              goto LABEL_2284;
            }
            uint64_t v3366 = v3362 - (v3365 & 0xFFFFFFFFFFFFFFF0);
            unint64_t v3367 = v3359 | v3365 & 0xFFFFFFFFFFFFFFF0;
            int32x4_t v3368 = 0uLL;
            int32x4_t v3369 = (int32x4_t)v3363;
            v3370 = (int16x8_t *)(v3314 + 2 * (v3362 + v3315 * v3311) - 14);
            v3371 = (uint16x8_t *)((char *)v3313 + 2 * v3359);
            unint64_t v3372 = v3365 & 0xFFFFFFFFFFFFFFF0;
            int32x4_t v3373 = 0uLL;
            int32x4_t v3374 = 0uLL;
            do
            {
              int8x16_t v3375 = (int8x16_t)vrev64q_s16(*v3370);
              uint16x8_t v3376 = (uint16x8_t)vextq_s8(v3375, v3375, 8uLL);
              int8x16_t v3377 = (int8x16_t)vrev64q_s16(v3370[-1]);
              uint16x8_t v3378 = (uint16x8_t)vextq_s8(v3377, v3377, 8uLL);
              uint16x8_t v3379 = v3371[-1];
              int32x4_t v3368 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3368, v3379, v3376);
              int32x4_t v3369 = (int32x4_t)vmlal_u16((uint32x4_t)v3369, *(uint16x4_t *)v3379.i8, *(uint16x4_t *)v3376.i8);
              int32x4_t v3374 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3374, *v3371, v3378);
              int32x4_t v3373 = (int32x4_t)vmlal_u16((uint32x4_t)v3373, *(uint16x4_t *)v3371->i8, *(uint16x4_t *)v3378.i8);
              v3370 -= 2;
              v3371 += 2;
              v3372 -= 16;
            }
            while (v3372);
            unsigned int v3363 = vaddvq_s32(vaddq_s32(vaddq_s32(v3373, v3369), vaddq_s32(v3374, v3368)));
            if (v3365 != (v3365 & 0xFFFFFFFFFFFFFFF0)) {
              goto LABEL_2281;
            }
          }
LABEL_2284:
          v3521[v3358] = v3363 >> 15;
          if (v3358 + 1 >= v3317) {
            goto LABEL_2249;
          }
          if (v3358 + 4 >= v3357)
          {
            int v3383 = v12->u16[1] + v12->u16[0] + v12->u16[2];
            uint64_t v3382 = 3;
          }
          else
          {
            uint64_t v3382 = 0;
            int v3383 = 0;
          }
          unsigned int v3384 = v3383 * *(unsigned __int16 *)(v3314 + 2 * v3361);
          uint64_t v3385 = v3358 - 2;
          if (v3358 - 2 >= v3362) {
            uint64_t v3385 = (int)v3317 - 2;
          }
          unint64_t v3386 = v3362 - v3385 + 1;
          uint64_t v3387 = (int)v3317 - 2;
          unint64_t v3388 = v3382;
          if (v3386 < 0x10) {
            goto LABEL_2294;
          }
          uint64_t v3387 = v3362 - (v3386 & 0xFFFFFFFFFFFFFFF0);
          unint64_t v3388 = v3382 | v3386 & 0xFFFFFFFFFFFFFFF0;
          int32x4_t v3389 = 0uLL;
          int32x4_t v3390 = (int32x4_t)v3384;
          v3391 = (int16x8_t *)(v3314 + 2 * (v3362 + v3315 * v3311) - 14);
          v3392 = (uint16x8_t *)((char *)v3313 + 2 * v3382);
          unint64_t v3393 = v3386 & 0xFFFFFFFFFFFFFFF0;
          int32x4_t v3394 = 0uLL;
          int32x4_t v3395 = 0uLL;
          do
          {
            int8x16_t v3396 = (int8x16_t)vrev64q_s16(*v3391);
            uint16x8_t v3397 = (uint16x8_t)vextq_s8(v3396, v3396, 8uLL);
            int8x16_t v3398 = (int8x16_t)vrev64q_s16(v3391[-1]);
            uint16x8_t v3399 = (uint16x8_t)vextq_s8(v3398, v3398, 8uLL);
            uint16x8_t v3400 = v3392[-1];
            int32x4_t v3389 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3389, v3400, v3397);
            int32x4_t v3390 = (int32x4_t)vmlal_u16((uint32x4_t)v3390, *(uint16x4_t *)v3400.i8, *(uint16x4_t *)v3397.i8);
            int32x4_t v3395 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3395, *v3392, v3399);
            int32x4_t v3394 = (int32x4_t)vmlal_u16((uint32x4_t)v3394, *(uint16x4_t *)v3392->i8, *(uint16x4_t *)v3399.i8);
            v3391 -= 2;
            v3392 += 2;
            v3393 -= 16;
          }
          while (v3393);
          unsigned int v3384 = vaddvq_s32(vaddq_s32(vaddq_s32(v3394, v3390), vaddq_s32(v3395, v3389)));
          if (v3386 != (v3386 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_2294:
            v3401 = (unsigned __int16 *)(v3314 + 2 * (v3387 + v3315 * v3311));
            v3402 = (unsigned __int16 *)v12 + v3388;
            uint64_t v3403 = v3382 + v3362 - v3388 - v3385 + 1;
            do
            {
              int v3405 = *v3401--;
              int v3404 = v3405;
              int v3406 = *v3402++;
              v3384 += v3406 * v3404;
              --v3403;
            }
            while (v3403);
          }
          v3521[v3358 + 1] = v3384 >> 15;
          if (v3358 + 5 >= v3357)
          {
            int v3408 = vaddvq_s32((int32x4_t)vmovl_u16(*v12));
            uint64_t v3407 = 1;
          }
          else
          {
            uint64_t v3407 = 0;
            int v3408 = 0;
          }
          unsigned int v3409 = v3408 * *(unsigned __int16 *)(v3314 + 2 * v3361);
          uint64_t v3410 = v3358 - 1;
          if (v3358 - 1 >= v3362) {
            uint64_t v3410 = (int)v3317 - 2;
          }
          unint64_t v3411 = v3362 - v3410 + 1;
          if (v3411 >= 0x10)
          {
            uint64_t v3412 = v3362 - (v3411 & 0xFFFFFFFFFFFFFFF0);
            unint64_t v3413 = (v3407 * 4) | v3411 & 0xFFFFFFFFFFFFFFF0;
            int32x4_t v3414 = 0uLL;
            int32x4_t v3415 = (int32x4_t)v3409;
            v3416 = (int16x8_t *)(v3314 + 2 * (v3362 + v3315 * v3311) - 14);
            v3417 = (uint16x8_t *)&v3313[v3407];
            unint64_t v3418 = v3411 & 0xFFFFFFFFFFFFFFF0;
            int32x4_t v3419 = 0uLL;
            int32x4_t v3420 = 0uLL;
            do
            {
              int8x16_t v3421 = (int8x16_t)vrev64q_s16(*v3416);
              uint16x8_t v3422 = (uint16x8_t)vextq_s8(v3421, v3421, 8uLL);
              int8x16_t v3423 = (int8x16_t)vrev64q_s16(v3416[-1]);
              uint16x8_t v3424 = (uint16x8_t)vextq_s8(v3423, v3423, 8uLL);
              uint16x8_t v3425 = v3417[-1];
              int32x4_t v3414 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3414, v3425, v3422);
              int32x4_t v3415 = (int32x4_t)vmlal_u16((uint32x4_t)v3415, *(uint16x4_t *)v3425.i8, *(uint16x4_t *)v3422.i8);
              int32x4_t v3420 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3420, *v3417, v3424);
              int32x4_t v3419 = (int32x4_t)vmlal_u16((uint32x4_t)v3419, *(uint16x4_t *)v3417->i8, *(uint16x4_t *)v3424.i8);
              v3416 -= 2;
              v3417 += 2;
              v3418 -= 16;
            }
            while (v3418);
            unsigned int v3409 = vaddvq_s32(vaddq_s32(vaddq_s32(v3419, v3415), vaddq_s32(v3420, v3414)));
            if (v3411 == (v3411 & 0xFFFFFFFFFFFFFFF0)) {
              goto LABEL_2248;
            }
          }
          else
          {
            uint64_t v3412 = (int)v3317 - 2;
            unint64_t v3413 = v3407 * 4;
          }
          unint64_t v3426 = v3314 + v3315 * v3310;
          v3427 = (unsigned __int16 *)v12 + v3413;
          do
          {
            int v3428 = *v3427++;
            v3409 += v3428 * *(unsigned __int16 *)(v3426 + 2 * v3412);
            BOOL v7 = v3412-- < v3358;
          }
          while (!v7);
LABEL_2248:
          v3521[v3358 + 2] = v3409 >> 15;
LABEL_2249:
          memcpy(v3316, v3521, 2 * v3317);
          ++v3311;
          v3309 = a1;
          v3310 += 2;
        }
        while (v3311 < *((int *)a1 + 3));
      }
LABEL_2310:
      free(v4);
      free(v12);
      return;
    case 4:
      uint64_t v3517 = *((unsigned int *)a1 + 2);
      if ((int)v3517 <= 0) {
        goto LABEL_1297;
      }
      float v116 = (uint16x4_t *)*a1;
      uint64_t v117 = a1[2];
      uint64_t v118 = 2 * v117;
      uint64_t v119 = 4 * v117;
      unint64_t v120 = *a2;
      uint64_t v121 = 2 * v3517;
      uint64_t v122 = v117;
      if (v3517 < 8)
      {
        uint64_t v123 = 0;
LABEL_424:
        uint64_t v635 = v3517 - v123;
        uint64_t v636 = 2 * v123;
        uint64_t v637 = (_WORD *)(v120 + 2 * v123);
        BOOL v638 = (uint16x4_t *)((char *)v116 + v636);
        do
        {
          float32x4_t v639 = (unsigned __int16 *)((char *)v638 + v118 + v118);
          *v637++ = ((vaddvq_s32((int32x4_t)vmovl_u16(*v12)) + v12[1].u16[0]) * v638->u16[0]
                   + v12[1].u16[1] * v638->u16[(unint64_t)v118 / 2]
                   + v12[1].u16[2] * *v639
                   + v12[1].u16[3] * v639[(unint64_t)v118 / 2]
                   + v12[2].u16[0] * v639[(unint64_t)v118 / 2 + (unint64_t)v118 / 2]) >> 15;
          BOOL v638 = (uint16x4_t *)((char *)v638 + 2);
          --v635;
        }
        while (v635);
        goto LABEL_426;
      }
      uint64_t v123 = 0;
      unint64_t v587 = v120 + v121;
      BOOL v589 = v120 < (unint64_t)&v116[v122] + v121 && (unint64_t)&v116[v122] < v587;
      BOOL v591 = v120 < (unint64_t)v116 + 6 * v117 + v121 && (unint64_t)v116 + 6 * v117 < v587;
      BOOL v593 = v120 < (unint64_t)v116 + v119 + v121 && (unint64_t)v116 + v119 < v587;
      BOOL v595 = v120 < (unint64_t)v116 + v118 + v121 && (unint64_t)v116 + v118 < v587;
      BOOL v597 = v120 < (unint64_t)v116 + v121 && (unint64_t)v116 < v587;
      if ((unint64_t)v12 < v587 && v120 < (unint64_t)&v12[2] + 2) {
        goto LABEL_424;
      }
      if (v589) {
        goto LABEL_424;
      }
      if (v591) {
        goto LABEL_424;
      }
      if (v593) {
        goto LABEL_424;
      }
      if (v595) {
        goto LABEL_424;
      }
      if (v597) {
        goto LABEL_424;
      }
      uint64_t v599 = (const __int16 *)v12;
      uint16x4_t v600 = (uint16x4_t)vld1_dup_s16(v599++);
      uint16x4_t v601 = (uint16x4_t)vld1_dup_s16(v599);
      uint32x4_t v602 = vaddl_u16(v601, v600);
      uint64_t v603 = (const __int16 *)v12 + 2;
      uint16x4_t v604 = (uint16x4_t)vld1_dup_s16(v603);
      uint32x4_t v605 = vaddw_u16(v602, v604);
      unint64_t v606 = (const __int16 *)v12 + 3;
      uint16x4_t v607 = (uint16x4_t)vld1_dup_s16(v606);
      unint64_t v608 = (const __int16 *)&v12[1];
      uint16x4_t v609 = (uint16x4_t)vld1_dup_s16(v608);
      int16x8_t v610 = (int16x8_t)vaddw_u16(vaddw_u16(v605, v607), v609);
      unint64_t v611 = (const __int16 *)&v12[1] + 1;
      uint16x4_t v612 = (uint16x4_t)vld1_dup_s16(v611);
      int16x8_t v613 = (int16x8_t)vmovl_u16(v612);
      unint64_t v614 = (const __int16 *)&v12[1] + 2;
      uint16x4_t v615 = (uint16x4_t)vld1_dup_s16(v614);
      BOOL v616 = (const __int16 *)&v12[1] + 3;
      uint16x4_t v617 = (uint16x4_t)vld1_dup_s16(v616);
      int16x8_t v618 = (int16x8_t)vmovl_u16(v615);
      int16x8_t v619 = (int16x8_t)vmovl_u16(v617);
      BOOL v620 = (const __int16 *)&v12[2];
      uint16x4_t v621 = (uint16x4_t)vld1_dup_s16(v620);
      int16x8_t v622 = (int16x8_t)vmovl_u16(v621);
      uint16x8_t v623 = (uint16x8_t)vuzp1q_s16(v610, v613);
      uint16x4_t v624 = (uint16x4_t)vmovn_s32((int32x4_t)v613);
      uint64_t v123 = v3517 & 0xFFFFFFF8;
      uint16x8_t v625 = (uint16x8_t)vuzp1q_s16(v610, v618);
      uint16x4_t v626 = (uint16x4_t)vmovn_s32((int32x4_t)v618);
      uint16x8_t v627 = (uint16x8_t)vuzp1q_s16(v610, v619);
      uint16x4_t v628 = (uint16x4_t)vmovn_s32((int32x4_t)v619);
      uint16x8_t v629 = (uint16x8_t)vuzp1q_s16(v610, v622);
      uint16x4_t v630 = (uint16x4_t)vmovn_s32((int32x4_t)v622);
      uint64_t v631 = v123;
      BOOL v632 = (int16x8_t *)*a2;
      uint64_t v633 = (uint16x4_t *)*a1;
      do
      {
        BOOL v634 = (uint16x4_t *)((char *)v633 + v118 + v118);
        *v632++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v610, (int32x4_t)vmovl_u16(*v633)), v624, *(uint16x4_t *)((char *)v633 + 2 * v117)), v626, *v634), v628, *(uint16x4_t *)((char *)v634 + v118)), v630, *(uint16x4_t *)((char *)v634 + 2 * v117 + v118)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(
                                       (uint32x4_t)vmulq_s32((int32x4_t)v610, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)v633->i8)), v623, *(uint16x8_t *)&v633->i8[2 * v117]), v625, *(uint16x8_t *)v634->i8), v627, *(uint16x8_t *)&v634->i8[v118]), v629, *(uint16x8_t *)&v634->i8[2 * v117 + v118]), 0xFuLL);
        v633 += 2;
        v631 -= 8;
      }
      while (v631);
      if (v123 != v3517) {
        goto LABEL_424;
      }
LABEL_426:
      unint64_t v640 = a2[2];
      if (v3517 >= 8)
      {
        uint64_t v641 = 0;
        unint64_t v878 = v120 + 2 * v640;
        unint64_t v879 = v120 + v121 + 2 * v640;
        BOOL v881 = v878 < (unint64_t)v116 + 10 * v117 + v121 && (unint64_t)v116 + 10 * v117 < v879;
        BOOL v883 = v878 < (unint64_t)&v116[v122] + v121 && (unint64_t)&v116[v122] < v879;
        BOOL v885 = v878 < (unint64_t)v116 + 6 * v117 + v121 && (unint64_t)v116 + 6 * v117 < v879;
        BOOL v887 = v878 < (unint64_t)v116 + v119 + v121 && (unint64_t)v116 + v119 < v879;
        BOOL v889 = v878 < (unint64_t)v116 + v118 + v121 && (unint64_t)v116 + v118 < v879;
        BOOL v891 = v878 < (unint64_t)v116 + v121 && (unint64_t)v116 < v879;
        if (((unint64_t)v12 >= v879 || v878 >= (unint64_t)&v12[2] + 2)
          && !v881
          && !v883
          && !v885
          && !v887
          && !v889
          && !v891)
        {
          double v893 = (const __int16 *)v12;
          uint16x4_t v894 = (uint16x4_t)vld1_dup_s16(v893++);
          uint16x4_t v895 = (uint16x4_t)vld1_dup_s16(v893);
          uint32x4_t v896 = vaddl_u16(v895, v894);
          uint64_t v897 = (const __int16 *)v12 + 2;
          uint16x4_t v898 = (uint16x4_t)vld1_dup_s16(v897);
          uint64_t v899 = (const __int16 *)v12 + 3;
          uint16x4_t v900 = (uint16x4_t)vld1_dup_s16(v899);
          int16x8_t v901 = (int16x8_t)vaddw_u16(vaddw_u16(v896, v898), v900);
          uint64_t v902 = (const __int16 *)&v12[1];
          uint16x4_t v903 = (uint16x4_t)vld1_dup_s16(v902);
          int16x8_t v904 = (int16x8_t)vmovl_u16(v903);
          double v905 = (const __int16 *)&v12[1] + 1;
          uint16x4_t v906 = (uint16x4_t)vld1_dup_s16(v905);
          double v907 = (const __int16 *)&v12[1] + 2;
          uint16x4_t v908 = (uint16x4_t)vld1_dup_s16(v907);
          int16x8_t v909 = (int16x8_t)vmovl_u16(v906);
          int16x8_t v910 = (int16x8_t)vmovl_u16(v908);
          int32x4_t v911 = (const __int16 *)&v12[1] + 3;
          uint16x4_t v912 = (uint16x4_t)vld1_dup_s16(v911);
          int16x8_t v913 = (int16x8_t)vmovl_u16(v912);
          float32x4x3_t v914 = (const __int16 *)&v12[2];
          uint16x4_t v915 = (uint16x4_t)vld1_dup_s16(v914);
          int16x8_t v916 = (int16x8_t)vmovl_u16(v915);
          uint16x8_t v917 = (uint16x8_t)vuzp1q_s16(v901, v904);
          uint16x4_t v918 = (uint16x4_t)vmovn_s32((int32x4_t)v904);
          uint64_t v641 = v3517 & 0xFFFFFFF8;
          uint16x8_t v919 = (uint16x8_t)vuzp1q_s16(v901, v909);
          float32x4_t v920 = (int16x8_t *)(v120 + 2 * v640);
          uint16x4_t v921 = (uint16x4_t)vmovn_s32((int32x4_t)v909);
          uint16x8_t v922 = (uint16x8_t)vuzp1q_s16(v901, v910);
          uint16x4_t v923 = (uint16x4_t)vmovn_s32((int32x4_t)v910);
          uint16x8_t v924 = (uint16x8_t)vuzp1q_s16(v901, v913);
          uint16x4_t v925 = (uint16x4_t)vmovn_s32((int32x4_t)v913);
          uint16x8_t v926 = (uint16x8_t)vuzp1q_s16(v901, v916);
          uint16x4_t v927 = (uint16x4_t)vmovn_s32((int32x4_t)v916);
          uint64_t v928 = v641;
          float32x4_t v929 = (uint16x8_t *)v116;
          do
          {
            uint16x8_t v930 = *(uint16x8_t *)((char *)v929 + 2 * v117);
            float32x4_t v931 = (uint16x8_t *)((char *)v929 + v118 + v118);
            uint32x4_t v932 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v901, (int32x4_t)vmovl_high_u16(*v929)), v917, v930), v919, *v931);
            uint32x4_t v933 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v901, (int32x4_t)vmovl_u16(*(uint16x4_t *)v929->i8)), v918, *(uint16x4_t *)v930.i8), v921, *(uint16x4_t *)v931->i8);
            float32x4_t v934 = (uint16x4_t *)&v931->i8[v118];
            *v920++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v933, v923, *v934), v925, *(uint16x4_t *)((char *)v934 + 2 * v117)), v927, *(uint16x4_t *)((char *)v934 + 2 * v117 + 2 * v117)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v932, v922, *(uint16x8_t *)v934->i8), v924, *(uint16x8_t *)&v934->i8[2 * v117]), v926, *(uint16x8_t *)&v934->i8[2 * v117 + 2 * v117]), 0xFuLL);
            ++v929;
            v928 -= 8;
          }
          while (v928);
          if (v641 == v3517)
          {
LABEL_656:
            uint64_t v939 = 6 * v117;
            if (v3517 >= 8)
            {
              uint64_t v940 = 0;
              unint64_t v1390 = v120 + 4 * v640;
              unint64_t v1391 = v120 + 4 * v640 + v121;
              BOOL v1393 = v1390 < (unint64_t)v116 + 12 * v117 + v121 && (unint64_t)v116 + 12 * v117 < v1391;
              BOOL v1395 = v1390 < (unint64_t)v116 + 10 * v117 + v121 && (unint64_t)v116 + 10 * v117 < v1391;
              BOOL v1397 = v1390 < (unint64_t)&v116[v122] + v121 && (unint64_t)&v116[v122] < v1391;
              BOOL v1399 = v1390 < (unint64_t)v116 + v939 + v121 && (unint64_t)v116 + v939 < v1391;
              BOOL v1401 = v1390 < (unint64_t)v116 + v119 + v121 && (unint64_t)v116 + v119 < v1391;
              BOOL v1403 = v1390 < (unint64_t)v116 + v118 + v121 && (unint64_t)v116 + v118 < v1391;
              BOOL v1405 = v1390 < (unint64_t)v116 + v121 && (unint64_t)v116 < v1391;
              if (((unint64_t)v12 >= v1391 || v1390 >= (unint64_t)&v12[2] + 2)
                && !v1393
                && !v1395
                && !v1397
                && !v1399
                && !v1401
                && !v1403
                && !v1405)
              {
                long long v1407 = (const __int16 *)v12;
                uint16x4_t v1408 = (uint16x4_t)vld1_dup_s16(v1407++);
                uint16x4_t v1409 = (uint16x4_t)vld1_dup_s16(v1407);
                long long v1410 = (const __int16 *)v12 + 2;
                uint16x4_t v1411 = (uint16x4_t)vld1_dup_s16(v1410);
                int16x8_t v1412 = (int16x8_t)vaddw_u16(vaddl_u16(v1409, v1408), v1411);
                long long v1413 = (const __int16 *)v12 + 3;
                uint16x4_t v1414 = (uint16x4_t)vld1_dup_s16(v1413);
                int16x8_t v1415 = (int16x8_t)vmovl_u16(v1414);
                long long v1416 = (const __int16 *)&v12[1];
                uint16x4_t v1417 = (uint16x4_t)vld1_dup_s16(v1416);
                long long v1418 = (const __int16 *)&v12[1] + 1;
                uint16x4_t v1419 = (uint16x4_t)vld1_dup_s16(v1418);
                int16x8_t v1420 = (int16x8_t)vmovl_u16(v1417);
                int16x8_t v1421 = (int16x8_t)vmovl_u16(v1419);
                long long v1422 = (const __int16 *)&v12[1] + 2;
                uint16x4_t v1423 = (uint16x4_t)vld1_dup_s16(v1422);
                int16x8_t v1424 = (int16x8_t)vmovl_u16(v1423);
                v1425 = (const __int16 *)&v12[1] + 3;
                uint16x4_t v1426 = (uint16x4_t)vld1_dup_s16(v1425);
                unint64_t v1427 = (const __int16 *)&v12[2];
                uint16x4_t v1428 = (uint16x4_t)vld1_dup_s16(v1427);
                int16x8_t v1429 = (int16x8_t)vmovl_u16(v1426);
                int16x8_t v1430 = (int16x8_t)vmovl_u16(v1428);
                uint16x8_t v1431 = (uint16x8_t)vuzp1q_s16(v1412, v1415);
                uint16x4_t v1432 = (uint16x4_t)vmovn_s32((int32x4_t)v1415);
                uint64_t v940 = v3517 & 0xFFFFFFF8;
                uint16x8_t v1433 = (uint16x8_t)vuzp1q_s16(v1412, v1420);
                uint64_t v1434 = (int16x8_t *)(v120 + 4 * v640);
                uint16x4_t v1435 = (uint16x4_t)vmovn_s32((int32x4_t)v1420);
                uint16x8_t v1436 = (uint16x8_t)vuzp1q_s16(v1412, v1421);
                uint16x4_t v1437 = (uint16x4_t)vmovn_s32((int32x4_t)v1421);
                uint16x8_t v1438 = (uint16x8_t)vuzp1q_s16(v1412, v1424);
                uint16x4_t v1439 = (uint16x4_t)vmovn_s32((int32x4_t)v1424);
                uint16x8_t v1440 = (uint16x8_t)vuzp1q_s16(v1412, v1429);
                uint16x4_t v1441 = (uint16x4_t)vmovn_s32((int32x4_t)v1429);
                uint16x8_t v1442 = (uint16x8_t)vuzp1q_s16(v1412, v1430);
                uint16x4_t v1443 = (uint16x4_t)vmovn_s32((int32x4_t)v1430);
                uint64_t v1444 = v940;
                float32x4_t v1445 = (uint16x8_t *)v116;
                do
                {
                  uint16x8_t v1446 = *(uint16x8_t *)((char *)v1445 + 2 * v117);
                  float32x4_t v1447 = (uint16x8_t *)((char *)v1445 + v118 + v118);
                  uint32x4_t v1448 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1412, (int32x4_t)vmovl_high_u16(*v1445)), v1431, v1446), v1433, *v1447);
                  uint32x4_t v1449 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1412, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1445->i8)), v1432, *(uint16x4_t *)v1446.i8), v1435, *(uint16x4_t *)v1447->i8);
                  float32x4_t v1450 = (uint16x8_t *)((char *)v1447 + v118);
                  uint32x4_t v1451 = vmlal_high_u16(v1448, v1436, *v1450);
                  uint32x4_t v1452 = vmlal_u16(v1449, v1437, *(uint16x4_t *)v1450->i8);
                  float32x4_t v1453 = (uint16x4_t *)&v1450->i8[v118];
                  *v1434++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1452, v1439, *v1453), v1441, *(uint16x4_t *)((char *)v1453 + 2 * v117)), v1443, *(uint16x4_t *)((char *)v1453 + 2 * v117 + 2 * v117)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1451, v1438, *(uint16x8_t *)v1453->i8), v1440, *(uint16x8_t *)&v1453->i8[2 * v117]), v1442, *(uint16x8_t *)&v1453->i8[2 * v117 + 2 * v117]), 0xFuLL);
                  ++v1445;
                  v1444 -= 8;
                }
                while (v1444);
                if (v940 == v3517)
                {
LABEL_1052:
                  if (v3517 >= 8)
                  {
                    uint64_t v1461 = 0;
                    unint64_t v1702 = v120 + 6 * v640;
                    unint64_t v1703 = v120 + 6 * v640 + v121;
                    v1704 = (char *)v116 + 14 * v117;
                    unint64_t v1705 = (unint64_t)v116 + 14 * v117 + v121;
                    v1706 = (char *)v116 + 12 * v117;
                    unint64_t v1707 = (unint64_t)v116 + 12 * v117 + v121;
                    uint64_t v1708 = 10 * v117;
                    v1709 = (char *)v116 + v1708;
                    unint64_t v1710 = (unint64_t)v116 + v1708 + v121;
                    v1711 = &v116[v122];
                    unint64_t v1712 = (unint64_t)&v116[v122] + v121;
                    v1713 = (char *)v116 + v939;
                    unint64_t v1714 = (unint64_t)v116 + v939 + v121;
                    v1715 = (char *)v116 + v119;
                    unint64_t v1716 = (unint64_t)v116 + v119 + v121;
                    unint64_t v1717 = (unint64_t)v116 + v118 + v121;
                    unint64_t v1718 = (unint64_t)v116 + v121;
                    BOOL v1720 = v1702 < v1705 && (unint64_t)v1704 < v1703;
                    BOOL v1722 = v1702 < v1707 && (unint64_t)v1706 < v1703;
                    BOOL v1724 = v1702 < v1710 && (unint64_t)v1709 < v1703;
                    BOOL v1726 = v1702 < v1712 && (unint64_t)v1711 < v1703;
                    BOOL v1728 = v1702 < v1714 && (unint64_t)v1713 < v1703;
                    BOOL v1730 = v1702 < v1716 && (unint64_t)v1715 < v1703;
                    BOOL v1732 = v1702 < v1717 && (unint64_t)v116 + v118 < v1703;
                    BOOL v1734 = v1702 < v1718 && (unint64_t)v116 < v1703;
                    if (((unint64_t)v12 >= v1703 || v1702 >= (unint64_t)&v12[2] + 2)
                      && !v1720
                      && !v1722
                      && !v1724
                      && !v1726
                      && !v1728
                      && !v1730
                      && !v1732
                      && !v1734)
                    {
                      v1736 = (const __int16 *)v12;
                      uint16x4_t v1737 = (uint16x4_t)vld1_dup_s16(v1736++);
                      uint16x4_t v1738 = (uint16x4_t)vld1_dup_s16(v1736);
                      uint64_t v1461 = v3517 & 0xFFFFFFF8;
                      int16x8_t v1739 = (int16x8_t)vaddl_u16(v1738, v1737);
                      v1740 = (const __int16 *)v12 + 2;
                      uint16x4_t v1741 = (uint16x4_t)vld1_dup_s16(v1740);
                      int16x8_t v1742 = (int16x8_t)vmovl_u16(v1741);
                      v1743 = (const __int16 *)v12 + 3;
                      uint16x4_t v1744 = (uint16x4_t)vld1_dup_s16(v1743);
                      v1745 = (const __int16 *)&v12[1];
                      uint16x4_t v1746 = (uint16x4_t)vld1_dup_s16(v1745);
                      int16x8_t v1747 = (int16x8_t)vmovl_u16(v1744);
                      int16x8_t v1748 = (int16x8_t)vmovl_u16(v1746);
                      v1749 = (const __int16 *)&v12[1] + 1;
                      uint16x4_t v1750 = (uint16x4_t)vld1_dup_s16(v1749);
                      int16x8_t v1751 = (int16x8_t)vmovl_u16(v1750);
                      v1752 = (const __int16 *)&v12[1] + 2;
                      uint16x4_t v1753 = (uint16x4_t)vld1_dup_s16(v1752);
                      v1754 = (const __int16 *)&v12[1] + 3;
                      uint16x4_t v1755 = (uint16x4_t)vld1_dup_s16(v1754);
                      int16x8_t v1756 = (int16x8_t)vmovl_u16(v1753);
                      int16x8_t v1757 = (int16x8_t)vmovl_u16(v1755);
                      v1758 = (const __int16 *)&v12[2];
                      uint16x4_t v1759 = (uint16x4_t)vld1_dup_s16(v1758);
                      int16x8_t v1760 = (int16x8_t)vmovl_u16(v1759);
                      uint16x8_t v1761 = (uint16x8_t)vuzp1q_s16(v1739, v1742);
                      uint16x4_t v1762 = (uint16x4_t)vmovn_s32((int32x4_t)v1742);
                      uint16x8_t v1763 = (uint16x8_t)vuzp1q_s16(v1739, v1747);
                      uint16x4_t v1764 = (uint16x4_t)vmovn_s32((int32x4_t)v1747);
                      v1765 = (int16x8_t *)(v120 + 6 * v640);
                      uint16x8_t v1766 = (uint16x8_t)vuzp1q_s16(v1739, v1748);
                      uint16x4_t v1767 = (uint16x4_t)vmovn_s32((int32x4_t)v1748);
                      uint16x8_t v1768 = (uint16x8_t)vuzp1q_s16(v1739, v1751);
                      uint16x4_t v1769 = (uint16x4_t)vmovn_s32((int32x4_t)v1751);
                      uint16x8_t v1770 = (uint16x8_t)vuzp1q_s16(v1739, v1756);
                      uint16x4_t v1771 = (uint16x4_t)vmovn_s32((int32x4_t)v1756);
                      uint16x8_t v1772 = (uint16x8_t)vuzp1q_s16(v1739, v1757);
                      uint16x4_t v1773 = (uint16x4_t)vmovn_s32((int32x4_t)v1757);
                      uint16x8_t v1774 = (uint16x8_t)vuzp1q_s16(v1739, v1760);
                      uint16x4_t v1775 = (uint16x4_t)vmovn_s32((int32x4_t)v1760);
                      uint64_t v1776 = v1461;
                      v1777 = (uint16x8_t *)v116;
                      do
                      {
                        uint16x8_t v1778 = *(uint16x8_t *)((char *)v1777 + v118);
                        uint32x4_t v1779 = vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1739, (int32x4_t)vmovl_high_u16(*v1777)), v1761, v1778);
                        uint32x4_t v1780 = vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1739, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1777->i8)), v1762, *(uint16x4_t *)v1778.i8);
                        v1781 = (uint16x4_t *)&v1777->i8[v118 + v118];
                        uint16x8_t v1782 = *(uint16x8_t *)v1781->i8;
                        uint32x4_t v1783 = vmlal_u16(v1780, v1764, *v1781);
                        v1784 = (uint16x8_t *)((char *)v1781 + v118);
                        uint32x4_t v1785 = vmlal_high_u16(vmlal_high_u16(v1779, v1763, v1782), v1766, *v1784);
                        uint32x4_t v1786 = vmlal_u16(v1783, v1767, *(uint16x4_t *)v1784->i8);
                        v1787 = (uint16x8_t *)((char *)v1784 + v118);
                        uint32x4_t v1788 = vmlal_high_u16(v1785, v1768, *v1787);
                        uint32x4_t v1789 = vmlal_u16(v1786, v1769, *(uint16x4_t *)v1787->i8);
                        v1790 = (uint16x4_t *)&v1787->i8[v118];
                        *v1765++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1789, v1771, *v1790), v1773, *(uint16x4_t *)((char *)v1790 + v118)), v1775, *(uint16x4_t *)((char *)v1790 + v118 + v118)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1788, v1770, *(uint16x8_t *)v1790->i8), v1772, *(uint16x8_t *)&v1790->i8[v118]), v1774, *(uint16x8_t *)&v1790->i8[v118 + v118]), 0xFuLL);
                        ++v1777;
                        v1776 -= 8;
                      }
                      while (v1776);
                      if (v1461 == v3517) {
                        goto LABEL_1297;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v1461 = 0;
                  }
                  uint64_t v1791 = v3517 - v1461;
                  v1792 = (_WORD *)(v120 + 2 * v1461 + 6 * v640);
                  v1793 = (unsigned __int16 *)v116 + v1461;
                  do
                  {
                    v1794 = &v1793[(unint64_t)v118 / 2 + (unint64_t)v118 / 2];
                    int v1795 = *v1794;
                    v1796 = &v1794[(unint64_t)v118 / 2];
                    int v1797 = (v12->u16[1] + v12->u16[0]) * *v1793
                          + v12->u16[2] * v1793[(unint64_t)v118 / 2]
                          + v12->u16[3] * v1795;
                    int v1798 = *v1796;
                    v1799 = &v1796[(unint64_t)v118 / 2];
                    *v1792++ = (v1797
                              + v12[1].u16[0] * v1798
                              + v12[1].u16[1] * *v1799
                              + v12[1].u16[2] * v1799[(unint64_t)v118 / 2]
                              + v12[1].u16[3] * v1799[(unint64_t)v118 / 2 + (unint64_t)v118 / 2]
                              + v12[2].u16[0]
                              * v1799[(unint64_t)v118 / 2
                                                  + (unint64_t)v118 / 2
                                                  + (unint64_t)v118 / 2]) >> 15;
                    ++v1793;
                    --v1791;
                  }
                  while (v1791);
LABEL_1297:
                  v1800 = a1;
                  int v1801 = *((_DWORD *)a1 + 3);
                  int v3460 = v1801 - 4;
                  uint64_t v3478 = v1801;
                  if (v1801 > 8)
                  {
                    uint64_t v1802 = 0;
                    uint64_t v1803 = 0;
                    uint64_t v1804 = (v1801 - 8);
                    uint64_t v3469 = 2 * v3517;
                    uint64_t v1805 = 4;
                    uint64_t v1806 = 8;
                    do
                    {
                      if ((int)v3517 <= 0)
                      {
                        uint64_t v1807 = v1803 + 1;
                      }
                      else
                      {
                        uint64_t v1808 = *v1800;
                        uint64_t v1809 = v1800[2];
                        unint64_t v1810 = *a2;
                        unint64_t v1811 = a2[2];
                        uint64_t v1812 = v1803 * v1809;
                        uint64_t v1807 = v1803 + 1;
                        uint64_t v1813 = 2 * v1809;
                        if (v3517 >= 8)
                        {
                          uint64_t v1814 = 0;
                          unint64_t v1815 = v1810 + v1811 * (2 * v1802 + 8);
                          unint64_t v1816 = v1815 + v3469;
                          uint64_t v1817 = v1813 * (v1803 + 8);
                          unint64_t v3488 = v1808 + v1817;
                          unint64_t v3481 = v1808 + v3469 + v1817;
                          uint64_t v1818 = v1813 * (v1803 + 7);
                          uint64_t v1819 = v1813 * (v1803 + 6);
                          unint64_t v1820 = v1808 + v1819;
                          unint64_t v1821 = v1808 + v3469 + v1819;
                          uint64_t v1822 = v1813 * (v1803 + 5);
                          unint64_t v1823 = v1808 + v1822;
                          unint64_t v1824 = v1808 + v3469 + v1822;
                          uint64_t v1825 = v1813 * (v1803 + 4);
                          unint64_t v1826 = v1808 + v1825;
                          unint64_t v1827 = v1808 + v3469 + v1825;
                          uint64_t v1828 = v1813 * (v1803 + 3);
                          unint64_t v1829 = v1808 + v1828;
                          unint64_t v1830 = v1808 + v3469 + v1828;
                          uint64_t v1831 = v1813 * (v1803 + 2);
                          unint64_t v1832 = v1808 + v1831;
                          unint64_t v1833 = v1808 + v3469 + v1831;
                          uint64_t v3510 = v1803 + 1;
                          uint64_t v1834 = v1813 * v1807;
                          unint64_t v1835 = v1808 + v1813 * v1807;
                          unint64_t v1836 = v1808 + v3469 + v1834;
                          uint64_t v3494 = v1803 * v1809;
                          unint64_t v1837 = v1808 + v3469 + 2 * v1812;
                          unint64_t v1838 = v1808 + 2 * v1812;
                          BOOL v1840 = v1815 < v1808 + v3469 + v1818 && v1808 + v1818 < v1816;
                          BOOL v1842 = v1815 < v1821 && v1820 < v1816;
                          BOOL v1844 = v1815 < v1824 && v1823 < v1816;
                          BOOL v1846 = v1815 < v1827 && v1826 < v1816;
                          BOOL v1848 = v1815 < v1830 && v1829 < v1816;
                          BOOL v1850 = v1815 < v1833 && v1832 < v1816;
                          BOOL v1852 = v1815 < v1836 && v1835 < v1816;
                          BOOL v1854 = v1815 < v1837 && v1838 < v1816;
                          BOOL v1856 = v1815 < (unint64_t)&v12[2] + 2 && (unint64_t)v12 < v1816;
                          if (v3488 >= v1816 || v1815 >= v3481)
                          {
                            uint64_t v1807 = v3510;
                            v1800 = a1;
                            uint64_t v1804 = (v3478 - 8);
                            uint64_t v1812 = v3494;
                            unint64_t v1810 = *a2;
                            unint64_t v1811 = a2[2];
                            if (!v1840 && !v1842 && !v1844 && !v1846 && !v1848 && !v1850 && !v1852 && !v1854 && !v1856)
                            {
                              v1858 = (const __int16 *)v12;
                              uint16x4_t v1859 = (uint16x4_t)vld1_dup_s16(v1858++);
                              int16x8_t v1860 = (int16x8_t)vmovl_u16(v1859);
                              uint16x4_t v1861 = (uint16x4_t)vld1_dup_s16(v1858);
                              int16x8_t v1862 = (int16x8_t)vmovl_u16(v1861);
                              v1863 = (const __int16 *)v12 + 2;
                              uint16x4_t v1864 = (uint16x4_t)vld1_dup_s16(v1863);
                              int16x8_t v1865 = (int16x8_t)vmovl_u16(v1864);
                              v1866 = (const __int16 *)v12 + 3;
                              uint16x4_t v1867 = (uint16x4_t)vld1_dup_s16(v1866);
                              int16x8_t v1868 = (int16x8_t)vmovl_u16(v1867);
                              v1869 = (const __int16 *)&v12[1];
                              uint16x4_t v1870 = (uint16x4_t)vld1_dup_s16(v1869);
                              int16x8_t v1871 = (int16x8_t)vmovl_u16(v1870);
                              v1872 = (const __int16 *)&v12[1] + 1;
                              uint16x4_t v1873 = (uint16x4_t)vld1_dup_s16(v1872);
                              int16x8_t v1874 = (int16x8_t)vmovl_u16(v1873);
                              v1875 = (const __int16 *)&v12[1] + 2;
                              uint16x4_t v1876 = (uint16x4_t)vld1_dup_s16(v1875);
                              int16x8_t v1877 = (int16x8_t)vmovl_u16(v1876);
                              v1878 = (const __int16 *)&v12[1] + 3;
                              uint16x4_t v1879 = (uint16x4_t)vld1_dup_s16(v1878);
                              int16x8_t v1880 = (int16x8_t)vmovl_u16(v1879);
                              v1881 = (const __int16 *)&v12[2];
                              uint16x4_t v1882 = (uint16x4_t)vld1_dup_s16(v1881);
                              int16x8_t v1883 = (int16x8_t)vmovl_u16(v1882);
                              v1884 = (uint16x8_t *)(v1808 + 2 * v3494);
                              v1885 = (int16x8_t *)(*a2 + a2[2] * v1806);
                              uint64_t v1886 = v3517 & 0xFFFFFFF8;
                              do
                              {
                                uint16x8_t v1887 = *(uint16x8_t *)((char *)v1884 + 2 * v1809);
                                v1888 = (uint16x8_t *)((char *)v1884 + v1813 + v1813);
                                uint32x4_t v1889 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16((uint16x8_t)vuzp1q_s16(v1860, v1862), v1887), (uint16x8_t)vuzp1q_s16(v1860, v1860), *v1884), (uint16x8_t)vuzp1q_s16(v1860, v1865), *v1888);
                                uint32x4_t v1890 = vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)v1862), *(uint16x4_t *)v1887.i8), (uint16x4_t)vmovn_s32((int32x4_t)v1860), *(uint16x4_t *)v1884->i8), (uint16x4_t)vmovn_s32((int32x4_t)v1865), *(uint16x4_t *)v1888->i8);
                                v1891 = (uint16x4_t *)&v1888->i8[v1813];
                                uint32x4_t v1892 = vmlal_u16(v1890, (uint16x4_t)vmovn_s32((int32x4_t)v1868), *v1891);
                                uint32x4_t v1893 = vmlal_high_u16(v1889, (uint16x8_t)vuzp1q_s16(v1860, v1868), *(uint16x8_t *)v1891->i8);
                                v1894 = (uint16x8_t *)((char *)v1891 + v1813);
                                uint32x4_t v1895 = vmlal_high_u16(v1893, (uint16x8_t)vuzp1q_s16(v1860, v1871), *v1894);
                                uint32x4_t v1896 = vmlal_u16(v1892, (uint16x4_t)vmovn_s32((int32x4_t)v1871), *(uint16x4_t *)v1894->i8);
                                v1897 = (uint16x4_t *)&v1894->i8[v1813];
                                uint32x4_t v1898 = vmlal_u16(v1896, (uint16x4_t)vmovn_s32((int32x4_t)v1874), *v1897);
                                uint32x4_t v1899 = vmlal_high_u16(v1895, (uint16x8_t)vuzp1q_s16(v1860, v1874), *(uint16x8_t *)v1897->i8);
                                v1900 = (uint16x4_t *)((char *)v1897 + v1813);
                                *v1885++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1898, (uint16x4_t)vmovn_s32((int32x4_t)v1877), *v1900), (uint16x4_t)vmovn_s32((int32x4_t)v1880), *(uint16x4_t *)((char *)v1900 + v1813)), (uint16x4_t)vmovn_s32((int32x4_t)v1883), *(uint16x4_t *)((char *)v1900 + 2 * v1809 + v1813)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1899, (uint16x8_t)vuzp1q_s16(v1860, v1877), *(uint16x8_t *)v1900->i8), (uint16x8_t)vuzp1q_s16(v1860, v1880),
                                                            *(uint16x8_t *)&v1900->i8[v1813]),
                                                          (uint16x8_t)vuzp1q_s16(v1860, v1883),
                                                          *(uint16x8_t *)&v1900->i8[2 * v1809 + v1813]),
                                             0xFuLL);
                                ++v1884;
                                v1886 -= 8;
                              }
                              while (v1886);
                              uint64_t v1814 = v3517 & 0x7FFFFFF8;
                              if ((v3517 & 0xFFFFFFF8) == v3517) {
                                goto LABEL_1300;
                              }
                            }
                          }
                          else
                          {
                            uint64_t v1804 = (v3478 - 8);
                            unint64_t v1810 = *a2;
                            uint64_t v1807 = v3510;
                            unint64_t v1811 = a2[2];
                            uint64_t v1812 = v3494;
                          }
                        }
                        else
                        {
                          uint64_t v1814 = 0;
                        }
                        uint64_t v1901 = v3517 - v1814;
                        v1902 = (_WORD *)(v1810 + 2 * (v1814 + v1811 * v1805));
                        v1903 = (unsigned __int16 *)(v1808 + 2 * (v1814 + v1812));
                        do
                        {
                          v1904 = &v1903[v1809];
                          int v1905 = *v1904;
                          v1906 = &v1904[(unint64_t)v1813 / 2];
                          int v1907 = v12->u16[0] * *v1903 + v12->u16[1] * v1905 + v12->u16[2] * *v1906;
                          v1908 = &v1906[(unint64_t)v1813 / 2 + (unint64_t)v1813 / 2];
                          int v1909 = v1907 + v12->u16[3] * v1906[v1809];
                          LODWORD(v1906) = *v1908;
                          v1910 = &v1908[(unint64_t)v1813 / 2];
                          *v1902++ = (v1909
                                    + v12[1].u16[0] * v1906
                                    + v12[1].u16[1] * *v1910
                                    + v12[1].u16[2] * v1910[(unint64_t)v1813 / 2]
                                    + v12[1].u16[3] * v1910[(unint64_t)v1813 / 2 + (unint64_t)v1813 / 2]
                                    + v12[2].u16[0]
                                    * v1910[(unint64_t)v1813 / 2
                                                        + (unint64_t)v1813 / 2
                                                        + (unint64_t)v1813 / 2]) >> 15;
                          ++v1903;
                          --v1901;
                        }
                        while (v1901);
                        v1800 = a1;
                      }
LABEL_1300:
                      ++v1805;
                      ++v1802;
                      v1806 += 2;
                      uint64_t v1803 = v1807;
                    }
                    while (v1807 != v1804);
                  }
                  uint64_t v1911 = 0;
                  uint64_t v1912 = v3460;
                  uint64_t v3455 = (int)v3478 - 2 + 4;
                  uint64_t v1913 = v3460 - 1;
                  uint64_t v3511 = (int)v3478 - 2;
                  uint64_t v3470 = v3511 + 3;
                  uint64_t v3450 = 2 * v3511;
                  uint64_t v3445 = 2 * v3511 - 2;
                  v1914 = (unsigned __int16 *)v12 + 3;
                  unint64_t v1915 = 2;
                  while (1)
                  {
                    if (v1913 >= v3470) {
                      uint64_t v1916 = (int)v3478 - 2 + 3;
                    }
                    else {
                      uint64_t v1916 = v1913;
                    }
                    uint64_t v3482 = v1911;
                    uint64_t v1917 = v3460 - 1 + v1911;
                    if (v1917 >= v3470) {
                      uint64_t v1918 = (int)v3478 - 2 + 3;
                    }
                    else {
                      uint64_t v1918 = v1917;
                    }
                    if (v1917 >= v3470) {
                      uint64_t v1917 = (int)v3478 - 2 + 3;
                    }
                    if ((int)v3517 >= 1) {
                      break;
                    }
LABEL_1379:
                    ++v1912;
                    ++v1915;
                    uint64_t v1911 = v3482 + 1;
                    ++v1913;
                    ++v1914;
                    if (v1912 >= v3478)
                    {
                      v1981 = a1;
                      unsigned int v4 = v3521;
                      if ((int)v3478 < 1) {
                        goto LABEL_2310;
                      }
                      uint64_t v1982 = 0;
                      uint64_t v1983 = 0;
                      unint64_t v1984 = (unint64_t)(v3521 + 4);
                      v1985 = v12 + 2;
                      while (2)
                      {
                        unint64_t v1986 = *a2;
                        unint64_t v1987 = a2[2];
                        v1988 = (unsigned __int16 *)(*a2 + 2 * v1987 * v1983);
                        _WORD *v3521 = ((v12->u16[1] + v12->u16[0] + v12->u16[2] + v12->u16[3] + v12[1].u16[0]) * *v1988
                                + v1988[1] * v12[1].u16[1]
                                + v1988[2] * v12[1].u16[2]
                                + v1988[3] * v12[1].u16[3]
                                + v1988[4] * v12[2].u16[0]) >> 15;
                        v3521[1] = ((v12->u16[1] + v12->u16[0] + v12->u16[2] + v12->u16[3]) * *v1988
                                  + v1988[1] * v12[1].u16[0]
                                  + v1988[2] * v12[1].u16[1]
                                  + v1988[3] * v12[1].u16[2]
                                  + v1988[4] * v12[1].u16[3]
                                  + v1988[5] * v12[2].u16[0]) >> 15;
                        v3521[2] = ((v12->u16[1] + v12->u16[0] + v12->u16[2]) * *v1988
                                  + v1988[1] * v12->u16[3]
                                  + v1988[2] * v12[1].u16[0]
                                  + v1988[3] * v12[1].u16[1]
                                  + v1988[4] * v12[1].u16[2]
                                  + v1988[5] * v12[1].u16[3]
                                  + v1988[6] * v12[2].u16[0]) >> 15;
                        v3521[3] = ((v12->u16[1] + v12->u16[0]) * *v1988
                                  + v1988[1] * v12->u16[2]
                                  + v1988[2] * v12->u16[3]
                                  + v1988[3] * v12[1].u16[0]
                                  + v1988[4] * v12[1].u16[1]
                                  + v1988[5] * v12[1].u16[2]
                                  + v1988[6] * v12[1].u16[3]
                                  + v1988[7] * v12[2].u16[0]) >> 15;
                        uint64_t v1989 = *((int *)v1981 + 2);
                        if ((int)v1989 > 8)
                        {
                          uint64_t v1990 = (v1989 - 8);
                          if (v1990 < 8)
                          {
                            uint64_t v1991 = 0;
                            uint64_t v1992 = 4;
                            goto LABEL_1448;
                          }
                          uint64_t v1991 = 0;
                          unint64_t v1993 = v1984 + 2 * v1990;
                          uint64_t v1994 = v1987 * 2 * v1983;
                          BOOL v1996 = v1984 < v1986 + 2 * v1990 + v1994 + 16 && v1986 + v1994 < v1993;
                          uint64_t v1992 = 4;
                          if ((unint64_t)v12 < v1993 && v1984 < (unint64_t)&v12[2] + 2) {
                            goto LABEL_1448;
                          }
                          if (v1996) {
                            goto LABEL_1448;
                          }
                          uint64_t v1991 = v1990 & 0xFFFFFFF8;
                          uint64_t v1992 = v1991 | 4;
                          v1998 = (const __int16 *)v12;
                          uint16x4_t v1999 = (uint16x4_t)vld1_dup_s16(v1998++);
                          int16x8_t v2000 = (int16x8_t)vmovl_u16(v1999);
                          uint16x4_t v2001 = (uint16x4_t)vld1_dup_s16(v1998);
                          v2002 = (const __int16 *)v12 + 2;
                          uint16x4_t v2003 = (uint16x4_t)vld1_dup_s16(v2002);
                          int16x8_t v2004 = (int16x8_t)vmovl_u16(v2001);
                          int16x8_t v2005 = (int16x8_t)vmovl_u16(v2003);
                          v2006 = (const __int16 *)v12 + 3;
                          uint16x4_t v2007 = (uint16x4_t)vld1_dup_s16(v2006);
                          int16x8_t v2008 = (int16x8_t)vmovl_u16(v2007);
                          v2009 = (const __int16 *)&v12[1];
                          uint16x4_t v2010 = (uint16x4_t)vld1_dup_s16(v2009);
                          v2011 = (const __int16 *)&v12[1] + 1;
                          uint16x4_t v2012 = (uint16x4_t)vld1_dup_s16(v2011);
                          int16x8_t v2013 = (int16x8_t)vmovl_u16(v2010);
                          int16x8_t v2014 = (int16x8_t)vmovl_u16(v2012);
                          v2015 = (const __int16 *)&v12[1] + 2;
                          uint16x4_t v2016 = (uint16x4_t)vld1_dup_s16(v2015);
                          int16x8_t v2017 = (int16x8_t)vmovl_u16(v2016);
                          v2018 = (const __int16 *)&v12[1] + 3;
                          uint16x4_t v2019 = (uint16x4_t)vld1_dup_s16(v2018);
                          v2020 = (const __int16 *)&v12[2];
                          uint16x4_t v2021 = (uint16x4_t)vld1_dup_s16(v2020);
                          int16x8_t v2022 = (int16x8_t)vmovl_u16(v2019);
                          int16x8_t v2023 = (int16x8_t)vmovl_u16(v2021);
                          uint64_t v2024 = v1986 + v1987 * v1982 + 8;
                          v2025 = (int16x8_t *)(v3521 + 4);
                          uint64_t v2026 = v1991;
                          do
                          {
                            uint16x8_t v2027 = *(uint16x8_t *)(v2024 - 8);
                            uint16x8_t v2028 = *(uint16x8_t *)(v2024 - 6);
                            *v2025++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v2028.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2004)), *(uint16x4_t *)v2027.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2000)), *(uint16x4_t *)(v2024 - 4), (uint16x4_t)vmovn_s32((int32x4_t)v2005)), *(uint16x4_t *)(v2024 - 2), (uint16x4_t)vmovn_s32((int32x4_t)v2008)), *(uint16x4_t *)v2024,
                                                                (uint16x4_t)vmovn_s32((int32x4_t)v2013)),
                                                              *(uint16x4_t *)(v2024 + 2),
                                                              (uint16x4_t)vmovn_s32((int32x4_t)v2014)),
                                                            *(uint16x4_t *)(v2024 + 4),
                                                            (uint16x4_t)vmovn_s32((int32x4_t)v2017)),
                                                          *(uint16x4_t *)(v2024 + 6),
                                                          (uint16x4_t)vmovn_s32((int32x4_t)v2022)),
                                                        *(uint16x4_t *)(v2024 + 8),
                                                        (uint16x4_t)vmovn_s32((int32x4_t)v2023)),
                                           0xFuLL),
                                         (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v2028, (uint16x8_t)vuzp1q_s16(v2000, v2004)), v2027, (uint16x8_t)vuzp1q_s16(v2000, v2000)), *(uint16x8_t *)(v2024 - 4), (uint16x8_t)vuzp1q_s16(v2000, v2005)), *(uint16x8_t *)(v2024 - 2), (uint16x8_t)vuzp1q_s16(v2000, v2008)), *(uint16x8_t *)v2024, (uint16x8_t)vuzp1q_s16(v2000, v2013)), *(uint16x8_t *)(v2024 + 2),
                                                            (uint16x8_t)vuzp1q_s16(v2000, v2014)),
                                                          *(uint16x8_t *)(v2024 + 4),
                                                          (uint16x8_t)vuzp1q_s16(v2000, v2017)),
                                                        *(uint16x8_t *)(v2024 + 6),
                                                        (uint16x8_t)vuzp1q_s16(v2000, v2022)),
                                                      *(uint16x8_t *)(v2024 + 8),
                                                      (uint16x8_t)vuzp1q_s16(v2000, v2023)),
                                         0xFuLL);
                            v2024 += 16;
                            v2026 -= 8;
                          }
                          while (v2026);
                          if (v1991 != v1990)
                          {
LABEL_1448:
                            v2029 = &v3521[v1992];
                            v2030 = (uint16x8_t *)(v1986 + 2 * (v1991 + v1987 * v1983) + 16);
                            uint64_t v2031 = v1990 - v1991;
                            do
                            {
                              uint16x8_t v2032 = v2030[-1];
                              int v2033 = v2030->u16[0];
                              v2030 = (uint16x8_t *)((char *)v2030 + 2);
                              *v2029++ = (vaddvq_s32((int32x4_t)vmlal_high_u16(vmull_u16(*(uint16x4_t *)v2032.i8, *v12), v2032, *(uint16x8_t *)v12->i8))+ v2033 * v12[2].u16[0]) >> 15;
                              --v2031;
                            }
                            while (v2031);
                          }
                        }
                        int v2034 = v1989 - 4;
                        uint64_t v2035 = v1989 - 1;
                        uint64_t v2036 = (int)v1989 - 4;
                        if (v2036 + 4 >= v1989 - 1)
                        {
                          int v2038 = v12->u16[1] + v12->u16[0];
                          uint64_t v2037 = 2;
                        }
                        else
                        {
                          uint64_t v2037 = 0;
                          int v2038 = 0;
                        }
                        uint64_t v2039 = v1987 * v1983 + v2035;
                        uint64_t v2040 = (int)v1989 - 2;
                        unsigned int v2041 = v2038 * *(unsigned __int16 *)(v1986 + 2 * v2039);
                        if ((int)v1989 + 2 >= v2034)
                        {
                          uint64_t v2042 = v2034 - 4;
                          if (v2036 - 4 >= v2040) {
                            uint64_t v2042 = (int)v1989 - 2;
                          }
                          unint64_t v2043 = v2040 - v2042 + 1;
                          if (v2043 < 0x10)
                          {
                            uint64_t v2044 = (int)v1989 - 2;
                            unint64_t v2045 = v2037;
                            goto LABEL_1461;
                          }
                          uint64_t v2044 = v2040 - (v2043 & 0xFFFFFFFFFFFFFFF0);
                          unint64_t v2045 = v2037 | v2043 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2046 = 0uLL;
                          int32x4_t v2047 = (int32x4_t)v2041;
                          v2048 = (int16x8_t *)(v1986 + 2 * (v2040 + v1987 * v1983) - 14);
                          v2049 = (uint16x8_t *)((char *)v1985 + 2 * v2037);
                          unint64_t v2050 = v2043 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2051 = 0uLL;
                          int32x4_t v2052 = 0uLL;
                          do
                          {
                            int8x16_t v2053 = (int8x16_t)vrev64q_s16(*v2048);
                            uint16x8_t v2054 = (uint16x8_t)vextq_s8(v2053, v2053, 8uLL);
                            int8x16_t v2055 = (int8x16_t)vrev64q_s16(v2048[-1]);
                            uint16x8_t v2056 = (uint16x8_t)vextq_s8(v2055, v2055, 8uLL);
                            uint16x8_t v2057 = v2049[-1];
                            int32x4_t v2046 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2046, v2057, v2054);
                            int32x4_t v2047 = (int32x4_t)vmlal_u16((uint32x4_t)v2047, *(uint16x4_t *)v2057.i8, *(uint16x4_t *)v2054.i8);
                            int32x4_t v2052 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2052, *v2049, v2056);
                            int32x4_t v2051 = (int32x4_t)vmlal_u16((uint32x4_t)v2051, *(uint16x4_t *)v2049->i8, *(uint16x4_t *)v2056.i8);
                            v2048 -= 2;
                            v2049 += 2;
                            v2050 -= 16;
                          }
                          while (v2050);
                          unsigned int v2041 = vaddvq_s32(vaddq_s32(vaddq_s32(v2051, v2047), vaddq_s32(v2052, v2046)));
                          if (v2043 != (v2043 & 0xFFFFFFFFFFFFFFF0))
                          {
LABEL_1461:
                            v2058 = (unsigned __int16 *)v12 + v2045;
                            do
                            {
                              int v2059 = *v2058++;
                              v2041 += v2059 * *(unsigned __int16 *)(v1986 + v1987 * v1982 + 2 * v2044);
                              BOOL v7 = v2044-- < v2036 - 3;
                            }
                            while (!v7);
                          }
                        }
                        v3521[v2036] = v2041 >> 15;
                        if (v2036 + 1 < v1989)
                        {
                          if (v2036 + 5 >= v2035)
                          {
                            int v2061 = v12->u16[1] + v12->u16[0] + v12->u16[2];
                            uint64_t v2060 = 3;
                          }
                          else
                          {
                            uint64_t v2060 = 0;
                            int v2061 = 0;
                          }
                          unsigned int v2062 = v2061 * *(unsigned __int16 *)(v1986 + 2 * v2039);
                          uint64_t v2063 = v2036 - 3;
                          if (v2036 - 3 >= v2040) {
                            uint64_t v2063 = (int)v1989 - 2;
                          }
                          unint64_t v2064 = v2040 - v2063 + 1;
                          uint64_t v2065 = (int)v1989 - 2;
                          unint64_t v2066 = v2060;
                          if (v2064 < 0x10) {
                            goto LABEL_1474;
                          }
                          uint64_t v2065 = v2040 - (v2064 & 0xFFFFFFFFFFFFFFF0);
                          unint64_t v2066 = v2060 | v2064 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2067 = 0uLL;
                          int32x4_t v2068 = (int32x4_t)v2062;
                          v2069 = (int16x8_t *)(v1986 + 2 * (v2040 + v1987 * v1983) - 14);
                          v2070 = (uint16x8_t *)((char *)v1985 + 2 * v2060);
                          unint64_t v2071 = v2064 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2072 = 0uLL;
                          int32x4_t v2073 = 0uLL;
                          do
                          {
                            int8x16_t v2074 = (int8x16_t)vrev64q_s16(*v2069);
                            uint16x8_t v2075 = (uint16x8_t)vextq_s8(v2074, v2074, 8uLL);
                            int8x16_t v2076 = (int8x16_t)vrev64q_s16(v2069[-1]);
                            uint16x8_t v2077 = (uint16x8_t)vextq_s8(v2076, v2076, 8uLL);
                            uint16x8_t v2078 = v2070[-1];
                            int32x4_t v2067 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2067, v2078, v2075);
                            int32x4_t v2068 = (int32x4_t)vmlal_u16((uint32x4_t)v2068, *(uint16x4_t *)v2078.i8, *(uint16x4_t *)v2075.i8);
                            int32x4_t v2073 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2073, *v2070, v2077);
                            int32x4_t v2072 = (int32x4_t)vmlal_u16((uint32x4_t)v2072, *(uint16x4_t *)v2070->i8, *(uint16x4_t *)v2077.i8);
                            v2069 -= 2;
                            v2070 += 2;
                            v2071 -= 16;
                          }
                          while (v2071);
                          unsigned int v2062 = vaddvq_s32(vaddq_s32(vaddq_s32(v2072, v2068), vaddq_s32(v2073, v2067)));
                          if (v2064 != (v2064 & 0xFFFFFFFFFFFFFFF0))
                          {
LABEL_1474:
                            v2079 = (unsigned __int16 *)(v1986 + 2 * (v2065 + v1987 * v1983));
                            v2080 = (unsigned __int16 *)v12 + v2066;
                            uint64_t v2081 = v2060 + v2040 - v2066 - v2063 + 1;
                            do
                            {
                              int v2083 = *v2079--;
                              int v2082 = v2083;
                              int v2084 = *v2080++;
                              v2062 += v2084 * v2082;
                              --v2081;
                            }
                            while (v2081);
                          }
                          v3521[v2036 + 1] = v2062 >> 15;
                          if (v2036 + 6 >= v2035)
                          {
                            int v2086 = vaddvq_s32((int32x4_t)vmovl_u16(*v12));
                            uint64_t v2085 = 1;
                          }
                          else
                          {
                            uint64_t v2085 = 0;
                            int v2086 = 0;
                          }
                          unsigned int v2087 = v2086 * *(unsigned __int16 *)(v1986 + 2 * v2039);
                          uint64_t v2088 = v2036 - 1;
                          uint64_t v2089 = v2036 - 2;
                          if (v2036 - 2 >= v2040) {
                            uint64_t v2089 = (int)v1989 - 2;
                          }
                          unint64_t v2090 = v2040 - v2089 + 1;
                          if (v2090 < 0x10)
                          {
                            uint64_t v2091 = (int)v1989 - 2;
                            unint64_t v2092 = v2085 * 4;
                            goto LABEL_1486;
                          }
                          uint64_t v2091 = v2040 - (v2090 & 0xFFFFFFFFFFFFFFF0);
                          unint64_t v2092 = (v2085 * 4) | v2090 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2093 = 0uLL;
                          int32x4_t v2094 = (int32x4_t)v2087;
                          v2095 = (int16x8_t *)(v1986 + 2 * (v2040 + v1987 * v1983) - 14);
                          v2096 = (uint16x8_t *)&v1985[v2085];
                          unint64_t v2097 = v2090 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2098 = 0uLL;
                          int32x4_t v2099 = 0uLL;
                          do
                          {
                            int8x16_t v2100 = (int8x16_t)vrev64q_s16(*v2095);
                            uint16x8_t v2101 = (uint16x8_t)vextq_s8(v2100, v2100, 8uLL);
                            int8x16_t v2102 = (int8x16_t)vrev64q_s16(v2095[-1]);
                            uint16x8_t v2103 = (uint16x8_t)vextq_s8(v2102, v2102, 8uLL);
                            uint16x8_t v2104 = v2096[-1];
                            int32x4_t v2093 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2093, v2104, v2101);
                            int32x4_t v2094 = (int32x4_t)vmlal_u16((uint32x4_t)v2094, *(uint16x4_t *)v2104.i8, *(uint16x4_t *)v2101.i8);
                            int32x4_t v2099 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2099, *v2096, v2103);
                            int32x4_t v2098 = (int32x4_t)vmlal_u16((uint32x4_t)v2098, *(uint16x4_t *)v2096->i8, *(uint16x4_t *)v2103.i8);
                            v2095 -= 2;
                            v2096 += 2;
                            v2097 -= 16;
                          }
                          while (v2097);
                          unsigned int v2087 = vaddvq_s32(vaddq_s32(vaddq_s32(v2098, v2094), vaddq_s32(v2099, v2093)));
                          if (v2090 != (v2090 & 0xFFFFFFFFFFFFFFF0))
                          {
LABEL_1486:
                            v2105 = (unsigned __int16 *)v12 + v2092;
                            do
                            {
                              int v2106 = *v2105++;
                              v2087 += v2106 * *(unsigned __int16 *)(v1986 + v1987 * v1982 + 2 * v2091);
                              BOOL v7 = v2091-- < v2088;
                            }
                            while (!v7);
                          }
                          v3521[v2036 + 2] = v2087 >> 15;
                          if (v2036 + 7 >= v2035)
                          {
                            int v2108 = vaddvq_s32((int32x4_t)vmovl_u16(*v12)) + v12[1].u16[0];
                            uint64_t v2107 = 5;
                          }
                          else
                          {
                            uint64_t v2107 = 0;
                            int v2108 = 0;
                          }
                          unsigned int v2109 = v2108 * *(unsigned __int16 *)(v1986 + 2 * v2039);
                          if (v2088 >= v2040) {
                            uint64_t v2110 = (int)v1989 - 2;
                          }
                          else {
                            uint64_t v2110 = v2036 - 1;
                          }
                          unint64_t v2111 = v2040 - v2110 + 1;
                          uint64_t v2112 = (int)v1989 - 2;
                          unint64_t v2113 = v2107;
                          if (v2111 < 0x10) {
                            goto LABEL_1499;
                          }
                          uint64_t v2112 = v2040 - (v2111 & 0xFFFFFFFFFFFFFFF0);
                          unint64_t v2113 = v2107 | v2111 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2114 = 0uLL;
                          int32x4_t v2115 = (int32x4_t)v2109;
                          v2116 = (int16x8_t *)(v1986 + 2 * (v2040 + v1987 * v1983) - 14);
                          v2117 = (uint16x8_t *)((char *)v1985 + 2 * v2107);
                          unint64_t v2118 = v2111 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2119 = 0uLL;
                          int32x4_t v2120 = 0uLL;
                          do
                          {
                            int8x16_t v2121 = (int8x16_t)vrev64q_s16(*v2116);
                            uint16x8_t v2122 = (uint16x8_t)vextq_s8(v2121, v2121, 8uLL);
                            int8x16_t v2123 = (int8x16_t)vrev64q_s16(v2116[-1]);
                            uint16x8_t v2124 = (uint16x8_t)vextq_s8(v2123, v2123, 8uLL);
                            uint16x8_t v2125 = v2117[-1];
                            int32x4_t v2114 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2114, v2125, v2122);
                            int32x4_t v2115 = (int32x4_t)vmlal_u16((uint32x4_t)v2115, *(uint16x4_t *)v2125.i8, *(uint16x4_t *)v2122.i8);
                            int32x4_t v2120 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2120, *v2117, v2124);
                            int32x4_t v2119 = (int32x4_t)vmlal_u16((uint32x4_t)v2119, *(uint16x4_t *)v2117->i8, *(uint16x4_t *)v2124.i8);
                            v2116 -= 2;
                            v2117 += 2;
                            v2118 -= 16;
                          }
                          while (v2118);
                          unsigned int v2109 = vaddvq_s32(vaddq_s32(vaddq_s32(v2119, v2115), vaddq_s32(v2120, v2114)));
                          if (v2111 != (v2111 & 0xFFFFFFFFFFFFFFF0))
                          {
LABEL_1499:
                            v2126 = (unsigned __int16 *)(v1986 + 2 * (v2112 + v1987 * v1983));
                            v2127 = (unsigned __int16 *)v12 + v2113;
                            uint64_t v2128 = v2107 + v2040 - v2113 - v2110 + 1;
                            do
                            {
                              int v2130 = *v2126--;
                              int v2129 = v2130;
                              int v2131 = *v2127++;
                              v2109 += v2131 * v2129;
                              --v2128;
                            }
                            while (v2128);
                          }
                          v3521[v2036 + 3] = v2109 >> 15;
                        }
                        memcpy(v1988, v3521, 2 * v1989);
                        ++v1983;
                        v1981 = a1;
                        v1982 += 2;
                        if (v1983 >= *((int *)a1 + 3)) {
                          goto LABEL_2310;
                        }
                        continue;
                      }
                    }
                  }
                  v1919 = (uint16x4_t *)*a1;
                  uint64_t v1920 = a1[2];
                  uint64_t v1921 = v1920 * (v3478 - 1);
                  unint64_t v1922 = *a2;
                  unint64_t v1923 = a2[2] * v1912;
                  if (v1912 > v3478 + 2)
                  {
                    uint64_t v1924 = 0;
                    while (1)
                    {
                      if (v1915 >= 0x10)
                      {
                        int32x4_t v1927 = 0uLL;
                        unint64_t v1928 = v1915 & 0xFFFFFFFFFFFFFFF0;
                        v1929 = (uint16x8_t *)&v12[2];
                        int32x4_t v1930 = 0uLL;
                        int32x4_t v1931 = 0uLL;
                        int32x4_t v1932 = 0uLL;
                        do
                        {
                          uint16x8_t v1933 = v1929[-1];
                          int32x4_t v1930 = (int32x4_t)vaddw_high_u16((uint32x4_t)v1930, v1933);
                          int32x4_t v1927 = (int32x4_t)vaddw_u16((uint32x4_t)v1927, *(uint16x4_t *)v1933.i8);
                          int32x4_t v1932 = (int32x4_t)vaddw_high_u16((uint32x4_t)v1932, *v1929);
                          int32x4_t v1931 = (int32x4_t)vaddw_u16((uint32x4_t)v1931, *(uint16x4_t *)v1929->i8);
                          v1929 += 2;
                          v1928 -= 16;
                        }
                        while (v1928);
                        int v1926 = vaddvq_s32(vaddq_s32(vaddq_s32(v1931, v1927), vaddq_s32(v1932, v1930)));
                        uint64_t v1925 = v1915 & 0x7FFFFFFFFFFFFFF0;
                        if (v1915 == (v1915 & 0x7FFFFFFFFFFFFFF0)) {
                          goto LABEL_1391;
                        }
                      }
                      else
                      {
                        uint64_t v1925 = 0;
                        int v1926 = 0;
                      }
                      do
                        v1926 += v12->u16[v1925++];
                      while (v1915 != v1925);
LABEL_1391:
                      *(_WORD *)(v1922 + 2 * (v1924 + v1923)) = (v1926 * v1919->u16[v1924 + v1921]) >> 15;
                      if (++v1924 == v3517) {
                        goto LABEL_1379;
                      }
                    }
                  }
                  unint64_t v1934 = (v3455 - v1916) & 0xFFFFFFFFFFFFFFFELL;
                  uint64_t v1935 = 4 * v1920;
                  if (v1912 < v3478 - 5)
                  {
                    uint64_t v1936 = 0;
                    unint64_t v1937 = v3455 - v1917;
                    v1938 = (char *)v1919 + v3450 * v1920;
                    v1939 = (char *)v1919 + v3445 * v1920;
                    while (1)
                    {
                      if (v1937 >= 2)
                      {
                        uint64_t v1943 = 0;
                        int v1944 = 0;
                        int v1945 = 0;
                        unint64_t v1946 = v1934;
                        v1947 = (unsigned __int16 *)v12 + 1;
                        do
                        {
                          int v1948 = *(v1947 - 1);
                          int v1949 = *v1947;
                          v1947 += 2;
                          v1944 += v1948 * *(unsigned __int16 *)&v1938[v1943];
                          v1945 += v1949 * *(unsigned __int16 *)&v1939[v1943];
                          v1943 -= v1935;
                          v1946 -= 2;
                        }
                        while (v1946);
                        unsigned int v1941 = v1945 + v1944;
                        uint64_t v1942 = v3511 - (v1937 & 0xFFFFFFFFFFFFFFFELL);
                        unint64_t v1940 = v1937 & 0xFFFFFFFFFFFFFFFELL;
                        if (v1937 == (v1937 & 0xFFFFFFFFFFFFFFFELL)) {
                          goto LABEL_1401;
                        }
                      }
                      else
                      {
                        unint64_t v1940 = 0;
                        unsigned int v1941 = 0;
                        uint64_t v1942 = (int)v3478 - 2;
                      }
                      uint64_t v1950 = v1942 + 4;
                      v1951 = (unsigned __int16 *)v1919 + v1936 + v1920 * v1942;
                      v1952 = (unsigned __int16 *)v12 + v1940;
                      do
                      {
                        int v1953 = *v1952++;
                        v1941 += v1953 * *v1951;
                        --v1950;
                        v1951 -= v1920;
                      }
                      while (v1950 >= v1912);
LABEL_1401:
                      *(_WORD *)(v1922 + 2 * (v1936 + v1923)) = v1941 >> 15;
                      ++v1936;
                      v1938 += 2;
                      v1939 += 2;
                      if (v1936 == v3517) {
                        goto LABEL_1379;
                      }
                    }
                  }
                  uint64_t v1954 = 0;
                  unint64_t v1955 = v3455 - v1918;
                  unint64_t v1956 = (v3455 - v1918) & 0xFFFFFFFFFFFFFFFELL;
                  uint64_t v3495 = v3511 - v1956;
                  unint64_t v3491 = v1915 + v1956;
                  v1957 = (char *)v1919 + v3450 * v1920;
                  v1958 = (char *)v1919 + v3445 * v1920;
                  while (v1915 >= 0x10)
                  {
                    int32x4_t v1961 = 0uLL;
                    unint64_t v1962 = v1915 & 0xFFFFFFFFFFFFFFF0;
                    v1963 = (uint16x8_t *)&v12[2];
                    int32x4_t v1964 = 0uLL;
                    int32x4_t v1965 = 0uLL;
                    int32x4_t v1966 = 0uLL;
                    do
                    {
                      uint16x8_t v1967 = v1963[-1];
                      int32x4_t v1964 = (int32x4_t)vaddw_high_u16((uint32x4_t)v1964, v1967);
                      int32x4_t v1961 = (int32x4_t)vaddw_u16((uint32x4_t)v1961, *(uint16x4_t *)v1967.i8);
                      int32x4_t v1966 = (int32x4_t)vaddw_high_u16((uint32x4_t)v1966, *v1963);
                      int32x4_t v1965 = (int32x4_t)vaddw_u16((uint32x4_t)v1965, *(uint16x4_t *)v1963->i8);
                      v1963 += 2;
                      v1962 -= 16;
                    }
                    while (v1962);
                    int v1960 = vaddvq_s32(vaddq_s32(vaddq_s32(v1965, v1961), vaddq_s32(v1966, v1964)));
                    uint64_t v1959 = v1915 & 0x7FFFFFFFFFFFFFF0;
                    if (v1915 != (v1915 & 0x7FFFFFFFFFFFFFF0)) {
                      goto LABEL_1417;
                    }
LABEL_1418:
                    unsigned int v1968 = v1960 * v1919->u16[v1954 + v1921];
                    if (v1955 >= 2)
                    {
                      uint64_t v1971 = 0;
                      int v1972 = 0;
                      v1973 = v1914;
                      unint64_t v1974 = v1934;
                      do
                      {
                        int v1975 = *(v1973 - 1);
                        int v1976 = *v1973;
                        v1973 += 2;
                        v1968 += v1975 * *(unsigned __int16 *)&v1957[v1971];
                        v1972 += v1976 * *(unsigned __int16 *)&v1958[v1971];
                        v1971 -= v1935;
                        v1974 -= 2;
                      }
                      while (v1974);
                      v1968 += v1972;
                      unint64_t v1970 = v3491;
                      uint64_t v1969 = v3495;
                      if (v1955 == ((v3455 - v1918) & 0xFFFFFFFFFFFFFFFELL)) {
                        goto LABEL_1411;
                      }
                    }
                    else
                    {
                      uint64_t v1969 = (int)v3478 - 2;
                      unint64_t v1970 = v1915;
                    }
                    uint64_t v1977 = v1969 + 4;
                    v1978 = (unsigned __int16 *)v1919 + v1954 + v1920 * v1969;
                    v1979 = (unsigned __int16 *)v12 + v1970;
                    do
                    {
                      int v1980 = *v1979++;
                      v1968 += v1980 * *v1978;
                      --v1977;
                      v1978 -= v1920;
                    }
                    while (v1977 >= v1912);
LABEL_1411:
                    *(_WORD *)(v1922 + 2 * (v1954 + v1923)) = v1968 >> 15;
                    ++v1954;
                    v1957 += 2;
                    v1958 += 2;
                    if (v1954 == v3517) {
                      goto LABEL_1379;
                    }
                  }
                  uint64_t v1959 = 0;
                  int v1960 = 0;
                  do
LABEL_1417:
                    v1960 += v12->u16[v1959++];
                  while (v1915 != v1959);
                  goto LABEL_1418;
                }
              }
            }
            else
            {
              uint64_t v940 = 0;
            }
            uint64_t v1454 = v3517 - v940;
            uint64_t v1455 = 2 * v940;
            float v1456 = (_WORD *)(v120 + 2 * v940 + 4 * v640);
            float v1457 = (uint16x4_t *)((char *)v116 + v1455);
            do
            {
              float v1458 = (unsigned __int16 *)((char *)v1457 + v118 + v118);
              int v1459 = *v1458;
              float v1460 = &v1458[(unint64_t)v118 / 2];
              *v1456++ = ((v12->u16[1] + v12->u16[0] + v12->u16[2]) * v1457->u16[0]
                        + v12->u16[3] * v1457->u16[v117]
                        + v12[1].u16[0] * v1459
                        + v12[1].u16[1] * *v1460
                        + v12[1].u16[2] * v1460[(unint64_t)v118 / 2]
                        + v12[1].u16[3] * v1460[(unint64_t)v118 / 2 + (unint64_t)v118 / 2]
                        + v12[2].u16[0]
                        * v1460[(unint64_t)v118 / 2 + (unint64_t)v118 / 2 + v117]) >> 15;
              float v1457 = (uint16x4_t *)((char *)v1457 + 2);
              --v1454;
            }
            while (v1454);
            goto LABEL_1052;
          }
        }
      }
      else
      {
        uint64_t v641 = 0;
      }
      uint64_t v935 = v3517 - v641;
      float32x4_t v936 = (_WORD *)(v120 + 2 * (v641 + v640));
      float32x4_t v937 = (unsigned __int16 *)v116 + v641;
      do
      {
        float32x4_t v938 = &v937[(unint64_t)v118 / 2 + (unint64_t)v118 / 2];
        *v936++ = (vaddvq_s32((int32x4_t)vmovl_u16(*v12)) * *v937
                 + v12[1].u16[0] * v937[(unint64_t)v118 / 2]
                 + v12[1].u16[1] * *v938
                 + v12[1].u16[2] * v938[(unint64_t)v118 / 2]
                 + v12[1].u16[3] * v938[(unint64_t)v118 / 2 + (unint64_t)v118 / 2]
                 + v12[2].u16[0]
                 * v938[(unint64_t)v118 / 2
                                    + (unint64_t)v118 / 2
                                    + (unint64_t)v118 / 2]) >> 15;
        ++v937;
        --v935;
      }
      while (v935);
      goto LABEL_656;
    case 5:
      uint64_t v3518 = *((unsigned int *)a1 + 2);
      if ((int)v3518 <= 0) {
        goto LABEL_1582;
      }
      uint64_t v124 = (uint16x4_t *)*a1;
      uint64_t v125 = a1[2];
      uint64_t v126 = 2 * v125;
      uint64_t v127 = 4 * v125;
      unint64_t v128 = *a2;
      uint64_t v129 = 2 * v3518;
      uint64_t v130 = v125;
      if (v3518 < 8)
      {
        uint64_t v131 = 0;
LABEL_478:
        uint64_t v703 = v3518 - v131;
        uint64_t v704 = 2 * v131;
        float v705 = (_WORD *)(v128 + 2 * v131);
        uint64_t v706 = (uint16x4_t *)((char *)v124 + v704);
        do
        {
          uint64_t v707 = (unsigned __int16 *)((char *)v706 + v126 + v126);
          *v705++ = ((vaddvq_s32((int32x4_t)vmovl_u16(*v12)) + v12[1].u16[0] + v12[1].u16[1]) * v706->u16[0]
                   + v12[1].u16[2] * v706->u16[(unint64_t)v126 / 2]
                   + v12[1].u16[3] * *v707
                   + v12[2].u16[0] * v707[(unint64_t)v126 / 2]
                   + v12[2].u16[1] * v707[(unint64_t)v126 / 2 + (unint64_t)v126 / 2]
                   + v12[2].u16[2]
                   * v707[(unint64_t)v126 / 2
                                      + (unint64_t)v126 / 2
                                      + (unint64_t)v126 / 2]) >> 15;
          uint64_t v706 = (uint16x4_t *)((char *)v706 + 2);
          --v703;
        }
        while (v703);
        goto LABEL_480;
      }
      uint64_t v131 = 0;
      unint64_t v642 = v128 + v129;
      BOOL v644 = v128 < (unint64_t)v124 + 10 * v125 + v129 && (unint64_t)v124 + 10 * v125 < v642;
      BOOL v646 = v128 < (unint64_t)&v124[v130] + v129 && (unint64_t)&v124[v130] < v642;
      BOOL v648 = v128 < (unint64_t)v124 + 6 * v125 + v129 && (unint64_t)v124 + 6 * v125 < v642;
      BOOL v650 = v128 < (unint64_t)v124 + v127 + v129 && (unint64_t)v124 + v127 < v642;
      BOOL v652 = v128 < (unint64_t)v124 + v126 + v129 && (unint64_t)v124 + v126 < v642;
      BOOL v654 = v128 < (unint64_t)v124 + v129 && (unint64_t)v124 < v642;
      if ((unint64_t)v12 < v642 && v128 < (unint64_t)&v12[2] + 6) {
        goto LABEL_478;
      }
      if (v644) {
        goto LABEL_478;
      }
      if (v646) {
        goto LABEL_478;
      }
      if (v648) {
        goto LABEL_478;
      }
      if (v650) {
        goto LABEL_478;
      }
      if (v652) {
        goto LABEL_478;
      }
      if (v654) {
        goto LABEL_478;
      }
      float32x4_t v656 = (const __int16 *)v12;
      uint16x4_t v657 = (uint16x4_t)vld1_dup_s16(v656++);
      uint16x4_t v658 = (uint16x4_t)vld1_dup_s16(v656);
      float32x4_t v659 = (const __int16 *)v12 + 2;
      uint16x4_t v660 = (uint16x4_t)vld1_dup_s16(v659);
      uint32x4_t v661 = vaddw_u16(vaddl_u16(v658, v657), v660);
      float v662 = (const __int16 *)v12 + 3;
      uint16x4_t v663 = (uint16x4_t)vld1_dup_s16(v662);
      uint32x4_t v664 = vaddw_u16(v661, v663);
      uint64_t v665 = (const __int16 *)&v12[1];
      uint16x4_t v666 = (uint16x4_t)vld1_dup_s16(v665);
      unint64_t v667 = (const __int16 *)&v12[1] + 1;
      uint16x4_t v668 = (uint16x4_t)vld1_dup_s16(v667);
      int16x8_t v669 = (int16x8_t)vaddw_u16(vaddw_u16(v664, v666), v668);
      uint64_t v670 = (const __int16 *)&v12[1] + 2;
      uint16x4_t v671 = (uint16x4_t)vld1_dup_s16(v670);
      int16x8_t v672 = (int16x8_t)vmovl_u16(v671);
      float v673 = (const __int16 *)&v12[1] + 3;
      uint16x4_t v674 = (uint16x4_t)vld1_dup_s16(v673);
      float v675 = (const __int16 *)&v12[2];
      uint16x4_t v676 = (uint16x4_t)vld1_dup_s16(v675);
      int16x8_t v677 = (int16x8_t)vmovl_u16(v674);
      int16x8_t v678 = (int16x8_t)vmovl_u16(v676);
      float32x4_t v679 = (const __int16 *)&v12[2] + 1;
      uint16x4_t v680 = (uint16x4_t)vld1_dup_s16(v679);
      int16x8_t v681 = (int16x8_t)vmovl_u16(v680);
      float32x4_t v682 = (const __int16 *)&v12[2] + 2;
      uint16x4_t v683 = (uint16x4_t)vld1_dup_s16(v682);
      int16x8_t v684 = (int16x8_t)vmovl_u16(v683);
      uint16x8_t v685 = (uint16x8_t)vuzp1q_s16(v669, v672);
      uint16x4_t v686 = (uint16x4_t)vmovn_s32((int32x4_t)v672);
      uint64_t v131 = v3518 & 0xFFFFFFF8;
      uint16x8_t v687 = (uint16x8_t)vuzp1q_s16(v669, v677);
      uint16x4_t v688 = (uint16x4_t)vmovn_s32((int32x4_t)v677);
      uint16x8_t v689 = (uint16x8_t)vuzp1q_s16(v669, v678);
      uint16x4_t v690 = (uint16x4_t)vmovn_s32((int32x4_t)v678);
      uint16x8_t v691 = (uint16x8_t)vuzp1q_s16(v669, v681);
      uint16x4_t v692 = (uint16x4_t)vmovn_s32((int32x4_t)v681);
      uint16x8_t v693 = (uint16x8_t)vuzp1q_s16(v669, v684);
      uint16x4_t v694 = (uint16x4_t)vmovn_s32((int32x4_t)v684);
      uint64_t v695 = v131;
      float32x4_t v696 = (int16x8_t *)*a2;
      long long v697 = (uint16x8_t *)*a1;
      do
      {
        uint16x8_t v698 = *(uint16x8_t *)((char *)v697 + 2 * v125);
        uint64_t v699 = (uint16x8_t *)((char *)v697 + v126 + v126);
        uint32x4_t v700 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v669, (int32x4_t)vmovl_high_u16(*v697)), v685, v698), v687, *v699);
        uint32x4_t v701 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v669, (int32x4_t)vmovl_u16(*(uint16x4_t *)v697->i8)), v686, *(uint16x4_t *)v698.i8), v688, *(uint16x4_t *)v699->i8);
        float v702 = (uint16x4_t *)&v699->i8[v126];
        *v696++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v701, v690, *v702), v692, *(uint16x4_t *)((char *)v702 + 2 * v125)), v694, *(uint16x4_t *)((char *)v702 + 2 * v125 + 2 * v125)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v700, v689, *(uint16x8_t *)v702->i8), v691, *(uint16x8_t *)&v702->i8[2 * v125]), v693, *(uint16x8_t *)&v702->i8[2 * v125 + 2 * v125]), 0xFuLL);
        ++v697;
        v695 -= 8;
      }
      while (v695);
      if (v131 != v3518) {
        goto LABEL_478;
      }
LABEL_480:
      unint64_t v708 = a2[2];
      uint64_t v709 = 6 * v125;
      if (v3518 >= 8)
      {
        uint64_t v710 = 0;
        unint64_t v941 = v128 + 2 * v708;
        unint64_t v942 = v128 + v129 + 2 * v708;
        uint64_t v711 = v125;
        BOOL v944 = v941 < (unint64_t)v124 + 12 * v125 + v129 && (unint64_t)v124 + 12 * v125 < v942;
        BOOL v946 = v941 < (unint64_t)v124 + 10 * v125 + v129 && (unint64_t)v124 + 10 * v125 < v942;
        BOOL v948 = v941 < (unint64_t)&v124[v130] + v129 && (unint64_t)&v124[v130] < v942;
        BOOL v950 = v941 < (unint64_t)v124 + v709 + v129 && (unint64_t)v124 + v709 < v942;
        BOOL v952 = v941 < (unint64_t)v124 + v127 + v129 && (unint64_t)v124 + v127 < v942;
        BOOL v954 = v941 < (unint64_t)v124 + v126 + v129 && (unint64_t)v124 + v126 < v942;
        BOOL v956 = v941 < (unint64_t)v124 + v129 && (unint64_t)v124 < v942;
        if (((unint64_t)v12 >= v942 || v941 >= (unint64_t)&v12[2] + 6)
          && !v944
          && !v946
          && !v948
          && !v950
          && !v952
          && !v954
          && !v956)
        {
          int32x2_t v958 = (const __int16 *)v12;
          uint16x4_t v959 = (uint16x4_t)vld1_dup_s16(v958++);
          uint16x4_t v960 = (uint16x4_t)vld1_dup_s16(v958);
          uint32x4_t v961 = vaddl_u16(v960, v959);
          int32x2_t v962 = (const __int16 *)v12 + 2;
          uint16x4_t v963 = (uint16x4_t)vld1_dup_s16(v962);
          uint32x4_t v964 = vaddw_u16(v961, v963);
          int v965 = (const __int16 *)v12 + 3;
          uint16x4_t v966 = (uint16x4_t)vld1_dup_s16(v965);
          float v967 = (const __int16 *)&v12[1];
          uint16x4_t v968 = (uint16x4_t)vld1_dup_s16(v967);
          int16x8_t v969 = (int16x8_t)vaddw_u16(vaddw_u16(v964, v966), v968);
          float32x4_t v970 = (const __int16 *)&v12[1] + 1;
          uint16x4_t v971 = (uint16x4_t)vld1_dup_s16(v970);
          int16x8_t v972 = (int16x8_t)vmovl_u16(v971);
          float32x4_t v973 = (const __int16 *)&v12[1] + 2;
          uint16x4_t v974 = (uint16x4_t)vld1_dup_s16(v973);
          float32x4_t v975 = (const __int16 *)&v12[1] + 3;
          uint16x4_t v976 = (uint16x4_t)vld1_dup_s16(v975);
          int16x8_t v977 = (int16x8_t)vmovl_u16(v974);
          int16x8_t v978 = (int16x8_t)vmovl_u16(v976);
          int32x4_t v979 = (const __int16 *)&v12[2];
          uint16x4_t v980 = (uint16x4_t)vld1_dup_s16(v979);
          int16x8_t v981 = (int16x8_t)vmovl_u16(v980);
          float v982 = (const __int16 *)&v12[2] + 1;
          uint16x4_t v983 = (uint16x4_t)vld1_dup_s16(v982);
          float32x4_t v984 = (const __int16 *)&v12[2] + 2;
          uint16x4_t v985 = (uint16x4_t)vld1_dup_s16(v984);
          int16x8_t v986 = (int16x8_t)vmovl_u16(v983);
          int16x8_t v987 = (int16x8_t)vmovl_u16(v985);
          uint16x8_t v988 = (uint16x8_t)vuzp1q_s16(v969, v972);
          uint16x4_t v989 = (uint16x4_t)vmovn_s32((int32x4_t)v972);
          uint64_t v710 = v3518 & 0xFFFFFFF8;
          uint16x8_t v990 = (uint16x8_t)vuzp1q_s16(v969, v977);
          float32x4_t v991 = (int16x8_t *)(v128 + 2 * v708);
          uint16x4_t v992 = (uint16x4_t)vmovn_s32((int32x4_t)v977);
          uint16x8_t v993 = (uint16x8_t)vuzp1q_s16(v969, v978);
          uint16x4_t v994 = (uint16x4_t)vmovn_s32((int32x4_t)v978);
          uint16x8_t v995 = (uint16x8_t)vuzp1q_s16(v969, v981);
          uint16x4_t v996 = (uint16x4_t)vmovn_s32((int32x4_t)v981);
          uint16x8_t v997 = (uint16x8_t)vuzp1q_s16(v969, v986);
          uint16x4_t v998 = (uint16x4_t)vmovn_s32((int32x4_t)v986);
          uint16x8_t v999 = (uint16x8_t)vuzp1q_s16(v969, v987);
          uint16x4_t v1000 = (uint16x4_t)vmovn_s32((int32x4_t)v987);
          uint64_t v1001 = v710;
          float v1002 = (uint16x8_t *)v124;
          do
          {
            uint16x8_t v1003 = *(uint16x8_t *)((char *)v1002 + 2 * v125);
            double v1004 = (uint16x8_t *)((char *)v1002 + v126 + v126);
            uint32x4_t v1005 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v969, (int32x4_t)vmovl_high_u16(*v1002)), v988, v1003), v990, *v1004);
            uint32x4_t v1006 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v969, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1002->i8)), v989, *(uint16x4_t *)v1003.i8), v992, *(uint16x4_t *)v1004->i8);
            int32x2_t v1007 = (uint16x8_t *)((char *)v1004 + v126);
            uint32x4_t v1008 = vmlal_high_u16(v1005, v993, *v1007);
            uint32x4_t v1009 = vmlal_u16(v1006, v994, *(uint16x4_t *)v1007->i8);
            int32x2_t v1010 = (uint16x4_t *)&v1007->i8[v126];
            *v991++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1009, v996, *v1010), v998, *(uint16x4_t *)((char *)v1010 + 2 * v125)), v1000, *(uint16x4_t *)((char *)v1010 + 2 * v125 + 2 * v125)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1008, v995, *(uint16x8_t *)v1010->i8), v997, *(uint16x8_t *)&v1010->i8[2 * v125]), v999, *(uint16x8_t *)&v1010->i8[2 * v125 + 2 * v125]), 0xFuLL);
            ++v1002;
            v1001 -= 8;
          }
          while (v1001);
          if (v710 == v3518)
          {
LABEL_717:
            uint64_t v1017 = 16 * v125;
            unint64_t v3508 = v128;
            uint64_t v1018 = 0;
            if (v3518 < 8) {
              goto LABEL_782;
            }
            unint64_t v1019 = v128 + 4 * v708;
            unint64_t v1020 = v128 + 4 * v708 + v129;
            BOOL v1021 = v1019 >= (unint64_t)v124 + v1017 - v126 + v129
                 || (unint64_t)v124 + v1017 - v126 >= v1020;
            BOOL v1022 = !v1021;
            BOOL v1023 = v1019 >= (unint64_t)v124 + 12 * v125 + v129 || (unint64_t)v124 + 12 * v125 >= v1020;
            BOOL v1024 = !v1023;
            BOOL v1025 = v1019 >= (unint64_t)v124 + 10 * v125 + v129 || (unint64_t)v124 + 10 * v125 >= v1020;
            BOOL v1026 = !v1025;
            BOOL v1027 = v1019 >= (unint64_t)&v124[v711] + v129 || (unint64_t)&v124[v711] >= v1020;
            BOOL v1028 = !v1027;
            BOOL v1029 = v1019 >= (unint64_t)v124 + v709 + v129 || (unint64_t)v124 + v709 >= v1020;
            BOOL v1030 = !v1029;
            BOOL v1031 = v1019 >= (unint64_t)v124 + v127 + v129 || (unint64_t)v124 + v127 >= v1020;
            BOOL v1032 = !v1031;
            BOOL v1033 = v1019 >= (unint64_t)v124 + v126 + v129 || (unint64_t)v124 + v126 >= v1020;
            BOOL v1034 = !v1033;
            BOOL v1035 = v1019 >= (unint64_t)v124 + v129 || (unint64_t)v124 >= v1020;
            BOOL v1036 = !v1035;
            if ((unint64_t)v12 < v1020 && v1019 < (unint64_t)&v12[2] + 6) {
              goto LABEL_782;
            }
            if (v1022) {
              goto LABEL_782;
            }
            if (v1024) {
              goto LABEL_782;
            }
            if (v1026) {
              goto LABEL_782;
            }
            if (v1028) {
              goto LABEL_782;
            }
            if (v1030) {
              goto LABEL_782;
            }
            if (v1032) {
              goto LABEL_782;
            }
            if (v1034) {
              goto LABEL_782;
            }
            if (v1036) {
              goto LABEL_782;
            }
            float32x4_t v1038 = (const __int16 *)v12;
            uint16x4_t v1039 = (uint16x4_t)vld1_dup_s16(v1038++);
            uint16x4_t v1040 = (uint16x4_t)vld1_dup_s16(v1038);
            uint32x4_t v1041 = vaddl_u16(v1040, v1039);
            float v1042 = (const __int16 *)v12 + 2;
            uint16x4_t v1043 = (uint16x4_t)vld1_dup_s16(v1042);
            float v1044 = (const __int16 *)v12 + 3;
            uint16x4_t v1045 = (uint16x4_t)vld1_dup_s16(v1044);
            int16x8_t v1046 = (int16x8_t)vaddw_u16(vaddw_u16(v1041, v1043), v1045);
            float v1047 = (const __int16 *)&v12[1];
            uint16x4_t v1048 = (uint16x4_t)vld1_dup_s16(v1047);
            int16x8_t v1049 = (int16x8_t)vmovl_u16(v1048);
            float v1050 = (const __int16 *)&v12[1] + 1;
            uint16x4_t v1051 = (uint16x4_t)vld1_dup_s16(v1050);
            double v1052 = (const __int16 *)&v12[1] + 2;
            uint16x4_t v1053 = (uint16x4_t)vld1_dup_s16(v1052);
            int16x8_t v1054 = (int16x8_t)vmovl_u16(v1051);
            int16x8_t v1055 = (int16x8_t)vmovl_u16(v1053);
            int32x2_t v1056 = (const __int16 *)&v12[1] + 3;
            uint16x4_t v1057 = (uint16x4_t)vld1_dup_s16(v1056);
            int16x8_t v1058 = (int16x8_t)vmovl_u16(v1057);
            int32x2_t v1059 = (const __int16 *)&v12[2];
            uint16x4_t v1060 = (uint16x4_t)vld1_dup_s16(v1059);
            int v1061 = (const __int16 *)&v12[2] + 1;
            uint16x4_t v1062 = (uint16x4_t)vld1_dup_s16(v1061);
            int16x8_t v1063 = (int16x8_t)vmovl_u16(v1060);
            int16x8_t v1064 = (int16x8_t)vmovl_u16(v1062);
            float32x4_t v1065 = (const __int16 *)&v12[2] + 2;
            uint16x4_t v1066 = (uint16x4_t)vld1_dup_s16(v1065);
            int16x8_t v1067 = (int16x8_t)vmovl_u16(v1066);
            uint16x8_t v1068 = (uint16x8_t)vuzp1q_s16(v1046, v1049);
            uint16x4_t v1069 = (uint16x4_t)vmovn_s32((int32x4_t)v1049);
            uint64_t v1018 = v3518 & 0xFFFFFFF8;
            uint16x8_t v1070 = (uint16x8_t)vuzp1q_s16(v1046, v1054);
            float32x4_t v1071 = (int16x8_t *)(v128 + 4 * v708);
            uint16x4_t v1072 = (uint16x4_t)vmovn_s32((int32x4_t)v1054);
            uint16x8_t v1073 = (uint16x8_t)vuzp1q_s16(v1046, v1055);
            uint16x4_t v1074 = (uint16x4_t)vmovn_s32((int32x4_t)v1055);
            uint16x8_t v1075 = (uint16x8_t)vuzp1q_s16(v1046, v1058);
            uint16x4_t v1076 = (uint16x4_t)vmovn_s32((int32x4_t)v1058);
            uint16x8_t v1077 = (uint16x8_t)vuzp1q_s16(v1046, v1063);
            uint16x4_t v1078 = (uint16x4_t)vmovn_s32((int32x4_t)v1063);
            uint16x8_t v1079 = (uint16x8_t)vuzp1q_s16(v1046, v1064);
            uint16x4_t v1080 = (uint16x4_t)vmovn_s32((int32x4_t)v1064);
            uint16x8_t v1081 = (uint16x8_t)vuzp1q_s16(v1046, v1067);
            uint16x4_t v1082 = (uint16x4_t)vmovn_s32((int32x4_t)v1067);
            uint64_t v1083 = v1018;
            float32x4_t v1084 = (uint16x8_t *)v124;
            do
            {
              uint16x8_t v1085 = *(uint16x8_t *)((char *)v1084 + 2 * v125);
              uint32x4_t v1086 = vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1046, (int32x4_t)vmovl_high_u16(*v1084)), v1068, v1085);
              uint32x4_t v1087 = vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1046, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1084->i8)), v1069, *(uint16x4_t *)v1085.i8);
              int v1088 = (uint16x4_t *)&v1084->i8[v126 + v126];
              uint16x8_t v1089 = *(uint16x8_t *)v1088->i8;
              uint32x4_t v1090 = vmlal_u16(v1087, v1072, *v1088);
              float v1091 = (uint16x8_t *)((char *)v1088 + v126);
              uint32x4_t v1092 = vmlal_high_u16(vmlal_high_u16(v1086, v1070, v1089), v1073, *v1091);
              uint32x4_t v1093 = vmlal_u16(v1090, v1074, *(uint16x4_t *)v1091->i8);
              float v1094 = (uint16x8_t *)((char *)v1091 + v126);
              uint32x4_t v1095 = vmlal_high_u16(v1092, v1075, *v1094);
              uint32x4_t v1096 = vmlal_u16(v1093, v1076, *(uint16x4_t *)v1094->i8);
              double v1097 = (uint16x4_t *)&v1094->i8[v126];
              *v1071++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1096, v1078, *v1097), v1080, *(uint16x4_t *)((char *)v1097 + 2 * v125)), v1082, *(uint16x4_t *)((char *)v1097 + 2 * v125 + 2 * v125)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1095, v1077, *(uint16x8_t *)v1097->i8), v1079, *(uint16x8_t *)&v1097->i8[2 * v125]), v1081, *(uint16x8_t *)&v1097->i8[2 * v125 + 2 * v125]), 0xFuLL);
              ++v1084;
              v1083 -= 8;
            }
            while (v1083);
            if (v1018 != v3518)
            {
LABEL_782:
              uint64_t v1098 = v3518 - v1018;
              uint64_t v1099 = 2 * v1018;
              unint64_t v1100 = (_WORD *)(v128 + 2 * v1018 + 4 * v708);
              long long v1101 = (uint16x4_t *)((char *)v124 + v1099);
              do
              {
                long long v1102 = (unsigned __int16 *)((char *)v1101 + v126 + v126);
                int v1103 = *v1102;
                double v1104 = &v1102[(unint64_t)v126 / 2];
                int v1105 = vaddvq_s32((int32x4_t)vmovl_u16(*v12)) * v1101->u16[0]
                      + v12[1].u16[0] * v1101->u16[v125]
                      + v12[1].u16[1] * v1103;
                int v1106 = *v1104;
                float v1107 = &v1104[(unint64_t)v126 / 2];
                *v1100++ = (v1105
                          + v12[1].u16[2] * v1106
                          + v12[1].u16[3] * *v1107
                          + v12[2].u16[0] * v1107[(unint64_t)v126 / 2]
                          + v12[2].u16[1] * v1107[(unint64_t)v126 / 2 + (unint64_t)v126 / 2]
                          + v12[2].u16[2]
                          * v1107[(unint64_t)v126 / 2
                                              + (unint64_t)v126 / 2
                                              + (unint64_t)v126 / 2]) >> 15;
                long long v1101 = (uint16x4_t *)((char *)v1101 + 2);
                --v1098;
              }
              while (v1098);
            }
            if (v3518 >= 8)
            {
              uint64_t v1109 = 0;
              unint64_t v1462 = v128 + 6 * v708;
              unint64_t v1463 = v128 + 6 * v708 + v129;
              uint64_t v1108 = 4 * v125;
              BOOL v1465 = v1462 < (unint64_t)&v124[(unint64_t)v1017 / 8] + v129
                   && (unint64_t)&v124[(unint64_t)v1017 / 8] < v1463;
              BOOL v1467 = v1462 < (unint64_t)v124 + v1017 - v126 + v129
                   && (unint64_t)v124 + v1017 - v126 < v1463;
              BOOL v1469 = v1462 < (unint64_t)v124 + 12 * v125 + v129 && (unint64_t)v124 + 12 * v125 < v1463;
              BOOL v1471 = v1462 < (unint64_t)v124 + 10 * v125 + v129 && (unint64_t)v124 + 10 * v125 < v1463;
              BOOL v1473 = v1462 < (unint64_t)&v124[v711] + v129 && (unint64_t)&v124[v711] < v1463;
              BOOL v1475 = v1462 < (unint64_t)v124 + v709 + v129 && (unint64_t)v124 + v709 < v1463;
              BOOL v1477 = v1462 < (unint64_t)v124 + v127 + v129 && (unint64_t)v124 + v127 < v1463;
              BOOL v1479 = v1462 < (unint64_t)v124 + v126 + v129 && (unint64_t)v124 + v126 < v1463;
              BOOL v1481 = v1462 < (unint64_t)v124 + v129 && (unint64_t)v124 < v1463;
              if (((unint64_t)v12 >= v1463 || v1462 >= (unint64_t)&v12[2] + 6)
                && !v1465
                && !v1467
                && !v1469
                && !v1471
                && !v1473
                && !v1475
                && !v1477
                && !v1479
                && !v1481)
              {
                float v1483 = (const __int16 *)v12;
                uint16x4_t v1484 = (uint16x4_t)vld1_dup_s16(v1483++);
                uint64_t v1109 = v3518 & 0xFFFFFFF8;
                uint16x4_t v1485 = (uint16x4_t)vld1_dup_s16(v1483);
                float v1486 = (const __int16 *)v12 + 2;
                uint16x4_t v1487 = (uint16x4_t)vld1_dup_s16(v1486);
                int16x8_t v1488 = (int16x8_t)vaddw_u16(vaddl_u16(v1485, v1484), v1487);
                float v1489 = (const __int16 *)v12 + 3;
                uint16x4_t v1490 = (uint16x4_t)vld1_dup_s16(v1489);
                int16x8_t v1491 = (int16x8_t)vmovl_u16(v1490);
                float v1492 = (const __int16 *)&v12[1];
                uint16x4_t v1493 = (uint16x4_t)vld1_dup_s16(v1492);
                float v1494 = (const __int16 *)&v12[1] + 1;
                uint16x4_t v1495 = (uint16x4_t)vld1_dup_s16(v1494);
                int16x8_t v1496 = (int16x8_t)vmovl_u16(v1493);
                int16x8_t v1497 = (int16x8_t)vmovl_u16(v1495);
                float v1498 = (const __int16 *)&v12[1] + 2;
                uint16x4_t v1499 = (uint16x4_t)vld1_dup_s16(v1498);
                int16x8_t v1500 = (int16x8_t)vmovl_u16(v1499);
                float v1501 = (const __int16 *)&v12[1] + 3;
                uint16x4_t v1502 = (uint16x4_t)vld1_dup_s16(v1501);
                v1503 = (const __int16 *)&v12[2];
                uint16x4_t v1504 = (uint16x4_t)vld1_dup_s16(v1503);
                int16x8_t v1505 = (int16x8_t)vmovl_u16(v1502);
                int16x8_t v1506 = (int16x8_t)vmovl_u16(v1504);
                uint64_t v1507 = (const __int16 *)&v12[2] + 1;
                uint16x4_t v1508 = (uint16x4_t)vld1_dup_s16(v1507);
                int16x8_t v1509 = (int16x8_t)vmovl_u16(v1508);
                uint64_t v1510 = (const __int16 *)&v12[2] + 2;
                uint16x4_t v1511 = (uint16x4_t)vld1_dup_s16(v1510);
                int16x8_t v1512 = (int16x8_t)vmovl_u16(v1511);
                uint16x8_t v1513 = (uint16x8_t)vuzp1q_s16(v1488, v1491);
                uint16x4_t v1514 = (uint16x4_t)vmovn_s32((int32x4_t)v1491);
                uint16x8_t v1515 = (uint16x8_t)vuzp1q_s16(v1488, v1496);
                uint16x4_t v1516 = (uint16x4_t)vmovn_s32((int32x4_t)v1496);
                int v1517 = (int16x8_t *)(v128 + 6 * v708);
                uint16x8_t v1518 = (uint16x8_t)vuzp1q_s16(v1488, v1497);
                uint16x4_t v1519 = (uint16x4_t)vmovn_s32((int32x4_t)v1497);
                uint16x8_t v1520 = (uint16x8_t)vuzp1q_s16(v1488, v1500);
                uint16x4_t v1521 = (uint16x4_t)vmovn_s32((int32x4_t)v1500);
                uint16x8_t v1522 = (uint16x8_t)vuzp1q_s16(v1488, v1505);
                uint16x4_t v1523 = (uint16x4_t)vmovn_s32((int32x4_t)v1505);
                uint16x8_t v1524 = (uint16x8_t)vuzp1q_s16(v1488, v1506);
                uint16x4_t v1525 = (uint16x4_t)vmovn_s32((int32x4_t)v1506);
                uint16x8_t v1526 = (uint16x8_t)vuzp1q_s16(v1488, v1509);
                uint16x4_t v1527 = (uint16x4_t)vmovn_s32((int32x4_t)v1509);
                uint16x8_t v1528 = (uint16x8_t)vuzp1q_s16(v1488, v1512);
                uint16x4_t v1529 = (uint16x4_t)vmovn_s32((int32x4_t)v1512);
                uint64_t v1530 = v1109;
                BOOL v1531 = (uint16x8_t *)v124;
                do
                {
                  uint16x8_t v1532 = *(uint16x8_t *)((char *)v1531 + 2 * v125);
                  float v1533 = (uint16x8_t *)((char *)v1531 + v126 + v126);
                  uint32x4_t v1534 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1488, (int32x4_t)vmovl_high_u16(*v1531)), v1513, v1532), v1515, *v1533);
                  uint32x4_t v1535 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1488, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1531->i8)), v1514, *(uint16x4_t *)v1532.i8), v1516, *(uint16x4_t *)v1533->i8);
                  int32x2_t v1536 = (uint16x4_t *)&v1533->i8[v126];
                  uint16x8_t v1537 = *(uint16x8_t *)v1536->i8;
                  uint32x4_t v1538 = vmlal_u16(v1535, v1519, *v1536);
                  BOOL v1539 = (uint16x8_t *)((char *)v1536 + v126);
                  uint32x4_t v1540 = vmlal_high_u16(vmlal_high_u16(v1534, v1518, v1537), v1520, *v1539);
                  uint32x4_t v1541 = vmlal_u16(v1538, v1521, *(uint16x4_t *)v1539->i8);
                  uint64_t v1542 = (uint16x8_t *)((char *)v1539 + v126);
                  uint32x4_t v1543 = vmlal_high_u16(v1540, v1522, *v1542);
                  uint32x4_t v1544 = vmlal_u16(v1541, v1523, *(uint16x4_t *)v1542->i8);
                  BOOL v1545 = (uint16x4_t *)&v1542->i8[v126];
                  *v1517++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1544, v1525, *v1545), v1527, *(uint16x4_t *)((char *)v1545 + 2 * v125)), v1529, *(uint16x4_t *)((char *)v1545 + 2 * v125 + 2 * v125)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1543, v1524, *(uint16x8_t *)v1545->i8), v1526, *(uint16x8_t *)&v1545->i8[2 * v125]), v1528, *(uint16x8_t *)&v1545->i8[2 * v125 + 2 * v125]), 0xFuLL);
                  ++v1531;
                  v1530 -= 8;
                }
                while (v1530);
                if (v1109 == v3518)
                {
LABEL_1127:
                  if (v3518 >= 8)
                  {
                    uint64_t v1554 = 0;
                    unint64_t v2132 = v128 + 8 * v708;
                    unint64_t v2133 = v128 + 8 * v708 + v129;
                    v2134 = (char *)v124 + 18 * v125;
                    unint64_t v2135 = (unint64_t)v124 + 18 * v125 + v129;
                    v2136 = &v124[(unint64_t)v1017 / 8];
                    unint64_t v2137 = (unint64_t)&v124[(unint64_t)v1017 / 8] + v129;
                    uint64_t v2138 = v1017 - v126;
                    v2139 = (char *)v124 + v2138;
                    unint64_t v2140 = (unint64_t)v124 + v2138 + v129;
                    v2141 = (char *)v124 + 12 * v125;
                    unint64_t v2142 = (unint64_t)v124 + 12 * v125 + v129;
                    uint64_t v2143 = 10 * v125;
                    v2144 = (char *)v124 + v2143;
                    unint64_t v2145 = (unint64_t)v124 + v2143 + v129;
                    v2146 = &v124[v711];
                    unint64_t v2147 = (unint64_t)&v124[v711] + v129;
                    v2148 = (char *)v124 + v709;
                    unint64_t v2149 = (unint64_t)v124 + v709 + v129;
                    v2150 = (char *)v124 + v1108;
                    unint64_t v2151 = (unint64_t)v124 + v1108 + v129;
                    unint64_t v2152 = (unint64_t)v124 + v126 + v129;
                    unint64_t v2153 = (unint64_t)v124 + v129;
                    BOOL v2155 = v2132 < v2135 && (unint64_t)v2134 < v2133;
                    BOOL v2157 = v2132 < v2137 && (unint64_t)v2136 < v2133;
                    BOOL v2159 = v2132 < v2140 && (unint64_t)v2139 < v2133;
                    BOOL v2161 = v2132 < v2142 && (unint64_t)v2141 < v2133;
                    BOOL v2163 = v2132 < v2145 && (unint64_t)v2144 < v2133;
                    BOOL v2165 = v2132 < v2147 && (unint64_t)v2146 < v2133;
                    BOOL v2167 = v2132 < v2149 && (unint64_t)v2148 < v2133;
                    BOOL v2169 = v2132 < v2151 && (unint64_t)v2150 < v2133;
                    BOOL v2171 = v2132 < v2152 && (unint64_t)v124 + v126 < v2133;
                    BOOL v2173 = v2132 < v2153 && (unint64_t)v124 < v2133;
                    BOOL v2174 = (unint64_t)v12 >= v2133 || v2132 >= (unint64_t)&v12[2] + 6;
                    if (!v2174 || v2155)
                    {
                      unint64_t v128 = v3508;
                    }
                    else
                    {
                      unint64_t v128 = v3508;
                      if (!v2157 && !v2159 && !v2161 && !v2163 && !v2165 && !v2167 && !v2169 && !v2171 && !v2173)
                      {
                        v2175 = (const __int16 *)v12;
                        uint16x4_t v2176 = (uint16x4_t)vld1_dup_s16(v2175++);
                        uint16x4_t v2177 = (uint16x4_t)vld1_dup_s16(v2175);
                        int16x8_t v2178 = (int16x8_t)vaddl_u16(v2177, v2176);
                        v2179 = (const __int16 *)v12 + 2;
                        uint16x4_t v2180 = (uint16x4_t)vld1_dup_s16(v2179);
                        int16x8_t v2181 = (int16x8_t)vmovl_u16(v2180);
                        v2182 = (const __int16 *)v12 + 3;
                        uint16x4_t v2183 = (uint16x4_t)vld1_dup_s16(v2182);
                        v2184 = (const __int16 *)&v12[1];
                        uint16x4_t v2185 = (uint16x4_t)vld1_dup_s16(v2184);
                        int16x8_t v2186 = (int16x8_t)vmovl_u16(v2183);
                        int16x8_t v2187 = (int16x8_t)vmovl_u16(v2185);
                        v2188 = (const __int16 *)&v12[1] + 1;
                        uint16x4_t v2189 = (uint16x4_t)vld1_dup_s16(v2188);
                        int16x8_t v2190 = (int16x8_t)vmovl_u16(v2189);
                        v2191 = (const __int16 *)&v12[1] + 2;
                        uint16x4_t v2192 = (uint16x4_t)vld1_dup_s16(v2191);
                        v2193 = (const __int16 *)&v12[1] + 3;
                        uint16x4_t v2194 = (uint16x4_t)vld1_dup_s16(v2193);
                        int16x8_t v2195 = (int16x8_t)vmovl_u16(v2192);
                        int16x8_t v2196 = (int16x8_t)vmovl_u16(v2194);
                        v2197 = (const __int16 *)&v12[2];
                        uint16x4_t v2198 = (uint16x4_t)vld1_dup_s16(v2197);
                        int16x8_t v2199 = (int16x8_t)vmovl_u16(v2198);
                        v2200 = (const __int16 *)&v12[2] + 1;
                        uint16x4_t v2201 = (uint16x4_t)vld1_dup_s16(v2200);
                        v2202 = (const __int16 *)&v12[2] + 2;
                        uint16x4_t v2203 = (uint16x4_t)vld1_dup_s16(v2202);
                        int16x8_t v2204 = (int16x8_t)vmovl_u16(v2201);
                        int16x8_t v2205 = (int16x8_t)vmovl_u16(v2203);
                        uint16x8_t v2206 = (uint16x8_t)vuzp1q_s16(v2178, v2181);
                        uint16x4_t v2207 = (uint16x4_t)vmovn_s32((int32x4_t)v2181);
                        uint64_t v1554 = v3518 & 0xFFFFFFF8;
                        uint16x8_t v2208 = (uint16x8_t)vuzp1q_s16(v2178, v2186);
                        v2209 = (int16x8_t *)(v3508 + 8 * v708);
                        uint16x4_t v2210 = (uint16x4_t)vmovn_s32((int32x4_t)v2186);
                        uint16x8_t v2211 = (uint16x8_t)vuzp1q_s16(v2178, v2187);
                        uint16x4_t v2212 = (uint16x4_t)vmovn_s32((int32x4_t)v2187);
                        uint16x8_t v2213 = (uint16x8_t)vuzp1q_s16(v2178, v2190);
                        uint16x4_t v2214 = (uint16x4_t)vmovn_s32((int32x4_t)v2190);
                        uint16x8_t v2215 = (uint16x8_t)vuzp1q_s16(v2178, v2195);
                        uint16x4_t v2216 = (uint16x4_t)vmovn_s32((int32x4_t)v2195);
                        uint16x8_t v2217 = (uint16x8_t)vuzp1q_s16(v2178, v2196);
                        uint16x4_t v2218 = (uint16x4_t)vmovn_s32((int32x4_t)v2196);
                        uint16x8_t v2219 = (uint16x8_t)vuzp1q_s16(v2178, v2199);
                        uint16x4_t v2220 = (uint16x4_t)vmovn_s32((int32x4_t)v2199);
                        uint16x8_t v2221 = (uint16x8_t)vuzp1q_s16(v2178, v2204);
                        uint16x4_t v2222 = (uint16x4_t)vmovn_s32((int32x4_t)v2204);
                        uint16x8_t v2223 = (uint16x8_t)vuzp1q_s16(v2178, v2205);
                        uint16x4_t v2224 = (uint16x4_t)vmovn_s32((int32x4_t)v2205);
                        uint64_t v2225 = v1554;
                        v2226 = (uint16x8_t *)v124;
                        do
                        {
                          uint16x8_t v2227 = *(uint16x8_t *)((char *)v2226 + v126);
                          v2228 = (uint16x8_t *)((char *)v2226 + v126 + v126);
                          uint32x4_t v2229 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v2178, (int32x4_t)vmovl_high_u16(*v2226)), v2206, v2227), v2208, *v2228);
                          uint32x4_t v2230 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v2178, (int32x4_t)vmovl_u16(*(uint16x4_t *)v2226->i8)), v2207, *(uint16x4_t *)v2227.i8), v2210, *(uint16x4_t *)v2228->i8);
                          v2231 = (uint16x8_t *)((char *)v2228 + v126);
                          uint32x4_t v2232 = vmlal_high_u16(v2229, v2211, *v2231);
                          uint32x4_t v2233 = vmlal_u16(v2230, v2212, *(uint16x4_t *)v2231->i8);
                          v2234 = (uint16x4_t *)&v2231->i8[v126];
                          uint16x8_t v2235 = *(uint16x8_t *)v2234->i8;
                          uint32x4_t v2236 = vmlal_u16(v2233, v2214, *v2234);
                          v2237 = (uint16x8_t *)((char *)v2234 + v126);
                          uint32x4_t v2238 = vmlal_high_u16(vmlal_high_u16(v2232, v2213, v2235), v2215, *v2237);
                          uint32x4_t v2239 = vmlal_u16(v2236, v2216, *(uint16x4_t *)v2237->i8);
                          v2240 = (uint16x8_t *)((char *)v2237 + v126);
                          uint32x4_t v2241 = vmlal_high_u16(v2238, v2217, *v2240);
                          uint32x4_t v2242 = vmlal_u16(v2239, v2218, *(uint16x4_t *)v2240->i8);
                          v2243 = (uint16x4_t *)&v2240->i8[v126];
                          *v2209++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v2242, v2220, *v2243), v2222, *(uint16x4_t *)((char *)v2243 + v126)), v2224, *(uint16x4_t *)((char *)v2243 + v126 + v126)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v2241, v2219, *(uint16x8_t *)v2243->i8), v2221, *(uint16x8_t *)&v2243->i8[v126]), v2223, *(uint16x8_t *)&v2243->i8[v126 + v126]), 0xFuLL);
                          ++v2226;
                          v2225 -= 8;
                        }
                        while (v2225);
                        if (v1554 == v3518) {
                          goto LABEL_1582;
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v1554 = 0;
                  }
                  uint64_t v2244 = v3518 - v1554;
                  v2245 = (_WORD *)(v128 + 2 * v1554 + 8 * v708);
                  v2246 = (unsigned __int16 *)v124 + v1554;
                  do
                  {
                    v2247 = &v2246[(unint64_t)v126 / 2 + (unint64_t)v126 / 2];
                    int v2248 = *v2247;
                    v2249 = &v2247[(unint64_t)v126 / 2];
                    int v2250 = (v12->u16[1] + v12->u16[0]) * *v2246
                          + v12->u16[2] * v2246[(unint64_t)v126 / 2]
                          + v12->u16[3] * v2248
                          + v12[1].u16[0] * *v2249;
                    v2251 = &v2249[(unint64_t)v126 / 2];
                    int v2252 = *v2251;
                    v2253 = &v2251[(unint64_t)v126 / 2];
                    int v2254 = v2250 + v12[1].u16[1] * v2252;
                    int v2255 = *v2253;
                    v2256 = &v2253[(unint64_t)v126 / 2];
                    *v2245++ = (v2254
                              + v12[1].u16[2] * v2255
                              + v12[1].u16[3] * *v2256
                              + v12[2].u16[0] * v2256[(unint64_t)v126 / 2]
                              + v12[2].u16[1] * v2256[(unint64_t)v126 / 2 + (unint64_t)v126 / 2]
                              + v12[2].u16[2]
                              * v2256[(unint64_t)v126 / 2
                                                  + (unint64_t)v126 / 2
                                                  + (unint64_t)v126 / 2]) >> 15;
                    ++v2246;
                    --v2244;
                  }
                  while (v2244);
LABEL_1582:
                  v2257 = a1;
                  int v2258 = *((_DWORD *)a1 + 3);
                  int v3475 = v2258 - 5;
                  uint64_t v3479 = v2258;
                  if (v2258 > 10)
                  {
                    uint64_t v2259 = 0;
                    uint64_t v2260 = 0;
                    uint64_t v2261 = (v2258 - 10);
                    uint64_t v3496 = 2 * v3518;
                    uint64_t v2262 = 5;
                    uint64_t v2263 = 10;
                    while ((int)v3518 <= 0)
                    {
                      uint64_t v2264 = v2260 + 1;
LABEL_1585:
                      ++v2262;
                      ++v2259;
                      v2263 += 2;
                      uint64_t v2260 = v2264;
                      if (v2264 == v2261) {
                        goto LABEL_1681;
                      }
                    }
                    uint64_t v2265 = *v2257;
                    uint64_t v2266 = v2257[2];
                    unint64_t v2267 = *a2;
                    unint64_t v2268 = a2[2];
                    uint64_t v2269 = v2260 * v2266;
                    uint64_t v2264 = v2260 + 1;
                    uint64_t v2270 = 2 * v2266;
                    if (v3518 < 8)
                    {
                      uint64_t v2271 = 0;
                      goto LABEL_1678;
                    }
                    uint64_t v2271 = 0;
                    uint64_t v2272 = v2260 + 2;
                    uint64_t v2273 = v2260 + 3;
                    uint64_t v2274 = v2260 + 4;
                    uint64_t v2275 = v2260 + 5;
                    uint64_t v2276 = v2260 + 6;
                    uint64_t v2277 = v2260 + 7;
                    uint64_t v2278 = v2260 + 8;
                    uint64_t v2279 = v2260 + 9;
                    uint64_t v2280 = v2260 + 10;
                    unint64_t v2281 = v2267 + v2268 * (2 * v2259 + 10);
                    unint64_t v2282 = v2281 + v3496;
                    uint64_t v2283 = v2270 * v2280;
                    uint64_t v2284 = v2265 + v3496;
                    uint64_t v2285 = v2270 * v2279;
                    unint64_t v2286 = v2265 + v2270 * v2279;
                    uint64_t v2287 = v2270 * v2278;
                    unint64_t v2288 = v2265 + v2287;
                    unint64_t v2289 = v2265 + v3496 + v2287;
                    uint64_t v2290 = v2270 * v2277;
                    unint64_t v2291 = v2265 + v2290;
                    unint64_t v2292 = v2265 + v3496 + v2290;
                    uint64_t v2293 = v2270 * v2276;
                    BOOL v145 = v2281 >= v2265 + v3496 + v2285;
                    unint64_t v2294 = v2265 + v2293;
                    unint64_t v2295 = v2265 + v3496 + v2293;
                    uint64_t v2296 = v2270 * v2275;
                    char v2298 = !v145 && v2286 < v2282;
                    unint64_t v2299 = v2265 + v2296;
                    unint64_t v2300 = v2284 + v2296;
                    uint64_t v2301 = v2270 * v2274;
                    BOOL v2303 = v2281 < v2289 && v2288 < v2282;
                    unint64_t v2304 = v2265 + v2301;
                    unint64_t v2305 = v2284 + v2301;
                    uint64_t v2306 = v2270 * v2273;
                    BOOL v2308 = v2281 < v2292 && v2291 < v2282;
                    BOOL v145 = v2281 >= v2295;
                    unint64_t v2309 = v2265 + v2306;
                    unint64_t v2310 = v2284 + v2306;
                    uint64_t v2311 = v2270 * v2272;
                    char v2313 = !v145 && v2294 < v2282;
                    unint64_t v2314 = v2265 + v2311;
                    unint64_t v2315 = v2284 + v2311;
                    BOOL v2317 = v2281 < v2300 && v2299 < v2282;
                    BOOL v145 = v2281 >= v2305;
                    uint64_t v2318 = v2270 * v2264;
                    char v2320 = !v145 && v2304 < v2282;
                    BOOL v145 = v2281 >= v2310;
                    unint64_t v2321 = v2265 + v2318;
                    unint64_t v2322 = v2284 + v2318;
                    char v2324 = !v145 && v2309 < v2282;
                    BOOL v145 = v2281 >= v2315;
                    uint64_t v2325 = 2 * v2269;
                    char v2327 = !v145 && v2314 < v2282;
                    unint64_t v2328 = v2265 + v2325;
                    unint64_t v2329 = v2284 + v2325;
                    BOOL v2331 = v2281 < v2322 && v2321 < v2282;
                    BOOL v2333 = v2281 < v2329 && v2328 < v2282;
                    BOOL v2335 = v2281 < (unint64_t)&v12[2] + 6 && (unint64_t)v12 < v2282;
                    BOOL v2336 = v2265 + v2283 >= v2282 || v2281 >= v2284 + v2283;
                    if (!v2336 || (v2298 & 1) != 0 || v2303)
                    {
                      uint64_t v2261 = (v3479 - 10);
                    }
                    else
                    {
                      uint64_t v2261 = (v3479 - 10);
                      if (!v2308 && (v2313 & 1) == 0 && !v2317 && (v2320 & 1) == 0 && (v2324 & 1) == 0)
                      {
                        unint64_t v2267 = *a2;
                        if ((v2327 & 1) == 0 && !v2331)
                        {
                          v2257 = a1;
                          if (!v2333)
                          {
                            unint64_t v2268 = a2[2];
                            if (!v2335)
                            {
                              v2337 = (const __int16 *)v12;
                              uint16x4_t v2338 = (uint16x4_t)vld1_dup_s16(v2337++);
                              int16x8_t v2339 = (int16x8_t)vmovl_u16(v2338);
                              uint16x4_t v2340 = (uint16x4_t)vld1_dup_s16(v2337);
                              int16x8_t v2341 = (int16x8_t)vmovl_u16(v2340);
                              v2342 = (const __int16 *)v12 + 2;
                              uint16x4_t v2343 = (uint16x4_t)vld1_dup_s16(v2342);
                              int16x8_t v2344 = (int16x8_t)vmovl_u16(v2343);
                              v2345 = (const __int16 *)v12 + 3;
                              uint16x4_t v2346 = (uint16x4_t)vld1_dup_s16(v2345);
                              int16x8_t v2347 = (int16x8_t)vmovl_u16(v2346);
                              v2348 = (const __int16 *)&v12[1];
                              uint16x4_t v2349 = (uint16x4_t)vld1_dup_s16(v2348);
                              int16x8_t v2350 = (int16x8_t)vmovl_u16(v2349);
                              v2351 = (const __int16 *)&v12[1] + 1;
                              uint16x4_t v2352 = (uint16x4_t)vld1_dup_s16(v2351);
                              int16x8_t v2353 = (int16x8_t)vmovl_u16(v2352);
                              v2354 = (const __int16 *)&v12[1] + 2;
                              uint16x4_t v2355 = (uint16x4_t)vld1_dup_s16(v2354);
                              int16x8_t v2356 = (int16x8_t)vmovl_u16(v2355);
                              v2357 = (const __int16 *)&v12[1] + 3;
                              uint16x4_t v2358 = (uint16x4_t)vld1_dup_s16(v2357);
                              int16x8_t v2359 = (int16x8_t)vmovl_u16(v2358);
                              v2360 = (const __int16 *)&v12[2];
                              uint16x4_t v2361 = (uint16x4_t)vld1_dup_s16(v2360);
                              int16x8_t v2362 = (int16x8_t)vmovl_u16(v2361);
                              v2363 = (const __int16 *)&v12[2] + 1;
                              uint16x4_t v2364 = (uint16x4_t)vld1_dup_s16(v2363);
                              int16x8_t v2365 = (int16x8_t)vmovl_u16(v2364);
                              v2366 = (const __int16 *)&v12[2] + 2;
                              uint16x4_t v2367 = (uint16x4_t)vld1_dup_s16(v2366);
                              int16x8_t v2368 = (int16x8_t)vmovl_u16(v2367);
                              v2369 = (uint16x8_t *)(v2265 + 2 * v2269);
                              v2370 = (int16x8_t *)(*a2 + a2[2] * v2263);
                              uint64_t v2371 = v3518 & 0xFFFFFFF8;
                              do
                              {
                                uint16x8_t v2372 = *(uint16x8_t *)((char *)v2369 + 2 * v2266);
                                v2373 = (uint16x8_t *)((char *)v2369 + v2270 + v2270);
                                uint32x4_t v2374 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16((uint16x8_t)vuzp1q_s16(v2339, v2341), v2372), (uint16x8_t)vuzp1q_s16(v2339, v2339), *v2369), (uint16x8_t)vuzp1q_s16(v2339, v2344), *v2373);
                                uint32x4_t v2375 = vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)v2341), *(uint16x4_t *)v2372.i8), (uint16x4_t)vmovn_s32((int32x4_t)v2339), *(uint16x4_t *)v2369->i8), (uint16x4_t)vmovn_s32((int32x4_t)v2344), *(uint16x4_t *)v2373->i8);
                                v2376 = (uint16x4_t *)&v2373->i8[v2270];
                                uint32x4_t v2377 = vmlal_u16(v2375, (uint16x4_t)vmovn_s32((int32x4_t)v2347), *v2376);
                                uint32x4_t v2378 = vmlal_high_u16(v2374, (uint16x8_t)vuzp1q_s16(v2339, v2347), *(uint16x8_t *)v2376->i8);
                                v2379 = (uint16x8_t *)((char *)v2376 + v2270);
                                uint32x4_t v2380 = vmlal_high_u16(v2378, (uint16x8_t)vuzp1q_s16(v2339, v2350), *v2379);
                                uint32x4_t v2381 = vmlal_u16(v2377, (uint16x4_t)vmovn_s32((int32x4_t)v2350), *(uint16x4_t *)v2379->i8);
                                v2382 = (uint16x4_t *)&v2379->i8[v2270];
                                uint32x4_t v2383 = vmlal_u16(v2381, (uint16x4_t)vmovn_s32((int32x4_t)v2353), *v2382);
                                uint32x4_t v2384 = vmlal_high_u16(v2380, (uint16x8_t)vuzp1q_s16(v2339, v2353), *(uint16x8_t *)v2382->i8);
                                v2385 = (uint16x8_t *)((char *)v2382 + v2270);
                                uint32x4_t v2386 = vmlal_high_u16(v2384, (uint16x8_t)vuzp1q_s16(v2339, v2356), *v2385);
                                uint32x4_t v2387 = vmlal_u16(v2383, (uint16x4_t)vmovn_s32((int32x4_t)v2356), *(uint16x4_t *)v2385->i8);
                                v2388 = (uint16x4_t *)&v2385->i8[v2270];
                                uint32x4_t v2389 = vmlal_u16(v2387, (uint16x4_t)vmovn_s32((int32x4_t)v2359), *v2388);
                                uint32x4_t v2390 = vmlal_high_u16(v2386, (uint16x8_t)vuzp1q_s16(v2339, v2359), *(uint16x8_t *)v2388->i8);
                                v2391 = (uint16x4_t *)((char *)v2388 + v2270);
                                *v2370++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v2389, (uint16x4_t)vmovn_s32((int32x4_t)v2362), *v2391), (uint16x4_t)vmovn_s32((int32x4_t)v2365), *(uint16x4_t *)((char *)v2391 + v2270)), (uint16x4_t)vmovn_s32((int32x4_t)v2368), *(uint16x4_t *)((char *)v2391 + 2 * v2266 + v2270)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v2390, (uint16x8_t)vuzp1q_s16(v2339, v2362), *(uint16x8_t *)v2391->i8), (uint16x8_t)vuzp1q_s16(v2339, v2365),
                                                            *(uint16x8_t *)&v2391->i8[v2270]),
                                                          (uint16x8_t)vuzp1q_s16(v2339, v2368),
                                                          *(uint16x8_t *)&v2391->i8[2 * v2266 + v2270]),
                                             0xFuLL);
                                ++v2369;
                                v2371 -= 8;
                              }
                              while (v2371);
                              uint64_t v2271 = v3518 & 0x7FFFFFF8;
                              if ((v3518 & 0xFFFFFFF8) == v3518) {
                                goto LABEL_1585;
                              }
                            }
                            goto LABEL_1678;
                          }
                        }
                        goto LABEL_1677;
                      }
                    }
                    unint64_t v2267 = *a2;
LABEL_1677:
                    unint64_t v2268 = a2[2];
LABEL_1678:
                    uint64_t v2392 = v3518 - v2271;
                    v2393 = (_WORD *)(v2267 + 2 * (v2271 + v2268 * v2262));
                    v2394 = (unsigned __int16 *)(v2265 + 2 * (v2271 + v2269));
                    do
                    {
                      v2395 = &v2394[v2266];
                      v2396 = &v2395[(unint64_t)v2270 / 2 + (unint64_t)v2270 / 2];
                      int v2397 = v12->u16[0] * *v2394 + v12->u16[1] * *v2395 + v12->u16[2] * v2395[v2266];
                      LODWORD(v2395) = *v2396;
                      v2398 = &v2396[(unint64_t)v2270 / 2];
                      int v2399 = v2397 + v12->u16[3] * v2395 + v12[1].u16[0] * *v2398;
                      v2400 = &v2398[(unint64_t)v2270 / 2];
                      LODWORD(v2395) = *v2400;
                      v2401 = &v2400[(unint64_t)v2270 / 2];
                      int v2402 = v2399 + v12[1].u16[1] * v2395;
                      LODWORD(v2395) = *v2401;
                      v2403 = &v2401[(unint64_t)v2270 / 2];
                      *v2393++ = (v2402
                                + v12[1].u16[2] * v2395
                                + v12[1].u16[3] * *v2403
                                + v12[2].u16[0] * v2403[(unint64_t)v2270 / 2]
                                + v12[2].u16[1] * v2403[(unint64_t)v2270 / 2 + (unint64_t)v2270 / 2]
                                + v12[2].u16[2]
                                * v2403[(unint64_t)v2270 / 2
                                                    + (unint64_t)v2270 / 2
                                                    + (unint64_t)v2270 / 2]) >> 15;
                      ++v2394;
                      --v2392;
                    }
                    while (v2392);
                    v2257 = a1;
                    goto LABEL_1585;
                  }
LABEL_1681:
                  uint64_t v2404 = 0;
                  uint64_t v2405 = v3475;
                  uint64_t v3456 = (int)v3479 - 2 + 5;
                  uint64_t v2406 = v3475 - 1;
                  uint64_t v3512 = (int)v3479 - 2;
                  uint64_t v3471 = v3512 + 4;
                  uint64_t v3451 = 2 * v3512;
                  uint64_t v3446 = 2 * v3512 - 2;
                  v2407 = (unsigned __int16 *)v12 + 3;
                  unint64_t v2408 = 2;
                  uint64_t v3476 = v2406;
                  while (1)
                  {
                    if (v2406 >= v3471) {
                      uint64_t v2409 = (int)v3479 - 2 + 4;
                    }
                    else {
                      uint64_t v2409 = v2406;
                    }
                    uint64_t v3483 = v2404;
                    uint64_t v2410 = v3476 + v2404;
                    if (v2410 >= v3471) {
                      uint64_t v2411 = (int)v3479 - 2 + 4;
                    }
                    else {
                      uint64_t v2411 = v2410;
                    }
                    if (v2410 >= v3471) {
                      uint64_t v2410 = (int)v3479 - 2 + 4;
                    }
                    if ((int)v3518 >= 1) {
                      break;
                    }
LABEL_1682:
                    ++v2405;
                    ++v2408;
                    uint64_t v2404 = v3483 + 1;
                    ++v2406;
                    ++v2407;
                    if (v2405 >= v3479)
                    {
                      v2474 = a1;
                      unsigned int v4 = v3521;
                      if ((int)v3479 < 1) {
                        goto LABEL_2310;
                      }
                      uint64_t v2475 = 0;
                      uint64_t v2476 = 0;
                      unint64_t v2477 = (unint64_t)(v3521 + 5);
                      v2478 = v12 + 2;
                      while (2)
                      {
                        unint64_t v2479 = *a2;
                        unint64_t v2480 = a2[2];
                        v2481 = (unsigned __int16 *)(*a2 + 2 * v2480 * v2476);
                        _WORD *v3521 = ((v12->u16[1] + v12->u16[0] + v12->u16[2] + v12->u16[3] + v12[1].u16[0] + v12[1].u16[1])
                                * *v2481
                                + v2481[1] * v12[1].u16[2]
                                + v2481[2] * v12[1].u16[3]
                                + v2481[3] * v12[2].u16[0]
                                + v2481[4] * v12[2].u16[1]
                                + v2481[5] * v12[2].u16[2]) >> 15;
                        v3521[1] = ((v12->u16[1] + v12->u16[0] + v12->u16[2] + v12->u16[3] + v12[1].u16[0]) * *v2481
                                  + v2481[1] * v12[1].u16[1]
                                  + v2481[2] * v12[1].u16[2]
                                  + v2481[3] * v12[1].u16[3]
                                  + v2481[4] * v12[2].u16[0]
                                  + v2481[5] * v12[2].u16[1]
                                  + v2481[6] * v12[2].u16[2]) >> 15;
                        v3521[2] = ((v12->u16[1] + v12->u16[0] + v12->u16[2] + v12->u16[3]) * *v2481
                                  + v2481[1] * v12[1].u16[0]
                                  + v2481[2] * v12[1].u16[1]
                                  + v2481[3] * v12[1].u16[2]
                                  + v2481[4] * v12[1].u16[3]
                                  + v2481[5] * v12[2].u16[0]
                                  + v2481[6] * v12[2].u16[1]
                                  + v2481[7] * v12[2].u16[2]) >> 15;
                        v3521[3] = ((v12->u16[1] + v12->u16[0] + v12->u16[2]) * *v2481
                                  + v2481[1] * v12->u16[3]
                                  + v2481[2] * v12[1].u16[0]
                                  + v2481[3] * v12[1].u16[1]
                                  + v2481[4] * v12[1].u16[2]
                                  + v2481[5] * v12[1].u16[3]
                                  + v2481[6] * v12[2].u16[0]
                                  + v2481[7] * v12[2].u16[1]
                                  + v2481[8] * v12[2].u16[2]) >> 15;
                        v3521[4] = ((v12->u16[1] + v12->u16[0]) * *v2481
                                  + v2481[1] * v12->u16[2]
                                  + v2481[2] * v12->u16[3]
                                  + v2481[3] * v12[1].u16[0]
                                  + v2481[4] * v12[1].u16[1]
                                  + v2481[5] * v12[1].u16[2]
                                  + v2481[6] * v12[1].u16[3]
                                  + v2481[7] * v12[2].u16[0]
                                  + v2481[8] * v12[2].u16[1]
                                  + v2481[9] * v12[2].u16[2]) >> 15;
                        uint64_t v2482 = *((int *)v2474 + 2);
                        if ((int)v2482 > 10)
                        {
                          uint64_t v2483 = (v2482 - 10);
                          if (v2483 < 8)
                          {
                            uint64_t v2484 = 0;
                            uint64_t v2485 = 5;
                            goto LABEL_1751;
                          }
                          uint64_t v2484 = 0;
                          unint64_t v2486 = v2477 + 2 * v2483;
                          uint64_t v2487 = v2480 * 2 * v2476;
                          BOOL v2489 = v2477 < v2479 + 2 * v2483 + v2487 + 20 && v2479 + v2487 < v2486;
                          uint64_t v2485 = 5;
                          if ((unint64_t)v12 < v2486 && v2477 < (unint64_t)&v12[2] + 6) {
                            goto LABEL_1751;
                          }
                          if (v2489) {
                            goto LABEL_1751;
                          }
                          uint64_t v2484 = v2483 & 0xFFFFFFF8;
                          uint64_t v2485 = v2484 | 5;
                          v2491 = (const __int16 *)v12;
                          uint16x4_t v2492 = (uint16x4_t)vld1_dup_s16(v2491++);
                          uint16x4_t v2493 = (uint16x4_t)vld1_dup_s16(v2491);
                          int16x8_t v2494 = (int16x8_t)vmovl_u16(v2492);
                          int16x8_t v2495 = (int16x8_t)vmovl_u16(v2493);
                          v2496 = (const __int16 *)v12 + 2;
                          uint16x4_t v2497 = (uint16x4_t)vld1_dup_s16(v2496);
                          int16x8_t v2498 = (int16x8_t)vmovl_u16(v2497);
                          v2499 = (const __int16 *)v12 + 3;
                          uint16x4_t v2500 = (uint16x4_t)vld1_dup_s16(v2499);
                          v2501 = (const __int16 *)&v12[1];
                          uint16x4_t v2502 = (uint16x4_t)vld1_dup_s16(v2501);
                          int16x8_t v2503 = (int16x8_t)vmovl_u16(v2500);
                          int16x8_t v2504 = (int16x8_t)vmovl_u16(v2502);
                          v2505 = (const __int16 *)&v12[1] + 1;
                          uint16x4_t v2506 = (uint16x4_t)vld1_dup_s16(v2505);
                          int16x8_t v2507 = (int16x8_t)vmovl_u16(v2506);
                          v2508 = (const __int16 *)&v12[1] + 2;
                          uint16x4_t v2509 = (uint16x4_t)vld1_dup_s16(v2508);
                          v2510 = (const __int16 *)&v12[1] + 3;
                          uint16x4_t v2511 = (uint16x4_t)vld1_dup_s16(v2510);
                          int16x8_t v2512 = (int16x8_t)vmovl_u16(v2509);
                          int16x8_t v2513 = (int16x8_t)vmovl_u16(v2511);
                          v2514 = (const __int16 *)&v12[2];
                          uint16x4_t v2515 = (uint16x4_t)vld1_dup_s16(v2514);
                          int16x8_t v2516 = (int16x8_t)vmovl_u16(v2515);
                          v2517 = (const __int16 *)&v12[2] + 1;
                          uint16x4_t v2518 = (uint16x4_t)vld1_dup_s16(v2517);
                          v2519 = (const __int16 *)&v12[2] + 2;
                          uint16x4_t v2520 = (uint16x4_t)vld1_dup_s16(v2519);
                          int16x8_t v2521 = (int16x8_t)vmovl_u16(v2518);
                          int16x8_t v2522 = (int16x8_t)vmovl_u16(v2520);
                          uint64_t v2523 = v2479 + v2480 * v2475 + 10;
                          v2524 = (int16x8_t *)(v3521 + 5);
                          uint64_t v2525 = v2484;
                          do
                          {
                            uint16x8_t v2526 = *(uint16x8_t *)(v2523 - 10);
                            uint16x8_t v2527 = *(uint16x8_t *)(v2523 - 8);
                            uint32x4_t v2528 = vmull_u16(*(uint16x4_t *)v2527.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2495));
                            uint16x8_t v2529 = *(uint16x8_t *)(v2523 - 6);
                            uint32x4_t v2530 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v2527, (uint16x8_t)vuzp1q_s16(v2494, v2495)), v2526, (uint16x8_t)vuzp1q_s16(v2494, v2494)), v2529, (uint16x8_t)vuzp1q_s16(v2494, v2498));
                            uint32x4_t v2531 = vmlal_u16(vmlal_u16(v2528, *(uint16x4_t *)v2526.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2494)), *(uint16x4_t *)v2529.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2498));
                            uint16x8_t v2532 = *(uint16x8_t *)(v2523 - 4);
                            *v2524++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(v2531, *(uint16x4_t *)v2532.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2503)), *(uint16x4_t *)(v2523 - 2), (uint16x4_t)vmovn_s32((int32x4_t)v2504)), *(uint16x4_t *)v2523, (uint16x4_t)vmovn_s32((int32x4_t)v2507)), *(uint16x4_t *)(v2523 + 2), (uint16x4_t)vmovn_s32((int32x4_t)v2512)), *(uint16x4_t *)(v2523 + 4),
                                                              (uint16x4_t)vmovn_s32((int32x4_t)v2513)),
                                                            *(uint16x4_t *)(v2523 + 6),
                                                            (uint16x4_t)vmovn_s32((int32x4_t)v2516)),
                                                          *(uint16x4_t *)(v2523 + 8),
                                                          (uint16x4_t)vmovn_s32((int32x4_t)v2521)),
                                                        *(uint16x4_t *)(v2523 + 10),
                                                        (uint16x4_t)vmovn_s32((int32x4_t)v2522)),
                                           0xFuLL),
                                         (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v2530, v2532, (uint16x8_t)vuzp1q_s16(v2494, v2503)), *(uint16x8_t *)(v2523 - 2), (uint16x8_t)vuzp1q_s16(v2494, v2504)), *(uint16x8_t *)v2523, (uint16x8_t)vuzp1q_s16(v2494, v2507)), *(uint16x8_t *)(v2523 + 2), (uint16x8_t)vuzp1q_s16(v2494, v2512)), *(uint16x8_t *)(v2523 + 4), (uint16x8_t)vuzp1q_s16(v2494, v2513)), *(uint16x8_t *)(v2523 + 6),
                                                          (uint16x8_t)vuzp1q_s16(v2494, v2516)),
                                                        *(uint16x8_t *)(v2523 + 8),
                                                        (uint16x8_t)vuzp1q_s16(v2494, v2521)),
                                                      *(uint16x8_t *)(v2523 + 10),
                                                      (uint16x8_t)vuzp1q_s16(v2494, v2522)),
                                         0xFuLL);
                            v2523 += 16;
                            v2525 -= 8;
                          }
                          while (v2525);
                          if (v2484 != v2483)
                          {
LABEL_1751:
                            v2533 = &v3521[v2485];
                            v2534 = (unsigned __int16 *)(v2479 + 2 * (v2484 + v2480 * v2476) + 20);
                            uint64_t v2535 = v2483 - v2484;
                            do
                            {
                              uint16x8_t v2536 = *(uint16x8_t *)(v2534 - 10);
                              int v2537 = *(v2534 - 2);
                              int v2538 = *(v2534 - 1);
                              int v2539 = *v2534++;
                              *v2533++ = (vaddvq_s32((int32x4_t)vmlal_high_u16(vmull_u16(*(uint16x4_t *)v2536.i8, *v12), v2536, *(uint16x8_t *)v12->i8))+ v2537 * v12[2].u16[0]+ v2539 * v12[2].u16[2]+ v2538 * v12[2].u16[1]) >> 15;
                              --v2535;
                            }
                            while (v2535);
                          }
                        }
                        int v2540 = v2482 - 5;
                        uint64_t v2541 = v2482 - 1;
                        uint64_t v2542 = (int)v2482 - 5;
                        if (v2542 + 5 >= v2482 - 1)
                        {
                          int v2544 = v12->u16[1] + v12->u16[0];
                          uint64_t v2543 = 2;
                        }
                        else
                        {
                          uint64_t v2543 = 0;
                          int v2544 = 0;
                        }
                        uint64_t v2545 = v2480 * v2476 + v2541;
                        uint64_t v2546 = (int)v2482 - 2;
                        unsigned int v2547 = v2544 * *(unsigned __int16 *)(v2479 + 2 * v2545);
                        if ((int)v2482 + 3 >= v2540)
                        {
                          uint64_t v2548 = v2540 - 5;
                          if (v2542 - 5 >= v2546) {
                            uint64_t v2548 = (int)v2482 - 2;
                          }
                          unint64_t v2549 = v2546 - v2548 + 1;
                          if (v2549 < 0x10)
                          {
                            uint64_t v2550 = (int)v2482 - 2;
                            unint64_t v2551 = v2543;
                            goto LABEL_1764;
                          }
                          uint64_t v2550 = v2546 - (v2549 & 0xFFFFFFFFFFFFFFF0);
                          unint64_t v2551 = v2543 | v2549 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2552 = 0uLL;
                          int32x4_t v2553 = (int32x4_t)v2547;
                          v2554 = (int16x8_t *)(v2479 + 2 * (v2546 + v2480 * v2476) - 14);
                          v2555 = (uint16x8_t *)((char *)v2478 + 2 * v2543);
                          unint64_t v2556 = v2549 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2557 = 0uLL;
                          int32x4_t v2558 = 0uLL;
                          do
                          {
                            int8x16_t v2559 = (int8x16_t)vrev64q_s16(*v2554);
                            uint16x8_t v2560 = (uint16x8_t)vextq_s8(v2559, v2559, 8uLL);
                            int8x16_t v2561 = (int8x16_t)vrev64q_s16(v2554[-1]);
                            uint16x8_t v2562 = (uint16x8_t)vextq_s8(v2561, v2561, 8uLL);
                            uint16x8_t v2563 = v2555[-1];
                            int32x4_t v2552 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2552, v2563, v2560);
                            int32x4_t v2553 = (int32x4_t)vmlal_u16((uint32x4_t)v2553, *(uint16x4_t *)v2563.i8, *(uint16x4_t *)v2560.i8);
                            int32x4_t v2558 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2558, *v2555, v2562);
                            int32x4_t v2557 = (int32x4_t)vmlal_u16((uint32x4_t)v2557, *(uint16x4_t *)v2555->i8, *(uint16x4_t *)v2562.i8);
                            v2554 -= 2;
                            v2555 += 2;
                            v2556 -= 16;
                          }
                          while (v2556);
                          unsigned int v2547 = vaddvq_s32(vaddq_s32(vaddq_s32(v2557, v2553), vaddq_s32(v2558, v2552)));
                          if (v2549 != (v2549 & 0xFFFFFFFFFFFFFFF0))
                          {
LABEL_1764:
                            v2564 = (unsigned __int16 *)v12 + v2551;
                            do
                            {
                              int v2565 = *v2564++;
                              v2547 += v2565 * *(unsigned __int16 *)(v2479 + v2480 * v2475 + 2 * v2550);
                              BOOL v7 = v2550-- < v2542 - 4;
                            }
                            while (!v7);
                          }
                        }
                        v3521[v2542] = v2547 >> 15;
                        if (v2542 + 1 < v2482)
                        {
                          if (v2542 + 6 >= v2541)
                          {
                            int v2567 = v12->u16[1] + v12->u16[0] + v12->u16[2];
                            uint64_t v2566 = 3;
                          }
                          else
                          {
                            uint64_t v2566 = 0;
                            int v2567 = 0;
                          }
                          unsigned int v2568 = v2567 * *(unsigned __int16 *)(v2479 + 2 * v2545);
                          uint64_t v2569 = v2542 - 4;
                          if (v2542 - 4 >= v2546) {
                            uint64_t v2569 = (int)v2482 - 2;
                          }
                          unint64_t v2570 = v2546 - v2569 + 1;
                          uint64_t v2571 = (int)v2482 - 2;
                          unint64_t v2572 = v2566;
                          if (v2570 < 0x10) {
                            goto LABEL_1777;
                          }
                          uint64_t v2571 = v2546 - (v2570 & 0xFFFFFFFFFFFFFFF0);
                          unint64_t v2572 = v2566 | v2570 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2573 = 0uLL;
                          int32x4_t v2574 = (int32x4_t)v2568;
                          v2575 = (int16x8_t *)(v2479 + 2 * (v2546 + v2480 * v2476) - 14);
                          v2576 = (uint16x8_t *)((char *)v2478 + 2 * v2566);
                          unint64_t v2577 = v2570 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2578 = 0uLL;
                          int32x4_t v2579 = 0uLL;
                          do
                          {
                            int8x16_t v2580 = (int8x16_t)vrev64q_s16(*v2575);
                            uint16x8_t v2581 = (uint16x8_t)vextq_s8(v2580, v2580, 8uLL);
                            int8x16_t v2582 = (int8x16_t)vrev64q_s16(v2575[-1]);
                            uint16x8_t v2583 = (uint16x8_t)vextq_s8(v2582, v2582, 8uLL);
                            uint16x8_t v2584 = v2576[-1];
                            int32x4_t v2573 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2573, v2584, v2581);
                            int32x4_t v2574 = (int32x4_t)vmlal_u16((uint32x4_t)v2574, *(uint16x4_t *)v2584.i8, *(uint16x4_t *)v2581.i8);
                            int32x4_t v2579 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2579, *v2576, v2583);
                            int32x4_t v2578 = (int32x4_t)vmlal_u16((uint32x4_t)v2578, *(uint16x4_t *)v2576->i8, *(uint16x4_t *)v2583.i8);
                            v2575 -= 2;
                            v2576 += 2;
                            v2577 -= 16;
                          }
                          while (v2577);
                          unsigned int v2568 = vaddvq_s32(vaddq_s32(vaddq_s32(v2578, v2574), vaddq_s32(v2579, v2573)));
                          if (v2570 != (v2570 & 0xFFFFFFFFFFFFFFF0))
                          {
LABEL_1777:
                            v2585 = (unsigned __int16 *)(v2479 + 2 * (v2571 + v2480 * v2476));
                            v2586 = (unsigned __int16 *)v12 + v2572;
                            uint64_t v2587 = v2566 + v2546 - v2572 - v2569 + 1;
                            do
                            {
                              int v2589 = *v2585--;
                              int v2588 = v2589;
                              int v2590 = *v2586++;
                              v2568 += v2590 * v2588;
                              --v2587;
                            }
                            while (v2587);
                          }
                          v3521[v2542 + 1] = v2568 >> 15;
                          if (v2542 + 7 >= v2541)
                          {
                            int v2592 = vaddvq_s32((int32x4_t)vmovl_u16(*v12));
                            uint64_t v2591 = 1;
                          }
                          else
                          {
                            uint64_t v2591 = 0;
                            int v2592 = 0;
                          }
                          unsigned int v2593 = v2592 * *(unsigned __int16 *)(v2479 + 2 * v2545);
                          uint64_t v2594 = v2542 - 2;
                          uint64_t v2595 = v2542 - 3;
                          if (v2542 - 3 >= v2546) {
                            uint64_t v2595 = (int)v2482 - 2;
                          }
                          unint64_t v2596 = v2546 - v2595 + 1;
                          if (v2596 < 0x10)
                          {
                            uint64_t v2597 = (int)v2482 - 2;
                            unint64_t v2598 = v2591 * 4;
                            goto LABEL_1789;
                          }
                          uint64_t v2597 = v2546 - (v2596 & 0xFFFFFFFFFFFFFFF0);
                          unint64_t v2598 = (v2591 * 4) | v2596 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2599 = 0uLL;
                          int32x4_t v2600 = (int32x4_t)v2593;
                          v2601 = (int16x8_t *)(v2479 + 2 * (v2546 + v2480 * v2476) - 14);
                          v2602 = (uint16x8_t *)&v2478[v2591];
                          unint64_t v2603 = v2596 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2604 = 0uLL;
                          int32x4_t v2605 = 0uLL;
                          do
                          {
                            int8x16_t v2606 = (int8x16_t)vrev64q_s16(*v2601);
                            uint16x8_t v2607 = (uint16x8_t)vextq_s8(v2606, v2606, 8uLL);
                            int8x16_t v2608 = (int8x16_t)vrev64q_s16(v2601[-1]);
                            uint16x8_t v2609 = (uint16x8_t)vextq_s8(v2608, v2608, 8uLL);
                            uint16x8_t v2610 = v2602[-1];
                            int32x4_t v2599 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2599, v2610, v2607);
                            int32x4_t v2600 = (int32x4_t)vmlal_u16((uint32x4_t)v2600, *(uint16x4_t *)v2610.i8, *(uint16x4_t *)v2607.i8);
                            int32x4_t v2605 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2605, *v2602, v2609);
                            int32x4_t v2604 = (int32x4_t)vmlal_u16((uint32x4_t)v2604, *(uint16x4_t *)v2602->i8, *(uint16x4_t *)v2609.i8);
                            v2601 -= 2;
                            v2602 += 2;
                            v2603 -= 16;
                          }
                          while (v2603);
                          unsigned int v2593 = vaddvq_s32(vaddq_s32(vaddq_s32(v2604, v2600), vaddq_s32(v2605, v2599)));
                          if (v2596 != (v2596 & 0xFFFFFFFFFFFFFFF0))
                          {
LABEL_1789:
                            v2611 = (unsigned __int16 *)v12 + v2598;
                            do
                            {
                              int v2612 = *v2611++;
                              v2593 += v2612 * *(unsigned __int16 *)(v2479 + v2480 * v2475 + 2 * v2597);
                              BOOL v7 = v2597-- < v2594;
                            }
                            while (!v7);
                          }
                          v3521[v2542 + 2] = v2593 >> 15;
                          if (v2542 + 8 >= v2541)
                          {
                            int v2614 = vaddvq_s32((int32x4_t)vmovl_u16(*v12)) + v12[1].u16[0];
                            uint64_t v2613 = 5;
                          }
                          else
                          {
                            uint64_t v2613 = 0;
                            int v2614 = 0;
                          }
                          unsigned int v2615 = v2614 * *(unsigned __int16 *)(v2479 + 2 * v2545);
                          if (v2594 >= v2546) {
                            uint64_t v2594 = (int)v2482 - 2;
                          }
                          unint64_t v2616 = v2546 - v2594 + 1;
                          uint64_t v2617 = (int)v2482 - 2;
                          unint64_t v2618 = v2613;
                          if (v2616 < 0x10) {
                            goto LABEL_1801;
                          }
                          uint64_t v2617 = v2546 - (v2616 & 0xFFFFFFFFFFFFFFF0);
                          unint64_t v2618 = v2613 | v2616 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2619 = 0uLL;
                          int32x4_t v2620 = (int32x4_t)v2615;
                          v2621 = (int16x8_t *)(v2479 + 2 * (v2546 + v2480 * v2476) - 14);
                          v2622 = (uint16x8_t *)((char *)v2478 + 2 * v2613);
                          unint64_t v2623 = v2616 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2624 = 0uLL;
                          int32x4_t v2625 = 0uLL;
                          do
                          {
                            int8x16_t v2626 = (int8x16_t)vrev64q_s16(*v2621);
                            uint16x8_t v2627 = (uint16x8_t)vextq_s8(v2626, v2626, 8uLL);
                            int8x16_t v2628 = (int8x16_t)vrev64q_s16(v2621[-1]);
                            uint16x8_t v2629 = (uint16x8_t)vextq_s8(v2628, v2628, 8uLL);
                            uint16x8_t v2630 = v2622[-1];
                            int32x4_t v2619 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2619, v2630, v2627);
                            int32x4_t v2620 = (int32x4_t)vmlal_u16((uint32x4_t)v2620, *(uint16x4_t *)v2630.i8, *(uint16x4_t *)v2627.i8);
                            int32x4_t v2625 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2625, *v2622, v2629);
                            int32x4_t v2624 = (int32x4_t)vmlal_u16((uint32x4_t)v2624, *(uint16x4_t *)v2622->i8, *(uint16x4_t *)v2629.i8);
                            v2621 -= 2;
                            v2622 += 2;
                            v2623 -= 16;
                          }
                          while (v2623);
                          unsigned int v2615 = vaddvq_s32(vaddq_s32(vaddq_s32(v2624, v2620), vaddq_s32(v2625, v2619)));
                          if (v2616 != (v2616 & 0xFFFFFFFFFFFFFFF0))
                          {
LABEL_1801:
                            v2631 = (unsigned __int16 *)(v2479 + 2 * (v2617 + v2480 * v2476));
                            v2632 = (unsigned __int16 *)v12 + v2618;
                            uint64_t v2633 = v2613 + v2546 - v2618 - v2594 + 1;
                            do
                            {
                              int v2635 = *v2631--;
                              int v2634 = v2635;
                              int v2636 = *v2632++;
                              v2615 += v2636 * v2634;
                              --v2633;
                            }
                            while (v2633);
                          }
                          v3521[v2542 + 3] = v2615 >> 15;
                          if (v2542 + 9 >= v2541)
                          {
                            int v2638 = vaddvq_s32((int32x4_t)vmovl_u16(*v12)) + v12[1].u16[0] + v12[1].u16[1];
                            uint64_t v2637 = 6;
                          }
                          else
                          {
                            uint64_t v2637 = 0;
                            int v2638 = 0;
                          }
                          unsigned int v2639 = v2638 * *(unsigned __int16 *)(v2479 + 2 * v2545);
                          uint64_t v2640 = v2542 - 1;
                          if (v2542 - 1 >= v2546) {
                            uint64_t v2640 = (int)v2482 - 2;
                          }
                          unint64_t v2641 = v2546 - v2640 + 1;
                          if (v2641 < 0x10)
                          {
                            uint64_t v2642 = (int)v2482 - 2;
                            unint64_t v2643 = v2637;
                            goto LABEL_1813;
                          }
                          uint64_t v2642 = v2546 - (v2641 & 0xFFFFFFFFFFFFFFF0);
                          unint64_t v2643 = v2637 | v2641 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2644 = 0uLL;
                          int32x4_t v2645 = (int32x4_t)v2639;
                          v2646 = (int16x8_t *)(v2479 + 2 * (v2546 + v2480 * v2476) - 14);
                          v2647 = (uint16x8_t *)((char *)v2478 + 2 * v2637);
                          unint64_t v2648 = v2641 & 0xFFFFFFFFFFFFFFF0;
                          int32x4_t v2649 = 0uLL;
                          int32x4_t v2650 = 0uLL;
                          do
                          {
                            int8x16_t v2651 = (int8x16_t)vrev64q_s16(*v2646);
                            uint16x8_t v2652 = (uint16x8_t)vextq_s8(v2651, v2651, 8uLL);
                            int8x16_t v2653 = (int8x16_t)vrev64q_s16(v2646[-1]);
                            uint16x8_t v2654 = (uint16x8_t)vextq_s8(v2653, v2653, 8uLL);
                            uint16x8_t v2655 = v2647[-1];
                            int32x4_t v2644 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2644, v2655, v2652);
                            int32x4_t v2645 = (int32x4_t)vmlal_u16((uint32x4_t)v2645, *(uint16x4_t *)v2655.i8, *(uint16x4_t *)v2652.i8);
                            int32x4_t v2650 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2650, *v2647, v2654);
                            int32x4_t v2649 = (int32x4_t)vmlal_u16((uint32x4_t)v2649, *(uint16x4_t *)v2647->i8, *(uint16x4_t *)v2654.i8);
                            v2646 -= 2;
                            v2647 += 2;
                            v2648 -= 16;
                          }
                          while (v2648);
                          unsigned int v2639 = vaddvq_s32(vaddq_s32(vaddq_s32(v2649, v2645), vaddq_s32(v2650, v2644)));
                          if (v2641 != (v2641 & 0xFFFFFFFFFFFFFFF0))
                          {
LABEL_1813:
                            unint64_t v2656 = v2479 + v2480 * v2475;
                            v2657 = (unsigned __int16 *)v12 + v2643;
                            do
                            {
                              int v2658 = *v2657++;
                              v2639 += v2658 * *(unsigned __int16 *)(v2656 + 2 * v2642);
                              BOOL v7 = v2642-- < v2542;
                            }
                            while (!v7);
                          }
                          v3521[v2542 + 4] = v2639 >> 15;
                        }
                        memcpy(v2481, v3521, 2 * v2482);
                        ++v2476;
                        v2474 = a1;
                        v2475 += 2;
                        if (v2476 >= *((int *)a1 + 3)) {
                          goto LABEL_2310;
                        }
                        continue;
                      }
                    }
                  }
                  v2412 = (uint16x4_t *)*a1;
                  uint64_t v2413 = a1[2];
                  uint64_t v2414 = v2413 * (v3479 - 1);
                  unint64_t v2415 = *a2;
                  unint64_t v2416 = a2[2] * v2405;
                  if (v2405 > v3479 + 3)
                  {
                    uint64_t v2417 = 0;
                    while (1)
                    {
                      if (v2408 >= 0x10)
                      {
                        int32x4_t v2420 = 0uLL;
                        unint64_t v2421 = v2408 & 0xFFFFFFFFFFFFFFF0;
                        v2422 = (uint16x8_t *)&v12[2];
                        int32x4_t v2423 = 0uLL;
                        int32x4_t v2424 = 0uLL;
                        int32x4_t v2425 = 0uLL;
                        do
                        {
                          uint16x8_t v2426 = v2422[-1];
                          int32x4_t v2423 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2423, v2426);
                          int32x4_t v2420 = (int32x4_t)vaddw_u16((uint32x4_t)v2420, *(uint16x4_t *)v2426.i8);
                          int32x4_t v2425 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2425, *v2422);
                          int32x4_t v2424 = (int32x4_t)vaddw_u16((uint32x4_t)v2424, *(uint16x4_t *)v2422->i8);
                          v2422 += 2;
                          v2421 -= 16;
                        }
                        while (v2421);
                        int v2419 = vaddvq_s32(vaddq_s32(vaddq_s32(v2424, v2420), vaddq_s32(v2425, v2423)));
                        uint64_t v2418 = v2408 & 0x7FFFFFFFFFFFFFF0;
                        if (v2408 == (v2408 & 0x7FFFFFFFFFFFFFF0)) {
                          goto LABEL_1694;
                        }
                      }
                      else
                      {
                        uint64_t v2418 = 0;
                        int v2419 = 0;
                      }
                      do
                        v2419 += v12->u16[v2418++];
                      while (v2408 != v2418);
LABEL_1694:
                      *(_WORD *)(v2415 + 2 * (v2417 + v2416)) = (v2419 * v2412->u16[v2417 + v2414]) >> 15;
                      if (++v2417 == v3518) {
                        goto LABEL_1682;
                      }
                    }
                  }
                  unint64_t v2427 = (v3456 - v2409) & 0xFFFFFFFFFFFFFFFELL;
                  uint64_t v2428 = 4 * v2413;
                  if (v2405 < v3479 - 6)
                  {
                    uint64_t v2429 = 0;
                    unint64_t v2430 = v3456 - v2410;
                    v2431 = (char *)v2412 + v3451 * v2413;
                    v2432 = (char *)v2412 + v3446 * v2413;
                    while (1)
                    {
                      if (v2430 >= 2)
                      {
                        uint64_t v2436 = 0;
                        int v2437 = 0;
                        int v2438 = 0;
                        unint64_t v2439 = v2427;
                        v2440 = (unsigned __int16 *)v12 + 1;
                        do
                        {
                          int v2441 = *(v2440 - 1);
                          int v2442 = *v2440;
                          v2440 += 2;
                          v2437 += v2441 * *(unsigned __int16 *)&v2431[v2436];
                          v2438 += v2442 * *(unsigned __int16 *)&v2432[v2436];
                          v2436 -= v2428;
                          v2439 -= 2;
                        }
                        while (v2439);
                        unsigned int v2434 = v2438 + v2437;
                        uint64_t v2435 = v3512 - (v2430 & 0xFFFFFFFFFFFFFFFELL);
                        unint64_t v2433 = v2430 & 0xFFFFFFFFFFFFFFFELL;
                        if (v2430 == (v2430 & 0xFFFFFFFFFFFFFFFELL)) {
                          goto LABEL_1704;
                        }
                      }
                      else
                      {
                        unint64_t v2433 = 0;
                        unsigned int v2434 = 0;
                        uint64_t v2435 = (int)v3479 - 2;
                      }
                      uint64_t v2443 = v2435 + 5;
                      v2444 = (unsigned __int16 *)v2412 + v2429 + v2413 * v2435;
                      v2445 = (unsigned __int16 *)v12 + v2433;
                      do
                      {
                        int v2446 = *v2445++;
                        v2434 += v2446 * *v2444;
                        --v2443;
                        v2444 -= v2413;
                      }
                      while (v2443 >= v2405);
LABEL_1704:
                      *(_WORD *)(v2415 + 2 * (v2429 + v2416)) = v2434 >> 15;
                      ++v2429;
                      v2431 += 2;
                      v2432 += 2;
                      if (v2429 == v3518) {
                        goto LABEL_1682;
                      }
                    }
                  }
                  uint64_t v2447 = 0;
                  unint64_t v2448 = v3456 - v2411;
                  unint64_t v2449 = (v3456 - v2411) & 0xFFFFFFFFFFFFFFFELL;
                  v2450 = (char *)v2412 + v3451 * v2413;
                  v2451 = (char *)v2412 + v3446 * v2413;
                  while (v2408 >= 0x10)
                  {
                    int32x4_t v2454 = 0uLL;
                    unint64_t v2455 = v2408 & 0xFFFFFFFFFFFFFFF0;
                    v2456 = (uint16x8_t *)&v12[2];
                    int32x4_t v2457 = 0uLL;
                    int32x4_t v2458 = 0uLL;
                    int32x4_t v2459 = 0uLL;
                    do
                    {
                      uint16x8_t v2460 = v2456[-1];
                      int32x4_t v2457 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2457, v2460);
                      int32x4_t v2454 = (int32x4_t)vaddw_u16((uint32x4_t)v2454, *(uint16x4_t *)v2460.i8);
                      int32x4_t v2459 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2459, *v2456);
                      int32x4_t v2458 = (int32x4_t)vaddw_u16((uint32x4_t)v2458, *(uint16x4_t *)v2456->i8);
                      v2456 += 2;
                      v2455 -= 16;
                    }
                    while (v2455);
                    int v2453 = vaddvq_s32(vaddq_s32(vaddq_s32(v2458, v2454), vaddq_s32(v2459, v2457)));
                    uint64_t v2452 = v2408 & 0x7FFFFFFFFFFFFFF0;
                    if (v2408 != (v2408 & 0x7FFFFFFFFFFFFFF0)) {
                      goto LABEL_1720;
                    }
LABEL_1721:
                    unsigned int v2461 = v2453 * v2412->u16[v2447 + v2414];
                    if (v2448 >= 2)
                    {
                      uint64_t v2464 = 0;
                      int v2465 = 0;
                      v2466 = v2407;
                      unint64_t v2467 = v2427;
                      do
                      {
                        int v2468 = *(v2466 - 1);
                        int v2469 = *v2466;
                        v2466 += 2;
                        v2461 += v2468 * *(unsigned __int16 *)&v2450[v2464];
                        v2465 += v2469 * *(unsigned __int16 *)&v2451[v2464];
                        v2464 -= v2428;
                        v2467 -= 2;
                      }
                      while (v2467);
                      v2461 += v2465;
                      unint64_t v2463 = v2408 + v2449;
                      uint64_t v2462 = v3512 - v2449;
                      if (v2448 == v2449) {
                        goto LABEL_1714;
                      }
                    }
                    else
                    {
                      uint64_t v2462 = (int)v3479 - 2;
                      unint64_t v2463 = v2408;
                    }
                    uint64_t v2470 = v2462 + 5;
                    v2471 = (unsigned __int16 *)v2412 + v2447 + v2413 * v2462;
                    v2472 = (unsigned __int16 *)v12 + v2463;
                    do
                    {
                      int v2473 = *v2472++;
                      v2461 += v2473 * *v2471;
                      --v2470;
                      v2471 -= v2413;
                    }
                    while (v2470 >= v2405);
LABEL_1714:
                    *(_WORD *)(v2415 + 2 * (v2447 + v2416)) = v2461 >> 15;
                    ++v2447;
                    v2450 += 2;
                    v2451 += 2;
                    if (v2447 == v3518) {
                      goto LABEL_1682;
                    }
                  }
                  uint64_t v2452 = 0;
                  int v2453 = 0;
                  do
LABEL_1720:
                    v2453 += v12->u16[v2452++];
                  while (v2408 != v2452);
                  goto LABEL_1721;
                }
              }
            }
            else
            {
              uint64_t v1108 = 4 * v125;
              uint64_t v1109 = 0;
            }
            uint64_t v1546 = v3518 - v1109;
            uint64_t v1547 = 2 * v1109;
            int32x2_t v1548 = (_WORD *)(v128 + 2 * v1109 + 6 * v708);
            uint64_t v1549 = (uint16x4_t *)((char *)v124 + v1547);
            do
            {
              float32x2_t v1550 = (unsigned __int16 *)((char *)v1549 + v126 + v126);
              BOOL v1551 = &v1550[(unint64_t)v126 / 2 + (unint64_t)v126 / 2];
              int v1552 = (v12->u16[1] + v12->u16[0] + v12->u16[2]) * v1549->u16[0]
                    + v12->u16[3] * v1549->u16[v125]
                    + v12[1].u16[0] * *v1550
                    + v12[1].u16[1] * v1550[v125];
              LODWORD(v1550) = *v1551;
              BOOL v1553 = &v1551[(unint64_t)v126 / 2];
              *v1548++ = (v1552
                        + v12[1].u16[2] * v1550
                        + v12[1].u16[3] * *v1553
                        + v12[2].u16[0] * v1553[(unint64_t)v126 / 2]
                        + v12[2].u16[1] * v1553[(unint64_t)v126 / 2 + (unint64_t)v126 / 2]
                        + v12[2].u16[2]
                        * v1553[(unint64_t)v126 / 2
                                            + (unint64_t)v126 / 2
                                            + (unint64_t)v126 / 2]) >> 15;
              uint64_t v1549 = (uint16x4_t *)((char *)v1549 + 2);
              --v1546;
            }
            while (v1546);
            goto LABEL_1127;
          }
        }
      }
      else
      {
        uint64_t v710 = 0;
        uint64_t v711 = v125;
      }
      uint64_t v1011 = v3518 - v710;
      v1012 = (_WORD *)(v128 + 2 * (v710 + v708));
      int v1013 = (unsigned __int16 *)v124 + v710;
      do
      {
        int v1014 = &v1013[(unint64_t)v126 / 2 + (unint64_t)v126 / 2];
        int v1015 = *v1014;
        v1016 = &v1014[(unint64_t)v126 / 2];
        *v1012++ = ((vaddvq_s32((int32x4_t)vmovl_u16(*v12)) + v12[1].u16[0]) * *v1013
                  + v12[1].u16[1] * v1013[(unint64_t)v126 / 2]
                  + v12[1].u16[2] * v1015
                  + v12[1].u16[3] * *v1016
                  + v12[2].u16[0] * v1016[(unint64_t)v126 / 2]
                  + v12[2].u16[1] * v1016[(unint64_t)v126 / 2 + (unint64_t)v126 / 2]
                  + v12[2].u16[2]
                  * v1016[(unint64_t)v126 / 2
                                      + (unint64_t)v126 / 2
                                      + (unint64_t)v126 / 2]) >> 15;
        ++v1013;
        --v1011;
      }
      while (v1011);
      goto LABEL_717;
    case 6:
      uint64_t v132 = a1;
      uint64_t v133 = *((unsigned int *)a1 + 2);
      if ((int)v133 < 1)
      {
        float v545 = (int *)a1 + 3;
        if (*((int *)a1 + 3) < 1) {
          goto LABEL_2310;
        }
        goto LABEL_1960;
      }
      uint64_t v134 = (uint16x4_t *)*a1;
      uint64_t v135 = a1[2];
      unint64_t v136 = *a2;
      uint64_t v137 = 2 * v135;
      uint64_t v138 = 4 * v135;
      uint64_t v139 = 6 * v135;
      unint64_t v140 = a2[2];
      uint64_t v141 = 2 * v133;
      uint64_t v142 = 8 * v135;
      uint64_t v3519 = *((unsigned int *)a1 + 2);
      uint64_t v143 = 0;
      if (v133 < 8) {
        goto LABEL_137;
      }
      unint64_t v144 = v136 + v141;
      BOOL v145 = v136 >= (unint64_t)v134 + 12 * v135 + v141 || (unint64_t)v134 + 12 * v135 >= v144;
      char v146 = !v145;
      BOOL v148 = v136 < (unint64_t)v134 + 10 * v135 + v141 && (unint64_t)v134 + 10 * v135 < v144;
      BOOL v150 = v136 < (unint64_t)v134 + v142 + v141 && (unint64_t)v134 + v142 < v144;
      BOOL v152 = v136 < (unint64_t)v134 + v141 + v139 && (unint64_t)v134 + v139 < v144;
      BOOL v154 = v136 < (unint64_t)v134 + v138 + v141 && (unint64_t)v134 + v138 < v144;
      BOOL v156 = v136 < (unint64_t)v134 + v137 + v141 && (unint64_t)v134 + v137 < v144;
      BOOL v158 = v136 < (unint64_t)v134 + v141 && (unint64_t)v134 < v144;
      if ((unint64_t)v12 < v144 && v136 < (unint64_t)&v12[3] + 2)
      {
        uint64_t v133 = *((unsigned int *)a1 + 2);
LABEL_137:
        float32x4_t v218 = (_WORD *)(v136 + 2 * v143);
        float32x4_t v219 = (unsigned __int16 *)v134 + v143;
        uint64_t v220 = v133 - v143;
        do
        {
          float32x4_t v221 = &v219[(unint64_t)v137 / 2 + (unint64_t)v137 / 2];
          int v222 = *v221;
          float32x4_t v223 = &v221[(unint64_t)v137 / 2];
          *v218++ = ((vaddvq_s32((int32x4_t)vmovl_u16(*v12)) + v12[1].u16[0] + v12[1].u16[1] + v12[1].u16[2]) * *v219
                   + v12[1].u16[3] * v219[(unint64_t)v137 / 2]
                   + v12[2].u16[0] * v222
                   + v12[2].u16[1] * *v223
                   + v12[2].u16[2] * v223[(unint64_t)v137 / 2]
                   + v12[2].u16[3] * v223[(unint64_t)v137 / 2 + (unint64_t)v137 / 2]
                   + v12[3].u16[0]
                   * v223[(unint64_t)v137 / 2
                                      + (unint64_t)v137 / 2
                                      + (unint64_t)v137 / 2]) >> 15;
          ++v219;
          --v220;
        }
        while (v220);
        goto LABEL_139;
      }
      uint64_t v133 = *((unsigned int *)a1 + 2);
      if (v146) {
        goto LABEL_137;
      }
      if (v148) {
        goto LABEL_137;
      }
      if (v150) {
        goto LABEL_137;
      }
      if (v152) {
        goto LABEL_137;
      }
      if (v154) {
        goto LABEL_137;
      }
      if (v156) {
        goto LABEL_137;
      }
      if (v158) {
        goto LABEL_137;
      }
      float v160 = (const __int16 *)v12;
      uint16x4_t v161 = (uint16x4_t)vld1_dup_s16(v160++);
      uint16x4_t v162 = (uint16x4_t)vld1_dup_s16(v160);
      uint32x4_t v163 = vaddl_u16(v161, v162);
      uint64_t v164 = (const __int16 *)v12 + 2;
      uint16x4_t v165 = (uint16x4_t)vld1_dup_s16(v164);
      uint64_t v166 = (const __int16 *)v12 + 3;
      uint16x4_t v167 = (uint16x4_t)vld1_dup_s16(v166);
      uint32x4_t v168 = vaddw_u16(vaddw_u16(v163, v165), v167);
      uint64_t v169 = (const __int16 *)&v12[1];
      uint16x4_t v170 = (uint16x4_t)vld1_dup_s16(v169);
      uint32x4_t v171 = vaddw_u16(v168, v170);
      unint64_t v172 = (const __int16 *)&v12[1] + 1;
      uint16x4_t v173 = (uint16x4_t)vld1_dup_s16(v172);
      unint64_t v174 = (const __int16 *)&v12[1] + 2;
      uint16x4_t v175 = (uint16x4_t)vld1_dup_s16(v174);
      int16x8_t v176 = (int16x8_t)vaddw_u16(vaddw_u16(v171, v173), v175);
      unint64_t v177 = (const __int16 *)&v12[1] + 3;
      uint16x4_t v178 = (uint16x4_t)vld1_dup_s16(v177);
      int16x8_t v179 = (int16x8_t)vmovl_u16(v178);
      BOOL v180 = (const __int16 *)&v12[2];
      uint16x4_t v181 = (uint16x4_t)vld1_dup_s16(v180);
      BOOL v182 = (const __int16 *)&v12[2] + 1;
      uint16x4_t v183 = (uint16x4_t)vld1_dup_s16(v182);
      int16x8_t v184 = (int16x8_t)vmovl_u16(v181);
      int16x8_t v185 = (int16x8_t)vmovl_u16(v183);
      BOOL v186 = (const __int16 *)&v12[2] + 2;
      uint16x4_t v187 = (uint16x4_t)vld1_dup_s16(v186);
      int16x8_t v188 = (int16x8_t)vmovl_u16(v187);
      BOOL v189 = (const __int16 *)&v12[2] + 3;
      uint16x4_t v190 = (uint16x4_t)vld1_dup_s16(v189);
      BOOL v191 = (const __int16 *)&v12[3];
      uint16x4_t v192 = (uint16x4_t)vld1_dup_s16(v191);
      int16x8_t v193 = (int16x8_t)vmovl_u16(v190);
      int16x8_t v194 = (int16x8_t)vmovl_u16(v192);
      uint16x8_t v195 = (uint16x8_t)vuzp1q_s16(v176, v179);
      uint16x4_t v196 = (uint16x4_t)vmovn_s32((int32x4_t)v179);
      uint64_t v143 = v3519 & 0xFFFFFFF8;
      uint16x8_t v197 = (uint16x8_t)vuzp1q_s16(v176, v184);
      uint16x4_t v198 = (uint16x4_t)vmovn_s32((int32x4_t)v184);
      uint16x8_t v199 = (uint16x8_t)vuzp1q_s16(v176, v185);
      uint16x4_t v200 = (uint16x4_t)vmovn_s32((int32x4_t)v185);
      uint16x8_t v201 = (uint16x8_t)vuzp1q_s16(v176, v188);
      uint16x4_t v202 = (uint16x4_t)vmovn_s32((int32x4_t)v188);
      uint16x8_t v203 = (uint16x8_t)vuzp1q_s16(v176, v193);
      uint16x4_t v204 = (uint16x4_t)vmovn_s32((int32x4_t)v193);
      uint16x8_t v205 = (uint16x8_t)vuzp1q_s16(v176, v194);
      uint16x4_t v206 = (uint16x4_t)vmovn_s32((int32x4_t)v194);
      uint64_t v207 = v143;
      float v208 = (int16x8_t *)*a2;
      float v209 = (uint16x8_t *)*a1;
      do
      {
        uint16x8_t v210 = *(uint16x8_t *)((char *)v209 + 2 * v135);
        float v211 = (uint16x8_t *)((char *)v209 + v137 + v137);
        uint32x4_t v212 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v176, (int32x4_t)vmovl_high_u16(*v209)), v195, v210), v197, *v211);
        uint32x4_t v213 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v176, (int32x4_t)vmovl_u16(*(uint16x4_t *)v209->i8)), v196, *(uint16x4_t *)v210.i8), v198, *(uint16x4_t *)v211->i8);
        unint64_t v214 = (uint16x8_t *)((char *)v211 + v137);
        uint32x4_t v215 = vmlal_high_u16(v212, v199, *v214);
        uint32x4_t v216 = vmlal_u16(v213, v200, *(uint16x4_t *)v214->i8);
        float32x4_t v217 = (uint16x4_t *)&v214->i8[v137];
        *v208++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v216, v202, *v217), v204, *(uint16x4_t *)((char *)v217 + 2 * v135)), v206, *(uint16x4_t *)((char *)v217 + 2 * v135 + 2 * v135)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v215, v201, *(uint16x8_t *)v217->i8), v203, *(uint16x8_t *)&v217->i8[2 * v135]), v205, *(uint16x8_t *)&v217->i8[2 * v135 + 2 * v135]), 0xFuLL);
        ++v209;
        v207 -= 8;
      }
      while (v207);
      if (v143 != v3519) {
        goto LABEL_137;
      }
LABEL_139:
      uint64_t v224 = 16 * v135;
      unint64_t v3505 = v136;
      uint64_t v225 = 0;
      if (v133 < 8) {
        goto LABEL_204;
      }
      unint64_t v226 = v136 + 2 * v140;
      unint64_t v227 = v136 + 2 * v140 + v141;
      uint64_t v228 = 16 * v135;
      float v229 = (char *)v134 + v224 - v137;
      unint64_t v230 = (unint64_t)v134 + v224 - v137 + v141;
      float v231 = (char *)v134 + 12 * v135;
      unint64_t v232 = (unint64_t)v134 + 12 * v135 + v141;
      uint64_t v233 = v135;
      float v234 = (char *)v134 + 10 * v135;
      unint64_t v235 = (unint64_t)v134 + 10 * v135 + v141;
      uint64_t v236 = 8 * v135;
      uint64_t v237 = 6 * v135;
      BOOL v239 = v226 < v230 && (unint64_t)v229 < v227;
      BOOL v241 = v226 < v232 && (unint64_t)v231 < v227;
      BOOL v243 = v226 < v235 && (unint64_t)v234 < v227;
      BOOL v245 = v226 < (unint64_t)v134 + v142 + v141 && (unint64_t)v134 + v142 < v227;
      BOOL v247 = v226 < (unint64_t)v134 + v139 + v141 && (unint64_t)v134 + v139 < v227;
      BOOL v249 = v226 < (unint64_t)v134 + v138 + v141 && (unint64_t)v134 + v138 < v227;
      BOOL v251 = v226 < (unint64_t)v134 + v137 + v141 && (unint64_t)v134 + v137 < v227;
      BOOL v253 = v226 < (unint64_t)v134 + v141 && (unint64_t)v134 < v227;
      if ((unint64_t)v12 >= v227 || v226 >= (unint64_t)&v12[3] + 2)
      {
        uint64_t v133 = v3519;
        uint64_t v139 = v237;
        uint64_t v142 = v236;
        uint64_t v135 = v233;
        if (v239)
        {
          unint64_t v136 = v3505;
          uint64_t v224 = v228;
        }
        else
        {
          uint64_t v224 = v228;
          if (v241)
          {
            unint64_t v136 = v3505;
          }
          else
          {
            unint64_t v136 = v3505;
            if (!v243 && !v245 && !v247 && !v249 && !v251 && !v253)
            {
              float v255 = (const __int16 *)v12;
              uint16x4_t v256 = (uint16x4_t)vld1_dup_s16(v255++);
              uint16x4_t v257 = (uint16x4_t)vld1_dup_s16(v255);
              float v258 = (const __int16 *)v12 + 2;
              uint16x4_t v259 = (uint16x4_t)vld1_dup_s16(v258);
              uint32x4_t v260 = vaddw_u16(vaddl_u16(v256, v257), v259);
              float v261 = (const __int16 *)v12 + 3;
              uint16x4_t v262 = (uint16x4_t)vld1_dup_s16(v261);
              uint32x4_t v263 = vaddw_u16(v260, v262);
              float v264 = (const __int16 *)&v12[1];
              uint16x4_t v265 = (uint16x4_t)vld1_dup_s16(v264);
              float v266 = (const __int16 *)&v12[1] + 1;
              uint16x4_t v267 = (uint16x4_t)vld1_dup_s16(v266);
              int16x8_t v268 = (int16x8_t)vaddw_u16(vaddw_u16(v263, v265), v267);
              float v269 = (const __int16 *)&v12[1] + 2;
              uint16x4_t v270 = (uint16x4_t)vld1_dup_s16(v269);
              int16x8_t v271 = (int16x8_t)vmovl_u16(v270);
              float v272 = (const __int16 *)&v12[1] + 3;
              uint16x4_t v273 = (uint16x4_t)vld1_dup_s16(v272);
              float v274 = (const __int16 *)&v12[2];
              uint16x4_t v275 = (uint16x4_t)vld1_dup_s16(v274);
              int16x8_t v276 = (int16x8_t)vmovl_u16(v273);
              int16x8_t v277 = (int16x8_t)vmovl_u16(v275);
              float v278 = (const __int16 *)&v12[2] + 1;
              uint16x4_t v279 = (uint16x4_t)vld1_dup_s16(v278);
              int16x8_t v280 = (int16x8_t)vmovl_u16(v279);
              float v281 = (const __int16 *)&v12[2] + 2;
              uint16x4_t v282 = (uint16x4_t)vld1_dup_s16(v281);
              float v283 = (const __int16 *)&v12[2] + 3;
              uint16x4_t v284 = (uint16x4_t)vld1_dup_s16(v283);
              int16x8_t v285 = (int16x8_t)vmovl_u16(v282);
              int16x8_t v286 = (int16x8_t)vmovl_u16(v284);
              float v287 = (const __int16 *)&v12[3];
              uint16x4_t v288 = (uint16x4_t)vld1_dup_s16(v287);
              int16x8_t v289 = (int16x8_t)vmovl_u16(v288);
              uint16x8_t v290 = (uint16x8_t)vuzp1q_s16(v268, v271);
              uint16x4_t v291 = (uint16x4_t)vmovn_s32((int32x4_t)v271);
              uint64_t v225 = v3519 & 0xFFFFFFF8;
              uint16x8_t v292 = (uint16x8_t)vuzp1q_s16(v268, v276);
              float v293 = (int16x8_t *)(v3505 + 2 * v140);
              uint16x4_t v294 = (uint16x4_t)vmovn_s32((int32x4_t)v276);
              uint16x8_t v295 = (uint16x8_t)vuzp1q_s16(v268, v277);
              uint16x4_t v296 = (uint16x4_t)vmovn_s32((int32x4_t)v277);
              uint16x8_t v297 = (uint16x8_t)vuzp1q_s16(v268, v280);
              uint16x4_t v298 = (uint16x4_t)vmovn_s32((int32x4_t)v280);
              uint16x8_t v299 = (uint16x8_t)vuzp1q_s16(v268, v285);
              uint16x4_t v300 = (uint16x4_t)vmovn_s32((int32x4_t)v285);
              uint16x8_t v301 = (uint16x8_t)vuzp1q_s16(v268, v286);
              uint16x4_t v302 = (uint16x4_t)vmovn_s32((int32x4_t)v286);
              uint16x8_t v303 = (uint16x8_t)vuzp1q_s16(v268, v289);
              uint16x4_t v304 = (uint16x4_t)vmovn_s32((int32x4_t)v289);
              uint64_t v305 = v225;
              float v306 = (uint16x8_t *)v134;
              do
              {
                uint16x8_t v307 = *(uint16x8_t *)((char *)v306 + v137);
                uint32x4_t v308 = vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v268, (int32x4_t)vmovl_high_u16(*v306)), v290, v307);
                uint32x4_t v309 = vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v268, (int32x4_t)vmovl_u16(*(uint16x4_t *)v306->i8)), v291, *(uint16x4_t *)v307.i8);
                float v310 = (uint16x4_t *)&v306->i8[v137 + v137];
                uint16x8_t v311 = *(uint16x8_t *)v310->i8;
                uint32x4_t v312 = vmlal_u16(v309, v294, *v310);
                uint64_t v313 = (uint16x8_t *)((char *)v310 + v137);
                uint32x4_t v314 = vmlal_high_u16(vmlal_high_u16(v308, v292, v311), v295, *v313);
                uint32x4_t v315 = vmlal_u16(v312, v296, *(uint16x4_t *)v313->i8);
                uint64_t v316 = (uint16x8_t *)((char *)v313 + v137);
                uint32x4_t v317 = vmlal_high_u16(v314, v297, *v316);
                uint32x4_t v318 = vmlal_u16(v315, v298, *(uint16x4_t *)v316->i8);
                float v319 = (uint16x4_t *)&v316->i8[v137];
                *v293++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v318, v300, *v319), v302, *(uint16x4_t *)((char *)v319 + v137)), v304, *(uint16x4_t *)((char *)v319 + v137 + v137)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v317, v299, *(uint16x8_t *)v319->i8), v301, *(uint16x8_t *)&v319->i8[v137]), v303, *(uint16x8_t *)&v319->i8[v137 + v137]), 0xFuLL);
                ++v306;
                v305 -= 8;
              }
              while (v305);
              if (v225 == v3519)
              {
LABEL_206:
                if (v133 >= 8)
                {
                  uint64_t v329 = 0;
                  uint64_t v3493 = v224;
                  unint64_t v3501 = v140;
                  unint64_t v712 = v136 + 4 * v140;
                  unint64_t v713 = v136 + 4 * v140 + v141;
                  float32x4_t v714 = (char *)v134 + v224;
                  unint64_t v715 = (unint64_t)v134 + v224 + v141;
                  float32x4_t v716 = (char *)v134 + v224 - v137;
                  unint64_t v717 = (unint64_t)v134 + v224 - v137 + v141;
                  uint64_t v718 = 4 * (v137 + v135);
                  float32x4_t v719 = (char *)v134 + v718;
                  unint64_t v720 = (unint64_t)v134 + v718 + v141;
                  uint64_t v721 = v135;
                  float32x4_t v722 = (char *)v134 + 10 * v135;
                  unint64_t v723 = (unint64_t)v134 + 10 * v135 + v141;
                  float32x4_t v724 = (char *)v134 + v142;
                  uint64_t v725 = v142;
                  unint64_t v726 = (unint64_t)v134 + v142 + v141;
                  int32x2_t v727 = (char *)v134 + v139;
                  uint64_t v728 = v139;
                  unint64_t v729 = (unint64_t)v134 + v139 + v141;
                  int32x2_t v730 = (char *)v134 + v138;
                  uint64_t v731 = v138;
                  unint64_t v732 = (unint64_t)v134 + v138 + v141;
                  BOOL v734 = v712 < v715 && (unint64_t)v714 < v713;
                  BOOL v736 = v712 < v717 && (unint64_t)v716 < v713;
                  BOOL v738 = v712 < v720 && (unint64_t)v719 < v713;
                  BOOL v740 = v712 < v723 && (unint64_t)v722 < v713;
                  BOOL v742 = v712 < v726 && (unint64_t)v724 < v713;
                  BOOL v744 = v712 < v729 && (unint64_t)v727 < v713;
                  BOOL v746 = v712 < v732 && (unint64_t)v730 < v713;
                  BOOL v748 = v712 < (unint64_t)v134 + v137 + v141 && (unint64_t)v134 + v137 < v713;
                  BOOL v750 = v712 < (unint64_t)v134 + v141 && (unint64_t)v134 < v713;
                  BOOL v751 = (unint64_t)v12 >= v713 || v712 >= (unint64_t)&v12[3] + 2;
                  if (!v751 || v734)
                  {
                    uint64_t v133 = v3519;
                    uint64_t v138 = v731;
                    uint64_t v139 = v728;
                    uint64_t v135 = v721;
                    unint64_t v140 = v3501;
                    unint64_t v136 = v3505;
                    uint64_t v142 = v725;
                    uint64_t v224 = v3493;
                  }
                  else
                  {
                    uint64_t v133 = v3519;
                    uint64_t v138 = v731;
                    uint64_t v139 = v728;
                    uint64_t v142 = v725;
                    if (v736)
                    {
                      uint64_t v135 = v721;
                      unint64_t v140 = v3501;
                      unint64_t v136 = v3505;
                      uint64_t v224 = v3493;
                    }
                    else
                    {
                      uint64_t v224 = v3493;
                      unint64_t v140 = v3501;
                      uint64_t v135 = v721;
                      if (v738)
                      {
                        unint64_t v136 = v3505;
                      }
                      else
                      {
                        unint64_t v136 = v3505;
                        if (!v740 && !v742 && !v744 && !v746 && !v748 && !v750)
                        {
                          int v752 = (const __int16 *)v12;
                          uint16x4_t v753 = (uint16x4_t)vld1_dup_s16(v752++);
                          uint16x4_t v754 = (uint16x4_t)vld1_dup_s16(v752);
                          uint32x4_t v755 = vaddl_u16(v753, v754);
                          uint64_t v756 = (const __int16 *)v12 + 2;
                          uint16x4_t v757 = (uint16x4_t)vld1_dup_s16(v756);
                          uint32x4_t v758 = vaddw_u16(v755, v757);
                          unint64_t v759 = (const __int16 *)v12 + 3;
                          uint16x4_t v760 = (uint16x4_t)vld1_dup_s16(v759);
                          unint64_t v761 = (const __int16 *)&v12[1];
                          uint16x4_t v762 = (uint16x4_t)vld1_dup_s16(v761);
                          int16x8_t v763 = (int16x8_t)vaddw_u16(vaddw_u16(v758, v760), v762);
                          unint64_t v764 = (const __int16 *)&v12[1] + 1;
                          uint16x4_t v765 = (uint16x4_t)vld1_dup_s16(v764);
                          int16x8_t v766 = (int16x8_t)vmovl_u16(v765);
                          float v767 = (const __int16 *)&v12[1] + 2;
                          uint16x4_t v768 = (uint16x4_t)vld1_dup_s16(v767);
                          BOOL v769 = (const __int16 *)&v12[1] + 3;
                          uint16x4_t v770 = (uint16x4_t)vld1_dup_s16(v769);
                          int16x8_t v771 = (int16x8_t)vmovl_u16(v768);
                          int16x8_t v772 = (int16x8_t)vmovl_u16(v770);
                          BOOL v773 = (const __int16 *)&v12[2];
                          uint16x4_t v774 = (uint16x4_t)vld1_dup_s16(v773);
                          int16x8_t v775 = (int16x8_t)vmovl_u16(v774);
                          BOOL v776 = (const __int16 *)&v12[2] + 1;
                          uint16x4_t v777 = (uint16x4_t)vld1_dup_s16(v776);
                          BOOL v778 = (const __int16 *)&v12[2] + 2;
                          uint16x4_t v779 = (uint16x4_t)vld1_dup_s16(v778);
                          int16x8_t v780 = (int16x8_t)vmovl_u16(v777);
                          int16x8_t v781 = (int16x8_t)vmovl_u16(v779);
                          BOOL v782 = (const __int16 *)&v12[2] + 3;
                          uint16x4_t v783 = (uint16x4_t)vld1_dup_s16(v782);
                          int16x8_t v784 = (int16x8_t)vmovl_u16(v783);
                          BOOL v785 = (const __int16 *)&v12[3];
                          uint16x4_t v786 = (uint16x4_t)vld1_dup_s16(v785);
                          int16x8_t v787 = (int16x8_t)vmovl_u16(v786);
                          uint16x8_t v788 = (uint16x8_t)vuzp1q_s16(v763, v766);
                          uint16x4_t v789 = (uint16x4_t)vmovn_s32((int32x4_t)v766);
                          uint64_t v329 = v3519 & 0xFFFFFFF8;
                          uint16x8_t v790 = (uint16x8_t)vuzp1q_s16(v763, v771);
                          BOOL v791 = (int16x8_t *)(v3505 + 4 * v3501);
                          uint16x4_t v792 = (uint16x4_t)vmovn_s32((int32x4_t)v771);
                          uint16x8_t v793 = (uint16x8_t)vuzp1q_s16(v763, v772);
                          uint16x4_t v794 = (uint16x4_t)vmovn_s32((int32x4_t)v772);
                          uint16x8_t v795 = (uint16x8_t)vuzp1q_s16(v763, v775);
                          uint16x4_t v796 = (uint16x4_t)vmovn_s32((int32x4_t)v775);
                          uint16x8_t v797 = (uint16x8_t)vuzp1q_s16(v763, v780);
                          uint16x4_t v798 = (uint16x4_t)vmovn_s32((int32x4_t)v780);
                          uint16x8_t v799 = (uint16x8_t)vuzp1q_s16(v763, v781);
                          uint16x4_t v800 = (uint16x4_t)vmovn_s32((int32x4_t)v781);
                          uint16x8_t v801 = (uint16x8_t)vuzp1q_s16(v763, v784);
                          uint16x4_t v802 = (uint16x4_t)vmovn_s32((int32x4_t)v784);
                          uint16x8_t v803 = (uint16x8_t)vuzp1q_s16(v763, v787);
                          uint16x4_t v804 = (uint16x4_t)vmovn_s32((int32x4_t)v787);
                          uint64_t v805 = v329;
                          float32x4_t v806 = (uint16x8_t *)v134;
                          do
                          {
                            uint16x8_t v807 = *(uint16x8_t *)((char *)v806 + v137);
                            float32x4_t v808 = (uint16x8_t *)((char *)v806 + v137 + v137);
                            uint32x4_t v809 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v763, (int32x4_t)vmovl_high_u16(*v806)), v788, v807), v790, *v808);
                            uint32x4_t v810 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v763, (int32x4_t)vmovl_u16(*(uint16x4_t *)v806->i8)), v789, *(uint16x4_t *)v807.i8), v792, *(uint16x4_t *)v808->i8);
                            float32x4_t v811 = (uint16x4_t *)&v808->i8[v137];
                            uint16x8_t v812 = *(uint16x8_t *)v811->i8;
                            uint32x4_t v813 = vmlal_u16(v810, v794, *v811);
                            float32x4_t v814 = (uint16x8_t *)((char *)v811 + v137);
                            uint32x4_t v815 = vmlal_high_u16(vmlal_high_u16(v809, v793, v812), v795, *v814);
                            uint32x4_t v816 = vmlal_u16(v813, v796, *(uint16x4_t *)v814->i8);
                            unint64_t v817 = (uint16x8_t *)((char *)v814 + v137);
                            uint32x4_t v818 = vmlal_high_u16(v815, v797, *v817);
                            uint32x4_t v819 = vmlal_u16(v816, v798, *(uint16x4_t *)v817->i8);
                            double v820 = (uint16x4_t *)&v817->i8[v137];
                            *v791++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v819, v800, *v820), v802, *(uint16x4_t *)((char *)v820 + v137)), v804, *(uint16x4_t *)((char *)v820 + v137 + v137)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v818, v799, *(uint16x8_t *)v820->i8), v801, *(uint16x8_t *)&v820->i8[v137]), v803, *(uint16x8_t *)&v820->i8[v137 + v137]), 0xFuLL);
                            ++v806;
                            v805 -= 8;
                          }
                          while (v805);
                          if (v329 == v3519)
                          {
LABEL_555:
                            if (v133 >= 8)
                            {
                              uint64_t v829 = 0;
                              unint64_t v1110 = v136 + 6 * v140;
                              unint64_t v1111 = v136 + 6 * v140 + v141;
                              uint64_t v1112 = 4 * (v137 + v135);
                              unint64_t v1113 = (unint64_t)v134 + v1112;
                              unint64_t v1114 = (unint64_t)v134 + v1112 + v141;
                              BOOL v1116 = v1110 < (unint64_t)v134 + 18 * v135 + v141
                                   && (unint64_t)v134 + 18 * v135 < v1111;
                              BOOL v1118 = v1110 < (unint64_t)v134 + v224 + v141
                                   && (unint64_t)v134 + v224 < v1111;
                              BOOL v1120 = v1110 < (unint64_t)v134 + v224 - v137 + v141
                                   && (unint64_t)v134 + v224 - v137 < v1111;
                              BOOL v1122 = v1110 < v1114 && v1113 < v1111;
                              BOOL v1124 = v1110 < (unint64_t)v134 + 10 * v135 + v141
                                   && (unint64_t)v134 + 10 * v135 < v1111;
                              BOOL v1126 = v1110 < (unint64_t)v134 + v142 + v141
                                   && (unint64_t)v134 + v142 < v1111;
                              BOOL v1128 = v1110 < (unint64_t)v134 + v139 + v141
                                   && (unint64_t)v134 + v139 < v1111;
                              BOOL v1130 = v1110 < (unint64_t)v134 + v138 + v141
                                   && (unint64_t)v134 + v138 < v1111;
                              BOOL v1132 = v1110 < (unint64_t)v134 + v137 + v141
                                   && (unint64_t)v134 + v137 < v1111;
                              BOOL v1134 = v1110 < (unint64_t)v134 + v141 && (unint64_t)v134 < v1111;
                              if (((unint64_t)v12 >= v1111 || v1110 >= (unint64_t)&v12[3] + 2)
                                && !v1116
                                && !v1118
                                && !v1120
                                && !v1122
                                && !v1124
                                && !v1126
                                && !v1128
                                && !v1130
                                && !v1132
                                && !v1134)
                              {
                                long long v1136 = (const __int16 *)v12;
                                uint16x4_t v1137 = (uint16x4_t)vld1_dup_s16(v1136++);
                                uint16x4_t v1138 = (uint16x4_t)vld1_dup_s16(v1136);
                                uint32x4_t v1139 = vaddl_u16(v1137, v1138);
                                long long v1140 = (const __int16 *)v12 + 2;
                                uint16x4_t v1141 = (uint16x4_t)vld1_dup_s16(v1140);
                                uint32x4_t v1142 = vaddw_u16(v1139, v1141);
                                long long v1143 = (const __int16 *)v12 + 3;
                                uint16x4_t v1144 = (uint16x4_t)vld1_dup_s16(v1143);
                                int16x8_t v1145 = (int16x8_t)vaddw_u16(v1142, v1144);
                                float v1146 = (const __int16 *)&v12[1];
                                uint16x4_t v1147 = (uint16x4_t)vld1_dup_s16(v1146);
                                int16x8_t v1148 = (int16x8_t)vmovl_u16(v1147);
                                uint64_t v1149 = (const __int16 *)&v12[1] + 1;
                                uint16x4_t v1150 = (uint16x4_t)vld1_dup_s16(v1149);
                                int16x8_t v1151 = (int16x8_t)vmovl_u16(v1150);
                                unint64_t v1152 = (const __int16 *)&v12[1] + 2;
                                uint16x4_t v1153 = (uint16x4_t)vld1_dup_s16(v1152);
                                int16x8_t v1154 = (int16x8_t)vmovl_u16(v1153);
                                float v1155 = (const __int16 *)&v12[1] + 3;
                                uint16x4_t v1156 = (uint16x4_t)vld1_dup_s16(v1155);
                                int16x8_t v1157 = (int16x8_t)vmovl_u16(v1156);
                                uint64_t v1158 = (const __int16 *)&v12[2];
                                uint16x4_t v1159 = (uint16x4_t)vld1_dup_s16(v1158);
                                int16x8_t v1160 = (int16x8_t)vmovl_u16(v1159);
                                uint64_t v1161 = (const __int16 *)&v12[2] + 1;
                                uint16x4_t v1162 = (uint16x4_t)vld1_dup_s16(v1161);
                                int16x8_t v1163 = (int16x8_t)vmovl_u16(v1162);
                                v1164 = (const __int16 *)&v12[2] + 2;
                                uint16x4_t v1165 = (uint16x4_t)vld1_dup_s16(v1164);
                                int16x8_t v1166 = (int16x8_t)vmovl_u16(v1165);
                                float v1167 = (const __int16 *)&v12[2] + 3;
                                uint16x4_t v1168 = (uint16x4_t)vld1_dup_s16(v1167);
                                int16x8_t v1169 = (int16x8_t)vmovl_u16(v1168);
                                uint64_t v1170 = (const __int16 *)&v12[3];
                                uint16x4_t v1171 = (uint16x4_t)vld1_dup_s16(v1170);
                                int16x8_t v1172 = (int16x8_t)vmovl_u16(v1171);
                                uint64_t v829 = v133 & 0xFFFFFFF8;
                                uint16x8_t v1173 = (uint16x8_t)vuzp1q_s16(v1145, v1148);
                                uint16x4_t v1174 = (uint16x4_t)vmovn_s32((int32x4_t)v1148);
                                uint16x8_t v1175 = (uint16x8_t)vuzp1q_s16(v1145, v1151);
                                uint16x4_t v1176 = (uint16x4_t)vmovn_s32((int32x4_t)v1151);
                                long long v1177 = (int16x8_t *)(v136 + 6 * v140);
                                uint16x8_t v1178 = (uint16x8_t)vuzp1q_s16(v1145, v1154);
                                uint16x4_t v1179 = (uint16x4_t)vmovn_s32((int32x4_t)v1154);
                                uint16x8_t v1180 = (uint16x8_t)vuzp1q_s16(v1145, v1157);
                                uint16x4_t v1181 = (uint16x4_t)vmovn_s32((int32x4_t)v1157);
                                uint16x8_t v1182 = (uint16x8_t)vuzp1q_s16(v1145, v1160);
                                uint16x4_t v1183 = (uint16x4_t)vmovn_s32((int32x4_t)v1160);
                                uint16x8_t v1184 = (uint16x8_t)vuzp1q_s16(v1145, v1163);
                                uint16x4_t v1185 = (uint16x4_t)vmovn_s32((int32x4_t)v1163);
                                uint16x8_t v1186 = (uint16x8_t)vuzp1q_s16(v1145, v1166);
                                uint16x4_t v1187 = (uint16x4_t)vmovn_s32((int32x4_t)v1166);
                                uint16x8_t v1188 = (uint16x8_t)vuzp1q_s16(v1145, v1169);
                                uint16x4_t v1189 = (uint16x4_t)vmovn_s32((int32x4_t)v1169);
                                uint16x8_t v1190 = (uint16x8_t)vuzp1q_s16(v1145, v1172);
                                uint16x4_t v1191 = (uint16x4_t)vmovn_s32((int32x4_t)v1172);
                                uint64_t v1192 = v829;
                                unint64_t v1193 = (uint16x8_t *)v134;
                                do
                                {
                                  uint16x8_t v1194 = *(uint16x8_t *)((char *)v1193 + v137);
                                  long long v1195 = (uint16x8_t *)((char *)v1193 + v137 + v137);
                                  uint32x4_t v1196 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1145, (int32x4_t)vmovl_high_u16(*v1193)), v1173, v1194), v1175, *v1195);
                                  uint32x4_t v1197 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1145, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1193->i8)), v1174, *(uint16x4_t *)v1194.i8), v1176, *(uint16x4_t *)v1195->i8);
                                  long long v1198 = (uint16x8_t *)((char *)v1195 + v137);
                                  uint32x4_t v1199 = vmlal_high_u16(v1196, v1178, *v1198);
                                  uint32x4_t v1200 = vmlal_u16(v1197, v1179, *(uint16x4_t *)v1198->i8);
                                  long long v1201 = (uint16x4_t *)&v1198->i8[v137];
                                  uint16x8_t v1202 = *(uint16x8_t *)v1201->i8;
                                  uint32x4_t v1203 = vmlal_u16(v1200, v1181, *v1201);
                                  long long v1204 = (uint16x8_t *)((char *)v1201 + v137);
                                  uint32x4_t v1205 = vmlal_high_u16(vmlal_high_u16(v1199, v1180, v1202), v1182, *v1204);
                                  uint32x4_t v1206 = vmlal_u16(v1203, v1183, *(uint16x4_t *)v1204->i8);
                                  long long v1207 = (uint16x8_t *)((char *)v1204 + v137);
                                  uint32x4_t v1208 = vmlal_high_u16(v1205, v1184, *v1207);
                                  uint32x4_t v1209 = vmlal_u16(v1206, v1185, *(uint16x4_t *)v1207->i8);
                                  long long v1210 = (uint16x4_t *)&v1207->i8[v137];
                                  *v1177++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1209, v1187, *v1210), v1189, *(uint16x4_t *)((char *)v1210 + v137)), v1191, *(uint16x4_t *)((char *)v1210 + v137 + v137)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1208, v1186, *(uint16x8_t *)v1210->i8), v1188, *(uint16x8_t *)&v1210->i8[v137]), v1190, *(uint16x8_t *)&v1210->i8[v137 + v137]), 0xFuLL);
                                  ++v1193;
                                  v1192 -= 8;
                                }
                                while (v1192);
                                if (v829 == v133)
                                {
LABEL_866:
                                  uint64_t v1225 = 10 * v135;
                                  if (v133 >= 8)
                                  {
                                    uint64_t v1226 = 0;
                                    unint64_t v1555 = v136 + 8 * v140;
                                    unint64_t v1556 = v136 + 8 * v140 + v141;
                                    uint64_t v1557 = 4 * (v137 + v135);
                                    unint64_t v1558 = (unint64_t)v134 + v1557;
                                    unint64_t v1559 = (unint64_t)v134 + v1557 + v141;
                                    BOOL v1561 = v1555 < (unint64_t)v134 + 20 * v135 + v141
                                         && (unint64_t)v134 + 20 * v135 < v1556;
                                    BOOL v1563 = v1555 < (unint64_t)v134 + 18 * v135 + v141
                                         && (unint64_t)v134 + 18 * v135 < v1556;
                                    BOOL v1565 = v1555 < (unint64_t)v134 + v224 + v141
                                         && (unint64_t)v134 + v224 < v1556;
                                    BOOL v1567 = v1555 < (unint64_t)v134 + v224 - v137 + v141
                                         && (unint64_t)v134 + v224 - v137 < v1556;
                                    BOOL v1569 = v1555 < v1559 && v1558 < v1556;
                                    BOOL v1571 = v1555 < (unint64_t)v134 + v1225 + v141
                                         && (unint64_t)v134 + v1225 < v1556;
                                    BOOL v1573 = v1555 < (unint64_t)v134 + v142 + v141
                                         && (unint64_t)v134 + v142 < v1556;
                                    BOOL v1575 = v1555 < (unint64_t)v134 + v139 + v141
                                         && (unint64_t)v134 + v139 < v1556;
                                    BOOL v1577 = v1555 < (unint64_t)v134 + v138 + v141
                                         && (unint64_t)v134 + v138 < v1556;
                                    BOOL v1579 = v1555 < (unint64_t)v134 + v137 + v141
                                         && (unint64_t)v134 + v137 < v1556;
                                    BOOL v1581 = v1555 < (unint64_t)v134 + v141 && (unint64_t)v134 < v1556;
                                    if (((unint64_t)v12 >= v1556 || v1555 >= (unint64_t)&v12[3] + 2)
                                      && !v1561
                                      && !v1563
                                      && !v1565
                                      && !v1567
                                      && !v1569
                                      && !v1571
                                      && !v1573
                                      && !v1575
                                      && !v1577
                                      && !v1579
                                      && !v1581)
                                    {
                                      long long v1583 = (const __int16 *)v12;
                                      uint16x4_t v1584 = (uint16x4_t)vld1_dup_s16(v1583++);
                                      uint16x4_t v1585 = (uint16x4_t)vld1_dup_s16(v1583);
                                      long long v1586 = (const __int16 *)v12 + 2;
                                      uint16x4_t v1587 = (uint16x4_t)vld1_dup_s16(v1586);
                                      int16x8_t v1588 = (int16x8_t)vaddw_u16(vaddl_u16(v1584, v1585), v1587);
                                      float32x4_t v1589 = (const __int16 *)v12 + 3;
                                      uint16x4_t v1590 = (uint16x4_t)vld1_dup_s16(v1589);
                                      int16x8_t v1591 = (int16x8_t)vmovl_u16(v1590);
                                      float v1592 = (const __int16 *)&v12[1];
                                      uint16x4_t v1593 = (uint16x4_t)vld1_dup_s16(v1592);
                                      float v1594 = (const __int16 *)&v12[1] + 1;
                                      uint16x4_t v1595 = (uint16x4_t)vld1_dup_s16(v1594);
                                      int16x8_t v1596 = (int16x8_t)vmovl_u16(v1593);
                                      int16x8_t v1597 = (int16x8_t)vmovl_u16(v1595);
                                      float v1598 = (const __int16 *)&v12[1] + 2;
                                      uint16x4_t v1599 = (uint16x4_t)vld1_dup_s16(v1598);
                                      int16x8_t v1600 = (int16x8_t)vmovl_u16(v1599);
                                      float v1601 = (const __int16 *)&v12[1] + 3;
                                      uint16x4_t v1602 = (uint16x4_t)vld1_dup_s16(v1601);
                                      float v1603 = (const __int16 *)&v12[2];
                                      uint16x4_t v1604 = (uint16x4_t)vld1_dup_s16(v1603);
                                      int16x8_t v1605 = (int16x8_t)vmovl_u16(v1602);
                                      int16x8_t v1606 = (int16x8_t)vmovl_u16(v1604);
                                      float v1607 = (const __int16 *)&v12[2] + 1;
                                      uint16x4_t v1608 = (uint16x4_t)vld1_dup_s16(v1607);
                                      int16x8_t v1609 = (int16x8_t)vmovl_u16(v1608);
                                      float v1610 = (const __int16 *)&v12[2] + 2;
                                      uint16x4_t v1611 = (uint16x4_t)vld1_dup_s16(v1610);
                                      float v1612 = (const __int16 *)&v12[2] + 3;
                                      uint16x4_t v1613 = (uint16x4_t)vld1_dup_s16(v1612);
                                      int16x8_t v1614 = (int16x8_t)vmovl_u16(v1611);
                                      int16x8_t v1615 = (int16x8_t)vmovl_u16(v1613);
                                      float v1616 = (const __int16 *)&v12[3];
                                      uint16x4_t v1617 = (uint16x4_t)vld1_dup_s16(v1616);
                                      int16x8_t v1618 = (int16x8_t)vmovl_u16(v1617);
                                      uint16x8_t v1619 = (uint16x8_t)vuzp1q_s16(v1588, v1591);
                                      uint16x4_t v1620 = (uint16x4_t)vmovn_s32((int32x4_t)v1591);
                                      uint64_t v1226 = v3519 & 0xFFFFFFF8;
                                      uint16x8_t v1621 = (uint16x8_t)vuzp1q_s16(v1588, v1596);
                                      float32x4x3_t v1622 = (int16x8_t *)(v136 + 8 * v140);
                                      uint16x4_t v1623 = (uint16x4_t)vmovn_s32((int32x4_t)v1596);
                                      uint16x8_t v1624 = (uint16x8_t)vuzp1q_s16(v1588, v1597);
                                      uint16x4_t v1625 = (uint16x4_t)vmovn_s32((int32x4_t)v1597);
                                      uint16x8_t v1626 = (uint16x8_t)vuzp1q_s16(v1588, v1600);
                                      uint16x4_t v1627 = (uint16x4_t)vmovn_s32((int32x4_t)v1600);
                                      uint16x8_t v1628 = (uint16x8_t)vuzp1q_s16(v1588, v1605);
                                      uint16x4_t v1629 = (uint16x4_t)vmovn_s32((int32x4_t)v1605);
                                      uint16x8_t v1630 = (uint16x8_t)vuzp1q_s16(v1588, v1606);
                                      uint16x4_t v1631 = (uint16x4_t)vmovn_s32((int32x4_t)v1606);
                                      uint16x8_t v1632 = (uint16x8_t)vuzp1q_s16(v1588, v1609);
                                      uint16x4_t v1633 = (uint16x4_t)vmovn_s32((int32x4_t)v1609);
                                      uint16x8_t v1634 = (uint16x8_t)vuzp1q_s16(v1588, v1614);
                                      uint16x4_t v1635 = (uint16x4_t)vmovn_s32((int32x4_t)v1614);
                                      uint16x8_t v1636 = (uint16x8_t)vuzp1q_s16(v1588, v1615);
                                      uint16x4_t v1637 = (uint16x4_t)vmovn_s32((int32x4_t)v1615);
                                      uint16x8_t v1638 = (uint16x8_t)vuzp1q_s16(v1588, v1618);
                                      uint16x4_t v1639 = (uint16x4_t)vmovn_s32((int32x4_t)v1618);
                                      uint64_t v1640 = v1226;
                                      v1641 = (uint16x8_t *)v134;
                                      do
                                      {
                                        uint16x8_t v1642 = *(uint16x8_t *)((char *)v1641 + v137);
                                        uint32x4_t v1643 = vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1588, (int32x4_t)vmovl_high_u16(*v1641)), v1619, v1642);
                                        uint32x4_t v1644 = vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1588, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1641->i8)), v1620, *(uint16x4_t *)v1642.i8);
                                        v1645 = (uint16x4_t *)&v1641->i8[v137 + v137];
                                        uint16x8_t v1646 = *(uint16x8_t *)v1645->i8;
                                        uint32x4_t v1647 = vmlal_u16(v1644, v1623, *v1645);
                                        v1648 = (uint16x8_t *)((char *)v1645 + v137);
                                        uint32x4_t v1649 = vmlal_high_u16(vmlal_high_u16(v1643, v1621, v1646), v1624, *v1648);
                                        uint32x4_t v1650 = vmlal_u16(v1647, v1625, *(uint16x4_t *)v1648->i8);
                                        v1651 = (uint16x8_t *)((char *)v1648 + v137);
                                        uint32x4_t v1652 = vmlal_high_u16(v1649, v1626, *v1651);
                                        uint32x4_t v1653 = vmlal_u16(v1650, v1627, *(uint16x4_t *)v1651->i8);
                                        v1654 = (uint16x4_t *)&v1651->i8[v137];
                                        uint16x8_t v1655 = *(uint16x8_t *)v1654->i8;
                                        uint32x4_t v1656 = vmlal_u16(v1653, v1629, *v1654);
                                        v1657 = (uint16x8_t *)((char *)v1654 + v137);
                                        uint32x4_t v1658 = vmlal_high_u16(vmlal_high_u16(v1652, v1628, v1655), v1630, *v1657);
                                        uint32x4_t v1659 = vmlal_u16(v1656, v1631, *(uint16x4_t *)v1657->i8);
                                        v1660 = (uint16x8_t *)((char *)v1657 + v137);
                                        uint32x4_t v1661 = vmlal_high_u16(v1658, v1632, *v1660);
                                        uint32x4_t v1662 = vmlal_u16(v1659, v1633, *(uint16x4_t *)v1660->i8);
                                        v1663 = (uint16x4_t *)&v1660->i8[v137];
                                        *v1622++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1662, v1635, *v1663), v1637, *(uint16x4_t *)((char *)v1663 + v137)), v1639, *(uint16x4_t *)((char *)v1663 + v137 + v137)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1661, v1634, *(uint16x8_t *)v1663->i8), v1636, *(uint16x8_t *)&v1663->i8[v137]), v1638, *(uint16x8_t *)&v1663->i8[v137 + v137]),
                                                     0xFuLL);
                                        ++v1641;
                                        v1640 -= 8;
                                      }
                                      while (v1640);
                                      if (v1226 == v3519)
                                      {
LABEL_1216:
                                        if (v3519 >= 8)
                                        {
                                          uint64_t v1681 = 0;
                                          unint64_t v2659 = v136 + 10 * v140;
                                          unint64_t v2660 = v136 + 10 * v140 + v141;
                                          BOOL v2662 = v2659 < (unint64_t)v134 + 22 * v135 + v141
                                               && (unint64_t)v134 + 22 * v135 < v2660;
                                          unint64_t v2663 = (unint64_t)v134 + v224;
                                          BOOL v2665 = v2659 < (unint64_t)v134 + 20 * v135 + v141
                                               && (unint64_t)v134 + 20 * v135 < v2660;
                                          unint64_t v2666 = (unint64_t)v134 + v224 + v141;
                                          uint64_t v2667 = v224 - v137;
                                          BOOL v2669 = v2659 < (unint64_t)v134 + 18 * v135 + v141
                                               && (unint64_t)v134 + 18 * v135 < v2660;
                                          BOOL v145 = v2659 >= v2666;
                                          unint64_t v2670 = (unint64_t)v134 + v2667;
                                          unint64_t v2671 = (unint64_t)v134 + v2667 + v141;
                                          uint64_t v2672 = 4 * (v137 + v135);
                                          char v2674 = !v145 && v2663 < v2660;
                                          BOOL v2676 = v2659 < v2671 && v2670 < v2660;
                                          unint64_t v2677 = (unint64_t)v134 + v1225;
                                          unint64_t v2678 = (unint64_t)v134 + v1225 + v141;
                                          BOOL v2680 = v2659 < (unint64_t)v134 + v2672 + v141
                                               && (unint64_t)v134 + v2672 < v2660;
                                          BOOL v2682 = v2659 < v2678 && v2677 < v2660;
                                          BOOL v2684 = v2659 < (unint64_t)v134 + v142 + v141
                                               && (unint64_t)v134 + v142 < v2660;
                                          BOOL v2686 = v2659 < (unint64_t)v134 + v139 + v141
                                               && (unint64_t)v134 + v139 < v2660;
                                          BOOL v2688 = v2659 < (unint64_t)v134 + v138 + v141
                                               && (unint64_t)v134 + v138 < v2660;
                                          BOOL v2690 = v2659 < (unint64_t)v134 + v137 + v141
                                               && (unint64_t)v134 + v137 < v2660;
                                          BOOL v2692 = v2659 < (unint64_t)v134 + v141
                                               && (unint64_t)v134 < v2660;
                                          if (((unint64_t)v12 >= v2660 || v2659 >= (unint64_t)&v12[3] + 2)
                                            && !v2662
                                            && !v2665
                                            && !v2669
                                            && (v2674 & 1) == 0
                                            && !v2676
                                            && !v2680
                                            && !v2682
                                            && !v2684
                                            && !v2686
                                            && !v2688
                                            && !v2690
                                            && !v2692)
                                          {
                                            v2694 = (const __int16 *)v12;
                                            uint16x4_t v2695 = (uint16x4_t)vld1_dup_s16(v2694++);
                                            uint16x4_t v2696 = (uint16x4_t)vld1_dup_s16(v2694);
                                            int16x8_t v2697 = (int16x8_t)vaddl_u16(v2695, v2696);
                                            v2698 = (const __int16 *)v12 + 2;
                                            uint16x4_t v2699 = (uint16x4_t)vld1_dup_s16(v2698);
                                            int16x8_t v2700 = (int16x8_t)vmovl_u16(v2699);
                                            v2701 = (const __int16 *)v12 + 3;
                                            uint16x4_t v2702 = (uint16x4_t)vld1_dup_s16(v2701);
                                            int16x8_t v2703 = (int16x8_t)vmovl_u16(v2702);
                                            v2704 = (const __int16 *)&v12[1];
                                            uint16x4_t v2705 = (uint16x4_t)vld1_dup_s16(v2704);
                                            int16x8_t v2706 = (int16x8_t)vmovl_u16(v2705);
                                            v2707 = (const __int16 *)&v12[1] + 1;
                                            uint16x4_t v2708 = (uint16x4_t)vld1_dup_s16(v2707);
                                            int16x8_t v2709 = (int16x8_t)vmovl_u16(v2708);
                                            v2710 = (const __int16 *)&v12[1] + 2;
                                            uint16x4_t v2711 = (uint16x4_t)vld1_dup_s16(v2710);
                                            int16x8_t v2712 = (int16x8_t)vmovl_u16(v2711);
                                            v2713 = (const __int16 *)&v12[1] + 3;
                                            uint16x4_t v2714 = (uint16x4_t)vld1_dup_s16(v2713);
                                            int16x8_t v2715 = (int16x8_t)vmovl_u16(v2714);
                                            v2716 = (const __int16 *)&v12[2];
                                            uint16x4_t v2717 = (uint16x4_t)vld1_dup_s16(v2716);
                                            int16x8_t v2718 = (int16x8_t)vmovl_u16(v2717);
                                            v2719 = (const __int16 *)&v12[2] + 1;
                                            uint16x4_t v2720 = (uint16x4_t)vld1_dup_s16(v2719);
                                            int16x8_t v2721 = (int16x8_t)vmovl_u16(v2720);
                                            v2722 = (const __int16 *)&v12[2] + 2;
                                            uint16x4_t v2723 = (uint16x4_t)vld1_dup_s16(v2722);
                                            int16x8_t v2724 = (int16x8_t)vmovl_u16(v2723);
                                            v2725 = (const __int16 *)&v12[2] + 3;
                                            uint16x4_t v2726 = (uint16x4_t)vld1_dup_s16(v2725);
                                            int16x8_t v2727 = (int16x8_t)vmovl_u16(v2726);
                                            v2728 = (const __int16 *)&v12[3];
                                            uint16x4_t v2729 = (uint16x4_t)vld1_dup_s16(v2728);
                                            int16x8_t v2730 = (int16x8_t)vmovl_u16(v2729);
                                            uint16x8_t v2731 = (uint16x8_t)vuzp1q_s16(v2697, v2700);
                                            uint16x4_t v2732 = (uint16x4_t)vmovn_s32((int32x4_t)v2700);
                                            uint64_t v1681 = v3519 & 0xFFFFFFF8;
                                            uint16x8_t v2733 = (uint16x8_t)vuzp1q_s16(v2697, v2703);
                                            uint16x4_t v2734 = (uint16x4_t)vmovn_s32((int32x4_t)v2703);
                                            v2735 = (int16x8_t *)(v136 + 10 * v140);
                                            uint16x8_t v2736 = (uint16x8_t)vuzp1q_s16(v2697, v2706);
                                            uint16x4_t v2737 = (uint16x4_t)vmovn_s32((int32x4_t)v2706);
                                            uint16x8_t v2738 = (uint16x8_t)vuzp1q_s16(v2697, v2709);
                                            uint16x4_t v2739 = (uint16x4_t)vmovn_s32((int32x4_t)v2709);
                                            uint16x8_t v2740 = (uint16x8_t)vuzp1q_s16(v2697, v2712);
                                            uint16x4_t v2741 = (uint16x4_t)vmovn_s32((int32x4_t)v2712);
                                            uint16x8_t v2742 = (uint16x8_t)vuzp1q_s16(v2697, v2715);
                                            uint16x4_t v2743 = (uint16x4_t)vmovn_s32((int32x4_t)v2715);
                                            uint16x8_t v2744 = (uint16x8_t)vuzp1q_s16(v2697, v2718);
                                            uint16x4_t v2745 = (uint16x4_t)vmovn_s32((int32x4_t)v2718);
                                            uint16x8_t v2746 = (uint16x8_t)vuzp1q_s16(v2697, v2721);
                                            uint16x4_t v2747 = (uint16x4_t)vmovn_s32((int32x4_t)v2721);
                                            uint16x8_t v2748 = (uint16x8_t)vuzp1q_s16(v2697, v2724);
                                            uint16x4_t v2749 = (uint16x4_t)vmovn_s32((int32x4_t)v2724);
                                            uint16x8_t v2750 = (uint16x8_t)vuzp1q_s16(v2697, v2727);
                                            uint16x4_t v2751 = (uint16x4_t)vmovn_s32((int32x4_t)v2727);
                                            uint16x8_t v2752 = (uint16x8_t)vuzp1q_s16(v2697, v2730);
                                            uint16x4_t v2753 = (uint16x4_t)vmovn_s32((int32x4_t)v2730);
                                            uint64_t v2754 = v1681;
                                            v2755 = (uint16x8_t *)v134;
                                            do
                                            {
                                              uint16x8_t v2756 = *(uint16x8_t *)((char *)v2755 + v137);
                                              v2757 = (uint16x8_t *)((char *)v2755 + v137 + v137);
                                              uint32x4_t v2758 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v2697, (int32x4_t)vmovl_high_u16(*v2755)), v2731, v2756), v2733, *v2757);
                                              uint32x4_t v2759 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v2697, (int32x4_t)vmovl_u16(*(uint16x4_t *)v2755->i8)), v2732, *(uint16x4_t *)v2756.i8), v2734, *(uint16x4_t *)v2757->i8);
                                              v2760 = (uint16x4_t *)&v2757->i8[v137];
                                              uint16x8_t v2761 = *(uint16x8_t *)v2760->i8;
                                              uint32x4_t v2762 = vmlal_u16(v2759, v2737, *v2760);
                                              v2763 = (uint16x8_t *)((char *)v2760 + v137);
                                              uint32x4_t v2764 = vmlal_high_u16(vmlal_high_u16(v2758, v2736, v2761), v2738, *v2763);
                                              uint32x4_t v2765 = vmlal_u16(v2762, v2739, *(uint16x4_t *)v2763->i8);
                                              v2766 = (uint16x8_t *)((char *)v2763 + v137);
                                              uint32x4_t v2767 = vmlal_high_u16(v2764, v2740, *v2766);
                                              uint32x4_t v2768 = vmlal_u16(v2765, v2741, *(uint16x4_t *)v2766->i8);
                                              v2769 = (uint16x4_t *)&v2766->i8[v137];
                                              uint16x8_t v2770 = *(uint16x8_t *)v2769->i8;
                                              uint32x4_t v2771 = vmlal_u16(v2768, v2743, *v2769);
                                              v2772 = (uint16x8_t *)((char *)v2769 + v137);
                                              uint32x4_t v2773 = vmlal_high_u16(vmlal_high_u16(v2767, v2742, v2770), v2744, *v2772);
                                              uint32x4_t v2774 = vmlal_u16(v2771, v2745, *(uint16x4_t *)v2772->i8);
                                              v2775 = (uint16x8_t *)((char *)v2772 + v137);
                                              uint32x4_t v2776 = vmlal_high_u16(v2773, v2746, *v2775);
                                              uint32x4_t v2777 = vmlal_u16(v2774, v2747, *(uint16x4_t *)v2775->i8);
                                              v2778 = (uint16x4_t *)&v2775->i8[v137];
                                              *v2735++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v2777, v2749, *v2778), v2751, *(uint16x4_t *)((char *)v2778 + v137)), v2753, *(uint16x4_t *)((char *)v2778 + v137 + v137)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v2776, v2748, *(uint16x8_t *)v2778->i8), v2750, *(uint16x8_t *)&v2778->i8[v137]), v2752, *(uint16x8_t *)&v2778->i8[v137 + v137]),
                                                           0xFuLL);
                                              ++v2755;
                                              v2754 -= 8;
                                            }
                                            while (v2754);
                                            if (v1681 == v3519) {
                                              goto LABEL_1911;
                                            }
                                          }
                                        }
                                        else
                                        {
                                          uint64_t v1681 = 0;
                                        }
                                        uint64_t v2779 = v3519 - v1681;
                                        v2780 = (_WORD *)(v136 + 2 * v1681 + 10 * v140);
                                        v2781 = (unsigned __int16 *)v134 + v1681;
                                        do
                                        {
                                          v2782 = &v2781[(unint64_t)v137 / 2 + (unint64_t)v137 / 2];
                                          v2783 = &v2782[(unint64_t)v137 / 2 + (unint64_t)v137 / 2];
                                          int v2784 = (v12->u16[0] + v12->u16[1]) * *v2781
                                                + v12->u16[2] * v2781[(unint64_t)v137 / 2]
                                                + v12->u16[3] * *v2782
                                                + v12[1].u16[0] * v2782[(unint64_t)v137 / 2];
                                          LODWORD(v2782) = *v2783;
                                          v2785 = &v2783[(unint64_t)v137 / 2];
                                          int v2786 = v2784 + v12[1].u16[1] * v2782 + v12[1].u16[2] * *v2785;
                                          v2787 = &v2785[(unint64_t)v137 / 2];
                                          LODWORD(v2782) = *v2787;
                                          v2788 = &v2787[(unint64_t)v137 / 2];
                                          int v2789 = v2786 + v12[1].u16[3] * v2782;
                                          LODWORD(v2782) = *v2788;
                                          v2790 = &v2788[(unint64_t)v137 / 2];
                                          *v2780++ = (v2789
                                                    + v12[2].u16[0] * v2782
                                                    + v12[2].u16[1] * *v2790
                                                    + v12[2].u16[2] * v2790[(unint64_t)v137 / 2]
                                                    + v12[2].u16[3]
                                                    * v2790[(unint64_t)v137 / 2 + (unint64_t)v137 / 2]
                                                    + v12[3].u16[0]
                                                    * v2790[(unint64_t)v137 / 2
                                                                        + (unint64_t)v137 / 2
                                                                        + (unint64_t)v137 / 2]) >> 15;
                                          ++v2781;
                                          --v2779;
                                        }
                                        while (v2779);
LABEL_1911:
                                        uint64_t v3480 = *((int *)a1 + 3);
                                        if ((int)v3480 < 13)
                                        {
LABEL_1912:
                                          uint64_t v2791 = 0;
                                          v2792 = (uint16x4_t *)*a1;
                                          uint64_t v2793 = a1[2];
                                          uint64_t v2794 = v2793 * (v3480 - 1);
                                          unint64_t v2795 = *a2;
                                          unint64_t v3472 = a2[2];
                                          uint64_t v2796 = (int)v3480 - 2;
                                          uint64_t v2797 = (int)v3480 - 6;
                                          uint64_t v3457 = v2796 + 6;
                                          uint64_t v2798 = v2797 - 1;
                                          uint64_t v3463 = v2796 + 5;
                                          uint64_t v3452 = *a1 + 2 * v2793 * v2796;
                                          uint64_t v2799 = 4 * v2793;
                                          uint64_t v3513 = v2796;
                                          uint64_t v3447 = *a1 + 2 * v2793 * (v2796 - 1);
                                          v2800 = (unsigned __int16 *)v12 + 3;
                                          unint64_t v2801 = 2;
                                          uint64_t v3466 = v2797 - 1;
                                          while (1)
                                          {
                                            uint64_t v3484 = v2798;
                                            if (v2798 >= v3463) {
                                              uint64_t v2802 = v3463;
                                            }
                                            else {
                                              uint64_t v2802 = v2798;
                                            }
                                            uint64_t v2803 = v3466 + v2791;
                                            if (v3466 + v2791 >= v3463) {
                                              uint64_t v2804 = v3463;
                                            }
                                            else {
                                              uint64_t v2804 = v3466 + v2791;
                                            }
                                            if (v2803 >= v3463) {
                                              uint64_t v2803 = v3463;
                                            }
                                            unint64_t v2805 = v2797 * v3472;
                                            if (v2797 > v3480 + 4)
                                            {
                                              uint64_t v2806 = 0;
                                              while (1)
                                              {
                                                if (v2801 >= 0x10)
                                                {
                                                  int32x4_t v2809 = 0uLL;
                                                  unint64_t v2810 = v2801 & 0xFFFFFFFFFFFFFFF0;
                                                  v2811 = (uint16x8_t *)&v12[2];
                                                  int32x4_t v2812 = 0uLL;
                                                  int32x4_t v2813 = 0uLL;
                                                  int32x4_t v2814 = 0uLL;
                                                  do
                                                  {
                                                    uint16x8_t v2815 = v2811[-1];
                                                    int32x4_t v2812 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2812, v2815);
                                                    int32x4_t v2809 = (int32x4_t)vaddw_u16((uint32x4_t)v2809, *(uint16x4_t *)v2815.i8);
                                                    int32x4_t v2814 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2814, *v2811);
                                                    int32x4_t v2813 = (int32x4_t)vaddw_u16((uint32x4_t)v2813, *(uint16x4_t *)v2811->i8);
                                                    v2811 += 2;
                                                    v2810 -= 16;
                                                  }
                                                  while (v2810);
                                                  int v2808 = vaddvq_s32(vaddq_s32(vaddq_s32(v2813, v2809), vaddq_s32(v2814, v2812)));
                                                  uint64_t v2807 = v2801 & 0x7FFFFFFFFFFFFFF0;
                                                  if (v2801 == (v2801 & 0x7FFFFFFFFFFFFFF0)) {
                                                    goto LABEL_1924;
                                                  }
                                                }
                                                else
                                                {
                                                  uint64_t v2807 = 0;
                                                  int v2808 = 0;
                                                }
                                                do
                                                  v2808 += v12->u16[v2807++];
                                                while (v2801 != v2807);
LABEL_1924:
                                                *(_WORD *)(v2795 + 2 * (v2806 + v2805)) = (v2808
                                                                                         * v2792->u16[v2806 + v2794]) >> 15;
                                                if (++v2806 == v3519) {
                                                  goto LABEL_1913;
                                                }
                                              }
                                            }
                                            unint64_t v2816 = (v3457 - v2802) & 0xFFFFFFFFFFFFFFFELL;
                                            if (v2797 < v3480 - 7)
                                            {
                                              uint64_t v2817 = 0;
                                              unint64_t v2818 = v3457 - v2803;
                                              uint64_t v2819 = v3447;
                                              uint64_t v2820 = v3452;
                                              while (1)
                                              {
                                                if (v2818 >= 2)
                                                {
                                                  uint64_t v2824 = 0;
                                                  int v2825 = 0;
                                                  int v2826 = 0;
                                                  unint64_t v2827 = v2816;
                                                  v2828 = (unsigned __int16 *)v12 + 1;
                                                  do
                                                  {
                                                    int v2829 = *(v2828 - 1);
                                                    int v2830 = *v2828;
                                                    v2828 += 2;
                                                    v2825 += v2829 * *(unsigned __int16 *)(v2820 + v2824);
                                                    v2826 += v2830 * *(unsigned __int16 *)(v2819 + v2824);
                                                    v2824 -= v2799;
                                                    v2827 -= 2;
                                                  }
                                                  while (v2827);
                                                  unsigned int v2822 = v2826 + v2825;
                                                  uint64_t v2823 = v3513 - (v2818 & 0xFFFFFFFFFFFFFFFELL);
                                                  unint64_t v2821 = v2818 & 0xFFFFFFFFFFFFFFFELL;
                                                  if (v2818 == (v2818 & 0xFFFFFFFFFFFFFFFELL)) {
                                                    goto LABEL_1934;
                                                  }
                                                }
                                                else
                                                {
                                                  unint64_t v2821 = 0;
                                                  unsigned int v2822 = 0;
                                                  uint64_t v2823 = (int)v3480 - 2;
                                                }
                                                uint64_t v2831 = v2823 + 6;
                                                v2832 = (unsigned __int16 *)v2792 + v2817 + v2793 * v2823;
                                                v2833 = (unsigned __int16 *)v12 + v2821;
                                                do
                                                {
                                                  int v2834 = *v2833++;
                                                  v2822 += v2834 * *v2832;
                                                  --v2831;
                                                  v2832 -= v2793;
                                                }
                                                while (v2831 >= v2797);
LABEL_1934:
                                                *(_WORD *)(v2795 + 2 * (v2817 + v2805)) = v2822 >> 15;
                                                ++v2817;
                                                v2820 += 2;
                                                v2819 += 2;
                                                if (v2817 == v3519) {
                                                  goto LABEL_1913;
                                                }
                                              }
                                            }
                                            uint64_t v2835 = 0;
                                            unint64_t v2836 = v3457 - v2804;
                                            unint64_t v2837 = (v3457 - v2804) & 0xFFFFFFFFFFFFFFFELL;
                                            uint64_t v2839 = v3447;
                                            uint64_t v2838 = v3452;
                                            do
                                            {
                                              if (v2801 < 0x10)
                                              {
                                                uint64_t v2840 = 0;
                                                int v2841 = 0;
                                                do
LABEL_1950:
                                                  v2841 += v12->u16[v2840++];
                                                while (v2801 != v2840);
                                                goto LABEL_1951;
                                              }
                                              int32x4_t v2842 = 0uLL;
                                              unint64_t v2843 = v2801 & 0xFFFFFFFFFFFFFFF0;
                                              v2844 = (uint16x8_t *)&v12[2];
                                              int32x4_t v2845 = 0uLL;
                                              int32x4_t v2846 = 0uLL;
                                              int32x4_t v2847 = 0uLL;
                                              do
                                              {
                                                uint16x8_t v2848 = v2844[-1];
                                                int32x4_t v2845 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2845, v2848);
                                                int32x4_t v2842 = (int32x4_t)vaddw_u16((uint32x4_t)v2842, *(uint16x4_t *)v2848.i8);
                                                int32x4_t v2847 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2847, *v2844);
                                                int32x4_t v2846 = (int32x4_t)vaddw_u16((uint32x4_t)v2846, *(uint16x4_t *)v2844->i8);
                                                v2844 += 2;
                                                v2843 -= 16;
                                              }
                                              while (v2843);
                                              int v2841 = vaddvq_s32(vaddq_s32(vaddq_s32(v2846, v2842), vaddq_s32(v2847, v2845)));
                                              uint64_t v2840 = v2801 & 0x7FFFFFFFFFFFFFF0;
                                              if (v2801 != (v2801 & 0x7FFFFFFFFFFFFFF0)) {
                                                goto LABEL_1950;
                                              }
LABEL_1951:
                                              unsigned int v2849 = v2841 * v2792->u16[v2835 + v2794];
                                              if (v2836 < 2)
                                              {
                                                uint64_t v2850 = (int)v3480 - 2;
                                                unint64_t v2851 = v2801;
LABEL_1956:
                                                uint64_t v2858 = v2850 + 6;
                                                v2859 = (unsigned __int16 *)v2792 + v2835 + v2793 * v2850;
                                                v2860 = (unsigned __int16 *)v12 + v2851;
                                                do
                                                {
                                                  int v2861 = *v2860++;
                                                  v2849 += v2861 * *v2859;
                                                  --v2858;
                                                  v2859 -= v2793;
                                                }
                                                while (v2858 >= v2797);
                                                goto LABEL_1944;
                                              }
                                              uint64_t v2852 = 0;
                                              int v2853 = 0;
                                              v2854 = v2800;
                                              unint64_t v2855 = v2816;
                                              do
                                              {
                                                int v2856 = *(v2854 - 1);
                                                int v2857 = *v2854;
                                                v2854 += 2;
                                                v2849 += v2856 * *(unsigned __int16 *)(v2838 + v2852);
                                                v2853 += v2857 * *(unsigned __int16 *)(v2839 + v2852);
                                                v2852 -= v2799;
                                                v2855 -= 2;
                                              }
                                              while (v2855);
                                              v2849 += v2853;
                                              unint64_t v2851 = v2801 + v2837;
                                              uint64_t v2850 = v3513 - v2837;
                                              if (v2836 != v2837) {
                                                goto LABEL_1956;
                                              }
LABEL_1944:
                                              *(_WORD *)(v2795 + 2 * (v2835 + v2805)) = v2849 >> 15;
                                              ++v2835;
                                              v2838 += 2;
                                              v2839 += 2;
                                            }
                                            while (v2835 != v3519);
LABEL_1913:
                                            ++v2797;
                                            ++v2801;
                                            ++v2791;
                                            uint64_t v2798 = v3484 + 1;
                                            ++v2800;
                                            if (v2797 >= v3480)
                                            {
                                              uint64_t v132 = a1;
                                              unsigned int v4 = v3521;
                                              float v545 = (int *)a1 + 3;
                                              if (*((int *)a1 + 3) < 1) {
                                                goto LABEL_2310;
                                              }
LABEL_1960:
                                              uint64_t v2862 = 0;
                                              uint64_t v2863 = 0;
                                              unint64_t v2864 = (unint64_t)(v4 + 6);
                                              v2865 = v12 + 2;
                                              while (1)
                                              {
                                                unint64_t v2866 = *a2;
                                                unint64_t v2867 = a2[2];
                                                v2868 = (unsigned __int16 *)(*a2 + 2 * v2867 * v2863);
                                                _WORD *v4 = ((v12->u16[1]
                                                      + v12->u16[0]
                                                      + v12->u16[2]
                                                      + v12->u16[3]
                                                      + v12[1].u16[0]
                                                      + v12[1].u16[1]
                                                      + v12[1].u16[2])
                                                     * *v2868
                                                     + v2868[1] * v12[1].u16[3]
                                                     + v2868[2] * v12[2].u16[0]
                                                     + v2868[3] * v12[2].u16[1]
                                                     + v2868[4] * v12[2].u16[2]
                                                     + v2868[5] * v12[2].u16[3]
                                                     + v2868[6] * v12[3].u16[0]) >> 15;
                                                v4[1] = ((v12->u16[1]
                                                        + v12->u16[0]
                                                        + v12->u16[2]
                                                        + v12->u16[3]
                                                        + v12[1].u16[0]
                                                        + v12[1].u16[1])
                                                       * *v2868
                                                       + v2868[1] * v12[1].u16[2]
                                                       + v2868[2] * v12[1].u16[3]
                                                       + v2868[3] * v12[2].u16[0]
                                                       + v2868[4] * v12[2].u16[1]
                                                       + v2868[5] * v12[2].u16[2]
                                                       + v2868[6] * v12[2].u16[3]
                                                       + v2868[7] * v12[3].u16[0]) >> 15;
                                                v4[2] = ((v12->u16[1]
                                                        + v12->u16[0]
                                                        + v12->u16[2]
                                                        + v12->u16[3]
                                                        + v12[1].u16[0])
                                                       * *v2868
                                                       + v2868[1] * v12[1].u16[1]
                                                       + v2868[2] * v12[1].u16[2]
                                                       + v2868[3] * v12[1].u16[3]
                                                       + v2868[4] * v12[2].u16[0]
                                                       + v2868[5] * v12[2].u16[1]
                                                       + v2868[6] * v12[2].u16[2]
                                                       + v2868[7] * v12[2].u16[3]
                                                       + v2868[8] * v12[3].u16[0]) >> 15;
                                                v4[3] = ((v12->u16[1] + v12->u16[0] + v12->u16[2] + v12->u16[3])
                                                       * *v2868
                                                       + v2868[1] * v12[1].u16[0]
                                                       + v2868[2] * v12[1].u16[1]
                                                       + v2868[3] * v12[1].u16[2]
                                                       + v2868[4] * v12[1].u16[3]
                                                       + v2868[5] * v12[2].u16[0]
                                                       + v2868[6] * v12[2].u16[1]
                                                       + v2868[7] * v12[2].u16[2]
                                                       + v2868[8] * v12[2].u16[3]
                                                       + v2868[9] * v12[3].u16[0]) >> 15;
                                                v4[4] = ((v12->u16[1] + v12->u16[0] + v12->u16[2]) * *v2868
                                                       + v2868[1] * v12->u16[3]
                                                       + v2868[2] * v12[1].u16[0]
                                                       + v2868[3] * v12[1].u16[1]
                                                       + v2868[4] * v12[1].u16[2]
                                                       + v2868[5] * v12[1].u16[3]
                                                       + v2868[6] * v12[2].u16[0]
                                                       + v2868[7] * v12[2].u16[1]
                                                       + v2868[8] * v12[2].u16[2]
                                                       + v2868[9] * v12[2].u16[3]
                                                       + v2868[10] * v12[3].u16[0]) >> 15;
                                                v4[5] = ((v12->u16[1] + v12->u16[0]) * *v2868
                                                       + v2868[1] * v12->u16[2]
                                                       + v2868[2] * v12->u16[3]
                                                       + v2868[3] * v12[1].u16[0]
                                                       + v2868[4] * v12[1].u16[1]
                                                       + v2868[5] * v12[1].u16[2]
                                                       + v2868[6] * v12[1].u16[3]
                                                       + v2868[7] * v12[2].u16[0]
                                                       + v2868[8] * v12[2].u16[1]
                                                       + v2868[9] * v12[2].u16[2]
                                                       + v2868[10] * v12[2].u16[3]
                                                       + v2868[11] * v12[3].u16[0]) >> 15;
                                                uint64_t v2869 = *((int *)v132 + 2);
                                                if ((int)v2869 > 12)
                                                {
                                                  uint64_t v2870 = (v2869 - 12);
                                                  if (v2870 < 8)
                                                  {
                                                    uint64_t v2871 = 0;
                                                    uint64_t v2872 = 6;
LABEL_1981:
                                                    v2930 = &v4[v2872];
                                                    v2931 = (unsigned __int16 *)(v2866 + 2 * (v2871 + v2867 * v2863) + 24);
                                                    uint64_t v2932 = v2870 - v2871;
                                                    do
                                                    {
                                                      uint16x8_t v2933 = *(uint16x8_t *)(v2931 - 12);
                                                      uint16x4_t v2934 = *(uint16x4_t *)(v2931 - 4);
                                                      int v2935 = *v2931++;
                                                      *v2930++ = (vaddvq_s32((int32x4_t)vmlal_u16(vmlal_high_u16(vmull_u16(*(uint16x4_t *)v2933.i8, *v12), v2933, *(uint16x8_t *)v12->i8), v2934, v12[2]))+ v2935 * v12[3].u16[0]) >> 15;
                                                      --v2932;
                                                    }
                                                    while (v2932);
                                                    goto LABEL_1983;
                                                  }
                                                  uint64_t v2871 = 0;
                                                  unint64_t v2873 = v2864 + 2 * v2870;
                                                  uint64_t v2874 = v2867 * 2 * v2863;
                                                  BOOL v2876 = v2864 < v2866 + 2 * v2870 + v2874 + 24
                                                       && v2866 + v2874 < v2873;
                                                  uint64_t v2872 = 6;
                                                  if ((unint64_t)v12 < v2873
                                                    && v2864 < (unint64_t)&v12[3] + 2)
                                                  {
                                                    goto LABEL_1981;
                                                  }
                                                  if (v2876) {
                                                    goto LABEL_1981;
                                                  }
                                                  v2878 = (const __int16 *)v12;
                                                  uint16x4_t v2879 = (uint16x4_t)vld1_dup_s16(v2878++);
                                                  uint64_t v2871 = v2870 & 0xFFFFFFF8;
                                                  uint64_t v2872 = v2871 | 6;
                                                  int16x8_t v2880 = (int16x8_t)vmovl_u16(v2879);
                                                  uint16x4_t v2881 = (uint16x4_t)vld1_dup_s16(v2878);
                                                  int16x8_t v2882 = (int16x8_t)vmovl_u16(v2881);
                                                  v2883 = (const __int16 *)v12 + 2;
                                                  uint16x4_t v2884 = (uint16x4_t)vld1_dup_s16(v2883);
                                                  v2885 = (const __int16 *)v12 + 3;
                                                  uint16x4_t v2886 = (uint16x4_t)vld1_dup_s16(v2885);
                                                  int16x8_t v2887 = (int16x8_t)vmovl_u16(v2884);
                                                  int16x8_t v2888 = (int16x8_t)vmovl_u16(v2886);
                                                  v2889 = (const __int16 *)&v12[1];
                                                  uint16x4_t v2890 = (uint16x4_t)vld1_dup_s16(v2889);
                                                  int16x8_t v2891 = (int16x8_t)vmovl_u16(v2890);
                                                  v2892 = (const __int16 *)&v12[1] + 1;
                                                  uint16x4_t v2893 = (uint16x4_t)vld1_dup_s16(v2892);
                                                  v2894 = (const __int16 *)&v12[1] + 2;
                                                  uint16x4_t v2895 = (uint16x4_t)vld1_dup_s16(v2894);
                                                  int16x8_t v2896 = (int16x8_t)vmovl_u16(v2893);
                                                  int16x8_t v2897 = (int16x8_t)vmovl_u16(v2895);
                                                  v2898 = (const __int16 *)&v12[1] + 3;
                                                  uint16x4_t v2899 = (uint16x4_t)vld1_dup_s16(v2898);
                                                  int16x8_t v2900 = (int16x8_t)vmovl_u16(v2899);
                                                  v2901 = (const __int16 *)&v12[2];
                                                  uint16x4_t v2902 = (uint16x4_t)vld1_dup_s16(v2901);
                                                  v2903 = (const __int16 *)&v12[2] + 1;
                                                  uint16x4_t v2904 = (uint16x4_t)vld1_dup_s16(v2903);
                                                  int16x8_t v2905 = (int16x8_t)vmovl_u16(v2902);
                                                  int16x8_t v2906 = (int16x8_t)vmovl_u16(v2904);
                                                  v2907 = (const __int16 *)&v12[2] + 2;
                                                  uint16x4_t v2908 = (uint16x4_t)vld1_dup_s16(v2907);
                                                  int16x8_t v2909 = (int16x8_t)vmovl_u16(v2908);
                                                  v2910 = (const __int16 *)&v12[2] + 3;
                                                  uint16x4_t v2911 = (uint16x4_t)vld1_dup_s16(v2910);
                                                  v2912 = (const __int16 *)&v12[3];
                                                  uint16x4_t v2913 = (uint16x4_t)vld1_dup_s16(v2912);
                                                  int16x8_t v2914 = (int16x8_t)vmovl_u16(v2911);
                                                  int16x8_t v2915 = (int16x8_t)vmovl_u16(v2913);
                                                  uint64_t v2916 = v2866 + v2867 * v2862 + 12;
                                                  v2917 = (int16x8_t *)(v4 + 6);
                                                  uint64_t v2918 = v2871;
                                                  do
                                                  {
                                                    uint16x8_t v2919 = *(uint16x8_t *)(v2916 - 12);
                                                    uint16x8_t v2920 = *(uint16x8_t *)(v2916 - 10);
                                                    uint32x4_t v2921 = vmull_u16(*(uint16x4_t *)v2920.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2882));
                                                    uint16x8_t v2922 = *(uint16x8_t *)(v2916 - 8);
                                                    uint16x8_t v2923 = *(uint16x8_t *)(v2916 - 6);
                                                    uint32x4_t v2924 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v2920, (uint16x8_t)vuzp1q_s16(v2880, v2882)), v2919, (uint16x8_t)vuzp1q_s16(v2880, v2880)), v2922, (uint16x8_t)vuzp1q_s16(v2880, v2887));
                                                    uint32x4_t v2925 = vmlal_u16(vmlal_u16(vmlal_u16(v2921, *(uint16x4_t *)v2919.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2880)), *(uint16x4_t *)v2922.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2887)), *(uint16x4_t *)v2923.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2888));
                                                    uint16x8_t v2926 = *(uint16x8_t *)(v2916 - 4);
                                                    uint32x4_t v2927 = vmlal_high_u16(vmlal_high_u16(v2924, v2923, (uint16x8_t)vuzp1q_s16(v2880, v2888)), v2926, (uint16x8_t)vuzp1q_s16(v2880, v2891));
                                                    uint32x4_t v2928 = vmlal_u16(v2925, *(uint16x4_t *)v2926.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2891));
                                                    uint16x8_t v2929 = *(uint16x8_t *)(v2916 - 2);
                                                    *v2917++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(v2928, *(uint16x4_t *)v2929.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2896)), *(uint16x4_t *)v2916, (uint16x4_t)vmovn_s32((int32x4_t)v2897)), *(uint16x4_t *)(v2916 + 2), (uint16x4_t)vmovn_s32((int32x4_t)v2900)), *(uint16x4_t *)(v2916 + 4), (uint16x4_t)vmovn_s32((int32x4_t)v2905)), *(uint16x4_t *)(v2916 + 6),
                                                                                      (uint16x4_t)vmovn_s32((int32x4_t)v2906)),
                                                                                    *(uint16x4_t *)(v2916 + 8),
                                                                                    (uint16x4_t)vmovn_s32((int32x4_t)v2909)),
                                                                                  *(uint16x4_t *)(v2916 + 10),
                                                                                  (uint16x4_t)vmovn_s32((int32x4_t)v2914)),
                                                                                *(uint16x4_t *)(v2916 + 12),
                                                                                (uint16x4_t)vmovn_s32((int32x4_t)v2915)),
                                                                   0xFuLL),
                                                                 (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v2927, v2929, (uint16x8_t)vuzp1q_s16(v2880, v2896)), *(uint16x8_t *)v2916, (uint16x8_t)vuzp1q_s16(v2880, v2897)), *(uint16x8_t *)(v2916 + 2), (uint16x8_t)vuzp1q_s16(v2880, v2900)), *(uint16x8_t *)(v2916 + 4), (uint16x8_t)vuzp1q_s16(v2880, v2905)), *(uint16x8_t *)(v2916 + 6),
                                                                                    (uint16x8_t)vuzp1q_s16(v2880, v2906)),
                                                                                  *(uint16x8_t *)(v2916 + 8),
                                                                                  (uint16x8_t)vuzp1q_s16(v2880, v2909)),
                                                                                *(uint16x8_t *)(v2916 + 10),
                                                                                (uint16x8_t)vuzp1q_s16(v2880, v2914)),
                                                                              *(uint16x8_t *)(v2916 + 12),
                                                                              (uint16x8_t)vuzp1q_s16(v2880, v2915)),
                                                                 0xFuLL);
                                                    v2916 += 16;
                                                    v2918 -= 8;
                                                  }
                                                  while (v2918);
                                                  if (v2871 != v2870) {
                                                    goto LABEL_1981;
                                                  }
                                                }
LABEL_1983:
                                                int v2936 = v2869 - 6;
                                                uint64_t v2937 = v2869 - 1;
                                                uint64_t v2938 = (int)v2869 - 6;
                                                if (v2938 + 6 >= v2869 - 1)
                                                {
                                                  int v2940 = v12->u16[1] + v12->u16[0];
                                                  uint64_t v2939 = 2;
                                                }
                                                else
                                                {
                                                  uint64_t v2939 = 0;
                                                  int v2940 = 0;
                                                }
                                                uint64_t v2941 = v2867 * v2863 + v2937;
                                                uint64_t v2942 = (int)v2869 - 2;
                                                unsigned int v2943 = v2940 * *(unsigned __int16 *)(v2866 + 2 * v2941);
                                                if ((int)v2869 + 4 >= v2936)
                                                {
                                                  uint64_t v2944 = v2936 - 6;
                                                  if (v2938 - 6 >= v2942) {
                                                    uint64_t v2944 = (int)v2869 - 2;
                                                  }
                                                  unint64_t v2945 = v2942 - v2944 + 1;
                                                  if (v2945 < 0x10)
                                                  {
                                                    uint64_t v2946 = (int)v2869 - 2;
                                                    unint64_t v2947 = v2939;
LABEL_1994:
                                                    v2960 = (unsigned __int16 *)v12 + v2947;
                                                    do
                                                    {
                                                      int v2961 = *v2960++;
                                                      v2943 += v2961
                                                             * *(unsigned __int16 *)(v2866 + v2867 * v2862 + 2 * v2946);
                                                      BOOL v7 = v2946-- < v2938 - 5;
                                                    }
                                                    while (!v7);
                                                    goto LABEL_1997;
                                                  }
                                                  uint64_t v2946 = v2942 - (v2945 & 0xFFFFFFFFFFFFFFF0);
                                                  unint64_t v2947 = v2939 | v2945 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v2948 = 0uLL;
                                                  int32x4_t v2949 = (int32x4_t)v2943;
                                                  v2950 = (int16x8_t *)(v2866 + 2 * (v2942 + v2867 * v2863) - 14);
                                                  v2951 = (uint16x8_t *)((char *)v2865 + 2 * v2939);
                                                  unint64_t v2952 = v2945 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v2953 = 0uLL;
                                                  int32x4_t v2954 = 0uLL;
                                                  do
                                                  {
                                                    int8x16_t v2955 = (int8x16_t)vrev64q_s16(*v2950);
                                                    uint16x8_t v2956 = (uint16x8_t)vextq_s8(v2955, v2955, 8uLL);
                                                    int8x16_t v2957 = (int8x16_t)vrev64q_s16(v2950[-1]);
                                                    uint16x8_t v2958 = (uint16x8_t)vextq_s8(v2957, v2957, 8uLL);
                                                    uint16x8_t v2959 = v2951[-1];
                                                    int32x4_t v2948 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2948, v2959, v2956);
                                                    int32x4_t v2949 = (int32x4_t)vmlal_u16((uint32x4_t)v2949, *(uint16x4_t *)v2959.i8, *(uint16x4_t *)v2956.i8);
                                                    int32x4_t v2954 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2954, *v2951, v2958);
                                                    int32x4_t v2953 = (int32x4_t)vmlal_u16((uint32x4_t)v2953, *(uint16x4_t *)v2951->i8, *(uint16x4_t *)v2958.i8);
                                                    v2950 -= 2;
                                                    v2951 += 2;
                                                    v2952 -= 16;
                                                  }
                                                  while (v2952);
                                                  unsigned int v2943 = vaddvq_s32(vaddq_s32(vaddq_s32(v2953, v2949), vaddq_s32(v2954, v2948)));
                                                  if (v2945 != (v2945 & 0xFFFFFFFFFFFFFFF0)) {
                                                    goto LABEL_1994;
                                                  }
                                                }
LABEL_1997:
                                                v4[v2938] = v2943 >> 15;
                                                if (v2938 + 1 < v2869)
                                                {
                                                  if (v2938 + 7 >= v2937)
                                                  {
                                                    int v2963 = v12->u16[1] + v12->u16[0] + v12->u16[2];
                                                    uint64_t v2962 = 3;
                                                  }
                                                  else
                                                  {
                                                    uint64_t v2962 = 0;
                                                    int v2963 = 0;
                                                  }
                                                  unsigned int v2964 = v2963 * *(unsigned __int16 *)(v2866 + 2 * v2941);
                                                  uint64_t v2965 = v2938 - 5;
                                                  if (v2938 - 5 >= v2942) {
                                                    uint64_t v2965 = (int)v2869 - 2;
                                                  }
                                                  unint64_t v2966 = v2942 - v2965 + 1;
                                                  uint64_t v2967 = (int)v2869 - 2;
                                                  unint64_t v2968 = v2962;
                                                  if (v2966 < 0x10) {
                                                    goto LABEL_2007;
                                                  }
                                                  uint64_t v2967 = v2942 - (v2966 & 0xFFFFFFFFFFFFFFF0);
                                                  unint64_t v2968 = v2962 | v2966 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v2969 = 0uLL;
                                                  int32x4_t v2970 = (int32x4_t)v2964;
                                                  v2971 = (int16x8_t *)(v2866 + 2 * (v2942 + v2867 * v2863) - 14);
                                                  v2972 = (uint16x8_t *)((char *)v2865 + 2 * v2962);
                                                  unint64_t v2973 = v2966 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v2974 = 0uLL;
                                                  int32x4_t v2975 = 0uLL;
                                                  do
                                                  {
                                                    int8x16_t v2976 = (int8x16_t)vrev64q_s16(*v2971);
                                                    uint16x8_t v2977 = (uint16x8_t)vextq_s8(v2976, v2976, 8uLL);
                                                    int8x16_t v2978 = (int8x16_t)vrev64q_s16(v2971[-1]);
                                                    uint16x8_t v2979 = (uint16x8_t)vextq_s8(v2978, v2978, 8uLL);
                                                    uint16x8_t v2980 = v2972[-1];
                                                    int32x4_t v2969 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2969, v2980, v2977);
                                                    int32x4_t v2970 = (int32x4_t)vmlal_u16((uint32x4_t)v2970, *(uint16x4_t *)v2980.i8, *(uint16x4_t *)v2977.i8);
                                                    int32x4_t v2975 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2975, *v2972, v2979);
                                                    int32x4_t v2974 = (int32x4_t)vmlal_u16((uint32x4_t)v2974, *(uint16x4_t *)v2972->i8, *(uint16x4_t *)v2979.i8);
                                                    v2971 -= 2;
                                                    v2972 += 2;
                                                    v2973 -= 16;
                                                  }
                                                  while (v2973);
                                                  unsigned int v2964 = vaddvq_s32(vaddq_s32(vaddq_s32(v2974, v2970), vaddq_s32(v2975, v2969)));
                                                  if (v2966 != (v2966 & 0xFFFFFFFFFFFFFFF0))
                                                  {
LABEL_2007:
                                                    v2981 = (unsigned __int16 *)(v2866 + 2 * (v2967 + v2867 * v2863));
                                                    v2982 = (unsigned __int16 *)v12 + v2968;
                                                    uint64_t v2983 = v2962 + v2942 - v2968 - v2965 + 1;
                                                    do
                                                    {
                                                      int v2985 = *v2981--;
                                                      int v2984 = v2985;
                                                      int v2986 = *v2982++;
                                                      v2964 += v2986 * v2984;
                                                      --v2983;
                                                    }
                                                    while (v2983);
                                                  }
                                                  v4[v2938 + 1] = v2964 >> 15;
                                                  if (v2938 + 8 >= v2937)
                                                  {
                                                    int v2988 = vaddvq_s32((int32x4_t)vmovl_u16(*v12));
                                                    uint64_t v2987 = 1;
                                                  }
                                                  else
                                                  {
                                                    uint64_t v2987 = 0;
                                                    int v2988 = 0;
                                                  }
                                                  unsigned int v2989 = v2988 * *(unsigned __int16 *)(v2866 + 2 * v2941);
                                                  uint64_t v2990 = v2938 - 3;
                                                  uint64_t v2991 = v2938 - 4;
                                                  if (v2938 - 4 >= v2942) {
                                                    uint64_t v2991 = (int)v2869 - 2;
                                                  }
                                                  unint64_t v2992 = v2942 - v2991 + 1;
                                                  if (v2992 < 0x10)
                                                  {
                                                    uint64_t v2993 = (int)v2869 - 2;
                                                    unint64_t v2994 = v2987 * 4;
                                                    goto LABEL_2019;
                                                  }
                                                  uint64_t v2993 = v2942 - (v2992 & 0xFFFFFFFFFFFFFFF0);
                                                  unint64_t v2994 = (v2987 * 4) | v2992 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v2995 = 0uLL;
                                                  int32x4_t v2996 = (int32x4_t)v2989;
                                                  v2997 = (int16x8_t *)(v2866 + 2 * (v2942 + v2867 * v2863) - 14);
                                                  v2998 = (uint16x8_t *)&v2865[v2987];
                                                  unint64_t v2999 = v2992 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v3000 = 0uLL;
                                                  int32x4_t v3001 = 0uLL;
                                                  do
                                                  {
                                                    int8x16_t v3002 = (int8x16_t)vrev64q_s16(*v2997);
                                                    uint16x8_t v3003 = (uint16x8_t)vextq_s8(v3002, v3002, 8uLL);
                                                    int8x16_t v3004 = (int8x16_t)vrev64q_s16(v2997[-1]);
                                                    uint16x8_t v3005 = (uint16x8_t)vextq_s8(v3004, v3004, 8uLL);
                                                    uint16x8_t v3006 = v2998[-1];
                                                    int32x4_t v2995 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2995, v3006, v3003);
                                                    int32x4_t v2996 = (int32x4_t)vmlal_u16((uint32x4_t)v2996, *(uint16x4_t *)v3006.i8, *(uint16x4_t *)v3003.i8);
                                                    int32x4_t v3001 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3001, *v2998, v3005);
                                                    int32x4_t v3000 = (int32x4_t)vmlal_u16((uint32x4_t)v3000, *(uint16x4_t *)v2998->i8, *(uint16x4_t *)v3005.i8);
                                                    v2997 -= 2;
                                                    v2998 += 2;
                                                    v2999 -= 16;
                                                  }
                                                  while (v2999);
                                                  unsigned int v2989 = vaddvq_s32(vaddq_s32(vaddq_s32(v3000, v2996), vaddq_s32(v3001, v2995)));
                                                  if (v2992 != (v2992 & 0xFFFFFFFFFFFFFFF0))
                                                  {
LABEL_2019:
                                                    v3007 = (unsigned __int16 *)v12 + v2994;
                                                    do
                                                    {
                                                      int v3008 = *v3007++;
                                                      v2989 += v3008
                                                             * *(unsigned __int16 *)(v2866 + v2867 * v2862 + 2 * v2993);
                                                      BOOL v7 = v2993-- < v2990;
                                                    }
                                                    while (!v7);
                                                  }
                                                  v4[v2938 + 2] = v2989 >> 15;
                                                  if (v2938 + 9 >= v2937)
                                                  {
                                                    int v3010 = vaddvq_s32((int32x4_t)vmovl_u16(*v12)) + v12[1].u16[0];
                                                    uint64_t v3009 = 5;
                                                  }
                                                  else
                                                  {
                                                    uint64_t v3009 = 0;
                                                    int v3010 = 0;
                                                  }
                                                  unsigned int v3011 = v3010 * *(unsigned __int16 *)(v2866 + 2 * v2941);
                                                  if (v2990 >= v2942) {
                                                    uint64_t v2990 = (int)v2869 - 2;
                                                  }
                                                  unint64_t v3012 = v2942 - v2990 + 1;
                                                  uint64_t v3013 = (int)v2869 - 2;
                                                  unint64_t v3014 = v3009;
                                                  if (v3012 < 0x10) {
                                                    goto LABEL_2031;
                                                  }
                                                  uint64_t v3013 = v2942 - (v3012 & 0xFFFFFFFFFFFFFFF0);
                                                  unint64_t v3014 = v3009 | v3012 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v3015 = 0uLL;
                                                  int32x4_t v3016 = (int32x4_t)v3011;
                                                  v3017 = (int16x8_t *)(v2866 + 2 * (v2942 + v2867 * v2863) - 14);
                                                  v3018 = (uint16x8_t *)((char *)v2865 + 2 * v3009);
                                                  unint64_t v3019 = v3012 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v3020 = 0uLL;
                                                  int32x4_t v3021 = 0uLL;
                                                  do
                                                  {
                                                    int8x16_t v3022 = (int8x16_t)vrev64q_s16(*v3017);
                                                    uint16x8_t v3023 = (uint16x8_t)vextq_s8(v3022, v3022, 8uLL);
                                                    int8x16_t v3024 = (int8x16_t)vrev64q_s16(v3017[-1]);
                                                    uint16x8_t v3025 = (uint16x8_t)vextq_s8(v3024, v3024, 8uLL);
                                                    uint16x8_t v3026 = v3018[-1];
                                                    int32x4_t v3015 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3015, v3026, v3023);
                                                    int32x4_t v3016 = (int32x4_t)vmlal_u16((uint32x4_t)v3016, *(uint16x4_t *)v3026.i8, *(uint16x4_t *)v3023.i8);
                                                    int32x4_t v3021 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3021, *v3018, v3025);
                                                    int32x4_t v3020 = (int32x4_t)vmlal_u16((uint32x4_t)v3020, *(uint16x4_t *)v3018->i8, *(uint16x4_t *)v3025.i8);
                                                    v3017 -= 2;
                                                    v3018 += 2;
                                                    v3019 -= 16;
                                                  }
                                                  while (v3019);
                                                  unsigned int v3011 = vaddvq_s32(vaddq_s32(vaddq_s32(v3020, v3016), vaddq_s32(v3021, v3015)));
                                                  if (v3012 != (v3012 & 0xFFFFFFFFFFFFFFF0))
                                                  {
LABEL_2031:
                                                    v3027 = (unsigned __int16 *)(v2866 + 2 * (v3013 + v2867 * v2863));
                                                    v3028 = (unsigned __int16 *)v12 + v3014;
                                                    uint64_t v3029 = v3009 + v2942 - v3014 - v2990 + 1;
                                                    do
                                                    {
                                                      int v3031 = *v3027--;
                                                      int v3030 = v3031;
                                                      int v3032 = *v3028++;
                                                      v3011 += v3032 * v3030;
                                                      --v3029;
                                                    }
                                                    while (v3029);
                                                  }
                                                  v4[v2938 + 3] = v3011 >> 15;
                                                  if (v2938 + 10 >= v2937)
                                                  {
                                                    int v3034 = vaddvq_s32((int32x4_t)vmovl_u16(*v12))
                                                          + v12[1].u16[0]
                                                          + v12[1].u16[1];
                                                    uint64_t v3033 = 6;
                                                  }
                                                  else
                                                  {
                                                    uint64_t v3033 = 0;
                                                    int v3034 = 0;
                                                  }
                                                  unsigned int v3035 = v3034 * *(unsigned __int16 *)(v2866 + 2 * v2941);
                                                  uint64_t v3036 = v2938 - 1;
                                                  uint64_t v3037 = v2938 - 2;
                                                  if (v2938 - 2 >= v2942) {
                                                    uint64_t v3037 = (int)v2869 - 2;
                                                  }
                                                  unint64_t v3038 = v2942 - v3037 + 1;
                                                  if (v3038 < 0x10)
                                                  {
                                                    uint64_t v3039 = (int)v2869 - 2;
                                                    unint64_t v3040 = v3033;
                                                    goto LABEL_2043;
                                                  }
                                                  uint64_t v3039 = v2942 - (v3038 & 0xFFFFFFFFFFFFFFF0);
                                                  unint64_t v3040 = v3033 | v3038 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v3041 = 0uLL;
                                                  int32x4_t v3042 = (int32x4_t)v3035;
                                                  v3043 = (int16x8_t *)(v2866 + 2 * (v2942 + v2867 * v2863) - 14);
                                                  v3044 = (uint16x8_t *)((char *)v2865 + 2 * v3033);
                                                  unint64_t v3045 = v3038 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v3046 = 0uLL;
                                                  int32x4_t v3047 = 0uLL;
                                                  do
                                                  {
                                                    int8x16_t v3048 = (int8x16_t)vrev64q_s16(*v3043);
                                                    uint16x8_t v3049 = (uint16x8_t)vextq_s8(v3048, v3048, 8uLL);
                                                    int8x16_t v3050 = (int8x16_t)vrev64q_s16(v3043[-1]);
                                                    uint16x8_t v3051 = (uint16x8_t)vextq_s8(v3050, v3050, 8uLL);
                                                    uint16x8_t v3052 = v3044[-1];
                                                    int32x4_t v3041 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3041, v3052, v3049);
                                                    int32x4_t v3042 = (int32x4_t)vmlal_u16((uint32x4_t)v3042, *(uint16x4_t *)v3052.i8, *(uint16x4_t *)v3049.i8);
                                                    int32x4_t v3047 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3047, *v3044, v3051);
                                                    int32x4_t v3046 = (int32x4_t)vmlal_u16((uint32x4_t)v3046, *(uint16x4_t *)v3044->i8, *(uint16x4_t *)v3051.i8);
                                                    v3043 -= 2;
                                                    v3044 += 2;
                                                    v3045 -= 16;
                                                  }
                                                  while (v3045);
                                                  unsigned int v3035 = vaddvq_s32(vaddq_s32(vaddq_s32(v3046, v3042), vaddq_s32(v3047, v3041)));
                                                  if (v3038 != (v3038 & 0xFFFFFFFFFFFFFFF0))
                                                  {
LABEL_2043:
                                                    v3053 = (unsigned __int16 *)v12 + v3040;
                                                    do
                                                    {
                                                      int v3054 = *v3053++;
                                                      v3035 += v3054
                                                             * *(unsigned __int16 *)(v2866 + v2867 * v2862 + 2 * v3039);
                                                      BOOL v7 = v3039-- < v3036;
                                                    }
                                                    while (!v7);
                                                  }
                                                  v4[v2938 + 4] = v3035 >> 15;
                                                  if (v2938 + 11 >= v2937)
                                                  {
                                                    int v3056 = vaddvq_s32((int32x4_t)vmovl_u16(*v12))
                                                          + v12[1].u16[0]
                                                          + v12[1].u16[1]
                                                          + v12[1].u16[2];
                                                    uint64_t v3055 = 7;
                                                  }
                                                  else
                                                  {
                                                    uint64_t v3055 = 0;
                                                    int v3056 = 0;
                                                  }
                                                  unsigned int v3057 = v3056 * *(unsigned __int16 *)(v2866 + 2 * v2941);
                                                  if (v3036 >= v2942) {
                                                    uint64_t v3058 = (int)v2869 - 2;
                                                  }
                                                  else {
                                                    uint64_t v3058 = v2938 - 1;
                                                  }
                                                  unint64_t v3059 = v2942 - v3058 + 1;
                                                  uint64_t v3060 = (int)v2869 - 2;
                                                  unint64_t v3061 = v3055;
                                                  if (v3059 < 0x10) {
                                                    goto LABEL_2056;
                                                  }
                                                  uint64_t v3060 = v2942 - (v3059 & 0xFFFFFFFFFFFFFFF0);
                                                  unint64_t v3061 = v3055 | v3059 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v3062 = 0uLL;
                                                  int32x4_t v3063 = (int32x4_t)v3057;
                                                  v3064 = (int16x8_t *)(v2866 + 2 * (v2942 + v2867 * v2863) - 14);
                                                  v3065 = (uint16x8_t *)((char *)v2865 + 2 * v3055);
                                                  unint64_t v3066 = v3059 & 0xFFFFFFFFFFFFFFF0;
                                                  int32x4_t v3067 = 0uLL;
                                                  int32x4_t v3068 = 0uLL;
                                                  do
                                                  {
                                                    int8x16_t v3069 = (int8x16_t)vrev64q_s16(*v3064);
                                                    uint16x8_t v3070 = (uint16x8_t)vextq_s8(v3069, v3069, 8uLL);
                                                    int8x16_t v3071 = (int8x16_t)vrev64q_s16(v3064[-1]);
                                                    uint16x8_t v3072 = (uint16x8_t)vextq_s8(v3071, v3071, 8uLL);
                                                    uint16x8_t v3073 = v3065[-1];
                                                    int32x4_t v3062 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3062, v3073, v3070);
                                                    int32x4_t v3063 = (int32x4_t)vmlal_u16((uint32x4_t)v3063, *(uint16x4_t *)v3073.i8, *(uint16x4_t *)v3070.i8);
                                                    int32x4_t v3068 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3068, *v3065, v3072);
                                                    int32x4_t v3067 = (int32x4_t)vmlal_u16((uint32x4_t)v3067, *(uint16x4_t *)v3065->i8, *(uint16x4_t *)v3072.i8);
                                                    v3064 -= 2;
                                                    v3065 += 2;
                                                    v3066 -= 16;
                                                  }
                                                  while (v3066);
                                                  unsigned int v3057 = vaddvq_s32(vaddq_s32(vaddq_s32(v3067, v3063), vaddq_s32(v3068, v3062)));
                                                  if (v3059 != (v3059 & 0xFFFFFFFFFFFFFFF0))
                                                  {
LABEL_2056:
                                                    v3074 = (unsigned __int16 *)(v2866 + 2 * (v3060 + v2867 * v2863));
                                                    v3075 = (unsigned __int16 *)v12 + v3061;
                                                    uint64_t v3076 = v3055 + v2942 - v3061 - v3058 + 1;
                                                    do
                                                    {
                                                      int v3078 = *v3074--;
                                                      int v3077 = v3078;
                                                      int v3079 = *v3075++;
                                                      v3057 += v3079 * v3077;
                                                      --v3076;
                                                    }
                                                    while (v3076);
                                                  }
                                                  v4[v2938 + 5] = v3057 >> 15;
                                                }
                                                memcpy(v2868, v4, 2 * v2869);
                                                ++v2863;
                                                v2862 += 2;
                                                uint64_t v132 = a1;
                                                if (v2863 >= *v545) {
                                                  goto LABEL_2310;
                                                }
                                              }
                                            }
                                          }
                                        }
                                        uint64_t v3080 = 0;
                                        unint64_t v3081 = a2[2];
                                        uint64_t v3082 = 2 * v3081;
                                        v3081 *= 12;
                                        uint64_t v3083 = a1[2];
                                        uint64_t v3084 = 2 * v3083;
                                        v3085 = (uint16x4_t *)*a1;
                                        v3086 = (int16x8_t *)(*a2 + v3081);
                                        uint64_t v3503 = *a2 + v3081 + v141;
                                        uint64_t v3492 = *a1 + 2 * v3083 + v141;
                                        uint64_t v3497 = *a1 + v141;
                                        uint64_t v3489 = *a1 + 4 * v3083 + v141;
                                        uint64_t v3485 = *a1 + 4 * v3083;
                                        uint64_t v3477 = *a1 + 6 * v3083 + v141;
                                        uint64_t v3473 = *a1 + 6 * v3083;
                                        uint64_t v3467 = *a1 + 8 * v3083 + v141;
                                        uint64_t v3464 = *a1 + 8 * v3083;
                                        uint64_t v3461 = *a1 + 10 * v3083 + v141;
                                        uint64_t v3458 = *a1 + 10 * v3083;
                                        uint64_t v3453 = *a1 + 12 * v3083 + v141;
                                        uint64_t v3448 = *a1 + 12 * v3083;
                                        uint64_t v3443 = *a1 + 14 * v3083 + v141;
                                        uint64_t v3441 = *a1 + 14 * v3083;
                                        uint64_t v3439 = *a1 + 16 * v3083 + v141;
                                        uint64_t v3437 = *a1 + 16 * v3083;
                                        uint64_t v3436 = *a1 + 18 * v3083 + v141;
                                        uint64_t v3435 = *a1 + 18 * v3083;
                                        uint64_t v3434 = *a1 + 20 * v3083 + v141;
                                        uint64_t v3433 = *a1 + 20 * v3083;
                                        uint64_t v3432 = *a1 + 22 * v3083 + v141;
                                        uint64_t v3431 = *a1 + 22 * v3083;
                                        uint64_t v3430 = *a1 + 24 * v3083 + v141;
                                        uint64_t v3429 = *a1 + 24 * v3083;
                                        v3514 = v3086;
                                        v3087 = (uint16x4_t *)*a1;
                                        while (1)
                                        {
                                          uint64_t v3088 = v3080 + 1;
                                          if (v3519 >= 8)
                                          {
                                            uint64_t v3089 = 0;
                                            uint64_t v3102 = v3084 * v3080;
                                            unint64_t v3103 = (unint64_t)v3514->u64 + v3082 * v3080;
                                            unint64_t v3104 = v3503 + v3082 * v3080;
                                            BOOL v3106 = v3103 < v3432 + v3084 * v3080 && v3431 + v3084 * v3080 < v3104;
                                            BOOL v3108 = v3103 < v3434 + v3084 * v3080 && v3433 + v3102 < v3104;
                                            BOOL v3110 = v3103 < v3436 + v3084 * v3080 && v3435 + v3102 < v3104;
                                            BOOL v3112 = v3103 < v3439 + v3084 * v3080 && v3437 + v3102 < v3104;
                                            BOOL v3114 = v3103 < v3443 + v3084 * v3080 && v3441 + v3102 < v3104;
                                            BOOL v3116 = v3103 < v3453 + v3084 * v3080 && v3448 + v3102 < v3104;
                                            BOOL v3118 = v3103 < v3461 + v3084 * v3080 && v3458 + v3102 < v3104;
                                            BOOL v3120 = v3103 < v3467 + v3084 * v3080 && v3464 + v3102 < v3104;
                                            BOOL v3122 = v3103 < v3477 + v3084 * v3080 && v3473 + v3102 < v3104;
                                            BOOL v3124 = v3103 < v3489 + v3084 * v3080 && v3485 + v3102 < v3104;
                                            BOOL v3126 = v3103 < v3492 + v3084 * v3080
                                                 && (unint64_t)v3085 + v3084 + v3084 * v3080 < v3104;
                                            BOOL v3128 = v3103 < v3497 + v3084 * v3080
                                                 && (unint64_t)v3085 + v3084 * v3080 < v3104;
                                            BOOL v3130 = v3103 < (unint64_t)&v12[3] + 2
                                                 && (unint64_t)v12 < v3104;
                                            if ((v3429 + v3102 >= v3104 || v3103 >= v3430 + v3102)
                                              && !v3106
                                              && !v3108
                                              && !v3110
                                              && !v3112
                                              && !v3114
                                              && !v3116
                                              && !v3118
                                              && !v3120
                                              && !v3122
                                              && !v3124
                                              && !v3126
                                              && !v3128
                                              && !v3130)
                                            {
                                              v3132 = (const __int16 *)v12;
                                              uint16x4_t v3133 = (uint16x4_t)vld1_dup_s16(v3132++);
                                              int16x8_t v3134 = (int16x8_t)vmovl_u16(v3133);
                                              uint16x4_t v3135 = (uint16x4_t)vld1_dup_s16(v3132);
                                              int16x8_t v3136 = (int16x8_t)vmovl_u16(v3135);
                                              v3137 = (const __int16 *)v12 + 2;
                                              uint16x4_t v3138 = (uint16x4_t)vld1_dup_s16(v3137);
                                              int16x8_t v3139 = (int16x8_t)vmovl_u16(v3138);
                                              v3140 = (const __int16 *)v12 + 3;
                                              uint16x4_t v3141 = (uint16x4_t)vld1_dup_s16(v3140);
                                              int16x8_t v3142 = (int16x8_t)vmovl_u16(v3141);
                                              v3143 = (const __int16 *)&v12[1];
                                              uint16x4_t v3144 = (uint16x4_t)vld1_dup_s16(v3143);
                                              int16x8_t v3145 = (int16x8_t)vmovl_u16(v3144);
                                              v3146 = (const __int16 *)&v12[1] + 1;
                                              uint16x4_t v3147 = (uint16x4_t)vld1_dup_s16(v3146);
                                              int16x8_t v3148 = (int16x8_t)vmovl_u16(v3147);
                                              v3149 = (const __int16 *)&v12[1] + 2;
                                              uint16x4_t v3150 = (uint16x4_t)vld1_dup_s16(v3149);
                                              int16x8_t v3151 = (int16x8_t)vmovl_u16(v3150);
                                              v3152 = (const __int16 *)&v12[1] + 3;
                                              uint16x4_t v3153 = (uint16x4_t)vld1_dup_s16(v3152);
                                              int16x8_t v3154 = (int16x8_t)vmovl_u16(v3153);
                                              v3155 = (const __int16 *)&v12[2];
                                              uint16x4_t v3156 = (uint16x4_t)vld1_dup_s16(v3155);
                                              int16x8_t v3157 = (int16x8_t)vmovl_u16(v3156);
                                              v3158 = (const __int16 *)&v12[2] + 1;
                                              uint16x4_t v3159 = (uint16x4_t)vld1_dup_s16(v3158);
                                              int16x8_t v3160 = (int16x8_t)vmovl_u16(v3159);
                                              v3161 = (const __int16 *)&v12[2] + 2;
                                              uint16x4_t v3162 = (uint16x4_t)vld1_dup_s16(v3161);
                                              int16x8_t v3163 = (int16x8_t)vmovl_u16(v3162);
                                              v3164 = (const __int16 *)&v12[2] + 3;
                                              uint16x4_t v3165 = (uint16x4_t)vld1_dup_s16(v3164);
                                              int16x8_t v3166 = (int16x8_t)vmovl_u16(v3165);
                                              v3167 = (const __int16 *)&v12[3];
                                              uint16x4_t v3168 = (uint16x4_t)vld1_dup_s16(v3167);
                                              int16x8_t v3169 = (int16x8_t)vmovl_u16(v3168);
                                              uint64_t v3170 = v3519 & 0xFFFFFFF8;
                                              v3171 = v3086;
                                              v3172 = (uint16x8_t *)v3087;
                                              do
                                              {
                                                uint16x8_t v3173 = *(uint16x8_t *)((char *)v3172 + 2 * v3083);
                                                v3174 = (uint16x8_t *)((char *)v3172 + v3084 + v3084);
                                                uint32x4_t v3175 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16((uint16x8_t)vuzp1q_s16(v3134, v3136), v3173), (uint16x8_t)vuzp1q_s16(v3134, v3134), *v3172), (uint16x8_t)vuzp1q_s16(v3134, v3139), *v3174);
                                                uint32x4_t v3176 = vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)v3136), *(uint16x4_t *)v3173.i8), (uint16x4_t)vmovn_s32((int32x4_t)v3134), *(uint16x4_t *)v3172->i8), (uint16x4_t)vmovn_s32((int32x4_t)v3139), *(uint16x4_t *)v3174->i8);
                                                v3177 = (uint16x4_t *)&v3174->i8[v3084];
                                                uint32x4_t v3178 = vmlal_u16(v3176, (uint16x4_t)vmovn_s32((int32x4_t)v3142), *v3177);
                                                uint32x4_t v3179 = vmlal_high_u16(v3175, (uint16x8_t)vuzp1q_s16(v3134, v3142), *(uint16x8_t *)v3177->i8);
                                                v3180 = (uint16x8_t *)((char *)v3177 + v3084);
                                                uint32x4_t v3181 = vmlal_high_u16(v3179, (uint16x8_t)vuzp1q_s16(v3134, v3145), *v3180);
                                                uint32x4_t v3182 = vmlal_u16(v3178, (uint16x4_t)vmovn_s32((int32x4_t)v3145), *(uint16x4_t *)v3180->i8);
                                                v3183 = (uint16x4_t *)&v3180->i8[v3084];
                                                uint32x4_t v3184 = vmlal_u16(v3182, (uint16x4_t)vmovn_s32((int32x4_t)v3148), *v3183);
                                                uint32x4_t v3185 = vmlal_high_u16(v3181, (uint16x8_t)vuzp1q_s16(v3134, v3148), *(uint16x8_t *)v3183->i8);
                                                v3186 = (uint16x8_t *)((char *)v3183 + v3084);
                                                uint32x4_t v3187 = vmlal_high_u16(v3185, (uint16x8_t)vuzp1q_s16(v3134, v3151), *v3186);
                                                uint32x4_t v3188 = vmlal_u16(v3184, (uint16x4_t)vmovn_s32((int32x4_t)v3151), *(uint16x4_t *)v3186->i8);
                                                v3189 = (uint16x4_t *)&v3186->i8[v3084];
                                                uint32x4_t v3190 = vmlal_u16(v3188, (uint16x4_t)vmovn_s32((int32x4_t)v3154), *v3189);
                                                uint32x4_t v3191 = vmlal_high_u16(v3187, (uint16x8_t)vuzp1q_s16(v3134, v3154), *(uint16x8_t *)v3189->i8);
                                                v3192 = (uint16x8_t *)((char *)v3189 + v3084);
                                                uint32x4_t v3193 = vmlal_high_u16(v3191, (uint16x8_t)vuzp1q_s16(v3134, v3157), *v3192);
                                                uint32x4_t v3194 = vmlal_u16(v3190, (uint16x4_t)vmovn_s32((int32x4_t)v3157), *(uint16x4_t *)v3192->i8);
                                                v3195 = (uint16x4_t *)&v3192->i8[v3084];
                                                uint32x4_t v3196 = vmlal_u16(v3194, (uint16x4_t)vmovn_s32((int32x4_t)v3160), *v3195);
                                                uint32x4_t v3197 = vmlal_high_u16(v3193, (uint16x8_t)vuzp1q_s16(v3134, v3160), *(uint16x8_t *)v3195->i8);
                                                v3198 = (uint16x4_t *)((char *)v3195 + v3084);
                                                *v3171++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v3196, (uint16x4_t)vmovn_s32((int32x4_t)v3163), *v3198), (uint16x4_t)vmovn_s32((int32x4_t)v3166), *(uint16x4_t *)((char *)v3198 + v3084)), (uint16x4_t)vmovn_s32((int32x4_t)v3169), *(uint16x4_t *)((char *)v3198+ 2 * v3083+ v3084)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v3197, (uint16x8_t)vuzp1q_s16(v3134, v3163),
                                                                              *(uint16x8_t *)v3198->i8),
                                                                            (uint16x8_t)vuzp1q_s16(v3134, v3166),
                                                                            *(uint16x8_t *)&v3198->i8[v3084]),
                                                                          (uint16x8_t)vuzp1q_s16(v3134, v3169),
                                                                          *(uint16x8_t *)&v3198->i8[2 * v3083 + v3084]),
                                                             0xFuLL);
                                                ++v3172;
                                                v3170 -= 8;
                                              }
                                              while (v3170);
                                              uint64_t v3089 = v3519 & 0xFFFFFFF8;
                                              if (v3089 == v3519) {
                                                goto LABEL_2060;
                                              }
                                            }
                                          }
                                          else
                                          {
                                            uint64_t v3089 = 0;
                                          }
                                          uint64_t v3090 = (v3080 + 2) * v3083;
                                          uint64_t v3091 = (v3080 + 3) * v3083;
                                          uint64_t v3092 = (v3080 + 4) * v3083;
                                          uint64_t v3093 = (v3080 + 5) * v3083;
                                          uint64_t v3094 = (v3080 + 6) * v3083;
                                          uint64_t v3095 = (v3080 + 7) * v3083;
                                          uint64_t v3096 = (v3080 + 8) * v3083;
                                          uint64_t v3097 = (v3080 + 9) * v3083;
                                          uint64_t v3098 = (v3080 + 10) * v3083;
                                          uint64_t v3099 = (v3080 + 11) * v3083;
                                          uint64_t v3100 = (v3080 + 12) * v3083;
                                          do
                                          {
                                            int v3101 = v3085->u16[v3089 + v3100];
                                            v3086->i16[v3089] = (v12->u16[0] * v3087->u16[v3089]
                                                               + v12->u16[1] * v3085->u16[v3089 + v3088 * v3083]
                                                               + v12->u16[2] * v3085->u16[v3089 + v3090]
                                                               + v12->u16[3] * v3085->u16[v3089 + v3091]
                                                               + v12[1].u16[0] * v3085->u16[v3089 + v3092]
                                                               + v12[1].u16[1] * v3085->u16[v3089 + v3093]
                                                               + v12[1].u16[2] * v3085->u16[v3089 + v3094]
                                                               + v12[1].u16[3] * v3085->u16[v3089 + v3095]
                                                               + v12[2].u16[0] * v3085->u16[v3089 + v3096]
                                                               + v12[2].u16[1] * v3085->u16[v3089 + v3097]
                                                               + v12[2].u16[2] * v3085->u16[v3089 + v3098]
                                                               + v12[2].u16[3] * v3085->u16[v3089 + v3099]
                                                               + v12[3].u16[0] * v3101) >> 15;
                                            ++v3089;
                                          }
                                          while (v3519 != v3089);
LABEL_2060:
                                          v3087 = (uint16x4_t *)((char *)v3087 + v3084);
                                          v3086 = (int16x8_t *)((char *)v3086 + v3082);
                                          uint64_t v3080 = v3088;
                                          if (v3088 == v3480 - 12) {
                                            goto LABEL_1912;
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v1226 = 0;
                                  }
                                  uint64_t v1664 = v3519 - v1226;
                                  uint64_t v1665 = 2 * v1226;
                                  v1666 = (_WORD *)(v136 + 2 * v1226 + 8 * v140);
                                  v1667 = (uint16x4_t *)((char *)v134 + v1665);
                                  do
                                  {
                                    v1668 = (unsigned __int16 *)((char *)v1667 + v137 + v137);
                                    int v1669 = *v1668;
                                    v1670 = &v1668[(unint64_t)v137 / 2];
                                    int v1671 = (v12->u16[0] + v12->u16[1] + v12->u16[2]) * v1667->u16[0]
                                          + v12->u16[3] * v1667->u16[(unint64_t)v137 / 2]
                                          + v12[1].u16[0] * v1669;
                                    int v1672 = *v1670;
                                    v1673 = &v1670[(unint64_t)v137 / 2];
                                    int v1674 = v1671 + v12[1].u16[1] * v1672 + v12[1].u16[2] * *v1673;
                                    v1675 = &v1673[(unint64_t)v137 / 2];
                                    int v1676 = *v1675;
                                    v1677 = &v1675[(unint64_t)v137 / 2];
                                    int v1678 = v1674 + v12[1].u16[3] * v1676;
                                    int v1679 = *v1677;
                                    v1680 = &v1677[(unint64_t)v137 / 2];
                                    *v1666++ = (v1678
                                              + v12[2].u16[0] * v1679
                                              + v12[2].u16[1] * *v1680
                                              + v12[2].u16[2] * v1680[(unint64_t)v137 / 2]
                                              + v12[2].u16[3]
                                              * v1680[(unint64_t)v137 / 2 + (unint64_t)v137 / 2]
                                              + v12[3].u16[0]
                                              * v1680[(unint64_t)v137 / 2
                                                                  + (unint64_t)v137 / 2
                                                                  + (unint64_t)v137 / 2]) >> 15;
                                    v1667 = (uint16x4_t *)((char *)v1667 + 2);
                                    --v1664;
                                  }
                                  while (v1664);
                                  goto LABEL_1216;
                                }
                              }
                            }
                            else
                            {
                              uint64_t v829 = 0;
                            }
                            uint64_t v1211 = v133 - v829;
                            uint64_t v1212 = 2 * v829;
                            long long v1213 = (_WORD *)(v136 + 2 * v829 + 6 * v140);
                            long long v1214 = (uint16x4_t *)((char *)v134 + v1212);
                            do
                            {
                              long long v1215 = (unsigned __int16 *)((char *)v1214 + v137 + v137);
                              int v1216 = *v1215;
                              long long v1217 = &v1215[(unint64_t)v137 / 2];
                              int v1218 = (v12->u16[0] + v12->u16[1] + v12->u16[2] + v12->u16[3]) * v1214->u16[0]
                                    + v12[1].u16[0] * v1214->u16[(unint64_t)v137 / 2]
                                    + v12[1].u16[1] * v1216
                                    + v12[1].u16[2] * *v1217;
                              long long v1219 = &v1217[(unint64_t)v137 / 2];
                              int v1220 = *v1219;
                              long long v1221 = &v1219[(unint64_t)v137 / 2];
                              int v1222 = v1218 + v12[1].u16[3] * v1220;
                              int v1223 = *v1221;
                              v1224 = &v1221[(unint64_t)v137 / 2];
                              *v1213++ = (v1222
                                        + v12[2].u16[0] * v1223
                                        + v12[2].u16[1] * *v1224
                                        + v12[2].u16[2] * v1224[(unint64_t)v137 / 2]
                                        + v12[2].u16[3] * v1224[(unint64_t)v137 / 2 + (unint64_t)v137 / 2]
                                        + v12[3].u16[0]
                                        * v1224[(unint64_t)v137 / 2
                                                            + (unint64_t)v137 / 2
                                                            + (unint64_t)v137 / 2]) >> 15;
                              long long v1214 = (uint16x4_t *)((char *)v1214 + 2);
                              --v1211;
                            }
                            while (v1211);
                            goto LABEL_866;
                          }
                        }
                      }
                    }
                  }
                }
                else
                {
                  uint64_t v329 = 0;
                }
                uint64_t v821 = v133 - v329;
                uint64_t v822 = 2 * v329;
                float v823 = (_WORD *)(v136 + 2 * v329 + 4 * v140);
                uint64_t v824 = (uint16x4_t *)((char *)v134 + v822);
                do
                {
                  uint64_t v825 = (unsigned __int16 *)((char *)v824 + v137 + v137);
                  uint64_t v826 = &v825[(unint64_t)v137 / 2 + (unint64_t)v137 / 2];
                  int v827 = (vaddvq_s32((int32x4_t)vmovl_u16(*v12)) + v12[1].u16[0]) * v824->u16[0]
                       + v12[1].u16[1] * v824->u16[(unint64_t)v137 / 2]
                       + v12[1].u16[2] * *v825
                       + v12[1].u16[3] * v825[(unint64_t)v137 / 2];
                  LODWORD(v825) = *v826;
                  float v828 = &v826[(unint64_t)v137 / 2];
                  *v823++ = (v827
                           + v12[2].u16[0] * v825
                           + v12[2].u16[1] * *v828
                           + v12[2].u16[2] * v828[(unint64_t)v137 / 2]
                           + v12[2].u16[3] * v828[(unint64_t)v137 / 2 + (unint64_t)v137 / 2]
                           + v12[3].u16[0]
                           * v828[(unint64_t)v137 / 2
                                              + (unint64_t)v137 / 2
                                              + (unint64_t)v137 / 2]) >> 15;
                  uint64_t v824 = (uint16x4_t *)((char *)v824 + 2);
                  --v821;
                }
                while (v821);
                goto LABEL_555;
              }
            }
          }
        }
      }
      else
      {
        uint64_t v133 = v3519;
        uint64_t v139 = v237;
        uint64_t v135 = v233;
        unint64_t v136 = v3505;
        uint64_t v142 = v236;
        uint64_t v224 = v228;
      }
LABEL_204:
      uint64_t v320 = v133 - v225;
      uint64_t v321 = (_WORD *)(v136 + 2 * (v225 + v140));
      float v322 = (unsigned __int16 *)v134 + v225;
      do
      {
        float v323 = &v322[(unint64_t)v137 / 2 + (unint64_t)v137 / 2];
        int v324 = *v323;
        float v325 = &v323[(unint64_t)v137 / 2];
        int v326 = (vaddvq_s32((int32x4_t)vmovl_u16(*v12)) + v12[1].u16[0] + v12[1].u16[1]) * *v322
             + v12[1].u16[2] * v322[(unint64_t)v137 / 2]
             + v12[1].u16[3] * v324;
        int v327 = *v325;
        float32_t v328 = &v325[(unint64_t)v137 / 2];
        *v321++ = (v326
                 + v12[2].u16[0] * v327
                 + v12[2].u16[1] * *v328
                 + v12[2].u16[2] * v328[(unint64_t)v137 / 2]
                 + v12[2].u16[3] * v328[(unint64_t)v137 / 2 + (unint64_t)v137 / 2]
                 + v12[3].u16[0]
                 * v328[(unint64_t)v137 / 2
                                    + (unint64_t)v137 / 2
                                    + (unint64_t)v137 / 2]) >> 15;
        ++v322;
        --v320;
      }
      while (v320);
      goto LABEL_206;
    default:
      uint64_t v3516 = v10;
      uint64_t v49 = (uint64_t)v3474 >> 1;
      if (v3474 < 2) {
        goto LABEL_208;
      }
      uint64_t v50 = *((unsigned int *)a1 + 2);
      if ((int)v50 < 1) {
        goto LABEL_208;
      }
      uint64_t v51 = 0;
      uint64_t v52 = (uint16x4_t *)*a1;
      unint64_t v53 = *a2;
      unsigned int v54 = v40 + 1;
      uint64_t v55 = a1[2];
      uint64_t v3498 = *a1 + 18;
      unint64_t v3504 = a2[2];
      uint64_t v56 = 2 * v55;
      unsigned int v57 = v40 + 1;
      unsigned int v58 = v3474 >> 1;
LABEL_30:
      unint64_t v59 = v51 * v3504;
      uint64_t v60 = v57;
      if ((int)v40 < (int)v51)
      {
        uint64_t v61 = 0;
        uint64_t v62 = v58 & 0xFFFFFFF0;
        BOOL v64 = v58 > 0xF && v55 == 1;
        long long v65 = (uint16x8_t *)v3498;
        while (1)
        {
          if (v64)
          {
            int32x4_t v66 = 0uLL;
            uint64_t v67 = v58 & 0xFFFFFFF0;
            uint64_t v68 = (uint16x8_t *)&v12[2];
            int32x4_t v69 = v65;
            int32x4_t v70 = 0uLL;
            int32x4_t v71 = 0uLL;
            int32x4_t v72 = 0uLL;
            do
            {
              uint16x8_t v73 = v69[-1];
              uint16x8_t v74 = v68[-1];
              int32x4_t v70 = (int32x4_t)vmlal_high_u16((uint32x4_t)v70, v74, v73);
              int32x4_t v66 = (int32x4_t)vmlal_u16((uint32x4_t)v66, *(uint16x4_t *)v74.i8, *(uint16x4_t *)v73.i8);
              int32x4_t v72 = (int32x4_t)vmlal_high_u16((uint32x4_t)v72, *v68, *v69);
              int32x4_t v71 = (int32x4_t)vmlal_u16((uint32x4_t)v71, *(uint16x4_t *)v68->i8, *(uint16x4_t *)v69->i8);
              v69 += 2;
              v68 += 2;
              v67 -= 16;
            }
            while (v67);
            unsigned int v75 = vaddvq_s32(vaddq_s32(vaddq_s32(v71, v66), vaddq_s32(v72, v70)));
            uint64_t v76 = v62 | 1;
            uint64_t v77 = v58 & 0xFFFFFFF0;
            if (v62 == v58) {
              goto LABEL_38;
            }
          }
          else
          {
            uint64_t v77 = 0;
            unsigned int v75 = 0;
            uint64_t v76 = 1;
          }
          int16x8_t v78 = (unsigned __int16 *)v52 + v61 + v55 * v76;
          int32x4_t v79 = (unsigned __int16 *)v12 + v77;
          uint64_t v80 = v58 - v77;
          do
          {
            int v81 = *v79++;
            v75 += v81 * *v78;
            int16x8_t v78 = (unsigned __int16 *)((char *)v78 + v56);
            --v80;
          }
          while (v80);
LABEL_38:
          *(_WORD *)(v53 + 2 * (v61 + v59)) = v75 >> 15;
          ++v61;
          long long v65 = (uint16x8_t *)((char *)v65 + 2);
          if (v61 == v50) {
            goto LABEL_29;
          }
        }
      }
      uint64_t v82 = 0;
      unint64_t v83 = (v54 - 1) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v84 = (uint64_t)&v12[2] + 2 * v57;
      BOOL v86 = (unint64_t)v54 - 1 > 0xF && v55 == 1;
      int32x4_t v87 = (uint16x8_t *)v3498;
      break;
  }
  while (v60 >= 0x10)
  {
    int32x4_t v90 = 0uLL;
    uint64_t v91 = v60 & 0xFFFFFFF0;
    uint64_t v92 = (uint16x8_t *)&v12[2];
    int32x4_t v93 = 0uLL;
    int32x4_t v94 = 0uLL;
    int32x4_t v95 = 0uLL;
    do
    {
      uint16x8_t v96 = v92[-1];
      int32x4_t v93 = (int32x4_t)vaddw_high_u16((uint32x4_t)v93, v96);
      int32x4_t v90 = (int32x4_t)vaddw_u16((uint32x4_t)v90, *(uint16x4_t *)v96.i8);
      int32x4_t v95 = (int32x4_t)vaddw_high_u16((uint32x4_t)v95, *v92);
      int32x4_t v94 = (int32x4_t)vaddw_u16((uint32x4_t)v94, *(uint16x4_t *)v92->i8);
      v92 += 2;
      v91 -= 16;
    }
    while (v91);
    int v89 = vaddvq_s32(vaddq_s32(vaddq_s32(v94, v90), vaddq_s32(v95, v93)));
    uint64_t v88 = v60 & 0xFFFFFFF0;
    if (v88 != v60) {
      goto LABEL_61;
    }
LABEL_63:
    unsigned int v100 = v89 * v52->u16[v82];
    if (v86)
    {
      int32x4_t v101 = (int32x4_t)v100;
      int32x4_t v102 = 0uLL;
      float v103 = (uint16x8_t *)v84;
      unint64_t v104 = (v54 - 1) & 0xFFFFFFFFFFFFFFF0;
      int32x4_t v105 = v87;
      int32x4_t v106 = 0uLL;
      int32x4_t v107 = 0uLL;
      do
      {
        uint16x8_t v108 = v105[-1];
        uint16x8_t v109 = v103[-1];
        int32x4_t v102 = (int32x4_t)vmlal_high_u16((uint32x4_t)v102, v109, v108);
        int32x4_t v101 = (int32x4_t)vmlal_u16((uint32x4_t)v101, *(uint16x4_t *)v109.i8, *(uint16x4_t *)v108.i8);
        int32x4_t v107 = (int32x4_t)vmlal_high_u16((uint32x4_t)v107, *v103, *v105);
        int32x4_t v106 = (int32x4_t)vmlal_u16((uint32x4_t)v106, *(uint16x4_t *)v103->i8, *(uint16x4_t *)v105->i8);
        v105 += 2;
        v103 += 2;
        v104 -= 16;
      }
      while (v104);
      unsigned int v100 = vaddvq_s32(vaddq_s32(vaddq_s32(v106, v101), vaddq_s32(v107, v102)));
      uint64_t v110 = v83 | 1;
      uint64_t v111 = v83 + v60;
      if (v54 - 1 == v83) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v110 = 1;
      uint64_t v111 = v60;
    }
    uint64_t v112 = v54 - v110;
    float v113 = (unsigned __int16 *)v52 + v82 + v55 * v110;
    uint64_t v114 = (unsigned __int16 *)v12 + v111;
    do
    {
      int v115 = *v114++;
      v100 += v115 * *v113;
      float v113 = (unsigned __int16 *)((char *)v113 + v56);
      --v112;
    }
    while (v112);
LABEL_55:
    *(_WORD *)(v53 + 2 * (v82 + v59)) = v100 >> 15;
    ++v82;
    int32x4_t v87 = (uint16x8_t *)((char *)v87 + 2);
    if (v82 == v50)
    {
LABEL_29:
      ++v51;
      ++v58;
      unsigned int v57 = v60 - 1;
      ++v54;
      if (v51 != v40) {
        goto LABEL_30;
      }
LABEL_208:
      __float2 v330 = a1;
      uint64_t v3459 = *((int *)a1 + 3);
      uint64_t v3438 = v3459 - (int)v40;
      if ((int)v3438 > (int)v40)
      {
        uint64_t v331 = *((unsigned int *)a1 + 2);
        if ((int)v331 >= 1)
        {
          uint64_t v332 = 0;
          unint64_t v333 = *a2;
          unint64_t v3499 = a2[2];
          uint64_t v334 = (uint64_t)v3474 >> 1;
          do
          {
            if (v334 - v49 > v334 + v49)
            {
              bzero((void *)(v333 + 2 * v3499 * (v332 + v49)), 2 * v331);
            }
            else
            {
              uint64_t v335 = 0;
              uint64_t v336 = *v330;
              uint64_t v337 = v330[2];
              BOOL v339 = v3516 > 0xF && v337 == 1;
              uint64_t v340 = v336 + 2 * (int)v332 + 16;
              do
              {
                if (v339)
                {
                  int32x4_t v341 = 0uLL;
                  float v342 = (uint16x8_t *)v340;
                  uint64_t v343 = v3516 & 0xFFFFFFF0;
                  float v344 = (uint16x8_t *)&v12[2];
                  int32x4_t v345 = 0uLL;
                  int32x4_t v346 = 0uLL;
                  int32x4_t v347 = 0uLL;
                  do
                  {
                    uint16x8_t v348 = v342[-1];
                    uint16x8_t v349 = v344[-1];
                    int32x4_t v345 = (int32x4_t)vmlal_high_u16((uint32x4_t)v345, v349, v348);
                    int32x4_t v341 = (int32x4_t)vmlal_u16((uint32x4_t)v341, *(uint16x4_t *)v349.i8, *(uint16x4_t *)v348.i8);
                    int32x4_t v347 = (int32x4_t)vmlal_high_u16((uint32x4_t)v347, *v344, *v342);
                    int32x4_t v346 = (int32x4_t)vmlal_u16((uint32x4_t)v346, *(uint16x4_t *)v344->i8, *(uint16x4_t *)v342->i8);
                    v344 += 2;
                    v342 += 2;
                    v343 -= 16;
                  }
                  while (v343);
                  unsigned int v350 = vaddvq_s32(vaddq_s32(vaddq_s32(v346, v341), vaddq_s32(v347, v345)));
                  unint64_t v351 = (int)v332 + (unint64_t)(v3516 & 0xFFFFFFF0);
                  uint64_t v352 = v3516 & 0xFFFFFFF0;
                }
                else
                {
                  uint64_t v352 = 0;
                  unsigned int v350 = 0;
                  unint64_t v351 = (int)v332;
                }
                uint64_t v353 = (unsigned __int16 *)(v336 + 2 * (v335 + v337 * v351));
                unint64_t v354 = (unsigned __int16 *)v12 + v352;
                uint64_t v355 = v3516 - v352;
                do
                {
                  int v356 = *v354++;
                  v350 += v356 * *v353;
                  v353 += v337;
                  --v355;
                }
                while (v355);
                *(_WORD *)(v333 + 2 * (v335 + v334 * v3499)) = v350 >> 15;
                ++v335;
                v340 += 2;
              }
              while (v335 != v331);
            }
            ++v334;
            ++v332;
            __float2 v330 = a1;
          }
          while (v3459 - (v3474 & 0xFFFFFFFE) != v332);
        }
      }
      if (v3474 > 1)
      {
        uint64_t v357 = *((unsigned int *)v330 + 2);
        if ((int)v357 >= 1)
        {
          uint64_t v358 = 0;
          uint64_t v359 = *v330;
          uint64_t v360 = v330[2];
          uint64_t v361 = v360 * (v3459 - 1);
          unint64_t v362 = *a2;
          uint64_t v363 = (int)v3459 - 2;
          uint64_t v3449 = v3459 - 1 - v40;
          unint64_t v3454 = a2[2];
          uint64_t v3442 = v359 + 2 * v360 * v363;
          uint64_t v364 = 4 * v360;
          uint64_t v3500 = v363;
          uint64_t v3440 = v359 + 2 * v360 * (v363 - 1);
          uint64_t v3506 = v360;
          uint64_t v365 = -2 * v360;
          unsigned int v366 = 2;
          uint64_t v3444 = v49 + v363 + v40 - v3459 + 1;
          uint64_t v367 = v3444;
          uint64_t v368 = v3459 - (int)v40;
          while (1)
          {
            unsigned int v369 = v366;
            uint64_t v370 = v368 - v40;
            unint64_t v371 = v368 * v3454;
            uint64_t v3465 = v367;
            uint64_t v3468 = v358;
            uint64_t v3462 = v368;
            if (v368 - v40 <= v3500) {
              break;
            }
            if (v368 >= v3449)
            {
              uint64_t v372 = 0;
              while (1)
              {
                if (v366 >= 0x10)
                {
                  int32x4_t v375 = 0uLL;
                  uint64_t v376 = v366 & 0xFFFFFFF0;
                  uint64_t v377 = (uint16x8_t *)&v12[2];
                  int32x4_t v378 = 0uLL;
                  int32x4_t v379 = 0uLL;
                  int32x4_t v380 = 0uLL;
                  do
                  {
                    uint16x8_t v381 = v377[-1];
                    int32x4_t v378 = (int32x4_t)vaddw_high_u16((uint32x4_t)v378, v381);
                    int32x4_t v375 = (int32x4_t)vaddw_u16((uint32x4_t)v375, *(uint16x4_t *)v381.i8);
                    int32x4_t v380 = (int32x4_t)vaddw_high_u16((uint32x4_t)v380, *v377);
                    int32x4_t v379 = (int32x4_t)vaddw_u16((uint32x4_t)v379, *(uint16x4_t *)v377->i8);
                    v377 += 2;
                    v376 -= 16;
                  }
                  while (v376);
                  int v374 = vaddvq_s32(vaddq_s32(vaddq_s32(v379, v375), vaddq_s32(v380, v378)));
                  uint64_t v373 = v366 & 0xFFFFFFF0;
                  if (v373 == v366) {
                    goto LABEL_238;
                  }
                }
                else
                {
                  uint64_t v373 = 0;
                  int v374 = 0;
                }
                float v382 = (unsigned __int16 *)v12 + v373;
                uint64_t v383 = v366 - v373;
                do
                {
                  int v384 = *v382++;
                  v374 += v384;
                  --v383;
                }
                while (v383);
LABEL_238:
                *(_WORD *)(v362 + 2 * (v372 + v371)) = (v374
                                                      * *(unsigned __int16 *)(v359 + 2 * (v372 + v361))) >> 15;
                if (++v372 == v357) {
                  goto LABEL_234;
                }
              }
            }
            bzero((void *)(v362 + 2 * v3454 * (v358 + v3438)), 2 * v357);
LABEL_234:
            uint64_t v368 = v3462 + 1;
            unsigned int v366 = v369 + 1;
            uint64_t v358 = v3468 + 1;
            uint64_t v367 = v3465 - 1;
            if (v3462 + 1 >= v3459) {
              goto LABEL_275;
            }
          }
          unint64_t v385 = v367 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v386 = v3444 - v358;
          if (v368 < v3449)
          {
            uint64_t v387 = 0;
            uint64_t v388 = v3440;
            uint64_t v389 = v3442;
            while (1)
            {
              if (v386 >= 2)
              {
                uint64_t v393 = 0;
                int v394 = 0;
                int v395 = 0;
                unint64_t v396 = v385;
                float32x4_t v397 = (unsigned __int16 *)v12 + 1;
                do
                {
                  int v398 = *(v397 - 1);
                  int v399 = *v397;
                  v397 += 2;
                  v394 += v398 * *(unsigned __int16 *)(v389 + v393);
                  v395 += v399 * *(unsigned __int16 *)(v388 + v393);
                  v393 -= v364;
                  v396 -= 2;
                }
                while (v396);
                unsigned int v391 = v395 + v394;
                uint64_t v392 = v3500 - (v386 & 0xFFFFFFFFFFFFFFFELL);
                unint64_t v390 = v386 & 0xFFFFFFFFFFFFFFFELL;
                if (v386 == (v386 & 0xFFFFFFFFFFFFFFFELL)) {
                  goto LABEL_249;
                }
              }
              else
              {
                unint64_t v390 = 0;
                unsigned int v391 = 0;
                uint64_t v392 = (int)v3459 - 2;
              }
              uint64_t v400 = v392 + 1;
              float32x4_t v401 = (unsigned __int16 *)(v359 + 2 * (v387 + v3506 * v392));
              float32x4_t v402 = (unsigned __int16 *)v12 + v390;
              do
              {
                int v403 = *v402++;
                v391 += v403 * *v401;
                --v400;
                float32x4_t v401 = (unsigned __int16 *)((char *)v401 + v365);
              }
              while (v400 > v370);
LABEL_249:
              *(_WORD *)(v362 + 2 * (v387 + v371)) = v391 >> 15;
              ++v387;
              v389 += 2;
              v388 += 2;
              if (v387 == v357) {
                goto LABEL_234;
              }
            }
          }
          uint64_t v404 = 0;
          uint64_t v405 = v3440;
          uint64_t v406 = v3442;
          while (2)
          {
            if (v366 < 0x10)
            {
              uint64_t v407 = 0;
              int v408 = 0;
              goto LABEL_265;
            }
            int32x4_t v409 = 0uLL;
            uint64_t v410 = v366 & 0xFFFFFFF0;
            float32x4_t v411 = (uint16x8_t *)&v12[2];
            int32x4_t v412 = 0uLL;
            int32x4_t v413 = 0uLL;
            int32x4_t v414 = 0uLL;
            do
            {
              uint16x8_t v415 = v411[-1];
              int32x4_t v412 = (int32x4_t)vaddw_high_u16((uint32x4_t)v412, v415);
              int32x4_t v409 = (int32x4_t)vaddw_u16((uint32x4_t)v409, *(uint16x4_t *)v415.i8);
              int32x4_t v414 = (int32x4_t)vaddw_high_u16((uint32x4_t)v414, *v411);
              int32x4_t v413 = (int32x4_t)vaddw_u16((uint32x4_t)v413, *(uint16x4_t *)v411->i8);
              v411 += 2;
              v410 -= 16;
            }
            while (v410);
            int v408 = vaddvq_s32(vaddq_s32(vaddq_s32(v413, v409), vaddq_s32(v414, v412)));
            uint64_t v407 = v366 & 0xFFFFFFF0;
            if (v407 != v366)
            {
LABEL_265:
              float32x4_t v416 = (unsigned __int16 *)v12 + v407;
              uint64_t v417 = v366 - v407;
              do
              {
                int v418 = *v416++;
                v408 += v418;
                --v417;
              }
              while (v417);
            }
            unsigned int v419 = v408 * *(unsigned __int16 *)(v359 + 2 * (v404 + v361));
            if (v386 < 2)
            {
              uint64_t v420 = (int)v3459 - 2;
              unint64_t v421 = v366;
              goto LABEL_272;
            }
            uint64_t v422 = 0;
            int v423 = 0;
            long long v424 = (unsigned __int16 *)v12 + v366 + 1;
            unint64_t v425 = v385;
            do
            {
              int v426 = *(v424 - 1);
              int v427 = *v424;
              v424 += 2;
              v419 += v426 * *(unsigned __int16 *)(v406 + v422);
              v423 += v427 * *(unsigned __int16 *)(v405 + v422);
              v422 -= v364;
              v425 -= 2;
            }
            while (v425);
            v419 += v423;
            uint64_t v420 = v3500 - (v386 & 0xFFFFFFFFFFFFFFFELL);
            unint64_t v421 = (v386 & 0xFFFFFFFFFFFFFFFELL) + v366;
            if (v386 != (v386 & 0xFFFFFFFFFFFFFFFELL))
            {
LABEL_272:
              uint64_t v428 = v420 + 1;
              float v429 = (unsigned __int16 *)(v359 + 2 * (v404 + v3506 * v420));
              float v430 = (unsigned __int16 *)v12 + v421;
              do
              {
                int v431 = *v430++;
                v419 += v431 * *v429;
                --v428;
                float v429 = (unsigned __int16 *)((char *)v429 + v365);
              }
              while (v428 > v370);
            }
            *(_WORD *)(v362 + 2 * (v404 + v371)) = v419 >> 15;
            ++v404;
            v406 += 2;
            v405 += 2;
            if (v404 == v357) {
              goto LABEL_234;
            }
            continue;
          }
        }
      }
LABEL_275:
      unsigned int v4 = v3521;
      int v432 = v3474;
      if ((int)v3459 < 1) {
        goto LABEL_2310;
      }
      uint64_t v3507 = 0;
      uint64_t v433 = 0;
      float v434 = v12 + 2;
      uint64_t v3486 = (2 * v49) | 1;
      while (2)
      {
        if (v432 >= 2)
        {
          uint64_t v435 = 0;
          unint64_t v436 = *a2;
          unint64_t v437 = a2[2];
          unint64_t v438 = v437 * v433;
          uint64_t v439 = *a2 + v437 * v3507 + 18;
          unsigned int v440 = v40 + 1;
          unsigned int v441 = v40 + 1;
          int v442 = -(int)v40;
          int v443 = v3474 >> 1;
          while (1)
          {
            if (v442 <= 1) {
              int v444 = 1;
            }
            else {
              int v444 = v442;
            }
            if ((int)v40 < (int)v435)
            {
              int v445 = 0;
              goto LABEL_294;
            }
            if (v440 < 0x10) {
              break;
            }
            uint64_t v447 = v440 & 0xFFFFFFF0;
            uint64_t v446 = v447;
            int32x4_t v448 = 0uLL;
            float v449 = (uint16x8_t *)&v12[2];
            int32x4_t v450 = 0uLL;
            int32x4_t v451 = 0uLL;
            int32x4_t v452 = 0uLL;
            do
            {
              uint16x8_t v453 = v449[-1];
              int32x4_t v450 = (int32x4_t)vaddw_high_u16((uint32x4_t)v450, v453);
              int32x4_t v448 = (int32x4_t)vaddw_u16((uint32x4_t)v448, *(uint16x4_t *)v453.i8);
              int32x4_t v452 = (int32x4_t)vaddw_high_u16((uint32x4_t)v452, *v449);
              int32x4_t v451 = (int32x4_t)vaddw_u16((uint32x4_t)v451, *(uint16x4_t *)v449->i8);
              v449 += 2;
              v447 -= 16;
            }
            while (v447);
            int v445 = vaddvq_s32(vaddq_s32(vaddq_s32(v451, v448), vaddq_s32(v452, v450)));
            if (v446 != v440) {
              goto LABEL_292;
            }
LABEL_294:
            unsigned int v457 = v445 * *(unsigned __int16 *)(v436 + 2 * v438);
            if (1 - (int)v40 <= (int)v435)
            {
              unint64_t v458 = v441 - 1;
              uint64_t v459 = (v444 + v443);
              if (v458 >= 0x10)
              {
                unint64_t v461 = v458 & 0xFFFFFFFFFFFFFFF0;
                float32x4_t v462 = (uint16x8_t *)((char *)v434 + 2 * v459);
                unint64_t v460 = v458 & 0xFFFFFFFFFFFFFFF0 | 1;
                v459 += v458 & 0xFFFFFFFFFFFFFFF0;
                int32x4_t v463 = 0uLL;
                int32x4_t v464 = (int32x4_t)v457;
                float32x4_t v465 = (uint16x8_t *)v439;
                int32x4_t v466 = 0uLL;
                int32x4_t v467 = 0uLL;
                do
                {
                  uint16x8_t v468 = v462[-1];
                  uint16x8_t v469 = v465[-1];
                  int32x4_t v463 = (int32x4_t)vmlal_high_u16((uint32x4_t)v463, v469, v468);
                  int32x4_t v464 = (int32x4_t)vmlal_u16((uint32x4_t)v464, *(uint16x4_t *)v469.i8, *(uint16x4_t *)v468.i8);
                  int32x4_t v467 = (int32x4_t)vmlal_high_u16((uint32x4_t)v467, *v465, *v462);
                  int32x4_t v466 = (int32x4_t)vmlal_u16((uint32x4_t)v466, *(uint16x4_t *)v465->i8, *(uint16x4_t *)v462->i8);
                  v465 += 2;
                  v462 += 2;
                  v461 -= 16;
                }
                while (v461);
                unsigned int v457 = vaddvq_s32(vaddq_s32(vaddq_s32(v466, v464), vaddq_s32(v467, v463)));
                if (v458 == (v458 & 0xFFFFFFFFFFFFFFF0)) {
                  goto LABEL_281;
                }
              }
              else
              {
                unint64_t v460 = 1;
              }
              unint64_t v470 = v441 - v460;
              float32x4_t v471 = (unsigned __int16 *)(v436 + 2 * (v438 + v460));
              float32x4_t v472 = (unsigned __int16 *)v12 + v459;
              do
              {
                int v474 = *v472++;
                int v473 = v474;
                int v475 = *v471++;
                v457 += v475 * v473;
                --v470;
              }
              while (v470);
            }
LABEL_281:
            v4[v435++] = v457 >> 15;
            --v443;
            --v440;
            ++v442;
            ++v441;
            if (v435 == v40) {
              goto LABEL_303;
            }
          }
          uint64_t v446 = 0;
          int v445 = 0;
LABEL_292:
          float v454 = (unsigned __int16 *)v12 + v446;
          uint64_t v455 = v440 - v446;
          do
          {
            int v456 = *v454++;
            v445 += v456;
            --v455;
          }
          while (v455);
          goto LABEL_294;
        }
LABEL_303:
        uint64_t v476 = *((int *)a1 + 2);
        uint64_t v477 = v476 - (int)v40;
        if ((int)v477 > (int)v40)
        {
          int v478 = 0;
          uint64_t v479 = (uint64_t)v3474 >> 1;
          do
          {
            if (v479 - v49 > v479 + v49)
            {
              unsigned int v480 = 0;
            }
            else
            {
              unint64_t v481 = *a2;
              unint64_t v482 = a2[2];
              if (v3516 >= 0x10)
              {
                uint64_t v484 = (v3516 & 0xFFFFFFF0) + (uint64_t)v478;
                unint64_t v485 = (uint16x8_t *)(v481 + 2 * (v478 + v433 * v482) + 16);
                int32x4_t v486 = 0uLL;
                uint64_t v487 = v3516 & 0xFFFFFFF0;
                unint64_t v488 = (uint16x8_t *)&v12[2];
                int32x4_t v489 = 0uLL;
                int32x4_t v490 = 0uLL;
                int32x4_t v491 = 0uLL;
                do
                {
                  uint16x8_t v492 = v488[-1];
                  uint16x8_t v493 = v485[-1];
                  int32x4_t v489 = (int32x4_t)vmlal_high_u16((uint32x4_t)v489, v493, v492);
                  int32x4_t v486 = (int32x4_t)vmlal_u16((uint32x4_t)v486, *(uint16x4_t *)v493.i8, *(uint16x4_t *)v492.i8);
                  int32x4_t v491 = (int32x4_t)vmlal_high_u16((uint32x4_t)v491, *v485, *v488);
                  int32x4_t v490 = (int32x4_t)vmlal_u16((uint32x4_t)v490, *(uint16x4_t *)v485->i8, *(uint16x4_t *)v488->i8);
                  v488 += 2;
                  v485 += 2;
                  v487 -= 16;
                }
                while (v487);
                unsigned int v480 = vaddvq_s32(vaddq_s32(vaddq_s32(v490, v486), vaddq_s32(v491, v489)));
                uint64_t v483 = v3516 & 0xFFFFFFF0;
              }
              else
              {
                uint64_t v483 = 0;
                unsigned int v480 = 0;
                uint64_t v484 = v478;
              }
              BOOL v494 = (unsigned __int16 *)(v481 + 2 * (v484 + v433 * v482));
              BOOL v495 = (unsigned __int16 *)v12 + v483;
              uint64_t v496 = v3516 - v483;
              do
              {
                int v498 = *v495++;
                int v497 = v498;
                int v499 = *v494++;
                v480 += v499 * v497;
                --v496;
              }
              while (v496);
            }
            v4[v479++] = v480 >> 15;
            ++v478;
          }
          while (v478 != v476 - (v3474 & 0xFFFFFFFE));
        }
        unint64_t v500 = *a2;
        unint64_t v501 = a2[2];
        if (v432 <= 1)
        {
          unint64_t v503 = v501 * v433;
LABEL_278:
          memcpy((void *)(v500 + 2 * v503), v4, 2 * v476);
          ++v433;
          v3507 += 2;
          if (v433 >= *((int *)a1 + 3)) {
            goto LABEL_2310;
          }
          continue;
        }
        break;
      }
      uint64_t v502 = 0;
      unint64_t v503 = v501 * v433;
      uint64_t v504 = v501 * v433 + v476 - 1;
      uint64_t v505 = (int)v476 - 2;
      uint64_t v506 = v3486 + v505 - v476;
      uint64_t v507 = v500 + 2 * (v501 * v433 + v505) - 14;
      unint64_t v508 = v500 + v501 * v3507;
      int v509 = 1;
      unsigned int v510 = 2;
      while (2)
      {
        uint64_t v512 = v510;
        ++v509;
        if (v477 < v476 - 1 - v49)
        {
          unsigned int v513 = 0;
          int v514 = 0;
          goto LABEL_329;
        }
        if (v510 < 0x10)
        {
          uint64_t v515 = 0;
          int v514 = 0;
          goto LABEL_326;
        }
        uint64_t v516 = v510 & 0xFFFFFFF0;
        uint64_t v515 = v512 & 0xFFFFFFF0;
        int32x4_t v517 = 0uLL;
        BOOL v518 = (uint16x8_t *)&v12[2];
        int32x4_t v519 = 0uLL;
        int32x4_t v520 = 0uLL;
        int32x4_t v521 = 0uLL;
        do
        {
          uint16x8_t v522 = v518[-1];
          int32x4_t v519 = (int32x4_t)vaddw_high_u16((uint32x4_t)v519, v522);
          int32x4_t v517 = (int32x4_t)vaddw_u16((uint32x4_t)v517, *(uint16x4_t *)v522.i8);
          int32x4_t v521 = (int32x4_t)vaddw_high_u16((uint32x4_t)v521, *v518);
          int32x4_t v520 = (int32x4_t)vaddw_u16((uint32x4_t)v520, *(uint16x4_t *)v518->i8);
          v518 += 2;
          v516 -= 16;
        }
        while (v516);
        int v514 = vaddvq_s32(vaddq_s32(vaddq_s32(v520, v517), vaddq_s32(v521, v519)));
        unsigned int v513 = v509;
        if (v515 != v512)
        {
LABEL_326:
          float v523 = (unsigned __int16 *)v12 + v515;
          uint64_t v524 = v512 - v515;
          do
          {
            int v525 = *v523++;
            v514 += v525;
            --v524;
          }
          while (v524);
          unsigned int v513 = v509;
        }
LABEL_329:
        unsigned int v526 = v514 * *(unsigned __int16 *)(v500 + 2 * v504);
        if (v477 - v49 <= v505)
        {
          unint64_t v527 = v3486 + v505 - (v502 + v476);
          uint64_t v528 = v513;
          if (v527 < 0x10)
          {
            uint64_t v529 = (int)v476 - 2;
            uint64_t v530 = v528;
            goto LABEL_335;
          }
          unint64_t v531 = v506 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v529 = v505 - (v527 & 0xFFFFFFFFFFFFFFF0);
          uint64_t v530 = (v527 & 0xFFFFFFFFFFFFFFF0) + v528;
          int32x4_t v532 = 0uLL;
          int32x4_t v533 = (int32x4_t)v526;
          float32x4_t v534 = (uint16x8_t *)((char *)v434 + 2 * v528);
          float32x4_t v535 = (int16x8_t *)v507;
          int32x4_t v536 = 0uLL;
          int32x4_t v537 = 0uLL;
          do
          {
            int8x16_t v538 = (int8x16_t)vrev64q_s16(*v535);
            uint16x8_t v539 = (uint16x8_t)vextq_s8(v538, v538, 8uLL);
            int8x16_t v540 = (int8x16_t)vrev64q_s16(v535[-1]);
            uint16x8_t v541 = (uint16x8_t)vextq_s8(v540, v540, 8uLL);
            uint16x8_t v542 = v534[-1];
            int32x4_t v532 = (int32x4_t)vmlal_high_u16((uint32x4_t)v532, v542, v539);
            int32x4_t v533 = (int32x4_t)vmlal_u16((uint32x4_t)v533, *(uint16x4_t *)v542.i8, *(uint16x4_t *)v539.i8);
            int32x4_t v537 = (int32x4_t)vmlal_high_u16((uint32x4_t)v537, *v534, v541);
            int32x4_t v536 = (int32x4_t)vmlal_u16((uint32x4_t)v536, *(uint16x4_t *)v534->i8, *(uint16x4_t *)v541.i8);
            v534 += 2;
            v535 -= 2;
            v531 -= 16;
          }
          while (v531);
          unsigned int v526 = vaddvq_s32(vaddq_s32(vaddq_s32(v536, v533), vaddq_s32(v537, v532)));
          if (v527 != (v527 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_335:
            uint64_t v543 = (unsigned __int16 *)v12 + v530;
            do
            {
              int v544 = *v543++;
              v526 += v544 * *(unsigned __int16 *)(v508 + 2 * v529);
              BOOL v7 = v529-- <= v477 - v49;
            }
            while (!v7);
          }
        }
        unsigned int v511 = v526 >> 15;
        unsigned int v4 = v3521;
        v3521[v477++] = v511;
        unsigned int v510 = v512 + 1;
        ++v502;
        --v506;
        if (v477 >= v476)
        {
          int v432 = v3474;
          goto LABEL_278;
        }
        continue;
      }
    }
  }
  uint64_t v88 = 0;
  int v89 = 0;
LABEL_61:
  uint8x16_t v97 = (unsigned __int16 *)v12 + v88;
  uint64_t v98 = v60 - v88;
  do
  {
    int v99 = *v97++;
    v89 += v99;
    --v98;
  }
  while (v98);
  goto LABEL_63;
}

void vl_dog_create_octave_list_pwin(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 != -1)
  {
    int32x4_t v94 = a3;
    uint64_t v96 = a2;
    if (*a3) {
      goto LABEL_3;
    }
    goto LABEL_33;
  }
  int v35 = *(_DWORD *)(a2 + 12);
  int v36 = (v35 + 1) * *(_DWORD *)(a1 + 8);
  if (v36 >= (v35 + 1) * *(_DWORD *)(a1 + 12)) {
    int v36 = (v35 + 1) * *(_DWORD *)(a1 + 12);
  }
  int v5 = (int)(round(log((double)v36) / 0.693147181 + -2.0) + (double)v35);
  int32x4_t v94 = v3;
  uint64_t v96 = v4;
  if (!*v3)
  {
LABEL_33:
    if (v5 <= 0)
    {
      void *v3 = 0;
      v3[1] = 0;
      v3[2] = v5;
      return;
    }
    uint64_t v37 = v5;
    signed int v38 = malloc_type_malloc(72 * v5, 0x10A004022C67442uLL);
    uint64_t v39 = 0;
    void *v3 = 0;
    v3[1] = v38;
    uint64_t v100 = v37;
    v3[2] = v37;
    while (1)
    {
      while (1)
      {
        uint64_t v40 = *v3;
        uint64_t v41 = v3[2];
        if (v39) {
          break;
        }
        if (*v3 >= v41)
        {
          uint64_t v55 = 2 * v41;
          BOOL v32 = v41 == 0;
          uint64_t v56 = 3;
          if (!v32) {
            uint64_t v56 = v55;
          }
          if (v56 <= v40) {
            uint64_t v57 = v40 + 1;
          }
          else {
            uint64_t v57 = v56;
          }
          if (v57)
          {
            v3[1] = malloc_type_realloc((void *)v3[1], 72 * v57, 0xDAC0ADA8uLL);
            uint64_t v40 = *v3;
          }
          v3[2] = v57;
        }
        void *v3 = v40 + 1;
        uint64_t v58 = v3[1] + 72 * v40;
        *(void *)(v58 + 64) = 0;
        *(_OWORD *)(v58 + 32) = 0u;
        *(_OWORD *)(v58 + 4_Block_object_dispose(&STACK[0x220], 8) = 0u;
        *(_OWORD *)uint64_t v58 = 0u;
        *(_OWORD *)(v58 + 16) = 0u;
        vl_dog_create_octave(a1, v4, v3[1] + 72 * *v3 - 72);
        uint64_t v39 = 1;
        if (v100 == 1) {
          return;
        }
      }
      if (*v3 >= v41)
      {
        uint64_t v42 = 2 * v41;
        BOOL v32 = v41 == 0;
        uint64_t v43 = 3;
        if (!v32) {
          uint64_t v43 = v42;
        }
        if (v43 <= v40) {
          uint64_t v44 = v40 + 1;
        }
        else {
          uint64_t v44 = v43;
        }
        if (v44)
        {
          v3[1] = malloc_type_realloc((void *)v3[1], 72 * v44, 0x1A0CF2CEuLL);
          uint64_t v40 = *v3;
        }
        v3[2] = v44;
      }
      void *v3 = v40 + 1;
      uint64_t v45 = v3[1] + 72 * v40;
      *(void *)(v45 + 64) = 0;
      *(_OWORD *)(v45 + 32) = 0u;
      *(_OWORD *)(v45 + 4_Block_object_dispose(&STACK[0x220], 8) = 0u;
      *(_OWORD *)uint64_t v45 = 0u;
      *(_OWORD *)(v45 + 16) = 0u;
      uint64_t v46 = *v3;
      uint64_t v47 = v3[1];
      uint64_t v48 = *(unsigned int *)(v4 + 4);
      uint64_t v49 = v47 + 72 * (v39 - 1);
      uint64_t v52 = *(void *)(v49 + 48);
      uint64_t v51 = (uint64_t *)(v49 + 48);
      uint64_t v50 = v52;
      uint64_t v53 = *(v51 - 5);
      if (v52 < 1) {
        unsigned int v54 = 0;
      }
      else {
        unsigned int v54 = malloc_type_malloc(4 * v50, 0xFF85D027uLL);
      }
      uint64_t v59 = v46 - 1;
      uint64_t v60 = v47 + 72 * (v46 - 1);
      *(void *)(v60 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
      uint64_t v61 = v60 + 48;
      *(void *)(v61 + _Block_object_dispose(&STACK[0x220], 8) = v54;
      uint64_t v62 = *v51;
      *(void *)(v61 + 16) = *v51;
      if (v62 >= 1)
      {
        bzero(v54, 4 * v62);
        uint64_t v62 = *v51;
      }
      *(void *)uint64_t v61 = v62;
      if (*v51 >= 1) {
        memcpy(*(void **)(v61 + 8), *(const void **)(v47 + 72 * (v39 - 1) + 56), 4 * *v51);
      }
      timeval v63 = (uint64_t *)(v47 + 72 * v59);
      BOOL v64 = (int8x16_t *)(int)v48;
      uint64_t v65 = (int)v48 + 1;
      if ((v48 & 0x80000000) != 0)
      {
        int32x4_t v72 = (void *)(v47 + 72 * v59);
        v72[3] = 0;
        v72[4] = 0;
        v72[5] = v65;
        if (v48 != -1)
        {
          *timeval v63 = 0;
          v63[1] = 0;
          void v63[2] = (int)v48 + 2;
          uint64_t v73 = 2 * ((int)v48 + 2);
          if (v73 <= 1) {
            uint64_t v73 = 1;
          }
          if (v48 == -2) {
            uint64_t v74 = 10;
          }
          else {
            uint64_t v74 = v73;
          }
          int32x4_t v70 = (char *)malloc_type_realloc(0, 24 * v74, 0xBA43F2C6uLL);
          v63[1] = (uint64_t)v70;
          void v63[2] = v74;
          uint64_t v71 = *v63;
          goto LABEL_74;
        }
        uint64_t v69 = 1;
      }
      else
      {
        uint64_t v66 = v65;
        uint64_t v67 = malloc_type_malloc(24 * v65, 0x1010040113C0ABBuLL);
        uint64_t v68 = (void *)(v47 + 72 * v59);
        v68[3] = 0;
        v68[4] = v67;
        v68[5] = v66;
        uint64_t v69 = v48 + 2;
      }
      int32x4_t v70 = (char *)malloc_type_malloc(24 * v69, 0x1010040113C0ABBuLL);
      uint64_t v71 = 0;
      v63[1] = (uint64_t)v70;
      void v63[2] = v69;
LABEL_74:
      uint64_t v75 = v53 + 24 * (int)v48;
      *timeval v63 = v71 + 1;
      uint64_t v76 = &v70[24 * v71];
      *(void *)uint64_t v76 = 0;
      *((void *)v76 + 1) = 0;
      *((void *)v76 + 2) = 0;
      uint64_t v77 = v63[1] + 24 * *v63;
      LODWORD(v76) = *(_DWORD *)(v75 + 8) + (*(int *)(v75 + 8) < 0);
      int v78 = *(_DWORD *)(v75 + 8) / 2;
      int v79 = *(_DWORD *)(v75 + 12) / 2;
      *(_DWORD *)(v77 - 16) = v78;
      *(_DWORD *)(v77 - 12) = v79;
      uint64_t v80 = (unsigned int *)(v77 - 16);
      *((void *)v80 + 1) = (uint64_t)(int)v76 >> 1;
      unint64_t v81 = pmem_alloc_ex(2 * v78 * (uint64_t)(v79 + 16), 0, 0);
      uint64_t v82 = *((void *)v80 + 1);
      unint64_t v83 = (_WORD *)(v81 + 16 * v82);
      *((void *)v80 - 1) = v83;
      uint64_t v84 = v80[1];
      if ((int)v84 >= 1)
      {
        uint64_t v85 = *v80;
        if ((int)v85 >= 1)
        {
          uint64_t v86 = 0;
          int32x4_t v87 = *(__int16 **)v75;
          uint64_t v88 = 2 * v82;
          uint64_t v89 = 4 * *(void *)(v53 + 24 * (int)v64 + 16);
          do
          {
            int32x4_t v90 = v87;
            uint64_t v91 = v83;
            uint64_t v92 = v85;
            do
            {
              __int16 v93 = *v90;
              v90 += 2;
              *v91++ = v93;
              --v92;
            }
            while (v92);
            ++v86;
            unint64_t v83 = (_WORD *)((char *)v83 + v88);
            int32x4_t v87 = (__int16 *)((char *)v87 + v89);
          }
          while (v86 != v84);
        }
      }
      create_pyr(v64, v47 + 72 * v59);
      uint64_t v3 = v94;
      uint64_t v4 = v96;
      if (++v39 == v100) {
        return;
      }
    }
  }
LABEL_3:
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v98 = v5;
    do
    {
      while (1)
      {
        uint64_t v7 = v3[1];
        if (v6) {
          break;
        }
        vl_dog_create_octave(a1, v4, v3[1]);
        uint64_t v6 = 1;
        if (v98 == 1) {
          return;
        }
      }
      double v8 = (void *)(v7 + 72 * v6);
      uint64_t v99 = *(int *)(v4 + 4);
      uint64_t v97 = *(v8 - 8);
      unsigned int v9 = v8 + 6;
      uint64_t v10 = v8[6];
      uint64_t v12 = v8 - 3;
      uint64_t v11 = *(v8 - 3);
      uint64_t v13 = v8[8];
      if (v11 > v13)
      {
        uint64_t v31 = 2 * v13;
        BOOL v32 = v13 == 0;
        uint64_t v33 = 64;
        if (!v32) {
          uint64_t v33 = v31;
        }
        if (v33 <= v11) {
          uint64_t v34 = *(v8 - 3);
        }
        else {
          uint64_t v34 = v33;
        }
        if (v34)
        {
          *(void *)(v7 + 72 * v6 + 56) = malloc_type_realloc(*(void **)(v7 + 72 * v6 + 56), 4 * v34, 0x65DACA68uLL);
          uint64_t v3 = v94;
        }
        v8[8] = v34;
        uint64_t v4 = v96;
        uint64_t v14 = v11 - v10;
        if (v11 <= v10)
        {
LABEL_9:
          uint64_t v15 = *v12;
          *unsigned int v9 = *v12;
          uint64_t v16 = v99;
          if (v15 < 1) {
            goto LABEL_11;
          }
LABEL_10:
          memcpy(*(void **)(v7 + 72 * v6 + 56), *(const void **)(v7 + 72 * (v6 - 1) + 56), 4 * v15);
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v14 = v11 - v10;
        if (v11 <= v10) {
          goto LABEL_9;
        }
      }
      bzero((void *)(*(void *)(v7 + 72 * v6 + 56) + 4 * *v9), 4 * v14);
      uint64_t v15 = *v12;
      *unsigned int v9 = *v12;
      uint64_t v16 = v99;
      if (v15 >= 1) {
        goto LABEL_10;
      }
LABEL_11:
      uint64_t v17 = v8[1];
      uint64_t v18 = *(unsigned int *)(v17 + 12);
      if ((int)v18 >= 1)
      {
        uint64_t v19 = *(unsigned int *)(v17 + 8);
        if ((int)v19 >= 1)
        {
          uint64_t v20 = 0;
          uint64_t v21 = (__int16 **)(v97 + 24 * (int)v16);
          __darwin_time_t v22 = *v21;
          uint64_t v23 = v21[2];
          float v24 = *(_WORD **)v17;
          uint64_t v25 = 2 * *(void *)(v17 + 16);
          uint64_t v26 = 4 * (void)v23;
          do
          {
            double v27 = v22;
            uint64_t v28 = v24;
            uint64_t v29 = v19;
            do
            {
              __int16 v30 = *v27;
              v27 += 2;
              *v28++ = v30;
              --v29;
            }
            while (v29);
            ++v20;
            float v24 = (_WORD *)((char *)v24 + v25);
            __darwin_time_t v22 = (__int16 *)((char *)v22 + v26);
          }
          while (v20 != v18);
        }
      }
      create_pyr2(v16, (void *)(v7 + 72 * v6++));
    }
    while (v6 != v98);
  }
}

int8x16_t *vl_dog_create_octave(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 12))
  {
    printf("%sAborting : ", (const char *)&unk_21BB738AE);
    puts("not implemented!");
    putchar(10);
    __assert_rtn("vl_dog_create_octave", "vl_dog.c", 578, "0");
  }
  float v6 = *(float *)a2;
  double v7 = fmax((float)(v6 * v6) - (float)(*(float *)(a2 + 24) * *(float *)(a2 + 24)) * 1.0, 0.01);
  int v8 = *(_DWORD *)(a2 + 4);
  long double v9 = exp2(1.0 / (double)v8);
  *(void *)(a3 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
  uint64_t v10 = *(void *)(a3 + 64);
  if (v10 >= 1)
  {
    uint64_t v11 = *(float **)(a3 + 56);
    uint64_t v12 = 1;
    *(void *)(a3 + 4_Block_object_dispose(&STACK[0x220], 8) = 1;
    float *v11 = v6;
    double v13 = sqrt(v7);
    if (v8 < -1) {
      goto LABEL_24;
    }
    goto LABEL_11;
  }
  uint64_t v14 = 2 * v10;
  if (2 * v10 <= 1) {
    uint64_t v14 = 1;
  }
  if (v10) {
    uint64_t v10 = v14;
  }
  else {
    uint64_t v10 = 64;
  }
  uint64_t v11 = (float *)malloc_type_realloc(*(void **)(a3 + 56), 4 * v10, 0x9C7F3E90uLL);
  *(void *)(a3 + 56) = v11;
  *(void *)(a3 + 64) = v10;
  uint64_t v15 = *(void *)(a3 + 48);
  uint64_t v12 = v15 + 1;
  *(void *)(a3 + 4_Block_object_dispose(&STACK[0x220], 8) = v15 + 1;
  v11[v15] = v6;
  double v13 = sqrt(v7);
  if (v8 >= -1)
  {
LABEL_11:
    int v16 = 0;
    double v17 = v6;
    if (v8 + 2 <= 1) {
      int v18 = 1;
    }
    else {
      int v18 = v8 + 2;
    }
    do
    {
      double v20 = pow(v9, (double)v16);
      if (v12 >= v10)
      {
        uint64_t v21 = 2 * v10;
        if (!v10) {
          uint64_t v21 = 64;
        }
        if (v21 <= v12) {
          uint64_t v10 = v12 + 1;
        }
        else {
          uint64_t v10 = v21;
        }
        if (v10)
        {
          uint64_t v11 = (float *)malloc_type_realloc(v11, 4 * v10, 0xBB373182uLL);
          *(void *)(a3 + 56) = v11;
          uint64_t v12 = *(void *)(a3 + 48);
        }
        *(void *)(a3 + 64) = v10;
      }
      float v19 = sqrt(-(v20 * v17 * (v20 * v17) - v9 * (v20 * v17 * (v20 * v17)) * v9));
      v11[v12++] = v19;
      *(void *)(a3 + 4_Block_object_dispose(&STACK[0x220], 8) = v12;
      ++v16;
    }
    while (v18 != v16);
  }
LABEL_24:
  if (*(void *)a3)
  {
    float v22 = v13;
    create_initial_image(a1, *(uint64_t **)(a3 + 8), v22);
    uint64_t v23 = *(unsigned int *)(a2 + 4);
    return (int8x16_t *)create_pyr2(v23, (void *)a3);
  }
  else
  {
    uint64_t v25 = *(int *)(a1 + 12);
    DWORD2(v3_Block_object_dispose(&STACK[0x220], 8) = *(_DWORD *)(a1 + 8);
    HIDWORD(v3_Block_object_dispose(&STACK[0x220], 8) = v25;
    uint64_t v39 = SDWORD2(v38);
    *(void *)&long long v38 = pmem_alloc_ex(2 * SDWORD2(v38) * (v25 + 16), 0, 0) + 16 * SDWORD2(v38);
    float v26 = v13;
    create_initial_image(a1, (uint64_t *)&v38, v26);
    int v27 = *(_DWORD *)(a2 + 4);
    if (v27 < 0)
    {
      uint64_t v28 = 0;
    }
    else
    {
      uint64_t v28 = malloc_type_malloc(24 * v27 + 24, 0x1010040113C0ABBuLL);
      int v27 = *(_DWORD *)(a2 + 4);
    }
    uint64_t v29 = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = v28;
    *(void *)(a3 + 40) = v27 + 1;
    if (v27 >= -1) {
      uint64_t v29 = (char *)malloc_type_malloc(24 * (v27 + 2), 0x1010040113C0ABBuLL);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = v29;
    uint64_t v30 = *(int *)(a2 + 4);
    uint64_t v31 = v30 + 2;
    *(void *)(a3 + 16) = v30 + 2;
    if ((int)v30 > -2)
    {
      uint64_t v34 = 0;
    }
    else
    {
      uint64_t v32 = 2 * v31;
      if (2 * v31 <= 1) {
        uint64_t v32 = 1;
      }
      if (v30 == -2) {
        uint64_t v33 = 10;
      }
      else {
        uint64_t v33 = v32;
      }
      uint64_t v29 = (char *)malloc_type_realloc(v29, 24 * v33, 0xA085A6C4uLL);
      *(void *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = v29;
      *(void *)(a3 + 16) = v33;
      uint64_t v34 = *(void *)a3;
    }
    *(void *)a3 = v34 + 1;
    int v35 = &v29[24 * v34];
    long long v36 = v38;
    *((void *)v35 + 2) = v39;
    *(_OWORD *)int v35 = v36;
    uint64_t v37 = (int8x16_t *)*(unsigned int *)(a2 + 4);
    return create_pyr(v37, a3);
  }
}

uint64_t vl_dog_extract_keypoints_pwin()
{
  uint64_t result = MEMORY[0x270FA5388]();
  uint64_t v8 = v7;
  uint64_t v635 = (uint64_t *)result;
  uint64_t v670 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v647 = v2;
  uint64_t v657 = v1;
  if (v9 > 4999)
  {
    uint64_t v12 = *(void *)(v2 + 16);
    if (v12 > 4999) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v10 = 2 * v9;
    if (v10 <= 5000) {
      uint64_t v11 = 5000;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(v1 + 8), 288 * v11, 0xFC4D1E11uLL);
    uint64_t v2 = v647;
    *(void *)(v657 + _Block_object_dispose(&STACK[0x220], 8) = result;
    *(void *)(v657 + 16) = v11;
    uint64_t v12 = *(void *)(v647 + 16);
    if (v12 > 4999)
    {
LABEL_6:
      double v13 = v635;
      if (*v635 < 1) {
        goto LABEL_585;
      }
      goto LABEL_15;
    }
  }
  uint64_t v14 = 2 * v12;
  if (2 * v12 <= 5000) {
    uint64_t v14 = 5000;
  }
  if (v12) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 5000;
  }
  uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(v2 + 8), 8 * v15, 0x21AA444CuLL);
  *(void *)(v647 + _Block_object_dispose(&STACK[0x220], 8) = result;
  *(void *)(v647 + 16) = v15;
  double v13 = v635;
  if (*v635 >= 1)
  {
LABEL_15:
    uint64_t result = 0;
    float v16 = 0.5;
    float v17 = 4.0;
    float v18 = 6.0;
    float v19 = -23.0;
    double v20 = 1.0;
    do
    {
      uint64_t v21 = v13[1];
      int v22 = *(_DWORD *)(v8 + 4);
      uint64_t v636 = result;
      uint64_t v637 = v21;
      if (v22 >= 1)
      {
        uint64_t v23 = 0;
        uint64_t v645 = 0;
        int ptr = 0;
        uint64_t v659 = 0;
        float v24 = floorf((float)((float)((float)(*(float *)(v8 + 16) * v16) / (float)v22) * 255.0) * 256.0);
        uint64_t v25 = (void *)(v21 + 72 * result + 32);
        float v26 = (float)(int)result;
        int v27 = *(_DWORD *)(v8 + 28);
        while (1)
        {
          uint64_t v28 = v23;
          uint64_t v29 = *v25;
          uint64_t v30 = *v25 + 24 * v23++;
          uint64_t v31 = (_DWORD *)(v30 + 36);
          int v32 = *(_DWORD *)(v30 + 36);
          if (v27 < v32 - v27) {
            break;
          }
LABEL_21:
          if (v23 >= v22) {
            goto LABEL_135;
          }
        }
        uint64_t v33 = (uint64_t *)(v30 + 24);
        uint64_t v34 = (void *)(v30 + 48);
        uint64_t v35 = v29 + 24 * v23;
        int v38 = *(_DWORD *)(v35 + 8);
        uint64_t v37 = (int *)(v35 + 8);
        int v36 = v38;
        uint64_t v39 = (uint64_t *)(v29 + 24 * v28 + 16);
        uint64_t v40 = (void *)(v29 + 24 * (v28 + 2) + 16);
        uint64_t v41 = v27;
        while (2)
        {
          while (v27 >= v36 - v27)
          {
            if (++v41 >= v32 - v27)
            {
LABEL_20:
              int v22 = *(_DWORD *)(v8 + 4);
              goto LABEL_21;
            }
          }
          uint64_t v42 = v41 - 1;
          uint64_t v43 = v41 + 1;
          uint64_t v44 = v27;
LABEL_31:
          uint64_t v45 = *v33;
          uint64_t v46 = *(void *)(v30 + 40);
          uint64_t v47 = v46 * v41;
          unsigned int v48 = *(unsigned __int16 *)(*v33 + 2 * (v46 * v41 + v44));
          *(float *)&double v49 = (float)v48;
          float v50 = fabsf((float)v48 + -32768.0);
          if (v50 >= v24)
          {
            if (v48 <= 0x8000)
            {
              if ((v48 & 0x8000) == 0)
              {
                uint64_t v91 = *(void *)v30;
                uint64_t v92 = v44 - 1;
                uint64_t v93 = *v39;
                uint64_t v94 = *v39 * v42;
                LOWORD(v50) = *(_WORD *)(*(void *)v30 + 2 * (v94 + v44 - 1));
                float v95 = (float)LODWORD(v50);
                if (*(float *)&v49 < v95)
                {
                  LOWORD(v95) = *(_WORD *)(v91 + 2 * (v94 + v44));
                  float v96 = (float)LODWORD(v95);
                  if (*(float *)&v49 < v96)
                  {
                    uint64_t v97 = v44 + 1;
                    LOWORD(v96) = *(_WORD *)(v91 + 2 * (v94 + v44 + 1));
                    float v98 = (float)LODWORD(v96);
                    if (*(float *)&v49 < v98)
                    {
                      uint64_t v99 = v93 * v41;
                      LOWORD(v9_Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v91 + 2 * (v93 * v41 + v92));
                      float v100 = (float)LODWORD(v98);
                      if (*(float *)&v49 < v100)
                      {
                        LOWORD(v100) = *(_WORD *)(v91 + 2 * (v99 + v44));
                        float v101 = (float)LODWORD(v100);
                        if (*(float *)&v49 < v101)
                        {
                          LOWORD(v101) = *(_WORD *)(v91 + 2 * (v99 + v97));
                          float v102 = (float)LODWORD(v101);
                          if (*(float *)&v49 < v102)
                          {
                            uint64_t v103 = v93 * v43;
                            LOWORD(v102) = *(_WORD *)(v91 + 2 * (v103 + v92));
                            float v104 = (float)LODWORD(v102);
                            if (*(float *)&v49 < v104)
                            {
                              LOWORD(v104) = *(_WORD *)(v91 + 2 * (v103 + v44));
                              float v105 = (float)LODWORD(v104);
                              if (*(float *)&v49 < v105)
                              {
                                LOWORD(v105) = *(_WORD *)(v91 + 2 * (v103 + v97));
                                float v106 = (float)LODWORD(v105);
                                if (*(float *)&v49 < v106)
                                {
                                  uint64_t v107 = v46 * v42;
                                  LOWORD(v106) = *(_WORD *)(v45 + 2 * (v46 * v42 + v92));
                                  float v108 = (float)LODWORD(v106);
                                  if (*(float *)&v49 < v108)
                                  {
                                    LOWORD(v10_Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v45 + 2 * (v107 + v44));
                                    float v109 = (float)LODWORD(v108);
                                    if (*(float *)&v49 < v109)
                                    {
                                      LOWORD(v109) = *(_WORD *)(v45 + 2 * (v107 + v97));
                                      float v110 = (float)LODWORD(v109);
                                      if (*(float *)&v49 < v110)
                                      {
                                        LOWORD(v110) = *(_WORD *)(v45 + 2 * (v47 + v92));
                                        float v111 = (float)LODWORD(v110);
                                        if (*(float *)&v49 < v111)
                                        {
                                          LOWORD(v111) = *(_WORD *)(v45 + 2 * (v47 + v97));
                                          float v112 = (float)LODWORD(v111);
                                          if (*(float *)&v49 < v112)
                                          {
                                            uint64_t v113 = v46 * v43;
                                            LOWORD(v112) = *(_WORD *)(v45 + 2 * (v113 + v92));
                                            float v114 = (float)LODWORD(v112);
                                            if (*(float *)&v49 < v114)
                                            {
                                              LOWORD(v114) = *(_WORD *)(v45 + 2 * (v113 + v44));
                                              float v115 = (float)LODWORD(v114);
                                              if (*(float *)&v49 < v115)
                                              {
                                                LOWORD(v115) = *(_WORD *)(v45 + 2 * (v113 + v97));
                                                float v116 = (float)LODWORD(v115);
                                                if (*(float *)&v49 < v116)
                                                {
                                                  uint64_t v117 = *v34;
                                                  uint64_t v118 = *v40;
                                                  uint64_t v119 = *v40 * v42;
                                                  LOWORD(v116) = *(_WORD *)(*v34 + 2 * (v119 + v92));
                                                  float v120 = (float)LODWORD(v116);
                                                  if (*(float *)&v49 < v120)
                                                  {
                                                    LOWORD(v120) = *(_WORD *)(v117 + 2 * (v119 + v44));
                                                    float v121 = (float)LODWORD(v120);
                                                    if (*(float *)&v49 < v121)
                                                    {
                                                      LOWORD(v121) = *(_WORD *)(v117 + 2 * (v119 + v97));
                                                      float v122 = (float)LODWORD(v121);
                                                      if (*(float *)&v49 < v122)
                                                      {
                                                        uint64_t v123 = v118 * v41;
                                                        LOWORD(v122) = *(_WORD *)(v117 + 2 * (v118 * v41 + v92));
                                                        float v124 = (float)LODWORD(v122);
                                                        if (*(float *)&v49 < v124)
                                                        {
                                                          LOWORD(v124) = *(_WORD *)(v117 + 2 * (v123 + v44));
                                                          float v125 = (float)LODWORD(v124);
                                                          if (*(float *)&v49 < v125)
                                                          {
                                                            LOWORD(v125) = *(_WORD *)(v117 + 2 * (v123 + v97));
                                                            float v126 = (float)LODWORD(v125);
                                                            if (*(float *)&v49 < v126)
                                                            {
                                                              uint64_t v127 = v118 * v43;
                                                              LOWORD(v126) = *(_WORD *)(v117 + 2 * (v127 + v92));
                                                              float v128 = (float)LODWORD(v126);
                                                              if (*(float *)&v49 < v128)
                                                              {
                                                                LOWORD(v12_Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v117 + 2 * (v127 + v44));
                                                                float v129 = (float)LODWORD(v128);
                                                                if (*(float *)&v49 < v129)
                                                                {
                                                                  LOWORD(v129) = *(_WORD *)(v117 + 2 * (v127 + v97));
                                                                  float v90 = (float)LODWORD(v129);
                                                                  if (*(float *)&v49 < v90) {
                                                                    goto LABEL_87;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              uint64_t v51 = *(void *)v30;
              uint64_t v52 = v44 - 1;
              uint64_t v53 = *v39;
              uint64_t v54 = *v39 * v42;
              LOWORD(v50) = *(_WORD *)(*(void *)v30 + 2 * (v54 + v44 - 1));
              float v55 = (float)LODWORD(v50);
              if (*(float *)&v49 > v55)
              {
                LOWORD(v55) = *(_WORD *)(v51 + 2 * (v54 + v44));
                float v56 = (float)LODWORD(v55);
                if (*(float *)&v49 > v56)
                {
                  uint64_t v57 = v44 + 1;
                  LOWORD(v56) = *(_WORD *)(v51 + 2 * (v54 + v44 + 1));
                  float v58 = (float)LODWORD(v56);
                  if (*(float *)&v49 > v58)
                  {
                    uint64_t v59 = v53 * v41;
                    LOWORD(v5_Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v51 + 2 * (v53 * v41 + v52));
                    float v60 = (float)LODWORD(v58);
                    if (*(float *)&v49 > v60)
                    {
                      LOWORD(v60) = *(_WORD *)(v51 + 2 * (v59 + v44));
                      float v61 = (float)LODWORD(v60);
                      if (*(float *)&v49 > v61)
                      {
                        LOWORD(v61) = *(_WORD *)(v51 + 2 * (v59 + v57));
                        float v62 = (float)LODWORD(v61);
                        if (*(float *)&v49 > v62)
                        {
                          uint64_t v63 = v53 * v43;
                          LOWORD(v62) = *(_WORD *)(v51 + 2 * (v63 + v52));
                          float v64 = (float)LODWORD(v62);
                          if (*(float *)&v49 > v64)
                          {
                            LOWORD(v64) = *(_WORD *)(v51 + 2 * (v63 + v44));
                            float v65 = (float)LODWORD(v64);
                            if (*(float *)&v49 > v65)
                            {
                              LOWORD(v65) = *(_WORD *)(v51 + 2 * (v63 + v57));
                              float v66 = (float)LODWORD(v65);
                              if (*(float *)&v49 > v66)
                              {
                                uint64_t v67 = v46 * v42;
                                LOWORD(v66) = *(_WORD *)(v45 + 2 * (v46 * v42 + v52));
                                float v68 = (float)LODWORD(v66);
                                if (*(float *)&v49 > v68)
                                {
                                  LOWORD(v6_Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v45 + 2 * (v67 + v44));
                                  float v69 = (float)LODWORD(v68);
                                  if (*(float *)&v49 > v69)
                                  {
                                    LOWORD(v69) = *(_WORD *)(v45 + 2 * (v67 + v57));
                                    float v70 = (float)LODWORD(v69);
                                    if (*(float *)&v49 > v70)
                                    {
                                      LOWORD(v70) = *(_WORD *)(v45 + 2 * (v47 + v52));
                                      float v71 = (float)LODWORD(v70);
                                      if (*(float *)&v49 > v71)
                                      {
                                        LOWORD(v71) = *(_WORD *)(v45 + 2 * (v47 + v57));
                                        float v72 = (float)LODWORD(v71);
                                        if (*(float *)&v49 > v72)
                                        {
                                          uint64_t v73 = v46 * v43;
                                          LOWORD(v72) = *(_WORD *)(v45 + 2 * (v73 + v52));
                                          float v74 = (float)LODWORD(v72);
                                          if (*(float *)&v49 > v74)
                                          {
                                            LOWORD(v74) = *(_WORD *)(v45 + 2 * (v73 + v44));
                                            float v75 = (float)LODWORD(v74);
                                            if (*(float *)&v49 > v75)
                                            {
                                              LOWORD(v75) = *(_WORD *)(v45 + 2 * (v73 + v57));
                                              float v76 = (float)LODWORD(v75);
                                              if (*(float *)&v49 > v76)
                                              {
                                                uint64_t v77 = *v34;
                                                uint64_t v78 = *v40;
                                                uint64_t v79 = *v40 * v42;
                                                LOWORD(v76) = *(_WORD *)(*v34 + 2 * (v79 + v52));
                                                float v80 = (float)LODWORD(v76);
                                                if (*(float *)&v49 > v80)
                                                {
                                                  LOWORD(v80) = *(_WORD *)(v77 + 2 * (v79 + v44));
                                                  float v81 = (float)LODWORD(v80);
                                                  if (*(float *)&v49 > v81)
                                                  {
                                                    LOWORD(v81) = *(_WORD *)(v77 + 2 * (v79 + v57));
                                                    float v82 = (float)LODWORD(v81);
                                                    if (*(float *)&v49 > v82)
                                                    {
                                                      uint64_t v83 = v78 * v41;
                                                      LOWORD(v82) = *(_WORD *)(v77 + 2 * (v78 * v41 + v52));
                                                      float v84 = (float)LODWORD(v82);
                                                      if (*(float *)&v49 > v84)
                                                      {
                                                        LOWORD(v84) = *(_WORD *)(v77 + 2 * (v83 + v44));
                                                        float v85 = (float)LODWORD(v84);
                                                        if (*(float *)&v49 > v85)
                                                        {
                                                          LOWORD(v85) = *(_WORD *)(v77 + 2 * (v83 + v57));
                                                          float v86 = (float)LODWORD(v85);
                                                          if (*(float *)&v49 > v86)
                                                          {
                                                            uint64_t v87 = v78 * v43;
                                                            LOWORD(v86) = *(_WORD *)(v77 + 2 * (v87 + v52));
                                                            float v88 = (float)LODWORD(v86);
                                                            if (*(float *)&v49 > v88)
                                                            {
                                                              LOWORD(v8_Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v77 + 2 * (v87 + v44));
                                                              float v89 = (float)LODWORD(v88);
                                                              if (*(float *)&v49 > v89)
                                                              {
                                                                LOWORD(v89) = *(_WORD *)(v77 + 2 * (v87 + v57));
                                                                float v90 = (float)LODWORD(v89);
                                                                if (*(float *)&v49 > v90)
                                                                {
LABEL_87:
                                                                  float v623 = v26;
                                                                  uint64_t v130 = *v25;
                                                                  int v131 = 4;
                                                                  int v132 = v44;
                                                                  int v133 = v41;
                                                                  int v134 = v23;
                                                                  uint64_t v631 = v25;
                                                                  uint64_t v633 = v23;
                                                                  uint64_t v627 = *v25;
                                                                  uint16x8_t v629 = v31;
                                                                  unint64_t v642 = v34;
                                                                  float32x4_t v639 = v40;
                                                                  while (1)
                                                                  {
                                                                    int v648 = v131;
                                                                    uint64_t v135 = (uint64_t *)(v130 + 24 * v134);
                                                                    uint64_t v136 = *(v135 - 3);
                                                                    uint16x4_t v626 = v135 - 3;
                                                                    uint64_t v137 = v135[3];
                                                                    uint16x4_t v624 = v135 + 3;
                                                                    uint64_t v138 = *(v135 - 1);
                                                                    uint64_t v139 = *v135;
                                                                    int v140 = v132;
                                                                    int v141 = v133;
                                                                    uint64_t v142 = v135[2];
                                                                    uint64_t v143 = v135[5];
                                                                    uint64_t v144 = v132 - 1;
                                                                    uint64_t v145 = v133 - 1;
                                                                    LOWORD(v49) = *(_WORD *)(*v135
                                                                                           + 2 * (v142 * v145 + v144));
                                                                    float v146 = (float)LODWORD(v49);
                                                                    uint64_t v147 = v140;
                                                                    LOWORD(v49) = *(_WORD *)(*v135
                                                                                           + 2 * (v142 * v145 + v140));
                                                                    *(float *)&double v49 = (float)LODWORD(v49);
                                                                    LOWORD(v90) = *(_WORD *)(v136
                                                                                           + 2 * (v140 + v138 * v145));
                                                                    float v148 = (float)LODWORD(v90);
                                                                    LOWORD(v90) = *(_WORD *)(v137
                                                                                           + 2 * (v140 + v143 * v145));
                                                                    float v149 = (float)LODWORD(v90);
                                                                    int v662 = v140;
                                                                    uint64_t v150 = v140 + 1;
                                                                    LOWORD(v90) = *(_WORD *)(*v135
                                                                                           + 2 * (v142 * v145 + v150));
                                                                    float v151 = (float)LODWORD(v90);
                                                                    uint64_t v152 = v141;
                                                                    uint64_t v153 = v142 * v141;
                                                                    uint64_t v154 = v138 * v141;
                                                                    uint64_t v155 = v143 * v141;
                                                                    LOWORD(v90) = *(_WORD *)(*v135 + 2 * (v153 + v144));
                                                                    float v156 = (float)LODWORD(v90);
                                                                    LOWORD(v26) = *(_WORD *)(v136 + 2 * (v154 + v144));
                                                                    float v157 = (float)LODWORD(v26);
                                                                    LOWORD(v26) = *(_WORD *)(v137 + 2 * (v155 + v144));
                                                                    float v158 = (float)LODWORD(v26);
                                                                    LOWORD(v26) = *(_WORD *)(*v135 + 2 * (v153 + v147));
                                                                    float v159 = (float)LODWORD(v26);
                                                                    LOWORD(v26) = *(_WORD *)(v136 + 2 * (v154 + v147));
                                                                    float v160 = (float)LODWORD(v26);
                                                                    LOWORD(v3) = *(_WORD *)(v137 + 2 * (v155 + v147));
                                                                    *(float *)&double v3 = (float)LODWORD(v3);
                                                                    LOWORD(v4) = *(_WORD *)(*v135 + 2 * (v153 + v150));
                                                                    *(float *)&double v4 = (float)LODWORD(v4);
                                                                    LOWORD(v5) = *(_WORD *)(v136 + 2 * (v154 + v150));
                                                                    float v161 = (float)LODWORD(v5);
                                                                    LOWORD(v5) = *(_WORD *)(v137 + 2 * (v155 + v150));
                                                                    float v162 = (float)LODWORD(v5);
                                                                    int v653 = v141;
                                                                    uint64_t v163 = v141 + 1;
                                                                    LOWORD(v5) = *(_WORD *)(*v135
                                                                                          + 2 * (v142 * v163 + v144));
                                                                    float v164 = (float)LODWORD(v5);
                                                                    LOWORD(v5) = *(_WORD *)(*v135
                                                                                          + 2 * (v142 * v163 + v147));
                                                                    LOWORD(v6) = *(_WORD *)(v136
                                                                                          + 2 * (v147 + v138 * v163));
                                                                    *(float *)&double v5 = (float)LODWORD(v5);
                                                                    float v165 = (float)LODWORD(v6);
                                                                    LOWORD(v6) = *(_WORD *)(v137
                                                                                          + 2 * (v147 + v143 * v163));
                                                                    float v166 = (float)LODWORD(v6);
                                                                    LOWORD(v6) = *(_WORD *)(*v135
                                                                                          + 2 * (v142 * v163 + v150));
                                                                    float v167 = (float)((float)(v156 + *(float *)&v4)
                                                                                 + (float)(v159 * -2.0))
                                                                         * 0.000015319;
                                                                    float v168 = (float)((float)((float)((float)((float)LODWORD(v6) - v164)
                                                                                                 - v151)
                                                                                         + v146)
                                                                                 * 0.25)
                                                                         * 0.000015319;
                                                                    float v169 = (float)((float)((float)((float)(v162 - v158)
                                                                                                 - v161)
                                                                                         + v157)
                                                                                 * 0.25)
                                                                         * 0.000015319;
                                                                    float v170 = (float)((float)(*(float *)&v49 + *(float *)&v5)
                                                                                 + (float)(v159 * -2.0))
                                                                         * 0.000015319;
                                                                    float v171 = (float)((float)((float)((float)(v166 - v149)
                                                                                                 - v165)
                                                                                         + v148)
                                                                                 * 0.25)
                                                                         * 0.000015319;
                                                                    float v172 = (float)((float)(v160 + *(float *)&v3)
                                                                                 + (float)(v159 * -2.0))
                                                                         * 0.000015319;
                                                                    float v173 = (float)(v172 * v170) - (float)(v171 * v171);
                                                                    float v174 = (float)(v171 * v168) - (float)(v170 * v169);
                                                                    float v175 = (float)((float)(v167 * v173)
                                                                                 - (float)((float)((float)(v172 * v168)
                                                                                                 - (float)(v171 * v169))
                                                                                         * v168))
                                                                         + (float)(v169 * v174);
                                                                    float v176 = 0.0;
                                                                    float v177 = 0.0;
                                                                    float v178 = 0.0;
                                                                    float v179 = 0.0;
                                                                    float v180 = 0.0;
                                                                    float v181 = 0.0;
                                                                    float v182 = 0.0;
                                                                    float v183 = 0.0;
                                                                    float v184 = 0.0;
                                                                    if (v175 != 0.0)
                                                                    {
                                                                      float v176 = v173 * (float)(1.0 / v175);
                                                                      float v177 = (float)(1.0 / v175)
                                                                           * (float)-(float)((float)(v172 * v168)
                                                                                           - (float)(v171 * v169));
                                                                      float v178 = v174 * (float)(1.0 / v175);
                                                                      float v179 = -(float)((float)((float)(v172 * v168)
                                                                                            - (float)(v169 * v171))
                                                                                    * (float)(1.0 / v175));
                                                                      float v180 = (float)((float)(v172 * v167)
                                                                                   - (float)(v169 * v169))
                                                                           * (float)(1.0 / v175);
                                                                      float v181 = -(float)((float)((float)(v171 * v167)
                                                                                            - (float)(v168 * v169))
                                                                                    * (float)(1.0 / v175));
                                                                      float v182 = (float)((float)(v171 * v168)
                                                                                   - (float)(v169 * v170))
                                                                           * (float)(1.0 / v175);
                                                                      float v183 = -(float)((float)((float)(v171 * v167)
                                                                                            - (float)(v169 * v168))
                                                                                    * (float)(1.0 / v175));
                                                                      float v184 = (float)((float)(v170 * v167)
                                                                                   - (float)(v168 * v168))
                                                                           * (float)(1.0 / v175);
                                                                    }
                                                                    int v185 = v134;
                                                                    float v186 = (float)((float)(*(float *)&v4 - v156) * v16)
                                                                         * 0.000015319;
                                                                    float v187 = (float)((float)(*(float *)&v5 - *(float *)&v49)
                                                                                 * v16)
                                                                         * 0.000015319;
                                                                    float v188 = (float)((float)(*(float *)&v3 - v160) * v16)
                                                                         * 0.000015319;
                                                                    float v189 = (float)((float)((float)(v176 * v186) + 0.0)
                                                                                 + (float)(v177 * v187))
                                                                         + (float)(v178 * v188);
                                                                    float v190 = (float)((float)((float)(v179 * v186) + 0.0)
                                                                                 + (float)(v180 * v187))
                                                                         + (float)(v181 * v188);
                                                                    float v191 = (float)((float)((float)(v182 * v186) + 0.0)
                                                                                 + (float)(v183 * v187))
                                                                         + (float)(v184 * v188);
                                                                    float v26 = -v189;
                                                                    float v90 = -v190;
                                                                    float v192 = -v191;
                                                                    float v193 = fabsf(-v190);
                                                                    float v194 = fabsf(-v191);
                                                                    BOOL v195 = fabsf(v189) < v16 && v193 < v16;
                                                                    if (v195 && v194 < v16) {
                                                                      break;
                                                                    }
                                                                    double v6 = -0.5;
                                                                    if (v189 >= 0.0) {
                                                                      double v5 = -0.5;
                                                                    }
                                                                    else {
                                                                      double v5 = 0.5;
                                                                    }
                                                                    if (v190 >= 0.0) {
                                                                      double v4 = -0.5;
                                                                    }
                                                                    else {
                                                                      double v4 = 0.5;
                                                                    }
                                                                    double v3 = v192;
                                                                    if (v191 >= 0.0) {
                                                                      double v197 = -0.5;
                                                                    }
                                                                    else {
                                                                      double v197 = 0.5;
                                                                    }
                                                                    v134 += (int)(v197 + v3);
                                                                    uint64_t v34 = v642;
                                                                    uint64_t v40 = v639;
                                                                    if (v134 < 1)
                                                                    {
                                                                      uint64_t result = v636;
                                                                      uint64_t v21 = v637;
                                                                      float v17 = 4.0;
                                                                      float v18 = 6.0;
                                                                      uint64_t v25 = v631;
                                                                      uint64_t v23 = v633;
                                                                      float v26 = v623;
                                                                      uint64_t v31 = v629;
                                                                      goto LABEL_30;
                                                                    }
                                                                    int v132 = v662 + (int)(v5 + v26);
                                                                    BOOL v198 = v134 > *(_DWORD *)(v8 + 4) || v132 < v27;
                                                                    uint64_t result = v636;
                                                                    uint64_t v21 = v637;
                                                                    float v17 = 4.0;
                                                                    float v18 = 6.0;
                                                                    uint64_t v25 = v631;
                                                                    uint64_t v23 = v633;
                                                                    uint64_t v31 = v629;
                                                                    if (!v198)
                                                                    {
                                                                      double v49 = v4 + v90;
                                                                      int v133 = v653 + (int)v49;
                                                                      uint64_t v130 = v627;
                                                                      if (v132 < *(_DWORD *)(v627 + 24 * v185 + 8)
                                                                                - v27
                                                                        && v133 >= v27)
                                                                      {
                                                                        BOOL v200 = v133 >= *(_DWORD *)(v627
                                                                                                 + 24 * v185
                                                                                                 + 12)
                                                                                     - v27
                                                                            || v648 == 0;
                                                                        int v131 = v648 - 1;
                                                                        if (!v200) {
                                                                          continue;
                                                                        }
                                                                      }
                                                                    }
                                                                    float v26 = v623;
                                                                    goto LABEL_30;
                                                                  }
                                                                  uint64_t v649 = v134;
                                                                  uint64_t v201 = v135[2];
                                                                  int v202 = *(unsigned __int16 *)(v139
                                                                                             + 2 * (v201 * v141 + v150));
                                                                  int v203 = *(unsigned __int16 *)(v139
                                                                                             + 2 * (v201 * v141 + v144));
                                                                  uint64_t v204 = v201 * v163;
                                                                  int v205 = *(unsigned __int16 *)(v139 + 2 * (v204 + v147));
                                                                  uint64_t v206 = v201 * v145;
                                                                  int v207 = *(unsigned __int16 *)(v139
                                                                                             + 2 * (v201 * v145 + v147));
                                                                  *(float *)&double v4 = (float)(v202 - v203) * 0.0000076593;
                                                                  *(float *)&double v6 = (float)(v205 - v207) * 0.0000076593;
                                                                  *(float *)&double v5 = (float)(*(unsigned __int16 *)(v137 + 2 * (v147 + v624[2] * v152))
                                                                                        - *(unsigned __int16 *)(v136 + 2 * (v147 + v626[2] * v152)))
                                                                                * 0.0000076593;
                                                                  float v208 = (float)((float)(*(float *)&v6 * v90)
                                                                               + (float)(*(float *)&v4 * v26))
                                                                       + (float)(*(float *)&v5 * v192);
                                                                  int v209 = *(unsigned __int16 *)(v139
                                                                                             + 2 * (v201 * v152 + v147));
                                                                  WORD1(v3) = 14208;
                                                                  int v210 = *(_DWORD *)(v8 + 4);
                                                                  if ((double)v210
                                                                     * fabsf((float)(v208 * v16)+ (float)((float)(v209 - 0x8000) * 0.000015319)) < *(float *)(v8 + 16))goto LABEL_130;
                                                                  int v211 = 2 * v209;
                                                                  float v212 = (float)(v203 + v202 - v211) * 0.000015319;
                                                                  *(float *)&double v3 = (float)(v207 + v205 - v211)
                                                                                * 0.000015319;
                                                                  LODWORD(v5) = 0.25;
                                                                  *(float *)&double v4 = (float)(*(unsigned __int16 *)(v139 + 2 * (v206 + v144))
                                                                                        - (*(unsigned __int16 *)(v139 + 2 * (v204 + v144))
                                                                                         + *(unsigned __int16 *)(v139 + 2 * (v206 + v150)))
                                                                                        + *(unsigned __int16 *)(v139 + 2 * (v204 + v150)))
                                                                                * 0.25;
                                                                  float v213 = (float)(v212 * *(float *)&v3)
                                                                       - (float)((float)(*(float *)&v4 * 0.000015319)
                                                                               * (float)(*(float *)&v4 * 0.000015319));
                                                                  if (v213 <= 0.0
                                                                    || (int v214 = *(_DWORD *)(v8 + 20),
                                                                        float v215 = (float)((float)(v212 + *(float *)&v3)
                                                                                     * (float)(v212 + *(float *)&v3))
                                                                             * (float)v214,
                                                                        *(float *)&double v3 = (float)((v214 + 1) * (v214 + 1)),
                                                                        v215 >= (float)(v213 * *(float *)&v3)))
                                                                  {
LABEL_130:
                                                                    float v16 = 0.5;
                                                                    float v17 = 4.0;
                                                                    float v18 = 6.0;
                                                                    float v19 = -23.0;
                                                                    double v20 = 1.0;
                                                                    uint64_t result = v636;
                                                                  }
                                                                  else
                                                                  {
                                                                    float v216 = *(float *)v8;
                                                                    float v217 = exp2f((float)((float)((float)(int)v649 - v191)/ (float)v210)+ v623);
                                                                    memset(__src, 0, 276);
                                                                    if (v659 >= v645)
                                                                    {
                                                                      uint64_t v218 = 2 * v645;
                                                                      if (2 * v645 <= v659) {
                                                                        uint64_t v218 = v659 + 1;
                                                                      }
                                                                      uint64_t v645 = v218;
                                                                      if (v218) {
                                                                        int ptr = (int *)malloc_type_realloc(ptr, 304 * v218, 0x78E63A9AuLL);
                                                                      }
                                                                      else {
                                                                        uint64_t v645 = 0;
                                                                      }
                                                                    }
                                                                    float32x4_t v219 = (char *)&ptr[76 * v659];
                                                                    *(_DWORD *)float32x4_t v219 = v662;
                                                                    *((_DWORD *)v219 + 1) = v653;
                                                                    *((float *)v219 + 2) = (float)v662 - v189;
                                                                    *((float *)v219 + 3) = (float)v653 - v190;
                                                                    *((float *)v219 + 4) = (float)(v217 * v216)
                                                                                         + (float)(v217 * v216);
                                                                    memcpy(v219 + 20, __src, 0x114uLL);
                                                                    uint64_t result = v636;
                                                                    *(void *)&ptr[76 * v659++ + 74] = v636 | (v649 << 32);
                                                                    float v16 = 0.5;
                                                                    float v17 = 4.0;
                                                                    float v18 = 6.0;
                                                                    float v19 = -23.0;
                                                                    double v20 = 1.0;
                                                                  }
                                                                  uint64_t v21 = v637;
                                                                  uint64_t v40 = v639;
                                                                  uint64_t v25 = v631;
                                                                  uint64_t v23 = v633;
                                                                  float v26 = v623;
                                                                  uint64_t v31 = v629;
                                                                  uint64_t v34 = v642;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_30:
          ++v44;
          int v36 = *v37;
          int v27 = *(_DWORD *)(v8 + 28);
          if (v44 >= *v37 - v27)
          {
            int v32 = *v31;
            ++v41;
            if (v43 >= *v31 - v27) {
              goto LABEL_20;
            }
            continue;
          }
          goto LABEL_31;
        }
      }
      int ptr = 0;
      uint64_t v659 = 0;
      uint64_t v645 = 0;
LABEL_135:
      int v220 = *(_DWORD *)(v8 + 48);
      if (v220 < 1)
      {
        uint64_t v245 = v659;
        float v246 = (char *)malloc_type_malloc(0x200uLL, 0xEB8841BDuLL);
        if (v659) {
          goto LABEL_346;
        }
LABEL_16:
        free(v246);
        goto LABEL_17;
      }
      uint64_t v221 = *(void *)(v21 + 72 * result + 32);
      int v223 = *(_DWORD *)(v221 + 8);
      int v222 = *(_DWORD *)(v221 + 12);
      float v224 = (float)v222 / (float)((v223 + 11) / 12);
      float v225 = -0.5;
      if (v224 > 0.0) {
        float v225 = v16;
      }
      int v226 = (int)(float)(v224 + v225);
      if (v226 <= 1) {
        int v226 = 1;
      }
      int v227 = v222 - 1;
      int v650 = (v226 + v222 - 1) / v226;
      size_t v228 = (12 * v226);
      float v229 = (char *)malloc_type_calloc(v228, 4uLL, 0x100004052888210uLL);
      unint64_t v230 = malloc_type_calloc(v228, 4uLL, 0x100004052888210uLL);
      int v231 = v222;
      unint64_t v232 = v230;
      if ((int)v659 >= 1)
      {
        uint64_t v233 = v659;
        float v234 = ptr + 1;
        do
        {
          int v235 = *(v234 - 1);
          if (v235 >= v223) {
            int v236 = v223 - 1;
          }
          else {
            int v236 = *(v234 - 1);
          }
          if (v235 >= 0) {
            int v237 = v236;
          }
          else {
            int v237 = 0;
          }
          int v238 = v237 / ((v223 + 11) / 12);
          if (*v234 >= v231) {
            int v239 = v227;
          }
          else {
            int v239 = *v234;
          }
          if (*v234 >= 0) {
            int v240 = v239;
          }
          else {
            int v240 = 0;
          }
          uint64_t v241 = 4 * (v238 + 12 * (v240 / v650));
          ++*(_DWORD *)&v229[v241];
          v234 += 76;
          --v233;
        }
        while (v233);
      }
      int v630 = v227;
      int v632 = (v223 + 11) / 12;
      int v634 = v231;
      uint16x4_t v663 = (int *)v229;
      uint64_t v242 = (int32x4_t *)malloc_type_malloc(4 * v228, 0x100004052888210uLL);
      if (v228 <= 1) {
        uint64_t v243 = 1;
      }
      else {
        uint64_t v243 = v228;
      }
      uint64_t v643 = v232;
      int v640 = v223;
      if (v243 >= 8)
      {
        uint64_t v244 = v243 & 0x7FFFFFF8;
        int32x4_t v247 = (int32x4_t)xmmword_21BB7A770;
        float v248 = v242 + 1;
        uint64_t v249 = v244;
        v250.i64[0] = 0x400000004;
        v250.i64[1] = 0x400000004;
        v251.i64[0] = 0x800000008;
        v251.i64[1] = 0x800000008;
        do
        {
          v248[-1] = v247;
          int32x4_t *v248 = vaddq_s32(v247, v250);
          int32x4_t v247 = vaddq_s32(v247, v251);
          v248 += 2;
          v249 -= 8;
        }
        while (v249);
        if (v244 == v243) {
          goto LABEL_166;
        }
      }
      else
      {
        uint64_t v244 = 0;
      }
      do
      {
        v242->i32[v244] = v244;
        ++v244;
      }
      while (v243 != v244);
LABEL_166:
      BOOL v654 = v242;
      float v252 = (char *)malloc_type_malloc(0x200uLL, 0xC4FF132EuLL);
      BOOL v253 = v654;
      uint64_t v254 = 0;
      BOOL v255 = 1;
      uint16x4_t v256 = v663;
      uint16x4_t v257 = v663;
      float v258 = v654;
      unint64_t v259 = v228;
      uint64_t v260 = 32;
      do
      {
        uint64_t v261 = v254;
        while (1)
        {
          if (!v255)
          {
            --v261;
            uint16x4_t v262 = (uint64_t *)&v252[16 * v261];
            unint64_t v259 = v262[1];
            uint64_t v263 = *v262;
            uint16x4_t v257 = &v256[v263];
            float v258 = (int32x4_t *)((char *)v253 + v263 * 4);
          }
          if ((uint64_t)v259 > 15) {
            break;
          }
          if ((uint64_t)v259 > 1)
          {
            int v264 = 2;
            for (uint64_t i = 1; i != v259; ++i)
            {
              int v266 = v264;
              do
              {
                uint64_t v267 = (v266 - 1);
                uint64_t v268 = (v266 - 2);
                int v269 = v257[v267];
                int v270 = v257[v268];
                if (v269 >= v270) {
                  break;
                }
                uint64_t v271 = v267;
                v257[v271] = v270;
                uint64_t v272 = v268;
                v257[v272] = v269;
                __int32 v273 = v258->i32[v267];
                v258->i32[v271] = v258->i32[v272];
                v258->i32[v272] = v273;
                int v266 = v267;
              }
              while ((int)v267 > 1);
              ++v264;
            }
          }
          BOOL v255 = 0;
          unint64_t v259 = 0;
          if (v261 < 1) {
            goto LABEL_234;
          }
        }
        if (v259 > 0x27)
        {
          uint64_t v280 = 0;
          uint64_t v281 = 0;
          uint64_t v282 = 26;
          if (v259 <= 0x7D0) {
            uint64_t v282 = 8;
          }
          unint64_t v283 = 3;
          if (v259 > 0x7D0) {
            unint64_t v283 = 9;
          }
          while (2)
          {
            uint64_t v284 = (uint64_t)(v259 - 1 + v280) / v282;
            int v285 = v257[v280 / v282];
            int v286 = v257[v284];
            uint64_t v287 = (uint64_t)(2 * v259 - 2 + v280) / v282;
            int v288 = v257[v287];
            if (v285 >= v286)
            {
              if (v285 < v288) {
                goto LABEL_203;
              }
              if (v286 < v288) {
                goto LABEL_205;
              }
            }
            else if (v286 >= v288)
            {
              if (v285 < v288)
              {
LABEL_205:
                *((void *)__src + v281) = v287;
LABEL_197:
                ++v281;
                v280 += 3 * v259 - 3;
                if (v283 != v281) {
                  continue;
                }
                while (2)
                {
                  uint64_t v289 = 0;
                  uint64_t v290 = 0;
                  unint64_t v291 = v283;
                  v283 /= 3uLL;
                  if (v283 <= 1) {
                    uint64_t v292 = 1;
                  }
                  else {
                    uint64_t v292 = v283;
                  }
                  uint64_t v293 = 8 * v292;
LABEL_213:
                  uint64_t v294 = *(void *)((char *)__src + v289);
                  uint64_t v295 = *(void *)((char *)__src + v289 + 8);
                  int v296 = v257[v294];
                  uint64_t v297 = *(void *)((char *)&__src[1] + v289);
                  int v298 = v257[v295];
                  int v299 = v257[v297];
                  if (v296 >= v298)
                  {
                    if (v296 < v299) {
                      goto LABEL_218;
                    }
                    if (v298 < v299) {
                      goto LABEL_220;
                    }
                  }
                  else if (v298 >= v299)
                  {
                    if (v296 < v299)
                    {
LABEL_220:
                      *(void *)((char *)__src + v290) = v297;
LABEL_212:
                      v290 += 8;
                      v289 += 24;
                      if (v293 == v290)
                      {
                        if (v291 < 9)
                        {
                          unint64_t v274 = *(void *)&__src[0];
                          int v275 = *v257;
                          goto LABEL_222;
                        }
                        continue;
                      }
                      goto LABEL_213;
                    }
LABEL_218:
                    *(void *)((char *)__src + v290) = v294;
                    goto LABEL_212;
                  }
                  break;
                }
                *(void *)((char *)__src + v290) = v295;
                goto LABEL_212;
              }
LABEL_203:
              *((void *)__src + v281) = v280 / v282;
              goto LABEL_197;
            }
            break;
          }
          *((void *)__src + v281) = v284;
          goto LABEL_197;
        }
        unint64_t v274 = v259 >> 1;
        int v275 = *v257;
        int v276 = v257[v259 >> 1];
        unint64_t v277 = v259 - 1;
        int v278 = v257[v259 - 1];
        if (v276 >= v278) {
          unint64_t v279 = v259 >> 1;
        }
        else {
          unint64_t v279 = v259 - 1;
        }
        if (v275 >= v278) {
          unint64_t v277 = 0;
        }
        else {
          unint64_t v279 = 0;
        }
        if (v276 >= v278) {
          unint64_t v274 = v277;
        }
        if (v275 >= v276) {
          unint64_t v274 = v279;
        }
LABEL_222:
        uint64_t v300 = 0;
        uint64_t v301 = 0;
        uint64_t v302 = v274;
        *uint16x4_t v257 = v257[v302];
        v257[v302] = v275;
        __int32 v303 = v258->i32[0];
        v258->i32[0] = v258->i32[v302];
        v258->i32[v302] = v303;
        for (uint64_t j = 1; j != v259; ++j)
        {
          int v305 = v257[j];
          if (v305 <= *v257)
          {
            uint64_t v306 = ++v300;
            uint64_t v307 = j;
            v257[v307] = v257[v300];
            v257[v306] = v305;
            __int32 v308 = v258->i32[j];
            v258->i32[v307] = v258->i32[v300];
            v258->i32[v306] = v308;
            if (v257[j] == *v257)
            {
              ++v301;
              int v309 = v257[v300];
              uint64_t v310 = v301;
              v257[v300] = v257[v301];
              v257[v310] = v309;
              __int32 v311 = v258->i32[v300];
              v258->i32[v300] = v258->i32[v301];
              v258->i32[v310] = v311;
            }
          }
        }
        uint64_t v312 = 4 * v300 - 4 * v301;
        uint64_t v313 = v301;
        do
        {
          int v314 = *(int *)((char *)v257 + v312);
          uint64_t v315 = v313;
          *(int *)((char *)v257 + v312) = v257[v313];
          v257[v315] = v314;
          __int32 v316 = *(__int32 *)((char *)v258->i32 + v312);
          *(__int32 *)((char *)v258->i32 + v312) = v258->i32[v313];
          v258->i32[v315] = v316;
          v312 += 4;
          BOOL v198 = v313-- <= 0;
        }
        while (!v198);
        uint64_t v254 = v261 + 1;
        if (v261 + 1 >= v260)
        {
          uint64_t v625 = 2 * v260;
          uint64_t v628 = v301;
          float v252 = (char *)malloc_type_realloc(v252, 32 * v260, 0x9B99AC88uLL);
          uint64_t v254 = v261 + 1;
          uint64_t v301 = v628;
          BOOL v253 = v654;
          uint16x4_t v256 = v663;
          uint64_t v260 = v625;
        }
        uint32x4_t v317 = &v252[16 * v261];
        *(void *)uint32x4_t v317 = v300 + v257 - v256 + 1;
        *((void *)v317 + 1) = v259 + ~v300;
        unint64_t v259 = v300 - v301;
        BOOL v255 = v300 != v301;
      }
      while ((v261 & 0x8000000000000000) == 0 || v259);
LABEL_234:
      uint32x4_t v318 = v256;
      free(v252);
      float v319 = v318;
      uint64_t v320 = v643;
      do
      {
        uint64_t v321 = *v319;
        if (v243 * v321 > v220)
        {
          uint64_t v321 = v220 / v243;
          *float v319 = v321;
        }
        v220 -= v321;
        ++v319;
        --v243;
      }
      while (v243);
      float v322 = (char *)malloc_type_malloc(0x200uLL, 0xC4FF132EuLL);
      uint64_t v323 = 0;
      BOOL v324 = 1;
      uint64_t v325 = 32;
      int v326 = v663;
      int v327 = v663;
      float32_t v328 = v654;
      uint64_t v329 = v654;
      while (2)
      {
        uint64_t v330 = v323;
        while (1)
        {
          if (!v324)
          {
            --v330;
            uint64_t v331 = (uint64_t *)&v322[16 * v330];
            size_t v228 = v331[1];
            uint64_t v332 = *v331;
            uint64_t v329 = (int32x4_t *)((char *)v328 + v332 * 4);
            int v327 = &v326[v332];
          }
          if ((uint64_t)v228 > 15) {
            break;
          }
          if ((uint64_t)v228 > 1)
          {
            int v333 = 2;
            for (uint64_t k = 1; k != v228; ++k)
            {
              int v335 = v333;
              do
              {
                uint64_t v336 = (v335 - 1);
                uint64_t v337 = (v335 - 2);
                __int32 v338 = v329->i32[v336];
                __int32 v339 = v329->i32[v337];
                if (v338 >= v339) {
                  break;
                }
                uint64_t v340 = v336;
                v329->i32[v340] = v339;
                uint64_t v341 = v337;
                v329->i32[v341] = v338;
                int v342 = v327[v336];
                v327[v340] = v327[v341];
                v327[v341] = v342;
                int v335 = v336;
              }
              while ((int)v336 > 1);
              ++v333;
            }
          }
          BOOL v324 = 0;
          size_t v228 = 0;
          if (v330 < 1) {
            goto LABEL_306;
          }
        }
        if (v228 > 0x27)
        {
          uint64_t v349 = 0;
          uint64_t v350 = 0;
          uint64_t v351 = 26;
          if (v228 <= 0x7D0) {
            uint64_t v351 = 8;
          }
          unint64_t v352 = 3;
          if (v228 > 0x7D0) {
            unint64_t v352 = 9;
          }
          while (2)
          {
            uint64_t v353 = (uint64_t)(v228 - 1 + v349) / v351;
            __int32 v354 = v329->i32[v349 / v351];
            __int32 v355 = v329->i32[v353];
            uint64_t v356 = (uint64_t)(2 * v228 - 2 + v349) / v351;
            __int32 v357 = v329->i32[v356];
            if (v354 >= v355)
            {
              if (v354 < v357) {
                goto LABEL_275;
              }
              if (v355 < v357) {
                goto LABEL_277;
              }
            }
            else if (v355 >= v357)
            {
              if (v354 < v357)
              {
LABEL_277:
                *((void *)__src + v350) = v356;
LABEL_269:
                ++v350;
                v349 += 3 * v228 - 3;
                if (v352 != v350) {
                  continue;
                }
                while (2)
                {
                  uint64_t v358 = 0;
                  uint64_t v359 = 0;
                  unint64_t v360 = v352;
                  v352 /= 3uLL;
                  if (v352 <= 1) {
                    uint64_t v361 = 1;
                  }
                  else {
                    uint64_t v361 = v352;
                  }
                  uint64_t v362 = 8 * v361;
LABEL_285:
                  uint64_t v363 = *(void *)((char *)__src + v358);
                  uint64_t v364 = *(void *)((char *)__src + v358 + 8);
                  __int32 v365 = v329->i32[v363];
                  uint64_t v366 = *(void *)((char *)&__src[1] + v358);
                  __int32 v367 = v329->i32[v364];
                  __int32 v368 = v329->i32[v366];
                  if (v365 >= v367)
                  {
                    if (v365 < v368) {
                      goto LABEL_290;
                    }
                    if (v367 < v368) {
                      goto LABEL_292;
                    }
                  }
                  else if (v367 >= v368)
                  {
                    if (v365 < v368)
                    {
LABEL_292:
                      *(void *)((char *)__src + v359) = v366;
LABEL_284:
                      v359 += 8;
                      v358 += 24;
                      if (v362 == v359)
                      {
                        if (v360 < 9)
                        {
                          size_t v343 = *(void *)&__src[0];
                          __int32 v344 = v329->i32[0];
                          goto LABEL_294;
                        }
                        continue;
                      }
                      goto LABEL_285;
                    }
LABEL_290:
                    *(void *)((char *)__src + v359) = v363;
                    goto LABEL_284;
                  }
                  break;
                }
                *(void *)((char *)__src + v359) = v364;
                goto LABEL_284;
              }
LABEL_275:
              *((void *)__src + v350) = v349 / v351;
              goto LABEL_269;
            }
            break;
          }
          *((void *)__src + v350) = v353;
          goto LABEL_269;
        }
        size_t v343 = v228 >> 1;
        __int32 v344 = v329->i32[0];
        __int32 v345 = v329->i32[v228 >> 1];
        size_t v346 = v228 - 1;
        __int32 v347 = v329->i32[v228 - 1];
        if (v345 >= v347) {
          size_t v348 = v228 >> 1;
        }
        else {
          size_t v348 = v228 - 1;
        }
        if (v344 >= v347) {
          size_t v346 = 0;
        }
        else {
          size_t v348 = 0;
        }
        if (v345 >= v347) {
          size_t v343 = v346;
        }
        if (v344 >= v345) {
          size_t v343 = v348;
        }
LABEL_294:
        uint64_t v369 = 0;
        uint64_t v370 = 0;
        uint64_t v371 = v343;
        v329->i32[0] = v329->i32[v371];
        v329->i32[v371] = v344;
        int v372 = *v327;
        *int v327 = v327[v371];
        v327[v371] = v372;
        for (uint64_t m = 1; m != v228; ++m)
        {
          __int32 v374 = v329->i32[m];
          if (v374 <= v329->i32[0])
          {
            uint64_t v375 = ++v370;
            uint64_t v376 = m;
            v329->i32[v376] = v329->i32[v370];
            v329->i32[v375] = v374;
            int v377 = v327[m];
            v327[v376] = v327[v370];
            v327[v375] = v377;
            if (v329->i32[m] == v329->i32[0])
            {
              ++v369;
              __int32 v378 = v329->i32[v370];
              uint64_t v379 = v369;
              v329->i32[v370] = v329->i32[v369];
              v329->i32[v379] = v378;
              int v380 = v327[v370];
              v327[v370] = v327[v369];
              v327[v379] = v380;
            }
          }
        }
        uint64_t v381 = 4 * v370 - 4 * v369;
        uint64_t v382 = v369;
        do
        {
          __int32 v383 = *(__int32 *)((char *)v329->i32 + v381);
          uint64_t v384 = v382;
          *(__int32 *)((char *)v329->i32 + v381) = v329->i32[v382];
          v329->i32[v384] = v383;
          int v385 = *(int *)((char *)v327 + v381);
          *(int *)((char *)v327 + v381) = v327[v382];
          v327[v384] = v385;
          v381 += 4;
          BOOL v198 = v382-- <= 0;
        }
        while (!v198);
        uint64_t v323 = v330 + 1;
        if (v330 + 1 >= v325)
        {
          uint64_t v386 = 2 * v325;
          float v322 = (char *)malloc_type_realloc(v322, 32 * v325, 0x9B99AC88uLL);
          float32_t v328 = v654;
          int v326 = v663;
          uint64_t v325 = v386;
          uint64_t v320 = v643;
        }
        uint64_t v387 = &v322[16 * v330];
        *(void *)uint64_t v387 = v370 + (((char *)v329 - (char *)v328) >> 2) + 1;
        *((void *)v387 + 1) = v228 + ~v370;
        size_t v228 = v370 - v369;
        BOOL v324 = v370 != v369;
        if ((v330 & 0x8000000000000000) == 0 || v228) {
          continue;
        }
        break;
      }
LABEL_306:
      uint64_t v388 = v328;
      free(v322);
      free(v388);
      uint64_t v389 = (int32x4_t *)malloc_type_malloc(4 * (int)v659, 0x100004052888210uLL);
      unint64_t v390 = v663;
      unsigned int v391 = v389;
      v392.i64[0] = 0x400000004;
      v392.i64[1] = 0x400000004;
      v393.i64[0] = 0x800000008;
      v393.i64[1] = 0x800000008;
      if ((int)v659 >= 1)
      {
        uint64_t v394 = v659;
        if (v659 < 8uLL)
        {
          unint64_t v395 = 0;
          goto LABEL_312;
        }
        unint64_t v395 = v659 - (unint64_t)(v659 & 7);
        int32x4_t v396 = (int32x4_t)xmmword_21BB7A770;
        float32x4_t v397 = v389 + 1;
        unint64_t v398 = v395;
        do
        {
          v397[-1] = v396;
          *float32x4_t v397 = vaddq_s32(v396, v392);
          int32x4_t v396 = vaddq_s32(v396, v393);
          v397 += 2;
          v398 -= 8;
        }
        while (v398);
        if ((v659 & 7) != 0)
        {
          do
          {
LABEL_312:
            v389->i32[v395] = v395;
            ++v395;
          }
          while (v659 != v395);
        }
        LODWORD(__src[0]) = 1337;
        if ((int)v659 >= 2)
        {
          uint64_t v399 = 0;
          do
          {
            int v400 = rand_r((unsigned int *)__src);
            __int32 v401 = v391->i32[v399];
            uint64_t v402 = (int)v399 + v400 % ((int)v399 - (int)v659);
            v391->i32[v399] = v391->i32[v402];
            v391->i32[v402] = v401;
            ++v399;
          }
          while (v659 - 1 != v399);
        }
        int v403 = v391;
        unint64_t v390 = v663;
        do
        {
          while (1)
          {
            int v404 = v403->i32[0];
            int v403 = (int32x4_t *)((char *)v403 + 4);
            uint64_t v405 = &ptr[76 * v404];
            int v406 = v405[1];
            int v407 = *v405 >= v640 ? v640 - 1 : *v405;
            int v408 = *v405 >= 0 ? v407 : 0;
            int v409 = v408 / v632;
            int v410 = v406 >= v634 ? v630 : v405[1];
            int v411 = v406 >= 0 ? v410 : 0;
            int v412 = v409 + 12 * (v411 / v650);
            uint64_t v413 = v412;
            int v414 = v320[v413];
            if (v414 < v663[v413]) {
              break;
            }
            *uint64_t v405 = -1337;
            if (!--v394) {
              goto LABEL_332;
            }
          }
          v320[v412] = v414 + 1;
          --v394;
        }
        while (v394);
      }
LABEL_332:
      if (v659 < 1)
      {
        uint64_t v245 = 0;
        uint64_t v417 = v645;
      }
      else
      {
        uint64_t v245 = 0;
        uint64_t v415 = 0;
        float32x4_t v416 = ptr;
        uint64_t v417 = v645;
        do
        {
          if (*v416 != -1337)
          {
            memcpy(&ptr[76 * v245], v416, 0x130uLL);
            unint64_t v390 = v663;
            ++v245;
          }
          ++v415;
          v416 += 76;
        }
        while (v415 < v659);
      }
      if (v245 > v417)
      {
        uint64_t v418 = 2 * v417;
        if (2 * v417 <= v245) {
          uint64_t v418 = v245;
        }
        if (v418)
        {
          unsigned int v419 = (int *)malloc_type_realloc(ptr, 304 * v418, 0x85C33623uLL);
          unint64_t v390 = v663;
          int ptr = v419;
        }
      }
      if (v245 > v659)
      {
        bzero(&ptr[76 * v659], 304 * (v245 - v659));
        unint64_t v390 = v663;
      }
      free(v390);
      free(v320);
      free(v391);
      float v246 = (char *)malloc_type_malloc(0x200uLL, 0xEB8841BDuLL);
      if (!v245) {
        goto LABEL_16;
      }
LABEL_346:
      uint16x4_t v660 = v246;
      uint64_t v420 = 0;
      BOOL v421 = 1;
      uint64_t v655 = 32;
      uint64_t v641 = v245;
      unint64_t v422 = v245;
      int v423 = ptr;
      long long v424 = 0uLL;
      while (2)
      {
        uint64_t v425 = v420;
        while (1)
        {
          if (!v421)
          {
            --v425;
            int v426 = &v660[16 * v425];
            unint64_t v422 = *((void *)v426 + 1);
            int v423 = &ptr[76 * *(void *)v426];
          }
          uint64_t v664 = v425;
          if ((uint64_t)v422 > 15) {
            break;
          }
          if ((uint64_t)v422 > 1)
          {
            int v427 = v423 + 76;
            uint64_t v428 = 2;
            for (uint64_t n = 1; n != v422; ++n)
            {
              float v430 = v427;
              uint64_t v431 = v428;
              do
              {
                int v432 = &v423[76 * (v431 - 2)];
                int v433 = v430[75] - v432[75];
                if (!v433)
                {
                  int v433 = v430[1] - v423[76 * (v431 - 2) + 1];
                  if (!v433) {
                    int v433 = *v430 - *v432;
                  }
                }
                if ((v433 & 0x80000000) == 0) {
                  break;
                }
                __src[17] = v424;
                __src[18] = v424;
                __src[15] = v424;
                __src[16] = v424;
                __src[13] = v424;
                __src[14] = v424;
                __src[11] = v424;
                __src[12] = v424;
                __src[9] = v424;
                __src[10] = v424;
                __src[7] = v424;
                __src[8] = v424;
                __src[5] = v424;
                __src[6] = v424;
                __src[3] = v424;
                __src[4] = v424;
                __src[1] = v424;
                __src[2] = v424;
                __src[0] = v424;
                memcpy(__src, v430, 0x130uLL);
                memcpy(v430, v432, 0x130uLL);
                memcpy(v432, __src, 0x130uLL);
                long long v424 = 0uLL;
                --v431;
                v430 -= 76;
              }
              while (v431 > 1);
              ++v428;
              v427 += 76;
            }
          }
          BOOL v421 = 0;
          unint64_t v422 = 0;
          uint64_t v425 = v664;
          if (v664 < 1) {
            goto LABEL_466;
          }
        }
        if (v422 > 0x27)
        {
          uint64_t v446 = 0;
          uint64_t v447 = 0;
          uint64_t v448 = 26;
          if (v422 <= 0x7D0) {
            uint64_t v448 = 8;
          }
          unint64_t v449 = 3;
          if (v422 > 0x7D0) {
            unint64_t v449 = 9;
          }
          while (2)
          {
            uint64_t v450 = v446 / v448;
            int32x4_t v451 = &v423[76 * (v446 / v448)];
            uint64_t v452 = (uint64_t)(v422 - 1 + v446) / v448;
            uint16x8_t v453 = &v423[76 * v452];
            int v454 = v451[75];
            int v455 = v453[75];
            int v456 = v454 - v455;
            if (v454 == v455)
            {
              int v457 = v423[76 * v450 + 1];
              int v458 = v423[76 * v452 + 1];
              int v456 = v457 - v458;
              if (v457 == v458) {
                int v456 = *v451 - *v453;
              }
            }
            uint64_t v459 = (uint64_t)(2 * v422 - 2 + v446) / v448;
            unint64_t v460 = &v423[76 * v459];
            int v461 = v460[75];
            if (v456 < 0)
            {
              int v464 = v455 - v461;
              if (!v464)
              {
                int v464 = v423[76 * v452 + 1] - v423[76 * v459 + 1];
                if (!v464) {
                  int v464 = *v453 - *v460;
                }
              }
              if (v464 < 0) {
                goto LABEL_405;
              }
              int v465 = v454 - v461;
              if (v454 == v461)
              {
                int v465 = v423[76 * v450 + 1] - v423[76 * v459 + 1];
                if (!v465) {
                  int v465 = *v451 - *v460;
                }
              }
              if (v465 < 0)
              {
LABEL_397:
                *((void *)__src + v447) = v459;
                goto LABEL_384;
              }
            }
            else
            {
              int v462 = v454 - v461;
              if (!v462)
              {
                int v462 = v423[76 * v450 + 1] - v423[76 * v459 + 1];
                if (!v462) {
                  int v462 = *v451 - *v460;
                }
              }
              if ((v462 & 0x80000000) == 0)
              {
                int v463 = v455 - v461;
                if (v455 == v461)
                {
                  int v463 = v423[76 * v452 + 1] - v423[76 * v459 + 1];
                  if (!v463) {
                    int v463 = *v453 - *v460;
                  }
                }
                if (v463 < 0) {
                  goto LABEL_397;
                }
LABEL_405:
                *((void *)__src + v447) = v452;
LABEL_384:
                ++v447;
                v446 += 3 * v422 - 3;
                if (v449 != v447) {
                  continue;
                }
                while (2)
                {
                  uint64_t v466 = 0;
                  uint64_t v467 = 0;
                  unint64_t v468 = v449;
                  v449 /= 3uLL;
                  if (v449 <= 1) {
                    uint64_t v469 = 1;
                  }
                  else {
                    uint64_t v469 = v449;
                  }
                  uint64_t v470 = 8 * v469;
LABEL_414:
                  uint64_t v471 = *(void *)((char *)__src + v466);
                  uint64_t v472 = *(void *)((char *)__src + v466 + 8);
                  uint64_t v473 = *(void *)((char *)&__src[1] + v466);
                  int v474 = &v423[76 * v471];
                  int v475 = &v423[76 * v472];
                  int v476 = v474[75];
                  int v477 = v475[75];
                  int v478 = v476 - v477;
                  if (v476 == v477)
                  {
                    int v479 = v423[76 * v471 + 1];
                    int v480 = v423[76 * v472 + 1];
                    int v478 = v479 - v480;
                    if (v479 == v480) {
                      int v478 = *v474 - *v475;
                    }
                  }
                  unint64_t v481 = &v423[76 * v473];
                  int v482 = v481[75];
                  if (v478 < 0)
                  {
                    int v485 = v477 - v482;
                    if (!v485)
                    {
                      int v485 = v423[76 * v472 + 1] - v423[76 * v473 + 1];
                      if (!v485) {
                        int v485 = *v475 - *v481;
                      }
                    }
                    if (v485 < 0) {
                      goto LABEL_434;
                    }
                    int v486 = v476 - v482;
                    if (v476 == v482)
                    {
                      int v486 = v423[76 * v471 + 1] - v423[76 * v473 + 1];
                      if (!v486) {
                        int v486 = *v474 - *v481;
                      }
                    }
                    if (v486 < 0)
                    {
LABEL_426:
                      *(void *)((char *)__src + v467) = v473;
                      goto LABEL_413;
                    }
                  }
                  else
                  {
                    int v483 = v476 - v482;
                    if (!v483)
                    {
                      int v483 = v423[76 * v471 + 1] - v423[76 * v473 + 1];
                      if (!v483) {
                        int v483 = *v474 - *v481;
                      }
                    }
                    if ((v483 & 0x80000000) == 0)
                    {
                      int v484 = v477 - v482;
                      if (v477 == v482)
                      {
                        int v484 = v423[76 * v472 + 1] - v423[76 * v473 + 1];
                        if (!v484) {
                          int v484 = *v475 - *v481;
                        }
                      }
                      if (v484 < 0) {
                        goto LABEL_426;
                      }
LABEL_434:
                      *(void *)((char *)__src + v467) = v472;
LABEL_413:
                      v467 += 8;
                      v466 += 24;
                      if (v470 == v467)
                      {
                        if (v468 < 9)
                        {
                          unint64_t v434 = *(void *)&__src[0];
                          goto LABEL_436;
                        }
                        continue;
                      }
                      goto LABEL_414;
                    }
                  }
                  break;
                }
                *(void *)((char *)__src + v467) = v471;
                goto LABEL_413;
              }
            }
            break;
          }
          *((void *)__src + v447) = v450;
          goto LABEL_384;
        }
        unint64_t v434 = v422 >> 1;
        uint64_t v435 = &v423[76 * (v422 >> 1)];
        int v436 = v423[75];
        int v437 = v435[75];
        int v438 = v436 - v437;
        if (v436 == v437)
        {
          int v439 = v423[1];
          int v440 = v423[76 * v434 + 1];
          int v438 = v439 - v440;
          if (v439 == v440) {
            int v438 = *v423 - *v435;
          }
        }
        unint64_t v441 = v422 - 1;
        int v442 = &v423[76 * v422 - 76];
        int v443 = v442[75];
        if (v438 < 0)
        {
          int v498 = v437 - v443;
          if (!v498)
          {
            int v498 = v423[76 * v434 + 1] - v423[76 * v441 + 1];
            if (!v498) {
              int v498 = *v435 - *v442;
            }
          }
          if ((v498 & 0x80000000) == 0)
          {
            int v499 = v436 - v443;
            if (v436 == v443)
            {
              int v499 = v423[1] - v423[76 * v441 + 1];
              if (!v499) {
                int v499 = *v423 - *v442;
              }
            }
            if (v499 >= 0) {
              unint64_t v434 = 0;
            }
            else {
              unint64_t v434 = v422 - 1;
            }
          }
        }
        else
        {
          int v444 = v436 - v443;
          if (!v444)
          {
            int v444 = v423[1] - v423[76 * v441 + 1];
            if (!v444) {
              int v444 = *v423 - *v442;
            }
          }
          if (v444 < 0)
          {
            unint64_t v434 = 0;
          }
          else
          {
            int v445 = v437 - v443;
            if (v437 == v443)
            {
              int v445 = v423[76 * v434 + 1] - v423[76 * v441 + 1];
              if (!v445) {
                int v445 = *v435 - *v442;
              }
            }
            if (v445 < 0) {
              unint64_t v434 = v422 - 1;
            }
          }
        }
LABEL_436:
        __src[17] = v424;
        __src[18] = v424;
        __src[15] = v424;
        __src[16] = v424;
        __src[13] = v424;
        __src[14] = v424;
        __src[11] = v424;
        __src[12] = v424;
        __src[9] = v424;
        __src[10] = v424;
        __src[7] = v424;
        __src[8] = v424;
        __src[5] = v424;
        __src[6] = v424;
        __src[3] = v424;
        __src[4] = v424;
        __src[1] = v424;
        __src[2] = v424;
        __src[0] = v424;
        memcpy(__src, v423, 0x130uLL);
        memcpy(v423, &v423[76 * v434], 0x130uLL);
        memcpy(&v423[76 * v434], __src, 0x130uLL);
        long long v424 = 0uLL;
        uint64_t v487 = 0;
        uint64_t v488 = 0;
        unint64_t v489 = v422 - 1;
        int32x4_t v490 = v423 + 76;
        do
        {
          int v491 = v490[75] - v423[75];
          if (!v491)
          {
            int v491 = v490[1] - v423[1];
            if (!v491) {
              int v491 = *v490 - *v423;
            }
          }
          if (v491 <= 0)
          {
            ++v488;
            __src[17] = v424;
            __src[18] = v424;
            __src[15] = v424;
            __src[16] = v424;
            __src[13] = v424;
            __src[14] = v424;
            __src[11] = v424;
            __src[12] = v424;
            __src[9] = v424;
            __src[10] = v424;
            __src[7] = v424;
            __src[8] = v424;
            __src[5] = v424;
            __src[6] = v424;
            __src[3] = v424;
            __src[4] = v424;
            __src[1] = v424;
            __src[2] = v424;
            __src[0] = v424;
            memcpy(__src, v490, 0x130uLL);
            memcpy(v490, &v423[76 * v488], 0x130uLL);
            memcpy(&v423[76 * v488], __src, 0x130uLL);
            int v492 = v490[75] - v423[75];
            if (!v492)
            {
              int v492 = v490[1] - v423[1];
              if (!v492) {
                int v492 = *v490 - *v423;
              }
            }
            long long v424 = 0uLL;
            if (!v492)
            {
              ++v487;
              memset(__src, 0, 304);
              memcpy(__src, &v423[76 * v488], 0x130uLL);
              memcpy(&v423[76 * v488], &v423[76 * v487], 0x130uLL);
              memcpy(&v423[76 * v487], __src, 0x130uLL);
              long long v424 = 0uLL;
            }
          }
          v490 += 76;
          --v489;
        }
        while (v489);
        uint64_t v493 = v487 + 1;
        uint64_t v651 = v487;
        uint64_t v494 = 76 * v487;
        uint64_t v495 = 304 * v488 - v494 * 4;
        do
        {
          __src[17] = v424;
          __src[18] = v424;
          __src[15] = v424;
          __src[16] = v424;
          __src[13] = v424;
          __src[14] = v424;
          __src[11] = v424;
          __src[12] = v424;
          __src[9] = v424;
          __src[10] = v424;
          __src[7] = v424;
          __src[8] = v424;
          __src[5] = v424;
          __src[6] = v424;
          __src[3] = v424;
          __src[4] = v424;
          __src[1] = v424;
          __src[2] = v424;
          __src[0] = v424;
          memcpy(__src, (char *)v423 + v495, 0x130uLL);
          memcpy((char *)v423 + v495, &v423[v494], 0x130uLL);
          memcpy(&v423[v494], __src, 0x130uLL);
          long long v424 = 0uLL;
          --v493;
          v494 -= 76;
          v495 += 304;
        }
        while (v493 > 0);
        uint64_t v420 = v664 + 1;
        if (v664 + 1 >= v655)
        {
          uint64_t v496 = (char *)malloc_type_realloc(v660, 32 * v655, 0x2D5E27AuLL);
          long long v424 = 0uLL;
          v655 *= 2;
        }
        else
        {
          uint64_t v496 = v660;
        }
        uint16x4_t v660 = v496;
        int v497 = &v496[16 * v664];
        *(void *)int v497 = v488 - 0x79435E50D79435E5 * (((char *)v423 - (char *)ptr) >> 4) + 1;
        *((void *)v497 + 1) = v422 + ~v488;
        unint64_t v422 = v488 - v651;
        BOOL v421 = v488 != v651;
        if ((v664 & 0x8000000000000000) == 0 || v422) {
          continue;
        }
        break;
      }
LABEL_466:
      free(v660);
      if (v641 >= 1)
      {
        uint64_t v500 = 0;
        BOOL v638 = (uint64_t *)(v637 + 72 * v636 + 8);
        do
        {
          uint64_t v652 = v500;
          unint64_t v501 = (char *)&ptr[76 * v500];
          int v503 = *(_DWORD *)v501;
          int v502 = *((_DWORD *)v501 + 1);
          memset(__src, 0, 272);
          uint64_t v646 = *((void *)v501 + 1);
          float v504 = *((float *)v501 + 4);
          memcpy(__src, v501 + 24, 0x110uLL);
          uint64_t v505 = *((void *)v501 + 37);
          float v656 = v504;
          float v506 = (float)(v504 / (float)(1 << v505)) * v16;
          float v507 = *(float *)(v8 + 36);
          float v508 = *(float *)(v8 + 32) * v506;
          double v509 = v508;
          BOOL v198 = v508 <= 0.0;
          double v510 = -0.5;
          if (!v198) {
            double v510 = 0.5;
          }
          uint64_t v511 = *v638;
          uint64_t v644 = *((void *)v501 + 37);
          uint64_t v512 = v505 >> 32;
          uint64_t v513 = *v638 + 24 * SHIDWORD(v505);
          memset(v668, 0, sizeof(v668));
          unint64_t v514 = *(unsigned int *)(v8 + 40);
          int v515 = (int)(v510 + v509);
          memset(v669, 0, sizeof(v669));
          LODWORD(v516) = v502 - v515;
          if (v502 - v515 <= 1) {
            uint64_t v516 = 1;
          }
          else {
            uint64_t v516 = v516;
          }
          int v517 = *(_DWORD *)(v513 + 12) - 2;
          if (v502 + v515 < v517) {
            int v517 = v502 + v515;
          }
          if ((int)v516 <= v517)
          {
            LODWORD(v51_Block_object_dispose(&STACK[0x220], 8) = v503 - v515;
            if (v503 - v515 <= 1) {
              uint64_t v518 = 1;
            }
            else {
              uint64_t v518 = v518;
            }
            int v519 = v503 + v515;
            if (v519 >= *(_DWORD *)(v511 + 24 * (int)v512 + 8) - 2) {
              int v519 = *(_DWORD *)(v511 + 24 * (int)v512 + 8) - 2;
            }
            if ((int)v518 <= v519)
            {
              float v521 = 1.0 / (float)((float)(v506 * v507) * (float)((float)(v506 * v507) + (float)(v506 * v507)));
              uint64_t v522 = *(void *)v513;
              uint64_t v523 = *(void *)(v511 + 24 * (int)v512 + 16);
              uint64_t v524 = (v519 + 1);
              unint64_t v661 = (v517 + 1);
              unsigned int v525 = v516 + 1;
              uint64_t v526 = 2 * v523;
              uint64_t v527 = 2 * v518;
              uint64_t v528 = v522 + v527 + 2 * v523 * (v516 - 1);
              uint64_t v529 = v522 + v527 + 2 * v523 * v516 - 2;
              uint64_t v530 = v524 - v518;
              do
              {
                uint64_t v531 = 0;
                int v532 = (v516 - v502) * (v516 - v502);
                uint64_t v533 = v516 * v523;
                ++v516;
                do
                {
                  int v534 = *(unsigned __int16 *)(v528 + 2 * v531)
                       - *(unsigned __int16 *)(v522 + 2 * (v518 + v523 * v525) + 2 * v531);
                  float v535 = -(float)((float)(v532 + (v518 - v503 + v531) * (v518 - v503 + v531)) * v521);
                  float v536 = (float)v534 * 0.0039062;
                  float v537 = v535 * 0.00390625 + v20;
                  float v538 = (float)(*(unsigned __int16 *)(v522 + 2 * ((v518 + v531 + 1) + v533))
                               - *(unsigned __int16 *)(v529 + 2 * v531))
                       * 0.0039062;
                  float v539 = (float)((float)((float)(v537 * v537) * (float)(v537 * v537))
                               * (float)((float)(v537 * v537) * (float)(v537 * v537)))
                       * (float)((float)((float)(v537 * v537) * (float)(v537 * v537))
                               * (float)((float)(v537 * v537) * (float)(v537 * v537)));
                  BOOL v195 = v535 < v19;
                  float v540 = (float)((float)((float)(v539 * v539) * (float)(v539 * v539))
                               * (float)((float)(v539 * v539) * (float)(v539 * v539)))
                       * (float)((float)((float)(v539 * v539) * (float)(v539 * v539))
                               * (float)((float)(v539 * v539) * (float)(v539 * v539)));
                  if (v195) {
                    float v540 = 0.0;
                  }
                  float v541 = -v538;
                  if (v538 >= 0.0) {
                    float v541 = (float)(*(unsigned __int16 *)(v522 + 2 * ((v518 + v531 + 1) + v533))
                  }
                                 - *(unsigned __int16 *)(v529 + 2 * v531))
                         * 0.0039062;
                  float v542 = -v536;
                  if (v536 >= 0.0) {
                    float v542 = (float)v534 * 0.0039062;
                  }
                  BOOL v543 = v541 < v542;
                  if (v541 >= v542) {
                    float v544 = v542;
                  }
                  else {
                    float v544 = v541;
                  }
                  if (v541 <= v542) {
                    float v541 = v542;
                  }
                  float v545 = v544 / v541;
                  float v546 = v545
                       + (float)((float)((float)(v545 * v545)
                                       * (float)((float)((float)((float)((float)(v545 * v545) * -0.046496) + 0.15931)
                                                       * (float)(v545 * v545))
                                               + -0.32762))
                               * v545);
                  if (v543) {
                    float v546 = 1.5708 - v546;
                  }
                  if (v538 < 0.0) {
                    float v546 = 3.1416 - v546;
                  }
                  if (v536 < 0.0) {
                    float v546 = -v546;
                  }
                  if (v546 < 0.0) {
                    float v546 = v546 + 6.2832;
                  }
                  float v520 = (double)(int)v514 / 6.28318531;
                  int v547 = (int)(float)(v16 + (float)(v520 * v546));
                  float v548 = sqrtf((float)(v536 * v536) + (float)(v538 * v538));
                  if ((int)v514 <= v547) {
                    int v549 = v514;
                  }
                  else {
                    int v549 = 0;
                  }
                  ++v531;
                  *((float *)v669 + v547 - v549) = *((float *)v669 + v547 - v549) + (float)(v540 * v548);
                }
                while (v530 != v531);
                ++v525;
                v528 += v526;
                v529 += v526;
              }
              while (v516 != v661);
            }
          }
          if ((int)v514 > 0)
          {
            int v550 = 2 - v514;
            if (v514 > 2) {
              int v550 = 2;
            }
            unint64_t v551 = (v514 - 1);
            BOOL v552 = (float *)v669 + v514;
            float v553 = *((float *)v669 + v550);
            float v554 = *(v552 - 1);
            float v555 = *(float *)v669;
            float v556 = (float)((float)(*(float *)v669 * v18) * 0.0625)
                 + (float)((float)((float)(*(v552 - 2) + v553) * 0.0625)
                         + (float)((float)((float)(v554
                                                 + *(float *)((unint64_t)v669 | (4 * (v514 != 1))))
                                         * v17)
                                 * 0.0625));
            float v667 = v556;
            uint64_t v557 = v657;
            if (v514 == 1)
            {
              float v558 = v556;
              uint64_t v560 = v644;
              uint64_t v559 = v646;
            }
            else
            {
              int v561 = 3 - v514;
              if (v514 > 3) {
                int v561 = 3;
              }
              float v562 = (float)((float)((float)(v553 + *(float *)v669) * v17) * 0.0625)
                   + (float)((float)(v554 + *((float *)v669 + v561)) * 0.0625);
              float v563 = *((float *)v669 + 1);
              v668[0] = (float)((float)(*((float *)v669 + 1) * v18) * 0.0625) + v562;
              if (v514 != 2)
              {
                for (iuint64_t i = 2; ii != v514; ++ii)
                {
                  if (ii >= v551) {
                    int v565 = v514;
                  }
                  else {
                    int v565 = 0;
                  }
                  if (ii + 2 >= v514) {
                    int v566 = v514;
                  }
                  else {
                    int v566 = 0;
                  }
                  float v567 = (float)((float)(v555 + *((float *)v669 + (int)ii - v566 + 2)) * 0.0625)
                       + (float)((float)((float)(v563 + *((float *)v669 + (int)ii - v565 + 1)) * v17) * 0.0625);
                  float v555 = v563;
                  float v563 = *((float *)v669 + ii);
                  v668[ii - 1] = (float)((float)(v563 * v18) * 0.0625) + v567;
                }
              }
              unint64_t v568 = v514 - 1;
              float32x4_t v569 = &v667;
              uint16x4_t v570 = v668;
              uint64_t v560 = v644;
              float v571 = v556;
              float32x4_t v572 = v668;
              uint64_t v559 = v646;
              do
              {
                float v573 = *v572++;
                float v574 = v573;
                if (v571 < v573)
                {
                  float v571 = v574;
                  float32x4_t v569 = v570;
                }
                uint16x4_t v570 = v572;
                --v568;
              }
              while (v568);
              float v558 = *v569;
            }
            float v575 = (float)(int)v514;
            double v665 = (float)(int)v514;
            float v576 = v668[v551 - 1];
            if (v576 < v556)
            {
              float v577 = v668[(v514 != 1) - 1];
              if (v556 > v577 && v556 >= (float)(v558 * *(float *)(v8 + 44)))
              {
                float v578 = (float)((float)(v576 - v577)
                             / (float)((float)((float)(v576 + v577) + (float)(v556 * -2.0))
                                     + (float)((float)(v576 + v577) + (float)(v556 * -2.0))))
                     + 0.0;
                float v579 = v578 + v575;
                if (v578 >= 0.0) {
                  float v579 = v578;
                }
                if (v578 >= v575) {
                  float v580 = v578 - v575;
                }
                else {
                  float v580 = v579;
                }
                uint64_t v581 = *(void *)v657;
                uint64_t v582 = *(void *)(v657 + 16);
                if (*(void *)v657 >= v582)
                {
                  uint64_t v583 = 2 * v582;
                  if (v583 <= v581) {
                    uint64_t v584 = v581 + 1;
                  }
                  else {
                    uint64_t v584 = v583;
                  }
                  if (v584)
                  {
                    uint64_t v585 = malloc_type_realloc(*(void **)(v657 + 8), 288 * v584, 0xEF89484BuLL);
                    uint64_t v557 = v657;
                    *(void *)(v657 + _Block_object_dispose(&STACK[0x220], 8) = v585;
                    uint64_t v581 = *(void *)v657;
                  }
                  *(void *)(v557 + 16) = v584;
                }
                *(void *)uint64_t v557 = v581 + 1;
                uint64_t v586 = *(void *)(v557 + 8) + 288 * v581;
                *(void *)uint64_t v586 = v559;
                float v587 = 360.0 - v580 * 360.0 / v665;
                *(float *)(v586 + _Block_object_dispose(&STACK[0x220], 8) = v656;
                *(float *)(v586 + 12) = v587;
                memcpy((void *)(v586 + 16), __src, 0x110uLL);
                uint64_t v588 = (void *)v647;
                uint64_t v589 = *(void *)v647;
                uint64_t v590 = *(void *)(v647 + 16);
                if (*(void *)v647 >= v590)
                {
                  uint64_t v591 = 2 * v590;
                  BOOL v200 = v590 == 0;
                  uint64_t v592 = 32;
                  if (!v200) {
                    uint64_t v592 = v591;
                  }
                  if (v592 <= v589) {
                    uint64_t v593 = v589 + 1;
                  }
                  else {
                    uint64_t v593 = v592;
                  }
                  if (v593)
                  {
                    float v594 = malloc_type_realloc(*(void **)(v647 + 8), 8 * v593, 0x2A36EB58uLL);
                    uint64_t v588 = (void *)v647;
                    *(void *)(v647 + _Block_object_dispose(&STACK[0x220], 8) = v594;
                    uint64_t v589 = *(void *)v647;
                  }
                  v588[2] = v593;
                }
                *uint64_t v588 = v589 + 1;
                *(void *)(v588[1] + 8 * v589) = v560;
                uint64_t v557 = v657;
              }
            }
            if (v514 != 1)
            {
              uint64_t v595 = 0;
              uint64_t v596 = 1;
              do
              {
                uint64_t v597 = v596 + 1;
                float v598 = *(float *)((char *)&v668[-1] + (v595 >> 30));
                float v599 = v668[v596 - 1];
                if (v598 < v599)
                {
                  uint64_t v600 = (v596 + 1);
                  if (v551 == v596) {
                    uint64_t v600 = 0;
                  }
                  float v601 = v668[v600 - 1];
                  if (v599 > v601 && v599 >= (float)(v558 * *(float *)(v8 + 44)))
                  {
                    float v602 = (float)((float)(v598 - v601)
                                 / (float)((float)((float)(v598 + v601) + (float)(v599 * -2.0))
                                         + (float)((float)(v598 + v601) + (float)(v599 * -2.0))))
                         + (float)(int)v596;
                    float v603 = v602 + v575;
                    if (v602 >= 0.0) {
                      float v603 = v602;
                    }
                    if (v602 >= v575) {
                      float v604 = v602 - v575;
                    }
                    else {
                      float v604 = v603;
                    }
                    uint64_t v605 = *(void *)v557;
                    uint64_t v606 = *(void *)(v557 + 16);
                    if (*(void *)v557 >= v606)
                    {
                      uint64_t v607 = 2 * v606;
                      if (v607 <= v605) {
                        uint64_t v608 = v605 + 1;
                      }
                      else {
                        uint64_t v608 = v607;
                      }
                      if (v608)
                      {
                        uint16x4_t v609 = malloc_type_realloc(*(void **)(v557 + 8), 288 * v608, 0xEF89484BuLL);
                        uint64_t v557 = v657;
                        *(void *)(v657 + _Block_object_dispose(&STACK[0x220], 8) = v609;
                        uint64_t v605 = *(void *)v657;
                      }
                      *(void *)(v557 + 16) = v608;
                    }
                    *(void *)uint64_t v557 = v605 + 1;
                    uint64_t v610 = *(void *)(v557 + 8) + 288 * v605;
                    *(void *)uint64_t v610 = v559;
                    float v611 = 360.0 - v604 * 360.0 / v665;
                    *(float *)(v610 + _Block_object_dispose(&STACK[0x220], 8) = v656;
                    *(float *)(v610 + 12) = v611;
                    memcpy((void *)(v610 + 16), __src, 0x110uLL);
                    uint16x4_t v612 = (void *)v647;
                    uint64_t v613 = *(void *)v647;
                    uint64_t v614 = *(void *)(v647 + 16);
                    if (*(void *)v647 >= v614)
                    {
                      uint64_t v615 = 2 * v614;
                      BOOL v200 = v614 == 0;
                      uint64_t v616 = 32;
                      if (!v200) {
                        uint64_t v616 = v615;
                      }
                      if (v616 <= v613) {
                        uint64_t v617 = v613 + 1;
                      }
                      else {
                        uint64_t v617 = v616;
                      }
                      if (v617)
                      {
                        int16x8_t v618 = malloc_type_realloc(*(void **)(v647 + 8), 8 * v617, 0x2A36EB58uLL);
                        uint16x4_t v612 = (void *)v647;
                        *(void *)(v647 + _Block_object_dispose(&STACK[0x220], 8) = v618;
                        uint64_t v613 = *(void *)v647;
                      }
                      v612[2] = v617;
                    }
                    void *v612 = v613 + 1;
                    *(void *)(v612[1] + 8 * v613) = v560;
                    uint64_t v557 = v657;
                  }
                }
                v595 += 0x100000000;
                uint64_t v596 = v597;
              }
              while (v514 != v597);
            }
          }
          uint64_t v500 = v652 + 1;
          float v17 = 4.0;
          float v18 = 6.0;
        }
        while (v652 + 1 != v641);
      }
LABEL_17:
      free(ptr);
      double v13 = v635;
      uint64_t result = v636 + 1;
    }
    while (*v635 > v636 + 1);
  }
LABEL_585:
  uint64_t v619 = *(void *)v657;
  if (*(void *)v657 >= *(void *)v647) {
    uint64_t v619 = *(void *)v647;
  }
  if (v619 >= 1)
  {
    BOOL v620 = *(float32x2_t **)(v657 + 8);
    uint16x4_t v621 = *(int **)(v647 + 8);
    do
    {
      int v622 = *v621;
      v621 += 2;
      float32x2_t *v620 = vmul_n_f32(*v620, (float)(1 << v622));
      v620 += 36;
      --v619;
    }
    while (v619);
  }
  return result;
}