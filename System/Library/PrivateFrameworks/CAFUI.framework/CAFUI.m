id CAFUIFrameworkBundle()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  v0 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 0);
  v1 = [v0 objectAtIndex:0];

  v2 = [(id)GSSystemRootDirectory() stringByAppendingPathComponent:v1];
  v3 = [v2 stringByAppendingPathComponent:@"PrivateFrameworks/CAFUI.framework"];

  v4 = [MEMORY[0x263F086E0] bundleWithPath:v3];

  return v4;
}

id CAFUIImageForSymbolName(void *a1)
{
  return CAFUIImageForSymbolNameWithConfiguration(a1, 0);
}

id CAFUIImageForSymbolNameWithConfiguration(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v5 = (void *)MEMORY[0x263F827E8];
  v6 = CAFUIFrameworkBundle();
  v7 = [v5 imageNamed:v3 inBundle:v6 withConfiguration:v4];

  if (!v7)
  {
    if (v4) {
      [MEMORY[0x263F827E8] _systemImageNamed:v3 withConfiguration:v4];
    }
    else {
    v7 = [MEMORY[0x263F827E8] _systemImageNamed:v3];
    }
  }

  return v7;
}

id CAFUIStatusLogForCategory(uint64_t a1)
{
  if (a1) {
    CAFUIStatusLogForCategory_cold_1();
  }
  if (CAFUIStatusLogForCategory_onceToken != -1) {
    dispatch_once(&CAFUIStatusLogForCategory_onceToken, &__block_literal_global);
  }
  v1 = (void *)CAFUIStatusLogForCategory_logObjects_0;

  return v1;
}

uint64_t __CAFUIStatusLogForCategory_block_invoke()
{
  CAFUIStatusLogForCategory_logObjects_0 = (uint64_t)os_log_create("com.apple.CAFUI.status", "Default");

  return MEMORY[0x270F9A758]();
}

uint64_t CAFUIStackView.__allocating_init(views:axis:minWidth:)(unint64_t a1, uint64_t a2, double a3)
{
  id v7 = objc_allocWithZone(v3);
  uint64_t v8 = specialized CAFUIStackView.init(views:axis:minWidth:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t CAFUIStackView.init(views:axis:minWidth:)(unint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = specialized CAFUIStackView.init(views:axis:minWidth:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

id CAFUIStackView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CAFUIStackView.init(coder:)()
{
}

void CAFUIStackView.init(frame:)()
{
}

id CAFUIStackView.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIStackView);
}

char *CAFUISwitchView.init(value:handler:)(char a1, uint64_t a2, uint64_t a3)
{
  id v7 = &v3[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_handler];
  *(void *)id v7 = a2;
  *((void *)v7 + 1) = a3;
  id v8 = objc_allocWithZone(MEMORY[0x263F313C8]);
  aBlock[4] = a2;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_77;
  v9 = _Block_copy(aBlock);
  swift_retain_n();
  v10 = v3;
  id v11 = objc_msgSend(v8, sel_initWithHandler_, v9);
  _Block_release(v9);
  swift_release();
  uint64_t v12 = OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch;
  *(void *)&v10[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch] = v11;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2495300D0;
  v14 = *(void **)&v10[v12];
  *(void *)(inited + 32) = v14;
  aBlock[0] = inited;
  specialized Array._endMutation()();
  unint64_t v15 = aBlock[0];
  id v16 = v14;
  v17 = (void *)specialized CAFUIStackView.init(views:axis:minWidth:)(v15, 0, 0.0);
  swift_bridgeObjectRelease();
  v18 = v17;
  v19 = (void *)MEMORY[0x24C59F610](0x6977534955464143, 0xEF77656956686374);
  objc_msgSend(v18, sel_setAccessibilityIdentifier_, v19);

  uint64_t v20 = OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch;
  id v21 = *(id *)&v18[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch];
  v22 = (void *)MEMORY[0x24C59F610](0xD000000000000017, 0x8000000249533000);
  objc_msgSend(v21, sel_setAccessibilityIdentifier_, v22);

  v23 = *(void **)&v18[v20];
  objc_msgSend(v23, sel_setOn_animated_, a1 & 1, 0);
  v24 = v18;
  id v25 = v23;
  objc_msgSend(v25, sel_addTarget_action_forControlEvents_, v24, sel_switchChangedWithSender_, 4096);

  swift_release();
  return v24;
}

void CAFUISwitchView.__allocating_init(views:axis:minWidth:)()
{
}

{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CAFUISwitchView.__ivar_destroyer()
{
  swift_release();
  v1 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch);
}

id CAFUISwitchView.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUISwitchView);
}

id CAFUIProgressView.init(frame:)(double a1, double a2, double a3, double a4)
{
  *(_DWORD *)&v4[OBJC_IVAR____TtC5CAFUI17CAFUIProgressView_progress] = 0;
  id v9 = objc_allocWithZone((Class)CAFUIProgressBarView);
  v10 = v4;
  id v11 = objc_msgSend(v9, sel_initWithFrame_, 12.0, 13.0, 80.0, 4.0);
  id v12 = objc_msgSend(self, sel__carSystemFocusColor);
  objc_msgSend(v11, sel_setBarColor_, v12);

  objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  *(void *)&v10[OBJC_IVAR____TtC5CAFUI17CAFUIProgressView_progressBarView] = v11;
  id v13 = v11;

  v31.receiver = v10;
  v31.super_class = (Class)type metadata accessor for CAFUIProgressView();
  id v14 = objc_msgSendSuper2(&v31, sel_initWithFrame_, a1, a2, a3, a4);
  unint64_t v15 = (void *)MEMORY[0x24C59F610](0xD000000000000011, 0x8000000249530130);
  objc_msgSend(v14, sel_setAccessibilityIdentifier_, v15);

  objc_msgSend(v14, sel_addSubview_, v13);
  id v16 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_2495300E0;
  id v18 = objc_msgSend(v13, sel_heightAnchor);
  id v19 = objc_msgSend(v18, sel_constraintEqualToConstant_, 4.0);

  *(void *)(v17 + 32) = v19;
  id v20 = objc_msgSend(v13, sel_centerYAnchor);
  id v21 = objc_msgSend(v14, sel_centerYAnchor);
  id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(void *)(v17 + 40) = v22;
  id v23 = objc_msgSend(v13, sel_leadingAnchor);
  id v24 = objc_msgSend(v14, sel_leadingAnchor);
  id v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_constant_, v24, 13.0);

  *(void *)(v17 + 48) = v25;
  id v26 = objc_msgSend(v13, sel_trailingAnchor);
  id v27 = objc_msgSend(v14, sel_trailingAnchor);
  id v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v27, -13.0);

  *(void *)(v17 + 56) = v28;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_activateConstraints_, isa);

  return v14;
}

id CAFUIProgressView.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIProgressView);
}

Swift::Void __swiftcall CAFUIStepperViewButton.updateColors()()
{
  switch((unint64_t)objc_msgSend(v0, sel_state))
  {
    case 1uLL:
    case 4uLL:
    case 8uLL:
      v1 = self;
      id v2 = objc_msgSend(v1, sel__carSystemFocusLabelColor);
      objc_msgSend(v0, sel_setTintColor_, v2);

      id v3 = objc_msgSend(v1, sel__carSystemFocusColor);
      goto LABEL_3;
    case 2uLL:
      v5 = self;
      id v6 = objc_msgSend(v5, sel_secondaryLabelColor);
      objc_msgSend(v0, sel_setTintColor_, v6);

      if (*((unsigned char *)v0 + OBJC_IVAR____TtC5CAFUI22CAFUIStepperViewButton_hasCellBackground) != 1) {
        goto LABEL_13;
      }
      id v4 = objc_msgSend(v5, sel_tableCellPlainBackgroundColor);
      if (v4) {
        goto LABEL_4;
      }
      __break(1u);
LABEL_10:
      v5 = self;
      id v7 = objc_msgSend(v5, sel_labelColor);
      objc_msgSend(v0, sel_setTintColor_, v7);

      if (*((unsigned char *)v0 + OBJC_IVAR____TtC5CAFUI22CAFUIStepperViewButton_hasCellBackground) != 1)
      {
        id v3 = objc_msgSend(v5, sel_secondarySystemFillColor);
LABEL_3:
        id v4 = v3;
        goto LABEL_4;
      }
      id v4 = objc_msgSend(v5, sel_tableCellPlainBackgroundColor);
      if (!v4)
      {
        __break(1u);
LABEL_13:
        id v3 = objc_msgSend(v5, sel_secondarySystemFillColor, v4);
        goto LABEL_3;
      }
LABEL_4:
      id v8 = v4;
      objc_msgSend(v0, sel_setBackgroundColor_);

      return;
    default:
      goto LABEL_10;
  }
}

id CAFUIStepperViewButton.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIStepperViewButton);
}

void CAFUINumericInputView.init(configuration:)(uint64_t a1)
{
  id v2 = v1;
  v1[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking] = 0;
  *(void *)&v1[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer] = 0;
  uint64_t v4 = OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_barView;
  *(void *)&v1[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_barView] = 0;
  uint64_t v5 = OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_slider;
  *(void *)&v1[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_slider] = 0;
  id v6 = &v1[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config];
  long long v7 = *(_OWORD *)(a1 + 48);
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v9 = *(_OWORD *)(a1 + 96);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v6 + 5) = v8;
  *((_OWORD *)v6 + 6) = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)id v6 = *(_OWORD *)a1;
  *((_OWORD *)v6 + 1) = v10;
  *((_OWORD *)v6 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 3) = v7;
  int v200 = *(unsigned __int8 *)(a1 + 32);
  if (v200 != 1)
  {
    outlined init with take of String?(a1 + 72, (uint64_t)v203);
    outlined init with take of String?((uint64_t)v203, (uint64_t)&v204);
    unint64_t v42 = v205;
    if (!v205) {
      goto LABEL_11;
    }
    uint64_t v43 = v204;
    uint64_t v44 = HIBYTE(v205) & 0xF;
    if ((v205 & 0x2000000000000000) == 0) {
      uint64_t v44 = v204 & 0xFFFFFFFFFFFFLL;
    }
    if (v44)
    {
      id v45 = objc_allocWithZone(MEMORY[0x263F828E0]);
      v46 = v2;
      outlined retain of CAFUINumericConfiguration(a1);
      outlined retain of String?((uint64_t)v203);
      id v47 = objc_msgSend(v45, sel_init);
      v48 = (void *)MEMORY[0x24C59F610](v43, v42);
      outlined release of String?((uint64_t)v203);
      objc_msgSend(v47, sel_setText_, v48);

      id v49 = v47;
      v50 = (void *)MEMORY[0x24C59F610](0xD000000000000023, 0x8000000249533040);
      objc_msgSend(v49, sel_setAccessibilityIdentifier_, v50);

      v41 = &selRef_setOpacity_;
      objc_msgSend(v49, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      id v51 = objc_msgSend(self, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F835B8]);
      id v52 = objc_msgSend(self, sel_fontWithDescriptor_size_, v51, 0.0);

      objc_msgSend(v49, sel_setFont_, v52);
      objc_msgSend(v49, sel_setEnabled_, v6[88]);
      if (*(unsigned char *)(a1 + 33))
      {
LABEL_9:
        if (v49)
        {
          id v53 = v49;
          objc_msgSend(v53, sel_setFrame_, 39.0, 0.0, 120.0, 30.0);
          v54 = self;
          id v55 = v53;
          id v56 = objc_msgSend(v54, sel_secondarySystemFillColor);
          objc_msgSend(v55, sel_setBackgroundColor_, v56);

          objc_msgSend(v55, sel_setTextAlignment_, 1);
          v194 = 0;
          v192 = v49;
          v199 = v49;
          goto LABEL_19;
        }
        id v59 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CAFUIProgressView()), sel_initWithFrame_, 39.0, 0.0, 120.0, 30.0);
        objc_msgSend(v59, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
        v60 = self;
        v61 = (char *)v59;
        id v62 = objc_msgSend(v60, sel_secondarySystemFillColor);
        objc_msgSend(v61, sel_setBackgroundColor_, v62);

        v63 = *(void **)&v61[OBJC_IVAR____TtC5CAFUI17CAFUIProgressView_progressBarView];
        v64 = &selRef__carSystemFocusColor;
        if (!v6[88]) {
          v64 = &selRef_grayColor;
        }
        id v65 = [v60 *v64];
        objc_msgSend(v63, sel_setBarColor_, v65);

        v66 = *(void **)&v2[v4];
        *(void *)&v2[v4] = v61;
        v199 = v61;
        v67 = v61;

LABEL_18:
        v194 = 0;
        v192 = 0;
        goto LABEL_19;
      }
    }
    else
    {
LABEL_11:
      v57 = v2;
      outlined retain of CAFUINumericConfiguration(a1);
      id v49 = 0;
      v41 = &selRef_setOpacity_;
      if (*(unsigned char *)(a1 + 33)) {
        goto LABEL_9;
      }
    }
    if (v49)
    {
      id v58 = v49;
      v199 = 0;
      v192 = v49;
      v194 = v49;
      goto LABEL_19;
    }
    v199 = 0;
    goto LABEL_18;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAction);
  id v11 = v1;
  outlined retain of CAFUINumericConfiguration(a1);
  id v12 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BD8]), sel_initWithFrame_primaryAction_, v12, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, closure #1 in CAFUINumericInputView.init(configuration:), 0);

  double v14 = *(double *)(a1 + 8);
  *(float *)&double v14 = v14;
  objc_msgSend(v13, sel_setMinimumValue_, v14);
  double v15 = *(double *)(a1 + 16);
  *(float *)&double v15 = v15;
  objc_msgSend(v13, sel_setMaximumValue_, v15);
  id v16 = self;
  id v17 = objc_msgSend(v16, sel__carSystemFocusColor);
  objc_msgSend(v13, sel_setMinimumTrackTintColor_, v17);

  id v18 = objc_msgSend(v16, sel_tertiaryLabelColor);
  objc_msgSend(v13, sel_setMaximumTrackTintColor_, v18);

  id v19 = v13;
  id v20 = objc_msgSend(v16, sel_whiteColor);
  id v21 = objc_msgSend(v20, sel_CGColor);

  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v21);
  objc_msgSend(v19, sel_setTintColor_, v22);

  double v23 = *(double *)a1;
  *(float *)&double v23 = *(double *)a1;
  objc_msgSend(v19, sel_setValue_, v23);
  objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v24 = v19;
  id v25 = objc_msgSend(v16, sel_clearColor);
  objc_msgSend(v24, sel_setBackgroundColor_, v25);

  objc_msgSend(v24, sel_setEnabled_, v6[88]);
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v26, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v27 = objc_msgSend(v16, sel_tableCellPlainBackgroundColor);
  if (!v27)
  {
LABEL_67:
    __break(1u);
    return;
  }
  id v28 = v27;
  objc_msgSend(v26, sel_setBackgroundColor_, v27);

  objc_msgSend(v26, sel_addSubview_, v24);
  id v198 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2495300F0;
  id v30 = objc_msgSend(v24, sel_centerYAnchor);
  id v31 = objc_msgSend(v26, sel_centerYAnchor);
  id v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_constant_, v31, -1.0);

  *(void *)(v29 + 32) = v32;
  id v33 = objc_msgSend(v24, sel_leadingAnchor);
  id v34 = objc_msgSend(v26, sel_leadingAnchor);
  id v35 = objc_msgSend(v33, sel_constraintEqualToAnchor_constant_, v34, 13.0);

  *(void *)(v29 + 40) = v35;
  id v36 = objc_msgSend(v24, sel_trailingAnchor);
  v199 = v26;
  id v37 = objc_msgSend(v26, sel_trailingAnchor);
  id v38 = objc_msgSend(v36, sel_constraintEqualToAnchor_constant_, v37, -13.0);

  *(void *)(v29 + 48) = v38;
  uint64_t v206 = v29;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v198, sel_activateConstraints_, isa);

  v40 = *(void **)&v2[v5];
  *(void *)&v2[v5] = v24;

  v194 = 0;
  v192 = 0;
  v41 = &selRef_setOpacity_;
LABEL_19:
  id v68 = objc_msgSend(self, sel_configurationWithWeight_, 5);
  uint64_t v69 = *(void *)(a1 + 48);
  if (!v69
    || (uint64_t v70 = *(void *)(a1 + 40),
        swift_bridgeObjectRetain(),
        v71 = (void *)MEMORY[0x24C59F610](v70, v69),
        swift_bridgeObjectRelease(),
        id v72 = CAFUIImageForSymbolNameWithConfiguration(v71, v68),
        v71,
        !v72))
  {
    id v73 = v68;
    v74 = (void *)MEMORY[0x24C59F610](0x73756E696DLL, 0xE500000000000000);
    id v72 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v74, v73);

    if (!v72)
    {

      __break(1u);
LABEL_66:

      __break(1u);
      goto LABEL_67;
    }
  }
  v195 = v68;
  id v75 = objc_msgSend(self, sel_sharedApplication);
  id v76 = objc_msgSend(v75, sel_userInterfaceLayoutDirection);

  type metadata accessor for CAFUIStepperViewButton();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v78 = objc_msgSend(ObjCClassFromMetadata, sel_buttonWithType_, 0);
  v191 = v72;
  id v79 = objc_msgSend(v72, sel_imageWithRenderingMode_, 2);
  objc_msgSend(v78, sel_setImage_forState_, v79, 0);

  id v80 = objc_msgSend(v78, sel_layer);
  v81 = v80;
  if (v76 == (id)1) {
    uint64_t v82 = 10;
  }
  else {
    uint64_t v82 = 5;
  }
  objc_msgSend(v80, sel_setMaskedCorners_, v82);

  id v83 = objc_msgSend(v78, sel_layer);
  objc_msgSend(v83, sel_setCornerRadius_, 5.0);

  objc_msgSend(v78, v41[13], 0);
  *((unsigned char *)v78 + OBJC_IVAR____TtC5CAFUI22CAFUIStepperViewButton_hasCellBackground) = v200;
  *(void *)&v2[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_decrementButton] = v78;
  outlined init with take of String?(a1 + 56, (uint64_t)v202);
  outlined init with take of String?((uint64_t)v202, (uint64_t)&v206);
  uint64_t v84 = v207;
  if (v207)
  {
    uint64_t v85 = v206;
    id v86 = v78;
    outlined retain of String?((uint64_t)v202);
    v87 = (void *)MEMORY[0x24C59F610](v85, v84);
    outlined release of String?((uint64_t)v202);
    id v88 = CAFUIImageForSymbolNameWithConfiguration(v87, v68);

    if (v88) {
      goto LABEL_30;
    }
  }
  else
  {
    id v89 = v78;
  }
  id v90 = v68;
  v91 = (void *)MEMORY[0x24C59F610](1937075312, 0xE400000000000000);
  id v92 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v91, v90);

  id v88 = v92;
  if (!v92) {
    goto LABEL_66;
  }
LABEL_30:
  id v93 = objc_msgSend(ObjCClassFromMetadata, sel_buttonWithType_, 0);
  v190 = v88;
  id v94 = objc_msgSend(v88, sel_imageWithRenderingMode_, 2);
  objc_msgSend(v93, sel_setImage_forState_, v94, 0);

  id v95 = objc_msgSend(v93, sel_layer);
  v96 = v95;
  if (v76 == (id)1) {
    uint64_t v97 = 5;
  }
  else {
    uint64_t v97 = 10;
  }
  objc_msgSend(v95, sel_setMaskedCorners_, v97);

  id v98 = objc_msgSend(v93, sel_layer);
  objc_msgSend(v98, sel_setCornerRadius_, 5.0);

  objc_msgSend(v93, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  *((unsigned char *)v93 + OBJC_IVAR____TtC5CAFUI22CAFUIStepperViewButton_hasCellBackground) = v200;
  *(void *)&v2[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_incrementButton] = v93;
  id v99 = v93;

  unint64_t v201 = MEMORY[0x263F8EE78];
  if (v194)
  {
    v100 = v199;
    id v101 = v199;
    id v102 = v194;
    id v103 = v78;
    id v104 = v99;
    id v105 = v102;
    MEMORY[0x24C59F700]();
    if (*(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  else
  {
    v100 = v199;
    id v106 = v199;
    id v107 = v78;
    id v108 = v99;
  }
  id v109 = v78;
  MEMORY[0x24C59F700]();
  if (*(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (v100)
  {
    id v110 = v100;
    MEMORY[0x24C59F700]();
    if (*(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v111 = v99;
  MEMORY[0x24C59F700]();
  if (*(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  v112 = (void *)specialized CAFUIStackView.init(views:axis:minWidth:)(v201, 0, 0.0);
  swift_bridgeObjectRelease();
  v113 = v112;
  v114 = (void *)MEMORY[0x24C59F610](0xD000000000000015, 0x8000000249530170);
  objc_msgSend(v113, sel_setAccessibilityIdentifier_, v114);

  uint64_t v115 = OBJC_IVAR____TtC5CAFUI14CAFUIStackView_stackView;
  objc_msgSend(*(id *)&v113[OBJC_IVAR____TtC5CAFUI14CAFUIStackView_stackView], sel_setSpacing_, 1.0);
  id v116 = self;
  v117 = v113;
  uint64_t v187 = v115;
  v188 = v113;
  if ((v200 & 1) == 0) {
    goto LABEL_49;
  }
  id v116 = objc_msgSend(v116, sel_tableBackgroundColor);
  v118 = &off_26525C000;
  if (!v116)
  {
    __break(1u);
LABEL_49:
    id v116 = objc_msgSend(v116, sel_clearColor);
    v118 = &off_26525C000;
  }
  objc_msgSend(v117, (SEL)v118[493], v116);

  id v193 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v119 = swift_allocObject();
  *(_OWORD *)(v119 + 16) = xmmword_249530100;
  id v120 = objc_msgSend(v109, sel_widthAnchor);
  v121 = v109;
  id v122 = objc_msgSend(v120, sel_constraintEqualToConstant_, 50.0);

  *(void *)(v119 + 32) = v122;
  id v123 = objc_msgSend(v111, sel_widthAnchor);
  id v124 = objc_msgSend(v121, sel_widthAnchor);
  id v125 = objc_msgSend(v123, sel_constraintEqualToAnchor_, v124);

  *(void *)(v119 + 40) = v125;
  id v126 = objc_msgSend(v121, sel_topAnchor);
  id v127 = objc_msgSend(v117, sel_topAnchor);
  id v128 = objc_msgSend(v126, sel_constraintEqualToAnchor_, v127);

  *(void *)(v119 + 48) = v128;
  id v129 = objc_msgSend(v111, sel_topAnchor);
  id v130 = objc_msgSend(v117, sel_topAnchor);
  id v131 = objc_msgSend(v129, sel_constraintEqualToAnchor_, v130);

  *(void *)(v119 + 56) = v131;
  id v197 = v121;
  id v132 = objc_msgSend(v121, sel_bottomAnchor);
  id v133 = objc_msgSend(v117, sel_bottomAnchor);
  id v134 = objc_msgSend(v132, sel_constraintEqualToAnchor_, v133);

  *(void *)(v119 + 64) = v134;
  id v196 = v111;
  v135 = v111;
  v136 = v193;
  id v137 = objc_msgSend(v135, sel_bottomAnchor);
  id v138 = objc_msgSend(v117, sel_bottomAnchor);
  id v139 = objc_msgSend(v137, sel_constraintEqualToAnchor_, v138);

  *(void *)(v119 + 72) = v139;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class v140 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v141 = &off_26525C000;
  objc_msgSend(v193, sel_activateConstraints_, v140);

  if (v199)
  {
    uint64_t v142 = swift_allocObject();
    *(_OWORD *)(v142 + 16) = xmmword_249530110;
    id v143 = v199;
    id v144 = objc_msgSend(v143, sel_topAnchor);
    id v145 = objc_msgSend(v117, sel_topAnchor);
    id v146 = objc_msgSend(v144, sel_constraintEqualToAnchor_, v145);

    *(void *)(v142 + 32) = v146;
    id v189 = v143;
    v147 = v143;
    v136 = v193;
    id v148 = objc_msgSend(v147, sel_bottomAnchor);
    id v149 = objc_msgSend(v117, sel_bottomAnchor);
    id v150 = objc_msgSend(v148, sel_constraintEqualToAnchor_, v149);

    *(void *)(v142 + 40) = v150;
    specialized Array._endMutation()();
    Class v151 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v193, sel_activateConstraints_, v151);

    if (v200)
    {
      uint64_t v152 = swift_allocObject();
      *(_OWORD *)(v152 + 16) = xmmword_249530110;
      id v153 = objc_msgSend(v189, sel_leadingAnchor);
      id v154 = objc_msgSend(v197, sel_trailingAnchor);
      objc_msgSend(*(id *)&v188[v187], sel_spacing);
      id v155 = objc_msgSend(v153, sel_constraintEqualToAnchor_constant_, v154);

      *(void *)(v152 + 32) = v155;
      v136 = v193;
      id v156 = objc_msgSend(v189, sel_trailingAnchor);
      id v157 = objc_msgSend(v196, sel_leadingAnchor);
      v141 = &off_26525C000;
      objc_msgSend(*(id *)&v188[v187], sel_spacing);
      id v159 = objc_msgSend(v156, sel_constraintEqualToAnchor_constant_, v157, -v158);

      *(void *)(v152 + 40) = v159;
    }
    else
    {
      uint64_t v160 = swift_allocObject();
      *(_OWORD *)(v160 + 16) = xmmword_2495300D0;
      id v161 = objc_msgSend(v189, sel_widthAnchor);
      id v162 = objc_msgSend(v161, sel_constraintEqualToConstant_, 120.0);

      *(void *)(v160 + 32) = v162;
    }
    specialized Array._endMutation()();
    Class v163 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v136, (SEL)v141[411], v163);
  }
  if (v194)
  {
    uint64_t v164 = swift_allocObject();
    *(_OWORD *)(v164 + 16) = xmmword_2495300D0;
    id v165 = v194;
    id v166 = objc_msgSend(v165, sel_trailingAnchor);
    id v167 = objc_msgSend(v197, sel_leadingAnchor);
    id v168 = objc_msgSend(v166, sel_constraintEqualToAnchor_constant_, v167, -7.0);

    *(void *)(v164 + 32) = v168;
    specialized Array._endMutation()();
    Class v169 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v136, (SEL)v141[411], v169);
  }
  if ((v200 & 1) == 0)
  {
    id v170 = objc_msgSend(v117, sel_layer);
    objc_msgSend(v170, sel_setShadowOffset_, 0.0, 2.0);

    id v171 = objc_msgSend(v117, sel_layer);
    id v172 = objc_msgSend(self, sel_blackColor);
    id v173 = objc_msgSend(v172, sel_CGColor);

    objc_msgSend(v171, sel_setShadowColor_, v173);
    id v174 = objc_msgSend(v117, sel_layer);
    objc_msgSend(v174, sel_setShadowRadius_, 2.0);

    id v175 = objc_msgSend(v117, sel_layer);
    LODWORD(v176) = 1036831949;
    objc_msgSend(v175, sel_setShadowOpacity_, v176);

    id v177 = objc_msgSend(v117, sel_layer);
    objc_msgSend(v177, sel_setMasksToBounds_, 0);

    objc_msgSend(v117, sel_setClipsToBounds_, 0);
    uint64_t v178 = swift_allocObject();
    *(_OWORD *)(v178 + 16) = xmmword_2495300D0;
    id v179 = objc_msgSend(v197, sel_heightAnchor);
    id v180 = objc_msgSend(v179, sel_constraintEqualToConstant_, 32.0);

    *(void *)(v178 + 32) = v180;
    specialized Array._endMutation()();
    Class v181 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v193, (SEL)v141[411], v181);
  }
  objc_msgSend(v197, sel_addTarget_action_forControlEvents_, v117, sel_buttonValueChangedWithSender_, 4096);
  objc_msgSend(v196, sel_addTarget_action_forControlEvents_, v117, sel_buttonValueChangedWithSender_, 4096);
  objc_msgSend(v197, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchDownWithSender_, 1);
  objc_msgSend(v196, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchDownWithSender_, 1);
  objc_msgSend(v197, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchCancelWithSender_, 416);
  objc_msgSend(v196, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchCancelWithSender_, 416);
  objc_msgSend(v197, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchUpWithSender_, 64);
  objc_msgSend(v196, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchUpWithSender_, 64);
  uint64_t v182 = OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_slider;
  v183 = *(void **)&v117[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_slider];
  if (v183)
  {
    objc_msgSend(v183, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchDownWithSender_, 1);
    v184 = *(void **)&v117[v182];
    if (v184)
    {
      objc_msgSend(v184, sel_addTarget_action_forControlEvents_, v117, sel_sliderChangedWithSender_, 4096);
      v185 = *(void **)&v117[v182];
      if (v185)
      {
        objc_msgSend(v185, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchUpWithSender_, 64);
        v186 = *(void **)&v117[v182];
        if (v186) {
          objc_msgSend(v186, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchCancelWithSender_, 416);
        }
      }
    }
  }
  CAFUINumericInputView.updateButtons()();
  outlined release of CAFUINumericConfiguration(a1);
}

void CAFUINumericInputView.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_slider);
}

id CAFUINumericInputView.__deallocating_deinit()
{
  v1 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer];
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer] = 0;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CAFUINumericInputView();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id CAFUINumericInputView.updateButtons()()
{
  uint64_t v1 = v0;
  os_log_type_t v2 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v2, 0xD000000000000018, 0x8000000249533020, 0x7542657461647075, 0xEF2928736E6F7474);
  objc_super v3 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_decrementButton);
  uint64_t v4 = v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config + 88) == 1
    && *(double *)(v4 + 8) < *(double *)v4)
  {
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking);
  }
  objc_msgSend(v3, sel_setEnabled_, v5);
  CAFUIStepperViewButton.updateColors()();
  if (*(unsigned char *)(v4 + 88) == 1 && (double v6 = *(double *)v4, *(double *)v4 < *(double *)(v4 + 16))) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking);
  }
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_incrementButton), sel_setEnabled_, v7, v6);
  CAFUIStepperViewButton.updateColors()();
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_barView);
  if (v8)
  {
    double v9 = *(double *)(v4 + 8);
    float v10 = *(double *)v4 - v9;
    *(float *)&double v9 = *(double *)(v4 + 16) - v9;
    float v11 = v10 / *(float *)&v9;
    *(float *)(v8 + OBJC_IVAR____TtC5CAFUI17CAFUIProgressView_progress) = v11;
    objc_msgSend(*(id *)(v8 + OBJC_IVAR____TtC5CAFUI17CAFUIProgressView_progressBarView), sel_setProgress_, v11);
  }
  id result = *(id *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_slider);
  if (result)
  {
    double v13 = *(double *)v4;
    *(float *)&double v13 = *(double *)v4;
    return objc_msgSend(result, sel_setValue_, v13);
  }
  return result;
}

Swift::Void __swiftcall CAFUINumericInputView.buttonTouchDown(sender:)(UIControl *sender)
{
  type metadata accessor for CAFUIStepperViewButton();
  uint64_t v3 = swift_dynamicCastClass();
  if (!v3) {
    return;
  }
  uint64_t v4 = v3;
  uint64_t v5 = OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer;
  double v6 = *(void **)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer);
  if (v6)
  {
    id v16 = sender;
    if (objc_msgSend(v6, sel_isValid))
    {

      return;
    }
  }
  else
  {
    uint64_t v7 = sender;
  }
  uint64_t v8 = self;
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v4;
  aBlock[4] = partial apply for closure #1 in CAFUINumericInputView.buttonTouchDown(sender:);
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  aBlock[3] = &block_descriptor_74;
  float v11 = _Block_copy(aBlock);
  id v12 = sender;
  swift_release();
  id v13 = objc_msgSend(v8, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v11, 0.1);
  _Block_release(v11);
  double v14 = *(void **)(v1 + v5);
  *(void *)(v1 + v5) = v13;
  id v15 = v13;
  objc_msgSend(v14, sel_invalidate);
  if (!*(void *)(v1 + v5))
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking) = 0;
    CAFUINumericInputView.updateButtons()();
  }

  CAFUIStepperViewButton.updateColors()();
}

void closure #1 in CAFUINumericInputView.buttonTouchDown(sender:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = (char *)MEMORY[0x24C5A0810](v4);
  if (v5)
  {
    double v6 = v5;
    uint64_t v7 = *(void **)&v5[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer];
    if (v7)
    {
      id v8 = v7;
      if (objc_msgSend(v8, sel_isValid))
      {
        v6[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking] = 1;
        objc_msgSend(a3, sel_sendActionsForControlEvents_, 4096);
        uint64_t v9 = *(void (**)(uint64_t, double))&v6[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config + 96];
        double v10 = *(double *)&v6[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config];
        uint64_t v11 = swift_retain();
        v9(v11, v10);

        swift_release();
      }
      else
      {
      }
    }
    else
    {
    }
  }
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

Swift::Void __swiftcall CAFUINumericInputView.buttonTouchCancel(sender:)(UIControl *sender)
{
  os_log_type_t v2 = v1;
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v26 - 8);
  ((void (*)(void))MEMORY[0x270FA5388])();
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  ((void (*)(void))MEMORY[0x270FA5388])();
  id v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  id v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  id v15 = (char *)&v24 - v14;
  uint64_t v16 = OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer;
  id v17 = *(void **)&v2[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer];
  *(void *)&v2[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer] = 0;
  objc_msgSend(v17, sel_invalidate);
  if (!*(void *)&v2[v16])
  {
    v2[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking] = 0;
    CAFUINumericInputView.updateButtons()();
  }

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v18 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  MEMORY[0x24C59F520](v13, 0.1);
  id v25 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25(v13, v9);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sender;
  *(void *)(v19 + 24) = v2;
  aBlock[4] = partial apply for closure #1 in CAFUINumericInputView.buttonTouchCancel(sender:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor;
  id v20 = _Block_copy(aBlock);
  id v21 = sender;
  id v22 = v2;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v23 = v26;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24C59F8C0](v15, v8, v5, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v23);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
  v25(v15, v9);
}

uint64_t closure #1 in CAFUINumericInputView.buttonTouchCancel(sender:)(void *a1, uint64_t a2)
{
  type metadata accessor for CAFUIStepperViewButton();
  if (swift_dynamicCastClass())
  {
    id v4 = a1;
    CAFUIStepperViewButton.updateColors()();
  }
  *(unsigned char *)(a2 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking) = 0;
  uint64_t v5 = (double *)(a2 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config);
  uint64_t v6 = *(void (**)(uint64_t, double))(a2 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config + 96);
  double v7 = *v5;
  uint64_t v8 = swift_retain();
  v6(v8, v7);

  return swift_release();
}

uint64_t CAFUINumericInputView.buttonValueChanged(sender:)()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t result = static NSObject.== infix(_:_:)();
  os_log_type_t v2 = (double *)(v0 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config);
  double v3 = *(double *)(v0 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config);
  if (result)
  {
    double v4 = v2[1];
    if (v4 >= v3) {
      return result;
    }
    double v5 = v3 - v2[3];
    if (v4 > v5) {
      double v5 = v2[1];
    }
  }
  else
  {
    double v6 = v2[2];
    if (v3 >= v6) {
      return result;
    }
    double v5 = v3 + v2[3];
    if (v5 >= v6) {
      double v5 = v2[2];
    }
  }
  *os_log_type_t v2 = v5;

  return (uint64_t)CAFUINumericInputView.updateButtons()();
}

Swift::Void __swiftcall CAFUINumericInputView.sliderChanged(sender:)(UISlider *sender)
{
  [(UISlider *)sender value];
  float v3 = v2;
  uint64_t v4 = v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config;
  float v5 = *(double *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config + 24);
  *(double *)uint64_t v4 = (float)(v2 - fmodf(v2, v5));
  float v6 = *(double *)(v4 + 8);
  if (v3 == v6)
  {
    if (objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_decrementButton), sel_isEnabled))goto LABEL_11; {
    float v6 = *(double *)(v4 + 8);
    }
  }
  if (v3 > v6
    && !objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_decrementButton), sel_isEnabled))
  {
    goto LABEL_11;
  }
  float v7 = *(double *)(v4 + 16);
  if (v3 == v7)
  {
    if ((objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_incrementButton), sel_isEnabled) & 1) == 0)
    {
      float v7 = *(double *)(v4 + 16);
      goto LABEL_9;
    }
LABEL_11:
    CAFUINumericInputView.updateButtons()();
    goto LABEL_12;
  }
LABEL_9:
  if (v3 < v7
    && (objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_incrementButton), sel_isEnabled) & 1) == 0)
  {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v8 = *(void (**)(uint64_t, double))(v4 + 96);
  double v9 = *(double *)v4;
  uint64_t v10 = swift_retain();
  v8(v10, v9);

  swift_release();
}

void CAFUINumericInputView.__allocating_init(views:axis:minWidth:)()
{
}

void one-time initialization function for targetHeight()
{
  static CAFUISegmentedControl.targetHeight = 0x4040000000000000;
}

Swift::Void __swiftcall CAFUISegmentedControl.layoutSubviews()()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CAFUISegmentedControl();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  objc_msgSend(v0, sel_frame);
  double v2 = v1;
  if (one-time initialization token for targetHeight != -1) {
    swift_once();
  }
  if (v2 != *(double *)&static CAFUISegmentedControl.targetHeight)
  {
    objc_msgSend(v0, sel_frame);
    objc_msgSend(v0, sel_setFrame_, 0.0, 0.0);
  }
}

id CAFUIStackView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

id CAFUISegmentedControl.init(frame:)(double a1, double a2, double a3, double a4)
{
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for CAFUISegmentedControl();
  return objc_msgSendSuper2(&v10, sel_initWithFrame_, a1, a2, a3, a4);
}

id CAFUISegmentedControl.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id CAFUISegmentedControl.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for CAFUISegmentedControl();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id CAFUISegmentedControl.__allocating_init(items:)(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithItems_, v2.super.isa);

  return v3;
}

id CAFUISegmentedControl.init(items:)(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for CAFUISegmentedControl();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithItems_, v2.super.isa);

  return v3;
}

id CAFUISegmentedControl.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUISegmentedControl);
}

id CAFUIStackView.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t variable initialization expression of CAFUIAutomakerSettingCell.representable()
{
  return 0;
}

uint64_t variable initialization expression of CAFUISoundSettingsViewController.audioSettings()
{
  return 0;
}

uint64_t variable initialization expression of CAFUITileBaseCell.isParentCell()
{
  return 0;
}

uint64_t variable initialization expression of CAFUITileBaseCell.automakerSettingConfiguration@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CAFUITileBaseCell.automakerSettingConfiguration(type metadata accessor for CAFUIAutomakerSettingConfiguration, a1);
}

uint64_t variable initialization expression of CAFUIAutomakerSettingObserver.delegate()
{
  return 0;
}

id variable initialization expression of CAFUIAccountManager.accountStore()
{
  id v0 = objc_msgSend(self, sel_defaultStore);

  return v0;
}

double variable initialization expression of CAFUIImageRepresentableItem.userInfo@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of CAFUIImageRepresentableItem.accentColor()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIBadgeView.$__lazy_storage_$_label()
{
  return 0;
}

uint64_t variable initialization expression of CAFUICabinView.overlayView()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIBalanceFadeView.hasButtons()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIListItemCell.item()
{
  return 0;
}

uint64_t variable initialization expression of CAFUICollectionViewController.emptyView()
{
  return 0;
}

uint64_t variable initialization expression of CAFUICollectionViewController.itemSize()
{
  return 0;
}

uint64_t variable initialization expression of CAFUICollectionViewController.collectionViewSize()
{
  return 0;
}

uint64_t variable initialization expression of CAFUICollectionViewController.minimumInteritemSpacing()
{
  return 0;
}

uint64_t variable initialization expression of CAFUITileDataSource.collectionView()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDataListItem.symbol()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDataListItem.text()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDataListItem.secondaryText()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDataListItem.badgeText()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDataListItem.limitedUIImage()
{
  return 0;
}

uint64_t variable initialization expression of CAFUITileViewController.presentedPTIdentifier()
{
  return 0;
}

uint64_t variable initialization expression of CAFUITileViewController.focusLockIndexPath@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CAFUITileBaseCell.automakerSettingConfiguration(MEMORY[0x263F07A30], a1);
}

uint64_t variable initialization expression of CAFUITileViewController.limiting()
{
  return 0;
}

unint64_t variable initialization expression of CAFUISoundSettingsViewController.cancellables()
{
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) == 0 || !_CocoaArrayWrapper.endIndex.getter()) {
    return MEMORY[0x263F8EE88];
  }
  unint64_t v2 = MEMORY[0x263F8EE78];
  return specialized Set.init(_nonEmptyArrayLiteral:)(v2);
}

uint64_t variable initialization expression of CAFUITileViewController.punchThroughState()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.delegate()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.$__lazy_storage_$_cellSize()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.$__lazy_storage_$_rows()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.$__lazy_storage_$_columns()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.$__lazy_storage_$_layoutStyle()
{
  return 4;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.$__lazy_storage_$_isPortraitLayout()
{
  return 2;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.limitedUIView()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.punchThroughState()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.ptButton()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.pageControl()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.pageControlHeightConstraint()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.carSession()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.spinnerTimer()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.spinningCellIndexPath@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CAFUITileBaseCell.automakerSettingConfiguration(MEMORY[0x263F07A30], a1);
}

uint64_t variable initialization expression of CAFUITileBaseCell.automakerSettingConfiguration@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t variable initialization expression of CAFUIProminentSettingCell.representable()
{
  return 0;
}

id variable initialization expression of CAFUIProminentSettingCell.imageColor()
{
  id v0 = objc_msgSend(self, sel_systemGrayColor);

  return v0;
}

uint64_t variable initialization expression of CAFUIProminentSettingCell.customPlatterView()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIMulticastLabel.forceDark()
{
  return 0;
}

void protocol witness for SetAlgebra.init() in conformance UIControlEvents(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance UIControlEvents@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance UIControlEvents(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance UIControlEvents(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance UIControlEvents(void *result)
{
  *v1 &= *result;
  return result;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIPageViewControllerOptionsKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIPageViewControllerOptionsKey(a1, a2, MEMORY[0x263F07B58]);
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance CAFSettingsCategory@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UIUserInterfaceStyle(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CAFSettingProminenceLevel(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CAFImageColor(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UIPageViewControllerOptionsKey(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UIPageViewControllerOptionsKey(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UIPageViewControllerOptionsKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x24C59F610](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIPageViewControllerOptionsKey(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIPageViewControllerOptionsKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UIPageViewControllerOptionsKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UIPageViewControllerOptionsKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance UIControlEvents@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance CARLimitableUserInterfaces(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance CARLimitableUserInterfaces(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSNotificationName@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CAFImageColor(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UIPageViewControllerOptionsKey()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIPageViewControllerOptionsKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, type metadata accessor for UIPageViewControllerOptionsKey);
  uint64_t v3 = lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, type metadata accessor for UIPageViewControllerOptionsKey);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UIPageViewControllerOptionsKey@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x24C59F610](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  uint64_t v3 = lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t specialized CAFUIStackView.init(views:axis:minWidth:)(unint64_t a1, uint64_t a2, double a3)
{
  *(double *)&v3[OBJC_IVAR____TtC5CAFUI14CAFUIStackView_minWidth] = a3;
  id v6 = objc_allocWithZone(MEMORY[0x263F82BF8]);
  float v7 = v3;
  id v8 = objc_msgSend(v6, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v8, sel_setAxis_, a2);
  if (a2) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 3;
  }
  objc_msgSend(v8, sel_setAlignment_, v9);
  objc_msgSend(v8, sel_setDistribution_, 0);
  objc_msgSend(v8, sel_setSpacing_, 10.0);
  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  *(void *)&v7[OBJC_IVAR____TtC5CAFUI14CAFUIStackView_stackView] = v8;
  id v10 = v8;

  v32.receiver = v7;
  v32.super_class = (Class)type metadata accessor for CAFUIStackView();
  id v11 = objc_msgSendSuper2(&v32, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v11, sel_addSubview_, v10);
  uint64_t v12 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_2495300E0;
  id v14 = objc_msgSend(v10, sel_leadingAnchor);
  id v15 = objc_msgSend(v11, sel_leadingAnchor);
  id v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

  *(void *)(v13 + 32) = v16;
  id v17 = objc_msgSend(v10, sel_trailingAnchor);
  id v18 = objc_msgSend(v11, sel_trailingAnchor);
  id v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  *(void *)(v13 + 40) = v19;
  id v20 = objc_msgSend(v10, sel_topAnchor);
  id v21 = objc_msgSend(v11, sel_topAnchor);
  id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(void *)(v13 + 48) = v22;
  id v23 = objc_msgSend(v10, sel_bottomAnchor);
  id v24 = objc_msgSend(v11, sel_bottomAnchor);
  id v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  *(void *)(v13 + 56) = v25;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_activateConstraints_, isa);

  if (!(a1 >> 62))
  {
    uint64_t v27 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v27) {
      goto LABEL_6;
    }
LABEL_13:

    swift_bridgeObjectRelease();
    return (uint64_t)v11;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v27 = result;
  if (!result) {
    goto LABEL_13;
  }
LABEL_6:
  if (v27 >= 1)
  {
    for (uint64_t i = 0; i != v27; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v30 = (id)MEMORY[0x24C59FC50](i, a1);
      }
      else {
        id v30 = *(id *)(a1 + 8 * i + 32);
      }
      id v31 = v30;
      objc_msgSend(v10, sel_addArrangedSubview_, v30);
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CAFUIStackView()
{
  return self;
}

uint64_t type metadata accessor for CAFUISegmentedControl()
{
  return self;
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      unint64_t v3 = result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v5) {
        return v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v3 = MEMORY[0x263F8EE88];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  unint64_t v8 = v3 + 56;
  unint64_t v22 = v1 & 0xC000000000000001;
  unint64_t v19 = v1 + 32;
  uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v21 = v1;
  while (v22)
  {
    uint64_t result = MEMORY[0x24C59FC50](v7, v1);
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_26;
    }
LABEL_18:
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x263EFDD18]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x263EFDD18]);
      do
      {
        uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result)
        {
          uint64_t result = swift_release();
          unint64_t v1 = v21;
          goto LABEL_11;
        }
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
      }
      while ((v14 & (1 << v12)) != 0);
      unint64_t v1 = v21;
    }
    *(void *)(v8 + 8 * v13) = v15 | v14;
    *(void *)(*(void *)(v3 + 48) + 8 * v12) = v9;
    uint64_t v17 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v17, 1);
    uint64_t v18 = v17 + 1;
    if (v10) {
      goto LABEL_27;
    }
    *(void *)(v3 + 16) = v18;
LABEL_11:
    if (v7 == v5) {
      return v3;
    }
  }
  if (v7 >= *(void *)(v20 + 16)) {
    goto LABEL_28;
  }
  unint64_t v9 = *(void *)(v19 + 8 * v7);
  uint64_t result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CAFUISwitchView()
{
  return self;
}

uint64_t type metadata accessor for CAFUIProgressView()
{
  return self;
}

uint64_t type metadata accessor for CAFUIStepperViewButton()
{
  return self;
}

uint64_t type metadata accessor for CAFUINumericInputView()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for CAFUINumericConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for CAFUINumericConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for CAFUINumericConfiguration(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CAFUINumericConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for CAFUINumericConfiguration(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUINumericConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUINumericConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 96) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUINumericConfiguration()
{
  return &type metadata for CAFUINumericConfiguration;
}

void type metadata accessor for CAFSettingsCategory(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for UIPageViewControllerOptionsKey(uint64_t a1)
{
}

uint64_t base witness table accessor for RawRepresentable in UIPageViewControllerOptionsKey()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, type metadata accessor for UIPageViewControllerOptionsKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIPageViewControllerOptionsKey()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, type metadata accessor for UIPageViewControllerOptionsKey);
}

uint64_t lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in UIPageViewControllerOptionsKey()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, type metadata accessor for UIPageViewControllerOptionsKey);
}

uint64_t sub_2494B71B0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in CAFUINumericInputView.buttonTouchCancel(sender:)()
{
  return closure #1 in CAFUINumericInputView.buttonTouchCancel(sender:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_2494B72F8()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2494B7330()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in CAFUINumericInputView.buttonTouchDown(sender:)(uint64_t a1)
{
  closure #1 in CAFUINumericInputView.buttonTouchDown(sender:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of CAFUINumericConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of CAFUINumericConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of String?(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for NSObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for CAFSettingsCategory(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void CAFUIDevicePickerViewController.ptButton.setter()
{
}

void __swiftcall UIButton.init(alertButtonTitle:)(UIButton *__return_ptr retstr, Swift::String alertButtonTitle)
{
  object = alertButtonTitle._object;
  uint64_t countAndFlagsBits = alertButtonTitle._countAndFlagsBits;
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v5 = (void *)MEMORY[0x24C59F610](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v6 = CAFUILocalizedStringForKey(v5);

  if (!v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = (id)MEMORY[0x24C59F610](v7);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v4, sel_setTitle_forState_, v6, 0);

  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  unint64_t v8 = self;
  id v9 = v4;
  id v10 = objc_msgSend(v8, sel_tertiarySystemFillColor);
  objc_msgSend(v9, sel_setBackgroundColor_, v10);

  id v11 = objc_msgSend(v8, sel__carSystemFocusColor);
  objc_msgSend(v9, sel_setTitleColor_forState_, v11, 0);

  id v12 = objc_msgSend(v8, sel__carSystemFocusColor);
  id v13 = objc_msgSend(v12, sel_colorWithAlphaComponent_, 0.24);

  objc_msgSend(v9, sel_setTitleColor_forState_, v13, 1);
  objc_msgSend(v9, sel__setCornerRadius_, 8.0);
  uint64_t v14 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_249530110;
  id v16 = objc_msgSend(v9, sel_widthAnchor);
  if (one-time initialization token for size != -1) {
    swift_once();
  }
  id v17 = objc_msgSend(v16, sel_constraintEqualToConstant_, *(double *)&static UIButton.Constants.size);

  *(void *)(v15 + 32) = v17;
  id v18 = objc_msgSend(v9, sel_heightAnchor);
  id v19 = objc_retainAutoreleasedReturnValue(objc_msgSend(v18, sel_constraintEqualToConstant_, *((double *)&static UIButton.Constants.size
                                                                                             + 1)));

  *(void *)(v15 + 40) = v19;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, isa);
}

id CAFUILocalizedStringForKey(void *a1)
{
  id v1 = a1;
  uint64_t v2 = CAFUIFrameworkBundle();
  char v3 = [v2 localizedStringForKey:v1 value:&stru_26FD25578 table:@"Localizable"];

  return v3;
}

void *UIButton.Constants.cornerRadius.unsafeMutableAddressor()
{
  return &static UIButton.Constants.cornerRadius;
}

double static UIButton.Constants.cornerRadius.getter()
{
  return 8.0;
}

double one-time initialization function for size()
{
  double result = 241.0;
  static UIButton.Constants.size = xmmword_2495305B0;
  return result;
}

unint64_t type metadata accessor for NSLayoutConstraint()
{
  unint64_t result = lazy cache variable for type metadata for NSLayoutConstraint;
  if (!lazy cache variable for type metadata for NSLayoutConstraint)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  }
  return result;
}

ValueMetadata *type metadata accessor for UIButton.Constants()
{
  return &type metadata for UIButton.Constants;
}

id CAFPairedDevice.decoratorImage.getter()
{
  id v1 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x263F83610]);
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_configurationWithFont_scale_, v1, 2);

  id v4 = v3;
  if (objc_msgSend(v0, sel_state) == 2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_249530110;
    id v6 = self;
    *(void *)(v5 + 32) = objc_msgSend(v6, sel_systemWhiteColor);
    *(void *)(v5 + 40) = objc_msgSend(v6, sel_systemGreenColor);
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIColor);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v8 = objc_msgSend(v2, sel_configurationWithPaletteColors_, isa);

    id v9 = objc_msgSend(v4, sel_configurationByApplyingConfiguration_, v8);
    id v10 = v9;
    id v11 = (void *)MEMORY[0x24C59F610](0xD000000000000015, 0x8000000249533130);
    id v12 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v11, v10);
  }
  else
  {

    return 0;
  }
  return v12;
}

uint64_t CAFPairedDevicesInformation.symbolName.getter()
{
  return 0;
}

uint64_t CAFPairedDevicesInformation.prominenceInfo.getter()
{
  return 0;
}

uint64_t CAFPairedDevicesInformation.allowsMultipleSelection.getter()
{
  return 1;
}

uint64_t CAFPairedDevicesInformation.detailLabel.getter()
{
  id v1 = objc_msgSend(v0, sel_pairedDeviceList);
  id v2 = objc_msgSend(v1, sel_pairedDevices);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v4 == 1)
  {
    uint64_t v5 = (void *)MEMORY[0x24C59F610](0xD000000000000018, 0x8000000249533090);
    id v6 = CAFUILocalizedStringForKey(v5);
    goto LABEL_7;
  }
  if (!v4)
  {
    uint64_t v5 = (void *)MEMORY[0x24C59F610](0xD000000000000019, 0x80000002495330B0);
    id v6 = CAFUILocalizedStringForKey(v5);
LABEL_7:
    id v7 = v6;

    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    return v8;
  }
  id v10 = (void *)MEMORY[0x24C59F610](0xD000000000000018, 0x8000000249533070);
  id v11 = CAFUILocalizedStringForKey(v10);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x263F8D6C8];
  *(_OWORD *)(v12 + 16) = xmmword_2495305E0;
  uint64_t v14 = MEMORY[0x263F8D750];
  *(void *)(v12 + 56) = v13;
  *(void *)(v12 + 64) = v14;
  *(void *)(v12 + 32) = v4;
  uint64_t v15 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t CAFPairedDevicesInformation.userVisibleLabel.getter()
{
  uint64_t v0 = (void *)MEMORY[0x24C59F610](0x495F444552494150, 0xEE0053454E4F4850);
  id v1 = CAFUILocalizedStringForKey(v0);

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v2;
}

uint64_t CAFPairedDevicesInformation.sortedPairedDevices.getter()
{
  id v1 = objc_msgSend(v0, sel_pairedDeviceList);
  id v2 = objc_msgSend(v1, sel_pairedDevices);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    unint64_t v6 = swift_bridgeObjectRetain();
    uint64_t v4 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v6, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  uint64_t v7 = v4;
  specialized MutableCollection<>.sort(by:)(&v7);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t CAFPairedDevicesInformation.items.getter()
{
  unint64_t v1 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
  id v2 = v0;
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v1);
  swift_bridgeObjectRelease();

  return v3;
}

void closure #1 in CAFPairedDevicesInformation.items.getter(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  unsigned int v4 = objc_msgSend(*a1, sel_state);
  uint64_t v5 = self;
  unint64_t v6 = &selRef_greenColor;
  if (v4 != 2) {
    unint64_t v6 = &selRef_grayColor;
  }
  id v7 = [v5 *v6];
  id v8 = objc_msgSend(v3, sel_name);
  if (!v8)
  {
    id v9 = (void *)MEMORY[0x24C59F610](0xD00000000000001DLL, 0x8000000249533110);
    id v8 = CAFUILocalizedStringForKey(v9);
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  uint64_t v13 = specialized CAFPairedDevicesInformation.deviceImage.getter();
  id v14 = CAFPairedDevice.decoratorImage.getter();
  BOOL v15 = objc_msgSend(v3, sel_state) == 2;
  v23[3] = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
  v23[0] = v3;
  a2[3] = &type metadata for CAFUIImageRepresentableItem;
  a2[4] = &protocol witness table for CAFUIImageRepresentableItem;
  id v16 = (_OWORD *)swift_allocObject();
  *a2 = v16;
  memset(&v22[8], 0, 40);
  *(void *)&long long v20 = v10;
  *((void *)&v20 + 1) = v12;
  *(void *)&long long v21 = v13;
  *((void *)&v21 + 1) = v14;
  v22[0] = v15;
  id v17 = v3;
  id v18 = v7;
  outlined assign with take of Any?((uint64_t)v23, (uint64_t)&v22[8]);

  *(void *)&v22[40] = v7;
  long long v19 = *(_OWORD *)&v22[16];
  v16[3] = *(_OWORD *)v22;
  v16[4] = v19;
  v16[1] = v20;
  v16[2] = v21;
  v16[5] = *(_OWORD *)&v22[32];
}

uint64_t CAFPairedDevicesInformation.selectedIndices.getter()
{
  return MEMORY[0x263F8EE78];
}

void CAFPairedDevicesInformation.selectedIndices.setter(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v2 = *(void *)(a1 + 32);
    swift_bridgeObjectRelease();
    unint64_t v3 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
    id v4 = v1;
    uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v3);
    swift_bridgeObjectRelease();

    if ((v2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v2 < *(void *)(v5 + 16))
    {
      outlined init with copy of CAFUIImageRepresentableItemProtocol(v5 + 40 * v2 + 32, (uint64_t)v11);
      swift_bridgeObjectRelease();
      uint64_t v6 = v12;
      uint64_t v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v14, v6, v7);
      if (v14[3])
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
        if (swift_dynamicCast())
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
          id v8 = objc_msgSend(v10, sel_identifier);
          if (v8)
          {

            return;
          }
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
        outlined destroy of Any?((uint64_t)v14);
      }
      goto LABEL_12;
    }
    __break(1u);
    return;
  }
  swift_bridgeObjectRelease();
LABEL_12:
  os_log_type_t v9 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v9, 0xD000000000000037, 0x80000002495330D0, 0x64657463656C6573, 0xEF73656369646E49);
}

void (*CAFPairedDevicesInformation.selectedIndices.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v1;
  return CAFPairedDevicesInformation.selectedIndices.modify;
}

void CAFPairedDevicesInformation.selectedIndices.modify(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    CAFPairedDevicesInformation.selectedIndices.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CAFPairedDevicesInformation.selectedIndices.setter(*a1);
  }
}

uint64_t CAFPairedDevicesInformation.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFPairedDevicesInformation.isEnabled.getter()
{
  return 1;
}

uint64_t CAFPairedDevicesInformation.isLimitableUI.getter()
{
  return 1;
}

uint64_t CAFPairedDevicesInformation.cellSelected(isProminent:hasChildren:)()
{
  return 0;
}

uint64_t protocol witness for CAFUIImageRepresentable.allowsMultipleSelection.getter in conformance CAFPairedDevicesInformation()
{
  return 1;
}

uint64_t protocol witness for CAFUIImageRepresentable.items.getter in conformance CAFPairedDevicesInformation()
{
  unint64_t v1 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
  id v2 = v0;
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v1);
  swift_bridgeObjectRelease();

  return v3;
}

uint64_t protocol witness for CAFUIImageRepresentable.selectedIndices.getter in conformance CAFPairedDevicesInformation()
{
  return MEMORY[0x263F8EE78];
}

void (*protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFPairedDevicesInformation(void *a1))(uint64_t *a1, char a2)
{
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v1;
  return CAFPairedDevicesInformation.selectedIndices.modify;
}

uint64_t protocol witness for CAFListContentRepresentable.userVisibleLabel.getter in conformance CAFPairedDevicesInformation()
{
  uint64_t v0 = (void *)MEMORY[0x24C59F610](0x495F444552494150, 0xEE0053454E4F4850);
  id v1 = CAFUILocalizedStringForKey(v0);

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v2;
}

uint64_t protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFPairedDevicesInformation()
{
  return 0;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFPairedDevicesInformation()
{
  return 0;
}

uint64_t protocol witness for CAFListContentRepresentable.prominenceInfo.getter in conformance CAFPairedDevicesInformation()
{
  return 0;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v4 <= 0)
    {
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v5;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_155;
    }
    if (v4) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_163;
  }
  Swift::Int v7 = v5;
  Swift::Int v126 = v4;
  v121 = a1;
  if (v4 < 2)
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
    uint64_t v129 = MEMORY[0x263F8EE78];
    id v127 = (void **)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v14 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (v14 < 2)
      {
LABEL_132:
        swift_bridgeObjectRelease();
        *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()();
        swift_bridgeObjectRelease();
        return;
      }
LABEL_120:
      uint64_t v112 = *v121;
      while (1)
      {
        unint64_t v113 = v14 - 2;
        if (v14 < 2) {
          goto LABEL_150;
        }
        if (!v112) {
          goto LABEL_162;
        }
        v114 = v10;
        uint64_t v115 = v10 + 32;
        uint64_t v116 = *(void *)&v10[16 * v113 + 32];
        uint64_t v117 = *(void *)&v10[16 * v14 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v112 + 8 * v116), (id *)(v112 + 8 * *(void *)&v115[16 * v14 - 16]), v112 + 8 * v117, v127);
        if (v2) {
          goto LABEL_132;
        }
        if (v117 < v116) {
          goto LABEL_151;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v114 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v114);
        }
        if (v113 >= *((void *)v114 + 2)) {
          goto LABEL_152;
        }
        v118 = &v114[16 * v113 + 32];
        *(void *)v118 = v116;
        *((void *)v118 + 1) = v117;
        unint64_t v119 = *((void *)v114 + 2);
        if (v14 > v119) {
          goto LABEL_153;
        }
        uint64_t v10 = v114;
        memmove(&v114[16 * v14 + 16], &v114[16 * v14 + 32], 16 * (v119 - v14));
        *((void *)v114 + 2) = v119 - 1;
        unint64_t v14 = v119 - 1;
        if (v119 <= 2) {
          goto LABEL_132;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = v6 >> 1;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    Swift::Int v4 = v126;
    id v127 = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v129 = v9;
  }
  Swift::Int v123 = v7;
  Swift::Int v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v122 = *a1 - 8;
  uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  uint64_t v13 = &selRef_setOpacity_;
  uint64_t v128 = *a1;
LABEL_15:
  Swift::Int v15 = v11++;
  Swift::Int v125 = v15;
  if (v11 >= v4) {
    goto LABEL_47;
  }
  id v16 = *(void **)(v12 + 8 * v15);
  id v17 = *(id *)(v12 + 8 * v11);
  id v18 = v16;
  Swift::Int v19 = v15;
  long long v20 = v13;
  unsigned int v21 = [v17 v13[226]];
  if (v21 != [v18 (SEL)v20 + 1218])
  {
    unsigned int v25 = [v17 (SEL)v20 + 1218];
    unsigned int v26 = [v18 (SEL)v20 + 1218];

    BOOL v27 = v25 < v26;
    Swift::Int v23 = v19 + 2;
    BOOL v93 = v19 + 2 < v126;
    uint64_t v12 = v128;
    uint64_t v13 = v20;
    Swift::Int v15 = v19;
    BOOL v24 = v27;
    if (v93) {
      goto LABEL_24;
    }
LABEL_21:
    Swift::Int v11 = v23;
    if (v24) {
      goto LABEL_38;
    }
    goto LABEL_47;
  }
  unsigned int v22 = objc_msgSend(v17, sel_state);
  if (v22 == objc_msgSend(v18, sel_state))
  {

    Swift::Int v15 = v125;
    Swift::Int v23 = v125 + 2;
    uint64_t v13 = &selRef_setOpacity_;
    if (v125 + 2 >= v126)
    {
      Swift::Int v11 = v125 + 2;
      uint64_t v12 = v128;
      goto LABEL_47;
    }
    BOOL v24 = 0;
    uint64_t v12 = v128;
    goto LABEL_24;
  }
  unsigned int v28 = objc_msgSend(v17, sel_state);
  unsigned int v29 = objc_msgSend(v18, sel_state);

  BOOL v24 = v29 < v28;
  Swift::Int v15 = v125;
  Swift::Int v23 = v125 + 2;
  uint64_t v12 = v128;
  uint64_t v13 = &selRef_setOpacity_;
  if (v125 + 2 >= v126) {
    goto LABEL_21;
  }
LABEL_24:
  Swift::Int v30 = v23;
  while (1)
  {
    Swift::Int v23 = v30;
    id v31 = *(void **)(v12 + 8 * v11);
    id v32 = *(id *)(v12 + 8 * v30);
    id v33 = v31;
    unsigned int v34 = [v32 v13[226]];
    if (v34 == [v33 v13[226]])
    {
      unsigned int v35 = objc_msgSend(v32, sel_state);
      if (v35 == objc_msgSend(v33, sel_state))
      {

        if (v24)
        {
          uint64_t v12 = v128;
          if (v23 >= v15) {
            goto LABEL_39;
          }
          goto LABEL_158;
        }
        goto LABEL_26;
      }
      unsigned int v36 = objc_msgSend(v32, sel_state);
      unsigned int v37 = objc_msgSend(v33, sel_state);

      BOOL v38 = v37 >= v36;
    }
    else
    {
      unsigned int v39 = [v32 v13[226]];
      unsigned int v40 = [v33 v13[226]];

      BOOL v38 = v39 >= v40;
    }
    uint64_t v13 = &selRef_setOpacity_;
    BOOL v41 = v38;
    if (((v24 ^ v41) & 1) == 0) {
      break;
    }
LABEL_26:
    Swift::Int v30 = v23 + 1;
    Swift::Int v11 = v23;
    uint64_t v12 = v128;
    if (v23 + 1 >= v126)
    {
      ++v23;
      Swift::Int v11 = v30;
      if (v24) {
        goto LABEL_38;
      }
LABEL_47:
      Swift::Int v47 = v126;
      if (v11 >= v126) {
        goto LABEL_69;
      }
      if (__OFSUB__(v11, v15)) {
        goto LABEL_154;
      }
      if (v11 - v15 >= v123) {
        goto LABEL_69;
      }
      if (__OFADD__(v15, v123)) {
        goto LABEL_156;
      }
      if (v15 + v123 < v126) {
        Swift::Int v47 = v15 + v123;
      }
      if (v47 < v15)
      {
LABEL_157:
        __break(1u);
        goto LABEL_158;
      }
      if (v11 == v47) {
        goto LABEL_69;
      }
      id v120 = v10;
      uint64_t v48 = v122 + 8 * v11;
      Swift::Int v124 = v47;
LABEL_58:
      id v49 = *(void **)(v12 + 8 * v11);
      Swift::Int v50 = v125;
      uint64_t v51 = v48;
      while (1)
      {
        id v52 = *(void **)v51;
        id v53 = v49;
        id v54 = v52;
        LODWORD(v52) = [v53 v13[226]];
        if (v52 == [v54 v13[226]])
        {
          unsigned int v55 = objc_msgSend(v53, sel_state);
          if (v55 == objc_msgSend(v54, sel_state))
          {

            uint64_t v12 = v128;
LABEL_57:
            ++v11;
            v48 += 8;
            if (v11 != v124) {
              goto LABEL_58;
            }
            Swift::Int v11 = v124;
            uint64_t v10 = v120;
            Swift::Int v15 = v125;
LABEL_69:
            if (v11 < v15) {
              goto LABEL_149;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
            }
            unint64_t v62 = *((void *)v10 + 2);
            unint64_t v61 = *((void *)v10 + 3);
            unint64_t v14 = v62 + 1;
            uint64_t v12 = v128;
            if (v62 >= v61 >> 1)
            {
              id v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, v10);
              uint64_t v12 = v128;
              uint64_t v10 = v111;
            }
            *((void *)v10 + 2) = v14;
            v63 = v10 + 32;
            v64 = &v10[16 * v62 + 32];
            *(void *)v64 = v125;
            *((void *)v64 + 1) = v11;
            if (v62)
            {
              while (2)
              {
                unint64_t v65 = v14 - 1;
                if (v14 >= 4)
                {
                  uint64_t v70 = &v63[16 * v14];
                  uint64_t v71 = *((void *)v70 - 8);
                  uint64_t v72 = *((void *)v70 - 7);
                  BOOL v76 = __OFSUB__(v72, v71);
                  uint64_t v73 = v72 - v71;
                  if (v76) {
                    goto LABEL_138;
                  }
                  uint64_t v75 = *((void *)v70 - 6);
                  uint64_t v74 = *((void *)v70 - 5);
                  BOOL v76 = __OFSUB__(v74, v75);
                  uint64_t v68 = v74 - v75;
                  char v69 = v76;
                  if (v76) {
                    goto LABEL_139;
                  }
                  unint64_t v77 = v14 - 2;
                  id v78 = &v63[16 * v14 - 32];
                  uint64_t v80 = *(void *)v78;
                  uint64_t v79 = *((void *)v78 + 1);
                  BOOL v76 = __OFSUB__(v79, v80);
                  uint64_t v81 = v79 - v80;
                  if (v76) {
                    goto LABEL_141;
                  }
                  BOOL v76 = __OFADD__(v68, v81);
                  uint64_t v82 = v68 + v81;
                  if (v76) {
                    goto LABEL_144;
                  }
                  if (v82 >= v73)
                  {
                    v100 = &v63[16 * v65];
                    uint64_t v102 = *(void *)v100;
                    uint64_t v101 = *((void *)v100 + 1);
                    BOOL v76 = __OFSUB__(v101, v102);
                    uint64_t v103 = v101 - v102;
                    if (v76) {
                      goto LABEL_148;
                    }
                    BOOL v93 = v68 < v103;
                  }
                  else
                  {
LABEL_88:
                    if (v69) {
                      goto LABEL_140;
                    }
                    unint64_t v77 = v14 - 2;
                    id v83 = &v63[16 * v14 - 32];
                    uint64_t v85 = *(void *)v83;
                    uint64_t v84 = *((void *)v83 + 1);
                    BOOL v86 = __OFSUB__(v84, v85);
                    uint64_t v87 = v84 - v85;
                    char v88 = v86;
                    if (v86) {
                      goto LABEL_143;
                    }
                    id v89 = &v63[16 * v65];
                    uint64_t v91 = *(void *)v89;
                    uint64_t v90 = *((void *)v89 + 1);
                    BOOL v76 = __OFSUB__(v90, v91);
                    uint64_t v92 = v90 - v91;
                    if (v76) {
                      goto LABEL_146;
                    }
                    if (__OFADD__(v87, v92)) {
                      goto LABEL_147;
                    }
                    if (v87 + v92 < v68) {
                      goto LABEL_100;
                    }
                    BOOL v93 = v68 < v92;
                  }
                  if (v93) {
                    unint64_t v65 = v77;
                  }
                }
                else
                {
                  if (v14 == 3)
                  {
                    uint64_t v67 = *((void *)v10 + 4);
                    uint64_t v66 = *((void *)v10 + 5);
                    BOOL v76 = __OFSUB__(v66, v67);
                    uint64_t v68 = v66 - v67;
                    char v69 = v76;
                    goto LABEL_88;
                  }
                  uint64_t v94 = *((void *)v10 + 4);
                  uint64_t v95 = *((void *)v10 + 5);
                  BOOL v76 = __OFSUB__(v95, v94);
                  uint64_t v87 = v95 - v94;
                  char v88 = v76;
LABEL_100:
                  if (v88) {
                    goto LABEL_142;
                  }
                  v96 = &v63[16 * v65];
                  uint64_t v98 = *(void *)v96;
                  uint64_t v97 = *((void *)v96 + 1);
                  BOOL v76 = __OFSUB__(v97, v98);
                  uint64_t v99 = v97 - v98;
                  if (v76) {
                    goto LABEL_145;
                  }
                  if (v99 < v87) {
                    goto LABEL_14;
                  }
                }
                unint64_t v104 = v65 - 1;
                if (v65 - 1 >= v14)
                {
                  __break(1u);
LABEL_135:
                  __break(1u);
LABEL_136:
                  __break(1u);
LABEL_137:
                  __break(1u);
LABEL_138:
                  __break(1u);
LABEL_139:
                  __break(1u);
LABEL_140:
                  __break(1u);
LABEL_141:
                  __break(1u);
LABEL_142:
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
                  goto LABEL_157;
                }
                if (!v12) {
                  goto LABEL_160;
                }
                id v105 = v10;
                id v106 = &v63[16 * v104];
                uint64_t v107 = *(void *)v106;
                id v108 = &v63[16 * v65];
                uint64_t v109 = *((void *)v108 + 1);
                specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v12 + 8 * *(void *)v106), (id *)(v12 + 8 * *(void *)v108), v12 + 8 * v109, v127);
                if (v1) {
                  goto LABEL_132;
                }
                if (v109 < v107) {
                  goto LABEL_135;
                }
                if (v65 > *((void *)v105 + 2)) {
                  goto LABEL_136;
                }
                *(void *)id v106 = v107;
                *(void *)&v63[16 * v104 + 8] = v109;
                unint64_t v110 = *((void *)v105 + 2);
                if (v65 >= v110) {
                  goto LABEL_137;
                }
                uint64_t v10 = v105;
                unint64_t v14 = v110 - 1;
                memmove(&v63[16 * v65], v108 + 16, 16 * (v110 - 1 - v65));
                *((void *)v105 + 2) = v110 - 1;
                uint64_t v12 = v128;
                uint64_t v13 = &selRef_setOpacity_;
                if (v110 <= 2) {
                  goto LABEL_14;
                }
                continue;
              }
            }
            unint64_t v14 = 1;
LABEL_14:
            Swift::Int v4 = v126;
            if (v11 >= v126)
            {
              uint64_t v2 = v1;
              if (v14 < 2) {
                goto LABEL_132;
              }
              goto LABEL_120;
            }
            goto LABEL_15;
          }
          unsigned int v56 = objc_msgSend(v53, sel_state);
          unsigned int v57 = objc_msgSend(v54, sel_state);

          if (v57 >= v56) {
            goto LABEL_56;
          }
        }
        else
        {
          unsigned int v58 = [v53 v13[226]];
          unsigned int v59 = [v54 v13[226]];

          if (v58 >= v59)
          {
LABEL_56:
            uint64_t v12 = v128;
            uint64_t v13 = &selRef_setOpacity_;
            goto LABEL_57;
          }
        }
        uint64_t v12 = v128;
        if (!v128) {
          goto LABEL_159;
        }
        v60 = *(void **)v51;
        id v49 = *(void **)(v51 + 8);
        *(void *)uint64_t v51 = v49;
        *(void *)(v51 + 8) = v60;
        v51 -= 8;
        ++v50;
        uint64_t v13 = &selRef_setOpacity_;
        if (v11 == v50) {
          goto LABEL_57;
        }
      }
    }
  }
  uint64_t v12 = v128;
  Swift::Int v11 = v23;
  if (!v24) {
    goto LABEL_47;
  }
LABEL_38:
  if (v23 >= v15)
  {
LABEL_39:
    if (v15 < v23)
    {
      unint64_t v42 = (uint64_t *)(v122 + 8 * v23);
      Swift::Int v43 = v23;
      Swift::Int v44 = v15;
      id v45 = (uint64_t *)(v12 + 8 * v15);
      do
      {
        if (v44 != --v43)
        {
          if (!v12) {
            goto LABEL_161;
          }
          uint64_t v46 = *v45;
          *id v45 = *v42;
          *unint64_t v42 = v46;
        }
        ++v44;
        --v42;
        ++v45;
      }
      while (v44 < v43);
    }
    Swift::Int v11 = v23;
    goto LABEL_47;
  }
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  Swift::Int v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  unsigned int v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  Swift::Int v39;
  Swift::Int v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  unsigned int v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  char v67;
  uint64_t *v68;
  Swift::Int v69;
  Swift::Int v70;
  uint64_t *v71;
  uint64_t v72;
  Swift::Int v73;
  uint64_t v74;
  void *v75;
  Swift::Int v76;
  void *v77;
  id v78;
  id v79;
  unsigned int v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  char v99;
  void *v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  char v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  Swift::Int v159;
  Swift::Int v160;
  uint64_t v161;
  Swift::Int v162;
  Swift::Int v163;
  int v164;
  uint64_t v165;
  void **__dst;
  char *v167;
  uint64_t v168;
  Swift::Int v169;
  Swift::Int v170;
  Swift::Int v171;
  uint64_t v172;

  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_175;
    }
    if (v4) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_183;
  }
  id v159 = v5;
  uint64_t v160 = v4;
  id v157 = a1;
  if (v4 < 2)
  {
    uint64_t v9 = (char *)MEMORY[0x263F8EE78];
    id v172 = MEMORY[0x263F8EE78];
    __dst = (void **)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      uint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_141:
      if (v13 >= 2)
      {
        Class v151 = *v157;
        do
        {
          uint64_t v152 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_170;
          }
          if (!v151) {
            goto LABEL_182;
          }
          id v153 = *(void *)&v9[16 * v152 + 32];
          id v154 = *(void *)&v9[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v151 + 8 * v153), (id *)(v151 + 8 * *(void *)&v9[16 * v13 + 16]), v151 + 8 * v154, __dst);
          if (v2) {
            break;
          }
          if (v154 < v153) {
            goto LABEL_171;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
          }
          if (v152 >= *((void *)v9 + 2)) {
            goto LABEL_172;
          }
          id v155 = &v9[16 * v152 + 32];
          *(void *)id v155 = v153;
          *((void *)v155 + 1) = v154;
          id v156 = *((void *)v9 + 2);
          if (v13 > v156) {
            goto LABEL_173;
          }
          memmove(&v9[16 * v13 + 16], &v9[16 * v13 + 32], 16 * (v156 - v13));
          *((void *)v9 + 2) = v156 - 1;
          uint64_t v13 = v156 - 1;
        }
        while (v156 > 2);
      }
LABEL_152:
      swift_bridgeObjectRelease();
      *(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    Swift::Int v7 = v6 >> 1;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    Swift::Int v4 = v160;
    __dst = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    id v172 = v8;
  }
  uint64_t v10 = 0;
  Swift::Int v11 = *a1;
  double v158 = *a1 - 8;
  uint64_t v9 = (char *)MEMORY[0x263F8EE78];
  uint64_t v12 = &selRef_setOpacity_;
  id v168 = *a1;
  while (1)
  {
    unint64_t v14 = v10 + 1;
    id v167 = v9;
    Class v163 = v10;
    id v161 = v2;
    if (v10 + 1 >= v4) {
      goto LABEL_64;
    }
    Swift::Int v15 = *(void **)(v11 + 8 * v14);
    id v16 = *(void **)(v11 + 8 * v10);
    if (v15 == v16)
    {
      uint64_t v164 = 0;
    }
    else
    {
      id v17 = v15;
      id v18 = v16;
      Swift::Int v19 = [v17 v12[226]];
      if (v19 != [v18 v12[226]])
      {
        unsigned int v37 = [v17 v12[226]];
        BOOL v38 = [v18 v12[226]];

        uint64_t v164 = v37 < v38;
        uint64_t v10 = v163;
        unsigned int v39 = v163 + 2;
        uint64_t v9 = v167;
        if (v163 + 2 < v4) {
          goto LABEL_33;
        }
        goto LABEL_54;
      }
      long long v20 = objc_msgSend(v17, sel_userVisibleLabel);
      unsigned int v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v23 = v22;

      BOOL v24 = objc_msgSend(v18, sel_userVisibleLabel);
      unsigned int v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      BOOL v27 = v26;

      unsigned int v28 = v21 == v25 && v23 == v27;
      if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        Class v169 = v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unsigned int v29 = objc_msgSend(v17, sel_identifier);
        Swift::Int v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v32 = v31;

        id v33 = objc_msgSend(v18, sel_identifier);
        unsigned int v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unsigned int v36 = v35;

        if (v30 != v34) {
          goto LABEL_29;
        }
        if (v32 == v36) {
          uint64_t v164 = 0;
        }
        else {
LABEL_29:
        }
          uint64_t v164 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v10 = v163;
        unint64_t v14 = v169;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v9 = v167;
        Swift::Int v11 = v168;
        uint64_t v12 = &selRef_setOpacity_;
      }
      else
      {
        uint64_t v164 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v9 = v167;
        Swift::Int v11 = v168;
        uint64_t v12 = &selRef_setOpacity_;
        uint64_t v10 = v163;
      }
    }
    unsigned int v39 = v10 + 2;
    if (v10 + 2 < v4)
    {
LABEL_33:
      unsigned int v40 = v39;
      do
      {
        unsigned int v39 = v40;
        BOOL v41 = *(void **)(v11 + 8 * v40);
        unint64_t v42 = *(void **)(v11 + 8 * v14);
        if (v41 == v42)
        {
          if (v164) {
            goto LABEL_55;
          }
        }
        else
        {
          Swift::Int v43 = v41;
          Swift::Int v44 = v42;
          id v45 = [v43 v12[226]];
          if (v45 == [v44 v12[226]])
          {
            uint64_t v46 = objc_msgSend(v43, sel_userVisibleLabel);
            Swift::Int v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v49 = v48;

            Swift::Int v50 = objc_msgSend(v44, sel_userVisibleLabel);
            uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v53 = v52;

            id v54 = v47 == v51 && v49 == v53;
            if (v54 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unsigned int v55 = objc_msgSend(v43, sel_identifier);
              unsigned int v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unsigned int v58 = v57;

              unsigned int v59 = objc_msgSend(v44, sel_identifier);
              v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v62 = v61;

              if (v56 == v60 && v58 == v62) {
                v63 = 0;
              }
              else {
                v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
              }
              uint64_t v10 = v163;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              v63 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v10 = v163;
            }
            uint64_t v67 = v164 ^ v63;
            uint64_t v9 = v167;
            Swift::Int v11 = v168;
            uint64_t v12 = &selRef_setOpacity_;
            if (v67) {
              goto LABEL_54;
            }
          }
          else
          {
            v64 = [v43 v12[226]];
            unint64_t v65 = [v44 v12[226]];

            uint64_t v66 = v64 >= v65;
            uint64_t v9 = v167;
            uint64_t v10 = v163;
            if (((v164 ^ v66) & 1) == 0) {
              goto LABEL_54;
            }
          }
        }
        unsigned int v40 = v39 + 1;
        unint64_t v14 = v39;
      }
      while (v39 + 1 < v4);
      ++v39;
    }
LABEL_54:
    unint64_t v14 = v39;
    if (v164)
    {
LABEL_55:
      if (v39 < v10) {
        goto LABEL_176;
      }
      if (v10 < v39)
      {
        uint64_t v68 = (uint64_t *)(v158 + 8 * v39);
        char v69 = v39;
        uint64_t v70 = v10;
        uint64_t v71 = (uint64_t *)(v11 + 8 * v10);
        do
        {
          if (v70 != --v69)
          {
            if (!v11) {
              goto LABEL_181;
            }
            uint64_t v72 = *v71;
            void *v71 = *v68;
            *uint64_t v68 = v72;
          }
          ++v70;
          --v68;
          ++v71;
        }
        while (v70 < v69);
      }
      unint64_t v14 = v39;
    }
LABEL_64:
    if (v14 >= v4) {
      goto LABEL_93;
    }
    if (__OFSUB__(v14, v10)) {
      goto LABEL_174;
    }
    if (v14 - v10 >= v159) {
      goto LABEL_93;
    }
    if (__OFADD__(v10, v159)) {
      goto LABEL_177;
    }
    uint64_t v73 = v10 + v159 >= v4 ? v4 : v10 + v159;
    if (v73 < v10) {
      break;
    }
    if (v14 != v73)
    {
      uint64_t v74 = v158 + 8 * v14;
      id v162 = v73;
      do
      {
        uint64_t v75 = *(void **)(v11 + 8 * v14);
        BOOL v76 = v10;
        id v165 = v74;
        id v170 = v14;
        do
        {
          unint64_t v77 = *(void **)v74;
          if (v75 == *(void **)v74) {
            break;
          }
          id v78 = v75;
          uint64_t v79 = v77;
          uint64_t v80 = [v78 v12[226]];
          if (v80 == [v79 v12[226]])
          {
            uint64_t v81 = objc_msgSend(v78, sel_userVisibleLabel);
            uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v84 = v83;

            uint64_t v85 = objc_msgSend(v79, sel_userVisibleLabel);
            BOOL v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            char v88 = v87;

            if (v82 == v86 && v84 == v88 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v89 = objc_msgSend(v78, sel_identifier);
              uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v92 = v91;

              BOOL v93 = objc_msgSend(v79, sel_identifier);
              uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v96 = v95;

              if (v90 == v94 && v92 == v96)
              {

                swift_bridgeObjectRelease_n();
                uint64_t v9 = v167;
                Swift::Int v11 = v168;
                unint64_t v14 = v170;
                uint64_t v12 = &selRef_setOpacity_;
                break;
              }
            }
            uint64_t v99 = _stringCompareWithSmolCheck(_:_:expecting:)();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v9 = v167;
            Swift::Int v11 = v168;
            uint64_t v12 = &selRef_setOpacity_;
            if ((v99 & 1) == 0)
            {
LABEL_74:
              unint64_t v14 = v170;
              break;
            }
          }
          else
          {
            uint64_t v97 = [v78 v12[226]];
            uint64_t v98 = [v79 v12[226]];

            if (v97 >= v98) {
              goto LABEL_74;
            }
          }
          unint64_t v14 = v170;
          if (!v11) {
            goto LABEL_179;
          }
          v100 = *(void **)v74;
          uint64_t v75 = *(void **)(v74 + 8);
          *(void *)uint64_t v74 = v75;
          *(void *)(v74 + 8) = v100;
          v74 -= 8;
          ++v76;
        }
        while (v170 != v76);
        ++v14;
        uint64_t v10 = v163;
        uint64_t v74 = v165 + 8;
      }
      while (v14 != v162);
      unint64_t v14 = v162;
    }
LABEL_93:
    if (v14 < v10) {
      goto LABEL_169;
    }
    id v171 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    uint64_t v2 = v161;
    uint64_t v102 = *((void *)v9 + 2);
    uint64_t v101 = *((void *)v9 + 3);
    uint64_t v13 = v102 + 1;
    if (v102 >= v101 >> 1) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v101 > 1), v102 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v13;
    uint64_t v103 = v9 + 32;
    unint64_t v104 = &v9[16 * v102 + 32];
    *(void *)unint64_t v104 = v10;
    *((void *)v104 + 1) = v171;
    if (v102)
    {
      while (1)
      {
        id v105 = v13 - 1;
        if (v13 >= 4)
        {
          unint64_t v110 = &v103[16 * v13];
          id v111 = *((void *)v110 - 8);
          uint64_t v112 = *((void *)v110 - 7);
          uint64_t v116 = __OFSUB__(v112, v111);
          unint64_t v113 = v112 - v111;
          if (v116) {
            goto LABEL_158;
          }
          uint64_t v115 = *((void *)v110 - 6);
          v114 = *((void *)v110 - 5);
          uint64_t v116 = __OFSUB__(v114, v115);
          id v108 = v114 - v115;
          uint64_t v109 = v116;
          if (v116) {
            goto LABEL_159;
          }
          uint64_t v117 = v13 - 2;
          v118 = &v103[16 * v13 - 32];
          id v120 = *(void *)v118;
          unint64_t v119 = *((void *)v118 + 1);
          uint64_t v116 = __OFSUB__(v119, v120);
          v121 = v119 - v120;
          if (v116) {
            goto LABEL_161;
          }
          uint64_t v116 = __OFADD__(v108, v121);
          uint64_t v122 = v108 + v121;
          if (v116) {
            goto LABEL_164;
          }
          if (v122 >= v113)
          {
            Class v140 = &v103[16 * v105];
            uint64_t v142 = *(void *)v140;
            v141 = *((void *)v140 + 1);
            uint64_t v116 = __OFSUB__(v141, v142);
            id v143 = v141 - v142;
            if (v116) {
              goto LABEL_168;
            }
            id v133 = v108 < v143;
            goto LABEL_130;
          }
        }
        else
        {
          if (v13 != 3)
          {
            id v134 = *((void *)v9 + 4);
            v135 = *((void *)v9 + 5);
            uint64_t v116 = __OFSUB__(v135, v134);
            id v127 = v135 - v134;
            uint64_t v128 = v116;
            goto LABEL_124;
          }
          uint64_t v107 = *((void *)v9 + 4);
          id v106 = *((void *)v9 + 5);
          uint64_t v116 = __OFSUB__(v106, v107);
          id v108 = v106 - v107;
          uint64_t v109 = v116;
        }
        if (v109) {
          goto LABEL_160;
        }
        uint64_t v117 = v13 - 2;
        Swift::Int v123 = &v103[16 * v13 - 32];
        Swift::Int v125 = *(void *)v123;
        Swift::Int v124 = *((void *)v123 + 1);
        Swift::Int v126 = __OFSUB__(v124, v125);
        id v127 = v124 - v125;
        uint64_t v128 = v126;
        if (v126) {
          goto LABEL_163;
        }
        uint64_t v129 = &v103[16 * v105];
        id v131 = *(void *)v129;
        id v130 = *((void *)v129 + 1);
        uint64_t v116 = __OFSUB__(v130, v131);
        id v132 = v130 - v131;
        if (v116) {
          goto LABEL_166;
        }
        if (__OFADD__(v127, v132)) {
          goto LABEL_167;
        }
        if (v127 + v132 >= v108)
        {
          id v133 = v108 < v132;
LABEL_130:
          if (v133) {
            id v105 = v117;
          }
          goto LABEL_132;
        }
LABEL_124:
        if (v128) {
          goto LABEL_162;
        }
        v136 = &v103[16 * v105];
        id v138 = *(void *)v136;
        id v137 = *((void *)v136 + 1);
        uint64_t v116 = __OFSUB__(v137, v138);
        id v139 = v137 - v138;
        if (v116) {
          goto LABEL_165;
        }
        if (v139 < v127) {
          goto LABEL_14;
        }
LABEL_132:
        id v144 = v105 - 1;
        if (v105 - 1 >= v13)
        {
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
          goto LABEL_178;
        }
        if (!v11) {
          goto LABEL_180;
        }
        id v145 = v11;
        id v146 = &v103[16 * v144];
        v147 = *(void *)v146;
        id v148 = &v103[16 * v105];
        id v149 = *((void *)v148 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v145 + 8 * *(void *)v146), (id *)(v145 + 8 * *(void *)v148), v145 + 8 * v149, __dst);
        if (v161) {
          goto LABEL_152;
        }
        if (v149 < v147) {
          goto LABEL_155;
        }
        if (v105 > *((void *)v9 + 2)) {
          goto LABEL_156;
        }
        *(void *)id v146 = v147;
        *(void *)&v103[16 * v144 + 8] = v149;
        id v150 = *((void *)v9 + 2);
        if (v105 >= v150) {
          goto LABEL_157;
        }
        uint64_t v13 = v150 - 1;
        memmove(&v103[16 * v105], v148 + 16, 16 * (v150 - 1 - v105));
        *((void *)v9 + 2) = v150 - 1;
        Swift::Int v11 = v168;
        uint64_t v12 = &selRef_setOpacity_;
        if (v150 <= 2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v13 = 1;
LABEL_14:
    Swift::Int v4 = v160;
    uint64_t v10 = v171;
    if (v171 >= v160) {
      goto LABEL_141;
    }
  }
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  int v18;
  int v19;
  void **v20;
  Swift::Int v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  int v26;
  uint64_t *v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t *v30;
  uint64_t v31;
  Swift::Int v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  void *v91;
  id v92;
  id v93;
  char v94;
  char v95;
  void *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  unint64_t v105;
  char *v106;
  Swift::Int v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  char *v114;
  Swift::Int v115;
  char *v116;
  Swift::Int v117;
  void **__dst;
  uint64_t v119;
  void *v120;
  id v121;
  uint64_t v122;

  uint64_t v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_143;
    }
    if (v3) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return;
  }
  if (v3 >= 0) {
    Swift::Int v5 = v3;
  }
  else {
    Swift::Int v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_152;
  }
  uint64_t v6 = v4;
  uint64_t v109 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = (char *)MEMORY[0x263F8EE78];
    uint64_t v122 = MEMORY[0x263F8EE78];
    __dst = (void **)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unsigned int v36 = *(void *)(MEMORY[0x263F8EE78] + 16);
      goto LABEL_104;
    }
  }
  else
  {
    Swift::Int v7 = v5 >> 1;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    __dst = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v122 = v8;
  }
  uint64_t v10 = 0;
  Swift::Int v11 = *a1;
  unint64_t v110 = *a1 + 16;
  id v108 = *a1 - 8;
  uint64_t v9 = (char *)MEMORY[0x263F8EE78];
  uint64_t v117 = v3;
  unint64_t v113 = v6;
  unint64_t v119 = *a1;
  while (1)
  {
    uint64_t v12 = v10;
    uint64_t v13 = v10 + 1;
    if (v10 + 1 < v3)
    {
      v114 = v9;
      unint64_t v14 = *(void **)(v11 + 8 * v13);
      id v120 = *(void **)(v11 + 8 * v10);
      Swift::Int v15 = v120;
      v121 = v14;
      id v16 = v14;
      id v17 = v15;
      id v18 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v121, &v120);
      if (v1)
      {
        swift_bridgeObjectRelease();

LABEL_121:
        *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()();
        swift_bridgeObjectRelease();
        return;
      }
      Swift::Int v19 = v18;

      uint64_t v13 = v12 + 2;
      if (v12 + 2 < v3)
      {
        id v111 = v12;
        long long v20 = (void **)(v110 + 8 * v12);
        while (1)
        {
          unsigned int v21 = v13;
          unsigned int v22 = *v20;
          id v120 = *(v20 - 1);
          Swift::Int v23 = v120;
          v121 = v22;
          BOOL v24 = v22;
          unsigned int v25 = v23;
          unsigned int v26 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v121, &v120);

          if ((v19 ^ v26)) {
            break;
          }
          uint64_t v13 = v21 + 1;
          ++v20;
          uint64_t v3 = v117;
          if (v117 == v21 + 1)
          {
            uint64_t v13 = v117;
            uint64_t v6 = v113;
            goto LABEL_21;
          }
        }
        uint64_t v3 = v117;
        uint64_t v6 = v113;
        uint64_t v13 = v21;
LABEL_21:
        uint64_t v12 = v111;
      }
      uint64_t v9 = v114;
      Swift::Int v11 = v119;
      if (v19)
      {
        if (v13 < v12) {
          goto LABEL_147;
        }
        if (v12 < v13)
        {
          BOOL v27 = (uint64_t *)(v108 + 8 * v13);
          unsigned int v28 = v13;
          unsigned int v29 = v12;
          Swift::Int v30 = (uint64_t *)(v119 + 8 * v12);
          do
          {
            if (v29 != --v28)
            {
              if (!v119) {
                goto LABEL_150;
              }
              id v31 = *v30;
              *Swift::Int v30 = *v27;
              *BOOL v27 = v31;
            }
            ++v29;
            --v27;
            ++v30;
          }
          while (v29 < v28);
        }
      }
    }
    if (v13 >= v3) {
      goto LABEL_40;
    }
    if (__OFSUB__(v13, v12)) {
      goto LABEL_144;
    }
    if (v13 - v12 >= v6)
    {
LABEL_40:
      if (v13 < v12) {
        goto LABEL_142;
      }
      goto LABEL_41;
    }
    if (__OFADD__(v12, v6)) {
      goto LABEL_145;
    }
    id v32 = v12 + v6 >= v3 ? v3 : v12 + v6;
    if (v32 < v12) {
      break;
    }
    if (v13 == v32) {
      goto LABEL_40;
    }
    uint64_t v116 = v9;
    uint64_t v85 = v108 + 8 * v13;
    uint64_t v112 = v12;
    uint64_t v107 = v32;
    do
    {
      BOOL v86 = *(void **)(v11 + 8 * v13);
      uint64_t v87 = v12;
      char v88 = v85;
      id v89 = v85;
      while (1)
      {
        uint64_t v90 = v13;
        id v120 = *(void **)v89;
        uint64_t v91 = v120;
        v121 = v86;
        uint64_t v92 = v86;
        BOOL v93 = v91;
        uint64_t v94 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v121, &v120);
        if (v1)
        {
          swift_bridgeObjectRelease();

          goto LABEL_121;
        }
        uint64_t v95 = v94;

        if ((v95 & 1) == 0) {
          break;
        }
        Swift::Int v11 = v119;
        if (!v119) {
          goto LABEL_149;
        }
        v96 = *(void **)v89;
        BOOL v86 = *(void **)(v89 + 8);
        *(void *)id v89 = v86;
        *(void *)(v89 + 8) = v96;
        v89 -= 8;
        ++v87;
        uint64_t v13 = v90;
        if (v90 == v87) {
          goto LABEL_98;
        }
      }
      Swift::Int v11 = v119;
      uint64_t v13 = v90;
LABEL_98:
      ++v13;
      uint64_t v85 = v88 + 8;
      uint64_t v12 = v112;
    }
    while (v13 != v107);
    uint64_t v13 = v107;
    uint64_t v9 = v116;
    if (v107 < v112) {
      goto LABEL_142;
    }
LABEL_41:
    id v33 = v9;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v9 = v33;
    }
    else {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, v33);
    }
    unsigned int v35 = *((void *)v9 + 2);
    unsigned int v34 = *((void *)v9 + 3);
    unsigned int v36 = v35 + 1;
    Swift::Int v11 = v119;
    if (v35 >= v34 >> 1)
    {
      uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v9);
      Swift::Int v11 = v119;
      uint64_t v9 = v97;
    }
    *((void *)v9 + 2) = v36;
    unsigned int v37 = v9 + 32;
    BOOL v38 = &v9[16 * v35 + 32];
    *(void *)BOOL v38 = v12;
    *((void *)v38 + 1) = v13;
    uint64_t v115 = v13;
    if (v35)
    {
LABEL_46:
      unsigned int v39 = v36 - 1;
      if (v36 >= 4)
      {
        Swift::Int v44 = &v37[16 * v36];
        id v45 = *((void *)v44 - 8);
        uint64_t v46 = *((void *)v44 - 7);
        Swift::Int v50 = __OFSUB__(v46, v45);
        Swift::Int v47 = v46 - v45;
        if (v50) {
          goto LABEL_127;
        }
        id v49 = *((void *)v44 - 6);
        uint64_t v48 = *((void *)v44 - 5);
        Swift::Int v50 = __OFSUB__(v48, v49);
        unint64_t v42 = v48 - v49;
        Swift::Int v43 = v50;
        if (v50) {
          goto LABEL_128;
        }
        uint64_t v51 = v36 - 2;
        id v52 = &v37[16 * v36 - 32];
        id v54 = *(void *)v52;
        id v53 = *((void *)v52 + 1);
        Swift::Int v50 = __OFSUB__(v53, v54);
        unsigned int v55 = v53 - v54;
        if (v50) {
          goto LABEL_130;
        }
        Swift::Int v50 = __OFADD__(v42, v55);
        unsigned int v56 = v42 + v55;
        if (v50) {
          goto LABEL_133;
        }
        if (v56 >= v47)
        {
          uint64_t v74 = &v37[16 * v39];
          BOOL v76 = *(void *)v74;
          uint64_t v75 = *((void *)v74 + 1);
          Swift::Int v50 = __OFSUB__(v75, v76);
          unint64_t v77 = v75 - v76;
          if (v50) {
            goto LABEL_137;
          }
          uint64_t v67 = v42 < v77;
        }
        else
        {
LABEL_59:
          if (v43) {
            goto LABEL_129;
          }
          uint64_t v51 = v36 - 2;
          unsigned int v57 = &v37[16 * v36 - 32];
          unsigned int v59 = *(void *)v57;
          unsigned int v58 = *((void *)v57 + 1);
          v60 = __OFSUB__(v58, v59);
          unint64_t v61 = v58 - v59;
          unint64_t v62 = v60;
          if (v60) {
            goto LABEL_132;
          }
          v63 = &v37[16 * v39];
          unint64_t v65 = *(void *)v63;
          v64 = *((void *)v63 + 1);
          Swift::Int v50 = __OFSUB__(v64, v65);
          uint64_t v66 = v64 - v65;
          if (v50) {
            goto LABEL_135;
          }
          if (__OFADD__(v61, v66)) {
            goto LABEL_136;
          }
          if (v61 + v66 < v42) {
            goto LABEL_71;
          }
          uint64_t v67 = v42 < v66;
        }
        if (v67) {
          unsigned int v39 = v51;
        }
      }
      else
      {
        if (v36 == 3)
        {
          BOOL v41 = *((void *)v9 + 4);
          unsigned int v40 = *((void *)v9 + 5);
          Swift::Int v50 = __OFSUB__(v40, v41);
          unint64_t v42 = v40 - v41;
          Swift::Int v43 = v50;
          goto LABEL_59;
        }
        uint64_t v68 = *((void *)v9 + 4);
        char v69 = *((void *)v9 + 5);
        Swift::Int v50 = __OFSUB__(v69, v68);
        unint64_t v61 = v69 - v68;
        unint64_t v62 = v50;
LABEL_71:
        if (v62) {
          goto LABEL_131;
        }
        uint64_t v70 = &v37[16 * v39];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        Swift::Int v50 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v50) {
          goto LABEL_134;
        }
        if (v73 < v61) {
          goto LABEL_88;
        }
      }
      id v78 = v39 - 1;
      if (v39 - 1 >= v36)
      {
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
        break;
      }
      if (!v11) {
        goto LABEL_148;
      }
      uint64_t v79 = v9;
      uint64_t v80 = &v37[16 * v78];
      uint64_t v81 = *(void *)v80;
      uint64_t v82 = &v37[16 * v39];
      id v83 = *((void *)v82 + 1);
      specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v11 + 8 * *(void *)v80), (void **)(v11 + 8 * *(void *)v82), v11 + 8 * v83, __dst);
      if (v1) {
        goto LABEL_120;
      }
      if (v83 < v81) {
        goto LABEL_124;
      }
      if (v39 > *((void *)v79 + 2)) {
        goto LABEL_125;
      }
      *(void *)uint64_t v80 = v81;
      *(void *)&v37[16 * v78 + 8] = v83;
      uint64_t v84 = *((void *)v79 + 2);
      if (v39 >= v84) {
        goto LABEL_126;
      }
      unsigned int v36 = v84 - 1;
      memmove(&v37[16 * v39], v82 + 16, 16 * (v84 - 1 - v39));
      uint64_t v9 = v79;
      *((void *)v79 + 2) = v84 - 1;
      Swift::Int v11 = v119;
      if (v84 <= 2) {
        goto LABEL_88;
      }
      goto LABEL_46;
    }
    unsigned int v36 = 1;
LABEL_88:
    uint64_t v10 = v115;
    uint64_t v3 = v117;
    uint64_t v6 = v113;
    if (v115 >= v117)
    {
LABEL_104:
      if (v36 >= 2)
      {
        uint64_t v98 = *v109;
        do
        {
          uint64_t v99 = v36 - 2;
          if (v36 < 2) {
            goto LABEL_138;
          }
          if (!v98) {
            goto LABEL_151;
          }
          v100 = (uint64_t)v9;
          uint64_t v101 = *(void *)&v9[16 * v99 + 32];
          uint64_t v102 = *(void *)&v9[16 * v36 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v98 + 8 * v101), (void **)(v98 + 8 * *(void *)&v9[16 * v36 + 16]), v98 + 8 * v102, __dst);
          if (v1) {
            break;
          }
          if (v102 < v101) {
            goto LABEL_139;
          }
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v103 = (char *)v100;
          }
          else {
            uint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew()(v100);
          }
          if (v99 >= *((void *)v103 + 2)) {
            goto LABEL_140;
          }
          unint64_t v104 = &v103[16 * v99 + 32];
          *(void *)unint64_t v104 = v101;
          *((void *)v104 + 1) = v102;
          id v105 = *((void *)v103 + 2);
          if (v36 > v105) {
            goto LABEL_141;
          }
          id v106 = v103;
          memmove(&v103[16 * v36 + 16], &v103[16 * v36 + 32], 16 * (v105 - v36));
          uint64_t v9 = v106;
          *((void *)v106 + 2) = v105 - 1;
          unsigned int v36 = v105 - 1;
        }
        while (v105 > 2);
      }
LABEL_120:
      swift_bridgeObjectRelease();
      goto LABEL_121;
    }
  }
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
    Swift::Int v7 = &selRef_setOpacity_;
LABEL_6:
    uint64_t v8 = *(void **)(v5 + 8 * v4);
    uint64_t v9 = a1;
    uint64_t v23 = v6;
    while (1)
    {
      uint64_t v10 = *(void **)v6;
      id v11 = v8;
      id v12 = v10;
      unsigned int v13 = objc_msgSend(v11, sel_sortOrder);
      if (v13 == objc_msgSend(v12, sel_sortOrder))
      {
        unsigned int v14 = [v11 v7[158]];
        if (v14 == [v12 v7[158]])
        {

LABEL_5:
          ++v4;
          uint64_t v6 = v23 + 8;
          if (v4 == a2) {
            return;
          }
          goto LABEL_6;
        }
        unsigned int v15 = [v11 v7[158]];
        unsigned int v16 = [v12 v7[158]];

        BOOL v17 = v16 >= v15;
        Swift::Int v7 = &selRef_setOpacity_;
        if (v17) {
          goto LABEL_5;
        }
      }
      else
      {
        unsigned int v18 = objc_msgSend(v11, sel_sortOrder);
        unsigned int v19 = objc_msgSend(v12, sel_sortOrder);

        BOOL v17 = v18 >= v19;
        Swift::Int v7 = &selRef_setOpacity_;
        if (v17) {
          goto LABEL_5;
        }
      }
      if (!v5) {
        break;
      }
      long long v20 = *(void **)v6;
      uint64_t v8 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v8;
      *(void *)(v6 + 8) = v20;
      v6 -= 8;
      if (v4 == ++v9) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  unsigned int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
    Swift::Int v7 = &selRef_setOpacity_;
    unsigned int v37 = *a4;
LABEL_6:
    uint64_t v8 = *(void **)(v5 + 8 * v4);
    uint64_t v9 = a1;
    unsigned int v36 = v6;
    BOOL v38 = v4;
    while (1)
    {
      uint64_t v10 = *(void **)v6;
      if (v8 == *(void **)v6) {
        goto LABEL_5;
      }
      id v11 = v8;
      id v12 = v10;
      unsigned int v13 = [v11 v7[226]];
      if (v13 == [v12 v7[226]])
      {
        unsigned int v14 = objc_msgSend(v11, sel_userVisibleLabel);
        unsigned int v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        BOOL v17 = v16;

        unsigned int v18 = objc_msgSend(v12, sel_userVisibleLabel);
        unsigned int v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unsigned int v21 = v20;

        if (v15 == v19 && v17 == v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unsigned int v22 = objc_msgSend(v11, sel_identifier);
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unsigned int v25 = v24;

          unsigned int v26 = objc_msgSend(v12, sel_identifier);
          BOOL v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unsigned int v29 = v28;

          if (v23 == v27 && v25 == v29)
          {

            swift_bridgeObjectRelease_n();
            uint64_t v4 = v38;
            uint64_t v5 = v37;
            Swift::Int v7 = &selRef_setOpacity_;
LABEL_5:
            ++v4;
            uint64_t v6 = v36 + 8;
            if (v4 == a2) {
              return;
            }
            goto LABEL_6;
          }
        }
        Swift::Int v30 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v4 = v38;
        uint64_t v5 = v37;
        Swift::Int v7 = &selRef_setOpacity_;
        if ((v30 & 1) == 0) {
          goto LABEL_5;
        }
      }
      else
      {
        id v31 = [v11 v7[226]];
        id v32 = [v12 v7[226]];

        if (v31 >= v32) {
          goto LABEL_5;
        }
      }
      if (!v5) {
        break;
      }
      id v33 = *(void **)v6;
      uint64_t v8 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v8;
      *(void *)(v6 + 8) = v33;
      v6 -= 8;
      if (v4 == ++v9) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  char v14;
  void *v15;
  void *v18;
  id v19;

  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v6 = a1;
    Swift::Int v7 = *a4;
    uint64_t v8 = *a4 + 8 * a3 - 8;
LABEL_4:
    uint64_t v9 = *(void **)(v7 + 8 * v5);
    uint64_t v10 = v8;
    while (1)
    {
      unsigned int v19 = v9;
      unsigned int v18 = *(void **)v10;
      id v11 = v18;
      id v12 = v9;
      unsigned int v13 = v11;
      unsigned int v14 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v19, &v18);

      if (v4) {
        break;
      }
      if (v14)
      {
        if (!v7)
        {
          __break(1u);
          return;
        }
        unsigned int v15 = *(void **)v10;
        uint64_t v9 = *(void **)(v10 + 8);
        *(void *)uint64_t v10 = v9;
        *(void *)(v10 + 8) = v15;
        v10 -= 8;
        if (v5 != ++v6) {
          continue;
        }
      }
      ++v5;
      v8 += 8;
      uint64_t v6 = a1;
      if (v5 != a2) {
        goto LABEL_4;
      }
      return;
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(id *__src, id *a2, unint64_t a3, void **a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = __src;
  int64_t v6 = (char *)a2 - (char *)__src;
  int64_t v7 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v7 = (char *)a2 - (char *)__src;
  }
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = a3 - (void)a2;
  uint64_t v10 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v10 = a3 - (void)a2;
  }
  uint64_t v11 = v10 >> 3;
  Swift::Int v50 = __src;
  id v49 = a4;
  if (v8 >= v10 >> 3)
  {
    if (v9 < -7) {
      goto LABEL_56;
    }
    if (a4 != a2 || &a2[v11] <= a4) {
      memmove(a4, a2, 8 * v11);
    }
    BOOL v27 = &a4[v11];
    uint64_t v48 = (char *)v27;
    Swift::Int v50 = v4;
    if (v5 >= v4 || v9 < 8)
    {
LABEL_55:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v50, &v49, &v48);
      return 1;
    }
    unsigned int v28 = (id *)(a3 - 8);
    unsigned int v29 = &selRef_setOpacity_;
    Swift::Int v30 = v4;
    unint64_t v42 = v5;
    while (1)
    {
      id v45 = v28 + 1;
      Swift::Int v47 = v4;
      id v31 = *--v30;
      id v32 = *(v27 - 1);
      id v33 = v31;
      unsigned int v34 = [v32 v29[226]];
      if (v34 == [v33 v29[226]])
      {
        unsigned int v35 = objc_msgSend(v32, sel_state);
        if (v35 == objc_msgSend(v33, sel_state))
        {

          unsigned int v29 = &selRef_setOpacity_;
          unsigned int v36 = v47;
LABEL_49:
          uint64_t v48 = (char *)(v27 - 1);
          if (v45 < v27 || v28 >= v27 || v45 != v27) {
            *unsigned int v28 = *(v27 - 1);
          }
          Swift::Int v30 = v36;
          --v27;
          if (v36 <= v5) {
            goto LABEL_55;
          }
          goto LABEL_54;
        }
        unsigned int v39 = objc_msgSend(v32, sel_state);
        unsigned int v40 = objc_msgSend(v33, sel_state);

        BOOL v23 = v40 >= v39;
        uint64_t v5 = v42;
        unsigned int v29 = &selRef_setOpacity_;
        unsigned int v36 = v47;
        if (v23) {
          goto LABEL_49;
        }
      }
      else
      {
        unsigned int v37 = [v32 v29[226]];
        unsigned int v38 = [v33 v29[226]];

        BOOL v23 = v37 >= v38;
        uint64_t v5 = v42;
        unsigned int v36 = v47;
        if (v23) {
          goto LABEL_49;
        }
      }
      if (v45 != v36 || v28 >= v36) {
        *unsigned int v28 = *v30;
      }
      Swift::Int v50 = v30;
      if (v30 <= v5) {
        goto LABEL_55;
      }
LABEL_54:
      --v28;
      uint64_t v4 = v30;
      if (v27 <= a4) {
        goto LABEL_55;
      }
    }
  }
  if (v6 >= -7)
  {
    if (a4 != __src || &__src[v8] <= a4) {
      memmove(a4, __src, 8 * v8);
    }
    Swift::Int v44 = &a4[v8];
    uint64_t v48 = (char *)v44;
    if ((unint64_t)v4 < a3 && v6 >= 8)
    {
      id v12 = &selRef_setOpacity_;
      unsigned int v13 = a4;
      while (1)
      {
        unsigned int v14 = v5;
        unsigned int v15 = *v13;
        id v16 = *v4;
        id v17 = v15;
        unsigned int v18 = objc_msgSend(v16, sel_sortOrder);
        if (v18 == objc_msgSend(v17, sel_sortOrder))
        {
          unsigned int v19 = [v16 v12[158]];
          if (v19 == [v17 v12[158]])
          {

            long long v20 = v14;
LABEL_23:
            if (v20 != v13) {
              *long long v20 = *v13;
            }
            id v49 = ++v13;
            BOOL v24 = v4;
            goto LABEL_27;
          }
          unsigned int v25 = [v16 v12[158]];
          unsigned int v26 = [v17 v12[158]];

          BOOL v23 = v26 >= v25;
          long long v20 = v14;
          if (v23) {
            goto LABEL_23;
          }
        }
        else
        {
          unsigned int v21 = objc_msgSend(v16, sel_sortOrder);
          unsigned int v22 = objc_msgSend(v17, sel_sortOrder);

          BOOL v23 = v21 >= v22;
          long long v20 = v14;
          if (v23) {
            goto LABEL_23;
          }
        }
        BOOL v24 = v4 + 1;
        if (v20 >= v4 && v20 < v24)
        {
          id v12 = &selRef_setOpacity_;
          if (v20 != v4) {
            *long long v20 = *v4;
          }
          goto LABEL_28;
        }
        *long long v20 = *v4;
LABEL_27:
        id v12 = &selRef_setOpacity_;
LABEL_28:
        uint64_t v5 = v20 + 1;
        if (v13 < v44)
        {
          uint64_t v4 = v24;
          if ((unint64_t)v24 < a3) {
            continue;
          }
        }
        Swift::Int v50 = v5;
        goto LABEL_55;
      }
    }
    goto LABEL_55;
  }
LABEL_56:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CAFPairedDevicesInformation.deviceImage.getter()
{
  id v0 = objc_msgSend(self, sel__preferredFontForTextStyle_variant_, 0, 0x10000);
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = self;
    id v3 = objc_msgSend(v2, sel_configurationWithFont_scale_, v1, 2);
    id v4 = objc_msgSend(v2, sel_configurationWithPointSize_, 40.0);
    id v5 = objc_msgSend(v3, sel_configurationByApplyingConfiguration_, v4);

    id v6 = v5;
    int64_t v7 = (void *)MEMORY[0x24C59F610](0x672E656E6F687069, 0xEB00000000336E65);
    id v8 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v7, v6);

    if (v8)
    {

      return (uint64_t)v8;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(unint64_t a1)
{
  uint64_t v2 = v1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    if (!v4) {
      return v5;
    }
    uint64_t v14 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      break;
    }
    uint64_t v7 = 0;
    uint64_t v5 = v14;
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x24C59FC50](v7, a1);
      }
      else {
        id v8 = *(id *)(a1 + 8 * v7 + 32);
      }
      uint64_t v9 = v8;
      id v12 = v8;
      closure #1 in CAFPairedDevicesInformation.items.getter(&v12, v13);
      if (v2)
      {
        swift_release();

        return v5;
      }
      uint64_t v2 = 0;

      uint64_t v14 = v5;
      unint64_t v11 = *(void *)(v5 + 16);
      unint64_t v10 = *(void *)(v5 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v5 = v14;
      }
      ++v7;
      *(void *)(v5 + 16) = v11 + 1;
      outlined init with take of CAFUIImageRepresentableItemProtocol(v13, v5 + 40 * v11 + 32);
      if (v4 == v7) {
        return v5;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of CAFUIImageRepresentableItemProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of CAFUIImageRepresentableItemProtocol(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_2494B9CA4()
{
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 80)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  }

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL static CAFUIAutomakerSettingConfiguration.AccessoryType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void CAFUIAutomakerSettingConfiguration.AccessoryType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int CAFUIAutomakerSettingConfiguration.AccessoryType.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CAFUIAutomakerSettingConfiguration.AccessoryType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CAFUIAutomakerSettingConfiguration.AccessoryType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CAFUIAutomakerSettingConfiguration.AccessoryType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CAFUIAutomakerSettingConfiguration.listContentConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UIListContentConfiguration?(v1, a1, &demangling cache variable for type metadata for UIListContentConfiguration?);
}

void *CAFUIAutomakerSettingConfiguration.detailView.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for CAFUIAutomakerSettingConfiguration(0) + 20));
  id v2 = v1;
  return v1;
}

uint64_t type metadata accessor for CAFUIAutomakerSettingConfiguration(uint64_t a1)
{
  return type metadata accessor for CAFUIAutomakerSettingConfiguration(a1, (uint64_t *)&type metadata singleton initialization cache for CAFUIAutomakerSettingConfiguration);
}

uint64_t CAFUIAutomakerSettingConfiguration.accessory.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CAFUIAutomakerSettingConfiguration(0) + 24));
}

uint64_t CAFUIAutomakerSettingConfiguration.showLimitedUISymbol.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CAFUIAutomakerSettingConfiguration(0) + 28));
}

id CAFUIAutomakerSettingCell.primaryTextColor.getter()
{
  uint64_t v1 = v0;
  id v2 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable];
  swift_beginAccess();
  uint64_t v3 = *(void *)v2;
  if (*(void *)v2)
  {
    uint64_t v4 = *((void *)v2 + 1);
    uint64_t ObjectType = swift_getObjectType();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
    swift_unknownObjectRetain();
    if ((v6(ObjectType, v4) & 1) == 0)
    {
      id v7 = objc_msgSend(self, sel_grayColor);
      goto LABEL_13;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(ObjectType, v4) & 1) != 0
      && ((objc_msgSend(v1, sel_isSelected) & 1) != 0 || objc_msgSend(v1, sel_isHighlighted)))
    {
      id v7 = objc_msgSend(self, sel__carSystemFocusLabelColor);
LABEL_13:
      id v9 = v7;
      swift_unknownObjectRelease();
      return v9;
    }
    swift_getObjectType();
    if (swift_conformsToProtocol2()) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8)
    {
      id v7 = objc_msgSend(self, sel__carSystemFocusColor);
      goto LABEL_13;
    }
    swift_unknownObjectRelease();
  }
  id v11 = objc_msgSend(self, sel_labelColor);

  return v11;
}

uint64_t CAFUIAutomakerSettingCell.isHighlightable.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  if (*v1)
  {
    uint64_t v2 = v1[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 32);
    swift_unknownObjectRetain();
    if (v4(ObjectType, v2))
    {
      if (*v1)
      {
        uint64_t v5 = v1[1];
        uint64_t v6 = swift_getObjectType();
        id v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
        swift_unknownObjectRetain();
        char v8 = v7(v6, v5);
        swift_unknownObjectRelease();
      }
      else
      {
        char v8 = 1;
      }
    }
    else
    {
      char v8 = 0;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    char v8 = 1;
  }
  return v8 & 1;
}

uint64_t CAFUIAutomakerSettingCell.isCellEnabled.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  if (*v1)
  {
    uint64_t v2 = v1[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
    swift_unknownObjectRetain();
    char v5 = v4(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

uint64_t key path setter for CAFUIAutomakerSettingCell.representable : CAFUIAutomakerSettingCell(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = swift_unknownObjectRetain();
  specialized CAFUIAutomakerSettingCell.representable.setter(v2, v1);

  return swift_unknownObjectRelease();
}

uint64_t CAFUIAutomakerSettingCell.representable.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CAFUIAutomakerSettingCell.configure(for:isParentCell:)(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = a3 & (a1 != 0);
  id v7 = (unsigned char *)(v3 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
  swift_beginAccess();
  unsigned char *v7 = v6;
  char v8 = (void *)(v3 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  *char v8 = a1;
  v8[1] = a2;
  swift_unknownObjectRetain_n();
  swift_unknownObjectRelease();
  if (*v8)
  {
    uint64_t v9 = v8[1];
    uint64_t ObjectType = swift_getObjectType();
    id v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 64);
    swift_unknownObjectRetain();
    v11(v3, ObjectType, v9);
    swift_unknownObjectRelease();
  }
  else
  {
    unsigned char *v7 = 0;
  }
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall CAFUIAutomakerSettingCell.prepareForReuse()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v2);
  char v6 = &v17[-v5];
  id v7 = (objc_class *)type metadata accessor for CAFUIAutomakerSettingCell(0);
  v18.receiver = v0;
  v18.super_class = v7;
  objc_msgSendSuper2(&v18, sel_prepareForReuse);
  uint64_t v8 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v6, 1, 1, v8);
  uint64_t v10 = (uint64_t)&v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?((uint64_t)v6, v10);
  swift_endAccess();
  outlined init with copy of UIListContentConfiguration?(v10, (uint64_t)v4, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  int v11 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8);
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v4);
  if (v11 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v6);
  id v12 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable];
  swift_beginAccess();
  *(void *)id v12 = 0;
  *((void *)v12 + 1) = 0;
  swift_unknownObjectRelease();
  if (*(void *)v12)
  {
    uint64_t v13 = *((void *)v12 + 1);
    uint64_t ObjectType = swift_getObjectType();
    unsigned int v15 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 64);
    swift_unknownObjectRetain();
    v15(v0, ObjectType, v13);
    swift_unknownObjectRelease();
  }
  else
  {
    id v16 = &v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell];
    swift_beginAccess();
    *id v16 = 0;
  }
}

uint64_t CAFUIAutomakerSettingCell.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

id CAFUIAutomakerSettingCell.__deallocating_deinit()
{
  return CAFUIAutomakerSettingCell.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for CAFUIAutomakerSettingCell);
}

uint64_t type metadata accessor for CAFUIAutomakerSettingCell(uint64_t a1)
{
  return type metadata accessor for CAFUIAutomakerSettingConfiguration(a1, (uint64_t *)&type metadata singleton initialization cache for CAFUIAutomakerSettingCell);
}

uint64_t type metadata accessor for CAFUIAutomakerSettingConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined assign with copy of CAFUIAutomakerSettingConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UIListContentConfiguration?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CAFUIAutomakerSettingConfiguration?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CAFUIAutomakerSettingConfiguration.AccessoryType and conformance CAFUIAutomakerSettingConfiguration.AccessoryType()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFUIAutomakerSettingConfiguration.AccessoryType and conformance CAFUIAutomakerSettingConfiguration.AccessoryType;
  if (!lazy protocol witness table cache variable for type CAFUIAutomakerSettingConfiguration.AccessoryType and conformance CAFUIAutomakerSettingConfiguration.AccessoryType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIAutomakerSettingConfiguration.AccessoryType and conformance CAFUIAutomakerSettingConfiguration.AccessoryType);
  }
  return result;
}

uint64_t sub_2494BAA18@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  *a2 = *v3;
  return swift_unknownObjectRetain();
}

uint64_t *initializeBufferWithCopyOfBuffer for CAFUIAutomakerSettingConfiguration(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UIListContentConfiguration();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = (uint64_t)v13;
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    id v14 = v13;
  }
  return a1;
}

void destroy for CAFUIAutomakerSettingConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UIListContentConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  char v6 = *(void **)(a1 + *(int *)(a2 + 20));
}

char *initializeWithCopy for CAFUIAutomakerSettingConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UIListContentConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)&a2[v9];
  *(void *)&a1[v9] = v11;
  a1[v10] = a2[v10];
  a1[a3[7]] = a2[a3[7]];
  id v12 = v11;
  return a1;
}

char *assignWithCopy for CAFUIAutomakerSettingConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UIListContentConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = *(void **)&a1[v12];
  id v14 = *(void **)&a2[v12];
  *(void *)&a1[v12] = v14;
  id v15 = v14;

  a1[a3[6]] = a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *initializeWithTake for CAFUIAutomakerSettingConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UIListContentConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  a1[v9] = a2[v9];
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *assignWithTake for CAFUIAutomakerSettingConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UIListContentConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = *(void **)&a1[v12];
  *(void *)&a1[v12] = *(void *)&a2[v12];

  uint64_t v14 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v14] = a2[v14];
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIAutomakerSettingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2494BB2BC);
}

uint64_t sub_2494BB2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CAFUIAutomakerSettingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2494BB3A0);
}

uint64_t sub_2494BB3A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

void type metadata completion function for CAFUIAutomakerSettingConfiguration()
{
  type metadata accessor for UIListContentConfiguration?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for UIListContentConfiguration?()
{
  if (!lazy cache variable for type metadata for UIListContentConfiguration?)
  {
    type metadata accessor for UIListContentConfiguration();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIListContentConfiguration?);
    }
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CAFUIAutomakerSettingConfiguration.AccessoryType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CAFUIAutomakerSettingConfiguration.AccessoryType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2494BB6C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for CAFUIAutomakerSettingConfiguration.AccessoryType(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for CAFUIAutomakerSettingConfiguration.AccessoryType(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CAFUIAutomakerSettingConfiguration.AccessoryType()
{
  return &type metadata for CAFUIAutomakerSettingConfiguration.AccessoryType;
}

uint64_t ObjC metadata update function for CAFUIAutomakerSettingCell()
{
  return type metadata accessor for CAFUIAutomakerSettingCell(0);
}

uint64_t type metadata completion function for CAFUIAutomakerSettingCell()
{
  return swift_updateClassMetadata2();
}

char *CAFUICollectionHeaderView.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_titleLabel;
  id v10 = objc_allocWithZone(MEMORY[0x263F828E0]);
  int v11 = v4;
  *(void *)&v4[v9] = objc_msgSend(v10, sel_init);
  uint64_t v12 = &v11[OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_title];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;

  v56.receiver = v11;
  v56.super_class = (Class)type metadata accessor for CAFUICollectionHeaderView();
  uint64_t v13 = (char *)objc_msgSendSuper2(&v56, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v14 = (void *)MEMORY[0x24C59F610](0xD000000000000019, 0x8000000249530760);
  objc_msgSend(v13, sel_setAccessibilityIdentifier_, v14);

  uint64_t v15 = OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_titleLabel;
  id v16 = *(id *)&v13[OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_titleLabel];
  id v17 = (void *)MEMORY[0x24C59F610](0xD00000000000001ELL, 0x8000000249533370);
  objc_msgSend(v16, sel_setAccessibilityIdentifier_, v17);

  objc_super v18 = *(void **)&v13[v15];
  uint64_t v19 = *MEMORY[0x263F835B8];
  double v20 = *MEMORY[0x263F81838];
  unsigned int v21 = self;
  id v22 = v18;
  id v23 = objc_msgSend(v21, sel_preferredFontDescriptorWithTextStyle_, v19);
  objc_msgSend(v23, sel_pointSize);
  double v25 = v24;

  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, v19);
  id v27 = objc_msgSend(self, sel_systemFontOfSize_weight_, v25, v20);
  id v28 = objc_msgSend(v26, sel_scaledFontForFont_, v27);

  objc_msgSend(v22, sel_setFont_, v28);
  unsigned int v29 = *(void **)&v13[v15];
  Swift::Int v30 = self;
  id v31 = v29;
  id v32 = objc_msgSend(v30, sel_secondaryLabelColor);
  objc_msgSend(v31, sel_setTextColor_, v32);

  id v33 = *(void **)&v13[v15];
  objc_msgSend(v33, sel_setNumberOfLines_, 1);
  objc_msgSend(v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v13, sel_addSubview_, v33);
  id v34 = objc_msgSend(v13, sel_topAnchor);
  id v35 = objc_msgSend(v33, sel_topAnchor);
  id v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_constant_, v35, 0.0);

  id v37 = objc_msgSend(v13, sel_bottomAnchor);
  id v38 = objc_msgSend(*(id *)&v13[v15], sel_bottomAnchor);
  id v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_constant_, v38, 4.0);

  LODWORD(v40) = 1148846080;
  objc_msgSend(v36, sel_setPriority_, v40);
  LODWORD(v41) = 1148846080;
  objc_msgSend(v39, sel_setPriority_, v41);
  id v55 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_2495300E0;
  id v43 = objc_msgSend(*(id *)&v13[v15], sel_leadingAnchor);
  id v44 = objc_msgSend(v13, sel_layoutMarginsGuide);
  id v45 = objc_msgSend(v44, sel_leadingAnchor);

  id v46 = objc_msgSend(v43, sel_constraintEqualToAnchor_, v45);
  *(void *)(v42 + 32) = v46;
  id v47 = objc_msgSend(*(id *)&v13[v15], sel_trailingAnchor);
  id v48 = objc_msgSend(v13, sel_layoutMarginsGuide);
  id v49 = objc_msgSend(v48, sel_trailingAnchor);

  id v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_, v49);
  *(void *)(v42 + 40) = v50;
  *(void *)(v42 + 48) = v36;
  *(void *)(v42 + 56) = v39;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  id v51 = v36;
  id v52 = v39;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v55, sel_activateConstraints_, isa);

  return v13;
}

id CAFUICollectionHeaderView.__deallocating_deinit(uint64_t a1)
{
  return CAFUIAutomakerSettingCell.__deallocating_deinit(a1, type metadata accessor for CAFUICollectionHeaderView);
}

id CAFUIAutomakerSettingCell.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t type metadata accessor for CAFUICollectionHeaderView()
{
  return self;
}

char *CAFUICollectionFooterView.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_titleLabel;
  id v10 = objc_allocWithZone(MEMORY[0x263F828E0]);
  int v11 = v4;
  *(void *)&v4[v9] = objc_msgSend(v10, sel_init);
  uint64_t v12 = &v11[OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_title];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;

  v56.receiver = v11;
  v56.super_class = (Class)type metadata accessor for CAFUICollectionFooterView();
  uint64_t v13 = (char *)objc_msgSendSuper2(&v56, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v14 = (void *)MEMORY[0x24C59F610](0xD000000000000019, 0x8000000249530780);
  objc_msgSend(v13, sel_setAccessibilityIdentifier_, v14);

  uint64_t v15 = OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_titleLabel;
  id v16 = *(id *)&v13[OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_titleLabel];
  id v17 = (void *)MEMORY[0x24C59F610](0xD00000000000001ELL, 0x8000000249533350);
  objc_msgSend(v16, sel_setAccessibilityIdentifier_, v17);

  objc_super v18 = *(void **)&v13[v15];
  uint64_t v19 = *MEMORY[0x263F835B8];
  double v20 = *MEMORY[0x263F81838];
  unsigned int v21 = self;
  id v22 = v18;
  id v23 = objc_msgSend(v21, sel_preferredFontDescriptorWithTextStyle_, v19);
  objc_msgSend(v23, sel_pointSize);
  double v25 = v24;

  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, v19);
  id v27 = objc_msgSend(self, sel_systemFontOfSize_weight_, v25, v20);
  id v28 = objc_msgSend(v26, sel_scaledFontForFont_, v27);

  objc_msgSend(v22, sel_setFont_, v28);
  unsigned int v29 = *(void **)&v13[v15];
  Swift::Int v30 = self;
  id v31 = v29;
  id v32 = objc_msgSend(v30, sel_secondaryLabelColor);
  objc_msgSend(v31, sel_setTextColor_, v32);

  id v33 = *(void **)&v13[v15];
  objc_msgSend(v33, sel_setNumberOfLines_, 6);
  objc_msgSend(v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v13, sel_addSubview_, v33);
  id v34 = objc_msgSend(v13, sel_topAnchor);
  id v35 = objc_msgSend(v33, sel_topAnchor);
  id v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_constant_, v35, -4.0);

  id v37 = objc_msgSend(v13, sel_bottomAnchor);
  id v38 = objc_msgSend(*(id *)&v13[v15], sel_bottomAnchor);
  id v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_constant_, v38, 0.0);

  LODWORD(v40) = 1148846080;
  objc_msgSend(v36, sel_setPriority_, v40);
  LODWORD(v41) = 1148846080;
  objc_msgSend(v39, sel_setPriority_, v41);
  id v55 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_2495300E0;
  id v43 = objc_msgSend(*(id *)&v13[v15], sel_leadingAnchor);
  id v44 = objc_msgSend(v13, sel_layoutMarginsGuide);
  id v45 = objc_msgSend(v44, sel_leadingAnchor);

  id v46 = objc_msgSend(v43, sel_constraintEqualToAnchor_, v45);
  *(void *)(v42 + 32) = v46;
  id v47 = objc_msgSend(*(id *)&v13[v15], sel_trailingAnchor);
  id v48 = objc_msgSend(v13, sel_layoutMarginsGuide);
  id v49 = objc_msgSend(v48, sel_trailingAnchor);

  id v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_, v49);
  *(void *)(v42 + 40) = v50;
  *(void *)(v42 + 48) = v36;
  *(void *)(v42 + 56) = v39;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  id v51 = v36;
  id v52 = v39;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v55, sel_activateConstraints_, isa);

  return v13;
}

void @objc CAFUICollectionHeaderView.init(coder:)(char *a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  uint64_t v8 = *a4;
  id v9 = objc_allocWithZone(MEMORY[0x263F828E0]);
  id v10 = a3;
  *(void *)&a1[v8] = objc_msgSend(v9, sel_init);
  int v11 = &a1[*a5];
  *(void *)int v11 = 0;
  *((void *)v11 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void @objc CAFUICollectionHeaderView.prepareForReuse()(void *a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  v6.receiver = a1;
  v6.super_class = (Class)a3();
  uint64_t v5 = (char *)v6.receiver;
  objc_msgSendSuper2(&v6, sel_prepareForReuse);
  objc_msgSend(*(id *)&v5[*a4], sel_setText_, 0, v6.receiver, v6.super_class);
}

id CAFUICollectionFooterView.__deallocating_deinit(uint64_t a1)
{
  return CAFUIAutomakerSettingCell.__deallocating_deinit(a1, type metadata accessor for CAFUICollectionFooterView);
}

uint64_t @objc CAFUICollectionHeaderView.__ivar_destroyer(uint64_t a1, uint64_t a2, void *a3)
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for CAFUICollectionFooterView()
{
  return self;
}

uint64_t specialized CAFUIAutomakerSettingCell.representable.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (*v5)
  {
    uint64_t v6 = v5[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 64);
    swift_unknownObjectRetain();
    v8(v2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  else
  {
    id v10 = (unsigned char *)(v2 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
    uint64_t result = swift_beginAccess();
    unsigned char *v10 = 0;
  }
  return result;
}

void *SoundSettingPage.init(title:viewController:canReset:resetAction:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = 0;
  v7[6] = 0;
  v7[7] = a4;
  v7[8] = a5;
  id v10 = a3;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  uint64_t v11 = v7[5];
  v7[5] = a6;
  v7[6] = a7;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
  uint64_t result = objc_msgSend(v10, sel_view);
  if (result)
  {
    uint64_t v13 = result;
    uint64_t result = objc_msgSend(self, sel_tableBackgroundColor);
    if (result)
    {
      uint64_t v14 = result;
      objc_msgSend(v13, sel_setBackgroundColor_, result);

      swift_release();
      swift_release();
      return v7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SoundSettingPage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 40));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 56));

  return MEMORY[0x270FA0228](v0, 72, 7);
}

unint64_t CAFUISoundSettingsViewController.activePage.getter()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_pages);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      return v3;
    }
  }
  objc_super v4 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_segmentedControl);
  if (!v4)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      unint64_t result = _CocoaArrayWrapper.endIndex.getter();
      id v5 = (id)result;
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      id v5 = *(id *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t result = swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_10:
        if ((v1 & 0xC000000000000001) != 0)
        {
          uint64_t v3 = MEMORY[0x24C59FC50](0, v1);
        }
        else
        {
          if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_27;
          }
          uint64_t v3 = *(void *)(v1 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  id v5 = v4;
  if (((unint64_t)objc_msgSend(v5, sel_selectedSegmentIndex) & 0x8000000000000000) != 0)
  {
LABEL_7:

    return 0;
  }
  id v6 = objc_msgSend(v5, sel_selectedSegmentIndex);
  uint64_t v7 = (uint64_t)v6;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 >= v9) {
      goto LABEL_7;
    }
  }
  else if ((uint64_t)v6 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_7;
  }
  unint64_t result = (unint64_t)objc_msgSend(v5, sel_selectedSegmentIndex);
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_27:
    uint64_t v3 = MEMORY[0x24C59FC50](result, v1);

    return v3;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v3 = *(void *)(v1 + 8 * result + 32);
    swift_retain();

    return v3;
  }
  __break(1u);
  return result;
}

char *CAFUISoundSettingsViewController.__allocating_init(audioSettings:audioLogo:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(a1, a2);
}

char *CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(void *a1, void *a2)
{
  v141 = a2;
  id v148 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Int8, Never>, NSRunLoop>);
  uint64_t v139 = *(void *)(v3 - 8);
  uint64_t v140 = v3;
  MEMORY[0x270FA5388](v3);
  id v138 = (char *)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x270FA5388](v5 - 8);
  id v145 = (char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Int8?, Never>, NSRunLoop>);
  uint64_t v128 = *(void *)(v129 - 8);
  MEMORY[0x270FA5388](v129);
  id v127 = (char *)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MergeMany<AnyPublisher<Int8, Never>>);
  uint64_t v131 = *(void *)(v132 - 8);
  MEMORY[0x270FA5388](v132);
  id v130 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.MergeMany<AnyPublisher<Int8, Never>>>);
  uint64_t v134 = *(void *)(v135 - 8);
  MEMORY[0x270FA5388](v135);
  id v133 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  id v10 = v2;
  unint64_t v11 = MEMORY[0x263F8EE78];
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v12 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v12 = MEMORY[0x263F8EE88];
  }
  uint64_t v142 = v10;
  *(void *)&v10[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_cancellables] = v12;
  id v13 = v148;
  swift_unknownObjectWeakAssign();
  unint64_t v155 = v11;
  id v14 = objc_msgSend(v13, sel_soundDistribution);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFSoundDistribution);
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution((unint64_t *)&lazy protocol witness table cache variable for type CAFSoundDistribution and conformance CAFSoundDistribution, (unint64_t *)&lazy cache variable for type metadata for CAFSoundDistribution);
  uint64_t v15 = (void *)CAFObserved<>.observable.getter();
  type metadata accessor for CAFSoundDistributionObservable();
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable, MEMORY[0x263F2BE18]);
  id v144 = v15;
  uint64_t v16 = ObservedObject.init(wrappedValue:)();
  objc_super v18 = v17;
  uint64_t v19 = (void *)MEMORY[0x24C59F610](0xD000000000000015, 0x8000000249533390);
  id v20 = CAFUILocalizedStringForKey(v19);

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  *(void *)&long long v149 = v16;
  *((void *)&v149 + 1) = v18;
  char v150 = 0;
  id v24 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIHostingController<CAFUIBalanceFadeView>));
  id v143 = v18;
  double v25 = (void *)UIHostingController.init(rootView:)();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v14;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v14;
  type metadata accessor for SoundSettingPage();
  uint64_t v28 = swift_allocObject();
  id v29 = v14;
  uint64_t v146 = v28;
  id v147 = v29;
  SoundSettingPage.init(title:viewController:canReset:resetAction:)(v21, v23, v25, (uint64_t)partial apply for closure #1 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v26, (uint64_t)partial apply for closure #2 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v27);
  Swift::Int v30 = &selRef_setOpacity_;
  id v31 = objc_msgSend(v13, sel_equalizers);
  if (!v31) {
    goto LABEL_18;
  }
  id v32 = v31;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v34 = v33;
    if (v68) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
  unint64_t v34 = v33;
  if (!*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_17:
    swift_bridgeObjectRelease();
LABEL_18:
    uint64_t v69 = swift_retain();
    MEMORY[0x24C59F700](v69);
    if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v51 = (void *)MEMORY[0x263F8EE78];
    id v52 = v142;
    goto LABEL_21;
  }
LABEL_6:
  uint64_t v35 = specialized CAFUIEqualizerGroup.init(equalizers:)(v34);
  uint64_t v37 = v36;
  if (*(void *)(v36 + 16) > 3uLL)
  {
    id v38 = (void *)MEMORY[0x24C59F610](0xD000000000000012, 0x80000002495333D0);
    id v39 = CAFUILocalizedStringForKey(v38);

    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;

    *(void *)&long long v149 = v35;
    *((void *)&v149 + 1) = v37;
    id v43 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIHostingController<CAFUIEqualizerGroup>));
    id v44 = (void *)UIHostingController.init(rootView:)();
    uint64_t v45 = swift_allocObject();
    id v46 = v148;
    *(void *)(v45 + 16) = v148;
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = v46;
    swift_allocObject();
    id v48 = v46;
    SoundSettingPage.init(title:viewController:canReset:resetAction:)(v40, v42, v44, (uint64_t)partial apply for closure #5 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v45, (uint64_t)partial apply for closure #6 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v47);
    uint64_t v49 = swift_retain();
    MEMORY[0x24C59F700](v49);
    if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_8;
    }
    goto LABEL_63;
  }
  id v53 = v143;
  id v54 = (void *)MEMORY[0x24C59F610](0x53474E4954544553, 0xEE00444E554F535FLL);
  id v55 = CAFUILocalizedStringForKey(v54);

  uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v126 = v56;

  *(void *)&long long v149 = v16;
  *((void *)&v149 + 1) = v53;
  char v150 = 0;
  uint64_t v151 = v35;
  uint64_t v152 = v37;
  id v57 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIHostingController<CAFUISoundView>));
  id v137 = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v58 = (void *)UIHostingController.init(rootView:)();
  uint64_t v59 = swift_allocObject();
  id v61 = v147;
  id v60 = v148;
  *(void *)(v59 + 16) = v148;
  *(void *)(v59 + 24) = v61;
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = v61;
  *(void *)(v62 + 24) = v60;
  swift_allocObject();
  id v63 = v61;
  id v64 = v60;
  id v65 = v63;
  id v66 = v64;
  SoundSettingPage.init(title:viewController:canReset:resetAction:)(v136, v126, v58, (uint64_t)partial apply for closure #3 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v59, (uint64_t)partial apply for closure #4 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v62);
  uint64_t v67 = swift_retain();
  MEMORY[0x24C59F700](v67);
  if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v51 = (void *)MEMORY[0x263F8EE78];
  id v52 = v142;
  Swift::Int v30 = &selRef_setOpacity_;
LABEL_21:
  unint64_t v70 = v155;
  unint64_t v71 = OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_pages;
  *(void *)&v52[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_pages] = v155;
  if (v70 >> 62)
  {
    while (1)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v80 < 2) {
        break;
      }
LABEL_23:
      unint64_t v73 = *(void *)&v52[v71];
      if (v73 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
        if (!v74)
        {
LABEL_39:
          swift_bridgeObjectRelease();
LABEL_40:
          id v82 = objc_allocWithZone((Class)type metadata accessor for CAFUISegmentedControl());
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v84 = objc_msgSend(v82, sel_initWithItems_, isa);

          uint64_t v85 = self;
          id v86 = v84;
          id v87 = objc_msgSend(v85, sel_secondarySystemFillColor);
          objc_msgSend(v86, sel_setSelectedSegmentTintColor_, v87);

          id v81 = v86;
          char v88 = (void *)MEMORY[0x24C59F610](0xD00000000000001DLL, 0x80000002495333B0);
          objc_msgSend(v81, sel_setAccessibilityIdentifier_, v88);

          Swift::Int v30 = &selRef_setOpacity_;
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v74 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v74) {
          goto LABEL_39;
        }
      }
      id v153 = v51;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74 & ~(v74 >> 63), 0);
      if (v74 < 0)
      {
        __break(1u);
LABEL_63:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_8:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v50 = swift_retain();
        MEMORY[0x24C59F700](v50);
        id v51 = (void *)MEMORY[0x263F8EE78];
        id v52 = v142;
        if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
        Swift::Int v30 = &selRef_setOpacity_;
        goto LABEL_21;
      }
      id v51 = 0;
      uint64_t v75 = v153;
      unint64_t v71 = v73 & 0xC000000000000001;
      Swift::Int v30 = (char **)MEMORY[0x263F8D310];
      while ((void *)v74 != v51)
      {
        if (v71)
        {
          uint64_t v76 = MEMORY[0x24C59FC50](v51, v73);
        }
        else
        {
          uint64_t v76 = *(void *)(v73 + 8 * (void)v51 + 32);
          swift_retain();
        }
        outlined init with copy of String(v76 + 16, (uint64_t)&v149);
        long long v77 = v149;
        uint64_t v151 = (uint64_t)v30;
        swift_release();
        long long v149 = v77;
        id v153 = v75;
        unint64_t v79 = v75[2];
        unint64_t v78 = v75[3];
        if (v79 >= v78 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1);
          uint64_t v75 = v153;
        }
        id v51 = (char *)v51 + 1;
        v75[2] = v79 + 1;
        outlined init with take of Any(&v149, &v75[4 * v79 + 4]);
        if ((void *)v74 == v51)
        {
          swift_bridgeObjectRelease();
          id v51 = (void *)MEMORY[0x263F8EE78];
          goto LABEL_40;
        }
      }
      __break(1u);
    }
  }
  else
  {
    uint64_t v72 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v72 >= 2) {
      goto LABEL_23;
    }
  }
  id v81 = 0;
LABEL_41:
  *(void *)&v52[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_segmentedControl] = v81;
  id v89 = (void *)MEMORY[0x24C59F610](0x53474E4954544553, 0xEE0054455345525FLL);
  id v90 = CAFUILocalizedStringForKey(v89);

  uint64_t v91 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  BOOL v93 = v92;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItem);
  swift_bridgeObjectRetain();
  id v137 = v91;
  v94.value._uint64_t countAndFlagsBits = (uint64_t)v91;
  uint64_t v136 = (uint64_t)v93;
  v94.value._object = v93;
  v156.value.super.Class isa = 0;
  v156.is_nil = 0;
  v157.value.super.super.Class isa = 0;
  *(UIBarButtonItem *)&v52[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_resetButton] = UIBarButtonItem.init(title:image:primaryAction:menu:)(v94, v156, v157, v158);
  uint64_t v95 = v141;
  *(void *)&v52[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_audioLogo] = v141;
  v96 = v95;

  uint64_t v97 = (objc_class *)type metadata accessor for CAFUISoundSettingsViewController();
  v154.receiver = v52;
  v154.super_class = v97;
  uint64_t v98 = (char *)objc_msgSendSuper2(&v154, sel_initWithTransitionStyle_navigationOrientation_options_, 1, 0, 0);
  id v99 = [v148 v30[240]];
  uint64_t v142 = v96;
  if (v99)
  {
    v100 = v99;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
    unint64_t v101 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_getKeyPath();
    *(void *)&long long v149 = v51;
    if (v101 >> 62) {
      goto LABEL_56;
    }
    uint64_t v102 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    for (; v102; uint64_t v102 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v103 = 4;
      while (1)
      {
        uint64_t v104 = v103 - 4;
        if ((v101 & 0xC000000000000001) == 0) {
          break;
        }
        id v105 = (void *)MEMORY[0x24C59FC50](v103 - 4, v101);
        uint64_t v106 = v103 - 3;
        if (__OFADD__(v104, 1)) {
          goto LABEL_55;
        }
LABEL_50:
        id v153 = v105;
        uint64_t v107 = v105;
        swift_getAtKeyPath();

        MEMORY[0x24C59F700]();
        if (*(void *)(v149 + 16) >= *(void *)(v149 + 24) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        ++v103;
        if (v106 == v102)
        {
          swift_bridgeObjectRelease();
          uint64_t v108 = v149;
          goto LABEL_58;
        }
      }
      id v105 = *(id *)(v101 + 8 * v103);
      uint64_t v106 = v103 - 3;
      if (!__OFADD__(v104, 1)) {
        goto LABEL_50;
      }
LABEL_55:
      __break(1u);
LABEL_56:
      swift_retain();
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    uint64_t v108 = MEMORY[0x263F8EE78];
LABEL_58:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)&long long v149 = v108;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Int8, Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyPublisher<Int8, Never>]);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Int8, Never>);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type [AnyPublisher<Int8, Never>] and conformance [A], &demangling cache variable for type metadata for [AnyPublisher<Int8, Never>]);
    uint64_t v109 = v130;
    Publishers.MergeMany.init<A>(_:)();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Publishers.MergeMany<AnyPublisher<Int8, Never>> and conformance Publishers.MergeMany<A>, &demangling cache variable for type metadata for Publishers.MergeMany<AnyPublisher<Int8, Never>>);
    unint64_t v110 = v133;
    uint64_t v111 = v132;
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v131 + 8))(v109, v111);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.MergeMany<AnyPublisher<Int8, Never>>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.MergeMany<AnyPublisher<Int8, Never>>>);
    uint64_t v112 = v135;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v134 + 8))(v110, v112);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (objc_msgSend(v147, sel_hasFade))
  {
    *(void *)&long long v149 = dispatch thunk of CAFSoundDistributionObservable.$fade.getter();
    id v153 = objc_msgSend(self, sel_mainRunLoop);
    uint64_t v113 = type metadata accessor for NSRunLoop.SchedulerOptions();
    uint64_t v114 = (uint64_t)v145;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56))(v145, 1, 1, v113);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Int8?, Never>);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Int8?, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Int8?, Never>);
    lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution(&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    uint64_t v115 = v127;
    Publisher.receive<A>(on:options:)();
    outlined destroy of NSRunLoop.SchedulerOptions?(v114);

    swift_release();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Int8?, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Int8?, Never>, NSRunLoop>);
    uint64_t v116 = v129;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v115, v116);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  uint64_t v117 = v144;
  *(void *)&long long v149 = dispatch thunk of CAFSoundDistributionObservable.$balance.getter();
  id v153 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v118 = type metadata accessor for NSRunLoop.SchedulerOptions();
  uint64_t v119 = (uint64_t)v145;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v118 - 8) + 56))(v145, 1, 1, v118);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Int8, Never>);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Int8, Never>);
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution(&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  id v120 = v138;
  Publisher.receive<A>(on:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?(v119);

  swift_release();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Int8, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Int8, Never>, NSRunLoop>);
  uint64_t v121 = v140;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v139 + 8))(v120, v121);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v122 = *(void **)&v98[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_resetButton];
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAction);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v123 = v122;
  Swift::Int v124 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  objc_msgSend(v123, sel_setPrimaryAction_, v124);

  swift_release();
  return v98;
}

uint64_t key path getter for CAFObserved<>.observable : CAFEqualizer@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution((unint64_t *)&lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  uint64_t result = CAFObserved<>.observable.getter();
  *a1 = result;
  return result;
}

void closure #8 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x24C5A0810](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    CAFUISoundSettingsViewController.updateResetButton()();
  }
}

void closure #10 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x24C5A0810](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    unint64_t v5 = CAFUISoundSettingsViewController.activePage.getter();
    if (v5)
    {
      uint64_t v6 = *(void (**)(uint64_t))(v5 + 40);
      if (v6)
      {
        uint64_t v7 = swift_retain();
        v6(v7);
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v6);
      }

      swift_release();
    }
    else
    {
    }
  }
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x24C5A0810](v2);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    CAFUISoundSettingsViewController.updateResetButton()();
  }
}

void CAFUISoundSettingsViewController.init(coder:)(void *a1)
{
  swift_unknownObjectWeakInit();
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v2 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v2 = MEMORY[0x263F8EE88];
  }
  *(void *)&v1[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_cancellables] = v2;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CAFUISoundSettingsViewController.viewDidLoad()()
{
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for CAFUISoundSettingsViewController();
  objc_msgSendSuper2(&v5, sel_viewDidLoad);
  id v1 = objc_msgSend(v0, sel_navigationController);
  if (v1)
  {
    unint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_navigationBar);

    objc_msgSend(v3, sel_setBarStyle_, 4);
  }
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_segmentedControl];
  if (v4) {
    objc_msgSend(v4, sel_addTarget_action_forControlEvents_, v0, sel_segmentedControlChangedWithSender_, 4096);
  }
  CAFUISoundSettingsViewController.updateBarButtons()();
  CAFUISoundSettingsViewController.changePage(index:animated:)(0, 1);
}

void CAFUISoundSettingsViewController.updateBarButtons()()
{
  id v1 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_segmentedControl];
  if (!v1)
  {
    id v2 = objc_msgSend(v0, sel_navigationItem);
    unint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_pages];
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_5:
        if ((v4 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = MEMORY[0x24C59FC50](0, v4);
        }
        else
        {
          if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          uint64_t v6 = *(void *)(v4 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        uint64_t v8 = *(void *)(v6 + 16);
        uint64_t v7 = *(void *)(v6 + 24);
        swift_bridgeObjectRetain();
        swift_release();
        id v9 = (id)MEMORY[0x24C59F610](v8, v7);
        goto LABEL_11;
      }
    }
    id v9 = 0;
LABEL_11:
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_setTitle_, v9);
    goto LABEL_12;
  }
  id v2 = v1;
  id v3 = objc_msgSend(v0, sel_navigationItem);
  objc_msgSend(v3, sel_setTitle_, 0);

  id v9 = objc_msgSend(v0, sel_navigationItem);
  objc_msgSend(v9, sel_setTitleView_, v2);
LABEL_12:
}

void CAFUISoundSettingsViewController.updateResetButton()()
{
  id v1 = v0;
  unint64_t v2 = CAFUISoundSettingsViewController.activePage.getter();
  if (v2)
  {
    id v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
    if (v3)
    {
      uint64_t v4 = swift_retain();
      char v5 = v3(v4);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v3);
      swift_release();
      if (v5)
      {
        id v6 = objc_msgSend(v0, sel_navigationItem);
        uint64_t v7 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_resetButton];
        uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_audioLogo];
        uint64_t v15 = MEMORY[0x263F8EE78];
        id v9 = v8;
        id v10 = v7;
        MEMORY[0x24C59F700]();
        if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        if (v8)
        {
          id v11 = v9;
          MEMORY[0x24C59F700]();
          if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }

        goto LABEL_17;
      }
    }
    else
    {
      swift_release();
    }
  }
  id v6 = objc_msgSend(v0, sel_navigationItem);
  unint64_t v12 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_audioLogo];
  uint64_t v16 = MEMORY[0x263F8EE78];
  if (v12)
  {
    id v13 = v12;
    MEMORY[0x24C59F700]();
    if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }

LABEL_17:
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setRightBarButtonItems_, isa);
}

void CAFUISoundSettingsViewController.changePage(index:animated:)(uint64_t a1, char a2)
{
  id v3 = v2;
  unint64_t v6 = *(void *)&v2[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_pages];
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12 <= a1) {
      return;
    }
  }
  else if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2495300D0;
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = MEMORY[0x24C59FC50](a1, v6);
    goto LABEL_7;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)a1)
  {
LABEL_16:
    __break(1u);
    return;
  }
  uint64_t v8 = *(void *)(v6 + 8 * a1 + 32);
  swift_retain();
LABEL_7:
  id v9 = *(id *)(v8 + 32);
  swift_release();
  *(void *)(v7 + 32) = v9;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setViewControllers_direction_animated_completion_, isa, 0, a2 & 1, 0);

  id v11 = *(void **)&v3[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_segmentedControl];
  if (v11) {
    objc_msgSend(v11, sel_setSelectedSegmentIndex_, a1);
  }

  CAFUISoundSettingsViewController.updateResetButton()();
}

id CAFUISoundSettingsViewController.__allocating_init(transitionStyle:navigationOrientation:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (a3)
  {
    type metadata accessor for UIPageViewControllerOptionsKey(0);
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, type metadata accessor for UIPageViewControllerOptionsKey);
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  id v8 = objc_msgSend(objc_allocWithZone(v4), sel_initWithTransitionStyle_navigationOrientation_options_, a1, a2, v7.super.isa);

  return v8;
}

void CAFUISoundSettingsViewController.init(transitionStyle:navigationOrientation:options:)()
{
}

id CAFUISoundSettingsViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUISoundSettingsViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2494BEC64()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
  return CAFSoundDistribution.resettable.getter() & 1;
}

void partial apply for closure #2 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
}

uint64_t type metadata accessor for SoundSettingPage()
{
  return self;
}

uint64_t type metadata accessor for CAFUISoundSettingsViewController()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of NSRunLoop.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2494BEDD4()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #9 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(uint64_t a1)
{
  closure #8 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(a1, v1);
}

void partial apply for closure #10 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(uint64_t a1)
{
  closure #10 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(a1, v1);
}

void partial apply for closure #8 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(uint64_t a1)
{
  closure #8 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(a1, v1);
}

uint64_t sub_2494BEE38()
{
  return lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution((unint64_t *)&lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
}

uint64_t sub_2494BEE7C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution((unint64_t *)&lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  uint64_t result = CAFObserved<>.observable.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2494BEF0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of CAFEqualizerObservable.$value.getter();
  *a1 = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of String(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_2494BEFE8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #3 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
  CAFAudioSettings.equalizersResettable.getter();
  if (v0) {
    return 1;
  }
  else {
    return CAFSoundDistribution.resettable.getter() & 1;
  }
}

void partial apply for closure #4 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
}

uint64_t partial apply for closure #5 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
  CAFAudioSettings.equalizersResettable.getter();
  return v0 & 1;
}

void partial apply for closure #6 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

id CAFUIHeaderFooterView.__allocating_init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (void *)MEMORY[0x24C59F610]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v3 = 0;
  }
  id v4 = objc_msgSend(objc_allocWithZone(v2), sel_initWithReuseIdentifier_, v3);

  return v4;
}

id CAFUIHeaderFooterView.init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (void *)MEMORY[0x24C59F610]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v3 = 0;
  }
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for CAFUIHeaderFooterView();
  id v4 = objc_msgSendSuper2(&v6, sel_initWithReuseIdentifier_, v3);

  return v4;
}

uint64_t type metadata accessor for CAFUIHeaderFooterView()
{
  return self;
}

id CAFUIHeaderFooterView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for CAFUIHeaderFooterView();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id CAFUIHeaderFooterView.__deallocating_deinit()
{
  return CAFUIHeaderFooterView.__deallocating_deinit(type metadata accessor for CAFUIHeaderFooterView);
}

uint64_t CAFUIHeaderView.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

id CAFUIHeaderView.__deallocating_deinit()
{
  return CAFUIHeaderFooterView.__deallocating_deinit(type metadata accessor for CAFUIHeaderView);
}

uint64_t CAFUIFooterView.title.didset()
{
  uint64_t v0 = type metadata accessor for UIListContentConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  id v4 = (char *)&v13[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24C59F7F0](v2);
  id v5 = objc_msgSend(self, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F835B8]);
  id v6 = objc_msgSend(self, sel_fontWithDescriptor_size_, v5, 0.0);

  NSDictionary v7 = (void (*)(uint64_t *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v7(v13, 0);
  id v8 = objc_msgSend(self, sel_secondaryLabelColor);
  id v9 = (void (*)(uint64_t *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v9(v13, 0);
  swift_bridgeObjectRetain();
  UIListContentConfiguration.text.setter();
  v13[3] = v0;
  v13[4] = MEMORY[0x263F81F20];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  (*(void (**)(uint64_t *, char *, uint64_t))(v1 + 16))(boxed_opaque_existential_1, v4, v0);
  MEMORY[0x24C59F7E0](v13);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

id @objc CAFUIHeaderView.init(reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t))
{
  NSDictionary v7 = (char *)a1;
  if (a3)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = &v7[*a4];
    *(void *)id v9 = 0;
    *((void *)v9 + 1) = 0;
    id v10 = (void *)MEMORY[0x24C59F610](v8);
    a1 = swift_bridgeObjectRelease();
  }
  else
  {
    id v10 = 0;
    id v11 = (void *)(a1 + *a4);
    *id v11 = 0;
    v11[1] = 0;
  }
  v14.receiver = v7;
  v14.super_class = (Class)a5(a1);
  id v12 = objc_msgSendSuper2(&v14, sel_initWithReuseIdentifier_, v10);

  return v12;
}

id @objc CAFUIHeaderView.init(coder:)(char *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  NSDictionary v7 = &a1[*a4];
  uint64_t v8 = (objc_class *)a5();
  *(void *)NSDictionary v7 = 0;
  *((void *)v7 + 1) = 0;
  v10.receiver = a1;
  v10.super_class = v8;
  return objc_msgSendSuper2(&v10, sel_initWithCoder_, a3);
}

uint64_t CAFUIFooterView.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

id CAFUIFooterView.__deallocating_deinit()
{
  return CAFUIHeaderFooterView.__deallocating_deinit(type metadata accessor for CAFUIFooterView);
}

id CAFUITableCell.__allocating_init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  if (a3)
  {
    id v6 = (void *)MEMORY[0x24C59F610](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithStyle_reuseIdentifier_, a1, v6);

  return v7;
}

id CAFUITableCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized CAFUITableCell.init(style:reuseIdentifier:)(a2, a3);
}

id CAFUITableCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CAFUITableCell.init(coder:)()
{
}

void CAFUITableCell.__allocating_init(reuseIdentifier:)()
{
}

void CAFUITableCell.init(reuseIdentifier:)()
{
}

uint64_t CAFUITableCell.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFUITableCell.isCellEnabled.getter()
{
  return 1;
}

uint64_t CAFUITableCell.canBecomeFocused.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

Swift::Void __swiftcall CAFUITableCell.prepareForReuse()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUITableCell();
  objc_msgSendSuper2(&v2, sel_prepareForReuse);
  objc_msgSend(v0, sel_setSelectionStyle_, 1);
  objc_msgSend(v0, sel_setAccessoryType_, 0);
  id v1 = objc_msgSend(v0, sel_accessoryView);
  objc_msgSend(v1, sel_removeFromSuperview);

  objc_msgSend(v0, sel_setAccessoryView_, 0);
}

id CAFUITableCell.updateConfiguration(using:)(uint64_t a1)
{
  uint64_t v51 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v47 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v45 - v5;
  uint64_t v7 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  id v46 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v48 = (char *)&v45 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  MEMORY[0x270FA5388](v11 - 8);
  id v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UIListContentConfiguration();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  objc_super v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v20 = (char *)&v45 - v19;
  id v21 = objc_msgSend(v1, sel_accessoryView);
  if (v21)
  {
    uint64_t v22 = v21;
    self;
    uint64_t v23 = swift_dynamicCastObjCClass();
    if (v23)
    {
      id v24 = (void *)v23;
      char v25 = UICellConfigurationState.isHighlighted.getter();
      uint64_t v26 = self;
      uint64_t v27 = &selRef__carSystemFocusLabelColor;
      if ((v25 & 1) == 0) {
        uint64_t v27 = &selRef__carSystemFocusColor;
      }
      id v28 = [v26 *v27];
      objc_msgSend(v24, sel_setTintColor_, v28);

      uint64_t v22 = v28;
    }
  }
  MEMORY[0x24C59F860](v52);
  if (v53)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIContentConfiguration);
    int v29 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, v29 ^ 1u, 1, v14);
    int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
    uint64_t v31 = v50;
    if (v30 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
      uint64_t v32 = type metadata accessor for UICellConfigurationState();
      uint64_t v53 = v32;
      uint64_t v54 = MEMORY[0x263F81ED0];
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(boxed_opaque_existential_1, v51, v32);
      UIListContentConfiguration.updated(for:)();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
      uint64_t v53 = v14;
      uint64_t v54 = MEMORY[0x263F81F20];
      unint64_t v34 = __swift_allocate_boxed_opaque_existential_1(v52);
      specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v18, (uint64_t)v34);
      uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
      v35(v18, v14);
      MEMORY[0x24C59F870](v52);
      uint64_t v36 = ((uint64_t (*)(char *, uint64_t))v35)(v20, v14);
      goto LABEL_12;
    }
  }
  else
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v52, &demangling cache variable for type metadata for UIContentConfiguration?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    uint64_t v31 = v50;
  }
  uint64_t v36 = outlined destroy of UIContentConfiguration?((uint64_t)v13, &demangling cache variable for type metadata for UIListContentConfiguration?);
LABEL_12:
  uint64_t v37 = v48;
  MEMORY[0x24C59F880](v36);
  uint64_t v38 = v49;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v6, 1, v31) == 1) {
    return (id)outlined destroy of UIContentConfiguration?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v6, v31);
  uint64_t v40 = type metadata accessor for UICellConfigurationState();
  uint64_t v53 = v40;
  uint64_t v54 = MEMORY[0x263F81ED0];
  uint64_t v41 = __swift_allocate_boxed_opaque_existential_1(v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v41, v51, v40);
  uint64_t v42 = v46;
  UIBackgroundConfiguration.updated(for:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
  id v43 = v47;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v47, v42, v31);
  id result = objc_msgSend(self, sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    id v44 = *(void (**)(char *, uint64_t))(v38 + 8);
    v44(v42, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v43, 0, 1, v31);
    MEMORY[0x24C59F890](v43);
    return (id)((uint64_t (*)(char *, uint64_t))v44)(v37, v31);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CAFUITableCell.cafui_contentConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24C59F8A0](v4);
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v6, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

id CAFUITableCell.cafui_backgroundConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24C59F8B0](v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v6, v2);
  id result = objc_msgSend(self, sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id specialized CAFUICellProtocol.defaultPrimaryTextColor.getter()
{
  id v1 = (void *)MEMORY[0x263F8EED0];
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))())
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0x58))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      uint64_t v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      uint64_t v2 = &selRef_labelColor;
    }
  }
  else
  {
    uint64_t v2 = &selRef_grayColor;
  }
  id v3 = [self *v2];

  return v3;
}

{
  void *v0;
  void *v1;
  char **v2;
  id v3;
  uint64_t vars8;

  id v1 = (void *)MEMORY[0x263F8EED0];
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))())
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0xB8))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      uint64_t v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      uint64_t v2 = &selRef_labelColor;
    }
  }
  else
  {
    uint64_t v2 = &selRef_grayColor;
  }
  id v3 = [self *v2];

  return v3;
}

Swift::Void __swiftcall CAFUITableCell.setHighlighted(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  uint64_t v4 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x58);
  char v5 = v4() & _;
  char v6 = v4() & animated;
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CAFUITableCell();
  objc_msgSendSuper2(&v7, sel_setHighlighted_animated_, v5 & 1, v6 & 1);
}

Swift::Void __swiftcall CAFUITableCell.setSelected(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  uint64_t v4 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x60);
  char v5 = v4() & _;
  char v6 = v4() & animated;
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CAFUITableCell();
  objc_msgSendSuper2(&v7, sel_setSelected_animated_, v5 & 1, v6 & 1);
}

id CAFUITableCell.__deallocating_deinit()
{
  return CAFUIHeaderFooterView.__deallocating_deinit(type metadata accessor for CAFUITableCell);
}

uint64_t protocol witness for CAFUICellProtocol.primaryTextColor.getter in conformance CAFUITableCell()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x90))();
}

uint64_t protocol witness for CAFUICellProtocol.secondaryTextColor.getter in conformance CAFUITableCell()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t protocol witness for CAFUICellProtocol.imageColor.getter in conformance CAFUITableCell()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t protocol witness for CAFUICellProtocol.accessoryColor.getter in conformance CAFUITableCell()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t protocol witness for CAFUICellProtocol.isHighlightable.getter in conformance CAFUITableCell()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

id protocol witness for CAFUICellProtocol.isHighlighted.getter in conformance CAFUITableCell()
{
  return objc_msgSend(v0, sel_isHighlighted);
}

id protocol witness for CAFUICellProtocol.isSelected.getter in conformance CAFUITableCell()
{
  return objc_msgSend(v0, sel_isSelected);
}

uint64_t protocol witness for CAFUICellProtocol.isCellEnabled.getter in conformance CAFUITableCell()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t @objc CAFUITableCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (a4)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  return a5(v6, v7);
}

void CAFUIFocusRingTableCell.__allocating_init(reuseIdentifier:)()
{
  id v1 = objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR____TtC5CAFUI23CAFUIFocusRingTableCell_focusRing] = 0;
  v1[OBJC_IVAR____TtC5CAFUI23CAFUIFocusRingTableCell_showsFocusRing] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id @objc CAFUIFocusRingTableCell.setHighlighted(_:animated:)(id result, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  if ((*((unsigned char *)result + OBJC_IVAR____TtC5CAFUI23CAFUIFocusRingTableCell_showsFocusRing) & 1) == 0)
  {
    v8.receiver = result;
    v8.super_class = (Class)type metadata accessor for CAFUIFocusRingTableCell();
    return objc_msgSendSuper2(&v8, *a5, a3, a4);
  }
  return result;
}

void CAFUIFocusRingTableCell.__ivar_destroyer()
{
}

id CAFUIFocusRingTableCell.__deallocating_deinit()
{
  return CAFUIHeaderFooterView.__deallocating_deinit(type metadata accessor for CAFUIFocusRingTableCell);
}

id CAFUIHeaderFooterView.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

unint64_t one-time initialization function for cellsByIdentifiers(uint64_t a1)
{
  return one-time initialization function for cellsByIdentifiers(a1, type metadata accessor for CAFUITableCell, type metadata accessor for CAFUIFocusRingTableCell, (unint64_t *)&static CAFUITableCells.cellsByIdentifiers);
}

unint64_t one-time initialization function for viewsByIdentifiers(uint64_t a1)
{
  return one-time initialization function for cellsByIdentifiers(a1, type metadata accessor for CAFUIHeaderView, type metadata accessor for CAFUIFooterView, (unint64_t *)&static CAFUITableHeaderFooterViews.viewsByIdentifiers);
}

unint64_t one-time initialization function for cellsByIdentifiers(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), unint64_t *a4)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Swift.AnyObject.Type)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249530890;
  uint64_t v8 = a2();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v10 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  *(void *)(inited + 32) = v11;
  *(void *)(inited + 40) = v13;
  *(void *)(inited + 48) = v8;
  uint64_t v14 = a3();
  uint64_t v15 = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v16 = NSStringFromClass(v15);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(inited + 56) = v17;
  *(void *)(inited + 64) = v19;
  *(void *)(inited + 72) = v14;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  *a4 = result;
  return result;
}

id specialized CAFUITableCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    objc_super v3 = (void *)MEMORY[0x24C59F610]();
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v3 = 0;
  }
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for CAFUITableCell();
  id v4 = objc_msgSendSuper2(&v9, sel_initWithStyle_reuseIdentifier_, 1, v3);

  id v5 = v4;
  uint64_t v6 = (void *)MEMORY[0x24C59F610](0x6261544955464143, 0xEE006C6C6543656CLL);
  objc_msgSend(v5, sel_setAccessibilityIdentifier_, v6);

  id result = objc_msgSend(self, sel_tableCellPlainBackgroundColor);
  if (result)
  {
    uint64_t v8 = result;
    objc_msgSend(v5, sel_setBackgroundColor_, result);

    objc_msgSend(v5, sel_setSelectionStyle_, 1);
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for CAFUITableCell()
{
  return self;
}

uint64_t outlined destroy of UIContentConfiguration?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  id v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for CAFUIHeaderView()
{
  return self;
}

uint64_t type metadata accessor for CAFUIFooterView()
{
  return self;
}

uint64_t type metadata accessor for CAFUIFocusRingTableCell()
{
  return self;
}

id specialized CAFUIFocusRingTableCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  *(void *)&v2[OBJC_IVAR____TtC5CAFUI23CAFUIFocusRingTableCell_focusRing] = 0;
  v2[OBJC_IVAR____TtC5CAFUI23CAFUIFocusRingTableCell_showsFocusRing] = 0;
  if (a2)
  {
    uint64_t v3 = (void *)MEMORY[0x24C59F610]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = 0;
  }
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for CAFUIFocusRingTableCell();
  id v4 = objc_msgSendSuper2(&v8, sel_initWithStyle_reuseIdentifier_, 1, v3);

  id v5 = v4;
  uint64_t v6 = (void *)MEMORY[0x24C59F610](0xD000000000000017, 0x80000002495308F0);
  objc_msgSend(v5, sel_setAccessibilityIdentifier_, v6);

  return v5;
}

uint64_t CAFSettingsCategory.name.getter(char a1)
{
  switch(a1)
  {
    case 1:
      unint64_t v2 = 0x53474E4954544553;
      uint64_t v3 = 0x414944454D5FLL;
      goto LABEL_7;
    case 2:
      id v1 = "SETTINGS_CLIMATE";
      goto LABEL_5;
    case 3:
      unint64_t v2 = 0x53474E4954544553;
      uint64_t v3 = 0x4F494455415FLL;
LABEL_7:
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      goto LABEL_8;
    default:
      id v1 = "SETTINGS_GENERAL";
LABEL_5:
      unint64_t v4 = (unint64_t)(v1 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000010;
LABEL_8:
      id v5 = (void *)MEMORY[0x24C59F610](v2, v4);
      id v6 = CAFUILocalizedStringForKey(v5);

      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      return v7;
  }
}

id CAFSettingsCategory.symbol.getter(char a1)
{
  switch(a1)
  {
    case 0:
      id v1 = (void *)MEMORY[0x24C59F610](1918985575, 0xE400000000000000);
      id v2 = objc_msgSend(self, sel_systemImageNamed_, v1);

      if (!v2)
      {
        __break(1u);
        goto LABEL_4;
      }
      break;
    case 1:
LABEL_4:
      uint64_t v3 = (void *)MEMORY[0x24C59F610](0x69662E6F69646172, 0xEA00000000006C6CLL);
      id v2 = objc_msgSend(self, sel_systemImageNamed_, v3);

      if (!v2)
      {
        __break(1u);
        goto LABEL_6;
      }
      break;
    case 2:
LABEL_6:
      unint64_t v4 = (void *)MEMORY[0x24C59F610](0x6564616C626E6166, 0xEE006C6C69662E73);
      id v2 = objc_msgSend(self, sel_systemImageNamed_, v4);

      if (!v2)
      {
        __break(1u);
        goto LABEL_8;
      }
      break;
    case 3:
LABEL_8:
      id v5 = (void *)MEMORY[0x24C59F610](0xD000000000000013, 0x8000000249533730);
      id v2 = objc_msgSend(self, sel_systemImageNamed_, v5);

      if (!v2)
      {
        __break(1u);
        goto LABEL_10;
      }
      break;
    default:
LABEL_10:
      id v6 = (void *)MEMORY[0x24C59F610](1918985575, 0xE400000000000000);
      id v2 = objc_msgSend(self, sel_systemImageNamed_, v6);

      if (!v2)
      {
        __break(1u);
        JUMPOUT(0x2494C1444);
      }
      return result;
  }
  return v2;
}

BOOL static CAFUINumericDisplayKind.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void CAFUINumericDisplayKind.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int CAFUINumericDisplayKind.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CAFUINumericDisplayKind(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t CAFUINumericRepresentable.cell.getter()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &static CAFUIAssociatedObjects.CellValue);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    type metadata accessor for CAFUIAutomakerSettingCell(0);
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void CAFUINumericRepresentable.cell.setter(void *a1)
{
  specialized CAFUINumericRepresentable.cell.setter(a1);
}

void (*CAFUINumericRepresentable.cell.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(void **a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = CAFUINumericRepresentable.cell.getter();
  return CAFUINumericRepresentable.cell.modify;
}

void CAFUINumericRepresentable.cell.modify(void **a1, char a2)
{
  id v4 = *a1;
  if (a2)
  {
    id v2 = v4;
    specialized CAFUINumericRepresentable.cell.setter(v4);

    uint64_t v3 = v2;
  }
  else
  {
    specialized CAFUINumericRepresentable.cell.setter(*a1);
    uint64_t v3 = v4;
  }
}

void CAFUINumericRepresentable.configureCell(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v102 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v101 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  v100 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x270FA5388](v8 - 8);
  id v99 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for UIListContentConfiguration();
  uint64_t v105 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v95 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v94 = (uint64_t)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v114 = (uint64_t)&v92 - v14;
  uint64_t v112 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v111 = *(void *)(v112 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v112);
  uint64_t v107 = (uint64_t)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v93 = (uint64_t)&v92 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v97 = (uint64_t)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v98 = (uint64_t)&v92 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v104 = (uint64_t)&v92 - v23;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = (char *)&v92 - v26;
  id v28 = *(void (**)(void *, uint64_t, uint64_t))(a3 + 88);
  id v115 = a1;
  v28(a1, a2, a3);
  uint64_t v29 = v3;
  uint64_t v30 = a2;
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  specialized CAFUINumericRepresentable.settings_asDouble(_:)((uint64_t)v27);
  uint64_t v32 = v31;
  uint64_t v113 = *(void (**)(char *, uint64_t))(v25 + 8);
  v113(v27, AssociatedTypeWitness);
  unint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  unint64_t v34 = (void *)v33(a2, a3);
  uint64_t v116 = *(void *)(swift_getAssociatedConformanceWitness() + 24);
  CAFRange.minimumValue<A>()();

  specialized CAFUINumericRepresentable.settings_asDouble(_:)((uint64_t)v27);
  uint64_t v36 = v35;
  uint64_t v37 = v113;
  v113(v27, AssociatedTypeWitness);
  uint64_t v38 = (void *)v33(v30, a3);
  CAFRange.maximumValue<A>()();

  specialized CAFUINumericRepresentable.settings_asDouble(_:)((uint64_t)v27);
  uint64_t v40 = v39;
  v37(v27, AssociatedTypeWitness);
  uint64_t v41 = (void *)v33(v30, a3);
  CAFRange.stepValue<A>()();

  specialized CAFUINumericRepresentable.settings_asDouble(_:)((uint64_t)v27);
  uint64_t v43 = v42;
  v37(v27, AssociatedTypeWitness);
  uint64_t v44 = v29;
  uint64_t v45 = v30;
  LOBYTE(v113) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(v30, a3) & 1;
  LODWORD(v113) = v113;
  int v46 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 72))(v30, a3);
  uint64_t v116 = *(void *)(a3 + 8);
  uint64_t v47 = 0x676E697265657473;
  unint64_t v48 = 0xED00006C65656877;
  if ((CAFListContentRepresentable.isLimitedUI.getter(v30, v116) & 1) == 0)
  {
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 104))(v30, a3);
    unint64_t v48 = v49;
  }
  LODWORD(v106) = v46;
  unint64_t v50 = 0xED00006C65656877;
  uint64_t v51 = 0x676E697265657473;
  if ((CAFListContentRepresentable.isLimitedUI.getter(v30, v116) & 1) == 0)
  {
    uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 112))(v30, a3);
    unint64_t v50 = v52;
  }
  uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(v30, a3);
  uint64_t v55 = v54;
  char v56 = (*(uint64_t (**)(uint64_t))(v116 + 16))(v45);
  id v57 = (void *)swift_allocObject();
  v57[2] = v45;
  v57[3] = a3;
  v57[4] = v44;
  *(void *)&long long v117 = v32;
  *((void *)&v117 + 1) = v36;
  *(void *)&long long v118 = v40;
  *((void *)&v118 + 1) = v43;
  LOBYTE(v119) = (_BYTE)v113;
  BYTE1(v119) = v106 & 1;
  *((void *)&v119 + 1) = v47;
  *(void *)&long long v120 = v48;
  unint64_t v110 = v48;
  *((void *)&v120 + 1) = v51;
  *(void *)&long long v121 = v50;
  unint64_t v103 = v50;
  *((void *)&v121 + 1) = v53;
  *(void *)&long long v122 = v55;
  uint64_t v108 = v55;
  BYTE8(v122) = v56 & 1;
  *(void *)&long long v123 = partial apply for closure #1 in CAFUINumericRepresentable.configureCell(_:);
  *((void *)&v123 + 1) = v57;
  uint64_t v109 = v57;
  uint64_t v58 = (uint64_t)v115 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  uint64_t v59 = v104;
  outlined init with copy of UIListContentConfiguration?(v58, v104, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  id v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
  uint64_t v61 = v112;
  if (v60(v59, 1, v112))
  {
    swift_unknownObjectRetain();
    outlined destroy of UIContentConfiguration?(v59, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    uint64_t v62 = v114;
    uint64_t v63 = v105;
  }
  else
  {
    uint64_t v83 = v93;
    outlined init with copy of CAFUIAutomakerSettingConfiguration(v59, v93);
    swift_unknownObjectRetain();
    outlined destroy of UIContentConfiguration?(v59, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    id v84 = *(void **)(v83 + *(int *)(v61 + 20));
    id v85 = v84;
    outlined destroy of CAFUIAutomakerSettingConfiguration(v83);
    uint64_t v62 = v114;
    uint64_t v63 = v105;
    if (v84)
    {
      type metadata accessor for CAFUINumericInputView();
      uint64_t v86 = swift_dynamicCastClass();
      if (v86)
      {
        uint64_t v87 = v86;
        if ((*(uint64_t (**)(id, uint64_t))(v116 + 56))(v115, v45))
        {
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v88 = v87 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config;
        if (*(unsigned char *)(v87 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config + 32) == 1
          && v113
          && (v106 & 1) == *(unsigned char *)(v88 + 33))
        {
          long long v89 = v118;
          *(_OWORD *)uint64_t v88 = v117;
          *(_OWORD *)(v88 + 16) = v89;
          long long v90 = v120;
          *(_OWORD *)(v88 + 32) = v119;
          *(_OWORD *)(v88 + 48) = v90;
          long long v91 = v122;
          *(_OWORD *)(v88 + 64) = v121;
          *(_OWORD *)(v88 + 80) = v91;
          *(_OWORD *)(v88 + 96) = v123;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          CAFUINumericInputView.updateButtons()();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return;
        }
      }
    }
  }
  uint64_t v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v60;
  id v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56);
  uint64_t v65 = v96;
  v64(v62, 1, 1, v96);
  if (!v113)
  {
    uint64_t v66 = (uint64_t)v95;
    static UIListContentConfiguration.valueCell()();
    uint64_t v67 = v94;
    uint64_t v113 = (void (*)(char *, uint64_t))v58;
    specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)(v66, v94);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v66, v65);
    v64(v67, 0, 1, v65);
    uint64_t v68 = v67;
    uint64_t v62 = v114;
    outlined assign with take of UIListContentConfiguration?(v68, v114);
    uint64_t v58 = (uint64_t)v113;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v62, 1, v65))
    {
      (*(void (**)(uint64_t))(v116 + 8))(v45);
      UIListContentConfiguration.text.setter();
    }
  }
  id v69 = objc_allocWithZone((Class)type metadata accessor for CAFUINumericInputView());
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CAFUINumericInputView.init(configuration:)((uint64_t)&v117);
  unint64_t v71 = v70;
  uint64_t v72 = v107;
  outlined init with copy of UIListContentConfiguration?(v62, v107, &demangling cache variable for type metadata for UIListContentConfiguration?);
  id v73 = v71;
  unsigned __int8 v74 = CAFListContentRepresentable.isLimitedUI.getter(v45, v116);
  uint64_t v75 = v112;
  *(void *)(v72 + *(int *)(v112 + 20)) = v71;
  *(unsigned char *)(v72 + *(int *)(v75 + 24)) = 0;
  *(unsigned char *)(v72 + *(int *)(v75 + 28)) = v74 & 1;
  uint64_t v76 = v98;
  outlined init with copy of CAFUIAutomakerSettingConfiguration(v72, v98);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v111 + 56))(v76, 0, 1, v75);
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v76, v58);
  swift_endAccess();
  uint64_t v77 = v97;
  outlined init with copy of UIListContentConfiguration?(v58, v97, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  LODWORD(v71) = v106(v77, 1, v75);
  outlined destroy of UIContentConfiguration?(v77, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if (v71 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  uint64_t v78 = outlined destroy of UIContentConfiguration?(v76, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  unint64_t v79 = v100;
  MEMORY[0x24C59F910](v78);
  uint64_t v80 = v101;
  id v81 = v99;
  uint64_t v82 = v102;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v99, v79, v102);
  if (objc_msgSend(self, sel_tableCellPlainBackgroundColor))
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v82);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v81, 0, 1, v82);
    MEMORY[0x24C59F900](v81);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined destroy of CAFUIAutomakerSettingConfiguration(v107);
    outlined destroy of UIContentConfiguration?(v114, &demangling cache variable for type metadata for UIListContentConfiguration?);
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in CAFUINumericRepresentable.configureCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v25 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v10);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v23 - v17;
  double v26 = a4;
  uint64_t v24 = a2;
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type Double and conformance Double();
  dispatch thunk of BinaryInteger.init<A>(exactly:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v12, AssociatedTypeWitness);
  uint64_t v20 = v24;
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(v24, a3);
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v16, AssociatedTypeWitness);
  if ((v21 & 1) == 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v16, v20, a3);
  }
  return ((uint64_t (*)(char *, uint64_t))v22)(v18, AssociatedTypeWitness);
}

uint64_t CAFUINumericRepresentable.cellSelected(isProminent:hasChildren:)(char a1)
{
  if (a1) {
    return 1;
  }
  else {
    return 3;
  }
}

uint64_t CAFUINumericRepresentable.isTracking(in:)(uint64_t a1)
{
  return specialized CAFUIFloatingPointRepresentable.isTracking(in:)(a1) & 1;
}

void CAFUIFloatingPointRepresentable.configureCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = a1;
  uint64_t v82 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v81 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v80 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v79 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v87 = *(void *)(v84 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v84);
  uint64_t v85 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v74 = (uint64_t)&v73 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v77 = (uint64_t)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v78 = (uint64_t)&v73 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v83 = (char *)&v73 - v17;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v21 = (char *)&v73 - v20;
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  double v22 = specialized CAFUIFloatingPointRepresentable.settings_asDouble(_:)((uint64_t)v21);
  uint64_t v86 = *(void (**)(char *, uint64_t))(v19 + 8);
  v86(v21, AssociatedTypeWitness);
  uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 72);
  uint64_t v23 = v3;
  uint64_t v24 = (void *)v88(a2, a3);
  swift_getAssociatedConformanceWitness();
  CAFRange.minimumValue<A>()();

  uint64_t v25 = a2;
  double v26 = specialized CAFUIFloatingPointRepresentable.settings_asDouble(_:)((uint64_t)v21);
  uint64_t v27 = v86;
  v86(v21, AssociatedTypeWitness);
  id v28 = (void *)v88(v25, a3);
  CAFRange.maximumValue<A>()();

  double v29 = specialized CAFUIFloatingPointRepresentable.settings_asDouble(_:)((uint64_t)v21);
  v27(v21, AssociatedTypeWitness);
  uint64_t v30 = v88(v25, a3);
  CAFRange.stepValue<A>()();

  double v31 = specialized CAFUIFloatingPointRepresentable.settings_asDouble(_:)((uint64_t)v21);
  v27(v21, AssociatedTypeWitness);
  char v32 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(v25, a3) & 1;
  char v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(v25, a3);
  uint64_t v34 = v23;
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 80))(v25, a3);
  uint64_t v37 = v36;
  uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 88))(v25, a3);
  uint64_t v40 = v39;
  uint64_t v41 = *(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 16);
  uint64_t v75 = *(void *)(a3 + 8);
  LOBYTE(v30) = v41(v25);
  uint64_t v42 = (void *)swift_allocObject();
  uint64_t v76 = v25;
  v42[2] = v25;
  v42[3] = a3;
  v42[4] = v34;
  *(double *)&long long v90 = v22;
  *((double *)&v90 + 1) = v26;
  *(double *)&long long v91 = v29;
  *((double *)&v91 + 1) = v31;
  LOBYTE(v92) = v32;
  BYTE1(v92) = v33 & 1;
  *((void *)&v92 + 1) = v35;
  *(void *)&long long v93 = v37;
  uint64_t v43 = (int *)v84;
  uint64_t v88 = v37;
  *((void *)&v93 + 1) = v38;
  long long v94 = (unint64_t)v40;
  uint64_t v86 = v40;
  char v44 = v30 & 1;
  uint64_t v45 = (uint64_t)v83;
  *(void *)&long long v95 = 0;
  BYTE8(v95) = v44;
  *(void *)&long long v96 = partial apply for closure #1 in CAFUIFloatingPointRepresentable.configureCell(_:);
  *((void *)&v96 + 1) = v42;
  uint64_t v46 = v89 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v46, v45, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v87 + 48);
  if (v47(v45, 1, v43))
  {
    swift_unknownObjectRetain();
    outlined destroy of UIContentConfiguration?(v45, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  }
  else
  {
    uint64_t v65 = v74;
    outlined init with copy of CAFUIAutomakerSettingConfiguration(v45, v74);
    swift_unknownObjectRetain();
    outlined destroy of UIContentConfiguration?(v45, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    uint64_t v66 = *(void **)(v65 + v43[5]);
    id v67 = v66;
    outlined destroy of CAFUIAutomakerSettingConfiguration(v65);
    if (v66)
    {
      type metadata accessor for CAFUINumericInputView();
      uint64_t v68 = swift_dynamicCastClass();
      if (v68)
      {
        id v69 = (_OWORD *)(v68 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config);
        long long v70 = v91;
        *id v69 = v90;
        v69[1] = v70;
        long long v71 = v93;
        v69[2] = v92;
        v69[3] = v71;
        long long v72 = v95;
        v69[4] = v94;
        v69[5] = v72;
        v69[6] = v96;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        CAFUINumericInputView.updateButtons()();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
    }
  }
  id v48 = objc_allocWithZone((Class)type metadata accessor for CAFUINumericInputView());
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  CAFUINumericInputView.init(configuration:)((uint64_t)&v90);
  unint64_t v50 = v49;
  uint64_t v51 = type metadata accessor for UIListContentConfiguration();
  uint64_t v52 = v85;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v85, 1, 1, v51);
  id v53 = v50;
  unsigned __int8 v54 = CAFListContentRepresentable.isLimitedUI.getter(v76, v75);
  *(void *)(v52 + v43[5]) = v50;
  *(unsigned char *)(v52 + v43[6]) = 0;
  *(unsigned char *)(v52 + v43[7]) = v54 & 1;
  uint64_t v55 = v52;
  uint64_t v56 = v78;
  outlined init with copy of CAFUIAutomakerSettingConfiguration(v55, v78);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v87 + 56))(v56, 0, 1, v43);
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v56, v46);
  swift_endAccess();
  uint64_t v57 = v46;
  uint64_t v58 = v77;
  outlined init with copy of UIListContentConfiguration?(v57, v77, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  unsigned int v59 = v47(v58, 1, v43);
  outlined destroy of UIContentConfiguration?(v58, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if (v59 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  uint64_t v60 = outlined destroy of UIContentConfiguration?(v56, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v61 = v80;
  MEMORY[0x24C59F910](v60);
  uint64_t v62 = v81;
  uint64_t v63 = v79;
  uint64_t v64 = v82;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v79, v61, v82);
  if (objc_msgSend(self, sel_tableCellPlainBackgroundColor))
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v64);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v63, 0, 1, v64);
    MEMORY[0x24C59F900](v63);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined destroy of CAFUIAutomakerSettingConfiguration(v85);
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in CAFUIFloatingPointRepresentable.configureCell(_:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v12 - v9;
  *(double *)&v12[1] = a1;
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type Double and conformance Double();
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v10, 1, AssociatedTypeWitness);
  if (result != 1) {
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 56))(v10, a3, a4);
  }
  __break(1u);
  return result;
}

void protocol witness for CAFUINumericRepresentable.cell.setter in conformance CAFIntegerSetting(void *a1)
{
  specialized CAFUINumericRepresentable.cell.setter(a1);
}

uint64_t (*protocol witness for CAFUINumericRepresentable.cell.modify in conformance CAFIntegerSetting(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  a1[2] = a2;
  a1[3] = a3;
  a1[1] = v3;
  *a1 = CAFUINumericRepresentable.cell.getter();
  return protocol witness for CAFUINumericRepresentable.cell.modify in conformance CAFIntegerSetting;
}

uint64_t protocol witness for CAFListContentRepresentable.isTracking(in:) in conformance CAFIntegerSetting(uint64_t a1)
{
  return specialized CAFUIFloatingPointRepresentable.isTracking(in:)(a1) & 1;
}

void protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFIntegerSetting(void *a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  CAFUINumericRepresentable.configureCell(_:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFIntegerSetting(char a1)
{
  if (a1) {
    return 1;
  }
  else {
    return 3;
  }
}

uint64_t protocol witness for CAFListContentRepresentable.isTracking(in:) in conformance CAFFloatSetting(uint64_t a1)
{
  return specialized CAFUIFloatingPointRepresentable.isTracking(in:)(a1) & 1;
}

void protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFFloatSetting(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  CAFUIFloatingPointRepresentable.configureCell(_:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFFloatSetting(char a1)
{
  return a1 & 1;
}

void protocol witness for CAFUINumericRepresentable.cell.modify in conformance CAFIntegerSetting(void **a1, char a2)
{
  id v4 = *a1;
  if (a2)
  {
    id v2 = v4;
    specialized CAFUINumericRepresentable.cell.setter(v4);

    uint64_t v3 = v2;
  }
  else
  {
    specialized CAFUINumericRepresentable.cell.setter(*a1);
    uint64_t v3 = v4;
  }
}

void protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFVolume(void *a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  CAFUINumericRepresentable.configureCell(_:)(a1, a2, WitnessTable);
}

double specialized CAFUIFloatingPointRepresentable.settings_asDouble(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v6 - v3, a1, AssociatedTypeWitness);
  swift_dynamicCast();
  return v6[3];
}

uint64_t specialized CAFUINumericRepresentable.cell.setter(void *a1)
{
  swift_beginAccess();
  objc_setAssociatedObject(v1, &static CAFUIAssociatedObjects.CellValue, a1, 0);
  return swift_endAccess();
}

uint64_t specialized CAFUINumericRepresentable.settings_asDouble(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  id v5 = (char *)&v7 - v4;
  if (swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, AssociatedTypeWitness);
    return swift_dynamicCast();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_2494C3C54()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in CAFUINumericRepresentable.configureCell(_:)(double a1)
{
  return closure #1 in CAFUINumericRepresentable.configureCell(_:)(v1[4], v1[2], v1[3], a1);
}

uint64_t outlined assign with take of UIListContentConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CAFUIAutomakerSettingConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CAFUIAutomakerSettingConfiguration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized CAFUIFloatingPointRepresentable.isTracking(in:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v9, (uint64_t)v8, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v8, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  }
  else
  {
    outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v8, (uint64_t)v5);
    outlined destroy of UIContentConfiguration?((uint64_t)v8, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    uint64_t v12 = *(void **)&v5[*(int *)(v2 + 20)];
    id v13 = v12;
    outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v5);
    if (v12)
    {
      type metadata accessor for CAFUINumericInputView();
      uint64_t v14 = swift_dynamicCastClass();
      if (v14)
      {
        uint64_t v10 = *(unsigned __int8 *)(v14 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking);

        return v10;
      }
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type CAFUINumericDisplayKind and conformance CAFUINumericDisplayKind()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFUINumericDisplayKind and conformance CAFUINumericDisplayKind;
  if (!lazy protocol witness table cache variable for type CAFUINumericDisplayKind and conformance CAFUINumericDisplayKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUINumericDisplayKind and conformance CAFUINumericDisplayKind);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CAFUINumericDisplayKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CAFUINumericDisplayKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2494C414CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for CAFUINumericDisplayKind(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CAFUINumericDisplayKind()
{
  return &type metadata for CAFUINumericDisplayKind;
}

uint64_t partial apply for closure #1 in CAFUIFloatingPointRepresentable.configureCell(_:)(double a1)
{
  return closure #1 in CAFUIFloatingPointRepresentable.configureCell(_:)(a1, v1[4], v1[2], v1[3]);
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

void CAFUIColorConfig.backgroundColor.setter(void *a1)
{
  id *v1 = a1;
}

uint64_t (*CAFUIColorConfig.backgroundColor.modify())()
{
  return closure #1 in CAFUINumericInputView.init(configuration:);
}

void CAFUIColorConfig.tintColor.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*CAFUIColorConfig.tintColor.modify())()
{
  return closure #1 in CAFUINumericInputView.init(configuration:);
}

void *initializeBufferWithCopyOfBuffer for CAFUIColorConfig(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for CAFUIColorConfig(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for CAFUIColorConfig(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  BOOL v7 = *(void **)(a2 + 8);
  int v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for CAFUIColorConfig(uint64_t a1, _OWORD *a2)
{
  unsigned int v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIColorConfig(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIColorConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIColorConfig()
{
  return &type metadata for CAFUIColorConfig;
}

UIColor __swiftcall CAFImageColor.convertToUIColor()()
{
  switch(v0)
  {
    case 1:
      id v1 = objc_msgSend(self, sel_systemWhiteColor);
      break;
    case 2:
      id v1 = objc_msgSend(self, sel_systemBlackColor);
      break;
    case 3:
      id v1 = objc_msgSend(self, sel_systemGrayColor);
      break;
    case 4:
      id v1 = objc_msgSend(self, sel_systemRedColor);
      break;
    case 5:
      id v1 = objc_msgSend(self, sel_systemYellowColor);
      break;
    case 6:
      id v1 = objc_msgSend(self, sel_systemBlueColor);
      break;
    case 7:
      id v1 = objc_msgSend(self, sel_systemGreenColor);
      break;
    case 9:
      id v1 = objc_msgSend(self, sel_systemOrangeColor);
      break;
    case 10:
      id v1 = objc_msgSend(self, sel_systemTealColor);
      break;
    case 11:
      id v1 = objc_msgSend(self, sel_systemCyanColor);
      break;
    case 12:
      id v1 = objc_msgSend(self, sel_systemIndigoColor);
      break;
    case 13:
      id v1 = objc_msgSend(self, sel_systemPurpleColor);
      break;
    case 14:
      id v1 = objc_msgSend(self, sel_systemPinkColor);
      break;
    case 15:
      id v1 = objc_msgSend(self, sel_systemBrownColor);
      break;
    default:
      _StringGuts.grow(_:)(62);
      v2._uint64_t countAndFlagsBits = 40;
      v2._object = (void *)0xE100000000000000;
      String.append(_:)(v2);
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
      v4._object = (void *)0x80000002495337A0;
      String.append(_:)(v4);
      os_log_type_t v5 = static os_log_type_t.error.getter();
      specialized static CAFUILogger.log(_:message:function:file:line:)(v5, 0, 0xE000000000000000, 0xD000000000000012, 0x80000002495337E0);
      swift_bridgeObjectRelease();
      id v1 = objc_msgSend(self, sel_labelColor);
      break;
  }

  return (UIColor)v1;
}

uint64_t static CAFAutomakerSetting.== infix(_:_:)(void *a1, void *a2)
{
  if (a1 == a2)
  {
    char v15 = 1;
  }
  else
  {
    unsigned int v4 = objc_msgSend(a1, sel_sortOrder);
    if (v4 == objc_msgSend(a2, sel_sortOrder))
    {
      id v5 = objc_msgSend(a1, sel_userVisibleLabel);
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      id v9 = objc_msgSend(a2, sel_userVisibleLabel);
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      if (v6 == v10 && v8 == v12)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v15 = 0;
        if ((v14 & 1) == 0) {
          return v15 & 1;
        }
      }
      id v16 = objc_msgSend(a1, sel_identifier);
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      id v20 = objc_msgSend(a2, sel_identifier);
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;

      if (v17 == v21 && v19 == v23) {
        char v15 = 1;
      }
      else {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = 0;
    }
  }
  return v15 & 1;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance CAFAutomakerSetting(void **a1, void **a2)
{
  return specialized static CAFAutomakerSetting.< infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance CAFAutomakerSetting()
{
  return MEMORY[0x270F9D4B0]();
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance CAFAutomakerSetting()
{
  return MEMORY[0x270F9D4A8]();
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance CAFAutomakerSetting()
{
  return MEMORY[0x270F9D4A0]();
}

BOOL specialized static CAFAutomakerSetting.< infix(_:_:)(void *a1, void *a2)
{
  if (a1 == a2) {
    return 0;
  }
  unsigned int v4 = objc_msgSend(a1, sel_sortOrder);
  if (v4 == objc_msgSend(a2, sel_sortOrder))
  {
    id v5 = objc_msgSend(a1, sel_userVisibleLabel);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    id v9 = objc_msgSend(a2, sel_userVisibleLabel);
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    BOOL v13 = v6 == v10 && v8 == v12;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(a1, sel_identifier);
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      id v18 = objc_msgSend(a2, sel_identifier);
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      if (v15 == v19 && v17 == v21)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v24 & 1;
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v25 & 1;
    }
  }
  else
  {
    unsigned int v23 = objc_msgSend(a1, sel_sortOrder);
    return v23 < objc_msgSend(a2, sel_sortOrder);
  }
}

unint64_t lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject;
  if (!lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject)
  {
    type metadata accessor for CAFAutomakerSetting();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject;
  if (!lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject);
  }
  return result;
}

unint64_t type metadata accessor for CAFAutomakerSetting()
{
  unint64_t result = lazy cache variable for type metadata for CAFAutomakerSetting;
  if (!lazy cache variable for type metadata for CAFAutomakerSetting)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
  }
  return result;
}

id static UIColor.cafui_carSystemFocus.getter()
{
  return static UIColor.cafui_carSystemFocus.getter((SEL *)&selRef__carSystemFocusColor);
}

id static UIColor.cafui_tableCellPlainBackground.getter()
{
  return static UIColor.cafui_tableCellPlainBackground.getter((SEL *)&selRef_tableCellPlainBackgroundColor);
}

id static UIColor.cafui_carSystemFocusLabel.getter()
{
  return static UIColor.cafui_carSystemFocus.getter((SEL *)&selRef__carSystemFocusLabelColor);
}

id static UIColor.cafui_tableBackground.getter()
{
  return static UIColor.cafui_tableCellPlainBackground.getter((SEL *)&selRef_tableBackgroundColor);
}

id static UIColor.cafui_tableCellPlainBackground.getter(SEL *a1)
{
  id result = [self *a1];
  if (!result) {
    __break(1u);
  }
  return result;
}

id static UIColor.cafui_carSystemFocusSecondary.getter()
{
  return static UIColor.cafui_carSystemFocus.getter((SEL *)&selRef__carSystemFocusSecondaryColor);
}

id static UIColor.cafui_carSystemFocus.getter(SEL *a1)
{
  id v1 = [self *a1];

  return v1;
}

id CAFUISwitchRepresentable.configureCell(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t a1))
{
  uint64_t v4 = v3;
  uint64_t v73 = a3;
  uint64_t v88 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v86 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v87 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v85 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v89 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v84 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v70 = (uint64_t)&v68 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v80 = (uint64_t)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v81 = (uint64_t)&v68 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v68 - v19;
  uint64_t v21 = type metadata accessor for UIListContentConfiguration();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  char v25 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v68 - v26;
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v25, (uint64_t)v27);
  uint64_t v79 = v22;
  id v28 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  uint64_t v83 = v21;
  uint64_t v72 = v22 + 8;
  long long v71 = v28;
  v28(v25, v21);
  double v29 = v73;
  uint64_t v30 = *((void *)v73 + 1);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a2, v30);
  UIListContentConfiguration.text.setter();
  (*(void (**)(uint64_t, uint64_t))(v30 + 48))(a2, v30);
  uint64_t v82 = v27;
  double v31 = (int *)v10;
  UIListContentConfiguration.image.setter();
  char v32 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v33 = a2;
  *((void *)v32 + 2) = a2;
  *((void *)v32 + 3) = v29;
  uint64_t v34 = v29;
  *((void *)v32 + 4) = v4;
  uint64_t v35 = a1;
  uint64_t v36 = a1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v36, (uint64_t)v20);
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v89 + 48);
  uint64_t v77 = v89 + 48;
  uint64_t v76 = v37;
  int v38 = v37((uint64_t)v20, 1, v31);
  uint64_t v78 = v30;
  if (v38)
  {
    swift_unknownObjectRetain();
    outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v20);
LABEL_3:
    char v39 = (*((uint64_t (**)(uint64_t, uint64_t (*)(uint64_t)))v34 + 2))(v33, v34);
    objc_allocWithZone((Class)type metadata accessor for CAFUISwitchView());
    swift_retain();
    uint64_t v40 = CAFUISwitchView.init(value:handler:)(v39 & 1, (uint64_t)partial apply for closure #1 in CAFUISwitchRepresentable.configureCell(_:), (uint64_t)v32);
    goto LABEL_4;
  }
  uint64_t v47 = v70;
  outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v20, v70);
  swift_unknownObjectRetain();
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v20);
  id v48 = *(void **)(v47 + v31[5]);
  id v69 = v48;
  outlined destroy of CAFUIAutomakerSettingConfiguration(v47);
  if (!v48) {
    goto LABEL_3;
  }
  type metadata accessor for CAFUISwitchView();
  uint64_t v49 = swift_dynamicCastClass();
  if (!v49)
  {

    goto LABEL_3;
  }
  unint64_t v50 = (char *)v49;
  char v51 = (*((uint64_t (**)(uint64_t, uint64_t (*)(uint64_t)))v34 + 2))(v33, v34);
  uint64_t v52 = (uint64_t (**)(uint64_t))&v50[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_handler];
  *uint64_t v52 = partial apply for closure #1 in CAFUISwitchRepresentable.configureCell(_:);
  v52[1] = v32;
  swift_retain();
  swift_release();
  uint64_t v40 = v50;
  objc_msgSend(*(id *)&v50[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch], sel_setOn_animated_, v51 & 1, 0);
LABEL_4:
  uint64_t v74 = v33;
  uint64_t v73 = v32;
  uint64_t v41 = (uint64_t *)(v35 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  uint64_t v42 = *v41;
  uint64_t v75 = v36;
  if (v42)
  {
    uint64_t v43 = v41[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t))(v43 + 16);
    swift_unknownObjectRetain();
    char v46 = v45(ObjectType, v43);
    swift_unknownObjectRelease();
  }
  else
  {
    char v46 = 1;
  }
  objc_msgSend(*(id *)&v40[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch], sel_setEnabled_, v46 & 1);
  uint64_t v53 = v79;
  uint64_t v55 = v83;
  uint64_t v54 = (uint64_t)v84;
  uint64_t v56 = v82;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v84, v82, v83);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v55);
  uint64_t v57 = v40;
  unsigned __int8 v58 = CAFListContentRepresentable.isLimitedUI.getter(v74, v78);
  *(void *)(v54 + v31[5]) = v40;
  *(unsigned char *)(v54 + v31[6]) = 0;
  *(unsigned char *)(v54 + v31[7]) = v58 & 1;
  uint64_t v59 = v81;
  outlined init with copy of CAFUIAutomakerSettingConfiguration(v54, v81);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v89 + 56))(v59, 0, 1, v31);
  uint64_t v60 = v75;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v59, v60);
  swift_endAccess();
  uint64_t v61 = v80;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v60, v80);
  LODWORD(v60) = v76(v61, 1, v31);
  outlined destroy of CAFUIAutomakerSettingConfiguration?(v61);
  if (v60 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  uint64_t v62 = outlined destroy of CAFUIAutomakerSettingConfiguration?(v59);
  uint64_t v63 = v87;
  MEMORY[0x24C59F910](v62);
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v85, v63, v88);
  id result = objc_msgSend(self, sel_tableCellPlainBackgroundColor);
  if (result)
  {
    uint64_t v65 = v85;
    UIBackgroundConfiguration.backgroundColor.setter();
    uint64_t v66 = v86;
    uint64_t v67 = v88;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v65, 0, 1, v67);
    MEMORY[0x24C59F900](v65);

    swift_release();
    outlined destroy of CAFUIAutomakerSettingConfiguration(v54);
    return (id)v71(v56, v55);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2494C551C()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in CAFUISwitchRepresentable.configureCell(_:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 24) + 24))(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of CAFUIAutomakerSettingConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CAFUISwitchRepresentable.cellSelected(isProminent:hasChildren:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized CAFUISwitchRepresentable.cellSelected(isProminent:hasChildren:)(a3, a4);
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFBooleanSetting(uint64_t a1, uint64_t a2)
{
  return CAFUISwitchRepresentable.configureCell(_:)(a1, a2, (uint64_t (*)(uint64_t))&protocol witness table for CAFBooleanSetting);
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFBooleanSetting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized CAFUISwitchRepresentable.cellSelected(isProminent:hasChildren:)(a3, (uint64_t)&protocol witness table for CAFBooleanSetting);
}

uint64_t specialized CAFUISwitchRepresentable.cellSelected(isProminent:hasChildren:)(uint64_t a1, uint64_t a2)
{
  Swift::String v2 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t))(a2 + 32))(v5, a1);
  *uint64_t v3 = !*v3;
  v2(v5, 0);
  return 0;
}

UIImage_optional __swiftcall UIImage.imageByScaling(targetHeight:)(Swift::Double targetHeight)
{
  id v2 = v1;
  uint64_t v4 = (SEL *)&selRef_setOpacity_;
  if (targetHeight <= 0.0) {
    goto LABEL_5;
  }
  objc_msgSend(v1, sel_size);
  if (v5 <= 0.0) {
    goto LABEL_5;
  }
  objc_msgSend(v1, sel_size);
  Swift::Double v7 = targetHeight / v6;
  id v8 = objc_msgSend(v1, sel_size);
  double v10 = closure #1 in CAFUINumericInputView.init(configuration:)(v8, v7 * v9, targetHeight);
  double v12 = v11;
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, v10, v11);
  uint64_t v14 = (double *)swift_allocObject();
  *((void *)v14 + 2) = v2;
  v14[3] = v10;
  void v14[4] = v12;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = partial apply for closure #1 in UIImage.imageByScaling(targetHeight:);
  *(void *)(v15 + 24) = v14;
  uint64_t v30 = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  uint64_t v31 = v15;
  uint64_t v26 = MEMORY[0x263EF8330];
  unint64_t v27 = 1107296256;
  id v28 = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  double v29 = &block_descriptor_0;
  uint64_t v4 = (SEL *)_Block_copy(&v26);
  id v16 = v2;
  swift_retain();
  swift_release();
  id v2 = objc_msgSend(v13, sel_imageWithActions_, v4);

  _Block_release(v4);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v13)
  {
    __break(1u);
LABEL_5:
    uint64_t v26 = 0;
    unint64_t v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v18._uint64_t countAndFlagsBits = 0x6548746567726174;
    v18._object = (void *)0xED00003D74686769;
    String.append(_:)(v18);
    Double.write<A>(to:)();
    v19._uint64_t countAndFlagsBits = 0x20656372756F7320;
    v19._object = (void *)0xED00003D657A6973;
    String.append(_:)(v19);
    [v2 v4[278]];
    uint64_t v32 = v20;
    uint64_t v33 = v21;
    type metadata accessor for CGSize(0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v22 = v26;
    unint64_t v23 = v27;
    os_log_type_t v24 = static os_log_type_t.error.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v24, v22, v23, 0xD00000000000001DLL, 0x8000000249533800);
    swift_bridgeObjectRelease();
    id v2 = 0;
  }
  char v25 = (objc_class *)v2;
  result.value.super.Class isa = v25;
  result.is_nil = v17;
  return result;
}

uint64_t thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1, void *a2)
{
  id v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

id UIImage.fit(to:)@<X0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  double v7 = 0.0;
  if (a2 == 0.0 && a3 == 0.0 || (id result = objc_msgSend(v3, sel_size), v10 == 0.0) && v9 == 0.0)
  {
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
  }
  else
  {
    double v15 = a2 / a3;
    objc_msgSend(v3, sel_size);
    double v17 = v16;
    objc_msgSend(v3, sel_size);
    double v19 = v17 / v18;
    objc_msgSend(v3, sel_size);
    if (v19 >= a2 / a3) {
      double v14 = a2 / v20;
    }
    else {
      double v14 = a3 / v21;
    }
    objc_msgSend(v3, sel_size);
    double v12 = v14 * v22;
    id result = objc_msgSend(v3, sel_size);
    double v13 = v14 * v23;
    if (v19 >= v15)
    {
      if (v15 < v19) {
        double v7 = a3 * 0.5 - v13 * 0.5;
      }
      double v11 = 0.0;
    }
    else
    {
      double v11 = a2 * 0.5 - v12 * 0.5;
    }
  }
  *a1 = v11;
  a1[1] = v7;
  a1[2] = v12;
  a1[3] = v13;
  a1[4] = v14;
  return result;
}

uint64_t sub_2494C5B34()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

id partial apply for closure #1 in UIImage.imageByScaling(targetHeight:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_drawInRect_, 0.0, 0.0, *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_2494C5B88()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t CAFUISymbol.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000028;
      break;
    case 2:
    case 17:
    case 20:
      unint64_t result = 0xD000000000000029;
      break;
    case 3:
      unint64_t result = 0xD000000000000031;
      break;
    case 4:
      unint64_t result = 0xD000000000000028;
      break;
    case 5:
      unint64_t result = 0xD00000000000003CLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000037;
      break;
    case 7:
      unint64_t result = 0xD000000000000045;
      break;
    case 8:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000043;
      break;
    case 10:
      unint64_t result = 0xD000000000000044;
      break;
    case 11:
      unint64_t result = 0xD00000000000004CLL;
      break;
    case 12:
      unint64_t result = 0xD000000000000043;
      break;
    case 13:
      unint64_t result = 0xD00000000000004BLL;
      break;
    case 14:
      unint64_t result = 0xD00000000000004CLL;
      break;
    case 15:
      unint64_t result = 0xD000000000000054;
      break;
    case 16:
      unint64_t result = 0xD000000000000015;
      break;
    case 18:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 19:
      unint64_t result = 0xD000000000000032;
      break;
    case 21:
      unint64_t result = 0xD00000000000003DLL;
      break;
    case 22:
      unint64_t result = 0xD000000000000038;
      break;
    case 23:
      unint64_t result = 0xD000000000000046;
      break;
    case 24:
      unint64_t result = 0xD000000000000030;
      break;
    case 25:
      unint64_t result = 0xD000000000000044;
      break;
    case 26:
      unint64_t result = 0xD000000000000045;
      break;
    case 27:
      unint64_t result = 0xD00000000000004DLL;
      break;
    case 28:
      unint64_t result = 0xD000000000000044;
      break;
    case 29:
      unint64_t result = 0xD00000000000004CLL;
      break;
    case 30:
      unint64_t result = 0xD00000000000004DLL;
      break;
    case 31:
      unint64_t result = 0xD000000000000055;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t CAFUISymbol.symbolName.getter(char a1)
{
  uint64_t v22 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v2 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  double v21 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CAFUISymbol.rawValue.getter(a1);
  uint64_t v4 = String.count.getter();
  if (!v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x263F8EE78];
LABEL_21:
    uint64_t v23 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    return v19;
  }
  uint64_t v5 = v4;
  uint64_t v25 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    double v20 = (void (**)(char *, uint64_t))(v2 + 8);
    do
    {
      unint64_t v7 = String.subscript.getter();
      unint64_t v9 = v8;
      if ((Character._isSingleScalar.getter() & 1) == 0) {
        goto LABEL_12;
      }
      unint64_t result = specialized Collection.first.getter(v7, v9);
      if ((result & 0x100000000) != 0) {
        goto LABEL_23;
      }
      double v10 = v21;
      Unicode.Scalar.properties.getter();
      char v11 = Unicode.Scalar.Properties.isLowercase.getter();
      (*v20)(v10, v22);
      if ((v11 & 1) == 0)
      {
LABEL_12:
        if ((Character._isLowercased.getter() & 1) == 0) {
          goto LABEL_13;
        }
        if ((Character._isSingleScalar.getter() & 1) == 0) {
          goto LABEL_27;
        }
        unint64_t result = specialized Collection.first.getter(v7, v9);
        if ((result & 0x100000000) != 0) {
          goto LABEL_24;
        }
        double v12 = v21;
        Unicode.Scalar.properties.getter();
        char v13 = Unicode.Scalar.Properties.isCased.getter();
        (*v20)(v12, v22);
        if ((v13 & 1) == 0)
        {
LABEL_27:
          if (Character._isUppercased.getter() & 1) != 0 && (Character._isLowercased.getter())
          {
LABEL_13:
            Swift::String v14 = String.lowercased()();
            uint64_t v23 = 46;
            unint64_t v24 = 0xE100000000000000;
            String.append(_:)(v14);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v7 = v23;
            unint64_t v9 = v24;
          }
        }
      }
      uint64_t v15 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v15 = v25;
      }
      unint64_t v17 = *(void *)(v15 + 16);
      unint64_t v16 = *(void *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v15 = v25;
      }
      *(void *)(v15 + 16) = v17 + 1;
      unint64_t v18 = v15 + 16 * v17;
      *(void *)(v18 + 32) = v7;
      *(void *)(v18 + 40) = v9;
      String.index(after:)();
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      long long v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return MEMORY[0x270F9E998]();
    }
  }
  return result;
}

uint64_t CAFSoundDistribution.resettable.getter()
{
  type metadata accessor for CAFSoundDistribution();
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution();
  uint64_t v0 = (void *)CAFObserved<>.observable.getter();
  char v1 = dispatch thunk of CAFSoundDistributionObservable.balance.getter();

  CAFSoundDistribution.balanceCenter.getter();
  if (v2 < 0) {
    goto LABEL_14;
  }
  char v3 = v2;
  uint64_t result = 1;
  if (v1 < 0 || v1 != v3) {
    return result;
  }
  unint64_t v5 = (void *)CAFObserved<>.observable.getter();
  __int16 v6 = dispatch thunk of CAFSoundDistributionObservable.fade.getter();

  if ((v6 & 0x100) != 0) {
    return 0;
  }
  CAFSoundDistribution.fadeCenter.getter();
  if ((v7 & 0x80) != 0)
  {
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  return (v6 & 0x80u) != 0 || v7 != v6;
}

Swift::Void __swiftcall CAFSoundDistribution.reset()()
{
  if (objc_msgSend(v0, sel_hasFade))
  {
    type metadata accessor for CAFSoundDistribution();
    lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution();
    char v1 = (void *)CAFObserved<>.observable.getter();
    char v2 = (void *)CAFObserved<>.observable.getter();
    char v3 = (void *)CAFSoundDistributionObservable.observed.getter();

    CAFSoundDistribution.fadeCenter.getter();
    dispatch thunk of CAFSoundDistributionObservable.fade.setter();
  }
  type metadata accessor for CAFSoundDistribution();
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution();
  id v6 = (id)CAFObserved<>.observable.getter();
  uint64_t v4 = (void *)CAFObserved<>.observable.getter();
  unint64_t v5 = (void *)CAFSoundDistributionObservable.observed.getter();

  CAFSoundDistribution.balanceCenter.getter();
  dispatch thunk of CAFSoundDistributionObservable.balance.setter();
}

void CAFSoundDistribution.balanceCenter.getter()
{
  id v1 = objc_msgSend(v0, sel_balanceRange);
  unsigned int v2 = objc_msgSend(v1, sel_maximumValue);

  id v3 = objc_msgSend(v0, sel_balanceRange);
  unsigned int v4 = objc_msgSend(v3, sel_minimumValue);

  int v5 = (char)(v2 - v4);
  if (v5 != v2 - v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v6 = (double)v5;
  id v7 = objc_msgSend(v0, sel_balanceRange);
  int v8 = objc_msgSend(v7, sel_minimumValue);

  double v9 = v6 * 0.5 + (double)v8;
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v9 <= -129.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v9 < 128.0)
  {
    uint64_t v10 = (int)v9;
    id v11 = objc_msgSend(v0, sel_balanceRange);
    objc_msgSend(v11, sel_valueRoundedToNearestStepValue_, v10);

    return;
  }
LABEL_9:
  __break(1u);
}

void CAFSoundDistribution.fadeCenter.getter()
{
  if (objc_msgSend(v0, sel_hasFade))
  {
    id v1 = objc_msgSend(v0, sel_fadeRange);
    unsigned int v2 = objc_msgSend(v1, sel_maximumValue);

    id v3 = objc_msgSend(v0, sel_fadeRange);
    unsigned int v4 = objc_msgSend(v3, sel_minimumValue);

    int v5 = (char)(v2 - v4);
    if (v5 == v2 - v4)
    {
      double v6 = (double)v5;
      id v7 = objc_msgSend(v0, sel_fadeRange);
      int v8 = objc_msgSend(v7, sel_minimumValue);

      double v9 = v6 * 0.5 + (double)v8;
      if ((~*(void *)&v9 & 0x7FF0000000000000) != 0)
      {
        if (v9 > -129.0)
        {
          if (v9 < 128.0)
          {
            uint64_t v10 = (int)v9;
            id v11 = objc_msgSend(v0, sel_fadeRange);
            objc_msgSend(v11, sel_valueRoundedToNearestStepValue_, v10);

            return;
          }
          goto LABEL_11;
        }
LABEL_10:
        __break(1u);
LABEL_11:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
}

void CAFSoundDistribution.balanceScale.getter()
{
  id v1 = objc_msgSend(v0, sel_balanceRange);
  unsigned int v2 = objc_msgSend(v1, sel_maximumValue);

  id v3 = objc_msgSend(v0, sel_balanceRange);
  unsigned int v4 = objc_msgSend(v3, sel_minimumValue);

  if ((char)(v2 - v4) != v2 - v4)
  {
    __break(1u);
    goto LABEL_5;
  }
  unsigned int v5 = objc_msgSend(v0, sel_balance);
  id v6 = objc_msgSend(v0, sel_balanceRange);
  unsigned int v7 = objc_msgSend(v6, sel_minimumValue);

  if ((char)(v5 - v7) != v5 - v7) {
LABEL_5:
  }
    __break(1u);
}

void CAFSoundDistribution.balanceScale.setter(double a1)
{
  if (a1 < 0.0 || a1 > 1.0)
  {
    _StringGuts.grow(_:)(61);
    v4._object = (void *)0x8000000249534100;
    v4._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
    String.append(_:)(v4);
    Double.write<A>(to:)();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v5, 0, 0xE000000000000000, 0x5365636E616C6162, 0xEC000000656C6163);
    swift_bridgeObjectRelease();
    return;
  }
  id v6 = objc_msgSend(v1, sel_balanceRange);
  unsigned int v7 = objc_msgSend(v6, sel_maximumValue);

  id v8 = objc_msgSend(v1, sel_balanceRange);
  unsigned int v9 = objc_msgSend(v8, sel_minimumValue);

  int v10 = (char)(v7 - v9);
  if (v10 != v7 - v9)
  {
    __break(1u);
    goto LABEL_16;
  }
  double v11 = (double)v10;
  id v12 = objc_msgSend(v1, sel_balanceRange);
  unsigned int v13 = objc_msgSend(v12, sel_minimumValue);

  double v14 = v11 * a1;
  if ((~COERCE__INT64(v11 * a1) & 0x7FF0000000000000) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v14 <= -129.0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v14 >= 128.0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((char)(v13 + (int)v14) != v13 + (int)v14)
  {
LABEL_19:
    __break(1u);
    return;
  }

  objc_msgSend(v1, sel_setBalance_);
}

void CAFSoundDistribution.fadeScale.getter()
{
  if (objc_msgSend(v0, sel_hasFade))
  {
    id v1 = objc_msgSend(v0, sel_fadeRange, 0.5);
    unsigned int v2 = objc_msgSend(v1, sel_maximumValue);

    id v3 = objc_msgSend(v0, sel_fadeRange);
    unsigned int v4 = objc_msgSend(v3, sel_minimumValue);

    if ((char)(v2 - v4) == v2 - v4)
    {
      unsigned int v5 = objc_msgSend(v0, sel_fade);
      id v6 = objc_msgSend(v0, sel_fadeRange);
      unsigned int v7 = objc_msgSend(v6, sel_minimumValue);

      if ((char)(v5 - v7) == v5 - v7) {
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void CAFSoundDistribution.fadeScale.setter(double a1)
{
  if (a1 < 0.0 || a1 > 1.0)
  {
    _StringGuts.grow(_:)(58);
    v4._object = (void *)0x80000002495340C0;
    v4._uint64_t countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v4);
    Double.write<A>(to:)();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v5, 0, 0xE000000000000000, 0x6C61635365646166, 0xE900000000000065);
    swift_bridgeObjectRelease();
    return;
  }
  id v6 = objc_msgSend(v1, sel_fadeRange);
  unsigned int v7 = objc_msgSend(v6, sel_maximumValue);

  id v8 = objc_msgSend(v1, sel_fadeRange);
  unsigned int v9 = objc_msgSend(v8, sel_minimumValue);

  int v10 = (char)(v7 - v9);
  if (v10 != v7 - v9)
  {
    __break(1u);
    goto LABEL_16;
  }
  double v11 = (double)v10;
  id v12 = objc_msgSend(v1, sel_fadeRange);
  unsigned int v13 = objc_msgSend(v12, sel_minimumValue);

  double v14 = v11 * a1;
  if ((~COERCE__INT64(v11 * a1) & 0x7FF0000000000000) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v14 <= -129.0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v14 >= 128.0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((char)(v13 + (int)v14) != v13 + (int)v14)
  {
LABEL_19:
    __break(1u);
    return;
  }

  objc_msgSend(v1, sel_setFade_);
}

unint64_t type metadata accessor for CAFSoundDistribution()
{
  unint64_t result = lazy cache variable for type metadata for CAFSoundDistribution;
  if (!lazy cache variable for type metadata for CAFSoundDistribution)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSoundDistribution);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFSoundDistribution and conformance CAFSoundDistribution;
  if (!lazy protocol witness table cache variable for type CAFSoundDistribution and conformance CAFSoundDistribution)
  {
    type metadata accessor for CAFSoundDistribution();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFSoundDistribution and conformance CAFSoundDistribution);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5068_sSo29CAFMultipleSelectImageSettingC5CAFUIE15selectedIndicesSaySiGvgp3So8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAGSiTf3nnnpk_nTf1cn_nTm(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (!v2) {
      return v3;
    }
    uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v11;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x24C59FC50](v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      unsigned int v7 = v6;
      id v8 = objc_msgSend(v6, sel_integerValue);

      unint64_t v10 = *(void *)(v11 + 16);
      unint64_t v9 = *(void *)(v11 + 24);
      if (v10 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      }
      ++v5;
      *(void *)(v11 + 16) = v10 + 1;
      *(void *)(v11 + 8 * v10 + 32) = v8;
      if (v2 == v5) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id specialized CAFListContentRepresentable.symbolImage.getter()
{
  id v1 = objc_msgSend(v0, sel_symbolName);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  uint64_t v6 = *MEMORY[0x263F83580];
  unsigned int v7 = self;
  id v8 = objc_msgSend(v7, sel_configurationWithTextStyle_scale_, v6, 2);
  id v9 = objc_msgSend(v7, sel_configurationWithWeight_, 6);
  id v10 = objc_msgSend(v8, sel_configurationByApplyingConfiguration_, v9);

  uint64_t v11 = (void *)MEMORY[0x24C59F610](v3, v5);
  swift_bridgeObjectRelease();
  id v12 = CAFUIImageForSymbolNameWithConfiguration(v11, v10);

  return v12;
}

void *specialized CAFListContentRepresentable.isLimitedUI.getter()
{
  if (objc_msgSend(v0, sel_hasLimitableUIElement)
    && (objc_msgSend(v0, sel_limitableUIElement) & 1) != 0
    || (CAFAutomakerSetting.isLimitableUIByAncestor.getter() & 1) != 0)
  {
    uint64_t result = (void *)specialized CAFListContentRepresentable.session.getter();
    if (!result) {
      return result;
    }
    uint64_t v2 = result;
    id v3 = objc_msgSend(result, sel_limitUserInterfaces);
    if (v3)
    {
      uint64_t v4 = v3;
      if (objc_msgSend(v3, sel_BOOLValue))
      {
        id v5 = objc_msgSend(v2, sel_configuration);
        unint64_t v6 = (unint64_t)objc_msgSend(v5, sel_limitableUserInterfaces);

        return (void *)((v6 >> 5) & 1);
      }
    }
    else
    {
    }
  }
  return 0;
}

id CAFSingleSelectImageSetting.detailLabel.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_currentUserVisibleValue);
  id v2 = objc_msgSend(v0, sel_listUserVisibleValue);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  if (v4 <= v1) {
    return 0;
  }
  id v5 = objc_msgSend(v0, sel_listUserVisibleValue);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id result = objc_msgSend(v0, sel_currentUserVisibleValue);
  if (*(void *)(v6 + 16) > (unint64_t)result)
  {
    uint64_t v8 = *(void *)(v6 + 16 * result + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return (id)v8;
  }
  __break(1u);
  return result;
}

id CAFSingleSelectImageSetting.detailImage.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_currentUserVisibleValue);
  id v2 = objc_msgSend(v0, sel_images);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  if (v4 <= v1) {
    return 0;
  }
  id v5 = objc_msgSend(v0, sel_images);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id result = objc_msgSend(v0, sel_currentUserVisibleValue);
  if (*(void *)(v6 + 16) > (unint64_t)result)
  {
    uint64_t v8 = v6 + 16 * result;
    uint64_t v9 = *(void *)(v8 + 32);
    unint64_t v10 = *(void *)(v8 + 40);
    outlined copy of Data._Representation(v9, v10);
    swift_bridgeObjectRelease();
    id v11 = objc_allocWithZone(MEMORY[0x263F827E8]);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v13 = objc_msgSend(v11, sel_initWithData_, isa);
    outlined consume of Data._Representation(v9, v10);

    return v13;
  }
  __break(1u);
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t CAFSingleSelectImageSetting.selectedIndices.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_currentUserVisibleValue);
  id v2 = objc_msgSend(v0, sel_listUserVisibleValue);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  id v5 = v0;
  uint64_t v6 = specialized Sequence.compactMap<A>(_:)(0, v4, v5);

  unint64_t v7 = v6[2];
  swift_bridgeObjectRelease();
  if (v7 <= v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2495305E0;
  *(void *)(v8 + 32) = objc_msgSend(v5, sel_currentUserVisibleValue);
  return v8;
}

id CAFSingleSelectImageSetting.selectedIndices.setter(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v37 = *(void *)(a1 + 16);
  if (!v37) {
    goto LABEL_20;
  }
  uint64_t v36 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  while (1)
  {
    if ((*(void *)(v36 + 8 * v3) & 0x8000000000000000) == 0)
    {
      uint64_t v38 = *(void *)(v36 + 8 * v3);
      id v7 = objc_msgSend(v1, sel_listUserVisibleValue);
      uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v9 = *(void *)(v8 + 16);
      swift_bridgeObjectRelease();
      uint64_t v39 = v3;
      if (v9)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        uint64_t v4 = (void *)MEMORY[0x263F8EE78];
        while (1)
        {
          id v12 = objc_msgSend(v1, sel_images);
          uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v14 = *(void *)(v13 + 16);
          swift_bridgeObjectRelease();
          if (v11 < v14)
          {
            id v15 = objc_msgSend(v1, sel_images);
            uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if (v11 >= *(void *)(v16 + 16))
            {
              __break(1u);
LABEL_24:
              __break(1u);
LABEL_25:
              id result = (id)_assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            uint64_t v17 = *(void *)(v16 + v10 + 32);
            unint64_t v18 = *(void *)(v16 + v10 + 40);
            outlined copy of Data._Representation(v17, v18);
            swift_bridgeObjectRelease();
            id v19 = objc_allocWithZone(MEMORY[0x263F827E8]);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            id v21 = objc_msgSend(v19, sel_initWithData_, isa);
            outlined consume of Data._Representation(v17, v18);

            if (v21)
            {
              id v22 = objc_msgSend(v1, sel_listUserVisibleValue);
              uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (v11 >= *(void *)(v23 + 16)) {
                goto LABEL_24;
              }
              uint64_t v25 = *(void *)(v23 + v10 + 32);
              uint64_t v24 = *(void *)(v23 + v10 + 40);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              memset(v43, 0, sizeof(v43));
              uint64_t v45 = &type metadata for CAFUIImageRepresentableItem;
              char v46 = &protocol witness table for CAFUIImageRepresentableItem;
              uint64_t v26 = (_OWORD *)swift_allocObject();
              *(void *)&long long v44 = v26;
              memset(&v42[8], 0, 40);
              *(void *)&long long v40 = v25;
              *((void *)&v40 + 1) = v24;
              long long v41 = (unint64_t)v21;
              v42[0] = 1;
              outlined assign with take of Any?((uint64_t)v43, (uint64_t)&v42[8]);

              *(void *)&v42[40] = 0;
              long long v27 = *(_OWORD *)&v42[16];
              v26[3] = *(_OWORD *)v42;
              v26[4] = v27;
              long long v28 = v41;
              v26[1] = v40;
              v26[2] = v28;
              v26[5] = *(_OWORD *)&v42[32];
              outlined init with take of CAFUIImageRepresentableItemProtocol(&v44, (uint64_t)&v40);
              outlined init with take of CAFUIImageRepresentableItemProtocol(&v40, (uint64_t)&v44);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
              }
              unint64_t v30 = v4[2];
              unint64_t v29 = v4[3];
              if (v30 >= v29 >> 1) {
                uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v4);
              }
              _OWORD v4[2] = v30 + 1;
              outlined init with take of CAFUIImageRepresentableItemProtocol(&v44, (uint64_t)&v4[5 * v30 + 4]);
            }
          }
          ++v11;
          v10 += 16;
          if (v9 == v11) {
            goto LABEL_4;
          }
        }
      }
      uint64_t v4 = (void *)MEMORY[0x263F8EE78];
LABEL_4:
      uint64_t v5 = v4[2];
      swift_bridgeObjectRelease();
      BOOL v6 = v38 < v5;
      uint64_t v3 = v39;
      if (v6) {
        break;
      }
    }
    if (++v3 == v37)
    {
      uint64_t v2 = a1;
      swift_bridgeObjectRelease();
LABEL_20:
      *(void *)&long long v40 = 0;
      *((void *)&v40 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      *(void *)&long long v40 = 0xD000000000000023;
      *((void *)&v40 + 1) = 0x8000000249534190;
      v31._uint64_t countAndFlagsBits = MEMORY[0x24C59F730](v2, MEMORY[0x263F8D6C8]);
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v32 = v40;
      os_log_type_t v33 = static os_log_type_t.info.getter();
      specialized static CAFUILogger.log(_:message:function:file:line:)(v33, v32, *((unint64_t *)&v32 + 1), 0x64657463656C6573, 0xEF73656369646E49);
      return (id)swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease_n();
  if (v38 >= 256) {
    goto LABEL_25;
  }
  return objc_msgSend(v1, sel_setCurrentUserVisibleValue_, v38);
}

uint64_t (*CAFSingleSelectImageSetting.selectedIndices.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  unsigned int v3 = objc_msgSend(v1, sel_currentUserVisibleValue);
  id v4 = objc_msgSend(v1, sel_listUserVisibleValue);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRelease();
  id v7 = v1;
  uint64_t v8 = specialized Sequence.compactMap<A>(_:)(0, v6, v7);

  unint64_t v9 = v8[2];
  swift_bridgeObjectRelease();
  if (v9 <= v3)
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_2495305E0;
    *(void *)(v10 + 32) = objc_msgSend(v7, sel_currentUserVisibleValue);
  }
  *a1 = v10;
  return CAFSingleSelectImageSetting.selectedIndices.modify;
}

uint64_t CAFSingleSelectImageSetting.selectedIndices.modify(uint64_t *a1, char a2)
{
  return CAFSingleSelectImageSetting.selectedIndices.modify(a1, a2, (uint64_t (*)(uint64_t))CAFSingleSelectImageSetting.selectedIndices.setter);
}

uint64_t CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)()
{
  return specialized CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id, id))specialized CAFUICollectionViewController.init(setting:isRHD:));
}

uint64_t CAFSingleSelectImageSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFSingleSelectImageSetting.isEnabled.getter()
{
  if ((specialized CAFListContentRepresentable.isLimitedUI.getter() & 1) == 0) {
    return objc_msgSend(v0, sel_disabled) ^ 1;
  }
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  id v1 = v0;
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v8, 0xD00000000000002CLL, 0x80000002495341F0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t (*protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFSingleSelectImageSetting(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = CAFSingleSelectImageSetting.selectedIndices.getter();
  return CAFSingleSelectImageSetting.selectedIndices.modify;
}

uint64_t protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(a1, a2, (SEL *)&selRef_symbolName);
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFSingleSelectImageSetting()
{
  return specialized CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id, id))specialized CAFUICollectionViewController.init(setting:isRHD:));
}

uint64_t CAFMultipleSelectImageSetting.allowsMultipleSelection.getter()
{
  return 1;
}

unint64_t CAFMultipleSelectImageSetting.detailLabel.getter()
{
  id v1 = objc_msgSend(v0, sel_indicesUserVisibleValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v3 != 1)
  {
    if (!v3) {
      goto LABEL_14;
    }
    id v12 = (void *)MEMORY[0x24C59F610](0xD000000000000015, 0x8000000249534220);
    id v13 = CAFUILocalizedStringForKey(v12);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_2495305E0;
    id v15 = objc_msgSend(v0, sel_indicesUserVisibleValue);
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x263F8D750];
    *(void *)(v14 + 56) = MEMORY[0x263F8D6C8];
    *(void *)(v14 + 64) = v18;
    *(void *)(v14 + 32) = v17;
    uint64_t v11 = String.init(format:_:)();
LABEL_13:
    swift_bridgeObjectRelease();
    return v11;
  }
  id v4 = objc_msgSend(v0, sel_indicesUserVisibleValue);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v6 = v0;
  Swift::String v7 = specialized Sequence.first(where:)(v5, v6);
  swift_bridgeObjectRelease();

  if (!v7)
  {
LABEL_14:
    id v19 = (void *)MEMORY[0x24C59F610](0x44455443454C4553, 0xED0000454E4F4E5FLL);
    id v20 = CAFUILocalizedStringForKey(v19);

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    return v11;
  }
  id v8 = objc_msgSend(v6, sel_listUserVisibleValue);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t result = (unint64_t)objc_msgSend(v7, sel_integerValue);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(v9 + 16))
  {
    uint64_t v11 = *(void *)(v9 + 16 * result + 32);
    swift_bridgeObjectRetain();

    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void CAFMultipleSelectImageSetting.detailImage.getter()
{
  id v1 = objc_msgSend(v0, sel_indicesUserVisibleValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    id v3 = (id)MEMORY[0x24C59FC50](0, v2);
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_15;
    }
    id v3 = *(id *)(v2 + 32);
  }
  id v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t)objc_msgSend(v4, sel_integerValue);

  id v6 = objc_msgSend(v0, sel_images);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (v5 < v8)
  {
    id v9 = objc_msgSend(v0, sel_images);
    uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v5 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v5 < *(void *)(v10 + 16))
      {
        uint64_t v11 = v10 + 16 * v5;
        uint64_t v12 = *(void *)(v11 + 32);
        unint64_t v13 = *(void *)(v11 + 40);
        outlined copy of Data._Representation(v12, v13);
        swift_bridgeObjectRelease();
        id v14 = objc_allocWithZone(MEMORY[0x263F827E8]);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v14, sel_initWithData_, isa);
        outlined consume of Data._Representation(v12, v13);

        return;
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
}

void *CAFSingleSelectImageSetting.items.getter()
{
  id v1 = objc_msgSend(v0, sel_listUserVisibleValue);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRelease();
  id v4 = v0;
  uint64_t v5 = specialized Sequence.compactMap<A>(_:)(0, v3, v4);

  return v5;
}

void closure #1 in CAFSingleSelectImageSetting.items.getter(id a1@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5 = *a2;
  id v6 = objc_msgSend(a1, sel_images);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  if ((uint64_t)v5 >= v8) {
    goto LABEL_7;
  }
  id v9 = objc_msgSend(a1, sel_images);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v5 >= *(void *)(v10 + 16))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v11 = v10 + 16 * v5;
  uint64_t v12 = *(void *)(v11 + 32);
  unint64_t v13 = *(void *)(v11 + 40);
  outlined copy of Data._Representation(v12, v13);
  swift_bridgeObjectRelease();
  id v14 = objc_allocWithZone(MEMORY[0x263F827E8]);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v16 = objc_msgSend(v14, sel_initWithData_, isa);
  outlined consume of Data._Representation(v12, v13);

  if (v16)
  {
    id v17 = objc_msgSend(a1, sel_listUserVisibleValue);
    uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v5 < *(void *)(v18 + 16))
    {
      uint64_t v19 = v18 + 16 * v5;
      uint64_t v21 = *(void *)(v19 + 32);
      uint64_t v20 = *(void *)(v19 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      memset(v26, 0, sizeof(v26));
      *(void *)(a3 + 24) = &type metadata for CAFUIImageRepresentableItem;
      *(void *)(a3 + 32) = &protocol witness table for CAFUIImageRepresentableItem;
      id v22 = (_OWORD *)swift_allocObject();
      *(void *)a3 = v22;
      memset(&v25[8], 0, 40);
      *(void *)&long long v24 = v21;
      *((void *)&v24 + 1) = v20;
      v25[0] = 1;
      outlined assign with take of Any?((uint64_t)v26, (uint64_t)&v25[8]);

      *(void *)&v25[40] = 0;
      long long v23 = *(_OWORD *)&v25[16];
      v22[3] = *(_OWORD *)v25;
      v22[4] = v23;
      v22[1] = v24;
      v22[2] = (unint64_t)v16;
      v22[5] = *(_OWORD *)&v25[32];
      return;
    }
    goto LABEL_11;
  }
LABEL_7:
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
}

uint64_t CAFMultipleSelectImageSetting.selectedIndices.getter()
{
  return CAFMultipleSelectImageSetting.selectedIndices.getter((SEL *)&selRef_indicesUserVisibleValue, (uint64_t (*)(uint64_t, id))specialized _ArrayProtocol.filter(_:));
}

void CAFMultipleSelectImageSetting.selectedIndices.setter(uint64_t a1)
{
  id v3 = v1;
  specialized _ArrayProtocol.filter(_:)(a1, v3);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();

  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v7 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v5 + 8 * v7 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v7 = v8;
    }
    while (v6 != v8);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setIndicesUserVisibleValue_, isa);
}

uint64_t (*CAFMultipleSelectImageSetting.selectedIndices.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = objc_msgSend(v1, sel_indicesUserVisibleValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5068_sSo29CAFMultipleSelectImageSettingC5CAFUIE15selectedIndicesSaySiGvgp3So8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAGSiTf3nnnpk_nTf1cn_nTm(v4);
  swift_bridgeObjectRelease();
  id v6 = v1;
  specialized _ArrayProtocol.filter(_:)(v5, v6);
  uint64_t v8 = v7;

  swift_bridgeObjectRelease();
  *a1 = v8;
  return CAFMultipleSelectImageSetting.selectedIndices.modify;
}

uint64_t CAFMultipleSelectImageSetting.selectedIndices.modify(uint64_t *a1, char a2)
{
  return CAFMultipleSelectImageSetting.selectedIndices.modify(a1, a2, (uint64_t (*)(uint64_t))CAFMultipleSelectImageSetting.selectedIndices.setter);
}

uint64_t CAFMultipleSelectImageSetting.cellSelected(isProminent:hasChildren:)()
{
  return specialized CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id, id))specialized CAFUICollectionViewController.init(setting:isRHD:));
}

uint64_t CAFMultipleSelectImageSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFMultipleSelectImageSetting.isEnabled.getter()
{
  if ((specialized CAFListContentRepresentable.isLimitedUI.getter() & 1) == 0) {
    return objc_msgSend(v0, sel_disabled) ^ 1;
  }
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  id v1 = v0;
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v8, 0xD00000000000002CLL, 0x80000002495341F0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CAFUIImageRepresentable.selectedIndices.getter in conformance CAFMultipleSelectImageSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFUIImageRepresentable.selectedIndices.getter in conformance CAFMultipleSelectImageSetting(a1, a2, (SEL *)&selRef_indicesUserVisibleValue, (uint64_t (*)(uint64_t, id))specialized _ArrayProtocol.filter(_:));
}

uint64_t (*protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAFMultipleSelectImageSetting.selectedIndices.modify(v2);
  return protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFMultipleSelectImageSetting()
{
  return specialized CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id, id))specialized CAFUICollectionViewController.init(setting:isRHD:));
}

void CAFIntegerSetting.numericDisplayKind.getter()
{
  id v1 = objc_msgSend(v0, sel_valueRange);
  id v2 = objc_msgSend(v1, sel_maximum);

  id v3 = objc_msgSend(v2, sel_longLongValue);
  id v4 = objc_msgSend(v0, sel_valueRange);
  id v5 = objc_msgSend(v4, sel_minimum);

  id v6 = objc_msgSend(v5, sel_longLongValue);
  if (__OFSUB__(v3, v6))
  {
    __break(1u);
  }
  else
  {
    id v7 = objc_msgSend(v0, sel_valueRange);
    id v8 = objc_msgSend(v7, sel_step);

    objc_msgSend(v8, sel_longLongValue);
  }
}

uint64_t CAFIntegerSetting.isEnabled.getter()
{
  if ((specialized CAFListContentRepresentable.isLimitedUI.getter() & 1) == 0) {
    return objc_msgSend(v0, sel_disabled) ^ 1;
  }
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  id v1 = v0;
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v8, 0xD00000000000002CLL, 0x80000002495341F0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t CAFIntegerSetting.isHighlightable.getter()
{
  return 0;
}

uint64_t CAFIntegerSetting.showStepperBar.getter()
{
  if (objc_msgSend(v0, sel_hasStepperBarHidden)) {
    return objc_msgSend(v0, sel_stepperBarHidden) ^ 1;
  }
  else {
    return 1;
  }
}

id protocol witness for CAFUINumericRepresentable.value.getter in conformance CAFIntegerSetting@<X0>(_DWORD *a1@<X8>)
{
  id result = objc_msgSend(v1, sel_value);
  *a1 = result;
  return result;
}

id protocol witness for CAFUINumericRepresentable.value.setter in conformance CAFIntegerSetting(unsigned int *a1)
{
  return objc_msgSend(v1, sel_setValue_, *a1);
}

id (*protocol witness for CAFUINumericRepresentable.value.modify in conformance CAFIntegerSetting(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = objc_msgSend(v1, sel_value);
  return protocol witness for CAFUINumericRepresentable.value.modify in conformance CAFIntegerSetting;
}

id protocol witness for CAFUINumericRepresentable.value.modify in conformance CAFIntegerSetting(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, sel_setValue_, *(unsigned int *)(a1 + 8));
}

uint64_t protocol witness for CAFUINumericRepresentable.showStepperBar.getter in conformance CAFIntegerSetting()
{
  if (objc_msgSend(v0, sel_hasStepperBarHidden)) {
    return objc_msgSend(v0, sel_stepperBarHidden) ^ 1;
  }
  else {
    return 1;
  }
}

uint64_t protocol witness for CAFUINumericRepresentable.minimumSymbolName.getter in conformance CAFIntegerSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(a1, a2, (SEL *)&selRef_minimumSymbolName);
}

uint64_t protocol witness for CAFUINumericRepresentable.maximumSymbolName.getter in conformance CAFIntegerSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(a1, a2, (SEL *)&selRef_maximumSymbolName);
}

uint64_t protocol witness for CAFUINumericRepresentable.userVisibleValue.getter in conformance CAFIntegerSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(a1, a2, (SEL *)&selRef_userVisibleValue);
}

uint64_t protocol witness for CAFListContentRepresentable.isHighlightable.getter in conformance CAFIntegerSetting()
{
  return 0;
}

uint64_t CAFBooleanSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFBooleanSetting.isEnabled.getter()
{
  if ((specialized CAFListContentRepresentable.isLimitedUI.getter() & 1) == 0) {
    return objc_msgSend(v0, sel_disabled) ^ 1;
  }
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  id v1 = v0;
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v8, 0xD00000000000002CLL, 0x80000002495341F0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

id protocol witness for CAFUISwitchRepresentable.on.getter in conformance CAFBooleanSetting()
{
  return objc_msgSend(v0, sel_on);
}

id protocol witness for CAFUISwitchRepresentable.on.setter in conformance CAFBooleanSetting(char a1)
{
  return objc_msgSend(v1, sel_setOn_, a1 & 1);
}

id (*protocol witness for CAFUISwitchRepresentable.on.modify in conformance CAFBooleanSetting(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(v1, sel_on);
  return protocol witness for CAFUISwitchRepresentable.on.modify in conformance CAFBooleanSetting;
}

id protocol witness for CAFUISwitchRepresentable.on.modify in conformance CAFBooleanSetting(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, sel_setOn_, *(unsigned __int8 *)(a1 + 8));
}

uint64_t CAFButtonSetting.isHighlightable.getter()
{
  return 1;
}

BOOL CAFButtonSetting.isEnabled.getter()
{
  if (specialized CAFListContentRepresentable.isLimitedUI.getter())
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    id v1 = v0;
    id v2 = objc_msgSend(v1, sel_description);
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v5 = v4;

    v6._uint64_t countAndFlagsBits = v3;
    v6._object = v5;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 46;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    os_log_type_t v8 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v8, 0xD00000000000002CLL, 0x80000002495341F0, 0x656C62616E457369, 0xE900000000000064);
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    return (objc_msgSend(v0, sel_disabled) & 1) == 0
        && objc_msgSend(v0, sel_buttonAction) == 0;
  }
}

id protocol witness for CAFUIButtonRepresentable.buttonAction.getter in conformance CAFButtonSetting()
{
  return objc_msgSend(v0, sel_buttonAction);
}

id protocol witness for CAFUIButtonRepresentable.buttonAction.setter in conformance CAFButtonSetting(unsigned __int8 a1)
{
  return objc_msgSend(v1, sel_setButtonAction_, a1);
}

id (*protocol witness for CAFUIButtonRepresentable.buttonAction.modify in conformance CAFButtonSetting(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(v1, sel_buttonAction);
  return protocol witness for CAFUIButtonRepresentable.buttonAction.modify in conformance CAFButtonSetting;
}

id protocol witness for CAFUIButtonRepresentable.buttonAction.modify in conformance CAFButtonSetting(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, sel_setButtonAction_, *(unsigned __int8 *)(a1 + 8));
}

id CAFDeepLinkSetting.configureCell(_:)(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v45 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x270FA5388](v6 - 8);
  long long v44 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v43 = (uint64_t)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v42 - v11;
  unint64_t v13 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v14 = *((void *)v13 - 1);
  MEMORY[0x270FA5388](v13);
  id v16 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UIListContentConfiguration();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  long long v23 = (char *)v42 - v22;
  static UIListContentConfiguration.valueCell()();
  uint64_t v48 = a1;
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v21, (uint64_t)v23);
  long long v24 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v49 = v17;
  v42[0] = v24;
  v42[1] = v18 + 8;
  v24(v21, v17);
  id v25 = objc_msgSend(v2, sel_userVisibleLabel);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UIListContentConfiguration.text.setter();
  specialized CAFListContentRepresentable.symbolImage.getter();
  UIListContentConfiguration.image.setter();
  if (objc_msgSend(v2, sel_hasUserVisibleValue))
  {
    id v26 = objc_msgSend(v2, sel_userVisibleValue);
    if (v26)
    {
      long long v27 = v26;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v30 = v29;

      uint64_t v31 = HIBYTE(v30) & 0xF;
      if ((v30 & 0x2000000000000000) == 0) {
        uint64_t v31 = v28 & 0xFFFFFFFFFFFFLL;
      }
      if (v31) {
        UIListContentConfiguration.secondaryText.setter();
      }
      else {
        swift_bridgeObjectRelease();
      }
    }
  }
  uint64_t v32 = v49;
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v16, v23, v49);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v32);
  unsigned __int8 v33 = specialized CAFListContentRepresentable.isLimitedUI.getter();
  *(void *)&v16[v13[5]] = 0;
  v16[v13[6]] = 2;
  v16[v13[7]] = v33 & 1;
  outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v16, (uint64_t)v12);
  (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v12, 0, 1, v13);
  uint64_t v34 = v48 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?((uint64_t)v12, v34);
  swift_endAccess();
  uint64_t v35 = v43;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v34, v43);
  LODWORD(v34) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48))(v35, 1, v13);
  outlined destroy of UIContentConfiguration?(v35, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if (v34 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  uint64_t v36 = outlined destroy of UIContentConfiguration?((uint64_t)v12, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v37 = v45;
  MEMORY[0x24C59F910](v36);
  uint64_t v39 = v46;
  uint64_t v38 = v47;
  long long v40 = v44;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v44, v37, v47);
  id result = objc_msgSend(self, sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v38);
    MEMORY[0x24C59F900](v40);
    outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v16);
    return (id)((uint64_t (*)(char *, uint64_t))v42[0])(v23, v49);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CAFDeepLinkSetting.requestContentManager.getter()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &static CAFUIListContentAssociatedObjects.CellValue);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v6)
  {
    type metadata accessor for CAFUIRequestContentManager();
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t CAFDeepLinkSetting.requestContentManager.setter(void *a1)
{
  swift_beginAccess();
  objc_setAssociatedObject(v1, &static CAFUIListContentAssociatedObjects.CellValue, a1, 0);
  swift_endAccess();
  return swift_release();
}

void (*CAFDeepLinkSetting.requestContentManager.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = CAFDeepLinkSetting.requestContentManager.getter();
  return CAFDeepLinkSetting.requestContentManager.modify;
}

void CAFDeepLinkSetting.requestContentManager.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 24);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  swift_beginAccess();
  if (a2)
  {
    swift_retain();
    objc_setAssociatedObject(v5, &static CAFUIListContentAssociatedObjects.CellValue, v4, 0);
    swift_endAccess();
    swift_release();
  }
  else
  {
    objc_setAssociatedObject(v5, &static CAFUIListContentAssociatedObjects.CellValue, v4, 0);
    swift_endAccess();
  }
  swift_release();

  free(v3);
}

uint64_t CAFDeepLinkSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFDeepLinkSetting.isEnabled.getter()
{
  uint64_t v1 = v0;
  if (CAFDeepLinkSetting.requestContentManager.getter())
  {
    if (specialized CAFListContentRepresentable.isLimitedUI.getter())
    {
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      id v2 = v0;
      id v3 = objc_msgSend(v2, sel_description);
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v5;

      v7._uint64_t countAndFlagsBits = v4;
      v7._object = v6;
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._uint64_t countAndFlagsBits = 46;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      os_log_type_t v9 = static os_log_type_t.info.getter();
      uint64_t v10 = 0xD00000000000002CLL;
      unint64_t v11 = 0x80000002495341F0;
LABEL_8:
      specialized static CAFUILogger.log(_:message:function:file:line:)(v9, v10, v11, 0x656C62616E457369, 0xE900000000000064);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    id v12 = objc_msgSend(v0, sel_contentURLAction);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    CAFUI::CAFUIPunchthroughState v17 = CAFUIRequestContentManager.state(for:)(v16);
    swift_bridgeObjectRelease();
    if (v17 == CAFUI_CAFUIPunchthroughState_unavailable)
    {
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      id v26 = objc_msgSend(v1, sel_contentURLAction);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;

      v30._uint64_t countAndFlagsBits = v27;
      v30._object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._object = (void *)0x80000002495342B0;
      v31._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v31);
      os_log_type_t v9 = static os_log_type_t.info.getter();
      uint64_t v10 = 2118736;
      unint64_t v11 = 0xE300000000000000;
      goto LABEL_8;
    }
    if (v17 == CAFUI_CAFUIPunchthroughState_available)
    {
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      id v18 = objc_msgSend(v1, sel_contentURLAction);
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      v22._uint64_t countAndFlagsBits = v19;
      v22._object = v21;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      unint64_t v23 = 0x6961766120736920;
      unint64_t v24 = 0xEE002E656C62616CLL;
    }
    else
    {
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      id v33 = objc_msgSend(v1, sel_contentURLAction);
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;

      v37._uint64_t countAndFlagsBits = v34;
      v37._object = v36;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      unint64_t v23 = 0xD000000000000013;
      unint64_t v24 = 0x8000000249534290;
    }
    String.append(_:)(*(Swift::String *)&v23);
    os_log_type_t v25 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v25, 2118736, 0xE300000000000000, 0x656C62616E457369, 0xE900000000000064);
    swift_bridgeObjectRelease();
    unsigned int v38 = objc_msgSend(v1, sel_disabled);
    swift_release();
    return v38 ^ 1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t CAFDeepLinkSetting.cellSelected(isProminent:hasChildren:)()
{
  id v1 = objc_msgSend(v0, sel_contentURLAction);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFDeepLinkSetting()
{
  id v1 = objc_msgSend(v0, sel_contentURLAction);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id CAFStaticSetting.configureCell(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v43 = a1;
  uint64_t v3 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v48 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v47 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v46 = (uint64_t)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  long long v44 = (char *)v42 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v45 = *((void *)v14 - 1);
  MEMORY[0x270FA5388](v14);
  Swift::String v16 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UIListContentConfiguration();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  unint64_t v23 = (char *)v42 - v22;
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v21, (uint64_t)v23);
  v42[0] = *(void *)(v18 + 8);
  v42[1] = v18 + 8;
  ((void (*)(char *, uint64_t))v42[0])(v21, v17);
  id v24 = objc_msgSend(v1, sel_userVisibleLabel);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UIListContentConfiguration.text.setter();
  id v25 = objc_msgSend(v2, sel_userVisibleValue);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v26 = v17;
  UIListContentConfiguration.secondaryText.setter();
  specialized CAFListContentRepresentable.symbolImage.getter();
  UIListContentConfiguration.image.setter();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v13, v23, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v17);
  uint64_t v28 = v43;
  uint64_t v27 = (uint64_t)v44;
  unint64_t v29 = (unsigned char *)(v43 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
  swift_beginAccess();
  LOBYTE(v21) = *v29;
  LOBYTE(v29) = specialized CAFListContentRepresentable.isLimitedUI.getter();
  outlined init with take of Any?((uint64_t)v13, (uint64_t)v16, &demangling cache variable for type metadata for UIListContentConfiguration?);
  *(void *)&v16[v14[5]] = 0;
  v16[v14[6]] = (char)v21;
  v16[v14[7]] = v29 & 1;
  outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v16, v27);
  uint64_t v30 = v45;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v45 + 56))(v27, 0, 1, v14);
  uint64_t v31 = v28 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v27, v31);
  swift_endAccess();
  uint64_t v32 = v31;
  uint64_t v33 = v46;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v32, v46);
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v30 + 48);
  uint64_t v35 = v33;
  LODWORD(v33) = v34(v33, 1, v14);
  outlined destroy of UIContentConfiguration?(v35, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if (v33 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  uint64_t v36 = outlined destroy of UIContentConfiguration?(v27, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  Swift::String v37 = v48;
  MEMORY[0x24C59F910](v36);
  uint64_t v39 = v49;
  uint64_t v38 = v50;
  long long v40 = v47;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v47, v37, v50);
  id result = objc_msgSend(self, sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v38);
    MEMORY[0x24C59F900](v40);
    outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v16);
    return (id)((uint64_t (*)(char *, uint64_t))v42[0])(v23, v26);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *CAFStaticSetting.cellSelected(isProminent:hasChildren:)(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return 0;
  }
  id v3 = v2;
  return v2;
}

id CAFStaticSetting.isHighlightable.getter()
{
  id result = objc_msgSend(v0, sel_childrenSettingsIdentifiers);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    return (id)(v4 != 0);
  }
  return result;
}

uint64_t CAFStaticSetting.isEnabled.getter()
{
  if ((specialized CAFListContentRepresentable.isLimitedUI.getter() & 1) == 0) {
    return objc_msgSend(v0, sel_disabled) ^ 1;
  }
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  id v1 = v0;
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v8, 0xD00000000000002CLL, 0x80000002495341F0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

id protocol witness for CAFListContentRepresentable.isHighlightable.getter in conformance CAFStaticSetting()
{
  id result = objc_msgSend(v0, sel_childrenSettingsIdentifiers);
  if (result)
  {
    id v2 = result;
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    return (id)(v4 != 0);
  }
  return result;
}

void *protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFStaticSetting(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return 0;
  }
  id v3 = v2;
  return v2;
}

id CAFFloatSetting.rangeValues.getter()
{
  id v1 = objc_msgSend(v0, sel_valueRange);

  return v1;
}

uint64_t CAFFloatSetting.isHighlightable.getter()
{
  return 0;
}

uint64_t CAFFloatSetting.isEnabled.getter()
{
  if ((specialized CAFListContentRepresentable.isLimitedUI.getter() & 1) == 0) {
    return objc_msgSend(v0, sel_disabled) ^ 1;
  }
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  id v1 = v0;
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v8, 0xD00000000000002CLL, 0x80000002495341F0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t CAFFloatSetting.showStepperBar.getter()
{
  return 1;
}

id protocol witness for CAFUIFloatingPointRepresentable.value.getter in conformance CAFFloatSetting@<X0>(_DWORD *a1@<X8>)
{
  id result = objc_msgSend(v1, sel_value);
  *a1 = v4;
  return result;
}

id protocol witness for CAFUIFloatingPointRepresentable.value.setter in conformance CAFFloatSetting(_DWORD *a1, double a2)
{
  LODWORD(a2) = *a1;
  return objc_msgSend(v2, sel_setValue_, a2);
}

id protocol witness for CAFUIFloatingPointRepresentable.rangeValues.getter in conformance CAFFloatSetting()
{
  id v1 = objc_msgSend(v0, sel_valueRange);

  return v1;
}

id protocol witness for CAFListContentRepresentable.prominenceInfo.getter in conformance CAFFloatSetting()
{
  id v1 = objc_msgSend(v0, sel_prominenceInfo);

  return v1;
}

uint64_t CAFSingleSelectSetting.selectedIndices.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_selectedEntryIndex);
  id v2 = objc_msgSend(v0, sel_selectSettingEntryList);
  id v3 = objc_msgSend(v2, sel_selectSettingEntrys);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSelectSettingEntry);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v5 <= v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2495305E0;
  *(void *)(v6 + 32) = objc_msgSend(v0, sel_selectedEntryIndex);
  return v6;
}

id CAFSingleSelectSetting.selectedIndices.setter(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v2 = *(void *)(a1 + 32);
    swift_bridgeObjectRelease();
    if ((v2 & 0x8000000000000000) != 0 || v2 >= 0x100)
    {
      id result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    LOBYTE(v2) = 0;
  }

  return objc_msgSend(v1, sel_setSelectedEntryIndex_, v2);
}

uint64_t (*CAFSingleSelectSetting.selectedIndices.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = CAFSingleSelectSetting.selectedIndices.getter();
  return CAFSingleSelectSetting.selectedIndices.modify;
}

uint64_t CAFSingleSelectSetting.selectedIndices.modify(uint64_t *a1, char a2)
{
  return CAFSingleSelectImageSetting.selectedIndices.modify(a1, a2, (uint64_t (*)(uint64_t))CAFSingleSelectSetting.selectedIndices.setter);
}

uint64_t CAFSingleSelectImageSetting.selectedIndices.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(*a1);
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  a3(v4);

  return swift_bridgeObjectRelease();
}

uint64_t CAFSingleSelectSetting.titleForFooter.getter()
{
  return 0;
}

uint64_t CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)()
{
  return specialized CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id))specialized CAFUIPickerViewController.init(pickerRepresentable:));
}

uint64_t CAFSingleSelectSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFSingleSelectSetting.isEnabled.getter()
{
  if ((specialized CAFListContentRepresentable.isLimitedUI.getter() & 1) == 0) {
    return objc_msgSend(v0, sel_disabled) ^ 1;
  }
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  id v1 = v0;
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v8, 0xD00000000000002CLL, 0x80000002495341F0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t (*protocol witness for CAFUIPickerRepresentable.selectedIndices.modify in conformance CAFSingleSelectSetting(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = CAFSingleSelectSetting.selectedIndices.getter();
  return CAFSingleSelectSetting.selectedIndices.modify;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFSingleSelectSetting()
{
  return specialized CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id))specialized CAFUIPickerViewController.init(pickerRepresentable:));
}

uint64_t CAFSingleSelectSetting.availableItems.getter()
{
  id v1 = objc_msgSend(v0, sel_selectSettingEntryList);
  id v2 = objc_msgSend(v1, sel_selectSettingEntrys);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSelectSettingEntry);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v18;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x24C59FC50](v6, v3);
      }
      else {
        id v8 = *(id *)(v3 + 8 * v6 + 32);
      }
      uint64_t v9 = v8;
      id v10 = objc_msgSend(v8, sel_userVisibleLabel);
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v14 = v13;
      }
      else
      {

        uint64_t v12 = 0;
        unint64_t v14 = 0xE000000000000000;
      }
      unint64_t v16 = *(void *)(v18 + 16);
      unint64_t v15 = *(void *)(v18 + 24);
      if (v16 >= v15 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      }
      ++v6;
      *(void *)(v18 + 16) = v16 + 1;
      uint64_t v17 = v18 + 16 * v16;
      *(void *)(v17 + 32) = v12;
      *(void *)(v17 + 40) = v14;
    }
    while (v4 != v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t CAFSingleSelectSetting.title.getter()
{
  id v1 = objc_msgSend(v0, sel_userVisibleLabel);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t CAFMultipleSelectSetting.titleForFooter.getter()
{
  return 0;
}

uint64_t CAFMultipleSelectSetting.allowsMultipleSelection.getter()
{
  return 1;
}

uint64_t CAFMultipleSelectSetting.selectedIndices.getter()
{
  return CAFMultipleSelectImageSetting.selectedIndices.getter((SEL *)&selRef_selectedEntryIndices, specialized _ArrayProtocol.filter(_:));
}

uint64_t CAFMultipleSelectImageSetting.selectedIndices.getter(SEL *a1, uint64_t (*a2)(uint64_t, id))
{
  id v4 = [v2 *a1];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5068_sSo29CAFMultipleSelectImageSettingC5CAFUIE15selectedIndicesSaySiGvgp3So8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAGSiTf3nnnpk_nTf1cn_nTm(v5);
  swift_bridgeObjectRelease();
  id v7 = v2;
  uint64_t v8 = a2(v6, v7);
  swift_bridgeObjectRelease();

  return v8;
}

void CAFMultipleSelectSetting.selectedIndices.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = v4 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(a1 + 8 * v4 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v4 = v5;
    }
    while (v3 != v5);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setSelectedEntryIndices_, isa);
}

uint64_t (*CAFMultipleSelectSetting.selectedIndices.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  id v3 = objc_msgSend(v1, sel_selectedEntryIndices);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5068_sSo29CAFMultipleSelectImageSettingC5CAFUIE15selectedIndicesSaySiGvgp3So8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAGSiTf3nnnpk_nTf1cn_nTm(v4);
  swift_bridgeObjectRelease();
  id v6 = v1;
  uint64_t v7 = specialized _ArrayProtocol.filter(_:)(v5, v6);

  swift_bridgeObjectRelease();
  *a1 = v7;
  return CAFMultipleSelectSetting.selectedIndices.modify;
}

uint64_t CAFMultipleSelectSetting.selectedIndices.modify(uint64_t *a1, char a2)
{
  return CAFMultipleSelectImageSetting.selectedIndices.modify(a1, a2, (uint64_t (*)(uint64_t))CAFMultipleSelectSetting.selectedIndices.setter);
}

uint64_t CAFMultipleSelectImageSetting.selectedIndices.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(*a1);
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  a3(v4);

  return swift_bridgeObjectRelease();
}

uint64_t CAFMultipleSelectSetting.cellSelected(isProminent:hasChildren:)()
{
  return specialized CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id))specialized CAFUIPickerViewController.init(pickerRepresentable:));
}

uint64_t CAFMultipleSelectSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFMultipleSelectSetting.isEnabled.getter()
{
  if ((specialized CAFListContentRepresentable.isLimitedUI.getter() & 1) == 0) {
    return objc_msgSend(v0, sel_disabled) ^ 1;
  }
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  id v1 = v0;
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v8, 0xD00000000000002CLL, 0x80000002495341F0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CAFUIPickerRepresentable.selectedIndices.getter in conformance CAFMultipleSelectSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFUIImageRepresentable.selectedIndices.getter in conformance CAFMultipleSelectImageSetting(a1, a2, (SEL *)&selRef_selectedEntryIndices, specialized _ArrayProtocol.filter(_:));
}

uint64_t protocol witness for CAFUIImageRepresentable.selectedIndices.getter in conformance CAFMultipleSelectImageSetting(uint64_t a1, uint64_t a2, SEL *a3, uint64_t (*a4)(uint64_t, id))
{
  id v6 = [v4 *a3];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5068_sSo29CAFMultipleSelectImageSettingC5CAFUIE15selectedIndicesSaySiGvgp3So8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAGSiTf3nnnpk_nTf1cn_nTm(v7);
  swift_bridgeObjectRelease();
  id v9 = v4;
  uint64_t v10 = a4(v8, v9);
  swift_bridgeObjectRelease();

  return v10;
}

uint64_t (*protocol witness for CAFUIPickerRepresentable.selectedIndices.modify in conformance CAFMultipleSelectSetting(uint64_t **a1))()
{
  id v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)CAFMultipleSelectSetting.selectedIndices.modify(v2);
  return protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting;
}

void protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [v3 *a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFMultipleSelectSetting()
{
  return specialized CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id))specialized CAFUIPickerViewController.init(pickerRepresentable:));
}

uint64_t specialized CAFListContentRepresentable.session.getter()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &static CAFUIListContentAssociatedObjects.CARSession);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v6)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CARSession);
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

char *specialized CAFUIPickerViewController.init(pickerRepresentable:)(void *a1, char *a2)
{
  id v4 = &a2[OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable];
  *(void *)id v4 = a1;
  *((void *)v4 + 1) = &protocol witness table for CAFSingleSelectSetting;
  id v5 = objc_allocWithZone((Class)type metadata accessor for CAFUIHeaderFooterTableView());
  id v6 = a1;
  unint64_t v7 = a2;
  id v8 = objc_msgSend(v5, sel_initWithFrame_style_, 0, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v7[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView] = v8;

  v18.receiver = v7;
  v18.super_class = (Class)type metadata accessor for CAFUITableViewController();
  id v9 = (char *)objc_msgSendSuper2(&v18, sel_initWithNibName_bundle_, 0, 0);
  uint64_t v10 = *(void *)&v9[OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 56);
  unint64_t v13 = v9;
  uint64_t v14 = v12(ObjectType, v10);
  if (v15)
  {
    unint64_t v16 = (void *)MEMORY[0x24C59F610](v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v16 = 0;
  }
  objc_msgSend(v13, sel_setTitle_, v16);

  return v13;
}

{
  char *v4;
  id v5;
  id v6;
  char *v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  objc_super v18;

  id v4 = &a2[OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable];
  *(void *)id v4 = a1;
  *((void *)v4 + 1) = &protocol witness table for CAFMultipleSelectSetting;
  id v5 = objc_allocWithZone((Class)type metadata accessor for CAFUIHeaderFooterTableView());
  id v6 = a1;
  unint64_t v7 = a2;
  id v8 = objc_msgSend(v5, sel_initWithFrame_style_, 0, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v7[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView] = v8;

  v18.receiver = v7;
  v18.super_class = (Class)type metadata accessor for CAFUITableViewController();
  id v9 = (char *)objc_msgSendSuper2(&v18, sel_initWithNibName_bundle_, 0, 0);
  uint64_t v10 = *(void *)&v9[OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 56);
  unint64_t v13 = v9;
  uint64_t v14 = v12(ObjectType, v10);
  if (v15)
  {
    unint64_t v16 = (void *)MEMORY[0x24C59F610](v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v16 = 0;
  }
  objc_msgSend(v13, sel_setTitle_, v16);

  return v13;
}

void *specialized Sequence.compactMap<A>(_:)(void *a1, uint64_t a2, void *a3)
{
  return specialized Sequence.compactMap<A>(_:)(a1, a2, a3);
}

uint64_t sub_2494CBE6C()
{
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 80)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  }

  return MEMORY[0x270FA0238](v0, 96, 7);
}

void *specialized Sequence.compactMap<A>(_:)(void *result, uint64_t a2, id a3)
{
  if (result == (void *)a2)
  {
    return (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = (uint64_t)result;
    if (a2 >= (uint64_t)result)
    {
      id v4 = (void *)MEMORY[0x263F8EE78];
      while (v6 < a2)
      {
        uint64_t v13 = v6;
        closure #1 in CAFSingleSelectImageSetting.items.getter(a3, (unint64_t *)&v13, (uint64_t)&v10);
        if (v3)
        {
          swift_bridgeObjectRelease();
          return v4;
        }
        if (v11)
        {
          outlined init with take of CAFUIImageRepresentableItemProtocol(&v10, (uint64_t)v12);
          outlined init with take of CAFUIImageRepresentableItemProtocol(v12, (uint64_t)&v10);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
          }
          unint64_t v9 = v4[2];
          unint64_t v8 = v4[3];
          if (v9 >= v8 >> 1) {
            id v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v4);
          }
          _OWORD v4[2] = v9 + 1;
          uint64_t result = (void *)outlined init with take of CAFUIImageRepresentableItemProtocol(&v10, (uint64_t)&v4[5 * v9 + 4]);
        }
        else
        {
          uint64_t result = (void *)outlined destroy of UIContentConfiguration?((uint64_t)&v10, &demangling cache variable for type metadata for CAFUIImageRepresentableItemProtocol?);
        }
        if (a2 == ++v6) {
          return v4;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1, id a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return;
  }
  id v3 = a2;
  unint64_t v4 = 0;
  uint64_t v5 = a1 + 32;
  uint64_t v6 = MEMORY[0x263F8EE78];
  unint64_t v40 = *(void *)(a1 + 16);
  uint64_t v39 = a1 + 32;
LABEL_3:
  if (v4 <= v2) {
    unint64_t v7 = v2;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v44 = v7;
  uint64_t v42 = v6;
  while (1)
  {
    if (v4 == v44) {
      goto LABEL_34;
    }
    uint64_t v9 = *(void *)(v5 + 8 * v4++);
    if (v9 < 0) {
      goto LABEL_9;
    }
    uint64_t v45 = v9;
    id v10 = objc_msgSend(v3, sel_listUserVisibleValue);
    uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = *(void *)(v11 + 16);
    swift_bridgeObjectRelease();
    if (v12) {
      break;
    }
    unint64_t v16 = (void *)MEMORY[0x263F8EE78];
LABEL_8:
    uint64_t v8 = v16[2];
    swift_bridgeObjectRelease();
    uint64_t v6 = v42;
    if (v45 < v8)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v53 = v42;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1);
        uint64_t v6 = v53;
      }
      unint64_t v38 = *(void *)(v6 + 16);
      unint64_t v37 = *(void *)(v6 + 24);
      if (v38 >= v37 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        uint64_t v6 = v53;
      }
      *(void *)(v6 + 16) = v38 + 1;
      *(void *)(v6 + 8 * v38 + 32) = v45;
      if (v4 == v2) {
        return;
      }
      goto LABEL_3;
    }
LABEL_9:
    if (v4 == v2) {
      return;
    }
  }
  unint64_t v43 = v4;
  id v13 = v3;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  unint64_t v16 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    id v17 = objc_msgSend(v13, sel_images);
    uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v19 = *(void *)(v18 + 16);
    swift_bridgeObjectRelease();
    if (v15 >= v19) {
      goto LABEL_15;
    }
    id v20 = objc_msgSend(v13, sel_images);
    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v15 >= *(void *)(v21 + 16)) {
      break;
    }
    uint64_t v22 = *(void *)(v21 + v14 + 32);
    unint64_t v23 = *(void *)(v21 + v14 + 40);
    outlined copy of Data._Representation(v22, v23);
    swift_bridgeObjectRelease();
    id v24 = objc_allocWithZone(MEMORY[0x263F827E8]);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v26 = objc_msgSend(v24, sel_initWithData_, isa);
    outlined consume of Data._Representation(v22, v23);

    if (v26)
    {
      id v27 = objc_msgSend(v13, sel_listUserVisibleValue);
      uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v15 >= *(void *)(v28 + 16)) {
        goto LABEL_33;
      }
      uint64_t v30 = *(void *)(v28 + v14 + 32);
      uint64_t v29 = *(void *)(v28 + v14 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      memset(v49, 0, sizeof(v49));
      char v51 = &type metadata for CAFUIImageRepresentableItem;
      uint64_t v52 = &protocol witness table for CAFUIImageRepresentableItem;
      uint64_t v31 = (_OWORD *)swift_allocObject();
      *(void *)&long long v50 = v31;
      memset(&v48[8], 0, 40);
      *(void *)&long long v46 = v30;
      *((void *)&v46 + 1) = v29;
      long long v47 = (unint64_t)v26;
      v48[0] = 1;
      outlined assign with take of Any?((uint64_t)v49, (uint64_t)&v48[8]);

      *(void *)&v48[40] = 0;
      long long v32 = *(_OWORD *)&v48[16];
      v31[3] = *(_OWORD *)v48;
      v31[4] = v32;
      long long v33 = v47;
      v31[1] = v46;
      v31[2] = v33;
      v31[5] = *(_OWORD *)&v48[32];
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v50, (uint64_t)&v46);
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v46, (uint64_t)&v50);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      }
      unint64_t v35 = v16[2];
      unint64_t v34 = v16[3];
      if (v35 >= v34 >> 1) {
        unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v16);
      }
      v16[2] = v35 + 1;
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v50, (uint64_t)&v16[5 * v35 + 4]);
    }
LABEL_15:
    ++v15;
    v14 += 16;
    if (v12 == v15)
    {

      unint64_t v2 = v40;
      id v3 = a2;
      unint64_t v4 = v43;
      uint64_t v5 = v39;
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

{
  id v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  Class isa;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  long long v30;
  long long v31;
  unint64_t v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  long long v44;
  long long v45;
  unsigned char v46[48];
  _OWORD v47[2];
  long long v48;
  ValueMetadata *v49;
  _UNKNOWN **v50;
  uint64_t v51;

  unint64_t v2 = a2;
  id v3 = 0;
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v40 = a1 + 32;
  uint64_t v5 = MEMORY[0x263F8EE78];
  unint64_t v37 = v4;
LABEL_2:
  if (v3 <= v4) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v3;
  }
  long long v41 = v6;
  uint64_t v39 = v5;
  while (1)
  {
    if (v3 == v4) {
      return;
    }
    if (v3 == v41) {
      goto LABEL_31;
    }
    unint64_t v43 = *(void *)(v40 + 8 * v3);
    uint64_t v8 = objc_msgSend(v2, sel_listUserVisibleValue);
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v10 = *(void *)(v9 + 16);
    swift_bridgeObjectRelease();
    if (v10) {
      break;
    }
    uint64_t v14 = (void *)MEMORY[0x263F8EE78];
LABEL_7:
    ++v3;
    unint64_t v7 = v14[2];
    swift_bridgeObjectRelease();
    if (v43 < v7)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char v51 = v5;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1);
        uint64_t v5 = v51;
      }
      uint64_t v36 = *(void *)(v5 + 16);
      unint64_t v35 = *(void *)(v5 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        uint64_t v5 = v51;
      }
      *(void *)(v5 + 16) = v36 + 1;
      *(void *)(v5 + 8 * v36 + 32) = v43;
      goto LABEL_2;
    }
  }
  uint64_t v42 = v3;
  uint64_t v11 = v2;
  uint64_t v12 = 0;
  id v13 = 0;
  uint64_t v14 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    unint64_t v15 = objc_msgSend(v11, sel_images);
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v17 = *(void *)(v16 + 16);
    swift_bridgeObjectRelease();
    if (v13 >= v17) {
      goto LABEL_13;
    }
    uint64_t v18 = objc_msgSend(v11, sel_images);
    unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v13 >= *(void *)(v19 + 16)) {
      break;
    }
    id v20 = *(void *)(v19 + v12 + 32);
    uint64_t v21 = *(void *)(v19 + v12 + 40);
    outlined copy of Data._Representation(v20, v21);
    swift_bridgeObjectRelease();
    uint64_t v22 = objc_allocWithZone(MEMORY[0x263F827E8]);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v24 = objc_msgSend(v22, sel_initWithData_, isa);
    outlined consume of Data._Representation(v20, v21);

    if (v24)
    {
      id v25 = objc_msgSend(v11, sel_listUserVisibleValue);
      id v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v13 >= *(void *)(v26 + 16)) {
        goto LABEL_30;
      }
      uint64_t v28 = *(void *)(v26 + v12 + 32);
      id v27 = *(void *)(v26 + v12 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      memset(v47, 0, sizeof(v47));
      uint64_t v49 = &type metadata for CAFUIImageRepresentableItem;
      long long v50 = &protocol witness table for CAFUIImageRepresentableItem;
      uint64_t v29 = (_OWORD *)swift_allocObject();
      *(void *)&uint64_t v48 = v29;
      memset(&v46[8], 0, 40);
      *(void *)&unint64_t v44 = v28;
      *((void *)&v44 + 1) = v27;
      uint64_t v45 = (unint64_t)v24;
      v46[0] = 1;
      outlined assign with take of Any?((uint64_t)v47, (uint64_t)&v46[8]);

      *(void *)&v46[40] = 0;
      uint64_t v30 = *(_OWORD *)&v46[16];
      v29[3] = *(_OWORD *)v46;
      v29[4] = v30;
      uint64_t v31 = v45;
      v29[1] = v44;
      v29[2] = v31;
      v29[5] = *(_OWORD *)&v46[32];
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v48, (uint64_t)&v44);
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v44, (uint64_t)&v48);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      }
      long long v33 = v14[2];
      long long v32 = v14[3];
      if (v33 >= v32 >> 1) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v14);
      }
      v14[2] = v33 + 1;
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v48, (uint64_t)&v14[5 * v33 + 4]);
    }
LABEL_13:
    ++v13;
    v12 += 16;
    if (v10 == v13)
    {

      unint64_t v4 = v37;
      unint64_t v2 = a2;
      id v3 = v42;
      uint64_t v5 = v39;
      goto LABEL_7;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
}

void *specialized Sequence.first(where:)(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    uint64_t v5 = &selRef_setOpacity_;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x24C59FC50](v4 - 4, a1) : *(id *)(a1 + 8 * v4);
      unint64_t v7 = v6;
      uint64_t v8 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      if (((unint64_t)[v6 v5[299]] & 0x8000000000000000) == 0)
      {
        id v9 = [v7 v5[299]];
        uint64_t v10 = v3;
        uint64_t v11 = v5;
        id v12 = objc_msgSend(a2, sel_listUserVisibleValue);
        uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v14 = *(void *)(v13 + 16);
        swift_bridgeObjectRelease();
        BOOL v15 = (uint64_t)v9 < v14;
        uint64_t v5 = v11;
        uint64_t v3 = v10;
        if (v15)
        {
          swift_bridgeObjectRelease();
          return v7;
        }
      }

      ++v4;
      if (v8 == v3) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return 0;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;

  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    id v20 = v2;
    uint64_t v21 = v2 & 0xC000000000000001;
    uint64_t v4 = 4;
    while (1)
    {
      uint64_t v5 = v21 ? (id)MEMORY[0x24C59FC50](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      id v6 = v5;
      unint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      uint64_t v8 = objc_msgSend(v5, sel_identifier);
      id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      id v12 = objc_msgSend(a2, sel_sectionIdentifier);
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = v3;
        BOOL v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v17 = v16;

        if (v9 == v15 && v11 == v17)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_17:
          swift_bridgeObjectRelease();
          return v6;
        }
        uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_17;
        }

        uint64_t v3 = v14;
        unint64_t v2 = v20;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      ++v4;
      if (v7 == v3) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, id a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 32;
  uint64_t v6 = MEMORY[0x263F8EE78];
  do
  {
    uint64_t v16 = v6;
    if (v4 <= v2) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v4;
    }
    unint64_t v8 = v4;
    while (1)
    {
      if (v7 == v8)
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = *(void *)(v5 + 8 * v8);
      if ((v9 & 0x8000000000000000) == 0)
      {
        id v10 = objc_msgSend(a2, sel_selectSettingEntryList);
        id v11 = objc_msgSend(v10, sel_selectSettingEntrys);

        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSelectSettingEntry);
        unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v12 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t result = swift_bridgeObjectRelease();
        if (v9 < v13) {
          break;
        }
      }
      if (v2 == ++v8) {
        return v16;
      }
    }
    uint64_t v6 = v16;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
    }
    unint64_t v15 = *(void *)(v16 + 16);
    unint64_t v14 = *(void *)(v16 + 24);
    if (v15 >= v14 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      uint64_t v6 = v16;
    }
    unint64_t v4 = v8 + 1;
    *(void *)(v6 + 16) = v15 + 1;
    *(void *)(v6 + 8 * v15 + 32) = v9;
  }
  while (v2 - 1 != v8);
  return v6;
}

uint64_t specialized CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)(uint64_t (*a1)(void *, id, id))
{
  id v3 = objc_msgSend(v1, sel_images);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  if (!v5) {
    return 0;
  }
  uint64_t v6 = (void *)specialized CAFListContentRepresentable.session.getter();
  id v7 = v6;
  if (v6)
  {
    id v8 = objc_msgSend(v6, sel_configuration);

    id v7 = objc_msgSend(v8, sel_rightHandDrive);
  }
  id v9 = objc_allocWithZone((Class)type metadata accessor for CAFUICollectionViewController());
  return a1(v1, v7, v9);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)(uint64_t (*a1)(void *, id))
{
  id v3 = objc_msgSend(v1, sel_selectSettingEntryList);
  id v4 = objc_msgSend(v3, sel_selectSettingEntrys);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSelectSettingEntry);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if (v6)
  {
    id v8 = objc_allocWithZone((Class)type metadata accessor for CAFUIPickerViewController());
    return a1(v1, v8);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

void CAFAudioSettings.equalizersResettable.getter()
{
  id v1 = objc_msgSend(v0, sel_equalizers);
  if (v1)
  {
    unint64_t v2 = v1;
    type metadata accessor for CAFEqualizer();
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = MEMORY[0x263F8EE78];
    if (v3 >> 62)
    {
LABEL_21:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v4) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v4)
      {
LABEL_4:
        if (v4 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v4; ++i)
        {
          if ((v3 & 0xC000000000000001) != 0) {
            id v6 = (id)MEMORY[0x24C59FC50](i, v3);
          }
          else {
            id v6 = *(id *)(v3 + 8 * i + 32);
          }
          id v7 = v6;
          unsigned int v8 = objc_msgSend(v6, sel_value);
          id v9 = objc_msgSend(v7, sel_valueRange);
          int v10 = objc_msgSend(v9, sel_maximumValue);

          double v11 = (double)v10;
          id v12 = objc_msgSend(v7, sel_valueRange);
          int v13 = objc_msgSend(v12, sel_minimumValue);

          long double v14 = (v11 + (double)v13) * 0.5;
          id v15 = objc_msgSend(v7, sel_valueRange);
          int v16 = objc_msgSend(v15, sel_stepValue);

          double v17 = v14 - fmod(v14, (double)v16);
          if ((~*(void *)&v17 & 0x7FF0000000000000) == 0)
          {
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
          if (v17 <= -129.0) {
            goto LABEL_19;
          }
          if (v17 >= 128.0) {
            goto LABEL_20;
          }
          if (v8 == (int)v17)
          {
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v18 = v19;
        if ((v19 & 0x8000000000000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) == 0)
    {
LABEL_23:
      if ((v18 & 0x4000000000000000) == 0)
      {
LABEL_24:
        swift_release();
        return;
      }
    }
LABEL_26:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_24;
  }
}

Swift::Void __swiftcall CAFAudioSettings.resetEqualizers()()
{
  id v1 = objc_msgSend(v0, sel_equalizers);
  if (v1)
  {
    unint64_t v2 = v1;
    type metadata accessor for CAFEqualizer();
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v3 >> 62) {
      goto LABEL_19;
    }
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
      while (v4 >= 1)
      {
        uint64_t v5 = 0;
        while (1)
        {
          id v6 = (v3 & 0xC000000000000001) != 0
             ? (id)MEMORY[0x24C59FC50](v5, v3)
             : *(id *)(v3 + 8 * v5 + 32);
          id v7 = v6;
          unsigned int v8 = objc_msgSend(v6, sel_value);
          id v9 = objc_msgSend(v7, sel_valueRange);
          int v10 = objc_msgSend(v9, sel_maximumValue);

          double v11 = (double)v10;
          id v12 = objc_msgSend(v7, sel_valueRange);
          int v13 = objc_msgSend(v12, sel_minimumValue);

          long double v14 = (v11 + (double)v13) * 0.5;
          id v15 = objc_msgSend(v7, sel_valueRange);
          int v16 = objc_msgSend(v15, sel_stepValue);

          double v17 = v14 - fmod(v14, (double)v16);
          if ((~*(void *)&v17 & 0x7FF0000000000000) == 0) {
            break;
          }
          if (v17 <= -129.0) {
            goto LABEL_17;
          }
          if (v17 >= 128.0) {
            goto LABEL_18;
          }
          if (v8 != (int)v17)
          {
            CAFEqualizer.centerValue.getter();
            objc_msgSend(v7, sel_setValue_, v18);
          }
          ++v5;

          if (v4 == v5) {
            goto LABEL_20;
          }
        }
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v4) {
          goto LABEL_20;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_20:
      swift_bridgeObjectRelease();
    }
  }
}

unint64_t type metadata accessor for CAFEqualizer()
{
  unint64_t result = lazy cache variable for type metadata for CAFEqualizer;
  if (!lazy cache variable for type metadata for CAFEqualizer)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSaySo19CAFAutomakerSettingCGG_AHs5NeverOTg5011_sSSSaySo19de30CGACIgggo_SS3key_AC5valuetACs5F188OIegnrzr_TR087_s5CAFUI18CAFUISettingsCacheV8sections33_C136C7576C945FF13298128793D0FFCELL3for13parentb46SayAA29CAFUIAutomakerSettingsSectionVGSaySo012A25M0CG_ALSgtFAMSS_AMtXEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v28 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v28;
  uint64_t v5 = specialized Dictionary.startIndex.getter(a1);
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  char v8 = *(unsigned char *)(a1 + 32);
  int64_t v23 = v1;
  int v24 = v4;
  uint64_t v25 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << v8)
  {
    unint64_t v11 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_28;
    }
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v5);
    if ((v12 & 0x8000000000000000) != 0 || (v12 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v13 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
    }
    uint64_t v27 = v13;
    specialized MutableCollection<>.sort(by:)(&v27);
    if (v26) {
      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v27;
    uint64_t v28 = v2;
    unint64_t v16 = *(void *)(v2 + 16);
    unint64_t v15 = *(void *)(v2 + 24);
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      uint64_t v2 = v28;
    }
    *(void *)(v2 + 16) = v16 + 1;
    *(void *)(v2 + 8 * v16 + 32) = v14;
    char v8 = *(unsigned char *)(a1 + 32);
    unint64_t v9 = 1 << v8;
    if (v5 >= 1 << v8) {
      goto LABEL_30;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v17 = *(void *)(v25 + 8 * v11);
    if ((v17 & (1 << v5)) == 0) {
      goto LABEL_31;
    }
    int v4 = v24;
    if (*(_DWORD *)(a1 + 36) != v24) {
      goto LABEL_32;
    }
    unint64_t v18 = v17 & (-2 << (v5 & 0x3F));
    if (v18)
    {
      unint64_t v9 = __clz(__rbit64(v18)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v23;
    }
    else
    {
      unint64_t v19 = v11 + 1;
      unint64_t v20 = (v9 + 63) >> 6;
      int64_t v10 = v23;
      if (v11 + 1 < v20)
      {
        unint64_t v21 = *(void *)(v25 + 8 * v19);
        if (v21)
        {
LABEL_24:
          unint64_t v9 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            unint64_t v21 = *(void *)(a1 + 80 + 8 * v11++);
            if (v21)
            {
              unint64_t v19 = v11 + 1;
              goto LABEL_24;
            }
          }
        }
      }
    }
    ++v6;
    uint64_t v5 = v9;
    if (v6 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Swift.AnyObject.Type>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  int v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  int v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of UIListContentConfiguration?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v9 = v3[6] + 40 * result;
    int64_t v10 = v15[0];
    uint64_t v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)char v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    BOOL v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CAFAutomakerSetting>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  int v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    char v8 = v7;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    BOOL v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  int v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of UIListContentConfiguration?(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (NSAttributedStringKey, Any));
    uint64_t v7 = v13;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    int64_t v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t CAFAutomakerSetting.isLimitableUI.getter()
{
  if (objc_msgSend(v0, sel_hasLimitableUIElement)
    && (objc_msgSend(v0, sel_limitableUIElement) & 1) != 0)
  {
    return 1;
  }

  return CAFAutomakerSetting.isLimitableUIByAncestor.getter();
}

uint64_t protocol witness for CAFListContentRepresentable.isLimitableUI.getter in conformance CAFSingleSelectImageSetting()
{
  if (objc_msgSend(v0, sel_hasLimitableUIElement)
    && objc_msgSend(v0, sel_limitableUIElement))
  {
    return 1;
  }

  return CAFAutomakerSetting.isLimitableUIByAncestor.getter();
}

uint64_t CAFUISettingsCache.settings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUISettingsCache.rootSettings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUISettingsCache.hasEnabledRootSettings(in:limitUIEnabled:)(uint64_t a1, char a2)
{
  unint64_t v4 = *(void *)(v2 + 8);
  unint64_t v34 = v4;
  if (v4 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain_n();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v5)
    {
LABEL_3:
      unint64_t v6 = v4 & 0xC000000000000001;
      uint64_t v7 = 4;
      char v8 = &selRef_setOpacity_;
      char v9 = &selRef_setOpacity_;
      int64_t v10 = &selRef_setOpacity_;
      uint64_t v26 = MEMORY[0x263F8EE58] + 8;
      do
      {
        if (v6) {
          id v11 = (id)MEMORY[0x24C59FC50](v7 - 4, v4);
        }
        else {
          id v11 = *(id *)(v4 + 8 * v7);
        }
        BOOL v12 = v11;
        if (__OFADD__(v7 - 4, 1))
        {
          __break(1u);
          goto LABEL_31;
        }
        uint64_t v29 = v7 - 3;
        BOOL v13 = (a1 & 0x100) != 0 || objc_msgSend(v11, sel_category) == a1;
        BOOL v28 = v13;
        if (!objc_msgSend(v12, v8[327], v26)
          || (char v14 = a2, (objc_msgSend(v12, sel_limitableUIElement) & 1) == 0))
        {
          swift_beginAccess();
          id v15 = objc_getAssociatedObject(v12, &static CAFUIListContentAssociatedObjects.AncestorUILimitable);
          swift_endAccess();
          if (v15)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            memset(v31, 0, sizeof(v31));
          }
          outlined init with take of Any?((uint64_t)v31, (uint64_t)v32);
          if (!v33)
          {
            outlined destroy of Any?((uint64_t)v32);
LABEL_22:
            char v14 = 0;
            goto LABEL_23;
          }
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_22;
          }
          char v14 = v30 & a2;
        }
LABEL_23:
        if [v12 v9[336]] && (objc_msgSend(v12, sel_hidden))
        {
        }
        else if ([v12 v10[337]])
        {
          unint64_t v16 = v9;
          uint64_t v17 = a1;
          unint64_t v18 = v4;
          uint64_t v19 = v5;
          unint64_t v20 = v6;
          unint64_t v21 = v8;
          unsigned __int8 v22 = objc_msgSend(v12, sel_disabled);

          char v23 = v22 | v14;
          char v8 = v21;
          unint64_t v6 = v20;
          uint64_t v5 = v19;
          unint64_t v4 = v18;
          a1 = v17;
          char v9 = v16;
          int64_t v10 = &selRef_setOpacity_;
          if ((v23 & 1) == 0 && v28)
          {
LABEL_29:
            uint64_t v24 = 1;
            goto LABEL_33;
          }
        }
        else
        {

          if (!(v14 & 1 | !v28)) {
            goto LABEL_29;
          }
        }
        ++v7;
      }
      while (v29 != v5);
    }
  }
  uint64_t v24 = 0;
LABEL_33:
  outlined release of [CAFSettingsSection]((uint64_t)&v34);
  outlined release of [CAFSettingsSection]((uint64_t)&v34);
  return v24;
}

id CAFAutomakerSetting.isHidden.getter()
{
  return CAFAutomakerSetting.isHidden.getter((SEL *)&selRef_hasHidden, (SEL *)&selRef_hidden);
}

id CAFAutomakerSetting.isDisabled.getter()
{
  return CAFAutomakerSetting.isHidden.getter((SEL *)&selRef_hasDisabled, (SEL *)&selRef_disabled);
}

id CAFAutomakerSetting.isHidden.getter(SEL *a1, SEL *a2)
{
  id result = [v2 *a1];
  if (result) {
    return [v2 *a2];
  }
  return result;
}

uint64_t CAFUISettingsCache.settingsByIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUISettingsCache.parentToChildrenIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUISettingsCache.childToParentIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUISettingsCache.settingsSections.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall CAFUISettingsCache.init(settings:sections:)(CAFUI::CAFUISettingsCache *__return_ptr retstr, Swift::OpaquePointer settings, Swift::OpaquePointer_optional sections)
{
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  if (sections.value._rawValue) {
    rawValue = sections.value._rawValue;
  }
  else {
    rawValue = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v85 = (unint64_t)settings._rawValue >> 62;
  if ((unint64_t)settings._rawValue >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)(((unint64_t)settings._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v82 = rawValue;
  int64_t v86 = (int64_t)settings._rawValue;
  uint64_t v77 = retstr;
  if (v7)
  {
    v87[0] = (uint64_t)v5;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
    {
      __break(1u);
      goto LABEL_105;
    }
    uint64_t v8 = 0;
    uint64_t v5 = (void *)v87[0];
    unint64_t v9 = (unint64_t)settings._rawValue & 0xC000000000000001;
    do
    {
      if (v9) {
        id v10 = (id)MEMORY[0x24C59FC50](v8, v86);
      }
      else {
        id v10 = *(id *)(v86 + 8 * v8 + 32);
      }
      id v11 = v10;
      id v12 = objc_msgSend(v10, sel_identifier, v77);
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      v87[0] = (uint64_t)v5;
      unint64_t v17 = v5[2];
      unint64_t v16 = v5[3];
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v5 = (void *)v87[0];
      }
      ++v8;
      v5[2] = v17 + 1;
      unint64_t v18 = &v5[3 * v17];
      v18[4] = v13;
      v18[5] = v15;
      v18[6] = v11;
    }
    while (v7 != v8);
    goto LABEL_17;
  }
  if (v5[2])
  {
LABEL_17:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CAFAutomakerSetting>);
    uint64_t v19 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_18;
  }
  uint64_t v19 = MEMORY[0x263F8EE80];
LABEL_18:
  v87[0] = v19;
  unint64_t v20 = 0;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v5, 1, v87);
  swift_bridgeObjectRelease();
  int64_t v21 = v86;
  uint64_t v83 = v87[0];
  v87[0] = MEMORY[0x263F8EE78];
  if (v85)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    if (!v22) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v22 = *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v22) {
      goto LABEL_37;
    }
  }
  if (v22 < 1)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  if ((v86 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v22; ++i)
    {
      MEMORY[0x24C59FC50](i, v86);
      self;
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x24C59F700]();
        if (*(void *)((v87[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v87[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    for (uint64_t j = 0; j != v22; ++j)
    {
      uint64_t v25 = *(void **)(v86 + 8 * j + 32);
      self;
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x24C59F700](v25);
        if (*(void *)((v87[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v87[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
  }
LABEL_37:
  swift_bridgeObjectRelease();
  unint64_t v26 = v87[0];
  v87[0] = MEMORY[0x263F8EE78];
  if (!(v26 >> 62))
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v80 = v22;
    if (v27) {
      goto LABEL_39;
    }
LABEL_53:
    swift_bridgeObjectRelease();
    unint64_t v35 = MEMORY[0x263F8EE78];
    goto LABEL_54;
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v80 = v22;
  if (!v27) {
    goto LABEL_53;
  }
LABEL_39:
  if (v27 < 1)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  for (uint64_t k = 0; k != v27; ++k)
  {
    if ((v26 & 0xC000000000000001) != 0) {
      id v29 = (id)MEMORY[0x24C59FC50](k, v26);
    }
    else {
      id v29 = *(id *)(v26 + 8 * k + 32);
    }
    char v30 = v29;
    id v31 = objc_msgSend(v29, sel_childrenSettingsIdentifiers, v77);
    if (v31
      && (long long v32 = v31,
          uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
          v32,
          uint64_t v34 = *(void *)(v33 + 16),
          swift_bridgeObjectRelease(),
          v34))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  int64_t v21 = v86;
  unint64_t v35 = v87[0];
LABEL_54:
  swift_retain();
  uint64_t v36 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo16CAFStaticSettingCG_SS_SaySo012CAFAutomakerE0CGts5NeverOTg5056_s5CAFUI18CAFUISettingsCacheV8settings8sectionsACSaySo19fe46CG_SaySo18CAFSettingsSectionCGSgtcfcSS_AHtSo09D9G0CXEfU3_SDySSAJGTf1cn_nTf4ng_n(v35, v83);
  swift_release();
  swift_release();
  if (v36[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [CAFAutomakerSetting]>);
    uint64_t v37 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v37 = MEMORY[0x263F8EE80];
  }
  v87[0] = v37;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v36, 1, v87);
  swift_bridgeObjectRelease();
  uint64_t v38 = v87[0];
  uint64_t v39 = MEMORY[0x263F8EE78];
  unint64_t v40 = (unint64_t)&v77;
  unint64_t v88 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  MEMORY[0x270FA5388](v88);
  specialized Sequence.forEach(_:)(v38, (void (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #7 in CAFUISettingsCache.init(settings:sections:));
  unint64_t v41 = v88;
  v87[0] = v39;
  if (v85)
  {
    if (v21 < 0) {
      unint64_t v40 = v21;
    }
    else {
      unint64_t v40 = v21 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v81 = v38;
    if (v42)
    {
LABEL_59:
      unint64_t v85 = 0;
      unint64_t v43 = 0;
      unint64_t v20 = v21 & 0xC000000000000001;
      uint64_t v44 = v21 & 0xFFFFFFFFFFFFFF8;
      while (1)
      {
        if (v20)
        {
          id v45 = (id)MEMORY[0x24C59FC50](v43, v21);
        }
        else
        {
          if (v43 >= *(void *)(v44 + 16)) {
            goto LABEL_102;
          }
          id v45 = *(id *)(v21 + 8 * v43 + 32);
        }
        long long v46 = v45;
        unint64_t v40 = v43 + 1;
        if (__OFADD__(v43, 1)) {
          break;
        }
        id v47 = objc_msgSend(v45, sel_identifier);
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v50 = v49;

        if (*(void *)(v41 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v48, v50), (v51 & 1) != 0))
        {

          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        uint64_t v38 = v81;
        ++v43;
        int64_t v21 = v86;
        if (v40 == v42)
        {
          unint64_t v40 = v87[0];
          unint64_t v20 = v85;
          goto LABEL_76;
        }
      }
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
  }
  else
  {
    uint64_t v42 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v81 = v38;
    if (v42) {
      goto LABEL_59;
    }
  }
  unint64_t v40 = MEMORY[0x263F8EE78];
LABEL_76:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v40 & 0x8000000000000000) != 0 || (uint64_t v52 = (void *)v40, (v40 & 0x4000000000000000) != 0))
  {
LABEL_103:
    uint64_t v52 = specialized _copyCollectionToContiguousArray<A>(_:)(v40);
    swift_release();
  }
  v87[0] = (uint64_t)v52;
  specialized MutableCollection<>.sort(by:)(v87);
  if (v20)
  {
LABEL_108:
    swift_release();
    __break(1u);
    return;
  }
  swift_release();
  unint64_t v53 = v87[0];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v54 = specialized _ArrayProtocol.filter(_:)(v21, v53);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v80) {
    goto LABEL_100;
  }
  if (v80 < 1)
  {
LABEL_107:
    __break(1u);
    swift_release();
    __break(1u);
    swift_release();
    __break(1u);
    goto LABEL_108;
  }
  int64_t v78 = v21 + 32;
  unint64_t v79 = v21 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  unint64_t v55 = 0;
  do
  {
    unint64_t v85 = v55;
    if (v79) {
      id v59 = (id)MEMORY[0x24C59FC50](v55, v21);
    }
    else {
      id v59 = *(id *)(v78 + 8 * v55);
    }
    uint64_t v60 = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v84 = v60;
    id v61 = objc_msgSend(v60, sel_identifier);
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v64 = v63;

    if (!*(void *)(v41 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_83:
      unint64_t v56 = v85;
      goto LABEL_84;
    }
    unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v64);
    if ((v66 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v38 = v81;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_83;
    }
    id v67 = *(id *)(*(void *)(v41 + 56) + 8 * v65);
    swift_bridgeObjectRelease();
    uint64_t v38 = v81;
    unint64_t v56 = v85;
    while (1)
    {
      id v68 = v67;
      if (objc_msgSend(v68, sel_hasLimitableUIElement))
      {
        if (objc_msgSend(v68, sel_limitableUIElement)) {
          break;
        }
      }
      id v69 = objc_msgSend(v68, sel_identifier, v77);
      uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v72 = v71;

      if (!*(void *)(v41 + 16) || (unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v72), (v74 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_84;
      }
      id v67 = *(id *)(*(void *)(v41 + 56) + 8 * v73);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_84:
    unint64_t v55 = v56 + 1;
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess();
    id v58 = v84;
    objc_setAssociatedObject(v84, &static CAFUIListContentAssociatedObjects.AncestorUILimitable, isa, 0);
    swift_endAccess();

    int64_t v21 = v86;
  }
  while (v55 != v80);
  swift_bridgeObjectRelease();
LABEL_100:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v75 = v77;
  v77->settings._rawValue = (void *)v21;
  v75->rootSettings._rawValue = (void *)v53;
  uint64_t v76 = v83;
  v75->prominentSettings._rawValue = (void *)v54;
  v75->settingsByIdentifiers._rawValue = (void *)v76;
  v75->parentToChildrenIdentifiers._rawValue = (void *)v38;
  v75->childToParentIdentifiers._rawValue = (void *)v41;
  v75->settingsSections._rawValue = v82;
}

uint64_t closure #7 in CAFUISettingsCache.init(settings:sections:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t a5)
{
  unint64_t v7 = a3;
  if (a3 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
    {
LABEL_3:
      unint64_t v45 = v7;
      unint64_t v46 = v7 & 0xC000000000000001;
      uint64_t v10 = 4;
      uint64_t v43 = v9;
      uint64_t v44 = a2;
      unint64_t v40 = a5;
      do
      {
        if (v46) {
          id v11 = (id)MEMORY[0x24C59FC50](v10 - 4, v7);
        }
        else {
          id v11 = *(id *)(v7 + 8 * v10);
        }
        id v12 = v11;
        uint64_t v13 = v10 - 3;
        if (__OFADD__(v10 - 4, 1))
        {
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        id v14 = objc_msgSend(v11, sel_identifier);
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;

        if (!*(void *)(a5 + 16)) {
          goto LABEL_19;
        }
        swift_bridgeObjectRetain();
        unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
        if ((v19 & 1) == 0)
        {
          swift_bridgeObjectRelease();
LABEL_19:
          swift_bridgeObjectRetain();
          unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v17);
          char v29 = v28;
          swift_bridgeObjectRelease();
          if (v29)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v31 = *a4;
            uint64_t v48 = *a4;
            *a4 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v31 = v48;
            }
            swift_bridgeObjectRelease();
            long long v32 = *(void **)(*(void *)(v31 + 56) + 8 * v27);
            specialized _NativeDictionary._delete(at:)(v27, v31);
            *a4 = v31;

            swift_bridgeObjectRelease();
          }
          else
          {
          }
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        id v41 = *(id *)(*(void *)(a5 + 56) + 8 * v18);
        swift_bridgeObjectRelease();
        a2 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v20 = *a4;
        uint64_t v47 = *a4;
        *a4 = 0x8000000000000000;
        a5 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v17);
        uint64_t v22 = *(void *)(v20 + 16);
        BOOL v23 = (v21 & 1) == 0;
        uint64_t v24 = v22 + v23;
        if (__OFADD__(v22, v23)) {
          goto LABEL_31;
        }
        unint64_t v7 = v21;
        if (*(void *)(v20 + 24) >= v24)
        {
          if (a2)
          {
            a2 = v47;
            if ((v21 & 1) == 0) {
              goto LABEL_27;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            a2 = v47;
            if ((v7 & 1) == 0) {
              goto LABEL_27;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, a2);
          unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v17);
          if ((v7 & 1) != (v26 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          a5 = v25;
          a2 = v47;
          if ((v7 & 1) == 0)
          {
LABEL_27:
            *(void *)(a2 + 8 * (a5 >> 6) + 64) |= 1 << a5;
            unint64_t v35 = (uint64_t *)(*(void *)(a2 + 48) + 16 * a5);
            *unint64_t v35 = v15;
            v35[1] = v17;
            *(void *)(*(void *)(a2 + 56) + 8 * a5) = v41;
            uint64_t v36 = *(void *)(a2 + 16);
            BOOL v37 = __OFADD__(v36, 1);
            uint64_t v38 = v36 + 1;
            if (v37) {
              goto LABEL_32;
            }
            *(void *)(a2 + 16) = v38;
            swift_bridgeObjectRetain();
            goto LABEL_29;
          }
        }
        uint64_t v33 = *(void *)(a2 + 56);
        uint64_t v34 = *(void **)(v33 + 8 * a5);
        *(void *)(v33 + 8 * a5) = v41;

LABEL_29:
        *a4 = a2;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a5 = v40;
LABEL_6:
        a2 = v44;
        unint64_t v7 = v45;
        ++v10;
      }
      while (v13 != v43);
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t CAFUISettingsCache.hasShowAudioLogo.getter()
{
  unint64_t v1 = *v0;
  unint64_t v11 = v1;
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_18:
    outlined release of [CAFSettingsSection]((uint64_t)&v11);
    uint64_t v8 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_18;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = v1 & 0xC000000000000001;
    do
    {
      if (v5) {
        id v6 = (id)MEMORY[0x24C59FC50](v4, v1);
      }
      else {
        id v6 = *(id *)(v1 + 8 * v4 + 32);
      }
      unint64_t v7 = v6;
      if (objc_msgSend(v6, sel_hasHidden) && (objc_msgSend(v7, sel_hidden) & 1) != 0
        || objc_msgSend(v7, sel_category) != 3
        || (objc_msgSend(v7, sel_showAudioBrandLogo) & 1) == 0)
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        unint64_t v5 = v1 & 0xC000000000000001;
      }
      ++v4;
    }
    while (v2 != v4);
    outlined release of [CAFSettingsSection]((uint64_t)&v11);
    uint64_t v8 = v10;
    if (v10 < 0) {
      goto LABEL_22;
    }
LABEL_19:
    if ((v8 & 0x4000000000000000) == 0)
    {
      uint64_t v9 = *(void *)(v8 + 16);
LABEL_21:
      swift_release();
      return v9 != 0;
    }
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t CAFUISettingsCache.rootSettings(in:visibleOnly:)(unsigned __int8 a1, char a2)
{
  unint64_t v5 = *(void *)(v2 + 8);
  uint64_t v12 = v5;
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_17:
    outlined release of [CAFSettingsSection]((uint64_t)&v12);
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v9 = (id)MEMORY[0x24C59FC50](i, v5);
      }
      else {
        id v9 = *(id *)(v5 + 8 * i + 32);
      }
      uint64_t v10 = v9;
      if (objc_msgSend(v9, sel_category, v11, v12) != a1
        || (a2 & 1) != 0
        && objc_msgSend(v10, sel_hasHidden)
        && objc_msgSend(v10, sel_hidden))
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    outlined release of [CAFSettingsSection]((uint64_t)&v12);
    return v11;
  }
  return result;
}

unint64_t CAFUISettingsCache.prominentSettings(in:visibleOnly:)(uint64_t a1, char a2)
{
  unint64_t v5 = *(void *)(v2 + 16);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = specialized _ArrayProtocol.filter(_:)(v5, a1, a2 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v7;
  }
  return v5;
}

uint64_t CAFUISettingsCache.visibleChildren(of:)(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  id v3 = objc_msgSend(a1, sel_identifier);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  uint64_t v7 = MEMORY[0x263F8EE78];
  if (*(void *)(v2 + 16))
  {
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6);
    if (v9)
    {
      unint64_t v10 = *(void *)(*(void *)(v2 + 56) + 8 * v8);
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v10 = MEMORY[0x263F8EE78];
    }
  }
  else
  {
    unint64_t v10 = MEMORY[0x263F8EE78];
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v16 = v7;
  if (!(v10 >> 62))
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_8;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_20;
  }
LABEL_8:
  if (v12 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0) {
        id v14 = (id)MEMORY[0x24C59FC50](i, v10);
      }
      else {
        id v14 = *(id *)(v10 + 8 * i + 32);
      }
      uint64_t v15 = v14;
      if objc_msgSend(v14, sel_hasHidden) && (objc_msgSend(v15, sel_hidden))
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    return v16;
  }
  return result;
}

uint64_t CAFUISettingsCache.sections(for:)(void *a1)
{
  if (a1)
  {
    id v3 = a1;
    unint64_t v4 = CAFUISettingsCache.childSettings(of:)(v3);
  }
  else
  {
    unint64_t v4 = *(void *)(v1 + 8);
    swift_bridgeObjectRetain();
  }
  uint64_t v5 = CAFUISettingsCache.sections(for:parentSetting:)(v4, a1);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t CAFUISettingsCache.childSettings(of:)(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  id v3 = objc_msgSend(a1, sel_identifier);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  if (*(void *)(v2 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void *)(*(void *)(v2 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t CAFUISettingsCache.sections(for:parentSetting:)(unint64_t a1, void *a2)
{
  uint64_t v38 = (void *)MEMORY[0x263F8EE80];
  if (a1 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      uint64_t v4 = (void *)MEMORY[0x263F8EE80];
      uint64_t v5 = 4;
      uint64_t v36 = v3;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v8 = (id)MEMORY[0x24C59FC50](v5 - 4, a1);
        }
        else {
          id v8 = *(id *)(a1 + 8 * v5);
        }
        id v9 = v8;
        uint64_t v10 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        id v11 = objc_msgSend(v8, sel_sectionIdentifier);
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
        }
        else
        {
          uint64_t v13 = 0;
          uint64_t v15 = 0xE000000000000000;
        }
        unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
        uint64_t v18 = v4[2];
        BOOL v19 = (v16 & 1) == 0;
        uint64_t v20 = v18 + v19;
        if (__OFADD__(v18, v19)) {
          goto LABEL_23;
        }
        char v21 = v16;
        if (v4[3] < v20)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, 1);
          uint64_t v4 = v38;
          unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
          if ((v21 & 1) != (v23 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v17 = v22;
        }
        if (v21)
        {
          uint64_t v6 = swift_bridgeObjectRelease();
          unint64_t v7 = (void *)(v4[7] + 8 * v17);
          MEMORY[0x24C59F700](v6);
          if (*(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v24 = swift_allocObject();
          *(_OWORD *)(v24 + 16) = xmmword_2495300D0;
          *(void *)(v24 + 32) = v9;
          uint64_t v37 = v24;
          specialized Array._endMutation()();
          v4[(v17 >> 6) + 8] |= 1 << v17;
          unint64_t v25 = (uint64_t *)(v4[6] + 16 * v17);
          *unint64_t v25 = v13;
          v25[1] = v15;
          *(void *)(v4[7] + 8 * v17) = v37;
          uint64_t v26 = v4[2];
          BOOL v27 = __OFADD__(v26, 1);
          uint64_t v28 = v26 + 1;
          if (v27) {
            goto LABEL_24;
          }
          _OWORD v4[2] = v28;
        }
        ++v5;
        if (v10 == v36) {
          goto LABEL_27;
        }
      }
    }
  }
  uint64_t v4 = (void *)MEMORY[0x263F8EE80];
LABEL_27:
  swift_bridgeObjectRelease();
  char v29 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSaySo19CAFAutomakerSettingCGG_AHs5NeverOTg5011_sSSSaySo19de30CGACIgggo_SS3key_AC5valuetACs5F188OIegnrzr_TR087_s5CAFUI18CAFUISettingsCacheV8sections33_C136C7576C945FF13298128793D0FFCELL3for13parentb46SayAA29CAFUIAutomakerSettingsSectionVGSaySo012A25M0CG_ALSgtFAMSS_AMtXEfU0_Tf3nnnpf_nTf1cn_n((uint64_t)v4);
  swift_release();
  uint64_t v38 = v29;
  outlined retain of CAFUISettingsCache(v35);
  specialized MutableCollection<>.sort(by:)(&v38, v35);
  outlined release of CAFUISettingsCache(v35);
  outlined retain of CAFUISettingsCache(v35);
  id v30 = a2;
  uint64_t v31 = swift_bridgeObjectRetain();
  uint64_t v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySaySo19CAFAutomakerSettingCGG_5CAFUI29CAFUIAutomakerSettingsSectionVs5NeverOTg5087_s5CAFUI18CAFUISettingsCacheV8sections33_C136C7576C945FF13298128793D0FFCELL3for13parente7SayAA29ghi10VGSaySo012D20M0CG_ALSgtFAiMXEfU2_AJ0mN0VAGSgTf1cn_nTf4ngg_n(v31, v35, a2);

  outlined release of CAFUISettingsCache(v35);
  swift_bridgeObjectRelease_n();
  return v32;
}

void *CAFUISettingsCache.section(for:)(void *a1)
{
  id v1 = a1;
  unint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized Sequence.first(where:)(v2, v1);
  swift_bridgeObjectRelease();

  return v3;
}

uint64_t CAFUISettingsCache.categorySettings(for:)(unsigned __int8 a1)
{
  unint64_t v3 = *(void *)(v1 + 8);
  uint64_t v12 = v3;
  unint64_t v11 = MEMORY[0x263F8EE78];
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_14:
    outlined release of [CAFSettingsSection]((uint64_t)&v12);
    unint64_t v9 = MEMORY[0x263F8EE78];
LABEL_15:
    uint64_t v10 = CAFUISettingsCache.sections(for:parentSetting:)(v9, 0);
    swift_release();
    return v10;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_14;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x24C59FC50](i, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * i + 32);
      }
      id v8 = v7;
      if (objc_msgSend(v7, sel_category, v11, v12) == a1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    outlined release of [CAFSettingsSection]((uint64_t)&v12);
    unint64_t v9 = v11;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t CAFUISettingsCache.settings(excludingLayoutKeys:)(void *a1)
{
  swift_bridgeObjectRetain();
  unint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized _ArrayProtocol.filter(_:)(v2, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t CAFUISettingsCache.settings(for:)(unsigned __int8 a1)
{
  unint64_t v3 = *v1;
  uint64_t v10 = v3;
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_14:
    outlined release of [CAFSettingsSection]((uint64_t)&v10);
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_14;
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x24C59FC50](i, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * i + 32);
      }
      id v8 = v7;
      if (objc_msgSend(v7, sel_category, v9, v10) == a1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    outlined release of [CAFSettingsSection]((uint64_t)&v10);
    return v9;
  }
  return result;
}

uint64_t CAFUISettingsCache.setting(_:isAncestorOf:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(a1, sel_identifier);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  id v9 = objc_msgSend(a2, sel_identifier);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (v6 == v10 && v8 == v12)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if (v14) {
    return result;
  }
  uint64_t v16 = *(void *)(v2 + 40);
  id v17 = objc_msgSend(a2, sel_identifier);
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  if (!*(void *)(v16 + 16) || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v22 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  id v23 = *(id *)(*(void *)(v16 + 56) + 8 * v21);
  swift_bridgeObjectRelease();
  while (1)
  {
    id v24 = v23;
    id v25 = objc_msgSend(a1, sel_identifier);
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;

    id v29 = objc_msgSend(v24, sel_identifier);
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;

    if (v26 == v30 && v28 == v32)
    {

      swift_bridgeObjectRelease_n();
      return 1;
    }
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v34) {
      break;
    }
    id v35 = objc_msgSend(v24, sel_identifier);
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;

    if (!*(void *)(v16 + 16) || (unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v38), (v40 & 1) == 0))
    {
      swift_bridgeObjectRelease();

      return 0;
    }
    id v23 = *(id *)(*(void *)(v16 + 56) + 8 * v39);
    swift_bridgeObjectRelease();
  }
  return 1;
}

void CAFUISettingsCache.ancestors(of:)(void *a1)
{
  unint64_t v35 = MEMORY[0x263F8EE78];
  uint64_t v2 = *(void *)(v1 + 40);
  id v3 = objc_msgSend(a1, sel_identifier);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  if (*(void *)(v2 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6), (v8 & 1) != 0))
  {
    id v9 = *(id *)(*(void *)(v2 + 56) + 8 * v7);
    swift_bridgeObjectRelease();
    while (1)
    {
      id v10 = v9;
      MEMORY[0x24C59F700]();
      if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v11 = objc_msgSend(v10, sel_identifier);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      if (!*(void *)(v2 + 16)) {
        break;
      }
      unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
      if ((v16 & 1) == 0) {
        break;
      }
      id v9 = *(id *)(*(void *)(v2 + 56) + 8 * v15);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (v35 >> 62) {
    goto LABEL_38;
  }
  uint64_t v17 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17)
  {
    for (uint64_t i = v17 - 1; !__OFSUB__(v17, 1); uint64_t i = v17 - 1)
    {
      if (i < 1) {
        return;
      }
      uint64_t v19 = 0;
      uint64_t v20 = v17 + 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        unint64_t v21 = v17 - 1;
        unint64_t v22 = v35;
        if ((v35 & 0xC000000000000001) != 0)
        {
          uint64_t v25 = MEMORY[0x24C59FC50](v19, v35);
          id v26 = (id)MEMORY[0x24C59FC50](v17 - 1, v35);
          goto LABEL_20;
        }
        unint64_t v23 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v19 >= v23) {
          break;
        }
        id v24 = *(id *)(v35 + 8 * v19 + 32);
        if (v21 >= v23) {
          goto LABEL_35;
        }
        uint64_t v25 = (uint64_t)v24;
        id v26 = *(id *)(v35 + 8 * v17 + 24);
LABEL_20:
        id v27 = v26;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v35 & 0x8000000000000000) != 0
          || (v35 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v35);
          unint64_t v22 = v28;
          unint64_t v35 = v28;
        }
        id v29 = *(void **)((v22 & 0xFFFFFFFFFFFFFF8) + 8 * v19 + 0x20);
        *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 8 * v19 + 0x20) = v27;

        specialized Array._endMutation()();
        unint64_t v30 = v35;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v35 & 0x8000000000000000) != 0
          || (v35 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v35);
          unint64_t v30 = v31;
          unint64_t v35 = v31;
        }
        if (v21 >= *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_36;
        }
        uint64_t v32 = *(void **)((v30 & 0xFFFFFFFFFFFFFF8) + 8 * v17 + 0x18);
        *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 8 * v17 + 0x18) = v25;

        specialized Array._endMutation()();
        if (v20 == v19) {
          goto LABEL_37;
        }
        ++v19;
        uint64_t v33 = v17 - 2;
        --v17;
        if (v19 >= v33) {
          return;
        }
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v34) {
        return;
      }
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    __break(1u);
  }
}

uint64_t CAFUISettingsCache.hasAnyHiddenAncestor(_:)(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  id v3 = objc_msgSend(a1, sel_identifier);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  if (*(void *)(v2 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6), (v8 & 1) != 0))
  {
    id v9 = *(id *)(*(void *)(v2 + 56) + 8 * v7);
    swift_bridgeObjectRelease();
    while (1)
    {
      id v10 = v9;
      if (objc_msgSend(v10, sel_hasHidden))
      {
        if (objc_msgSend(v10, sel_hidden)) {
          break;
        }
      }
      id v11 = objc_msgSend(v10, sel_identifier);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      if (!*(void *)(v2 + 16) || (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14), (v16 & 1) == 0))
      {
        swift_bridgeObjectRelease();

        return 0;
      }
      id v9 = *(id *)(*(void *)(v2 + 56) + 8 * v15);
      swift_bridgeObjectRelease();
    }
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(uint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = *a2;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7) {
      goto LABEL_34;
    }
  }
  if ((v5 & 0xC000000000000001) != 0)
  {
    id v8 = (id)MEMORY[0x24C59FC50](0, v5);
  }
  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_32;
    }
    id v8 = *(id *)(v5 + 32);
  }
  id v3 = v8;
  swift_bridgeObjectRelease();
  if (!(v6 >> 62))
  {
    uint64_t v9 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
  {
LABEL_33:

LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
LABEL_8:
  if ((v6 & 0xC000000000000001) != 0)
  {
    id v11 = (id)MEMORY[0x24C59FC50](0, v6);
    goto LABEL_11;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(v6 + 32);
LABEL_11:
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    unint64_t v13 = *(void *)(a3 + 48);
    id v14 = v3;
    unint64_t v15 = swift_bridgeObjectRetain();
    char v16 = specialized Sequence.first(where:)(v15, v14);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRetain();
    id v17 = v12;
    uint64_t v18 = specialized Sequence.first(where:)(v13, v17);
    swift_bridgeObjectRelease();

    if (v16)
    {
      if (v18)
      {
        id v19 = v16;
        id v20 = v18;
        unsigned int v21 = objc_msgSend(v19, sel_sortOrder);
        if (v21 == objc_msgSend(v20, sel_sortOrder))
        {
          id v22 = objc_msgSend(v19, sel_identifier);
          uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;

          id v25 = objc_msgSend(v20, sel_identifier);
          uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v28 = v27;

          if (v26 == v42 && v28 == v24)
          {

            char v29 = 1;
          }
          else
          {
            char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();

            char v29 = v40 ^ 1;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          unsigned int v30 = objc_msgSend(v19, sel_sortOrder);
          unsigned int v31 = objc_msgSend(v20, sel_sortOrder);

          char v29 = v30 < v31;
        }
      }
      else
      {

        char v29 = 0;
      }
      return v29 & 1;
    }
    if (!v18)
    {
      id v32 = objc_msgSend(v14, sel_identifier);
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;

      id v36 = objc_msgSend(v17, sel_identifier);
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v38;

      if (v37 == v33 && v39 == v35)
      {

        char v29 = 1;
      }
      else
      {
        char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();

        char v29 = v41 ^ 1;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v29 & 1;
    }

LABEL_35:
    char v29 = 1;
    return v29 & 1;
  }
  __break(1u);
  return result;
}

uint64_t closure #4 in CAFUISettingsCache.sections(for:parentSetting:)@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CharacterSet();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_3;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t v50 = a2;
  uint64_t v47 = v9;
  if ((v12 & 0xC000000000000001) != 0)
  {
    id v15 = (id)MEMORY[0x24C59FC50](0, v12);
    goto LABEL_6;
  }
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v15 = *(id *)(v12 + 32);
LABEL_6:
    char v16 = v15;
    swift_bridgeObjectRelease();
    id v17 = v16;
    unint64_t v18 = swift_bridgeObjectRetain();
    id v19 = specialized Sequence.first(where:)(v18, v17);
    swift_bridgeObjectRelease();

    if (v19)
    {
      uint64_t v46 = v8;
      unint64_t v20 = (unint64_t)objc_msgSend(v19, sel_userVisibleSectionName);
      v45[1] = v4;
      if (v20)
      {
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;

        unint64_t v48 = v21;
        unint64_t v49 = v23;
        static CharacterSet.whitespaces.getter();
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v24 = StringProtocol.trimmingCharacters(in:)();
        unint64_t v20 = v25;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v46);
        swift_bridgeObjectRelease();
        uint64_t v26 = HIBYTE(v20) & 0xF;
        if ((v20 & 0x2000000000000000) == 0) {
          uint64_t v26 = v24 & 0xFFFFFFFFFFFFLL;
        }
        if (!v26)
        {
          swift_bridgeObjectRelease();
          uint64_t v24 = 0;
          unint64_t v20 = 0;
        }
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v32 = (uint64_t)objc_msgSend(v19, sel_userVisibleFooter);
      if (v32)
      {
        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v45[0] = v17;
        unint64_t v34 = v33;
        unint64_t v36 = v35;

        unint64_t v48 = v34;
        unint64_t v49 = v36;
        static CharacterSet.whitespaces.getter();
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v32 = StringProtocol.trimmingCharacters(in:)();
        unint64_t v38 = v37;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v46);
        swift_bridgeObjectRelease();

        uint64_t v39 = HIBYTE(v38) & 0xF;
        if ((v38 & 0x2000000000000000) == 0) {
          uint64_t v39 = v32 & 0xFFFFFFFFFFFFLL;
        }
        if (v39) {
          goto LABEL_22;
        }
        swift_bridgeObjectRelease();
        uint64_t v32 = 0;
      }
      else
      {
      }
      unint64_t v38 = 0;
LABEL_22:
      a2 = v50;
LABEL_28:
      *a3 = v24;
      a3[1] = v20;
      a3[2] = v32;
      a3[3] = v38;
      a3[4] = (uint64_t)a2;
      a3[5] = v12;
      id v44 = a2;
      return swift_bridgeObjectRetain();
    }
    unint64_t v48 = 0;
    unint64_t v49 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v48 = 0xD000000000000022;
    unint64_t v49 = 0x80000002495342D0;
    id v27 = objc_msgSend(v17, sel_sectionIdentifier);
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unsigned int v31 = v30;
    }
    else
    {
      unsigned int v31 = (void *)0xE600000000000000;
      uint64_t v29 = 0x29656E6F6E28;
    }
    a2 = v50;
    v40._uint64_t countAndFlagsBits = v29;
    v40._object = v31;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    uint64_t v41 = v48;
    unint64_t v42 = v49;
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v43, v41, v42, 0xD00000000000001CLL, 0x8000000249534300);
    swift_bridgeObjectRelease();

LABEL_27:
    uint64_t v32 = 0;
    unint64_t v38 = 0;
    uint64_t v24 = 0;
    unint64_t v20 = 0;
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

uint64_t CAFAutomakerSettings.allSettings.getter()
{
  uint64_t v1 = v0;
  uint64_t v43 = MEMORY[0x263F8EE78];
  id v2 = objc_msgSend(v0, sel_BOOLeanSettings);
  if (v2)
  {
    id v3 = v2;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFBooleanSetting);
    unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v4 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      unint64_t v5 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      unint64_t v5 = v4;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v5);
  }
  id v6 = objc_msgSend(v1, sel_buttonSettings);
  if (v6)
  {
    uint64_t v7 = v6;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFButtonSetting);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      unint64_t v9 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      unint64_t v9 = v8;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v9);
  }
  id v10 = objc_msgSend(v1, sel_deepLinkSettings);
  if (v10)
  {
    id v11 = v10;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFDeepLinkSetting);
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v12 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      unint64_t v13 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      unint64_t v13 = v12;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v13);
  }
  id v14 = objc_msgSend(v1, sel_floatSettings);
  if (v14)
  {
    id v15 = v14;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFFloatSetting);
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      unint64_t v17 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      unint64_t v17 = v16;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v17);
  }
  id v18 = objc_msgSend(v1, sel_integerSettings);
  if (v18)
  {
    id v19 = v18;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFIntegerSetting);
    unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v20 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      unint64_t v21 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      unint64_t v21 = v20;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v21);
  }
  id v22 = objc_msgSend(v1, sel_multipleSelectSettings);
  if (v22)
  {
    unint64_t v23 = v22;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFMultipleSelectSetting);
    unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v24 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      unint64_t v25 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      unint64_t v25 = v24;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v25);
  }
  id v26 = objc_msgSend(v1, sel_multipleSelectImageSettings);
  if (v26)
  {
    id v27 = v26;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFMultipleSelectImageSetting);
    unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v28 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      unint64_t v29 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      unint64_t v29 = v28;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v29);
  }
  id v30 = objc_msgSend(v1, sel_singleSelectSettings);
  if (v30)
  {
    unsigned int v31 = v30;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSingleSelectSetting);
    unint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v32 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      unint64_t v33 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      unint64_t v33 = v32;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v33);
  }
  id v34 = objc_msgSend(v1, sel_singleSelectImageSettings);
  if (v34)
  {
    unint64_t v35 = v34;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSingleSelectImageSetting);
    unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v36 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      unint64_t v37 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      unint64_t v37 = v36;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v37);
  }
  id v38 = objc_msgSend(v1, sel_staticSettings);
  if (v38)
  {
    uint64_t v39 = v38;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFStaticSetting);
    unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v40 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      unint64_t v41 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      unint64_t v41 = v40;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v41);
  }
  return v43;
}

uint64_t CAFAutomakerSetting.isLimitableUIByAncestor.getter()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &static CAFUIListContentAssociatedObjects.AncestorUILimitable);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast()) {
      return v3;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v5);
  }
  return 0;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **__dst)
{
  unint64_t v4 = __dst;
  unint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v87 = __src;
  int64_t v86 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_68;
    }
    if (__dst != a2 || &a2[v13] <= __dst) {
      memmove(__dst, a2, 8 * v13);
    }
    unint64_t v45 = &v4[v13];
    unint64_t v85 = v45;
    uint64_t v87 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_67:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v87, &v86, &v85);
      return 1;
    }
    uint64_t v46 = (id *)(v5 - 8);
    uint64_t v47 = v6;
    uint64_t v77 = v7;
    int64_t v78 = v4;
    while (1)
    {
      unint64_t v48 = v46 + 1;
      uint64_t v50 = v45 - 1;
      unint64_t v49 = *(v45 - 1);
      uint64_t v52 = *--v47;
      char v51 = v52;
      if (v49 == v52) {
        goto LABEL_57;
      }
      uint64_t v81 = v45;
      id v84 = v6;
      id v53 = v49;
      id v54 = v51;
      unsigned int v55 = objc_msgSend(v53, sel_sortOrder);
      if (v55 == objc_msgSend(v54, sel_sortOrder))
      {
        id v79 = v53;
        id v56 = objc_msgSend(v53, sel_userVisibleLabel);
        uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v59 = v58;

        id v60 = objc_msgSend(v54, sel_userVisibleLabel);
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v62;

        if (v57 == v61 && v59 == v63 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v64 = objc_msgSend(v79, sel_identifier);
          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v67 = v66;

          id v68 = objc_msgSend(v54, sel_identifier);
          uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v71 = v70;

          if (v65 == v69 && v67 == v71)
          {

            swift_bridgeObjectRelease_n();
            uint64_t v7 = v77;
            unint64_t v4 = v78;
            unint64_t v48 = v46 + 1;
            uint64_t v6 = v84;
            unint64_t v45 = v81;
LABEL_57:
            unint64_t v85 = v50;
            if (v48 < v45 || v46 >= v45 || v48 != v45) {
              id *v46 = *v50;
            }
            uint64_t v47 = v6;
            unint64_t v45 = v50;
            if (v6 <= v7) {
              goto LABEL_67;
            }
            goto LABEL_62;
          }
          char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v7 = v77;
          unint64_t v4 = v78;
          unint64_t v48 = v46 + 1;
          uint64_t v6 = v84;
          unint64_t v45 = v81;
          if ((v74 & 1) == 0) {
            goto LABEL_57;
          }
        }
        else
        {
          char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v7 = v77;
          unint64_t v4 = v78;
          unint64_t v48 = v46 + 1;
          uint64_t v6 = v84;
          unint64_t v45 = v81;
          if ((v75 & 1) == 0) {
            goto LABEL_57;
          }
        }
      }
      else
      {
        unsigned int v72 = objc_msgSend(v53, sel_sortOrder);
        unsigned int v73 = objc_msgSend(v54, sel_sortOrder);

        unint64_t v48 = v46 + 1;
        uint64_t v6 = v84;
        unint64_t v45 = v81;
        if (v72 >= v73) {
          goto LABEL_57;
        }
      }
      if (v48 != v6 || v46 >= v6) {
        id *v46 = *v47;
      }
      uint64_t v87 = v47;
      if (v47 <= v7) {
        goto LABEL_67;
      }
LABEL_62:
      --v46;
      uint64_t v6 = v47;
      if (v45 <= v4) {
        goto LABEL_67;
      }
    }
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    id v14 = &v4[v10];
    unint64_t v85 = v14;
    if ((unint64_t)v6 < v5 && v8 >= 8)
    {
      id v15 = &selRef_setOpacity_;
      uint64_t v80 = &v4[v10];
      unint64_t v82 = v5;
      while (1)
      {
        unint64_t v16 = *v4;
        if (*v6 != *v4)
        {
          uint64_t v83 = v6;
          unint64_t v17 = v7;
          id v18 = *v6;
          id v19 = v16;
          unsigned int v20 = [v18 v15[226]];
          if (v20 == [v19 v15[226]])
          {
            unint64_t v21 = v4;
            id v22 = objc_msgSend(v18, sel_userVisibleLabel);
            uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v25 = v24;

            uint64_t v26 = v23;
            id v27 = objc_msgSend(v19, sel_userVisibleLabel);
            uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v30 = v29;

            if (v26 == v28 && v25 == v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v31 = objc_msgSend(v18, sel_identifier);
              uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v34 = v33;

              uint64_t v35 = v34;
              id v36 = objc_msgSend(v19, sel_identifier);
              uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v39 = v38;

              if (v32 == v37 && v35 == v39)
              {

                swift_bridgeObjectRelease_n();
                unint64_t v4 = v21;
                uint64_t v7 = v17;
                unint64_t v5 = v82;
                uint64_t v6 = v83;
                id v14 = v80;
                id v15 = &selRef_setOpacity_;
              }
              else
              {
                char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v4 = v21;
                uint64_t v7 = v17;
                unint64_t v5 = v82;
                uint64_t v6 = v83;
                id v14 = v80;
                id v15 = &selRef_setOpacity_;
                if (v43) {
                  goto LABEL_22;
                }
              }
            }
            else
            {
              unint64_t v4 = v21;
              char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v7 = v17;
              unint64_t v5 = v82;
              uint64_t v6 = v83;
              id v14 = v80;
              id v15 = &selRef_setOpacity_;
              if (v44)
              {
LABEL_22:
                unint64_t v42 = v6 + 1;
                if (v7 < v6 || v7 >= v42 || v7 != v6) {
                  void *v7 = *v6;
                }
                goto LABEL_30;
              }
            }
          }
          else
          {
            unsigned int v40 = [v18 v15[226]];
            unsigned int v41 = [v19 v15[226]];

            uint64_t v7 = v17;
            uint64_t v6 = v83;
            if (v40 < v41) {
              goto LABEL_22;
            }
          }
        }
        if (v7 != v4) {
          void *v7 = *v4;
        }
        int64_t v86 = ++v4;
        unint64_t v42 = v6;
LABEL_30:
        ++v7;
        if (v4 < v14)
        {
          uint64_t v6 = v42;
          if ((unint64_t)v42 < v5) {
            continue;
          }
        }
        uint64_t v87 = v7;
        goto LABEL_67;
      }
    }
    goto LABEL_67;
  }
LABEL_68:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(uint64_t *a1, uint64_t *__src, unint64_t a3, unint64_t *__dst, uint64_t a5)
{
  uint64_t v6 = __dst;
  int64_t v8 = __src;
  uint64_t v9 = (char *)__src - (char *)a1;
  uint64_t v10 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0) {
    uint64_t v10 = (char *)__src - (char *)a1;
  }
  uint64_t v11 = v10 >> 3;
  uint64_t v12 = a3 - (void)__src;
  uint64_t v13 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v13 = a3 - (void)__src;
  }
  uint64_t v14 = v13 >> 3;
  unsigned int v41 = a1;
  unsigned int v40 = __dst;
  __srca = a1;
  if (v11 >= v13 >> 3)
  {
    if (v12 >= -7)
    {
      uint64_t v22 = v5;
      if (__dst != (unint64_t *)__src || &__src[v14] <= (uint64_t *)__dst)
      {
        memmove(__dst, __src, 8 * v14);
        a1 = __srca;
      }
      uint64_t v23 = &v6[v14];
      uint64_t v39 = v23;
      unsigned int v41 = v8;
      if (a1 >= v8 || v12 < 8) {
        goto LABEL_48;
      }
      uint64_t v24 = (uint64_t *)(a3 - 8);
      uint64_t v25 = v8;
      uint64_t v34 = v6;
      while (1)
      {
        unint64_t v27 = (unint64_t)v23;
        uint64_t v28 = v23 - 1;
        uint64_t v38 = *(v23 - 1);
        unint64_t v29 = *--v25;
        unint64_t v37 = v29;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v30 = closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(&v38, &v37, a5);
        if (v22) {
          goto LABEL_47;
        }
        char v31 = v30;
        uint64_t v32 = v24 + 1;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v31)
        {
          if (v32 != v8 || v24 >= v8) {
            uint64_t *v24 = *v25;
          }
          unsigned int v41 = v25;
          uint64_t v22 = 0;
          uint64_t v26 = v34;
          uint64_t v23 = (unint64_t *)v27;
          if (v25 <= __srca) {
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v39 = v28;
          if ((unint64_t)v32 < v27 || (unint64_t)v24 >= v27 || v32 != (uint64_t *)v27) {
            uint64_t *v24 = *v28;
          }
          uint64_t v25 = v8;
          uint64_t v23 = v28;
          uint64_t v22 = 0;
          uint64_t v26 = v34;
          if (v8 <= __srca) {
            goto LABEL_48;
          }
        }
        --v24;
        int64_t v8 = v25;
        if (v23 <= v26) {
          goto LABEL_48;
        }
      }
    }
  }
  else if (v9 >= -7)
  {
    if (__dst != (unint64_t *)a1 || &a1[v11] <= (uint64_t *)__dst)
    {
      memmove(__dst, a1, 8 * v11);
      a1 = __srca;
    }
    id v15 = &v6[v11];
    uint64_t v39 = v15;
    if ((unint64_t)v8 >= a3 || v9 < 8) {
      goto LABEL_48;
    }
    while (1)
    {
      unint64_t v16 = a1;
      uint64_t v38 = *v8;
      unint64_t v17 = v6;
      unint64_t v37 = *v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v18 = closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(&v38, &v37, a5);
      if (v5) {
        break;
      }
      char v19 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19)
      {
        unsigned int v20 = v8 + 1;
        unint64_t v21 = v16;
        if (v16 < v8 || v16 >= v20 || v16 != v8) {
          *unint64_t v16 = *v8;
        }
        uint64_t v6 = v17;
      }
      else
      {
        unint64_t v21 = v16;
        if (v16 != (uint64_t *)v17) {
          *unint64_t v16 = *v17;
        }
        uint64_t v6 = v17 + 1;
        unsigned int v40 = v17 + 1;
        unsigned int v20 = v8;
      }
      a1 = v21 + 1;
      unsigned int v41 = a1;
      if (v6 < v15)
      {
        int64_t v8 = v20;
        if ((unint64_t)v20 < a3) {
          continue;
        }
      }
      goto LABEL_48;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v41, (const void **)&v40, &v39);
    outlined release of CAFUISettingsCache(a5);
    return 1;
  }
  outlined release of CAFUISettingsCache(a5);
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;
  uint64_t vars8;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x24C59FBB0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  uint64_t v3 = v2 + 64;
  unint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    BOOL v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [CAFAutomakerSetting]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CAFAutomakerSetting>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [CAFAutomakerSetting]>);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CAFAutomakerSetting>);
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  char v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  int64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x24C59FC50](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)int64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  int64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x24C59FC50](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)int64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  Swift::Int v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v4 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v4 + 8 * v10);
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v4 + 8 * v10);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    int64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v14, v15, v16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v8) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v4 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v4 + 8 * v10);
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v4 + 8 * v10);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    int64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    a2(v14, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v8) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(void *)(a2 + 16))
      {
        uint64_t v7 = *(v6 - 1);
        uint64_t v8 = *v6;
        swift_bridgeObjectRetain_n();
        unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
        if (v10)
        {
          id v11 = *(id *)(*(void *)(a2 + 56) + 8 * v9);
          uint64_t v12 = swift_bridgeObjectRelease_n();
          MEMORY[0x24C59F700](v12);
          if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo16CAFStaticSettingCG_SS_SaySo012CAFAutomakerE0CGts5NeverOTg5056_s5CAFUI18CAFUISettingsCacheV8settings8sectionsACSaySo19fe46CG_SaySo18CAFSettingsSectionCGSgtcfcSS_AHtSo09D9G0CXEfU3_SDySSAJGTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    if (!v4) {
      return v5;
    }
    uint64_t v23 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      break;
    }
    unint64_t v22 = v3;
    uint64_t v7 = 0;
    uint64_t v5 = v23;
    unint64_t v21 = v3 & 0xC000000000000001;
    while (v4 != v7)
    {
      if (v21) {
        id v8 = (id)MEMORY[0x24C59FC50](v7, v3);
      }
      else {
        id v8 = *(id *)(v3 + 8 * v7 + 32);
      }
      unint64_t v9 = v8;
      id v10 = objc_msgSend(v8, sel_identifier);
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      id v14 = objc_msgSend(v9, sel_childrenSettingsIdentifiers);
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        swift_bridgeObjectRetain();
        uint64_t v17 = specialized Sequence.compactMap<A>(_:)(v16, a2);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {

        uint64_t v17 = MEMORY[0x263F8EE78];
      }
      unint64_t v19 = *(void *)(v23 + 16);
      unint64_t v18 = *(void *)(v23 + 24);
      if (v19 >= v18 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      }
      ++v7;
      *(void *)(v23 + 16) = v19 + 1;
      uint64_t v20 = (void *)(v23 + 24 * v19);
      v20[4] = v11;
      v20[5] = v13;
      v20[6] = v17;
      unint64_t v3 = v22;
      if (v4 == v7) {
        return v5;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySaySo19CAFAutomakerSettingCGG_5CAFUI29CAFUIAutomakerSettingsSectionVs5NeverOTg5087_s5CAFUI18CAFUISettingsCacheV8sections33_C136C7576C945FF13298128793D0FFCELL3for13parente7SayAA29ghi10VGSaySo012D20M0CG_ALSgtFAiMXEfU2_AJ0mN0VAGSgTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v25 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v25;
    for (uint64_t i = (uint64_t *)(a1 + 32); ; ++i)
    {
      uint64_t v20 = *i;
      swift_bridgeObjectRetain();
      closure #4 in CAFUISettingsCache.sections(for:parentSetting:)(&v20, a3, (uint64_t *)&v21);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      long long v9 = v21;
      long long v10 = v22;
      uint64_t v12 = v23;
      uint64_t v11 = v24;
      uint64_t v25 = v6;
      unint64_t v14 = *(void *)(v6 + 16);
      unint64_t v13 = *(void *)(v6 + 24);
      if (v14 >= v13 >> 1)
      {
        long long v17 = v22;
        long long v18 = v21;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        long long v10 = v17;
        long long v9 = v18;
        uint64_t v6 = v25;
      }
      *(void *)(v6 + 16) = v14 + 1;
      uint64_t v15 = v6 + 48 * v14;
      *(_OWORD *)(v15 + 32) = v9;
      *(_OWORD *)(v15 + 48) = v10;
      *(void *)(v15 + 64) = v12;
      *(void *)(v15 + 72) = v11;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    uint64_t v8 = result;
    uint64_t v9 = *a4;
    long long v10 = (unint64_t *)(*a4 + 8 * a3 - 8);
    uint64_t v14 = result;
LABEL_4:
    uint64_t v11 = *(void *)(v9 + 8 * v7);
    uint64_t v16 = v10;
    while (1)
    {
      uint64_t v18 = v11;
      unint64_t v17 = *v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v12 = closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(&v18, &v17, a5);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v5) {
        break;
      }
      if (v12)
      {
        if (!v9)
        {
          __break(1u);
          return result;
        }
        unint64_t v13 = *v10;
        uint64_t v11 = v10[1];
        unint64_t *v10 = v11;
        v10[1] = v13;
        --v10;
        if (v7 != ++v8) {
          continue;
        }
      }
      ++v7;
      long long v10 = v16 + 1;
      uint64_t v8 = v14;
      if (v7 != a2) {
        goto LABEL_4;
      }
      return result;
    }
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  Swift::Int v4 = a1[1];
  outlined retain of CAFUISettingsCache(a2);
  outlined retain of CAFUISettingsCache(v3);
  uint64_t v182 = v3;
  outlined retain of CAFUISettingsCache(v3);
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_220;
    }
    if (v4)
    {
      outlined retain of CAFUISettingsCache(v3);
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, v3);
      outlined release of CAFUISettingsCache(v3);
    }
    else
    {
LABEL_193:
      uint64_t v3 = v182;
    }
    outlined release of CAFUISettingsCache(v3);
    outlined release of CAFUISettingsCache(v3);
    return outlined release of CAFUISettingsCache(v3);
  }
  Swift::Int v169 = v5;
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_229;
  }
  uint64_t v179 = v2;
  if (v4 < 2)
  {
    __dst = (unint64_t *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v170 = MEMORY[0x263F8EE78];
    if (v4 == 1) {
      goto LABEL_12;
    }
    unint64_t v31 = *(void *)(MEMORY[0x263F8EE78] + 16);
    char v12 = (char *)MEMORY[0x263F8EE78];
    uint64_t v9 = v3;
LABEL_179:
    if (v31 >= 2)
    {
      uint64_t v154 = *a1;
      uint64_t v193 = *a1;
      do
      {
        unint64_t v155 = v31 - 2;
        if (v31 < 2) {
          goto LABEL_215;
        }
        if (!v154) {
          goto LABEL_228;
        }
        UIImage_optional v156 = v12;
        uint64_t v157 = *(void *)&v12[16 * v155 + 32];
        uint64_t v158 = *(void *)&v12[16 * v31 + 24];
        id v196 = (uint64_t *)(v154 + 8 * v157);
        id v159 = (uint64_t *)(v154 + 8 * *(void *)&v12[16 * v31 + 16]);
        unint64_t v160 = v154 + 8 * v158;
        outlined retain of CAFUISettingsCache(v182);
        specialized _merge<A>(low:mid:high:buffer:by:)(v196, v159, v160, __dst, v182);
        if (v179) {
          goto LABEL_192;
        }
        if (v158 < v157) {
          goto LABEL_216;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          UIImage_optional v156 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v156);
        }
        if (v155 >= *((void *)v156 + 2)) {
          goto LABEL_217;
        }
        id v161 = v156 + 32;
        id v162 = v156;
        Class v163 = &v156[16 * v155 + 32];
        *(void *)Class v163 = v157;
        *((void *)v163 + 1) = v158;
        unint64_t v164 = *((void *)v156 + 2);
        if (v31 > v164) {
          goto LABEL_218;
        }
        memmove(&v161[16 * v31 - 16], &v161[16 * v31], 16 * (v164 - v31));
        char v12 = v162;
        *((void *)v162 + 2) = v164 - 1;
        unint64_t v31 = v164 - 1;
        uint64_t v9 = v182;
        uint64_t v154 = v193;
      }
      while (v164 > 2);
    }
    uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    *(void *)(v170 + 16) = 0;
    swift_bridgeObjectRelease();
    outlined release of CAFUISettingsCache(v9);
    outlined release of CAFUISettingsCache(v9);
    return outlined release of CAFUISettingsCache(v3);
  }
  uint64_t v7 = v6 >> 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerSetting]);
  uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v8 + 16) = v7;
  uint64_t v170 = v8;
  __dst = (unint64_t *)(v8 + 32);
LABEL_12:
  uint64_t v9 = v182;
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v167 = *a1 - 8;
  uint64_t v168 = *a1 + 16;
  char v12 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v176 = v4;
  uint64_t v181 = *a1;
  while (1)
  {
    id v177 = v12;
    Swift::Int v13 = v10;
    Swift::Int v14 = v10 + 1;
    Swift::Int v180 = v10;
    if (v10 + 1 < v4)
    {
      uint64_t v15 = *(void *)(v11 + 8 * v14);
      unint64_t v197 = *(void *)(v11 + 8 * v10);
      v198[0] = v15;
      Swift::Int v16 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v17 = closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(v198, &v197, v9);
      if (v179)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_192:
        swift_bridgeObjectRelease();
        *(void *)(v170 + 16) = 0;
        swift_bridgeObjectRelease();
        goto LABEL_193;
      }
      int v18 = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::Int v14 = v16 + 2;
      Swift::Int v4 = v176;
      Swift::Int v13 = v16;
      if (v16 + 2 < v176)
      {
        unint64_t v19 = (uint64_t *)(v168 + 8 * v16);
        while (1)
        {
          uint64_t v20 = *v19;
          unint64_t v197 = *(v19 - 1);
          v198[0] = v20;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          int v21 = closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(v198, &v197, v182);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 ^ v21)) {
            break;
          }
          ++v14;
          ++v19;
          Swift::Int v4 = v176;
          if (v176 == v14)
          {
            Swift::Int v14 = v176;
            goto LABEL_21;
          }
        }
        Swift::Int v4 = v176;
LABEL_21:
        Swift::Int v13 = v180;
      }
      uint64_t v11 = v181;
      if (v18)
      {
        if (v14 < v13) {
          goto LABEL_224;
        }
        Swift::Int v22 = v14;
        if (v13 < v14)
        {
          uint64_t v23 = (uint64_t *)(v167 + 8 * v14);
          Swift::Int v24 = v13;
          uint64_t v25 = (uint64_t *)(v181 + 8 * v13);
          do
          {
            if (v24 != --v22)
            {
              if (!v181) {
                goto LABEL_227;
              }
              uint64_t v26 = *v25;
              *uint64_t v25 = *v23;
              uint64_t *v23 = v26;
            }
            ++v24;
            --v23;
            ++v25;
          }
          while (v24 < v22);
        }
      }
    }
    Swift::Int v27 = v14;
    if (v14 >= v4) {
      goto LABEL_42;
    }
    if (__OFSUB__(v14, v13)) {
      goto LABEL_221;
    }
    if (v14 - v13 >= v169)
    {
      Swift::Int v27 = v14;
LABEL_42:
      if (v27 < v13) {
        goto LABEL_219;
      }
      goto LABEL_43;
    }
    if (__OFADD__(v13, v169)) {
      goto LABEL_222;
    }
    Swift::Int v28 = v13 + v169 >= v4 ? v4 : v13 + v169;
    if (v28 < v13) {
      break;
    }
    Swift::Int v27 = v14;
    Swift::Int v171 = v28;
    if (v14 == v28) {
      goto LABEL_42;
    }
    while (2)
    {
      unint64_t v84 = *(void *)(v11 + 8 * v27);
      Swift::Int v174 = v27;
      do
      {
        Swift::Int v184 = v27;
        Swift::Int v85 = v27 - 1;
        unint64_t v185 = *(void *)(v11 + 8 * (v27 - 1));
        unint64_t v186 = v84;
        if (v84 >> 62)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          Swift::Int v183 = v85;
          if (!_CocoaArrayWrapper.endIndex.getter())
          {
LABEL_122:
            swift_bridgeObjectRelease();
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t v86 = *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          Swift::Int v183 = v85;
          if (!v86) {
            goto LABEL_122;
          }
        }
        if ((v186 & 0xC000000000000001) != 0)
        {
          id v87 = (id)MEMORY[0x24C59FC50](0, v186);
        }
        else
        {
          if (!*(void *)((v186 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_198;
          }
          id v87 = *(id *)(v186 + 32);
        }
        v195 = v87;
        swift_bridgeObjectRelease();
        if (v185 >> 62)
        {
          swift_bridgeObjectRetain();
          if (!_CocoaArrayWrapper.endIndex.getter())
          {
LABEL_125:
            swift_bridgeObjectRelease();

LABEL_126:
            swift_bridgeObjectRelease_n();
LABEL_127:
            Swift::Int v83 = v180;
            uint64_t v11 = v181;
            Swift::Int v110 = v184;
            goto LABEL_128;
          }
        }
        else
        {
          uint64_t v88 = *(void *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v88) {
            goto LABEL_125;
          }
        }
        if ((v185 & 0xC000000000000001) != 0)
        {
          id v89 = (id)MEMORY[0x24C59FC50](0, v185);
        }
        else
        {
          if (!*(void *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_199;
          }
          id v89 = *(id *)(v185 + 32);
        }
        v192 = v89;
        swift_bridgeObjectRelease();
        unint64_t v90 = *(void *)(v182 + 48);
        unint64_t v199 = v90;
        unint64_t v91 = v90 >> 62;
        if (v90 >> 62)
        {
          swift_bridgeObjectRetain();
          outlined retain of [CAFSettingsSection]((uint64_t)&v199);
          id v112 = v195;
          uint64_t v92 = _CocoaArrayWrapper.endIndex.getter();
          if (!v92)
          {
LABEL_133:
            outlined release of [CAFSettingsSection]((uint64_t)&v199);

            uint64_t v109 = 0;
            goto LABEL_134;
          }
        }
        else
        {
          uint64_t v92 = *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          outlined retain of [CAFSettingsSection]((uint64_t)&v199);
          id v93 = v195;
          if (!v92) {
            goto LABEL_133;
          }
        }
        uint64_t v94 = 4;
        while (1)
        {
          if ((v90 & 0xC000000000000001) != 0) {
            id v95 = (id)MEMORY[0x24C59FC50](v94 - 4, v90);
          }
          else {
            id v95 = *(id *)(v90 + 8 * v94);
          }
          long long v96 = v95;
          uint64_t v97 = v94 - 3;
          if (__OFADD__(v94 - 4, 1))
          {
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
LABEL_222:
            __break(1u);
            goto LABEL_223;
          }
          id v98 = objc_msgSend(v95, sel_identifier);
          uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v101 = v100;

          id v102 = objc_msgSend(v195, sel_sectionIdentifier);
          if (v102) {
            break;
          }

          swift_bridgeObjectRelease();
LABEL_108:
          ++v94;
          if (v97 == v92)
          {
            outlined release of [CAFSettingsSection]((uint64_t)&v199);

            uint64_t v109 = 0;
            unint64_t v91 = v90 >> 62;
            goto LABEL_134;
          }
        }
        unint64_t v103 = v102;
        id v189 = v96;
        uint64_t v104 = v92;
        uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v107 = v106;

        if (v99 != v105 || v101 != v107)
        {
          char v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v108) {
            goto LABEL_120;
          }

          uint64_t v92 = v104;
          goto LABEL_108;
        }
        swift_bridgeObjectRelease_n();
LABEL_120:
        outlined release of [CAFSettingsSection]((uint64_t)&v199);

        unint64_t v91 = v90 >> 62;
        uint64_t v109 = v189;
LABEL_134:
        outlined release of [CAFSettingsSection]((uint64_t)&v199);
        if (!v91)
        {
          uint64_t v113 = *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          outlined retain of [CAFSettingsSection]((uint64_t)&v199);
          id v114 = v192;
          if (v113) {
            goto LABEL_136;
          }
LABEL_149:
          outlined release of [CAFSettingsSection]((uint64_t)&v199);

          long long v118 = 0;
          goto LABEL_154;
        }
        swift_bridgeObjectRetain();
        outlined retain of [CAFSettingsSection]((uint64_t)&v199);
        id v130 = v192;
        uint64_t v113 = _CocoaArrayWrapper.endIndex.getter();
        if (!v113) {
          goto LABEL_149;
        }
LABEL_136:
        unint64_t v188 = v90 & 0xC000000000000001;
        v190 = v109;
        uint64_t v115 = 4;
        unint64_t v187 = v90;
        while (2)
        {
          if (v188) {
            id v117 = (id)MEMORY[0x24C59FC50](v115 - 4, v90);
          }
          else {
            id v117 = *(id *)(v90 + 8 * v115);
          }
          long long v118 = v117;
          uint64_t v119 = v115 - 3;
          if (__OFADD__(v115 - 4, 1)) {
            goto LABEL_197;
          }
          id v120 = objc_msgSend(v117, sel_identifier);
          uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v123 = v122;

          id v124 = objc_msgSend(v192, sel_sectionIdentifier);
          if (!v124)
          {

            swift_bridgeObjectRelease();
            goto LABEL_138;
          }
          Swift::Int v125 = v124;
          uint64_t v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v128 = v127;

          if (v121 != v126 || v123 != v128)
          {
            char v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v129) {
              goto LABEL_152;
            }

LABEL_138:
            ++v115;
            BOOL v116 = v119 == v113;
            unint64_t v90 = v187;
            if (v116)
            {
              outlined release of [CAFSettingsSection]((uint64_t)&v199);

              long long v118 = 0;
              goto LABEL_153;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease_n();
LABEL_152:
        outlined release of [CAFSettingsSection]((uint64_t)&v199);

LABEL_153:
        uint64_t v109 = v190;
LABEL_154:
        outlined release of [CAFSettingsSection]((uint64_t)&v199);
        if (!v109)
        {
          if (v118)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            id v145 = objc_msgSend(v195, sel_identifier);
            uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v148 = v147;

            id v149 = objc_msgSend(v192, sel_identifier);
            uint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v152 = v151;

            if (v150 != v146 || v152 != v148)
            {
              char v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              goto LABEL_170;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();

LABEL_168:
          }
          goto LABEL_127;
        }
        if (!v118)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          Swift::Int v83 = v180;
          uint64_t v11 = v181;
          break;
        }
        id v131 = v109;
        id v132 = v118;
        unsigned int v133 = objc_msgSend(v131, sel_sortOrder);
        if (v133 != objc_msgSend(v132, sel_sortOrder))
        {
          unsigned int v142 = objc_msgSend(v131, sel_sortOrder);
          unsigned int v143 = objc_msgSend(v132, sel_sortOrder);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          Swift::Int v83 = v180;
          uint64_t v11 = v181;
          Swift::Int v110 = v184;
          if (v142 >= v143) {
            break;
          }
          goto LABEL_128;
        }
        id v134 = objc_msgSend(v131, sel_identifier);
        uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v137 = v136;

        id v138 = objc_msgSend(v132, sel_identifier);
        uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v141 = v140;

        if (v139 == v135 && v141 == v137)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();

          goto LABEL_168;
        }
        char v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_170:
        Swift::Int v83 = v180;
        uint64_t v11 = v181;
        Swift::Int v110 = v184;
        if (v144) {
          break;
        }
LABEL_128:
        if (!v11) {
          goto LABEL_225;
        }
        uint64_t v111 = 8 * v110;
        unint64_t v84 = *(void *)(v11 + v111);
        *(void *)(v11 + v111) = *(void *)(v11 + 8 * v183);
        *(void *)(v11 + 8 * v183) = v84;
        Swift::Int v27 = v183;
      }
      while (v183 != v83);
      Swift::Int v27 = v174 + 1;
      if (v174 + 1 != v171) {
        continue;
      }
      break;
    }
    Swift::Int v27 = v171;
    if (v171 < v83) {
      goto LABEL_219;
    }
LABEL_43:
    Swift::Int v173 = v27;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      char v12 = v177;
    }
    else {
      char v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v177 + 2) + 1, 1, v177);
    }
    unint64_t v30 = *((void *)v12 + 2);
    unint64_t v29 = *((void *)v12 + 3);
    unint64_t v31 = v30 + 1;
    uint64_t v11 = v181;
    uint64_t v9 = v182;
    Swift::Int v4 = v176;
    if (v30 >= v29 >> 1)
    {
      id v153 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v12);
      uint64_t v11 = v181;
      uint64_t v9 = v182;
      char v12 = v153;
    }
    *((void *)v12 + 2) = v31;
    uint64_t v32 = v12 + 32;
    uint64_t v33 = &v12[16 * v30 + 32];
    *(void *)uint64_t v33 = v180;
    *((void *)v33 + 1) = v173;
    if (v30)
    {
      uint64_t v178 = v12;
      while (1)
      {
        unint64_t v34 = v31 - 1;
        if (v31 >= 4)
        {
          uint64_t v39 = &v32[16 * v31];
          uint64_t v40 = *((void *)v39 - 8);
          uint64_t v41 = *((void *)v39 - 7);
          BOOL v45 = __OFSUB__(v41, v40);
          uint64_t v42 = v41 - v40;
          if (v45) {
            goto LABEL_204;
          }
          uint64_t v44 = *((void *)v39 - 6);
          uint64_t v43 = *((void *)v39 - 5);
          BOOL v45 = __OFSUB__(v43, v44);
          uint64_t v37 = v43 - v44;
          char v38 = v45;
          if (v45) {
            goto LABEL_205;
          }
          unint64_t v46 = v31 - 2;
          uint64_t v47 = &v32[16 * v31 - 32];
          uint64_t v49 = *(void *)v47;
          uint64_t v48 = *((void *)v47 + 1);
          BOOL v45 = __OFSUB__(v48, v49);
          uint64_t v50 = v48 - v49;
          if (v45) {
            goto LABEL_207;
          }
          BOOL v45 = __OFADD__(v37, v50);
          uint64_t v51 = v37 + v50;
          if (v45) {
            goto LABEL_210;
          }
          if (v51 >= v42)
          {
            uint64_t v69 = &v32[16 * v34];
            uint64_t v71 = *(void *)v69;
            uint64_t v70 = *((void *)v69 + 1);
            BOOL v45 = __OFSUB__(v70, v71);
            uint64_t v72 = v70 - v71;
            if (v45) {
              goto LABEL_214;
            }
            BOOL v62 = v37 < v72;
            goto LABEL_80;
          }
        }
        else
        {
          if (v31 != 3)
          {
            uint64_t v63 = *((void *)v12 + 4);
            uint64_t v64 = *((void *)v12 + 5);
            BOOL v45 = __OFSUB__(v64, v63);
            uint64_t v56 = v64 - v63;
            char v57 = v45;
            goto LABEL_74;
          }
          uint64_t v36 = *((void *)v12 + 4);
          uint64_t v35 = *((void *)v12 + 5);
          BOOL v45 = __OFSUB__(v35, v36);
          uint64_t v37 = v35 - v36;
          char v38 = v45;
        }
        if (v38) {
          goto LABEL_206;
        }
        unint64_t v46 = v31 - 2;
        uint64_t v52 = &v32[16 * v31 - 32];
        uint64_t v54 = *(void *)v52;
        uint64_t v53 = *((void *)v52 + 1);
        BOOL v55 = __OFSUB__(v53, v54);
        uint64_t v56 = v53 - v54;
        char v57 = v55;
        if (v55) {
          goto LABEL_209;
        }
        uint64_t v58 = &v32[16 * v34];
        uint64_t v60 = *(void *)v58;
        uint64_t v59 = *((void *)v58 + 1);
        BOOL v45 = __OFSUB__(v59, v60);
        uint64_t v61 = v59 - v60;
        if (v45) {
          goto LABEL_212;
        }
        if (__OFADD__(v56, v61)) {
          goto LABEL_213;
        }
        if (v56 + v61 >= v37)
        {
          BOOL v62 = v37 < v61;
LABEL_80:
          if (v62) {
            unint64_t v34 = v46;
          }
          goto LABEL_82;
        }
LABEL_74:
        if (v57) {
          goto LABEL_208;
        }
        uint64_t v65 = &v32[16 * v34];
        uint64_t v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        BOOL v45 = __OFSUB__(v66, v67);
        uint64_t v68 = v66 - v67;
        if (v45) {
          goto LABEL_211;
        }
        if (v68 < v56)
        {
          uint64_t v9 = v182;
          char v12 = v178;
          goto LABEL_172;
        }
LABEL_82:
        unint64_t v73 = v34 - 1;
        uint64_t v74 = v182;
        if (v34 - 1 >= v31) {
          goto LABEL_200;
        }
        if (!v11) {
          goto LABEL_226;
        }
        char v75 = &v32[16 * v73];
        uint64_t v76 = *(void *)v75;
        unint64_t v77 = v34;
        int64_t v78 = &v32[16 * v34];
        uint64_t v79 = *((void *)v78 + 1);
        uint64_t v80 = (uint64_t *)(v11 + 8 * *(void *)v78);
        unint64_t v191 = v11 + 8 * v79;
        v194 = (uint64_t *)(v11 + 8 * *(void *)v75);
        outlined retain of CAFUISettingsCache(v182);
        specialized _merge<A>(low:mid:high:buffer:by:)(v194, v80, v191, __dst, v182);
        if (v179) {
          goto LABEL_192;
        }
        if (v79 < v76) {
          goto LABEL_201;
        }
        if (v77 > *((void *)v178 + 2)) {
          goto LABEL_202;
        }
        unint64_t v81 = v77;
        *(void *)char v75 = v76;
        *(void *)&v32[16 * v73 + 8] = v79;
        unint64_t v82 = *((void *)v178 + 2);
        if (v81 >= v82) {
          goto LABEL_203;
        }
        uint64_t v179 = 0;
        unint64_t v31 = v82 - 1;
        memmove(v78, v78 + 16, 16 * (v82 - 1 - v81));
        char v12 = v178;
        *((void *)v178 + 2) = v82 - 1;
        BOOL v62 = v82 > 2;
        uint64_t v11 = v181;
        uint64_t v9 = v182;
        Swift::Int v4 = v176;
        if (!v62) {
          goto LABEL_172;
        }
      }
    }
    unint64_t v31 = 1;
LABEL_172:
    Swift::Int v10 = v173;
    if (v173 >= v4) {
      goto LABEL_179;
    }
  }
LABEL_223:
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  uint64_t v74 = outlined release of CAFUISettingsCache(v182);
  __break(1u);
LABEL_226:
  uint64_t v166 = v74;
  outlined release of CAFUISettingsCache(v74);
  outlined release of CAFUISettingsCache(v166);
  outlined release of CAFUISettingsCache(v166);
  __break(1u);
LABEL_227:
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  __break(1u);
LABEL_228:
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  __break(1u);
LABEL_229:
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(void **a1, uint64_t a2)
{
  Swift::Int v4 = *a1;
  outlined retain of CAFUISettingsCache(a2);
  outlined retain of CAFUISettingsCache(a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::Int v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  outlined retain of CAFUISettingsCache(a2);
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  outlined release of CAFUISettingsCache(a2);
  *a1 = v4;
  outlined release of CAFUISettingsCache(a2);
  return outlined release of CAFUISettingsCache(a2);
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = a1;
  uint64_t v21 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_27;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v18 = v4;
    unint64_t v6 = 0;
    unint64_t v7 = v4 & 0xC000000000000001;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    uint64_t v9 = (char **)(v4 + 32);
    unint64_t v4 = (unint64_t)&selRef_setOpacity_;
    unint64_t v19 = v9;
    while (1)
    {
      if (v7)
      {
        Swift::Int v10 = (char *)MEMORY[0x24C59FC50](v6, v18);
      }
      else
      {
        if (v6 >= *(void *)(v8 + 16)) {
          goto LABEL_25;
        }
        Swift::Int v10 = v9[v6];
      }
      uint64_t v11 = v10;
      if (__OFADD__(v6++, 1)) {
        goto LABEL_26;
      }
      unsigned int v13 = objc_msgSend(v10, sel_category);
      uint64_t v14 = *(void *)(a2 + 16);
      if (!v14) {
        goto LABEL_4;
      }
      if (*(unsigned __int8 *)(a2 + 32) != v13) {
        break;
      }
LABEL_12:
      if ((a3 & 1) == 0
        || !objc_msgSend(v11, sel_hasHidden)
        || (objc_msgSend(v11, sel_hidden) & 1) == 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v9 = v19;
        goto LABEL_5;
      }
LABEL_4:

LABEL_5:
      if (v6 == i) {
        return v21;
      }
    }
    if (v14 == 1) {
      goto LABEL_4;
    }
    uint64_t v15 = 33;
    while (1)
    {
      uint64_t v16 = v15 - 31;
      if (__OFADD__(v15 - 32, 1)) {
        break;
      }
      if (*(unsigned __int8 *)(a2 + v15) == v13) {
        goto LABEL_12;
      }
      ++v15;
      if (v16 == v14) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    ;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v32 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_47;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v26 = v3;
    unint64_t v5 = 0;
    unint64_t v6 = v3 & 0xC000000000000001;
    uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8;
    uint64_t v8 = v3 + 32;
    uint64_t v30 = v3 & 0xFFFFFFFFFFFFFF8;
    unint64_t v31 = a2 & 0xC000000000000001;
    unint64_t v27 = v3 & 0xC000000000000001;
    uint64_t v28 = i;
    uint64_t v29 = v3 + 32;
    while (1)
    {
      if (v6)
      {
        id v9 = (id)MEMORY[0x24C59FC50](v5, v26);
      }
      else
      {
        if (v5 >= *(void *)(v7 + 16))
        {
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        id v9 = *(id *)(v8 + 8 * v5);
      }
      Swift::Int v10 = v9;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_44;
      }
      id v12 = objc_msgSend(v9, sel_prominenceInfo);

      if (!v12) {
        goto LABEL_4;
      }
      if (a2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
        if (!v13)
        {
LABEL_39:
          swift_bridgeObjectRelease();
LABEL_40:
          uint64_t v3 = (uint64_t)&v32;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v13 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v13) {
          goto LABEL_39;
        }
      }
      id v14 = v31 ? (id)MEMORY[0x24C59FC50](0, a2) : *(id *)(a2 + 32);
      uint64_t v15 = v14;
      uint64_t v3 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      char v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_32:
      uint64_t v8 = v29;
      uint64_t v7 = v30;
      swift_getObjectType();
      if (swift_conformsToProtocol2()) {
        Swift::Int v24 = v10;
      }
      else {
        Swift::Int v24 = 0;
      }
      if (!v24) {
        goto LABEL_40;
      }
LABEL_4:

LABEL_5:
      if (v5 == i) {
        return v32;
      }
    }
    if (v13 == 1)
    {
      swift_bridgeObjectRelease();
LABEL_30:
      uint64_t v8 = v29;
      uint64_t v7 = v30;
      goto LABEL_40;
    }
    if (v31)
    {
      uint64_t v17 = 1;
      while (1)
      {
        MEMORY[0x24C59FC50](v17, a2);
        uint64_t v18 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_45;
        }
        char v19 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        if (v19) {
          goto LABEL_31;
        }
        ++v17;
        if (v18 == v13) {
          goto LABEL_29;
        }
      }
    }
    uint64_t v20 = 5;
    while (1)
    {
      uint64_t v21 = v20 - 3;
      if (__OFADD__(v20 - 4, 1)) {
        break;
      }
      id v22 = *(id *)(a2 + 8 * v20);
      char v23 = static NSObject.== infix(_:_:)();

      if (v23)
      {
LABEL_31:
        swift_bridgeObjectRelease();
        unint64_t v6 = v27;
        uint64_t i = v28;
        goto LABEL_32;
      }
      ++v20;
      if (v21 == v13)
      {
LABEL_29:
        swift_bridgeObjectRelease();
        unint64_t v6 = v27;
        uint64_t i = v28;
        goto LABEL_30;
      }
    }
LABEL_46:
    __break(1u);
LABEL_47:
    ;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, void *a2)
{
  unint64_t v3 = a1;
  uint64_t v26 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_36;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v20 = v3;
    unint64_t v5 = 0;
    uint64_t v23 = v3 & 0xFFFFFFFFFFFFFF8;
    unint64_t v24 = v3 & 0xC000000000000001;
    uint64_t v21 = a2 + 7;
    id v22 = (void *)(v3 + 32);
    while (1)
    {
      if (v24)
      {
        id v6 = (id)MEMORY[0x24C59FC50](v5, v20);
      }
      else
      {
        if (v5 >= *(void *)(v23 + 16))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        id v6 = (id)v22[v5];
      }
      uint64_t v7 = v6;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_34;
      }
      id v9 = objc_msgSend(v6, sel_vehicleLayoutKey);
      if (!v9) {
        goto LABEL_5;
      }
      Swift::Int v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v3 = (unint64_t)v12;

      uint64_t v25 = a2[2];
      if (v25)
      {
        BOOL v13 = a2[4] == v11 && a2[5] == v3;
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {

          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        if (v25 != 1) {
          break;
        }
      }
LABEL_4:
      swift_bridgeObjectRelease();
LABEL_5:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t v3 = (unint64_t)&v26;
      specialized ContiguousArray._endMutation()();
LABEL_6:
      if (v5 == i) {
        return v26;
      }
    }
    id v14 = v21;
    uint64_t v15 = 1;
    while (1)
    {
      char v16 = a2;
      a2 = (void *)i;
      uint64_t v17 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        break;
      }
      BOOL v18 = *(v14 - 1) == v11 && *v14 == v3;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {

        swift_bridgeObjectRelease();
        uint64_t i = (uint64_t)a2;
        a2 = v16;
        goto LABEL_6;
      }
      v14 += 2;
      ++v15;
      BOOL v13 = v17 == v25;
      uint64_t i = (uint64_t)a2;
      a2 = v16;
      if (v13) {
        goto LABEL_4;
      }
    }
LABEL_35:
    __break(1u);
LABEL_36:
    ;
  }
  return MEMORY[0x263F8EE78];
}

void *specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *result, char a2, void *a3)
{
  uint64_t v3 = result[2];
  if (v3)
  {
    id v6 = result;
    uint64_t v8 = result[4];
    uint64_t v7 = result[5];
    id v9 = (void *)result[6];
    Swift::Int v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    id v45 = v9;
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    char v16 = v11;
    if (v10[3] < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_28:
        uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v12 = v17;
      char v19 = (void *)*a3;
      if ((v16 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      swift_bridgeObjectRelease();
      uint64_t v20 = v19[7];

      *(void *)(v20 + 8 * v12) = v45;
      uint64_t v21 = v3 - 1;
      if (v3 == 1) {
        return (void *)swift_bridgeObjectRelease();
      }
LABEL_16:
      for (uint64_t i = (void **)(v6 + 9); ; i += 3)
      {
        uint64_t v29 = (uint64_t)*(i - 2);
        uint64_t v28 = (uint64_t)*(i - 1);
        uint64_t v30 = *i;
        unint64_t v31 = (void *)*a3;
        swift_bridgeObjectRetain();
        id v32 = v30;
        unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        uint64_t v35 = v31[2];
        BOOL v36 = (v33 & 1) == 0;
        uint64_t v37 = v35 + v36;
        if (__OFADD__(v35, v36)) {
          break;
        }
        char v38 = v33;
        if (v31[3] < v37)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
          unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
          if ((v38 & 1) != (v40 & 1)) {
            goto LABEL_28;
          }
          unint64_t v34 = v39;
        }
        uint64_t v41 = (void *)*a3;
        if (v38)
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = v41[7];

          *(void *)(v27 + 8 * v34) = v32;
        }
        else
        {
          v41[(v34 >> 6) + 8] |= 1 << v34;
          uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
          *uint64_t v42 = v29;
          v42[1] = v28;
          *(void *)(v41[7] + 8 * v34) = v32;
          uint64_t v43 = v41[2];
          BOOL v24 = __OFADD__(v43, 1);
          uint64_t v44 = v43 + 1;
          if (v24) {
            goto LABEL_27;
          }
          v41[2] = v44;
        }
        if (!--v21) {
          return (void *)swift_bridgeObjectRelease();
        }
      }
      goto LABEL_26;
    }
    if (a2)
    {
      char v19 = (void *)*a3;
      if (v11) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      char v19 = (void *)*a3;
      if (v16) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    id v22 = (uint64_t *)(v19[6] + 16 * v12);
    uint64_t *v22 = v8;
    v22[1] = v7;
    *(void *)(v19[7] + 8 * v12) = v45;
    uint64_t v23 = v19[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v19[2] = v25;
    uint64_t v21 = v3 - 1;
    if (v3 == 1) {
      return (void *)swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  uint64_t v3 = result[2];
  if (v3)
  {
    id v6 = result;
    uint64_t v8 = result[4];
    uint64_t v7 = result[5];
    id v9 = result[6];
    Swift::Int v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    char v16 = v11;
    if (v10[3] < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_28:
        uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v12 = v17;
      char v19 = (void *)*a3;
      if ((v16 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      swift_bridgeObjectRelease();
      uint64_t v20 = v19[7];
      swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v12) = v9;
      uint64_t v21 = v3 - 1;
      if (v3 == 1) {
        return (void *)swift_bridgeObjectRelease();
      }
LABEL_16:
      for (uint64_t i = v6 + 9; ; i += 3)
      {
        uint64_t v29 = *(i - 2);
        uint64_t v28 = *(i - 1);
        uint64_t v30 = *i;
        unint64_t v31 = (void *)*a3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v33 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        unint64_t v34 = v31[2];
        uint64_t v35 = (v32 & 1) == 0;
        BOOL v36 = v34 + v35;
        if (__OFADD__(v34, v35)) {
          break;
        }
        uint64_t v37 = v32;
        if (v31[3] < v36)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
          char v38 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
          if ((v37 & 1) != (v39 & 1)) {
            goto LABEL_28;
          }
          char v33 = v38;
        }
        char v40 = (void *)*a3;
        if (v37)
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = v40[7];
          swift_bridgeObjectRelease();
          *(void *)(v27 + 8 * v33) = v30;
        }
        else
        {
          v40[(v33 >> 6) + 8] |= 1 << v33;
          uint64_t v41 = (uint64_t *)(v40[6] + 16 * v33);
          *uint64_t v41 = v29;
          v41[1] = v28;
          *(void *)(v40[7] + 8 * v33) = v30;
          uint64_t v42 = v40[2];
          BOOL v24 = __OFADD__(v42, 1);
          uint64_t v43 = v42 + 1;
          if (v24) {
            goto LABEL_27;
          }
          v40[2] = v43;
        }
        if (!--v21) {
          return (void *)swift_bridgeObjectRelease();
        }
      }
      goto LABEL_26;
    }
    if (a2)
    {
      char v19 = (void *)*a3;
      if (v11) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      char v19 = (void *)*a3;
      if (v16) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    id v22 = (uint64_t *)(v19[6] + 16 * v12);
    uint64_t *v22 = v8;
    v22[1] = v7;
    *(void *)(v19[7] + 8 * v12) = v9;
    uint64_t v23 = v19[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v19[2] = v25;
    uint64_t v21 = v3 - 1;
    if (v3 == 1) {
      return (void *)swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t partial apply for closure #7 in CAFUISettingsCache.init(settings:sections:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return closure #7 in CAFUISettingsCache.init(settings:sections:)(a1, a2, a3, *(uint64_t **)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t destroy for CAFUISettingsCache()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CAFUISettingsCache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CAFUISettingsCache(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CAFUISettingsCache(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUISettingsCache(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUISettingsCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUISettingsCache()
{
  return &type metadata for CAFUISettingsCache;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of CAFUISettingsCache(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of CAFUISettingsCache(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined retain of [CAFSettingsSection](uint64_t a1)
{
  return a1;
}

uint64_t outlined release of [CAFSettingsSection](uint64_t a1)
{
  return a1;
}

uint64_t CAFVolume.title.getter()
{
  do
  {
    id v1 = objc_msgSend(v0, sel_volumeType);
    if (!(!v3 & v2))
    {
      switch((int)v1)
      {
        case 0:
          uint64_t v8 = 0x4D5F454D554C4F56;
          uint64_t v9 = 1095320645;
          goto LABEL_14;
        case 1:
          uint64_t v8 = 0x4E5F454D554C4F56;
          unint64_t v10 = 0xEA00000000005641;
          goto LABEL_15;
        case 2:
          uint64_t v8 = 0x505F454D554C4F56;
          uint64_t v9 = 1162760008;
          goto LABEL_14;
        case 3:
          uint64_t v8 = 0x535F454D554C4F56;
          unint64_t v10 = 0xE900000000000052;
          goto LABEL_15;
        case 4:
          uint64_t v8 = 0x525F454D554C4F56;
          unint64_t v10 = 0xED00005245474E49;
          goto LABEL_15;
        case 5:
          uint64_t v8 = 0x4E5F454D554C4F56;
          uint64_t v9 = 1381193281;
          goto LABEL_14;
        default:
          JUMPOUT(0);
      }
    }
    uint64_t v4 = CAFVolume.title.getter(v1);
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    uint64_t v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0) {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
  }
  while (v7);
  uint64_t v8 = 0x4F5F454D554C4F56;
  uint64_t v9 = 1380272212;
LABEL_14:
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
LABEL_15:
  char v11 = (void *)MEMORY[0x24C59F610](v8, v10);
  id v12 = CAFUILocalizedStringForKey(v11);

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v13;
}

id closure #1 in variable initialization expression of CAFUIDevicePickerLimitedUIView.button()
{
  id v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CAFUIAlertButton()), sel_init);
  id v1 = objc_msgSend(self, sel__carSystemFocusColor);
  objc_msgSend(v0, sel_setTitleColor_forState_, v1, 0);

  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  char v2 = (void *)MEMORY[0x24C59F610](1262698818, 0xE400000000000000);
  id v3 = CAFUILocalizedStringForKey(v2);

  if (!v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v3 = (id)MEMORY[0x24C59F610](v4);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v0, sel_setTitle_forState_, v3, 0);

  objc_msgSend(v0, sel__setContinuousCornerRadius_, 8.0);
  unint64_t v5 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_249530110;
  id v7 = objc_msgSend(v0, sel_heightAnchor);
  id v8 = objc_msgSend(v7, sel_constraintEqualToConstant_, 40.0);

  *(void *)(v6 + 32) = v8;
  id v9 = objc_msgSend(v0, sel_widthAnchor);
  id v10 = objc_msgSend(v9, sel_constraintEqualToConstant_, 241.0);

  *(void *)(v6 + 40) = v10;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_activateConstraints_, isa);

  return v0;
}

id closure #1 in variable initialization expression of CAFUIDevicePickerLimitedUIView.label()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  id v1 = objc_msgSend(self, sel_systemFontOfSize_, 28.0);
  objc_msgSend(v0, sel_setFont_, v1);

  objc_msgSend(v0, sel_setTextAlignment_, 1);
  objc_msgSend(v0, sel_setLineBreakMode_, 0);
  objc_msgSend(v0, sel_setNumberOfLines_, 0);
  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  char v2 = (void *)MEMORY[0x24C59F610](0xD000000000000019, 0x8000000249534390);
  id v3 = CAFUILocalizedStringForKey(v2);

  if (!v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v3 = (id)MEMORY[0x24C59F610](v4);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v0, sel_setText_, v3);

  return v0;
}

char *CAFUIDevicePickerLimitedUIView.init(presentedAction:dismissAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = (uint64_t *)&v4[OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_presentedAction];
  uint64_t *v9 = 0;
  v9[1] = 0;
  id v10 = (uint64_t *)&v4[OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_dismissAction];
  uint64_t *v10 = 0;
  v10[1] = 0;
  uint64_t v11 = OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_button;
  id v12 = v4;
  *(void *)&v4[v11] = closure #1 in variable initialization expression of CAFUIDevicePickerLimitedUIView.button();
  uint64_t v13 = OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_label;
  *(void *)&v12[v13] = closure #1 in variable initialization expression of CAFUIDevicePickerLimitedUIView.label();
  uint64_t v14 = *v9;
  uint64_t *v9 = a1;
  v9[1] = a2;
  uint64_t v49 = a1;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a1);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
  uint64_t v15 = *v10;
  uint64_t *v10 = a3;
  v10[1] = a4;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a3);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v15);

  v50.receiver = v12;
  v50.super_class = (Class)type metadata accessor for CAFUIDevicePickerLimitedUIView();
  char v16 = (char *)objc_msgSendSuper2(&v50, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v17 = OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_button;
  char v18 = *(void **)&v16[OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_button];
  char v19 = v16;
  objc_msgSend(v18, sel_addTarget_action_forControlEvents_, v19, sel_buttonPressed, 64);
  objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v20 = self;
  uint64_t v21 = v19;
  unint64_t result = (char *)objc_msgSend(v20, sel_tableBackgroundColor);
  if (result)
  {
    uint64_t v23 = result;
    objc_msgSend(v21, sel_setBackgroundColor_, result);

    objc_msgSend(v21, sel_setAlpha_, 0.95);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_249530110;
    uint64_t v25 = *(void **)&v21[OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_label];
    *(void *)(v24 + 32) = v25;
    uint64_t v26 = *(void **)&v16[v17];
    *(void *)(v24 + 40) = v26;
    specialized Array._endMutation()();
    id v27 = objc_allocWithZone(MEMORY[0x263F82BF8]);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    id v28 = v25;
    id v29 = v26;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v31 = objc_msgSend(v27, sel_initWithArrangedSubviews_, isa);

    objc_msgSend(v31, sel_setAxis_, 1);
    objc_msgSend(v31, sel_setAlignment_, 3);
    objc_msgSend(v31, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    objc_msgSend(v31, sel_setSpacing_, 24.0);
    objc_msgSend(v21, sel_addSubview_, v31);
    id v32 = self;
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_2495300E0;
    id v34 = objc_msgSend(v31, sel_centerXAnchor);
    id v35 = objc_msgSend(v21, sel_centerXAnchor);
    id v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v35);

    *(void *)(v33 + 32) = v36;
    id v37 = objc_msgSend(v31, sel_centerYAnchor);
    id v38 = objc_msgSend(v21, sel_centerYAnchor);
    id v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v38);

    *(void *)(v33 + 40) = v39;
    id v40 = objc_msgSend(v31, sel_leadingAnchor);
    id v41 = objc_msgSend(v21, sel_safeAreaLayoutGuide);
    id v42 = objc_msgSend(v41, sel_leadingAnchor);

    id v43 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v42);
    *(void *)(v33 + 48) = v43;
    id v44 = objc_msgSend(v31, sel_trailingAnchor);
    id v45 = objc_msgSend(v21, sel_safeAreaLayoutGuide);
    id v46 = objc_msgSend(v45, sel_trailingAnchor);

    id v47 = objc_msgSend(v44, sel_constraintEqualToAnchor_, v46);
    *(void *)(v33 + 56) = v47;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class v48 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v32, sel_activateConstraints_, v48);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a3);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v49);

    return v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void @objc CAFUIDevicePickerLimitedUIView.layoutSubviews()(char *a1, uint64_t a2, void *a3)
{
  id v3 = *(void (**)(uint64_t))&a1[*a3];
  if (v3)
  {
    unint64_t v5 = a1;
    uint64_t v4 = outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v3);
    v3(v4);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v3);
  }
}

id CAFUIDevicePickerLimitedUIView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIDevicePickerLimitedUIView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CAFUIDevicePickerLimitedUIView()
{
  return self;
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

int64x2_t one-time initialization function for size()
{
  int64x2_t result = vdupq_n_s64(0x4054000000000000uLL);
  static CAFUIDevicePickerViewCell.Constants.Avatar.size = (__int128)result;
  return result;
}

{
  int64x2_t result;

  int64x2_t result = vdupq_n_s64(0x4055800000000000uLL);
  static CAFUIDevicePickerViewCell.Constants.FocusRing.size = (__int128)result;
  return result;
}

void one-time initialization function for portraitRequiredHeight()
{
  static CAFUIDevicePickerViewController.Constants.portraitRequiredHeight = 0x4074800000000000;
}

void one-time initialization function for tallPortraitRequiredHeight()
{
  static CAFUIDevicePickerViewController.Constants.tallPortraitRequiredHeight = 0x4080500000000000;
}

Swift::String __swiftcall CAFVent.symbolName(useRightFacingSeat:)(Swift::Bool useRightFacingSeat)
{
  unsigned int v3 = objc_msgSend(v1, sel_currentIndex);
  id v4 = objc_msgSend(v1, sel_combinations);
  type metadata accessor for NSNumber();
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v6 <= v3)
  {
    if (useRightFacingSeat) {
      char v14 = 16;
    }
    else {
      char v14 = 0;
    }
  }
  else
  {
    id v7 = objc_msgSend(v1, sel_combinations);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v9 = objc_msgSend(v1, sel_currentIndex);
    if ((v8 & 0xC000000000000001) != 0)
    {
      id v11 = (id)MEMORY[0x24C59FC50]();
    }
    else
    {
      if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)v9)
      {
        __break(1u);
        goto _$sSo7CAFVentC5CAFUIE10symbolName18useRightFacingSeatSSSb_tF;
      }
      id v11 = *(id *)(v8 + 8 * v9 + 32);
    }
    id v12 = v11;
    swift_bridgeObjectRelease();
    int v13 = objc_msgSend(v12, sel_intValue);

    char v14 = specialized static CAFVent.symbolFor(combination:useRightFacingSeat:)(v13, useRightFacingSeat);
  }

  unint64_t v9 = CAFUISymbol.symbolName.getter(v14);
_$sSo7CAFVentC5CAFUIE10symbolName18useRightFacingSeatSSSb_tF:
  result._object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

unint64_t static CAFVent.groupedSymbolName(vents:useRightFacingSeat:)(unint64_t a1, char a2)
{
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_21:
    int v7 = 0;
LABEL_22:
    swift_bridgeObjectRelease();
    char v16 = specialized static CAFVent.symbolFor(combination:useRightFacingSeat:)(v7, a2 & 1);
    return CAFUISymbol.symbolName.getter(v16);
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_21;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x24C59FC50](v6, a1);
      }
      else {
        id v8 = *(id *)(a1 + 8 * v6 + 32);
      }
      unint64_t v9 = v8;
      id v10 = objc_msgSend(v8, sel_combinations);
      type metadata accessor for NSNumber();
      unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v15)
        {
LABEL_5:

          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
      }
      else if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_5;
      }
      if ((v11 & 0xC000000000000001) != 0)
      {
        id v12 = (id)MEMORY[0x24C59FC50](0, v11);
      }
      else
      {
        if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_20;
        }
        id v12 = *(id *)(v11 + 32);
      }
      int v13 = v12;
      swift_bridgeObjectRelease();
      int v14 = MEMORY[0x24C59FE10](v13);

      v7 |= v14;
LABEL_6:
      if (v4 == ++v6) {
        goto LABEL_22;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static CAFVent.symbolFor(combination:useRightFacingSeat:)(int a1, char a2)
{
  switch(a1)
  {
    case 1:
      if (a2) {
        uint64_t result = 24;
      }
      else {
        uint64_t result = 8;
      }
      break;
    case 2:
      if (a2) {
        uint64_t result = 20;
      }
      else {
        uint64_t result = 4;
      }
      break;
    case 3:
      if (a2) {
        uint64_t result = 28;
      }
      else {
        uint64_t result = 12;
      }
      break;
    case 4:
      if (a2) {
        uint64_t result = 17;
      }
      else {
        uint64_t result = 1;
      }
      break;
    case 5:
      if (a2) {
        uint64_t result = 25;
      }
      else {
        uint64_t result = 9;
      }
      break;
    case 6:
      if (a2) {
        uint64_t result = 21;
      }
      else {
        uint64_t result = 5;
      }
      break;
    case 7:
      if (a2) {
        uint64_t result = 29;
      }
      else {
        uint64_t result = 13;
      }
      break;
    case 16:
      if (a2) {
        uint64_t result = 18;
      }
      else {
        uint64_t result = 2;
      }
      break;
    case 17:
      if (a2) {
        uint64_t result = 26;
      }
      else {
        uint64_t result = 10;
      }
      break;
    case 18:
      if (a2) {
        uint64_t result = 22;
      }
      else {
        uint64_t result = 6;
      }
      break;
    case 19:
      if (a2) {
        uint64_t result = 30;
      }
      else {
        uint64_t result = 14;
      }
      break;
    case 20:
      if (a2) {
        uint64_t result = 19;
      }
      else {
        uint64_t result = 3;
      }
      break;
    case 21:
      if (a2) {
        uint64_t result = 27;
      }
      else {
        uint64_t result = 11;
      }
      break;
    case 22:
      if (a2) {
        uint64_t result = 23;
      }
      else {
        uint64_t result = 7;
      }
      break;
    case 23:
      if (a2) {
        uint64_t result = 31;
      }
      else {
        uint64_t result = 15;
      }
      break;
    default:
      if (a2) {
        uint64_t result = 16;
      }
      else {
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

void CAFUIDevicePickerViewCell.selectedImage.didset()
{
  uint64_t v1 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImageView;
  objc_super v2 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImageView];
  if (v2) {
    objc_msgSend(v2, sel_removeFromSuperview);
  }
  unsigned int v3 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImage];
  if (v3)
  {
    id v4 = objc_allocWithZone(MEMORY[0x263F82828]);
    id v5 = v3;
    id v6 = objc_msgSend(v4, sel_initWithImage_, v5);
    objc_msgSend(v6, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v7 = objc_msgSend(v0, sel_contentView);
    objc_msgSend(v7, sel_addSubview_, v6);

    id v8 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v6;
    id v9 = v6;

    id v10 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_249530110;
    id v12 = objc_msgSend(v9, sel_topAnchor);
    int v13 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView];
    id v14 = objc_msgSend(v13, sel_topAnchor);
    id v15 = objc_msgSend(v12, sel_constraintEqualToAnchor_constant_, v14, 50.0);

    *(void *)(v11 + 32) = v15;
    id v16 = objc_msgSend(v9, sel_leadingAnchor);
    id v17 = objc_msgSend(v13, sel_leadingAnchor);
    id v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_constant_, v17, 50.0);

    *(void *)(v11 + 40) = v18;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_activateConstraints_, isa);

    Class v19 = isa;
  }
  else
  {
    Class v19 = *(Class *)&v0[v1];
    *(void *)&v0[v1] = 0;
  }
}

void CAFUIDevicePickerViewCell.showSpinner.didset(char a1)
{
  uint64_t v2 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner;
  if (v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner] != (a1 & 1))
  {
    unsigned int v3 = v1;
    id v4 = objc_msgSend(v1, sel_backgroundView);
    if (v4)
    {
      id v21 = v4;
      uint64_t v5 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_spinner;
      if (!*(void *)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_spinner])
      {
        id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F823E8]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
        id v7 = objc_msgSend(self, sel_labelColor);
        objc_msgSend(v6, sel_setColor_, v7);

        objc_msgSend(v6, sel_setActivityIndicatorViewStyle_, 101);
        objc_msgSend(v6, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
        objc_msgSend(v21, sel_addSubview_, v6);
        id v8 = self;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_249530110;
        id v10 = objc_msgSend(v6, sel_centerXAnchor);
        id v11 = objc_msgSend(v21, sel_centerXAnchor);
        id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

        *(void *)(v9 + 32) = v12;
        id v13 = objc_msgSend(v6, sel_centerYAnchor);
        id v14 = objc_msgSend(v21, sel_centerYAnchor);
        id v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

        *(void *)(v9 + 40) = v15;
        uint64_t v22 = v9;
        specialized Array._endMutation()();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v8, sel_activateConstraints_, isa);

        id v17 = *(void **)&v3[v5];
        *(void *)&v3[v5] = v6;
      }
      if (v3[v2] == 1)
      {
        objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView], sel_setHidden_, 1);
        objc_msgSend(*(id *)&v3[v5], sel_startAnimating);
        id v18 = *(void **)&v3[v5];
        if (v18)
        {
          id v19 = v18;
          objc_msgSend(v19, sel_setHidden_, 0);
        }
      }
      else
      {
        uint64_t v20 = *(void **)&v3[v5];
        if (v20)
        {
          objc_msgSend(v20, sel_setHidden_, 1);
          uint64_t v20 = *(void **)&v3[v5];
        }
        objc_msgSend(v20, sel_stopAnimating, v21, v22);
        objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView], sel_setHidden_, 0);
      }
    }
  }
}

char *CAFUIDevicePickerViewCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImageView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImage] = 0;
  *(void *)&v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_spinner] = 0;
  *(void *)&v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_widthConstraint] = 0;
  uint64_t v9 = &v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0xE000000000000000;
  id v10 = objc_allocWithZone(MEMORY[0x263F82828]);
  id v11 = v4;
  id v12 = objc_msgSend(v10, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v11[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView] = v12;
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  *(void *)&v11[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label] = v13;
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  *(void *)&v11[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_sublabel] = v14;
  v11[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner] = 0;

  v104.receiver = v11;
  v104.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewCell();
  id v15 = objc_msgSendSuper2(&v104, sel_initWithFrame_, a1, a2, a3, a4);
  id v16 = objc_allocWithZone(MEMORY[0x263F82E00]);
  id v17 = (char *)v15;
  id v18 = objc_msgSend(v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v18, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  if (one-time initialization token for size != -1) {
    swift_once();
  }
  objc_msgSend(v18, sel__setCornerRadius_, *(double *)&static CAFUIDevicePickerViewCell.Constants.Avatar.size * 0.5);
  id v19 = objc_msgSend(v18, sel_layer);
  objc_msgSend(v19, sel_setMasksToBounds_, 1);

  uint64_t v20 = self;
  id v21 = objc_msgSend(v20, sel_secondarySystemFillColor);
  objc_msgSend(v18, sel_setBackgroundColor_, v21);

  id v22 = objc_msgSend(v20, sel_labelColor);
  objc_msgSend(v18, sel_setTintColor_, v22);

  objc_msgSend(v17, sel_setBackgroundView_, v18);
  uint64_t v23 = *(void **)&v17[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView];
  uint64_t v24 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView;
  objc_msgSend(v23, (SEL)&selRef_buttonSettings + 7, 0);
  objc_msgSend(v23, sel_setContentMode_, 4);
  id v25 = objc_msgSend(v23, sel_layer);
  objc_msgSend(v25, sel_setMasksToBounds_, 1);

  uint64_t v26 = v24;
  uint64_t v101 = v24;
  id v27 = *(id *)&v17[v24];
  id v28 = objc_msgSend(v20, sel_labelColor);
  objc_msgSend(v27, sel_setTintColor_, v28);

  objc_msgSend(v18, sel_addSubview_, *(void *)&v17[v26]);
  uint64_t v29 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label;
  uint64_t v30 = *(void **)&v17[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label];
  objc_msgSend(v30, (SEL)&selRef_buttonSettings + 7, 0);
  objc_msgSend(v30, sel_setTextAlignment_, 1);
  id v31 = self;
  uint64_t v32 = *MEMORY[0x263F83580];
  id v33 = v30;
  id v34 = objc_msgSend(v31, sel_preferredFontDescriptorWithTextStyle_, v32);
  id v35 = self;
  id v36 = objc_msgSend(v35, sel_fontWithDescriptor_size_, v34, 0.0);

  objc_msgSend(v33, sel_setFont_, v36);
  id v37 = *(id *)&v17[v29];
  id v38 = objc_msgSend(v20, sel_labelColor);
  objc_msgSend(v37, sel_setTextColor_, v38);

  id v39 = objc_msgSend(v17, sel_contentView);
  objc_msgSend(v39, sel_addSubview_, *(void *)&v17[v29]);

  uint64_t v40 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_sublabel;
  id v41 = *(void **)&v17[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_sublabel];
  objc_msgSend(v41, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v41, sel_setTextAlignment_, 1);
  objc_msgSend(v41, sel_setNumberOfLines_, 1);
  uint64_t v42 = *MEMORY[0x263F835B8];
  id v43 = v41;
  id v44 = objc_msgSend(v31, sel_preferredFontDescriptorWithTextStyle_, v42);
  id v45 = objc_msgSend(v35, sel_fontWithDescriptor_size_, v44, 0.0);

  objc_msgSend(v43, sel_setFont_, v45);
  uint64_t v102 = v40;
  id v46 = *(id *)&v17[v40];
  id v47 = objc_msgSend(v20, sel__carSystemFocusColor);
  objc_msgSend(v46, sel_setTextColor_, v47);

  id v48 = objc_msgSend(v17, sel_contentView);
  objc_msgSend(v48, sel_addSubview_, *(void *)&v17[v40]);

  id v103 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_249530DA0;
  id v50 = objc_msgSend(v18, sel_topAnchor);
  id v51 = objc_msgSend(v17, sel_contentView);
  id v52 = objc_msgSend(v51, (SEL)&selRef_constraintEqualToAnchor_constant_ + 3);

  id v53 = objc_msgSend(v50, sel_constraintEqualToAnchor_constant_, v52, 4.0);
  *(void *)(v49 + 32) = v53;
  id v54 = objc_msgSend(v18, sel_widthAnchor);
  id v55 = objc_msgSend(v54, sel_constraintEqualToConstant_, *(double *)&static CAFUIDevicePickerViewCell.Constants.Avatar.size);

  *(void *)(v49 + 40) = v55;
  id v56 = objc_msgSend(v18, sel_heightAnchor);
  id v57 = objc_msgSend(v56, (SEL)&selRef_setProgressBarView_ + 2, *((double *)&static CAFUIDevicePickerViewCell.Constants.Avatar.size + 1));

  *(void *)(v49 + 48) = v57;
  id v58 = objc_msgSend(v18, sel_centerXAnchor);
  id v59 = objc_msgSend(v17, sel_contentView);
  id v60 = objc_msgSend(v59, sel_centerXAnchor);

  id v61 = objc_msgSend(v58, sel_constraintEqualToAnchor_, v60);
  *(void *)(v49 + 56) = v61;
  id v62 = objc_msgSend(*(id *)&v17[v101], sel_leadingAnchor);
  id v63 = objc_msgSend(v18, (SEL)&off_26525C238 + 2);
  id v64 = objc_msgSend(v62, (SEL)&off_26525C2E8 + 6, v63);

  *(void *)(v49 + 64) = v64;
  id v65 = objc_msgSend(*(id *)&v17[v101], sel_trailingAnchor);
  id v66 = objc_msgSend(v18, (SEL)&selRef_drawRect_ + 4);
  id v67 = objc_msgSend(v65, (SEL)&off_26525C2E8 + 6, v66);

  *(void *)(v49 + 72) = v67;
  id v68 = objc_msgSend(*(id *)&v17[v101], sel_topAnchor);
  id v69 = objc_msgSend(v18, sel_topAnchor);
  id v70 = objc_msgSend(v68, (SEL)&off_26525C2E8 + 6, v69);

  *(void *)(v49 + 80) = v70;
  id v71 = objc_msgSend(*(id *)&v17[v101], sel_bottomAnchor);
  id v72 = objc_msgSend(v18, sel_bottomAnchor);
  id v73 = objc_msgSend(v71, (SEL)&off_26525C2E8 + 6, v72);

  *(void *)(v49 + 88) = v73;
  id v74 = objc_msgSend(*(id *)&v17[v29], sel_topAnchor);
  id v75 = objc_msgSend(*(id *)&v17[v101], sel_bottomAnchor);
  id v76 = objc_msgSend(v74, sel_constraintEqualToAnchor_constant_, v75, 12.0);

  *(void *)(v49 + 96) = v76;
  id v77 = objc_msgSend(*(id *)&v17[v29], sel_leadingAnchor);
  id v78 = objc_msgSend(v17, sel_contentView);
  id v79 = objc_msgSend(v78, sel_leadingAnchor);

  id v80 = objc_msgSend(v77, sel_constraintEqualToAnchor_, v79);
  *(void *)(v49 + 104) = v80;
  id v81 = objc_msgSend(*(id *)&v17[v29], sel_trailingAnchor);
  id v82 = objc_msgSend(v17, sel_contentView);
  id v83 = objc_msgSend(v82, sel_trailingAnchor);

  id v84 = objc_msgSend(v81, sel_constraintEqualToAnchor_, v83);
  *(void *)(v49 + 112) = v84;
  id v85 = objc_msgSend(*(id *)&v17[v102], sel_bottomAnchor);
  id v86 = objc_msgSend(v17, sel_contentView);
  id v87 = objc_msgSend(v86, sel_bottomAnchor);

  id v88 = objc_msgSend(v85, sel_constraintEqualToAnchor_, v87);
  *(void *)(v49 + 120) = v88;
  id v89 = objc_msgSend(*(id *)&v17[v102], sel_leadingAnchor);
  id v90 = objc_msgSend(v17, sel_contentView);
  id v91 = objc_msgSend(v90, sel_leadingAnchor);

  id v92 = objc_msgSend(v89, sel_constraintEqualToAnchor_, v91);
  *(void *)(v49 + 128) = v92;
  id v93 = objc_msgSend(*(id *)&v17[v102], sel_trailingAnchor);
  id v94 = objc_msgSend(v17, sel_contentView);
  id v95 = objc_msgSend(v94, sel_trailingAnchor);

  id v96 = objc_msgSend(v93, sel_constraintEqualToAnchor_, v95);
  *(void *)(v49 + 136) = v96;
  id v97 = objc_msgSend(v17, sel_heightAnchor);
  id v98 = objc_msgSend(v97, sel_constraintEqualToConstant_, 134.0);

  *(void *)(v49 + 144) = v98;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v103, sel_activateConstraints_, isa);

  return v17;
}

void CAFUIDevicePickerViewCell.showsFocusRing.setter(char a1)
{
  if (a1)
  {
    id v2 = objc_msgSend(objc_allocWithZone((Class)CAFUIFocusRingView), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v2, sel_setCornerRadius_, 42.0);
    objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    unsigned int v3 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImageView];
    if (v3)
    {
      id v4 = v3;
      id v5 = objc_msgSend(v1, sel_contentView);
      objc_msgSend(v5, sel_insertSubview_belowSubview_, v2, v4);
    }
    else
    {
      id v5 = objc_msgSend(v1, sel_contentView);
      objc_msgSend(v5, sel_addSubview_, v2);
    }

    id v8 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView];
    *(void *)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView] = v2;
    id v9 = v2;

    id v10 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_2495300E0;
    id v12 = objc_msgSend(v9, sel_centerXAnchor);
    id v13 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView];
    id v14 = objc_msgSend(v13, sel_centerXAnchor);
    id v15 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v14);

    *(void *)(v11 + 32) = v15;
    id v16 = objc_msgSend(v9, sel_centerYAnchor);
    id v17 = objc_msgSend(v13, sel_centerYAnchor);
    id v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v17);

    *(void *)(v11 + 40) = v18;
    id v19 = objc_msgSend(v9, sel_widthAnchor);
    if (one-time initialization token for size != -1) {
      swift_once();
    }
    id v20 = objc_msgSend(v19, sel_constraintEqualToConstant_, *(double *)&static CAFUIDevicePickerViewCell.Constants.FocusRing.size);

    *(void *)(v11 + 48) = v20;
    id v21 = objc_msgSend(v9, sel_heightAnchor);
    id v22 = objc_msgSend(v21, sel_constraintEqualToConstant_, *((double *)&static CAFUIDevicePickerViewCell.Constants.FocusRing.size + 1));

    *(void *)(v11 + 56) = v22;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_activateConstraints_, isa);

    Class v7 = isa;
  }
  else
  {
    uint64_t v6 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView;
    Class v7 = *(Class *)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView];
    if (v7)
    {
      [(objc_class *)v7 removeFromSuperview];
      Class v7 = *(Class *)&v1[v6];
    }
    *(void *)&v1[v6] = 0;
  }
}

void CAFUIDevicePickerViewCell.configure(with:selectedImage:for:device:)(void *a1, void *a2, char a3, void *a4)
{
  id v5 = v4;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  id v9 = static OS_os_log.default;
  outlined init with copy of CAFUIImageRepresentableItemProtocol((uint64_t)a1, (uint64_t)v55);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    char v52 = a3;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v54 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    id v13 = a4;
    uint64_t v14 = v56;
    uint64_t v15 = v57;
    __swift_project_boxed_opaque_existential_1(v55, v56);
    uint64_t v16 = v14;
    a4 = v13;
    id v5 = v4;
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
    _os_log_impl(&dword_2494AC000, v9, v10, "Configuring item: %s", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v12;
    a3 = v52;
    MEMORY[0x24C5A0780](v19, -1, -1);
    MEMORY[0x24C5A0780](v11, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
  }
  if (objc_msgSend(a4, sel_state) == 2)
  {
    id v20 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CAFUIAccountManager()), sel_init);
    if (one-time initialization token for size != -1) {
      swift_once();
    }
    id v21 = a1;
    id v22 = *(void **)&v20[OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_pictureStore];
    objc_msgSend(v22, sel_setPictureDiameter_, *(double *)&static CAFUIDevicePickerViewCell.Constants.Avatar.size);
    id v23 = objc_msgSend(v22, sel_profilePictureForAccountOwner);

    if (v23)
    {
      objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView], sel_setImage_, v23);
    }
    uint64_t v24 = *(void **)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label];
    objc_msgSend(v24, sel_setNumberOfLines_, 1);
    id v25 = *(void **)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_sublabel];
    uint64_t v26 = (void *)MEMORY[0x24C59F610](0xD000000000000016, 0x8000000249534510);
    id v27 = CAFUILocalizedStringForKey(v26);

    if (!v27)
    {
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v27 = (id)MEMORY[0x24C59F610](v28);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v25, sel_setText_, v27);

    a1 = v21;
  }
  else
  {
    uint64_t v29 = *(void **)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView];
    uint64_t v30 = v5;
    id v31 = a4;
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    id v34 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 16);
    uint64_t v35 = v33;
    a4 = v31;
    id v5 = v30;
    id v36 = (void *)v34(v32, v35);
    objc_msgSend(v29, sel_setImage_, v36);

    uint64_t v24 = *(void **)&v30[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label];
    objc_msgSend(v24, sel_setNumberOfLines_, 2);
    objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_sublabel], sel_setText_, 0);
  }
  uint64_t v37 = a1[3];
  uint64_t v38 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v37);
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v37, v38);
  uint64_t v40 = (void *)MEMORY[0x24C59F610](v39);
  swift_bridgeObjectRelease();
  objc_msgSend(v24, sel_setText_, v40);

  id v41 = *(void **)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImage];
  *(void *)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImage] = a2;
  id v42 = a2;

  CAFUIDevicePickerViewCell.selectedImage.didset();
  id v43 = objc_msgSend(a4, sel_identifier);
  if (v43)
  {
    id v44 = v43;
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v47 = v46;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v47 = 0xE000000000000000;
  }
  id v48 = (uint64_t *)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier];
  uint64_t *v48 = v45;
  v48[1] = v47;
  swift_bridgeObjectRelease();
  double v49 = dbl_249530DE0[a3];
  objc_msgSend(v5, sel_bounds);
  if (v49 != CGRectGetWidth(v58))
  {
    id v50 = objc_msgSend(v5, sel_widthAnchor);
    id v51 = objc_msgSend(v50, sel_constraintEqualToConstant_, v49);

    specialized CAFUIDevicePickerViewCell.widthConstraint.setter(v51);
  }
}

Swift::Void __swiftcall CAFUIDevicePickerViewCell.didUpdateFocus(in:with:)(UIFocusUpdateContext in, UIFocusAnimationCoordinator with)
{
  unsigned int v3 = v2;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewCell();
  objc_msgSendSuper2(&v11, sel_didUpdateFocusInContext_withAnimationCoordinator_, in.super.isa, with.super.isa);
  id v6 = [(objc_class *)in.super.isa nextFocusedView];
  if (v6)
  {
    Class v7 = v6;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    char v8 = static NSObject.== infix(_:_:)();
    CAFUIDevicePickerViewCell.showsFocusRing.setter(v8 & 1);
  }
  else
  {
    uint64_t v9 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView;
    os_log_type_t v10 = *(void **)&v3[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView];
    if (v10)
    {
      objc_msgSend(v10, sel_removeFromSuperview);
      Class v7 = *(void **)&v3[v9];
    }
    else
    {
      Class v7 = 0;
    }
    *(void *)&v3[v9] = 0;
  }
}

id CAFUIDevicePickerViewCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CAFUIDevicePickerViewCell()
{
  return self;
}

void specialized CAFUIDevicePickerViewCell.widthConstraint.setter(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_widthConstraint;
  id v5 = *(void **)(v1 + OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_widthConstraint);
  if (v5)
  {
    id v6 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_2495300D0;
    *(void *)(v7 + 32) = v5;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    id v8 = v5;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_deactivateConstraints_, isa);

    os_log_type_t v10 = *(void **)(v1 + v4);
  }
  else
  {
    os_log_type_t v10 = 0;
  }
  *(void *)(v2 + v4) = a1;
  id v11 = a1;

  uint64_t v12 = *(void **)(v2 + v4);
  if (v12)
  {
    id v13 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_2495300D0;
    *(void *)(v14 + 32) = v12;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    id v15 = v12;
    Class v16 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v13, sel_activateConstraints_, v16);
  }
}

void specialized CAFUIDevicePickerViewCell.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImageView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImage] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_spinner] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_widthConstraint] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0xE000000000000000;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t CAFMediaSourceSemanticType.title.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = 0x49544154535F4D41;
      goto LABEL_7;
    case 2:
      uint64_t v1 = 0x49544154535F4D46;
      goto LABEL_7;
    case 3:
      unsigned int v3 = 1598904403;
      goto LABEL_12;
    case 4:
      uint64_t v1 = 0x49544154535F5442;
LABEL_7:
      unint64_t v4 = 0xEB00000000534E4FLL;
      goto LABEL_14;
    case 5:
      unsigned int v3 = 1599624513;
      goto LABEL_12;
    case 6:
      unsigned __int16 v5 = 16708;
      goto LABEL_11;
    case 7:
      unsigned __int16 v5 = 21333;
LABEL_11:
      unsigned int v3 = v5 | 0x5F420000;
LABEL_12:
      uint64_t v1 = v3 | 0x5441545300000000;
      unint64_t v4 = 0xEC000000534E4F49;
      goto LABEL_14;
    case 8:
      uint64_t v1 = 0x54535F4241444D46;
      unint64_t v4 = 0xEE00534E4F495441;
LABEL_14:
      id v6 = (void *)MEMORY[0x24C59F610](v1, v4);
      id v7 = CAFUILocalizedStringForKey(v6);

      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      break;
    default:
      uint64_t v2 = 0;
      break;
  }
  return v2;
}

uint64_t CAFUITileBaseCell.isHighlightable.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t CAFUITileBaseCell.isCellEnabled.getter()
{
  return 1;
}

uint64_t CAFUITileBaseCell.isParentCell.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
  swift_beginAccess();
  return *v1;
}

void *CAFUITileBaseCell.detailView.getter()
{
  uint64_t v1 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v8, (uint64_t)v7, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v7, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    return 0;
  }
  else
  {
    outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v7, (uint64_t)v4);
    outlined destroy of UIContentConfiguration?((uint64_t)v7, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    uint64_t v9 = *(void **)&v4[*(int *)(v1 + 20)];
    id v10 = v9;
    outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v4);
  }
  return v9;
}

uint64_t CAFUITileBaseCell.automakerSettingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  return outlined init with copy of UIListContentConfiguration?(v3, a1, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
}

uint64_t CAFUITileBaseCell.automakerSettingConfiguration.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(a1, v6);
  swift_endAccess();
  outlined init with copy of UIListContentConfiguration?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v7 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  LODWORD(v6) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7);
  outlined destroy of UIContentConfiguration?((uint64_t)v5, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if (v6 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  return outlined destroy of UIContentConfiguration?(a1, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
}

void (*CAFUITileBaseCell.automakerSettingConfiguration.modify(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v6 = OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  v3[4] = v5;
  v3[5] = v6;
  swift_beginAccess();
  return CAFUITileBaseCell.automakerSettingConfiguration.modify;
}

void CAFUITileBaseCell.automakerSettingConfiguration.modify(void *a1, char a2)
{
  uint64_t v3 = (void *)*a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = v3[4];
    outlined init with copy of UIListContentConfiguration?(v3[3] + v3[5], v4, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    uint64_t v5 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
    int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
    outlined destroy of UIContentConfiguration?(v4, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    if (v6 != 1) {
      CAFUITileBaseCell.setupViews()();
    }
  }
  free((void *)v3[4]);

  free(v3);
}

uint64_t CAFUITileBaseCell.cafui_contentConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v5, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id CAFUITileBaseCell.cafui_backgroundConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24C59F910](v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v6, v2);
  id result = objc_msgSend(self, sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall CAFUITileBaseCell.setupViews()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v159 = *(void *)(v2 - 8);
  uint64_t v160 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v158 = (char *)&v143 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v157 = (char *)&v143 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for CharacterSet();
  uint64_t v145 = *(void *)(v146 - 8);
  MEMORY[0x270FA5388](v146);
  char v144 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = type metadata accessor for UIListContentConfiguration.TextProperties();
  unint64_t v155 = *(void (***)(void, void))(v147 - 8);
  MEMORY[0x270FA5388](v147);
  uint64_t v154 = (char *)&v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v143 = (uint64_t)&v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  UIImage_optional v156 = (char *)&v143 - v11;
  uint64_t v12 = type metadata accessor for UIListContentConfiguration();
  uint64_t v161 = *(void *)(v12 - 8);
  uint64_t v162 = v12;
  MEMORY[0x270FA5388](v12);
  Class v163 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICellAccessory.LayoutDimension?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v151 = (char *)&v143 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for UICellAccessory.Placement();
  uint64_t v148 = *(void *)(v149 - 8);
  MEMORY[0x270FA5388](v149);
  uint64_t v17 = (char *)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v153 = (void *)type metadata accessor for UICellAccessory.CustomViewConfiguration();
  uint64_t v152 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*(v153 - 1);
  MEMORY[0x270FA5388](v153);
  uint64_t v150 = (char *)&v143 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  MEMORY[0x270FA5388](v19 - 8);
  id v21 = (char *)&v143 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v22 = *(void *)(v165 - 8);
  MEMORY[0x270FA5388](v165);
  uint64_t v164 = (uint64_t)&v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v24 = objc_msgSend(v0, sel_contentView);
  id v25 = objc_msgSend(v24, sel_subviews);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    if (!v27) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v27) {
      goto LABEL_10;
    }
  }
  if (v27 < 1)
  {
    __break(1u);
    goto LABEL_63;
  }
  for (uint64_t i = 0; i != v27; ++i)
  {
    if ((v26 & 0xC000000000000001) != 0) {
      id v29 = (id)MEMORY[0x24C59FC50](i, v26);
    }
    else {
      id v29 = *(id *)(v26 + 8 * i + 32);
    }
    uint64_t v30 = v29;
    objc_msgSend(v29, sel_removeFromSuperview);
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  id v31 = v1;
  uint64_t v32 = (uint64_t)&v1[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v32, (uint64_t)v21, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v33 = (int *)v165;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v165) == 1)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v21, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    UICollectionViewListCell.accessories.setter();
    return;
  }
  uint64_t v34 = v164;
  outlined init with take of CAFUIAutomakerSettingConfiguration((uint64_t)v21, v164);
  if (*(unsigned char *)(v34 + v33[6]))
  {
    id v35 = v156;
    if (*(unsigned char *)(v34 + v33[6]) == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>);
      type metadata accessor for UICellAccessory();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_2495305E0;
      id v36 = specialized static CAFUITileBaseCell.chevronImageView(cell:)();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>);
      type metadata accessor for UICellAccessory();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_2495305E0;
      specialized static CAFUITileBaseCell.arrowUpImageView(cell:)();
    }
    uint64_t v37 = v36;
    uint64_t v38 = (uint64_t (**)())&v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayed: UICellAccessory.DisplayedState, at: ()))
                                      + 48)];
    uint64_t v39 = *MEMORY[0x263F81DE8];
    uint64_t v40 = type metadata accessor for UICellAccessory.DisplayedState();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104))(v17, v39, v40);
    *uint64_t v38 = protocol witness for CAFListContentRepresentable.prominenceInfo.getter in conformance CAFPairedDevicesInformation;
    v38[1] = 0;
    (*(void (**)(char *, void, uint64_t))(v148 + 104))(v17, *MEMORY[0x263F81E00], v149);
    uint64_t v41 = type metadata accessor for UICellAccessory.LayoutDimension();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v151, 1, 1, v41);
    id v42 = v37;
    id v43 = v150;
    UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
    static UICellAccessory.customView(configuration:)();

    (*((void (**)(char *, void *))v152 + 1))(v43, v153);
    UICollectionViewListCell.accessories.setter();
    uint64_t v34 = v164;
  }
  else
  {
    UICollectionViewListCell.accessories.setter();
    id v35 = v156;
  }
  outlined init with copy of UIListContentConfiguration?(v34, (uint64_t)v35, &demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v45 = v161;
  uint64_t v44 = v162;
  unint64_t v47 = (char *)(v161 + 48);
  unint64_t v46 = *(unsigned int (**)(id, uint64_t, uint64_t))(v161 + 48);
  if (v46(v35, 1, v162) == 1)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v35, &demangling cache variable for type metadata for UIListContentConfiguration?);
    id v48 = &selRef_setOpacity_;
    goto LABEL_48;
  }
  (*(void (**)(char *, id, uint64_t))(v45 + 32))(v163, v35, v44);
  if (*(unsigned char *)(v34 + v33[7]) == 1)
  {
    double v49 = v154;
    UIListContentConfiguration.textProperties.getter();
    id v50 = (void *)UIListContentConfiguration.TextProperties.color.getter();
    uint64_t v51 = v147;
    ((void (**)(char *, uint64_t))v155)[1](v49, v147);
    id v52 = objc_msgSend(self, sel_configurationWithHierarchicalColor_, v50);

    id v53 = (void *)MEMORY[0x24C59F610](0x676E697265657473, 0xED00006C65656877);
    id v54 = CAFUIImageForSymbolNameWithConfiguration(v53, v52);

    if (v54)
    {
      id v55 = (char *)objc_msgSend(self, sel_textAttachmentWithImage_, v54);
    }
    else
    {

      id v55 = 0;
    }
  }
  else
  {
    id v55 = 0;
    uint64_t v51 = v147;
  }
  uint64_t v56 = UIListContentConfiguration.attributedText.getter();
  uint64_t v152 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v46;
  UIImage_optional v156 = v55;
  uint64_t v151 = v47;
  if (v56)
  {
    id v57 = (id)v56;
    if (v55)
    {
      CGRect v58 = v55;
      objc_msgSend(v57, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableAttributedString);
      swift_dynamicCast();
      id v59 = v166;
      id v60 = objc_allocWithZone(MEMORY[0x263F086A0]);
      id v61 = (void *)MEMORY[0x24C59F610](8224, 0xE200000000000000);
      id v62 = objc_msgSend(v60, sel_initWithString_, v61);

      objc_msgSend(v59, sel_appendAttributedString_, v62);
      id v63 = objc_msgSend(self, sel_attributedStringWithAttachment_, v58);
      objc_msgSend(v59, sel_appendAttributedString_, v63);

      id v64 = *(void **)&v31[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
      objc_msgSend(v64, sel_setLineBreakMode_, 5);
      id v65 = v59;
      objc_msgSend(v64, sel_setAttributedText_, v65);
    }
    else
    {
      id v64 = *(void **)&v31[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
      objc_msgSend(v64, sel_setLineBreakMode_, 4);
      objc_msgSend(v64, sel_setAttributedText_, v57);
    }
  }
  else if (v55)
  {
    id v66 = v55;
    uint64_t v67 = UIListContentConfiguration.text.getter();
    if (v68) {
      uint64_t v69 = v67;
    }
    else {
      uint64_t v69 = 0;
    }
    if (v68) {
      unint64_t v70 = v68;
    }
    else {
      unint64_t v70 = 0xE000000000000000;
    }
    id v71 = objc_allocWithZone(MEMORY[0x263F089B8]);
    id v72 = (void *)MEMORY[0x24C59F610](v69, v70);
    swift_bridgeObjectRelease();
    id v57 = objc_msgSend(v71, sel_initWithString_, v72);

    id v73 = objc_allocWithZone(MEMORY[0x263F086A0]);
    id v74 = (void *)MEMORY[0x24C59F610](8224, 0xE200000000000000);
    id v75 = objc_msgSend(v73, sel_initWithString_, v74);

    objc_msgSend(v57, sel_appendAttributedString_, v75);
    id v76 = objc_msgSend(self, sel_attributedStringWithAttachment_, v66);
    objc_msgSend(v57, sel_appendAttributedString_, v76);

    id v64 = *(void **)&v31[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
    objc_msgSend(v64, sel_setLineBreakMode_, 5);
    objc_msgSend(v64, sel_setAttributedText_, v57);
  }
  else
  {
    id v64 = *(void **)&v31[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
    objc_msgSend(v64, sel_setLineBreakMode_, 4);
    uint64_t v77 = UIListContentConfiguration.text.getter();
    if (v78)
    {
      id v57 = (id)MEMORY[0x24C59F610](v77);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v57 = 0;
    }
    objc_msgSend(v64, sel_setText_, v57);
  }
  id v153 = v64;

  id v79 = v154;
  UIListContentConfiguration.textProperties.getter();
  id v80 = (void *)UIListContentConfiguration.TextProperties.color.getter();
  id v81 = (void (*)(char *, uint64_t))v155[1];
  v81(v79, v51);
  objc_msgSend(v64, sel_setTextColor_, v80);

  uint64_t v82 = v51;
  id v83 = *(void (***)(void, void))&v31[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel];
  UIListContentConfiguration.secondaryTextProperties.getter();
  id v84 = (void *)UIListContentConfiguration.TextProperties.color.getter();
  v81(v79, v82);
  unint64_t v155 = v83;
  objc_msgSend(v83, sel_setTextColor_, v84);

  id v85 = v31;
  uint64_t v86 = *MEMORY[0x263F83580];
  double v87 = *MEMORY[0x263F81828];
  id v88 = self;
  id v89 = objc_msgSend(v88, sel_preferredFontDescriptorWithTextStyle_, v86);
  objc_msgSend(v89, sel_pointSize);
  double v91 = v90;

  id v92 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, v86);
  id v93 = self;
  id v94 = objc_msgSend(v93, sel_systemFontOfSize_weight_, v91, v87);
  id v95 = objc_msgSend(v92, sel_scaledFontForFont_, v94);

  id v96 = v153;
  objc_msgSend(v153, sel_setFont_, v95);

  id v97 = objc_msgSend(v85, sel_contentView);
  objc_msgSend(v97, sel_addSubview_, v96);

  uint64_t v98 = UIListContentConfiguration.image.getter();
  if (v98)
  {
    uint64_t v99 = (void *)v98;
    uint64_t v100 = *(void **)&v85[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_symbolView];
    objc_msgSend(v100, sel_setImage_, v98);
    id v101 = specialized CAFUICellProtocol.defaultImageColor.getter();
    objc_msgSend(v100, sel_setTintColor_, v101);

    id v102 = objc_msgSend(v85, sel_contentView);
    objc_msgSend(v102, sel_addSubview_, v100);

    uint64_t v103 = *MEMORY[0x263F83588];
    double v104 = *MEMORY[0x263F81838];
    id v105 = objc_msgSend(v88, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F83588]);
    objc_msgSend(v105, sel_pointSize);
    double v107 = v106;

    id v108 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, v103);
    id v109 = objc_msgSend(v93, sel_systemFontOfSize_weight_, v107, v104);
    id v110 = objc_msgSend(v108, sel_scaledFontForFont_, v109);

    id v48 = &selRef_setOpacity_;
    id v111 = v155;
    objc_msgSend(v155, sel_setFont_, v110);
  }
  else
  {
    double v112 = *MEMORY[0x263F81838];
    id v113 = objc_msgSend(v88, sel_preferredFontDescriptorWithTextStyle_, v86);
    objc_msgSend(v113, sel_pointSize);
    double v115 = v114;

    id v116 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, v86);
    id v117 = objc_msgSend(v93, sel_systemFontOfSize_weight_, v115, v112);
    id v110 = objc_msgSend(v116, sel_scaledFontForFont_, v117);

    id v48 = &selRef_setOpacity_;
    id v111 = v155;
    objc_msgSend(v155, sel_setFont_, v110);
  }
  id v31 = v85;
  uint64_t v119 = v161;
  uint64_t v118 = v162;

  id v120 = v163;
  uint64_t v121 = UIListContentConfiguration.secondaryAttributedText.getter();
  uint64_t v34 = v164;
  if (!v121)
  {
    uint64_t v131 = UIListContentConfiguration.secondaryText.getter();
    if (!v132) {
      goto LABEL_47;
    }
    uint64_t v167 = v131;
    uint64_t v168 = v132;
    unsigned int v133 = v144;
    static CharacterSet.whitespaces.getter();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v134 = StringProtocol.trimmingCharacters(in:)();
    unint64_t v136 = v135;
    (*(void (**)(char *, uint64_t))(v145 + 8))(v133, v146);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v137 = HIBYTE(v136) & 0xF;
    if ((v136 & 0x2000000000000000) == 0) {
      uint64_t v137 = v134 & 0xFFFFFFFFFFFFLL;
    }
    if (!v137) {
      goto LABEL_47;
    }
    uint64_t v138 = v143;
    outlined init with copy of UIListContentConfiguration?(v34, v143, &demangling cache variable for type metadata for UIListContentConfiguration?);
    if (v152(v138, 1, v118) == 1)
    {
      outlined destroy of UIContentConfiguration?(v138, &demangling cache variable for type metadata for UIListContentConfiguration?);
    }
    else
    {
      uint64_t v139 = UIListContentConfiguration.secondaryText.getter();
      uint64_t v141 = v140;
      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v138, v118);
      if (v141)
      {
        unsigned int v142 = (void *)MEMORY[0x24C59F610](v139, v141);
        swift_bridgeObjectRelease();
LABEL_61:
        objc_msgSend(v111, sel_setText_, v142);

        id v123 = objc_msgSend(v31, (SEL)&selRef_multipleSelectSettingService_didUpdateName_);
        objc_msgSend(v123, sel_addSubview_, v111);
        goto LABEL_46;
      }
    }
    unsigned int v142 = 0;
    goto LABEL_61;
  }
  uint64_t v122 = (void *)v121;
  objc_msgSend(v111, sel_setAttributedText_, v121);
  id v123 = objc_msgSend(v85, (SEL)&selRef_multipleSelectSettingService_didUpdateName_);
  objc_msgSend(v123, sel_addSubview_, v111);

LABEL_46:
LABEL_47:

  (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v118);
  uint64_t v33 = (int *)v165;
LABEL_48:
  id v124 = *(void **)(v34 + v33[5]);
  uint64_t v126 = v159;
  uint64_t v125 = v160;
  uint64_t v128 = v157;
  uint64_t v127 = v158;
  if (v124)
  {
    id v129 = v124;
    id v130 = [v31 v48[365]];
    objc_msgSend(v130, sel_addSubview_, v129);
  }
  CAFUITileBaseCell.setupConstraints()();
  MEMORY[0x24C59F910]();
  (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v128, v127, v125);
  if (objc_msgSend(self, sel_tableCellPlainBackgroundColor))
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v125);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v128, 0, 1, v125);
    MEMORY[0x24C59F900](v128);
    outlined destroy of CAFUIAutomakerSettingConfiguration(v34);
    return;
  }
LABEL_63:
  __break(1u);
}

Swift::Void __swiftcall CAFUITileBaseCell.setupConstraints()()
{
  uint64_t v1 = v0;
  uint64_t v273 = type metadata accessor for CharacterSet();
  uint64_t v272 = *(void *)(v273 - 8);
  MEMORY[0x270FA5388](v273);
  v271 = (char *)&v264 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UIListContentConfiguration();
  uint64_t v283 = *(void *)(v3 - 8);
  uint64_t v284 = v3;
  MEMORY[0x270FA5388](v3);
  v275 = (char *)&v264 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v280 = (uint64_t)&v264 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v274 = (char *)&v264 - v8;
  uint64_t v9 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v264 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v270 = (uint64_t)&v264 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v269 = (uint64_t)&v264 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v281 = (char *)&v264 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v264 - v21;
  MEMORY[0x270FA5388](v20);
  id v24 = (char *)&v264 - v23;
  id v25 = self;
  unint64_t v26 = &v1[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_modifiableTitleConstraints];
  swift_beginAccess();
  uint64_t v27 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  swift_bridgeObjectRetain();
  uint64_t v278 = v27;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v279 = v25;
  objc_msgSend(v25, sel_deactivateConstraints_, isa);

  v282 = (unint64_t *)v26;
  *(void *)unint64_t v26 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  v277 = v1;
  uint64_t v29 = (uint64_t)&v1[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v29, (uint64_t)v24, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  id v285 = (id)(v10 + 48);
  unsigned int v31 = v30(v24, 1, v9);
  v276 = v12;
  if (v31)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v24, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    uint64_t v33 = v283;
    uint64_t v32 = v284;
    uint64_t v34 = v282;
    goto LABEL_19;
  }
  id v35 = v274;
  outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v24, (uint64_t)v12);
  outlined destroy of UIContentConfiguration?((uint64_t)v24, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  id v36 = *(void **)&v12[*(int *)(v9 + 20)];
  id v37 = v36;
  outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v12);
  uint64_t v33 = v283;
  uint64_t v32 = v284;
  uint64_t v34 = v282;
  if (v36)
  {
    objc_msgSend(v37, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    outlined init with copy of UIListContentConfiguration?(v29, (uint64_t)v22, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    unsigned int v38 = v30(v22, 1, v9);
    id v265 = v37;
    uint64_t v268 = v9;
    v267 = v30;
    uint64_t v266 = v29;
    if (v38)
    {
      outlined destroy of UIContentConfiguration?((uint64_t)v22, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
      (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v33 + 56))(v35, 1, 1, v32);
      goto LABEL_7;
    }
    uint64_t v39 = (uint64_t)v276;
    outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v22, (uint64_t)v276);
    outlined destroy of UIContentConfiguration?((uint64_t)v22, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    outlined init with copy of UIListContentConfiguration?(v39, (uint64_t)v35, &demangling cache variable for type metadata for UIListContentConfiguration?);
    id v37 = v265;
    outlined destroy of CAFUIAutomakerSettingConfiguration(v39);
    if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v33 + 48))(v35, 1, v32) == 1)
    {
LABEL_7:
      outlined destroy of UIContentConfiguration?((uint64_t)v35, &demangling cache variable for type metadata for UIListContentConfiguration?);
      uint64_t v40 = v37;
      id v41 = objc_msgSend(v37, sel_centerYAnchor);
      id v42 = v277;
      id v43 = objc_msgSend(v277, sel_contentView);
      id v44 = objc_msgSend(v43, sel_centerYAnchor);

      uint64_t v45 = &off_26525C000;
      id v46 = objc_msgSend(v41, sel_constraintEqualToAnchor_, v44);

      id v47 = objc_msgSend(v37, sel_leadingAnchor);
      id v48 = objc_msgSend(v42, sel_contentView);
      id v49 = objc_msgSend(v48, sel_leadingAnchor);

      id v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_, v49);
      id v51 = objc_msgSend(v40, sel_trailingAnchor);
      id v52 = objc_msgSend(v42, sel_contentView);
      id v53 = objc_msgSend(v52, sel_trailingAnchor);

      v274 = (char *)objc_msgSend(v51, sel_constraintEqualToAnchor_, v53);
      id v54 = objc_msgSend(v40, sel_heightAnchor);
      id v55 = objc_msgSend(v42, sel_contentView);
      objc_msgSend(v55, sel_bounds);
      CGFloat v57 = v56;
      CGFloat v59 = v58;
      CGFloat v61 = v60;
      CGFloat v63 = v62;

      v288.origin.x = v57;
      v288.origin.y = v59;
      v288.size.width = v61;
      v288.size.height = v63;
      id v64 = objc_msgSend(v54, sel_constraintGreaterThanOrEqualToConstant_, CGRectGetHeight(v288));

      swift_beginAccess();
      if (*v34 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v259 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v66 = v259 + 4;
        if (!__OFADD__(v259, 4))
        {
LABEL_9:
          specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v66, 1);
          specialized Array._endMutation()();
          uint64_t v45 = (_UNKNOWN **)v46;
          MEMORY[0x24C59F700]();
          if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          {
LABEL_10:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            id v67 = v50;
            MEMORY[0x24C59F700]();
            if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            unint64_t v68 = v274;
            MEMORY[0x24C59F700]();
            if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            id v69 = v64;
            MEMORY[0x24C59F700]();
            if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();

            goto LABEL_17;
          }
LABEL_127:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v65 = *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v66 = v65 + 4;
        if (!__OFADD__(v65, 4)) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_127;
    }
    outlined destroy of UIContentConfiguration?((uint64_t)v35, &demangling cache variable for type metadata for UIListContentConfiguration?);
    id v169 = objc_msgSend(v37, sel_centerYAnchor);
    id v170 = v277;
    id v171 = objc_msgSend(v277, sel_contentView);
    id v172 = objc_msgSend(v171, sel_centerYAnchor);

    id v173 = objc_msgSend(v169, sel_constraintEqualToAnchor_, v172);
    id v174 = objc_msgSend(v37, sel_trailingAnchor);
    id v175 = objc_msgSend(v170, sel_contentView);
    id v176 = objc_msgSend(v175, sel_trailingAnchor);

    id v177 = objc_msgSend(v174, sel_constraintEqualToAnchor_constant_, v176, -8.0);
    swift_beginAccess();
    if (*v34 >> 62)
    {
      swift_bridgeObjectRetain();
      id v178 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v179 = (uint64_t)v178 + 2;
      if (!__OFADD__(v178, 2))
      {
LABEL_68:
        specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v179, 1);
        specialized Array._endMutation()();
        id v176 = v173;
        MEMORY[0x24C59F700]();
        id v178 = v265;
        if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          goto LABEL_69;
        }
        goto LABEL_142;
      }
    }
    else
    {
      id v178 = *(id *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v179 = (uint64_t)v178 + 2;
      if (!__OFADD__(v178, 2)) {
        goto LABEL_68;
      }
    }
    __break(1u);
LABEL_142:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_69:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v180 = v177;
    MEMORY[0x24C59F700]();
    if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

    self;
    uint64_t v181 = swift_dynamicCastObjCClass();
    if (!v181)
    {

      goto LABEL_18;
    }
    uint64_t v182 = (void *)v181;
    id v67 = v178;
    id v183 = objc_msgSend(v182, sel_image);
    if (!v183)
    {

LABEL_17:
LABEL_18:
      uint64_t v33 = v283;
      uint64_t v32 = v284;
      uint64_t v9 = v268;
      uint64_t v30 = v267;
      uint64_t v29 = v266;
      goto LABEL_19;
    }
    Swift::Int v184 = v183;
    objc_msgSend(v182, sel__setContinuousCornerRadius_, 6.0);
    id v185 = objc_msgSend(v182, sel_layer);
    objc_msgSend(v185, sel_setMasksToBounds_, 1);

    id v186 = v67;
    unint64_t v187 = (void *)MEMORY[0x24C59F610](0xD000000000000020, 0x8000000249534540);
    objc_msgSend(v182, sel_setAccessibilityIdentifier_, v187);

    objc_msgSend(v184, sel_size);
    if (v188 <= 78.0) {
      double v189 = v188;
    }
    else {
      double v189 = 78.0;
    }
    objc_msgSend(v184, sel_size);
    double v191 = v190;
    objc_msgSend(v184, sel_size);
    if (v191 > 78.0)
    {
      double v193 = v192 * 78.0;
      objc_msgSend(v184, sel_size);
      double v192 = v193 / v194;
    }
    if (v189 > 50.0) {
      double v195 = v189;
    }
    else {
      double v195 = 50.0;
    }
    if (v192 >= 50.0) {
      uint64_t v196 = 1;
    }
    else {
      uint64_t v196 = 2;
    }
    if (v192 >= 50.0) {
      double v197 = v192;
    }
    else {
      double v197 = v195;
    }
    if (v192 < 50.0) {
      double v189 = v195;
    }
    objc_msgSend(v182, sel_setContentMode_, v196);
    id v198 = objc_msgSend(v277, sel_contentView);
    id v199 = objc_msgSend(v198, sel_heightAnchor);

    id v200 = objc_msgSend(v182, sel_heightAnchor);
    id v201 = objc_msgSend(v199, sel_constraintGreaterThanOrEqualToAnchor_constant_, v200, 12.0);

    id v202 = objc_msgSend(v182, sel_heightAnchor);
    id v203 = objc_msgSend(v202, sel_constraintEqualToConstant_, v189);

    id v204 = objc_msgSend(v182, sel_widthAnchor);
    id v205 = objc_msgSend(v204, sel_constraintEqualToConstant_, v197);

    swift_beginAccess();
    if (*v34 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v262 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v207 = v262 + 3;
      if (!__OFADD__(v262, 3))
      {
LABEL_91:
        specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v207, 1);
        specialized Array._endMutation()();
        id v201 = v201;
        MEMORY[0x24C59F700]();
        if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        {
LABEL_92:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v208 = v203;
          MEMORY[0x24C59F700]();
          if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v209 = v205;
          MEMORY[0x24C59F700]();
          if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_endAccess();

          goto LABEL_18;
        }
LABEL_149:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_92;
      }
    }
    else
    {
      uint64_t v206 = *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v207 = v206 + 3;
      if (!__OFADD__(v206, 3)) {
        goto LABEL_91;
      }
    }
    __break(1u);
    goto LABEL_149;
  }
LABEL_19:
  uint64_t v70 = (uint64_t)v281;
  outlined init with copy of UIListContentConfiguration?(v29, (uint64_t)v281, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if (!v30((char *)v70, 1, v9))
  {
    uint64_t v72 = (uint64_t)v276;
    outlined init with copy of CAFUIAutomakerSettingConfiguration(v70, (uint64_t)v276);
    outlined destroy of UIContentConfiguration?(v70, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    uint64_t v71 = v280;
    outlined init with copy of UIListContentConfiguration?(v72, v280, &demangling cache variable for type metadata for UIListContentConfiguration?);
    outlined destroy of CAFUIAutomakerSettingConfiguration(v72);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v71, 1, v32) == 1) {
      goto LABEL_22;
    }
    uint64_t v266 = v29;
    v267 = v30;
    uint64_t v268 = v9;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v275, v71, v32);
    id v75 = (void *)UIListContentConfiguration.image.getter();

    id v76 = (char *)&off_26525C000;
    if (!v75)
    {
      id v101 = v277;
      id v89 = *(void **)&v277[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
      id v102 = objc_msgSend(v89, sel_leadingAnchor);
      id v103 = objc_msgSend(v101, sel_contentView);
      id v104 = objc_msgSend(v103, sel_leadingAnchor);

      id v105 = objc_msgSend(v102, sel_constraintEqualToAnchor_constant_, v104, 12.0);
      swift_beginAccess();
      id v96 = v105;
      MEMORY[0x24C59F700]();
      uint64_t v98 = &selRef_setOpacity_;
      if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      uint64_t v100 = (uint64_t)v276;
LABEL_38:

      uint64_t v106 = UIListContentConfiguration.secondaryText.getter();
      if (v107)
      {
        uint64_t v286 = v106;
        uint64_t v287 = v107;
        id v108 = v271;
        static CharacterSet.whitespaces.getter();
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v109 = StringProtocol.trimmingCharacters(in:)();
        unint64_t v111 = v110;
        (*(void (**)(char *, uint64_t))(v272 + 8))(v108, v273);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v112 = HIBYTE(v111) & 0xF;
        if ((v111 & 0x2000000000000000) == 0) {
          uint64_t v112 = v109 & 0xFFFFFFFFFFFFLL;
        }
        if (v112)
        {
          uint64_t v113 = v269;
          outlined init with copy of UIListContentConfiguration?(v266, v269, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
          uint64_t v114 = v268;
          if (v267((char *)v113, 1, v268))
          {
            outlined destroy of UIContentConfiguration?(v113, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
            goto LABEL_44;
          }
          outlined init with copy of CAFUIAutomakerSettingConfiguration(v113, v100);
          outlined destroy of UIContentConfiguration?(v113, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
          v225 = *(void **)(v100 + *(int *)(v114 + 20));
          id v226 = v225;
          outlined destroy of CAFUIAutomakerSettingConfiguration(v100);
          if (v225)
          {
            self;
            if (swift_dynamicCastObjCClass())
            {
              id v227 = objc_msgSend(v89, sel_bottomAnchor);
              v228 = v76;
              v229 = v277;
              id v230 = [v277 v98[365]];
              id v231 = objc_msgSend(v230, sel_centerYAnchor);

              v281 = (char *)objc_msgSend(v227, v228 + 750, v231);
              v232 = *(void **)&v229[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel];
              id v233 = objc_msgSend(v232, sel_topAnchor);
              id v234 = [v229 (SEL)v98 + 664];
              id v235 = objc_msgSend(v234, (SEL)&selRef_minimum + 6);

              id v236 = objc_msgSend(v233, v228 + 750, v235);
              id v237 = objc_msgSend(v89, sel_trailingAnchor);
              id v238 = objc_msgSend(v226, sel_leadingAnchor);
              id v239 = objc_msgSend(v237, sel_constraintEqualToAnchor_constant_, v238, -12.0);

              id v240 = objc_msgSend(v232, sel_leadingAnchor);
              id v241 = objc_msgSend(v89, sel_leadingAnchor);
              id v242 = objc_msgSend(v240, v228 + 750, v241);

              id v243 = objc_msgSend(v232, sel_trailingAnchor);
              id v285 = v89;
              id v244 = objc_msgSend(v89, sel_trailingAnchor);
              id v245 = objc_msgSend(v243, v228 + 750, v244);

              v246 = v282;
              swift_beginAccess();
              unint64_t v247 = *v246;
              if (v247 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v263 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                uint64_t v249 = v263 + 5;
                if (!__OFADD__(v263, 5))
                {
LABEL_111:
                  unint64_t v247 = (unint64_t)v282;
                  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v249, 1);
                  specialized Array._endMutation()();
                  v228 = v281;
                  MEMORY[0x24C59F700]();
                  if (*(void *)((*(void *)v247 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)v247 & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
                  {
LABEL_112:
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    id v250 = v236;
                    MEMORY[0x24C59F700]();
                    if (*(void *)((*(void *)v247 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v247 & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    id v251 = v239;
                    MEMORY[0x24C59F700]();
                    if (*(void *)((*(void *)v247 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v247 & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    id v252 = v242;
                    MEMORY[0x24C59F700]();
                    if (*(void *)((*(void *)v247 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v247 & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    id v253 = v245;
                    MEMORY[0x24C59F700]();
                    if (*(void *)((*(void *)v247 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v247 & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    swift_endAccess();

                    id v254 = v285;
                    objc_msgSend(v285, sel_setNumberOfLines_, 1);
                    LODWORD(v255) = 1144750080;
                    objc_msgSend(v226, sel_setContentCompressionResistancePriority_forAxis_, 0, v255);
                    LODWORD(v256) = 1132068864;
                    objc_msgSend(v254, sel_setContentCompressionResistancePriority_forAxis_, 0, v256);
                    LODWORD(v257) = 1132068864;
                    objc_msgSend(v232, sel_setContentCompressionResistancePriority_forAxis_, 0, v257);
                    id v258 = objc_msgSend(v277, sel_contentView);
                    LODWORD(v254) = objc_msgSend(v258, sel_effectiveUserInterfaceLayoutDirection) != 0;

                    objc_msgSend(v232, sel_setTextAlignment_, 2 * v254);
                    goto LABEL_56;
                  }
LABEL_153:
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  goto LABEL_112;
                }
              }
              else
              {
                uint64_t v248 = *(void *)((v247 & 0xFFFFFFFFFFFFFF8) + 0x10);
                uint64_t v249 = v248 + 5;
                if (!__OFADD__(v248, 5)) {
                  goto LABEL_111;
                }
              }
              __break(1u);
              goto LABEL_153;
            }
          }
LABEL_44:
          id v115 = objc_msgSend(v89, sel_centerYAnchor);
          id v116 = v76;
          id v117 = v89;
          uint64_t v118 = v277;
          id v119 = [v277 v98[365]];
          id v120 = objc_msgSend(v119, sel_centerYAnchor);

          id v285 = objc_msgSend(v115, v116 + 750, v120);
          uint64_t v121 = *(void **)&v118[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel];
          id v122 = objc_msgSend(v121, sel_centerYAnchor);
          id v123 = [v118 v98[365]];
          id v124 = objc_msgSend(v123, sel_centerYAnchor);

          id v125 = objc_msgSend(v122, v116 + 750, v124);
          id v126 = v117;
          id v127 = objc_msgSend(v117, sel_trailingAnchor);
          id v128 = objc_msgSend(v121, sel_leadingAnchor);
          id v129 = objc_msgSend(v127, sel_constraintEqualToAnchor_constant_, v128, -12.0);

          id v130 = objc_msgSend(v121, sel_trailingAnchor);
          id v131 = [v118 v98[365]];
          uint64_t v132 = v98;
          id v133 = objc_msgSend(v131, sel_trailingAnchor);

          id v134 = objc_msgSend(v130, sel_constraintEqualToAnchor_constant_, v133, -12.0);
          id v135 = objc_msgSend(v121, sel_widthAnchor);
          id v136 = [v118 (SEL)v132 + 664];
          id v137 = objc_msgSend(v136, sel_widthAnchor);

          id v138 = objc_msgSend(v135, sel_constraintLessThanOrEqualToAnchor_multiplier_, v137, 0.5);
          uint64_t v139 = v282;
          swift_beginAccess();
          unint64_t v140 = *v139;
          if (v140 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v261 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            uint64_t v142 = v261 + 5;
            if (!__OFADD__(v261, 5))
            {
LABEL_46:
              id v137 = v126;
              unint64_t v140 = (unint64_t)v282;
              specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v142, 1);
              specialized Array._endMutation()();
              id v126 = v285;
              MEMORY[0x24C59F700]();
              if (*(void *)((*(void *)v140 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)v140 & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
              {
LABEL_47:
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                id v143 = v125;
                MEMORY[0x24C59F700]();
                if (*(void *)((*(void *)v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v140 & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                id v144 = v129;
                MEMORY[0x24C59F700]();
                if (*(void *)((*(void *)v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v140 & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                id v145 = v134;
                MEMORY[0x24C59F700]();
                if (*(void *)((*(void *)v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v140 & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                id v146 = v138;
                MEMORY[0x24C59F700]();
                if (*(void *)((*(void *)v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v140 & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                swift_endAccess();

                objc_msgSend(v137, sel_setNumberOfLines_, 2);
                LODWORD(v147) = 1132068864;
                objc_msgSend(v137, sel_setContentCompressionResistancePriority_forAxis_, 0, v147);
                LODWORD(v148) = 1144750080;
                objc_msgSend(v121, sel_setContentCompressionResistancePriority_forAxis_, 0, v148);
                id v149 = objc_msgSend(v277, sel_contentView);
                BOOL v150 = objc_msgSend(v149, sel_effectiveUserInterfaceLayoutDirection) == 0;

                objc_msgSend(v121, sel_setTextAlignment_, 2 * v150);
LABEL_56:
                uint64_t v152 = v283;
                uint64_t v151 = v284;
                id v73 = v279;
LABEL_106:
                (*(void (**)(char *, uint64_t))(v152 + 8))(v275, v151);
                goto LABEL_23;
              }
LABEL_138:
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              goto LABEL_47;
            }
          }
          else
          {
            uint64_t v141 = *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10);
            uint64_t v142 = v141 + 5;
            if (!__OFADD__(v141, 5)) {
              goto LABEL_46;
            }
          }
          __break(1u);
          goto LABEL_138;
        }
      }
      uint64_t v153 = v270;
      outlined init with copy of UIListContentConfiguration?(v266, v270, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
      uint64_t v154 = v268;
      unsigned int v155 = v267((char *)v153, 1, v268);
      UIImage_optional v156 = v282;
      if (v155)
      {
        outlined destroy of UIContentConfiguration?(v153, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
        goto LABEL_59;
      }
      outlined init with copy of CAFUIAutomakerSettingConfiguration(v153, v100);
      outlined destroy of UIContentConfiguration?(v153, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
      v210 = *(void **)(v100 + *(int *)(v154 + 20));
      id v211 = v210;
      outlined destroy of CAFUIAutomakerSettingConfiguration(v100);
      if (!v210)
      {
LABEL_59:
        id v157 = objc_msgSend(v89, sel_centerYAnchor);
        id v158 = v277;
        id v159 = [v277 v98[365]];
        id v160 = objc_msgSend(v159, sel_centerYAnchor);

        id v161 = objc_msgSend(v157, *((SEL *)v76 + 430), v160);
        id v162 = objc_msgSend(v89, sel_trailingAnchor);
        id v163 = [v158 v98[365]];
        id v164 = objc_msgSend(v163, sel_trailingAnchor);

        id v165 = objc_msgSend(v162, sel_constraintEqualToAnchor_constant_, v164, -12.0);
        swift_beginAccess();
        if (*v156 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v166 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v166 = *(void *)((*v156 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v152 = v283;
        uint64_t v151 = v284;
        id v73 = v279;
        if (__OFADD__(v166, 2))
        {
          __break(1u);
        }
        else
        {
          specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v166 + 2, 1);
          specialized Array._endMutation()();
          id v161 = v161;
          MEMORY[0x24C59F700]();
          if (*(void *)((*v156 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v156 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          {
LABEL_63:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            id v167 = v165;
            MEMORY[0x24C59F700]();
            if (*(void *)((*v156 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v156 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();

            LODWORD(v168) = 1144750080;
            objc_msgSend(v89, sel_setContentCompressionResistancePriority_forAxis_, 0, v168);
LABEL_105:
            objc_msgSend(v89, sel_setNumberOfLines_, 2);
            goto LABEL_106;
          }
        }
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_63;
      }
      id v212 = objc_msgSend(v89, sel_centerYAnchor);
      id v213 = [v277 v98[365]];
      id v214 = objc_msgSend(v213, sel_centerYAnchor);

      id v215 = objc_msgSend(v212, *((SEL *)v76 + 430), v214);
      id v216 = objc_msgSend(v89, sel_trailingAnchor);
      v217 = v156;
      id v218 = objc_msgSend(v211, sel_leadingAnchor);
      id v219 = objc_msgSend(v216, sel_constraintEqualToAnchor_constant_, v218, -12.0);

      swift_beginAccess();
      unint64_t v220 = *v217;
      if (*v217 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v221 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v221 = *(void *)((v220 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v152 = v283;
      uint64_t v151 = v284;
      id v73 = v279;
      if (__OFADD__(v221, 2))
      {
        __break(1u);
      }
      else
      {
        unint64_t v220 = (unint64_t)v282;
        specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v221 + 2, 1);
        specialized Array._endMutation()();
        id v215 = v215;
        MEMORY[0x24C59F700]();
        if (*(void *)((*(void *)v220 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)v220 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
        {
LABEL_102:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v222 = v219;
          MEMORY[0x24C59F700]();
          if (*(void *)((*(void *)v220 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v220 & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_endAccess();

          LODWORD(v223) = 1144750080;
          objc_msgSend(v211, sel_setContentCompressionResistancePriority_forAxis_, 0, v223);
          LODWORD(v224) = 1132068864;
          objc_msgSend(v89, sel_setContentCompressionResistancePriority_forAxis_, 0, v224);

          goto LABEL_105;
        }
      }
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      goto LABEL_102;
    }
    uint64_t v77 = v277;
    uint64_t v78 = *(void **)&v277[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_symbolView];
    id v79 = objc_msgSend(v78, sel_leadingAnchor);
    id v80 = objc_msgSend(v77, sel_contentView);
    id v81 = objc_msgSend(v80, sel_leadingAnchor);

    v281 = (char *)objc_msgSend(v79, sel_constraintEqualToAnchor_, v81);
    id v82 = objc_msgSend(v78, sel_centerYAnchor);
    id v83 = objc_msgSend(v77, sel_contentView);
    id v84 = (char *)&off_26525C000;
    id v85 = objc_msgSend(v83, sel_centerYAnchor);

    id v86 = objc_msgSend(v82, (SEL)&off_26525C2E8 + 6, v85);
    id v87 = objc_msgSend(v78, sel_widthAnchor);
    id v88 = objc_msgSend(v87, sel_constraintEqualToConstant_, 52.0);

    id v89 = *(void **)&v77[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
    id v90 = objc_msgSend(v89, sel_leadingAnchor);
    id v91 = objc_msgSend(v78, sel_trailingAnchor);
    id v92 = objc_msgSend(v90, (SEL)&off_26525C2E8 + 6, v91);

    swift_beginAccess();
    unint64_t v93 = *v34;
    if (*v34 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v260 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v95 = v260 + 4;
      if (!__OFADD__(v260, 4))
      {
LABEL_27:
        unint64_t v93 = (unint64_t)v282;
        specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v95, 1);
        specialized Array._endMutation()();
        id v84 = v281;
        MEMORY[0x24C59F700]();
        if (*(void *)((*(void *)v93 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)v93 & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
        {
LABEL_28:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v96 = v86;
          MEMORY[0x24C59F700]();
          if (*(void *)((*(void *)v93 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v93 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v97 = v88;
          MEMORY[0x24C59F700]();
          uint64_t v98 = &selRef_setOpacity_;
          if (*(void *)((*(void *)v93 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v93 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v99 = v92;
          MEMORY[0x24C59F700]();
          if (*(void *)((*(void *)v93 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v93 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_endAccess();

          uint64_t v100 = (uint64_t)v276;
          id v76 = (char *)&off_26525C000;
          goto LABEL_38;
        }
LABEL_131:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v94 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v95 = v94 + 4;
      if (!__OFADD__(v94, 4)) {
        goto LABEL_27;
      }
    }
    __break(1u);
    goto LABEL_131;
  }
  outlined destroy of UIContentConfiguration?(v70, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v71 = v280;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v280, 1, 1, v32);
LABEL_22:
  outlined destroy of UIContentConfiguration?(v71, &demangling cache variable for type metadata for UIListContentConfiguration?);
  id v73 = v279;
LABEL_23:
  swift_bridgeObjectRetain();
  Class v74 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v73, sel_activateConstraints_, v74);
}

id specialized CAFUICellProtocol.defaultImageColor.getter()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))())
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0x58))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      uint64_t v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      uint64_t v2 = &selRef__carSystemFocusColor;
    }
  }
  else
  {
    uint64_t v2 = &selRef_grayColor;
  }
  id v3 = [self *v2];

  return v3;
}

{
  void *v0;
  void *v1;
  char **v2;
  id v3;
  uint64_t vars8;

  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))())
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0xB8))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      uint64_t v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      uint64_t v2 = &selRef__carSystemFocusColor;
    }
  }
  else
  {
    uint64_t v2 = &selRef_grayColor;
  }
  id v3 = [self *v2];

  return v3;
}

id specialized CAFUICellProtocol.defaultAccessoryColor.getter()
{
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))())
  {
    if ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)) {
      uint64_t v1 = &selRef__carSystemFocusLabelColor;
    }
    else {
      uint64_t v1 = &selRef_secondaryLabelColor;
    }
  }
  else
  {
    uint64_t v1 = &selRef_secondarySystemFillColor;
  }
  id v2 = [self *v1];

  return v2;
}

{
  void *v0;
  char **v1;
  id v2;
  uint64_t vars8;

  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))())
  {
    if ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)) {
      uint64_t v1 = &selRef__carSystemFocusLabelColor;
    }
    else {
      uint64_t v1 = &selRef_secondaryLabelColor;
    }
  }
  else
  {
    uint64_t v1 = &selRef_secondarySystemFillColor;
  }
  id v2 = [self *v1];

  return v2;
}

id specialized CAFUICellProtocol.defaultSecondaryTextColor.getter()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))())
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0x58))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      id v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      id v2 = &selRef_secondaryLabelColor;
    }
  }
  else
  {
    id v2 = &selRef_grayColor;
  }
  id v3 = [self *v2];

  return v3;
}

{
  void *v0;
  void *v1;
  char **v2;
  id v3;
  uint64_t vars8;

  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))())
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0xB8))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      id v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      id v2 = &selRef_secondaryLabelColor;
    }
  }
  else
  {
    id v2 = &selRef_grayColor;
  }
  id v3 = [self *v2];

  return v3;
}

id CAFUITileBaseCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CAFUITileBaseCell.init(coder:)()
{
  v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  uint64_t v2 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *CAFUITileBaseCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  v4[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell] = 0;
  uint64_t v9 = &v4[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  uint64_t v10 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  id v11 = objc_allocWithZone(MEMORY[0x263F82828]);
  uint64_t v12 = v4;
  id v13 = objc_msgSend(v11, sel_init);
  *(void *)&v12[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_symbolView] = v13;
  objc_msgSend(v13, sel_setContentMode_, 4);
  objc_msgSend(v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v14 = v13;
  uint64_t v15 = (void *)MEMORY[0x24C59F610](0xD00000000000001FLL, 0x80000002495346B0);
  objc_msgSend(v14, sel_setAccessibilityIdentifier_, v15);

  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  *(void *)&v12[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel] = v16;
  objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v17 = v16;
  uint64_t v18 = (void *)MEMORY[0x24C59F610](0xD00000000000001ALL, 0x80000002495346D0);
  objc_msgSend(v17, sel_setAccessibilityIdentifier_, v18);

  id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  *(void *)&v12[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel] = v19;
  objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v20 = v19;
  uint64_t v21 = (void *)MEMORY[0x24C59F610](0xD00000000000001DLL, 0x80000002495346F0);
  objc_msgSend(v20, sel_setAccessibilityIdentifier_, v21);

  *(void *)&v12[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_modifiableTitleConstraints] = MEMORY[0x263F8EE78];
  v54.receiver = v12;
  v54.super_class = (Class)type metadata accessor for CAFUITileBaseCell();
  uint64_t v22 = objc_msgSendSuper2(&v54, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v23 = (void *)MEMORY[0x24C59F610](0xD000000000000019, 0x8000000249534710);
  objc_msgSend(v22, sel_setAccessibilityIdentifier_, v23);

  uint64_t v24 = OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel;
  id v25 = *(void **)((char *)v22 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel);
  objc_msgSend(v25, sel_setNumberOfLines_, 2);
  unint64_t v26 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v22) + 0xB0);
  id v27 = v25;
  uint64_t v28 = (void *)v26();
  objc_msgSend(v27, sel_setTextColor_, v28);

  uint64_t v29 = *(void **)((char *)v22 + v24);
  uint64_t v30 = *MEMORY[0x263F83580];
  double v31 = *MEMORY[0x263F81828];
  uint64_t v32 = self;
  id v33 = v29;
  id v34 = objc_msgSend(v32, sel_preferredFontDescriptorWithTextStyle_, v30);
  objc_msgSend(v34, sel_pointSize);
  double v36 = v35;

  id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, v30);
  unsigned int v38 = self;
  id v39 = objc_msgSend(v38, sel_systemFontOfSize_weight_, v36, v31);
  id v40 = objc_msgSend(v37, sel_scaledFontForFont_, v39);

  objc_msgSend(v33, sel_setFont_, v40);
  uint64_t v41 = OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel;
  id v42 = *(id *)((char *)v22 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel);
  id v43 = specialized CAFUICellProtocol.defaultSecondaryTextColor.getter();
  objc_msgSend(v42, sel_setTextColor_, v43);

  uint64_t v44 = *MEMORY[0x263F83588];
  double v45 = *MEMORY[0x263F81838];
  id v46 = *(id *)((char *)v22 + v41);
  id v47 = objc_msgSend(v32, sel_preferredFontDescriptorWithTextStyle_, v44);
  objc_msgSend(v47, sel_pointSize);
  double v49 = v48;

  id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, v44);
  id v51 = objc_msgSend(v38, sel_systemFontOfSize_weight_, v49, v45);
  id v52 = objc_msgSend(v50, sel_scaledFontForFont_, v51);

  objc_msgSend(v46, sel_setFont_, v52);
  return v22;
}

id CAFUITileBaseCell.updateConfiguration(using:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v50 = a1;
  uint64_t v3 = type metadata accessor for UICellConfigurationState();
  uint64_t v51 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  double v48 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  double v49 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  id v52 = (char *)&v42 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v42 - v17;
  id v19 = *(void **)((char *)v1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_symbolView);
  id v20 = specialized CAFUICellProtocol.defaultImageColor.getter();
  objc_msgSend(v19, sel_setTintColor_, v20);

  uint64_t v21 = *(void **)((char *)v2 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel);
  uint64_t v22 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0xB0))();
  objc_msgSend(v21, sel_setTextColor_, v22);

  uint64_t v23 = *(void **)((char *)v2 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel);
  id v24 = specialized CAFUICellProtocol.defaultSecondaryTextColor.getter();
  id v25 = v23;
  uint64_t v26 = v12;
  objc_msgSend(v25, sel_setTextColor_, v24);

  MEMORY[0x24C59F8F0]();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return (id)outlined destroy of UIContentConfiguration?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  }
  id v46 = v8;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v10, v11);
  v53[3] = v3;
  v53[4] = MEMORY[0x263F81ED0];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
  uint64_t v29 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 16);
  uint64_t v47 = v3;
  v29(boxed_opaque_existential_1, v50, v3);
  uint64_t v30 = v49;
  double v45 = v18;
  UIBackgroundConfiguration.updated(for:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v53);
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v44(v52, v30, v11);
  id v42 = self;
  id result = objc_msgSend(v42, sel_tableCellPlainBackgroundColor);
  if (!result)
  {
    __break(1u);
    return result;
  }
  UIBackgroundConfiguration.backgroundColor.setter();
  uint64_t v43 = v26;
  double v31 = *(void (**)(char *, uint64_t))(v26 + 8);
  v31(v30, v11);
  uint64_t v32 = v50;
  char v33 = UICellConfigurationState.isHighlighted.getter();
  id v34 = v48;
  v29((uint64_t *)v48, v32, v47);
  if (v33)
  {
    uint64_t v35 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v34, v47);
    id v37 = v45;
    double v36 = v46;
    unsigned int v38 = v44;
    goto LABEL_7;
  }
  char v39 = UICellConfigurationState.isSelected.getter();
  uint64_t v35 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v34, v47);
  id v37 = v45;
  double v36 = v46;
  unsigned int v38 = v44;
  if (v39)
  {
LABEL_7:
    if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v2) + 0xB8))(v35))
    {
      id v40 = objc_msgSend(v42, sel__carSystemFocusColor);
      UIBackgroundConfiguration.backgroundColor.setter();
    }
  }
  uint64_t v41 = v52;
  v38(v36, v52, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v36, 0, 1, v11);
  MEMORY[0x24C59F900](v36);
  v31(v41, v11);
  return (id)((uint64_t (*)(char *, uint64_t))v31)(v37, v11);
}

uint64_t static CAFUITileBaseCell.disclosureAccessory(cell:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static CAFUITileBaseCell.disclosureAccessory(cell:)(a1, (uint64_t (*)(uint64_t))specialized static CAFUITileBaseCell.chevronImageView(cell:), a2);
}

uint64_t outlined init with take of CAFUIAutomakerSettingConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static CAFUITileBaseCell.arrowUpAccessory(cell:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static CAFUITileBaseCell.disclosureAccessory(cell:)(a1, (uint64_t (*)(uint64_t))specialized static CAFUITileBaseCell.arrowUpImageView(cell:), a2);
}

uint64_t static CAFUITileBaseCell.disclosureAccessory(cell:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  v23[1] = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICellAccessory.LayoutDimension?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UICellAccessory.Placement();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UICellAccessory.CustomViewConfiguration();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)a2(a1);
  uint64_t v17 = (uint64_t (**)())&v11[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayed: UICellAccessory.DisplayedState, at: ()))
                                    + 48)];
  uint64_t v18 = *MEMORY[0x263F81DE8];
  uint64_t v19 = type metadata accessor for UICellAccessory.DisplayedState();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v11, v18, v19);
  char *v17 = protocol witness for CAFListContentRepresentable.prominenceInfo.getter in conformance CAFPairedDevicesInformation;
  v17[1] = 0;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F81E00], v8);
  uint64_t v20 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 1, 1, v20);
  id v21 = v16;
  UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
  static UICellAccessory.customView(configuration:)();

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

Swift::Void __swiftcall CAFUITileBaseCell.prepareForReuse()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for CAFUITileBaseCell();
  objc_msgSendSuper2(&v1, sel_prepareForReuse);
  UICollectionViewListCell.accessories.setter();
}

id closure #1 in static CAFUITileBaseCell.chevronImageView(cell:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x24C5A0810](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = specialized CAFUICellProtocol.defaultSecondaryTextColor.getter();

    return v5;
  }
  else
  {
    id v7 = objc_msgSend(self, sel_secondaryLabelColor);
    return v7;
  }
}

id closure #1 in static CAFUITileBaseCell.arrowUpImageView(cell:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x24C5A0810](v2);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0xB0))();

    return (id)v5;
  }
  else
  {
    id v7 = objc_msgSend(self, sel_labelColor);
    return v7;
  }
}

id CAFUITileBaseCell.__deallocating_deinit()
{
  return CAFUITileBaseCell.__deallocating_deinit(0, type metadata accessor for CAFUITileBaseCell);
}

uint64_t protocol witness for CAFUICellProtocol.primaryTextColor.getter in conformance CAFUITileBaseCell()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t protocol witness for CAFUICellProtocol.isHighlightable.getter in conformance CAFUITileBaseCell()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t protocol witness for CAFUICellProtocol.isCellEnabled.getter in conformance CAFUITileBaseCell()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t CAFUIAutomakerSettingObserver.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC5CAFUI29CAFUIAutomakerSettingObserver_delegate;
  swift_beginAccess();
  return MEMORY[0x24C5A0810](v1);
}

uint64_t CAFUIAutomakerSettingObserver.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC5CAFUI29CAFUIAutomakerSettingObserver_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CAFUIAutomakerSettingObserver.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC5CAFUI29CAFUIAutomakerSettingObserver_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x24C5A0810](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return CAFUIAutomakerSettingObserver.delegate.modify;
}

void CAFUIAutomakerSettingObserver.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23C48, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_263);
}

uint64_t CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateDisabled:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23BF8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_256);
}

uint64_t CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateLimitableUIElement:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23BA8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_249);
}

uint64_t CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateHidden:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23B58, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_242);
}

uint64_t CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateShowAudioBrandLogo:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23B08, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_235);
}

uint64_t CAFUIAutomakerSettingObserver.BOOLeanSettingService(_:didUpdateOn:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23AB8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_228);
}

uint64_t CAFUIAutomakerSettingObserver.BOOLeanSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23A68, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_221);
}

uint64_t CAFUIAutomakerSettingObserver.buttonSettingService(_:didUpdateButtonAction:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23A18, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_214);
}

uint64_t CAFUIAutomakerSettingObserver.buttonSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD239C8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_207);
}

uint64_t CAFUIAutomakerSettingObserver.deepLinkSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23978, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_200);
}

uint64_t CAFUIAutomakerSettingObserver.deepLinkSettingService(_:didUpdateUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23928, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_193);
}

uint64_t CAFUIAutomakerSettingObserver.floatSettingService(_:didUpdateValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD238D8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_186);
}

uint64_t CAFUIAutomakerSettingObserver.floatSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23888, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_179);
}

uint64_t CAFUIAutomakerSettingObserver.floatSettingService(_:didUpdateMaximumSymbolName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23838, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_172);
}

uint64_t CAFUIAutomakerSettingObserver.floatSettingService(_:didUpdateMinimumSymbolName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD237E8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_165);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23798, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_158);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23748, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_151);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateStepperBarHidden:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD236F8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_144);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateMaximumSymbolName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD236A8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_137);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateMinimumSymbolName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23658, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_130);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23608, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_123);
}

uint64_t @objc CAFUIAutomakerSettingObserver.deepLinkSettingService(_:didUpdateUserVisibleValue:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v12 = a3;
  id v13 = a1;
  specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(v12, a5, a6, a7);

  return swift_bridgeObjectRelease();
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectSettingService(_:didUpdateSelectedEntryIndex:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD235B8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_116);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectSettingService(_:didUpdateSelectSettingEntryList:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23568, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_109);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23518, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_102);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectImageSettingService(_:didUpdateCurrentUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD234C8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_95);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23478, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_88);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectImageSettingService(_:didUpdateImages:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23428, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_81);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectImageSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD233D8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_74_0);
}

uint64_t CAFUIAutomakerSettingObserver.staticSettingService(_:didUpdateUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23388, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_67);
}

uint64_t CAFUIAutomakerSettingObserver.staticSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23338, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_60);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectSettingService(_:didUpdateSelectedEntryIndices:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD232E8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_53);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectSettingService(_:didUpdateSelectSettingEntryList:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23298, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_46);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23248, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_39);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectImageSettingService(_:didUpdateIndicesUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD231F8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_32);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD231A8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_25);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectImageSettingService(_:didUpdateImages:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23158, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_18);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectImageSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_26FD23108, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_1);
}

id CAFUIAutomakerSettingObserver.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id CAFUIAutomakerSettingObserver.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI29CAFUIAutomakerSettingObserver_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIAutomakerSettingObserver();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CAFUIAutomakerSettingObserver.__deallocating_deinit(uint64_t a1)
{
  return CAFUITileBaseCell.__deallocating_deinit(a1, type metadata accessor for CAFUIAutomakerSettingObserver);
}

id CAFUITileBaseCell.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, char a2)
{
  unint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *objc_super v2 = v5;
  uint64_t v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = MEMORY[0x24C59FC60](v7, v9, a2 & 1, v5);
  *objc_super v2 = result;
  return result;
}

id specialized static CAFUITileBaseCell.chevronImageView(cell:)()
{
  uint64_t v0 = *MEMORY[0x263F83580];
  id v1 = self;
  id v2 = objc_msgSend(v1, sel_configurationWithTextStyle_scale_, v0, 1);
  id v3 = objc_msgSend(v1, sel_configurationWithWeight_, 6);
  id v4 = objc_msgSend(v2, sel_configurationByApplyingConfiguration_, v3);

  id v5 = v4;
  uint64_t v6 = (void *)MEMORY[0x24C59F610](0x2E6E6F7276656863, 0xEF64726177726F66);
  id v7 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v6, v5);

  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_imageWithRenderingMode_, 2);
  }
  else
  {
    id v8 = 0;
  }
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v8);
  objc_msgSend(v9, sel_setContentMode_, 4);
  id v10 = v9;
  uint64_t v11 = (void *)MEMORY[0x24C59F610](0xD000000000000015, 0x8000000249534730);
  objc_msgSend(v10, sel_setAccessibilityIdentifier_, v11);

  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v13 = objc_allocWithZone(MEMORY[0x263F825C8]);
  v17[4] = partial apply for closure #1 in static CAFUITileBaseCell.chevronImageView(cell:);
  v17[5] = v12;
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 1107296256;
  v17[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  v17[3] = &block_descriptor_269;
  uint64_t v14 = _Block_copy(v17);
  swift_retain();
  id v15 = objc_msgSend(v13, sel_initWithDynamicProvider_, v14);
  _Block_release(v14);
  swift_release();
  swift_release();
  objc_msgSend(v10, sel_setTintColor_, v15);

  return v10;
}

void specialized static CAFUITileBaseCell.arrowUpImageView(cell:)()
{
  uint64_t v0 = *MEMORY[0x263F83580];
  id v1 = self;
  id v2 = objc_msgSend(v1, sel_configurationWithTextStyle_scale_, v0, 2);
  id v3 = objc_msgSend(v1, sel_configurationWithWeight_, 5);
  id v4 = objc_msgSend(v2, sel_configurationByApplyingConfiguration_, v3);

  id v5 = v4;
  uint64_t v6 = (void *)MEMORY[0x24C59F610](0xD000000000000019, 0x8000000249534780);
  id v7 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v6, v5);

  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_imageWithRenderingMode_, 2);

    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v8);
    objc_msgSend(v9, sel_setContentMode_, 4);
    id v10 = v9;
    uint64_t v11 = (void *)MEMORY[0x24C59F610](0xD000000000000015, 0x80000002495347A0);
    objc_msgSend(v10, sel_setAccessibilityIdentifier_, v11);

    uint64_t v12 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v13 = objc_allocWithZone(MEMORY[0x263F825C8]);
    v16[4] = partial apply for closure #1 in static CAFUITileBaseCell.arrowUpImageView(cell:);
    v16[5] = v12;
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 1107296256;
    v16[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
    v16[3] = &block_descriptor_273;
    uint64_t v14 = _Block_copy(v16);
    swift_retain();
    id v15 = objc_msgSend(v13, sel_initWithDynamicProvider_, v14);
    _Block_release(v14);
    swift_release();
    swift_release();
    objc_msgSend(v10, sel_setTintColor_, v15);
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for CAFUITileBaseCell()
{
  uint64_t result = type metadata singleton initialization cache for CAFUITileBaseCell;
  if (!type metadata singleton initialization cache for CAFUITileBaseCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v24[1] = a2;
  uint64_t v25 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v4 + OBJC_IVAR____TtC5CAFUI29CAFUIAutomakerSettingObserver_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x24C5A0810](v15);
  if (result)
  {
    uint64_t v17 = result;
    v24[0] = v11;
    uint64_t v18 = *(void *)(v15 + 8);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v19 = a4;
    uint64_t v20 = (void *)static OS_dispatch_queue.main.getter();
    id v21 = (void *)swift_allocObject();
    v21[2] = v17;
    v21[3] = v18;
    v21[4] = a1;
    aBlock[4] = v25;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = v19;
    uint64_t v22 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    id v23 = a1;
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x24C59F8E0](0, v14, v10, v22);
    _Block_release(v22);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return (*(uint64_t (**)(char *, void))(v12 + 8))(v14, v24[0]);
  }
  return result;
}

uint64_t type metadata accessor for CAFUIAutomakerSettingObserver()
{
  return self;
}

uint64_t sub_2494E26F0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_2494E2744(char *a1, void *a2)
{
  char v2 = *a1;
  id v3 = (unsigned char *)(*a2 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
  uint64_t result = swift_beginAccess();
  *id v3 = v2;
  return result;
}

uint64_t ObjC metadata update function for CAFUITileBaseCell()
{
  return type metadata accessor for CAFUITileBaseCell();
}

void type metadata completion function for CAFUITileBaseCell()
{
  type metadata accessor for CAFUIAutomakerSettingConfiguration?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for CAFUIAutomakerSettingConfiguration?()
{
  if (!lazy cache variable for type metadata for CAFUIAutomakerSettingConfiguration?)
  {
    type metadata accessor for CAFUIAutomakerSettingConfiguration(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    }
  }
}

uint64_t outlined destroy of weak CAFUIAutomakerSettingObserverDelegate?(uint64_t a1)
{
  return a1;
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v2, ObjectType, v1);
}

uint64_t sub_2494E2A78()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #1 in static CAFUITileBaseCell.chevronImageView(cell:)(uint64_t a1)
{
  return closure #1 in static CAFUITileBaseCell.chevronImageView(cell:)(a1, v1);
}

id partial apply for closure #1 in static CAFUITileBaseCell.arrowUpImageView(cell:)(uint64_t a1)
{
  return closure #1 in static CAFUITileBaseCell.arrowUpImageView(cell:)(a1, v1);
}

id CAFUIAccountManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

uint64_t CAFUIAccountManager.firstName.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_account);
  if (!v1) {
    return 0;
  }
  id v2 = objc_msgSend(v1, sel_aa_firstName);
  if (!v2) {
    return 0;
  }
  id v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

id CAFUIAccountManager.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_accountStore;
  id v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_defaultStore);
  *(void *)&v0[v1] = v4;
  id v5 = objc_msgSend(v4, sel_aa_primaryAppleAccount);
  *(void *)&v3[OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_account] = v5;
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F25D08]), sel_initWithAppleAccount_grandSlamAccount_accountStore_, v5, 0, v4);
  *(void *)&v3[OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_pictureStore] = v6;

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for CAFUIAccountManager();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for CAFUIAccountManager()
{
  return self;
}

id CAFUIAccountManager.avatarImage(diameter:)()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_pictureStore);
  objc_msgSend(v1, sel_setPictureDiameter_);
  id v2 = objc_msgSend(v1, sel_profilePictureForAccountOwner);

  return v2;
}

id CAFUIAccountManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIAccountManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void CAFUIImageRepresentableItem.init(name:image:decoratorImage:enabled:userInfo:accentColor:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)(a8 + 72) = 0;
  *(_OWORD *)(a8 + 40) = 0u;
  *(_OWORD *)(a8 + 56) = 0u;
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(unsigned char *)(a8 + 32) = a5;
  outlined assign with take of Any?(a6, a8 + 40);

  *(void *)(a8 + 72) = a7;
}

uint64_t CAFUIImageRepresentable.toggle(index:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v61 = MEMORY[0x263F8EE78];
  if ((a1 & 0x8000000000000000) != 0) {
    return v16;
  }
  uint64_t v55 = v13;
  unint64_t v17 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3) + 16);
  swift_bridgeObjectRelease();
  if (v17 <= a1) {
    return v16;
  }
  id v53 = v12;
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  uint64_t v56 = a2;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 8))(a2);
  uint64_t v54 = v4;
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t v59 = v18;
  unint64_t v60 = v20;
  v21._object = (void *)0x8000000249534810;
  v21._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v21);
  uint64_t v58 = a1;
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  uint64_t v23 = v59;
  unint64_t v24 = v60;
  os_log_type_t v25 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v25, v23, v24, 0x6928656C67676F74, 0xEE00293A7865646ELL);
  uint64_t v26 = v56;
  swift_bridgeObjectRelease();
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(v26, a3);
  uint64_t v28 = a1;
  uint64_t v29 = (void *)v27;
  uint64_t v59 = v27;
  uint64_t v57 = v28;
  char v30 = specialized Sequence<>.contains(_:)(v28, v27);
  double v31 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 32);
  if ((v30 & 1) == 0 || (v31(v26, a3) & 1) == 0)
  {
LABEL_12:
    if ((v31(v26, a3) & 1) == 0)
    {
      if (specialized Sequence<>.contains(_:)(v57, (uint64_t)v29))
      {
        swift_bridgeObjectRelease();
        return v16;
      }
      int64_t v37 = v29[2];
      if (v37)
      {
        uint64_t v52 = a3;
        uint64_t v58 = v16;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
        uint64_t v38 = 0;
        uint64_t v16 = v58;
        uint64_t v39 = v55;
        do
        {
          MEMORY[0x24C59E990](v29[v38 + 4], 0);
          uint64_t v58 = v16;
          unint64_t v41 = *(void *)(v16 + 16);
          unint64_t v40 = *(void *)(v16 + 24);
          if (v41 >= v40 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
            uint64_t v39 = v55;
            uint64_t v16 = v58;
          }
          ++v38;
          *(void *)(v16 + 16) = v41 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v41, v15, v39);
        }
        while (v37 != v38);
        swift_bridgeObjectRelease_n();
        a3 = v52;
        uint64_t v26 = v56;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      specialized Array.append<A>(contentsOf:)(v16);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_2495305E0;
      uint64_t v36 = v57;
      *(void *)(v42 + 32) = v57;
      uint64_t v59 = v42;
LABEL_30:
      double v31 = v53;
      goto LABEL_49;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_14:
      unint64_t v35 = v29[2];
      unint64_t v34 = v29[3];
      if (v35 >= v34 >> 1) {
        uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v29);
      }
      v29[2] = v35 + 1;
      uint64_t v36 = v57;
      v29[v35 + 4] = v57;
      uint64_t v59 = (uint64_t)v29;
      goto LABEL_30;
    }
LABEL_59:
    uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
    goto LABEL_14;
  }
  unint64_t v32 = v29[2];
  if (!v32)
  {
    uint64_t v16 = 0;
    goto LABEL_48;
  }
  if (v29[4] != v57)
  {
    if (v32 == 1)
    {
      uint64_t v16 = 1;
      goto LABEL_48;
    }
    uint64_t v46 = 5;
    while (1)
    {
      uint64_t v16 = v46 - 4;
      if (v29[v46] == v57) {
        goto LABEL_8;
      }
      uint64_t v47 = v46 - 3;
      if (__OFADD__(v16, 1)) {
        break;
      }
      ++v46;
      if (v47 == v32)
      {
        uint64_t v16 = v29[2];
LABEL_48:
        specialized Array.replaceSubrange<A>(_:with:)(v16, v32);
        double v31 = v53;
        uint64_t v36 = v57;
LABEL_49:
        MEMORY[0x24C59E990](v36, 0);
        uint64_t v16 = v61;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_56:
        }
          uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, v16);
        unint64_t v49 = *(void *)(v16 + 16);
        unint64_t v48 = *(void *)(v16 + 24);
        if (v49 >= v48 >> 1) {
          uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, v16);
        }
        *(void *)(v16 + 16) = v49 + 1;
        (*(void (**)(unint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(v9 + 32))(v16+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v49, v31, v55);
        uint64_t v58 = v59;
        swift_bridgeObjectRetain();
        specialized MutableCollection<>.sort(by:)(&v58);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v58, v26, a3);
        return v16;
      }
    }
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v16 = 0;
LABEL_8:
  uint64_t v33 = v16 + 1;
  if (__OFADD__(v16, 1)) {
    goto LABEL_61;
  }
  if (v33 == v32)
  {
LABEL_10:
    uint64_t v26 = v56;
    if ((uint64_t)v32 >= v16) {
      goto LABEL_48;
    }
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v26 = v16 + 5;
  while (1)
  {
    if (v33 < 0)
    {
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v26 - 4 >= v32) {
      goto LABEL_55;
    }
    uint64_t v44 = v29[v26];
    if (v44 == v57) {
      goto LABEL_32;
    }
    if (v26 - 4 != v16) {
      break;
    }
LABEL_41:
    if (__OFADD__(v16++, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    unint64_t v32 = v29[2];
LABEL_32:
    uint64_t v43 = v26 - 3;
    ++v26;
    if (v43 == v32) {
      goto LABEL_10;
    }
  }
  if (v16 < v32)
  {
    double v31 = (uint64_t (*)(uint64_t, uint64_t))v29[v16 + 4];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
    }
    v29[v16 + 4] = v44;
    v29[v26] = v31;
    uint64_t v59 = (uint64_t)v29;
    goto LABEL_41;
  }
  __break(1u);
LABEL_61:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFPairedDevicesInformation(uint64_t a1, uint64_t a2)
{
  return CAFUIImageRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFPairedDevicesInformation);
}

id CAFUIImageRepresentable.configureCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v64 = v6;
  MEMORY[0x270FA5388](v6);
  double v62 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v61 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v59 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v60 = (uint64_t)&v52 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v56 = v17;
  uint64_t v57 = v18;
  MEMORY[0x270FA5388](v17);
  unint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UIListContentConfiguration();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  os_log_type_t v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v52 - v26;
  static UIListContentConfiguration.subtitleCell()();
  uint64_t v65 = a1;
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v25, (uint64_t)v27);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  uint64_t v66 = v21;
  uint64_t v54 = v28;
  uint64_t v55 = v22 + 8;
  v28(v25, v21);
  uint64_t v29 = *(void *)(a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(a2, v29);
  UIListContentConfiguration.text.setter();
  (*(void (**)(uint64_t, uint64_t))(v29 + 48))(a2, v29);
  UIListContentConfiguration.image.setter();
  uint64_t v30 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3) + 16);
  swift_bridgeObjectRelease();
  uint64_t v58 = v20;
  if (v30 == 1)
  {
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    if (v33)
    {
      unint64_t v34 = (void *)v33;
      id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v33);
    }
    else
    {
      id v35 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  }
  else
  {
    if (v30)
    {
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    }
    else
    {
      double v31 = (void *)MEMORY[0x24C59F610](0x44455443454C4553, 0xED0000454E4F4E5FLL);
      id v32 = CAFUILocalizedStringForKey(v31);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v35 = 0;
  }
  UIListContentConfiguration.secondaryText.setter();
  uint64_t v36 = v66;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v16, v27, v66);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v36);
  int64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  id v53 = v35;
  uint64_t v38 = *(void *)(v37(a2, a3) + 16);
  swift_bridgeObjectRelease();
  BOOL v39 = v38 != 0;
  LOBYTE(v38) = CAFListContentRepresentable.isLimitedUI.getter(a2, v29);
  uint64_t v40 = (uint64_t)v58;
  outlined init with take of UIListContentConfiguration?((uint64_t)v16, (uint64_t)v58);
  uint64_t v41 = v56;
  *(void *)(v40 + *(int *)(v56 + 20)) = v35;
  *(unsigned char *)(v40 + *(int *)(v41 + 24)) = v39;
  *(unsigned char *)(v40 + *(int *)(v41 + 28)) = v38 & 1;
  uint64_t v42 = v60;
  outlined init with copy of CAFUIAutomakerSettingConfiguration(v40, v60);
  uint64_t v43 = v57;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v57 + 56))(v42, 0, 1, v41);
  uint64_t v44 = v65 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v42, v44);
  swift_endAccess();
  uint64_t v45 = v59;
  outlined init with copy of UIListContentConfiguration?(v44, v59, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  LODWORD(v44) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v45, 1, v41);
  outlined destroy of CAFUIAutomakerSettingConfiguration?(v45);
  if (v44 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  uint64_t v46 = outlined destroy of CAFUIAutomakerSettingConfiguration?(v42);
  uint64_t v47 = v62;
  MEMORY[0x24C59F910](v46);
  uint64_t v49 = v63;
  uint64_t v48 = v64;
  uint64_t v50 = v61;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v61, v47, v64);
  id result = objc_msgSend(self, sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v48);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v50, 0, 1, v48);
    MEMORY[0x24C59F900](v50);

    outlined destroy of CAFUIAutomakerSettingConfiguration(v40);
    return (id)v54(v27, v66);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  CAFUIAutomakerSettingCell.primaryTextColor.getter();
  id v5 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v5(v18, 0);
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F83580]);
  uint64_t v8 = self;
  id v9 = objc_msgSend(v8, sel_fontWithDescriptor_size_, v7, 0.0);

  uint64_t v10 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v10(v18, 0);
  specialized CAFUICellProtocol.defaultSecondaryTextColor.getter();
  uint64_t v11 = (void (*)(unsigned char *, void))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v11(v18, 0);
  id v12 = objc_msgSend(v6, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F835B8]);
  id v13 = objc_msgSend(v8, sel_fontWithDescriptor_size_, v12, 0.0);

  uint64_t v14 = (void (*)(unsigned char *, void))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v14(v18, 0);
  UIListContentConfiguration.imageToTextPadding.setter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  uint64_t v15 = (void (*)(unsigned char *, void))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.reservedLayoutSize.setter();
  v15(v18, 0);
  specialized CAFUICellProtocol.defaultImageColor.getter();
  uint64_t v16 = (uint64_t (*)(unsigned char *, void))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.tintColor.setter();
  return v16(v18, 0);
}

{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unsigned char *, void);
  void *v9;
  id v10;
  void *v11;
  id v12;
  void (*v13)(unsigned char *, void);
  void (*v14)(unsigned char *, void);
  id v15;
  id v16;
  void (*v17)(unsigned char *, void);
  void (*v18)(unsigned char *, void);
  uint64_t (*v19)(unsigned char *, void);
  unsigned char v21[32];

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UIListContentConfiguration();
  id v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0xB0))(v7);
  uint64_t v8 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v8(v21, 0);
  id v9 = self;
  uint64_t v10 = objc_msgSend(v9, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F83580]);
  uint64_t v11 = self;
  id v12 = objc_msgSend(v11, sel_fontWithDescriptor_size_, v10, 0.0);

  id v13 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v13(v21, 0);
  specialized CAFUICellProtocol.defaultSecondaryTextColor.getter();
  uint64_t v14 = (void (*)(unsigned char *, void))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v14(v21, 0);
  uint64_t v15 = objc_msgSend(v9, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F835B8]);
  uint64_t v16 = objc_msgSend(v11, sel_fontWithDescriptor_size_, v15, 0.0);

  uint64_t v17 = (void (*)(unsigned char *, void))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v17(v21, 0);
  UIListContentConfiguration.imageToTextPadding.setter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  uint64_t v18 = (void (*)(unsigned char *, void))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.reservedLayoutSize.setter();
  v18(v21, 0);
  specialized CAFUICellProtocol.defaultImageColor.getter();
  uint64_t v19 = (uint64_t (*)(unsigned char *, void))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.tintColor.setter();
  return v19(v21, 0);
}

{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unsigned char *, void);
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t (*v13)(unsigned char *, void);
  uint64_t v14;
  void (*v15)(unsigned char *, void);
  id v16;
  id v17;
  void (*v18)(unsigned char *, void);
  uint64_t (*v19)(unsigned char *, void);
  uint64_t v20;
  uint64_t (*v21)(unsigned char *, void);
  unsigned char v23[32];

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UIListContentConfiguration();
  id v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x90))(v7);
  uint64_t v8 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v8(v23, 0);
  id v9 = self;
  uint64_t v10 = objc_msgSend(v9, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F83580]);
  uint64_t v11 = self;
  id v12 = objc_msgSend(v11, sel_fontWithDescriptor_size_, v10, 0.0);

  id v13 = (uint64_t (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  uint64_t v14 = v13(v23, 0);
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x88))(v14);
  uint64_t v15 = (void (*)(unsigned char *, void))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v15(v23, 0);
  uint64_t v16 = objc_msgSend(v9, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F835B8]);
  uint64_t v17 = objc_msgSend(v11, sel_fontWithDescriptor_size_, v16, 0.0);

  uint64_t v18 = (void (*)(unsigned char *, void))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v18(v23, 0);
  UIListContentConfiguration.imageToTextPadding.setter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  uint64_t v19 = (uint64_t (*)(unsigned char *, void))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.reservedLayoutSize.setter();
  unint64_t v20 = v19(v23, 0);
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x78))(v20);
  uint64_t v21 = (uint64_t (*)(unsigned char *, void))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.tintColor.setter();
  return v21(v23, 0);
}

uint64_t CAFUIImageRepresentable.allowsMultipleSelection.getter()
{
  return 0;
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFSingleSelectImageSetting(uint64_t a1, uint64_t a2)
{
  return CAFUIImageRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFSingleSelectImageSetting);
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFMultipleSelectImageSetting(uint64_t a1, uint64_t a2)
{
  return CAFUIImageRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFMultipleSelectImageSetting);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for IndexPath() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t *v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x24C59FC60](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x24C59FC60](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  unint64_t v4 = v2;
  uint64_t v5 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.count.getter();
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 16);
  }
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = v20 + v6;
    if (!__OFADD__(v20, v6)) {
      goto LABEL_6;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v6;
  if (__OFADD__(v7, v6)) {
    goto LABEL_24;
  }
LABEL_6:
  unint64_t v9 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v4 = v9;
  uint64_t v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v11 = 1;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v13 <= v8) {
    uint64_t v13 = v8;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = MEMORY[0x24C59FC60](v11, v13, 1, v9);
  swift_bridgeObjectRelease();
  *unint64_t v4 = v14;
  uint64_t v12 = v14 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
  uint64_t v15 = *(void *)(v12 + 16);
  uint64_t v16 = (*(void *)(v12 + 24) >> 1) - v15;
  uint64_t result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(&v44, (void *)(v12 + 8 * v15 + 32), v16, v5);
  if (result < v6)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (result >= 1)
  {
    uint64_t v17 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v18 = __OFADD__(v17, result);
    uint64_t v19 = v17 + result;
    if (v18)
    {
      __break(1u);
LABEL_33:
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_21;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v24 = v43;
      swift_unknownObjectRelease();
      while (2)
      {
        if (!v24) {
          goto LABEL_21;
        }
        while (1)
        {
          uint64_t v26 = *v4 & 0xFFFFFFFFFFFFFF8;
          if (v3 + 1 > *(void *)(v26 + 0x18) >> 1)
          {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v26 = *v4 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v27 = *(void *)(v26 + 24) >> 1;
          if (v3 < v27) {
            break;
          }
LABEL_37:
          *(void *)(v26 + 16) = v3;
        }
        uint64_t v28 = v26 + 32;
        while (1)
        {
          *(void *)(v28 + 8 * v3++) = v24;
          int64_t v29 = v47;
          if (v44 < 0)
          {
            if (!__CocoaSet.Iterator.next()()) {
              goto LABEL_74;
            }
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            uint64_t v24 = v43;
            swift_unknownObjectRelease();
            goto LABEL_49;
          }
          if (!v48) {
            break;
          }
          unint64_t v30 = (v48 - 1) & v48;
          unint64_t v31 = __clz(__rbit64(v48)) | (v47 << 6);
LABEL_45:
          uint64_t v24 = *(void **)(*(void *)(v44 + 48) + 8 * v31);
          id v32 = v24;
LABEL_46:
          int64_t v47 = v29;
          unint64_t v48 = v30;
LABEL_49:
          if (!v24)
          {
LABEL_74:
            *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v3;
            goto LABEL_21;
          }
          if (v3 >= v27)
          {
            uint64_t v26 = *v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_37;
          }
        }
        int64_t v33 = v47 + 1;
        if (__OFADD__(v47, 1))
        {
          __break(1u);
LABEL_98:
          uint64_t v24 = 0;
          unint64_t v22 = 0;
          int64_t v21 = v1;
LABEL_30:
          int64_t v47 = v21;
          unint64_t v48 = v22;
          continue;
        }
        break;
      }
      int64_t v34 = (unint64_t)(v46 + 64) >> 6;
      if (v33 >= v34)
      {
        uint64_t v24 = 0;
        unint64_t v30 = 0;
        goto LABEL_46;
      }
      unint64_t v35 = *(void *)(v45 + 8 * v33);
      if (!v35)
      {
        int64_t v36 = v47 + 2;
        if (v47 + 2 >= v34) {
          goto LABEL_71;
        }
        unint64_t v35 = *(void *)(v45 + 8 * v36);
        if (!v35)
        {
          int64_t v1 = v47 + 3;
          if (v47 + 3 >= v34) {
            goto LABEL_72;
          }
          unint64_t v35 = *(void *)(v45 + 8 * v1);
          if (v35)
          {
            int64_t v33 = v47 + 3;
            goto LABEL_55;
          }
          int64_t v36 = v47 + 4;
          if (v47 + 4 >= v34)
          {
            uint64_t v24 = 0;
            unint64_t v30 = 0;
            int64_t v29 = v47 + 3;
            goto LABEL_46;
          }
          unint64_t v35 = *(void *)(v45 + 8 * v36);
          if (!v35)
          {
            int64_t v33 = v47 + 5;
            if (v47 + 5 >= v34)
            {
LABEL_72:
              uint64_t v24 = 0;
              unint64_t v30 = 0;
              int64_t v29 = v36;
              goto LABEL_46;
            }
            unint64_t v35 = *(void *)(v45 + 8 * v33);
            if (!v35)
            {
              int64_t v33 = v34 - 1;
              uint64_t v37 = v47 + 6;
              while (v34 != v37)
              {
                unint64_t v35 = *(void *)(v45 + 8 * v37++);
                if (v35)
                {
                  int64_t v33 = v37 - 1;
                  goto LABEL_55;
                }
              }
LABEL_71:
              uint64_t v24 = 0;
              unint64_t v30 = 0;
              int64_t v29 = v33;
              goto LABEL_46;
            }
            goto LABEL_55;
          }
        }
        int64_t v33 = v36;
      }
LABEL_55:
      unint64_t v30 = (v35 - 1) & v35;
      unint64_t v31 = __clz(__rbit64(v35)) + (v33 << 6);
      int64_t v29 = v33;
      goto LABEL_45;
    }
    *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
  }
  if (result != v16)
  {
LABEL_21:
    outlined consume of Set<CAFAutomakerSetting>.Iterator._Variant();
    return specialized Array._endMutation()();
  }
LABEL_26:
  uint64_t v3 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  int64_t v21 = v47;
  if (v44 < 0) {
    goto LABEL_33;
  }
  if (v48)
  {
    unint64_t v22 = (v48 - 1) & v48;
    unint64_t v23 = __clz(__rbit64(v48)) | (v47 << 6);
LABEL_29:
    uint64_t v24 = *(void **)(*(void *)(v44 + 48) + 8 * v23);
    id v25 = v24;
    goto LABEL_30;
  }
  int64_t v38 = v47 + 1;
  if (!__OFADD__(v47, 1))
  {
    int64_t v39 = (unint64_t)(v46 + 64) >> 6;
    if (v38 >= v39)
    {
      uint64_t v24 = 0;
      unint64_t v22 = 0;
      goto LABEL_30;
    }
    unint64_t v40 = *(void *)(v45 + 8 * v38);
    if (v40) {
      goto LABEL_79;
    }
    int64_t v41 = v47 + 2;
    if (v47 + 2 >= v39)
    {
LABEL_95:
      uint64_t v24 = 0;
      unint64_t v22 = 0;
      int64_t v21 = v38;
      goto LABEL_30;
    }
    unint64_t v40 = *(void *)(v45 + 8 * v41);
    if (v40) {
      goto LABEL_83;
    }
    int64_t v1 = v47 + 3;
    if (v47 + 3 < v39)
    {
      unint64_t v40 = *(void *)(v45 + 8 * v1);
      if (v40)
      {
        int64_t v38 = v47 + 3;
        goto LABEL_79;
      }
      int64_t v41 = v47 + 4;
      if (v47 + 4 >= v39) {
        goto LABEL_98;
      }
      unint64_t v40 = *(void *)(v45 + 8 * v41);
      if (v40)
      {
LABEL_83:
        int64_t v38 = v41;
LABEL_79:
        unint64_t v22 = (v40 - 1) & v40;
        unint64_t v23 = __clz(__rbit64(v40)) + (v38 << 6);
        int64_t v21 = v38;
        goto LABEL_29;
      }
      int64_t v38 = v47 + 5;
      if (v47 + 5 < v39)
      {
        unint64_t v40 = *(void *)(v45 + 8 * v38);
        if (!v40)
        {
          int64_t v38 = v39 - 1;
          uint64_t v42 = v47 + 6;
          do
          {
            if (v39 == v42) {
              goto LABEL_95;
            }
            unint64_t v40 = *(void *)(v45 + 8 * v42++);
          }
          while (!v40);
          int64_t v38 = v42 - 1;
        }
        goto LABEL_79;
      }
    }
    uint64_t v24 = 0;
    unint64_t v22 = 0;
    int64_t v21 = v41;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t CAFUIImageRepresentableItem.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

id CAFUIImageRepresentableItem.image.getter()
{
  return *(id *)(v0 + 16);
}

void *CAFUIImageRepresentableItem.decoratorImage.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

uint64_t CAFUIImageRepresentableItem.enabled.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t CAFUIImageRepresentableItem.userInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UIListContentConfiguration?(v1 + 40, a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
}

uint64_t CAFUIImageRepresentableItem.userInfo.setter(uint64_t a1)
{
  return outlined assign with take of Any?(a1, v1 + 40);
}

uint64_t (*CAFUIImageRepresentableItem.userInfo.modify())()
{
  return closure #1 in CAFUINumericInputView.init(configuration:);
}

void *CAFUIImageRepresentableItem.accentColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 72);
  id v2 = v1;
  return v1;
}

void CAFUIImageRepresentableItem.accentColor.setter(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
}

uint64_t (*CAFUIImageRepresentableItem.accentColor.modify())()
{
  return closure #1 in CAFUINumericInputView.init(configuration:);
}

uint64_t protocol witness for CAFUIImageRepresentableItemProtocol.name.getter in conformance CAFUIImageRepresentableItem()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

id protocol witness for CAFUIImageRepresentableItemProtocol.image.getter in conformance CAFUIImageRepresentableItem()
{
  return *(id *)(v0 + 16);
}

void *protocol witness for CAFUIImageRepresentableItemProtocol.decoratorImage.getter in conformance CAFUIImageRepresentableItem()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

uint64_t protocol witness for CAFUIImageRepresentableItemProtocol.enabled.getter in conformance CAFUIImageRepresentableItem()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t protocol witness for CAFUIImageRepresentableItemProtocol.userInfo.getter in conformance CAFUIImageRepresentableItem@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UIListContentConfiguration?(v1 + 40, a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
}

void *protocol witness for CAFUIImageRepresentableItemProtocol.accentColor.getter in conformance CAFUIImageRepresentableItem()
{
  uint64_t v1 = *(void **)(v0 + 72);
  id v2 = v1;
  return v1;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAFUIImageRepresentableItemProtocol>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CAFAutomakerSetting]>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAFUIAutomakerSettingsSection>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
  uint64_t v10 = *(void *)(type metadata accessor for IndexPath() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  long long v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for IndexPath() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAFDeviceAction>);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      unint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      unint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  id v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          uint64_t v83 = *(void *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      size_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          id v86 = v11;
          id v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          id v90 = &v86[16 * v85 + 32];
          *(void *)id v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          size_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    uint64_t v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  id v92 = v2;
  uint64_t v93 = *v2 - 8;
  size_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(void *)(v10 + 8 * v9);
      uint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          uint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      unint64_t v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        uint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        id v25 = v22;
        do
        {
          uint64_t v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *id v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      size_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      size_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    int64_t v29 = v11 + 32;
    unint64_t v30 = &v11[16 * v28 + 32];
    *(void *)unint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          int64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        double v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        id v73 = v29;
        Class v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        int64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      id v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  Swift::Int v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      unint64_t v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        while (1)
        {
          Swift::Int v18 = v17 + 8;
          Swift::Int v19 = v6 - 8;
          uint64_t v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            unint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = v20;
            }
            Swift::Int v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    unint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v23 = v4;
          uint64_t v15 = v6;
        }
        else
        {
          uint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *Swift::Int v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::Int v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, MEMORY[0x263F07A30]);
  *Swift::Int v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::Int v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CAFUIEqualizerSlider>, type metadata accessor for CAFUIEqualizerSlider);
  *Swift::Int v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::Int v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *Swift::Int v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *Swift::Int v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::Int v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *Swift::Int v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAFUIImageRepresentableItemProtocol>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIImageRepresentableItemProtocol);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [CAFAutomakerSetting])>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [CAFAutomakerSetting]));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CAFAutomakerSetting)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CAFAutomakerSetting));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CAFAutomakerSetting]>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  uint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerSetting]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAFUIAutomakerSettingsSection>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  Swift::Int v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  Swift::Int v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [UIViewController] and conformance [A](&lazy protocol witness table cache variable for type [CAFPairedDevice] and conformance [A], &demangling cache variable for type metadata for [CAFPairedDevice]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFPairedDevice]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [UIViewController] and conformance [A](&lazy protocol witness table cache variable for type [CAFAutomakerSetting] and conformance [A], &demangling cache variable for type metadata for [CAFAutomakerSetting]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerSetting]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [UIViewController] and conformance [A](&lazy protocol witness table cache variable for type [UIViewController] and conformance [A], &demangling cache variable for type metadata for [UIViewController]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIViewController]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  uint64_t v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject();
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v8 = v28;
    uint64_t v9 = v29;
    int64_t v10 = v30;
    unint64_t v11 = v31;
    Swift::Int v24 = v7;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v12 = 0;
LABEL_46:
    void *v24 = v4;
    v24[1] = v8;
    void v24[2] = v9;
    v24[3] = v10;
    v24[4] = v11;
    return (void *)v12;
  }
  int64_t v10 = 0;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v8 = a4 + 56;
  uint64_t v9 = ~v20;
  uint64_t v21 = -v20;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v11 = v22 & *(void *)(a4 + 56);
  Swift::Int v24 = result;
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v12 = 0;
  int64_t v25 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_45;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      unint64_t v15 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_45;
      }
      goto LABEL_8;
    }
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v16 >= v25)
    {
      unint64_t v11 = 0;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    if (v17) {
      goto LABEL_23;
    }
    int64_t v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      unint64_t v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25) {
        goto LABEL_42;
      }
      unint64_t v17 = *(void *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        int64_t v16 = v10 + 3;
        goto LABEL_23;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        unint64_t v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v18);
      if (!v17)
      {
        int64_t v16 = v10 + 5;
        if (v10 + 5 >= v25)
        {
LABEL_42:
          unint64_t v11 = 0;
          int64_t v10 = v18;
          goto LABEL_45;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v16);
        if (!v17)
        {
          int64_t v19 = v10 + 6;
          while (v25 != v19)
          {
            unint64_t v17 = *(void *)(v8 + 8 * v19++);
            if (v17)
            {
              int64_t v16 = v19 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v11 = 0;
          int64_t v10 = v25 - 1;
          goto LABEL_45;
        }
        goto LABEL_23;
      }
    }
    int64_t v16 = v18;
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v10 = v16;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    unint64_t v15 = result;
    if (!result) {
      goto LABEL_45;
    }
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      uint64_t v12 = a3;
LABEL_45:
      uint64_t v9 = v23;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x24C59FC60);
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIImageRepresentableItemProtocol);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerSetting]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for IndexPath() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    int64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    uint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[8 * a1 + 32];
    unint64_t v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 8 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *id v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of UIListContentConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for CAFUIImageRepresentableItem(uint64_t a1)
{
  swift_bridgeObjectRelease();

  if (*(void *)(a1 + 64)) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
  }
  id v2 = *(void **)(a1 + 72);
}

uint64_t initializeWithCopy for CAFUIImageRepresentableItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  int64_t v5 = *(void **)(a2 + 16);
  size_t v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = (_OWORD *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  id v9 = v5;
  id v10 = v6;
  if (v8)
  {
    *(void *)(a1 + 64) = v8;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v8 - 8))(a1 + 40, v7, v8);
  }
  else
  {
    long long v11 = v7[1];
    *(_OWORD *)(a1 + 40) = *v7;
    *(_OWORD *)(a1 + 56) = v11;
  }
  uint64_t v12 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v12;
  id v13 = v12;
  return a1;
}

uint64_t assignWithCopy for CAFUIImageRepresentableItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 16);
  int64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  uint64_t v7 = *(void **)(a1 + 24);
  uint64_t v8 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v8;
  id v9 = v8;

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v10)
    {
      *(void *)(a1 + 64) = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 40, a2 + 40);
      goto LABEL_8;
    }
LABEL_7:
    long long v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v11;
    goto LABEL_8;
  }
  if (!v10)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
LABEL_8:
  uint64_t v12 = *(void **)(a1 + 72);
  id v13 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v13;
  id v14 = v13;

  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    Swift::Int v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *Swift::Int v3 = v12;
      }
      else
      {
        long long v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *Swift::Int v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for CAFUIImageRepresentableItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  if (*(void *)(a1 + 64)) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
  }
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v8 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIImageRepresentableItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIImageRepresentableItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIImageRepresentableItem()
{
  return &type metadata for CAFUIImageRepresentableItem;
}

uint64_t outlined consume of Set<CAFAutomakerSetting>.Iterator._Variant()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type [UIViewController] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo12CAFEqualizerCG_10CAFCombine0D10ObservableCs5NeverOTg5051_s5CAFUI19CAFUIEqualizerGroupV10equalizersACSaySo12d23CG_tcfc10CAFCombine0E10F55CAFcfu_33_1de7a1dc5ccbaa2477a1dc197ae15632AfJTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v2) {
      break;
    }
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x24C59FC50](v4, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      swift_getKeyPath();
      id v7 = v6;
      swift_getAtKeyPath();
      swift_release();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return v8;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall SliderView.Coordinator.valueChanged(_:)(UISlider *a1)
{
  [(UISlider *)a1 value];
  int v3 = v2;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_range);
  swift_retain();
  swift_retain();
  LODWORD(v5) = v3;
  objc_msgSend(v4, sel_valueRoundedToNearestStepValue_, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  Binding.wrappedValue.setter();
  swift_release();
  swift_release();
}

Swift::Void __swiftcall SliderView.Coordinator.sliderTapped(_:)(UITapGestureRecognizer a1)
{
  id v3 = [(objc_class *)a1.super.super.isa view];
  if (v3)
  {
    id v15 = v3;
    self;
    uint64_t v4 = swift_dynamicCastObjCClass();
    if (v4)
    {
      double v5 = (void *)v4;
      [(objc_class *)a1.super.super.isa locationInView:v4];
      double v7 = v6;
      if (*(unsigned char *)(v1 + OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_isRTL) == 1)
      {
        objc_msgSend(v5, sel_frame);
        double v7 = CGRectGetHeight(v17) - v7;
      }
      objc_msgSend(v5, sel_frame);
      float v8 = v7 / CGRectGetHeight(v18);
      objc_msgSend(v5, sel_maximumValue);
      float v10 = v9;
      objc_msgSend(v5, sel_minimumValue);
      float v12 = (float)(v10 - v11) * v8;
      id v13 = *(void **)(v1 + OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_range);
      swift_retain();
      swift_retain();
      *(float *)&double v14 = v12;
      objc_msgSend(v13, sel_valueRoundedToNearestStepValue_, v14);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
      Binding.wrappedValue.setter();

      swift_release();
      swift_release();
    }
    else
    {
    }
  }
}

id SliderView.Coordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SliderView.Coordinator()
{
  return self;
}

unsigned char *SliderView.VerticalSlider.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider;
  type metadata accessor for CenterTickSlider();
  id v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  float v11 = v4;
  *(void *)&v4[v9] = objc_msgSend(v10, sel_init);
  uint64_t v12 = OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_isRTL;
  id v13 = objc_msgSend(self, sel_sharedApplication);
  id v14 = objc_msgSend(v13, sel_userInterfaceLayoutDirection);

  v11[v12] = v14 == (id)1;
  v24.receiver = v11;
  v24.super_class = (Class)type metadata accessor for SliderView.VerticalSlider();
  id v15 = objc_msgSendSuper2(&v24, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v16 = *(void **)&v15[OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider];
  double v17 = -1.57079633;
  if (v15[OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_isRTL]) {
    double v17 = 1.57079633;
  }
  CGAffineTransformMakeRotation(&v23, v17);
  long long v21 = *(_OWORD *)&v23.c;
  long long v22 = *(_OWORD *)&v23.a;
  long long v20 = *(_OWORD *)&v23.tx;
  CGRect v18 = v15;
  *(_OWORD *)&v23.a = v22;
  *(_OWORD *)&v23.c = v21;
  *(_OWORD *)&v23.tx = v20;
  objc_msgSend(v16, sel_setTransform_, &v23);
  objc_msgSend(v18, sel_addSubview_, v16);

  return v18;
}

Swift::Void __swiftcall SliderView.VerticalSlider.layoutSubviews()()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for SliderView.VerticalSlider();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider];
  objc_msgSend(v0, sel_bounds);
  CGRectGetHeight(v4);
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v1, sel_setBounds_);
  objc_msgSend(v0, sel_bounds);
  double MidX = CGRectGetMidX(v5);
  objc_msgSend(v1, sel_center);
  objc_msgSend(v1, sel_setCenter_, MidX);
  objc_msgSend(v0, sel_bounds);
  CGRectGetMidY(v6);
  objc_msgSend(v1, sel_center);
  objc_msgSend(v1, sel_setCenter_);
}

id SliderView.VerticalSlider.__deallocating_deinit()
{
  return SliderView.VerticalSlider.__deallocating_deinit(type metadata accessor for SliderView.VerticalSlider);
}

uint64_t type metadata accessor for SliderView.VerticalSlider()
{
  return self;
}

char *protocol witness for UIViewRepresentable.makeUIView(context:) in conformance SliderView(uint64_t a1)
{
  return specialized SliderView.makeUIView(context:)(a1, *(void **)v1, *(void *)(v1 + 8), *(void **)(v1 + 40));
}

void protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance SliderView(uint64_t a1)
{
}

uint64_t protocol witness for UIViewRepresentable._resetUIView(_:coordinator:destroy:) in conformance SliderView()
{
  return MEMORY[0x270F016E0]();
}

uint64_t protocol witness for static UIViewRepresentable.dismantleUIView(_:coordinator:) in conformance SliderView()
{
  return MEMORY[0x270F016F8]();
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance SliderView@<X0>(void *a1@<X8>)
{
  objc_super v3 = *(void **)(v1 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  Binding.projectedValue.getter();
  id v4 = objc_allocWithZone((Class)type metadata accessor for SliderView.Coordinator());
  id v5 = v3;
  id v6 = specialized SliderView.Coordinator.init(value:range:)(v8, v9, v5, v10);
  swift_release();

  uint64_t result = swift_release();
  *a1 = v6;
  return result;
}

uint64_t protocol witness for UIViewRepresentable._identifiedViewTree(in:) in conformance SliderView()
{
  return MEMORY[0x270F01738]();
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance SliderView()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance SliderView()
{
  return MEMORY[0x270F01758]();
}

uint64_t protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance SliderView()
{
  return MEMORY[0x270F01748]();
}

uint64_t protocol witness for static UIViewRepresentable._modifyBridgedViewInputs(_:) in conformance SliderView()
{
  return MEMORY[0x270F01768]();
}

uint64_t protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance SliderView()
{
  return MEMORY[0x270F01728]();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SliderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type SliderView and conformance SliderView();

  return MEMORY[0x270F01780](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SliderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type SliderView and conformance SliderView();

  return MEMORY[0x270F01718](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SliderView()
{
  return static View._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance SliderView()
{
}

void CenterTickSlider.setupOverlayView()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI16CenterTickSlider_thumbImageView];
  if (!v1) {
    return;
  }
  objc_super v2 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI16CenterTickSlider_tickmarkView];
  id v14 = v1;
  objc_msgSend(v2, sel_removeFromSuperview);
  id v3 = objc_msgSend(v0, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
  }
  else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    if ((v4 & 0xC000000000000001) != 0)
    {
      id v5 = (id)MEMORY[0x24C59FC50](0, v4);
    }
    else
    {
      if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      id v5 = *(id *)(v4 + 32);
    }
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_insertSubview_belowSubview_, v2, v14);

    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
LABEL_11:
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v0, sel_trackRectForBounds_);
  CGFloat x = v16.origin.x;
  CGFloat y = v16.origin.y;
  CGFloat width = v16.size.width;
  CGFloat height = v16.size.height;
  double MidX = CGRectGetMidX(v16);
  v17.origin.CGFloat x = x;
  v17.origin.CGFloat y = y;
  v17.size.CGFloat width = width;
  v17.size.CGFloat height = height;
  CGFloat v13 = CGRectGetMidY(v17) + -2.0;
  v18.origin.CGFloat x = x;
  v18.origin.CGFloat y = y;
  v18.size.CGFloat width = width;
  v18.size.CGFloat height = height;
  objc_msgSend(v2, sel_setFrame_, MidX, v13, 2.0, CGRectGetHeight(v18));
}

id CenterTickSlider.init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(MEMORY[0x263F82E00]);
  float v10 = v4;
  id v11 = objc_msgSend(v9, sel_init);
  objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id result = objc_msgSend(self, sel_tableBackgroundColor);
  if (result)
  {
    CGFloat v13 = result;
    uint64_t v14 = OBJC_IVAR____TtC5CAFUI16CenterTickSlider_tickmarkView;
    objc_msgSend(v11, sel_setBackgroundColor_, result);

    objc_msgSend(v11, sel_setUserInteractionEnabled_, 0);
    *(void *)&v10[v14] = v11;
    *(void *)&v10[OBJC_IVAR____TtC5CAFUI16CenterTickSlider_thumbImageView] = 0;
    *(void *)&v10[OBJC_IVAR____TtC5CAFUI16CenterTickSlider_tickmarkWidth] = 0x4000000000000000;

    v15.receiver = v10;
    v15.super_class = (Class)type metadata accessor for CenterTickSlider();
    return objc_msgSendSuper2(&v15, sel_initWithFrame_, a1, a2, a3, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id CenterTickSlider.init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(MEMORY[0x263F82E00]);
  unint64_t v4 = v1;
  id v5 = objc_msgSend(v3, sel_init);
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id result = objc_msgSend(self, sel_tableBackgroundColor);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = OBJC_IVAR____TtC5CAFUI16CenterTickSlider_tickmarkView;
    objc_msgSend(v5, sel_setBackgroundColor_, result);

    objc_msgSend(v5, sel_setUserInteractionEnabled_, 0);
    *(void *)&v4[v8] = v5;
    *(void *)&v4[OBJC_IVAR____TtC5CAFUI16CenterTickSlider_thumbImageView] = 0;
    *(void *)&v4[OBJC_IVAR____TtC5CAFUI16CenterTickSlider_tickmarkWidth] = 0x4000000000000000;

    v10.receiver = v4;
    v10.super_class = (Class)type metadata accessor for CenterTickSlider();
    id v9 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id CenterTickSlider.__deallocating_deinit()
{
  return SliderView.VerticalSlider.__deallocating_deinit(type metadata accessor for CenterTickSlider);
}

id SliderView.VerticalSlider.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for CenterTickSlider()
{
  return self;
}

uint64_t destroy for CAFUIEqualizerGroup()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for CAFUIEqualizerGroup(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CAFUIEqualizerGroup(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CAFUIEqualizerGroup(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CAFUIEqualizerGroup()
{
  return &type metadata for CAFUIEqualizerGroup;
}

uint64_t associated type witness table accessor for View.Body : View in CAFUIEqualizerGroup()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in CAFUISliderView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v184 = a2;
  uint64_t v3 = type metadata accessor for _BlendModeEffect();
  MEMORY[0x270FA5388](v3 - 8);
  id v174 = (char *)&v143 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for ColorScheme();
  uint64_t v168 = *(void *)(v169 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v169);
  id v167 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v166 = (uint64_t)&v143 - v7;
  uint64_t v173 = type metadata accessor for BlendMode();
  uint64_t v172 = *(void *)(v173 - 8);
  MEMORY[0x270FA5388](v173);
  id v170 = (char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Text, _BlendModeEffect>);
  MEMORY[0x270FA5388](v165);
  id v178 = (char *)&v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>);
  MEMORY[0x270FA5388](v175);
  uint64_t v180 = (uint64_t)&v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  MEMORY[0x270FA5388](v176);
  uint64_t v181 = (uint64_t)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  uint64_t v12 = MEMORY[0x270FA5388](v179);
  uint64_t v183 = (uint64_t)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v177 = (uint64_t)&v143 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v182 = (uint64_t)&v143 - v16;
  uint64_t v161 = type metadata accessor for ButtonRepeatBehavior();
  uint64_t v160 = *(void *)(v161 - 8);
  MEMORY[0x270FA5388](v161);
  uint64_t v154 = (char *)&v143 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = type metadata accessor for PlainButtonStyle();
  uint64_t v157 = *(void *)(v158 - 8);
  MEMORY[0x270FA5388](v158);
  UIImage_optional v156 = (char *)&v143 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CAFUISliderView(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>>);
  uint64_t v186 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  objc_super v24 = (char *)&v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v155 = *(void *)(v153 - 8);
  MEMORY[0x270FA5388](v153);
  uint64_t v26 = (char *)&v143 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonRepeatBehavior(_:)>>.0);
  uint64_t v151 = *(void *)(v152 - 8);
  MEMORY[0x270FA5388](v152);
  uint64_t v28 = (char *)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>);
  uint64_t v188 = *(void *)(v185 - 8);
  MEMORY[0x270FA5388](v185);
  id v149 = (char *)&v143 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  uint64_t v31 = MEMORY[0x270FA5388](v30 - 8);
  uint64_t v171 = (uint64_t)&v143 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v189 = (uint64_t)&v143 - v34;
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  MEMORY[0x270FA5388](v35);
  uint64_t v163 = v19;
  uint64_t v37 = *(int *)(v19 + 32);
  BOOL v38 = *(unsigned char *)(a1 + v37) == 1;
  uint64_t v190 = (uint64_t)&v143 - v36;
  uint64_t v191 = v39;
  uint64_t v187 = a1;
  uint64_t v148 = v22;
  double v147 = v26;
  uint64_t v146 = (uint64_t)&v143 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = v21;
  uint64_t v144 = v20;
  id v143 = v28;
  if (v38)
  {
    outlined init with copy of CAFUIEqualizerSlider(a1, (uint64_t)&v143 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CAFUISliderView);
    unint64_t v40 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    uint64_t v41 = swift_allocObject();
    outlined init with take of CAFUIEqualizerSlider((uint64_t)&v143 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v41 + v40, type metadata accessor for CAFUISliderView);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    Button.init(action:label:)();
    BOOL v42 = v156;
    PlainButtonStyle.init()();
    uint64_t v43 = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>>);
    uint64_t v44 = lazy protocol witness table accessor for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider(&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
    uint64_t v45 = v158;
    uint64_t v164 = v37;
    uint64_t v46 = v44;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v157 + 8))(v42, v45);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v24, v22);
    uint64_t v47 = v154;
    static ButtonRepeatBehavior.enabled.getter();
    uint64_t v192 = v22;
    uint64_t v193 = v45;
    uint64_t v194 = v43;
    uint64_t v195 = v46;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v49 = v153;
    View.buttonRepeatBehavior(_:)();
    (*(void (**)(char *, uint64_t))(v160 + 8))(v47, v161);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v26, v49);
    uint64_t v192 = v49;
    uint64_t v193 = OpaqueTypeConformance2;
    a1 = v187;
    swift_getOpaqueTypeConformance2();
    uint64_t v50 = (uint64_t)v149;
    uint64_t v51 = v152;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v151 + 8))(v28, v51);
    uint64_t v52 = v190;
    outlined init with take of Any?(v50, v190, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>);
    uint64_t v53 = v52;
    uint64_t v54 = v185;
    BOOL v150 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v188 + 56);
    v150(v53, 0, 1, v185);
    uint64_t v37 = v164;
  }
  else
  {
    uint64_t v54 = v185;
    BOOL v150 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v188 + 56);
    v150((uint64_t)&v143 - v36, 1, 1, v185);
  }
  uint64_t v55 = v186;
  uint64_t v56 = v163;
  uint64_t v57 = a1 + *(int *)(v163 + 20);
  uint64_t v58 = *(void *)(v57 + 8);
  int v59 = *(_DWORD *)(v57 + 16);
  uint64_t v196 = *(void *)v57;
  uint64_t v197 = v58;
  int v198 = v59;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  Binding.projectedValue.getter();
  uint64_t v186 = v192;
  uint64_t v164 = v193;
  int v60 = v194;
  uint64_t v61 = *(int *)(v56 + 28);
  double v62 = (uint64_t *)(a1 + *(int *)(v56 + 24));
  uint64_t v63 = v62[1];
  uint64_t v159 = *v62;
  uint64_t v64 = *(void **)(a1 + v61);
  BOOL v38 = *(unsigned char *)(a1 + v37) == 1;
  uint64_t v163 = v63;
  id v162 = v64;
  if (v38)
  {
    uint64_t v65 = v146;
    outlined init with copy of CAFUIEqualizerSlider(a1, v146, type metadata accessor for CAFUISliderView);
    unint64_t v66 = (*(unsigned __int8 *)(v144 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80);
    uint64_t v67 = swift_allocObject();
    outlined init with take of CAFUIEqualizerSlider(v65, v67 + v66, type metadata accessor for CAFUISliderView);
    swift_bridgeObjectRetain();
    id v68 = v64;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    Button.init(action:label:)();
    uint64_t v69 = v156;
    PlainButtonStyle.init()();
    uint64_t v70 = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>>);
    uint64_t v71 = lazy protocol witness table accessor for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider(&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
    uint64_t v72 = v24;
    id v73 = v147;
    uint64_t v74 = v148;
    uint64_t v75 = v143;
    uint64_t v76 = v158;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v157 + 8))(v69, v76);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v72, v74);
    uint64_t v77 = v154;
    static ButtonRepeatBehavior.enabled.getter();
    uint64_t v192 = v74;
    uint64_t v193 = v76;
    uint64_t v194 = v70;
    uint64_t v195 = v71;
    uint64_t v78 = swift_getOpaqueTypeConformance2();
    uint64_t v79 = v153;
    View.buttonRepeatBehavior(_:)();
    (*(void (**)(char *, uint64_t))(v160 + 8))(v77, v161);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v73, v79);
    uint64_t v192 = v79;
    uint64_t v193 = v78;
    swift_getOpaqueTypeConformance2();
    uint64_t v80 = (uint64_t)v149;
    uint64_t v81 = v152;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v151 + 8))(v75, v81);
    uint64_t v82 = v191;
    outlined init with take of Any?(v80, v191, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>);
    v150(v82, 0, 1, v185);
  }
  else
  {
    v150(v191, 1, 1, v54);
    swift_bridgeObjectRetain();
    id v83 = v64;
  }
  uint64_t v84 = v62[1];
  uint64_t v192 = *v62;
  uint64_t v193 = v84;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v85 = Text.init<A>(_:)();
  uint64_t v87 = v86;
  char v89 = v88 & 1;
  id v90 = objc_msgSend(self, sel_secondaryLabelColor);
  MEMORY[0x24C59F350](v90);
  uint64_t v91 = Text.foregroundColor(_:)();
  uint64_t v93 = v92;
  char v95 = v94;
  uint64_t v97 = v96;
  swift_release();
  outlined consume of Text.Storage(v85, v87, v89);
  swift_bridgeObjectRelease();
  uint64_t v98 = v166;
  specialized Environment.wrappedValue.getter(v166);
  uint64_t v99 = v168;
  uint64_t v100 = v167;
  uint64_t v101 = v169;
  (*(void (**)(char *, void, uint64_t))(v168 + 104))(v167, *MEMORY[0x263F184F8], v169);
  LOBYTE(v85) = static ColorScheme.== infix(_:_:)();
  id v102 = *(void (**)(char *, uint64_t))(v99 + 8);
  v102(v100, v101);
  v102((char *)v98, v101);
  uint64_t v103 = v172;
  id v104 = (unsigned int *)MEMORY[0x263F1B968];
  if ((v85 & 1) == 0) {
    id v104 = (unsigned int *)MEMORY[0x263F1B950];
  }
  id v105 = v170;
  uint64_t v106 = v173;
  (*(void (**)(char *, void, uint64_t))(v172 + 104))(v170, *v104, v173);
  char v107 = v95 & 1;
  uint64_t v108 = (uint64_t)v174;
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v174, v105, v106);
  uint64_t v109 = (uint64_t)v178;
  outlined init with copy of CAFUIEqualizerSlider(v108, (uint64_t)&v178[*(int *)(v165 + 36)], MEMORY[0x263F190D8]);
  *(void *)uint64_t v109 = v91;
  *(void *)(v109 + 8) = v93;
  *(unsigned char *)(v109 + 16) = v107;
  *(void *)(v109 + 24) = v97;
  outlined copy of Text.Storage(v91, v93, v107);
  swift_bridgeObjectRetain();
  outlined destroy of _BlendModeEffect(v108);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v106);
  outlined consume of Text.Storage(v91, v93, v107);
  swift_bridgeObjectRelease();
  double v110 = *MEMORY[0x263F81840];
  id v111 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, *MEMORY[0x263F83590]);
  id v112 = objc_msgSend(self, sel_systemFontOfSize_weight_, 10.0, v110);
  id v113 = objc_msgSend(v111, sel_scaledFontForFont_, v112);

  uint64_t v114 = Font.init(_:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v116 = v180;
  outlined init with copy of UIListContentConfiguration?(v109, v180, &demangling cache variable for type metadata for ModifiedContent<Text, _BlendModeEffect>);
  id v117 = (uint64_t *)(v116 + *(int *)(v175 + 36));
  uint64_t *v117 = KeyPath;
  v117[1] = v114;
  outlined destroy of UIContentConfiguration?(v109, &demangling cache variable for type metadata for ModifiedContent<Text, _BlendModeEffect>);
  uint64_t v118 = swift_getKeyPath();
  uint64_t v119 = v181;
  outlined init with copy of UIListContentConfiguration?(v116, v181, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>);
  uint64_t v120 = v119 + *(int *)(v176 + 36);
  *(void *)uint64_t v120 = v118;
  *(void *)(v120 + 8) = 1;
  *(unsigned char *)(v120 + 16) = 0;
  outlined destroy of UIContentConfiguration?(v116, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>);
  LOBYTE(v118) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v122 = v121;
  uint64_t v124 = v123;
  uint64_t v126 = v125;
  uint64_t v128 = v127;
  uint64_t v129 = v177;
  outlined init with copy of UIListContentConfiguration?(v119, v177, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  uint64_t v130 = v129 + *(int *)(v179 + 36);
  *(unsigned char *)uint64_t v130 = v118;
  *(void *)(v130 + 8) = v122;
  *(void *)(v130 + 16) = v124;
  *(void *)(v130 + 24) = v126;
  *(void *)(v130 + 32) = v128;
  *(unsigned char *)(v130 + 40) = 0;
  outlined destroy of UIContentConfiguration?(v119, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  uint64_t v131 = v182;
  outlined init with take of Any?(v129, v182, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  uint64_t v132 = v189;
  outlined init with copy of UIListContentConfiguration?(v190, v189, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  uint64_t v133 = v171;
  outlined init with copy of UIListContentConfiguration?(v191, v171, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  uint64_t v134 = v183;
  outlined init with copy of UIListContentConfiguration?(v131, v183, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  uint64_t v135 = v184;
  outlined init with copy of UIListContentConfiguration?(v132, v184, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  id v136 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>));
  uint64_t v137 = v135 + v136[12];
  uint64_t v138 = v164;
  *(void *)uint64_t v137 = v186;
  *(void *)(v137 + 8) = v138;
  *(_DWORD *)(v137 + 16) = v60;
  uint64_t v139 = v163;
  *(void *)(v137 + 24) = v159;
  *(void *)(v137 + 32) = v139;
  unint64_t v140 = v162;
  *(void *)(v137 + 40) = v162;
  outlined init with copy of UIListContentConfiguration?(v133, v135 + v136[16], &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  outlined init with copy of UIListContentConfiguration?(v134, v135 + v136[20], &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  id v141 = v140;
  outlined destroy of UIContentConfiguration?(v131, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  outlined destroy of UIContentConfiguration?(v191, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of UIContentConfiguration?(v190, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  outlined destroy of UIContentConfiguration?(v134, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  outlined destroy of UIContentConfiguration?(v133, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined destroy of UIContentConfiguration?(v189, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
}

uint64_t closure #1 in closure #1 in CAFUISliderView.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CAFUISliderView(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  MEMORY[0x24C59F440](&v9);
  float v3 = *(float *)&v9;
  uint64_t v4 = *(void **)(a1 + *(int *)(v2 + 28));
  objc_msgSend(v4, sel_stepValue);
  float v6 = v3 + v5;
  objc_msgSend(v4, sel_maximumValue);
  if (v7 >= v6) {
    float v7 = v6;
  }
  *(float *)&uint64_t v9 = v7;
  return Binding.wrappedValue.setter();
}

double closure #2 in closure #1 in CAFUISliderView.body.getter@<D0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  LOWORD(v22) = 256;
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  specialized static UIFont.cafui_preferredFont(for:weight:size:rounded:)(*MEMORY[0x263F83580], 0x403A000000000000, 0, 1, *MEMORY[0x263F81828]);
  Font.init(_:)();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  char v12 = v11 & 1;
  outlined consume of Text.Storage(v2, v4, v6);
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(self, sel__carSystemFocusColor, 0, v22);
  MEMORY[0x24C59F350](v13);
  uint64_t v14 = Text.foregroundColor(_:)();
  uint64_t v16 = v15;
  char v18 = v17;
  uint64_t v20 = v19;
  swift_release();
  outlined consume of Text.Storage(v7, v9, v12);
  swift_bridgeObjectRelease();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v16;
  *(unsigned char *)(a1 + 16) = v18 & 1;
  *(void *)(a1 + 24) = v20;
  *(void *)(a1 + 32) = v23;
  *(unsigned char *)(a1 + 40) = v24;
  *(void *)(a1 + 48) = v25;
  *(unsigned char *)(a1 + 56) = v26;
  double result = *(double *)&v27;
  *(_OWORD *)(a1 + 64) = v27;
  *(_OWORD *)(a1 + 80) = xmmword_249530F80;
  return result;
}

uint64_t closure #3 in closure #1 in CAFUISliderView.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CAFUISliderView(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  MEMORY[0x24C59F440](&v9);
  float v3 = *(float *)&v9;
  uint64_t v4 = *(void **)(a1 + *(int *)(v2 + 28));
  objc_msgSend(v4, sel_stepValue);
  float v6 = v3 - v5;
  objc_msgSend(v4, sel_minimumValue);
  if (v6 > v7) {
    float v7 = v6;
  }
  *(float *)&uint64_t v9 = v7;
  return Binding.wrappedValue.setter();
}

double closure #4 in closure #1 in CAFUISliderView.body.getter@<D0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  LOWORD(v22) = 256;
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  specialized static UIFont.cafui_preferredFont(for:weight:size:rounded:)(*MEMORY[0x263F83580], 0x403C000000000000, 0, 1, *MEMORY[0x263F81828]);
  Font.init(_:)();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  char v12 = v11 & 1;
  outlined consume of Text.Storage(v2, v4, v6);
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(self, sel__carSystemFocusColor, 0, v22);
  MEMORY[0x24C59F350](v13);
  uint64_t v14 = Text.foregroundColor(_:)();
  uint64_t v16 = v15;
  char v18 = v17;
  uint64_t v20 = v19;
  swift_release();
  outlined consume of Text.Storage(v7, v9, v12);
  swift_bridgeObjectRelease();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v16;
  *(unsigned char *)(a1 + 16) = v18 & 1;
  *(void *)(a1 + 24) = v20;
  *(void *)(a1 + 32) = v23;
  *(unsigned char *)(a1 + 40) = v24;
  *(void *)(a1 + 48) = v25;
  *(unsigned char *)(a1 + 56) = v26;
  double result = *(double *)&v27;
  *(_OWORD *)(a1 + 64) = v27;
  *(_OWORD *)(a1 + 80) = xmmword_249530F90;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CAFUISliderView()
{
  return MEMORY[0x270F032C0]();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CAFUISliderView()
{
  return MEMORY[0x270F032D0]();
}

uint64_t protocol witness for View.body.getter in conformance CAFUISliderView@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0x4000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>)>>);
  return closure #1 in CAFUISliderView.body.getter(v1, a1 + *(int *)(v3 + 44));
}

int *CAFUIEqualizerSlider.body.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFEqualizerObservable();
  lazy protocol witness table accessor for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider(&lazy protocol witness table cache variable for type CAFEqualizerObservable and conformance CAFEqualizerObservable, MEMORY[0x263F2BDF0]);
  uint64_t v3 = (void *)ObservedObject.projectedValue.getter();
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();

  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = v21;
  *(void *)(v4 + 40) = v22;
  *(unsigned char *)(v4 + 48) = v23;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = v21;
  *(void *)(v5 + 40) = v22;
  *(unsigned char *)(v5 + 48) = v23;
  swift_retain();
  swift_retain();
  Binding.init(get:set:)();
  id v6 = *(id *)(v1 + 8);
  uint64_t v7 = (void *)CAFEqualizerObservable.observed.getter();

  uint64_t v8 = CAFEqualizer.title.getter();
  uint64_t v10 = v9;

  id v11 = v6;
  char v12 = (void *)CAFEqualizerObservable.observed.getter();
  id v13 = objc_msgSend(v12, sel_valueRange);

  id v14 = objc_msgSend(v13, sel_floatRange);
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  double result = (int *)type metadata accessor for CAFUISliderView(0);
  uint64_t v16 = (char *)a1 + result[5];
  *(void *)uint64_t v16 = v18;
  *((void *)v16 + 1) = v19;
  *((_DWORD *)v16 + 4) = v20;
  char v17 = (uint64_t *)((char *)a1 + result[6]);
  uint64_t *v17 = v8;
  v17[1] = v10;
  *(uint64_t *)((char *)a1 + result[7]) = (uint64_t)v14;
  *((unsigned char *)a1 + result[8]) = 0;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFUIEqualizerSlider@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

double closure #1 in closure #1 in CAFUIEqualizerGroup.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of CAFUIEqualizerSlider(a1, a2, type metadata accessor for CAFUIEqualizerSlider);
  uint64_t v4 = (_OWORD *)(a2
                + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>)
                         + 36));
  *uint64_t v4 = v6;
  v4[1] = v7;
  double result = *(double *)&v8;
  _OWORD v4[2] = v8;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance CAFUIEqualizerGroup@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, ForEach<[CAFUIEqualizerSlider], UUID, ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>>>);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFUIEqualizerSlider]);
  type metadata accessor for UUID();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>);
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type [CAFUIEqualizerSlider] and conformance [A], &demangling cache variable for type metadata for [CAFUIEqualizerSlider]);
  lazy protocol witness table accessor for type ModifiedContent<CAFUIEqualizerSlider, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider(&lazy protocol witness table cache variable for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider, (void (*)(uint64_t))type metadata accessor for CAFUIEqualizerSlider);
  return ForEach<>.init(_:content:)();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<CAFUIEqualizerSlider, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<CAFUIEqualizerSlider, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<CAFUIEqualizerSlider, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>);
    lazy protocol witness table accessor for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider(&lazy protocol witness table cache variable for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider, (void (*)(uint64_t))type metadata accessor for CAFUIEqualizerSlider);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<CAFUIEqualizerSlider, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for CAFUIEqualizerSlider(uint64_t a1)
{
  return type metadata accessor for CAFUIAutomakerSettingConfiguration(a1, (uint64_t *)&type metadata singleton initialization cache for CAFUIEqualizerSlider);
}

uint64_t lazy protocol witness table accessor for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

float *closure #2 in Binding<A>.floatBinding()(float *result)
{
  float v1 = *result;
  if ((~*(_DWORD *)result & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -129.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 128.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Int8>);
    return (float *)Binding.wrappedValue.setter();
  }
LABEL_7:
  __break(1u);
  return result;
}

void closure #1 in static UIImage.thumbImage(withDiameter:thumbColor:)(void *a1, id a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  objc_msgSend(a2, sel_set);
  id v11 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v22.origin.CGFloat x = a3;
  v22.origin.CGFloat y = a4;
  v22.size.CGFloat width = a5;
  v22.size.CGFloat height = a6;
  CGContextFillEllipseInRect(v11, v22);

  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithWhite_alpha_, 0.0, 0.15);
  id v13 = objc_msgSend(self, sel_bezierPathWithOvalInRect_, a3, a4, a5, a6);
  id v14 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  objc_msgSend(v13, sel_bounds);
  CGContextClipToRect(v14, v23);
  v20.CGFloat width = 0.0;
  v20.CGFloat height = 0.0;
  CGContextSetShadow(v14, v20, 0.0);
  uint64_t v15 = (CGColor *)objc_msgSend(v12, sel_CGColor);
  CGFloat Alpha = CGColorGetAlpha(v15);

  CGContextSetAlpha(v14, Alpha);
  CGContextBeginTransparencyLayer(v14, 0);
  id v18 = objc_msgSend(v12, sel_colorWithAlphaComponent_, 1.0);
  char v17 = (CGColor *)objc_msgSend(v18, sel_CGColor);
  v21.CGFloat width = 0.5;
  v21.CGFloat height = 0.0;
  CGContextSetShadowWithColor(v14, v21, 1.0, v17);

  CGContextSetBlendMode(v14, kCGBlendModeSourceOut);
  CGContextBeginTransparencyLayer(v14, 0);
  objc_msgSend(v18, sel_setFill);
  objc_msgSend(v13, sel_fill);
  CGContextEndTransparencyLayer(v14);
  CGContextEndTransparencyLayer(v14);
}

uint64_t specialized CAFUIEqualizerGroup.init(equalizers:)(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for CAFUIEqualizerSlider(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo12CAFEqualizerCG_10CAFCombine0D10ObservableCs5NeverOTg5051_s5CAFUI19CAFUIEqualizerGroupV10equalizersACSaySo12d23CG_tcfc10CAFCombine0E10F55CAFcfu_33_1de7a1dc5ccbaa2477a1dc197ae15632AfJTf3nnnpk_nTf1cn_n(a1);
  swift_bridgeObjectRelease();
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v7) {
    return v6;
  }
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v16;
    do
    {
      if ((v6 & 0xC000000000000001) != 0) {
        MEMORY[0x24C59FC50](v9, v6);
      }
      else {
        id v11 = *(id *)(v6 + 8 * v9 + 32);
      }
      type metadata accessor for CAFEqualizerObservable();
      lazy protocol witness table accessor for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider(&lazy protocol witness table cache variable for type CAFEqualizerObservable and conformance CAFEqualizerObservable, MEMORY[0x263F2BDF0]);
      uint64_t *v5 = ObservedObject.init(wrappedValue:)();
      v5[1] = v12;
      UUID.init()();
      uint64_t v16 = v10;
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v16;
      }
      ++v9;
      *(void *)(v10 + 16) = v14 + 1;
      outlined init with take of CAFUIEqualizerSlider((uint64_t)v5, v10+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v14, type metadata accessor for CAFUIEqualizerSlider);
    }
    while (v7 != v9);
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t specialized static UIImage.thumbImage(withDiameter:thumbColor:)(void *a1, double a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, a2, a2);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 16) = a1;
  *(double *)(v5 + 40) = a2;
  *(double *)(v5 + 48) = a2;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for closure #1 in static UIImage.thumbImage(withDiameter:thumbColor:);
  *(void *)(v6 + 24) = v5;
  v11[4] = _sSo30UIGraphicsImageRendererContextCIgg_ABIegg_TRTA_0;
  v11[5] = v6;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  void v11[3] = &block_descriptor_2;
  uint64_t v7 = _Block_copy(v11);
  id v8 = a1;
  swift_retain();
  swift_release();
  id v9 = objc_msgSend(v4, sel_imageWithActions_, v7);

  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((v4 & 1) == 0) {
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

char *specialized SliderView.makeUIView(context:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  type metadata accessor for SliderView.VerticalSlider();
  uint64_t v6 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v7 = OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider;
  id v8 = *(void **)&v6[OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider];
  id v9 = self;
  id v10 = v8;
  id v11 = objc_msgSend(v9, sel_whiteColor);
  uint64_t v12 = (void *)specialized static UIImage.thumbImage(withDiameter:thumbColor:)(v11, 20.0);

  objc_msgSend(v10, sel_setThumbImage_forState_, v12, 0);
  unint64_t v13 = *(void **)&v6[v7];
  objc_msgSend(v13, sel_setContinuous_, 1);
  id v14 = v13;
  objc_msgSend(a4, sel_minimumValue);
  objc_msgSend(v14, sel_setMinimumValue_);

  id v15 = *(id *)&v6[v7];
  objc_msgSend(a4, sel_maximumValue);
  objc_msgSend(v15, sel_setMaximumValue_);

  char v24 = a2;
  id v16 = *(id *)&v6[v7];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  MEMORY[0x24C59F440](&v25, v17);
  LODWORD(v18) = v25;
  objc_msgSend(v16, sel_setValue_, v18);

  id v19 = *(id *)&v6[v7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewRepresentableContext<SliderView>);
  UIViewRepresentableContext.coordinator.getter();
  objc_msgSend(v19, sel_addTarget_action_forControlEvents_, v24, sel_valueChanged_, 4096);

  id v20 = *(id *)&v6[v7];
  UIViewRepresentableContext.coordinator.getter();
  objc_msgSend(v20, sel_addTarget_action_forControlEvents_, v24, sel_trackingEnter_, 1);

  CGSize v21 = *(void **)&v6[v7];
  UIViewRepresentableContext.coordinator.getter();
  objc_msgSend(v21, sel_addTarget_action_forControlEvents_, v24, sel_trackingExit_, 192);

  UIViewRepresentableContext.coordinator.getter();
  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v24, sel_sliderTapped_);

  objc_msgSend(*(id *)&v6[v7], sel_addGestureRecognizer_, v22);
  return v6;
}

void specialized SliderView.updateUIView(_:context:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewRepresentableContext<SliderView>);
  UIViewRepresentableContext.coordinator.getter();
  char v2 = v6[OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_isTracking];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = *(void **)(a1 + OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
    MEMORY[0x24C59F440](&v7, v4);
    LODWORD(v5) = v7;
    objc_msgSend(v3, sel_setValue_animated_, 1, v5);
  }
}

id specialized SliderView.Coordinator.init(value:range:)(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  double v5 = v4;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v5[OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_isTracking] = 0;
  uint64_t v11 = OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_isRTL;
  uint64_t v12 = self;
  unint64_t v13 = v5;
  id v14 = objc_msgSend(v12, sel_sharedApplication);
  id v15 = objc_msgSend(v14, sel_userInterfaceLayoutDirection);

  v5[v11] = v15 == (id)1;
  id v16 = &v13[OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_value];
  *(void *)id v16 = a1;
  *((void *)v16 + 1) = a2;
  *((float *)v16 + 4) = a4;
  *(void *)&v13[OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_range] = a3;
  swift_retain();
  swift_retain();
  id v17 = a3;

  v19.receiver = v13;
  v19.super_class = ObjectType;
  return objc_msgSendSuper2(&v19, sel_init);
}

void specialized SliderView.VerticalSlider.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider;
  type metadata accessor for CenterTickSlider();
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v2 = OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_isRTL;
  id v3 = objc_msgSend(self, sel_sharedApplication);
  id v4 = objc_msgSend(v3, sel_userInterfaceLayoutDirection);

  v0[v2] = v4 == (id)1;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type CAFEqualizer and conformance CAFEqualizer()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer;
  if (!lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CAFUIEqualizerSlider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *id v3 = *a2;
    id v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    double v5 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = (uint64_t)v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    id v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UUID();
    id v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    id v11 = v5;
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CAFUIEqualizerSlider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for CAFUIEqualizerSlider(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  id v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for CAFUIEqualizerSlider(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (void *)a2[1];
  uint64_t v7 = (void *)a1[1];
  a1[1] = v6;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  id v10 = (char *)a1 + v9;
  id v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

_OWORD *initializeWithTake for CAFUIEqualizerSlider(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for CAFUIEqualizerSlider(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v6;

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  id v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIEqualizerSlider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2494ED110);
}

uint64_t sub_2494ED110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CAFUIEqualizerSlider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2494ED1D4);
}

uint64_t sub_2494ED1D4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CAFUIEqualizerSlider()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2494ED314()
{
  return lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type HStack<ForEach<[CAFUIEqualizerSlider], UUID, ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<ForEach<[CAFUIEqualizerSlider], UUID, ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>>>);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in CAFUIEqualizerSlider()
{
  return lazy protocol witness table accessor for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
}

uint64_t associated type witness table accessor for View.Body : View in CAFUIEqualizerSlider()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2494ED3B4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of CAFEqualizerObservable.value.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2494ED3E0()
{
  return dispatch thunk of CAFEqualizerObservable.value.setter();
}

float partial apply for closure #1 in Binding<A>.floatBinding()@<S0>(float *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Int8>);
  MEMORY[0x24C59F440](&v5, v2);
  v3.i8[0] = v5;
  float result = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v3)).i32[0];
  *a1 = result;
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 49, 7);
}

float *partial apply for closure #2 in Binding<A>.floatBinding()(float *result)
{
  return closure #2 in Binding<A>.floatBinding()(result);
}

uint64_t type metadata accessor for CAFUISliderView(uint64_t a1)
{
  return type metadata accessor for CAFUIAutomakerSettingConfiguration(a1, (uint64_t *)&type metadata singleton initialization cache for CAFUISliderView);
}

void *initializeBufferWithCopyOfBuffer for CAFUISliderView(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    *((_DWORD *)v11 + 4) = *((_DWORD *)v12 + 4);
    id v14 = (void *)((char *)a1 + v10);
    id v15 = (void *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    void *v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    objc_super v19 = *(void **)((char *)a2 + v17);
    *(void *)((char *)a1 + v17) = v19;
    *((unsigned char *)a1 + v18) = *((unsigned char *)a2 + v18);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v20 = v19;
  }
  return a1;
}

void destroy for CAFUISliderView(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  int v5 = *(void **)(a1 + *(int *)(a2 + 28));
}

void *initializeWithCopy for CAFUISliderView(void *a1, void *a2, int *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v7;
  uint64_t v10 = (char *)a2 + v7;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = v11;
  *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
  uint64_t v12 = (void *)((char *)a1 + v8);
  uint64_t v13 = (void *)((char *)a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = *(void **)((char *)a2 + v15);
  *(void *)((char *)a1 + v15) = v17;
  *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v18 = v17;
  return a1;
}

void *assignWithCopy for CAFUISliderView(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  swift_retain();
  swift_release();
  *((void *)v8 + 1) = *((void *)v9 + 1);
  swift_retain();
  swift_release();
  *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void **)((char *)a2 + v13);
  uint64_t v15 = *(void **)((char *)a1 + v13);
  *(void *)((char *)a1 + v13) = v14;
  id v16 = v14;

  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

char *initializeWithTake for CAFUISliderView(char *a1, char *a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  long long v12 = *(_OWORD *)v11;
  *((_DWORD *)v10 + 4) = *((_DWORD *)v11 + 4);
  *(_OWORD *)uint64_t v10 = v12;
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v13 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v13] = a2[v13];
  return a1;
}

char *assignWithTake for CAFUISliderView(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  swift_release();
  *((void *)v9 + 1) = *((void *)v10 + 1);
  swift_release();
  *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
  uint64_t v11 = a3[6];
  long long v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)long long v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void **)&a1[v16];
  *(void *)&a1[v16] = *(void *)&a2[v16];

  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUISliderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2494EDC34);
}

uint64_t sub_2494EDC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CAFUISliderView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2494EDD10);
}

uint64_t sub_2494EDD10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

void type metadata completion function for CAFUISliderView()
{
  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Environment<ColorScheme>.Content()
{
  if (!lazy cache variable for type metadata for Environment<ColorScheme>.Content)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content);
    }
  }
}

uint64_t sub_2494EDEE4()
{
  return lazy protocol witness table accessor for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider(&lazy protocol witness table cache variable for type CAFUISliderView and conformance CAFUISliderView, (void (*)(uint64_t))type metadata accessor for CAFUISliderView);
}

uint64_t associated type witness table accessor for View.Body : View in CAFUISliderView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t outlined init with copy of CAFUIEqualizerSlider(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined destroy of _BlendModeEffect(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _BlendModeEffect();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2494EE034@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_2494EE068()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t outlined init with take of CAFUIEqualizerSlider(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #3 in closure #1 in CAFUISliderView.body.getter()
{
  return partial apply for closure #3 in closure #1 in CAFUISliderView.body.getter(closure #3 in closure #1 in CAFUISliderView.body.getter);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>);
    lazy protocol witness table accessor for type ModifiedContent<Text, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Text, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Text, _FrameLayout>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t objectdestroy_36Tm()
{
  uint64_t v1 = type metadata accessor for CAFUISliderView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in CAFUISliderView.body.getter()
{
  return partial apply for closure #3 in closure #1 in CAFUISliderView.body.getter(closure #1 in closure #1 in CAFUISliderView.body.getter);
}

uint64_t partial apply for closure #3 in closure #1 in CAFUISliderView.body.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for CAFUISliderView(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

void destroy for SliderView(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t initializeWithCopy for SliderView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

uint64_t assignWithCopy for SliderView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SliderView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for SliderView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SliderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SliderView()
{
  return &type metadata for SliderView;
}

uint64_t sub_2494EE650()
{
  return lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>)>>);
}

uint64_t associated type witness table accessor for View.Body : View in SliderView()
{
  return MEMORY[0x263F1BB58];
}

unint64_t lazy protocol witness table accessor for type SliderView and conformance SliderView()
{
  unint64_t result = lazy protocol witness table cache variable for type SliderView and conformance SliderView;
  if (!lazy protocol witness table cache variable for type SliderView and conformance SliderView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderView and conformance SliderView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SliderView and conformance SliderView;
  if (!lazy protocol witness table cache variable for type SliderView and conformance SliderView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderView and conformance SliderView);
  }
  return result;
}

uint64_t sub_2494EE6F0()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in static UIImage.thumbImage(withDiameter:thumbColor:)(void *a1)
{
  closure #1 in static UIImage.thumbImage(withDiameter:thumbColor:)(a1, *(id *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48));
}

uint64_t sub_2494EE738()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sSo30UIGraphicsImageRendererContextCIgg_ABIegg_TRTA_0(uint64_t a1)
{
  return thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t CAFUIRoundedButton.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>);
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>);
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ViewModifier_Content<CAFUIRoundedButton>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v7, a1, v16);
  uint64_t v17 = &v7[*(int *)(v5 + 44)];
  long long v18 = v24[1];
  *(_OWORD *)uint64_t v17 = v24[0];
  *((_OWORD *)v17 + 1) = v18;
  *((_OWORD *)v17 + 2) = v24[2];
  LODWORD(v5) = static HierarchicalShapeStyle.tertiary.getter();
  LOBYTE(a1) = static Edge.Set.all.getter();
  outlined init with copy of UIListContentConfiguration?((uint64_t)v7, (uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>);
  objc_super v19 = &v11[*(int *)(v9 + 44)];
  *(_DWORD *)objc_super v19 = v5;
  v19[4] = a1;
  outlined destroy of UIContentConfiguration?((uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>);
  uint64_t v20 = static Color.primary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of UIListContentConfiguration?((uint64_t)v11, (uint64_t)v15, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>);
  id v22 = (uint64_t *)&v15[*(int *)(v13 + 44)];
  uint64_t *v22 = KeyPath;
  v22[1] = v20;
  outlined destroy of UIContentConfiguration?((uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>);
  outlined init with copy of UIListContentConfiguration?((uint64_t)v15, a2, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>);
  *(_WORD *)(a2
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>>)
                    + 36)) = 256;
  return outlined destroy of UIContentConfiguration?((uint64_t)v15, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CAFUIRoundedButton()
{
  return MEMORY[0x270EFF510]();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CAFUIRoundedButton()
{
  return MEMORY[0x270EFF520]();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance CAFUIRoundedButton()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t key path getter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2494EEA80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_2494EEAD8()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CAFUIRoundedButton()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for CAFUIRoundedButton()
{
  return &type metadata for CAFUIRoundedButton;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ClipEffect<Circle> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<Circle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<HierarchicalShapeStyle> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<HierarchicalShapeStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ViewModifier_Content<CAFUIRoundedButton> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<CAFUIRoundedButton>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

UIBarButtonItem_optional __swiftcall CAUAssetLibraryManager.createAudioLogoBarButton()()
{
  uint64_t v0 = type metadata accessor for CAUResource();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  long long v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = dispatch thunk of CAUAssetLibraryManager.assetLibrary.getter();
  if (v4)
  {
    uint64_t v6 = (void *)v4;
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F30D28], v0);
    uint64_t v7 = CAUAssetLibrary.asset(for:)((uint64_t)v3);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    id v8 = objc_msgSend(v7, sel_imageWithRenderingMode_, 2);
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v8);
    objc_msgSend(v9, sel_setContentMode_, 1);
    objc_msgSend(v9, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v10 = objc_msgSend(v9, sel_heightAnchor);
    id v11 = objc_msgSend(v10, sel_constraintEqualToConstant_, 28.0);

    objc_msgSend(v11, sel_setActive_, 1);
    id v12 = objc_msgSend(v9, sel_widthAnchor);
    id v13 = objc_msgSend(v12, sel_constraintLessThanOrEqualToConstant_, 112.0);

    objc_msgSend(v13, sel_setActive_, 1);
    id v14 = objc_msgSend(self, sel_systemGrayColor);
    objc_msgSend(v9, sel_setTintColor_, v14);

    uint64_t v15 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F824A8]), sel_initWithCustomView_, v9);
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = v15;
  result.value.super.super.Class isa = v16;
  result.is_nil = v5;
  return result;
}

double one-time initialization function for badgePadding()
{
  double result = 10.0;
  static CAFUIBadgeView.badgePadding = xmmword_249531440;
  return result;
}

id CAFUIBadgeView.__allocating_init(text:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return CAFUIBadgeView.init(text:)(a1, a2);
}

id CAFUIBadgeView.init(text:)(uint64_t a1, uint64_t a2)
{
  *(void *)&v2[OBJC_IVAR____TtC5CAFUI14CAFUIBadgeView____lazy_storage___label] = 0;
  v35.receiver = v2;
  v35.super_class = (Class)type metadata accessor for CAFUIBadgeView();
  id v5 = objc_msgSendSuper2(&v35, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v6 = self;
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel_systemRedColor);
  objc_msgSend(v7, sel_setBackgroundColor_, v8);

  id v9 = v7;
  id v10 = CAFUIBadgeView.label.getter();
  objc_msgSend(v9, sel_addSubview_, v10);

  LODWORD(v11) = 1148846080;
  objc_msgSend(v9, sel_setContentHuggingPriority_forAxis_, 0, v11);
  LODWORD(v12) = 1148846080;
  objc_msgSend(v9, sel_setContentCompressionResistancePriority_forAxis_, 0, v12);
  id v13 = CAFUIBadgeView.label.getter();
  if (a2)
  {
    id v14 = (void *)MEMORY[0x24C59F610](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v14 = 0;
  }
  objc_msgSend(v13, sel_setText_, v14);

  uint64_t v15 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2495300E0;
  id v17 = CAFUIBadgeView.label.getter();
  id v18 = objc_msgSend(v17, sel_topAnchor);

  id v19 = objc_msgSend(v9, sel_topAnchor);
  id v20 = objc_msgSend(v18, sel_constraintEqualToAnchor_, v19);

  *(void *)(v16 + 32) = v20;
  id v21 = CAFUIBadgeView.label.getter();
  id v22 = objc_msgSend(v21, sel_leadingAnchor);

  id v23 = objc_msgSend(v9, sel_leadingAnchor);
  id v24 = objc_msgSend(v22, sel_constraintEqualToAnchor_, v23);

  *(void *)(v16 + 40) = v24;
  id v25 = CAFUIBadgeView.label.getter();
  id v26 = objc_msgSend(v25, sel_bottomAnchor);

  id v27 = objc_msgSend(v9, sel_bottomAnchor);
  id v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

  *(void *)(v16 + 48) = v28;
  id v29 = CAFUIBadgeView.label.getter();
  id v30 = objc_msgSend(v29, sel_trailingAnchor);

  id v31 = objc_msgSend(v9, sel_trailingAnchor);
  id v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

  *(void *)(v16 + 56) = v32;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_activateConstraints_, isa);

  return v9;
}

uint64_t type metadata accessor for CAFUIBadgeView()
{
  return self;
}

id CAFUIBadgeView.label.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC5CAFUI14CAFUIBadgeView____lazy_storage___label;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI14CAFUIBadgeView____lazy_storage___label);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC5CAFUI14CAFUIBadgeView____lazy_storage___label);
  }
  else
  {
    id v4 = closure #1 in CAFUIBadgeView.label.getter();
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in CAFUIBadgeView.label.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  id v1 = objc_msgSend(self, sel_boldSystemFontOfSize_, 12.0);
  objc_msgSend(v0, sel_setFont_, v1);

  id v2 = objc_allocWithZone(MEMORY[0x263F825C8]);
  float v6[4] = closure #1 in closure #1 in CAFUIBadgeView.label.getter;
  v6[5] = 0;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 1107296256;
  uint64_t v6[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  v6[3] = &block_descriptor_3;
  id v3 = _Block_copy(v6);
  id v4 = objc_msgSend(v2, sel_initWithDynamicProvider_, v3);
  _Block_release(v3);
  swift_release();
  objc_msgSend(v0, sel_setTextColor_, v4);

  objc_msgSend(v0, sel_setTextAlignment_, 1);
  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return v0;
}

id closure #1 in closure #1 in CAFUIBadgeView.label.getter()
{
  id v0 = objc_msgSend(self, sel_whiteColor);

  return v0;
}

double CAFUIBadgeView.intrinsicContentSize.getter()
{
  id v0 = CAFUIBadgeView.label.getter();
  objc_msgSend(v0, sel_intrinsicContentSize);
  double v2 = v1;

  if (one-time initialization token for badgePadding != -1) {
    swift_once();
  }
  return v2 + *(double *)&static CAFUIBadgeView.badgePadding;
}

CGSize __swiftcall CAFUIBadgeView.sizeThatFits(_:)(CGSize a1)
{
  double height = a1.height;
  double width = a1.width;
  id v3 = CAFUIBadgeView.label.getter();
  objc_msgSend(v3, sel_sizeThatFits_, width, height);
  double v5 = v4;
  double v7 = v6;

  if (one-time initialization token for badgePadding != -1) {
    swift_once();
  }
  double v8 = v5 + *(double *)&static CAFUIBadgeView.badgePadding;
  double v9 = v7 + *((double *)&static CAFUIBadgeView.badgePadding + 1);
  result.double height = v9;
  result.double width = v8;
  return result;
}

Swift::Void __swiftcall CAFUIBadgeView.layoutSubviews()()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CAFUIBadgeView();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  id v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setCornerRadius_, v2 * 0.5);
}

id CAFUIBadgeView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void CAFUIBadgeView.init(frame:)()
{
}

id CAFUIBadgeView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIBadgeView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor)(uint64_t a1, void *a2)
{
  objc_super v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  double v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t CAFUICabinAssetCoordinator.cabinImage.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

id CAFUICabinAssetCoordinator.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x270FA5388](v1 - 8);
  objc_super v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAUAssetLibrary?>.Publisher);
  uint64_t v28 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  double v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Published<CAUAssetLibrary?>.Publisher, NSRunLoop>);
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  MEMORY[0x270FA5388](v6);
  double v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UIImage?>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  double v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = OBJC_IVAR____TtC5CAFUI26CAFUICabinAssetCoordinator_assetManager;
  type metadata accessor for CAUAssetLibraryManager();
  swift_allocObject();
  id v14 = v0;
  *(void *)&v0[v13] = CAUAssetLibraryManager.init()();
  uint64_t v15 = &v14[OBJC_IVAR____TtC5CAFUI26CAFUICabinAssetCoordinator__cabinImage];
  id v29 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIImage?);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v12, v9);
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v16 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v16 = MEMORY[0x263F8EE88];
  }
  uint64_t v18 = v26;
  uint64_t v17 = v27;
  uint64_t v19 = v25;
  *(void *)&v14[OBJC_IVAR____TtC5CAFUI26CAFUICabinAssetCoordinator_cancellables] = v16;

  id v20 = (objc_class *)type metadata accessor for CAFUICabinAssetCoordinator();
  v30.receiver = v14;
  v30.super_class = v20;
  id v21 = objc_msgSendSuper2(&v30, sel_init);
  dispatch thunk of CAUAssetLibraryManager.$assetLibrary.getter();
  id v29 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v22 = type metadata accessor for NSRunLoop.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v3, 1, 1, v22);
  type metadata accessor for NSRunLoop();
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Published<CAUAssetLibrary?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAUAssetLibrary?>.Publisher);
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop(&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (void (*)(uint64_t))type metadata accessor for NSRunLoop);
  Publisher.receive<A>(on:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v3);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v19);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Published<CAUAssetLibrary?>.Publisher, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Published<CAUAssetLibrary?>.Publisher, NSRunLoop>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v17);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();

  return v21;
}

void closure #1 in CAFUICabinAssetCoordinator.init()(void **a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAUResource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = *a1;
  swift_beginAccess();
  uint64_t v9 = (void *)MEMORY[0x24C5A0810](a2 + 16);
  if (v9)
  {
    uint64_t v10 = v9;
    if (v8)
    {
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F30D30], v4);
      id v11 = v8;
      double v12 = CAUAssetLibrary.asset(for:)((uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_getKeyPath();
      swift_getKeyPath();
      v15[1] = v12;
      uint64_t v13 = v12;
      id v14 = v10;
      static Published.subscript.setter();
    }
    else
    {
    }
  }
}

id CAFUICabinAssetCoordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUICabinAssetCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFUICabinAssetCoordinator@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFUICabinAssetCoordinator();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

id (*variable initialization expression of CAFUICabinView._cabinCoordinator())()
{
  return implicit closure #2 in implicit closure #1 in variable initialization expression of CAFUICabinView._cabinCoordinator;
}

id implicit closure #2 in implicit closure #1 in variable initialization expression of CAFUICabinView._cabinCoordinator()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for CAFUICabinAssetCoordinator());

  return objc_msgSend(v0, sel_init);
}

__n128 CAFUICabinView.body.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  closure #1 in CAFUICabinView.body.getter(a1, (uint64_t)v13);
  uint64_t v7 = v14;
  char v8 = v15;
  __n128 result = (__n128)v13[0];
  long long v10 = v13[1];
  long long v11 = v13[2];
  long long v12 = v13[3];
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 64) = v12;
  *(void *)(a2 + 80) = v7;
  *(unsigned char *)(a2 + 88) = v8;
  return result;
}

double closure #1 in CAFUICabinView.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for CAFUICabinAssetCoordinator();
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop(&lazy protocol witness table cache variable for type CAFUICabinAssetCoordinator and conformance CAFUICabinAssetCoordinator, (void (*)(uint64_t))type metadata accessor for CAFUICabinAssetCoordinator);
  char v8 = (void *)StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  uint64_t v9 = (void *)v32;
  if ((void)v32)
  {
    uint64_t v10 = static HorizontalAlignment.center.getter();
    id v11 = v9;
    Image.init(uiImage:)();
    (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F1B4B8], v4);
    uint64_t v12 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    swift_retain();
    uint64_t v13 = static Alignment.center.getter();
    *(void *)uint64_t v25 = v10;
    *(_OWORD *)&v25[8] = xmmword_249531470;
    uint64_t v26 = v12;
    long long v27 = xmmword_249531470;
    uint64_t v28 = a1;
    uint64_t v29 = v13;
    uint64_t v30 = v14;
    char v31 = 0;
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>>);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v15 = static Color.clear.getter();
    uint64_t KeyPath = swift_getKeyPath();
    swift_retain();
    uint64_t v17 = static Alignment.center.getter();
    *(_OWORD *)uint64_t v25 = xmmword_249531480;
    *(void *)&v25[16] = KeyPath;
    uint64_t v26 = v15;
    *(void *)&long long v27 = a1;
    *((void *)&v27 + 1) = v17;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = v18;
    char v31 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>>);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
  }
  double result = *(double *)&v32;
  long long v20 = v33;
  long long v21 = v34;
  long long v22 = v35;
  uint64_t v23 = v36;
  char v24 = v37;
  *(_OWORD *)a2 = v32;
  *(_OWORD *)(a2 + 16) = v20;
  *(_OWORD *)(a2 + 32) = v21;
  *(_OWORD *)(a2 + 48) = v22;
  *(void *)(a2 + 64) = v23;
  *(unsigned char *)(a2 + 72) = v24;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CAFUICabinView()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 protocol witness for View.body.getter in conformance CAFUICabinView@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  closure #1 in CAFUICabinView.body.getter(v3, (uint64_t)v13);
  uint64_t v7 = v14;
  char v8 = v15;
  __n128 result = (__n128)v13[0];
  long long v10 = v13[1];
  long long v11 = v13[2];
  long long v12 = v13[3];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 64) = v12;
  *(void *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 88) = v8;
  return result;
}

uint64_t ObjC metadata update function for CAFUICabinAssetCoordinator()
{
  return type metadata accessor for CAFUICabinAssetCoordinator();
}

uint64_t type metadata accessor for CAFUICabinAssetCoordinator()
{
  uint64_t result = type metadata singleton initialization cache for CAFUICabinAssetCoordinator;
  if (!type metadata singleton initialization cache for CAFUICabinAssetCoordinator) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for CAFUICabinAssetCoordinator()
{
  type metadata accessor for Published<UIImage?>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for Published<UIImage?>()
{
  if (!lazy cache variable for type metadata for Published<UIImage?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UIImage?);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<UIImage?>);
    }
  }
}

id outlined copy of StateObject<CAFUICabinAssetCoordinator>.Storage(uint64_t a1, void *a2, char a3)
{
  if (a3) {
    return a2;
  }
  else {
    return (id)swift_retain();
  }
}

uint64_t destroy for CAFUICabinView(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);

  return outlined consume of StateObject<CAFUICabinAssetCoordinator>.Storage(v2, v3, v4);
}

uint64_t outlined consume of StateObject<CAFUICabinAssetCoordinator>.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return MEMORY[0x270F9A758]();
  }
  else {
    return swift_release();
  }
}

uint64_t initializeWithCopy for CAFUICabinView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  char v4 = *(void **)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  swift_retain();
  outlined copy of StateObject<CAFUICabinAssetCoordinator>.Storage(v3, v4, v5);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  return a1;
}

uint64_t assignWithCopy for CAFUICabinView(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = v2[1];
  char v5 = (void *)v2[2];
  LOBYTE(v2) = *((unsigned char *)v2 + 24);
  outlined copy of StateObject<CAFUICabinAssetCoordinator>.Storage(v4, v5, (char)v2);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = (_BYTE)v2;
  outlined consume of StateObject<CAFUICabinAssetCoordinator>.Storage(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CAFUICabinView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of StateObject<CAFUICabinAssetCoordinator>.Storage(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUICabinView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUICabinView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUICabinView()
{
  return &type metadata for CAFUICabinView;
}

uint64_t sub_2494F0D90()
{
  return lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type ZStack<_ConditionalContent<VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>, ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>>>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<_ConditionalContent<VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>, ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>>>>);
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in CAFUICabinAssetCoordinator()
{
  return MEMORY[0x263EFDDD8];
}

uint64_t key path getter for CAFUICabinAssetCoordinator.cabinImage : CAFUICabinAssetCoordinator@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for CAFUICabinAssetCoordinator.cabinImage : CAFUICabinAssetCoordinator(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v4 = v2;
  id v5 = v3;
  return static Published.subscript.setter();
}

unint64_t type metadata accessor for NSRunLoop()
{
  unint64_t result = lazy cache variable for type metadata for NSRunLoop;
  if (!lazy cache variable for type metadata for NSRunLoop)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  }
  return result;
}

uint64_t sub_2494F0F14()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in CAFUICabinAssetCoordinator.init()(void **a1)
{
  closure #1 in CAFUICabinAssetCoordinator.init()(a1, v1);
}

uint64_t lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _OverlayModifier<AnyView?> and conformance _OverlayModifier<A>, &demangling cache variable for type metadata for _OverlayModifier<AnyView?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<Rectangle, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Rectangle, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Rectangle, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Rectangle, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Rectangle, _AspectRatioLayout>);
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Rectangle, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Rectangle and conformance Rectangle()
{
  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

uint64_t CAFUIBalanceFadeView.init(soundDistributionObservable:)()
{
  return ObservedObject.init(wrappedValue:)();
}

void CAFUIBalanceFadeCrosshair.path(in:)(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D4>, double a5@<D5>, double a6@<D6>)
{
  CGRect v25 = CGRectInset(*(CGRect *)&a3, a6 + 1.0, a6 + 1.0);
  double v14 = v25.origin.x + v25.size.width * a4;
  double v15 = v25.origin.y + v25.size.height * a5;
  if (a1)
  {
    double v16 = a6 + -2.0 + -1.0;
    id v17 = objc_msgSend(self, sel_bezierPathWithRoundedRect_cornerRadius_, v14 - v16, v15 - v16, v16 + v16, v16 + v16, 12.0);
    id v18 = objc_msgSend(v17, sel_CGPath);
    Path.init(_:)();
    char v19 = v24;

    long long v21 = v23;
    long long v20 = v22;
  }
  else
  {
    CAFUIBalanceFadeCrosshair.crosshairPath(rect:centerPoint:)((uint64_t)&v22, v25.origin.x, v25.origin.y, v25.size.width, v25.size.height, v14, v15, a6);
    long long v20 = v22;
    long long v21 = v23;
    char v19 = v24;
  }
  *(_OWORD *)a2 = v20;
  *(_OWORD *)(a2 + 16) = v21;
  *(unsigned char *)(a2 + 32) = v19;
}

double CAFUIBalanceFadeCrosshair.crosshairPath(rect:centerPoint:)@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, double a6@<D4>, double a7@<D5>, double a8)
{
  id v15 = objc_msgSend(self, sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, a6, a7, a8, -1.57079633, 4.71238898);
  id v16 = objc_msgSend(v15, sel_CGPath);
  Path.init(_:)();
  if (a6 > 26.0)
  {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824C0]), sel_init);
    v58.origin.CGFloat x = a2;
    v58.origin.CGFloat y = a3;
    v58.size.double width = a4;
    v58.size.double height = a5;
    objc_msgSend(v17, sel_moveToPoint_, CGRectGetMinX(v58), a7);
    v59.origin.CGFloat x = a2;
    v59.origin.CGFloat y = a3;
    v59.size.double width = a4;
    v59.size.double height = a5;
    objc_msgSend(v17, sel_addLineToPoint_, a6 - a2 - a8 + CGRectGetMinX(v59), a7);
    id v18 = objc_msgSend(v17, sel_CGPath);
    Path.init(_:)();
    uint64_t v52 = 0x3FF0000000000000;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0x3FF0000000000000;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    Path.addPath(_:transform:)();
    outlined release of Path((uint64_t)v30);
  }
  v60.origin.CGFloat x = a2;
  v60.origin.CGFloat y = a3;
  v60.size.double width = a4;
  v60.size.double height = a5;
  if (a6 + a8 < CGRectGetMaxX(v60))
  {
    id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824C0]), sel_init);
    objc_msgSend(v19, sel_moveToPoint_, a6 + a8, a7);
    v61.origin.CGFloat x = a2;
    v61.origin.CGFloat y = a3;
    v61.size.double width = a4;
    v61.size.double height = a5;
    objc_msgSend(v19, sel_addLineToPoint_, CGRectGetMaxX(v61), a7);
    id v20 = objc_msgSend(v19, sel_CGPath);
    Path.init(_:)();
    uint64_t v46 = 0x3FF0000000000000;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0x3FF0000000000000;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    Path.addPath(_:transform:)();
    outlined release of Path((uint64_t)v31);
  }
  if (a7 > 26.0)
  {
    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824C0]), sel_init);
    v62.origin.CGFloat x = a2;
    v62.origin.CGFloat y = a3;
    v62.size.double width = a4;
    v62.size.double height = a5;
    objc_msgSend(v21, sel_moveToPoint_, a6, CGRectGetMinY(v62));
    objc_msgSend(v21, sel_addLineToPoint_, a6, a7 - a8);
    id v22 = objc_msgSend(v21, sel_CGPath);
    Path.init(_:)();
    uint64_t v40 = 0x3FF0000000000000;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0x3FF0000000000000;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    Path.addPath(_:transform:)();
    outlined release of Path((uint64_t)v32);
  }
  double v23 = a7 + a8;
  v63.origin.CGFloat x = a2;
  v63.origin.CGFloat y = a3;
  v63.size.double width = a4;
  v63.size.double height = a5;
  if (v23 < CGRectGetMaxY(v63))
  {
    id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824C0]), sel_init);
    v64.origin.CGFloat x = a2;
    v64.origin.CGFloat y = a3;
    v64.size.double width = a4;
    v64.size.double height = a5;
    objc_msgSend(v24, sel_moveToPoint_, a6, CGRectGetMaxY(v64));
    objc_msgSend(v24, sel_addLineToPoint_, a6, v23);
    id v25 = objc_msgSend(v24, sel_CGPath);
    Path.init(_:)();
    uint64_t v34 = 0x3FF0000000000000;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0x3FF0000000000000;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    Path.addPath(_:transform:)();

    outlined release of Path((uint64_t)v33);
    id v15 = v24;
  }

  double result = *(double *)&v27;
  *(_OWORD *)a1 = v27;
  *(_OWORD *)(a1 + 16) = v28;
  *(unsigned char *)(a1 + 32) = v29;
  return result;
}

double protocol witness for Shape.path(in:) in conformance CAFUIBalanceFadeCrosshair@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CAFUIBalanceFadeCrosshair.path(in:)(*(unsigned char *)(v2 + 16), (uint64_t)v6, a2, *(double *)v2, *(double *)(v2 + 8), *(double *)(v2 + 24));
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 32) = v7;
  return result;
}

uint64_t protocol witness for static Shape.role.getter in conformance CAFUIBalanceFadeCrosshair()
{
  return MEMORY[0x270F047E8]();
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance CAFUIBalanceFadeCrosshair()
{
  return MEMORY[0x270F047D8]();
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance CAFUIBalanceFadeCrosshair()
{
  return MEMORY[0x270F047C8]();
}

void (*protocol witness for Animatable.animatableData.modify in conformance CAFUIBalanceFadeCrosshair(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance CAFUIBalanceFadeCrosshair()
{
  return MEMORY[0x270EFEBB8]();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CAFUIBalanceFadeCrosshair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair();

  return MEMORY[0x270F04808](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CAFUIBalanceFadeCrosshair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair();

  return MEMORY[0x270F047D0](a1, a2, a3, v6);
}

uint64_t protocol witness for View.body.getter in conformance CAFUIBalanceFadeCrosshair(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair();

  return MEMORY[0x270F047E0](a1, v2);
}

uint64_t property wrapper backing initializer of CAFUIBalanceFadeView.soundDistributionObservable()
{
  type metadata accessor for CAFSoundDistributionObservable();
  lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(&lazy protocol witness table cache variable for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable, MEMORY[0x263F2BE18]);

  return ObservedObject.init(wrappedValue:)();
}

uint64_t CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>);
  MEMORY[0x270FA5388](v8);
  long long v10 = (uint64_t *)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = static HorizontalAlignment.center.getter();
  uint64_t *v10 = static Alignment.center.getter();
  v10[1] = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>);
  closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(a1, a2, a3, (uint64_t *)((char *)v10 + *(int *)(v13 + 44)));
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>);
  uint64_t result = AnyView.init<A>(_:)();
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  *(void *)(a4 + 24) = result;
  *(void *)(a4 + 32) = implicit closure #2 in implicit closure #1 in variable initialization expression of CAFUICabinView._cabinCoordinator;
  *(void *)(a4 + 40) = 0;
  *(unsigned char *)(a4 + 48) = 0;
  return result;
}

uint64_t closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v40 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  id v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  id v18 = (char *)&v39 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  id v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  id v24 = (char *)&v39 - v23;
  uint64_t v25 = static Alignment.center.getter();
  uint64_t v41 = v26;
  uint64_t v42 = v25;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a1;
  *(void *)(v27 + 24) = a2;
  *(unsigned char *)(v27 + 32) = a3;
  if (a3)
  {
    id v28 = a2;
    *(void *)id v18 = static VerticalAlignment.center.getter();
    *((void *)v18 + 1) = 0;
    v18[16] = 1;
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(a1, v28, 1, (uint64_t)&v18[*(int *)(v29 + 44)]);
    *(void *)uint64_t v12 = static HorizontalAlignment.center.getter();
    *((void *)v12 + 1) = 0;
    v12[16] = 1;
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(a1, v28, 1, (uint64_t)&v12[*(int *)(v30 + 44)]);
    outlined init with copy of UIListContentConfiguration?((uint64_t)v18, (uint64_t)v16, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    uint64_t v31 = v40;
    outlined init with copy of UIListContentConfiguration?((uint64_t)v12, v40, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    outlined init with copy of UIListContentConfiguration?((uint64_t)v16, (uint64_t)v22, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>));
    outlined init with copy of UIListContentConfiguration?(v31, (uint64_t)&v22[*(int *)(v32 + 48)], &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    outlined destroy of UIContentConfiguration?((uint64_t)v12, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    outlined destroy of UIContentConfiguration?((uint64_t)v18, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    outlined destroy of UIContentConfiguration?(v31, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    outlined destroy of UIContentConfiguration?((uint64_t)v16, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v22, 0, 1, v33);
    outlined init with take of Any?((uint64_t)v22, (uint64_t)v24, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  }
  else
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v24, 1, 1, v34);
    id v35 = a2;
  }
  outlined init with copy of UIListContentConfiguration?((uint64_t)v24, (uint64_t)v22, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  uint64_t v36 = v41;
  *a4 = v42;
  a4[1] = v36;
  a4[2] = (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter;
  a4[3] = v27;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?));
  outlined init with copy of UIListContentConfiguration?((uint64_t)v22, (uint64_t)a4 + *(int *)(v37 + 48), &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  swift_retain();
  outlined destroy of UIContentConfiguration?((uint64_t)v24, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  outlined destroy of UIContentConfiguration?((uint64_t)v22, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  return swift_release();
}

uint64_t associated type witness table accessor for View.Body : View in CAFUIBalanceFadeView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X1>, void *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  int v48 = a3;
  id v47 = a2;
  uint64_t v57 = a4;
  uint64_t v5 = type metadata accessor for DragGesture();
  uint64_t v49 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ChangedGesture<DragGesture>);
  uint64_t v53 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  uint64_t v54 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v55 = v12;
  uint64_t v56 = v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v50 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for LocalCoordinateSpace();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  id v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.local.getter();
  GeometryProxy.frame<A>(in:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  id v27 = v47;
  id v28 = (void *)CAFSoundDistributionObservable.observed.getter();

  CAFSoundDistribution.balanceScale.getter();
  uint64_t v30 = v29;

  id v31 = v27;
  uint64_t v32 = (void *)CAFSoundDistributionObservable.observed.getter();

  CAFSoundDistribution.fadeScale.getter();
  uint64_t v34 = v33;

  uint64_t v58 = v30;
  uint64_t v59 = v34;
  LOBYTE(v60) = 0;
  static CoordinateSpaceProtocol<>.local.getter();
  DragGesture.init<A>(minimumDistance:coordinateSpace:)();
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = a1;
  *(void *)(v35 + 24) = v31;
  LOBYTE(v18) = v48;
  *(unsigned char *)(v35 + 32) = v48;
  *(void *)(v35 + 40) = v20;
  *(void *)(v35 + 48) = v22;
  *(void *)(v35 + 56) = v24;
  *(void *)(v35 + 64) = v26;
  lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(&lazy protocol witness table cache variable for type DragGesture and conformance DragGesture, MEMORY[0x263F185B8]);
  lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(&lazy protocol witness table cache variable for type DragGesture.Value and conformance DragGesture.Value, MEMORY[0x263F18588]);
  id v36 = v31;
  Gesture<>.onChanged(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v7, v5);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = a1;
  *(void *)(v37 + 24) = v36;
  *(unsigned char *)(v37 + 32) = (_BYTE)v18;
  *(void *)(v37 + 40) = v20;
  *(void *)(v37 + 48) = v22;
  *(void *)(v37 + 56) = v24;
  *(void *)(v37 + 64) = v26;
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ChangedGesture<DragGesture> and conformance _ChangedGesture<A>, &demangling cache variable for type metadata for _ChangedGesture<DragGesture>);
  id v38 = v36;
  uint64_t v39 = v51;
  Gesture.onEnded(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v39);
  static GestureMask.all.getter();
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>>);
  unint64_t v41 = lazy protocol witness table accessor for type ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>();
  uint64_t v42 = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  uint64_t v43 = v50;
  uint64_t v44 = v52;
  View.simultaneousGesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v11, v44);
  uint64_t v58 = v40;
  uint64_t v59 = v44;
  unint64_t v60 = v41;
  uint64_t v61 = v42;
  swift_getOpaqueTypeConformance2();
  uint64_t v45 = v55;
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v43, v45);
}

void closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, void *a7)
{
  DragGesture.Value.location.getter();
  double v11 = v10 + -32.0;
  double v13 = v12 + -32.0;
  double v14 = a4 + -64.0;
  id v15 = a7;
  uint64_t v16 = (void *)CAFSoundDistributionObservable.observed.getter();

  double v17 = v11 / (a3 + -64.0);
  if (v17 < 0.0) {
    double v17 = 0.0;
  }
  CAFSoundDistribution.balanceScale.setter(fmin(v17, 1.0));

  id v18 = v15;
  id v20 = (id)CAFSoundDistributionObservable.observed.getter();

  double v19 = v13 / v14;
  if (v13 / v14 < 0.0) {
    double v19 = 0.0;
  }
  CAFSoundDistribution.fadeScale.setter(fmin(v19, 1.0));
}

uint64_t closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = a3;
  int v51 = a3;
  uint64_t v50 = a1;
  uint64_t v54 = a4;
  char v7 = (int *)type metadata accessor for AudioSettingsButton();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v53 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v52 = (char *)&v47 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  double v17 = (char *)&v47 - v16;
  MEMORY[0x270FA5388](v15);
  double v19 = (char *)&v47 - v18;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  *(unsigned char *)(v20 + 32) = v4;
  uint64_t *v9 = swift_getKeyPath();
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = v7[7];
  uint64_t v48 = *MEMORY[0x263F83618];
  uint64_t v22 = v48;
  double v23 = *MEMORY[0x263F81840];
  id v24 = objc_allocWithZone(MEMORY[0x263F82770]);
  id v47 = a2;
  id v25 = objc_msgSend(v24, sel_initForTextStyle_, v22);
  uint64_t v26 = self;
  id v27 = objc_msgSend(v26, sel_systemFontOfSize_weight_, 16.0, v23);
  id v28 = objc_msgSend(v25, sel_scaledFontForFont_, v27);

  *(uint64_t *)((char *)v9 + v21) = Font.init(_:)();
  uint64_t v29 = (void (**)())((char *)v9 + v7[6]);
  *uint64_t v29 = partial apply for closure #1 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter;
  v29[1] = (void (*)())v20;
  uint64_t v30 = (char *)v9 + v7[5];
  strcpy(v30, "chevron.left");
  v30[13] = 0;
  *((_WORD *)v30 + 7) = -5120;
  lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(&lazy protocol witness table cache variable for type AudioSettingsButton and conformance AudioSettingsButton, (void (*)(uint64_t))type metadata accessor for AudioSettingsButton);
  View.accessibilityIdentifier(_:)();
  outlined destroy of AudioSettingsButton((uint64_t)v9);
  outlined init with take of Any?((uint64_t)v17, (uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v47;
  *(void *)(v31 + 16) = v50;
  *(void *)(v31 + 24) = v32;
  *(unsigned char *)(v31 + 32) = v51;
  uint64_t *v9 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = v7[7];
  id v34 = objc_allocWithZone(MEMORY[0x263F82770]);
  id v35 = v32;
  id v36 = objc_msgSend(v34, sel_initForTextStyle_, v48);
  id v37 = objc_msgSend(v26, sel_systemFontOfSize_weight_, 16.0, v23);
  id v38 = objc_msgSend(v36, sel_scaledFontForFont_, v37);

  *(uint64_t *)((char *)v9 + v33) = Font.init(_:)();
  uint64_t v39 = (void (**)())((char *)v9 + v7[6]);
  *uint64_t v39 = partial apply for closure #2 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter;
  v39[1] = (void (*)())v31;
  uint64_t v40 = (char *)v9 + v7[5];
  strcpy(v40, "chevron.right");
  *((_WORD *)v40 + 7) = -4864;
  uint64_t v41 = (uint64_t)v52;
  View.accessibilityIdentifier(_:)();
  outlined destroy of AudioSettingsButton((uint64_t)v9);
  outlined init with take of Any?(v41, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined init with copy of UIListContentConfiguration?((uint64_t)v19, v41, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  uint64_t v42 = v53;
  outlined init with copy of UIListContentConfiguration?((uint64_t)v17, v53, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  uint64_t v43 = v54;
  outlined init with copy of UIListContentConfiguration?(v41, v54, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>));
  uint64_t v45 = v43 + *(int *)(v44 + 48);
  *(void *)uint64_t v45 = 0;
  *(unsigned char *)(v45 + 8) = 1;
  outlined init with copy of UIListContentConfiguration?(v42, v43 + *(int *)(v44 + 64), &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?((uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?((uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?(v42, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  return outlined destroy of UIContentConfiguration?(v41, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
}

void closure #1 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(uint64_t a1, void *a2)
{
  id v2 = a2;
  char v3 = dispatch thunk of CAFSoundDistributionObservable.balance.getter();

  id v4 = v2;
  uint64_t v5 = (void *)CAFSoundDistributionObservable.observed.getter();

  id v6 = objc_msgSend(v5, sel_balanceRange);
  LODWORD(v5) = objc_msgSend(v6, sel_minimumValue);

  if ((int)v5 < v3)
  {
    id v7 = v4;
    uint64_t v8 = (void *)CAFSoundDistributionObservable.observed.getter();
    id v9 = objc_msgSend(v8, sel_balanceRange);

    LODWORD(v8) = objc_msgSend(v9, sel_stepValue);
    uint64_t v10 = (void (*)(uint64_t *, void))dispatch thunk of CAFSoundDistributionObservable.balance.modify();
    int v12 = (char)*v11 - v8;
    if ((char)(*v11 - (_BYTE)v8) == v12)
    {
      *uint64_t v11 = v12;
      v10(&v13, 0);
    }
    else
    {
      __break(1u);
    }
  }
}

void closure #2 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(uint64_t a1, void *a2)
{
  id v2 = a2;
  char v3 = dispatch thunk of CAFSoundDistributionObservable.balance.getter();

  id v4 = v2;
  uint64_t v5 = (void *)CAFSoundDistributionObservable.observed.getter();

  id v6 = objc_msgSend(v5, sel_balanceRange);
  LODWORD(v5) = objc_msgSend(v6, sel_maximumValue);

  if ((int)v5 > v3)
  {
    id v7 = v4;
    uint64_t v8 = (void *)CAFSoundDistributionObservable.observed.getter();
    id v9 = objc_msgSend(v8, sel_balanceRange);

    LODWORD(v8) = objc_msgSend(v9, sel_stepValue);
    uint64_t v10 = (void (*)(uint64_t *, void))dispatch thunk of CAFSoundDistributionObservable.balance.modify();
    int v12 = (char)*v11 + v8;
    if ((char)(*v11 + (_BYTE)v8) == v12)
    {
      *uint64_t v11 = v12;
      v10(&v13, 0);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = a3;
  int v51 = a3;
  uint64_t v50 = a1;
  uint64_t v54 = a4;
  id v7 = (int *)type metadata accessor for AudioSettingsButton();
  MEMORY[0x270FA5388](v7);
  id v9 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v53 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v52 = (char *)&v47 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  double v17 = (char *)&v47 - v16;
  MEMORY[0x270FA5388](v15);
  double v19 = (char *)&v47 - v18;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  *(unsigned char *)(v20 + 32) = v4;
  uint64_t *v9 = swift_getKeyPath();
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = v7[7];
  uint64_t v48 = *MEMORY[0x263F83618];
  uint64_t v22 = v48;
  double v23 = *MEMORY[0x263F81840];
  id v24 = objc_allocWithZone(MEMORY[0x263F82770]);
  id v47 = a2;
  id v25 = objc_msgSend(v24, sel_initForTextStyle_, v22);
  uint64_t v26 = self;
  id v27 = objc_msgSend(v26, sel_systemFontOfSize_weight_, 16.0, v23);
  id v28 = objc_msgSend(v25, sel_scaledFontForFont_, v27);

  *(uint64_t *)((char *)v9 + v21) = Font.init(_:)();
  uint64_t v29 = (void (**)())((char *)v9 + v7[6]);
  *uint64_t v29 = partial apply for closure #1 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter;
  v29[1] = (void (*)())v20;
  uint64_t v30 = (uint64_t *)((char *)v9 + v7[5]);
  *uint64_t v30 = 0x2E6E6F7276656863;
  v30[1] = 0xEA00000000007075;
  lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(&lazy protocol witness table cache variable for type AudioSettingsButton and conformance AudioSettingsButton, (void (*)(uint64_t))type metadata accessor for AudioSettingsButton);
  View.accessibilityIdentifier(_:)();
  outlined destroy of AudioSettingsButton((uint64_t)v9);
  outlined init with take of Any?((uint64_t)v17, (uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v47;
  *(void *)(v31 + 16) = v50;
  *(void *)(v31 + 24) = v32;
  *(unsigned char *)(v31 + 32) = v51;
  uint64_t *v9 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = v7[7];
  id v34 = objc_allocWithZone(MEMORY[0x263F82770]);
  id v35 = v32;
  id v36 = objc_msgSend(v34, sel_initForTextStyle_, v48);
  id v37 = objc_msgSend(v26, sel_systemFontOfSize_weight_, 16.0, v23);
  id v38 = objc_msgSend(v36, sel_scaledFontForFont_, v37);

  *(uint64_t *)((char *)v9 + v33) = Font.init(_:)();
  uint64_t v39 = (void (**)())((char *)v9 + v7[6]);
  *uint64_t v39 = partial apply for closure #2 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter;
  v39[1] = (void (*)())v31;
  uint64_t v40 = (char *)v9 + v7[5];
  strcpy(v40, "chevron.down");
  v40[13] = 0;
  *((_WORD *)v40 + 7) = -5120;
  uint64_t v41 = (uint64_t)v52;
  View.accessibilityIdentifier(_:)();
  outlined destroy of AudioSettingsButton((uint64_t)v9);
  outlined init with take of Any?(v41, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined init with copy of UIListContentConfiguration?((uint64_t)v19, v41, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  uint64_t v42 = v53;
  outlined init with copy of UIListContentConfiguration?((uint64_t)v17, v53, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  uint64_t v43 = v54;
  outlined init with copy of UIListContentConfiguration?(v41, v54, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>));
  uint64_t v45 = v43 + *(int *)(v44 + 48);
  *(void *)uint64_t v45 = 0;
  *(unsigned char *)(v45 + 8) = 1;
  outlined init with copy of UIListContentConfiguration?(v42, v43 + *(int *)(v44 + 64), &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?((uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?((uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?(v42, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  return outlined destroy of UIContentConfiguration?(v41, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
}

void closure #1 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(uint64_t a1, void *a2)
{
  id v2 = a2;
  char v3 = (void *)CAFSoundDistributionObservable.observed.getter();

  unsigned int v4 = objc_msgSend(v3, sel_hasFade);
  if (v4)
  {
    id v5 = v2;
    __int16 v6 = dispatch thunk of CAFSoundDistributionObservable.fade.getter();

    char v7 = (v6 & 0x100) != 0 ? 0 : v6;
    id v8 = v5;
    id v9 = (void *)CAFSoundDistributionObservable.observed.getter();

    id v10 = objc_msgSend(v9, sel_fadeRange);
    LODWORD(v9) = objc_msgSend(v10, sel_minimumValue);

    if ((int)v9 < v7)
    {
      id v11 = v8;
      uint64_t v12 = (void *)CAFSoundDistributionObservable.observed.getter();
      id v13 = objc_msgSend(v12, sel_fadeRange);

      unsigned int v14 = objc_msgSend(v13, sel_stepValue);
      uint64_t v15 = (void (*)(uint64_t *, void))dispatch thunk of CAFSoundDistributionObservable.fade.modify();
      if ((v16[1] & 1) == 0)
      {
        unsigned int v17 = *v16 - v14;
        if ((char)(*v16 - v14) == v17)
        {
          *uint64_t v16 = v17;
          v15(&v18, 0);

          return;
        }
        __break(1u);
      }
      __break(1u);
    }
  }
}

void closure #2 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(uint64_t a1, void *a2)
{
  id v2 = a2;
  char v3 = (void *)CAFSoundDistributionObservable.observed.getter();

  unsigned int v4 = objc_msgSend(v3, sel_hasFade);
  if (v4)
  {
    id v5 = v2;
    __int16 v6 = dispatch thunk of CAFSoundDistributionObservable.fade.getter();

    char v7 = (v6 & 0x100) != 0 ? 0 : v6;
    id v8 = v5;
    id v9 = (void *)CAFSoundDistributionObservable.observed.getter();

    id v10 = objc_msgSend(v9, sel_fadeRange);
    LODWORD(v9) = objc_msgSend(v10, sel_maximumValue);

    if ((int)v9 > v7)
    {
      id v11 = v8;
      uint64_t v12 = (void *)CAFSoundDistributionObservable.observed.getter();
      id v13 = objc_msgSend(v12, sel_fadeRange);

      unsigned int v14 = objc_msgSend(v13, sel_stepValue);
      uint64_t v15 = (void (*)(uint64_t *, void))dispatch thunk of CAFSoundDistributionObservable.fade.modify();
      if ((v16[1] & 1) == 0)
      {
        unsigned int v17 = *v16 + v14;
        if ((char)(*v16 + v14) == v17)
        {
          *uint64_t v16 = v17;
          v15(&v18, 0);

          return;
        }
        __break(1u);
      }
      __break(1u);
    }
  }
}

uint64_t protocol witness for View.body.getter in conformance CAFUIBalanceFadeView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>);
  MEMORY[0x270FA5388](v3);
  id v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)v1;
  char v7 = *(void **)(v1 + 8);
  char v8 = *(unsigned char *)(v1 + 16);
  uint64_t v9 = static HorizontalAlignment.center.getter();
  uint64_t *v5 = static Alignment.center.getter();
  v5[1] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>);
  closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(v6, v7, v8, (uint64_t *)((char *)v5 + *(int *)(v11 + 44)));
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>);
  uint64_t result = AnyView.init<A>(_:)();
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = result;
  *(void *)(a1 + 32) = implicit closure #2 in implicit closure #1 in variable initialization expression of CAFUICabinView._cabinCoordinator;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CAFUIBalanceFadeView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v4 = v3;
  return a1;
}

void destroy for CAFUIBalanceFadeView(uint64_t a1)
{
}

uint64_t assignWithCopy for CAFUIBalanceFadeView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  id v4 = *(void **)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CAFUIBalanceFadeView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIBalanceFadeView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIBalanceFadeView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIBalanceFadeView()
{
  return &type metadata for CAFUIBalanceFadeView;
}

uint64_t sub_2494F37E8()
{
  return lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type VStack<CAFUICabinView> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<CAFUICabinView>);
}

uint64_t *initializeBufferWithCopyOfBuffer for AudioSettingsButton(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *uint64_t v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (uint64_t *)((char *)v4 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    unsigned int v14 = (uint64_t *)((char *)v4 + v10);
    uint64_t v15 = (uint64_t *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    void *v14 = *v15;
    v14[1] = v16;
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AudioSettingsButton(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for AudioSettingsButton(void *a1, void *a2, int *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)((char *)a1 + v7);
  uint64_t v10 = (void *)((char *)a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)((char *)a1 + v8);
  uint64_t v13 = (void *)((char *)a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AudioSettingsButton(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for AudioSettingsButton(char *a1, char *a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for AudioSettingsButton(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = v12;
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  swift_release();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioSettingsButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2494F3EA0);
}

uint64_t sub_2494F3EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AudioSettingsButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2494F3F7C);
}

uint64_t sub_2494F3F7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AudioSettingsButton()
{
  uint64_t result = type metadata singleton initialization cache for AudioSettingsButton;
  if (!type metadata singleton initialization cache for AudioSettingsButton) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for AudioSettingsButton()
{
  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for AudioSettingsCrosshairView()
{
  return &type metadata for AudioSettingsCrosshairView;
}

uint64_t associated type witness table accessor for View.Body : View in AudioSettingsCrosshairView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AudioSettingsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v25 = type metadata accessor for ButtonRepeatBehavior();
  uint64_t v23 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v22 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for PlainButtonStyle();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v20 = v11;
  uint64_t v21 = v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AudioSettingsButton();
  uint64_t v26 = v1;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  uint64_t v15 = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>>);
  uint64_t v16 = lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  unsigned int v17 = v22;
  static ButtonRepeatBehavior.enabled.getter();
  uint64_t v27 = v7;
  uint64_t v28 = v3;
  uint64_t v29 = v15;
  uint64_t v30 = v16;
  swift_getOpaqueTypeConformance2();
  uint64_t v18 = v20;
  View.buttonRepeatBehavior(_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v14, v18);
}

uint64_t closure #1 in AudioSettingsButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v4 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  id v36 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ColorScheme();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = type metadata accessor for AudioSettingsButton();
  swift_bridgeObjectRetain();
  uint64_t v37 = Image.init(systemName:)();
  uint64_t v14 = *(void *)(a1 + *(int *)(v13 + 28));
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v34 = v39;
  int v33 = v40;
  uint64_t v32 = v41;
  int v31 = v42;
  uint64_t v29 = v44;
  uint64_t v30 = v43;
  id v15 = objc_msgSend(self, sel__carSystemFocusColor);
  uint64_t v28 = MEMORY[0x24C59F350](v15);
  uint64_t v16 = swift_getKeyPath();
  specialized Environment.wrappedValue.getter((uint64_t)v12);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, *MEMORY[0x263F184F8], v6);
  LOBYTE(a1) = static ColorScheme.== infix(_:_:)();
  unsigned int v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v10, v6);
  v17(v12, v6);
  uint64_t v18 = v36;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v36, *MEMORY[0x263F1B388], v38);
  if (a1)
  {
    v19.n128_u64[0] = 0x3FD4141414141414;
    v20.n128_u64[0] = 0x3FD6D6D6D6D6D6D7;
  }
  else
  {
    v19.n128_u64[0] = 0x3FE8B8B8B8B8B8B9;
    v20.n128_u64[0] = 0x3FE9191919191919;
  }
  uint64_t v21 = MEMORY[0x24C59F340](v18, v19, v19.n128_f64[0], v20, 1.0);
  uint64_t result = static Edge.Set.all.getter();
  uint64_t v23 = KeyPath;
  *(void *)a2 = v37;
  *(void *)(a2 + 8) = v23;
  uint64_t v24 = v34;
  *(void *)(a2 + 16) = v14;
  *(void *)(a2 + 24) = v24;
  *(unsigned char *)(a2 + 32) = v33;
  *(void *)(a2 + 40) = v32;
  *(unsigned char *)(a2 + 48) = v31;
  uint64_t v25 = v29;
  *(void *)(a2 + 56) = v30;
  *(void *)(a2 + 64) = v25;
  uint64_t v26 = v28;
  *(void *)(a2 + 72) = v16;
  *(void *)(a2 + 80) = v26;
  *(void *)(a2 + 88) = v21;
  *(unsigned char *)(a2 + 96) = result;
  *(_WORD *)(a2 + 97) = 256;
  return result;
}

uint64_t AudioSettingsCrosshairView.body.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<LayoutDirection>);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = type metadata accessor for LayoutDirection();
  uint64_t v10 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = static Alignment.center.getter();
  uint64_t v15 = v14;
  closure #1 in AudioSettingsCrosshairView.body.getter((uint64_t)v32, a2, a3);
  long long v41 = v32[6];
  long long v42 = v32[7];
  long long v43 = v32[8];
  *(void *)&long long v44 = v33;
  long long v37 = v32[2];
  long long v38 = v32[3];
  long long v39 = v32[4];
  long long v40 = v32[5];
  long long v35 = v32[0];
  long long v36 = v32[1];
  char v16 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  *(void *)&long long v34 = v13;
  *((void *)&v34 + 1) = v15;
  BYTE8(v44) = v16;
  *(void *)&long long v45 = v17;
  *((void *)&v45 + 1) = v18;
  *(void *)&long long v46 = v19;
  *((void *)&v46 + 1) = v20;
  char v47 = 0;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = v31;
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x263F18DC8], v31);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v9 + *(int *)(v7 + 36), v12, v22);
  uint64_t *v9 = KeyPath;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<LayoutDirection>>);
  outlined init with copy of UIListContentConfiguration?((uint64_t)v9, a1 + *(int *)(v23 + 36), &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<LayoutDirection>);
  long long v24 = v45;
  *(_OWORD *)(a1 + 160) = v44;
  *(_OWORD *)(a1 + 176) = v24;
  *(_OWORD *)(a1 + 192) = v46;
  *(unsigned char *)(a1 + 208) = v47;
  long long v25 = v41;
  *(_OWORD *)(a1 + 96) = v40;
  *(_OWORD *)(a1 + 112) = v25;
  long long v26 = v43;
  *(_OWORD *)(a1 + 128) = v42;
  *(_OWORD *)(a1 + 144) = v26;
  long long v27 = v37;
  *(_OWORD *)(a1 + 32) = v36;
  *(_OWORD *)(a1 + 48) = v27;
  long long v28 = v39;
  *(_OWORD *)(a1 + 64) = v38;
  *(_OWORD *)(a1 + 80) = v28;
  long long v29 = v35;
  *(_OWORD *)a1 = v34;
  *(_OWORD *)(a1 + 16) = v29;
  outlined retain of ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>((uint64_t)&v34);
  outlined destroy of UIContentConfiguration?((uint64_t)v9, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<LayoutDirection>);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v22);
  return outlined release of TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>((uint64_t)v32);
}

uint64_t closure #1 in AudioSettingsCrosshairView.body.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  id v6 = objc_msgSend(self, sel__carSystemFocusColor);
  uint64_t v7 = MEMORY[0x24C59F350](v6);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v8 = static Alignment.center.getter();
  uint64_t v10 = v9;
  uint64_t v11 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x4028000000000000;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v15;
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  *(void *)(a1 + 64) = v18;
  *(void *)(a1 + 72) = v7;
  *(_WORD *)(a1 + 80) = 256;
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v10;
  *(double *)(a1 + 104) = a2;
  *(double *)(a1 + 112) = a3;
  *(unsigned char *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0x4028000000000000;
  *(void *)(a1 + 136) = KeyPath;
  *(void *)(a1 + 144) = v11;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for View.body.getter in conformance AudioSettingsCrosshairView@<X0>(uint64_t a1@<X8>)
{
  return AudioSettingsCrosshairView.body.getter(a1, *v1, v1[1]);
}

uint64_t associated type witness table accessor for View.Body : View in AudioSettingsButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in AudioSettingsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in AudioSettingsButton.body.getter(*(void *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ClipEffect<Circle> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<Circle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UIListContentConfiguration?(v2, (uint64_t)v10, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    uint64_t v14 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v19[1] = a1;
      uint64_t v18 = v17;
      uint64_t v20 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      v19[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x686353726F6C6F43, 0xEB00000000656D65, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2494AC000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5A0780](v18, -1, -1);
      MEMORY[0x24C5A0780](v16, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.layoutDirection : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x263F18520], MEMORY[0x263F19230]);
}

uint64_t key path setter for EnvironmentValues.layoutDirection : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  MEMORY[0x270FA5388]();
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2494F53BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.font : EnvironmentValues, serialized()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_2494F5414()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_2494F5448()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_2494F546C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.layoutDirection : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x263F18DD8], MEMORY[0x263F19340]);
}

uint64_t outlined retain of ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>(uint64_t a1)
{
  return a1;
}

uint64_t sub_2494F5558()
{
  return MEMORY[0x270FA0238](v0, 33, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(void *)(v1 + 16), *(void **)(v1 + 24), *(unsigned __int8 *)(v1 + 32), a1);
}

void partial apply for closure #1 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter()
{
  closure #1 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_2494F55A8()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_2494F55CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.layoutDirection : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x263F18520], MEMORY[0x263F19230]);
}

uint64_t outlined destroy of AudioSettingsButton(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AudioSettingsButton();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #2 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter()
{
  closure #2 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void partial apply for closure #1 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter()
{
  closure #1 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void partial apply for closure #2 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter()
{
  closure #2 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_2494F568C()
{
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(uint64_t a1)
{
  closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64), a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>>);
    lazy protocol witness table accessor for type AudioSettingsCrosshairView and conformance AudioSettingsCrosshairView();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ContentShapeModifier<Rectangle> and conformance _ContentShapeModifier<A>, &demangling cache variable for type metadata for _ContentShapeModifier<Rectangle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioSettingsCrosshairView and conformance AudioSettingsCrosshairView()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioSettingsCrosshairView and conformance AudioSettingsCrosshairView;
  if (!lazy protocol witness table cache variable for type AudioSettingsCrosshairView and conformance AudioSettingsCrosshairView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioSettingsCrosshairView and conformance AudioSettingsCrosshairView);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CAFUIBalanceFadeCrosshair(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIBalanceFadeCrosshair(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIBalanceFadeCrosshair()
{
  return &type metadata for CAFUIBalanceFadeCrosshair;
}

uint64_t sub_2494F58D4()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>>);
  type metadata accessor for PlainButtonStyle();
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>>);
  lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<LayoutDirection>>);
    lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<LayoutDirection> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<LayoutDirection>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CAFUIBalanceFadeCrosshair()
{
  return lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ShapeView<CAFUIBalanceFadeCrosshair, ForegroundStyle> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<CAFUIBalanceFadeCrosshair, ForegroundStyle>);
}

unint64_t lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair;
  if (!lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair;
  if (!lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair;
  if (!lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair);
  }
  return result;
}

uint64_t outlined release of Path(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_release();
  }
  return result;
}

id CAFUILoadingViewController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id CAFUILoadingViewController.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUILoadingViewController();
  return objc_msgSendSuper2(&v2, sel_initWithNibName_bundle_, 0, 0);
}

uint64_t type metadata accessor for CAFUILoadingViewController()
{
  return self;
}

Swift::Void __swiftcall CAFUILoadingViewController.viewDidLoad()()
{
  v20.receiver = v0;
  v20.super_class = (Class)type metadata accessor for CAFUILoadingViewController();
  objc_msgSendSuper2(&v20, sel_viewDidLoad);
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F823E8]), sel_initWithActivityIndicatorStyle_, 21);
  id v2 = objc_msgSend(self, sel_labelColor);
  objc_msgSend(v1, sel_setColor_, v2);

  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  BOOL v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v1);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_249530110;
  id v6 = objc_msgSend(v1, sel_centerXAnchor);
  id v7 = objc_msgSend(v0, sel_view);
  if (!v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_safeAreaLayoutGuide);

  id v10 = objc_msgSend(v9, sel_centerXAnchor);
  id v11 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v10);

  *(void *)(v5 + 32) = v11;
  id v12 = objc_msgSend(v1, sel_centerYAnchor);
  id v13 = objc_msgSend(v0, sel_view);
  if (v13)
  {
    uint64_t v14 = v13;
    os_log_type_t v15 = self;
    id v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

    id v17 = objc_msgSend(v16, sel_centerYAnchor);
    id v18 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v17);

    *(void *)(v5 + 40) = v18;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v15, sel_activateConstraints_, isa);

    objc_msgSend(v1, sel_startAnimating);
    return;
  }
LABEL_7:
  __break(1u);
}

id CAFUILoadingViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x24C59F610]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CAFUILoadingViewController.init(nibName:bundle:)()
{
}

id CAFUILoadingViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUILoadingViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFUIAlertButton.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id CAFUIAlertButton.init()()
{
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for CAFUIAlertButton();
  id v1 = objc_msgSendSuper2(&v8, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_super v2 = self;
  id v3 = v1;
  id v4 = objc_msgSend(v2, sel_tintColor);
  objc_msgSend(v3, sel_setTitleColor_forState_, v4, 0);

  id v5 = v3;
  id v6 = objc_msgSend(v2, sel__carSystemQuaternaryColor);
  objc_msgSend(v5, sel_setBackgroundColor_, v6);

  return v5;
}

uint64_t type metadata accessor for CAFUIAlertButton()
{
  return self;
}

Swift::Void __swiftcall CAFUIAlertButton.didUpdateFocus(in:with:)(UIFocusUpdateContext in, UIFocusAnimationCoordinator with)
{
  id v3 = v2;
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for CAFUIAlertButton();
  objc_msgSendSuper2(&v13, sel_didUpdateFocusInContext_withAnimationCoordinator_, in.super.isa, with.super.isa);
  id v6 = [(objc_class *)in.super.isa nextFocusedView];
  if (v6
    && (id v7 = v6,
        type metadata accessor for NSObject(),
        char v8 = static NSObject.== infix(_:_:)(),
        v7,
        (v8 & 1) != 0))
  {
    id v9 = &selRef__carSystemFocusColor;
    id v10 = &selRef__carSystemFocusLabelColor;
  }
  else
  {
    id v9 = &selRef__carSystemQuaternaryColor;
    id v10 = &selRef_tintColor;
  }
  id v11 = [self *v10];
  objc_msgSend(v3, sel_setTitleColor_forState_, v11, 0);

  id v12 = [self *v9];
  objc_msgSend(v3, sel_setBackgroundColor_, v12);
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

id CAFUIAlertButton.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void CAFUIAlertButton.init(frame:)()
{
}

id CAFUIAlertButton.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIAlertButton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t destroy for CAFUISoundView(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CAFUISoundView(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  id v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CAFUISoundView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CAFUISoundView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUISoundView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUISoundView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUISoundView()
{
  return &type metadata for CAFUISoundView;
}

uint64_t associated type witness table accessor for View.Body : View in CAFUISoundView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in CAFUISoundView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v12 = a1[4];
  uint64_t v4 = v12;
  uint64_t v13 = v3;
  uint64_t v6 = *a1;
  id v5 = (void *)a1[1];
  char v7 = *((unsigned char *)a1 + 16);
  outlined retain of [CAFSettingsSection]((uint64_t)&v13);
  outlined retain of [CAFSettingsSection]((uint64_t)&v12);
  id v8 = v5;
  uint64_t v9 = static SafeAreaRegions.all.getter();
  char v10 = static Edge.Set.all.getter();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v8;
  *(unsigned char *)(a2 + 64) = v7;
  *(void *)(a2 + 72) = v9;
  *(unsigned char *)(a2 + 80) = v10;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 96) = 1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

__n128 protocol witness for View.body.getter in conformance CAFUISoundView@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v29[0] = *(_OWORD *)v1;
  v29[1] = v3;
  uint64_t v30 = *(void *)(v1 + 32);
  uint64_t v4 = static VerticalAlignment.center.getter();
  closure #1 in CAFUISoundView.body.getter((uint64_t *)v29, (uint64_t)&v17);
  uint64_t v5 = v17;
  char v6 = v18;
  uint64_t v7 = v20;
  char v8 = v21;
  uint64_t v9 = v22;
  uint64_t v10 = v23;
  char v11 = v24;
  uint64_t v12 = v25;
  char v13 = v26;
  uint64_t v14 = v27;
  char v15 = v28;
  __n128 result = v19;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v10;
  *(unsigned char *)(a1 + 88) = v11;
  *(void *)(a1 + 96) = v12;
  *(unsigned char *)(a1 + 104) = v13;
  *(void *)(a1 + 112) = v14;
  *(unsigned char *)(a1 + 120) = v15;
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(Spacer, CAFUIEqualizerGroup, Spacer, ModifiedContent<CAFUIBalanceFadeView, _SafeAreaRegionsIgnoringLayout>, Spacer)>> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<TupleView<(Spacer, CAFUIEqualizerGroup, Spacer, ModifiedContent<CAFUIBalanceFadeView, _SafeAreaRegionsIgnoringLayout>, Spacer)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(Spacer, CAFUIEqualizerGroup, Spacer, ModifiedContent<CAFUIBalanceFadeView, _SafeAreaRegionsIgnoringLayout>, Spacer)>> and conformance HStack<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for HStack<TupleView<(Spacer, CAFUIEqualizerGroup, Spacer, ModifiedContent<CAFUIBalanceFadeView, _SafeAreaRegionsIgnoringLayout>, Spacer)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(Spacer, CAFUIEqualizerGroup, Spacer, ModifiedContent<CAFUIBalanceFadeView, _SafeAreaRegionsIgnoringLayout>, Spacer)>> and conformance HStack<A>);
  }
  return result;
}

id CAFUIPunchthroughState.stateImage.getter(char a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (void *)MEMORY[0x24C59F610](0xD00000000000001ALL, 0x8000000249534CB0);
  id v2 = objc_msgSend(self, sel_systemImageNamed_, v1);

  if (!v2) {
    return 0;
  }
  id v3 = objc_msgSend(self, sel_systemFontOfSize_, 16.0);
  id v4 = objc_msgSend(self, sel_configurationWithFont_scale_, v3, 3);

  id v5 = objc_msgSend(v2, sel_imageWithConfiguration_, v4);
  return v5;
}

BOOL CAFUIPunchthroughState.enabled.getter(char a1)
{
  return a1 != 0;
}

void __swiftcall CAFUIPunchthroughState.buttonForCurrentState(title:)(UIButton_optional *__return_ptr retstr, Swift::String_optional title)
{
  char v3 = v2;
  object = title.value._object;
  int v5 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIConfigurationTextAttributesTransformer?);
  MEMORY[0x270FA5388](v6 - 8);
  char v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UIButton.Configuration();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  char v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v15 = (char *)&v23 - v14;
  if (v5)
  {
    id v16 = (void *)MEMORY[0x24C59F610](0xD00000000000001ALL, 0x8000000249534CB0);
    id v17 = objc_msgSend(self, sel_systemImageNamed_, v16);

    if (v17)
    {
      id v18 = objc_msgSend(self, sel_systemFontOfSize_, 16.0);
      id v19 = objc_msgSend(self, sel_configurationWithFont_scale_, v18, 3);
      char v24 = object;
      id v20 = v19;

      id v21 = objc_msgSend(v17, sel_imageWithConfiguration_, v20);
      object = v24;

      if (v21) {
        goto LABEL_5;
      }
    }
  }
  if (object)
  {
LABEL_5:
    static UIButton.Configuration.plain()();
    swift_bridgeObjectRetain();
    UIButton.Configuration.title.setter();
    *(unsigned char *)(swift_allocObject() + 16) = v3;
    UIConfigurationTextAttributesTransformer.init(_:)();
    uint64_t v22 = type metadata accessor for UIConfigurationTextAttributesTransformer();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 0, 1, v22);
    UIButton.Configuration.titleTextAttributesTransformer.setter();
    CAFUIPunchthroughState.stateImage.getter(v3);
    UIButton.Configuration.image.setter();
    UIButton.Configuration.imagePadding.setter();
    UIButton.Configuration.imagePlacement.setter();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIButton);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
    UIButton.init(configuration:primaryAction:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
}

uint64_t closure #1 in CAFUIPunchthroughState.buttonForCurrentState(title:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AttributeContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  objc_msgSend(self, sel_systemFontOfSize_, 16.0, KeyPath);
  lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute();
  return AttributeContainer.subscript.setter();
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.UIKitAttributes, AttributeScopes.UIKitAttributes.FontAttribute>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

BOOL static CAFUIPunchthroughState.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_2494F70FC()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t partial apply for closure #1 in CAFUIPunchthroughState.buttonForCurrentState(title:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in CAFUIPunchthroughState.buttonForCurrentState(title:)(a1, a2);
}

void CAFUIPunchthroughState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int CAFUIPunchthroughState.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

id CAFUIRequestContentManager.controller.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t CAFUIRequestContentManager.supportsTouch.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t CAFUIRequestContentManager.__allocating_init(session:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  CAFUIRequestContentManager.init(session:)(a1);
  return v2;
}

void CAFUIRequestContentManager.init(session:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(objc_allocWithZone((Class)CAFUIPunchThroughController), sel_initWithSession_, a1);
  *(void *)(v1 + 16) = v4;
  id v5 = objc_msgSend(v4, sel_session);
  id v6 = objc_msgSend(v5, sel_configuration);

  id v7 = objc_msgSend(v6, sel_screens);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CARScreenInfo);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    *(unsigned char *)(v2 + 24) = 0;
    goto LABEL_9;
  }
  if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v9 = (id)MEMORY[0x24C59FC50](0, v8);
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v9 = *(id *)(v8 + 32);
  }
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unsigned __int8 v11 = objc_msgSend(v10, sel_availableInteractionModels);

  *(unsigned char *)(v2 + 24) = (v11 & 2) != 0;
LABEL_9:
  id v13 = objc_msgSend(*(id *)(v2 + 16), sel_availablePunchThroughIdentifiers);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  CAFUIRequestContentManager.mainDisplayIdentifier.getter();
  if (*(void *)(v14 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(*(void *)(v14 + 56) + 8 * v17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = MEMORY[0x24C59F730](v19, MEMORY[0x263F8D310]);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v21, 0xD00000000000001ALL, 0x8000000249534CD0, 0x7365732874696E69, 0xEE00293A6E6F6973);
    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t CAFUIRequestContentManager.open(contentURLString:in:completion:)(char *a1, void *a2, void *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v11 - 8);
  id v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v13, &demangling cache variable for type metadata for URL?);
LABEL_11:
    aBlocuint64_t k = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    aBlocuint64_t k = 0xD000000000000019;
    unint64_t v45 = 0x8000000249534CF0;
    v31._uint64_t countAndFlagsBits = (uint64_t)a1;
    v31._object = a2;
    String.append(_:)(v31);
    uint64_t v32 = aBlock;
    unint64_t v33 = v45;
    os_log_type_t v34 = static os_log_type_t.error.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v34, v32, v33, 0xD000000000000025, 0x8000000249534D10);
    swift_bridgeObjectRelease();
    return a4(0);
  }
  v43[1] = v5;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
  URL.scheme.getter();
  if (!v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    goto LABEL_11;
  }
  v43[0] = a3;
  Swift::String v19 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v19._countAndFlagsBits == 0x7274737475706E69 && v19._object == (void *)0xEB000000006D6165)
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = a5;
LABEL_13:
    long long v36 = (char *)specialized static CAFUIRequestContentManager.inputStreamIdentifier(from:)(a1, (uint64_t)a2);
    if (v37)
    {
      CAFUIRequestContentManager.present(identifier:completion:)(v36, v37, (uint64_t)a4, v22);
      swift_bridgeObjectRelease();
    }
    else
    {
      aBlocuint64_t k = 0;
      unint64_t v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      aBlocuint64_t k = 541872725;
      unint64_t v45 = 0xE400000000000000;
      v38._uint64_t countAndFlagsBits = (uint64_t)a1;
      v38._object = a2;
      String.append(_:)(v38);
      v39._uint64_t countAndFlagsBits = 0xD000000000000026;
      v39._object = (void *)0x8000000249534D60;
      String.append(_:)(v39);
      uint64_t v40 = aBlock;
      unint64_t v41 = v45;
      os_log_type_t v42 = static os_log_type_t.error.getter();
      specialized static CAFUILogger.log(_:message:function:file:line:)(v42, v40, v41, 0xD000000000000025, 0x8000000249534D10);
      swift_bridgeObjectRelease();
      a4(0);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = a5;
  if (v21) {
    goto LABEL_13;
  }
  aBlocuint64_t k = 0;
  unint64_t v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  aBlocuint64_t k = 0xD000000000000014;
  unint64_t v45 = 0x8000000249534D40;
  lazy protocol witness table accessor for type URL and conformance URL();
  v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  uint64_t v24 = aBlock;
  unint64_t v25 = v45;
  os_log_type_t v26 = static os_log_type_t.error.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v26, v24, v25, 0xD000000000000025, 0x8000000249534D10);
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v27);
  long long v29 = v28;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  aBlocuint64_t k = MEMORY[0x263EF8330];
  unint64_t v45 = 1107296256;
  long long v46 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  char v47 = &block_descriptor_4;
  uint64_t v30 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v43[0], sel_openURL_options_completionHandler_, v29, 0, v30);
  _Block_release(v30);

  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  char v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void CAFUIRequestContentManager.present(identifier:completion:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void CAFUIRequestContentManager.dismiss(identifier:completion:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void CAFUIRequestContentManager.present(identifier:completion:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v11 = a2;
  uint64_t v12 = (uint64_t)a1;
  uint64_t v13 = specialized static CAFUIRequestContentManager.inputStreamIdentifier(from:)(a1, a2);
  if (v14)
  {
    uint64_t v12 = v13;
    uint64_t v11 = v14;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v15 = *(void **)(v6 + 16);
  uint64_t v16 = (void *)MEMORY[0x24C59F610](v12, v11);
  swift_bridgeObjectRelease();
  CAFUIRequestContentManager.mainDisplayIdentifier.getter();
  unint64_t v17 = (void *)MEMORY[0x24C59F610]();
  swift_bridgeObjectRelease();
  v19[4] = a3;
  v19[5] = a4;
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  void v19[3] = a5;
  uint64_t v18 = _Block_copy(v19);
  swift_retain();
  swift_release();
  objc_msgSend(v15, *a6, v16, v17, v18);
  _Block_release(v18);
}

CAFUI::CAFUIPunchthroughState __swiftcall CAFUIRequestContentManager.state(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v4 = specialized static CAFUIRequestContentManager.inputStreamIdentifier(from:)((char *)a1._countAndFlagsBits, (uint64_t)a1._object);
  if (!v5)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = countAndFlagsBits;
    v15._object = object;
    String.append(_:)(v15);
    os_log_type_t v16 = static os_log_type_t.info.getter();
    uint64_t v17 = 0xD000000000000024;
    unint64_t v18 = 0x8000000249534D90;
LABEL_8:
    specialized static CAFUILogger.log(_:message:function:file:line:)(v16, v17, v18, 0x6F66286574617473, 0xEB00000000293A72);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v6 = v4;
  id v7 = v5;
  unint64_t v8 = *(void **)(v1 + 16);
  id v9 = (void *)MEMORY[0x24C59F610]();
  unsigned int v10 = objc_msgSend(v8, sel_hasPunchThroughWithIdentifier_, v9);

  if (!v10)
  {
    _StringGuts.grow(_:)(52);
    v19._object = (void *)0x8000000249534DC0;
    v19._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = v6;
    v20._object = v7;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v21._object = (void *)0x8000000249534DE0;
    String.append(_:)(v21);
    CAFUIRequestContentManager.mainDisplayIdentifier.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    uint64_t v17 = 0;
    unint64_t v18 = 0xE000000000000000;
    goto LABEL_8;
  }
  CAFUIRequestContentManager.mainDisplayIdentifier.getter();
  uint64_t v11 = (void *)MEMORY[0x24C59F610]();
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)MEMORY[0x24C59F610](v6, v7);
  swift_bridgeObjectRelease();
  unsigned int v13 = objc_msgSend(v8, sel_displayIdentifier_isDisplayingPunchThroughWithIdentifier_, v11, v12);

  if (v13) {
    return 2;
  }
  else {
    return 1;
  }
}

void CAFUIRequestContentManager.mainDisplayIdentifier.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_session);
  id v2 = objc_msgSend(v1, sel_configuration);

  id v3 = objc_msgSend(v2, sel_displays);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CARDisplayInfo);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v4 >> 62))
  {
    if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
LABEL_9:
    id v5 = (id)MEMORY[0x24C59FC50](0, v4);
    goto LABEL_6;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v5 = *(id *)(v4 + 32);
LABEL_6:
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v6, sel_identifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    return;
  }
  __break(1u);
}

uint64_t CAFUIRequestContentManager.deinit()
{
  return v0;
}

uint64_t CAFUIRequestContentManager.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 25, 7);
}

uint64_t specialized static CAFUIRequestContentManager.inputStreamIdentifier(from:)(char *a1, uint64_t a2)
{
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v2 = type metadata accessor for URLQueryItem();
  uint64_t v53 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v4 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLQueryItem?);
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
  MEMORY[0x270FA5388](v8 - 8);
  unsigned int v10 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URLComponents();
  uint64_t v54 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unsigned int v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v14 - 8);
  os_log_type_t v16 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  Swift::String v20 = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
    return 0;
  }
  uint64_t v55 = v4;
  uint64_t v56 = v2;
  int v51 = v13;
  uint64_t v52 = v11;
  uint64_t v50 = v7;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
  URL.scheme.getter();
  Swift::String v21 = v20;
  if (!v22) {
    goto LABEL_10;
  }
  Swift::String v23 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v23._countAndFlagsBits == 0x7274737475706E69 && v23._object == (void *)0xEB000000006D6165)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return 0;
  }
LABEL_8:
  unint64_t v25 = v10;
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  uint64_t v26 = v54;
  uint64_t v27 = v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v10, 1, v52) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    outlined destroy of UIContentConfiguration?((uint64_t)v10, &demangling cache variable for type metadata for URLComponents?);
    return 0;
  }
  long long v29 = v51;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v51, v25, v27);
  uint64_t v30 = URLComponents.queryItems.getter();
  if (!v30)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v27);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    return 0;
  }
  uint64_t v31 = *(void *)(v30 + 16);
  char v47 = v21;
  if (v31)
  {
    uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
    unint64_t v33 = v30 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
    os_log_type_t v34 = (void (**)(char *, uint64_t))(v53 + 8);
    uint64_t v48 = *(void *)(v53 + 72);
    uint64_t v49 = v32;
    v46[1] = v30;
    swift_bridgeObjectRetain();
    long long v35 = v55;
    uint64_t v36 = v56;
    while (1)
    {
      v49(v35, v33, v36);
      if (URLQueryItem.name.getter() == 0x696669746E656469 && v37 == 0xEA00000000007265)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v38) {
        break;
      }
      long long v35 = v55;
      uint64_t v36 = v56;
      (*v34)(v55, v56);
      v33 += v48;
      if (!--v31)
      {
        swift_bridgeObjectRelease();
        uint64_t v39 = 1;
        goto LABEL_23;
      }
    }
    uint64_t v36 = v56;
LABEL_26:
    swift_bridgeObjectRelease();
    uint64_t v40 = v53;
    uint64_t v41 = (uint64_t)v50;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v55, v36);
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = 1;
    uint64_t v36 = v56;
LABEL_23:
    uint64_t v40 = v53;
    uint64_t v41 = (uint64_t)v50;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v41, v39, 1, v36);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v41, 1, v36) == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v52);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v47, v17);
    outlined destroy of UIContentConfiguration?(v41, &demangling cache variable for type metadata for URLQueryItem?);
    return 0;
  }
  uint64_t v42 = v36;
  uint64_t v43 = URLQueryItem.value.getter();
  uint64_t v45 = v44;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v52);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v47, v17);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
  if (v45) {
    return v43;
  }
  else {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type CAFUIPunchthroughState and conformance CAFUIPunchthroughState()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFUIPunchthroughState and conformance CAFUIPunchthroughState;
  if (!lazy protocol witness table cache variable for type CAFUIPunchthroughState and conformance CAFUIPunchthroughState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIPunchthroughState and conformance CAFUIPunchthroughState);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CAFUIPunchthroughState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2494F8834);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIPunchthroughState()
{
  return &type metadata for CAFUIPunchthroughState;
}

uint64_t type metadata accessor for CAFUIRequestContentManager()
{
  return self;
}

uint64_t specialized CAFUIRequestContentManager.open(contentURLString:in:completion:)(char *a1, void *a2, void *a3, uint64_t a4, int a5, void *a6, uint64_t a7, void *a8)
{
  id v54 = a3;
  uint64_t v55 = a4;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v14 - 8);
  os_log_type_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  Swift::String v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = swift_allocObject();
  int v56 = a5;
  *(unsigned char *)(v21 + 16) = a5;
  uint64_t v22 = a8;
  *(void *)(v21 + 24) = a6;
  *(void *)(v21 + 32) = a7;
  uint64_t v23 = v21;
  *(void *)(v21 + 40) = v22;
  id v24 = a6;
  unint64_t v25 = a2;
  uint64_t v26 = (uint64_t)v24;
  swift_bridgeObjectRetain();
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    uint64_t v53 = a7;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    URL.scheme.getter();
    if (!v27)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      a7 = v53;
      goto LABEL_11;
    }
    uint64_t v52 = v26;
    Swift::String v28 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v28._countAndFlagsBits == 0x7274737475706E69 && v28._object == (void *)0xEB000000006D6165)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v30 & 1) == 0)
      {
        aBlocuint64_t k = 0;
        unint64_t v58 = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        aBlocuint64_t k = 0xD000000000000014;
        unint64_t v58 = 0x8000000249534D40;
        lazy protocol witness table accessor for type URL and conformance URL();
        v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        uint64_t v32 = aBlock;
        unint64_t v33 = v58;
        os_log_type_t v34 = static os_log_type_t.error.getter();
        specialized static CAFUILogger.log(_:message:function:file:line:)(v34, v32, v33, 0xD000000000000025, 0x8000000249534D10);
        swift_bridgeObjectRelease();
        URL._bridgeToObjectiveC()(v35);
        uint64_t v37 = v36;
        uint64_t v61 = partial apply for closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:);
        uint64_t v62 = v23;
        aBlocuint64_t k = MEMORY[0x263EF8330];
        unint64_t v58 = 1107296256;
        uint64_t v59 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        unint64_t v60 = &block_descriptor_17;
        char v38 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v54, sel_openURL_options_completionHandler_, v37, 0, v38);
        _Block_release(v38);

LABEL_16:
        (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
        return swift_release();
      }
    }
    uint64_t v43 = (char *)specialized static CAFUIRequestContentManager.inputStreamIdentifier(from:)(a1, (uint64_t)v25);
    if (v44)
    {
      CAFUIRequestContentManager.present(identifier:completion:)(v43, v44, (uint64_t)partial apply for closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:), v23);
      swift_bridgeObjectRelease();
    }
    else
    {
      aBlocuint64_t k = 0;
      unint64_t v58 = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      aBlocuint64_t k = 541872725;
      unint64_t v58 = 0xE400000000000000;
      v45._uint64_t countAndFlagsBits = (uint64_t)a1;
      v45._object = v25;
      String.append(_:)(v45);
      v46._uint64_t countAndFlagsBits = 0xD000000000000026;
      v46._object = (void *)0x8000000249534D60;
      String.append(_:)(v46);
      uint64_t v47 = aBlock;
      unint64_t v48 = v58;
      os_log_type_t v49 = static os_log_type_t.error.getter();
      specialized static CAFUILogger.log(_:message:function:file:line:)(v49, v47, v48, 0xD000000000000025, 0x8000000249534D10);
      swift_bridgeObjectRelease();
      closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:)(0, v56 & 1, v52, v53, v22);
    }
    goto LABEL_16;
  }
  outlined destroy of UIContentConfiguration?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
LABEL_11:
  aBlocuint64_t k = 0;
  unint64_t v58 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  aBlocuint64_t k = 0xD000000000000019;
  unint64_t v58 = 0x8000000249534CF0;
  v39._uint64_t countAndFlagsBits = (uint64_t)a1;
  v39._object = v25;
  String.append(_:)(v39);
  uint64_t v40 = aBlock;
  unint64_t v41 = v58;
  os_log_type_t v42 = static os_log_type_t.error.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v42, v40, v41, 0xD000000000000025, 0x8000000249534D10);
  swift_bridgeObjectRelease();
  closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:)(0, v56 & 1, v26, a7, v22);
  return swift_release();
}

uint64_t sub_2494F8E14()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:)(char a1)
{
  return closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:)(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

void sub_2494F8E64()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute);
  }
  return result;
}

void sub_2494F8ED8()
{
}

uint64_t sub_2494F8F00()
{
  return 8;
}

uint64_t sub_2494F8F0C()
{
  return swift_release();
}

uint64_t sub_2494F8F14(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_2494F8F24()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_2494F8F6C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t CAFUIListItemCell.item.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  MEMORY[0x270FA5388](v2 - 8);
  unsigned int v4 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unsigned int v10 = (char *)&v71 - v9;
  uint64_t v11 = type metadata accessor for UIListContentConfiguration();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v71 - v16;
  uint64_t v18 = (uint64_t *)(v0 + OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item);
  uint64_t result = swift_beginAccess();
  uint64_t v20 = *v18;
  if (!*v18) {
    return result;
  }
  swift_retain();
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v15, (uint64_t)v17);
  uint64_t v74 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  uint64_t v75 = v12 + 8;
  uint64_t v21 = v74(v15, v11);
  (*(void (**)(uint64_t))(*(void *)v20 + 168))(v21);
  uint64_t v22 = UIListContentConfiguration.image.setter();
  (*(void (**)(uint64_t))(*(void *)v20 + 216))(v22);
  uint64_t v23 = UIListContentConfiguration.secondaryText.setter();
  char v24 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 336))(v23);
  uint64_t v76 = v8;
  if (v24)
  {
    id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81678]), sel_init);
    id v71 = v25;
    uint64_t v26 = (void *)(*(uint64_t (**)(void))(*(void *)v20 + 360))();
    objc_msgSend(v25, sel_setImage_, v26);

    id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_init);
    uint64_t v73 = v1;
    Swift::String v28 = v27;
    uint64_t v29 = (*(uint64_t (**)(void))(*(void *)v20 + 192))();
    if (v30) {
      uint64_t v31 = v29;
    }
    else {
      uint64_t v31 = 0;
    }
    if (v30) {
      unint64_t v32 = v30;
    }
    else {
      unint64_t v32 = 0xE000000000000000;
    }
    id v33 = objc_allocWithZone(MEMORY[0x263F086A0]);
    uint64_t v72 = v4;
    id v34 = v33;
    long long v35 = (void *)MEMORY[0x24C59F610](v31, v32);
    swift_bridgeObjectRelease();
    id v36 = objc_msgSend(v34, sel_initWithString_, v35);

    objc_msgSend(v28, sel_appendAttributedString_, v36);
    id v37 = objc_allocWithZone(MEMORY[0x263F086A0]);
    char v38 = (void *)MEMORY[0x24C59F610](8224, 0xE200000000000000);
    id v39 = objc_msgSend(v37, sel_initWithString_, v38);

    objc_msgSend(v28, sel_appendAttributedString_, v39);
    uint64_t v40 = self;
    unint64_t v41 = v71;
    id v42 = objc_msgSend(v40, sel_attributedStringWithAttachment_, v71);
    unsigned int v4 = v72;
    objc_msgSend(v28, sel_appendAttributedString_, v42);

    uint64_t v1 = v73;
    UIListContentConfiguration.attributedText.setter();
  }
  else
  {
    (*(void (**)(void))(*(void *)v20 + 192))();
    uint64_t v43 = UIListContentConfiguration.text.setter();
  }
  uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 240))(v43);
  if (!v45) {
    goto LABEL_17;
  }
  uint64_t v46 = v44;
  uint64_t v47 = v45;
  uint64_t v48 = HIBYTE(v45) & 0xF;
  if ((v45 & 0x2000000000000000) == 0) {
    uint64_t v48 = v44 & 0xFFFFFFFFFFFFLL;
  }
  if (!v48)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    id v50 = 0;
    goto LABEL_18;
  }
  id v49 = objc_allocWithZone((Class)type metadata accessor for CAFUIBadgeView());
  id v50 = CAFUIBadgeView.init(text:)(v46, v47);
  objc_msgSend(v50, sel_sizeToFit);
  objc_msgSend(v50, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v50, sel_intrinsicContentSize);
  double v52 = v51;
  double v54 = v53;
  uint64_t v72 = (char *)self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_249530110;
  id v56 = objc_msgSend(v50, sel_widthAnchor);
  id v57 = objc_msgSend(v56, sel_constraintEqualToConstant_, v52);
  uint64_t v73 = v12;
  uint64_t v58 = v11;
  uint64_t v59 = v4;
  id v60 = v57;

  *(void *)(v55 + 32) = v60;
  id v61 = objc_msgSend(v50, sel_heightAnchor);
  id v62 = objc_msgSend(v61, sel_constraintEqualToConstant_, v54);

  *(void *)(v55 + 40) = v62;
  unsigned int v4 = v59;
  uint64_t v11 = v58;
  uint64_t v12 = v73;
  uint64_t v77 = v55;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v72, sel_activateConstraints_, isa);

LABEL_18:
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v4, v17, v11);
  uint64_t v64 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v4, 0, 1, v11);
  char v65 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 264))(v64) & 1;
  outlined init with take of UIListContentConfiguration?((uint64_t)v4, (uint64_t)v10);
  unint64_t v66 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  *(void *)&v10[v66[5]] = v50;
  v10[v66[6]] = v65;
  v10[v66[7]] = 0;
  uint64_t v67 = *((void *)v66 - 1);
  (*(void (**)(char *, void, uint64_t, int *))(v67 + 56))(v10, 0, 1, v66);
  uint64_t v68 = v1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  id v69 = v50;
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?((uint64_t)v10, v68);
  swift_endAccess();
  uint64_t v70 = (uint64_t)v76;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v68, (uint64_t)v76);
  LODWORD(v68) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v67 + 48))(v70, 1, v66);
  outlined destroy of CAFUIAutomakerSettingConfiguration?(v70);
  if (v68 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v10);

  swift_release();
  return v74(v17, v11);
}

uint64_t CAFUIListItemCell.item.getter()
{
  return swift_retain();
}

uint64_t CAFUIListItemCell.item.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_retain();
  swift_release();
  CAFUIListItemCell.item.didset();
  return swift_release();
}

uint64_t (*CAFUIListItemCell.item.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CAFUIListItemCell.item.modify;
}

uint64_t CAFUIListItemCell.item.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return CAFUIListItemCell.item.didset();
  }
  return result;
}

uint64_t CAFUIListItemCell.isCellEnabled.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item;
  swift_beginAccess();
  if (*(void *)v1)
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)v1 + 288);
    uint64_t v3 = swift_retain();
    char v4 = v2(v3);
    swift_release();
  }
  else
  {
    char v4 = 1;
  }
  return v4 & 1;
}

void CAFUIListItemCell.__allocating_init(coder:)()
{
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CAFUIListItemCell.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CAFUIListItemCell.prepareForReuse()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  char v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v12 - v5;
  uint64_t v7 = (objc_class *)type metadata accessor for CAFUIListItemCell();
  v13.receiver = v0;
  v13.super_class = v7;
  objc_msgSendSuper2(&v13, sel_prepareForReuse);
  uint64_t v8 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v6, 1, 1, v8);
  uint64_t v10 = (uint64_t)&v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?((uint64_t)v6, v10);
  swift_endAccess();
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v10, (uint64_t)v4);
  LODWORD(v8) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8);
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v4);
  if (v8 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v6);
  uint64_t v11 = &v0[OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item];
  swift_beginAccess();
  *(void *)uint64_t v11 = 0;
  swift_release();
  CAFUIListItemCell.item.didset();
}

uint64_t type metadata accessor for CAFUIListItemCell()
{
  uint64_t result = type metadata singleton initialization cache for CAFUIListItemCell;
  if (!type metadata singleton initialization cache for CAFUIListItemCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CAFUIListItemCell.__ivar_destroyer()
{
  return swift_release();
}

id CAFUIListItemCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIListItemCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for CAFUIListItemCell()
{
  return type metadata accessor for CAFUIListItemCell();
}

uint64_t type metadata completion function for CAFUIListItemCell()
{
  return swift_updateClassMetadata2();
}

id CAFUICollectionViewController.__allocating_init(setting:isRHD:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  uint64_t ObjectType = swift_getObjectType();

  return specialized CAFUICollectionViewController.init(setting:isRHD:)(a1, a3, v7, ObjectType, a2);
}

__n128 one-time initialization function for checkImageInsets()
{
  static CAFUIImageCollectionViewCell.CellSettings.checkImageInsets = 0;
  *(void *)algn_2696BF2B8 = 0;
  __asm { FMOV            V0.2D, #-6.0 }
  xmmword_2696BF2C0 = (__int128)result;
  return result;
}

double one-time initialization function for decoratorInsets()
{
  double result = -8.0;
  static CAFUIImageCollectionViewCell.CellSettings.decoratorInsets = xmmword_249531B80;
  unk_2696BF2E0 = xmmword_249531B90;
  return result;
}

__n128 one-time initialization function for checkImageSize()
{
  __asm { FMOV            V0.2D, #21.0 }
  static CAFUIImageCollectionViewCell.CellSettings.checkImageSize = (__int128)result;
  return result;
}

char *CAFUIImageCollectionViewCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_checkImageView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView] = 0;
  v4[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_enabled] = 1;
  id v9 = objc_allocWithZone(MEMORY[0x263F828E0]);
  uint64_t v10 = v4;
  id v11 = objc_msgSend(v9, sel_init);
  *(void *)&v10[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_label] = v11;
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v10[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView] = v12;
  id v13 = objc_msgSend(v12, sel_layer);
  objc_msgSend(v13, sel_setBorderWidth_, 1.0);

  v71.receiver = v10;
  v71.super_class = (Class)type metadata accessor for CAFUIImageCollectionViewCell();
  uint64_t v14 = (char *)objc_msgSendSuper2(&v71, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v15 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView;
  uint64_t v16 = *(void **)&v14[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView];
  uint64_t v17 = v14;
  id v18 = v16;
  closure #1 in CAFUIImageCollectionViewCell.init(frame:)(v18);

  uint64_t v19 = *(void **)&v14[v15];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_2495305E0;
  uint64_t v21 = type metadata accessor for UITraitUserInterfaceStyle();
  uint64_t v22 = MEMORY[0x263F81EF0];
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v22;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView);
  id v23 = v19;
  UIView.registerForTraitChanges<A>(_:handler:)();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(v17, sel_contentView);
  id v25 = objc_msgSend(self, sel_clearColor);
  objc_msgSend(v24, sel_setBackgroundColor_, v25);

  uint64_t v26 = *(void **)&v14[v15];
  objc_msgSend(v26, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v26, sel_setContentMode_, 2);
  id v27 = objc_msgSend(v26, sel_layer);
  objc_msgSend(v27, sel_setMasksToBounds_, 1);

  objc_msgSend(*(id *)&v14[v15], sel__setContinuousCornerRadius_, 6.0);
  Swift::String v28 = *(void **)&v17[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_label];
  uint64_t v29 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_label;
  uint64_t v69 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_label;
  objc_msgSend(v28, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v28, sel_setTextAlignment_, 1);
  objc_msgSend(v28, sel_setNumberOfLines_, 1);
  unint64_t v30 = self;
  uint64_t v31 = *MEMORY[0x263F835B8];
  id v32 = v28;
  id v33 = objc_msgSend(v30, sel_preferredFontDescriptorWithTextStyle_, v31);
  id v34 = objc_msgSend(self, sel_fontWithDescriptor_size_, v33, 0.0);

  objc_msgSend(v32, sel_setFont_, v34);
  id v35 = objc_msgSend(v17, (SEL)&selRef_multipleSelectSettingService_didUpdateName_);
  objc_msgSend(v35, sel_addSubview_, *(void *)&v14[v15]);

  id v36 = objc_msgSend(v17, (SEL)&selRef_multipleSelectSettingService_didUpdateName_);
  objc_msgSend(v36, sel_addSubview_, *(void *)&v17[v29]);

  id v70 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_249531BA0;
  id v38 = objc_msgSend(*(id *)&v14[v15], sel_leadingAnchor);
  id v39 = objc_msgSend(v17, (SEL)&selRef_multipleSelectSettingService_didUpdateName_);
  id v40 = objc_msgSend(v39, (SEL)&off_26525C238 + 2);

  id v41 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v40);
  *(void *)(v37 + 32) = v41;
  id v42 = objc_msgSend(*(id *)&v14[v15], sel_trailingAnchor);
  id v43 = objc_msgSend(v17, (SEL)&selRef_multipleSelectSettingService_didUpdateName_);
  id v44 = objc_msgSend(v43, (SEL)&selRef_drawRect_ + 4);

  id v45 = objc_msgSend(v42, sel_constraintEqualToAnchor_, v44);
  *(void *)(v37 + 40) = v45;
  id v46 = objc_msgSend(*(id *)&v14[v15], sel_topAnchor);
  id v47 = objc_msgSend(v17, (SEL)&selRef_multipleSelectSettingService_didUpdateName_);
  id v48 = objc_msgSend(v47, sel_topAnchor);

  id v49 = objc_msgSend(v46, sel_constraintEqualToAnchor_, v48);
  *(void *)(v37 + 48) = v49;
  id v50 = objc_msgSend(*(id *)&v14[v15], sel_bottomAnchor);
  id v51 = objc_msgSend(*(id *)&v17[v69], sel_topAnchor);
  id v52 = objc_msgSend(v50, sel_constraintEqualToAnchor_, v51);

  *(void *)(v37 + 56) = v52;
  id v53 = objc_msgSend(*(id *)&v17[v69], sel_heightAnchor);
  id v54 = objc_msgSend(v53, sel_constraintEqualToConstant_, 24.0);

  *(void *)(v37 + 64) = v54;
  id v55 = objc_msgSend(*(id *)&v17[v69], sel_leadingAnchor);
  id v56 = objc_msgSend(v17, sel_contentView);
  id v57 = objc_msgSend(v56, sel_leadingAnchor);

  id v58 = objc_msgSend(v55, sel_constraintEqualToAnchor_, v57);
  *(void *)(v37 + 72) = v58;
  id v59 = objc_msgSend(*(id *)&v17[v69], sel_trailingAnchor);
  id v60 = objc_msgSend(v17, sel_contentView);
  id v61 = objc_msgSend(v60, sel_trailingAnchor);

  id v62 = objc_msgSend(v59, sel_constraintEqualToAnchor_, v61);
  *(void *)(v37 + 80) = v62;
  id v63 = objc_msgSend(*(id *)&v17[v69], sel_bottomAnchor);
  id v64 = objc_msgSend(v17, sel_contentView);
  id v65 = objc_msgSend(v64, sel_bottomAnchor);

  id v66 = objc_msgSend(v63, sel_constraintEqualToAnchor_, v65);
  *(void *)(v37 + 88) = v66;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v70, sel_activateConstraints_, isa);

  return v17;
}

void closure #1 in CAFUIImageCollectionViewCell.init(frame:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_traitCollection);
  id v3 = objc_msgSend(v2, sel_userInterfaceStyle);

  id v4 = objc_msgSend(a1, sel_layer);
  uint64_t v5 = self;
  if (v3 == (id)1)
  {
    id v6 = objc_msgSend(v5, sel_systemBlackColor);
    id v7 = objc_msgSend(v6, sel_colorWithAlphaComponent_, 0.15);
  }
  else
  {
    id v6 = objc_msgSend(v5, sel_systemWhiteColor);
    id v7 = objc_msgSend(v6, sel_colorWithAlphaComponent_, 0.2);
  }
  id v8 = v7;

  id v9 = objc_msgSend(v8, sel_CGColor);
  objc_msgSend(v4, sel_setBorderColor_, v9);
}

void CAFUIImageCollectionViewCell.checked.setter(char a1)
{
  id v2 = v1;
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_249530110;
    id v4 = self;
    *(void *)(v3 + 32) = objc_msgSend(v4, sel_systemBlackColor);
    *(void *)(v3 + 40) = objc_msgSend(v4, sel_systemCyanColor);
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIColor);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(self, sel_configurationWithPaletteColors_, isa);

    id v34 = v6;
    id v7 = (void *)MEMORY[0x24C59F610](0xD000000000000015, 0x8000000249533130);
    id v8 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v7, v34);

    if (!v8
      || (id v9 = objc_msgSend(v8, sel_imageWithRenderingMode_, 2),
          v8,
          !v9))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    uint64_t v10 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_checkImageView;
    id v11 = *(void **)&v2[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_checkImageView];
    if (v11)
    {
      id v12 = v11;
      id v9 = v9;
      objc_msgSend(v12, sel_setImage_, v9);
    }
    else
    {
      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v9);
      id v16 = objc_msgSend(v4, sel__carSystemFocusColor);
      objc_msgSend(v15, sel_setTintColor_, v16);

      objc_msgSend(v15, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      id v17 = objc_msgSend(v2, sel_contentView);
      objc_msgSend(v17, sel_addSubview_, v15);

      id v18 = *(void **)&v2[v10];
      *(void *)&v2[v10] = v15;
      id v19 = v15;

      uint64_t v20 = self;
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_2495300E0;
      id v22 = objc_msgSend(v19, sel_bottomAnchor);
      id v23 = *(void **)&v2[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView];
      id v24 = objc_msgSend(v23, sel_bottomAnchor);
      if (one-time initialization token for checkImageInsets != -1) {
        swift_once();
      }
      id v25 = objc_msgSend(v22, sel_constraintEqualToAnchor_constant_, v24, *(double *)&xmmword_2696BF2C0);

      *(void *)(v21 + 32) = v25;
      id v26 = objc_msgSend(v19, sel_trailingAnchor);
      id v27 = objc_msgSend(v23, sel_trailingAnchor);
      id v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v27, *((double *)&xmmword_2696BF2C0 + 1));

      *(void *)(v21 + 40) = v28;
      id v29 = objc_msgSend(v19, sel_widthAnchor);
      if (one-time initialization token for checkImageSize != -1) {
        swift_once();
      }
      id v30 = objc_msgSend(v29, sel_constraintEqualToConstant_, *(double *)&static CAFUIImageCollectionViewCell.CellSettings.checkImageSize);

      *(void *)(v21 + 48) = v30;
      id v31 = objc_msgSend(v19, sel_heightAnchor);
      id v32 = objc_msgSend(v31, sel_constraintEqualToConstant_, *((double *)&static CAFUIImageCollectionViewCell.CellSettings.checkImageSize + 1));

      *(void *)(v21 + 56) = v32;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
      Class v33 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v20, sel_activateConstraints_, v33);
    }
    uint64_t v14 = v34;
  }
  else
  {
    uint64_t v13 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_checkImageView;
    uint64_t v14 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_checkImageView];
    if (v14)
    {
      objc_msgSend(v14, sel_removeFromSuperview);
      uint64_t v14 = *(void **)&v1[v13];
    }
    *(void *)&v1[v13] = 0;
  }
}

void CAFUIImageCollectionViewCell.showsFocusRing.setter(char a1)
{
  if (a1)
  {
    id v2 = objc_msgSend(objc_allocWithZone((Class)CAFUIFocusRingView), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v2, sel_setCornerRadius_, 8.0);
    objc_msgSend(v2, sel_setRingWidth_, 3.0);
    objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v3 = objc_msgSend(v1, sel_contentView);
    objc_msgSend(v3, sel_addSubview_, v2);

    id v4 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView];
    *(void *)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView] = v2;
    id v5 = v2;

    id v6 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_2495300E0;
    id v8 = objc_msgSend(v5, sel_bottomAnchor);
    id v9 = objc_msgSend(v1, sel_contentView);
    id v10 = objc_msgSend(v9, sel_bottomAnchor);

    id v11 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v10);
    *(void *)(v7 + 32) = v11;
    id v12 = objc_msgSend(v5, sel_topAnchor);
    id v13 = objc_msgSend(v1, sel_contentView);
    id v14 = objc_msgSend(v13, sel_topAnchor);

    id v15 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v14);
    *(void *)(v7 + 40) = v15;
    id v16 = objc_msgSend(v5, sel_leadingAnchor);
    id v17 = objc_msgSend(v1, sel_contentView);
    id v18 = objc_msgSend(v17, sel_leadingAnchor);

    id v19 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v18);
    *(void *)(v7 + 48) = v19;
    id v20 = objc_msgSend(v5, sel_trailingAnchor);
    id v21 = objc_msgSend(v1, sel_contentView);
    id v22 = objc_msgSend(v21, sel_trailingAnchor);

    id v23 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v22);
    *(void *)(v7 + 56) = v23;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_activateConstraints_, isa);

    Class v24 = isa;
  }
  else
  {
    uint64_t v25 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView;
    Class v24 = *(Class *)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView];
    if (v24)
    {
      [(objc_class *)v24 removeFromSuperview];
      Class v24 = *(Class *)&v1[v25];
    }
    *(void *)&v1[v25] = 0;
  }
}

void CAFUIImageCollectionViewCell.decoratorImage.setter(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, a1);
    objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v3 = objc_msgSend(v2, sel_layer);
    objc_msgSend(v3, sel_setBorderWidth_, 3.0);

    id v4 = objc_msgSend(v2, sel_layer);
    objc_msgSend(v4, sel_setCornerRadius_, 12.0);

    id v5 = objc_msgSend(v1, sel_contentView);
    objc_msgSend(v5, sel_addSubview_, v2);

    id v6 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView];
    *(void *)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView] = v2;
    id v7 = v2;

    id v8 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_2495300E0;
    id v10 = objc_msgSend(v7, sel_topAnchor);
    id v11 = objc_msgSend(v1, sel_contentView);
    id v12 = objc_msgSend(v11, sel_topAnchor);

    if (one-time initialization token for decoratorInsets != -1) {
      swift_once();
    }
    id v13 = objc_msgSend(v10, sel_constraintEqualToAnchor_constant_, v12, *(double *)&static CAFUIImageCollectionViewCell.CellSettings.decoratorInsets, a1);

    *(void *)(v9 + 32) = v13;
    id v14 = objc_msgSend(v7, sel_trailingAnchor);
    id v15 = objc_msgSend(v1, sel_contentView);
    id v16 = objc_msgSend(v15, sel_trailingAnchor);

    id v17 = objc_msgSend(v14, sel_constraintEqualToAnchor_constant_, v16, *(double *)&qword_2696BF2E8);
    *(void *)(v9 + 40) = v17;
    id v18 = objc_msgSend(v7, sel_heightAnchor);
    id v19 = objc_msgSend(v18, sel_constraintEqualToConstant_, 24.0);

    *(void *)(v9 + 48) = v19;
    id v20 = objc_msgSend(v7, sel_widthAnchor);
    id v21 = objc_msgSend(v7, sel_heightAnchor);
    id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

    *(void *)(v9 + 56) = v22;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_activateConstraints_, isa);

    Class v24 = v27;
  }
  else
  {
    uint64_t v25 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView;
    Class v24 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView];
    if (v24)
    {
      objc_msgSend(v24, sel_removeFromSuperview);
      Class v24 = *(void **)&v1[v25];
    }
    *(void *)&v1[v25] = 0;
  }
}

id CAFUIImageCollectionViewCell.configure(with:selected:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  id v6 = *(void **)(v2 + OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  id v42 = v6;
  objc_msgSend(v6, sel_setImage_, v9);

  id v10 = *(void **)(v3 + OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_label);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  id v14 = (void *)MEMORY[0x24C59F610](v13);
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setText_, v14);

  CAFUIImageCollectionViewCell.checked.setter(a2);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  char v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
  uint64_t v18 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_enabled;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_enabled) = v17 & 1;
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
  CAFUIImageCollectionViewCell.decoratorImage.setter(v21);
  uint64_t v22 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView;
  id v23 = *(void **)(v3 + OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView);
  if (v23)
  {
    id v24 = objc_msgSend(v23, sel_layer);
    uint64_t v25 = a1[3];
    uint64_t v26 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v25);
    id v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 48))(v25, v26);
    if (v27)
    {
      id v28 = v27;
      id v29 = objc_msgSend(v27, sel_CGColor);
    }
    else
    {
      id v29 = 0;
    }
    objc_msgSend(v24, sel_setBorderColor_, v29);

    id v30 = *(void **)(v3 + v22);
    if (v30)
    {
      uint64_t v31 = a1[3];
      uint64_t v32 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v31);
      Class v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 48);
      id v34 = v30;
      id v35 = (void *)v33(v31, v32);
      objc_msgSend(v34, sel_setTintColor_, v35);
    }
  }
  int v36 = *(unsigned __int8 *)(v3 + v18);
  uint64_t v37 = self;
  id v38 = &selRef_labelColor;
  if (!v36) {
    id v38 = &selRef_secondaryLabelColor;
  }
  id v39 = [v37 *v38];
  objc_msgSend(v10, sel_setTextColor_, v39);

  double v40 = 0.5;
  if (*(unsigned char *)(v3 + v18)) {
    double v40 = 1.0;
  }

  return objc_msgSend(v42, sel_setAlpha_, v40);
}

Swift::Void __swiftcall CAFUIImageCollectionViewCell.didUpdateFocus(in:with:)(UIFocusUpdateContext in, UIFocusAnimationCoordinator with)
{
  uint64_t v3 = v2;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for CAFUIImageCollectionViewCell();
  objc_msgSendSuper2(&v11, sel_didUpdateFocusInContext_withAnimationCoordinator_, in.super.isa, with.super.isa);
  id v6 = [(objc_class *)in.super.isa nextFocusedView];
  if (v6)
  {
    uint64_t v7 = v6;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    char v8 = static NSObject.== infix(_:_:)();
    CAFUIImageCollectionViewCell.showsFocusRing.setter(v8 & 1);
  }
  else
  {
    uint64_t v9 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView;
    id v10 = *(void **)&v3[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView];
    if (v10)
    {
      objc_msgSend(v10, sel_removeFromSuperview);
      uint64_t v7 = *(void **)&v3[v9];
    }
    else
    {
      uint64_t v7 = 0;
    }
    *(void *)&v3[v9] = 0;
  }
}

id CAFUIImageCollectionViewCell.isHighlighted.setter(char a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for CAFUIImageCollectionViewCell();
  objc_msgSendSuper2(&v5, sel_setHighlighted_, a1 & 1);
  if ((objc_msgSend(v1, sel_isHighlighted) & 1) != 0
    || (double v3 = 1.0, (v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_enabled] & 1) == 0))
  {
    double v3 = 0.5;
  }
  return objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView], sel_setAlpha_, v3);
}

id CAFUIImageCollectionViewCell.__deallocating_deinit()
{
  return CAFUIImageCollectionViewCell.__deallocating_deinit(type metadata accessor for CAFUIImageCollectionViewCell);
}

uint64_t CAFUICollectionViewController.setting.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CAFUICollectionViewController.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUICollectionViewController.items.setter(uint64_t a1)
{
  double v3 = (void *)(v1 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items);
  swift_beginAccess();
  *double v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*CAFUICollectionViewController.items.modify())()
{
  return CAFUICollectionViewController.items.modify;
}

uint64_t CAFUICollectionViewController.cellIdentifier.getter()
{
  type metadata accessor for CAFUIImageCollectionViewCell();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v1 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id CAFUICollectionViewController.init(setting:isRHD:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized CAFUICollectionViewController.init(setting:isRHD:)(a1, a3, v3, ObjectType, a2);
}

id CAFUICollectionViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CAFUICollectionViewController.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  v1[16] = 1;
  uint64_t v2 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  v2[16] = 1;
  id v3 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing];
  *(void *)id v3 = 0;
  v3[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CAFUICollectionViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  v55.receiver = v0;
  v55.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  objc_msgSendSuper2(&v55, sel_viewDidLoad);
  id v2 = objc_msgSend(v0, sel_collectionView);
  if (!v2)
  {
    __break(1u);
    goto LABEL_18;
  }
  id v3 = v2;
  id v4 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v6 = (*(uint64_t (**)(void))((*v4 & *v0) + 0xB8))();
  uint64_t v7 = (void *)MEMORY[0x24C59F610](v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_registerClass_forCellWithReuseIdentifier_, ObjCClassFromMetadata, v7);

  id v8 = objc_msgSend(v0, sel_collectionView);
  if (!v8)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v8;
  objc_msgSend(v8, sel_setDataSource_, v1);

  id v10 = objc_msgSend(v1, sel_collectionView);
  if (!v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_super v11 = v10;
  objc_msgSend(v10, sel_setDelegate_, v1);

  id v12 = objc_msgSend(v1, sel_collectionView);
  if (!v12)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v13 = v12;
  objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id v14 = objc_msgSend(v1, sel_collectionView);
  if (!v14)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v15 = v14;
  id v16 = objc_msgSend(self, sel_tableBackgroundColor);
  if (!v16)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  char v17 = v16;
  objc_msgSend(v15, sel_setBackgroundColor_, v16);

  id v18 = objc_msgSend(v1, sel_collectionView);
  if (!v18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v19 = v18;
  objc_msgSend(v18, sel_setContentInset_, 2.0, 0.0, 6.0, 0.0);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_2495300E0;
  id v21 = objc_msgSend(v1, sel_collectionView);
  if (!v21)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v22 = v21;
  id v23 = objc_msgSend(v21, sel_topAnchor);

  id v24 = objc_msgSend(v1, sel_view);
  if (!v24)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v25 = v24;
  id v26 = objc_msgSend(v24, sel_safeAreaLayoutGuide);

  id v27 = objc_msgSend(v26, sel_topAnchor);
  id v28 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v27);

  *(void *)(v20 + 32) = v28;
  id v29 = objc_msgSend(v1, sel_collectionView);
  if (!v29)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  id v30 = v29;
  id v31 = objc_msgSend(v29, sel_leadingAnchor);

  id v32 = objc_msgSend(v1, sel_view);
  if (!v32)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  Class v33 = v32;
  id v34 = objc_msgSend(v32, sel_safeAreaLayoutGuide);

  id v35 = objc_msgSend(v34, sel_leadingAnchor);
  id v36 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v35);

  *(void *)(v20 + 40) = v36;
  id v37 = objc_msgSend(v1, sel_collectionView);
  if (!v37)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  id v38 = v37;
  id v39 = objc_msgSend(v37, sel_trailingAnchor);

  id v40 = objc_msgSend(v1, sel_view);
  if (!v40)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  id v41 = v40;
  id v42 = objc_msgSend(v40, sel_safeAreaLayoutGuide);

  id v43 = objc_msgSend(v42, sel_trailingAnchor);
  id v44 = objc_msgSend(v39, sel_constraintEqualToAnchor_, v43);

  *(void *)(v20 + 48) = v44;
  id v45 = objc_msgSend(v1, sel_collectionView);
  if (!v45)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  id v46 = v45;
  id v47 = objc_msgSend(v45, sel_bottomAnchor);

  id v48 = objc_msgSend(v1, sel_view);
  if (v48)
  {
    id v49 = v48;
    id v50 = self;
    id v51 = objc_msgSend(v49, sel_safeAreaLayoutGuide);

    id v52 = objc_msgSend(v51, sel_bottomAnchor);
    id v53 = objc_msgSend(v47, sel_constraintEqualToAnchor_, v52);

    *(void *)(v20 + 56) = v53;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v50, sel_activateConstraints_, isa);

    (*(void (**)(void, void))((*MEMORY[0x263F8EED0] & *v1) + 0xD8))(0, 0);
    return;
  }
LABEL_31:
  __break(1u);
}

Swift::Void __swiftcall CAFUICollectionViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  objc_msgSendSuper2(&v4, sel_viewWillDisappear_, a1);
  id v3 = objc_msgSend(v1, sel_navigationItem);
  objc_msgSend(v3, sel_setRightBarButtonItem_, 0);
}

Swift::Void __swiftcall CAFUICollectionViewController.toggle(index:)(Swift::Int index)
{
  id v2 = v1;
  uint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(Swift::Int, uint64_t, uint64_t))(v4 + 72))(index, ObjectType, v4);
  id v7 = objc_msgSend(v2, sel_collectionView);
  if (!v7)
  {
    __break(1u);
    goto LABEL_11;
  }
  id v8 = v7;
  id v9 = objc_msgSend(v7, sel_indexPathsForVisibleItems);

  type metadata accessor for IndexPath();
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = specialized _ArrayProtocol.filter(_:)(v10, v6);
  swift_bridgeObjectRelease();
  if (*(void *)(v11 + 16))
  {
    id v12 = objc_msgSend(v2, sel_collectionView);
    if (v12)
    {
      uint64_t v13 = v12;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v13, sel_reconfigureItemsAtIndexPaths_, isa);

      return;
    }
LABEL_11:
    __break(1u);
    return;
  }

  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CAFUICollectionViewController.updateEmptyView(title:)(Swift::String_optional title)
{
  object = title.value._object;
  uint64_t countAndFlagsBits = title.value._countAndFlagsBits;
  id v4 = objc_msgSend(v1, sel_collectionView);
  if (!v4)
  {
    __break(1u);
    goto LABEL_15;
  }
  objc_super v5 = v4;
  objc_msgSend(v4, sel_reloadData);

  uint64_t v6 = &v1[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
  swift_beginAccess();
  uint64_t v7 = *(void *)(*(void *)v6 + 16);
  uint64_t v8 = OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView;
  id v9 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView];
  if ((v7 == 0) != (v9 == 0)) {
    return;
  }
  if (!v7)
  {
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
    objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    if (object)
    {
      id v12 = object;
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x24C59F610](0x534D4554495F4F4ELL, 0xE800000000000000);
      id v14 = CAFUILocalizedStringForKey(v13);

      uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v12 = v15;
    }
    swift_bridgeObjectRetain();
    id v16 = (void *)MEMORY[0x24C59F610](countAndFlagsBits, v12);
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setText_, v16);

    id v17 = objc_msgSend(self, sel_secondaryLabelColor);
    objc_msgSend(v11, sel_setTextColor_, v17);

    id v18 = objc_msgSend(self, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F83580]);
    id v19 = objc_msgSend(self, sel_fontWithDescriptor_size_, v18, 0.0);

    objc_msgSend(v11, sel_setFont_, v19);
    objc_msgSend(v11, sel_setTextAlignment_, 1);
    id v20 = objc_msgSend(v1, sel_collectionView);
    if (v20)
    {
      id v21 = v20;
      objc_msgSend(v20, sel_addSubview_, v11);

      uint64_t v22 = *(void **)&v1[v8];
      *(void *)&v1[v8] = v11;
      id v23 = v11;

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_249530110;
      id v25 = objc_msgSend(v23, sel_centerXAnchor);
      id v26 = objc_msgSend(v1, sel_view);
      if (v26)
      {
        id v27 = v26;
        id v28 = objc_msgSend(v26, sel_safeAreaLayoutGuide);

        id v29 = objc_msgSend(v28, sel_centerXAnchor);
        id v30 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v29);

        *(void *)(v24 + 32) = v30;
        id v31 = objc_msgSend(v23, sel_centerYAnchor);
        id v32 = objc_msgSend(v1, sel_view);
        if (v32)
        {
          Class v33 = v32;
          id v34 = self;
          id v35 = objc_msgSend(v33, sel_safeAreaLayoutGuide);

          id v36 = objc_msgSend(v35, sel_centerYAnchor);
          id v37 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v36);

          *(void *)(v24 + 40) = v37;
          uint64_t v38 = v24;
          specialized Array._endMutation()();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v34, sel_activateConstraints_, isa, v38);

          goto LABEL_12;
        }
LABEL_17:
        __break(1u);
        return;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v9, sel_removeFromSuperview);
  Class isa = *(Class *)&v1[v8];
  *(void *)&v1[v8] = 0;
LABEL_12:
}

Swift::Int __swiftcall CAFUICollectionViewController.numberOfSections(in:)(UICollectionView *in)
{
  return 1;
}

Swift::Int __swiftcall CAFUICollectionViewController.collectionView(_:numberOfItemsInSection:)(UICollectionView *_, Swift::Int numberOfItemsInSection)
{
  uint64_t v3 = v2 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items;
  swift_beginAccess();
  return *(void *)(*(void *)v3 + 16);
}

uint64_t CAFUICollectionViewController.collectionView(_:cellForItemAt:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for CAFUIImageCollectionViewCell();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  objc_super v5 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  id v9 = (void *)MEMORY[0x24C59F610](v6, v8);
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  unint64_t v11 = (unint64_t)objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v9, isa);

  uint64_t v12 = swift_dynamicCastClass();
  if (v12)
  {
    uint64_t v13 = v12;
    unint64_t v11 = IndexPath.row.getter();
    uint64_t v14 = v2 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items;
    swift_beginAccess();
    if ((v11 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v11 < *(void *)(*(void *)v14 + 16))
    {
      outlined init with copy of CAFUIImageRepresentableItemProtocol(*(void *)v14 + 40 * v11 + 32, (uint64_t)v21);
      uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 48))(ObjectType, v15);
      uint64_t v18 = IndexPath.row.getter();
      char v19 = specialized Sequence<>.contains(_:)(v18, v17);
      swift_bridgeObjectRelease();
      CAFUIImageCollectionViewCell.configure(with:selected:)(v21, v19 & 1);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
      return v13;
    }
    __break(1u);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CAFUICollectionViewController.collectionView(_:canEditItemAt:)()
{
  return 0;
}

uint64_t @objc CAFUICollectionViewController.collectionView(_:canEditItemAt:)()
{
  uint64_t v0 = type metadata accessor for IndexPath();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return 0;
}

uint64_t CAFUICollectionViewController.collectionView(_:shouldSelectItemAt:)()
{
  unint64_t v1 = IndexPath.row.getter();
  uint64_t v2 = v0 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items;
  uint64_t result = swift_beginAccess();
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v1 < *(void *)(*(void *)v2 + 16))
  {
    outlined init with copy of CAFUIImageRepresentableItemProtocol(*(void *)v2 + 40 * v1 + 32, (uint64_t)v6);
    uint64_t v4 = v7;
    uint64_t v5 = v8;
    __swift_project_boxed_opaque_existential_1(v6, v7);
    LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
    return v4 & 1;
  }
  __break(1u);
  return result;
}

void CAFUICollectionViewController.collectionView(_:didSelectItemAt:)()
{
}

UIEdgeInsets __swiftcall CAFUICollectionViewController.collectionView(_:layout:insetForSectionAt:)(UICollectionView *_, UICollectionViewLayout *layout, Swift::Int insetForSectionAt)
{
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing + 8))
  {
    double v4 = 45.0;
  }
  else
  {
    double v5 = *(double *)(v3 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing);
    double v4 = 45.0;
    if (v5 > 45.0) {
      double v4 = trunc(v5);
    }
  }
  double v6 = 0.0;
  double v7 = 0.0;
  double v8 = v4;
  result.right = v8;
  result.bottom = v7;
  result.left = v4;
  result.top = v6;
  return result;
}

void CAFUICollectionViewController.collectionView(_:layout:sizeForItemAt:)()
{
  specialized CAFUICollectionViewController.calculateItemSizeAndInterItemSpacing(layout:)();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize + 16)) {
    __break(1u);
  }
}

void CAFUICollectionViewController.collectionView(_:layout:minimumInteritemSpacingForSectionAt:)()
{
  specialized CAFUICollectionViewController.calculateItemSizeAndInterItemSpacing(layout:)();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing + 8)) {
    __break(1u);
  }
}

id CAFUICollectionViewController.__allocating_init(collectionViewLayout:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCollectionViewLayout_, a1);

  return v3;
}

void CAFUICollectionViewController.init(collectionViewLayout:)()
{
}

id CAFUICollectionViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  double v4 = v3;
  if (a2)
  {
    double v6 = (void *)MEMORY[0x24C59F610]();
    swift_bridgeObjectRelease();
  }
  else
  {
    double v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CAFUICollectionViewController.init(nibName:bundle:)()
{
}

id CAFUICollectionViewController.__deallocating_deinit()
{
  return CAFUIImageCollectionViewCell.__deallocating_deinit(type metadata accessor for CAFUICollectionViewController);
}

id CAFUIImageCollectionViewCell.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id specialized CAFUICollectionViewController.init(setting:isRHD:)(uint64_t a1, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  *(void *)&a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView] = 0;
  double v8 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize];
  *(void *)double v8 = 0;
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  id v9 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
  *(void *)id v9 = 0;
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  uint64_t v10 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing];
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  unint64_t v11 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting];
  *(void *)unint64_t v11 = a1;
  *((void *)v11 + 1) = a5;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 40);
  uint64_t v13 = a3;
  swift_unknownObjectRetain();
  *(void *)&v13[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items] = v12(a4, a5);
  v13[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_isRHD] = a2;

  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82570]), sel_init);
  objc_msgSend(v14, sel_setMinimumLineSpacing_, 8.0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249530890;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  uint64_t v16 = MEMORY[0x263F8E8F8];
  *(void *)(inited + 96) = MEMORY[0x263F8E8F8];
  *(_DWORD *)(inited + 72) = 0;
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v17;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = v16;
  *(_DWORD *)(inited + 144) = 0;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel__setRowAlignmentsOptions_, isa);

  v26.receiver = v13;
  v26.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  id v19 = objc_msgSendSuper2(&v26, sel_initWithCollectionViewLayout_, v14);
  uint64_t v20 = *(void *)(a5 + 8);
  id v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
  id v22 = v19;
  uint64_t v23 = v21(a4, v20);
  uint64_t v24 = (void *)MEMORY[0x24C59F610](v23);
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setTitle_, v24);

  swift_unknownObjectRelease();
  return v22;
}

uint64_t type metadata accessor for CAFUIImageCollectionViewCell()
{
  return self;
}

uint64_t type metadata accessor for CAFUICollectionViewController()
{
  return self;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  id v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v9 = (char *)v29 - v8;
  uint64_t v10 = type metadata accessor for IndexPath();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  id v30 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v29 - v15;
  uint64_t result = MEMORY[0x270FA5388](v14);
  id v45 = (char *)v29 - v18;
  uint64_t v46 = MEMORY[0x263F8EE78];
  uint64_t v34 = *(void *)(a1 + 16);
  if (v34)
  {
    v29[1] = v2;
    unint64_t v19 = 0;
    uint64_t v39 = v11 + 48;
    uint64_t v40 = v11 + 16;
    id v42 = (void (**)(char *, char *, uint64_t))(v11 + 32);
    uint64_t v20 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v44 = v11 + 56;
    v29[0] = (v11 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    id v32 = v9;
    uint64_t v33 = a1;
    uint64_t v31 = v11;
    while (v19 < *(void *)(a1 + 16))
    {
      unint64_t v35 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      unint64_t v36 = v19;
      uint64_t v38 = *(void *)(v11 + 72);
      id v21 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
      v21(v9, a1 + v35 + v38 * v19, v10);
      id v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v43(v9, 0, 1, v10);
      id v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      if (v22(v9, 1, v10) == 1) {
        goto LABEL_23;
      }
      id v41 = *v42;
      v41(v45, v9, v10);
      uint64_t v23 = *(void *)(v37 + 16);
      if (v23)
      {
        unint64_t v24 = v37 + v35;
        swift_bridgeObjectRetain();
        while (1)
        {
          v21(v7, v24, v10);
          v43(v7, 0, 1, v10);
          if (v22(v7, 1, v10) == 1) {
            break;
          }
          v41(v16, v7, v10);
          lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v20)(v16, v10);
          if (v25)
          {
            swift_bridgeObjectRelease();
            v41(v30, v45, v10);
            uint64_t v26 = v46;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1);
              uint64_t v26 = v46;
            }
            unint64_t v28 = *(void *)(v26 + 16);
            unint64_t v27 = *(void *)(v26 + 24);
            if (v28 >= v27 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
              uint64_t v26 = v46;
            }
            *(void *)(v26 + 16) = v28 + 1;
            uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v41)(v26 + v35 + v28 * v38, v30, v10);
            uint64_t v46 = v26;
            goto LABEL_6;
          }
          v24 += v38;
          if (!--v23) {
            goto LABEL_4;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain();
LABEL_4:
        v43(v7, 1, 1, v10);
      }
      swift_bridgeObjectRelease();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))*v20)(v45, v10);
LABEL_6:
      unint64_t v19 = v36 + 1;
      a1 = v33;
      uint64_t v11 = v31;
      id v9 = v32;
      if (v36 + 1 == v34)
      {
        v43(v32, 1, 1, v10);
        goto LABEL_23;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_23:
    swift_bridgeObjectRelease();
    outlined destroy of IndexPath?((uint64_t)v9);
    return v46;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (**v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t (**v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  unint64_t v36 = a2;
  objc_super v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v37 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  id v7 = MEMORY[0x270FA5388](v5);
  unint64_t v35 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v7);
  uint64_t v38 = MEMORY[0x263F8EE78];
  uint64_t v34 = *(void *)(a1 + 16);
  if (v34)
  {
    id v29 = v6;
    id v30 = (char *)&v23 - v10;
    uint64_t v11 = 0;
    uint64_t v31 = v6 + 48;
    unint64_t v28 = v6 + 32;
    unint64_t v24 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
    char v25 = v5;
    id v32 = v6 + 56;
    uint64_t v33 = v6 + 16;
    uint64_t v23 = (v6 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v26 = a1;
    uint64_t v12 = (uint64_t)v37;
    uint64_t v13 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    while (v11 < *(void *)(a1 + 16))
    {
      uint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v15 = *(void *)(v6 + 72);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v12, a1 + v14 + v15 * v11, v5);
      unint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v27(v12, 0, 1, v5);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1) {
        goto LABEL_15;
      }
      uint64_t v16 = *v13;
      uint64_t v17 = v5;
      uint64_t v18 = v30;
      (*v13)(v30, v12, v17);
      if (CAFUITileDataSource.validate(indexPath:)())
      {
        v16(v35, (uint64_t)v18, v17);
        unint64_t v19 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
          unint64_t v19 = v38;
        }
        uint64_t v6 = v29;
        id v21 = *(void *)(v19 + 16);
        uint64_t v20 = *(void *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          unint64_t v19 = v38;
        }
        *(void *)(v19 + 16) = v21 + 1;
        id v22 = v19 + v14 + v21 * v15;
        uint64_t v5 = v25;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v16)(v22, v35, v25);
        uint64_t v38 = v19;
        a1 = v26;
      }
      else
      {
        uint64_t result = (*v24)(v18, v17);
        uint64_t v5 = v17;
        uint64_t v6 = v29;
      }
      ++v11;
      uint64_t v12 = (uint64_t)v37;
      if (v34 == v11)
      {
        v27((uint64_t)v37, 1, 1, v5);
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v12 = (uint64_t)v37;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v37, 1, 1, v5);
LABEL_15:
    swift_bridgeObjectRelease();
    outlined destroy of UIContentConfiguration?(v12, &demangling cache variable for type metadata for IndexPath?);
    return v38;
  }
  return result;
}

void specialized CAFUICollectionViewController.collectionView(_:didSelectItemAt:)()
{
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  type metadata accessor for IndexPath();
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v1, 0xD000000000000017, 0x8000000249535150, 0xD000000000000022, 0x8000000249535170);
  swift_bridgeObjectRelease();
  Swift::Int v2 = IndexPath.row.getter();

  CAFUICollectionViewController.toggle(index:)(v2);
}

void specialized CAFUICollectionViewController.calculateItemSizeAndInterItemSpacing(layout:)()
{
  os_log_type_t v1 = (double *)&v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize];
  if (v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize + 16]) {
    goto LABEL_8;
  }
  double v2 = *(double *)&v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
  double v3 = *(double *)&v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize + 8];
  char v4 = v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize + 16];
  id v5 = objc_msgSend(v0, sel_collectionView);
  if (!v5)
  {
LABEL_60:
    __break(1u);
    return;
  }
  uint64_t v6 = v5;
  objc_msgSend(v5, sel_bounds);
  double v8 = v7;
  double v10 = v9;

  if ((v4 & 1) != 0 || (v2 == v8 ? (BOOL v11 = v3 == v10) : (BOOL v11 = 0), !v11))
  {
LABEL_8:
    id v12 = objc_msgSend(v0, sel_collectionView);
    if (!v12)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v13 = v12;
    objc_msgSend(v12, sel_bounds);
    uint64_t v15 = v14;
    uint64_t v17 = v16;

    uint64_t v18 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
    *(void *)uint64_t v18 = v15;
    *((void *)v18 + 1) = v17;
    v18[16] = 0;
    id v19 = objc_msgSend(v0, sel_collectionView);
    if (!v19)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v20 = v19;
    objc_msgSend(v19, sel_bounds);
    CGFloat v22 = v21;
    CGFloat v24 = v23;
    CGFloat v26 = v25;
    CGFloat v28 = v27;

    v95.origin.CGFloat x = v22;
    v95.origin.CGFloat y = v24;
    v95.size.double width = v26;
    v95.size.double height = v28;
    double Width = CGRectGetWidth(v95);
    id v30 = objc_msgSend(v0, sel_collectionView);
    if (!v30)
    {
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    uint64_t v31 = v30;
    objc_msgSend(v30, sel_bounds);
    CGFloat v33 = v32;
    CGFloat v35 = v34;
    CGFloat v37 = v36;
    CGFloat v39 = v38;

    v96.origin.CGFloat x = v33;
    v96.origin.CGFloat y = v35;
    v96.size.double width = v37;
    v96.size.double height = v39;
    double Height = CGRectGetHeight(v96);
    id v41 = objc_msgSend(v0, sel_navigationController);
    if (v41)
    {
      id v42 = v41;
      id v43 = objc_msgSend(v41, sel_navigationBar);

      objc_msgSend(v43, sel_frame);
      CGFloat v45 = v44;
      CGFloat v47 = v46;
      CGFloat v49 = v48;
      CGFloat v51 = v50;

      v97.origin.CGFloat x = v45;
      v97.origin.CGFloat y = v47;
      v97.size.double width = v49;
      v97.size.double height = v51;
      double v52 = CGRectGetHeight(v97);
    }
    else
    {
      double v52 = 0.0;
    }
    id v53 = objc_msgSend(v0, sel_collectionView);
    if (!v53) {
      goto LABEL_58;
    }
    id v54 = v53;
    objc_msgSend(v53, sel_bounds);
    CGFloat v56 = v55;
    CGFloat v58 = v57;
    CGFloat v60 = v59;
    CGFloat v62 = v61;

    v98.origin.CGFloat x = v56;
    v98.origin.CGFloat y = v58;
    v98.size.double width = v60;
    v98.size.double height = v62;
    double v63 = CGRectGetWidth(v98);
    id v64 = objc_msgSend(v0, sel_collectionView);
    if (!v64)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    id v65 = v64;
    double v66 = Width + -90.0;
    double v67 = Height + -8.0 + -48.0 + -8.0;
    objc_msgSend(v64, sel_bounds);
    CGFloat v69 = v68;
    CGFloat v71 = v70;
    CGFloat v73 = v72;
    CGFloat v75 = v74;

    v99.origin.CGFloat x = v69;
    v99.origin.CGFloat y = v71;
    v99.size.double width = v73;
    v99.size.double height = v75;
    double v76 = v63 / (v52 + CGRectGetHeight(v99));
    double v77 = v67 * 0.5 * v76;
    if (v77 >= v66)
    {
      double *v1 = v66;
      v1[1] = v66 / v76 + 24.0;
      *((unsigned char *)v1 + 16) = 0;
      goto LABEL_48;
    }
    double *v1 = v77;
    v1[1] = v67 * 0.5 + 24.0;
    *((unsigned char *)v1 + 16) = 0;
    double v78 = v66 / v77;
    if ((~COERCE__INT64(v66 / v77) & 0x7FF0000000000000) != 0)
    {
      if (v78 > -9.22337204e18)
      {
        if (v78 < 9.22337204e18)
        {
          uint64_t v79 = (uint64_t)v78;
          uint64_t v80 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
          swift_beginAccess();
          unint64_t v81 = *(void *)(*(void *)v80 + 16);
          if ((uint64_t)v81 >= v79) {
            unint64_t v82 = v79;
          }
          else {
            unint64_t v82 = *(void *)(*(void *)v80 + 16);
          }
          if ((uint64_t)v82 >= 2)
          {
            double v83 = v66 - v77 * (double)(uint64_t)v82;
            double v84 = (double)(uint64_t)(v82 - 1);
            double v85 = v83 / v84;
            if (v83 / v84 >= 10.0)
            {
LABEL_27:
              unint64_t v86 = v81 / v82;
              unint64_t v87 = v81 % v82;
              if (v81 % v82) {
                ++v86;
              }
              if (v82 >= 3 && v86 >= 2)
              {
                int64_t v88 = v87 ? v82 + ~v87 : 0;
                int64_t v89 = v86 - 1;
                if (v88 >= v89)
                {
                  do
                  {
                    unint64_t v90 = v82--;
                    if (v81 % v82) {
                      BOOL v91 = v90 >= 4;
                    }
                    else {
                      BOOL v91 = 0;
                    }
                  }
                  while (v91 && (uint64_t)(v82 + ~(v81 % v82)) >= v89);
                  double v83 = v66 - v77 * (double)(uint64_t)v82;
                  double v85 = v83 / (double)(uint64_t)(v90 - 2);
                }
              }
              double v93 = (v83 + 45.0 + 45.0) / (double)(uint64_t)(v82 + 1);
              if (v93 <= 45.0) {
                double v93 = v85;
              }
              char v94 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing];
              *(double *)&v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing] = v93;
              goto LABEL_49;
            }
            if (v82 - 1 >= 2)
            {
              double v83 = v66 - v77 * v84;
              double v85 = v83 / (double)(uint64_t)(v82 - 2);
              --v82;
              goto LABEL_27;
            }
            char v94 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing];
            *(void *)&v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing] = 0x4024000000000000;
LABEL_49:
            v94[8] = 0;
            return;
          }
LABEL_48:
          char v94 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing];
          *(void *)&v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing] = 0;
          goto LABEL_49;
        }
        goto LABEL_54;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
}

uint64_t outlined destroy of IndexPath?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type IndexPath and conformance IndexPath(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexPath();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *CAUAssetLibrary.asset(for:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of CAUAssetLibrary.path(for:)();
  if (!v2)
  {
    uint64_t v8 = Data.init(contentsOf:options:)();
    unint64_t v30 = v9;
    uint64_t v27 = v8;
    switch(v9 >> 62)
    {
      case 1uLL:
        uint64_t v13 = (int)v8;
        uint64_t v14 = v8 >> 32;
        goto LABEL_8;
      case 2uLL:
        uint64_t v13 = *(void *)(v8 + 16);
        uint64_t v14 = *(void *)(v8 + 24);
LABEL_8:
        if (v13 == v14) {
          goto LABEL_9;
        }
        goto LABEL_4;
      case 3uLL:
        goto LABEL_9;
      default:
        if ((v9 & 0xFF000000000000) != 0)
        {
LABEL_4:
          Swift::String v10 = URL.path(percentEncoded:)(0);
          id v11 = objc_allocWithZone(MEMORY[0x263F827E8]);
          id v12 = (void *)MEMORY[0x24C59F610](v10._countAndFlagsBits, v10._object);
          swift_bridgeObjectRelease();
          os_log_type_t v1 = objc_msgSend(v11, sel_initWithContentsOfFile_, v12);

          if (v1)
          {
            outlined consume of Data._Representation(v27, v30);
            (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
            return v1;
          }
          uint64_t v28 = 0;
          unint64_t v29 = 0xE000000000000000;
          _StringGuts.grow(_:)(36);
          v19._uint64_t countAndFlagsBits = 0xD000000000000017;
          v19._object = (void *)0x8000000249535240;
          String.append(_:)(v19);
          uint64_t v16 = type metadata accessor for CAUResource();
          _print_unlocked<A, B>(_:_:)();
          v20._uint64_t countAndFlagsBits = 0x6874617020746120;
          v20._object = (void *)0xE900000000000020;
          String.append(_:)(v20);
          lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
          v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v21);
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_9:
          uint64_t v28 = 0;
          unint64_t v29 = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          v15._uint64_t countAndFlagsBits = 0xD000000000000012;
          v15._object = (void *)0x8000000249535260;
          String.append(_:)(v15);
          uint64_t v16 = type metadata accessor for CAUResource();
          _print_unlocked<A, B>(_:_:)();
          v17._uint64_t countAndFlagsBits = 0x6874617020746120;
          v17._object = (void *)0xE900000000000020;
          String.append(_:)(v17);
          lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
          v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v18);
          swift_bridgeObjectRelease();
        }
        static CAULogger.error(_:function:file:line:)();
        swift_bridgeObjectRelease();
        os_log_type_t v1 = (void *)type metadata accessor for CAUError();
        lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type CAUError and conformance CAUError, MEMORY[0x263F30D68]);
        swift_allocError();
        uint64_t v23 = v22;
        uint64_t v24 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CAUResource, Error?))
                     + 48);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v23, a1, v16);
        *(void *)(v23 + v24) = 0;
        (*(void (**)(uint64_t, void, void *))(*(v1 - 1) + 104))(v23, *MEMORY[0x263F30D60], v1);
        swift_willThrow();
        outlined consume of Data._Representation(v27, v30);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        break;
    }
  }
  return v1;
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CAFEqualizer.title.getter()
{
  switch(objc_msgSend(v0, sel_type))
  {
    case 0u:
      os_log_type_t v1 = (void *)MEMORY[0x24C59F610](0xD000000000000019, 0x8000000249535280);
      id v2 = CAFUILocalizedStringForKey(v1);
      goto LABEL_5;
    case 1u:
      os_log_type_t v1 = (void *)MEMORY[0x24C59F610](0xD000000000000016, 0x80000002495352A0);
      id v2 = CAFUILocalizedStringForKey(v1);
      goto LABEL_5;
    case 2u:
      os_log_type_t v1 = (void *)MEMORY[0x24C59F610](0xD000000000000017, 0x80000002495352C0);
      id v2 = CAFUILocalizedStringForKey(v1);
LABEL_5:
      id v3 = v2;

      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      return v4;
    case 3u:
      id v5 = objc_msgSend(v0, sel_userVisibleLabel);
      if (!v5) {
        return 0;
      }
      uint64_t v6 = v5;
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      uint64_t v9 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0) {
        uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
      }
      if (!v9)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      return v4;
    default:
      return 0;
  }
}

id CAFEqualizerObservable.valueRange.getter()
{
  return CAFEqualizerObservable.valueRange.getter(MEMORY[0x263F2BDE8], (SEL *)&selRef_valueRange);
}

void CAFEqualizer.centerValue.getter()
{
  id v1 = objc_msgSend(v0, sel_valueRange);
  int v2 = objc_msgSend(v1, sel_maximumValue);

  double v3 = (double)v2;
  id v4 = objc_msgSend(v0, sel_valueRange);
  int v5 = objc_msgSend(v4, sel_minimumValue);

  id v6 = objc_msgSend(v0, sel_valueRange);
  int v7 = objc_msgSend(v6, sel_stepValue);

  double v8 = (v3 + (double)v5) * 0.5 - fmod((v3 + (double)v5) * 0.5, (double)v7);
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v8 <= -129.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v8 >= 128.0) {
LABEL_7:
  }
    __break(1u);
}

id CAFVolumeObservable.volumeRange.getter()
{
  return CAFEqualizerObservable.valueRange.getter(MEMORY[0x263F2BDD8], (SEL *)&selRef_volumeRange);
}

id CAFEqualizerObservable.valueRange.getter(uint64_t (*a1)(void), SEL *a2)
{
  double v3 = (void *)a1();
  id v4 = [v3 *a2];

  return v4;
}

uint64_t static CAFUICellProtocol.reuseIdentifier.getter()
{
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v1 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t CAFUIAutomakerSettingsSection.header.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CAFUIAutomakerSettingsSection.footer.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void *CAFUIAutomakerSettingsSection.parentSetting.getter()
{
  uint64_t v1 = *(void **)(v0 + 32);
  id v2 = v1;
  return v1;
}

uint64_t CAFUIAutomakerSettingsSection.settings.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t one-time initialization function for cellsByIdentifiers()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Swift.AnyObject.Type)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249531C50;
  uint64_t v1 = type metadata accessor for CAFUIAutomakerSettingCell(0);
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  double v3 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *(void *)(inited + 32) = v4;
  *(void *)(inited + 40) = v6;
  *(void *)(inited + 48) = v1;
  uint64_t v7 = type metadata accessor for CAFUIProminentSettingCell();
  double v8 = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v9 = NSStringFromClass(v8);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  *(void *)(inited + 56) = v10;
  *(void *)(inited + 64) = v12;
  *(void *)(inited + 72) = v7;
  uint64_t v13 = type metadata accessor for CAFUIListItemCell();
  uint64_t v14 = (objc_class *)swift_getObjCClassFromMetadata();
  Swift::String v15 = NSStringFromClass(v14);
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  *(void *)(inited + 80) = v16;
  *(void *)(inited + 88) = v18;
  *(void *)(inited + 96) = v13;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static CAFUICollectionViewCells.cellsByIdentifiers = result;
  return result;
}

uint64_t CAFUITileDataSource.numSections.getter()
{
  uint64_t v1 = CAFUITileDataSource.firstSettingsSection.getter();
  uint64_t v2 = *(void *)(*(void *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) + 16);
  BOOL v3 = __OFADD__(v1, v2);
  uint64_t result = v1 + v2;
  if (v3) {
    __break(1u);
  }
  return result;
}

uint64_t CAFUITileDataSource.prominentCategories.getter()
{
  return swift_bridgeObjectRetain();
}

void CAFUITileDataSource.listItems.didset(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for IndexSet();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v7)
  {
    if (a1 >> 62)
    {
      id v18 = v7;
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v19) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v9 = v7;
      if (!v8) {
        goto LABEL_14;
      }
    }
    uint64_t v10 = (unint64_t *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
    swift_beginAccess();
    if (*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v20)
      {
LABEL_6:
        unint64_t v11 = *v10;
        if (v11 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v21)
          {
LABEL_8:
            unint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
            if (!(v12 >> 62))
            {
              uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_10:
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
              uint64_t v14 = swift_allocObject();
              *(_OWORD *)(v14 + 16) = xmmword_2495305E0;
              *(void *)(v14 + 32) = v13 != 0;
              uint64_t v22 = v14;
              _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
              lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int]);
              dispatch thunk of SetAlgebra.init<A>(_:)();
              IndexSet._bridgeToObjectiveC()(v15);
              uint64_t v17 = v16;
              (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
              objc_msgSend(v7, sel_reloadSections_, v17);

LABEL_15:
              return;
            }
LABEL_19:
            swift_bridgeObjectRetain();
            uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            goto LABEL_10;
          }
        }
        else if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_19;
      }
    }
    else if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
LABEL_14:
    CAFUITileDataSource.reloadView()();
    goto LABEL_15;
  }
}

uint64_t CAFUITileDataSource.listItems.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUITileDataSource.listItems.setter(unint64_t a1)
{
  uint64_t v3 = (unint64_t *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  unint64_t v4 = *v3;
  *uint64_t v3 = a1;
  CAFUITileDataSource.listItems.didset(v4);
  return swift_bridgeObjectRelease();
}

void (*CAFUITileDataSource.listItems.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = (void *)(v1 + v4);
  swift_beginAccess();
  v3[3] = *v5;
  swift_bridgeObjectRetain();
  return CAFUITileDataSource.listItems.modify;
}

void CAFUITileDataSource.listItems.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v3 = *(void *)(*(void *)a1 + 40);
  unint64_t v5 = *(void *)(v4 + v3);
  *(void *)(v4 + v3) = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    swift_bridgeObjectRetain();
    CAFUITileDataSource.listItems.didset(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    CAFUITileDataSource.listItems.didset(v5);
  }
  swift_bridgeObjectRelease();

  free(v2);
}

uint64_t CAFUITileDataSource.prominentSettings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUITileDataSource.viewSettingSet.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUITileDataSource.settingsSections.getter()
{
  return swift_bridgeObjectRetain();
}

void CAFUITileDataSource.collectionView.didset()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v1)
  {
    uint64_t v2 = one-time initialization token for cellsByIdentifiers;
    id v3 = v1;
    uint64_t v4 = v3;
    if (v2 != -1) {
      id v3 = (id)swift_once();
    }
    MEMORY[0x270FA5388](v3);
    uint64_t v5 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v5, partial apply for closure #1 in CAFUITileDataSource.collectionView.didset);
    swift_bridgeObjectRelease();
    type metadata accessor for CAFUICollectionHeaderView();
    uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
    id v7 = (id)*MEMORY[0x263F833F0];
    uint64_t v8 = NSStringFromClass(ObjCClassFromMetadata);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    unint64_t v12 = (void *)MEMORY[0x24C59F610](v9, v11);
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_registerClass_forSupplementaryViewOfKind_withReuseIdentifier_, ObjCClassFromMetadata, v7, v12);

    type metadata accessor for CAFUICollectionFooterView();
    uint64_t v13 = (objc_class *)swift_getObjCClassFromMetadata();
    id v14 = (id)*MEMORY[0x263F833E8];
    Swift::String v15 = NSStringFromClass(v13);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    uint64_t v19 = (void *)MEMORY[0x24C59F610](v16, v18);
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_registerClass_forSupplementaryViewOfKind_withReuseIdentifier_, v13, v14, v19);

    objc_msgSend(v4, sel_setDataSource_, v0);
  }
}

void closure #1 in CAFUITileDataSource.collectionView.didset(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v8 = (id)MEMORY[0x24C59F610](a1, a2);
  objc_msgSend(a4, sel_registerClass_forCellWithReuseIdentifier_, ObjCClassFromMetadata, v8);
}

uint64_t CAFUITileDataSource.__allocating_init(prominentCategories:listItems:settingsSections:settingsCache:)(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  return CAFUITileDataSource.init(prominentCategories:listItems:settingsSections:settingsCache:)(a1, a2, a3, a4);
}

uint64_t CAFUITileDataSource.init(prominentCategories:listItems:settingsSections:settingsCache:)(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView) = 0;
  int64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v84 = MEMORY[0x263F8EE78];
    id v9 = v4;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    uint64_t v10 = v84;
    uint64_t v11 = (uint64_t *)(a3 + 72);
    do
    {
      uint64_t v12 = *v11;
      uint64_t v84 = v10;
      unint64_t v13 = *(void *)(v10 + 16);
      unint64_t v14 = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      if (v13 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v13 + 1, 1);
        uint64_t v10 = v84;
      }
      *(void *)(v10 + 16) = v13 + 1;
      *(void *)(v10 + 8 * v13 + 32) = v12;
      v11 += 6;
      --v7;
    }
    while (v7);
    uint64_t v4 = v77;
    unint64_t v15 = (unint64_t)a2;
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  else
  {
    unint64_t v15 = (unint64_t)a2;
    uint64_t v16 = v4;
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  specialized Set.init<A>(_:)(v10);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentCategories) = a1;
  uint64_t v17 = (char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache;
  long long v18 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)a4;
  *((_OWORD *)v17 + 1) = v18;
  *((_OWORD *)v17 + 2) = *(_OWORD *)(a4 + 32);
  *((void *)v17 + 6) = *(void *)(a4 + 48);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems) = v15;
  unint64_t v19 = (unint64_t)&demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections) = a3;
  uint64_t v21 = v20;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) = v8;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings) = v8;
  id v22 = objc_allocWithZone((Class)type metadata accessor for CAFUIProminentAncestorObserver());
  swift_bridgeObjectRetain();
  outlined retain of CAFUISettingsCache(a4);
  swift_bridgeObjectRetain();
  id v23 = objc_msgSend(v22, sel_init);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentAncestorObserver) = (uint64_t)v23;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_viewSettingSet) = v21;
  unint64_t v24 = *(void *)(a4 + 16);
  if (v24 >> 62) {
    goto LABEL_33;
  }
  uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v25)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of CAFUISettingsCache(a4);
    double v34 = &selRef_setOpacity_;
    goto LABEL_37;
  }
  uint64_t v84 = v8;
  swift_bridgeObjectRetain();
  do
  {
    uint64_t v73 = v21;
    unint64_t v75 = v24;
    unint64_t v19 = 0;
    unint64_t v26 = v24 & 0xC000000000000001;
    uint64_t v21 = v24 & 0xFFFFFFFFFFFFFF8;
    uint64_t v8 = v24 + 32;
    unint64_t v15 = (unint64_t)&selRef_setOpacity_;
    while (1)
    {
      if (v26)
      {
        id v27 = (id)MEMORY[0x24C59FC50](v19, v75);
      }
      else
      {
        if (v19 >= *(void *)(v21 + 16)) {
          goto LABEL_31;
        }
        id v27 = *(id *)(v8 + 8 * v19);
      }
      uint64_t v28 = v27;
      if (__OFADD__(v19++, 1)) {
        goto LABEL_32;
      }
      unsigned int v30 = objc_msgSend(v27, sel_category);
      uint64_t v31 = *(void *)(a1 + 16);
      if (v31)
      {
        if (*(unsigned __int8 *)(a1 + 32) == v30)
        {
LABEL_20:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v24 = *(void *)(v84 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t v4 = &v84;
          specialized ContiguousArray._endMutation()();
          goto LABEL_13;
        }
        if (v31 != 1) {
          break;
        }
      }
LABEL_12:

LABEL_13:
      if (v19 == v25)
      {
        unint64_t v24 = v84;
        unint64_t v19 = 0x2696BD000;
        uint64_t v4 = v77;
        unint64_t v15 = (unint64_t)a2;
        uint64_t v21 = v73;
        goto LABEL_29;
      }
    }
    uint64_t v32 = 33;
    while (1)
    {
      uint64_t v33 = v32 - 31;
      if (__OFADD__(v32 - 32, 1)) {
        break;
      }
      if (*(unsigned __int8 *)(a1 + v32) == v30) {
        goto LABEL_20;
      }
      ++v32;
      if (v33 == v31) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v35) {
      goto LABEL_36;
    }
    uint64_t v84 = v8;
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  }
  while (v25);
  unint64_t v24 = v8;
LABEL_29:
  double v34 = &selRef_setOpacity_;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of CAFUISettingsCache(a4);
LABEL_37:
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentSettings) = v24;

  v83.receiver = v4;
  v83.super_class = (Class)type metadata accessor for CAFUITileDataSource();
  id v36 = objc_msgSendSuper2(&v83, v34[143]);
  unint64_t v37 = swift_bridgeObjectRetain();
  unint64_t v38 = specialized Set.union<A>(_:)(v37, v21);
  swift_bridgeObjectRelease();
  CGFloat v39 = (char *)v36;
  specialized Sequence.forEach(_:)(v38, (uint64_t)v39, (SEL *)&selRef_registerObserver_);
  swift_bridgeObjectRelease();

  uint64_t v40 = MEMORY[0x263F8EE78];
  uint64_t v84 = MEMORY[0x263F8EE78];
  if (!(v15 >> 62))
  {
    uint64_t v41 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v41) {
      goto LABEL_39;
    }
LABEL_56:
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v41 = result;
  if (!result) {
    goto LABEL_56;
  }
LABEL_39:
  if (v41 < 1)
  {
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    return result;
  }
  if ((v15 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v41; ++i)
    {
      MEMORY[0x24C59FC50](i, v15);
      type metadata accessor for CAFUIServiceListItem();
      if (swift_dynamicCastClass())
      {
        MEMORY[0x24C59F700]();
        if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    goto LABEL_56;
  }
  type metadata accessor for CAFUIServiceListItem();
  for (uint64_t j = 0; j != v41; ++j)
  {
    if (swift_dynamicCastClass())
    {
      uint64_t v45 = swift_retain();
      MEMORY[0x24C59F700](v45);
      if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v40 = MEMORY[0x263F8EE78];
LABEL_57:
  unint64_t v46 = v84;
  swift_bridgeObjectRelease();
  uint64_t v84 = v40;
  if (v46 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v47 = result;
    if (!result) {
      goto LABEL_69;
    }
LABEL_59:
    if (v47 >= 1)
    {
      for (uint64_t k = 0; k != v47; ++k)
      {
        if ((v46 & 0xC000000000000001) != 0)
        {
          uint64_t v49 = MEMORY[0x24C59FC50](k, v46);
        }
        else
        {
          uint64_t v49 = *(void *)(v46 + 8 * k + 32);
          swift_retain();
        }
        id v50 = *(id *)(v49 + 112);
        uint64_t v51 = swift_release();
        MEMORY[0x24C59F700](v51);
        if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      swift_bridgeObjectRelease();
      unint64_t v52 = v84;
      goto LABEL_70;
    }
    goto LABEL_96;
  }
  uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v47) {
    goto LABEL_59;
  }
LABEL_69:
  swift_bridgeObjectRelease();
  unint64_t v52 = MEMORY[0x263F8EE78];
LABEL_70:
  swift_bridgeObjectRelease();
  if (v52 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v53 = result;
    if (!result) {
      goto LABEL_79;
    }
LABEL_72:
    if (v53 >= 1)
    {
      for (uint64_t m = 0; m != v53; ++m)
      {
        if ((v52 & 0xC000000000000001) != 0) {
          id v55 = (id)MEMORY[0x24C59FC50](m, v52);
        }
        else {
          id v55 = *(id *)(v52 + 8 * m + 32);
        }
        CGFloat v56 = v55;
        objc_msgSend(v55, sel_registerObserver_, v39);
      }
      goto LABEL_79;
    }
    goto LABEL_97;
  }
  uint64_t v53 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v53) {
    goto LABEL_72;
  }
LABEL_79:
  swift_bridgeObjectRelease_n();
  *(void *)(*(void *)&v39[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentAncestorObserver]
            + OBJC_IVAR____TtC5CAFUIP33_0E4D121C5C9C3A69D68EDC06FF2740D730CAFUIProminentAncestorObserver_delegate
            + 8) = &protocol witness table for CAFUITileDataSource;
  swift_unknownObjectWeakAssign();
  CAFUITileDataSource.refreshProminentSection(reloadSection:)(0);
  uint64_t v74 = *(void *)&v39[*(void *)(v19 + 728)];
  uint64_t v57 = *(void *)(v74 + 16);
  if (v57)
  {
    swift_bridgeObjectRetain_n();
    CGFloat v58 = (unint64_t *)(v74 + 72);
    double v59 = (void *)MEMORY[0x263F8EE78];
    double v76 = v39;
    while (1)
    {
      uint64_t v60 = *(v58 - 4);
      uint64_t v61 = *(v58 - 2);
      uint64_t v78 = *(v58 - 3);
      uint64_t v80 = *(v58 - 5);
      CGFloat v62 = (void *)*(v58 - 1);
      unint64_t v63 = *v58;
      id v82 = v62;
      swift_bridgeObjectRetain_n();
      id v64 = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v65 = specialized _ArrayProtocol.filter(_:)(v63, (uint64_t)v64);
      swift_bridgeObjectRelease();

      if (v65 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v72)
        {
LABEL_85:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v66 = v82;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            double v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
          }
          double v67 = v59;
          unint64_t v68 = v59[2];
          CGFloat v69 = v67;
          unint64_t v70 = v67[3];
          if (v68 >= v70 >> 1) {
            CGFloat v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v70 > 1), v68 + 1, 1, v69);
          }
          v69[2] = v68 + 1;
          CGFloat v71 = &v69[6 * v68];
          double v59 = v69;
          v71[4] = v80;
          v71[5] = v60;
          v71[6] = v78;
          v71[7] = v61;
          v71[8] = v62;
          v71[9] = v65;
          goto LABEL_82;
        }
      }
      else if (*(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_85;
      }
      swift_bridgeObjectRelease();
LABEL_82:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v58 += 6;
      --v57;
      CGFloat v39 = v76;
      if (!v57)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_94;
      }
    }
  }
  double v59 = (void *)MEMORY[0x263F8EE78];
LABEL_94:
  *(void *)&v39[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections] = v59;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  CAFUITileDataSource.reloadView()();

  swift_bridgeObjectRelease();
  return (uint64_t)v39;
}

void specialized Set.init<A>(_:)(uint64_t a1)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
  lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject();
  unint64_t v2 = 0;
  v9[1] = (id)Set.init(minimumCapacity:)();
LABEL_12:
  while (1)
  {
    unint64_t v6 = *(void *)(a1 + 16);
    if (v2 == v6) {
      break;
    }
    if (v2 >= v6) {
      goto LABEL_19;
    }
    unint64_t v7 = *(void *)(a1 + 32 + 8 * v2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v8 = v7;
    ++v2;
    if (v7)
    {
      unint64_t v3 = 0;
      if (v7 >> 62) {
        goto LABEL_9;
      }
      while (v3 != *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        while (1)
        {
          if ((v8 & 0xC000000000000001) != 0)
          {
            id v4 = (id)MEMORY[0x24C59FC50](v3, v8);
          }
          else
          {
            if (v3 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_18:
              __break(1u);
LABEL_19:
              __break(1u);
              return;
            }
            id v4 = *(id *)(v8 + 8 * v3 + 32);
          }
          if (__OFADD__(v3, 1)) {
            goto LABEL_18;
          }
          specialized Set._Variant.insert(_:)(v9, v4);

          ++v3;
          if (!(v8 >> 62)) {
            break;
          }
LABEL_9:
          swift_bridgeObjectRetain();
          uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v3 == v5) {
            goto LABEL_12;
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t CAFUITileDataSource.firstSettingsSection.getter()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  unint64_t v5 = v4 >> 62;
  if (v3)
  {
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v6) {
      return 2;
    }
    else {
      return 1;
    }
  }
  else
  {
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    return v8 != 0;
  }
}

uint64_t CAFUITileDataSource.reloadView()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = MEMORY[0x270FA5388](v5);
  id v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v10)
  {
    uint64_t v16 = result;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    id v15 = v10;
    uint64_t v11 = v2;
    uint64_t v12 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in CAFUITileDataSource.reloadView();
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_58;
    unint64_t v14 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x24C59F8E0](0, v9, v4, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v1);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v16);
  }
  return result;
}

uint64_t closure #1 in CAFUITileDataSource.reloadView()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x24C5A0810](v1);
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = self;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = partial apply for closure #1 in closure #1 in CAFUITileDataSource.reloadView();
    *(void *)(v6 + 24) = v5;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_68;
    unint64_t v7 = _Block_copy(aBlock);
    id v8 = v3;
    swift_retain();
    swift_release();
    objc_msgSend((id)v4, sel_performWithoutAnimation_, v7);

    _Block_release(v7);
    LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v4) {
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in CAFUITileDataSource.reloadView()(void *a1)
{
  objc_msgSend(a1, sel_reloadData);
  uint64_t v11 = (id (*)(int))closure #1 in CAFUINumericInputView.init(configuration:);
  uint64_t v12 = 0;
  uint64_t v7 = MEMORY[0x263EF8330];
  uint64_t v8 = 1107296256;
  id v9 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v10 = &block_descriptor_71;
  uint64_t v2 = _Block_copy(&v7);
  swift_release();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  uint64_t v11 = partial apply for closure #2 in closure #1 in closure #1 in CAFUITileDataSource.reloadView();
  uint64_t v12 = v3;
  uint64_t v7 = MEMORY[0x263EF8330];
  uint64_t v8 = 1107296256;
  id v9 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v10 = &block_descriptor_77_0;
  uint64_t v4 = _Block_copy(&v7);
  id v5 = a1;
  swift_release();
  objc_msgSend(v5, sel_performBatchUpdates_completion_, v2, v4);
  _Block_release(v4);
  _Block_release(v2);
  uint64_t result = swift_isEscapingClosureAtFileLocation();
  if (result) {
    __break(1u);
  }
  return result;
}

id closure #2 in closure #1 in closure #1 in CAFUITileDataSource.reloadView()(int a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_collectionViewLayout);
  objc_msgSend(v3, sel_invalidateLayout);

  objc_msgSend(a2, sel_setNeedsLayout);

  return objc_msgSend(a2, sel_layoutIfNeeded);
}

Swift::Int __swiftcall CAFUITileDataSource.numberOfSections(in:)(UICollectionView *in)
{
  uint64_t v2 = CAFUITileDataSource.firstSettingsSection.getter();
  uint64_t v3 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) + 16);
  BOOL v4 = __OFADD__(v2, v3);
  Swift::Int result = v2 + v3;
  if (v4) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall CAFUITileDataSource.collectionView(_:numberOfItemsInSection:)(UICollectionView *_, Swift::Int numberOfItemsInSection)
{
  return specialized CAFUITileDataSource.collectionView(_:numberOfItemsInSection:)(numberOfItemsInSection);
}

char *CAFUITileDataSource.collectionView(_:cellForItemAt:)(char *a1, uint64_t a2)
{
  uint64_t v5 = v2;
  unint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (unint64_t)v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 64;
  if ((CAFUITileDataSource.validate(indexPath:)() & 1) == 0) {
    goto LABEL_91;
  }
  uint64_t v12 = IndexPath.section.getter();
  uint64_t v13 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
  unint64_t v8 = *(void *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v11) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    unint64_t v16 = IndexPath.item.getter();
    uint64_t v15 = v16;
    uint64_t v5 = *(void *)(v5 + v13);
    if ((v5 & 0xC000000000000001) == 0)
    {
      if ((v16 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v16 < *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v17 = *(_OWORD **)(v5 + 8 * v16 + 32);
        swift_getObjectType();
        uint64_t v18 = swift_conformsToProtocol2();
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        if (v18) {
          uint64_t v20 = v17;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = v17;
        if (!v20) {
          goto LABEL_93;
        }
        uint64_t v17 = v21;
LABEL_25:
        type metadata accessor for CAFUIProminentSettingCell();
        uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
        id v23 = v17;
        unint64_t v24 = NSStringFromClass(ObjCClassFromMetadata);
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;

        uint64_t v28 = (void *)MEMORY[0x24C59F610](v25, v27);
        swift_bridgeObjectRelease();
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        uint64_t v17 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v28, isa);

        uint64_t v30 = swift_dynamicCastClass();
        if (!v30) {
          goto LABEL_94;
        }
        a1 = (char *)v30;
        uint64_t v31 = (void *)(v30 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
        swift_beginAccess();
        *uint64_t v31 = v20;
        v31[1] = v19;
        uint64_t v32 = v23;
        swift_unknownObjectRelease();
        if (*v31) {
          CAFUIProminentSettingCell.configureCell()();
        }
        goto LABEL_74;
      }
      __break(1u);
      goto LABEL_41;
    }
    swift_bridgeObjectRetain();
    uint64_t v17 = (_OWORD *)MEMORY[0x24C59FC50](v15, v5);
    swift_bridgeObjectRelease();
    swift_getObjectType();
    uint64_t v34 = swift_conformsToProtocol2();
    if (v34) {
      uint64_t v19 = v34;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v34) {
      uint64_t v20 = v17;
    }
    else {
      uint64_t v20 = 0;
    }
    if (!v20) {
      goto LABEL_93;
    }
    goto LABEL_25;
  }
  uint64_t v15 = IndexPath.section.getter();
  unint64_t v8 = v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems;
  swift_beginAccess();
  if (*(void *)v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v33) {
      goto LABEL_43;
    }
  }
  else if (!*(void *)((*(void *)v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_43;
  }
  unint64_t v11 = *(void *)(v5 + v13);
  if (!(v11 >> 62))
  {
    uint64_t v9 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_12:
    if (v15 == 1) {
      goto LABEL_62;
    }
    goto LABEL_43;
  }
LABEL_42:
  if (!v15)
  {
LABEL_62:
    unint64_t v55 = IndexPath.item.getter();
    unint64_t v56 = v55;
    uint64_t v57 = *(void *)v8;
    if ((*(void *)v8 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v58 = MEMORY[0x24C59FC50](v56, v57);
      swift_bridgeObjectRelease();
      type metadata accessor for CAFUIServiceListItem();
      uint64_t v59 = swift_dynamicCastClass();
      if (v59)
      {
LABEL_66:
        uint64_t v17 = *(_OWORD **)(v59 + 112);
        self;
        uint64_t v60 = swift_dynamicCastObjCClass();
        if (!v60) {
          goto LABEL_93;
        }
        uint64_t v61 = v60;
        type metadata accessor for CAFUIAutomakerSettingCell(0);
        CGFloat v62 = (objc_class *)swift_getObjCClassFromMetadata();
        swift_retain();
        unint64_t v63 = v17;
        id v64 = NSStringFromClass(v62);
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v67 = v66;

        unint64_t v68 = (void *)MEMORY[0x24C59F610](v65, v67);
        swift_bridgeObjectRelease();
        Class v69 = IndexPath._bridgeToObjectiveC()().super.isa;
        uint64_t v17 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v68, v69);

        uint64_t v70 = swift_dynamicCastClass();
        if (v70)
        {
          a1 = (char *)v70;
          CGFloat v71 = (unsigned char *)(v70 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
          swift_beginAccess();
          unsigned char *v71 = 0;
          uint64_t v72 = (uint64_t *)&a1[OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable];
          swift_beginAccess();
          *uint64_t v72 = v61;
          v72[1] = (uint64_t)&protocol witness table for CAFVolume;
          uint64_t v32 = v63;
          swift_unknownObjectRetain_n();
          swift_unknownObjectRelease();
          if (*v72)
          {
            uint64_t v73 = v72[1];
            uint64_t ObjectType = swift_getObjectType();
            unint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 64);
            swift_unknownObjectRetain();
            v75(a1, ObjectType, v73);
            swift_release();

            swift_unknownObjectRelease();
          }
          else
          {
            unsigned char *v71 = 0;
            swift_release();
          }
          swift_release();
          goto LABEL_75;
        }
        while (1)
        {
LABEL_94:

LABEL_93:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
LABEL_87:
      type metadata accessor for CAFUIListItemCell();
      id v82 = (objc_class *)swift_getObjCClassFromMetadata();
      objc_super v83 = NSStringFromClass(v82);
      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v86 = v85;

      unint64_t v87 = (void *)MEMORY[0x24C59F610](v84, v86);
      swift_bridgeObjectRelease();
      Class v88 = IndexPath._bridgeToObjectiveC()().super.isa;
      uint64_t v17 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v87, v88);

      uint64_t v89 = swift_dynamicCastClass();
      if (v89)
      {
        a1 = (char *)v89;
        unint64_t v90 = (uint64_t *)(v89 + OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item);
        swift_beginAccess();
        *unint64_t v90 = v58;
        swift_retain_n();
        swift_release();
        CAFUIListItemCell.item.didset();
        swift_release_n();
        return a1;
      }
      goto LABEL_94;
    }
    if ((v55 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v55 < *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v58 = *(void *)(v57 + 8 * v55 + 32);
      type metadata accessor for CAFUIServiceListItem();
      uint64_t v59 = swift_dynamicCastClass();
      swift_retain();
      if (v59) {
        goto LABEL_66;
      }
      goto LABEL_87;
    }
    __break(1u);
LABEL_91:
    (*(void (**)(unint64_t, uint64_t, unint64_t))(v9 + 16))(v11, a2, v8);
    *(void *)&v93[0] = 0;
    *((void *)&v93[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    *(void *)&v93[0] = 0xD000000000000013;
    *((void *)&v93[0] + 1) = 0x8000000249535310;
    _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x263F07A30]);
    v91._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v17 = v93;
    String.append(_:)(v91);
    swift_bridgeObjectRelease();
    goto LABEL_93;
  }
LABEL_43:
  uint64_t v35 = IndexPath.section.getter();
  uint64_t v36 = CAFUITileDataSource.firstSettingsSection.getter();
  unint64_t v37 = v35 - v36;
  if (__OFSUB__(v35, v36))
  {
    __break(1u);
    goto LABEL_80;
  }
  if ((v37 & 0x8000000000000000) != 0)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v38 = *(void *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections);
  if (v37 >= *(void *)(v38 + 16))
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  id v39 = *(id *)(v38 + 48 * v37 + 72);
  swift_bridgeObjectRetain();
  unint64_t v40 = IndexPath.item.getter();
  if (((unint64_t)v39 & 0xC000000000000001) == 0)
  {
    if ((v40 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v40 < *(void *)(((unint64_t)v39 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v41 = *((id *)v39 + v40 + 4);
      goto LABEL_50;
    }
    __break(1u);
    goto LABEL_85;
  }
LABEL_82:
  uint64_t v41 = (_OWORD *)MEMORY[0x24C59FC50]();
LABEL_50:
  uint64_t v17 = v41;
  swift_bridgeObjectRelease();
  swift_getObjectType();
  uint64_t v42 = swift_conformsToProtocol2();
  if (v42) {
    uint64_t v3 = v42;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v42) {
    BOOL v4 = v17;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    goto LABEL_93;
  }
  type metadata accessor for CAFUIAutomakerSettingCell(0);
  id v43 = (objc_class *)swift_getObjCClassFromMetadata();
  id v39 = v17;
  double v44 = NSStringFromClass(v43);
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v47 = v46;

  double v48 = (void *)MEMORY[0x24C59F610](v45, v47);
  swift_bridgeObjectRelease();
  Class v49 = IndexPath._bridgeToObjectiveC()().super.isa;
  uint64_t v17 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v48, v49);

  uint64_t v50 = swift_dynamicCastClass();
  if (!v50) {
    goto LABEL_94;
  }
  a1 = (char *)v50;
  self;
  if (swift_dynamicCastObjCClass())
  {
    long long v51 = *(_OWORD *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 16);
    v93[0] = *(_OWORD *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache);
    v93[1] = v51;
    v93[2] = *(_OWORD *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 32);
    uint64_t v94 = *(void *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 48);
    unint64_t v52 = CAFUISettingsCache.visibleChildren(of:)(v39);
    if (!(v52 >> 62))
    {
      uint64_t v53 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_61:
      swift_bridgeObjectRelease();
      BOOL v54 = v53 != 0;
      goto LABEL_71;
    }
LABEL_85:
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    goto LABEL_61;
  }
  BOOL v54 = 0;
LABEL_71:
  double v76 = (BOOL *)&a1[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell];
  swift_beginAccess();
  *double v76 = v54;
  double v77 = &a1[OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable];
  swift_beginAccess();
  *(void *)double v77 = v4;
  *((void *)v77 + 1) = v3;
  uint64_t v32 = v39;
  swift_unknownObjectRelease();
  if (!*(void *)v77)
  {
    *double v76 = 0;

LABEL_74:
    goto LABEL_75;
  }
  uint64_t v78 = *((void *)v77 + 1);
  uint64_t v79 = swift_getObjectType();
  uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 64);
  swift_unknownObjectRetain();
  v80(a1, v79, v78);

  swift_unknownObjectRelease();
LABEL_75:

  return a1;
}

uint64_t CAFUITileDataSource.collectionView(_:viewForSupplementaryElementOfKind:at:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for IndexPath();
  unint64_t v11 = *(void (***)(void, void, void))(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((CAFUITileDataSource.validate(indexPath:)() & 1) == 0) {
    goto LABEL_36;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v14 == a3)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    uint64_t v13 = (char *)MEMORY[0x24C59F610](a2, a3);
    uint64_t v10 = type metadata accessor for CAFUICollectionHeaderView();
    uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
    uint64_t v21 = NSStringFromClass(ObjCClassFromMetadata);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    unint64_t v11 = (void (**)(void, void, void))MEMORY[0x24C59F610](v22, v24);
    swift_bridgeObjectRelease();
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v26 = objc_msgSend(a1, sel_dequeueReusableSupplementaryViewOfKind_withReuseIdentifier_forIndexPath_, v13, v11, isa);

    uint64_t v27 = swift_dynamicCastClass();
    if (!v27) {
      goto LABEL_37;
    }
    uint64_t v28 = v27;
    uint64_t v29 = IndexPath.section.getter();
    uint64_t v30 = CAFUITileDataSource.firstSettingsSection.getter();
    unint64_t v31 = v29 - v30;
    if (__OFSUB__(v29, v30))
    {
      __break(1u);
    }
    else if ((v31 & 0x8000000000000000) == 0)
    {
      uint64_t v32 = *(void *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections);
      if (v31 < *(void *)(v32 + 16))
      {
        uint64_t v33 = v32 + 48 * v31;
        uint64_t v34 = *(void *)(v33 + 40);
        uint64_t v35 = (void *)(v28 + OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_title);
        *uint64_t v35 = *(void *)(v33 + 32);
        v35[1] = v34;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v36 = *(void **)(v28 + OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_titleLabel);
        if (v35[1])
        {
          Swift::String v39 = String.uppercased()();
          object = v39._object;
          uint64_t countAndFlagsBits = v39._countAndFlagsBits;
LABEL_27:
          unint64_t v56 = (void *)MEMORY[0x24C59F610](countAndFlagsBits, object);
          swift_bridgeObjectRelease();
LABEL_29:
          objc_msgSend(v36, sel_setText_, v56);

          return v28;
        }
LABEL_28:
        unint64_t v56 = 0;
        goto LABEL_29;
      }
      goto LABEL_32;
    }
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v17 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0) {
      goto LABEL_38;
    }
  }
  uint64_t v13 = (char *)MEMORY[0x24C59F610](a2, a3);
  uint64_t v10 = type metadata accessor for CAFUICollectionFooterView();
  unint64_t v40 = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v41 = NSStringFromClass(v40);
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v43;

  unint64_t v11 = (void (**)(void, void, void))MEMORY[0x24C59F610](v42, v44);
  swift_bridgeObjectRelease();
  Class v45 = IndexPath._bridgeToObjectiveC()().super.isa;
  id v26 = objc_msgSend(a1, sel_dequeueReusableSupplementaryViewOfKind_withReuseIdentifier_forIndexPath_, v13, v11, v45);

  uint64_t v46 = swift_dynamicCastClass();
  if (!v46)
  {
LABEL_37:

LABEL_38:
    unint64_t v61 = 0;
    unint64_t v62 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    unint64_t v61 = 0xD000000000000023;
    unint64_t v62 = 0x8000000249535450;
    v59._uint64_t countAndFlagsBits = a2;
    v59._object = a3;
    String.append(_:)(v59);
    v60._uint64_t countAndFlagsBits = 0x6E6B6E7520736920;
    v60._object = (void *)0xEC0000002E6E776FLL;
    String.append(_:)(v60);
    goto LABEL_39;
  }
  uint64_t v28 = v46;
  uint64_t v47 = IndexPath.section.getter();
  uint64_t v48 = CAFUITileDataSource.firstSettingsSection.getter();
  unint64_t v49 = v47 - v48;
  if (__OFSUB__(v47, v48))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if ((v49 & 0x8000000000000000) == 0)
  {
    uint64_t v50 = *(void *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections);
    if (v49 < *(void *)(v50 + 16))
    {
      uint64_t v51 = v50 + 48 * v49;
      uint64_t v52 = *(void *)(v51 + 56);
      uint64_t v53 = (uint64_t *)(v28 + OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_title);
      *uint64_t v53 = *(void *)(v51 + 48);
      v53[1] = v52;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v36 = *(void **)(v28 + OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_titleLabel);
      BOOL v54 = (void *)v53[1];
      if (v54)
      {
        uint64_t v55 = *v53;
        swift_bridgeObjectRetain();
        uint64_t countAndFlagsBits = v55;
        object = v54;
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    goto LABEL_35;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  ((void (**)(char *, uint64_t, uint64_t))v11)[2](v13, a4, v10);
  unint64_t v61 = 0;
  unint64_t v62 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  unint64_t v61 = 0xD000000000000013;
  unint64_t v62 = 0x8000000249535310;
  _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x263F07A30]);
  v58._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
LABEL_39:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CAFUITileDataSource.limitableIndexPaths.getter()
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v64 = *MEMORY[0x263EF8340];
  unint64_t v59 = MEMORY[0x263F8EE78];
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v2)
  {
    uint64_t v3 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
    unint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
    id v46 = *(id *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
    if (v4 >> 62)
    {
      id v18 = v2;
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v6 = v2;
    }
    uint64_t v7 = &selRef_setOpacity_;
    unint64_t v8 = &off_249530000;
    if (v5)
    {
      id v9 = objc_msgSend(v46, sel_numberOfItemsInSection_, 0);
      unint64_t v10 = *(void *)(v0 + v3);
      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        if (v11) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v11)
        {
LABEL_7:
          uint64_t v56 = v0;
          if (v11 < 1) {
            goto LABEL_70;
          }
          uint64_t v12 = 0;
          while (1)
          {
            if ((v10 & 0xC000000000000001) != 0) {
              id v15 = (id)MEMORY[0x24C59FC50](v12, v10);
            }
            else {
              id v15 = *(id *)(v10 + 8 * v12 + 32);
            }
            char v16 = v15;
            if (v12 >= (uint64_t)v9) {
              goto LABEL_10;
            }
            if (!objc_msgSend(v15, sel_hasLimitableUIElement)
              || (objc_msgSend(v16, sel_limitableUIElement) & 1) == 0)
            {
              swift_beginAccess();
              id v17 = objc_getAssociatedObject(v16, &static CAFUIListContentAssociatedObjects.AncestorUILimitable);
              swift_endAccess();
              if (v17)
              {
                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
              }
              else
              {
                long long v60 = 0u;
                long long v61 = 0u;
              }
              outlined init with take of Any?((uint64_t)&v60, (uint64_t)v62);
              if (!v63)
              {
                outlined destroy of UIContentConfiguration?((uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for Any?);
                goto LABEL_10;
              }
              if ((swift_dynamicCast() & 1) == 0 || (v58 & 1) == 0) {
                goto LABEL_10;
              }
            }
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
            type metadata accessor for IndexPath();
            uint64_t v13 = swift_allocObject();
            *(_OWORD *)(v13 + 16) = xmmword_2495305E0;
            MEMORY[0x24C59E990](v12, 0);
            uint64_t v14 = v13;
            uint64_t v7 = &selRef_setOpacity_;
            specialized Array.append<A>(contentsOf:)(v14);
LABEL_10:

            if (v11 == ++v12)
            {
              swift_bridgeObjectRelease();
              uint64_t v0 = v56;
              unint64_t v8 = &off_249530000;
              goto LABEL_29;
            }
          }
        }
      }
      swift_bridgeObjectRelease();
    }
LABEL_29:
    uint64_t v47 = CAFUITileDataSource.firstSettingsSection.getter();
    uint64_t v19 = *(void *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections);
    uint64_t v50 = *(void *)(v19 + 16);
    if (v50)
    {
      uint64_t v49 = v19 + 32;
      swift_bridgeObjectRetain();
      unint64_t v20 = 0;
      long long v53 = *((_OWORD *)v8 + 94);
      uint64_t v21 = &static CAFUIListContentAssociatedObjects.AncestorUILimitable;
      uint64_t v48 = v19;
      do
      {
        if (v20 >= *(void *)(v19 + 16)) {
          goto LABEL_68;
        }
        uint64_t v22 = v49 + 48 * v20;
        uint64_t v23 = *(void **)(v22 + 32);
        unint64_t v24 = *(void *)(v22 + 40);
        uint64_t v51 = v23;
        unint64_t v52 = v20;
        if (v24 >> 62)
        {
          id v45 = v23;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
          if (v25)
          {
LABEL_35:
            if (v25 < 1) {
              goto LABEL_69;
            }
            uint64_t v27 = 0;
            unint64_t v28 = v24 & 0xC000000000000001;
            unint64_t v57 = v24;
            unint64_t v54 = v24 & 0xC000000000000001;
            uint64_t v55 = v25;
            while (2)
            {
              if (v28) {
                id v29 = (id)MEMORY[0x24C59FC50](v27, v24);
              }
              else {
                id v29 = *(id *)(v24 + 8 * v27 + 32);
              }
              uint64_t v30 = v29;
              if ([v29 v7[327]]
                && (objc_msgSend(v30, sel_limitableUIElement) & 1) != 0)
              {
LABEL_51:
                uint64_t v32 = v21;
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
                uint64_t v33 = *(void *)(type metadata accessor for IndexPath() - 8);
                uint64_t v34 = *(void *)(v33 + 72);
                unint64_t v35 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
                uint64_t v36 = swift_allocObject();
                *(_OWORD *)(v36 + 16) = v53;
                unint64_t v37 = v36 + v35;
                MEMORY[0x24C59E990](v27, v52 + v47);
                uint64_t v38 = v59;
                unint64_t v39 = *(void *)(v59 + 16);
                int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                if (!isUniquelyReferenced_nonNull_native || (unint64_t v41 = *(void *)(v59 + 24) >> 1, v41 <= v39))
                {
                  uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v39 + 1, 1, v59);
                  unint64_t v41 = *(void *)(v38 + 24) >> 1;
                }
                unint64_t v42 = *(void *)(v38 + 16);
                if (v41 <= v42)
                {
                  __break(1u);
LABEL_68:
                  __break(1u);
LABEL_69:
                  __break(1u);
LABEL_70:
                  __break(1u);
                }
                unint64_t v43 = v38 + v35 + v42 * v34;
                if (v37 < v43 + v34 && v43 < v37 + v34)
                {
                  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
                  __break(1u);
                  return result;
                }
                swift_arrayInitWithCopy();
                ++*(void *)(v38 + 16);
                swift_bridgeObjectRelease();
                unint64_t v59 = v38;

                uint64_t v7 = &selRef_setOpacity_;
                uint64_t v21 = v32;
                uint64_t v25 = v55;
                unint64_t v24 = v57;
                unint64_t v28 = v54;
              }
              else
              {
                swift_beginAccess();
                id v31 = objc_getAssociatedObject(v30, v21);
                swift_endAccess();
                if (v31)
                {
                  _bridgeAnyObjectToAny(_:)();
                  swift_unknownObjectRelease();
                }
                else
                {
                  long long v60 = 0u;
                  long long v61 = 0u;
                }
                outlined init with take of Any?((uint64_t)&v60, (uint64_t)v62);
                if (v63)
                {
                  if (swift_dynamicCast() & 1) != 0 && (v58) {
                    goto LABEL_51;
                  }
                }
                else
                {
                  outlined destroy of UIContentConfiguration?((uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for Any?);
                }
              }
              if (v25 == ++v27) {
                break;
              }
              continue;
            }
          }
        }
        else
        {
          uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v26 = v23;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v25) {
            goto LABEL_35;
          }
        }
        unint64_t v20 = v52 + 1;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();

        uint64_t v19 = v48;
      }
      while (v52 + 1 != v50);

      swift_bridgeObjectRelease();
    }
    else
    {
    }
    return v59;
  }
  return result;
}

unint64_t CAFUITileDataSource.indexPaths(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized CAFUITileDataSource.indexPaths(for:)(a1, v2, ObjectType, a2);
}

uint64_t CAFUITileDataSource.validate(indexPath:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = (void *)IndexPath.section.getter();
  uint64_t v4 = CAFUITileDataSource.firstSettingsSection.getter();
  uint64_t v5 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections;
  uint64_t v6 = *(void *)(*(void *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) + 16);
  BOOL v7 = __OFADD__(v4, v6);
  uint64_t v8 = v4 + v6;
  if (v7)
  {
    __break(1u);
LABEL_16:
    id v19 = v3;
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v20) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if ((uint64_t)v3 >= v8)
  {
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    type metadata accessor for IndexPath();
    _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x263F07A30]);
    v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 0xD000000000000018;
    v16._object = (void *)0x8000000249535480;
    String.append(_:)(v16);
    os_log_type_t v17 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v17, 0x7461507865646E69, 0xEB00000000203A68, 0xD000000000000014, 0x80000002495354A0);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (!v3) {
    return 0;
  }
  uint64_t v1 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
  unint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v9 >> 62) {
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v11 = v3;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  if (!IndexPath.section.getter())
  {
    id v18 = objc_msgSend(v3, sel_numberOfItemsInSection_, 0);
LABEL_27:
    if (IndexPath.item.getter() < (uint64_t)v18)
    {

      return 1;
    }
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    type metadata accessor for IndexPath();
    _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x263F07A30]);
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 0xD000000000000015;
    v30._object = (void *)0x80000002495354C0;
    String.append(_:)(v30);
    os_log_type_t v31 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v31, 0x7461507865646E69, 0xEB00000000203A68, 0xD000000000000014, 0x80000002495354A0);
    swift_bridgeObjectRelease();

    return 0;
  }
LABEL_7:
  uint64_t v12 = IndexPath.section.getter();
  uint64_t v13 = (unint64_t *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  if (*v13 >> 62)
  {
    uint64_t v32 = v1;
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v22 = v21;
    uint64_t v1 = v32;
    if (!v22) {
      goto LABEL_22;
    }
  }
  else if (!*(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_22;
  }
  unint64_t v14 = *(void *)(v2 + v1);
  if (!(v14 >> 62))
  {
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_11;
    }
LABEL_21:
    if (!v12) {
      goto LABEL_31;
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v23) {
    goto LABEL_21;
  }
LABEL_11:
  if (v12 == 1)
  {
LABEL_31:
    unint64_t v28 = *v13;
    if (v28 >> 62) {
      goto LABEL_32;
    }
LABEL_26:
    id v18 = *(id *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_27;
  }
LABEL_22:
  uint64_t v24 = IndexPath.section.getter();
  uint64_t result = CAFUITileDataSource.firstSettingsSection.getter();
  unint64_t v26 = v24 - result;
  if (__OFSUB__(v24, result))
  {
    __break(1u);
    goto LABEL_34;
  }
  if ((v26 & 0x8000000000000000) != 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v27 = *(void *)(v2 + v5);
  if (v26 < *(void *)(v27 + 16))
  {
    unint64_t v28 = *(void *)(v27 + 48 * v26 + 72);
    if (v28 >> 62)
    {
LABEL_32:
      swift_bridgeObjectRetain();
      id v18 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_35:
  __break(1u);
  return result;
}

unint64_t CAFUITileDataSource.setting(at:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = IndexPath.section.getter();
  uint64_t v5 = (unint64_t *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  unint64_t v6 = *v5;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v25) {
      goto LABEL_6;
    }
  }
  else if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_6;
  }
  unint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4 == (v8 != 0)) {
    return 0;
  }
LABEL_6:
  if ((CAFUITileDataSource.validate(indexPath:)() & 1) == 0) {
    return 0;
  }
  uint64_t v9 = IndexPath.section.getter();
  uint64_t v10 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
  unint64_t v11 = *(void *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v12) {
    BOOL v13 = v9 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13)
  {
    uint64_t v14 = IndexPath.section.getter();
    uint64_t v15 = CAFUITileDataSource.firstSettingsSection.getter();
    unint64_t v16 = v14 - v15;
    if (__OFSUB__(v14, v15))
    {
      __break(1u);
    }
    else if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v17 = *(void *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections);
      if (v16 < *(void *)(v17 + 16))
      {
        uint64_t v18 = *(void *)(v17 + 48 * v16 + 72);
        swift_bridgeObjectRetain();
        unint64_t v19 = a1;
        unint64_t v20 = IndexPath.item.getter();
        if ((v18 & 0xC000000000000001) == 0)
        {
          if ((v20 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v20 < *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v21 = *(id *)(v18 + 8 * v20 + 32);
LABEL_20:
            uint64_t v22 = v21;
LABEL_21:
            swift_bridgeObjectRelease();
            return (unint64_t)v22;
          }
          __break(1u);
LABEL_38:
          swift_bridgeObjectRetain();
          uint64_t v22 = (void *)MEMORY[0x24C59FC50](a1, v19);
          goto LABEL_21;
        }
LABEL_35:
        id v21 = (id)MEMORY[0x24C59FC50]();
        goto LABEL_20;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    __break(1u);
    goto LABEL_34;
  }
  unint64_t result = IndexPath.item.getter();
  a1 = result;
  unint64_t v19 = *(void *)(v2 + v10);
  if ((v19 & 0xC000000000000001) != 0) {
    goto LABEL_38;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v22 = *(void **)(v19 + 8 * result + 32);
    id v24 = v22;
    return (unint64_t)v22;
  }
  __break(1u);
  return result;
}

uint64_t CAFUITileDataSource.settingsSection(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = CAFUITileDataSource.firstSettingsSection.getter();
  unint64_t v6 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
  }
  else
  {
    long long v7 = 0uLL;
    if ((v6 & 0x8000000000000000) != 0
      || (uint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections),
          v6 >= *(void *)(v8 + 16)))
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v9 = v8 + 48 * v6;
      uint64_t v10 = *(void *)(v9 + 32);
      long long v15 = *(_OWORD *)(v9 + 40);
      uint64_t v11 = *(void *)(v9 + 56);
      uint64_t v12 = *(void **)(v9 + 64);
      uint64_t v13 = *(void *)(v9 + 72);
      id v14 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
      long long v7 = v15;
    }
    *(void *)a2 = v10;
    *(_OWORD *)(a2 + 8) = v7;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(void *)(a2 + 40) = v13;
  }
  return result;
}

unint64_t CAFUITileDataSource.listItem(at:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = IndexPath.section.getter();
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  if ((unint64_t)*v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5) {
      goto LABEL_11;
    }
  }
  else if (!*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_11;
  }
  unint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (!(v4 >> 62))
  {
    if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_10:
    if (!v2) {
      goto LABEL_14;
    }
LABEL_11:
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    IndexPath.section.getter();
    v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x80000002495354E0;
    v8._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v8);
    os_log_type_t v9 = static os_log_type_t.info.getter();
    uint64_t v10 = 0x206E6F6974636553;
    unint64_t v11 = 0xE800000000000000;
LABEL_12:
    specialized static CAFUILogger.log(_:message:function:file:line:)(v9, v10, v11, 0x6D6574497473696CLL, 0xED0000293A746128);
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_5:
  if (v2 != 1) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v14 = IndexPath.item.getter();
  uint64_t v15 = v14;
  if (!((unint64_t)*v3 >> 62))
  {
    if (v14 < *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v15 >= v18)
  {
LABEL_21:
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    IndexPath.item.getter();
    v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x80000002495354E0;
    v20._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v20);
    os_log_type_t v9 = static os_log_type_t.info.getter();
    uint64_t v10 = 0x206D657449;
    unint64_t v11 = 0xE500000000000000;
    goto LABEL_12;
  }
LABEL_16:
  unint64_t result = IndexPath.item.getter();
  unint64_t v16 = result;
  uint64_t v17 = *v3;
  if ((*v3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = MEMORY[0x24C59FC50](v16, v17);
    swift_bridgeObjectRelease();
    return v12;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v12 = *(void *)(v17 + 8 * result + 32);
    swift_retain();
    return v12;
  }
  __break(1u);
  return result;
}

void CAFUITileDataSource.refreshProminentSection(reloadSection:)(int a1)
{
  uint64_t v2 = v1;
  LODWORD(v3) = a1;
  unint64_t v4 = type metadata accessor for IndexSet();
  uint64_t v5 = *(char ***)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::String v7 = (char **)((char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v8 = *(void *)&v1[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentSettings];
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v23) {
      return;
    }
    *(void *)&long long v57 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    if (!v24) {
      goto LABEL_47;
    }
    unint64_t i = v24;
    if (v24 < 1)
    {
      __break(1u);
      goto LABEL_28;
    }
    int v54 = v3;
    uint64_t v51 = v7;
    unint64_t v52 = v5;
    unint64_t v53 = v4;
  }
  else
  {
    unint64_t i = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!i) {
      return;
    }
    int v54 = v3;
    uint64_t v51 = (char **)((char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v52 = v5;
    unint64_t v53 = v4;
    *(void *)&long long v57 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
  }
  uint64_t v3 = 0;
  unint64_t v4 = v8 & 0xC000000000000001;
  Swift::String v7 = &selRef_setOpacity_;
  uint64_t v5 = &selRef_setOpacity_;
  do
  {
    if (v4) {
      id v10 = (id)MEMORY[0x24C59FC50](v3, v8);
    }
    else {
      id v10 = *(id *)(v8 + 8 * v3 + 32);
    }
    unint64_t v11 = v10;
    id v12 = objc_msgSend(v10, sel_prominenceInfo);
    if (v12 && (uint64_t v13 = v12, v14 = objc_msgSend(v12, sel_prominenceLevel), v13, v14 == (id)1))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
    ++v3;
  }
  while (i != v3);
  swift_bridgeObjectRelease();
  for (unint64_t i = v57; ; unint64_t i = MEMORY[0x263F8EE78])
  {
    uint64_t v56 = MEMORY[0x263F8EE88];
    if ((i & 0x8000000000000000) != 0 || (i & 0x4000000000000000) != 0)
    {
LABEL_28:
      swift_retain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      if (!v15)
      {
LABEL_29:
        swift_release();
        uint64_t v22 = MEMORY[0x263F8EE88];
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(i + 16);
      swift_retain();
      if (!v15) {
        goto LABEL_29;
      }
    }
    long long v16 = *(_OWORD *)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 16];
    long long v57 = *(_OWORD *)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache];
    long long v58 = v16;
    long long v59 = *(_OWORD *)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 32];
    uint64_t v60 = *(void *)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 48];
    if (v15 >= 1) {
      break;
    }
    __break(1u);
LABEL_47:
    int v54 = v3;
    uint64_t v51 = v7;
    unint64_t v52 = v5;
    unint64_t v53 = v4;
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = 0;
  do
  {
    if ((i & 0xC000000000000001) != 0) {
      id v18 = (id)MEMORY[0x24C59FC50](v17, i);
    }
    else {
      id v18 = *(id *)(i + 8 * v17 + 32);
    }
    Swift::String v19 = v18;
    ++v17;
    CAFUISettingsCache.ancestors(of:)(v18);
    unint64_t v21 = specialized Set.init<A>(_:)(v20);
    swift_bridgeObjectRelease();
    specialized Set.formUnion<A>(_:)(v21);
  }
  while (v15 != v17);
  swift_release();
  uint64_t v22 = v56;
LABEL_30:
  uint64_t v25 = *(char **)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentAncestorObserver];
  uint64_t v26 = OBJC_IVAR____TtC5CAFUIP33_0E4D121C5C9C3A69D68EDC06FF2740D730CAFUIProminentAncestorObserver_observedAncestors;
  uint64_t v27 = v25;
  swift_bridgeObjectRetain();
  uint64_t v28 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v28, (uint64_t)v27, (SEL *)&selRef_unregisterObserver_);
  swift_bridgeObjectRelease();

  *(void *)&v25[v26] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Swift::String v29 = v27;
  uint64_t v30 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v30, (uint64_t)v29, (SEL *)&selRef_registerObserver_);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v31 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
  unint64_t v32 = *(void *)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings];
  uint64_t v33 = v2;
  swift_bridgeObjectRetain();
  uint64_t v34 = specialized _ArrayProtocol.filter(_:)(i, v33);
  swift_release();

  if (v34 < 0 || (v34 & 0x4000000000000000) != 0)
  {
    unint64_t v46 = swift_bridgeObjectRetain();
    unint64_t v35 = specialized _copyCollectionToContiguousArray<A>(_:)(v46);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v35 = (void *)(v34 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  uint64_t v55 = v35;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v55);
  swift_bridgeObjectRelease();
  *(void *)&v2[v31] = v55;
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0
    || (uint64_t v36 = *(void **)((char *)v33 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView)) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    id v47 = v36;
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v38 = v36;
  }
  swift_bridgeObjectRelease();
  if (v37)
  {
    unint64_t v39 = *(void *)&v2[v31];
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v48)
      {
LABEL_40:
        unint64_t v40 = *(void *)&v2[v31];
        if (v40 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v49) {
            goto LABEL_42;
          }
        }
        else if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_42:
          uint64_t v55 = &outlined read-only object #0 of CAFUITileDataSource.refreshProminentSection(reloadSection:);
          _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int]);
          unint64_t v41 = v51;
          unint64_t v42 = v53;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          IndexSet._bridgeToObjectiveC()(v43);
          id v45 = v44;
          ((void (*)(char **, unint64_t))v52[1])(v41, v42);
          objc_msgSend(v36, sel_reloadSections_, v45);

LABEL_44:
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
    else if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_40;
    }
  }
  swift_bridgeObjectRelease();
}

void specialized Set.formUnion<A>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    unint64_t v1 = (unint64_t)v17[1];
    long long v16 = v17[2];
    uint64_t v2 = (uint64_t)v17[3];
    id v3 = v17[4];
    unint64_t v4 = (unint64_t)v17[5];
  }
  else
  {
    id v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    long long v16 = (void *)(a1 + 56);
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | ((void)v3 << 6);
      unint64_t v11 = (char *)v3;
      goto LABEL_29;
    }
    uint64_t v13 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = v16[v13];
    unint64_t v11 = (char *)v3 + 1;
    if (!v14)
    {
      unint64_t v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = v16[(void)v11];
      if (!v14)
      {
        unint64_t v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = v16[(void)v11];
        if (!v14)
        {
          unint64_t v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = v16[(void)v11];
          if (!v14)
          {
            unint64_t v11 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = v16[(void)v11];
            if (!v14)
            {
              uint64_t v15 = (char *)v3 + 6;
              while ((char *)v8 != v15)
              {
                unint64_t v14 = v16[(void)v15++];
                if (v14)
                {
                  unint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<CAFAutomakerSetting>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + ((void)v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      specialized Set._Variant.insert(_:)(v17, v12);

      id v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v17[0];
        swift_unknownObjectRelease();
        unint64_t v11 = (char *)v3;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *a2;
  id v4 = objc_msgSend(*a1, sel_prominenceInfo);
  if (!v4) {
    goto LABEL_19;
  }
  uint64_t v5 = v4;
  id v6 = objc_msgSend(v3, sel_prominenceInfo);
  if (!v6)
  {

LABEL_19:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v7 = v6;
  unsigned int v8 = objc_msgSend(v5, sel_sortOrder);
  if (v8 != objc_msgSend(v7, sel_sortOrder))
  {
    unsigned int v26 = objc_msgSend(v5, sel_sortOrder);
    unsigned int v27 = objc_msgSend(v7, sel_sortOrder);

    char v25 = v26 < v27;
    return v25 & 1;
  }
  id v9 = objc_msgSend(v5, sel_userVisibleLabel);
  if (!v9) {
    id v9 = objc_msgSend(v2, sel_userVisibleLabel);
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  id v13 = objc_msgSend(v7, sel_userVisibleLabel);
  if (!v13) {
    id v13 = objc_msgSend(v3, sel_userVisibleLabel);
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  if (v10 == v14 && v12 == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v17 = objc_msgSend(v2, sel_identifier);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    id v21 = objc_msgSend(v3, sel_identifier);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    if (v22 == v18 && v24 == v20)
    {
      swift_bridgeObjectRelease_n();

      char v25 = 1;
    }
    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      char v25 = v28 ^ 1;
    }
    return v25 & 1;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v30 & 1;
}

id CAFUITileDataSource.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFUITileDataSource.init()()
{
}

id CAFUITileDataSource.__deallocating_deinit(uint64_t a1)
{
  return CAFUITileDataSource.__deallocating_deinit(a1, type metadata accessor for CAFUITileDataSource);
}

uint64_t CAFUITileDataSource.updated(setting:)(void *a1)
{
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v78 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v6 - 8);
  unsigned int v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t isEscapingClosureAtFileLocation = *(void *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (!isEscapingClosureAtFileLocation)
  {
    os_log_type_t v29 = static os_log_type_t.info.getter();
    return specialized static CAFUILogger.log(_:message:function:file:line:)(v29, 0xD000000000000020, 0x80000002495356D0, 0xD000000000000011, 0x8000000249535700);
  }
  swift_getObjectType();
  uint64_t v10 = swift_conformsToProtocol2();
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v70 = v12;
  uint64_t v71 = v11;
  if (!v12) {
    goto LABEL_30;
  }
  id v13 = (id)isEscapingClosureAtFileLocation;
  uint64_t v14 = a1;
  unint64_t v15 = specialized CAFUITileDataSource.indexPaths(for:)(v14, v1);
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    aBlocuint64_t k = 0;
    unint64_t v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    aBlocuint64_t k = 0xD000000000000027;
    unint64_t v80 = 0x80000002495357A0;
    id v31 = objc_msgSend(v14, sel_description);
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    v35._uint64_t countAndFlagsBits = v32;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = aBlock;
    unint64_t v37 = v80;
    os_log_type_t v38 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v38, v36, v37, 0xD000000000000011, 0x8000000249535700);

    return swift_bridgeObjectRelease();
  }
  uint64_t v66 = (void *)v1;
  unint64_t v67 = v15;
  id v77 = v13;
  id v68 = v14;
  uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  uint64_t v17 = v4 + 16;
  uint64_t v18 = v19;
  unint64_t v20 = v15 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
  id v21 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 40);
  uint64_t v22 = *(void *)(v17 + 56);
  unint64_t v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 32);
  uint64_t v76 = v17;
  uint64_t v69 = v71 + 56;
  uint64_t v73 = (void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v74 = (uint64_t (**)(char *, uint64_t))(v17 - 8);
  swift_bridgeObjectRetain();
  while (1)
  {
    v18(v8, v20, v3);
    uint64_t v23 = *v21;
    (*v21)(v8, 0, 1, v3);
    if ((*v75)(v8, 1, v3) == 1) {
      break;
    }
    (*v73)(v78, v8, v3);
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v25 = objc_msgSend(v77, sel_cellForItemAtIndexPath_, isa);

    if (v25)
    {
      type metadata accessor for CAFUIAutomakerSettingCell(0);
      uint64_t v26 = swift_dynamicCastClass();
      if (v26)
      {
        uint64_t v27 = v26;
        id v72 = v25;
        uint64_t ObjectType = swift_getObjectType();
        if ((*(uint64_t (**)(uint64_t, uint64_t))(v71 + 56))(v27, ObjectType))
        {
          swift_bridgeObjectRelease_n();
          aBlocuint64_t k = 0;
          unint64_t v80 = 0xE000000000000000;
          _StringGuts.grow(_:)(49);
          swift_bridgeObjectRelease();
          aBlocuint64_t k = 0xD000000000000028;
          unint64_t v80 = 0x8000000249535770;
          _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x263F07A30]);
          id v47 = v78;
          v48._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v48);
          swift_bridgeObjectRelease();
          v49._uint64_t countAndFlagsBits = 0x20726F6620;
          v49._object = (void *)0xE500000000000000;
          String.append(_:)(v49);
          id v50 = v68;
          id v51 = objc_msgSend(v68, sel_description);
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          int v54 = v53;

          v55._uint64_t countAndFlagsBits = v52;
          v55._object = v54;
          String.append(_:)(v55);
          swift_bridgeObjectRelease();
          uint64_t v56 = aBlock;
          unint64_t v57 = v80;
          os_log_type_t v58 = static os_log_type_t.info.getter();
          specialized static CAFUILogger.log(_:message:function:file:line:)(v58, v56, v57, 0xD000000000000011, 0x8000000249535700);

          swift_bridgeObjectRelease();
          return (*v74)(v47, v3);
        }
        (*v74)(v78, v3);

        goto LABEL_13;
      }
    }
    (*v74)(v78, v3);
LABEL_13:
    v20 += v22;
    if (!--v16)
    {
      v23(v8, 1, 1, v3);
      break;
    }
  }
  unint64_t v39 = v67;
  swift_bridgeObjectRelease();
  unint64_t v40 = self;
  a1 = (void *)swift_allocObject();
  unint64_t v41 = v66;
  a1[2] = v39;
  a1[3] = v41;
  id v42 = v77;
  a1[4] = v77;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = partial apply for closure #1 in CAFUITileDataSource.updated(setting:);
  *(void *)(v43 + 24) = a1;
  objc_super v83 = thunk for @callee_guaranteed () -> ()partial apply;
  uint64_t v84 = v43;
  aBlocuint64_t k = MEMORY[0x263EF8330];
  unint64_t v80 = 1107296256;
  unint64_t v81 = thunk for @escaping @callee_guaranteed () -> ();
  id v82 = &block_descriptor_52;
  uint64_t v44 = _Block_copy(&aBlock);
  id v45 = v42;
  id v46 = v41;
  swift_retain();
  swift_release();
  objc_msgSend(v40, sel_performWithoutAnimation_, v44);

  _Block_release(v44);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return result;
  }
  __break(1u);
LABEL_30:
  aBlocuint64_t k = 0;
  unint64_t v80 = 0xE000000000000000;
  id v59 = (id)isEscapingClosureAtFileLocation;
  _StringGuts.grow(_:)(80);
  v60._uint64_t countAndFlagsBits = 0xD00000000000004ELL;
  v60._object = (void *)0x8000000249535720;
  String.append(_:)(v60);
  id v61 = objc_msgSend(a1, sel_identifier);
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v64 = v63;

  v65._uint64_t countAndFlagsBits = v62;
  v65._object = v64;
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void closure #1 in CAFUITileDataSource.updated(setting:)(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = specialized _ArrayProtocol.filter(_:)(v5, (uint64_t)v4);

  if (*(void *)(v6 + 16))
  {
    type metadata accessor for IndexPath();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_reconfigureItemsAtIndexPaths_, isa);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t CAFUITileDataSource.automakerSettingService(_:didUpdateProminenceInfo:)()
{
  return specialized CAFUITileDataSource.automakerSettingService(_:didUpdateProminenceInfo:)();
}

uint64_t CAFUITileDataSource.automakerSettingService(_:didUpdateHidden:)()
{
  return specialized CAFUITileDataSource.automakerSettingService(_:didUpdateProminenceInfo:)();
}

void @objc CAFUITileDataSource.singleSelectSettingService(_:didUpdateSelectSettingEntryList:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = a3;
  id v7 = a4;
  id v8 = a1;
  CAFUITileDataSource.updated(setting:)(v6);
}

id CAFUIProminentAncestorObserver.__deallocating_deinit()
{
  return CAFUITileDataSource.__deallocating_deinit(0, type metadata accessor for CAFUIProminentAncestorObserver);
}

id CAFUITileDataSource.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t CAFVolume.identifier.getter()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  objc_super v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t protocol witness for CAFUITileIdentifiable.identifier.getter in conformance CAFVolume()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  objc_super v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t protocol witness for CAFUITileIdentifiable.identifier.getter in conformance CAFUIServiceListItem()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  objc_super v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_msgSend(*(id *)(v0 + 112), sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t protocol witness for CAFUITileIdentifiable.identifier.getter in conformance CAFAutomakerSetting()
{
  id v1 = objc_msgSend(v0, sel_identifier);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void CAFUITileDataSource.updated(setting:)(void *a1)
{
  id v42 = a1;
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  unint64_t v40 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t isEscapingClosureAtFileLocation = *(void *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (isEscapingClosureAtFileLocation)
  {
    id v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
    swift_beginAccess();
    if ((unint64_t)*v5 >> 62) {
      goto LABEL_32;
    }
    uint64_t v6 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v7 = (id)isEscapingClosureAtFileLocation;
    if (v6)
    {
      do
      {
        unint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
        if (v8 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v1 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        BOOL v9 = v1 != 0;
        uint64_t v10 = *v5;
        if ((unint64_t)*v5 >> 62)
        {
          if (v10 < 0) {
            uint64_t v1 = *v5;
          }
          else {
            uint64_t v1 = v10 & 0xFFFFFFFFFFFFFF8;
          }
          swift_bridgeObjectRetain();
          uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v11 < 0)
          {
            __break(1u);
            return;
          }
        }
        else
        {
          uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (!v11) {
          break;
        }
        BOOL v35 = v9;
        id v36 = (id)isEscapingClosureAtFileLocation;
        unint64_t v12 = 0;
        os_log_type_t v38 = v5;
        unint64_t v39 = (uint64_t *)(v2 + 8);
        uint64_t v37 = v11;
        while (v11 != v12)
        {
          uint64_t v1 = *v5;
          if ((*v5 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            uint64_t v2 = MEMORY[0x24C59FC50](v12, v1);
            swift_bridgeObjectRelease();
            type metadata accessor for CAFUIServiceListItem();
            uint64_t v26 = swift_dynamicCastClass();
            if (!v26)
            {
              swift_unknownObjectRelease();
              goto LABEL_14;
            }
            uint64_t v15 = v26;
          }
          else
          {
            if (v12 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_31;
            }
            uint64_t v2 = *(void *)(v1 + 8 * v12 + 32);
            type metadata accessor for CAFUIServiceListItem();
            uint64_t v14 = swift_dynamicCastClass();
            if (!v14) {
              goto LABEL_14;
            }
            uint64_t v15 = v14;
            swift_retain();
          }
          id v16 = objc_msgSend(*(id *)(v15 + 112), sel_uniqueIdentifier);
          uint64_t v1 = (uint64_t)v40;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v17 = UUID.uuidString.getter();
          uint64_t v19 = v18;
          uint64_t isEscapingClosureAtFileLocation = *v39;
          uint64_t v20 = v41;
          ((void (*)(uint64_t, uint64_t))*v39)(v1, v41);
          id v21 = objc_msgSend(v42, sel_uniqueIdentifier);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v22 = UUID.uuidString.getter();
          uint64_t v24 = v23;
          ((void (*)(uint64_t, uint64_t))isEscapingClosureAtFileLocation)(v1, v20);
          if (v17 == v22 && v19 == v24)
          {
            swift_bridgeObjectRelease_n();
LABEL_28:
            uint64_t v27 = self;
            char v28 = (void *)swift_allocObject();
            BOOL v29 = v35;
            id v30 = v36;
            v28[2] = v36;
            v28[3] = v12;
            v28[4] = v29;
            uint64_t v1 = swift_allocObject();
            *(void *)(v1 + 16) = partial apply for closure #1 in CAFUITileDataSource.updated(setting:);
            *(void *)(v1 + 24) = v28;
            aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
            aBlock[5] = v1;
            aBlock[0] = MEMORY[0x263EF8330];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
            aBlock[3] = &block_descriptor_5;
            id v5 = (uint64_t *)_Block_copy(aBlock);
            id v31 = v30;
            swift_retain();
            swift_release();
            objc_msgSend(v27, sel_performWithoutAnimation_, v5);
            swift_release();

            _Block_release(v5);
            uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            swift_release();
            swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0) {
              return;
            }
            __break(1u);
            break;
          }
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v25) {
            goto LABEL_28;
          }
          swift_release();
          uint64_t v11 = v37;
          id v5 = v38;
LABEL_14:
          if (v11 == ++v12)
          {

            return;
          }
        }
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        id v32 = (id)isEscapingClosureAtFileLocation;
        swift_bridgeObjectRetain();
        uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      while (v33);
    }
  }
  else
  {
    os_log_type_t v13 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 0xD000000000000020, 0x80000002495356D0, 0xD000000000000011, 0x8000000249535700);
  }
}

void closure #1 in CAFUITileDataSource.updated(setting:)(void *a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
  type metadata accessor for IndexPath();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2495305E0;
  MEMORY[0x24C59E990](a2, a3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_reconfigureItemsAtIndexPaths_, isa);
}

uint64_t @objc CAFUITileDataSource.automakerSettingService(_:didUpdateSymbolName:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id))
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5(v8);

  return swift_bridgeObjectRelease();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, void **a2, unint64_t a3, void **__dst)
{
  BOOL v35 = __dst;
  id v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v41 = __src;
  unint64_t v40 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 >= -7)
    {
      if (__dst != a2 || &a2[v12] <= __dst)
      {
        memmove(__dst, a2, 8 * v12);
        __dst = v35;
      }
      id v21 = &__dst[v12];
      unint64_t v39 = v21;
      uint64_t v41 = v5;
      if (v6 < v5 && v10 >= 8)
      {
        uint64_t v22 = (id *)(a3 - 8);
        uint64_t v23 = v5;
        uint64_t v34 = v6;
        while (1)
        {
          uint64_t v24 = v21;
          char v25 = *--v21;
          id v38 = v25;
          uint64_t v26 = *--v23;
          uint64_t v37 = v26;
          id v27 = v38;
          id v28 = v26;
          char v29 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v38, &v37);
          if (v36) {
            break;
          }
          char v30 = v29;
          uint64_t v36 = 0;
          id v31 = v22 + 1;

          if (v30)
          {
            id v32 = v35;
            if (v31 != v5 || v22 >= v5) {
              id *v22 = *v23;
            }
            uint64_t v41 = v23;
            id v21 = v24;
          }
          else
          {
            unint64_t v39 = v21;
            id v32 = v35;
            if (v31 < v24 || v22 >= v24 || v31 != v24) {
              id *v22 = *v21;
            }
            uint64_t v23 = v5;
          }
          if (v23 > v34)
          {
            --v22;
            id v5 = v23;
            if (v21 > v32) {
              continue;
            }
          }
          goto LABEL_48;
        }
      }
      goto LABEL_48;
    }
  }
  else if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst)
    {
      memmove(__dst, __src, 8 * v9);
      __dst = v35;
    }
    os_log_type_t v13 = &__dst[v9];
    unint64_t v39 = v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      while (1)
      {
        id v38 = *v5;
        uint64_t v14 = __dst;
        uint64_t v37 = *__dst;
        uint64_t v15 = v37;
        id v16 = v38;
        id v17 = v15;
        char v18 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v38, &v37);
        if (v36) {
          break;
        }
        char v19 = v18;

        if (v19)
        {
          uint64_t v20 = v5 + 1;
          if (v6 < v5 || v6 >= v20 || v6 != v5) {
            void *v6 = *v5;
          }
          __dst = v14;
        }
        else
        {
          if (v6 != v14) {
            void *v6 = *v14;
          }
          __dst = v14 + 1;
          unint64_t v40 = v14 + 1;
          uint64_t v20 = v5;
        }
        uint64_t v36 = 0;
        uint64_t v41 = ++v6;
        if (__dst < v13)
        {
          id v5 = v20;
          if ((unint64_t)v20 < a3) {
            continue;
          }
        }
        goto LABEL_48;
      }
    }
LABEL_48:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v41, (const void **)&v40, &v39);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    id v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      uint64_t v23 = v28;
    }
    else
    {
      uint64_t v23 = (void *)v22;
      id v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    *uint64_t v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CAFAutomakerSetting>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CAFAutomakerSetting>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    id v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CAFAutomakerSetting>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CAFAutomakerSetting>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  id v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v4 + 40);
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

unint64_t specialized CAFUITileDataSource.indexPaths(for:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v75 = a3;
  uint64_t v76 = a4;
  uint64_t v74 = a1;
  uint64_t v72 = type metadata accessor for UUID();
  unint64_t v6 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v71 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v68 = v8;
  uint64_t v69 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)&v64 - v14);
  MEMORY[0x270FA5388](v13);
  uint64_t v70 = (char *)&v64 - v16;
  unint64_t v17 = *(void *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v17)
  {
    unint64_t v18 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
    unint64_t v19 = *(void *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
    if (v19 >> 62) {
      goto LABEL_94;
    }
    id v20 = *(char **)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v21 = (unint64_t *)(id)v17;
    while (1)
    {
      unint64_t v73 = a2;
      id v65 = (id)v17;
      if (!v20) {
        goto LABEL_20;
      }
      unint64_t v22 = (unint64_t)objc_msgSend((id)v17, sel_numberOfItemsInSection_, 0);
      if ((v22 & 0x8000000000000000) == 0) {
        break;
      }
      __break(1u);
LABEL_98:
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      while (1)
      {
        unint64_t v18 = v34 != 0;
        int64_t v32 = *(void *)v12;
        if (!(*(void *)v12 >> 62)) {
          break;
        }
        if (v32 < 0) {
          id v20 = *(char **)v12;
        }
        else {
          id v20 = (char *)(v32 & 0xFFFFFFFFFFFFFF8);
        }
        swift_bridgeObjectRetain();
        a2 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((a2 & 0x8000000000000000) == 0) {
          goto LABEL_32;
        }
        __break(1u);
LABEL_104:
        unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32, 1, v4);
LABEL_24:
        a2 = v73;
        unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))v6;
        *(void *)(v4 + 16) = v32;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v69 + 32))(v4+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(void *)(v69 + 72) * v17, v12, v68);

LABEL_25:
        unint64_t v6 = v67;
LABEL_26:
        uint64_t v12 = a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems;
        swift_beginAccess();
        if (*(void *)v12 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v63) {
            goto LABEL_56;
          }
        }
        else if (!*(void *)((*(void *)v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_56;
        }
        unint64_t v33 = *(void *)(a2 + v18);
        if (v33 >> 62) {
          goto LABEL_98;
        }
        uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      a2 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_32:
      if (a2)
      {
        uint64_t v66 = v18;
        uint64_t v67 = (uint64_t)v15;
        id v20 = 0;
        unint64_t v17 = v6 + 8;
        unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))(v76 + 8);
        unint64_t v6 = v12;
        goto LABEL_38;
      }
LABEL_49:
      a2 = v73;
LABEL_56:
      uint64_t v67 = CAFUITileDataSource.firstSettingsSection.getter();
      unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections;
      uint64_t v71 = *(char **)(*(void *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) + 16);
      if (!v71)
      {
LABEL_85:

        return v4;
      }
      unint64_t v18 = 0;
      unint64_t v17 = v76 + 8;
      uint64_t v66 = v69 + 32;
      while (1)
      {
        uint64_t v48 = *(void *)((char *)v15 + a2);
        if (v18 >= *(void *)(v48 + 16)) {
          break;
        }
        unint64_t v49 = *(void *)(v48 + 48 * v18 + 72);
        if (v49 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v12 < 0) {
            goto LABEL_91;
          }
        }
        else
        {
          uint64_t v12 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v12)
        {
          uint64_t v72 = v4;
          unint64_t v4 = 0;
          unint64_t v6 = *(void *)v17;
          while (1)
          {
            if (v12 == v4)
            {
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
              goto LABEL_90;
            }
            uint64_t v50 = *(void *)((char *)v15 + a2);
            if (v18 >= *(void *)(v50 + 16)) {
              goto LABEL_88;
            }
            uint64_t v51 = *(void *)(v50 + 48 * v18 + 72);
            if ((v51 & 0xC000000000000001) != 0)
            {
              swift_bridgeObjectRetain();
              id v52 = (id)MEMORY[0x24C59FC50](v4, v51);
              swift_bridgeObjectRelease();
            }
            else
            {
              if (v4 >= *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_89;
              }
              id v52 = *(id *)(v51 + 8 * v4 + 32);
            }
            id v53 = objc_msgSend(v52, sel_identifier);
            uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v56 = v55;

            if (v54 == ((uint64_t (*)(uint64_t, uint64_t))v6)(v75, v76) && v56 == v57) {
              break;
            }
            char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v59) {
              goto LABEL_78;
            }
            ++v4;

            a2 = v73;
            if (v12 == v4)
            {
              unint64_t v4 = v72;
              goto LABEL_58;
            }
          }
          swift_bridgeObjectRelease_n();
LABEL_78:
          MEMORY[0x24C59E990](v4, v18 + v67);
          unint64_t v4 = v72;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, v4);
          }
          unint64_t v6 = *(void *)(v4 + 16);
          unint64_t v60 = *(void *)(v4 + 24);
          if (v6 >= v60 >> 1) {
            unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v6 + 1, 1, v4);
          }
          *(void *)(v4 + 16) = v6 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v69 + 32))(v4+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(void *)(v69 + 72) * v6, v70, v68);

          a2 = v73;
        }
LABEL_58:
        if ((char *)++v18 == v71) {
          goto LABEL_85;
        }
      }
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      uint64_t v62 = (unint64_t *)(id)v17;
      swift_bridgeObjectRetain();
      id v20 = (char *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    unint64_t v23 = v22;
    if (v22)
    {
      uint64_t v66 = v12;
      uint64_t v67 = v6;
      unint64_t v6 = (unint64_t)v15;
      a2 = 0;
      unint64_t v17 = v76 + 8;
      unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v76 + 8);
      while (1)
      {
        if (v23 == a2)
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          swift_unknownObjectRelease();
          while (1)
          {
            ++v20;
            unint64_t v4 = v18;
            if ((char *)a2 == v20) {
              goto LABEL_49;
            }
LABEL_38:
            if ((char *)a2 == v20) {
              goto LABEL_92;
            }
            int64_t v35 = *(void *)v12;
            if ((*(void *)v12 & 0xC000000000000001) != 0)
            {
              unint64_t v18 = v4;
              swift_bridgeObjectRetain();
              MEMORY[0x24C59FC50](v20, v35);
              swift_bridgeObjectRelease();
              type metadata accessor for CAFUIServiceListItem();
              uint64_t v44 = swift_dynamicCastClass();
              if (!v44) {
                goto LABEL_36;
              }
              uint64_t v37 = v44;
            }
            else
            {
              if ((unint64_t)v20 >= *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_93;
              }
              unint64_t v18 = v4;
              type metadata accessor for CAFUIServiceListItem();
              uint64_t v36 = swift_dynamicCastClass();
              if (!v36) {
                continue;
              }
              uint64_t v37 = v36;
              swift_retain();
            }
            id v38 = objc_msgSend(*(id *)(v37 + 112), sel_uniqueIdentifier);
            unint64_t v39 = v71;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v40 = UUID.uuidString.getter();
            uint64_t v12 = v41;
            (*(void (**)(char *, uint64_t))v17)(v39, v72);
            if (v40 == (*(uint64_t (**)(uint64_t))(v76 + 8))(v75) && v12 == v42)
            {
              swift_bridgeObjectRelease_n();
LABEL_51:
              uint64_t v45 = v67;
              MEMORY[0x24C59E990](v20, v66);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1, v18);
              }
              a2 = v73;
              unint64_t v47 = *(void *)(v18 + 16);
              unint64_t v46 = *(void *)(v18 + 24);
              if (v47 >= v46 >> 1) {
                unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v18);
              }
              *(void *)(v18 + 16) = v47 + 1;
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v69 + 32))(v18+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(void *)(v69 + 72) * v47, v45, v68);
              unint64_t v4 = v18;
              swift_release();
              goto LABEL_56;
            }
            char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v43) {
              goto LABEL_51;
            }
            swift_release();
            uint64_t v12 = v6;
          }
        }
        uint64_t v24 = *(void *)(v73 + v18);
        if ((v24 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          id v20 = (char *)MEMORY[0x24C59FC50](a2, v24);
          swift_bridgeObjectRelease();
        }
        else
        {
          if (a2 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_35;
          }
          id v20 = (char *)*(id *)(v24 + 8 * a2 + 32);
        }
        id v25 = objc_msgSend(v20, sel_identifier);
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v27;

        if (v26 == v15(v75, v76) && v12 == v28) {
          break;
        }
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v30) {
          goto LABEL_23;
        }
        ++a2;

        if (v23 == a2)
        {
          a2 = v73;
          unint64_t v4 = MEMORY[0x263F8EE78];
          unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))v6;
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease_n();
LABEL_23:
      uint64_t v12 = v66;
      MEMORY[0x24C59E990](a2, 0);
      unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v17 = *(void *)(v4 + 16);
      unint64_t v31 = *(void *)(v4 + 24);
      int64_t v32 = v17 + 1;
      if (v17 >= v31 >> 1) {
        goto LABEL_104;
      }
      goto LABEL_24;
    }
LABEL_20:
    unint64_t v4 = MEMORY[0x263F8EE78];
    goto LABEL_26;
  }
  return MEMORY[0x263F8EE78];
}

void specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v22;
    uint64_t v21 = v23;
    uint64_t v6 = v24;
    uint64_t v7 = v25;
    unint64_t v8 = v26;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  int64_t v20 = (unint64_t)(v6 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v8)
    {
      uint64_t v13 = (v8 - 1) & v8;
      unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
      uint64_t v15 = v7;
      goto LABEL_29;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v17 >= v20) {
      goto LABEL_32;
    }
    unint64_t v18 = *(void *)(v21 + 8 * v17);
    uint64_t v15 = v7 + 1;
    if (!v18)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v20) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v21 + 8 * v15);
      if (!v18)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v20) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v21 + 8 * v15);
        if (!v18)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v20) {
            goto LABEL_32;
          }
          unint64_t v18 = *(void *)(v21 + 8 * v15);
          if (!v18)
          {
            uint64_t v15 = v7 + 5;
            if (v7 + 5 >= v20) {
              goto LABEL_32;
            }
            unint64_t v18 = *(void *)(v21 + 8 * v15);
            if (!v18)
            {
              uint64_t v19 = v7 + 6;
              while (v20 != v19)
              {
                unint64_t v18 = *(void *)(v21 + 8 * v19++);
                if (v18)
                {
                  uint64_t v15 = v19 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<CAFAutomakerSetting>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v13 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
LABEL_29:
    id v16 = *(id *)(*(void *)(v5 + 48) + 8 * v14);
    if (!v16) {
      goto LABEL_32;
    }
    while (1)
    {
      objc_msgSend(v16, *a3, a2);

      uint64_t v7 = v15;
      unint64_t v8 = v13;
      if ((v5 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v16 = v27;
        swift_unknownObjectRelease();
        uint64_t v15 = v7;
        uint64_t v13 = v8;
        if (v27) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t type metadata accessor for CAFUIProminentAncestorObserver()
{
  return self;
}

uint64_t type metadata accessor for CAFUITileDataSource()
{
  return self;
}

unint64_t specialized Set.union<A>(_:)(unint64_t result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v9 = a2;
  if (!(result >> 62))
  {
    uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
    return v9;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    return v9;
  }
LABEL_3:
  if (v3 >= 1)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v5 = (void *)MEMORY[0x24C59FC50](i, v2);
        specialized Set._Variant.insert(_:)(&v8, v5);
      }
    }
    else
    {
      uint64_t v6 = (void **)(v2 + 32);
      do
      {
        uint64_t v7 = *v6++;
        specialized Set._Variant.insert(_:)(&v8, v7);

        --v3;
      }
      while (v3);
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a1;
  uint64_t v29 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_28;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0;
      uint64_t v25 = (char *)a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache;
      uint64_t v27 = v3 & 0xFFFFFFFFFFFFFF8;
      unint64_t v28 = v3 & 0xC000000000000001;
      unint64_t v24 = v3;
      unint64_t v26 = (char **)(v3 + 32);
      unint64_t v3 = (unint64_t)&selRef_setOpacity_;
      while (v28)
      {
        uint64_t v6 = (char *)MEMORY[0x24C59FC50](v5, v24);
LABEL_9:
        uint64_t v7 = v6;
        if (__OFADD__(v5++, 1)) {
          goto LABEL_27;
        }
        if (objc_msgSend(v6, sel_hasHidden) && objc_msgSend(v7, sel_hidden))
        {
        }
        else
        {
          a2 = (uint64_t *)*((void *)v25 + 5);
          id v9 = objc_msgSend(v7, sel_identifier, v24);
          uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v12 = v11;

          if (a2[2] && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v12), (v14 & 1) != 0))
          {
            id v15 = *(id *)(a2[7] + 8 * v13);
            swift_bridgeObjectRelease();
            while (1)
            {
              id v16 = v15;
              if (objc_msgSend(v16, sel_hasHidden))
              {
                if (objc_msgSend(v16, sel_hidden)) {
                  break;
                }
              }
              id v17 = objc_msgSend(v16, sel_identifier);
              uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v20 = v19;

              if (!a2[2] || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v22 & 1) == 0))
              {
                swift_bridgeObjectRelease();

                goto LABEL_22;
              }
              id v15 = *(id *)(a2[7] + 8 * v21);
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_bridgeObjectRelease();
LABEL_22:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            a2 = &v29;
            specialized ContiguousArray._endMutation()();
          }
        }
        if (v5 == v4) {
          return v29;
        }
      }
      if (v5 < *(void *)(v27 + 16)) {
        break;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        return MEMORY[0x263F8EE78];
      }
    }
    uint64_t v6 = v26[v5];
    goto LABEL_9;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
  lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = (void *)MEMORY[0x24C59FC50](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        id v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v28 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_41;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v21 = v2;
    unint64_t v4 = 0;
    uint64_t v22 = i;
    uint64_t v23 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
    uint64_t v26 = v2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v27 = v2 & 0xC000000000000001;
    uint64_t v25 = v2 + 32;
    while (1)
    {
      if (v27)
      {
        id v5 = (id)MEMORY[0x24C59FC50](v4, v21);
      }
      else
      {
        if (v4 >= *(void *)(v26 + 16)) {
          goto LABEL_38;
        }
        id v5 = *(id *)(v25 + 8 * v4);
      }
      uint64_t v6 = v5;
      if (__OFADD__(v4++, 1)) {
        goto LABEL_39;
      }
      if (objc_msgSend(v5, sel_hasHidden) && objc_msgSend(v6, sel_hidden))
      {

        goto LABEL_6;
      }
      unint64_t v8 = *(void *)(a2 + v23);
      if (v8 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        if (!v9) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v9) {
          goto LABEL_4;
        }
      }
      if ((v8 & 0xC000000000000001) != 0) {
        id v10 = (id)MEMORY[0x24C59FC50](0, v8);
      }
      else {
        id v10 = *(id *)(v8 + 32);
      }
      uint64_t v11 = v10;
      uint64_t v2 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      char v12 = static NSObject.== infix(_:_:)();

      if (v12)
      {
LABEL_19:

        swift_bridgeObjectRelease_n();
        goto LABEL_5;
      }
      if (v9 != 1) {
        break;
      }
LABEL_4:
      swift_bridgeObjectRelease_n();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t v2 = (uint64_t)&v28;
      specialized ContiguousArray._endMutation()();
LABEL_5:
      uint64_t i = v22;
LABEL_6:
      if (v4 == i) {
        return v28;
      }
    }
    if ((v8 & 0xC000000000000001) != 0)
    {
      uint64_t v13 = 1;
      while (1)
      {
        MEMORY[0x24C59FC50](v13, v8);
        uint64_t v14 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        char v15 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        if (v15) {
          goto LABEL_19;
        }
        ++v13;
        if (v14 == v9) {
          goto LABEL_4;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v16 = 5;
    while (1)
    {
      uint64_t v17 = v16 - 3;
      if (__OFADD__(v16 - 4, 1)) {
        break;
      }
      id v18 = *(id *)(v8 + 8 * v16);
      char v19 = static NSObject.== infix(_:_:)();

      if (v19) {
        goto LABEL_19;
      }
      ++v16;
      if (v17 == v9) {
        goto LABEL_4;
      }
    }
LABEL_40:
    __break(1u);
LABEL_41:
    ;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t specialized CAFUITileDataSource.collectionView(_:numberOfItemsInSection:)(uint64_t a1)
{
  uint64_t v4 = CAFUITileDataSource.firstSettingsSection.getter();
  uint64_t v5 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections;
  uint64_t v6 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) + 16);
  BOOL v7 = __OFADD__(v4, v6);
  uint64_t v8 = v4 + v6;
  if (v7)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > a1)
  {
    uint64_t v2 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
    unint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
    if (!(v9 >> 62))
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_5:
    if (v10) {
      BOOL v11 = a1 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      unint64_t v14 = *(void *)(v1 + v2);
      if (v14 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        return v17;
      }
      uint64_t v15 = v14 & 0xFFFFFFFFFFFFFF8;
      return *(void *)(v15 + 16);
    }
    char v12 = (unint64_t *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
    swift_beginAccess();
    if (*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v16) {
        goto LABEL_24;
      }
    }
    else if (!*(void *)((*v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v1 + v2);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v19)
      {
LABEL_13:
        if (a1 == 1)
        {
LABEL_31:
          unint64_t v23 = *v12;
          if (*v12 >> 62) {
            goto LABEL_32;
          }
LABEL_28:
          uint64_t v15 = v23 & 0xFFFFFFFFFFFFFF8;
          return *(void *)(v15 + 16);
        }
LABEL_24:
        uint64_t v20 = CAFUITileDataSource.firstSettingsSection.getter();
        unint64_t v21 = a1 - v20;
        if (__OFSUB__(a1, v20))
        {
          __break(1u);
        }
        else if ((v21 & 0x8000000000000000) == 0)
        {
          uint64_t v22 = *(void *)(v1 + v5);
          if (v21 < *(void *)(v22 + 16))
          {
            unint64_t v23 = *(void *)(v22 + 48 * v21 + 72);
            if (v23 >> 62)
            {
LABEL_32:
              swift_bridgeObjectRetain();
              uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              return v24;
            }
            goto LABEL_28;
          }
          goto LABEL_35;
        }
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
    }
    else if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_13;
    }
    if (!a1) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
LABEL_36:
  _StringGuts.grow(_:)(53);
  v25._object = (void *)0x80000002495357D0;
  v25._uint64_t countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 46;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CAFUITileDataSource.automakerSettingService(_:didUpdateProminenceInfo:)()
{
  CAFUITileDataSource.refreshProminentSection(reloadSection:)(0);
  uint64_t v19 = v0;
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v3 = (unint64_t *)(v1 + 72);
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v5 = *(v3 - 4);
      uint64_t v6 = *(v3 - 2);
      uint64_t v20 = *(v3 - 3);
      uint64_t v21 = *(v3 - 5);
      BOOL v7 = (void *)*(v3 - 1);
      unint64_t v8 = *v3;
      id v22 = v7;
      swift_bridgeObjectRetain_n();
      unint64_t v9 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v10 = specialized _ArrayProtocol.filter(_:)(v8, (uint64_t)v9);
      swift_bridgeObjectRelease();

      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v17)
        {
LABEL_7:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v11 = v22;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
          }
          char v12 = v4;
          unint64_t v13 = v4[2];
          unint64_t v14 = v12;
          unint64_t v15 = v12[3];
          if (v13 >= v15 >> 1) {
            unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v13 + 1, 1, v14);
          }
          v14[2] = v13 + 1;
          uint64_t v16 = &v14[6 * v13];
          uint64_t v4 = v14;
          v16[4] = v21;
          v16[5] = v5;
          void v16[6] = v20;
          v16[7] = v6;
          v16[8] = v7;
          v16[9] = v10;
          goto LABEL_4;
        }
      }
      else if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_7;
      }
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v3 += 6;
      if (!--v2)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_16;
      }
    }
  }
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
LABEL_16:
  *(void *)&v19[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  CAFUITileDataSource.reloadView()();

  return swift_bridgeObjectRelease();
}

uint64_t destroy for CAFUIAutomakerSettingsSection(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CAFUIAutomakerSettingsSection(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v6 = (void *)a2[4];
  uint64_t v5 = a2[5];
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CAFUIAutomakerSettingsSection(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  id v6 = v5;

  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CAFUIAutomakerSettingsSection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIAutomakerSettingsSection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIAutomakerSettingsSection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIAutomakerSettingsSection()
{
  return &type metadata for CAFUIAutomakerSettingsSection;
}

uint64_t specialized CAFUIProminentAncestorObserver.automakerSettingService(_:didUpdateHidden:)()
{
  uint64_t result = MEMORY[0x24C5A0810](v0 + OBJC_IVAR____TtC5CAFUIP33_0E4D121C5C9C3A69D68EDC06FF2740D730CAFUIProminentAncestorObserver_delegate);
  if (result)
  {
    uint64_t v2 = result;
    CAFUITileDataSource.refreshProminentSection(reloadSection:)(0);
    uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections);
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v5 = (unint64_t *)(v3 + 72);
      uint64_t v21 = (void *)MEMORY[0x263F8EE78];
      uint64_t v18 = v2;
      while (1)
      {
        uint64_t v6 = *(v5 - 4);
        uint64_t v7 = *(v5 - 2);
        uint64_t v19 = *(v5 - 3);
        uint64_t v20 = *(v5 - 5);
        unint64_t v8 = (void *)*(v5 - 1);
        unint64_t v9 = *v5;
        id v22 = v8;
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v10 = specialized _ArrayProtocol.filter(_:)(v9, v2);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        if (v10 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v16)
          {
LABEL_8:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v11 = v22;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              char v12 = v21;
            }
            else {
              char v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
            }
            unint64_t v14 = v12[2];
            unint64_t v13 = v12[3];
            if (v14 >= v13 >> 1) {
              char v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
            }
            long long v12[2] = v14 + 1;
            uint64_t v21 = v12;
            unint64_t v15 = &v12[6 * v14];
            v15[4] = v20;
            v15[5] = v6;
            uint64_t v2 = v18;
            v15[6] = v19;
            v15[7] = v7;
            v15[8] = v8;
            v15[9] = v10;
            goto LABEL_5;
          }
        }
        else if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_8;
        }
        swift_bridgeObjectRelease();
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v5 += 6;
        if (!--v4)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v17 = v21;
          goto LABEL_19;
        }
      }
    }
    uint64_t v17 = (void *)MEMORY[0x263F8EE78];
LABEL_19:
    *(void *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    CAFUITileDataSource.reloadView()();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void partial apply for closure #1 in CAFUITileDataSource.collectionView.didset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in CAFUITileDataSource.collectionView.didset(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_24950A00C()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in CAFUITileDataSource.updated(setting:)()
{
  closure #1 in CAFUITileDataSource.updated(setting:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  closure #1 in CAFUITileDataSource.updated(setting:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_24950A050()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_24950A080()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_24950A0D4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_24950A0E4()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in CAFUITileDataSource.reloadView()()
{
  return closure #1 in CAFUITileDataSource.reloadView()(v0);
}

uint64_t _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24950A16C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in CAFUITileDataSource.reloadView()()
{
  return closure #1 in closure #1 in CAFUITileDataSource.reloadView()(*(void **)(v0 + 16));
}

uint64_t sub_24950A1AC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id partial apply for closure #2 in closure #1 in closure #1 in CAFUITileDataSource.reloadView()(int a1)
{
  return closure #2 in closure #1 in closure #1 in CAFUITileDataSource.reloadView()(a1, *(id *)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Bool __swiftcall CAFUIHeaderFooterTableView._shouldShowHeadersAndFooters()()
{
  return 1;
}

id CAFUIHeaderFooterTableView.__allocating_init(frame:style:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  id v11 = objc_allocWithZone(v5);

  return objc_msgSend(v11, sel_initWithFrame_style_, a1, a2, a3, a4, a5);
}

id CAFUIHeaderFooterTableView.init(frame:style:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for CAFUIHeaderFooterTableView();
  return objc_msgSendSuper2(&v12, sel_initWithFrame_style_, a1, a2, a3, a4, a5);
}

uint64_t type metadata accessor for CAFUIHeaderFooterTableView()
{
  return self;
}

id CAFUIHeaderFooterTableView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for CAFUIHeaderFooterTableView();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id CAFUIHeaderFooterTableView.__deallocating_deinit()
{
  return CAFUIHeaderFooterTableView.__deallocating_deinit(type metadata accessor for CAFUIHeaderFooterTableView);
}

id CAFUITableViewController.tableView.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView);
}

id CAFUITableViewController.__allocating_init(style:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = objc_allocWithZone((Class)type metadata accessor for CAFUIHeaderFooterTableView());
  objc_super v5 = (char *)v3;
  id v6 = objc_msgSend(v4, sel_initWithFrame_style_, a1, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v5[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView] = v6;

  v8.receiver = v5;
  v8.super_class = v1;
  return objc_msgSendSuper2(&v8, sel_initWithNibName_bundle_, 0, 0);
}

id CAFUITableViewController.init(style:)(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)type metadata accessor for CAFUIHeaderFooterTableView());
  id v4 = v1;
  id v5 = objc_msgSend(v3, sel_initWithFrame_style_, a1, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v4[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView] = v5;

  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for CAFUITableViewController();
  return objc_msgSendSuper2(&v7, sel_initWithNibName_bundle_, 0, 0);
}

uint64_t type metadata accessor for CAFUITableViewController()
{
  return self;
}

Swift::Void __swiftcall CAFUITableViewController.viewDidLoad()()
{
  v37.receiver = v0;
  v37.super_class = (Class)type metadata accessor for CAFUITableViewController();
  objc_msgSendSuper2(&v37, sel_viewDidLoad);
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView];
  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_tableBackgroundColor);
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  id v4 = v3;
  objc_msgSend(v1, sel_setBackgroundColor_, v3);

  objc_msgSend(v1, sel__setHeaderAndFooterViewsFloat_, 0);
  id v5 = objc_msgSend(v0, sel_view);
  if (!v5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  id v6 = v5;
  id v7 = objc_msgSend(v2, sel_tableBackgroundColor);
  if (!v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  objc_super v8 = v7;
  objc_msgSend(v6, sel_setBackgroundColor_, v7);

  id v9 = objc_msgSend(v0, sel_view);
  if (!v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v10 = v9;
  objc_msgSend(v9, sel_addSubview_, v1);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2495300E0;
  id v12 = objc_msgSend(v1, sel_topAnchor);
  id v13 = objc_msgSend(v0, sel_view);
  if (!v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v14 = v13;
  id v15 = objc_msgSend(v13, sel_topAnchor);

  id v16 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v15);
  *(void *)(v11 + 32) = v16;
  id v17 = objc_msgSend(v1, sel_bottomAnchor);
  id v18 = objc_msgSend(v0, sel_view);
  if (!v18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v19 = v18;
  id v20 = objc_msgSend(v18, sel_safeAreaLayoutGuide);

  id v21 = objc_msgSend(v20, sel_bottomAnchor);
  id v22 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v21);

  *(void *)(v11 + 40) = v22;
  id v23 = objc_msgSend(v1, sel_leadingAnchor);
  id v24 = objc_msgSend(v0, sel_view);
  if (!v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  Swift::String v25 = v24;
  id v26 = objc_msgSend(v24, sel_safeAreaLayoutGuide);

  id v27 = objc_msgSend(v26, sel_leadingAnchor);
  id v28 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v27);

  *(void *)(v11 + 48) = v28;
  id v29 = objc_msgSend(v1, sel_trailingAnchor);
  id v30 = objc_msgSend(v0, sel_view);
  if (v30)
  {
    unint64_t v31 = v30;
    int64_t v32 = self;
    id v33 = objc_msgSend(v31, sel_safeAreaLayoutGuide);

    id v34 = objc_msgSend(v33, sel_trailingAnchor);
    id v35 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v34);

    *(void *)(v11 + 56) = v35;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v32, sel_activateConstraints_, isa);

    return;
  }
LABEL_17:
  __break(1u);
}

Swift::Void __swiftcall CAFUITableViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v3 - 8);
  id v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v12 = (char *)&v19 - v11;
  id v13 = (objc_class *)type metadata accessor for CAFUITableViewController();
  v19.receiver = v1;
  v19.super_class = v13;
  objc_msgSendSuper2(&v19, sel_viewWillAppear_, a1);
  unint64_t v14 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView];
  id v15 = objc_msgSend(v14, sel_indexPathForSelectedRow);
  if (v15)
  {
    id v16 = v15;
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

    id v17 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v17(v5, v10, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v17(v12, v5, v6);
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v14, sel_deselectRowAtIndexPath_animated_, isa, a1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  outlined destroy of IndexPath?((uint64_t)v5);
}

id CAFUITableViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CAFUITableViewController.init(coder:)()
{
}

id CAFUITableViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x24C59F610]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CAFUITableViewController.init(nibName:bundle:)()
{
}

id CAFUITableViewController.__deallocating_deinit()
{
  return CAFUIHeaderFooterTableView.__deallocating_deinit(type metadata accessor for CAFUITableViewController);
}

id CAFUIHeaderFooterTableView.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    uint64_t v6 = __CocoaSet.endIndex.getter();
    char v8 = MEMORY[0x24C59FB10](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      outlined consume of Set<CAFAutomakerSetting>.Index._Variant(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v3, v5, v2 != 0, a1);
    uint64_t v9 = v13;
    outlined consume of Set<CAFAutomakerSetting>.Index._Variant(v3, v5, v2 != 0);
    return v9;
  }
  uint64_t result = specialized _NativeSet.startIndex.getter(a1);
  if ((v12 & 1) == 0)
  {
    uint64_t v5 = v11;
    if (*(_DWORD *)(a1 + 36) == v11)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized Sequence.first(where:)(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X8>)
{
  id v34 = a3;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 16);
  id v35 = a2;
  uint64_t v33 = a1;
  if (v12)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    unint64_t v14 = (void **)&a2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
    swift_bridgeObjectRetain();
    uint64_t v40 = v14;
    swift_beginAccess();
    id v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v43 = v6 + 16;
    uint64_t v44 = v15;
    uint64_t v16 = *(void *)(v6 + 72);
    uint64_t v41 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    objc_super v37 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v38 = v16;
    uint64_t v45 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    unint64_t v32 = (v6 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    unint64_t v39 = v8;
    v15(v11, v13, v5);
    while (1)
    {
      id v17 = *v45;
      (*v45)((uint64_t)v11, 0, 1, v5);
      if ((*v42)(v11, 1, v5) == 1) {
        goto LABEL_26;
      }
      uint64_t v36 = *v41;
      v36(v8, v11, v5);
      uint64_t v18 = IndexPath.section.getter();
      objc_super v19 = (char *)*v40;
      id v20 = (char *)*v40 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems;
      swift_beginAccess();
      if (*v20 >> 62)
      {
        id v28 = v19;
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v21 = *(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v22 = v19;
      }
      unint64_t v23 = *(void *)&v19[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings];
      unint64_t v24 = v23 >> 62;
      if (v21)
      {
        if (v24)
        {
          swift_bridgeObjectRetain();
          uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();

          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v25 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        char v8 = v39;
        uint64_t v26 = 1;
        if (v25) {
          uint64_t v26 = 2;
        }
        if (v18 >= v26)
        {
LABEL_27:
          swift_bridgeObjectRelease();
          id v30 = v34;
          v36(v34, v8, v5);
          v17((uint64_t)v30, 0, 1, v5);
          goto LABEL_28;
        }
      }
      else
      {
        if (v24)
        {
          swift_bridgeObjectRetain();
          uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();

          swift_bridgeObjectRelease();
          char v8 = v39;
          if (!v29)
          {
LABEL_3:
            if ((v18 & 0x8000000000000000) == 0) {
              goto LABEL_27;
            }
            goto LABEL_4;
          }
        }
        else
        {
          uint64_t v27 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);

          char v8 = v39;
          if (!v27) {
            goto LABEL_3;
          }
        }
        if (v18 >= 1) {
          goto LABEL_27;
        }
      }
LABEL_4:
      (*v37)(v8, v5);
      v13 += v38;
      if (!--v12) {
        goto LABEL_25;
      }
      v44(v11, v13, v5);
    }
  }
  id v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  unint64_t v32 = (v6 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  swift_bridgeObjectRetain();
LABEL_25:
  v17((uint64_t)v11, 1, 1, v5);
LABEL_26:
  swift_bridgeObjectRelease();
  v17((uint64_t)v34, 1, 1, v5);
LABEL_28:
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t CAFUIDataListItem.__allocating_init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, __int16 a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19 = swift_allocObject();
  CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, v21, a10, (unsigned __int16)(a10 & 0x1FF) >> 8, a11, a12, a13, a14);
  return v19;
}

uint64_t CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v16 + 104) = 0;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(void *)(v16 + 64) = 0;
  *(_OWORD *)(v16 + 16) = 0u;
  swift_beginAccess();
  id v20 = *(void **)(v16 + 16);
  *(void *)(v16 + 16) = a1;

  swift_beginAccess();
  *(void *)(v16 + 24) = a2;
  *(void *)(v16 + 32) = a3;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v16 + 40) = a4;
  *(void *)(v16 + 48) = a5;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v16 + 56) = a6;
  *(void *)(v16 + 64) = a7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v16 + 72) = a8;
  *(void *)(v16 + 80) = a15;
  *(void *)(v16 + 88) = a16;
  swift_beginAccess();
  char v21 = *(void **)(v16 + 104);
  *(void *)(v16 + 104) = a14;

  *(unsigned char *)(v16 + 96) = a13;
  *(unsigned char *)(v16 + 73) = a9;
  *(unsigned char *)(v16 + 74) = a11;
  *(unsigned char *)(v16 + 75) = a12 & 1;
  return v16;
}

void key path setter for CAFUIDataListItem.symbol : CAFUIDataListItem(void **a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;
  id v5 = v2;
}

void *CAFUIDataListItem.symbol.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t key path setter for CAFUIDataListItem.text : CAFUIDataListItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 24) = v3;
  *(void *)(v4 + 32) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t CAFUIDataListItem.text.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for CAFUIDataListItem.secondaryText : CAFUIDataListItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t CAFUIDataListItem.secondaryText.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for CAFUIDataListItem.badgeText : CAFUIDataListItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 56) = v3;
  *(void *)(v4 + 64) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t CAFUIDataListItem.badgeText.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CAFUIDataListItem.showChevron.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t CAFUIDataListItem.enabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t CAFUIDataListItem.settingsCategory.getter()
{
  return *(unsigned __int8 *)(v0 + 74) | (*(unsigned __int8 *)(v0 + 75) << 8);
}

uint64_t key path setter for CAFUIDataListItem.selectionAction : CAFUIDataListItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = *a2;
  swift_beginAccess();
  *(void *)(v6 + 80) = partial apply for thunk for @escaping @callee_guaranteed () -> (@out CAFUICellSelectionAction);
  *(void *)(v6 + 88) = v5;
  swift_retain();
  return swift_release();
}

uint64_t CAFUIDataListItem.selectionAction.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 80);
  swift_retain();
  return v1;
}

uint64_t CAFUIDataListItem.limitedUI.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 96);
}

void key path setter for CAFUIDataListItem.limitedUIImage : CAFUIDataListItem(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 104);
  *(void *)(v3 + 104) = v2;
  id v5 = v2;
}

void *CAFUIDataListItem.limitedUIImage.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 104);
  id v2 = v1;
  return v1;
}

uint64_t CAFUIDataListItem.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v0;
}

uint64_t CAFUIDataListItem.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0228](v0, 112, 7);
}

void *CAFUITileViewController.collapseCategoryThreshold.unsafeMutableAddressor()
{
  return &static CAFUITileViewController.collapseCategoryThreshold;
}

uint64_t static CAFUITileViewController.collapseCategoryThreshold.getter()
{
  return 9999;
}

uint64_t CAFUITileViewController.settingsCache.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CAFUISettingsCache(v1 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache, a1);
}

uint64_t outlined init with copy of CAFUISettingsCache(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t CAFUITileViewController.requestContentManager.getter()
{
  return swift_retain();
}

void key path setter for CAFUITileViewController.dataSource : CAFUITileViewController(void **a1, void *a2)
{
  id v2 = *a1;
  uint64_t v3 = (void **)(*a2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  id v5 = v2;
}

id CAFUITileViewController.dataSource.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  id v2 = *v1;

  return v2;
}

id CAFUITileViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

char *CAFUITileViewController.__allocating_init(carSession:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(void *a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  id v17 = objc_allocWithZone(v8);
  return CAFUITileViewController.init(carSession:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

char *CAFUITileViewController.init(carSession:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(void *a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v16 = &v8[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_presentedPTIdentifier];
  *uint64_t v16 = 0;
  v16[1] = 0;
  id v17 = &v8[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath];
  uint64_t v18 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v8[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_limiting] = 0;
  uint64_t v19 = v8;
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v20 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v20 = MEMORY[0x263F8EE88];
  }
  *(void *)&v19[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_cancellables] = v20;
  v19[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_punchThroughState] = 0;
  *(void *)&v19[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_carSession] = a1;
  char v21 = &v19[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
  long long v23 = *(_OWORD *)(a5 + 16);
  long long v22 = *(_OWORD *)(a5 + 32);
  long long v24 = *(_OWORD *)a5;
  *((void *)v21 + 6) = *(void *)(a5 + 48);
  *((_OWORD *)v21 + 1) = v23;
  *((_OWORD *)v21 + 2) = v22;
  *(_OWORD *)char v21 = v24;
  *(void *)&v19[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager] = a6;
  *(void *)&v19[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager] = a7;
  id v25 = objc_allocWithZone((Class)type metadata accessor for CAFUITileDataSource());
  id v51 = a1;
  outlined retain of CAFUISettingsCache(a5);
  swift_retain();
  swift_retain();
  *(void *)&v19[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource] = CAFUITileDataSource.init(prominentCategories:listItems:settingsSections:settingsCache:)(a2, a3, a4, a5);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_2495300D0;
  *(void *)(v26 + 32) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 2);
  uint64_t v54 = v26;
  specialized Array._endMutation()();
  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82938]), sel_init);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  id v28 = v27;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v28, sel_setAllowedPressTypes_, isa);

  *(void *)&v19[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_nudgeLongGestureRecognizer] = v28;
  id v30 = objc_allocWithZone(MEMORY[0x263F82CB0]);
  id v31 = v28;
  id v32 = objc_msgSend(v30, sel_init);
  Class v33 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v32, sel_setAllowedPressTypes_, v33);

  objc_msgSend(v32, sel_requireGestureRecognizerToFail_, v31);
  *(void *)&v19[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_nudgeGestureRecognizer] = v32;
  if (a8)
  {
    id v34 = objc_allocWithZone(MEMORY[0x263F315B8]);
    id v35 = v32;
    id v36 = objc_msgSend(v34, sel_init);
  }
  else
  {
    id v37 = v32;
    id v36 = 0;
  }
  *(void *)&v19[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_volumeNotificationAssertion] = v36;

  v53.receiver = v19;
  v53.super_class = (Class)type metadata accessor for CAFUITileViewController();
  uint64_t v38 = (char *)objc_msgSendSuper2(&v53, sel_initWithNibName_bundle_, 0, 0);
  unint64_t v39 = *(void **)&v38[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_carSession];
  uint64_t v40 = v38;
  id v41 = objc_msgSend(v39, sel_limitUserInterfaces);
  if (v41 && (uint64_t v42 = v41, v43 = objc_msgSend(v41, sel_BOOLValue), v42, v43))
  {
    id v44 = objc_msgSend(v39, sel_configuration);
    unint64_t v45 = (unint64_t)objc_msgSend(v44, sel_limitableUserInterfaces);

    uint64_t v46 = (v45 >> 5) & 1;
  }
  else
  {
    LOBYTE(v46) = 0;
  }
  v40[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_limiting] = v46;
  id v47 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v47, sel_addObserver_selector_name_object_, v40, sel_updateForLimitUIChanged, *MEMORY[0x263F30DA0], 0);

  objc_msgSend(v32, sel_setDelegate_, v40);
  id v48 = v31;
  unint64_t v49 = v40;
  objc_msgSend(v48, sel_setDelegate_, v49);

  swift_release();
  swift_release();
  return v49;
}

Swift::Void __swiftcall CAFUITileViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  v64.receiver = v0;
  v64.super_class = (Class)type metadata accessor for CAFUITileViewController();
  objc_msgSendSuper2(&v64, sel_viewDidLoad);
  CAFUITileViewController.setupRequestContentManager()();
  id v2 = (id *)&v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
  swift_beginAccess();
  uint64_t v3 = *(void *)((char *)*v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections);
  int64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v63 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v6 = 72;
    uint64_t v5 = v63;
    do
    {
      uint64_t v7 = *(void *)(v3 + v6);
      unint64_t v8 = *(void *)(v63 + 16);
      unint64_t v9 = *(void *)(v63 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v8 + 1, 1);
      }
      *(void *)(v63 + 16) = v8 + 1;
      *(void *)(v63 + 8 * v8 + 32) = v7;
      v6 += 48;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  specialized Set.init<A>(_:)(v5);
  uint64_t v11 = v10;
  uint64_t v12 = v1;
  specialized Sequence.forEach(_:)(v11, (uint64_t)v12);
  swift_bridgeObjectRelease();

  uint64_t v13 = *(void **)&v12[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_nudgeGestureRecognizer];
  objc_msgSend(v13, sel_addTarget_action_, v12, sel_nudgeGestureRecognized_);
  unint64_t v14 = *(void **)&v12[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_nudgeLongGestureRecognizer];
  objc_msgSend(v14, sel_addTarget_action_, v12, sel_nudgeGestureRecognized_);
  id v15 = objc_msgSend(*(id *)&v12[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_carSession], sel_configuration);
  char v16 = objc_msgSend(v15, sel_rightHandDrive);

  id v17 = *v2;
  id v18 = specialized static CAFUITileViewController.compositionalLayout(isRHD:dataSource:)(v16);

  id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82528]), sel_initWithFrame_collectionViewLayout_, v18, 0.0, 0.0, 0.0, 0.0);
  id v20 = v19;
  char v21 = (void *)MEMORY[0x24C59F610](0xD000000000000017, 0x80000002495359B0);
  objc_msgSend(v20, sel_setAccessibilityIdentifier_, v21);

  objc_msgSend(v20, sel_setContentInset_, 2.0, 0.0, 16.0, 0.0);
  objc_msgSend(v20, sel_setDelegate_, v12);
  objc_msgSend(v20, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  long long v22 = self;
  id v23 = v20;
  id v24 = objc_msgSend(v22, sel_tableBackgroundColor);
  if (!v24)
  {
    __break(1u);
    goto LABEL_17;
  }
  id v25 = v24;
  objc_msgSend(v23, sel_setBackgroundColor_, v24);

  objc_msgSend(v23, sel_addGestureRecognizer_, v13);
  objc_msgSend(v23, sel_addGestureRecognizer_, v14);
  id v26 = objc_msgSend(v12, sel_view);
  if (!v26)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v27 = v26;
  id v28 = objc_msgSend(v22, sel_tableBackgroundColor);
  if (!v28)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v29 = v28;
  objc_msgSend(v27, sel_setBackgroundColor_, v28);

  id v30 = objc_msgSend(v12, sel_view);
  if (!v30)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v31 = v30;
  objc_msgSend(v30, sel_addSubview_, v23);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_2495300E0;
  id v33 = objc_msgSend(v23, sel_topAnchor);
  id v34 = objc_msgSend(v12, sel_view);
  if (!v34)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v35 = v34;
  id v36 = objc_msgSend(v34, sel_safeAreaLayoutGuide);

  id v37 = objc_msgSend(v36, sel_topAnchor);
  id v38 = objc_msgSend(v33, sel_constraintEqualToAnchor_, v37);

  *(void *)(v32 + 32) = v38;
  id v39 = objc_msgSend(v23, sel_bottomAnchor);
  id v40 = objc_msgSend(v12, sel_view);
  if (!v40)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v41 = v40;
  id v42 = objc_msgSend(v40, sel_safeAreaLayoutGuide);

  id v43 = objc_msgSend(v42, sel_bottomAnchor);
  id v44 = objc_msgSend(v39, sel_constraintEqualToAnchor_, v43);

  *(void *)(v32 + 40) = v44;
  id v45 = objc_msgSend(v23, sel_leadingAnchor);
  id v46 = objc_msgSend(v12, sel_view);
  if (!v46)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v47 = v46;
  id v48 = objc_msgSend(v46, sel_safeAreaLayoutGuide);

  id v49 = objc_msgSend(v48, sel_leadingAnchor);
  id v50 = objc_msgSend(v45, sel_constraintEqualToAnchor_, v49);

  *(void *)(v32 + 48) = v50;
  id v51 = objc_msgSend(v23, sel_trailingAnchor);
  id v52 = objc_msgSend(v12, sel_view);
  if (v52)
  {
    objc_super v53 = v52;
    uint64_t v54 = self;
    id v55 = objc_msgSend(v53, sel_safeAreaLayoutGuide);

    id v56 = objc_msgSend(v55, sel_trailingAnchor);
    id v57 = objc_msgSend(v51, sel_constraintEqualToAnchor_, v56);

    *(void *)(v32 + 56) = v57;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v54, sel_activateConstraints_, isa);

    id v59 = *v2;
    unint64_t v60 = *(void **)((char *)*v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
    *(void *)((char *)*v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView) = v23;
    id v61 = v23;
    id v62 = v59;

    CAFUITileDataSource.collectionView.didset();
    return;
  }
LABEL_23:
  __break(1u);
}

Swift::Void __swiftcall CAFUITileViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v34 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = (objc_class *)type metadata accessor for CAFUITileViewController();
  v35.receiver = v1;
  v35.super_class = v9;
  objc_msgSendSuper2(&v35, sel_viewWillAppear_, a1);
  uint64_t v10 = &v1[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
  swift_beginAccess();
  uint64_t v11 = *(void **)(*(void *)v10 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v11)
  {
    id v12 = v11;
    id v13 = objc_msgSend(v12, sel_indexPathsForSelectedItems);
    if (v13)
    {
      unint64_t v14 = v13;
      uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v16 = *(void *)(v15 + 16);
      if (v16)
      {
        id v33 = v12;
        _OWORD v26[2] = v15;
        id v27 = v1;
        id v18 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
        uint64_t v17 = v4 + 16;
        unint64_t v19 = v15 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
        uint64_t v30 = *(void *)(v17 + 56);
        id v31 = v18;
        unint64_t v20 = v17 + 40;
        char v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 32);
        uint64_t v29 = (void (**)(char *, char *, uint64_t))(v17 + 16);
        uint64_t v32 = v17;
        long long v22 = (void (**)(char *, uint64_t))(v17 - 8);
        v26[1] = v20 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        BOOL v28 = a1;
        id v23 = v34;
        while (1)
        {
          v31(v8, v19, v3);
          id v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v20;
          (*(void (**)(char *, void, uint64_t, uint64_t))v20)(v8, 0, 1, v3);
          if ((*v21)(v8, 1, v3) == 1) {
            break;
          }
          (*v29)(v23, v8, v3);
          Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
          (*v22)(v23, v3);
          objc_msgSend(v33, sel_deselectItemAtIndexPath_animated_, isa, v28);

          v19 += v30;
          if (!--v16)
          {
            uint64_t v1 = v27;
            id v12 = v33;
            goto LABEL_10;
          }
        }

        swift_bridgeObjectRelease();
        uint64_t v1 = v27;
      }
      else
      {
        id v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_10:
        v24(v8, 1, 1, v3);

        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
  }
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_volumeNotificationAssertion], sel_suspendNotifications);
}

Swift::Void __swiftcall CAFUITileViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for CAFUITileViewController();
  objc_msgSendSuper2(&v3, sel_viewWillDisappear_, a1);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_volumeNotificationAssertion], sel_cancelSuspension);
}

Swift::Bool __swiftcall CAFUITileViewController.collectionView(_:shouldUpdateFocusIn:)(UICollectionView *_, UICollectionViewFocusUpdateContext shouldUpdateFocusIn)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v6, (uint64_t)v5, &demangling cache variable for type metadata for IndexPath?);
  uint64_t v7 = type metadata accessor for IndexPath();
  LOBYTE(v6) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1;
  outlined destroy of UIContentConfiguration?((uint64_t)v5, &demangling cache variable for type metadata for IndexPath?);
  return v6;
}

Swift::Void __swiftcall CAFUITileViewController.setListItems(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = (unint64_t *)((char *)*v3 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  unint64_t v6 = *v5;
  unint64_t *v5 = (unint64_t)a1._rawValue;
  id v7 = v4;
  swift_bridgeObjectRetain();
  CAFUITileDataSource.listItems.didset(v6);

  swift_bridgeObjectRelease();
}

unint64_t CAFUITileViewController.listItem(at:)()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  id v2 = *v1;
  unint64_t v3 = CAFUITileDataSource.listItem(at:)();

  return v3;
}

uint64_t CAFUITileViewController.validate(indexPath:)()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  id v2 = *v1;
  char v3 = CAFUITileDataSource.validate(indexPath:)();

  return v3 & 1;
}

Swift::Void __swiftcall CAFUITileViewController.reloadListItem(item:)(Swift::Int item)
{
  Swift::Int v34 = item;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void **)(v1 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  uint64_t v11 = (char *)*v10;
  id v12 = *(void **)((char *)*v10 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (!v12) {
    return;
  }
  uint64_t v32 = v7;
  uint64_t v33 = v3;
  id v13 = &v11[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems];
  swift_beginAccess();
  unint64_t v14 = *(void *)v13;
  if (v14 >> 62)
  {
    id v29 = v12;
    uint64_t v30 = v11;
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_4;
    }
LABEL_12:

    return;
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v16 = v12;
  uint64_t v17 = v11;
  if (!v15) {
    goto LABEL_12;
  }
LABEL_4:
  unint64_t v18 = *(void *)&v11[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings];
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  BOOL v20 = v19 != 0;
  char v21 = (unint64_t *)((char *)*v10 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  unint64_t v22 = *v21;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  Swift::Int v24 = v34;
  if (v23 <= v34)
  {
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    id v25 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v26 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v27 = (void *)swift_allocObject();
    v27[2] = v26;
    v27[3] = v24;
    v27[4] = v20;
    aBlock[4] = partial apply for closure #1 in CAFUITileViewController.reloadListItem(item:);
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_6;
    BOOL v28 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x24C59F8E0](0, v9, v5, v28);
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v6);
  }
}

uint64_t closure #1 in CAFUITileViewController.reloadListItem(item:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = self;
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #1 in closure #1 in CAFUITileViewController.reloadListItem(item:);
  *(void *)(v8 + 24) = v7;
  v11[4] = _sIg_Ieg_TRTA_0;
  v11[5] = v8;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed () -> ();
  void v11[3] = &block_descriptor_113;
  uint64_t v9 = _Block_copy(v11);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend((id)v6, sel_performWithoutAnimation_, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

void closure #1 in closure #1 in CAFUITileViewController.reloadListItem(item:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x24C5A0810](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
    type metadata accessor for IndexPath();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_2495305E0;
    MEMORY[0x24C59E990](a2, a3);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_reconfigureItemsAtIndexPaths_, isa);
  }
}

Swift::Void __swiftcall CAFUITileViewController._wheelChanged(with:)(UIEvent_optional with)
{
  uint64_t v2 = v1;
  Class isa = with.value.super.isa;
  uint64_t v4 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v11 - 8);
  id v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for IndexPath();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!isa)
  {
    __break(1u);
    return;
  }
  if ([(objc_class *)isa type] != (id)7)
  {
    BOOL v20 = (objc_class *)type metadata accessor for CAFUITileViewController();
    v75.receiver = v2;
    v75.super_class = v20;
    objc_msgSendSuper2(&v75, sel__wheelChangedWithEvent_, isa);
    return;
  }
  uint64_t v70 = v5;
  uint64_t v18 = (uint64_t)&v2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath];
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v18, (uint64_t)v13, &demangling cache variable for type metadata for IndexPath?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v13, &demangling cache variable for type metadata for IndexPath?);
    uint64_t v19 = (objc_class *)type metadata accessor for CAFUITileViewController();
    v74.receiver = v2;
    v74.super_class = v19;
    objc_msgSendSuper2(&v74, sel__wheelChangedWithEvent_, isa);
    return;
  }
  uint64_t v68 = v4;
  uint64_t v69 = v15;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
  uint64_t v21 = IndexPath.section.getter();
  unint64_t v22 = (id *)&v2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
  swift_beginAccess();
  unint64_t v23 = *(void *)((char *)*v22 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v23 >> 62)
  {
    uint64_t v67 = (uint64_t)*v22;
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
    if (!v32) {
      goto LABEL_9;
    }
  }
  else if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  if (!v21)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
    uint64_t v31 = (objc_class *)type metadata accessor for CAFUITileViewController();
    v71.receiver = v2;
    v71.super_class = v31;
    objc_msgSendSuper2(&v71, sel__wheelChangedWithEvent_, isa);
    return;
  }
LABEL_9:
  uint64_t v67 = IndexPath.section.getter();
  Swift::Int v24 = (char *)*v22;
  id v25 = (char *)*v22 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems;
  swift_beginAccess();
  if (!(*v25 >> 62))
  {
    uint64_t v26 = *(void *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v27 = v24;
    BOOL v28 = &demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>;
    if (v26) {
      goto LABEL_11;
    }
LABEL_18:

    goto LABEL_19;
  }
  uint64_t v33 = v24;
  swift_bridgeObjectRetain();
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  BOOL v28 = &demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>;
  if (!v34) {
    goto LABEL_18;
  }
LABEL_11:
  unint64_t v29 = *(void *)&v24[v28[94]];
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v67 == (v30 != 0)) {
    goto LABEL_14;
  }
LABEL_19:
  id v35 = *v22;
  id v36 = (void *)CAFUITileDataSource.setting(at:)((unint64_t)v17);

  if (!v36)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
    id v41 = (objc_class *)type metadata accessor for CAFUITileViewController();
    v73.receiver = v2;
    v73.super_class = v41;
    objc_msgSendSuper2(&v73, sel__wheelChangedWithEvent_, isa);
    return;
  }
  swift_getObjectType();
  uint64_t v37 = swift_conformsToProtocol2();
  if (v37) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0;
  }
  if (v37) {
    id v39 = v36;
  }
  else {
    id v39 = 0;
  }
  if (!v39)
  {

    goto LABEL_30;
  }
  id v40 = (char *)[(objc_class *)isa subtype];
  if ((unint64_t)(v40 - 202) < 4)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);

    return;
  }
  if (v40 == (char *)201)
  {
    os_log_type_t v44 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v44, 0xD000000000000023, 0x8000000249535A10, 0xD000000000000014, 0x80000002495359F0);
    uint64_t v43 = 1;
LABEL_35:
    id v45 = objc_msgSend(self, sel_sharedApplication);
    id v46 = objc_msgSend(v45, sel_userInterfaceLayoutDirection);

    uint64_t ObjectType = swift_getObjectType();
    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 80))(ObjectType, v38);
    if (!v48) {
      goto LABEL_28;
    }
    id v49 = (void *)v48;
    uint64_t v50 = v48 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
    swift_beginAccess();
    outlined init with copy of UIListContentConfiguration?(v50, (uint64_t)v10, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    uint64_t v51 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v10, 1, v68))
    {
      outlined destroy of UIContentConfiguration?((uint64_t)v10, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
LABEL_38:

LABEL_39:
      (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
      return;
    }
    outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v10, (uint64_t)v7);
    id v54 = v49;
    outlined destroy of UIContentConfiguration?((uint64_t)v10, &demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    id v55 = *(void **)&v7[*(int *)(v51 + 20)];
    id v56 = v55;
    outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v7);

    if (!v55) {
      goto LABEL_38;
    }
    type metadata accessor for CAFUINumericInputView();
    uint64_t v57 = swift_dynamicCastClass();
    if (!v57)
    {

      goto LABEL_38;
    }
    uint64_t v58 = v57 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config;
    double v59 = *(double *)(v57 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config);
    if (v46 == (id)v43)
    {
      double v60 = *(double *)(v58 + 16);
      if (v59 < v60)
      {
        double v61 = v59 + *(double *)(v58 + 24);
        if (v61 >= v60) {
          double v61 = *(double *)(v58 + 16);
        }
LABEL_52:
        *(double *)uint64_t v58 = v61;
        CAFUINumericInputView.updateButtons()();
        uint64_t v63 = *(void (**)(uint64_t, double))(v58 + 96);
        double v64 = *(double *)v58;
        uint64_t v65 = swift_retain();
        v63(v65, v64);

        swift_release();
        goto LABEL_39;
      }
    }
    else
    {
      double v62 = *(double *)(v58 + 8);
      if (v62 < v59)
      {
        double v61 = v59 - *(double *)(v58 + 24);
        if (v62 > v61) {
          double v61 = *(double *)(v58 + 8);
        }
        goto LABEL_52;
      }
    }

    goto LABEL_39;
  }
  if (v40 == (char *)200)
  {
    os_log_type_t v42 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v42, 0xD00000000000001BLL, 0x8000000249535A40, 0xD000000000000014, 0x80000002495359F0);
    uint64_t v43 = 0;
    goto LABEL_35;
  }
  os_log_type_t v52 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v52, 0xD00000000000001FLL, 0x80000002495359D0, 0xD000000000000014, 0x80000002495359F0);

  (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
  objc_super v53 = (objc_class *)type metadata accessor for CAFUITileViewController();
  v72.receiver = v2;
  v72.super_class = v53;
  objc_msgSendSuper2(&v72, sel__wheelChangedWithEvent_, isa);
}

Swift::Bool __swiftcall CAFUITileViewController.gestureRecognizerShouldBegin(_:)(UIGestureRecognizer a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) == 0 && (static NSObject.== infix(_:_:)() & 1) == 0) {
    return 1;
  }
  uint64_t v5 = v1 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v5, (uint64_t)v4, &demangling cache variable for type metadata for IndexPath?);
  uint64_t v6 = type metadata accessor for IndexPath();
  Swift::Bool v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) != 1;
  outlined destroy of UIContentConfiguration?((uint64_t)v4, &demangling cache variable for type metadata for IndexPath?);
  return v7;
}

Swift::Bool __swiftcall CAFUITileViewController.gestureRecognizer(_:shouldBeRequiredToFailBy:)(UIGestureRecognizer _, UIGestureRecognizer shouldBeRequiredToFailBy)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v5 - 8);
  Swift::Bool v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) == 0 && (static NSObject.== infix(_:_:)() & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v8 = v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v8, (uint64_t)v7, &demangling cache variable for type metadata for IndexPath?);
  uint64_t v9 = type metadata accessor for IndexPath();
  LODWORD(v8) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9);
  outlined destroy of UIContentConfiguration?((uint64_t)v7, &demangling cache variable for type metadata for IndexPath?);
  if (v8 == 1) {
    goto LABEL_7;
  }
  id v10 = [(objc_class *)_.super.isa view];
  if (v10
    && (uint64_t v11 = v10,
        id v12 = objc_msgSend(v10, sel__focusGesturesForFailureRequirements),
        v11,
        v12))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIGestureRecognizer);
    lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIGestureRecognizer and conformance NSObject, &lazy cache variable for type metadata for UIGestureRecognizer);
    uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    char v14 = specialized Set.contains(_:)(shouldBeRequiredToFailBy.super.isa, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_7:
    char v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIGestureRecognizer);
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if ((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)();

        if (v12) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }
      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  char v12 = 1;
  return v12 & 1;
}

uint64_t closure #1 in static CAFUITileViewController.compositionalLayout(isRHD:dataSource:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v14 = type metadata accessor for UICollectionLayoutListConfiguration.FooterMode();
  uint64_t v65 = *(void *)(v14 - 8);
  uint64_t v66 = v14;
  MEMORY[0x270FA5388](v14);
  double v64 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode();
  uint64_t v62 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v63 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UICollectionLayoutListConfiguration();
  uint64_t v67 = *(void *)(v22 - 8);
  uint64_t v68 = v22;
  MEMORY[0x270FA5388](v22);
  Swift::Int v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  id v25 = (char *)MEMORY[0x24C5A0810](a3 + 16);
  if (!v25) {
    return 0;
  }
  id v69 = a2;
  uint64_t v70 = v25;
  uint64_t v26 = CAFUITileDataSource.firstSettingsSection.getter();
  id v27 = v70;
  uint64_t v28 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections;
  uint64_t v29 = *(void *)(*(void *)&v70[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections] + 16);
  BOOL v30 = __OFADD__(v26, v29);
  uint64_t v31 = v26 + v29;
  if (v30)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v31 <= a1)
  {

    return 0;
  }
  double v32 = *(double *)(a4 + 24);
  objc_msgSend(objc_msgSend(v69, sel_container), sel_effectiveContentSize);
  double v34 = v33;
  swift_unknownObjectRelease();
  if (a5) {
    double v7 = 45.0;
  }
  else {
    double v7 = 12.0;
  }
  if (a5) {
    double v8 = 12.0;
  }
  else {
    double v8 = 45.0;
  }
  BOOL v35 = v34 < v32;
  if (v34 >= v32) {
    double v5 = 12.0;
  }
  else {
    double v5 = v7;
  }
  if (v35) {
    double v6 = v8;
  }
  else {
    double v6 = 12.0;
  }
  unint64_t v36 = *(void *)&v27[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings];
  if (v36 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v53) {
      goto LABEL_28;
    }
    goto LABEL_18;
  }
  if (!*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_28;
  }
LABEL_18:
  if (!a1)
  {
    objc_msgSend(objc_msgSend(v69, sel_container), sel_contentSize);
    double v38 = v37;
    swift_unknownObjectRelease();
    if (v38 - v8 - v7 >= 496.0) {
      uint64_t v39 = 3;
    }
    else {
      uint64_t v39 = 2;
    }
    id v40 = self;
    id v41 = objc_msgSend(v40, sel_fractionalWidthDimension_, 1.0 / (double)v39);
    id v42 = objc_msgSend(v40, sel_fractionalHeightDimension_, 1.0);
    uint64_t v43 = self;
    id v44 = objc_msgSend(v43, sel_sizeWithWidthDimension_heightDimension_, v41, v42);

    id v45 = objc_msgSend(self, sel_itemWithLayoutSize_, v44);
    id v46 = objc_msgSend(v40, sel_fractionalWidthDimension_, 1.0);
    id v47 = objc_msgSend(v40, sel_estimatedDimension_, 52.0);
    id v48 = objc_msgSend(v43, sel_sizeWithWidthDimension_heightDimension_, v46, v47);

    id v49 = objc_msgSend(self, sel_horizontalGroupWithLayoutSize_repeatingSubitem_count_, v48, v45, v39);
    id v50 = objc_msgSend(self, sel_fixedSpacing_, 8.0);
    objc_msgSend(v49, sel_setInterItemSpacing_, v50);

    id v51 = objc_msgSend(self, sel_sectionWithGroup_, v49);
    objc_msgSend(v51, sel_setInterGroupSpacing_, 8.0);
    objc_msgSend(v51, sel_setContentInsets_, 0.0, v5, 0.0, v6);

    return (uint64_t)v51;
  }
LABEL_28:
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x263F81FC8], v18);
  UICollectionLayoutListConfiguration.init(appearance:)();
  id v54 = objc_msgSend(self, sel_clearColor);
  UICollectionLayoutListConfiguration.backgroundColor.setter();
  uint64_t result = CAFUITileDataSource.firstSettingsSection.getter();
  unint64_t v55 = a1 - result;
  if (!__OFSUB__(a1, result))
  {
    if ((v55 & 0x8000000000000000) != 0) {
      goto LABEL_37;
    }
    uint64_t v56 = *(void *)&v70[v28];
    if (v55 >= *(void *)(v56 + 16)) {
      goto LABEL_37;
    }
    uint64_t v57 = (void *)(v56 + 48 * v55);
    uint64_t v59 = v57[7];
    uint64_t v58 = (void *)v57[8];
    if (v57[5])
    {
      (*(void (**)(char *, void, uint64_t))(v62 + 104))(v63, *MEMORY[0x263F82000], v16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v60 = v58;
      swift_bridgeObjectRetain();
      UICollectionLayoutListConfiguration.headerMode.setter();
      if (v59)
      {
LABEL_33:
        (*(void (**)(char *, void, uint64_t))(v65 + 104))(v64, *MEMORY[0x263F81FF8], v66);
        UICollectionLayoutListConfiguration.footerMode.setter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_36:
        swift_bridgeObjectRelease();

LABEL_37:
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSCollectionLayoutSection);
        id v51 = (id)static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
        objc_msgSend(v51, sel_setInterGroupSpacing_, 2.0);
        objc_msgSend(v51, sel_setContentInsets_, 0.0, v5, 0.0, v6);

        (*(void (**)(char *, uint64_t))(v67 + 8))(v24, v68);
        return (uint64_t)v51;
      }
    }
    else
    {
      id v61 = v58;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v59) {
        goto LABEL_33;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  __break(1u);
  return result;
}

uint64_t CAFUITileViewController.setupRequestContentManager()()
{
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager);
  if (!v2)
  {
    os_log_type_t v3 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v3, 0xD000000000000057, 0x8000000249536500, 0xD00000000000001CLL, 0x8000000249536560);
  }
  char v4 = (void *)(v0 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  uint64_t v5 = *(void *)(*v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_viewSettingSet);
  unint64_t v6 = *(void *)(*v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentSettings);
  unint64_t v27 = MEMORY[0x263F8EE78];
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v5 & 0xC000000000000001) != 0)
    {
LABEL_5:
      uint64_t v8 = __CocoaSet.count.getter();
      BOOL v9 = __OFADD__(v7, v8);
      uint64_t v10 = v7 + v8;
      if (!v9) {
        goto LABEL_6;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v5 & 0xC000000000000001) != 0) {
      goto LABEL_5;
    }
  }
  uint64_t v26 = *(void *)(v5 + 16);
  BOOL v9 = __OFADD__(v7, v26);
  uint64_t v10 = v7 + v26;
  if (v9) {
    goto LABEL_28;
  }
LABEL_6:
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v10, 0);
  specialized Array._endMutation()();
  uint64_t v11 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v11);
  unint64_t v12 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v12);
  unint64_t v1 = v27;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v27 >> 62))
  {
    uint64_t v14 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14) {
      goto LABEL_8;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_29:
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v14) {
    return swift_bridgeObjectRelease();
  }
LABEL_8:
  if (v14 >= 1)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v16 = (id)MEMORY[0x24C59FC50](i, v1);
      }
      else {
        id v16 = *(id *)(v1 + 8 * i + 32);
      }
      uint64_t v17 = v16;
      swift_getObjectType();
      if (swift_conformsToProtocol2()) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      if (v18)
      {
        if (v2)
        {
          uint64_t v19 = (void *)v2[2];
          id v20 = v17;
          id v21 = objc_msgSend(v19, sel_session);
        }
        else
        {
          id v22 = v17;
          id v21 = 0;
        }
        swift_getObjectType();
        specialized CAFListContentRepresentable.session.setter(v21);
      }
      self;
      uint64_t v23 = swift_dynamicCastObjCClass();
      if (v23)
      {
        Swift::Int v24 = (void *)v23;
        swift_beginAccess();
        id v25 = v17;
        swift_retain();
        objc_setAssociatedObject(v24, &static CAFUIListContentAssociatedObjects.CellValue, v2, 0);
        swift_endAccess();

        swift_release();
      }
      else
      {
      }
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id CAFUITileViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char v4 = v3;
  if (a2)
  {
    unint64_t v6 = (void *)MEMORY[0x24C59F610]();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CAFUITileViewController.init(nibName:bundle:)()
{
}

id CAFUITileViewController.__deallocating_deinit()
{
  return CAFUITileViewController.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for CAFUITileViewController);
}

void CAFUITileViewController.collectionView(_:didSelectItemAt:)(char *a1, unint64_t a2)
{
  os_log_type_t v3 = v2;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  BOOL v9 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v100 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v95 - v13;
  uint64_t v15 = (id *)&v2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
  swift_beginAccess();
  id v16 = *v15;
  char v17 = CAFUITileDataSource.validate(indexPath:)();

  if ((v17 & 1) == 0) {
    return;
  }
  uint64_t v98 = v7;
  CGRect v99 = v3;
  uint64_t v96 = v6;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  CGRect v97 = a1;
  objc_msgSend(a1, sel_deselectItemAtIndexPath_animated_, isa, 1);

  uint64_t v19 = IndexPath.section.getter();
  id v20 = (char *)*v15;
  id v21 = (char *)*v15 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems;
  swift_beginAccess();
  if (*v21 >> 62)
  {
    unint64_t v27 = v20;
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Swift::Int v24 = &demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>;
    if (v28) {
      goto LABEL_4;
    }
LABEL_9:

    goto LABEL_15;
  }
  uint64_t v22 = *(void *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v23 = v20;
  Swift::Int v24 = &demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>;
  if (!v22) {
    goto LABEL_9;
  }
LABEL_4:
  unint64_t v25 = *(void *)&v20[v24[94]];
  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
    if (v29)
    {
LABEL_6:
      if (v19 != 1) {
        goto LABEL_15;
      }
LABEL_12:
      id v30 = *v15;
      unint64_t v31 = CAFUITileDataSource.listItem(at:)();

      if (v31)
      {
        double v32 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(void *)v31 + 312))();
        double v33 = (_OWORD *)v32();
        BOOL v9 = v34;
        char v36 = v35;
        swift_release();
        uint64_t v37 = v98;
        switch(v36)
        {
          case 1:
            goto LABEL_70;
          case 2:
            outlined consume of CAFUICellSelectionAction(v33, (uint64_t)v9, 2u);
            goto LABEL_69;
          case 3:
            BOOL v9 = v97;
            switch((unint64_t)v33)
            {
              case 1uLL:
                goto LABEL_69;
              case 2uLL:
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
                unint64_t v78 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
                uint64_t v79 = swift_allocObject();
                *(_OWORD *)(v79 + 16) = xmmword_2495305E0;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 16))(v79 + v78, a2, v96);
                Class v80 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                objc_msgSend(v9, sel_reloadItemsAtIndexPaths_, v80);

                goto LABEL_52;
              case 3uLL:
                os_log_type_t v82 = static os_log_type_t.info.getter();
                specialized static CAFUILogger.log(_:message:function:file:line:)(v82, 0xD00000000000002DLL, 0x8000000249535C60, 0xD000000000000022, 0x8000000249535170);
                goto LABEL_52;
              default:
                goto LABEL_52;
            }
          default:
            id v38 = objc_msgSend(v99, sel_navigationController);
            objc_msgSend(v38, sel_pushViewController_animated_, v33, 1);
            outlined consume of CAFUICellSelectionAction(v33, (uint64_t)v9, 0);

LABEL_52:
            swift_release();
            return;
        }
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);

    if (v26) {
      goto LABEL_6;
    }
  }
  if (!v19) {
    goto LABEL_12;
  }
LABEL_15:
  id v39 = *v15;
  double v33 = (_OWORD *)CAFUITileDataSource.setting(at:)(a2);

  if (!v33)
  {
LABEL_68:
    (*(void (**)(char *, unint64_t, uint64_t))(v98 + 16))(v9, a2, v96);
    *(void *)&v101[0] = 0;
    *((void *)&v101[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    *(void *)&v101[0] = 0xD000000000000029;
    *((void *)&v101[0] + 1) = 0x8000000249535AB0;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x263F07A30]);
    v94._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    double v33 = v101;
    String.append(_:)(v94);
    swift_bridgeObjectRelease();
    goto LABEL_69;
  }
  swift_getObjectType();
  uint64_t v40 = swift_conformsToProtocol2();
  if (v40) {
    BOOL v9 = (char *)v40;
  }
  else {
    BOOL v9 = 0;
  }
  if (v40) {
    id v41 = v33;
  }
  else {
    id v41 = 0;
  }
  if (!v41)
  {
    while (1)
    {
LABEL_69:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_70:
      outlined consume of CAFUICellSelectionAction(v33, (uint64_t)v9, 1u);
    }
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v43 = (uint64_t (*)(uint64_t, char *))*((void *)v9 + 2);
  id v44 = v33;
  if ((v43(ObjectType, v9) & 1) == 0)
  {
    *(void *)&v101[0] = 0;
    *((void *)&v101[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    *(void *)&v101[0] = 0x206D657449;
    *((void *)&v101[0] + 1) = 0xE500000000000000;
    v62._uint64_t countAndFlagsBits = (*((uint64_t (**)(uint64_t, char *))v9 + 1))(ObjectType, v9);
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v63._uint64_t countAndFlagsBits = 0xD000000000000021;
    v63._object = (void *)0x8000000249535B20;
    String.append(_:)(v63);
    long long v64 = v101[0];
    os_log_type_t v65 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v65, v64, *((unint64_t *)&v64 + 1), 0xD000000000000022, 0x8000000249535170);

    swift_bridgeObjectRelease();
    return;
  }
  *(void *)&v101[0] = 0;
  *((void *)&v101[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  *(void *)&v101[0] = 0xD00000000000001ELL;
  *((void *)&v101[0] + 1) = 0x8000000249535B50;
  v45._uint64_t countAndFlagsBits = (*((uint64_t (**)(uint64_t, char *))v9 + 1))(ObjectType, v9);
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  long long v46 = v101[0];
  os_log_type_t v47 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v47, v46, *((unint64_t *)&v46 + 1), 0xD000000000000022, 0x8000000249535170);
  swift_bridgeObjectRelease();
  uint64_t v48 = IndexPath.section.getter();
  id v49 = *v15;
  unint64_t v50 = *(void *)((char *)*v15 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v50 >> 62)
  {
    id v95 = v49;
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v51) {
    BOOL v52 = v48 == 0;
  }
  else {
    BOOL v52 = 0;
  }
  uint64_t v53 = v52;
  long long v54 = *(_OWORD *)&v99[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16];
  v101[0] = *(_OWORD *)&v99[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
  v101[1] = v54;
  v101[2] = *(_OWORD *)&v99[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
  uint64_t v102 = *(void *)&v99[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48];
  unint64_t v55 = CAFUISettingsCache.visibleChildren(of:)(v44);
  if (v55 >> 62) {
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v56 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v57 = (void *)(*((uint64_t (**)(uint64_t, BOOL, uint64_t, char *))v9 + 9))(v53, v56 != 0, ObjectType, v9);
  uint64_t v59 = v57;
  BOOL v9 = (char *)v58;
  switch(v60)
  {
    case 1:
      CAFUITileViewController.showChildren(_:isProminent:)(v57, v53);

      outlined consume of CAFUICellSelectionAction(v59, (uint64_t)v9, 1u);
      return;
    case 2:
      specialized static CAFUIRequestContentManager.inputStreamIdentifier(from:)((char *)v57, v58);
      a2 = v66;
      if (v66) {
        swift_bridgeObjectRelease();
      }
      self;
      if (swift_dynamicCastObjCClass())
      {
        uint64_t v67 = v44;
        uint64_t v68 = CAFDeepLinkSetting.requestContentManager.getter();
        if (!v68)
        {
          os_log_type_t v93 = static os_log_type_t.error.getter();
          specialized static CAFUILogger.log(_:message:function:file:line:)(v93, 0xD00000000000002FLL, 0x8000000249535BB0, 0xD000000000000022, 0x8000000249535170);

          Swift::String v91 = v59;
          uint64_t v92 = (uint64_t)v9;
          goto LABEL_58;
        }
        uint64_t v69 = v68;
        uint64_t v70 = v9;
        id v71 = objc_msgSend(v99, sel_view);
        if (v71)
        {
          objc_super v72 = v71;
          id v73 = objc_msgSend(v71, sel_window);

          if (v73)
          {
            id v74 = objc_msgSend(v73, sel_windowScene);

            if (v74)
            {
              objc_super v75 = v99;
              outlined copy of CAFUICellSelectionAction(v59, (uint64_t)v70, 2u);
              specialized CAFUIRequestContentManager.open(contentURLString:in:completion:)((char *)v59, v70, v74, v69, a2 != 0, v75, (uint64_t)v59, v70);
              outlined consume of CAFUICellSelectionAction(v59, (uint64_t)v70, 2u);

              id v76 = *(id *)(v69 + 16);
              objc_msgSend(v76, sel_addObserver_, v75);

              outlined consume of CAFUICellSelectionAction(v59, (uint64_t)v70, 2u);
              swift_release();

LABEL_59:
              return;
            }
          }
          os_log_type_t v90 = static os_log_type_t.error.getter();
          specialized static CAFUILogger.log(_:message:function:file:line:)(v90, 0xD000000000000023, 0x8000000249535BE0, 0xD000000000000022, 0x8000000249535170);

          swift_release();
          Swift::String v91 = v59;
          uint64_t v92 = (uint64_t)v70;
LABEL_58:
          outlined consume of CAFUICellSelectionAction(v91, v92, 2u);
          goto LABEL_59;
        }
        __break(1u);
        goto LABEL_68;
      }
      os_log_type_t v81 = static os_log_type_t.error.getter();
      specialized static CAFUILogger.log(_:message:function:file:line:)(v81, 0xD00000000000003ALL, 0x8000000249535B70, 0xD000000000000022, 0x8000000249535170);
      outlined consume of CAFUICellSelectionAction(v59, (uint64_t)v9, 2u);
LABEL_62:

LABEL_63:
      break;
    case 3:
      uint64_t v77 = v98;
      switch((unint64_t)v57)
      {
        case 1uLL:
          CAFUITileViewController.showSettingAndSiblings(_:)(v44);
          break;
        case 2uLL:
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
          unint64_t v83 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
          uint64_t v84 = swift_allocObject();
          *(_OWORD *)(v84 + 16) = xmmword_2495305E0;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v77 + 16))(v84 + v83, a2, v96);
          Class v85 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v97, sel_reloadItemsAtIndexPaths_, v85);

          break;
        case 3uLL:
          uint64_t v86 = &v99[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath];
          swift_beginAccess();
          outlined init with copy of UIListContentConfiguration?((uint64_t)v86, (uint64_t)v14, &demangling cache variable for type metadata for IndexPath?);
          uint64_t v87 = v96;
          int v88 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 48))(v14, 1, v96);
          outlined destroy of UIContentConfiguration?((uint64_t)v14, &demangling cache variable for type metadata for IndexPath?);
          uint64_t v89 = (uint64_t)v100;
          if (v88 == 1)
          {
            (*(void (**)(char *, unint64_t, uint64_t))(v77 + 16))(v100, a2, v87);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v77 + 56))(v89, 0, 1, v87);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v100, 1, 1, v87);
          }
          swift_beginAccess();
          outlined assign with take of IndexPath?(v89, (uint64_t)v86);
          swift_endAccess();
          break;
        default:
          goto LABEL_62;
      }
      goto LABEL_62;
    default:
      id v61 = objc_msgSend(v99, sel_navigationController);
      objc_msgSend(v61, sel_pushViewController_animated_, v59, 1);

      outlined consume of CAFUICellSelectionAction(v59, (uint64_t)v9, 0);
      goto LABEL_63;
  }
}

uint64_t closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:)(char a1, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a1)
  {
    if (a2)
    {
      *(unsigned char *)(a3 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_punchThroughState) = 2;
      uint64_t v7 = (uint64_t *)(a3 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_presentedPTIdentifier);
      uint64_t *v7 = a4;
      v7[1] = (uint64_t)a5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = a4;
    v8._object = a5;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = 0xD000000000000010;
    v9._object = (void *)0x8000000249536360;
    String.append(_:)(v9);
    os_log_type_t v10 = static os_log_type_t.info.getter();
  }
  else
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = a4;
    v11._object = a5;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 0xD000000000000014;
    v12._object = (void *)0x8000000249536340;
    String.append(_:)(v12);
    os_log_type_t v10 = static os_log_type_t.info.getter();
  }
  specialized static CAFUILogger.log(_:message:function:file:line:)(v10, 0xD000000000000018, 0x8000000249536320, 0xD000000000000022, 0x8000000249535170);

  return swift_bridgeObjectRelease();
}

void CAFUITileViewController.showSettingAndSiblings(_:)(void *a1)
{
  uint64_t v5 = v1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v7 - 8);
  id v44 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for IndexPath();
  uint64_t v45 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v43 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(v1, sel_navigationController);
  if (!v11) {
    goto LABEL_34;
  }
  uint64_t v2 = v11;
  id v12 = objc_msgSend(v11, sel_viewControllers);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v46 = v9;
  if (v13 >> 62) {
    goto LABEL_32;
  }
  unint64_t v4 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_33:
    swift_bridgeObjectRelease_n();
    while (1)
    {
LABEL_34:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v41) {
        goto LABEL_38;
      }
LABEL_15:

      id v18 = objc_msgSend(v2, sel_viewControllers);
      uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v48 = v19;
      specialized Array.append<A>(contentsOf:)(v4);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_setViewControllers_animated_, isa, 1);

      id v21 = objc_msgSend(v2, sel_viewControllers);
      unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v22 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v23) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v23) {
          goto LABEL_38;
        }
      }
      unint64_t v24 = v23 - 1;
      if (__OFSUB__(v23, 1)) {
        break;
      }
      if ((v22 & 0xC000000000000001) != 0) {
        goto LABEL_42;
      }
      if ((v24 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v24 < *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v25 = *(id *)(v22 + 8 * v24 + 32);
        goto LABEL_22;
      }
      __break(1u);
    }
    __break(1u);
LABEL_42:
    id v25 = (id)MEMORY[0x24C59FC50](v24, v22);
LABEL_22:
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v27 = swift_dynamicCastClass();
    if (v27)
    {
      uint64_t v28 = (void **)(v27 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
      swift_beginAccess();
      uint64_t v29 = *v28;
      id v30 = *(void **)((char *)*v28 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
      if (v30)
      {
        id v31 = v30;
        id v32 = v29;
        unint64_t v33 = specialized CAFUITileDataSource.indexPaths(for:)(v3, (uint64_t)v32);

        double v34 = v5;
        char v35 = v44;
        specialized Sequence.first(where:)(v33, v34, v44);
        swift_bridgeObjectRelease();
        uint64_t v37 = v45;
        uint64_t v36 = v46;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v35, 1, v46) == 1)
        {

          outlined destroy of UIContentConfiguration?((uint64_t)v35, &demangling cache variable for type metadata for IndexPath?);
        }
        else
        {
          id v39 = v43;
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v43, v35, v36);
          Class v40 = IndexPath._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v31, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, v40, 2, 0);

          (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
        }
      }
      else
      {
      }
    }
    else
    {

      id v38 = v47;
    }
    return;
  }
LABEL_4:
  uint64_t v14 = 4;
  while (1)
  {
    uint64_t v15 = v14 - 4;
    if ((v13 & 0xC000000000000001) != 0)
    {
      id v16 = (id)MEMORY[0x24C59FC50](v14 - 4, v13);
      os_log_type_t v3 = (void *)(v14 - 3);
      if (__OFADD__(v15, 1)) {
        goto LABEL_31;
      }
    }
    else
    {
      id v16 = *(id *)(v13 + 8 * v14);
      os_log_type_t v3 = (void *)(v14 - 3);
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        swift_bridgeObjectRetain();
        unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        if (!v4) {
          goto LABEL_33;
        }
        goto LABEL_4;
      }
    }
    id v47 = v16;
    type metadata accessor for CAFUITileViewController();
    if (swift_dynamicCastClass()) {
      break;
    }

    ++v14;
    if (v3 == (void *)v4) {
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease_n();
  os_log_type_t v3 = a1;
  unint64_t v17 = CAFUITileViewController.hierarchicalControllers(to:)(a1);
  unint64_t v4 = v17;
  if (v17 >> 62) {
    goto LABEL_35;
  }
  if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_15;
  }
LABEL_38:

  swift_bridgeObjectRelease();
}

void CAFUITileViewController.showChildren(_:isProminent:)(void *a1, char a2)
{
  os_log_type_t v3 = v2;
  id v6 = objc_msgSend(v3, sel_navigationController);
  if (v6)
  {
    uint64_t v7 = v6;
    if (a2)
    {
      unint64_t v8 = CAFUITileViewController.hierarchicalControllers(to:)(a1);
      unint64_t v9 = v8;
      if (v8 >> 62) {
        goto LABEL_21;
      }
      if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        do
        {
          id v10 = objc_msgSend(v7, sel_viewControllers);
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
          unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v11 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
            if (!v12)
            {
LABEL_14:
              swift_bridgeObjectRelease_n();
              break;
            }
          }
          else
          {
            uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v12) {
              goto LABEL_14;
            }
          }
          uint64_t v13 = 4;
          while (1)
          {
            id v14 = (v11 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x24C59FC50](v13 - 4, v11)
                : *(id *)(v11 + 8 * v13);
            uint64_t v15 = v14;
            uint64_t v16 = v13 - 3;
            if (__OFADD__(v13 - 4, 1)) {
              break;
            }
            type metadata accessor for CAFUITileViewController();
            if (swift_dynamicCastClass())
            {
              swift_bridgeObjectRelease_n();

              id v28 = objc_msgSend(v7, sel_viewControllers);
              uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              *(void *)&v32[0] = v29;
              specialized Array.append<A>(contentsOf:)(v9);
              Class isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              objc_msgSend(v7, sel_setViewControllers_animated_, isa, 0);

              goto LABEL_16;
            }

            ++v13;
            if (v16 == v12) {
              goto LABEL_14;
            }
          }
          __break(1u);
LABEL_21:
          swift_bridgeObjectRetain();
          uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        while (v31);
      }
      swift_bridgeObjectRelease();
    }
LABEL_16:
    unint64_t v17 = *(void **)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_carSession];
    long long v18 = *(_OWORD *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16];
    v32[0] = *(_OWORD *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
    v32[1] = v18;
    v32[2] = *(_OWORD *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
    uint64_t v33 = *(void *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48];
    id v19 = v17;
    id v20 = a1;
    unint64_t v21 = CAFUISettingsCache.childSettings(of:)(v20);

    uint64_t v22 = CAFUISettingsCache.sections(for:parentSetting:)(v21, a1);
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager];
    uint64_t v24 = *(void *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager];
    objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
    swift_retain();
    outlined retain of CAFUISettingsCache((uint64_t)v32);
    swift_retain();
    id v25 = CAFUITileViewController.init(carSession:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(v19, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], v22, (uint64_t)v32, v23, v24, 0);
    id v26 = objc_msgSend(v20, sel_userVisibleLabel);
    if (!v26)
    {
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v26 = (id)MEMORY[0x24C59F610](v27);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v25, sel_setTitle_, v26);

    objc_msgSend(v7, sel_pushViewController_animated_, v25, 1);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void CAFUITileViewController.resetAndReload()()
{
  id v1 = objc_msgSend(v0, sel_navigationController);
  if (!v1)
  {
LABEL_11:
    os_log_type_t v17 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v17, 0xD00000000000002ALL, 0x8000000249536250, 0xD00000000000001FLL, 0x8000000249536280);
    os_log_type_t v18 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v18, 0xD000000000000019, 0x80000002495362A0, 0xD000000000000010, 0x80000002495362C0);
    return;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_viewControllers);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = v0;
  id v6 = specialized Sequence.first(where:)(v4, v5);
  swift_bridgeObjectRelease();

  if (!v6)
  {

    goto LABEL_11;
  }

  uint64_t v7 = (uint64_t *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
  swift_beginAccess();
  uint64_t v8 = *(void *)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections);
  if (!*(void *)(v8 + 16))
  {
LABEL_16:
    uint64_t v16 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  unint64_t v9 = *(void *)(v8 + 72);
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v10)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_6:
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v11 = (id)MEMORY[0x24C59FC50](0, v9);
    goto LABEL_9;
  }
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(v9 + 32);
LABEL_9:
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    unsigned __int8 v13 = objc_msgSend(v12, sel_category);

    long long v14 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16];
    long long v35 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
    long long v15 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
    long long v36 = v14;
    long long v37 = v15;
    uint64_t v38 = *(void *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48];
    uint64_t v16 = CAFUISettingsCache.categorySettings(for:)(v13);
LABEL_17:
    id v19 = *(void **)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
    uint64_t v20 = *(void *)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentCategories);
    unint64_t v21 = (char ***)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
    swift_beginAccess();
    uint64_t v22 = *v21;
    long long v24 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16];
    long long v23 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
    long long v25 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
    uint64_t v34 = *(void *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48];
    v33[1] = v24;
    v33[2] = v23;
    v33[0] = v25;
    objc_allocWithZone((Class)type metadata accessor for CAFUITileDataSource());
    id v26 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of CAFUISettingsCache((uint64_t)v33);
    uint64_t v27 = CAFUITileDataSource.init(prominentCategories:listItems:settingsSections:settingsCache:)(v20, v22, v16, (uint64_t)v33);
    id v28 = (void *)*v7;
    uint64_t *v7 = v27;

    uint64_t v29 = (void *)*v7;
    id v30 = *(void **)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
    *(void *)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView) = v19;
    id v31 = v26;
    id v32 = v29;

    CAFUITileDataSource.collectionView.didset();
    return;
  }
  __break(1u);
}

Swift::Void __swiftcall CAFUITileViewController.dismissIfModal()()
{
  id v1 = objc_msgSend(v0, sel_presentingViewController);
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
}

uint64_t CAFUITileViewController.hierarchicalControllers(to:)(void *a1)
{
  id v2 = v1;
  long long v48 = *(_OWORD *)&v1[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
  if (CAFUISettingsCache.hasAnyHiddenAncestor(_:)(a1))
  {
    os_log_type_t v4 = static os_log_type_t.error.getter();
    uint64_t v5 = 0xD000000000000025;
    unint64_t v6 = 0x8000000249536480;
    goto LABEL_15;
  }
  id v7 = objc_msgSend(v1, sel_navigationController);
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = objc_msgSend(v7, sel_viewControllers);

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v10 >> 62)
    {
LABEL_39:
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      if (v11) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v11)
      {
LABEL_6:
        uint64_t v12 = 4;
        while (1)
        {
          if ((v10 & 0xC000000000000001) != 0) {
            id v13 = (id)MEMORY[0x24C59FC50](v12 - 4, v10);
          }
          else {
            id v13 = *(id *)(v10 + 8 * v12);
          }
          long long v14 = v13;
          uint64_t v15 = v12 - 3;
          if (__OFADD__(v12 - 4, 1))
          {
            __break(1u);
            goto LABEL_39;
          }
          type metadata accessor for CAFUITileViewController();
          if (swift_dynamicCastClass()) {
            break;
          }

          ++v12;
          if (v15 == v11) {
            goto LABEL_13;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v17 = objc_msgSend(a1, sel_identifier);
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;

        if (*(void *)(*((void *)&v48 + 1) + 16)
          && (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v22 & 1) != 0))
        {
          long long v23 = *(void **)(*(void *)(*((void *)&v48 + 1) + 56) + 8 * v21);
          id v24 = v23;
        }
        else
        {
          long long v23 = 0;
        }
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v25 = swift_bridgeObjectRetain();
        id v26 = (void *)specialized Collection.first.getter(v25);
        swift_bridgeObjectRelease();
        if (v26)
        {
          unsigned int v27 = objc_msgSend(v26, sel_category);

          if (!v23) {
            goto LABEL_25;
          }
        }
        else
        {
          unsigned int v27 = 0;
          if (!v23)
          {
LABEL_25:
            unsigned int v28 = objc_msgSend(a1, sel_category);
            if (v26 && v28 == v27)
            {
              os_log_type_t v29 = static os_log_type_t.debug.getter();
              specialized static CAFUILogger.log(_:message:function:file:line:)(v29, 0xD00000000000003ELL, 0x8000000249536440, 0xD00000000000001CLL, 0x8000000249536420);

              return MEMORY[0x263F8EE78];
            }
          }
        }
        uint64_t v47 = MEMORY[0x263F8EE78];
        unsigned int v30 = objc_msgSend(a1, sel_category);
        if (!v26 || v30 != v27)
        {
          swift_beginAccess();
          id v31 = a1;
          unint64_t v32 = swift_bridgeObjectRetain();
          uint64_t v33 = specialized Sequence.first(where:)(v32, v31);
          swift_bridgeObjectRelease();

          if (v33)
          {
            uint64_t v46 = v23;
            uint64_t v34 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(void *)v33 + 312))();
            long long v35 = (void *)v34();
            uint64_t v37 = v36;
            unsigned __int8 v39 = v38;
            int v40 = v38;
            swift_release();
            if (v40)
            {
              outlined consume of CAFUICellSelectionAction(v35, v37, v39);
              swift_release();
            }
            else
            {
              id v41 = v35;
              MEMORY[0x24C59F700]();
              if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              swift_release();
              outlined consume of CAFUICellSelectionAction(v35, v37, 0);
            }
            long long v23 = v46;
          }
        }
        CAFUISettingsCache.ancestors(of:)(a1);
        unint64_t v43 = v42;
        id v44 = v2;
        unint64_t v45 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo19CAFAutomakerSettingCG_So16UIViewControllerCs5NeverOTg5023_s5CAFUI23CAFUITileViewg73C23hierarchicalControllers33_81CEDCC541A633F7CC5FD11DB3C3FABCLL2toSaySo06f8D0CGSo19dE13C_tFAhKXEfU1_5CAFUI0klG0CTf1cn_nTf4ng_n(v43, v44);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v45);
        swift_bridgeObjectRelease();

        return v47;
      }
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
  }
  os_log_type_t v4 = static os_log_type_t.info.getter();
  uint64_t v5 = 0xD00000000000002ELL;
  unint64_t v6 = 0x80000002495363F0;
LABEL_15:
  specialized static CAFUILogger.log(_:message:function:file:line:)(v4, v5, v6, 0xD00000000000001CLL, 0x8000000249536420);
  return MEMORY[0x263F8EE78];
}

void CAFUITileViewController.handleSettingHiddenDisabled(_:)(void *a1)
{
  uint64_t v5 = v1;
  unint64_t v6 = (unint64_t)&selRef_setOpacity_;
  id v7 = objc_msgSend(v1, sel_navigationController);
  if (!v7) {
    goto LABEL_88;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (uint64_t)&selRef_setOpacity_;
  id v10 = objc_msgSend(v7, sel_viewControllers);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62) {
    goto LABEL_57;
  }
  uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v13)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    goto LABEL_88;
  }
  while (1)
  {
    unint64_t v14 = v13 - 1;
    if (__OFSUB__(v13, 1))
    {
      __break(1u);
LABEL_61:
      id v15 = (id)MEMORY[0x24C59FC50](v14, v11);
      goto LABEL_9;
    }
    if ((v11 & 0xC000000000000001) != 0) {
      goto LABEL_61;
    }
    if ((v14 & 0x8000000000000000) != 0) {
      break;
    }
    if (v14 >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_69:
      id v54 = v12;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v55) {
        goto LABEL_70;
      }
LABEL_33:
      swift_bridgeObjectRelease_n();
      if ((unint64_t)v5 >> 62) {
        goto LABEL_81;
      }
      uint64_t v30 = *(void *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      char v22 = v65;
      if (v30) {
        goto LABEL_35;
      }
LABEL_82:

      swift_bridgeObjectRelease_n();
LABEL_83:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v4 = v66;
      goto LABEL_84;
    }
    id v15 = *(id *)(v11 + 8 * v14 + 32);
LABEL_9:
    id v4 = v15;
    swift_bridgeObjectRelease();
    id v16 = [v5 *(SEL *)(v6 + 1968)];
    if (!v16) {
      goto LABEL_88;
    }
    unint64_t v11 = (unint64_t)v16;
    id v17 = [v16 *(SEL *)(v9 + 4032)];

    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v69[4] = v3;
    if ((unint64_t)v3 >> 62) {
      goto LABEL_63;
    }
    unint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v6) {
      goto LABEL_21;
    }
LABEL_12:
    uint64_t v9 = v3 & 0xFFFFFFFFFFFFFF8;
    uint64_t v2 = v3 + 32;
    while (!__OFSUB__(v6--, 1))
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        id v19 = (id)MEMORY[0x24C59FC50](v6, v3);
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_55;
        }
        if (v6 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_56;
        }
        id v19 = *(id *)(v2 + 8 * v6);
      }
      uint64_t v20 = v19;
      type metadata accessor for CAFUITileViewController();
      unint64_t v11 = swift_dynamicCastClass();

      if (v11)
      {
        MEMORY[0x270FA5388](v21);
        v69[0] = v6;
        partial apply for specialized closure #1 in BidirectionalCollection.last(where:)(v69, (unint64_t *)v70);
        char v22 = *(void **)&v70[0];
        goto LABEL_23;
      }
      if (!v6) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v13) {
      goto LABEL_58;
    }
  }
  __break(1u);
LABEL_63:
  if (v3 < 0) {
    unint64_t v11 = v3;
  }
  else {
    unint64_t v11 = v3 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v6) {
    goto LABEL_12;
  }
LABEL_21:
  char v22 = 0;
LABEL_23:
  uint64_t v9 = (uint64_t)&selRef_setOpacity_;
  swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_88;
  }
  type metadata accessor for CAFUITileViewController();
  uint64_t v23 = swift_dynamicCastClass();
  if (!v23) {
    goto LABEL_87;
  }
  id v24 = (id *)v23;
  type metadata accessor for CAFUIPickerViewController();
  uint64_t v25 = swift_dynamicCastClass();
  if (v25 && *(void **)(v25 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable) == a1)
  {
    id v4 = v4;
    id v41 = objc_msgSend(v5, sel_navigationController);
    if (v41)
    {
      unint64_t v42 = v41;
      id v43 = objc_msgSend(v41, sel_viewControllers);
      unint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v45 = v5;
      id v46 = specialized Sequence.first(where:)(v44, v45);
      swift_bridgeObjectRelease();

      if (v46) {
        goto LABEL_48;
      }
LABEL_49:
    }
LABEL_50:
    os_log_type_t v52 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v52, 0xD00000000000002ALL, 0x8000000249536250, 0xD00000000000001FLL, 0x8000000249536280);

    goto LABEL_84;
  }
  type metadata accessor for CAFUICollectionViewController();
  uint64_t v26 = swift_dynamicCastClass();
  if (v26 && *(void **)(v26 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting) == a1)
  {
    id v4 = v4;
    id v47 = objc_msgSend(v5, sel_navigationController);
    if (v47)
    {
      unint64_t v42 = v47;
      id v48 = objc_msgSend(v47, sel_viewControllers);
      unint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v45 = v5;
      id v50 = specialized Sequence.first(where:)(v49, v45);
      swift_bridgeObjectRelease();

      if (v50)
      {
LABEL_48:
        id v51 = objc_msgSend(v42, sel_popToViewController_animated_, v45, 1);

        id v4 = v42;
        goto LABEL_84;
      }
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v24 == v5
    || (unsigned int v27 = (id *)((char *)v24 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource),
        swift_beginAccess(),
        unint64_t v11 = *(void *)(*v27 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections),
        (uint64_t v2 = *(void *)(v11 + 16)) == 0))
  {

LABEL_84:
    return;
  }
  Swift::String v63 = (char *)v5;
  long long v64 = v4;
  os_log_type_t v65 = v22;
  uint64_t v12 = *(void **)(v11 + 64);
  uint64_t v5 = *(id **)(v11 + 72);
  unint64_t v66 = v12;
  if ((unint64_t)v5 >> 62) {
    goto LABEL_69;
  }
  uint64_t v28 = *(void *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v29 = v12;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v28) {
    goto LABEL_33;
  }
LABEL_70:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v2 == 1)
  {
LABEL_71:
    swift_bridgeObjectRelease_n();

    id v4 = v64;
    goto LABEL_84;
  }
  uint64_t v56 = (id **)(v11 + 120);
  uint64_t v9 = 1;
  while (1)
  {
    uint64_t v57 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    uint64_t v58 = *(v56 - 1);
    uint64_t v5 = *v56;
    unint64_t v66 = v58;
    if ((unint64_t)*v56 >> 62)
    {
      id v61 = v58;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v62)
      {
LABEL_79:
        uint64_t v9 = 0x26525D000;
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v59 = *(void *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v60 = v58;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v59) {
        goto LABEL_79;
      }
    }
    v56 += 6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    ++v9;
    if (v57 == v2) {
      goto LABEL_71;
    }
  }
  __break(1u);
LABEL_81:
  swift_bridgeObjectRetain();
  char v22 = v65;
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_82;
  }
LABEL_35:
  if (((unint64_t)v5 & 0xC000000000000001) != 0)
  {
    id v31 = (id)MEMORY[0x24C59FC50](0, v5);
LABEL_38:
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    long long v33 = *(_OWORD *)&v63[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16];
    v70[0] = *(_OWORD *)&v63[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
    v70[1] = v33;
    v70[2] = *(_OWORD *)&v63[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
    uint64_t v71 = *(void *)&v63[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48];
    if (CAFUISettingsCache.setting(_:isAncestorOf:)(a1, v32))
    {
      id v34 = objc_msgSend(v63, sel_navigationController);
      if (v34)
      {
        long long v35 = v34;
        uint64_t v68 = v32;
        id v36 = [v34 *(SEL *)(v9 + 4032)];
        unint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        unsigned __int8 v38 = v63;
        id v39 = specialized Sequence.first(where:)(v37, v38);
        swift_bridgeObjectRelease();

        if (v39)
        {
          id v40 = objc_msgSend(v35, sel_popToViewController_animated_, v38, 1);
          swift_bridgeObjectRelease();

          goto LABEL_83;
        }

        unint64_t v32 = v68;
      }
      os_log_type_t v53 = static os_log_type_t.info.getter();
      specialized static CAFUILogger.log(_:message:function:file:line:)(v53, 0xD00000000000002ALL, 0x8000000249536250, 0xD00000000000001FLL, 0x8000000249536280);
    }
    swift_bridgeObjectRelease();

    goto LABEL_83;
  }
  if (*(void *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v31 = v5[4];
    goto LABEL_38;
  }
  __break(1u);
LABEL_87:

LABEL_88:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CAFUITileViewController.punchThroughController(_:didDismissPunchThroughWithIdentifier:)(CAFUIPunchThroughController *_, Swift::String didDismissPunchThroughWithIdentifier)
{
}

uint64_t CAFUITileViewController.updateForLimitUIChanged()()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v8 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in CAFUITileViewController.updateForLimitUIChanged();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_98;
  id v10 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24C59F8E0](0, v7, v3, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void closure #1 in CAFUITileViewController.updateForLimitUIChanged()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x24C5A0810](v1);
  if (!v2) {
    return;
  }
  uint64_t v3 = (char *)v2;
  uint64_t v4 = OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_limiting;
  int v5 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_limiting);
  uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_carSession);
  id v7 = objc_msgSend(v6, sel_limitUserInterfaces);
  if (v7)
  {
    uint64_t v8 = v7;
    unsigned int v9 = objc_msgSend(v7, sel_BOOLValue);

    if (v9)
    {
      id v10 = objc_msgSend(v6, sel_configuration);
      unsigned __int8 v11 = objc_msgSend(v10, sel_limitableUserInterfaces);

      if (v5 == ((v11 & 0x20) == 0)) {
        goto LABEL_5;
      }
LABEL_26:

      return;
    }
  }
  if ((v5 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_5:
  v3[v4] = (v3[v4] & 1) == 0;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  if (v3[v4]) {
    uint64_t v12 = 1702195828;
  }
  else {
    uint64_t v12 = 0x65736C6166;
  }
  if (v3[v4]) {
    unint64_t v13 = 0xE400000000000000;
  }
  else {
    unint64_t v13 = 0xE500000000000000;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0xD000000000000015;
  v15._object = (void *)0x8000000249536150;
  String.append(_:)(v15);
  os_log_type_t v16 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v16, 0xD000000000000019, 0x8000000249536130, 0xD000000000000019, 0x8000000249536170);
  swift_bridgeObjectRelease();
  if (v3[v4] == 1)
  {
    id v17 = objc_msgSend(v3, sel_navigationController);
    if (v17)
    {
      uint64_t v18 = v17;
      id v19 = objc_msgSend(v17, sel_viewControllers);

      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
      unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v20 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v21)
        {
LABEL_15:
          unint64_t v22 = v21 - 1;
          if (__OFSUB__(v21, 1))
          {
            __break(1u);
          }
          else if ((v20 & 0xC000000000000001) == 0)
          {
            if ((v22 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v22 < *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              id v23 = *(id *)(v20 + 8 * v22 + 32);
              goto LABEL_20;
            }
            __break(1u);
            return;
          }
          id v23 = (id)MEMORY[0x24C59FC50](v22, v20);
LABEL_20:
          id v24 = v23;
          swift_bridgeObjectRelease();
          type metadata accessor for CAFUIPickerViewController();
          uint64_t v25 = swift_dynamicCastClass();
          if (v25)
          {
            uint64_t v26 = *(void *)(v25 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
            uint64_t ObjectType = swift_getObjectType();
            uint64_t v28 = *(void *)(v26 + 8);
            id v29 = v24;
            swift_unknownObjectRetain();
            LOBYTE(ObjectType) = CAFListContentRepresentable.isLimitedUI.getter(ObjectType, v28);
            swift_unknownObjectRelease();
            if (ObjectType)
            {
              id v30 = objc_msgSend(v3, sel_navigationController);
              if (v30)
              {
                id v31 = v30;
              }
              goto LABEL_36;
            }
          }
          type metadata accessor for CAFUICollectionViewController();
          uint64_t v32 = swift_dynamicCastClass();
          if (v32)
          {
            uint64_t v33 = *(void *)(v32 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting + 8);
            uint64_t v34 = swift_getObjectType();
            uint64_t v35 = *(void *)(v33 + 8);
            id v24 = v24;
            swift_unknownObjectRetain();
            LOBYTE(v34) = CAFListContentRepresentable.isLimitedUI.getter(v34, v35);
            swift_unknownObjectRelease();
            if (v34)
            {
              id v36 = objc_msgSend(v3, sel_navigationController);
              if (v36)
              {
                unint64_t v37 = v36;
              }
            }
          }
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v21) {
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
    }
  }
LABEL_36:
  unsigned __int8 v38 = (id *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
  swift_beginAccess();
  id v39 = *v38;
  uint64_t v40 = CAFUITileDataSource.limitableIndexPaths.getter();

  id v41 = *(void **)((char *)*v38 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v41 && *(void *)(v40 + 16))
  {
    type metadata accessor for IndexPath();
    id v42 = v41;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v42, sel_reloadItemsAtIndexPaths_, isa);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
}

void CAFUITileViewController.automakerSettingService(_:didUpdateHidden:)(void *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return;
  }
  CAFUITileViewController.handleSettingHiddenDisabled(_:)(a1);
  id v4 = objc_msgSend(v2, sel_navigationController);
  if (!v4) {
    return;
  }
  id v20 = v4;
  id v5 = objc_msgSend(v4, sel_viewControllers);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v7 < 2)
  {
    id v17 = v20;
LABEL_14:

    return;
  }
  uint64_t v8 = *(void *)&v2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 40];
  id v9 = objc_msgSend(a1, sel_identifier);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (*(void *)(v8 + 16))
  {
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v12);
    if (v14)
    {
      id v19 = *(id *)(*(void *)(v8 + 56) + 8 * v13);
      swift_bridgeObjectRelease();
      unint64_t v15 = CAFUISettingsCache.visibleChildren(of:)(v19);
      if (v15 >> 62) {
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v16)
      {

        id v17 = v19;
      }
      else
      {
        id v18 = objc_msgSend(v20, sel_popViewControllerAnimated_, 1);

        id v17 = v18;
      }
      goto LABEL_14;
    }
  }

  swift_bridgeObjectRelease();
}

void CAFUITileViewController.automakerSettingService(_:didUpdateDisabled:)(void *a1, char a2)
{
  if (a2) {
    CAFUITileViewController.handleSettingHiddenDisabled(_:)(a1);
  }
}

void CAFUITileViewController.createGeneralListItem()()
{
  unint64_t v0 = CAFUISettingsCache.settings(for:)(0);
  if (v0 >> 62) {
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v1 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v2 = (void *)MEMORY[0x24C59F610](1918985575, 0xE400000000000000);
    id v3 = objc_msgSend(self, sel_systemImageNamed_, v2);

    if (v3)
    {
      id v4 = (void *)MEMORY[0x24C59F610](0xD000000000000010, 0x80000002495336F0);
      id v5 = CAFUILocalizedStringForKey(v4);

      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      uint64_t v9 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v9;
      *(unsigned char *)(v10 + 24) = 0;
      type metadata accessor for CAFUIDataListItem();
      swift_allocObject();
      CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)((uint64_t)v3, v6, v8, 0, 0, 0, 0, 1, 1, v11, 0, 0, 0, 0, (uint64_t)partial apply for closure #1 in CAFUITileViewController.createGeneralListItem(), v10);
    }
    else
    {
      __break(1u);
    }
  }
}

void CAFUITileViewController.createAudioListItem(audioSettings:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x263F8EE78];
  unint64_t v29 = MEMORY[0x263F8EE78];
  if (CAFUITileViewController.createSoundItem(audioSettings:)(a1))
  {
    uint64_t v5 = swift_retain();
    MEMORY[0x24C59F700](v5);
    if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
  }
  id v6 = objc_msgSend(a1, sel_volumes);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFVolume);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = CAFUITileViewController.createVolumeListItem(volumes:)(v7);
  swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v9 = swift_retain();
    MEMORY[0x24C59F700](v9);
    if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
  }
  if (!(v29 >> 62))
  {
    if (!*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_11;
    }
LABEL_33:
    id v18 = (void *)MEMORY[0x24C59F610](0xD000000000000013, 0x8000000249533730);
    id v19 = objc_msgSend(self, sel_systemImageNamed_, v18);

    if (v19)
    {
      id v20 = (void *)MEMORY[0x24C59F610](0x53474E4954544553, 0xEE004F494455415FLL);
      id v21 = CAFUILocalizedStringForKey(v20);

      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      uint64_t v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = v29;
      *(unsigned char *)(v26 + 32) = 3;
      type metadata accessor for CAFUIDataListItem();
      swift_allocObject();
      CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)((uint64_t)v19, v22, v24, 0, 0, 0, 0, 1, 1, v27, 3, 0, 0, 0, (uint64_t)partial apply for specialized closure #1 in CAFUITileViewController.createAudioListItem(audioSettings:), v26);
      return;
    }
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_33;
  }
LABEL_11:
  unint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 8);
  uint64_t v28 = v4;
  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_13;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  if (!v11) {
    goto LABEL_29;
  }
LABEL_13:
  if (v11 >= 1)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0) {
        id v13 = (id)MEMORY[0x24C59FC50](i, v10);
      }
      else {
        id v13 = *(id *)(v10 + 8 * i + 32);
      }
      char v14 = v13;
      if (objc_msgSend(v13, sel_category) != 3
        || objc_msgSend(v14, sel_hasHidden) && objc_msgSend(v14, sel_hidden))
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = v28;
    if (v28 < 0) {
      goto LABEL_36;
    }
LABEL_30:
    if ((v15 & 0x4000000000000000) == 0)
    {
      uint64_t v17 = *(void *)(v15 + 16);
      goto LABEL_32;
    }
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
LABEL_32:
    swift_release();
    if (!v17)
    {
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t CAFUITileViewController.createSoundItem(audioSettings:)(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x24C59F610](0xD000000000000011, 0x8000000249535D10);
  id v3 = objc_msgSend(self, sel__systemImageNamed_, v2);

  uint64_t v4 = (void *)MEMORY[0x24C59F610](0x53474E4954544553, 0xEE00444E554F535FLL);
  id v5 = CAFUILocalizedStringForKey(v4);

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = a1;
  type metadata accessor for CAFUIDataListItem();
  uint64_t v11 = swift_allocObject();
  id v12 = a1;
  CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)((uint64_t)v3, v6, v8, 0, 0, 0, 0, 1, 1, v14, 0, 1, 0, 0, (uint64_t)partial apply for closure #1 in CAFUITileViewController.createSoundItem(audioSettings:), v10);
  return v11;
}

uint64_t CAFUITileViewController.createVolumeListItem(volumes:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
      uint64_t v30 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      goto LABEL_4;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v24) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v30 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v2 & 0x8000000000000000) == 0)
    {
LABEL_4:
      uint64_t v3 = 0;
      unint64_t v27 = v1 & 0xC000000000000001;
      uint64_t v28 = v2;
      unint64_t v29 = v1;
      do
      {
        if (v27) {
          id v7 = (id)MEMORY[0x24C59FC50](v3, v1);
        }
        else {
          id v7 = *(id *)(v1 + 8 * v3 + 32);
        }
        uint64_t v8 = v7;
        type metadata accessor for CAFUIServiceListItem();
        uint64_t v9 = swift_allocObject();
        *(void *)(v9 + 112) = v8;
        self;
        uint64_t v10 = swift_dynamicCastObjCClass();
        id v11 = v8;
        if (v10)
        {
          uint64_t v10 = CAFVolume.title.getter();
          unint64_t v4 = v12;
        }
        else
        {
          unint64_t v4 = 0xE000000000000000;
        }
        ++v3;
        *(void *)(v9 + 104) = 0;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(void *)(v9 + 64) = 0;
        *(_OWORD *)(v9 + 16) = 0u;
        swift_beginAccess();
        id v5 = *(void **)(v9 + 16);
        *(void *)(v9 + 16) = 0;

        swift_beginAccess();
        *(void *)(v9 + 24) = v10;
        *(void *)(v9 + 32) = v4;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        *(void *)(v9 + 40) = 0;
        *(void *)(v9 + 48) = 0;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        *(void *)(v9 + 56) = 0;
        *(void *)(v9 + 64) = 0;
        swift_bridgeObjectRelease();
        *(unsigned char *)(v9 + 72) = 0;
        *(void *)(v9 + 80) = protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFPairedDevicesInformation;
        *(void *)(v9 + 88) = 0;
        swift_beginAccess();
        uint64_t v6 = *(void **)(v9 + 104);
        *(void *)(v9 + 104) = 0;

        *(unsigned char *)(v9 + 96) = 0;
        *(_WORD *)(v9 + 73) = 1;
        *(unsigned char *)(v9 + 75) = 1;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        unint64_t v1 = v29;
      }
      while (v28 != v3);
      uint64_t v13 = v30;
      goto LABEL_13;
    }
    __break(1u);
    return 0;
  }
LABEL_13:
  char v14 = (void *)MEMORY[0x24C59F610](0xD000000000000013, 0x8000000249533730);
  id v15 = objc_msgSend(self, sel_systemImageNamed_, v14);

  uint64_t v16 = (void *)MEMORY[0x24C59F610](0x53474E4954544553, 0xEF454D554C4F565FLL);
  id v17 = CAFUILocalizedStringForKey(v16);

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  uint64_t v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(_WORD *)(v22 + 24) = 256;
  *(void *)(v22 + 32) = v13;
  type metadata accessor for CAFUIDataListItem();
  uint64_t v23 = swift_allocObject();
  CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)((uint64_t)v15, v18, v20, 0, 0, 0, 0, 1, 1, v26, 0, 1, 0, 0, (uint64_t)partial apply for closure #2 in CAFUITileViewController.createVolumeListItem(volumes:), v22);
  return v23;
}

char *specialized closure #1 in CAFUITileViewController.createAudioListItem(audioSettings:)(uint64_t a1, char **a2, unsigned __int8 a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x24C5A0810](v5);
  if (!v6) {
    return 0;
  }
  id v7 = (char *)v6;
  uint64_t v8 = *(void **)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_carSession);
  uint64_t v9 = v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache;
  long long v11 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16);
  long long v10 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32);
  long long v12 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache);
  uint64_t v30 = *(void *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48);
  v29[1] = v11;
  void v29[2] = v10;
  v29[0] = v12;
  id v13 = v8;
  swift_bridgeObjectRetain();
  outlined retain of CAFUISettingsCache((uint64_t)v29);
  uint64_t v14 = CAFUISettingsCache.categorySettings(for:)(a3);
  outlined release of CAFUISettingsCache((uint64_t)v29);
  long long v16 = *(_OWORD *)(v9 + 16);
  long long v15 = *(_OWORD *)(v9 + 32);
  long long v17 = *(_OWORD *)v9;
  uint64_t v28 = *(void *)(v9 + 48);
  v27[0] = v17;
  v27[1] = v16;
  v27[2] = v15;
  uint64_t v18 = *(void *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager];
  uint64_t v19 = *(void *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager];
  objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
  swift_retain();
  outlined retain of CAFUISettingsCache((uint64_t)v27);
  swift_retain();
  uint64_t v20 = CAFUITileViewController.init(carSession:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(v13, MEMORY[0x263F8EE78], a2, v14, (uint64_t)v27, v18, v19, 0);
  uint64_t v21 = (void *)MEMORY[0x24C59F610](0x53474E4954544553, 0xEE004F494455415FLL);
  id v22 = CAFUILocalizedStringForKey(v21);

  if (!v22)
  {
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v22 = (id)MEMORY[0x24C59F610](v23);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v20, sel_setTitle_, v22);

  id v24 = objc_msgSend(v20, sel_navigationItem);
  if (CAFUISettingsCache.hasShowAudioLogo.getter()) {
    uint64_t v25 = (void *)CAUAssetLibraryManager.createAudioLogoBarButton()();
  }
  else {
    uint64_t v25 = 0;
  }
  objc_msgSend(v24, sel_setRightBarButtonItem_, v25);

  return v20;
}

UIBarButtonItem_optional __swiftcall CAFUITileViewController.createAudioLogoButtonIfApplicable()()
{
  if (CAFUISettingsCache.hasShowAudioLogo.getter()) {
    return CAUAssetLibraryManager.createAudioLogoBarButton()();
  }
  v0.value.super.super.Class isa = 0;
  return v0;
}

void CAFUITileViewController.createRadioListItem()()
{
  unint64_t v0 = CAFUISettingsCache.settings(for:)(1u);
  if (v0 >> 62) {
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v1 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v2 = (void *)MEMORY[0x24C59F610](0x69662E6F69646172, 0xEA00000000006C6CLL);
    id v3 = objc_msgSend(self, sel_systemImageNamed_, v2);

    if (v3)
    {
      unint64_t v4 = (void *)MEMORY[0x24C59F610](0x53474E4954544553, 0xEE00414944454D5FLL);
      id v5 = CAFUILocalizedStringForKey(v4);

      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      uint64_t v9 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v9;
      *(unsigned char *)(v10 + 24) = 1;
      type metadata accessor for CAFUIDataListItem();
      swift_allocObject();
      CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)((uint64_t)v3, v6, v8, 0, 0, 0, 0, 1, 1, v11, 1, 0, 0, 0, (uint64_t)partial apply for closure #1 in CAFUITileViewController.createRadioListItem(), v10);
    }
    else
    {
      __break(1u);
    }
  }
}

char *closure #1 in CAFUITileViewController.createGeneralListItem()(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x24C5A0810](v7);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (char *)v8;
  uint64_t v10 = *(void **)(v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_carSession);
  uint64_t v11 = v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache;
  long long v13 = *(_OWORD *)(v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16);
  long long v12 = *(_OWORD *)(v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32);
  long long v14 = *(_OWORD *)(v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache);
  uint64_t v30 = *(void *)(v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48);
  v29[1] = v13;
  void v29[2] = v12;
  v29[0] = v14;
  id v15 = v10;
  outlined retain of CAFUISettingsCache((uint64_t)v29);
  uint64_t v16 = CAFUISettingsCache.categorySettings(for:)(a2);
  outlined release of CAFUISettingsCache((uint64_t)v29);
  long long v18 = *(_OWORD *)(v11 + 16);
  long long v17 = *(_OWORD *)(v11 + 32);
  long long v19 = *(_OWORD *)v11;
  uint64_t v28 = *(void *)(v11 + 48);
  v27[0] = v19;
  v27[1] = v18;
  v27[2] = v17;
  uint64_t v20 = *(void *)&v9[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager];
  uint64_t v21 = *(void *)&v9[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager];
  objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
  swift_retain();
  outlined retain of CAFUISettingsCache((uint64_t)v27);
  swift_retain();
  id v22 = CAFUITileViewController.init(carSession:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(v15, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], v16, (uint64_t)v27, v20, v21, 0);
  uint64_t v23 = (void *)MEMORY[0x24C59F610](a3, a4);
  id v24 = CAFUILocalizedStringForKey(v23);

  if (!v24)
  {
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v24 = (id)MEMORY[0x24C59F610](v25);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v22, sel_setTitle_, v24);

  return v22;
}

char *closure #2 in CAFUITileViewController.createVolumeListItem(volumes:)(uint64_t a1, __int16 a2, unint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x24C5A0810](v5);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (char *)v6;
  if ((a2 & 0x100) != 0)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  else
  {
    long long v9 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16);
    long long v8 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32);
    long long v10 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache);
    uint64_t v29 = *(void *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48);
    v28[1] = v9;
    v28[2] = v8;
    v28[0] = v10;
    outlined retain of CAFUISettingsCache((uint64_t)v28);
    uint64_t v11 = CAFUISettingsCache.categorySettings(for:)(a2);
    outlined release of CAFUISettingsCache((uint64_t)v28);
  }
  long long v13 = *(void **)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_carSession];
  if (a3 >> 62)
  {
    type metadata accessor for CAFUIDataListItem();
    id v24 = v13;
    swift_bridgeObjectRetain();
    uint64_t v25 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    a3 = v25;
  }
  else
  {
    id v14 = v13;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for CAFUIDataListItem();
  }
  long long v16 = *(_OWORD *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16];
  long long v15 = *(_OWORD *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
  long long v17 = *(_OWORD *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
  uint64_t v27 = *(void *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48];
  v26[1] = v16;
  _OWORD v26[2] = v15;
  v26[0] = v17;
  uint64_t v18 = *(void *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager];
  uint64_t v19 = *(void *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager];
  objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
  swift_retain();
  outlined retain of CAFUISettingsCache((uint64_t)v26);
  swift_retain();
  long long v12 = CAFUITileViewController.init(carSession:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(v13, MEMORY[0x263F8EE78], (char **)a3, v11, (uint64_t)v26, v18, v19, 1);
  uint64_t v20 = (void *)MEMORY[0x24C59F610](0x53474E4954544553, 0xEF454D554C4F565FLL);
  id v21 = CAFUILocalizedStringForKey(v20);

  if (!v21)
  {
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v21 = (id)MEMORY[0x24C59F610](v22);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v12, sel_setTitle_, v21);

  return v12;
}

char *closure #1 in CAFUITileViewController.createSoundItem(audioSettings:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x24C5A0810](v3);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (void *)v4;
  id v6 = a2;
  if (CAFUISettingsCache.hasShowAudioLogo.getter()) {
    uint64_t v7 = (void *)CAUAssetLibraryManager.createAudioLogoBarButton()();
  }
  else {
    uint64_t v7 = 0;
  }
  id v9 = objc_allocWithZone((Class)type metadata accessor for CAFUISoundSettingsViewController());
  long long v8 = CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(v6, v7);

  return v8;
}

UIBarButtonItem_optional __swiftcall CAFUITileViewController.createAudioLogoBarButton()()
{
  return CAUAssetLibraryManager.createAudioLogoBarButton()();
}

id thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed NSCollectionLayoutEnvironment) -> (@owned NSCollectionLayoutSection?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = (void *)v5(a2, a3);
  swift_release();
  swift_unknownObjectRelease();

  return v6;
}

double CAFUITileViewCompositionalLayout.collectionViewContentSize.getter()
{
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for CAFUITileViewCompositionalLayout();
  objc_msgSendSuper2(&v10, sel_collectionViewContentSize);
  double v2 = v1;
  double v4 = v3 + 16.0 + 2.0;
  uint64_t v5 = *(void *)&v0[OBJC_IVAR____TtC5CAFUIP33_81CEDCC541A633F7CC5FD11DB3C3FABC32CAFUITileViewCompositionalLayout_data];
  double v7 = *(double *)(v5 + 16);
  double v6 = *(double *)(v5 + 24);
  if (v7 != v2 || v6 != v4)
  {
    if (v7 == 0.0 && v6 == 0.0) {
      objc_msgSend(v0, sel_invalidateLayout);
    }
    *(double *)(v5 + 16) = v2;
    *(double *)(v5 + 24) = v4;
  }
  return v2;
}

id CAFUITileViewCompositionalLayout.__deallocating_deinit()
{
  return CAFUITileViewController.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for CAFUITileViewCompositionalLayout);
}

id CAFUITileViewController.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t CAFUITileViewCollectionViewData.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 32, 7);
}

unint64_t specialized closure #1 in BidirectionalCollection.last(where:)(unint64_t result, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0) {
    return MEMORY[0x24C59FC50]();
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
  {
    return (unint64_t)*(id *)(a2 + 8 * result + 32);
  }
  __break(1u);
  return result;
}

unint64_t specialized CAFUITileDataSource.indexPaths(for:)(void *a1, uint64_t a2)
{
  id v85 = a1;
  uint64_t v82 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  unint64_t v78 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v79 = v6;
  uint64_t v80 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (unint64_t)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  MEMORY[0x270FA5388](v11);
  os_log_type_t v81 = (char *)&v73 - v13;
  unint64_t v14 = *(void *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (!v14) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v77 = v12;
  uint64_t v15 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
  unint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v16 >> 62) {
    goto LABEL_96;
  }
  uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v18 = (id)v14;
  while (1)
  {
    uint64_t v84 = a2;
    id v76 = (id)v14;
    if (!v17)
    {
      unint64_t v83 = MEMORY[0x263F8EE78];
      goto LABEL_26;
    }
    objc_super v75 = (uint64_t *)v10;
    unint64_t v19 = (unint64_t)objc_msgSend((id)v14, sel_numberOfItemsInSection_, 0);
    if ((v19 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_100;
    }
    unint64_t v20 = v19;
    if (!v19)
    {
      unint64_t v83 = MEMORY[0x263F8EE78];
      a2 = v84;
      goto LABEL_26;
    }
    uint64_t v74 = v4;
    unint64_t v14 = 0;
    unint64_t v83 = MEMORY[0x263F8EE78];
    unint64_t v10 = (unint64_t)&off_26525C000;
    while (1)
    {
      if (v20 == v14)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        swift_unknownObjectRelease();
        while (1)
        {
          while (1)
          {
            if (v17 == ++v20) {
              goto LABEL_49;
            }
LABEL_38:
            if (v17 == v20) {
              goto LABEL_94;
            }
            uint64_t v38 = *v2;
            if ((*v2 & 0xC000000000000001) == 0) {
              break;
            }
            swift_bridgeObjectRetain();
            unint64_t v14 = MEMORY[0x24C59FC50](v20, v38);
            swift_bridgeObjectRelease();
            type metadata accessor for CAFUIServiceListItem();
            uint64_t v47 = swift_dynamicCastClass();
            if (!v47) {
              goto LABEL_36;
            }
            uint64_t v40 = v47;
LABEL_43:
            id v41 = objc_msgSend(*(id *)(v40 + 112), sel_uniqueIdentifier);
            id v42 = v78;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v4 = UUID.uuidString.getter();
            a2 = v43;
            (*(void (**)(char *, uint64_t))v10)(v42, v82);
            double v2 = (uint64_t *)objc_msgSend(v85, sel_identifier);
            uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v46 = v45;

            if (v4 == v44 && a2 == v46)
            {
              swift_bridgeObjectRelease_n();
LABEL_51:
              uint64_t v48 = v77;
              MEMORY[0x24C59E990](v20, v75);
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                unint64_t v49 = v83;
                a2 = v84;
              }
              else
              {
                unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v83 + 16) + 1, 1, v83);
                a2 = v84;
              }
              unint64_t v51 = *(void *)(v49 + 16);
              unint64_t v50 = *(void *)(v49 + 24);
              if (v51 >= v50 >> 1) {
                unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1, v49);
              }
              *(void *)(v49 + 16) = v51 + 1;
              os_log_type_t v52 = *(void (**)(unint64_t, uint64_t, uint64_t))(v80 + 32);
              unint64_t v53 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
              unint64_t v83 = v49;
              v52(v49 + v53 + *(void *)(v80 + 72) * v51, v48, v79);
              swift_release();
              goto LABEL_56;
            }
            uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v4) {
              goto LABEL_51;
            }
            swift_release();
            double v2 = (uint64_t *)v15;
          }
          if (v20 >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_95;
          }
          unint64_t v14 = *(void *)(v38 + 8 * v20 + 32);
          type metadata accessor for CAFUIServiceListItem();
          uint64_t v39 = swift_dynamicCastClass();
          if (v39)
          {
            uint64_t v40 = v39;
            swift_retain();
            goto LABEL_43;
          }
        }
      }
      uint64_t v21 = *(void *)(v84 + v15);
      if ((v21 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = MEMORY[0x24C59FC50](v14, v21);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v14 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_35;
        }
        uint64_t v17 = (uint64_t)*(id *)(v21 + 8 * v14 + 32);
      }
      id v22 = objc_msgSend((id)v17, sel_identifier);
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      a2 = v24;

      double v2 = (uint64_t *)objc_msgSend(v85, sel_identifier);
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;

      if (v23 == v25 && a2 == v27) {
        break;
      }
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v4) {
        goto LABEL_24;
      }
      ++v14;

      if (v20 == v14)
      {
        a2 = v84;
        uint64_t v4 = v74;
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_24:
    double v2 = v75;
    MEMORY[0x24C59E990](v14, 0);
    unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v32 = *(void *)(v30 + 16);
    unint64_t v31 = *(void *)(v30 + 24);
    int64_t v33 = v32 + 1;
    if (v32 >= v31 >> 1) {
      goto LABEL_103;
    }
    while (2)
    {
      a2 = v84;
      uint64_t v4 = v74;
      *(void *)(v30 + 16) = v33;
      uint64_t v34 = *(void (**)(unint64_t, uint64_t *, uint64_t))(v80 + 32);
      unint64_t v35 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
      unint64_t v83 = v30;
      v34(v30 + v35 + *(void *)(v80 + 72) * v32, v2, v79);

LABEL_26:
      double v2 = (uint64_t *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
      swift_beginAccess();
      if ((unint64_t)*v2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v72) {
          goto LABEL_56;
        }
LABEL_28:
        unint64_t v36 = *(void *)(a2 + v15);
        if (!(v36 >> 62))
        {
          uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_30;
        }
LABEL_100:
        swift_bridgeObjectRetain();
        uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_30:
        unint64_t v32 = v37 != 0;
        int64_t v33 = *v2;
        if ((unint64_t)*v2 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v17 < 0)
          {
            __break(1u);
LABEL_103:
            unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v33, 1, v30);
            continue;
          }
        }
        else
        {
          uint64_t v17 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v17)
        {
          objc_super v75 = (uint64_t *)v32;
          unint64_t v20 = 0;
          unint64_t v10 = v4 + 8;
          uint64_t v15 = (uint64_t)v2;
          goto LABEL_38;
        }
LABEL_49:
        a2 = v84;
        goto LABEL_56;
      }
      break;
    }
    if (*(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_28;
    }
LABEL_56:
    unint64_t v78 = (char *)CAFUITileDataSource.firstSettingsSection.getter();
    uint64_t v15 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections;
    uint64_t v82 = *(void *)(*(void *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) + 16);
    if (!v82) {
      break;
    }
    unint64_t v10 = 0;
    uint64_t v77 = v80 + 32;
    while (1)
    {
      uint64_t v55 = *(void *)(a2 + v15);
      if (v10 >= *(void *)(v55 + 16)) {
        break;
      }
      unint64_t v56 = *(void *)(v55 + 48 * v10 + 72);
      if (v56 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((v14 & 0x8000000000000000) != 0) {
          goto LABEL_92;
        }
      }
      else
      {
        unint64_t v14 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v14)
      {
        unint64_t v57 = 0;
        while (1)
        {
          if (v14 == v57)
          {
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            goto LABEL_91;
          }
          uint64_t v58 = *(void *)(a2 + v15);
          if (v10 >= *(void *)(v58 + 16)) {
            goto LABEL_89;
          }
          uint64_t v4 = *(void *)(v58 + 48 * v10 + 72);
          if ((v4 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            id v59 = (id)MEMORY[0x24C59FC50](v57, v4);
            swift_bridgeObjectRelease();
          }
          else
          {
            if (v57 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_90;
            }
            id v59 = *(id *)(v4 + 8 * v57 + 32);
          }
          id v60 = objc_msgSend(v59, sel_identifier);
          uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v62 = v61;

          double v2 = (uint64_t *)objc_msgSend(v85, sel_identifier);
          uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v65 = v64;

          if (v4 == v63 && v62 == v65) {
            break;
          }
          char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a2 = v84;
          if (v67) {
            goto LABEL_79;
          }
          ++v57;

          if (v14 == v57) {
            goto LABEL_59;
          }
        }
        swift_bridgeObjectRelease_n();
        a2 = v84;
LABEL_79:
        if (__OFADD__(v10, v78)) {
          goto LABEL_93;
        }
        MEMORY[0x24C59E990](v57, &v78[v10]);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v68 = v83;
        }
        else {
          unint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v83 + 16) + 1, 1, v83);
        }
        unint64_t v70 = *(void *)(v68 + 16);
        unint64_t v69 = *(void *)(v68 + 24);
        uint64_t v4 = v70 + 1;
        if (v70 >= v69 >> 1) {
          unint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1, v68);
        }
        *(void *)(v68 + 16) = v4;
        unint64_t v54 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
        unint64_t v83 = v68;
        (*(void (**)(unint64_t, char *, uint64_t))(v80 + 32))(v68 + v54 + *(void *)(v80 + 72) * v70, v81, v79);
      }
LABEL_59:
      if (++v10 == v82) {
        goto LABEL_87;
      }
    }
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    id v71 = (id)v14;
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_87:

  return v83;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x24C59FB60](a1, a2, v7);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v17;
  swift_unknownObjectRelease();
  Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v6 = (v6 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_26;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v14 = static NSObject.== infix(_:_:)();
    }
    while ((v14 & 1) == 0);
  }

LABEL_20:
  uint64_t v15 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v16 = v15;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v19;
    uint64_t v18 = v20;
    uint64_t v4 = v21;
    uint64_t v5 = v22;
    unint64_t v6 = v23;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v17 = (unint64_t)(v4 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v6)
    {
      uint64_t v10 = (v6 - 1) & v6;
      unint64_t v11 = __clz(__rbit64(v6)) | (v5 << 6);
      uint64_t v12 = v5;
      goto LABEL_29;
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v14 >= v17) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v18 + 8 * v14);
    uint64_t v12 = v5 + 1;
    if (!v15)
    {
      uint64_t v12 = v5 + 2;
      if (v5 + 2 >= v17) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v5 + 3;
        if (v5 + 3 >= v17) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v5 + 4;
          if (v5 + 4 >= v17) {
            goto LABEL_32;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v5 + 5;
            if (v5 + 5 >= v17) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v12);
            if (!v15)
            {
              uint64_t v16 = v5 + 6;
              while (v17 != v16)
              {
                unint64_t v15 = *(void *)(v18 + 8 * v16++);
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<CAFAutomakerSetting>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v3 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_32;
    }
    while (1)
    {
      objc_msgSend(v13, sel_registerObserver_, a2);

      uint64_t v5 = v12;
      unint64_t v6 = v10;
      if ((v3 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v24;
        swift_unknownObjectRelease();
        uint64_t v12 = v5;
        uint64_t v10 = v6;
        if (v24) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo19CAFAutomakerSettingCG_So16UIViewControllerCs5NeverOTg5023_s5CAFUI23CAFUITileViewg73C23hierarchicalControllers33_81CEDCC541A633F7CC5FD11DB3C3FABCLL2toSaySo06f8D0CGSo19dE13C_tFAhKXEfU1_5CAFUI0klG0CTf1cn_nTf4ng_n(unint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v6) {
      break;
    }
    uint64_t v27 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = 0;
    unint64_t v23 = v5 & 0xC000000000000001;
    uint64_t v21 = v3;
    uint64_t v22 = *(void **)&a2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_carSession];
    long long v9 = *(_OWORD *)&a2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16];
    v25[0] = *(_OWORD *)&a2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
    v25[1] = v9;
    v25[2] = *(_OWORD *)&a2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
    uint64_t v26 = *(void *)&a2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48];
    uint64_t v10 = *(void *)&a2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager];
    uint64_t v11 = *(void *)&a2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager];
    unint64_t v24 = v5;
    while (v6 != v8)
    {
      if (v23) {
        id v12 = (id)MEMORY[0x24C59FC50](v8, v5);
      }
      else {
        id v12 = *(id *)(v5 + 8 * v8 + 32);
      }
      id v13 = v12;
      id v14 = v22;
      id v15 = v13;
      unint64_t v16 = CAFUISettingsCache.childSettings(of:)(v15);

      uint64_t v17 = CAFUISettingsCache.sections(for:parentSetting:)(v16, v13);
      swift_bridgeObjectRelease();
      id v18 = objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
      swift_retain();
      outlined retain of CAFUISettingsCache((uint64_t)v25);
      swift_retain();
      a2 = CAFUITileViewController.init(carSession:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(v14, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], v17, (uint64_t)v25, v10, v11, 0);
      id v19 = objc_msgSend(v15, sel_userVisibleLabel);
      if (!v19)
      {
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v19 = (id)MEMORY[0x24C59F610](v20);
        swift_bridgeObjectRelease();
      }
      ++v8;
      objc_msgSend(a2, sel_setTitle_, v19, v21);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v3 = *(void *)(v27 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t v5 = v24;
      if (v6 == v8) {
        return v27;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

id specialized Sequence.first(where:)(unint64_t a1, id a2)
{
  if (a1 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = 4;
      do
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          id v7 = (id)MEMORY[0x24C59FC50](v5 - 4, a1);
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8) {
            goto LABEL_14;
          }
        }
        else
        {
          id v7 = *(id *)(a1 + 8 * v5);
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        if (v7 == a2)
        {
          swift_bridgeObjectRelease();
          return a2;
        }

        ++v5;
      }
      while (v9 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, void *a2)
{
  if (a1 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = 4;
      do
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = MEMORY[0x24C59FC50](v5 - 4, a1);
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 8 * v5);
          swift_retain();
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        int v10 = *(unsigned __int8 *)(v7 + 74);
        char v11 = *(unsigned char *)(v7 + 75);
        unsigned int v12 = objc_msgSend(a2, sel_category);
        if ((v11 & 1) == 0 && v10 == v12)
        {
          swift_bridgeObjectRelease();
          return v7;
        }
        swift_release();
        ++v5;
      }
      while (v9 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void specialized CAFUITileViewController.init(coder:)()
{
  unint64_t v1 = &v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_presentedPTIdentifier];
  void *v1 = 0;
  v1[1] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath];
  uint64_t v3 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_limiting] = 0;
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v4 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v4 = MEMORY[0x263F8EE88];
  }
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_cancellables] = v4;
  v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_punchThroughState] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for CAFUITileViewController()
{
  uint64_t result = type metadata singleton initialization cache for CAFUITileViewController;
  if (!type metadata singleton initialization cache for CAFUITileViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id specialized static CAFUITileViewController.compositionalLayout(isRHD:dataSource:)(char a1)
{
  type metadata accessor for CAFUITileViewCollectionViewData();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  *(unsigned char *)(v4 + 32) = a1;
  id v5 = objc_allocWithZone(MEMORY[0x263F82548]);
  swift_retain();
  id v6 = objc_msgSend(v5, sel_init);
  objc_msgSend(v6, sel_setInterSectionSpacing_, 16.0);
  objc_msgSend(v6, sel_setContentInsetsReference_, 2);
  uint64_t v7 = (objc_class *)type metadata accessor for CAFUITileViewCompositionalLayout();
  BOOL v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR____TtC5CAFUIP33_81CEDCC541A633F7CC5FD11DB3C3FABC32CAFUITileViewCompositionalLayout_data] = v2;
  aBlock[4] = partial apply for closure #1 in static CAFUITileViewController.compositionalLayout(isRHD:dataSource:);
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed NSCollectionLayoutEnvironment) -> (@owned NSCollectionLayoutSection?);
  aBlock[3] = &block_descriptor_122;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  v12.receiver = v8;
  v12.super_class = v7;
  id v10 = objc_msgSendSuper2(&v12, sel_initWithSectionProvider_configuration_, v9, v6);
  swift_release();
  swift_release();

  _Block_release(v9);
  return v10;
}

uint64_t sub_2495165F0()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in CAFUITileViewController.reloadListItem(item:)()
{
  return closure #1 in CAFUITileViewController.reloadListItem(item:)(v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of IndexPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void outlined consume of CAFUICellSelectionAction(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2)
  {
    swift_bridgeObjectRelease();
  }
  else if (a3 <= 1u)
  {
  }
}

id outlined copy of CAFUICellSelectionAction(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2) {
    return (id)swift_bridgeObjectRetain();
  }
  if (a3 <= 1u) {
    return result;
  }
  return result;
}

uint64_t specialized CAFUITileViewController.punchThroughController(_:didDismissPunchThroughWithIdentifier:)(uint64_t a1, void *a2)
{
  id v5 = (void *)(v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_presentedPTIdentifier);
  id v6 = *(void **)(v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_presentedPTIdentifier + 8);
  if (v6 && (*v5 == a1 ? (BOOL v7 = v6 == a2) : (BOOL v7 = 0), v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v15, "Dismissed PT ");
    HIWORD(v15[1]) = -4864;
    v8._uint64_t countAndFlagsBits = a1;
    v8._object = a2;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = 33;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    os_log_type_t v10 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v10, v15[0], v15[1], 0xD00000000000003FLL, 0x80000002495362E0);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_punchThroughState) = 1;
    void *v5 = 0;
    v5[1] = 0;
  }
  else
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = a1;
    v11._object = a2;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 0x20746F6E20736920;
    v12._object = (void *)0xEE002E6E776F6E6BLL;
    String.append(_:)(v12);
    os_log_type_t v13 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 2118736, 0xE300000000000000, 0xD00000000000003FLL, 0x80000002495362E0);
  }

  return swift_bridgeObjectRelease();
}

char *partial apply for closure #1 in CAFUITileViewController.createGeneralListItem()()
{
  return closure #1 in CAFUITileViewController.createGeneralListItem()(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), 0xD000000000000010, 0x80000002495336F0);
}

uint64_t type metadata accessor for CAFUIDataListItem()
{
  return self;
}

uint64_t sub_2495169CC()
{
  return objectdestroy_12Tm(MEMORY[0x263F8EEA0]);
}

char *partial apply for specialized closure #1 in CAFUITileViewController.createAudioListItem(audioSettings:)()
{
  return specialized closure #1 in CAFUITileViewController.createAudioListItem(audioSettings:)(*(void *)(v0 + 16), *(char ***)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_2495169F0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

char *partial apply for closure #1 in CAFUITileViewController.createSoundItem(audioSettings:)()
{
  return closure #1 in CAFUITileViewController.createSoundItem(audioSettings:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_249516A38()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

char *partial apply for closure #2 in CAFUITileViewController.createVolumeListItem(volumes:)()
{
  return closure #2 in CAFUITileViewController.createVolumeListItem(volumes:)(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24) | (unsigned __int16)(*(unsigned __int8 *)(v0 + 25) << 8), *(void *)(v0 + 32));
}

uint64_t sub_249516A98()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 25, 7);
}

char *partial apply for closure #1 in CAFUITileViewController.createRadioListItem()()
{
  return closure #1 in CAFUITileViewController.createGeneralListItem()(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), 0x53474E4954544553, 0xEE00414944454D5FLL);
}

uint64_t sub_249516B10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_249516B60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_249516BB0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_249516C00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 240))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_249516C50@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 264))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_249516CA8(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 72) = v2;
  return result;
}

uint64_t sub_249516CEC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 288))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_249516D44(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 73) = v2;
  return result;
}

uint64_t sub_249516D88@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a1 + 312))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned CAFUICellSelectionAction);
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))result;
  return result;
}

uint64_t sub_249516E18@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 336))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_249516E70(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 96) = v2;
  return result;
}

uint64_t sub_249516EB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 360))();
  *a2 = result;
  return result;
}

id sub_249516F0C@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  uint64_t v3 = (void **)(*a1 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *a2 = *v3;

  return v4;
}

uint64_t ObjC metadata update function for CAFUITileViewController()
{
  return type metadata accessor for CAFUITileViewController();
}

void type metadata completion function for CAFUITileViewController()
{
  type metadata accessor for IndexPath?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for IndexPath?()
{
  if (!lazy cache variable for type metadata for IndexPath?)
  {
    type metadata accessor for IndexPath();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexPath?);
    }
  }
}

uint64_t type metadata accessor for CAFUITileViewCompositionalLayout()
{
  return self;
}

uint64_t type metadata accessor for CAFUITileViewCollectionViewData()
{
  return self;
}

void partial apply for closure #1 in CAFUITileViewController.updateForLimitUIChanged()()
{
  closure #1 in CAFUITileViewController.updateForLimitUIChanged()(v0);
}

uint64_t sub_24951711C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out CAFUICellSelectionAction)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned CAFUICellSelectionAction)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

unint64_t partial apply for specialized closure #1 in BidirectionalCollection.last(where:)@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized closure #1 in BidirectionalCollection.last(where:)(*a1, **(void **)(v2 + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t outlined consume of Set<CAFAutomakerSetting>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_249517214()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in closure #1 in CAFUITileViewController.reloadListItem(item:)()
{
  closure #1 in closure #1 in CAFUITileViewController.reloadListItem(item:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_249517258()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sIg_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_249517290()
{
  return objectdestroy_12Tm(MEMORY[0x263F8EED8]);
}

uint64_t objectdestroy_12Tm(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));

  return MEMORY[0x270FA0238](v1, 33, 7);
}

uint64_t partial apply for closure #1 in static CAFUITileViewController.compositionalLayout(isRHD:dataSource:)(uint64_t a1, void *a2)
{
  return closure #1 in static CAFUITileViewController.compositionalLayout(isRHD:dataSource:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32));
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6C6C616D73;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6C6C616D73;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x6D756964656DLL;
      break;
    case 2:
      uint64_t v5 = 0x656772616CLL;
      break;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x7469617274726F70;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x6D756964656DLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x656772616CLL;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      if (v5 == 0x7469617274726F70) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = 0x7964616552;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x7964616552;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x527463656E6E6F43;
      unint64_t v3 = 0xEE00747365757165;
      break;
    case 2:
      unint64_t v3 = 0x8000000249532CF0;
      uint64_t v5 = 0xD000000000000011;
      break;
    case 3:
      uint64_t v5 = 0xD000000000000012;
      unint64_t v3 = 0x8000000249532D10;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEE00747365757165;
      if (v5 == 0x527463656E6E6F43) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0x8000000249532CF0;
      uint64_t v2 = 0xD000000000000011;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0x8000000249532D10;
      if (v5 == 0xD000000000000012) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

id closure #1 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(void *a1)
{
  id result = objc_msgSend(a1, sel_isNavigationBarHidden);
  if ((result & 1) == 0)
  {
    return objc_msgSend(a1, sel_setNavigationBarHidden_animated_, 1, 1);
  }
  return result;
}

id closure #2 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(void *a1)
{
  return objc_msgSend(a1, sel_setNavigationBarHidden_animated_, 0, 1);
}

uint64_t CAFUIDevicePickerViewController.delegate.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CAFUIDevicePickerViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_delegate);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*CAFUIDevicePickerViewController.delegate.modify())()
{
  return CAFUICollectionViewController.items.modify;
}

double CAFUIDevicePickerViewController.cellSize.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___cellSize;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___cellSize + 16) & 1) == 0) {
    return *(double *)v1;
  }
  double result = dbl_249532190[(char)CAFUIDevicePickerViewController.layoutStyle.getter()];
  *(double *)uint64_t v1 = result;
  *(void *)(v1 + 8) = 0x4060C00000000000;
  *(unsigned char *)(v1 + 16) = 0;
  return result;
}

uint64_t CAFUIDevicePickerViewController.rows.getter()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  if (v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows + 8] != 1) {
    return *(void *)v1;
  }
  if ((CAFUIDevicePickerViewController.isPortraitLayout.getter() & 1) == 0)
  {
    uint64_t result = 1;
LABEL_11:
    *(void *)uint64_t v1 = result;
    v1[8] = 0;
    return result;
  }
  uint64_t result = (uint64_t)objc_msgSend(v0, sel_collectionView);
  if (result)
  {
    unint64_t v3 = (void *)result;
    objc_msgSend((id)result, sel_bounds);
    CGFloat v5 = v4;
    CGFloat v7 = v6;
    CGFloat v9 = v8;
    CGFloat v11 = v10;

    v14.origin.CGFloat x = v5;
    v14.origin.CGFloat y = v7;
    v14.size.double width = v9;
    v14.size.double height = v11;
    double Height = CGRectGetHeight(v14);
    if (one-time initialization token for tallPortraitRequiredHeight != -1)
    {
      double v13 = Height;
      swift_once();
      double Height = v13;
    }
    if (*(double *)&static CAFUIDevicePickerViewController.Constants.tallPortraitRequiredHeight > Height) {
      uint64_t result = 2;
    }
    else {
      uint64_t result = 3;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t CAFUIDevicePickerViewController.columns.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns + 8) != 1) {
    return *(void *)v1;
  }
  int v2 = CAFUIDevicePickerViewController.layoutStyle.getter();
  if (v2 == 3 || v2 == 0) {
    uint64_t result = 2;
  }
  else {
    uint64_t result = 3;
  }
  *(void *)uint64_t v1 = result;
  v1[8] = 0;
  return result;
}

uint64_t CAFUIDevicePickerViewController.layoutStyle.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle;
  uint64_t result = *(unsigned __int8 *)(v0
                              + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle);
  if (result == 4)
  {
    uint64_t result = CAFUIDevicePickerViewController.calculateLayoutStyle()();
    *(unsigned char *)(v0 + v1) = result;
  }
  return result;
}

uint64_t CAFUIDevicePickerViewController.calculateLayoutStyle()()
{
  if (CAFUIDevicePickerViewController.isPortraitLayout.getter()) {
    return 3;
  }
  uint64_t result = (uint64_t)objc_msgSend(v0, sel_collectionView);
  if (result)
  {
    int v2 = (void *)result;
    objc_msgSend((id)result, sel_bounds);
    double v4 = v3;

    if (v4 >= 800.0) {
      return 2;
    }
    uint64_t result = (uint64_t)objc_msgSend(v0, sel_collectionView);
    if (result)
    {
      CGFloat v5 = (void *)result;
      objc_msgSend((id)result, sel_bounds);
      double v7 = v6;

      return v7 >= 527.0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t CAFUIDevicePickerViewController.isPortraitLayout.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout;
  int v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout);
  if (v2 == 2)
  {
    unsigned __int8 v3 = CAFUIDevicePickerViewController.checkIfIsPortraitLayout()();
    *(unsigned char *)(v0 + v1) = v3 & 1;
  }
  else
  {
    unsigned __int8 v3 = v2 & 1;
  }
  return v3 & 1;
}

id CAFUIDevicePickerViewController.checkIfIsPortraitLayout()()
{
  id result = objc_msgSend(v0, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  int v2 = result;
  objc_msgSend(result, sel_bounds);
  double v4 = v3;

  id result = objc_msgSend(v0, sel_view);
  if (!result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  CGFloat v5 = result;
  objc_msgSend(result, sel_bounds);
  double v7 = v6;

  if (v7 >= v4) {
    return 0;
  }
  id result = objc_msgSend(v0, sel_collectionView);
  if (!result) {
    goto LABEL_13;
  }
  double v8 = result;
  objc_msgSend(result, sel_bounds);
  double v10 = v9;

  if (one-time initialization token for portraitRequiredHeight != -1) {
    swift_once();
  }
  if (*(double *)&static CAFUIDevicePickerViewController.Constants.portraitRequiredHeight > v10) {
    return 0;
  }
  id result = objc_msgSend(v0, sel_collectionView, *(double *)&static CAFUIDevicePickerViewController.Constants.portraitRequiredHeight);
  if (result)
  {
    CGFloat v11 = result;
    objc_msgSend(result, sel_bounds);
    double v13 = v12;

    return (id)(v13 >= 460.0);
  }
LABEL_14:
  __break(1u);
  return result;
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewController();
  objc_msgSendSuper2(&v6, sel_viewWillDisappear_, a1);
  uint64_t v3 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton;
  double v4 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton];
  if (v4)
  {
    objc_msgSend(v4, sel_removeFromSuperview);
    CGFloat v5 = *(void **)&v1[v3];
  }
  else
  {
    CGFloat v5 = 0;
  }
  *(void *)&v1[v3] = 0;
}

uint64_t type metadata accessor for CAFUIDevicePickerViewController()
{
  uint64_t result = type metadata singleton initialization cache for CAFUIDevicePickerViewController;
  if (!type metadata singleton initialization cache for CAFUIDevicePickerViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewController();
  objc_msgSendSuper2(&v3, sel_viewWillAppear_, a1);
  CAFUIDevicePickerViewController.updatePTButton()();
}

void CAFUIDevicePickerViewController.pageControlHeightConstraint.setter(void *a1)
{
  uint64_t v2 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControlHeightConstraint;
  objc_super v3 = *(void **)(v1 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControlHeightConstraint);
  *(void *)(v1 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControlHeightConstraint) = a1;
  Class v13 = a1;
  if (v3)
  {
    double v4 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2495300D0;
    *(void *)(v5 + 32) = v3;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    id v6 = v3;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_deactivateConstraints_, isa);
  }
  double v8 = *(void **)(v1 + v2);
  if (v8)
  {
    double v9 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_2495300D0;
    *(void *)(v10 + 32) = v8;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    id v11 = v8;
    Class v12 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_activateConstraints_, v12);

    objc_super v3 = v11;
    Class v13 = v12;
  }
}

uint64_t CAFUIDevicePickerViewController.cellClass.getter()
{
  return type metadata accessor for CAFUIDevicePickerViewCell();
}

uint64_t CAFUIDevicePickerViewController.cellIdentifier.getter()
{
  type metadata accessor for CAFUIDevicePickerViewCell();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v1 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

char *CAFUIDevicePickerViewController.__allocating_init(requestContentManager:pairedDevices:carSession:)(uint64_t a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:)(a1, a2, a3);
}

char *CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:)(uint64_t a1, void *a2, void *a3)
{
  id v7 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_delegate];
  void *v7 = 0;
  v7[1] = 0;
  double v8 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___cellSize];
  *(void *)double v8 = 0;
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  double v9 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  *(void *)double v9 = 0;
  v9[8] = 1;
  uint64_t v10 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle] = 4;
  v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout] = 2;
  *(void *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView] = 0;
  v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControlHeightConstraint] = 0;
  uint64_t v11 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession;
  *(void *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinnerTimer] = 0;
  Class v12 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinningCellIndexPath];
  uint64_t v13 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  CGRect v14 = *(void **)&v3[v11];
  *(void *)&v3[v11] = a3;
  id v15 = v3;
  id v16 = a3;

  *(void *)&v15[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_requestContentManager] = a1;
  *(void *)&v15[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pairedDevices] = a2;
  swift_retain();
  id v17 = a2;
  id v18 = objc_msgSend(v17, sel_pairedDevicesAction);
  id v19 = specialized static CAFUIDevicePickerViewController.connectedDeviceSupportedActions(for:)(v18);

  *(void *)&v15[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_connectedDeviceSupportedActions] = v19;
  uint64_t v20 = (char *)specialized CAFUICollectionViewController.init(setting:isRHD:)(objc_msgSend(v17, sel_pairedDevicesInformation), 0, v15);
  uint64_t v21 = *(void **)&v20[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pairedDevices];
  uint64_t v22 = v20;
  id v23 = objc_msgSend(v21, sel_pairedDevicesInformation);
  objc_msgSend(v23, sel_registerObserver_, v22);

  if (*(void *)&v22[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_requestContentManager]
    && (v24._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        int v25 = CAFUIRequestContentManager.state(for:)(v24),
        swift_bridgeObjectRelease(),
        !v25))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v39 = static OS_os_log.default;
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      aBlock[0] = v42;
      *(_DWORD *)id v41 = 136315138;
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2494AC000, v39, v40, "AutoSettings has no available PT with identifier %s.", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5A0780](v42, -1, -1);
      MEMORY[0x24C5A0780](v41, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v26 = static OS_os_log.default;
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      aBlock[0] = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2494AC000, v26, v27, "Setting up PT with identifier %s.", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5A0780](v29, -1, -1);
      MEMORY[0x24C5A0780](v28, -1, -1);
    }
    if (a1) {
      objc_msgSend(*(id *)(a1 + 16), sel_addObserver_, v22);
    }
    v22[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState] = 1;
  }
  id v32 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v33 = *MEMORY[0x263F30DA0];
  id v34 = objc_msgSend(self, sel_mainQueue);
  uint64_t v35 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = (uint64_t)partial apply for closure #1 in CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:);
  aBlock[5] = v35;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_7;
  unint64_t v36 = _Block_copy(aBlock);
  swift_release();
  id v37 = objc_msgSend(v32, sel_addObserverForName_object_queue_usingBlock_, v33, 0, v34, v36);

  swift_release();
  _Block_release(v36);
  swift_unknownObjectRelease();

  return v22;
}

void closure #1 in CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x24C5A0810](v2);
  if (v3)
  {
    double v4 = (void *)v3;
    CAFUIDevicePickerViewController.updateDevicePickerLimitedUI()();
  }
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.updateDevicePickerLimitedUI()()
{
  id v1 = objc_msgSend(v0, sel_collectionView);
  if (!v1)
  {
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession;
  double v4 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession];
  if (v4)
  {
    uint64_t v5 = v0;
    id v6 = v4;
    id v7 = objc_msgSend(v6, sel_limitUserInterfaces);
    if (v7)
    {
      double v8 = v7;
      unsigned __int8 v9 = objc_msgSend(v7, sel_BOOLValue);

      if (v9)
      {
        id v10 = objc_msgSend(v6, sel_configuration);
        unsigned __int8 v11 = objc_msgSend(v10, sel_limitableUserInterfaces);

        BOOL v12 = (v11 & 0x40) == 0;
        goto LABEL_8;
      }
    }
  }
  BOOL v12 = 1;
LABEL_8:
  objc_msgSend(v2, sel_setAllowsFocus_, v12);

  id v13 = objc_msgSend(v0, sel_collectionView);
  if (!v13)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  CGRect v14 = v13;
  objc_msgSend(v13, sel_setNeedsFocusUpdate);

  id v15 = *(void **)&v0[v3];
  if (!v15)
  {
LABEL_18:
    id v30 = objc_msgSend(v0, sel_navigationController);
    if (v30)
    {
      unint64_t v31 = v30;
      objc_msgSend(v30, sel_setNavigationBarHidden_animated_, 0, 0);
    }
    uint64_t v32 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView;
    uint64_t v33 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView];
    if (v33)
    {
      objc_msgSend(v33, sel_removeFromSuperview);
      uint64_t v33 = *(void **)&v0[v32];
    }
    *(void *)&v0[v32] = 0;
    goto LABEL_23;
  }
  id v16 = v0;
  id v17 = v15;
  id v18 = objc_msgSend(v17, sel_limitUserInterfaces);
  if (!v18 || (v19 = v18, unsigned int v20 = objc_msgSend(v18, sel_BOOLValue), v19, !v20))
  {

    goto LABEL_18;
  }
  id v21 = objc_msgSend(v17, sel_configuration);
  unsigned __int8 v22 = objc_msgSend(v21, sel_limitableUserInterfaces);

  if ((v22 & 0x40) == 0) {
    goto LABEL_18;
  }
  id v23 = objc_msgSend(v16, sel_navigationController);
  if (!v23) {
    goto LABEL_18;
  }
  unint64_t v36 = v23;
  id v24 = objc_msgSend(v16, sel_view);
  if (!v24)
  {
LABEL_32:
    __break(1u);
    return;
  }
  int v25 = v24;
  uint64_t v26 = specialized CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(v24, v36);

  uint64_t v27 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView;
  uint64_t v28 = *(void **)&v16[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView];
  if (v28)
  {
    objc_msgSend(v28, sel_removeFromSuperview);
    uint64_t v29 = *(void **)&v16[v27];
  }
  else
  {
    uint64_t v29 = 0;
  }
  *(void *)&v16[v27] = v26;

  if (*(void *)&v16[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_requestContentManager])
  {
    id v34 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    CAFUIRequestContentManager.dismiss(identifier:completion:)(v34, v35, (uint64_t)closure #1 in CAFUIDevicePickerViewController.updateDevicePickerLimitedUI(), 0);
    swift_bridgeObjectRelease();
  }
  uint64_t v33 = v36;
LABEL_23:
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void CAFUIDevicePickerViewController.__allocating_init(coder:)()
{
  id v1 = objc_allocWithZone(v0);
  specialized CAFUIDevicePickerViewController.init(coder:)();
}

uint64_t CAFUIDevicePickerViewController.__ivar_destroyer()
{
  swift_unknownObjectRelease();
  swift_release();

  outlined destroy of IndexPath?(v0 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinningCellIndexPath);

  return swift_bridgeObjectRelease();
}

id CAFUIDevicePickerViewController.__deallocating_deinit()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = (void *)MEMORY[0x24C59F610](v2);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_removeObserver_, v3);

  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewController();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.viewDidLoad()()
{
  v29.receiver = v0;
  v29.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewController();
  objc_msgSendSuper2(&v29, sel_viewDidLoad);
  id v1 = objc_msgSend(v0, sel_collectionView);
  if (!v1)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_collectionViewLayout);

  self;
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_setScrollDirection_, 1);

  id v4 = objc_msgSend(v0, sel_collectionView);
  if (!v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  objc_super v5 = v4;
  id v6 = objc_msgSend(v4, sel_collectionViewLayout);

  self;
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_setMinimumLineSpacing_, 20.0);

  id v7 = objc_msgSend(v0, sel_collectionView);
  if (!v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_collectionViewLayout);

  self;
  id v10 = (void *)swift_dynamicCastObjCClassUnconditional();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2495305E0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = MEMORY[0x263F8E8F8];
  *(_DWORD *)(inited + 72) = 0;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel__setRowAlignmentsOptions_, isa);

  id v13 = objc_msgSend(v0, sel_collectionView);
  if (!v13)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  CGRect v14 = v13;
  objc_msgSend(v13, sel_setShowsVerticalScrollIndicator_, 0);

  id v15 = objc_msgSend(v0, sel_collectionView);
  if (!v15)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v16 = v15;
  objc_msgSend(v15, sel_setPagingEnabled_, 1);

  id v17 = objc_msgSend(v0, sel_collectionView);
  if (!v17)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v18 = v17;
  id v19 = self;
  id v20 = objc_msgSend(v19, sel_clearColor);
  objc_msgSend(v18, sel_setBackgroundColor_, v20);

  id v21 = objc_msgSend(v0, sel_collectionView);
  if (!v21)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unsigned __int8 v22 = v21;
  objc_msgSend(v21, sel_setContentInset_, 0.0, 0.0, 0.0, 0.0);

  id v23 = objc_msgSend(v0, sel_view);
  if (!v23)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v24 = v23;
  id v25 = objc_msgSend(v19, sel_tableBackgroundColor);
  if (!v25)
  {
LABEL_21:
    __break(1u);
    return;
  }
  uint64_t v26 = v25;
  objc_msgSend(v24, sel_setBackgroundColor_, v25);

  CAFUIDevicePickerViewController.updateDevicePickerLimitedUI()();
  id v27 = objc_msgSend(v0, sel_navigationController);
  if (v27)
  {
    uint64_t v28 = v27;
    objc_msgSend(v27, sel_setDelegate_, v0);
  }
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.viewDidLayoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewController();
  objc_msgSendSuper2(&v1, sel_viewDidLayoutSubviews);
  CAFUIDevicePickerViewController.updateFlowLayout()();
  CAFUIDevicePickerViewController.updatePageControl()();
}

void CAFUIDevicePickerViewController.updateFlowLayout()()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  objc_super v1 = &unk_2696BF000;
  uint64_t v2 = static OS_os_log.default;
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_2494AC000, (os_log_t)v2, v3, "Updating flow layout", v4, 2u);
    MEMORY[0x24C5A0780](v4, -1, -1);
  }
  id v5 = objc_msgSend(v0, sel_collectionView);
  if (!v5)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  id v6 = v5;
  id v7 = objc_msgSend(v5, sel_collectionViewLayout);

  self;
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_minimumInteritemSpacing);
  double v9 = v8;

  if ((CAFUIDevicePickerViewController.isPortraitLayout.getter() & 1) == 0)
  {
    if (v9 != 20.0) {
      goto LABEL_8;
    }
LABEL_14:
    int v19 = 0;
    goto LABEL_20;
  }
  if (v9 == 60.0) {
    goto LABEL_14;
  }
LABEL_8:
  id v10 = static OS_os_log.default;
  uint64_t v2 = v0;
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 134218240;
    id v13 = objc_msgSend((id)v2, sel_collectionView);
    if (!v13)
    {
LABEL_82:

      __break(1u);
      JUMPOUT(0x24951A0ECLL);
    }
    CGRect v14 = v13;
    id v15 = objc_msgSend(v13, sel_collectionViewLayout);

    self;
    objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_minimumInteritemSpacing);
    uint64_t v17 = v16;

    double v100 = *(double *)&v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v12 + 12) = 2048;
    double v18 = 60.0;
    if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout) & 1) == 0) {
      double v18 = 20.0;
    }
    double v100 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_2494AC000, v10, v11, "Interitem spacing updated from: %f to %f", (uint8_t *)v12, 0x16u);
    MEMORY[0x24C5A0780](v12, -1, -1);
    objc_super v1 = &unk_2696BF000;
  }
  else
  {
  }
  id v20 = objc_msgSend((id)v2, sel_collectionView);
  if (!v20) {
    goto LABEL_80;
  }
  id v21 = v20;
  id v22 = objc_msgSend(v20, sel_collectionViewLayout);

  self;
  id v23 = (void *)swift_dynamicCastObjCClassUnconditional();
  double v24 = 60.0;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout) & 1) == 0) {
    double v24 = 20.0;
  }
  objc_msgSend(v23, sel_setMinimumInteritemSpacing_, v24);

  int v19 = 1;
LABEL_20:
  uint64_t v2 = CAFUIDevicePickerViewController.calculateLayoutStyle()();
  char v25 = CAFUIDevicePickerViewController.layoutStyle.getter();
  if ((specialized == infix<A>(_:_:)(v2, v25) & 1) == 0)
  {
    uint64_t v26 = *((void *)v1 + 101);
    id v27 = v0;
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v28))
    {
      uint64_t v29 = 0x6C6C616D73;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      double v100 = *(double *)&v31;
      *(_DWORD *)uint64_t v30 = 136315394;
      unint64_t v32 = 0xE500000000000000;
      uint64_t v33 = v31;
      uint64_t v34 = 0x6C6C616D73;
      switch(v27[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle])
      {
        case 1u:
          unint64_t v32 = 0xE600000000000000;
          uint64_t v34 = 0x6D756964656DLL;
          break;
        case 2u:
          uint64_t v34 = 0x656772616CLL;
          break;
        case 3u:
          unint64_t v32 = 0xE800000000000000;
          uint64_t v34 = 0x7469617274726F70;
          break;
        default:
          break;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v32, (uint64_t *)&v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2080;
      unint64_t v35 = 0xE500000000000000;
      switch((char)v2)
      {
        case 1:
          unint64_t v35 = 0xE600000000000000;
          uint64_t v29 = 0x6D756964656DLL;
          break;
        case 2:
          uint64_t v29 = 0x656772616CLL;
          break;
        case 3:
          unint64_t v35 = 0xE800000000000000;
          uint64_t v29 = 0x7469617274726F70;
          break;
        default:
          break;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v35, (uint64_t *)&v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2494AC000, v26, v28, "Layout style updated from: %s to %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5A0780](v33, -1, -1);
      MEMORY[0x24C5A0780](v30, -1, -1);
      objc_super v1 = &unk_2696BF000;
    }
    else
    {
    }
    v27[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle] = v2;
    int v19 = 1;
  }
  id v36 = CAFUIDevicePickerViewController.checkIfIsPortraitLayout()();
  uint64_t v37 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout;
  if ((v36 & 1) != (v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout] & 1))
  {
    uint64_t v2 = (uint64_t)v36;
    uint64_t v38 = v1;
    uint64_t v39 = *((void *)v1 + 101);
    os_log_type_t v40 = v0;
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 67109376;
      LODWORD(v100) = v0[v37] & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v42 + 8) = 1024;
      LODWORD(v100) = v2 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2494AC000, v39, v41, "Is portrait layout updated from: %{BOOL}d to %{BOOL}d", (uint8_t *)v42, 0xEu);
      MEMORY[0x24C5A0780](v42, -1, -1);
    }
    else
    {
    }
    v0[v37] = v2 & 1;
    int v19 = 1;
    objc_super v1 = v38;
    if (v2) {
      goto LABEL_40;
    }
LABEL_37:
    uint64_t v43 = 1;
    goto LABEL_46;
  }
  if ((v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout] & 1) == 0) {
    goto LABEL_37;
  }
LABEL_40:
  id v44 = objc_msgSend(v0, sel_collectionView);
  if (!v44)
  {
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v2 = (uint64_t)v44;
  objc_msgSend(v44, sel_bounds);
  CGFloat v46 = v45;
  CGFloat v48 = v47;
  CGFloat v50 = v49;
  CGFloat v52 = v51;

  v103.origin.CGFloat x = v46;
  v103.origin.CGFloat y = v48;
  v103.size.double width = v50;
  v103.size.double height = v52;
  double Height = CGRectGetHeight(v103);
  if (one-time initialization token for tallPortraitRequiredHeight != -1) {
    swift_once();
  }
  if (*(double *)&static CAFUIDevicePickerViewController.Constants.tallPortraitRequiredHeight > Height) {
    uint64_t v43 = 2;
  }
  else {
    uint64_t v43 = 3;
  }
LABEL_46:
  if (v43 != CAFUIDevicePickerViewController.rows.getter())
  {
    unint64_t v54 = *((void *)v1 + 101);
    uint64_t v2 = v0;
    os_log_type_t v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      unint64_t v56 = v1;
      uint64_t v57 = swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 134218240;
      double v100 = *(double *)(v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v57 + 12) = 2048;
      double v100 = *(double *)&v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2494AC000, v54, v55, "Amount of rows updated from: %ld to %ld", (uint8_t *)v57, 0x16u);
      uint64_t v58 = v57;
      objc_super v1 = v56;
      MEMORY[0x24C5A0780](v58, -1, -1);
    }
    else
    {
    }
    uint64_t v59 = v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows;
    *(void *)uint64_t v59 = v43;
    *(unsigned char *)(v59 + 8) = 0;
    int v19 = 1;
  }
  uint64_t v60 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle;
  int v61 = v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle];
  if (v61 == 3 || v61 == 0) {
    uint64_t v63 = 2;
  }
  else {
    uint64_t v63 = 3;
  }
  if (v63 != CAFUIDevicePickerViewController.columns.getter())
  {
    uint64_t v64 = *((void *)v1 + 101);
    uint64_t v2 = v0;
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      unint64_t v66 = v1;
      uint64_t v67 = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 134218240;
      double v100 = *(double *)(v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v67 + 12) = 2048;
      double v100 = *(double *)&v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2494AC000, v64, v65, "Amount of columns updated from: %ld to %ld", (uint8_t *)v67, 0x16u);
      uint64_t v68 = v67;
      objc_super v1 = v66;
      MEMORY[0x24C5A0780](v68, -1, -1);
    }
    else
    {
    }
    uint64_t v69 = v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns;
    *(void *)uint64_t v69 = v63;
    *(unsigned char *)(v69 + 8) = 0;
    int v19 = 1;
  }
  double v70 = dbl_249532190[(char)v0[v60]];
  id v71 = objc_msgSend(v0, sel_collectionView);
  if (!v71) {
    goto LABEL_76;
  }
  uint64_t v2 = (uint64_t)v71;
  id v72 = objc_msgSend(v71, sel_collectionViewLayout);

  self;
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_itemSize);
  double v74 = v73;
  double v76 = v75;

  if (v74 != v70 || v76 != 134.0)
  {
    uint64_t v77 = *((void *)v1 + 101);
    uint64_t v2 = v0;
    os_log_type_t v78 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = swift_slowAlloc();
      uint64_t v99 = swift_slowAlloc();
      double v100 = *(double *)&v99;
      *(_DWORD *)uint64_t v79 = 136315394;
      id v80 = objc_msgSend((id)v2, sel_collectionView);
      if (!v80)
      {
LABEL_81:

        __break(1u);
        goto LABEL_82;
      }
      os_log_type_t v81 = v80;
      id v82 = objc_msgSend(v80, sel_collectionViewLayout);

      self;
      objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_itemSize);
      CGFloat v84 = v83;
      CGFloat v86 = v85;

      v101.double width = v84;
      v101.double height = v86;
      uint64_t v87 = NSStringFromCGSize(v101);
      uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v90 = v89;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v90, (uint64_t *)&v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v79 + 12) = 2080;
      v102.double height = 134.0;
      v102.double width = v70;
      Swift::String v91 = NSStringFromCGSize(v102);
      uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v94 = v93;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v94, (uint64_t *)&v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2494AC000, v77, v78, "Flow layout item size updated from: %s to: %s", (uint8_t *)v79, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5A0780](v99, -1, -1);
      MEMORY[0x24C5A0780](v79, -1, -1);
    }
    else
    {
    }
    id v95 = objc_msgSend((id)v2, sel_collectionView);
    if (!v95) {
      goto LABEL_79;
    }
    uint64_t v2 = (uint64_t)v95;
    id v96 = objc_msgSend(v95, sel_collectionViewLayout);

    self;
    objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_setItemSize_, v70, 134.0);

    goto LABEL_73;
  }
  if (v19)
  {
LABEL_73:
    id v97 = objc_msgSend(v0, sel_collectionView);
    if (v97)
    {
      uint64_t v98 = v97;
      objc_msgSend(v97, sel_reloadData);

      return;
    }
    goto LABEL_77;
  }
}

void CAFUIDevicePickerViewController.updatePageControl()()
{
  objc_super v1 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = static OS_os_log.default;
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_2494AC000, v2, v3, "Updating page control", v4, 2u);
    MEMORY[0x24C5A0780](v4, -1, -1);
  }
  id v5 = objc_msgSend(v1, sel_collectionView);
  if (!v5) {
    goto LABEL_55;
  }
  id v6 = v5;
  id v7 = &v1[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
  swift_beginAccess();
  uint64_t v8 = *(void *)(*(void *)v7 + 16);
  uint64_t v9 = CAFUIDevicePickerViewController.rows.getter();
  uint64_t v10 = CAFUIDevicePickerViewController.columns.getter();
  if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
  {
    __break(1u);
    goto LABEL_40;
  }
  double v11 = ceil((double)v8 / (double)(v9 * v10));
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  objc_msgSend(v6, sel_setScrollEnabled_, (uint64_t)v11 > 1);

  uint64_t v12 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl;
  id v13 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl];
  if (v13)
  {
    uint64_t v14 = *(void *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
    uint64_t v15 = *(void *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
    if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    double v16 = ceil((double)*(uint64_t *)(*(void *)v7 + 16) / (double)(v14 * v15));
    if ((~*(void *)&v16 & 0x7FF0000000000000) == 0)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    if (v16 <= -9.22337204e18)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (v16 >= 9.22337204e18)
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    objc_msgSend(v13, sel_setHidden_, (uint64_t)v16 < 2);
  }
  uint64_t v17 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows;
  uint64_t v18 = *(void *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  uint64_t v19 = *(void *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
  uint64_t v20 = v18 * v19;
  uint64_t v21 = (unsigned __int128)(v18 * (__int128)v19) >> 64;
  BOOL v22 = v21 == v20 >> 63;
  BOOL v23 = v21 != v20 >> 63;
  if (!v22) {
    goto LABEL_43;
  }
  double v24 = ceil((double)*(uint64_t *)(*(void *)v7 + 16) / (double)v20);
  if ((~*(void *)&v24 & 0x7FF0000000000000) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v24 >= 9.22337204e18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if ((uint64_t)v24 >= 2)
  {
    char v25 = *(void **)&v1[v12];
    if (!v25)
    {
      uint64_t v61 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns;
      id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F829F0]), sel_init);
      id v27 = self;
      id v28 = objc_msgSend(v27, sel_labelColor);
      objc_msgSend(v26, sel_setCurrentPageIndicatorTintColor_, v28);

      id v29 = objc_msgSend(v27, sel_labelColor);
      id v30 = objc_msgSend(v29, sel_colorWithAlphaComponent_, 0.3);

      objc_msgSend(v26, sel_setPageIndicatorTintColor_, v30);
      objc_msgSend(v26, sel_setUserInteractionEnabled_, 0);
      objc_msgSend(v26, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      id v31 = objc_msgSend(v1, sel_view);
      if (!v31)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      unint64_t v32 = v31;
      id v33 = objc_msgSend(v1, sel_collectionView);
      if (!v33)
      {
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      uint64_t v34 = v33;
      uint64_t v60 = v17;
      objc_msgSend(v32, sel_insertSubview_belowSubview_, v26, v33);

      unint64_t v35 = *(void **)&v1[v12];
      *(void *)&v1[v12] = v26;
      id v36 = v26;

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_249530110;
      id v62 = v36;
      id v38 = objc_msgSend(v36, sel_centerXAnchor);
      id v39 = objc_msgSend(v1, sel_view);
      if (!v39)
      {
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      os_log_type_t v40 = v39;
      id v41 = objc_msgSend(v39, sel_safeAreaLayoutGuide);

      id v42 = objc_msgSend(v41, sel_centerXAnchor);
      id v43 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v42);

      *(void *)(v37 + 32) = v43;
      id v44 = objc_msgSend(v62, sel_bottomAnchor);
      id v45 = objc_msgSend(v1, sel_view);
      if (!v45)
      {
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      CGFloat v46 = v45;
      double v47 = self;
      id v48 = objc_msgSend(v46, sel_safeAreaLayoutGuide);

      id v49 = objc_msgSend(v48, sel_bottomAnchor);
      id v50 = objc_msgSend(v44, sel_constraintEqualToAnchor_, v49);

      *(void *)(v37 + 40) = v50;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v47, sel_activateConstraints_, isa);

      char v25 = *(void **)&v1[v12];
      if (!v25)
      {
LABEL_61:
        __break(1u);
        return;
      }
      uint64_t v52 = *(void *)&v1[v60];
      uint64_t v53 = *(void *)&v1[v61];
      uint64_t v20 = v52 * v53;
      BOOL v23 = (unsigned __int128)(v52 * (__int128)v53) >> 64 != (v52 * v53) >> 63;
    }
    if (v23) {
      goto LABEL_51;
    }
    double v54 = ceil((double)*(uint64_t *)(*(void *)v7 + 16) / (double)v20);
    if ((~*(void *)&v54 & 0x7FF0000000000000) == 0)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v54 <= -9.22337204e18)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v54 >= 9.22337204e18)
    {
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    objc_msgSend(v25, sel_setNumberOfPages_, (uint64_t)v54);
    char v55 = CAFUIDevicePickerViewController.isPortraitLayout.getter();
    unint64_t v56 = *(void **)&v1[v12];
    if (!v56)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (v55) {
      double v57 = 20.0;
    }
    else {
      double v57 = 40.0;
    }
    id v58 = objc_msgSend(v56, sel_heightAnchor);
    id v59 = objc_msgSend(v58, sel_constraintEqualToConstant_, v57);

    CAFUIDevicePickerViewController.pageControlHeightConstraint.setter(v59);
  }
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.updateEmptyView(title:)(Swift::String_optional title)
{
  objc_super v1 = (void *)MEMORY[0x24C59F610](0x43495645445F4F4ELL, 0xEA00000000005345);
  id v2 = CAFUILocalizedStringForKey(v1);

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = v4;

  v6.value._uint64_t countAndFlagsBits = v3;
  v6.value._object = v5;
  CAFUICollectionViewController.updateEmptyView(title:)(v6);

  swift_bridgeObjectRelease();
}

double CAFUIDevicePickerViewController.collectionView(_:layout:minimumInteritemSpacingForSectionAt:)()
{
  char v0 = CAFUIDevicePickerViewController.isPortraitLayout.getter();
  double result = 60.0;
  if ((v0 & 1) == 0) {
    return 20.0;
  }
  return result;
}

uint64_t CAFUIDevicePickerViewController.collectionView(_:shouldSelectItemAt:)()
{
  return 1;
}

uint64_t CAFUIDevicePickerViewController.collectionView(_:cellForItemAt:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Swift::String_optional v6 = (void *)type metadata accessor for IndexPath();
  unint64_t v89 = (void (**)(void, void, void))*(v6 - 1);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v84[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v87 = &v84[-v11];
  MEMORY[0x270FA5388](v10);
  os_log_t v86 = (os_log_t)&v84[-v12];
  uint64_t v13 = type metadata accessor for CAFUIDevicePickerViewCell();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v15 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  uint64_t v19 = (void *)MEMORY[0x24C59F610](v16, v18);
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v21 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v19, isa);

  uint64_t v22 = swift_dynamicCastClass();
  if (v22)
  {
    BOOL v23 = (char *)v22;
    uint64_t v24 = CAFUIDevicePickerViewController.adjustedIndex(for:)(a2);
    char v25 = (uint64_t *)(v3 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items);
    swift_beginAccess();
    uint64_t v26 = *v25;
    uint64_t v27 = *(void *)(*v25 + 16);
    uint64_t v88 = v24;
    if (v24 >= v27)
    {
      uint64_t v13 = (uint64_t)v6;
      if (one-time initialization token for default == -1)
      {
LABEL_15:
        id v45 = static OS_os_log.default;
        CGFloat v46 = v89;
        ((void (**)(unsigned char *, uint64_t, uint64_t))v89)[2](v9, a2, v13);
        os_log_type_t v47 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v45, v47))
        {
          uint64_t v48 = swift_slowAlloc();
          uint64_t v49 = swift_slowAlloc();
          v95[0] = v49;
          *(_DWORD *)uint64_t v48 = 136315394;
          uint64_t v87 = (unsigned char *)(v48 + 4);
          _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x263F07A30]);
          uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
          v91[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          ((void (*)(unsigned char *, uint64_t))v46[1])(v9, v13);
          *(_WORD *)(v48 + 12) = 2048;
          v91[0] = v88;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_2494AC000, v45, v47, "Hiding cell for index path: %s, with adjusted index: %ld", (uint8_t *)v48, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x24C5A0780](v49, -1, -1);
          MEMORY[0x24C5A0780](v48, -1, -1);
        }
        else
        {
          ((void (*)(unsigned char *, uint64_t))v46[1])(v9, v13);
        }
        objc_msgSend(v23, sel_setHidden_, 1);
        return (uint64_t)v23;
      }
    }
    else
    {
      if ((v24 & 0x8000000000000000) == 0)
      {
        id v28 = v6;
        outlined init with copy of CAFUIImageRepresentableItemProtocol(v26 + 40 * v24 + 32, (uint64_t)v95);
        id v29 = *(void **)(v3 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pairedDevices);
        id v30 = objc_msgSend(v29, sel_pairedDevicesInformation);
        uint64_t v31 = CAFPairedDevicesInformation.sortedPairedDevices.getter();

        if ((v31 & 0xC000000000000001) != 0)
        {
          unint64_t v32 = (void *)MEMORY[0x24C59FC50](v24, v31);
        }
        else
        {
          if ((unint64_t)v24 >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_42;
          }
          unint64_t v32 = *(id *)(v31 + 8 * v24 + 32);
        }
        Swift::String_optional v6 = v32;
        swift_bridgeObjectRelease();
        id v33 = objc_msgSend(v6, sel_identifier);
        if (v33)
        {
          uint64_t v34 = v33;
          uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v37 = v36;

          swift_bridgeObjectRelease();
          uint64_t v38 = HIBYTE(v37) & 0xF;
          if ((v37 & 0x2000000000000000) == 0) {
            uint64_t v38 = v35 & 0xFFFFFFFFFFFFLL;
          }
          if (v38)
          {
            uint64_t v39 = v96;
            uint64_t v40 = v97;
            __swift_project_boxed_opaque_existential_1(v95, v96);
            id v41 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v40 + 24))(v39, v40);
            char v42 = CAFUIDevicePickerViewController.layoutStyle.getter();
            CAFUIDevicePickerViewCell.configure(with:selectedImage:for:device:)(v95, v41, v42, v6);

            objc_msgSend(v23, sel_setSelected_, 0);
            objc_msgSend(v23, sel_setHidden_, 0);
            if (objc_msgSend(v6, sel_state) == 2
              && *(void *)(*(void *)(v3
                                       + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_connectedDeviceSupportedActions)
                           + 16))
            {
              uint64_t v43 = 1;
              uint64_t v44 = 1;
            }
            else if (objc_msgSend(v6, sel_state) == 2 {
                   || (id v64 = objc_msgSend(v29, sel_pairedDevicesAction),
            }
                       unsigned __int8 v65 = objc_msgSend(v64, sel_hasConnectDevice),
                       v64,
                       (v65 & 1) == 0))
            {
              uint64_t v43 = 0;
              uint64_t v44 = 2;
            }
            else
            {
              uint64_t v44 = 1;
              uint64_t v43 = 1;
            }
            unint64_t v66 = v89;
            os_log_t v67 = v86;
            unint64_t v89 = (void (**)(void, void, void))v6;
            objc_msgSend(v23, sel_setUserInteractionEnabled_, v43);
            objc_msgSend(*(id *)&v23[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label], sel_setEnabled_, v43);
            objc_msgSend(*(id *)&v23[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView], sel_setTintAdjustmentMode_, v44);
            char v68 = v23[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner];
            v23[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner] = 0;
            CAFUIDevicePickerViewCell.showSpinner.didset(v68);
            if (one-time initialization token for default != -1) {
              swift_once();
            }
            uint64_t v69 = static OS_os_log.default;
            ((void (**)(os_log_t, uint64_t, void *))v66)[2](v67, a2, v28);
            outlined init with copy of CAFUIImageRepresentableItemProtocol((uint64_t)v95, (uint64_t)v91);
            os_log_type_t v70 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v69, v70))
            {
              uint64_t v71 = swift_slowAlloc();
              uint64_t v87 = (unsigned char *)swift_slowAlloc();
              unint64_t v94 = v87;
              *(_DWORD *)uint64_t v71 = 136315650;
              _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x263F07A30]);
              uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, (uint64_t *)&v94);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              ((void (*)(os_log_t, void *))v66[1])(v67, v28);
              *(_WORD *)(v71 + 12) = 2048;
              uint64_t v90 = v88;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v71 + 22) = 2080;
              uint64_t v74 = v92;
              uint64_t v75 = v93;
              __swift_project_boxed_opaque_existential_1(v91, v92);
              uint64_t v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8))(v74, v75);
              uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, (uint64_t *)&v94);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v91);
              _os_log_impl(&dword_2494AC000, v69, v70, "Returning cell for index path: %s, with adjusted index: %ld, item: %s)", (uint8_t *)v71, 0x20u);
              os_log_type_t v78 = v87;
              swift_arrayDestroy();
              MEMORY[0x24C5A0780](v78, -1, -1);
              MEMORY[0x24C5A0780](v71, -1, -1);
            }
            else
            {

              ((void (*)(os_log_t, void *))v66[1])(v67, v28);
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v91);
            }
LABEL_36:
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
            return (uint64_t)v23;
          }
        }
        if (one-time initialization token for default == -1)
        {
LABEL_18:
          uint64_t v52 = static OS_os_log.default;
          uint64_t v53 = v89;
          double v54 = v87;
          ((void (**)(unsigned char *, uint64_t, void *))v89)[2](v87, a2, v28);
          char v55 = v6;
          int v56 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v52, (os_log_type_t)v56))
          {
            int v85 = v56;
            os_log_t v86 = v52;
            uint64_t v57 = swift_slowAlloc();
            uint64_t v58 = swift_slowAlloc();
            v91[0] = v58;
            *(_DWORD *)uint64_t v57 = 136315650;
            id v59 = objc_msgSend(v55, sel_name);
            if (v59)
            {
              uint64_t v60 = v59;
              uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v63 = v62;
            }
            else
            {
              unint64_t v63 = 0xE300000000000000;
              uint64_t v61 = 7104878;
            }
            unint64_t v94 = (unsigned char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, v91);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v57 + 12) = 2080;
            _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x263F07A30]);
            uint64_t v79 = v87;
            uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v94 = (unsigned char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v91);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            ((void (*)(unsigned char *, void *))v89[1])(v79, v28);
            *(_WORD *)(v57 + 22) = 2048;
            unint64_t v94 = (unsigned char *)v88;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_2494AC000, v86, (os_log_type_t)v85, "No device identifier for device name: %s at indexPath: %s, with adjusted index: %ld", (uint8_t *)v57, 0x20u);
            swift_arrayDestroy();
            MEMORY[0x24C5A0780](v58, -1, -1);
            MEMORY[0x24C5A0780](v57, -1, -1);
          }
          else
          {

            ((void (*)(unsigned char *, void *))v53[1])(v54, v28);
          }
          id v82 = v21;
          objc_msgSend(v23, sel_setHidden_, 1);

          goto LABEL_36;
        }
LABEL_42:
        swift_once();
        goto LABEL_18;
      }
      __break(1u);
    }
    swift_once();
    goto LABEL_15;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CAFUIDevicePickerViewController.adjustedIndex(for:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  Swift::String_optional v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((CAFUIDevicePickerViewController.isPortraitLayout.getter() & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v7 = IndexPath.item.getter();
  uint64_t result = CAFUIDevicePickerViewController.rows.getter();
  if (!result)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v9 = result;
  if (v7 == 0x8000000000000000 && result == -1) {
    goto LABEL_33;
  }
  uint64_t result = IndexPath.item.getter();
  uint64_t v10 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows;
  uint64_t v11 = *(void *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  if (!v11) {
    goto LABEL_25;
  }
  if (result == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  uint64_t v12 = result % v11;
  uint64_t result = CAFUIDevicePickerViewController.columns.getter();
  uint64_t v13 = v12 * result;
  if ((unsigned __int128)(v12 * (__int128)result) >> 64 != (v12 * result) >> 63) {
    goto LABEL_29;
  }
  BOOL v14 = __OFADD__(v13, v7 / v9);
  uint64_t v15 = v13 + v7 / v9;
  if (v14)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t result = IndexPath.section.getter();
  uint64_t v16 = *(void *)&v1[v10];
  uint64_t v17 = *(void *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
  uint64_t v18 = v16 * v17;
  if ((unsigned __int128)(v16 * (__int128)v17) >> 64 != (v16 * v17) >> 63)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v19 = result * v18;
  if ((unsigned __int128)(result * (__int128)v18) >> 64 != (result * v18) >> 63)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }
  uint64_t v20 = v15 + v19;
  if (!__OFADD__(v15, v19)) {
    goto LABEL_18;
  }
  __break(1u);
LABEL_15:
  uint64_t v21 = IndexPath.row.getter();
  uint64_t v22 = IndexPath.section.getter();
  uint64_t v23 = CAFUIDevicePickerViewController.rows.getter();
  uint64_t result = CAFUIDevicePickerViewController.columns.getter();
  uint64_t v24 = v23 * result;
  if ((unsigned __int128)(v23 * (__int128)result) >> 64 != (v23 * result) >> 63)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v25 = v22 * v24;
  if ((unsigned __int128)(v22 * (__int128)v24) >> 64 != (v22 * v24) >> 63)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v20 = v21 + v25;
  if (__OFADD__(v21, v25))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_18:
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v26 = static OS_os_log.default;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v27 = v1;
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = v20;
    uint64_t v37 = v35;
    *(_DWORD *)uint64_t v29 = 134218498;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 12) = 2080;
    os_log_t v34 = v26;
    _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x263F07A30]);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    *(_WORD *)(v29 + 22) = 1024;
    char v32 = v27[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout];

    LODWORD(v36) = v32 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_2494AC000, v34, v28, "Returning adjusted index: %ld for indexPath: %s. isPortraitLayout: %{BOOL}d", (uint8_t *)v29, 0x1Cu);
    uint64_t v33 = v35;
    swift_arrayDestroy();
    MEMORY[0x24C5A0780](v33, -1, -1);
    MEMORY[0x24C5A0780](v29, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v20;
}

void CAFUIDevicePickerViewController.collectionView(_:didSelectItemAt:)(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v10 = static OS_os_log.default;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v50 = v3;
    uint64_t v14 = v13;
    v53[0] = v13;
    uint64_t v51 = a2;
    *(_DWORD *)uint64_t v12 = 136315138;
    v49[1] = v12 + 4;
    _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x263F07A30]);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v53);
    a2 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl(&dword_2494AC000, v10, v11, "Selecting item at index %s", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v17 = v14;
    uint64_t v3 = v50;
    MEMORY[0x24C5A0780](v17, -1, -1);
    MEMORY[0x24C5A0780](v12, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  unint64_t v18 = CAFUIDevicePickerViewController.adjustedIndex(for:)(a2);
  uint64_t v19 = *(void **)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pairedDevices];
  id v20 = objc_msgSend(v19, sel_pairedDevicesInformation);
  uint64_t v21 = CAFPairedDevicesInformation.sortedPairedDevices.getter();

  if ((v21 & 0xC000000000000001) != 0)
  {
    id v22 = (id)MEMORY[0x24C59FC50](v18, v21);
    goto LABEL_10;
  }
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v18 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_28:
    __break(1u);
    return;
  }
  id v22 = *(id *)(v21 + 8 * v18 + 32);
LABEL_10:
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v25 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v25)
  {
    type metadata accessor for CAFUIDevicePickerViewCell();
    uint64_t v26 = swift_dynamicCastClass();
    if (v26
      && (uint64_t v27 = v26, v51 = a2, (v28 = objc_msgSend(v23, sel_identifier)) != 0))
    {
      uint64_t v29 = v28;
      uint64_t v50 = a1;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      if (objc_msgSend(v23, sel_state) == 2)
      {
        swift_bridgeObjectRelease();
        uint64_t v33 = *(void *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_connectedDeviceSupportedActions];
        os_log_t v34 = *(void **)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession];
        id v35 = objc_allocWithZone((Class)type metadata accessor for CAFUIDevicePickerDetailViewController());
        id v36 = v34;
        id v37 = v23;
        id v38 = v19;
        swift_bridgeObjectRetain();
        uint64_t v39 = v3;
        id v40 = CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:)(v37, v38, v33, v34, (uint64_t)v3, (uint64_t)&protocol witness table for CAFUIDevicePickerViewController);
        id v41 = objc_msgSend(v39, sel_navigationController);
        if (v41)
        {
          char v42 = v41;
          objc_msgSend(v41, sel_pushViewController_animated_, v40, 1);
        }
        Class v43 = IndexPath._bridgeToObjectiveC()().super.isa;
        id v44 = objc_msgSend(v50, sel_cellForItemAtIndexPath_, v43);

        if (v44)
        {
          objc_msgSend(v44, sel_setSelected_, 0);
        }
      }
      else
      {
        CAFUIDevicePickerViewController.setProcessingUI(for:at:)(v27, v51);
        id v45 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_delegate];
        swift_beginAccess();
        if (*(void *)v45)
        {
          uint64_t v46 = *((void *)v45 + 1);
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 8);
          swift_unknownObjectRetain();
          v48(1, v30, v32, ObjectType, v46);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        id v37 = v23;
      }
    }
    else
    {
      id v37 = v25;
      id v25 = v23;
    }

    uint64_t v23 = v25;
  }
}

id CAFUIDevicePickerViewController.setProcessingUI(for:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = objc_msgSend(v3, sel_collectionView);
  if (result)
  {
    uint64_t v10 = result;
    objc_msgSend(result, sel_setUserInteractionEnabled_, 0);

    objc_msgSend(v3, sel_setNeedsFocusUpdate);
    char v11 = *(unsigned char *)(a1 + OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner);
    *(unsigned char *)(a1 + OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner) = 1;
    CAFUIDevicePickerViewCell.showSpinner.didset(v11);
    uint64_t v12 = type metadata accessor for IndexPath();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v8, a2, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
    uint64_t v14 = (uint64_t)v3 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinningCellIndexPath;
    swift_beginAccess();
    outlined assign with take of IndexPath?((uint64_t)v8, v14);
    return (id)swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void CAFUIDevicePickerViewController.pairedDevicesInformationService(_:didUpdatePairedDeviceList:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = static OS_os_log.default;
  id v7 = a2;
  id v8 = a1;
  id v9 = v7;
  id v10 = v8;
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v11))
  {
    id v36 = v3;
    uint64_t v12 = swift_slowAlloc();
    os_log_t v34 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    v37[0] = v35;
    *(_DWORD *)uint64_t v12 = 138412546;
    id v13 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_t v34 = v9;

    *(_WORD *)(v12 + 12) = 2080;
    unint64_t v14 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
    id v15 = v10;
    uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v14);
    swift_bridgeObjectRelease();

    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIImageRepresentableItemProtocol);
    uint64_t v18 = MEMORY[0x24C59F730](v16, v17);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2494AC000, v6, v11, "Paired device list updated: %@, items: %s", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C5A0780](v34, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5A0780](v35, -1, -1);
    uint64_t v21 = v12;
    uint64_t v3 = v36;
    MEMORY[0x24C5A0780](v21, -1, -1);
  }
  else
  {
  }
  unint64_t v22 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
  id v23 = v10;
  uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v22);
  swift_bridgeObjectRelease();

  id v25 = (uint64_t *)&v3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
  swift_beginAccess();
  *id v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)MEMORY[0x24C59F610](0x43495645445F4F4ELL, 0xEA00000000005345);
  id v27 = CAFUILocalizedStringForKey(v26);

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  v31.value._uint64_t countAndFlagsBits = v28;
  v31.value._object = v30;
  CAFUICollectionViewController.updateEmptyView(title:)(v31);
  swift_bridgeObjectRelease();
  id v32 = objc_msgSend(v3, sel_collectionView);
  if (v32)
  {
    uint64_t v33 = v32;
    objc_msgSend(v32, sel_reloadData);
  }
  else
  {
    __break(1u);
  }
}

void CAFUIDevicePickerViewController.updatePTButton()()
{
  objc_super v1 = v0;
  if (*(void *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_requestContentManager])
  {
    v2._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int v3 = CAFUIRequestContentManager.state(for:)(v2);
    swift_bridgeObjectRelease();
    if (!v3) {
      return;
    }
  }
  uint64_t v4 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState;
  if (!v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState])
  {
    id v30 = objc_msgSend(v1, sel_navigationItem);
    objc_msgSend(v30, sel_setRightBarButtonItem_, 0);
LABEL_12:
    uint64_t v28 = v30;
    goto LABEL_13;
  }
  uint64_t v5 = (void *)MEMORY[0x24C59F610](0x445F4547414E414DLL, 0xEE00534543495645);
  id v6 = CAFUILocalizedStringForKey(v5);

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = v8;

  v10.value._uint64_t countAndFlagsBits = v7;
  v10.value._object = v9;
  CAFUIPunchthroughState.buttonForCurrentState(title:)(v11, v10);
  id v29 = v12;
  swift_bridgeObjectRelease();
  if (!v29) {
    return;
  }
  uint64_t v13 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton;
  unint64_t v14 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton];
  if (v14) {
    objc_msgSend(v14, sel_removeFromSuperview);
  }
  id v15 = objc_msgSend(v1, sel_navigationController, v29);
  if (!v15) {
    goto LABEL_12;
  }
  uint64_t v16 = v15;
  id v17 = objc_msgSend(v15, sel_navigationBar);

  if (!v17) {
    goto LABEL_12;
  }
  objc_msgSend(v30, sel_addTarget_action_forControlEvents_, v1, sel_devicePickerButtonTapped, 64);
  objc_msgSend(v17, sel_addSubview_, v30);
  objc_msgSend(v30, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v18 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_249530110;
  id v20 = objc_msgSend(v30, sel_trailingAnchor);
  id v21 = objc_msgSend(v17, sel_trailingAnchor);
  id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(void *)(v19 + 32) = v22;
  id v23 = objc_msgSend(v30, sel_centerYAnchor);
  id v24 = objc_msgSend(v17, sel_centerYAnchor);
  id v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  *(void *)(v19 + 40) = v25;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_activateConstraints_, isa);

  objc_msgSend(v30, sel_setEnabled_, v1[v4] != 0);
  id v27 = *(void **)&v1[v13];
  *(void *)&v1[v13] = v30;

  uint64_t v28 = v27;
LABEL_13:
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.devicePickerButtonTapped()()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  objc_super v1 = static OS_os_log.default;
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_2494AC000, v1, v2, "Requesting presentation of device picker PT!", v3, 2u);
    MEMORY[0x24C5A0780](v3, -1, -1);
  }
  if (*(void *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_requestContentManager])
  {
    uint64_t v4 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v0;
    id v8 = v0;
    CAFUIRequestContentManager.present(identifier:completion:)(v4, v6, (uint64_t)partial apply for closure #1 in CAFUIDevicePickerViewController.devicePickerButtonTapped(), v7);
    swift_bridgeObjectRelease();
    swift_release();
  }
}

BOOL closure #1 in CAFUIDevicePickerViewController.devicePickerButtonTapped()(char a1, uint64_t a2)
{
  if (a1)
  {
    *(unsigned char *)(a2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState) = 2;
    CAFUIDevicePickerViewController.updatePTButton()();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    os_log_type_t v2 = static OS_os_log.default;
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL result = os_log_type_enabled(v2, v3);
    if (result)
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      uint64_t v6 = "Presentation of device picker PT was successful!";
      goto LABEL_10;
    }
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    os_log_type_t v2 = static OS_os_log.default;
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL result = os_log_type_enabled(v2, v3);
    if (result)
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      uint64_t v6 = "Presentation of device picker PT was not successful.";
LABEL_10:
      _os_log_impl(&dword_2494AC000, v2, v3, v6, v5, 2u);
      JUMPOUT(0x24C5A0780);
    }
  }
  return result;
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.punchThroughController(_:didDismissPunchThroughWithIdentifier:)(CAFUIPunchThroughController *_, Swift::String didDismissPunchThroughWithIdentifier)
{
  *(unsigned char *)(v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState) = 1;
  CAFUIDevicePickerViewController.updatePTButton()();
}

void CAFUIDevicePickerViewController.__allocating_init(setting:isRHD:)()
{
}

void CAFUIDevicePickerViewController.init(setting:isRHD:)()
{
}

void closure #1 in CAFUIDevicePickerViewController.updateDevicePickerLimitedUI()(char a1)
{
  if (a1) {
    static os_log_type_t.default.getter();
  }
  else {
    static os_log_type_t.error.getter();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  id v1 = (id)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.resetSpinningCellAndUserInteraction()()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  os_log_type_t v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v8 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in CAFUIDevicePickerViewController.resetSpinningCellAndUserInteraction();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_4;
  Swift::String_optional v10 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24C59F8E0](0, v7, v3, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id closure #1 in CAFUIDevicePickerViewController.resetSpinningCellAndUserInteraction()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  os_log_type_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  id result = (id)MEMORY[0x24C5A0810](a1 + 16);
  if (result)
  {
    uint64_t v13 = result;
    id result = objc_msgSend(result, sel_collectionView);
    if (result)
    {
      unint64_t v14 = result;
      objc_msgSend(result, sel_setUserInteractionEnabled_, 1);

      uint64_t v15 = (uint64_t)v13 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinningCellIndexPath;
      swift_beginAccess();
      outlined init with copy of IndexPath?(v15, (uint64_t)v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {

        return (id)outlined destroy of IndexPath?((uint64_t)v7);
      }
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
      swift_beginAccess();
      outlined assign with take of IndexPath?((uint64_t)v5, v15);
      swift_endAccess();
      id result = objc_msgSend(v13, sel_collectionView);
      if (result)
      {
        uint64_t v16 = result;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
        unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        uint64_t v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_2495305E0;
        (*(void (**)(unint64_t, char *, uint64_t))(v9 + 16))(v18 + v17, v11, v8);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v16, sel_reconfigureItemsAtIndexPaths_, isa);

        return (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.shouldRequest(action:for:)(CAFUI::CAFDeviceAction action, Swift::String a2)
{
  uint64_t v3 = v2;
  object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  uint64_t v6 = action;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v53 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = type metadata accessor for IndexPath();
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v51 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v50 = (char *)&v47 - v12;
  id v13 = objc_msgSend(v3, sel_collectionView);
  if (v13)
  {
    unint64_t v14 = v13;
    objc_msgSend(v13, sel_setUserInteractionEnabled_, 0);

    objc_msgSend(v3, sel_setNeedsFocusUpdate);
    uint64_t v15 = (uint64_t *)((char *)v3 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_delegate);
    swift_beginAccess();
    if (*v15)
    {
      uint64_t v16 = v15[1];
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v16 + 8);
      swift_unknownObjectRetain();
      v18(v6, countAndFlagsBits, object, ObjectType, v16);
      swift_unknownObjectRelease();
    }
    id v19 = objc_msgSend(v3, sel_navigationController);
    if (v19)
    {
      uint64_t v20 = v19;
    }
    id v21 = objc_msgSend(v3, sel_collectionView);
    if (v21)
    {
      id v22 = v21;
      id v23 = objc_msgSend(v21, sel_visibleCells);

      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewCell);
      unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v24 >> 62)
      {
LABEL_28:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v25)
        {
LABEL_9:
          unint64_t v48 = v9;
          uint64_t v49 = v3;
          unint64_t v9 = v24 & 0xC000000000000001;
          uint64_t v26 = 4;
          uint64_t v3 = &OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier;
          while (1)
          {
            if (v9) {
              id v27 = (id)MEMORY[0x24C59FC50](v26 - 4, v24);
            }
            else {
              id v27 = *(id *)(v24 + 8 * v26);
            }
            uint64_t v28 = v27;
            uint64_t v29 = v26 - 3;
            if (__OFADD__(v26 - 4, 1))
            {
              __break(1u);
              goto LABEL_28;
            }
            type metadata accessor for CAFUIDevicePickerViewCell();
            uint64_t v30 = swift_dynamicCastClass();
            if (v30)
            {
              uint64_t v31 = v30;
              BOOL v32 = *(void *)(v30 + OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier) == countAndFlagsBits
                 && *(void *)(v30 + OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier + 8) == (void)object;
              if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                break;
              }
            }

            ++v26;
            if (v29 == v25) {
              goto LABEL_29;
            }
          }
          swift_bridgeObjectRelease();
          id v33 = objc_msgSend(v49, sel_collectionView);
          if (!v33) {
            goto LABEL_37;
          }
          os_log_t v34 = v33;
          id v35 = objc_msgSend(v33, sel_indexPathForCell_, v31);

          unint64_t v36 = v48;
          uint64_t v37 = v52;
          if (v35)
          {
            id v38 = v51;
            static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v39 = *(void (**)(char *, char *, unint64_t))(v37 + 32);
            uint64_t v40 = (uint64_t)v53;
            v39(v53, v38, v36);
            (*(void (**)(uint64_t, void, uint64_t, unint64_t))(v37 + 56))(v40, 0, 1, v36);
            if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v37 + 48))(v40, 1, v36) != 1)
            {
              uint64_t v41 = (uint64_t)v50;
              v39(v50, (char *)v40, v36);
              CAFUIDevicePickerViewController.setProcessingUI(for:at:)(v31, v41);

              (*(void (**)(uint64_t, unint64_t))(v37 + 8))(v41, v36);
              return;
            }
          }
          else
          {
            uint64_t v40 = (uint64_t)v53;
            (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v52 + 56))(v53, 1, 1, v48);
          }

          outlined destroy of IndexPath?(v40);
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v25) {
          goto LABEL_9;
        }
      }
LABEL_29:
      swift_bridgeObjectRelease();
LABEL_30:
      os_log_type_t v42 = static os_log_type_t.error.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      swift_bridgeObjectRetain_n();
      Class v43 = static OS_os_log.default.getter();
      os_log_type_t v44 = v42;
      if (os_log_type_enabled(v43, v42))
      {
        id v45 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        uint64_t v55 = v46;
        *(_DWORD *)id v45 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2494AC000, v43, v44, "Cell not visible for deviceID: %s", v45, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5A0780](v46, -1, -1);
        MEMORY[0x24C5A0780](v45, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.navigationController(_:didShow:animated:)(UINavigationController *_, UIViewController *didShow, Swift::Bool animated)
{
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v34 = v4;
  id v12 = objc_msgSend(v4, sel_collectionView);
  if (v12)
  {
    id v13 = v12;
    id v14 = objc_msgSend(v12, sel_indexPathsForSelectedItems);

    if (v14)
    {
      uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v16 = *(void *)(v15 + 16);
      uint64_t v28 = v15;
      if (v16)
      {
        uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        uint64_t v17 = v6 + 16;
        unint64_t v19 = v15 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
        uint64_t v20 = *(void *)(v17 + 56);
        id v21 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 40);
        BOOL v32 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 32);
        id v33 = v18;
        uint64_t v30 = v20;
        uint64_t v31 = (void (**)(char *, char *, uint64_t))(v17 + 16);
        uint64_t v29 = (void (**)(char *, uint64_t))(v17 - 8);
        swift_bridgeObjectRetain();
        unint64_t v27 = (v17 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        while (1)
        {
          v33(v11, v19, v5);
          id v22 = *v21;
          (*v21)(v11, 0, 1, v5);
          if ((*v32)(v11, 1, v5) == 1) {
            break;
          }
          uint64_t v23 = v17;
          (*v31)(v8, v11, v5);
          id v24 = objc_msgSend(v34, sel_collectionView, v27, v28);
          if (!v24)
          {
            __break(1u);
            goto LABEL_14;
          }
          uint64_t v25 = v24;
          Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v25, sel_deselectItemAtIndexPath_animated_, isa, 1);

          (*v29)(v8, v5);
          v19 += v30;
          --v16;
          uint64_t v17 = v23;
          if (!v16) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        id v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        swift_bridgeObjectRetain();
LABEL_10:
        v22(v11, 1, 1, v5);
      }
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
LABEL_14:
    __break(1u);
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CAFUIDevicePickerViewController.LayoutStyle(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CAFUIDevicePickerViewController.LayoutStyle()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CAFUIDevicePickerViewController.LayoutStyle()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CAFUIDevicePickerViewController.LayoutStyle()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CAFUIDevicePickerViewController.LayoutStyle@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CAFUIDevicePickerViewController.LayoutStyle.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CAFUIDevicePickerViewController.LayoutStyle(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x6C6C616D73;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x6D756964656DLL;
      goto LABEL_3;
    case 2:
      *a1 = 0x656772616CLL;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x7469617274726F70;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  unint64_t v2 = *a2;
  *unint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  _OWORD v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x24C59F6D0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

id specialized CAFUICollectionViewController.init(setting:isRHD:)(void *a1, char a2, char *a3)
{
  *(void *)&a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView] = 0;
  uint64_t v5 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  unint64_t v6 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  int64_t v7 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing];
  *(void *)int64_t v7 = 0;
  v7[8] = 1;
  int64_t v8 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting];
  *(void *)int64_t v8 = a1;
  *((void *)v8 + 1) = &protocol witness table for CAFSingleSelectImageSetting;
  int64_t v9 = a3;
  id v10 = a1;
  id v11 = objc_msgSend(v10, sel_listUserVisibleValue);
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = *(void *)(v12 + 16);
  swift_bridgeObjectRelease();
  id v14 = v10;
  uint64_t v15 = specialized Sequence.compactMap<A>(_:)(0, v13, v14);

  *(void *)&v9[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items] = v15;
  v9[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_isRHD] = a2;

  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82570]), sel_init);
  objc_msgSend(v16, sel_setMinimumLineSpacing_, 8.0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249530890;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  uint64_t v18 = MEMORY[0x263F8E8F8];
  *(void *)(inited + 96) = MEMORY[0x263F8E8F8];
  *(_DWORD *)(inited + 72) = 0;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v19;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = v18;
  *(_DWORD *)(inited + 144) = 0;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel__setRowAlignmentsOptions_, isa);

  v28.receiver = v9;
  v28.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  id v21 = objc_msgSendSuper2(&v28, sel_initWithCollectionViewLayout_, v16);
  id v22 = objc_msgSend(v14, sel_userVisibleLabel);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  uint64_t v26 = (void *)MEMORY[0x24C59F610](v23, v25);
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_setTitle_, v26);

  return v21;
}

{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  objc_super v28;
  uint64_t v29;
  uint64_t v30;

  *(void *)&a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView] = 0;
  uint64_t v5 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  unint64_t v6 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  int64_t v7 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing];
  *(void *)int64_t v7 = 0;
  v7[8] = 1;
  int64_t v8 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting];
  *(void *)int64_t v8 = a1;
  *((void *)v8 + 1) = &protocol witness table for CAFMultipleSelectImageSetting;
  int64_t v9 = a3;
  id v10 = a1;
  id v11 = objc_msgSend(v10, sel_listUserVisibleValue);
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = *(void *)(v12 + 16);
  swift_bridgeObjectRelease();
  id v14 = v10;
  uint64_t v15 = specialized Sequence.compactMap<A>(_:)(0, v13, v14);

  *(void *)&v9[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items] = v15;
  v9[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_isRHD] = a2;

  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82570]), sel_init);
  objc_msgSend(v16, sel_setMinimumLineSpacing_, 8.0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249530890;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  uint64_t v18 = MEMORY[0x263F8E8F8];
  *(void *)(inited + 96) = MEMORY[0x263F8E8F8];
  *(_DWORD *)(inited + 72) = 0;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v19;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = v18;
  *(_DWORD *)(inited + 144) = 0;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel__setRowAlignmentsOptions_, isa);

  v28.receiver = v9;
  v28.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  id v21 = objc_msgSendSuper2(&v28, sel_initWithCollectionViewLayout_, v16);
  id v22 = objc_msgSend(v14, sel_userVisibleLabel);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  uint64_t v26 = (void *)MEMORY[0x24C59F610](v23, v25);
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_setTitle_, v26);

  return v21;
}

{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  id v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  objc_super v27;
  uint64_t v28;
  uint64_t v29;

  *(void *)&a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView] = 0;
  uint64_t v5 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  unint64_t v6 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  int64_t v7 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_minimumInteritemSpacing];
  *(void *)int64_t v7 = 0;
  v7[8] = 1;
  int64_t v8 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting];
  *(void *)int64_t v8 = a1;
  *((void *)v8 + 1) = &protocol witness table for CAFPairedDevicesInformation;
  int64_t v9 = a3;
  id v10 = a1;
  id v11 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
  uint64_t v12 = v10;
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v11);
  swift_bridgeObjectRelease();

  *(void *)&v9[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items] = v13;
  v9[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_isRHD] = a2;

  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82570]), sel_init);
  objc_msgSend(v14, sel_setMinimumLineSpacing_, 8.0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249530890;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  id v16 = MEMORY[0x263F8E8F8];
  *(void *)(inited + 96) = MEMORY[0x263F8E8F8];
  *(_DWORD *)(inited + 72) = 0;
  objc_super v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v17;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = v16;
  *(_DWORD *)(inited + 144) = 0;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel__setRowAlignmentsOptions_, isa);

  v27.receiver = v9;
  v27.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  uint64_t v19 = objc_msgSendSuper2(&v27, sel_initWithCollectionViewLayout_, v14);
  uint64_t v20 = (void *)MEMORY[0x24C59F610](0x495F444552494150, 0xEE0053454E4F4850);
  id v21 = CAFUILocalizedStringForKey(v20);

  id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  uint64_t v25 = (void *)MEMORY[0x24C59F610](v22, v24);
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_setTitle_, v25);

  return v19;
}

id specialized Sequence.forEach(_:)(uint64_t a1, void *a2)
{
  id v27 = a2;
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x270FA5388](v7 - 8);
  int64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  v20[2] = a1;
  if (v10)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v11 = v4 + 16;
    uint64_t v26 = v12;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v22 = v14;
    uint64_t v23 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    id v21 = (void (**)(char *, uint64_t))(v11 - 8);
    swift_bridgeObjectRetain();
    uint64_t v25 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 40);
    v20[1] = (v11 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      v26(v9, v13, v3);
      uint64_t v15 = *v25;
      (*v25)(v9, 0, 1, v3);
      if ((*v24)(v9, 1, v3) == 1) {
        break;
      }
      uint64_t v16 = v11;
      (*v23)(v6, v9, v3);
      id result = objc_msgSend(v27, sel_collectionView);
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v18 = result;
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v18, sel_deselectItemAtIndexPath_animated_, isa, 1);

      (*v21)(v6, v3);
      v13 += v22;
      --v10;
      uint64_t v11 = v16;
      if (!v10) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    swift_bridgeObjectRetain();
LABEL_8:
    v15(v9, 1, 1, v3);
  }
  return (id)swift_bridgeObjectRelease();
}

char *specialized static CAFUIDevicePickerViewController.connectedDeviceSupportedActions(for:)(void *a1)
{
  if (objc_msgSend(a1, sel_hasDisconnectDevice))
  {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v4 = *((void *)v2 + 2);
    unint64_t v3 = *((void *)v2 + 3);
    if (v4 >= v3 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v4 + 1;
    v2[v4 + 32] = 2;
  }
  else
  {
    uint64_t v2 = (char *)MEMORY[0x263F8EE78];
  }
  if (objc_msgSend(a1, sel_hasForgetDevice))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v6 = *((void *)v2 + 2);
    unint64_t v5 = *((void *)v2 + 3);
    if (v6 >= v5 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v6 + 1;
    v2[v6 + 32] = 3;
  }
  return v2;
}

uint64_t sub_24951FB60()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:)(uint64_t a1)
{
  closure #1 in CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:)(a1, v1);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

void specialized CAFUIDevicePickerViewController.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_delegate];
  void *v1 = 0;
  v1[1] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___cellSize];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  v2[16] = 1;
  unint64_t v3 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  *(void *)unint64_t v3 = 0;
  v3[8] = 1;
  unint64_t v4 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
  *(void *)unint64_t v4 = 0;
  v4[8] = 1;
  v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle] = 4;
  v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout] = 2;
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView] = 0;
  v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControlHeightConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinnerTimer] = 0;
  unint64_t v5 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinningCellIndexPath];
  uint64_t v6 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double specialized CAFUIDevicePickerViewController.collectionView(_:layout:insetForSectionAt:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v96 = *(void **)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  id v95 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  unint64_t v94 = (char *)&v91 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v91 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v91 - v12;
  objc_msgSend(a1, sel_bounds);
  double Width = CGRectGetWidth(v99);
  objc_msgSend(a1, sel_bounds);
  double Height = CGRectGetHeight(v100);
  uint64_t v16 = CAFUIDevicePickerViewController.rows.getter();
  CAFUIDevicePickerViewController.cellSize.getter();
  double v18 = v17;
  uint64_t v93 = (void (*)(char *, uint64_t, uint64_t))OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows;
  uint64_t v19 = *(void *)&v2[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  if (CAFUIDevicePickerViewController.isPortraitLayout.getter())
  {
    double v20 = (Height + ((double)v19 + -1.0) * -60.0 - v18 * (double)v16) * 0.5;
  }
  else
  {
    id v21 = objc_msgSend(v2, sel_view);
    if (!v21)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v22 = v21;
    objc_msgSend(v21, sel_bounds);
    CGFloat v24 = v23;
    CGFloat v26 = v25;
    CGFloat v28 = v27;
    CGFloat v30 = v29;

    v101.origin.CGFloat x = v24;
    v101.origin.CGFloat y = v26;
    v101.size.double width = v28;
    v101.size.double height = v30;
    double v31 = CGRectGetHeight(v101);
    id v32 = objc_msgSend(v2, sel_view);
    if (!v32)
    {
LABEL_50:
      __break(1u);
      JUMPOUT(0x2495206DCLL);
    }
    id v33 = v32;
    double v34 = v31 * 0.28;
    objc_msgSend(v32, sel_safeAreaInsets);
    double v36 = v35;

    double v20 = v34 - v36;
  }
  double v37 = *(double *)&v2[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___cellSize + 8];
  id v38 = objc_msgSend(v2, sel_view);
  if (!v38)
  {
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v39 = v38;
  objc_msgSend(v38, sel_bounds);
  CGFloat v41 = v40;
  CGFloat v43 = v42;
  CGFloat v45 = v44;
  CGFloat v47 = v46;

  v102.origin.CGFloat x = v41;
  v102.origin.CGFloat y = v43;
  v102.size.double width = v45;
  v102.size.double height = v47;
  double v48 = CGRectGetHeight(v102);
  id v49 = objc_msgSend(v2, sel_view);
  if (!v49)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v50 = v49;
  double v51 = v48 * 0.28;
  objc_msgSend(v49, sel_safeAreaInsets);
  double v53 = v52;

  double v54 = Height - v37 - (v51 - v53);
  if (v2[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout]) {
    double v54 = v20;
  }
  double v55 = v54 + -1.0;
  double v56 = (Width - dbl_2495321B0[(char)CAFUIDevicePickerViewController.layoutStyle.getter()]) * 0.5;
  switch(v2[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle])
  {
    case 1:
    case 2:
    case 3:
      char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v57) {
        goto LABEL_13;
      }
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      os_log_type_t v70 = static OS_os_log.default;
      uint64_t v71 = v2;
      os_log_type_t v72 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v72))
      {
        uint64_t v73 = swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        double v98 = *(double *)&v74;
        *(_DWORD *)uint64_t v73 = 136315906;
        v103.top = v20;
        v103.left = v56;
        v103.bottouint64_t m = v55;
        v103.right = v56;
        uint64_t v75 = NSStringFromUIEdgeInsets(v103);
        uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v78 = v77;

        uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, (uint64_t *)&v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v73 + 12) = 2048;
        uint64_t v97 = *(void *)&Width;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v73 + 22) = 2048;
        uint64_t v97 = *(void *)&Height;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v73 + 32) = 2048;
        uint64_t v79 = *(void *)((char *)v93 + (void)v2);

        uint64_t v97 = v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_2494AC000, v70, v72, "Returning insets: %s for collection view width: %f, height: %f, number of rows: %ld", (uint8_t *)v73, 0x2Au);
        swift_arrayDestroy();
        MEMORY[0x24C5A0780](v74, -1, -1);
        MEMORY[0x24C5A0780](v73, -1, -1);
      }
      else
      {
      }
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_13:
      uint64_t v92 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession;
      uint64_t v58 = *(void **)&v2[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession];
      if (v58
        && (id v59 = objc_msgSend(v58, sel_configuration),
            unsigned int v60 = objc_msgSend(v59, sel_rightHandDrive),
            v59,
            v60))
      {
        uint64_t v61 = (unsigned int *)MEMORY[0x263F8E220];
      }
      else
      {
        uint64_t v61 = (unsigned int *)MEMORY[0x263F8E218];
      }
      uint64_t v62 = *v61;
      unint64_t v63 = v96;
      uint64_t v93 = (void (*)(char *, uint64_t, uint64_t))v96[13];
      v93(v13, v62, v4);
      double v98 = v56;
      id v64 = (void (*)(char *, char *, uint64_t))v63[2];
      v64(v11, v13, v4);
      unsigned __int8 v65 = v11;
      unint64_t v66 = (uint64_t (*)(void))v63[11];
      os_log_t v67 = v65;
      int v68 = v66();
      int v69 = *MEMORY[0x263F8E210];
      if (v68 == *MEMORY[0x263F8E210]
        || v68 == *MEMORY[0x263F8E208]
        || v68 == *MEMORY[0x263F8E218]
        || v68 == *MEMORY[0x263F8E220]
        || v68 == *MEMORY[0x263F8E1F8])
      {
        Swift::String v91 = (void (*)(char *, uint64_t))v63[1];
        v91(v13, v4);
      }
      else if (v68 == *MEMORY[0x263F8E200])
      {
        Swift::String v91 = (void (*)(char *, uint64_t))v96[1];
        v91(v13, v4);
      }
      else
      {
        Double._roundSlowPath(_:)();
        uint64_t v88 = v13;
        unint64_t v89 = (void (*)(char *, uint64_t))v96[1];
        v89(v88, v4);
        Swift::String v91 = v89;
        v89(v67, v4);
      }
      uint64_t v80 = v94;
      unint64_t v81 = *(void **)&v2[v92];
      if (v81
        && (id v82 = objc_msgSend(v81, sel_configuration),
            unsigned __int8 v83 = objc_msgSend(v82, sel_rightHandDrive),
            v82,
            (v83 & 1) != 0))
      {
        CGFloat v84 = (unsigned int *)MEMORY[0x263F8E218];
      }
      else
      {
        CGFloat v84 = (unsigned int *)MEMORY[0x263F8E220];
      }
      int v85 = v95;
      v93(v80, *v84, v4);
      double v98 = v56;
      v64(v85, v80, v4);
      int v86 = ((uint64_t (*)(char *, uint64_t))v66)(v85, v4);
      if (v86 == v69
        || v86 == *MEMORY[0x263F8E208]
        || v86 == *MEMORY[0x263F8E218]
        || v86 == *MEMORY[0x263F8E220]
        || v86 == *MEMORY[0x263F8E1F8]
        || v86 == *MEMORY[0x263F8E200])
      {
        v91(v80, v4);
      }
      else
      {
        Double._roundSlowPath(_:)();
        uint64_t v90 = v91;
        v91(v80, v4);
        v90(v85, v4);
      }
      break;
  }
  return v20;
}

uint64_t specialized CAFUIDevicePickerViewController.collectionView(_:numberOfItemsInSection:)()
{
  uint64_t v0 = CAFUIDevicePickerViewController.columns.getter();
  uint64_t v1 = CAFUIDevicePickerViewController.rows.getter();
  uint64_t v2 = v0 * v1;
  if ((unsigned __int128)(v0 * (__int128)v1) >> 64 == (v0 * v1) >> 63)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  unint64_t v3 = static OS_os_log.default;
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2494AC000, v3, v4, "number of items in section: %ld", v5, 0xCu);
    MEMORY[0x24C5A0780](v5, -1, -1);
  }
  return v2;
}

uint64_t specialized CAFUIDevicePickerViewController.numberOfSections(in:)()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = static OS_os_log.default;
  uint64_t v2 = v0;
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v1, v3))
  {

LABEL_10:
    uint64_t v10 = &v2[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
    swift_beginAccess();
    uint64_t v11 = *(void *)(*(void *)v10 + 16);
    uint64_t v12 = CAFUIDevicePickerViewController.rows.getter();
    uint64_t result = CAFUIDevicePickerViewController.columns.getter();
    if ((unsigned __int128)(v12 * (__int128)result) >> 64 == (v12 * result) >> 63)
    {
      double v13 = ceil((double)v11 / (double)(v12 * result));
      if ((~*(void *)&v13 & 0x7FF0000000000000) != 0)
      {
        if (v13 > -9.22337204e18)
        {
          if (v13 < 9.22337204e18) {
            return (uint64_t)v13;
          }
          goto LABEL_18;
        }
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)os_log_type_t v4 = 134217984;
  uint64_t v5 = &v2[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
  swift_beginAccess();
  uint64_t v6 = *(void *)(*(void *)v5 + 16);
  uint64_t v7 = CAFUIDevicePickerViewController.rows.getter();
  uint64_t result = CAFUIDevicePickerViewController.columns.getter();
  if ((unsigned __int128)(v7 * (__int128)result) >> 64 != (v7 * result) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  double v9 = ceil((double)v6 / (double)(v7 * result));
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9 < 9.22337204e18)
  {
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_2494AC000, v1, v3, "number of sections: %ld", v4, 0xCu);
    MEMORY[0x24C5A0780](v4, -1, -1);
    goto LABEL_10;
  }
LABEL_22:
  __break(1u);
  return result;
}

void specialized CAFUIDevicePickerViewController.scrollViewDidScroll(_:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
  swift_beginAccess();
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  uint64_t v3 = CAFUIDevicePickerViewController.rows.getter();
  uint64_t v4 = CAFUIDevicePickerViewController.columns.getter();
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_27;
  }
  double v5 = ceil((double)v2 / (double)(v3 * v4));
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once();
    goto LABEL_17;
  }
  if ((uint64_t)v5 >= 2)
  {
    uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl];
    if (v6)
    {
      id v7 = v6;
      id v8 = objc_msgSend(v0, sel_collectionView);
      if (!v8)
      {
        __break(1u);
        goto LABEL_39;
      }
      double v9 = v8;
      objc_msgSend(v8, sel_frame);
      CGFloat v11 = v10;
      CGFloat v13 = v12;
      CGFloat v15 = v14;
      CGFloat v17 = v16;

      v44.origin.CGFloat x = v11;
      v44.origin.CGFloat y = v13;
      v44.size.double width = v15;
      v44.size.double height = v17;
      if (CGRectGetWidth(v44) > 0.0)
      {
        id v18 = objc_msgSend(v0, sel_collectionView);
        if (v18)
        {
          uint64_t v19 = v18;
          objc_msgSend(v18, sel_contentOffset);
          double v21 = v20;

          id v22 = objc_msgSend(v0, sel_collectionView);
          if (v22)
          {
            double v23 = v22;
            objc_msgSend(v22, sel_frame);
            CGFloat v25 = v24;
            CGFloat v27 = v26;
            CGFloat v29 = v28;
            CGFloat v31 = v30;

            v45.origin.CGFloat x = v25;
            v45.origin.CGFloat y = v27;
            v45.size.double width = v29;
            v45.size.double height = v31;
            double v32 = round(v21 / CGRectGetWidth(v45));
            if ((~*(void *)&v32 & 0x7FF0000000000000) != 0)
            {
              if (v32 > -9.22337204e18)
              {
                if (v32 < 9.22337204e18)
                {
                  objc_msgSend(v7, sel_setCurrentPage_, (uint64_t)v32);

                  return;
                }
LABEL_37:
                __break(1u);
              }
LABEL_36:
              __break(1u);
              goto LABEL_37;
            }
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
          goto LABEL_40;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
    }
  }
  if (one-time initialization token for default != -1) {
    goto LABEL_30;
  }
LABEL_17:
  id v33 = static OS_os_log.default;
  double v34 = v0;
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v33, v35))
  {

    return;
  }
  uint64_t v36 = swift_slowAlloc();
  uint64_t v37 = swift_slowAlloc();
  *(_DWORD *)uint64_t v36 = 67109378;
  uint64_t v38 = *(void *)&v34[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  uint64_t v39 = *(void *)&v34[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
  if ((unsigned __int128)(v38 * (__int128)v39) >> 64 != (v38 * v39) >> 63)
  {
    __break(1u);
    goto LABEL_32;
  }
  double v40 = ceil((double)*(uint64_t *)(*(void *)v1 + 16) / (double)(v38 * v39));
  if ((~*(void *)&v40 & 0x7FF0000000000000) == 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v40 <= -9.22337204e18)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v40 >= 9.22337204e18)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  CGFloat v41 = (void *)v37;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v36 + 8) = 2112;
  double v42 = *(void **)&v34[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl];
  if (v42) {
    id v43 = v42;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *CGFloat v41 = v42;

  _os_log_impl(&dword_2494AC000, v33, v35, "Early exit scroll view did scroll method. isPaginationActive: %{BOOL}d, pageControl: %@", (uint8_t *)v36, 0x12u);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  swift_arrayDestroy();
  MEMORY[0x24C5A0780](v41, -1, -1);
  MEMORY[0x24C5A0780](v36, -1, -1);
}

id partial apply for closure #1 in CAFUIDevicePickerViewController.resetSpinningCellAndUserInteraction()()
{
  return closure #1 in CAFUIDevicePickerViewController.resetSpinningCellAndUserInteraction()(v0);
}

uint64_t _s10Foundation9IndexPathVACs23CustomStringConvertibleAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ObjC metadata update function for CAFUIDevicePickerViewController()
{
  return type metadata accessor for CAFUIDevicePickerViewController();
}

void type metadata completion function for CAFUIDevicePickerViewController()
{
  type metadata accessor for IndexPath?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t getEnumTagSinglePayload for CAFUIDevicePickerViewController.LayoutStyle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CAFUIDevicePickerViewController.LayoutStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24952118CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIDevicePickerViewController.LayoutStyle()
{
  return &type metadata for CAFUIDevicePickerViewController.LayoutStyle;
}

unint64_t lazy protocol witness table accessor for type CAFUIDevicePickerViewController.LayoutStyle and conformance CAFUIDevicePickerViewController.LayoutStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFUIDevicePickerViewController.LayoutStyle and conformance CAFUIDevicePickerViewController.LayoutStyle;
  if (!lazy protocol witness table cache variable for type CAFUIDevicePickerViewController.LayoutStyle and conformance CAFUIDevicePickerViewController.LayoutStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIDevicePickerViewController.LayoutStyle and conformance CAFUIDevicePickerViewController.LayoutStyle);
  }
  return result;
}

unint64_t specialized CAFUIDevicePickerViewController.LayoutStyle.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CAFUIDevicePickerViewController.LayoutStyle.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_249521268()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

BOOL partial apply for closure #1 in CAFUIDevicePickerViewController.devicePickerButtonTapped()(char a1)
{
  return closure #1 in CAFUIDevicePickerViewController.devicePickerButtonTapped()(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of IndexPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t CAFUIPickerRepresentable.allowsMultipleSelection.getter()
{
  return 0;
}

unint64_t CAFUIPickerRepresentable.toggle(index:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v62 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  double v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t))((char *)&v56 - v11);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  id v59 = (char *)&v56 - v13;
  MEMORY[0x270FA5388](v12);
  unsigned int v60 = (char *)&v56 - v14;
  CGFloat v15 = *(uint64_t **)(a3 + 48);
  if ((((uint64_t (*)(uint64_t, uint64_t))v15)(a2, a3) & 1) == 0)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    char v17 = specialized Sequence<>.contains(_:)(a1, v16);
    swift_bridgeObjectRelease();
    if (v17) {
      return MEMORY[0x263F8EE78];
    }
  }
  char v57 = (uint64_t *)v9;
  uint64_t v61 = v6;
  uint64_t v63 = 0;
  unint64_t v64 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 8))(a2);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  uint64_t v63 = v19;
  unint64_t v64 = v21;
  v22._object = (void *)0x8000000249534810;
  v22._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v22);
  unint64_t v65 = a1;
  v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  uint64_t v24 = v63;
  unint64_t v25 = v64;
  os_log_type_t v26 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v26, v24, v25, 0x6928656C67676F74, 0xEE00293A7865646ELL);
  swift_bridgeObjectRelease();
  CGFloat v27 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
  uint64_t v28 = v27(a2, a3);
  LOBYTE(v25) = specialized Sequence<>.contains(_:)(a1, v28);
  swift_bridgeObjectRelease();
  if (v25)
  {
    CGFloat v15 = &v63;
    unint64_t v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a3 + 40))(&v63, a2, a3);
    double v30 = v29;
    unint64_t v31 = *v29;
    unint64_t v32 = *(void *)(*v29 + 16);
    if (v32)
    {
      unint64_t v33 = *(void *)(v31 + 32);
      if (v33 == a1)
      {
        uint64_t v34 = 0;
      }
      else
      {
        if (v32 == 1)
        {
          uint64_t v34 = 1;
          goto LABEL_47;
        }
        unint64_t v33 = 5;
        while (1)
        {
          uint64_t v34 = v33 - 4;
          if (*(void *)(v31 + 8 * v33) == a1) {
            break;
          }
          unint64_t v52 = v33 - 3;
          if (__OFADD__(v34, 1)) {
            goto LABEL_54;
          }
          ++v33;
          if (v52 == v32)
          {
            uint64_t v34 = v32;
            goto LABEL_47;
          }
        }
      }
      a3 = v34 + 1;
      if (__OFADD__(v34, 1))
      {
        __break(1u);
LABEL_58:
        unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, (int64_t)v30, 1, v18);
        goto LABEL_20;
      }
      if (a3 != v32)
      {
        a2 = v34 + 5;
        while ((a3 & 0x8000000000000000) == 0)
        {
          unint64_t v33 = a2 - 4;
          if (a2 - 4 >= v32) {
            goto LABEL_52;
          }
          uint64_t v46 = *(void *)(v31 + 8 * a2);
          if (v46 != a1)
          {
            if (v33 != v34)
            {
              if (v34 >= v32) {
                goto LABEL_55;
              }
              CGFloat v27 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 32 + 8 * v34);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *double v30 = v31;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                unint64_t v31 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v31);
                *double v30 = v31;
              }
              *(void *)(v31 + 8 * v34 + 32) = v46;
              unint64_t v33 = *v30;
              *(void *)(*v30 + 8 * a2) = v27;
              unint64_t v31 = *v30;
            }
            if (__OFADD__(v34++, 1)) {
              goto LABEL_53;
            }
            unint64_t v32 = *(void *)(v31 + 16);
          }
          unint64_t v33 = a2 - 3;
          ++a2;
          if (v33 == v32) {
            goto LABEL_10;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
LABEL_10:
      if ((uint64_t)v32 < v34)
      {
        __break(1u);
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
LABEL_47:
    specialized Array.replaceSubrange<A>(_:with:)(v34, v32);
    ((void (*)(uint64_t *, void))v18)(&v63, 0);
    a3 = (uint64_t)v60;
    goto LABEL_48;
  }
LABEL_12:
  if (((uint64_t (*)(uint64_t, uint64_t))v15)(a2, a3))
  {
    os_log_type_t v35 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a3 + 40))(&v63, a2, a3);
    uint64_t v37 = v36;
    uint64_t v38 = *v36;
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v37 = v38;
    if ((v39 & 1) == 0)
    {
      uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
      *uint64_t v37 = v38;
    }
    unint64_t v41 = v38[2];
    unint64_t v40 = v38[3];
    if (v41 >= v40 >> 1)
    {
      uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v38);
      *uint64_t v37 = v38;
    }
    v38[2] = v41 + 1;
    v38[v41 + 4] = a1;
    v35(&v63, 0);
    a3 = (uint64_t)v59;
LABEL_48:
    MEMORY[0x24C59E990](a1, 0);
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    a1 = *(void *)(v18 + 16);
    unint64_t v33 = *(void *)(v18 + 24);
    double v30 = (unint64_t *)(a1 + 1);
    if (a1 < v33 >> 1)
    {
LABEL_49:
      uint64_t v53 = v61;
      uint64_t v54 = v62;
      *(void *)(v18 + 16) = v30;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v54 + 32))(v18+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(void *)(v54 + 72) * a1, a3, v53);
      return v18;
    }
LABEL_56:
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, (int64_t)v30, 1, v18);
    goto LABEL_49;
  }
  uint64_t v42 = v27(a2, a3);
  uint64_t v34 = v62;
  if (!*(void *)(v42 + 16))
  {
    swift_bridgeObjectRelease();
    unint64_t v18 = MEMORY[0x263F8EE78];
    uint64_t v45 = v61;
    CGFloat v15 = v57;
    goto LABEL_37;
  }
  uint64_t v43 = *(void *)(v42 + 32);
  swift_bridgeObjectRelease();
  CGFloat v27 = v58;
  MEMORY[0x24C59E990](v43, 0);
  unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v31 = *(void *)(v18 + 16);
  unint64_t v33 = *(void *)(v18 + 24);
  double v30 = (unint64_t *)(v31 + 1);
  CGFloat v15 = v57;
  if (v31 >= v33 >> 1) {
    goto LABEL_58;
  }
LABEL_20:
  *(void *)(v18 + 16) = v30;
  unint64_t v44 = v18
      + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))
      + *(void *)(v34 + 72) * v31;
  uint64_t v45 = v61;
  (*(void (**)(unint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(v34 + 32))(v44, v27, v61);
LABEL_37:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_2495305E0;
  *(void *)(v49 + 32) = a1;
  (*(void (**)(void))(a3 + 32))();
  MEMORY[0x24C59E990](a1, 0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1, v18);
  }
  unint64_t v51 = *(void *)(v18 + 16);
  unint64_t v50 = *(void *)(v18 + 24);
  if (v51 >= v50 >> 1) {
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1, v18);
  }
  *(void *)(v18 + 16) = v51 + 1;
  (*(void (**)(unint64_t, uint64_t *, uint64_t))(v34 + 32))(v18+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v51, v15, v45);
  return v18;
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFSingleSelectSetting(uint64_t a1, uint64_t a2)
{
  return CAFUIPickerRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFSingleSelectSetting);
}

id CAFUIPickerRepresentable.configureCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = a1;
  uint64_t v5 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v56 = *(void *)(v5 - 8);
  uint64_t v57 = v5;
  MEMORY[0x270FA5388](v5);
  double v55 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v54 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v53 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v50 = (char *)&v45 - v12;
  uint64_t v13 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v51 = v13;
  uint64_t v52 = v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v49 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UIListContentConfiguration();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  Swift::String v22 = (char *)&v45 - v21;
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v20, (uint64_t)v22);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v47 = v17 + 8;
  v46(v20, v16);
  uint64_t v23 = *(void *)(a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(v23 + 48))(a2, v23);
  UIListContentConfiguration.image.setter();
  (*(void (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  UIListContentConfiguration.text.setter();
  v24._rawValue = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v25._rawValue = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  CAFUILocalizedValues(for:selectedValues:)(v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = (uint64_t)v50;
  uint64_t v27 = v16;
  UIListContentConfiguration.secondaryText.setter();
  uint64_t v28 = *(void (**)(void))(v17 + 16);
  uint64_t v45 = v22;
  uint64_t v29 = (uint64_t)v49;
  v28();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v29, 0, 1, v16);
  unsigned __int8 v30 = CAFListContentRepresentable.isLimitedUI.getter(a2, v23);
  uint64_t v31 = v51;
  *(void *)(v29 + *(int *)(v51 + 20)) = 0;
  *(unsigned char *)(v29 + *(int *)(v31 + 24)) = 1;
  uint64_t v32 = v48;
  *(unsigned char *)(v29 + *(int *)(v31 + 28)) = v30 & 1;
  outlined init with copy of CAFUIAutomakerSettingConfiguration(v29, v26);
  uint64_t v33 = v52;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v26, 0, 1, v31);
  uint64_t v34 = v32 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v26, v34);
  swift_endAccess();
  uint64_t v35 = v34;
  uint64_t v36 = v53;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v35, v53);
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  uint64_t v38 = v36;
  LODWORD(v36) = v37(v36, 1, v31);
  outlined destroy of CAFUIAutomakerSettingConfiguration?(v38);
  if (v36 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  uint64_t v39 = outlined destroy of CAFUIAutomakerSettingConfiguration?(v26);
  unint64_t v40 = v55;
  MEMORY[0x24C59F910](v39);
  uint64_t v42 = v56;
  uint64_t v41 = v57;
  uint64_t v43 = v54;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v54, v40, v57);
  id result = objc_msgSend(self, sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v43, 0, 1, v41);
    MEMORY[0x24C59F900](v43);
    outlined destroy of CAFUIAutomakerSettingConfiguration(v29);
    return (id)((uint64_t (*)(char *, uint64_t))v46)(v45, v27);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFMultipleSelectSetting(uint64_t a1, uint64_t a2)
{
  return CAFUIPickerRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFMultipleSelectSetting);
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFButtonSetting(uint64_t a1, uint64_t a2)
{
  return CAFUIButtonRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFButtonSetting);
}

id CAFUIButtonRepresentable.configureCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a3;
  uint64_t v43 = a1;
  uint64_t v4 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v48 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v47 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v46 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v40 - v11;
  uint64_t v13 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  uint64_t v44 = *((void *)v13 - 1);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UIListContentConfiguration();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  Swift::String v22 = (char *)&v40 - v21;
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v20, (uint64_t)v22);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v42 = v17 + 8;
  v41(v20, v16);
  uint64_t v23 = *(void *)(v45 + 8);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a2, v23);
  UIListContentConfiguration.text.setter();
  (*(void (**)(uint64_t, uint64_t))(v23 + 48))(a2, v23);
  UIListContentConfiguration.image.setter();
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v15, v22, v16);
  Swift::OpaquePointer v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56);
  uint64_t v45 = v16;
  v24(v15, 0, 1, v16);
  uint64_t v25 = v23;
  uint64_t v26 = v43;
  unsigned __int8 v27 = CAFListContentRepresentable.isLimitedUI.getter(a2, v25);
  *(void *)&v15[v13[5]] = 0;
  v15[v13[6]] = 0;
  v15[v13[7]] = v27 & 1;
  outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v15, (uint64_t)v12);
  uint64_t v28 = v44;
  (*(void (**)(char *, void, uint64_t, int *))(v44 + 56))(v12, 0, 1, v13);
  uint64_t v29 = v26 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?((uint64_t)v12, v29);
  swift_endAccess();
  uint64_t v30 = v29;
  uint64_t v31 = v46;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v30, v46);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v28 + 48);
  uint64_t v33 = v31;
  LODWORD(v31) = v32(v31, 1, v13);
  outlined destroy of CAFUIAutomakerSettingConfiguration?(v33);
  if (v31 != 1) {
    CAFUITileBaseCell.setupViews()();
  }
  uint64_t v34 = outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v12);
  uint64_t v35 = v48;
  MEMORY[0x24C59F910](v34);
  uint64_t v37 = v49;
  uint64_t v36 = v50;
  uint64_t v38 = v47;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v47, v35, v50);
  id result = objc_msgSend(self, sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
    MEMORY[0x24C59F900](v38);
    outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v15);
    return (id)((uint64_t (*)(char *, uint64_t))v41)(v22, v45);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFButtonSetting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized CAFUIButtonRepresentable.cellSelected(isProminent:hasChildren:)(a3, (uint64_t)&protocol witness table for CAFButtonSetting);
}

uint64_t CAFUIButtonRepresentable.cellSelected(isProminent:hasChildren:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized CAFUIButtonRepresentable.cellSelected(isProminent:hasChildren:)(a3, a4);
}

uint64_t specialized CAFUIButtonRepresentable.cellSelected(isProminent:hasChildren:)(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned __int8 (**)(void))(a2 + 16))())
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 8) + 8))(a1);
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v5, 0xD000000000000024, 0x8000000249536AB0, 0xD000000000000026, 0x8000000249536AE0);
    swift_bridgeObjectRelease();
  }
  else
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 8) + 8))(a1);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 0xD000000000000011;
    v7._object = (void *)0x8000000249536B30;
    String.append(_:)(v7);
    os_log_type_t v8 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v8, 0xD00000000000001ALL, 0x8000000249536B10, 0xD000000000000026, 0x8000000249536AE0);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 24))(1, a1, a2);
  }
  return 2;
}

Swift::Void __swiftcall CAFUIPickerViewController.viewDidLoad()()
{
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for CAFUIPickerViewController();
  uint64_t v1 = (uint64_t)objc_msgSendSuper2(&v6, sel_viewDidLoad);
  if (one-time initialization token for cellsByIdentifiers != -1) {
    uint64_t v1 = swift_once();
  }
  MEMORY[0x270FA5388](v1);
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v2, partial apply for closure #1 in CAFUIPickerViewController.viewDidLoad());
  uint64_t v3 = swift_bridgeObjectRelease();
  if (one-time initialization token for viewsByIdentifiers != -1) {
    uint64_t v3 = swift_once();
  }
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v4, partial apply for closure #2 in CAFUIPickerViewController.viewDidLoad());
  swift_bridgeObjectRelease();
  os_log_type_t v5 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView];
  objc_msgSend(v5, sel_setDataSource_, v0);
  objc_msgSend(v5, sel_setDelegate_, v0);
}

void closure #1 in CAFUIPickerViewController.viewDidLoad()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  os_log_type_t v8 = *(void **)(a4 + OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v10 = (id)MEMORY[0x24C59F610](a1, a2);
  objc_msgSend(v8, *a5, ObjCClassFromMetadata, v10);
}

uint64_t CAFUIPickerViewController.tableView(_:cellForRowAt:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for CAFUITableCell();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  os_log_type_t v5 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  uint64_t v9 = (void *)MEMORY[0x24C59F610](v6, v8);
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v11 = objc_msgSend(a1, sel_dequeueReusableCellWithIdentifier_forIndexPath_, v9, isa);

  uint64_t v12 = (void *)swift_dynamicCastClass();
  if (!v12) {
    goto LABEL_15;
  }
  uint64_t v13 = v12;
  id v14 = objc_msgSend(v12, sel_textLabel);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)(v2 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(ObjectType, v16);
    unint64_t v19 = IndexPath.row.getter();
    if ((v19 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v19 < *(void *)(v18 + 16))
    {
      unint64_t v20 = v18 + 16 * v19;
      uint64_t v21 = *(void *)(v20 + 32);
      uint64_t v22 = *(void *)(v20 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v23 = (void *)MEMORY[0x24C59F610](v21, v22);
      swift_bridgeObjectRelease();
      objc_msgSend(v15, sel_setText_, v23);

      goto LABEL_6;
    }
    __break(1u);
LABEL_15:

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_6:
  Swift::OpaquePointer v24 = &selRef_setOpacity_;
  objc_msgSend(v13, sel_setAccessoryType_, 0);
  uint64_t v25 = *(void *)(v2 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
  uint64_t v26 = swift_getObjectType();
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 24);
  uint64_t v27 = v47(v26, v25);
  uint64_t v28 = IndexPath.row.getter();
  char v29 = specialized Sequence<>.contains(_:)(v28, v27);
  swift_bridgeObjectRelease();
  if (v29)
  {
    uint64_t v30 = *MEMORY[0x263F83580];
    uint64_t v31 = self;
    id v46 = objc_msgSend(v31, sel_configurationWithTextStyle_scale_, v30, 2);
    id v32 = objc_msgSend(v31, sel_configurationWithWeight_, 6);
    id v33 = objc_msgSend(v46, sel_configurationByApplyingConfiguration_, v32);

    id v34 = v33;
    uint64_t v35 = (void *)MEMORY[0x24C59F610](0x72616D6B63656863, 0xE90000000000006BLL);
    id v36 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v35, v34);

    id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v36);
    id v38 = v11;
    id v39 = objc_msgSend(self, sel__carSystemFocusColor);
    objc_msgSend(v37, sel_setTintColor_, v39);

    id v11 = v38;
    objc_msgSend(v13, sel_setAccessoryView_, v37);

    Swift::OpaquePointer v24 = &selRef_setOpacity_;
  }
  else
  {
    objc_msgSend(v13, sel_setAccessoryView_, 0);
  }
  id v40 = v11;
  uint64_t v41 = v47(v26, v25);
  uint64_t v42 = IndexPath.row.getter();
  char v43 = specialized Sequence<>.contains(_:)(v42, v41);
  swift_bridgeObjectRelease();
  if (v43) {
    uint64_t v44 = 3;
  }
  else {
    uint64_t v44 = 0;
  }
  objc_msgSend(v13, v24[260], v44);

  return (uint64_t)v13;
}

uint64_t @objc CAFUIPickerViewController.tableView(_:canMoveRowAt:)()
{
  uint64_t v0 = type metadata accessor for IndexPath();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return 0;
}

void CAFUIPickerViewController.tableView(_:didSelectRowAt:)(void *a1)
{
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_deselectRowAtIndexPath_animated_, isa, 1);

  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = IndexPath.row.getter();
  if (*(void *)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 72))(v6, ObjectType, v4) + 16))
  {
    type metadata accessor for IndexPath();
    Class v7 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_reloadRowsAtIndexPaths_withRowAnimation_, v7, 100);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void CAFUIPickerViewController.__allocating_init(style:)()
{
}

uint64_t CAFUIPickerViewController.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

id CAFUIPickerViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIPickerViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CAFUIPickerViewController()
{
  return self;
}

double specialized CAFUIPickerViewController.tableView(_:heightForFooterInSection:)()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  if (!v4) {
    return 0.0;
  }
  uint64_t v5 = v3;
  unint64_t v6 = v4;
  swift_bridgeObjectRelease();
  uint64_t v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v7 = v5 & 0xFFFFFFFFFFFFLL;
  }
  double result = *MEMORY[0x263F839B8];
  if (!v7) {
    return 0.0;
  }
  return result;
}

uint64_t specialized CAFUIPickerViewController.tableView(_:viewForFooterInSection:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  uint64_t v9 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9) {
    goto LABEL_8;
  }
  type metadata accessor for CAFUIFooterView();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v11 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  uint64_t v15 = (void *)MEMORY[0x24C59F610](v12, v14);
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(a1, sel_dequeueReusableHeaderFooterViewWithIdentifier_, v15);

  if (!v16)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v17 = swift_dynamicCastClass();
  uint64_t v18 = v17;
  if (v17)
  {
    unint64_t v19 = (uint64_t *)(v17 + OBJC_IVAR____TtC5CAFUI15CAFUIFooterView_title);
    uint64_t *v19 = v7;
    v19[1] = v8;
    swift_bridgeObjectRelease();
    CAFUIFooterView.title.didset();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  return v18;
}

void partial apply for closure #1 in CAFUIPickerViewController.viewDidLoad()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in CAFUIPickerViewController.viewDidLoad()(a1, a2, a3, *(void *)(v3 + 16), (SEL *)&selRef_registerClass_forCellReuseIdentifier_);
}

void partial apply for closure #2 in CAFUIPickerViewController.viewDidLoad()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in CAFUIPickerViewController.viewDidLoad()(a1, a2, a3, *(void *)(v3 + 16), (SEL *)&selRef_registerClass_forHeaderFooterViewReuseIdentifier_);
}

id static UIFont.cafui_subtitleFont.getter()
{
  return static UIFont.cafui_subtitleFont.getter(MEMORY[0x263F835B8]);
}

id static UIFont.cafui_preferredFontRoundedVariant(forTextStyle:)(uint64_t a1)
{
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__preferredFontForTextStyle_variant_, a1, 0x10000);

  return v1;
}

id static UIFont.cafui_preferredFont(for:weight:size:rounded:)(uint64_t a1, uint64_t a2, char a3, char a4, double a5)
{
  return specialized static UIFont.cafui_preferredFont(for:weight:size:rounded:)(a1, a2, a3 & 1, a4, a5);
}

id static UIFont.cafui_headerFont.getter()
{
  return static UIFont.cafui_subtitleFont.getter(MEMORY[0x263F835D0]);
}

id static UIFont.cafui_titleFont.getter()
{
  return static UIFont.cafui_subtitleFont.getter(MEMORY[0x263F83580]);
}

id static UIFont.cafui_subtitleFont.getter(void *a1)
{
  id v1 = objc_msgSend(self, sel_preferredFontDescriptorWithTextStyle_, *a1);
  id v2 = objc_msgSend(self, sel_fontWithDescriptor_size_, v1, 0.0);

  return v2;
}

id specialized static UIFont.cafui_preferredFont(for:weight:size:rounded:)(uint64_t a1, uint64_t a2, char a3, char a4, double a5)
{
  if (a3)
  {
    id v10 = objc_msgSend(self, sel_preferredFontDescriptorWithTextStyle_, a1);
    objc_msgSend(v10, sel_pointSize);
    a2 = v11;

    if ((a4 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a4 & 1) == 0)
  {
LABEL_3:
    id v9 = 0;
    goto LABEL_7;
  }
  id result = objc_msgSend(self, sel__preferredFontForTextStyle_design_variant_, a1, *MEMORY[0x263F817E0], 8);
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v13 = result;
  id v9 = objc_msgSend(result, sel_fontWithSize_, *(double *)&a2);

LABEL_7:
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, a1);
  if (!v9) {
    id v9 = objc_msgSend(self, sel_systemFontOfSize_weight_, *(double *)&a2, a5);
  }
  id v15 = objc_msgSend(v14, sel_scaledFontForFont_, v9);

  return v15;
}

uint64_t Image.init(automakerSymbolName:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  id v4 = CAFUIFrameworkBundle();
  uint64_t v5 = (void *)MEMORY[0x24C59F610](a1, a2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(self, sel_imageNamed_inBundle_, v5, v4);

  if (v6)
  {
    id v7 = CAFUIFrameworkBundle();
    uint64_t v8 = Image.init(_:bundle:)();

    return v8;
  }
  else
  {
    return MEMORY[0x270F046C8](a1, a2);
  }
}

void *CAFUIProminentSettingCell.Constants.Cell.symbolViewWidth.unsafeMutableAddressor()
{
  return &static CAFUIProminentSettingCell.Constants.Cell.symbolViewWidth;
}

void *CAFUIProminentSettingCell.Constants.Cell.minimumWidth.unsafeMutableAddressor()
{
  return &static CAFUIProminentSettingCell.Constants.Cell.minimumWidth;
}

void *CAFUIProminentSettingCell.Constants.Cell.height.unsafeMutableAddressor()
{
  return &static CAFUIProminentSettingCell.Constants.Cell.height;
}

double static CAFUIProminentSettingCell.Constants.Cell.height.getter()
{
  return 52.0;
}

double static CAFUIProminentSettingCell.Constants.Cell.symbolViewWidth.getter()
{
  return 52.0;
}

double static CAFUIProminentSettingCell.Constants.Cell.minimumWidth.getter()
{
  return 160.0;
}

void *CAFUIProminentSettingCell.Constants.Cell.prominentCellCornerRadius.unsafeMutableAddressor()
{
  return &static CAFUIProminentSettingCell.Constants.Cell.prominentCellCornerRadius;
}

double static CAFUIProminentSettingCell.Constants.Cell.prominentCellCornerRadius.getter()
{
  return 10.0;
}

uint64_t CAFUIProminentSettingCell.representable.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CAFUIProminentSettingCell.representable.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (*v5) {
    CAFUIProminentSettingCell.configureCell()();
  }
  return swift_unknownObjectRelease();
}

void (*CAFUIProminentSettingCell.representable.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return CAFUIProminentSettingCell.representable.modify;
}

void CAFUIProminentSettingCell.representable.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0 && *(void *)(v3[3] + v3[4])) {
    CAFUIProminentSettingCell.configureCell()();
  }

  free(v3);
}

id CAFUIProminentSettingCell.accessoryColor.getter()
{
  id v0 = objc_msgSend(self, sel_clearColor);

  return v0;
}

id CAFUIProminentSettingCell.primaryTextColor.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  swift_beginAccess();
  if (*v1
    && (uint64_t v2 = v1[1],
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16),
        swift_unknownObjectRetain(),
        LOBYTE(v2) = v4(ObjectType, v2),
        swift_unknownObjectRelease(),
        (v2 & 1) == 0))
  {
    uint64_t v5 = &selRef_grayColor;
  }
  else
  {
    uint64_t v5 = &selRef_labelColor;
  }
  id v6 = [self *v5];

  return v6;
}

id CAFUIProminentSettingCell.secondaryTextColor.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  swift_beginAccess();
  if (*v1
    && (uint64_t v2 = v1[1],
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16),
        swift_unknownObjectRetain(),
        LOBYTE(v2) = v4(ObjectType, v2),
        swift_unknownObjectRelease(),
        (v2 & 1) == 0))
  {
    uint64_t v5 = &selRef_grayColor;
  }
  else
  {
    uint64_t v5 = &selRef_secondaryLabelColor;
  }
  id v6 = [self *v5];

  return v6;
}

id CAFUIProminentSettingCell.imageColor.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageColor);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void CAFUIProminentSettingCell.imageColor.setter(void *a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageColor);
  swift_beginAccess();
  uint64_t v4 = (void *)*v3;
  *uint64_t v3 = a1;
  id v5 = a1;

  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton), sel_setTintColor_, *v3);
}

void (*CAFUIProminentSettingCell.imageColor.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageColor;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return CAFUIProminentSettingCell.imageColor.modify;
}

void CAFUIProminentSettingCell.imageColor.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0) {
    objc_msgSend(*(id *)(v3[3] + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton), sel_setTintColor_, *(void *)(v3[3] + v3[4]));
  }

  free(v3);
}

void CAFUIProminentSettingCell.customPlatterView.didset()
{
  uint64_t v1 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v30 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  id v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  id v10 = (char *)&v25 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = (id *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_customPlatterView);
  swift_beginAccess();
  if (*v13) {
    objc_msgSend(*v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 1);
  }
  id v14 = (void *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  uint64_t v15 = swift_beginAccess();
  if (*v14)
  {
    self;
    uint64_t v15 = swift_dynamicCastObjCClass();
    if (v15)
    {
      id v16 = (void *)v15;
      swift_unknownObjectRetain();
      if (objc_msgSend(v16, sel_on))
      {
        if (!*v14)
        {
          swift_unknownObjectRelease();
          return;
        }
        uint64_t v17 = v14[1];
        uint64_t v26 = v17;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v29 = v1;
        uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 16);
        swift_unknownObjectRetain();
        char v18 = v27(ObjectType, v26);
        uint64_t v1 = v29;
        LOBYTE(v17) = v18;
        swift_unknownObjectRelease();
        uint64_t v15 = swift_unknownObjectRelease();
        if (v17) {
          return;
        }
      }
      else
      {
        uint64_t v15 = swift_unknownObjectRelease();
      }
    }
  }
  id v19 = *v13;
  if (v19)
  {
    uint64_t v20 = v1;
    id v21 = v19;
    static UIBackgroundConfiguration.clear()();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v12, 0, 1, v20);
    uint64_t v22 = MEMORY[0x24C59F900](v12);
    MEMORY[0x24C59F8F0](v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v20))
    {
      outlined init with copy of UIBackgroundConfiguration?((uint64_t)v10, (uint64_t)v12);
      MEMORY[0x24C59F900](v12);

      outlined destroy of UIBackgroundConfiguration?((uint64_t)v10);
    }
    else
    {
      id v24 = v21;
      UIBackgroundConfiguration.customView.setter();
      MEMORY[0x24C59F900](v10);
    }
  }
  else
  {
    uint64_t v23 = v30;
    MEMORY[0x24C59F910](v15);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v7, v23, v1);
    if (objc_msgSend(self, sel_tableCellPlainBackgroundColor))
    {
      UIBackgroundConfiguration.backgroundColor.setter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v23, v1);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v7, 0, 1, v1);
      MEMORY[0x24C59F900](v7);
    }
    else
    {
      __break(1u);
    }
  }
}

void *CAFUIProminentSettingCell.customPlatterView.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_customPlatterView);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void CAFUIProminentSettingCell.customPlatterView.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_customPlatterView);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
  id v5 = a1;

  CAFUIProminentSettingCell.customPlatterView.didset();
}

void (*CAFUIProminentSettingCell.customPlatterView.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CAFUIProminentSettingCell.customPlatterView.modify;
}

void CAFUIProminentSettingCell.customPlatterView.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    CAFUIProminentSettingCell.customPlatterView.didset();
  }
}

char *CAFUIProminentSettingCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = &v4[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v10 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageColor;
  uint64_t v11 = self;
  uint64_t v12 = v4;
  *(void *)&v4[v10] = objc_msgSend(v11, sel_systemGrayColor);
  *(void *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_customPlatterView] = 0;
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82908]), sel_init);
  *(void *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_buttonLayoutGuide] = v13;
  id v14 = v13;
  uint64_t v15 = (void *)MEMORY[0x24C59F610](0xD000000000000016, 0x8000000249536CE0);
  objc_msgSend(v14, sel_setAccessibilityIdentifier_, v15);

  id v16 = objc_msgSend(self, sel_buttonWithType_, 0);
  *(void *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton] = v16;
  objc_msgSend(v16, sel__setCornerRadius_, 18.0);
  objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v17 = v16;
  char v18 = (void *)MEMORY[0x24C59F610](0xD00000000000001BLL, 0x8000000249536D00);
  objc_msgSend(v17, byte_26525C82B, v18);

  id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), (SEL)&selRef_spacing);
  uint64_t v20 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel;
  *(void *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel] = v19;
  uint64_t v21 = *MEMORY[0x263F83580];
  double v22 = *MEMORY[0x263F81828];
  uint64_t v23 = self;
  id v24 = v19;
  id v25 = objc_msgSend(v23, sel_preferredFontDescriptorWithTextStyle_, v21);
  objc_msgSend(v25, sel_pointSize);
  double v27 = v26;

  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, v21);
  uint64_t v29 = self;
  id v30 = objc_msgSend(v29, sel_systemFontOfSize_weight_, v27, v22);
  id v31 = objc_msgSend(v28, sel_scaledFontForFont_, v30);

  objc_msgSend(v24, sel_setFont_, v31);
  id v32 = *(void **)&v12[v20];
  objc_msgSend(v32, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v33 = v32;
  id v34 = (void *)MEMORY[0x24C59F610](0xD000000000000015, 0x8000000249536D20);
  objc_msgSend(v33, sel_setAccessibilityIdentifier_, v34);

  id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v36 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel;
  *(void *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel] = v35;
  double v37 = *MEMORY[0x263F81838];
  id v38 = v35;
  id v39 = objc_msgSend(v23, sel_preferredFontDescriptorWithTextStyle_, v21);
  objc_msgSend(v39, sel_pointSize);
  double v41 = v40;

  id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, v21);
  id v43 = objc_msgSend(v29, sel_systemFontOfSize_weight_, v41, v37);
  id v44 = objc_msgSend(v42, sel_scaledFontForFont_, v43);

  objc_msgSend(v38, sel_setFont_, v44);
  uint64_t v45 = *(void **)&v12[v36];
  objc_msgSend(v45, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v46 = v45;
  uint64_t v47 = (void *)MEMORY[0x24C59F610](0xD000000000000018, 0x8000000249536D40);
  objc_msgSend(v46, sel_setAccessibilityIdentifier_, v47);

  uint64_t v48 = MEMORY[0x263F8EE78];
  *(void *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleCenterYConstaint] = MEMORY[0x263F8EE78];
  *(void *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_modifiableContstraints] = v48;

  v77.receiver = v12;
  v77.super_class = (Class)type metadata accessor for CAFUIProminentSettingCell();
  uint64_t v49 = (char *)objc_msgSendSuper2(&v77, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v50 = (void *)MEMORY[0x24C59F610](0xD000000000000019, 0x80000002495322A0);
  objc_msgSend(v49, sel_setAccessibilityIdentifier_, v50);

  uint64_t v51 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton;
  uint64_t v52 = *(void **)&v49[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton];
  objc_msgSend(v52, sel__setTouchInsets_, -8.0, -8.0, 8.0, 8.0);
  objc_msgSend(v52, sel_addTarget_action_forControlEvents_, v49, sel_buttonClicked, 64);
  id v53 = objc_msgSend(v49, sel_layer);
  objc_msgSend(v53, sel_setCornerRadius_, 10.0);

  id v54 = objc_msgSend(v49, sel_layer);
  objc_msgSend(v54, sel_setMasksToBounds_, 1);

  id v55 = objc_msgSend(v49, sel_contentView);
  objc_msgSend(v55, sel_addLayoutGuide_, *(void *)&v49[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_buttonLayoutGuide]);

  id v56 = objc_msgSend(v49, sel_contentView);
  objc_msgSend(v56, sel_addSubview_, *(void *)&v49[v51]);

  id v57 = objc_msgSend(v49, sel_contentView);
  uint64_t v58 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel;
  objc_msgSend(v57, sel_addSubview_, *(void *)&v49[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel]);

  id v59 = objc_msgSend(v49, sel_contentView);
  uint64_t v60 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel;
  objc_msgSend(v59, sel_addSubview_, *(void *)&v49[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel]);

  id v61 = objc_msgSend(v49, sel_contentView);
  id v62 = objc_msgSend(v61, sel_layer);

  objc_msgSend(v62, sel_setAllowsGroupBlending_, 0);
  uint64_t v63 = *(void **)&v49[v51];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_2495305E0;
  uint64_t v65 = type metadata accessor for UITraitUserInterfaceStyle();
  uint64_t v66 = MEMORY[0x263F81EF0];
  *(void *)(v64 + 32) = v65;
  *(void *)(v64 + 40) = v66;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIButton);
  id v67 = v63;
  UIView.registerForTraitChanges<A>(_:handler:)();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  objc_msgSend(*(id *)&v49[v60], sel_setNumberOfLines_, 1);
  int v68 = *(void **)&v49[v58];
  objc_msgSend(v68, sel_setNumberOfLines_, 2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v69 = swift_allocObject();
  *(_OWORD *)(v69 + 16) = xmmword_2495300D0;
  id v70 = objc_msgSend(v68, sel_centerYAnchor);
  id v71 = objc_msgSend(v49, sel_contentView);
  id v72 = objc_msgSend(v71, sel_centerYAnchor);

  id v73 = objc_msgSend(v70, sel_constraintEqualToAnchor_, v72);
  *(void *)(v69 + 32) = v73;
  specialized Array._endMutation()();
  *(void *)&v49[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleCenterYConstaint] = v69;
  swift_bridgeObjectRelease();
  uint64_t v74 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v74, sel_activateConstraints_, isa);

  return v49;
}

void closure #1 in CAFUIProminentSettingCell.init(frame:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x24C5A0810](v3);
  if (v4)
  {
    id v5 = (void *)v4;
    CAFUIProminentSettingCell.configureButtonColors()();
  }
}

uint64_t CAFUIProminentSettingCell.isHighlightable.getter()
{
  return 0;
}

uint64_t CAFUIProminentSettingCell.isCellEnabled.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  swift_beginAccess();
  if (*v1)
  {
    uint64_t v2 = v1[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
    swift_unknownObjectRetain();
    char v5 = v4(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

Swift::Void __swiftcall CAFUIProminentSettingCell.prepareForReuse()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIProminentSettingCell();
  objc_msgSendSuper2(&v2, sel_prepareForReuse);
  uint64_t v1 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable];
  swift_beginAccess();
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  swift_unknownObjectRelease();
  if (*(void *)v1) {
    CAFUIProminentSettingCell.configureCell()();
  }
}

Swift::Void __swiftcall CAFUIProminentSettingCell.configureCell()()
{
  uint64_t v255 = type metadata accessor for CharacterSet();
  uint64_t v254 = *(void *)(v255 - 8);
  MEMORY[0x270FA5388](v255);
  id v253 = (char *)&v250 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v260 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v2 = *(void *)(v260 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v260);
  id v252 = (char *)&v250 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v250 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v250 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  id v13 = (char *)&v250 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  double v256 = (char *)&v250 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  id v251 = (char *)&v250 - v17;
  MEMORY[0x270FA5388](v16);
  id v19 = (char *)&v250 - v18;
  uint64_t v20 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable];
  swift_beginAccess();
  uint64_t v21 = *(void *)v20;
  if (!*(void *)v20) {
    goto LABEL_111;
  }
  uint64_t v264 = v20;
  uint64_t v261 = (uint64_t (**)(uint64_t, id))*((void *)v20 + 1);
  double v22 = self;
  id v265 = v0;
  uint64_t v23 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_modifiableContstraints];
  swift_beginAccess();
  uint64_t v266 = (uint64_t *)v23;
  uint64_t v24 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v257 = v24;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v258 = v22;
  objc_msgSend(v22, sel_deactivateConstraints_, isa);

  self;
  uint64_t v26 = swift_dynamicCastObjCClass();
  uint64_t v27 = v21;
  uint64_t v262 = v21;
  if (!v26) {
    goto LABEL_11;
  }
  id v28 = (void *)v26;
  swift_unknownObjectRetain();
  if (!objc_msgSend(v28, sel_on)) {
    goto LABEL_10;
  }
  if (*(void *)v264)
  {
    uint64_t v29 = *((void *)v264 + 1);
    uint64_t ObjectType = swift_getObjectType();
    id v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 16);
    swift_unknownObjectRetain();
    char v32 = v31(ObjectType, v29);
    uint64_t v27 = v262;
    LOBYTE(ObjectType) = v32;
    swift_unknownObjectRelease();
    if ((ObjectType & 1) == 0)
    {
LABEL_10:
      swift_unknownObjectRelease();
LABEL_11:
      id v46 = v264;
      id v263 = *(id *)&v265[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel];
      if (!*(void *)v264) {
        goto LABEL_13;
      }
      uint64_t v47 = *((void *)v264 + 1);
      uint64_t v48 = swift_getObjectType();
      uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 16);
      swift_unknownObjectRetain();
      uint64_t v50 = v48;
      id v46 = v264;
      LOBYTE(v47) = v49(v50, v47);
      swift_unknownObjectRelease();
      if ((v47 & 1) == 0) {
        uint64_t v51 = &selRef_grayColor;
      }
      else {
LABEL_13:
      }
        uint64_t v51 = &selRef_labelColor;
      id v52 = [self *v51];
      objc_msgSend(v263, sel_setTextColor_, v52);

      id v259 = *(id *)&v265[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel];
      if (!*(void *)v46) {
        goto LABEL_17;
      }
      uint64_t v53 = *((void *)v46 + 1);
      uint64_t v54 = swift_getObjectType();
      id v55 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 16);
      swift_unknownObjectRetain();
      uint64_t v56 = v54;
      id v46 = v264;
      char v57 = v55(v56, v53);
      uint64_t v27 = v262;
      LOBYTE(v53) = v57;
      swift_unknownObjectRelease();
      if ((v53 & 1) == 0) {
        uint64_t v58 = &selRef_grayColor;
      }
      else {
LABEL_17:
      }
        uint64_t v58 = &selRef_secondaryLabelColor;
      id v59 = [self *v58];
      objc_msgSend(v259, sel_setTextColor_, v59);

      id v43 = v265;
      uint64_t v60 = (void **)&v265[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_customPlatterView];
      uint64_t v61 = swift_beginAccess();
      id v62 = *v60;
      id v63 = v256;
      if (v62)
      {
        id v64 = v62;
        static UIBackgroundConfiguration.clear()();
        uint64_t v65 = v260;
        (*(void (**)(id, void, uint64_t, uint64_t))(v2 + 56))(v63, 0, 1, v260);
        uint64_t v66 = MEMORY[0x24C59F900](v63);
        MEMORY[0x24C59F8F0](v66);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v13, 1, v65))
        {
          outlined init with copy of UIBackgroundConfiguration?((uint64_t)v13, (uint64_t)v63);
          MEMORY[0x24C59F900](v63);

          outlined destroy of UIBackgroundConfiguration?((uint64_t)v13);
        }
        else
        {
          id v69 = v64;
          UIBackgroundConfiguration.customView.setter();
          MEMORY[0x24C59F900](v13);

          id v46 = v264;
        }
        id v44 = v261;
LABEL_26:
        uint64_t v70 = swift_getObjectType();
        id v71 = (char *)v44[6](v70, v44);
        id v72 = &selRef_setOpacity_;
        uint64_t v260 = v70;
        if (v71)
        {
          id v73 = v71;
          double v256 = v71;
          goto LABEL_34;
        }
        v44[5](v70, v44);
        if (v74)
        {
          unint64_t v75 = 0xD000000000000013;
          swift_bridgeObjectRelease();
          unint64_t v76 = 0x8000000249536DE0;
        }
        else
        {
          self;
          if (!swift_dynamicCastObjCClass()) {
            goto LABEL_51;
          }
          unint64_t v76 = 0xE800000000000000;
          unint64_t v75 = 0x322E686374697773;
        }
        uint64_t v77 = *MEMORY[0x263F83580];
        unint64_t v78 = self;
        id v79 = objc_msgSend(v78, sel_configurationWithTextStyle_scale_, v77, 2);
        id v80 = objc_msgSend(v78, sel_configurationWithWeight_, 6);
        id v81 = objc_msgSend(v79, sel_configurationByApplyingConfiguration_, v80);

        id v82 = (void *)MEMORY[0x24C59F610](v75, v76);
        swift_bridgeObjectRelease();
        unsigned __int8 v83 = (char *)CAFUIImageForSymbolNameWithConfiguration(v82, v81);

        if (v83)
        {
          double v256 = v83;
          id v73 = v83;
          id v71 = 0;
          id v46 = v264;
          id v72 = &selRef_setOpacity_;
LABEL_34:
          CGFloat v84 = *(void **)&v43[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton];
          int v85 = v71;
          objc_msgSend(v84, v72[373], 0);
          int v86 = v73;
          objc_msgSend(v84, sel_setImage_forState_, v86, 0);

          if (!*(void *)v46) {
            goto LABEL_36;
          }
          uint64_t v87 = *((void *)v46 + 1);
          uint64_t v88 = swift_getObjectType();
          unint64_t v89 = *(uint64_t (**)(uint64_t, uint64_t))(v87 + 16);
          swift_unknownObjectRetain();
          char v90 = v89(v88, v87);
          id v46 = v264;
          LOBYTE(v87) = v90;
          swift_unknownObjectRelease();
          if ((v87 & 1) == 0)
          {
            id v91 = objc_msgSend(v84, sel_layer);
            LODWORD(v93) = 1050253722;
            objc_msgSend(v91, sel_setOpacity_, v93);
          }
          else
          {
LABEL_36:
            id v91 = objc_msgSend(v84, sel_layer);
            LODWORD(v92) = 1.0;
            objc_msgSend(v91, sel_setOpacity_, v92);
          }

          self;
          uint64_t v94 = swift_dynamicCastObjCClass();
          id v252 = v86;
          if (v94)
          {
            if (*(void *)v46)
            {
              uint64_t v95 = *((void *)v46 + 1);
              uint64_t v96 = swift_getObjectType();
              uint64_t v97 = *(uint64_t (**)(uint64_t, uint64_t))(v95 + 16);
              swift_unknownObjectRetain();
              char v98 = v97(v96, v95);
              swift_unknownObjectRelease();
            }
            else
            {
              char v98 = 1;
            }
          }
          else
          {
            char v98 = 0;
          }
          objc_msgSend(v84, sel_setUserInteractionEnabled_, v98 & 1);
          CAFUIProminentSettingCell.configureButtonColors()();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v99 = swift_allocObject();
          *(_OWORD *)(v99 + 16) = xmmword_249532260;
          CGRect v100 = *(void **)&v43[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_buttonLayoutGuide];
          id v101 = objc_msgSend(v100, sel_leadingAnchor);
          id v102 = objc_msgSend(v43, sel_contentView);
          id v103 = objc_msgSend(v102, (SEL)&off_26525C238 + 2);

          id v104 = objc_msgSend(v101, sel_constraintEqualToAnchor_, v103);
          *(void *)(v99 + 32) = v104;
          id v105 = objc_msgSend(v100, sel_centerYAnchor);
          id v106 = objc_msgSend(v43, sel_contentView);
          id v107 = objc_msgSend(v106, sel_centerYAnchor);

          id v108 = objc_msgSend(v105, sel_constraintEqualToAnchor_, v107);
          *(void *)(v99 + 40) = v108;
          id v109 = objc_msgSend(v100, sel_widthAnchor);
          id v110 = objc_msgSend(v109, sel_constraintEqualToConstant_, 52.0);

          *(void *)(v99 + 48) = v110;
          id v111 = objc_msgSend(v100, sel_heightAnchor);
          id v112 = objc_msgSend(v111, sel_constraintEqualToConstant_, 52.0);

          *(void *)(v99 + 56) = v112;
          id v113 = objc_msgSend(v84, sel_centerXAnchor);
          id v114 = objc_msgSend(v100, sel_centerXAnchor);
          id v115 = objc_msgSend(v113, sel_constraintEqualToAnchor_, v114);

          *(void *)(v99 + 64) = v115;
          id v116 = objc_msgSend(v84, sel_centerYAnchor);
          id v117 = objc_msgSend(v100, sel_centerYAnchor);
          id v118 = objc_msgSend(v116, sel_constraintEqualToAnchor_, v117);

          *(void *)(v99 + 72) = v118;
          id v119 = objc_msgSend(v84, sel_widthAnchor);
          id v120 = objc_msgSend(v119, sel_constraintEqualToConstant_, 36.0);

          *(void *)(v99 + 80) = v120;
          id v121 = objc_msgSend(v84, sel_heightAnchor);
          id v122 = objc_msgSend(v121, sel_constraintEqualToConstant_, 36.0);

          *(void *)(v99 + 88) = v122;
          id v123 = v263;
          id v124 = objc_msgSend(v263, sel_leadingAnchor);
          id v125 = objc_msgSend(v100, sel_trailingAnchor);
          id v126 = objc_msgSend(v124, sel_constraintEqualToAnchor_, v125);

          *(void *)(v99 + 96) = v126;
          id v127 = objc_msgSend(v123, sel_trailingAnchor);
          id v128 = objc_msgSend(v265, sel_contentView);
          id v129 = objc_msgSend(v128, sel_trailingAnchor);

          id v130 = objc_msgSend(v127, sel_constraintEqualToAnchor_constant_, v129, -12.0);
          *(void *)(v99 + 104) = v130;
          uint64_t v267 = v99;
          specialized Array._endMutation()();
          *uint64_t v266 = v267;

          id v44 = v261;
          uint64_t v27 = v262;
LABEL_44:
          swift_bridgeObjectRelease();
          uint64_t v131 = v44[10];
          uint64_t v132 = v260;
          uint64_t v133 = (void *)v131(v260, v44);
          if (v133)
          {
            uint64_t v134 = v133;
            id v135 = objc_msgSend(v133, sel_userVisibleLabel);
            if (v135)
            {
              id v136 = v135;
              uint64_t v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v139 = v138;

              uint64_t v267 = v137;
              uint64_t v268 = v139;
              unint64_t v140 = v253;
              static CharacterSet.whitespaces.getter();
              lazy protocol witness table accessor for type String and conformance String();
              uint64_t v141 = StringProtocol.trimmingCharacters(in:)();
              unint64_t v143 = v142;
              (*(void (**)(char *, uint64_t))(v254 + 8))(v140, v255);
              swift_bridgeObjectRelease();

              uint64_t v144 = HIBYTE(v143) & 0xF;
              if ((v143 & 0x2000000000000000) == 0) {
                uint64_t v144 = v141 & 0xFFFFFFFFFFFFLL;
              }
              if (v144)
              {
                uint64_t v132 = v260;
                goto LABEL_54;
              }
              swift_bridgeObjectRelease();
              uint64_t v132 = v260;
            }
            else
            {
            }
          }
          uint64_t v141 = v44[1](v132, v44);
          unint64_t v143 = v155;
LABEL_54:
          if (CAFListContentRepresentable.isLimitedUI.getter(v132, (uint64_t)v44))
          {
            id v156 = objc_allocWithZone(MEMORY[0x263F089B8]);
            uint64_t v157 = (void *)MEMORY[0x24C59F610](v141, v143);
            swift_bridgeObjectRelease();
            id v158 = objc_msgSend(v156, sel_initWithString_, v157);

            if (!*(void *)v264) {
              goto LABEL_57;
            }
            uint64_t v159 = *((void *)v264 + 1);
            uint64_t v160 = swift_getObjectType();
            uint64_t v161 = *(uint64_t (**)(uint64_t, uint64_t))(v159 + 16);
            swift_unknownObjectRetain();
            char v162 = v161(v160, v159);
            uint64_t v132 = v260;
            LOBYTE(v159) = v162;
            swift_unknownObjectRelease();
            if ((v159 & 1) == 0) {
              uint64_t v163 = &selRef_grayColor;
            }
            else {
LABEL_57:
            }
              uint64_t v163 = &selRef_labelColor;
            id v166 = [self *v163];
            id v165 = objc_msgSend(self, sel_configurationWithHierarchicalColor_, v166);

            id v167 = (void *)MEMORY[0x24C59F610](0x676E697265657473, 0xED00006C65656877);
            id v168 = CAFUIImageForSymbolNameWithConfiguration(v167, v165);

            if (v168)
            {
              id v169 = objc_msgSend(self, sel_textAttachmentWithImage_, v168);
              id v170 = objc_allocWithZone(MEMORY[0x263F086A0]);
              uint64_t v171 = (void *)MEMORY[0x24C59F610](8224, 0xE200000000000000);
              id v172 = objc_msgSend(v170, sel_initWithString_, v171);

              objc_msgSend(v158, sel_appendAttributedString_, v172);
              id v173 = objc_msgSend(self, sel_attributedStringWithAttachment_, v169);
              objc_msgSend(v158, sel_appendAttributedString_, v173);

              uint64_t v132 = v260;
            }
            id v174 = v263;
            objc_msgSend(v263, sel_setLineBreakMode_, 5);
            objc_msgSend(v174, sel_setAttributedText_, v158);

            id v44 = v261;
            uint64_t v27 = v262;
          }
          else
          {
            id v164 = v263;
            objc_msgSend(v263, sel_setLineBreakMode_, 4);
            id v165 = (id)MEMORY[0x24C59F610](v141, v143);
            swift_bridgeObjectRelease();
            objc_msgSend(v164, sel_setText_, v165);
          }

          uint64_t v175 = (void *)v131(v132, v44);
          id v176 = v265;
          if (v175)
          {
            uint64_t v177 = v175;
            id v178 = objc_msgSend(v175, sel_userVisibleValue);
            if (v178)
            {
              uint64_t v179 = v178;
              uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v182 = v181;

              uint64_t v267 = v180;
              uint64_t v268 = v182;
              uint64_t v183 = v253;
              static CharacterSet.whitespaces.getter();
              lazy protocol witness table accessor for type String and conformance String();
              uint64_t v184 = StringProtocol.trimmingCharacters(in:)();
              unint64_t v186 = v185;
              (*(void (**)(char *, uint64_t))(v254 + 8))(v183, v255);
              swift_bridgeObjectRelease();
              uint64_t v187 = HIBYTE(v186) & 0xF;
              if ((v186 & 0x2000000000000000) == 0) {
                uint64_t v187 = v184 & 0xFFFFFFFFFFFFLL;
              }
              if (v187)
              {
                uint64_t v188 = (void *)MEMORY[0x24C59F610](v184, v186);
                swift_bridgeObjectRelease();
                id v189 = v259;
                objc_msgSend(v259, sel_setText_, v188);

                goto LABEL_79;
              }

              swift_bridgeObjectRelease();
            }
            else
            {
            }
          }
          swift_getObjectType();
          uint64_t v190 = swift_conformsToProtocol2();
          if (v190) {
            uint64_t v191 = v190;
          }
          else {
            uint64_t v191 = 0;
          }
          if (v190) {
            uint64_t v192 = v27;
          }
          else {
            uint64_t v192 = 0;
          }
          if (v192)
          {
            uint64_t v193 = swift_getObjectType();
            uint64_t v194 = *(uint64_t (**)(uint64_t, uint64_t))(v191 + 16);
            swift_unknownObjectRetain();
            v195._rawValue = (void *)v194(v193, v191);
            v196._rawValue = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v191 + 24))(v193, v191);
            Swift::String v197 = CAFUILocalizedValues(for:selectedValues:)(v195, v196);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            int v198 = (void *)MEMORY[0x24C59F610](v197._countAndFlagsBits, v197._object);
            swift_bridgeObjectRelease();
            id v189 = v259;
            objc_msgSend(v259, sel_setText_, v198);

            swift_unknownObjectRelease();
LABEL_79:
            id v199 = v263;
            objc_msgSend(v263, sel_setNumberOfLines_, 1);
            objc_msgSend(v189, sel_setHidden_, 0);
            id v200 = objc_msgSend(v199, sel_topAnchor);
            id v201 = objc_msgSend(v176, sel_contentView);
            id v202 = objc_msgSend(v201, sel_topAnchor);

            uint64_t v261 = (uint64_t (**)(uint64_t, id))objc_msgSend(v200, sel_constraintEqualToAnchor_, v202);
            id v203 = objc_msgSend(v199, sel_bottomAnchor);
            id v204 = objc_msgSend(v176, sel_contentView);
            id v205 = objc_msgSend(v204, sel_centerYAnchor);

            uint64_t v264 = (char *)objc_msgSend(v203, sel_constraintEqualToAnchor_constant_, v205, 7.0);
            id v206 = objc_msgSend(v189, sel_topAnchor);
            id v207 = objc_msgSend(v176, sel_contentView);
            id v208 = objc_msgSend(v207, sel_centerYAnchor);

            id v209 = objc_msgSend(v206, sel_constraintEqualToAnchor_constant_, v208, -7.0);
            id v210 = objc_msgSend(v189, sel_leadingAnchor);
            id v211 = objc_msgSend(v199, sel_leadingAnchor);
            id v212 = objc_msgSend(v210, sel_constraintEqualToAnchor_, v211);

            id v213 = objc_msgSend(v189, sel_trailingAnchor);
            id v214 = objc_msgSend(v199, sel_trailingAnchor);
            id v215 = objc_msgSend(v213, sel_constraintEqualToAnchor_, v214);

            id v216 = objc_msgSend(v189, sel_bottomAnchor);
            id v217 = objc_msgSend(v176, sel_contentView);
            id v218 = objc_msgSend(v217, sel_bottomAnchor);

            id v219 = objc_msgSend(v216, sel_constraintEqualToAnchor_, v218);
            unint64_t v220 = v266;
            swift_beginAccess();
            unint64_t v221 = *v220;
            if (v221 >> 62)
            {
              swift_bridgeObjectRetain();
              id v222 = (uint64_t (**)(uint64_t, id))_CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              id v222 = *(uint64_t (***)(uint64_t, id))((v221 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            if (__OFADD__(v222, 6))
            {
              __break(1u);
            }
            else
            {
              id v176 = v215;
              double v223 = v266;
              specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)((char *)v222 + 6, 1);
              specialized Array._endMutation()();
              id v222 = v261;
              MEMORY[0x24C59F700]();
              if (*(void *)((*v223 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v223 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              {
LABEL_83:
                double v224 = v266;
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                v225 = v264;
                MEMORY[0x24C59F700]();
                if (*(void *)((*v224 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v224 & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                id v226 = v266;
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                id v227 = v209;
                MEMORY[0x24C59F700]();
                if (*(void *)((*v226 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v226 & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v228 = v266;
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                id v229 = v212;
                MEMORY[0x24C59F700]();
                if (*(void *)((*v228 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v228 & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                id v230 = v266;
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                id v231 = v176;
                MEMORY[0x24C59F700]();
                if (*(void *)((*v230 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v230 & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v232 = v266;
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                id v233 = v219;
                MEMORY[0x24C59F700]();
                if (*(void *)((*v232 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v232 & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                swift_endAccess();

LABEL_100:
                swift_bridgeObjectRetain();
                Class v247 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                objc_msgSend(v258, sel_activateConstraints_, v247);
                swift_unknownObjectRelease();

                return;
              }
            }
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            goto LABEL_83;
          }
          id v234 = v259;
          objc_msgSend(v259, sel_setText_, 0);
          id v235 = v263;
          objc_msgSend(v263, sel_setNumberOfLines_, 2);
          objc_msgSend(v234, sel_setHidden_, 1);
          id v236 = objc_msgSend(v235, sel_topAnchor);
          id v237 = objc_msgSend(v176, sel_contentView);
          id v238 = objc_msgSend(v237, sel_topAnchor);

          id v227 = objc_msgSend(v236, sel_constraintEqualToAnchor_, v238);
          id v239 = objc_msgSend(v235, sel_bottomAnchor);
          id v240 = objc_msgSend(v176, sel_contentView);
          id v241 = objc_msgSend(v240, sel_bottomAnchor);

          id v242 = objc_msgSend(v239, sel_constraintEqualToAnchor_, v241);
          id v243 = v266;
          swift_beginAccess();
          unint64_t v244 = *v243;
          if (v244 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v249 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!__OFADD__(v249, 2))
            {
LABEL_96:
              id v245 = v266;
              ((void (*)(void))specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:))();
              specialized Array._endMutation()();
              id v227 = v227;
              MEMORY[0x24C59F700]();
              if (*(void *)((*v245 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v245 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              {
LABEL_97:
                v246 = v266;
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                v225 = (char *)v242;
                MEMORY[0x24C59F700]();
                if (*(void *)((*v246 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v246 & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                swift_endAccess();
                goto LABEL_100;
              }
LABEL_108:
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              goto LABEL_97;
            }
          }
          else if (!__OFADD__(*(void *)((v244 & 0xFFFFFFFFFFFFFF8) + 0x10), 2))
          {
            goto LABEL_96;
          }
          __break(1u);
          goto LABEL_108;
        }
LABEL_51:
        objc_msgSend(*(id *)&v43[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton], sel_setHidden_, 1);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v145 = swift_allocObject();
        *(_OWORD *)(v145 + 16) = xmmword_249530110;
        id v146 = v263;
        id v147 = objc_msgSend(v263, sel_leadingAnchor);
        id v148 = objc_msgSend(v43, sel_contentView);
        id v149 = objc_msgSend(v148, sel_leadingAnchor);

        id v150 = objc_msgSend(v147, sel_constraintEqualToAnchor_constant_, v149, 12.0);
        *(void *)(v145 + 32) = v150;
        id v151 = objc_msgSend(v146, sel_trailingAnchor);
        id v152 = objc_msgSend(v43, sel_contentView);
        id v153 = objc_msgSend(v152, sel_trailingAnchor);

        id v154 = objc_msgSend(v151, sel_constraintEqualToAnchor_constant_, v153, -12.0);
        *(void *)(v145 + 40) = v154;
        uint64_t v267 = v145;
        specialized Array._endMutation()();
        double v256 = 0;
        *uint64_t v266 = v267;
        goto LABEL_44;
      }
      id v67 = v252;
      MEMORY[0x24C59F910](v61);
      uint64_t v68 = v260;
      (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v10, v67, v260);
      if (objc_msgSend(self, sel_tableCellPlainBackgroundColor))
      {
        UIBackgroundConfiguration.backgroundColor.setter();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v67, v68);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v10, 0, 1, v68);
        MEMORY[0x24C59F900](v10);
        id v44 = v261;
        goto LABEL_26;
      }
      __break(1u);
      goto LABEL_110;
    }
  }
  id v33 = v265;
  id v34 = *(void **)&v265[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel];
  id v35 = self;
  id v36 = objc_msgSend(v35, sel_systemBlackColor);
  id v263 = v34;
  objc_msgSend(v34, sel_setTextColor_, v36);

  double v37 = *(void **)&v33[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel];
  id v38 = objc_msgSend(v35, sel_systemGrayColor);
  id v259 = v37;
  objc_msgSend(v37, sel_setTextColor_, v38);

  MEMORY[0x24C59F910]();
  uint64_t v39 = v260;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v19, v6, v260);
  if (objc_msgSend(v35, sel_tableCellPlainBackgroundColor))
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v39);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v19, 0, 1, v39);
    uint64_t v40 = MEMORY[0x24C59F900](v19);
    uint64_t v41 = (uint64_t)v251;
    MEMORY[0x24C59F8F0](v40);
    int v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v41, 1, v39);
    id v43 = v33;
    id v44 = v261;
    if (v42)
    {
      uint64_t v45 = v256;
      outlined init with copy of UIBackgroundConfiguration?(v41, (uint64_t)v256);
      MEMORY[0x24C59F900](v45);
      swift_unknownObjectRelease();
      outlined destroy of UIBackgroundConfiguration?(v41);
    }
    else
    {
      id v248 = objc_msgSend(v35, sel_systemWhiteColor);
      UIBackgroundConfiguration.backgroundColor.setter();
      MEMORY[0x24C59F900](v41);
      swift_unknownObjectRelease();
    }
    id v46 = v264;
    goto LABEL_26;
  }
LABEL_110:
  __break(1u);
LABEL_111:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CAFUIProminentSettingCell.configureButtonColors()()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable];
  swift_beginAccess();
  if (!*(void *)v2) {
    goto LABEL_9;
  }
  uint64_t v3 = *((void *)v2 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 80);
  swift_unknownObjectRetain();
  uint64_t v6 = (void *)v5(ObjectType, v3);
  swift_unknownObjectRelease();
  if (!v6)
  {
LABEL_7:
    if (*(void *)v2)
    {
      uint64_t v8 = *((void *)v2 + 1);
      uint64_t v9 = swift_getObjectType();
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 16);
      swift_unknownObjectRetain();
      LOBYTE(v8) = v10(v9, v8);
      swift_unknownObjectRelease();
      if ((v8 & 1) == 0)
      {
        id v11 = objc_msgSend(self, sel_grayColor);
LABEL_10:
        v7.super.Class isa = (Class)v11;
        if (!*(void *)v2) {
          goto LABEL_14;
        }
        goto LABEL_11;
      }
    }
LABEL_9:
    id v11 = objc_msgSend(self, sel__carSystemFocusColor);
    goto LABEL_10;
  }
  if (!objc_msgSend(v6, sel_color))
  {

    goto LABEL_7;
  }
  objc_msgSend(v6, sel_color);
  v7.super.Class isa = CAFImageColor.convertToUIColor()().super.isa;

  if (!*(void *)v2) {
    goto LABEL_14;
  }
LABEL_11:
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (v12)
  {
    id v13 = (void *)v12;
    swift_unknownObjectRetain();
    unsigned int v14 = objc_msgSend(v13, sel_on);
    uint64_t v15 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton];
    if (v14)
    {
      id v16 = objc_msgSend(self, sel_systemWhiteColor);
      objc_msgSend(v15, sel_setTintColor_, v16);

      objc_msgSend(v15, sel_setBackgroundColor_, v7.super.isa);
      id v17 = objc_msgSend(v15, sel_layer);
    }
    else
    {
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton], sel_setTintColor_, v7.super.isa);
      id v27 = objc_msgSend(v1, sel_traitCollection);
      id v28 = objc_msgSend(v27, sel_userInterfaceStyle);

      id v29 = objc_msgSend(self, sel_systemBlackColor);
      id v30 = v29;
      if (v28 == (id)1)
      {
        id v31 = objc_msgSend(v29, sel_colorWithAlphaComponent_, 0.06);

        objc_msgSend(v15, sel_setBackgroundColor_, v31);
        id v32 = objc_msgSend(v15, sel_layer);
LABEL_20:
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v36 = v35;
        id v37 = objc_allocWithZone(MEMORY[0x263F157C8]);
        id v38 = (void *)MEMORY[0x24C59F610](v34, v36);
        swift_bridgeObjectRelease();
        id v39 = objc_msgSend(v37, sel_initWithType_, v38);

        objc_msgSend(v32, sel_setCompositingFilter_, v39);
        swift_unknownObjectRelease();
        goto LABEL_21;
      }
      id v33 = objc_msgSend(v29, sel_colorWithAlphaComponent_, 0.17);

      objc_msgSend(v15, sel_setBackgroundColor_, v33);
      id v17 = objc_msgSend(v15, sel_layer);
    }
    id v32 = v17;
    goto LABEL_20;
  }
LABEL_14:
  uint64_t v18 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton];
  objc_msgSend(v18, sel_setTintColor_, v7.super.isa);
  id v19 = objc_msgSend(self, sel_clearColor);
  objc_msgSend(v18, sel_setBackgroundColor_, v19);

  id v20 = objc_msgSend(v18, sel_layer);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;
  id v24 = objc_allocWithZone(MEMORY[0x263F157C8]);
  id v25 = (void *)MEMORY[0x24C59F610](v21, v23);
  swift_bridgeObjectRelease();
  uint64_t v26 = (objc_class *)objc_msgSend(v24, sel_initWithType_, v25);

  objc_msgSend(v20, sel_setCompositingFilter_, v26);
  v7.super.Class isa = v26;
LABEL_21:
}

uint64_t CAFUIProminentSettingCell.buttonClicked()()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  uint64_t result = swift_beginAccess();
  if (*v1)
  {
    uint64_t v3 = v1[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
    swift_unknownObjectRetain();
    if (v5(ObjectType, v3))
    {
      self;
      uint64_t v6 = swift_dynamicCastObjCClass();
      if (v6)
      {
        UIColor v7 = (void *)v6;
        swift_unknownObjectRetain();
        objc_msgSend(v7, sel_setOn_, objc_msgSend(v7, sel_on) ^ 1);
        swift_unknownObjectRelease();
      }
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

id CAFUIProminentSettingCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIProminentSettingCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id protocol witness for CAFUICellProtocol.imageColor.getter in conformance CAFUIProminentSettingCell()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageColor);
  swift_beginAccess();
  objc_super v2 = *v1;

  return v2;
}

id protocol witness for CAFUICellProtocol.accessoryColor.getter in conformance CAFUIProminentSettingCell()
{
  id v0 = objc_msgSend(self, sel_clearColor);

  return v0;
}

uint64_t protocol witness for CAFUICellProtocol.isCellEnabled.getter in conformance CAFUIProminentSettingCell()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  swift_beginAccess();
  if (*v1)
  {
    uint64_t v2 = v1[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
    swift_unknownObjectRetain();
    char v5 = v4(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

uint64_t type metadata accessor for CAFUIProminentSettingCell()
{
  return self;
}

ValueMetadata *type metadata accessor for CAFUIProminentSettingCell.Constants()
{
  return &type metadata for CAFUIProminentSettingCell.Constants;
}

ValueMetadata *type metadata accessor for CAFUIProminentSettingCell.Constants.Cell()
{
  return &type metadata for CAFUIProminentSettingCell.Constants.Cell;
}

uint64_t sub_249527A54()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in CAFUIProminentSettingCell.init(frame:)(uint64_t a1, uint64_t a2)
{
  closure #1 in CAFUIProminentSettingCell.init(frame:)(a1, a2, v2);
}

uint64_t outlined init with copy of UIBackgroundConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UIBackgroundConfiguration?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static CAFUILogger.default(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFUILogger.default(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x263F90270]);
}

uint64_t static CAFUILogger.error(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFUILogger.default(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x263F90280]);
}

uint64_t static CAFUILogger.debug(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFUILogger.default(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x263F90278]);
}

uint64_t static CAFUILogger.info(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFUILogger.default(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x263F90270]);
}

uint64_t one-time initialization function for default()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.default = result;
  return result;
}

uint64_t static CAFUILogger.fault(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFUILogger.default(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x263F90288]);
}

uint64_t static CAFUILogger.default(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  os_log_type_t v12 = a8();

  return specialized static CAFUILogger.log(_:message:function:file:line:)(v12, a1, a2, a3, a4);
}

uint64_t specialized static CAFUILogger.log(_:message:function:file:line:)(os_log_type_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v10 = static OS_os_log.default;
  uint64_t result = os_log_type_enabled((os_log_t)static OS_os_log.default, a1);
  if (result)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = v13;
    *(_DWORD *)uint64_t v12 = 136315650;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2494AC000, v10, a1, "%s: %ld  %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x24C5A0780](v13, -1, -1);
    return MEMORY[0x24C5A0780](v12, -1, -1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUILogger()
{
  return &type metadata for CAFUILogger;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t CAFVolume.numericDisplayKind.getter()
{
  return 0;
}

id CAFVolume.rangeValues.getter()
{
  id v1 = objc_msgSend(v0, sel_volumeRange);

  return v1;
}

uint64_t CAFVolume.showStepperBar.getter()
{
  return 1;
}

uint64_t CAFVolume.minimumSymbolName.getter()
{
  return 0x73756E696DLL;
}

uint64_t CAFVolume.maximumSymbolName.getter()
{
  return 1937075312;
}

uint64_t CAFVolume.userVisibleValue.getter()
{
  return 0;
}

uint64_t CAFVolume.symbolName.getter()
{
  return 0;
}

uint64_t CAFVolume.prominenceInfo.getter()
{
  return 0;
}

id CAFVolume.value.getter()
{
  return objc_msgSend(v0, sel_volume);
}

id CAFVolume.value.setter(unsigned __int8 a1)
{
  return objc_msgSend(v1, sel_setVolume_, a1);
}

id (*CAFVolume.value.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(v1, sel_volume);
  return CAFVolume.value.modify;
}

id CAFVolume.value.modify(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, sel_setVolume_, *(unsigned __int8 *)(a1 + 8));
}

uint64_t CAFVolume.isLimitableUI.getter()
{
  return 0;
}

uint64_t CAFVolume.isEnabled.getter()
{
  return 1;
}

uint64_t CAFVolume.isHighlightable.getter()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type UInt8 and conformance UInt8()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }
  return result;
}

id protocol witness for CAFUINumericRepresentable.value.getter in conformance CAFVolume@<X0>(unsigned char *a1@<X8>)
{
  id result = objc_msgSend(v1, sel_volume);
  *a1 = (_BYTE)result;
  return result;
}

id protocol witness for CAFUINumericRepresentable.value.setter in conformance CAFVolume(unsigned __int8 *a1)
{
  return objc_msgSend(v1, sel_setVolume_, *a1);
}

id (*protocol witness for CAFUINumericRepresentable.value.modify in conformance CAFVolume(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(v1, sel_volume);
  return CAFVolume.value.modify;
}

id protocol witness for CAFUINumericRepresentable.rangeValues.getter in conformance CAFVolume()
{
  id v1 = objc_msgSend(v0, sel_volumeRange);

  return v1;
}

uint64_t protocol witness for CAFUINumericRepresentable.minimumSymbolName.getter in conformance CAFVolume()
{
  return 0x73756E696DLL;
}

uint64_t protocol witness for CAFUINumericRepresentable.maximumSymbolName.getter in conformance CAFVolume()
{
  return 1937075312;
}

void CAFUIServiceListItem.__allocating_init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)()
{
}

void CAFUIServiceListItem.__ivar_destroyer()
{
}

id *CAFUIServiceListItem.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v0;
}

uint64_t CAFUIServiceListItem.__deallocating_deinit()
{
  CAFUIServiceListItem.deinit();

  return MEMORY[0x270FA0228](v0, 120, 7);
}

uint64_t type metadata accessor for CAFUIServiceListItem()
{
  return self;
}

UIColor __swiftcall UIColor.init(hex:alpha:)(Swift::UInt hex, Swift::Double alpha)
{
  int v3 = hex;
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return (UIColor)objc_msgSend(v4, sel_initWithRed_green_blue_alpha_, (double)BYTE2(v3) / 255.0, (double)BYTE1(v3) / 255.0, (double)v3 / 255.0, alpha);
}

id static UIColor.cafui_HDOrangeColor.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F825C8]);

  return objc_msgSend(v0, sel_initWithRed_green_blue_alpha_, 0.929411765, 0.545098039, 0.0, 1.0);
}

id static UIImage.cafui_hdRadioLogoOrange.getter()
{
  specialized static UIImage.cafui_hdRadioLogo.getter();
  id v1 = v0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithRed_green_blue_alpha_, 0.929411765, 0.545098039, 0.0, 1.0);
  id v3 = objc_msgSend(v1, sel_imageWithTintColor_, v2);

  return v3;
}

BOOL static MulticastBadgeSize.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void MulticastBadgeSize.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int MulticastBadgeSize.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

NSAttributedString __swiftcall String.attributedMulticastString(dark:signalLocked:badgeSize:)(Swift::Bool dark, Swift::Bool signalLocked, CAFUI::MulticastBadgeSize badgeSize)
{
  return (NSAttributedString)specialized String.attributedMulticastString(dark:signalLocked:badgeSize:)(signalLocked, badgeSize, v3, v4);
}

uint64_t CAFUIMulticastLabel.forceDark.getter()
{
  id v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_forceDark);
  swift_beginAccess();
  return *v1;
}

void CAFUIMulticastLabel.forceDark.setter(char a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_forceDark];
  swift_beginAccess();
  *uint64_t v3 = a1;
  if ((a1 & 1) == 0)
  {
    id v4 = objc_msgSend(v1, sel_traitCollection);
    objc_msgSend(v4, sel_userInterfaceStyle);
  }
  id v5 = specialized String.attributedMulticastString(dark:signalLocked:badgeSize:)(v1[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_signalLocked], v1[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_badgeSize], *(void *)&v1[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_multicast], *(void *)&v1[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_multicast + 8]);
  objc_msgSend(v1, sel_setAttributedText_, v5);
}

void (*CAFUIMulticastLabel.forceDark.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_forceDark;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return CAFUIMulticastLabel.forceDark.modify;
}

void CAFUIMulticastLabel.forceDark.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *(unsigned char **)(v3 + 24);
    if ((v4[*(void *)(v3 + 32)] & 1) == 0)
    {
      id v5 = objc_msgSend(*(id *)(v3 + 24), sel_traitCollection);
      objc_msgSend(v5, sel_userInterfaceStyle);

      uint64_t v4 = *(unsigned char **)(v3 + 24);
    }
    id v6 = specialized String.attributedMulticastString(dark:signalLocked:badgeSize:)(v4[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_signalLocked], v4[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_badgeSize], *(void *)&v4[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_multicast], *(void *)&v4[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_multicast + 8]);
    objc_msgSend(v4, sel_setAttributedText_, v6);
  }

  free((void *)v3);
}

char *CAFUIMulticastLabel.__allocating_init(multicast:signalLocked:badgeSize:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  id v9 = objc_allocWithZone(v4);
  return CAFUIMulticastLabel.init(multicast:signalLocked:badgeSize:)(a1, a2, a3, a4);
}

char *CAFUIMulticastLabel.init(multicast:signalLocked:badgeSize:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t ObjectType = swift_getObjectType();
  v4[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_forceDark] = 0;
  uint64_t v10 = &v4[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_multicast];
  void *v10 = a1;
  v10[1] = a2;
  v4[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_signalLocked] = a3;
  v4[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_badgeSize] = a4;
  v29.receiver = v4;
  v29.super_class = (Class)type metadata accessor for CAFUIMulticastLabel();
  id v11 = objc_msgSendSuper2(&v29, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v12 = self;
  id v13 = v11;
  id v14 = objc_msgSend(v12, sel_secondaryLabelColor);
  objc_msgSend(v13, sel_setTextColor_, v14);

  uint64_t v15 = *MEMORY[0x263F835B8];
  id v16 = self;
  id v17 = v13;
  id v18 = objc_msgSend(v16, sel__preferredFontForTextStyle_variant_, v15, 0x10000);
  objc_msgSend(v17, sel_setFont_, v18);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_2495305E0;
  uint64_t v20 = type metadata accessor for UITraitUserInterfaceStyle();
  uint64_t v21 = MEMORY[0x263F81EF0];
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v21;
  uint64_t v22 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v22;
  *(void *)(v23 + 24) = ObjectType;
  id v24 = (char *)v17;
  UIView.registerForTraitChanges<A>(_:handler:)();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  id v25 = &v24[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_forceDark];
  swift_beginAccess();
  if ((*v25 & 1) == 0)
  {
    id v26 = objc_msgSend(v24, sel_traitCollection);
    objc_msgSend(v26, sel_userInterfaceStyle);
  }
  id v27 = specialized String.attributedMulticastString(dark:signalLocked:badgeSize:)(v24[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_signalLocked], v24[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_badgeSize], *(void *)&v24[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_multicast], *(void *)&v24[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_multicast + 8]);
  objc_msgSend(v24, sel_setAttributedText_, v27);

  return v24;
}

void closure #1 in CAFUIMulticastLabel.init(multicast:signalLocked:badgeSize:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x24C5A0810](v3);
  if (v4)
  {
    id v5 = (char *)v4;
    id v6 = (unsigned char *)(v4 + OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_forceDark);
    swift_beginAccess();
    if ((*v6 & 1) == 0)
    {
      id v7 = objc_msgSend(v5, sel_traitCollection);
      objc_msgSend(v7, sel_userInterfaceStyle);
    }
    id v8 = specialized String.attributedMulticastString(dark:signalLocked:badgeSize:)(v5[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_signalLocked], v5[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_badgeSize], *(void *)&v5[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_multicast], *(void *)&v5[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_multicast + 8]);
    objc_msgSend(v5, sel_setAttributedText_, v8);
  }
}

id CAFUIMulticastLabel.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CAFUIMulticastLabel.init(coder:)()
{
  v0[OBJC_IVAR____TtC5CAFUI19CAFUIMulticastLabel_forceDark] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id CAFUIMulticastLabel.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void CAFUIMulticastLabel.init(frame:)()
{
}

id CAFUIMulticastLabel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIMulticastLabel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void specialized static UIImage.cafui_hdRadioLogo.getter()
{
  uint64_t v0 = *MEMORY[0x263F83580];
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_configurationWithTextStyle_scale_, v0, 2);
  id v3 = objc_msgSend(v1, sel_configurationWithWeight_, 4);
  id v4 = objc_msgSend(v2, sel_configurationByApplyingConfiguration_, v3);

  id v5 = (void *)MEMORY[0x24C59F610](0x2E6F696461726468, 0xEC0000006F676F6CLL);
  id v6 = objc_msgSend(self, sel__systemImageNamed_, v5);

  if (v6)
  {
    id v7 = objc_msgSend(v6, sel_imageWithRenderingMode_, 2);

    objc_msgSend(v7, sel_imageWithSymbolConfiguration_, v4);
  }
  else
  {
    __break(1u);
  }
}

id specialized String.attributedMulticastString(dark:signalLocked:badgeSize:)(char a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithRed_green_blue_alpha_, 0.929411765, 0.545098039, 0.0, 1.0);
    specialized static UIImage.cafui_hdRadioLogo.getter();
    id v8 = v7;
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithRed_green_blue_alpha_, 0.929411765, 0.545098039, 0.0, 1.0);
    id v10 = objc_msgSend(v8, sel_imageWithTintColor_, v9);
  }
  else
  {
    id v31 = objc_msgSend(self, sel_secondaryLabelColor);
    specialized static UIImage.cafui_hdRadioLogo.getter();
    id v10 = v11;
  }
  id v32 = v10;
  id v12 = objc_msgSend(self, sel_textAttachmentWithImage_, v10);
  uint64_t v13 = 8 * a2;
  objc_msgSend(v12, sel_setBounds_, 0.0, *(double *)((char *)&unk_249532438 + v13), *(double *)((char *)&unk_249532450 + v13), *(double *)((char *)&unk_249532468 + v13));
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_init);
  id v15 = objc_msgSend(self, sel_attributedStringWithAttachment_, v12);
  objc_msgSend(v14, sel_appendAttributedString_, v15);

  id result = objc_msgSend(self, sel_systemFontOfSize_weight_design_, *MEMORY[0x263F817E0], *(double *)((char *)&unk_249532480 + v13), *MEMORY[0x263F81828]);
  if (result)
  {
    id v17 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2495305E0;
    uint64_t v19 = (void *)*MEMORY[0x263F814F0];
    *(void *)(inited + 32) = *MEMORY[0x263F814F0];
    *(void *)(inited + 64) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
    *(void *)(inited + 40) = v17;
    swift_bridgeObjectRetain();
    id v20 = v19;
    id v30 = v17;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    id v21 = objc_allocWithZone(MEMORY[0x263F086A0]);
    uint64_t v22 = (void *)MEMORY[0x24C59F610](a3, a4);
    swift_bridgeObjectRelease();
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(v21, sel_initWithString_attributes_, v22, isa);

    objc_msgSend(v14, sel_appendAttributedString_, v24);
    uint64_t v25 = swift_initStackObject();
    *(_OWORD *)(v25 + 16) = xmmword_2495305E0;
    id v26 = (void *)*MEMORY[0x263F81500];
    *(void *)(v25 + 32) = *MEMORY[0x263F81500];
    *(void *)(v25 + 64) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIColor);
    *(void *)(v25 + 40) = v31;
    id v27 = v26;
    id v28 = v31;
    specialized Dictionary.init(dictionaryLiteral:)(v25);
    Class v29 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_addAttributes_range_, v29, 0, objc_msgSend(v14, sel_length));

    return v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for CAFUIMulticastLabel()
{
  return self;
}

uint64_t sub_249529308()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_249529340()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in CAFUIMulticastLabel.init(multicast:signalLocked:badgeSize:)(uint64_t a1, uint64_t a2)
{
  closure #1 in CAFUIMulticastLabel.init(multicast:signalLocked:badgeSize:)(a1, a2, *(void *)(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type MulticastBadgeSize and conformance MulticastBadgeSize()
{
  unint64_t result = lazy protocol witness table cache variable for type MulticastBadgeSize and conformance MulticastBadgeSize;
  if (!lazy protocol witness table cache variable for type MulticastBadgeSize and conformance MulticastBadgeSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MulticastBadgeSize and conformance MulticastBadgeSize);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MulticastBadgeSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2495294A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MulticastBadgeSize()
{
  return &type metadata for MulticastBadgeSize;
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

id CAFListContentRepresentable.symbolImage.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 40))();
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = *MEMORY[0x263F83580];
    id v7 = self;
    id v8 = objc_msgSend(v7, sel_configurationWithTextStyle_scale_, v6, 2);
    id v9 = objc_msgSend(v7, sel_configurationWithWeight_, 6);
    id v10 = objc_msgSend(v8, sel_configurationByApplyingConfiguration_, v9);

    id v11 = (void *)MEMORY[0x24C59F610](v5, v4);
    swift_bridgeObjectRelease();
    id v4 = CAFUIImageForSymbolNameWithConfiguration(v11, v10);
  }
  return v4;
}

uint64_t CAFListContentRepresentable.isTracking(in:)()
{
  return 0;
}

void *CAFListContentRepresentable.isLimitedUI.getter(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 24))())
  {
    unint64_t result = (void *)CAFListContentRepresentable.session.getter();
    if (!result) {
      return result;
    }
    int v3 = result;
    id v4 = objc_msgSend(result, sel_limitUserInterfaces);
    if (v4)
    {
      uint64_t v5 = v4;
      if (objc_msgSend(v4, sel_BOOLValue))
      {
        id v6 = objc_msgSend(v3, sel_configuration);
        unint64_t v7 = (unint64_t)objc_msgSend(v6, sel_limitableUserInterfaces);

        return (void *)((v7 >> 5) & 1);
      }
    }
    else
    {
    }
  }
  return 0;
}

id CAFListContentRepresentable.isRHD.getter()
{
  uint64_t v0 = (void *)CAFListContentRepresentable.session.getter();
  id v1 = v0;
  if (v0)
  {
    id v2 = objc_msgSend(v0, sel_configuration);

    id v1 = objc_msgSend(v2, sel_rightHandDrive);
  }
  return v1;
}

void CAFListContentRepresentable.session.setter(void *a1)
{
  specialized CAFListContentRepresentable.session.setter(a1);
}

uint64_t CAFListContentRepresentable.session.getter()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &static CAFUIListContentAssociatedObjects.CARSession);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    type metadata accessor for CARSession();
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v5);
    return 0;
  }
}

void (*CAFListContentRepresentable.session.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(void **a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = CAFListContentRepresentable.session.getter();
  return CAFListContentRepresentable.session.modify;
}

void CAFListContentRepresentable.session.modify(void **a1, char a2)
{
  id v4 = *a1;
  if (a2)
  {
    id v2 = v4;
    specialized CAFListContentRepresentable.session.setter(v4);

    uint64_t v3 = v2;
  }
  else
  {
    specialized CAFListContentRepresentable.session.setter(*a1);
    uint64_t v3 = v4;
  }
}

uint64_t specialized CAFListContentRepresentable.session.setter(void *a1)
{
  swift_beginAccess();
  objc_setAssociatedObject(v1, &static CAFUIListContentAssociatedObjects.CARSession, a1, 0);
  return swift_endAccess();
}

unint64_t type metadata accessor for CARSession()
{
  unint64_t result = lazy cache variable for type metadata for CARSession;
  if (!lazy cache variable for type metadata for CARSession)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CARSession);
  }
  return result;
}

void destroy for CAFUICellSelectionAction(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CAFUICellSelectionAction(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CAFUICellSelectionAction(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CAFUICellSelectionAction(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CAFUICellSelectionAction(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of CAFUICellSelectionAction(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CAFUICellSelectionAction(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of CAFUICellSelectionAction(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUICellSelectionAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUICellSelectionAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CAFUICellSelectionAction(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for CAFUICellSelectionAction(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CAFUICellSelectionAction()
{
  return &type metadata for CAFUICellSelectionAction;
}

id UIStackView.init(axis:spacing:arrangedSubviews:)(uint64_t a1, double a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for UIView();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithArrangedSubviews_, isa);

  id v7 = v6;
  objc_msgSend(v7, sel_setSpacing_, a2);
  objc_msgSend(v7, sel_setAxis_, a1);
  objc_msgSend(v7, sel_setContentMode_, 4);
  objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  return v7;
}

unint64_t type metadata accessor for UIView()
{
  unint64_t result = lazy cache variable for type metadata for UIView;
  if (!lazy cache variable for type metadata for UIView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIView);
  }
  return result;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

void *static CAFDeviceAction.allCases.getter()
{
  return &outlined read-only object #0 of static CAFDeviceAction.allCases.getter;
}

unint64_t CAFDeviceAction.rawValue.getter(char a1)
{
  unint64_t result = 0x7964616552;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x527463656E6E6F43;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CAFDeviceAction(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CAFDeviceAction()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CAFDeviceAction()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CAFDeviceAction()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CAFDeviceAction@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CAFDeviceAction.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CAFDeviceAction(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x7964616552;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEE00747365757165;
      uint64_t v3 = 0x527463656E6E6F43;
      goto LABEL_3;
    case 2:
      *a1 = 0xD000000000000011;
      a1[1] = 0x8000000249532CF0;
      break;
    case 3:
      *a1 = 0xD000000000000012;
      a1[1] = 0x8000000249532D10;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance CAFDeviceAction(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CAFDeviceAction;
}

id CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:)(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_delegate + 8] = 0;
  uint64_t v12 = swift_unknownObjectWeakInit();
  *(void *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_limitedUIView] = 0;
  uint64_t v13 = OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_carSession;
  *(void *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_carSession] = 0;
  *(void *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_device] = a1;
  *(void *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_pairedDevices] = a2;
  *(void *)(v12 + 8) = a6;
  swift_unknownObjectWeakAssign();
  *(void *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_actions] = a3;
  id v14 = *(void **)&v6[v13];
  *(void *)&v6[v13] = a4;
  id v15 = a1;
  id v16 = a2;
  id v17 = a4;

  id v18 = objc_allocWithZone((Class)type metadata accessor for CAFUIHeaderFooterTableView());
  uint64_t v19 = v6;
  id v20 = objc_msgSend(v18, sel_initWithFrame_style_, 0, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v19[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView] = v20;

  v32.receiver = v19;
  v32.super_class = (Class)type metadata accessor for CAFUITableViewController();
  id v21 = objc_msgSendSuper2(&v32, sel_initWithNibName_bundle_, 0, 0);
  uint64_t v22 = self;
  id v23 = v21;
  id v24 = objc_msgSend(v22, sel_defaultCenter);
  uint64_t v25 = *MEMORY[0x263F30DA0];
  id v26 = objc_msgSend(self, sel_mainQueue);
  uint64_t v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v31[4] = partial apply for closure #1 in CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:);
  v31[5] = v27;
  v31[0] = MEMORY[0x263EF8330];
  v31[1] = 1107296256;
  _OWORD v31[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v31[3] = &block_descriptor_43;
  id v28 = _Block_copy(v31);
  swift_release();
  id v29 = objc_msgSend(v24, sel_addObserverForName_object_queue_usingBlock_, v25, 0, v26, v28);

  swift_unknownObjectRelease();
  _Block_release(v28);
  swift_unknownObjectRelease();

  return v23;
}

void closure #1 in CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x24C5A0810](v2);
  if (v3)
  {
    id v4 = (void *)v3;
    CAFUIDevicePickerDetailViewController.updateDevicePickerLimitedUI()();
  }
}

Swift::Void __swiftcall CAFUIDevicePickerDetailViewController.updateDevicePickerLimitedUI()()
{
  id v1 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView];
  uint64_t v2 = OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_carSession;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_carSession];
  if (v3)
  {
    id v4 = v0;
    id v5 = v3;
    id v6 = objc_msgSend(v5, sel_limitUserInterfaces);
    if (v6)
    {
      id v7 = v6;
      unsigned __int8 v8 = objc_msgSend(v6, sel_BOOLValue);

      if (v8)
      {
        id v9 = objc_msgSend(v5, sel_configuration);
        unsigned __int8 v10 = objc_msgSend(v9, sel_limitableUserInterfaces);

        BOOL v11 = (v10 & 0x40) == 0;
        goto LABEL_7;
      }
    }
  }
  BOOL v11 = 1;
LABEL_7:
  objc_msgSend(v1, sel_setAllowsFocus_, v11);
  objc_msgSend(v1, sel_reloadData);
  uint64_t v12 = *(void **)&v0[v2];
  if (v12)
  {
    uint64_t v13 = v0;
    id v14 = v12;
    id v15 = objc_msgSend(v14, sel_limitUserInterfaces);
    if (v15 && (id v16 = v15, v17 = objc_msgSend(v15, sel_BOOLValue), v16, v17))
    {
      id v18 = objc_msgSend(v14, sel_configuration);
      unsigned __int8 v19 = objc_msgSend(v18, sel_limitableUserInterfaces);

      if ((v19 & 0x40) != 0)
      {
        id v20 = objc_msgSend(v13, sel_navigationController);
        if (v20)
        {
          id v21 = v20;
          id v22 = objc_msgSend(v13, sel_view);
          if (!v22)
          {
            __break(1u);
            return;
          }
          id v23 = v22;
          id v24 = specialized CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(v22, v21, (uint64_t)&unk_26FD250E0, (uint64_t)&unk_26FD25108, (uint64_t)partial apply for closure #1 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:), (uint64_t)partial apply for closure #2 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:));

          uint64_t v25 = OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_limitedUIView;
          id v26 = *(void **)&v13[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_limitedUIView];
          if (v26)
          {
            objc_msgSend(v26, sel_removeFromSuperview);
            id v31 = *(id *)&v13[v25];
          }
          else
          {
            id v31 = 0;
          }
          *(void *)&v13[v25] = v24;

          goto LABEL_21;
        }
      }
    }
    else
    {
    }
  }
  uint64_t v27 = OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_limitedUIView;
  id v28 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_limitedUIView];
  if (v28)
  {
    objc_msgSend(v28, sel_removeFromSuperview);
    id v29 = *(void **)&v0[v27];
  }
  else
  {
    id v29 = 0;
  }
  *(void *)&v0[v27] = 0;

  id v30 = objc_msgSend(v0, sel_navigationController);
  if (v30)
  {
    id v31 = v30;
    objc_msgSend(v30, sel_setNavigationBarHidden_animated_, 0, 1);
LABEL_21:
  }
}

void CAFUIDevicePickerDetailViewController.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  outlined destroy of weak CAFUIAutomakerSettingObserverDelegate?(v0 + OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_delegate);

  id v1 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_carSession);
}

id CAFUIDevicePickerDetailViewController.__deallocating_deinit()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = (void *)MEMORY[0x24C59F610](v2);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_removeObserver_, v3);

  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for CAFUIDevicePickerDetailViewController();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

Swift::Void __swiftcall CAFUIDevicePickerDetailViewController.viewDidLoad()()
{
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for CAFUIDevicePickerDetailViewController();
  objc_msgSendSuper2(&v10, sel_viewDidLoad);
  id v1 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView];
  type metadata accessor for CAFUIDevicePickerDetailTableCell();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v3 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  id v7 = (void *)MEMORY[0x24C59F610](v4, v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_registerClass_forCellReuseIdentifier_, ObjCClassFromMetadata, v7);

  objc_msgSend(v1, sel_setDataSource_, v0);
  objc_msgSend(v1, sel_setDelegate_, v0);
  id v8 = objc_msgSend(v0, sel_navigationItem);
  id v9 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_device], sel_name);
  objc_msgSend(v8, sel_setTitle_, v9);

  CAFUIDevicePickerDetailViewController.updateDevicePickerLimitedUI()();
}

uint64_t CAFUIDevicePickerDetailViewController.tableView(_:cellForRowAt:)(void *a1)
{
  type metadata accessor for CAFUIDevicePickerDetailTableCell();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v4 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = (void *)MEMORY[0x24C59F610](v5, v7);
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_super v10 = objc_msgSend(a1, sel_dequeueReusableCellWithIdentifier_forIndexPath_, v8, isa);

  uint64_t v11 = swift_dynamicCastClass();
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    objc_super v10 = *(void **)(v1 + OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_actions);
    if (IndexPath.row.getter() >= v10[2]) {
      return (uint64_t)v12;
    }
    unint64_t v13 = IndexPath.row.getter();
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v13 < v10[2])
    {
      CAFUIDevicePickerDetailViewController.setup(cell:forAction:)(v12, *((unsigned char *)v10 + v13 + 32));
      return (uint64_t)v12;
    }
    __break(1u);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void CAFUIDevicePickerDetailViewController.setup(cell:forAction:)(void *a1, char a2)
{
  id v5 = objc_msgSend(a1, sel_textLabel);
  if (v5)
  {
    uint64_t v6 = v5;
    if (a2 == 2)
    {
      unint64_t v7 = 0x8000000249537110;
      unint64_t v8 = 0xD000000000000019;
    }
    else
    {
      if (a2 != 3)
      {
        id v14 = 0;
        goto LABEL_8;
      }
      unint64_t v7 = 0xEF5241435F534948;
      unint64_t v8 = 0x545F544547524F46;
    }
    id v9 = (void *)MEMORY[0x24C59F610](v8, v7);
    swift_bridgeObjectRelease();
    id v10 = CAFUILocalizedStringForKey(v9);

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    id v14 = (void *)MEMORY[0x24C59F610](v11, v13);
    swift_bridgeObjectRelease();
LABEL_8:
    objc_msgSend(v6, sel_setText_, v14);
  }
  id v15 = *(void **)&v2[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_carSession];
  if (v15)
  {
    id v16 = v2;
    id v17 = v15;
    id v18 = objc_msgSend(v17, sel_limitUserInterfaces);
    if (v18)
    {
      unsigned __int8 v19 = v18;
      unsigned __int8 v20 = objc_msgSend(v18, sel_BOOLValue);

      if (v20)
      {
        id v21 = objc_msgSend(v17, sel_configuration);
        unsigned __int8 v22 = objc_msgSend(v21, sel_limitableUserInterfaces);

        BOOL v23 = (v22 & 0x40) == 0;
        goto LABEL_15;
      }
    }
  }
  BOOL v23 = 1;
LABEL_15:
  *((unsigned char *)a1 + OBJC_IVAR____TtC5CAFUI32CAFUIDevicePickerDetailTableCell_isEnabled) = v23;

  specialized CAFUIDevicePickerDetailViewController.updateTitleColor(cell:forAction:)(a1, a2);
}

void CAFUIDevicePickerDetailViewController.tableView(_:didUnhighlightRowAt:)(void *a1)
{
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v8 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  if (!v8) {
    return;
  }
  type metadata accessor for CAFUIDevicePickerDetailTableCell();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    id v5 = (void *)v4;
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_actions);
    if (IndexPath.row.getter() < *(void *)(v6 + 16))
    {
      unint64_t v7 = IndexPath.row.getter();
      if ((v7 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v7 < *(void *)(v6 + 16))
      {
        specialized CAFUIDevicePickerDetailViewController.updateTitleColor(cell:forAction:)(v5, *(unsigned char *)(v6 + v7 + 32));
        goto LABEL_7;
      }
      __break(1u);
      return;
    }
  }
LABEL_7:
}

void CAFUIDevicePickerDetailViewController.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2)
{
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v6 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  if (!v6)
  {
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x24952B724);
  }
  type metadata accessor for CAFUIDevicePickerDetailTableCell();
  uint64_t v7 = swift_dynamicCastClass();
  if (!v7
    || (uint64_t v8 = v7,
        uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_actions),
        IndexPath.row.getter() >= *(void *)(v9 + 16)))
  {

    goto LABEL_23;
  }
  uint64_t v10 = a2;
  unint64_t v11 = IndexPath.row.getter();
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v11 < *(void *)(v9 + 16))
  {
    uint64_t v44 = v8;
    id v45 = a1;
    uint64_t v10 = *(unsigned __int8 *)(v9 + v11 + 32);
    if (one-time initialization token for default == -1) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
  __break(1u);
LABEL_21:
  swift_once();
LABEL_7:
  uint64_t v12 = static OS_os_log.default;
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    aBlock[0] = v15;
    *(_DWORD *)id v14 = 136315138;
    unint64_t v16 = 0xE500000000000000;
    uint64_t v17 = v15;
    uint64_t v18 = 0x7964616552;
    switch(v10)
    {
      case 1:
        uint64_t v18 = 0x527463656E6E6F43;
        unint64_t v16 = 0xEE00747365757165;
        break;
      case 2:
        unint64_t v16 = 0x8000000249532CF0;
        uint64_t v18 = 0xD000000000000011;
        break;
      case 3:
        uint64_t v18 = 0xD000000000000012;
        unint64_t v16 = 0x8000000249532D10;
        break;
      default:
        break;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2494AC000, v12, v13, "Did select action: %s.", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A0780](v17, -1, -1);
    MEMORY[0x24C5A0780](v14, -1, -1);
  }
  switch(v10)
  {
    case 0:
    case 1:
    case 2:
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_17;
      }
      specialized CAFUIDevicePickerDetailViewController.prepareRequest(for:action:)(v10);
      break;
    case 3:
      swift_bridgeObjectRelease();
LABEL_17:
      unsigned __int8 v20 = (void *)MEMORY[0x24C59F610](0x544547524F46, 0xE600000000000000);
      id v21 = CAFUILocalizedStringForKey(v20);

      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      uint64_t v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = v44;
      *(unsigned char *)(v26 + 32) = v10;
      swift_retain();
      id v27 = v6;
      id v28 = (void *)MEMORY[0x24C59F610](v22, v24);
      swift_bridgeObjectRelease();
      aBlock[4] = (uint64_t)partial apply for closure #1 in CAFUIDevicePickerDetailViewController.tableView(_:didSelectRowAt:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
      aBlock[3] = (uint64_t)&block_descriptor_8;
      id v29 = _Block_copy(aBlock);
      swift_release();
      id v30 = self;
      id v31 = objc_msgSend(v30, sel_actionWithTitle_style_handler_, v28, 2, v29);
      _Block_release(v29);
      swift_release();

      objc_super v32 = (void *)MEMORY[0x24C59F610](0x4C45434E4143, 0xE600000000000000);
      id v33 = CAFUILocalizedStringForKey(v32);

      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;

      id v37 = (void *)MEMORY[0x24C59F610](v34, v36);
      swift_bridgeObjectRelease();
      id v38 = objc_msgSend(v30, sel_actionWithTitle_style_handler_, v37, 1, 0);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_249530110;
      *(void *)(inited + 32) = v31;
      *(void *)(inited + 40) = v38;
      aBlock[0] = inited;
      specialized Array._endMutation()();
      unint64_t v40 = aBlock[0];
      id v41 = v31;
      id v42 = v38;
      CAFUIDevicePickerDetailViewController.displayAlert(actions:)(v40);
      swift_bridgeObjectRelease();

      break;
    default:
      JUMPOUT(0);
  }
  Class v43 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v45, sel_deselectRowAtIndexPath_animated_, v43, 1);
}

void closure #1 in CAFUIDevicePickerDetailViewController.tableView(_:didSelectRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x24C5A0810](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    specialized CAFUIDevicePickerDetailViewController.prepareRequest(for:action:)(a4);
  }
}

void CAFUIDevicePickerDetailViewController.displayAlert(actions:)(unint64_t a1)
{
  id v7 = objc_msgSend(self, sel_alertControllerWithTitle_message_preferredStyle_, 0, 0, 0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v3) {
      goto LABEL_10;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v5 = (id)MEMORY[0x24C59FC50](i, a1);
    }
    else {
      id v5 = *(id *)(a1 + 8 * i + 32);
    }
    uint64_t v6 = v5;
    objc_msgSend(v7, sel_addAction_, v5);
  }
LABEL_10:
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_presentViewController_animated_completion_, v7, 1, 0);
}

uint64_t @objc CAFUIDevicePickerDetailViewController.tableView(_:didUnhighlightRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, char *))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  a5(v12, v11);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void CAFUIDevicePickerDetailViewController.__allocating_init(style:)()
{
}

uint64_t CAFUIDevicePickerDetailTableCell.isCellEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC5CAFUI32CAFUIDevicePickerDetailTableCell_isEnabled);
}

void CAFUIDevicePickerDetailTableCell.__allocating_init(reuseIdentifier:)()
{
}

id CAFUIDevicePickerDetailTableCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIDevicePickerDetailTableCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *specialized CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(void *a1, void *a2)
{
  return specialized CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(a1, a2, (uint64_t)&unk_26FD25158, (uint64_t)&unk_26FD25180, (uint64_t)closure #1 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)partial apply, (uint64_t)closure #2 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)partial apply);
}

char *specialized CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  id v12 = objc_allocWithZone((Class)type metadata accessor for CAFUIDevicePickerLimitedUIView());
  id v13 = a2;
  id v14 = CAFUIDevicePickerLimitedUIView.init(presentedAction:dismissAction:)(a5, v10, a6, v11);
  objc_msgSend(a1, sel_addSubview_, v14);
  uint64_t v15 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2495300E0;
  id v17 = objc_msgSend(v14, sel_leadingAnchor);
  id v18 = objc_msgSend(a1, sel_leadingAnchor);
  id v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  *(void *)(v16 + 32) = v19;
  id v20 = objc_msgSend(v14, sel_trailingAnchor);
  id v21 = objc_msgSend(a1, sel_trailingAnchor);
  id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(void *)(v16 + 40) = v22;
  id v23 = objc_msgSend(v14, sel_topAnchor);
  id v24 = objc_msgSend(a1, sel_topAnchor);
  id v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  *(void *)(v16 + 48) = v25;
  id v26 = objc_msgSend(v14, sel_bottomAnchor);
  id v27 = objc_msgSend(a1, sel_bottomAnchor);
  id v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

  *(void *)(v16 + 56) = v28;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_activateConstraints_, isa);

  return v14;
}

unint64_t specialized CAFDeviceAction.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CAFDeviceAction.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type CAFDeviceAction and conformance CAFDeviceAction()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFDeviceAction and conformance CAFDeviceAction;
  if (!lazy protocol witness table cache variable for type CAFDeviceAction and conformance CAFDeviceAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFDeviceAction and conformance CAFDeviceAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [CAFDeviceAction] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFDeviceAction] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFDeviceAction] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFDeviceAction]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFDeviceAction] and conformance [A]);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CAFDeviceAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24952C0B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFDeviceAction()
{
  return &type metadata for CAFDeviceAction;
}

uint64_t type metadata accessor for CAFUIDevicePickerDetailViewController()
{
  return self;
}

uint64_t type metadata accessor for CAFUIDevicePickerDetailTableCell()
{
  return self;
}

void specialized CAFUIDevicePickerDetailViewController.updateTitleColor(cell:forAction:)(void *a1, char a2)
{
  id v3 = objc_msgSend(a1, sel_textLabel);
  if (v3)
  {
    unsigned int v4 = v3;
    uint64_t v5 = self;
    unsigned int v6 = &selRef_systemRedColor;
    if (a2 != 3) {
      unsigned int v6 = &selRef__carSystemFocusColor;
    }
    id v7 = [v5 *v6];
    objc_msgSend(v4, sel_setTextColor_, v7);
  }
}

void specialized CAFUIDevicePickerDetailViewController.prepareRequest(for:action:)(uint64_t a1)
{
  id v3 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_device];
  id v4 = objc_msgSend(v3, sel_identifier);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;

    uint64_t v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
    }
    if (v9)
    {
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView], sel_setUserInteractionEnabled_, 0);
      uint64_t v10 = &v1[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_delegate];
      if (MEMORY[0x24C5A0810](&v1[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_delegate]))
      {
        uint64_t v11 = *((void *)v10 + 1);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v11 + 8))(a1, v6, v8, ObjectType, v11);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      return;
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  id v13 = static OS_os_log.default;
  id v22 = v1;
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    id v17 = objc_msgSend(v3, sel_identifier);
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;
    }
    else
    {
      unint64_t v21 = 0xE300000000000000;
      uint64_t v19 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2494AC000, v13, v14, "Unable to perform request, missing deviceIdentifier: %s.", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A0780](v16, -1, -1);
    MEMORY[0x24C5A0780](v15, -1, -1);
  }
  else
  {
  }
}

uint64_t sub_24952C4FC()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_24952C534()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 33, 7);
}

void partial apply for closure #1 in CAFUIDevicePickerDetailViewController.tableView(_:didSelectRowAt:)(uint64_t a1)
{
  closure #1 in CAFUIDevicePickerDetailViewController.tableView(_:didSelectRowAt:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t sub_24952C598()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #1 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)()
{
  return closure #1 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(*(void **)(v0 + 16));
}

id partial apply for closure #2 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)()
{
  return closure #2 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(*(void **)(v0 + 16));
}

void partial apply for closure #1 in CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:)(uint64_t a1)
{
  closure #1 in CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:)(a1, v1);
}

Swift::String __swiftcall CAFUILocalizedValues(for:selectedValues:)(Swift::OpaquePointer a1, Swift::OpaquePointer selectedValues)
{
  unint64_t v2 = *((void *)a1._rawValue + 2);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = *((void *)selectedValues._rawValue + 2);
  if (!v3) {
    goto LABEL_6;
  }
  if (v3 != 1)
  {
    uint64_t v11 = (void *)MEMORY[0x24C59F610](0xD000000000000015, 0x8000000249534220);
    id v12 = CAFUILocalizedStringForKey(v11);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_2495305E0;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = MEMORY[0x263F8D310];
    *(void *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    uint64_t v6 = String.init(format:_:)();
    unint64_t v7 = v17;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  unint64_t v4 = *((void *)selectedValues._rawValue + 4);
  if (v4 < v2)
  {
    uint64_t v5 = (char *)a1._rawValue + 16 * v4;
    uint64_t v6 = *((void *)v5 + 4);
    unint64_t v7 = (void *)*((void *)v5 + 5);
    swift_bridgeObjectRetain();
  }
  else
  {
LABEL_6:
    unint64_t v8 = (void *)MEMORY[0x24C59F610](0x44455443454C4553, 0xED0000454E4F4E5FLL);
    id v9 = CAFUILocalizedStringForKey(v8);

    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v10;
  }
LABEL_8:
  uint64_t v18 = v6;
  uint64_t v19 = v7;
  result._object = v19;
  result._uint64_t countAndFlagsBits = v18;
  return result;
}

id CAFSeatHeatingCooling.isHeating.getter()
{
  if (!objc_msgSend(v0, sel_hasOn)) {
    return (id)((int)objc_msgSend(v0, sel_heatingCoolingLevel) > 0);
  }
  id result = objc_msgSend(v0, sel_on);
  if (result) {
    return (id)((int)objc_msgSend(v0, sel_heatingCoolingLevel) > 0);
  }
  return result;
}

id CAFSeatHeatingCooling.isCooling.getter()
{
  if (!objc_msgSend(v0, sel_hasOn)) {
    return (id)(objc_msgSend(v0, sel_heatingCoolingLevel) >> 31);
  }
  id result = objc_msgSend(v0, sel_on);
  if (result) {
    return (id)(objc_msgSend(v0, sel_heatingCoolingLevel) >> 31);
  }
  return result;
}

id CAFSeatFan.isVenting.getter()
{
  if (!objc_msgSend(v0, sel_hasOn)) {
    return (id)(objc_msgSend(v0, sel_fanLevel) != 0);
  }
  id result = objc_msgSend(v0, sel_on);
  if (result) {
    return (id)(objc_msgSend(v0, sel_fanLevel) != 0);
  }
  return result;
}

uint64_t ResourceBundleClass.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

void CAFUIStatusLogForCategory_cold_1()
{
}

uint64_t CAFObserved<>.observable.getter()
{
  return MEMORY[0x270F12980]();
}

uint64_t dispatch thunk of CAFEqualizerObservable.value.getter()
{
  return MEMORY[0x270F129D8]();
}

uint64_t dispatch thunk of CAFEqualizerObservable.value.setter()
{
  return MEMORY[0x270F129E0]();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$value.getter()
{
  return MEMORY[0x270F129E8]();
}

uint64_t CAFEqualizerObservable.observed.getter()
{
  return MEMORY[0x270F129F0]();
}

uint64_t type metadata accessor for CAFEqualizerObservable()
{
  return MEMORY[0x270F129F8]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.modify()
{
  return MEMORY[0x270F12A50]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.getter()
{
  return MEMORY[0x270F12A58]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.setter()
{
  return MEMORY[0x270F12A60]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.$fade.getter()
{
  return MEMORY[0x270F12A68]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.modify()
{
  return MEMORY[0x270F12A70]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.getter()
{
  return MEMORY[0x270F12A78]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.setter()
{
  return MEMORY[0x270F12A80]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.$balance.getter()
{
  return MEMORY[0x270F12A88]();
}

uint64_t CAFSoundDistributionObservable.observed.getter()
{
  return MEMORY[0x270F12A90]();
}

uint64_t type metadata accessor for CAFSoundDistributionObservable()
{
  return MEMORY[0x270F12A98]();
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return MEMORY[0x270EEE098]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x270EEE258]();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEE378]();
}

uint64_t type metadata accessor for Notification()
{
  return MEMORY[0x270EEE3D0]();
}

uint64_t URLQueryItem.name.getter()
{
  return MEMORY[0x270EEE3F0]();
}

uint64_t URLQueryItem.value.getter()
{
  return MEMORY[0x270EEE408]();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return MEMORY[0x270EEE410]();
}

uint64_t URLComponents.queryItems.getter()
{
  return MEMORY[0x270EEE4B0]();
}

uint64_t URLComponents.init(url:resolvingAgainstBaseURL:)()
{
  return MEMORY[0x270EEE518]();
}

uint64_t type metadata accessor for URLComponents()
{
  return MEMORY[0x270EEE610]();
}

uint64_t AttributeScopes.UIKitAttributes.font.getter()
{
  return MEMORY[0x270F816C0]();
}

uint64_t AttributeContainer.subscript.setter()
{
  return MEMORY[0x270EEF020]();
}

uint64_t type metadata accessor for AttributeContainer()
{
  return MEMORY[0x270EEF070]();
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return MEMORY[0x270F816D8]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = MEMORY[0x270EEFE68](percentEncoded);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t URL.scheme.getter()
{
  return MEMORY[0x270EEFEE0]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x270EEFF00]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x270EEFFC8]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x270EF0120]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0CB8]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

void __swiftcall IndexSet._bridgeToObjectiveC()(NSIndexSet *__return_ptr retstr)
{
}

uint64_t type metadata accessor for IndexSet()
{
  return MEMORY[0x270EF1550]();
}

NSIndexPath __swiftcall IndexPath._bridgeToObjectiveC()()
{
  return (NSIndexPath)MEMORY[0x270EF16E0]();
}

uint64_t static IndexPath._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1700]();
}

uint64_t IndexPath.row.getter()
{
  return MEMORY[0x270F816F8]();
}

uint64_t IndexPath.init(item:section:)()
{
  return MEMORY[0x270F81700]();
}

uint64_t IndexPath.item.getter()
{
  return MEMORY[0x270F81718]();
}

uint64_t IndexPath.section.getter()
{
  return MEMORY[0x270F81740]();
}

uint64_t type metadata accessor for IndexPath()
{
  return MEMORY[0x270EF1738]();
}

uint64_t type metadata accessor for CAUResource()
{
  return MEMORY[0x270F15140]();
}

uint64_t dispatch thunk of CAUAssetLibrary.path(for:)()
{
  return MEMORY[0x270F15158]();
}

uint64_t dispatch thunk of CAUAssetLibraryManager.assetLibrary.getter()
{
  return MEMORY[0x270F15188]();
}

uint64_t dispatch thunk of CAUAssetLibraryManager.$assetLibrary.getter()
{
  return MEMORY[0x270F15190]();
}

uint64_t CAUAssetLibraryManager.init()()
{
  return MEMORY[0x270F15198]();
}

uint64_t type metadata accessor for CAUAssetLibraryManager()
{
  return MEMORY[0x270F151A0]();
}

uint64_t type metadata accessor for CAUError()
{
  return MEMORY[0x270F151A8]();
}

uint64_t static CAULogger.error(_:function:file:line:)()
{
  return MEMORY[0x270F151B0]();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return MEMORY[0x270FA2C78]();
}

uint64_t static UICellAccessory.customView(configuration:)()
{
  return MEMORY[0x270F81940]();
}

uint64_t type metadata accessor for UICellAccessory.DisplayedState()
{
  return MEMORY[0x270F81960]();
}

uint64_t type metadata accessor for UICellAccessory.LayoutDimension()
{
  return MEMORY[0x270F81978]();
}

uint64_t UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)()
{
  return MEMORY[0x270F81998]();
}

uint64_t type metadata accessor for UICellAccessory.CustomViewConfiguration()
{
  return MEMORY[0x270F819A0]();
}

uint64_t type metadata accessor for UICellAccessory.Placement()
{
  return MEMORY[0x270F819C8]();
}

uint64_t type metadata accessor for UICellAccessory()
{
  return MEMORY[0x270F819D0]();
}

uint64_t UICellConfigurationState.isSelected.getter()
{
  return MEMORY[0x270F81C48]();
}

uint64_t UICellConfigurationState.isHighlighted.getter()
{
  return MEMORY[0x270F81C58]();
}

uint64_t static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270F81C68]();
}

uint64_t type metadata accessor for UICellConfigurationState()
{
  return MEMORY[0x270F81C80]();
}

uint64_t UIBackgroundConfiguration.customView.setter()
{
  return MEMORY[0x270F81C98]();
}

uint64_t UIBackgroundConfiguration.backgroundColor.setter()
{
  return MEMORY[0x270F81CD0]();
}

uint64_t static UIBackgroundConfiguration.clear()()
{
  return MEMORY[0x270F81CF8]();
}

uint64_t UIBackgroundConfiguration.updated(for:)()
{
  return MEMORY[0x270F81D00]();
}

uint64_t type metadata accessor for UIBackgroundConfiguration()
{
  return MEMORY[0x270F81D10]();
}

uint64_t type metadata accessor for UITraitUserInterfaceStyle()
{
  return MEMORY[0x270F81D20]();
}

uint64_t static UIListContentConfiguration.subtitleCell()()
{
  return MEMORY[0x270F81D48]();
}

uint64_t UIListContentConfiguration.secondaryText.getter()
{
  return MEMORY[0x270F81D60]();
}

uint64_t UIListContentConfiguration.secondaryText.setter()
{
  return MEMORY[0x270F81D68]();
}

uint64_t UIListContentConfiguration.TextProperties.font.setter()
{
  return MEMORY[0x270F81DB8]();
}

uint64_t UIListContentConfiguration.TextProperties.color.getter()
{
  return MEMORY[0x270F81DC0]();
}

uint64_t UIListContentConfiguration.TextProperties.color.setter()
{
  return MEMORY[0x270F81DC8]();
}

uint64_t type metadata accessor for UIListContentConfiguration.TextProperties()
{
  return MEMORY[0x270F81DD8]();
}

uint64_t UIListContentConfiguration.attributedText.getter()
{
  return MEMORY[0x270F81DE0]();
}

uint64_t UIListContentConfiguration.attributedText.setter()
{
  return MEMORY[0x270F81DE8]();
}

uint64_t UIListContentConfiguration.textProperties.modify()
{
  return MEMORY[0x270F81DF0]();
}

uint64_t UIListContentConfiguration.textProperties.getter()
{
  return MEMORY[0x270F81DF8]();
}

uint64_t static UIListContentConfiguration.ImageProperties.standardDimension.getter()
{
  return MEMORY[0x270F81E18]();
}

uint64_t UIListContentConfiguration.ImageProperties.reservedLayoutSize.setter()
{
  return MEMORY[0x270F81E20]();
}

uint64_t UIListContentConfiguration.ImageProperties.tintColor.setter()
{
  return MEMORY[0x270F81E28]();
}

uint64_t UIListContentConfiguration.imageProperties.modify()
{
  return MEMORY[0x270F81E30]();
}

uint64_t UIListContentConfiguration.imageToTextPadding.setter()
{
  return MEMORY[0x270F81E38]();
}

uint64_t UIListContentConfiguration.secondaryAttributedText.getter()
{
  return MEMORY[0x270F81E40]();
}

uint64_t UIListContentConfiguration.secondaryTextProperties.modify()
{
  return MEMORY[0x270F81E50]();
}

uint64_t UIListContentConfiguration.secondaryTextProperties.getter()
{
  return MEMORY[0x270F81E58]();
}

uint64_t UIListContentConfiguration.text.getter()
{
  return MEMORY[0x270F81EA8]();
}

uint64_t UIListContentConfiguration.text.setter()
{
  return MEMORY[0x270F81EB0]();
}

uint64_t UIListContentConfiguration.image.getter()
{
  return MEMORY[0x270F81EB8]();
}

uint64_t UIListContentConfiguration.image.setter()
{
  return MEMORY[0x270F81EC0]();
}

uint64_t UIListContentConfiguration.updated(for:)()
{
  return MEMORY[0x270F81ED0]();
}

uint64_t static UIListContentConfiguration.valueCell()()
{
  return MEMORY[0x270F81ED8]();
}

uint64_t type metadata accessor for UIListContentConfiguration()
{
  return MEMORY[0x270F81EE0]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.Appearance()
{
  return MEMORY[0x270F82348]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.FooterMode()
{
  return MEMORY[0x270F82350]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode()
{
  return MEMORY[0x270F82358]();
}

uint64_t UICollectionLayoutListConfiguration.init(appearance:)()
{
  return MEMORY[0x270F82360]();
}

uint64_t UICollectionLayoutListConfiguration.footerMode.setter()
{
  return MEMORY[0x270F82368]();
}

uint64_t UICollectionLayoutListConfiguration.headerMode.setter()
{
  return MEMORY[0x270F82370]();
}

uint64_t UICollectionLayoutListConfiguration.backgroundColor.setter()
{
  return MEMORY[0x270F82378]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration()
{
  return MEMORY[0x270F82398]();
}

uint64_t type metadata accessor for UIConfigurationTextAttributesTransformer()
{
  return MEMORY[0x270F823E0]();
}

uint64_t UIConfigurationTextAttributesTransformer.init(_:)()
{
  return MEMORY[0x270F823F8]();
}

uint64_t Publishers.MergeMany.init<A>(_:)()
{
  return MEMORY[0x270EE3AC0]();
}

uint64_t AnyCancellable.store(in:)()
{
  return MEMORY[0x270EE3B98]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x270EE3BB0]();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return MEMORY[0x270EE3C20]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x270EE3DA8]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x270EE3DD8]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x270EE3DE0]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x270EE3DF0]();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return MEMORY[0x270EE3F78]();
}

uint64_t Publisher<>.removeDuplicates()()
{
  return MEMORY[0x270EE3FD8]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x270EE4008]();
}

uint64_t Animatable<>.animatableData.modify()
{
  return MEMORY[0x270EFEBA0]();
}

uint64_t EdgeInsets.init(_all:)()
{
  return MEMORY[0x270EFECF8]();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return MEMORY[0x270EFEF10]();
}

uint64_t type metadata accessor for ColorScheme()
{
  return MEMORY[0x270EFEF30]();
}

uint64_t DragGesture.init<A>(minimumDistance:coordinateSpace:)()
{
  return MEMORY[0x270EFEF58]();
}

uint64_t DragGesture.Value.location.getter()
{
  return MEMORY[0x270EFEFA0]();
}

uint64_t type metadata accessor for DragGesture()
{
  return MEMORY[0x270EFEFB8]();
}

uint64_t type metadata accessor for Environment.Content()
{
  return MEMORY[0x270EFEFD0]();
}

uint64_t static GestureMask.all.getter()
{
  return MEMORY[0x270EFF008]();
}

uint64_t StateObject.wrappedValue.getter()
{
  return MEMORY[0x270EFF108]();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return MEMORY[0x270EFF128]();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return MEMORY[0x270EFF538]();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return MEMORY[0x270EFF598]();
}

uint64_t GeometryProxy.frame<A>(in:)()
{
  return MEMORY[0x270EFF6E8]();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return MEMORY[0x270EFFB80]();
}

uint64_t ObservedObject.projectedValue.getter()
{
  return MEMORY[0x270EFFB88]();
}

uint64_t ObservedObject.Wrapper.subscript.getter()
{
  return MEMORY[0x270EFFBA0]();
}

uint64_t type metadata accessor for LayoutDirection()
{
  return MEMORY[0x270F00058]();
}

uint64_t static SafeAreaRegions.all.getter()
{
  return MEMORY[0x270F00220]();
}

uint64_t PlainButtonStyle.init()()
{
  return MEMORY[0x270F004D0]();
}

uint64_t type metadata accessor for PlainButtonStyle()
{
  return MEMORY[0x270F004E8]();
}

uint64_t type metadata accessor for _BlendModeEffect()
{
  return MEMORY[0x270F00670]();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return MEMORY[0x270F008D0]();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return MEMORY[0x270F00A20]();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return MEMORY[0x270F00A30]();
}

uint64_t EnvironmentValues.layoutDirection.getter()
{
  return MEMORY[0x270F00A50]();
}

uint64_t EnvironmentValues.font.getter()
{
  return MEMORY[0x270F00D80]();
}

uint64_t EnvironmentValues.font.setter()
{
  return MEMORY[0x270F00D90]();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return MEMORY[0x270F00E88]();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return MEMORY[0x270F00E98]();
}

uint64_t EnvironmentValues.init()()
{
  return MEMORY[0x270F00ED8]();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return MEMORY[0x270F00EE0]();
}

uint64_t static VerticalAlignment.center.getter()
{
  return MEMORY[0x270F01070]();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return MEMORY[0x270F01270]();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return MEMORY[0x270F01510]();
}

uint64_t UIHostingController.init(rootView:)()
{
  return MEMORY[0x270F016A0]();
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return MEMORY[0x270F01708]();
}

uint64_t UIViewRepresentable.body.getter()
{
  return MEMORY[0x270F01778]();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return MEMORY[0x270F01800]();
}

uint64_t static ButtonRepeatBehavior.enabled.getter()
{
  return MEMORY[0x270F01860]();
}

uint64_t type metadata accessor for ButtonRepeatBehavior()
{
  return MEMORY[0x270F01870]();
}

uint64_t type metadata accessor for LocalCoordinateSpace()
{
  return MEMORY[0x270F018D8]();
}

uint64_t static HierarchicalShapeStyle.tertiary.getter()
{
  return MEMORY[0x270F01D30]();
}

uint64_t static CoordinateSpaceProtocol<>.local.getter()
{
  return MEMORY[0x270F01F70]();
}

uint64_t UIViewRepresentableContext.coordinator.getter()
{
  return MEMORY[0x270F02418]();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return MEMORY[0x270F029E0]();
}

uint64_t static Edge.Set.all.getter()
{
  return MEMORY[0x270F02A30]();
}

uint64_t static Edge.Set.bottom.getter()
{
  return MEMORY[0x270F02A48]();
}

uint64_t Font.init(_:)()
{
  return MEMORY[0x270F02D50]();
}

uint64_t Path.addPath(_:transform:)()
{
  return MEMORY[0x270F02E20]();
}

uint64_t Path.init(_:)()
{
  return MEMORY[0x270F02F00]();
}

uint64_t Text.foregroundColor(_:)()
{
  return MEMORY[0x270F03008]();
}

uint64_t Text.font(_:)()
{
  return MEMORY[0x270F030A8]();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return MEMORY[0x270F03228]();
}

uint64_t Text.init<A>(_:)()
{
  return MEMORY[0x270F03250]();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return MEMORY[0x270F03438]();
}

uint64_t static View._viewListCount(inputs:)()
{
  return MEMORY[0x270F036C0]();
}

uint64_t View.simultaneousGesture<A>(_:including:)()
{
  return MEMORY[0x270F03B78]();
}

uint64_t View.buttonRepeatBehavior(_:)()
{
  return MEMORY[0x270F03BF0]();
}

uint64_t View.accessibilityIdentifier(_:)()
{
  return MEMORY[0x270F03D30]();
}

uint64_t type metadata accessor for Color.RGBColorSpace()
{
  return MEMORY[0x270F043A8]();
}

uint64_t static Color.clear.getter()
{
  return MEMORY[0x270F04478]();
}

uint64_t static Color.white.getter()
{
  return MEMORY[0x270F04498]();
}

uint64_t static Color.primary.getter()
{
  return MEMORY[0x270F044F0]();
}

uint64_t Color.init(_:red:green:blue:opacity:)()
{
  return MEMORY[0x270F04570]();
}

uint64_t Color.init(_:)()
{
  return MEMORY[0x270F045A8]();
}

uint64_t Image.init(uiImage:)()
{
  return MEMORY[0x270F04630]();
}

uint64_t Image.init(systemName:)()
{
  return MEMORY[0x270F04650]();
}

uint64_t type metadata accessor for Image.ResizingMode()
{
  return MEMORY[0x270F04690]();
}

uint64_t Image.resizable(capInsets:resizingMode:)()
{
  return MEMORY[0x270F04718]();
}

uint64_t Image.init(_:bundle:)()
{
  return MEMORY[0x270F04738]();
}

uint64_t Button.init(action:label:)()
{
  return MEMORY[0x270F048B0]();
}

uint64_t AnyView.init<A>(_:)()
{
  return MEMORY[0x270F04B20]();
}

uint64_t Binding.wrappedValue.getter()
{
  return MEMORY[0x270F04B30]();
}

uint64_t Binding.wrappedValue.setter()
{
  return MEMORY[0x270F04B48]();
}

uint64_t Binding.projectedValue.getter()
{
  return MEMORY[0x270F04B68]();
}

uint64_t Binding.init(get:set:)()
{
  return MEMORY[0x270F04B80]();
}

uint64_t ForEach<>.init(_:content:)()
{
  return MEMORY[0x270F04CA8]();
}

uint64_t Gesture.onEnded(_:)()
{
  return MEMORY[0x270F04CE8]();
}

uint64_t Gesture<>.onChanged(_:)()
{
  return MEMORY[0x270F04CF0]();
}

uint64_t static Alignment.center.getter()
{
  return MEMORY[0x270F05078]();
}

uint64_t type metadata accessor for BlendMode()
{
  return MEMORY[0x270F05198]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x270FA0AC0]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x270FA0B00]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x270FA0BC8]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)()
{
  return MEMORY[0x270F9CFF8]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1840]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return MEMORY[0x270F9D328]();
}

Swift::String __swiftcall Character.lowercased()()
{
  uint64_t v0 = MEMORY[0x270F9D360]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Character._isLowercased.getter()
{
  return MEMORY[0x270F9D388]();
}

uint64_t Character._isUppercased.getter()
{
  return MEMORY[0x270F9D390]();
}

uint64_t Character._isSingleScalar.getter()
{
  return MEMORY[0x270F9D3A8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x270F9D478]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x270EF1A50]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x270F9D5F8]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0 = MEMORY[0x270F9D610]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x270F9D740]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x270F9D748]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x270F9D800]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x270F9D860]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x270F9D8B0]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9DBA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1BD8]();
}

uint64_t Double._roundSlowPath(_:)()
{
  return MEMORY[0x270F9DD68]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x270F9DDA0]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1CC0]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t UITableViewHeaderFooterView.contentConfiguration.setter()
{
  return MEMORY[0x270F82418]();
}

uint64_t UITableViewHeaderFooterView.defaultContentConfiguration()()
{
  return MEMORY[0x270F82420]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

UIBarButtonItem __swiftcall UIBarButtonItem.init(title:image:primaryAction:menu:)(Swift::String_optional title, UIImage_optional image, UIAction_optional primaryAction, UIMenu_optional menu)
{
  return (UIBarButtonItem)MEMORY[0x270F82480](title.value._countAndFlagsBits, title.value._object, image.value.super.isa, *(void *)&image.is_nil, primaryAction.value.super.super.isa, *(void *)&primaryAction.is_nil, menu.value.super.super.isa, *(void *)&menu.is_nil);
}

uint64_t UITableViewCell.contentConfiguration.getter()
{
  return MEMORY[0x270F82498]();
}

uint64_t UITableViewCell.contentConfiguration.setter()
{
  return MEMORY[0x270F824A0]();
}

uint64_t UITableViewCell.backgroundConfiguration.getter()
{
  return MEMORY[0x270F824A8]();
}

uint64_t UITableViewCell.backgroundConfiguration.setter()
{
  return MEMORY[0x270F824B0]();
}

uint64_t UITableViewCell.defaultContentConfiguration()()
{
  return MEMORY[0x270F824B8]();
}

uint64_t UITableViewCell.defaultBackgroundConfiguration()()
{
  return MEMORY[0x270F824C0]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x270FA0C78]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x270FA0D70]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t UICollectionViewCell.backgroundConfiguration.getter()
{
  return MEMORY[0x270F82668]();
}

uint64_t UICollectionViewCell.backgroundConfiguration.setter()
{
  return MEMORY[0x270F82670]();
}

uint64_t UICollectionViewCell.defaultBackgroundConfiguration()()
{
  return MEMORY[0x270F82680]();
}

uint64_t UICollectionViewListCell.accessories.setter()
{
  return MEMORY[0x270F826D0]();
}

uint64_t static NSCollectionLayoutSection.list(using:layoutEnvironment:)()
{
  return MEMORY[0x270F82708]();
}

uint64_t UIView.registerForTraitChanges<A>(_:handler:)()
{
  return MEMORY[0x270F828E0]();
}

uint64_t CAFRange.maximumValue<A>()()
{
  return MEMORY[0x270F12AF0]();
}

uint64_t CAFRange.minimumValue<A>()()
{
  return MEMORY[0x270F12AF8]();
}

uint64_t CAFRange.stepValue<A>()()
{
  return MEMORY[0x270F12B00]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270FA1170](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)()
{
  return MEMORY[0x270F82960]();
}

uint64_t UIButton.Configuration.imagePadding.setter()
{
  return MEMORY[0x270F829D8]();
}

uint64_t UIButton.Configuration.imagePlacement.setter()
{
  return MEMORY[0x270F82A10]();
}

uint64_t UIButton.Configuration.titleTextAttributesTransformer.setter()
{
  return MEMORY[0x270F82AB0]();
}

uint64_t UIButton.Configuration.image.setter()
{
  return MEMORY[0x270F82AF0]();
}

uint64_t static UIButton.Configuration.plain()()
{
  return MEMORY[0x270F82B00]();
}

uint64_t UIButton.Configuration.title.setter()
{
  return MEMORY[0x270F82B18]();
}

uint64_t type metadata accessor for UIButton.Configuration()
{
  return MEMORY[0x270F82B58]();
}

uint64_t UIButton.init(configuration:primaryAction:)()
{
  return MEMORY[0x270F82B60]();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return MEMORY[0x270EF2310]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x270FA2ED0]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x270FA2F00]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x270EF2478]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(exactly:)()
{
  return MEMORY[0x270F9E638]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x270F9E800]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x270F9E810]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x270F9E818]();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return MEMORY[0x270F9E830]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x270F9E838]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x270F9E840]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x270F9E848]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x270F9E858]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x270F9E860]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x270F9E870]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x270F9E878]();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return MEMORY[0x270F9E880]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270F9E8C0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x270F9E968]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9E970]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x270F9E9A0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x270F9EB30]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x270F9F000]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9F4C0]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x270F9F4C8](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x270F9F750]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x270F9F918]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t Int32.init(_:)()
{
  return MEMORY[0x270EF26D0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t Unicode.Scalar.Properties.isLowercase.getter()
{
  return MEMORY[0x270F9FE68]();
}

uint64_t Unicode.Scalar.Properties.isCased.getter()
{
  return MEMORY[0x270F9FF18]();
}

uint64_t type metadata accessor for Unicode.Scalar.Properties()
{
  return MEMORY[0x270F9FF30]();
}

uint64_t Unicode.Scalar.properties.getter()
{
  return MEMORY[0x270F9FF38]();
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x270EE5998](retstr, angle);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  MEMORY[0x270EE5BC0](color);
  return result;
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
}

void CGContextSetShadow(CGContextRef c, CGSize offset, CGFloat blur)
{
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x270EE71C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x270EE71D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x270EE71D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x270EE71F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x270EE71F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x270EE7210]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

uint64_t GSSystemRootDirectory()
{
  return MEMORY[0x270F306A0]();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x270EF2BD8](directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return (NSString *)MEMORY[0x270F82BD0]((__n128)size, *(__n128 *)&size.height);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromUIEdgeInsets(UIEdgeInsets insets)
{
  return (NSString *)MEMORY[0x270F82BD8](*(__n128 *)&insets.top, *(__n128 *)&insets.left, *(__n128 *)&insets.bottom, *(__n128 *)&insets.right);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x270ED99D8](a1, a2);
  return result;
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x270F9A648](object, key);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x270FA0218]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x270FA0250]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x270FA0290]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x270FA05D0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}