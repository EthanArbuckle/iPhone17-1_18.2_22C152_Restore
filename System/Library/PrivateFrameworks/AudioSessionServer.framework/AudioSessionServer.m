void *std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(a1, *a2);
    std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<BOOL const&,BOOL,0>(uint64_t a1, unsigned __int8 *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = *a2;
  *(unsigned char *)a1 = 4;
  *(void *)(a1 + 8) = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[5]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void as::server::DeviceLatencyPoll::dispatch(void *a1, int a2)
{
  uint64_t v3 = 500000000;
  if (a2 == 2) {
    uint64_t v3 = 100000000;
  }
  if (a2 == 3) {
    int64_t v4 = 0;
  }
  else {
    int64_t v4 = v3;
  }
  dispatch_time_t v5 = dispatch_time(0, v4);
  v6 = dispatch_get_global_queue(33, 0);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3321888768;
  v8[2] = ___ZN2as6server17DeviceLatencyPoll8dispatchENSt3__18weak_ptrINS1_4ImplEEENS1_9ELoopModeE_block_invoke;
  v8[3] = &__block_descriptor_48_ea8_32c59_ZTSNSt3__18weak_ptrIN2as6server17DeviceLatencyPoll4ImplEEE_e5_v8__0l;
  v7 = (std::__shared_weak_count *)a1[1];
  v8[4] = *a1;
  v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_after(v5, v6, v8);

  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void as::server::forbid_acq::GetPropertyMX(as::server::forbid_acq *this@<X0>, audit_token_t *a2@<X2>, NSString *a3@<X3>, audit_token_t *a4@<X1>, uint64_t a5@<X8>)
{
  char v5 = (char)a3;
  unsigned int v7 = this;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  v9 = a2;
  as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v55, v7, a4, 1);
  v10 = v55;
  if (!v55)
  {
    v17 = *(id *)as::server::gSessionServerLog(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "AudioSessionServerImpCommon.mm";
      __int16 v71 = 1024;
      *(_DWORD *)v72 = 213;
      *(_WORD *)&v72[4] = 1024;
      *(_DWORD *)&v72[6] = v7;
      _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
    }
    int v18 = 561210739;
    goto LABEL_70;
  }
  if (v5)
  {
    v11 = v56;
    if (v56) {
      atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HasMXPropertyPipeEntitlement = (as::server *)as::server::ConstAudioSessionInfo::HasMXPropertyPipeEntitlement(v10, a4);
    int v13 = (int)HasMXPropertyPipeEntitlement;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v13)
    {
      v10 = v55;
      if (!v55)
      {
        uint64_t v42 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v42);
      }
      goto LABEL_9;
    }
    v41 = *(id *)as::server::gSessionServerLog(HasMXPropertyPipeEntitlement);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&buf[4] = "AudioSessionServerImpCommon.mm";
      __int16 v71 = 1024;
      *(_DWORD *)v72 = 221;
      *(_WORD *)&v72[4] = 2112;
      *(void *)&v72[6] = v9;
      __int16 v73 = 1024;
      LODWORD(v74) = v7;
      _os_log_impl(&dword_1CFE2A000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get MXProperty: %@ on generic pipe for session: 0x%x due to missing entitlement.", buf, 0x22u);
    }
    int v18 = 1701737535;
LABEL_70:
    *(_DWORD *)a5 = v18;
    *(void *)(a5 + 8) = 0;
    goto LABEL_71;
  }
LABEL_9:
  v14 = v56;
  if (v56) {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v10, buf);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  v15 = v55;
  if (!v55)
  {
    uint64_t v43 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v43);
  }
  v16 = v56;
  if (v56) {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v15 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v54, *((const std::string::value_type **)v15 + 25), *((void *)v15 + 26));
  }
  else {
    std::string v54 = *(std::string *)((char *)v15 + 200);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  v19 = v55;
  if (!v55)
  {
    uint64_t v44 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v44);
  }
  v20 = v56;
  if (v56) {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = *((void *)v19 + 28);
  v21 = (std::__shared_weak_count *)*((void *)v19 + 29);
  uint64_t v52 = v22;
  v53 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  strcpy(v79, "get_property");
  as::server::MXAccessor<as::server::ForbidACQ>::GetProperty(v9, (uint64_t)&v50);
  if (v50)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)__p, "key");
    v65 = __p;
    char v66 = 1;
    v45 = (char *)[(audit_token_t *)v9 UTF8String];
    uint64_t v68 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v67, &v45);
    char v69 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
    *(void *)&v72[2] = buf;
    v72[10] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v57, "error");
    v58 = v57;
    char v59 = 1;
    v60[0] = 5;
    v61 = (uint64_t *)v50;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v60);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v60);
    v62 = v60;
    char v63 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v74 + 2, (uint64_t)v57, 2, 1, 2);
    v77 = (char *)&v74 + 2;
    char v78 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v48, (uint64_t)buf, 2, 1, 2);
    for (uint64_t i = 0; i != -8; i -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v74 + i * 8 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&(&v76)[i], *((unsigned __int8 *)&v74 + i * 8 + 2));
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v60[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v61)[j], v60[j * 8]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v67[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v67[k + 8], v67[k]);
    }
    v27 = *(id *)as::server::gSessionServerLog(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      int v28 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
      std::string::size_type v29 = v54.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v48, -1, 0x20u, 0, 0, __p);
      v30 = &v54;
      if (v28 < 0) {
        v30 = (std::string *)v29;
      }
      if (SHIBYTE(v65) >= 0) {
        v31 = __p;
      }
      else {
        v31 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&buf[4] = "AudioSessionServerImpCommon.mm";
      __int16 v71 = 1024;
      *(_DWORD *)v72 = 237;
      *(_WORD *)&v72[4] = 2080;
      *(void *)&v72[6] = v79;
      __int16 v73 = 2080;
      v74 = v30;
      __int16 v75 = 2080;
      v76 = v31;
      _os_log_impl(&dword_1CFE2A000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (SHIBYTE(v65) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)__p, "key");
    v65 = __p;
    char v66 = 1;
    v47 = (char *)[(audit_token_t *)v9 UTF8String];
    uint64_t v68 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v67, &v47);
    char v69 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
    *(void *)&v72[2] = buf;
    v72[10] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v57, "value");
    v58 = v57;
    char v59 = 1;
    OS::CF::ToJSON((uint64_t *)&v45, (__CFString *)v51);
    v60[0] = (_BYTE)v45;
    v61 = v46;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v45);
    LOBYTE(v45) = 0;
    v46 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v60);
    v62 = v60;
    char v63 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v74 + 2, (uint64_t)v57, 2, 1, 2);
    v77 = (char *)&v74 + 2;
    char v78 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v48, (uint64_t)buf, 2, 1, 2);
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v74 + m * 8 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&(&v76)[m], *((unsigned __int8 *)&v74 + m * 8 + 2));
    }
    for (uint64_t n = 0; n != -8; n -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v60[n * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v61)[n], v60[n * 8]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v45);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45);
    for (iuint64_t i = 0; ii != -64; ii -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v67[ii]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v67[ii + 8], v67[ii]);
    }
    v27 = *(id *)as::server::gSessionServerLog(v35);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      int v36 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
      std::string::size_type v37 = v54.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v48, -1, 0x20u, 0, 0, __p);
      v38 = &v54;
      if (v36 < 0) {
        v38 = (std::string *)v37;
      }
      if (SHIBYTE(v65) >= 0) {
        v39 = __p;
      }
      else {
        v39 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&buf[4] = "AudioSessionServerImpCommon.mm";
      __int16 v71 = 1024;
      *(_DWORD *)v72 = 234;
      *(_WORD *)&v72[4] = 2080;
      *(void *)&v72[6] = v79;
      __int16 v73 = 2080;
      v74 = v38;
      __int16 v75 = 2080;
      v76 = v39;
      _os_log_impl(&dword_1CFE2A000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (SHIBYTE(v65) < 0) {
        operator delete(__p[0]);
      }
    }
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v48);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v49, v48[0]);
  *(_DWORD *)a5 = v50;
  v40 = v51;
  *(void *)(a5 + 8) = v40;

  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
LABEL_71:
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
}

void sub_1CFE2C4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a13);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }

  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (!a3)
  {
LABEL_7:
    int v13 = 1;
    if (a4) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  uint64_t v10 = 32 * a3;
  v11 = (unsigned char **)(a2 + 16);
  while (1)
  {
    v12 = *v11;
    if (**v11 != 2
      || *(void *)(*((void *)v12 + 1) + 8) - **((void **)v12 + 1) != 32
      || *(unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((uint64_t)v12, 0) != 3)
    {
      break;
    }
    v11 += 4;
    v10 -= 32;
    if (!v10) {
      goto LABEL_7;
    }
  }
  int v13 = 0;
  if ((a4 & 1) == 0)
  {
LABEL_10:
    if (a5 == 2) {
      int v14 = 0;
    }
    else {
      int v14 = v13;
    }
    if (a5 != 1) {
      LOBYTE(v13) = 1;
    }
    if ((v13 & 1) == 0)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v20, "cannot create object from initializer list");
      nlohmann::detail::type_error::create(301, (uint64_t)v20, exception);
    }
    int v13 = v14;
  }
LABEL_17:
  uint64_t v15 = a2 + 32 * a3;
  if (v13)
  {
    *(unsigned char *)a1 = 1;
    v16 = operator new(0x18uLL);
    v16[2] = 0;
    v16[1] = 0;
    void *v16 = v16 + 1;
    *(void *)(a1 + 8) = v16;
    std::for_each[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>,BOOL,nlohmann::detail::value_t)::{lambda(nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#2}>(a2, v15, a1);
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v19 = v15;
    v20[0] = a2;
    *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v20, &v19);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1CFE2C8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(uint64_t *a1, uint64_t *a2)
{
  int64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = (*a2 - *a1) >> 5;
  v4[1] = 0;
  v4[2] = 0;
  *int64_t v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v4, v5, v6, v7);
  return v4;
}

void sub_1CFE2C978(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1CFE2C9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v4, v6);
      v6 += 32;
      uint64_t v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1CFE2CAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1, uint64_t a2)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(a2, (uint64_t)v4);
  *(unsigned char *)a1 = v4[0];
  *(void *)(a1 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  v4[0] = 0;
  uint64_t v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
  return a1;
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)a2 = *(unsigned char *)v3;
    *(void *)(a2 + 8) = *(void *)(v3 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v3);
    *(unsigned char *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  }
  else
  {
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, v3);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v6, v5);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a numeric argument with ", &v6, &v7);
    nlohmann::detail::type_error::create(305, (uint64_t)&v7, exception);
  }
  return **(void **)(a1 + 8) + 16 * a2;
}

void sub_1CFE2CD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void OS::CF::ToJSON(OS::CF *this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  if (this)
  {
    CFRetain(this);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v29, this);
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&v23, v29);
    while (1)
    {
      applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&v19, v29);
      uint64_t v5 = (void *)v19.__r_.__value_.__r.__words[2];
      v19.__r_.__value_.__l.__size_ = (int64_t)((int64_t)v20 - v19.__r_.__value_.__r.__words[2]) >> 3;
      BOOL v6 = !v23
        || v24 == (v26 - v25) >> 3
        || v23 == v19.__r_.__value_.__r.__words[0]
        && v24 == (int64_t)((int64_t)v20 - v19.__r_.__value_.__r.__words[2]) >> 3;
      if (__p)
      {
        uint64_t v22 = __p;
        operator delete(__p);
        uint64_t v5 = (void *)v19.__r_.__value_.__r.__words[2];
      }
      if (v5)
      {
        v20 = v5;
        operator delete(v5);
      }
      if (v6) {
        break;
      }
      applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(&v23, &v17);
      CFTypeRef v8 = v17;
      std::string::basic_string[abi:ne180100]<0>(&v14, "bad_key");
      applesauce::CF::convert_or<std::string>((CFTypeID)v8, (uint64_t)&v14, &v19);
      if (v16 < 0) {
        operator delete((void *)v14);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v17) {
        CFRelease(v17);
      }
      applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(&v23, &v14);
      OS::CF::ToJSON(&v12, (__CFString *)v15);
      char v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)a2, (void **)&v19.__r_.__value_.__l.__data_);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v12);
      char v10 = *(unsigned char *)v9;
      *(unsigned char *)char v9 = v12;
      LOBYTE(v12) = v10;
      uint64_t v11 = (uint64_t *)v9[1];
      v9[1] = (uint64_t)v13;
      int v13 = v11;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12);
      if (v15) {
        CFRelease(v15);
      }
      if (v14) {
        CFRelease(v14);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      ++v24;
    }
    if (v27)
    {
      int v28 = v27;
      operator delete(v27);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (v29) {
      CFRelease(v29);
    }
  }
}

{
  CFArrayRef Count;
  CFArrayRef v6;
  CFArrayRef v7;
  CFIndex v8;
  const void *v11;
  CFTypeRef cf;
  uint64_t v13;
  uint64_t *v14;
  CFArrayRef v15;
  CFArrayRef v16;
  CFArrayRef v17;
  CFArrayRef v18;
  uint64_t vars8;

  if (this)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, 0, 0, 0, 2);
    CFRetain(this);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v18, this);
    Count = v18;
    CFTypeRef v15 = v18;
    char v16 = 0;
    if (v18) {
      Count = (CFArrayRef)CFArrayGetCount(v18);
    }
    BOOL v6 = 0;
    CFTypeRef v17 = Count;
    while (1)
    {
      std::string v7 = v18;
      if (v18)
      {
        CFTypeRef v8 = CFArrayGetCount(v18);
        BOOL v6 = v16;
      }
      else
      {
        CFTypeRef v8 = 0;
      }
      if (!v15 || v6 == v17) {
        break;
      }
      if (v15 == v7 && v6 == (CFArrayRef)v8) {
        break;
      }
      applesauce::CF::ArrayRef_iterator<applesauce::CF::TypeRef>::operator->((uint64_t)&v15, &cf);
      OS::CF::ToJSON(&v13, (OS::CF *)cf, v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(a2, (uint64_t)&v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13);
      if (cf) {
        CFRelease(cf);
      }
      BOOL v6 = (const __CFArray *)((char *)v16 + 1);
      char v16 = (const __CFArray *)((char *)v16 + 1);
    }
    if (v18) {
      CFRelease(v18);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  }
}

void sub_1CFE2CF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v21);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 16;
    BOOL v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      unsigned int v7 = *v6;
      v6 -= 16;
      result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5 + 8, v7);
      BOOL v8 = v5 == a2;
      uint64_t v5 = (uint64_t)v6;
    }
    while (!v8);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, (*a1)[2]);
    uint64_t v4 = (uint64_t)(*a1 + 1);
    uint64_t v5 = (void *)**a1;
    if (v5 != (void *)v4)
    {
      unint64_t v6 = v25;
      do
      {
        if (v6 >= v26)
        {
          unint64_t v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v5 + 7));
        }
        else
        {
          *(unsigned char *)unint64_t v6 = *((unsigned char *)v5 + 56);
          *(void *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((unsigned char *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        unint64_t v25 = v6;
        unsigned int v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            BOOL v8 = v7;
            unsigned int v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            BOOL v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != (void *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v22, **a1, (*a1)[1], &v24);
  }
  for (unint64_t i = v25; v24 != v25; unint64_t i = v25)
  {
    char v12 = *(unsigned char *)(i - 16);
    uint64_t v11 = i - 16;
    LOBYTE(v22) = v12;
    uint64_t v23 = *(uint64_t **)(v11 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(unsigned char *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v24, v25 - 16);
    if (v22 == 1)
    {
      int v13 = v23;
      CFTypeRef v14 = v23 + 1;
      CFTypeRef v15 = (void *)*v23;
      if ((uint64_t *)*v23 != v23 + 1)
      {
        unint64_t v16 = v25;
        do
        {
          if (v16 >= v26)
          {
            unint64_t v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v15 + 7));
          }
          else
          {
            *(unsigned char *)unint64_t v16 = *((unsigned char *)v15 + 56);
            *(void *)(v16 + 8) = v15[8];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v15 + 7));
            *((unsigned char *)v15 + 56) = 0;
            v15[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          unint64_t v25 = v16;
          CFTypeRef v17 = (void *)v15[1];
          if (v17)
          {
            do
            {
              int v18 = v17;
              CFTypeRef v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              int v18 = (void *)v15[2];
              BOOL v9 = *v18 == (void)v15;
              CFTypeRef v15 = v18;
            }
            while (!v9);
          }
          CFTypeRef v15 = v18;
        }
        while (v18 != v14);
        int v13 = v23;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)v13, (char *)v13[1]);
      *int v13 = (uint64_t)(v13 + 1);
      v13[2] = 0;
      v13[1] = 0;
    }
    else if (v22 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v27, *v23, v23[1], &v24);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](v23);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_41;
    case 1:
      uint64_t v22 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
      goto LABEL_41;
    case 2:
      std::string v19 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0) {
        goto LABEL_42;
      }
      v20 = (void *)*v19;
      break;
    case 7:
      std::string v19 = *a1;
      int v21 = (void *)**a1;
      if (!v21) {
        goto LABEL_42;
      }
      v19[1] = (uint64_t)v21;
      v20 = v21;
      break;
    default:
      goto LABEL_43;
  }
  operator delete(v20);
LABEL_41:
  std::string v19 = *a1;
LABEL_42:
  operator delete(v19);
LABEL_43:
  uint64_t v22 = (void **)&v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  switch(*(unsigned char *)result)
  {
    case 1:
      if (*(void *)(result + 8)) {
        return result;
      }
      v1 = "m_type != value_t::object or m_value.object != nullptr";
      int v2 = 1220;
      break;
    case 2:
      if (*(void *)(result + 8)) {
        return result;
      }
      v1 = "m_type != value_t::array or m_value.array != nullptr";
      int v2 = 1221;
      break;
    case 3:
      if (*(void *)(result + 8)) {
        return result;
      }
      v1 = "m_type != value_t::string or m_value.string != nullptr";
      int v2 = 1222;
      break;
    case 8:
      if (*(void *)(result + 8)) {
        return result;
      }
      v1 = "m_type != value_t::binary or m_value.binary != nullptr";
      int v2 = 1223;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)(v4 - 16);
      unsigned int v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        unsigned int v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        BOOL v9 = v6 == (void)v2;
        uint64_t v6 = (uint64_t)v7;
      }
      while (!v9);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *((void *)a2 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a2 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 64, a2[56]);
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(void *a1@<X0>, void *a2@<X8>)
{
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::dereference(a1, &v3);
  std::pair<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::pair[abi:ne180100](a2, (uint64_t)&v3);
  if (cf) {
    CFRelease(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void *applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::dereference@<X0>(void *result@<X0>, void *a2@<X8>)
{
  unint64_t v3 = result[1];
  if ((v3 & 0x8000000000000000) != 0 || (size_t v4 = result, v5 = result[2], v3 >= (result[3] - v5) >> 3))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "DictionaryRef_iterator iterator out of range.");
  }
  uint64_t v6 = *(void *)(v5 + 8 * v3);
  if (v6)
  {
    result = CFRetain(*(CFTypeRef *)(v5 + 8 * v3));
    unint64_t v3 = v4[1];
  }
  uint64_t v7 = v4[5];
  uint64_t v8 = *(void *)(v7 + 8 * v3);
  if (v8) {
    result = CFRetain(*(CFTypeRef *)(v7 + 8 * v3));
  }
  *a2 = v6;
  a2[1] = v8;
  return result;
}

void sub_1CFE2D734(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::pair<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::pair[abi:ne180100](void *a1, uint64_t a2)
{
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  *a1 = v4;
  uint64_t v5 = *(const void **)(a2 + 8);
  if (v5) {
    CFRetain(v5);
  }
  a1[1] = v5;
  return a1;
}

void OS::CF::ToJSON(uint64_t *__return_ptr a1@<X8>, __CFString *this@<X0>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    CFTypeID v5 = CFGetTypeID(this);
    CFTypeID v8 = v5;
    if (v5 == CFBooleanGetTypeID())
    {
      OS::CF::ToJSON((OS::CF *)this, (uint64_t)a1);
    }
    else if (v5 == CFNumberGetTypeID())
    {
      OS::CF::ToJSON((OS::CF *)this, (uint64_t)a1);
    }
    else if (v5 == CFStringGetTypeID())
    {
      OS::CF::ToJSON(this, (uint64_t)a1);
    }
    else if (v5 == CFArrayGetTypeID())
    {
      OS::CF::ToJSON((OS::CF *)this, (uint64_t)a1);
    }
    else if (v5 == CFDictionaryGetTypeID())
    {
      OS::CF::ToJSON((OS::CF *)this, v6);
    }
    else
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[32],char [32],0>((uint64_t)v9, "Unsupported CoreFoundation type");
      char v10 = v9;
      char v11 = 1;
      nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_ref<unsigned long const&,0>((uint64_t)v12, (uint64_t *)&v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v13, (uint64_t)v9, 2, 1, 2);
      v14[1] = (uint64_t *)v13;
      char v15 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)a1, (uint64_t)v13, 1, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v14, v13[0]);
      for (uint64_t i = 0; i != -64; i -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v12[i]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v12[i + 8], v12[i]);
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    a1[1] = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
  }
}

void sub_1CFE2DAA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va1);
  for (uint64_t i = 32; i != -32; i -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(va + i));
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v3 = a1 + 40;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    std::vector<void const*>::resize(a1 + 16, Count);
    std::vector<void const*>::resize(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

void std::vector<void const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<void const*>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<void const*>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  CFTypeID v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    CFTypeRef v14 = &v13[8 * v10];
    char v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    int v18 = (char *)*a1;
    CFTypeRef v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      CFTypeRef v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void applesauce::CF::convert_or<std::string>(CFTypeID a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  applesauce::CF::convert_as<std::string,0>(a1, (uint64_t)__p);
  if (v7)
  {
    if (SHIBYTE(v6) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (v7)
      {
        if (SHIBYTE(v6) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      a3->__r_.__value_.__r.__words[2] = v6;
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
  }
}

CFTypeID applesauce::CF::convert_as<std::string,0>@<X0>(CFTypeID result@<X0>, uint64_t a2@<X8>)
{
  if (result
    && (CFStringRef v3 = (const __CFString *)result, TypeID = CFStringGetTypeID(), result = CFGetTypeID(v3), TypeID == result))
  {
    result = (CFTypeID)applesauce::CF::details::CFString_get_value<false>(v3, (uint64_t)&v5);
    *(_OWORD *)a2 = v5;
    *(void *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

void *applesauce::CF::details::CFString_get_value<false>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr) {
    return std::string::basic_string[abi:ne180100]<0>((void *)a2, CStringPtr);
  }
  CFIndex Length = CFStringGetLength(a1);
  maxBufLeuint64_t n = 0;
  v9.locatiouint64_t n = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((void *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0) {
    char v7 = (UInt8 *)a2;
  }
  else {
    char v7 = *(UInt8 **)a2;
  }
  v10.locatiouint64_t n = 0;
  v10.length = Length;
  return (void *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, void **a2)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    long long v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *long long v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    CFRange v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v10, v9);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a string argument with ", &v10, &v11);
    nlohmann::detail::type_error::create(305, (uint64_t)&v11, exception);
  }
  uint64_t v6 = (uint64_t **)*((void *)a1 + 1);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v11)+ 7;
}

void sub_1CFE2E000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  long long v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      CFStringRef v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), long long v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            std::string v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              CFStringRef v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            char *v9 = v2;
            v2[2] = (uint64_t)v9;
            CFStringRef v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *CFStringRef v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), long long v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *unint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            CFStringRef v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          CFStringRef v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *unint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *long long v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  long long v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        int v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        int v4 = (void *)*v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      long long v5 = v7 + 1;
      int v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    long long v5 = a2;
  }
  else {
    long long v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  size_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1CFE2E47C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  return this;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    unint64_t v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        unint64_t v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a4, v5);
      }
      else
      {
        *(unsigned char *)unint64_t v7 = *(unsigned char *)v5;
        *(void *)(v7 + 8) = *(void *)(v5 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
        *(unsigned char *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        v7 += 16;
      }
      a4[1] = v7;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t OS::CF::ToJSON@<X0>(OS::CF *this@<X0>, uint64_t a2@<X8>)
{
  if (this)
  {
    if (CFNumberIsFloatType(this))
    {
      double v5 = applesauce::CF::convert_to<double,0>(this);
      *(unsigned char *)a2 = 7;
      *(double *)(a2 + 8) = v5;
    }
    else
    {
      CFBooleanRef v6 = applesauce::CF::convert_to<long long,0>(this);
      *(unsigned char *)a2 = 5;
      *(void *)(a2 + 8) = v6;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
}

{
  BOOL v4;
  uint64_t vars8;

  if (this)
  {
    int v4 = CFBooleanGetValue(this) != 0;
    *(unsigned char *)a2 = 4;
    *(void *)(a2 + 8) = v4;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
}

const __CFBoolean *applesauce::CF::convert_to<long long,0>(const __CFNumber *a1)
{
  CFBooleanRef result = applesauce::CF::convert_as<long long,0>(a1);
  if (!v2)
  {
    exceptiouint64_t n = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return result;
}

void sub_1CFE2E708()
{
}

void sub_1CFE2E728(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFBoolean *applesauce::CF::convert_as<long long,0>(const __CFNumber *a1)
{
  if (a1)
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a1)) {
      return (const __CFBoolean *)applesauce::CF::details::number_convert_as<long long>(a1);
    }
  }
  return applesauce::CF::details::treat_as_BOOL_for_convert_as<long long>(a1);
}

unint64_t applesauce::CF::details::number_convert_as<long long>(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v6 = a1;
      CFNumberType v7 = kCFNumberSInt16Type;
      goto LABEL_18;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v8 = a1;
      CFNumberType v9 = kCFNumberSInt32Type;
      goto LABEL_20;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberSInt64Type;
      goto LABEL_31;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v12 = a1;
      CFNumberType v13 = kCFNumberFloat32Type;
      goto LABEL_27;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberFloat64Type;
      goto LABEL_33;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      if (Value) {
        char v17 = LOBYTE(valuePtr);
      }
      else {
        char v17 = 0;
      }
      if (Value != 0 && SLOBYTE(valuePtr) < 0) {
        unint64_t v4 = -256;
      }
      else {
        unint64_t v4 = 0;
      }
      LOBYTE(v5) = v17;
      return v5 | v4;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v6 = a1;
      CFNumberType v7 = kCFNumberShortType;
LABEL_18:
      BOOL v18 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      unsigned __int8 v19 = LOBYTE(valuePtr);
      uint64_t v20 = SLOWORD(valuePtr);
      goto LABEL_21;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v8 = a1;
      CFNumberType v9 = kCFNumberIntType;
LABEL_20:
      BOOL v18 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      unsigned __int8 v19 = LOBYTE(valuePtr);
      uint64_t v20 = SLODWORD(valuePtr);
LABEL_21:
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFF00 | v19;
      if (v18) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = v21;
      }
      goto LABEL_37;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberLongType;
      goto LABEL_31;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberLongLongType;
      goto LABEL_31;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v12 = a1;
      CFNumberType v13 = kCFNumberFloatType;
LABEL_27:
      BOOL v22 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      uint64_t v5 = (uint64_t)*(float *)&valuePtr;
      goto LABEL_34;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberDoubleType;
      goto LABEL_33;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberCFIndexType;
      goto LABEL_31;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberNSIntegerType;
LABEL_31:
      BOOL v22 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      uint64_t v5 = *(void *)&valuePtr;
      goto LABEL_34;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberCGFloatType;
LABEL_33:
      BOOL v22 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      uint64_t v5 = (uint64_t)valuePtr;
LABEL_34:
      if (v22) {
        uint64_t v5 = 0;
      }
LABEL_37:
      unint64_t v4 = v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      unint64_t v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return v5 | v4;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  CFNumberRef v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[16 * v12];
  *(unsigned char *)uint64_t v11 = *(unsigned char *)a2;
  *(void *)(v11 + 8) = *(void *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1CFE2EAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1CFE2EB68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 16;
    do
    {
      *(unsigned char *)(v7 - 16) = *(unsigned char *)v9;
      uint64_t v10 = v7 - 16;
      *(void *)(v10 + 8) = *(void *)(v9 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
      *(unsigned char *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      uint64_t v7 = *((void *)&v17 + 1) - 16;
      *((void *)&v17 + 1) -= 16;
      BOOL v11 = v9 == a5;
      v9 -= 16;
    }
    while (!v11);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v2 - 16);
      uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v2 - 8, *(unsigned __int8 *)(v2 - 16));
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void OS::CF::ToJSON(const __CFString *this@<X0>, uint64_t a2@<X8>)
{
  if (this)
  {
    applesauce::CF::convert_to<std::string,0>(this, (uint64_t)__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>(a2, (uint64_t)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  }
}

void sub_1CFE2EE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v4 = operator new(0x18uLL);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  v4[2] = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    return std::string::basic_string[abi:ne180100]<0>((void *)a2, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a1);
    maxBufLeuint64_t n = 0;
    v10.locatiouint64_t n = 0;
    v10.length = Length;
    CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    std::string::basic_string[abi:ne180100]((void *)a2, maxBufLen, 0);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (UInt8 *)a2;
    }
    else {
      uint64_t v7 = *(UInt8 **)a2;
    }
    v11.locatiouint64_t n = 0;
    v11.length = Length;
    return (void *)CFStringGetBytes(a1, v11, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
  }
}

void sub_1CFE2EFBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *applesauce::CF::convert_to<std::string,0>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exceptiouint64_t n = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return applesauce::CF::details::CFString_get_value<true>(a1, a2);
}

void sub_1CFE2F04C()
{
}

void sub_1CFE2F06C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v4 = v2 - 16;
    char v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      unsigned int v6 = *v5;
      v5 -= 16;
      uint64_t result = (void *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4 + 8, v6);
      BOOL v7 = v4 == v3;
      uint64_t v4 = (uint64_t)v5;
    }
    while (!v7);
  }
  v1[1] = v3;
  return result;
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D25E15C0](exception, "Could not construct");
    }
  }
  return this;
}

void sub_1CFE2F168(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>(uint64_t a1, char **a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(char **a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, *a1);
  return v2;
}

void sub_1CFE2F21C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::for_each[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>,BOOL,nlohmann::detail::value_t)::{lambda(nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#2}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(v5, (uint64_t)v7);
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a3 + 8), *(void ***)(*v8 + 8), *(void *)(*v8 + 8), *v8 + 16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      v5 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_1CFE2F2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v9, a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t **a1, void **a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  v8[2] = *(_OWORD *)a2;
  *((void *)v8 + 6) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  char v9 = *(unsigned char *)a3;
  *((void *)v8 + 8) = *(void *)(a3 + 8);
  *((unsigned char *)v8 + 56) = v9;
  uint64_t v10 = (uint64_t)v8 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1CFE2F55C(_Unwind_Exception *a1)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::ArrayRef_iterator<applesauce::CF::TypeRef>::operator->(uint64_t a1@<X0>, void *a2@<X8>)
{
  applesauce::CF::details::at_to<applesauce::CF::TypeRef>(*(const __CFArray **)a1, *(void *)(a1 + 8), &cf);
  applesauce::CF::ArrayRef_iterator<applesauce::CF::TypeRef>::iterator_proxy::iterator_proxy(a2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

CFTypeRef applesauce::CF::details::at_to<applesauce::CF::TypeRef>@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = CFArrayGetValueAtIndex(a1, a2), (uint64_t v7 = ValueAtIndex) == 0))
  {
    exceptiouint64_t n = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  CFTypeRef result = CFRetain(ValueAtIndex);
  *a3 = v7;
  return result;
}

void sub_1CFE2F674()
{
}

void sub_1CFE2F6A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *applesauce::CF::ArrayRef_iterator<applesauce::CF::TypeRef>::iterator_proxy::iterator_proxy(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      char v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:ne180100]<0>(&v10, v9);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use push_back() with ", &v10, &v11);
      nlohmann::detail::type_error::create(308, (uint64_t)&v11, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v4 = operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *uint64_t v4 = 0;
    *(void *)(a1 + 8) = v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t result = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v5, a2);
  }
  else
  {
    *(unsigned char *)unint64_t v6 = *(unsigned char *)a2;
    *(void *)(v6 + 8) = *(void *)(a2 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
    uint64_t result = v6 + 16;
  }
  v5[1] = result;
  return result;
}

void sub_1CFE2F81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::ArrayRef(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D25E15C0](exception, "Could not construct");
    }
  }
  return this;
}

void sub_1CFE2F904(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE2F9B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    unint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[4]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[4]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE2FAFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void as::server::MXAccessor<as::server::ForbidACQ>::GetProperty(void *a1@<X2>, uint64_t a2@<X8>)
{
  id v3 = a1;
  *(_DWORD *)a2 = MXSessionCopyProperty();
  *(void *)(a2 + 8) = 0;
}

void sub_1CFE2FBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[5]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE2FC1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double applesauce::CF::convert_to<double,0>(const __CFNumber *a1)
{
  CFBooleanRef v1 = applesauce::CF::convert_as<double,0>(a1);
  if (!v2)
  {
    exceptiouint64_t n = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return *(double *)&v1;
}

void sub_1CFE2FC70()
{
}

void sub_1CFE2FC90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_ref<unsigned long const&,0>(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = *a2;
  *(unsigned char *)a1 = 6;
  *(void *)(a1 + 8) = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  *(void *)(a1 + 16) = a1;
  *(unsigned char *)(a1 + 24) = 1;
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[32],char [32],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[32]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[32]>(char *a1)
{
  char v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE2FD90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = MEMORY[0x1D25E1DE0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v3 = *(void **)(a1 + 32);
}

uint64_t __copy_helper_block_ea8_32c177_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongPU25objcproto14NSSecureCoding11objc_objectjEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_jE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = MEMORY[0x1D25E1DE0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c59_ZTSNSt3__18weak_ptrIN2as6server17DeviceLatencyPoll4ImplEEE(uint64_t a1)
{
  CFBooleanRef v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __destroy_helper_block_ea8_32c177_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongPU25objcproto14NSSecureCoding11objc_objectjEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_jE_(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v3 = *(void **)(a1 + 32);
}

uint64_t __copy_helper_block_ea8_32c59_ZTSNSt3__18weak_ptrIN2as6server17DeviceLatencyPoll4ImplEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN12_GLOBAL__N_132HandleAppStateChangeNotificationEjP12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  v36[0] = 1;
  int v37 = 3976;
  uint64_t v38 = v2;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  kdebug_trace();
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v33, *(_DWORD *)(a1 + 40));
  if (v33)
  {
    uint64_t v3 = [*(id *)(a1 + 32) objectForKey:*MEMORY[0x1E4F75C90]];
    int v4 = [v3 intValue];
    uint64_t v5 = (as::server::LegacySessionManager *)[v3 intValue];
    unint64_t v6 = v33;
    if (!v33)
    {
      uint64_t v26 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v26);
    }
    size_t v7 = v34;
    if (v34)
    {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v9 = v5 == 2 || v4 == 1;
      *((unsigned char *)v6 + 315) = v9;
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    else
    {
      BOOL v11 = v5 == 2 || v4 == 1;
      *((unsigned char *)v33 + 315) = v11;
    }
    if (v4 == 1)
    {
      uint64_t v12 = as::server::LegacySessionManager::Instance(v5);
      uint64_t v13 = v33;
      if (!v33)
      {
        uint64_t v28 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v28);
      }
      CFNumberRef v14 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v31 = v13;
      v32 = v14;
      as::server::LegacySessionManager::RemoveApplicationUponAppTermination((uint64_t)v12, (uint64_t *)&v31);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
    }
    char v15 = v33;
    if (!v33)
    {
      uint64_t v27 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v27);
    }
    long long v16 = v34;
    if (v34)
    {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      id v17 = *((id *)v15 + 12);
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    else
    {
      id v17 = *((id *)v33 + 12);
    }
    if (!v33 || (os_unfair_lock_unlock((os_unfair_lock_t)v33 + 158), v35 = 0, (BOOL v18 = v33) == 0))
    {
      uint64_t v29 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v29);
    }
    uint64_t v19 = *(unsigned int *)(a1 + 40);
    uint64_t v20 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    objc_msgSend(v17, "handleInterruptionWithID:clientPID:interruptionState:interruptionInfo:", v19, *((unsigned int *)v18 + 22), objc_msgSend(v3, "intValue") + 256, *(void *)(a1 + 32));
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (!v33 || (os_unfair_lock_lock((os_unfair_lock_t)v33 + 158), v35 = 1, (int v21 = v33) == 0))
    {
      uint64_t v30 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v30);
    }
    BOOL v22 = v34;
    if (v34)
    {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      int v23 = *((_DWORD *)v21 + 23);
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (v23 == 1935830119)
      {
        int v21 = v33;
        if (!v33)
        {
          uint64_t v24 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v24);
        }
        goto LABEL_41;
      }
    }
    else if (*((_DWORD *)v33 + 23) == 1935830119)
    {
LABEL_41:
      unint64_t v25 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      as::server::AudioSessionInfo::DeferPropertyChangeCallback(v21, (NSString *)*MEMORY[0x1E4F75D38], *(NSDictionary **)(a1 + 32), 1);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
    }
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v33);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)v36);
}

void sub_1CFE301C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  size_t v7 = va_arg(va1, os_unfair_lock_s *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va1);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindOrCreatePrimarySession(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  BOOL v11 = a3;
  id v12 = a4;
  if (*((_DWORD *)a2 + 10) != 1886546285)
  {
    uint64_t v27 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v27);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 240));
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  CFNumberRef v14 = *(void **)(a1 + 8);
  uint64_t v13 = *(void **)(a1 + 16);
  long long v15 = a2[1];
  long long v28 = *a2;
  v29[0] = v15;
  *(_OWORD *)((char *)v29 + 12) = *(long long *)((char *)a2 + 28);
  id v30 = *((id *)a2 + 6);
  id v31 = *((id *)a2 + 7);
  int v32 = *((_DWORD *)a2 + 16);
  id v33 = *((id *)a2 + 9);
  id v16 = *((id *)a2 + 10);
  uint64_t v18 = *((void *)a2 + 11);
  id v17 = (std::__shared_weak_count *)*((void *)a2 + 12);
  id v34 = v16;
  uint64_t v35 = v18;
  int v36 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v14 != v13)
  {
    while (!as::server::ProcessIdentity::operator==(*v14 + 12, (uint64_t)&v28)
         || *(_DWORD *)(*v14 + 92) != 1886546285)
    {
      v14 += 2;
      if (v14 == v13)
      {
        CFNumberRef v14 = v13;
        break;
      }
    }
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }

  if (v14 == *(void **)(a1 + 16))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    if (a5 == 1)
    {
      as::server::LegacySessionManager::CreateSessionPriv(a1, (as::server::SessionCreationDescription *)a2, v11, v12, (long long *)a6);
    }
    else
    {
      *(void *)a6 = 0;
      *(void *)(a6 + 8) = 0;
    }
  }
  else
  {
    uint64_t v21 = *v14;
    uint64_t v20 = (std::__shared_weak_count *)v14[1];
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v22 = *(id *)as::server::gSessionServerLog(v19);
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
    if (v23)
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v38 = "ServerSessionManager.mm";
      __int16 v39 = 1024;
      int v40 = 543;
      _os_log_impl(&dword_1CFE2A000, v22, OS_LOG_TYPE_INFO, "%25s:%-5d Found an existing primary session for the client process.", buf, 0x12u);
    }
    if (a5 == 1 && !*(void *)(v21 + 256))
    {
      uint64_t v24 = *(id *)as::server::gSessionServerLog((as::server *)v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        unint64_t v25 = (void *)(v21 + 176);
        if (*(char *)(v21 + 199) < 0) {
          unint64_t v25 = (void *)*v25;
        }
        *(_DWORD *)buf = 136315650;
        uint64_t v38 = "ServerSessionManager.mm";
        __int16 v39 = 1024;
        int v40 = 545;
        __int16 v41 = 2080;
        uint64_t v42 = v25;
        _os_log_impl(&dword_1CFE2A000, v24, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the XPC connection for %s", buf, 0x1Cu);
      }
      as::server::AudioSessionInfo::SetXPCConnection((as::server::AudioSessionInfo *)v21, v11);
    }
    *(void *)a6 = *v14;
    uint64_t v26 = v14[1];
    *(void *)(a6 + 8) = v26;
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 240));
}

void sub_1CFE30580(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);

  _Unwind_Resume(a1);
}

BOOL VerifySessionOwnership(as::server::LegacySessionManager *a1, const audit_token_t *a2, char a3)
{
  int v5 = (int)a1;
  unint64_t v6 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(a1);
  as::server::LegacySessionManager::FindSessionAndVerifyOwnership(v6, a2, v5, a3, &v9);
  uint64_t v7 = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v7 != 0;
}

as::server::ConstAudioSessionInfoAccessor *as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor(as::server::ConstAudioSessionInfoAccessor *this, int a2, const audit_token_t *a3, char a4)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  size_t v8 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(this);
  as::server::LegacySessionManager::FindSessionAndVerifyOwnership(v8, a3, a2, a4, &v12);
  long long v9 = v12;
  long long v12 = 0uLL;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 1);
  *(_OWORD *)this = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (*((void *)&v12 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  return this;
}

void sub_1CFE306C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void as::server::LegacySessionManager::FindSessionAndVerifyOwnership(os_unfair_lock_s *this@<X0>, const audit_token_t *a2@<X2>, int a3@<W1>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v10 = this + 2;
  os_unfair_lock_lock(this);
  v18[0] = this;
  v18[1] = v10;
  long long v11 = *(_OWORD *)&a2->val[4];
  v15[0] = *(_OWORD *)a2->val;
  v15[1] = v11;
  char v16 = 1;
  *(_OWORD *)atoken.val = v15[0];
  *(_OWORD *)&atoken.val[4] = v11;
  uint64_t v12 = audit_token_to_pid(&atoken);
  int v17 = v12;
  SessionAndVerifyOwnershipPriv = (void *)as::server::LegacySessionManager::FindSessionAndVerifyOwnershipPriv(v12, (uint64_t)v18, a3, v15, a4);
  if (*(void **)&this[4]._os_unfair_lock_opaque == SessionAndVerifyOwnershipPriv)
  {
    *a5 = 0;
    a5[1] = 0;
  }
  else
  {
    uint64_t v14 = SessionAndVerifyOwnershipPriv[1];
    *a5 = *SessionAndVerifyOwnershipPriv;
    a5[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
  }
  os_unfair_lock_unlock(this);
}

void sub_1CFE307A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t as::server::LegacySessionManager::FindSessionAndVerifyOwnershipPriv(uint64_t a1, uint64_t a2, int a3, long long *a4, char a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v5 = *(uint64_t **)(a2 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  long long v8 = *a4;
  long long v9 = a4[1];
  v19[0] = *a4;
  v19[1] = v9;
  uint64_t v20 = *((void *)a4 + 4);
  char v21 = a5;
  if (v6 != v7)
  {
    *(void *)&long long v8 = 136315650;
    long long v17 = v8;
    do
    {
      if (*(_DWORD *)(*(void *)v6 + 8) == a3)
      {
        BOOL v10 = as::server::ProcessIdentity::operator==((uint64_t)v19, *(void *)v6 + 12);
        if (v10) {
          return v6;
        }
        if (v21)
        {
          as::server::ProcessIdentity::SecurityTask((as::server::ProcessIdentity *)v19, &task);
          if (task)
          {
            long long v11 = (void *)SecTaskCopyValueForEntitlement(task, @"com.apple.private.coreaudio.borrowaudiosession.allow", 0);
            uint64_t v12 = (as::server *)[v11 BOOLValue];
            if ((v12 & 1) == 0)
            {
              uint64_t v13 = *(id *)as::server::gSessionServerLog(v12);
              if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = v17;
                uint64_t v24 = "ServerSessionManager.mm";
                __int16 v25 = 1024;
                int v26 = 382;
                __int16 v27 = 1024;
                int v28 = a3;
                _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Lookup of sessionID:0x%x succeeded, but calling client does not have entitlement to use it", buf, 0x18u);
              }
            }
            char v14 = objc_msgSend(v11, "BOOLValue", v17);

            if (task) {
              CFRelease(task);
            }
            if (v14) {
              return v6;
            }
          }
        }
        else
        {
          long long v15 = *(id *)as::server::gSessionServerLog((as::server *)v10);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315906;
            uint64_t v24 = "ServerSessionManager.mm";
            __int16 v25 = 1024;
            int v26 = 389;
            __int16 v27 = 1024;
            int v28 = a3;
            __int16 v29 = 1024;
            int v30 = HIDWORD(v20);
            _os_log_impl(&dword_1CFE2A000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Lookup of sessionID:0x%x succeeded, but the provided process PID or audit token does not match the owner of the session. Provided PID: %d", buf, 0x1Eu);
          }
        }
      }
      v6 += 16;
    }
    while (v6 != v7);
    return v7;
  }
  return v6;
}

void sub_1CFE309EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

BOOL as::server::ProcessIdentity::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = *(unsigned char *)(a2 + 32) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 1;
  }
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)atoken.val = *(_OWORD *)a1;
  *(_OWORD *)&atoken.val[4] = v4;
  int v5 = audit_token_to_pidversion(&atoken);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8.val = *(_OWORD *)a2;
  *(_OWORD *)&v8.val[4] = v6;
  return v5 == audit_token_to_pidversion(&v8);
}

void ___ZZN2as6server20HandleMXNotificationEP26opaqueCMNotificationCenterPKvPK10__CFStringS4_S4_ENK3__0clEb_block_invoke(uint64_t a1)
{
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v4, *(_DWORD *)(a1 + 48));
  uint64_t v2 = v4;
  if (v4)
  {
    BOOL v3 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::AudioSessionInfo::DeferPropertyChangeCallback(v2, *(NSString **)(a1 + 32), *(NSDictionary **)(a1 + 40), *(unsigned __int8 *)(a1 + 52));
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v4);
}

void sub_1CFE30B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(os_unfair_lock_s **this)
{
  if (*((unsigned char *)this + 16) && *this)
  {
    os_unfair_lock_unlock(*this + 158);
    *((unsigned char *)this + 16) = 0;
  }
  uint64_t v2 = (std::__shared_weak_count *)this[1];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1CFE30E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a13);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void sub_1CFE311E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a13);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

as::server::AudioSessionInfoAccessor *as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor(as::server::AudioSessionInfoAccessor *this, int a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  long long v4 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(this);
  as::server::LegacySessionManager::FindSession(v4, a2, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  long long v6 = (std::__shared_weak_count *)*((void *)this + 1);
  *(_OWORD *)this = v5;
  if (!v6)
  {
    uint64_t v7 = (os_unfair_lock_s *)v5;
    if (!(void)v5) {
      return this;
    }
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  uint64_t v7 = *(os_unfair_lock_s **)this;
  if (*(void *)this)
  {
LABEL_5:
    os_unfair_lock_lock(v7 + 158);
    *((unsigned char *)this + 16) = 1;
  }
  return this;
}

void sub_1CFE31380(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

as::server::ConstAudioSessionInfoAccessor *as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor(as::server::ConstAudioSessionInfoAccessor *this, int a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  long long v4 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(this);
  as::server::LegacySessionManager::FindSession(v4, a2, &v8);
  long long v5 = v8;
  long long v8 = 0uLL;
  long long v6 = (std::__shared_weak_count *)*((void *)this + 1);
  *(_OWORD *)this = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v8 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  return this;
}

void sub_1CFE31404(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void *as::server::LegacySessionManager::Instance(as::server::LegacySessionManager *this)
{
  {
    as::server::LegacySessionManager::LegacySessionManager((as::server::LegacySessionManager *)&as::server::LegacySessionManager::Instance(void)::sManager);
  }
  return &as::server::LegacySessionManager::Instance(void)::sManager;
}

void sub_1CFE31480(_Unwind_Exception *a1)
{
}

void as::server::LegacySessionManager::FindSession(os_unfair_lock_s *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  os_unfair_lock_lock(this);
  long long v6 = *(void **)&this[2]._os_unfair_lock_opaque;
  uint64_t v7 = *(void **)&this[4]._os_unfair_lock_opaque;
  if (v6 != v7)
  {
    while (*(_DWORD *)(*v6 + 8) != a2)
    {
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_12;
      }
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    if (!this) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v9 = *v6;
  uint64_t v8 = v6[1];
  *a3 = v9;
  a3[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  if (this)
  {
LABEL_9:
    os_unfair_lock_unlock(this);
  }
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void as::server::AudioSessionInfo::DeferPropertyChangeCallback(as::server::AudioSessionInfo *this, NSString *a2, NSDictionary *a3, int a4)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  if (*((void *)this + 32))
  {
    std::mutex::lock((std::mutex *)((char *)this + 568));
    uint64_t v9 = (char *)this + 544;
    uint64_t v10 = *((void *)this + 70);
    if (a4)
    {
      uint64_t v11 = *((void *)this + 69);
      uint64_t v12 = v7;
      while (1)
      {
        if ((char *)v11 == v9)
        {

          goto LABEL_10;
        }
        uint64_t v13 = [*(id *)(v11 + 16) objectForKey:v12];

        if (v13) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
      }

      if ((char *)v11 != v9) {
        std::list<NSDictionary * {__strong}>::erase((uint64_t)this + 544, (uint64_t *)v11);
      }
    }
LABEL_10:
    if (v8) {
      char v14 = v8;
    }
    else {
      char v14 = (NSDictionary *)objc_alloc_init(MEMORY[0x1E4F1C9E8]);
    }
    long long v15 = v14;
    uint64_t v18 = v7;
    v19[0] = v14;
    id v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
    std::list<NSDictionary * {__strong}>::push_back((uint64_t *)this + 68, &v17);

    std::mutex::unlock((std::mutex *)((char *)this + 568));
    if (!v10)
    {
      char v16 = [*((id *)this + 32) remoteObjectProxy];
      [v16 pingClient:*((unsigned int *)this + 2)];
    }
  }
}

void sub_1CFE31704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  std::mutex::unlock(v11);

  _Unwind_Resume(a1);
}

id std::list<NSDictionary * {__strong}>::push_back(uint64_t *a1, id *a2)
{
  long long v4 = operator new(0x18uLL);
  id result = *a2;
  v4[1] = a1;
  v4[2] = result;
  uint64_t v6 = *a1;
  *long long v4 = *a1;
  *(void *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

unsigned int *as::server::AudioSessionInfo::AudioSessionInfo(unsigned int *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  as::server::ConstAudioSessionInfo::ConstAudioSessionInfo((uint64_t)a1, a2, v8);
  *(void *)a1 = &unk_1F2688530;
  *((void *)a1 + 31) = 0;
  id v9 = v7;
  *((void *)a1 + 32) = v9;
  *((void *)a1 + 33) = 0;
  *((unsigned char *)a1 + 272) = 0;
  *(_OWORD *)(a1 + 69) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)(a1 + 77) = 0;
  strcpy((char *)a1 + 316, "llcp");
  strcpy((char *)a1 + 324, "iprs");
  a1[107] = 0;
  *((unsigned char *)a1 + 432) = 0;
  *((unsigned char *)a1 + 440) = 0;
  *((unsigned char *)a1 + 448) = 0;
  *((void *)a1 + 57) = 0;
  *((void *)a1 + 58) = 0;
  *((void *)a1 + 61) = 0;
  *((void *)a1 + 62) = 0;
  *(_OWORD *)(a1 + 95) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((void *)a1 + 51) = 0;
  *((void *)a1 + 52) = 0;
  *((void *)a1 + 50) = 0;
  *((unsigned char *)a1 + 424) = 0;
  *((void *)a1 + 59) = 0;
  *((void *)a1 + 60) = a1 + 122;
  a1[126] = 0;
  *((void *)a1 + 66) = 0;
  *(void *)((char *)a1 + 533) = 0;
  *((void *)a1 + 64) = 0;
  *((void *)a1 + 65) = 0;
  *((void *)a1 + 68) = a1 + 136;
  *((void *)a1 + 69) = a1 + 136;
  *((_OWORD *)a1 + 35) = xmmword_1CFE894A0;
  *((_OWORD *)a1 + 36) = 0u;
  *((_OWORD *)a1 + 37) = 0u;
  *((_OWORD *)a1 + 38) = 0u;
  *(_OWORD *)(a1 + 155) = 0u;
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(a1, &cf);
  if (cf)
  {
    CFRelease(cf);
    MXNotificationNames = (id **)as::GetMXNotificationNames(v10);
    uint64_t v12 = *MXNotificationNames;
    uint64_t v13 = MXNotificationNames[1];
    while (v12 != v13)
    {
      char v14 = (NSString *)*v12;
      as::server::AudioSessionInfo::AddMXNotificationListener((as::server::AudioSessionInfo *)a1, v14, 0);

      ++v12;
    }
    uint64_t SpecialMXNotificationNames = as::GetSpecialMXNotificationNames((as *)MXNotificationNames);
    char v16 = *(id **)SpecialMXNotificationNames;
    id v17 = *(id **)(SpecialMXNotificationNames + 8);
    while (v16 != v17)
    {
      uint64_t v18 = (NSString *)*v16;
      as::server::AudioSessionInfo::AddMXNotificationListener((as::server::AudioSessionInfo *)a1, v18, 0);

      ++v16;
    }
    while (v20 != v19)
    {
      CFStringRef v21 = *v20;
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterAddObserver(LocalCenter, (const void *)a1[2], (CFNotificationCallback)as::server::HandleCFNotification, v21, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      ++v20;
    }
  }

  return a1;
}

void sub_1CFE31A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, uint64_t a12)
{
  std::mutex::~mutex(v16);
  std::__list_imp<NSDictionary * {__strong}>::clear(v15);
  a12 = v12 + 512;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::destroy(v12 + 480, *v17);
  uint64_t v18 = *(void **)(v12 + 456);
  if (v18)
  {
    *(void *)(v12 + 464) = v18;
    operator delete(v18);
  }
  if (*(unsigned char *)(v12 + 448)) {

  }
  as::server::AudioSessionInfo::DebugState::~DebugState((void **)(v12 + 344));
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100](v14, 0);

  as::server::ConstAudioSessionInfo::~ConstAudioSessionInfo((as::server::ConstAudioSessionInfo *)v12);
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioSessionInfo::AddMXNotificationListener(as::server::AudioSessionInfo *this, NSString *a2, int a3)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  long long v5 = a2;
  uint64_t v6 = v5;
  if (a3)
  {
    v25[0] = v5;
    id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v25 count:1];
    id v8 = *(id *)as::server::gSessionServerLog(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *((_DWORD *)this + 2);
      *(_DWORD *)CFTypeRef cf = 136315906;
      *(void *)&cf[4] = "AudioSessionInfo.mm";
      __int16 v19 = 1024;
      int v20 = 1053;
      __int16 v21 = 1024;
      *(_DWORD *)BOOL v22 = v9;
      *(_WORD *)&v22[4] = 2112;
      *(void *)&v22[6] = v7;
      _os_log_impl(&dword_1CFE2A000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session 0x%x setting kMXSessionProperty_SubscribeToNotifications for notification: %@", cf, 0x22u);
    }
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, cf);
    int v10 = MXSessionSetProperty();
    uint64_t v11 = *(as::server **)cf;
    if (*(void *)cf) {
      CFRelease(*(CFTypeRef *)cf);
    }
    if (v10)
    {
      uint64_t v12 = *(id *)as::server::gSessionServerLog(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v13 = *((_DWORD *)this + 2);
        *(_DWORD *)CFTypeRef cf = 136316162;
        *(void *)&cf[4] = "AudioSessionInfo.mm";
        __int16 v19 = 1024;
        int v20 = 1058;
        __int16 v21 = 1024;
        *(_DWORD *)BOOL v22 = v13;
        *(_WORD *)&v22[4] = 2112;
        *(void *)&v22[6] = v7;
        __int16 v23 = 1024;
        int v24 = v10;
        _os_log_impl(&dword_1CFE2A000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Session 0x%x failed to set SubscribeToNotifications for: %@ with a status: %d", cf, 0x28u);
      }
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, cf);
  uint64_t v14 = CMNotificationCenterAddListener();
  long long v15 = *(as::server **)cf;
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
  if (v14)
  {
    char v16 = *(id *)as::server::gSessionServerLog(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFTypeRef cf = 136315650;
      *(void *)&cf[4] = "AudioSessionInfo.mm";
      __int16 v19 = 1024;
      int v20 = 1065;
      __int16 v21 = 2112;
      *(void *)BOOL v22 = v6;
      _os_log_impl(&dword_1CFE2A000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d AddMXNotificationListener failed for %@", cf, 0x1Cu);
    }
  }

  return v14;
}

void sub_1CFE31D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTypeRef as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef@<X0>(CFTypeRef this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 14);
  if (v3) {
    this = CFRetain(*((CFTypeRef *)this + 14));
  }
  *a2 = v3;
  return this;
}

uint64_t as::server::ConstAudioSessionInfo::ConstAudioSessionInfo(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)a1);
  *(void *)a1 = &unk_1F2688500;
  long long v6 = *(_OWORD *)a2;
  long long v7 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 44) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 28) = v7;
  *(_OWORD *)(a1 + 12) = v6;
  uint64_t v8 = *(void *)(a2 + 88);
  if (v8) {
    uint64_t v9 = v8 + 52;
  }
  else {
    uint64_t v9 = a2;
  }
  if (*(_DWORD *)(a2 + 40) == 1935830119) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = a2;
  }
  long long v11 = *(_OWORD *)v10;
  long long v12 = *(_OWORD *)(v10 + 16);
  *(void *)(a1 + 84) = *(void *)(v10 + 32);
  *(_OWORD *)(a1 + 68) = v12;
  *(_OWORD *)(a1 + 52) = v11;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 40);
  id v13 = v5;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = v13;
  v92 = (const void **)(a1 + 104);
  *(void *)(a1 + 112) = 0;
  uint64_t v14 = *(void **)(a2 + 56);
  if (v14) {
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 152), (char *)[v14 UTF8String]);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 152), "");
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v104);
  long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"sid:0x", 6);
  *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)", ", 2);
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v17 = &v116;
  }
  else {
    id v17 = (std::string *)v116.__r_.__value_.__r.__words[0];
  }
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v116.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, size);
  __int16 v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"(", 1);
  *(_DWORD *)((char *)v19 + *(void *)(*v19 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 2;
  int v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
  __int16 v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)", ", 2);
  CAX4CCString::CAX4CCString((CAX4CCString *)&v111, *(_DWORD *)(a2 + 40));
  size_t v23 = strlen(v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&v111, v23);
  if (*(void *)(a2 + 88))
  {
    int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"; srcid:0x", 10);
    *(_DWORD *)((char *)v24 + *(void *)(*v24 - 24) + 8) = *(_DWORD *)((unsigned char *)v24 + *(void *)(*v24 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    __int16 v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)", ", 2);
    uint64_t v26 = *(void *)(a2 + 88);
    __int16 v27 = (const char *)(v26 + 128);
    if (*(char *)(v26 + 151) < 0) {
      __int16 v27 = *(const char **)v27;
    }
    size_t v28 = strlen(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
    __int16 v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"(", 1);
    *(_DWORD *)((char *)v29 + *(void *)(*v29 - 24) + 8) = *(_DWORD *)((unsigned char *)v29 + *(void *)(*v29 - 24) + 8) & 0xFFFFFFB5 | 2;
    int v30 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)")", 1);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v104[8], (void *)(a1 + 176));
  *(void *)v104 = *MEMORY[0x1E4FBA418];
  *(void *)&v104[*(void *)(*(void *)v104 - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&v104[8] = MEMORY[0x1E4FBA470] + 16;
  if (v109 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25E17C0](&v110);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  uint64_t v31 = (AudioSession *)*(unsigned int *)(a1 + 8);
  uint64_t v32 = *(unsigned int *)(a2 + 36);
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v33 = &v102;
  }
  else {
    id v33 = (std::string *)v102.__r_.__value_.__r.__words[0];
  }
  id v34 = [NSString stringWithCString:v33 encoding:1];
  uint64_t v35 = [NSString stringWithFormat:@"%@(%d)", v34, v32];
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>((uint64_t)&v116, "ID");
  v116.__r_.__value_.__r.__words[2] = (std::string::size_type)&v116;
  char v117 = 1;
  AudioSession::FormatSessionIDAsHex(v31, &v103);
  uint64_t v119 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v118, (uint64_t)&v103);
  char v120 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v104, (uint64_t)&v116, 2, 1, 2);
  *(void *)&v104[16] = v104;
  v104[24] = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)&v111, "name");
  v111.__r_.__value_.__r.__words[2] = (std::string::size_type)&v111;
  char v112 = 1;
  id v36 = v35;
  v101.__r_.__value_.__r.__words[0] = [v36 UTF8String];
  uint64_t v114 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v113, &v101.__r_.__value_.__l.__data_);
  char v115 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v105, (uint64_t)&v111, 2, 1, 2);
  v106 = v105;
  char v107 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v99, (uint64_t)v104, 2, 1, 2);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v105[i]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v105[i + 8], v105[i]);
  }
  for (uint64_t j = 0; j != -64; j -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v113[j]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v113[j + 8], v113[j]);
  }
  for (uint64_t k = 0; k != -64; k -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v118[k]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v118[k + 8], v118[k]);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }

  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  uint64_t v40 = *(void *)(a2 + 88);
  if (v40)
  {
    __int16 v41 = (char *)(v40 + 128);
    if (*(char *)(v40 + 151) < 0) {
      __int16 v41 = *(char **)v41;
    }
    int v42 = *(_DWORD *)(v40 + 88);
    std::string::basic_string[abi:ne180100]<0>(v95, v41);
    AudioSession::FormatSessionIDAsHex((AudioSession *)*(unsigned int *)(*(void *)(a2 + 88) + 8), &v102);
    uint64_t v43 = std::string::append(&v102, " ", 1uLL);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if ((v96 & 0x80u) == 0) {
      v45 = v95;
    }
    else {
      v45 = (void **)v95[0];
    }
    if ((v96 & 0x80u) == 0) {
      std::string::size_type v46 = v96;
    }
    else {
      std::string::size_type v46 = (std::string::size_type)v95[1];
    }
    v47 = std::string::append(&v103, (const std::string::value_type *)v45, v46);
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v111.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v111, "(", 1uLL);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v101, v42);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v51 = &v101;
    }
    else {
      v51 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v52 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v52 = v101.__r_.__value_.__l.__size_;
    }
    v53 = std::string::append(&v116, (const std::string::value_type *)v51, v52);
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    *(void *)&v104[16] = *((void *)&v53->__r_.__value_.__l + 2);
    *(_OWORD *)v104 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = std::string::append((std::string *)v104, ")", 1uLL);
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    std::string::size_type v98 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)v97 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if ((v104[23] & 0x80000000) != 0) {
      operator delete(*(void **)v104);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v116.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v111.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v103.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&v116, (uint64_t)v97);
    v57 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v99, "sibling_of");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v116);
    std::string::value_type v58 = *(unsigned char *)v57;
    *(unsigned char *)v57 = v116.__r_.__value_.__s.__data_[0];
    v116.__r_.__value_.__s.__data_[0] = v58;
    std::string::size_type v59 = v57[1];
    v57[1] = v116.__r_.__value_.__l.__size_;
    v116.__r_.__value_.__l.__size_ = v59;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v116);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v116.__r_.__value_.__l.__size_, v116.__r_.__value_.__s.__data_[0]);
    if (SHIBYTE(v98) < 0) {
      operator delete(v97[0]);
    }
    if ((char)v96 < 0) {
      operator delete(v95[0]);
    }
  }
  int v60 = *(_DWORD *)(a2 + 40);
  if (v60 != 1886546285 && v60 != 1935830119)
  {
    AudioSession::GetSessionTypeName(v60, v104);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&v111, (uint64_t)v104);
    v61 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v99, "type");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v111);
    std::string::value_type v62 = *(unsigned char *)v61;
    *(unsigned char *)v61 = v111.__r_.__value_.__s.__data_[0];
    v111.__r_.__value_.__s.__data_[0] = v62;
    std::string::size_type v63 = v61[1];
    v61[1] = v111.__r_.__value_.__l.__size_;
    v111.__r_.__value_.__l.__size_ = v63;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v111);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v111.__r_.__value_.__l.__size_, v111.__r_.__value_.__s.__data_[0]);
    if ((v104[23] & 0x80000000) != 0) {
      operator delete(*(void **)v104);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v99, -1, 0x20u, 0, 2, (void *)(a1 + 200));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v99);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v100, v99[0]);
  v64 = operator new(0x20uLL);
  v64[1] = 0;
  v64[2] = 0;
  void *v64 = &unk_1F26885C0;
  *(void *)(a1 + 224) = v64 + 3;
  *(void *)(a1 + 232) = v64;
  *(void *)(a1 + 240) = 0;
  as::server::ProcessIdentity::SecurityTask((as::server::ProcessIdentity *)(a1 + 12), (SecTaskRef *)&v111);
  as::server::ProcessIdentity::SecurityTask((as::server::ProcessIdentity *)(a1 + 52), (SecTaskRef *)&v103);
  if (!v111.__r_.__value_.__r.__words[0])
  {
    char v66 = *(id *)as::server::gSessionServerLog(v65);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      int v67 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)v104 = 136315650;
      *(void *)&v104[4] = "AudioSessionInfo.mm";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 261;
      *(_WORD *)&v104[18] = 1024;
      *(_DWORD *)&v104[20] = v67;
      _os_log_impl(&dword_1CFE2A000, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d Creator PID %d has an invalid audit token", v104, 0x18u);
    }
  }
  uint64_t v68 = (__SecTask *)v103.__r_.__value_.__r.__words[0];
  if (!v103.__r_.__value_.__r.__words[0])
  {
    char v69 = *(id *)as::server::gSessionServerLog(v65);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      int v70 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)v104 = 136315650;
      *(void *)&v104[4] = "AudioSessionInfo.mm";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 263;
      *(_WORD *)&v104[18] = 1024;
      *(_DWORD *)&v104[20] = v70;
      _os_log_impl(&dword_1CFE2A000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d Source PID %d has an invalid audit token", v104, 0x18u);
    }

    uint64_t v68 = (__SecTask *)v103.__r_.__value_.__r.__words[0];
  }
  __int16 v71 = (__SecTask *)v111.__r_.__value_.__r.__words[0];
  if (v111.__r_.__value_.__r.__words[0])
  {
    CFTypeRef v72 = SecTaskCopyValueForEntitlement((SecTaskRef)v111.__r_.__value_.__l.__data_, @"com.apple.private.coreaudio.viewInterruptorName.allow", 0);
    *(void *)v104 = v72;
    v104[8] = 1;
    if (v72) {
      BOOL v73 = CFEqual(v72, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
    }
    else {
      BOOL v73 = 0;
    }
    CACFBoolean::~CACFBoolean((CACFBoolean *)v104);
  }
  else
  {
    BOOL v73 = 0;
  }
  *(unsigned char *)(a1 + 120) = v73;
  if (v68)
  {
    CFTypeRef v74 = SecTaskCopyValueForEntitlement(v68, @"com.apple.coreaudio.untrackedSpatialization.allow", 0);
    *(void *)v104 = v74;
    v104[8] = 1;
    if (v74) {
      BOOL v75 = CFEqual(v74, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
    }
    else {
      BOOL v75 = 0;
    }
    CACFBoolean::~CACFBoolean((CACFBoolean *)v104);
    *(unsigned char *)(a1 + 121) = v75;
    CFTypeRef v77 = SecTaskCopyValueForEntitlement(v68, @"com.apple.developer.coreaudio.untrackedHeadphoneSpatialization", 0);
    *(void *)v104 = v77;
    v104[8] = 1;
    if (v77) {
      BOOL v76 = CFEqual(v77, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
    }
    else {
      BOOL v76 = 0;
    }
    CACFBoolean::~CACFBoolean((CACFBoolean *)v104);
  }
  else
  {
    BOOL v76 = 0;
    *(unsigned char *)(a1 + 121) = 0;
  }
  *(unsigned char *)(a1 + 122) = v76;
  if (v71)
  {
    CFTypeRef v78 = SecTaskCopyValueForEntitlement(v71, @"com.apple.private.coreaudio.mxsessionPropertyPipe", 0);
    *(void *)v104 = v78;
    v104[8] = 1;
    if (v78) {
      LOBYTE(v71) = CFEqual(v78, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
    }
    else {
      LOBYTE(v71) = 0;
    }
    CACFBoolean::~CACFBoolean((CACFBoolean *)v104);
  }
  *(unsigned char *)(a1 + 123) = (_BYTE)v71;
  int v79 = *(_DWORD *)(a2 + 40);
  if (v79 == 1935830119)
  {
    if (*(void *)(a2 + 88))
    {
      v83 = *(id *)as::server::gSessionServerLog(v65);
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        int v84 = *(_DWORD *)(*(void *)(a2 + 88) + 88);
        *(_DWORD *)v104 = 136315650;
        *(void *)&v104[4] = "AudioSessionInfo.mm";
        *(_WORD *)&v104[12] = 1024;
        *(_DWORD *)&v104[14] = 290;
        *(_WORD *)&v104[18] = 1024;
        *(_DWORD *)&v104[20] = v84;
        _os_log_impl(&dword_1CFE2A000, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to create sibling for core session created by PID %d", v104, 0x18u);
      }

      as::server::ConstAudioSessionInfo::GetCMSessionRef(*(CFTypeRef *)(a2 + 88), v104);
      v85 = *v92;
      *v92 = *(const void **)v104;
      *(void *)v104 = v85;
      if (v85) {
        CFRelease(v85);
      }
      v86 = &v93;
      goto LABEL_123;
    }
  }
  else if (v79 == 1935897189)
  {
    uint64_t v80 = *(id *)as::server::gSessionServerLog(v65);
    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v81 = *(_DWORD *)(a2 + 64);
      int v82 = bswap32(v81);
      *(_DWORD *)&v104[1] = v82;
      if (((char)v82 - 32) > 0x5E
        || (((__int16)v82 >> 8) - 32) > 0x5E
        || ((v82 << 8 >> 24) - 32) > 0x5E
        || ((v82 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v116, v81);
      }
      else
      {
        strcpy(&v104[5], "'");
        v104[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v116, v104);
      }
      v89 = &v116;
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v89 = (std::string *)v116.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)v104 = 136315650;
      *(void *)&v104[4] = "AudioSessionInfo.mm";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 279;
      *(_WORD *)&v104[18] = 2080;
      *(void *)&v104[20] = v89;
      _os_log_impl(&dword_1CFE2A000, v80, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to create secure session with use case ID  %s", v104, 0x1Cu);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v116.__r_.__value_.__l.__data_);
      }
    }

    v86 = &v94;
LABEL_123:
    long long v90 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v86 = *(_OWORD *)a2;
    *((_OWORD *)v86 + 1) = v90;
    *((_DWORD *)v86 + 8) = *(_DWORD *)(a2 + 32);
    as::server::ConstAudioSessionInfo::CreateMXSession(a1, 1, (uint64_t)v86, a2);
    goto LABEL_124;
  }
  v87 = *(id *)as::server::gSessionServerLog(v65);
  if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
  {
    int v88 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)v104 = 136315650;
    *(void *)&v104[4] = "AudioSessionInfo.mm";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 296;
    *(_WORD *)&v104[18] = 1024;
    *(_DWORD *)&v104[20] = v88;
    _os_log_impl(&dword_1CFE2A000, v87, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to create a new core session for client with PID %d", v104, 0x18u);
  }

  as::server::ConstAudioSessionInfo::CreateCMSession((as::server::ConstAudioSessionInfo *)a1, (const as::server::SessionCreationDescription *)a2);
LABEL_124:
  if (v103.__r_.__value_.__r.__words[0]) {
    CFRelease(v103.__r_.__value_.__l.__data_);
  }
  if (v111.__r_.__value_.__r.__words[0]) {
    CFRelease(v111.__r_.__value_.__l.__data_);
  }

  return a1;
}

void sub_1CFE32D4C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D25E1670](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1D25E1680](v13);
  return a1;
}

void sub_1CFE33218(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1D25E1680](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1CFE331F8);
}

void sub_1CFE3326C(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      id v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1CFE333EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CACFBoolean::~CACFBoolean(CACFBoolean *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

void as::server::ProcessIdentity::SecurityTask(as::server::ProcessIdentity *this@<X0>, SecTaskRef *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  if (*((unsigned char *)this + 32))
  {
    long long v2 = *((_OWORD *)this + 1);
    *(_OWORD *)v4.val = *(_OWORD *)this;
    *(_OWORD *)&v4.val[4] = v2;
    *a2 = SecTaskCreateWithAuditToken(0, &v4);
  }
  else
  {
    uint64_t v3 = *(id *)as::server::gSessionServerLog(this);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v6 = "AudioSessionInfo.h";
      __int16 v7 = 1024;
      int v8 = 242;
      _os_log_impl(&dword_1CFE2A000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Error while getting SecTask: token not valid", buf, 0x12u);
    }
  }
}

void sub_1CFE33528(_Unwind_Exception *a1)
{
  applesauce::CF::ObjectRef<__SecTask *>::~ObjectRef(v1);
  _Unwind_Resume(a1);
}

void *anonymous namespace'::GetClientProcessNameString@<X0>(_anonymous_namespace_ *this@<X0>, void *a2@<X8>)
{
  id v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    uint64_t v6 = (char *)[v5 UTF8String];
    return std::string::basic_string[abi:ne180100]<0>(a2, v6);
  }
  else
  {
    int v8 = (caulk::platform *)*((unsigned int *)this + 9);
    return (void *)caulk::platform::process_name(v8);
  }
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  id v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1CFE3371C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1D25E17C0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  id v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE338B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void BaseOpaqueObject::BaseOpaqueObject(BaseOpaqueObject *this)
{
  *(void *)this = &unk_1F26882F8;
  uint64_t v2 = (atomic_uint *)OpaqueObjectMgrInstance();
  *((_DWORD *)this + 2) = OpaqueObjectMgr::add(v2, this);
}

uint64_t OpaqueObjectMgr::add(atomic_uint *this, BaseOpaqueObject *a2)
{
  do
  {
    uint64_t add = atomic_fetch_add(this + 36, 1u);
    if ((add & 0x80000000) != 0)
    {
      uint64_t v5 = (add - 2147479552);
      atomic_compare_exchange_strong(this + 36, (unsigned int *)&add, v5);
      uint64_t add = v5;
    }
    uint64_t v6 = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::lookup<(caulk::concurrent::guarded_lookup_hash_table_options)0,void>((uint64_t)this, add);
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
  }
  while (!v8);
  caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::_addOrReplace((uint64_t)this, add, (uint64_t)a2, 0);
  return add;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::lookup<(caulk::concurrent::guarded_lookup_hash_table_options)0,void>(uint64_t a1, int a2)
{
  uint64_t v2 = (atomic_uint *)(a1 + 48);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 48), 1u);
  uint64_t result = atomic_load((unint64_t *)(a1 + 40));
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::findSlotForKey(result, a2);
    if (v4) {
      uint64_t result = *(void *)(v4 + 8);
    }
    else {
      uint64_t result = 0;
    }
  }
  atomic_fetch_add(v2, 0xFFFFFFFF);
  return result;
}

BOOL caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::_addOrReplace(uint64_t a1, int a2, uint64_t a3, int a4)
{
  BOOL v8 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  uint64_t v9 = (_DWORD *)atomic_load((unint64_t *)(a1 + 40));
  int v10 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v10;
  if (v9)
  {
    unsigned int v11 = 16 * v10;
    unsigned int v12 = v9[2];
    if (v11 / v12 < 0xB) {
      goto LABEL_6;
    }
    unsigned int v13 = 2 * v12;
  }
  else
  {
    unsigned int v13 = 8;
  }
  uint64_t v9 = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::rehash((unint64_t *)a1, v13);
LABEL_6:
  BOOL v14 = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::addOrReplace((uint64_t)v9, a2, a3, a4);
  if (v14) {
    caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::emptyReleasePool(a1);
  }
  else {
    --*(_DWORD *)(a1 + 32);
  }
  std::mutex::unlock(v8);
  return v14;
}

void sub_1CFE33AC4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::emptyReleasePool(uint64_t result)
{
  int v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    uint64_t v2 = result;
    uint64_t v4 = *(uint64_t **)(result + 56);
    for (uint64_t i = *(uint64_t **)(result + 64);
          i != v4;
          uint64_t result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl>>::reset[abi:ne180100](i, 0))
    {
      --i;
    }
    *(void *)(v2 + 64) = v4;
  }
  return result;
}

BOOL caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl::addOrReplace(uint64_t a1, int a2, uint64_t a3, int a4)
{
  char SlotForKey = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::findSlotForKey(a1, a2);
  if ((SlotForKey & 1) == 0) {
    operator new();
  }
  if (a4) {
    *(void *)(v7 + 8) = a3;
  }
  return (SlotForKey & 1) == 0;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl::findSlotForKey(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t result = std::function<unsigned int ()>::operator()(*(void *)a1, a2);
  signed int v6 = result % *(_DWORD *)(a1 + 8);
  if (v6 >= 3) {
    int v7 = 0;
  }
  else {
    int v7 = v4;
  }
  uint64_t v8 = (v6 + v7 - 3);
  uint64_t v9 = 0xFFFFFFFFLL;
  uint64_t v10 = 1;
  uint64_t v11 = result % *(_DWORD *)(a1 + 8);
  do
  {
    uint64_t v12 = v8;
    unint64_t v13 = atomic_load((unint64_t *)(a1 + 8 * v11 + 16));
    if (v13 == -1)
    {
      if ((int)v9 >= 0) {
        uint64_t v9 = v9;
      }
      else {
        uint64_t v9 = v11;
      }
    }
    else
    {
      if (!v13)
      {
        uint64_t v10 = 0;
        if ((int)v9 >= 0) {
          uint64_t v11 = v9;
        }
        else {
          uint64_t v11 = v11;
        }
        return v10 | (v11 << 32);
      }
      if (*(_DWORD *)(v13 + 4) == a2) {
        return v10 | (v11 << 32);
      }
    }
    if ((int)v8 >= 3) {
      int v14 = 0;
    }
    else {
      int v14 = v4;
    }
    uint64_t v8 = (v8 + v14 - 3);
    uint64_t v11 = v12;
  }
  while (v12 != v6);
  if ((v9 & 0x80000000) == 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v9;
    return v10 | (v11 << 32);
  }
  __break(1u);
  return result;
}

uint64_t std::function<unsigned int ()(unsigned int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::__function::__func<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0,std::allocator<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0>,unsigned int ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

void CAX4CCString::CAX4CCString(CAX4CCString *this, unsigned int a2)
{
  unsigned int v4 = bswap32(a2);
  *(_DWORD *)((char *)this + 1) = v4;
  uint64_t v5 = MEMORY[0x1E4F14390];
  if ((v4 & 0x80) != 0)
  {
    if (!__maskrune((char)v4, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * (char)v4 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  unsigned int v6 = *((char *)this + 2);
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  unsigned int v7 = *((char *)this + 3);
  if ((v7 & 0x80000000) != 0)
  {
    if (!__maskrune(v7, 0x40000uLL)) {
      goto LABEL_17;
    }
LABEL_13:
    unsigned int v8 = *((char *)this + 4);
    if ((v8 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x40000uLL)) {
        goto LABEL_17;
      }
    }
    else if ((*(_DWORD *)(v5 + 4 * v8 + 60) & 0x40000) == 0)
    {
      goto LABEL_17;
    }
    *(_WORD *)((char *)this + 5) = 39;
    *(unsigned char *)this = 39;
    return;
  }
  if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x40000) != 0) {
    goto LABEL_13;
  }
LABEL_17:
  if (a2 + 199999 > 0x61A7E) {
    snprintf((char *)this, 0x10uLL, "0x%x");
  }
  else {
    snprintf((char *)this, 0x10uLL, "%d");
  }
}

uint64_t OpaqueObjectMgrInstance(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OpaqueObjectMgrInstance(void)::onceflag, memory_order_acquire) != -1)
  {
    unint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&OpaqueObjectMgrInstance(void)::onceflag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OpaqueObjectMgrInstance(void)::$_0 &&>>);
  }
  return OpaqueObjectMgr::sInstance;
}

BOOL as::server::AudioSessionInfo::SetXPCConnection(as::server::AudioSessionInfo *this, NSXPCConnection *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = a2;
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 32);
  if (v6)
  {
    unsigned int v7 = *(id *)as::server::gSessionServerLog((as::server *)v4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unsigned int v8 = (void *)((char *)this + 176);
      if (*((char *)this + 199) < 0) {
        unsigned int v8 = (void *)*v8;
      }
      int v10 = 136315650;
      uint64_t v11 = "AudioSessionInfo.h";
      __int16 v12 = 1024;
      int v13 = 486;
      __int16 v14 = 2080;
      uint64_t v15 = v8;
      _os_log_impl(&dword_1CFE2A000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %s already had a valid XPC Connection. Ignoring request to set it.", (uint8_t *)&v10, 0x1Cu);
    }
  }
  else
  {
    objc_storeStrong((id *)this + 32, a2);
  }

  return v6 == 0;
}

void sub_1CFE33FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::forbid_acq::SetPropertiesOnMXSession(unsigned int a1, const audit_token_t *a2, void *a3, int a4, id *a5)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  id v71 = a3;
  unsigned int v70 = a1;
  uint64_t v9 = (as::server *)as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v93, a1, a2, 1);
  int v10 = v93;
  if (v93)
  {
    if (v71)
    {
      uint64_t v11 = v94;
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((char *)v10 + 223) < 0) {
        std::string::__init_copy_ctor_external(&v92, *((const std::string::value_type **)v10 + 25), *((void *)v10 + 26));
      }
      else {
        std::string v92 = *(std::string *)((char *)v10 + 200);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      __int16 v14 = v93;
      if (!v93)
      {
        uint64_t v60 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v60);
      }
      uint64_t v15 = v94;
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v14, buf);
      id v17 = *(void **)buf;
      if (*(void *)buf) {
        CFRelease(*(CFTypeRef *)buf);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v17)
      {
        strcpy(v118, "set_property");
        if ([v71 count] == 1)
        {
          char v18 = [v71 allKeys];
          v64 = [v18 objectAtIndexedSubscript:0];

          id v63 = [v71 objectForKeyedSubscript:v64];
        }
        else
        {
          id v63 = v71;
          v64 = @"batch_properties";
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)__p, "key");
        v105 = __p;
        char v106 = 1;
        std::string::value_type v62 = v64;
        v89 = (char *)[(__CFString *)v62 UTF8String];
        uint64_t v108 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v107, &v89);
        char v109 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
        *(void *)&v112[2] = buf;
        v112[10] = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v98, "value");
        v99 = v98;
        char v100 = 1;
        AudioSession::PropertyValueToJSON(v63, (uint64_t)v87);
        v101[0] = v87[0];
        v102[0] = v88;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v87);
        v87[0] = 0;
        int v88 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v101);
        v102[1] = v101;
        char v103 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v114 + 2, (uint64_t)v98, 2, 1, 2);
        v116[1] = (char *)&v114 + 2;
        char v117 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v90, (uint64_t)buf, 2, 1, 2);
        for (uint64_t i = 0; i != -8; i -= 4)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v114 + i * 8 + 2);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v116[i], *((unsigned __int8 *)&v114 + i * 8 + 2));
        }
        for (uint64_t j = 0; j != -8; j -= 4)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v101[j * 8]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v102[j], v101[j * 8]);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v87);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v88, v87[0]);
        for (uint64_t k = 0; k != -64; k -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v107[k]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v107[k + 8], v107[k]);
        }
        __int16 v25 = *(id *)as::server::gSessionServerLog(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = SHIBYTE(v92.__r_.__value_.__r.__words[2]);
          std::string::size_type v27 = v92.__r_.__value_.__r.__words[0];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v90, -1, 0x20u, 0, 0, __p);
          size_t v28 = &v92;
          if (v26 < 0) {
            size_t v28 = (std::string *)v27;
          }
          if (SHIBYTE(v105) >= 0) {
            __int16 v29 = __p;
          }
          else {
            __int16 v29 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
          __int16 v111 = 1024;
          *(_DWORD *)char v112 = 400;
          *(_WORD *)&v112[4] = 2080;
          *(void *)&v112[6] = v118;
          __int16 v113 = 2080;
          uint64_t v114 = (uint64_t)v28;
          __int16 v115 = 2080;
          v116[0] = v29;
          _os_log_impl(&dword_1CFE2A000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
          if (SHIBYTE(v105) < 0) {
            operator delete(__p[0]);
          }
        }

        id v30 = v17;
        v61 = v30;
        if (a4 == 2)
        {
          uint64_t v31 = (as::server *)[v30 setProperties:v71 usingErrorHandlingStrategy:2 outPropertiesErrors:a5];
          uint64_t v32 = (uint64_t)v31;
        }
        else
        {
          id v33 = as::server::getMXPropertiesInLegacyOrder(v71);
          if (!v33)
          {
            id v34 = *(id *)as::server::gSessionServerLog(0);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
              __int16 v111 = 1024;
              *(_DWORD *)char v112 = 418;
              _os_log_impl(&dword_1CFE2A000, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d orderedPropertyValues not valid.", buf, 0x12u);
            }
          }
          uint64_t v32 = [v61 setOrderedProperties:v33 usingErrorHandlingStrategy:1 outPropertiesErrors:a5];
        }
        if (v32 == -15687)
        {
          uint64_t v35 = *(id *)as::server::gSessionServerLog(v31);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
            __int16 v111 = 1024;
            *(_DWORD *)char v112 = 428;
            _os_log_impl(&dword_1CFE2A000, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MX returned OperationFailed while setting batch properties", buf, 0x12u);
          }
          id v36 = *a5;
          if (*a5)
          {
            long long v85 = 0u;
            long long v86 = 0u;
            long long v83 = 0u;
            long long v84 = 0u;
            id v37 = v36;
            uint64_t v38 = [v37 countByEnumeratingWithState:&v83 objects:v97 count:16];
            if (v38)
            {
              uint64_t v39 = *(void *)v84;
LABEL_56:
              uint64_t v40 = 0;
              while (1)
              {
                if (*(void *)v84 != v39) {
                  objc_enumerationMutation(v37);
                }
                __int16 v41 = *(void **)(*((void *)&v83 + 1) + 8 * v40);
                int v42 = [v41 allKeys];
                uint64_t v43 = [v42 firstObject];

                long long v44 = [v41 objectForKeyedSubscript:v43];
                uint64_t v32 = [v44 intValue];

                if (v32) {
                  break;
                }
                if (v38 == ++v40)
                {
                  uint64_t v38 = [v37 countByEnumeratingWithState:&v83 objects:v97 count:16];
                  if (v38) {
                    goto LABEL_56;
                  }
                  uint64_t v32 = 0;
                  break;
                }
              }
            }
            else
            {
              uint64_t v32 = 4294951609;
            }
          }
          else
          {
            uint64_t v32 = 4294951609;
          }
        }
        unsigned int v65 = as::server::TranslateCMSessionErrorCode((uint64_t)v118, (uint64_t *)&v92, 441, v32);
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        obuint64_t j = *a5;
        uint64_t v68 = [obj countByEnumeratingWithState:&v79 objects:v96 count:16];
        if (v68)
        {
          uint64_t v67 = *(void *)v80;
          uint64_t v45 = *MEMORY[0x1E4F75EC8];
          do
          {
            for (uint64_t m = 0; m != v68; ++m)
            {
              if (*(void *)v80 != v67) {
                objc_enumerationMutation(obj);
              }
              std::string::size_type v46 = *(void **)(*((void *)&v79 + 1) + 8 * m);
              long long v75 = 0u;
              long long v76 = 0u;
              long long v77 = 0u;
              long long v78 = 0u;
              id v47 = v46;
              uint64_t v48 = [v47 countByEnumeratingWithState:&v75 objects:v95 count:16];
              if (v48)
              {
                uint64_t v49 = *(void *)v76;
                do
                {
                  for (uint64_t n = 0; n != v48; ++n)
                  {
                    if (*(void *)v76 != v49) {
                      objc_enumerationMutation(v47);
                    }
                    v51 = *(void **)(*((void *)&v75 + 1) + 8 * n);
                    std::string::size_type v52 = [v47 objectForKeyedSubscript:v51];
                    uint64_t v53 = [v52 longValue];

                    if (v53)
                    {
                      v55 = *(id *)as::server::gSessionServerLog(v54);
                      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 136315906;
                        *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
                        __int16 v111 = 1024;
                        *(_DWORD *)char v112 = 448;
                        *(_WORD *)&v112[4] = 2112;
                        *(void *)&v112[6] = v51;
                        __int16 v113 = 2048;
                        uint64_t v114 = v53;
                        _os_log_impl(&dword_1CFE2A000, v55, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error in setting property: %@ with code %ld", buf, 0x26u);
                      }
                    }
                    else if ([v51 isEqualToString:v45])
                    {
                      long long v56 = [v71 objectForKeyedSubscript:v45];
                      v57 = as::server::GetAudioControlQueue(v56);
                      v72[0] = MEMORY[0x1E4F143A8];
                      v72[1] = 3221225472;
                      v72[2] = ___ZN2as6server10forbid_acq24SetPropertiesOnMXSessionEjRK13audit_token_tP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS_30AVAudioSessionBatchSetStrategyEPU15__autoreleasingP7NSArrayIPS5_IS7_P8NSNumberEE_block_invoke;
                      v72[3] = &unk_1E6875A98;
                      unsigned int v74 = v70;
                      std::string::value_type v58 = v56;
                      BOOL v73 = v58;
                      as::server::DispatchBlock(v57, v72, 1, (uint64_t)"SetPropertiesOnMXSession", (uint64_t)"AudioSessionServerImp.mm", 462, 0, 0);
                    }
                  }
                  uint64_t v48 = [v47 countByEnumeratingWithState:&v75 objects:v95 count:16];
                }
                while (v48);
              }
            }
            uint64_t v68 = [obj countByEnumeratingWithState:&v79 objects:v96 count:16];
          }
          while (v68);
        }

        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v90);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v91, v90[0]);
      }
      else
      {
        unsigned int v65 = 2003329396;
        __int16 v19 = *(id *)as::server::gSessionServerLog(DefaultSubsessionRef);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = &v92;
          if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v20 = (std::string *)v92.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
          __int16 v111 = 1024;
          *(_DWORD *)char v112 = 383;
          *(_WORD *)&v112[4] = 2080;
          *(void *)&v112[6] = v20;
          _os_log_impl(&dword_1CFE2A000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get MXSessionRef for session: %s", buf, 0x1Cu);
        }
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      int v13 = *(id *)as::server::gSessionServerLog(v9);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
        __int16 v111 = 1024;
        *(_DWORD *)char v112 = 376;
        _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Invalid propertiesToSet", buf, 0x12u);
      }
      unsigned int v65 = -50;
    }
  }
  else
  {
    unsigned int v65 = 561210739;
    __int16 v12 = *(id *)as::server::gSessionServerLog(v9);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
      __int16 v111 = 1024;
      *(_DWORD *)char v112 = 371;
      *(_WORD *)&v112[4] = 1024;
      *(_DWORD *)&v112[6] = a1;
      _os_log_impl(&dword_1CFE2A000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
    }
  }
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
  }

  return v65;
}

void sub_1CFE34B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t *a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a57);
  if (a64 < 0) {
    operator delete(__p);
  }
  if (a67) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a67);
  }

  _Unwind_Resume(a1);
}

void as::server::HandleMXNotification(uint64_t a1, AudioSession *a2, void *a3, uint64_t a4, const void *a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  DeepCopy = (as::server *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a5, 2uLL);
  uint64_t v9 = *(id *)as::server::gSessionServerLog(DeepCopy);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    AudioSession::FormatSessionIDAsHex(a2, &v75);
    int v10 = (v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v75
        : (std::string *)v75.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 686;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v10;
    *(_WORD *)&buf[28] = 2112;
    *(void *)&buf[30] = v7;
    *(_WORD *)&buf[38] = 2112;
    id v72 = DeepCopy;
    _os_log_impl(&dword_1CFE2A000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d HandleMXNotification, session ID = %s, name = %@, payload = %@", buf, 0x30u);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
  }

  LODWORD(v62) = a2;
  id v11 = v7;
  id v63 = v11;
  __int16 v12 = DeepCopy;
  v64 = v12;
  if (objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E4F75D38], v62))
  {
    int v13 = v12;
    __int16 v14 = as::server::GetAudioControlQueue(v13);
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZN12_GLOBAL__N_132HandleAppStateChangeNotificationEjP12NSDictionary_block_invoke;
    *(void *)&buf[24] = &unk_1E6875A98;
    LODWORD(v72) = a2;
    uint64_t v15 = v13;
    *(void *)&buf[32] = v15;
    as::server::DispatchBlock(v14, buf, 0, (uint64_t)"HandleAppStateChangeNotification", (uint64_t)"AudioSessionServerImpNotificationHandlers.mm", 572, 0, 0);

    id v16 = v11;
    goto LABEL_62;
  }
  if ([v11 isEqualToString:*MEMORY[0x1E4F75D98]])
  {
    int v17 = 32770;
LABEL_11:
    id v16 = v11;
    uint64_t v15 = v12;
    goto LABEL_62;
  }
  char v18 = (as::server *)[v11 isEqualToString:*MEMORY[0x1E4F75DB0]];
  if (!v18)
  {
    if ([v11 isEqualToString:*MEMORY[0x1E4F75D40]])
    {
      int v17 = 32771;
      goto LABEL_11;
    }
    if ([v11 isEqualToString:*MEMORY[0x1E4F75D20]])
    {
      id v28 = v11;
      __int16 v29 = v12;
      id v30 = as::server::GetASCallbackQueue(v29);
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZN12_GLOBAL__N_129HandleRouteChangeNotificationEjP8NSStringP19NSMutableDictionary_block_invoke;
      *(void *)&buf[24] = &unk_1E6875B10;
      LODWORD(v73) = a2;
      *(void *)&buf[32] = v29;
      id v72 = v28;
      uint64_t v15 = v29;
      id v16 = v28;
      dispatch_async(v30, buf);

      goto LABEL_62;
    }
    if ([v11 isEqualToString:*MEMORY[0x1E4F75D50]])
    {
      as::server::HandleMXNotification(opaqueCMNotificationCenter *,void const*,__CFString const*,void const*,void const*)::$_0::operator()(&v62, 0);
      id v33 = (void **)MEMORY[0x1E4F75CA8];
    }
    else
    {
      if (![v11 isEqualToString:*MEMORY[0x1E4F75D48]])
      {
        if (([v11 isEqualToString:*MEMORY[0x1E4F75DB8]] & 1) != 0
          || ![v11 isEqualToString:*MEMORY[0x1E4F75DC8]])
        {
          as::server::HandleMXNotification(opaqueCMNotificationCenter *,void const*,__CFString const*,void const*,void const*)::$_0::operator()(&v62, 1);
          id v16 = v11;
          uint64_t v15 = v12;
        }
        else
        {
          as::server::HandleMXNotification(opaqueCMNotificationCenter *,void const*,__CFString const*,void const*,void const*)::$_0::operator()(&v62, 1);
          id v16 = v11;
          uint64_t v15 = v12;
        }
        goto LABEL_62;
      }
      as::server::HandleMXNotification(opaqueCMNotificationCenter *,void const*,__CFString const*,void const*,void const*)::$_0::operator()(&v62, 0);
      id v33 = (void **)MEMORY[0x1E4F75CA0];
    }
    id v16 = v11;
    uint64_t v15 = v12;
    goto LABEL_62;
  }
  __int16 v19 = as::server::GetASCallbackQueue(v18);
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = ___ZZN2as6server20HandleMXNotificationEP26opaqueCMNotificationCenterPKvPK10__CFStringS4_S4_ENK3__0clEb_block_invoke;
  *(void *)&buf[24] = &unk_1E6875AE8;
  LODWORD(v73) = a2;
  *(void *)&buf[32] = v11;
  int v20 = v12;
  id v72 = v20;
  BYTE4(v73) = 0;
  dispatch_async(v19, buf);

  __int16 v21 = v20;
  BOOL v22 = (as::server *)as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v69, a2);
  if (!v69)
  {
    uint64_t v31 = *(id *)as::server::gSessionServerLog(v22);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 305;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a2;
      _os_log_impl(&dword_1CFE2A000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Did not find matching audio session 0x%x. Bailing.", buf, 0x18u);
    }
    goto LABEL_59;
  }
  size_t v23 = [(as::server *)v21 objectForKey:*MEMORY[0x1E4F75C30]];
  int v24 = v23;
  if (v23)
  {
    __int16 v25 = (as::server::LegacySessionManager *)[v23 intValue];
    unsigned int v26 = v25 - 2;
    if ((v25 - 2) >= 6)
    {
      if (v25 == 1)
      {
        uint64_t v49 = as::server::LegacySessionManager::Instance(v25);
        long long v50 = (os_unfair_lock_s *)*((void *)v49 + 31);
        if (v50)
        {
          os_unfair_lock_lock(*((os_unfair_lock_t *)v49 + 31));
          as::server::DeviceTimeObserver::sessionIsActive((as::server::DeviceTimeObserver *)&v50[2], a2, 1);
          os_unfair_lock_unlock(v50);
        }
        v51 = v69;
        if (!v69)
        {
          uint64_t v60 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v60);
        }
        std::string::size_type v52 = v70;
        if (v70)
        {
          atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
          as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v51, &v75);
          std::__shared_weak_count::__release_shared[abi:ne180100](v52);
        }
        else
        {
          DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v69, &v75);
        }
        long long v54 = as::server::GetASCallbackQueue(DefaultSubsessionRef);
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3321888768;
        *(void *)&buf[16] = ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_82;
        *(void *)&buf[24] = &unk_1F26883D8;
        int v74 = (int)a2;
        v55 = (void *)v75.__r_.__value_.__r.__words[0];
        if (v75.__r_.__value_.__r.__words[0]) {
          CFRetain(v75.__r_.__value_.__l.__data_);
        }
        id v72 = v55;
        *(void *)&buf[32] = v21;
        uint64_t v73 = 0;
        dispatch_async(v54, buf);

        if (v72) {
          CFRelease(v72);
        }
        long long v56 = (const void *)v75.__r_.__value_.__r.__words[0];
        if (!v75.__r_.__value_.__r.__words[0]) {
          goto LABEL_58;
        }
      }
      else
      {
        if (v25) {
          goto LABEL_58;
        }
        id v34 = as::server::LegacySessionManager::Instance(v25);
        uint64_t v35 = (os_unfair_lock_s *)*((void *)v34 + 31);
        if (v35)
        {
          os_unfair_lock_lock(*((os_unfair_lock_t *)v34 + 31));
          as::server::DeviceTimeObserver::sessionIsActive((as::server::DeviceTimeObserver *)&v35[2], a2, 0);
          os_unfair_lock_unlock(v35);
        }
        id v36 = v69;
        if (!v69)
        {
          uint64_t v61 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v61);
        }
        id v37 = v70;
        if (v70)
        {
          atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
          as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v36, &v75);
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        else
        {
          uint64_t v38 = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v69, &v75);
        }
        v57 = as::server::GetASCallbackQueue(v38);
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3321888768;
        *(void *)&buf[16] = ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke;
        *(void *)&buf[24] = &unk_1F26883D8;
        int v74 = (int)a2;
        std::string::value_type v58 = (void *)v75.__r_.__value_.__r.__words[0];
        if (v75.__r_.__value_.__r.__words[0]) {
          CFRetain(v75.__r_.__value_.__l.__data_);
        }
        id v72 = v58;
        *(void *)&buf[32] = v21;
        uint64_t v73 = 0;
        dispatch_async(v57, buf);

        if (v72) {
          CFRelease(v72);
        }
        long long v56 = (const void *)v75.__r_.__value_.__r.__words[0];
        if (!v75.__r_.__value_.__r.__words[0]) {
          goto LABEL_58;
        }
      }
      CFRelease(v56);
    }
    else
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)buf, "command");
      *(void *)&buf[16] = buf;
      buf[24] = 1;
      if (v26 > 5) {
        std::string::size_type v27 = "Unknown Interruption";
      }
      else {
        std::string::size_type v27 = off_1E6875B30[v26];
      }
      __p[0] = (void *)v27;
      uint64_t v73 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&buf[32], (char **)__p);
      LOBYTE(v74) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v75, (uint64_t)buf, 2, 1, 2);
      v75.__r_.__value_.__r.__words[2] = (std::string::size_type)&v75;
      char v76 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v67, (uint64_t)&v75, 1, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v75);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v75.__r_.__value_.__l.__size_, v75.__r_.__value_.__s.__data_[0]);
      for (uint64_t i = 0; i != -64; i -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[i + 32]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[i + 40], buf[i + 32]);
      }
      __int16 v41 = v69;
      if (!v69)
      {
        uint64_t v59 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v59);
      }
      int v42 = v70;
      if (v70) {
        atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((char *)v41 + 223) < 0) {
        std::string::__init_copy_ctor_external(&v75, *((const std::string::value_type **)v41 + 25), *((void *)v41 + 26));
      }
      else {
        std::string v75 = *(std::string *)((char *)v41 + 200);
      }
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
      uint64_t v43 = *(id *)as::server::gSessionServerLog(v40);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        int v44 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
        std::string::size_type v45 = v75.__r_.__value_.__r.__words[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v67, -1, 0x20u, 0, 0, __p);
        std::string::size_type v46 = &v75;
        if (v44 < 0) {
          std::string::size_type v46 = (std::string *)v45;
        }
        if (v66 >= 0) {
          id v47 = __p;
        }
        else {
          id v47 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 355;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "cm_session_callback";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v46;
        *(_WORD *)&buf[38] = 2080;
        id v72 = v47;
        _os_log_impl(&dword_1CFE2A000, v43, OS_LOG_TYPE_INFO, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
        if (v66 < 0) {
          operator delete(__p[0]);
        }
      }

      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v68, v67[0]);
    }
  }
LABEL_58:

LABEL_59:
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }

  id v16 = v63;
  uint64_t v15 = v64;
LABEL_62:
}

void sub_1CFE35810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *as::server::gSessionServerLog(as::server *this)
{
  {
    caulk::log_category::log_category((caulk::log_category *)&as::server::gSessionServerLog(void)::sLogCat, "com.apple.coreaudio", "as_server");
  }
  return &as::server::gSessionServerLog(void)::sLogCat;
}

void sub_1CFE35A20(_Unwind_Exception *a1)
{
}

void *AudioSession::FormatSessionIDAsHex@<X0>(AudioSession *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x20uLL, "0x%x", this);
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  v16[80] = *(void ***)MEMORY[0x1E4F143B8];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  __int16 v12 = (std::__shared_weak_count *)operator new(0x28uLL);
  v12->__shared_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2687E48;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2687E80;
  v12[1].__shared_owners_ = (uint64_t)a6;
  __int16 v14 = v12 + 1;
  uint64_t v15 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v16, (uint64_t)&v14, a3, a5);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v16, a1, a2 >= 0, a4, a2 & ~(a2 >> 31), 0);
  return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v16);
}

void sub_1CFE35BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)va);
  if (*(char *)(v4 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(void ***a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(*(unsigned char *)a2)
  {
    case 0:
      id v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 1:
      uint64_t v12 = (uint64_t)**a1;
      if (!*(void *)(*(void *)(a2 + 8) + 16))
      {
        std::string::size_type v45 = *(uint64_t (**)(void))(v12 + 8);
        goto LABEL_52;
      }
      if (a3)
      {
        (*(void (**)(void))(v12 + 8))();
        unsigned int v13 = a6 + a5;
        __int16 v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v15 = (unint64_t)a1[77];
          if (v15 >= v13) {
            goto LABEL_7;
          }
        }
        else
        {
          unint64_t v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            id v16 = *(void **)(a2 + 8);
            int v17 = (void *)*v16;
            if (v16[2] == 1)
            {
              char v18 = (void *)*v16;
            }
            else
            {
              unint64_t v67 = 0;
              do
              {
                uint64_t v68 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  uint64_t v68 = (void ***)*v14;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v68, (a6 + a5));
                ((void (*)(void))***a1)();
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v17 + 7, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                char v69 = (void *)v17[1];
                if (v69)
                {
                  do
                  {
                    char v18 = v69;
                    char v69 = (void *)*v69;
                  }
                  while (v69);
                }
                else
                {
                  do
                  {
                    char v18 = (void *)v17[2];
                    BOOL v51 = *v18 == (void)v17;
                    int v17 = v18;
                  }
                  while (!v51);
                }
                ++v67;
                id v16 = *(void **)(a2 + 8);
                int v17 = v18;
              }
              while (v67 < v16[2] - 1);
            }
            unsigned int v70 = v16 + 1;
            if (v18 == v70) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            id v71 = (void *)v18[1];
            if (v71)
            {
              do
              {
                id v72 = v71;
                id v71 = (void *)*v71;
              }
              while (v71);
            }
            else
            {
              int v74 = v18;
              do
              {
                id v72 = (void *)v74[2];
                BOOL v51 = *v72 == (void)v74;
                int v74 = v72;
              }
              while (!v51);
            }
            if (v72 != v70) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            std::string v75 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              std::string v75 = (void ***)*v14;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v75, (a6 + a5));
            ((void (*)(void))***a1)();
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v18 + 7, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            char v66 = (void (*)(void))(**a1)[1];
            goto LABEL_121;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }
      (*(void (**)(void))v12)();
      uint64_t v46 = *(void *)(a2 + 8);
      id v47 = *(void **)v46;
      if (*(void *)(v46 + 16) != 1)
      {
        unint64_t v48 = 0;
        do
        {
          ((void (*)(void, uint64_t))***a1)(*a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v47 + 4, a4);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v47 + 7, 0, a4, a5, a6);
          ((void (*)(void))***a1)();
          uint64_t v49 = (void *)v47[1];
          long long v50 = v47;
          if (v49)
          {
            do
            {
              id v47 = v49;
              uint64_t v49 = (void *)*v49;
            }
            while (v49);
          }
          else
          {
            do
            {
              id v47 = (void *)v50[2];
              BOOL v51 = *v47 == (void)v50;
              long long v50 = v47;
            }
            while (!v51);
          }
          ++v48;
          uint64_t v46 = *(void *)(a2 + 8);
        }
        while (v48 < *(void *)(v46 + 16) - 1);
      }
      std::string::size_type v52 = (void *)(v46 + 8);
      if (v47 == v52) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      }
      uint64_t v53 = (void *)v47[1];
      if (v53)
      {
        do
        {
          long long v54 = v53;
          uint64_t v53 = (void *)*v53;
        }
        while (v53);
      }
      else
      {
        uint64_t v73 = v47;
        do
        {
          long long v54 = (void *)v73[2];
          BOOL v51 = *v54 == (void)v73;
          uint64_t v73 = v54;
        }
        while (!v51);
      }
      if (v54 != v52) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      }
      ((void (*)(void, uint64_t))***a1)(*a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v47 + 4, a4);
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v47 + 7, 0, a4, a5, a6);
LABEL_122:
      id v11 = (uint64_t (*)(void))***a1;
LABEL_123:
      return v11();
    case 2:
      __int16 v19 = (void (**)(void))**a1;
      if (**(void **)(a2 + 8) != *(void *)(*(void *)(a2 + 8) + 8))
      {
        if (!a3)
        {
          (*v19)();
          v55 = *(uint64_t **)(a2 + 8);
          uint64_t v57 = *v55;
          uint64_t v56 = v55[1];
          if (v57 == v56 - 16)
          {
            uint64_t v58 = v57;
          }
          else
          {
            uint64_t v58 = v57;
            do
            {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v58, 0, a4, a5, a6);
              ((void (*)(void))***a1)();
              v58 += 16;
              uint64_t v59 = *(uint64_t **)(a2 + 8);
              uint64_t v56 = v59[1];
            }
            while (v58 != v56 - 16);
            uint64_t v57 = *v59;
          }
          if (v57 == v56) {
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v58, 0, a4, a5, a6);
          goto LABEL_108;
        }
        v19[1]();
        unsigned int v20 = a6 + a5;
        __int16 v21 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v22 = (unint64_t)a1[77];
          if (v22 >= v20) {
            goto LABEL_13;
          }
        }
        else
        {
          unint64_t v22 = *((unsigned __int8 *)a1 + 631);
          if (v20 <= v22)
          {
LABEL_13:
            size_t v23 = *(uint64_t **)(a2 + 8);
            uint64_t v25 = *v23;
            uint64_t v24 = v23[1];
            if (v25 != v24 - 16)
            {
              do
              {
                unsigned int v26 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  unsigned int v26 = (void ***)*v21;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v26, (a6 + a5));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v25, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v25 += 16;
                std::string::size_type v27 = *(uint64_t **)(a2 + 8);
                uint64_t v24 = v27[1];
              }
              while (v25 != v24 - 16);
              uint64_t v25 = *v27;
            }
            if (v25 == v24) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            id v28 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              id v28 = (void ***)*v21;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v28, (a6 + a5));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(void *)(*(void *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            if (*((char *)a1 + 631) < 0) {
              __int16 v21 = (void *)*v21;
            }
            ((void (*)(void, void *, void))(**a1)[1])(*a1, v21, a6);
LABEL_108:
            id v11 = (uint64_t (*)(void))***a1;
            goto LABEL_123;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v22, 32);
        goto LABEL_13;
      }
      std::string::size_type v45 = (uint64_t (*)(void))v19[1];
LABEL_52:
      return v45();
    case 3:
      ((void (*)(void))***a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      id v11 = (uint64_t (*)(void))***a1;
      goto LABEL_123;
    case 4:
      id v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 5:
      unint64_t v29 = *(void *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>((uint64_t (****)(void))a1, v29);
    case 6:
      unint64_t v31 = *(void *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>((uint64_t (****)(void))a1, v31);
    case 7:
      double v32 = *(double *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float((char *)a1, v32);
    case 8:
      id v33 = (void (*)(void))(**a1)[1];
      if (a3)
      {
        v33();
        uint64_t v34 = (a6 + a5);
        uint64_t v35 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v36 = (unint64_t)a1[77];
          if (v36 >= v34)
          {
            id v37 = (uint64_t (***)(void))*a1;
            goto LABEL_73;
          }
        }
        else
        {
          unint64_t v36 = *((unsigned __int8 *)a1 + 631);
          if (v34 <= v36)
          {
            id v37 = (uint64_t (***)(void))*a1;
            uint64_t v38 = a1 + 76;
            goto LABEL_74;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v36, 32);
        id v37 = (uint64_t (***)(void))*a1;
        uint64_t v38 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_74:
          ((void (*)(uint64_t (***)(void), void ***, uint64_t))(*v37)[1])(v37, v38, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"bytes\": [", 10);
          uint64_t v60 = *(unsigned __int8 ***)(a2 + 8);
          id v62 = *v60;
          uint64_t v61 = v60[1];
          if (v62 != v61)
          {
            if (v62 != v61 - 1)
            {
              do
              {
                unsigned int v63 = *v62++;
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, v63);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ", ", 2);
              }
              while (v62 != (unsigned __int8 *)(*(void *)(*(void *)(a2 + 8) + 8) - 1));
            }
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *v62);
          }
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3);
          v64 = a1 + 76;
          if (*((char *)a1 + 631) < 0) {
            v64 = (void ***)*v35;
          }
          ((void (*)(void, void ***, uint64_t))(**a1)[1])(*a1, v64, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"subtype\": ", 11);
          uint64_t v65 = *(void *)(a2 + 8);
          if (*(unsigned char *)(v65 + 25)) {
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *(unsigned __int8 *)(v65 + 24));
          }
          else {
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "null", 4);
          }
          ((void (*)(void, uint64_t))***a1)(*a1, 10);
          char v66 = (void (*)(void))(**a1)[1];
LABEL_121:
          v66();
          goto LABEL_122;
        }
LABEL_73:
        uint64_t v38 = (void ***)*v35;
        goto LABEL_74;
      }
      v33();
      uint64_t v39 = *(unsigned __int8 ***)(a2 + 8);
      __int16 v41 = *v39;
      uint64_t v40 = v39[1];
      if (v41 != v40)
      {
        while (v41 != v40 - 1)
        {
          unsigned int v42 = *v41++;
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, v42);
          ((void (*)(void, uint64_t))***a1)(*a1, 44);
          uint64_t v40 = *(unsigned __int8 **)(*(void *)(a2 + 8) + 8);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *v41);
      }
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\"subtype\":", 12);
      uint64_t v43 = *(void *)(a2 + 8);
      if (*(unsigned char *)(v43 + 25))
      {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *(unsigned __int8 *)(v43 + 24));
        int v44 = (uint64_t (*)(void))***a1;
        return v44();
      }
      id v11 = (uint64_t (*)(void))(**a1)[1];
LABEL_83:
      return v11();
    case 9:
      id v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    default:
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
  }
}

void nlohmann::detail::output_string_adapter<char,std::string>::write_character(uint64_t a1, std::string::value_type a2)
{
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2, int a3)
{
  char v42 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (!v4) {
    return result;
  }
  id v7 = (void *)result;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v43[0] = 0;
  uint64_t v12 = result + 90;
  do
  {
    if (v3) {
      unsigned int v13 = (uint64_t *)*a2;
    }
    else {
      unsigned int v13 = a2;
    }
    int v14 = *((unsigned __int8 *)v13 + v8);
    uint64_t result = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(&v42, v43, v14);
    if (result == 1)
    {
      int v16 = *((_DWORD *)v7 + 158);
      if ((v16 - 1) >= 2)
      {
        if (!v16)
        {
          char v41 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v14);
          exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::to_string(&v34, v8);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("invalid UTF-8 byte at index ", &v34, &v35);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": 0x", &v35, &v36);
          if (v41 >= 0) {
            id v28 = __str;
          }
          else {
            id v28 = *(char **)__str;
          }
          if (v41 >= 0) {
            std::string::size_type v29 = v41;
          }
          else {
            std::string::size_type v29 = v40;
          }
          id v30 = std::string::append(&v36, v28, v29);
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          std::string::size_type v38 = v30->__r_.__value_.__r.__words[2];
          long long v37 = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create(316, (uint64_t)&v37, exception);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
      }
      uint64_t v17 = v9 != 0;
      if (v16 == 1)
      {
        uint64_t v18 = v12 + v10;
        if (a3)
        {
          *(_DWORD *)uint64_t v18 = 1717990748;
          *(_WORD *)(v18 + 4) = 25702;
          v10 += 6;
        }
        else
        {
          v10 += 3;
          *(_WORD *)uint64_t v18 = -16401;
          *(unsigned char *)(v18 + 2) = -67;
        }
        if ((unint64_t)(v10 - 500) <= 0xC)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
          uint64_t v10 = 0;
        }
      }
      uint64_t v9 = 0;
      v8 -= v17;
      char v42 = 0;
      uint64_t v11 = v10;
    }
    else if (result)
    {
      if ((a3 & 1) == 0)
      {
        if (*((char *)a2 + 23) >= 0) {
          __int16 v19 = a2;
        }
        else {
          __int16 v19 = (uint64_t *)*a2;
        }
        *(unsigned char *)(v12 + v11++) = *((unsigned char *)v19 + v8);
      }
      ++v9;
    }
    else
    {
      switch(v43[0])
      {
        case 8u:
          __int16 v15 = 25180;
          goto LABEL_43;
        case 9u:
          __int16 v15 = 29788;
          goto LABEL_43;
        case 0xAu:
          __int16 v15 = 28252;
          goto LABEL_43;
        case 0xBu:
          goto LABEL_29;
        case 0xCu:
          __int16 v15 = 26204;
          goto LABEL_43;
        case 0xDu:
          __int16 v15 = 29276;
          goto LABEL_43;
        default:
          if (v43[0] == 34)
          {
            __int16 v15 = 8796;
            goto LABEL_43;
          }
          if (v43[0] == 92)
          {
            __int16 v15 = 23644;
LABEL_43:
            *(_WORD *)(v12 + v11) = v15;
            v11 += 2;
            goto LABEL_44;
          }
LABEL_29:
          if (v43[0] > 0x7E) {
            int v20 = a3;
          }
          else {
            int v20 = 0;
          }
          if (v43[0] < 0x20 || v20)
          {
            uint64_t v24 = (char *)(v12 + v11);
            if (HIWORD(v43[0]))
            {
              uint64_t result = snprintf(v24, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v43[0] >> 10) - 10304), v43[0] & 0x3FF | 0xDC00);
              v11 += 12;
            }
            else
            {
              uint64_t result = snprintf(v24, 7uLL, "\\u%04x", v43[0]);
              v11 += 6;
            }
          }
          else
          {
            if (*((char *)a2 + 23) >= 0) {
              __int16 v21 = a2;
            }
            else {
              __int16 v21 = (uint64_t *)*a2;
            }
            *(unsigned char *)(v12 + v11++) = *((unsigned char *)v21 + v8);
          }
LABEL_44:
          if ((unint64_t)(v11 - 500) > 0xC)
          {
            uint64_t v9 = 0;
            uint64_t v10 = v11;
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v11);
            uint64_t v11 = 0;
            uint64_t v10 = 0;
            uint64_t v9 = 0;
          }
          break;
      }
    }
    ++v8;
    int v22 = *((char *)a2 + 23);
    unsigned int v3 = v22 >> 31;
    unint64_t v23 = a2[1];
    if (v22 >= 0) {
      unint64_t v23 = *((unsigned __int8 *)a2 + 23);
    }
  }
  while (v8 < v23);
  if (v42)
  {
    int v26 = *((_DWORD *)v7 + 158);
    switch(v26)
    {
      case 1:
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
        uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
        break;
      case 2:
        uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
        break;
      case 0:
        char v41 = 3;
        *(_DWORD *)__str = 0;
        double v32 = (uint64_t *)*a2;
        if (v22 >= 0) {
          double v32 = a2;
        }
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v32 + v23 - 1));
        id v33 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::detail::type_error::create(316, (uint64_t)&v37, v33);
      default:
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
    }
    return v25();
  }
  else if (v11)
  {
    uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
    return v25();
  }
  return result;
}

void sub_1CFE371E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v39 - 97) < 0) {
        operator delete(*(void **)(v39 - 120));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char *a1, unsigned int *a2, int a3)
{
  unsigned int v3 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[a3];
  if (*a1) {
    unsigned int v4 = a3 & 0x3F | (*a2 << 6);
  }
  else {
    unsigned int v4 = (0xFFu >> v3) & a3;
  }
  *a2 = v4;
  unint64_t v5 = 16 * *a1 + v3 + 256;
  if (v5 >= 0x190) {
    __assert_rtn("decode", "serializer.hpp", 892, "index < 400");
  }
  uint64_t v6 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v5];
  *a1 = v6;
  return v6;
}

std::string *nlohmann::detail::output_string_adapter<char,std::string>::write_characters(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  id v7 = localeconv();
  *(void *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep) {
    LOBYTE(thousands_sep) = *thousands_sep;
  }
  *(unsigned char *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  if (v7->decimal_point) {
    LOBYTE(decimal_point) = *decimal_point;
  }
  *(_OWORD *)(a1 + 90) = 0u;
  *(unsigned char *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(unsigned char *)(a1 + 602) = a3;
  uint64_t v10 = (int8x16_t *)operator new(0x208uLL);
  *(void *)(a1 + 608) = v10;
  *(void *)(a1 + 624) = 0x8000000000000208;
  int8x16_t v11 = vdupq_n_s8(a3);
  *(void *)(a1 + 616) = 512;
  int8x16_t *v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  v10[4] = v11;
  v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_1CFE374AC(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void as::server::HandleMXNotification(opaqueCMNotificationCenter *,void const*,__CFString const*,void const*,void const*)::$_0::operator()(id *a1, char a2)
{
  unsigned int v4 = as::server::GetASCallbackQueue((as::server *)a1);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZZN2as6server20HandleMXNotificationEP26opaqueCMNotificationCenterPKvPK10__CFStringS4_S4_ENK3__0clEb_block_invoke;
  block[3] = &unk_1E6875AE8;
  int v8 = *(_DWORD *)a1;
  id v6 = a1[1];
  id v7 = a1[2];
  char v9 = a2;
  dispatch_async(v4, block);
}

void AudioSession::PropertyValueToJSON(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!v3)
  {
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    goto LABEL_17;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v3 doubleValue];
    v11[0] = 7;
    uint64_t v12 = v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    unsigned int v13 = v11;
    char v14 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, (uint64_t)v11, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
LABEL_4:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    goto LABEL_17;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = v3;
    uint64_t v18 = (char *)[v5 UTF8String];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v11, &v18);
    unsigned int v13 = v11;
    char v14 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, (uint64_t)v11, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);

    goto LABEL_17;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    OS::CF::ToJSON((OS::CF *)v3, a2);
    goto LABEL_17;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    OS::CF::ToJSON((OS::CF *)v3, a2);
    goto LABEL_17;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v11, "NSData");
    unsigned int v13 = v11;
    char v14 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, (uint64_t)v11, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    goto LABEL_4;
  }
  id v6 = (objc_class *)objc_opt_class();
  id v7 = NSStringFromClass(v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[22],char [22],0>((uint64_t)v11, "Unsupported data type");
  unsigned int v13 = v11;
  char v14 = 1;
  id v8 = v7;
  uint64_t v10 = (char *)[v8 UTF8String];
  uint64_t v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v15, &v10);
  char v17 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v18, (uint64_t)v11, 2, 1, 2);
  v19[1] = (uint64_t *)&v18;
  char v20 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, (uint64_t)&v18, 1, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v19, v18);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v15[i]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v15[i + 8], v15[i]);
  }

LABEL_17:
}

void sub_1CFE378C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va1);
  for (uint64_t i = 32; i != -32; i -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(va + i));

  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    id v3 = a1 + 2;
    if ((v2 & 0x8000000000000000) != 0)
    {
      *id v3 = 45;
      unint64_t v2 = -(uint64_t)v2;
      if (v2 >= 0xA)
      {
        int v7 = 4;
        unint64_t v11 = v2;
        while (1)
        {
          if (v11 <= 0x63)
          {
            v7 -= 2;
            goto LABEL_26;
          }
          if (v11 <= 0x3E7) {
            break;
          }
          if (v11 >> 4 < 0x271) {
            goto LABEL_26;
          }
          v7 += 4;
          BOOL v10 = v11 >= 0x186A0;
          v11 /= 0x2710uLL;
          if (!v10)
          {
            v7 -= 3;
            goto LABEL_26;
          }
        }
        --v7;
      }
      else
      {
        int v7 = 1;
      }
LABEL_26:
      unsigned int v8 = v7 + 1;
    }
    else
    {
      if (v2 < 0xA)
      {
        unsigned int v4 = (char *)a1 + 17;
        goto LABEL_35;
      }
      unsigned int v8 = 4;
      unint64_t v9 = v2;
      while (1)
      {
        if (v9 <= 0x63)
        {
          v8 -= 2;
          goto LABEL_27;
        }
        if (v9 <= 0x3E7) {
          break;
        }
        if (v9 >> 4 < 0x271) {
          goto LABEL_27;
        }
        v8 += 4;
        BOOL v10 = v9 >= 0x186A0;
        v9 /= 0x2710uLL;
        if (!v10)
        {
          v8 -= 3;
          goto LABEL_27;
        }
      }
      --v8;
    }
LABEL_27:
    if (v8 >= 0x3F) {
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
    }
    unsigned int v4 = &v3[v8];
    if (v2 < 0x64)
    {
      unint64_t v12 = v2;
    }
    else
    {
      do
      {
        unint64_t v12 = v2 / 0x64;
        *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v2 % 0x64];
        v4 -= 2;
        unint64_t v13 = v2 >> 4;
        v2 /= 0x64uLL;
      }
      while (v13 > 0x270);
    }
    if (v12 >= 0xA)
    {
      *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v12];
LABEL_36:
      uint64_t v14 = (**a1)[1];
      return v14();
    }
    LOBYTE(v2) = v12;
LABEL_35:
    *(v4 - 1) = v2 + 48;
    goto LABEL_36;
  }
  id v5 = ***a1;
  return v5();
}

uint64_t as::server::TranslateCMSessionErrorCode(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v40, "error_string");
    char v41 = v40;
    char v42 = 1;
    AudioSession::GetCMSessionErrorString((AudioSession *)v4, __p);
    uint64_t v44 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v43, (uint64_t)__p);
    char v45 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)v40, 2, 1, 2);
    *(void *)&v49[2] = buf;
    v49[10] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v34, "error_code");
    std::string v35 = v34;
    char v36 = 1;
    v37[0] = 5;
    v38[0] = (int)v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v37);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v37);
    v38[1] = v37;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v51 + 2, (uint64_t)v34, 2, 1, 2);
    *(void *)long long v54 = (char *)&v51 + 2;
    v54[8] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v28, "calling_line");
    std::string::size_type v29 = v28;
    char v30 = 1;
    v31[0] = 5;
    v32[0] = a3;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    v32[1] = v31;
    char v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v55, (uint64_t)v28, 2, 1, 2);
    uint64_t v56 = v55;
    char v57 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v26, (uint64_t)buf, 3, 1, 2);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v55[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v55[i + 8], v55[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v31[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v32[j], v31[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v37[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v38[k], v37[k * 8]);
    }
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v43[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v43[m + 8], v43[m]);
    }
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v4 == -12987)
    {
      unint64_t v13 = *(id *)as::server::gSessionServerLog(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = *((char *)a2 + 23);
        __int16 v15 = (uint64_t *)*a2;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v26, -1, 0x20u, 0, 0, v40);
        if (v14 >= 0) {
          uint64_t v16 = a2;
        }
        else {
          uint64_t v16 = v15;
        }
        if (SHIBYTE(v41) >= 0) {
          char v17 = v40;
        }
        else {
          char v17 = (void **)v40[0];
        }
        *(_DWORD *)buf = 136316418;
        id v47 = "AudioSessionServerImpCommon.mm";
        __int16 v48 = 1024;
        *(_DWORD *)uint64_t v49 = 82;
        *(_WORD *)&v49[4] = 2080;
        *(void *)&v49[6] = a1;
        __int16 v50 = 2080;
        BOOL v51 = "translating CM session status";
        __int16 v52 = 2080;
        uint64_t v53 = v16;
        *(_WORD *)long long v54 = 2080;
        *(void *)&v54[2] = v17;
        _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"note\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
        if (SHIBYTE(v41) < 0) {
          operator delete(v40[0]);
        }
      }

      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
      return 1768386162;
    }
    else
    {
      __int16 v19 = *(id *)as::server::gSessionServerLog(v12);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = *((char *)a2 + 23);
        uint64_t v21 = (uint64_t *)*a2;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v26, -1, 0x20u, 0, 0, v40);
        uint64_t v22 = (uint64_t)(v20 >= 0 ? a2 : v21);
        unint64_t v23 = SHIBYTE(v41) >= 0 ? v40 : (void **)v40[0];
        *(_DWORD *)buf = 136316418;
        id v47 = "AudioSessionServerImpCommon.mm";
        __int16 v48 = 1024;
        *(_DWORD *)uint64_t v49 = 84;
        *(_WORD *)&v49[4] = 2080;
        *(void *)&v49[6] = a1;
        __int16 v50 = 2080;
        BOOL v51 = "translating CM session error";
        __int16 v52 = 2080;
        uint64_t v53 = (uint64_t *)v22;
        *(_WORD *)long long v54 = 2080;
        *(void *)&v54[2] = v23;
        _os_log_impl(&dword_1CFE2A000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
        if (SHIBYTE(v41) < 0) {
          operator delete(v40[0]);
        }
      }

      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
      if ((int)v4 <= -12990)
      {
        switch(v4)
        {
          case 0xFFFFBDA9:
            uint64_t v4 = 560030580;
            break;
          case 0xFFFFBDAA:
LABEL_38:
            uint64_t v4 = 561145203;
            break;
          case 0xFFFFBDAB:
            uint64_t v4 = 561145187;
            break;
          case 0xFFFFBDAC:
            uint64_t v4 = 561015905;
            break;
          default:
            if (v4 == -15685) {
LABEL_40:
            }
              uint64_t v4 = 561017449;
            else {
LABEL_42:
            }
              uint64_t v4 = 2003329396;
            break;
        }
      }
      else
      {
        switch(v4)
        {
          case 0xFFFFCD43:
            uint64_t v4 = 1936290409;
            break;
          case 0xFFFFCD44:
            uint64_t v4 = 1701737535;
            break;
          case 0xFFFFCD45:
          case 0xFFFFCD48:
          case 0xFFFFCD4A:
            goto LABEL_42;
          case 0xFFFFCD46:
            goto LABEL_38;
          case 0xFFFFCD47:
            uint64_t v4 = 560557684;
            break;
          case 0xFFFFCD49:
            goto LABEL_40;
          case 0xFFFFCD4B:
            uint64_t v4 = 4294967246;
            break;
          default:
            if (v4) {
              goto LABEL_42;
            }
            break;
        }
      }
    }
  }
  return v4;
}

void sub_1CFE3816C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a16);
  _Unwind_Resume(a1);
}

void anonymous namespace'::HandleInterruptionWithIDNotification(_anonymous_namespace_ *this, int a2)
{
  int v3 = (int)this;
  uint64_t v4 = as::server::GetASCallbackQueue(this);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN12_GLOBAL__N_136HandleInterruptionWithIDNotificationEjj_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  int v6 = v3;
  int v7 = a2;
  dispatch_async(v4, block);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    if (a2 >= 0xA)
    {
      unsigned int v6 = 4;
      unint64_t v7 = a2;
      while (1)
      {
        if (v7 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_15;
        }
        if (v7 <= 0x3E7) {
          break;
        }
        if (v7 >> 4 < 0x271) {
          goto LABEL_15;
        }
        unint64_t v8 = v7 >> 5;
        v7 /= 0x2710uLL;
        v6 += 4;
        if (v8 <= 0xC34)
        {
          v6 -= 3;
          goto LABEL_15;
        }
      }
      --v6;
LABEL_15:
      if (v6 >= 0x3F) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
      }
      uint64_t v3 = (uint64_t)a1 + v6 + 16;
      if (a2 < 0x64)
      {
        unint64_t v9 = a2;
      }
      else
      {
        do
        {
          unint64_t v9 = v2 / 0x64;
          *(_WORD *)(v3 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * (v2 % 0x64)];
          v3 -= 2;
          unint64_t v10 = v2 >> 4;
          v2 /= 0x64uLL;
        }
        while (v10 > 0x270);
      }
      if (v9 >= 0xA)
      {
        *(_WORD *)(v3 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * v9];
LABEL_24:
        unint64_t v11 = (**a1)[1];
        return v11();
      }
      LOBYTE(v2) = v9;
    }
    else
    {
      uint64_t v3 = (uint64_t)a1 + 17;
    }
    *(unsigned char *)(v3 - 1) = v2 + 48;
    goto LABEL_24;
  }
  uint64_t v4 = ***a1;
  return v4();
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[22],char [22],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[22]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[22]>(char *a1)
{
  unint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE38574(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryS8_EEEU13block_pointerFvDpT_ESC_iEUlS4_S7_S7_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = MEMORY[0x1D25E1DE0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = MEMORY[0x1D25E1DE0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryS8_EEEU13block_pointerFvDpT_ESC_iEUlS4_S7_S7_E_(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v3 = *(void **)(a1 + 32);
}

void __destroy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v3 = *(void **)(a1 + 32);
}

void sub_1CFE387E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP32AVAudioSessionSpatialPreferencesEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},AVAudioSessionSpatialPreferences * {__strong}>(void({block_pointer})(NSError * {__strong},AVAudioSessionSpatialPreferences * {__strong}),int)::{lambda(NSError *,AVAudioSessionSpatialPreferences *)#1}::operator()(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v7 = a2;
  unsigned int v6 = applesauce::dispatch::v1::queue::operator*((id *)a1);
  dispatch_source_cancel(v6);

  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_1CFE388BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},AVAudioSessionSpatialPreferences * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    id v5 = (void *)MEMORY[0x1D25E1DE0](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP32AVAudioSessionSpatialPreferencesEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c168_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP32AVAudioSessionSpatialPreferencesEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e54_v24__0__NSError_8__AVAudioSessionSpatialPreferences_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    unint64_t v9 = (void *)MEMORY[0x1D25E1DE0](v4);
    id v11 = v8;
    id v12 = (id)MEMORY[0x1D25E1DE0](v9);
    id v5 = (void *)MEMORY[0x1D25E1DE0](v10);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_1CFE38A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id as::server::getMXPropertiesInLegacyOrder(void *a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1)
  {
    unint64_t v2 = *(id *)as::server::gSessionServerLog(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v51 = "AudioSessionServerImp.mm";
      __int16 v52 = 1024;
      int v53 = 280;
      _os_log_impl(&dword_1CFE2A000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d propertiesToSet is nil", buf, 0x12u);
    }
  }
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (v3)
  {
    uint64_t v4 = (void *)[v1 mutableCopy];
    id v5 = (id)*MEMORY[0x1E4F75EC8];
    id v29 = (id)*MEMORY[0x1E4F75F00];
    id v30 = (id)*MEMORY[0x1E4F75F90];
    id v31 = (id)*MEMORY[0x1E4F75F80];
    id v32 = (id)*MEMORY[0x1E4F765C0];
    id v28 = v5;
    uint64_t v6 = [v4 valueForKey:v5];
    id v7 = (void *)v6;
    if (v6)
    {
      id v48 = v5;
      uint64_t v49 = v6;
      unint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v49 forKeys:&v48 count:1];
      [v3 addObject:v8];

      [v4 removeObjectForKey:v28];
    }

    uint64_t v9 = [v4 valueForKey:v29];
    unint64_t v10 = (void *)v9;
    if (v9)
    {
      id v46 = v29;
      uint64_t v47 = v9;
      id v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v47 forKeys:&v46 count:1];
      [v3 addObject:v11];

      [v4 removeObjectForKey:v29];
    }

    uint64_t v12 = [v4 valueForKey:v30];
    unint64_t v13 = (void *)v12;
    if (v12)
    {
      id v44 = v30;
      uint64_t v45 = v12;
      int v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v45 forKeys:&v44 count:1];
      [v3 addObject:v14];

      [v4 removeObjectForKey:v30];
    }

    uint64_t v15 = [v4 valueForKey:v31];
    uint64_t v16 = (void *)v15;
    if (v15)
    {
      id v42 = v31;
      uint64_t v43 = v15;
      char v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v43 forKeys:&v42 count:1];
      [v3 addObject:v17];

      [v4 removeObjectForKey:v31];
    }

    uint64_t v18 = [v4 valueForKey:v32];
    __int16 v19 = (void *)v18;
    if (v18)
    {
      id v40 = v32;
      uint64_t v41 = v18;
      int v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v41 forKeys:&v40 count:1];
      [v3 addObject:v20];

      [v4 removeObjectForKey:v32];
    }

    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v21 = v4;
    uint64_t v22 = [v21 countByEnumeratingWithState:&v33 objects:v39 count:16];
    if (v22)
    {
      uint64_t v23 = *(void *)v34;
      do
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          if (*(void *)v34 != v23) {
            objc_enumerationMutation(v21);
          }
          uint64_t v37 = *(void *)(*((void *)&v33 + 1) + 8 * i);
          char v25 = objc_msgSend(v21, "objectForKeyedSubscript:");
          int v38 = v25;
          int v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v38 forKeys:&v37 count:1];
          [v3 addObject:v26];
        }
        uint64_t v22 = [v21 countByEnumeratingWithState:&v33 objects:v39 count:16];
      }
      while (v22);
    }
  }
  return v3;
}

void sub_1CFE38E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *as::AudioAppState::AudioAppState(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  *a1 = [v5 mutableCopy];
  a1[1] = [v6 mutableCopy];
  a1[2] = objc_opt_new();
  a1[3] = objc_opt_new();

  return a1;
}

void sub_1CFE38FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE39180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1CFE39530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  objc_destroyWeak(v32);

  as::server::ProcessInfo::~ProcessInfo(&__p);
  _Unwind_Resume(a1);
}

void as::CreateFixedPriorityDispatchQueue(const void **a1@<X0>, dispatch_qos_class_t a2@<W2>, id *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 5);
  if (v17 >= 0) {
    id v7 = __p;
  }
  else {
    id v7 = (void **)__p[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v8 = a1;
    }
    else {
      unint64_t v8 = *a1;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, " (WL)");
  if (v17 >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  inactive = dispatch_workloop_create_inactive((const char *)v9);
  dispatch_workloop_set_scheduler_priority();
  dispatch_activate(inactive);
  id v11 = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v12 = dispatch_queue_attr_make_with_autorelease_frequency(v11, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);

  if (*((char *)a1 + 23) >= 0) {
    unint64_t v13 = (const char *)a1;
  }
  else {
    unint64_t v13 = (const char *)*a1;
  }
  *a3 = dispatch_queue_create_with_target_V2(v13, v12, inactive);
  int v14 = applesauce::dispatch::v1::queue::operator*(a3);
  dispatch_set_qos_class_floor(v14, a2, 0);

  uint64_t v15 = applesauce::dispatch::v1::queue::operator*(a3);
  dispatch_activate(v15);

  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1CFE39790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  applesauce::dispatch::v1::queue::~queue(v14);

  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_1CFE39B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  objc_destroyWeak(&location);
  objc_destroyWeak(&a12);

  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1CFE39CC8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);

  _Unwind_Resume(a1);
}

void sub_1CFE39E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryS8_EEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSDictionary * {__strong},NSDictionary * {__strong}>(void({block_pointer})(NSError * {__strong},NSDictionary * {__strong},NSDictionary * {__strong}),int)::{lambda(NSError *,NSDictionary *,NSDictionary *)#1}::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v10 = a2;
  uint64_t v9 = applesauce::dispatch::v1::queue::operator*((id *)a1);
  dispatch_source_cancel(v9);

  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_1CFE39F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void as::server::forbid_acq::GetPropertiesFromMXSession(unsigned int a1@<W0>, const audit_token_t *a2@<X1>, void *a3@<X2>, id *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v40 = a3;
  unsigned int v41 = a1;
  id v8 = (as::server *)as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v51, a1, a2, 1);
  uint64_t v9 = v51;
  if (!v51)
  {
    id v11 = *(id *)as::server::gSessionServerLog(v8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImpCommon.mm";
      __int16 v54 = 1024;
      *(_DWORD *)v55 = 279;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = a1;
      _os_log_impl(&dword_1CFE2A000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
    }
    int v12 = 561210739;
    goto LABEL_13;
  }
  if (!v40)
  {
    unint64_t v13 = *(id *)as::server::gSessionServerLog(v8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImpCommon.mm";
      __int16 v54 = 1024;
      *(_DWORD *)v55 = 284;
      _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Invalid propertiesToGet", buf, 0x12u);
    }
    int v12 = -50;
LABEL_13:
    *(_DWORD *)a5 = v12;
    *(void *)(a5 + 8) = 0;
    goto LABEL_53;
  }
  id v10 = v52;
  if (v52) {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v9 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)v9 + 25), *((void *)v9 + 26));
  }
  else {
    std::string v50 = *(std::string *)((char *)v9 + 200);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  int v14 = v51;
  if (!v51)
  {
    uint64_t v36 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v36);
  }
  uint64_t v15 = v52;
  if (v52) {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v14, buf);
  char v17 = *(void **)buf;
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v17)
  {
    strcpy(v63, "get_properties_pipe");
    id v37 = v17;
    int v38 = (void *)[v37 copyProperties:v40 outPropertyErrors:a4];
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v18 = *a4;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v46 objects:v62 count:16];
    if (v19)
    {
      uint64_t v20 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v47 != v20) {
            objc_enumerationMutation(v18);
          }
          uint64_t v22 = *(void *)(*((void *)&v46 + 1) + 8 * i);
          uint64_t v23 = [*a4 objectForKey:v22];
          int v24 = [v23 intValue];

          if (v24)
          {
            int v26 = *(id *)as::server::gSessionServerLog(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "AudioSessionServerImpCommon.mm";
              __int16 v54 = 1024;
              *(_DWORD *)v55 = 335;
              *(_WORD *)&v55[4] = 1024;
              *(_DWORD *)&v55[6] = v41;
              *(_WORD *)&v55[10] = 2112;
              *(void *)&v55[12] = v22;
              *(_WORD *)&v55[20] = 1024;
              *(_DWORD *)&v55[22] = v24;
              _os_log_impl(&dword_1CFE2A000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d Session 0x%x failed to get property %@ with an error: %d", buf, 0x28u);
            }
          }
        }
        uint64_t v19 = [v18 countByEnumeratingWithState:&v46 objects:v62 count:16];
      }
      while (v19);
    }

    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)buf, "properties");
    *(void *)&v55[2] = buf;
    v55[10] = 1;
    AudioSession::PropertyValueToJSON(v38, (uint64_t)v42);
    v55[18] = v42[0];
    v56[0] = v43;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
    v42[0] = 0;
    uint64_t v43 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v55[18]);
    v56[1] = &v55[18];
    char v57 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&__p, (uint64_t)buf, 2, 1, 2);
    p_p = &__p;
    char v61 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v44, (uint64_t)&__p, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v59, __p);
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v55[j * 8 + 18]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v56[j], v55[j * 8 + 18]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v43, v42[0]);
    id v29 = *(id *)as::server::gSessionServerLog(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      int v30 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
      std::string::size_type v31 = v50.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v44, -1, 0x20u, 0, 0, &__p);
      id v32 = &v50;
      if (v30 < 0) {
        id v32 = (std::string *)v31;
      }
      if (SHIBYTE(p_p) >= 0) {
        long long v33 = &__p;
      }
      else {
        long long v33 = __p;
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImpCommon.mm";
      __int16 v54 = 1024;
      *(_DWORD *)v55 = 340;
      *(_WORD *)&v55[4] = 2080;
      *(void *)&v55[6] = v63;
      *(_WORD *)&v55[14] = 2080;
      *(void *)&unsigned char v55[16] = v32;
      *(_WORD *)&v55[24] = 2080;
      v56[0] = v33;
      _os_log_impl(&dword_1CFE2A000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (SHIBYTE(p_p) < 0) {
        operator delete(__p);
      }
    }

    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = v38;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v44);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v45, v44[0]);
  }
  else
  {
    long long v34 = *(id *)as::server::gSessionServerLog(DefaultSubsessionRef);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      long long v35 = &v50;
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v35 = (std::string *)v50.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImpCommon.mm";
      __int16 v54 = 1024;
      *(_DWORD *)v55 = 291;
      *(_WORD *)&v55[4] = 2080;
      *(void *)&v55[6] = v35;
      _os_log_impl(&dword_1CFE2A000, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get MXSessionRef for session: %s", buf, 0x1Cu);
    }
    *(_DWORD *)a5 = 2003329396;
    *(void *)(a5 + 8) = 0;
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
LABEL_53:
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
}

void sub_1CFE3A5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a19);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }

  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[11]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[11]>(char *a1)
{
  unint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE3A790(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE3A97C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1CFE3AC88(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongPU25objcproto14NSSecureCoding11objc_objectjEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},objc_object  {objcproto14NSSecureCoding}* {__strong},unsigned int>(void ()(NSError * {__strong},objc_object  {objcproto14NSSecureCoding}* {__strong},unsigned int),int)::{lambda(NSError *,objc_object  {objcproto14NSSecureCoding},unsigned int)#1}::operator()(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v7 = a2;
  size_t v6 = applesauce::dispatch::v1::queue::operator*((id *)a1);
  dispatch_source_cancel(v6);

  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_1CFE3ADB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE3B6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  __cxa_guard_abort(&_ZGVZZ101__AVAudioSessionRemoteXPCClient_setProperties_values_MXProperties_batchStrategy_genericMXPipe_reply__EUb_E16allowSessionMute);

  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a40);
  _Unwind_Resume(a1);
}

void sub_1CFE3BA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);

  _Unwind_Resume(a1);
}

void as::ScopedTrace::~ScopedTrace(as::ScopedTrace *this)
{
  if (*(unsigned char *)this) {
    kdebug_trace();
  }
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSArray * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    id v5 = (void *)MEMORY[0x1D25E1DE0](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e29_v24__0__NSError_8__NSArray_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = (void *)MEMORY[0x1D25E1DE0](v4);
    id v11 = v8;
    id v12 = (id)MEMORY[0x1D25E1DE0](v9);
    id v5 = (void *)MEMORY[0x1D25E1DE0](v10);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_1CFE3BC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
}

id as::server::GetASCallbackQueue(as::server *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.coreaudio.ASCallbackQueue");
    as::CreateFixedPriorityDispatchQueue((const void **)__p, QOS_CLASS_USER_INTERACTIVE, &as::server::GetASCallbackQueue(void)::callbackQueue);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  id v1 = applesauce::dispatch::v1::queue::operator*(&as::server::GetASCallbackQueue(void)::callbackQueue);
  return v1;
}

void sub_1CFE3BCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSArray * {__strong}>(void({block_pointer})(NSError * {__strong},NSArray * {__strong}),int)::{lambda(NSError *,NSArray *)#1}::operator()(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v7 = a2;
  id v6 = applesauce::dispatch::v1::queue::operator*((id *)a1);
  dispatch_source_cancel(v6);

  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_1CFE3BDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id applesauce::dispatch::v1::queue::operator*(id *a1)
{
  return *a1;
}

void as::server::AudioSessionInfo::GetDeferredMessages(as::server::AudioSessionInfo *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2 = (uint64_t *)this;
  char v4 = (std::mutex *)((char *)this + 568);
  std::mutex::lock((std::mutex *)((char *)this + 568));
  v2 += 68;
  std::list<NSDictionary * {__strong}>::list(a2, (uint64_t)v2);
  std::__list_imp<NSDictionary * {__strong}>::clear(v2);
  std::mutex::unlock(v4);
}

void sub_1CFE3BE30(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__list_imp<NSDictionary * {__strong}>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    id v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        id v5 = (uint64_t *)v3[1];

        operator delete(v3);
        id v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t *std::list<NSDictionary * {__strong}>::list(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = a2; ; std::list<NSDictionary * {__strong}>::push_back(a1, (id *)(i + 16)))
  {
    uint64_t i = *(void *)(i + 8);
    if (i == a2) {
      break;
    }
  }
  return a1;
}

void sub_1CFE3BF0C(_Unwind_Exception *a1)
{
  std::__list_imp<NSDictionary * {__strong}>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c176_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjU8__strongPU24objcproto13OS_xpc_object8NSObjectjjEEEU13block_pointerFvDpT_ESD_iEUlS4_jS8_jjE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = MEMORY[0x1D25E1DE0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1CFE3C0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  uint64_t v19 = v17;

  _Unwind_Resume(a1);
}

void sub_1CFE3C230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},objc_object  {objcproto14NSSecureCoding}* {__strong},unsigned int>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    id v5 = (void *)MEMORY[0x1D25E1DE0](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongPU25objcproto14NSSecureCoding11objc_objectjEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c177_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongPU25objcproto14NSSecureCoding11objc_objectjEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_jE__e41_v28__0__NSError_8___NSSecureCoding__16I24l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = (void *)MEMORY[0x1D25E1DE0](v4);
    id v11 = v8;
    id v12 = (id)MEMORY[0x1D25E1DE0](v9);
    id v5 = (void *)MEMORY[0x1D25E1DE0](v10);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_1CFE3C390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c176_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjU8__strongPU24objcproto13OS_xpc_object8NSObjectjjEEEU13block_pointerFvDpT_ESD_iEUlS4_jS8_jjE_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = *(void **)(a1 + 32);
}

void sub_1CFE3C574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  uint64_t v19 = v17;

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSDictionary * {__strong},NSDictionary * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    id v5 = (void *)MEMORY[0x1D25E1DE0](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryS8_EEEU13block_pointerFvDpT_ESC_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryS8_EEEU13block_pointerFvDpT_ESC_iEUlS4_S7_S7_E__e51_v32__0__NSError_8__NSDictionary_16__NSDictionary_24l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = (void *)MEMORY[0x1D25E1DE0](v4);
    id v11 = v8;
    id v12 = (id)MEMORY[0x1D25E1DE0](v9);
    id v5 = (void *)MEMORY[0x1D25E1DE0](v10);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_1CFE3C6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float(char *a1, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8);
    id v6 = "null";
    uint64_t v3 = 4;
  }
  else
  {
    uint64_t v3 = nlohmann::detail::to_chars<double>(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16);
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8);
    uint64_t v5 = *(void *)a1;
    id v6 = a1 + 16;
  }
  return v4(v5, v6, v3);
}

char *nlohmann::detail::to_chars<double>(char *a1, uint64_t a2, double a3)
{
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::to_chars<double>();
  }
  uint64_t v3 = a1;
  if ((*(void *)&a3 & 0x8000000000000000) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    uint64_t v3 = a1 + 1;
  }
  if (a3 == 0.0)
  {
    *(_WORD *)uint64_t v3 = 11824;
    uint64_t result = v3 + 3;
    v3[2] = 48;
  }
  else
  {
    unint64_t v5 = a2 - (void)v3;
    if (a2 - (uint64_t)v3 <= 16) {
      nlohmann::detail::to_chars<double>();
    }
    id v6 = 0;
    nlohmann::detail::dtoa_impl::grisu2<double>((uint64_t)v3, (unsigned int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18) {
      nlohmann::detail::to_chars<double>();
    }
    if (v5 <= 0x15) {
      nlohmann::detail::to_chars<double>();
    }
    if (v5 == 22) {
      nlohmann::detail::to_chars<double>();
    }
    return nlohmann::detail::dtoa_impl::format_buffer((nlohmann::detail::dtoa_impl *)v3, (char *)HIDWORD(v6), (int)v6, -4, 15);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2<double>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4)
{
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::dtoa_impl::grisu2<double>();
  }
  if (a4 <= 0.0) {
    nlohmann::detail::dtoa_impl::grisu2<double>();
  }
  nlohmann::detail::dtoa_impl::compute_boundaries<double>((uint64_t)v9, a4);
  return nlohmann::detail::dtoa_impl::grisu2(a1, a2, a3, v9[2], v9[3], v9[0], v9[1], v7, v9[4], (nlohmann::detail::dtoa_impl *)v9[5]);
}

uint64_t nlohmann::detail::dtoa_impl::grisu2(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, nlohmann::detail::dtoa_impl *a10)
{
  v31[0] = a4;
  v31[1] = a5;
  v30[0] = a6;
  v30[1] = a7;
  v29[0] = a9;
  v29[1] = a10;
  if (a10 != a5) {
    nlohmann::detail::dtoa_impl::grisu2();
  }
  if (a10 != a7) {
    nlohmann::detail::dtoa_impl::grisu2();
  }
  uint64_t cached_power_for_binary_exponent = nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(a10);
  int v15 = v14;
  uint64_t v27 = cached_power_for_binary_exponent;
  int v28 = v16;
  unint64_t v17 = nlohmann::detail::dtoa_impl::diyfp::mul(v30, &v27);
  uint64_t v19 = v18;
  unint64_t v20 = nlohmann::detail::dtoa_impl::diyfp::mul(v31, &v27);
  unsigned int v22 = v21;
  unint64_t v23 = nlohmann::detail::dtoa_impl::diyfp::mul(v29, &v27);
  *a3 = -v15;
  return nlohmann::detail::dtoa_impl::grisu2_digit_gen(a1, a2, a3, v20 + 1, v22, v17, v19, v25, v23 - 1, v24);
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(void *a1, void *a2)
{
  uint64_t v2 = HIDWORD(*a1);
  uint64_t v3 = HIDWORD(*a2);
  unint64_t v4 = v3 * (unint64_t)*a1;
  unint64_t v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(nlohmann::detail::dtoa_impl *this)
{
  if ((int)this <= -1501) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  if ((int)this >= 1501) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  int v1 = 78913 * (-61 - (int)this) / 0x40000;
  if ((int)this < -61) {
    ++v1;
  }
  if (v1 <= -315) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  unsigned int v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  uint64_t v3 = (void *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                + 16 * (unsigned __int16)v2);
  int v4 = v3[1] + this;
  if (v4 <= -125) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  if (v4 >= -95) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  return *v3;
}

uint64_t nlohmann::detail::dtoa_impl::compute_boundaries<double>@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  }
  if (a2 <= 0.0) {
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  }
  uint64_t v4 = *(void *)&a2 >> 52;
  uint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  uint64_t v6 = 2 * v5;
  uint64_t v7 = *(void *)&a2 >> 53;
  uint64_t v8 = 4 * v5;
  int v9 = (*(void *)&a2 >> 52) - 1077;
  uint64_t v10 = 0x10000000000000;
  if ((*(void *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v8 = 2 * v5;
    int v9 = (*(void *)&a2 >> 52) - 1076;
    uint64_t v10 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  BOOL v11 = v7 == 0;
  if (v7) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = 2 * v5;
  }
  if (v11) {
    int v9 = (*(void *)&a2 >> 52) - 1076;
  }
  else {
    uint64_t v5 = v10;
  }
  uint64_t v3 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v4)
  {
    unint64_t v13 = (*(void *)&a2 >> 52) - 1076;
  }
  else
  {
    uint64_t v12 = 2 * v3;
    int v9 = -1075;
    unint64_t v13 = 4294966221;
  }
  if (v4)
  {
    unint64_t v14 = (*(void *)&a2 >> 52) - 1075;
  }
  else
  {
    uint64_t v6 = 2 * v3;
    unint64_t v14 = 4294966222;
  }
  if (v4) {
    uint64_t v15 = v5;
  }
  else {
    uint64_t v15 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  }
  uint64_t v24 = v12 - 1;
  int v25 = v9;
  uint64_t v16 = nlohmann::detail::dtoa_impl::diyfp::normalize(v6 | 1, v13);
  int v18 = v17;
  unint64_t v19 = nlohmann::detail::dtoa_impl::diyfp::normalize_to(&v24, v17);
  int v21 = v20;
  uint64_t result = nlohmann::detail::dtoa_impl::diyfp::normalize(v15, v14);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v23;
  *(void *)(a1 + 16) = v19;
  *(_DWORD *)(a1 + 24) = v21;
  *(void *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 40) = v18;
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result) {
    __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
  }
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::normalize_to(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0)
  {
    uint64_t v5 = "delta >= 0";
    int v6 = 162;
    goto LABEL_6;
  }
  uint64_t v3 = *a1;
  unint64_t result = *a1 << v2;
  if (result >> v2 != v3)
  {
    uint64_t v5 = "((x.f << delta) >> delta) == x.f";
    int v6 = 163;
LABEL_6:
    __assert_rtn("normalize_to", "to_chars.hpp", v6, v5);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_digit_gen(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  unint64_t v44 = a9;
  uint64_t v45 = a10;
  if ((int)a10 <= -61) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  if ((int)a10 >= -31) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  unint64_t v13 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v47);
  uint64_t v14 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v46);
  int v15 = -(int)v45;
  unint64_t v16 = v44 >> -(char)v45;
  if (!v16) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  unint64_t v17 = v14;
  unint64_t v18 = 1 << v15;
  uint64_t v19 = (1 << v15) - 1;
  unint64_t v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          unsigned int v23 = v16 >> 5;
          unsigned int v24 = v16 >> 4;
          if (v16 <= 9) {
            int v25 = 1;
          }
          else {
            int v25 = 10;
          }
          if (v16 <= 9) {
            int v26 = 1;
          }
          else {
            int v26 = 2;
          }
          if (v16 <= 0x63) {
            int v27 = v26;
          }
          else {
            int v27 = 3;
          }
          if (v16 <= 0x63) {
            int v28 = v25;
          }
          else {
            int v28 = 100;
          }
          if (v16 <= 0x3E7) {
            int v29 = v27;
          }
          else {
            int v29 = 4;
          }
          if (v16 <= 0x3E7) {
            int v30 = v28;
          }
          else {
            int v30 = 1000;
          }
          if (v24 <= 0x270) {
            int v31 = v29;
          }
          else {
            int v31 = 5;
          }
          if (v24 <= 0x270) {
            int v32 = v30;
          }
          else {
            int v32 = 10000;
          }
          if (v23 <= 0xC34) {
            int v22 = v31;
          }
          else {
            int v22 = 6;
          }
          if (v23 > 0xC34) {
            unsigned int v21 = 100000;
          }
          else {
            unsigned int v21 = v32;
          }
        }
        else
        {
          unsigned int v21 = 1000000;
          int v22 = 7;
        }
      }
      else
      {
        unsigned int v21 = 10000000;
        int v22 = 8;
      }
    }
    else
    {
      unsigned int v21 = 100000000;
      int v22 = 9;
    }
  }
  else
  {
    unsigned int v21 = 1000000000;
    int v22 = 10;
  }
  unsigned int v33 = v22 + 1;
  do
  {
    unsigned int v34 = v16 / v21;
    if (v16 / v21 >= 0xA) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    unint64_t v16 = v16 % v21;
    uint64_t v35 = (int)*a2;
    *a2 = v35 + 1;
    *(unsigned char *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      unint64_t v18 = (unint64_t)v21 << v15;
      id v40 = (char *)*a2;
      uint64_t v41 = a1;
      unint64_t v42 = v13;
      v20 += v16 << v15;
      return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
    }
    v21 /= 0xAu;
    --v33;
  }
  while (v33 > 1);
  if (v20 <= v13) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  int v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    unint64_t v37 = (10 * v20) >> v15;
    if (v37 >= 0xA) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    uint64_t v38 = (int)*a2;
    *a2 = v38 + 1;
    *(unsigned char *)(a1 + v38) = v37 + 48;
    uint64_t v39 = 5 * v13;
    unint64_t v20 = (10 * v20) & v19;
    v13 *= 10;
    v17 *= 10;
    --v36;
  }
  while (v20 > 2 * v39);
  *a3 += v36;
  id v40 = (char *)*a2;
  uint64_t v41 = a1;
  unint64_t v42 = v13;
  return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::sub(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    uint64_t v4 = "x.e == y.e";
    int v5 = 66;
LABEL_6:
    __assert_rtn("sub", "to_chars.hpp", v5, v4);
  }
  BOOL v2 = *(void *)a1 >= *(void *)a2;
  uint64_t result = *(void *)a1 - *(void *)a2;
  if (!v2)
  {
    uint64_t v4 = "x.f >= y.f";
    int v5 = 67;
    goto LABEL_6;
  }
  return result;
}

char *nlohmann::detail::dtoa_impl::format_buffer(nlohmann::detail::dtoa_impl *this, char *a2, int a3, int a4, int a5)
{
  if ((a4 & 0x80000000) == 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  if (a5 <= 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  int v5 = (int)a2;
  uint64_t v7 = a3 + (uint64_t)(int)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset((char *)this + (int)a2, 48, a3);
    *((unsigned char *)this + v7) = 46;
    uint64_t result = (char *)this + v7 + 2;
    *((unsigned char *)this + (int)v7 + 1) = 48;
    return result;
  }
  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      size_t v10 = -(int)v7;
      memmove((char *)this + v10 + 2, this, (int)a2);
      *(_WORD *)this = 11824;
      memset((char *)this + 2, 48, v10);
      return (char *)this + v10 + v5 + 2;
    }
    if (a2 == 1)
    {
      uint64_t v11 = 1;
    }
    else
    {
      memmove((char *)this + 2, (char *)this + 1, (int)a2 - 1);
      *((unsigned char *)this + 1) = 46;
      uint64_t v11 = v5 + 1;
    }
    uint64_t v12 = (char *)this + v11;
    char *v12 = 101;
    if ((int)v7 <= -999) {
      nlohmann::detail::dtoa_impl::format_buffer();
    }
    if ((int)v7 >= 1001) {
      nlohmann::detail::dtoa_impl::format_buffer();
    }
    if ((int)v7 >= 1) {
      char v13 = 43;
    }
    else {
      char v13 = 45;
    }
    if ((int)v7 - 1 >= 0) {
      unsigned int v14 = v7 - 1;
    }
    else {
      unsigned int v14 = 1 - v7;
    }
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        unsigned __int8 v17 = (unsigned __int16)v14 % 0x64u;
        v12[3] = (v17 / 0xAu) | 0x30;
        v12[4] = (v17 % 0xAu) | 0x30;
        uint64_t v16 = 2;
        return &v12[v16 + 3];
      }
      v12[2] = v14 / 0xAu + 48;
      char v15 = (v14 % 0xAu) | 0x30;
    }
    else
    {
      v12[2] = 48;
      char v15 = v14 + 48;
    }
    v12[3] = v15;
    uint64_t v16 = 1;
    return &v12[v16 + 3];
  }
  if ((a3 & 0x80000000) == 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  int v9 = (char *)this + v7;
  memmove(v9 + 1, v9, (int)a2 - (unint64_t)v7);
  unsigned char *v9 = 46;
  return (char *)this + v5 + 1;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((int)a2 <= 0) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a3 > a4) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a4 < a5) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (!a6) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a5 < a3 && a4 - a5 >= a6)
  {
    uint64_t v6 = (a2 - 1);
    uint64_t v7 = -(uint64_t)a5;
    unint64_t v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3) {
        break;
      }
      int v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48) {
        nlohmann::detail::dtoa_impl::grisu2_round();
      }
      *(unsigned char *)(this + v6) = v9 - 1;
      if (v8 >= a3) {
        break;
      }
      unint64_t v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

void ___ZN2as6server17DeviceLatencyPoll8dispatchENSt3__18weak_ptrINS1_4ImplEEENS1_9ELoopModeE_block_invoke(uint64_t a1)
{
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = *(AudioObjectID **)(a1 + 32);
      if (v5)
      {
        as::server::DeviceLatencyPoll::Impl::process(v5);
        if (atomic_load(v5 + 10))
        {
          v7[0] = v5;
          v7[1] = v4;
          atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          as::server::DeviceLatencyPoll::dispatch(v7);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1CFE3D36C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void as::server::DeviceLatencyPoll::Impl::process(AudioObjectID *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  as::server::DeviceLatencyPoll::Impl::getLatency(this);
  if (v3)
  {
    std::function<void ()(unsigned long long)>::operator()((uint64_t)(this + 2), llround(v2));
    mach_absolute_time();
    *((void *)this + 6) = __udivti3();
    unsigned int v4 = 1;
  }
  else
  {
    mach_absolute_time();
    int v5 = (as::server *)__udivti3();
    if ((unint64_t)v5 - *((void *)this + 6) < 0x3B9ACA01)
    {
      unsigned int v4 = 2;
    }
    else
    {
      uint64_t v6 = *(id *)as::server::gSessionServerLog(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v7 = 136315394;
        unint64_t v8 = "DeviceLatencyPoll.mm";
        __int16 v9 = 1024;
        int v10 = 68;
        _os_log_impl(&dword_1CFE2A000, v6, OS_LOG_TYPE_INFO, "%25s:%-5d warning - over one second since last successful device latency read, stopping", (uint8_t *)&v7, 0x12u);
      }
      unsigned int v4 = 0;
    }
  }
  atomic_store(v4, this + 10);
}

double as::server::DeviceLatencyPoll::Impl::getLatency(AudioObjectID *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"tptbbolg";
  inAddress.mElement = 0;
  UInt32 ioDataSize = 40;
  if (!AudioObjectGetPropertyData(*this, &inAddress, 0, 0, &ioDataSize, outData))
  {
    if (v7 <= v6)
    {
      return v6 - v7;
    }
    else
    {
      double v2 = *(id *)as::server::gSessionServerLog(0);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        __int16 v9 = "DeviceLatencyPoll.mm";
        __int16 v10 = 1024;
        int v11 = 52;
        __int16 v12 = 2048;
        double v13 = v6;
        __int16 v14 = 2048;
        double v15 = v7;
        _os_log_impl(&dword_1CFE2A000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d sample time (%.2f) is unexpectedly greater than presentation time (%.2f), ignoring value", buf, 0x26u);
      }
    }
  }
  return result;
}

void sub_1CFE3DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a28);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindSourceSessionForSibling(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v9 = a4;
  if (a3 == -1)
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_OWORD *)&buf[16] = v10;
    buf[32] = 1;
    *(_OWORD *)atoken.val = *(_OWORD *)buf;
    *(_OWORD *)&atoken.val[4] = v10;
    pid_t v27 = audit_token_to_pid(&atoken);
    as::server::LegacySessionManager::FindOrCreatePrimarySession((uint64_t)a1, (uint64_t)buf, 0, v9, 1, (uint64_t)&v22);
    a3 = v22 ? *(_DWORD *)(v22 + 8) : -1;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
  as::server::LegacySessionManager::FindSessionAndVerifyOwnership(a1, (const audit_token_t *)a2, a3, 1, &atoken);
  uint64_t v12 = *(void *)atoken.val;
  if (*(void *)atoken.val)
  {
    double v13 = *(id *)as::server::gSessionServerLog(v11);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 152;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a3;
      _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Found source session with ID 0x%x. Proceeding to create sibling session.", buf, 0x18u);
    }
    uint64_t v14 = *(void *)&atoken.val[2];
    *a5 = v12;
    a5[1] = v14;
  }
  else
  {
    BOOL v15 = as::server::LegacySessionManager::SessionIDIsValid(a1, a3);
    BOOL v16 = v15;
    unsigned __int8 v17 = *(id *)as::server::gSessionServerLog((as::server *)v15);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      long long v18 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v21.val = *(_OWORD *)a2;
      *(_OWORD *)&v21.val[4] = v18;
      pid_t v19 = audit_token_to_pid(&v21);
      unint64_t v20 = "not valid";
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 147;
      if (v16) {
        unint64_t v20 = "valid";
      }
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a3;
      *(_WORD *)&buf[24] = 2080;
      *(void *)&buf[26] = v20;
      __int16 v26 = 1024;
      pid_t v27 = v19;
      _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Sibling session creation failed. Source sessionID: 0x%x. SessionID is %s. Source PID: %d", buf, 0x28u);
    }

    *a5 = 0;
    a5[1] = 0;
    if (*(void *)&atoken.val[2]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&atoken.val[2]);
    }
  }
}

void sub_1CFE3DF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindOrCreatePrimarySession(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v6;
  uint64_t v8 = *(void *)(a2 + 32);
  int v9 = 1886546285;
  id v10 = 0;
  id v11 = 0;
  int v12 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  as::server::LegacySessionManager::FindOrCreatePrimarySession(a1, v7, a3, a4, a5, a6);
  if (*((void *)&v14 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
  }
}

void sub_1CFE3E064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id as::server::GetActivationQueue(as::server *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.coreaudio.ActivationQueue");
    as::CreateFixedPriorityDispatchQueue((const void **)__p, QOS_CLASS_USER_INTERACTIVE, &as::server::GetActivationQueue(void)::callbackQueue);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  int v1 = applesauce::dispatch::v1::queue::operator*(&as::server::GetActivationQueue(void)::callbackQueue);
  return v1;
}

void sub_1CFE3E124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1CFE3E2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::BuildActivationDetailsJSON(unsigned int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  uint64_t v8 = "exit";
  if (a3) {
    uint64_t v8 = "entry";
  }
  uint64_t v22 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v23, &v22);
  int v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a4, "->");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  char v10 = *(unsigned char *)v9;
  *(unsigned char *)int v9 = v23[0];
  v23[0] = v10;
  id v11 = (uint64_t *)v9[1];
  v9[1] = (uint64_t)v24;
  unsigned int v24 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  if (a1)
  {
    v20[0] = 6;
    unint64_t v21 = a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    int v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a4, "flags");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    unsigned __int8 v13 = *(unsigned char *)v12;
    *(unsigned char *)int v12 = v20[0];
    v20[0] = v13;
    long long v14 = (uint64_t *)v12[1];
    v12[1] = v21;
    unint64_t v21 = (unint64_t)v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v21, v20[0]);
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    v18[0] = 5;
    pid_t v19 = (uint64_t *)(int)a2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    BOOL v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a4, "controlling_PID");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    unsigned __int8 v16 = *(unsigned char *)v15;
    *(unsigned char *)BOOL v15 = v18[0];
    v18[0] = v16;
    unsigned __int8 v17 = (uint64_t *)v15[1];
    v15[1] = (uint64_t)v19;
    pid_t v19 = v17;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
  }
}

void sub_1CFE3E50C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v2);
  _Unwind_Resume(a1);
}

void as::server::forbid_acq::GetPropertyLocal_Embedded(as::server::forbid_acq *this@<X0>, audit_token_t *a2@<X2>, audit_token_t *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2;
  int v9 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v45, this, a3, 1);
  char v10 = v45;
  if (v45)
  {
    id v11 = v46;
    if (v46)
    {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      int v12 = v45;
      if (!v45)
      {
        uint64_t v41 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v41);
      }
      unsigned __int8 v13 = v46;
      if (v46)
      {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        id v14 = *(id *)&v12[24]._os_unfair_lock_opaque;
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        goto LABEL_11;
      }
    }
    else
    {
      int v12 = v45;
    }
    id v14 = *(id *)&v12[24]._os_unfair_lock_opaque;
LABEL_11:
    unsigned __int8 v16 = v45;
    if (!v45)
    {
      uint64_t v42 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v42);
    }
    unsigned __int8 v17 = v46;
    if (v46)
    {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      int os_unfair_lock_opaque_low = LOBYTE(v16[108]._os_unfair_lock_opaque);
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      unsigned __int8 v16 = v45;
      BOOL v19 = os_unfair_lock_opaque_low != 0;
      if (!v45) {
        goto LABEL_17;
      }
    }
    else
    {
      BOOL v19 = LOBYTE(v45[108]._os_unfair_lock_opaque) != 0;
    }
    os_unfair_lock_unlock(v16 + 158);
    char v47 = 0;
    if (![(audit_token_t *)v8 isEqualToString:@"MuteSessionInputs"]) {
      goto LABEL_71;
    }
LABEL_17:
    {
      as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
    }
    if (!as::AudioSessionMuteEnabled(void)::enabled)
    {
      uint64_t v20 = [NSNumber numberWithBool:as::server::forbid_acq::IsAudioAppAllInputSessionsMuted(this)];
    }
    else
    {
LABEL_71:
      if ([(audit_token_t *)v8 isEqualToString:@"IsSpatialEnabled"])
      {
        uint64_t v20 = [NSNumber numberWithBool:v19];
      }
      else
      {
        if ([(audit_token_t *)v8 isEqualToString:@"DolbyDigitalEncoderAvailable"])
        {
          id v21 = v14;
          if (objc_opt_respondsToSelector())
          {
            if ([v21 dolbyDigitalEncoderAvailable]) {
              unint64_t v22 = 0x100000000;
            }
            else {
              unint64_t v22 = 0;
            }
          }
          else
          {
            unint64_t v22 = 4294967292;
          }

          uint64_t v20 = [NSNumber numberWithBool:HIDWORD(v22)];
          *(_DWORD *)a4 = v22;
          goto LABEL_33;
        }
        if ([(audit_token_t *)v8 isEqualToString:@"RecordingFromRemoteInput"])
        {
          unsigned int v23 = NSNumber;
          unsigned __int8 v24 = atomic_load((unsigned __int8 *)&v10[82]);
          uint64_t v20 = [v23 numberWithBool:v24 & 1];
        }
        else
        {
          if ([(audit_token_t *)v8 isEqualToString:@"EarpieceANCEnabled"])
          {
            AudioObjectID inObjectID = 0;
            VirtualAudioPlugiuint64_t n = as::server::GetVirtualAudioPlugin((as::server *)&inObjectID, v25);
            if (VirtualAudioPlugin)
            {
              uint64_t v27 = 0;
            }
            else
            {
              buf[9] = 0;
              *(_WORD *)&buf[10] = 0;
              strcpy(buf, "scnabolg");
              UInt32 ioDataSize = 4;
              int outData = 0;
              VirtualAudioPlugiuint64_t n = AudioObjectGetPropertyData(inObjectID, (const AudioObjectPropertyAddress *)buf, 0, 0, &ioDataSize, &outData);
              if (VirtualAudioPlugin) {
                BOOL v32 = 1;
              }
              else {
                BOOL v32 = outData == 0;
              }
              uint64_t v27 = !v32;
            }
            uint64_t v20 = [NSNumber numberWithBool:v27];
            *(_DWORD *)a4 = VirtualAudioPlugin;
            goto LABEL_33;
          }
          uint64_t v28 = (as::server::LegacySessionManager *)[(audit_token_t *)v8 isEqualToString:@"PreferredMicrophoneInjectionMode"];
          if (v28)
          {
            int v29 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v28);
            uint64_t v20 = objc_msgSend(NSNumber, "numberWithInteger:", as::server::LegacySessionManager::GetPreferredMicrophoneInjectionMode(v29, this));
          }
          else
          {
            int v30 = (as::server::LegacySessionManager *)[(audit_token_t *)v8 isEqualToString:@"MicrophoneInjectionIsEnabled"];
            if (v30)
            {
              int v31 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v30);
              uint64_t v20 = [NSNumber numberWithBool:as::server::LegacySessionManager::MicrophoneInjectionIsEnabled(v31)];
            }
            else
            {
              unsigned int v33 = (as::server::LegacySessionManager *)[(audit_token_t *)v8 isEqualToString:@"MicrophoneInjectionIsAllowedByUser"];
              if (!v33)
              {
                if ([(audit_token_t *)v8 isEqualToString:@"AS_HostProcessAttribution"])
                {
                  uint64_t v35 = (audit_token_t *)(id)*MEMORY[0x1E4F761B0];
                  as::server::forbid_acq::GetPropertyMX(this, v35, 0, a3, (uint64_t)buf);
                  int v36 = *(_DWORD *)buf;
                  if (*(_DWORD *)buf)
                  {
                    uint64_t v37 = 0;
                  }
                  else {
                    uint64_t v37 = {;
                  }
                    int v36 = 0;
                  }
                  *(_DWORD *)a4 = v36;
                  *(void *)(a4 + 8) = v37;
                }
                else
                {
                  uint64_t v38 = (as::server *)[(audit_token_t *)v8 isEqualToString:@"AS_DetailedActiveAudioRoute"];
                  if (v38)
                  {
                    uint64_t v39 = (audit_token_t *)(id)*MEMORY[0x1E4F76100];
                    as::server::forbid_acq::GetPropertyMX(this, v39, 0, a3, (uint64_t)buf);
                    if (*(_DWORD *)buf)
                    {
                      *(_DWORD *)a4 = *(_DWORD *)buf;
                      *(void *)(a4 + 8) = 0;
                    }
                    else
                    {
                      *(_DWORD *)a4 = inObjectID;
                      *(void *)(a4 + 8) = v44;
                    }
                  }
                  else
                  {
                    id v40 = *(id *)as::server::gSessionServerLog(v38);
                    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 556;
                      __int16 v51 = 2112;
                      __int16 v52 = v8;
                      _os_log_impl(&dword_1CFE2A000, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unrecognized / unimplemented local property: %@", buf, 0x1Cu);
                    }
                    *(_DWORD *)a4 = -50;
                    *(void *)(a4 + 8) = 0;
                  }
                }
                goto LABEL_34;
              }
              unsigned int v34 = (as::server::LegacySessionManager *)as::server::LegacySessionManager::Instance(v33);
              uint64_t v20 = [NSNumber numberWithBool:as::server::LegacySessionManager::UserAllowsMicrophoneInjection(v34)];
            }
          }
        }
      }
    }
    *(_DWORD *)a4 = 0;
LABEL_33:
    *(void *)(a4 + 8) = v20;
LABEL_34:

    goto LABEL_35;
  }
  BOOL v15 = *(id *)as::server::gSessionServerLog(v9);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 502;
    __int16 v51 = 1024;
    LODWORD(v52) = this;
    _os_log_impl(&dword_1CFE2A000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
  }
  *(_DWORD *)a4 = 561210739;
  *(void *)(a4 + 8) = 0;
LABEL_35:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&v45);
}

void sub_1CFE3EB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void sub_1CFE3EEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  char v3 = (id *)(a1 + 32);
  id v5 = a2;
  char v4 = applesauce::dispatch::v1::queue::operator*(v3);
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1CFE3EFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  char v4 = v3;
  if (*(unsigned char *)a1)
  {
    id v5 = (void *)MEMORY[0x1D25E1DE0](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E__e17_v16__0__NSError_8l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    int v9 = (void *)MEMORY[0x1D25E1DE0](v4);
    id v11 = v8;
    id v12 = (id)MEMORY[0x1D25E1DE0](v9);
    id v5 = (void *)MEMORY[0x1D25E1DE0](v10);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_1CFE3F0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AddMXNotificationListener(as::server *this, audit_token_t *a2, audit_token_t *a3, NSString *a4)
{
  unsigned int v5 = this;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v22, v5, a2, 0);
  double v7 = v22;
  if (!v22)
  {
    uint64_t v13 = 561210739;
    id v14 = *(id *)as::server::gSessionServerLog(0);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136315650;
    int v25 = "AudioSessionServerImpCommon.mm";
    __int16 v26 = 1024;
    int v27 = 159;
    __int16 v28 = 1024;
    unsigned int v29 = v5;
    BOOL v15 = "%25s:%-5d Cannot get session info for session ID: 0x%x";
    unsigned __int8 v16 = v14;
    os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
    uint32_t v18 = 24;
LABEL_16:
    _os_log_impl(&dword_1CFE2A000, v16, v17, v15, buf, v18);
    goto LABEL_17;
  }
  uint64_t v8 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  HasMXPropertyPipeEntitlement = (as::server *)as::server::ConstAudioSessionInfo::HasMXPropertyPipeEntitlement(v7, a2);
  int v10 = (int)HasMXPropertyPipeEntitlement;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (!v10)
  {
    uint64_t v13 = 1701737535;
    BOOL v19 = *(id *)as::server::gSessionServerLog(HasMXPropertyPipeEntitlement);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136315394;
    int v25 = "AudioSessionServerImpCommon.mm";
    __int16 v26 = 1024;
    int v27 = 164;
    BOOL v15 = "%25s:%-5d Error - missing entitlement";
    unsigned __int8 v16 = v19;
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    uint32_t v18 = 18;
    goto LABEL_16;
  }
  id v11 = v22;
  if (!v22)
  {
    uint64_t v21 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v21);
  }
  id v12 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = as::server::AudioSessionInfo::AddMXNotificationListener(v11, (NSString *)v6, 1);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
LABEL_17:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v22);

  return v13;
}

void sub_1CFE3F2F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);

  _Unwind_Resume(a1);
}

as::server::AudioSessionInfoAccessor *as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor(as::server::AudioSessionInfoAccessor *this, int a2, const audit_token_t *a3, char a4)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  uint64_t v8 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(this);
  as::server::LegacySessionManager::FindSessionAndVerifyOwnership(v8, a3, a2, a4, &v13);
  long long v9 = v13;
  long long v13 = 0uLL;
  int v10 = (std::__shared_weak_count *)*((void *)this + 1);
  *(_OWORD *)this = v9;
  if (!v10)
  {
    id v11 = (os_unfair_lock_s *)v9;
    if (!(void)v9) {
      return this;
    }
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (*((void *)&v13 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
  id v11 = *(os_unfair_lock_s **)this;
  if (*(void *)this)
  {
LABEL_5:
    os_unfair_lock_lock(v11 + 158);
    *((unsigned char *)this + 16) = 1;
  }
  return this;
}

void sub_1CFE3F3E4(_Unwind_Exception *exception_object)
{
  id v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void as::server::LegacySessionManager::PrivateFindOrCreatePrimaryApplication(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v9 = a4;
  int v10 = v9;
  {
    if (v9)
    {
      *(_OWORD *)algn_1EBD137B0 = 0u;
      byte_1EBD137C0 = 1;
      memset(&buf, 0, sizeof(buf));
      dword_1EBD137C4 = audit_token_to_pid(&buf);
    }
  }
  {
    if (v9)
    {
      *(void *)&long long v22 = -1;
      *((void *)&v22 + 1) = -1;
      unk_1EBD137D8 = v22;
      byte_1EBD137E8 = 1;
      *(_OWORD *)buf.val = v22;
      *(_OWORD *)&buf.val[4] = v22;
      dword_1EBD137EC = audit_token_to_pid(&buf);
    }
  }
  id v11 = (_OWORD *)(a3 + 56);
  if (*(unsigned char *)(a3 + 88))
  {
    long long v12 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)buf.val = *v11;
    *(_OWORD *)&buf.val[4] = v12;
    int v26 = *(_DWORD *)(a3 + 88);
    if (v9) {
      goto LABEL_6;
    }
    long long v13 = *(_OWORD *)(a3 + 72);
    v23[0] = *v11;
    v23[1] = v13;
    int v24 = *(_DWORD *)(a3 + 88);
    if (v9) {
      goto LABEL_6;
    }
  }
  else if (!*(_DWORD *)(a3 + 92))
  {
LABEL_6:
    id v14 = *(id *)as::server::gSessionServerLog(v9);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      buf.val[0] = 136315394;
      *(void *)&buf.val[1] = "ServerSessionManager.mm";
      LOWORD(buf.val[3]) = 1024;
      *(unsigned int *)((char *)&buf.val[3] + 2) = 888;
      _os_log_impl(&dword_1CFE2A000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d error - missing valid source process identity / audit token", (uint8_t *)&buf, 0x12u);
    }
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
LABEL_13:
    *(unsigned char *)(a5 + 16) = 0;
    goto LABEL_14;
  }
  BOOL v15 = (as::server *)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>(a1 + 32, a3 + 56);
  if ((as::server *)(a1 + 40) != v15)
  {
    uint64_t v16 = *((void *)v15 + 10);
    *(void *)a5 = *((void *)v15 + 9);
    *(void *)(a5 + 8) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    goto LABEL_13;
  }
  os_log_type_t v17 = *(id *)as::server::gSessionServerLog(v15);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v18 = *(_DWORD *)(a3 + 92);
    buf.val[0] = 136315650;
    *(void *)&buf.val[1] = "ServerSessionManager.mm";
    LOWORD(buf.val[3]) = 1024;
    *(unsigned int *)((char *)&buf.val[3] + 2) = 895;
    HIWORD(buf.val[4]) = 1024;
    buf.val[5] = v18;
    _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating implicit audio app instance for %d", (uint8_t *)&buf, 0x18u);
  }
  as::server::LegacySessionManager::PrivateCreateAudioAppImpl(a1, a2, a3, v10, (uint64_t)v23);
  if (*(void *)&v23[0])
  {
    uint64_t v20 = (std::__shared_weak_count *)*((void *)&v23[0] + 1);
    *(void *)a5 = *(void *)&v23[0];
    *(void *)(a5 + 8) = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a5 + 16) = 1;
    if (!v20) {
      goto LABEL_14;
    }
LABEL_25:
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    goto LABEL_14;
  }
  uint64_t v21 = *(id *)as::server::gSessionServerLog(v19);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    buf.val[0] = 136315394;
    *(void *)&buf.val[1] = "ServerSessionManager.mm";
    LOWORD(buf.val[3]) = 1024;
    *(unsigned int *)((char *)&buf.val[3] + 2) = 898;
    _os_log_impl(&dword_1CFE2A000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create primary audio app instance", (uint8_t *)&buf, 0x12u);
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 16) = 0;
  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v23[0] + 1);
  if (*((void *)&v23[0] + 1)) {
    goto LABEL_25;
  }
LABEL_14:
}

void sub_1CFE3F774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::ConstAudioSessionInfo::HasMXPropertyPipeEntitlement(as::server::ConstAudioSessionInfo *this, audit_token_t *a2)
{
  if (as::server::ProcessIdentity::operator==((uint64_t)this + 12, a2)) {
    return *((unsigned __int8 *)this + 123);
  }
  long long v5 = *(_OWORD *)&a2->val[4];
  *(_OWORD *)v10.val = *(_OWORD *)a2->val;
  *(_OWORD *)&v10.val[4] = v5;
  id v6 = SecTaskCreateWithAuditToken(0, &v10);
  id v11 = v6;
  if (!v6) {
    return 0;
  }
  double v7 = v6;
  CFTypeRef v8 = SecTaskCopyValueForEntitlement(v6, @"com.apple.private.coreaudio.mxsessionPropertyPipe", 0);
  CFTypeRef v12 = v8;
  char v13 = 1;
  if (v8) {
    BOOL v4 = CFEqual(v8, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
  }
  else {
    BOOL v4 = 0;
  }
  CACFBoolean::~CACFBoolean((CACFBoolean *)&v12);
  CFRelease(v7);
  return v4;
}

void sub_1CFE3F890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  CACFBoolean::~CACFBoolean((CACFBoolean *)(v6 - 32));
  applesauce::CF::ObjectRef<__SecTask *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL as::server::ProcessIdentity::operator==(uint64_t a1, _OWORD *a2)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)atoken.val = *(_OWORD *)a1;
  *(_OWORD *)&atoken.val[4] = v4;
  pid_t v5 = audit_token_to_pid(&atoken);
  long long v6 = a2[1];
  *(_OWORD *)v13.val = *a2;
  *(_OWORD *)&v13.val[4] = v6;
  if (v5 != audit_token_to_pid(&v13)) {
    return 0;
  }
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v12.val = *(_OWORD *)a1;
  *(_OWORD *)&v12.val[4] = v7;
  int v8 = audit_token_to_pidversion(&v12);
  long long v9 = a2[1];
  *(_OWORD *)v11.val = *a2;
  *(_OWORD *)&v11.val[4] = v9;
  return v8 == audit_token_to_pidversion(&v11);
}

void *std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>(uint64_t a1, uint64_t a2)
{
  double v2 = (void *)(a1 + 8);
  id v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  pid_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = as::server::ProcessIdentity::operator<((uint64_t)(v3 + 4), a2);
    long long v7 = v3 + 1;
    if (!v6)
    {
      long long v7 = v3;
      pid_t v5 = v3;
    }
    id v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || as::server::ProcessIdentity::operator<(a2, (uint64_t)(v5 + 4))) {
    return v2;
  }
  return v5;
}

void *std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::__find_equal<as::server::ProcessIdentity>(uint64_t a1, void *a2, uint64_t a3)
{
  pid_t v5 = (void *)(a1 + 8);
  long long v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        long long v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!as::server::ProcessIdentity::operator<(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        long long v4 = (void *)*v7;
        pid_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!as::server::ProcessIdentity::operator<(v8, a3)) {
        break;
      }
      pid_t v5 = v7 + 1;
      long long v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    long long v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL as::server::ProcessIdentity::operator<(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 36);
  int v3 = *(_DWORD *)(a2 + 36);
  if (v2 != v3) {
    return v2 < v3;
  }
  if (!*(unsigned char *)(a1 + 32) || *(unsigned char *)(a2 + 32) == 0)
  {
    return v2 < v3;
  }
  else
  {
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)atoken.val = *(_OWORD *)a1;
    *(_OWORD *)&atoken.val[4] = v6;
    int v7 = audit_token_to_pidversion(&atoken);
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v11.val = *(_OWORD *)a2;
    *(_OWORD *)&v11.val[4] = v8;
    return v7 < audit_token_to_pidversion(&v11);
  }
}

void as::server::LegacySessionManager::PrivateCreateAudioAppImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v24 = a4;
  std::allocate_shared[abi:ne180100]<as::server::AudioApplicationInfo,std::allocator<as::server::AudioApplicationInfo>,as::server::ApplicationCreationDescription const&,NSXPCConnection * {__strong}&,void>(a3, &v24, &v23);
  long long v9 = *(_OWORD *)(a3 + 72);
  *(_OWORD *)audit_token_t buf = *(_OWORD *)(a3 + 56);
  *(_OWORD *)&buf[16] = v9;
  *(void *)&buf[32] = *(void *)(a3 + 88);
  long long v26 = v23;
  if (*((void *)&v23 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::__emplace_unique_key_args<as::server::ProcessIdentity,std::pair<as::server::ProcessIdentity const,std::shared_ptr<as::server::AudioApplicationInfo>>>((uint64_t **)(a1 + 32), (uint64_t)buf, (uint64_t)buf);
  char v11 = v10;
  audit_token_t v12 = (as::server *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (v11)
  {
    uint64_t v16 = *(uint64_t ***)(a2 + 8);
    os_log_type_t v17 = *v16;
    unsigned int v18 = v16[1];
    long long v19 = v23;
    if (*((void *)&v23 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (v17 != v18)
    {
      uint64_t v20 = a3 + 56;
      do
      {
        uint64_t v22 = *v17;
        uint64_t v21 = (std::__shared_weak_count *)v17[1];
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (as::server::ProcessIdentity::operator==(v22 + 52, v20)
          && !as::server::AudioApplicationInfo::IsSessionTypeIgnored(*(_DWORD *)(v22 + 92)))
        {
          *(void *)audit_token_t buf = v22;
          *(void *)&buf[8] = v21;
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          as::server::AudioApplicationInfo::AddSession((os_unfair_lock_s *)v19, (uint64_t *)buf);
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
        }
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        v17 += 2;
      }
      while (v17 != v18);
    }
    if (*((void *)&v19 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
    }
    *(_OWORD *)a5 = v23;
  }
  else
  {
    audit_token_t v13 = *(id *)as::server::gSessionServerLog(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = *(_DWORD *)(a3 + 92);
      uint64_t v15 = *(void *)(a3 + 8);
      *(_DWORD *)audit_token_t buf = 136315906;
      *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 680;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v14;
      *(_WORD *)&buf[24] = 2112;
      *(void *)&buf[26] = v15;
      _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - failed to add process (pid: %d, process: %@) to audio app map", buf, 0x22u);
    }
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    if (*((void *)&v23 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
    }
  }
}

void sub_1CFE3FD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

BOOL as::server::AudioApplicationInfo::AddSession(os_unfair_lock_s *a1, uint64_t *a2)
{
  int v3 = a1 + 4;
  uint64_t v4 = (uint64_t)&a1[6];
  os_unfair_lock_lock(a1 + 4);
  pid_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  long long v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v6 = as::server::AudioAppInfoImpl::AddSession(v4, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  os_unfair_lock_unlock(v3);
  return v6;
}

void sub_1CFE3FE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

BOOL as::server::AudioAppInfoImpl::AddSession(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  long long v5 = *(_OWORD *)(*a2 + 68);
  v16[0] = *(_OWORD *)(*a2 + 52);
  v16[1] = v5;
  uint64_t v17 = *(void *)(v4 + 84);
  BOOL v6 = as::server::ProcessIdentity::operator==((uint64_t)v16, a1 + 16);
  if (v6)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = (std::__shared_weak_count *)a2[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v9 = *(_DWORD *)(*a2 + 8);
      *(void *)&v19[12] = v8;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      int v9 = *(_DWORD *)(v7 + 8);
      *(void *)&v19[12] = 0;
    }
    *(_DWORD *)audit_token_t buf = v9;
    *(void *)&v19[4] = v7;
    __int16 v20 = 0;
    std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,as::server::AudioAppInfoImpl::SessionDetails>>((uint64_t **)(a1 + 88), (unsigned int *)buf, (uint64_t)buf);
    char v14 = v13;
    if (*(void *)&v19[12]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v19[12]);
    }
    BOOL v12 = v14 != 0;
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    char v10 = *(id *)as::server::gSessionServerLog((as::server *)v6);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)audit_token_t buf = 136315906;
      *(void *)long long v19 = "AudioApplicationInfoImpl.mm";
      *(_WORD *)&v19[8] = 1024;
      *(_DWORD *)&v19[10] = 419;
      *(_WORD *)&v19[14] = 1024;
      *(_DWORD *)&v19[16] = HIDWORD(v17);
      __int16 v20 = 1024;
      int v21 = v11;
      _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - session (source pid:%d) does not match that of app (pid:%d) being added to", buf, 0x1Eu);
    }
    return 0;
  }
  return v12;
}

void sub_1CFE3FFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,as::server::AudioAppInfoImpl::SessionDetails>>(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  BOOL v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        BOOL v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        BOOL v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    char v10 = (char *)operator new(0x40uLL);
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((_WORD *)v10 + 28) = *(_WORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_OWORD *std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::__emplace_unique_key_args<as::server::ProcessIdentity,std::pair<as::server::ProcessIdentity const,std::shared_ptr<as::server::AudioApplicationInfo>>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (void **)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::__find_equal<as::server::ProcessIdentity>((uint64_t)a1, &v10, a2);
  BOOL v6 = *v5;
  if (!*v5)
  {
    unsigned int v7 = (uint64_t **)v5;
    BOOL v6 = operator new(0x58uLL);
    long long v8 = *(_OWORD *)(a3 + 16);
    v6[2] = *(_OWORD *)a3;
    v6[3] = v8;
    *((void *)v6 + 8) = *(void *)(a3 + 32);
    *(_OWORD *)((char *)v6 + 72) = *(_OWORD *)(a3 + 40);
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v10, v7, (uint64_t *)v6);
  }
  return v6;
}

void std::allocate_shared[abi:ne180100]<as::server::AudioApplicationInfo,std::allocator<as::server::AudioApplicationInfo>,as::server::ApplicationCreationDescription const&,NSXPCConnection * {__strong}&,void>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0xE8uLL);
  std::__shared_ptr_emplace<as::server::AudioApplicationInfo>::__shared_ptr_emplace[abi:ne180100]<as::server::ApplicationCreationDescription const&,NSXPCConnection * {__strong}&,std::allocator<as::server::AudioApplicationInfo>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<as::server::AudioApplicationInfo>::__enable_weak_this[abi:ne180100]<as::server::AudioApplicationInfo,as::server::AudioApplicationInfo,void>((uint64_t)a3, v6 + 3, (uint64_t)(v6 + 3));
}

void sub_1CFE401C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<as::server::AudioApplicationInfo>::__shared_ptr_emplace[abi:ne180100]<as::server::ApplicationCreationDescription const&,NSXPCConnection * {__strong}&,std::allocator<as::server::AudioApplicationInfo>,0>(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F2688700;
  as::server::AudioApplicationInfo::AudioApplicationInfo(a1 + 3, a2, *a3);
  return a1;
}

void sub_1CFE40220(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<as::server::AudioApplicationInfo>::__enable_weak_this[abi:ne180100]<as::server::AudioApplicationInfo,as::server::AudioApplicationInfo,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      long long v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

uint64_t as::server::AudioApplicationInfo::AudioApplicationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  as::server::AudioAppInfoImpl::AudioAppInfoImpl(a1 + 24, a2, a3, a1);
  return a1;
}

void sub_1CFE402F4(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t as::server::AudioAppInfoImpl::AudioAppInfoImpl(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = *(void *)(a2 + 88);
  long long v9 = *(_OWORD *)(a2 + 72);
  long long v10 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v9;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = @"?";
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  if (as::server::DefaultAudioAppState(void)::onceToken != -1) {
    dispatch_once(&as::server::DefaultAudioAppState(void)::onceToken, &__block_literal_global);
  }
  id v11 = (id)as::server::DefaultAudioAppState(void)::sDefaultState;
  if (as::server::DefaultMXState(void)::onceToken != -1) {
    dispatch_once(&as::server::DefaultMXState(void)::onceToken, &__block_literal_global_104);
  }
  as::AudioAppState::AudioAppState((void *)(a1 + 152), v11, (void *)as::server::DefaultMXState(void)::sDefaultState);

  if (*(void *)(a2 + 96) == 1886546285)
  {
    if (*(void *)(a2 + 8)) {
      BOOL v12 = *(__CFString **)(a2 + 8);
    }
    else {
      BOOL v12 = @"?";
    }
    objc_storeStrong((id *)(a1 + 56), v12);
  }
  v17[0] = 0;
  v17[1] = 0;
  as::server::AudioAppInfoImpl::UpdateDebugString(a1, v17);
  uint64_t v13 = *(void *)(a2 + 96);
  if (v13 == 1684825972)
  {
    as::server::AudioAppInfoImpl::AddDelegateAudioApp(a1, a2, v7, (uint64_t)&v15);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else if (v13 == 1886546285 && v7)
  {
    as::server::AudioAppInfoImpl::SetPrimaryClient(a1, a2, v7);
  }

  return a1;
}

void sub_1CFE404E0(_Unwind_Exception *a1)
{
  as::AudioAppState::~AudioAppState(v5);
  uint64_t v8 = *(std::__shared_weak_count **)(v2 + 144);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy(v4, *(void **)(v2 + 120));
  std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy(v3, *(void **)(v2 + 96));
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*v6);
  }

  _Unwind_Resume(a1);
}

void as::server::AudioAppInfoImpl::UpdateDebugString(uint64_t a1, uint64_t *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  v57[0] = 0;
  uint64_t v58 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
  *(void *)uint64_t v59 = [*(id *)(a1 + 56) UTF8String];
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v55, (char **)v59);
  uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)uint64_t v4 = v55[0];
  v55[0] = v5;
  BOOL v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v56;
  uint64_t v56 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v55[0]);
  id v7 = (uint64_t *)*(int *)(a1 + 52);
  v53[0] = 5;
  __int16 v54 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  uint64_t v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "pid");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  unsigned __int8 v9 = *(unsigned char *)v8;
  *(unsigned char *)uint64_t v8 = v53[0];
  v53[0] = v9;
  long long v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v54;
  __int16 v54 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53[0]);
  id v11 = *(id *)(a1 + 8);
  BOOL v12 = v11;
  if (v11)
  {
    *(void *)uint64_t v59 = [v11 UTF8String];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v51, (char **)v59);
    uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "attribution");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
    char v14 = *(unsigned char *)v13;
    *(unsigned char *)uint64_t v13 = v51[0];
    v51[0] = v14;
    uint64_t v15 = (uint64_t *)v13[1];
    v13[1] = (uint64_t)v52;
    __int16 v52 = v15;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
  }
  uint64_t v16 = *a2;
  if (*a2)
  {
    uint64_t v17 = *(void *)(v16 + 80);
    if (v17 == 1684825972 || v17 == 1886546285)
    {
      unsigned int v18 = (__CFString *)*(id *)(v16 + 168);
      if (v18) {
        long long v19 = v18;
      }
      else {
        long long v19 = @"?";
      }
      int v20 = bswap32(v17);
      int v61 = v20;
      if (((char)v20 - 32) > 0x5E
        || (((__int16)v20 >> 8) - 32) > 0x5E
        || ((v20 << 8 >> 24) - 32) > 0x5E
        || ((v20 >> 24) - 32) > 0x5E)
      {
        std::to_string((std::string *)v59, v17);
      }
      else
      {
        __int16 v62 = 39;
        char __s = 39;
        std::string::basic_string[abi:ne180100]<0>(v59, &__s);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v49, (uint64_t)v59);
      uint64_t v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "rclient");
      long long v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v22, "type");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      char v24 = *(unsigned char *)v23;
      *(unsigned char *)long long v23 = v49[0];
      v49[0] = v24;
      int v25 = (uint64_t *)v23[1];
      v23[1] = (uint64_t)v50;
      std::string v50 = v25;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
      if ((v59[23] & 0x80000000) != 0) {
        operator delete(*(void **)v59);
      }
      long long v26 = (uint64_t *)*(unsigned int *)(*a2 + 8);
      v47[0] = 6;
      long long v48 = v26;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "rclient");
      __int16 v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v27, "client_id");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      unsigned __int8 v29 = *(unsigned char *)v28;
      *(unsigned char *)__int16 v28 = v47[0];
      v47[0] = v29;
      uint64_t v30 = (uint64_t *)v28[1];
      v28[1] = (uint64_t)v48;
      long long v48 = v30;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v48, v47[0]);
      int v31 = (uint64_t *)*(int *)(*a2 + 156);
      v45[0] = 5;
      long long v46 = v31;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      BOOL v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "rclient");
      unsigned int v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v32, "creator_pid");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      unsigned __int8 v34 = *(unsigned char *)v33;
      *(unsigned char *)unsigned int v33 = v45[0];
      v45[0] = v34;
      uint64_t v35 = (uint64_t *)v33[1];
      v33[1] = (uint64_t)v46;
      long long v46 = v35;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45[0]);
      *(void *)uint64_t v59 = [(__CFString *)v19 UTF8String];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v43, (char **)v59);
      int v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "rclient");
      uint64_t v37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v36, "creator_name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
      char v38 = *(unsigned char *)v37;
      *(unsigned char *)uint64_t v37 = v43[0];
      v43[0] = v38;
      uint64_t v39 = (uint64_t *)v37[1];
      v37[1] = (uint64_t)v44;
      uint64_t v44 = v39;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v37);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v43[0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v57, -1, 0x20u, 0, 0, v59);
      id v40 = (void **)(a1 + 64);
      if (*(char *)(a1 + 87) < 0) {
        operator delete(*v40);
      }
      *(_OWORD *)id v40 = *(_OWORD *)v59;
      *(void *)(a1 + 80) = *(void *)&v59[16];
    }
    else
    {
      uint64_t v41 = *(id *)as::server::gSessionServerLog((as::server *)v11);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        uint64_t v42 = (void *)(a1 + 64);
        if (*(char *)(a1 + 87) < 0) {
          uint64_t v42 = (void *)*v42;
        }
        *(_DWORD *)uint64_t v59 = 136315650;
        *(void *)&v59[4] = "AudioApplicationInfoImpl.mm";
        *(_WORD *)&v59[12] = 1024;
        *(_DWORD *)&v59[14] = 556;
        *(_WORD *)&v59[18] = 2080;
        *(void *)&v59[20] = v42;
        _os_log_impl(&dword_1CFE2A000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d error - will only update debug string for primary or delegate clients (app: %s)", v59, 0x1Cu);
      }
    }
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v57, -1, 0x20u, 0, 0, v59);
    int v21 = (void **)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*v21);
    }
    *(_OWORD *)int v21 = *(_OWORD *)v59;
    *(void *)(a1 + 80) = *(void *)&v59[16];
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v58, v57[0]);
}

void sub_1CFE40B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  _Unwind_Resume(a1);
}

void as::server::SessionCreationDescription::AsJSON(as::server::SessionCreationDescription *this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  AudioSession::GetSessionTypeName(*((_DWORD *)this + 10), v37);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v39, (uint64_t)v37);
  uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "session_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)uint64_t v4 = v39[0];
  v39[0] = v5;
  BOOL v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v40;
  id v40 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v40, v39[0]);
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  id v7 = (uint64_t *)*((int *)this + 9);
  v35[0] = 5;
  int v36 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
  uint64_t v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "PID");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
  unsigned __int8 v9 = *(unsigned char *)v8;
  *(unsigned char *)uint64_t v8 = v35[0];
  v35[0] = v9;
  long long v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v36;
  int v36 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v36, v35[0]);
  id v11 = (void *)*((void *)this + 9);
  if (v11)
  {
    v37[0] = (char *)[v11 UTF8String];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v33, v37);
    BOOL v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "device_UUID");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
    char v13 = *(unsigned char *)v12;
    *(unsigned char *)BOOL v12 = v33[0];
    v33[0] = v13;
    char v14 = (uint64_t *)v12[1];
    v12[1] = (uint64_t)v34;
    unsigned __int8 v34 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v34, v33[0]);
  }
  uint64_t v15 = (void *)*((void *)this + 10);
  if (v15)
  {
    v37[0] = (char *)[v15 UTF8String];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v31, v37);
    uint64_t v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    char v17 = *(unsigned char *)v16;
    *(unsigned char *)uint64_t v16 = v31[0];
    v31[0] = v17;
    unsigned int v18 = (uint64_t *)v16[1];
    v16[1] = (uint64_t)v32;
    BOOL v32 = v18;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31[0]);
  }
  uint64_t v19 = *((void *)this + 11);
  if (v19)
  {
    AudioSession::FormatSessionIDAsHex((AudioSession *)*(unsigned int *)(v19 + 8), v37);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v29, (uint64_t)v37);
    int v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "source_session_ID");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    char v21 = *(unsigned char *)v20;
    *(unsigned char *)int v20 = v29[0];
    v29[0] = v21;
    uint64_t v22 = (uint64_t *)v20[1];
    v20[1] = (uint64_t)v30;
    uint64_t v30 = v22;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    long long v23 = (uint64_t *)*(int *)(*((void *)this + 11) + 88);
    v27[0] = 5;
    __int16 v28 = v23;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
    char v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "source_session_PID");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
    unsigned __int8 v25 = *(unsigned char *)v24;
    *(unsigned char *)char v24 = v27[0];
    v27[0] = v25;
    long long v26 = (uint64_t *)v24[1];
    v24[1] = (uint64_t)v28;
    __int16 v28 = v26;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
  }
}

void sub_1CFE40FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v2);
  _Unwind_Resume(a1);
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(unsigned __int8 *a1, char *__s)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    char v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *char v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    long long v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v11, v10);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a string argument with ", &v11, &__p);
    nlohmann::detail::type_error::create(305, (uint64_t)&__p, exception);
  }
  BOOL v6 = (uint64_t **)*((void *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  id v7 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7 + 7;
}

void sub_1CFE4117C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  BOOL v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  double result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  id v7 = *a2;
  uint64_t v8 = *((void *)*a2 + 2);
  v6[2] = **a2;
  *((void *)v6 + 6) = v8;
  void *v7 = 0;
  v7[1] = 0;
  long long v7[2] = 0;
  *((void *)v6 + 8) = 0;
  *((unsigned char *)v6 + 56) = 0;
  uint64_t v9 = (uint64_t)v6 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6 + 56);
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void *AudioSession::GetSessionTypeName@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (a1 <= 1718183794)
  {
    if (a1 > 1668314225)
    {
      if (a1 == 1668314226)
      {
        uint64_t v2 = "Fig Capture";
        return std::string::basic_string[abi:ne180100]<0>(a2, v2);
      }
      if (a1 == 1702392942)
      {
        uint64_t v2 = "Proxy";
        return std::string::basic_string[abi:ne180100]<0>(a2, v2);
      }
    }
    else
    {
      if (a1 == 1635088489)
      {
        uint64_t v2 = "Auxiliary";
        return std::string::basic_string[abi:ne180100]<0>(a2, v2);
      }
      if (a1 == 1635148646)
      {
        uint64_t v2 = "AV Conference";
        return std::string::basic_string[abi:ne180100]<0>(a2, v2);
      }
    }
LABEL_23:
    uint64_t v2 = "Unknown session type";
    return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  if (a1 <= 1935830118)
  {
    if (a1 == 1718183795)
    {
      uint64_t v2 = "Fig Player";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    }
    if (a1 == 1886546285)
    {
      uint64_t v2 = "Primary";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    }
    goto LABEL_23;
  }
  if (a1 == 1935830119)
  {
    uint64_t v2 = "Sibling";
    return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  if (a1 == 1935897189)
  {
    uint64_t v2 = "Secure";
    return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  if (a1 != 1936286827) {
    goto LABEL_23;
  }
  uint64_t v2 = "Sidekick";
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void anonymous namespace'::TranslateGetter_DetailedAudioRoute(_anonymous_namespace_ *this@<X0>, NSDictionary *a2@<X1>, uint64_t a3@<X8>)
{
  id v7 = this;
  uint64_t v5 = (void *)[(_anonymous_namespace_ *)v7 mutableCopy];
  BOOL v6 = [NSNumber numberWithBool:a2];
  [v5 setObject:v6 forKey:*MEMORY[0x1E4F4EA70]];

  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = v5;
}

void sub_1CFE414DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE41C2C(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},unsigned int,NSObject  {objcproto13OS_xpc_object}* {__strong},unsigned int,unsigned int>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = (void *)MEMORY[0x1D25E1DE0](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjU8__strongPU24objcproto13OS_xpc_object8NSObjectjjEEEU13block_pointerFvDpT_ESD_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c176_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjU8__strongPU24objcproto13OS_xpc_object8NSObjectjjEEEU13block_pointerFvDpT_ESD_iEUlS4_jS8_jjE__e54_v36__0__NSError_8I16__NSObject_OS_xpc_object__20I28I32l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = (void *)MEMORY[0x1D25E1DE0](v4);
    id v11 = v8;
    id v12 = (id)MEMORY[0x1D25E1DE0](v9);
    uint64_t v5 = (void *)MEMORY[0x1D25E1DE0](v10);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_1CFE41E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id as::server::BundleIdentifierForPID(as::server *this)
{
  uint64_t v1 = as::server::GetProcessHandleForPID(this);
  uint64_t v2 = [v1 bundle];
  id v3 = [v2 identifier];

  return v3;
}

void sub_1CFE41F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id as::server::GetProcessHandleForPID(as::server *this)
{
  int v1 = (int)this;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F963F8] identifierWithPid:this];
  if (v2)
  {
    id v9 = 0;
    id v3 = [MEMORY[0x1E4F963E8] handleForIdentifier:v2 error:&v9];
    int v4 = (as::server *)v9;
    uint64_t v5 = v4;
    if (v4)
    {
      id v6 = *(id *)as::server::gSessionServerLog(v4);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)audit_token_t buf = 136315650;
        id v11 = "RBS_Utility.mm";
        __int16 v12 = 1024;
        int v13 = 32;
        __int16 v14 = 1024;
        int v15 = v1;
        _os_log_impl(&dword_1CFE2A000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get process handle for clientPID %d", buf, 0x18u);
      }
    }
  }
  else
  {
    id v7 = *(id *)as::server::gSessionServerLog(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)audit_token_t buf = 136315650;
      id v11 = "RBS_Utility.mm";
      __int16 v12 = 1024;
      int v13 = 25;
      __int16 v14 = 1024;
      int v15 = v1;
      _os_log_impl(&dword_1CFE2A000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get process identifier for clientPID %d", buf, 0x18u);
    }
    id v3 = 0;
  }

  return v3;
}

void sub_1CFE420D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::BuildCreationDescription(long long *a1@<X1>, int a2@<W2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X6>, int a7@<W7>, uint64_t a8@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v30 = a3;
  id v15 = a4;
  id v16 = a6;
  long long v17 = a1[1];
  long long v32 = *a1;
  long long v33 = v17;
  *(_OWORD *)atoken.val = v32;
  *(_OWORD *)&atoken.val[4] = v17;
  pid_t v18 = audit_token_to_pid(&atoken);
  id v19 = 0;
  if (a2 == 1936286827)
  {
    id v23 = v16;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
LABEL_9:
    id v20 = v19;
    id v27 = v16;
    id v19 = v23;
    goto LABEL_10;
  }
  id v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (a2 != 1935830119)
  {
LABEL_10:
    long long v26 = 0;
    long long v28 = v33;
    *(_OWORD *)a8 = v32;
    *(_OWORD *)(a8 + 16) = v28;
    char v24 = 1;
    *(unsigned char *)(a8 + 32) = 1;
    *(_DWORD *)(a8 + 36) = v18;
    *(_DWORD *)(a8 + 40) = a2;
    unsigned __int8 v25 = v30;
    *(void *)(a8 + 48) = v30;
    *(void *)(a8 + 56) = v15;
    *(_DWORD *)(a8 + 64) = a7;
    *(void *)(a8 + 72) = v19;
    *(void *)(a8 + 80) = v20;
    *(void *)(a8 + 88) = v22;
    *(void *)(a8 + 96) = v21;
    id v15 = 0;
    goto LABEL_11;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    uint64_t v21 = a5[1];
    id v23 = 0;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    id v19 = v16;
    goto LABEL_9;
  }
  char v24 = 0;
  *(unsigned char *)a8 = 0;
  unsigned __int8 v25 = v30;
  long long v26 = v30;
LABEL_11:
  *(unsigned char *)(a8 + 104) = v24;
  id v29 = v25;
}

void sub_1CFE42290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::CreateSession(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, long long *a5@<X8>)
{
  id v10 = a3;
  id v9 = a4;
  if (*(_DWORD *)(a2 + 40) == 1886546285)
  {
    as::server::LegacySessionManager::FindOrCreatePrimarySession((uint64_t)a1, (long long *)a2, v10, v9, 1, (uint64_t)a5);
  }
  else
  {
    os_unfair_lock_lock(a1 + 60);
    as::server::LegacySessionManager::CreateSessionPriv((uint64_t)a1, (as::server::SessionCreationDescription *)a2, v10, v9, a5);
    os_unfair_lock_unlock(a1 + 60);
  }
}

void sub_1CFE42380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_unlock(v11);

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjU8__strongPU24objcproto13OS_xpc_object8NSObjectjjEEEU13block_pointerFvDpT_ESD_i_block_invoke(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},unsigned int,NSObject  {objcproto13OS_xpc_object}* {__strong},unsigned int,unsigned int>(void({block_pointer})(NSError * {__strong},unsigned int,NSObject  {objcproto13OS_xpc_object}* {__strong},unsigned int,unsigned int),int)::{lambda(NSError *,unsigned int,NSObject  {objcproto13OS_xpc_object}*,unsigned int,unsigned int)#1}::operator()(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v8 = a2;
  id v7 = applesauce::dispatch::v1::queue::operator*((id *)a1);
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_1CFE4245C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<as::server::SessionCreationDescription,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
  return a1;
}

id as::server::DeviceTimeObserver::xpcSharedMemoryObject(as::server::DeviceTimeObserver *this)
{
  id v3 = (void *)((char *)this + 8);
  uint64_t v2 = *((void *)this + 1);
  int v4 = *(as::server::DeviceTimeObserver::SharedBlockOwner **)this;
  if (v2 - (void)v4 == 128)
  {
    uint64_t v5 = as::server::DeviceTimeObserver::SharedBlockOwner::xpcSharedMemoryObject(v4);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      as::server::DeviceTimeObserver::xpcSharedMemoryObject(v3, this);
    }
    uint64_t v5 = 0;
  }
  return v5;
}

id as::server::DeviceTimeObserver::SharedBlockOwner::xpcSharedMemoryObject(as::server::DeviceTimeObserver::SharedBlockOwner *this)
{
  raw_ptr = (void *)caulk::ipc::mapped_memory::get_raw_ptr((as::server::DeviceTimeObserver::SharedBlockOwner *)((char *)this + 16), 0);
  xpc_object_t v3 = xpc_shmem_create(raw_ptr, *((void *)this + 3));
  return v3;
}

unint64_t caulk::ipc::mapped_memory::get_raw_ptr(caulk::ipc::mapped_memory *this, unint64_t a2)
{
  if (*((void *)this + 1) <= a2)
  {
    _os_assert_log();
    uint64_t v3 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v3);
  }
  return *(void *)this + a2;
}

void as::server::LegacySessionManager::CreateSessionPriv(uint64_t a1@<X0>, as::server::SessionCreationDescription *a2@<X1>, void *a3@<X2>, void *a4@<X3>, long long *a5@<X8>)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v45 = a3;
  id v44 = a4;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 240));
  std::allocate_shared[abi:ne180100]<as::server::AudioSessionInfo,std::allocator<as::server::AudioSessionInfo>,as::server::SessionCreationDescription const&,NSXPCConnection * {__strong}&,objc_object  {objcproto28AVAudioSessionServerDelegate}* {__strong}&,void>((uint64_t)a2, &v45, &v44, a5);
  uint64_t v9 = a1 + 8;
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  id v10 = (as::server *)std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::emplace_back<std::shared_ptr<as::server::AudioSessionInfo>&>((uint64_t *)(a1 + 8), a5);
  if (a1) {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }
  if (*((void *)a2 + 11))
  {
    id v11 = *(id *)as::server::gSessionServerLog(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(_DWORD *)(*(void *)a5 + 8);
      int v13 = *(_DWORD *)(*((void *)a2 + 11) + 8);
      *(_DWORD *)audit_token_t buf = 136315906;
      *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 256;
      __int16 v47 = 1024;
      *(_DWORD *)long long v48 = v12;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v13;
      _os_log_impl(&dword_1CFE2A000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding sibling session 0x%x for source session 0x%x", buf, 0x1Eu);
    }
    uint64_t v14 = *((void *)a2 + 11);
    uint64_t v15 = *((void *)a5 + 1);
    *(void *)&long long v43 = *(void *)a5;
    *((void *)&v43 + 1) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
    }
    as::server::AudioSessionInfo::AddSiblingSession(v14, &v43);
    if (*((void *)&v43 + 1)) {
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v43 + 1));
    }
    int v16 = *(_DWORD *)(*((void *)a2 + 11) + 8);
    unsigned int v17 = v16 & 0xFFFFFF00;
    uint64_t v18 = 0x100000000;
  }
  else
  {
    uint64_t v18 = 0;
    LOBYTE(v16) = 0;
    unsigned int v17 = 0;
  }
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(*(CFTypeRef *)a5, &cf);
  uint64_t v19 = *(void *)(*(void *)a5 + 232);
  *(void *)audit_token_t buf = *(void *)(*(void *)a5 + 224);
  *(void *)&buf[8] = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  as::server::MXAccessor<as::server::ForbidACQ>::GetProperty((void *)*MEMORY[0x1E4F75F00], (uint64_t)v40);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  id v20 = v41;
  as::server::GetSpatialPreferences(v44, *(unsigned int *)(*(void *)a5 + 8), v20, (uint64_t)&v38);
  uint64_t v21 = *(void *)a5;
  *(unsigned char *)(v21 + 432) = v39;
  as::server::AudioSessionInfo::SetSpatialPreferences(v21, v38);
  uint64_t v23 = *(void *)(a1 + 248);
  if (v23)
  {
    os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 248));
    as::server::DeviceTimeObserver::createSession((uint64_t *)(v23 + 8), *(_DWORD *)(*(void *)a5 + 8), v18 | v17 | v16, buf);
    if (buf[16])
    {
      unint64_t v25 = *(unsigned int *)&buf[8] + 543 * *(void *)(*(void *)buf + 8);
      if (HIDWORD(v25))
      {
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2687EB0;
        gsl::details::terminate(v24);
      }
      *(_DWORD *)(*(void *)a5 + 536) = v25;
    }
    else
    {
      long long v26 = *(id *)as::server::gSessionServerLog(v24);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        int v27 = *(_DWORD *)(*(void *)a5 + 8);
        LODWORD(v52.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ServerSessionManager.mm";
        WORD2(v52.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v52.__r_.__value_.__r.__words[1] + 6) = 290;
        WORD1(v52.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v52.__r_.__value_.__r.__words[2]) = v27;
        _os_log_impl(&dword_1CFE2A000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d Session creation in DTO failed, session ID = 0x%x", (uint8_t *)&v52, 0x18u);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v23);
    uint64_t v9 = a1 + 8;
  }
  long long v28 = *(id *)as::server::gSessionServerLog(v22);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    id v29 = *(char **)a5;
    if (*(char *)(*(void *)a5 + 223) < 0) {
      std::string::__init_copy_ctor_external(&v52, *((const std::string::value_type **)v29 + 25), *((void *)v29 + 26));
    }
    else {
      std::string v52 = *(std::string *)(v29 + 200);
    }
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v30 = &v52;
    }
    else {
      id v30 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    as::server::SessionCreationDescription::AsJSON(a2, (uint64_t)v34);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v34, -1, 0x20u, 0, 0, __p);
    if (v37 >= 0) {
      int v31 = __p;
    }
    else {
      int v31 = (void **)__p[0];
    }
    *(_DWORD *)audit_token_t buf = 136316162;
    *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 296;
    __int16 v47 = 2080;
    *(void *)long long v48 = "create_session";
    *(_WORD *)&unsigned char v48[8] = 2080;
    long long v49 = v30;
    __int16 v50 = 2080;
    __int16 v51 = v31;
    _os_log_impl(&dword_1CFE2A000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v34);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v35, v34[0]);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
  }

  if (!as::server::AudioApplicationInfo::IsSessionTypeIgnored(*(_DWORD *)(*(void *)a5 + 92)))
  {
    os_unfair_lock_lock((os_unfair_lock_t)a1);
    *(void *)audit_token_t buf = a1;
    *(void *)&buf[8] = v9;
    long long v32 = (std::__shared_weak_count *)*((void *)a5 + 1);
    v33[0] = *(void *)a5;
    v33[1] = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::LegacySessionManager::PrivateAddSessionToApplication(a1, (uint64_t)buf, v33);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    as::server::LegacySessionManager::StartProcessMonitoring((os_unfair_lock_s *)a1, *(unsigned int *)(*(void *)a5 + 48));
  }

  if (cf) {
    CFRelease(cf);
  }
}

void sub_1CFE42B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, const void *a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,void *a24,uint64_t a25,uint64_t a26)
{
  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a20);
  id v30 = *(std::__shared_weak_count **)(v26 + 8);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }

  _Unwind_Resume(a1);
}

void anonymous namespace'::HandleCategoryOrModeChangedCallback(_anonymous_namespace_ *this, void *a2, NSString *a3, NSDictionary *a4)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  uint64_t v63 = a3;
  int v7 = [v6 isEqualToString:*MEMORY[0x1E4F75CA0]];
  id v8 = (as::server *)[v6 isEqualToString:*MEMORY[0x1E4F75CA8]];
  int v9 = (int)v8;
  if ((v7 | v8))
  {
    id v10 = [(NSString *)v63 objectForKey:v6];
    objc_opt_class();
    uint64_t isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass)
    {
      as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)buf, this);
      int v12 = *(const void **)buf;
      if (*(void *)buf)
      {
        int v13 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
          as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v12, cf);
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        else
        {
          as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(*(CFTypeRef *)buf, cf);
        }
        uint64_t v17 = *(void *)buf;
        if (!*(void *)buf)
        {
          uint64_t v55 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v55);
        }
        uint64_t v18 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
          id v19 = *(id *)(v17 + 96);
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        else
        {
          id v19 = *(id *)(*(void *)buf + 96);
        }
        uint64_t v21 = as::server::forbid_acq::CopyCMSessionAudioMode((as::server::forbid_acq *)cf[0], v20);
        as::server::GetSpatialPreferences(v19, (uint64_t)this, v21, (uint64_t)&__p);
        __int16 v62 = __p;
        char v22 = v81;

        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v72, this);
        uint64_t v23 = v72;
        if (!v72) {
          goto LABEL_85;
        }
        char v24 = v73;
        if (v73)
        {
          atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
          *((unsigned char *)v23 + 432) = v22;
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          uint64_t v23 = v72;
          if (!v72)
          {
            uint64_t v56 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v56);
          }
          unint64_t v25 = v73;
          if (v73)
          {
            char v26 = 0;
            atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_29;
          }
        }
        else
        {
          unint64_t v25 = 0;
          *((unsigned char *)v72 + 432) = v22;
        }
        char v26 = 1;
LABEL_29:
        as::server::AudioSessionInfo::SetSpatialPreferences((uint64_t)v23, v62);
        if ((v26 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        int v27 = v72;
        if (!v72)
        {
          uint64_t v57 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v57);
        }
        long long v28 = v73;
        if (v73) {
          atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*((char *)v27 + 223) < 0) {
          std::string::__init_copy_ctor_external(&v71, *((const std::string::value_type **)v27 + 25), *((void *)v27 + 26));
        }
        else {
          std::string v71 = *(std::string *)((char *)v27 + 200);
        }
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)&__p, "key");
        p_p = &__p;
        char v83 = 1;
        uint64_t v68 = (char *)[v6 UTF8String];
        uint64_t v85 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v84, &v68);
        char v86 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)&__p, 2, 1, 2);
        *(void *)&buf[16] = buf;
        buf[24] = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)cf, "value");
        cf[2] = cf;
        char v76 = 1;
        id v29 = v10;
        unint64_t v67 = (char *)[v29 UTF8String];
        uint64_t v78 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v77, &v67);
        char v79 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v89 + 2, (uint64_t)cf, 2, 1, 2);
        v91[1] = (char *)&v89 + 2;
        char v92 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v69, (uint64_t)buf, 2, 1, 2);
        for (uint64_t i = 0; i != -8; i -= 4)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v89 + i * 8 + 2);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v91[i], *((unsigned __int8 *)&v89 + i * 8 + 2));
        }
        for (uint64_t j = 0; j != -64; j -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v77[j]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v77[j + 8], v77[j]);
        }
        for (uint64_t k = 0; k != -64; k -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v84[k]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v84[k + 8], v84[k]);
        }
        if (v7)
        {
          uint64_t v34 = *(id *)as::server::gSessionServerLog(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            int v35 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
            std::string::size_type v36 = v71.__r_.__value_.__r.__words[0];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v69, -1, 0x20u, 0, 0, &__p);
            char v37 = &v71;
            if (v35 < 0) {
              char v37 = (std::string *)v36;
            }
            if (SHIBYTE(p_p) >= 0) {
              char v38 = &__p;
            }
            else {
              char v38 = __p;
            }
            *(_DWORD *)audit_token_t buf = 136316162;
            *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 499;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = "handle_audio_category_change";
            __int16 v88 = 2080;
            v89 = v37;
            __int16 v90 = 2080;
            v91[0] = v38;
            _os_log_impl(&dword_1CFE2A000, v34, OS_LOG_TYPE_INFO, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
            if (SHIBYTE(p_p) < 0) {
              operator delete(__p);
            }
          }

          char v39 = v72;
          if (!v72)
          {
            uint64_t v59 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v59);
          }
          id v40 = v73;
          if (v73)
          {
            atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
            *((unsigned char *)v39 + 312) = 1;
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
            char v39 = v72;
            if (!v72)
            {
              uint64_t v60 = _os_crash();
              as::server::require_acq::AudioSessionServerSetClientPlayState(v60);
            }
            id v41 = v73;
            if (v73)
            {
              char v42 = 0;
              atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            else
            {
              char v42 = 1;
            }
          }
          else
          {
            id v41 = 0;
            char v42 = 1;
            *((unsigned char *)v72 + 312) = 1;
          }
          as::server::AudioSessionInfo::SetCachedCategory(v39, v29);
          if (v42) {
            goto LABEL_77;
          }
        }
        else
        {
          if (!v9) {
            goto LABEL_77;
          }
          long long v43 = *(id *)as::server::gSessionServerLog(v33);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            int v44 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
            std::string::size_type v45 = v71.__r_.__value_.__r.__words[0];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v69, -1, 0x20u, 0, 0, &__p);
            long long v46 = &v71;
            if (v44 < 0) {
              long long v46 = (std::string *)v45;
            }
            if (SHIBYTE(p_p) >= 0) {
              __int16 v47 = &__p;
            }
            else {
              __int16 v47 = __p;
            }
            *(_DWORD *)audit_token_t buf = 136316162;
            *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 503;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = "handle_audio_mode_change";
            __int16 v88 = 2080;
            v89 = v46;
            __int16 v90 = 2080;
            v91[0] = v47;
            _os_log_impl(&dword_1CFE2A000, v43, OS_LOG_TYPE_INFO, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
            if (SHIBYTE(p_p) < 0) {
              operator delete(__p);
            }
          }

          long long v48 = v72;
          if (!v72)
          {
            uint64_t v61 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v61);
          }
          id v41 = v73;
          if (v73) {
            atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          as::server::AudioSessionInfo::SetCachedMode(v48, v29);
          if (!v41) {
            goto LABEL_77;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
LABEL_77:
        long long v49 = v72;
        if (!v72)
        {
          uint64_t v58 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v58);
        }
        __int16 v50 = v73;
        if (v73)
        {
          atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
          __int16 v51 = (as::server *)*((id *)v49 + 12);
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        }
        else
        {
          std::string v52 = (as::server *)*((id *)v72 + 12);
          __int16 v51 = v52;
        }
        if (v72)
        {
          os_unfair_lock_unlock((os_unfair_lock_t)v72 + 158);
          char v74 = 0;
        }
        uint64_t v53 = as::server::GetAudioControlQueue(v52);
        v64[0] = MEMORY[0x1E4F143A8];
        v64[1] = 3221225472;
        v64[2] = ___ZN12_GLOBAL__N_135HandleCategoryOrModeChangedCallbackEjP8NSStringP12NSDictionary_block_invoke;
        v64[3] = &unk_1E6875A98;
        int v66 = (int)this;
        __int16 v54 = v51;
        uint64_t v65 = v54;
        as::server::DispatchBlock(v53, v64, 0, (uint64_t)"HandleCategoryOrModeChangedCallback", (uint64_t)"AudioSessionServerImpNotificationHandlers.mm", 519, 0, 0);

        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v70, v69[0]);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
LABEL_85:
        as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v72);

        goto LABEL_86;
      }
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
    else
    {
      uint64_t v14 = *(id *)as::server::gSessionServerLog((as::server *)isKindOfClass);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = (objc_class *)objc_opt_class();
        NSStringFromClass(v15);
        int v16 = (std::string *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)audit_token_t buf = 136315906;
        *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 461;
        *(_WORD *)&unsigned char buf[18] = 2112;
        *(void *)&buf[20] = v6;
        __int16 v88 = 2112;
        v89 = v16;
        _os_log_impl(&dword_1CFE2A000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid value type: key = %@, value type = %@", buf, 0x26u);
      }
    }
  }
  else
  {
    id v10 = *(id *)as::server::gSessionServerLog(v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)audit_token_t buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 455;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = [v6 UTF8String];
      _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed assertion. Unexpected CM notification key: %s", buf, 0x1Cu);
    }
  }
LABEL_86:
}

void sub_1CFE435AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,os_unfair_lock_s *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a19);
  if (a26 < 0) {
    operator delete(__p);
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a27);

  _Unwind_Resume(a1);
}

void as::server::GetSpatialPreferences(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  id v19 = v8;
  if (!v7)
  {
    uint64_t v18 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v18);
  }
  if ([v8 isEqualToString:*MEMORY[0x1E4F75AE0]]) {
    uint64_t v9 = 1836019574;
  }
  else {
    uint64_t v9 = 1936684398;
  }
  id v10 = [v7 spatialPreferencesForSession:a2 contentType:v9];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v11 = [v10 spatialAudioSources];
  unsigned __int8 v12 = 0;
  uint64_t v13 = [v11 countByEnumeratingWithState:&v20 objects:v32 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v21 != v14) {
          objc_enumerationMutation(v11);
        }
        if ([*(id *)(*((void *)&v20 + 1) + 8 * i) unsignedIntValue] == 1835824233) {
          unsigned __int8 v12 = 1;
        }
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v20 objects:v32 count:16];
    }
    while (v13);
  }

  uint64_t v17 = *(id *)as::server::gSessionServerLog(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)audit_token_t buf = 136315906;
    unint64_t v25 = "AudioSessionServerImpNotificationHandlers.mm";
    __int16 v26 = 1024;
    int v27 = 883;
    __int16 v28 = 1024;
    int v29 = v12;
    __int16 v30 = 1024;
    int v31 = a2;
    _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_INFO, "%25s:%-5d spatialEnabled is %d SessionID is 0x%x", buf, 0x1Eu);
  }
  *(void *)a4 = v10;
  *(unsigned char *)(a4 + 8) = v12;
}

void sub_1CFE439FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfo::SetSpatialPreferences(uint64_t a1, void *a2)
{
  id v3 = a2;
  std::optional<AVAudioSessionSpatialPreferences * {__strong}>::operator=[abi:ne180100]<AVAudioSessionSpatialPreferences * {__strong}&,void>(a1 + 440, &v3);
}

void sub_1CFE43A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::optional<AVAudioSessionSpatialPreferences * {__strong}>::operator=[abi:ne180100]<AVAudioSessionSpatialPreferences * {__strong}&,void>(uint64_t a1, id *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  id v4 = *a2;
  if (v3)
  {
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
  }
  else
  {
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

void ___ZN12_GLOBAL__N_136HandleInterruptionWithIDNotificationEjj_block_invoke(uint64_t a1)
{
  as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v17, *(_DWORD *)(a1 + 32));
  uint64_t v2 = v17;
  if (!v17) {
    goto LABEL_9;
  }
  int v3 = v18;
  if (!v18)
  {
    int v4 = *(_DWORD *)(v17 + 88);
LABEL_7:
    id v7 = (as::server *)*(id *)(v2 + 96);
    id v6 = v7;
    goto LABEL_8;
  }
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  int v4 = *(_DWORD *)(v2 + 88);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  uint64_t v2 = v17;
  if (!v17)
  {
    uint64_t v11 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v11);
  }
  uint64_t v5 = v18;
  if (!v18) {
    goto LABEL_7;
  }
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  id v6 = (as::server *)*(id *)(v2 + 96);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_8:
  id v8 = as::server::GetAudioControlQueue(v7);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = ___ZN12_GLOBAL__N_136HandleInterruptionWithIDNotificationEjj_block_invoke_2;
  v12[3] = &unk_1E6875AC0;
  int v14 = *(_DWORD *)(a1 + 32);
  uint64_t v9 = v6;
  uint64_t v13 = v9;
  int v10 = *(_DWORD *)(a1 + 36);
  int v15 = v4;
  int v16 = v10;
  as::server::DispatchBlock(v8, v12, 0, (uint64_t)"HandleInterruptionWithIDNotification_block_invoke", (uint64_t)"AudioSessionServerImpNotificationHandlers.mm", 604, 0, 0);

LABEL_9:
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
}

void sub_1CFE43C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

void as::server::DispatchBlock(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v15 = a1;
  int v16 = a2;
  uint64_t v17 = as::server::GetAudioControlQueue(v16);

  if (v17 == v15)
  {
    long long v30 = 0uLL;
    uint64_t v31 = 0;
    CreateACQDispatchID();
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = ___ZN2as6server13DispatchBlockEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvENS0_12DispatchTypeEPKcS8_iyy_block_invoke;
    uint64_t v20[3] = &unk_1E68759E8;
    if (a3) {
      id v19 = "dispatch_async_and_wait";
    }
    else {
      id v19 = "dispatch_async";
    }
    long long v22 = v30;
    uint64_t v23 = v31;
    char v24 = v19;
    uint64_t v25 = a4;
    uint64_t v26 = a5;
    int v29 = a6;
    uint64_t v27 = a7;
    uint64_t v28 = a8;
    long long v21 = v16;
    uint64_t v18 = (void *)MEMORY[0x1D25E1DE0](v20);
    MEMORY[0x1D25E0F40](&v30, 0, v19, a4, a5, a6, a7, a8);
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x1D25E1DE0](v16);
  }
  if (a3) {
    dispatch_async_and_wait(v15, v18);
  }
  else {
    dispatch_async(v15, v18);
  }
}

void sub_1CFE43E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id as::server::GetAudioControlQueue(as::server *this)
{
  int v1 = (void *)gAudioControlQueue;
  if (!gAudioControlQueue) {
    as::server::GetAudioControlQueue();
  }
  return v1;
}

id as::server::forbid_acq::CopyCMSessionAudioMode(as::server::forbid_acq *this, const void *a2)
{
  MXSessionCopyProperty();
  return 0;
}

BOOL as::server::AudioApplicationInfo::IsSessionTypeIgnored(int a1)
{
  return a1 == 1702392942 || a1 == 1935830119;
}

void *std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::emplace_back<std::shared_ptr<as::server::AudioSessionInfo>&>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  int v4 = a1 + 2;
  unint64_t v5 = v6;
  id v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)v4, v13);
    int v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v19[2] = v15 + 16;
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__swap_out_circular_buffer(a1, v19);
    uint64_t v9 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::~__split_buffer(v19);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_1CFE43FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<as::server::AudioSessionInfo,std::allocator<as::server::AudioSessionInfo>,as::server::SessionCreationDescription const&,NSXPCConnection * {__strong}&,objc_object  {objcproto28AVAudioSessionServerDelegate}* {__strong}&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x298uLL);
  uint64_t result = std::__shared_ptr_emplace<as::server::AudioSessionInfo>::__shared_ptr_emplace[abi:ne180100]<as::server::SessionCreationDescription const&,NSXPCConnection * {__strong}&,objc_object  {objcproto28AVAudioSessionServerDelegate}* {__strong}&,std::allocator<as::server::AudioSessionInfo>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1CFE44064(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<as::server::AudioSessionInfo>::__shared_ptr_emplace[abi:ne180100]<as::server::SessionCreationDescription const&,NSXPCConnection * {__strong}&,objc_object  {objcproto28AVAudioSessionServerDelegate}* {__strong}&,std::allocator<as::server::AudioSessionInfo>,0>(void *a1, uint64_t a2, void *a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F26886C8;
  as::server::AudioSessionInfo::AudioSessionInfo(a1 + 3, a2, *a3, *a4);
  return a1;
}

void sub_1CFE440C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void as::server::DeviceTimeObserver::createSession(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  unsigned int v41 = a2;
  as::server::DeviceTimeObserver::findSessionSlot((as::server::DeviceTimeObserver *)a1, a2, (uint64_t)&v42);
  if ((_BYTE)v44)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D25E15C0](exception, "DeviceTimeObserver: duplicate sessionID");
  }
  uint64_t v8 = a3 & 0xFF00000000;
  BOOL v9 = (a3 & 0xFF00000000) != 0;
  if ((a3 & 0xFF00000000) == 0)
  {
    uint64_t v18 = *a1;
    unint64_t v19 = a1[1];
    if (*a1 != v19)
    {
      uint64_t v20 = *a1;
      while (2)
      {
        unint64_t v21 = 0;
        uint64_t v22 = v20 + 56;
        do
        {
          uint64_t v23 = *(void *)(v22 + 8 * (v21 >> 6));
          if (((1 << v21) & v23) == 0)
          {
            *(void *)(v22 + 8 * (v21 >> 6)) = (1 << v21) | v23;
            goto LABEL_41;
          }
          ++v21;
        }
        while (v21 != 543);
        v20 += 128;
        if (v20 != v19) {
          continue;
        }
        break;
      }
    }
    uint64_t v24 = (uint64_t)(v19 - v18) >> 7;
    unint64_t v25 = a1[2];
    if (v19 >= v25)
    {
      unint64_t v27 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 57) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v25 - v18;
      if (v28 >> 6 > v27) {
        unint64_t v27 = v28 >> 6;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFF80) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      long long v46 = a1 + 2;
      if (v29) {
        long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::DeviceTimeObserver::SharedBlockOwner>>((uint64_t)(a1 + 2), v29);
      }
      else {
        long long v30 = 0;
      }
      char v42 = v30;
      long long v43 = (std::__shared_weak_count *)&v30[128 * v24];
      int v44 = v43;
      std::string::size_type v45 = &v30[128 * v29];
      as::server::DeviceTimeObserver::SharedBlockOwner::SharedBlockOwner((as::server::DeviceTimeObserver::SharedBlockOwner *)v43, (as::server::DeviceTimeObserver *)a1, v24);
      int v44 = (std::__shared_weak_count *)((char *)v44 + 128);
      std::vector<as::server::DeviceTimeObserver::SharedBlockOwner>::__swap_out_circular_buffer(a1, &v42);
      unint64_t v26 = a1[1];
      id v7 = (gsl::details *)std::__split_buffer<as::server::DeviceTimeObserver::SharedBlockOwner>::~__split_buffer((uint64_t)&v42);
    }
    else
    {
      id v7 = as::server::DeviceTimeObserver::SharedBlockOwner::SharedBlockOwner((as::server::DeviceTimeObserver::SharedBlockOwner *)a1[1], (as::server::DeviceTimeObserver *)a1, (uint64_t)(v19 - v18) >> 7);
      unint64_t v26 = v19 + 128;
      a1[1] = v26;
    }
    unint64_t v21 = 0;
    a1[1] = v26;
    uint64_t v20 = v26 - 128;
    unint64_t v31 = v26 - 72;
    while (1)
    {
      uint64_t v32 = *(void *)(v31 + 8 * (v21 >> 6));
      if (((1 << v21) & v32) == 0) {
        break;
      }
      if (++v21 == 543) {
        as::server::DeviceTimeObserver::createDevice();
      }
    }
    *(void *)(v31 + 8 * (v21 >> 6)) = (1 << v21) | v32;
LABEL_41:
    *(void *)&long long v39 = v20;
    DWORD2(v39) = v21;
    LOBYTE(v40) = 1;
    unint64_t v33 = 543 * *(void *)(v20 + 8) + v21;
    if (!HIDWORD(v33))
    {
      unint64_t v13 = (std::__shared_weak_count *)operator new(0x40uLL);
      v13->__shared_owners_ = 0;
      v13->__shared_weak_owners_ = 0;
      v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2688210;
      LODWORD(v13[1].__vftable) = v33;
      int v14 = (uint64_t **)&v13[1];
      unsigned int v34 = v41;
      BYTE4(v13[1].__vftable) = 1;
      LODWORD(v13[1].__shared_owners_) = v34;
      WORD2(v13[1].__shared_owners_) = 0;
      v13[2].__shared_owners_ = 0;
      v13[2].__vftable = 0;
      v13[1].__shared_weak_owners_ = (uint64_t)&v13[2];
      uint64_t v10 = a1 + 3;
LABEL_43:
      char v17 = 0;
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_44;
    }
LABEL_58:
    char v42 = &unk_1F2687EB0;
    gsl::details::terminate(v7);
  }
  as::server::DeviceTimeObserver::findSessionSlot((as::server::DeviceTimeObserver *)a1, a3, (uint64_t)&v39);
  if (!(_BYTE)v40)
  {
    *a4 = 0;
    a4[16] = 0;
    return;
  }
  v47[0] = a3;
  uint64_t v10 = a1 + 3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find(a1 + 3, v47, (uint64_t *)&v42);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  if (!v11 && v12) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v42 == (void *)(v11 + 32 * v12)) {
    as::server::DeviceTimeObserver::createSession();
  }
  int v14 = (uint64_t **)v42[1];
  unint64_t v13 = (std::__shared_weak_count *)v42[2];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v14)
  {
    uint64_t v35 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v35);
  }
  if (!*((unsigned char *)v14 + 4)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  unint64_t v15 = DWORD2(v39) + 543 * *(void *)(v39 + 8);
  if (HIDWORD(v15)) {
    goto LABEL_58;
  }
  if (*(_DWORD *)v14 != v15)
  {
    uint64_t v36 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v36);
  }
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v14 + 2, &v41, &v41);
  if (!v16)
  {
    uint64_t v37 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v37);
  }
  if (v13) {
    goto LABEL_43;
  }
  char v17 = 1;
LABEL_44:
  LODWORD(v42) = v41;
  long long v43 = (std::__shared_weak_count *)v14;
  int v44 = v13;
  LOWORD(v45) = 0;
  BYTE2(v45) = v9;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique(v10, (unsigned int *)&v42, (uint64_t)v47);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v8)
  {
    if (!(_BYTE)v40) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    as::server::DeviceTimeObserver::addSiblingToSameReferringSessionListsAsSource((as::server::DeviceTimeObserver *)a1, v41, (const as::server::DeviceTimeObserver::SessionSlot *)&v39);
  }
  *(_OWORD *)a4 = v39;
  *((void *)a4 + 2) = v40;
  if ((v17 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1CFE4451C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v16 + 8) = v17;
  _Unwind_Resume(exception_object);
}

void as::server::DeviceTimeObserver::findSessionSlot(as::server::DeviceTimeObserver *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v12 = a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find((uint64_t *)this + 3, &v12, &v13);
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *((void *)this + 4);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v13 == v5 + 32 * v6) {
    goto LABEL_10;
  }
  uint64_t v8 = *(int **)(v13 + 8);
  if (!*((unsigned char *)v8 + 4)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  unsigned int v9 = *v8;
  unint64_t v10 = v9 / 0x21FuLL;
  if (v10 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 7)
  {
LABEL_10:
    char v11 = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    *(void *)a3 = *(void *)this + (v10 << 7);
    *(_DWORD *)(a3 + 8) = v9 % 0x21F;
    char v11 = 1;
  }
  *(unsigned char *)(a3 + 16) = v11;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v14 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v13 = v4 + 32 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,false>,unsigned int>(&v14, &v13, a2, a3);
  uint64_t v9 = a1[1];
  if (*a1) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  if (!v10) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v11 = *a1 + 32 * v9;
  unsigned int v12 = (unsigned int *)*a3;
  if (*a3 != v11)
  {
    if (!v12) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v12) {
      *a3 = v11;
    }
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,false>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 5;
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[8 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 8;
        *a1 = v8 + 8;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v13 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v15 = (unsigned int *)v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = (unsigned int *)(v4 + 32 * v5);
  BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v15, &v14, a2, &v13);
  *(unsigned char *)(a3 + 8) = inserted;
  if (inserted)
  {
    unint64_t v15 = v13;
    uint64_t v10 = *a1;
    if (*a1 > (unint64_t)v13) {
      goto LABEL_15;
    }
    uint64_t v11 = a1[1];
    if (!v10 && v11) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    if ((unint64_t)v13 > v10 + 32 * v11) {
LABEL_15:
    }
      boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique();
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(a1, (uint64_t *)&v15, (const char *)1, (uint64_t)a2, (uint64_t *)&v14);
    unsigned int v12 = v14;
  }
  else
  {
    unsigned int v12 = v13;
    if (!*a1 && v13) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
  }
  *(void *)a3 = v12;
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  if (v7 < v6) {
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>();
  }
  uint64_t v10 = (_DWORD *)*a2;
  if (v7 - v6 < (unint64_t)a3)
  {
    uint64_t v15 = *a2;
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(a1, v15, a3, a4, a5);
  }
  else
  {
    if (v7 == v6) {
      boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>();
    }
    uint64_t v11 = *a1 + 32 * v6;
    if ((_DWORD *)v11 == v10)
    {
      _DWORD *v10 = *(_DWORD *)a4;
      *(_OWORD *)(v11 + 8) = *(_OWORD *)(a4 + 8);
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      __int16 v14 = *(_WORD *)(a4 + 24);
      *(unsigned char *)(v11 + 26) = *(unsigned char *)(a4 + 26);
      *(_WORD *)(v11 + 24) = v14;
      ++a1[1];
    }
    else
    {
      uint64_t v12 = v11 - 32;
      *(_DWORD *)uint64_t v11 = *(_DWORD *)(v11 - 32);
      *(_OWORD *)(v11 + 8) = *(_OWORD *)(v11 - 24);
      *(void *)(v11 - 24) = 0;
      *(void *)(v11 - 16) = 0;
      *(_WORD *)(v11 + 24) = *(_WORD *)(v11 - 8);
      *(unsigned char *)(v11 + 26) = *(unsigned char *)(v11 - 6);
      ++a1[1];
      if ((_DWORD *)(v11 - 32) != v10)
      {
        do
        {
          uint64_t v13 = (_DWORD *)(v12 - 32);
          boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>::operator=(v12, v12 - 32);
          uint64_t v12 = (uint64_t)v13;
        }
        while (v13 != v10);
      }
      boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>::operator=((uint64_t)v10, a4);
    }
    *a5 = *a2;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,true>,unsigned int>(&v12, &v11, a4, &v13);
  uint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,true>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 5;
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[8 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 8;
        *a1 = v8 + 8;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void as::server::AudioSessionInfo::SetCachedCategory(as::server::AudioSessionInfo *this, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  v6[0] = &unk_1F2688580;
  v6[1] = cf;
  OS::CF::String::AsStdString((OS::CF::String *)v6, &v5);
  uint64_t v4 = (void **)((char *)this + 344);
  if (*((char *)this + 367) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *((void *)this + 45) = *((void *)&v5.__r_.__value_.__l + 2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
}

void OS::CF::String::AsStdString(OS::CF::String *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  CFStringRef v3 = (const __CFString *)*((void *)this + 1);
  if (v3)
  {
    CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
    if (CStringPtr)
    {
      std::string::__assign_external(a2, CStringPtr);
    }
    else
    {
      maxBufLeuint64_t n = 0;
      CFStringRef v6 = (const __CFString *)*((void *)this + 1);
      v10.length = CFStringGetLength(v6);
      v10.locatiouint64_t n = 0;
      CFStringGetBytes(v6, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
      std::vector<char>::vector(&v8, maxBufLen + 1);
      CFStringRef v7 = (const __CFString *)*((void *)this + 1);
      v11.length = CFStringGetLength(v7);
      v11.locatiouint64_t n = 0;
      CFStringGetBytes(v7, v11, 0x8000100u, 0, 0, (UInt8 *)v8.__begin_, maxBufLen, &maxBufLen);
      v8.__begin_[maxBufLen] = 0;
      std::string::__assign_external(a2, v8.__begin_);
      if (v8.__begin_)
      {
        v8.__end_ = v8.__begin_;
        operator delete(v8.__begin_);
      }
    }
  }
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    CFStringRef v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    CFStringRef v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void OS::CF::UntypedObject::~UntypedObject(OS::CF::UntypedObject *this)
{
  *(void *)this = &unk_1F26885A0;
  int v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1D25E1860);
}

void as::server::LegacySessionManager::StartProcessMonitoring(os_unfair_lock_s *this, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  size_t v4 = this + 14;
  os_unfair_lock_lock(this + 14);
  CFStringRef v7 = *(char **)&this[18]._os_unfair_lock_opaque;
  unint64_t v6 = (uint64_t **)&this[18];
  std::string v5 = v7;
  if (v7)
  {
    std::vector<char> v8 = v6;
    do
    {
      int v9 = *((_DWORD *)v5 + 8);
      BOOL v10 = v9 < (int)a2;
      if (v9 >= (int)a2) {
        CFRange v11 = (char **)v5;
      }
      else {
        CFRange v11 = (char **)(v5 + 8);
      }
      if (!v10) {
        std::vector<char> v8 = (uint64_t **)v5;
      }
      std::string v5 = *v11;
    }
    while (*v11);
    if (v8 != v6 && *((_DWORD *)v8 + 8) <= (int)a2)
    {
      id v16 = 0;
      id v17 = 0;
LABEL_19:
      os_unfair_lock_unlock(v4);
      goto LABEL_20;
    }
  }
  uint64_t v12 = (void *)MEMORY[0x1E4F963E8];
  uint64_t v13 = (void *)MEMORY[0x1E4F96430];
  __int16 v14 = [NSNumber numberWithInt:a2];
  uint64_t v15 = [v13 predicateMatchingIdentifier:v14];
  id v25 = 0;
  id v16 = [v12 handleForPredicate:v15 error:&v25];
  id v17 = v25;

  if (!v16 || v17)
  {
    uint64_t v22 = *(id *)as::server::gSessionServerLog(v18);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)audit_token_t buf = 136315906;
      *(void *)unint64_t v27 = "ServerSessionManager.mm";
      *(_WORD *)&unsigned __int8 v27[8] = 1024;
      *(_DWORD *)&v27[10] = 1057;
      __int16 v28 = 1024;
      int v29 = a2;
      __int16 v30 = 2112;
      id v31 = v17;
      _os_log_impl(&dword_1CFE2A000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not create process handle for PID %d, error = %@", buf, 0x22u);
    }
    goto LABEL_19;
  }
  *(_DWORD *)audit_token_t buf = a2;
  id v16 = v16;
  *(void *)&v27[4] = v16;
  std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::__emplace_unique_key_args<int,std::pair<int,RBSProcessHandle * {__strong}>>(v6 - 1, (int *)buf, (uint64_t)buf);

  os_unfair_lock_unlock(v4);
  uint64_t v20 = *(id *)as::server::gSessionServerLog(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v21 = [v16 name];
    *(_DWORD *)audit_token_t buf = 136315906;
    *(void *)unint64_t v27 = "ServerSessionManager.mm";
    *(_WORD *)&unsigned __int8 v27[8] = 1024;
    *(_DWORD *)&v27[10] = 1063;
    __int16 v28 = 1024;
    int v29 = a2;
    __int16 v30 = 2112;
    id v31 = v21;
    _os_log_impl(&dword_1CFE2A000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Start process monitoring, pid = %d, name = %@", buf, 0x22u);
  }
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  _OWORD v23[2] = ___ZN2as6server20LegacySessionManager22StartProcessMonitoringEi_block_invoke;
  v23[3] = &__block_descriptor_36_e52_v24__0__RBSProcessHandle_8__RBSProcessExitContext_16l;
  int v24 = a2;
  [v16 monitorForDeath:v23];
  id v17 = 0;
LABEL_20:
}

void sub_1CFE45240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  std::string v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        std::vector<char> v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        std::string v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      std::string v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    std::vector<char> v8 = a1 + 1;
LABEL_10:
    BOOL v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::__emplace_unique_key_args<int,std::pair<int,RBSProcessHandle * {__strong}>>(uint64_t **a1, int *a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  std::string v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        std::vector<char> v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        std::string v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      std::string v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    std::vector<char> v8 = a1 + 1;
LABEL_10:
    BOOL v10 = operator new(0x30uLL);
    v10[8] = *(_DWORD *)a3;
    uint64_t v11 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *((void *)v10 + 5) = v11;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void as::server::AudioSessionInfo::SetCachedMode(as::server::AudioSessionInfo *this, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  v6[0] = &unk_1F2688580;
  v6[1] = cf;
  OS::CF::String::AsStdString((OS::CF::String *)v6, &v5);
  size_t v4 = (void **)((char *)this + 368);
  if (*((char *)this + 391) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)size_t v4 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *((void *)this + 48) = *((void *)&v5.__r_.__value_.__l + 2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
}

void __destroy_helper_block_ea8_32c168_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP32AVAudioSessionSpatialPreferencesEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  CFStringRef v3 = *(void **)(a1 + 32);
}

uint64_t __copy_helper_block_ea8_32c168_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP32AVAudioSessionSpatialPreferencesEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = MEMORY[0x1D25E1DE0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void as::server::AudioSessionInfo::AddSiblingSession(uint64_t a1, long long *a2)
{
  size_t v4 = (os_unfair_lock_s *)(a1 + 504);
  std::string v5 = (uint64_t *)(a1 + 512);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 504));
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::push_back[abi:ne180100](v5, a2);
  uint64_t v6 = *(void *)(a1 + 512);
  uint64_t v7 = *(void *)(a1 + 520);
  if (v6 != v7)
  {
    uint64_t v8 = v6 + 16;
    while (1)
    {
      int v9 = *(std::__shared_weak_count **)(v8 - 8);
      if (!v9) {
        break;
      }
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t shared_owners = v9->__shared_owners_;
      std::__shared_weak_count::__release_weak(v9);
      if (shared_owners == -1) {
        break;
      }
      BOOL v11 = v8 == v7;
      v8 += 16;
      if (v11)
      {
        uint64_t v6 = v7;
        goto LABEL_16;
      }
    }
    uint64_t v6 = v8 - 16;
    if (v8 - 16 != v7 && v8 != v7)
    {
      do
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v8 + 8);
        if (v12)
        {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v13 = v12->__shared_owners_;
          std::__shared_weak_count::__release_weak(v12);
          if (v13 != -1)
          {
            long long v14 = *(_OWORD *)v8;
            *(void *)uint64_t v8 = 0;
            *(void *)(v8 + 8) = 0;
            uint64_t v15 = *(std::__shared_weak_count **)(v6 + 8);
            *(_OWORD *)uint64_t v6 = v14;
            if (v15) {
              std::__shared_weak_count::__release_weak(v15);
            }
            v6 += 16;
          }
        }
        v8 += 16;
      }
      while (v8 != v7);
    }
  }
LABEL_16:
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::erase((uint64_t)v5, v6, *(long long **)(a1 + 520));
  os_unfair_lock_unlock(v4);
}

void sub_1CFE4567C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 16), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__swap_out_circular_buffer(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::weak_ptr<as::server::AudioSessionInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1CFE4579C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::weak_ptr<as::server::AudioSessionInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<as::server::AudioSessionInfo> *,std::weak_ptr<as::server::AudioSessionInfo> *,std::weak_ptr<as::server::AudioSessionInfo> *>((uint64_t)&v10, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void **std::__split_buffer<std::weak_ptr<as::server::AudioSessionInfo>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::weak_ptr<as::server::AudioSessionInfo>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    size_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void ___ZN2as6server13DispatchBlockEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvENS0_12DispatchTypeEPKcS8_iyy_block_invoke(uint64_t a1)
{
  MEMORY[0x1D25E0F40](a1 + 40, 1, *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned int *)(a1 + 104), *(void *)(a1 + 88), *(void *)(a1 + 96));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  JUMPOUT(0x1D25E0F40);
}

void sub_1CFE45A78(void *a1, int a2)
{
  size_t v4 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v5 = (as::server *)(*(uint64_t (**)(void *))(*(void *)v4 + 16))(v4);
    as::server::HandleDispatchBlockException(v5, *(const char **)(v2 + 72), *(const char **)(v2 + 80), (const char *)*(unsigned int *)(v2 + 104), *(void *)(v2 + 88), *(void *)(v2 + 96));
  }
  else
  {
    as::server::HandleDispatchBlockException((as::server *)"Unknown", *(const char **)(v2 + 72), *(const char **)(v2 + 80), (const char *)*(unsigned int *)(v2 + 104), *(void *)(v2 + 88), *(void *)(v2 + 96));
  }
  __break(1u);
}

void sub_1CFE45ADC(_Unwind_Exception *a1)
{
}

void ___ZN12_GLOBAL__N_136HandleInterruptionWithIDNotificationEjj_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  v3[0] = 1;
  int v4 = 3977;
  uint64_t v5 = v2;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  kdebug_trace();
  [*(id *)(a1 + 32) handleInterruptionWithID:*(unsigned int *)(a1 + 40) clientPID:*(unsigned int *)(a1 + 44) interruptionState:*(unsigned int *)(a1 + 48) interruptionInfo:0];
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)v3);
}

void sub_1CFE45B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_135HandleCategoryOrModeChangedCallbackEjP8NSStringP12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  v3[0] = 1;
  int v4 = 3978;
  uint64_t v5 = v2;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  kdebug_trace();
  [*(id *)(a1 + 32) handleCategoryOrModeChange:*(unsigned int *)(a1 + 40)];
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)v3);
}

void sub_1CFE45BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void ___ZN2as6server10forbid_acq24SetPropertiesOnMXSessionEjRK13audit_token_tP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS_30AVAudioSessionBatchSetStrategyEPU15__autoreleasingP7NSArrayIPS5_IS7_P8NSNumberEE_block_invoke(uint64_t a1, uint64_t a2, NSString *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = (as::server *)as::server::require_acq::AudioSessionServerUpdatePhoneCallDummyPlayerState((as::server::require_acq *)*(unsigned int *)(a1 + 40), *(void **)(a1 + 32), a3);
  if (v3)
  {
    int v4 = *(id *)as::server::gSessionServerLog(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      uint64_t v6 = "AudioSessionServerImp.mm";
      __int16 v7 = 1024;
      int v8 = 460;
      _os_log_impl(&dword_1CFE2A000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioSessionServerUpdatePhoneCallDummyPlayerState failed", (uint8_t *)&v5, 0x12u);
    }
  }
}

uint64_t as::server::require_acq::AudioSessionServerUpdatePhoneCallDummyPlayerState(as::server::require_acq *this, void *a2, NSString *a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v69, this);
  int v5 = v69;
  if (!v69)
  {
    uint64_t v17 = 561210739;
    uint64_t v18 = *(id *)as::server::gSessionServerLog(0);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_96;
    }
    LODWORD(buf[0]) = 136315650;
    *(CFTypeRef *)((char *)buf + 4) = "AudioSessionServerImpPlayState.mm";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 748;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = this;
    unint64_t v19 = "%25s:%-5d Cannot get session info for session ID: 0x%x";
    uint64_t v20 = v18;
    os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
    uint32_t v22 = 24;
LABEL_21:
    _os_log_impl(&dword_1CFE2A000, v20, v21, v19, (uint8_t *)buf, v22);
    goto LABEL_96;
  }
  uint64_t v6 = v70;
  if (v70) {
    atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v5, buf);
  int v8 = (as::server *)buf[0];
  if (buf[0]) {
    CFRelease(buf[0]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v8)
  {
    uint64_t v17 = 2003329396;
    uint64_t v23 = *(id *)as::server::gSessionServerLog(DefaultSubsessionRef);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_96;
    }
    LODWORD(buf[0]) = 136315394;
    *(CFTypeRef *)((char *)buf + 4) = "AudioSessionServerImpPlayState.mm";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 753;
    unint64_t v19 = "%25s:%-5d No valid CMSession";
    uint64_t v20 = v23;
    os_log_type_t v21 = OS_LOG_TYPE_DEBUG;
    uint32_t v22 = 18;
    goto LABEL_21;
  }
  uint64_t v9 = v69;
  if (!v69)
  {
    uint64_t v62 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v62);
  }
  uint64_t v10 = v70;
  if (v70)
  {
    atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
    id v11 = *((id *)v9 + 12);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (v11) {
      goto LABEL_12;
    }
LABEL_23:
    uint64_t v24 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v24);
  }
  id v11 = *((id *)v69 + 12);
  if (!v11) {
    goto LABEL_23;
  }
LABEL_12:
  uint64_t v12 = v69;
  if (!v69)
  {
    uint64_t v63 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v63);
  }
  char v13 = v70;
  if (v70)
  {
    atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    long long v14 = v69;
    if (!v69)
    {
      uint64_t v64 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v64);
    }
    long long v15 = v70;
    if (v70)
    {
      char v16 = 0;
      atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      char v16 = 1;
    }
  }
  else
  {
    long long v15 = 0;
    char v16 = 1;
    long long v14 = v69;
  }
  if (*((char *)v14 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v68, *((const std::string::value_type **)v14 + 25), *((void *)v14 + 26));
  }
  else {
    std::string v68 = *(std::string *)((char *)v14 + 200);
  }
  if ((v16 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v69)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)v69 + 158);
    char v71 = 0;
  }
  strcpy(v88, "set_property");
  id v25 = (int *)((char *)v12 + 316);
  if (([v4 isEqualToString:*MEMORY[0x1E4F75908]] & 1) != 0
    || [v4 isEqualToString:*MEMORY[0x1E4F75990]])
  {
    if (!as::server::IsSessionActive(v8, (const void *)1))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)__p, "primary_action");
      *(void *)((char *)&v80 + 2) = __p;
      BYTE10(v80) = 1;
      uint64_t v82 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v81 + 2, "set category");
      char v83 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
      buf[2] = buf;
      LOBYTE(buf[3]) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v72, "side_effect");
      uint64_t v73 = v72;
      char v74 = 1;
      uint64_t v76 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[89],char [89],0>((uint64_t)v75, "NOT setting Play state to Running for Phone/TTY since the session is not already active.");
      char v77 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&buf[4], (uint64_t)v72, 2, 1, 2);
      char v86 = &buf[4];
      char v87 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v66, (uint64_t)buf, 2, 1, 2);
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[i + 4]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[i + 5], LOBYTE(buf[i + 4]));
      }
      for (uint64_t j = 0; j != -64; j -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v75[j]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v75[j + 8], v75[j]);
      }
      for (uint64_t k = 0; k != -16; k -= 8)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v81[k] + 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v81[k + 2] + 2), BYTE2(v81[k]));
      }
      long long v43 = *(id *)as::server::gSessionServerLog(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        int v44 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
        std::string::size_type v45 = v68.__r_.__value_.__r.__words[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v66, -1, 0x20u, 0, 0, __p);
        long long v46 = &v68;
        if (v44 < 0) {
          long long v46 = (std::string *)v45;
        }
        if ((SBYTE9(v80) & 0x80u) == 0) {
          __int16 v47 = __p;
        }
        else {
          __int16 v47 = *(unsigned char **)__p;
        }
        LODWORD(buf[0]) = 136316162;
        *(CFTypeRef *)((char *)buf + 4) = "AudioSessionServerImpPlayState.mm";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = 790;
        WORD1(buf[2]) = 2080;
        *(CFTypeRef *)((char *)&buf[2] + 4) = v88;
        WORD2(buf[3]) = 2080;
        *(CFTypeRef *)((char *)&buf[3] + 6) = v46;
        HIWORD(buf[4]) = 2080;
        uint64_t v85 = v47;
        _os_log_impl(&dword_1CFE2A000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", (uint8_t *)buf, 0x30u);
        if (SBYTE9(v80) < 0) {
          operator delete(*(void **)__p);
        }
      }

      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v67, v66[0]);
      uint64_t v17 = 0;
      goto LABEL_93;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)__p, "primary_action");
    *(void *)((char *)&v80 + 2) = __p;
    BYTE10(v80) = 1;
    uint64_t v82 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v81 + 2, "set category");
    char v83 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
    buf[2] = buf;
    LOBYTE(buf[3]) = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v72, "side_effect");
    uint64_t v73 = v72;
    char v74 = 1;
    uint64_t v76 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[44],char [44],0>((uint64_t)v75, "Setting Play state to Running for Phone/TTY");
    char v77 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&buf[4], (uint64_t)v72, 2, 1, 2);
    char v86 = &buf[4];
    char v87 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v66, (uint64_t)buf, 2, 1, 2);
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[m + 4]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[m + 5], LOBYTE(buf[m + 4]));
    }
    for (uint64_t n = 0; n != -64; n -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v75[n]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v75[n + 8], v75[n]);
    }
    for (iuint64_t i = 0; ii != -16; ii -= 8)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v81[ii] + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v81[ii + 2] + 2), BYTE2(v81[ii]));
    }
    __int16 v30 = *(id *)as::server::gSessionServerLog(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      id v65 = v11;
      int v31 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
      std::string::size_type v32 = v68.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v66, -1, 0x20u, 0, 0, __p);
      unint64_t v33 = &v68;
      if (v31 < 0) {
        unint64_t v33 = (std::string *)v32;
      }
      if ((SBYTE9(v80) & 0x80u) == 0) {
        unsigned int v34 = __p;
      }
      else {
        unsigned int v34 = *(unsigned char **)__p;
      }
      LODWORD(buf[0]) = 136316162;
      *(CFTypeRef *)((char *)buf + 4) = "AudioSessionServerImpPlayState.mm";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = 772;
      WORD1(buf[2]) = 2080;
      *(CFTypeRef *)((char *)&buf[2] + 4) = v88;
      WORD2(buf[3]) = 2080;
      *(CFTypeRef *)((char *)&buf[3] + 6) = v33;
      HIWORD(buf[4]) = 2080;
      uint64_t v85 = v34;
      _os_log_impl(&dword_1CFE2A000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", (uint8_t *)buf, 0x30u);
      if (SBYTE9(v80) < 0) {
        operator delete(*(void **)__p);
      }
      id v11 = v65;
    }

    LOBYTE(buf[0]) = 1;
    HIDWORD(buf[0]) = 3975;
    buf[1] = (CFTypeRef)this;
    memset(&buf[2], 0, 24);
    kdebug_trace();
    atomic_store(1u, (unsigned __int8 *)v12 + 320);
    v72[0] = 0;
    uint64_t v35 = (as::server *)_MXSessionCopyProperty();
    int v36 = (int)v35;
    if (v35)
    {
      uint64_t v37 = *(id *)as::server::gSessionServerLog(v35);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "AudioSessionServerImpPlayState.mm";
        __int16 v79 = 1024;
        LODWORD(v80) = 172;
        WORD2(v80) = 2048;
        *(void *)((char *)&v80 + 6) = v8;
        HIWORD(v80) = 1024;
        v81[0] = v36;
        _os_log_impl(&dword_1CFE2A000, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ShouldSessionInputBeMuted _MXSessionCopyProperty for property kMXSessionProperty_ShouldInputBeMuted for subsession ref %p returned error %d", __p, 0x22u);
      }
      unsigned int v38 = 3;
    }
    else
    {
      uint64_t v57 = (void *)v72[0];
      uint64_t v58 = *(id *)as::server::gSessionServerLog(v35);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        int v59 = [v57 BOOLValue];
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "AudioSessionServerImpPlayState.mm";
        __int16 v79 = 1024;
        LODWORD(v80) = 176;
        WORD2(v80) = 1024;
        *(_DWORD *)((char *)&v80 + 6) = this;
        WORD5(v80) = 1024;
        HIDWORD(v80) = v59;
        _os_log_impl(&dword_1CFE2A000, v58, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MX set session 0x%x to input muted=%d", __p, 0x1Eu);
      }

      int v60 = [v57 BOOLValue];
      if (v60) {
        unsigned int v38 = 67;
      }
      else {
        unsigned int v38 = 3;
      }
    }
    uint64_t v17 = as::server::require_acq::AudioSessionServerSetClientPlayState(this, *v25, (AudioSession *)v25, v38, 1u, 0, 0);
    [v11 setTelephonyClientSessionID:this];
    goto LABEL_92;
  }
  uint64_t v17 = 0;
  if (atomic_exchange((atomic_uchar *volatile)v12 + 320, 0))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)__p, "primary_action");
    *(void *)((char *)&v80 + 2) = __p;
    BYTE10(v80) = 1;
    uint64_t v82 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v81 + 2, "set category");
    char v83 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
    buf[2] = buf;
    LOBYTE(buf[3]) = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v72, "side_effect");
    uint64_t v73 = v72;
    char v74 = 1;
    uint64_t v76 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[44],char [44],0>((uint64_t)v75, "Setting Play state to Stopped for Phone/TTY");
    char v77 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&buf[4], (uint64_t)v72, 2, 1, 2);
    char v86 = &buf[4];
    char v87 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v66, (uint64_t)buf, 2, 1, 2);
    for (juint64_t j = 0; jj != -8; jj -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[jj + 4]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[jj + 5], LOBYTE(buf[jj + 4]));
    }
    for (kuint64_t k = 0; kk != -64; kk -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v75[kk]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v75[kk + 8], v75[kk]);
    }
    for (muint64_t m = 0; mm != -16; mm -= 8)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v81[mm] + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v81[mm + 2] + 2), BYTE2(v81[mm]));
    }
    std::string v52 = *(id *)as::server::gSessionServerLog(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      int v53 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
      std::string::size_type v54 = v68.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v66, -1, 0x20u, 0, 0, __p);
      uint64_t v55 = &v68;
      if (v53 < 0) {
        uint64_t v55 = (std::string *)v54;
      }
      if ((SBYTE9(v80) & 0x80u) == 0) {
        uint64_t v56 = __p;
      }
      else {
        uint64_t v56 = *(unsigned char **)__p;
      }
      LODWORD(buf[0]) = 136316162;
      *(CFTypeRef *)((char *)buf + 4) = "AudioSessionServerImpPlayState.mm";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = 799;
      WORD1(buf[2]) = 2080;
      *(CFTypeRef *)((char *)&buf[2] + 4) = v88;
      WORD2(buf[3]) = 2080;
      *(CFTypeRef *)((char *)&buf[3] + 6) = v55;
      HIWORD(buf[4]) = 2080;
      uint64_t v85 = v56;
      _os_log_impl(&dword_1CFE2A000, v52, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", (uint8_t *)buf, 0x30u);
      if (SBYTE9(v80) < 0) {
        operator delete(*(void **)__p);
      }
    }

    LOBYTE(buf[0]) = 1;
    HIDWORD(buf[0]) = 3975;
    buf[1] = (CFTypeRef)this;
    memset(&buf[2], 0, 24);
    kdebug_trace();
    uint64_t v17 = as::server::require_acq::AudioSessionServerSetClientPlayState(this, *v25, (AudioSession *)v25, 3u, 0, 0, 0);
    [v11 setTelephonyClientSessionID:0];
LABEL_92:
    as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v67, v66[0]);
  }
LABEL_93:
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }

LABEL_96:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v69);

  return v17;
}

void sub_1CFE46970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, os_unfair_lock_s *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a11);
  if (a18 < 0) {
    operator delete(__p);
  }

  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a19);
  _Unwind_Resume(a1);
}

__CFString *AudioSession::ClientActiveModesToString(AudioSession *this)
{
  if (this)
  {
    char v1 = (char)this;
    uint64_t v2 = [MEMORY[0x1E4F28E78] string];
    CFStringRef v3 = v2;
    if ((v1 & 8) != 0) {
      [(__CFString *)v2 appendString:@"Active inter-app node "];
    }
    if ((v1 & 0x20) != 0) {
      [(__CFString *)v3 appendString:@"TCC Muted"];
    }
    if ((v1 & 0x10) != 0) {
      [(__CFString *)v3 appendString:@"Siri Listening "];
    }
    if ((v1 & 4) != 0) {
      [(__CFString *)v3 appendString:@"Processing "];
    }
    if ((v1 & 0x40) != 0) {
      [(__CFString *)v3 appendString:@"Muted"];
    }
    if (v1 < 0) {
      [(__CFString *)v3 appendString:@"Oneness Muted"];
    }
    if ((v1 & 3) == 3)
    {
      id v4 = @" Input/Output";
    }
    else
    {
      if (v1) {
        id v4 = @" Input";
      }
      else {
        id v4 = @" Output";
      }
      if ((v1 & 3) == 0) {
        goto LABEL_22;
      }
    }
    [(__CFString *)v3 appendString:v4];
  }
  else
  {
    CFStringRef v3 = @"Unknown";
  }
LABEL_22:
  return v3;
}

void sub_1CFE46E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE46F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D25E15C0](exception, "Could not construct");
    }
  }
  return this;
}

void sub_1CFE46FC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void sub_1CFE470B0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t as::server::DeviceTimeObserver::mapSessionToDevice(uint64_t *a1, unsigned int a2, int a3, const __CFString **a4, unint64_t a5)
{
  unsigned int v34 = a2;
  as::server::DeviceTimeObserver::findSessionSlot((as::server::DeviceTimeObserver *)a1, a2, (uint64_t)v33);
  if (!v33[16]) {
    return 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find(a1 + 3, &v34, v30);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = v30[0];
  if (v30[0] == v9 + 32 * v10) {
    return 0;
  }
  CFStringRef v13 = *a4;
  if (v13) {
    CFRetain(v13);
  }
  CFStringRef v32 = v13;
  uint64_t v14 = a1[6];
  uint64_t v15 = a1[7];
  if (v14 != v15)
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((CFTypeRef *)(v14 + 8), &v32))
    {
      v14 += 96;
      if (v14 == v15)
      {
        uint64_t v14 = v15;
        break;
      }
    }
    CFStringRef v13 = v32;
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14 == a1[7]) {
    return 0;
  }
  unint64_t v16 = as::server::DeviceTimeObserver::SessionSlot::sessionState((as::server::DeviceTimeObserver::SessionSlot *)v33);
  caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v16, (uint64_t)v30);
  uint64_t v17 = *(std::__shared_weak_count **)(v12 + 16);
  v27[0] = *(void *)(v12 + 8);
  v27[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  as::server::DeviceTimeObserver::getSourceAndSiblingIDs((uint64_t)v27, (uint64_t *)&v28);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v18 = v30;
  if (!a3) {
    uint64_t v18 = &v31;
  }
  unint64_t v19 = (gsl::details *)as::server::DeviceTimeObserver::removeReferringSessionsFromDevice((uint64_t)a1, a3, *(unsigned __int8 *)v18, &v28);
  if (0xAAAAAAAAAAAAAAABLL * ((v14 - a1[6]) >> 5) >= 0x100)
  {
    id v25 = &unk_1F2687EB0;
    gsl::details::terminate(v19);
  }
  if (a3)
  {
    as::server::DeviceTimeObserver::SessionSlot::setDeviceIndex((as::server::DeviceTimeObserver::SessionSlot *)v33, 1, *(unsigned char *)(v14 + 16), (-85 * ((v14 - a1[6]) >> 5)), a5);
    uint64_t v20 = (uint64_t *)(v14 + 24);
  }
  else
  {
    as::server::DeviceTimeObserver::SessionSlot::setDeviceIndex((as::server::DeviceTimeObserver::SessionSlot *)v33, 0, 0, (-85 * ((v14 - a1[6]) >> 5)), a5);
    uint64_t v20 = (uint64_t *)(v14 + 48);
  }
  uint32_t v22 = v28;
  if (v28 != v29)
  {
    do
    {
      unsigned int v26 = *((_DWORD *)v22 + 7);
      boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique(v20, &v26, (uint64_t)&v25);
      uint64_t v23 = v22[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = (void **)v23;
          uint64_t v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (void **)v22[2];
          BOOL v11 = *v24 == v22;
          uint32_t v22 = v24;
        }
        while (!v11);
      }
      uint32_t v22 = v24;
    }
    while (v24 != v29);
  }
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy((uint64_t)&v28, v29[0]);
  return 1;
}

void sub_1CFE47358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  BOOL v11 = 0;
  id v4 = (char *)*a1;
  uint64_t v5 = a1[1];
  CFStringRef v13 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)&v4[4 * v5];
  BOOL inserted = boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v13, &v12, a2, (unsigned int **)&v11);
  *(unsigned char *)(a3 + 8) = inserted;
  if (inserted)
  {
    CFStringRef v13 = v11;
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int const&>(a1, &v13, a2, (char **)&v12);
    uint64_t v10 = v12;
  }
  else
  {
    uint64_t v10 = (unsigned int *)v11;
    if (!*a1 && v11) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
  }
  *(void *)a3 = v10;
}

{
  char *v4;
  uint64_t v5;
  BOOL v6;
  BOOL inserted;
  unsigned int *v10;
  char *v11;
  unsigned int *v12;
  char *v13;

  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  BOOL v11 = 0;
  id v4 = (char *)*a1;
  uint64_t v5 = a1[1];
  CFStringRef v13 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (unsigned int *)&v4[4 * v5];
  BOOL inserted = boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v13, &v12, a2, (unsigned int **)&v11);
  *(unsigned char *)(a3 + 8) = inserted;
  if (inserted)
  {
    CFStringRef v13 = v11;
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int>(a1, &v13, a2, (char **)&v12);
    uint64_t v10 = v12;
  }
  else
  {
    uint64_t v10 = (unsigned int *)v11;
    if (!*a1 && v11) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
  }
  *(void *)a3 = v10;
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int const&>(uint64_t *a1@<X0>, char **a2@<X1>, _DWORD *a3@<X2>, char **a4@<X8>)
{
  id v4 = *a2;
  uint64_t v5 = *a1;
  if (*a1 > (unint64_t)*a2) {
    goto LABEL_16;
  }
  unint64_t v7 = a1[1];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v9 = (char *)(v5 + 4 * v7);
  if (v4 > v9) {
LABEL_16:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique();
  unint64_t v10 = a1[2];
  if (v10 < v7) {
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>();
  }
  if (v10 == v7)
  {
    uint64_t v14 = *a2;
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>(a1, v14, (const char *)1, a3, a4);
  }
  else
  {
    if (v9 == v4)
    {
      *(_DWORD *)id v4 = *a3;
      a1[1] = v7 + 1;
    }
    else
    {
      *(_DWORD *)uint64_t v9 = *((_DWORD *)v9 - 1);
      a1[1] = v7 + 1;
      uint64_t v12 = v4;
      if (v9 - 4 != v4)
      {
        memmove(v4 + 4, v4, v9 - 4 - v4);
        uint64_t v12 = *a2;
      }
      *(_DWORD *)id v4 = *a3;
      id v4 = v12;
    }
    *a4 = v4;
  }
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>(uint64_t *a1@<X0>, char *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 61) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = (char *)operator new(4 * v11);
  boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>((uint64_t)a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = &a2[*a1 - v10];
}

unint64_t boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 - v2 >= (unint64_t)a2) {
    boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>();
  }
  unint64_t v4 = 0x1FFFFFFFFFFFFFFFLL;
  if (0x1FFFFFFFFFFFFFFFLL - v3 < (unint64_t)&a2[v2 - v3]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v3 >> 61;
  unint64_t v6 = 8 * v3;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  uint64_t v9 = &a2[v2];
  if (v8 < 0x1FFFFFFFFFFFFFFFLL) {
    unint64_t v4 = v8;
  }
  if ((unint64_t)v9 <= v4) {
    return v4;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>(uint64_t a1, char *__dst, uint64_t a3, char *__src, uint64_t a5, _DWORD *a6)
{
  uint64_t v10 = *(char **)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>(a1, *(char **)a1, __src, (char *)(*(void *)a1 + 4 * *(void *)(a1 + 8)), __dst, a5, a6);
  if (v10) {
    operator delete(*(void **)a1);
  }
  uint64_t v11 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = __dst;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = a3;
}

void sub_1CFE47768(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,true>,unsigned int>(&v12, &v11, a4, &v13);
  uint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,true>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  unint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 2;
    unsigned int v6 = *a3;
    unint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[v5 >> 1];
      if (*v8 < v6)
      {
        unint64_t v4 = v8 + 1;
        *a1 = v8 + 1;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>(int a1, char *a2, char *__src, char *a4, char *__dst, uint64_t a6, _DWORD *a7)
{
  uint64_t v9 = __dst;
  if (a2 && a2 != __src && __dst)
  {
    uint64_t v12 = (char *)(__src - a2);
    memmove(__dst, a2, __src - a2);
    uint64_t v9 = &v12[(void)v9];
  }
  if (a6 != 1) {
    boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>();
  }
  *(_DWORD *)uint64_t v9 = *a7;
  if (__src && __src != a4)
  {
    memmove(v9 + 4, __src, a4 - __src);
  }
}

uint64_t as::server::DeviceTimeObserver::removeReferringSessionsFromDevice(uint64_t result, int a2, unsigned int a3, void *a4)
{
  if (a3 != 255)
  {
    uint64_t v4 = *(void *)(result + 48);
    uint64_t v5 = *(void *)(result + 56);
    result += 48;
    if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 5) <= a3) {
      std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
    }
    unsigned int v6 = (unsigned int *)(a4 + 1);
    unint64_t v7 = (unsigned int *)*a4;
    if ((void *)*a4 != a4 + 1)
    {
      uint64_t v8 = v4 + 96 * a3;
      uint64_t v9 = 48;
      if (a2) {
        uint64_t v9 = 24;
      }
      uint64_t v10 = (uint64_t *)(v8 + v9);
      do
      {
        uint64_t result = boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::erase_unique(v10, v7 + 7);
        if (result != 1) {
          as::server::DeviceTimeObserver::removeReferringSessionsFromDevice();
        }
        uint64_t v11 = (unsigned int *)*((void *)v7 + 1);
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            uint64_t v11 = *(unsigned int **)v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (unsigned int *)*((void *)v7 + 2);
            BOOL v13 = *(void *)v12 == (void)v7;
            unint64_t v7 = v12;
          }
          while (!v13);
        }
        unint64_t v7 = v12;
      }
      while (v12 != v6);
    }
  }
  return result;
}

uint64_t **as::server::DeviceTimeObserver::getSourceAndSiblingIDs@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3 = std::set<unsigned int>::set[abi:ne180100](a2, *(void *)a1 + 16);
  return std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, (unsigned int *)(*(void *)a1 + 8), (_DWORD *)(*(void *)a1 + 8));
}

void sub_1CFE47AB4(_Unwind_Exception *a1)
{
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1CFE47B0C(_Unwind_Exception *a1)
{
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, v4 + 7, v4 + 7);
      unint64_t v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  unsigned int v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          os_log_type_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      os_log_type_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t as::server::DeviceTimeObserver::createDevice(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (as::server::DeviceTimeObserver *)a1;
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  unsigned int v6 = a1 + 6;
  if (v7 != v8)
  {
    while (1)
    {
      a1 = (uint64_t *)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((CFTypeRef *)(v7 + 8), (const __CFString **)(a2 + 8));
      if (!a1 || *(_DWORD *)v7 == *(_DWORD *)a2) {
        break;
      }
      v7 += 96;
      if (v7 == v8)
      {
        uint64_t v7 = v8;
        break;
      }
    }
    if (v7 != *((void *)v5 + 7))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D25E15C0](exception, "DeviceTimeObserver: duplicate DeviceKey");
    }
  }
  unint64_t v9 = *(void *)v5;
  unint64_t v10 = *((void *)v5 + 1);
  if (*(void *)v5 != v10)
  {
    unint64_t v11 = *(void *)v5;
    while (2)
    {
      unint64_t v12 = 0;
      unint64_t v13 = v11 + 40;
      do
      {
        uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 6));
        if (((1 << v12) & v14) == 0)
        {
          *(void *)(v13 + 8 * (v12 >> 6)) = (1 << v12) | v14;
          goto LABEL_31;
        }
        ++v12;
      }
      while (v12 != 66);
      v11 += 128;
      if (v11 != v10) {
        continue;
      }
      break;
    }
  }
  uint64_t v15 = (uint64_t)(v10 - v9) >> 7;
  unint64_t v16 = *((void *)v5 + 2);
  if (v10 >= v16)
  {
    unint64_t v18 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 57) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = v16 - v9;
    if (v19 >> 6 > v18) {
      unint64_t v18 = v19 >> 6;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    *(void *)long long v39 = (char *)v5 + 16;
    if (v20) {
      os_log_type_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::DeviceTimeObserver::SharedBlockOwner>>((uint64_t)v5 + 16, v20);
    }
    else {
      os_log_type_t v21 = 0;
    }
    *(void *)&long long v36 = v21;
    *((void *)&v36 + 1) = &v21[128 * v15];
    unsigned int v38 = &v21[128 * v20];
    as::server::DeviceTimeObserver::SharedBlockOwner::SharedBlockOwner(*((as::server::DeviceTimeObserver::SharedBlockOwner **)&v36 + 1), v5, v15);
    uint64_t v37 = *((void *)&v36 + 1) + 128;
    std::vector<as::server::DeviceTimeObserver::SharedBlockOwner>::__swap_out_circular_buffer((uint64_t *)v5, &v36);
    unint64_t v17 = *((void *)v5 + 1);
    a1 = (uint64_t *)std::__split_buffer<as::server::DeviceTimeObserver::SharedBlockOwner>::~__split_buffer((uint64_t)&v36);
  }
  else
  {
    a1 = (uint64_t *)as::server::DeviceTimeObserver::SharedBlockOwner::SharedBlockOwner(*((as::server::DeviceTimeObserver::SharedBlockOwner **)v5 + 1), v5, (uint64_t)(v10 - v9) >> 7);
    unint64_t v17 = v10 + 128;
    *((void *)v5 + 1) = v17;
  }
  unint64_t v12 = 0;
  *((void *)v5 + 1) = v17;
  unint64_t v11 = v17 - 128;
  unint64_t v22 = v17 - 88;
  while (1)
  {
    uint64_t v23 = *(void *)(v22 + 8 * (v12 >> 6));
    if (((1 << v12) & v23) == 0) {
      break;
    }
    if (++v12 == 66) {
      as::server::DeviceTimeObserver::createDevice();
    }
  }
  *(void *)(v22 + 8 * (v12 >> 6)) = (1 << v12) | v23;
LABEL_31:
  v43[0] = v11;
  v43[1] = v12;
  unint64_t v24 = 66 * *(void *)(v11 + 8) + v12;
  if (v24 >= 0x100)
  {
    *(void *)&long long v36 = &unk_1F2687EB0;
    gsl::details::terminate((gsl::details *)a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v5 + 7) - *((void *)v5 + 6)) >> 5) <= v24) {
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::resize(v6, v24 + 1);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN2as6server18DeviceTimeObserver8TimeInfoENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v34);
  *(_OWORD *)long long v39 = 0uLL;
  long long v25 = v34;
  long long v40 = 0u;
  LODWORD(v36) = *(_DWORD *)a2;
  *((void *)&v36 + 1) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  LOBYTE(v37) = *(unsigned char *)(a2 + 16);
  unsigned int v38 = 0;
  long long v41 = v25;
  uint64_t v35 = 0;
  long long v34 = 0uLL;
  uint64_t v26 = *((void *)v5 + 6);
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v5 + 7) - v26) >> 5);
  *(void *)&v39[16] = 0;
  uint64_t v42 = 0;
  if (v27 <= v24) {
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
  }
  std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::operator=[abi:ne180100](v26 + 96 * v24, (uint64_t)&v36);
  uint64_t v28 = v42;
  uint64_t v42 = 0;
  if (v28) {
    std::default_delete<as::server::DeviceLatencyPoll>::operator()[abi:ne180100]((uint64_t)&v42, v28);
  }
  if (*((void *)&v41 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
  }
  if (*((void *)&v40 + 1)) {
    operator delete(*(void **)&v39[16]);
  }
  if (*(void *)&v39[8]) {
    operator delete(v38);
  }
  if (*((void *)&v36 + 1)) {
    CFRelease(*((CFTypeRef *)&v36 + 1));
  }
  uint64_t v29 = v35;
  uint64_t v35 = 0;
  if (v29) {
    std::default_delete<as::server::DeviceLatencyPoll>::operator()[abi:ne180100]((uint64_t)&v35, v29);
  }
  if (*((void *)&v34 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
  }
  *(void *)&long long v36 = 0;
  *((void *)&v36 + 1) = a3;
  uint64_t v30 = __udivti3();
  unsigned int v38 = 0;
  *(void *)long long v39 = 0;
  uint64_t v37 = v30;
  *(_OWORD *)&unsigned char v39[8] = xmmword_1CFE88FE0;
  unint64_t v31 = as::server::DeviceTimeObserver::DeviceSlot::timestamp((as::server::DeviceTimeObserver::DeviceSlot *)v43);
  caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::store(v31, &v36);
  return v43[0];
}

void sub_1CFE4820C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  *(void *)(v18 + 8) = v19;
  _Unwind_Resume(exception_object);
}

CFComparisonResult applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(CFTypeRef *a1, const __CFString **a2)
{
  CFStringRef v3 = (const __CFString *)*a1;
  if (*a1)
  {
    CFRetain(*a1);
    CFStringRef v4 = *a2;
    if (!v4)
    {
      CFComparisonResult v5 = kCFCompareGreaterThan;
LABEL_9:
      CFRelease(v3);
      return v5;
    }
  }
  else
  {
    CFStringRef v4 = *a2;
    if (!*a2) {
      return 0;
    }
  }
  CFRetain(v4);
  if (v3) {
    CFComparisonResult v5 = CFStringCompare(v3, v4, 0);
  }
  else {
    CFComparisonResult v5 = kCFCompareLessThan;
  }
  CFRelease(v4);
  if (v3) {
    goto LABEL_9;
  }
  return v5;
}

uint64_t std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::Data::operator=((void *)(a1 + 24), (void *)(a2 + 24));
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::Data::operator=((void *)(a1 + 48), (void *)(a2 + 48));
  long long v5 = *(_OWORD *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  uint64_t v8 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v7;
  if (v8) {
    std::default_delete<as::server::DeviceLatencyPoll>::operator()[abi:ne180100](a1 + 88, v8);
  }
  return a1;
}

void *boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::Data::operator=(void *a1, void *a2)
{
  if (a2 != a1) {
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_move_assign<boost::container::new_allocator<unsigned int>>(a1, a2);
  }
  return a1;
}

__n128 boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_move_assign<boost::container::new_allocator<unsigned int>>(void *a1, void *a2)
{
  if (a1 == a2 && a2[1]) {
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_move_assign<boost::container::new_allocator<unsigned int>>();
  }
  a1[1] = 0;
  uint64_t v4 = (void *)*a1;
  if (*a1) {
    operator delete(v4);
  }
  *a1 = *a2;
  __n128 result = *(__n128 *)(a2 + 1);
  *(__n128 *)(a1 + 1) = result;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::TimeInfo>::__on_zero_shared_weak()
{
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN2as6server18DeviceTimeObserver8TimeInfoENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x140uLL, (std::align_val_t)0x40uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN2as6server18DeviceTimeObserver8TimeInfoENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_((uint64_t)v2);
  *a1 = v2 + 64;
  a1[1] = v2;
  return result;
}

void sub_1CFE484A0(_Unwind_Exception *a1)
{
  MEMORY[0x1D25E1850](v1, 64);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN2as6server18DeviceTimeObserver8TimeInfoENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(uint64_t result)
{
  uint64_t v1 = 0;
  *(_OWORD *)(result + 8) = 0u;
  *(void *)uint64_t result = &unk_1F2688248;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 304) = 0u;
  *(void *)(result + 64) = 0x40E7700000000000;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  do
  {
    uint64_t v2 = result + v1;
    *(_DWORD *)(v2 + 192) = 0;
    *(unsigned char *)(v2 + 200) = 0;
    *(unsigned char *)(v2 + 224) = 0;
    v1 += 64;
  }
  while (v1 != 128);
  return result;
}

id as::server::DeviceTimeObserver::DeviceSlot::timestampWriter(as::server::DeviceTimeObserver::DeviceSlot *this)
{
  unint64_t v2 = as::server::DeviceTimeObserver::DeviceSlot::timestamp(this);
  uint64_t v3 = **(void **)this;
  uint64_t v4 = *(void *)(v3 + 48);
  unint64_t v5 = *((unsigned int *)this + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v3 + 56) - v4) >> 5) <= v5) {
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = v4 + 96 * v5;
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 80);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  v11[2] = ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke;
  v11[3] = &__block_descriptor_56_ea8_40c67_ZTSNSt3__110shared_ptrIN2as6server18DeviceTimeObserver8TimeInfoEEE_e53_v16__0r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_8l;
  v11[4] = v2;
  v11[5] = v7;
  unint64_t v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = (void *)MEMORY[0x1D25E1DE0](v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v9;
}

unint64_t as::server::DeviceTimeObserver::DeviceSlot::timestamp(as::server::DeviceTimeObserver::DeviceSlot *this)
{
  unint64_t v2 = caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((caulk::ipc::mapped_memory *)(*(void *)this + 16), 0);
  unsigned int v3 = *((_DWORD *)this + 2);
  if (v3 >= 0x42) {
    std::__throw_out_of_range[abi:ne180100]("array::at");
  }
  return v2 + 136 * v3 + 56480;
}

void as::server::DeviceTimeObserver::SessionSlot::setDeviceIndex(as::server::DeviceTimeObserver::SessionSlot *this, int a2, char a3, unsigned int a4, unint64_t a5)
{
  unint64_t v10 = as::server::DeviceTimeObserver::SessionSlot::sessionState(this);
  caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v10, (uint64_t)v33);
  if (a2) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = 1;
  }
  unint64_t v13 = LOBYTE(v33[v12]);
  if (v13 != a4)
  {
    if (v13 == 255)
    {
      char v14 = 0;
      v30[0] = 0;
    }
    else
    {
      unint64_t v15 = as::server::DeviceTimeObserver::SharedBlockOwner::deviceTimeAtIdx(*(as::server::DeviceTimeObserver::SharedBlockOwner **)this, v13);
      caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load(v15, (uint64_t)v30);
      char v14 = 1;
    }
    char v32 = v14;
    if (a4 == 255)
    {
      char v16 = 0;
      v27[0] = 0;
    }
    else
    {
      unint64_t v17 = as::server::DeviceTimeObserver::SharedBlockOwner::deviceTimeAtIdx(*(as::server::DeviceTimeObserver::SharedBlockOwner **)this, a4);
      caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load(v17, (uint64_t)v27);
      char v16 = 1;
      unint64_t v11 = v28;
    }
    unint64_t v18 = v31;
    if (v31 <= a5) {
      unint64_t v18 = a5;
    }
    if (v13 == 255) {
      unint64_t v19 = a5;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19 <= v11) {
      unint64_t v20 = v11;
    }
    else {
      unint64_t v20 = v19;
    }
    if (a4 == 255) {
      unint64_t v21 = v19;
    }
    else {
      unint64_t v21 = v20;
    }
    char v29 = v16;
    if (v13 == 255)
    {
      uint64_t v22 = __udivti3();
    }
    else
    {
      as::util::interpolateTimeStamp((uint64_t)v30, v21, (uint64_t)v35);
      uint64_t v22 = v36;
    }
    if (a2) {
      uint64_t v23 = 8;
    }
    else {
      uint64_t v23 = 24;
    }
    uint64_t v24 = *(void *)((char *)v33 + v23) + v22;
    if (a4 == 255)
    {
      uint64_t v25 = __udivti3();
    }
    else
    {
      as::util::interpolateTimeStamp((uint64_t)v27, v20, (uint64_t)v35);
      uint64_t v25 = v36;
    }
    LOBYTE(v33[v12]) = a4;
    *(void *)((char *)v33 + v23) = v24 - v25;
    if (a2) {
      char v34 = a3;
    }
    unint64_t v26 = as::server::DeviceTimeObserver::SessionSlot::sessionState(this);
    caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::store(v26, v33);
  }
}

uint64_t ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int v3 = *(_DWORD *)(a2 + 56);
  if ((~v3 & 3) == 0)
  {
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load(*(void *)(result + 32), (uint64_t)&v30);
    _X0 = 0;
    LOBYTE(v30) = 1;
    _X1 = 0;
    __asm { CASPAL          X0, X1, X0, X1, [X9] }
    unint64_t v16 = atomic_load((unint64_t *)(*(void *)(v2 + 40) + 16));
    BYTE1(v30) = 0;
    double v17 = 1.0;
    if ((*(unsigned char *)(a2 + 56) & 4) != 0) {
      double v17 = *(double *)(a2 + 16);
    }
    uint64_t v33 = *(void *)&v17;
    unint64_t v18 = *(void **)(v2 + 40);
    *((void *)&v32 + 1) = *v18;
    *(void *)&long long v32 = v16;
    unint64_t v19 = atomic_load(v18 + 1);
    *((void *)&v31 + 1) = v19;
    caulk::concurrent::atomic_value<std::optional<as::server::DeviceTimeObserver::AnchorInfo>,2,6>::load(*(void *)(v2 + 40) + 64, (uint64_t)&v27);
    if (v29)
    {
      double v20 = *(double *)a2;
      if (*(double *)a2 >= (double)*((unint64_t *)&v27 + 1) && v20 >= (double)v28)
      {
        if (v28 < *((void *)&v27 + 1)) {
          ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke_cold_2();
        }
        *((void *)&v30 + 1) = *(void *)(a2 + 8);
        unint64_t v28 = (unint64_t)v20;
        uint64_t v25 = *(double **)(v2 + 40);
        if (*v25 == 0.0) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = llround(1000000000.0 / *v25 * (double)((unint64_t)v20 - *((void *)&v27 + 1)));
        }
        *(void *)&long long v31 = v26 + v27;
        goto LABEL_13;
      }
      char v29 = 0;
    }
    unint64_t v21 = *(void *)(a2 + 8);
    if (v21 < *((void *)&v30 + 1)) {
      ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke_cold_1();
    }
    uint64_t v22 = v31;
    uint64_t v23 = __udivti3();
    *((void *)&v30 + 1) = v21;
    *(void *)&long long v31 = v22 + v23;
    unint64_t v24 = (unint64_t)*(double *)a2;
    *(void *)&long long v27 = v22 + v23;
    *((void *)&v27 + 1) = v24;
    unint64_t v28 = v24;
    char v29 = 1;
    uint64_t v25 = *(double **)(v2 + 40);
LABEL_13:
    caulk::concurrent::atomic_value<std::optional<as::server::DeviceTimeObserver::AnchorInfo>,2,6>::store((uint64_t)(v25 + 8), &v27);
    return caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::store(*(void *)(v2 + 32), &v30);
  }
  if (!v3)
  {
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load(*(void *)(result + 32), (uint64_t)&v30);
    LOWORD(v30) = 0;
    uint64_t v33 = 0x3FF0000000000000;
    uint64_t v12 = *(void *)(v2 + 32);
    unint64_t v13 = atomic_load((unint64_t *)(*(void *)(v2 + 40) + 16));
    *(void *)&long long v32 = v13;
    unint64_t v14 = atomic_load((unint64_t *)(*(void *)(v2 + 40) + 8));
    *((void *)&v31 + 1) = v14;
    caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::store(v12, &v30);
    uint64_t v15 = *(void *)(v2 + 40) + 64;
    LOBYTE(v27) = 0;
    char v29 = 0;
    return caulk::concurrent::atomic_value<std::optional<as::server::DeviceTimeObserver::AnchorInfo>,2,6>::store(v15, &v27);
  }
  return result;
}

__n128 caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)a1);
  if (v3)
  {
    int v15 = 0;
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)a1);
    if ((v6 & 1) == 0) {
LABEL_13:
    }
      caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load();
    uint64_t v7 = a1 + 8;
    while (1)
    {
      unsigned int v8 = atomic_load_explicit((atomic_uint *volatile)(a1 + 4), memory_order_acquire) - 1;
      char v9 = 1;
      while (1)
      {
        char v10 = v9;
        uint64_t v11 = v7 + ((unint64_t)(v8 & 1) << 6);
        unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v11, memory_order_acquire);
        if (explicit) {
          break;
        }
        char v9 = 0;
        LOBYTE(v8) = v8 - 1;
        if ((v10 & 1) == 0) {
          goto LABEL_12;
        }
      }
      long long v13 = *(_OWORD *)(v11 + 24);
      *(_OWORD *)a2 = *(_OWORD *)(v11 + 8);
      *(_OWORD *)(a2 + 16) = v13;
      __n128 result = *(__n128 *)(v11 + 40);
      *(__n128 *)(a2 + 32) = result;
      *(void *)(a2 + 48) = *(void *)(v11 + 56);
      __dmb(9u);
      if (explicit == *(_DWORD *)v11) {
        break;
      }
      caulk::concurrent::details::spinloop::spin((uint64_t)&v15);
LABEL_12:
      unsigned __int8 v14 = atomic_load((unsigned __int8 *)a1);
      if ((v14 & 1) == 0) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::store(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  int v17 = 0;
  uint64_t v3 = result + 8;
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(result + 4), 1u);
  unint64_t v5 = result + 8 + ((unint64_t)(add & 1) << 6);
  int v6 = 2 * add;
  atomic_store(2 * add, (unsigned int *)v5);
  long long v7 = *a2;
  long long v8 = a2[1];
  long long v9 = a2[2];
  *(void *)(v5 + 56) = *((void *)a2 + 6);
  *(_OWORD *)(v5 + 40) = v9;
  *(_OWORD *)(v5 + 24) = v8;
  *(_OWORD *)(v5 + 8) = v7;
  __dmb(0xBu);
  atomic_compare_exchange_strong((atomic_uint *volatile)v5, (unsigned int *)&v6, (2 * add) | 1);
  if (v6 != 2 * add)
  {
    do
    {
      __n128 result = caulk::concurrent::details::spinloop::spin((uint64_t)&v17);
      unsigned int v11 = atomic_fetch_add((atomic_uint *volatile)(v2 + 4), 1u);
      unint64_t v12 = v3 + ((unint64_t)(v11 & 1) << 6);
      int v13 = 2 * v11;
      atomic_store(2 * v11, (unsigned int *)v12);
      long long v14 = *a2;
      long long v15 = a2[1];
      long long v16 = a2[2];
      *(void *)(v12 + 56) = *((void *)a2 + 6);
      *(_OWORD *)(v12 + 40) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + 8) = v14;
      __dmb(0xBu);
      atomic_compare_exchange_strong((atomic_uint *volatile)v12, (unsigned int *)&v13, (2 * v11) | 1);
    }
    while (v13 != 2 * v11);
  }
  atomic_store(1u, (unsigned __int8 *)v2);
  return result;
}

__n128 caulk::concurrent::atomic_value<std::optional<as::server::DeviceTimeObserver::AnchorInfo>,2,6>::load@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)a1);
  if (v3)
  {
    int v15 = 0;
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)a1);
    if ((v5 & 1) == 0) {
LABEL_13:
    }
      caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load();
    uint64_t v6 = a1 + 64;
    while (1)
    {
      unsigned int v7 = atomic_load_explicit((atomic_uint *volatile)(a1 + 4), memory_order_acquire) - 1;
      char v8 = 1;
      while (1)
      {
        char v9 = v8;
        uint64_t v10 = v6 + ((unint64_t)(v7 & 1) << 6);
        unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v10, memory_order_acquire);
        if (explicit) {
          break;
        }
        char v8 = 0;
        LOBYTE(v7) = v7 - 1;
        if ((v9 & 1) == 0) {
          goto LABEL_12;
        }
      }
      __n128 result = *(__n128 *)(v10 + 8);
      long long v13 = *(_OWORD *)(v10 + 24);
      *(__n128 *)a2 = result;
      *(_OWORD *)(a2 + 16) = v13;
      __dmb(9u);
      if (explicit == *(_DWORD *)v10) {
        break;
      }
      caulk::concurrent::details::spinloop::spin((uint64_t)&v15);
LABEL_12:
      unsigned __int8 v14 = atomic_load((unsigned __int8 *)a1);
      if ((v14 & 1) == 0) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t caulk::concurrent::atomic_value<std::optional<as::server::DeviceTimeObserver::AnchorInfo>,2,6>::store(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  int v13 = 0;
  uint64_t v3 = result + 64;
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(result + 4), 1u);
  unint64_t v5 = result + 64 + ((unint64_t)(add & 1) << 6);
  int v6 = 2 * add;
  atomic_store(2 * add, (unsigned int *)v5);
  long long v7 = *a2;
  *(_OWORD *)(v5 + 17) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)(v5 + 8) = v7;
  __dmb(0xBu);
  atomic_compare_exchange_strong((atomic_uint *volatile)v5, (unsigned int *)&v6, (2 * add) | 1);
  if (v6 != 2 * add)
  {
    do
    {
      __n128 result = caulk::concurrent::details::spinloop::spin((uint64_t)&v13);
      unsigned int v9 = atomic_fetch_add((atomic_uint *volatile)(v2 + 4), 1u);
      unint64_t v10 = v3 + ((unint64_t)(v9 & 1) << 6);
      int v11 = 2 * v9;
      atomic_store(2 * v9, (unsigned int *)v10);
      long long v12 = *a2;
      *(_OWORD *)(v10 + 17) = *(long long *)((char *)a2 + 9);
      *(_OWORD *)(v10 + 8) = v12;
      __dmb(0xBu);
      atomic_compare_exchange_strong((atomic_uint *volatile)v10, (unsigned int *)&v11, (2 * v9) | 1);
    }
    while (v11 != 2 * v9);
  }
  atomic_store(1u, (unsigned __int8 *)v2);
  return result;
}

void as::server::DeviceTimeObserver::addSiblingToSameReferringSessionListsAsSource(as::server::DeviceTimeObserver *this, unsigned int a2, const as::server::DeviceTimeObserver::SessionSlot *a3)
{
  unsigned int v11 = a2;
  unint64_t v4 = as::server::DeviceTimeObserver::SessionSlot::sessionState(a3);
  caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v4, (uint64_t)v9);
  if (v10 != 255)
  {
    uint64_t v5 = *((void *)this + 6);
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 7) - v5) >> 5) <= v10) {
      std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
    }
    boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique((uint64_t *)(v5 + 96 * v10 + 48), &v11, (uint64_t)&v7);
    if (!v8) {
      as::server::DeviceTimeObserver::addSiblingToSameReferringSessionListsAsSource();
    }
  }
  if (v9[0] != 255)
  {
    uint64_t v6 = *((void *)this + 6);
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 7) - v6) >> 5) <= v9[0]) {
      std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
    }
    boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique((uint64_t *)(v6 + 96 * v9[0] + 24), &v11, (uint64_t)&v7);
    if (!v8) {
      as::server::DeviceTimeObserver::addSiblingToSameReferringSessionListsAsSource();
    }
  }
}

unint64_t as::server::DeviceTimeObserver::SessionSlot::sessionState(as::server::DeviceTimeObserver::SessionSlot *this)
{
  unint64_t v2 = caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((caulk::ipc::mapped_memory *)(*(void *)this + 16), 0);
  unsigned int v3 = *((_DWORD *)this + 2);
  if (v3 >= 0x21F) {
    std::__throw_out_of_range[abi:ne180100]("array::at");
  }
  return v2 + 104 * v3 + 8;
}

unint64_t caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>(caulk::ipc::mapped_memory *a1, unint64_t a2)
{
  if (a2 + 65456 > *((void *)a1 + 1))
  {
    _os_assert_log();
    uint64_t v3 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v3);
  }
  return caulk::ipc::mapped_memory::get_raw_ptr(a1, a2);
}

__n128 caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)a1);
  if (v3)
  {
    int v15 = 0;
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)a1);
    if ((v5 & 1) == 0) {
LABEL_13:
    }
      caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load();
    uint64_t v6 = a1 + 8;
    while (1)
    {
      unsigned int v7 = atomic_load_explicit((atomic_uint *volatile)(a1 + 4), memory_order_acquire) - 1;
      char v8 = 1;
      while (1)
      {
        char v9 = v8;
        unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v6 + 48 * (v7 & 1)), memory_order_acquire);
        if (explicit) {
          break;
        }
        char v8 = 0;
        LOBYTE(v7) = v7 - 1;
        if ((v9 & 1) == 0) {
          goto LABEL_12;
        }
      }
      uint64_t v11 = v6 + 48 * (v7 & 1);
      __n128 result = *(__n128 *)(v11 + 8);
      long long v13 = *(_OWORD *)(v11 + 24);
      *(__n128 *)a2 = result;
      *(_OWORD *)(a2 + 16) = v13;
      *(void *)(a2 + 32) = *(void *)(v11 + 40);
      __dmb(9u);
      if (explicit == *(_DWORD *)v11) {
        break;
      }
      caulk::concurrent::details::spinloop::spin((uint64_t)&v15);
LABEL_12:
      unsigned __int8 v14 = atomic_load((unsigned __int8 *)a1);
      if ((v14 & 1) == 0) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = -1;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = -1;
    *(void *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::store(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  int v15 = 0;
  uint64_t v3 = result + 8;
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(result + 4), 1u);
  uint64_t v5 = result + 8 + 48 * (add & 1);
  int v6 = 2 * add;
  atomic_store(2 * add, (unsigned int *)v5);
  long long v7 = *a2;
  long long v8 = a2[1];
  *(unsigned char *)(v5 + 40) = *((unsigned char *)a2 + 32);
  *(_OWORD *)(v5 + 24) = v8;
  *(_OWORD *)(v5 + 8) = v7;
  __dmb(0xBu);
  atomic_compare_exchange_strong((atomic_uint *volatile)v5, (unsigned int *)&v6, (2 * add) | 1);
  if (v6 != 2 * add)
  {
    do
    {
      __n128 result = caulk::concurrent::details::spinloop::spin((uint64_t)&v15);
      unsigned int v10 = atomic_fetch_add((atomic_uint *volatile)(v2 + 4), 1u);
      uint64_t v11 = v3 + 48 * (v10 & 1);
      int v12 = 2 * v10;
      atomic_store(2 * v10, (unsigned int *)v11);
      long long v13 = *a2;
      long long v14 = a2[1];
      *(unsigned char *)(v11 + 40) = *((unsigned char *)a2 + 32);
      *(_OWORD *)(v11 + 24) = v14;
      *(_OWORD *)(v11 + 8) = v13;
      __dmb(0xBu);
      atomic_compare_exchange_strong((atomic_uint *volatile)v11, (unsigned int *)&v12, (2 * v10) | 1);
    }
    while (v12 != 2 * v10);
  }
  atomic_store(1u, (unsigned __int8 *)v2);
  return result;
}

unint64_t as::server::DeviceTimeObserver::SharedBlockOwner::deviceTimeAtIdx(as::server::DeviceTimeObserver::SharedBlockOwner *this, unint64_t a2)
{
  unint64_t v3 = caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((as::server::DeviceTimeObserver::SharedBlockOwner *)((char *)this + 16), 0);
  if (a2 >= 0x42) {
    std::__throw_out_of_range[abi:ne180100]("array::at");
  }
  return v3 + 136 * a2 + 56480;
}

uint64_t as::util::interpolateTimeStamp@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(void *)(result + 8);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v4)
  {
    double v7 = 1.0;
    uint64_t v8 = *(void *)(result + 40);
    if (*(unsigned char *)result) {
      double v7 = *(double *)(result + 48);
    }
    unint64_t v9 = llround((double)v5 * 41.6666667 * v7) + *(void *)(result + 16);
    *(unsigned char *)a3 = *(unsigned char *)result;
    *(unsigned char *)(a3 + 1) = *(unsigned char *)(result + 1);
    *(void *)(a3 + 8) = a2;
    *(void *)(a3 + 16) = v9;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(result + 24);
    *(void *)(a3 + 40) = v8;
    *(double *)(a3 + 48) = v7;
  }
  else
  {
    long long v6 = *(_OWORD *)(result + 16);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
    *(void *)(a3 + 48) = *(void *)(result + 48);
  }
  return result;
}

const __CFBoolean *applesauce::CF::convert_as<double,0>(const __CFNumber *a1)
{
  if (a1)
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a1)) {
      return (const __CFBoolean *)applesauce::CF::details::number_convert_as<double>(a1);
    }
  }
  return applesauce::CF::details::treat_as_BOOL_for_convert_as<double>(a1);
}

unint64_t applesauce::CF::details::number_convert_as<double>(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v6 = a1;
      CFNumberType v7 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v8 = a1;
      CFNumberType v9 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      uint64_t valuePtr = 0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberSInt64Type;
      goto LABEL_23;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v12 = a1;
      CFNumberType v13 = kCFNumberFloat32Type;
      goto LABEL_19;
    case kCFNumberFloat64Type:
      uint64_t valuePtr = 0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberFloat64Type;
      goto LABEL_31;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      BOOL v16 = CFNumberGetValue(v2, v3, &valuePtr) == 0;
      int v17 = (char)valuePtr;
      goto LABEL_15;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v6 = a1;
      CFNumberType v7 = kCFNumberShortType;
LABEL_12:
      BOOL v16 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      int v17 = (__int16)valuePtr;
      goto LABEL_15;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v8 = a1;
      CFNumberType v9 = kCFNumberIntType;
LABEL_14:
      BOOL v16 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      int v17 = valuePtr;
LABEL_15:
      double v18 = (double)v17;
      goto LABEL_24;
    case kCFNumberLongType:
      uint64_t valuePtr = 0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberLongType;
      goto LABEL_23;
    case kCFNumberLongLongType:
      uint64_t valuePtr = 0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberLongLongType;
      goto LABEL_23;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v12 = a1;
      CFNumberType v13 = kCFNumberFloatType;
LABEL_19:
      BOOL v16 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      double v18 = *(float *)&valuePtr;
      goto LABEL_24;
    case kCFNumberDoubleType:
      uint64_t valuePtr = 0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberDoubleType;
      goto LABEL_31;
    case kCFNumberCFIndexType:
      uint64_t valuePtr = 0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberCFIndexType;
      goto LABEL_23;
    case kCFNumberNSIntegerType:
      uint64_t valuePtr = 0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberNSIntegerType;
LABEL_23:
      BOOL v16 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      double v18 = (double)valuePtr;
LABEL_24:
      double v5 = v18;
      goto LABEL_25;
    case kCFNumberCGFloatType:
      uint64_t valuePtr = 0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberCGFloatType;
LABEL_31:
      BOOL v16 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      double v5 = *(double *)&valuePtr;
LABEL_25:
      if (v16) {
        double v5 = 0.0;
      }
      unint64_t v4 = *(void *)&v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      unint64_t v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return LOBYTE(v5) | v4;
}

double as::server::require_acq::GetAudioQueueOptions(as::server::require_acq *this, char *a2, AudioSessionDuckingInfo *a3)
{
  _MXSessionCopyProperty();
  double result = 0.0078125;
  *(void *)(a2 + 4) = 0x3F80000000000000;
  *a2 = 0;
  return result;
}

void sub_1CFE495A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

float applesauce::CF::at_or<float,__CFString const* const&>(const __CFDictionary *a1, const void **a2, uint64_t a3)
{
  CFDictionaryRef v4 = applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v4) {
    return *(float *)a3;
  }
  uint64_t v5 = applesauce::CF::convert_as<float,0>(v4);
  float result = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0) {
    return *(float *)a3;
  }
  return result;
}

const __CFDictionary *applesauce::CF::details::at_key<__CFString const* const&>(const __CFDictionary *result, const void **a2)
{
  if (result)
  {
    CFNumberRef v2 = *a2;
    if (v2) {
      return (const __CFDictionary *)CFDictionaryGetValue(result, v2);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t applesauce::CF::convert_as<float,0>(const __CFNumber *a1)
{
  if (a1)
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a1)) {
      return applesauce::CF::details::number_convert_as<float>(a1);
    }
  }
  return applesauce::CF::details::treat_as_BOOL_for_convert_as<float>(a1);
}

uint64_t applesauce::CF::details::number_convert_as<float>(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt32Type;
      goto LABEL_15;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberSInt64Type;
      goto LABEL_23;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloat32Type;
      goto LABEL_19;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v15 = a1;
      CFNumberType v16 = kCFNumberFloat64Type;
      goto LABEL_25;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      int v18 = SLOBYTE(valuePtr);
      goto LABEL_13;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberShortType;
LABEL_12:
      int Value = CFNumberGetValue(v7, v8, &valuePtr);
      int v18 = SLOWORD(valuePtr);
LABEL_13:
      float v19 = (float)v18;
      goto LABEL_26;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberIntType;
LABEL_15:
      int Value = CFNumberGetValue(v9, v10, &valuePtr);
      float v19 = (float)SLODWORD(valuePtr);
      goto LABEL_26;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberLongType;
      goto LABEL_23;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberLongLongType;
      goto LABEL_23;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloatType;
LABEL_19:
      int Value = CFNumberGetValue(v13, v14, &valuePtr);
      uint64_t v20 = LODWORD(valuePtr);
      goto LABEL_27;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v15 = a1;
      CFNumberType v16 = kCFNumberDoubleType;
      goto LABEL_25;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberCFIndexType;
      goto LABEL_23;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberNSIntegerType;
LABEL_23:
      int Value = CFNumberGetValue(v11, v12, &valuePtr);
      float v19 = (float)*(uint64_t *)&valuePtr;
      goto LABEL_26;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v15 = a1;
      CFNumberType v16 = kCFNumberCGFloatType;
LABEL_25:
      int Value = CFNumberGetValue(v15, v16, &valuePtr);
      float v19 = valuePtr;
LABEL_26:
      uint64_t v20 = LODWORD(v19);
LABEL_27:
      uint64_t v6 = v20 | 0x100000000;
      if (!Value) {
        uint64_t v6 = 0;
      }
      int v4 = v6 & 0xFFFFFF00;
      uint64_t v5 = v6 & 0x100000000;
      break;
    default:
      int v4 = 0;
      uint64_t v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

void sub_1CFE49960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v53[4] = *MEMORY[0x1E4F143B8];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 24) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v8 = a1[6];
  uint64_t v7 = a1[7];
  if (v8 != v7)
  {
    while (*(_DWORD *)v8 != a2)
    {
      v8 += 96;
      if (v8 == v7) {
        return;
      }
    }
  }
  if (v8 != v7)
  {
    int v9 = *(unsigned __int8 *)(v8 + 16);
    *(unsigned char *)(a4 + 24) = v9;
    uint64_t v10 = v8 + 24;
    _ZF = v9 == 0;
    uint64_t v11 = 24;
    if (_ZF)
    {
      uint64_t v11 = 48;
      uint64_t v10 = v8 + 48;
    }
    CFNumberType v12 = *(int **)(v8 + v11);
    uint64_t v13 = *(void *)(v10 + 8);
    if (v12) {
      _ZF = 1;
    }
    else {
      _ZF = v13 == 0;
    }
    if (!_ZF) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    if (v13)
    {
      CFNumberRef v15 = &v12[v13];
      while (1)
      {
        if (!v12) {
          __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
        }
        int v16 = *v12;
        LODWORD(v52) = *v12;
        boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find(a1 + 3, (unsigned int *)&v52, v53);
        uint64_t v17 = a1[3];
        uint64_t v18 = a1[4];
        if (v17) {
          BOOL v19 = 1;
        }
        else {
          BOOL v19 = v18 == 0;
        }
        if (!v19) {
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        }
        uint64_t v20 = v53[0];
        if (v53[0] == v17 + 32 * v18) {
          goto LABEL_54;
        }
        if (*(unsigned char *)(v8 + 16)) {
          uint64_t v21 = 25;
        }
        else {
          uint64_t v21 = 24;
        }
        if (!*(unsigned char *)(v53[0] + v21)) {
          goto LABEL_48;
        }
        uint64_t v22 = *(void *)(v53[0] + 8);
        if (*(unsigned char *)(v22 + 12)) {
          goto LABEL_27;
        }
        if (a3 == 1)
        {
          char v26 = 1;
          goto LABEL_53;
        }
        if (a3 == 2) {
          break;
        }
LABEL_54:
        if (++v12 == v15) {
          goto LABEL_57;
        }
      }
      char v26 = *(unsigned char *)(v22 + 13);
      if (!v26) {
        goto LABEL_53;
      }
LABEL_27:
      unint64_t v24 = *(_DWORD **)(a4 + 8);
      unint64_t v23 = *(void *)(a4 + 16);
      if ((unint64_t)v24 >= v23)
      {
        long long v27 = *(_DWORD **)a4;
        uint64_t v28 = ((uint64_t)v24 - *(void *)a4) >> 2;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = v23 - (void)v27;
        if (v30 >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a4 + 16, v31);
          long long v27 = *(_DWORD **)a4;
          unint64_t v24 = *(_DWORD **)(a4 + 8);
        }
        else
        {
          long long v32 = 0;
        }
        uint64_t v33 = &v32[4 * v28];
        *(_DWORD *)uint64_t v33 = v16;
        uint64_t v25 = v33 + 4;
        while (v24 != v27)
        {
          int v34 = *--v24;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        *(void *)a4 = v33;
        *(void *)(a4 + 8) = v25;
        *(void *)(a4 + 16) = &v32[4 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *unint64_t v24 = v16;
        uint64_t v25 = v24 + 1;
      }
      *(void *)(a4 + 8) = v25;
LABEL_48:
      if (a3 == 1)
      {
        char v26 = 1;
LABEL_52:
        uint64_t v22 = *(void *)(v20 + 8);
LABEL_53:
        *(unsigned char *)(v22 + 13) = v26;
        goto LABEL_54;
      }
      if (a3 == 2)
      {
        char v26 = 0;
        goto LABEL_52;
      }
      goto LABEL_54;
    }
LABEL_57:
    if (a3 == 1)
    {
      uint64_t v47 = *(void *)(v8 + 72);
      uint64_t v36 = *(std::__shared_weak_count **)(v8 + 80);
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v48 = *(void *)(v47 + 32);
      do
      {
        _X2 = 0;
        _X5 = *(void *)(v47 + 40);
        __asm { CASPAL          X4, X5, X2, X3, [X8] }
        _ZF = _X4 == v48;
        uint64_t v48 = _X4;
      }
      while (!_ZF);
      if (!*(unsigned char *)(v8 + 16))
      {
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        operator new();
      }
    }
    else
    {
      if (a3 != 2) {
        return;
      }
      uint64_t v35 = *(void *)(v8 + 72);
      uint64_t v36 = *(std::__shared_weak_count **)(v8 + 80);
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = *(void *)(v35 + 32);
      do
      {
        _X2 = 0;
        _X5 = *(void *)(v35 + 40);
        __asm { CASPAL          X4, X5, X2, X3, [X9] }
        _ZF = _X4 == v37;
        uint64_t v37 = _X4;
      }
      while (!_ZF);
      uint64_t v46 = *(void *)(v8 + 88);
      std::string::size_type v45 = (void *)(v8 + 88);
      uint64_t v44 = v46;
      void *v45 = 0;
      if (v46) {
        std::default_delete<as::server::DeviceLatencyPoll>::operator()[abi:ne180100]((uint64_t)v45, v44);
      }
    }
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
  }
}

void sub_1CFE49DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x1D25E1860](v6, 0x20C40A4A59CD2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v8 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100](void *a1)
{
  CFNumberRef v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *as::server::DeviceLatencyPoll::DeviceLatencyPoll(void *a1, int a2, uint64_t a3)
{
  int v7 = a2;
  std::allocate_shared[abi:ne180100]<as::server::DeviceLatencyPoll::Impl,std::allocator<as::server::DeviceLatencyPoll::Impl>,unsigned int &,std::function<void ()(unsigned long long)> &,void>(&v7, a3, a1);
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    as::server::DeviceLatencyPoll::dispatch(v6, 3);
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    as::server::DeviceLatencyPoll::dispatch(v6, 3);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<as::server::DeviceLatencyPoll::Impl,std::allocator<as::server::DeviceLatencyPoll::Impl>,unsigned int &,std::function<void ()(unsigned long long)> &,void>@<X0>(int *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x50uLL);
  float result = std::__shared_ptr_emplace<as::server::DeviceLatencyPoll::Impl>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,std::function<void ()(unsigned long long)> &,std::allocator<as::server::DeviceLatencyPoll::Impl>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1CFE49FC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<as::server::DeviceLatencyPoll::Impl>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,std::function<void ()(unsigned long long)> &,std::allocator<as::server::DeviceLatencyPoll::Impl>,0>(void *a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F2688628;
  std::construct_at[abi:ne180100]<as::server::DeviceLatencyPoll::Impl,unsigned int &,std::function<void ()(unsigned long long)> &,as::server::DeviceLatencyPoll::Impl*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1CFE4A024(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<as::server::DeviceLatencyPoll::Impl,unsigned int &,std::function<void ()(unsigned long long)> &,as::server::DeviceLatencyPoll::Impl*>(uint64_t a1, int *a2, uint64_t a3)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
  as::server::DeviceLatencyPoll::Impl::Impl(a1, v4, (uint64_t)v6);
  std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_1CFE4A0B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t as::server::DeviceLatencyPoll::Impl::Impl(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100](a1 + 8, a3);
  *(_DWORD *)(a1 + 40) = 2;
  mach_absolute_time();
  *(void *)(a1 + 48) = __udivti3();
  return a1;
}

void sub_1CFE4A13C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F2688280;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1CFE4A4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a13);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

BOOL as::server::ConstAudioSessionInfo::HasBooleanEntitlement(as::server::ConstAudioSessionInfo *this, const char *a2)
{
  return as::server::ProcessIdentity::ProcessHasEntitlement((as::server::ConstAudioSessionInfo *)((char *)this + 52), a2);
}

BOOL as::server::ProcessIdentity::ProcessHasEntitlement(as::server::ProcessIdentity *this, const char *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  as::server::ProcessIdentity::SecurityTask(this, (SecTaskRef *)&cf);
  uint64_t v5 = (__SecTask *)cf;
  if (cf) {
    goto LABEL_6;
  }
  uint64_t v6 = *(id *)as::server::gSessionServerLog(v4);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    int v7 = *((_DWORD *)this + 9);
    *(_DWORD *)audit_token_t buf = 136315650;
    *(void *)&uint8_t buf[4] = "AudioSessionInfo.mm";
    __int16 v14 = 1024;
    int v15 = 195;
    __int16 v16 = 1024;
    int v17 = v7;
    _os_log_impl(&dword_1CFE2A000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Entitlements could not be checked for PID %d. No audit token provided.", buf, 0x18u);
  }
  uint64_t v5 = (__SecTask *)cf;
  if (!cf) {
    return 0;
  }
LABEL_6:
  uint64_t v8 = [NSString stringWithUTF8String:a2];
  CFTypeRef v9 = SecTaskCopyValueForEntitlement(v5, v8, 0);
  *(void *)audit_token_t buf = v9;
  buf[8] = 1;
  if (v9) {
    BOOL v10 = CFEqual(v9, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
  }
  else {
    BOOL v10 = 0;
  }
  CACFBoolean::~CACFBoolean((CACFBoolean *)buf);

  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

void sub_1CFE4A6F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ObjectRef<__SecTask *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::PrivateAddSessionToApplication(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  long long v7 = *(_OWORD *)(*a3 + 68);
  long long v46 = *(_OWORD *)(*a3 + 52);
  long long v47 = v7;
  uint64_t v48 = *(void *)(v6 + 84);
  uint64_t v8 = (void *)(v6 + 128);
  if (*(char *)(v6 + 151) < 0 && (uint64_t v8 = (void *)*v8) == 0)
  {
    uint64_t v11 = @"[implicit] (?)";
  }
  else
  {
    CFTypeRef v9 = [NSString stringWithUTF8String:v8];
    BOOL v10 = @"(non-UTF8)";
    if (v9) {
      BOOL v10 = v9;
    }
    uint64_t v11 = [NSString stringWithFormat:@"[implicit] %@", v10];
  }
  id v37 = 0;
  CFNumberType v12 = v11;
  unsigned int v38 = v12;
  long long v39 = v46;
  long long v40 = v47;
  long long v42 = v46;
  long long v43 = v47;
  uint64_t v41 = v48;
  uint64_t v44 = v48;
  uint64_t v45 = 1886546285;
  as::server::LegacySessionManager::PrivateFindOrCreatePrimaryApplication(a1, a2, (uint64_t)&v37, 0, (uint64_t)&v34);
  uint64_t v13 = v34;
  if (!v34)
  {
    uint64_t v27 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v27);
  }
  if (!v36)
  {
    __int16 v14 = (std::__shared_weak_count *)a3[1];
    uint64_t v32 = *a3;
    uint64_t v33 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v15 = as::server::AudioApplicationInfo::AddSession(v13, &v32);
    __int16 v16 = (as::server *)v33;
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v15)
    {
      int v17 = *(id *)as::server::gSessionServerLog(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = (void *)(*a3 + 176);
        if (*(char *)(*a3 + 199) < 0) {
          uint64_t v18 = (void *)*v18;
        }
        BOOL v19 = as::server::AudioApplicationInfo::DebugString(v13);
        *(_DWORD *)audit_token_t buf = 136315906;
        __int16 v50 = "ServerSessionManager.mm";
        __int16 v51 = 1024;
        int v52 = 851;
        __int16 v53 = 2080;
        std::string::size_type v54 = v18;
        __int16 v55 = 2080;
        uint64_t v56 = v19;
        uint64_t v20 = "%25s:%-5d Success - added newly-created session (%s) to app instance (%s)";
        uint64_t v21 = v17;
        os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
LABEL_21:
        _os_log_impl(&dword_1CFE2A000, v21, v22, v20, buf, 0x26u);
      }
    }
    else
    {
      int v17 = *(id *)as::server::gSessionServerLog(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        unint64_t v23 = (void *)(*a3 + 176);
        if (*(char *)(*a3 + 199) < 0) {
          unint64_t v23 = (void *)*v23;
        }
        unint64_t v24 = as::server::AudioApplicationInfo::DebugString(v13);
        *(_DWORD *)audit_token_t buf = 136315906;
        __int16 v50 = "ServerSessionManager.mm";
        __int16 v51 = 1024;
        int v52 = 848;
        __int16 v53 = 2080;
        std::string::size_type v54 = v23;
        __int16 v55 = 2080;
        uint64_t v56 = v24;
        uint64_t v20 = "%25s:%-5d Error - failed to add newly-created session (%s) to app instance (%s)";
        uint64_t v21 = v17;
        os_log_type_t v22 = OS_LOG_TYPE_ERROR;
        goto LABEL_21;
      }
    }

    uint64_t v25 = (std::__shared_weak_count *)a3[1];
    uint64_t v30 = *a3;
    unint64_t v31 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::AudioApplicationInfo::ApplyMXProperties(v13, &v30);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    char v26 = (std::__shared_weak_count *)a3[1];
    uint64_t v28 = *a3;
    unint64_t v29 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::AudioApplicationInfo::ApplyAppProperties(v13, &v28);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
}

void sub_1CFE4AAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *a20,void *a21)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }

  _Unwind_Resume(a1);
}

void as::server::ConstAudioSessionInfo::CreateCMSession(as::server::ConstAudioSessionInfo *this, const as::server::SessionCreationDescription *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 13)) {
    as::server::ConstAudioSessionInfo::CreateCMSession(this);
  }
  uint64_t v28 = 0;
  if (CMSessionCreateForRemoteDeviceID())
  {
    int v4 = (const void *)*((void *)this + 13);
    *((void *)this + 13) = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
  else
  {
    uint64_t v5 = (const void *)*((void *)this + 13);
    *((void *)this + 13) = v28;
    if (v5) {
      CFRelease(v5);
    }
    long long v6 = *((_OWORD *)a2 + 1);
    v26[0] = *(_OWORD *)a2;
    v26[1] = v6;
    int v27 = *((_DWORD *)a2 + 8);
    as::server::ConstAudioSessionInfo::CreateMXSession((uint64_t)this, 2, (uint64_t)v26, (uint64_t)a2);
    as::server::ConstAudioSessionInfo::buildClientNameString(this);
    long long v7 = (NSString *)objc_claimAutoreleasedReturnValue();
    as::server::ConstAudioSessionInfo::SetClientName(this, v7);

    uint64_t v8 = (as::server *)MXSessionSetProperty();
    unsigned int v9 = v8;
    if (v8)
    {
      BOOL v10 = *(id *)as::server::gSessionServerLog(v8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        buf.val[0] = 136315650;
        *(void *)&buf.val[1] = "AudioSessionInfo.mm";
        LOWORD(buf.val[3]) = 1024;
        *(unsigned int *)((char *)&buf.val[3] + 2) = 429;
        HIWORD(buf.val[4]) = 1024;
        buf.val[5] = v9;
        _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Set of kMXSessionProperty_IsAudioSession failed: %d", (uint8_t *)&buf, 0x18u);
      }
    }
    int valuePtr = *((_DWORD *)this + 2);
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    uint64_t v13 = (as::server *)MXSessionSetProperty();
    unsigned int v14 = v13;
    if (v13)
    {
      BOOL v15 = *(id *)as::server::gSessionServerLog(v13);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        buf.val[0] = 136315650;
        *(void *)&buf.val[1] = "AudioSessionInfo.mm";
        LOWORD(buf.val[3]) = 1024;
        *(unsigned int *)((char *)&buf.val[3] + 2) = 437;
        HIWORD(buf.val[4]) = 1024;
        buf.val[5] = v14;
        _os_log_impl(&dword_1CFE2A000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Set of kMXSessionProperty_CoreSessionID failed: %d", (uint8_t *)&buf, 0x18u);
      }
    }
    CFRelease(v12);
    int v24 = *((_DWORD *)a2 + 9);
    CFNumberRef v16 = CFNumberCreate(v11, kCFNumberSInt32Type, &v24);
    int v17 = MXSessionSetProperty();
    CFRelease(v16);
    if (v17) {
      as::server::ConstAudioSessionInfo::CreateCMSession();
    }
    as::server::ProcessIdentity::SecurityTask(a2, (SecTaskRef *)&cf);
    BOOL v19 = (__SecTask *)cf;
    if (!cf)
    {
      uint64_t v20 = *(id *)as::server::gSessionServerLog(v18);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        unsigned int v21 = *((_DWORD *)a2 + 9);
        buf.val[0] = 136315650;
        *(void *)&buf.val[1] = "AudioSessionInfo.mm";
        LOWORD(buf.val[3]) = 1024;
        *(unsigned int *)((char *)&buf.val[3] + 2) = 451;
        HIWORD(buf.val[4]) = 1024;
        buf.val[5] = v21;
        _os_log_impl(&dword_1CFE2A000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PID %d of description has an invalid audit token", (uint8_t *)&buf, 0x18u);
      }
      BOOL v19 = (__SecTask *)cf;
    }
    as::server::ConstAudioSessionInfo::SetSecurityTask(this, v19);
    long long v22 = *((_OWORD *)a2 + 1);
    *(_OWORD *)buf.val = *(_OWORD *)a2;
    *(_OWORD *)&buf.val[4] = v22;
    int v30 = *((_DWORD *)a2 + 8);
    if ((_BYTE)v30) {
      as::server::ConstAudioSessionInfo::SetAuditToken(this, &buf);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1CFE4AEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void as::server::ConstAudioSessionInfo::CreateMXSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v23[3] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a4 + 40) != 1935897189)
  {
    uint64_t v13 = MXSessionCreate();
    int v12 = v13;
    if (!v13) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  if (!*(unsigned char *)(a3 + 32)) {
    as::server::ConstAudioSessionInfo::CreateMXSession();
  }
  id v6 = (id)*MEMORY[0x1E4F75C20];
  v22[0] = v6;
  v23[0] = &unk_1F268A7D0;
  id v7 = (id)*MEMORY[0x1E4F75C10];
  v22[1] = v7;
  uint64_t v8 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a3 length:32];
  v23[1] = v8;
  id v9 = (id)*MEMORY[0x1E4F75C18];
  v22[2] = v9;
  BOOL v10 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a4 + 64)];
  _OWORD v23[2] = v10;
  CFAllocatorRef v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:v22 count:3];

  int v12 = MXSessionCreateWithOptions();
  if (v12)
  {
LABEL_4:
    unsigned int v14 = *(id *)as::server::gSessionServerLog((as::server *)v13);
    uint64_t v13 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      *(_DWORD *)audit_token_t buf = 136315650;
      int v17 = "AudioSessionInfo.mm";
      __int16 v18 = 1024;
      int v19 = 499;
      __int16 v20 = 1024;
      LODWORD(v21) = v12;
      _os_log_impl(&dword_1CFE2A000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d MXSessionCreate failed: %d", buf, 0x18u);
    }
  }
LABEL_6:
  BOOL v15 = *(id *)as::server::gSessionServerLog((as::server *)v13);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)audit_token_t buf = 136315650;
    int v17 = "AudioSessionInfo.mm";
    __int16 v18 = 1024;
    int v19 = 569;
    __int16 v20 = 2048;
    uint64_t v21 = 0;
    _os_log_impl(&dword_1CFE2A000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d subsession created with ref %p", buf, 0x1Cu);
  }
}

void sub_1CFE4B3EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::ConstAudioSessionInfo::SetAuditToken(as::server::ConstAudioSessionInfo *this, const audit_token_t *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFDataRef v2 = CFDataCreate(0, (const UInt8 *)a2, 32);
  uint64_t v3 = applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v2);
  if (cf)
  {
    if (MXSessionSetProperty())
    {
      uint64_t v4 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v4);
    }
  }
  else
  {
    uint64_t v5 = *(id *)as::server::gSessionServerLog(v3);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)audit_token_t buf = 136315394;
      uint64_t v8 = "AudioSessionInfo.mm";
      __int16 v9 = 1024;
      int v10 = 593;
      _os_log_impl(&dword_1CFE2A000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid client token", buf, 0x12u);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1CFE4B588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DataRef::~DataRef((const void **)va);
  _Unwind_Resume(a1);
}

applesauce::CF::DataRef *applesauce::CF::DataRef::DataRef(applesauce::CF::DataRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDataGetTypeID())
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D25E15C0](exception, "Could not construct");
    }
  }
  return this;
}

void sub_1CFE4B640(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

id as::server::ConstAudioSessionInfo::buildClientNameString(as::server::ConstAudioSessionInfo *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (char *)this + 176;
  if (*((char *)this + 199) < 0) {
    uint64_t v1 = *(const char **)v1;
  }
  snprintf(__str, 0x100uLL, "%s", v1);
  CFDataRef v2 = [NSString stringWithUTF8String:__str];
  return v2;
}

as::server *as::server::ConstAudioSessionInfo::SetSecurityTask(as::server *this, __SecTask *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    CFTypeID v3 = *(id *)as::server::gSessionServerLog(this);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 136315650;
      uint64_t v5 = "AudioSessionInfo.mm";
      __int16 v6 = 1024;
      int v7 = 575;
      __int16 v8 = 2112;
      __int16 v9 = a2;
      _os_log_impl(&dword_1CFE2A000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting SecTaskRef: %@", (uint8_t *)&v4, 0x1Cu);
    }
    this = (as::server *)MXSessionSetProperty();
    if (this) {
      as::server::ConstAudioSessionInfo::CreateCMSession();
    }
  }
  return this;
}

void as::server::ConstAudioSessionInfo::SetClientName(as::server::ConstAudioSessionInfo *this, NSString *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFDataRef v2 = a2;
  if (v2)
  {
    CFTypeID v3 = (as::server *)MXSessionSetProperty();
    int v4 = (int)v3;
    if (v3)
    {
      uint64_t v5 = *(id *)as::server::gSessionServerLog(v3);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315650;
        uint64_t v11 = "AudioSessionInfo.mm";
        __int16 v12 = 1024;
        int v13 = 616;
        __int16 v14 = 1024;
        int v15 = v4;
        __int16 v6 = "%25s:%-5d MXSessionSetProperty for ClientName failed: %d";
        int v7 = v5;
        uint32_t v8 = 24;
LABEL_7:
        _os_log_impl(&dword_1CFE2A000, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v10, v8);
      }
    }
  }
  else
  {
    __int16 v9 = *(id *)as::server::gSessionServerLog(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "AudioSessionInfo.mm";
      __int16 v12 = 1024;
      int v13 = 619;
      __int16 v6 = "%25s:%-5d Invalid client name";
      int v7 = v9;
      uint32_t v8 = 18;
      goto LABEL_7;
    }
  }
}

void sub_1CFE4B968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::ApplyAppProperties(os_unfair_lock_s *a1, uint64_t *a2)
{
  int v4 = a1 + 4;
  uint64_t v5 = (id *)&a1[6];
  os_unfair_lock_lock(a1 + 4);
  __int16 v6 = as::server::AudioAppInfoImpl::GetAppPropertiesExplicitlySet(v5);
  os_unfair_lock_unlock(v4);
  uint64_t v8 = *a2;
  int v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v9 = (char *)as::server::AudioApplicationInfo::DebugString(a1);
  std::string::basic_string[abi:ne180100]<0>(&v14, v9);
  id v10 = v6;
  uint64_t v11 = v10;
  if (v10 && [v10 count])
  {
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3321888768;
    long long v15[2] = ___ZN2as6serverL25PrivateApplyAppPropertiesENSt3__110shared_ptrINS0_16AudioSessionInfoEEEP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
    v15[3] = &unk_1F2688410;
    uint64_t v17 = v8;
    __int16 v18 = v7;
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      id v16 = v11;
      uint64_t v19 = v8;
      __int16 v20 = v7;
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      id v16 = v11;
      uint64_t v19 = v8;
      __int16 v20 = 0;
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v14;
    }
    __int16 v12 = (as::server *)MEMORY[0x1D25E1DE0](v15);
    int v13 = as::server::GetAudioControlQueue(v12);
    as::server::DispatchBlock(v13, v12, 0, (uint64_t)"PrivateApplyAppProperties", (uint64_t)"AudioApplicationInfo.mm", 211, 0, 0);

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }

    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1CFE4BB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }

  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }

  if (a15 < 0) {
    operator delete(__p);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }

  _Unwind_Resume(a1);
}

os_unfair_lock_s *as::server::AudioApplicationInfo::DebugString(os_unfair_lock_s *this)
{
  CFDataRef v2 = this + 4;
  os_unfair_lock_lock(this + 4);
  CFTypeID v3 = this + 22;
  if (SHIBYTE(this[27]._os_unfair_lock_opaque) < 0) {
    CFTypeID v3 = *(os_unfair_lock_s **)&v3->_os_unfair_lock_opaque;
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

void as::server::AudioApplicationInfo::ApplyMXProperties(os_unfair_lock_s *a1, uint64_t *a2)
{
  int v4 = a1 + 4;
  uint64_t v5 = (id *)&a1[6];
  os_unfair_lock_lock(a1 + 4);
  __int16 v6 = as::server::AudioAppInfoImpl::GetMXPropertiesExplicitlySet(v5);
  os_unfair_lock_unlock(v4);
  uint64_t v8 = *a2;
  int v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v9 = (char *)as::server::AudioApplicationInfo::DebugString(a1);
  std::string::basic_string[abi:ne180100]<0>(&v13, v9);
  id v10 = v6;
  if ([v10 count])
  {
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3321888768;
    v14[2] = ___ZN2as6serverL24PrivateApplyMXPropertiesENSt3__110shared_ptrINS0_16AudioSessionInfoEEEP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
    void v14[3] = &unk_1F2688410;
    uint64_t v16 = v8;
    uint64_t v17 = v7;
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      id v15 = v10;
      uint64_t v18 = v8;
      uint64_t v19 = v7;
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      id v15 = v10;
      uint64_t v18 = v8;
      uint64_t v19 = 0;
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v13;
    }
    uint64_t v11 = (as::server *)MEMORY[0x1D25E1DE0](v14);
    __int16 v12 = as::server::GetAudioControlQueue(v11);
    as::server::DispatchBlock(v12, v11, 0, (uint64_t)"PrivateApplyMXProperties", (uint64_t)"AudioApplicationInfo.mm", 173, 0, 0);

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }

    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1CFE4BE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }

  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }

  if (a15 < 0) {
    operator delete(__p);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }

  _Unwind_Resume(a1);
}

id as::server::AudioAppInfoImpl::GetAppPropertiesExplicitlySet(id *this)
{
  return as::AudioAppState::getAppPropertiesExplicitlySet(this + 19);
}

id as::server::AudioAppInfoImpl::GetMXPropertiesExplicitlySet(id *this)
{
  return as::AudioAppState::getMXPropertiesExplicitlySet(this + 19);
}

id as::AudioAppState::getAppPropertiesExplicitlySet(id *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFDataRef v2 = objc_opt_new();
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = this[2];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        uint64_t v8 = objc_msgSend(*this, "valueForKey:", v7, (void)v10);
        [v2 setValue:v8 forKey:v7];
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  return v2;
}

void sub_1CFE4C088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id as::AudioAppState::getMXPropertiesExplicitlySet(id *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFDataRef v2 = objc_opt_new();
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = this[3];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        uint64_t v8 = objc_msgSend(this[1], "valueForKey:", v7, (void)v10);
        [v2 setValue:v8 forKey:v7];
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  return v2;
}

void sub_1CFE4C200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c67_ZTSNSt3__110shared_ptrIN2as6server18DeviceTimeObserver8TimeInfoEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1CFE4C4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a13);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

CFTypeRef as::server::ConstAudioSessionInfo::GetCMSessionRef@<X0>(CFTypeRef this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 13);
  if (v3) {
    this = CFRetain(*((CFTypeRef *)this + 13));
  }
  *a2 = v3;
  return this;
}

void sub_1CFE4C7C8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t as::server::DeviceTimeObserver::setFixedLatency(uint64_t this, int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4 = *(void *)(this + 48);
  uint64_t v5 = *(void *)(this + 56);
  if (v4 != v5)
  {
    while (*(_DWORD *)v4 != a2)
    {
      v4 += 96;
      if (v4 == v5) {
        return this;
      }
    }
  }
  if (v4 != v5)
  {
    atomic_store(a3, (unint64_t *)(*(void *)(v4 + 72) + 8));
    atomic_store(a4, (unint64_t *)(*(void *)(v4 + 72) + 16));
    uint64_t v6 = *(void *)(v4 + 72);
    this = *(void *)(v6 + 32);
    do
    {
      _X2 = 0;
      _X5 = *(void *)(v6 + 40);
      __asm { CASPAL          X4, X5, X2, X3, [X8] }
      _ZF = _X4 == this;
      this = _X4;
    }
    while (!_ZF);
  }
  return this;
}

uint64_t as::server::DeviceTimeObserver::setSampleRate(uint64_t this, int a2, double a3)
{
  uint64_t v3 = *(void *)(this + 48);
  uint64_t v4 = *(void *)(this + 56);
  if (v3 != v4)
  {
    while (*(_DWORD *)v3 != a2)
    {
      v3 += 96;
      if (v3 == v4) {
        return this;
      }
    }
  }
  if (v3 != v4) {
    **(double **)(v3 + 72) = a3;
  }
  return this;
}

uint64_t as::server::require_acq::AudioSessionServerSetClientMuteState(AudioSession *a1, int a2, void *a3, int a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v38, a1);
  __int16 v9 = (unsigned __int8 *)v38;
  if (v38)
  {
    if (a2 == 1885564012)
    {
      if (a3)
      {
        long long v10 = *(id *)as::server::gSessionServerLog(v8);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)audit_token_t buf = 136315394;
          long long v42 = "AudioSessionServerImp.mm";
          __int16 v43 = 1024;
          LODWORD(v44) = 699;
          long long v11 = "%25s:%-5d Player ref should be nullptr if player type is PhoneCall";
          long long v12 = v10;
          uint32_t v13 = 18;
LABEL_40:
          _os_log_impl(&dword_1CFE2A000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
          goto LABEL_41;
        }
        goto LABEL_41;
      }
      unint64_t v29 = v39;
      if (v39)
      {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      unint64_t v23 = (AudioSession *)(v9 + 316);
      if (a4) {
        unsigned int v28 = 67;
      }
      else {
        unsigned int v28 = 3;
      }
      unsigned __int8 v30 = atomic_load(v9 + 320);
      unsigned int v24 = v30 & 1;
    }
    else
    {
      uint64_t v19 = v39;
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      PlayerState = as::server::AudioSessionInfo::GetPlayerState((as::server::AudioSessionInfo *)v9, a3);
      uint64_t v21 = PlayerState;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (!v21)
      {
        uint64_t v31 = *(id *)as::server::gSessionServerLog((as::server *)PlayerState);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)audit_token_t buf = 136315650;
          long long v42 = "AudioSessionServerImp.mm";
          __int16 v43 = 1024;
          LODWORD(v44) = 715;
          WORD2(v44) = 2048;
          *(void *)((char *)&v44 + 6) = a3;
          long long v11 = "%25s:%-5d Can't find supplied player %p";
          long long v12 = v31;
          uint32_t v13 = 28;
          goto LABEL_40;
        }
LABEL_41:
        uint64_t v18 = 4294967246;
        goto LABEL_42;
      }
      int v22 = *((_DWORD *)v21 + 4);
      if (v22 != a2)
      {
        uint64_t v32 = *(id *)as::server::gSessionServerLog((as::server *)PlayerState);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)audit_token_t buf = 136315906;
          long long v42 = "AudioSessionServerImp.mm";
          __int16 v43 = 1024;
          LODWORD(v44) = 722;
          WORD2(v44) = 1024;
          *(_DWORD *)((char *)&v44 + 6) = a2;
          WORD5(v44) = 1024;
          HIDWORD(v44) = v22;
          long long v11 = "%25s:%-5d Supplied player type %u does not match with player type %u";
          long long v12 = v32;
          uint32_t v13 = 30;
          goto LABEL_40;
        }
        goto LABEL_41;
      }
      unint64_t v23 = (AudioSession *)*v21;
      uint64_t v25 = v21 + 1;
      unsigned int v24 = *((_DWORD *)v21 + 2);
      unsigned int v26 = *((_DWORD *)v25 + 1) & 0xFFFFFFBF;
      if (a4) {
        int v27 = 64;
      }
      else {
        int v27 = 0;
      }
      unsigned int v28 = v26 | v27;
    }
    if (v38)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v38 + 158);
      char v40 = 0;
    }
    uint64_t v18 = as::server::require_acq::AudioSessionServerSetClientPlayState(a1, a2, v23, v28, v24, 0, 0);
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)buf, "sessionID");
    *(void *)((char *)&v44 + 2) = buf;
    BYTE10(v44) = 1;
    BYTE2(v45) = 6;
    unint64_t v47 = a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v45 + 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v45 + 2);
    *(void *)uint64_t v48 = (char *)&v45 + 2;
    unsigned char v48[8] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v49, (uint64_t)buf, 2, 1, 2);
    __int16 v51 = &v49;
    char v52 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)&v49, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v49);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v45 + i + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v48[i - 8], *((unsigned __int8 *)&v45 + i + 2));
    }
    uint64_t v16 = *(id *)as::server::gSessionServerLog(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      long long v49 = 0;
      __int16 v50 = 0;
      __int16 v51 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v36, -1, 0x20u, 0, 0, __p);
      if (v35 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      *(_DWORD *)audit_token_t buf = 136316418;
      long long v42 = "AudioSessionServerImp.mm";
      __int16 v43 = 1024;
      LODWORD(v44) = 689;
      WORD2(v44) = 2080;
      *(void *)((char *)&v44 + 6) = "set_mute_state";
      HIWORD(v44) = 2080;
      uint64_t v45 = "Session lookup failed";
      __int16 v46 = 2080;
      unint64_t v47 = (unint64_t)&v49;
      *(_WORD *)uint64_t v48 = 2080;
      *(void *)&v48[2] = v17;
      _os_log_impl(&dword_1CFE2A000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v51) < 0) {
        operator delete(v49);
      }
    }

    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v36[0]);
    uint64_t v18 = 561210739;
  }
LABEL_42:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v38);
  return v18;
}

void sub_1CFE4CD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::AudioSessionServerSetClientPlayState(AudioSession *a1, int a2, AudioSession *a3, unsigned int a4, unsigned int a5, char *a6, uint64_t a7)
{
  unsigned int v7 = a1;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = as::server::require_acq::AudioSessionSetClientPlayState_Inner(a1, a2, a3, a4, a5, a6, a7);
  __int16 v9 = +[AVAudioMicrophoneMonitor sharedInstance];
  long long v10 = v9;
  if (v9)
  {
    id v11 = v9;
    as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v49, v7);
    long long v12 = v49;
    if (!v49) {
      goto LABEL_35;
    }
    uint32_t v13 = v50;
    if (v50)
    {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      int v14 = *((_DWORD *)v12 + 67);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      if (v14 != 3)
      {
        long long v12 = v49;
        if (!v49)
        {
          uint64_t v45 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v45);
        }
        uint64_t v15 = v50;
        if (v50)
        {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v16 = v50;
          unsigned int v17 = *((_DWORD *)v12 + 71);
          if (v50)
          {
            atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
            unsigned int v18 = *((_DWORD *)v12 + 74);
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          else
          {
            unsigned int v18 = *((_DWORD *)v12 + 74);
          }
          BOOL v19 = v17 > v18;
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_13:
          {
            as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled = _os_feature_enabled_impl();
          }
          if (as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled)
          {
            __int16 v20 = v49;
            if (!v49)
            {
              uint64_t v46 = _os_crash();
              as::server::require_acq::AudioSessionServerSetClientPlayState(v46);
            }
            uint64_t v21 = v50;
            if (v50) {
              atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v20, cf);
            if (*(void *)cf) {
              CFRelease(*(CFTypeRef *)cf);
            }
            if (v21) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            }
            if (IsRemoteDeviceInputControlAllowed)
            {
              if (v19)
              {
                unsigned int v24 = v49;
                if (!v49)
                {
                  uint64_t v48 = _os_crash();
                  as::server::require_acq::AudioSessionServerSetClientPlayState(v48);
                }
                uint64_t v25 = v50;
                if (v50)
                {
                  atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
                  int v26 = *((_DWORD *)v24 + 107);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
                  if (!v26) {
                    goto LABEL_29;
                  }
                }
                else if (!*((_DWORD *)v49 + 107))
                {
                  goto LABEL_29;
                }
              }
LABEL_35:
              BOOL v31 = 0;
LABEL_36:
              as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v57, v7);
              uint64_t v32 = v57;
              if (v57)
              {
                uint64_t v33 = v58;
                if (v58) {
                  atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                caulk::platform::process_name((caulk::platform *)*(unsigned int *)(v32 + 88));
                if (v33) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                }
              }
              else
              {
                v55[0] = 0;
                v55[1] = 0;
                uint64_t v56 = 0;
              }
              if (v56 >= 0) {
                int v34 = v55;
              }
              else {
                int v34 = (void **)v55[0];
              }
              if ([v11 setState:v31 clientType:0 clientID:v7 clientDescription:v34])
              {
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)cf, "microphone_state");
                *(void *)&v61[2] = cf;
                v61[10] = 1;
                BYTE2(v63) = 4;
                v65[0] = v31;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v63 + 2);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v63 + 2);
                v65[1] = (char *)&v63 + 2;
                char v66 = 1;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v67, (uint64_t)cf, 2, 1, 2);
                v67.__r_.__value_.__r.__words[2] = (std::string::size_type)&v67;
                char v68 = 1;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v53, (uint64_t)&v67, 1, 1, 2);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v67);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v67.__r_.__value_.__l.__size_, v67.__r_.__value_.__s.__data_[0]);
                for (uint64_t i = 0; i != -8; i -= 4)
                {
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v63 + i * 8 + 2);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v65[i], *((unsigned __int8 *)&v63 + i * 8 + 2));
                }
                uint64_t v37 = v57;
                if (v57)
                {
                  unsigned int v38 = v58;
                  if (v58) {
                    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (*(char *)(v37 + 223) < 0) {
                    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v37 + 200), *(void *)(v37 + 208));
                  }
                  else {
                    std::string v67 = *(std::string *)(v37 + 200);
                  }
                  if (v38) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
                  }
                }
                else
                {
                  memset(&v67, 0, sizeof(v67));
                }
                long long v39 = *(id *)as::server::gSessionServerLog(v36);
                if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
                {
                  int v40 = SHIBYTE(v67.__r_.__value_.__r.__words[2]);
                  std::string::size_type v41 = v67.__r_.__value_.__r.__words[0];
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v53, -1, 0x20u, 0, 0, __p);
                  long long v42 = &v67;
                  if (v40 < 0) {
                    long long v42 = (std::string *)v41;
                  }
                  if (v52 >= 0) {
                    __int16 v43 = __p;
                  }
                  else {
                    __int16 v43 = (void **)__p[0];
                  }
                  *(_DWORD *)CFTypeRef cf = 136316162;
                  *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                  __int16 v60 = 1024;
                  *(_DWORD *)uint64_t v61 = 126;
                  *(_WORD *)&v61[4] = 2080;
                  *(void *)&v61[6] = "setMicrophoneMonitorState";
                  __int16 v62 = 2080;
                  uint64_t v63 = v42;
                  __int16 v64 = 2080;
                  v65[0] = v43;
                  _os_log_impl(&dword_1CFE2A000, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
                  if (v52 < 0) {
                    operator delete(__p[0]);
                  }
                }

                if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v67.__r_.__value_.__l.__data_);
                }
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53[0]);
              }
              if (SHIBYTE(v56) < 0) {
                operator delete(v55[0]);
              }
              if (v58) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v58);
              }
              goto LABEL_72;
            }
            if (!v19) {
              goto LABEL_35;
            }
          }
          else if (!v19)
          {
            goto LABEL_35;
          }
LABEL_29:
          int v27 = v49;
          if (!v49)
          {
            uint64_t v47 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v47);
          }
          unsigned int v28 = v50;
          if (v50) {
            atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v29 = *((_DWORD *)v27 + 73);
          if (v29) {
            BOOL v30 = *((_DWORD *)v27 + 70) == v29;
          }
          else {
            BOOL v30 = 0;
          }
          BOOL v31 = !v30;
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          goto LABEL_36;
        }
LABEL_10:
        BOOL v19 = *((_DWORD *)v12 + 71) > *((_DWORD *)v12 + 74);
        goto LABEL_13;
      }
    }
    else if (*((_DWORD *)v49 + 67) != 3)
    {
      goto LABEL_10;
    }
LABEL_72:
    as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v49);
  }
  return v8;
}

void sub_1CFE4D3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_s *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,CFTypeRef cf)
{
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a10);

  _Unwind_Resume(a1);
}

void sub_1CFE4D7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t MediaSafetyNetLibraryCore(char **a1)
{
  if (!MediaSafetyNetLibraryCore(char **)::frameworkLibrary) {
    MediaSafetyNetLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  return MediaSafetyNetLibraryCore(char **)::frameworkLibrary;
}

void sub_1CFE4D940(_Unwind_Exception *a1)
{
}

void *std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::find<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  float result = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__lower_bound<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == result) {
    return v3;
  }
  uint64_t v5 = result[4];
  if (*a2 >= v5) {
    char v6 = 1;
  }
  else {
    char v6 = -1;
  }
  if (*a2 == v5)
  {
    unint64_t v7 = a2[1];
    unint64_t v8 = result[5];
    BOOL v9 = v7 >= v8;
    BOOL v10 = v7 == v8;
    char v6 = -1;
    if (v9) {
      char v6 = 1;
    }
    if (v10) {
      char v6 = 0;
    }
  }
  if (v6 < 0) {
    return v3;
  }
  return result;
}

void *std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__lower_bound<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  float result = a4;
  if (a3)
  {
    uint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    do
    {
      uint64_t v7 = a3[4];
      BOOL v8 = v7 == v5;
      if (v7 >= v5) {
        char v9 = 1;
      }
      else {
        char v9 = -1;
      }
      if (v8)
      {
        unint64_t v10 = a3[5];
        BOOL v11 = v10 == v6;
        char v9 = v10 >= v6 ? 1 : -1;
        if (v11) {
          char v9 = 0;
        }
      }
      BOOL v12 = (v9 & 0x80) == 0;
      if (v9 < 0) {
        uint32_t v13 = a3 + 1;
      }
      else {
        uint32_t v13 = a3;
      }
      if (v12) {
        float result = a3;
      }
      a3 = (void *)*v13;
    }
    while (*v13);
  }
  return result;
}

uint64_t *std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__emplace_unique_key_args<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>,std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>(uint64_t **a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v5 = (void **)std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__find_equal<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>((uint64_t)a1, &v9, a2);
  unint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

void *std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__find_equal<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  float result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    while (1)
    {
      BOOL v8 = v4;
      uint64_t v9 = v4[4];
      if (v6 == v9)
      {
        unint64_t v10 = v8[5];
        if (v7 >= v10)
        {
          BOOL v11 = v10 == v7;
          if (v10 >= v7) {
            char v12 = 1;
          }
          else {
            char v12 = -1;
          }
          if (v11) {
            char v12 = 0;
          }
          if ((v12 & 0x80) == 0) {
            goto LABEL_22;
          }
          goto LABEL_19;
        }
LABEL_13:
        uint64_t v4 = (void *)*v8;
        float result = v8;
        if (!*v8) {
          goto LABEL_22;
        }
      }
      else
      {
        if (v6 < v9) {
          goto LABEL_13;
        }
        if (v9 >= v6) {
          char v13 = 1;
        }
        else {
          char v13 = -1;
        }
        if ((v13 & 0x80) == 0) {
          goto LABEL_22;
        }
LABEL_19:
        float result = v8 + 1;
        uint64_t v4 = (void *)v8[1];
        if (!v4) {
          goto LABEL_22;
        }
      }
    }
  }
  BOOL v8 = result;
LABEL_22:
  *a2 = v8;
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[17]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[17]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE4DB98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::MSNSetMicrophoneState(_anonymous_namespace_ *this)
{
  uint64_t v6 = 0;
  unint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v2 = (void (*)(_anonymous_namespace_ *))getMSNMonitorSetMicrophoneStateSymbolLoc(void)::ptr;
  uint64_t v9 = getMSNMonitorSetMicrophoneStateSymbolLoc(void)::ptr;
  if (!getMSNMonitorSetMicrophoneStateSymbolLoc(void)::ptr)
  {
    uint64_t v3 = MediaSafetyNetLibrary();
    v7[3] = (uint64_t)dlsym(v3, "MSNMonitorSetMicrophoneState");
    getMSNMonitorSetMicrophoneStateSymbolLoc(void)::ptr = (_UNKNOWN *)v7[3];
    uint64_t v2 = (void (*)(_anonymous_namespace_ *))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(this);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"void ATMSNMonitorSetMicrophoneState(BOOL)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"MSNSoftLink.h", 21, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1CFE4DCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::AudioSessionSetClientPlayState_Inner(AudioSession *a1, int a2, AudioSession *a3, unsigned int a4, unsigned int a5, char *a6, uint64_t a7)
{
  unsigned int v258 = a4;
  uint64_t v346 = *MEMORY[0x1E4F143B8];
  *(void *)&v281[1] = a7;
  v281[0] = 0;
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v278, a1);
  if (a7)
  {
    unint64_t v10 = v278;
    if (!v278)
    {
LABEL_34:
      if (a5)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>((uint64_t)cf, "ID");
        *(void *)&cf[16] = cf;
        cf[24] = 1;
        AudioSession::FormatSessionIDAsHex(a1, &v338);
        *(void *)v328 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&cf[32], (uint64_t)&v338);
        v328[8] = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)__p, (uint64_t)cf, 2, 1, 2);
        __p[2] = __p;
        char v283 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v319, (uint64_t)__p, 1, 1, 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)__p);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p[1], LOBYTE(__p[0]));
        for (uint64_t i = 0; i != -64; i -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&cf[i + 32]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&cf[i + 40], cf[i + 32]);
        }
        if (SHIBYTE(v340) < 0) {
          operator delete(v338);
        }
        uint64_t v25 = *(id *)as::server::gSessionServerLog(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          memset(__p, 0, sizeof(__p));
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v319, -1, 0x20u, 0, 0, &v338);
          if (SHIBYTE(v340) >= 0) {
            int v26 = &v338;
          }
          else {
            int v26 = (uint64_t **)v338;
          }
          *(_DWORD *)CFTypeRef cf = 136316418;
          *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
          *(_WORD *)&unsigned char cf[12] = 1024;
          *(_DWORD *)&cf[14] = 308;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = "set_play_state";
          *(_WORD *)&cf[28] = 2080;
          *(void *)&cf[30] = "session lookup failed";
          *(_WORD *)&cf[38] = 2080;
          v327 = (std::string *)__p;
          *(_WORD *)v328 = 2080;
          *(void *)&v328[2] = v26;
          _os_log_impl(&dword_1CFE2A000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x3Au);
          if (SHIBYTE(v340) < 0) {
            operator delete(v338);
          }
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v17 = 561210739;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v319);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v320, v319[0]);
        goto LABEL_434;
      }
      uint64_t v17 = 561210739;
      int v27 = *(id *)as::server::gSessionServerLog(v10);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_434;
      }
      *(_DWORD *)CFTypeRef cf = 136315650;
      *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
      *(_WORD *)&unsigned char cf[12] = 1024;
      *(_DWORD *)&cf[14] = 303;
      *(_WORD *)&cf[18] = 1024;
      *(_DWORD *)&cf[20] = a1;
      __int16 v20 = "%25s:%-5d sessionID = 0x%x: session lookup failed  (client exited?)";
      uint64_t v21 = v27;
      os_log_type_t v22 = OS_LOG_TYPE_DEBUG;
LABEL_50:
      _os_log_impl(&dword_1CFE2A000, v21, v22, v20, cf, 0x18u);
      goto LABEL_434;
    }
    BOOL v11 = v279;
    if (v279) {
      atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v10, cf);
    uint64_t v13 = *(void *)cf;
    if (*(void *)cf) {
      CFRelease(*(CFTypeRef *)cf);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v13 != a7)
    {
      int v14 = v278;
      if (!v278)
      {
        uint64_t v214 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v214);
      }
      uint64_t v15 = v279;
      if (v279) {
        atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((char *)v14 + 223) < 0) {
        std::string::__init_copy_ctor_external(&v299, *((const std::string::value_type **)v14 + 25), *((void *)v14 + 26));
      }
      else {
        std::string v299 = *(std::string *)((char *)v14 + 200);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (a6)
      {
        unsigned int v28 = *(as::server::require_acq **)&v281[1];
        if (*(void *)&v281[1])
        {
          if (v278)
          {
            os_unfair_lock_unlock((os_unfair_lock_t)v278 + 158);
            char v280 = 0;
            unsigned int v28 = *(as::server::require_acq **)&v281[1];
          }
          as::server::require_acq::GetAudioQueueOptions(v28, a6, v12);
        }
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)__p, "type");
      __p[2] = __p;
      char v283 = 1;
      v272 = (char *)AudioSession::ClientPlayerAsCString(a2);
      v286 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v284, &v272);
      char v287 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)cf, (uint64_t)__p, 2, 1, 2);
      *(void *)&cf[16] = cf;
      cf[24] = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)&v338, "player");
      v340 = &v338;
      char v341 = 1;
      AudioSession::FormatPointerAsHex(a3, &v277);
      v344 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v342, (uint64_t)&v277);
      char v345 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&cf[32], (uint64_t)&v338, 2, 1, 2);
      *(void *)v328 = &cf[32];
      v328[8] = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v319, "modes");
      v321 = v319;
      char v322 = 1;
      AudioSession::ClientActiveModesToString((AudioSession *)v258);
      id v29 = objc_claimAutoreleasedReturnValue();
      v265 = (char *)[v29 UTF8String];
      uint64_t v324 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v323, &v265);
      char v325 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v329, (uint64_t)v319, 2, 1, 2);
      v330 = v329;
      char v331 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v312, "state");
      v314 = v312;
      char v315 = 1;
      v276 = (char *)AudioSession::PlayStateToString(a5);
      uint64_t v317 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v316, &v276);
      char v318 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v332, (uint64_t)v312, 2, 1, 2);
      v333 = v332;
      char v334 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v304, "FigPlayer-owned MXSession");
      v306 = v304;
      char v307 = 1;
      v308[0] = 4;
      uint64_t v309 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v308);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v308);
      v310 = v308;
      char v311 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v335, (uint64_t)v304, 2, 1, 2);
      v336 = v335;
      char v337 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v269, (uint64_t)cf, 5, 1, 2);
      for (uint64_t j = 0; j != -160; j -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v335[j]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v335[j + 8], v335[j]);
      }
      for (uint64_t k = 0; k != -64; k -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v308[k]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v309 + k), v308[k]);
      }
      for (uint64_t m = 0; m != -64; m -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v316[m]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v316[m + 8], v316[m]);
      }
      for (uint64_t n = 0; n != -64; n -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v323[n]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v323[n + 8], v323[n]);
      }

      for (iuint64_t i = 0; ii != -8; ii -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v342[ii * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v343)[ii], v342[ii * 8]);
      }
      if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v277.__r_.__value_.__l.__data_);
      }
      for (juint64_t j = 0; jj != -8; jj -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v284[jj * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v285)[jj], v284[jj * 8]);
      }
      uint64_t v37 = *(id *)as::server::gSessionServerLog(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        int v38 = SHIBYTE(v299.__r_.__value_.__r.__words[2]);
        std::string::size_type v39 = v299.__r_.__value_.__r.__words[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&v269, -1, 0x20u, 0, 0, __p);
        int v40 = &v299;
        if (v38 < 0) {
          int v40 = (std::string *)v39;
        }
        if (SHIBYTE(__p[2]) >= 0) {
          std::string::size_type v41 = __p;
        }
        else {
          std::string::size_type v41 = (void **)__p[0];
        }
        *(_DWORD *)CFTypeRef cf = 136316162;
        *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
        *(_WORD *)&unsigned char cf[12] = 1024;
        *(_DWORD *)&cf[14] = 275;
        *(_WORD *)&cf[18] = 2080;
        *(void *)&cf[20] = "set_play_state";
        *(_WORD *)&cf[28] = 2080;
        *(void *)&cf[30] = v40;
        *(_WORD *)&cf[38] = 2080;
        v327 = (std::string *)v41;
        _os_log_impl(&dword_1CFE2A000, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }

      long long v42 = v278;
      if (!v278)
      {
        uint64_t v215 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v215);
      }
      __int16 v43 = v279;
      if (v279) {
        atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v44 = (as::server *)as::server::AudioSessionInfo::SetSiblingPlayerState((uint64_t)v42, *(unint64_t *)&v281[1], (uint64_t)a3, v258, a5, a2);
      int v45 = (int)v44;
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      uint64_t v46 = *(id *)as::server::gSessionServerLog(v44);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v47 = "true";
        *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
        *(_DWORD *)CFTypeRef cf = 136315650;
        if (!v45) {
          uint64_t v47 = "false";
        }
        *(_WORD *)&unsigned char cf[12] = 1024;
        *(_DWORD *)&cf[14] = 282;
        *(_WORD *)&cf[18] = 2080;
        *(void *)&cf[20] = v47;
        _os_log_impl(&dword_1CFE2A000, v46, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting kMXSessionProperty IsPlayingOutput/AudioToolboxIsPlaying for FigPlayer-owned MXSession to: %s", cf, 0x1Cu);
      }
      uint64_t v48 = _MXSessionSetProperty();
      v281[0] = v48;
      if (v48) {
        v281[0] = as::server::TranslateCMSessionErrorCode((uint64_t)"set_mx_IsPlayingOutput_property", (uint64_t *)&v299, 288, v48);
      }
      uint64_t v49 = _MXSessionSetProperty();
      v281[0] = v49;
      if (v49)
      {
        uint64_t v17 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_mx_AudioToolboxIsPlaying_property", (uint64_t *)&v299, 295, v49);
        v281[0] = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v269);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v270, v269);
      if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
      {
        __int16 v50 = (void *)v299.__r_.__value_.__r.__words[0];
LABEL_433:
        operator delete(v50);
        goto LABEL_434;
      }
      goto LABEL_434;
    }
  }
  unint64_t v10 = v278;
  if (!v278) {
    goto LABEL_34;
  }
  if (!*(void *)&v281[1])
  {
    uint64_t v16 = v279;
    if (v279) {
      atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v10, cf);
    unint64_t v10 = *(as::server::ConstAudioSessionInfo **)cf;
    *(void *)&v281[1] = *(void *)cf;
    if (*(void *)cf) {
      CFRelease(*(CFTypeRef *)cf);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  if (!a5 || (v258 & 0x11) == 0 || (v258 & 2) != 0) {
    goto LABEL_99;
  }
  __p[0] = 0;
  uint64_t v17 = _MXSessionCopyProperty();
  if (v17) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = __p[0] == 0;
  }
  if (v18)
  {
    if (!v17) {
      goto LABEL_434;
    }
    BOOL v19 = *(id *)as::server::gSessionServerLog((as::server *)__p[0]);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      goto LABEL_434;
    }
    *(_DWORD *)CFTypeRef cf = 136315650;
    *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
    *(_WORD *)&unsigned char cf[12] = 1024;
    *(_DWORD *)&cf[14] = 336;
    *(_WORD *)&cf[18] = 1024;
    *(_DWORD *)&cf[20] = v17;
    __int16 v20 = "%25s:%-5d kMXSessionProperty_SystemHasAudioInputDevice failed: %d";
    uint64_t v21 = v19;
    os_log_type_t v22 = OS_LOG_TYPE_ERROR;
    goto LABEL_50;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)__p[0]);
  CFRelease(__p[0]);
  if (!Value)
  {
    if ((v10 & 1) == 0)
    {
      uint64_t v17 = 561145203;
      goto LABEL_434;
    }
  }
LABEL_99:
  char v52 = v278;
  if (!v278)
  {
    uint64_t v213 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v213);
  }
  uint64_t v53 = v279;
  if (v279) {
    atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v52 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v277, *((const std::string::value_type **)v52 + 25), *((void *)v52 + 26));
  }
  else {
    std::string v277 = *(std::string *)((char *)v52 + 200);
  }
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  std::string::size_type v54 = *(id *)as::server::gSessionServerLog(v10);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v55 = &v277;
    }
    else {
      __int16 v55 = (std::string *)v277.__r_.__value_.__r.__words[0];
    }
    uint64_t v56 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)&v338, "entry");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(v56, -1, 0x20u, 0, 0, __p);
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v57 = __p;
    }
    else {
      uint64_t v57 = (void **)__p[0];
    }
    *(_DWORD *)CFTypeRef cf = 136316162;
    *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
    *(_WORD *)&unsigned char cf[12] = 1024;
    *(_DWORD *)&cf[14] = 342;
    *(_WORD *)&cf[18] = 2080;
    *(void *)&cf[20] = "set_play_state";
    *(_WORD *)&cf[28] = 2080;
    *(void *)&cf[30] = v55;
    *(_WORD *)&cf[38] = 2080;
    v327 = (std::string *)v57;
    _os_log_impl(&dword_1CFE2A000, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v338);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v339, v338);
  }

  if (*(void *)&v281[1])
  {
    int v59 = *(id *)as::server::gSessionServerLog(v58);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
    {
      int IsSessionActive = as::server::IsSessionActive(*(as::server **)&v281[1], (const void *)1);
      uint64_t v61 = "true";
      *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
      *(_DWORD *)CFTypeRef cf = 136315650;
      if (!IsSessionActive) {
        uint64_t v61 = "false";
      }
      *(_WORD *)&unsigned char cf[12] = 1024;
      *(_DWORD *)&cf[14] = 353;
      *(_WORD *)&cf[18] = 2080;
      *(void *)&cf[20] = v61;
      _os_log_impl(&dword_1CFE2A000, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d   IsSessionActive() = %s", cf, 0x1Cu);
    }

    if (!a5)
    {
LABEL_160:
      uint64_t v78 = v278;
      if (!v278)
      {
        uint64_t v218 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v218);
      }
      __int16 v79 = v279;
      if (v279) {
        atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      PlayerState = as::server::AudioSessionInfo::GetPlayerState(v78, a3);
      int v81 = v258 & (a5 == 1);
      if (v79) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v79);
      }
      if (PlayerState)
      {
        BOOL v248 = 0;
        if ((v258 & 0x10) != 0 && a5 == 1) {
          BOOL v248 = *((_DWORD *)PlayerState + 2) == 1 && (*((unsigned char *)PlayerState + 12) & 0x10) == 0;
        }
        if ((*((unsigned char *)PlayerState + 12) & 1) != 0 && *((_DWORD *)PlayerState + 2) == 1) {
          int v81 = 0;
        }
      }
      else
      {
        BOOL v248 = 0;
      }
      uint64_t v82 = v278;
      if (!v278)
      {
        uint64_t v219 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v219);
      }
      int v240 = v81;
      char v83 = v279;
      if (v279)
      {
        atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
        int v84 = *((_DWORD *)v82 + 67);
        std::__shared_weak_count::__release_shared[abi:ne180100](v83);
        uint64_t v82 = v278;
        if (!v278)
        {
          uint64_t v220 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v220);
        }
        uint64_t v85 = v279;
        if (v279)
        {
          atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
          int v86 = *((_DWORD *)v82 + 76);
          std::__shared_weak_count::__release_shared[abi:ne180100](v85);
          uint64_t v82 = v278;
          if (!v278)
          {
            uint64_t v230 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v230);
          }
          int v247 = v86;
LABEL_183:
          char v87 = v279;
          if (v279) {
            atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          as::server::AudioSessionInfo::SetPlayerState((uint64_t)v82, (uint64_t)a3, v258, a5, a2);
          if (v87) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v87);
          }
          __int16 v88 = v278;
          if (!v278)
          {
            uint64_t v221 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v221);
          }
          uint64_t v89 = v279;
          if (v279)
          {
            atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
            int v90 = *((_DWORD *)v88 + 67);
            std::__shared_weak_count::__release_shared[abi:ne180100](v89);
            __int16 v88 = v278;
            if (!v278)
            {
              uint64_t v222 = _os_crash();
              as::server::require_acq::AudioSessionServerSetClientPlayState(v222);
            }
            v91 = v279;
            if (v279)
            {
              atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
              int v249 = *((_DWORD *)v88 + 76);
              std::__shared_weak_count::__release_shared[abi:ne180100](v91);
              __int16 v88 = v278;
              if (!v278)
              {
                uint64_t v92 = _os_crash();
                as::server::require_acq::AudioSessionServerSetClientPlayState(v92);
              }
LABEL_195:
              uint64_t v93 = v279;
              if (v279)
              {
                atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                unsigned __int8 v253 = *((unsigned char *)v88 + 272);
                std::__shared_weak_count::__release_shared[abi:ne180100](v93);
                __int16 v88 = v278;
                if (!v278)
                {
                  uint64_t v94 = _os_crash();
                  as::server::require_acq::AudioSessionServerSetClientPlayState(v94);
                }
              }
              else
              {
                unsigned __int8 v253 = *((unsigned char *)v88 + 272);
              }
              v95 = v279;
              if (v279)
              {
                atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                unsigned int v96 = *((_DWORD *)v88 + 71);
                std::__shared_weak_count::__release_shared[abi:ne180100](v95);
                __int16 v88 = v278;
                if (!v278)
                {
                  uint64_t v223 = _os_crash();
                  as::server::require_acq::AudioSessionServerSetClientPlayState(v223);
                }
                v97 = v279;
                if (v279)
                {
                  atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                  unsigned int v244 = *((_DWORD *)v88 + 74);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v97);
                  __int16 v88 = v278;
                  BOOL v275 = 0;
                  if (!v278)
                  {
                    uint64_t v98 = _os_crash();
                    as::server::require_acq::AudioSessionServerSetClientPlayState(v98);
                  }
LABEL_206:
                  v99 = v279;
                  if (v279) {
                    atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  unsigned int v242 = v96;
                  int v100 = *((_DWORD *)v88 + 73);
                  if (v100)
                  {
                    BOOL v101 = *((_DWORD *)v88 + 70) == v100;
                    if (v99) {
                      goto LABEL_210;
                    }
                  }
                  else
                  {
                    BOOL v101 = 0;
                    if (v99)
                    {
LABEL_210:
                      std::__shared_weak_count::__release_shared[abi:ne180100](v99);
                      __int16 v88 = v278;
                      BOOL v275 = v101;
                      if (!v278)
                      {
                        uint64_t v102 = _os_crash();
                        as::server::require_acq::AudioSessionServerSetClientPlayState(v102);
                      }
LABEL_214:
                      char v103 = v279;
                      if (v279)
                      {
                        atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                        int v241 = *((_DWORD *)v88 + 107);
                        std::__shared_weak_count::__release_shared[abi:ne180100](v103);
                        __int16 v88 = v278;
                        if (!v278)
                        {
                          uint64_t v104 = _os_crash();
                          as::server::require_acq::AudioSessionServerSetClientPlayState(v104);
                        }
                      }
                      else
                      {
                        int v241 = *((_DWORD *)v88 + 107);
                      }
                      v105 = v279;
                      if (v279)
                      {
                        atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                        int v106 = *((_DWORD *)v88 + 77);
                        std::__shared_weak_count::__release_shared[abi:ne180100](v105);
                        if (!v278)
                        {
                          uint64_t v107 = _os_crash();
                          as::server::require_acq::AudioSessionServerSetClientPlayState(v107);
                        }
                      }
                      else
                      {
                        int v106 = *((_DWORD *)v88 + 77);
                      }
                      uint64_t v108 = v279;
                      if (v279)
                      {
                        atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                        std::__shared_weak_count::__release_shared[abi:ne180100](v108);
                      }
                      char v109 = 0;
                      BOOL v274 = 0;
                      if (v84)
                      {
                        uint64_t v110 = 0;
                        goto LABEL_240;
                      }
                      uint64_t v110 = 0;
                      if (!(v90 | v253)) {
                        goto LABEL_240;
                      }
                      __int16 v111 = v278;
                      if (!v278)
                      {
                        uint64_t v232 = _os_crash();
                        as::server::require_acq::AudioSessionServerSetClientPlayState(v232);
                      }
                      char v112 = v279;
                      if (v279)
                      {
                        atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                        int v113 = *((unsigned __int8 *)v111 + 312);
                        std::__shared_weak_count::__release_shared[abi:ne180100](v112);
                        if (v113) {
                          goto LABEL_239;
                        }
                        __int16 v111 = v278;
                        if (!v278)
                        {
                          uint64_t v114 = _os_crash();
                          as::server::require_acq::AudioSessionServerSetClientPlayState(v114);
                        }
                      }
                      else if (*((unsigned char *)v278 + 312))
                      {
                        goto LABEL_239;
                      }
                      __int16 v115 = v279;
                      if (v279)
                      {
                        atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                        int v116 = *((_DWORD *)v111 + 70);
                        std::__shared_weak_count::__release_shared[abi:ne180100](v115);
                        if (v116) {
                          goto LABEL_235;
                        }
                      }
                      else if (*((_DWORD *)v111 + 70))
                      {
LABEL_235:
                        *(void *)CFTypeRef cf = 0;
                        _MXSessionCopyProperty();
                        char v117 = *(const void **)cf;
                        if (*(void *)cf)
                        {
                          if (CFEqual(*(CFTypeRef *)cf, (CFTypeRef)*MEMORY[0x1E4F75960]))
                          {
                            char v109 = (OS::CF *)(id)*MEMORY[0x1E4F75918];
                            uint64_t v110 = "PlayAndRecord";
                          }
                          else
                          {
                            v181 = v278;
                            if (!v278)
                            {
                              uint64_t v235 = _os_crash();
                              as::server::require_acq::AudioSessionServerSetClientPlayState(v235);
                            }
                            v182 = v279;
                            if (v279)
                            {
                              atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                              *((unsigned char *)v181 + 312) = 1;
                              std::__shared_weak_count::__release_shared[abi:ne180100](v182);
                              v181 = v278;
                              if (!v278)
                              {
                                uint64_t v236 = _os_crash();
                                as::server::require_acq::AudioSessionServerSetClientPlayState(v236);
                              }
                              v183 = v279;
                              if (v279)
                              {
                                char v184 = 0;
                                atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                              }
                              else
                              {
                                char v184 = 1;
                              }
                            }
                            else
                            {
                              v183 = 0;
                              char v184 = 1;
                              *((unsigned char *)v278 + 312) = 1;
                            }
                            as::server::AudioSessionInfo::SetCachedCategory(v181, v117);
                            if ((v184 & 1) == 0) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v183);
                            }
                            uint64_t v110 = 0;
                            char v109 = 0;
                          }
                          CFRelease(v117);
                        }
                        else
                        {
                          char v109 = (OS::CF *)(id)*MEMORY[0x1E4F75918];
                          uint64_t v110 = "PlayAndRecord";
                        }
LABEL_240:
                        v254 = v109;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)&v338, "type");
                        v340 = &v338;
                        char v341 = 1;
                        v276 = (char *)AudioSession::ClientPlayerAsCString(a2);
                        v245 = v110;
                        int v243 = v106;
                        v344 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v342, &v276);
                        char v345 = 1;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)cf, (uint64_t)&v338, 2, 1, 2);
                        *(void *)&cf[16] = cf;
                        cf[24] = 1;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v319, "player");
                        v321 = v319;
                        char v322 = 1;
                        AudioSession::FormatPointerAsHex(a3, &v269);
                        uint64_t v324 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v323, (uint64_t)&v269);
                        char v325 = 1;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&cf[32], (uint64_t)v319, 2, 1, 2);
                        *(void *)v328 = &cf[32];
                        v328[8] = 1;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v312, "modes");
                        int v246 = v90;
                        v314 = v312;
                        char v315 = 1;
                        AudioSession::ClientActiveModesToString((AudioSession *)v258);
                        id v118 = objc_claimAutoreleasedReturnValue();
                        v268 = (char *)[v118 UTF8String];
                        uint64_t v317 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v316, &v268);
                        char v318 = 1;
                        v252 = v118;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v329, (uint64_t)v312, 2, 1, 2);
                        v330 = v329;
                        char v331 = 1;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v304, "state");
                        v306 = v304;
                        char v307 = 1;
                        v267 = (char *)AudioSession::PlayStateToString(a5);
                        v310 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v308, &v267);
                        char v311 = 1;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v332, (uint64_t)v304, 2, 1, 2);
                        v333 = v332;
                        char v334 = 1;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)&v299, "IOs");
                        v299.__r_.__value_.__r.__words[2] = (std::string::size_type)&v299;
                        char v300 = 1;
                        uint64_t v119 = v278;
                        if (!v278)
                        {
                          uint64_t v224 = _os_crash();
                          as::server::require_acq::AudioSessionServerSetClientPlayState(v224);
                        }
                        char v120 = v279;
                        if (v279) {
                          atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v121 = (void *)*((int *)v119 + 71);
                        LOBYTE(__p[0]) = 5;
                        __p[1] = v121;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)__p);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)__p);
                        __p[2] = __p;
                        char v283 = 1;
                        v122 = v278;
                        v251 = v120;
                        if (!v278)
                        {
                          uint64_t v225 = _os_crash();
                          as::server::require_acq::AudioSessionServerSetClientPlayState(v225);
                        }
                        v123 = v279;
                        if (v279) {
                          atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        v124 = (uint64_t *)*((int *)v122 + 69);
                        v284[0] = 5;
                        v285 = v124;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v284);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v284);
                        v286 = v284;
                        char v287 = 1;
                        v125 = v278;
                        v250 = v123;
                        if (!v278)
                        {
                          uint64_t v226 = _os_crash();
                          as::server::require_acq::AudioSessionServerSetClientPlayState(v226);
                        }
                        v126 = v279;
                        if (v279) {
                          atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v127 = *((int *)v125 + 75);
                        v288[0] = 5;
                        uint64_t v289 = v127;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v288);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v288);
                        v290 = v288;
                        char v291 = 1;
                        v128 = v278;
                        if (!v278)
                        {
                          uint64_t v227 = _os_crash();
                          as::server::require_acq::AudioSessionServerSetClientPlayState(v227);
                        }
                        v129 = v279;
                        if (v279) {
                          atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v130 = *((int *)v128 + 76);
                        v292[0] = 5;
                        uint64_t v293 = v130;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v292);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v292);
                        v294 = v292;
                        char v295 = 1;
                        v131 = v278;
                        if (!v278)
                        {
                          uint64_t v228 = _os_crash();
                          as::server::require_acq::AudioSessionServerSetClientPlayState(v228);
                        }
                        v132 = v279;
                        if (v279) {
                          atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v133 = *((int *)v131 + 72);
                        v296[0] = 5;
                        v297[0] = v133;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v296);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v296);
                        v297[1] = v296;
                        char v298 = 1;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v265, (uint64_t)__p, 5, 1, 2);
                        v301[0] = (_BYTE)v265;
                        v302[0] = v266;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v265);
                        LOBYTE(v265) = 0;
                        v266 = 0;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v301);
                        v302[1] = v301;
                        char v303 = 1;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v335, (uint64_t)&v299, 2, 1, 2);
                        v336 = v335;
                        char v337 = 1;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v272, (uint64_t)cf, 5, 1, 2);
                        for (kuint64_t k = 0; kk != -160; kk -= 32)
                        {
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v335[kk]);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v335[kk + 8], v335[kk]);
                        }
                        for (muint64_t m = 0; mm != -8; mm -= 4)
                        {
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v301[mm * 8]);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v302[mm], v301[mm * 8]);
                        }
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v265);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v266, v265);
                        for (nuint64_t n = 0; nn != -20; nn -= 4)
                        {
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v296[nn * 8]);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v297[nn], v296[nn * 8]);
                        }
                        if (v132) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v132);
                        }
                        if (v129) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v129);
                        }
                        if (v126) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v126);
                        }
                        if (v250) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v250);
                        }
                        if (v251) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v251);
                        }
                        for (uint64_t i1 = 0; i1 != -64; i1 -= 32)
                        {
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v308[i1]);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v309 + i1), v308[i1]);
                        }
                        for (uint64_t i2 = 0; i2 != -64; i2 -= 32)
                        {
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v316[i2]);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v316[i2 + 8], v316[i2]);
                        }

                        for (uint64_t i3 = 0; i3 != -64; i3 -= 32)
                        {
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v323[i3]);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v323[i3 + 8], v323[i3]);
                        }
                        if (v271 < 0) {
                          operator delete(v269);
                        }
                        for (uint64_t i4 = 0; i4 != -8; i4 -= 4)
                        {
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v342[i4 * 8]);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v343)[i4], v342[i4 * 8]);
                        }
                        if (v278)
                        {
                          os_unfair_lock_unlock((os_unfair_lock_t)v278 + 158);
                          char v280 = 0;
                        }
                        if (v254)
                        {
                          v142 = *(id *)as::server::gSessionServerLog((as::server *)v141);
                          if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)CFTypeRef cf = 136315650;
                            *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                            *(_WORD *)&unsigned char cf[12] = 1024;
                            *(_DWORD *)&cf[14] = 472;
                            *(_WORD *)&cf[18] = 2080;
                            *(void *)&cf[20] = v245;
                            _os_log_impl(&dword_1CFE2A000, v142, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting default category %s", cf, 0x1Cu);
                          }

                          strcpy((char *)&v299, "set_category");
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)__p, "key");
                          __p[2] = __p;
                          char v283 = 1;
                          OS::CF::ToJSON((const __CFString *)*MEMORY[0x1E4F75EC8], (uint64_t)v312);
                          v284[0] = v312[0];
                          v285 = v313;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v312);
                          v312[0] = 0;
                          v313 = 0;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v284);
                          v286 = v284;
                          char v287 = 1;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)cf, (uint64_t)__p, 2, 1, 2);
                          *(void *)&cf[16] = cf;
                          cf[24] = 1;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)&v338, "value");
                          v340 = &v338;
                          char v341 = 1;
                          OS::CF::ToJSON((const __CFString *)v254, (uint64_t)v304);
                          v342[0] = v304[0];
                          v343 = v305;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v304);
                          v304[0] = 0;
                          v305 = 0;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v342);
                          v344 = v342;
                          char v345 = 1;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&cf[32], (uint64_t)&v338, 2, 1, 2);
                          *(void *)v328 = &cf[32];
                          v328[8] = 1;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v319, (uint64_t)cf, 2, 1, 2);
                          for (uint64_t i5 = 0; i5 != -64; i5 -= 32)
                          {
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&cf[i5 + 32]);
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&cf[i5 + 40], cf[i5 + 32]);
                          }
                          for (uint64_t i6 = 0; i6 != -8; i6 -= 4)
                          {
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v342[i6 * 8]);
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v343)[i6], v342[i6 * 8]);
                          }
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v304);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v305, v304[0]);
                          for (uint64_t i7 = 0; i7 != -8; i7 -= 4)
                          {
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v284[i7 * 8]);
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v285)[i7], v284[i7 * 8]);
                          }
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v312);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v313, v312[0]);
                          v147 = *(id *)as::server::gSessionServerLog(v146);
                          if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
                          {
                            int v148 = SHIBYTE(v277.__r_.__value_.__r.__words[2]);
                            std::string::size_type v149 = v277.__r_.__value_.__r.__words[0];
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v319, -1, 0x20u, 0, 0, __p);
                            v150 = &v277;
                            if (v148 < 0) {
                              v150 = (std::string *)v149;
                            }
                            if (SHIBYTE(__p[2]) >= 0) {
                              v151 = __p;
                            }
                            else {
                              v151 = (void **)__p[0];
                            }
                            *(_DWORD *)CFTypeRef cf = 136316162;
                            *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                            *(_WORD *)&unsigned char cf[12] = 1024;
                            *(_DWORD *)&cf[14] = 216;
                            *(_WORD *)&cf[18] = 2080;
                            *(void *)&cf[20] = &v299;
                            *(_WORD *)&cf[28] = 2080;
                            *(void *)&cf[30] = v150;
                            *(_WORD *)&cf[38] = 2080;
                            v327 = (std::string *)v151;
                            _os_log_impl(&dword_1CFE2A000, v147, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
                            if (SHIBYTE(__p[2]) < 0) {
                              operator delete(__p[0]);
                            }
                          }

                          uint64_t v152 = _MXSessionSetProperty();
                          int v153 = as::server::TranslateCMSessionErrorCode((uint64_t)&v299, (uint64_t *)&v277, 218, v152);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v319);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v320, v319[0]);
                          v281[0] = v153;
                          if (v153)
                          {
LABEL_414:
                            v206 = *(id *)as::server::gSessionServerLog((as::server *)v141);
                            if (os_log_type_enabled(v206, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)CFTypeRef cf = 136315650;
                              *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                              *(_WORD *)&unsigned char cf[12] = 1024;
                              *(_DWORD *)&cf[14] = 706;
                              *(_WORD *)&cf[18] = 1024;
                              *(_DWORD *)&cf[20] = v281[0];
                              _os_log_impl(&dword_1CFE2A000, v206, OS_LOG_TYPE_DEBUG, "%25s:%-5d Bailing with error %d -- setting player state to Stopped", cf, 0x18u);
                            }

                            if (!v278
                              || (os_unfair_lock_lock((os_unfair_lock_t)v278 + 158), char v280 = 1, (v207 = v278) == 0))
                            {
                              uint64_t v238 = _os_crash();
                              as::server::require_acq::AudioSessionServerSetClientPlayState(v238);
                            }
                            v208 = v279;
                            if (v279) {
                              atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            as::server::AudioSessionInfo::SetPlayerState((uint64_t)v207, (uint64_t)a3, v258, 0, a2);
                            if (v208) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v208);
                            }
                            v209 = (os_unfair_lock_s *)v278;
                            if (!v278)
                            {
                              uint64_t v229 = _os_crash();
                              as::server::require_acq::AudioSessionServerSetClientPlayState(v229);
                            }
                            v210 = v279;
                            if (v279)
                            {
                              atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                              uint32_t os_unfair_lock_opaque = v209[67]._os_unfair_lock_opaque;
                              std::__shared_weak_count::__release_shared[abi:ne180100](v210);
                              if (os_unfair_lock_opaque != 1)
                              {
                                v209 = (os_unfair_lock_s *)v278;
                                if (!v278) {
                                  goto LABEL_429;
                                }
                                goto LABEL_428;
                              }
                            }
                            else if (*((_DWORD *)v278 + 67) != 1)
                            {
LABEL_428:
                              os_unfair_lock_unlock(v209 + 158);
                              char v280 = 0;
LABEL_429:
                              _MXSessionSetProperty();
                              _MXSessionSetProperty();
                              _MXSessionSetProperty();
                              _MXSessionSetProperty();
                              _MXSessionSetProperty();
                            }
LABEL_430:
                            uint64_t v17 = v281[0];
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v272);
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v273, v272);

                            goto LABEL_431;
                          }
                        }
                        if ((v247 == 0) == (v249 != 0))
                        {
                          v154 = *(id *)as::server::gSessionServerLog((as::server *)v141);
                          if (os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)CFTypeRef cf = 136315650;
                            *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                            *(_WORD *)&unsigned char cf[12] = 1024;
                            *(_DWORD *)&cf[14] = 482;
                            *(_WORD *)&cf[18] = 1024;
                            *(_DWORD *)&cf[20] = v249 != 0;
                            _os_log_impl(&dword_1CFE2A000, v154, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting kCMSessionProperty_DoesInterAppAudio to %d", cf, 0x18u);
                          }

                          uint64_t v141 = _MXSessionSetProperty();
                          v281[0] = v141;
                          if (v141)
                          {
                            uint64_t v233 = _os_crash();
                            as::server::require_acq::AudioSessionServerSetClientPlayState(v233);
                          }
                        }
                        if ((v258 & 0x10) == 0) {
                          goto LABEL_307;
                        }
                        v263[0] = 4;
                        uint64_t v264 = 1;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v263);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v263);
                        v155 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v272, "siri_listening");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v263);
                        unsigned __int8 v156 = *(unsigned char *)v155;
                        *(unsigned char *)v155 = v263[0];
                        v263[0] = v156;
                        v157 = (uint64_t *)v155[1];
                        v155[1] = v264;
                        uint64_t v264 = (uint64_t)v157;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v263);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v264, v263[0]);
                        if (v248)
                        {
LABEL_307:
                          if (*(void *)&v281[1])
                          {
                            v158 = *(id *)as::server::gSessionServerLog((as::server *)v141);
                            if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
                            {
                              v159 = "false";
                              *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                              *(_WORD *)&unsigned char cf[12] = 1024;
                              *(_DWORD *)CFTypeRef cf = 136315906;
                              if (v246 == 1) {
                                v159 = "true";
                              }
                              *(_DWORD *)&cf[14] = 497;
                              *(_WORD *)&cf[18] = 2048;
                              *(void *)&cf[20] = *(void *)&v281[1];
                              *(_WORD *)&cf[28] = 2080;
                              *(void *)&cf[30] = v159;
                              _os_log_impl(&dword_1CFE2A000, v158, OS_LOG_TYPE_DEFAULT, "%25s:%-5d subsession %p setting kMXSessionProperty_AudioToolboxIsPlaying and kMXSessionProperty_IsPlayingOutput to %s", cf, 0x26u);
                            }

                            if (!v278)
                            {
                              uint64_t v234 = _os_crash();
                              as::server::require_acq::AudioSessionServerSetClientPlayState(v234);
                            }
                            v160 = v279;
                            if (v279)
                            {
                              atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                              std::__shared_weak_count::__release_shared[abi:ne180100](v160);
                            }
                            uint64_t v161 = _MXSessionSetProperty();
                            v281[0] = v161;
                            if (v161)
                            {
                              int v162 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_mx_is_playing_output_property", (uint64_t *)&v277, 505, v161);
LABEL_362:
                              v281[0] = v162;
LABEL_412:
                              uint64_t v141 = v281[0];
LABEL_413:
                              if (!v141) {
                                goto LABEL_430;
                              }
                              goto LABEL_414;
                            }
                            uint64_t v141 = _MXSessionSetProperty();
                            v281[0] = v141;
                            if (v141)
                            {
                              int v162 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_mx_is_playing_property", (uint64_t *)&v277, 514, v141);
                              goto LABEL_362;
                            }
                          }
                          v163 = *(id *)as::server::gSessionServerLog((as::server *)v141);
                          if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)CFTypeRef cf = 136315650;
                            *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                            *(_WORD *)&unsigned char cf[12] = 1024;
                            *(_DWORD *)&cf[14] = 521;
                            *(_WORD *)&cf[18] = 1024;
                            *(_DWORD *)&cf[20] = v243 != 0;
                            _os_log_impl(&dword_1CFE2A000, v163, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting kCMSessionProperty_HapticEngineIsPlaying to %d", cf, 0x18u);
                          }

                          v164 = (as::server *)_MXSessionSetProperty();
                          v281[0] = (int)v164;
                          if (v164)
                          {
                            uint64_t v141 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_HapticEngineIsPlaying_property", (uint64_t *)&v277, 527, (uint64_t)v164);
LABEL_323:
                            v281[0] = v141;
                            goto LABEL_413;
                          }
                          if (v253)
                          {
                            if ((a5 | 2) != 2 && !v248)
                            {
                              v164 = (as::server *)as::server::IsSessionActive(*(as::server **)&v281[1], (const void *)1);
                              if (!v164)
                              {
                                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)cf, "side_effect");
                                *(void *)&cf[16] = cf;
                                cf[24] = 1;
                                *(void *)v328 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[77],char [77],0>((uint64_t)&cf[32], "Attempt implicit activation by calling _CMSessionBeginInterruption_WithFlags");
                                v328[8] = 1;
                                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)__p, (uint64_t)cf, 2, 1, 2);
                                __p[2] = __p;
                                char v283 = 1;
                                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v338, (uint64_t)__p, 1, 1, 2);
                                nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)__p);
                                for (uint64_t i8 = 32; i8 != -32; i8 -= 32)
                                  v186 = nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)&cf[i8]);
                                v187 = *(id *)as::server::gSessionServerLog((as::server *)v186);
                                if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
                                {
                                  int v188 = SHIBYTE(v277.__r_.__value_.__r.__words[2]);
                                  std::string::size_type v189 = v277.__r_.__value_.__r.__words[0];
                                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&v338, -1, 0x20u, 0, 0, __p);
                                  v190 = &v277;
                                  if (v188 < 0) {
                                    v190 = (std::string *)v189;
                                  }
                                  if (SHIBYTE(__p[2]) >= 0) {
                                    v191 = __p;
                                  }
                                  else {
                                    v191 = (void **)__p[0];
                                  }
                                  *(_DWORD *)CFTypeRef cf = 136316162;
                                  *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                                  *(_WORD *)&unsigned char cf[12] = 1024;
                                  *(_DWORD *)&cf[14] = 542;
                                  *(_WORD *)&cf[18] = 2080;
                                  *(void *)&cf[20] = "set_play_state";
                                  *(_WORD *)&cf[28] = 2080;
                                  *(void *)&cf[30] = v190;
                                  *(_WORD *)&cf[38] = 2080;
                                  v327 = (std::string *)v191;
                                  _os_log_impl(&dword_1CFE2A000, v187, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
                                  if (SHIBYTE(__p[2]) < 0) {
                                    operator delete(__p[0]);
                                  }
                                }

                                v192 = (as::server::LegacySessionManager *)_MXSessionBeginInterruption_WithSecTaskAndFlags();
                                v281[0] = (int)v192;
                                if (v192)
                                {
                                  v281[0] = as::server::TranslateCMSessionErrorCode((uint64_t)"cm_session_begin_interruption", (uint64_t *)&v277, 552, (uint64_t)v192);
                                  *(void *)CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                                  *(_WORD *)&cf[8] = 257;
                                  CACFDictionary::AddSInt32((CFMutableDictionaryRef *)cf, @"cm_session_begin_interruption", v281[0]);
                                  CAReportingClientSendMessage();
                                  CACFDictionary::~CACFDictionary((CACFDictionary *)cf);
                                  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&v338);
                                  goto LABEL_412;
                                }
                                v216 = as::server::LegacySessionManager::Instance(v192);
                                v217 = (os_unfair_lock_s *)*((void *)v216 + 31);
                                if (v217)
                                {
                                  os_unfair_lock_lock(*((os_unfair_lock_t *)v216 + 31));
                                  as::server::DeviceTimeObserver::sessionIsActive((as::server::DeviceTimeObserver *)&v217[2], a1, 1);
                                  os_unfair_lock_unlock(v217);
                                }
                                v164 = (as::server *)nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&v338);
                              }
                            }
                          }
                          if (v244 && v242 <= v244)
                          {
                            v166 = *(id *)as::server::gSessionServerLog(v164);
                            if (os_log_type_enabled(v166, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)CFTypeRef cf = 136315394;
                              *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                              *(_WORD *)&unsigned char cf[12] = 1024;
                              *(_DWORD *)&cf[14] = 577;
                              _os_log_impl(&dword_1CFE2A000, v166, OS_LOG_TYPE_DEBUG, "%25s:%-5d Record permission not granted, so kCMSessionProperty_IsRecording will be overriden to false.", cf, 0x12u);
                            }
                          }
                          char v168 = (char)IsRemoteDeviceInputControlAllowed;
                          uint64_t v169 = as::RemoteDeviceControlEnabled(IsRemoteDeviceInputControlAllowed);
                          if (v169)
                          {
                            if (v242 <= v244 || v241 == 0) {
                              char v171 = 0;
                            }
                            else {
                              char v171 = v168;
                            }
                            LOBYTE(__p[0]) = v171;
                            v172 = *(id *)as::server::gSessionServerLog((as::server *)v169);
                            if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)CFTypeRef cf = 136315650;
                              *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                              *(_WORD *)&unsigned char cf[12] = 1024;
                              *(_DWORD *)&cf[14] = 602;
                              *(_WORD *)&cf[18] = 1024;
                              *(_DWORD *)&cf[20] = LOBYTE(__p[0]);
                              _os_log_impl(&dword_1CFE2A000, v172, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting kMXSessionProperty_IsRecordingMutedForRemoteDevice to %d", cf, 0x18u);
                            }

                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<BOOL const&,BOOL,0>((uint64_t)v262, (unsigned __int8 *)__p);
                            v173 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v272, "IsRecordingMutedForRemoteDevice");
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v173, (uint64_t)v262);
                            nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v262);
                            uint64_t v169 = _MXSessionSetProperty();
                            v281[0] = v169;
                            if (v169)
                            {
                              uint64_t v141 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_is_recording_muted_for_remote_device_property", (uint64_t *)&v277, 610, v169);
                              goto LABEL_323;
                            }
                          }
                          *(void *)CFTypeRef cf = &v272;
                          *(void *)&cf[8] = &v275;
                          *(void *)&cf[16] = v281;
                          *(void *)&cf[24] = &v278;
                          *(void *)&cf[32] = &v281[1];
                          v327 = &v277;
                          BOOL v175 = v242 > v244 && v275;
                          if ((v258 & 1) != 0 && v175 && !v241)
                          {
                            uint64_t v169 = as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()((uint64_t)cf);
                            if ((v169 & 1) == 0) {
                              goto LABEL_412;
                            }
                          }
                          BOOL v177 = v242 > v244 && v241 == 0;
                          LOBYTE(v338) = v177;
                          v178 = *(id *)as::server::gSessionServerLog((as::server *)v169);
                          if (os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                          {
                            LODWORD(__p[0]) = 136315650;
                            *(void **)((char *)__p + 4) = "AudioSessionServerImpPlayState.mm";
                            WORD2(__p[1]) = 1024;
                            *(_DWORD *)((char *)&__p[1] + 6) = 649;
                            WORD1(__p[2]) = 1024;
                            HIDWORD(__p[2]) = v338;
                            _os_log_impl(&dword_1CFE2A000, v178, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting kMXSessionProperty_IsRecording to %d", (uint8_t *)__p, 0x18u);
                          }

                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<BOOL const&,BOOL,0>((uint64_t)v261, (unsigned __int8 *)&v338);
                          v179 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v272, "IsRecording");
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v179, (uint64_t)v261);
                          nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v261);
                          uint64_t v180 = _MXSessionSetProperty();
                          v281[0] = v180;
                          if (v180)
                          {
                            int v162 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_is_recording_property", (uint64_t *)&v277, 655, v180);
                            goto LABEL_362;
                          }
                          if ((v258 & 1) != 0
                            && !v175
                            && !v241
                            && !as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()((uint64_t)cf))
                          {
                            goto LABEL_412;
                          }
                          if (v242 == 1) {
                            int v193 = v240;
                          }
                          else {
                            int v193 = 0;
                          }
                          if ((v258 & 1) != 0 && v242)
                          {
                            v194 = v278;
                            if (!v278)
                            {
                              uint64_t v237 = _os_crash();
                              as::server::require_acq::AudioSessionServerSetClientPlayState(v237);
                            }
                            v195 = v279;
                            if (v279) {
                              atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            v260[0] = v194;
                            v260[1] = v195;
                            if (v195) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v195);
                            }
                          }
                        }
                        BOOL v274 = as::server::IsSessionActive(*(as::server **)&v281[1], (const void *)1) != 0;
                        if (!v278
                          || (os_unfair_lock_lock((os_unfair_lock_t)v278 + 158), char v280 = 1, (v196 = v278) == 0))
                        {
                          uint64_t v239 = _os_crash();
                          as::server::require_acq::AudioSessionServerSetClientPlayState(v239);
                        }
                        v197 = v279;
                        if (v279) {
                          atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        as::server::AudioSessionInfo::UpdateCachedActivationState(v196, v274);
                        if (v197) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v197);
                        }
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<BOOL const&,BOOL,0>((uint64_t)v259, (unsigned __int8 *)&v274);
                        v198 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v272, "active");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v198, (uint64_t)v259);
                        v199 = nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v259);
                        v200 = *(id *)as::server::gSessionServerLog((as::server *)v199);
                        if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
                        {
                          int v201 = SHIBYTE(v277.__r_.__value_.__r.__words[2]);
                          std::string::size_type v202 = v277.__r_.__value_.__r.__words[0];
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&v272, -1, 0x20u, 0, 0, __p);
                          v203 = &v277;
                          if (v201 < 0) {
                            v203 = (std::string *)v202;
                          }
                          if (SHIBYTE(__p[2]) >= 0) {
                            v204 = __p;
                          }
                          else {
                            v204 = (void **)__p[0];
                          }
                          *(_DWORD *)CFTypeRef cf = 136316162;
                          *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                          *(_WORD *)&unsigned char cf[12] = 1024;
                          *(_DWORD *)&cf[14] = 697;
                          *(_WORD *)&cf[18] = 2080;
                          *(void *)&cf[20] = "set_play_state";
                          *(_WORD *)&cf[28] = 2080;
                          *(void *)&cf[30] = v203;
                          *(_WORD *)&cf[38] = 2080;
                          v327 = (std::string *)v204;
                          _os_log_impl(&dword_1CFE2A000, v200, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
                          if (SHIBYTE(__p[2]) < 0) {
                            operator delete(__p[0]);
                          }
                        }

                        if (a6) {
                          as::server::require_acq::GetAudioQueueOptions(*(as::server::require_acq **)&v281[1], a6, v205);
                        }
                        goto LABEL_412;
                      }
LABEL_239:
                      char v109 = 0;
                      uint64_t v110 = 0;
                      goto LABEL_240;
                    }
                  }
                  BOOL v275 = v101;
                  goto LABEL_214;
                }
              }
              else
              {
                unsigned int v96 = *((_DWORD *)v88 + 71);
              }
              unsigned int v244 = *((_DWORD *)v88 + 74);
              BOOL v275 = 0;
              goto LABEL_206;
            }
          }
          else
          {
            int v90 = *((_DWORD *)v278 + 67);
          }
          int v249 = *((_DWORD *)v88 + 76);
          goto LABEL_195;
        }
      }
      else
      {
        int v84 = *((_DWORD *)v278 + 67);
      }
      int v247 = *((_DWORD *)v82 + 76);
      goto LABEL_183;
    }
    *(void *)CFTypeRef cf = 0;
    _MXSessionCopyProperty();
    __int16 v62 = *(void **)cf;
    uint64_t v63 = (as::server *)[*(id *)cf isEqualToString:*MEMORY[0x1E4F75878]];
    char v64 = v63 ^ 1;
    if ((v258 & 0x13) == 0) {
      char v64 = 1;
    }
    if ((v64 & 1) == 0)
    {
      id v65 = *(id *)as::server::gSessionServerLog(v63);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
        int v66 = SHIBYTE(v277.__r_.__value_.__r.__words[2]);
        std::string::size_type v67 = v277.__r_.__value_.__r.__words[0];
        LOBYTE(v338) = 0;
        v339 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v338);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v338);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&v338, -1, 0x20u, 0, 0, __p);
        char v68 = &v277;
        if (v66 < 0) {
          char v68 = (std::string *)v67;
        }
        if (SHIBYTE(__p[2]) >= 0) {
          uint64_t v69 = __p;
        }
        else {
          uint64_t v69 = (void **)__p[0];
        }
        *(_DWORD *)CFTypeRef cf = 136316418;
        *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
        *(_WORD *)&unsigned char cf[12] = 1024;
        *(_DWORD *)&cf[14] = 364;
        *(_WORD *)&cf[18] = 2080;
        *(void *)&cf[20] = "set_play_state";
        *(_WORD *)&cf[28] = 2080;
        *(void *)&cf[30] = "Error adding running client - category is processing only but input/output requested";
        *(_WORD *)&cf[38] = 2080;
        v327 = v68;
        *(_WORD *)v328 = 2080;
        *(void *)&v328[2] = v69;
LABEL_155:
        _os_log_impl(&dword_1CFE2A000, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x3Au);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&v338);
        goto LABEL_158;
      }
      goto LABEL_158;
    }
    char v71 = v278;
    if (!v278)
    {
      uint64_t v231 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v231);
    }
    id v72 = v279;
    if (v279)
    {
      atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
      if (*((_DWORD *)v71 + 23) != 1935830119)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
LABEL_159:

        goto LABEL_160;
      }
    }
    else if (*((_DWORD *)v278 + 23) != 1935830119)
    {
      goto LABEL_159;
    }
    uint64_t v73 = [v62 isEqualToString:*MEMORY[0x1E4F75908]];
    if (v73 & 1) != 0 || (uint64_t v73 = [v62 isEqualToString:*MEMORY[0x1E4F75990]], (v73))
    {
      if (v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
      }
    }
    else
    {
      if (v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
      }
      if (a2 != 1885564012) {
        goto LABEL_159;
      }
    }
    id v65 = *(id *)as::server::gSessionServerLog((as::server *)v73);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      int v74 = SHIBYTE(v277.__r_.__value_.__r.__words[2]);
      std::string::size_type v75 = v277.__r_.__value_.__r.__words[0];
      LOBYTE(v338) = 0;
      v339 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v338);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v338);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&v338, -1, 0x20u, 0, 0, __p);
      uint64_t v76 = &v277;
      if (v74 < 0) {
        uint64_t v76 = (std::string *)v75;
      }
      if (SHIBYTE(__p[2]) >= 0) {
        char v77 = __p;
      }
      else {
        char v77 = (void **)__p[0];
      }
      *(_DWORD *)CFTypeRef cf = 136316418;
      *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
      *(_WORD *)&unsigned char cf[12] = 1024;
      *(_DWORD *)&cf[14] = 375;
      *(_WORD *)&cf[18] = 2080;
      *(void *)&cf[20] = "set_play_state";
      *(_WORD *)&cf[28] = 2080;
      *(void *)&cf[30] = "Error adding running client on a sibling session with PhoneCall / TTY category or PhoneCall player type";
      *(_WORD *)&cf[38] = 2080;
      v327 = v76;
      *(_WORD *)v328 = 2080;
      *(void *)&v328[2] = v77;
      goto LABEL_155;
    }
LABEL_158:

    uint64_t v17 = 560161140;
    goto LABEL_431;
  }
  uint64_t v17 = 2003329396;
  unsigned int v70 = *(id *)as::server::gSessionServerLog(v58);
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)CFTypeRef cf = 136315650;
    *(void *)&cf[4] = "AudioSessionServerImpPlayState.mm";
    *(_WORD *)&unsigned char cf[12] = 1024;
    *(_DWORD *)&cf[14] = 348;
    *(_WORD *)&cf[18] = 1024;
    *(_DWORD *)&cf[20] = a1;
    _os_log_impl(&dword_1CFE2A000, v70, OS_LOG_TYPE_DEBUG, "%25s:%-5d sessionID = 0x%x no MXSession for this client (client exited?)", cf, 0x18u);
  }
LABEL_431:
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
  {
    __int16 v50 = (void *)v277.__r_.__value_.__r.__words[0];
    goto LABEL_433;
  }
LABEL_434:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v278);
  return v17;
}

void sub_1CFE50C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,os_unfair_lock_s *a53)
{
  os_unfair_lock_unlock(v53);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(v54 - 168));
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a43);

  if (a52 < 0) {
    operator delete(__p);
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a53);
  _Unwind_Resume(a1);
}

uint64_t **nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(uint64_t **a1)
{
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(uint64_t a1, uint64_t a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  char v4 = *(unsigned char *)a1;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)a2 = v4;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void **as::server::AudioSessionInfo::GetPlayerState(as::server::AudioSessionInfo *this, void *a2)
{
  uint64_t v2 = (void **)*((void *)this + 57);
  uint64_t v3 = (void **)*((void *)this + 58);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      v2 += 3;
      if (v2 == v3) {
        return 0;
      }
    }
  }
  if (v2 == v3) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t anonymous namespace'::IsRemoteDeviceInputControlAllowed(_anonymous_namespace_ *this, const void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!this) {
  uint64_t v3 = (as::server *)_MXSessionCopyProperty();
  }
  int v4 = (int)v3;
  if (v3)
  {
    uint64_t v5 = *(id *)as::server::gSessionServerLog(v3);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)audit_token_t buf = 136315906;
      uint64_t v9 = "AudioSessionServerImpPlayState.mm";
      __int16 v10 = 1024;
      int v11 = 83;
      __int16 v12 = 2048;
      uint64_t v13 = this;
      __int16 v14 = 1024;
      int v15 = v4;
      _os_log_impl(&dword_1CFE2A000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d IsRemoteDeviceInputControlAllowed _MXSessionCopyProperty for property kMXSessionProperty_IsRemoteDeviceInputControlAllowed for subsession ref %p returned error %d", buf, 0x22u);
    }
    return 0;
  }
  else
  {
    uint64_t v6 = [0 BOOLValue];
  }
  return v6;
}

void sub_1CFE51750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::IsSessionActive(as::server *this, const void *a2)
{
  if (a2)
  {
    as::server::MXAccessor<as::server::RequireACQ>::GetProperty((void *)*MEMORY[0x1E4F76258], (uint64_t)&v6);
    if (v6)
    {
      uint64_t v4 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v4);
    }
  }
  else
  {
    as::server::MXAccessor<as::server::ForbidACQ>::GetProperty((void *)*MEMORY[0x1E4F76258], (uint64_t)&v6);
    if (v6)
    {
      uint64_t v5 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v5);
    }
  }
  uint64_t v2 = objc_msgSend(v7, "BOOLValue", 0);

  return v2;
}

void sub_1CFE51834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void as::server::MXAccessor<as::server::RequireACQ>::GetProperty(void *a1@<X2>, uint64_t a2@<X8>)
{
  id v3 = a1;
  *(_DWORD *)a2 = _MXSessionCopyProperty();
  *(void *)(a2 + 8) = 0;
}

void sub_1CFE518C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfo::SetCachedActivationState(uint64_t a1, int a2, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  v8[0] = &unk_1F2688580;
  v8[1] = cf;
  *(_DWORD *)(a1 + 392) = a2;
  OS::CF::String::AsStdString((OS::CF::String *)v8, &v7);
  int v6 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)int v6 = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
  *(void *)(a1 + 416) = *((void *)&v7.__r_.__value_.__l + 2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v8);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE519F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)**(unsigned __int8 **)(a1 + 8);
  v12[0] = 4;
  uint64_t v13 = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  id v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(*(unsigned __int8 **)a1, "IsRecordingMuted");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  unsigned __int8 v4 = *(unsigned char *)v3;
  *(unsigned char *)id v3 = v12[0];
  v12[0] = v4;
  uint64_t v5 = (uint64_t *)v3[1];
  v3[1] = (uint64_t)v13;
  uint64_t v13 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
  {
    as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::AudioSessionMuteEnabled(void)::enabled)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    std::string v7 = *(as::server::AudioSessionInfo **)v6;
    if (!*(void *)v6) {
      as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()();
    }
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = as::server::AudioSessionInfo::SetSessionInputMuted(v7, **(unsigned __int8 **)(a1 + 8));
    **(_DWORD **)(a1 + 16) = v9;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      uint64_t v9 = **(unsigned int **)(a1 + 16);
    }
    if (v9) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = _MXSessionSetProperty();
    **(_DWORD **)(a1 + 16) = v9;
    if (v9)
    {
LABEL_9:
      int v10 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_is_recording_muted_property", *(uint64_t **)(a1 + 40), 627, v9);
      **(_DWORD **)(a1 + 16) = v10;
      return v10 == 0;
    }
  }
  return 1;
}

void sub_1CFE51BE0(_Unwind_Exception *a1)
{
}

uint64_t as::RemoteDeviceControlEnabled(as *this)
{
  {
    as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled = _os_feature_enabled_impl();
  }
  return as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled;
}

void sub_1CFE51C88(_Unwind_Exception *a1)
{
}

void as::server::AudioSessionInfo::UpdateCachedActivationState(as::server::AudioSessionInfo *this, int a2)
{
  if (a2)
  {
    int v2 = 1;
  }
  else
  {
    if (*((_DWORD *)this + 98) == 2) {
      return;
    }
    int v2 = 0;
  }
  as::server::AudioSessionInfo::SetCachedActivationState((uint64_t)this, v2, 0);
}

void as::server::AudioSessionInfo::SetPlayerState(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v10 = *(char **)(a1 + 456);
  int v11 = *(char **)(a1 + 464);
  if (v10 != v11)
  {
    uint64_t v12 = 0;
    while (*(void *)&v10[v12] != a2)
    {
      v12 += 24;
      if (&v10[v12] == v11) {
        goto LABEL_5;
      }
    }
    if (a4)
    {
      __int16 v14 = &v10[v12];
      *((_DWORD *)v14 + 2) = a4;
      *((_DWORD *)v14 + 3) = a3;
      goto LABEL_28;
    }
    uint64_t v21 = &v10[v12];
    os_log_type_t v22 = &v10[v12 + 24];
    int64_t v23 = v11 - v22;
    if (v11 != v22) {
      memmove(&v10[v12], v22, v23 - 4);
    }
    int v11 = &v21[v23];
LABEL_27:
    *(void *)(a1 + 464) = v11;
    goto LABEL_28;
  }
LABEL_5:
  if (a4)
  {
    unint64_t v13 = *(void *)(a1 + 472);
    if ((unint64_t)v11 >= v13)
    {
      int v15 = (void **)(a1 + 456);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 3);
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v10) >> 3);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= v16 + 1) {
        uint64_t v18 = v16 + 1;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19) {
        __int16 v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>(a1 + 472, v19);
      }
      else {
        __int16 v20 = 0;
      }
      unsigned int v24 = &v20[24 * v16];
      uint64_t v25 = &v20[24 * v19];
      *(void *)unsigned int v24 = a2;
      *((_DWORD *)v24 + 2) = a4;
      *((_DWORD *)v24 + 3) = a3;
      *((_DWORD *)v24 + 4) = a5;
      int v11 = v24 + 24;
      int v27 = *(char **)(a1 + 456);
      int v26 = *(char **)(a1 + 464);
      if (v26 != v27)
      {
        do
        {
          long long v28 = *(_OWORD *)(v26 - 24);
          *((_DWORD *)v24 - 2) = *((_DWORD *)v26 - 2);
          *(_OWORD *)(v24 - 24) = v28;
          v24 -= 24;
          v26 -= 24;
        }
        while (v26 != v27);
        int v26 = (char *)*v15;
      }
      *(void *)(a1 + 456) = v24;
      *(void *)(a1 + 464) = v11;
      *(void *)(a1 + 472) = v25;
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      *(void *)int v11 = a2;
      *((_DWORD *)v11 + 2) = a4;
      *((_DWORD *)v11 + 3) = a3;
      *((_DWORD *)v11 + 4) = a5;
      v11 += 24;
    }
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(a1 + 428) = 0;
  *(_DWORD *)(a1 + 308) = 0;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  id v29 = *(char **)(a1 + 456);
  if (v29 == v11)
  {
    char v30 = 0;
LABEL_70:
    int v35 = 0;
    goto LABEL_71;
  }
  char v30 = 0;
  char v31 = 0;
  char v32 = 0;
  do
  {
    int v33 = *((_DWORD *)v29 + 3);
    if (v33)
    {
      ++*(_DWORD *)(a1 + 280);
      if (*((_DWORD *)v29 + 2) == 1)
      {
        ++*(_DWORD *)(a1 + 284);
        if ((v33 & 0x80) != 0)
        {
          {
            as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled = _os_feature_enabled_impl();
          }
          if (as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled) {
            ++*(_DWORD *)(a1 + 428);
          }
        }
      }
      int v33 = *((_DWORD *)v29 + 3);
      if ((v33 & 0x40) != 0) {
        ++*(_DWORD *)(a1 + 292);
      }
    }
    if ((v33 & 2) != 0 && *((_DWORD *)v29 + 4) == 1751477863) {
      ++*(_DWORD *)(a1 + 308);
    }
    int v34 = *((_DWORD *)v29 + 2);
    if ((v33 & 2) != 0 && v34 == 1) {
      ++*(_DWORD *)(a1 + 276);
    }
    if ((v33 & 4) != 0)
    {
      ++*(_DWORD *)(a1 + 300);
      if ((v33 & 8) == 0)
      {
LABEL_46:
        if ((v33 & 0x10) == 0) {
          goto LABEL_47;
        }
        goto LABEL_54;
      }
    }
    else if ((v33 & 8) == 0)
    {
      goto LABEL_46;
    }
    ++*(_DWORD *)(a1 + 304);
    if ((v33 & 0x10) == 0)
    {
LABEL_47:
      if ((v33 & 0x20) == 0) {
        goto LABEL_49;
      }
LABEL_48:
      ++*(_DWORD *)(a1 + 296);
      goto LABEL_49;
    }
LABEL_54:
    ++*(_DWORD *)(a1 + 288);
    if ((v33 & 0x20) != 0) {
      goto LABEL_48;
    }
LABEL_49:
    switch(v34)
    {
      case 1:
        if ((v33 & 0x10) == 0) {
          char v32 = 1;
        }
        break;
      case 3:
        char v30 = 1;
        break;
      case 2:
        char v31 = 1;
        break;
    }
    v29 += 24;
  }
  while (v29 != *(char **)(a1 + 464));
  if (v32) {
    int v35 = 1;
  }
  else {
    int v35 = 2;
  }
  if (((v32 | v31) & 1) == 0) {
    goto LABEL_70;
  }
LABEL_71:
  *(_DWORD *)(a1 + 268) = v35;
  *(unsigned char *)(a1 + 272) = v30 & 1;
}

void sub_1CFE5203C(_Unwind_Exception *a1)
{
}

const char *AudioSession::ClientPlayerAsCString(int a1)
{
  if (a1 > 1885888882)
  {
    if (a1 > 1920231790)
    {
      if (a1 == 1936879721) {
        return "Siri Plugin";
      }
      if (a1 == 1920231791) {
        return "Remote IO";
      }
    }
    else
    {
      if (a1 == 1885888883) {
        return "Phase";
      }
      if (a1 == 1903519093) {
        return "Queue";
      }
    }
    return "unknown player type";
  }
  if (a1 == 1668707442) {
    return "Converter";
  }
  if (a1 != 1751477863)
  {
    if (a1 == 1885564012) {
      return "Phone";
    }
    return "unknown player type";
  }
  return "Haptic Engine";
}

void *AudioSession::FormatPointerAsHex@<X0>(AudioSession *this@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x20uLL, "%p", this);
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

const char *AudioSession::PlayStateToString(unsigned int a1)
{
  if (a1 > 3) {
    return "Unknown";
  }
  else {
    return off_1E6875BC0[a1];
  }
}

void anonymous namespace'::UpdateAudioAppMuteState(as::server::LegacySessionManager *a1, uint64_t a2, int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(a1);
  unsigned int v7 = *(_DWORD *)(*(void *)a1 + 8);
  as::server::LegacySessionManager::FindAudioApplicationForSession(v6, v7, &v16);
  if (v16)
  {
    {
      as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
    }
    uint64_t v9 = v16;
    if (as::AudioSessionMuteEnabled(void)::enabled)
    {
      as::server::AudioApplicationInfo::HandleSessionInputMuteChange((os_unfair_lock_s *)v16, v7, a2);
    }
    else
    {
      int v11 = [NSNumber numberWithBool:a2];
      unsigned int updated = as::server::AudioApplicationInfo::UpdateProperty((uint64_t)v9, @"InputMute", v11, 1634744890, a3);

      if (updated)
      {
        __int16 v14 = *(id *)as::server::gSessionServerLog(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          int v15 = as::server::AudioApplicationInfo::DebugString((os_unfair_lock_s *)v16);
          *(_DWORD *)audit_token_t buf = 136316162;
          unint64_t v19 = "AudioSessionServerImpPlayState.mm";
          __int16 v20 = 1024;
          int v21 = 66;
          __int16 v22 = 1024;
          unsigned int v23 = updated;
          __int16 v24 = 1024;
          unsigned int v25 = v7;
          __int16 v26 = 2080;
          int v27 = v15;
          _os_log_impl(&dword_1CFE2A000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d error (code: %d) updating inputMuted for session: 0x%x, audioApp: %s", buf, 0x28u);
        }
      }
    }
  }
  else
  {
    int v10 = *(id *)as::server::gSessionServerLog(v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)audit_token_t buf = 136315650;
      unint64_t v19 = "AudioSessionServerImpPlayState.mm";
      __int16 v20 = 1024;
      int v21 = 55;
      __int16 v22 = 1024;
      unsigned int v23 = v7;
      _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d error - no audioApp instances found for session: 0x%x", buf, 0x18u);
    }
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_1CFE5242C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindAudioApplicationForSession(os_unfair_lock_s *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock(this);
  unsigned int v7 = *(uint64_t **)&this[2]._os_unfair_lock_opaque;
  uint64_t v8 = *(uint64_t **)&this[4]._os_unfair_lock_opaque;
  if (v7 != v8)
  {
    while (*(_DWORD *)(*v7 + 8) != a2)
    {
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_9;
      }
    }
  }
  if (v7 == v8)
  {
LABEL_9:
    unint64_t v13 = *(id *)as::server::gSessionServerLog(v6);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int16 v22 = 136315650;
      *(void *)&v22[4] = "ServerSessionManager.mm";
      *(_WORD *)&v22[12] = 1024;
      *(_DWORD *)&unsigned char v22[14] = 803;
      *(_WORD *)&v22[18] = 1024;
      *(_DWORD *)&v22[20] = a2;
      __int16 v14 = "%25s:%-5d error - session not found: 0x%x";
      int v15 = v22;
LABEL_13:
      _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_DEFAULT, v14, v15, 0x18u);
    }
LABEL_14:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_15;
  }
  uint64_t v9 = *v7;
  long long v10 = *(_OWORD *)(v9 + 68);
  *(_OWORD *)__int16 v22 = *(_OWORD *)(v9 + 52);
  *(_OWORD *)&v22[16] = v10;
  uint64_t v23 = *(void *)(v9 + 84);
  int v11 = (as::server *)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>((uint64_t)&this[8], (uint64_t)v22);
  if (&this[10] == (os_unfair_lock_s *)v11)
  {
    unint64_t v13 = *(id *)as::server::gSessionServerLog(v11);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315650;
      unint64_t v17 = "ServerSessionManager.mm";
      __int16 v18 = 1024;
      int v19 = 809;
      __int16 v20 = 1024;
      int v21 = a2;
      __int16 v14 = "%25s:%-5d error - audio app instance not found for session: 0x%x";
      int v15 = (uint8_t *)&v16;
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  uint64_t v12 = *((void *)v11 + 10);
  *a3 = *((void *)v11 + 9);
  a3[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_15:
  if (this) {
    os_unfair_lock_unlock(this);
  }
}

void sub_1CFE52650(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t as::server::AudioApplicationInfo::UpdateProperty(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  uint64_t v8 = (os_unfair_lock_s *)(a1 + 16);
  uint64_t v9 = (id *)(a1 + 24);
  id v10 = a3;
  id v11 = a2;
  os_unfair_lock_lock(v8);
  uint64_t updated = as::server::AudioAppInfoImpl::UpdateProperty(v9, v11, v10, a4, a5, 0);

  os_unfair_lock_unlock(v8);
  return updated;
}

void sub_1CFE526FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppInfoImpl::UpdateProperty(id *a1, void *a2, void *a3, int a4, int a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a6;
  if (a4 == 1836595770)
  {
    uint64_t v14 = as::AudioAppState::setPropertyMX((uint64_t)(a1 + 19), v11, v12);
LABEL_7:
    uint64_t updated = v14;
    goto LABEL_10;
  }
  if (![v11 isEqualToString:@"InputMute"])
  {
    uint64_t v14 = as::AudioAppState::setPropertyApp(a1 + 19, v11, v12);
    goto LABEL_7;
  }
  int v16 = (NSNumber *)v12;
  if (v16)
  {
    as::server::AudioAppInfoImpl::GetAlertTypeFromContextOrDefaultTo((as::server::AudioAppInfoImpl *)2, v13, v15);
    uint64_t updated = as::server::AudioAppInfoImpl::UpdateInputMuteState(a1, v16, a5);
  }
  else
  {
    uint64_t updated = 4294967246;
  }

LABEL_10:
  return updated;
}

void sub_1CFE52808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

as::server::AudioAppInfoImpl *as::server::AudioAppInfoImpl::GetAlertTypeFromContextOrDefaultTo(as::server::AudioAppInfoImpl *this, void *a2, NSDictionary *a3)
{
  id v4 = a2;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = [v4 valueForKey:@"AlertType"];

    if (v6)
    {
      unsigned int v7 = [v5 valueForKey:@"AlertType"];
      uint64_t v8 = v7;
      if (v7)
      {
        this = (as::server::AudioAppInfoImpl *)[v7 intValue];
      }
    }
  }

  return this;
}

void sub_1CFE528B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppInfoImpl::UpdateInputMuteState(id *this, NSNumber *a2, int a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  as::AudioAppState::getPropertyApp(this + 19, &cfstr_Inputmute.isa, (uint64_t)&v18);
  uint64_t v6 = (as::server *)v19;
  unsigned int v7 = v6;
  if (v6)
  {
    BOOL v8 = [(NSNumber *)v5 BOOLValue];
    uint64_t v6 = (as::server *)[v7 BOOLValue];
    int v9 = v8 ^ v6;
  }
  else
  {
    int v9 = 1;
  }
  id v10 = *(id *)as::server::gSessionServerLog(v6);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v11 = [(NSNumber *)v5 BOOLValue];
    id v12 = "YES";
    if (v9) {
      id v13 = "YES";
    }
    else {
      id v13 = "NO";
    }
    uint64_t v14 = "UNMUTED";
    if (v11) {
      uint64_t v14 = "MUTED";
    }
    if (!a3) {
      id v12 = "NO";
    }
    int v15 = this + 8;
    if (*((char *)this + 87) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)audit_token_t buf = 136316418;
    int v21 = "AudioApplicationInfoImpl.mm";
    __int16 v22 = 1024;
    int v23 = 208;
    __int16 v24 = 2080;
    unsigned int v25 = v13;
    __int16 v26 = 2080;
    int v27 = v14;
    __int16 v28 = 2080;
    id v29 = v12;
    __int16 v30 = 2080;
    char v31 = v15;
    _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d input mute state has changed: %s, new value: %s (forceNotification: %s) (app: %s)", buf, 0x3Au);
  }

  if ((v9 | a3) == 1)
  {
    uint64_t v16 = as::AudioAppState::setPropertyApp(this + 19, @"InputMute", v5);
    as::server::AudioAppInfoImpl::IssueInputMuteNotifcation(this, v5);
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_1CFE52AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void as::AudioAppState::getPropertyApp(id *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  id v4 = [*this objectForKey:a2];
  if (v4)
  {
    unsigned int v7 = v4;
    id v5 = v4;
    id v4 = v7;
    int v6 = 0;
  }
  else
  {
    int v6 = -50;
  }
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = v4;
}

void as::server::AudioAppInfoImpl::IssueInputMuteNotifcation(void **this, NSNumber *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  unsigned int v7 = @"AVAudioApplicationMuteStateKey";
  v8[0] = v3;
  id v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:&v7 count:1];
  as::server::AudioAppInfoImpl::GetAudioAppRemoteClients(this, (uint64_t *)v5);
  as::server::AudioAppInfoImpl::DeferPropertyChangeCallback(v5, @"AVAudioApplicationInputMuteStateChangeNotification", v4, 0);
  int v6 = (void **)v5;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_1CFE52C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a13);

  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__clear[abi:ne180100]((uint64_t *)v2);
    id v3 = **a1;
    operator delete(v3);
  }
}

void **as::server::AudioAppInfoImpl::GetAudioAppRemoteClients@<X0>(void **this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v2 = (void **)this[14];
  id v3 = this + 15;
  if (v2 != this + 15)
  {
    id v5 = 0;
    int v6 = a2 + 2;
    do
    {
      long long v7 = *(_OWORD *)(v2 + 5);
      BOOL v8 = (atomic_ullong *)v2[6];
      if (v8)
      {
        atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
        id v5 = (void *)a2[1];
      }
      if ((unint64_t)v5 >= *v6)
      {
        long long v19 = v7;
        uint64_t v9 = ((uint64_t)v5 - *a2) >> 4;
        if ((unint64_t)(v9 + 1) >> 60) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = *v6 - *a2;
        uint64_t v11 = v10 >> 3;
        if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        void v20[4] = v6;
        id v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)v6, v12);
        uint64_t v14 = &v13[16 * v9];
        v20[0] = v13;
        v20[1] = v14;
        uint64_t v20[3] = &v13[16 * v15];
        *(_OWORD *)uint64_t v14 = v19;
        v20[2] = v14 + 16;
        std::vector<std::shared_ptr<as::server::AudioAppRemoteClient>>::__swap_out_circular_buffer(a2, v20);
        id v5 = (void *)a2[1];
        this = std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::~__split_buffer(v20);
      }
      else
      {
        *id v5 = v7;
        v5[1] = v8;
        v5 += 2;
        a2[1] = (uint64_t)v5;
      }
      a2[1] = (uint64_t)v5;
      uint64_t v16 = (void **)v2[1];
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          uint64_t v16 = (void **)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unint64_t v17 = (void **)v2[2];
          BOOL v18 = *v17 == v2;
          int v2 = v17;
        }
        while (!v18);
      }
      int v2 = v17;
    }
    while (v17 != v3);
  }
  return this;
}

void sub_1CFE52E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  id v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::~__split_buffer((void **)va);
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

void as::server::AudioAppInfoImpl::DeferPropertyChangeCallback(uint64_t **a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  uint64_t v8 = a3;
  uint64_t v9 = v8;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      uint64_t v13 = *v10;
      unint64_t v12 = (std::__shared_weak_count *)v10[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = as::server::AudioApplicationInfo::GetAudioAppCallbackQueue(v8);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3321888768;
      block[2] = ___ZN2as6server16AudioAppInfoImpl27DeferPropertyChangeCallbackEONSt3__16vectorINS2_10shared_ptrINS0_20AudioAppRemoteClientEEENS2_9allocatorIS6_EEEEPK8NSStringP12NSDictionaryb_block_invoke;
      block[3] = &unk_1F2688448;
      uint64_t v17 = v13;
      BOOL v18 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      void block[4] = v7;
      uint64_t v16 = v9;
      char v19 = a4;
      dispatch_async(v14, block);

      uint64_t v8 = (as::server::AudioApplicationInfo *)v18;
      if (v18) {
        std::__shared_weak_count::__release_weak(v18);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      v10 += 2;
    }
    while (v10 != v11);
  }
}

void sub_1CFE52FB0(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  _Unwind_Resume(a1);
}

uint64_t as::AudioAppState::setPropertyApp(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*a1 setValue:v6 forKey:v5];
  [a1[2] addObject:v5];

  return 0;
}

void sub_1CFE53034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::ff_acq::AudioSessionServerActivateWithFlags(void *a1, AudioSession *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  if (!v7)
  {
    uint64_t v84 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v84);
  }
  uint64_t v8 = (_anonymous_namespace_ *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v113, a2, (const audit_token_t *)a3, 1);
  if (!v113)
  {
    uint64_t v14 = 561210739;
    goto LABEL_130;
  }
  uint64_t v11 = v113;
  if (!v113)
  {
    uint64_t v85 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v85);
  }
  uint64_t v12 = ProxyProcessPID;
  uint64_t v13 = v114;
  if (v114) {
    atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v11[55]._os_unfair_lock_opaque) < 0) {
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)&v11[50]._os_unfair_lock_opaque, *(void *)&v11[52]._os_unfair_lock_opaque);
  }
  else {
    std::string v112 = *(std::string *)&v11[50]._os_unfair_lock_opaque;
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v15 = v113;
  if (!v113)
  {
    uint64_t v86 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v86);
  }
  uint64_t v16 = v114;
  if (v114) {
    atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v15, buf);
  char v19 = *(as::server::ff_acq **)buf;
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (!v19)
  {
    uint64_t v14 = 2003329396;
    unsigned int v25 = *(id *)as::server::gSessionServerLog(DefaultSubsessionRef);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)audit_token_t buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 926;
      _os_log_impl(&dword_1CFE2A000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d No valid CMSession", buf, 0x12u);
    }
    goto LABEL_128;
  }
  InterruptionPriority = (std::__shared_weak_count *)as::server::ff_acq::GetInterruptionPriority(v19, v18);
  CFTypeRef cf = 0;
  if (InterruptionPriority)
  {
    int v21 = v113;
    if (!v113)
    {
      uint64_t v87 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v87);
    }
    __int16 v22 = v114;
    if (v114)
    {
      atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
      uint32_t os_unfair_lock_opaque = v21[23]._os_unfair_lock_opaque;
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (os_unfair_lock_opaque == 1935830119)
      {
        int v21 = v113;
        if (!v113)
        {
          uint64_t v24 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v24);
        }
LABEL_29:
        InterruptionPriority = v114;
        if (v114)
        {
          atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v26 = *(_OWORD *)&v21[17]._os_unfair_lock_opaque;
          *(_OWORD *)audit_token_t buf = *(_OWORD *)&v21[13]._os_unfair_lock_opaque;
          *(_OWORD *)&buf[16] = v26;
          int os_unfair_lock_opaque_low = LOBYTE(v21[21]._os_unfair_lock_opaque);
          std::__shared_weak_count::__release_shared[abi:ne180100](InterruptionPriority);
          if (os_unfair_lock_opaque_low)
          {
LABEL_31:
            tokeuint64_t n = *(audit_token_t *)buf;
            InterruptionPriority = (std::__shared_weak_count *)SecTaskCreateWithAuditToken(0, &token);
LABEL_33:
            id v29 = InterruptionPriority;
            goto LABEL_34;
          }
        }
        else
        {
          long long v58 = *(_OWORD *)&v21[17]._os_unfair_lock_opaque;
          *(_OWORD *)audit_token_t buf = *(_OWORD *)&v21[13]._os_unfair_lock_opaque;
          *(_OWORD *)&buf[16] = v58;
          if (LOBYTE(v21[21]._os_unfair_lock_opaque)) {
            goto LABEL_31;
          }
        }
        id v29 = 0;
LABEL_34:
        CFTypeRef cf = v29;
        if (!v29)
        {
          v107[0] = 0;
          uint64_t v108 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v107);
          __int16 v30 = (as::server *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v107);
          if ((v12 & 0xFF00000000) != 0)
          {
            v105[0] = 5;
            int v106 = (uint64_t *)(int)v12;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v105);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v105);
            char v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v107, "controlling_PID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v105);
            unsigned __int8 v32 = *(unsigned char *)v31;
            *(unsigned char *)char v31 = v105[0];
            v105[0] = v32;
            int v33 = (uint64_t *)v31[1];
            v31[1] = (uint64_t)v106;
            int v106 = v33;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v105);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v106, v105[0]);
          }
          int v34 = *(id *)as::server::gSessionServerLog(v30);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            int v35 = SHIBYTE(v112.__r_.__value_.__r.__words[2]);
            std::string::size_type v36 = v112.__r_.__value_.__r.__words[0];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v107, -1, 0x20u, 0, 0, &__p);
            uint64_t v37 = &v112;
            if (v35 < 0) {
              uint64_t v37 = (std::string *)v36;
            }
            if (v104 >= 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            *(_DWORD *)audit_token_t buf = 136316418;
            *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 950;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = "set_activation_state";
            *(_WORD *)&unsigned char buf[28] = 2080;
            *(void *)&buf[30] = "could not get security task";
            __int16 v118 = 2080;
            uint64_t v119 = v37;
            __int16 v120 = 2080;
            uint64_t v121 = p_p;
            _os_log_impl(&dword_1CFE2A000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
            if (v104 < 0) {
              operator delete(__p);
            }
          }

          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v107);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v108, v107[0]);
        }
        goto LABEL_46;
      }
    }
    else if (v113[23]._os_unfair_lock_opaque == 1935830119)
    {
      goto LABEL_29;
    }
    long long v28 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)v109.val = *(_OWORD *)a3;
    *(_OWORD *)&v109.val[4] = v28;
    InterruptionPriority = (std::__shared_weak_count *)SecTaskCreateWithAuditToken(0, &v109);
    goto LABEL_33;
  }
LABEL_46:
  strcpy(v116, "activate");
  std::string::size_type v39 = *(id *)as::server::gSessionServerLog((as::server *)InterruptionPriority);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v40 = &v112;
    }
    else {
      int v40 = (std::string *)v112.__r_.__value_.__r.__words[0];
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v107, -1, 0x20u, 0, 0, &__p);
    if (v104 >= 0) {
      std::string::size_type v41 = (std::string *)&__p;
    }
    else {
      std::string::size_type v41 = (std::string *)__p;
    }
    *(_DWORD *)audit_token_t buf = 136316162;
    *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 957;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v116;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v40;
    __int16 v118 = 2080;
    uint64_t v119 = v41;
    _os_log_impl(&dword_1CFE2A000, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v104 < 0) {
      operator delete(__p);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v107);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v108, v107[0]);
  }

  {
    as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
  }
  int IsSessionActive = (as::server *)as::server::IsSessionActive(v19, (const void *)(as::OffloadActivationOffACQ(void)::enabled == 0));
  if ((a4 & 0x20008000) == 0 && IsSessionActive) {
    goto LABEL_117;
  }
  __int16 v43 = v113;
  if (!v113)
  {
    uint64_t v88 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v88);
  }
  long long v44 = v114;
  if (!v114
    || (atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed),
        std::__shared_weak_count::__release_shared[abi:ne180100](v44),
        (__int16 v43 = v113) != 0))
  {
    os_unfair_lock_unlock(v43 + 158);
    char v115 = 0;
  }
  {
    as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::OffloadActivationOffACQ(void)::enabled) {
    uint64_t v45 = MXSessionBeginInterruption_WithSecTaskAndFlags();
  }
  else {
    uint64_t v45 = _MXSessionBeginInterruption_WithSecTaskAndFlags();
  }
  if (!v45)
  {
    *(void *)audit_token_t buf = 0;
    *(void *)&buf[8] = 0;
    as::server::MXAccessor<as::server::FFDependentACQ>::GetProperty((void *)*MEMORY[0x1E4F75EC8], (uint64_t)&__p);
    __int16 v55 = *(as::server **)&buf[8];
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (__p)
    {
      uint64_t v56 = *(id *)as::server::gSessionServerLog(v55);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)audit_token_t buf = 136315906;
        *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 893;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v19;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = __p;
        _os_log_impl(&dword_1CFE2A000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d kMXSessionProperty_AudioCategory for ref %p returned error %d", buf, 0x22u);
      }
      id v57 = 0;
    }
    else
    {
      id v57 = v103;
    }

    if (!v113 || (os_unfair_lock_lock(v113 + 158), v115 = 1, (int v59 = v113) == 0))
    {
      uint64_t v90 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v90);
    }
    __int16 v60 = v114;
    if (v114) {
      atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::AudioSessionInfo::SetCachedActivationState((uint64_t)v59, 1, 0);
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
    __int16 v62 = as::server::LegacySessionManager::Instance(v61);
    uint64_t v63 = (os_unfair_lock_s *)*((void *)v62 + 31);
    if (v63)
    {
      os_unfair_lock_lock(*((os_unfair_lock_t *)v62 + 31));
      as::server::DeviceTimeObserver::sessionIsActive((as::server::DeviceTimeObserver *)&v63[2], a2, 1);
      os_unfair_lock_unlock(v63);
    }
    if (([v57 isEqualToString:*MEMORY[0x1E4F75908]] & 1) != 0
      || [v57 isEqualToString:*MEMORY[0x1E4F75990]])
    {
      char v64 = v113;
      if (!v113)
      {
        uint64_t v89 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v89);
      }
      id v65 = v114;
      if (v114)
      {
        atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v65);
      }
      atomic_store(1u, (unsigned __int8 *)&v64[80]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[57],char [57],0>((uint64_t)v96, "Setting Play state to Running for Phone/TTY dummy player");
      int v66 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v107, "side_effect");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v96);
      unsigned __int8 v67 = *(unsigned char *)v66;
      *(unsigned char *)int v66 = v96[0];
      v96[0] = v67;
      char v68 = (uint64_t *)v66[1];
      v66[1] = (uint64_t)v97;
      v97 = v68;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v96);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v97, v96[0]);
      *(void *)audit_token_t buf = 0;
      *(void *)&buf[8] = 0;
      as::server::MXAccessor<as::server::FFDependentACQ>::GetProperty((void *)*MEMORY[0x1E4F76618], (uint64_t)&__p);
      uint64_t v69 = *(as::server **)&buf[8];
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (__p)
      {
        unsigned int v70 = *(id *)as::server::gSessionServerLog(v69);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)audit_token_t buf = 136315906;
          *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 879;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v19;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = __p;
          _os_log_impl(&dword_1CFE2A000, v70, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ShouldSessionInputBeMuted _MXSessionCopyProperty for property kMXSessionProperty_ShouldInputBeMuted for subsession ref %p returned error %d", buf, 0x22u);
        }

        unsigned int v72 = 3;
      }
      else
      {
        uint64_t v73 = (as::server *)v103;
        int v74 = *(id *)as::server::gSessionServerLog(v73);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          int v75 = [(as::server *)v73 BOOLValue];
          *(_DWORD *)audit_token_t buf = 136315906;
          *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 883;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = a2;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v75;
          _os_log_impl(&dword_1CFE2A000, v74, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MX set session 0x%x to input muted=%d", buf, 0x1Eu);
        }

        int v76 = [(as::server *)v73 BOOLValue];
        if (v76) {
          unsigned int v72 = 67;
        }
        else {
          unsigned int v72 = 3;
        }
      }
      if (v113)
      {
        os_unfair_lock_unlock(v113 + 158);
        char v115 = 0;
      }
      {
        if (v71)
        {
          as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
        }
      }
      if (as::OffloadActivationOffACQ(void)::enabled)
      {
        char v77 = as::server::GetAudioControlQueue(v71);
        v91[0] = MEMORY[0x1E4F143A8];
        v91[1] = 3221225472;
        void v91[2] = ___ZN2as6server6ff_acq35AudioSessionServerActivateWithFlagsEPU39objcproto28AVAudioSessionServerDelegate11objc_objectjRK13audit_token_tj_block_invoke;
        v91[3] = &unk_1E6875BE8;
        uint64_t v93 = v64 + 79;
        int v94 = (int)a2;
        unsigned int v95 = v72;
        id v92 = v7;
        as::server::DispatchBlock(v77, v91, 1, (uint64_t)"AudioSessionServerActivateWithFlags", (uint64_t)"AudioSessionServerImp.mm", 1047, 0, 0);
      }
      else
      {
        as::server::require_acq::AudioSessionServerSetClientPlayState(a2, v64[79]._os_unfair_lock_opaque, (AudioSession *)&v64[79], v72, 1u, 0, 0);
        [v7 setTelephonyClientSessionID:a2];
      }
    }

LABEL_117:
    uint64_t v78 = *(id *)as::server::gSessionServerLog(IsSessionActive);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      int v79 = SHIBYTE(v112.__r_.__value_.__r.__words[2]);
      std::string::size_type v80 = v112.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v107, -1, 0x20u, 0, 0, &__p);
      int v81 = &v112;
      if (v79 < 0) {
        int v81 = (std::string *)v80;
      }
      if (v104 >= 0) {
        uint64_t v82 = (std::string *)&__p;
      }
      else {
        uint64_t v82 = (std::string *)__p;
      }
      *(_DWORD *)audit_token_t buf = 136316162;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1056;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v116;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&buf[30] = v81;
      __int16 v118 = 2080;
      uint64_t v119 = v82;
      _os_log_impl(&dword_1CFE2A000, v78, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (v104 < 0) {
        operator delete(__p);
      }
    }

    uint64_t v14 = 0;
    goto LABEL_126;
  }
  uint64_t v14 = as::server::TranslateCMSessionErrorCode((uint64_t)"cm_session_begin_interruption", (uint64_t *)&v112, 997, v45);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v101 = 257;
  CACFDictionary::AddSInt32(&Mutable, @"cm_session_begin_interruption", v14);
  CAReportingClientSendMessage();
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v98, "early exit due to failure");
  uint64_t v46 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v107, "->");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v98);
  unsigned __int8 v47 = *(unsigned char *)v46;
  *(unsigned char *)uint64_t v46 = v98[0];
  v98[0] = v47;
  uint64_t v48 = (uint64_t *)v46[1];
  v46[1] = (uint64_t)v99;
  v99 = v48;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v46);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v98);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v99, v98[0]);
  __int16 v50 = *(id *)as::server::gSessionServerLog(v49);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    int v51 = SHIBYTE(v112.__r_.__value_.__r.__words[2]);
    std::string::size_type v52 = v112.__r_.__value_.__r.__words[0];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v107, -1, 0x20u, 0, 0, &__p);
    uint64_t v53 = &v112;
    if (v51 < 0) {
      uint64_t v53 = (std::string *)v52;
    }
    if (v104 >= 0) {
      uint64_t v54 = (std::string *)&__p;
    }
    else {
      uint64_t v54 = (std::string *)__p;
    }
    *(_DWORD *)audit_token_t buf = 136316162;
    *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1006;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v116;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v53;
    __int16 v118 = 2080;
    uint64_t v119 = v54;
    _os_log_impl(&dword_1CFE2A000, v50, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v104 < 0) {
      operator delete(__p);
    }
  }

  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
LABEL_126:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v107);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v108, v107[0]);
  if (cf) {
    CFRelease(cf);
  }
LABEL_128:
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
LABEL_130:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&v113);

  return v14;
}

void sub_1CFE53F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,const void *a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a27);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a38);
  if (a44 < 0) {
    operator delete(__p);
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)(v46 - 216));

  _Unwind_Resume(a1);
}

void as::server::MXAccessor<as::server::FFDependentACQ>::GetProperty(void *a1@<X2>, uint64_t a2@<X8>)
{
  as::server::FFDependentACQ::GetPropertyMX(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  id v3 = v5;
  *(void *)(a2 + 8) = v3;
}

void as::server::FFDependentACQ::GetPropertyMX(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v5 = a1;
  {
    as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::OffloadActivationOffACQ(void)::enabled) {
    int v6 = MXSessionCopyProperty();
  }
  else {
    int v6 = _MXSessionCopyProperty();
  }
  *(_DWORD *)a2 = v6;
  *(void *)(a2 + 8) = 0;
}

void sub_1CFE542CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::DeviceTimeObserver::sessionIsActive(as::server::DeviceTimeObserver *this, unsigned int a2, char a3)
{
  unsigned int v8 = a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find((uint64_t *)this + 3, &v8, &v9);
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *((void *)this + 4);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v9 != v5 + 32 * v6) {
    *(unsigned char *)(*(void *)(v9 + 8) + 12) = a3;
  }
}

uint64_t as::server::ff_acq::GetInterruptionPriority(as::server::ff_acq *this, const void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)audit_token_t buf = 0;
  *(void *)&buf[8] = 0;
  as::server::MXAccessor<as::server::FFDependentACQ>::GetProperty((void *)*MEMORY[0x1E4F75FC8], (uint64_t)&v6);
  int v2 = *(as::server **)&buf[8];
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v6 || (int v2 = (as::server *)v7) == 0)
  {
    id v3 = *(id *)as::server::gSessionServerLog(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)audit_token_t buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 905;
      _os_log_impl(&dword_1CFE2A000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Error reading kMXSessionProperty_ClientPriority. Assuming default priority.", buf, 0x12u);
    }
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = [v7 intValue];
  }

  return v4;
}

void sub_1CFE5448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::GetProxyProcessPID(_anonymous_namespace_ *this, as::server::AudioSessionInfoAccessor *a2, const audit_token_t *a3)
{
  long long v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)v14.val = *(_OWORD *)a2;
  *(_OWORD *)&v14.val[4] = v4;
  pid_t v5 = audit_token_to_pid(&v14);
  uint64_t v6 = *(void *)this;
  if (!*(void *)this) {
    as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()();
  }
  pid_t v7 = v5;
  unsigned int v8 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v8)
  {
    if (v7 == *(_DWORD *)(v6 + 88)) {
      goto LABEL_4;
    }
LABEL_6:
    unsigned int v12 = v7 & 0xFFFFFF00;
    int v11 = v7;
    uint64_t v10 = 0x100000000;
    return v10 | v12 | v11;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  int v9 = *(_DWORD *)(v6 + 88);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  if (v7 != v9) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v10 = 0;
  int v11 = 0;
  unsigned int v12 = 0;
  return v10 | v12 | v11;
}

void *std::__shared_ptr_emplace<as::server::DeviceLatencyPoll::Impl>::__on_zero_shared(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void std::default_delete<as::server::DeviceLatencyPoll>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x1D25E1860);
  }
}

void as::server::GetAudioControlQueue()
{
}

void sub_1CFE54674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE54700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::deviceSupportsAudioReturnChannel(_anonymous_namespace_ *this)
{
  {
  }
}

void sub_1CFE54774(_Unwind_Exception *a1)
{
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void __clang_call_terminate(void *a1)
{
}

uint64_t applesauce::CF::details::treat_as_BOOL_for_convert_as<float>(const __CFBoolean *a1)
{
  if (a1 && (CFTypeID TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    uint64_t v3 = COERCE_UNSIGNED_INT((float)CFBooleanGetValue(a1));
    uint64_t v4 = 0x100000000;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  return v3 | v4;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exceptiouint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_1CFE54914(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  float result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[26]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[26]>(char *a1)
{
  int v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE549E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::exception::name(int a1@<W1>, std::string *a2@<X8>)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v12, ".", 1uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unsigned int v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v14, "] ", 2uLL);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_1CFE54B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6 = strlen(__s);
  pid_t v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

nlohmann::detail::exception *nlohmann::detail::exception::exception(nlohmann::detail::exception *this, int a2, const char *a3)
{
  *(void *)this = &unk_1F2687DE0;
  *((_DWORD *)this + 2) = a2;
  MEMORY[0x1D25E15C0]((char *)this + 16, a3);
  return this;
}

void sub_1CFE54C30(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F2687DE0;
  MEMORY[0x1D25E15D0](&this[2]);
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1F2687DE0;
  MEMORY[0x1D25E15D0](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1D25E1860);
}

void nlohmann::detail::type_error::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "type_error");
  nlohmann::detail::exception::name(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    pid_t v7 = (const std::string::value_type *)a2;
  }
  else {
    pid_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  long long v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    int v11 = v15;
  }
  else {
    int v11 = (void **)v15[0];
  }
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(void *)a3 = &unk_1F2687E20;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_1CFE54E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6 = strlen(a1);
  pid_t v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

const char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(char *a1)
{
  unint64_t v1 = *a1;
  if (v1 > 9) {
    return "number";
  }
  else {
    return off_1E6875808[v1];
  }
}

void nlohmann::detail::type_error::~type_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F2687DE0;
  MEMORY[0x1D25E15D0](&this[2]);
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1F2687DE0;
  MEMORY[0x1D25E15D0](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1D25E1860);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(*(void *)a1, (uint64_t)__p + 32);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(uint64_t a1, uint64_t a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a2 + 32), *(unsigned __int8 *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[77],char [77],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[77]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[77]>(char *a1)
{
  int v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE550CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  if (*((unsigned char *)this + 8))
  {
    int v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2687E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2687E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25E1860);
}

void nlohmann::detail::output_string_adapter<char,std::string>::~output_string_adapter()
{
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return (***(uint64_t (****)(void, uint64_t))a1)(*(void *)a1, 48);
  }
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)(a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
      uint64_t v5 = a1 + 17;
      unsigned int v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }
    uint64_t v3 = 2;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v5 = a1 + 16 + v3;
  if (a2 < 0xA)
  {
LABEL_10:
    *(unsigned char *)(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
  }
  *(_WORD *)(v5 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[a2];
  return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(unsigned __int8 **)(a2 + 32); i != *(unsigned __int8 **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)i);
    uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i + 8, *i);
    uint64_t i = (unsigned __int8 *)(*(void *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(unsigned char *)a1)
  {
    case 1:
      uint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(void *)(a2 + 8));
      goto LABEL_8;
    case 2:
      uint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(void *)(a2 + 8));
      goto LABEL_8;
    case 4:
      uint64_t v4 = (std::string *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      uint64_t v4 = *(std::string **)(a2 + 8);
      goto LABEL_8;
    case 8:
      uint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(*(void *)(a2 + 8));
LABEL_8:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x18uLL);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](v2, a1);
  return v2;
}

void sub_1CFE554E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1CFE55538(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          std::string::size_type v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          std::string::size_type v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void **std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  uint64_t v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      uint64_t v12 = (void *)a2;
    }
    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        uint64_t v16 = (void *)a2;
        do
        {
          uint64_t v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          uint64_t v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0) {
        goto LABEL_17;
      }
    }
    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a2 + 32), a5) & 0x80) == 0)
  {
    *a3 = (void **)a2;
    *a4 = a2;
    return (void **)a4;
  }
  a4 = (uint64_t *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    std::string v14 = *(void ***)(a2 + 8);
    do
    {
      uint64_t v15 = v14;
      std::string v14 = (void **)*v14;
    }
    while (v14);
  }
  else
  {
    uint64_t v19 = (void **)a2;
    do
    {
      uint64_t v15 = (void **)v19[2];
      BOOL v17 = *v15 == v19;
      uint64_t v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (void **)a2;
    }
    return (void **)a4;
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:
  return (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1CFE55860(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(&this[1], (char *)a2 + 24);
  return this;
}

void sub_1CFE558D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_1CFE5593C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1CFE559B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v4, v6);
      v6 += 16;
      uint64_t v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1CFE55A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3 - 16;
    uint64_t v7 = (unsigned __int8 *)(a3 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
      int v8 = *v7;
      v7 -= 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v6 + 8), v8);
      BOOL v9 = v6 == a5;
      uint64_t v6 = (uint64_t)v7;
    }
    while (!v9);
  }
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  uint64_t v2 = (std::string *)operator new(0x18uLL);
  uint64_t v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return v3;
}

void sub_1CFE55B30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

void sub_1CFE55B90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1CFE55C04(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[12]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[12]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE55CE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[15]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[15]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE55D80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE55E18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[44],char [44],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[44]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[44]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE55EB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[89],char [89],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[89]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[89]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE55F48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE55FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE56080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE562EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void applesauce::dispatch::v1::queue::~queue(id *this)
{
  id v2 = *this;
  *this = 0;
}

void sub_1CFE56594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1CFE567E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AVAudioSessionXPCServer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void as::server::ProcessInfo::~ProcessInfo(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  objc_destroyWeak(this + 2);
}

void sub_1CFE568F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE56980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CFE56B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_1CFE56C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSString * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = (void *)MEMORY[0x1D25E1DE0](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e30_v24__0__NSError_8__NSString_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    BOOL v9 = (void *)MEMORY[0x1D25E1DE0](v4);
    id v11 = v8;
    id v12 = (id)MEMORY[0x1D25E1DE0](v9);
    uint64_t v5 = (void *)MEMORY[0x1D25E1DE0](v10);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_1CFE56D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE56EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE57034(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);

  _Unwind_Resume(a1);
}

void sub_1CFE57084()
{
}

id BuildInvalidSessionError(as::server *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(id *)as::server::gSessionServerLog(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)audit_token_t buf = 136315906;
    id v12 = "AVAudioSessionXPCServer.mm";
    __int16 v13 = 1024;
    int v14 = 382;
    __int16 v15 = 2080;
    uint64_t v16 = a1;
    __int16 v17 = 1024;
    int v18 = a2;
    _os_log_impl(&dword_1CFE2A000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d %s failed due to session lookup failure for SessionID 0x%x", buf, 0x22u);
  }
  uint64_t v5 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v9 = *MEMORY[0x1E4F28568];
  uint64_t v10 = @"Session lookup failed";
  id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  uint64_t v7 = [v5 errorWithDomain:*MEMORY[0x1E4F28760] code:-50 userInfo:v6];

  return v7;
}

void sub_1CFE571E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE573D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},BOOL>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = (void *)MEMORY[0x1D25E1DE0](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_iEUlS4_bE__e20_v20__0__NSError_8B16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = (void *)MEMORY[0x1D25E1DE0](v4);
    id v11 = v8;
    id v12 = (id)MEMORY[0x1D25E1DE0](v9);
    uint64_t v5 = (void *)MEMORY[0x1D25E1DE0](v10);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_1CFE57558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE5774C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1CFE57B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t as::AudioSessionMuteEnabled(as *this)
{
  {
    as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  return as::AudioSessionMuteEnabled(void)::enabled;
}

void sub_1CFE57CB8(_Unwind_Exception *a1)
{
}

void sub_1CFE57E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE5803C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1CFE581B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a9);
  _Unwind_Resume(a1);
}

void sub_1CFE583C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},double,unsigned long>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = (void *)MEMORY[0x1D25E1DE0](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrordmEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c124_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrordmEEEU13block_pointerFvDpT_ES9_iEUlS4_dmE__e23_v32__0__NSError_8d16Q24l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = (void *)MEMORY[0x1D25E1DE0](v4);
    id v11 = v8;
    id v12 = (id)MEMORY[0x1D25E1DE0](v9);
    uint64_t v5 = (void *)MEMORY[0x1D25E1DE0](v10);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_1CFE58550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE586CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  os_unfair_lock_unlock(v15);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a14);

  _Unwind_Resume(a1);
}

void sub_1CFE58864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1CFE58BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a17);
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a24);

  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<void const*>::~ObjectRef(const void **a1)
{
  id v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1CFE58DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  int v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1CFE58F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE59364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a28);
  _Unwind_Resume(a1);
}

void sub_1CFE595E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1CFE59888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1CFE59B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1CFE5A038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,id a26)
{
  std::tuple<std::shared_ptr<as::server::AudioApplicationInfo>,std::shared_ptr<as::server::AudioAppRemoteClient>>::~tuple((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},unsigned int>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = (void *)MEMORY[0x1D25E1DE0](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_iEUlS4_jE__e20_v20__0__NSError_8I16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = (void *)MEMORY[0x1D25E1DE0](v4);
    id v11 = v8;
    id v12 = (id)MEMORY[0x1D25E1DE0](v9);
    uint64_t v5 = (void *)MEMORY[0x1D25E1DE0](v10);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_1CFE5A234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::shared_ptr<as::server::AudioApplicationInfo>,std::shared_ptr<as::server::AudioAppRemoteClient>>::~tuple(uint64_t a1)
{
  id v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1CFE5A4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  a15 = (void **)&a21;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::tuple<std::shared_ptr<as::server::AudioApplicationInfo>,std::shared_ptr<as::server::AudioAppRemoteClient>>::~tuple((uint64_t)&a27);

  _Unwind_Resume(a1);
}

id BuildInvalidAudioAppError(as::server *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(id *)as::server::gSessionServerLog(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)audit_token_t buf = 136315906;
    __int16 v13 = "AVAudioSessionXPCServer.mm";
    __int16 v14 = 1024;
    int v15 = 1503;
    __int16 v16 = 2080;
    __int16 v17 = a1;
    __int16 v18 = 1024;
    int v19 = v5;
    _os_log_impl(&dword_1CFE2A000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d %s failed due to audio application (pid: %d) lookup failure", buf, 0x22u);
  }
  id v6 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v10 = *MEMORY[0x1E4F28568];
  id v11 = @"AudioApp lookup failed";
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  size_t v8 = [v6 errorWithDomain:*MEMORY[0x1E4F28760] code:-50 userInfo:v7];

  return v8;
}

void sub_1CFE5A698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE5A9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  std::tuple<std::shared_ptr<as::server::AudioApplicationInfo>,std::shared_ptr<as::server::AudioAppRemoteClient>>::~tuple((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1CFE5AE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  std::tuple<std::shared_ptr<as::server::AudioApplicationInfo>,std::shared_ptr<as::server::AudioAppRemoteClient>>::~tuple((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1CFE5B280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  std::tuple<std::shared_ptr<as::server::AudioApplicationInfo>,std::shared_ptr<as::server::AudioAppRemoteClient>>::~tuple((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1CFE5B490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::tuple<std::shared_ptr<as::server::AudioApplicationInfo>,std::shared_ptr<as::server::AudioAppRemoteClient>>::~tuple((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_1CFE5B5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE5B97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *as::server::forbid_acq::SystemController::Instance(as::server::forbid_acq::SystemController *this)
{
  {
    as::server::forbid_acq::SystemController::SystemController((as::server::forbid_acq::SystemController *)&as::server::forbid_acq::SystemController::Instance(void)::sInstance);
  }
  return &as::server::forbid_acq::SystemController::Instance(void)::sInstance;
}

void sub_1CFE5BA68(_Unwind_Exception *a1)
{
}

void sub_1CFE5BD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t caulk::expected<NSDictionary * {__strong},NSError * {__strong}>::value(uint64_t result)
{
  if (!*(unsigned char *)(result + 8))
  {
    uint64_t v1 = (void **)result;
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    caulk::bad_expected_access<NSError * {__strong}>::bad_expected_access(exception, *v1);
  }
  return result;
}

void sub_1CFE5BDE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE5BF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE5C148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE5C3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE5C46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::HandleDispatchBlockException(as::server *this, const char *a2, const char *a3, const char *a4, unint64_t a5, unint64_t a6)
{
  int v8 = (int)a4;
  std::string::basic_string[abi:ne180100]<0>(&v43, "Exception thrown: ");
  size_t v12 = strlen((const char *)this);
  __int16 v13 = std::string::append(&v43, (const std::string::value_type *)this, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  int v15 = std::string::append(&v44, ", ", 2uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  size_t v17 = strlen(a2);
  __int16 v18 = std::string::append(&v45, a2, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  uint64_t v20 = std::string::append(&v46, ", ", 2uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  size_t v22 = strlen(a3);
  int v23 = std::string::append(&v47, a3, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  unsigned int v25 = std::string::append(&v48, ":", 1uLL);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v42, v8);
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v27 = &v42;
  }
  else {
    int v27 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v42.__r_.__value_.__l.__size_;
  }
  id v29 = std::string::append(&v49, (const std::string::value_type *)v27, size);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(", ", &v50, &v51);
  std::to_string(&v41, a5);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v31 = &v41;
  }
  else {
    char v31 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v32 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v32 = v41.__r_.__value_.__l.__size_;
  }
  int v33 = std::string::append(&v51, (const std::string::value_type *)v31, v32);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(", ", &v52, &v53);
  std::to_string(&__p, a6);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v37 = std::string::append(&v53, (const std::string::value_type *)p_p, v36);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  std::string::size_type v55 = v37->__r_.__value_.__r.__words[2];
  long long v54 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  uint64_t result = abort_with_reason();
  __break(1u);
  return result;
}

void sub_1CFE5C86C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 73) < 0) {
    operator delete(*(void **)(v1 - 96));
  }
  _Unwind_Resume(a1);
}

void gsl::details::terminate(gsl::details *this)
{
}

void gsl::narrowing_error::~narrowing_error(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1D25E1860);
}

void std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

as::server::forbid_acq::SystemController *as::server::forbid_acq::SystemController::SystemController(as::server::forbid_acq::SystemController *this)
{
  *(void *)this = 0;
  uint64_t v2 = [objc_alloc(MEMORY[0x1E4F74F70]) initWithPID:getpid()];
  id v3 = *(void **)this;
  *(void *)this = v2;

  return this;
}

void sub_1CFE5CAC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *caulk::bad_expected_access<NSError * {__strong}>::bad_expected_access(void *a1, void *a2)
{
  id v3 = a2;
  *a1 = &unk_1F2687F08;
  a1[1] = v3;
  return a1;
}

void caulk::bad_expected_access<NSError * {__strong}>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
}

{
  uint64_t vars8;

  std::exception::~exception(a1);
  JUMPOUT(0x1D25E1860);
}

uint64_t std::unique_ptr<std::promise<void>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1D25E1780]();
    JUMPOUT(0x1D25E1860);
  }
  return result;
}

void sub_1CFE5CE00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AudioSessionServerXPCTimeout(char *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((atomic_exchange(AudioSessionServerXPCTimeout(char const*)::onceFlag, 1u) & 1) == 0)
  {
    LogACQEvents();
    std::string::basic_string[abi:ne180100]<0>(&v16, a1);
    uint64_t v2 = std::string::insert(&v16, 0, "XPC message timeout in ", 0x17uLL);
    long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    *(void *)&v19[16] = *((void *)&v2->__r_.__value_.__l + 2);
    *(_OWORD *)long long v19 = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    uint64_t v4 = std::string::append((std::string *)v19, ", probably deadlocked. Writing a stackshot and terminating.", 0x3BuLL);
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    int64_t v18 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if ((v19[23] & 0x80000000) != 0) {
      operator delete(*(void **)v19);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    id v6 = *(id *)as::server::gSessionServerLog((as::server *)v4);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = __p;
      if (v18 < 0) {
        uint64_t v7 = (void **)__p[0];
      }
      *(_DWORD *)long long v19 = 136315650;
      *(void *)&v19[4] = "AVAudioSessionXPCServer.mm";
      *(_WORD *)&v19[12] = 1024;
      *(_DWORD *)&v19[14] = 321;
      *(_WORD *)&v19[18] = 2080;
      *(void *)&unsigned char v19[20] = v7;
      _os_log_impl(&dword_1CFE2A000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", v19, 0x1Cu);
    }
    {
      as::PanicOnXPCTimeoutEnabled(void)::enabled = _os_feature_enabled_impl();
    }
    if (as::PanicOnXPCTimeoutEnabled(void)::enabled)
    {
      if (v18 >= 0) {
        int v8 = __p;
      }
      else {
        int v8 = (void **)__p[0];
      }
      MEMORY[0x1D25E1F90](3072, v8);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      int v15 = __p;
      if (v18 < 0) {
        int v15 = (void **)__p[0];
      }
      *(_DWORD *)long long v19 = 136315138;
      *(void *)&v19[4] = v15;
      _os_log_fault_impl(&dword_1CFE2A000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "%s", v19, 0xCu);
    }
    id v9 = [NSString alloc];
    if (v18 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    id v11 = (void *)[v9 initWithCString:v10 encoding:1];
    pid_t v12 = getpid();
    uint64_t v13 = WriteStackshotReportWithPID();
    if ((v13 & 1) == 0)
    {
      long long v14 = *(id *)as::server::gSessionServerLog((as::server *)v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v19 = 136315394;
        *(void *)&v19[4] = "AVAudioSessionXPCServer.mm";
        *(_WORD *)&v19[12] = 1024;
        *(_DWORD *)&v19[14] = 341;
        _os_log_impl(&dword_1CFE2A000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Writing stackshot failed", v19, 0x12u);
      }
    }
    kill(v12, 9);

    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1CFE5D148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSString * {__strong}>(void({block_pointer})(NSError * {__strong},NSString * {__strong}),int)::{lambda(NSError *,NSString *)#1}::operator()(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v7 = a2;
  id v6 = applesauce::dispatch::v1::queue::operator*((id *)a1);
  dispatch_source_cancel(v6);

  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_1CFE5D258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = MEMORY[0x1D25E1DE0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  long long v3 = *(void **)(a1 + 32);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  long long v3 = (id *)(a1 + 32);
  id v5 = a2;
  uint64_t v4 = applesauce::dispatch::v1::queue::operator*(v3);
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1CFE5D378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_iEUlS4_bE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = MEMORY[0x1D25E1DE0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_iEUlS4_bE_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  long long v3 = *(void **)(a1 + 32);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrordmEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2, double a3)
{
  id v5 = (id *)(a1 + 32);
  id v7 = a2;
  id v6 = applesauce::dispatch::v1::queue::operator*(v5);
  dispatch_source_cancel(v6);

  (*(void (**)(double))(*(void *)(a1 + 40) + 16))(a3);
}

void sub_1CFE5D4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c124_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrordmEEEU13block_pointerFvDpT_ES9_iEUlS4_dmE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = MEMORY[0x1D25E1DE0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c124_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrordmEEEU13block_pointerFvDpT_ES9_iEUlS4_dmE_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  long long v3 = *(void **)(a1 + 32);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  long long v3 = (id *)(a1 + 32);
  id v5 = a2;
  uint64_t v4 = applesauce::dispatch::v1::queue::operator*(v3);
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1CFE5D5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_iEUlS4_jE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = MEMORY[0x1D25E1DE0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_iEUlS4_jE_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  long long v3 = *(void **)(a1 + 32);
}

void sub_1CFE5D6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL25MediaSafetyNetLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaSafetyNetLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void *___ZL45getMSNMonitorSetLastMicrophoneClientSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaSafetyNetLibrary();
  uint64_t result = dlsym(v2, "MSNMonitorSetLastMicrophoneClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMSNMonitorSetLastMicrophoneClientSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *MediaSafetyNetLibrary(void)
{
  id v5 = 0;
  uint64_t v0 = MediaSafetyNetLibraryCore(&v5);
  if (!v0)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *MediaSafetyNetLibrary()"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v4, @"MSNSoftLink.h", 18, @"%s", v5);

    __break(1u);
    goto LABEL_5;
  }
  uint64_t v1 = (void *)v0;
  uint64_t v2 = v5;
  if (v5) {
LABEL_5:
  }
    free(v2);
  return v1;
}

void sub_1CFE5D8B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *___ZL40getMSNMonitorSetMicrophoneStateSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaSafetyNetLibrary();
  uint64_t result = dlsym(v2, "MSNMonitorSetMicrophoneState");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMSNMonitorSetMicrophoneStateSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t *std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      long long v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      long long v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  id v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      long long v3 = a2;
      goto LABEL_7;
    }
    do
    {
      long long v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  id v6 = (uint64_t **)v3[2];
  id v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      id v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      id v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *long long v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      id v7 = *(uint64_t **)(*v7 + 8);
    }
    int v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      std::string v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        long long v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        long long v7[2] = (uint64_t)v15;
        std::string v16 = v7;
      }
      else
      {
        int v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      long long v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *long long v24 = v23;
      goto LABEL_72;
    }
    std::string v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    size_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      size_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    id v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    long long v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    id v7 = *(uint64_t **)v12;
  }
  long long v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    size_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    long long v7[2] = (uint64_t)v20;
    long long v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  long long v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void as::server::DeferredMessageState::EnqueueDefaultRouteChange(as::server::DeferredMessageState *this, const as::RouteIdentifier *a2)
{
  id v6 = (void (***)(void))*((void *)this + 12);
  int v5 = (void (***)(void))*((void *)this + 13);
  uint64_t v4 = (uint64_t *)((char *)this + 96);
  if (v6 == v5)
  {
    int v5 = (void (***)(void))*((void *)this + 12);
  }
  else
  {
    int v7 = *((_DWORD *)a2 + 6);
    int v8 = v6 + 4;
    while (*((_DWORD *)v8 - 2) != v7)
    {
      BOOL v9 = v8 == v5;
      v8 += 4;
      if (v9)
      {
        id v6 = (void (***)(void))*((void *)this + 13);
        goto LABEL_14;
      }
    }
    id v6 = v8 - 4;
    if (v8 - 4 != v5 && v8 != v5)
    {
      do
      {
        if (*((_DWORD *)v8 + 6) != v7)
        {
          as::RouteIdentifier::operator=();
          v6 += 4;
        }
        v8 += 4;
      }
      while (v8 != v5);
      int v5 = (void (***)(void))*((void *)this + 13);
    }
  }
LABEL_14:
  std::vector<as::RouteIdentifier>::erase((uint64_t)v4, v6, v5);
  std::vector<as::RouteIdentifier>::push_back[abi:ne180100](v4, (RouteIdentifier *)a2);
  as::server::DeferredMessageState::EnqueueEventType(this, 1);
}

BOOL as::server::DeferredMessageState::SendSingleMessage(as::server::DeferredMessageState *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)this)
  {
    uint64_t v2 = *(id *)as::server::gSessionServerLog(this);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      as::ProcessToken::description((as::server::DeferredMessageState *)((char *)this + 16), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v4 = *((_DWORD *)this + 1);
      *(_DWORD *)audit_token_t buf = 136315906;
      int v8 = "AVAudioSessionXPCClientRelay.mm";
      __int16 v9 = 1024;
      int v10 = 381;
      __int16 v11 = 2080;
      uint64_t v12 = p_p;
      __int16 v13 = 1024;
      int v14 = v4;
      _os_log_impl(&dword_1CFE2A000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d deferring message for client process %s. Count=%u", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    return 0;
  }
  else
  {
    if (*((void *)this + 4) - *((void *)this + 3) != 4) {
      as::server::DeferredMessageState::SendSingleMessage();
    }
    return as::server::DeferredMessageState::SendDeferredMessages(this);
  }
}

void sub_1CFE5DF88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL as::server::DeferredMessageState::SendInterruptionMessage(as::server::DeferredMessageState *this, int a2, NSDictionary *a3)
{
  int v5 = a3;
  as::server::DeferredMessageState::EnqueueInterruptionMessage(this, a2, v5);
  BOOL v6 = as::server::DeferredMessageState::SendSingleMessage(this);

  return v6;
}

void sub_1CFE5DFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::DeferredMessageState::EnqueueInterruptionMessage(as::server::DeferredMessageState *this, int a2, NSDictionary *a3)
{
  int v5 = a3;
  unint64_t v6 = *((void *)this + 23);
  unint64_t v7 = *((void *)this + 22);
  if (v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 21);
    uint64_t v10 = (uint64_t)(v7 - v9) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v6 - v9;
    unint64_t v12 = (uint64_t)(v6 - v9) >> 3;
    if (v12 <= v10 + 1) {
      unint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    v24[4] = (char *)this + 184;
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)this + 184, v13);
    std::string v16 = &v14[16 * v10];
    *(_DWORD *)std::string v16 = a2;
    *((void *)v16 + 1) = v5;
    uint64_t v18 = *((void *)this + 21);
    uint64_t v17 = *((void *)this + 22);
    long long v19 = v16;
    if (v17 != v18)
    {
      uint64_t v20 = *((void *)this + 22);
      do
      {
        int v21 = *(_DWORD *)(v20 - 16);
        v20 -= 16;
        *((_DWORD *)v19 - 4) = v21;
        v19 -= 16;
        uint64_t v22 = *(void *)(v20 + 8);
        *(void *)(v20 + 8) = 0;
        *((void *)v19 + 1) = v22;
      }
      while (v20 != v18);
    }
    int v8 = v16 + 16;
    *((void *)this + 21) = v19;
    *((void *)this + 22) = v16 + 16;
    uint64_t v23 = *((void *)this + 23);
    *((void *)this + 23) = &v14[16 * v15];
    v24[2] = v17;
    v24[3] = v23;
    v24[0] = v18;
    v24[1] = v18;
    std::__split_buffer<std::pair<unsigned int,NSDictionary * {__strong}>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    *(_DWORD *)unint64_t v7 = a2;
    *(void *)(v7 + 8) = v5;
    int v8 = (char *)(v7 + 16);
  }
  *((void *)this + 22) = v8;
  as::server::DeferredMessageState::EnqueueEventType(this, 4);
}

void sub_1CFE5E130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::DeferredMessageState::EnqueueStoppedForAppStateChange(as::server::DeferredMessageState *this, int a2)
{
  int v16 = a2;
  long long v3 = (char *)this + 120;
  int v4 = std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(*((_DWORD **)this + 15), *((_DWORD **)this + 16), &v16);
  if (*((_DWORD **)v3 + 1) != v4) {
    *((void *)this + 16) = v4;
  }
  unint64_t v5 = *((void *)this + 17);
  if ((unint64_t)v4 >= v5)
  {
    unint64_t v7 = *(_DWORD **)v3;
    uint64_t v8 = ((uint64_t)v4 - *(void *)v3) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 136, v11);
      unint64_t v7 = (_DWORD *)*((void *)this + 15);
      int v4 = (_DWORD *)*((void *)this + 16);
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v13 = &v12[4 * v8];
    int v14 = &v12[4 * v11];
    *(_DWORD *)unint64_t v13 = v16;
    unint64_t v6 = v13 + 4;
    while (v4 != v7)
    {
      int v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *((void *)this + 15) = v13;
    *((void *)this + 16) = v6;
    *((void *)this + 17) = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *int v4 = v16;
    unint64_t v6 = v4 + 1;
  }
  *((void *)this + 16) = v6;
  as::server::DeferredMessageState::EnqueueEventType(this, 2);
}

void as::server::DeferredMessageState::EnqueueHasProxies(as::server::DeferredMessageState *this, unsigned int a2, int a3)
{
  uint64_t v6 = *((void *)this + 24);
  uint64_t v7 = *((void *)this + 25);
  uint64_t v8 = (char **)((char *)this + 192);
  if (v6 != v7)
  {
    while (*(_DWORD *)v6 != a2)
    {
      v6 += 8;
      if (v6 == v7)
      {
        uint64_t v6 = *((void *)this + 25);
        goto LABEL_11;
      }
    }
    if (v6 != v7)
    {
      for (uint64_t i = v6 + 8; i != v7; i += 8)
      {
        if (*(_DWORD *)i != a2)
        {
          *(_DWORD *)uint64_t v6 = *(_DWORD *)i;
          *(unsigned char *)(v6 + 4) = *(unsigned char *)(i + 4);
          v6 += 8;
        }
      }
    }
  }
LABEL_11:
  std::vector<std::pair<unsigned int,BOOL>>::erase((uint64_t)this + 192, v6, v7);
  uint64_t v10 = 0x100000000;
  if (!a3) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | a2;
  unint64_t v12 = *((void *)this + 26);
  unint64_t v13 = (uint64_t *)*((void *)this + 25);
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = ((char *)v13 - *v8) >> 3;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v12 - (void)*v8;
    uint64_t v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
      uint64_t v17 = v15 + 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18) {
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 208, v18);
    }
    else {
      long long v19 = 0;
    }
    uint64_t v20 = (uint64_t *)&v19[8 * v15];
    int v21 = &v19[8 * v18];
    uint64_t *v20 = v11;
    int v14 = v20 + 1;
    uint64_t v23 = (char *)*((void *)this + 24);
    uint64_t v22 = (char *)*((void *)this + 25);
    if (v22 != v23)
    {
      do
      {
        uint64_t v24 = *((void *)v22 - 1);
        v22 -= 8;
        *--uint64_t v20 = v24;
      }
      while (v22 != v23);
      uint64_t v22 = *v8;
    }
    *((void *)this + 24) = v20;
    *((void *)this + 25) = v14;
    *((void *)this + 26) = v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *unint64_t v13 = v11;
    int v14 = v13 + 1;
  }
  *((void *)this + 25) = v14;
  as::server::DeferredMessageState::EnqueueEventType(this, 5);
}

void as::server::DeferredMessageState::EnqueueNeedsStateSync(as::server::DeferredMessageState *this, int a2)
{
  int v16 = a2;
  long long v3 = (char *)this + 144;
  int v4 = std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(*((_DWORD **)this + 18), *((_DWORD **)this + 19), &v16);
  if (*((_DWORD **)v3 + 1) != v4) {
    *((void *)this + 19) = v4;
  }
  unint64_t v5 = *((void *)this + 20);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = *(_DWORD **)v3;
    uint64_t v8 = ((uint64_t)v4 - *(void *)v3) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 160, v11);
      uint64_t v7 = (_DWORD *)*((void *)this + 18);
      int v4 = (_DWORD *)*((void *)this + 19);
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v13 = &v12[4 * v8];
    int v14 = &v12[4 * v11];
    *(_DWORD *)unint64_t v13 = v16;
    uint64_t v6 = v13 + 4;
    while (v4 != v7)
    {
      int v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *((void *)this + 18) = v13;
    *((void *)this + 19) = v6;
    *((void *)this + 20) = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *int v4 = v16;
    uint64_t v6 = v4 + 1;
  }
  *((void *)this + 19) = v6;
  as::server::DeferredMessageState::EnqueueEventType(this, 3);
}

void as::server::DeferredMessageState::EnqueueConfigurationChange(as::server::DeferredMessageState *this, const as::server::ConfigChangeSummary *a2)
{
  long long v3 = (as::server::DeferredMessageState *)((char *)this + 48);
  if (*((unsigned char *)this + 88))
  {
    as::server::ConfigChangeSummary::ConfigChangeSummary((as::server::ConfigChangeSummary *)&v28, a2);
    int v4 = (_anonymous_namespace_ *)as::server::ConfigChangeSummary::mutableHardwareSystemChange(v3);
    unint64_t v5 = (caulk::xstring ***)as::server::ConfigChangeSummary::mutableHardwareSystemChange((as::server::ConfigChangeSummary *)&v28);
    uint64_t v7 = v29;
    uint64_t v8 = v30;
    if (v29 != v30)
    {
      unint64_t v9 = (void *)((char *)this + 56);
      uint64_t v10 = (void *)((char *)this + 72);
      unint64_t v11 = (void *)*((void *)this + 8);
      do
      {
        unint64_t v12 = (void *)*v9;
        if ((void *)*v9 == v11)
        {
LABEL_8:
          if ((unint64_t)v11 >= *v10)
          {
            uint64_t v17 = v11 - v12;
            if ((unint64_t)(v17 + 1) >> 61) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v18 = *v10 - (void)v12;
            uint64_t v19 = v18 >> 2;
            if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
              uint64_t v19 = v17 + 1;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            v31[4] = (char *)this + 72;
            if (v20) {
              int v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 72, v20);
            }
            else {
              int v21 = 0;
            }
            uint64_t v23 = &v21[8 * v17];
            v31[0] = v21;
            v31[1] = v23;
            v31[3] = &v21[8 * v20];
            uint64_t v24 = *v7;
            void *v7 = 0;
            *(void *)uint64_t v23 = v24;
            void v31[2] = v23 + 8;
            std::vector<std::unique_ptr<as::server::SessionUpdateSummary>>::__swap_out_circular_buffer((uint64_t *)this + 7, v31);
            unint64_t v11 = (void *)*((void *)this + 8);
            std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer(v31);
          }
          else
          {
            uint64_t v16 = *v7;
            void *v7 = 0;
            *v11++ = v16;
            *((void *)this + 8) = v11;
          }
          *((void *)this + 8) = v11;
        }
        else
        {
          uint64_t v13 = *v7;
          int v14 = (void *)*v9;
          while (1)
          {
            int v15 = (_DWORD *)*v14;
            if (*(_DWORD *)(*v7 + 12) == *(_DWORD *)(*v14 + 12)) {
              break;
            }
            if (++v14 == v11) {
              goto LABEL_8;
            }
          }
          v15[4] |= *(_DWORD *)(v13 + 16);
          int v22 = v15[2];
          long long v15[2] = v22 | 2;
          void v15[5] = *(_DWORD *)(v13 + 20);
          long long v15[2] = v22 | 6;
        }
        ++v7;
      }
      while (v7 != v8);
      uint64_t v7 = v29;
      uint64_t v25 = v30;
      while (v25 != v7)
      {
        uint64_t v27 = *--v25;
        uint64_t v26 = v27;
        void *v25 = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
        }
      }
    }
    long long v30 = v7;
    as::server::ConfigChangeSummary::~ConfigChangeSummary((as::server::ConfigChangeSummary *)&v28);
  }
  else
  {
    std::optional<as::server::ConfigChangeSummary>::operator=[abi:ne180100]<as::server::ConfigChangeSummary const&,void>((as::server::DeferredMessageState *)((char *)this + 48), a2);
  }
  as::server::DeferredMessageState::EnqueueEventType(this, 0);
}

void sub_1CFE5E74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void as::server::DeferredMessageState::EnqueueControlValueChanged(as::server::DeferredMessageState *this, ControlValue *a2)
{
  uint64_t v5 = *((void *)this + 27);
  uint64_t v6 = *((void *)this + 28);
  int v4 = (uint64_t *)((char *)this + 216);
  as::server::ControlValue::ControlValue((as::server::ControlValue *)v10, a2);
  if (v5 == v6)
  {
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v7 = v6;
    uint64_t v8 = v5 + 80;
    while (*(void *)(v8 - 24) != v11)
    {
      BOOL v9 = v8 == v6;
      v8 += 80;
      if (v9) {
        goto LABEL_14;
      }
    }
    if (v8 - 80 != v6)
    {
      uint64_t v7 = v8 - 80;
      while (v8 != v6)
      {
        if (*(void *)(v8 + 56) != v11)
        {
          as::server::ControlValue::operator=();
          v7 += 80;
        }
        v8 += 80;
      }
    }
  }
LABEL_14:
  as::server::ControlValue::~ControlValue((as::server::ControlValue *)v10);
  std::vector<as::server::ControlValue>::erase((uint64_t)v4, v7, *((void *)this + 28));
  std::vector<as::server::ControlValue>::push_back[abi:ne180100](v4, a2);
  as::server::DeferredMessageState::EnqueueEventType(this, 6);
}

as::server::ConfigChangeSummary *std::optional<as::server::ConfigChangeSummary>::operator=[abi:ne180100]<as::server::ConfigChangeSummary const&,void>(as::server::ConfigChangeSummary *this, const as::server::ConfigChangeSummary *a2)
{
  if (*((unsigned char *)this + 40))
  {
    as::server::ConfigChangeSummary::operator=();
  }
  else
  {
    as::server::ConfigChangeSummary::ConfigChangeSummary(this, a2);
    *((unsigned char *)this + 40) = 1;
  }
  return this;
}

void as::server::DeferredMessageState::EnqueueEventType(as::server::DeferredMessageState *this, int a2)
{
  uint64_t v5 = (char *)*((void *)this + 3);
  uint64_t v6 = (char *)*((void *)this + 4);
  uint64_t v7 = v5;
  if (v5 != v6)
  {
    uint64_t v7 = v5;
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 4;
      if (v7 == v6) {
        goto LABEL_7;
      }
    }
  }
  if (v7 == v6)
  {
LABEL_7:
    unint64_t v8 = *((void *)this + 5);
    if ((unint64_t)v6 >= v8)
    {
      uint64_t v10 = (v6 - v5) >> 2;
      if ((unint64_t)(v10 + 1) >> 62) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v8 - (void)v5;
      unint64_t v12 = (uint64_t)(v8 - (void)v5) >> 1;
      if (v12 <= v10 + 1) {
        unint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 40, v13);
        uint64_t v5 = (char *)*((void *)this + 3);
        uint64_t v6 = (char *)*((void *)this + 4);
      }
      else
      {
        int v14 = 0;
      }
      int v15 = &v14[4 * v10];
      uint64_t v16 = &v14[4 * v13];
      *(_DWORD *)int v15 = a2;
      BOOL v9 = v15 + 4;
      while (v6 != v5)
      {
        int v17 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v15 - 1) = v17;
        v15 -= 4;
      }
      *((void *)this + 3) = v15;
      *((void *)this + 4) = v9;
      *((void *)this + 5) = v16;
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v6 = a2;
      BOOL v9 = v6 + 4;
    }
    *((void *)this + 4) = v9;
  }
  ++*((_DWORD *)this + 1);
}

void (***std::vector<as::RouteIdentifier>::erase(uint64_t a1, void (***a2)(void), void (***a3)(void)))(void)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void (****)(void))(a1 + 8);
    if (a3 == v6)
    {
      unint64_t v8 = a2;
    }
    else
    {
      uint64_t v7 = 4 * (((char *)a3 - (char *)a2) >> 5);
      unint64_t v8 = a2;
      do
      {
        as::RouteIdentifier::operator=();
        v8 += 4;
      }
      while (&v8[v7] != v6);
      uint64_t v5 = *(void (****)(void))(a1 + 8);
    }
    if (v5 != v8)
    {
      BOOL v9 = v5 - 4;
      uint64_t v10 = v5 - 4;
      unint64_t v11 = v5 - 4;
      do
      {
        unint64_t v12 = *v11;
        v11 -= 4;
        (*v12)(v10);
        v9 -= 4;
        BOOL v13 = v10 == v8;
        uint64_t v10 = v11;
      }
      while (!v13);
    }
    *(void *)(a1 + 8) = v8;
  }
  return a2;
}

uint64_t std::vector<as::RouteIdentifier>::push_back[abi:ne180100](uint64_t *a1, RouteIdentifier *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::RouteIdentifier>>(v4, v13);
    }
    else {
      int v14 = 0;
    }
    int v15 = v14;
    uint64_t v16 = (as::RouteIdentifier *)&v14[32 * v10];
    uint64_t v18 = &v14[32 * v13];
    as::RouteIdentifier::RouteIdentifier(v16, a2);
    int v17 = (char *)v16 + 32;
    std::vector<as::RouteIdentifier>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<as::RouteIdentifier>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = as::RouteIdentifier::RouteIdentifier(*(as::RouteIdentifier **)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_1CFE5EB9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<as::RouteIdentifier>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<unsigned int,BOOL>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = a2;
    if (a3 != v3)
    {
      uint64_t v5 = 8 * ((a3 - a2) >> 3);
      uint64_t v4 = a2;
      do
      {
        *(_DWORD *)uint64_t v4 = *(_DWORD *)(v4 + v5);
        *(unsigned char *)(v4 + 4) = *(unsigned char *)(v4 + v5 + 4);
        v4 += 8;
      }
      while (v4 + v5 != v3);
    }
    *(void *)(a1 + 8) = v4;
  }
  return a2;
}

_DWORD *std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result == a2)
  {
LABEL_4:
    uint64_t result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2) {
        goto LABEL_4;
      }
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 1; i != a2; ++i)
    {
      if (*i != *a3) {
        *result++ = *i;
      }
    }
  }
  return result;
}

uint64_t std::vector<as::server::ControlValue>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,as::server::ControlValue *,as::server::ControlValue *,as::server::ControlValue *,0>(a3, *(void *)(a1 + 8), a2);
    unint64_t v6 = v5;
    unint64_t v7 = *(void (****)(void))(a1 + 8);
    if (v7 != v5)
    {
      unint64_t v8 = v7 - 10;
      uint64_t v9 = v7 - 10;
      uint64_t v10 = v7 - 10;
      do
      {
        uint64_t v11 = *v10;
        v10 -= 10;
        (*v11)(v9);
        v8 -= 10;
        BOOL v12 = v9 == v6;
        uint64_t v9 = v10;
      }
      while (!v12);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::vector<as::server::ControlValue>::push_back[abi:ne180100](uint64_t *a1, ControlValue *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v10 + 1 > 0x333333333333333) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x199999999999999) {
      unint64_t v13 = 0x333333333333333;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::ControlValue>>(v4, v13);
    }
    else {
      int v14 = 0;
    }
    int v15 = v14;
    uint64_t v16 = (as::server::ControlValue *)&v14[80 * v10];
    uint64_t v18 = &v14[80 * v13];
    as::server::ControlValue::ControlValue(v16, a2);
    int v17 = (char *)v16 + 80;
    std::vector<as::server::ControlValue>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<as::server::ControlValue>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = as::server::ControlValue::ControlValue(*(as::server::ControlValue **)(v4 - 8), a2);
    uint64_t v9 = v7 + 80;
    a1[1] = v7 + 80;
  }
  a1[1] = v9;
  return result;
}

void sub_1CFE5EE24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<as::server::ControlValue>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL as::server::DeferredMessageState::SendDeferredMessages(as::server::DeferredMessageState *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)this = 0;
  if (*((_DWORD *)this + 1) >= 2u)
  {
    uint64_t v2 = *(id *)as::server::gSessionServerLog(this);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = *((_DWORD *)this + 1);
      as::ProcessToken::description((as::server::DeferredMessageState *)((char *)this + 16), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)audit_token_t buf = 136315906;
      uint64_t v9 = "AVAudioSessionXPCClientRelay.mm";
      __int16 v10 = 1024;
      int v11 = 392;
      __int16 v12 = 1024;
      int v13 = v3;
      __int16 v14 = 2080;
      int v15 = p_p;
      _os_log_impl(&dword_1CFE2A000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d sending %u deferred messages for client process %s", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v5 = *((void *)this + 3);
  BOOL result = v5 != *((void *)this + 4);
  *(unsigned char *)this = result;
  *((void *)this + 4) = v5;
  *((_DWORD *)this + 1) = 0;
  return result;
}

void sub_1CFE5EF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::ProcessToken::description(as::ProcessToken *this@<X0>, std::string *a2@<X8>)
{
  if ((*(_DWORD *)this & 0x20000) != 0) {
    uint64_t v4 = "Test.";
  }
  else {
    uint64_t v4 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, v4);
  std::to_string(&__p, *(_DWORD *)this & 0x1FFFF);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v7 = std::string::append(&v9, (const std::string::value_type *)p_p, size);
  *a2 = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1CFE5F04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CFE5F0EC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE5F1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CFE5F22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE5F2C4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE5F370(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE5F40C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE5F4B8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE5F550(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE5F5E8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE5F680(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::MergeChangedHardwareObject(_anonymous_namespace_ *this, caulk::xstring ***a2, as::server::ChangedObject *a3)
{
  uint64_t v5 = *(void *)(as::server::ChangedObject::objectDescription(this) + 96);
  if (v5 != *(void *)(as::server::ChangedObject::objectDescription((as::server::ChangedObject *)a2) + 96)) {
  int v6 = *(_DWORD *)(as::server::ChangedObject::objectDescription(this) + 104);
  }
  if (v6 != *(_DWORD *)(as::server::ChangedObject::objectDescription((as::server::ChangedObject *)a2) + 104)) {
  unint64_t v7 = (void *)((char *)this + 56);
  }
  uint64_t v89 = (as::server::ChangedObject *)a2;
  unint64_t v8 = a2[7];
  __int16 v10 = a2[8];
  std::string v9 = a2 + 7;
  if (v8 != v10)
  {
    int v11 = (void *)((char *)this + 72);
    __int16 v12 = (void *)*((void *)this + 8);
    do
    {
      if ((unint64_t)v12 >= *v11)
      {
        uint64_t v14 = ((uint64_t)v12 - *v7) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = *v11 - *v7;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        uint64_t v98 = (char *)this + 72;
        if (v17) {
          uint64_t v18 = (caulk::xstring **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 72, v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[v14];
        int v94 = v18;
        unsigned int v95 = v19;
        v97 = &v18[v17];
        unint64_t v20 = *v8;
        *unint64_t v8 = 0;
        char *v19 = v20;
        unsigned int v96 = v19 + 1;
        std::vector<std::unique_ptr<as::server::ObjectDescription>>::__swap_out_circular_buffer((uint64_t *)this + 7, &v94);
        __int16 v12 = (void *)*((void *)this + 8);
        std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer((void **)&v94);
      }
      else
      {
        int v13 = *v8;
        *unint64_t v8 = 0;
        *v12++ = v13;
        *((void *)this + 8) = v12;
      }
      *((void *)this + 8) = v12;
      ++v8;
    }
    while (v8 != v10);
  }
  std::vector<std::unique_ptr<as::server::ObjectDescription>>::__clear[abi:ne180100](v9);
  uint64_t v90 = (uint64_t *)((char *)this + 104);
  int v21 = (caulk::xstring **)*((void *)v89 + 10);
  int v22 = (caulk::xstring **)*((void *)v89 + 11);
  if (v21 != v22)
  {
    uint64_t v23 = (void *)((char *)this + 80);
    do
    {
      uint64_t v24 = (uint64_t *)*((void *)this + 7);
      uint64_t v25 = (uint64_t *)*((void *)this + 8);
      if (v24 == v25)
      {
        uint64_t v25 = (uint64_t *)*((void *)this + 7);
      }
      else
      {
        while (*((void *)*v21 + 12) != *(void *)(*v24 + 96))
        {
          if (++v24 == v25)
          {
            uint64_t v24 = (uint64_t *)*((void *)this + 8);
            goto LABEL_33;
          }
        }
        if (v24 != v25)
        {
          uint64_t v26 = v24 + 1;
          if (v24 + 1 != v25)
          {
            do
            {
              uint64_t v27 = *v26;
              if (*((void *)*v21 + 12) != *(void *)(*v26 + 96))
              {
                uint64_t *v26 = 0;
                uint64_t v28 = *v24;
                *uint64_t v24 = v27;
                if (v28) {
                  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
                }
                ++v24;
              }
              ++v26;
            }
            while (v26 != v25);
            uint64_t v25 = (uint64_t *)*((void *)this + 8);
          }
        }
      }
LABEL_33:
      std::vector<std::unique_ptr<as::server::ObjectDescription>>::erase((uint64_t)this + 56, v24, v25);
      id v29 = (as::server::ChangedObject **)*((void *)this + 13);
      long long v30 = (as::server::ChangedObject **)*((void *)this + 14);
      if (v29 != v30)
      {
        while (1)
        {
          uint64_t v31 = *((void *)*v21 + 12);
          if (v31 == *(void *)(as::server::ChangedObject::objectDescription(*v29) + 96)) {
            break;
          }
          if (++v29 == v30)
          {
            id v29 = v30;
            goto LABEL_45;
          }
        }
        if (v29 != v30)
        {
          for (uint64_t i = v29 + 1; i != v30; ++i)
          {
            uint64_t v33 = *((void *)*v21 + 12);
            if (v33 != *(void *)(as::server::ChangedObject::objectDescription(*i) + 96))
            {
              long long v34 = *i;
              *uint64_t i = 0;
              int v35 = *v29;
              *id v29 = v34;
              if (v35) {
                (*(void (**)(as::server::ChangedObject *))(*(void *)v35 + 8))(v35);
              }
              ++v29;
            }
          }
        }
      }
LABEL_45:
      std::vector<std::unique_ptr<as::server::ObjectDescription>>::erase((uint64_t)v90, (uint64_t *)v29, *((uint64_t **)this + 14));
      uint64_t v37 = (void *)*((void *)this + 11);
      unint64_t v36 = *((void *)this + 12);
      if ((unint64_t)v37 >= v36)
      {
        uint64_t v40 = ((uint64_t)v37 - *v23) >> 3;
        if ((unint64_t)(v40 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v41 = v36 - *v23;
        uint64_t v42 = v41 >> 2;
        if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
          uint64_t v42 = v40 + 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v42;
        }
        uint64_t v98 = (char *)this + 96;
        if (v43) {
          std::string v44 = (caulk::xstring **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 96, v43);
        }
        else {
          std::string v44 = 0;
        }
        std::string v45 = &v44[v40];
        int v94 = v44;
        unsigned int v95 = v45;
        v97 = &v44[v43];
        std::string v46 = *v21;
        char *v21 = 0;
        void *v45 = v46;
        unsigned int v96 = v45 + 1;
        std::vector<std::unique_ptr<as::server::ObjectDescription>>::__swap_out_circular_buffer((uint64_t *)this + 10, &v94);
        std::string::size_type v39 = (void *)*((void *)this + 11);
        std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer((void **)&v94);
      }
      else
      {
        long long v38 = *v21;
        char *v21 = 0;
        *uint64_t v37 = v38;
        std::string::size_type v39 = v37 + 1;
        *((void *)this + 11) = v39;
      }
      *((void *)this + 11) = v39;
      ++v21;
    }
    while (v21 != v22);
  }
  std::vector<std::unique_ptr<as::server::ObjectDescription>>::__clear[abi:ne180100]((void *)v89 + 10);
  uint64_t v47 = *((void *)this + 1);
  std::string v48 = (caulk::xstring *)*((void *)this + 2);
  std::string v49 = (caulk::xstring **)((char *)this + 8);
  unint64_t v50 = 126 - 2 * __clz(((uint64_t)v48 - v47) >> 4);
  if (v48 == (caulk::xstring *)v47) {
    uint64_t v51 = 0;
  }
  else {
    uint64_t v51 = v50;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,false>(v47, v48, (uint64_t)&v94, v51, 1);
  uint64_t v52 = *((void *)v89 + 1);
  std::string v53 = (caulk::xstring *)*((void *)v89 + 2);
  unint64_t v54 = 126 - 2 * __clz(((uint64_t)v53 - v52) >> 4);
  if (v53 == (caulk::xstring *)v52) {
    uint64_t v55 = 0;
  }
  else {
    uint64_t v55 = v54;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,false>(v52, v53, (uint64_t)&v94, v55, 1);
  v91 = 0;
  id v92 = 0;
  uint64_t v93 = 0;
  std::__set_union[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::back_insert_iterator<std::vector<caulk::xstring>>>(*v49, *((caulk::xstring **)v89 + 1), *((const caulk::xstring **)this + 2), *((const caulk::xstring **)v89 + 2), (uint64_t *)&v91, (caulk::xstring **)&v94);
  std::vector<caulk::xstring>::__base_destruct_at_end[abi:ne180100]((uint64_t)v89 + 8, *((caulk::xstring **)v89 + 1));
  if (v49 != &v91) {
    std::vector<caulk::xstring>::__assign_with_size[abi:ne180100]<caulk::xstring*,caulk::xstring*>((uint64_t)this + 8, v91, v92, (v92 - v91) >> 4);
  }
  int v94 = &v91;
  std::vector<caulk::xstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
  uint64_t v56 = (caulk::xstring **)*((void *)v89 + 4);
  id v57 = (caulk::xstring **)*((void *)v89 + 5);
  if (v56 != v57)
  {
    long long v58 = (void *)((char *)this + 32);
    int v59 = (void *)((char *)this + 48);
    __int16 v60 = (void *)*((void *)this + 5);
    do
    {
      uint64_t v61 = (void *)*v58;
      if ((void *)*v58 == v60) {
        goto LABEL_74;
      }
      while ((as::server::CustomPropertyAddress::operator==() & 1) == 0)
      {
        if (++v61 == v60)
        {
          uint64_t v61 = v60;
          goto LABEL_73;
        }
      }
      __int16 v60 = v61;
LABEL_73:
      __int16 v62 = (void *)*((void *)this + 5);
      if (v61 == v62)
      {
LABEL_74:
        if ((unint64_t)v60 >= *v59)
        {
          uint64_t v65 = ((uint64_t)v60 - *v58) >> 3;
          if ((unint64_t)(v65 + 1) >> 61) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v66 = *v59 - *v58;
          uint64_t v67 = v66 >> 2;
          if (v66 >> 2 <= (unint64_t)(v65 + 1)) {
            uint64_t v67 = v65 + 1;
          }
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v68 = v67;
          }
          uint64_t v98 = (char *)this + 48;
          if (v68) {
            uint64_t v69 = (caulk::xstring **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 48, v68);
          }
          else {
            uint64_t v69 = 0;
          }
          unsigned int v70 = &v69[v65];
          int v94 = v69;
          unsigned int v95 = v70;
          v97 = &v69[v68];
          char v71 = *v56;
          NSObject *v56 = 0;
          *unsigned int v70 = v71;
          unsigned int v96 = v70 + 1;
          std::vector<std::unique_ptr<as::server::CustomPropertyAddress>>::__swap_out_circular_buffer((uint64_t *)this + 4, &v94);
          __int16 v62 = (void *)*((void *)this + 5);
          std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer((void **)&v94);
        }
        else
        {
          uint64_t v63 = *v56;
          NSObject *v56 = 0;
          *__int16 v60 = v63;
          char v64 = v60 + 1;
          *((void *)this + 5) = v64;
          __int16 v62 = v64;
        }
        *((void *)this + 5) = v62;
      }
      ++v56;
      __int16 v60 = v62;
    }
    while (v56 != v57);
  }
  std::vector<std::unique_ptr<as::server::ObjectDescription>>::__clear[abi:ne180100]((void *)v89 + 4);
  unsigned int v72 = (as::server::ChangedObject **)*((void *)v89 + 13);
  uint64_t v73 = (as::server::ChangedObject **)*((void *)v89 + 14);
  if (v72 != v73)
  {
    int v74 = (void *)((char *)this + 120);
    while (1)
    {
      int v75 = (as::server::ChangedObject **)*((void *)this + 13);
      int v76 = (as::server::ChangedObject **)*((void *)this + 14);
      if (v75 == v76) {
        goto LABEL_97;
      }
      while (1)
      {
        uint64_t v77 = *(void *)(as::server::ChangedObject::objectDescription(*v72) + 96);
        if (v77 == *(void *)(as::server::ChangedObject::objectDescription(*v75) + 96)) {
          break;
        }
        if (++v75 == v76)
        {
          int v75 = v76;
          break;
        }
      }
      if (v75 == *((as::server::ChangedObject ***)this + 14)) {
        break;
      }
LABEL_110:
      if (++v72 == v73) {
        goto LABEL_111;
      }
    }
    int v75 = (as::server::ChangedObject **)*((void *)this + 14);
LABEL_97:
    if ((unint64_t)v75 >= *v74)
    {
      uint64_t v81 = ((uint64_t)v75 - *v90) >> 3;
      if ((unint64_t)(v81 + 1) >> 61) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v82 = *v74 - *v90;
      uint64_t v83 = v82 >> 2;
      if (v82 >> 2 <= (unint64_t)(v81 + 1)) {
        uint64_t v83 = v81 + 1;
      }
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v84 = v83;
      }
      uint64_t v98 = (char *)this + 120;
      if (v84) {
        uint64_t v85 = (caulk::xstring **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 120, v84);
      }
      else {
        uint64_t v85 = 0;
      }
      uint64_t v86 = &v85[v81];
      int v94 = v85;
      unsigned int v95 = v86;
      v97 = &v85[v84];
      uint64_t v87 = *v72;
      *unsigned int v72 = 0;
      CFTypeRef *v86 = v87;
      unsigned int v96 = v86 + 1;
      std::vector<std::unique_ptr<as::server::ChangedObject>>::__swap_out_circular_buffer(v90, &v94);
      std::string::size_type v80 = (as::server::ChangedObject **)*((void *)this + 14);
      std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer((void **)&v94);
    }
    else
    {
      int v79 = *v72;
      *unsigned int v72 = 0;
      *int v75 = v79;
      std::string::size_type v80 = v75 + 1;
      *((void *)this + 14) = v80;
    }
    *((void *)this + 14) = v80;
    goto LABEL_110;
  }
LABEL_111:
  std::vector<std::unique_ptr<as::server::ObjectDescription>>::__clear[abi:ne180100]((void *)v89 + 13);
  as::server::ChangedObject::objectDescription(v89);
  as::server::ChangedObject::mutableObjectDescription(this);
  return as::server::ObjectDescription::operator=();
}

void sub_1CFE5FDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::vector<caulk::xstring>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<as::server::ObjectDescription>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    std::string v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::ObjectDescription>>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::ObjectDescription>>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::ObjectDescription>>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::ObjectDescription>>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    os_unfair_lock_s *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *std::vector<std::unique_ptr<as::server::ObjectDescription>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  int v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *int v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t *std::vector<std::unique_ptr<as::server::ObjectDescription>>::erase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<as::server::ObjectDescription> *,std::unique_ptr<as::server::ObjectDescription> *,std::unique_ptr<as::server::ObjectDescription> *,0>(a3, *(uint64_t **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void **)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v9 = *--v7;
        uint64_t v8 = v9;
        void *v7 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<as::server::ObjectDescription> *,std::unique_ptr<as::server::ObjectDescription> *,std::unique_ptr<as::server::ObjectDescription> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      uint64_t v7 = *a3;
      *a3 = v6;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,false>(uint64_t result, caulk::xstring *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  int v21 = a2;
  int v22 = (caulk::xstring *)result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (uint64_t)v9 - v10;
    unint64_t v13 = ((uint64_t)v9 - v10) >> 4;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = caulk::xstring::compare((caulk::xstring *)((char *)v9 - 16), (const caulk::xstring *)v10);
          if ((result & 0x80000000) != 0) {
            uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)v10, (caulk::xstring *)(v10 + 16), (caulk::xstring *)((char *)v9 - 16));
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)v10, (caulk::xstring *)(v10 + 16), (caulk::xstring *)(v10 + 32), (caulk::xstring *)((char *)v9 - 16));
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)v10, (caulk::xstring *)(v10 + 16), (caulk::xstring *)(v10 + 32), (caulk::xstring *)(v10 + 48), (caulk::xstring *)((char *)v9 - 16));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 383)
    {
      if (a5) {
        return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v10, (uint64_t)v9);
      }
      else {
        return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v10, v9);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    long long v15 = (caulk::xstring *)((char *)v9 - 16);
    if ((unint64_t)v12 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)v10, (caulk::xstring *)(v10 + 16 * (v13 >> 1)), v15);
      uint64_t v16 = 16 * v14 - 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)((char *)v22 + 16), (caulk::xstring *)((char *)v22 + v16), (const caulk::xstring *)((char *)v21 - 32));
      uint64_t v17 = 16 * v14 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)((char *)v22 + 32), (caulk::xstring *)((char *)v22 + v17), (const caulk::xstring *)((char *)v21 - 48));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)((char *)v22 + v16), (caulk::xstring *)((char *)v22 + 16 * v14), (caulk::xstring *)((char *)v22 + v17));
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *>();
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)(v10 + 16 * (v13 >> 1)), (caulk::xstring *)v10, v15);
      if (a5)
      {
LABEL_13:
        uint64_t v9 = v21;
        goto LABEL_14;
      }
    }
    uint64_t v9 = v21;
    if ((caulk::xstring::compare((caulk::xstring *)((char *)v22 - 16), v22) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,caulk::xstring *,std::__less<void,void> &>(v22, v21);
      uint64_t v10 = result;
LABEL_22:
      a5 = 0;
      int v22 = (caulk::xstring *)v10;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    uint64_t v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,caulk::xstring *,std::__less<void,void> &>(v22, v9);
    if ((v19 & 1) == 0) {
      goto LABEL_21;
    }
    BOOL v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v22, (caulk::xstring *)v18);
    uint64_t v10 = (uint64_t)(v18 + 16);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)(v18 + 16), v9);
    if (result)
    {
      if (v20) {
        return result;
      }
      int v21 = (const caulk::xstring *)v18;
      uint64_t v10 = (uint64_t)v22;
      uint64_t v9 = (caulk::xstring *)v18;
    }
    else
    {
      if (!v20)
      {
LABEL_21:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,false>(v22, v18, a3, -i, a5 & 1);
        uint64_t v10 = (uint64_t)(v18 + 16);
        goto LABEL_22;
      }
      int v22 = (caulk::xstring *)(v18 + 16);
    }
  }
  if ((caulk::xstring *)v10 != v9) {
    return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,caulk::xstring *>((caulk::xstring *)v10, v9, v9, a3);
  }
  return result;
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>()
{
  v1[0] = 0;
  v1[1] = 0;
  caulk::xstring::move();
  caulk::xstring::move();
  caulk::xstring::move();
  return caulk::xstring::clear((caulk::xstring *)v1);
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (caulk::xstring *)(result + 16);
    if (result + 16 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = result;
      do
      {
        uint64_t v7 = (const caulk::xstring *)v6;
        uint64_t v6 = (uint64_t)v4;
        uint64_t result = caulk::xstring::compare(v4, v7);
        if ((result & 0x80000000) != 0)
        {
          v10[0] = 0;
          v10[1] = 0;
          caulk::xstring::move();
          uint64_t v8 = v5;
          do
          {
            caulk::xstring::move();
            if (!v8) {
              break;
            }
            int v9 = caulk::xstring::compare((caulk::xstring *)v10, (const caulk::xstring *)(v3 + v8 - 16));
            v8 -= 16;
          }
          while (v9 < 0);
          caulk::xstring::move();
          uint64_t result = caulk::xstring::clear((caulk::xstring *)v10);
        }
        uint64_t v4 = (caulk::xstring *)(v6 + 16);
        v5 += 16;
      }
      while (v6 + 16 != a2);
    }
  }
  return result;
}

void sub_1CFE6065C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(uint64_t result, caulk::xstring *a2)
{
  if ((caulk::xstring *)result != a2)
  {
    uint64_t v3 = (const caulk::xstring *)result;
    uint64_t v4 = (caulk::xstring *)(result + 16);
    while (v4 != a2)
    {
      uint64_t v5 = v4;
      uint64_t result = caulk::xstring::compare(v4, v3);
      if ((result & 0x80000000) != 0)
      {
        v6[0] = 0;
        v6[1] = 0;
        caulk::xstring::move();
        do
        {
          caulk::xstring::move();
          uint64_t v3 = (const caulk::xstring *)((char *)v3 - 16);
        }
        while ((caulk::xstring::compare((caulk::xstring *)v6, v3) & 0x80000000) != 0);
        caulk::xstring::move();
        uint64_t result = caulk::xstring::clear((caulk::xstring *)v6);
      }
      uint64_t v4 = (caulk::xstring *)((char *)v5 + 16);
      uint64_t v3 = v5;
    }
  }
  return result;
}

void sub_1CFE60730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(caulk::xstring *a1, caulk::xstring *this, caulk::xstring *a3)
{
  int v5 = caulk::xstring::compare(this, a1);
  int v6 = caulk::xstring::compare(a3, this);
  if (v5 < 0)
  {
    if (v6 < 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      if ((caulk::xstring::compare(a3, this) & 0x80000000) != 0)
      {
LABEL_8:
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
        return 2;
      }
    }
  }
  else
  {
    if ((v6 & 0x80000000) == 0) {
      return 0;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
    if ((caulk::xstring::compare(this, a1) & 0x80000000) != 0) {
      goto LABEL_8;
    }
  }
  return 1;
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *>()
{
  v1[0] = 0;
  v1[1] = 0;
  caulk::xstring::move();
  caulk::xstring::move();
  caulk::xstring::move();
  return caulk::xstring::clear((caulk::xstring *)v1);
}

const caulk::xstring *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,caulk::xstring *,std::__less<void,void> &>(const caulk::xstring *a1, const caulk::xstring *a2)
{
  uint64_t v11 = a2;
  uint64_t v12 = a1;
  v10[0] = 0;
  v10[1] = 0;
  caulk::xstring::move();
  if ((caulk::xstring::compare((caulk::xstring *)v10, (const caulk::xstring *)((char *)a2 - 16)) & 0x80000000) != 0)
  {
    int v5 = a1;
    do
    {
      int v5 = (const caulk::xstring *)((char *)v5 + 16);
      uint64_t v12 = v5;
    }
    while ((caulk::xstring::compare((caulk::xstring *)v10, v5) & 0x80000000) == 0);
  }
  else
  {
    uint64_t v4 = (const caulk::xstring *)((char *)a1 + 16);
    do
    {
      int v5 = v4;
      uint64_t v12 = v4;
      if (v4 >= v11) {
        break;
      }
      int v6 = caulk::xstring::compare((caulk::xstring *)v10, v4);
      uint64_t v4 = (const caulk::xstring *)((char *)v5 + 16);
    }
    while ((v6 & 0x80000000) == 0);
  }
  uint64_t v7 = v11;
  if (v5 < v11)
  {
    do
    {
      uint64_t v7 = (const caulk::xstring *)((char *)v7 - 16);
      uint64_t v11 = v7;
    }
    while ((caulk::xstring::compare((caulk::xstring *)v10, v7) & 0x80000000) != 0);
    int v5 = v12;
  }
  if (v5 < v7)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      do
        uint64_t v12 = (const caulk::xstring *)((char *)v12 + 16);
      while ((caulk::xstring::compare((caulk::xstring *)v10, v12) & 0x80000000) == 0);
      do
        uint64_t v11 = (const caulk::xstring *)((char *)v11 - 16);
      while ((caulk::xstring::compare((caulk::xstring *)v10, v11) & 0x80000000) != 0);
      int v5 = v12;
    }
    while (v12 < v11);
  }
  if ((const caulk::xstring *)((char *)v5 - 16) != a1) {
    caulk::xstring::move();
  }
  caulk::xstring::move();
  uint64_t v8 = v12;
  caulk::xstring::clear((caulk::xstring *)v10);
  return v8;
}

void sub_1CFE609E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,caulk::xstring *,std::__less<void,void> &>(caulk::xstring *a1, caulk::xstring *a2)
{
  uint64_t v12 = a2;
  unint64_t v13 = a1;
  v11[0] = 0;
  v11[1] = 0;
  caulk::xstring::move();
  uint64_t v3 = 0;
  do
  {
    unint64_t v13 = (caulk::xstring *)((char *)a1 + v3 + 16);
    v3 += 16;
  }
  while ((caulk::xstring::compare(v13, (const caulk::xstring *)v11) & 0x80000000) != 0);
  uint64_t v4 = v12;
  if (v3 == 16)
  {
    uint64_t v7 = (caulk::xstring *)((char *)a1 + 16);
    do
    {
      if (v7 >= v4) {
        break;
      }
      uint64_t v4 = (caulk::xstring *)((char *)v4 - 16);
      uint64_t v12 = v4;
    }
    while ((caulk::xstring::compare(v4, (const caulk::xstring *)v11) & 0x80000000) == 0);
  }
  else
  {
    int v5 = (caulk::xstring *)((char *)v12 - 16);
    do
    {
      uint64_t v12 = v5;
      int v6 = caulk::xstring::compare(v5, (const caulk::xstring *)v11);
      int v5 = (caulk::xstring *)((char *)v5 - 16);
    }
    while ((v6 & 0x80000000) == 0);
    uint64_t v7 = v13;
  }
  uint64_t v8 = v7;
  if (v7 < v12)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      do
        unint64_t v13 = (caulk::xstring *)((char *)v13 + 16);
      while ((caulk::xstring::compare(v13, (const caulk::xstring *)v11) & 0x80000000) != 0);
      do
        uint64_t v12 = (caulk::xstring *)((char *)v12 - 16);
      while ((caulk::xstring::compare(v12, (const caulk::xstring *)v11) & 0x80000000) == 0);
      uint64_t v8 = v13;
    }
    while (v13 < v12);
  }
  int v9 = (char *)v8 - 16;
  if ((caulk::xstring *)((char *)v8 - 16) != a1) {
    caulk::xstring::move();
  }
  caulk::xstring::move();
  caulk::xstring::clear((caulk::xstring *)v11);
  return v9;
}

void sub_1CFE60B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(caulk::xstring *a1, caulk::xstring *a2)
{
  uint64_t v12 = a2;
  unint64_t v13 = a1;
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v12 = (caulk::xstring *)((char *)a2 - 16);
      if ((caulk::xstring::compare((caulk::xstring *)((char *)a2 - 16), a1) & 0x80000000) != 0) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, (caulk::xstring *)((char *)a1 + 16), (caulk::xstring *)((char *)a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, (caulk::xstring *)((char *)a1 + 16), (caulk::xstring *)((char *)a1 + 32), (caulk::xstring *)((char *)a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, (caulk::xstring *)((char *)a1 + 16), (caulk::xstring *)((char *)a1 + 32), (caulk::xstring *)((char *)a1 + 48), (caulk::xstring *)((char *)a2 - 16));
      return 1;
    default:
      int v6 = (caulk::xstring *)((char *)a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, (caulk::xstring *)((char *)a1 + 16), (caulk::xstring *)((char *)a1 + 32));
      uint64_t v7 = (caulk::xstring *)((char *)a1 + 48);
      if (v7 == a2) {
        return 1;
      }
      int v8 = 0;
      break;
  }
  while ((caulk::xstring::compare(v7, v6) & 0x80000000) == 0)
  {
    int v9 = v12;
LABEL_12:
    int v6 = v7;
    uint64_t v7 = (caulk::xstring *)((char *)v7 + 16);
    if (v7 == v9) {
      return 1;
    }
  }
  v11[0] = 0;
  v11[1] = 0;
  caulk::xstring::move();
  do
  {
    uint64_t v10 = v6;
    caulk::xstring::move();
    if (v6 == v13) {
      break;
    }
    int v6 = (const caulk::xstring *)((char *)v6 - 16);
  }
  while ((caulk::xstring::compare((caulk::xstring *)v11, (const caulk::xstring *)((char *)v10 - 16)) & 0x80000000) != 0);
  caulk::xstring::move();
  int v9 = v12;
  caulk::xstring::clear((caulk::xstring *)v11);
  if (++v8 != 8) {
    goto LABEL_12;
  }
  return (caulk::xstring *)((char *)v7 + 16) == v9;
}

void sub_1CFE60D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(caulk::xstring *a1, caulk::xstring *a2, caulk::xstring *a3, caulk::xstring *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, a2, a3);
  uint64_t result = caulk::xstring::compare(a4, a3);
  if ((result & 0x80000000) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
    uint64_t result = caulk::xstring::compare(a3, a2);
    if ((result & 0x80000000) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      uint64_t result = caulk::xstring::compare(a2, a1);
      if ((result & 0x80000000) != 0) {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(caulk::xstring *a1, caulk::xstring *a2, caulk::xstring *a3, caulk::xstring *a4, caulk::xstring *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, a2, a3, a4);
  uint64_t result = caulk::xstring::compare(a5, a4);
  if ((result & 0x80000000) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
    uint64_t result = caulk::xstring::compare(a4, a3);
    if ((result & 0x80000000) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      uint64_t result = caulk::xstring::compare(a3, a2);
      if ((result & 0x80000000) != 0)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
        uint64_t result = caulk::xstring::compare(a2, a1);
        if ((result & 0x80000000) != 0) {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
        }
      }
    }
  }
  return result;
}

caulk::xstring *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,caulk::xstring *>(caulk::xstring *a1, caulk::xstring *this, caulk::xstring *a3, uint64_t a4)
{
  if (a1 != this)
  {
    int v6 = this;
    uint64_t v7 = (uint64_t)a1;
    uint64_t v8 = this - a1;
    uint64_t v9 = (this - a1) >> 4;
    if (this - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (caulk::xstring *)((char *)a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v7, a4, v9, v12);
        uint64_t v12 = (caulk::xstring *)((char *)v12 - 16);
        --v11;
      }
      while (v11);
    }
    uint64_t v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      unint64_t v13 = v6;
      do
      {
        if ((caulk::xstring::compare(v13, a1) & 0x80000000) != 0)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((uint64_t)a1, a4, v9, a1);
        }
        unint64_t v13 = (caulk::xstring *)((char *)v17 + 16);
        uint64_t v17 = v13;
      }
      while (v13 != a3);
      uint64_t v7 = (uint64_t)a1;
      uint64_t v8 = v6 - a1;
    }
    if (v8 >= 17)
    {
      unint64_t v14 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,caulk::xstring *>(v7, (uint64_t)v6, a4, v14);
        int v6 = (caulk::xstring *)((char *)v6 - 16);
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(uint64_t result, int a2, uint64_t a3, caulk::xstring *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v9 = ((uint64_t)a4 - result) >> 3;
      uint64_t v10 = v9 + 1;
      uint64_t v11 = result + 16 * (v9 + 1);
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3
        && (int)caulk::xstring::compare((caulk::xstring *)(result + 16 * (v9 + 1)), (const caulk::xstring *)(v11 + 16)) < 0)
      {
        v11 += 16;
        uint64_t v10 = v12;
      }
      uint64_t result = caulk::xstring::compare((caulk::xstring *)v11, a4);
      if ((result & 0x80000000) == 0)
      {
        v15[0] = 0;
        v15[1] = 0;
        caulk::xstring::move();
        do
        {
          caulk::xstring::move();
          if (v7 < v10) {
            break;
          }
          uint64_t v13 = (2 * v10) | 1;
          uint64_t v14 = v6 + 16 * v13;
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v13;
          }
          else if ((int)caulk::xstring::compare((caulk::xstring *)(v6 + 16 * v13), (const caulk::xstring *)(v14 + 16)) >= 0)
          {
            uint64_t v10 = v13;
          }
          else
          {
            v14 += 16;
          }
        }
        while ((caulk::xstring::compare((caulk::xstring *)v14, (const caulk::xstring *)v15) & 0x80000000) == 0);
        caulk::xstring::move();
        return caulk::xstring::clear((caulk::xstring *)v15);
      }
    }
  }
  return result;
}

void sub_1CFE61164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,caulk::xstring *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    v9[0] = 0;
    v9[1] = 0;
    caulk::xstring::move();
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v7, a3, a4);
    caulk::xstring::move();
    if (v8 != a2 - 16)
    {
      caulk::xstring::move();
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v7, v8 + 16, a3, (v8 + 16 - v7) >> 4);
    }
    return caulk::xstring::clear((caulk::xstring *)v9);
  }
  return result;
}

void sub_1CFE6124C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1 + 16 * v5 + 16;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 < a3 && (int)caulk::xstring::compare((caulk::xstring *)v8, (const caulk::xstring *)(v8 + 16)) < 0)
    {
      v8 += 16;
      uint64_t v5 = v10;
    }
    caulk::xstring::move();
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t result = caulk::xstring::compare((caulk::xstring *)(result + 16 * (v4 >> 1)), (const caulk::xstring *)(a2 - 16));
    if ((result & 0x80000000) != 0)
    {
      v7[0] = 0;
      v7[1] = 0;
      caulk::xstring::move();
      do
      {
        caulk::xstring::move();
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
      }
      while ((caulk::xstring::compare((caulk::xstring *)(v5 + 16 * v6), (const caulk::xstring *)v7) & 0x80000000) != 0);
      caulk::xstring::move();
      return caulk::xstring::clear((caulk::xstring *)v7);
    }
  }
  return result;
}

void sub_1CFE613D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const caulk::xstring *std::__set_union[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::back_insert_iterator<std::vector<caulk::xstring>>>@<X0>(caulk::xstring *a1@<X0>, caulk::xstring *this@<X2>, const caulk::xstring *a3@<X1>, const caulk::xstring *a4@<X3>, uint64_t *a5@<X4>, caulk::xstring **a6@<X8>)
{
  uint64_t v8 = a1;
  uint64_t v13 = a5;
  if (a1 == a3)
  {
LABEL_8:
    uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::back_insert_iterator<std::vector<caulk::xstring>>,0>(this, a4, a5);
    a4 = result;
  }
  else
  {
    while (this != a4)
    {
      if ((caulk::xstring::compare(this, v8) & 0x80000000) != 0)
      {
        std::back_insert_iterator<std::vector<caulk::xstring>>::operator=[abi:ne180100](&v13, this);
        this = (caulk::xstring *)((char *)this + 16);
      }
      else
      {
        this = (caulk::xstring *)((char *)this + 16 * ((int)caulk::xstring::compare(v8, this) >= 0));
        std::back_insert_iterator<std::vector<caulk::xstring>>::operator=[abi:ne180100](&v13, v8);
        uint64_t v8 = (caulk::xstring *)((char *)v8 + 16);
      }
      if (v8 == a3)
      {
        a5 = v13;
        uint64_t v8 = a3;
        goto LABEL_8;
      }
    }
    uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::back_insert_iterator<std::vector<caulk::xstring>>,0>(v8, a3, v13);
    uint64_t v8 = result;
  }
  *a6 = v8;
  a6[1] = a4;
  a6[2] = v12;
  return result;
}

uint64_t **std::back_insert_iterator<std::vector<caulk::xstring>>::operator=[abi:ne180100](uint64_t **a1, const caulk::xstring *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (caulk::xstring *)(*a1)[1];
  if ((unint64_t)v4 >= (*a1)[2])
  {
    uint64_t v5 = std::vector<caulk::xstring>::__push_back_slow_path<caulk::xstring const&>(*a1, a2);
  }
  else
  {
    *(void *)unint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    caulk::xstring::assign(v4, a2);
    uint64_t v5 = (uint64_t)v4 + 16;
    v3[1] = (uint64_t)v4 + 16;
  }
  v3[1] = v5;
  return a1;
}

void sub_1CFE6153C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

const caulk::xstring *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::back_insert_iterator<std::vector<caulk::xstring>>,0>(const caulk::xstring *a1, const caulk::xstring *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  unint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<caulk::xstring>>::operator=[abi:ne180100](&v6, v3);
    uint64_t v3 = (const caulk::xstring *)((char *)v3 + 16);
  }
  while (v3 != v4);
  return v4;
}

uint64_t std::vector<caulk::xstring>::__push_back_slow_path<caulk::xstring const&>(uint64_t *a1, const caulk::xstring *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (caulk::xstring *)&v10[16 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[16 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  caulk::xstring::assign(v11, a2);
  long long v15 = (caulk::xstring *)((char *)v15 + 16);
  std::vector<caulk::xstring>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<caulk::xstring>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1CFE61680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<caulk::xstring>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<caulk::xstring>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>,std::reverse_iterator<caulk::xstring*>,std::reverse_iterator<caulk::xstring*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>,std::reverse_iterator<caulk::xstring*>,std::reverse_iterator<caulk::xstring*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 16;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      caulk::xstring::move();
      uint64_t v7 = *((void *)&v15 + 1) - 16;
      *((void *)&v15 + 1) -= 16;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

caulk::xstring *std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<caulk::xstring>,std::reverse_iterator<std::reverse_iterator<caulk::xstring*>>,std::reverse_iterator<std::reverse_iterator<caulk::xstring*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

caulk::xstring *std::__allocator_destroy[abi:ne180100]<std::allocator<caulk::xstring>,std::reverse_iterator<std::reverse_iterator<caulk::xstring*>>,std::reverse_iterator<std::reverse_iterator<caulk::xstring*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(caulk::xstring **)(a2 + 32); result != *(caulk::xstring **)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    caulk::xstring::clear(result);
    uint64_t result = (caulk::xstring *)(*(void *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t std::__split_buffer<caulk::xstring>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<caulk::xstring>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(v3 + 16) = v4 - 16;
    uint64_t result = caulk::xstring::clear((caulk::xstring *)(v4 - 16));
  }
  return result;
}

uint64_t std::vector<caulk::xstring>::__base_destruct_at_end[abi:ne180100](uint64_t result, caulk::xstring *a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(caulk::xstring **)(result + 8); i != a2; result = caulk::xstring::clear(i))
    uint64_t i = (caulk::xstring *)((char *)i - 16);
  *(void *)(v3 + 8) = a2;
  return result;
}

caulk::xstring *std::vector<caulk::xstring>::__assign_with_size[abi:ne180100]<caulk::xstring*,caulk::xstring*>(uint64_t a1, caulk::xstring *a2, caulk::xstring *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(caulk::xstring **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<caulk::xstring>::__vdeallocate(a1);
    if (a4 >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<caulk::xstring>,caulk::xstring*,caulk::xstring*,caulk::xstring*>(v8, v6, a3, *(caulk::xstring **)(a1 + 8));
LABEL_15:
    *(void *)(a1 + 8) = result;
    return result;
  }
  long long v14 = *(caulk::xstring **)(a1 + 8);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 < a4)
  {
    uint64_t v16 = (caulk::xstring *)((char *)a2 + 16 * v15);
    if (v14 != v9)
    {
      uint64_t v17 = 16 * v15;
      do
      {
        caulk::xstring::assign(v9, v6);
        uint64_t v6 = (caulk::xstring *)((char *)v6 + 16);
        uint64_t v9 = (caulk::xstring *)((char *)v9 + 16);
        v17 -= 16;
      }
      while (v17);
      uint64_t v9 = *(caulk::xstring **)(a1 + 8);
    }
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<caulk::xstring>,caulk::xstring*,caulk::xstring*,caulk::xstring*>(v8, v16, a3, v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    uint64_t v18 = *(caulk::xstring **)a1;
  }
  else
  {
    uint64_t v18 = *(caulk::xstring **)a1;
    do
    {
      caulk::xstring::assign(v9, v6);
      uint64_t v6 = (caulk::xstring *)((char *)v6 + 16);
      uint64_t v9 = (caulk::xstring *)((char *)v9 + 16);
      uint64_t v18 = (caulk::xstring *)((char *)v18 + 16);
    }
    while (v6 != a3);
  }
  return (caulk::xstring *)std::vector<caulk::xstring>::__base_destruct_at_end[abi:ne180100](a1, v18);
}

void sub_1CFE61B0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<caulk::xstring>::__vdeallocate(uint64_t a1)
{
  if (*(void *)a1)
  {
    std::vector<caulk::xstring>::__base_destruct_at_end[abi:ne180100](a1, *(caulk::xstring **)a1);
    operator delete(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

caulk::xstring *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<caulk::xstring>,caulk::xstring*,caulk::xstring*,caulk::xstring*>(uint64_t a1, caulk::xstring *a2, caulk::xstring *a3, caulk::xstring *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      caulk::xstring::assign(v4, v6);
      uint64_t v6 = (const caulk::xstring *)((char *)v6 + 16);
      uint64_t v4 = (caulk::xstring *)((char *)v11 + 16);
      uint64_t v11 = (caulk::xstring *)((char *)v11 + 16);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,caulk::xstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1CFE61BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,caulk::xstring*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,caulk::xstring*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,caulk::xstring*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = **(caulk::xstring ***)(result + 16);
  uint64_t v2 = **(caulk::xstring ***)(result + 8);
  while (v1 != v2)
  {
    uint64_t v1 = (caulk::xstring *)((char *)v1 - 16);
    uint64_t result = caulk::xstring::clear(v1);
  }
  return result;
}

void std::vector<caulk::xstring>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (caulk::xstring **)*a1;
  if (*v2)
  {
    std::vector<caulk::xstring>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<std::unique_ptr<as::server::CustomPropertyAddress>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<as::server::CustomPropertyAddress>>,std::reverse_iterator<std::unique_ptr<as::server::CustomPropertyAddress>*>,std::reverse_iterator<std::unique_ptr<as::server::CustomPropertyAddress>*>,std::reverse_iterator<std::unique_ptr<as::server::CustomPropertyAddress>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<as::server::CustomPropertyAddress>>,std::reverse_iterator<std::unique_ptr<as::server::CustomPropertyAddress>*>,std::reverse_iterator<std::unique_ptr<as::server::CustomPropertyAddress>*>,std::reverse_iterator<std::unique_ptr<as::server::CustomPropertyAddress>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::CustomPropertyAddress>>,std::reverse_iterator<std::unique_ptr<as::server::CustomPropertyAddress>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::CustomPropertyAddress>>,std::reverse_iterator<std::unique_ptr<as::server::CustomPropertyAddress>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::ObjectDescription>>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

uint64_t std::vector<std::unique_ptr<as::server::ChangedObject>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ChangedObject>>,std::reverse_iterator<std::unique_ptr<as::server::ChangedObject>*>,std::reverse_iterator<std::unique_ptr<as::server::ChangedObject>*>,std::reverse_iterator<std::unique_ptr<as::server::ChangedObject>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ChangedObject>>,std::reverse_iterator<std::unique_ptr<as::server::ChangedObject>*>,std::reverse_iterator<std::unique_ptr<as::server::ChangedObject>*>,std::reverse_iterator<std::unique_ptr<as::server::ChangedObject>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::ChangedObject>>,std::reverse_iterator<std::unique_ptr<as::server::ChangedObject>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::ChangedObject>>,std::reverse_iterator<std::unique_ptr<as::server::ChangedObject>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::ObjectDescription>>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

uint64_t std::vector<std::unique_ptr<as::server::SessionUpdateSummary>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>,std::reverse_iterator<std::unique_ptr<as::server::SessionUpdateSummary>*>,std::reverse_iterator<std::unique_ptr<as::server::SessionUpdateSummary>*>,std::reverse_iterator<std::unique_ptr<as::server::SessionUpdateSummary>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>,std::reverse_iterator<std::unique_ptr<as::server::SessionUpdateSummary>*>,std::reverse_iterator<std::unique_ptr<as::server::SessionUpdateSummary>*>,std::reverse_iterator<std::unique_ptr<as::server::SessionUpdateSummary>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>,std::reverse_iterator<std::unique_ptr<as::server::SessionUpdateSummary>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>,std::reverse_iterator<std::unique_ptr<as::server::SessionUpdateSummary>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<as::server::ObjectDescription>>,std::reverse_iterator<std::unique_ptr<as::server::ObjectDescription>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void as::server::ConfigChangeSummary::~ConfigChangeSummary(as::server::ConfigChangeSummary *this)
{
  *(void *)this = MEMORY[0x1E4F4EA28] + 16;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<as::server::SessionUpdateSummary>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

void std::vector<std::unique_ptr<as::server::SessionUpdateSummary>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<as::server::ObjectDescription>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<as::RouteIdentifier>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = as::RouteIdentifier::RouteIdentifier();
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<as::RouteIdentifier>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<as::RouteIdentifier>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<unsigned int,NSDictionary * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void as::server::ControlValue::~ControlValue(as::server::ControlValue *this)
{
  *(void *)this = MEMORY[0x1E4F4EA20] + 16;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,as::server::ControlValue *,as::server::ControlValue *,as::server::ControlValue *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      as::server::ControlValue::operator=();
      v4 += 80;
      a3 += 80;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::vector<as::server::ControlValue>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 80;
    uint64_t result = as::server::ControlValue::ControlValue();
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::ControlValue>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

uint64_t std::__split_buffer<as::server::ControlValue>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 80);
    *(void *)(a1 + 16) = i - 80;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void as::server::DeferredMessageState::~DeferredMessageState(as::server::DeferredMessageState *this)
{
  uint64_t v6 = (void **)((char *)this + 216);
  std::vector<as::server::ControlValue>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  uint64_t v6 = (void **)((char *)this + 168);
  std::vector<std::pair<unsigned int,NSDictionary * {__strong}>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 15);
  if (v4)
  {
    *((void *)this + 16) = v4;
    operator delete(v4);
  }
  uint64_t v6 = (void **)((char *)this + 96);
  std::vector<as::RouteIdentifier>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((unsigned char *)this + 88)) {
    as::server::ConfigChangeSummary::~ConfigChangeSummary((as::server::DeferredMessageState *)((char *)this + 48));
  }
  uint64_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
}

void std::vector<as::server::ControlValue>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 80;
      uint64_t v7 = v4 - 80;
      uint64_t v8 = v4 - 80;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 80;
        (*v9)(v7);
        v6 -= 80;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<unsigned int,NSDictionary * {__strong}>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 2;

        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<as::RouteIdentifier>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      uint64_t v7 = v4 - 32;
      uint64_t v8 = v4 - 32;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 32;
        (*v9)(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t CACFDictionary::AddSInt32(CFMutableDictionaryRef *this, const __CFString *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v8 = v5;
  char v9 = 1;
  if (*((unsigned char *)this + 9))
  {
    uint64_t v6 = 0;
    if (v5 && *this)
    {
      CFDictionarySetValue(*this, a2, v5);
      uint64_t v6 = 1;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  CACFNumber::~CACFNumber((CACFNumber *)&v8);
  return v6;
}

void sub_1CFE62884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

void CACFNumber::~CACFNumber(CACFNumber *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

as::server::DeviceTimeObserver::SharedBlockOwner *as::server::DeviceTimeObserver::SharedBlockOwner::SharedBlockOwner(as::server::DeviceTimeObserver::SharedBlockOwner *this, as::server::DeviceTimeObserver *a2, uint64_t a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  uint64_t v4 = (caulk::ipc::mapped_memory *)MEMORY[0x1D25E14B0]((char *)this + 16, 0x10000, 90);
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  raw_ptr = (_DWORD *)caulk::ipc::mapped_memory::get_raw_ptr(v4, 0);
  _DWORD *raw_ptr = -1;
  uint64_t v6 = (uint64_t)(raw_ptr + 2);
  uint64_t v7 = 543;
  do
  {
    uint64_t v6 = caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::atomic_value(v6) + 104;
    --v7;
  }
  while (v7);
  CFNumberRef v8 = raw_ptr + 14120;
  uint64_t v9 = 66;
  do
  {
    *(unsigned char *)CFNumberRef v8 = 0;
    v8[1] = 0;
    void v8[2] = 0;
    v8[18] = 0;
    v8 += 34;
    --v9;
  }
  while (v9);
  return this;
}

void as::server::DeviceTimeObserver::SharedBlockOwner::~SharedBlockOwner(as::server::DeviceTimeObserver::SharedBlockOwner *this)
{
  uint64_t v1 = (as::server::DeviceTimeObserver::SharedBlockOwner *)((char *)this + 16);
  if (*((void *)this + 2) && *((void *)this + 3)) {
    caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((as::server::DeviceTimeObserver::SharedBlockOwner *)((char *)this + 16), 0);
  }
  caulk::ipc::mapped_memory::reset(v1);
}

uint64_t as::server::DeviceTimeObserver::SharedBlockOwner::deallocateDeviceSlot(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5 = caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((caulk::ipc::mapped_memory *)(a1 + 16), 0);
  if (a3 >= 0x42uLL) {
    std::__throw_out_of_range[abi:ne180100]("array::at");
  }
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  uint64_t result = caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::store(v5 + 136 * a3 + 56480, v7);
  *(void *)(a1 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8) + 40) &= ~(1 << a3);
  return result;
}

uint64_t as::server::DeviceTimeObserver::SharedBlockOwner::deallocateSessionSlot(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5 = caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((caulk::ipc::mapped_memory *)(a1 + 16), 0);
  if (a3 >= 0x21FuLL) {
    std::__throw_out_of_range[abi:ne180100]("array::at");
  }
  LOBYTE(v7) = -1;
  *((void *)&v7 + 1) = 0;
  char v8 = -1;
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t result = caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::store(v5 + 104 * a3 + 8, &v7);
  *(void *)(a1 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8) + 56) &= ~(1 << a3);
  return result;
}

void __destroy_helper_block_ea8_40c67_ZTSNSt3__110shared_ptrIN2as6server18DeviceTimeObserver8TimeInfoEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 5);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 96 * a2;
    while (v3 != v7)
    {
      v3 -= 96;
      std::__destroy_at[abi:ne180100]<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>,0>(v3);
    }
    a1[1] = v7;
  }
}

uint64_t std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::~pair(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v2 = (void *)(a1 + 88);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<as::server::DeviceLatencyPoll>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(void *)(a1 + 64)) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(void *)(a1 + 40)) {
    operator delete(*(void **)(a1 + 24));
  }
  unint64_t v6 = *(const void **)(a1 + 8);
  if (v6) {
    CFRelease(v6);
  }
  return a1;
}

void as::server::DeviceTimeObserver::DeviceInfo::~DeviceInfo(as::server::DeviceTimeObserver::DeviceInfo *this)
{
  uint64_t v4 = *((void *)this + 8);
  uint64_t v2 = (void *)((char *)this + 64);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<as::server::DeviceLatencyPoll>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  BOOL v5 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((void *)this + 5)) {
    operator delete(*((void **)this + 3));
  }
  if (*((void *)this + 2)) {
    operator delete(*(void **)this);
  }
}

BOOL as::server::DeviceTimeObserver::removeDevice(gsl::details *a1, CFTypeRef *a2, unint64_t a3)
{
  CFStringRef v5 = (const __CFString *)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFStringRef v25 = v5;
  uint64_t v6 = *((void *)a1 + 6);
  uint64_t v7 = *((void *)a1 + 7);
  if (v6 != v7)
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((CFTypeRef *)(v6 + 8), &v25))
    {
      v6 += 96;
      if (v6 == v7)
      {
        uint64_t v6 = v7;
        break;
      }
    }
    CFStringRef v5 = v25;
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v8 = *((void *)a1 + 7);
  if (v6 != v8)
  {
    as::server::DeviceTimeObserver::unmapDevice(a1, v6, a3);
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *((void *)a1 + 6)) >> 5);
    if (HIDWORD(v10)) {
      goto LABEL_26;
    }
    unint64_t v11 = v10 / 0x42uLL;
    if (v11 >= (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 7) {
      as::server::DeviceTimeObserver::removeDevice();
    }
    uint64_t v12 = v10 % 0x42;
    uint64_t v9 = (gsl::details *)(*(void *)a1 + (v11 << 7));
    unint64_t v13 = v12 + 66 * *((void *)v9 + 1);
    if (v13 >= 0x100)
    {
LABEL_26:
      uint64_t v17 = &unk_1F2687EB0;
      gsl::details::terminate(v9);
    }
    as::server::DeviceTimeObserver::SharedBlockOwner::deallocateDeviceSlot((uint64_t)v9, *(void *)a1 + (v11 << 7), v12);
    std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100]<true,0>((uint64_t)&v17);
    uint64_t v14 = *((void *)a1 + 6);
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 7) - v14) >> 5) <= v13) {
      std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
    }
    std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::operator=[abi:ne180100](v14 + 96 * v13, (uint64_t)&v17);
    uint64_t v15 = v24;
    uint64_t v24 = 0;
    if (v15) {
      std::default_delete<as::server::DeviceLatencyPoll>::operator()[abi:ne180100]((uint64_t)&v24, v15);
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v22) {
      operator delete(__p);
    }
    if (v20) {
      operator delete(v19);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v6 != v8;
}

void sub_1CFE62E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void as::server::DeviceTimeObserver::unmapDevice(gsl::details *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *((void *)a1 + 6)) >> 5);
  if (v3 >= 0x100)
  {
    __dst = &unk_1F2687EB0;
    gsl::details::terminate(a1);
  }
  uint64_t v7 = (const void **)(a2 + 24);
  boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::vector_alloc_holder<boost::container::new_allocator<unsigned int> const&,unsigned long>(&__dst, (const char *)(a2 + 24), *(void *)(a2 + 32));
  uint64_t v8 = *(void *)(a2 + 32);
  if (v8) {
    memmove(__dst, *v7, 4 * v8);
  }
  uint64_t v9 = *(const void **)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  if (!v9 && v10) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v16 = (uint64_t)v9 + 4 * v10;
  uint64_t v17 = v9;
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique<boost::container::vec_iterator<unsigned int *,false>>((uint64_t *)&__dst, &v17, &v16);
  unint64_t v11 = (unsigned int *)__dst;
  if (!__dst && v14) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v14)
  {
    uint64_t v12 = 4 * v14;
    do
    {
      if (!v11) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      as::server::DeviceTimeObserver::unmapSessionToDevice(a1, *v11++, v3, a3);
      v12 -= 4;
    }
    while (v12);
  }
  if (v15) {
    operator delete(__dst);
  }
}

void sub_1CFE63008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL as::server::DeviceTimeObserver::removeSession(as::server::DeviceTimeObserver *this, unsigned int a2)
{
  unsigned int v25 = a2;
  unint64_t v3 = (uint64_t *)((char *)this + 24);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find((uint64_t *)this + 3, &v25, (uint64_t *)&v26);
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *((void *)this + 4);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v7 = v26;
  uint64_t v8 = v4 + 32 * v5;
  if ((void)v26 != v8)
  {
    uint64_t v10 = *(unsigned int **)(v26 + 8);
    uint64_t v9 = *(std::__shared_weak_count **)(v26 + 16);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v11 = *(unsigned __int8 *)(v7 + 26);
    if (*((unsigned char *)v10 + 4))
    {
      unsigned int v12 = *v10;
      unint64_t v13 = *v10 / 0x21FuLL;
      if (v13 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 7)
      {
        LOBYTE(v22) = 0;
        char v24 = 0;
        uint64_t v18 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v18);
      }
      uint64_t v22 = *(void *)this + (v13 << 7);
      LODWORD(v23) = v12 % 0x21F;
      char v24 = 1;
      unint64_t v14 = as::server::DeviceTimeObserver::SessionSlot::sessionState((as::server::DeviceTimeObserver::SessionSlot *)&v22);
      caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v14, (uint64_t)v20);
      LODWORD(v26) = v25;
      std::set<unsigned int>::set[abi:ne180100]((uint64_t)v19, (unsigned int *)&v26, 1);
      if (!v11) {
        std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(v19, *((unsigned int **)v10 + 2), v10 + 6);
      }
      as::server::DeviceTimeObserver::removeReferringSessionsFromDevice((uint64_t)this, 0, v21, v19);
      as::server::DeviceTimeObserver::removeReferringSessionsFromDevice((uint64_t)this, 1, LOBYTE(v20[0]), v19);
      if (!v11)
      {
        unint64_t v15 = as::server::DeviceTimeObserver::SessionSlot::sessionState((as::server::DeviceTimeObserver::SessionSlot *)&v22);
        long long v26 = 0u;
        long long v27 = 0u;
        uint64_t v28 = 0;
        LOBYTE(v26) = -1;
        LOBYTE(v27) = -1;
        caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::store(v15, &v26);
        if (*((unsigned char *)v10 + 4)) {
          *((unsigned char *)v10 + 4) = 0;
        }
        as::server::DeviceTimeObserver::SharedBlockOwner::deallocateSessionSlot(v22, v22, v23);
      }
      std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy((uint64_t)v19, (void *)v19[1]);
    }
    if (v11 && std::__tree<unsigned int>::__erase_unique<unsigned int>((uint64_t)(v10 + 4), &v25) != 1)
    {
      uint64_t v17 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v17);
    }
    *(void *)&long long v26 = v7;
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::erase(v3, (uint64_t *)&v26, v20);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  return v7 != v8;
}

void sub_1CFE63250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void as::server::DeviceTimeObserver::sessionHasIOEventListeners(as::server::DeviceTimeObserver *this, unsigned int a2, int a3, char a4)
{
  unsigned int v11 = a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find((uint64_t *)this + 3, &v11, &v12);
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = *((void *)this + 4);
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v12 != v7 + 32 * v8)
  {
    uint64_t v10 = 24;
    if (a3) {
      uint64_t v10 = 25;
    }
    *(unsigned char *)(v12 + v10) = a4;
  }
}

void as::server::DeviceTimeObserver::unmapSessionToDevice(as::server::DeviceTimeObserver *this, unsigned int a2, int a3, unint64_t a4)
{
  unsigned int v19 = a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find((uint64_t *)this + 3, &v19, v14);
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = *((void *)this + 4);
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v14[0] == v7 + 32 * v8) {
    as::server::DeviceTimeObserver::unmapSessionToDevice();
  }
  if (!*(unsigned char *)(v14[0] + 26))
  {
    uint64_t v10 = *(int **)(v14[0] + 8);
    if (!*((unsigned char *)v10 + 4)) {
      as::server::DeviceTimeObserver::unmapSessionToDevice();
    }
    unsigned int v11 = *v10;
    unint64_t v12 = v11 / 0x21FuLL;
    if (v12 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 7) {
      as::server::DeviceTimeObserver::removeDevice();
    }
    unint64_t v16 = *(void *)this + (v12 << 7);
    unsigned int v17 = v11 % 0x21F;
    char v18 = 1;
    unint64_t v13 = as::server::DeviceTimeObserver::SessionSlot::sessionState((as::server::DeviceTimeObserver::SessionSlot *)&v16);
    caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v13, (uint64_t)v14);
    if (LOBYTE(v14[0]) == a3) {
      as::server::DeviceTimeObserver::SessionSlot::setDeviceIndex((as::server::DeviceTimeObserver::SessionSlot *)&v16, 1, 0, 0xFFu, a4);
    }
    if (v15 == a3) {
      as::server::DeviceTimeObserver::SessionSlot::setDeviceIndex((as::server::DeviceTimeObserver::SessionSlot *)&v16, 0, 0, 0xFFu, a4);
    }
  }
}

void as::server::DeviceTimeObserver::sessionDeviceIOPeriod(as::server::DeviceTimeObserver *this@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  as::server::DeviceTimeObserver::findSessionSlot(this, a2, (uint64_t)v21);
  if (!v21[16]) {
    goto LABEL_9;
  }
  unint64_t v7 = as::server::DeviceTimeObserver::SessionSlot::sessionState((as::server::DeviceTimeObserver::SessionSlot *)v21);
  caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v7, (uint64_t)v19);
  uint64_t v8 = (unsigned __int8 *)&v20;
  if (a3) {
    uint64_t v8 = v19;
  }
  unint64_t v9 = *v8;
  uint64_t v10 = *((void *)this + 6);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 7) - v10) >> 5) > v9)
  {
    AudioObjectID v11 = *(_DWORD *)(v10 + 96 * v9);
    long long outData = 0u;
    long long v18 = 0u;
    *(void *)&inAddress.mSelector = 0x676C6F626E737274;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 8;
    OSStatus PropertyData = AudioObjectGetPropertyData(v11, &inAddress, 0, 0, &ioDataSize, &outData);
    if (PropertyData
      || (unsigned int v15 = 0,
          *(void *)&inAddress.mSelector = 0x676C6F626673697ALL,
          inAddress.mElement = 0,
          UInt32 ioDataSize = 4,
          OSStatus PropertyData = AudioObjectGetPropertyData(v11, &inAddress, 0, 0, &ioDataSize, &v15),
          *(void *)&long long v18 = v15,
          PropertyData))
    {
      char v13 = 0;
      *(_DWORD *)a4 = PropertyData;
    }
    else
    {
      if (*(double *)&outData > 0.0) {
        *((double *)&outData + 1) = (double)v15 / *(double *)&outData;
      }
      long long v14 = v18;
      *(_OWORD *)a4 = outData;
      *(_OWORD *)(a4 + 16) = v14;
      char v13 = 1;
    }
    *(unsigned char *)(a4 + 32) = v13;
  }
  else
  {
LABEL_9:
    *(_DWORD *)a4 = -1;
    *(unsigned char *)(a4 + 32) = 0;
  }
}

unint64_t as::server::DeviceTimeObserver::nanosecondLatency(as::server::DeviceTimeObserver *this, int a2, int a3)
{
  uint64_t v3 = *((void *)this + 6);
  uint64_t v4 = *((void *)this + 7);
  if (v3 != v4)
  {
    while (*(_DWORD *)v3 != a2)
    {
      v3 += 96;
      if (v3 == v4) {
        return 0;
      }
    }
  }
  if (v3 == v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 72);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 80);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    if (a3)
    {
      unint64_t v7 = (unint64_t *)(v6 + 8);
LABEL_11:
      unint64_t v8 = atomic_load(v7);
      goto LABEL_15;
    }
    if (!*(unsigned char *)(v3 + 16))
    {
      _X20 = 0;
      _X21 = 0;
      __asm { CASPAL          X20, X21, X20, X21, [X8] }
      unint64_t v7 = (unint64_t *)(v6 + 16);
      goto LABEL_11;
    }
  }
  unint64_t v8 = 0;
LABEL_15:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v8;
}

uint64_t caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::atomic_value(uint64_t result)
{
  uint64_t v1 = 0;
  *(unsigned char *)uint64_t result = 0;
  *(_DWORD *)(result + 4) = 0;
  do
  {
    uint64_t v2 = result + v1;
    *(_DWORD *)(v2 + 8) = 0;
    *(unsigned char *)(v2 + 16) = -1;
    *(void *)(v2 + 24) = 0;
    *(unsigned char *)(v2 + 32) = -1;
    *(void *)(v2 + 40) = 0;
    v1 += 48;
    *(unsigned char *)(v2 + 48) = 0;
  }
  while (v1 != 96);
  return result;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_1CFE63724(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  *exceptiouint64_t n = MEMORY[0x1E4FBA4F8] + 16;
}

uint64_t *std::vector<as::server::DeviceTimeObserver::SharedBlockOwner>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_OWORD *)(v6 - 128) = *(_OWORD *)(v2 + v5 - 128);
      *(unsigned char *)(v6 - 96) = 0;
      *(void *)(v6 - 112) = 0;
      *(void *)(v6 - 104) = 0;
      uint64_t v8 = *(void *)(v2 + v5 - 104);
      *(void *)(v6 - 112) = *(void *)(v2 + v5 - 112);
      *(void *)(v6 - 104) = v8;
      *(void *)(v7 - 112) = 0;
      *(void *)(v7 - 104) = 0;
      *(unsigned char *)(v6 - 96) = *(unsigned char *)(v2 + v5 - 96);
      *(unsigned char *)(v7 - 96) = 0;
      uint64_t v9 = *(void *)(v2 + v5 - 8);
      long long v10 = *(_OWORD *)(v2 + v5 - 24);
      long long v11 = *(_OWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_OWORD *)(v6 - 40) = v11;
      *(_OWORD *)(v6 - 24) = v10;
      *(void *)(v6 - 8) = v9;
      long long v12 = *(_OWORD *)(v2 + v5 - 72);
      *(_OWORD *)(v6 - 88) = *(_OWORD *)(v2 + v5 - 88);
      *(_OWORD *)(v6 - 72) = v12;
      v5 -= 128;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v13 = *result;
  std::logic_error *result = v4;
  a2[1] = v13;
  uint64_t v14 = result[1];
  result[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = result[2];
  result[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::DeviceTimeObserver::SharedBlockOwner>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 7);
}

uint64_t std::__split_buffer<as::server::DeviceTimeObserver::SharedBlockOwner>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    as::server::DeviceTimeObserver::SharedBlockOwner::~SharedBlockOwner((as::server::DeviceTimeObserver::SharedBlockOwner *)(i - 128));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 96 * a2;
      uint64_t v14 = 96 * a2;
      do
      {
        uint64_t result = std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100]<true,0>(v7);
        v7 += 96;
        v14 -= 96;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v22 = result;
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>>(result, v11);
    }
    else {
      long long v12 = 0;
    }
    uint64_t v15 = (uint64_t)&v12[96 * v8];
    v19[0] = v12;
    v19[1] = v15;
    uint64_t v20 = v15;
    unsigned __int8 v21 = &v12[96 * v11];
    uint64_t v16 = 3 * a2;
    unint64_t v17 = v15 + 96 * a2;
    uint64_t v18 = 32 * v16;
    do
    {
      std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100]<true,0>(v15);
      v15 += 96;
      v18 -= 96;
    }
    while (v18);
    uint64_t v20 = v17;
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__swap_out_circular_buffer(a1, v19);
    return std::__split_buffer<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_1CFE63A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 96;
    std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100](v6 - 96, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

__n128 std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  uint64_t v3 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 88) = v3;
  return result;
}

void std::__destroy_at[abi:ne180100]<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>,0>(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v2 = (void *)(a1 + 88);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<as::server::DeviceLatencyPoll>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(void *)(a1 + 64)) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(void *)(a1 + 40)) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t std::__split_buffer<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>,0>(i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void boost::container::throw_length_error(boost::container *this, const char *a2)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  *exceptiouint64_t n = &unk_1F26881E8;
  exception[1] = this;
}

void boost::container::out_of_range::~out_of_range(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1D25E1860);
}

const char *boost::container::exception::what(boost::container::exception *this)
{
  if (*((void *)this + 1)) {
    return (const char *)*((void *)this + 1);
  }
  else {
    return "unknown boost::container exception";
  }
}

void as::server::DeviceTimeObserver::DeviceKey::~DeviceKey(as::server::DeviceTimeObserver::DeviceKey *this)
{
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100]<true,0>(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  _ZNSt3__115allocate_sharedB8ne180100IN2as6server18DeviceTimeObserver8TimeInfoENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((void *)(a1 + 72));
  *(void *)(a1 + 88) = 0;
  return a1;
}

void sub_1CFE63DAC(_Unwind_Exception *a1)
{
  if (*(void *)(v1 + 64)) {
    operator delete(*(void **)(v1 + 48));
  }
  if (*(void *)(v1 + 40)) {
    operator delete(*(void **)(v1 + 24));
  }
  as::server::DeviceTimeObserver::DeviceKey::~DeviceKey((as::server::DeviceTimeObserver::DeviceKey *)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::CommonSessionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2688210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::CommonSessionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2688210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25E1860);
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::CommonSessionInfo>::__on_zero_shared(uint64_t a1)
{
}

uint64_t caulk::concurrent::details::spinloop::spin(uint64_t this)
{
  int v1 = *(_DWORD *)this + 1;
  *(_DWORD *)this = v1;
  if (v1 == 100)
  {
    uint64_t v2 = (_DWORD *)this;
    this = sched_yield();
    *uint64_t v2 = 0;
  }
  return this;
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::TimeInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2688248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::TimeInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2688248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25E1850);
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 58) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = operator new(32 * v11);
  boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

uint64_t boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  __int16 v6 = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(_WORD *)(a1 + 24) = v6;
  return a1;
}

unint64_t boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 - v2 >= (unint64_t)a2) {
    boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>();
  }
  unint64_t v4 = 0x3FFFFFFFFFFFFFFLL;
  if (0x3FFFFFFFFFFFFFFLL - v3 < (unint64_t)&a2[v2 - v3]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v3 >> 61;
  unint64_t v6 = 8 * v3;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  uint64_t v9 = &a2[v2];
  if (v8 < 0x3FFFFFFFFFFFFFFLL) {
    unint64_t v4 = v8;
  }
  if ((unint64_t)v9 <= v4) {
    return v4;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>((uint64_t)a1, *a1, a4, *a1 + 32 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      long long v12 = (std::__shared_weak_count **)(v10 + 16);
      do
      {
        if (*v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v12);
        }
        v12 += 4;
        --v11;
      }
      while (v11);
    }
    operator delete((void *)*a1);
  }
  uint64_t v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_1CFE64130(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5;
  if (a2 != a3)
  {
    uint64_t v7 = a5;
    do
    {
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      __int16 v8 = *(_WORD *)(a2 + 24);
      *(unsigned char *)(v7 + 26) = *(unsigned char *)(a2 + 26);
      *(_WORD *)(v7 + 24) = v8;
      v7 += 32;
      a2 += 32;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(_DWORD *)uint64_t v7 = *(_DWORD *)a7;
  __n128 result = *(__n128 *)(a7 + 8);
  *(__n128 *)(v7 + 8) = result;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  __int16 v10 = *(_WORD *)(a7 + 24);
  *(unsigned char *)(v7 + 26) = *(unsigned char *)(a7 + 26);
  *(_WORD *)(v7 + 24) = v10;
  if (a3 != a4)
  {
    uint64_t v11 = v7 + 56;
    do
    {
      *(_DWORD *)(v11 - 24) = *(_DWORD *)a3;
      __n128 result = *(__n128 *)(a3 + 8);
      *(__n128 *)(v11 - 16) = result;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      __int16 v12 = *(_WORD *)(a3 + 24);
      *(unsigned char *)(v11 + 2) = *(unsigned char *)(a3 + 26);
      *(_WORD *)uint64_t v11 = v12;
      v11 += 32;
      a3 += 32;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t std::set<unsigned int>::set[abi:ne180100](uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_1CFE642D4(_Unwind_Exception *a1)
{
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::__tree<unsigned int>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0;
  }
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::erase(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *a2;
  uint64_t v5 = *a1;
  if (*a1 > (unint64_t)*a2) {
    goto LABEL_14;
  }
  uint64_t v7 = a1[1];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v9 = v5 + 32 * v7;
  if (v4 >= v9) {
LABEL_14:
  }
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::erase();
  if (v4 + 32 != v9)
  {
    uint64_t v10 = *a2;
    do
    {
      boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>::operator=(v10, v10 + 32);
      uint64_t v11 = v10 + 64;
      v10 += 32;
    }
    while (v11 != v9);
  }
  __int16 v12 = *(std::__shared_weak_count **)(v9 - 16);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  --a1[1];
  *a3 = v4;
}

void **boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::vector_alloc_holder<boost::container::new_allocator<unsigned int> const&,unsigned long>(void **a1, const char *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = (void *)a3;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
    }
    *a1 = operator new(4 * a3);
    a1[2] = (void *)a3;
  }
  return a1;
}

unint64_t *boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique<boost::container::vec_iterator<unsigned int *,false>>(uint64_t *a1, const void **a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  long long v26 = *a2;
  long long v27 = (char *)(v3 + 4 * v4);
  uint64_t v25 = *a3;
  boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::insert<boost::container::vec_iterator<unsigned int *,false>>(a1, &v27, &v26, &v25, &v28);
  char v24 = (int *)v28;
  uint64_t v7 = (int *)*a1;
  uint64_t v8 = a1[1];
  uint64_t v23 = v7;
  if (!v7 && v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v23 = &v7[v8];
  boost::movelib::pdqsort<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v24, &v23);
  unint64_t v9 = (unsigned int *)*a1;
  uint64_t v10 = a1[1];
  uint64_t v20 = v9;
  unsigned __int8 v21 = (unsigned int *)v28;
  if (!v9 && v10) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unsigned int v19 = v9;
  uint64_t v20 = &v9[v10];
  uint64_t v18 = (unsigned int *)v28;
  boost::movelib::inplace_set_unique_difference<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v21, &v20, &v19, &v18, (unsigned int **)&v22);
  uint64_t v11 = (char *)*a1;
  uint64_t v12 = a1[1];
  uint64_t v16 = v11;
  unint64_t v17 = v22;
  if (!v11 && v12) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v16 = &v11[4 * v12];
  __n128 result = boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase((unint64_t *)a1, (void **)&v17, (const void **)&v16, &v15);
  if (v28 != v22)
  {
    uint64_t v14 = a1[1];
    if (!*a1)
    {
      if (v14) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
    }
    return (unint64_t *)boost::movelib::adaptive_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((unsigned int *)*a1, (unsigned int *)v28, (unsigned int *)(*a1 + 4 * v14), *a1 + 4 * v14, a1[2] - v14);
  }
  return result;
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::insert<boost::container::vec_iterator<unsigned int *,false>>(uint64_t *a1@<X0>, char **a2@<X1>, const void **a3@<X2>, void *a4@<X3>, char **a5@<X8>)
{
  BOOL v6 = *a2;
  uint64_t v7 = *a1;
  if (*a1 > (unint64_t)v6) {
    goto LABEL_12;
  }
  unint64_t v10 = a1[1];
  if (v7) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v13 = (char *)(v7 + 4 * v10);
  if (v6 > v13) {
LABEL_12:
  }
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::insert<boost::container::vec_iterator<unsigned int *,false>>();
  unint64_t v14 = a1[2];
  BOOL v15 = v14 >= v10;
  unint64_t v16 = v14 - v10;
  if (!v15) {
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>();
  }
  unint64_t v17 = (uint64_t)(*a4 - (void)*a3) >> 2;
  uint64_t v18 = *a3;
  if (v16 < v17)
  {
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(a1, v6, (const char *)v17, &v18, a5);
  }
  else
  {
    boost::container::expand_forward_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>((int)a1, v6, v13, v17, &v18);
    a1[1] += v17;
    *a5 = *a2;
  }
}

int **boost::movelib::pdqsort<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(int **result, int **a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  if (*result != *a2)
  {
    uint64_t v8 = *a2;
    unint64_t v9 = v2;
    uint64_t v4 = (char *)v3 - (char *)v2;
    if ((unint64_t)v4 >= 8)
    {
      uint64_t v5 = 0;
      unint64_t v6 = v4 >> 2;
      do
      {
        ++v5;
        BOOL v7 = v6 > 3;
        v6 >>= 1;
      }
      while (v7);
    }
    else
    {
      uint64_t v5 = 0;
    }
    return boost::movelib::pdqsort_detail::pdqsort_loop<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v9, &v8, v5, 1);
  }
  return result;
}

unsigned int **boost::movelib::inplace_set_unique_difference<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>@<X0>(unsigned int **result@<X0>, unsigned int **a2@<X1>, unsigned int **a3@<X2>, unsigned int **a4@<X3>, unsigned int **a5@<X8>)
{
  uint64_t v5 = *result;
  if (*result == *a2)
  {
    unint64_t v9 = *result;
LABEL_13:
    *a5 = v9;
  }
  else
  {
    while (1)
    {
      unint64_t v6 = *a3;
      if (*a3 == *a4) {
        break;
      }
      if (!v6) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      if (!v5) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned int v7 = *v5;
      if (*v6 >= *v5)
      {
        if (v7 >= *v6)
        {
          uint64_t v12 = v5 + 1;
          while (1)
          {
            uint64_t v13 = v12;
            unint64_t *result = v12;
            unint64_t v14 = *a2;
            if (v12 == *a2) {
              break;
            }
            ++v12;
            if (v7 < *v13) {
              goto LABEL_34;
            }
          }
          unint64_t v14 = v12;
LABEL_34:
          uint64_t v28 = v14;
          id v29 = v13;
          uint64_t v18 = *a3;
          long long v26 = *a4;
          long long v27 = v18;
          uint64_t v25 = v5;
          unsigned int v19 = &v29;
          uint64_t v20 = &v28;
          unsigned __int8 v21 = &v27;
          uint64_t v22 = &v26;
          uint64_t v23 = &v25;
          return boost::movelib::set_unique_difference<boost::move_iterator<boost::container::vec_iterator<unsigned int *,false>>,boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v19, v20, v21, v22, v23, a5);
        }
        uint64_t v8 = v5 + 1;
        unint64_t *result = v5 + 1;
        unint64_t v9 = *a2;
        if (v5 + 1 == *a2)
        {
          unint64_t v9 = v5 + 1;
          goto LABEL_13;
        }
        if (v7 >= *v8)
        {
          BOOL v15 = v5 + 2;
          while (1)
          {
            unint64_t v16 = v15;
            unint64_t *result = v15;
            unint64_t v17 = *a2;
            if (v15 == *a2) {
              break;
            }
            ++v15;
            if (v7 < *v16) {
              goto LABEL_36;
            }
          }
          unint64_t v17 = v15;
LABEL_36:
          uint64_t v33 = v17;
          long long v34 = v16;
          char v24 = *a3;
          uint64_t v31 = *a4;
          std::string::size_type v32 = v24;
          long long v30 = v8;
          unsigned int v19 = &v34;
          uint64_t v20 = &v33;
          unsigned __int8 v21 = &v32;
          uint64_t v22 = &v31;
          uint64_t v23 = &v30;
          return boost::movelib::set_unique_difference<boost::move_iterator<boost::container::vec_iterator<unsigned int *,false>>,boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v19, v20, v21, v22, v23, a5);
        }
      }
      else
      {
        *a3 = v6 + 1;
        uint64_t v8 = *result;
        unint64_t v9 = *a2;
      }
      uint64_t v5 = v8;
      if (v8 == v9) {
        goto LABEL_13;
      }
    }
    if (!v5) {
      __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
    }
    unint64_t v10 = v5 + 1;
    unint64_t *result = v5 + 1;
    if (v5 + 1 == *a2)
    {
      BOOL v11 = v5;
    }
    else
    {
      do
      {
        if (*v5 >= *v10)
        {
          BOOL v11 = v5;
        }
        else
        {
          BOOL v11 = v5 + 1;
          if (v10 - 1 != v5) {
            unsigned int *v11 = *v10;
          }
        }
        unint64_t *result = ++v10;
        uint64_t v5 = v11;
      }
      while (v10 != *a2);
    }
    *a5 = v11 + 1;
  }
  return result;
}

unint64_t *boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase@<X0>(unint64_t *result@<X0>, void **a2@<X1>, const void **a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = (char *)*a2;
  unint64_t v5 = *result;
  if (*result > (unint64_t)*a2) {
    goto LABEL_20;
  }
  unint64_t v6 = result;
  unint64_t v8 = result[1];
  if (v5) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v10 = (char *)(v5 + 4 * v8);
  if (v4 > v10) {
LABEL_20:
  }
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase();
  uint64_t v12 = (char *)*a3;
  if (v5 > (unint64_t)*a3 || v12 > v10) {
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase();
  }
  if (v4 > v12) {
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase();
  }
  if (v4 != v12)
  {
    if (v12 && v4 && v12 != v10)
    {
      uint64_t v14 = v10 - v12;
      __n128 result = (unint64_t *)memmove(v4, v12, v10 - v12);
      BOOL v15 = &v4[v14];
      unint64_t v8 = v6[1];
      uint64_t v4 = (char *)*a2;
    }
    else
    {
      BOOL v15 = v4;
    }
    v6[1] = v8 - ((v10 - v15) >> 2);
  }
  *a4 = v4;
  return result;
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(uint64_t *a1@<X0>, char *a2@<X1>, const char *a3@<X2>, const void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 61) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = (char *)operator new(4 * v11);
  BOOL v15 = *a4;
  boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>((uint64_t)a1, v14, v13, a2, (uint64_t)a3, &v15);
  *a5 = &a2[*a1 - v10];
}

void *boost::container::expand_forward_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(int a1, unsigned char *__dst, unsigned char *a3, unint64_t a4, const void **a5)
{
  if (a4)
  {
    int64_t v9 = a3 - __dst;
    if (a3 == __dst)
    {
      uint64_t v13 = (char *)*a5;
      __n128 result = memmove(a3, *a5, 4 * a4);
      if (!v13) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      uint64_t v12 = &v13[4 * a4];
    }
    else if (a4 <= v9 >> 2)
    {
      uint64_t v14 = &a3[-4 * a4];
      memmove(a3, v14, 4 * a4);
      if (v14 != __dst) {
        memmove(&a3[-(v14 - __dst)], __dst, v14 - __dst);
      }
      BOOL v15 = (char *)*a5;
      __n128 result = memmove(__dst, *a5, 4 * a4);
      if (!v15) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      uint64_t v12 = &v15[4 * a4];
    }
    else
    {
      if (__dst) {
        memmove(&__dst[4 * a4], __dst, a3 - __dst);
      }
      uint64_t v10 = (char *)*a5;
      __n128 result = memmove(__dst, *a5, v9);
      if (!v10) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      uint64_t v12 = &v10[4 * (v9 >> 2)];
      *a5 = v12;
      if (a4 != v9 >> 2)
      {
        __n128 result = memmove(a3, v12, 4 * (a4 - (v9 >> 2)));
        uint64_t v12 = &v10[4 * a4];
      }
    }
    *a5 = v12;
  }
  return result;
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(uint64_t a1, char *__dst, uint64_t a3, char *__src, uint64_t a5, const void **a6)
{
  unint64_t v11 = *(char **)a1;
  uint64_t v12 = (char *)(*(void *)a1 + 4 * *(void *)(a1 + 8));
  uint64_t v14 = *a6;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(a1, v11, __src, v12, __dst, a5, &v14);
  if (v11) {
    operator delete(*(void **)a1);
  }
  uint64_t v13 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = __dst;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = a3;
}

void sub_1CFE64E08(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(int a1, char *a2, char *__src, char *a4, char *__dst, uint64_t a6, const void **a7)
{
  int64_t v9 = __dst;
  if (a2 && a2 != __src && __dst)
  {
    uint64_t v12 = (char *)(__src - a2);
    memmove(__dst, a2, __src - a2);
    int64_t v9 = &v12[(void)v9];
  }
  uint64_t v13 = (char *)*a7;
  if (a6)
  {
    memmove(v9, *a7, 4 * a6);
    if (!v13) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    v13 += 4 * a6;
  }
  *a7 = v13;
  if (__src && __src != a4 && v9)
  {
    memmove(&v9[4 * a6], __src, a4 - __src);
  }
}

int **boost::movelib::pdqsort_detail::pdqsort_loop<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(int **a1, int **a2, uint64_t a3, char a4)
{
  while (1)
  {
    unint64_t v8 = *a2;
    int64_t v9 = *a1;
    uint64_t v10 = (char *)*a2 - (char *)*a1;
    if ((unint64_t)v10 <= 0x5F) {
      break;
    }
    unint64_t v11 = v10 >> 2;
    unint64_t v12 = (unint64_t)(v10 >> 2) >> 1;
    if ((unint64_t)v10 < 0x201)
    {
      if (!v9) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
      uint64_t v90 = *a1;
      v91 = &v9[v12];
      if (!v8) {
        __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
      }
      uint64_t v89 = v8 - 1;
      boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v91, &v90, &v89);
    }
    else
    {
      v105 = *a1;
      if (!v9) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
      char v104 = &v9[v12];
      if (!v8) {
        __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
      }
      id v103 = v8 - 1;
      boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v105, &v104, &v103);
      uint64_t v13 = *a1;
      if (!*a1) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
      __int16 v101 = &v13[v12 - 1];
      uint64_t v102 = v13 + 1;
      if (!*a2) {
        __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
      }
      int v100 = *a2 - 2;
      boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v102, &v101, &v100);
      uint64_t v14 = *a1;
      if (!*a1) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
      uint64_t v98 = &v14[v12 + 1];
      v99 = v14 + 2;
      if (!*a2) {
        __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
      }
      v97 = *a2 - 3;
      boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v99, &v98, &v97);
      BOOL v15 = *a1;
      if (v12 != 1 && !v15) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
      unsigned int v96 = &v15[v12 - 1];
      if (!v15) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
      int v94 = &v15[v12 + 1];
      unsigned int v95 = &v15[v12];
      boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v96, &v95, &v94);
      uint64_t v93 = *a1;
      if (!v93) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
      id v92 = &v93[v12];
      boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v93, &v92);
    }
    unint64_t v16 = *a1;
    if ((a4 & 1) == 0)
    {
      if (!v16) {
        __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
      }
      if (*(v16 - 1) >= *v16)
      {
        uint64_t v88 = *a1;
        uint64_t v87 = *a2;
        __n128 result = boost::movelib::pdqsort_detail::partition_left<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v88, (uint64_t *)&v87, &v85);
        if (!v85) {
          __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
        }
        a4 = 0;
        *a1 = v85 + 1;
        int v35 = 2;
        goto LABEL_70;
      }
    }
    unint64_t v84 = *a1;
    uint64_t v83 = *a2;
    __n128 result = boost::movelib::pdqsort_detail::partition_right<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v84, &v83, (uint64_t)&v85);
    uint64_t v18 = v85;
    if (!v85) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
    unsigned int v19 = *a1;
    uint64_t v20 = (char *)v85 - (char *)*a1;
    unint64_t v21 = v20 >> 2;
    uint64_t v22 = v85 + 1;
    uint64_t v23 = *a2;
    uint64_t v24 = (char *)*a2 - (char *)(v85 + 1);
    unint64_t v25 = v24 >> 2;
    if (v20 >> 2 < v11 >> 3 || v25 < v11 >> 3)
    {
      if (!--a3)
      {
        uint64_t v108 = *a2;
        audit_token_t v109 = v19;
        __n128 result = (int **)boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort((uint64_t *)&v109, (uint64_t *)&v108);
LABEL_69:
        int v35 = 1;
        goto LABEL_70;
      }
      if ((unint64_t)v20 >= 0x5D)
      {
        uint64_t v82 = *a1;
        if (!v19) {
          __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
        }
        unint64_t v48 = v21 >> 2;
        uint64_t v81 = &v19[v21 >> 2];
        boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v82, &v81);
        int v79 = &v18[-v48];
        std::string::size_type v80 = v18 - 1;
        boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v80, &v79);
        if ((unint64_t)v20 >= 0x201)
        {
          std::string v49 = *a1;
          if (!*a1) {
            __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
          }
          uint64_t v77 = &v49[v48 + 1];
          uint64_t v78 = v49 + 1;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v78, &v77);
          unint64_t v50 = *a1;
          if (!*a1) {
            __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
          }
          int v75 = &v50[v48 + 2];
          int v76 = v50 + 2;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v76, &v75);
          uint64_t v73 = &v18[~v48];
          int v74 = v18 - 2;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v74, &v73);
          char v71 = &v18[-2 - v48];
          unsigned int v72 = v18 - 3;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v72, &v71);
        }
      }
      if ((unint64_t)v24 >= 0x5D)
      {
        unint64_t v51 = v25 >> 2;
        uint64_t v69 = &v18[(v25 >> 2) + 1];
        unsigned int v70 = v18 + 1;
        boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v70, &v69);
        uint64_t v52 = *a2;
        if (!*a2) {
          __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
        }
        uint64_t v67 = &v52[-v51];
        unint64_t v68 = v52 - 1;
        boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v68, &v67);
        if ((unint64_t)v24 >= 0x201)
        {
          std::string v53 = &v18[v51];
          uint64_t v65 = v53 + 2;
          uint64_t v66 = v18 + 2;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v66, &v65);
          uint64_t v63 = v53 + 3;
          char v64 = v18 + 3;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v64, &v63);
          unint64_t v54 = *a2;
          if (!*a2) {
            __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
          }
          uint64_t v61 = &v54[~v51];
          __int16 v62 = v54 - 2;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v62, &v61);
          uint64_t v55 = *a2;
          if (!*a2) {
            __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
          }
          int v59 = &v55[-2 - v51];
          __int16 v60 = v55 - 3;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v60, &v59);
        }
      }
    }
    else if (v86)
    {
      if (v19 == v85) {
        goto LABEL_38;
      }
      if (!v19) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
      if (v19 + 1 == v85) {
        goto LABEL_38;
      }
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      uint64_t v28 = v19 + 1;
      id v29 = *a1;
      do
      {
        unsigned int v31 = *v29;
        unsigned int v30 = v29[1];
        id v29 = v28;
        if (v30 < v31)
        {
          uint64_t v32 = v26;
          while (1)
          {
            *(int *)((char *)v19 + v32 + 4) = v31;
            if (!v32) {
              break;
            }
            unsigned int v31 = *(int *)((char *)v19 + v32 - 4);
            v32 -= 4;
            if (v30 >= v31)
            {
              uint64_t v33 = (int *)((char *)v19 + v32 + 4);
              long long v34 = (int *)((char *)v19 + v32 + 4);
              goto LABEL_34;
            }
          }
          uint64_t v33 = v19;
          long long v34 = v19;
LABEL_34:
          int *v34 = v30;
          v27 += v29 - v33;
        }
        uint64_t v28 = v29 + 1;
        if (v29 + 1 == v18) {
          break;
        }
        v26 += 4;
      }
      while (v27 < 9);
      if (v28 == v18)
      {
LABEL_38:
        int v35 = 1;
        if (v22 == v23) {
          goto LABEL_70;
        }
        unint64_t v36 = v18 + 2;
        if (v18 + 2 == v23) {
          goto LABEL_70;
        }
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        std::string::size_type v39 = v18 + 2;
        uint64_t v40 = 2;
        uint64_t v41 = (unsigned int *)(v18 + 1);
        do
        {
          uint64_t v42 = (unsigned int *)&v18[v40];
          unsigned int v43 = *v42;
          __n128 result = (int **)*v41;
          if (*v42 < result)
          {
            uint64_t v44 = v37;
            std::string v45 = v39;
            std::string v46 = (unsigned int *)v36;
            while (1)
            {
              unsigned int *v46 = result;
              if (!v44) {
                break;
              }
              __n128 result = (int **)*(v46 - 2);
              --v46;
              --v45;
              ++v44;
              if (v43 >= result) {
                goto LABEL_47;
              }
            }
            std::string v45 = v18 + 1;
            std::string v46 = (unsigned int *)(v18 + 1);
LABEL_47:
            unsigned int *v46 = v43;
            v38 += ((char *)v42 - (char *)v45) >> 2;
          }
          uint64_t v47 = &v18[++v40];
          if (v47 == v23) {
            break;
          }
          ++v36;
          ++v39;
          --v37;
          uint64_t v41 = v42;
        }
        while (v38 < 9);
        if (v47 == v23) {
          goto LABEL_69;
        }
      }
    }
    uint64_t v56 = *a1;
    id v57 = v18;
    long long v58 = v56;
    __n128 result = (int **)boost::movelib::pdqsort_detail::pdqsort_loop<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v58, &v57, a3, a4 & 1);
    a4 = 0;
    int v35 = 0;
    *a1 = v22;
LABEL_70:
    if (v35 == 1) {
      return result;
    }
  }
  int v106 = (unsigned int *)*a2;
  uint64_t v107 = (unsigned int *)v9;
  return (int **)boost::movelib::insertion_sort<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::container::vec_iterator<unsigned int *,false>>(&v107, &v106);
}

unsigned int **boost::movelib::insertion_sort<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::container::vec_iterator<unsigned int *,false>>(unsigned int **result, unsigned int **a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  if (*result != *a2)
  {
    if (!v2) {
      __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
    }
    uint64_t v4 = v2 + 1;
    if (v2 + 1 != v3)
    {
      uint64_t v5 = 0;
      unint64_t v6 = *result;
      do
      {
        unsigned int v7 = v4;
        unsigned int v8 = v6[1];
        if (v8 < *v6)
        {
          v6[1] = *v6;
          int64_t v9 = v2;
          if (v6 != v2)
          {
            uint64_t v10 = v5;
            while (1)
            {
              int64_t v9 = (unsigned int *)((char *)v2 + v10);
              unsigned int v11 = *(unsigned int *)((char *)v2 + v10 - 4);
              if (v8 >= v11) {
                break;
              }
              unsigned int *v9 = v11;
              v10 -= 4;
              if (!v10)
              {
                int64_t v9 = v2;
                break;
              }
            }
          }
          unsigned int *v9 = v8;
        }
        uint64_t v4 = v7 + 1;
        v5 += 4;
        unint64_t v6 = v7;
      }
      while (v7 + 1 != v3);
    }
  }
  return result;
}

int **boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(int **result, int **a2, int **a3)
{
  uint64_t v3 = *a2;
  if (!*a2) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  uint64_t v4 = result;
  uint64_t v5 = *result;
  if (!*result) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if (*v3 < *v5)
  {
    int64_t v9 = *a2;
    uint64_t v10 = v5;
    __n128 result = boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v10, &v9);
    uint64_t v3 = *a2;
  }
  if (!*a3) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if (!v3) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if (**a3 < *v3)
  {
    int64_t v9 = *a3;
    uint64_t v10 = v3;
    __n128 result = boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v10, &v9);
    uint64_t v3 = *a2;
    if (!*a2) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
  }
  unsigned int v8 = *v4;
  if (!*v4) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if (*v3 < *v8)
  {
    int64_t v9 = v3;
    uint64_t v10 = v8;
    return boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v10, &v9);
  }
  return result;
}

int **boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(int **result, int **a2)
{
  uint64_t v2 = *result;
  if (!*result) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  uint64_t v3 = *a2;
  if (!*a2) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  int v4 = *v2;
  *uint64_t v2 = *v3;
  *uint64_t v3 = v4;
  return result;
}

int **boost::movelib::pdqsort_detail::partition_left<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>@<X0>(int **result@<X0>, uint64_t *a2@<X1>, int **a3@<X8>)
{
  uint64_t v3 = *result;
  if (!*result) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  int v4 = result;
  uint64_t v6 = 0;
  unsigned int v7 = *v3;
  uint64_t v8 = *a2;
  do
  {
    if (!(v8 + v6)) {
      __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
    }
    unsigned int v9 = *(_DWORD *)(v8 + v6 - 4);
    v6 -= 4;
  }
  while (v7 < v9);
  uint64_t v10 = (int *)(v8 + v6);
  unsigned int v11 = *result;
  if (v6 == -4)
  {
    do
    {
      if (v11 >= v10) {
        break;
      }
      unsigned int v13 = v11[1];
      ++v11;
    }
    while (v7 >= v13);
  }
  else
  {
    do
    {
      unsigned int v12 = v11[1];
      ++v11;
    }
    while (v7 >= v12);
  }
  if (v11 < v10)
  {
    do
    {
      unint64_t v16 = v10;
      unint64_t v17 = v11;
      __n128 result = boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v17, &v16);
      do
      {
        unsigned int v14 = *--v10;
        unsigned int v9 = v14;
      }
      while (v7 < v14);
      do
      {
        unsigned int v15 = v11[1];
        ++v11;
      }
      while (v7 >= v15);
    }
    while (v11 < v10);
    uint64_t v3 = *v4;
  }
  *a3 = v10;
  if (!v3) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  *uint64_t v3 = v9;
  int *v10 = v7;
  return result;
}

int **boost::movelib::pdqsort_detail::partition_right<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>@<X0>(int **result@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *result;
  if (!*result) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  uint64_t v5 = result;
  uint64_t v6 = 0;
  unsigned int v7 = *v4;
  uint64_t v8 = *a2;
  do
    unsigned int v9 = v4[++v6];
  while (v9 < v7);
  uint64_t v10 = &v4[v6];
  if (v6 == 1)
  {
    do
    {
      if (v10 >= v8) {
        break;
      }
      unsigned int v12 = *--v8;
    }
    while (v12 >= v7);
  }
  else
  {
    do
    {
      if (!v8) {
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      }
      unsigned int v11 = *--v8;
    }
    while (v11 >= v7);
  }
  if (v10 >= v8)
  {
    unint64_t v17 = v10 - 1;
  }
  else
  {
    unsigned int v13 = &v4[v6];
    unsigned int v14 = v8;
    do
    {
      uint64_t v18 = v14;
      unsigned int v19 = v13;
      __n128 result = boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v19, &v18);
      do
      {
        unsigned int v15 = v13[1];
        ++v13;
      }
      while (v15 < v7);
      do
        unsigned int v16 = *--v14;
      while (v16 >= v7);
    }
    while (v13 < v14);
    int v4 = *v5;
    unint64_t v17 = v13 - 1;
  }
  if (!v4) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  *int v4 = *v17;
  int *v17 = v7;
  *(void *)a3 = v17;
  *(unsigned char *)(a3 + 8) = v10 >= v8;
  return result;
}

BOOL boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort(uint64_t *a1, uint64_t *a2)
{
  uint64_t v12 = *a1;
  uint64_t v11 = *a2;
  boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::make_heap(&v12, &v11);
  uint64_t v4 = *a1;
  uint64_t v9 = *a2;
  uint64_t v10 = v4;
  boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort_heap(&v10, &v9);
  uint64_t v5 = (_DWORD *)*a1;
  uint64_t v7 = *a2;
  uint64_t v8 = v5;
  BOOL result = boost::movelib::is_sorted<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v8, &v7);
  if (!result) {
    boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort();
  }
  return result;
}

uint64_t *boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::make_heap(uint64_t *result, void *a2)
{
  uint64_t v2 = *a2 - *result;
  if ((unint64_t)v2 >= 5)
  {
    uint64_t v3 = result;
    unint64_t v4 = v2 >> 2;
    unint64_t v5 = ((unint64_t)(v2 >> 2) >> 1) - 1;
    do
    {
      unsigned int v8 = 0;
      uint64_t v6 = *v3;
      if (v5 && !v6) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
      if (!v6) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned int v8 = *(_DWORD *)(v6 + 4 * v5);
      uint64_t v7 = v6;
      BOOL result = boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap(&v7, v5--, v4, &v8);
    }
    while (v5 != -1);
  }
  return result;
}

uint64_t *boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort_heap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2 - *result;
  if ((unint64_t)v2 >= 5)
  {
    unint64_t v4 = result;
    unint64_t v5 = v2 >> 2;
    do
    {
      uint64_t v6 = *a2;
      if (!*a2) {
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      }
      uint64_t v7 = (_DWORD *)(v6 - 4);
      *a2 = v6 - 4;
      unsigned int v10 = 0;
      unsigned int v10 = *(_DWORD *)(v6 - 4);
      unsigned int v8 = (_DWORD *)*v4;
      if (!*v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      _DWORD *v7 = *v8;
      uint64_t v9 = v8;
      BOOL result = boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap((uint64_t *)&v9, 0, --v5, &v10);
    }
    while (v5 > 1);
  }
  return result;
}

BOOL boost::movelib::is_sorted<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(_DWORD **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (_DWORD *)*a2;
  if (*a1 == (_DWORD *)*a2) {
    return 1;
  }
  do
  {
    if (!v2) {
      __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
    }
    BOOL result = ++v2 == v3;
  }
  while (v2 != v3 && *v2 >= *(v2 - 1));
  return result;
}

uint64_t *boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap(uint64_t *result, unint64_t a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v4 = 2 * a2;
  unint64_t v5 = 2 * a2 + 2;
  if (v5 >= a3)
  {
    unint64_t v8 = a2;
  }
  else
  {
    uint64_t v6 = *result;
    unint64_t v7 = a2;
    do
    {
      if (v5 && !v6) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
      if (!v6) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v8 = v4 | 1;
      if (*(_DWORD *)(v6 + 4 * v5) >= *(_DWORD *)(v6 + 4 * (v4 | 1))) {
        unint64_t v8 = v5;
      }
      *(_DWORD *)(v6 + 4 * v7) = *(_DWORD *)(v6 + 4 * v8);
      uint64_t v4 = 2 * v8;
      unint64_t v5 = 2 * v8 + 2;
      unint64_t v7 = v8;
    }
    while (v5 < a3);
  }
  uint64_t v9 = *result;
  if (v5 == a3)
  {
    if (!v9) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
    uint64_t v10 = v4 | 1;
    *(_DWORD *)(v9 + 4 * v8) = *(_DWORD *)(v9 + 4 * v10);
    unint64_t v8 = v10;
  }
  if (v8 <= a2)
  {
    if (v8 && !v9) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
    if (!v9) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
  }
  else
  {
    unint64_t v11 = v8;
    while (1)
    {
      if (v11 - 1 >= 2 && v9 == 0) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
      if (!v9) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v8 = (v11 - 1) >> 1;
      unsigned int v13 = *(_DWORD *)(v9 + 4 * v8);
      if (v13 >= *a4) {
        break;
      }
      *(_DWORD *)(v9 + 4 * v11) = v13;
      unint64_t v11 = (v11 - 1) >> 1;
      if (v8 <= a2) {
        goto LABEL_29;
      }
    }
    unint64_t v8 = v11;
  }
LABEL_29:
  *(_DWORD *)(v9 + 4 * v8) = *a4;
  return result;
}

unsigned int **boost::movelib::set_unique_difference<boost::move_iterator<boost::container::vec_iterator<unsigned int *,false>>,boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>@<X0>(unsigned int **result@<X0>, unsigned int **a2@<X1>, unsigned int **a3@<X2>, unsigned int **a4@<X3>, unsigned int **a5@<X4>, unsigned int **a6@<X8>)
{
  while (1)
  {
    uint64_t v6 = *result;
    if (*result == *a2) {
      break;
    }
    unint64_t v7 = *a3;
    if (*a3 == *a4)
    {
      if (!v6) {
LABEL_23:
      }
        __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
      uint64_t v12 = *result;
      while (1)
      {
        void *result = ++v6;
        if (v6 == *a2) {
          break;
        }
        if (!v12) {
          __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
        }
        if (*v12 < *v6)
        {
          unsigned int v13 = *a5;
          if (!*a5) {
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          }
          *unsigned int v13 = *v12;
          *a5 = v13 + 1;
          uint64_t v6 = *result;
          uint64_t v12 = *result;
        }
        if (!v6) {
          goto LABEL_23;
        }
      }
      if (!v12) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned int v14 = *a5;
      if (!*a5) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned int *v14 = *v12;
      *a5 = v14 + 1;
      break;
    }
    if (!v6) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (!v7) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    unsigned int v8 = *v6;
    if (*v6 >= *v7)
    {
      if (*v7 >= v8)
      {
        unint64_t v11 = result;
      }
      else
      {
        uint64_t v6 = *a3;
        unint64_t v11 = a3;
      }
    }
    else
    {
      uint64_t v9 = v6 + 1;
      do
      {
        void *result = v9;
        if (v9 == *a2) {
          break;
        }
        unsigned int v10 = *v9++;
      }
      while (v8 >= v10);
      uint64_t v6 = *a5;
      if (!*a5) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned int *v6 = v8;
      unint64_t v11 = a5;
    }
    int *v11 = v6 + 1;
  }
  *a6 = *a5;
  return result;
}

unsigned int *boost::movelib::adaptive_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  if (result != a2 && a2 != a3)
  {
    v10[3] = v5;
    void v10[4] = v6;
    uint64_t v7 = (char *)a2 - (char *)result;
    while (*a2 >= *result)
    {
      ++result;
      v7 -= 4;
      if (result == a2) {
        return result;
      }
    }
    for (uint64_t i = (char *)a3 - (char *)a2; ; i -= 4)
    {
      unsigned int v9 = *--a3;
      if (v9 < *(a2 - 1)) {
        break;
      }
      if (a3 == a2) {
        return result;
      }
    }
    v10[0] = a4;
    v10[1] = 0;
    void v10[2] = a5;
    return boost::movelib::detail_adaptive::adaptive_merge_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(result, v7 >> 2, i >> 2, (uint64_t)v10);
  }
  return result;
}

unsigned int *boost::movelib::detail_adaptive::adaptive_merge_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(unsigned int *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = (char *)a1;
  unint64_t v8 = *(void *)(a4 + 16);
  if (a2 >= a3) {
    unint64_t v9 = a3;
  }
  else {
    unint64_t v9 = a2;
  }
  if (v8 >= v9)
  {
    uint64_t v22 = (char *)&a1[a2];
    uint64_t v23 = &v22[4 * a3];
    return boost::movelib::op_buffered_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(a1, v22, v23, (char **)a4);
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    int v12 = -32;
    unint64_t v13 = a3 + a2;
    do
    {
      v10 *= 2;
      *((void *)&v15 + 1) = v11;
      *(void *)&long long v15 = v13;
      unint64_t v14 = v15 >> 62;
      v13 *= 4;
      BOOL v16 = v10 >= v14;
      if (v10 < v14) {
        uint64_t v17 = ~v10;
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v11 = v17 + v14;
      if (!v16) {
        v10 += 2;
      }
      BOOL v16 = __CFADD__(v12++, 1);
    }
    while (!v16);
    unint64_t v18 = v10 >> 1;
    if ((a3 + a2) % (v10 >> 1)) {
      ++v18;
    }
    if (2 * v18 >= a2 || 2 * v18 >= a3)
    {
      uint64_t v20 = (char *)&a1[a2];
      unint64_t v21 = &v20[4 * a3];
LABEL_45:
      return (unsigned int *)boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((char *)a1, v20, v21, a2, a3);
    }
    if (v8 >= v18) {
      unint64_t v25 = 0;
    }
    else {
      unint64_t v25 = v18;
    }
    if (v8 <= v18) {
      unint64_t v26 = v18;
    }
    else {
      unint64_t v26 = *(void *)(a4 + 16);
    }
    unint64_t v27 = a3 / v26;
    unint64_t v28 = a3 / v26 + a2 / v26;
    do
    {
      unint64_t v29 = v28;
      unint64_t v30 = (a2 - (v25 + v28--)) / v26 + v27;
    }
    while (v29 >= v30);
    uint64_t v31 = v29 + 1;
    if (v29 + 1 < (a2 - v25 + ~v29) / v26 + v27) {
      boost::movelib::detail_adaptive::adaptive_merge_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
    }
    unint64_t v48 = a3 + a2;
    if (v8)
    {
      unint64_t v32 = (a2 - v25) / v26 + v27;
      unint64_t v33 = *(void *)a4 + 4 * v8;
      unint64_t v34 = (*(void *)a4 + 4 * v26 + 7) & 0xFFFFFFFFFFFFFFF8;
      BOOL v16 = v33 >= v34;
      unint64_t v35 = (v33 - v34) >> 3;
      if (v16 && v32 <= v35) {
        uint64_t v31 = 0;
      }
    }
    unint64_t v38 = v31 + v25;
    std::string::size_type v39 = (char *)&a1[a2];
    unint64_t v40 = boost::movelib::detail_adaptive::collect_unique<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((char *)a1, v39, v31 + v25, (int **)a4);
    uint64_t v41 = v40;
    if (v40 != v31 + v25 && v40 <= 3)
    {
      boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v7, &v7[4 * v40], &v7[4 * a2], v40, (v39 - &v7[4 * v40]) >> 2);
      unint64_t v21 = &v39[4 * a3];
      a1 = (unsigned int *)v7;
      uint64_t v20 = &v7[4 * a2];
      goto LABEL_45;
    }
    BOOL v49 = v40 == v38;
    if (v40 == v38)
    {
      BOOL v42 = *(void *)(a4 + 16) >= v26;
      int v43 = 1;
      unint64_t v44 = v48;
    }
    else
    {
      unint64_t v44 = v48;
      unint64_t v45 = boost::movelib::detail_adaptive::lblock_for_combine<unsigned long>(0, v40, v48, &v49);
      unint64_t v26 = v45;
      BOOL v42 = 0;
      if (v49) {
        unint64_t v25 = v45;
      }
      else {
        unint64_t v25 = 0;
      }
      int v43 = v49;
      uint64_t v31 = v41;
    }
    BOOL result = boost::movelib::detail_adaptive::adaptive_merge_combine_blocks<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((int *)v7, a2, a3, v41, v31, v26, v43, v42, (uint64_t *)a4);
    if (v41 != v25 || !v42)
    {
      if (*(void *)(a4 + 8)) {
        *(void *)(a4 + 8) = 0;
      }
      if (v41 != v25 && v42) {
        unint64_t v46 = v25;
      }
      else {
        unint64_t v46 = 0;
      }
      uint64_t v47 = &v7[4 * (v41 - v46)];
      boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort((uint64_t)v7, (uint64_t)v47);
      return (unsigned int *)boost::movelib::detail_adaptive::stable_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((unsigned int *)v7, v47, &v7[4 * v44], a4);
    }
  }
  return result;
}

unint64_t boost::movelib::detail_adaptive::collect_unique<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(char *a1, char *a2, unint64_t a3, int **a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v7 = a1;
  unint64_t v8 = a1 + 4;
  if ((unint64_t)a4[2] >= a3)
  {
    unint64_t v21 = boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>(a4, a1);
    unint64_t v9 = 1;
    if (v8 != a2 && a3 >= 2)
    {
      uint64_t v22 = v21;
      unint64_t v9 = 1;
      uint64_t v23 = v7;
      uint64_t v24 = v8;
      do
      {
        uint64_t v25 = (uint64_t)&(*a4)[(void)a4[1]];
        unint64_t v26 = v22;
        if ((unsigned int *)v25 == v22) {
          goto LABEL_32;
        }
        unint64_t v26 = (unsigned int *)&(*a4)[(void)a4[1]];
        unint64_t v27 = (v25 - (uint64_t)v22) >> 2;
        unsigned int v28 = *(_DWORD *)v24;
        unint64_t v29 = v22;
        do
        {
          unint64_t v30 = v27 >> 1;
          uint64_t v31 = &v29[v27 >> 1];
          unsigned int v33 = *v31;
          unint64_t v32 = v31 + 1;
          v27 += ~(v27 >> 1);
          if (v33 >= v28) {
            unint64_t v27 = v30;
          }
          else {
            unint64_t v29 = v32;
          }
        }
        while (v27);
        if (v29 == (unsigned int *)v25 || (unint64_t v26 = v29, v28 < *v29))
        {
LABEL_32:
          while (v8 != v24)
          {
            int v34 = *(_DWORD *)v8;
            v8 += 4;
            *(_DWORD *)uint64_t v23 = v34;
            v23 += 4;
          }
          unint64_t v8 = v24 + 4;
          ++v9;
          boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::insert<unsigned int *>(a4, v26, v24);
        }
        v24 += 4;
      }
      while (v24 != a2 && v9 < a3);
      if (v23 != v7)
      {
        unint64_t v35 = v23;
        do
        {
          int v36 = *((_DWORD *)v35 - 1);
          v35 -= 4;
          *(_DWORD *)&v23[4 * v9 - 4] = v36;
          uint64_t v23 = v35;
        }
        while (v35 != v7);
      }
    }
    uint64_t v37 = a4[1];
    if (v37)
    {
      unint64_t v38 = *a4;
      uint64_t v39 = 4 * (void)v37;
      do
      {
        int v40 = *v38++;
        *(_DWORD *)uint64_t v7 = v40;
        v7 += 4;
        v39 -= 4;
      }
      while (v39);
    }
  }
  else
  {
    unint64_t v9 = 1;
    unint64_t v10 = a1;
    if (v8 != a2 && a3 >= 2)
    {
      unint64_t v9 = 1;
      unint64_t v10 = a1;
      unint64_t v11 = a1 + 4;
      do
      {
        int v12 = v10;
        if (v8 == v10) {
          goto LABEL_14;
        }
        unint64_t v13 = (v8 - v10) >> 2;
        unsigned int v14 = *(_DWORD *)v11;
        long long v15 = v10;
        do
        {
          unint64_t v16 = v13 >> 1;
          uint64_t v17 = &v15[4 * (v13 >> 1)];
          unsigned int v19 = *(_DWORD *)v17;
          unint64_t v18 = v17 + 4;
          v13 += ~(v13 >> 1);
          if (v19 >= v14) {
            unint64_t v13 = v16;
          }
          else {
            long long v15 = v18;
          }
        }
        while (v13);
        int v12 = v8;
        if (v15 == v8 || (int v12 = v15, v14 < *(_DWORD *)v15))
        {
LABEL_14:
          uint64_t v20 = boost::movelib::rotate_gcd<unsigned int *>(v10, v8, v11);
          unint64_t v8 = v11 + 4;
          ++v9;
          boost::movelib::rotate_gcd<unsigned int *>(&v12[v20 - v10], v11, v11 + 4);
          unint64_t v10 = v20;
        }
        v11 += 4;
      }
      while (v11 != a2 && v9 < a3);
    }
    boost::movelib::rotate_gcd<unsigned int *>(v7, v10, &v10[4 * v9]);
  }
  return v9;
}

unint64_t boost::movelib::detail_adaptive::lblock_for_combine<unsigned long>(unint64_t result, unint64_t a2, unint64_t a3, BOOL *a4)
{
  if (a3 <= 1) {
    boost::movelib::detail_adaptive::lblock_for_combine<unsigned long>();
  }
  if (result)
  {
    *a4 = 1;
    return result;
  }
  if (a2 <= 3) {
    boost::movelib::detail_adaptive::lblock_for_combine<unsigned long>();
  }
  unint64_t v4 = a2 - (a2 >> 1);
  if (v4 < 4)
  {
    *a4 = 0;
    return a3 / a2;
  }
  BOOL result = a2 >> 1;
  *a4 = v4 >= a3 / (a2 >> 1);
  if (v4 < a3 / (a2 >> 1)) {
    return a3 / a2;
  }
  return result;
}

unsigned int *boost::movelib::detail_adaptive::adaptive_merge_combine_blocks<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7, int a8, uint64_t *a9)
{
  uint64_t v11 = a3 + a2 - a4;
  unint64_t v12 = a2 - a4;
  if (a5)
  {
    unint64_t v13 = &a1[a4];
    if (a8)
    {
      unint64_t v14 = a9[1];
      if (v14 < a6)
      {
        boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until(a9, a6, a1);
        unint64_t v14 = a9[1];
      }
      if (v14 < a6) {
        boost::movelib::detail_adaptive::adaptive_merge_combine_blocks<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
      }
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((uint64_t)a1, v11, v12, a6, (uint64_t)a9, &v23, (unint64_t *)&v22, (unint64_t *)&v21, &v20, 1);
      return boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>(a1, v13, a6, v21, v23, v22, v20, (int *)*a9);
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((uint64_t)a1, a3 + a2 - a4, v12, a6, (uint64_t)a9, &v23, (unint64_t *)&v22, (unint64_t *)&v21, &v20, 1);
      if (a7) {
        return boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op,unsigned int *>(a1, v13, a6, v21, v23, v22, v20, &v13[-a6]);
      }
      else {
        return (unsigned int *)boost::movelib::detail_adaptive::merge_blocks_bufferless<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(a1, (char *)v13, a6, v21, v23, v22, v20);
      }
    }
  }
  else
  {
    unint64_t v16 = a9[1];
    if (v16 <= a6)
    {
      if (v16 < a6) {
        boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until(a9, a6, a1);
      }
    }
    else
    {
      a9[1] = a6;
    }
    uint64_t v18 = *a9 + 4 * a6;
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    unsigned int v19 = (void *)((v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    boost::movelib::detail_adaptive::combine_params<unsigned long *,boost::movelib::detail_adaptive::less,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((uint64_t)v19, v11, v12, a6, (uint64_t)a9, &v23, (unint64_t *)&v22, (unint64_t *)&v21, &v20, 1);
    if (a9[1] < a6) {
      boost::movelib::detail_adaptive::adaptive_merge_combine_blocks<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
    }
    BOOL result = boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned long *,boost::movelib::detail_adaptive::less,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>(v19, a1, a6, v21, v23, v22, v20, (int *)*a9);
    if (a9[1]) {
      a9[1] = 0;
    }
  }
  return result;
}

unsigned int *boost::movelib::op_buffered_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(unsigned int *result, char *a2, char *a3, char **a4)
{
  if (result != (unsigned int *)a2 && a2 != a3)
  {
    unsigned int v6 = *((_DWORD *)a2 - 1);
    if (*(_DWORD *)a2 < v6)
    {
      unint64_t v8 = (int *)result;
      if (a2 - (char *)result <= (unint64_t)(a3 - a2))
      {
        unint64_t v17 = (a2 - (char *)result) >> 2;
        do
        {
          unint64_t v18 = v17 >> 1;
          unsigned int v19 = &v8[v17 >> 1];
          unsigned int v21 = *v19;
          unint64_t v20 = v19 + 1;
          v17 += ~(v17 >> 1);
          if (*(_DWORD *)a2 < v21) {
            unint64_t v17 = v18;
          }
          else {
            unint64_t v8 = v20;
          }
        }
        while (v17);
        boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::move_assign<unsigned int *>((uint64_t)a4, v8, (a2 - (char *)v8) >> 2);
        uint64_t v22 = *a4;
        unint64_t v23 = &(*a4)[4 * (void)a4[1]];
        return (unsigned int *)boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>(v22, v23, (char *)v8, a2, a3);
      }
      else
      {
        unint64_t v9 = (a3 - a2) >> 2;
        uint64_t v10 = (uint64_t)a2;
        do
        {
          unint64_t v11 = v9 >> 1;
          unint64_t v12 = (unsigned int *)(v10 + 4 * (v9 >> 1));
          unsigned int v14 = *v12;
          unint64_t v13 = v12 + 1;
          v9 += ~(v9 >> 1);
          if (v14 >= v6) {
            unint64_t v9 = v11;
          }
          else {
            uint64_t v10 = (uint64_t)v13;
          }
        }
        while (v9);
        boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::move_assign<unsigned int *>((uint64_t)a4, (int *)a2, (v10 - (uint64_t)a2) >> 2);
        uint64_t v15 = (uint64_t)*a4;
        uint64_t v16 = (uint64_t)&(*a4)[4 * (void)a4[1]];
        return boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>((unsigned int *)v8, (unsigned int *)a2, v10, v15, v16);
      }
    }
  }
  return result;
}

uint64_t boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::move_assign<unsigned int *>(uint64_t result, int *a2, unint64_t a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 >= a3)
  {
    if (a3)
    {
      unint64_t v11 = *(_DWORD **)result;
      uint64_t v12 = 4 * a3;
      do
      {
        int v13 = *a2++;
        *v11++ = v13;
        v12 -= 4;
      }
      while (v12);
    }
  }
  else
  {
    unint64_t v4 = *(_DWORD **)result;
    if (v3)
    {
      uint64_t v5 = 4 * v3;
      unsigned int v6 = a2;
      do
      {
        int v7 = *v6++;
        *v4++ = v7;
        v5 -= 4;
      }
      while (v5);
    }
    if (v3 != a3)
    {
      unint64_t v8 = &a2[v3];
      uint64_t v9 = 4 * a3 - 4 * v3;
      do
      {
        int v10 = *v8++;
        *v4++ = v10;
        v9 -= 4;
      }
      while (v9);
    }
  }
  *(void *)(result + 8) = a3;
  return result;
}

char *boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>(char *result, char *a2, char *a3, char *a4, char *a5)
{
  if (a2 - result != a4 - a3) {
    boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>();
  }
  while (result != a2)
  {
    if (a4 == a5)
    {
      uint64_t v7 = 0;
      do
      {
        *(_DWORD *)&a3[v7] = *(_DWORD *)&result[v7];
        v7 += 4;
      }
      while (&result[v7] != a2);
      if (&a3[v7] != a5) {
        boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>();
      }
      return result;
    }
    int v5 = *(_DWORD *)a4;
    BOOL v6 = *(_DWORD *)a4 >= *(_DWORD *)result;
    if (*(_DWORD *)a4 >= *(_DWORD *)result) {
      int v5 = *(_DWORD *)result;
    }
    a4 += 4 * (*(_DWORD *)a4 < *(_DWORD *)result);
    result += 4 * v6;
    *(_DWORD *)a3 = v5;
    a3 += 4;
  }
  return result;
}

unsigned int *boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 - (void)a2 != a5 - a4) {
    boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>();
  }
  if (a5 != a4)
  {
    int v5 = (unsigned int *)(a3 - 4);
    while (a2 != result)
    {
      unsigned int v6 = *(_DWORD *)(a5 - 4);
      unsigned int v7 = *(a2 - 1);
      BOOL v8 = v6 >= v7;
      if (v6 <= v7) {
        unsigned int v6 = *(a2 - 1);
      }
      if (v8) {
        a5 -= 4;
      }
      else {
        --a2;
      }
      *v5-- = v6;
      if (a5 == a4) {
        return result;
      }
    }
    uint64_t v9 = 0;
    do
    {
      v5[v9] = *(_DWORD *)(a5 + v9 * 4 - 4);
      --v9;
    }
    while (a5 + v9 * 4 != a4);
    if (&v5[v9 + 1] != result) {
      boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>();
    }
  }
  return result;
}

char *boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(char *result, char *a2, char *a3, unint64_t a4, unint64_t a5)
{
  if (a5)
  {
    unint64_t v5 = a4;
    if (a4)
    {
      unint64_t v6 = a5;
      unsigned int v7 = result;
      while ((v6 | v5) != 1)
      {
        if (v6 + v5 <= 0xF)
        {
          return boost::movelib::merge_bufferless_ON2<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v7, a2, a3);
        }
        if (v5 <= v6)
        {
          unint64_t v16 = v6 >> 1;
          int v10 = &a2[4 * (v6 >> 1)];
          if (a2 == v7)
          {
            uint64_t v9 = v7;
          }
          else
          {
            unint64_t v17 = (a2 - v7) >> 2;
            uint64_t v9 = v7;
            do
            {
              unint64_t v18 = v17 >> 1;
              unsigned int v19 = &v9[4 * (v17 >> 1)];
              unsigned int v21 = *(_DWORD *)v19;
              unint64_t v20 = v19 + 4;
              v17 += ~(v17 >> 1);
              if (*(_DWORD *)v10 < v21) {
                unint64_t v17 = v18;
              }
              else {
                uint64_t v9 = v20;
              }
            }
            while (v17);
          }
          uint64_t v8 = (v9 - v7) >> 2;
        }
        else
        {
          uint64_t v8 = v5 >> 1;
          uint64_t v9 = &v7[4 * (v5 >> 1)];
          int v10 = a3;
          if (a3 != a2)
          {
            unint64_t v11 = (a3 - a2) >> 2;
            int v10 = a2;
            do
            {
              unint64_t v12 = v11 >> 1;
              int v13 = &v10[4 * (v11 >> 1)];
              unsigned int v15 = *(_DWORD *)v13;
              unsigned int v14 = v13 + 4;
              v11 += ~(v11 >> 1);
              if (v15 >= *(_DWORD *)v9) {
                unint64_t v11 = v12;
              }
              else {
                int v10 = v14;
              }
            }
            while (v11);
          }
          unint64_t v16 = (v10 - a2) >> 2;
        }
        uint64_t v22 = boost::movelib::rotate_gcd<unsigned int *>(v9, a2, v10);
        unint64_t v23 = v22;
        if (v16 + v8 >= v6 + v5 - (v16 + v8))
        {
          BOOL result = (char *)boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v22, v10, a3, v5 - v8, v6 - v16);
          int v10 = v9;
          a3 = v23;
        }
        else
        {
          BOOL result = (char *)boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v7, v9, v22, v8, v16);
          uint64_t v8 = v5 - v8;
          unint64_t v16 = v6 - v16;
          unsigned int v7 = v23;
        }
        if (v16) {
          BOOL v24 = v8 == 0;
        }
        else {
          BOOL v24 = 1;
        }
        unint64_t v6 = v16;
        unint64_t v5 = v8;
        a2 = v10;
        if (v24) {
          return result;
        }
      }
      int v25 = *(_DWORD *)v7;
      if (*(_DWORD *)a2 < *(_DWORD *)v7)
      {
        *(_DWORD *)unsigned int v7 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v25;
      }
    }
  }
  return result;
}

char *boost::movelib::merge_bufferless_ON2<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(char *result, char *a2, char *a3)
{
  unint64_t v3 = a3;
  unint64_t v4 = result;
  if (a2 - result >= a3 - a2)
  {
    if (a2 == a3) {
      return result;
    }
    while (a2 != v4)
    {
      unint64_t v13 = (a2 - v4) >> 2;
      unsigned int v14 = v4;
      do
      {
        unint64_t v15 = v13 >> 1;
        unint64_t v16 = &v14[4 * (v13 >> 1)];
        unsigned int v18 = *(_DWORD *)v16;
        unint64_t v17 = v16 + 4;
        v13 += ~(v13 >> 1);
        if (*((_DWORD *)v3 - 1) < v18) {
          unint64_t v13 = v15;
        }
        else {
          unsigned int v14 = v17;
        }
      }
      while (v13);
      BOOL result = boost::movelib::rotate_gcd<unsigned int *>(v14, a2, v3);
      if (v14 != v4)
      {
        unsigned int v19 = result - 4;
        while (v19 != v14)
        {
          unsigned int v20 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          if (v20 < *((_DWORD *)v14 - 1))
          {
            unint64_t v3 = v19 + 4;
            goto LABEL_27;
          }
        }
        unint64_t v3 = v14;
LABEL_27:
        a2 = v14;
        if (v14 != v3) {
          continue;
        }
      }
      return result;
    }
    unsigned int v21 = v4;
    goto LABEL_30;
  }
  if (result == a2) {
    return result;
  }
LABEL_3:
  if (a2 == v3)
  {
    unsigned int v21 = v4;
    a2 = v3;
LABEL_30:
    return boost::movelib::rotate_gcd<unsigned int *>(v21, a2, v3);
  }
  unint64_t v5 = (v3 - a2) >> 2;
  unint64_t v6 = a2;
  do
  {
    unint64_t v7 = v5 >> 1;
    uint64_t v8 = &v6[4 * (v5 >> 1)];
    unsigned int v10 = *(_DWORD *)v8;
    uint64_t v9 = v8 + 4;
    v5 += ~(v5 >> 1);
    if (v10 >= *(_DWORD *)v4) {
      unint64_t v5 = v7;
    }
    else {
      unint64_t v6 = v9;
    }
  }
  while (v5);
  BOOL result = boost::movelib::rotate_gcd<unsigned int *>(v4, a2, v6);
  if (v6 != v3)
  {
    unint64_t v11 = result + 4;
    while (v11 != v6)
    {
      unsigned int v12 = *(_DWORD *)v11;
      v11 += 4;
      if (*(_DWORD *)v6 < v12)
      {
        unint64_t v4 = v11 - 4;
        a2 = v6;
        goto LABEL_3;
      }
    }
  }
  return result;
}

char *boost::movelib::rotate_gcd<unsigned int *>(char *a1, char *a2, char *a3)
{
  unint64_t v3 = a3;
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    if (a2 == a3)
    {
      return a1;
    }
    else
    {
      unint64_t v5 = &a3[-(a2 - a1)];
      if (v5 == a2)
      {
        uint64_t v15 = 0;
        do
        {
          int v16 = *(_DWORD *)&a1[v15];
          *(_DWORD *)&a1[v15] = *(_DWORD *)&a2[v15];
          *(_DWORD *)&a2[v15] = v16;
          v15 += 4;
        }
        while (&a1[v15] != a2);
        return a2;
      }
      else
      {
        unint64_t v6 = (a2 - a1) >> 2;
        unint64_t v7 = boost::movelib::gcd<unsigned long>((a3 - a1) >> 2, v6);
        if (v7)
        {
          uint64_t v8 = &v4[4 * v7];
          uint64_t v9 = &v4[4 * v6];
          do
          {
            int v10 = *(_DWORD *)v4;
            unint64_t v11 = &v4[4 * v6];
            unsigned int v12 = v4;
            do
            {
              unint64_t v13 = v11;
              *(_DWORD *)unsigned int v12 = *(_DWORD *)v11;
              uint64_t v14 = v3 - v11;
              if (v6 >= v14 >> 2) {
                unint64_t v11 = &v9[-v14];
              }
              else {
                unint64_t v11 = &v13[4 * v6];
              }
              unsigned int v12 = v13;
            }
            while (v11 != v4);
            *(_DWORD *)unint64_t v13 = v10;
            v4 += 4;
          }
          while (v4 != v8);
        }
        return v5;
      }
    }
  }
  return v3;
}

unint64_t boost::movelib::gcd<unsigned long>(unint64_t result, unint64_t a2)
{
  if ((a2 - 1) & a2 | (result - 1) & result)
  {
    if ((a2 | result))
    {
      uint64_t v2 = 1;
      if (!result) {
        return (a2 + result) * v2;
      }
    }
    else
    {
      uint64_t v2 = 1;
      do
      {
        v2 *= 2;
        result >>= 1;
        a2 >>= 1;
      }
      while (((a2 | result) & 1) == 0);
      if (!result) {
        return (a2 + result) * v2;
      }
    }
    if (a2)
    {
      do
      {
        unint64_t v3 = (a2 - result) >> 1;
        unint64_t v4 = (result - a2) >> 1;
        if (result >= a2) {
          unint64_t v3 = a2;
        }
        else {
          unint64_t v4 = result;
        }
        if ((a2 & 1) == 0)
        {
          unint64_t v4 = result;
          unint64_t v3 = a2 >> 1;
        }
        BOOL v5 = (result & 1) == 0;
        if (result) {
          BOOL result = v4;
        }
        else {
          result >>= 1;
        }
        if (!v5) {
          a2 = v3;
        }
      }
      while (result && a2);
    }
    return (a2 + result) * v2;
  }
  if (result >= a2) {
    return a2;
  }
  return result;
}

_DWORD *boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>(void *a1, _DWORD *a2)
{
  unint64_t v2 = a1[1];
  if (v2 >= a1[2]) {
    boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>();
  }
  unint64_t v3 = (_DWORD *)(*a1 + 4 * v2);
  *unint64_t v3 = *a2;
  a1[1] = v2 + 1;
  return v3;
}

_DWORD *boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::insert<unsigned int *>(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5 = *a1 + 4 * a1[1];
  if ((_DWORD *)v5 == a2)
  {
    return boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>(a1, a3);
  }
  else
  {
    BOOL result = boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>(a1, (_DWORD *)(v5 - 4));
    uint64_t v8 = *a1 + 4 * a1[1];
    if ((_DWORD *)(v8 - 8) != a2)
    {
      uint64_t v9 = (_DWORD *)(v8 - 12);
      do
        v9[1] = *v9;
      while (v9-- != a2);
    }
    *a2 = *a3;
  }
  return result;
}

uint64_t *boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until(uint64_t *result, unint64_t a2, int *a3)
{
  unint64_t v3 = result[1];
  if (v3 >= result[2]) {
    boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until();
  }
  if (v3 < a2)
  {
    uint64_t v4 = *result;
    int v5 = *a3;
    *(_DWORD *)(*result + 4 * v3) = *a3;
    if (v3 + 1 != a2)
    {
      unint64_t v6 = ~v3 + a2;
      unint64_t v7 = (_DWORD *)(v4 + 4 * v3 + 4);
      do
      {
        *v7++ = v5;
        --v6;
      }
      while (v6);
    }
    result[1] = a2;
    *a3 = v5;
  }
  return result;
}

uint64_t boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6, unint64_t *a7, unint64_t *a8, unint64_t *a9, char a10)
{
  unint64_t v10 = a3 / a4;
  *a8 = a3 % a4;
  unint64_t v11 = (a2 - a3 % a4) % a4;
  *a9 = v11;
  unint64_t v12 = a2 - *a8 - v11;
  unint64_t v13 = v12 / a4;
  if (v12 % a4) {
    boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
  }
  *a6 = v10;
  unint64_t v14 = v13 - v10;
  *a7 = v14;
  unint64_t v15 = *a6;
  if (v13 < *a6) {
    boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
  }
  if (a10)
  {
    return boost::movelib::detail_adaptive::initialize_keys<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(result, result + 4 * (v15 + v14));
  }
  return result;
}

unsigned int *boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v10 = (uint64_t)&a1[a5];
  uint64_t v85 = a8;
  char v86 = a8;
  unint64_t v11 = &a2[a4];
  unint64_t v84 = v11;
  unint64_t v12 = a6 + a5;
  unint64_t v68 = &v11[(a6 + a5) * a3];
  if (!(a6 + a5))
  {
    LOBYTE(v15) = 1;
    goto LABEL_71;
  }
  if (a6) {
    unint64_t v13 = a5;
  }
  else {
    unint64_t v13 = 0;
  }
  if (v13 + 1 < v12) {
    unint64_t v14 = v13 + 1;
  }
  else {
    unint64_t v14 = a6 + a5;
  }
  unsigned int v70 = &a1[v12];
  unint64_t v66 = a5;
  uint64_t v67 = 4 * a3;
  int v15 = 1;
  unint64_t v16 = a5;
  char v64 = a1;
  uint64_t v65 = a6;
  uint64_t v17 = a6;
  unsigned int v18 = a1;
  unsigned int v19 = v11;
  uint64_t v73 = a8;
  while (1)
  {
    int v76 = v19;
    int v75 = v15;
    uint64_t v20 = v8;
    unsigned int v21 = (_DWORD *)v10;
    unint64_t v22 = boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((uint64_t)v18, (uint64_t)v11, v8, v13, v14);
    uint64_t v10 = (uint64_t)v21;
    int v15 = v75;
    uint64_t v8 = v20;
    unint64_t v23 = v22;
    unint64_t v24 = v22 + 2;
    if (v14 > v22 + 2) {
      unint64_t v24 = v14;
    }
    if (v24 >= v12) {
      unint64_t v25 = v12;
    }
    else {
      unint64_t v25 = v24;
    }
    unint64_t v26 = v84;
    unint64_t v27 = v85;
    unsigned int v28 = &v84[v23 * v20];
    unint64_t v11 = &v84[v20];
    unint64_t v29 = v86;
    unint64_t v74 = v12;
    if (v17) {
      goto LABEL_17;
    }
    if (a7)
    {
      if (*v68 < *v28) {
        goto LABEL_66;
      }
LABEL_17:
      unint64_t v30 = &v18[v23];
      if (v21 == v70)
      {
        BOOL v31 = 1;
        unint64_t v32 = v76;
        if (v75) {
          goto LABEL_25;
        }
      }
      else
      {
        BOOL v31 = *v30 < *v21;
        unint64_t v32 = v76;
        if (((v75 ^ v31) & 1) == 0) {
          goto LABEL_25;
        }
      }
      goto LABEL_37;
    }
    if (v75) {
      break;
    }
    unint64_t v30 = &v18[v23];
    unint64_t v32 = v76;
    if (v21 == v70)
    {
      BOOL v31 = 1;
    }
    else
    {
      BOOL v31 = *v30 < *v21;
      if (((v75 ^ v31) & 1) == 0)
      {
LABEL_25:
        a8 = v73;
        if (v86 != v85)
        {
          do
          {
            int v33 = *v29++;
            *v9++ = v33;
          }
          while (v29 != v27);
          uint64_t v85 = v73;
          char v86 = v73;
          if (v9 != v32) {
            boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
          }
        }
        char v86 = v73;
        unint64_t v27 = v73;
        if (v23 * v20)
        {
          if (v20)
          {
            uint64_t v34 = v67;
            uint64_t v35 = v67 * v23;
            unint64_t v27 = v73;
            int v36 = v26;
            do
            {
              *v27++ = *(int *)((char *)v36 + v35);
              *(int *)((char *)v36 + v35) = *v36;
              ++v36;
              v34 -= 4;
            }
            while (v34);
          }
          int v37 = *v30;
          _DWORD *v30 = *v18;
          *unsigned int v18 = v37;
          unint64_t v38 = v18;
          if (v21 == v30 || (unint64_t v38 = v30, v21 == v18)) {
            uint64_t v10 = (uint64_t)v38;
          }
        }
        uint64_t v85 = v27;
        unint64_t v29 = v73;
        unint64_t v39 = v74;
        goto LABEL_54;
      }
    }
LABEL_37:
    BOOL v72 = v31;
    unint64_t v71 = v25;
    int v40 = v9;
    uint64_t v41 = &v84[v20];
    BOOL v42 = &v84[v23 * v20];
    unint64_t v26 = boost::movelib::detail_adaptive::op_partial_merge_and_save<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(v40, v32, &v84, v11, v28, &v86, &v85, v75 & 1);
    unint64_t v32 = v76;
    uint64_t v8 = v20;
    unint64_t v44 = v85;
    int v43 = v86;
    if (v85 != v86 && (char *)v85 - (char *)v86 != (char *)&v76[v20] - (char *)v26) {
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
    }
    if (v86 == v85)
    {
      a8 = v73;
      char v86 = v73;
      unint64_t v48 = v84;
      unint64_t v11 = v41;
      BOOL v49 = (int *)((char *)&v42[v20] + (char *)v84 - (char *)v41);
      uint64_t v10 = (uint64_t)v21;
      unint64_t v25 = v71;
      BOOL v31 = v72;
      unint64_t v27 = v73;
      if (v84 != v49)
      {
        if (v84 != v41)
        {
          unint64_t v27 = v73;
          do
          {
            *v27++ = *v49;
            int v50 = *v48++;
            *v49++ = v50;
          }
          while (v48 != v41);
        }
        int v51 = *v30;
        _DWORD *v30 = *v18;
        *unsigned int v18 = v51;
        uint64_t v52 = v18;
        if (v21 == v30 || (uint64_t v52 = v30, v21 == v18)) {
          uint64_t v10 = (uint64_t)v52;
        }
      }
      int v45 = v75;
      uint64_t v85 = v27;
      unint64_t v29 = v73;
    }
    else
    {
      int v45 = v75;
      a8 = v73;
      uint64_t v10 = (uint64_t)v21;
      unint64_t v11 = v41;
      unint64_t v25 = v71;
      BOOL v31 = v72;
      if (v23 && ((v46 = *v30, *v30 = *v18, *unsigned int v18 = v46, v47 = v18, v21 == v30) || (v47 = v30, v21 == v18)))
      {
        unint64_t v27 = v44;
        unint64_t v29 = v43;
        uint64_t v10 = (uint64_t)v47;
      }
      else
      {
        unint64_t v27 = v44;
        unint64_t v29 = v43;
      }
    }
    unint64_t v39 = v74;
    int v15 = v45 ^ (v43 == v44);
LABEL_54:
    if (v16) {
      BOOL v53 = v31;
    }
    else {
      BOOL v53 = 0;
    }
    if (v17) {
      BOOL v54 = !v31;
    }
    else {
      BOOL v54 = 0;
    }
    if (!v53 && !v54) {
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
    }
    v16 -= v31;
    v17 -= !v31;
    unsigned int v19 = &v32[v8];
    unint64_t v84 = v11;
    ++v18;
    v13 -= v13 != 0;
    unint64_t v14 = v25 - (v25 != 0);
    uint64_t v9 = v26;
    unint64_t v12 = v39 - 1;
    if (!v12)
    {
      uint64_t v9 = v26;
      a6 = v65;
      a5 = v66;
      a1 = v64;
      goto LABEL_67;
    }
  }
  LOBYTE(v15) = 1;
LABEL_66:
  a8 = v73;
  a6 = v65;
  a5 = v66;
  a1 = v64;
  unsigned int v19 = v76;
LABEL_67:
  if (v29 != v27)
  {
    uint64_t v55 = 0;
    do
    {
      v9[v55] = v29[v55];
      ++v55;
    }
    while (&v29[v55] != v27);
  }
  unint64_t v11 = v19;
LABEL_71:
  uint64_t v56 = (unsigned int *)v11;
  char v57 = v15;
  if (a7)
  {
    long long v58 = v68;
    uint64_t v59 = 4 * a7;
    __int16 v60 = a8;
    do
    {
      int v61 = *v58++;
      *v60++ = v61;
      v59 -= 4;
    }
    while (v59);
  }
  uint64_t v85 = &a8[a7];
  char v86 = a8;
  uint64_t v83 = v85;
  uint64_t v80 = v10;
  uint64_t v81 = &a1[a6 + a5];
  int v79 = v68;
  uint64_t v77 = (unsigned int *)&v68[a7];
  uint64_t v78 = a8;
  boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>((uint64_t *)&v81, &v80, 0, (uint64_t *)&v79, (uint64_t *)&v83, (uint64_t *)&v78, &v77, v8, (unsigned int **)&v82, v12, 0, v12, 0, 1u);
  uint64_t v85 = v83;
  if (v82 - (char *)v56 != (char *)v83 - (char *)v86) {
    boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
  }
  if (v57) {
    __int16 v62 = (unsigned int *)v9;
  }
  else {
    __int16 v62 = v56;
  }
  return boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>(v62, v56, (uint64_t)v82, (uint64_t)v86, (uint64_t)v83);
}

unsigned int *boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op,unsigned int *>(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v10 = (uint64_t)&a1[a5];
  uint64_t v88 = a8;
  uint64_t v89 = a8;
  unint64_t v11 = &a2[a4];
  uint64_t v87 = v11;
  unint64_t v12 = a6 + a5;
  unint64_t v71 = &v11[(a6 + a5) * a3];
  if (!(a6 + a5))
  {
    LOBYTE(v15) = 1;
    goto LABEL_75;
  }
  if (a6) {
    unint64_t v13 = a5;
  }
  else {
    unint64_t v13 = 0;
  }
  if (v13 + 1 < v12) {
    unint64_t v14 = v13 + 1;
  }
  else {
    unint64_t v14 = a6 + a5;
  }
  unint64_t v74 = &a1[v12];
  unint64_t v69 = a5;
  uint64_t v70 = 4 * a3;
  int v15 = 1;
  unint64_t v16 = a5;
  uint64_t v67 = a1;
  uint64_t v68 = a6;
  uint64_t v17 = a6;
  unsigned int v18 = a1;
  unsigned int v19 = v11;
  int v76 = a8;
  while (1)
  {
    unint64_t v77 = v16;
    uint64_t v20 = v19;
    int v79 = v15;
    uint64_t v21 = v8;
    unint64_t v22 = (_DWORD *)v10;
    unint64_t v23 = boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((uint64_t)v18, (uint64_t)v11, v8, v13, v14);
    uint64_t v10 = (uint64_t)v22;
    int v15 = v79;
    uint64_t v8 = v21;
    unint64_t v24 = v23;
    unint64_t v25 = v23 + 2;
    if (v14 > v23 + 2) {
      unint64_t v25 = v14;
    }
    if (v25 >= v12) {
      unint64_t v26 = v12;
    }
    else {
      unint64_t v26 = v25;
    }
    unint64_t v27 = v87;
    unsigned int v28 = v88;
    unint64_t v29 = &v87[v24 * v21];
    unint64_t v11 = &v87[v21];
    unint64_t v30 = v89;
    unint64_t v78 = v12;
    if (v17) {
      goto LABEL_17;
    }
    if (a7)
    {
      if (*v71 < *v29) {
        goto LABEL_70;
      }
LABEL_17:
      BOOL v31 = &v18[v24];
      if (v22 == v74)
      {
        BOOL v32 = 1;
        int v33 = v20;
        if (v79) {
          goto LABEL_25;
        }
      }
      else
      {
        BOOL v32 = *v31 < *v22;
        int v33 = v20;
        if (((v79 ^ v32) & 1) == 0) {
          goto LABEL_25;
        }
      }
      goto LABEL_38;
    }
    if (v79) {
      break;
    }
    BOOL v31 = &v18[v24];
    int v33 = v20;
    if (v22 == v74)
    {
      BOOL v32 = 1;
    }
    else
    {
      BOOL v32 = *v31 < *v22;
      if (((v79 ^ v32) & 1) == 0)
      {
LABEL_25:
        a8 = v76;
        if (v89 != v88)
        {
          do
          {
            int v34 = *v30;
            *v30++ = *v9;
            *v9++ = v34;
          }
          while (v30 != v28);
          uint64_t v88 = v76;
          uint64_t v89 = v76;
          if (v9 != v33) {
            boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
          }
        }
        uint64_t v89 = v76;
        unsigned int v28 = v76;
        if (v24 * v21)
        {
          if (v21)
          {
            uint64_t v35 = v70;
            uint64_t v36 = v70 * v24;
            unsigned int v28 = v76;
            int v37 = v27;
            do
            {
              int v38 = *v28;
              *v28++ = *(int *)((char *)v37 + v36);
              *(int *)((char *)v37 + v36) = *v37;
              *v37++ = v38;
              v35 -= 4;
            }
            while (v35);
          }
          int v39 = *v31;
          _DWORD *v31 = *v18;
          *unsigned int v18 = v39;
          int v40 = v18;
          unint64_t v41 = v77;
          if (v22 == v31 || (int v40 = v31, v22 == v18)) {
            uint64_t v10 = (uint64_t)v40;
          }
        }
        else
        {
          unint64_t v41 = v77;
        }
        uint64_t v88 = v28;
        unint64_t v30 = v76;
        goto LABEL_58;
      }
    }
LABEL_38:
    BOOL v75 = v32;
    uint64_t v73 = v31;
    BOOL v42 = v9;
    int v43 = &v87[v21];
    unint64_t v44 = &v87[v24 * v21];
    unint64_t v27 = boost::movelib::detail_adaptive::op_partial_merge_and_save<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(v42, v33, &v87, v11, v29, &v89, &v88, v79 & 1);
    int v33 = v20;
    uint64_t v8 = v21;
    int v46 = v88;
    int v45 = v89;
    if (v88 != v89 && (char *)v88 - (char *)v89 != (char *)&v20[v21] - (char *)v27) {
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
    }
    if (v89 == v88)
    {
      a8 = v76;
      uint64_t v89 = v76;
      int v50 = v87;
      unint64_t v11 = v43;
      int v51 = (int *)((char *)&v44[v21] + (char *)v87 - (char *)v43);
      uint64_t v10 = (uint64_t)v22;
      BOOL v32 = v75;
      unsigned int v28 = v76;
      if (v87 == v51)
      {
        int v47 = v79;
        unint64_t v41 = v77;
      }
      else
      {
        unint64_t v41 = v77;
        if (v87 != v43)
        {
          unsigned int v28 = v76;
          do
          {
            int v52 = *v28;
            *v28++ = *v51;
            *v51++ = *v50;
            *v50++ = v52;
          }
          while (v50 != v43);
        }
        int v53 = *v73;
        *uint64_t v73 = *v18;
        *unsigned int v18 = v53;
        BOOL v54 = v18;
        if (v22 == v73 || (BOOL v54 = v73, v22 == v18)) {
          uint64_t v10 = (uint64_t)v54;
        }
        int v47 = v79;
      }
      uint64_t v88 = v28;
      unint64_t v30 = v76;
      unint64_t v12 = v78;
    }
    else
    {
      int v47 = v79;
      a8 = v76;
      uint64_t v10 = (uint64_t)v22;
      unint64_t v11 = v43;
      BOOL v32 = v75;
      if (v24 && ((v48 = *v73, *v73 = *v18, *unsigned int v18 = v48, v49 = v18, v22 == v73) || (v49 = v73, v22 == v18)))
      {
        unsigned int v28 = v46;
        unint64_t v30 = v45;
        uint64_t v10 = (uint64_t)v49;
      }
      else
      {
        unsigned int v28 = v46;
        unint64_t v30 = v45;
      }
      unint64_t v41 = v77;
      unint64_t v12 = v78;
    }
    int v15 = v47 ^ (v45 == v46);
LABEL_58:
    if (v41) {
      BOOL v55 = v32;
    }
    else {
      BOOL v55 = 0;
    }
    if (v17) {
      BOOL v56 = !v32;
    }
    else {
      BOOL v56 = 0;
    }
    if (!v55 && !v56) {
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
    }
    unint64_t v16 = v41 - v32;
    v17 -= !v32;
    unsigned int v19 = &v33[v8];
    uint64_t v87 = v11;
    ++v18;
    v13 -= v13 != 0;
    unint64_t v14 = v26 - (v26 != 0);
    uint64_t v9 = v27;
    if (!--v12)
    {
      uint64_t v9 = v27;
      a6 = v68;
      a5 = v69;
      a1 = v67;
      goto LABEL_71;
    }
  }
  LOBYTE(v15) = 1;
LABEL_70:
  a8 = v76;
  a6 = v68;
  a5 = v69;
  a1 = v67;
  unsigned int v19 = v20;
LABEL_71:
  if (v30 != v28)
  {
    uint64_t v57 = 0;
    do
    {
      int v58 = v30[v57];
      v30[v57] = v9[v57];
      v9[v57++] = v58;
    }
    while (&v30[v57] != v28);
  }
  unint64_t v11 = v19;
LABEL_75:
  uint64_t v59 = (unsigned int *)v11;
  char v60 = v15;
  if (a7)
  {
    int v61 = v71;
    uint64_t v62 = 4 * a7;
    uint64_t v63 = a8;
    do
    {
      int v64 = *v61;
      *v61++ = *v63;
      *v63++ = v64;
      v62 -= 4;
    }
    while (v62);
  }
  uint64_t v88 = &a8[a7];
  uint64_t v89 = a8;
  char v86 = (char *)v88;
  uint64_t v83 = v10;
  unint64_t v84 = &a1[a6 + a5];
  uint64_t v82 = v71;
  uint64_t v80 = &v71[a7];
  uint64_t v81 = a8;
  boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>((uint64_t *)&v84, &v83, 0, (uint64_t *)&v82, (uint64_t *)&v86, (uint64_t *)&v81, &v80, v8, (int **)&v85, v12, 0, v12, 0, 0, 1u);
  uint64_t v88 = (int *)v86;
  if (v85 - (char *)v59 != v86 - (char *)v89) {
    boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
  }
  if (v60) {
    uint64_t v65 = (unsigned int *)v9;
  }
  else {
    uint64_t v65 = v59;
  }
  return boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op,unsigned int *,unsigned int *>(v65, v59, (uint64_t)v85, (char *)v89, v86);
}

char *boost::movelib::detail_adaptive::merge_blocks_bufferless<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(_DWORD *a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7 = a2;
  unint64_t v8 = a6 + a5;
  int v39 = &a2[4 * a4 + 4 * (a6 + a5) * a3];
  if (a6 + a5)
  {
    uint64_t v10 = 0;
    uint64_t v37 = a6 + a5;
    uint64_t v11 = (uint64_t)&a2[4 * a4];
    unint64_t v12 = &a1[a5];
    if (a6) {
      unint64_t v13 = a5;
    }
    else {
      unint64_t v13 = 0;
    }
    if (v13 + 1 < v8) {
      unint64_t v14 = v13 + 1;
    }
    else {
      unint64_t v14 = a6 + a5;
    }
    uint64_t v15 = 4 * a3;
    BOOL v16 = 1;
    uint64_t v35 = &a2[4 * a4];
    uint64_t v17 = a1;
    do
    {
      uint64_t v18 = v10;
      unint64_t v19 = boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((uint64_t)v17, v11, a3, v13, v14);
      unint64_t v20 = v19 + 2;
      if (v14 > v19 + 2) {
        unint64_t v20 = v14;
      }
      if (v20 >= v8) {
        unint64_t v20 = v8;
      }
      unint64_t v21 = v19 * a3;
      if (a7 && v16) {
        BOOL v16 = *(_DWORD *)v39 >= *(_DWORD *)(v11 + 4 * v21);
      }
      if (v21)
      {
        if (a3)
        {
          uint64_t v22 = 0;
          unint64_t v23 = v11 + v15 * v19;
          do
          {
            int v24 = *(_DWORD *)(v11 + v22);
            *(_DWORD *)(v11 + v22) = *(_DWORD *)(v23 + v22);
            *(_DWORD *)(v23 + v22) = v24;
            v22 += 4;
          }
          while (v15 != v22);
        }
        unint64_t v25 = &v17[v19];
        int v26 = *v25;
        _DWORD *v25 = *v17;
        _DWORD *v17 = v26;
        unint64_t v27 = v17;
        if (v12 == v25 || (unint64_t v27 = v25, v12 == v17)) {
          unint64_t v12 = v27;
        }
      }
      uint64_t v10 = v18 + v16;
      v11 += v15;
      ++v17;
      v13 -= v13 != 0;
      unint64_t v14 = v20 - (v20 != 0);
      --v8;
    }
    while (v8);
    unsigned __int8 v41 = 1;
    if (v10)
    {
      unsigned int v28 = a1;
      uint64_t v29 = 4 * (v18 + v16);
      unint64_t v30 = a2;
      BOOL v31 = v35;
      do
      {
        int v32 = v12 == &a1[v37] || *v28 < *v12;
        int v33 = v31;
        if (v41 != v32) {
          int v33 = boost::movelib::detail_adaptive::partial_merge_bufferless<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v30, v31, &v31[v15], (char *)&v41);
        }
        ++v28;
        v31 += v15;
        unint64_t v30 = v33;
        v29 -= 4;
      }
      while (v29);
      if (v41) {
        unint64_t v7 = v33;
      }
      else {
        unint64_t v7 = v31;
      }
    }
    else
    {
      unint64_t v7 = a2;
    }
  }
  else
  {
    unsigned __int8 v41 = 1;
  }
  return boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v7, v39, &v39[4 * a7], (v39 - v7) >> 2, a7);
}

uint64_t boost::movelib::detail_adaptive::combine_params<unsigned long *,boost::movelib::detail_adaptive::less,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6, unint64_t *a7, unint64_t *a8, unint64_t *a9, char a10)
{
  unint64_t v10 = a3 / a4;
  *a8 = a3 % a4;
  unint64_t v11 = (a2 - a3 % a4) % a4;
  *a9 = v11;
  unint64_t v12 = a2 - *a8 - v11;
  unint64_t v13 = v12 / a4;
  if (v12 % a4) {
    boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
  }
  *a6 = v10;
  unint64_t v14 = v13 - v10;
  *a7 = v14;
  if (v13 < *a6) {
    boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
  }
  if (a10)
  {
    unint64_t v15 = *a6 + v14;
    if (v15)
    {
      for (uint64_t i = 0; i != v15; ++i)
        *(void *)(result + 8 * i) = i;
    }
  }
  return result;
}

unsigned int *boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned long *,boost::movelib::detail_adaptive::less,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>(void *a1, int *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v10 = (uint64_t)&a1[a5];
  uint64_t v85 = a8;
  char v86 = a8;
  unint64_t v11 = &a2[a4];
  unint64_t v84 = v11;
  unint64_t v12 = a6 + a5;
  uint64_t v68 = &v11[(a6 + a5) * a3];
  if (!(a6 + a5))
  {
    LOBYTE(v15) = 1;
    goto LABEL_71;
  }
  if (a6) {
    unint64_t v13 = a5;
  }
  else {
    unint64_t v13 = 0;
  }
  if (v13 + 1 < v12) {
    unint64_t v14 = v13 + 1;
  }
  else {
    unint64_t v14 = a6 + a5;
  }
  uint64_t v70 = &a1[v12];
  unint64_t v66 = a5;
  uint64_t v67 = 4 * a3;
  int v15 = 1;
  unint64_t v16 = a5;
  int v64 = a1;
  uint64_t v65 = a6;
  uint64_t v17 = a6;
  uint64_t v18 = a1;
  unint64_t v19 = v11;
  uint64_t v73 = a8;
  while (1)
  {
    int v76 = v19;
    int v75 = v15;
    uint64_t v20 = v8;
    unint64_t v21 = (void *)v10;
    unint64_t v22 = boost::movelib::detail_adaptive::find_next_block<unsigned long *,boost::movelib::detail_adaptive::less,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((uint64_t)v18, (uint64_t)v11, v8, v13, v14);
    uint64_t v10 = (uint64_t)v21;
    int v15 = v75;
    uint64_t v8 = v20;
    unint64_t v23 = v22;
    unint64_t v24 = v22 + 2;
    if (v14 > v22 + 2) {
      unint64_t v24 = v14;
    }
    if (v24 >= v12) {
      unint64_t v25 = v12;
    }
    else {
      unint64_t v25 = v24;
    }
    int v26 = v84;
    unint64_t v27 = v85;
    unsigned int v28 = &v84[v23 * v20];
    unint64_t v11 = &v84[v20];
    uint64_t v29 = v86;
    unint64_t v74 = v12;
    if (v17) {
      goto LABEL_17;
    }
    if (a7)
    {
      if (*v68 < *v28) {
        goto LABEL_66;
      }
LABEL_17:
      unint64_t v30 = &v18[v23];
      if (v21 == v70)
      {
        BOOL v31 = 1;
        int v32 = v76;
        if (v75) {
          goto LABEL_25;
        }
      }
      else
      {
        BOOL v31 = *v30 < *v21;
        int v32 = v76;
        if (((v75 ^ v31) & 1) == 0) {
          goto LABEL_25;
        }
      }
      goto LABEL_37;
    }
    if (v75) {
      break;
    }
    unint64_t v30 = &v18[v23];
    int v32 = v76;
    if (v21 == v70)
    {
      BOOL v31 = 1;
    }
    else
    {
      BOOL v31 = *v30 < *v21;
      if (((v75 ^ v31) & 1) == 0)
      {
LABEL_25:
        a8 = v73;
        if (v86 != v85)
        {
          do
          {
            int v33 = *v29++;
            *v9++ = v33;
          }
          while (v29 != v27);
          uint64_t v85 = v73;
          char v86 = v73;
          if (v9 != v32) {
            boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
          }
        }
        char v86 = v73;
        unint64_t v27 = v73;
        if (v23 * v20)
        {
          if (v20)
          {
            uint64_t v34 = v67;
            uint64_t v35 = v67 * v23;
            unint64_t v27 = v73;
            uint64_t v36 = v26;
            do
            {
              *v27++ = *(int *)((char *)v36 + v35);
              *(int *)((char *)v36 + v35) = *v36;
              ++v36;
              v34 -= 4;
            }
            while (v34);
          }
          uint64_t v37 = *v30;
          void *v30 = *v18;
          *uint64_t v18 = v37;
          int v38 = v18;
          if (v21 == v30 || (int v38 = v30, v21 == v18)) {
            uint64_t v10 = (uint64_t)v38;
          }
        }
        uint64_t v85 = v27;
        uint64_t v29 = v73;
        unint64_t v39 = v74;
        goto LABEL_54;
      }
    }
LABEL_37:
    BOOL v72 = v31;
    unint64_t v71 = v25;
    int v40 = v9;
    unsigned __int8 v41 = &v84[v20];
    BOOL v42 = &v84[v23 * v20];
    int v26 = boost::movelib::detail_adaptive::op_partial_merge_and_save<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(v40, v32, &v84, v11, v28, &v86, &v85, v75 & 1);
    int v32 = v76;
    uint64_t v8 = v20;
    unint64_t v44 = v85;
    int v43 = v86;
    if (v85 != v86 && (char *)v85 - (char *)v86 != (char *)&v76[v20] - (char *)v26) {
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
    }
    if (v86 == v85)
    {
      a8 = v73;
      char v86 = v73;
      int v48 = v84;
      unint64_t v11 = v41;
      BOOL v49 = (int *)((char *)&v42[v20] + (char *)v84 - (char *)v41);
      uint64_t v10 = (uint64_t)v21;
      unint64_t v25 = v71;
      BOOL v31 = v72;
      unint64_t v27 = v73;
      if (v84 != v49)
      {
        if (v84 != v41)
        {
          unint64_t v27 = v73;
          do
          {
            *v27++ = *v49;
            int v50 = *v48++;
            *v49++ = v50;
          }
          while (v48 != v41);
        }
        uint64_t v51 = *v30;
        void *v30 = *v18;
        *uint64_t v18 = v51;
        int v52 = v18;
        if (v21 == v30 || (int v52 = v30, v21 == v18)) {
          uint64_t v10 = (uint64_t)v52;
        }
      }
      int v45 = v75;
      uint64_t v85 = v27;
      uint64_t v29 = v73;
    }
    else
    {
      int v45 = v75;
      a8 = v73;
      uint64_t v10 = (uint64_t)v21;
      unint64_t v11 = v41;
      unint64_t v25 = v71;
      BOOL v31 = v72;
      if (v23 && ((v46 = *v30, *v30 = *v18, *uint64_t v18 = v46, v47 = v18, v21 == v30) || (v47 = v30, v21 == v18)))
      {
        unint64_t v27 = v44;
        uint64_t v29 = v43;
        uint64_t v10 = (uint64_t)v47;
      }
      else
      {
        unint64_t v27 = v44;
        uint64_t v29 = v43;
      }
    }
    unint64_t v39 = v74;
    int v15 = v45 ^ (v43 == v44);
LABEL_54:
    if (v16) {
      BOOL v53 = v31;
    }
    else {
      BOOL v53 = 0;
    }
    if (v17) {
      BOOL v54 = !v31;
    }
    else {
      BOOL v54 = 0;
    }
    if (!v53 && !v54) {
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
    }
    v16 -= v31;
    v17 -= !v31;
    unint64_t v19 = &v32[v8];
    unint64_t v84 = v11;
    ++v18;
    v13 -= v13 != 0;
    unint64_t v14 = v25 - (v25 != 0);
    uint64_t v9 = v26;
    unint64_t v12 = v39 - 1;
    if (!v12)
    {
      uint64_t v9 = v26;
      a6 = v65;
      a5 = v66;
      a1 = v64;
      goto LABEL_67;
    }
  }
  LOBYTE(v15) = 1;
LABEL_66:
  a8 = v73;
  a6 = v65;
  a5 = v66;
  a1 = v64;
  unint64_t v19 = v76;
LABEL_67:
  if (v29 != v27)
  {
    uint64_t v55 = 0;
    do
    {
      v9[v55] = v29[v55];
      ++v55;
    }
    while (&v29[v55] != v27);
  }
  unint64_t v11 = v19;
LABEL_71:
  BOOL v56 = (unsigned int *)v11;
  char v57 = v15;
  if (a7)
  {
    int v58 = v68;
    uint64_t v59 = 4 * a7;
    char v60 = a8;
    do
    {
      int v61 = *v58++;
      *v60++ = v61;
      v59 -= 4;
    }
    while (v59);
  }
  uint64_t v85 = &a8[a7];
  char v86 = a8;
  uint64_t v83 = v85;
  uint64_t v80 = v10;
  uint64_t v81 = &a1[a6 + a5];
  int v79 = v68;
  unint64_t v77 = (unsigned int *)&v68[a7];
  unint64_t v78 = a8;
  boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned long *>,boost::movelib::inverse<boost::movelib::detail_adaptive::less>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>((uint64_t *)&v81, &v80, 0, (uint64_t *)&v79, (uint64_t *)&v83, (uint64_t *)&v78, &v77, v8, (unsigned int **)&v82, v12, 0, v12, 0, 1u);
  uint64_t v85 = v83;
  if (v82 - (char *)v56 != (char *)v83 - (char *)v86) {
    boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>();
  }
  if (v57) {
    uint64_t v62 = (unsigned int *)v9;
  }
  else {
    uint64_t v62 = v56;
  }
  return boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>(v62, v56, (uint64_t)v82, (uint64_t)v86, (uint64_t)v83);
}

uint64_t boost::movelib::detail_adaptive::initialize_keys<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(uint64_t a1, uint64_t a2)
{
  uint64_t result = boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort(a1, a2);
  if (a1 != a2)
  {
    for (uint64_t i = (unsigned int *)(a1 + 4); i != (unsigned int *)a2; ++i)
    {
      unsigned int v6 = *(i - 1);
      unsigned int v7 = *i;
      if (v6 >= v7) {
        boost::movelib::detail_adaptive::initialize_keys<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
      }
    }
  }
  return result;
}

uint64_t boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort(uint64_t a1, uint64_t a2)
{
  boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::make_heap(a1, a2);
  uint64_t result = boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort_heap(a1, a2);
  if (a1 != a2)
  {
    for (uint64_t i = (unsigned int *)(a1 + 4); i != (unsigned int *)a2; ++i)
    {
      unsigned int v7 = *(i - 1);
      unsigned int v6 = *i;
      if (v6 < v7) {
        boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort();
      }
    }
  }
  return result;
}

uint64_t boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::make_heap(uint64_t result, uint64_t a2)
{
  uint64_t v4 = a2 - result;
  if ((unint64_t)(a2 - result) >= 5)
  {
    uint64_t v9 = v2;
    uint64_t v10 = v3;
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 2;
    unint64_t v7 = ((unint64_t)(v4 >> 2) >> 1) - 1;
    do
    {
      unsigned int v8 = *(_DWORD *)(v5 + 4 * v7);
      uint64_t result = boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap(v5, v7--, v6, &v8);
    }
    while (v7 != -1);
  }
  return result;
}

uint64_t boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort_heap(uint64_t result, uint64_t a2)
{
  if ((unint64_t)(a2 - result) >= 5)
  {
    uint64_t v8 = v2;
    uint64_t v9 = v3;
    uint64_t v4 = (unsigned int *)result;
    unint64_t v5 = (a2 - result) >> 2;
    unint64_t v6 = (unsigned int *)(a2 - 4);
    do
    {
      unsigned int v7 = *v6;
      *v6-- = *v4;
      uint64_t result = boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap((uint64_t)v4, 0, --v5, &v7);
    }
    while (v5 > 1);
  }
  return result;
}

uint64_t boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap(uint64_t result, unint64_t a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v4 = 2 * a2;
  unint64_t v5 = 2 * a2 + 2;
  if (v5 >= a3)
  {
    unint64_t v7 = a2;
  }
  else
  {
    unint64_t v6 = a2;
    do
    {
      unint64_t v7 = v4 | 1;
      if (*(_DWORD *)(result + 4 * v5) >= *(_DWORD *)(result + 4 * (v4 | 1))) {
        unint64_t v7 = v5;
      }
      *(_DWORD *)(result + 4 * v6) = *(_DWORD *)(result + 4 * v7);
      uint64_t v4 = 2 * v7;
      unint64_t v5 = 2 * v7 + 2;
      unint64_t v6 = v7;
    }
    while (v5 < a3);
  }
  if (v5 == a3)
  {
    uint64_t v8 = v4 | 1;
    *(_DWORD *)(result + 4 * v7) = *(_DWORD *)(result + 4 * v8);
    unint64_t v7 = v8;
  }
  if (v7 > a2)
  {
    while (1)
    {
      unint64_t v9 = (v7 - 1) >> 1;
      unsigned int v10 = *(_DWORD *)(result + 4 * v9);
      if (v10 >= *a4) {
        break;
      }
      *(_DWORD *)(result + 4 * v7) = v10;
      unint64_t v7 = (v7 - 1) >> 1;
      if (v9 <= a2) {
        goto LABEL_15;
      }
    }
  }
  unint64_t v9 = v7;
LABEL_15:
  *(_DWORD *)(result + 4 * v9) = *a4;
  return result;
}

unint64_t boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a4 > a5) {
    boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>();
  }
  unint64_t v5 = 0;
  if (a4 < a5)
  {
    unint64_t v6 = (unsigned int *)(a2 + 4 * a4 * a3);
    do
    {
      unsigned int v7 = *(_DWORD *)(a2 + 4 * v5 * a3);
      if (*v6 < v7 || v7 >= *v6 && *(_DWORD *)(a1 + 4 * a4) < *(_DWORD *)(a1 + 4 * v5)) {
        unint64_t v5 = a4;
      }
      v6 += a3;
      ++a4;
    }
    while (a5 != a4);
  }
  return v5;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7, int a8)
{
  if (!a8) {
    return boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(a1, a2, a3, a4, a5, a6, a7);
  }
  return boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t *boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, unsigned int **a7@<X6>, uint64_t a8@<X7>, unsigned int **a9@<X8>, unint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  unint64_t v15 = a10;
  if (a10)
  {
    uint64_t v17 = result;
    uint64_t v44 = a3;
    uint64_t v49 = -a8;
    uint64_t v20 = *result;
    do
    {
      uint64_t v59 = v20;
      uint64_t v58 = *a4;
      unint64_t v21 = boost::movelib::detail_adaptive::find_next_block<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(&v59, v44, &v58, a8, a11, a12);
      unint64_t v22 = v21;
      unint64_t v23 = v21 + 2;
      if (a12 > v21 + 2) {
        unint64_t v23 = a12;
      }
      if (v23 >= v15) {
        unint64_t v24 = v15;
      }
      else {
        unint64_t v24 = v23;
      }
      unint64_t v25 = (unsigned int *)(*a4 + 4 * v49);
      int v26 = (unsigned int *)(*a4 - 4 * v21 * a8);
      char v57 = v26;
      uint64_t v27 = *a6;
      if (v21)
      {
        BOOL v54 = v25;
        uint64_t v55 = v27;
        BOOL v53 = *a7;
        uint64_t result = boost::movelib::detail_adaptive::op_partial_merge_and_swap<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(a5, &v55, a4, (uint64_t *)&v54, &v57, &v53, a14, &v56);
        unsigned int v28 = v56;
        *a7 = v56;
        uint64_t v29 = *a4;
        if ((unsigned int *)*a4 == v28)
        {
          uint64_t v35 = v57;
          while (v35 != &v26[v49])
          {
            unsigned int v37 = *--v35;
            unsigned int v36 = v37;
            unsigned int v38 = *--v28;
            unsigned int *v35 = v38;
            *unsigned int v28 = v36;
          }
        }
        else if ((unsigned int *)v29 != v25)
        {
          unint64_t v30 = v57 - 1;
          do
          {
            *--unsigned int v28 = *v30;
            unsigned int v31 = *(_DWORD *)(v29 - 4);
            v29 -= 4;
            *v30-- = v31;
          }
          while ((unsigned int *)v29 != v25);
        }
      }
      else
      {
        uint64_t v51 = v25;
        uint64_t v52 = v27;
        int v50 = *a7;
        uint64_t result = boost::movelib::detail_adaptive::op_partial_merge<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(a5, &v52, a4, (uint64_t *)&v51, &v50, a14, &v56);
        int v32 = v56;
        *a7 = v56;
        uint64_t v33 = *a4;
        unsigned int v28 = v25;
        if ((unsigned int *)*a4 != v32)
        {
          unsigned int v28 = v32;
          while ((unsigned int *)v33 != v25)
          {
            unsigned int v34 = *(_DWORD *)(v33 - 4);
            v33 -= 4;
            *--unsigned int v28 = v34;
          }
        }
      }
      *a7 = v28;
      if (v25 != v57)
      {
        uint64_t v39 = *v17;
        uint64_t v40 = *v17 - 4 * v22;
        int v41 = *(_DWORD *)(v40 - 4);
        *(_DWORD *)(v40 - 4) = *(_DWORD *)(*v17 - 4);
        *(_DWORD *)(v39 - 4) = v41;
        if (v40 == *a2 || (BOOL v42 = *a2 == v39, v39 = v40, v42)) {
          *a2 = v39;
        }
      }
      *a4 = (uint64_t)v25;
      uint64_t v20 = *v17 - 4;
      uint64_t *v17 = v20;
      a11 -= a11 != 0;
      a12 = v24 - (v24 != 0);
      --v15;
    }
    while (v15);
  }
  *a9 = *a7;
  return result;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7)
{
  unsigned int v28 = 0;
  uint64_t v29 = a5;
  unint64_t v13 = *a6;
  unint64_t v14 = *a7;
  unint64_t v15 = *a3;
  uint64_t v27 = *a3;
  if (v13 == v14)
  {
    unint64_t v16 = a2;
    if (a1 != a2)
    {
      unint64_t v16 = a1;
      while (*a5 >= *v16)
      {
        if (++v16 == a2)
        {
          unint64_t v16 = a2;
          break;
        }
      }
    }
    unsigned int v28 = (int *)((char *)v13 + (char *)v16 - (char *)a1);
    if (v15 == a5)
    {
      unint64_t v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(v16, a2, &v27, a4, &v28);
      a5 = v27;
      unint64_t v13 = v28;
      a1 = a2;
LABEL_24:
      if (a5 != a4 && v13 != v14)
      {
        do
        {
          unint64_t v23 = a1 + 1;
          while (1)
          {
            a1 = v23;
            int v24 = *a5;
            int v25 = *v13;
            if (*a5 >= *v13) {
              break;
            }
            ++a5;
            *(a1 - 1) = v24;
            unint64_t v23 = a1 + 1;
            if (a5 == a4)
            {
              unint64_t v15 = a4;
              goto LABEL_37;
            }
          }
          ++v13;
          *(a1 - 1) = v25;
        }
        while (v13 != v14);
        unint64_t v15 = a5;
LABEL_36:
        unint64_t v13 = v14;
        goto LABEL_37;
      }
      unint64_t v15 = a5;
      goto LABEL_37;
    }
    unint64_t v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(v16, a2, &v27, a4, &v29, &v28);
    unint64_t v15 = v27;
    unint64_t v13 = v28;
    a1 = a2;
  }
  else
  {
    if ((char *)a2 - (char *)a1 != (char *)v14 - (char *)v13) {
      boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>();
    }
    if (v15 == a5) {
      goto LABEL_24;
    }
  }
  if (v15 != a4 && v13 != v14)
  {
    uint64_t v18 = v29;
    do
    {
      unint64_t v19 = a1;
      while (1)
      {
        int v20 = *v13;
        if (*v18 >= *v13) {
          break;
        }
        *v19++ = *v18;
        int v21 = *v15++;
        *v18++ = v21;
        if (v15 == a4)
        {
          unint64_t v15 = a4;
          a1 = v19;
          goto LABEL_37;
        }
      }
      ++v13;
      int *v19 = v20;
      a1 = v19 + 1;
    }
    while (v13 != v14);
    a1 = v19 + 1;
    goto LABEL_36;
  }
LABEL_37:
  *a6 = v13;
  *a7 = v14;
  *a3 = v15;
  return a1;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7)
{
  unsigned int v28 = 0;
  uint64_t v29 = a5;
  unint64_t v13 = *a6;
  unint64_t v14 = *a7;
  unint64_t v15 = *a3;
  uint64_t v27 = *a3;
  if (v13 == v14)
  {
    unint64_t v16 = a2;
    if (a1 != a2)
    {
      unint64_t v16 = a1;
      while (*v16 < *a5)
      {
        if (++v16 == a2)
        {
          unint64_t v16 = a2;
          break;
        }
      }
    }
    unsigned int v28 = (int *)((char *)v13 + (char *)v16 - (char *)a1);
    if (v15 == a5)
    {
      unint64_t v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(v16, a2, &v27, a4, &v28);
      a5 = v27;
      unint64_t v13 = v28;
      a1 = a2;
LABEL_24:
      if (a5 != a4 && v13 != v14)
      {
        do
        {
          unint64_t v23 = a1 + 1;
          while (1)
          {
            a1 = v23;
            int v24 = *v13;
            int v25 = *a5;
            if (*v13 < *a5) {
              break;
            }
            ++a5;
            *(a1 - 1) = v25;
            unint64_t v23 = a1 + 1;
            if (a5 == a4)
            {
              unint64_t v15 = a4;
              goto LABEL_37;
            }
          }
          ++v13;
          *(a1 - 1) = v24;
        }
        while (v13 != v14);
        unint64_t v15 = a5;
LABEL_36:
        unint64_t v13 = v14;
        goto LABEL_37;
      }
      unint64_t v15 = a5;
      goto LABEL_37;
    }
    unint64_t v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(v16, a2, &v27, a4, &v29, &v28);
    unint64_t v15 = v27;
    unint64_t v13 = v28;
    a1 = a2;
  }
  else
  {
    if ((char *)a2 - (char *)a1 != (char *)v14 - (char *)v13) {
      boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>();
    }
    if (v15 == a5) {
      goto LABEL_24;
    }
  }
  if (v15 != a4 && v13 != v14)
  {
    uint64_t v18 = v29;
    do
    {
      unint64_t v19 = a1;
      while (1)
      {
        int v20 = *v13;
        if (*v13 < *v18) {
          break;
        }
        *v19++ = *v18;
        int v21 = *v15++;
        *v18++ = v21;
        if (v15 == a4)
        {
          unint64_t v15 = a4;
          a1 = v19;
          goto LABEL_37;
        }
      }
      ++v13;
      int *v19 = v20;
      a1 = v19 + 1;
    }
    while (v13 != v14);
    a1 = v19 + 1;
    goto LABEL_36;
  }
LABEL_37:
  *a6 = v13;
  *a7 = v14;
  *a3 = v15;
  return a1;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int **a5, int **a6)
{
  uint64_t result = *a6;
  if (a1 != a2)
  {
    uint64_t v8 = *a3;
    if (*a3 != a4)
    {
      unint64_t v9 = *a5;
      int *result = *a1;
      unsigned int v10 = result + 1;
      *a1 = *v9;
      unint64_t v11 = a1 + 1;
      int v13 = *v8;
      unint64_t v12 = v8 + 1;
      int *v9 = v13;
      unint64_t v14 = v9 + 1;
      while (v11 != a2)
      {
        if (v12 == a4)
        {
          uint64_t v18 = 0;
          do
          {
            uint64_t v19 = (uint64_t)&v11[v18 + 1];
            result[v18] = v11[v18];
            ++v18;
          }
          while ((int *)v19 != a2);
          unsigned int v10 = &result[v18];
          unint64_t v12 = a4;
          break;
        }
        if (*v14 >= *result)
        {
          unint64_t v15 = result++;
          unint64_t v16 = v11;
          uint64_t v17 = v10;
        }
        else
        {
          unint64_t v15 = v12++;
          unint64_t v16 = v14++;
          int *v10 = *v11;
          uint64_t v17 = v11;
        }
        int *v17 = *v16;
        int *v16 = *v15;
        ++v10;
        ++v11;
      }
      *a3 = v12;
      *a6 = result;
      uint64_t result = v10;
      *a5 = v14;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int **a5)
{
  uint64_t result = *a5;
  if (a1 != a2)
  {
    unsigned int v7 = *a3;
    if (*a3 != a4)
    {
      int *result = *a1;
      uint64_t v8 = result + 1;
      int v10 = *v7;
      unint64_t v9 = v7 + 1;
      *a1 = v10;
      unint64_t v11 = a1 + 1;
      if (v11 == a2)
      {
        int v13 = result;
        unint64_t v14 = v9;
      }
      else
      {
        while (v9 != a4)
        {
          BOOL v12 = *v9 >= *result;
          int v13 = &result[v12];
          unint64_t v14 = &v9[*v9 < *result];
          *v8++ = *v11;
          if (v12) {
            unint64_t v9 = result;
          }
          *v11++ = *v9;
          unint64_t v9 = v14;
          result += v12;
          if (v11 == a2) {
            goto LABEL_13;
          }
        }
        uint64_t v15 = 0;
        do
        {
          uint64_t v16 = (uint64_t)&v11[v15 + 1];
          result[v15] = v11[v15];
          ++v15;
        }
        while ((int *)v16 != a2);
        uint64_t v8 = &result[v15];
        int v13 = result;
        unint64_t v14 = a4;
      }
LABEL_13:
      *a3 = v14;
      *a5 = v13;
      return v8;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int **a5, int **a6)
{
  uint64_t result = *a6;
  if (a1 != a2)
  {
    uint64_t v8 = *a3;
    if (*a3 != a4)
    {
      unint64_t v9 = *a5;
      int *result = *a1;
      int v10 = result + 1;
      *a1 = *v9;
      unint64_t v11 = a1 + 1;
      int v13 = *v8;
      BOOL v12 = v8 + 1;
      int *v9 = v13;
      unint64_t v14 = v9 + 1;
      while (v11 != a2)
      {
        if (v12 == a4)
        {
          uint64_t v18 = 0;
          do
          {
            uint64_t v19 = (uint64_t)&v11[v18 + 1];
            result[v18] = v11[v18];
            ++v18;
          }
          while ((int *)v19 != a2);
          int v10 = &result[v18];
          BOOL v12 = a4;
          break;
        }
        if (*result >= *v14)
        {
          uint64_t v15 = v12++;
          uint64_t v16 = v14++;
          int *v10 = *v11;
          uint64_t v17 = v11;
        }
        else
        {
          uint64_t v15 = result++;
          uint64_t v16 = v11;
          uint64_t v17 = v10;
        }
        int *v17 = *v16;
        int *v16 = *v15;
        ++v10;
        ++v11;
      }
      *a3 = v12;
      *a6 = result;
      uint64_t result = v10;
      *a5 = v14;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int **a5)
{
  uint64_t result = *a5;
  if (a1 != a2)
  {
    unsigned int v7 = *a3;
    if (*a3 != a4)
    {
      int *result = *a1;
      uint64_t v8 = result + 1;
      int v10 = *v7;
      unint64_t v9 = v7 + 1;
      *a1 = v10;
      unint64_t v11 = a1 + 1;
      if (v11 == a2)
      {
        int v13 = result;
        unint64_t v14 = v9;
      }
      else
      {
        while (v9 != a4)
        {
          BOOL v12 = *result >= *v9;
          int v13 = &result[*result < *v9];
          unint64_t v14 = &v9[v12];
          *v8++ = *v11;
          if (!v12) {
            unint64_t v9 = result;
          }
          *v11++ = *v9;
          unint64_t v9 = v14;
          uint64_t result = v13;
          if (v11 == a2) {
            goto LABEL_13;
          }
        }
        uint64_t v15 = 0;
        do
        {
          uint64_t v16 = (uint64_t)&v11[v15 + 1];
          result[v15] = v11[v15];
          ++v15;
        }
        while ((int *)v16 != a2);
        uint64_t v8 = &result[v15];
        int v13 = result;
        unint64_t v14 = a4;
      }
LABEL_13:
      *a3 = v14;
      *a5 = v13;
      return v8;
    }
  }
  return result;
}

unint64_t boost::movelib::detail_adaptive::find_next_block<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a5 > a6) {
    boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>();
  }
  if (a5 >= a6) {
    return 0;
  }
  unint64_t result = 0;
  uint64_t v8 = *a1;
  unint64_t v9 = (unsigned int *)(*a3 - 4 * a5 * a4 - 4);
  int v10 = (_DWORD *)(v8 - 4 * a5 - 4);
  do
  {
    unsigned int v11 = *(_DWORD *)(*a3 + 4 * ~(result * a4));
    if (v11 < *v9 || *v9 >= v11 && *(_DWORD *)(v8 + 4 * ~result) < *v10) {
      unint64_t result = a5;
    }
    v9 -= a4;
    ++a5;
    --v10;
  }
  while (a6 != a5);
  return result;
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge_and_swap<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unsigned int **a5@<X4>, unsigned int **a6@<X5>, int a7@<W7>, unsigned int **a8@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v9 = *a4;
  int v10 = *a6;
  uint64_t v11 = *result;
  uint64_t v12 = *a3;
  BOOL v14 = *a3 == *a4 || v8 == v11;
  if (a7)
  {
    if (v14) {
      goto LABEL_26;
    }
    uint64_t v15 = *a5;
    do
    {
      uint64_t v16 = v15 - 1;
      --v10;
      uint64_t v17 = v11;
      while (1)
      {
        unsigned int v19 = *(_DWORD *)(v17 - 4);
        v17 -= 4;
        unsigned int v18 = v19;
        if (v19 < *v16) {
          break;
        }
        *v10-- = v18;
        uint64_t v11 = v17;
        if (v17 == v8) {
          goto LABEL_24;
        }
      }
      unsigned int *v10 = *v16;
      unsigned int v20 = *(_DWORD *)(v12 - 4);
      v12 -= 4;
      unsigned int *v16 = v20;
      --v15;
    }
    while (v12 != v9);
  }
  else
  {
    if (v14) {
      goto LABEL_26;
    }
    uint64_t v15 = *a5;
    while (2)
    {
      uint64_t v16 = v15 - 1;
      --v10;
      uint64_t v21 = v11;
      while (1)
      {
        unsigned int v23 = *(_DWORD *)(v21 - 4);
        v21 -= 4;
        unsigned int v22 = v23;
        if (*v16 >= v23) {
          break;
        }
        *v10-- = v22;
        uint64_t v11 = v21;
        if (v21 == v8)
        {
LABEL_24:
          ++v10;
          goto LABEL_25;
        }
      }
      unsigned int *v10 = *v16;
      unsigned int v24 = *(_DWORD *)(v12 - 4);
      v12 -= 4;
      unsigned int *v16 = v24;
      --v15;
      if (v12 != v9) {
        continue;
      }
      break;
    }
  }
  uint64_t v15 = v16;
  uint64_t v8 = v11;
  uint64_t v12 = v9;
LABEL_25:
  *a5 = v15;
  int *result = v8;
  *a3 = v12;
LABEL_26:
  *a8 = v10;
  return result;
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unsigned int **a5@<X4>, int a6@<W6>, unsigned int **a7@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *a4;
  uint64_t v9 = *a5;
  uint64_t v10 = *result;
  uint64_t v11 = *a3;
  BOOL v13 = *a3 == *a4 || v7 == v10;
  if (a6)
  {
    if (!v13)
    {
      do
      {
        BOOL v14 = v9 - 1;
        uint64_t v15 = v10;
        while (1)
        {
          uint64_t v9 = v14;
          unsigned int v17 = *(_DWORD *)(v15 - 4);
          v15 -= 4;
          unsigned int v16 = v17;
          unsigned int v18 = *(_DWORD *)(v11 - 4);
          if (v17 < v18) {
            break;
          }
          unsigned int *v9 = v16;
          BOOL v14 = v9 - 1;
          uint64_t v10 = v15;
          if (v15 == v7) {
            goto LABEL_22;
          }
        }
        v11 -= 4;
        unsigned int *v9 = v18;
      }
      while (v11 != v8);
LABEL_21:
      uint64_t v11 = v8;
    }
  }
  else if (!v13)
  {
    while (2)
    {
      unsigned int v19 = v9 - 1;
      uint64_t v20 = v10;
      while (1)
      {
        uint64_t v9 = v19;
        unsigned int v22 = *(_DWORD *)(v20 - 4);
        v20 -= 4;
        unsigned int v21 = v22;
        unsigned int v23 = *(_DWORD *)(v11 - 4);
        if (v23 >= v22) {
          break;
        }
        unsigned int *v9 = v21;
        unsigned int v19 = v9 - 1;
        uint64_t v10 = v20;
        if (v20 == v7)
        {
LABEL_22:
          uint64_t v10 = v7;
          goto LABEL_23;
        }
      }
      v11 -= 4;
      unsigned int *v9 = v23;
      if (v11 != v8) {
        continue;
      }
      goto LABEL_21;
    }
  }
LABEL_23:
  int *result = v10;
  *a3 = v11;
  *a7 = v9;
  return result;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7, int a8)
{
  if (!a8) {
    return boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(a1, a2, a3, a4, a5, a6, a7);
  }
  return boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t *boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int **a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, unint64_t a10, unint64_t a11, unint64_t a12, char a13, int a14, unsigned __int8 a15)
{
  unint64_t v16 = a10;
  if (a10)
  {
    unsigned int v18 = result;
    uint64_t v49 = a3;
    uint64_t v54 = -a8;
    uint64_t v21 = *result;
    do
    {
      uint64_t v64 = v21;
      uint64_t v63 = (unsigned int *)*a4;
      unint64_t v22 = boost::movelib::detail_adaptive::find_next_block<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(&v64, v49, &v63, a8, a11, a12);
      unint64_t v23 = v22;
      unint64_t v24 = v22 + 2;
      if (a12 > v22 + 2) {
        unint64_t v24 = a12;
      }
      if (v24 >= v16) {
        unint64_t v25 = v16;
      }
      else {
        unint64_t v25 = v24;
      }
      int v26 = (unsigned int *)(*a4 + 4 * v54);
      uint64_t v27 = (unsigned int *)(*a4 - 4 * v22 * a8);
      uint64_t v62 = v27;
      uint64_t v28 = *a6;
      if (v22)
      {
        uint64_t v59 = v26;
        uint64_t v60 = v28;
        uint64_t v58 = (unsigned int *)*a7;
        unint64_t result = boost::movelib::detail_adaptive::op_partial_merge_and_swap<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(a5, &v60, (_DWORD **)a4, (uint64_t *)&v59, &v62, (int **)&v58, a13, a15, &v61);
        uint64_t v29 = v61;
        *a7 = v61;
        unint64_t v30 = (unsigned int *)*a4;
        if ((int *)*a4 == v29)
        {
          uint64_t v40 = v62;
          while (v40 != &v27[v54])
          {
            int v42 = *--v40;
            int v41 = v42;
            unsigned int v43 = *--v29;
            unsigned int *v40 = v43;
            *uint64_t v29 = v41;
          }
        }
        else if (v30 != v26)
        {
          unsigned int v31 = v62 - 1;
          do
          {
            unsigned int v33 = *--v29;
            unsigned int v32 = v33;
            *uint64_t v29 = *v31;
            unsigned int v34 = *--v30;
            *v31-- = v34;
            unsigned int *v30 = v32;
          }
          while (v30 != v26);
        }
      }
      else
      {
        BOOL v56 = v26;
        uint64_t v57 = v28;
        uint64_t v55 = (unsigned int *)*a7;
        unint64_t result = boost::movelib::detail_adaptive::op_partial_merge<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(a5, &v57, a4, (uint64_t *)&v56, &v55, a15, (unsigned int **)&v61);
        uint64_t v35 = v61;
        *a7 = v61;
        unsigned int v36 = (unsigned int *)*a4;
        uint64_t v29 = (int *)v26;
        if ((int *)*a4 != v35)
        {
          uint64_t v29 = v35;
          while (v36 != v26)
          {
            int v38 = *--v36;
            int v37 = v38;
            unsigned int v39 = *--v29;
            *unsigned int v36 = v39;
            *uint64_t v29 = v37;
          }
        }
      }
      *a7 = v29;
      if (v26 != v62)
      {
        uint64_t v44 = *v18;
        uint64_t v45 = *v18 - 4 * v23;
        int v46 = *(_DWORD *)(v45 - 4);
        *(_DWORD *)(v45 - 4) = *(_DWORD *)(*v18 - 4);
        *(_DWORD *)(v44 - 4) = v46;
        if (v45 == *a2 || (v47 = *a2 == v44, uint64_t v44 = v45, v47)) {
          *a2 = v44;
        }
      }
      *a4 = (uint64_t)v26;
      uint64_t v21 = *v18 - 4;
      *unsigned int v18 = v21;
      a11 -= a11 != 0;
      a12 = v25 - (v25 != 0);
      --v16;
    }
    while (v16);
  }
  *a9 = *a7;
  return result;
}

unsigned int *boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op,unsigned int *,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3, char *a4, char *a5)
{
  if (a3 - (void)a2 != a5 - a4) {
    boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>();
  }
  if (a5 != a4)
  {
    unint64_t v5 = (unsigned int *)(a3 - 4);
    while (a2 != result)
    {
      unsigned int v6 = *((_DWORD *)a5 - 1);
      unsigned int v7 = *(a2 - 1);
      unsigned int v8 = *v5;
      BOOL v9 = v6 >= v7;
      if (v6 <= v7) {
        unsigned int v6 = *(a2 - 1);
      }
      if (v9) {
        uint64_t v10 = (unsigned int *)a5;
      }
      else {
        uint64_t v10 = a2;
      }
      if (v9) {
        a5 -= 4;
      }
      else {
        --a2;
      }
      *v5-- = v6;
      *(v10 - 1) = v8;
      if (a5 == a4) {
        return result;
      }
    }
    uint64_t v11 = 0;
    do
    {
      unsigned int v12 = *(_DWORD *)&a5[v11 * 4 - 4];
      *(_DWORD *)&a5[v11 * 4 - 4] = v5[v11];
      v5[v11--] = v12;
    }
    while (&a5[v11 * 4] != a4);
    if (&v5[v11 + 1] != result) {
      boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>();
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7)
{
  uint64_t v27 = 0;
  uint64_t v28 = a5;
  BOOL v13 = *a6;
  BOOL v14 = *a7;
  uint64_t v15 = *a3;
  int v26 = *a3;
  if (v13 == v14)
  {
    unint64_t v16 = a2;
    if (a1 != a2)
    {
      unint64_t v16 = a1;
      while (*a5 >= *v16)
      {
        if (++v16 == a2)
        {
          unint64_t v16 = a2;
          break;
        }
      }
    }
    uint64_t v27 = (int *)((char *)v13 + (char *)v16 - (char *)a1);
    if (v15 == a5)
    {
      BOOL v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(v16, a2, &v26, a4, &v27);
      a5 = v26;
      BOOL v13 = v27;
      a1 = a2;
LABEL_24:
      if (a5 != a4 && v13 != v14)
      {
        do
        {
          unint64_t v23 = a1 + 1;
          while (1)
          {
            a1 = v23;
            int v24 = *(v23 - 1);
            if (*a5 >= *v13) {
              break;
            }
            *(a1 - 1) = *a5;
            *a5++ = v24;
            unint64_t v23 = a1 + 1;
            if (a5 == a4)
            {
              uint64_t v15 = a4;
              goto LABEL_37;
            }
          }
          *(a1 - 1) = *v13;
          *v13++ = v24;
        }
        while (v13 != v14);
        uint64_t v15 = a5;
LABEL_36:
        BOOL v13 = v14;
        goto LABEL_37;
      }
      uint64_t v15 = a5;
      goto LABEL_37;
    }
    BOOL v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(v16, a2, &v26, a4, &v28, &v27);
    uint64_t v15 = v26;
    BOOL v13 = v27;
    a1 = a2;
  }
  else
  {
    if ((char *)a2 - (char *)a1 != (char *)v14 - (char *)v13) {
      boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>();
    }
    if (v15 == a5) {
      goto LABEL_24;
    }
  }
  if (v15 != a4 && v13 != v14)
  {
    unsigned int v18 = v28;
    do
    {
      unsigned int v19 = a1;
      while (*v18 < *v13)
      {
        int v20 = *v19;
        *v19++ = *v18;
        *v18++ = *v15;
        *v15++ = v20;
        if (v15 == a4)
        {
          uint64_t v15 = a4;
          a1 = v19;
          goto LABEL_37;
        }
      }
      int v21 = *v19;
      int *v19 = *v13;
      a1 = v19 + 1;
      *v13++ = v21;
    }
    while (v13 != v14);
    a1 = v19 + 1;
    goto LABEL_36;
  }
LABEL_37:
  *a6 = v13;
  *a7 = v14;
  *a3 = v15;
  return a1;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7)
{
  uint64_t v27 = 0;
  uint64_t v28 = a5;
  BOOL v13 = *a6;
  BOOL v14 = *a7;
  uint64_t v15 = *a3;
  int v26 = *a3;
  if (v13 == v14)
  {
    unint64_t v16 = a2;
    if (a1 != a2)
    {
      unint64_t v16 = a1;
      while (*v16 < *a5)
      {
        if (++v16 == a2)
        {
          unint64_t v16 = a2;
          break;
        }
      }
    }
    uint64_t v27 = (int *)((char *)v13 + (char *)v16 - (char *)a1);
    if (v15 == a5)
    {
      BOOL v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(v16, a2, &v26, a4, &v27);
      a5 = v26;
      BOOL v13 = v27;
      a1 = a2;
LABEL_24:
      if (a5 != a4 && v13 != v14)
      {
        do
        {
          unint64_t v23 = a1 + 1;
          while (1)
          {
            a1 = v23;
            int v24 = *(v23 - 1);
            if (*v13 < *a5) {
              break;
            }
            *(a1 - 1) = *a5;
            *a5++ = v24;
            unint64_t v23 = a1 + 1;
            if (a5 == a4)
            {
              uint64_t v15 = a4;
              goto LABEL_37;
            }
          }
          *(a1 - 1) = *v13;
          *v13++ = v24;
        }
        while (v13 != v14);
        uint64_t v15 = a5;
LABEL_36:
        BOOL v13 = v14;
        goto LABEL_37;
      }
      uint64_t v15 = a5;
      goto LABEL_37;
    }
    BOOL v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(v16, a2, &v26, a4, &v28, &v27);
    uint64_t v15 = v26;
    BOOL v13 = v27;
    a1 = a2;
  }
  else
  {
    if ((char *)a2 - (char *)a1 != (char *)v14 - (char *)v13) {
      boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>();
    }
    if (v15 == a5) {
      goto LABEL_24;
    }
  }
  if (v15 != a4 && v13 != v14)
  {
    unsigned int v18 = v28;
    do
    {
      unsigned int v19 = a1;
      while (*v13 >= *v18)
      {
        int v20 = *v19;
        *v19++ = *v18;
        *v18++ = *v15;
        *v15++ = v20;
        if (v15 == a4)
        {
          uint64_t v15 = a4;
          a1 = v19;
          goto LABEL_37;
        }
      }
      int v21 = *v19;
      int *v19 = *v13;
      a1 = v19 + 1;
      *v13++ = v21;
    }
    while (v13 != v14);
    a1 = v19 + 1;
    goto LABEL_36;
  }
LABEL_37:
  *a6 = v13;
  *a7 = v14;
  *a3 = v15;
  return a1;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int **a5, int **a6)
{
  unint64_t result = *a6;
  if (a1 != a2)
  {
    unsigned int v8 = *a3;
    if (*a3 != a4)
    {
      BOOL v9 = *a5;
      int v10 = *result;
      int *result = *a1;
      uint64_t v11 = result + 1;
      *a1 = *v9;
      unsigned int v12 = a1 + 1;
      int *v9 = *v8;
      BOOL v13 = v9 + 1;
      *unsigned int v8 = v10;
      BOOL v14 = v8 + 1;
      while (v12 != a2)
      {
        if (v14 == a4)
        {
          uint64_t v16 = 0;
          do
          {
            int v17 = v12[v16];
            v12[v16] = result[v16];
            uint64_t v18 = (uint64_t)&v12[v16 + 1];
            result[v16++] = v17;
          }
          while ((int *)v18 != a2);
          uint64_t v11 = &result[v16];
          BOOL v14 = a4;
          break;
        }
        int v15 = *v11;
        if (*v13 >= *result)
        {
          int *v11 = *v12;
          int *v12 = *result;
          *result++ = v15;
        }
        else
        {
          int *v11 = *v12;
          int *v12 = *v13;
          *v13++ = *v14;
          *v14++ = v15;
        }
        ++v11;
        ++v12;
      }
      *a3 = v14;
      *a6 = result;
      unint64_t result = v11;
      *a5 = v13;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int **a5)
{
  unint64_t result = *a5;
  if (a1 != a2)
  {
    unsigned int v7 = *a3;
    if (*a3 != a4)
    {
      int v8 = *result;
      int *result = *a1;
      BOOL v9 = result + 1;
      *a1 = *v7;
      int v10 = a1 + 1;
      int *v7 = v8;
      uint64_t v11 = v7 + 1;
      while (v10 != a2)
      {
        if (v11 == a4)
        {
          uint64_t v16 = 0;
          do
          {
            int v17 = v10[v16];
            v10[v16] = result[v16];
            uint64_t v18 = (uint64_t)&v10[v16 + 1];
            result[v16++] = v17;
          }
          while ((int *)v18 != a2);
          BOOL v9 = &result[v16];
          uint64_t v11 = a4;
          break;
        }
        BOOL v12 = *v11 >= *result;
        BOOL v13 = *v11 < *result;
        int v14 = *v9;
        *v9++ = *v10;
        if (v12) {
          int v15 = result;
        }
        else {
          int v15 = v11;
        }
        result += v12;
        v11 += v13;
        *v10++ = *v15;
        int *v15 = v14;
      }
      *a3 = v11;
      *a5 = result;
      return v9;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int **a5, int **a6)
{
  unint64_t result = *a6;
  if (a1 != a2)
  {
    int v8 = *a3;
    if (*a3 != a4)
    {
      BOOL v9 = *a5;
      int v10 = *result;
      int *result = *a1;
      uint64_t v11 = result + 1;
      *a1 = *v9;
      BOOL v12 = a1 + 1;
      int *v9 = *v8;
      BOOL v13 = v9 + 1;
      *int v8 = v10;
      int v14 = v8 + 1;
      while (v12 != a2)
      {
        if (v14 == a4)
        {
          uint64_t v16 = 0;
          do
          {
            int v17 = v12[v16];
            v12[v16] = result[v16];
            uint64_t v18 = (uint64_t)&v12[v16 + 1];
            result[v16++] = v17;
          }
          while ((int *)v18 != a2);
          uint64_t v11 = &result[v16];
          int v14 = a4;
          break;
        }
        int v15 = *v11;
        if (*result >= *v13)
        {
          int *v11 = *v12;
          int *v12 = *v13;
          *v13++ = *v14;
          *v14++ = v15;
        }
        else
        {
          int *v11 = *v12;
          int *v12 = *result;
          *result++ = v15;
        }
        ++v11;
        ++v12;
      }
      *a3 = v14;
      *a6 = result;
      unint64_t result = v11;
      *a5 = v13;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int **a5)
{
  unint64_t result = *a5;
  if (a1 != a2)
  {
    unsigned int v7 = *a3;
    if (*a3 != a4)
    {
      int v8 = *result;
      int *result = *a1;
      BOOL v9 = result + 1;
      *a1 = *v7;
      int v10 = a1 + 1;
      int *v7 = v8;
      uint64_t v11 = v7 + 1;
      while (v10 != a2)
      {
        if (v11 == a4)
        {
          uint64_t v16 = 0;
          do
          {
            int v17 = v10[v16];
            v10[v16] = result[v16];
            uint64_t v18 = (uint64_t)&v10[v16 + 1];
            result[v16++] = v17;
          }
          while ((int *)v18 != a2);
          BOOL v9 = &result[v16];
          uint64_t v11 = a4;
          break;
        }
        BOOL v12 = *result >= *v11;
        BOOL v13 = *result < *v11;
        int v14 = *v9;
        *v9++ = *v10;
        if (v12) {
          int v15 = v11;
        }
        else {
          int v15 = result;
        }
        result += v13;
        v11 += v12;
        *v10++ = *v15;
        int *v15 = v14;
      }
      *a3 = v11;
      *a5 = result;
      return v9;
    }
  }
  return result;
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge_and_swap<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _DWORD **a3@<X2>, uint64_t *a4@<X3>, unsigned int **a5@<X4>, int **a6@<X5>, char a7@<W6>, int a8@<W7>, int **a9@<X8>)
{
  char v17 = a7;
  if (a8)
  {
    uint64_t v16 = *a2;
    uint64_t v15 = *a4;
    int v14 = *a6;
    return boost::movelib::detail_adaptive::op_partial_merge_and_swap_impl<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(a1, &v16, a3, &v15, a5, &v14, a9);
  }
  else
  {
    uint64_t v13 = *a2;
    uint64_t v10 = *a4;
    uint64_t v11 = *a6;
    uint64_t v12 = v10;
    return boost::movelib::detail_adaptive::op_partial_merge_and_swap_impl<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::antistable<boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>,boost::movelib::swap_op>(a1, &v13, a3, &v12, a5, &v11, a9);
  }
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unsigned int **a5@<X4>, int a6@<W6>, unsigned int **a7@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *a4;
  BOOL v9 = *a5;
  uint64_t v10 = *result;
  uint64_t v11 = *a3;
  BOOL v13 = *a3 == *a4 || v7 == v10;
  if (a6)
  {
    if (!v13)
    {
      do
      {
        int v14 = v9 - 1;
        uint64_t v15 = v10;
        while (1)
        {
          BOOL v9 = v14;
          unsigned int v17 = *(_DWORD *)(v15 - 4);
          v15 -= 4;
          unsigned int v16 = v17;
          unsigned int v18 = *(_DWORD *)(v11 - 4);
          unsigned int v19 = *v9;
          if (v17 < v18) {
            break;
          }
          unsigned int *v9 = v16;
          int v14 = v9 - 1;
          *(_DWORD *)(v10 - 4) = v19;
          uint64_t v10 = v15;
          if (v15 == v7) {
            goto LABEL_22;
          }
        }
        unsigned int *v9 = v18;
        *(_DWORD *)(v11 - 4) = v19;
        v11 -= 4;
      }
      while (v11 != v8);
LABEL_21:
      uint64_t v11 = v8;
    }
  }
  else if (!v13)
  {
    while (2)
    {
      int v20 = v9 - 1;
      uint64_t v21 = v10;
      while (1)
      {
        BOOL v9 = v20;
        unsigned int v23 = *(_DWORD *)(v21 - 4);
        v21 -= 4;
        unsigned int v22 = v23;
        unsigned int v24 = *(_DWORD *)(v11 - 4);
        unsigned int v25 = *v9;
        if (v24 >= v23) {
          break;
        }
        unsigned int *v9 = v22;
        int v20 = v9 - 1;
        *(_DWORD *)(v10 - 4) = v25;
        uint64_t v10 = v21;
        if (v21 == v7)
        {
LABEL_22:
          uint64_t v10 = v7;
          goto LABEL_23;
        }
      }
      unsigned int *v9 = v24;
      *(_DWORD *)(v11 - 4) = v25;
      v11 -= 4;
      if (v11 != v8) {
        continue;
      }
      goto LABEL_21;
    }
  }
LABEL_23:
  int *result = v10;
  *a3 = v11;
  *a7 = v9;
  return result;
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge_and_swap_impl<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>@<X0>(uint64_t *result@<X0>, void *a2@<X1>, _DWORD **a3@<X2>, void *a4@<X3>, unsigned int **a5@<X4>, int **a6@<X5>, int **a7@<X8>)
{
  uint64_t v7 = *a3;
  if (*a3 != (_DWORD *)*a4)
  {
    uint64_t v8 = *result;
    if (*a2 != *result)
    {
      BOOL v9 = *a5;
      do
      {
        uint64_t v10 = v9 - 1;
        uint64_t v11 = v8;
        while (1)
        {
          unsigned int v13 = *(_DWORD *)(v11 - 4);
          v11 -= 4;
          unsigned int v12 = v13;
          if (v13 < *v10) {
            break;
          }
          int v14 = *a6 - 1;
          int v15 = *v14;
          *a6 = v14;
          int *v14 = v12;
          *(_DWORD *)(v8 - 4) = v15;
          uint64_t v8 = v11;
          if (v11 == *a2)
          {
            uint64_t v8 = v11;
            uint64_t v10 = v9;
            goto LABEL_9;
          }
        }
        unsigned int v16 = *a6 - 1;
        int v17 = *v16;
        int *v16 = *v10;
        unsigned int v18 = *--v7;
        *a6 = v16;
        unsigned int *v10 = v18;
        _DWORD *v7 = v17;
        BOOL v9 = v10;
      }
      while (v7 != (_DWORD *)*a4);
LABEL_9:
      *a5 = v10;
      int *result = v8;
      *a3 = v7;
    }
  }
  *a7 = *a6;
  return result;
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge_and_swap_impl<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::antistable<boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>,boost::movelib::swap_op>@<X0>(uint64_t *result@<X0>, void *a2@<X1>, _DWORD **a3@<X2>, void *a4@<X3>, unsigned int **a5@<X4>, int **a6@<X5>, int **a7@<X8>)
{
  uint64_t v7 = *a3;
  if (*a3 != (_DWORD *)*a4)
  {
    uint64_t v8 = *result;
    if (*a2 != *result)
    {
      BOOL v9 = *a5;
      do
      {
        uint64_t v10 = v9 - 1;
        uint64_t v11 = v8;
        while (1)
        {
          unsigned int v13 = *(_DWORD *)(v11 - 4);
          v11 -= 4;
          unsigned int v12 = v13;
          if (*v10 >= v13) {
            break;
          }
          int v14 = *a6 - 1;
          int v15 = *v14;
          *a6 = v14;
          int *v14 = v12;
          *(_DWORD *)(v8 - 4) = v15;
          uint64_t v8 = v11;
          if (v11 == *a2)
          {
            uint64_t v8 = v11;
            uint64_t v10 = v9;
            goto LABEL_9;
          }
        }
        unsigned int v16 = *a6 - 1;
        int v17 = *v16;
        int *v16 = *v10;
        unsigned int v18 = *--v7;
        *a6 = v16;
        unsigned int *v10 = v18;
        _DWORD *v7 = v17;
        BOOL v9 = v10;
      }
      while (v7 != (_DWORD *)*a4);
LABEL_9:
      *a5 = v10;
      int *result = v8;
      *a3 = v7;
    }
  }
  *a7 = *a6;
  return result;
}

char *boost::movelib::detail_adaptive::partial_merge_bufferless<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(char *a1, char *a2, char *a3, char *a4)
{
  if (!*a4) {
    return boost::movelib::detail_adaptive::partial_merge_bufferless_impl<unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(a1, a2, a3, a4);
  }
  return boost::movelib::detail_adaptive::partial_merge_bufferless_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(a1, a2, a3, a4);
}

char *boost::movelib::detail_adaptive::partial_merge_bufferless_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(char *result, char *a2, char *a3, char *a4)
{
  if (a2 != a3)
  {
    char v5 = *a4;
    if (result == a2 || *(_DWORD *)a2 >= *((_DWORD *)a2 - 1))
    {
LABEL_16:
      *a4 = v5 ^ 1;
      return a2;
    }
LABEL_4:
    if (a2 == a3)
    {
      return boost::movelib::rotate_gcd<unsigned int *>(result, a3, a3);
    }
    else
    {
      unint64_t v7 = (a3 - a2) >> 2;
      uint64_t v8 = a2;
      do
      {
        unint64_t v9 = v7 >> 1;
        uint64_t v10 = &v8[4 * (v7 >> 1)];
        unsigned int v12 = *(_DWORD *)v10;
        uint64_t v11 = v10 + 4;
        v7 += ~(v7 >> 1);
        if (v12 >= *(_DWORD *)result) {
          unint64_t v7 = v9;
        }
        else {
          uint64_t v8 = v11;
        }
      }
      while (v7);
      unint64_t result = boost::movelib::rotate_gcd<unsigned int *>(result, a2, v8);
      if (v8 != a3)
      {
        unsigned int v13 = result + 4;
        while (v13 != v8)
        {
          unsigned int v14 = *(_DWORD *)v13;
          v13 += 4;
          if (*(_DWORD *)v8 < v14)
          {
            unint64_t result = v13 - 4;
            a2 = v8;
            goto LABEL_4;
          }
        }
        a2 = v8;
        goto LABEL_16;
      }
    }
  }
  return result;
}

char *boost::movelib::detail_adaptive::partial_merge_bufferless_impl<unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(char *result, char *a2, char *a3, char *a4)
{
  if (a2 != a3)
  {
    char v5 = *a4;
    if (result == a2 || *((_DWORD *)a2 - 1) < *(_DWORD *)a2)
    {
LABEL_16:
      *a4 = v5 ^ 1;
      return a2;
    }
LABEL_4:
    if (a2 == a3)
    {
      return boost::movelib::rotate_gcd<unsigned int *>(result, a3, a3);
    }
    else
    {
      unint64_t v7 = (a3 - a2) >> 2;
      uint64_t v8 = a2;
      do
      {
        unint64_t v9 = v7 >> 1;
        uint64_t v10 = &v8[4 * (v7 >> 1)];
        unsigned int v12 = *(_DWORD *)v10;
        uint64_t v11 = v10 + 4;
        v7 += ~(v7 >> 1);
        if (*(_DWORD *)result < v12) {
          unint64_t v7 = v9;
        }
        else {
          uint64_t v8 = v11;
        }
      }
      while (v7);
      unint64_t result = boost::movelib::rotate_gcd<unsigned int *>(result, a2, v8);
      if (v8 != a3)
      {
        unsigned int v13 = result + 4;
        while (v13 != v8)
        {
          unsigned int v14 = *(_DWORD *)v13;
          v13 += 4;
          if (v14 >= *(_DWORD *)v8)
          {
            unint64_t result = v13 - 4;
            a2 = v8;
            goto LABEL_4;
          }
        }
        a2 = v8;
        goto LABEL_16;
      }
    }
  }
  return result;
}

unint64_t boost::movelib::detail_adaptive::find_next_block<unsigned long *,boost::movelib::detail_adaptive::less,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a4 > a5) {
    boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>();
  }
  unint64_t v5 = 0;
  if (a4 < a5)
  {
    unsigned int v6 = (unsigned int *)(a2 + 4 * a4 * a3);
    do
    {
      unsigned int v7 = *(_DWORD *)(a2 + 4 * v5 * a3);
      if (*v6 < v7 || v7 >= *v6 && *(void *)(a1 + 8 * a4) < *(void *)(a1 + 8 * v5)) {
        unint64_t v5 = a4;
      }
      v6 += a3;
      ++a4;
    }
    while (a5 != a4);
  }
  return v5;
}

uint64_t *boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned long *>,boost::movelib::inverse<boost::movelib::detail_adaptive::less>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, unsigned int **a7@<X6>, uint64_t a8@<X7>, unsigned int **a9@<X8>, unint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  unint64_t v15 = a10;
  if (a10)
  {
    int v17 = result;
    uint64_t v43 = a3;
    uint64_t v48 = -a8;
    uint64_t v20 = *result;
    uint64_t v21 = (unsigned int *)*a4;
    while (1)
    {
      uint64_t v57 = v21;
      uint64_t v58 = v20;
      unint64_t v22 = boost::movelib::detail_adaptive::find_next_block<boost::movelib::reverse_iterator<unsigned long *>,boost::movelib::inverse<boost::movelib::detail_adaptive::less>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(&v58, v43, &v57, a8, a11, a12);
      unint64_t v23 = v22;
      unint64_t v24 = v22 + 2;
      if (a12 > v22 + 2) {
        unint64_t v24 = a12;
      }
      if (v24 >= v15) {
        unint64_t v25 = v15;
      }
      else {
        unint64_t v25 = v24;
      }
      uint64_t v21 = (unsigned int *)(*a4 + 4 * v48);
      int v26 = (unsigned int *)(*a4 - 4 * v22 * a8);
      BOOL v56 = v26;
      uint64_t v27 = *a6;
      if (v22)
      {
        BOOL v53 = v21;
        uint64_t v54 = v27;
        uint64_t v52 = *a7;
        unint64_t result = boost::movelib::detail_adaptive::op_partial_merge_and_swap<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(a5, &v54, a4, (uint64_t *)&v53, &v56, &v52, a14, &v55);
        uint64_t v28 = v55;
        *a7 = v55;
        uint64_t v29 = *a4;
        if ((unsigned int *)*a4 == v28)
        {
          uint64_t v35 = v56;
          while (v35 != &v26[v48])
          {
            unsigned int v37 = *--v35;
            unsigned int v36 = v37;
            unsigned int v38 = *--v28;
            unsigned int *v35 = v38;
            *uint64_t v28 = v36;
          }
        }
        else if ((unsigned int *)v29 != v21)
        {
          unint64_t v30 = v56 - 1;
          do
          {
            *--uint64_t v28 = *v30;
            unsigned int v31 = *(_DWORD *)(v29 - 4);
            v29 -= 4;
            *v30-- = v31;
          }
          while ((unsigned int *)v29 != v21);
        }
      }
      else
      {
        int v50 = v21;
        uint64_t v51 = v27;
        uint64_t v49 = *a7;
        unint64_t result = boost::movelib::detail_adaptive::op_partial_merge<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(a5, &v51, a4, (uint64_t *)&v50, &v49, a14, &v55);
        unsigned int v32 = v55;
        *a7 = v55;
        uint64_t v33 = *a4;
        uint64_t v28 = v21;
        if ((unsigned int *)*a4 != v32)
        {
          uint64_t v28 = v32;
          while ((unsigned int *)v33 != v21)
          {
            unsigned int v34 = *(_DWORD *)(v33 - 4);
            v33 -= 4;
            *--uint64_t v28 = v34;
          }
        }
      }
      *a7 = v28;
      uint64_t v39 = *v17;
      if (v21 == v56) {
        goto LABEL_27;
      }
      uint64_t v40 = v39 - 8 * v23;
      uint64_t v41 = *(void *)(v40 - 8);
      *(void *)(v40 - 8) = *(void *)(v39 - 8);
      *(void *)(v39 - 8) = v41;
      if (v40 == *a2) {
        break;
      }
      if (*a2 == v39) {
        goto LABEL_26;
      }
LABEL_27:
      *a4 = (uint64_t)v21;
      uint64_t v20 = v39 - 8;
      uint64_t *v17 = v20;
      a11 -= a11 != 0;
      a12 = v25 - (v25 != 0);
      if (!--v15) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = v39;
LABEL_26:
    *a2 = v40;
    uint64_t v39 = *v17;
    goto LABEL_27;
  }
LABEL_28:
  *a9 = *a7;
  return result;
}

unint64_t boost::movelib::detail_adaptive::find_next_block<boost::movelib::reverse_iterator<unsigned long *>,boost::movelib::inverse<boost::movelib::detail_adaptive::less>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a5 > a6) {
    boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>();
  }
  if (a5 >= a6) {
    return 0;
  }
  unint64_t result = 0;
  uint64_t v8 = *a1;
  unint64_t v9 = (unsigned int *)(*a3 - 4 * a5 * a4 - 4);
  uint64_t v10 = (void *)(v8 - 8 * a5 - 8);
  do
  {
    unsigned int v11 = *(_DWORD *)(*a3 + 4 * ~(result * a4));
    if (v11 < *v9 || *v9 >= v11 && *(void *)(v8 + 8 * ~result) < *v10) {
      unint64_t result = a5;
    }
    v9 -= a4;
    ++a5;
    --v10;
  }
  while (a6 != a5);
  return result;
}

int *boost::movelib::detail_adaptive::stable_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(unsigned int *a1, char *a2, char *a3, uint64_t a4)
{
  if (*(void *)(a4 + 8)) {
    boost::movelib::detail_adaptive::stable_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
  }
  unint64_t v5 = (a2 - (char *)a1) >> 2;
  if (v5 >= (a3 - a2) >> 2) {
    unint64_t v5 = (a3 - a2) >> 2;
  }
  unsigned int v6 = *(char **)(a4 + 16);
  if ((unint64_t)v6 >= v5)
  {
    unint64_t result = (int *)boost::movelib::op_buffered_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(a1, a2, a3, (char **)a4);
    if (*(void *)(a4 + 8)) {
      *(void *)(a4 + 8) = 0;
    }
  }
  else
  {
    unsigned int v7 = *(char **)a4;
    return boost::movelib::merge_adaptive_ONlogN<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *>((int *)a1, a2, a3, v7, v6);
  }
  return result;
}

int *boost::movelib::merge_adaptive_ONlogN<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *>(int *result, char *a2, char *a3, char *a4, char *a5)
{
  if (result != (int *)a2 && a2 != a3)
  {
    uint64_t v8 = (unsigned int *)result;
    if (a5)
    {
      v9[0] = a4;
      v9[1] = 0;
      void v9[2] = a5;
      boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until((uint64_t *)v9, (unint64_t)a5, result);
      return (int *)boost::movelib::merge_adaptive_ONlogN_recursive<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v8, a2, a3, (a2 - (char *)v8) >> 2, (a3 - a2) >> 2, v9[0], (unint64_t)a5);
    }
    else
    {
      return (int *)boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((char *)result, a2, a3, (a2 - (char *)result) >> 2, (a3 - a2) >> 2);
    }
  }
  return result;
}

unsigned int *boost::movelib::merge_adaptive_ONlogN_recursive<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(unsigned int *result, char *a2, char *a3, unint64_t a4, unint64_t a5, char *a6, unint64_t a7)
{
  if (a4)
  {
    unint64_t v7 = a5;
    if (a5)
    {
      unint64_t v9 = a4;
      uint64_t v10 = result;
      while (1)
      {
        if (v9 <= a7 || v7 <= a7)
        {
          v30[0] = a6;
          v30[1] = a6;
          uint64_t v30[2] = &a6[4 * a7];
          return boost::movelib::op_buffered_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>>(v10, a2, a3, v30);
        }
        if (v7 + v9 == 2) {
          break;
        }
        if (v7 + v9 <= 0xF)
        {
          return (unsigned int *)boost::movelib::merge_bufferless_ON2<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((char *)v10, a2, a3);
        }
        uint64_t v29 = v10;
        if (v9 <= v7)
        {
          unint64_t v19 = v7 >> 1;
          unsigned int v13 = &a2[4 * (v7 >> 1)];
          unsigned int v12 = a2;
          if (a2 != (char *)v10)
          {
            unint64_t v20 = (a2 - (char *)v10) >> 2;
            unsigned int v12 = (char *)v10;
            do
            {
              unint64_t v21 = v20 >> 1;
              unint64_t v22 = &v12[4 * (v20 >> 1)];
              unsigned int v24 = *(_DWORD *)v22;
              unint64_t v23 = v22 + 4;
              v20 += ~(v20 >> 1);
              if (*(_DWORD *)v13 < v24) {
                unint64_t v20 = v21;
              }
              else {
                unsigned int v12 = v23;
              }
            }
            while (v20);
          }
          uint64_t v11 = (v12 - (char *)v10) >> 2;
        }
        else
        {
          uint64_t v11 = v9 >> 1;
          unsigned int v12 = (char *)&v10[v9 >> 1];
          unsigned int v13 = a3;
          if (a2 != a3)
          {
            unint64_t v14 = (a3 - a2) >> 2;
            unsigned int v13 = a2;
            do
            {
              unint64_t v15 = v14 >> 1;
              unsigned int v16 = &v13[4 * (v14 >> 1)];
              unsigned int v18 = *(_DWORD *)v16;
              int v17 = v16 + 4;
              v14 += ~(v14 >> 1);
              if (v18 >= *(_DWORD *)v12) {
                unint64_t v14 = v15;
              }
              else {
                unsigned int v13 = v17;
              }
            }
            while (v14);
          }
          unint64_t v19 = (v13 - a2) >> 2;
        }
        v9 -= v11;
        uint64_t v10 = (unsigned int *)boost::movelib::rotate_adaptive<unsigned int *,unsigned int *>(v12, a2, v13, v9, v19, (int *)a6, a7);
        unint64_t result = (unsigned int *)boost::movelib::merge_adaptive_ONlogN_recursive<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v29, v12, v10, v11, v19, a6, a7);
        v7 -= v19;
        if (v9) {
          BOOL v25 = v7 == 0;
        }
        else {
          BOOL v25 = 1;
        }
        a2 = v13;
        if (v25) {
          return result;
        }
      }
      unsigned int v26 = *v10;
      if (*(_DWORD *)a2 < *v10)
      {
        unsigned int *v10 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v26;
      }
    }
  }
  return result;
}

char *boost::movelib::rotate_adaptive<unsigned int *,unsigned int *>(char *result, char *a2, char *a3, unint64_t a4, unint64_t a5, int *a6, unint64_t a7)
{
  if (a4 <= a5 || a5 > a7)
  {
    if (a4 <= a7)
    {
      if (a4)
      {
        unsigned int v13 = a6;
        if (result != a2)
        {
          unsigned int v13 = a6;
          unint64_t v14 = result;
          do
          {
            int v15 = *(_DWORD *)v14;
            v14 += 4;
            *v13++ = v15;
          }
          while (v14 != a2);
        }
        while (a2 != a3)
        {
          int v16 = *(_DWORD *)a2;
          a2 += 4;
          *(_DWORD *)unint64_t result = v16;
          result += 4;
        }
        if (v13 != a6)
        {
          uint64_t v17 = 0;
          do
          {
            *(_DWORD *)&result[v17 * 4] = a6[v17];
            ++v17;
          }
          while (&a6[v17] != v13);
        }
      }
      else
      {
        return a3;
      }
    }
    else
    {
      return boost::movelib::rotate_gcd<unsigned int *>(result, a2, a3);
    }
  }
  else if (a5)
  {
    unint64_t v7 = a6;
    if (a2 != a3)
    {
      unint64_t v7 = a6;
      uint64_t v8 = a2;
      do
      {
        int v9 = *(_DWORD *)v8;
        v8 += 4;
        *v7++ = v9;
      }
      while (v8 != a3);
    }
    if (a2 != result)
    {
      uint64_t v10 = a3 - 4;
      do
      {
        int v11 = *((_DWORD *)a2 - 1);
        a2 -= 4;
        *(_DWORD *)uint64_t v10 = v11;
        v10 -= 4;
      }
      while (a2 != result);
    }
    for (; a6 != v7; result += 4)
    {
      int v12 = *a6++;
      *(_DWORD *)unint64_t result = v12;
    }
  }
  return result;
}

unsigned int *boost::movelib::op_buffered_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>>(unsigned int *result, char *a2, char *a3, char **a4)
{
  if (result != (unsigned int *)a2 && a2 != a3)
  {
    unsigned int v6 = *((_DWORD *)a2 - 1);
    if (*(_DWORD *)a2 < v6)
    {
      uint64_t v8 = (int *)result;
      if (a2 - (char *)result <= (unint64_t)(a3 - a2))
      {
        unint64_t v17 = (a2 - (char *)result) >> 2;
        do
        {
          unint64_t v18 = v17 >> 1;
          unint64_t v19 = &v8[v17 >> 1];
          unsigned int v21 = *v19;
          unint64_t v20 = v19 + 1;
          v17 += ~(v17 >> 1);
          if (*(_DWORD *)a2 < v21) {
            unint64_t v17 = v18;
          }
          else {
            uint64_t v8 = v20;
          }
        }
        while (v17);
        boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>::move_assign<unsigned int *>((uint64_t)a4, v8, (a2 - (char *)v8) >> 2);
        unint64_t v22 = *a4;
        unint64_t v23 = a4[1];
        return (unsigned int *)boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>(v22, v23, (char *)v8, a2, a3);
      }
      else
      {
        unint64_t v9 = (a3 - a2) >> 2;
        uint64_t v10 = (uint64_t)a2;
        do
        {
          unint64_t v11 = v9 >> 1;
          int v12 = (unsigned int *)(v10 + 4 * (v9 >> 1));
          unsigned int v14 = *v12;
          unsigned int v13 = v12 + 1;
          v9 += ~(v9 >> 1);
          if (v14 >= v6) {
            unint64_t v9 = v11;
          }
          else {
            uint64_t v10 = (uint64_t)v13;
          }
        }
        while (v9);
        boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>::move_assign<unsigned int *>((uint64_t)a4, (int *)a2, (v10 - (uint64_t)a2) >> 2);
        uint64_t v15 = (uint64_t)*a4;
        uint64_t v16 = (uint64_t)a4[1];
        return boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>((unsigned int *)v8, (unsigned int *)a2, v10, v15, v16);
      }
    }
  }
  return result;
}

uint64_t boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>::move_assign<unsigned int *>(uint64_t result, int *a2, unint64_t a3)
{
  uint64_t v3 = *(_DWORD **)result;
  if (a3 > (uint64_t)(*(void *)(result + 16) - *(void *)result) >> 2) {
    boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>::move_assign<unsigned int *>();
  }
  if (a3)
  {
    uint64_t v4 = 4 * a3;
    do
    {
      int v5 = *a2++;
      *v3++ = v5;
      v4 -= 4;
    }
    while (v4);
  }
  *(void *)(result + 8) = v3;
  return result;
}

BOOL boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::erase_unique(uint64_t *a1, unsigned int *a2)
{
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::find(a1, a2, (uint64_t *)&v9);
  uint64_t v3 = a1[1];
  if (*a1) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v5 = *a1 + 4 * v3;
  uint64_t v6 = v9;
  if (v9 != v5)
  {
    unint64_t v10 = v9;
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase((unint64_t *)a1, &v10, &v8);
  }
  return v6 != v5;
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::find(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v14 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v13 = v4 + 4 * v5;
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,false>,unsigned int>(&v14, &v13, a2, a3);
  uint64_t v9 = a1[1];
  if (*a1) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  if (!v10) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v11 = *a1 + 4 * v9;
  int v12 = (unsigned int *)*a3;
  if (*a3 != v11)
  {
    if (!v12) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v12) {
      *a3 = v11;
    }
  }
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,false>,unsigned int>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 2;
    unsigned int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      unint64_t v8 = &v4[v5 >> 1];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 1;
        *a1 = v8 + 1;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

unint64_t *boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  if (*result > *a2) {
    goto LABEL_12;
  }
  unint64_t v5 = result;
  unint64_t v7 = result[1];
  if (v4) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v9 = v4 + 4 * v7;
  if (v3 >= v9) {
LABEL_12:
  }
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::erase();
  if (v3 && v3 + 4 != v9)
  {
    unint64_t result = (unint64_t *)memmove((void *)v3, (const void *)(v3 + 4), v9 - (v3 + 4));
    unint64_t v7 = v5[1];
  }
  v5[1] = v7 - 1;
  *a3 = v3;
  return result;
}

void *std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_1F2688280;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_1F2688280;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1D25E1860);
}

void *std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F2688280;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

unint64_t std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(double *)v2 == 0.0) {
    unint64_t result = 0;
  }
  else {
    unint64_t result = llround(1000000000.0 / *(double *)v2 * (double)*a2);
  }
  uint64_t v4 = *(void *)(v2 + 32);
  do
  {
    _X5 = *(void *)(v2 + 40);
    __asm { CASPAL          X4, X5, X0, X1, [X9] }
    _ZF = _X4 == v4;
    uint64_t v4 = _X4;
  }
  while (!_ZF);
  return result;
}

void sub_1CFE6B770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE6B7FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppRemoteClient::AudioAppRemoteClient(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  v60[1] = *(uint64_t **)MEMORY[0x1E4F143B8];
  id v43 = a3;
  id v44 = a5;
  id v45 = a6;
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)a1);
  *(void *)a1 = &unk_1F26882C8;
  *(void *)(a1 + 16) = 850045863;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a1 + 88;
  *(void *)(a1 + 96) = a1 + 88;
  *(void *)(a1 + 104) = 0;
  id v13 = v43;
  *(void *)(a1 + 112) = v13;
  uint64_t v14 = *(void *)(a4 + 32);
  long long v15 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 136) = v15;
  *(void *)(a1 + 152) = v14;
  id v16 = v45;
  *(void *)(a1 + 160) = v16;
  id v17 = v44;
  *(void *)(a1 + 168) = v17;
  uint64_t v18 = *(void *)(a1 + 80);
  unint64_t v19 = *(void **)(a1 + 160);
  unint64_t v20 = (uint64_t *)*(unsigned int *)(a1 + 8);
  id v21 = v17;
  id v22 = v19;
  v55[0] = 0;
  BOOL v56 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  if (v21) {
    unint64_t v23 = (const char *)objc_msgSend(v21, "UTF8String", a1 + 88, a1 + 16, v43, v44, v45);
  }
  else {
    unint64_t v23 = "?";
  }
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v53, &v46.__r_.__value_.__l.__data_);
  unsigned int v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v55, "creatorName");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  char v25 = *(unsigned char *)v24;
  *(unsigned char *)unsigned int v24 = v53[0];
  v53[0] = v25;
  unsigned int v26 = (uint64_t *)v24[1];
  v24[1] = (uint64_t)v54;
  uint64_t v54 = v26;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53[0]);
  if (v22) {
    uint64_t v27 = (const char *)[v22 UTF8String];
  }
  else {
    uint64_t v27 = "?";
  }
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v51, &v46.__r_.__value_.__l.__data_);
  uint64_t v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v55, "attributionID");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  char v29 = *(unsigned char *)v28;
  *(unsigned char *)uint64_t v28 = v51[0];
  v51[0] = v29;
  unint64_t v30 = (uint64_t *)v28[1];
  v28[1] = (uint64_t)v52;
  uint64_t v52 = v30;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
  unsigned int v31 = (uint64_t *)*(int *)(a7 + 36);
  v49[0] = 5;
  int v50 = v31;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  unsigned int v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v55, "sourcePID");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  unsigned __int8 v33 = *(unsigned char *)v32;
  *(unsigned char *)unsigned int v32 = v49[0];
  v49[0] = v33;
  unsigned int v34 = (uint64_t *)v32[1];
  v32[1] = (uint64_t)v50;
  int v50 = v34;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
  v47[0] = 6;
  uint64_t v48 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  uint64_t v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v55, "clientID");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  unsigned __int8 v36 = *(unsigned char *)v35;
  *(unsigned char *)uint64_t v35 = v47[0];
  v47[0] = v36;
  unsigned int v37 = (uint64_t *)v35[1];
  v35[1] = (uint64_t)v48;
  uint64_t v48 = v37;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v48, v47[0]);
  int v38 = bswap32(v18);
  int v58 = v38;
  if (((char)v38 - 32) > 0x5E
    || (((__int16)v38 >> 8) - 32) > 0x5E
    || ((v38 << 8 >> 24) - 32) > 0x5E
    || ((v38 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v46, v18);
  }
  else
  {
    __int16 v59 = 39;
    char __s = 39;
    std::string::basic_string[abi:ne180100]<0>(&v46, &__s);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&__s, (uint64_t)&v46);
  uint64_t v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v55, "type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__s);
  char v40 = *(unsigned char *)v39;
  *(unsigned char *)uint64_t v39 = __s;
  char __s = v40;
  uint64_t v41 = (uint64_t *)v39[1];
  v39[1] = (uint64_t)v60[0];
  v60[0] = v41;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__s);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v60, __s);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v55, -1, 0x20u, 0, 0, (void *)(a1 + 176));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v55[0]);

  return a1;
}

void sub_1CFE6BCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, std::mutex *a10, void *a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t *a28)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a28);

  std::__list_imp<NSDictionary * {__strong}>::clear(a9);
  std::mutex::~mutex(a10);
  BaseOpaqueObject::~BaseOpaqueObject((BaseOpaqueObject *)v28);

  _Unwind_Resume(a1);
}

id as::server::AudioAppRemoteClient::GetXPCConnection(id *this)
{
  uint64_t v2 = (std::mutex *)(this + 2);
  std::mutex::lock((std::mutex *)(this + 2));
  id v3 = this[14];
  std::mutex::unlock(v2);
  return v3;
}

id as::server::AudioAppRemoteClient::GetDeferredMessages(as::server::AudioAppRemoteClient *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v4 = (uint64_t *)((char *)this + 88);
  for (uint64_t i = *((void *)this + 12); (uint64_t *)i != v4; uint64_t i = *(void *)(i + 8))
  {
    id v6 = *(id *)(i + 16);
    [v3 addObject:v6];
  }
  std::__list_imp<NSDictionary * {__strong}>::clear(v4);
  std::mutex::unlock(v2);
  return v3;
}

void sub_1CFE6BEAC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioAppRemoteClient::DeferPropertyChangeCallback(as::server::AudioAppRemoteClient *this, NSString *a2, NSDictionary *a3, int a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = a2;
  BOOL v8 = a3;
  std::mutex::lock((std::mutex *)((char *)this + 16));
  if (*((void *)this + 14))
  {
    BOOL v10 = (char *)this + 88;
    uint64_t v11 = *((void *)this + 13);
    if (a4)
    {
      uint64_t v12 = *((void *)this + 12);
      id v13 = v7;
      while (1)
      {
        if ((char *)v12 == v10)
        {

          goto LABEL_10;
        }
        uint64_t v14 = [*(id *)(v12 + 16) objectForKey:v13];

        if (v14) {
          break;
        }
        uint64_t v12 = *(void *)(v12 + 8);
      }

      if ((char *)v12 != v10) {
        unint64_t v9 = (as::server *)std::list<NSDictionary * {__strong}>::erase((uint64_t)this + 88, (uint64_t *)v12);
      }
    }
LABEL_10:
    long long v15 = *(id *)as::server::gSessionServerLog(v9);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = (void *)((char *)this + 176);
      if (*((char *)this + 199) < 0) {
        id v16 = (void *)*v16;
      }
      *(_DWORD *)audit_token_t buf = 136316162;
      *(void *)&uint8_t buf[4] = "AudioApplicationInfoRemoteClient.mm";
      __int16 v23 = 1024;
      int v24 = 90;
      __int16 v25 = 2112;
      unsigned int v26 = v7;
      __int16 v27 = 2112;
      uint64_t v28 = v8;
      __int16 v29 = 2080;
      unint64_t v30 = v16;
      _os_log_impl(&dword_1CFE2A000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d dispatching %@, payload: %@ to audio app client {%s}", buf, 0x30u);
    }
    if (v8) {
      id v17 = v8;
    }
    else {
      id v17 = (NSDictionary *)objc_alloc_init(MEMORY[0x1E4F1C9E8]);
    }
    uint64_t v18 = v17;
    unint64_t v20 = v7;
    id v21 = v17;
    *(void *)audit_token_t buf = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    std::list<NSDictionary * {__strong}>::push_back((uint64_t *)this + 11, (id *)buf);

    if (!v11)
    {
      unint64_t v19 = [*((id *)this + 14) remoteObjectProxy];
      [v19 pingClient:*((unsigned int *)this + 2)];
    }
  }
  std::mutex::unlock((std::mutex *)((char *)this + 16));
}

void sub_1CFE6C0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::mutex::unlock(v13);

  _Unwind_Resume(a1);
}

uint64_t std::list<NSDictionary * {__strong}>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)(v3 + 8) = v4;
  *(void *)a2[1] = v3;
  --*(void *)(a1 + 16);

  operator delete(a2);
  return v4;
}

uint64_t as::server::AudioAppRemoteClient::PrintObject(as::server::AudioAppRemoteClient *this, __sFILE *a2)
{
  uint64_t v2 = (char *)this + 176;
  if (*((char *)this + 199) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  return fprintf(a2, "<AudioAppRemoteClient { %s }>", v2);
}

void as::server::AudioAppRemoteClient::~AudioAppRemoteClient(as::server::AudioAppRemoteClient *this)
{
  *(void *)this = &unk_1F26882C8;
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }

  std::__list_imp<NSDictionary * {__strong}>::clear((uint64_t *)this + 11);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F26882C8;
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }

  std::__list_imp<NSDictionary * {__strong}>::clear((uint64_t *)this + 11);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
  BaseOpaqueObject::~BaseOpaqueObject(this);
  JUMPOUT(0x1D25E1860);
}

BOOL TOpaqueObject<as::server::AudioAppRemoteClient,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<as::server::AudioAppRemoteClient>::sRTTI || a2 == &BaseOpaqueObject::sBaseRTTI;
}

void OpaqueObjectMgr::OpaqueObjectMgr(OpaqueObjectMgr *this)
{
  char v3[4] = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F2688328;
  v3[3] = v3;
  uint64_t v2 = std::__function::__value_func<unsigned int ()>::__value_func[abi:ne180100]((uint64_t)this, (uint64_t)v3);
  *(_DWORD *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 850045863;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(void *)(v2 + 136) = 0;
  std::__function::__value_func<unsigned int ()>::~__value_func[abi:ne180100](v3);
  *((_DWORD *)this + 36) = 0;
  atomic_store((getpid() & 0x3FFFF) << 12, (unsigned int *)this + 36);
}

void sub_1CFE6C40C(_Unwind_Exception *a1)
{
  caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::~guarded_lookup_hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::remove(uint64_t a1, int a2)
{
  v19.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 80);
  v19.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 80));
  uint64_t v4 = atomic_load((unint64_t *)(a1 + 40));
  if (v4
    && (unint64_t SlotForKey = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::findSlotForKey(v4, a2), (SlotForKey & 1) != 0))
  {
    uint64_t v7 = v6;
    atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v4 + 8 * HIDWORD(SlotForKey) + 16));
    if (v6)
    {
      int v8 = atomic_load((unsigned int *)(a1 + 48));
      if (v8 >= 1)
      {
        do
        {
          uint64_t v18 = 50;
          std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(&v18);
          int v9 = atomic_load((unsigned int *)(a1 + 48));
        }
        while (v9 > 0);
      }
      if ((unsigned __int16)atomic_load((unsigned int *)v7))
      {
        std::unique_lock<std::mutex>::unlock(&v19);
        while ((unsigned __int16)atomic_load((unsigned int *)v7))
        {
          uint64_t v18 = 500;
          std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(&v18);
        }
        std::unique_lock<std::mutex>::lock(&v19);
        uint64_t v4 = atomic_load((unint64_t *)(a1 + 40));
      }
      caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::element_t::release((unsigned int *)v7);
      int v13 = *(_DWORD *)(a1 + 32) - 1;
      *(_DWORD *)(a1 + 32) = v13;
      if (v4)
      {
        unsigned int v14 = 16 * v13;
        unsigned int v15 = *(_DWORD *)(v4 + 8);
        if (v14 / v15 <= 2 && v15 >= 9) {
          caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::rehash((unint64_t *)a1, v15 >> 1);
        }
      }
      uint64_t v7 = 1;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::emptyReleasePool(a1);
  if (v19.__owns_) {
    std::mutex::unlock(v19.__m_);
  }
  return v7;
}

void sub_1CFE6C580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(exception_object);
}

void BaseOpaqueObject::~BaseOpaqueObject(BaseOpaqueObject *this)
{
  *(void *)this = &unk_1F26882F8;
  int v2 = *((_DWORD *)this + 2);
  if (v2)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::remove(OpaqueObjectMgr::sInstance, v2);
    *((_DWORD *)this + 2) = 0;
  }
}

BOOL BaseOpaqueObject::isa(uint64_t a1, void *a2)
{
  return a2 == &BaseOpaqueObject::sBaseRTTI;
}

void std::__function::__func<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0,std::allocator<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0>,unsigned int ()(unsigned int)>::~__func()
{
}

void *std::__function::__func<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0,std::allocator<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0>,unsigned int ()(unsigned int)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  void *result = &unk_1F2688328;
  return result;
}

void std::__function::__func<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0,std::allocator<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0>,unsigned int ()(unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2688328;
}

void *std::__function::__value_func<unsigned int ()(unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<unsigned int ()(unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  if (atomic_load((unsigned int *)(a1 + 48)))
  {
    _os_assert_log();
    uint64_t v6 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v6);
  }
  uint64_t v3 = atomic_load((unint64_t *)(a1 + 40));
  if (v3)
  {
    uint64_t v4 = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::~table_impl(v3);
    MEMORY[0x1D25E1860](v4, 0x1060C402CF69088);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  uint64_t v7 = (void **)(a1 + 56);
  std::vector<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  return std::__function::__value_func<unsigned int ()>::~__value_func[abi:ne180100]((void *)a1);
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2) {
        caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::element_t::release(*v3);
      }
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

unsigned int *caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::element_t::release(unsigned int *result)
{
  if ((atomic_fetch_add((atomic_uint *volatile)result, 0xFFFF0000) & 0xFFFF0000) == 0x10000)
  {
    if (!atomic_load(result))
    {
      JUMPOUT(0x1D25E1860);
    }
    caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load();
  }
  return result;
}

void std::vector<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::~table_impl(result);
    JUMPOUT(0x1D25E1860);
  }
  return result;
}

_DWORD *caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::rehash(unint64_t *a1, unsigned int a2)
{
  uint64_t v4 = a1 + 5;
  unint64_t v5 = atomic_load(a1 + 5);
  uint64_t v6 = operator new(8 * (a2 - 1) + 24);
  *(void *)uint64_t v6 = a1;
  void v6[2] = a2;
  *((void *)v6 + 2) = 0;
  bzero(v6 + 4, 8 * a2);
  if (v5)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::copyAllElementsTo(v5, (uint64_t)v6);
    atomic_store((unint64_t)v6, v4);
    unint64_t v7 = a1[9];
    int v8 = (unint64_t *)a1[8];
    if ((unint64_t)v8 >= v7)
    {
      BOOL v10 = (void *)a1[7];
      uint64_t v11 = v8 - v10;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = v7 - (void)v10;
      unint64_t v13 = (uint64_t)(v7 - (void)v10) >> 2;
      if (v13 <= v11 + 1) {
        unint64_t v13 = v11 + 1;
      }
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      __int16 v25 = a1 + 9;
      if (v14)
      {
        unsigned int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)(a1 + 9), v14);
        BOOL v10 = (void *)a1[7];
        int v8 = (unint64_t *)a1[8];
      }
      else
      {
        unsigned int v15 = 0;
      }
      id v16 = (unint64_t *)&v15[8 * v11];
      id v17 = &v15[8 * v14];
      int v24 = v17;
      unint64_t *v16 = v5;
      *((void *)&v23 + 1) = v16 + 1;
      if (v8 == v10)
      {
        int v9 = v16 + 1;
      }
      else
      {
        do
        {
          unint64_t v18 = *--v8;
          *int v8 = 0;
          *--id v16 = v18;
        }
        while (v8 != v10);
        int v9 = (void *)*((void *)&v23 + 1);
        id v17 = v24;
      }
      long long v19 = *(_OWORD *)(a1 + 7);
      a1[7] = (unint64_t)v16;
      a1[8] = (unint64_t)v9;
      long long v23 = v19;
      unint64_t v20 = a1[9];
      a1[9] = (unint64_t)v17;
      int v24 = (char *)v20;
      uint64_t v22 = v19;
      std::__split_buffer<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl>>>::~__split_buffer((uint64_t)&v22);
    }
    else
    {
      *int v8 = v5;
      int v9 = v8 + 1;
    }
    a1[8] = (unint64_t)v9;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

unint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl::copyAllElementsTo(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    uint64_t v4 = (atomic_uint **)(result + 16);
    do
    {
      unint64_t v5 = *v4;
      if ((unint64_t)*v4 + 1 >= 2)
      {
        uint64_t result = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::findSlotForKey(a2, v5[1]);
        if ((result & 1) == 0)
        {
          atomic_fetch_add(v5, 0x10000u);
          atomic_store((unint64_t)v5, (unint64_t *)(a2 + 8 * HIDWORD(result) + 16));
        }
      }
      ++v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1D25E1860);
}

uint64_t std::__split_buffer<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl>>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 >= 1)
  {
    if ((double)v1 == 9.22337204e15) {
      int v2 = 0;
    }
    else {
      int v2 = -127;
    }
    if ((double)v1 > 9.22337204e15) {
      int v2 = 1;
    }
    if ((double)v1 < 9.22337204e15) {
      int v2 = -1;
    }
    BOOL v3 = v2 >= 0 || v2 == -127;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4 = 1000 * v1;
    if (v3) {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4 = 0x7FFFFFFFFFFFFFFFLL;
    }
    __ns.__rep_ = v4;
    std::this_thread::sleep_for (&__ns);
  }
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::unique_lock<std::mutex>::lock(v2);
  }
}

void std::unique_lock<std::mutex>::lock(std::unique_lock<std::mutex> *this)
{
  uint64_t m = this->__m_;
  if (!m)
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
LABEL_5:
    std::__throw_system_error(11, "unique_lock::lock: already locked");
    std::__call_once_proxy[abi:ne180100]<std::tuple<OpaqueObjectMgrInstance(void)::$_0 &&>>();
  }
  if (this->__owns_) {
    goto LABEL_5;
  }
  std::mutex::lock(m);
  this->__owns_ = 1;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OpaqueObjectMgrInstance(void)::$_0 &&>>()
{
}

void sub_1CFE6CDD4(_Unwind_Exception *a1)
{
  MEMORY[0x1D25E1860](v1, 0x1020C400FEAF0FDLL);
  _Unwind_Resume(a1);
}

caulk::log_category *caulk::log_category::log_category(caulk::log_category *this, const char *subsystem, const char *category)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  os_log_t v4 = os_log_create(subsystem, category);
  unint64_t v5 = *(void **)this;
  *(void *)this = v4;

  return this;
}

void as::server::ProcessInfo::processName(as::server::ProcessInfo *this@<X0>, std::string *a2@<X8>)
{
  int v4 = *((char *)this + 47);
  if (v4 < 0) {
    uint64_t v5 = *((void *)this + 4);
  }
  else {
    uint64_t v5 = *((unsigned __int8 *)this + 47);
  }
  uint64_t v6 = (void **)((char *)this + 24);
  if (v5)
  {
    if ((v4 & 0x80) == 0)
    {
LABEL_6:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
      a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
      return;
    }
  }
  else
  {
    unint64_t v7 = (void *)*((void *)this + 1);
    if (v7) {
      [v7 auditToken];
    }
    else {
      memset(&atoken, 0, sizeof(atoken));
    }
    int v8 = (caulk::platform *)audit_token_to_pid(&atoken);
    caulk::platform::process_name(v8);
    if (*((char *)this + 47) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v9;
    *((void *)this + 5) = v10;
    if ((*((unsigned char *)this + 47) & 0x80) == 0) {
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
}

const void **applesauce::CF::ArrayRef_iterator<applesauce::CF::TypeRef>::iterator_proxy::~iterator_proxy(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void applesauce::CF::ArrayRef::~ArrayRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void *applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator(void *a1)
{
  int v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  BOOL v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::iterator_proxy::~iterator_proxy(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

void applesauce::CF::convert_error(applesauce::CF *this)
{
}

const __CFBoolean *applesauce::CF::details::treat_as_BOOL_for_convert_as<double>(const __CFBoolean *result)
{
  if (*(double *)&result != 0.0)
  {
    CFBooleanRef v1 = result;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v1)) {
      *(double *)&uint64_t result = (double)CFBooleanGetValue(v1);
    }
    else {
      *(double *)&uint64_t result = 0.0;
    }
  }
  return result;
}

const __CFBoolean *applesauce::CF::details::treat_as_BOOL_for_convert_as<long long>(const __CFBoolean *result)
{
  if (result)
  {
    CFBooleanRef v1 = result;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v1)) {
      return (const __CFBoolean *)CFBooleanGetValue(v1);
    }
    else {
      return 0;
    }
  }
  return result;
}

void applesauce::CF::not_found(applesauce::CF *this)
{
}

void sub_1CFE6D1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE6D278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::HandleInputMuteChange(_anonymous_namespace_ *this, void *a2, NSMutableDictionary *a3)
{
  unsigned int v3 = this;
  int v4 = [a2 objectForKey:*MEMORY[0x1E4F75CE0]];
  uint64_t v5 = v4;
  if (v3 && v4)
  {
    uint64_t v6 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v4);
    as::server::LegacySessionManager::FindAudioApplicationForSession(v6, v3, &v7);
    if (v7) {
      as::server::AudioApplicationInfo::HandleSessionInputMuteChange(v7, v3, [(as::server::LegacySessionManager *)v5 BOOLValue]);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1CFE6D31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void as::server::HandleCFNotification(as::server *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  int v6 = (int)a2;
  unint64_t v7 = a3;
  int v8 = (as::server *)[v7 isEqualToString:*MEMORY[0x1E4F4EA78]];
  if (v8)
  {
    long long v9 = as::server::GetASCallbackQueue(v8);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    void v10[2] = ___ZN2as6server20HandleCFNotificationEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke;
    v10[3] = &unk_1E6875A98;
    int v12 = v6;
    id v11 = v7;
    dispatch_async(v9, v10);
  }
}

void sub_1CFE6D404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2as6server20HandleCFNotificationEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(unsigned int *)(a1 + 40);
  id v2 = *(id *)(a1 + 32);
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v42, v1);
  unsigned int v3 = v42;
  if (v42)
  {
    int v4 = v43;
    if (v43)
    {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v3, &cf);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    else
    {
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v42, &cf);
    }
    if (v42)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v42 + 158);
      char v44 = 0;
    }
    unint64_t v7 = as::server::forbid_acq::CopyCMSessionAudioMode((as::server::forbid_acq *)cf, v5);
    int v8 = v42;
    if (!v42)
    {
      uint64_t v30 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v30);
    }
    long long v9 = v43;
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::GetSpatialPreferences(*((void **)v8 + 12), v1, v7, (uint64_t)&v39);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    id v10 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    unsigned __int8 v11 = v40;
    int v12 = [NSNumber numberWithBool:v40];
    unint64_t v13 = (NSDictionary *)objc_msgSend(v10, "initWithObjectsAndKeys:", v12, @"AVAudioSessionSpatializationEnabledKey", 0);

    if (!v42 || (os_unfair_lock_lock((os_unfair_lock_t)v42 + 158), char v44 = 1, (v14 = v42) == 0))
    {
      uint64_t v34 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v34);
    }
    unsigned int v15 = v43;
    if (v43)
    {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      *((unsigned char *)v14 + 432) = v11;
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      unint64_t v14 = v42;
      if (!v42)
      {
        uint64_t v31 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v31);
      }
      id v16 = v43;
      if (v43)
      {
        char v17 = 0;
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_22:
        as::server::AudioSessionInfo::SetSpatialPreferences((uint64_t)v14, v39);
        if ((v17 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        unint64_t v18 = v42;
        if (!v42)
        {
          uint64_t v32 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v32);
        }
        long long v19 = v43;
        if (v43) {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*((char *)v18 + 223) < 0) {
          std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v18 + 25), *((void *)v18 + 26));
        }
        else {
          std::string v38 = *(std::string *)((char *)v18 + 200);
        }
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)buf, "key");
        *(void *)&v48[2] = buf;
        unsigned char v48[10] = 1;
        id v20 = v2;
        uint64_t v35 = (char *)[v20 UTF8String];
        v52[1] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&v50 + 2, &v35);
        char v53 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v54, (uint64_t)buf, 2, 1, 2);
        BOOL v56 = (void **)&v54;
        char v57 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)&v54, 1, 1, 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v54);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v55, v54);
        for (uint64_t i = 0; i != -8; i -= 4)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v50 + i * 8 + 2);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v52[i], *((unsigned __int8 *)&v50 + i * 8 + 2));
        }
        long long v23 = *(id *)as::server::gSessionServerLog(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          int v24 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
          std::string::size_type v25 = v38.__r_.__value_.__r.__words[0];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v36, -1, 0x20u, 0, 0, &v54);
          unsigned int v26 = &v38;
          if (v24 < 0) {
            unsigned int v26 = (std::string *)v25;
          }
          if (SHIBYTE(v56) >= 0) {
            __int16 v27 = (void **)&v54;
          }
          else {
            __int16 v27 = v54;
          }
          *(_DWORD *)audit_token_t buf = 136316162;
          std::string v46 = "AudioSessionServerImpNotificationHandlers.mm";
          __int16 v47 = 1024;
          *(_DWORD *)uint64_t v48 = 644;
          *(_WORD *)&v48[4] = 2080;
          *(void *)&v48[6] = "property_change";
          __int16 v49 = 2080;
          int v50 = v26;
          __int16 v51 = 2080;
          v52[0] = v27;
          _os_log_impl(&dword_1CFE2A000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
          if (SHIBYTE(v56) < 0) {
            operator delete(v54);
          }
        }

        uint64_t v28 = v42;
        if (!v42)
        {
          uint64_t v33 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v33);
        }
        __int16 v29 = v43;
        if (v43) {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        as::server::AudioSessionInfo::DeferPropertyChangeCallback(v28, (NSString *)v20, v13, 1);
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v36[0]);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }

        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_51;
      }
    }
    else
    {
      id v16 = 0;
      *((unsigned char *)v42 + 432) = v11;
    }
    char v17 = 1;
    goto LABEL_22;
  }
  int v6 = *(id *)as::server::gSessionServerLog(0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)audit_token_t buf = 136315394;
    std::string v46 = "AudioSessionServerImpNotificationHandlers.mm";
    __int16 v47 = 1024;
    *(_DWORD *)uint64_t v48 = 616;
    _os_log_impl(&dword_1CFE2A000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid session pointer.", buf, 0x12u);
  }
LABEL_51:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v42);
}

void sub_1CFE6D96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,CFTypeRef cf,os_unfair_lock_s *a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }

  if (cf) {
    CFRelease(cf);
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a25);

  _Unwind_Resume(a1);
}

void as::server::HandleMicrophoneInjectionCapabilityChangeNotification(as::server *this, NSDictionary *a2)
{
  id v2 = this;
  id v3 = (id)*MEMORY[0x1E4F4EA68];
  int v4 = v2;
  uint64_t v5 = as::server::GetASCallbackQueue(v4);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3321888768;
  void v7[2] = ___ZN2as6server53HandleMicrophoneInjectionCapabilityChangeNotificationEP12NSDictionary_block_invoke;
  long long v7[3] = &__block_descriptor_48_ea8_32c93_ZTSKZN2as6server53HandleMicrophoneInjectionCapabilityChangeNotificationEP12NSDictionaryE3__0_e5_v8__0l;
  id v8 = v3;
  long long v9 = v4;
  int v6 = v4;
  dispatch_async(v5, v7);
}

void sub_1CFE6DBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2as6server53HandleMicrophoneInjectionCapabilityChangeNotificationEP12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v2 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance((as::server::LegacySessionManager *)a1);
  as::server::LegacySessionManager::GetMicrophoneInjectionSubscribersList(v2, (uint64_t)&v11);
  id v3 = v11;
  int v4 = v12;
  if (v11 != v12)
  {
    do
    {
      unsigned int v5 = *v3;
      int v6 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v13, *v3);
      if (v13)
      {
        unint64_t v7 = *(id *)as::server::gSessionServerLog(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)audit_token_t buf = 136315650;
          id v16 = "AudioSessionServerImpNotificationHandlers.mm";
          __int16 v17 = 1024;
          int v18 = 850;
          __int16 v19 = 1024;
          unsigned int v20 = v5;
          _os_log_impl(&dword_1CFE2A000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Dispatching MicrophoneInjectionCapabilityChangeNotification for session:0x%x", buf, 0x18u);
        }
        id v8 = v13;
        if (!v13)
        {
          uint64_t v10 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v10);
        }
        long long v9 = v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        as::server::AudioSessionInfo::DeferPropertyChangeCallback(v8, *(NSString **)(a1 + 32), *(NSDictionary **)(a1 + 40), 1);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v13);
      ++v3;
    }
    while (v3 != v4);
    id v3 = v11;
  }
  if (v3)
  {
    int v12 = v3;
    operator delete(v3);
  }
}

void sub_1CFE6DD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, os_unfair_lock_s *a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a14);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_32c93_ZTSKZN2as6server53HandleMicrophoneInjectionCapabilityChangeNotificationEP12NSDictionaryE3__0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c93_ZTSKZN2as6server53HandleMicrophoneInjectionCapabilityChangeNotificationEP12NSDictionaryE3__0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
}

void ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  id v2 = *(as::server **)(a1 + 40);
  if (!v2)
  {
    int v4 = (as::server *)*(id *)(a1 + 32);
LABEL_85:
    uint64_t v58 = (id *)as::server::gSessionServerLog(v4);
    ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_cold_2(v58);
    uint64_t v59 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v59);
  }
  unsigned int v3 = *(_DWORD *)(a1 + 56);
  CFRetain(*(CFTypeRef *)(a1 + 40));
  int v4 = (as::server *)*(id *)(a1 + 32);
  int v6 = v4;
  if (!v3) {
    goto LABEL_85;
  }
  as::server::GetPickableRoutesFromMX(v2, v5);
  uint64_t v62 = (as::server *)objc_claimAutoreleasedReturnValue();
  unint64_t v7 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v72, v3);
  id v8 = v72;
  if (!v72) {
    goto LABEL_78;
  }
  long long v9 = v73;
  if (v73) {
    atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v8 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v71, *((const std::string::value_type **)v8 + 25), *((void *)v8 + 26));
  }
  else {
    std::string v71 = *(std::string *)((char *)v8 + 200);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *(id *)as::server::gSessionServerLog(v7);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
    std::string::size_type v12 = v71.__r_.__value_.__r.__words[0];
    v67[0] = 0;
    uint64_t v68 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v67, -1, 0x20u, 0, 0, __p);
    unint64_t v13 = &v71;
    if (v11 < 0) {
      unint64_t v13 = (std::string *)v12;
    }
    if (v70 >= 0) {
      unint64_t v14 = __p;
    }
    else {
      unint64_t v14 = (void **)__p[0];
    }
    *(_DWORD *)audit_token_t buf = 136316162;
    *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
    __int16 v75 = 1024;
    int v76 = 92;
    __int16 v77 = 2080;
    unint64_t v78 = "handle_begin_interruption";
    __int16 v79 = 2080;
    uint64_t v80 = v13;
    __int16 v81 = 2080;
    uint64_t v82 = v14;
    _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v70 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v68, v67[0]);
  }

  unsigned int v15 = [(as::server *)v6 objectForKey:*MEMORY[0x1E4F75C28]];
  id v16 = v15;
  if (!v15 || (__int16 v17 = (as::server *)[v15 BOOLValue], !v17))
  {
    __int16 v19 = (NSDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    unsigned int v20 = (void *)[objc_alloc(NSNumber) initWithUnsignedInt:1];
    [(NSDictionary *)v19 setObject:v20 forKey:*MEMORY[0x1E4F4EA50]];

    uint64_t v21 = [(as::server *)v6 objectForKey:*MEMORY[0x1E4F75C48]];
    id v60 = [(as::server *)v6 objectForKey:*MEMORY[0x1E4F75C40]];
    v67[0] = 0;
    uint64_t v68 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    uint64_t v22 = (std::__shared_weak_count *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    if (!v21) {
      goto LABEL_32;
    }
    long long v23 = v21;
    *(void *)audit_token_t buf = [(__CFString *)v23 UTF8String];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v65, (char **)buf);
    int v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v67, "interrupted_by");
    std::string::size_type v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v24, "name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
    char v26 = *(unsigned char *)v25;
    *(unsigned char *)std::string::size_type v25 = v65[0];
    v65[0] = v26;
    __int16 v27 = (uint64_t *)v25[1];
    v25[1] = (uint64_t)v66;
    unint64_t v66 = v27;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v66, v65[0]);
    uint64_t v28 = v72;
    if (!v72)
    {
      uint64_t v56 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v56);
    }
    uint64_t v22 = v73;
    if (v73)
    {
      atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      int v29 = *((unsigned __int8 *)v28 + 120);
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (!v29)
      {
LABEL_32:
        if (!v60) {
          goto LABEL_39;
        }
        id v30 = v60;
        *(void *)audit_token_t buf = [v30 UTF8String];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v63, (char **)buf);
        uint64_t v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v67, "interrupted_by");
        uint64_t v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v31, "bundleID");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
        char v33 = *(unsigned char *)v32;
        *(unsigned char *)uint64_t v32 = v63[0];
        v63[0] = v33;
        uint64_t v34 = (uint64_t *)v32[1];
        v32[1] = (uint64_t)v64;
        uint64_t v64 = v34;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v64, v63[0]);
        uint64_t v35 = v72;
        if (!v72)
        {
          uint64_t v57 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v57);
        }
        uint64_t v22 = v73;
        if (v73)
        {
          atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
          int v36 = *((unsigned __int8 *)v35 + 120);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          if (!v36)
          {
LABEL_39:
            unsigned int v37 = *(id *)as::server::gSessionServerLog((as::server *)v22);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              int v38 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
              std::string::size_type v39 = v71.__r_.__value_.__r.__words[0];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v67, -1, 0x20u, 0, 0, __p);
              unsigned __int8 v40 = &v71;
              if (v38 < 0) {
                unsigned __int8 v40 = (std::string *)v39;
              }
              if (v70 >= 0) {
                uint64_t v41 = __p;
              }
              else {
                uint64_t v41 = (void **)__p[0];
              }
              *(_DWORD *)audit_token_t buf = 136316162;
              *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
              __int16 v75 = 1024;
              int v76 = 145;
              __int16 v77 = 2080;
              unint64_t v78 = "begin_interruption_callback";
              __int16 v79 = 2080;
              uint64_t v80 = v40;
              __int16 v81 = 2080;
              uint64_t v82 = v41;
              _os_log_impl(&dword_1CFE2A000, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
              if (v70 < 0) {
                operator delete(__p[0]);
              }
            }

            if (v16 && [v16 BOOLValue]) {
              [(NSDictionary *)v19 setObject:v16 forKey:*MEMORY[0x1E4F4EA60]];
            }
            int v42 = -[as::server objectForKey:](v6, "objectForKey:", *MEMORY[0x1E4F75C38], v60);
            id v43 = v42;
            if (v42)
            {
              int v44 = [v42 unsignedIntValue];
              if ([v43 unsignedIntValue] == 4) {
                uint64_t v45 = 4;
              }
              else {
                uint64_t v45 = 2 * (v44 == 1);
              }
              if (!v16) {
                goto LABEL_60;
              }
            }
            else
            {
              uint64_t v45 = 0;
              if (!v16)
              {
LABEL_60:
                std::string v46 = (void *)[objc_alloc(NSNumber) initWithUnsignedInt:v45];
                [(NSDictionary *)v19 setObject:v46 forKey:*MEMORY[0x1E4F4EA38]];

                __int16 v47 = v72;
                if (!v72)
                {
                  uint64_t v53 = _os_crash();
                  as::server::require_acq::AudioSessionServerSetClientPlayState(v53);
                }
                uint64_t v48 = v73;
                if (v73) {
                  atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                as::server::GetCurrentlyPickedRoute(v62, buf);
                as::server::AudioSessionInfo::SetPickedRouteAtTimeOfInterruption((uint64_t)v47, (id **)buf);
                std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)buf, 0);
                if (v48) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v48);
                }
                __int16 v49 = v72;
                if (!v72)
                {
                  uint64_t v54 = _os_crash();
                  as::server::require_acq::AudioSessionServerSetClientPlayState(v54);
                }
                int v50 = v73;
                if (v73) {
                  atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                as::server::AudioSessionInfo::SetInterrupted(v49, 1, v21);
                if (v50) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v50);
                }
                __int16 v51 = v72;
                if (!v72)
                {
                  uint64_t v55 = _os_crash();
                  as::server::require_acq::AudioSessionServerSetClientPlayState(v55);
                }
                uint64_t v52 = v73;
                if (v73) {
                  atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                as::server::AudioSessionInfo::DeferPropertyChangeCallback(v51, (NSString *)*MEMORY[0x1E4F4EA30], v19, 0);
                if (v52) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v52);
                }

                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v68, v67[0]);

                goto LABEL_76;
              }
            }
            if ([v16 BOOLValue]) {
              uint64_t v45 = 1;
            }
            else {
              uint64_t v45 = v45;
            }
            goto LABEL_60;
          }
        }
        else if (!*((unsigned char *)v72 + 120))
        {
          goto LABEL_39;
        }
        uint64_t v22 = (std::__shared_weak_count *)-[NSDictionary setObject:forKey:](v19, "setObject:forKey:", v30, *MEMORY[0x1E4F4EA40], v60);
        goto LABEL_39;
      }
    }
    else if (!*((unsigned char *)v72 + 120))
    {
      goto LABEL_32;
    }
    uint64_t v22 = (std::__shared_weak_count *)-[NSDictionary setObject:forKey:](v19, "setObject:forKey:", v23, *MEMORY[0x1E4F4EA48], v60, v62, v2);
    goto LABEL_32;
  }
  int v18 = *(id *)as::server::gSessionServerLog(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)audit_token_t buf = 136315394;
    *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
    __int16 v75 = 1024;
    int v76 = 102;
    _os_log_impl(&dword_1CFE2A000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Dropping wasSuspended interruption notification (see rdar://91116492)", buf, 0x12u);
  }

LABEL_76:
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
LABEL_78:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v72);

  CFRelease(v2);
}

void sub_1CFE6E6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, const void *a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,os_unfair_lock_s *a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a29);

  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a11);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_40c36_ZTSN10applesauce2CF9ObjectRefIPKvEE(void *result, uint64_t a2)
{
  id v2 = result;
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3) {
    id result = CFRetain(*(CFTypeRef *)(a2 + 40));
  }
  v2[5] = v3;
  return result;
}

void __destroy_helper_block_ea8_40c36_ZTSN10applesauce2CF9ObjectRefIPKvEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_82(uint64_t a1)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  id v2 = *(as::server **)(a1 + 40);
  if (!v2)
  {
    int v4 = (as::server *)*(id *)(a1 + 32);
LABEL_107:
    __int16 v75 = (id *)as::server::gSessionServerLog(v4);
    ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_82_cold_2(v75);
    uint64_t v76 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v76);
  }
  unsigned int v3 = *(_DWORD *)(a1 + 56);
  CFRetain(*(CFTypeRef *)(a1 + 40));
  unint64_t v78 = v2;
  int v4 = (as::server *)*(id *)(a1 + 32);
  int v6 = v4;
  if (!v3) {
    goto LABEL_107;
  }
  as::server::GetPickableRoutesFromMX(v2, v5);
  __int16 v77 = (as::server::PickableRoute *)objc_claimAutoreleasedReturnValue();
  unint64_t v7 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v91, v3);
  id v8 = v91;
  if (!v91) {
    goto LABEL_96;
  }
  long long v9 = v92;
  if (v92) {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v8 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v90, *((const std::string::value_type **)v8 + 25), *((void *)v8 + 26));
  }
  else {
    std::string v90 = *(std::string *)((char *)v8 + 200);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *(id *)as::server::gSessionServerLog(v7);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = SHIBYTE(v90.__r_.__value_.__r.__words[2]);
    std::string::size_type v12 = v90.__r_.__value_.__r.__words[0];
    LOBYTE(__p) = 0;
    uint64_t v80 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&__p, -1, 0x20u, 0, 0, &v101);
    unint64_t v13 = &v90;
    if (v11 < 0) {
      unint64_t v13 = (std::string *)v12;
    }
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v14 = &v101;
    }
    else {
      unint64_t v14 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)audit_token_t buf = 136316162;
    *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
    __int16 v94 = 1024;
    *(_DWORD *)unsigned int v95 = 213;
    *(_WORD *)&v95[4] = 2080;
    *(void *)&v95[6] = "end_interruption_callback";
    __int16 v96 = 2080;
    v97 = v13;
    __int16 v98 = 2080;
    v99[0] = v14;
    _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v80, __p);
  }

  CFStringRef v15 = [(as::server *)v6 objectForKey:*MEMORY[0x1E4F75C60]];
  __int16 v17 = (__CFString *)v15;
  if (v15)
  {
    CFRange v18 = CFStringFind(v15, @"non-resumable", 8uLL);
    if (v18.length)
    {
      if (!v18.location)
      {
        uint64_t v19 = 0;
        int v20 = 0;
LABEL_37:
        uint64_t v22 = 561148781;
        goto LABEL_38;
      }
    }
  }
  uint64_t v21 = v91;
  if (!v91)
  {
    uint64_t v70 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v70);
  }
  uint64_t v22 = 1769108333;
  long long v23 = v92;
  if (v92)
  {
    uint64_t v19 = 1;
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
    int v24 = *((unsigned __int8 *)v21 + 314);
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    if (!v24)
    {
      int v20 = 0;
      goto LABEL_38;
    }
    uint64_t v21 = v91;
    if (!v91)
    {
      uint64_t v74 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v74);
    }
    std::string::size_type v25 = v92;
    if (v92)
    {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
      char v26 = (id *)*((void *)v21 + 42);
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      if (!v26) {
        goto LABEL_34;
      }
LABEL_33:
      if ((as::server::InterruptionIsResumable(v26, v77, v16) & 1) == 0)
      {
        uint64_t v19 = 0;
        int v20 = 1;
        goto LABEL_37;
      }
      goto LABEL_34;
    }
  }
  else if (!*((unsigned char *)v91 + 314))
  {
    goto LABEL_34;
  }
  char v26 = (id *)*((void *)v21 + 42);
  if (v26) {
    goto LABEL_33;
  }
LABEL_34:
  int v20 = 0;
  uint64_t v19 = 1;
LABEL_38:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)buf, "resumable");
  *(void *)&v95[2] = buf;
  v95[10] = 1;
  BYTE2(v97) = 4;
  v99[0] = v19;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v97 + 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v97 + 2);
  v99[1] = (char *)&v97 + 2;
  char v100 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v101, (uint64_t)buf, 2, 1, 2);
  v101.__r_.__value_.__r.__words[2] = (std::string::size_type)&v101;
  char v102 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v88, (uint64_t)&v101, 1, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v101);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v101.__r_.__value_.__l.__size_, v101.__r_.__value_.__s.__data_[0]);
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v97 + i * 8 + 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v99[i], *((unsigned __int8 *)&v97 + i * 8 + 2));
  }
  if (v20)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[110],char [110],0>((uint64_t)v86, "transformed resumable interruption to non-resumable interruption due to unplug event during the interruption.");
    uint64_t v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v88, "side_effect");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
    unsigned __int8 v29 = *(unsigned char *)v28;
    *(unsigned char *)uint64_t v28 = v86[0];
    v86[0] = v29;
    id v30 = (uint64_t *)v28[1];
    v28[1] = (uint64_t)v87;
    uint64_t v87 = v30;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v87, v86[0]);
  }
  uint64_t v31 = (NSDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v32 = (void *)[objc_alloc(NSNumber) initWithUnsignedInt:0];
  [(NSDictionary *)v31 setObject:v32 forKey:*MEMORY[0x1E4F4EA50]];

  char v33 = (void *)[objc_alloc(NSNumber) initWithUnsignedInt:v22];
  [(NSDictionary *)v31 setObject:v33 forKey:*MEMORY[0x1E4F4EA58]];

  uint64_t v34 = [(as::server *)v6 objectForKey:*MEMORY[0x1E4F75C48]];
  uint64_t v35 = [(as::server *)v6 objectForKey:*MEMORY[0x1E4F75C40]];
  int v36 = v35;
  if (v34)
  {
    id v37 = v34;
    *(void *)audit_token_t buf = [v37 UTF8String];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v84, (char **)buf);
    int v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v88, "interrupted_by");
    std::string::size_type v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v38, "name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v84);
    unsigned __int8 v40 = *(unsigned char *)v39;
    *(unsigned char *)std::string::size_type v39 = v84[0];
    v84[0] = v40;
    uint64_t v41 = (uint64_t *)v39[1];
    v39[1] = (uint64_t)v85;
    uint64_t v85 = v41;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v84);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v85, v84[0]);
    int v42 = v91;
    if (!v91)
    {
      uint64_t v71 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v71);
    }
    uint64_t v35 = v92;
    if (v92)
    {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
      int v43 = *((unsigned __int8 *)v42 + 120);
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      if (!v43) {
        goto LABEL_49;
      }
    }
    else if (!*((unsigned char *)v91 + 120))
    {
      goto LABEL_49;
    }
    uint64_t v35 = (std::__shared_weak_count *)[(NSDictionary *)v31 setObject:v37 forKey:*MEMORY[0x1E4F4EA48]];
  }
LABEL_49:
  if (!v36) {
    goto LABEL_56;
  }
  int v44 = v36;
  *(void *)audit_token_t buf = [(std::__shared_weak_count *)v44 UTF8String];
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v82, (char **)buf);
  uint64_t v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v88, "interrupted_by");
  std::string v46 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v45, "bundleID");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v82);
  unsigned __int8 v47 = *(unsigned char *)v46;
  *(unsigned char *)std::string v46 = v82[0];
  v82[0] = v47;
  uint64_t v48 = (uint64_t *)v46[1];
  v46[1] = (uint64_t)v83;
  uint64_t v83 = v48;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v46);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v82);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v83, v82[0]);
  __int16 v49 = v91;
  if (!v91)
  {
    uint64_t v72 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v72);
  }
  uint64_t v35 = v92;
  if (!v92)
  {
    if (!*((unsigned char *)v91 + 120)) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  int v50 = *((unsigned __int8 *)v49 + 120);
  std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  if (v50) {
LABEL_55:
  }
    uint64_t v35 = (std::__shared_weak_count *)[(NSDictionary *)v31 setObject:v44 forKey:*MEMORY[0x1E4F4EA40]];
LABEL_56:
  __int16 v51 = *(id *)as::server::gSessionServerLog((as::server *)v35);
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v52 = v91;
    if (!v91)
    {
      uint64_t v73 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v73);
    }
    uint64_t v53 = v92;
    if (v92) {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((char *)v52 + 223) < 0) {
      std::string::__init_copy_ctor_external(&v101, *((const std::string::value_type **)v52 + 25), *((void *)v52 + 26));
    }
    else {
      std::string v101 = *(std::string *)((char *)v52 + 200);
    }
    int v54 = SHIBYTE(v101.__r_.__value_.__r.__words[2]);
    std::string::size_type v55 = v101.__r_.__value_.__r.__words[0];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v88, -1, 0x20u, 0, 0, &__p);
    uint64_t v56 = &v101;
    if (v54 < 0) {
      uint64_t v56 = (std::string *)v55;
    }
    if (v81 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)audit_token_t buf = 136316162;
    *(void *)&uint8_t buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
    __int16 v94 = 1024;
    *(_DWORD *)unsigned int v95 = 288;
    *(_WORD *)&v95[4] = 2080;
    *(void *)&v95[6] = "handle_end_interruption";
    __int16 v96 = 2080;
    v97 = v56;
    __int16 v98 = 2080;
    v99[0] = p_p;
    _os_log_impl(&dword_1CFE2A000, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v81 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
  }

  uint64_t v58 = v91;
  if (!v91)
  {
    uint64_t v66 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v66);
  }
  uint64_t v59 = v92;
  if (v92) {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  as::server::AudioSessionInfo::DeferPropertyChangeCallback(v58, (NSString *)*MEMORY[0x1E4F4EA30], v31, 0);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  id v60 = v91;
  if (!v91)
  {
    uint64_t v67 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v67);
  }
  id v61 = v92;
  if (!v92)
  {
    uint64_t v62 = 0;
    *((unsigned char *)v91 + 314) = 0;
LABEL_85:
    char v63 = 1;
    goto LABEL_86;
  }
  atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  *((unsigned char *)v60 + 314) = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  id v60 = v91;
  if (!v91)
  {
    uint64_t v68 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v68);
  }
  uint64_t v62 = v92;
  if (!v92) {
    goto LABEL_85;
  }
  char v63 = 0;
  atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_86:
  *(void *)audit_token_t buf = 0;
  as::server::AudioSessionInfo::SetPickedRouteAtTimeOfInterruption((uint64_t)v60, (id **)buf);
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)buf, 0);
  if ((v63 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  uint64_t v64 = v91;
  if (!v91)
  {
    uint64_t v69 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v69);
  }
  uint64_t v65 = v92;
  if (v92) {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  as::server::AudioSessionInfo::SetInterrupted(v64, 0, 0);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v88);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v89, v88[0]);

  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  id v2 = v78;
LABEL_96:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v91);

  CFRelease(v2);
}

void sub_1CFE6F2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, const void *a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t *a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,os_unfair_lock_s *a31,uint64_t a32,uint64_t a33,char a34)
{
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a23);
  if (a30 < 0) {
    operator delete(__p);
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a31);

  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a11);
  _Unwind_Resume(a1);
}

id **std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100](id **result, id *a2)
{
  id v2 = *result;
  void *result = a2;
  if (v2)
  {

    JUMPOUT(0x1D25E1860);
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(char *a1)
{
  id v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE6F5AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[110],char [110],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[110]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[110]>(char *a1)
{
  id v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE6F644(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>(char *a1)
{
  id v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE6F6DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_129HandleRouteChangeNotificationEjP8NSStringP19NSMutableDictionary_block_invoke(uint64_t a1)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v2 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v66, *(_DWORD *)(a1 + 48));
  unsigned int v3 = v66;
  if (v66 && *(void *)(a1 + 32))
  {
    int v4 = v67;
    if (v67) {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((char *)v3 + 223) < 0) {
      std::string::__init_copy_ctor_external(&v65, *((const std::string::value_type **)v3 + 25), *((void *)v3 + 26));
    }
    else {
      std::string v65 = *(std::string *)((char *)v3 + 200);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)buf, "key");
    *(void *)&void v72[2] = buf;
    v72[10] = 1;
    __p[0] = (void *)[*(id *)(a1 + 40) UTF8String];
    uint64_t v77 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&v74 + 2, (char **)__p);
    char v78 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v79, (uint64_t)buf, 2, 1, 2);
    v79.__r_.__value_.__r.__words[2] = (std::string::size_type)&v79;
    char v80 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v63, (uint64_t)&v79, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v79);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v79.__r_.__value_.__l.__size_, v79.__r_.__value_.__s.__data_[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v74 + i + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v76 + i), *((unsigned __int8 *)&v74 + i + 2));
    }
    id v8 = *(id *)as::server::gSessionServerLog(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
      std::string::size_type v10 = v65.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v63, -1, 0x20u, 0, 0, &v79);
      int v11 = &v65;
      if (v9 < 0) {
        int v11 = (std::string *)v10;
      }
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v12 = &v79;
      }
      else {
        std::string::size_type v12 = (std::string *)v79.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)audit_token_t buf = 136316162;
      uint64_t v70 = "AudioSessionServerImpNotificationHandlers.mm";
      __int16 v71 = 1024;
      *(_DWORD *)uint64_t v72 = 387;
      *(_WORD *)&void v72[4] = 2080;
      *(void *)&v72[6] = "property_change";
      __int16 v73 = 2080;
      uint64_t v74 = v11;
      __int16 v75 = 2080;
      uint64_t v76 = v12;
      _os_log_impl(&dword_1CFE2A000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
    }

    unint64_t v13 = v66;
    if (!v66)
    {
      uint64_t v48 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v48);
    }
    unint64_t v14 = v67;
    if (v67)
    {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v13, &cf);
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    else
    {
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v66, &cf);
    }
    if (v66)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v66 + 158);
      char v68 = 0;
    }
    id v16 = as::server::forbid_acq::CopyCMSessionAudioMode((as::server::forbid_acq *)cf, v15);
    __int16 v17 = v66;
    if (!v66)
    {
      uint64_t v49 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v49);
    }
    CFRange v18 = v67;
    if (v67)
    {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
      id v19 = *((id *)v17 + 12);
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    else
    {
      id v19 = *((id *)v66 + 12);
    }
    as::server::GetSpatialPreferences(v19, *(unsigned int *)(a1 + 48), v16, (uint64_t)&v60);
    if (!v66 || (os_unfair_lock_lock((os_unfair_lock_t)v66 + 158), char v68 = 1, (v20 = v66) == 0))
    {
      uint64_t v55 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v55);
    }
    uint64_t v21 = v67;
    if (v67)
    {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
      int v22 = v61;
      *((unsigned char *)v20 + 432) = v61;
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      int v20 = v66;
      if (!v66)
      {
        uint64_t v23 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v23);
      }
    }
    else
    {
      int v22 = v61;
      *((unsigned char *)v66 + 432) = v61;
    }
    int v24 = v67;
    if (v67) {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::AudioSessionInfo::SetSpatialPreferences((uint64_t)v20, v60);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    std::string::size_type v25 = *(void **)(a1 + 32);
    char v26 = (void *)[objc_alloc(NSNumber) initWithBool:v22 != 0];
    [v25 setObject:v26 forKey:*MEMORY[0x1E4F4EA70]];

    __int16 v27 = v66;
    if (!v66)
    {
      uint64_t v50 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v50);
    }
    uint64_t v28 = v67;
    if (v67) {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int IsInterrupted = as::server::AudioSessionInfo::IsInterrupted(v27);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    id v30 = (void *)MEMORY[0x1E4F74FA8];
    if (IsInterrupted)
    {
      uint64_t v31 = [*(id *)(a1 + 32) objectForKey:*MEMORY[0x1E4F74FA8]];
      if ([v31 intValue] == 2)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)buf, "side_effect");
        *(void *)&void v72[2] = buf;
        v72[10] = 1;
        uint64_t v77 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[86],char [86],0>((uint64_t)&v74 + 2, "Recording that the route changed due to port disconnect while session was interrupted");
        char v78 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v79, (uint64_t)buf, 2, 1, 2);
        v79.__r_.__value_.__r.__words[2] = (std::string::size_type)&v79;
        char v80 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v58, (uint64_t)&v79, 1, 1, 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v79);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v79.__r_.__value_.__l.__size_, v79.__r_.__value_.__s.__data_[0]);
        for (uint64_t j = 0; j != -64; j -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v74 + j + 2);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v76 + j), *((unsigned __int8 *)&v74 + j + 2));
        }
        uint64_t v34 = *(id *)as::server::gSessionServerLog(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = v66;
          if (!v66)
          {
            uint64_t v54 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v54);
          }
          int v36 = v67;
          if (v67) {
            atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (*((char *)v35 + 223) < 0) {
            std::string::__init_copy_ctor_external(&v79, *((const std::string::value_type **)v35 + 25), *((void *)v35 + 26));
          }
          else {
            std::string v79 = *(std::string *)((char *)v35 + 200);
          }
          int v37 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
          std::string::size_type v38 = v79.__r_.__value_.__r.__words[0];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v58, -1, 0x20u, 0, 0, __p);
          std::string::size_type v39 = &v79;
          if (v37 < 0) {
            std::string::size_type v39 = (std::string *)v38;
          }
          if (v57 >= 0) {
            unsigned __int8 v40 = __p;
          }
          else {
            unsigned __int8 v40 = (void **)__p[0];
          }
          *(_DWORD *)audit_token_t buf = 136316162;
          uint64_t v70 = "AudioSessionServerImpNotificationHandlers.mm";
          __int16 v71 = 1024;
          *(_DWORD *)uint64_t v72 = 425;
          *(_WORD *)&void v72[4] = 2080;
          *(void *)&v72[6] = "handle_route_change";
          __int16 v73 = 2080;
          uint64_t v74 = v39;
          __int16 v75 = 2080;
          uint64_t v76 = (std::string *)v40;
          _os_log_impl(&dword_1CFE2A000, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
          if (v57 < 0) {
            operator delete(__p[0]);
          }
          id v30 = (void *)MEMORY[0x1E4F74FA8];
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
          if (v36) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v36);
          }
        }

        uint64_t v41 = v66;
        if (!v66)
        {
          uint64_t v53 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v53);
        }
        int v42 = v67;
        if (v67)
        {
          atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
          *((unsigned char *)v41 + 314) = 1;
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        }
        else
        {
          *((unsigned char *)v66 + 314) = 1;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v58);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v59, v58[0]);
      }
    }
    int v43 = v66;
    if (!v66)
    {
      uint64_t v51 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v51);
    }
    int v44 = v67;
    if (v67)
    {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
      int v45 = *((unsigned __int8 *)v43 + 315);
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      if (!v45) {
        goto LABEL_81;
      }
    }
    else if (!*((unsigned char *)v66 + 315))
    {
LABEL_81:
      std::string v46 = v66;
      if (!v66)
      {
        uint64_t v52 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v52);
      }
      unsigned __int8 v47 = v67;
      if (v67) {
        atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      as::server::AudioSessionInfo::DeferPropertyChangeCallback(v46, *(NSString **)(a1 + 40), *(NSDictionary **)(a1 + 32), 1);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }

      if (cf) {
        CFRelease(cf);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v64, v63[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      goto LABEL_90;
    }
    [*(id *)(a1 + 32) setObject:&unk_1F268A7B8 forKey:*v30];
    goto LABEL_81;
  }
  unsigned int v5 = *(id *)as::server::gSessionServerLog(v2);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)audit_token_t buf = 136315394;
    uint64_t v70 = "AudioSessionServerImpNotificationHandlers.mm";
    __int16 v71 = 1024;
    *(_DWORD *)uint64_t v72 = 378;
    _os_log_impl(&dword_1CFE2A000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid session pointer or payload", buf, 0x12u);
  }
LABEL_90:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v66);
}

void sub_1CFE6FF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, void *a14, uint64_t a15, const void *a16, uint64_t *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,os_unfair_lock_s *a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a12);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a16);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a17);
  if (a24 < 0) {
    operator delete(__p);
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a25);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[86],char [86],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[86]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[86]>(char *a1)
{
  id v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE701E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_1CFE702C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE70350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id as::server::AudioApplicationInfo::GetAudioAppCallbackQueue(as::server::AudioApplicationInfo *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.coreaudio.AudioAppCallbackQueue");
    as::CreateFixedPriorityDispatchQueue((const void **)__p, QOS_CLASS_USER_INTERACTIVE, &as::server::AudioApplicationInfo::GetAudioAppCallbackQueue(void)::callbackQueue);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v1 = applesauce::dispatch::v1::queue::operator*(&as::server::AudioApplicationInfo::GetAudioAppCallbackQueue(void)::callbackQueue);
  return v1;
}

void sub_1CFE7040C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::GetProperty(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = a2;
  id v8 = v7;
  if (a3 == 1634744890)
  {
    if (![(NSString *)v7 isEqualToString:@"InputMute"])
    {
      int v9 = (os_unfair_lock_s *)(a1 + 16);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
      as::server::AudioAppInfoImpl::GetPropertyAudioApp((id *)(a1 + 24), v8, a4);
      goto LABEL_10;
    }
    unint64_t v10 = as::server::AudioApplicationInfo::PrivateInputMuted((os_unfair_lock_s *)a1);
    uint64_t v11 = [NSNumber numberWithBool:(v10 & 0xFF00000000) != 0];
    *(_DWORD *)a4 = v10;
    *(void *)(a4 + 8) = v11;
  }
  else
  {
    if (a3 == 1836595770)
    {
      int v9 = (os_unfair_lock_s *)(a1 + 16);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
      as::server::AudioAppInfoImpl::GetPropertyMX((id *)(a1 + 24), v8, a4);
LABEL_10:
      os_unfair_lock_unlock(v9);
      goto LABEL_11;
    }
    std::string::size_type v12 = *(id *)as::server::gSessionServerLog((as::server *)v7);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315650;
      unint64_t v14 = "AudioApplicationInfo.mm";
      __int16 v15 = 1024;
      int v16 = 91;
      __int16 v17 = 1024;
      int v18 = a3;
      _os_log_impl(&dword_1CFE2A000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d error property domain not recognized: %d", (uint8_t *)&v13, 0x18u);
    }
    *(_DWORD *)a4 = -50;
    *(void *)(a4 + 8) = 0;
  }
LABEL_11:
}

void sub_1CFE705DC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

unint64_t as::server::AudioApplicationInfo::PrivateInputMuted(os_unfair_lock_s *this)
{
  uint64_t v1 = this;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v13 = 0;
  {
    if (this)
    {
      as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
    }
  }
  if (as::AudioSessionMuteEnabled(void)::enabled)
  {
    as::server::AudioApplicationInfo::GetSessions(v1, (uint64_t *)buf);
    uint64_t v2 = *(void *)buf;
    uint64_t v3 = *(void *)&buf[8];
    *(void *)&long long v14 = buf;
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    char v4 = v1 + 4;
    unsigned int v5 = (id *)&v1[6];
    os_unfair_lock_lock(v4);
    if (v2 == v3)
    {
      as::server::AudioAppInfoImpl::GetPropertyAudioApp(v5, &cfstr_Inputmute.isa, (uint64_t)buf);
      unsigned int v7 = *(_DWORD *)buf;
      uint64_t v6 = *(void *)&buf[8] != 0;

      os_unfair_lock_unlock(v4);
    }
    else
    {
      uint64_t v6 = as::server::AudioAppInfoImpl::AllSessionForAppMuted((as::server::AudioAppInfoImpl *)v5);
      os_unfair_lock_unlock(v4);
      unsigned int v7 = 0;
    }
  }
  else
  {
    id v8 = *(id *)as::server::forbid_acq::SystemController::Instance((as::server::forbid_acq::SystemController *)this);
    if (v8)
    {
      caulk::synchronized<as::server::AudioAppInfoImpl,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::AudioAppInfoImpl>>::get(v1 + 4, (as::server::AudioAppInfoImpl *)buf);
      long long v14 = *(_OWORD *)&buf[16];
      long long v15 = v17;
      int v9 = v18;
      as::server::AudioAppInfoImpl::~AudioAppInfoImpl((id *)buf);
      if (!v9) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      v12[0] = v14;
      v12[1] = v15;
      unsigned int v7 = [v8 getInputMute:v12 outMuteValue:&v13];

      uint64_t v6 = v13;
    }
    else
    {
      unint64_t v10 = *(id *)as::server::gSessionServerLog(0);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)audit_token_t buf = 136315394;
        *(void *)&uint8_t buf[4] = "AudioApplicationInfo.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 358;
        _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error - invalid MXSystemController", buf, 0x12u);
      }
      uint64_t v6 = 0;
      unsigned int v7 = -50;
    }
  }
  return v7 | (unint64_t)(v6 << 32);
}

void sub_1CFE7083C(_Unwind_Exception *a1)
{
}

uint64_t as::server::AudioApplicationInfo::GetBoolPropertyDefaultToFalse(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  as::server::AudioApplicationInfo::GetProperty(a1, v5, a3, (uint64_t)v8);
  uint64_t BoolDefaultToFalse = as::server::AudioAppInfoImpl::ExtractBoolDefaultToFalse((uint64_t)v8, v5, a3);

  return BoolDefaultToFalse;
}

void sub_1CFE708F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioApplicationInfo::SetProperty(os_unfair_lock_s *a1, void *a2, void *a3)
{
  return as::server::AudioApplicationInfo::SetProperty(a1, a2, a3, 0);
}

uint64_t as::server::AudioApplicationInfo::SetProperty(os_unfair_lock_s *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  int v9 = a4;
  if ([v7 isEqualToString:@"InputMute"])
  {
    id v10 = v8;
    uint64_t v11 = v10;
    if (v10) {
      uint64_t v12 = as::server::AudioApplicationInfo::SetInputMuted(a1, [v10 BOOLValue], v9);
    }
    else {
      uint64_t v12 = 4294967246;
    }
  }
  else
  {
    unsigned __int8 v13 = a1 + 4;
    os_unfair_lock_lock(a1 + 4);
    uint64_t v12 = as::server::AudioAppInfoImpl::SetProperty((uint64_t)&a1[6], v7, v8);
    os_unfair_lock_unlock(v13);
  }

  return v12;
}

void sub_1CFE709FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v4);

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioApplicationInfo::SetInputMuted(os_unfair_lock_s *this, uint64_t a2, NSDictionary *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = v5;
  {
    if (v5)
    {
      as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
    }
  }
  if (as::AudioSessionMuteEnabled(void)::enabled)
  {
    os_unfair_lock_lock(this + 4);
    id v7 = [NSNumber numberWithBool:a2];
    as::server::AudioAppInfoImpl::SetProperty((uint64_t)&this[6], @"InputMute", v7);

    os_unfair_lock_unlock(this + 4);
    *(void *)audit_token_t buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    *(_DWORD *)&buf[24] = 0;
    int v9 = as::server::GetAudioControlQueue(v8);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = ___ZN2as6server20AudioApplicationInfo13SetInputMutedEbP12NSDictionary_block_invoke;
    v18[3] = &unk_1E6875B68;
    v18[4] = buf;
    v18[5] = this;
    char v19 = a2;
    as::server::DispatchBlock(v9, v18, 1, (uint64_t)"SetInputMuted", (uint64_t)"AudioApplicationInfo.mm", 388, 0, 0);

    uint64_t v10 = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
  }
  else
  {
    id v11 = *(id *)as::server::forbid_acq::SystemController::Instance((as::server::forbid_acq::SystemController *)v5);
    if (v11)
    {
      caulk::synchronized<as::server::AudioAppInfoImpl,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::AudioAppInfoImpl>>::get(this + 4, (as::server::AudioAppInfoImpl *)buf);
      long long v20 = *(_OWORD *)&buf[16];
      long long v21 = v23;
      int v12 = v24;
      int v13 = v25;
      as::server::AudioAppInfoImpl::~AudioAppInfoImpl((id *)buf);
      if (!v12) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      v17[0] = v20;
      v17[1] = v21;
      long long v14 = (as::server *)[v11 setInputMute:v17 muteValue:a2];
      uint64_t v10 = (uint64_t)v14;
      if (v14)
      {
        long long v15 = *(id *)as::server::gSessionServerLog(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)audit_token_t buf = 136315906;
          *(void *)&uint8_t buf[4] = "AudioApplicationInfo.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 405;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v13;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v10;
          _os_log_impl(&dword_1CFE2A000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - failed to set inputMuted, pid: %d, err: %d", buf, 0x1Eu);
        }
      }
    }
    else
    {
      uint64_t v10 = 4294967246;
    }
  }
  return v10;
}

void sub_1CFE70CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioApplicationInfo::UpdateProperty(uint64_t a1, void *a2, void *a3, int a4, int a5, void *a6)
{
  uint64_t v10 = (os_unfair_lock_s *)(a1 + 16);
  id v11 = (id *)(a1 + 24);
  id v12 = a6;
  id v13 = a3;
  id v14 = a2;
  os_unfair_lock_lock(v10);
  uint64_t updated = as::server::AudioAppInfoImpl::UpdateProperty(v11, v14, v13, a4, a5, v12);

  os_unfair_lock_unlock(v10);
  return updated;
}

void sub_1CFE70E04(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::HandleSessionInputMuteChange(os_unfair_lock_s *this, unsigned int a2, uint64_t a3)
{
  id v5 = this + 4;
  uint64_t v6 = (as::server::AudioAppInfoImpl *)&this[6];
  os_unfair_lock_lock(this + 4);
  as::server::AudioAppInfoImpl::HandleSessionInputMuteChange(v6, a2, a3);
  os_unfair_lock_unlock(v5);
}

void sub_1CFE70E84(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL as::server::AudioApplicationInfo::RemoveSession(os_unfair_lock_s *a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 4;
  char v4 = (uint64_t *)&a1[6];
  os_unfair_lock_lock(a1 + 4);
  id v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  int v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v6 = as::server::AudioAppInfoImpl::RemoveSession(v4, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  os_unfair_lock_unlock(v3);
  return v6;
}

void sub_1CFE70F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::FindAudioAppClient(os_unfair_lock_s *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  id v5 = this + 4;
  BOOL v6 = (as::server::AudioAppInfoImpl *)&this[6];
  os_unfair_lock_lock(this + 4);
  as::server::AudioAppInfoImpl::FindAudioAppClient(v6, a2, a3);
  os_unfair_lock_unlock(v5);
}

void sub_1CFE70F98(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::GetPrimaryClient(os_unfair_lock_s *this@<X0>, void *a2@<X8>)
{
  char v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  uint64_t v5 = *(void *)&this[42]._os_unfair_lock_opaque;
  *a2 = *(void *)&this[40]._os_unfair_lock_opaque;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
}

BOOL as::server::AudioApplicationInfo::SetPrimaryClient(os_unfair_lock_s *a1, uint64_t a2, void *a3)
{
  char v4 = a1 + 4;
  uint64_t v5 = (uint64_t)&a1[6];
  id v6 = a3;
  os_unfair_lock_lock(v4);
  BOOL v7 = as::server::AudioAppInfoImpl::SetPrimaryClient(v5, a2, v6);

  os_unfair_lock_unlock(v4);
  return v7;
}

void sub_1CFE71074(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::AddProxyAudioApp(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v6 = a1 + 4;
  uint64_t v7 = (uint64_t)&a1[6];
  id v8 = a3;
  os_unfair_lock_lock(v6);
  as::server::AudioAppInfoImpl::AddProxyAudioApp(v7, a2, v8, a4);

  os_unfair_lock_unlock(v6);
}

void sub_1CFE71104(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::AddDelegateAudioApp(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v6 = a1 + 4;
  uint64_t v7 = (uint64_t)&a1[6];
  id v8 = a3;
  os_unfair_lock_lock(v6);
  as::server::AudioAppInfoImpl::AddDelegateAudioApp(v7, a2, v8, a4);

  os_unfair_lock_unlock(v6);
}

void sub_1CFE71194(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::GetSessions(os_unfair_lock_s *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = this + 4;
  char v4 = (as::server::AudioAppInfoImpl *)&this[6];
  os_unfair_lock_lock(this + 4);
  as::server::AudioAppInfoImpl::GetSessions(v4, a2);
  os_unfair_lock_unlock(v3);
}

void sub_1CFE71204(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL as::server::AudioApplicationInfo::HandleXPCConnectionInvalidated(as::server::AudioApplicationInfo *this, NSXPCConnection *a2)
{
  uint64_t v2 = (os_unfair_lock_s *)((char *)this + 16);
  uint64_t v3 = (as::server::AudioApplicationInfo *)((char *)this + 24);
  char v4 = a2;
  os_unfair_lock_lock(v2);
  BOOL v5 = as::server::AudioAppInfoImpl::HandleXPCConnectionInvalidated(v3, v4);

  os_unfair_lock_unlock(v2);
  return v5;
}

void sub_1CFE71274(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL as::server::AudioApplicationInfo::HasStrongClientOwner(os_unfair_lock_s *this)
{
  uint64_t v1 = this + 4;
  uint64_t v2 = (as::server::AudioAppInfoImpl *)&this[6];
  os_unfair_lock_lock(this + 4);
  BOOL HasStrongClientOwner = as::server::AudioAppInfoImpl::HasStrongClientOwner(v2);
  os_unfair_lock_unlock(v1);
  return HasStrongClientOwner;
}

void sub_1CFE712D0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void caulk::synchronized<as::server::AudioAppInfoImpl,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::AudioAppInfoImpl>>::get(os_unfair_lock_s *a1@<X0>, as::server::AudioAppInfoImpl *a2@<X8>)
{
  os_unfair_lock_lock(a1);
  as::server::AudioAppInfoImpl::AudioAppInfoImpl(a2, (const as::server::AudioAppInfoImpl *)&a1[2]);
  os_unfair_lock_unlock(a1);
}

void sub_1CFE7132C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2as6server20AudioApplicationInfo13SetInputMutedEbP12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 16));
  long long v3 = *(_OWORD *)(v2 + 56);
  *(_OWORD *)v19.val = *(_OWORD *)(v2 + 40);
  *(_OWORD *)&v19.val[4] = v3;
  int v20 = *(_DWORD *)(v2 + 72);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 16));
  if (!(_BYTE)v20) {
    goto LABEL_21;
  }
  int v5 = *(unsigned __int8 *)(a1 + 48);
  as::server::AudioApplicationInfo::GetSessions((os_unfair_lock_s *)v2, (uint64_t *)&v15);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  id v6 = v15;
  uint64_t v7 = v16;
  v21[0] = __p;
  for (v21[1] = 0; v6 != v7; v6 += 2)
  {
    if (*v6)
    {
      uint64_t v22 = *v6;
      id v8 = (std::__shared_weak_count *)v6[1];
      long long v23 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor(buf, &v22);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      uint64_t v9 = *(void *)buf;
      if (!*(void *)buf)
      {
        uint64_t v14 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v14);
      }
      uint64_t v10 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
        int v11 = *(_DWORD *)(v9 + 8);
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      else
      {
        int v11 = *(_DWORD *)(*(void *)buf + 8);
      }
      as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)buf);
    }
    else
    {
      int v11 = 0;
    }
    LODWORD(v22) = v11;
    std::insert_iterator<boost::container::flat_set<unsigned int,std::less<unsigned int>,void>>::operator=[abi:ne180100]((uint64_t)v21, (unsigned int *)&v22);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = as::server::require_acq::MuteAudioSessions(v5 != 0, (unsigned int **)__p, &v19);
  if (v18) {
    operator delete(__p[0]);
  }
  *(void *)audit_token_t buf = &v15;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v12 = *(id *)as::server::gSessionServerLog((as::server *)v4);
    BOOL v4 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      *(_DWORD *)audit_token_t buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioApplicationInfo.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 384;
      _os_log_impl(&dword_1CFE2A000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to update mute state for audio sessions", buf, 0x12u);
    }
  }
  if (!(_BYTE)v20)
  {
LABEL_21:
    id v13 = *(id *)as::server::gSessionServerLog((as::server *)v4);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)audit_token_t buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioApplicationInfo.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 387;
      _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get audit token for source process identity", buf, 0x12u);
    }
  }
}

void sub_1CFE715DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14) {
    operator delete(__p);
  }
  *(void *)(v24 - 96) = &a9;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 96));
  _Unwind_Resume(a1);
}

void ___ZN2as6serverL24PrivateApplyMXPropertiesENSt3__110shared_ptrINS0_16AudioSessionInfoEEEP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    long long v21 = std::__shared_weak_count::lock(v2);
    if (v21)
    {
      uint64_t v3 = *(void *)(v1 + 40);
      if (v3)
      {
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        obuint64_t j = *(id *)(v1 + 32);
        uint64_t v4 = [obj countByEnumeratingWithState:&v27 objects:v38 count:16];
        if (v4)
        {
          uint64_t v5 = *(void *)v28;
          char v23 = 1;
          uint64_t v6 = v1;
          do
          {
            for (uint64_t i = 0; i != v4; ++i)
            {
              if (*(void *)v28 != v5) {
                objc_enumerationMutation(obj);
              }
              id v8 = *(void **)(*((void *)&v27 + 1) + 8 * i);
              uint64_t v9 = [*(id *)(v1 + 32) valueForKey:v8];
              unsigned int v10 = *(_DWORD *)(v3 + 8);
              if (*(char *)(v3 + 223) < 0) {
                std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v3 + 200), *(void *)(v3 + 208));
              }
              else {
                std::string v26 = *(std::string *)(v3 + 200);
              }
              as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef((CFTypeRef)v3, cf);
              uint64_t v11 = *(void *)cf;
              if (*(void *)cf) {
                CFRelease(*(CFTypeRef *)cf);
              }
              id v12 = *(std::__shared_weak_count **)(v3 + 232);
              uint64_t v24 = *(void *)(v3 + 224);
              uint64_t v25 = v12;
              if (v12) {
                atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v13 = as::server::require_acq::PrivateSetPropertyMX(v10, (uint64_t)&v26, v11, v8, v9, (uint64_t)&v24);
              uint64_t v14 = (as::server *)v25;
              if (v25) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v25);
              }
              if (v13)
              {
                long long v15 = *(id *)as::server::gSessionServerLog(v14);
                if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CFTypeRef cf = 136315650;
                  *(void *)&cf[4] = "AudioApplicationInfo.mm";
                  __int16 v32 = 1024;
                  int v33 = 164;
                  __int16 v34 = 2112;
                  uint64_t v35 = v8;
                  _os_log_impl(&dword_1CFE2A000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set property: %@", cf, 0x1Cu);
                }
                char v23 = 0;
              }
              if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v26.__r_.__value_.__l.__data_);
              }

              uint64_t v1 = v6;
            }
            uint64_t v4 = [obj countByEnumeratingWithState:&v27 objects:v38 count:16];
          }
          while (v4);

          if ((v23 & 1) == 0)
          {
            long long v17 = *(id *)as::server::gSessionServerLog(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              uint64_t v18 = *(void *)(v6 + 56);
              audit_token_t v19 = (void *)(v18 + 176);
              if (*(char *)(v18 + 199) < 0) {
                audit_token_t v19 = (void *)*v19;
              }
              int v20 = (void *)(v6 + 72);
              if (*(char *)(v6 + 95) < 0) {
                int v20 = (void *)*v20;
              }
              *(_DWORD *)CFTypeRef cf = 136315906;
              *(void *)&cf[4] = "AudioApplicationInfo.mm";
              __int16 v32 = 1024;
              int v33 = 171;
              __int16 v34 = 2080;
              uint64_t v35 = v19;
              __int16 v36 = 2080;
              int v37 = v20;
              _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - failed to apply MX properties to newly-created session (%s) (app:%s)", cf, 0x26u);
            }
          }
        }
        else
        {
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
}

void sub_1CFE71964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void __copy_helper_block_ea8_40c53_ZTSNSt3__18weak_ptrIN2as6server16AudioSessionInfoEEE56c56_ZTSNSt3__110shared_ptrIN2as6server16AudioSessionInfoEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3 = *(void *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v4 = *(void *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(void *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1CFE71A64(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::string::size_type v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c53_ZTSNSt3__18weak_ptrIN2as6server16AudioSessionInfoEEE56c56_ZTSNSt3__110shared_ptrIN2as6server16AudioSessionInfoEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN2as6serverL25PrivateApplyAppPropertiesENSt3__110shared_ptrINS0_16AudioSessionInfoEEEP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      std::string::size_type v4 = v3;
      uint64_t v22 = *(void *)(a1 + 40);
      if (v22)
      {
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        obuint64_t j = *(id *)(a1 + 32);
        uint64_t v5 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
        if (v5)
        {
          uint64_t v6 = *(void *)v25;
          char v21 = 1;
          do
          {
            uint64_t v7 = 0;
            do
            {
              if (*(void *)v25 != v6) {
                objc_enumerationMutation(obj);
              }
              id v8 = *(void **)(*((void *)&v24 + 1) + 8 * v7);
              {
                as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
              }
              if (as::AudioSessionMuteEnabled(void)::enabled)
              {
                if ([v8 isEqualToString:@"InputMute"])
                {
                  uint64_t v9 = [*(id *)(a1 + 32) valueForKey:v8];
                  BOOL v10 = v9 == 0;

                  if (!v10)
                  {
                    uint64_t v11 = (as::server::require_acq *)*(unsigned int *)(v22 + 8);
                    long long v12 = *(_OWORD *)(v22 + 68);
                    *(_OWORD *)audit_token_t buf = *(_OWORD *)(v22 + 52);
                    *(_OWORD *)&buf[16] = v12;
                    *(_DWORD *)&unsigned char buf[32] = *(_DWORD *)(v22 + 84);
                    uint64_t v14 = [*(id *)(a1 + 32) objectForKey:v8];
                    if (buf[32]) {
                      as::server::require_acq::MuteSessionInput(v11, (const audit_token_t *)buf, v14, v13);
                    }
                    else {
                      char v21 = 0;
                    }
                  }
                }
              }
              ++v7;
            }
            while (v5 != v7);
            uint64_t v15 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
            uint64_t v5 = v15;
          }
          while (v15);

          if ((v21 & 1) == 0)
          {
            long long v17 = *(id *)as::server::gSessionServerLog(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              uint64_t v18 = *(void *)(a1 + 56);
              audit_token_t v19 = (void *)(v18 + 176);
              if (*(char *)(v18 + 199) < 0) {
                audit_token_t v19 = (void *)*v19;
              }
              int v20 = (void *)(a1 + 72);
              if (*(char *)(a1 + 95) < 0) {
                int v20 = (void *)*v20;
              }
              *(_DWORD *)audit_token_t buf = 136315906;
              *(void *)&uint8_t buf[4] = "AudioApplicationInfo.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 208;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v19;
              *(_WORD *)&unsigned char buf[28] = 2080;
              *(void *)&buf[30] = v20;
              _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - failed to apply App properties to newly-created session (%s) (app:%s)", buf, 0x26u);
            }
          }
        }
        else
        {
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1CFE71DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

void as::server::AudioAppInfoImpl::~AudioAppInfoImpl(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[18];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy((uint64_t)(this + 14), this[15]);
  std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy((uint64_t)(this + 11), this[12]);
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
}

void std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy(a1, a2[1]);
    std::string::size_type v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy(a1, a2[1]);
    std::string::size_type v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(a2);
  }
}

uint64_t std::insert_iterator<boost::container::flat_set<unsigned int,std::less<unsigned int>,void>>::operator=[abi:ne180100](uint64_t a1, unsigned int *a2)
{
  std::string::size_type v3 = *(uint64_t **)a1;
  uint64_t v7 = *(unsigned int **)(a1 + 8);
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique(v3, &v7, a2, &v6);
  std::string::size_type v4 = v6;
  *(void *)(a1 + 8) = v6;
  if (!v4) {
    __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
  }
  *(void *)(a1 + 8) = v4 + 4;
  return a1;
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique(uint64_t *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, char **a4@<X8>)
{
  uint64_t v5 = *a1;
  if (*a1 > (unint64_t)*a2) {
    goto LABEL_14;
  }
  uint64_t v7 = a1[1];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + 4 * v7) {
LABEL_14:
  }
    boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique();
  BOOL v10 = *a2;
  uint64_t v11 = 0;
  if (boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare((unsigned int **)a1, &v10, a3, (unsigned int **)&v11))
  {
    long long v12 = v11;
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int>(a1, &v12, a3, a4);
  }
  else
  {
    if (!*a1)
    {
      if (v11) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
    }
    *a4 = v11;
  }
}

BOOL boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare(unsigned int **a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  std::string::size_type v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v9 = &v4[(void)v5];
  BOOL v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      uint64_t v18 = v9;
      audit_token_t v19 = v10;
      int v16 = (uint64_t *)&v19;
      long long v17 = &v18;
      return boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare((uint64_t)a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  uint64_t v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  unsigned int v14 = *(v11 - 1);
  long long v12 = v11 - 1;
  unsigned int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    char v21 = v4;
    int v20 = v12;
    int v16 = (uint64_t *)&v21;
    long long v17 = &v20;
    return boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare((uint64_t)a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int>(uint64_t *a1@<X0>, char **a2@<X1>, _DWORD *a3@<X2>, char **a4@<X8>)
{
  std::string::size_type v4 = *a2;
  uint64_t v5 = *a1;
  if (*a1 > (unint64_t)*a2) {
    goto LABEL_16;
  }
  unint64_t v7 = a1[1];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v9 = (char *)(v5 + 4 * v7);
  if (v4 > v9) {
LABEL_16:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique();
  unint64_t v10 = a1[2];
  if (v10 < v7) {
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>();
  }
  if (v10 == v7)
  {
    unsigned int v14 = *a2;
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>(a1, v14, (const char *)1, a3, a4);
  }
  else
  {
    if (v9 == v4)
    {
      *(_DWORD *)std::string::size_type v4 = *a3;
      a1[1] = v7 + 1;
    }
    else
    {
      *(_DWORD *)uint64_t v9 = *((_DWORD *)v9 - 1);
      a1[1] = v7 + 1;
      long long v12 = v4;
      if (v9 - 4 != v4)
      {
        memmove(v4 + 4, v4, v9 - 4 - v4);
        long long v12 = *a2;
      }
      *(_DWORD *)std::string::size_type v4 = *a3;
      std::string::size_type v4 = v12;
    }
    *a4 = v4;
  }
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>(uint64_t *a1@<X0>, char *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 61) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  unsigned int v14 = (char *)operator new(4 * v11);
  boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>((uint64_t)a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = &a2[*a1 - v10];
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>(uint64_t a1, char *__dst, uint64_t a3, char *__src, uint64_t a5, _DWORD *a6)
{
  uint64_t v10 = *(char **)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>(a1, *(char **)a1, __src, (char *)(*(void *)a1 + 4 * *(void *)(a1 + 8)), __dst, a5, a6);
  if (v10) {
    operator delete(*(void **)a1);
  }
  uint64_t v11 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = __dst;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = a3;
}

void sub_1CFE72458(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>(int a1, char *a2, char *__src, char *a4, char *__dst, uint64_t a6, _DWORD *a7)
{
  uint64_t v9 = __dst;
  if (a2 && a2 != __src && __dst)
  {
    long long v12 = (char *)(__src - a2);
    memmove(__dst, a2, __src - a2);
    uint64_t v9 = &v12[(void)v9];
  }
  if (a6 != 1) {
    boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>();
  }
  *(_DWORD *)uint64_t v9 = *a7;
  if (__src && __src != a4)
  {
    memmove(v9 + 4, __src, a4 - __src);
  }
}

as::server::AudioAppInfoImpl *as::server::AudioAppInfoImpl::AudioAppInfoImpl(as::server::AudioAppInfoImpl *this, const as::server::AudioAppInfoImpl *a2)
{
  std::string::size_type v4 = (void *)*((void *)a2 + 1);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = v4;
  long long v6 = *((_OWORD *)a2 + 1);
  long long v5 = *((_OWORD *)a2 + 2);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((_OWORD *)this + 1) = v6;
  *((_OWORD *)this + 2) = v5;
  *((void *)this + 7) = *((id *)a2 + 7);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 4);
    *((void *)this + 10) = *((void *)a2 + 10);
    *((_OWORD *)this + 4) = v7;
  }
  std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::map[abi:ne180100]((uint64_t)this + 88, (uint64_t)a2 + 88);
  std::map<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>::map[abi:ne180100]((uint64_t)this + 112, (uint64_t)a2 + 112);
  uint64_t v8 = *((void *)a2 + 18);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)this + 18) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 19) = *((id *)a2 + 19);
  *((void *)this + 20) = *((id *)a2 + 20);
  *((void *)this + 21) = *((id *)a2 + 21);
  *((void *)this + 22) = *((id *)a2 + 22);
  return this;
}

void sub_1CFE72614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__tree_node<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,void *> *,long>>>((_DWORD *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1CFE7269C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_DWORD *std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__tree_node<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,void *> *,long>>>(_DWORD *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    std::string::size_type v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = (uint64_t *)(result + 2);
    do
    {
      BOOL result = std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,as::server::AudioAppInfoImpl::SessionDetails> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      long long v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          long long v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          std::string::size_type v4 = v8;
        }
        while (!v9);
      }
      std::string::size_type v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_DWORD *std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,as::server::AudioAppInfoImpl::SessionDetails> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  long long v6 = std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__find_equal<unsigned int>(a1, a2, &v13, &v12, a3);
  long long v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    BOOL v9 = operator new(0x40uLL);
    long long v7 = v9;
    unsigned char v9[8] = *(_DWORD *)a4;
    uint64_t v10 = *(void *)(a4 + 16);
    *((void *)v9 + 5) = *(void *)(a4 + 8);
    *((void *)v9 + 6) = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
    }
    *((_WORD *)v9 + 28) = *(_WORD *)(a4 + 24);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v13, v8, (uint64_t *)v9);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  long long v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          long long v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        long long v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    audit_token_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      audit_token_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          long long v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        long long v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      char v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::map<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::map<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,void *> *,long>>>((_DWORD *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1CFE729D0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_DWORD *std::map<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,void *> *,long>>>(_DWORD *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    std::string::size_type v4 = a2;
    long long v5 = (uint64_t **)result;
    unsigned int v6 = (uint64_t *)(result + 2);
    do
    {
      BOOL result = std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      unsigned int v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unsigned int v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          std::string::size_type v4 = v8;
        }
        while (!v9);
      }
      std::string::size_type v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_DWORD *std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v6 = std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__find_equal<unsigned int>(a1, a2, &v12, &v11, a3);
  unsigned int v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x38uLL);
    unsigned char v7[8] = *(_DWORD *)a4;
    uint64_t v9 = *(void *)(a4 + 16);
    *((void *)v7 + 5) = *(void *)(a4 + 8);
    *((void *)v7 + 6) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_1CFE72BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE72C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppInfoImpl::ExtractBoolDefaultToFalse(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  unsigned int v6 = (as::server *)*(id *)(a1 + 8);
  unsigned int v7 = v6;
  if (*(_DWORD *)a1) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v6 == 0;
  }
  if (v8)
  {
    uint64_t v9 = *(id *)as::server::gSessionServerLog(v6);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = bswap32(a3);
      *(_DWORD *)&buf[1] = v10;
      if (((char)v10 - 32) > 0x5E
        || (((__int16)v10 >> 8) - 32) > 0x5E
        || ((v10 << 8 >> 24) - 32) > 0x5E
        || ((v10 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v21, a3);
      }
      else
      {
        strcpy(&buf[5], "'");
        buf[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v21, buf);
      }
      BOOL v14 = &v21;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        BOOL v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)audit_token_t buf = 136315906;
      *(void *)&uint8_t buf[4] = "AudioApplicationInfoImpl.mm";
      __int16 v23 = 1024;
      int v24 = 66;
      __int16 v25 = 2112;
      id v26 = v5;
      __int16 v27 = 2080;
      long long v28 = v14;
      _os_log_impl(&dword_1CFE2A000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to get property: %@, domain: %s", buf, 0x26u);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v11 = (as::server *)[(as::server *)v6 unsignedLongValue];
    if ((unint64_t)v11 >= 2)
    {
      uint64_t v12 = *(id *)as::server::gSessionServerLog(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = bswap32(a3);
        int v32 = v13;
        if (((char)v13 - 32) > 0x5E
          || (((__int16)v13 >> 8) - 32) > 0x5E
          || ((v13 << 8 >> 24) - 32) > 0x5E
          || ((v13 >> 24) - 32) > 0x5E)
        {
          std::to_string(&v21, a3);
        }
        else
        {
          __int16 v33 = 39;
          char __s = 39;
          std::string::basic_string[abi:ne180100]<0>(&v21, &__s);
        }
        int v16 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
        std::string::size_type v17 = v21.__r_.__value_.__r.__words[0];
        uint64_t v18 = [(as::server *)v7 unsignedLongValue];
        *(void *)&uint8_t buf[4] = "AudioApplicationInfoImpl.mm";
        audit_token_t v19 = &v21;
        *(_DWORD *)audit_token_t buf = 136316162;
        if (v16 < 0) {
          audit_token_t v19 = (std::string *)v17;
        }
        __int16 v23 = 1024;
        int v24 = 71;
        __int16 v25 = 2112;
        id v26 = v5;
        __int16 v27 = 2080;
        long long v28 = v19;
        __int16 v29 = 2048;
        uint64_t v30 = v18;
        _os_log_impl(&dword_1CFE2A000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d warning - property: %@ (domain: %s) has non-BOOL value: %lu", buf, 0x30u);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
      }
    }
    uint64_t v15 = [(as::server *)v7 BOOLValue];
  }

  return v15;
}

void sub_1CFE72F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZN2as6server16AudioAppInfoImpl27DeferPropertyChangeCallbackEONSt3__16vectorINS2_10shared_ptrINS0_20AudioAppRemoteClientEEENS2_9allocatorIS6_EEEEPK8NSStringP12NSDictionaryb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      std::string::size_type v4 = v3;
      id v5 = *(as::server::AudioAppRemoteClient **)(a1 + 48);
      if (v5) {
        as::server::AudioAppRemoteClient::DeferPropertyChangeCallback(v5, *(NSString **)(a1 + 32), *(NSDictionary **)(a1 + 40), *(unsigned __int8 *)(a1 + 64));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1CFE73014(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c57_ZTSNSt3__18weak_ptrIN2as6server20AudioAppRemoteClientEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_48c57_ZTSNSt3__18weak_ptrIN2as6server20AudioAppRemoteClientEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

BOOL as::server::AudioAppInfoImpl::SetPrimaryClient(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v22 = v5;
  if (!v5)
  {
    int v10 = *(id *)as::server::gSessionServerLog(0);
    BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v12 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)audit_token_t buf = 136315650;
    *(void *)&uint8_t buf[4] = "AudioApplicationInfoImpl.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 455;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v12;
    _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - expected an XPC connection for an explicitly created audio app instance (pid: %d)", buf, 0x18u);
    return 0;
  }
  unsigned int v6 = v5;
  BOOL v7 = as::server::ProcessIdentity::operator==(a1 + 16, a2 + 56);
  if (!v7)
  {
    int v13 = *(id *)as::server::gSessionServerLog((as::server *)v7);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = *(_DWORD *)(a1 + 52);
      int v15 = *(_DWORD *)(a2 + 92);
      *(_DWORD *)audit_token_t buf = 136315906;
      *(void *)&uint8_t buf[4] = "AudioApplicationInfoImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 461;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v14;
      __int16 v24 = 1024;
      int v25 = v15;
      _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - source process mismatch: existing pid:%d, explicitly-created pid: %d", buf, 0x1Eu);
    }
    goto LABEL_11;
  }
  if (*(void *)(a1 + 136))
  {
    BOOL v8 = *(id *)as::server::gSessionServerLog((as::server *)v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = *(_DWORD *)(a2 + 92);
      *(_DWORD *)audit_token_t buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioApplicationInfoImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 467;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v9;
      _os_log_impl(&dword_1CFE2A000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - valid primary client already present on audio app instance (pid:%d)", buf, 0x18u);
    }
LABEL_11:

    return 0;
  }
  uint64_t v21 = 1886546285;
  int v16 = (id *)(a2 + 8);
  std::allocate_shared[abi:ne180100]<as::server::AudioAppRemoteClient,std::allocator<as::server::AudioAppRemoteClient>,AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,NSString * const {__strong},as::server::ProcessIdentity const&,void>(&v21, &v22, a2 + 16, (void *)(a2 + 8), (void *)a2, buf);
  long long v17 = *(_OWORD *)buf;
  *(void *)audit_token_t buf = 0;
  *(void *)&buf[8] = 0;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = v17;
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  uint64_t v20 = *(void *)(a1 + 136);
  uint64_t v19 = *(void *)(a1 + 144);
  *(_DWORD *)audit_token_t buf = *(_DWORD *)(v20 + 8);
  *(void *)&buf[8] = v20;
  *(void *)&buf[16] = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>>>((uint64_t **)(a1 + 112), (unsigned int *)buf, (uint64_t)buf);
  if (*(void *)&buf[16]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
  }
  if (*v16) {
    objc_storeStrong((id *)(a1 + 56), *v16);
  }
  objc_storeStrong((id *)(a1 + 8), *(id *)a2);
  as::server::AudioAppInfoImpl::UpdateDebugString(a1, (uint64_t *)(a1 + 136));

  return 1;
}

void sub_1CFE73334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }

  _Unwind_Resume(a1);
}

void as::server::AudioAppInfoImpl::AddDelegateAudioApp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v20 = v7;
  BOOL v8 = as::server::ProcessIdentity::operator==(a2 + 56, a1 + 16);
  if (v8)
  {
    *(void *)audit_token_t buf = 1684825972;
    std::allocate_shared[abi:ne180100]<as::server::AudioAppRemoteClient,std::allocator<as::server::AudioAppRemoteClient>,AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,NSString * const {__strong},as::server::ProcessIdentity const&,void>(buf, &v20, a2 + 16, (void *)(a2 + 8), (void *)a2, &v19);
    *(_DWORD *)audit_token_t buf = *(_DWORD *)(v19 + 8);
    *(_OWORD *)&buf[8] = v19;
    if (*((void *)&v19 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>>>((uint64_t **)(a1 + 112), (unsigned int *)buf, (uint64_t)buf);
    char v10 = v9;
    uint64_t v11 = *(as::server **)&buf[16];
    if (*(void *)&buf[16]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
    }
    if (v10)
    {
      *(_OWORD *)a4 = v19;
    }
    else
    {
      int v12 = *(id *)as::server::gSessionServerLog(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v13 = *(_DWORD *)(v19 + 8);
        int v14 = *(_DWORD *)(a1 + 52);
        int v15 = *(_DWORD *)(a2 + 52);
        *(_DWORD *)audit_token_t buf = 136316162;
        *(void *)&uint8_t buf[4] = "AudioApplicationInfoImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 519;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v13;
        __int16 v22 = 1024;
        int v23 = v14;
        __int16 v24 = 1024;
        int v25 = v15;
        _os_log_impl(&dword_1CFE2A000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to add delegate instance (id: %u, source pid:%d, creator pid: %d)", buf, 0x24u);
      }
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      if (*((void *)&v19 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
      }
    }
    id v7 = v20;
  }
  else
  {
    int v16 = *(id *)as::server::gSessionServerLog((as::server *)v8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v17 = *(_DWORD *)(a2 + 92);
      int v18 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)audit_token_t buf = 136315906;
      *(void *)&uint8_t buf[4] = "AudioApplicationInfoImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 510;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v17;
      __int16 v22 = 1024;
      int v23 = v18;
      _os_log_impl(&dword_1CFE2A000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - delegate source process (pid:%d) doesn't match this source process (pid:%d)", buf, 0x1Eu);
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
}

void sub_1CFE735B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, void *a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void as::AudioAppState::~AudioAppState(id *this)
{
}

void as::server::AudioAppInfoImpl::GetPropertyMX(id *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
}

void as::AudioAppState::getPropertyMX(id *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v4 = [this[1] objectForKey:a2];
  if (v4)
  {
    id v7 = v4;
    id v5 = v4;
    std::string::size_type v4 = v7;
    int v6 = 0;
  }
  else
  {
    int v6 = -50;
  }
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = v4;
}

void as::server::AudioAppInfoImpl::GetPropertyAudioApp(id *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t as::AudioAppState::setPropertyMX(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 8) setValue:v6 forKey:v5];
  [*(id *)(a1 + 24) addObject:v5];

  return 0;
}

void sub_1CFE73724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppInfoImpl::SetProperty(uint64_t a1, void *a2, void *a3)
{
  return as::AudioAppState::setPropertyApp((id *)(a1 + 152), a2, a3);
}

BOOL as::server::AudioAppInfoImpl::HasStrongClientOwner(as::server::AudioAppInfoImpl *this)
{
  return *((void *)this + 17) != 0;
}

BOOL as::server::AudioAppInfoImpl::HandleXPCConnectionInvalidated(as::server::AudioAppInfoImpl *this, NSXPCConnection *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = a2;
  uint64_t v4 = *((void *)this + 17);
  id v5 = v3;
  id v6 = v5;
  id v7 = (as::server::AudioAppInfoImpl *)*((void *)this + 14);
  if (v7 == (as::server::AudioAppInfoImpl *)((char *)this + 120))
  {

LABEL_25:
    BOOL v21 = 0;
    goto LABEL_26;
  }
  uint64_t v23 = *((void *)this + 16);
  do
  {
    as::server::AudioAppRemoteClient::GetXPCConnection(*((id **)v7 + 5));
    BOOL v8 = (NSXPCConnection *)objc_claimAutoreleasedReturnValue();
    BOOL v9 = v8 == v6;

    if (v9)
    {
      int v14 = *(id *)as::server::gSessionServerLog(v10);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *((void *)v7 + 5);
        int v16 = (void *)(v15 + 176);
        if (*(char *)(v15 + 199) < 0) {
          int v16 = (void *)*v16;
        }
        *(_DWORD *)audit_token_t buf = 136315906;
        int v25 = "AudioApplicationInfoImpl.mm";
        __int16 v26 = 1024;
        int v27 = 296;
        __int16 v28 = 2112;
        __int16 v29 = v6;
        __int16 v30 = 2080;
        uint64_t v31 = v16;
        _os_log_impl(&dword_1CFE2A000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing audio app client due to invalidated xpc connection: %@ { %s }", buf, 0x26u);
      }
      if (*((void *)v7 + 5) == *((void *)this + 17))
      {
        int v17 = (std::__shared_weak_count *)*((void *)this + 18);
        *((void *)this + 17) = 0;
        *((void *)this + 18) = 0;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
      }
      int v12 = (as::server::AudioAppInfoImpl *)std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::erase((uint64_t **)this + 14, (uint64_t *)v7);
    }
    else
    {
      uint64_t v11 = (as::server::AudioAppInfoImpl *)*((void *)v7 + 1);
      if (v11)
      {
        do
        {
          int v12 = v11;
          uint64_t v11 = *(as::server::AudioAppInfoImpl **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (as::server::AudioAppInfoImpl *)*((void *)v7 + 2);
          BOOL v13 = *(void *)v12 == (void)v7;
          id v7 = v12;
        }
        while (!v13);
      }
    }
    id v7 = v12;
  }
  while (v12 != (as::server::AudioAppInfoImpl *)((char *)this + 120));
  BOOL v18 = v4 == 0;
  uint64_t v19 = *((void *)this + 16);

  char v20 = v23 == v19 || v18;
  if (v20) {
    goto LABEL_25;
  }
  BOOL v21 = *((void *)this + 17) == 0;
LABEL_26:

  return v21;
}

void sub_1CFE7395C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppInfoImpl::FindAudioAppClient@<X0>(as::server::AudioAppInfoImpl *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = *((void *)this + 15);
  uint64_t result = (uint64_t)this + 120;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = result;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      BOOL v9 = (uint64_t *)v4;
    }
    else {
      BOOL v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != result && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v11 = *(void *)(v6 + 40);
    uint64_t v10 = *(void *)(v6 + 48);
    *a3 = v11;
    a3[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

BOOL as::server::AudioAppInfoImpl::AllSessionForAppMuted(as::server::AudioAppInfoImpl *this)
{
  uint64_t v1 = (char *)*((void *)this + 11);
  uint64_t v2 = (char *)this + 96;
  if (v1 == (char *)this + 96) {
    return 1;
  }
  do
  {
    BOOL result = v1[57] != 0;
    if (!v1[57]) {
      break;
    }
    uint64_t v4 = (char *)*((void *)v1 + 1);
    if (v4)
    {
      do
      {
        uint64_t v5 = v4;
        uint64_t v4 = *(char **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        uint64_t v5 = (char *)*((void *)v1 + 2);
        BOOL v6 = *(void *)v5 == (void)v1;
        uint64_t v1 = v5;
      }
      while (!v6);
    }
    uint64_t v1 = v5;
  }
  while (v5 != v2);
  return result;
}

uint64_t as::server::AudioAppInfoImpl::NumberofUnmutedSessions(as::server::AudioAppInfoImpl *this)
{
  uint64_t v1 = (char *)*((void *)this + 11);
  uint64_t v2 = (char *)this + 96;
  if (v1 == (char *)this + 96) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v4 = (char *)*((void *)v1 + 1);
    uint64_t v5 = v1;
    if (v4)
    {
      do
      {
        BOOL v6 = v4;
        uint64_t v4 = *(char **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        BOOL v6 = (char *)*((void *)v5 + 2);
        BOOL v7 = *(void *)v6 == (void)v5;
        uint64_t v5 = v6;
      }
      while (!v7);
    }
    result += v1[57];
    uint64_t v1 = v6;
  }
  while (v6 != v2);
  return result;
}

void as::server::AudioAppInfoImpl::HandleSessionInputMuteChange(as::server::AudioAppInfoImpl *this, unsigned int a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unsigned int v18 = a2;
  uint64_t v4 = (void *)((char *)this + 96);
  uint64_t v3 = *((void *)this + 12);
  if (!v3)
  {
LABEL_29:
    int v17 = *(id *)as::server::gSessionServerLog(this);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)audit_token_t buf = 136315394;
      char v20 = "AudioApplicationInfoImpl.mm";
      __int16 v21 = 1024;
      int v22 = 409;
      _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to find session in session map", buf, 0x12u);
    }
    return;
  }
  BOOL v6 = this;
  this = (as::server::AudioAppInfoImpl *)((char *)this + 88);
  BOOL v7 = v4;
  do
  {
    unsigned int v8 = *(_DWORD *)(v3 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v3;
    }
    else {
      uint64_t v10 = (uint64_t *)(v3 + 8);
    }
    if (v9) {
      BOOL v7 = (void *)v3;
    }
    uint64_t v3 = *v10;
  }
  while (*v10);
  if (v7 != v4 && *((_DWORD *)v7 + 8) <= a2)
  {
    this = (as::server::AudioAppInfoImpl *)std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::at((uint64_t)this, &v18);
    if (*((unsigned __int8 *)this + 17) != a3)
    {
      *((unsigned char *)this + 17) = a3;
      if (a3)
      {
        this = (as::server::AudioAppInfoImpl *)as::server::AudioAppInfoImpl::AllSessionForAppMuted(v6);
        if ((this & 1) == 0) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      this = (as::server::AudioAppInfoImpl *)as::server::AudioAppInfoImpl::NumberofUnmutedSessions(v6);
      if (this == (as::server::AudioAppInfoImpl *)1)
      {
LABEL_17:
        uint64_t v11 = [NSNumber numberWithBool:a3];
        as::server::AudioAppInfoImpl::IssueInputMuteNotifcation((void **)v6, v11);
      }
    }
  }
LABEL_18:
  uint64_t v12 = *v4;
  if (!*v4) {
    goto LABEL_29;
  }
  BOOL v13 = v4;
  do
  {
    unsigned int v14 = *(_DWORD *)(v12 + 32);
    BOOL v15 = v14 >= v18;
    if (v14 >= v18) {
      int v16 = (uint64_t *)v12;
    }
    else {
      int v16 = (uint64_t *)(v12 + 8);
    }
    if (v15) {
      BOOL v13 = (void *)v12;
    }
    uint64_t v12 = *v16;
  }
  while (*v16);
  if (v13 == v4 || v18 < *((_DWORD *)v13 + 8)) {
    goto LABEL_29;
  }
}

void sub_1CFE73C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::at(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  unsigned int v3 = *a2;
  while (1)
  {
    while (1)
    {
      unsigned int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

BOOL as::server::AudioAppInfoImpl::RemoveSession(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(*(void *)a2 + 8);
  uint64_t v5 = (uint64_t **)(a1 + 11);
  unsigned int v4 = (uint64_t *)a1[11];
  BOOL v6 = a1 + 12;
  if (v4 != a1 + 12)
  {
    uint64_t v7 = a1[13];
    do
    {
      if (*((_DWORD *)v4 + 8) == v3)
      {
        a1 = std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::erase(v5, v4);
      }
      else
      {
        unsigned int v8 = (uint64_t *)v4[1];
        if (v8)
        {
          do
          {
            a1 = v8;
            unsigned int v8 = (uint64_t *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            a1 = (uint64_t *)v4[2];
            BOOL v9 = *a1 == (void)v4;
            unsigned int v4 = a1;
          }
          while (!v9);
        }
      }
      unsigned int v4 = a1;
    }
    while (a1 != v6);
    if (v7 != v2[13]) {
      return 1;
    }
  }
  uint64_t v10 = *(id *)as::server::gSessionServerLog((as::server *)a1);
  BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v12 = v2 + 8;
    if (*((char *)v2 + 87) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    int v13 = 136315906;
    unsigned int v14 = "AudioApplicationInfoImpl.mm";
    __int16 v15 = 1024;
    int v16 = 442;
    __int16 v17 = 1024;
    int v18 = v3;
    __int16 v19 = 2080;
    char v20 = v12;
    _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Session 0x%x not found in app's known sessions (app: %s)", (uint8_t *)&v13, 0x22u);
    return 0;
  }
  return result;
}

void as::server::AudioAppInfoImpl::AddProxyAudioApp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v20 = v7;
  BOOL v8 = as::server::ProcessIdentity::operator==(a2 + 56, a1 + 16);
  if (v8)
  {
    *(void *)audit_token_t buf = 1886547832;
    std::allocate_shared[abi:ne180100]<as::server::AudioAppRemoteClient,std::allocator<as::server::AudioAppRemoteClient>,AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,decltype(nullptr),as::server::ProcessIdentity const&,void>(buf, &v20, a2 + 16, (void *)(a2 + 8), &v19);
    *(_DWORD *)audit_token_t buf = *(_DWORD *)(v19 + 8);
    *(_OWORD *)&buf[8] = v19;
    if (*((void *)&v19 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>>>((uint64_t **)(a1 + 112), (unsigned int *)buf, (uint64_t)buf);
    char v10 = v9;
    uint64_t v11 = *(as::server **)&buf[16];
    if (*(void *)&buf[16]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
    }
    if (v10)
    {
      *(_OWORD *)a4 = v19;
    }
    else
    {
      uint64_t v12 = *(id *)as::server::gSessionServerLog(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v13 = *(_DWORD *)(v19 + 8);
        int v14 = *(_DWORD *)(a1 + 52);
        int v15 = *(_DWORD *)(a2 + 52);
        *(_DWORD *)audit_token_t buf = 136316162;
        *(void *)&uint8_t buf[4] = "AudioApplicationInfoImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 498;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v13;
        __int16 v22 = 1024;
        int v23 = v14;
        __int16 v24 = 1024;
        int v25 = v15;
        _os_log_impl(&dword_1CFE2A000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to add proxy instance (id: %u, source pid:%d, creator pid: %d)", buf, 0x24u);
      }
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      if (*((void *)&v19 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
      }
    }
    id v7 = v20;
  }
  else
  {
    int v16 = *(id *)as::server::gSessionServerLog((as::server *)v8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v17 = *(_DWORD *)(a2 + 92);
      int v18 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)audit_token_t buf = 136315906;
      *(void *)&uint8_t buf[4] = "AudioApplicationInfoImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 489;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v17;
      __int16 v22 = 1024;
      int v23 = v18;
      _os_log_impl(&dword_1CFE2A000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - proxy source process (pid:%d) doesn't match this source process (pid:%d)", buf, 0x1Eu);
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
}

void sub_1CFE74078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void as::server::AudioAppInfoImpl::GetSessions(as::server::AudioAppInfoImpl *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (char *)*((void *)this + 11);
  int v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    while (1)
    {
      uint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 6);
      if (v5) {
        break;
      }
LABEL_11:
      BOOL v8 = (char *)*((void *)v2 + 1);
      if (v8)
      {
        do
        {
          char v9 = v8;
          BOOL v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          char v9 = (char *)*((void *)v2 + 2);
          BOOL v10 = *(void *)v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      uint64_t v2 = v9;
      if (v9 == v3) {
        return;
      }
    }
    uint64_t v6 = *((void *)v2 + 5);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v11 = 0;
    id v7 = std::__shared_weak_count::lock(v5);
    *((void *)&v11 + 1) = v7;
    if (v7)
    {
      *(void *)&long long v11 = v6;
      if (!v6) {
        goto LABEL_8;
      }
    }
    else if (!(void)v11)
    {
LABEL_8:
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      std::__shared_weak_count::__release_weak(v5);
      goto LABEL_11;
    }
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::push_back[abi:ne180100](a2, &v11);
    id v7 = (std::__shared_weak_count *)*((void *)&v11 + 1);
    goto LABEL_8;
  }
}

void sub_1CFE741B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_weak(v10);
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  id v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__swap_out_circular_buffer(a1, v18);
    char v9 = (void *)a1[1];
    BOOL result = std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    char v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1CFE742E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void ___ZN2as6server20DefaultAudioAppStateEv_block_invoke()
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = @"InputMute";
  v3[0] = MEMORY[0x1E4F1CC28];
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:&v2 count:1];
  uint64_t v1 = (void *)as::server::DefaultAudioAppState(void)::sDefaultState;
  as::server::DefaultAudioAppState(void)::sDefaultState = v0;
}

void ___ZN2as6server14DefaultMXStateEv_block_invoke()
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = @"PrefersBluetoothAccessoryMuting";
  v3[0] = MEMORY[0x1E4F1CC28];
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:&v2 count:1];
  uint64_t v1 = (void *)as::server::DefaultMXState(void)::sDefaultState;
  as::server::DefaultMXState(void)::sDefaultState = v0;
}

uint64_t std::vector<std::shared_ptr<as::server::AudioAppRemoteClient>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<as::server::AudioAppRemoteClient>>,std::reverse_iterator<std::shared_ptr<as::server::AudioAppRemoteClient>*>,std::reverse_iterator<std::shared_ptr<as::server::AudioAppRemoteClient>*>,std::reverse_iterator<std::shared_ptr<as::server::AudioAppRemoteClient>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<as::server::AudioAppRemoteClient>>,std::reverse_iterator<std::shared_ptr<as::server::AudioAppRemoteClient>*>,std::reverse_iterator<std::shared_ptr<as::server::AudioAppRemoteClient>*>,std::reverse_iterator<std::shared_ptr<as::server::AudioAppRemoteClient>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<as::server::AudioAppRemoteClient>>,std::reverse_iterator<std::shared_ptr<as::server::AudioAppRemoteClient>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<as::server::AudioAppRemoteClient>>,std::reverse_iterator<std::shared_ptr<as::server::AudioAppRemoteClient>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<as::server::AudioAppRemoteClient>>,std::reverse_iterator<std::shared_ptr<as::server::AudioAppRemoteClient>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<as::server::AudioAppRemoteClient>>,std::reverse_iterator<std::shared_ptr<as::server::AudioAppRemoteClient>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    unsigned int v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::shared_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::shared_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::shared_ptr<as::server::AudioSessionInfo>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::shared_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::shared_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::shared_ptr<as::server::AudioSessionInfo>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::shared_ptr<as::server::AudioSessionInfo>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::shared_ptr<as::server::AudioSessionInfo>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<as::server::AudioAppRemoteClient>>,std::reverse_iterator<std::shared_ptr<as::server::AudioAppRemoteClient>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  int v3 = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(a1, a2);
  unsigned int v4 = (std::__shared_weak_count *)a2[6];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  operator delete(a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::erase(uint64_t **a1, uint64_t *a2)
{
  int v3 = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(a1, a2);
  unsigned int v4 = (std::__shared_weak_count *)a2[6];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(a2);
  return v3;
}

void *std::allocate_shared[abi:ne180100]<as::server::AudioAppRemoteClient,std::allocator<as::server::AudioAppRemoteClient>,AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,NSString * const {__strong},as::server::ProcessIdentity const&,void>@<X0>(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0xE0uLL);
  uint64_t result = std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::__shared_ptr_emplace[abi:ne180100]<AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,NSString * const {__strong},as::server::ProcessIdentity const&,std::allocator<as::server::AudioAppRemoteClient>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1CFE74868(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::__shared_ptr_emplace[abi:ne180100]<AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,NSString * const {__strong},as::server::ProcessIdentity const&,std::allocator<as::server::AudioAppRemoteClient>,0>(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F26884C8;
  as::server::AudioAppRemoteClient::AudioAppRemoteClient(a1 + 3, *a2, *a3, a4, *a5, *a6);
  return a1;
}

void sub_1CFE748D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26884C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26884C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25E1860);
}

uint64_t std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>>>(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (char *)operator new(0x38uLL);
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void *std::allocate_shared[abi:ne180100]<as::server::AudioAppRemoteClient,std::allocator<as::server::AudioAppRemoteClient>,AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,decltype(nullptr),as::server::ProcessIdentity const&,void>@<X0>(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xE0uLL);
  uint64_t result = std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::__shared_ptr_emplace[abi:ne180100]<AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,decltype(nullptr),as::server::ProcessIdentity const&,std::allocator<as::server::AudioAppRemoteClient>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1CFE74ACC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::__shared_ptr_emplace[abi:ne180100]<AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,decltype(nullptr),as::server::ProcessIdentity const&,std::allocator<as::server::AudioAppRemoteClient>,0>(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F26884C8;
  as::server::AudioAppRemoteClient::AudioAppRemoteClient(a1 + 3, *a2, *a3, a4, *a5, 0);
  return a1;
}

void sub_1CFE74B38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE74BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE74C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::RemoveMXNotificationListener(as::server *this, const audit_token_t *a2, audit_token_t *a3, NSString *a4)
{
  unsigned int v5 = this;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a3;
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v12, v5, a2, 0);
  unsigned int v7 = v12;
  if (v12)
  {
    uint64_t v8 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = as::server::AudioSessionInfo::RemoveMXNotificationListener(v7, (NSString *)v6);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  else
  {
    uint64_t v9 = 561210739;
    uint64_t v10 = *(id *)as::server::gSessionServerLog(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)audit_token_t buf = 136315650;
      long long v15 = "AudioSessionServerImpCommon.mm";
      __int16 v16 = 1024;
      int v17 = 177;
      __int16 v18 = 1024;
      unsigned int v19 = v5;
      _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
    }
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v12);

  return v9;
}

void sub_1CFE74DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);

  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::PrivateSetPropertyMX(unsigned int a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a4;
  unint64_t v11 = a5;
  uint64_t v12 = v11;
  if (a3)
  {
    strcpy(v59, "set_property");
    uint64_t v32 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)__p, "key");
    int v45 = __p;
    char v46 = 1;
    char v13 = v10;
    uint64_t v35 = (char *)[(as::server::require_acq *)v13 UTF8String];
    uint64_t v48 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v47, &v35);
    char v49 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
    *(void *)&v53[2] = buf;
    v53[10] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v38, "value");
    uint64_t v39 = v38;
    char v40 = 1;
    AudioSession::PropertyValueToJSON(v12, (uint64_t)v33);
    v41[0] = v33[0];
    v42[0] = v34;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
    v33[0] = 0;
    uint64_t v34 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v41);
    v42[1] = v41;
    char v43 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v55 + 2, (uint64_t)v38, 2, 1, 2);
    v57[1] = (char *)&v55 + 2;
    char v58 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)buf, 2, 1, 2);
    for (uint64_t i = 0; i != -8; i -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v55 + i * 8 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v57[i], *((unsigned __int8 *)&v55 + i * 8 + 2));
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v41[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v42[j], v41[j * 8]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v34, v33[0]);
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v47[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v47[k + 8], v47[k]);
    }
    __int16 v18 = *(id *)as::server::gSessionServerLog(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(char *)(a2 + 23);
      uint64_t v20 = *(void *)a2;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v36, -1, 0x20u, 0, 0, __p);
      if (v19 >= 0) {
        uint64_t v21 = a2;
      }
      else {
        uint64_t v21 = v20;
      }
      if (SHIBYTE(v45) >= 0) {
        __int16 v22 = __p;
      }
      else {
        __int16 v22 = (void **)__p[0];
      }
      *(_DWORD *)audit_token_t buf = 136316162;
      uint64_t v51 = "AudioSessionServerImpCommon.mm";
      __int16 v52 = 1024;
      *(_DWORD *)uint64_t v53 = 362;
      *(_WORD *)&v53[4] = 2080;
      *(void *)&v53[6] = v59;
      __int16 v54 = 2080;
      uint64_t v55 = v21;
      __int16 v56 = 2080;
      v57[0] = v22;
      _os_log_impl(&dword_1CFE2A000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (SHIBYTE(v45) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v10 = v32;
    }

    uint64_t v23 = as::server::MXAccessor<as::server::RequireACQ>::SetProperty(a3, a6, v13, v12);
    uint64_t v24 = as::server::TranslateCMSessionErrorCode((uint64_t)v59, (uint64_t *)a2, 365, v23);
    char v25 = [(as::server::require_acq *)v13 isEqualToString:*MEMORY[0x1E4F75EC8]];
    if (v24) {
      char v27 = 0;
    }
    else {
      char v27 = v25;
    }
    if (v27) {
      uint64_t v24 = as::server::require_acq::AudioSessionServerUpdatePhoneCallDummyPlayerState((as::server::require_acq *)a1, v12, v26);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v36[0]);
  }
  else
  {
    uint64_t v24 = 2003329396;
    __int16 v28 = *(id *)as::server::gSessionServerLog(v11);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v29 = a2;
      }
      else {
        uint64_t v29 = *(void *)a2;
      }
      *(_DWORD *)audit_token_t buf = 136315650;
      uint64_t v51 = "AudioSessionServerImpCommon.mm";
      __int16 v52 = 1024;
      *(_DWORD *)uint64_t v53 = 356;
      *(_WORD *)&v53[4] = 2080;
      *(void *)&v53[6] = v29;
      _os_log_impl(&dword_1CFE2A000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get MXSessionRef for session: %s", buf, 0x1Cu);
    }
  }

  return v24;
}

void sub_1CFE75298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t as::server::MXAccessor<as::server::RequireACQ>::SetProperty(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  if (!v6) {
    goto LABEL_4;
  }
  objc_opt_class();
  unsigned int v7 = v6;
  if (objc_opt_isKindOfClass())
  {

LABEL_4:
    unsigned int v7 = 0;
  }
  uint64_t v8 = _MXSessionSetProperty();

  return v8;
}

void sub_1CFE75444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::SetPropertyMX(unsigned int a1, const audit_token_t *a2, void *a3, void *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = (as::server *)as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v27, a1, a2, 1);
  uint64_t v10 = v27;
  if (v27)
  {
    unint64_t v11 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((char *)v10 + 223) < 0) {
      std::string::__init_copy_ctor_external(&buf, *((const std::string::value_type **)v10 + 25), *((void *)v10 + 26));
    }
    else {
      std::string buf = *(std::string *)((char *)v10 + 200);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    long long v14 = v27;
    if (!v27)
    {
      uint64_t v22 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v22);
    }
    long long v15 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v14, &cf);
    CFTypeRef v16 = cf;
    if (cf) {
      CFRelease(cf);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    int v17 = v27;
    if (!v27)
    {
      uint64_t v23 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v23);
    }
    __int16 v18 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = *((void *)v17 + 28);
    int v19 = (std::__shared_weak_count *)*((void *)v17 + 29);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    uint64_t v24 = v20;
    char v25 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = as::server::require_acq::PrivateSetPropertyMX(a1, (uint64_t)&buf, (uint64_t)v16, v7, v8, (uint64_t)&v24);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v12 = 561210739;
    char v13 = *(id *)as::server::gSessionServerLog(v9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AudioSessionServerImpCommon.mm";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 391;
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = a1;
      _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", (uint8_t *)&buf, 0x18u);
    }
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }

  return v12;
}

void sub_1CFE756D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }

  _Unwind_Resume(a1);
}

void sub_1CFE75800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE7588C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE75908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE759D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE75E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a13);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void sub_1CFE761E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  id v6 = va_arg(va1, uint64_t *);
  uint64_t v8 = va_arg(va1, void);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va1);
  _Unwind_Resume(a1);
}

void sub_1CFE763A0(_Unwind_Exception *a1)
{
}

void sub_1CFE76738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  as::server::SessionCreationDescription::~SessionCreationDescription((as::server::SessionCreationDescription *)&a24);
  _Unwind_Resume(a1);
}

void as::server::SessionCreationDescription::~SessionCreationDescription(as::server::SessionCreationDescription *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1CFE76D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a16);
  _Unwind_Resume(a1);
}

void sub_1CFE76FD4(_Unwind_Exception *a1)
{
  unsigned int v4 = v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void sub_1CFE770A8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE771A8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1CFE77368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_1CFE77454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_1CFE774E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE7755C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE77608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE77694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__SecTask *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<opaqueCMSession *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void as::server::AudioSessionInfo::DebugState::~DebugState(void **this)
{
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void as::server::ConstAudioSessionInfo::~ConstAudioSessionInfo(as::server::ConstAudioSessionInfo *this)
{
  *(void *)this = &unk_1F2688500;
  as::server::ConstAudioSessionInfo::CleanupCMSession((CFTypeRef *)this);

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  int v3 = (const void *)*((void *)this + 14);
  if (v3) {
    CFRelease(v3);
  }
  unsigned int v4 = (const void *)*((void *)this + 13);
  if (v4) {
    CFRelease(v4);
  }

  BaseOpaqueObject::~BaseOpaqueObject(this);
}

{
  uint64_t vars8;

  as::server::ConstAudioSessionInfo::~ConstAudioSessionInfo(this);
  JUMPOUT(0x1D25E1860);
}

void as::server::AudioSessionInfo::~AudioSessionInfo(as::server::AudioSessionInfo *this)
{
  *(void *)this = &unk_1F2688530;
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, &cf);
  if (cf)
  {
    CFRelease(cf);
    uint64_t MXNotificationNames = as::GetMXNotificationNames(v2);
    unsigned int v4 = *(id **)MXNotificationNames;
    id v5 = *(id **)(MXNotificationNames + 8);
    while (v4 != v5)
    {
      id v6 = (NSString *)*v4;
      as::server::AudioSessionInfo::RemoveMXNotificationListener(this, v6);

      ++v4;
    }
    while (v7 != v8)
    {
      CFStringRef v9 = *v7;
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterRemoveObserver(LocalCenter, (const void *)*((unsigned int *)this + 2), v9, 0);
      ++v7;
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 568));
  std::__list_imp<NSDictionary * {__strong}>::clear((uint64_t *)this + 68);
  CFTypeRef cf = (char *)this + 512;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
  std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::destroy((uint64_t)this + 480, *((void **)this + 61));
  unint64_t v11 = (void *)*((void *)this + 57);
  if (v11)
  {
    *((void *)this + 58) = v11;
    operator delete(v11);
  }
  if (*((unsigned char *)this + 448)) {

  }
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)this + 42, 0);

  as::server::ConstAudioSessionInfo::~ConstAudioSessionInfo(this);
}

{
  uint64_t vars8;

  as::server::AudioSessionInfo::~AudioSessionInfo(this);
  JUMPOUT(0x1D25E1860);
}

uint64_t as::server::AudioSessionInfo::RemoveMXNotificationListener(as::server::AudioSessionInfo *this, NSString *a2)
{
  int v3 = a2;
  CMNotificationCenterGetDefaultLocalCenter();
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, &cf);
  uint64_t v4 = CMNotificationCenterRemoveListener();
  if (cf) {
    CFRelease(cf);
  }

  return v4;
}

void sub_1CFE77A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va);

  _Unwind_Resume(a1);
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void as::server::AudioSessionInfo::ResetAllPlayers(as::server::AudioSessionInfo *this)
{
  uint64_t v1 = this;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  std::string::size_type v38 = 0;
  uint64_t v39 = 0;
  char v40 = 0;
  uint64_t v2 = (long long *)*((void *)this + 57);
  int v3 = (long long *)*((void *)this + 58);
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    do
    {
      if ((*((unsigned char *)v2 + 12) & 0x10) == 0)
      {
        if (v4 >= v40)
        {
          unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)v38) >> 3);
          unint64_t v7 = v6 + 1;
          if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((v40 - (unsigned char *)v38) >> 3) > v7) {
            unint64_t v7 = 0x5555555555555556 * ((v40 - (unsigned char *)v38) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v40 - (unsigned char *)v38) >> 3) >= 0x555555555555555) {
            unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v8 = v7;
          }
          if (v8) {
            CFStringRef v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>((uint64_t)&v40, v8);
          }
          else {
            CFStringRef v9 = 0;
          }
          uint64_t v10 = &v9[24 * v6];
          long long v11 = *v2;
          *((void *)v10 + 2) = *((void *)v2 + 2);
          *(_OWORD *)uint64_t v10 = v11;
          char v13 = (char *)v38;
          uint64_t v12 = v39;
          long long v14 = v10;
          if (v39 != v38)
          {
            do
            {
              long long v15 = *(_OWORD *)(v12 - 24);
              *((_DWORD *)v14 - 2) = *((_DWORD *)v12 - 2);
              *(_OWORD *)(v14 - 24) = v15;
              v14 -= 24;
              v12 -= 24;
            }
            while (v12 != v13);
            uint64_t v12 = (char *)v38;
          }
          uint64_t v4 = v10 + 24;
          std::string::size_type v38 = v14;
          uint64_t v39 = v10 + 24;
          char v40 = &v9[24 * v8];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          long long v5 = *v2;
          *((void *)v4 + 2) = *((void *)v2 + 2);
          *(_OWORD *)uint64_t v4 = v5;
          v4 += 24;
        }
        uint64_t v39 = v4;
      }
      uint64_t v2 = (long long *)((char *)v2 + 24);
    }
    while (v2 != v3);
    CFTypeRef v16 = (AudioSession **)v38;
    __int16 v28 = (AudioSession **)v4;
    uint64_t v1 = this;
    if (v38 != v4)
    {
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v61, "type");
        uint64_t v62 = v61;
        char v63 = 1;
        uint64_t v35 = (char *)AudioSession::ClientPlayerAsCString(*((_DWORD *)v16 + 4));
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v64, &v35);
        std::string v65 = v64;
        char v66 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v67, (uint64_t)v61, 2, 1, 2);
        v67.__r_.__value_.__r.__words[2] = (std::string::size_type)&v67;
        char v68 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)buf, "player");
        *(void *)&void v56[2] = buf;
        char v57 = 1;
        AudioSession::FormatPointerAsHex(*v16, __p);
        uint64_t v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v58, (uint64_t)__p);
        char v60 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v69, (uint64_t)buf, 2, 1, 2);
        v69[2] = v69;
        char v70 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v47, "modes");
        uint64_t v48 = v47;
        char v49 = 1;
        AudioSession::ClientActiveModesToString((AudioSession *)*((unsigned int *)v16 + 3));
        id v30 = objc_claimAutoreleasedReturnValue();
        uint64_t v32 = (char *)[v30 UTF8String];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v50, &v32);
        uint64_t v51 = v50;
        char v52 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v71, (uint64_t)v47, 2, 1, 2);
        v71[2] = v71;
        char v72 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v41, "state");
        int v42 = v41;
        char v43 = 1;
        uint64_t v31 = (char *)AudioSession::PlayStateToString(*((_DWORD *)v16 + 2));
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v44, &v31);
        int v45 = v44;
        char v46 = 1;
        uint64_t v74 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v73, (uint64_t)v41, 2, 1, 2);
        char v75 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)&v67, 4, 1, 2);
        for (uint64_t i = 0; i != -128; i -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v73[i]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v73[i + 8], v73[i]);
        }
        for (uint64_t j = 0; j != -64; j -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v44[j]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v44[j + 8], v44[j]);
        }
        for (uint64_t k = 0; k != -64; k -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v50[k]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v50[k + 8], v50[k]);
        }

        for (uint64_t m = 0; m != -64; m -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v58[m]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v58[m + 8], v58[m]);
        }
        if (v34 < 0) {
          operator delete(__p[0]);
        }
        for (uint64_t n = 0; n != -64; n -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v64[n]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v64[n + 8], v64[n]);
        }
        uint64_t v22 = MEMORY[0x1E4F14500];
        id v23 = MEMORY[0x1E4F14500];
        uint64_t v1 = this;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
        {
          if (*((char *)this + 223) < 0) {
            std::string::__init_copy_ctor_external(&v67, *((const std::string::value_type **)this + 25), *((void *)this + 26));
          }
          else {
            std::string v67 = *(std::string *)((char *)this + 200);
          }
          int v24 = SHIBYTE(v67.__r_.__value_.__r.__words[2]);
          std::string::size_type v25 = v67.__r_.__value_.__r.__words[0];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v36, -1, 0x20u, 0, 0, v61);
          if (v24 >= 0) {
            uint64_t v26 = &v67;
          }
          else {
            uint64_t v26 = (std::string *)v25;
          }
          if (SHIBYTE(v62) >= 0) {
            char v27 = v61;
          }
          else {
            char v27 = (void **)v61[0];
          }
          *(_DWORD *)std::string buf = 136315394;
          __int16 v54 = v26;
          __int16 v55 = 2080;
          *(void *)__int16 v56 = v27;
          _os_log_fault_impl(&dword_1CFE2A000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "I/O state fault, File a radar against 'Audio Toolbox - Session': action: deactivate session: %s. details:%s", buf, 0x16u);
          if (SHIBYTE(v62) < 0) {
            operator delete(v61[0]);
          }
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
          uint64_t v22 = MEMORY[0x1E4F14500];
        }

        as::server::AudioSessionInfo::SetPlayerState((uint64_t)this, (uint64_t)*v16, *((_DWORD *)v16 + 3), 0, *((_DWORD *)v16 + 4));
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v36[0]);
        v16 += 3;
      }
      while (v16 != v28);
    }
  }
  as::server::ConstAudioSessionInfo::DisableMicrophoneMonitor(v1);
  if (v38)
  {
    uint64_t v39 = (char *)v38;
    operator delete(v38);
  }
}

void sub_1CFE780EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void as::server::ConstAudioSessionInfo::DisableMicrophoneMonitor(as::server::ConstAudioSessionInfo *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (caulk::platform *)*((unsigned int *)this + 22);
  int v3 = +[AVAudioMicrophoneMonitor sharedInstance];
  if (v3)
  {
    uint64_t v4 = *((unsigned int *)this + 2);
    caulk::platform::process_name(v2);
    if (v21[9] >= 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = *(unsigned char **)__p;
    }
    int v6 = [v3 setState:0 clientType:0 clientID:v4 clientDescription:v5];
    int v7 = v6;
    if ((v21[9] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (!v7) {
        goto LABEL_25;
      }
    }
    else if (!v6)
    {
      goto LABEL_25;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)__p, "microphone_state");
    *(void *)&void v21[2] = __p;
    v21[10] = 1;
    BYTE2(v23) = 4;
    v25[0] = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v23 + 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v23 + 2);
    v25[1] = (char *)&v23 + 2;
    char v26 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v27, (uint64_t)__p, 2, 1, 2);
    v27.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27;
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v17, (uint64_t)&v27, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27.__r_.__value_.__l.__size_, v27.__r_.__value_.__s.__data_[0]);
    for (uint64_t i = 0; i != -8; i -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v23 + i * 8 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v25[i], *((unsigned __int8 *)&v23 + i * 8 + 2));
    }
    uint64_t v10 = *(id *)as::server::gSessionServerLog(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)this + 223) < 0) {
        std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 25), *((void *)this + 26));
      }
      else {
        std::string v27 = *(std::string *)((char *)this + 200);
      }
      int v11 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      std::string::size_type v12 = v27.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v17, -1, 0x20u, 0, 0, v15);
      char v13 = &v27;
      if (v11 < 0) {
        char v13 = (std::string *)v12;
      }
      if (v16 >= 0) {
        long long v14 = v15;
      }
      else {
        long long v14 = (void **)v15[0];
      }
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "AudioSessionInfo.mm";
      __int16 v20 = 1024;
      *(_DWORD *)uint64_t v21 = 696;
      *(_WORD *)&v21[4] = 2080;
      *(void *)&v21[6] = "setMicrophoneMonitorState";
      __int16 v22 = 2080;
      id v23 = v13;
      __int16 v24 = 2080;
      v25[0] = v14;
      _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", __p, 0x30u);
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }

    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v18, v17[0]);
  }
LABEL_25:
}

void sub_1CFE785EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a13);
  _Unwind_Resume(a1);
}

void as::server::ConstAudioSessionInfo::CleanupCMSession(CFTypeRef *this)
{
  as::server::ConstAudioSessionInfo::DisableMicrophoneMonitor((as::server::ConstAudioSessionInfo *)this);
  CFTypeRef v2 = this[13];
  if (v2)
  {
    CFRetain(this[13]);
    CFTypeRef v3 = this[13];
    this[13] = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN2as6server21ConstAudioSessionInfo16CleanupCMSessionEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = v2;
    dispatch_async(v4, block);
  }
}

void ___ZN2as6server21ConstAudioSessionInfo16CleanupCMSessionEv_block_invoke(uint64_t a1)
{
}

uint64_t as::server::AudioSessionInfo::IsSessionInputMuted(as::server::AudioSessionInfo *this)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  {
    as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  if (!as::AudioSessionMuteEnabled(void)::enabled) {
    return *((unsigned __int8 *)this + 424);
  }
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, cf);
  if (!*(void *)cf)
  {
    __int16 v20 = MEMORY[0x1E4F14500];
    id v21 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)this + 223) < 0) {
        std::string::__init_copy_ctor_external(&v36, *((const std::string::value_type **)this + 25), *((void *)this + 26));
      }
      else {
        std::string v36 = *(std::string *)((char *)this + 200);
      }
      __int16 v22 = &v36;
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v22 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)CFTypeRef cf = 136315650;
      *(void *)&cf[4] = "AudioSessionInfo.mm";
      __int16 v30 = 1024;
      LODWORD(v31) = 707;
      WORD2(v31) = 2080;
      *(void *)((char *)&v31 + 6) = v22;
      _os_log_impl(&dword_1CFE2A000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Cannot get MXSessionRef for %s", cf, 0x1Cu);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D25E15C0](exception, "no valid mx session");
  }
  CFRelease(*(CFTypeRef *)cf);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)cf, "properties");
  *(void *)((char *)&v31 + 2) = cf;
  BYTE10(v31) = 1;
  id v2 = (id)*MEMORY[0x1E4F762F0];
  AudioSession::PropertyValueToJSON(v2, (uint64_t)&__p);
  BYTE2(v32) = (_BYTE)__p;
  v34[0] = v25;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  LOBYTE(__p) = 0;
  std::string::size_type v25 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32 + 2);
  v34[1] = (char *)&v32 + 2;
  char v35 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v36, (uint64_t)cf, 2, 1, 2);
  v36.__r_.__value_.__r.__words[2] = (std::string::size_type)&v36;
  char v37 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v27, (uint64_t)&v36, 1, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36.__r_.__value_.__l.__size_, v36.__r_.__value_.__s.__data_[0]);
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32 + i * 8 + 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v34[i], *((unsigned __int8 *)&v32 + i * 8 + 2));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, __p);

  long long v5 = *(id *)as::server::gSessionServerLog(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)this + 223) < 0) {
      std::string::__init_copy_ctor_external(&v36, *((const std::string::value_type **)this + 25), *((void *)this + 26));
    }
    else {
      std::string v36 = *(std::string *)((char *)this + 200);
    }
    int v7 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
    std::string::size_type v8 = v36.__r_.__value_.__r.__words[0];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v27, -1, 0x20u, 0, 0, &__p);
    CFStringRef v9 = &v36;
    if (v7 < 0) {
      CFStringRef v9 = (std::string *)v8;
    }
    if (v26 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)CFTypeRef cf = 136316162;
    *(void *)&cf[4] = "AudioSessionInfo.mm";
    __int16 v30 = 1024;
    LODWORD(v31) = 713;
    WORD2(v31) = 2080;
    *(void *)((char *)&v31 + 6) = "get_properties";
    HIWORD(v31) = 2080;
    uint64_t v32 = v9;
    __int16 v33 = 2080;
    v34[0] = p_p;
    _os_log_impl(&dword_1CFE2A000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
    if (v26 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }

  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, cf);
  id v11 = *(id *)cf;
  std::string::size_type v12 = v11;
  if (v11)
  {
    CFRelease(v11);
    v36.__r_.__value_.__r.__words[0] = 0;
    char v13 = (as::server *)[v12 copyPropertyForKey:v2 valueOut:&v36];
    int v14 = (int)v13;
    if (v13 || (char v13 = (as::server *)v36.__r_.__value_.__r.__words[0]) == 0)
    {
      long long v15 = *(id *)as::server::gSessionServerLog(v13);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = *((_DWORD *)this + 2);
        *(_DWORD *)CFTypeRef cf = 136315906;
        *(void *)&cf[4] = "AudioSessionInfo.mm";
        __int16 v30 = 1024;
        LODWORD(v31) = 726;
        WORD2(v31) = 1024;
        *(_DWORD *)((char *)&v31 + 6) = v16;
        WORD5(v31) = 1024;
        HIDWORD(v31) = v14;
        _os_log_impl(&dword_1CFE2A000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get input mute state for session id: 0x%x with error %d", cf, 0x1Eu);
      }
      char v13 = (as::server *)v36.__r_.__value_.__r.__words[0];
    }
    uint64_t v6 = [(as::server *)v13 BOOLValue];
  }
  else
  {
    int v17 = *(id *)as::server::gSessionServerLog(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = *((_DWORD *)this + 2);
      *(_DWORD *)CFTypeRef cf = 136315650;
      *(void *)&cf[4] = "AudioSessionInfo.mm";
      __int16 v30 = 1024;
      LODWORD(v31) = 717;
      WORD2(v31) = 1024;
      *(_DWORD *)((char *)&v31 + 6) = v18;
      _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get MX session for session id: 0x%x", cf, 0x18u);
    }
    uint64_t v6 = 0;
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
  return v6;
}

void sub_1CFE78CE8(_Unwind_Exception *a1)
{
}

uint64_t as::server::AudioSessionInfo::SetSessionInputMuted(as::server::AudioSessionInfo *this, int a2)
{
  {
    as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::AudioSessionMuteEnabled(void)::enabled)
  {
    if (as::server::AudioSessionInfo::IsSessionInputMuted(this) == a2)
    {
      return 0;
    }
    else
    {
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, &v9);
      id v5 = v9;
      uint64_t v6 = v5;
      if (v5)
      {
        CFRelease(v5);
        int v7 = [NSNumber numberWithBool:a2 != 0];
        uint64_t v4 = [v6 setPropertyForKey:*MEMORY[0x1E4F762F0] value:v7];
      }
      else
      {
        uint64_t v4 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    *((unsigned char *)this + 424) = a2;
  }
  return v4;
}

void sub_1CFE78F10(_Unwind_Exception *a1)
{
}

void as::server::AudioSessionInfo::SetPickedRouteAtTimeOfInterruption(uint64_t a1, id **a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  CFTypeRef v3 = (id **)(a1 + 336);
  uint64_t v4 = *a2;
  *a2 = 0;
  id v5 = std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)(a1 + 336), v4);
  if (*(void *)(a1 + 336))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)buf, "cached_route");
    *(void *)&void v27[2] = buf;
    v27[10] = 1;
    uint64_t v6 = (OS::CF *)applesauce::dispatch::v1::queue::operator*(*v3);
    OS::CF::ToJSON(v6, (uint64_t)&__p);
    BYTE2(v29) = (_BYTE)__p;
    v31[0] = v20;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    LOBYTE(__p) = 0;
    __int16 v20 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29 + 2);
    v31[1] = (char *)&v29 + 2;
    char v32 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33, (uint64_t)buf, 2, 1, 2);
    v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v33;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v22, (uint64_t)&v33, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33.__r_.__value_.__l.__size_, v33.__r_.__value_.__s.__data_[0]);
    for (uint64_t i = 0; i != -8; i -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29 + i * 8 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v31[i], *((unsigned __int8 *)&v29 + i * 8 + 2));
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, __p);
    id v9 = *(id *)as::server::gSessionServerLog(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 223) < 0) {
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a1 + 200), *(void *)(a1 + 208));
      }
      else {
        std::string v33 = *(std::string *)(a1 + 200);
      }
      int v11 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      std::string::size_type v12 = v33.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v22, -1, 0x20u, 0, 0, &__p);
      char v13 = &v33;
      if (v11 < 0) {
        char v13 = (std::string *)v12;
      }
      if (v21 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)std::string buf = 136316162;
      std::string::size_type v25 = "AudioSessionInfo.mm";
      __int16 v26 = 1024;
      *(_DWORD *)std::string v27 = 769;
      *(_WORD *)&v27[4] = 2080;
      *(void *)&v27[6] = "record_picked_route";
      __int16 v28 = 2080;
      uint64_t v29 = v13;
      __int16 v30 = 2080;
      v31[0] = p_p;
      _os_log_impl(&dword_1CFE2A000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (v21 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
    }

    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
  }
  else
  {
    uint64_t v10 = *(id *)as::server::gSessionServerLog((as::server *)v5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 223) < 0) {
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a1 + 200), *(void *)(a1 + 208));
      }
      else {
        std::string v33 = *(std::string *)(a1 + 200);
      }
      int v15 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      std::string::size_type v16 = v33.__r_.__value_.__r.__words[0];
      v22[0] = 0;
      id v23 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v22, -1, 0x20u, 0, 0, &__p);
      int v17 = &v33;
      if (v15 < 0) {
        int v17 = (std::string *)v16;
      }
      if (v21 >= 0) {
        int v18 = &__p;
      }
      else {
        int v18 = __p;
      }
      *(_DWORD *)std::string buf = 136316162;
      std::string::size_type v25 = "AudioSessionInfo.mm";
      __int16 v26 = 1024;
      *(_DWORD *)std::string v27 = 772;
      *(_WORD *)&v27[4] = 2080;
      *(void *)&v27[6] = "clear_picked_route";
      __int16 v28 = 2080;
      uint64_t v29 = v17;
      __int16 v30 = 2080;
      v31[0] = v18;
      _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_INFO, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (v21 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1CFE79370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioSessionInfo::CachedStateString@<X0>(as::server::AudioSessionInfo *this@<X0>, void *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"state: ", 7);
  uint64_t v5 = *((int *)this + 98);
  if (v5 >= 3)
  {
    uint64_t v20 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v20);
  }
  uint64_t v6 = v4;
  int v7 = off_1E6875BA8[v5];
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if (*((_DWORD *)this + 98) == 2)
  {
    id v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)" by ", 4);
    int v10 = *((char *)this + 423);
    if (v10 >= 0) {
      int v11 = (char *)this + 400;
    }
    else {
      int v11 = (char *)*((void *)this + 50);
    }
    if (v10 >= 0) {
      uint64_t v12 = *((unsigned __int8 *)this + 423);
    }
    else {
      uint64_t v12 = *((void *)this + 51);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)", category: ", 12);
  char v13 = *((unsigned char *)this + 367);
  if (v13 < 0)
  {
    if (*((void *)this + 44)) {
      goto LABEL_12;
    }
LABEL_20:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"(not set/unknown)", 17);
    goto LABEL_21;
  }
  if (!*((unsigned char *)this + 367)) {
    goto LABEL_20;
  }
LABEL_12:
  if (v13 >= 0) {
    int v14 = (char *)this + 344;
  }
  else {
    int v14 = (char *)*((void *)this + 43);
  }
  if (v13 >= 0) {
    uint64_t v15 = *((unsigned __int8 *)this + 367);
  }
  else {
    uint64_t v15 = *((void *)this + 44);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)v14, v15);
LABEL_21:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)", mode: ", 8);
  char v16 = *((unsigned char *)this + 391);
  if (v16 < 0)
  {
    if (*((void *)this + 47)) {
      goto LABEL_23;
    }
  }
  else if (*((unsigned char *)this + 391))
  {
LABEL_23:
    if (v16 >= 0) {
      int v17 = (char *)this + 368;
    }
    else {
      int v17 = (char *)*((void *)this + 46);
    }
    if (v16 >= 0) {
      uint64_t v18 = *((unsigned __int8 *)this + 391);
    }
    else {
      uint64_t v18 = *((void *)this + 47);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)v17, v18);
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"(not set/unknown)", 17);
LABEL_32:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v22, a2);
  uint64_t v21 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v22[-1] + *(void *)(v21 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v22[0] = MEMORY[0x1E4FBA470] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D25E17C0](&v24);
}

void sub_1CFE796C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25E17C0](a1 + 112);
  return a1;
}

uint64_t as::server::AudioSessionInfo::PlayStateString@<X0>(void *a1@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" running inputs, ", 17);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" running outputs, ", 18);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" running processors, ", 21);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" active nodes", 13);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9, a1);
  uint64_t v8 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v9[-1] + *(void *)(v8 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v9[0] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D25E17C0](&v11);
}

void sub_1CFE79974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void as::server::AudioSessionInfo::DebugStateStrings(as::server::AudioSessionInfo *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  as::server::AudioSessionInfo::CachedStateString(this, __p);
  unint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= v3)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(void *)a2) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)a2) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v9) {
      char v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>(a2 + 16, v9);
    }
    else {
      char v10 = 0;
    }
    uint64_t v11 = v10 + v6;
    __v.__first_ = v10;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = &v10[v9];
    long long v12 = *(_OWORD *)__p;
    v11->__r_.__value_.__r.__words[2] = v28;
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    __p[1] = 0;
    std::string::size_type v28 = 0;
    __p[0] = 0;
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    uint64_t v13 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v14 = SHIBYTE(v28);
    *(void *)(a2 + 8) = v13;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v5 = *(_OWORD *)__p;
    *(void *)(v4 + 16) = v28;
    *(_OWORD *)unint64_t v4 = v5;
    *(void *)(a2 + 8) = v4 + 24;
  }
  as::server::AudioSessionInfo::PlayStateString(__p);
  unint64_t v16 = *(void *)(a2 + 8);
  unint64_t v15 = *(void *)(a2 + 16);
  if (v16 >= v15)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a2) >> 3);
    unint64_t v19 = v18 + 1;
    if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a2) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x555555555555555) {
      unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v21 = v19;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v21) {
      __int16 v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>(a2 + 16, v21);
    }
    else {
      __int16 v22 = 0;
    }
    char v23 = v22 + v18;
    __v.__first_ = v22;
    __v.__begin_ = v23;
    __v.__end_cap_.__value_ = &v22[v21];
    long long v24 = *(_OWORD *)__p;
    v23->__r_.__value_.__r.__words[2] = v28;
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
    __p[1] = 0;
    std::string::size_type v28 = 0;
    __p[0] = 0;
    __v.__end_ = v23 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    uint64_t v25 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v26 = SHIBYTE(v28);
    *(void *)(a2 + 8) = v25;
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v17 = *(_OWORD *)__p;
    *(void *)(v16 + 16) = v28;
    *(_OWORD *)unint64_t v16 = v17;
    *(void *)(a2 + 8) = v16 + 24;
  }
}

void sub_1CFE79BE0(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

uint64_t as::server::AudioSessionInfo::IsInterrupted(as::server::AudioSessionInfo *this)
{
  return *((unsigned __int8 *)this + 313);
}

void as::server::AudioSessionInfo::SetInterrupted(as::server::AudioSessionInfo *this, int a2, const __CFString *a3)
{
  char v4 = a2;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a2 && *((unsigned char *)this + 313) == 1)
  {
    unint64_t v6 = *(id *)as::server::gSessionServerLog(this);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 136315394;
      long long v12 = "AudioSessionInfo.mm";
      __int16 v13 = 1024;
      int v14 = 873;
      _os_log_impl(&dword_1CFE2A000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session interrupt stopped", (uint8_t *)&v11, 0x12u);
    }
    unint64_t v7 = this;
    int v8 = 0;
    CFStringRef v9 = 0;
LABEL_11:
    as::server::AudioSessionInfo::SetCachedActivationState((uint64_t)v7, v8, v9);
    goto LABEL_12;
  }
  if (a2 == 1 && !*((unsigned char *)this + 313))
  {
    char v10 = *(id *)as::server::gSessionServerLog(this);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 136315394;
      long long v12 = "AudioSessionInfo.mm";
      __int16 v13 = 1024;
      int v14 = 876;
      _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session interrupt started", (uint8_t *)&v11, 0x12u);
    }
    unint64_t v7 = this;
    int v8 = 2;
    CFStringRef v9 = a3;
    goto LABEL_11;
  }
LABEL_12:
  *((unsigned char *)this + 313) = v4;
}

uint64_t as::server::AudioSessionInfo::SetSiblingPlayerState(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  unint64_t v39 = a2;
  if ((a4 & 2) == 0) {
    as::server::AudioSessionInfo::SetSiblingPlayerState();
  }
  if ((a6 & 0x71756575) == 0) {
    as::server::AudioSessionInfo::SetSiblingPlayerState();
  }
  char v10 = (uint64_t **)(a1 + 480);
  for (uint64_t i = *(void **)(a1 + 488); i; uint64_t i = (void *)*i)
  {
    unint64_t v12 = i[4];
    if (v12 <= a2)
    {
      if (v12 >= a2) {
        goto LABEL_9;
      }
      ++i;
    }
  }
  char v40 = &v39;
  __int16 v13 = std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::__emplace_unique_key_args<void const*,std::piecewise_construct_t const&,std::tuple<void const* const&>,std::tuple<>>((uint64_t **)(a1 + 480), &v39, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
  std::vector<as::server::AudioSessionInfo::PlayerState>::__assign_with_size[abi:ne180100]<as::server::AudioSessionInfo::PlayerState const*,as::server::AudioSessionInfo::PlayerState const*>((char *)v13 + 40, 0, 0, 0);
LABEL_9:
  int v14 = (void **)std::map<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>::at((uint64_t)v10, &v39);
  uint64_t v15 = v14;
  unint64_t v16 = *v14;
  long long v17 = (char *)v14[1];
  if (*v14 == v17)
  {
LABEL_13:
    if (!a5) {
      goto LABEL_36;
    }
    uint64_t v19 = (uint64_t)(v14 + 2);
    unint64_t v20 = (char *)v15[2];
    if (v17 >= v20)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3);
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v16) >> 3);
      uint64_t v24 = 2 * v23;
      if (2 * v23 <= v22 + 1) {
        uint64_t v24 = v22 + 1;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25) {
        int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>(v19, v25);
      }
      else {
        int v26 = 0;
      }
      __int16 v30 = &v26[24 * v22];
      long long v31 = &v26[24 * v25];
      *(void *)__int16 v30 = a3;
      *((_DWORD *)v30 + 2) = a5;
      *((_DWORD *)v30 + 3) = a4;
      *((_DWORD *)v30 + 4) = a6;
      long long v17 = v30 + 24;
      std::string v33 = (char *)*v15;
      char v32 = (char *)v15[1];
      if (v32 != *v15)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 24);
          *((_DWORD *)v30 - 2) = *((_DWORD *)v32 - 2);
          *(_OWORD *)(v30 - 24) = v34;
          v30 -= 24;
          v32 -= 24;
        }
        while (v32 != v33);
        char v32 = (char *)*v15;
      }
      NSObject *v15 = v30;
      v15[1] = v17;
      void v15[2] = v31;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *(void *)long long v17 = a3;
      *((_DWORD *)v17 + 2) = a5;
      *((_DWORD *)v17 + 3) = a4;
      *((_DWORD *)v17 + 4) = a6;
      v17 += 24;
    }
  }
  else
  {
    uint64_t v18 = 0;
    while (*(void *)&v16[v18] != a3)
    {
      v18 += 24;
      if (&v16[v18] == v17) {
        goto LABEL_13;
      }
    }
    if (a5)
    {
      unint64_t v21 = &v16[v18];
      *((_DWORD *)v21 + 2) = a5;
      *((_DWORD *)v21 + 3) = a4;
      goto LABEL_36;
    }
    std::string v27 = &v16[v18];
    std::string::size_type v28 = &v16[v18 + 24];
    int64_t v29 = v17 - v28;
    if (v17 != v28) {
      memmove(&v16[v18], v28, v29 - 4);
    }
    long long v17 = &v27[v29];
  }
  v15[1] = v17;
LABEL_36:
  uint64_t v35 = (char *)*v15;
  if (*v15 == v17)
  {
    uint64_t v36 = 0;
  }
  else
  {
    LODWORD(v36) = 0;
    do
    {
      if (*((_DWORD *)v35 + 2) == 1) {
        uint64_t v36 = (v36 + 1);
      }
      else {
        uint64_t v36 = v36;
      }
      v35 += 24;
    }
    while (v35 != v17);
  }
  char v40 = &v39;
  char v37 = std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::__emplace_unique_key_args<void const*,std::piecewise_construct_t const&,std::tuple<void const* const&>,std::tuple<>>(v10, &v39, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
  if (v37[5] == v37[6]) {
    std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::__erase_unique<void const*>((uint64_t)v10, &v39);
  }
  return v36;
}

void *std::map<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>::at(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  unint64_t v3 = *a2;
  while (1)
  {
    while (1)
    {
      unint64_t v4 = v2[4];
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (void *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (void *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t as::server::ConstAudioSessionInfo::PrintObject(as::server::ConstAudioSessionInfo *this, __sFILE *a2)
{
  uint64_t v2 = (char *)this + 176;
  if (*((char *)this + 199) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  return fprintf(a2, "<AudioSessionInfo@%p %s>", this, v2);
}

BOOL TOpaqueObject<as::server::AudioSessionInfo,as::server::OpaqueAudioSession *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<as::server::AudioSessionInfo>::sRTTI || a2 == &BaseOpaqueObject::sBaseRTTI;
}

void ___ZN12_GLOBAL__N_122GetCFNotificationNamesEv_block_invoke()
{
}

void sub_1CFE7A1A8(_Unwind_Exception *a1)
{
  MEMORY[0x1D25E1860](v1, 0xC0C40307D0248);
  _Unwind_Resume(a1);
}

void std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

void OS::CF::String::~String(OS::CF::String *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1D25E1860);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    long long v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1CFE7A338(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begiuint64_t n = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<char>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      long long v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        long long v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

char *std::vector<as::server::AudioSessionInfo::PlayerState>::__assign_with_size[abi:ne180100]<as::server::AudioSessionInfo::PlayerState const*,as::server::AudioSessionInfo::PlayerState const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<as::server::AudioSessionInfo::PlayerState>::__vallocate[abi:ne180100](v7, v12);
    long long v14 = (char *)v7[1];
    char v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 4;
      uint64_t v19 = v9;
      unint64_t v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  char v13 = (void **)(result + 8);
  long long v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9 - 4);
    uint64_t v9 = (char *)*v13;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 4;
    uint64_t v19 = v9;
    unint64_t v20 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *char v13 = &v9[v17];
  return result;
}

char *std::vector<as::server::AudioSessionInfo::PlayerState>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 += 16;
  }
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<as::server::AudioSessionInfo> *,std::weak_ptr<as::server::AudioSessionInfo> *,std::weak_ptr<as::server::AudioSessionInfo> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  long long v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)long long v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::__shared_ptr_emplace<as::server::LocalMXPropertyCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26885C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::LocalMXPropertyCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26885C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25E1860);
}

void std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::__emplace_unique_key_args<void const*,std::piecewise_construct_t const&,std::tuple<void const* const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  long long v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    void v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::__erase_unique<void const*>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      long long v7 = v2;
    }
    else {
      long long v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  unint64_t v3 = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(a1, a2);
  uint64_t v4 = (void *)a2[5];
  if (v4)
  {
    a2[6] = (uint64_t)v4;
    operator delete(v4);
  }
  operator delete(a2);
  return v3;
}

void AudioSession::GetCMSessionErrorString(AudioSession *this@<X0>, void *a2@<X8>)
{
  if (!(!v3 & v2))
  {
    switch(this)
    {
      case 0xFFFFCD43:
        unint64_t v5 = "Operation denied. Siri is recording";
        goto LABEL_26;
      case 0xFFFFCD44:
        unint64_t v5 = "Missing entitlement";
        goto LABEL_26;
      case 0xFFFFCD45:
        unint64_t v5 = "Operation ignored";
        goto LABEL_26;
      case 0xFFFFCD46:
        unint64_t v5 = "Not routable";
        goto LABEL_26;
      case 0xFFFFCD47:
        unint64_t v5 = "Operation denied. Cannot interrupt others";
        goto LABEL_26;
      case 0xFFFFCD48:
        goto LABEL_9;
      case 0xFFFFCD49:
        unint64_t v5 = "Insufficient priority";
        goto LABEL_26;
      case 0xFFFFCD4A:
        unint64_t v5 = "Allocation failed";
        goto LABEL_26;
      case 0xFFFFCD4B:
        goto LABEL_10;
      case 0xFFFFCD4C:
        goto LABEL_11;
      default:
        JUMPOUT(0);
    }
  }
  switch(this)
  {
    case 0xFFFFC2B9:
      unint64_t v5 = "Operation Failed";
      goto LABEL_26;
    case 0xFFFFC2BA:
LABEL_12:
      unint64_t v5 = "Operation denied. Cannot start playing";
      goto LABEL_26;
    case 0xFFFFC2BB:
      unint64_t v5 = "Operation Denied";
      goto LABEL_26;
    case 0xFFFFC2BC:
LABEL_9:
      unint64_t v5 = "Unrecognized property";
      goto LABEL_26;
    case 0xFFFFC2BD:
LABEL_13:
      std::to_string(&v8, (int)this);
      BOOL v6 = std::string::insert(&v8, 0, "Unknown error code: ", 0x14uLL);
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      a2[2] = *((void *)&v6->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v8.__r_.__value_.__l.__data_);
      }
      return;
    case 0xFFFFC2BE:
LABEL_11:
      unint64_t v5 = "Missing required parameter";
      goto LABEL_26;
    case 0xFFFFC2BF:
LABEL_10:
      unint64_t v5 = "Invalid parameter";
      goto LABEL_26;
    case 0xFFFFC2C0:
      unint64_t v5 = "Memory Allocation Failed";
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(a2, v5);
      return;
    default:
      switch(this)
      {
        case 0xFFFFBDA9:
          unint64_t v5 = "Operation denied. IO currently running";
          goto LABEL_26;
        case 0xFFFFBDAA:
          unint64_t v5 = "Budget not available";
          goto LABEL_26;
        case 0xFFFFBDAB:
          unint64_t v5 = "Operation denied. Cannot start recording";
          goto LABEL_26;
        case 0xFFFFBDAC:
          goto LABEL_12;
        default:
          goto LABEL_13;
      }
  }
}

void sub_1CFE7ACA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(unsigned long long)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__shared_ptr_emplace<as::server::DeviceLatencyPoll::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2688628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::DeviceLatencyPoll::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2688628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25E1860);
}

void sub_1CFE7AE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE7AF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id as::server::TranslateSetter_HostProcessAttribution(void *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1CA48], "array", v3);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  obuint64_t j = v3;
  uint64_t v5 = [obj countByEnumeratingWithState:&v15 objects:v21 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v16;
    uint64_t v7 = *MEMORY[0x1E4F767D8];
    uint64_t v8 = *MEMORY[0x1E4F767C0];
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        v19[1] = v8;
        v20[0] = v10;
        v19[0] = v7;
        uint64_t v11 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a2 length:32];
        v20[1] = v11;
        uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:v19 count:2];
        [v4 addObject:v12];
      }
      uint64_t v5 = [obj countByEnumeratingWithState:&v15 objects:v21 count:16];
    }
    while (v5);
  }

  return v4;
}

void sub_1CFE7B0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void as::server::SetAudioControlQueue(id obj)
{
}

uint64_t as::server::GetVirtualAudioPlugin(as::server *this, unsigned int *a2)
{
  uint64_t v11 = @"com.apple.audio.CoreAudio.VirtualAudio";
  UInt32 ioDataSize = 32;
  *(void *)&inAddress.mSelector = 0x676C6F6270696269;
  inAddress.mElement = 0;
  long long outData = &v11;
  int v7 = 8;
  uint64_t v8 = this;
  int v9 = 4;
  LODWORD(result) = AudioObjectGetPropertyData(1u, &inAddress, 0, 0, &ioDataSize, &outData);
  if (*(_DWORD *)this) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = -50;
  }
  if (result) {
    return result;
  }
  else {
    return v4;
  }
}

uint64_t as::server::require_acq::MuteSessionInput(as::server::require_acq *this, const audit_token_t *a2, audit_token_t *a3, NSNumber *a4)
{
  *(void *)&v51[9] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a3;
  if (v6)
  {
    int v7 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v39, this, a2, 1);
    if (!v39)
    {
      uint64_t v14 = 561210739;
      long long v15 = *(id *)as::server::gSessionServerLog(v7);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)uint64_t v51 = "AudioSessionServerImp.mm";
        LOWORD(v51[2]) = 1024;
        *(_DWORD *)((char *)&v51[2] + 2) = 237;
        HIWORD(v51[3]) = 1024;
        v51[4] = this;
        _os_log_impl(&dword_1CFE2A000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
      }
      goto LABEL_52;
    }
    uint64_t v8 = [(audit_token_t *)v6 BOOLValue];
    int v9 = (unsigned int *)v39;
    if (!v39)
    {
      uint64_t v33 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v33);
    }
    uint64_t v10 = v40;
    if (v40)
    {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v11 = v9[22];
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      int v9 = (unsigned int *)v39;
      if (!v39)
      {
        uint64_t v34 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v34);
      }
      uint64_t v12 = v40;
      if (v40)
      {
        char v13 = 0;
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v11 = *((unsigned int *)v39 + 22);
    }
    char v13 = 1;
LABEL_13:
    int IsSessionInputMuted = as::server::AudioSessionInfo::IsSessionInputMuted((as::server::AudioSessionInfo *)v9);
    if ((v13 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    BOOL v17 = IsSessionInputMuted != 0;
    long long v18 = v39;
    if (!v39)
    {
      uint64_t v35 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v35);
    }
    uint64_t v19 = v40;
    if (v40)
    {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      id v20 = *((id *)v18 + 12);
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    else
    {
      id v20 = *((id *)v39 + 12);
    }
    {
      as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
    }
    unint64_t v21 = v39;
    if (as::AudioSessionMuteEnabled(void)::enabled)
    {
      if (!v39)
      {
        uint64_t v36 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v36);
      }
      uint64_t v22 = v40;
      if (v40)
      {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        int v23 = *((_DWORD *)v21 + 70);
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        if (!v23)
        {
          unint64_t v21 = v39;
          if (!v39)
          {
            uint64_t v24 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v24);
          }
          goto LABEL_46;
        }
      }
      else if (!*((_DWORD *)v39 + 70))
      {
LABEL_46:
        long long v31 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        as::server::AudioSessionInfo::SetSessionInputMuted(v21, v8);
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        uint64_t v14 = 0;
LABEL_51:

LABEL_52:
        as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v39);
        goto LABEL_53;
      }
    }
    else
    {
      if (!v39)
      {
        uint64_t v37 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v37);
      }
      unint64_t v25 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      as::server::AudioSessionInfo::SetSessionInputMuted(v21, v8);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
    }
    if (v39)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v39 + 158);
      char v41 = 0;
    }
    buf[0] = 1;
    v51[0] = 3974;
    *(_OWORD *)&v51[1] = this;
    *(void *)&v51[5] = 0;
    *(void *)&v51[7] = 0;
    kdebug_trace();
    int v26 = (as::server *)[v20 muteSessionInput:this clientPID:v11 muted:v8];
    uint64_t v14 = (uint64_t)v26;
    if (v26)
    {
      std::string v27 = *(id *)as::server::gSessionServerLog(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v28 = "unmuted";
        char v43 = "AudioSessionServerImp.mm";
        __int16 v44 = 1024;
        int v45 = 264;
        *(_DWORD *)int v42 = 136315906;
        if (v8) {
          std::string::size_type v28 = "muted";
        }
        __int16 v46 = 2080;
        unsigned __int8 v47 = v28;
        __int16 v48 = 2048;
        uint64_t v49 = (int)v14;
        _os_log_impl(&dword_1CFE2A000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set session input: %s, err: %ld", v42, 0x26u);
      }
      if (!v39 || (os_unfair_lock_lock((os_unfair_lock_t)v39 + 158), v41 = 1, (int64_t v29 = v39) == 0))
      {
        uint64_t v38 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v38);
      }
      __int16 v30 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      as::server::AudioSessionInfo::SetSessionInputMuted(v29, v17);
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
    }
    as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)buf);
    goto LABEL_51;
  }
  uint64_t v14 = 4294967246;
LABEL_53:

  return v14;
}

void sub_1CFE7B678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t as::server::forbid_acq::IsAudioAppAllInputSessionsMuted(as::server::forbid_acq *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(this);
  as::server::LegacySessionManager::FindAudioApplicationForSession(v2, v1, &v9);
  id v3 = v9;
  if (v9)
  {
    as::server::AudioApplicationInfo::GetProperty((uint64_t)v9, @"InputMute", 1634744890, (uint64_t)buf);
    id v4 = *(id *)&v12[4];
    uint64_t v5 = v4;
    if (!*(_DWORD *)buf && v4)
    {
      uint64_t v6 = [v4 BOOLValue];

      goto LABEL_9;
    }
  }
  int v7 = *(id *)as::server::gSessionServerLog(v3);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315650;
    *(void *)uint64_t v12 = "AudioSessionServerImp.mm";
    *(_WORD *)&unsigned __int8 v12[8] = 1024;
    *(_DWORD *)&v12[10] = 344;
    __int16 v13 = 1024;
    int v14 = v1;
    _os_log_impl(&dword_1CFE2A000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to get audio app input muted state for session: 0x%x", buf, 0x18u);
  }
  uint64_t v6 = 0;
LABEL_9:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v6;
}

void sub_1CFE7B888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t as::server::forbid_acq::MuteSessionInputsForAudioApp(as::server::forbid_acq *this, void *a2, NSNumber *a3)
{
  int v3 = (int)this;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v4);
    as::server::LegacySessionManager::FindAudioApplicationForSession(v6, v3, &v9);
    if (v9) {
      uint64_t v7 = as::server::AudioApplicationInfo::SetProperty(v9, @"InputMute", v5);
    }
    else {
      uint64_t v7 = 561210739;
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    uint64_t v7 = 4294967246;
  }

  return v7;
}

void sub_1CFE7B948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

id as::server::forbid_acq::SpatialPreferences(void *a1, uint64_t a2, const audit_token_t *a3)
{
  id v5 = a1;
  if (!v5)
  {
    uint64_t v19 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v19);
  }
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v27, a2, a3, 1);
  uint64_t v6 = v27;
  if (!v27)
  {
    uint64_t v20 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v20);
  }
  uint64_t v7 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = *((unsigned __int8 *)v6 + 448);
  if (*((unsigned char *)v6 + 448))
  {
    id v9 = *((id *)v6 + 55);
    if (!v7) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  id v9 = 0;
  if (v7) {
LABEL_7:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_8:
  if (!v8)
  {
    uint64_t v10 = v27;
    if (!v27)
    {
      uint64_t v21 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v21);
    }
    uint64_t v11 = v28;
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v10, &cf);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    else
    {
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v27, &cf);
    }
    __int16 v13 = as::server::forbid_acq::CopyCMSessionAudioMode((as::server::forbid_acq *)cf, v12);
    as::server::GetSpatialPreferences(v5, a2, v13, (uint64_t)&v24);
    int v14 = v27;
    if (!v27)
    {
      uint64_t v22 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v22);
    }
    uint64_t v15 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::AudioSessionInfo::SetSpatialPreferences((uint64_t)v14, v24);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    long long v16 = v27;
    if (!v27)
    {
      uint64_t v23 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v23);
    }
    BOOL v17 = v28;
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      *((unsigned char *)v16 + 432) = v25;
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    else
    {
      *((unsigned char *)v27 + 432) = v25;
    }
    id v9 = v24;

    if (cf) {
      CFRelease(cf);
    }
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v27);

  return v9;
}

void sub_1CFE7BB6C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, const void *);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va1);

  _Unwind_Resume(a1);
}

id anonymous namespace'::TranslateGetter_HostProcessAttribution(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v11;
    uint64_t v6 = *MEMORY[0x1E4F767D8];
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v3);
        }
        int v8 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "valueForKey:", v6, (void)v10);
        [v2 addObject:v8];
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  return v2;
}

void sub_1CFE7BD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id as::server::forbid_acq::SetPropertyMXOnAppSessions(long long *a1, _OWORD *a2, unsigned int a3, void *a4, void *a5)
{
  v49[1] = *MEMORY[0x1E4F143B8];
  id v9 = a4;
  long long v10 = a5;
  long long v11 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v10);
  long long v12 = a1[1];
  long long v34 = *a1;
  long long v35 = v12;
  LOBYTE(v36) = 1;
  *(_OWORD *)atoken.val = v34;
  *(_OWORD *)&atoken.val[4] = v12;
  HIDWORD(v36) = audit_token_to_pid(&atoken);
  long long v13 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v13;
  char v39 = 1;
  *(_OWORD *)v45.val = *(_OWORD *)atoken.val;
  *(_OWORD *)&v45.val[4] = v13;
  pid_t v40 = audit_token_to_pid(&v45);
  as::server::LegacySessionManager::FindAudioApplicationAndVerifyOwnership(v11, (const as::server::ProcessIdentity *)&v34, (const as::server::ProcessIdentity *)&atoken, a3, 1, (uint64_t)&v41);
  if (v41 && v43)
  {
    as::server::AudioApplicationInfo::GetSessions((os_unfair_lock_s *)v41, (uint64_t *)&atoken);
    *(void *)&long long v34 = 0;
    *((void *)&v34 + 1) = &v34;
    *(void *)&long long v35 = 0x3032000000;
    *((void *)&v35 + 1) = __Block_byref_object_copy_;
    uint64_t v36 = __Block_byref_object_dispose_;
    id v37 = 0;
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3321888768;
    void v29[2] = ___ZN2as6server10forbid_acq26SetPropertyMXOnAppSessionsERK13audit_token_tS4_jP8NSStringPU25objcproto14NSSecureCoding11objc_object_block_invoke;
    v29[3] = &unk_1F2688658;
    memset(v33, 0, sizeof(v33));
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__init_with_size[abi:ne180100]<std::shared_ptr<as::server::AudioSessionInfo>*,std::shared_ptr<as::server::AudioSessionInfo>*>(v33, *(void **)atoken.val, *(void **)&atoken.val[2], (uint64_t)(*(void *)&atoken.val[2] - *(void *)atoken.val) >> 4);
    id v14 = v9;
    id v30 = v14;
    uint64_t v15 = v10;
    long long v31 = v15;
    char v32 = &v34;
    long long v16 = (as::server *)MEMORY[0x1D25E1DE0](v29);
    BOOL v17 = as::server::GetAudioControlQueue(v16);
    as::server::DispatchBlock(v17, v16, 1, (uint64_t)"SetPropertyMXOnAppSessions", (uint64_t)"AudioSessionServerImp.mm", 602, 0, 0);

    long long v18 = *(void **)(*((void *)&v34 + 1) + 40);
    if (v18)
    {
      id v19 = v18;
    }
    else
    {
      int updated = as::server::AudioApplicationInfo::UpdateProperty((uint64_t)v41, v14, v15, 1836595770, 0);
      if (updated)
      {
        uint64_t v23 = NSString;
        uint64_t v24 = [NSString stringWithUTF8String:as::server::AudioApplicationInfo::DebugString((os_unfair_lock_s *)v41)];
        char v25 = [v23 stringWithFormat:@"Failed to update MX cache in audio application info (app: %@)", v24];

        int v26 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v46 = *MEMORY[0x1E4F28568];
        unsigned __int8 v47 = v25;
        std::string v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v47 forKeys:&v46 count:1];
        id v19 = [v26 errorWithDomain:*MEMORY[0x1E4F28760] code:updated userInfo:v27];
      }
      else
      {
        id v19 = 0;
      }
    }

    *(void *)v45.val = v33;
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    _Block_object_dispose(&v34, 8);

    *(void *)&long long v34 = &atoken;
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  }
  else
  {
    uint64_t v20 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v48 = *MEMORY[0x1E4F28568];
    v49[0] = @"Failed to verify AudioApp permissions";
    uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v49 forKeys:&v48 count:1];
    id v19 = [v20 errorWithDomain:*MEMORY[0x1E4F28760] code:1701737535 userInfo:v21];
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }

  return v19;
}

void sub_1CFE7C144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  *(void *)(v39 - 160) = v35;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 160));
  _Block_object_dispose(&a21, 8);

  a21 = (void **)&a27;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a21);
  std::tuple<std::shared_ptr<as::server::AudioApplicationInfo>,std::shared_ptr<as::server::AudioAppRemoteClient>>::~tuple((uint64_t)&a33);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void ___ZN2as6server10forbid_acq26SetPropertyMXOnAppSessionsERK13audit_token_tS4_jP8NSStringPU25objcproto14NSSecureCoding11objc_object_block_invoke(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v1 = (uint64_t *)a1[7];
  uint64_t v2 = (uint64_t *)a1[8];
  if (v1 == v2) {
    return;
  }
  while (1)
  {
    uint64_t v5 = *v1;
    uint64_t v4 = (std::__shared_weak_count *)v1[1];
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = *(unsigned int *)(v5 + 8);
    if (*(char *)(v5 + 223) < 0) {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v5 + 200), *(void *)(v5 + 208));
    }
    else {
      std::string v22 = *(std::string *)(v5 + 200);
    }
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef((CFTypeRef)v5, cf);
    uint64_t v7 = *(void *)cf;
    if (*(void *)cf) {
      CFRelease(*(CFTypeRef *)cf);
    }
    int v8 = (void *)a1[4];
    id v9 = (void *)a1[5];
    long long v10 = *(std::__shared_weak_count **)(v5 + 232);
    uint64_t v20 = *(void *)(v5 + 224);
    uint64_t v21 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v11 = as::server::require_acq::PrivateSetPropertyMX(v6, (uint64_t)&v22, v7, v8, v9, (uint64_t)&v20);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v11) {
      break;
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v22.__r_.__value_.__l.__data_);
      if (!v4) {
        goto LABEL_17;
      }
LABEL_16:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      goto LABEL_17;
    }
    if (v4) {
      goto LABEL_16;
    }
LABEL_17:
    v1 += 2;
    if (v1 == v2) {
      return;
    }
  }
  long long v12 = [NSString stringWithFormat:@"MXSessionSetProperty error setting (session: 0x%x) property: %@", v6, a1[4], v20];
  long long v13 = *(id *)as::server::gSessionServerLog(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = [(as::server *)v12 UTF8String];
    *(_DWORD *)CFTypeRef cf = 136315650;
    *(void *)&cf[4] = "AudioSessionServerImp.mm";
    __int16 v26 = 1024;
    int v27 = 594;
    __int16 v28 = 2080;
    uint64_t v29 = v14;
    _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", cf, 0x1Cu);
  }

  uint64_t v15 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v23 = *MEMORY[0x1E4F28568];
  uint64_t v24 = v12;
  long long v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v24 forKeys:&v23 count:1];
  uint64_t v17 = [v15 errorWithDomain:*MEMORY[0x1E4F28760] code:v11 userInfo:v16];
  uint64_t v18 = *(void *)(a1[6] + 8);
  id v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = v17;

  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1CFE7C4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_56c89_ZTSKNSt3__16vectorINS_10shared_ptrIN2as6server16AudioSessionInfoEEENS_9allocatorIS5_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0;
  return std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__init_with_size[abi:ne180100]<std::shared_ptr<as::server::AudioSessionInfo>*,std::shared_ptr<as::server::AudioSessionInfo>*>(v2, *(void **)(a2 + 56), *(void **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
}

void __destroy_helper_block_ea8_56c89_ZTSKNSt3__16vectorINS_10shared_ptrIN2as6server16AudioSessionInfoEEENS_9allocatorIS5_EEEE(uint64_t a1)
{
  id v1 = (void **)(a1 + 56);
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t as::server::require_acq::AudioSessionSilenceOutput(as::server::require_acq *this, uint64_t a2)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  __int16 v26 = @"flags";
  id v3 = [NSNumber numberWithUnsignedInt:a2];
  v27[0] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];

  uint64_t v5 = (as::server *)as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v18, this);
  uint64_t v6 = v18;
  if (v18)
  {
    uint64_t v7 = v19;
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = *(unsigned int *)(v6 + 88);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      uint64_t v9 = v18;
      if (!v18)
      {
        uint64_t v16 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v16);
      }
      long long v10 = v19;
      if (v19)
      {
        char v11 = 0;
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        char v11 = 1;
      }
    }
    else
    {
      long long v10 = 0;
      uint64_t v8 = *(unsigned int *)(v18 + 88);
      char v11 = 1;
      uint64_t v9 = v18;
    }
    id v13 = *(id *)(v9 + 96);
    if ((v11 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (!v13)
    {
      uint64_t v17 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v17);
    }
  }
  else
  {
    long long v12 = *(id *)as::server::gSessionServerLog(v5);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v21 = "AudioSessionServerImp.mm";
      __int16 v22 = 1024;
      int v23 = 631;
      __int16 v24 = 1024;
      int v25 = (int)this;
      _os_log_impl(&dword_1CFE2A000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
    }
    id v13 = 0;
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v6)
  {
    [v13 handleInterruptionWithID:this clientPID:v8 interruptionState:32769 interruptionInfo:v4];
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 561210739;
  }

  return v14;
}

void sub_1CFE7C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::AudioSessionServerInterruptDummyPlayers(as::server::require_acq *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v26, this);
  id v3 = v26;
  if (v26)
  {
    uint64_t v4 = v27;
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    int v5 = atomic_exchange((atomic_uchar *volatile)&v3[80], 0);
    uint64_t v6 = v26;
    if (!v26)
    {
      uint64_t v19 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v19);
    }
    uint64_t v7 = v27;
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    int v8 = atomic_exchange((atomic_uchar *volatile)&v6[82], 0);
    if ((v5 | v8))
    {
      uint64_t v9 = v26;
      if (!v26)
      {
        uint64_t v20 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v20);
      }
      long long v10 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v9[55]._os_unfair_lock_opaque) < 0) {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)&v9[50]._os_unfair_lock_opaque, *(void *)&v9[52]._os_unfair_lock_opaque);
      }
      else {
        std::string v25 = *(std::string *)&v9[50]._os_unfair_lock_opaque;
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      id v13 = *(id *)as::server::gSessionServerLog((as::server *)v7);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
        std::string::size_type v15 = v25.__r_.__value_.__r.__words[0];
        v21[0] = 0;
        __int16 v22 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v21, -1, 0x20u, 0, 0, __p);
        uint64_t v16 = &v25;
        if (v14 < 0) {
          uint64_t v16 = (std::string *)v15;
        }
        if (v24 >= 0) {
          uint64_t v17 = __p;
        }
        else {
          uint64_t v17 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136316162;
        uint64_t v30 = "AudioSessionServerImp.mm";
        __int16 v31 = 1024;
        int v32 = 664;
        __int16 v33 = 2080;
        long long v34 = "interrupt_dummy_players";
        __int16 v35 = 2080;
        uint64_t v36 = v16;
        __int16 v37 = 2080;
        uint64_t v38 = v17;
        _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
      }

      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
    }
    if (v26)
    {
      os_unfair_lock_unlock(v26 + 158);
      char v28 = 0;
    }
    if (v5) {
      as::server::require_acq::AudioSessionServerSetClientPlayState(this, v3[79]._os_unfair_lock_opaque, (AudioSession *)&v3[79], 3u, 0, 0, 0);
    }
    if (v8) {
      as::server::require_acq::AudioSessionServerSetClientPlayState(this, v6[81]._os_unfair_lock_opaque, (AudioSession *)&v6[81], 1u, 0, 0, 0);
    }
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 561210739;
    long long v12 = *(id *)as::server::gSessionServerLog(v2);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v30 = "AudioSessionServerImp.mm";
      __int16 v31 = 1024;
      int v32 = 652;
      __int16 v33 = 1024;
      LODWORD(v34) = this;
      _os_log_impl(&dword_1CFE2A000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Did not find matching audio session for session ID: 0x%x. Bailing.", buf, 0x18u);
    }
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&v26);
  return v11;
}

void sub_1CFE7CB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,os_unfair_lock_s *a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a21);
  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::SetPropertyLocal(AudioSession *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  int v8 = a4;
  {
    as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  if (!as::AudioSessionMuteEnabled(void)::enabled
    || ![v7 isEqualToString:@"MuteSessionInputs"])
  {
    uint64_t v11 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v42, a1, (const audit_token_t *)a2, 1);
    long long v12 = v42;
    if (!v42)
    {
      uint64_t v10 = 561210739;
      uint64_t v16 = *(id *)as::server::gSessionServerLog(v11);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)uint64_t v46 = "AudioSessionServerImp.mm";
        *(_WORD *)&v46[8] = 1024;
        *(_DWORD *)&v46[10] = 765;
        *(_WORD *)&v46[14] = 1024;
        *(_DWORD *)&v46[16] = a1;
        _os_log_impl(&dword_1CFE2A000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
      }
      goto LABEL_42;
    }
    id v13 = v43;
    if (v43)
    {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      int v14 = v42;
      std::string::size_type v15 = v12 + 81;
      if (!v42)
      {
LABEL_13:
        if ([v7 isEqualToString:@"RecordingFromRemoteInput"])
        {
          uint64_t v17 = v8;
          uint64_t v18 = v17;
          if (v17)
          {
            unsigned int v19 = [(audit_token_t *)v17 BOOLValue];
            buf[0] = 1;
            *(_DWORD *)uint64_t v46 = 3975;
            *(_OWORD *)&v46[4] = a1;
            *(void *)&v46[20] = 0;
            uint64_t v47 = 0;
            kdebug_trace();
            uint64_t v10 = as::server::require_acq::AudioSessionServerSetClientPlayState(a1, v15->_os_unfair_lock_opaque, (AudioSession *)v15, 1u, v19, 0, 0);
            if (!v10) {
              atomic_store(v19, (unsigned __int8 *)&v12[82]);
            }
            as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)buf);
          }
          else
          {
            uint64_t v10 = 4294967246;
          }
        }
        else if ([v7 isEqualToString:@"AS_HostProcessAttribution"])
        {
          uint64_t v20 = as::server::TranslateSetter_HostProcessAttribution(v8, a2);
          uint64_t v10 = as::server::require_acq::SetPropertyMX(a1, (const audit_token_t *)a2, (void *)*MEMORY[0x1E4F761B0], v20);
        }
        else
        {
          uint64_t v21 = (as::server::LegacySessionManager *)[v7 isEqualToString:@"PreferredMicrophoneInjectionMode"];
          if (v21)
          {
            __int16 v22 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v21);
            int v23 = [(audit_token_t *)v8 intValue];
            as::server::LegacySessionManager::SetPreferredMicrophoneInjectionMode(v22, v23, a1);
            char v24 = v42;
            if (!v42)
            {
              uint64_t v40 = _os_crash();
              as::server::require_acq::AudioSessionServerSetClientPlayState(v40);
            }
            std::string v25 = v43;
            if (v43)
            {
              atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
              id v26 = *(id *)&v24[24]._os_unfair_lock_opaque;
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            }
            else
            {
              id v26 = *(id *)&v42[24]._os_unfair_lock_opaque;
            }
            uint64_t v36 = objc_opt_respondsToSelector();
            if (v36)
            {
              __int16 v37 = *(id *)as::server::gSessionServerLog((as::server *)v36);
              if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)std::string buf = 136315906;
                *(void *)uint64_t v46 = "AudioSessionServerImp.mm";
                *(_WORD *)&v46[8] = 1024;
                *(_DWORD *)&v46[10] = 796;
                *(_WORD *)&v46[14] = 1024;
                *(_DWORD *)&v46[16] = v23;
                *(_WORD *)&v46[20] = 1024;
                *(_DWORD *)&v46[22] = a1;
                _os_log_impl(&dword_1CFE2A000, v37, OS_LOG_TYPE_INFO, "%25s:%-5d Updating audio toolbox about preferredMicrophoneInjectionMode to %d for session:0x%x", buf, 0x1Eu);
              }
              [v26 updateMicrophoneInjectionPreference:v23 forSession:a1];
            }
            else
            {
              uint64_t v38 = *(id *)as::server::gSessionServerLog((as::server *)v36);
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string buf = 136315906;
                *(void *)uint64_t v46 = "AudioSessionServerImp.mm";
                *(_WORD *)&v46[8] = 1024;
                *(_DWORD *)&v46[10] = 801;
                *(_WORD *)&v46[14] = 1024;
                *(_DWORD *)&v46[16] = v23;
                *(_WORD *)&v46[20] = 1024;
                *(_DWORD *)&v46[22] = a1;
                _os_log_impl(&dword_1CFE2A000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot update audio toolbox about preferredMicrophoneInjectionMode to %d for session:0x%x", buf, 0x1Eu);
              }
            }
          }
          else
          {
            int v27 = (as::server::LegacySessionManager *)[v7 isEqualToString:@"SubscribeToMicrophoneInjectionCapabilityChangeNotification"];
            if (!v27)
            {
              if ([v7 isEqualToString:@"MicrophoneInjectionIsEnabled"])
              {
                int v32 = (as::server::LegacySessionManager *)[(audit_token_t *)v8 BOOLValue];
                __int16 v33 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v32);
                as::server::LegacySessionManager::SetMicrophoneInjectionIsEnabled(v33, (uint64_t)v32);
                __int16 v35 = *(id *)as::server::gSessionServerLog(v34);
                if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)uint64_t v46 = "AudioSessionServerImp.mm";
                  *(_WORD *)&v46[8] = 1024;
                  *(_DWORD *)&v46[10] = 820;
                  *(_WORD *)&v46[14] = 1024;
                  *(_DWORD *)&v46[16] = v32;
                  *(_WORD *)&v46[20] = 1024;
                  *(_DWORD *)&v46[22] = a1;
                  _os_log_impl(&dword_1CFE2A000, v35, OS_LOG_TYPE_INFO, "%25s:%-5d Setting MicrophoneInjectionMode to %d for session:0x%x", buf, 0x1Eu);
                }
              }
              uint64_t v10 = 4294967246;
              goto LABEL_42;
            }
            char v28 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v27);
            long long v29 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v41.val = *(_OWORD *)a2;
            *(_OWORD *)&v41.val[4] = v29;
            as::server::LegacySessionManager::SubscribeToMicrophoneInjectionCapabilityChangeNotification(v28, &v41, (NSString *)v8);
            __int16 v31 = *(id *)as::server::gSessionServerLog(v30);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)std::string buf = 136315650;
              *(void *)uint64_t v46 = "AudioSessionServerImp.mm";
              *(_WORD *)&v46[8] = 1024;
              *(_DWORD *)&v46[10] = 814;
              *(_WORD *)&v46[14] = 2112;
              *(void *)&v46[16] = v8;
              _os_log_impl(&dword_1CFE2A000, v31, OS_LOG_TYPE_INFO, "%25s:%-5d Setting SubscribeToMicrophoneInjectionCapabilityChangeNotification for process:%@", buf, 0x1Cu);
            }
          }
          uint64_t v10 = 0;
        }
LABEL_42:
        as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&v42);
        goto LABEL_43;
      }
    }
    else
    {
      std::string::size_type v15 = v42 + 81;
      int v14 = v42;
    }
    os_unfair_lock_unlock(v14 + 158);
    char v44 = 0;
    goto LABEL_13;
  }
  uint64_t v10 = as::server::require_acq::MuteSessionInput(a1, (const audit_token_t *)a2, v8, v9);
LABEL_43:

  return v10;
}

void sub_1CFE7D1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::MuteAudioSessions(uint64_t a1, unsigned int **a2, const audit_token_t *a3)
{
  uint64_t v4 = *a2;
  id v3 = a2[1];
  if (*a2) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v3 == 0;
  }
  if (!v5) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v3)
  {
    uint64_t v8 = 4 * (void)v3;
    do
    {
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      uint64_t v9 = (as::server::require_acq *)*v4;
      uint64_t v10 = [NSNumber numberWithBool:a1];
      LODWORD(v9) = as::server::require_acq::MuteSessionInput(v9, a3, v10, v11);

      if (v9) {
        as::server::require_acq::MuteAudioSessions();
      }
      ++v4;
      v8 -= 4;
    }
    while (v8);
  }
  return 0;
}

void sub_1CFE7D344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

as::server *as::server::ff_acq::DeactivateSecureSession()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  {
    as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::OffloadActivationOffACQ(void)::enabled) {
    uint64_t v0 = (as::server *)MXSessionEndInterruption_WithSecTaskAndStatus();
  }
  else {
    uint64_t v0 = (as::server *)_MXSessionEndInterruption_WithSecTaskAndStatus();
  }
  id v1 = v0;
  if (v0)
  {
    uint64_t v2 = *(id *)as::server::gSessionServerLog(v0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315650;
      BOOL v5 = "AudioSessionServerImp.mm";
      __int16 v6 = 1024;
      int v7 = 853;
      __int16 v8 = 1024;
      int v9 = (int)v1;
      _os_log_impl(&dword_1CFE2A000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d MXSessionEndInterruption failed with code: %d", (uint8_t *)&v4, 0x18u);
    }
  }
  return v1;
}

void sub_1CFE7D49C(_Unwind_Exception *a1)
{
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<int &,int,0>(uint64_t a1, int *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = *a2;
  *(unsigned char *)a1 = 5;
  *(void *)(a1 + 8) = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t ___ZN2as6server6ff_acq35AudioSessionServerActivateWithFlagsEPU39objcproto28AVAudioSessionServerDelegate11objc_objectjRK13audit_token_tj_block_invoke(uint64_t a1)
{
  as::server::require_acq::AudioSessionServerSetClientPlayState((AudioSession *)*(unsigned int *)(a1 + 48), **(_DWORD **)(a1 + 40), *(AudioSession **)(a1 + 40), *(_DWORD *)(a1 + 52), 1u, 0, 0);
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  return [v2 setTelephonyClientSessionID:v3];
}

uint64_t as::server::ff_acq::AudioSessionServerDeactivateAndSetPriority(void *a1, uint64_t a2, as::server::AudioSessionInfoAccessor *a3, uint64_t a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  if (!v7)
  {
    uint64_t v32 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v32);
  }
  as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v37, a2);
  __int16 v8 = v37;
  if (v37)
  {
    int v9 = v38;
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v8, cf);
    uint64_t v11 = *(void *)cf;
    if (*(void *)cf) {
      CFRelease(*(CFTypeRef *)cf);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v11)
    {
      *(void *)CFTypeRef cf = 0;
      *(void *)&cf[8] = 0;
      int v12 = as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty(v11, (uint64_t)cf, (void *)*MEMORY[0x1E4F76118], MEMORY[0x1E4F1CC38]);
      id v13 = *(as::server **)&cf[8];
      if (*(void *)&cf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[8]);
      }
      if (v12)
      {
        int v14 = *(id *)as::server::gSessionServerLog(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFTypeRef cf = 136315650;
          *(void *)&cf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&unsigned char cf[12] = 1024;
          *(_DWORD *)&cf[14] = 1089;
          *(_WORD *)&cf[18] = 1024;
          *(_DWORD *)&cf[20] = v12;
          _os_log_impl(&dword_1CFE2A000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SetProperty of kCMSessionProperty_DoNotNotifyOtherSessionsOnNextInactive failed with code %d", cf, 0x18u);
        }
      }
      *(void *)CFTypeRef cf = 0;
      *(void *)&cf[8] = 0;
      int v15 = as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty(v11, (uint64_t)cf, (void *)*MEMORY[0x1E4F76120], MEMORY[0x1E4F1CC38]);
      uint64_t v16 = *(as::server **)&cf[8];
      if (*(void *)&cf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[8]);
      }
      if (v15)
      {
        uint64_t v17 = *(id *)as::server::gSessionServerLog(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFTypeRef cf = 136315650;
          *(void *)&cf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&unsigned char cf[12] = 1024;
          *(_DWORD *)&cf[14] = 1095;
          *(_WORD *)&cf[18] = 1024;
          *(_DWORD *)&cf[20] = v15;
          _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SetProperty of kCMSessionProperty_DoNotResetAudioCategoryOnNextInactive failed with code %d", cf, 0x18u);
        }
      }
      uint64_t v18 = (as::server *)as::server::ff_acq::AudioSessionServerDeactivateWithFlags(v7, a2, a3, 0);
      uint64_t v19 = (uint64_t)v18;
      if (!v18 || v18 == 560030580)
      {
        uint64_t v20 = [NSNumber numberWithUnsignedInt:a4];
        *(void *)CFTypeRef cf = 0;
        *(void *)&cf[8] = 0;
        uint64_t v19 = as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty(v11, (uint64_t)cf, (void *)*MEMORY[0x1E4F75FC8], v20);
        uint64_t v21 = *(as::server **)&cf[8];
        if (*(void *)&cf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[8]);
        }
        if (v19)
        {
          __int16 v22 = *(id *)as::server::gSessionServerLog(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CFTypeRef cf = 136315650;
            *(void *)&cf[4] = "AudioSessionServerImp.mm";
            *(_WORD *)&unsigned char cf[12] = 1024;
            *(_DWORD *)&cf[14] = 1112;
            *(_WORD *)&cf[18] = 1024;
            *(_DWORD *)&cf[20] = v19;
            _os_log_impl(&dword_1CFE2A000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SetProperty of kCMSessionProperty_ClientPriority failed with code %d", cf, 0x18u);
          }
        }

        goto LABEL_44;
      }
      uint64_t v30 = *(id *)as::server::gSessionServerLog(v18);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        goto LABEL_44;
      }
      *(_DWORD *)CFTypeRef cf = 136315650;
      *(void *)&cf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&unsigned char cf[12] = 1024;
      *(_DWORD *)&cf[14] = 1104;
      *(_WORD *)&cf[18] = 1024;
      *(_DWORD *)&cf[20] = v19;
      char v28 = "%25s:%-5d Deactivation of session failed with code %d";
      long long v29 = v30;
    }
    else
    {
      uint64_t v19 = 2003329396;
      int v27 = *(id *)as::server::gSessionServerLog(DefaultSubsessionRef);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        goto LABEL_44;
      }
      *(_DWORD *)CFTypeRef cf = 136315650;
      *(void *)&cf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&unsigned char cf[12] = 1024;
      *(_DWORD *)&cf[14] = 1077;
      *(_WORD *)&cf[18] = 1024;
      *(_DWORD *)&cf[20] = a2;
      char v28 = "%25s:%-5d Cannot get MXSessionRef for id: 0x%x";
      long long v29 = v27;
    }
    _os_log_impl(&dword_1CFE2A000, v29, OS_LOG_TYPE_ERROR, v28, cf, 0x18u);
    goto LABEL_44;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)cf, "sessionID");
  *(void *)&cf[16] = cf;
  cf[24] = 1;
  BYTE2(v41) = 6;
  unint64_t v43 = a2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v41 + 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v41 + 2);
  *(void *)char v44 = (char *)&v41 + 2;
  unsigned char v44[8] = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v45, (uint64_t)cf, 2, 1, 2);
  uint64_t v47 = &v45;
  char v48 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)&v45, 1, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v45);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v41 + i + 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v44[i - 8], *((unsigned __int8 *)&v41 + i + 2));
  }
  std::string v25 = *(id *)as::server::gSessionServerLog(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    audit_token_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v35, -1, 0x20u, 0, 0, __p);
    if (v34 >= 0) {
      id v26 = __p;
    }
    else {
      id v26 = (void **)__p[0];
    }
    *(_DWORD *)CFTypeRef cf = 136316418;
    *(void *)&cf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&unsigned char cf[12] = 1024;
    *(_DWORD *)&cf[14] = 1071;
    *(_WORD *)&cf[18] = 2080;
    *(void *)&cf[20] = "deactivate_and_set_priority";
    __int16 v40 = 2080;
    audit_token_t v41 = "Session lookup failed";
    __int16 v42 = 2080;
    unint64_t v43 = (unint64_t)&v45;
    *(_WORD *)char v44 = 2080;
    *(void *)&v44[2] = v26;
    _os_log_impl(&dword_1CFE2A000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x3Au);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(v45);
    }
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v36, v35[0]);
  uint64_t v19 = 561210739;
LABEL_44:
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }

  return v19;
}

void sub_1CFE7DB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

uint64_t as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (!v7) {
    goto LABEL_4;
  }
  objc_opt_class();
  __int16 v8 = v7;
  if (objc_opt_isKindOfClass())
  {

LABEL_4:
    __int16 v8 = 0;
  }
  uint64_t v9 = as::server::FFDependentACQ::SetPropertyMX(a1, v6, v8);

  return v9;
}

void sub_1CFE7DCC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::ff_acq::AudioSessionServerDeactivateWithFlags(void *a1, uint64_t a2, as::server::AudioSessionInfoAccessor *a3, unsigned int a4)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  if (!v7)
  {
    uint64_t v108 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v108);
  }
  strcpy(v144, "deactivate");
  __int16 v8 = (_anonymous_namespace_ *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v136, a2);
  if (!v136)
  {
    uint64_t v14 = 561210739;
    goto LABEL_160;
  }
  uint64_t v11 = v136;
  if (!v136)
  {
    uint64_t v109 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v109);
  }
  uint64_t v12 = ProxyProcessPID;
  id v13 = v137;
  if (v137) {
    atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v11[55]._os_unfair_lock_opaque) < 0) {
    std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)&v11[50]._os_unfair_lock_opaque, *(void *)&v11[52]._os_unfair_lock_opaque);
  }
  else {
    std::string v135 = *(std::string *)&v11[50]._os_unfair_lock_opaque;
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  int v15 = v136;
  if (!v136)
  {
    uint64_t v110 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v110);
  }
  uint64_t v16 = v137;
  if (v137) {
    atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v15, buf);
  uint64_t v18 = *(as::server::ff_acq **)buf;
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (!v18)
  {
    uint64_t v14 = 2003329396;
    int v27 = *(id *)as::server::gSessionServerLog(DefaultSubsessionRef);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1137;
      _os_log_impl(&dword_1CFE2A000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d No valid CMSession", buf, 0x12u);
    }
    goto LABEL_158;
  }
  uint64_t v19 = *(id *)as::server::gSessionServerLog(DefaultSubsessionRef);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = &v135;
    }
    else {
      uint64_t v20 = (std::string *)v135.__r_.__value_.__r.__words[0];
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v131, -1, 0x20u, 0, 0, __p);
    if (v134 >= 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1142;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v144;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v20;
    __int16 v140 = 2080;
    uint64_t v141 = (std::string *)v21;
    _os_log_impl(&dword_1CFE2A000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v134 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v132, v131[0]);
  }

  int v23 = v136;
  if (!v136)
  {
    uint64_t v111 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v111);
  }
  char v24 = v137;
  if (v137)
  {
    atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
    uint32_t os_unfair_lock_opaque = v23[23]._os_unfair_lock_opaque;
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    if (os_unfair_lock_opaque == 1935897189)
    {
      int v23 = v136;
      if (!v136) {
        goto LABEL_34;
      }
      goto LABEL_38;
    }
  }
  else if (v136[23]._os_unfair_lock_opaque == 1935897189)
  {
LABEL_38:
    os_unfair_lock_unlock(v23 + 158);
    char v138 = 0;
    char v28 = v136;
    if (!v136)
    {
LABEL_34:
      uint64_t v26 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v26);
    }
    long long v29 = v137;
    if (v137) {
      atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v28, &cf);
    uint64_t v14 = (uint64_t)as::server::ff_acq::DeactivateSecureSession();
    uint64_t v30 = (as::server *)cf;
    if (cf) {
      CFRelease(cf);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    __int16 v31 = *(id *)as::server::gSessionServerLog(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      int v32 = SHIBYTE(v135.__r_.__value_.__r.__words[2]);
      std::string::size_type v33 = v135.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v131, -1, 0x20u, 0, 0, __p);
      char v34 = &v135;
      if (v32 < 0) {
        char v34 = (std::string *)v33;
      }
      if (v134 >= 0) {
        __int16 v35 = __p;
      }
      else {
        __int16 v35 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1155;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v144;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&buf[30] = v34;
      __int16 v140 = 2080;
      uint64_t v141 = (std::string *)v35;
      _os_log_impl(&dword_1CFE2A000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (v134 < 0) {
        operator delete(__p[0]);
      }
    }

    goto LABEL_157;
  }
  CFTypeRef v129 = 0;
  if (as::server::ff_acq::GetInterruptionPriority(v18, v22))
  {
    uint64_t v36 = v136;
    if (!v136)
    {
      uint64_t v113 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v113);
    }
    __int16 v37 = v137;
    if (v137)
    {
      atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
      uint32_t v38 = v36[23]._os_unfair_lock_opaque;
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      if (v38 == 1935830119)
      {
        uint64_t v36 = v136;
        if (!v136)
        {
          uint64_t v39 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v39);
        }
LABEL_61:
        __int16 v40 = v137;
        if (v137)
        {
          atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v41 = *(_OWORD *)&v36[17]._os_unfair_lock_opaque;
          *(_OWORD *)std::string buf = *(_OWORD *)&v36[13]._os_unfair_lock_opaque;
          *(_OWORD *)&buf[16] = v41;
          int os_unfair_lock_opaque_low = LOBYTE(v36[21]._os_unfair_lock_opaque);
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          if (os_unfair_lock_opaque_low)
          {
LABEL_63:
            tokeuint64_t n = *(audit_token_t *)buf;
            SecTaskRef v43 = SecTaskCreateWithAuditToken(0, &token);
LABEL_65:
            SecTaskRef v45 = v43;
            goto LABEL_66;
          }
        }
        else
        {
          long long v107 = *(_OWORD *)&v36[17]._os_unfair_lock_opaque;
          *(_OWORD *)std::string buf = *(_OWORD *)&v36[13]._os_unfair_lock_opaque;
          *(_OWORD *)&buf[16] = v107;
          if (LOBYTE(v36[21]._os_unfair_lock_opaque)) {
            goto LABEL_63;
          }
        }
        SecTaskRef v45 = 0;
LABEL_66:
        CFTypeRef v129 = v45;
        if (!v45)
        {
          v125[0] = 0;
          v126 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v125);
          uint64_t v46 = (as::server *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v125);
          *(void *)std::string buf = v12;
          if ((v12 & 0xFF00000000) != 0)
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<int &,int,0>((uint64_t)v124, (int *)buf);
            uint64_t v47 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v125, "controlling_PID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v47, (uint64_t)v124);
            uint64_t v46 = (as::server *)nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v124);
          }
          char v48 = *(id *)as::server::gSessionServerLog(v46);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            int v49 = SHIBYTE(v135.__r_.__value_.__r.__words[2]);
            std::string::size_type v50 = v135.__r_.__value_.__r.__words[0];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v125, -1, 0x20u, 0, 0, __p);
            uint64_t v51 = &v135;
            if (v49 < 0) {
              uint64_t v51 = (std::string *)v50;
            }
            if (v134 >= 0) {
              char v52 = __p;
            }
            else {
              char v52 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136316418;
            *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1179;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = "set_activation_state";
            *(_WORD *)&unsigned char buf[28] = 2080;
            *(void *)&buf[30] = "could not get security task";
            __int16 v140 = 2080;
            uint64_t v141 = v51;
            __int16 v142 = 2080;
            v143 = v52;
            _os_log_impl(&dword_1CFE2A000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
            if (v134 < 0) {
              operator delete(__p[0]);
            }
          }

          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v125);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v126, v125[0]);
        }
        goto LABEL_78;
      }
    }
    else if (v136[23]._os_unfair_lock_opaque == 1935830119)
    {
      goto LABEL_61;
    }
    long long v44 = *((_OWORD *)a3 + 1);
    *(_OWORD *)v127.val = *(_OWORD *)a3;
    *(_OWORD *)&v127.val[4] = v44;
    SecTaskRef v43 = SecTaskCreateWithAuditToken(0, &v127);
    goto LABEL_65;
  }
LABEL_78:
  {
    as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::server::IsSessionActive(v18, (const void *)(as::OffloadActivationOffACQ(void)::enabled == 0)))
  {
    if (v136)
    {
      os_unfair_lock_unlock(v136 + 158);
      char v138 = 0;
    }
    uint64_t CMPlayState = as::server::ff_acq::GetCMPlayState(v18, v53);
    __int16 v55 = v136;
    if (!v136)
    {
      uint64_t v114 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v114);
    }
    uint64_t v14 = CMPlayState;
    __int16 v56 = v137;
    if (v137)
    {
      atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v57 = v55[22]._os_unfair_lock_opaque;
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    }
    else
    {
      uint64_t v57 = v136[22]._os_unfair_lock_opaque;
    }
    {
      if (v56)
      {
        as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
      }
    }
    if (as::OffloadActivationOffACQ(void)::enabled)
    {
      char v58 = as::server::GetAudioControlQueue((as::server *)v56);
      v120[0] = MEMORY[0x1E4F143A8];
      v120[1] = 3221225472;
      v120[2] = ___ZN2as6server6ff_acq37AudioSessionServerDeactivateWithFlagsEPU39objcproto28AVAudioSessionServerDelegate11objc_objectjRK13audit_token_tj_block_invoke;
      v120[3] = &unk_1E6875C10;
      id v121 = v7;
      int v122 = a2;
      int v123 = v57;
      as::server::DispatchBlock(v58, v120, 1, (uint64_t)"AudioSessionServerDeactivateWithFlags", (uint64_t)"AudioSessionServerImp.mm", 1214, 0, 0);
    }
    else
    {
      [v7 handleInterruptionWithID:a2 clientPID:v57 interruptionState:0 interruptionInfo:0];
    }
    if (v14)
    {
      char v60 = (as::server *)as::server::ff_acq::GetCMPlayState(v18, v59);
      unsigned __int8 v61 = *(id *)as::server::gSessionServerLog(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        int v62 = SHIBYTE(v135.__r_.__value_.__r.__words[2]);
        std::string::size_type v63 = v135.__r_.__value_.__r.__words[0];
        v125[0] = 0;
        v126 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v125);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v125);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v125, -1, 0x20u, 0, 0, __p);
        uint64_t v64 = &v135;
        if (v62 < 0) {
          uint64_t v64 = (std::string *)v63;
        }
        std::string v65 = (void **)__p[0];
        *(_DWORD *)std::string buf = 136316418;
        if (v134 >= 0) {
          std::string v65 = __p;
        }
        *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1230;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v144;
        *(_WORD *)&unsigned char buf[28] = 2080;
        *(void *)&buf[30] = "deactivating a session that has running I/Os";
        __int16 v140 = 2080;
        uint64_t v141 = v64;
        __int16 v142 = 2080;
        v143 = v65;
        _os_log_impl(&dword_1CFE2A000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
        if (v134 < 0) {
          operator delete(__p[0]);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v125);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v126, v125[0]);
      }

      std::string v67 = *(id *)as::server::gSessionServerLog(v66);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1235;
        _os_log_impl(&dword_1CFE2A000, v67, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session was active -- setting kCMSessionProperty_IsPlaying property to Stopped", buf, 0x12u);
      }

      *(void *)std::string buf = 0;
      *(void *)&buf[8] = 0;
      id v68 = (id)*MEMORY[0x1E4F762D8];
      int v69 = as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty((uint64_t)v18, (uint64_t)buf, v68, MEMORY[0x1E4F1CC28]);

      char v70 = *(as::server **)&buf[8];
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (v69)
      {
        __int16 v71 = *(id *)as::server::gSessionServerLog(v70);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1240;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v69;
          _os_log_impl(&dword_1CFE2A000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d Set property for kCMSessionProperty_IsPlaying failed with code: %d", buf, 0x18u);
        }
      }
      v118[0] = 4;
      uint64_t v119 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v118);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v118);
      char v72 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v131, "IsRecording");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v118);
      unsigned __int8 v73 = *(unsigned char *)v72;
      *(unsigned char *)char v72 = v118[0];
      v118[0] = v73;
      uint64_t v74 = (uint64_t *)v72[1];
      v72[1] = (uint64_t)v119;
      uint64_t v119 = v74;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v72);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v118);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v119, v118[0]);
      *(void *)std::string buf = 0;
      *(void *)&buf[8] = 0;
      id v75 = (id)*MEMORY[0x1E4F762E8];
      int v76 = as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty((uint64_t)v18, (uint64_t)buf, v75, MEMORY[0x1E4F1CC28]);

      uint64_t v77 = *(as::server **)&buf[8];
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (v76)
      {
        char v78 = *(id *)as::server::gSessionServerLog(v77);
        if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1247;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v76;
          _os_log_impl(&dword_1CFE2A000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d Set property for kCMSessionProperty_IsRecording failed with code: %d", buf, 0x18u);
        }
      }
      v116[0] = 4;
      char v117 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v116);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v116);
      std::string v79 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v131, "IsRecordingMuted");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v116);
      unsigned __int8 v80 = *(unsigned char *)v79;
      *(unsigned char *)std::string v79 = v116[0];
      v116[0] = v80;
      uint64_t v81 = (uint64_t *)v79[1];
      v79[1] = (uint64_t)v117;
      char v117 = v81;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v79);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v116);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v117, v116[0]);
      *(void *)std::string buf = 0;
      *(void *)&buf[8] = 0;
      id v82 = (id)*MEMORY[0x1E4F762F0];
      int v83 = as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty((uint64_t)v18, (uint64_t)buf, v82, MEMORY[0x1E4F1CC28]);

      unint64_t v84 = *(as::server **)&buf[8];
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      uint64_t v14 = 560030580;
      if (v83)
      {
        uint64_t v85 = *(id *)as::server::gSessionServerLog(v84);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1254;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v83;
          _os_log_impl(&dword_1CFE2A000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d Set property for kCMSessionProperty_IsRecordingMuted failed with code: %d", buf, 0x18u);
        }
      }
    }
    *(void *)std::string buf = 0;
    *(void *)&buf[8] = 0;
    id v86 = (id)*MEMORY[0x1E4F76190];
    int v87 = as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty((uint64_t)v18, (uint64_t)buf, v86, MEMORY[0x1E4F1CC28]);

    uint64_t v88 = *(as::server **)&buf[8];
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (v87)
    {
      uint64_t v89 = *(id *)as::server::gSessionServerLog(v88);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1261;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v87;
        _os_log_impl(&dword_1CFE2A000, v89, OS_LOG_TYPE_ERROR, "%25s:%-5d Set property for kCMSessionProperty_HapticEngineIsPlaying failed with code: %d", buf, 0x18u);
      }
    }
    {
      as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
    }
    if (as::OffloadActivationOffACQ(void)::enabled) {
      std::string v90 = (as::server *)MXSessionEndInterruption_WithSecTaskAndStatus();
    }
    else {
      std::string v90 = (as::server *)_MXSessionEndInterruption_WithSecTaskAndStatus();
    }
    int v91 = (int)v90;
    if (v90)
    {
      id v92 = *(id *)as::server::gSessionServerLog(v90);
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1278;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v91;
        _os_log_impl(&dword_1CFE2A000, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d MXSessionEndInterruption failed with code: %d", buf, 0x18u);
      }
    }
    if (!v136 || (os_unfair_lock_lock(v136 + 158), v138 = 1, (uint64_t v93 = v136) == 0))
    {
      uint64_t v115 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v115);
    }
    __int16 v94 = v137;
    if (v137) {
      atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::AudioSessionInfo::SetCachedActivationState((uint64_t)v93, 0, 0);
    if (v94) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v94);
    }
    __int16 v96 = as::server::LegacySessionManager::Instance(v95);
    v97 = (os_unfair_lock_s *)*((void *)v96 + 31);
    if (v97)
    {
      os_unfair_lock_lock(*((os_unfair_lock_t *)v96 + 31));
      as::server::DeviceTimeObserver::sessionIsActive((as::server::DeviceTimeObserver *)&v97[2], a2, 0);
      os_unfair_lock_unlock(v97);
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  __int16 v98 = (as::server::AudioSessionInfo *)v136;
  if (!v136)
  {
    uint64_t v112 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v112);
  }
  v99 = v137;
  if (v137) {
    atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  as::server::AudioSessionInfo::ResetAllPlayers(v98);
  if (v99) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v99);
  }
  std::string v101 = *(id *)as::server::gSessionServerLog(v100);
  if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
  {
    int v102 = SHIBYTE(v135.__r_.__value_.__r.__words[2]);
    std::string::size_type v103 = v135.__r_.__value_.__r.__words[0];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v131, -1, 0x20u, 0, 0, __p);
    char v104 = &v135;
    if (v102 < 0) {
      char v104 = (std::string *)v103;
    }
    if (v134 >= 0) {
      v105 = __p;
    }
    else {
      v105 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1294;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v144;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v104;
    __int16 v140 = 2080;
    uint64_t v141 = (std::string *)v105;
    _os_log_impl(&dword_1CFE2A000, v101, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v134 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v129) {
    CFRelease(v129);
  }
LABEL_157:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v132, v131[0]);
LABEL_158:
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v135.__r_.__value_.__l.__data_);
  }
LABEL_160:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&v136);

  return v14;
}

void sub_1CFE7EEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,const void *a34,uint64_t a35,uint64_t *a36)
{
  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a34);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a36);
  if (*(char *)(v37 - 217) < 0) {
    operator delete(*(void **)(v37 - 240));
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)(v37 - 216));

  _Unwind_Resume(a1);
}

uint64_t as::server::ff_acq::GetCMPlayState(as::server::ff_acq *this, const void *a2)
{
  as::server::MXAccessor<as::server::FFDependentACQ>::GetProperty((void *)*MEMORY[0x1E4F75F20], (uint64_t)&v6);
  uint64_t v2 = objc_msgSend(v7, "BOOLValue", 0);
  if (v6)
  {
    uint64_t v5 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v5);
  }
  uint64_t v3 = v2;

  return v3;
}

void sub_1CFE7F194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN2as6server6ff_acq37AudioSessionServerDeactivateWithFlagsEPU39objcproto28AVAudioSessionServerDelegate11objc_objectjRK13audit_token_tj_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleInterruptionWithID:*(unsigned int *)(a1 + 40) clientPID:*(unsigned int *)(a1 + 44) interruptionState:0 interruptionInfo:0];
}

void *std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__init_with_size[abi:ne180100]<std::shared_ptr<as::server::AudioSessionInfo>*,std::shared_ptr<as::server::AudioSessionInfo>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<as::server::AudioSessionInfo>>,std::shared_ptr<as::server::AudioSessionInfo>*,std::shared_ptr<as::server::AudioSessionInfo>*,std::shared_ptr<as::server::AudioSessionInfo>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1CFE7F23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<as::server::AudioSessionInfo>>,std::shared_ptr<as::server::AudioSessionInfo>*,std::shared_ptr<as::server::AudioSessionInfo>*,std::shared_ptr<as::server::AudioSessionInfo>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *int v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<as::server::AudioSessionInfo>>,std::shared_ptr<as::server::AudioSessionInfo>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<as::server::AudioSessionInfo>>,std::shared_ptr<as::server::AudioSessionInfo>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<as::server::AudioSessionInfo>>,std::shared_ptr<as::server::AudioSessionInfo>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<as::server::AudioSessionInfo>>,std::shared_ptr<as::server::AudioSessionInfo>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[57],char [57],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[57]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[57]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1CFE7F3EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t as::server::FFDependentACQ::SetPropertyMX(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  {
    as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::OffloadActivationOffACQ(void)::enabled) {
    uint64_t v6 = MXSessionSetProperty();
  }
  else {
    uint64_t v6 = _MXSessionSetProperty();
  }
  uint64_t v7 = v6;

  return v7;
}

void sub_1CFE7F4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CFE7F584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE7F610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor(uint64_t a1, os_unfair_lock_s **a2)
{
  uint64_t v3 = *a2;
  id v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v4[2], 1uLL, memory_order_relaxed);
    uint64_t v3 = *(os_unfair_lock_s **)a1;
  }
  *(unsigned char *)(a1 + 16) = 0;
  if (v3)
  {
    os_unfair_lock_lock(v3 + 158);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void sub_1CFE7F714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE7F7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL as::server::PickableRoute::ValidateDictionary(as::server::PickableRoute *this, NSDictionary *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = v2;
  BOOL v6 = 0;
  if (v2)
  {
    id v4 = [(as::server::PickableRoute *)v2 valueForKey:*MEMORY[0x1E4F76820]];
    if (v4)
    {
      id v5 = [(as::server::PickableRoute *)v3 valueForKey:*MEMORY[0x1E4F767F8]];

      if (v5) {
        BOOL v6 = 1;
      }
    }
  }

  return v6;
}

void sub_1CFE7F83C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

as::server::PickableRoute *as::server::PickableRoute::PickableRoute(as::server::PickableRoute *this, NSDictionary *a2)
{
  uint64_t v3 = a2;
  *(void *)this = v3;
  if (!as::server::PickableRoute::ValidateDictionary((as::server::PickableRoute *)v3, v4))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "bad input dictionary");
  }

  return this;
}

void sub_1CFE7F8DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);

  _Unwind_Resume(a1);
}

void as::server::PickableRoute::MakeUnique(as::server::PickableRoute *this, NSDictionary *a2)
{
}

void sub_1CFE7F978(void *a1)
{
  MEMORY[0x1D25E1860](v2, 0x80C40B8603338);
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1CFE7F950);
}

uint64_t as::server::PickableRoute::WasCurrentlyPickedRouted(id *this)
{
  uint64_t v1 = [*this objectForKey:*MEMORY[0x1E4F76818]];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

void sub_1CFE7F9FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::PickableRoute::IsPreferredExternalRoute(id *this)
{
  uint64_t v1 = [*this objectForKey:*MEMORY[0x1E4F76800]];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

void sub_1CFE7FA54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::PickableRoute::IsActivePreferredExternalRoute(id *this)
{
  uint64_t v1 = [*this objectForKey:*MEMORY[0x1E4F76808]];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

void sub_1CFE7FAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id as::server::GetPickableRoutesFromMX(as::server *this, const void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    id v5 = objc_opt_new();
    goto LABEL_15;
  }
  uint64_t v2 = MXSessionCopyProperty();
  strcpy(v15, "get_pickable_routes");
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  uint64_t v12 = 0;
  int v3 = as::server::TranslateCMSessionErrorCode((uint64_t)v15, (uint64_t *)&__p, 123, v2);
  int v4 = v3;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__p);
    if (v4) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v6 = MXSessionCopyProperty();
    std::string __p = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v7 = as::server::TranslateCMSessionErrorCode((uint64_t)v15, (uint64_t *)&__p, 132, v6);
    int v8 = v7;
    if (SHIBYTE(v13) < 0)
    {
      operator delete(__p);
      if (v8) {
        goto LABEL_9;
      }
    }
    else if (v7)
    {
LABEL_9:
      id v5 = objc_opt_new();
LABEL_13:

      goto LABEL_14;
    }
    uint64_t v9 = CMSessionMgrCopyPickableRoutesForCategoryAndMode();
    id v5 = 0;
    std::string __p = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    as::server::TranslateCMSessionErrorCode((uint64_t)v15, (uint64_t *)&__p, 141, v9);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p);
    }
    goto LABEL_13;
  }
  if (!v3) {
    goto LABEL_7;
  }
LABEL_4:
  id v5 = objc_opt_new();
LABEL_14:

LABEL_15:
  return v5;
}

void sub_1CFE7FC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void as::server::GetCurrentlyPickedRoute(as::server *this@<X0>, void *a2@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  memset(v9, 0, sizeof(v9));
  int v4 = this;
  if ([(as::server *)v4 countByEnumeratingWithState:v9 objects:v16 count:16])
  {
    as::server::PickableRoute::MakeUnique(**((as::server::PickableRoute ***)&v9[0] + 1), v5);
  }

  int v7 = *(id *)as::server::gSessionServerLog(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = [(as::server *)v4 count];
    *(_DWORD *)std::string buf = 136315650;
    uint64_t v11 = "AS_RouteUtilities.mm";
    __int16 v12 = 1024;
    int v13 = 161;
    __int16 v14 = 1024;
    LODWORD(v15) = v8;
    _os_log_impl(&dword_1CFE2A000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find the picked route. Looked in %u possible routes.", buf, 0x18u);
  }

  *a2 = 0;
}

void sub_1CFE7FF34(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

void as::server::FindMatchingPickableRoute(as::server *this@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(v7, 0, sizeof(v7));
  id v5 = this;
  if ([(as::server *)v5 countByEnumeratingWithState:v7 objects:v8 count:16])
  {
    as::server::PickableRoute::MakeUnique(**((as::server::PickableRoute ***)&v7[0] + 1), v6);
  }

  *a2 = 0;
}

void sub_1CFE800B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::RoutesAreEquivalent(id *this, id *a2, const as::server::PickableRoute *a3)
{
  uint64_t v5 = *MEMORY[0x1E4F76820];
  id v6 = (id)[*this objectForKey:*MEMORY[0x1E4F76820]];
  id v7 = (id)[*a2 objectForKey:v5];
  if ([v6 isEqualToString:v7])
  {
    uint64_t v8 = *MEMORY[0x1E4F767F8];
    id v9 = (id)[*this objectForKey:*MEMORY[0x1E4F767F8]];
    uint64_t v10 = objc_msgSend(v9, "isEqualToString:", objc_msgSend(*a2, "objectForKey:", v8));
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_1CFE801BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::InterruptionIsResumable(id *this, const as::server::PickableRoute *a2, NSArray *a3)
{
  int v4 = a2;
  as::server::GetCurrentlyPickedRoute(v4, &v9);
  if (v9 && (as::server::RoutesAreEquivalent(this, (id *)v9, v5) & 1) != 0) {
    goto LABEL_7;
  }
  if (!as::server::PickableRoute::IsPreferredExternalRoute(this))
  {
LABEL_9:
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  as::server::FindMatchingPickableRoute(v4, &v8);
  if (!v8 || (as::server::PickableRoute::IsActivePreferredExternalRoute((id *)v8) & 1) == 0)
  {
    std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)&v8, 0);
    goto LABEL_9;
  }
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)&v8, 0);
LABEL_7:
  uint64_t v6 = 1;
LABEL_10:
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)&v9, 0);

  return v6;
}

void sub_1CFE80298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9, id *a10)
{
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100](&a10, 0);

  _Unwind_Resume(a1);
}

void sub_1CFE8036C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CFE803F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

as::server::LegacySessionManager *as::server::LegacySessionManager::LegacySessionManager(as::server::LegacySessionManager *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(_DWORD *) this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 6) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = (char *)this + 72;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = (char *)this + 96;
  *((void *)this + 14) = 850045863;
  *((void *)this + 13) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 28) = 0;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 23) = (char *)this + 192;
  *((void *)this + 29) = 0;
  *((void *)this + 27) = (char *)this + 224;
  *((_DWORD *)this + 60) = 0;
  *((void *)this + 31) = 0;
  {
    as::EmbeddedAudiomxdEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::EmbeddedAudiomxdEnabled(void)::enabled) {
    operator new();
  }
  uint64_t v2 = (as::server *)CACentralStateDumpRegisterSubsystem();
  int v3 = (int)v2;
  if (v2)
  {
    int v4 = *(id *)as::server::gSessionServerLog(v2);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      id v7 = "ServerSessionManager.mm";
      __int16 v8 = 1024;
      int v9 = 89;
      __int16 v10 = 1024;
      int v11 = v3;
      _os_log_impl(&dword_1CFE2A000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d CACentralStateDumpRegisterSubsystem failed with status:%d", buf, 0x18u);
    }
  }
  return this;
}

void sub_1CFE80684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  uint64_t v14 = *v12;
  uint64_t *v12 = 0;
  if (v14) {
    std::default_delete<caulk::synchronized<as::server::DeviceTimeObserver,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::DeviceTimeObserver>>>::operator()[abi:ne180100]((uint64_t)v12, v14);
  }
  caulk::synchronized<as::server::LegacySessionManager::MicrophoneInjectionManager,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::LegacySessionManager::MicrophoneInjectionManager>>::~synchronized((uint64_t)(v7 + 22));
  std::mutex::~mutex(v11);
  std::__tree<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>>>::destroy(v10, v7[12]);
  std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::destroy(v9, v7[9]);
  std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::destroy(v8, v7[5]);
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ___ZN2as6server20LegacySessionManagerC2Ev_block_invoke(uint64_t a1, __sFILE *a2)
{
}

void as::server::LegacySessionManager::DumpDebugState(os_unfair_lock_s *this, __sFILE *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    os_unfair_lock_lock(this);
    fprintf(a2, "There are %u sessions\n", (*(void *)&this[4]._os_unfair_lock_opaque - *(void *)&this[2]._os_unfair_lock_opaque) >> 4);
    int v4 = *(as::server::AudioSessionInfo ***)&this[2]._os_unfair_lock_opaque;
    uint64_t v5 = *(as::server::AudioSessionInfo ***)&this[4]._os_unfair_lock_opaque;
    if (v4 == v5) {
      goto LABEL_14;
    }
    int v6 = 0;
    do
    {
      id v7 = (char *)*v4 + 176;
      if (*((char *)*v4 + 199) < 0) {
        id v7 = *(const char **)v7;
      }
      fprintf(a2, "%u: %s\n", ++v6, v7);
      as::server::AudioSessionInfo::DebugStateStrings(*v4, (uint64_t)buf);
      uint64_t v8 = *(void *)buf;
      uint64_t v9 = *(void *)&buf[8];
      while (v8 != v9)
      {
        if (*(char *)(v8 + 23) >= 0) {
          uint64_t v10 = (const char *)v8;
        }
        else {
          uint64_t v10 = *(const char **)v8;
        }
        fprintf(a2, "\t%s\n", v10);
        v8 += 24;
      }
      uint64_t v12 = (void **)buf;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
      v4 += 2;
    }
    while (v4 != v5);
    if (this) {
LABEL_14:
    }
      os_unfair_lock_unlock(this);
  }
  else
  {
    int v11 = *(id *)as::server::gSessionServerLog((as::server *)this);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 97;
      _os_log_impl(&dword_1CFE2A000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d State dump file null", buf, 0x12u);
    }
  }
}

void sub_1CFE808C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::synchronized<as::server::LegacySessionManager::MicrophoneInjectionManager,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::LegacySessionManager::MicrophoneInjectionManager>>::~synchronized(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(a1 + 40, *(void **)(a1 + 48));
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(v2, *(void **)(a1 + 16));
  return a1;
}

BOOL as::server::LegacySessionManager::SessionIDIsValid(os_unfair_lock_s *this, int a2)
{
  as::server::LegacySessionManager::FindSession(this, a2, &v4);
  uint64_t v2 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2 != 0;
}

void as::server::LegacySessionManager::FindSessionsForConnection(os_unfair_lock_s *this@<X0>, NSXPCConnection *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  os_unfair_lock_lock(this);
  int v6 = *(uint64_t **)&this[2]._os_unfair_lock_opaque;
  id v7 = *(uint64_t **)&this[4]._os_unfair_lock_opaque;
  uint64_t v8 = v5;
  uint64_t v9 = v8;
  if (v6 == v7)
  {

LABEL_12:
    os_unfair_lock_unlock(this);
    goto LABEL_13;
  }
  do
  {
    uint64_t v10 = *v6;
    *(void *)&long long v12 = *v6;
    uint64_t v11 = v6[1];
    *((void *)&v12 + 1) = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    if (*(NSXPCConnection **)(v10 + 256) == v9) {
      std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::push_back[abi:ne180100](a3, &v12);
    }
    if (*((void *)&v12 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
    }
    v6 += 2;
  }
  while (v6 != v7);

  if (this) {
    goto LABEL_12;
  }
LABEL_13:
}

void sub_1CFE80A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }

  if (v4) {
    os_unfair_lock_unlock(v4);
  }
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

BOOL as::server::LegacySessionManager::RemoveSession(as::server::LegacySessionManager *this, unsigned int a2, const as::server::ProcessIdentity *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (os_unfair_lock_s *)*((void *)this + 31);
  if (v5)
  {
    os_unfair_lock_lock(*((os_unfair_lock_t *)this + 31));
    mach_absolute_time();
    as::server::DeviceTimeObserver::removeSession((as::server::DeviceTimeObserver *)&v5[2], a2);
    os_unfair_lock_unlock(v5);
  }
  long long v45 = 0uLL;
  uint64_t v46 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)this);
  v44[0] = this;
  v44[1] = (char *)this + 8;
  SessionAndVerifyOwnershipPriv = (os_unfair_lock_s **)as::server::LegacySessionManager::FindSessionAndVerifyOwnershipPriv(v6, (uint64_t)v44, a2, (long long *)a3, 0);
  uint64_t v8 = (uint64_t)SessionAndVerifyOwnershipPriv;
  uint64_t v36 = (os_unfair_lock_s **)*((void *)this + 2);
  if (v36 == SessionAndVerifyOwnershipPriv)
  {
    int v35 = 0;
    uint64_t v37 = 0;
  }
  else
  {
    as::server::AudioSessionInfo::GetSiblingSessions(*SessionAndVerifyOwnershipPriv, buf);
    std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__vdeallocate((uint64_t *)&v45);
    long long v45 = *(_OWORD *)buf;
    uint64_t v46 = *(void *)&buf[16];
    memset(buf, 0, 24);
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    uint64_t v10 = *(id *)as::server::gSessionServerLog(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)v8;
      if (*(char *)(*(void *)v8 + 223) < 0) {
        std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(v11 + 200), *(void *)(v11 + 208));
      }
      else {
        std::string v49 = *(std::string *)(v11 + 200);
      }
      int v12 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = v49.__r_.__value_.__r.__words[0];
      v40[0] = 0;
      long long v41 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v40, -1, 0x20u, 0, 0, __p);
      uint64_t v14 = &v49;
      if (v12 < 0) {
        uint64_t v14 = (std::string *)v13;
      }
      if (v43 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 427;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "destroy_session";
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&buf[30] = v14;
      *(_WORD *)&unsigned char buf[38] = 2080;
      char v48 = v15;
      _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v41, v40[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
    }

    as::server::LegacySessionManager::RemoveSessionFromMicrophoneInjectionModeMap((os_unfair_lock_s *)this, a2, (uint64_t)buf);
    int v16 = buf[16];
    uint64_t v17 = *(void *)&buf[8];
    id v19 = *(id *)(*(void *)v8 + 96);
    uint64_t v20 = *(std::__shared_weak_count **)(v8 + 8);
    v39[0] = *(void *)v8;
    v39[1] = (uint64_t)v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = v19;
    as::server::LegacySessionManager::PrivateRemoveSessionFromApplication((uint64_t)this, v18, v39);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<as::server::AudioSessionInfo> *,std::shared_ptr<as::server::AudioSessionInfo> *,std::shared_ptr<as::server::AudioSessionInfo> *>((uint64_t)&v49, (long long *)(v8 + 16), *((long long **)this + 2), v8);
    uint64_t v22 = v21;
    uint64_t v34 = v17;
    for (uint64_t i = *((void *)this + 2); i != v22; i -= 16)
    {
      char v24 = *(std::__shared_weak_count **)(i - 8);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
    }
    int v35 = v16;
    *((void *)this + 2) = v22;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this);
  std::string v25 = (uint64_t *)*((void *)&v45 + 1);
  for (uint64_t j = (uint64_t *)v45; j != v25; j += 2)
  {
    int v27 = (std::__shared_weak_count *)j[1];
    if (v27)
    {
      uint64_t v28 = *j;
      atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      long long v29 = (as::server *)std::__shared_weak_count::lock(v27);
      if (v29)
      {
        uint64_t v30 = (std::__shared_weak_count *)v29;
        if (v28)
        {
          unsigned int v31 = *(_DWORD *)(v28 + 8);
          *(_OWORD *)std::string buf = *(_OWORD *)(v28 + 12);
          *(_OWORD *)&buf[16] = *(_OWORD *)(v28 + 28);
          *(void *)&unsigned char buf[32] = *(void *)(v28 + 44);
          int v32 = *(id *)as::server::gSessionServerLog(v29);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v49.__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ServerSessionManager.mm";
            WORD2(v49.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v49.__r_.__value_.__r.__words[1] + 6) = 450;
            WORD1(v49.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v49.__r_.__value_.__r.__words[2]) = v31;
            __int16 v50 = 1024;
            unsigned int v51 = a2;
            _os_log_impl(&dword_1CFE2A000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing sibling session 0x%x, because its source session 0x%x is being removed", (uint8_t *)&v49, 0x1Eu);
          }
          as::server::LegacySessionManager::RemoveSession(this, v31, (const as::server::ProcessIdentity *)buf);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v35 && v34 && v37) {
    [v37 updateMicrophoneInjectionPreference:0 forSession:a2];
  }

  *(void *)std::string buf = &v45;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v36 != (os_unfair_lock_s **)v8;
}

void sub_1CFE80EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  os_unfair_lock_unlock(v29);
  a29 = (void **)&a25;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfo::GetSiblingSessions(os_unfair_lock_s *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = this + 126;
  os_unfair_lock_lock(this + 126);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__init_with_size[abi:ne180100]<std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*>(a2, *(void **)&this[128]._os_unfair_lock_opaque, *(void **)&this[130]._os_unfair_lock_opaque, (uint64_t)(*(void *)&this[130]._os_unfair_lock_opaque - *(void *)&this[128]._os_unfair_lock_opaque) >> 4);
  os_unfair_lock_unlock(v4);
}

void sub_1CFE81020(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::RemoveSessionFromMicrophoneInjectionModeMap(os_unfair_lock_s *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = this + 44;
  os_unfair_lock_lock(this + 44);
  uint64_t v9 = *(char **)&this[48]._os_unfair_lock_opaque;
  uint64_t v8 = (char *)&this[48];
  id v7 = v9;
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v10 = (uint64_t **)(v8 - 8);
  uint64_t v11 = v8;
  do
  {
    unsigned int v12 = *((_DWORD *)v7 + 8);
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      uint64_t v14 = (char **)v7;
    }
    else {
      uint64_t v14 = (char **)(v7 + 8);
    }
    if (v13) {
      uint64_t v11 = v7;
    }
    id v7 = *v14;
  }
  while (*v14);
  if (v11 != v8 && (uint64_t v15 = *((unsigned int *)v11 + 8), v15 <= a2))
  {
    uint64_t v17 = *((void *)v11 + 5);
    std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(v10, (uint64_t *)v11);
    operator delete(v11);
    *(void *)a3 = v15;
    *(void *)(a3 + 8) = v17;
    char v16 = 1;
  }
  else
  {
LABEL_12:
    char v16 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v16;
  os_unfair_lock_unlock(v6);
}

void as::server::LegacySessionManager::PrivateRemoveSessionFromApplication(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t **)(a1 + 32);
  uint64_t v6 = std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>(a1 + 32, *a3 + 52);
  if ((uint64_t *)(a1 + 40) != v6)
  {
    id v7 = v6;
    uint64_t v8 = (os_unfair_lock_s *)v6[9];
    uint64_t v9 = (std::__shared_weak_count *)a3[1];
    uint64_t v15 = *a3;
    char v16 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::AudioApplicationInfo::RemoveSession(v8, &v15);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (!as::server::AudioApplicationInfo::HasStrongClientOwner((os_unfair_lock_s *)v7[9]))
    {
      as::server::AudioApplicationInfo::GetSessions((os_unfair_lock_s *)v7[9], (uint64_t *)buf);
      uint64_t v11 = *(void *)buf;
      uint64_t v10 = *(void *)&buf[8];
      uint64_t v17 = (void **)buf;
      std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&v17);
      if (v10 == v11)
      {
        BOOL v13 = *(id *)as::server::gSessionServerLog(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = as::server::AudioApplicationInfo::DebugString((os_unfair_lock_s *)v7[9]);
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 877;
          __int16 v19 = 2080;
          uint64_t v20 = v14;
          _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d destroy audio app instance since was created implicitly by session creation and all sessions now gone (audio app: %s)", buf, 0x1Cu);
        }

        std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::erase(v5, v7);
      }
    }
  }
}

void sub_1CFE8127C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::RemoveSessionsForInvalidatedXPCConnection(os_unfair_lock_s *this, NSXPCConnection *a2)
{
  int v3 = a2;
  as::server::LegacySessionManager::FindSessionsForConnection(this, v3, (uint64_t *)&v8);
  uint64_t v4 = v8;
  for (uint64_t i = v9; v4 != i; v4 += 2)
  {
    uint64_t v6 = *v4;
    id v7 = (std::__shared_weak_count *)v4[1];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    as::server::LegacySessionManager::RemoveSession((as::server::LegacySessionManager *)this, *(_DWORD *)(v6 + 8), (const as::server::ProcessIdentity *)(v6 + 12));
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  uint64_t v10 = (void **)&v8;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_1CFE81354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::GetSessionIDsForToken(os_unfair_lock_s *this@<X0>, const audit_token_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v5 = *(_OWORD *)&a2->val[4];
  long long v27 = *(_OWORD *)a2->val;
  long long v28 = v5;
  *(_OWORD *)atoken.val = v27;
  *(_OWORD *)&atoken.val[4] = v5;
  pid_t v6 = audit_token_to_pid(&atoken);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  os_unfair_lock_lock(this);
  uint64_t v7 = *(void *)&this[2]._os_unfair_lock_opaque;
  uint64_t v8 = *(void *)&this[4]._os_unfair_lock_opaque;
  v22[0] = v27;
  v22[1] = v28;
  char v23 = 1;
  pid_t v24 = v6;
  std::string v25 = a3;
  if (v7 == v8) {
    goto LABEL_22;
  }
  do
  {
    if (as::server::ProcessIdentity::operator==(*(void *)v7 + 12, (uint64_t)v22))
    {
      uint64_t v9 = v25;
      int v10 = *(_DWORD *)(*(void *)v7 + 8);
      uint64_t v11 = v25[1];
      unint64_t v12 = (unint64_t)v25[2];
      if ((unint64_t)v11 >= v12)
      {
        uint64_t v14 = *v25;
        uint64_t v15 = (v11 - *v25) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v12 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          __int16 v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(v25 + 2), v18);
          uint64_t v14 = *v9;
          uint64_t v11 = v9[1];
        }
        else
        {
          __int16 v19 = 0;
        }
        uint64_t v20 = &v19[4 * v15];
        *(_DWORD *)uint64_t v20 = v10;
        BOOL v13 = v20 + 4;
        while (v11 != v14)
        {
          int v21 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        uint64_t *v9 = v20;
        v9[1] = v13;
        void v9[2] = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v11 = v10;
        BOOL v13 = v11 + 4;
      }
      v9[1] = v13;
    }
    v7 += 16;
  }
  while (v7 != v8);
  if (this) {
LABEL_22:
  }
    os_unfair_lock_unlock(this);
}

void sub_1CFE8153C(_Unwind_Exception *exception_object)
{
}

void *as::server::LegacySessionManager::GenerateIOControllerEventForSessions(os_unfair_lock_s *this, uint64_t a2, int **a3)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      as::server::LegacySessionManager::FindSession(this, *v3, &v18);
      if (v18)
      {
        id v8 = *(id *)(v18 + 256);
        int v17 = 0;
        int v17 = [v8 processIdentifier];
        boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::find(&v20, &v17, v23);
        if (!v20 && v21) {
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        }
        if (v23[0] == v20 + 16 * v21)
        {
          int v15 = v17;
          id v16 = v8;
          boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::insert_unique(&v20, &v15, (uint64_t)v23);
        }
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      ++v3;
    }
    while (v3 != v4);
    if (v21)
    {
      uint64_t v9 = [MEMORY[0x1E4F1C9B8] dataWithBytes:*a3 length:(char *)a3[1] - (char *)*a3];
      uint64_t v10 = v20;
      if (!v20 && v21) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (v21)
      {
        uint64_t v11 = v20 + 16 * v21;
        do
        {
          if (!v10) {
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          }
          id v12 = *(id *)(v10 + 8);
          BOOL v13 = [v12 remoteObjectProxy];
          [v13 IOControllerEvent:a2 sessions:v9 isDecoupledInput:*((unsigned __int8 *)a3 + 24)];

          v10 += 16;
        }
        while (v10 != v11);
      }
    }
  }
  return boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::~vector(&v20);
}

void sub_1CFE8175C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::~vector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::CreateAudioApplication(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)&v22[5] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a3;
  id v8 = v7;
  if (!*(unsigned char *)(a2 + 88))
  {
    uint64_t v10 = *(id *)as::server::gSessionServerLog(v7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = *(_DWORD *)(a2 + 92);
      uint64_t v12 = *(void *)(a2 + 8);
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
      __int16 v19 = 1024;
      int v20 = 627;
      __int16 v21 = 1024;
      v22[0] = v11;
      LOWORD(v22[1]) = 2112;
      *(void *)((char *)&v22[1] + 2) = v12;
      _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - cannot create audio app since audit token invalid (pid: %d, bundle: %@)", buf, 0x22u);
    }
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (v9 == 1684825972)
  {
    as::server::LegacySessionManager::PrivateCreateDelegateAudioApp(a1, a2, v7, (os_unfair_lock_s **)a4);
    goto LABEL_23;
  }
  if (v9 == 1886547832)
  {
    as::server::LegacySessionManager::PrivateCreateProxyAudioApp(a1, a2, v7, a4);
    goto LABEL_23;
  }
  if (v9 != 1886546285)
  {
    BOOL v13 = *(id *)as::server::gSessionServerLog(v7);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      unsigned int v14 = *(_DWORD *)(a2 + 96);
      int v15 = bswap32(v14);
      *(_DWORD *)&buf[1] = v15;
      if (((char)v15 - 32) > 0x5E
        || (((__int16)v15 >> 8) - 32) > 0x5E
        || ((v15 << 8 >> 24) - 32) > 0x5E
        || ((v15 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v17, v14);
      }
      else
      {
        strcpy(&buf[5], "'");
        buf[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v17, buf);
      }
      id v16 = &v17;
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        id v16 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
      __int16 v19 = 1024;
      int v20 = 639;
      __int16 v21 = 2080;
      *(void *)uint64_t v22 = v16;
      _os_log_impl(&dword_1CFE2A000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - cannot create unknown application type: %s", buf, 0x1Cu);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
    }

LABEL_22:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    goto LABEL_23;
  }
  as::server::LegacySessionManager::PrivateExplicitCreatePrimaryAudioApp(a1, a2, v7, a4);
LABEL_23:
}

void sub_1CFE81A5C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void as::server::LegacySessionManager::PrivateExplicitCreatePrimaryAudioApp(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)&v25[5] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  BOOL v8 = as::server::ProcessIdentity::operator==(a2 + 16, a2 + 56);
  if (v8)
  {
    os_unfair_lock_lock(a1);
    v22[0] = a1;
    v22[1] = a1 + 2;
    as::server::LegacySessionManager::PrivateFindOrCreatePrimaryApplication((uint64_t)a1, (uint64_t)v22, a2, v7, (uint64_t)&v19);
    uint64_t v9 = (os_unfair_lock_s *)v19;
    if (!v21)
    {
      BOOL v10 = as::server::AudioApplicationInfo::SetPrimaryClient((os_unfair_lock_s *)v19, a2, v7);
      if (!v10)
      {
        std::string v17 = *(id *)as::server::gSessionServerLog((as::server *)v10);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = as::server::AudioApplicationInfo::DebugString(v9);
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 663;
          __int16 v24 = 2080;
          *(void *)std::string v25 = v18;
          _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create primary client (app: %s)", buf, 0x1Cu);
        }

        *(_OWORD *)a4 = 0u;
        *(_OWORD *)(a4 + 16) = 0u;
        BOOL v13 = v20;
        if (!v20) {
          goto LABEL_11;
        }
LABEL_10:
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_11:
        if (a1) {
          os_unfair_lock_unlock(a1);
        }
        goto LABEL_16;
      }
      int v11 = *(id *)as::server::gSessionServerLog((as::server *)v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = as::server::AudioApplicationInfo::DebugString(v9);
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 667;
        __int16 v24 = 2080;
        *(void *)std::string v25 = v12;
        _os_log_impl(&dword_1CFE2A000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Explicitly created audio app from implicitly-created instance (app: %s)", buf, 0x1Cu);
      }
    }
    as::server::AudioApplicationInfo::GetPrimaryClient(v9, buf);
    BOOL v13 = v20;
    *(void *)a4 = v9;
    *(void *)(a4 + 8) = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)(a4 + 16) = *(_OWORD *)buf;
    if (!v13) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  unsigned int v14 = *(id *)as::server::gSessionServerLog((as::server *)v8);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    int v15 = *(_DWORD *)(a2 + 52);
    int v16 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 650;
    __int16 v24 = 1024;
    v25[0] = v15;
    LOWORD(v25[1]) = 1024;
    *(_DWORD *)((char *)&v25[1] + 2) = v16;
    _os_log_impl(&dword_1CFE2A000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - primary application instances should have matching source\t\t\t\t\t   and creator process ids (source: %d, creator: %d)", buf, 0x1Eu);
  }
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
LABEL_16:
}

void sub_1CFE81D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v12) {
    os_unfair_lock_unlock(v12);
  }

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::PrivateCreateProxyAudioApp(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  BOOL v8 = as::server::ProcessIdentity::operator==(a2 + 16, a2 + 56);
  if (v8)
  {
    uint64_t v9 = *(id *)as::server::gSessionServerLog((as::server *)v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = *(_DWORD *)(a2 + 92);
      int v11 = *(_DWORD *)(a2 + 52);
      *(_DWORD *)uint64_t v18 = 136315906;
      *(void *)&v18[4] = "ServerSessionManager.mm";
      *(_WORD *)&v18[12] = 1024;
      *(_DWORD *)&v18[14] = 701;
      __int16 v19 = 1024;
      int v20 = v10;
      __int16 v21 = 1024;
      int v22 = v11;
      _os_log_impl(&dword_1CFE2A000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - proxy application instances must not have matching source\t\t\t\t\t   and creator process ids (source: %d, creator: %d)", v18, 0x1Eu);
    }
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    os_unfair_lock_lock(a1);
    uint64_t v12 = (os_unfair_lock_s **)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>((uint64_t)&a1[8], a2 + 56);
    BOOL v13 = v12;
    if (&a1[10] == (os_unfair_lock_s *)v12)
    {
      int v16 = *(id *)as::server::gSessionServerLog((as::server *)v12);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v17 = *(_DWORD *)(a2 + 92);
        *(_DWORD *)uint64_t v18 = 136315650;
        *(void *)&v18[4] = "ServerSessionManager.mm";
        *(_WORD *)&v18[12] = 1024;
        *(_DWORD *)&v18[14] = 709;
        __int16 v19 = 1024;
        int v20 = v17;
        _os_log_impl(&dword_1CFE2A000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - cannot create proxy instance - primary app instance (pid:%d) not found", v18, 0x18u);
      }
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
    }
    else
    {
      as::server::AudioApplicationInfo::AddProxyAudioApp(v12[9], a2, v7, (uint64_t)v18);
      unsigned int v14 = v13[10];
      *(void *)a4 = v13[9];
      *(void *)(a4 + 8) = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v14[2], 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *(void *)&v18[8];
      *(void *)(a4 + 16) = *(void *)v18;
      *(void *)(a4 + 24) = v15;
      if (v15)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        if (*(void *)&v18[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v18[8]);
        }
      }
    }
    if (a1) {
      os_unfair_lock_unlock(a1);
    }
  }
}

void sub_1CFE81FC4(_Unwind_Exception *a1)
{
  if (v2) {
    os_unfair_lock_unlock(v2);
  }

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::PrivateCreateDelegateAudioApp(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, os_unfair_lock_s **a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  BOOL v8 = as::server::ProcessIdentity::operator==(a2 + 16, a2 + 56);
  if (v8)
  {
    uint64_t v9 = *(id *)as::server::gSessionServerLog((as::server *)v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(_DWORD *)(a2 + 92);
      int v11 = *(_DWORD *)(a2 + 52);
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 723;
      __int16 v21 = 1024;
      int v22 = v10;
      __int16 v23 = 1024;
      int v24 = v11;
      _os_log_impl(&dword_1CFE2A000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Warning - delegate application instances not expected to have matching source\t\t\t\t   and creator process ids (source: %d, creator: %d)", buf, 0x1Eu);
    }
  }
  os_unfair_lock_lock(a1);
  v19[0] = a1;
  v19[1] = a1 + 2;
  uint64_t v12 = (as::server *)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>((uint64_t)&a1[8], a2 + 56);
  if (&a1[10] == (os_unfair_lock_s *)v12)
  {
    uint64_t v15 = *(id *)as::server::gSessionServerLog(v12);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a2 + 92);
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 732;
      __int16 v21 = 1024;
      int v22 = v16;
      _os_log_impl(&dword_1CFE2A000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Warning - source app instance (pid:%d) not found, will create delegate for this audit token anyway", buf, 0x18u);
    }
    as::server::LegacySessionManager::PrivateCreateAudioAppImpl((uint64_t)a1, (uint64_t)v19, a2, v7, (uint64_t)buf);
    unsigned int v14 = *(os_unfair_lock_s **)buf;
    BOOL v13 = *(std::__shared_weak_count **)&buf[8];
  }
  else
  {
    unsigned int v14 = (os_unfair_lock_s *)*((void *)v12 + 9);
    BOOL v13 = (std::__shared_weak_count *)*((void *)v12 + 10);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (!v14)
  {
    uint64_t v18 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v18);
  }
  as::server::AudioApplicationInfo::AddDelegateAudioApp(v14, a2, v7, (uint64_t)buf);
  *a4 = v14;
  a4[1] = (os_unfair_lock_s *)v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(void *)&buf[8];
  a4[2] = *(os_unfair_lock_s **)buf;
  a4[3] = (os_unfair_lock_s *)v17;
  if (v17)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a1) {
    os_unfair_lock_unlock(a1);
  }
}

void sub_1CFE82254(_Unwind_Exception *a1)
{
  if (v2) {
    os_unfair_lock_unlock(v2);
  }

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindAudioApplicationAndVerifyOwnership(os_unfair_lock_s *this@<X0>, const as::server::ProcessIdentity *a2@<X1>, const as::server::ProcessIdentity *a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (as::server::LegacySessionManager::VerifyAudioAppPermission((as::server::LegacySessionManager *)this, a2, a3, a5))
  {
    os_unfair_lock_lock(this);
    int v11 = (as::server *)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>((uint64_t)&this[8], (uint64_t)a2);
    if (&this[10] == (os_unfair_lock_s *)v11)
    {
      uint64_t v17 = *(id *)as::server::gSessionServerLog(v11);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *((_DWORD *)a2 + 9);
        *(_DWORD *)std::string buf = 136315650;
        uint64_t v26 = "ServerSessionManager.mm";
        __int16 v27 = 1024;
        int v28 = 754;
        __int16 v29 = 1024;
        int v30 = v18;
        _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error - app (pid:%d) not found!", buf, 0x18u);
      }
      *(_OWORD *)a6 = 0u;
      *(_OWORD *)(a6 + 16) = 0u;
    }
    else
    {
      BOOL v13 = (os_unfair_lock_s *)*((void *)v11 + 9);
      uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 + 10);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v13)
      {
        uint64_t v22 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v22);
      }
      as::server::AudioApplicationInfo::FindAudioAppClient(v13, a4, &v23);
      uint64_t v15 = v23;
      if (v23)
      {
        *(void *)a6 = v13;
        *(void *)(a6 + 8) = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v16 = v24;
        *(void *)(a6 + 16) = v15;
        *(void *)(a6 + 24) = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        __int16 v19 = *(id *)as::server::gSessionServerLog(v14);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = *((_DWORD *)a2 + 9);
          int v21 = *((_DWORD *)a3 + 9);
          *(_DWORD *)std::string buf = 136316162;
          uint64_t v26 = "ServerSessionManager.mm";
          __int16 v27 = 1024;
          int v28 = 764;
          __int16 v29 = 1024;
          int v30 = v20;
          __int16 v31 = 1024;
          unsigned int v32 = a4;
          __int16 v33 = 1024;
          int v34 = v21;
          _os_log_impl(&dword_1CFE2A000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error - app (pid:%d) found but audio app client (id: %u) not found (caller pid: %d)", buf, 0x24u);
        }
        *(_OWORD *)a6 = 0u;
        *(_OWORD *)(a6 + 16) = 0u;
      }
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    if (this) {
      os_unfair_lock_unlock(this);
    }
  }
  else
  {
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
}

void sub_1CFE82500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    if (!v11)
    {
LABEL_3:
      if (!v10) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      os_unfair_lock_unlock(v10);
      goto LABEL_8;
    }
  }
  else if (!v11)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (!v10) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL as::server::LegacySessionManager::VerifyAudioAppPermission(as::server::LegacySessionManager *this, const as::server::ProcessIdentity *a2, const as::server::ProcessIdentity *a3, int a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  BOOL v7 = as::server::ProcessIdentity::operator==((uint64_t)a2, (uint64_t)a3);
  if (v7) {
    return 1;
  }
  if (!a4)
  {
    int v10 = *(id *)as::server::gSessionServerLog((as::server *)v7);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v11) {
      return result;
    }
    int v12 = *((_DWORD *)a2 + 9);
    int v13 = *((_DWORD *)a3 + 9);
    int v20 = 136315906;
    int v21 = "ServerSessionManager.mm";
    __int16 v22 = 1024;
    int v23 = 790;
    __int16 v24 = 1024;
    int v25 = v12;
    __int16 v26 = 1024;
    int v27 = v13;
    unsigned int v14 = "%25s:%-5d Failed to verify access to application with pid: %d from caller with pid:%d";
    uint64_t v15 = v10;
    os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_9;
  }
  BOOL HasEntitlement = as::server::ProcessIdentity::ProcessHasEntitlement(a3, "com.apple.private.coreaudio.borrowaudioapplication.allow");
  if (HasEntitlement) {
    return 1;
  }
  uint64_t v17 = *(id *)as::server::gSessionServerLog((as::server *)HasEntitlement);
  BOOL result = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
  if (result)
  {
    int v18 = *((_DWORD *)a2 + 9);
    int v19 = *((_DWORD *)a3 + 9);
    int v20 = 136315906;
    int v21 = "ServerSessionManager.mm";
    __int16 v22 = 1024;
    int v23 = 784;
    __int16 v24 = 1024;
    int v25 = v18;
    __int16 v26 = 1024;
    int v27 = v19;
    unsigned int v14 = "%25s:%-5d Lookup of audio app (pid:%d) succeeded, but calling client (pid:%d) does not have entitlement to use it";
    uint64_t v15 = v17;
    os_log_type_t v16 = OS_LOG_TYPE_INFO;
LABEL_9:
    _os_log_impl(&dword_1CFE2A000, v15, v16, v14, (uint8_t *)&v20, 0x1Eu);
    return 0;
  }
  return result;
}

void as::server::LegacySessionManager::RemoveApplicationForInvalidatedXPCConnection(as::server::LegacySessionManager *this, NSXPCConnection *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)this);
  uint64_t v4 = (uint64_t *)*((void *)this + 4);
  long long v5 = (char *)this + 40;
  if (v4 == (uint64_t *)((char *)this + 40)) {
    goto LABEL_15;
  }
  while (1)
  {
    BOOL v6 = as::server::AudioApplicationInfo::HandleXPCConnectionInvalidated((as::server::AudioApplicationInfo *)v4[9], v3);
    if (v6) {
      break;
    }
    BOOL v7 = (char *)v4[1];
    if (v7)
    {
      do
      {
        BOOL v8 = v7;
        BOOL v7 = *(char **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        BOOL v8 = (char *)v4[2];
        BOOL v9 = *(void *)v8 == (void)v4;
        uint64_t v4 = (uint64_t *)v8;
      }
      while (!v9);
    }
    uint64_t v4 = (uint64_t *)v8;
    if (v8 == v5) {
      goto LABEL_14;
    }
  }
  if (v4 != (uint64_t *)v5)
  {
    int v10 = *(id *)as::server::gSessionServerLog((as::server *)v6);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v11 = as::server::AudioApplicationInfo::DebugString((os_unfair_lock_s *)v4[9]);
      int v12 = 136315650;
      int v13 = "ServerSessionManager.mm";
      __int16 v14 = 1024;
      int v15 = 918;
      __int16 v16 = 2080;
      uint64_t v17 = v11;
      _os_log_impl(&dword_1CFE2A000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing audio application since all owning remote clients gone (app: %s)", (uint8_t *)&v12, 0x1Cu);
    }

    std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::erase((uint64_t **)this + 4, v4);
  }
LABEL_14:
  if (this) {
LABEL_15:
  }
    os_unfair_lock_unlock((os_unfair_lock_t)this);
}

void sub_1CFE82880(_Unwind_Exception *a1)
{
  if (v2) {
    os_unfair_lock_unlock(v2);
  }

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::RemoveApplicationUponAppTermination(uint64_t a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  long long v5 = *(_OWORD *)(*a2 + 68);
  v13[0] = *(_OWORD *)(*a2 + 52);
  v13[1] = v5;
  uint64_t v14 = *(void *)(v4 + 84);
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  BOOL v6 = (as::server *)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>(a1 + 32, (uint64_t)v13);
  BOOL v7 = v6;
  if ((as::server *)(a1 + 40) == v6)
  {
    BOOL v11 = *(id *)as::server::gSessionServerLog(v6);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(_DWORD *)(*a2 + 8);
      *(_DWORD *)std::string buf = 136315906;
      __int16 v16 = "ServerSessionManager.mm";
      __int16 v17 = 1024;
      int v18 = 932;
      __int16 v19 = 1024;
      int v20 = HIDWORD(v14);
      __int16 v21 = 1024;
      LODWORD(v22) = v12;
      _os_log_impl(&dword_1CFE2A000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Warning - app (pid:%d) not found for sessionID: 0x%x", buf, 0x1Eu);
    }
  }
  else
  {
    BOOL v8 = *(id *)as::server::gSessionServerLog(v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(*a2 + 8);
      int v10 = as::server::AudioApplicationInfo::DebugString(*((os_unfair_lock_s **)v7 + 9));
      *(_DWORD *)std::string buf = 136315906;
      __int16 v16 = "ServerSessionManager.mm";
      __int16 v17 = 1024;
      int v18 = 936;
      __int16 v19 = 1024;
      int v20 = v9;
      __int16 v21 = 2080;
      __int16 v22 = v10;
      _os_log_impl(&dword_1CFE2A000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing application due to session (0x%x) received app state terminated (app: %s)", buf, 0x22u);
    }

    std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::erase((uint64_t **)(a1 + 32), (uint64_t *)v7);
  }
  if (a1) {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }
}

void sub_1CFE82A94(_Unwind_Exception *a1)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(a1);
}

id as::server::LegacySessionManager::ToggleInputMuteForRecordingApplication(as::server::LegacySessionManager *this, const audit_token_t *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v4 = *(id *)as::server::forbid_acq::SystemController::Instance(this);
  long long v5 = v4;
  if (v4)
  {
    id v30 = 0;
    BOOL v29 = 0;
    BOOL v6 = (as::server *)[v4 copySessionIDsWithMuteValue:&v30 muteValue:&v29];
    if (v6)
    {
      BOOL v7 = *(id *)as::server::gSessionServerLog(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1000;
        _os_log_impl(&dword_1CFE2A000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get sessions to toggle mute", buf, 0x12u);
      }
    }
    else
    {
      memset(buf, 0, sizeof(buf));
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v9 = v30;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v25 objects:v31 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v26;
        do
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v26 != v11) {
              objc_enumerationMutation(v9);
            }
            id v13 = *(id *)(*((void *)&v25 + 1) + 8 * i);
            unsigned int v24 = [v13 unsignedIntegerValue];
            boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique((uint64_t *)buf, &v24, (uint64_t)&v22);
          }
          uint64_t v10 = [v9 countByEnumeratingWithState:&v25 objects:v31 count:16];
        }
        while (v10);
      }

      if (*(void *)&buf[8])
      {
        if (!*(void *)buf) {
          __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
        }
        as::server::LegacySessionManager::FindAudioApplicationForSession((os_unfair_lock_s *)this, **(_DWORD **)buf, &v22);
        uint64_t v14 = v22;
        BoolPropertyDefaultToFalse = (as::server *)as::server::AudioApplicationInfo::GetBoolPropertyDefaultToFalse((uint64_t)v22, (void *)*MEMORY[0x1E4F764D8], 0x6D783A3Au);
        if (BoolPropertyDefaultToFalse)
        {
          as::server::AudioApplicationInfo::SetInputMuted(v14, v29, 0);
        }
        else
        {
          __int16 v16 = as::server::GetAudioControlQueue(BoolPropertyDefaultToFalse);
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 3321888768;
          void v19[2] = ___ZN2as6server20LegacySessionManager38ToggleInputMuteForRecordingApplicationERK13audit_token_t_block_invoke;
          uint64_t v19[3] = &__block_descriptor_65_ea8_32c51_ZTSN5boost9container8flat_setIjNSt3__14lessIjEEvEE_e5_v8__0l;
          BOOL v21 = v29;
          boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::vector_alloc_holder<boost::container::new_allocator<unsigned int> const&,unsigned long>(__dst, (const char *)buf, *(unint64_t *)&buf[8]);
          if (*(void *)&buf[8]) {
            memmove(__dst[0], *(const void **)buf, 4 * *(void *)&buf[8]);
          }
          __dst[3] = (void *)a2;
          as::server::DispatchBlock(v16, v19, 1, (uint64_t)"ToggleInputMuteForRecordingApplication", (uint64_t)"ServerSessionManager.mm", 996, 0, 0);

          if (__dst[2]) {
            operator delete(__dst[0]);
          }
        }
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
      }
      if (*(void *)&buf[16]) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    BOOL v8 = *(id *)as::server::gSessionServerLog(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1003;
      _os_log_impl(&dword_1CFE2A000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get the MXSystemController instance", buf, 0x12u);
    }
  }

  __int16 v17 = NSErrorUnimplemented();
  return v17;
}

void sub_1CFE82E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  if (a15) {
    operator delete(__p);
  }

  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (*(void *)(v32 - 96)) {
    operator delete(*(void **)(v32 - 112));
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZN2as6server20LegacySessionManager38ToggleInputMuteForRecordingApplicationERK13audit_token_t_block_invoke(uint64_t a1)
{
  return as::server::require_acq::MuteAudioSessions(*(unsigned __int8 *)(a1 + 64), (unsigned int **)(a1 + 32), *(const audit_token_t **)(a1 + 56));
}

void **__copy_helper_block_ea8_32c51_ZTSN5boost9container8flat_setIjNSt3__14lessIjEEvEE(uint64_t a1, uint64_t a2)
{
  int v3 = (const void **)(a2 + 32);
  BOOL result = boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::vector_alloc_holder<boost::container::new_allocator<unsigned int> const&,unsigned long>((void **)(a1 + 32), (const char *)(a2 + 32), *(void *)(a2 + 40));
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5)
  {
    BOOL v6 = *result;
    BOOL v7 = *v3;
    return (void **)memmove(v6, v7, 4 * v5);
  }
  return result;
}

void __destroy_helper_block_ea8_32c51_ZTSN5boost9container8flat_setIjNSt3__14lessIjEEvEE(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    operator delete(*(void **)(a1 + 32));
  }
}

uint64_t as::server::LegacySessionManager::MuteInputsForRecordingApplications@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = NSErrorWithString(&cfstr_UnsupportedPla.isa);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

void ___ZN2as6server20LegacySessionManager22StartProcessMonitoringEi_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  BOOL v6 = a3;
  BOOL v7 = v6;
  if (v5)
  {
    BOOL v8 = *(id *)as::server::gSessionServerLog(v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(a1 + 32);
      uint64_t v10 = [v5 name];
      int v11 = 136315906;
      int v12 = "ServerSessionManager.mm";
      __int16 v13 = 1024;
      int v14 = 1068;
      __int16 v15 = 1024;
      int v16 = v9;
      __int16 v17 = 2112;
      int v18 = v10;
      _os_log_impl(&dword_1CFE2A000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Monitored process died, pid = %d, name = %@", (uint8_t *)&v11, 0x22u);
    }
  }
  as::server::LegacySessionManager::Instance(v6);
  as::server::LegacySessionManager::HandleProcessDeath((as::server::LegacySessionManager *)&as::server::LegacySessionManager::Instance(void)::sManager, *(_DWORD *)(a1 + 32));
}

void sub_1CFE83138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::HandleProcessDeath(as::server::LegacySessionManager *this, signed int a2)
{
  id v4 = (os_unfair_lock_s *)((char *)this + 56);
  os_unfair_lock_lock((os_unfair_lock_t)this + 14);
  uint64_t v5 = *((void *)this + 9);
  if (v5)
  {
    BOOL v6 = (_DWORD *)((char *)this + 72);
    do
    {
      signed int v7 = *(_DWORD *)(v5 + 32);
      BOOL v8 = v7 < a2;
      if (v7 >= a2) {
        int v9 = (uint64_t *)v5;
      }
      else {
        int v9 = (uint64_t *)(v5 + 8);
      }
      if (!v8) {
        BOOL v6 = (_DWORD *)v5;
      }
      uint64_t v5 = *v9;
    }
    while (*v9);
    if (v6 != (_DWORD *)((char *)this + 72) && v6[8] <= a2) {
      std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::erase((uint64_t **)this + 8, (uint64_t)v6);
    }
  }
  os_unfair_lock_unlock(v4);
  long long v25 = 0;
  long long v26 = 0;
  unint64_t v27 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)this);
  uint64_t v10 = (void *)*((void *)this + 1);
  int v11 = (void *)*((void *)this + 2);
  if (v10 == v11) {
    goto LABEL_29;
  }
  int v12 = 0;
  do
  {
    uint64_t v13 = *v10;
    if (*(_DWORD *)(*v10 + 48) == a2)
    {
      uint64_t v14 = v10[1];
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 16), 1uLL, memory_order_relaxed);
      }
      if ((unint64_t)v12 >= v27)
      {
        uint64_t v15 = (v12 - v25) >> 4;
        if ((unint64_t)(v15 + 1) >> 60) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v16 = (uint64_t)(v27 - (void)v25) >> 3;
        if (v16 <= v15 + 1) {
          unint64_t v16 = v15 + 1;
        }
        if (v27 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        v28[4] = &v27;
        int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)&v27, v17);
        uint64_t v19 = &v18[16 * v15];
        v28[0] = v18;
        v28[1] = v19;
        v28[3] = &v18[16 * v20];
        *(void *)uint64_t v19 = v13;
        *((void *)v19 + 1) = v14;
        v28[2] = v19 + 16;
        std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__swap_out_circular_buffer((uint64_t *)&v25, v28);
        int v12 = v26;
        std::__split_buffer<std::weak_ptr<as::server::AudioSessionInfo>>::~__split_buffer(v28);
      }
      else
      {
        *(void *)int v12 = v13;
        *((void *)v12 + 1) = v14;
        v12 += 16;
      }
      long long v26 = v12;
    }
    v10 += 2;
  }
  while (v10 != v11);
  if (this)
  {
LABEL_29:
    os_unfair_lock_unlock((os_unfair_lock_t)this);
    int v12 = v26;
  }
  for (uint64_t i = v25; i != v12; i += 16)
  {
    __int16 v22 = (std::__shared_weak_count *)*((void *)i + 1);
    if (v22)
    {
      uint64_t v23 = std::__shared_weak_count::lock(v22);
      if (v23)
      {
        unsigned int v24 = v23;
        if (*(void *)i) {
          as::server::LegacySessionManager::RemoveSession(this, *(_DWORD *)(*(void *)i + 8), (const as::server::ProcessIdentity *)(*(void *)i + 12));
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
    }
  }
  as::server::LegacySessionManager::RemoveProcessFromMicrophoneInjectionNotificationSubscription((os_unfair_lock_s *)this, a2);
  v28[0] = &v25;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
}

void sub_1CFE83370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  os_unfair_lock_unlock(v18);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::RemoveProcessFromMicrophoneInjectionNotificationSubscription(os_unfair_lock_s *this, unsigned int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = this + 44;
  os_unfair_lock_lock(this + 44);
  BOOL v8 = *(uint64_t ***)&this[54]._os_unfair_lock_opaque;
  BOOL v6 = (uint64_t **)&this[54];
  uint64_t v7 = (uint64_t)v8;
  int v9 = v6 + 1;
  if (v8 != v6 + 1)
  {
    while (1)
    {
      long long v10 = *(_OWORD *)(v7 + 56);
      *(_OWORD *)v15.val = *(_OWORD *)(v7 + 40);
      *(_OWORD *)&v15.val[4] = v10;
      uint64_t v5 = (as::server *)audit_token_to_pid(&v15);
      if (v5 == a2) {
        break;
      }
      int v11 = *(uint64_t **)(v7 + 8);
      if (v11)
      {
        do
        {
          int v12 = (uint64_t **)v11;
          int v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = *(uint64_t ***)(v7 + 16);
          BOOL v13 = *v12 == (uint64_t *)v7;
          uint64_t v7 = (uint64_t)v12;
        }
        while (!v13);
      }
      uint64_t v7 = (uint64_t)v12;
      if (v12 == v9) {
        goto LABEL_14;
      }
    }
  }
  if ((uint64_t **)v7 != v9)
  {
    uint64_t v14 = *(id *)as::server::gSessionServerLog(v5);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15.val[0] = 136315650;
      *(void *)&v15.val[1] = "ServerSessionManager.mm";
      LOWORD(v15.val[3]) = 1024;
      *(unsigned int *)((char *)&v15.val[3] + 2) = 1270;
      HIWORD(v15.val[4]) = 1024;
      v15.val[5] = a2;
      _os_log_impl(&dword_1CFE2A000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing process with PID:%d from MicrophoneInjectionNotificationSubscription", (uint8_t *)&v15, 0x18u);
    }
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::erase(v6, v7);
  }
LABEL_14:
  os_unfair_lock_unlock(v4);
}

void sub_1CFE83548(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t as::server::LegacySessionManager::GetPreferredMicrophoneInjectionMode(os_unfair_lock_s *this, unsigned int a2)
{
  if (as::server::LegacySessionManager::SessionIDIsValid(this, a2))
  {
    id v4 = this + 44;
    os_unfair_lock_lock(this + 44);
    uint64_t v7 = *(char **)&this[48]._os_unfair_lock_opaque;
    BOOL v6 = (char *)&this[48];
    uint64_t v5 = v7;
    if (v7)
    {
      BOOL v8 = v6;
      do
      {
        unsigned int v9 = *((_DWORD *)v5 + 8);
        BOOL v10 = v9 >= a2;
        if (v9 >= a2) {
          int v11 = (char **)v5;
        }
        else {
          int v11 = (char **)(v5 + 8);
        }
        if (v10) {
          BOOL v8 = v5;
        }
        uint64_t v5 = *v11;
      }
      while (*v11);
      if (v8 != v6 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v12 = *((void *)v8 + 5);
        os_unfair_lock_unlock(v4);
        return v12;
      }
    }
    os_unfair_lock_unlock(v4);
  }
  else
  {
    as::server::LegacySessionManager::RemoveSessionFromMicrophoneInjectionModeMap(this, a2, (uint64_t)v14);
  }
  return 0;
}

BOOL as::server::LegacySessionManager::SetPreferredMicrophoneInjectionMode(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a2;
  unsigned int v10 = a3;
  BOOL v5 = as::server::LegacySessionManager::SessionIDIsValid(a1, a3);
  if (v5)
  {
    BOOL v6 = a1 + 44;
    os_unfair_lock_lock(a1 + 44);
    uint64_t v7 = (as::server *)std::map<unsigned int,AVAudioSessionMicrophoneInjectionMode>::insert_or_assign[abi:ne180100]<AVAudioSessionMicrophoneInjectionMode&>((uint64_t)&a1[46], &v10, &v11);
    BOOL v8 = *(id *)as::server::gSessionServerLog(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315906;
      BOOL v13 = "ServerSessionManager.mm";
      __int16 v14 = 1024;
      int v15 = 1182;
      __int16 v16 = 2048;
      uint64_t v17 = v11;
      __int16 v18 = 1024;
      unsigned int v19 = v10;
      _os_log_impl(&dword_1CFE2A000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Setting for PreferredMicrophoneInjectionMode to %ld for session: 0x%x", buf, 0x22u);
    }
    os_unfair_lock_unlock(v6);
  }
  else
  {
    as::server::LegacySessionManager::RemoveSessionFromMicrophoneInjectionModeMap(a1, a3, (uint64_t)buf);
  }
  return v5;
}

void sub_1CFE83758(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::map<unsigned int,AVAudioSessionMicrophoneInjectionMode>::insert_or_assign[abi:ne180100]<AVAudioSessionMicrophoneInjectionMode&>(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3)
  {
    uint64_t v5 = a1 + 8;
    return std::__tree<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>>>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&,AVAudioSessionMicrophoneInjectionMode&>((uint64_t **)a1, (uint64_t *)v5, a2, a2, a3);
  }
  unsigned int v4 = *a2;
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      BOOL v8 = (uint64_t *)v3;
    }
    else {
      BOOL v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 8 || v4 < *(_DWORD *)(v5 + 32)) {
    return std::__tree<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>>>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&,AVAudioSessionMicrophoneInjectionMode&>((uint64_t **)a1, (uint64_t *)v5, a2, a2, a3);
  }
  *(void *)(v5 + 40) = *a3;
  return (_DWORD *)v5;
}

uint64_t as::server::LegacySessionManager::MicrophoneInjectionIsEnabled(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 44;
  os_unfair_lock_lock(this + 44);
  uint64_t os_unfair_lock_opaque_low = LOBYTE(this[52]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v2);
  return os_unfair_lock_opaque_low;
}

void as::server::LegacySessionManager::SetMicrophoneInjectionIsEnabled(os_unfair_lock_s *this, uint64_t a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = this + 44;
  os_unfair_lock_lock(this + 44);
  int os_unfair_lock_opaque_low = LOBYTE(this[52]._os_unfair_lock_opaque);
  LOBYTE(this[52]._os_unfair_lock_opaque) = a2;
  os_unfair_lock_unlock(v4);
  if (os_unfair_lock_opaque_low != a2)
  {
    unsigned int v9 = @"AVAudioSessionMicrophoneInjectionIsAvailableKey";
    unsigned int v6 = [NSNumber numberWithBool:a2];
    v10[0] = v6;
    BOOL v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];

    as::server::HandleMicrophoneInjectionCapabilityChangeNotification(v7, v8);
  }
}

void sub_1CFE83914(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::SubscribeToMicrophoneInjectionCapabilityChangeNotification(os_unfair_lock_s *this, audit_token_t *a2, NSString *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  unsigned int v6 = this + 44;
  os_unfair_lock_lock(this + 44);
  unsigned int v10 = *(uint64_t ***)&this[54]._os_unfair_lock_opaque;
  BOOL v8 = (uint64_t **)&this[54];
  unsigned int v9 = v10;
  uint64_t v11 = v8 + 1;
  if (v10 != v8 + 1)
  {
    while (1)
    {
      BOOL v7 = (as::server *)[v9[4] isEqualToString:v5];
      if (v7) {
        break;
      }
      uint64_t v12 = v9[1];
      if (v12)
      {
        do
        {
          BOOL v13 = (uint64_t **)v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          BOOL v13 = (uint64_t **)v9[2];
          BOOL v14 = *v13 == (uint64_t *)v9;
          unsigned int v9 = v13;
        }
        while (!v14);
      }
      unsigned int v9 = v13;
      if (v13 == v11) {
        goto LABEL_12;
      }
    }
  }
  if (v9 == v11)
  {
LABEL_12:
    *(void *)__int16 v18 = v5;
    long long v16 = *(_OWORD *)&a2->val[4];
    *(_OWORD *)&unsigned __int8 v18[8] = *(_OWORD *)a2->val;
    *(_OWORD *)&v18[24] = v16;
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},audit_token_t>>(v8, (unint64_t *)v18, (uint64_t)v18);
  }
  else
  {
    long long v15 = *(_OWORD *)a2->val;
    *(_OWORD *)(v9 + 7) = *(_OWORD *)&a2->val[4];
    *(_OWORD *)(v9 + 5) = v15;
  }
  uint64_t v17 = *(id *)as::server::gSessionServerLog(v7);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int16 v18 = 136315650;
    *(void *)&v18[4] = "ServerSessionManager.mm";
    *(_WORD *)&v18[12] = 1024;
    *(_DWORD *)&v18[14] = 1237;
    *(_WORD *)&unsigned char v18[18] = 2112;
    *(void *)&v18[20] = v5;
    _os_log_impl(&dword_1CFE2A000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Process :%@ has subscribed for MicrophoneInjectionCapabilityChangeNotification", v18, 0x1Cu);
  }
  os_unfair_lock_unlock(v6);
}

void sub_1CFE83AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::GetMicrophoneInjectionSubscribersList(os_unfair_lock_s *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v10[0] = 0;
  v10[1] = 0;
  unsigned int v9 = (uint64_t *)v10;
  unsigned int v4 = this + 44;
  os_unfair_lock_lock(this + 44);
  if (&v9 != (uint64_t **)&this[54]) {
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<NSString * {__strong},audit_token_t>,std::__tree_node<std::__value_type<NSString * {__strong},audit_token_t>,void *> *,long>>(&v9, *(void **)&this[54]._os_unfair_lock_opaque, &this[56]._os_unfair_lock_opaque);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v5 = v9;
  if (v9 != (uint64_t *)v10)
  {
    do
    {
      as::server::LegacySessionManager::GetSessionIDsForToken(this, (const audit_token_t *)(v5 + 5), (char **)&__p);
      std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::vector<unsigned int> *)a2, *(void *)(a2 + 8), (char *)__p, v12, (v12 - (unsigned char *)__p) >> 2);
      if (__p)
      {
        uint64_t v12 = (char *)__p;
        operator delete(__p);
      }
      unsigned int v6 = (uint64_t *)v5[1];
      if (v6)
      {
        do
        {
          BOOL v7 = v6;
          unsigned int v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          BOOL v7 = (uint64_t *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != (uint64_t *)v10);
  }
  std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy((uint64_t)&v9, v10[0]);
}

void sub_1CFE83C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13)
{
  os_unfair_lock_unlock(v14);
  std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy((uint64_t)&a9, a10);
  long long v16 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

CFDictionaryRef as::server::LegacySessionManager::GetSessionsWithMicrophoneInjectionPreference(os_unfair_lock_s *this)
{
  uint64_t v1 = this + 44;
  uint64_t v2 = this + 46;
  os_unfair_lock_lock(this + 44);
  applesauce::CF::make_DictionaryRef<unsigned int,AVAudioSessionMicrophoneInjectionMode>(v2, &v5);
  CFDictionaryRef v3 = v5;
  os_unfair_lock_unlock(v1);
  return v3;
}

void sub_1CFE83CC0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::make_DictionaryRef<unsigned int,AVAudioSessionMicrophoneInjectionMode>(void *a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  memset(v11, 0, sizeof(v11));
  std::vector<applesauce::CF::TypeRefPair>::reserve(v11, a1[2]);
  unsigned int v6 = (void *)*a1;
  unsigned int v4 = a1 + 1;
  CFDictionaryRef v5 = v6;
  if (v6 != v4)
  {
    do
    {
      std::vector<applesauce::CF::TypeRefPair>::emplace_back<unsigned int const&,AVAudioSessionMicrophoneInjectionMode const&>(v11, (int *)v5 + 8, v5 + 5);
      BOOL v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          CFDictionaryRef v5 = v8;
        }
        while (!v9);
      }
      CFDictionaryRef v5 = v8;
    }
    while (v8 != v4);
  }
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef(v11);
  uint64_t v12 = v11;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  *a2 = CFDictionaryRef;
}

void sub_1CFE83D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL as::server::LegacySessionManager::UserAllowsMicrophoneInjection(as::server::LegacySessionManager *this)
{
  return _AXSAllowsMixToUplink() != 0;
}

void std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void *std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__init_with_size[abi:ne180100]<std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1CFE83E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unsigned int v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *unsigned int v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    CFDictionaryRef v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 -= 16;
  }
}

void std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<as::server::AudioSessionInfo> *,std::shared_ptr<as::server::AudioSessionInfo> *,std::shared_ptr<as::server::AudioSessionInfo> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      char v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    CFDictionaryRef v3 = (void **)(*a1 + 8);
    do
    {
      --v2;
      unsigned int v4 = *v3;
      v3 += 2;
    }
    while (v2);
  }
  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

unsigned int *std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (unsigned int *)__dst;
  if (a5 < 1) {
    return v5;
  }
  long long v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  uint64_t v10 = value;
  unint64_t v12 = *((void *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begiuint64_t n = a1->__begin_;
    unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)begin) >> 2;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      __int16 v18 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v17);
    }
    else {
      __int16 v18 = 0;
    }
    long long v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    id v30 = &v28[a5];
    do
    {
      unsigned int v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    uint64_t v5 = std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
    }
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    BOOL v21 = &__src[4 * a5];
    uint64_t v23 = (unsigned int *)*((void *)p_end_cap - 1);
LABEL_17:
    unsigned int v24 = &v5[a5];
    long long v25 = &v23[-a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        unsigned int v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24) {
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    }
    if (v21 != (char *)v7) {
      memmove(v5, v7, v21 - (char *)v7);
    }
    return v5;
  }
  BOOL v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1CFE8429C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  begiuint64_t n = __v->__begin_;
  std::vector<unsigned int>::pointer v6 = this->__begin_;
  long long v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<unsigned int>::pointer v8 = __p;
    long long v7 = __v->__begin_;
    do
    {
      unsigned int v9 = *--v8;
      *--long long v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  std::vector<char>::pointer end = this->__end_;
  std::__split_buffer<unsigned int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    long long v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  uint64_t v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::destroy(a1, a2[1]);
    unsigned int v4 = (std::__shared_weak_count *)a2[10];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  CFDictionaryRef v3 = *(void **)a1;
}

void std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t std::default_delete<caulk::synchronized<as::server::DeviceTimeObserver,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::DeviceTimeObserver>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CFDictionaryRef v3 = (void **)(a2 + 8);
    uint64_t v5 = (void **)(a2 + 56);
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__destroy_vector::operator()[abi:ne180100](&v5);
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::~vector((void *)(a2 + 32));
    uint64_t v5 = v3;
    std::vector<as::server::DeviceTimeObserver::SharedBlockOwner>::__destroy_vector::operator()[abi:ne180100](&v5);
    return MEMORY[0x1D25E1860](a2, 0x1020C40944F807DLL);
  }
  return result;
}

void std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::__destroy_at[abi:ne180100]<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    CFDictionaryRef v3 = (std::__shared_weak_count **)(*a1 + 16);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

void std::vector<as::server::DeviceTimeObserver::SharedBlockOwner>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        as::server::DeviceTimeObserver::SharedBlockOwner::~SharedBlockOwner((as::server::DeviceTimeObserver::SharedBlockOwner *)(v4 - 128));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<as::server::AudioSessionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26886C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::AudioSessionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26886C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25E1860);
}

uint64_t std::__shared_ptr_emplace<as::server::AudioSessionInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::find(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v14 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v13 = v4 + 16 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,false>,int>(&v14, &v13, a2, a3);
  uint64_t v9 = a1[1];
  if (*a1) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  if (!v10) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v11 = *a1 + 16 * v9;
  int64_t v12 = (int *)*a3;
  if (*a3 != v11)
  {
    if (!v12) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v12) {
      *a3 = v11;
    }
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,false>,int>(void *a1@<X1>, void *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 4;
    int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      std::vector<unsigned int>::pointer v8 = &v4[4 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 4;
        *a1 = v8 + 4;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::insert_unique(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v13 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v15 = (int *)v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = (int *)(v4 + 16 * v5);
  BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v15, &v14, a2, &v13);
  *(unsigned char *)(a3 + 8) = inserted;
  if (inserted)
  {
    uint64_t v15 = v13;
    uint64_t v10 = *a1;
    if (*a1 > (unint64_t)v13) {
      goto LABEL_15;
    }
    uint64_t v11 = a1[1];
    if (!v10 && v11) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    if ((unint64_t)v13 > v10 + 16 * v11) {
LABEL_15:
    }
      boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique();
    boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(a1, (uint64_t *)&v15, (const char *)1, (uint64_t)a2, (uint64_t *)&v14);
    int64_t v12 = v14;
  }
  else
  {
    int64_t v12 = v13;
    if (!*a1 && v13) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
  }
  *(void *)a3 = v12;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, int **a3, int *a4, int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,true>,int>(&v12, &v11, a4, &v13);
  uint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,true>,int>(void *a1@<X1>, void *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 4;
    int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[4 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 4;
        *a1 = v8 + 4;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  if (v7 < v6) {
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>();
  }
  uint64_t v10 = *a2;
  if (v7 - v6 < (unint64_t)a3)
  {
    uint64_t v21 = *a2;
    boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(a1, v21, a3, a4, a5);
  }
  else
  {
    if (v7 == v6) {
      boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>();
    }
    uint64_t v11 = *a1 + 16 * v6;
    if (v11 == v10)
    {
      *(_DWORD *)uint64_t v10 = *(_DWORD *)a4;
      uint64_t v20 = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = 0;
      *(void *)(v11 + 8) = v20;
      ++a1[1];
    }
    else
    {
      uint64_t v12 = v11 - 16;
      *(_DWORD *)uint64_t v11 = *(_DWORD *)(v11 - 16);
      uint64_t v13 = *(void *)(v11 - 8);
      *(void *)(v11 - 8) = 0;
      *(void *)(v11 + 8) = v13;
      ++a1[1];
      if (v11 - 16 != v10)
      {
        uint64_t v14 = v11 - 16;
        do
        {
          int v15 = *(_DWORD *)(v14 - 16);
          v14 -= 16;
          *(_DWORD *)uint64_t v12 = v15;
          uint64_t v16 = *(void *)(v12 - 8);
          *(void *)(v12 - 8) = 0;
          unint64_t v17 = *(void **)(v12 + 8);
          *(void *)(v12 + 8) = v16;

          uint64_t v12 = v14;
        }
        while (v14 != v10);
      }
      *(_DWORD *)uint64_t v10 = *(_DWORD *)a4;
      uint64_t v18 = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = 0;
      uint64_t v19 = *(void **)(v10 + 8);
      *(void *)(v10 + 8) = v18;
    }
    *a5 = *a2;
  }
}

void boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 59) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = operator new(16 * v11);
  boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 - v2 >= (unint64_t)a2) {
    boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>();
  }
  unint64_t v4 = 0x7FFFFFFFFFFFFFFLL;
  if (0x7FFFFFFFFFFFFFFLL - v3 < (unint64_t)&a2[v2 - v3]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v3 >> 61;
  unint64_t v6 = 8 * v3;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  uint64_t v9 = &a2[v2];
  if (v8 < 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v4 = v8;
  }
  if ((unint64_t)v9 <= v4) {
    return v4;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>((uint64_t)a1, *a1, a4, *a1 + 16 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = (void **)(v10 + 8);
      do
      {
        --v11;
        uint64_t v13 = *v12;
        v12 += 2;
      }
      while (v11);
    }
    operator delete((void *)*a1);
  }
  uint64_t v14 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v14;
  a1[2] = a3;
}

void sub_1CFE84F08(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5;
  if (a2 != a3)
  {
    uint64_t v7 = a5;
    do
    {
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
      uint64_t v8 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(void *)(v7 + 8) = v8;
      v7 += 16;
      a2 += 16;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(_DWORD *)uint64_t v7 = *(_DWORD *)a7;
  uint64_t v9 = *(void *)(a7 + 8);
  *(void *)(a7 + 8) = 0;
  *(void *)(v7 + 8) = v9;
  if (a3 != a4)
  {
    uint64_t v10 = (void *)(v7 + 24);
    do
    {
      *((_DWORD *)v10 - 2) = *(_DWORD *)a3;
      uint64_t v11 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      void *v10 = v11;
      v10 += 2;
      a3 += 16;
    }
    while (a3 != a4);
  }
}

void std::__shared_ptr_emplace<as::server::AudioApplicationInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2688700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::AudioApplicationInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2688700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25E1860);
}

void std::__shared_ptr_emplace<as::server::AudioApplicationInfo>::__on_zero_shared(uint64_t a1)
{
}

void std::__destroy_at[abi:ne180100]<as::server::AudioApplicationInfo,0>(uint64_t a1)
{
  as::server::AudioAppInfoImpl::~AudioAppInfoImpl((id *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t *std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  unint64_t v3 = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(a1, a2);
  unint64_t v4 = (std::__shared_weak_count *)a2[10];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  operator delete(a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::erase(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

_DWORD *std::__tree<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>>>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&,AVAudioSessionMicrophoneInjectionMode&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4, void *a5)
{
  uint64_t v8 = std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__find_equal<unsigned int>(a1, a2, &v13, &v12, a3);
  uint64_t v9 = (_DWORD *)*v8;
  if (!*v8)
  {
    uint64_t v10 = (uint64_t **)v8;
    uint64_t v9 = operator new(0x30uLL);
    unsigned char v9[8] = *a4;
    *((void *)v9 + 5) = *a5;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v13, v10, (uint64_t *)v9);
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},audit_token_t>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (char *)operator new(0x48uLL);
    *((void *)v10 + 4) = *(id *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<NSString * {__strong},audit_token_t>,std::__tree_node<std::__value_type<NSString * {__strong},audit_token_t>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    unint64_t v6 = *result;
    unint64_t v7 = result[1];
    char *result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    int v15 = result;
    uint64_t v16 = v8;
    unint64_t v17 = v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          objc_storeStrong((id *)v8 + 4, (id)v9[4]);
          long long v10 = *(_OWORD *)(v9 + 5);
          *(_OWORD *)(v8 + 7) = *(_OWORD *)(v9 + 7);
          *(_OWORD *)(v8 + 5) = v10;
          std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__node_insert_multi(v5, v8);
          uint64_t v8 = v16;
          unint64_t v17 = v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v12);
          }
          if (!v8) {
            break;
          }
          unint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__emplace_multi<std::pair<NSString * const {__strong},audit_token_t> const&>(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1CFE8552C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  unint64_t v3 = a1 + 1;
  unint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4]) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v4;
        unint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unint64_t v5 = v3 + 1;
  }
  else
  {
    unint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

void *std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    unint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        unint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; unint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          unint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        unint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

char *std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__emplace_multi<std::pair<NSString * const {__strong},audit_token_t> const&>(uint64_t **a1, uint64_t a2)
{
  unint64_t v4 = (char *)operator new(0x48uLL);
  id v5 = *(id *)a2;
  unint64_t v6 = a1 + 1;
  unint64_t v7 = a1[1];
  *((void *)v4 + 4) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 24);
  if (v7)
  {
    do
    {
      while (1)
      {
        unint64_t v6 = (uint64_t **)v7;
        if ((unint64_t)v5 >= v7[4]) {
          break;
        }
        unint64_t v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      unint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v4;
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::erase(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::reserve(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    _OWORD v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(result, a2);
    v7[1] = v7[0] + v5;
    void v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 16 * v6;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1CFE857BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<unsigned int const&,AVAudioSessionMicrophoneInjectionMode const&>(void *a1, int *a2, uint64_t *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v21 = v6;
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v6, v14);
    }
    else {
      int v15 = 0;
    }
    unint64_t v17 = v15;
    uint64_t v18 = (CFNumberRef *)&v15[16 * v11];
    uint64_t v20 = &v15[16 * v14];
    applesauce::CF::TypeRefPair::TypeRefPair<unsigned int const&,AVAudioSessionMicrophoneInjectionMode const&>(v18, a2, a3);
    uint64_t v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    unint64_t v10 = a1[1];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    applesauce::CF::TypeRefPair::TypeRefPair<unsigned int const&,AVAudioSessionMicrophoneInjectionMode const&>(*(CFNumberRef **)(v6 - 8), a2, a3);
    unint64_t v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_1CFE858D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(void ***a1)
{
  uint64_t v2 = ((char *)a1[1] - (char *)*a1) >> 4;
  keys = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  unint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      if (!*v3 || !v3[1])
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D25E15C0](exception, "Could not construct");
      }
      uint64_t v6 = v35;
      if (v35 >= v36)
      {
        uint64_t v8 = v35 - keys;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v9 = ((char *)v36 - (char *)keys) >> 2;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if ((unint64_t)((char *)v36 - (char *)keys) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)&v36, v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = (void **)&v11[8 * v8];
        const char *v12 = v5;
        unint64_t v7 = v12 + 1;
        unint64_t v14 = keys;
        uint64_t v13 = v35;
        if (v35 != keys)
        {
          do
          {
            int v15 = *--v13;
            *--uint64_t v12 = v15;
          }
          while (v13 != v14);
          uint64_t v13 = keys;
        }
        keys = v12;
        uint64_t v35 = v7;
        uint64_t v36 = (void **)&v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        NSObject *v35 = v5;
        unint64_t v7 = v6 + 1;
      }
      uint64_t v35 = v7;
      uint64_t v16 = v3[1];
      unint64_t v17 = v32;
      if (v32 >= v33)
      {
        uint64_t v19 = v32 - values;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = ((char *)v33 - (char *)values) >> 2;
        if (v20 <= v19 + 1) {
          unint64_t v20 = v19 + 1;
        }
        if ((unint64_t)((char *)v33 - (char *)values) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          int64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)&v33, v21);
        }
        else {
          int64_t v22 = 0;
        }
        uint64_t v23 = (void **)&v22[8 * v19];
        *uint64_t v23 = v16;
        uint64_t v18 = v23 + 1;
        long long v25 = values;
        unsigned int v24 = v32;
        if (v32 != values)
        {
          do
          {
            long long v26 = *--v24;
            *--uint64_t v23 = v26;
          }
          while (v24 != v25);
          unsigned int v24 = values;
        }
        values = v23;
        uint64_t v32 = v18;
        uint64_t v33 = (void **)&v22[8 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        NSObject *v32 = v16;
        uint64_t v18 = v17 + 1;
      }
      uint64_t v32 = v18;
      v3 += 2;
    }
    while (v3 != v4);
  }
  CFDictionaryRef v27 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v27)
  {
    id v30 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D25E15C0](v30, "Could not construct");
  }
  if (values)
  {
    uint64_t v32 = values;
    operator delete(values);
  }
  if (keys)
  {
    uint64_t v35 = keys;
    operator delete(keys);
  }
  return v27;
}

void sub_1CFE85BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  __cxa_free_exception(v13);
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void *std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(void *result, void *a2)
{
  unint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(v2 - 2);
    v2 -= 2;
    *(void *)(v4 - 16) = v5;
    v4 -= 16;
    *uint64_t v2 = 0;
    *(void *)(v4 + 8) = v2[1];
    v2[1] = 0;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

CFNumberRef *applesauce::CF::TypeRefPair::TypeRefPair<unsigned int const&,AVAudioSessionMicrophoneInjectionMode const&>(CFNumberRef *a1, int *a2, uint64_t *a3)
{
  int valuePtr = *a2;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v5;
  if (!v5)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D25E15C0](exception, "Could not construct");
  }
  uint64_t v11 = *a3;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongType, &v11);
  a1[1] = v6;
  if (!v6)
  {
    unint64_t v9 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D25E15C0](v9, "Could not construct");
  }
  return a1;
}

void sub_1CFE85E50(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    CFNumberRef v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(v4);
      }
      while ((void *)v4 != v2);
      int64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void anonymous namespace'::IsRemoteDeviceInputControlAllowed()
{
}

void as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()()
{
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump()
{
}

{
  __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 208, "not val.m_value.array->empty()");
}

{
  __assert_rtn("dump", "serializer.hpp", 229, "not val.m_value.array->empty()");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped()
{
}

{
  __assert_rtn("dump_escaped", "serializer.hpp", 562, "false");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>()
{
}

void nlohmann::detail::to_chars<double>()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1100, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1064, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2<double>()
{
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 889, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::format_buffer()
{
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 980, "max_exp > 0");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 926, "e > -1000");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 927, "e < 1000");
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 1006, "k > n");
}

void nlohmann::detail::dtoa_impl::compute_boundaries<double>()
{
}

{
  __assert_rtn("compute_boundaries", "to_chars.hpp", 185, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2()
{
  __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 827, "m_plus.e == m_minus.e");
}

void nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 473, "static_cast<std::size_t>(index) < kCachedPowers.size()");
}

void nlohmann::detail::dtoa_impl::grisu2_digit_gen()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 623, "p1 > 0");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 746, "p2 > delta");
}

void nlohmann::detail::dtoa_impl::grisu2_round()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 548, "ten_k > 0");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
}

void as::server::DeferredMessageState::SendSingleMessage()
{
}

void anonymous namespace'::MergeChangedHardwareObject()
{
}

{
  _os_crash();
  __break(1u);
}

void ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke_cold_1()
{
}

void ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke_cold_2()
{
}

void caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load()
{
}

void as::server::DeviceTimeObserver::createDevice()
{
}

void as::server::DeviceTimeObserver::removeDevice()
{
}

void as::server::DeviceTimeObserver::createSession()
{
}

void as::server::DeviceTimeObserver::addSiblingToSameReferringSessionListsAsSource()
{
}

void as::server::DeviceTimeObserver::removeReferringSessionsFromDevice()
{
}

void as::server::DeviceTimeObserver::unmapSessionToDevice()
{
}

{
  _os_crash();
  __break(1u);
}

void as::server::DeviceTimeObserver::xpcSharedMemoryObject(void *a1, void *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*a1 - *a2) >> 7;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_fault_impl(&dword_1CFE2A000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "DeviceTimeObserver: expected exactly 1 shared block, have %d", (uint8_t *)v3, 8u);
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_move_assign<boost::container::new_allocator<unsigned int>>()
{
  __assert_rtn("priv_move_assign", "vector.hpp", 2480, "this != &x || x.size() == 0");
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique()
{
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>()
{
  __assert_rtn("priv_insert_forward_range", "vector.hpp", 2821, "this->m_holder.capacity() >= this->m_holder.m_size");
}

{
  __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
}

void boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>()
{
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::erase()
{
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::insert<boost::container::vec_iterator<unsigned int *,false>>()
{
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase()
{
}

{
  __assert_rtn("erase", "vector.hpp", 2117, "this->priv_in_range_or_end(last)");
}

{
  __assert_rtn("erase", "vector.hpp", 2118, "first <= last");
}

void boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort()
{
}

void boost::movelib::detail_adaptive::adaptive_merge_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>()
{
  __assert_rtn("adaptive_merge_n_keys_intbuf", "adaptive_merge.hpp", 166, "n_keys >= ((len1-l_intbuf-n_keys)/l_block + len2/l_block)");
}

void boost::movelib::detail_adaptive::lblock_for_combine<unsigned long>()
{
}

{
  __assert_rtn("lblock_for_combine", "adaptive_sort_merge.hpp", 588, "n_keys >= 4");
}

void boost::movelib::detail_adaptive::adaptive_merge_combine_blocks<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>()
{
  __assert_rtn("adaptive_merge_combine_blocks", "adaptive_merge.hpp", 94, "xbuf.size() >= l_block");
}

{
  __assert_rtn("adaptive_merge_combine_blocks", "adaptive_merge.hpp", 56, "xbuf.size() >= l_block");
}

void boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>()
{
  __assert_rtn("op_merge_with_right_placed", "merge.hpp", 692, "end == r_last");
}

{
  __assert_rtn("op_merge_with_right_placed", "merge.hpp", 688, "(last - first) == (r_first - dest_first)");
}

void boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>()
{
  __assert_rtn("op_merge_with_left_placed", "merge.hpp", 729, "last == res");
}

{
  __assert_rtn("op_merge_with_left_placed", "merge.hpp", 725, "(dest_last - last) == (r_last - r_first)");
}

void boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>()
{
}

void boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until()
{
}

void boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>()
{
  __assert_rtn("combine_params", "adaptive_sort_merge.hpp", 717, "n_reg_block>=n_block_a");
}

{
  __assert_rtn("combine_params", "adaptive_sort_merge.hpp", 713, "((l_combined-l_irreg1-l_irreg2)%l_block) == 0");
}

void boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>()
{
  __assert_rtn("op_merge_blocks_with_buf", "adaptive_sort_merge.hpp", 1383, "(dest-last1) == (buffer_end-buffer)");
}

{
  __assert_rtn("op_merge_blocks_with_buf", "adaptive_sort_merge.hpp", 1350, "(is_range2_A && n_block_a_left) || (!is_range2_A && n_block_b_left)");
}

{
  __assert_rtn("op_merge_blocks_with_buf", "adaptive_sort_merge.hpp", 1317, "buffer_empty || res == last1");
}

{
  __assert_rtn("op_merge_blocks_with_buf", "adaptive_sort_merge.hpp", 1331, "is_range_1_empty || (buffer_end-buffer) == (last1+l_block-unmerged)");
}

void boost::movelib::detail_adaptive::initialize_keys<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>()
{
}

void boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>()
{
  __assert_rtn("find_next_block", "adaptive_sort_merge.hpp", 292, "ix_first_block <= ix_last_block");
}

void boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>()
{
  __assert_rtn("op_partial_merge_and_save_impl", "adaptive_sort_merge.hpp", 908, "(last1-first1) == (buf_last1 - buf_first1)");
}

void boost::movelib::detail_adaptive::stable_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>()
{
}

void boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>::move_assign<unsigned int *>()
{
  __assert_rtn("move_assign", "merge.hpp", 236, "size_type(n) <= size_type(m_cap-m_first)");
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>()
{
  __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 181, "n == 1");
}

void ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_cold_2(id *a1)
{
  if (os_log_type_enabled((os_log_t)*a1, OS_LOG_TYPE_ERROR))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_1CFE2A000, v1, v2, "%25s:%-5d Unexpected null session reference", v3, v4, v5, v6, v7);
  }
}

void ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_82_cold_2(id *a1)
{
  if (os_log_type_enabled((os_log_t)*a1, OS_LOG_TYPE_ERROR))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_1CFE2A000, v1, v2, "%25s:%-5d Unexpected null session reference", v3, v4, v5, v6, v7);
  }
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique()
{
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>()
{
  __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
}

void as::server::ConstAudioSessionInfo::CreateMXSession()
{
}

void as::server::ConstAudioSessionInfo::CreateCMSession()
{
}

void as::server::ConstAudioSessionInfo::CreateCMSession(as::server *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(id *)as::server::gSessionServerLog(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315394;
    uint64_t v3 = "AudioSessionInfo.mm";
    __int16 v4 = 1024;
    int v5 = 402;
    _os_log_impl(&dword_1CFE2A000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR in CreateCMSession. mCMSession already exists!", (uint8_t *)&v2, 0x12u);
  }
  _os_crash();
  __break(1u);
}

void as::server::AudioSessionInfo::SetSiblingPlayerState()
{
}

{
  _os_crash();
  __break(1u);
}

void as::server::require_acq::MuteAudioSessions()
{
}

OSStatus AudioObjectGetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *ioDataSize, void *outData)
{
  return MEMORY[0x1F40D6FF8](*(void *)&inObjectID, inAddress, *(void *)&inQualifierDataSize, inQualifierData, ioDataSize, outData);
}

uint64_t CACentralStateDumpRegisterSubsystem()
{
  return MEMORY[0x1F410B6A0]();
}

uint64_t CAReportingClientSendMessage()
{
  return MEMORY[0x1F4179758]();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E08](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F28](allocator, propertyList, mutabilityOption);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.locatiouint64_t n = v3;
  return result;
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

uint64_t CMNotificationCenterAddListener()
{
  return MEMORY[0x1F40DBCA8]();
}

uint64_t CMNotificationCenterGetDefaultLocalCenter()
{
  return MEMORY[0x1F40DBCB8]();
}

uint64_t CMNotificationCenterRemoveListener()
{
  return MEMORY[0x1F40DBCD8]();
}

uint64_t CMSessionCreateForRemoteDeviceID()
{
  return MEMORY[0x1F412C9C0]();
}

uint64_t CMSessionMgrCopyPickableRoutesForCategoryAndMode()
{
  return MEMORY[0x1F412C9E8]();
}

uint64_t CreateACQDispatchID()
{
  return MEMORY[0x1F410B6B8]();
}

uint64_t LogACQEvents()
{
  return MEMORY[0x1F410B768]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MXSessionBeginInterruption_WithSecTaskAndFlags()
{
  return MEMORY[0x1F412CB50]();
}

uint64_t MXSessionCopyProperty()
{
  return MEMORY[0x1F412CB60]();
}

uint64_t MXSessionCreate()
{
  return MEMORY[0x1F412CB68]();
}

uint64_t MXSessionCreateWithOptions()
{
  return MEMORY[0x1F412CB70]();
}

uint64_t MXSessionEndInterruption_WithInterruptionNotification()
{
  return MEMORY[0x1F412CB78]();
}

uint64_t MXSessionEndInterruption_WithSecTaskAndStatus()
{
  return MEMORY[0x1F412CB80]();
}

uint64_t MXSessionSetProperty()
{
  return MEMORY[0x1F412CB90]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

uint64_t WriteStackshotReportWithPID()
{
  return MEMORY[0x1F4116EC0]();
}

uint64_t _AXSAllowsMixToUplink()
{
  return MEMORY[0x1F41788B0]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _MXSessionBeginInterruption_WithSecTaskAndFlags()
{
  return MEMORY[0x1F412CBD0]();
}

uint64_t _MXSessionCopyProperty()
{
  return MEMORY[0x1F412CBD8]();
}

uint64_t _MXSessionEndInterruption_WithSecTaskAndStatus()
{
  return MEMORY[0x1F412CBE8]();
}

uint64_t _MXSessionSetProperty()
{
  return MEMORY[0x1F412CBF8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t NSErrorWithString(NSString *a1)
{
  return MEMORY[0x1F410B2E0](a1);
}

uint64_t NSErrorUnimplemented(void)
{
  return MEMORY[0x1F410B2E8]();
}

void PB::Base::~Base(PB::Base *this)
{
}

uint64_t as::WorkloopPool::dispatchAsync()
{
  return MEMORY[0x1F410B318]();
}

uint64_t as::WorkloopPool::Create(as::WorkloopPool *this)
{
  return MEMORY[0x1F410B320](this);
}

uint64_t as::RouteIdentifier::RouteIdentifier()
{
  return MEMORY[0x1F410B328]();
}

uint64_t as::RouteIdentifier::RouteIdentifier(as::RouteIdentifier *this, const RouteIdentifier *a2)
{
  return MEMORY[0x1F410B330](this, a2);
}

uint64_t as::RouteIdentifier::operator=()
{
  return MEMORY[0x1F410B338]();
}

uint64_t as::GetMXNotificationNames(as *this)
{
  return MEMORY[0x1F410B340](this);
}

uint64_t as::IsStandardMXNotificationName(as *this, NSString *a2)
{
  return MEMORY[0x1F410B350](this, a2);
}

uint64_t as::SetServerXPCListenerEndpoint(as *this, NSXPCListenerEndpoint *a2)
{
  return MEMORY[0x1F410B358](this, a2);
}

uint64_t as::GetSpecialMXNotificationNames(as *this)
{
  return MEMORY[0x1F410B360](this);
}

uint64_t as::server::ControlValue::ControlValue()
{
  return MEMORY[0x1F410B368]();
}

uint64_t as::server::ControlValue::ControlValue(as::server::ControlValue *this, const ControlValue *a2)
{
  return MEMORY[0x1F410B370](this, a2);
}

uint64_t as::server::ControlValue::operator=()
{
  return MEMORY[0x1F410B378]();
}

uint64_t as::server::ChangedObject::mutableObjectDescription(as::server::ChangedObject *this)
{
  return MEMORY[0x1F410B380](this);
}

uint64_t as::server::ObjectDescription::operator=()
{
  return MEMORY[0x1F410B388]();
}

uint64_t as::server::ConfigChangeSummary::mutableHardwareSystemChange(as::server::ConfigChangeSummary *this)
{
  return MEMORY[0x1F410B390](this);
}

uint64_t as::server::ConfigChangeSummary::ConfigChangeSummary(as::server::ConfigChangeSummary *this, const as::server::ConfigChangeSummary *a2)
{
  return MEMORY[0x1F410B398](this, a2);
}

uint64_t as::server::ConfigChangeSummary::operator=()
{
  return MEMORY[0x1F410B3A0]();
}

uint64_t caulk::is_debugger_attached(caulk *this)
{
  return MEMORY[0x1F4177938](this);
}

uint64_t caulk::ipc::mapped_memory::reset(caulk::ipc::mapped_memory *this)
{
  return MEMORY[0x1F4177980](this);
}

uint64_t caulk::ipc::mapped_memory::mapped_memory(caulk::ipc::mapped_memory *this)
{
  return MEMORY[0x1F4177990](this);
}

uint64_t caulk::xpc::reply_watchdog_factory::make_timer(caulk::xpc::reply_watchdog_factory *this)
{
  return MEMORY[0x1F4177A10](this);
}

uint64_t caulk::xpc::reply_watchdog_factory::init2()
{
  return MEMORY[0x1F4177A18]();
}

uint64_t caulk::xpc::reply_watchdog_factory::reply_watchdog_factory(caulk::xpc::reply_watchdog_factory *this)
{
  return MEMORY[0x1F4177A20](this);
}

uint64_t caulk::xstring::move()
{
  return MEMORY[0x1F4177B50]();
}

uint64_t caulk::xstring::clear(caulk::xstring *this)
{
  return MEMORY[0x1F4177B58](this);
}

uint64_t caulk::xstring::assign(caulk::xstring *this, const caulk::xstring *a2)
{
  return MEMORY[0x1F4177B60](this, a2);
}

uint64_t caulk::platform::process_name(caulk::platform *this)
{
  return MEMORY[0x1F4177B68](this);
}

uint64_t as::server::ChangedObject::objectDescription(as::server::ChangedObject *this)
{
  return MEMORY[0x1F410B3A8](this);
}

uint64_t as::server::CustomPropertyAddress::operator==()
{
  return MEMORY[0x1F410B3B0]();
}

uint64_t caulk::xstring::compare(caulk::xstring *this, const caulk::xstring *a2)
{
  return MEMORY[0x1F4177BC8](this, a2);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1F417E350](this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x1F417E430](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E438](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1F417ECA0]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::promise<void>::set_value(std::promise<void> *this)
{
}

void std::promise<void>::~promise(std::promise<void> *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1F417EE98](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __udivti3()
{
  return MEMORY[0x1F40C9D08]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x1F40C9F90]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1F40C9FA0]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t abort_with_reason()
{
  return MEMORY[0x1F40CA1F8]();
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2E8](atoken);
}

int audit_token_to_pidversion(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2F0](atoken);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1F40CBBD8](queue);
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD58](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1F40CBD88]();
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x1F40CC728](*(void *)&a1, *(void *)&a2);
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x1F40CC858]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int reboot_np(int howto, const char *message)
{
  return MEMORY[0x1F40CDCB0](*(void *)&howto, message);
}

int sched_yield(void)
{
  return MEMORY[0x1F40CDEC8]();
}

uint64_t sessionManagerXPCCallbackInterface()
{
  return MEMORY[0x1F410B3B8]();
}

uint64_t sessionManagerXPCInterface()
{
  return MEMORY[0x1F410B3C0]();
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

xpc_object_t xpc_shmem_create(void *region, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CF268](region, length);
}