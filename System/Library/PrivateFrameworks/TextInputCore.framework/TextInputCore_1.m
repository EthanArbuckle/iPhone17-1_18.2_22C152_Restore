void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;

  v6 = (*(float (**)(void))(*(void *)*a2 + 24))();
  v7 = (*(float (**)(void))(*(void *)*a1 + 24))();
  v8 = (*(float (**)(void))(*(void *)*a3 + 24))();
  (*(void (**)(void))(*(void *)*a2 + 24))();
  if (v6 >= v7)
  {
    if (v8 < v9)
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      v12 = (*(float (**)(void))(*(void *)*a2 + 24))();
      if (v12 < (*(float (**)(void))(*(void *)*a1 + 24))())
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  else
  {
    v10 = *a1;
    if (v8 >= v9)
    {
      *a1 = *a2;
      *a2 = v10;
      v14 = (*(float (**)(void))(*(void *)*a3 + 24))();
      if (v14 >= (*(float (**)(void))(*(void *)*a2 + 24))()) {
        return;
      }
      v10 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v10;
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a2, a3);
  float v8 = (*(float (**)(void))(*(void *)*a4 + 24))();
  if (v8 < (*(float (**)(void))(*(void *)*a3 + 24))())
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    float v10 = (*(float (**)(void))(*(void *)*a3 + 24))();
    if (v10 < (*(float (**)(void))(*(void *)*a2 + 24))())
    {
      uint64_t v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      float v12 = (*(float (**)(void))(*(void *)*a2 + 24))();
      if (v12 < (*(float (**)(void))(*(void *)*a1 + 24))())
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a2, a3, a4);
  float v10 = (*(float (**)(void))(*(void *)*a5 + 24))();
  if (v10 < (*(float (**)(void))(*(void *)*a4 + 24))())
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    float v12 = (*(float (**)(void))(*(void *)*a4 + 24))();
    if (v12 < (*(float (**)(void))(*(void *)*a3 + 24))())
    {
      uint64_t v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      float v14 = (*(float (**)(void))(*(void *)*a3 + 24))();
      if (v14 < (*(float (**)(void))(*(void *)*a2 + 24))())
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        float v16 = (*(float (**)(void))(*(void *)*a2 + 24))();
        if (v16 < (*(float (**)(void))(*(void *)*a1 + 24))())
        {
          uint64_t v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = (*(float (**)(void))(*(void *)*(a2 - 1) + 24))(*(a2 - 1));
      if (v6 < (*(float (**)(void))(*(void *)*a1 + 24))())
      {
        uint64_t v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      float v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    float v12 = (*(float (**)(void))(*(void *)*v9 + 24))();
    if (v12 < (*(float (**)(void))(*(void *)*v8 + 24))())
    {
      uint64_t v13 = 0;
      float v14 = (unsigned int *)*v9;
      *uint64_t v9 = 0;
      for (uint64_t i = v10; ; i -= 8)
      {
        float v16 = (char *)a1 + i;
        uint64_t v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((void *)v16 + 2) = 0;
        *((void *)v16 + 3) = v17;
        if (v13)
        {
          unsigned int v18 = atomic_load(v13 + 2);
          if (v18 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v13 + 248))(v13);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
          }
        }
        if (i == -16)
        {
          v21 = (unsigned int **)a1;
          goto LABEL_17;
        }
        v19 = (char *)a1 + i;
        float v20 = (*(float (**)(unsigned int *))(*(void *)v14 + 24))(v14);
        if (v20 >= (*(float (**)(void))(**((void **)v19 + 1) + 24))(*((void *)v19 + 1))) {
          break;
        }
        uint64_t v13 = (unsigned int *)*((void *)v16 + 2);
      }
      v21 = (unsigned int **)(v19 + 16);
LABEL_17:
      v22 = *v21;
      *v21 = v14;
      if (v22)
      {
        unsigned int v23 = atomic_load(v22 + 2);
        if (v23 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v22 + 248))(v22);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v22 + 2, 0xFFFFFFFF);
        }
      }
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    float v8 = v9;
    v10 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

unsigned int *WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct(unsigned int *result, unsigned int **a2)
{
  if (result != (unsigned int *)a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      BOOL result = *v3;
      if (*v3)
      {
        unsigned int v4 = atomic_load(result + 2);
        if (v4 == 1) {
          BOOL result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 248))(result);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

void WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    if (*(void *)a1)
    {
      WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct(*(unsigned int **)(a1 + 8), (unsigned int **)(*(void *)(a1 + 8) + 8 * *(void *)a1));
      *(void *)a1 = 0;
    }
    v2 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    free(v2);
  }
}

__n128 TI::CP::SearchNodeLanguageExtensions::branch_at_current_bound@<Q0>(TI::CP::SearchNodeLanguageExtensions *this@<X0>, __n128 *a2@<X8>)
{
  if (!*((unsigned char *)this + 80) || (uint64_t v4 = *((void *)this + 7)) == 0)
  {
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    return result;
  }
  uint64_t v5 = *((void *)this + 3);
  long long v16 = *((_OWORD *)this + 2);
  if (*((void *)&v16 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = *((void *)this + 7);
  }
  int v6 = *((_DWORD *)this + 12);
  uint64_t v7 = *((void *)this + 8) + 8 * v4;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v7 - 8) = 0;
  uint64_t v9 = (char *)operator new(0xA0uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)uint64_t v9 = &unk_1F3F74F78;
  uint64_t v10 = v9 + 24;
  *((void *)v9 + 4) = 0;
  *((void *)v9 + 5) = 0;
  *((void *)v9 + 6) = v5;
  *(_OWORD *)(v9 + 56) = v16;
  *((_DWORD *)v9 + 18) = v6;
  *((void *)v9 + 10) = 0;
  *((void *)v9 + 11) = v8;
  *((_WORD *)v9 + 52) = 256;
  v9[106] = 0;
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + 8) = 0u;
  *((_OWORD *)v9 + 9) = 0u;
  *((void *)v9 + 3) = &unk_1F3F749B0;
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)(v9 + 24));
  v11.n128_u64[0] = (unint64_t)(v9 + 24);
  v11.n128_u64[1] = (unint64_t)v9;
  float v12 = (std::__shared_weak_count *)*((void *)v9 + 5);
  __n128 v17 = v11;
  if (!v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 2, 1uLL, memory_order_relaxed);
    *((void *)v9 + 4) = v10;
    *((void *)v9 + 5) = v9;
    goto LABEL_10;
  }
  if (v12->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 2, 1uLL, memory_order_relaxed);
    *((void *)v9 + 4) = v10;
    *((void *)v9 + 5) = v9;
    std::__shared_weak_count::__release_weak(v12);
LABEL_10:
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v9);
  }
  uint64_t v13 = *((void *)this + 7);
  uint64_t v14 = v13 - 1;
  WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct((unsigned int *)(*((void *)this + 8) + 8 * (v13 - 1)), (unsigned int **)(*((void *)this + 8) + 8 * v13));
  *((void *)this + 7) = v14;
  TI::CP::SearchNodeLanguageExtensions::compute_bound_on_score(this);
  __n128 result = v17;
  *a2 = v17;
  return result;
}

double TI::CP::SearchNode::compute_score(TI::CP::SearchNode *this)
{
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 16) = *(void *)(v2 + 128);
  *((_OWORD *)this + 7) = *(_OWORD *)(v2 + 112);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN2TI2CP10SearchNode13compute_scoreEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_48;
  v4[4] = this;
  (*(void (**)(TI::CP::SearchNode *, void *))(*(void *)this + 176))(this, v4);
  *((unsigned char *)this + 80) = (*(uint64_t (**)(TI::CP::SearchNode *))(*(void *)this + 168))(this);
  double result = *((double *)this + 15) + *((double *)this + 14) + *((double *)this + 16);
  *((double *)this + 9) = result;
  return result;
}

double ___ZN2TI2CP10SearchNode13compute_scoreEv_block_invoke(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7)
{
  if (a2 <= 8)
  {
    uint64_t v7 = *(double **)(a1 + 32);
    uint64_t v8 = v7 + 14;
    uint64_t v9 = v7 + 15;
    uint64_t v10 = v7 + 16;
    if (((1 << a2) & 0x8E) != 0) {
      uint64_t v10 = v9;
    }
    if (((1 << a2) & 0x71) != 0) {
      uint64_t v10 = v8;
    }
    double result = *v10 + a7;
    *uint64_t v10 = result;
  }
  return result;
}

uint64_t TI::CP::SearchNodeKeySubstitution::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = (double *)(*(void *)(*(void *)(a1 + 24) + 56) + 48 * v4);
  double v7 = *v5;
  double v6 = v5[1];
  char v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32));
  uint64_t v9 = *(unsigned int **)(a1 + 32);
  uint64_t v10 = (double *)MEMORY[0x1E4F1DAD8];
  if (v8)
  {
    uint64_t v11 = 0;
    float v12 = (double *)MEMORY[0x1E4F1DAD8];
  }
  else
  {
    uint64_t v11 = v9[12];
    float v12 = (double *)(*(void *)(*(void *)(a1 + 24) + 56) + 48 * v11);
  }
  double v14 = *v12;
  double v13 = v12[1];
  if (((*(uint64_t (**)(unsigned int *))(*(void *)v9 + 72))(v9) & 1) == 0)
  {
    double v15 = TI::CP::Search::path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v11, v4, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 1, v11, v4, v14, v13, v7, v6, v15);
  }
  uint64_t v16 = *(void *)(a1 + 64);
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16) + 56);
    double v18 = *v10;
    double v19 = v10[1];
    uint64_t v20 = *(void *)(a1 + 24);
    float v21 = (*(float (**)(void))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64));
    float v22 = logf(v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 8, v4, v17, v7, v6, v18, v19, *(double *)(v20 + 440) * v22);
  }
  double v23 = *v10;
  unint64_t v24 = *((void *)v10 + 1);
  v25.n128_u64[0] = TI::CP::Search::key_substitution_cost(*(TI::CP::Search **)(a1 + 24), v4);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, __n128, __n128, __n128, __n128, __n128))(a2 + 16);
  v27.n128_f64[0] = v7;
  v28.n128_f64[0] = v6;
  v29.n128_f64[0] = v23;
  v30.n128_u64[0] = v24;

  return v26(a2, 5, v4, 0, v27, v28, v29, v30, v25);
}

uint64_t TI::CP::SearchNodeKeySubstitution::is_score_final(TI::CP::SearchNodeKeySubstitution *this)
{
  return 1;
}

float TI::CP::SearchNode::ideal_path_length(TI::CP::SearchNode *this)
{
  float v2 = 0.0;
  if (((*(uint64_t (**)(TI::CP::SearchNode *))(*(void *)this + 72))(this) & 1) == 0
    && ((*(uint64_t (**)(void))(**((void **)this + 4) + 72))(*((void *)this + 4)) & 1) == 0)
  {
    v3 = (unsigned int *)*((void *)this + 4);
    uint64_t v4 = *(void *)(*((void *)this + 3) + 56);
    uint64_t v5 = (double *)(v4 + 48 * v3[12]);
    double v6 = *v5;
    double v7 = v5[1];
    char v8 = (double *)(v4 + 48 * *((unsigned int *)this + 12));
    double v9 = *v8;
    double v10 = v8[1];
    double v11 = (*(float (**)(unsigned int *))(*(void *)v3 + 160))(v3);
    return hypot(v9 - v6, v10 - v7) + v11;
  }
  return v2;
}

uint64_t TI::CP::SearchNode::key_prediction_count(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::ends_with_punctuation(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_key_prediction_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_terminal_space_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_transposition_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNodeKeySubstitution::is_key_substitution_hypothesis(TI::CP::SearchNodeKeySubstitution *this)
{
  return 1;
}

uint64_t TI::CP::SearchNode::is_key_match_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_loop_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_overshoot_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_skipped_key_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_root(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::description@<X0>(TI::CP::SearchNode *this@<X0>, void *a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v17, (uint64_t)"<[", 2);
  (*(void (**)(void ***__return_ptr))(**((void **)this + 8) + 224))(&v21);
  uint64_t v4 = v22;
  if (!v22) {
    uint64_t v4 = (const char *)&v23;
  }
  if ((_WORD)v21) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = "";
  }
  size_t v6 = strlen(v5);
  double v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v17, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"]", 1);
  if (v22 && BYTE6(v21) == 1) {
    free(v22);
  }
  if (((*(uint64_t (**)(TI::CP::SearchNode *))(*(void *)this + 72))(this) & 1) == 0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v17, (uint64_t)" n=", 3);
    TI::CP::SearchNode::sample_indices_string(this, &v21);
    char v8 = v23 >= 0 ? (void **)&v21 : v21;
    double v9 = v23 >= 0 ? (char *)HIBYTE(v23) : v22;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v17, (uint64_t)v8, (uint64_t)v9);
    if (SHIBYTE(v23) < 0) {
      operator delete(v21);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v17, (uint64_t)" s=", 3);
  double v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)" pd=", 4);
  double v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)" kd=", 4);
  float v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" l=", 3);
  double v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)">", 1);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v18);
  v16[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v17 = v14;
  v18[0] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E4E7BBB0](&v20);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v3 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  size_t v6 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v8;
  *(void *)(a1 + *(void *)(v8 - 24)) = v7;
  *(void *)(a1 + 8) = 0;
  double v9 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v9, (void *)(a1 + 24));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v10 = v6[5];
  uint64_t v11 = v6[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v4 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v6[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v6[6];
  *(void *)a1 = v2;
  *(void *)(a1 + 128) = v3;
  *(void *)(a1 + 16) = v5;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E7B9E0](v19, a1);
  if (v19[0])
  {
    size_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    uint64_t v8 = a2 + a3;
    if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20) {
      uint64_t v9 = a2 + a3;
    }
    else {
      uint64_t v9 = a2;
    }
    int v10 = *((_DWORD *)v6 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v11 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v10;
      if (!v7)
      {
LABEL_24:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
        goto LABEL_25;
      }
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    uint64_t v12 = *((void *)v6 + 3);
    BOOL v13 = v12 <= a3;
    int64_t v14 = v12 - a3;
    if (v13) {
      int64_t v15 = 0;
    }
    else {
      int64_t v15 = v14;
    }
    if (v9 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v9 - a2) != v9 - a2)
    {
      goto LABEL_24;
    }
    if (v15 >= 1)
    {
      std::string::basic_string[abi:nn180100](&__b, v15, (char)v10);
      uint64_t v16 = v21 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v17 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(void *)v7 + 96))(v7, v16, v15);
      if (v21 < 0) {
        operator delete(__b.__locale_);
      }
      if (v17 != v15) {
        goto LABEL_24;
      }
    }
    if (v8 - v9 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v9, v8 - v9) != v8 - v9)
    {
      goto LABEL_24;
    }
    *((void *)v6 + 3) = 0;
  }
LABEL_25:
  MEMORY[0x1E4E7B9F0](v19);
  return a1;
}

void TI::CP::SearchNode::sample_indices_string(TI::CP::SearchNode *this@<X0>, void *a2@<X8>)
{
  int64x2_t v42 = 0uLL;
  v43 = 0;
  uint64_t v2 = MEMORY[0x1E4FBA408];
  if (this)
  {
    uint64_t v3 = this;
    v33 = (void **)*MEMORY[0x1E4FBA408];
    uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    v32 = *(void ***)(MEMORY[0x1E4FBA408] + 64);
    while (1)
    {
      if ((*(uint64_t (**)(TI::CP::SearchNode *))(*(void *)v3 + 72))(v3)) {
        goto LABEL_43;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v36);
      if (((*(uint64_t (**)(TI::CP::SearchNode *))(*(void *)v3 + 104))(v3) & 1) == 0
        && !(*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 112))(v3))
      {
        break;
      }
      std::ostream::operator<<();
LABEL_15:
      std::stringbuf::str[abi:nn180100]<std::allocator<char>>(__p, (uint64_t)v38);
      uint64_t v8 = v42.i64[1];
      if (v42.i64[1] >= (unint64_t)v43)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v42.i64[1] - v42.i64[0]) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * (((uint64_t)v43 - v42.i64[0]) >> 3) > v10) {
          unint64_t v10 = 0x5555555555555556 * (((uint64_t)v43 - v42.i64[0]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v43 - v42.i64[0]) >> 3) >= 0x555555555555555) {
          unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v11 = v10;
        }
        v44.__end_cap_.__value_ = (std::allocator<std::string> *)&v43;
        if (v11) {
          unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        unint64_t v13 = v11 + 24 * v9;
        *(void *)(v13 + 16) = v35;
        *(_OWORD *)unint64_t v13 = *(_OWORD *)__p;
        __p[1] = 0;
        uint64_t v35 = 0;
        __p[0] = 0;
        uint64_t v14 = v42.i64[1];
        uint64_t v15 = v42.i64[0];
        if (v42.i64[1] == v42.i64[0])
        {
          char v19 = 0;
          int64x2_t v18 = vdupq_n_s64(v42.u64[1]);
          unint64_t v16 = v13;
        }
        else
        {
          unint64_t v16 = v11 + 24 * v9;
          do
          {
            long long v17 = *(_OWORD *)(v14 - 24);
            *(void *)(v16 - 8) = *(void *)(v14 - 8);
            *(_OWORD *)(v16 - 24) = v17;
            v16 -= 24;
            *(void *)(v14 - 16) = 0;
            *(void *)(v14 - 8) = 0;
            *(void *)(v14 - 24) = 0;
            v14 -= 24;
          }
          while (v14 != v15);
          int64x2_t v18 = v42;
          char v19 = HIBYTE(v35);
        }
        unint64_t v20 = v13 + 24;
        v42.i64[0] = v16;
        v42.i64[1] = v13 + 24;
        *(int64x2_t *)&v44.__begin_ = v18;
        char v21 = v43;
        v43 = (std::string *)(v11 + 24 * v12);
        v44.__end_cap_.__value_ = v21;
        v44.__first_ = (std::__split_buffer<std::string>::pointer)v18.i64[0];
        std::__split_buffer<std::string>::~__split_buffer(&v44);
        v42.i64[1] = v20;
        uint64_t v2 = MEMORY[0x1E4FBA408];
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_OWORD *)v42.i64[1] = *(_OWORD *)__p;
        *(void *)(v8 + 16) = v35;
        v42.i64[1] = v8 + 24;
      }
      uint64_t v3 = (TI::CP::SearchNode *)*((void *)v3 + 4);
      v36[0] = v33;
      *(void ***)((char *)v36 + (void)*(v33 - 3)) = v32;
      uint64_t v37 = v4;
      v38[0] = MEMORY[0x1E4FBA470] + 16;
      if (v40 < 0) {
        operator delete(v39);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1E4E7BBB0](v41);
      if (!v3) {
        goto LABEL_43;
      }
    }
    if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 96))(v3))
    {
      uint64_t v5 = (uint64_t *)std::ostream::operator<<();
      size_t v6 = "°";
LABEL_9:
      uint64_t v7 = 2;
LABEL_14:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      goto LABEL_15;
    }
    if (((*(uint64_t (**)(TI::CP::SearchNode *))(*(void *)v3 + 80))(v3) & 1) != 0
      || (*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 88))(v3))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)"(", 1);
      uint64_t v5 = (uint64_t *)std::ostream::operator<<();
      size_t v6 = ")";
    }
    else
    {
      if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 128))(v3))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)"(", 1);
        uint64_t v5 = (uint64_t *)std::ostream::operator<<();
        size_t v6 = "$)";
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 120))(v3))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)"{", 1);
        float v22 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)",", 1);
        uint64_t v5 = (uint64_t *)std::ostream::operator<<();
        size_t v6 = "}";
      }
      else
      {
        if (!(*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 136))(v3)) {
          goto LABEL_15;
        }
        uint64_t v5 = &v37;
        size_t v6 = "+";
      }
    }
    uint64_t v7 = 1;
    goto LABEL_14;
  }
LABEL_43:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v36);
  uint64_t v23 = v42.i64[1];
  if (v42.i64[1] != v42.i64[0])
  {
    uint64_t v24 = &v37;
    do
    {
      if (v23 != v42.i64[1]) {
        uint64_t v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)",", 1);
      }
      uint64_t v26 = *(void *)(v23 - 24);
      v23 -= 24;
      uint64_t v25 = v26;
      int v27 = *(char *)(v23 + 23);
      if (v27 >= 0) {
        uint64_t v28 = v23;
      }
      else {
        uint64_t v28 = v25;
      }
      if (v27 >= 0) {
        uint64_t v29 = *(unsigned __int8 *)(v23 + 23);
      }
      else {
        uint64_t v29 = *(void *)(v23 + 8);
      }
      uint64_t v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, v28, v29);
    }
    while (v23 != v42.i64[0]);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v38);
  v36[0] = *(void ***)v2;
  uint64_t v30 = *(void *)(v2 + 72);
  *(void ***)((char *)v36 + (unint64_t)*(v36[0] - 3)) = *(void ***)(v2 + 64);
  uint64_t v37 = v30;
  v38[0] = MEMORY[0x1E4FBA470] + 16;
  if (v40 < 0) {
    operator delete(v39);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E4E7BBB0](v41);
  v36[0] = (void **)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v36);
}

void *std::stringbuf::str[abi:nn180100]<std::allocator<char>>(void *__dst, uint64_t a2)
{
  uint64_t v2 = __dst;
  int v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    unint64_t v5 = *(void *)(a2 + 88);
    unint64_t v6 = *(void *)(a2 + 48);
    if (v5 < v6)
    {
      *(void *)(a2 + 88) = v6;
      unint64_t v5 = v6;
    }
    uint64_t v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      size_t v4 = 0;
      *((unsigned char *)__dst + 23) = 0;
      goto LABEL_16;
    }
    uint64_t v7 = (const void **)(a2 + 16);
    unint64_t v5 = *(void *)(a2 + 32);
  }
  uint64_t v8 = *v7;
  size_t v4 = v5 - (void)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    void *v2 = v11;
    uint64_t v2 = v11;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v4;
    if (!v4) {
      goto LABEL_16;
    }
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((unsigned char *)v2 + v4) = 0;
  return __dst;
}

double TI::CP::SearchNode::bound_on_score(TI::CP::SearchNode *this)
{
  if (*((unsigned char *)this + 81)) {
    return *((double *)this + 9);
  }
  else {
    return -INFINITY;
  }
}

double TI::CP::SearchNode::decrease_bound_on_score(TI::CP::SearchNode *this)
{
  if (!*((void *)this + 8))
  {
    TI::CP::Search::extend_typing(*((void *)this + 3), *((void *)this + 4), (uint64_t *)this + 7, *((_DWORD *)this + 12), &v7);
    int v3 = v7;
    uint64_t v7 = 0;
    size_t v4 = (unsigned int *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4)
    {
      unsigned int v5 = atomic_load(v4 + 2);
      if (v5 == 1) {
        (*(void (**)(unsigned int *))(*(void *)v4 + 248))(v4);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF);
      }
      if (v7)
      {
        unsigned int v6 = atomic_load(v7 + 2);
        if (v6 == 1) {
          (*(void (**)(void))(*(void *)v7 + 248))();
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF);
        }
      }
      int v3 = (unsigned int *)*((void *)this + 8);
    }
    if (v3)
    {
      return TI::CP::SearchNode::compute_score(this);
    }
    else
    {
      *((unsigned char *)this + 81) = 0;
    }
  }
  return result;
}

void TI::CP::SearchNode::branch_at_current_bound(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void *TI::CP::SearchNode::node_at_current_bound@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 80) && *((unsigned char *)this + 81))
  {
    *((unsigned char *)this + 81) = 0;
    this = std::shared_ptr<TIInlineCompletionEventDispatcher>::shared_ptr[abi:nn180100]<TIInlineCompletionEventDispatcher,void>(&v3, this[1], (std::__shared_weak_count *)this[2]);
    *(_OWORD *)a2 = v3;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  return this;
}

void *TI::CP::SearchNodeKeySubstitution::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeKeySubstitution");
}

uint64_t TI::CP::SearchNodeKeySubstitution::source_debug_data@<X0>(TI::CP::SearchNodeKeySubstitution *this@<X0>, void *a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)" key=", 5);
  size_t v4 = *(TI::Favonius::Key **)(*(uint64_t (**)(void))(**((void **)this + 8) + 16))(*((void *)this + 8));
  int v15 = 0x100000;
  __int16 v16 = 0;
  char v17 = 0;
  int64x2_t v18 = 0;
  char v19 = 0;
  TI::Favonius::Key::append_debug_data(v4, (KB::String *)&v15);
  unsigned int v5 = v18;
  if (!v18) {
    unsigned int v5 = &v19;
  }
  if ((_WORD)v15) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = "";
  }
  size_t v7 = strlen(v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)v6, v7);
  if (v18 && v17 == 1) {
    free(v18);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v12);
  v10[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v11 = v8;
  v12[0] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E4E7BBB0](&v14);
}

void TI::CP::SearchNodeKeySubstitution::~SearchNodeKeySubstitution(TI::CP::SearchNodeKeySubstitution *this)
{
  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }

  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

uint64_t WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector(uint64_t a1)
{
  if (*(void *)a1)
  {
    WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct(*(unsigned int **)(a1 + 8), (unsigned int **)(*(void *)(a1 + 8) + 8 * *(void *)a1));
    *(void *)a1 = 0;
  }
  uint64_t v2 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  free(v2);
  return a1;
}

void TI::CP::SearchNodeSource::~SearchNodeSource(TI::CP::SearchNodeSource *this)
{
  *(void *)this = &unk_1F3F74F28;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  unsigned int v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

double TI::CP::SearchNodeSource::bound_on_score(TI::CP::SearchNodeSource *this)
{
  return -INFINITY;
}

void TI::CP::SearchNodeSource::branch_at_current_bound(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void TI::CP::SearchNodeSource::node_at_current_bound(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void *TI::CP::SearchNodeSource::source_debug_data@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "");
}

uint64_t TI::CP::SearchNode::is_key_substitution_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

void *TI::CP::SearchNode::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNode");
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeKeySubstitution>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeySubstitution>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F74F78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeySubstitution>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F74F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *TI::CP::SearchNodeLanguageExtensions::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeLanguageExtensions");
}

uint64_t TI::CP::SearchNodeLanguageExtensions::source_debug_data@<X0>(TI::CP::SearchNodeLanguageExtensions *this@<X0>, void *a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)" stack=", 7);
  if (*((_DWORD *)this + 14))
  {
    uint64_t v3 = *((unsigned int *)this + 14) - 1;
    do
    {
      uint64_t v4 = *(void *)(*((void *)this + 8) + 8 * v3);
      unsigned int v5 = *(TI::Favonius::Key **)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      int v18 = 0x100000;
      __int16 v19 = 0;
      char v20 = 0;
      char v21 = 0;
      char v22 = 0;
      TI::Favonius::Key::append_debug_data(v5, (KB::String *)&v18);
      unsigned int v6 = v21;
      if (!v21) {
        unsigned int v6 = &v22;
      }
      if ((_WORD)v18) {
        size_t v7 = v6;
      }
      else {
        size_t v7 = "";
      }
      size_t v8 = strlen(v7);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)v7, v8);
      if (v21 && v20 == 1) {
        free(v21);
      }
      if (!v3) {
        break;
      }
      uint64_t v9 = v3;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)",", 1);
      --v3;
    }
    while (v9);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v15);
  v13[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v14 = v10;
  v15[0] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E4E7BBB0](&v17);
}

void TI::CP::SearchNodeLanguageExtensions::~SearchNodeLanguageExtensions(TI::CP::SearchNodeLanguageExtensions *this)
{
  *(void *)this = &unk_1F3F74670;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F3F74670;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);

  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

double TI::CP::SearchNodeGeometryExtensions::bound_on_score(TI::CP::SearchNodeGeometryExtensions *this)
{
  return *((double *)this + 8);
}

__n128 TI::CP::SearchNodeGeometryExtensions::branch_at_current_bound@<Q0>(TI::CP::SearchNodeGeometryExtensions *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  unsigned int v4 = *((_DWORD *)this + 12);
  unint64_t v5 = *((unsigned int *)this + 13);
  uint64_t v6 = *(void *)(*(void *)(v3 + 376) + 24 * v4);
  if (v5 >= (*(void *)(*(void *)(v3 + 376) + 24 * v4 + 8) - v6) >> 3)
  {
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
  }
  else
  {
    uint64_t v8 = *((void *)this + 5);
    *(void *)&long long v15 = *((void *)this + 4);
    *((void *)&v15 + 1) = v8;
    if (v8)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      unint64_t v5 = *((unsigned int *)this + 13);
      uint64_t v6 = *(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12));
      unsigned int v4 = *((_DWORD *)this + 12);
    }
    uint64_t v9 = *(atomic_uint **)(v6 + 8 * v5);
    uint64_t v14 = v9;
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
    char v13 = 0;
    unsigned int v17 = v4;
    std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeKeyMatch,std::allocator<TI::CP::SearchNodeKeyMatch>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,WTF::PassRefPtr<TI::Favonius::TypingHypothesis> &,void>(&v16, v3, &v15, (int *)&v17, (uint64_t *)&v14, (uint64_t *)&v13);
    __n128 v12 = v16;
    __n128 v16 = 0uLL;
    if (v13)
    {
      unsigned int v10 = atomic_load(v13 + 2);
      if (v10 == 1) {
        (*(void (**)(void))(*(void *)v13 + 248))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
      }
    }
    if (v14) {
      WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v14);
    }
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v15 + 1));
    }
    ++*((_DWORD *)this + 13);
    TI::CP::SearchNodeGeometryExtensions::skip_keys_equal_to_parent_key(this);
    TI::CP::SearchNodeGeometryExtensions::compute_bound_on_score(this);
    __n128 result = v12;
    *a2 = v12;
  }
  return result;
}

void std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeKeyMatch,std::allocator<TI::CP::SearchNodeKeyMatch>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,WTF::PassRefPtr<TI::Favonius::TypingHypothesis> &,void>(void *a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6)
{
  __n128 v12 = (char *)operator new(0xA0uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)__n128 v12 = &unk_1F3F78C58;
  char v13 = v12 + 24;
  long long v14 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  int v15 = *a4;
  uint64_t v16 = *a5;
  *a5 = 0;
  uint64_t v17 = *a6;
  *a6 = 0;
  *((void *)v12 + 4) = 0;
  *((void *)v12 + 5) = 0;
  *((void *)v12 + 6) = a2;
  *(_OWORD *)(v12 + 56) = v14;
  *((_DWORD *)v12 + 18) = v15;
  *((void *)v12 + 10) = v16;
  *((void *)v12 + 11) = v17;
  *((_WORD *)v12 + 52) = 256;
  v12[106] = 0;
  *((_OWORD *)v12 + 8) = 0u;
  *((_OWORD *)v12 + 9) = 0u;
  *((_OWORD *)v12 + 7) = 0u;
  *((void *)v12 + 3) = &unk_1F3F748E8;
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)(v12 + 24));
  *a1 = v12 + 24;
  a1[1] = v12;
  int v18 = (std::__shared_weak_count *)*((void *)v12 + 5);
  if (v18)
  {
    if (v18->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 2, 1uLL, memory_order_relaxed);
    *((void *)v12 + 4) = v13;
    *((void *)v12 + 5) = v12;
    std::__shared_weak_count::__release_weak(v18);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 2, 1uLL, memory_order_relaxed);
    *((void *)v12 + 4) = v13;
    *((void *)v12 + 5) = v12;
  }

  std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v12);
}

uint64_t TI::CP::SearchNodeGeometryExtensions::skip_keys_equal_to_parent_key(TI::CP::SearchNodeGeometryExtensions *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 104))(*((void *)this + 4));
  if (result)
  {
    unsigned int v3 = *((_DWORD *)this + 13);
    uint64_t v4 = *(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12));
    unint64_t v5 = (*(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8) - v4) >> 3;
    while (v5 > v3 && *(void *)(v4 + 8 * v3) == *(void *)(*((void *)this + 4) + 56))
      *((_DWORD *)this + 13) = ++v3;
  }
  return result;
}

void TI::CP::SearchNodeGeometryExtensions::compute_bound_on_score(TI::CP::SearchNodeGeometryExtensions *this)
{
  uint64_t v2 = *((void *)this + 3);
  unsigned int v3 = *((_DWORD *)this + 12);
  unint64_t v4 = *((unsigned int *)this + 13);
  uint64_t v5 = *(void *)(*(void *)(v2 + 376) + 24 * v3);
  if (v4 >= (*(void *)(*(void *)(v2 + 376) + 24 * v3 + 8) - v5) >> 3)
  {
    double v7 = -INFINITY;
  }
  else
  {
    double v6 = *((double *)this + 7);
    double v7 = v6 + TI::CP::Search::key_deviation_cost(v2, v3, *(CGRect **)(v5 + 8 * v4));
  }
  *((double *)this + 8) = v7;
}

uint64_t TI::CP::SearchNodeKeyMatch::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = (double *)(*(void *)(*(void *)(a1 + 24) + 56) + 48 * v4);
  double v7 = *v5;
  double v6 = v5[1];
  char v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32));
  uint64_t v9 = *(unsigned int **)(a1 + 32);
  unsigned int v10 = (double *)MEMORY[0x1E4F1DAD8];
  if (v8)
  {
    uint64_t v11 = 0;
    __n128 v12 = (double *)MEMORY[0x1E4F1DAD8];
  }
  else
  {
    uint64_t v11 = v9[12];
    __n128 v12 = (double *)(*(void *)(*(void *)(a1 + 24) + 56) + 48 * v11);
  }
  double v14 = *v12;
  double v13 = v12[1];
  if (((*(uint64_t (**)(unsigned int *))(*(void *)v9 + 72))(v9) & 1) == 0)
  {
    double v15 = TI::CP::Search::path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v11, v4, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 1, v11, v4, v14, v13, v7, v6, v15);
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    uint64_t v17 = *(unsigned int *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result) + 56);
    double v18 = *v10;
    double v19 = v10[1];
    uint64_t v20 = *(void *)(a1 + 24);
    float v21 = (*(float (**)(void))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64));
    float v22 = logf(v21);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 8, v4, v17, v7, v6, v18, v19, *(double *)(v20 + 440) * v22);
  }
  uint64_t v23 = *(void *)(a1 + 56);
  if (v23)
  {
    uint64_t v24 = *(void *)(a1 + 32);
    if (!v24
      || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 104))(v24),
          uint64_t v23 = *(void *)(a1 + 56),
          !result)
      || (uint64_t v25 = *(void *)(a1 + 32), v23 != *(void *)(v25 + 56))
      || *(_DWORD *)(a1 + 48) != *(_DWORD *)(v25 + 48))
    {
      unint64_t v26 = *(void *)(v23 + 96);
      unint64_t v27 = *(void *)(v23 + 104);
      v28.n128_u64[0] = TI::CP::Search::key_deviation_cost(*(void *)(a1 + 24), v4, (CGRect *)v23);
      uint64_t v29 = *(uint64_t (**)(uint64_t, void, uint64_t, void, __n128, __n128, __n128, __n128, __n128))(a2 + 16);
      v30.n128_f64[0] = v7;
      v31.n128_f64[0] = v6;
      v32.n128_u64[0] = v26;
      v33.n128_u64[0] = v27;
      return v29(a2, 0, v4, 0, v30, v31, v32, v33, v28);
    }
  }
  return result;
}

BOOL TI::CP::SearchNodeKeyMatch::is_score_final(TI::CP::SearchNodeKeyMatch *this)
{
  return *((void *)this + 8) != 0;
}

uint64_t TI::CP::SearchNodeKeyMatch::ends_with_punctuation(TI::CP::SearchNodeKeyMatch *this)
{
  return (*(unsigned __int16 *)(*((void *)this + 7) + 60) >> 4) & 1;
}

uint64_t TI::CP::SearchNodeKeyMatch::is_key_match_hypothesis(TI::CP::SearchNodeKeyMatch *this)
{
  return 1;
}

void *TI::CP::SearchNodeKeyMatch::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeKeyMatch");
}

uint64_t TI::CP::SearchNodeKeyMatch::source_debug_data@<X0>(TI::CP::SearchNodeKeyMatch *this@<X0>, void *a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v10);
  if (*((void *)this + 7))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)" key=", 5);
    uint64_t v4 = (TI::Favonius::Key *)*((void *)this + 7);
    int v15 = 0x100000;
    __int16 v16 = 0;
    char v17 = 0;
    double v18 = 0;
    char v19 = 0;
    TI::Favonius::Key::append_debug_data(v4, (KB::String *)&v15);
    uint64_t v5 = v18;
    if (!v18) {
      uint64_t v5 = &v19;
    }
    if ((_WORD)v15) {
      double v6 = v5;
    }
    else {
      double v6 = "";
    }
    size_t v7 = strlen(v6);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)v6, v7);
    if (v18 && v17 == 1) {
      free(v18);
    }
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v12);
  v10[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v11 = v8;
  v12[0] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E4E7BBB0](&v14);
}

void TI::CP::SearchNodeKeyMatch::~SearchNodeKeyMatch(TI::CP::SearchNodeKeyMatch *this)
{
  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }

  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeKeyMatch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeyMatch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78C58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeyMatch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *TI::CP::SearchNodeGeometryExtensions::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeGeometryExtensions");
}

uint64_t TI::CP::SearchNodeGeometryExtensions::source_debug_data@<X0>(TI::CP::SearchNodeGeometryExtensions *this@<X0>, void *a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)" stack=", 7);
  for (unsigned int i = *((_DWORD *)this + 13); ; unsigned int i = v5 + 1)
  {
    unint64_t v5 = i;
    uint64_t v6 = *(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12));
    if (v5 >= (*(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8) - v6) >> 3) {
      break;
    }
    size_t v7 = *(TI::Favonius::Key **)(v6 + 8 * v5);
    int v18 = 0x100000;
    __int16 v19 = 0;
    char v20 = 0;
    float v21 = 0;
    char v22 = 0;
    TI::Favonius::Key::append_debug_data(v7, (KB::String *)&v18);
    uint64_t v8 = v21;
    if (!v21) {
      uint64_t v8 = &v22;
    }
    if ((_WORD)v18) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = "";
    }
    size_t v10 = strlen(v9);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)v9, v10);
    if (v21 && v20 == 1) {
      free(v21);
    }
    if (((uint64_t)(*(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8)
                  - *(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12))) >> 3)
       - 1 > v5)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)",", 1);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v15);
  v13[0] = *MEMORY[0x1E4FBA408];
  uint64_t v11 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v14 = v11;
  v15[0] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E4E7BBB0](&v17);
}

void TI::CP::SearchNodeGeometryExtensions::~SearchNodeGeometryExtensions(TI::CP::SearchNodeGeometryExtensions *this)
{
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

double TI::CP::SearchNodeTranspositionExtensions::bound_on_score(TI::CP::SearchNodeTranspositionExtensions *this)
{
  return *((double *)this + 13);
}

void TI::CP::SearchNodeTranspositionExtensions::decrease_bound_on_score(TI::CP::SearchNodeTranspositionExtensions *this)
{
  v1 = (uint64_t *)((char *)this + 80);
  if (*((void *)this + 10))
  {
    uint64_t v3 = *((void *)this + 11);
    if (v3)
    {
      if (!*((unsigned char *)this + 96))
      {
        (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v3 + 48))(v3, (char *)this + 56, v1);
        unint64_t v5 = *((void *)this + 7);
        uint64_t v4 = *((void *)this + 8);
        __n128 v12 = (unsigned int *)&__block_literal_global_5350;
        unint64_t v6 = 126 - 2 * __clz(v5);
        if (v5) {
          uint64_t v7 = v6;
        }
        else {
          uint64_t v7 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(v4, (uint64_t *)(v4 + 8 * v5), (uint64_t)&v12, v7, 1);
        *((unsigned char *)this + 96) = 1;
      }
    }
    else
    {
      TI::CP::Search::extend_typing(*((void *)this + 3), *((void *)this + 4), v1, *((_DWORD *)this + 12), &v12);
      uint64_t v8 = v12;
      __n128 v12 = 0;
      uint64_t v9 = (unsigned int *)*((void *)this + 11);
      *((void *)this + 11) = v8;
      if (v9)
      {
        unsigned int v10 = atomic_load(v9 + 2);
        if (v10 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v9 + 248))(v9);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF);
        }
        if (v12)
        {
          unsigned int v11 = atomic_load(v12 + 2);
          if (v11 == 1) {
            (*(void (**)(void))(*(void *)v12 + 248))();
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF);
          }
        }
        uint64_t v8 = (unsigned int *)*((void *)this + 11);
      }
      if (!v8)
      {
        *((void *)this + 13) = 0xFFF0000000000000;
        return;
      }
    }
    TI::CP::SearchNodeTranspositionExtensions::compute_bound_on_score(this);
  }
}

void TI::CP::SearchNodeTranspositionExtensions::compute_bound_on_score(TI::CP::SearchNodeTranspositionExtensions *this)
{
  uint64_t v3 = (char *)this + 24;
  uint64_t v2 = *((void *)this + 3);
  *((double *)this + 13) = *(double *)(*((void *)v3 + 1) + 72) - *(double *)(v2 + 560) * *(double *)(v2 + 432);
  uint64_t v4 = (CGRect *)*((void *)this + 10);
  if (v4)
  {
    *((long double *)this + 13) = TI::CP::Search::key_deviation_cost(v2, *((_DWORD *)this + 12), v4)
                                + *((double *)this + 13);
    uint64_t v5 = *((void *)this + 11);
    if (!v5) {
      return;
    }
    uint64_t v6 = *((void *)this + 3);
    float v7 = (*(float (**)(uint64_t))(*(void *)v5 + 24))(v5);
    *((double *)this + 13) = *(double *)(v6 + 440) * logf(v7) + *((double *)this + 13);
    if (!*((unsigned char *)this + 96))
    {
      uint64_t v9 = *((void *)this + 3);
      float v11 = 1.0 - (*(float (**)(void))(**((void **)this + 11) + 80))(*((void *)this + 11));
      goto LABEL_10;
    }
    uint64_t v8 = *((void *)this + 7);
    if (v8)
    {
      uint64_t v9 = *((void *)this + 3);
      uint64_t v10 = *(void *)(*((void *)this + 8) + 8 * v8 - 8);
      (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
LABEL_10:
      double v15 = *(double *)(v9 + 440) * logf(v11);
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v12 = *((_DWORD *)this + 12);
    unint64_t v13 = *((unsigned int *)this + 13);
    uint64_t v14 = *(void *)(*(void *)(v2 + 376) + 24 * v12);
    if (v13 < (*(void *)(*(void *)(v2 + 376) + 24 * v12 + 8) - v14) >> 3)
    {
      double v15 = TI::CP::Search::key_deviation_cost(v2, v12, *(CGRect **)(v14 + 8 * v13));
LABEL_11:
      double v16 = v15 + *((double *)this + 13);
      goto LABEL_12;
    }
  }
  double v16 = -INFINITY;
LABEL_12:
  *((double *)this + 13) = v16;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  float v11 = (uint64_t *)result;
LABEL_2:
  v105 = a2 - 2;
  v107 = a2 - 1;
  v104 = a2 - 3;
  unsigned int v12 = v11;
  v109 = a2;
  while (1)
  {
    float v11 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = a2 - v12;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
          if (result)
          {
            uint64_t v41 = *v12;
            *unsigned int v12 = *v107;
            uint64_t *v107 = v41;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v107, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v12 + 2, v107, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v12 + 2, v12 + 3, v107, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 == a2) {
        return result;
      }
      int64_t v55 = (v14 - 2) >> 1;
      int64_t v108 = v55;
      do
      {
        int64_t v56 = v55;
        if (v108 >= v55)
        {
          uint64_t v57 = (2 * v55) | 1;
          v58 = &v11[v57];
          if (2 * v55 + 2 < (uint64_t)v14 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
          {
            ++v58;
            uint64_t v57 = 2 * v56 + 2;
          }
          v59 = (unsigned int **)&v11[v56];
          a2 = v109;
          if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
          {
            v60 = *v59;
            *v59 = 0;
            v114 = v60;
            do
            {
              v61 = (unsigned int **)v58;
              v62 = (unsigned int *)*v58;
              uint64_t *v58 = 0;
              v63 = *v59;
              *v59 = v62;
              if (v63)
              {
                unsigned int v64 = atomic_load(v63 + 2);
                if (v64 == 1) {
                  (*(void (**)(unsigned int *))(*(void *)v63 + 248))(v63);
                }
                else {
                  atomic_fetch_add((atomic_uint *volatile)v63 + 2, 0xFFFFFFFF);
                }
              }
              if (v108 < v57) {
                break;
              }
              uint64_t v65 = (2 * v57) | 1;
              v58 = &v11[v65];
              uint64_t v66 = 2 * v57 + 2;
              if (v66 < (uint64_t)v14 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
              {
                ++v58;
                uint64_t v65 = v66;
              }
              v59 = v61;
              uint64_t v57 = v65;
            }
            while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
            v67 = *v61;
            *v61 = v114;
            if (v67)
            {
              unsigned int v68 = atomic_load(v67 + 2);
              if (v68 == 1) {
                (*(void (**)(unsigned int *))(*(void *)v67 + 248))(v67);
              }
              else {
                atomic_fetch_add((atomic_uint *volatile)v67 + 2, 0xFFFFFFFF);
              }
            }
            a2 = v109;
          }
        }
        int64_t v55 = v56 - 1;
      }
      while (v56);
      uint64_t v69 = (unint64_t)v13 >> 3;
      while (1)
      {
        v110 = a2;
        uint64_t v70 = 0;
        uint64_t v71 = *v11;
        *float v11 = 0;
        uint64_t v72 = v69 - 2;
        uint64_t v106 = v71;
        if (v69 < 2) {
          uint64_t v72 = v69 - 1;
        }
        uint64_t v73 = v72 >> 1;
        v74 = v11;
        do
        {
          v75 = (unsigned int **)v74;
          v74 += v70 + 1;
          uint64_t v76 = 2 * v70;
          uint64_t v70 = (2 * v70) | 1;
          uint64_t v77 = v76 + 2;
          if (v76 + 2 < v69 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
          {
            ++v74;
            uint64_t v70 = v77;
          }
          v78 = (unsigned int *)*v74;
          uint64_t *v74 = 0;
          v79 = *v75;
          *v75 = v78;
          if (v79)
          {
            unsigned int v80 = atomic_load(v79 + 2);
            if (v80 == 1) {
              (*(void (**)(unsigned int *))(*(void *)v79 + 248))(v79);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)v79 + 2, 0xFFFFFFFF);
            }
          }
        }
        while (v70 <= v73);
        v81 = v110 - 1;
        if (v74 == v110 - 1)
        {
          uint64_t result = *v74;
          uint64_t v85 = v69 - 1;
          uint64_t *v74 = v106;
          if (result)
          {
            unsigned int v96 = atomic_load((unsigned int *)(result + 8));
            if (v96 == 1) {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 248))(result);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
            }
          }
        }
        else
        {
          uint64_t v82 = *v81;
          uint64_t *v81 = 0;
          v83 = (unsigned int *)*v74;
          uint64_t *v74 = v82;
          if (v83)
          {
            unsigned int v84 = atomic_load(v83 + 2);
            if (v84 == 1) {
              (*(void (**)(unsigned int *))(*(void *)v83 + 248))(v83);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)v83 + 2, 0xFFFFFFFF);
            }
          }
          uint64_t result = *v81;
          uint64_t v85 = v69 - 1;
          uint64_t *v81 = v106;
          if (result)
          {
            unsigned int v86 = atomic_load((unsigned int *)(result + 8));
            if (v86 == 1) {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 248))(result);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
            }
          }
          uint64_t v87 = (char *)(v74 + 1) - (char *)v11;
          if (v87 >= 9)
          {
            unint64_t v88 = (unint64_t)((v87 >> 3) - 2) >> 1;
            v89 = &v11[v88];
            uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
            if (result)
            {
              v90 = (unsigned int *)*v74;
              uint64_t *v74 = 0;
              uint64_t v115 = (uint64_t)v90;
              while (1)
              {
                v91 = v89;
                uint64_t v92 = *v89;
                uint64_t *v89 = 0;
                v93 = (unsigned int *)*v74;
                uint64_t *v74 = v92;
                if (v93)
                {
                  unsigned int v94 = atomic_load(v93 + 2);
                  if (v94 != 1)
                  {
                    atomic_fetch_add((atomic_uint *volatile)v93 + 2, 0xFFFFFFFF);
                    if (!v88) {
                      goto LABEL_160;
                    }
                    goto LABEL_159;
                  }
                  (*(void (**)(unsigned int *))(*(void *)v93 + 248))(v93);
                }
                if (!v88) {
                  goto LABEL_160;
                }
LABEL_159:
                unint64_t v88 = (v88 - 1) >> 1;
                v89 = &v11[v88];
                v74 = v91;
                if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
                {
LABEL_160:
                  uint64_t result = *v91;
                  uint64_t *v91 = v115;
                  if (result)
                  {
                    unsigned int v95 = atomic_load((unsigned int *)(result + 8));
                    if (v95 == 1) {
                      (*(void (**)(uint64_t))(*(void *)result + 248))(result);
                    }
                    else {
                      atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
                    }
                    uint64_t result = 0;
                  }
                  break;
                }
              }
            }
          }
        }
        BOOL v97 = v69 <= 2;
        uint64_t v69 = v85;
        a2 = v110 - 1;
        if (v97) {
          return result;
        }
      }
    }
    double v15 = &v12[v14 >> 1];
    if ((unint64_t)v13 >= 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, &v12[v14 >> 1], v107, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12 + 1, v15 - 1, v105, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12 + 2, &v12[(v14 >> 1) + 1], v104, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v15 - 1, &v12[v14 >> 1], &v12[(v14 >> 1) + 1], a3);
      uint64_t v16 = *v12;
      *unsigned int v12 = *v15;
      *double v15 = v16;
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(&v12[v14 >> 1], v12, v107, a3);
    }
    --a4;
    a2 = v109;
    if (a5 & 1) != 0 || ((*(uint64_t (**)(void))(*(void *)a3 + 16))())
    {
      uint64_t v17 = *v12;
      *unsigned int v12 = 0;
      uint64_t v111 = v17;
      int v18 = v12;
      do
        __int16 v19 = v18++;
      while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      char v20 = v109;
      if (v19 == v12)
      {
        char v20 = v109;
        do
        {
          if (v18 >= v20) {
            break;
          }
          --v20;
        }
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
      }
      else
      {
        do
          --v20;
        while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
      }
      if (v18 < v20)
      {
        float v21 = v18;
        char v22 = v20;
        do
        {
          uint64_t v23 = *v21;
          *float v21 = *v22;
          uint64_t *v22 = v23;
          do
            __int16 v19 = v21++;
          while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
          do
            --v22;
          while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
        }
        while (v21 < v22);
      }
      if (v19 != v11)
      {
        uint64_t v24 = *v19;
        uint64_t *v19 = 0;
        uint64_t v25 = (unsigned int *)*v11;
        *float v11 = v24;
        if (v25)
        {
          unsigned int v26 = atomic_load(v25 + 2);
          if (v26 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v25 + 248))(v25);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF);
          }
        }
      }
      unint64_t v27 = (unsigned int *)*v19;
      uint64_t *v19 = v111;
      if (v27)
      {
        unsigned int v28 = atomic_load(v27 + 2);
        if (v28 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v27 + 248))(v27);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v27 + 2, 0xFFFFFFFF);
        }
      }
      if (v18 < v20)
      {
LABEL_38:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(v11, v19, a3, a4, a5 & 1);
        a5 = 0;
        unsigned int v12 = v19 + 1;
      }
      else
      {
        BOOL v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v11, v19, a3);
        unsigned int v12 = v19 + 1;
        uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v19 + 1, v109, a3);
        if (result)
        {
          a2 = v19;
          if (v29) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v29) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      uint64_t v30 = *v12;
      *unsigned int v12 = 0;
      uint64_t v112 = v30;
      if ((*(uint64_t (**)(void))(*(void *)a3 + 16))())
      {
        do
          ++v12;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
      }
      else
      {
        __n128 v31 = v12 + 1;
        do
        {
          unsigned int v12 = v31;
          if (v31 >= v109) {
            break;
          }
          int v32 = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
          __n128 v31 = v12 + 1;
        }
        while (!v32);
      }
      __n128 v33 = v109;
      if (v12 < v109)
      {
        __n128 v33 = v109;
        do
          --v33;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      }
      while (v12 < v33)
      {
        uint64_t v34 = *v12;
        *unsigned int v12 = *v33;
        *__n128 v33 = v34;
        do
          ++v12;
        while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
        do
          --v33;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      }
      uint64_t v35 = (unsigned int **)(v12 - 1);
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11)
      {
        v36 = *v35;
        *uint64_t v35 = 0;
        uint64_t v37 = (unsigned int *)*v11;
        *float v11 = (uint64_t)v36;
        if (v37)
        {
          unsigned int v38 = atomic_load(v37 + 2);
          BOOL v5 = v38 != 0;
          BOOL v6 = v38 == 1;
          if (v38 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v37 + 248))(v37);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v37 + 2, 0xFFFFFFFF);
          }
        }
      }
      v39 = *v35;
      *uint64_t v35 = (unsigned int *)v112;
      if (v39)
      {
        unsigned int v40 = atomic_load(v39 + 2);
        BOOL v5 = v40 != 0;
        BOOL v6 = v40 == 1;
        if (v40 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v39 + 248))(v39);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v39 + 2, 0xFFFFFFFF);
        }
      }
      uint64_t result = 0;
      a5 = 0;
    }
  }
  int64x2_t v42 = v12 + 1;
  BOOL v44 = v12 == a2 || v42 == a2;
  if ((a5 & 1) == 0)
  {
    if (!v44)
    {
      do
      {
        v98 = v42;
        uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
        if (result)
        {
          v99 = 0;
          uint64_t v100 = *v98;
          uint64_t *v98 = 0;
          uint64_t v116 = v100;
          while (1)
          {
            uint64_t v101 = *v11;
            *float v11 = 0;
            v11[1] = v101;
            if (v99)
            {
              unsigned int v102 = atomic_load(v99 + 2);
              if (v102 == 1) {
                (*(void (**)(unsigned int *))(*(void *)v99 + 248))(v99);
              }
              else {
                atomic_fetch_add((atomic_uint *volatile)v99 + 2, 0xFFFFFFFF);
              }
            }
            if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
              break;
            }
            v99 = (unsigned int *)*v11--;
          }
          uint64_t result = *v11;
          *float v11 = v116;
          if (result)
          {
            unsigned int v103 = atomic_load((unsigned int *)(result + 8));
            if (v103 == 1) {
              (*(void (**)(uint64_t))(*(void *)result + 248))(result);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
            }
            uint64_t result = 0;
          }
        }
        int64x2_t v42 = v98 + 1;
        float v11 = v98;
      }
      while (v98 + 1 != a2);
    }
    return result;
  }
  if (v44) {
    return result;
  }
  uint64_t v45 = 0;
  while (2)
  {
    v46 = v42;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
    if (!result) {
      goto LABEL_102;
    }
    v47 = 0;
    uint64_t v48 = *v46;
    uint64_t *v46 = 0;
    uint64_t v113 = v48;
    uint64_t v49 = v45;
    while (2)
    {
      v50 = (unsigned int **)((char *)v12 + v49);
      v51 = *(unsigned int **)((char *)v12 + v49);
      *v50 = 0;
      v50[1] = v51;
      if (!v47)
      {
LABEL_91:
        if (!v49) {
          break;
        }
        goto LABEL_94;
      }
      unsigned int v52 = atomic_load(v47 + 2);
      if (v52 == 1)
      {
        (*(void (**)(unsigned int *))(*(void *)v47 + 248))(v47);
        goto LABEL_91;
      }
      atomic_fetch_add((atomic_uint *volatile)v47 + 2, 0xFFFFFFFF);
      if (v49)
      {
LABEL_94:
        v53 = (uint64_t *)((char *)v12 + v49);
        if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
          goto LABEL_97;
        }
        v47 = *v50;
        v49 -= 8;
        continue;
      }
      break;
    }
    v53 = v12;
LABEL_97:
    a2 = v109;
    uint64_t result = *v53;
    uint64_t *v53 = v113;
    if (result)
    {
      unsigned int v54 = atomic_load((unsigned int *)(result + 8));
      if (v54 == 1) {
        (*(void (**)(uint64_t))(*(void *)result + 248))(result);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
      }
      uint64_t result = 0;
    }
LABEL_102:
    int64x2_t v42 = v46 + 1;
    v45 += 8;
    if (v46 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  char v8 = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
      if (!result) {
        return result;
      }
      uint64_t v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
    if (result)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a2, a3, a5);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a5 + 16))();
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)a5 + 16))();
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a5 + 16))();
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a2, a3, a4, a6);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a6 + 16))();
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)a6 + 16))();
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a6 + 16))();
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*(uint64_t (**)(void))(*(void *)a6 + 16))();
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v8 = a2 - 1;
      if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *char v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = (unsigned int **)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
    {
      uint64_t v13 = 0;
      uint64_t v14 = *v10;
      *uint64_t v10 = 0;
      char v22 = v14;
      for (uint64_t i = v11; ; i -= 8)
      {
        uint64_t v16 = (char *)a1 + i;
        uint64_t v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((void *)v16 + 2) = 0;
        *((void *)v16 + 3) = v17;
        if (v13)
        {
          unsigned int v18 = atomic_load(v13 + 2);
          if (v18 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v13 + 248))(v13);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
          }
        }
        if (i == -16)
        {
          __int16 v19 = (unsigned int **)a1;
          goto LABEL_17;
        }
        if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
          break;
        }
        uint64_t v13 = (unsigned int *)*((void *)v16 + 2);
      }
      __int16 v19 = (unsigned int **)((char *)a1 + i + 16);
LABEL_17:
      char v20 = *v19;
      uint64_t *v19 = v22;
      if (v20)
      {
        unsigned int v21 = atomic_load(v20 + 2);
        if (v21 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v20 + 248))(v20);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF);
        }
      }
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int **)a2;
      }
    }
    v11 += 8;
    if (++v10 == (unsigned int **)a2) {
      return 1;
    }
  }
}

BOOL ___ZN2TI2CP33SearchNodeTranspositionExtensions23decrease_bound_on_scoreEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4 = (*(float (**)(void))(**(void **)a2 + 24))();
  return v4 < (*(float (**)(void))(**(void **)a3 + 24))();
}

void TI::CP::SearchNodeTranspositionExtensions::branch_at_current_bound(TI::CP::SearchNodeTranspositionExtensions *this@<X0>, uint64_t a2@<X8>)
{
  if (*((void *)this + 10))
  {
    if (*((void *)this + 11))
    {
      if (*((unsigned char *)this + 96))
      {
        uint64_t v4 = *((void *)this + 7);
        if (v4)
        {
          uint64_t v5 = v4 - 1;
          uint64_t v6 = *((void *)this + 8);
          float v7 = *(atomic_uint **)(v6 + 8 * (v4 - 1));
          if (v7)
          {
            atomic_fetch_add(v7 + 2, 1u);
            uint64_t v4 = *((void *)this + 7);
            uint64_t v6 = *((void *)this + 8);
            uint64_t v5 = v4 - 1;
          }
          WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct((unsigned int *)(v6 + 8 * v5), (unsigned int **)(v6 + 8 * v4));
          *((void *)this + 7) = v5;
          TI::CP::SearchNodeTranspositionExtensions::compute_bound_on_score(this);
          uint64_t v8 = *((void *)this + 3);
          long long v9 = *((_OWORD *)this + 2);
          long long v27 = v9;
          if (*((void *)&v9 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          int v10 = *((_DWORD *)this + 12);
          uint64_t v11 = (atomic_uint *)*((void *)this + 10);
          if (v11) {
            atomic_fetch_add(v11, 1u);
          }
          int v12 = (unsigned int *)*((void *)this + 11);
          if (v12) {
            atomic_fetch_add((atomic_uint *volatile)v12 + 2, 1u);
          }
          if (v7) {
            atomic_fetch_add(v7 + 2, 1u);
          }
          uint64_t v13 = (std::__shared_weak_count *)operator new(0xB8uLL);
          v13->__shared_owners_ = 0;
          v13->__shared_weak_owners_ = 0;
          v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F74FB0;
          uint64_t v14 = v13 + 1;
          long long v35 = v27;
          __n128 v33 = v12;
          uint64_t v34 = v11;
          int v32 = (unsigned int *)v7;
          TI::CP::SearchNodeTransposition::SearchNodeTransposition((TI::CP::SearchNode *)&v13[1], v8, (uint64_t *)&v35, v10, (uint64_t *)&v34, (uint64_t *)&v33, (uint64_t *)&v32);
          if (v32)
          {
            unsigned int v15 = atomic_load(v32 + 2);
            if (v15 == 1) {
              (*(void (**)(void))(*(void *)v32 + 248))();
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)v32 + 2, 0xFFFFFFFF);
            }
          }
          if (v33)
          {
            unsigned int v22 = atomic_load(v33 + 2);
            if (v22 == 1) {
              (*(void (**)(void))(*(void *)v33 + 248))();
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)v33 + 2, 0xFFFFFFFF);
            }
          }
          if (v34) {
            WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v34);
          }
          if (*((void *)&v35 + 1)) {
            std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v35 + 1));
          }
          *(void *)&long long v23 = v13 + 1;
          *((void *)&v23 + 1) = v13;
          shared_weak_owners = (std::__shared_weak_count *)v13[1].__shared_weak_owners_;
          if (shared_weak_owners)
          {
            if (shared_weak_owners->__shared_owners_ != -1) {
              goto LABEL_49;
            }
            long long v28 = v23;
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            v13[1].__shared_owners_ = (uint64_t)v14;
            v13[1].__shared_weak_owners_ = (uint64_t)v13;
            std::__shared_weak_count::__release_weak(shared_weak_owners);
          }
          else
          {
            long long v28 = v23;
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            v13[1].__shared_owners_ = (uint64_t)v14;
            v13[1].__shared_weak_owners_ = (uint64_t)v13;
          }
          std::__shared_weak_count::__release_shared[abi:nn180100](v13);
          long long v23 = v28;
LABEL_49:
          *(_OWORD *)a2 = v23;
          if (v7)
          {
            unsigned int v25 = atomic_load((unsigned int *)v7 + 2);
            if (v25 == 1)
            {
              unsigned int v26 = *(void (**)(atomic_uint *))(*(void *)v7 + 248);
              v26(v7);
            }
            else
            {
              atomic_fetch_add(v7 + 2, 0xFFFFFFFF);
            }
          }
          return;
        }
      }
    }
LABEL_33:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    return;
  }
  unint64_t v16 = *((unsigned int *)this + 13);
  uint64_t v17 = *(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12));
  if (v16 >= (*(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8) - v17) >> 3) {
    goto LABEL_33;
  }
  unsigned int v18 = *(atomic_uint **)(v17 + 8 * v16);
  if (v18)
  {
    atomic_fetch_add(v18, 1u);
    LODWORD(v16) = *((_DWORD *)this + 13);
  }
  *((_DWORD *)this + 13) = v16 + 1;
  TI::CP::SearchNodeTranspositionExtensions::compute_bound_on_score(this);
  uint64_t v19 = *((void *)this + 3);
  char v20 = (std::__shared_weak_count *)*((void *)this + 5);
  uint64_t v30 = *((void *)this + 4);
  __n128 v31 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v21 = *((_DWORD *)this + 12);
  BOOL v29 = v18;
  if (v18) {
    atomic_fetch_add(v18, 1u);
  }
  LODWORD(v34) = v21;
  std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeTranspositionExtensions,std::allocator<TI::CP::SearchNodeTranspositionExtensions>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,void>((std::__shared_weak_count **)&v35, v19, &v30, (int *)&v34, (uint64_t *)&v29);
  *(_OWORD *)a2 = v35;
  if (v29) {
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v29);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v31);
  }
  if (v18)
  {
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v18);
  }
}

void std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeTranspositionExtensions,std::allocator<TI::CP::SearchNodeTranspositionExtensions>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,void>(std::__shared_weak_count **a1, uint64_t a2, uint64_t *a3, int *a4, uint64_t *a5)
{
  int v10 = (std::__shared_weak_count *)operator new(0x88uLL);
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78E18;
  uint64_t v11 = v10 + 1;
  int v12 = (std::__shared_weak_count *)a3[1];
  v17[0] = *a3;
  v17[1] = (uint64_t)v12;
  *a3 = 0;
  a3[1] = 0;
  int v13 = *a4;
  uint64_t v14 = *a5;
  *a5 = 0;
  uint64_t v16 = v14;
  TI::CP::SearchNodeTranspositionExtensions::SearchNodeTranspositionExtensions((TI::CP::SearchNodeTranspositionExtensions *)&v10[1], a2, v17, v13, &v16);
  if (v16) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v16);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v12);
  }
  *a1 = v11;
  a1[1] = v10;
  shared_weak_owners = (std::__shared_weak_count *)v10[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__shared_owners_ = (uint64_t)v11;
    v10[1].__shared_weak_owners_ = (uint64_t)v10;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__shared_owners_ = (uint64_t)v11;
    v10[1].__shared_weak_owners_ = (uint64_t)v10;
  }

  std::__shared_weak_count::__release_shared[abi:nn180100](v10);
}

TI::CP::SearchNode *TI::CP::SearchNodeTransposition::SearchNodeTransposition(TI::CP::SearchNode *this, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a5;
  *a5 = 0;
  uint64_t v11 = *a7;
  *a7 = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = v9;
  *((void *)this + 5) = v8;
  *((_DWORD *)this + 12) = a4;
  *((void *)this + 7) = v10;
  *((void *)this + 8) = v11;
  *((_WORD *)this + 40) = 256;
  *((unsigned char *)this + 82) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(void *)this = &unk_1F3F74CD0;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 36) = -1;
  uint64_t v12 = *a6;
  *a6 = 0;
  *((void *)this + 19) = v12;
  TI::CP::SearchNode::compute_score(this);
  return this;
}

uint64_t TI::CP::SearchNodeTransposition::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 56);
  uint64_t v6 = (double *)(v5 + 48 * v4);
  if (*(void *)(a1 + 136))
  {
    uint64_t v7 = *(unsigned int *)(a1 + 144);
    uint64_t v8 = (double *)(v5 + 48 * v7);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = (double *)MEMORY[0x1E4F1DAD8];
  }
  double v9 = *v6;
  double v10 = v6[1];
  double v12 = *v8;
  double v11 = v8[1];
  char v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32));
  uint64_t v14 = *(void *)(a1 + 24);
  unsigned int v15 = (double *)MEMORY[0x1E4F1DAD8];
  if (v13)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (double *)MEMORY[0x1E4F1DAD8];
  }
  else
  {
    uint64_t v16 = *(unsigned int *)(*(void *)(a1 + 32) + 48);
    uint64_t v17 = (double *)(*(void *)(v14 + 56) + 48 * v16);
  }
  double v19 = *v17;
  double v18 = v17[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 7, v7, v4, v12, v11, v9, v10, -(*(double *)(v14 + 560) * *(double *)(v14 + 432)));
  char v20 = *(CGRect **)(a1 + 56);
  double x = v20[3].origin.x;
  double y = v20[3].origin.y;
  long double v23 = TI::CP::Search::key_deviation_cost(*(void *)(a1 + 24), v4, v20);
  (*(void (**)(uint64_t, void, uint64_t, void, double, double, double, double, long double))(a2 + 16))(a2, 0, v4, 0, v9, v10, x, y, v23);
  if (*(void *)(a1 + 136))
  {
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32)) & 1) == 0)
    {
      double v24 = TI::CP::Search::path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v16, v7, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 1, v16, v7, v19, v18, v12, v11, v24);
    }
    double v25 = TI::CP::Search::path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v7, v4, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 1, v7, v4, v12, v11, v9, v10, v25);
    unsigned int v26 = *(CGRect **)(a1 + 136);
    double v27 = v26[3].origin.x;
    double v28 = v26[3].origin.y;
    long double v29 = TI::CP::Search::key_deviation_cost(*(void *)(a1 + 24), v7, v26);
    (*(void (**)(uint64_t, void, uint64_t, void, double, double, double, double, long double))(a2 + 16))(a2, 0, v7, 0, v12, v11, v27, v28, v29);
  }
  uint64_t v30 = *(void *)(a1 + 152);
  if (v30)
  {
    uint64_t v31 = *(unsigned int *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 16))(v30) + 56);
    double v32 = *v15;
    double v33 = v15[1];
    uint64_t v34 = *(void *)(a1 + 24);
    float v35 = (*(float (**)(void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152));
    float v36 = logf(v35);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 8, v4, v31, v9, v10, v32, v33, *(double *)(v34 + 440) * v36);
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    uint64_t v38 = *(unsigned int *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result) + 56);
    double v39 = *v15;
    unint64_t v40 = *((void *)v15 + 1);
    uint64_t v41 = *(void *)(a1 + 24);
    float v42 = (*(float (**)(void))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64));
    v43.n128_f64[0] = *(double *)(v41 + 440) * logf(v42);
    BOOL v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128))(a2 + 16);
    v45.n128_f64[0] = v12;
    v46.n128_f64[0] = v11;
    v47.n128_f64[0] = v39;
    v48.n128_u64[0] = v40;
    return v44(a2, 8, v7, v38, v45, v46, v47, v48, v43);
  }
  return result;
}

BOOL TI::CP::SearchNodeTransposition::is_score_final(TI::CP::SearchNodeTransposition *this)
{
  return *((void *)this + 17) != 0;
}

float TI::CP::SearchNodeTransposition::ideal_path_length(TI::CP::SearchNodeTransposition *this)
{
  v1 = (unsigned int *)*((void *)this + 4);
  uint64_t v2 = *(void *)(*((void *)this + 3) + 56);
  uint64_t v3 = (double *)(v2 + 48 * v1[12]);
  double v4 = *v3;
  double v5 = v3[1];
  uint64_t v6 = (double *)(v2 + 48 * *((unsigned int *)this + 36));
  double v7 = *v6;
  double v8 = v6[1];
  double v9 = (double *)(v2 + 48 * *((unsigned int *)this + 12));
  double v10 = *v9;
  double v11 = v9[1];
  double v12 = (*(float (**)(unsigned int *))(*(void *)v1 + 160))(v1);
  long double v13 = hypot(v7 - v4, v8 - v5) + v12;
  return v13 + hypot(v10 - v7, v11 - v8);
}

uint64_t TI::CP::SearchNodeTransposition::is_transposition_hypothesis(TI::CP::SearchNodeTransposition *this)
{
  return 1;
}

double TI::CP::SearchNodeTransposition::decrease_bound_on_score(TI::CP::SearchNodeTransposition *this, double result)
{
  if (*((void *)this + 17)) {
    return result;
  }
  uint64_t v3 = *(void *)(*((void *)this + 3) + 8);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 8) + 16))(*((void *)this + 8));
  TI::Favonius::KeyboardLayout::key_for_char(v3, *(_DWORD *)(*(void *)v4 + 56), &v16);
  uint64_t v5 = *((void *)this + 17);
  uint64_t v6 = v16;
  *((void *)this + 17) = v16;
  if (v5)
  {
    WTF::RefCounted<TI::Favonius::Key>::deref(v5);
    uint64_t v6 = *((void *)this + 17);
  }
  if (!v6)
  {
    *((unsigned char *)this + 81) = 0;
    return result;
  }
  if ((*(uint64_t (**)(void))(**((void **)this + 4) + 72))(*((void *)this + 4)))
  {
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    goto LABEL_10;
  }
  unsigned int v8 = *(_DWORD *)(*((void *)this + 4) + 48) + 1;
  unsigned int v7 = *((_DWORD *)this + 12) - 1;
  if (v8 <= v7)
  {
LABEL_10:
    int v9 = -1;
    double v10 = -INFINITY;
    do
    {
      char v11 = (*(uint64_t (**)(void))(**((void **)this + 4) + 72))(*((void *)this + 4));
      double v12 = (TI::CP::Search *)*((void *)this + 3);
      double v13 = 0.0;
      if ((v11 & 1) == 0) {
        double v13 = TI::CP::Search::path_deviation_cost(*((TI::CP::Search **)this + 3), *(_DWORD *)(*((void *)this + 4) + 48), v8, 0)+ 0.0;
      }
      double v14 = v13 + TI::CP::Search::path_deviation_cost(v12, v8, *((_DWORD *)this + 12), 0);
      double v15 = v14 + TI::CP::Search::key_deviation_cost((uint64_t)v12, v8, *((CGRect **)this + 17));
      if (v15 > v10)
      {
        int v9 = v8;
        double v10 = v15;
      }
      ++v8;
    }
    while (v8 <= v7);
    goto LABEL_16;
  }
  int v9 = -1;
LABEL_16:
  *((_DWORD *)this + 36) = v9;

  return TI::CP::SearchNode::compute_score(this);
}

void *TI::CP::SearchNodeTransposition::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeTransposition");
}

uint64_t TI::CP::SearchNodeTransposition::source_debug_data@<X0>(TI::CP::SearchNodeTransposition *this@<X0>, void *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)" keys=", 6);
  uint64_t v4 = *(TI::Favonius::Key **)(*(uint64_t (**)(void))(**((void **)this + 19) + 16))(*((void *)this + 19));
  int v24 = 0x100000;
  __int16 v25 = 0;
  char v26 = 0;
  double v27 = 0;
  char v28 = 0;
  TI::Favonius::Key::append_debug_data(v4, (KB::String *)&v24);
  uint64_t v5 = v27;
  if (!v27) {
    uint64_t v5 = &v28;
  }
  if ((_WORD)v24) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = "";
  }
  size_t v7 = strlen(v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)v6, v7);
  unsigned int v8 = *(TI::Favonius::Key **)(*(uint64_t (**)(void))(**((void **)this + 8) + 16))(*((void *)this + 8));
  int v19 = 0x100000;
  __int16 v20 = 0;
  char v21 = 0;
  unsigned int v22 = 0;
  char v23 = 0;
  TI::Favonius::Key::append_debug_data(v8, (KB::String *)&v19);
  int v9 = v22;
  if (!v22) {
    int v9 = &v23;
  }
  if ((_WORD)v19) {
    double v10 = v9;
  }
  else {
    double v10 = "";
  }
  size_t v11 = strlen(v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)v10, v11);
  if (v22 && v21 == 1) {
    free(v22);
  }
  if (v27 && v26 == 1) {
    free(v27);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v16);
  v14[0] = *MEMORY[0x1E4FBA408];
  uint64_t v12 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v15 = v12;
  v16[0] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E4E7BBB0](&v18);
}

void TI::CP::SearchNodeTransposition::~SearchNodeTransposition(TI::CP::SearchNodeTransposition *this)
{
  *(void *)this = &unk_1F3F74CD0;
  uint64_t v2 = (unsigned int *)*((void *)this + 19);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 17);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v5 = (unsigned int *)*((void *)this + 8);
  if (v5)
  {
    unsigned int v6 = atomic_load(v5 + 2);
    if (v6 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v5 + 248))(v5);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v7);
  }
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)this = &unk_1F3F74CD0;
  uint64_t v2 = (unsigned int *)*((void *)this + 19);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 17);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v5 = (unsigned int *)*((void *)this + 8);
  if (v5)
  {
    unsigned int v6 = atomic_load(v5 + 2);
    if (v6 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v5 + 248))(v5);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v7);
  }

  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeTransposition>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeTransposition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F74FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeTransposition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F74FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

TI::CP::SearchNodeTranspositionExtensions *TI::CP::SearchNodeTranspositionExtensions::SearchNodeTranspositionExtensions(TI::CP::SearchNodeTranspositionExtensions *this, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5)
{
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = v7;
  *((void *)this + 5) = v6;
  *((_DWORD *)this + 12) = a4;
  *(void *)this = &unk_1F3F74710;
  *(void *)((char *)this + 52) = 0;
  *(void *)((char *)this + 68) = 0;
  *(void *)((char *)this + 60) = 0;
  *((_DWORD *)this + 19) = 0;
  uint64_t v8 = *a5;
  *a5 = 0;
  *((void *)this + 10) = v8;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 96) = 0;
  TI::CP::SearchNodeTranspositionExtensions::compute_bound_on_score(this);
  return this;
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeTranspositionExtensions>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeTranspositionExtensions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78E18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeTranspositionExtensions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *TI::CP::SearchNodeTranspositionExtensions::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeTranspositionExtensions");
}

uint64_t TI::CP::SearchNodeTranspositionExtensions::source_debug_data@<X0>(TI::CP::SearchNodeTranspositionExtensions *this@<X0>, void *a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v24);
  if (*((void *)this + 10))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)" key2=", 6);
    uint64_t v4 = (TI::Favonius::Key *)*((void *)this + 10);
    int v29 = 0x100000;
    __int16 v30 = 0;
    char v31 = 0;
    double v32 = 0;
    v33[0] = 0;
    TI::Favonius::Key::append_debug_data(v4, (KB::String *)&v29);
    uint64_t v5 = v32;
    if (!v32) {
      uint64_t v5 = v33;
    }
    if ((_WORD)v29) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = "";
    }
    size_t v7 = strlen(v6);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)v6, v7);
    if (v32 && v31 == 1) {
      free(v32);
    }
    if (*((unsigned char *)this + 96))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)" key1stack=", 11);
      if (*((_DWORD *)this + 14))
      {
        uint64_t v8 = *((unsigned int *)this + 14) - 1;
        do
        {
          uint64_t v9 = *(void *)(*((void *)this + 8) + 8 * v8);
          double v10 = *(TI::Favonius::Key **)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
          int v29 = 0x100000;
          __int16 v30 = 0;
          char v31 = 0;
          double v32 = 0;
          v33[0] = 0;
          TI::Favonius::Key::append_debug_data(v10, (KB::String *)&v29);
          size_t v11 = v32;
          if (!v32) {
            size_t v11 = v33;
          }
          if ((_WORD)v29) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = "";
          }
          size_t v13 = strlen(v12);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)v12, v13);
          if (v32 && v31 == 1) {
            free(v32);
          }
          if (!v8) {
            break;
          }
          uint64_t v14 = v8;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)",", 1);
          --v8;
        }
        while (v14);
      }
    }
  }
  else if (*((unsigned int *)this + 13) < (unint64_t)((uint64_t)(*(void *)(*(void *)(*((void *)this + 3) {
                                                                                              + 376)
  }
                                                                                  + 24 * *((unsigned int *)this + 12)
                                                                                  + 8)
                                                                      - *(void *)(*(void *)(*((void *)this + 3)
                                                                                              + 376)
                                                                                  + 24 * *((unsigned int *)this + 12))) >> 3))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)" key2stack=", 11);
    for (unsigned int i = *((_DWORD *)this + 13); ; unsigned int i = v16 + 1)
    {
      unint64_t v16 = i;
      uint64_t v17 = *(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12));
      if (v16 >= (*(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8)
                 - v17) >> 3)
        break;
      uint64_t v18 = *(TI::Favonius::Key **)(v17 + 8 * v16);
      int v29 = 0x100000;
      __int16 v30 = 0;
      char v31 = 0;
      double v32 = 0;
      v33[0] = 0;
      TI::Favonius::Key::append_debug_data(v18, (KB::String *)&v29);
      int v19 = v32;
      if (!v32) {
        int v19 = v33;
      }
      if ((_WORD)v29) {
        __int16 v20 = v19;
      }
      else {
        __int16 v20 = "";
      }
      size_t v21 = strlen(v20);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)v20, v21);
      if (v32 && v31 == 1) {
        free(v32);
      }
      if (((uint64_t)(*(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8)
                    - *(void *)(*(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12))) >> 3)
         - 1 > v16)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)",", 1);
    }
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v26);
  v24[0] = *MEMORY[0x1E4FBA408];
  uint64_t v22 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v24 + *(void *)(v24[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v25 = v22;
  v26[0] = MEMORY[0x1E4FBA470] + 16;
  if (v27 < 0) {
    operator delete((void *)v26[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E4E7BBB0](&v28);
}

void TI::CP::SearchNodeTranspositionExtensions::~SearchNodeTranspositionExtensions(TI::CP::SearchNodeTranspositionExtensions *this)
{
  *(void *)this = &unk_1F3F74710;
  uint64_t v2 = (unsigned int *)*((void *)this + 11);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F3F74710;
  uint64_t v2 = (unsigned int *)*((void *)this + 11);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);

  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

double TI::CP::SearchNodeKeyPredictionExtensions::bound_on_score(TI::CP::SearchNodeKeyPredictionExtensions *this)
{
  return *((double *)this + 12);
}

void TI::CP::SearchNodeKeyPredictionExtensions::decrease_bound_on_score(TI::CP::SearchNodeKeyPredictionExtensions *this)
{
  if (!*((unsigned char *)this + 80))
  {
    uint64_t v2 = *((void *)this + 4);
    if (!*(unsigned char *)(v2 + 82))
    {
      (*(void (**)(void, uint64_t))(**(void **)(v2 + 64) + 48))(*(void *)(v2 + 64), v2 + 88);
      *(unsigned char *)(v2 + 82) = 1;
    }
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::operator=((unint64_t *)this + 7, (unint64_t *)(v2 + 88));
    unint64_t v3 = *((void *)this + 7);
    unint64_t v4 = 126 - 2 * __clz(v3);
    if (v3) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,TI::CP::SearchNodeKeyPredictionExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(*((uint64_t **)this + 8), (uint64_t *)(*((void *)this + 8) + 8 * v3), v5, 1);
    *((unsigned char *)this + 80) = 1;
    TI::CP::SearchNodeKeyPredictionExtensions::compute_bound_on_score(this);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,TI::CP::SearchNodeKeyPredictionExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
void TI::CP::SearchNodeKeyPredictionExtensions::compute_bound_on_score(TI::CP::SearchNodeKeyPredictionExtensions *this)
{
  if (*((unsigned char *)this + 80))
  {
    uint64_t v2 = *((void *)this + 7);
    if (!v2)
    {
      double v7 = -INFINITY;
      goto LABEL_7;
    }
    double v3 = *((double *)this + 11);
    uint64_t v4 = *((void *)this + 3);
    uint64_t v5 = *(void *)(*((void *)this + 8) + 8 * v2 - 8);
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  else
  {
    double v3 = *((double *)this + 11);
    uint64_t v4 = *((void *)this + 3);
    float v6 = 1.0
       - (*(float (**)(void))(**(void **)(*((void *)this + 4) + 64) + 80))(*(void *)(*((void *)this + 4) + 64));
  }
  double v7 = v3 + *(double *)(v4 + 440) * logf(v6);
LABEL_7:
  *((double *)this + 12) = v7;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeKeyPredictionExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = (*(float (**)(void))(*(void *)*(a2 - 1) + 24))(*(a2 - 1));
      if (v6 < (*(float (**)(void))(*(void *)*a1 + 24))())
      {
        uint64_t v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    float v12 = (*(float (**)(void))(*(void *)*v9 + 24))();
    if (v12 < (*(float (**)(void))(*(void *)*v8 + 24))())
    {
      unint64_t v13 = 0;
      uint64_t v14 = (unsigned int *)*v9;
      *uint64_t v9 = 0;
      for (uint64_t i = v10; ; i -= 8)
      {
        float v16 = (char *)a1 + i;
        uint64_t v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((void *)v16 + 2) = 0;
        *((void *)v16 + 3) = v17;
        if (v13)
        {
          unsigned int v18 = atomic_load(v13 + 2);
          if (v18 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v13 + 248))(v13);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
          }
        }
        if (i == -16)
        {
          float v21 = (unsigned int **)a1;
          goto LABEL_17;
        }
        int v19 = (char *)a1 + i;
        float v20 = (*(float (**)(unsigned int *))(*(void *)v14 + 24))(v14);
        if (v20 >= (*(float (**)(void))(**((void **)v19 + 1) + 24))(*((void *)v19 + 1))) {
          break;
        }
        unint64_t v13 = (unsigned int *)*((void *)v16 + 2);
      }
      float v21 = (unsigned int **)(v19 + 16);
LABEL_17:
      uint64_t v22 = *v21;
      *float v21 = v14;
      if (v22)
      {
        unsigned int v23 = atomic_load(v22 + 2);
        if (v23 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v22 + 248))(v22);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v22 + 2, 0xFFFFFFFF);
        }
      }
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

__n128 TI::CP::SearchNodeKeyPredictionExtensions::branch_at_current_bound@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  if (!this[5].n128_u8[0] || (unint64_t v4 = this[3].n128_u64[1]) == 0)
  {
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    return result;
  }
  uint64_t v5 = this[1].n128_i64[1];
  __n128 v17 = this[2];
  if (v17.n128_u64[1])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
    unint64_t v4 = this[3].n128_u64[1];
  }
  int v6 = this[3].n128_i32[0];
  uint64_t v7 = this[4].n128_u64[0] + 8 * v4;
  uint64_t v8 = *(unsigned int **)(v7 - 8);
  *(void *)(v7 - 8) = 0;
  uint64_t v9 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F74FE8;
  uint64_t v10 = v9 + 1;
  __n128 v20 = v17;
  int v19 = v8;
  TI::CP::SearchNodeKeyPrediction::SearchNodeKeyPrediction((uint64_t)&v9[1], v5, &v20, v6, (uint64_t *)&v19);
  if (v19)
  {
    unsigned int v11 = atomic_load(v19 + 2);
    if (v11 == 1) {
      (*(void (**)(void))(*(void *)v19 + 248))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v19 + 2, 0xFFFFFFFF);
    }
  }
  if (v20.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v20.n128_u64[1]);
  }
  v12.n128_u64[0] = (unint64_t)&v9[1];
  v12.n128_u64[1] = (unint64_t)v9;
  shared_weak_owners = (std::__shared_weak_count *)v9[1].__shared_weak_owners_;
  __n128 v18 = v12;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v9[1].__shared_owners_ = (uint64_t)v10;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
    goto LABEL_16;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v9[1].__shared_owners_ = (uint64_t)v10;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:nn180100](v9);
  }
  unint64_t v14 = this[3].n128_u64[1];
  unint64_t v15 = v14 - 1;
  WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct((unsigned int *)(this[4].n128_u64[0] + 8 * (v14 - 1)), (unsigned int **)(this[4].n128_u64[0] + 8 * v14));
  this[3].n128_u64[1] = v15;
  TI::CP::SearchNodeKeyPredictionExtensions::compute_bound_on_score((TI::CP::SearchNodeKeyPredictionExtensions *)this);
  __n128 result = v18;
  *a2 = v18;
  return result;
}

uint64_t TI::CP::SearchNodeKeyPrediction::SearchNodeKeyPrediction(uint64_t a1, uint64_t a2, __n128 *a3, int a4, uint64_t *a5)
{
  __n128 v6 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  uint64_t v7 = *a5;
  *a5 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(__n128 *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v7;
  *(_WORD *)(a1 + 80) = 256;
  *(unsigned char *)(a1 + 82) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)a1 = &unk_1F3F74D98;
  *(_DWORD *)(a1 + 136) = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 152))(v6.n128_u64[0], v6);
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)a1);
  return a1;
}

uint64_t TI::CP::SearchNodeKeyPrediction::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = (double *)(*(void *)(*(void *)(a1 + 24) + 56) + 48 * v4);
  double v7 = *v5;
  double v6 = v5[1];
  char v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32));
  uint64_t v9 = (double *)MEMORY[0x1E4F1DAD8];
  if (v8)
  {
    uint64_t v10 = 0;
    unsigned int v11 = (unint64_t *)MEMORY[0x1E4F1DAD8];
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 32) + 48);
    unsigned int v11 = (unint64_t *)(*(void *)(*(void *)(a1 + 24) + 56) + 48 * v10);
  }
  unint64_t v13 = *v11;
  unint64_t v12 = v11[1];
  uint64_t v14 = *(void *)(a1 + 64);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14) + 56);
    double v16 = *v9;
    double v17 = v9[1];
    uint64_t v18 = *(void *)(a1 + 24);
    float v19 = (*(float (**)(void))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64));
    float v20 = logf(v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 8, v4, v15, v7, v6, v16, v17, *(double *)(v18 + 440) * v20);
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32)) & 1) == 0
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 32) + 136))(*(void *)(a1 + 32)) & 1) == 0)
  {
    uint64_t v26 = *(void *)(a1 + 56);
    if (v26)
    {
      CGFloat v27 = *(double *)(v26 + 96);
      CGFloat v28 = *(double *)(v26 + 104);
      v38.double x = v27;
      v38.double y = v28;
      v29.n128_u64[0] = TI::CP::Search::extended_path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v10, v4, v38);
      v30.n128_u64[0] = v13;
      v31.n128_u64[0] = v12;
      v32.n128_f64[0] = v27;
      v33.n128_f64[0] = v28;
    }
    else
    {
      v29.n128_u64[0] = TI::CP::Search::path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v10, v4, 0);
      v30.n128_u64[0] = v13;
      v31.n128_u64[0] = v12;
      v32.n128_f64[0] = v7;
      v33.n128_f64[0] = v6;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128))(a2 + 16))(a2, 1, v10, v4, v30, v31, v32, v33, v29);
  }
  v23.n128_f64[0] = *v9;
  v24.n128_f64[0] = v9[1];
  uint64_t v34 = 584;
  if (!*(_DWORD *)(a1 + 136)) {
    uint64_t v34 = 576;
  }
  v25.n128_f64[0] = -(*(double *)(*(void *)(a1 + 24) + v34) * *(double *)(*(void *)(a1 + 24) + 432));
  float v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, __n128, __n128, __n128, __n128, __n128))(a2 + 16);
  v21.n128_f64[0] = v7;
  v22.n128_f64[0] = v6;

  return v35(a2, 6, v4, 0, v21, v22, v23, v24, v25);
}

uint64_t TI::CP::SearchNodeKeyPrediction::is_score_final(TI::CP::SearchNodeKeyPrediction *this)
{
  if (!*((void *)this + 8)) {
    return 0;
  }
  if (*((void *)this + 7)
    || ((*(uint64_t (**)(void))(**((void **)this + 4) + 72))(*((void *)this + 4)) & 1) != 0)
  {
    return 1;
  }
  double v3 = *(uint64_t (**)(void))(**((void **)this + 4) + 136);

  return v3();
}

uint64_t TI::CP::SearchNodeKeyPrediction::ideal_path_length(TI::CP::SearchNodeKeyPrediction *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 160))();
}

uint64_t TI::CP::SearchNodeKeyPrediction::key_prediction_count(TI::CP::SearchNodeKeyPrediction *this)
{
  return (*((_DWORD *)this + 34) + 1);
}

uint64_t TI::CP::SearchNodeKeyPrediction::is_key_prediction_hypothesis(TI::CP::SearchNodeKeyPrediction *this)
{
  return 1;
}

void TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(TI::CP::SearchNodeKeyPrediction *this)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 7)
    && ((*(uint64_t (**)(void))(**((void **)this + 4) + 72))(*((void *)this + 4)) & 1) == 0
    && ((*(uint64_t (**)(void))(**((void **)this + 4) + 136))(*((void *)this + 4)) & 1) == 0)
  {
    uint64_t v2 = *(void *)(*((void *)this + 3) + 8);
    double v3 = (unsigned __int16 *)(*(void *)(*(uint64_t (**)(void))(**((void **)this + 8) + 16))(*((void *)this + 8))
                            + 40);
    v4[0] = &unk_1F3F75020;
    v4[1] = this;
    v4[3] = v4;
    TI::Favonius::KeyboardLayout::enumerate_keys_with_sort_key(v2, v3, (uint64_t)v4);
    std::__function::__value_func<void ()(WTF::RefPtr<TI::Favonius::LayoutKey> const&)>::~__value_func[abi:nn180100](v4);
    if (*((void *)this + 7)) {
      TI::CP::SearchNode::compute_score(this);
    }
    else {
      *((unsigned char *)this + 81) = 0;
    }
  }
}

uint64_t std::__function::__func<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0,std::allocator<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0>,void ()(WTF::RefPtr<TI::Favonius::LayoutKey> const&)>::operator()(uint64_t result, atomic_uint **a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (!*(void *)(v2 + 56))
  {
    double v3 = *a2;
    if (*a2)
    {
      atomic_fetch_add(v3, 1u);
      __n128 result = *(void *)(v2 + 56);
      *(void *)(v2 + 56) = v3;
      if (result) {
        return WTF::RefCounted<TI::Favonius::Key>::deref(result);
      }
    }
    else
    {
      *(void *)(v2 + 56) = 0;
    }
  }
  return result;
}

uint64_t std::__function::__func<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0,std::allocator<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0>,void ()(WTF::RefPtr<TI::Favonius::LayoutKey> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F3F75020;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0,std::allocator<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0>,void ()(WTF::RefPtr<TI::Favonius::LayoutKey> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F3F75020;
  result[1] = v3;
  return result;
}

void std::__function::__func<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0,std::allocator<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0>,void ()(WTF::RefPtr<TI::Favonius::LayoutKey> const&)>::~__func()
{
}

void *TI::CP::SearchNodeKeyPrediction::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeKeyPrediction");
}

uint64_t TI::CP::SearchNodeKeyPrediction::source_debug_data@<X0>(TI::CP::SearchNodeKeyPrediction *this@<X0>, void *a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)" key=", 5);
  uint64_t v4 = *(TI::Favonius::Key **)(*(uint64_t (**)(void))(**((void **)this + 8) + 16))(*((void *)this + 8));
  int v15 = 0x100000;
  __int16 v16 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  TI::Favonius::Key::append_debug_data(v4, (KB::String *)&v15);
  uint64_t v5 = v18;
  if (!v18) {
    uint64_t v5 = &v19;
  }
  if ((_WORD)v15) {
    double v6 = v5;
  }
  else {
    double v6 = "";
  }
  size_t v7 = strlen(v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)v6, v7);
  if (v18 && v17 == 1) {
    free(v18);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v12);
  v10[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v11 = v8;
  v12[0] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E4E7BBB0](&v14);
}

void TI::CP::SearchNodeKeyPrediction::~SearchNodeKeyPrediction(TI::CP::SearchNodeKeyPrediction *this)
{
  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }

  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeKeyPrediction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeyPrediction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F74FE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeyPrediction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F74FE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *TI::CP::SearchNodeKeyPredictionExtensions::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeKeyPredictionExtensions");
}

uint64_t TI::CP::SearchNodeKeyPredictionExtensions::source_debug_data@<X0>(TI::CP::SearchNodeKeyPredictionExtensions *this@<X0>, void *a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)" stack=", 7);
  if (*((_DWORD *)this + 14))
  {
    uint64_t v3 = *((unsigned int *)this + 14) - 1;
    do
    {
      uint64_t v4 = *(void *)(*((void *)this + 8) + 8 * v3);
      uint64_t v5 = *(TI::Favonius::Key **)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      int v18 = 0x100000;
      __int16 v19 = 0;
      char v20 = 0;
      __n128 v21 = 0;
      char v22 = 0;
      TI::Favonius::Key::append_debug_data(v5, (KB::String *)&v18);
      double v6 = v21;
      if (!v21) {
        double v6 = &v22;
      }
      if ((_WORD)v18) {
        size_t v7 = v6;
      }
      else {
        size_t v7 = "";
      }
      size_t v8 = strlen(v7);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)v7, v8);
      if (v21 && v20 == 1) {
        free(v21);
      }
      if (!v3) {
        break;
      }
      uint64_t v9 = v3;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)",", 1);
      --v3;
    }
    while (v9);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v15);
  v13[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v14 = v10;
  v15[0] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E4E7BBB0](&v17);
}

void TI::CP::SearchNodeKeyPredictionExtensions::~SearchNodeKeyPredictionExtensions(TI::CP::SearchNodeKeyPredictionExtensions *this)
{
  *(void *)this = &unk_1F3F74780;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F3F74780;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);

  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

double TI::CP::SearchNodeForward::bound_on_score(TI::CP::SearchNodeForward *this)
{
  if (*((void *)this + 4)) {
    return *((double *)this + 7);
  }
  else {
    return -INFINITY;
  }
}

void TI::CP::SearchNodeForward::branch_at_current_bound(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void *TI::CP::SearchNodeForward::node_at_current_bound@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this[4];
  if (v2)
  {
    uint64_t v3 = this[5];
    *a2 = v2;
    a2[1] = v3;
    this[7] = 0xFFF0000000000000;
    a2 = this + 4;
  }
  *a2 = 0;
  a2[1] = 0;
  return this;
}

void *TI::CP::SearchNodeForward::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeForward");
}

void TI::CP::SearchNodeForward::~SearchNodeForward(TI::CP::SearchNodeForward *this)
{
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

uint64_t TI::CP::SearchNodeRoot::is_score_final(TI::CP::SearchNodeRoot *this)
{
  return 1;
}

uint64_t TI::CP::SearchNodeRoot::is_root(TI::CP::SearchNodeRoot *this)
{
  return 1;
}

void *TI::CP::SearchNodeRoot::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeRoot");
}

void TI::CP::SearchNodeRoot::~SearchNodeRoot(TI::CP::SearchNodeRoot *this)
{
  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }

  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

uint64_t TI::CP::SearchNodeSkippedKey::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = (double *)(*(void *)(*(void *)(a1 + 24) + 56) + 48 * v4);
  double v7 = *v5;
  double v6 = v5[1];
  char v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32));
  uint64_t v9 = *(TI::CP::Search **)(a1 + 24);
  uint64_t v10 = (unint64_t *)MEMORY[0x1E4F1DAD8];
  if (v8)
  {
    uint64_t v11 = 0;
    unint64_t v12 = (double *)MEMORY[0x1E4F1DAD8];
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 32) + 48);
    unint64_t v12 = (double *)(*((void *)v9 + 7) + 48 * v11);
  }
  double v14 = *v12;
  double v13 = v12[1];
  double v15 = TI::CP::Search::path_deviation_cost(v9, v11, v4, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 1, v11, v4, v14, v13, v7, v6, v15);
  unint64_t v16 = *v10;
  unint64_t v17 = v10[1];
  v18.n128_u64[0] = TI::CP::Search::skipped_key_cost(*(TI::CP::Search **)(a1 + 24), v4);
  __int16 v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, __n128, __n128, __n128, __n128, __n128))(a2 + 16);
  v20.n128_f64[0] = v7;
  v21.n128_f64[0] = v6;
  v22.n128_u64[0] = v16;
  v23.n128_u64[0] = v17;

  return v19(a2, 4, v4, 0, v20, v21, v22, v23, v18);
}

uint64_t TI::CP::SearchNodeSkippedKey::is_score_final(TI::CP::SearchNodeSkippedKey *this)
{
  return 1;
}

uint64_t TI::CP::SearchNodeSkippedKey::is_skipped_key_hypothesis(TI::CP::SearchNodeSkippedKey *this)
{
  return 1;
}

void *TI::CP::SearchNodeSkippedKey::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeSkippedKey");
}

void TI::CP::SearchNodeSkippedKey::~SearchNodeSkippedKey(TI::CP::SearchNodeSkippedKey *this)
{
  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }

  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

uint64_t TI::CP::SearchNodeOvershoot::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = (unint64_t *)(*(void *)(*(void *)(a1 + 24) + 56) + 48 * v4);
  unint64_t v7 = *v5;
  unint64_t v6 = v5[1];
  char v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32));
  uint64_t v9 = *(TI::CP::Search **)(a1 + 24);
  if (v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (unint64_t *)MEMORY[0x1E4F1DAD8];
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 32) + 48);
    uint64_t v11 = (unint64_t *)(*((void *)v9 + 7) + 48 * v10);
  }
  unint64_t v13 = *v11;
  unint64_t v12 = v11[1];
  v14.n128_u64[0] = TI::CP::Search::overshoot_cost(v9, v10, v4);
  double v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128))(a2 + 16);
  v16.n128_u64[0] = v13;
  v17.n128_u64[0] = v12;
  v18.n128_u64[0] = v7;
  v19.n128_u64[0] = v6;

  return v15(a2, 3, v10, v4, v16, v17, v18, v19, v14);
}

uint64_t TI::CP::SearchNodeOvershoot::is_score_final(TI::CP::SearchNodeOvershoot *this)
{
  return 1;
}

uint64_t TI::CP::SearchNodeOvershoot::ideal_path_length(TI::CP::SearchNodeOvershoot *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 160))();
}

uint64_t TI::CP::SearchNodeOvershoot::is_overshoot_hypothesis(TI::CP::SearchNodeOvershoot *this)
{
  return 1;
}

void *TI::CP::SearchNodeOvershoot::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeOvershoot");
}

void TI::CP::SearchNodeOvershoot::~SearchNodeOvershoot(TI::CP::SearchNodeOvershoot *this)
{
  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }

  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

uint64_t TI::CP::SearchNodeLoop::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = (double *)(*(void *)(*(void *)(a1 + 24) + 56) + 48 * v4);
  double v7 = *v5;
  double v6 = v5[1];
  char v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32));
  uint64_t v9 = *(TI::CP::Search **)(a1 + 24);
  uint64_t v10 = (unint64_t *)MEMORY[0x1E4F1DAD8];
  if (v8)
  {
    uint64_t v11 = 0;
    unint64_t v12 = (double *)MEMORY[0x1E4F1DAD8];
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 32) + 48);
    unint64_t v12 = (double *)(*((void *)v9 + 7) + 48 * v11);
  }
  double v14 = *v12;
  double v13 = v12[1];
  TI::CP::Search::loop_cost(v9, v11, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 2, v11, v4, v14, v13, v7, v6, v15);
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    uint64_t v17 = *(unsigned int *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result) + 56);
    unint64_t v18 = *v10;
    unint64_t v19 = v10[1];
    uint64_t v20 = *(void *)(a1 + 24);
    float v21 = (*(float (**)(void))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64));
    v22.n128_f64[0] = *(double *)(v20 + 440) * logf(v21);
    __n128 v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128))(a2 + 16);
    v24.n128_f64[0] = v7;
    v25.n128_f64[0] = v6;
    v26.n128_u64[0] = v18;
    v27.n128_u64[0] = v19;
    return v23(a2, 8, v4, v17, v24, v25, v26, v27, v22);
  }
  return result;
}

BOOL TI::CP::SearchNodeLoop::is_score_final(TI::CP::SearchNodeLoop *this)
{
  return *((void *)this + 8) != 0;
}

uint64_t TI::CP::SearchNodeLoop::is_loop_hypothesis(TI::CP::SearchNodeLoop *this)
{
  return 1;
}

void *TI::CP::SearchNodeLoop::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeLoop");
}

void TI::CP::SearchNodeLoop::~SearchNodeLoop(TI::CP::SearchNodeLoop *this)
{
  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  TI::CP::SearchNodeSource::~SearchNodeSource(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F3F74E60;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  uint64_t v2 = (unsigned int *)*((void *)this + 8);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }

  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

void *TI::CP::SearchNodeSource::class_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeSource");
}

uint64_t TI::CP::SearchNodeSource::source_description@<X0>(TI::CP::SearchNodeSource *this@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v22);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v23, (uint64_t)"<", 1);
  (*(void (**)(void **__return_ptr, TI::CP::SearchNodeSource *))(*(void *)this + 24))(v20, this);
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v5 = v21;
  }
  else {
    uint64_t v5 = (uint64_t)v20[1];
  }
  double v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v23, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)" bs=", 4);
  (*(void (**)(TI::CP::SearchNodeSource *))(*(void *)this + 56))(this);
  double v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)" p=", 3);
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(void **__return_ptr))(*(void *)v8 + 64))(v18);
  }
  else {
    std::string::basic_string[abi:nn180100]<0>(v18, "NULL");
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v9 = v18;
  }
  else {
    uint64_t v9 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v10 = v19;
  }
  else {
    uint64_t v10 = (uint64_t)v18[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  (*(void (**)(void **__return_ptr, TI::CP::SearchNodeSource *))(*(void *)this + 16))(__p, this);
  if ((v17 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v17;
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  double v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)">", 1);
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v18[0]);
  }
  if ((char)v21 < 0) {
    operator delete(v20[0]);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v24);
  v22[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v23 = v14;
  v24[0] = MEMORY[0x1E4FBA470] + 16;
  if (v25 < 0) {
    operator delete((void *)v24[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E4E7BBB0](&v26);
}

uint64_t TI::CP::SearchNode::typing_extensions(TI::CP::SearchNode *this)
{
  if (!*((unsigned char *)this + 82))
  {
    (*(void (**)(void, char *))(**((void **)this + 8) + 48))(*((void *)this + 8), (char *)this + 88);
    *((unsigned char *)this + 82) = 1;
  }
  return (uint64_t)this + 88;
}

uint64_t TI::CP::SearchNodeSource::nearby_keys(TI::CP::SearchNodeSource *this)
{
  return *(void *)(*((void *)this + 3) + 376) + 24 * *((unsigned int *)this + 12);
}

uint64_t TI::CP::SearchNodeLanguageExtensions::SearchNodeLanguageExtensions(uint64_t a1, TI::CP::SearchNodeLanguageExtensions *this, long long *a3, TI::CP::SearchNode *a4)
{
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = this;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)a1 = &unk_1F3F74670;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(long double *)(a1 + 88) = TI::CP::SearchNodeLanguageExtensions::bound_on_score(this, (const TI::CP::Search *)v5, a4);
  TI::CP::SearchNodeLanguageExtensions::compute_bound_on_score((TI::CP::SearchNodeLanguageExtensions *)a1);
  return a1;
}

long double TI::CP::SearchNodeLanguageExtensions::bound_on_score(TI::CP::SearchNodeLanguageExtensions *this, const TI::CP::Search *a2, const TI::CP::SearchNode *a3)
{
  unsigned int v3 = a3;
  double v6 = *((double *)a2 + 9);
  if (((*(uint64_t (**)(const TI::CP::Search *))(*(void *)a2 + 72))(a2) & 1) == 0) {
    double v6 = v6 + TI::CP::Search::path_deviation_cost(this, *((_DWORD *)a2 + 12), v3, 0);
  }
  return v6 + TI::CP::Search::key_substitution_cost(this, v3);
}

double TI::CP::SearchNode::score(TI::CP::SearchNode *this)
{
  return *((double *)this + 9);
}

uint64_t TI::CP::SearchNodeGeometryExtensions::SearchNodeGeometryExtensions(uint64_t a1, TI::CP::SearchNodeGeometryExtensions *this, long long *a3, TI::CP::SearchNode *a4)
{
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = this;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = 0;
  *(void *)a1 = &unk_1F3F746C0;
  *(double *)(a1 + 56) = TI::CP::SearchNodeGeometryExtensions::bound_on_score(this, (const TI::CP::Search *)v5, a4);
  TI::CP::SearchNodeGeometryExtensions::skip_keys_equal_to_parent_key((TI::CP::SearchNodeGeometryExtensions *)a1);
  TI::CP::SearchNodeGeometryExtensions::compute_bound_on_score((TI::CP::SearchNodeGeometryExtensions *)a1);
  return a1;
}

double TI::CP::SearchNodeGeometryExtensions::bound_on_score(TI::CP::SearchNodeGeometryExtensions *this, const TI::CP::Search *a2, const TI::CP::SearchNode *a3)
{
  unsigned int v3 = a3;
  double v6 = *((double *)a2 + 9);
  if (((*(uint64_t (**)(const TI::CP::Search *))(*(void *)a2 + 72))(a2) & 1) == 0) {
    return v6 + TI::CP::Search::path_deviation_cost(this, *((_DWORD *)a2 + 12), v3, 0);
  }
  return v6;
}

uint64_t TI::CP::SearchNodeKeyPredictionExtensions::SearchNodeKeyPredictionExtensions(uint64_t a1, TI::CP::SearchNodeKeyPredictionExtensions *this, long long *a3, TI::CP::SearchNode *a4)
{
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = this;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)a1 = &unk_1F3F74780;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(double *)(a1 + 88) = TI::CP::SearchNodeKeyPredictionExtensions::bound_on_score(this, (const TI::CP::Search *)v5, a4);
  TI::CP::SearchNodeKeyPredictionExtensions::compute_bound_on_score((TI::CP::SearchNodeKeyPredictionExtensions *)a1);
  return a1;
}

double TI::CP::SearchNodeKeyPredictionExtensions::bound_on_score(TI::CP::SearchNodeKeyPredictionExtensions *this, const TI::CP::Search *a2, const TI::CP::SearchNode *a3)
{
  unsigned int v3 = a3;
  double v6 = *((double *)a2 + 9);
  int v7 = (*(uint64_t (**)(const TI::CP::Search *))(*(void *)a2 + 152))(a2);
  uint64_t v8 = 584;
  if (!v7) {
    uint64_t v8 = 576;
  }
  double v9 = v6 - *(double *)((char *)this + v8) * *((double *)this + 54);
  if (((*(uint64_t (**)(const TI::CP::Search *))(*(void *)a2 + 72))(a2) & 1) == 0
    && ((*(uint64_t (**)(const TI::CP::Search *))(*(void *)a2 + 136))(a2) & 1) == 0)
  {
    return v9 + TI::CP::Search::path_deviation_cost(this, *((_DWORD *)a2 + 12), v3, 0);
  }
  return v9;
}

uint64_t TI::CP::SearchNodeForward::SearchNodeForward(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  long long v5 = *(TI::CP::SearchNode **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)a1 = &unk_1F3F747D0;
  *(double *)(a1 + 56) = TI::CP::SearchNode::score_at_sample_index(v5, a4);
  return a1;
}

double TI::CP::SearchNode::score_at_sample_index(TI::CP::SearchNode *this, unsigned int a2)
{
  double v3 = *((double *)this + 9);
  unsigned int v4 = *((_DWORD *)this + 12);
  if (v4 < a2)
  {
    long long v5 = (TI::CP::Search *)*((void *)this + 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v5 + 8) - *((void *)v5 + 7)) >> 4) - 1 <= a2)
    {
      int v6 = 1;
    }
    else
    {
      ++a2;
      int v6 = 0;
    }
    return v3 + TI::CP::Search::path_deviation_cost(v5, v4, a2, v6);
  }
  return v3;
}

uint64_t TI::CP::SearchNodeRoot::SearchNodeRoot(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = a2;
  *(_DWORD *)(result + 48) = -1;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = v3;
  *(_WORD *)(result + 81) = 1;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(void *)uint64_t result = &unk_1F3F74820;
  *(void *)(result + 72) = 0;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 80) = 1;
  return result;
}

{
  uint64_t v3;

  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = a2;
  *(_DWORD *)(result + 48) = -1;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = v3;
  *(_WORD *)(result + 81) = 1;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(void *)uint64_t result = &unk_1F3F74820;
  *(void *)(result + 72) = 0;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 80) = 1;
  return result;
}

double TI::CP::SearchNode::SearchNode(uint64_t a1, uint64_t a2, long long *a3, int a4, uint64_t *a5, uint64_t *a6)
{
  long long v6 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)a1 = &unk_1F3F74E60;
  uint64_t v7 = *a5;
  *a5 = 0;
  uint64_t v8 = *a6;
  *a6 = 0;
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v8;
  *(_WORD *)(a1 + 80) = 256;
  *(unsigned char *)(a1 + 82) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t TI::CP::SearchNodeKeyMatch::SearchNodeKeyMatch(uint64_t a1, uint64_t a2, long long *a3, int a4, uint64_t *a5, uint64_t *a6)
{
  long long v7 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v8 = *a5;
  *a5 = 0;
  uint64_t v9 = *a6;
  *a6 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(_WORD *)(a1 + 80) = 256;
  *(unsigned char *)(a1 + 82) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)a1 = &unk_1F3F748E8;
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)a1);
  return a1;
}

{
  long long v7;
  uint64_t v8;
  uint64_t v9;

  long long v7 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v8 = *a5;
  *a5 = 0;
  uint64_t v9 = *a6;
  *a6 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(_WORD *)(a1 + 80) = 256;
  *(unsigned char *)(a1 + 82) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)a1 = &unk_1F3F748E8;
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)a1);
  return a1;
}

uint64_t TI::CP::SearchNodeKeySubstitution::SearchNodeKeySubstitution(uint64_t a1, uint64_t a2, long long *a3, int a4, uint64_t *a5)
{
  long long v6 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v7 = *a5;
  *a5 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v7;
  *(_WORD *)(a1 + 80) = 256;
  *(unsigned char *)(a1 + 82) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)a1 = &unk_1F3F749B0;
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)a1);
  return a1;
}

{
  long long v6;
  uint64_t v7;

  long long v6 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v7 = *a5;
  *a5 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v7;
  *(_WORD *)(a1 + 80) = 256;
  *(unsigned char *)(a1 + 82) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)a1 = &unk_1F3F749B0;
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)a1);
  return a1;
}

TI::CP::SearchNode *TI::CP::SearchNodeSkippedKey::SearchNodeSkippedKey(TI::CP::SearchNode *this, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  uint64_t v7 = *a3;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = *a3;
  }
  uint64_t v8 = *(void *)(v7 + 64);
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = v6;
  *((void *)this + 5) = v5;
  *((_DWORD *)this + 12) = a4;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = v8;
  *((_WORD *)this + 40) = 256;
  *((unsigned char *)this + 82) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(void *)this = &unk_1F3F74A78;
  TI::CP::SearchNode::compute_score(this);
  return this;
}

TI::CP::SearchNode *TI::CP::SearchNodeOvershoot::SearchNodeOvershoot(TI::CP::SearchNode *this, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  uint64_t v7 = *a3;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = *a3;
  }
  uint64_t v8 = *(void *)(v7 + 64);
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = v6;
  *((void *)this + 5) = v5;
  *((_DWORD *)this + 12) = a4;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = v8;
  *((_WORD *)this + 40) = 256;
  *((unsigned char *)this + 82) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(void *)this = &unk_1F3F74B40;
  TI::CP::SearchNode::compute_score(this);
  return this;
}

TI::CP::SearchNode *TI::CP::SearchNodeLoop::SearchNodeLoop(TI::CP::SearchNode *this, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  uint64_t v7 = *a3;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = *a3;
  }
  uint64_t v8 = *(atomic_uint **)(v7 + 56);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = v6;
  *((void *)this + 5) = v5;
  *((_DWORD *)this + 12) = a4;
  *((void *)this + 7) = v8;
  *((void *)this + 8) = 0;
  *((_WORD *)this + 40) = 256;
  *((unsigned char *)this + 82) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(void *)this = &unk_1F3F74C08;
  TI::CP::SearchNode::compute_score(this);
  return this;
}

void TI::CP::SearchNode::key_description(TI::CP::SearchNode *this@<X0>, void *a2@<X8>)
{
  int64x2_t v65 = 0uLL;
  uint64_t v66 = 0;
  uint64_t v2 = MEMORY[0x1E4FBA408];
  if (this)
  {
    uint64_t v3 = this;
    int64_t v56 = (void **)*MEMORY[0x1E4FBA408];
    uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    int64_t v55 = *(void ***)(MEMORY[0x1E4FBA408] + 64);
    while (1)
    {
      if ((*(uint64_t (**)(TI::CP::SearchNode *))(*(void *)v3 + 72))(v3)) {
        goto LABEL_67;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v59);
      if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 104))(v3))
      {
        uint64_t v5 = (*(uint64_t (**)(void))(**((void **)v3 + 8) + 16))(*((void *)v3 + 8));
        uint64_t v6 = *(void *)v5;
        if (*(_WORD *)(*(void *)v5 + 8))
        {
          uint64_t v7 = *(const char **)(v6 + 16);
          uint64_t v8 = (const char *)(v6 + 24);
          if (v7) {
            uint64_t v9 = v7;
          }
          else {
            uint64_t v9 = v8;
          }
        }
        else
        {
          uint64_t v9 = "";
        }
        size_t v19 = strlen(v9);
        unsigned __int8 v17 = &v60;
        unint64_t v18 = v9;
        goto LABEL_25;
      }
      if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 112))(v3)) {
        break;
      }
      if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 96))(v3))
      {
        unsigned __int8 v17 = &v60;
        unint64_t v18 = "°";
      }
      else
      {
        if (!(*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 80))(v3))
        {
          if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 88))(v3))
          {
            unsigned __int8 v17 = &v60;
            unint64_t v18 = "(-)";
LABEL_52:
            size_t v19 = 3;
            goto LABEL_25;
          }
          if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 128))(v3))
          {
            unsigned __int8 v17 = &v60;
            unint64_t v18 = "($)";
            goto LABEL_52;
          }
          if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 120))(v3))
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)"{", 1);
            uint64_t v35 = (*(uint64_t (**)(void))(**((void **)v3 + 19) + 16))(*((void *)v3 + 19));
            uint64_t v36 = *(void *)v35;
            if (*(_WORD *)(*(void *)v35 + 8))
            {
              uint64_t v37 = *(const char **)(v36 + 16);
              CGPoint v38 = (const char *)(v36 + 24);
              if (v37) {
                BOOL v39 = v37;
              }
              else {
                BOOL v39 = v38;
              }
            }
            else
            {
              BOOL v39 = "";
            }
            size_t v40 = strlen(v39);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)v39, v40);
            uint64_t v41 = (*(uint64_t (**)(void))(**((void **)v3 + 8) + 16))(*((void *)v3 + 8));
            uint64_t v42 = *(void *)v41;
            if (*(_WORD *)(*(void *)v41 + 8))
            {
              uint64_t v43 = *(const char **)(v42 + 16);
              BOOL v44 = (const char *)(v42 + 24);
              if (v43) {
                float v45 = v43;
              }
              else {
                float v45 = v44;
              }
            }
            else
            {
              float v45 = "";
            }
            size_t v46 = strlen(v45);
            unsigned __int8 v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)v45, v46);
            unint64_t v18 = "}";
            goto LABEL_24;
          }
          if (!(*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v3 + 136))(v3)) {
            goto LABEL_26;
          }
          uint64_t v10 = "(+";
          uint64_t v11 = 2;
LABEL_11:
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)v10, v11);
          uint64_t v12 = (*(uint64_t (**)(void))(**((void **)v3 + 8) + 16))(*((void *)v3 + 8));
          uint64_t v13 = *(void *)v12;
          if (*(_WORD *)(*(void *)v12 + 8))
          {
            uint64_t v14 = *(const char **)(v13 + 16);
            double v15 = (const char *)(v13 + 24);
            if (v14) {
              __n128 v16 = v14;
            }
            else {
              __n128 v16 = v15;
            }
          }
          else
          {
            __n128 v16 = "";
          }
          size_t v20 = strlen(v16);
          unsigned __int8 v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, (uint64_t)v16, v20);
          unint64_t v18 = ")";
LABEL_24:
          size_t v19 = 1;
          goto LABEL_25;
        }
        unsigned __int8 v17 = &v60;
        unint64_t v18 = "()";
      }
      size_t v19 = 2;
LABEL_25:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
LABEL_26:
      std::stringbuf::str[abi:nn180100]<std::allocator<char>>(__p, (uint64_t)v61);
      uint64_t v21 = v65.i64[1];
      if (v65.i64[1] >= (unint64_t)v66)
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v65.i64[1] - v65.i64[0]) >> 3);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * (((uint64_t)v66 - v65.i64[0]) >> 3) > v23) {
          unint64_t v23 = 0x5555555555555556 * (((uint64_t)v66 - v65.i64[0]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v66 - v65.i64[0]) >> 3) >= 0x555555555555555) {
          unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v24 = v23;
        }
        v67.__end_cap_.__value_ = (std::allocator<std::string> *)&v66;
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        unint64_t v26 = v24 + 24 * v22;
        *(void *)(v26 + 16) = v58;
        *(_OWORD *)unint64_t v26 = *(_OWORD *)__p;
        __p[1] = 0;
        uint64_t v58 = 0;
        __p[0] = 0;
        uint64_t v27 = v65.i64[1];
        uint64_t v28 = v65.i64[0];
        if (v65.i64[1] == v65.i64[0])
        {
          char v32 = 0;
          int64x2_t v31 = vdupq_n_s64(v65.u64[1]);
          unint64_t v29 = v26;
        }
        else
        {
          unint64_t v29 = v24 + 24 * v22;
          do
          {
            long long v30 = *(_OWORD *)(v27 - 24);
            *(void *)(v29 - 8) = *(void *)(v27 - 8);
            *(_OWORD *)(v29 - 24) = v30;
            v29 -= 24;
            *(void *)(v27 - 16) = 0;
            *(void *)(v27 - 8) = 0;
            *(void *)(v27 - 24) = 0;
            v27 -= 24;
          }
          while (v27 != v28);
          int64x2_t v31 = v65;
          char v32 = HIBYTE(v58);
        }
        unint64_t v33 = v26 + 24;
        v65.i64[0] = v29;
        v65.i64[1] = v26 + 24;
        *(int64x2_t *)&v67.__begin_ = v31;
        uint64_t v34 = v66;
        uint64_t v66 = (std::string *)(v24 + 24 * v25);
        v67.__end_cap_.__value_ = v34;
        v67.__first_ = (std::__split_buffer<std::string>::pointer)v31.i64[0];
        std::__split_buffer<std::string>::~__split_buffer(&v67);
        v65.i64[1] = v33;
        uint64_t v2 = MEMORY[0x1E4FBA408];
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_OWORD *)v65.i64[1] = *(_OWORD *)__p;
        *(void *)(v21 + 16) = v58;
        v65.i64[1] = v21 + 24;
      }
      uint64_t v3 = (TI::CP::SearchNode *)*((void *)v3 + 4);
      v59[0] = v56;
      *(void ***)((char *)v59 + (void)*(v56 - 3)) = v55;
      uint64_t v60 = v4;
      v61[0] = MEMORY[0x1E4FBA470] + 16;
      if (v63 < 0) {
        operator delete(v62);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1E4E7BBB0](v64);
      if (!v3) {
        goto LABEL_67;
      }
    }
    uint64_t v10 = "(";
    uint64_t v11 = 1;
    goto LABEL_11;
  }
LABEL_67:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v59);
  if (v65.i64[1] != v65.i64[0])
  {
    float v47 = &v60;
    uint64_t v48 = v65.i64[1] - 24;
    do
    {
      int v49 = *(char *)(v48 + 23);
      if (v49 >= 0) {
        uint64_t v50 = v48;
      }
      else {
        uint64_t v50 = *(void *)v48;
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(v48 + 23);
      }
      else {
        uint64_t v51 = *(void *)(v48 + 8);
      }
      float v47 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, v50, v51);
      BOOL v52 = v48 == v65.i64[0];
      v48 -= 24;
    }
    while (!v52);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v61);
  v59[0] = *(void ***)v2;
  uint64_t v53 = *(void *)(v2 + 72);
  *(void ***)((char *)v59 + (unint64_t)*(v59[0] - 3)) = *(void ***)(v2 + 64);
  uint64_t v60 = v53;
  v61[0] = MEMORY[0x1E4FBA470] + 16;
  if (v63 < 0) {
    operator delete(v62);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E4E7BBB0](v64);
  v59[0] = (void **)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v59);
}

uint64_t TI::CP::SearchNode::explain_score(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  if (!result)
  {
    TI::CP::SearchNode::explain_score(a1[4], a2);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = ___ZNK2TI2CP10SearchNode13explain_scoreERNSt3__16vectorINS0_14ScoreComponentENS2_9allocatorIS4_EEEE_block_invoke;
    v5[3] = &__block_descriptor_tmp_49;
    v5[4] = a2;
    return (*(uint64_t (**)(void *, void *))(*a1 + 176))(a1, v5);
  }
  return result;
}

void ___ZNK2TI2CP10SearchNode13explain_scoreERNSt3__16vectorINS0_14ScoreComponentENS2_9allocatorIS4_EEEE_block_invoke(uint64_t a1, int a2, int a3, int a4, double a5, double a6, double a7, double a8, double a9)
{
  unsigned __int8 v17 = *(void ***)(a1 + 32);
  unint64_t v18 = (char *)v17[1];
  size_t v19 = (char *)v17[2];
  if (v18 >= v19)
  {
    uint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((v18 - (unsigned char *)*v17) >> 3);
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) > 0x492492492492492) {
      abort();
    }
    unint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((v19 - (unsigned char *)*v17) >> 3);
    if (2 * v23 > v22) {
      unint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x249249249249249) {
      unint64_t v24 = 0x492492492492492;
    }
    else {
      unint64_t v24 = v22;
    }
    uint64_t v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::LanguageModelLexiconGroup>>(v24);
    unint64_t v26 = &v25[56 * v21];
    uint64_t v28 = &v25[56 * v27];
    *(_DWORD *)unint64_t v26 = a2;
    *((_DWORD *)v26 + 1) = a3;
    *((_DWORD *)v26 + 2) = a4;
    *((double *)v26 + 2) = a5;
    *((double *)v26 + 3) = a6;
    *((double *)v26 + 4) = a7;
    *((double *)v26 + 5) = a8;
    *((double *)v26 + 6) = a9;
    size_t v20 = v26 + 56;
    long long v30 = (char *)*v17;
    unint64_t v29 = (char *)v17[1];
    if (v29 != *v17)
    {
      do
      {
        long long v31 = *(_OWORD *)(v29 - 56);
        long long v32 = *(_OWORD *)(v29 - 40);
        long long v33 = *(_OWORD *)(v29 - 24);
        *((void *)v26 - 1) = *((void *)v29 - 1);
        *(_OWORD *)(v26 - 24) = v33;
        *(_OWORD *)(v26 - 40) = v32;
        *(_OWORD *)(v26 - 56) = v31;
        v26 -= 56;
        v29 -= 56;
      }
      while (v29 != v30);
      unint64_t v29 = (char *)*v17;
    }
    *unsigned __int8 v17 = v26;
    v17[1] = v20;
    uint64_t v17[2] = v28;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v18 = a2;
    *((_DWORD *)v18 + 1) = a3;
    *((_DWORD *)v18 + 2) = a4;
    *((double *)v18 + 2) = a5;
    *((double *)v18 + 3) = a6;
    *((double *)v18 + 4) = a7;
    *((double *)v18 + 5) = a8;
    size_t v20 = v18 + 56;
    *((double *)v18 + 6) = a9;
  }
  v17[1] = v20;
}

double TI::CP::SearchNode::shared_from_this@<D0>(TI::CP::SearchNode *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3 && (v5 = *((void *)this + 1), (uint64_t v6 = std::__shared_weak_count::lock(v3)) != 0))
  {
    *(void *)&long long v7 = v5;
    *((void *)&v7 + 1) = v6;
    *a2 = v7;
  }
  else
  {
    uint64_t v8 = (TI::CP::SearchNode *)std::__throw_bad_weak_ptr[abi:nn180100]();
    *(double *)&long long v7 = TI::CP::SearchNode::shared_from_this(v8, v9);
  }
  return *(double *)&v7;
}

{
  double result;
  long long v4;

  std::shared_ptr<TIInlineCompletionEventDispatcher>::shared_ptr[abi:nn180100]<TIInlineCompletionEventDispatcher,void>(&v4, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  uint64_t result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double TI::CP::SearchNode::termination_score(TI::CP::SearchNode *this)
{
  double v1 = *((double *)this + 9);
  uint64_t v2 = *((void *)this + 3);
  float v3 = (*(float (**)(void))(**((void **)this + 8) + 80))(*((void *)this + 8));
  return v1 + *(double *)(v2 + 440) * logf(v3);
}

uint64_t TI::CP::SearchNode::generate_candidates(double *a1, unsigned int **a2, uint64_t a3, uint64_t *a4, int a5)
{
  long long v7 = *a2;
  *a2 = 0;
  uint64_t v8 = 0x1CAC083126E978D5 * ((a4[1] - *a4) >> 3);
  v110 = v7;
  (*(void (**)(unsigned int *, void))(*(void *)v7 + 16))(v7, *((void *)a1 + 8));
  if ((*(unsigned int (**)(double *))(*(void *)a1 + 144))(a1)) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = (*(uint64_t (**)(double *))(*(void *)a1 + 88))(a1);
  uint64_t v11 = v9 | 4;
  if (!v10) {
    uint64_t v11 = v9;
  }
  uint64_t v112 = v11;
  uint64_t v12 = *a4;
  if (0x1CAC083126E978D5 * ((a4[1] - *a4) >> 3) > (unint64_t)v8)
  {
    uint64_t v13 = v8;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      double v15 = (KB::Candidate *)(v12 + 1000 * v13);
      *((void *)v15 + 121) |= v112;
      if ((*(unsigned int (**)(double *))(*(void *)a1 + 152))(a1))
      {
        *(unsigned char *)(v12 + 1000 * v13 + 960) = 1;
        uint64_t v16 = *(void *)v15;
        uint64_t v17 = *((void *)v15 + 1);
        *(_DWORD *)(v17 + 240 * v16 - 96) = (*(uint64_t (**)(double *))(*(void *)a1 + 152))(a1);
      }
      float v18 = (*(float (**)(void))(**((void **)a1 + 8) + 88))(*((void *)a1 + 8));
      float v19 = (*(float (**)(void))(**((void **)a1 + 8) + 80))(*((void *)a1 + 8));
      float v20 = v18 + logf(v19);
      if ((LODWORD(v20) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        uint64_t v21 = *((void *)a1 + 3);
        double v22 = *(double *)(v21 + 440);
        double v23 = a1[9];
        float v24 = (*(float (**)(void))(**((void **)a1 + 8) + 80))(*((void *)a1 + 8));
        float v25 = logf(v24);
        uint64_t v26 = *(void *)v15;
        float v27 = 1.0;
        float v28 = 1.0;
        if (*(void *)v15)
        {
          uint64_t v29 = *((void *)v15 + 1);
          long long v30 = (float *)(v29 + 48);
          uint64_t v31 = 240 * v26;
          do
          {
            float v32 = *v30;
            v30 += 60;
            float v28 = v28 * v32;
            v31 -= 240;
          }
          while (v31);
          uint64_t v33 = 240 * v26;
          uint64_t v34 = *((void *)v15 + 1);
          while ((*(unsigned char *)(v34 + 105) & 1) == 0)
          {
            v34 += 240;
            v33 -= 240;
            if (!v33) {
              goto LABEL_19;
            }
          }
          if (v34 != v29 + 240 * v26)
          {
LABEL_27:
            float v28 = v28 * 0.8;
            goto LABEL_28;
          }
LABEL_19:
          if (v26)
          {
            uint64_t v35 = 240 * v26 - 240;
            uint64_t v36 = (uint64_t *)(v29 + 224);
            do
            {
              uint64_t v38 = *v36;
              v36 += 30;
              uint64_t v37 = v38;
              if (v38) {
                BOOL v39 = 1;
              }
              else {
                BOOL v39 = v35 == 0;
              }
              v35 -= 240;
            }
            while (!v39);
            if (v37) {
              goto LABEL_27;
            }
          }
        }
LABEL_28:
        float v40 = v22;
        float v41 = v23 + *(double *)(v21 + 440) * v25 - (float)(v20 * v40);
        float v42 = v20 + logf(v28);
        uint64_t v43 = v12 + 1000 * v13;
        *(float *)(v43 + 748) = v41;
        *(float *)(v43 + 752) = v42;
        *(_DWORD *)(v43 + 756) = 0;
        *(float *)(v43 + 760) = v40;
        *(_DWORD *)(v43 + 764) = -8388608;
        float v44 = v41 + (float)(v40 * (float)(v42 + 0.0));
        *(float *)(v43 + 744) = v44;
        double v46 = a1[14];
        double v45 = a1[15];
        double v47 = a1[16];
        double v48 = *(double *)(*((void *)a1 + 3) + 440);
        (*(void (**)(void))(**((void **)a1 + 8) + 80))(*((void *)a1 + 8));
        if (*(void *)v15)
        {
          uint64_t v50 = 240 * *(void *)v15;
          uint64_t v51 = (float *)(*((void *)v15 + 1) + 48);
          float v27 = 1.0;
          do
          {
            float v52 = *v51;
            v51 += 60;
            float v27 = v27 * v52;
            v50 -= 240;
          }
          while (v50);
        }
        float v53 = logf(v49 * v27);
        uint64_t v54 = *((void *)a1 + 3);
        uint64_t v56 = *(void *)(v54 + 56);
        uint64_t v55 = *(void *)(v54 + 64);
        if (v56 == v55) {
          double v57 = 0.0;
        }
        else {
          double v57 = *(double *)(v55 - 16);
        }
        float v58 = v46 + v45;
        float v59 = v47 / v48 + v53;
        float v60 = v57;
        float v61 = (*(float (**)(double *))(*(void *)a1 + 160))(a1);
        *(float *)(v43 + 748) = v58;
        *(float *)(v43 + 752) = v59;
        *(_DWORD *)(v43 + 756) = 0;
        *(float *)(v43 + 760) = v40;
        *(_DWORD *)(v43 + 764) = -8388608;
        *(float *)(v43 + 768) = v60;
        *(float *)(v43 + 772) = v61;
        if (a5 >= 1)
        {
          Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          double valuePtr = v58;
          CFNumberRef v63 = CFNumberCreate(v14, kCFNumberDoubleType, &valuePtr);
          CFDictionarySetValue(Mutable, @"geometry_score", v63);
          if (v63) {
            CFRelease(v63);
          }
          double valuePtr = v59;
          CFNumberRef v64 = CFNumberCreate(v14, kCFNumberDoubleType, &valuePtr);
          CFDictionarySetValue(Mutable, @"word_score", v64);
          if (v64) {
            CFRelease(v64);
          }
          double valuePtr = v40;
          CFNumberRef v65 = CFNumberCreate(v14, kCFNumberDoubleType, &valuePtr);
          CFDictionarySetValue(Mutable, @"language_power", v65);
          if (v65) {
            CFRelease(v65);
          }
          double valuePtr = v44;
          CFNumberRef v66 = CFNumberCreate(v14, kCFNumberDoubleType, &valuePtr);
          CFDictionarySetValue(Mutable, @"final_log_score", v66);
          if (v66) {
            CFRelease(v66);
          }
          double valuePtr = expf(*(float *)(v43 + 744));
          CFNumberRef v67 = CFNumberCreate(v14, kCFNumberDoubleType, &valuePtr);
          CFDictionarySetValue(Mutable, @"final_score", v67);
          if (v67) {
            CFRelease(v67);
          }
          CFDictionarySetValue(Mutable, @"source", @"favonius");
          if (a5 != 1)
          {
            double valuePtr = 0.0;
            double v116 = 0.0;
            uint64_t v117 = 0;
            TI::CP::SearchNode::explain_score(a1, (uint64_t)&valuePtr);
            uint64_t v68 = *((void *)a1 + 3);
            float v69 = (*(float (**)(void))(**((void **)a1 + 8) + 80))(*((void *)a1 + 8));
            double v70 = *(double *)(v68 + 440) * logf(v69);
            double v71 = v116;
            if (*(void *)&v116 >= (unint64_t)v117)
            {
              uint64_t v74 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)&v116 - *(void *)&valuePtr) >> 3);
              unint64_t v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) > 0x492492492492492) {
                goto LABEL_87;
              }
              if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v117[-*(void *)&valuePtr] >> 3) > v75) {
                unint64_t v75 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v117[-*(void *)&valuePtr] >> 3);
              }
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v117[-*(void *)&valuePtr] >> 3)) >= 0x249249249249249) {
                unint64_t v76 = 0x492492492492492;
              }
              else {
                unint64_t v76 = v75;
              }
              float v77 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::LanguageModelLexiconGroup>>(v76);
              unsigned int v79 = &v77[56 * v74];
              *(void *)unsigned int v79 = 9;
              *((_DWORD *)v79 + 2) = 0;
              long long v80 = *MEMORY[0x1E4F1DAD8];
              *((_OWORD *)v79 + 1) = *MEMORY[0x1E4F1DAD8];
              *((_OWORD *)v79 + 2) = v80;
              *((double *)v79 + 6) = v70;
              double v82 = valuePtr;
              double v81 = v116;
              v83 = v79;
              if (*(void *)&v116 != *(void *)&valuePtr)
              {
                do
                {
                  long long v84 = *(_OWORD *)(*(void *)&v81 - 56);
                  long long v85 = *(_OWORD *)(*(void *)&v81 - 40);
                  long long v86 = *(_OWORD *)(*(void *)&v81 - 24);
                  *((void *)v83 - 1) = *(void *)(*(void *)&v81 - 8);
                  *(_OWORD *)(v83 - 24) = v86;
                  *(_OWORD *)(v83 - 40) = v85;
                  *(_OWORD *)(v83 - 56) = v84;
                  v83 -= 56;
                  *(void *)&v81 -= 56;
                }
                while (*(void *)&v81 != *(void *)&v82);
                double v81 = v82;
              }
              uint64_t v73 = v79 + 56;
              double valuePtr = *(double *)&v83;
              *(void *)&double v116 = v79 + 56;
              uint64_t v117 = &v77[56 * v78];
              if (v81 != 0.0) {
                operator delete(*(void **)&v81);
              }
            }
            else
            {
              **(void **)&double v116 = 9;
              *(_DWORD *)(*(void *)&v71 + 8) = 0;
              long long v72 = *MEMORY[0x1E4F1DAD8];
              *(_OWORD *)(*(void *)&v71 + 16) = *MEMORY[0x1E4F1DAD8];
              *(_OWORD *)(*(void *)&v71 + 32) = v72;
              *(double *)(*(void *)&v71 + 48) = v70;
              uint64_t v73 = (void *)(*(void *)&v71 + 56);
            }
            double v116 = *(double *)&v73;
            if (*(void *)v15)
            {
              uint64_t v87 = 240 * *(void *)v15;
              unint64_t v88 = (float *)(*((void *)v15 + 1) + 48);
              float v89 = 1.0;
              do
              {
                float v90 = *v88;
                v88 += 60;
                float v89 = v89 * v90;
                v87 -= 240;
              }
              while (v87);
            }
            else
            {
              float v89 = 1.0;
            }
            double v91 = *(double *)(*((void *)a1 + 3) + 440) * logf(v89);
            if (v73 >= (void *)v117)
            {
              uint64_t v94 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v73 - *(void *)&valuePtr) >> 3);
              unint64_t v95 = v94 + 1;
              if ((unint64_t)(v94 + 1) > 0x492492492492492) {
LABEL_87:
              }
                abort();
              if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v117[-*(void *)&valuePtr] >> 3) > v95) {
                unint64_t v95 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v117[-*(void *)&valuePtr] >> 3);
              }
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v117[-*(void *)&valuePtr] >> 3)) >= 0x249249249249249) {
                unint64_t v96 = 0x492492492492492;
              }
              else {
                unint64_t v96 = v95;
              }
              unsigned int v97 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::LanguageModelLexiconGroup>>(v96);
              v99 = &v97[56 * v94];
              *(void *)v99 = 10;
              *((_DWORD *)v99 + 2) = 0;
              long long v100 = *MEMORY[0x1E4F1DAD8];
              *((_OWORD *)v99 + 1) = *MEMORY[0x1E4F1DAD8];
              *((_OWORD *)v99 + 2) = v100;
              *((double *)v99 + 6) = v91;
              double v102 = valuePtr;
              double v101 = v116;
              uint64_t v103 = v99;
              if (*(void *)&v116 != *(void *)&valuePtr)
              {
                do
                {
                  long long v104 = *(_OWORD *)(*(void *)&v101 - 56);
                  long long v105 = *(_OWORD *)(*(void *)&v101 - 40);
                  long long v106 = *(_OWORD *)(*(void *)&v101 - 24);
                  *((void *)v103 - 1) = *(void *)(*(void *)&v101 - 8);
                  *(_OWORD *)(v103 - 24) = v106;
                  *(_OWORD *)(v103 - 40) = v105;
                  *(_OWORD *)(v103 - 56) = v104;
                  v103 -= 56;
                  *(void *)&v101 -= 56;
                }
                while (*(void *)&v101 != *(void *)&v102);
                double v101 = v102;
              }
              uint64_t v93 = v99 + 56;
              double valuePtr = *(double *)&v103;
              *(void *)&double v116 = v99 + 56;
              uint64_t v117 = &v97[56 * v98];
              if (v101 != 0.0) {
                operator delete(*(void **)&v101);
              }
            }
            else
            {
              *uint64_t v73 = 10;
              *((_DWORD *)v73 + 2) = 0;
              long long v92 = *MEMORY[0x1E4F1DAD8];
              *((_OWORD *)v73 + 1) = *MEMORY[0x1E4F1DAD8];
              *((_OWORD *)v73 + 2) = v92;
              *((double *)v73 + 6) = v91;
              uint64_t v93 = v73 + 7;
            }
            double v116 = *(double *)&v93;
            uint64_t v114 = 0;
            TI::CP::ScoreComponentSerializer::serialize_score_components((uint64_t *)&valuePtr, (double *)&v114, &value);
            v107 = value;
            CFDictionarySetValue(Mutable, @"components", value);
            if (v107) {
              CFRelease(v107);
            }
            if (valuePtr != 0.0)
            {
              double v116 = valuePtr;
              operator delete(*(void **)&valuePtr);
            }
          }
          KB::Candidate::add_sources_info(v15, @"favonius", Mutable);
          *(_DWORD *)(v12 + 1000 * v13 + 992) = 2;
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
      }
      uint64_t v12 = *a4;
      LODWORD(v8) = v8 + 1;
      uint64_t v13 = v8;
    }
    while (0x1CAC083126E978D5 * ((a4[1] - *a4) >> 3) > (unint64_t)v8);
  }
  uint64_t result = (uint64_t)v110;
  unsigned int v109 = atomic_load(v110 + 2);
  if (v109 == 1) {
    return (*(uint64_t (**)(void))(*(void *)v110 + 8))();
  }
  atomic_fetch_add((atomic_uint *volatile)v110 + 2, 0xFFFFFFFF);
  return result;
}

uint64_t KB::WordSuggestionPolicy::is_suggestible(KB::WordSuggestionPolicy *this, const KB::Word *a2, KB::String *a3)
{
  if ((*((unsigned char *)a2 + 106) & 0x80) != 0)
  {
    uint64_t v7 = 0;
    if (!a3) {
      return v7;
    }
    uint64_t v8 = "out-of-vocabulary";
LABEL_6:
    KB::String::append((unsigned __int16 *)a3, v8, 0xFFFFuLL);
    return v7;
  }
  if (KB::WordSuggestionPolicy::is_never_suggestible(this, a2, a3)) {
    return 0;
  }
  int v9 = *((_DWORD *)a2 + 26);
  if ((v9 & 0x2040000) == 0x2000000)
  {
    if (!KB::count_letters_if_word(a2, v6))
    {
      uint64_t v7 = 0;
      if (!a3) {
        return v7;
      }
      uint64_t v8 = "user acquired word is not learnable";
      goto LABEL_6;
    }
    int v9 = *((_DWORD *)a2 + 26);
    if ((v9 & 0x2000) == 0)
    {
      uint64_t v7 = 0;
      if (!a3) {
        return v7;
      }
      uint64_t v8 = "user acquired word that is not sufficiently learned";
      goto LABEL_6;
    }
  }
  if (((*((_DWORD *)this + 1) | 0x200) & v9) != 0) {
    return 1;
  }
  uint64_t v7 = 1;
  if ((v9 & 0x12000) == 0)
  {
    int v11 = *(_DWORD *)this & v9;
    if (v11)
    {
      if (v11 == 0x20000000)
      {
        if ((v9 & 0x20000000) != 0)
        {
          uint64_t v12 = *((void *)a2 + 14);
          BOOL v13 = (v12 & *((void *)this + 2)) != 0 || v12 == 0;
          BOOL v14 = v13;
          uint64_t v7 = !v14;
          if (a3)
          {
            if (v14)
            {
              uint64_t v8 = "sensitivity category is prohibited";
              goto LABEL_6;
            }
          }
        }
      }
      else if ((v9 & 0x80020100) == 0 && !*((void *)a2 + 28))
      {
        uint64_t v7 = 0;
        if (a3)
        {
          uint64_t v8 = "suggest_if_learned under policy, but not sufficiently learned";
          goto LABEL_6;
        }
      }
    }
  }
  return v7;
}

BOOL KB::WordSuggestionPolicy::is_never_suggestible(KB::WordSuggestionPolicy *this, const KB::Word *a2, KB::String *a3)
{
  if ((*((unsigned char *)a2 + 107) & 0x40) != 0)
  {
    if (a3)
    {
      uint64_t v6 = "word is blocklisted";
      goto LABEL_7;
    }
    return 1;
  }
  if (KB::Word::is_potentially_private(a2))
  {
    if (a3)
    {
      uint64_t v6 = "word is not suggestible";
LABEL_7:
      KB::String::append((unsigned __int16 *)a3, v6, 0xFFFFuLL);
      return 1;
    }
    return 1;
  }
  int v8 = *((_DWORD *)a2 + 26);
  if ((v8 & 0x10000) != 0)
  {
    int v12 = *((_DWORD *)this + 3) & v8;
    if (v12 != 0x20000000)
    {
      BOOL result = v12 != 0;
      if (a3 && v12)
      {
        uint64_t v6 = "user dictionary word is nosuggest under policy";
        goto LABEL_7;
      }
      return result;
    }
    if ((v8 & 0x20000000) != 0)
    {
      uint64_t v13 = *((void *)a2 + 14);
      BOOL result = (v13 & *((void *)this + 2)) != 0 || v13 == 0;
      if (a3 && result)
      {
        uint64_t v6 = "user dictionary word is sensitive only with prohibited category";
        goto LABEL_7;
      }
      return result;
    }
    return 0;
  }
  int v9 = *((_DWORD *)this + 2) & v8;
  if (v9 != 0x20000000)
  {
    BOOL result = v9 != 0;
    if (a3 && v9)
    {
      uint64_t v6 = "word is nosuggest under policy";
      goto LABEL_7;
    }
    return result;
  }
  if ((v8 & 0x20000000) == 0) {
    return 0;
  }
  uint64_t v10 = *((void *)a2 + 14);
  BOOL result = (v10 & *((void *)this + 2)) != 0 || v10 == 0;
  if (a3 && result)
  {
    uint64_t v6 = "sensitive only with prohibited category";
    goto LABEL_7;
  }
  return result;
}

uint64_t KB::WordSuggestionPolicy::standard_policy@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    if (result >= 7) {
      return result;
    }
    float v3 = (char *)&unk_1E4155518 + 4 * result;
    int v4 = dword_1E4155534[result];
    uint64_t v5 = &unk_1E4155570;
  }
  else
  {
    if (result >= 7) {
      return result;
    }
    float v3 = (char *)&unk_1E41554C0 + 4 * result;
    int v4 = 402653186;
    uint64_t v5 = &unk_1E41554E0;
  }
  int v6 = dword_1E4155550[(int)result];
  uint64_t v7 = v5[(int)result];
  *(void *)a3 = *(unsigned int *)v3;
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = v6;
  *(void *)(a3 + 16) = v7;
  return result;
}

uint64_t IsNumeric(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B88] decimalDigitCharacterSet];
  uint64_t v3 = [v2 characterIsMember:a1];

  return v3;
}

uint64_t KB::CandidateFilterParameters::CandidateFilterParameters(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  *(_OWORD *)a1 = xmmword_1E4154C20;
  *(void *)(a1 + 16) = 0x3DCCCCCD3F3DBAFDLL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 2;
  *(void *)(a1 + 40) = 0x600000008;
  *(_DWORD *)(a1 + 48) = 4;
  *(_OWORD *)(a1 + 52) = xmmword_1E4154C30;
  *(void *)(a1 + 68) = 0x3F8CCCCD00000003;
  *(unsigned char *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 1047904911;
  *(void *)(a1 + 84) = 0x7FFFFFFFLL;
  if (a6) {
    *(_DWORD *)(a1 + 4) = 1066192077;
  }
  if (a2)
  {
    CFStringRef v8 = (const __CFString *)MEMORY[0x1E4E79AD0](a2);
    if (v8)
    {
      CFStringRef v9 = v8;
      if (CFStringHasPrefix(v8, @"fr"))
      {
        int v10 = 1066611507;
LABEL_7:
        *(_DWORD *)(a1 + 4) = v10;
        goto LABEL_10;
      }
      if (CFStringHasPrefix(v9, @"it"))
      {
        *(_DWORD *)(a1 + 12) = 1071225242;
        goto LABEL_10;
      }
      if (CFStringHasPrefix(v9, @"ar"))
      {
        int v10 = 1108082688;
        goto LABEL_7;
      }
      if (CFStringHasPrefix(v9, @"de")) {
        *(unsigned char *)(a1 + 76) = 1;
      }
    }
  }
LABEL_10:
  *(_DWORD *)(a1 + 88) = a4;
  return a1;
}

float KB::CandidateFilterParameters::init_for_language_model(uint64_t a1)
{
  float result = *(float *)(a1 + 72);
  *(float *)(a1 + 4) = result;
  return result;
}

uint64_t KB::CandidateFilterParameters::init_locale_FR(uint64_t result)
{
  *(_DWORD *)(result + 4) = 1066611507;
  return result;
}

uint64_t KB::CandidateFilterParameters::init_locale_IT(uint64_t result)
{
  *(_DWORD *)(result + 12) = 1071225242;
  return result;
}

uint64_t KB::CandidateFilterParameters::init_locale_AR(uint64_t result)
{
  *(_DWORD *)(result + 4) = 1108082688;
  return result;
}

uint64_t KB::CandidateFilterParameters::init_locale_DE(uint64_t result)
{
  *(unsigned char *)(result + 76) = 1;
  return result;
}

uint64_t KB::CandidateFilterParameters::min_stem_length_for_predicting_num_letters(KB::CandidateFilterParameters *this, int a2)
{
  uint64_t v2 = (char *)this + 48;
  if (a2 == 2) {
    uint64_t v2 = (char *)this + 44;
  }
  if (a2 <= 1) {
    uint64_t v2 = (char *)this + 40;
  }
  return *(unsigned int *)v2;
}

double SetupInputClassifierTable(void)
{
  memset_pattern16(UkcMap, &unk_1E4154E60, 0x84uLL);
  memset_pattern16(&UkcMap[33], &unk_1E4154E70, 0x37CuLL);
  uint64_t v0 = 0;
  qword_1EAE41E80 = 0;
  xmmword_1EAE41E60 = 0u;
  unk_1EAE41E70 = 0u;
  xmmword_1EAE41E40 = 0u;
  unk_1EAE41E50 = 0u;
  xmmword_1EAE41E20 = 0u;
  unk_1EAE41E30 = 0u;
  xmmword_1EAE41DA0 = 0u;
  unk_1EAE41DB0 = 0u;
  xmmword_1EAE41DC0 = 0u;
  unk_1EAE41DD0 = 0u;
  int v1 = 192;
  xmmword_1EAE41DE0 = 0u;
  unk_1EAE41DF0 = 0u;
  qword_1EAE41E00 = 0;
  do
  {
    UkcMap[v1] = 0;
    int v1 = *(_DWORD *)((char *)&AscVnLexiList + v0 + 8);
    v0 += 8;
  }
  while (v0 != 256);
  uint64_t v2 = 0;
  DWORD1(xmmword_1EAE41E40) = 2;
  DWORD1(xmmword_1EAE41DC0) = 2;
  dword_1EAE41E34 = 2;
  dword_1EAE41DB4 = 2;
  dword_1EAE41E78 = 2;
  dword_1EAE41DF8 = 2;
  do
    UkcMap[WordBreakSyms[v2++]] = 1;
  while (v2 != 30);
  memset(IsoVnLexiMap, 255, 0x400uLL);
  uint64_t v3 = 0;
  int v4 = 192;
  do
  {
    IsoVnLexiMap[v4] = *(_DWORD *)((char *)&AscVnLexiList + v3 + 4);
    int v4 = *(_DWORD *)((char *)&AscVnLexiList + v3 + 8);
    v3 += 8;
  }
  while (v3 != 256);
  qword_1EAE42280 = 0xB9000000ADLL;
  xmmword_1EAE42240 = xmmword_1E4155630;
  unk_1EAE42250 = unk_1E4155640;
  xmmword_1EAE42260 = xmmword_1E4155650;
  unk_1EAE42270 = unk_1E4155660;
  xmmword_1EAE42220 = AZLexiLower;
  unk_1EAE42230 = unk_1E4155620;
  qword_1EAE42200 = 0xB8000000ACLL;
  xmmword_1EAE421A0 = AZLexiUpper;
  *(_OWORD *)algn_1EAE421B0 = unk_1E41555B8;
  *(void *)&double result = 0x560000004ALL;
  xmmword_1EAE421E0 = xmmword_1E41555E8;
  unk_1EAE421F0 = unk_1E41555F8;
  xmmword_1EAE421C0 = xmmword_1E41555C8;
  unk_1EAE421D0 = unk_1E41555D8;
  return result;
}

void UkInputProcessor::init(UkInputProcessor *this)
{
  if (!ClassifierTableInitialized)
  {
    SetupInputClassifierTable();
    ClassifierTableInitialized = 1;
  }
  *(_DWORD *)this = 0;

  UkInputProcessor::useBuiltIn((uint64_t)this, "Z");
}

void UkInputProcessor::useBuiltIn(uint64_t a1, unsigned char *a2)
{
  memset_pattern16((void *)(a1 + 4), &unk_1E4154E80, 0x400uLL);
  unsigned int v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = a2 + 4;
    uint64_t v6 = MEMORY[0x1E4F14390];
    do
    {
      *(_DWORD *)(a1 + 4 * v4 + 4) = *(_DWORD *)v5;
      if (*(int *)v5 <= 19)
      {
        if ((v4 & 0x80) != 0)
        {
          if (__maskrune(v4, 0x1000uLL))
          {
LABEL_6:
            int v7 = *(_DWORD *)v5;
            __darwin_ct_rune_t v8 = __toupper(*(v5 - 4));
            goto LABEL_13;
          }
        }
        else if ((*(_DWORD *)(v6 + 4 * v4 + 60) & 0x1000) != 0)
        {
          goto LABEL_6;
        }
        uint64_t v9 = *(v5 - 4);
        if (((char)*(v5 - 4) & 0x80000000) == 0)
        {
          if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x8000) == 0) {
            goto LABEL_14;
          }
LABEL_12:
          int v7 = *(_DWORD *)v5;
          __darwin_ct_rune_t v8 = __tolower(*(v5 - 4));
LABEL_13:
          *(_DWORD *)(a1 + 4 * v8 + 4) = v7;
          goto LABEL_14;
        }
        if (__maskrune(v9, 0x8000uLL)) {
          goto LABEL_12;
        }
      }
LABEL_14:
      unsigned int v4 = v5[4];
      v5 += 8;
    }
    while (v4);
  }
}

uint64_t UkInputProcessor::setIM(unsigned int *a1, unsigned int a2)
{
  *a1 = a2;
  if (a2 >= 4)
  {
    *a1 = 0;
    uint64_t v2 = "Z";
  }
  else
  {
    uint64_t v2 = (&off_1E6E2A9B0)[a2];
  }
  UkInputProcessor::useBuiltIn((uint64_t)a1, v2);
  return 1;
}

uint64_t UkInputProcessor::setIM(UkInputProcessor *this, int *a2)
{
  uint64_t v2 = 0;
  *(_DWORD *)this = 4;
  uint64_t v3 = (char *)this + 4;
  do
  {
    *(_DWORD *)&v3[v2 * 4] = a2[v2];
    ++v2;
  }
  while (v2 != 256);
  return 1;
}

void UkResetKeyMap(int *a1)
{
}

uint64_t UkInputProcessor::keyCodeToEvent(uint64_t result, unsigned int a2, _DWORD *a3)
{
  a3[3] = a2;
  if (a2 >= 0x100)
  {
    *a3 = 19;
    if ((int)a2 < 256)
    {
      int v5 = IsoVnLexiMap[a2];
      a3[2] = v5;
      if (v5 != -1)
      {
        int v6 = 0;
LABEL_9:
        a3[1] = v6;
        return result;
      }
    }
    else
    {
      a3[2] = -1;
    }
    int v6 = 2;
    goto LABEL_9;
  }
  int v3 = UkcMap[a2];
  int v4 = *(_DWORD *)(result + 4 * a2 + 4);
  *a3 = v4;
  a3[1] = v3;
  if ((v4 - 10) > 5)
  {
    BOOL v7 = __OFSUB__(v4, 20);
    int v8 = v4 - 20;
    if (v8 < 0 == v7)
    {
      a3[2] = v8;
      *(void *)a3 = 17;
      return result;
    }
  }
  else
  {
    a3[4] = v4 - 10;
  }
  a3[2] = IsoVnLexiMap[a2];
  return result;
}

void UkInputProcessor::keyCodeToSymbol(uint64_t a1, int a2, _DWORD *a3)
{
  a3[3] = a2;
  *a3 = 19;
  if (a2 < 256)
  {
    int v4 = IsoVnLexiMap[a2];
    a3[2] = v4;
    if (a2 < 0x100)
    {
      int v3 = UkcMap[a2];
      goto LABEL_8;
    }
    if (v4 != -1)
    {
      int v3 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    a3[2] = -1;
  }
  int v3 = 2;
LABEL_8:
  a3[1] = v3;
}

uint64_t UkInputProcessor::getCharType(UkInputProcessor *this, int a2)
{
  if (a2 < 0x100) {
    return UkcMap[a2];
  }
  if (a2 > 255 || IsoVnLexiMap[a2] == -1) {
    return 2;
  }
  return 0;
}

uint64_t UkInputProcessor::getKeyMap(uint64_t this, int *a2)
{
  for (uint64_t i = 0; i != 256; ++i)
    a2[i] = *(_DWORD *)(this + 4 + i * 4);
  return this;
}

KB::ByteString *KB::ByteString::ByteString(KB::ByteString *this, const KB::ByteString *a2, char a3)
{
  size_t v5 = *(unsigned __int16 *)a2;
  if (v5 <= 0xE) {
    int v6 = (char *)a2 + 2;
  }
  else {
    int v6 = (char *)*((void *)a2 + 1);
  }
  *(_WORD *)this = v5 + 1;
  if ((unsigned __int16)(v5 + 1) >= 0xFu) {
    operator new[]();
  }
  BOOL v7 = (char *)this + 2;
  if (v5) {
    memmove((char *)this + 2, v6, v5);
  }
  v7[v5] = a3;
  return this;
}

char *KB::ByteString::initialize(KB::ByteString *this, unsigned __int16 a2, const unsigned __int8 *__src, size_t __len)
{
  *(_WORD *)this = a2;
  if (a2 >= 0xFu) {
    operator new[]();
  }
  size_t v5 = (char *)this + 2;
  if (__len) {
    memmove((char *)this + 2, __src, __len);
  }
  return &v5[__len];
}

KB::ByteString *KB::ByteString::ByteString(KB::ByteString *this, const KB::ByteString *a2, const unsigned __int8 *a3, size_t a4)
{
  size_t v7 = *(unsigned __int16 *)a2;
  if (v7 <= 0xE) {
    int v8 = (char *)a2 + 2;
  }
  else {
    int v8 = (char *)*((void *)a2 + 1);
  }
  *(_WORD *)this = v7 + a4;
  if ((unsigned __int16)(v7 + a4) >= 0xFu) {
    operator new[]();
  }
  uint64_t v9 = (char *)this + 2;
  if (v7) {
    memmove((char *)this + 2, v8, v7);
  }
  if (a4) {
    memmove(&v9[v7], a3, a4);
  }
  return this;
}

__n128 KB::ByteString::copy(KB::ByteString *this, __n128 *a2)
{
  unint64_t v3 = a2->n128_u16[0];
  if (v3 >= 0xF)
  {
    *(_WORD *)this = v3;
    operator new[]();
  }
  __n128 result = *a2;
  *(__n128 *)this = *a2;
  return result;
}

_OWORD *KB::ByteString::move(_OWORD *result, unsigned __int16 *a2)
{
  unsigned int v2 = *a2;
  *__n128 result = *(_OWORD *)a2;
  if (v2 >= 0xF) {
    *a2 = 0;
  }
  return result;
}

unsigned __int16 *KB::ByteString::operator=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 >= 0xFu)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      MEMORY[0x1E4E7BC00](v4, 0x1000C8077774924);
    }
  }
  unint64_t v5 = *a2;
  if (v5 >= 0xF)
  {
    *a1 = v5;
    operator new[]();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

{
  uint64_t v4;
  unsigned int v5;

  if (*a1 >= 0xFu)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      MEMORY[0x1E4E7BC00](v4, 0x1000C8077774924);
    }
  }
  unint64_t v5 = *a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (v5 >= 0xF) {
    *a2 = 0;
  }
  return a1;
}

BOOL KB::ByteString::starts_with(KB::ByteString *this, const ByteString *a2)
{
  size_t var0 = a2->var0.var0.var0;
  unsigned int v3 = *(unsigned __int16 *)this;
  if (var0 > v3) {
    return 0;
  }
  var1 = a2->var0.var0.var1;
  if (var0 <= 0xE) {
    var1 = a2->var0.var1.var1;
  }
  if (v3 < 0xF) {
    int v6 = (char *)this + 2;
  }
  else {
    int v6 = (char *)*((void *)this + 1);
  }
  return memcmp(var1, v6, var0) == 0;
}

uint64_t KB::ByteString::compare(KB::ByteString *this, const KB::ByteString *a2)
{
  if (KB::operator<((unsigned __int16 *)this, (unsigned __int16 *)a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return !KB::operator==((unsigned __int16 *)this, (unsigned __int16 *)a2);
  }
}

uint64_t KB::operator<(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v2 = *a1;
  unsigned int v3 = (unsigned __int8 *)*((void *)a1 + 1);
  if (v2 <= 0xE) {
    unsigned int v3 = (unsigned __int8 *)(a1 + 1);
  }
  uint64_t v4 = *a2;
  unint64_t v5 = (unsigned __int8 *)*((void *)a2 + 1);
  if (v4 <= 0xE) {
    unint64_t v5 = (unsigned __int8 *)(a2 + 1);
  }
  if (!*a2) {
    return 0;
  }
  for (uint64_t i = v4 - 1; v2; --i)
  {
    unsigned int v7 = *v3;
    unsigned int v8 = *v5;
    if (v7 < v8) {
      break;
    }
    ++v3;
    ++v5;
    --v2;
    if (v8 < v7 || i == 0) {
      return 0;
    }
  }
  return 1;
}

BOOL KB::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  size_t v2 = *a1;
  if (v2 != *a2) {
    return 0;
  }
  if (v2 <= 0xE) {
    unsigned int v3 = a1 + 1;
  }
  else {
    unsigned int v3 = (const void *)*((void *)a1 + 1);
  }
  if (v2 <= 0xE) {
    uint64_t v4 = a2 + 1;
  }
  else {
    uint64_t v4 = (const void *)*((void *)a2 + 1);
  }
  return memcmp(v3, v4, v2) == 0;
}

id _createBinaryStringForHuffmanCode(void *a1)
{
  unint64_t v1 = [a1 unsignedLongLongValue];
  unint64_t v2 = vcvtpd_u64_f64(log2((double)v1));
  for (uint64_t i = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithCapacity:v2]; v2; --v2)
  {
    if (v1) {
      uint64_t v4 = @"1";
    }
    else {
      uint64_t v4 = @"0";
    }
    [i insertString:v4 atIndex:0];
    v1 >>= 1;
  }
  unint64_t v5 = (void *)[i copy];

  return v5;
}

uint64_t __Block_byref_object_copy__5695(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5696(uint64_t a1)
{
}

void TI::RejectionsDatabase::keyboard_db_file(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v7, 0, sizeof(v7));
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = (std::string *)a1;
  }
  else {
    uint64_t v4 = *(std::string **)a1;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  std::string::append[abi:nn180100]<char const*,0>(&v7, v4, (std::string *)((char *)v4 + v3));
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:nn180100]<char const*,0>(&__p, (std::string *)"AutocorrectionRejections.db", (std::string *)"");
  std::__fs::filesystem::operator/[abi:nn180100](&v6, (uint64_t)&v7, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = v6;
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

std::string *std::string::append[abi:nn180100]<char const*,0>(std::string *this, std::string *a2, std::string *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = (char *)a3 - (char *)a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    int v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    int v10 = this;
  }
  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    uint64_t v13 = this;
    if ((v6 & 0x80) != 0) {
      uint64_t v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    BOOL v14 = (char *)v13 + size;
    do
    {
      std::string::value_type v15 = v4->__r_.__value_.__s.__data_[0];
      uint64_t v4 = (std::string *)((char *)v4 + 1);
      *v14++ = v15;
    }
    while (v4 != a3);
    *BOOL v14 = 0;
    std::string::size_type v16 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v16;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
    }
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v7 > 0x16)
    {
      uint64_t v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v17 = v7 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_p = (std::string::value_type *)operator new(v17 + 1);
      std::string::size_type v24 = v7;
      int64_t v25 = v18 | 0x8000000000000000;
      std::string __p = p_p;
    }
    else
    {
      HIBYTE(v25) = v7;
      p_p = (std::string::value_type *)&__p;
    }
    do
    {
      std::string::value_type v19 = v4->__r_.__value_.__s.__data_[0];
      uint64_t v4 = (std::string *)((char *)v4 + 1);
      *p_p++ = v19;
    }
    while (v4 != a3);
    std::string::value_type *p_p = 0;
    if (v25 >= 0) {
      float v20 = (const std::string::value_type *)&__p;
    }
    else {
      float v20 = (const std::string::value_type *)__p;
    }
    if (v25 >= 0) {
      std::string::size_type v21 = HIBYTE(v25);
    }
    else {
      std::string::size_type v21 = v24;
    }
    std::string::append(this, v20, v21);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p);
    }
  }
  return this;
}

std::string *std::__fs::filesystem::operator/[abi:nn180100](std::string *this, uint64_t a2, std::__fs::filesystem::path *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    *this = *(std::string *)a2;
  }
  if (std::__fs::filesystem::path::__root_directory(a3).__size_)
  {
    return std::string::operator=(this, &a3->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_) {
      std::string::push_back(this, 47);
    }
    int v6 = SHIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
    if (v6 >= 0) {
      unint64_t v7 = a3;
    }
    else {
      unint64_t v7 = (std::__fs::filesystem::path *)a3->__pn_.__r_.__value_.__r.__words[0];
    }
    if (v6 >= 0) {
      std::string::size_type size = HIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = a3->__pn_.__r_.__value_.__l.__size_;
    }
    return std::string::append(this, (const std::string::value_type *)v7, size);
  }
}

uint64_t TI::get_database_size(TI *this, sqlite3 *a2)
{
  ppStmt = 0;
  uint64_t v2 = 0xFFFFFFFFLL;
  if (!sqlite3_prepare_v2(this, "SELECT page_count * page_size AS size FROM pragma_page_count(), pragma_page_size()", -1, &ppStmt, 0))
  {
    if (sqlite3_step(ppStmt) == 100) {
      uint64_t v2 = sqlite3_column_int(ppStmt, 0);
    }
    sqlite3_finalize(ppStmt);
  }
  return v2;
}

uint64_t TI::RejectionsDatabase::initialize(TI::RejectionsDatabase *this, const std::__fs::filesystem::path *__s, int a3, const __CFString *a4)
{
  v36[19] = *MEMORY[0x1E4F143B8];
  unsigned int v8 = (std::string *)((char *)this + 8);
  int v9 = *((char *)this + 31);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)this + 31);
  }
  else {
    size_t v10 = *((void *)this + 2);
  }
  if (v10 == strlen((const char *)__s))
  {
    unint64_t v11 = v9 >= 0 ? v8 : (std::string *)v8->__r_.__value_.__r.__words[0];
    if (!memcmp(v11, __s, v10)) {
      return 1;
    }
  }
  if ((TI_DEVICE_UNLOCKED_SINCE_BOOT() & 1) == 0)
  {
LABEL_13:
    uint64_t result = 0;
    *(void *)this = 0;
    return result;
  }
  ppDb = 0;
  if (sqlite3_open_v2((const char *)__s, &ppDb, 3145734, 0))
  {
    int v12 = sqlite3_errmsg(ppDb);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_12:
      sqlite3_close(ppDb);
      goto LABEL_13;
    }
    *(_DWORD *)ppStmt = 136315394;
    *(void *)&ppStmt[4] = __s;
    *(_WORD *)&ppStmt[12] = 2080;
    *(void *)&ppStmt[14] = v12;
    std::string::value_type v19 = MEMORY[0x1E4F14500];
    float v20 = "RejectionsDatabase: Error creating/opening database at: %s, %s";
    p_std::string error = (std::string *)ppStmt;
    uint32_t v22 = 22;
LABEL_25:
    _os_log_error_impl(&dword_1E3F0E000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)p_error, v22);
    goto LABEL_12;
  }
  if ((TI_IS_FILE_CLASS_C((uint64_t)__s) & 1) == 0 && !TI_SET_PROTECTION_CLASS_C((uint64_t)__s)) {
    goto LABEL_12;
  }
  CFIndex v14 = strlen((const char *)__s);
  CFURLRef v15 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)__s, v14, 0);
  error.__r_.__value_.__r.__words[0] = 0;
  if (!CFURLSetResourcePropertyForKey(v15, (CFStringRef)*MEMORY[0x1E4F1D680], (CFTypeRef)*MEMORY[0x1E4F1CFD0], (CFErrorRef *)&error))
  {
    remove(__s, v16);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)ppStmt = 136315138;
      *(void *)&ppStmt[4] = __s;
      _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "RejectionsDatabase: failed to set backup exclusion for database at: %s", ppStmt, 0xCu);
    }
    CFRelease(error.__r_.__value_.__l.__data_);
    CFRelease(v15);
    goto LABEL_12;
  }
  CFRelease(v15);
  uint64_t v17 = ppDb;
  *(void *)ppStmt = 0;
  if (sqlite3_prepare_v2(ppDb, "SELECT value FROM properties WHERE kedouble y = 'version'", -1, (sqlite3_stmt **)ppStmt, 0))
  {
    int v18 = 0;
  }
  else
  {
    if (sqlite3_step(*(sqlite3_stmt **)ppStmt) == 100) {
      int v18 = sqlite3_column_int(*(sqlite3_stmt **)ppStmt, 0);
    }
    else {
      int v18 = 0;
    }
    sqlite3_finalize(*(sqlite3_stmt **)ppStmt);
  }
  if (v18 != a3)
  {
    file_path_for_bundle_resource = get_file_path_for_bundle_resource(a4, @"sql");
    if (!file_path_for_bundle_resource) {
      goto LABEL_12;
    }
    int64_t v25 = file_path_for_bundle_resource;
    uint64_t v26 = MEMORY[0x1E4FBA460] + 24;
    uint64_t v27 = MEMORY[0x1E4FBA460] + 64;
    v36[0] = MEMORY[0x1E4FBA460] + 64;
    uint64_t v28 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
    *(void *)ppStmt = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
    *(void *)&ppStmt[*(void *)(*(void *)ppStmt - 24)] = v28;
    *(void *)&ppStmt[8] = 0;
    uint64_t v29 = (std::ios_base *)&ppStmt[*(void *)(*(void *)ppStmt - 24)];
    std::ios_base::init(v29, &ppStmt[16]);
    v29[1].__vftable = 0;
    v29[1].__fmtflags_ = -1;
    *(void *)ppStmt = v26;
    v36[0] = v27;
    MEMORY[0x1E4E7B9A0](&ppStmt[16]);
    if (!std::filebuf::open()) {
      std::ios_base::clear((std::ios_base *)&ppStmt[*(void *)(*(void *)ppStmt - 24)], *(_DWORD *)&ppStmt[*(void *)(*(void *)ppStmt - 24) + 32] | 4);
    }
    std::string::__init_with_sentinel[abi:nn180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&error, *(void **)&ppStmt[*(void *)(*(void *)ppStmt - 24) + 40]);
    errmsg = 0;
    long long v30 = (error.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &error
        : (std::string *)error.__r_.__value_.__r.__words[0];
    int v31 = sqlite3_exec(v17, (const char *)v30, 0, 0, &errmsg);
    free(v25);
    if (SHIBYTE(error.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(error.__r_.__value_.__l.__data_);
    }
    *(void *)ppStmt = *MEMORY[0x1E4FBA3F8];
    *(void *)&ppStmt[*(void *)(*(void *)ppStmt - 24)] = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
    MEMORY[0x1E4E7B9B0](&ppStmt[16]);
    std::istream::~istream();
    MEMORY[0x1E4E7BBB0](v36);
    if (v31) {
      goto LABEL_12;
    }
    *(void *)ppStmt = 0;
    if (sqlite3_prepare_v2(v17, "INSERT OR REPLACE INTO properties (key, value) VALUES ('version', ?)", -1, (sqlite3_stmt **)ppStmt, 0))
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_12;
      }
      LOWORD(error.__r_.__value_.__l.__data_) = 0;
      std::string::value_type v19 = MEMORY[0x1E4F14500];
      float v20 = "RejectionsDatabase: Unable to update library version.";
      p_std::string error = &error;
      uint32_t v22 = 2;
      goto LABEL_25;
    }
    sqlite3_bind_int(*(sqlite3_stmt **)ppStmt, 1, a3);
    sqlite3_step(*(sqlite3_stmt **)ppStmt);
    sqlite3_finalize(*(sqlite3_stmt **)ppStmt);
  }
  double v23 = ppDb;
  *(void *)this = ppDb;
  if (v23)
  {
    std::string::__assign_external(v8, (const std::string::value_type *)__s);
    return 1;
  }
  return 0;
}

void std::string::__init_with_sentinel[abi:nn180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *this, void *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (a2)
  {
    uint64_t v4 = (std::string::value_type *)a2[3];
    unint64_t v5 = (std::string::value_type *)a2[4];
    if (v4 == v5)
    {
      if ((*(unsigned int (**)(void *))(*a2 + 72))(a2) == -1) {
        return;
      }
      uint64_t v4 = (std::string::value_type *)a2[3];
      unint64_t v5 = (std::string::value_type *)a2[4];
    }
    if (v4 == v5) {
      std::string::value_type v6 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v6 = *v4;
    }
    std::string::push_back(this, v6);
    uint64_t v7 = a2[3];
    if (v7 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v7 + 1;
    }
  }
}

void TI::RejectionsDatabase::~RejectionsDatabase(TI::RejectionsDatabase *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = sqlite3_close(*(sqlite3 **)this);
  if (v2)
  {
    int v3 = v2;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v3;
      _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "RejectionsDatabase: Error closing database: %d", (uint8_t *)v4, 8u);
    }
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

BOOL TI::RejectionsDatabase::insert_rejection(sqlite3 **a1, sqlite3 *a2, const char *a3, int a4, int a5, double a6)
{
  unint64_t v11 = *a1;
  if (sqlite3_exec(*a1, "BEGIN TRANSACTION", 0, 0, 0)) {
    return 0;
  }
  BOOL v14 = a5 == 0;
  if (a5) {
    CFURLRef v15 = "inline_completion_rejections";
  }
  else {
    CFURLRef v15 = "rejections";
  }
  if (v14) {
    uint64_t v16 = 10;
  }
  else {
    uint64_t v16 = 28;
  }
  TI::insert_default_row(v11, a2, a3, v15, v12);
  if (a4) {
    uint64_t v17 = "hard";
  }
  else {
    uint64_t v17 = "soft";
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v31);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"UPDATE ", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)" SET ", 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v17, 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"_rejections = ", 14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v17, 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"_rejections + 1,", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)" last_", 6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v17, 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"_rejection = :last_rejection_timestamp ", 39);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)" WHERE typed = :typed AND correction = :correction", 50);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(pStmt, (uint64_t)&v32);
  int v31 = (void *)*MEMORY[0x1E4FBA418];
  *(void **)((char *)&v31 + *((void *)v31 - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v32 = MEMORY[0x1E4FBA470] + 16;
  if (v35 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E4E7BBB0](&v36);
  int v18 = v30;
  std::string::value_type v19 = pStmt[0];
  if (v30 >= 0) {
    float v20 = (char *)pStmt;
  }
  else {
    float v20 = (char *)pStmt[0];
  }
  std::string::basic_string[abi:nn180100]<0>(&v31, v20);
  if (v18 < 0) {
    operator delete(v19);
  }
  pStmt[0] = 0;
  if (v33 >= 0) {
    std::string::size_type v21 = (const char *)&v31;
  }
  else {
    std::string::size_type v21 = (const char *)v31;
  }
  if (sqlite3_prepare_v2(v11, v21, -1, pStmt, 0)) {
    goto LABEL_24;
  }
  uint32_t v22 = pStmt[0];
  int v23 = sqlite3_bind_parameter_index(pStmt[0], ":typed");
  sqlite3_bind_text(v22, v23, (const char *)a2, -1, 0);
  std::string::size_type v24 = pStmt[0];
  int v25 = sqlite3_bind_parameter_index(pStmt[0], ":correction");
  sqlite3_bind_text(v24, v25, a3, -1, 0);
  uint64_t v26 = pStmt[0];
  int v27 = sqlite3_bind_parameter_index(pStmt[0], ":last_rejection_timestamp");
  sqlite3_bind_double(v26, v27, a6);
  LODWORD(v26) = sqlite3_step(pStmt[0]);
  sqlite3_finalize(pStmt[0]);
  if (v26 == 101) {
LABEL_24:
  }
    BOOL v13 = sqlite3_exec(v11, "COMMIT", 0, 0, 0) == 0;
  else {
    BOOL v13 = 0;
  }
  if (v33 < 0) {
    operator delete(v31);
  }
  return v13;
}

void TI::insert_default_row(TI *this, sqlite3 *a2, const char *a3, const char *a4, const char *a5)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&__p, "INSERT OR IGNORE INTO ");
  if ((v25 & 0x80u) == 0) {
    size_t v9 = v25;
  }
  else {
    size_t v9 = *(void *)v24;
  }
  size_t v10 = strlen(a4);
  unint64_t v11 = &v22;
  std::string::basic_string[abi:nn180100]((uint64_t)&v22, v9 + v10);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v11 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if ((v25 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    memmove(v11, p_p, v9);
  }
  BOOL v13 = (char *)v11 + v9;
  if (v10) {
    memmove(v13, a4, v10);
  }
  v13[v10] = 0;
  BOOL v14 = std::string::append(&v22, " (typed, correction) VALUES (:typed, :correction)", 0x31uLL);
  CFURLRef v15 = (void *)v14->__r_.__value_.__r.__words[0];
  v26[0] = v14->__r_.__value_.__l.__size_;
  *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0) {
    operator delete(__p);
  }
  std::string __p = v15;
  *(void *)std::string::size_type v24 = v26[0];
  *(void *)&v24[7] = *(void *)((char *)v26 + 7);
  unsigned __int8 v25 = v16;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    unsigned __int8 v16 = v25;
    CFURLRef v15 = __p;
  }
  v22.__r_.__value_.__r.__words[0] = 0;
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = &__p;
  }
  else {
    uint64_t v17 = (void **)v15;
  }
  if (!sqlite3_prepare_v2(this, (const char *)v17, -1, (sqlite3_stmt **)&v22, 0))
  {
    int v18 = (sqlite3_stmt *)v22.__r_.__value_.__r.__words[0];
    int v19 = sqlite3_bind_parameter_index((sqlite3_stmt *)v22.__r_.__value_.__l.__data_, ":typed");
    sqlite3_bind_text(v18, v19, (const char *)a2, -1, 0);
    float v20 = (sqlite3_stmt *)v22.__r_.__value_.__r.__words[0];
    int v21 = sqlite3_bind_parameter_index((sqlite3_stmt *)v22.__r_.__value_.__l.__data_, ":correction");
    sqlite3_bind_text(v20, v21, a3, -1, 0);
    sqlite3_step((sqlite3_stmt *)v22.__r_.__value_.__l.__data_);
    sqlite3_finalize((sqlite3_stmt *)v22.__r_.__value_.__l.__data_);
  }
  if ((char)v25 < 0) {
    operator delete(__p);
  }
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 24;
  uint64_t v3 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + *(void *)(v5 - 24)) = v4;
  std::string::value_type v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(void *)a1 = v2;
  *(void *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

BOOL TI::RejectionsDatabase::insert_inline_completion_rejection(sqlite3 **a1, sqlite3 *a2, const char *a3, int a4, double a5)
{
  size_t v9 = *a1;
  if (sqlite3_exec(*a1, "BEGIN TRANSACTION", 0, 0, 0)) {
    return 0;
  }
  TI::insert_default_row(v9, a2, a3, "inline_completion_rejections", v10);
  if (a4) {
    int v12 = "hard";
  }
  else {
    int v12 = "soft";
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v32);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"UPDATE ", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"inline_completion_rejections", 28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)" SET ", 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)v12, 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"_rejections = ", 14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)v12, 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"_rejections + ", 14);
  BOOL v13 = (void *)std::ostream::operator<<();
  BOOL v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
  CFURLRef v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" last_", 6);
  unsigned __int8 v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)v12, 4);
  uint64_t v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"_rejection = :last_rejection_timestamp,", 39);
  int v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)" typed = :typed ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)" WHERE correction = :correction", 31);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(pStmt, (uint64_t)&v33);
  uint64_t v32 = (void *)*MEMORY[0x1E4FBA418];
  *(void **)((char *)&v32 + *((void *)v32 - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v33 = MEMORY[0x1E4FBA470] + 16;
  if (v36 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E4E7BBB0](&v37);
  int v19 = v31;
  float v20 = pStmt[0];
  if (v31 >= 0) {
    int v21 = (char *)pStmt;
  }
  else {
    int v21 = (char *)pStmt[0];
  }
  std::string::basic_string[abi:nn180100]<0>(&v32, v21);
  if (v19 < 0) {
    operator delete(v20);
  }
  pStmt[0] = 0;
  if (v34 >= 0) {
    std::string v22 = (const char *)&v32;
  }
  else {
    std::string v22 = (const char *)v32;
  }
  if (sqlite3_prepare_v2(v9, v22, -1, pStmt, 0)) {
    goto LABEL_18;
  }
  int v23 = pStmt[0];
  int v24 = sqlite3_bind_parameter_index(pStmt[0], ":typed");
  sqlite3_bind_text(v23, v24, (const char *)a2, -1, 0);
  unsigned __int8 v25 = pStmt[0];
  int v26 = sqlite3_bind_parameter_index(pStmt[0], ":correction");
  sqlite3_bind_text(v25, v26, a3, -1, 0);
  int v27 = pStmt[0];
  int v28 = sqlite3_bind_parameter_index(pStmt[0], ":last_rejection_timestamp");
  sqlite3_bind_double(v27, v28, a5);
  LODWORD(v27) = sqlite3_step(pStmt[0]);
  sqlite3_finalize(pStmt[0]);
  if (v27 == 101) {
LABEL_18:
  }
    BOOL v11 = sqlite3_exec(v9, "COMMIT", 0, 0, 0) == 0;
  else {
    BOOL v11 = 0;
  }
  if (v34 < 0) {
    operator delete(v32);
  }
  return v11;
}

void TI::RejectionsDatabase::get_inline_completion_rejections(sqlite3 **this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *this;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 56) = 0;
  ppStmt = 0;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v20, (uint64_t)"SELECT typed, performed_count, soft_rejections, hard_rejections, last_soft_rejection, last_hard_rejection ", 106);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v20, (uint64_t)"FROM ", 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v20, (uint64_t)"inline_completion_rejections", 28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v20, (uint64_t)" WHERE correction = :correction", 31);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(__dst, (uint64_t)&v20 + 8);
  *(void *)&long long v20 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v20 + *(void *)(v20 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v20 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E4E7BBB0](&v25);
  if (v18 >= 0) {
    std::string::value_type v6 = __dst;
  }
  else {
    std::string::value_type v6 = (void **)__dst[0];
  }
  if (!sqlite3_prepare_v2(v5, (const char *)v6, -1, &ppStmt, 0))
  {
    uint64_t v7 = ppStmt;
    int v8 = sqlite3_bind_parameter_index(ppStmt, ":correction");
    sqlite3_bind_text(v7, v8, a2, -1, 0);
    int v9 = sqlite3_step(ppStmt);
    size_t v10 = ppStmt;
    if (v9 == 100)
    {
      memset(&v16, 0, sizeof(v16));
      BOOL v11 = sqlite3_column_text(ppStmt, 0);
      std::string::__assign_external(&v16, (const std::string::value_type *)v11);
      LODWORD(v14) = sqlite3_column_int(ppStmt, 1);
      DWORD1(v14) = sqlite3_column_int(ppStmt, 2);
      DWORD2(v14) = sqlite3_column_int(ppStmt, 3);
      *(void *)&long long v15 = sqlite3_column_double(ppStmt, 4);
      *((void *)&v15 + 1) = sqlite3_column_double(ppStmt, 5);
      long long v20 = v14;
      long long v21 = v15;
      char v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v22, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
        char v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      }
      else
      {
        std::string v22 = v16;
      }
      long long v13 = v21;
      *(_OWORD *)a3 = v20;
      *(_OWORD *)(a3 + 16) = v13;
      *(std::string *)(a3 + 32) = v22;
      memset(&v22, 0, sizeof(v22));
      *(unsigned char *)(a3 + 56) = 1;
      if (v12 < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      size_t v10 = ppStmt;
    }
    sqlite3_finalize(v10);
  }
  if (v18 < 0) {
    operator delete(__dst[0]);
  }
}

uint64_t TI::RejectionsDatabase::insert_acceptance(sqlite3 **a1, const char *a2, const char *a3, int a4, int a5)
{
  if (!a4) {
    return 1;
  }
  int v8 = *a1;
  if (sqlite3_exec(*a1, "BEGIN TRANSACTION", 0, 0, 0)) {
    return 0;
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&ppStmt);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&ppStmt, (uint64_t)"UPDATE ", 7);
  if (a5) {
    size_t v10 = "inline_completion_rejections";
  }
  else {
    size_t v10 = "rejections";
  }
  if (a5) {
    uint64_t v11 = 28;
  }
  else {
    uint64_t v11 = 10;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&ppStmt, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&ppStmt, (uint64_t)" SET performed_count = performed_count + 1, ", 44);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&ppStmt, (uint64_t)" hard_rejections = 0 ", 21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&ppStmt, (uint64_t)" WHERE typed = :typed AND correction = :correction", 50);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(v19, (uint64_t)v22);
  ppStmt = (sqlite3_stmt *)*MEMORY[0x1E4FBA418];
  *(void *)((char *)&v22[-1] + *((void *)ppStmt - 3)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v22[0] = MEMORY[0x1E4FBA470] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E4E7BBB0](&v24);
  ppStmt = 0;
  if (v20 >= 0) {
    char v12 = v19;
  }
  else {
    char v12 = (void **)v19[0];
  }
  if (sqlite3_prepare_v2(v8, (const char *)v12, -1, &ppStmt, 0)) {
    goto LABEL_18;
  }
  long long v13 = ppStmt;
  int v14 = sqlite3_bind_parameter_index(ppStmt, ":typed");
  sqlite3_bind_text(v13, v14, a2, -1, 0);
  long long v15 = ppStmt;
  int v16 = sqlite3_bind_parameter_index(ppStmt, ":correction");
  sqlite3_bind_text(v15, v16, a3, -1, 0);
  int v17 = sqlite3_step(ppStmt);
  sqlite3_finalize(ppStmt);
  if (v17 == 101) {
LABEL_18:
  }
    BOOL v9 = sqlite3_exec(v8, "COMMIT", 0, 0, 0) == 0;
  else {
    BOOL v9 = 0;
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  return v9;
}

void TI::RejectionsDatabase::get_rejections(sqlite3 **a1@<X0>, const char *a2@<X1>, const char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  BOOL v9 = *a1;
  *(unsigned char *)a5 = 0;
  *(unsigned char *)(a5 + 32) = 0;
  ppStmt = 0;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v25);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)"SELECT performed_count, soft_rejections, hard_rejections, last_soft_rejection, last_hard_rejection ", 99);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)"FROM ", 5);
  if (a4) {
    size_t v10 = "inline_completion_rejections";
  }
  else {
    size_t v10 = "rejections";
  }
  if (a4) {
    uint64_t v11 = 28;
  }
  else {
    uint64_t v11 = 10;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)" WHERE typed = :typed AND correction = :correction", 50);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(__dst, (uint64_t)v26);
  uint64_t v25 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v26[-1] + *(void *)(v25 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v26[0] = MEMORY[0x1E4FBA470] + 16;
  if (v27 < 0) {
    operator delete((void *)v26[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E4E7BBB0](&v28);
  if (v23 >= 0) {
    char v12 = __dst;
  }
  else {
    char v12 = (void **)__dst[0];
  }
  if (!sqlite3_prepare_v2(v9, (const char *)v12, -1, &ppStmt, 0))
  {
    long long v13 = ppStmt;
    int v14 = sqlite3_bind_parameter_index(ppStmt, ":typed");
    sqlite3_bind_text(v13, v14, a2, -1, 0);
    long long v15 = ppStmt;
    int v16 = sqlite3_bind_parameter_index(ppStmt, ":correction");
    sqlite3_bind_text(v15, v16, a3, -1, 0);
    if (sqlite3_step(ppStmt) == 100)
    {
      int v17 = sqlite3_column_int(ppStmt, 0);
      int v18 = sqlite3_column_int(ppStmt, 1);
      int v19 = sqlite3_column_int(ppStmt, 2);
      double v20 = sqlite3_column_double(ppStmt, 3);
      double v21 = sqlite3_column_double(ppStmt, 4);
      *(_DWORD *)a5 = v17;
      *(_DWORD *)(a5 + 4) = v18;
      *(_DWORD *)(a5 + 8) = v19;
      *(double *)(a5 + 16) = v20;
      *(double *)(a5 + 24) = v21;
      *(unsigned char *)(a5 + 32) = 1;
    }
    sqlite3_finalize(ppStmt);
  }
  if (v23 < 0) {
    operator delete(__dst[0]);
  }
}

uint64_t TI::RejectionsDatabase::prune(TI **this, sqlite3 *a2)
{
  int v2 = (int)a2;
  void v16[2] = *MEMORY[0x1E4F143B8];
  BOOL v3 = 1;
  uint64_t v4 = *this;
  unsigned int v5 = 1;
  while (1)
  {
    database_std::string::size_type size = TI::get_database_size(v4, a2);
    BOOL v7 = database_size < v2;
    if (database_size < v2) {
      return v7 & v3;
    }
    char v8 = 0;
    uint64_t v9 = 0;
    v16[0] = "DELETE FROM rejections WHERE (soft_rejections + hard_rejections < ?)";
    v16[1] = "DELETE FROM inline_completion_rejections WHERE (soft_rejections + hard_rejections < ?)";
    do
    {
      char v10 = v8;
      uint64_t v11 = (const char *)v16[v9];
      ppStmt = 0;
      if (sqlite3_prepare_v2(v4, v11, -1, &ppStmt, 0))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          unsigned int v15 = v5;
          _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "RejectionsDatabase: Unable to delete rows with counts below %d.", buf, 8u);
        }
        goto LABEL_11;
      }
      char v8 = 1;
      sqlite3_bind_int(ppStmt, 1, v5);
      sqlite3_step(ppStmt);
      sqlite3_finalize(ppStmt);
      uint64_t v9 = 1;
    }
    while ((v10 & 1) == 0);
    if (!sqlite3_exec(v4, "VACUUM", 0, 0, 0))
    {
      BOOL v3 = v5++ < 0x63;
      if (v5 != 100) {
        continue;
      }
    }
LABEL_11:
    BOOL v7 = 0;
    return v7 & v3;
  }
}

BOOL TI::RejectionsDatabase::clear(sqlite3 **this)
{
  unint64_t v1 = *this;
  int v2 = sqlite3_exec(*this, "DELETE FROM rejections", 0, 0, 0);
  return (v2 | sqlite3_exec(v1, "DELETE FROM inline_completion_rejections", 0, 0, 0)) == 0;
}

BOOL TI::RejectionsDatabase::blocked_by_hard_rejections(uint64_t a1, double a2)
{
  double v2 = a2 / 60.0 / 60.0 / 24.0;
  return v2 <= 180.0 && (int v3 = *(_DWORD *)(a1 + 8)) != 0 && log(v2) / 1.38629436 < (double)(v3 - 1);
}

void TI::RejectionsDatabase::soft_add_accepted(uint64_t a1, const std::string *a2, const std::string *a3, double a4)
{
  TI::memory_for_db_path((unint64_t)&v18, a1 + 8, 0);
  uint64_t v7 = v18;
  char v8 = (std::mutex *)(v18 + 400);
  std::mutex::lock((std::mutex *)(v18 + 400));
  uint64_t v9 = *(unsigned int *)(v7 + 192);
  if ((int)v9 >= 3)
  {
    int v10 = 0;
    uint64_t v11 = (double *)(v7 + 112);
    for (uint64_t i = 1; i != v9; ++i)
    {
      double v13 = *v11;
      v11 += 8;
      if (v13 < *(double *)(v7 + ((uint64_t)v10 << 6) + 48)) {
        int v10 = i;
      }
    }
  }
  else
  {
    *(_DWORD *)(v7 + 192) = v9 + 1;
    int v10 = v9;
  }
  uint64_t v14 = v7 + ((uint64_t)v10 << 6);
  std::string::operator=((std::string *)v14, a2);
  std::string::operator=((std::string *)(v14 + 24), a3);
  *(_DWORD *)(v14 + 56) = 0;
  *(double *)(v14 + 48) = a4;
  uint64_t v15 = *(unsigned int *)(v7 + 392);
  if ((int)v15 >= 1)
  {
    int v16 = (_DWORD *)(v7 + 256);
    do
    {
      ++*v16;
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  std::mutex::unlock(v8);
  int v17 = v19;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v17);
  }
}

void TI::memory_for_db_path(unint64_t a1, uint64_t a2, int a3)
{
  {
    TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map = 0u;
    *(_OWORD *)&qword_1EBFF0350 = 0u;
    dword_1EBFF0360 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,std::shared_ptr<TI::ShortMemory>>::~unordered_map[abi:nn180100], &TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map, &dword_1E3F0E000);
  }
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map_mutex, &dword_1E3F0E000);
  }
  std::mutex::lock(&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map_mutex);
  int v6 = *(char *)(a2 + 23);
  uint64_t v7 = *(const std::string::value_type **)a2;
  std::string::size_type v8 = *(void *)(a2 + 8);
  if (v6 >= 0) {
    uint64_t v9 = (uint64_t *)a2;
  }
  else {
    uint64_t v9 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v10 = *(void *)(a2 + 8);
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v9, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1);
  if (a3 == 1)
  {
    if (*((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1))
    {
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map
                                           + 8));
      v14.i16[0] = vaddlv_u8(v14);
      unint64_t v15 = v14.u32[0];
      if (v14.u32[0] > 1uLL)
      {
        unint64_t v16 = v11;
        if (v11 >= *((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1)) {
          unint64_t v16 = v11 % *((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1);
        }
      }
      else
      {
        unint64_t v16 = (*((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) - 1) & v11;
      }
      uint64_t v19 = TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map;
      double v20 = *(uint64_t **)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v16);
      if (v20)
      {
        uint64_t v21 = *v20;
        if (*v20)
        {
          uint64_t v22 = *((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) - 1;
          do
          {
            unint64_t v23 = *(void *)(v21 + 8);
            if (v23 == v12)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)(v21 + 16), (unsigned __int8 *)a2))
              {
                if (v15 > 1)
                {
                  if (v12 >= v13) {
                    v12 %= v13;
                  }
                }
                else
                {
                  v12 &= v22;
                }
                float v53 = *(uint64_t **)(v19 + 8 * v12);
                do
                {
                  uint64_t v54 = v53;
                  float v53 = (uint64_t *)*v53;
                }
                while (v53 != (uint64_t *)v21);
                if (v54 == &qword_1EBFF0350) {
                  goto LABEL_135;
                }
                unint64_t v55 = v54[1];
                if (v15 > 1)
                {
                  if (v55 >= v13) {
                    v55 %= v13;
                  }
                }
                else
                {
                  v55 &= v22;
                }
                if (v55 != v12)
                {
LABEL_135:
                  if (!*(void *)v21) {
                    goto LABEL_136;
                  }
                  unint64_t v56 = *(void *)(*(void *)v21 + 8);
                  if (v15 > 1)
                  {
                    if (v56 >= v13) {
                      v56 %= v13;
                    }
                  }
                  else
                  {
                    v56 &= v22;
                  }
                  if (v56 != v12) {
LABEL_136:
                  }
                    *(void *)(v19 + 8 * v12) = 0;
                }
                uint64_t v57 = *(void *)v21;
                if (*(void *)v21)
                {
                  unint64_t v58 = *(void *)(v57 + 8);
                  if (v15 > 1)
                  {
                    if (v58 >= v13) {
                      v58 %= v13;
                    }
                  }
                  else
                  {
                    v58 &= v22;
                  }
                  if (v58 != v12)
                  {
                    *(void *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v58) = v54;
                    uint64_t v57 = *(void *)v21;
                  }
                }
                *uint64_t v54 = v57;
                *(void *)uint64_t v21 = 0;
                --qword_1EBFF0358;
                float v60 = (uint64_t *)v21;
                float v61 = &qword_1EBFF0350;
                char v62 = 1;
                std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v60);
                break;
              }
            }
            else
            {
              if (v15 > 1)
              {
                if (v23 >= v13) {
                  v23 %= v13;
                }
              }
              else
              {
                v23 &= v22;
              }
              if (v23 != v16) {
                break;
              }
            }
            uint64_t v21 = *(void *)v21;
          }
          while (v21);
        }
      }
    }
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    goto LABEL_146;
  }
  float v59 = (void *)a1;
  if (!*((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1)) {
    goto LABEL_45;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map
                                       + 8));
  v17.i16[0] = vaddlv_u8(v17);
  unint64_t v18 = v17.u32[0];
  if (v17.u32[0] > 1uLL)
  {
    a1 = v11;
    if (v11 >= *((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1)) {
      a1 = v11 % *((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1);
    }
  }
  else
  {
    a1 = (*((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) - 1) & v11;
  }
  uint64_t v24 = *(uint64_t **)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * a1);
  if (!v24 || (uint64_t v25 = *v24) == 0)
  {
LABEL_45:
    char v27 = operator new(0x38uLL);
    float v60 = v27;
    float v61 = &qword_1EBFF0350;
    *char v27 = 0;
    v27[1] = v12;
    uint64_t v28 = (std::string *)(v27 + 2);
    if (v6 < 0)
    {
      std::string::__init_copy_ctor_external(v28, v7, v8);
    }
    else
    {
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v27[4] = *(void *)(a2 + 16);
    }
    v27[5] = 0;
    v27[6] = 0;
    char v62 = 1;
    float v29 = (float)(unint64_t)(qword_1EBFF0358 + 1);
    if (v13 && (float)(*(float *)&dword_1EBFF0360 * (float)v13) >= v29)
    {
LABEL_94:
      double v45 = *(uint64_t **)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * a1);
      uint64_t v25 = (uint64_t)v60;
      if (v45)
      {
        uint64_t *v60 = *v45;
        uint64_t v51 = v59;
      }
      else
      {
        uint64_t *v60 = qword_1EBFF0350;
        qword_1EBFF0350 = v25;
        *(void *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * a1) = &qword_1EBFF0350;
        uint64_t v51 = v59;
        if (!*(void *)v25)
        {
LABEL_103:
          float v60 = 0;
          ++qword_1EBFF0358;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v60);
          goto LABEL_104;
        }
        unint64_t v46 = *(void *)(*(void *)v25 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v46 >= v13) {
            v46 %= v13;
          }
        }
        else
        {
          v46 &= v13 - 1;
        }
        double v45 = (uint64_t *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v46);
      }
      *double v45 = v25;
      goto LABEL_103;
    }
    BOOL v30 = 1;
    if (v13 >= 3) {
      BOOL v30 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v13);
    unint64_t v32 = vcvtps_u32_f32(v29 / *(float *)&dword_1EBFF0360);
    if (v31 <= v32) {
      int8x8_t prime = (int8x8_t)v32;
    }
    else {
      int8x8_t prime = (int8x8_t)v31;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v13 = *((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1);
    if (*(void *)&prime > *((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1)) {
      goto LABEL_60;
    }
    if (*(void *)&prime < *((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1))
    {
      unint64_t v40 = vcvtps_u32_f32((float)(unint64_t)qword_1EBFF0358 / *(float *)&dword_1EBFF0360);
      if (*((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) < 3uLL
        || (uint8x8_t v41 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map
                                                 + 8)),
            v41.i16[0] = vaddlv_u8(v41),
            v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (*(void *)&prime <= v40) {
        int8x8_t prime = (int8x8_t)v40;
      }
      if (*(void *)&prime >= v13)
      {
        unint64_t v13 = *((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1);
      }
      else
      {
        if (prime)
        {
LABEL_60:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          char v34 = operator new(8 * *(void *)&prime);
          char v35 = (void *)TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map;
          *(void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map = v34;
          if (v35) {
            operator delete(v35);
          }
          uint64_t v36 = 0;
          *((int8x8_t *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) = prime;
          do
            *(void *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v36++) = 0;
          while (*(void *)&prime != v36);
          uint64_t v37 = (void **)qword_1EBFF0350;
          if (qword_1EBFF0350)
          {
            unint64_t v38 = *(void *)(qword_1EBFF0350 + 8);
            uint8x8_t v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(void *)&prime) {
                v38 %= *(void *)&prime;
              }
            }
            else
            {
              v38 &= *(void *)&prime - 1;
            }
            *(void *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v38) = &qword_1EBFF0350;
            for (uint64_t i = *v37; i; v38 = v44)
            {
              unint64_t v44 = i[1];
              if (v39.u32[0] > 1uLL)
              {
                if (v44 >= *(void *)&prime) {
                  v44 %= *(void *)&prime;
                }
              }
              else
              {
                v44 &= *(void *)&prime - 1;
              }
              if (v44 != v38)
              {
                if (!*(void *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v44))
                {
                  *(void *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v44) = v37;
                  goto LABEL_85;
                }
                *uint64_t v37 = (void *)*i;
                *uint64_t i = **(void **)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v44);
                **(void **)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v44) = i;
                uint64_t i = v37;
              }
              unint64_t v44 = v38;
LABEL_85:
              uint64_t v37 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v13 = (unint64_t)prime;
          goto LABEL_89;
        }
        float v52 = (void *)TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map;
        *(void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map = 0;
        if (v52) {
          operator delete(v52);
        }
        unint64_t v13 = 0;
        *((void *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) = 0;
      }
    }
LABEL_89:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        a1 = v12 % v13;
      }
      else {
        a1 = v12;
      }
    }
    else
    {
      a1 = (v13 - 1) & v12;
    }
    goto LABEL_94;
  }
  while (1)
  {
    unint64_t v26 = *(void *)(v25 + 8);
    if (v26 == v12) {
      break;
    }
    if (v18 > 1)
    {
      if (v26 >= v13) {
        v26 %= v13;
      }
    }
    else
    {
      v26 &= v13 - 1;
    }
    if (v26 != a1) {
      goto LABEL_45;
    }
LABEL_44:
    uint64_t v25 = *(void *)v25;
    if (!v25) {
      goto LABEL_45;
    }
  }
  if (!std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)(v25 + 16), (unsigned __int8 *)a2)) {
    goto LABEL_44;
  }
  uint64_t v51 = v59;
LABEL_104:
  double v47 = *(char **)(v25 + 40);
  if (!v47)
  {
    double v48 = (char *)operator new(0x1E8uLL);
    *((void *)v48 + 1) = 0;
    *((void *)v48 + 2) = 0;
    *(void *)double v48 = &unk_1F3F75068;
    *(_OWORD *)(v48 + 24) = 0u;
    double v47 = v48 + 24;
    *(_OWORD *)(v48 + 40) = 0u;
    *(_OWORD *)(v48 + 56) = 0u;
    *(_OWORD *)(v48 + 72) = 0u;
    *(_OWORD *)(v48 + 88) = 0u;
    *(_OWORD *)(v48 + 104) = 0u;
    *(_OWORD *)(v48 + 120) = 0u;
    *(_OWORD *)(v48 + 136) = 0u;
    *(_OWORD *)(v48 + 152) = 0u;
    *(_OWORD *)(v48 + 168) = 0u;
    *(_OWORD *)(v48 + 184) = 0u;
    *(_OWORD *)(v48 + 200) = 0u;
    *(_OWORD *)(v48 + 216) = 0u;
    *(_OWORD *)(v48 + 232) = 0u;
    *(_OWORD *)(v48 + 248) = 0u;
    *(_OWORD *)(v48 + 264) = 0u;
    *(_OWORD *)(v48 + 280) = 0u;
    *(_OWORD *)(v48 + 296) = 0u;
    *(_OWORD *)(v48 + 312) = 0u;
    *(_OWORD *)(v48 + 328) = 0u;
    *(_OWORD *)(v48 + 344) = 0u;
    *(_OWORD *)(v48 + 360) = 0u;
    *(_OWORD *)(v48 + 376) = 0u;
    *(_OWORD *)(v48 + 392) = 0u;
    *(_OWORD *)(v48 + 408) = 0u;
    *((void *)v48 + 53) = 850045863;
    *((_OWORD *)v48 + 27) = 0u;
    *((_OWORD *)v48 + 28) = 0u;
    *((_OWORD *)v48 + 29) = 0u;
    *((void *)v48 + 60) = 0;
    float v49 = *(std::__shared_weak_count **)(v25 + 48);
    *(void *)(v25 + 40) = v48 + 24;
    *(void *)(v25 + 48) = v48;
    if (v49)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v49);
      double v47 = *(char **)(v25 + 40);
    }
  }
  void *v51 = v47;
  uint64_t v50 = *(void *)(v25 + 48);
  v51[1] = v50;
  if (v50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_146:

  std::mutex::unlock(&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map_mutex);
}

void std::__shared_ptr_emplace<TI::ShortMemory>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 424));
  for (uint64_t i = 0; i != -192; i -= 64)
  {
    uint64_t v3 = a1 + i;
    if (*(char *)(a1 + i + 399) < 0) {
      operator delete(*(void **)(v3 + 376));
    }
    if (*(char *)(v3 + 375) < 0) {
      operator delete(*(void **)(v3 + 352));
    }
  }
  for (uint64_t j = 0; j != -192; j -= 64)
  {
    uint64_t v5 = a1 + j;
    if (*(char *)(a1 + j + 199) < 0) {
      operator delete(*(void **)(v5 + 176));
    }
    if (*(char *)(v5 + 175) < 0) {
      operator delete(*(void **)(v5 + 152));
    }
  }
}

void std::__shared_ptr_emplace<TI::ShortMemory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75068;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::ShortMemory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::shared_ptr<TI::ShortMemory>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::shared_ptr<TI::ShortMemory>>,0>(uint64_t a1)
{
  double v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<TI::ShortMemory>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  double v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::shared_ptr<TI::ShortMemory>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      double v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void TI::RejectionsDatabase::soft_add_deleted(uint64_t a1, const std::string *a2, double a3)
{
  v46[2] = *MEMORY[0x1E4F143B8];
  TI::memory_for_db_path((unint64_t)&v41, a1 + 8, 0);
  uint64_t v5 = v41;
  int v6 = (std::mutex *)(v41 + 400);
  std::mutex::lock((std::mutex *)(v41 + 400));
  uint64_t v7 = v5 + 200;
  uint64_t v8 = *(unsigned int *)(v5 + 392);
  if ((int)v8 >= 3)
  {
    int v9 = 0;
    unint64_t v10 = (double *)(v5 + 312);
    for (uint64_t i = 1; i != v8; ++i)
    {
      double v12 = *v10;
      v10 += 8;
      if (v12 < *(double *)(v7 + ((uint64_t)v9 << 6) + 48)) {
        int v9 = i;
      }
    }
  }
  else
  {
    *(_DWORD *)(v5 + 392) = v8 + 1;
    int v9 = v8;
  }
  uint64_t v13 = v7 + ((uint64_t)v9 << 6);
  std::string::operator=((std::string *)(v13 + 24), a2);
  *(_DWORD *)(v13 + 56) = 0;
  *(double *)(v13 + 48) = a3;
  uint64_t v14 = *(unsigned int *)(v5 + 192);
  if ((int)v14 < 1)
  {
LABEL_26:
    std::string::operator=((std::string *)v13, a2);
    goto LABEL_28;
  }
  uint64_t v15 = 0;
  unsigned __int8 v16 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v16 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if ((v16 & 0x80u) == 0) {
    unint64_t v18 = a2;
  }
  else {
    unint64_t v18 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  while (1)
  {
    uint64_t v19 = v5 + (v15 << 6);
    uint64_t v20 = *(unsigned __int8 *)(v19 + 47);
    size_t v21 = *(void *)(v19 + 32);
    if ((v20 & 0x80u) == 0) {
      uint64_t v22 = *(unsigned __int8 *)(v19 + 47);
    }
    else {
      uint64_t v22 = *(void *)(v19 + 32);
    }
    if (v22 != size) {
      goto LABEL_25;
    }
    unint64_t v23 = (const void **)(v19 + 24);
    if ((v20 & 0x80) != 0) {
      break;
    }
    if (!v20) {
      goto LABEL_27;
    }
    uint64_t v24 = v18;
    while (*(unsigned __int8 *)v23 == v24->__r_.__value_.__s.__data_[0])
    {
      unint64_t v23 = (const void **)((char *)v23 + 1);
      uint64_t v24 = (const std::string *)((char *)v24 + 1);
      if (!--v20) {
        goto LABEL_27;
      }
    }
LABEL_25:
    if (++v15 == v14) {
      goto LABEL_26;
    }
  }
  if (memcmp(*v23, v18, v21)) {
    goto LABEL_25;
  }
LABEL_27:
  std::string::operator=((std::string *)v13, (const std::string *)(v5 + (v15 << 6)));
  uint64_t v25 = *(int *)(v5 + 192);
  unint64_t v26 = (uint64_t *)(v5 + ((uint64_t)(int)v15 << 6));
  uint64_t v27 = *v26;
  v46[0] = v26[1];
  uint64_t v28 = v5 + (v25 << 6);
  *(void *)((char *)v46 + 7) = *(uint64_t *)((char *)v26 + 15);
  char v29 = *((unsigned char *)v26 + 23);
  *unint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v30 = v26[3];
  v45[0] = v26[4];
  *(void *)((char *)v45 + 7) = *(uint64_t *)((char *)v26 + 39);
  char v31 = *((unsigned char *)v26 + 47);
  v26[4] = 0;
  v26[5] = 0;
  v26[2] = 0;
  void v26[3] = 0;
  uint64_t v32 = v26[6];
  int v44 = *((_DWORD *)v26 + 14);
  uint64_t v43 = v32;
  long long v33 = *(_OWORD *)(v28 - 64);
  v26[2] = *(void *)(v28 - 48);
  *(_OWORD *)unint64_t v26 = v33;
  *(unsigned char *)(v28 - 64) = 0;
  uint64_t v34 = *(void *)(v28 - 24);
  uint64_t v35 = *(void *)(v28 - 16);
  *(_OWORD *)(v26 + 3) = *(_OWORD *)(v28 - 40);
  int v36 = *(_DWORD *)(v28 - 8);
  v26[5] = v34;
  v26[6] = v35;
  *(unsigned char *)(v28 - 17) = 0;
  *(_WORD *)(v28 - 41) = 0;
  *((_DWORD *)v26 + 14) = v36;
  uint64_t v37 = v46[0];
  *(void *)(v28 - 49) = *(void *)((char *)v46 + 7);
  *(void *)(v28 - 64) = v27;
  *(void *)(v28 - 56) = v37;
  *(unsigned char *)(v28 - 41) = v29;
  LODWORD(v37) = *(_DWORD *)(v5 + 192) - 1;
  uint64_t v38 = v45[0];
  *(void *)(v28 - 25) = *(void *)((char *)v45 + 7);
  *(void *)(v28 - 40) = v30;
  *(void *)(v28 - 32) = v38;
  *(unsigned char *)(v28 - 17) = v31;
  uint64_t v39 = v43;
  *(_DWORD *)(v28 - 8) = v44;
  *(void *)(v28 - 16) = v39;
  *(_DWORD *)(v5 + 192) = v37;
LABEL_28:
  std::mutex::unlock(v6);
  unint64_t v40 = v42;
  if (v42)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v40);
  }
}

uint64_t TI::RejectionsDatabase::soft_should_block(uint64_t a1, unsigned __int8 *a2, unsigned __int8 **a3, int a4, double a5)
{
  TI::memory_for_db_path((unint64_t)&v66, a1 + 8, 0);
  uint64_t v8 = v66;
  int v9 = (std::mutex *)(v66 + 400);
  std::mutex::lock((std::mutex *)(v66 + 400));
  unint64_t v10 = *(int *)(v8 + 392);
  unint64_t v11 = 126 - 2 * __clz(v10);
  if (v10) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v63 = v8 + 200;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *,false>(v8 + 200, (long long *)(v8 + 200 + (v10 << 6)), v12, 1);
  uint64_t v13 = *(int *)(v8 + 392);
  float v59 = v9;
  if (v13)
  {
    int v14 = v13 - 1;
    uint64_t v15 = (double *)(v8 + (v13 << 6) + 184);
    int v16 = a4;
    uint64_t v17 = v8 + 200;
    while (a5 - *v15 > 120.0)
    {
      *(_DWORD *)(v8 + 392) = v14--;
      v15 -= 8;
      LODWORD(v13) = v13 - 1;
      if (v14 == -1) {
        goto LABEL_78;
      }
    }
    if ((int)v13 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = v13;
      uint64_t v20 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
      BOOL v21 = (char)v20 < 0;
      if ((char)v20 < 0) {
        uint64_t v20 = a3[1];
      }
      CFNumberRef v65 = v20;
      if (v21) {
        uint64_t v22 = *a3;
      }
      else {
        uint64_t v22 = (unsigned __int8 *)a3;
      }
      __s2 = v22;
      unsigned __int8 v23 = a2[23];
      uint64_t v24 = *(unsigned __int8 **)a2;
      if ((v23 & 0x80u) == 0) {
        uint64_t v24 = a2;
      }
      uint64_t v57 = v24;
      float v60 = (unsigned __int8 *)*((void *)a2 + 1);
      float v61 = (unsigned __int8 *)a2[23];
      if ((v23 & 0x80u) == 0) {
        uint64_t v25 = (unsigned __int8 *)a2[23];
      }
      else {
        uint64_t v25 = (unsigned __int8 *)*((void *)a2 + 1);
      }
      unint64_t v58 = v25;
      LODWORD(v26) = v13;
      while (1)
      {
        uint64_t v26 = (v26 - 1);
        uint64_t v27 = (unsigned __int8 *)(v17 + (v26 << 6));
        if (*((_DWORD *)v27 + 14) >= v16) {
          goto LABEL_71;
        }
        uint64_t v28 = (const void **)(v27 + 24);
        uint64_t v29 = v27[47];
        size_t v30 = *((void *)v27 + 4);
        if ((v29 & 0x80u) == 0) {
          char v31 = (unsigned __int8 *)v27[47];
        }
        else {
          char v31 = (unsigned __int8 *)*((void *)v27 + 4);
        }
        if (v31 == v65)
        {
          if ((v29 & 0x80) != 0)
          {
            int v35 = memcmp(*v28, __s2, *((void *)v27 + 4));
            uint64_t v17 = v63;
            int v16 = a4;
            if (!v35) {
              goto LABEL_72;
            }
          }
          else
          {
            if (!v27[47]) {
              goto LABEL_72;
            }
            uint64_t v32 = __s2;
            long long v33 = v27 + 24;
            uint64_t v34 = v27[47];
            while (*v33 == *v32)
            {
              ++v33;
              ++v32;
              if (!--v34) {
                goto LABEL_72;
              }
            }
          }
        }
        size_t __n = v30;
        uint64_t v36 = v27[23];
        size_t v37 = *((void *)v27 + 1);
        if ((v36 & 0x80u) == 0) {
          uint64_t v38 = (unsigned __int8 *)v27[23];
        }
        else {
          uint64_t v38 = (unsigned __int8 *)*((void *)v27 + 1);
        }
        if (v38 == v31)
        {
          if ((v29 & 0x80u) == 0) {
            uint64_t v39 = v27 + 24;
          }
          else {
            uint64_t v39 = (unsigned __int8 *)*v28;
          }
          if ((v36 & 0x80) != 0)
          {
            int v49 = memcmp(*(const void **)v27, v39, *((void *)v27 + 1));
            uint64_t v17 = v63;
            int v16 = a4;
            if (v49) {
              BOOL v50 = v38 == v58;
            }
            else {
              BOOL v50 = 0;
            }
            if (!v50) {
              goto LABEL_62;
            }
            goto LABEL_61;
          }
          if (!v27[23]) {
            goto LABEL_62;
          }
          uint64_t v40 = v36 - 1;
          uint64_t v41 = v27;
          do
          {
            int v43 = *v41++;
            int v42 = v43;
            int v45 = *v39++;
            int v44 = v45;
          }
          while (v42 == v45 && v40-- != 0);
          if (v42 == v44) {
            goto LABEL_62;
          }
        }
        if (v38 != v58) {
          goto LABEL_62;
        }
        if ((v36 & 0x80) == 0)
        {
          if (!v27[23]) {
            goto LABEL_72;
          }
          double v47 = v57;
          while (*v27 == *v47)
          {
            ++v27;
            ++v47;
            uint64_t v48 = 1;
            if (!--v36) {
              goto LABEL_75;
            }
          }
          goto LABEL_62;
        }
LABEL_61:
        int v51 = memcmp(*(const void **)v27, v57, v37);
        uint64_t v17 = v63;
        int v16 = a4;
        if (!v51)
        {
LABEL_72:
          uint64_t v48 = 1;
          goto LABEL_75;
        }
LABEL_62:
        float v52 = v60;
        if ((char)v61 >= 0) {
          float v52 = v61;
        }
        if (v31 != v52) {
          goto LABEL_71;
        }
        if ((v29 & 0x80) == 0)
        {
          if (!v29) {
            goto LABEL_74;
          }
          float v53 = v57;
          while (*(unsigned __int8 *)v28 == *v53)
          {
            uint64_t v28 = (const void **)((char *)v28 + 1);
            ++v53;
            if (!--v29) {
              goto LABEL_74;
            }
          }
LABEL_71:
          uint64_t v48 = v18;
          goto LABEL_75;
        }
        int v54 = memcmp(*v28, v57, __n);
        uint64_t v17 = v63;
        int v16 = a4;
        uint64_t v48 = v18;
        if (!v54) {
LABEL_74:
        }
          uint64_t v48 = 0;
LABEL_75:
        uint64_t v18 = v48;
        BOOL v21 = v19-- <= 1;
        if (v21) {
          goto LABEL_79;
        }
      }
    }
  }
LABEL_78:
  LOBYTE(v48) = 0;
LABEL_79:
  std::mutex::unlock(v59);
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v67);
  }
  return v48 & 1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  *(void *)uint64_t v15 = a1[1];
  *(void *)&v15[7] = *(uint64_t *)((char *)a1 + 15);
  char v4 = *((unsigned char *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  int v6 = a1 + 3;
  uint64_t v5 = a1[3];
  *(void *)uint64_t v14 = a1[4];
  *(void *)&v14[7] = *(uint64_t *)((char *)a1 + 39);
  char v7 = *((unsigned char *)a1 + 47);
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = 0;
  uint64_t v8 = a1 + 6;
  int v13 = *((_DWORD *)a1 + 14);
  uint64_t v12 = a1[6];
  long long v9 = *a2;
  a1[2] = *((void *)a2 + 2);
  *(_OWORD *)a1 = v9;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  if (*((char *)a1 + 47) < 0) {
    operator delete((void *)*v6);
  }
  long long v10 = *(long long *)((char *)a2 + 24);
  v6[2] = *((void *)a2 + 5);
  *(_OWORD *)int v6 = v10;
  uint64_t v11 = *((void *)a2 + 6);
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  *((_DWORD *)v8 + 2) = *((_DWORD *)a2 + 14);
  *uint64_t v8 = v11;
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = v3;
  *((void *)a2 + 1) = *(void *)v15;
  *(void *)((char *)a2 + 15) = *(void *)&v15[7];
  *((unsigned char *)a2 + 23) = v4;
  if (*((char *)a2 + 47) < 0) {
    operator delete(*((void **)a2 + 3));
  }
  *((void *)a2 + 3) = v5;
  *((void *)a2 + 4) = *(void *)v14;
  *(void *)((char *)a2 + 39) = *(void *)&v14[7];
  *((unsigned char *)a2 + 47) = v7;
  *((void *)a2 + 6) = v12;
  *((_DWORD *)a2 + 14) = v13;
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  double v6 = *(double *)(a2 + 48);
  double v7 = *(double *)(a3 + 48);
  if (v6 <= *(double *)(a1 + 48))
  {
    if (v7 <= v6) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a2, (long long *)a3);
    if (*(double *)(a2 + 48) <= *(double *)(v5 + 48)) {
      return;
    }
    a1 = v5;
    uint64_t v8 = (long long *)a2;
  }
  else
  {
    if (v7 <= v6)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, (long long *)a2);
      if (*(double *)(a3 + 48) <= *(double *)(a2 + 48)) {
        return;
      }
      a1 = a2;
    }
    uint64_t v8 = (long long *)a3;
  }

  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, v8);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a2, a3);
  if (*(double *)(a4 + 48) > *(double *)(a3 + 48))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a3, (long long *)a4);
    if (*(double *)(a3 + 48) > *(double *)(a2 + 48))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a2, (long long *)a3);
      if (*(double *)(a2 + 48) > *(double *)(a1 + 48))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, (long long *)a2);
      }
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a2, a3, a4);
  if (*(double *)(a5 + 48) > *(double *)(a4 + 48))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a4, (long long *)a5);
    if (*(double *)(a4 + 48) > *(double *)(a3 + 48))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a3, (long long *)a4);
      if (*(double *)(a3 + 48) > *(double *)(a2 + 48))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a2, (long long *)a3);
        if (*(double *)(a2 + 48) > *(double *)(a1 + 48))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, (long long *)a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 16) > *(double *)(a1 + 48))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, (long long *)(a2 - 64));
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a1 + 64, a2 - 64);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64);
      return 1;
    default:
      uint64_t v6 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a1 + 64, a1 + 128);
      uint64_t v7 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    double v10 = *(double *)(v7 + 48);
    if (v10 > *(double *)(v6 + 48))
    {
      uint64_t v25 = *(void *)v7;
      *(void *)uint64_t v29 = *(void *)(v7 + 8);
      *(void *)&v29[7] = *(void *)(v7 + 15);
      char v11 = *(unsigned char *)(v7 + 23);
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      int v27 = *(void **)(v7 + 24);
      *(void *)unint64_t v28 = *(void *)(v7 + 32);
      *(void *)&v28[7] = *(void *)(v7 + 39);
      char v26 = *(unsigned char *)(v7 + 47);
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(void *)(v7 + 40) = 0;
      uint64_t v12 = v8;
      int v13 = *(_DWORD *)(v7 + 56);
      while (1)
      {
        uint64_t v14 = v12;
        uint64_t v15 = a1 + v12;
        uint64_t v16 = a1 + v12 + 192;
        if (*(char *)(a1 + v12 + 215) < 0) {
          operator delete(*(void **)v16);
        }
        *(_OWORD *)uint64_t v16 = *(_OWORD *)(v15 + 128);
        *(void *)(v16 + 16) = *(void *)(v15 + 144);
        *(unsigned char *)(v15 + 151) = 0;
        *(unsigned char *)(v15 + 128) = 0;
        uint64_t v17 = (void **)(v15 + 216);
        if (*(char *)(v15 + 239) < 0) {
          operator delete(*v17);
        }
        uint64_t v18 = a1 + v14;
        *(_OWORD *)uint64_t v17 = *(_OWORD *)(a1 + v14 + 152);
        uint64_t v19 = *(void *)(a1 + v14 + 176);
        *(void *)(v15 + 232) = *(void *)(a1 + v14 + 168);
        *(unsigned char *)(v18 + 175) = 0;
        *(unsigned char *)(v18 + 152) = 0;
        *(void *)(v18 + 240) = v19;
        *(_DWORD *)(v18 + 248) = *(_DWORD *)(a1 + v14 + 184);
        if (v14 == -128) {
          break;
        }
        double v20 = *(double *)(v18 + 112);
        uint64_t v12 = v14 - 64;
        if (v10 <= v20)
        {
          uint64_t v21 = a1 + v12 + 192;
          uint64_t v22 = a1 + v14;
          uint64_t v23 = (double *)(a1 + v14 + 176);
          char v24 = (void **)(v22 + 152);
          goto LABEL_16;
        }
      }
      uint64_t v23 = (double *)(v18 + 176);
      char v24 = (void **)(v18 + 152);
      uint64_t v21 = a1;
LABEL_16:
      if (*(char *)(v21 + 23) < 0) {
        operator delete(*(void **)v21);
      }
      *(void *)uint64_t v21 = v25;
      *(void *)(v21 + 8) = *(void *)v29;
      *(void *)(v21 + 15) = *(void *)&v29[7];
      *(unsigned char *)(v21 + 23) = v11;
      if (*(char *)(v21 + 47) < 0) {
        operator delete(*v24);
      }
      *char v24 = v27;
      *(void *)(v21 + 32) = *(void *)v28;
      *(void *)(v21 + 39) = *(void *)&v28[7];
      *(unsigned char *)(v21 + 47) = v26;
      *uint64_t v23 = v10;
      *(_DWORD *)(v21 + 56) = v13;
      if (++v9 == 8) {
        return v7 + 64 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 64;
    v7 += 64;
    if (v7 == a2) {
      return 1;
    }
  }
}

void TI::RejectionsDatabase::soft_clear_memory(TI::RejectionsDatabase *this)
{
  TI::memory_for_db_path((unint64_t)&v2, (uint64_t)this + 8, 1);
  unint64_t v1 = v3;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void KB::FilterLowQualityContinuousPathRetrocorrections::filter_candidates(KB::FilterLowQualityContinuousPathRetrocorrections *this, KB::CandidateCollection *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v8 = *((void *)a4 + 2);
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  }
  uint64_t v9 = *(void *)(v8 + 8);
  WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v8);
  if (*(void *)a3)
  {
    uint64_t v10 = *(void *)a2;
    uint64_t v11 = *((void *)a2 + 1);
    if (*(void *)a2 != v11)
    {
      uint64_t v12 = v9 + 144;
      while (1)
      {
        unsigned int v13 = KB::Candidate::num_words_matching_input((void *)v10, a3, v12);
        uint64_t v14 = *(void *)a3;
        if (*(void *)a3 > (unint64_t)v13) {
          break;
        }
        v10 += 1000;
        if (v10 == v11)
        {
          float v15 = -INFINITY;
          goto LABEL_10;
        }
      }
      float v15 = expf(*(float *)(v10 + 744));
LABEL_10:
      if (v15 < (float)(expf(*(float *)(*(void *)a2 + 744)) * *((float *)this + 2)))
      {
        uint64_t v17 = (__CFString *)*((void *)a4 + 7);
        if (v17)
        {
          KB::append_format(v17, (__CFString *)"removing all retrocorrection candidates: %s\n", v16, "FilterLowQualityContinuousPathRetrocorrections");
          uint64_t v14 = *(void *)a3;
        }
        KB::CandidateFilter::remove_candidates_with_input_mismatch((uint64_t)this, (uint64_t)a2, v14, (uint64_t)a3, (uint64_t)a4, (uint64_t)"FilterLowQualityContinuousPathRetrocorrections");
      }
    }
  }
}

const char *KB::FilterLowQualityContinuousPathRetrocorrections::filter_description(KB::FilterLowQualityContinuousPathRetrocorrections *this)
{
  return "FilterLowQualityContinuousPathRetrocorrections";
}

void KB::FilterLowQualityContinuousPathRetrocorrections::~FilterLowQualityContinuousPathRetrocorrections(KB::FilterLowQualityContinuousPathRetrocorrections *this)
{
}

void KB::FilterNoPredictContinuousPathAlternates::filter_candidates(KB::FilterNoPredictContinuousPathAlternates *this, KB::CandidateCollection *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(0x1CAC083126E978D5 * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3)) >= 2)
  {
    KB::Candidate::Candidate((KB::Candidate *)v18, a3);
    long long v15 = *(_OWORD *)((char *)this + 8);
    uint64_t v16 = *((void *)this + 3);
    uint64_t v7 = *((void *)a4 + 2);
    if (v7) {
      atomic_fetch_add((atomic_uint *volatile)v7, 1u);
    }
    uint64_t v8 = *(void *)(v7 + 8) + 144;
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v7);
    std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::__value_func[abi:nn180100]((uint64_t)v17, v8);
    uint64_t v13 = *((void *)a4 + 7);
    uint64_t v14 = "FilterNoPredictContinuousPathAlternates";
    uint64_t v9 = (uint64_t *)*((void *)a2 + 1);
    uint64_t v10 = (uint64_t *)(*(void *)a2 + 1000);
    v12[0] = v18;
    v12[1] = &v15;
    v12[2] = v17;
    v12[3] = &v13;
    v12[4] = &v14;
    if (v10 != v9)
    {
      while ((KB::FilterNoPredictContinuousPathAlternates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_0::operator()((uint64_t)v12, v10) & 1) == 0)
      {
        v10 += 125;
        if (v10 == v9)
        {
          uint64_t v10 = v9;
          goto LABEL_14;
        }
      }
      if (v10 != v9)
      {
        for (uint64_t i = v10 + 125; i != v9; i += 125)
        {
          if ((KB::FilterNoPredictContinuousPathAlternates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_0::operator()((uint64_t)v12, i) & 1) == 0)
          {
            KB::Candidate::operator=(v10, i);
            v10 += 125;
          }
        }
      }
    }
LABEL_14:
    std::vector<KB::Candidate>::erase((uint64_t)a2, v10, *((KB::Candidate **)a2 + 1));
    std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::~__value_func[abi:nn180100](v17);
    KB::Candidate::~Candidate((KB::Candidate *)v18);
  }
}

uint64_t KB::FilterNoPredictContinuousPathAlternates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_0::operator()(uint64_t a1, uint64_t *a2)
{
  v23[2] = *MEMORY[0x1E4F143B8];
  int is_suggestible_for_input = KB::CandidateFilter::is_suggestible_for_input(a2, *(void **)a1, 1, *(KB::WordSuggestionPolicy **)(a1 + 8), *(void *)(a1 + 16), 0);
  uint64_t v5 = a2[1];
  uint64_t v6 = v5 + 240 * *a2;
  if (*a2)
  {
    uint64_t v7 = 240 * *a2;
    while ((*(unsigned char *)(v5 + 106) & 1) == 0)
    {
      v5 += 240;
      v7 -= 240;
      if (!v7)
      {
        uint64_t v5 = v6;
        break;
      }
    }
  }
  if (v5 == v6) {
    int v8 = is_suggestible_for_input;
  }
  else {
    int v8 = 1;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = **(__CFString ***)(a1 + 24);
    if (v9)
    {
      KB::Candidate::capitalized_string((KB::Candidate *)a2, (uint64_t)v20);
      uint64_t v10 = (const char *)v22;
      if (!v22) {
        uint64_t v10 = (const char *)v23;
      }
      if (v20[0]) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = "";
      }
      KB::Candidate::token_ids_as_string((KB::Candidate *)a2, (uint64_t)v16);
      uint64_t v13 = (const char *)v18;
      if (!v18) {
        uint64_t v13 = (const char *)&v19;
      }
      if (v16[0]) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = "";
      }
      KB::append_format(v9, (__CFString *)"[%s] {%s} removed by %s\n", v12, v11, v14, **(void **)(a1 + 32));
      if (v18 && v17 == 1) {
        free(v18);
      }
      if (v22 && v21 == 1) {
        free(v22);
      }
    }
  }
  return v8 ^ 1u;
}

const char *KB::FilterNoPredictContinuousPathAlternates::filter_description(KB::FilterNoPredictContinuousPathAlternates *this)
{
  return "FilterNoPredictContinuousPathAlternates";
}

void KB::FilterNoPredictContinuousPathAlternates::~FilterNoPredictContinuousPathAlternates(KB::FilterNoPredictContinuousPathAlternates *this)
{
}

void KB::FilterContinuousPathAlternatesFromOtherLanguage::filter_candidates(KB::FilterContinuousPathAlternatesFromOtherLanguage *this, const KB::LanguageModelContext **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v9 = *((void *)a4 + 3);
  int v8 = (std::__shared_weak_count *)*((void *)a4 + 4);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  }
  if (v9)
  {
    uint64_t v10 = *a2;
    if ((unint64_t)(0x1CAC083126E978D5 * ((a2[1] - *a2) >> 3)) >= 4)
    {
      int v11 = KB::FilterContinuousPathAlternatesFromOtherLanguage::language_id_for_context_and_autoconversion_with_confidence((const KB::CandidateFilterLookupContext *)((char *)a3 + 2032), *a2, a4, *((float *)this + 2), a4);
      if (v11)
      {
        int v12 = v11;
        uint64_t v13 = (char *)v10 + 888;
        if (!*((_WORD *)v10 + 444)) {
          KB::Candidate::compute_string(v10);
        }
        uint64_t v14 = *((void *)a4 + 2);
        if (v14) {
          atomic_fetch_add((atomic_uint *volatile)v14, 1u);
        }
        uint64_t v15 = *(void *)(v14 + 8) + 144;
        WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v14);
        v31[0] = MEMORY[0x1E4F143A8];
        v31[1] = 0x40000000;
        unint64_t v32 = ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke;
        double v33 = &__block_descriptor_tmp_6113;
        int v36 = v12;
        uint64_t v34 = v15;
        double v35 = v13;
        char v17 = *a2;
        uint64_t v16 = (uint64_t *)a2[1];
        uint64_t v18 = (uint64_t)*a2 + 1000;
        v30[0] = MEMORY[0x1E4F143A8];
        v30[1] = 0x40000000;
        v30[2] = ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke_2;
        v30[3] = &unk_1E6E2AB58;
        v30[4] = v31;
        size_t v37 = v30;
        if ((uint64_t)v16 - v18 <= 0)
        {
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(v18, v16, (uint64_t *)&v37, 0x1CAC083126E978D5 * (((uint64_t)v16 - v18) >> 3), 0, 0);
        }
        else
        {
          uint64_t v19 = std::get_temporary_buffer[abi:nn180100]<KB::Candidate>(0x1CAC083126E978D5 * (((uint64_t)v16 - v18) >> 3));
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(v18, v16, (uint64_t *)&v37, 0x1CAC083126E978D5 * (((uint64_t)v16 - v18) >> 3), (uint64_t)v19, v20);
          if (v19) {
            operator delete(v19);
          }
        }
        char v21 = (const KB::LanguageModelContext *)((char *)v17 + 3000);
        uint64_t v22 = a2[1];
        if ((const KB::LanguageModelContext *)((char *)v17 + 3000) == v22)
        {
          uint64_t v23 = (uint64_t *)((char *)v17 + 3000);
        }
        else
        {
          while (v32((uint64_t)v31, v21))
          {
            char v21 = (KB::Candidate *)((char *)v21 + 1000);
            if (v21 == v22)
            {
              char v21 = v22;
              break;
            }
          }
          uint64_t v23 = (uint64_t *)v21;
          char v21 = a2[1];
        }
        if (*((void *)a4 + 7))
        {
          v25[0] = MEMORY[0x1E4F143A8];
          v25[1] = 0x40000000;
          char v26 = ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke_3;
          int v27 = &__block_descriptor_tmp_9;
          unint64_t v28 = this;
          uint64_t v29 = a4;
          if (v23 != (uint64_t *)v21)
          {
            char v24 = v23;
            do
            {
              v26((uint64_t)v25, (KB::Candidate *)v24);
              v24 += 125;
            }
            while (v24 != (uint64_t *)v21);
            char v21 = a2[1];
          }
        }
        std::vector<KB::Candidate>::erase((uint64_t)a2, v23, v21);
      }
    }
  }
}

uint64_t KB::FilterContinuousPathAlternatesFromOtherLanguage::language_id_for_context_and_autoconversion_with_confidence(KB::FilterContinuousPathAlternatesFromOtherLanguage *this, const KB::LanguageModelContext *a2, const KB::Candidate *a3, float a4, const KB::CandidateFilterResources *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v16, this);
  uint64_t v8 = *(void *)a2;
  if (*(void *)a2)
  {
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v10 = 240 * v8;
    do
    {
      if ((*(unsigned char *)(v9 + 135) & 4) == 0)
      {
        TITokenID v11 = *(TITokenID *)(v9 + 136);
        KB::Word::capitalized_string((KB::Word *)v9, (uint64_t)&v23);
        TITokenID v12 = v11;
        KB::LanguageModelContext::append((KB::LanguageModelContext *)&v16, v12, (const KB::String *)&v23, 0);
        if (v24 && BYTE6(v23) == 1) {
          free(v24);
        }
      }
      v9 += 240;
      v10 -= 240;
    }
    while (v10);
  }
  if (KB::LanguageModelContext::is_linguistically_void((KB::LanguageModelContext *)&v16)) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = KB::CandidateFilter::language_id_for_context_with_confidence((uint64_t)&v16, (uint64_t)a3, a4);
  }
  uint64_t v23 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v23);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v21);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v20);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v17);
  }
  return v14;
}

uint64_t ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke(uint64_t a1, KB::CandidateFilter *this)
{
  if (KB::CandidateFilter::candidate_static_words_from_same_language(this, (const Candidate *)*(unsigned int *)(a1 + 48)))return 1; {
  uint64_t v5 = *(void *)(a1 + 32);
  }
  if (!*((_WORD *)this + 444)) {
    KB::Candidate::compute_string(this);
  }
  uint64_t v6 = *(void *)(v5 + 24);
  if (v6) {
    return (*(unsigned int (**)(uint64_t, char *, void))(*(void *)v6 + 48))(v6, (char *)this + 888, *(void *)(a1 + 40)) != 0;
  }
  uint64_t v7 = std::__throw_bad_function_call[abi:nn180100]();
  return ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke_2((uint64_t)v7);
}

uint64_t ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke_2(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result) {
    return (*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))() ^ 1;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  v26[125] = *MEMORY[0x1E4F143B8];
  if (a4 >= 2)
  {
    uint64_t v8 = (uint64_t *)a1;
    if (a4 == 2)
    {
      if ((*(unsigned int (**)(void))(*a3 + 16))())
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v8, a2 - 125);
      }
    }
    else
    {
      unint64_t v9 = a4;
      if ((uint64_t)a4 <= 0)
      {
        if ((uint64_t *)a1 != a2)
        {
          uint64_t v15 = a1 + 1000;
          if ((uint64_t *)(a1 + 1000) != a2)
          {
            uint64_t v16 = 0;
            do
            {
              uint64_t v17 = v15;
              if ((*(unsigned int (**)(void))(*a3 + 16))())
              {
                KB::Candidate::Candidate((uint64_t)v26, v17);
                uint64_t v18 = v16;
                while (1)
                {
                  KB::Candidate::operator=((uint64_t *)((char *)v8 + v18 + 1000), (uint64_t *)((char *)v8 + v18));
                  if (!v18) {
                    break;
                  }
                  v18 -= 1000;
                  if (((*(uint64_t (**)(void))(*a3 + 16))() & 1) == 0)
                  {
                    uint64_t v19 = (uint64_t *)((char *)v8 + v18 + 1000);
                    goto LABEL_21;
                  }
                }
                uint64_t v19 = v8;
LABEL_21:
                KB::Candidate::operator=(v19, v26);
                KB::Candidate::~Candidate((KB::Candidate *)v26);
              }
              uint64_t v15 = v17 + 1000;
              v16 += 1000;
            }
            while ((uint64_t *)(v17 + 1000) != a2);
          }
        }
      }
      else
      {
        TITokenID v11 = (KB::Candidate *)a5;
        unint64_t v12 = a4 >> 1;
        uint64_t v13 = (uint64_t *)(a1 + 1000 * (a4 >> 1));
        unint64_t v14 = a4 >> 1;
        if ((uint64_t)v9 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(a1, v13, (uint64_t)a3, v14, a5);
          uint64_t v20 = (uint64_t)v11 + 1000 * v12;
          std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>((uint64_t)&v8[125 * (v9 >> 1)], a2, (uint64_t)a3, v9 - (v9 >> 1), v20);
          uint64_t v21 = (uint64_t *)((char *)v11 + 1000 * v9);
          uint64_t v22 = (uint64_t *)v20;
          uint64_t v23 = (uint64_t *)v11;
          while (v22 != v21)
          {
            if ((*(unsigned int (**)(void))(*a3 + 16))())
            {
              KB::Candidate::operator=(v8, v22);
              v22 += 125;
            }
            else
            {
              KB::Candidate::operator=(v8, v23);
              v23 += 125;
            }
            v8 += 125;
            if (v23 == (uint64_t *)v20)
            {
              if (v22 != v21)
              {
                uint64_t v24 = 0;
                do
                {
                  KB::Candidate::operator=(&v8[v24], &v22[v24]);
                  v24 += 125;
                }
                while (&v22[v24] != v21);
              }
              goto LABEL_37;
            }
          }
          if (v23 != (uint64_t *)v20)
          {
            uint64_t v25 = 0;
            do
            {
              KB::Candidate::operator=(&v8[v25], &v23[v25]);
              v25 += 125;
            }
            while (&v23[v25] != (uint64_t *)v20);
          }
LABEL_37:
          if (v11)
          {
            do
            {
              KB::Candidate::~Candidate(v11);
              TITokenID v11 = (KB::Candidate *)((char *)v11 + 1000);
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(a1, v13, a3, v14, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(&v8[125 * (v9 >> 1)], a2, a3, v9 - (v9 >> 1), v11, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(v8, &v8[125 * (v9 >> 1)], a2, a3, v9 >> 1, v9 - (v9 >> 1), v11, a6);
        }
      }
    }
  }
}

void *std::get_temporary_buffer[abi:nn180100]<KB::Candidate>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x20C49BA5E353F7) {
    unint64_t v1 = 0x20C49BA5E353F7;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(1000 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke_3(uint64_t a1, KB::Candidate *a2)
{
  void v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(__CFString **)(*(void *)(a1 + 40) + 56);
  KB::Candidate::capitalized_string(a2, (uint64_t)v13);
  BOOL v4 = (const char *)v15;
  if (!v15) {
    BOOL v4 = (const char *)v16;
  }
  if (v13[0]) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = "";
  }
  KB::Candidate::token_ids_as_string(a2, (uint64_t)v9);
  uint64_t v7 = (const char *)v11;
  if (!v11) {
    uint64_t v7 = (const char *)&v12;
  }
  if (v9[0]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = "";
  }
  KB::append_format(v3, (__CFString *)"[%s] {%s} removed by %s\n", v6, v5, v8, "FilterContinuousPathAlternatesFromOtherLanguage");
  if (v11 && v10 == 1) {
    free(v11);
  }
  if (v15)
  {
    if (v14 == 1) {
      free(v15);
    }
  }
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (!a4) {
    return result;
  }
  uint64_t v5 = a5;
  uint64_t v9 = result;
  if (a4 == 2)
  {
    uint64_t v11 = (uint64_t)(a2 - 125);
    if (!(*(unsigned int (**)(void))(*(void *)a3 + 16))())
    {
      KB::Candidate::Candidate(v5, v9);
      uint64_t v10 = v5 + 1000;
      uint64_t v12 = v11;
      goto LABEL_23;
    }
    KB::Candidate::Candidate(v5, v11);
    uint64_t v10 = v5 + 1000;
LABEL_7:
    uint64_t v12 = v9;
LABEL_23:
    return KB::Candidate::Candidate(v10, v12);
  }
  if (a4 == 1)
  {
    uint64_t v10 = a5;
    goto LABEL_7;
  }
  if ((uint64_t)a4 > 8)
  {
    uint64_t v18 = 1000 * (a4 >> 1);
    uint64_t v19 = result + v18;
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(result, result + v18, a3, a4 >> 1, a5, a4 >> 1);
    uint64_t result = std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(v9 + v18, a2, a3, a4 - (a4 >> 1), v5 + v18, a4 - (a4 >> 1));
    uint64_t v20 = v9 + v18;
    while ((uint64_t *)v20 != a2)
    {
      if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
      {
        uint64_t result = KB::Candidate::Candidate(v5, v20);
        v20 += 1000;
      }
      else
      {
        uint64_t result = KB::Candidate::Candidate(v5, v9);
        v9 += 1000;
      }
      v5 += 1000;
      if (v9 == v19)
      {
        if ((uint64_t *)v20 != a2)
        {
          uint64_t v21 = 0;
          do
          {
            uint64_t result = KB::Candidate::Candidate(v5 + v21, v20 + v21);
            v21 += 1000;
          }
          while ((uint64_t *)(v20 + v21) != a2);
        }
        return result;
      }
    }
    if (v9 != v19)
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t result = KB::Candidate::Candidate(v5 + v22, v9 + v22);
        v22 += 1000;
      }
      while (v9 + v22 != v19);
    }
  }
  else if ((uint64_t *)result != a2)
  {
    uint64_t result = KB::Candidate::Candidate(a5, result);
    uint64_t v13 = (uint64_t *)(v9 + 1000);
    if (v13 != a2)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v5;
      do
      {
        if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
        {
          KB::Candidate::Candidate(v15 + 1000, v15);
          uint64_t v16 = (uint64_t *)v5;
          if (v15 != v5)
          {
            uint64_t v17 = v14;
            while (1)
            {
              uint64_t v16 = (uint64_t *)(v5 + v17);
              if (!(*(unsigned int (**)(void))(*(void *)a3 + 16))()) {
                break;
              }
              KB::Candidate::operator=((uint64_t *)(v5 + v17), (uint64_t *)(v5 + v17 - 1000));
              v17 -= 1000;
              if (!v17)
              {
                uint64_t v16 = (uint64_t *)v5;
                break;
              }
            }
          }
          uint64_t result = (uint64_t)KB::Candidate::operator=(v16, v13);
        }
        else
        {
          uint64_t result = KB::Candidate::Candidate(v15 + 1000, (uint64_t)v13);
        }
        v13 += 125;
        v14 += 1000;
        v15 += 1000;
      }
      while (v13 != a2);
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, KB::Candidate *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v10 = a6;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return;
      }
      while (((*(uint64_t (**)(void))(*a4 + 16))() & 1) == 0)
      {
        a1 += 125;
        if (!--a5) {
          return;
        }
      }
      uint64_t v52 = v10;
      int v53 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, a2);
          return;
        }
        if (a5 >= 0) {
          uint64_t v21 = a5;
        }
        else {
          uint64_t v21 = a5 + 1;
        }
        uint64_t v20 = v21 >> 1;
        uint64_t v18 = &a1[125 * (v21 >> 1)];
        if (a3 != a2)
        {
          uint64_t v49 = v21 >> 1;
          uint64_t v51 = a8;
          uint64_t v22 = *a4;
          unint64_t v23 = 0x1CAC083126E978D5 * (a3 - a2);
          a3 = a2;
          do
          {
            uint64_t v24 = &a3[125 * (v23 >> 1)];
            int v25 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(v22 + 16))(v22, v24, v18);
            if (v25) {
              v23 += ~(v23 >> 1);
            }
            else {
              v23 >>= 1;
            }
            if (v25) {
              a3 = v24 + 125;
            }
          }
          while (v23);
          a8 = v51;
          uint64_t v20 = v49;
        }
        uint64_t v17 = 0x1CAC083126E978D5 * (a3 - a2);
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v16 = v10;
        }
        else {
          uint64_t v16 = v10 + 1;
        }
        uint64_t v17 = v16 >> 1;
        a3 = &a2[125 * (v16 >> 1)];
        uint64_t v18 = a2;
        if (a2 != a1)
        {
          uint64_t v50 = v16 >> 1;
          unint64_t v19 = 0x1CAC083126E978D5 * (a2 - a1);
          uint64_t v18 = a1;
          do
          {
            if ((*(unsigned int (**)(void))(*a4 + 16))())
            {
              v19 >>= 1;
            }
            else
            {
              v18 += 125 * (v19 >> 1) + 125;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          uint64_t v17 = v50;
        }
        uint64_t v20 = 0x1CAC083126E978D5 * (v18 - a1);
      }
      if (v18 == a2)
      {
        size_t v30 = a3;
      }
      else if (a3 == a2)
      {
        size_t v30 = v18;
      }
      else
      {
        char v26 = a2;
        uint64_t v27 = v20;
        uint64_t v28 = v17;
        uint64_t v29 = std::__rotate_forward[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<KB::Candidate *>>(v18, v26, a3);
        uint64_t v17 = v28;
        uint64_t v20 = v27;
        size_t v30 = v29;
      }
      a5 -= v20;
      uint64_t v10 = v52 - v17;
      if (v20 + v17 >= a5 + v52 - v17)
      {
        double v31 = a3;
        uint64_t v32 = v20;
        uint64_t v33 = a5;
        uint64_t v34 = v17;
        std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(v30, v31, v53, a4, v33, v52 - v17, a7, a8);
        a2 = v18;
        uint64_t v10 = v34;
        a5 = v32;
        a3 = v30;
        if (!v10) {
          return;
        }
      }
      else
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(a1, v18, v30, a4, v20, v17, a7, a8);
        a1 = v30;
        a2 = a3;
        a3 = v53;
        if (!v10) {
          return;
        }
      }
    }
    if (a5 <= v10)
    {
      if (a1 == a2) {
        return;
      }
      uint64_t v41 = 0;
      uint64_t v36 = 0;
      do
      {
        KB::Candidate::Candidate((uint64_t)a7 + v41 * 8, (uint64_t)&a1[v41]);
        ++v36;
        v41 += 125;
      }
      while (&a1[v41] != a2);
      uint64_t v42 = (uint64_t *)((char *)a7 + v41 * 8);
      if ((KB::Candidate *)((char *)a7 + v41 * 8) != a7)
      {
        char v43 = (uint64_t *)a7;
        while (a2 != a3)
        {
          if ((*(unsigned int (**)(void))(*a4 + 16))())
          {
            KB::Candidate::operator=(a1, a2);
            a2 += 125;
          }
          else
          {
            KB::Candidate::operator=(a1, v43);
            v43 += 125;
          }
          a1 += 125;
          if (v43 == v42) {
            goto LABEL_81;
          }
        }
        if (v43 != v42)
        {
          unint64_t v47 = a7;
          uint64_t v48 = 0;
          do
          {
            KB::Candidate::operator=(&a1[v48], &v43[v48]);
            v48 += 125;
          }
          while (&v43[v48 - 125] != v42 - 125);
          a7 = v47;
        }
      }
    }
    else
    {
      if (a3 == a2) {
        return;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      do
      {
        KB::Candidate::Candidate((uint64_t)a7 + v35 * 8, (uint64_t)&a2[v35]);
        ++v36;
        v35 += 125;
      }
      while (&a2[v35] != a3);
      size_t v37 = (KB::Candidate *)((char *)a7 + v35 * 8);
      if ((KB::Candidate *)((char *)a7 + v35 * 8) != a7)
      {
        long long v38 = a3 - 125;
        while (a2 != a1)
        {
          int v39 = (*(uint64_t (**)(void))(*a4 + 16))();
          if (v39) {
            uint64_t v40 = a2 - 125;
          }
          else {
            uint64_t v40 = (uint64_t *)((char *)v37 - 1000);
          }
          if (v39) {
            a2 -= 125;
          }
          else {
            size_t v37 = (KB::Candidate *)((char *)v37 - 1000);
          }
          KB::Candidate::operator=(v38, v40);
          v38 -= 125;
          if (v37 == a7) {
            goto LABEL_81;
          }
        }
        int v44 = a7;
        uint64_t v45 = 0;
        do
        {
          char v46 = &v38[v45];
          v45 -= 125;
          KB::Candidate::operator=(v46, (uint64_t *)((char *)v37 + v45 * 8));
        }
        while ((KB::Candidate *)((char *)v37 + v45 * 8) != v44);
        a7 = v44;
      }
    }
LABEL_81:
    if (a7 && v36)
    {
      do
      {
        KB::Candidate::~Candidate(a7);
        a7 = (KB::Candidate *)((char *)a7 + 1000);
        --v36;
      }
      while (v36);
    }
  }
}

uint64_t *std::__rotate_forward[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<KB::Candidate *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = a1 + 125;
  uint64_t v7 = a2;
  while (1)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v5, v4);
    v5 += 125;
    v4 += 125;
    if (v4 == a3) {
      break;
    }
    if (v5 == v7) {
      uint64_t v7 = v4;
    }
    v6 += 125;
  }
  if (v5 != v7)
  {
    uint64_t v8 = v7;
    do
    {
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v5, v7);
        v5 += 125;
        v7 += 125;
        if (v7 == a3) {
          break;
        }
        if (v5 == v8) {
          uint64_t v8 = v7;
        }
      }
      uint64_t v7 = v8;
    }
    while (v5 != v8);
  }
  return v6;
}

const char *KB::FilterContinuousPathAlternatesFromOtherLanguage::filter_description(KB::FilterContinuousPathAlternatesFromOtherLanguage *this)
{
  return "FilterContinuousPathAlternatesFromOtherLanguage";
}

void KB::FilterContinuousPathAlternatesFromOtherLanguage::~FilterContinuousPathAlternatesFromOtherLanguage(KB::FilterContinuousPathAlternatesFromOtherLanguage *this)
{
}

uint64_t __Block_byref_object_copy__6224(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6225(uint64_t a1)
{
}

void __TIGetShowEmojisByDefaultValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"ShowEmojisByDefault" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

id TIGetProactiveQuickTypeSettingValue()
{
  if (TIGetProactiveQuickTypeSettingValue_onceToken != -1) {
    dispatch_once(&TIGetProactiveQuickTypeSettingValue_onceToken, &__block_literal_global_307);
  }
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  unint64_t v1 = [v0 valueForPreferenceKey:@"ProactiveQuickTypeSetting"];

  return v1;
}

void __TIGetProactiveQuickTypeSettingValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"ProactiveQuickTypeSetting" domain:@"com.apple.keyboard" defaultValue:&unk_1F3FA7B20];
}

uint64_t __Block_byref_object_copy__6357(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6358(uint64_t a1)
{
}

Class __getCLGeocoderClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    _DWORD v4[2] = 3221225472;
    v4[3] = __CoreLocationLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E6E2B020;
    uint64_t v6 = 0;
    CoreLocationLibraryCore_frameworkLibrardouble y = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!CoreLocationLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("CLGeocoder");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getCLGeocoderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrardouble y = result;
  return result;
}

void *__Block_byref_object_copy__6908(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__6909(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__273(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__274(uint64_t a1)
{
}

__CFString *TIAssetAvailabilityStatusToString(uint64_t a1)
{
  if (a1) {
    return @"Installed";
  }
  else {
    return @"Unavailable";
  }
}

KB::LanguageModelImplBase *std::construct_at[abi:nn180100]<KB::LanguageModelImplStub,KB::LanguageModelConfig,KB::LanguageModelImplStub*>(KB::LanguageModelImplBase *this, uint64_t a2)
{
  BOOL v4 = *(const void **)a2;
  uint64_t v11 = v4;
  if (v4)
  {
    CFRetain(v4);
    uint64_t v11 = v4;
  }
  long long v5 = *(const void **)(a2 + 8);
  uint64_t v12 = v5;
  if (v5)
  {
    CFRetain(v5);
    uint64_t v12 = v5;
  }
  uint64_t v6 = *(const void **)(a2 + 16);
  uint64_t v13 = v6;
  if (v6)
  {
    CFRetain(v6);
    uint64_t v13 = v6;
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = 0u;
  long long v10 = v7;
  long long v14 = v7;
  long long v9 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 40) = 0u;
  long long v15 = v9;
  long long v16 = *(_OWORD *)(a2 + 56);
  long long v17 = *(_OWORD *)(a2 + 72);
  int v18 = *(_DWORD *)(a2 + 88);
  KB::LanguageModelImplBase::LanguageModelImplBase(this, (const KB::LanguageModelConfig *)&v11);
  *(void *)this = &unk_1F3F774F8;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_WORD *)this + 84) = 0;
  *((void *)this + 22) = 1018212795;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 850045863;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 35) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((unsigned char *)this + 169) = 0;
  if (*((void *)&v9 + 1)) {
    CFRelease(*((CFTypeRef *)&v9 + 1));
  }
  if ((void)v9) {
    CFRelease((CFTypeRef)v9);
  }
  if (*((void *)&v10 + 1)) {
    CFRelease(*((CFTypeRef *)&v10 + 1));
  }
  if ((void)v10) {
    CFRelease((CFTypeRef)v10);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  return this;
}

uint64_t std::__shared_ptr_emplace<KB::LanguageModelImplStub>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<KB::LanguageModelImplStub>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75368;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<KB::LanguageModelImplStub>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::shared_ptr<KB::LanguageModelStr>::__enable_weak_this[abi:nn180100]<KB::LanguageModelStr,KB::LanguageModelStr,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    BOOL v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      long long v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        BOOL v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:nn180100](v5);
      }
    }
  }
}

uint64_t std::__shared_ptr_emplace<KB::LanguageModelStr>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<KB::LanguageModelStr>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75330;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<KB::LanguageModelStr>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t __Block_byref_object_copy__7291(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7292(uint64_t a1)
{
}

void *__getReportMemoryExceptionFromTaskSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  uint64_t v8 = 0;
  long long v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v2 = (void *)libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  uint64_t v11 = libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  if (!libMemoryResourceExceptionLibraryCore_frameworkLibrary)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = __libMemoryResourceExceptionLibraryCore_block_invoke;
    v5[4] = &unk_1E6E2B158;
    uint64_t v6 = &v8;
    long long v7 = v5;
    long long v12 = xmmword_1E6E2B138;
    uint64_t v13 = 0;
    _WORD v9[3] = _sl_dlopen();
    libMemoryResourceExceptionLibraryCore_frameworkLibrardouble y = *(void *)(v6[1] + 24);
    uint64_t v2 = (void *)v9[3];
  }
  _Block_object_dispose(&v8, 8);
  uint64_t v3 = (void *)v5[0];
  if (!v2)
  {
    uint64_t v3 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "ReportMemoryExceptionFromTask");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getReportMemoryExceptionFromTaskSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __libMemoryResourceExceptionLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  libMemoryResourceExceptionLibraryCore_frameworkLibrardouble y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __Block_byref_object_copy__7447(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7448(uint64_t a1)
{
}

uint64_t StringBIStream::close(StringBIStream *this)
{
  return 1;
}

uint64_t StringBIStream::eos(StringBIStream *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t StringBIStream::gotoBookmark(StringBIStream *this)
{
  if (!*((_DWORD *)this + 18)) {
    return 0;
  }
  *((_OWORD *)this + 1) = *((_OWORD *)this + 3);
  *((_DWORD *)this + 2) = *((_DWORD *)this + 10);
  *((void *)this + 4) = *((void *)this + 8);
  return 1;
}

uint64_t StringBIStream::bookmark(StringBIStream *this)
{
  *((_DWORD *)this + 18) = 1;
  *((_OWORD *)this + 3) = *((_OWORD *)this + 1);
  *((_DWORD *)this + 10) = *((_DWORD *)this + 2);
  *((void *)this + 8) = *((void *)this + 4);
  return 1;
}

uint64_t StringBIStream::getNextDW(StringBIStream *this, unsigned int *a2)
{
  if (*((_DWORD *)this + 2)) {
    return 0;
  }
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  unsigned int v4 = *v3;
  *a2 = *v3;
  *((void *)this + 3) = v3 + 1;
  if (*((_DWORD *)this + 8) == -1)
  {
    BOOL v6 = v4 == 0;
  }
  else
  {
    int v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = v5 - 4;
    BOOL v6 = v5 < 5;
  }
  *((_DWORD *)this + 2) = v6;
  return 1;
}

uint64_t StringBIStream::peekNextW(StringBIStream *this, unsigned __int16 *a2)
{
  if (*((_DWORD *)this + 2)) {
    return 0;
  }
  *a2 = **((_WORD **)this + 3);
  return 1;
}

uint64_t StringBIStream::getNextW(StringBIStream *this, unsigned __int16 *a2)
{
  if (*((_DWORD *)this + 2)) {
    return 0;
  }
  uint64_t v3 = (unsigned __int16 *)*((void *)this + 3);
  int v4 = *v3;
  *a2 = *v3;
  *((void *)this + 3) = v3 + 1;
  if (*((_DWORD *)this + 8) == -1)
  {
    BOOL v6 = v4 == 0;
  }
  else
  {
    int v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = v5 - 2;
    BOOL v6 = v5 < 3;
  }
  *((_DWORD *)this + 2) = v6;
  return 1;
}

uint64_t StringBIStream::unget(StringBIStream *this, char a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2 != *((void *)this + 2))
  {
    *((void *)this + 3) = v2 - 1;
    *(unsigned char *)(v2 - 1) = a2;
    *((_DWORD *)this + 2) = 0;
    if (*((_DWORD *)this + 8) != -1) {
      ++*((_DWORD *)this + 9);
    }
  }
  return 1;
}

uint64_t StringBIStream::peekNext(StringBIStream *this, unsigned __int8 *a2)
{
  if (*((_DWORD *)this + 2)) {
    return 0;
  }
  *a2 = **((unsigned char **)this + 3);
  return 1;
}

uint64_t StringBIStream::getNext(StringBIStream *this, unsigned __int8 *a2)
{
  if (*((_DWORD *)this + 2)) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  *((void *)this + 3) = v3 + 1;
  int v4 = *v3;
  *a2 = v4;
  if (*((_DWORD *)this + 8) == -1)
  {
    BOOL v6 = v4 == 0;
  }
  else
  {
    int v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = v5 - 1;
    BOOL v6 = v5 < 2;
  }
  *((_DWORD *)this + 2) = v6;
  return 1;
}

void StringBIStream::~StringBIStream(StringBIStream *this)
{
}

uint64_t StringBOStream::close(StringBOStream *this)
{
  return 1;
}

BOOL StringBOStream::isOK(StringBOStream *this)
{
  return *((_DWORD *)this + 8) == 0;
}

BOOL StringBOStream::puts(StringBOStream *this, const char *a2, int a3)
{
  if (a3 == -1)
  {
    if (*a2)
    {
      long long v7 = a2 + 1;
      do
      {
        int v8 = *((_DWORD *)this + 6);
        int v9 = *((_DWORD *)this + 7);
        *((_DWORD *)this + 6) = v8 + 1;
        if (v8 < v9)
        {
          char v10 = *(v7 - 1);
          uint64_t v11 = (unsigned char *)*((void *)this + 2);
          *((void *)this + 2) = v11 + 1;
          *uint64_t v11 = v10;
        }
      }
      while (*(unsigned __int8 *)v7++);
    }
    int v6 = *((_DWORD *)this + 8);
    if (!v6)
    {
      if (*((_DWORD *)this + 6) > *((_DWORD *)this + 7))
      {
LABEL_20:
        int v6 = 1;
        *((_DWORD *)this + 8) = 1;
        return v6 == 0;
      }
LABEL_11:
      int v6 = 0;
    }
  }
  else
  {
    int v5 = *((_DWORD *)this + 6);
    if (*((_DWORD *)this + 8))
    {
      *((_DWORD *)this + 6) = v5 + a3;
      int v6 = 1;
      return v6 == 0;
    }
    int v13 = *((_DWORD *)this + 7);
    if (v13 < v5)
    {
      int v14 = v5 + a3;
      *((_DWORD *)this + 6) = v14;
      goto LABEL_19;
    }
    if (v13 - v5 >= a3) {
      int v15 = a3;
    }
    else {
      int v15 = v13 - v5;
    }
    memcpy(*((void **)this + 2), a2, v15);
    *((void *)this + 2) += v15;
    int v6 = *((_DWORD *)this + 8);
    int v14 = *((_DWORD *)this + 6) + a3;
    *((_DWORD *)this + 6) = v14;
    if (!v6)
    {
      int v13 = *((_DWORD *)this + 7);
LABEL_19:
      if (v14 > v13) {
        goto LABEL_20;
      }
      goto LABEL_11;
    }
  }
  return v6 == 0;
}

uint64_t StringBOStream::putW(StringBOStream *this, __int16 a2)
{
  int v2 = *((_DWORD *)this + 6) + 2;
  *((_DWORD *)this + 6) = v2;
  if (*((_DWORD *)this + 8)) {
    return 0;
  }
  if (v2 <= *((_DWORD *)this + 7))
  {
    int v4 = (_WORD *)*((void *)this + 2);
    *int v4 = a2;
    *((void *)this + 2) = v4 + 1;
    return 1;
  }
  else
  {
    uint64_t v3 = 0;
    *((_DWORD *)this + 8) = 1;
  }
  return v3;
}

uint64_t StringBOStream::putB(StringBOStream *this, char a2)
{
  int v2 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v2 + 1;
  if (*((_DWORD *)this + 8)) {
    return 0;
  }
  if (v2 >= *((_DWORD *)this + 7))
  {
    uint64_t v3 = 0;
    *((_DWORD *)this + 8) = 1;
  }
  else
  {
    int v4 = (unsigned char *)*((void *)this + 2);
    *((void *)this + 2) = v4 + 1;
    *int v4 = a2;
    return 1;
  }
  return v3;
}

void StringBOStream::~StringBOStream(StringBOStream *this)
{
}

uint64_t FileBIStream::close(FileBIStream *this)
{
  int v2 = (FILE *)*((void *)this + 1);
  if (v2)
  {
    fclose(v2);
    *((void *)this + 1) = 0;
  }
  return 1;
}

uint64_t FileBIStream::eos(FILE **this)
{
  if (*((_DWORD *)this + 13)) {
    return 0;
  }
  else {
    return feof(this[1]);
  }
}

uint64_t FileBIStream::gotoBookmark(FileBIStream *this)
{
  if (!*((_DWORD *)this + 9)) {
    return 0;
  }
  fseek(*((FILE **)this + 1), *((void *)this + 5), 0);
  return 1;
}

uint64_t FileBIStream::bookmark(FileBIStream *this)
{
  *((_DWORD *)this + 9) = 1;
  *((void *)this + 5) = MEMORY[0x1E4E7C120](*((void *)this + 1));
  return 1;
}

uint64_t FileBIStream::getNextDW(FileBIStream *this, unsigned int *a2)
{
  int v5 = 0;
  uint64_t result = (*(uint64_t (**)(FileBIStream *, char *))(*(void *)this + 40))(this, (char *)&v5 + 2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(FileBIStream *, int *))(*(void *)this + 40))(this, &v5);
    if (result)
    {
      *(_WORD *)a2 = HIWORD(v5);
      *((_WORD *)a2 + 1) = v5;
      return 1;
    }
  }
  return result;
}

double FileBIStream::peekNextW(FileBIStream *this, unsigned __int16 *a2)
{
  __int16 v6 = 0;
  if ((*(unsigned int (**)(FileBIStream *, __int16 *))(*(void *)this + 16))(this, &v6))
  {
    if ((*(unsigned int (**)(FileBIStream *, char *))(*(void *)this + 16))(this, (char *)&v6 + 1))
    {
      (*(void (**)(FileBIStream *, void))(*(void *)this + 32))(this, HIBYTE(v6));
      char v5 = v6;
      *a2 = v6 | (HIBYTE(v6) << 8);
    }
    else
    {
      char v5 = v6;
    }
    *((unsigned char *)this + 48) = v5;
    *(void *)&double result = 1;
    *(void *)((char *)this + 52) = 1;
  }
  return result;
}

uint64_t FileBIStream::getNextW(FileBIStream *this, unsigned __int16 *a2)
{
  __int16 v5 = 0;
  uint64_t result = (*(uint64_t (**)(FileBIStream *, char *))(*(void *)this + 16))(this, (char *)&v5 + 1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(FileBIStream *, __int16 *))(*(void *)this + 16))(this, &v5);
    if (result)
    {
      *(unsigned char *)a2 = HIBYTE(v5);
      *((unsigned char *)a2 + 1) = v5;
      return 1;
    }
  }
  return result;
}

uint64_t FileBIStream::unget(FileBIStream *this, char a2)
{
  if (*((_DWORD *)this + 14))
  {
    *(void *)((char *)this + 52) = 1;
    *((unsigned char *)this + 48) = a2;
  }
  else
  {
    ungetc(a2, *((FILE **)this + 1));
  }
  return 1;
}

uint64_t FileBIStream::peekNext(FileBIStream *this, unsigned __int8 *a2)
{
  if (*((_DWORD *)this + 13))
  {
    *a2 = *((unsigned char *)this + 48);
    return 1;
  }
  *a2 = fgetc(*((FILE **)this + 1));
  if (!feof(*((FILE **)this + 1)))
  {
    ungetc(*a2, *((FILE **)this + 1));
    return 1;
  }
  return 0;
}

BOOL FileBIStream::getNext(FileBIStream *this, unsigned __int8 *a2)
{
  if (*((_DWORD *)this + 13))
  {
    *((_DWORD *)this + 13) = 0;
    *a2 = *((unsigned char *)this + 48);
    BOOL result = 1;
    *((_DWORD *)this + 14) = 1;
  }
  else
  {
    *((_DWORD *)this + 14) = 0;
    *a2 = fgetc(*((FILE **)this + 1));
    return feof(*((FILE **)this + 1)) == 0;
  }
  return result;
}

void FileBIStream::~FileBIStream(FileBIStream *this)
{
  FileBIStream::~FileBIStream(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  FILE *v2;

  *(void *)this = &unk_1F3F754D8;
  if (*((_DWORD *)this + 8))
  {
    int v2 = (FILE *)*((void *)this + 1);
    if (v2)
    {
      fclose(v2);
      *((void *)this + 1) = 0;
    }
  }
}

uint64_t FileBOStream::close(FileBOStream *this)
{
  int v2 = (FILE *)*((void *)this + 1);
  if (v2)
  {
    fclose(v2);
    *((void *)this + 1) = 0;
  }
  return 1;
}

BOOL FileBOStream::isOK(FileBOStream *this)
{
  return *((_DWORD *)this + 9) == 0;
}

BOOL FileBOStream::puts(FileBOStream *this, const char *__ptr, int a3)
{
  if (*((_DWORD *)this + 9)) {
    return 0;
  }
  if (a3 == -1) {
    BOOL v5 = fputs(__ptr, *((FILE **)this + 1)) == -1;
  }
  else {
    BOOL v5 = fwrite(__ptr, 1uLL, a3, *((FILE **)this + 1)) != a3;
  }
  *((_DWORD *)this + 9) = v5;
  return !v5;
}

BOOL FileBOStream::putW(FileBOStream *this, unsigned int a2)
{
  if (*((_DWORD *)this + 9)) {
    return 0;
  }
  int v5 = fputc(a2, *((FILE **)this + 1));
  *((_DWORD *)this + 9) = v5 == -1;
  if (v5 == -1) {
    return 0;
  }
  int v6 = fputc(a2 >> 8, *((FILE **)this + 1));
  BOOL v7 = v6 == -1;
  BOOL result = v6 != -1;
  int v8 = v7;
  *((_DWORD *)this + 9) = v8;
  return result;
}

BOOL FileBOStream::putB(FileBOStream *this, int a2)
{
  if (*((_DWORD *)this + 9)) {
    return 0;
  }
  int v4 = fputc(a2, *((FILE **)this + 1));
  BOOL v5 = v4 == -1;
  BOOL result = v4 != -1;
  int v6 = v5;
  *((_DWORD *)this + 9) = v6;
  return result;
}

void FileBOStream::~FileBOStream(FileBOStream *this)
{
  FileBOStream::~FileBOStream(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  FILE *v2;

  *(void *)this = &unk_1F3F75548;
  if (*((_DWORD *)this + 8))
  {
    int v2 = (FILE *)*((void *)this + 1);
    if (v2)
    {
      fclose(v2);
      *((void *)this + 1) = 0;
    }
  }
}

void StringBIStream::StringBIStream(StringBIStream *this, unsigned __int8 *a2, int a3, int a4)
{
  *(void *)this = &unk_1F3F75420;
  *((void *)this + 2) = a2;
  *((void *)this + 3) = a2;
  *((_DWORD *)this + 8) = a3;
  *((_DWORD *)this + 9) = a3;
  if (a3 == -1)
  {
    if (a4 == 4)
    {
      BOOL v6 = *(_DWORD *)a2 == 4;
    }
    else
    {
      if (a4 == 2) {
        int v5 = *(unsigned __int16 *)a2;
      }
      else {
        int v5 = *a2;
      }
      BOOL v6 = v5 == 0;
    }
    BOOL v4 = v6;
  }
  else
  {
    BOOL v4 = a3 < 1;
  }
  *((_DWORD *)this + 2) = v4;
  *((_DWORD *)this + 18) = 0;
}

uint64_t StringBIStream::reopen(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  *(void *)(this + 24) = v1;
  int v2 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 36) = v2;
  BOOL v3 = v1 == 0;
  if (v2 != -1) {
    BOOL v3 = v2 < 1;
  }
  *(_DWORD *)(this + 8) = v3;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void StringBOStream::StringBOStream(StringBOStream *this, unsigned __int8 *a2, int a3)
{
  *(void *)this = &unk_1F3F75490;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 7) = a3;
  *((_DWORD *)this + 8) = 0;
}

{
  *(void *)this = &unk_1F3F75490;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 7) = a3;
  *((_DWORD *)this + 8) = 0;
}

uint64_t StringBOStream::reopen(uint64_t this)
{
  *(void *)(this + 16) = *(void *)(this + 8);
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void FileBIStream::FileBIStream(FileBIStream *this, int a2, char *a3)
{
  *(void *)this = &unk_1F3F754D8;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = a3;
  *((_DWORD *)this + 4) = a2;
  *((void *)this + 4) = 1;
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 14) = 0;
}

{
  *(void *)this = &unk_1F3F754D8;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = a3;
  *((_DWORD *)this + 4) = a2;
  *((void *)this + 4) = 1;
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 14) = 0;
}

uint64_t FileBIStream::open(FileBIStream *this, const char *__filename)
{
  uint64_t result = (uint64_t)fopen(__filename, "rb");
  *((void *)this + 1) = result;
  if (result)
  {
    setvbuf((FILE *)result, *((char **)this + 3), 0, *((int *)this + 4));
    *((_DWORD *)this + 8) = 0;
    uint64_t result = 1;
    *((_DWORD *)this + 13) = 0;
    *((_DWORD *)this + 14) = 0;
  }
  return result;
}

uint64_t FileBIStream::attach(uint64_t this, __sFILE *a2)
{
  *(void *)(this + 8) = a2;
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 52) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void FileBOStream::FileBOStream(FileBOStream *this, int a2, char *a3)
{
  *(void *)this = &unk_1F3F75548;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = a3;
  *((_DWORD *)this + 4) = a2;
  *((void *)this + 4) = 0x100000001;
}

{
  *(void *)this = &unk_1F3F75548;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = a3;
  *((_DWORD *)this + 4) = a2;
  *((void *)this + 4) = 0x100000001;
}

uint64_t FileBOStream::open(FileBOStream *this, const char *__filename)
{
  uint64_t result = (uint64_t)fopen(__filename, "wb");
  *((void *)this + 1) = result;
  if (result)
  {
    *((_DWORD *)this + 9) = 0;
    setvbuf((FILE *)result, *((char **)this + 3), 0, *((int *)this + 4));
    uint64_t result = 1;
    *((_DWORD *)this + 8) = 1;
  }
  return result;
}

uint64_t FileBOStream::attach(uint64_t this, __sFILE *a2)
{
  *(void *)(this + 8) = a2;
  *(void *)(this + 32) = 0;
  return this;
}

void KB::StaticDictionary::create(KB::StaticDictionary *this)
{
}

KB::StaticDictionary *KB::StaticDictionary::StaticDictionary(KB::StaticDictionary *this)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  KB::String::String((KB::StaticDictionary *)((char *)this + 80), "");
  *((void *)this + 14) = &unk_1F3F79DB8;
  *((void *)this + 17) = (char *)this + 112;
  *((void *)this + 18) = &unk_1F3F79E00;
  *((void *)this + 21) = (char *)this + 144;
  return this;
}

{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  KB::String::String((KB::StaticDictionary *)((char *)this + 80), "");
  *((void *)this + 14) = &unk_1F3F79DB8;
  *((void *)this + 17) = (char *)this + 112;
  *((void *)this + 18) = &unk_1F3F79E00;
  *((void *)this + 21) = (char *)this + 144;
  return this;
}

void KB::StaticDictionary::candidates_for_string(KB::StaticDictionary *this@<X0>, const KB::String *a2@<X1>, float *a3@<X2>, void *a4@<X8>)
{
  if (*(void *)this == *((void *)this + 1) || *(_WORD *)a2 == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = 0;
    memset(v11, 0, sizeof(v11));
    int v12 = 0;
    KB::StaticDictionaryCursor::reset((KB::StaticDictionaryCursor *)v11, this);
    float v8 = KB::StaticDictionaryCursor::advance((KB::StaticDictionaryCursor *)v11, a2);
    if (a3)
    {
      *a3 = v8;
      *a3 = KB::StaticDictionaryCursor::termination_probability((KB::StaticDictionaryCursor *)v11) * *a3;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    KB::StaticDictionaryCursor::derive_words((KB::StaticDictionaryCursor *)v11, (uint64_t)a4);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      char v10 = *(const void **)((char *)v11 + i);
      if (v10) {
        CFRelease(v10);
      }
      *(void *)((char *)v11 + i) = 0;
    }
  }
}

void KB::StaticDictionary::root_cursor(KB::StaticDictionary *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 0;
  KB::StaticDictionaryCursor::reset((KB::StaticDictionaryCursor *)a2, this);
}

BOOL KB::StaticDictionary::contains(KB::StaticDictionary *a1, const KB::String *a2, int a3, float a4)
{
  v13[30] = *(void ***)MEMORY[0x1E4F143B8];
  if (*(void *)a1 == *((void *)a1 + 1) || *(_WORD *)a2 == 0) {
    return 0;
  }
  float v12 = 0.0;
  KB::StaticDictionary::candidates_for_string(a1, a2, &v12, v11);
  BOOL v5 = 0;
  if (v12 > a4 && v11[1] != v11[0])
  {
    if (a3 == 2)
    {
      BOOL v5 = 1;
    }
    else
    {
      KB::word_with_string(a2, v11, a3 == 1, (KB::Word *)v13);
      BOOL v5 = LOWORD(v13[0]) != 0;
      KB::Word::~Word((KB::Word *)v13);
    }
  }
  v13[0] = (void **)v11;
  std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](v13);
  return v5;
}

uint64_t KB::StaticDictionary::contains_with_candidates(float a1, float a2, uint64_t a3, KB::String *a4, uint64_t *a5, int a6)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1 <= a2 || a5[1] == *a5) {
    return 0;
  }
  if (a6 == 2) {
    return 1;
  }
  KB::word_with_string(a4, a5, a6 == 1, (KB::Word *)v9);
  BOOL v7 = v9[0] != 0;
  KB::Word::~Word((KB::Word *)v9);
  return v7;
}

uint64_t KB::StaticDictionary::contains_surfaceform_insertion_with_candidates(uint64_t *a1, unsigned char *a2, float a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  if (a3 <= 0.0 || a1[1] == v3) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    KB::Word::Word((KB::Word *)v10, (size_t *)(v3 + v7));
    if ((v10[106] & 0x40) != 0) {
      break;
    }
    KB::Word::~Word((KB::Word *)v10);
    ++v8;
    uint64_t v3 = *a1;
    v7 += 240;
    if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4) <= v8) {
      return 0;
    }
  }
  if (a2)
  {
    if (v11) {
      *a2 = 1;
    }
  }
  KB::Word::~Word((KB::Word *)v10);
  return 1;
}

uint64_t KB::StaticDictionary::merge_words(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    BOOL v4 = (uint64_t *)result;
    uint64_t v5 = MEMORY[0x1E4F143A8];
    BOOL v6 = (void *)(result + 16);
    uint64_t v7 = *(KB::Word **)(result + 8);
    while (1)
    {
      uint64_t v8 = *v4;
      v14[0] = v5;
      v14[1] = 0x40000000;
      int v15 = ___ZN2KB16StaticDictionary11merge_wordsERNSt3__16vectorINS_4WordENS1_9allocatorIS3_EEEERKS6__block_invoke;
      long long v16 = &__block_descriptor_tmp_7884;
      uint64_t v17 = v2;
      if ((KB::Word *)v8 == v7) {
        goto LABEL_10;
      }
      while (1)
      {
        uint64_t result = ((uint64_t (*)(void *, uint64_t))v15)(v14, v8);
        if (result) {
          break;
        }
        v8 += 240;
        if ((KB::Word *)v8 == v7)
        {
          uint64_t v8 = (uint64_t)v7;
          break;
        }
      }
      uint64_t v7 = (KB::Word *)v4[1];
      if ((KB::Word *)v8 == v7) {
        break;
      }
      *(float *)(v8 + 48) = *(float *)(v8 + 48) + *(float *)(v2 + 48);
      *(_DWORD *)(v8 + 104) = *(_DWORD *)(v2 + 104);
      *(_DWORD *)(v8 + 132) = *(_DWORD *)(v2 + 132);
LABEL_23:
      v2 += 240;
      if (v2 == v3) {
        return result;
      }
    }
    uint64_t v7 = (KB::Word *)v8;
LABEL_10:
    if ((unint64_t)v7 >= *v6)
    {
      unint64_t v9 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v7 - *v4) >> 4);
      unint64_t v10 = v9 + 1;
      if (v9 + 1 > 0x111111111111111) {
        abort();
      }
      if (0xDDDDDDDDDDDDDDDELL * ((*v6 - *v4) >> 4) > v10) {
        unint64_t v10 = 0xDDDDDDDDDDDDDDDELL * ((*v6 - *v4) >> 4);
      }
      if (0xEEEEEEEEEEEEEEEFLL * ((*v6 - *v4) >> 4) >= 0x88888888888888) {
        unint64_t v11 = 0x111111111111111;
      }
      else {
        unint64_t v11 = v10;
      }
      v18[4] = v6;
      if (v11) {
        unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = (KB::Word *)(v11 + 240 * v9);
      v18[0] = v11;
      v18[1] = v13;
      v18[3] = v11 + 240 * v12;
      KB::Word::Word(v13, (size_t *)v2);
      v18[2] = (char *)v13 + 240;
      std::vector<KB::Word>::__swap_out_circular_buffer(v4, v18);
      uint64_t v7 = (KB::Word *)v4[1];
      uint64_t result = std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)v18);
    }
    else
    {
      uint64_t result = (uint64_t)KB::Word::Word(v7, (size_t *)v2);
      uint64_t v7 = (KB::Word *)((char *)v7 + 240);
    }
    v4[1] = (uint64_t)v7;
    goto LABEL_23;
  }
  return result;
}

BOOL ___ZN2KB16StaticDictionary11merge_wordsERNSt3__16vectorINS_4WordENS1_9allocatorIS3_EEEERKS6__block_invoke(uint64_t a1, KB::String *a2)
{
  uint64_t v2 = *(const KB::String **)(a1 + 32);
  if (*((_DWORD *)a2 + 34) != *((_DWORD *)v2 + 34)) {
    return 0;
  }
  if (v2 == a2) {
    return *((_DWORD *)a2 + 30) == *((_DWORD *)v2 + 30);
  }
  BOOL result = KB::String::equal(a2, v2, 1);
  if (result) {
    return *((_DWORD *)a2 + 30) == *((_DWORD *)v2 + 30);
  }
  return result;
}

double KB::StaticDictionary::invalid_cursor@<D0>(KB::StaticDictionary *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = ((*((void *)this + 1) - *(void *)this) >> 3);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v2;
  *(_DWORD *)(a2 + 48) = 0;
  return result;
}

void KB::StaticDictionary::~StaticDictionary(const void ***this)
{
  KB::StaticDictionary::unload(this, -1);
  std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::~__value_func[abi:nn180100](this + 18);
  std::__function::__value_func<KB::ByteString ()(KB::String const&)>::~__value_func[abi:nn180100](this + 14);
  uint64_t v2 = this[11];
  if (v2 && *((unsigned char *)this + 86) == 1) {
    free(v2);
  }
  uint64_t v3 = this[9];
  if (v3) {
    CFRelease(v3);
  }
  this[9] = 0;
  BOOL v4 = this[6];
  if (v4)
  {
    this[7] = v4;
    operator delete(v4);
  }
  uint64_t v5 = this[3];
  if (v5)
  {
    this[4] = v5;
    operator delete(v5);
  }
  BOOL v6 = this;
  std::vector<KB::retain_ptr<_LXLexicon const*>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v6);
}

void KB::StaticDictionary::unload(const void ***this, int a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a2 == -1)
    {
      std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)this);
      this[4] = this[3];
      uint64_t v3 = this[6];
    }
    else
    {
      uint64_t v4 = KB::StaticDictionary::lexicon_index((KB::StaticDictionary *)this, a2);
      if (v4 == -1) {
        goto LABEL_21;
      }
      uint64_t v5 = v4;
      BOOL v6 = this[1];
      uint64_t v7 = (uint64_t)&(*this)[v4];
      uint64_t v8 = v7 + 8;
      if ((const void **)(v7 + 8) != v6)
      {
        do
        {
          if (*(void *)v7) {
            CFRelease(*(CFTypeRef *)v7);
          }
          uint64_t v9 = v7 + 8;
          uint64_t v10 = *(void *)(v7 + 8);
          *(void *)(v7 + 8) = 0;
          *(void *)uint64_t v7 = v10;
          uint64_t v11 = v7 + 16;
          v7 += 8;
        }
        while ((const void **)v11 != v6);
        uint64_t v8 = (uint64_t)this[1];
        uint64_t v7 = v9;
      }
      if (v8 != v7)
      {
        uint64_t v12 = v8;
        do
        {
          int v14 = *(const void **)(v12 - 8);
          v12 -= 8;
          uint64_t v13 = v14;
          if (v14) {
            CFRelease(v13);
          }
          *(void *)(v8 - 8) = 0;
          uint64_t v8 = v12;
        }
        while (v12 != v7);
      }
      this[1] = (const void **)v7;
      int v15 = this[3];
      long long v16 = this[4];
      uint64_t v17 = (uint64_t)v15 + 4 * v5;
      uint64_t v18 = (uint64_t)v16 - v17 - 4;
      if (v16 != (const void **)(v17 + 4)) {
        memmove((char *)v15 + 4 * v5, (const void *)(v17 + 4), (size_t)v16 - v17 - 4);
      }
      this[4] = (const void **)(v17 + v18);
      unint64_t v19 = this[7];
      uint64_t v20 = (uint64_t)this[6] + 4 * v5;
      uint64_t v21 = (uint64_t)v19 - v20 - 4;
      if (v19 != (const void **)(v20 + 4)) {
        memmove((void *)v20, (const void *)(v20 + 4), (size_t)v19 - v20 - 4);
      }
      uint64_t v3 = (const void **)(v20 + v21);
    }
    this[7] = v3;
  }
LABEL_21:
  if (*this == this[1])
  {
    CFTypeRef cf = 0;
    KB::String::String((KB::String *)v29, "");
    v32[0] = &unk_1F3F79DB8;
    v32[3] = v32;
    v33[0] = &unk_1F3F79E00;
    v33[3] = v33;
    char v26 = this[9];
    if (v26) {
      CFRelease(v26);
    }
    uint64_t v27 = (const void **)cf;
    CFTypeRef cf = 0;
    this[9] = v27;
    KB::String::operator=((uint64_t)(this + 10), (KB::String *)v29);
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](this + 14, (uint64_t)v32);
    std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::operator=[abi:nn180100](this + 18, (uint64_t)v33);
    std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::~__value_func[abi:nn180100](v33);
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::~__value_func[abi:nn180100](v32);
    if (v31 && v30 == 1) {
      free(v31);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v22 = **this;
    unint64_t v23 = (const char *)TILocaleIdentifierForLexiconID(*(_DWORD *)this[6]);
    KB::String::String((KB::String *)v34, v23);
    KB::CollatorWrapper::CollatorWrapper((KB::CollatorWrapper *)&cf, v22, (const KB::String *)v34);
    uint64_t v24 = this[9];
    if (v24) {
      CFRelease(v24);
    }
    int v25 = (const void **)cf;
    CFTypeRef cf = 0;
    this[9] = v25;
    KB::String::operator=((uint64_t)(this + 10), (KB::String *)v29);
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](this + 14, (uint64_t)v32);
    std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::operator=[abi:nn180100](this + 18, (uint64_t)v33);
    std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::~__value_func[abi:nn180100](v33);
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::~__value_func[abi:nn180100](v32);
    if (v31 && v30 == 1) {
      free(v31);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v35)
    {
      if (v34[6] == 1) {
        free(v35);
      }
    }
  }
}

uint64_t KB::StaticDictionary::lexicon_index(KB::StaticDictionary *this, int a2)
{
  if (a2 == -1 && *(void *)this != *((void *)this + 1)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *((void *)this + 7) - v2;
  if (!v3) {
    return -1;
  }
  uint64_t result = 0;
  unint64_t v5 = v3 >> 2;
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  while (*(_DWORD *)(v2 + 4 * result) != a2)
  {
    if (v5 == ++result) {
      return -1;
    }
  }
  return result;
}

void *std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::operator=[abi:nn180100](void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

double KB::StaticDictionary::word_with_string@<D0>(KB::StaticDictionary *this@<X0>, const KB::String *a2@<X1>, int a3@<W2>, KB::Word *a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(void *)this != *((void *)this + 1))
  {
    uint64_t v7 = KB::StaticDictionary::lexicon_index(this, a3);
    _os_feature_enabled_impl();
    LOBYTE(v12[0]) = 0;
    char v13 = 0;
    if (v7 == -1)
    {
      if (*((void *)this + 7) != *((void *)this + 6))
      {
        uint64_t v9 = 0;
        do
        {
          KB::word_from_lexicon((KB *)v10, a2, *(const _LXLexicon **)(*(void *)this + 8 * v9));
          std::__optional_storage_base<KB::Word,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<KB::Word,false>>((uint64_t)v12, (KB::String *)v10);
          if (v11) {
            KB::Word::~Word((KB::Word *)v10);
          }
          if (v13) {
            goto LABEL_6;
          }
        }
        while (++v9 < (unint64_t)((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 2));
      }
    }
    else
    {
      KB::word_from_lexicon((KB *)v10, a2, *(const _LXLexicon **)(*(void *)this + 8 * v7));
      std::__optional_storage_base<KB::Word,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<KB::Word,false>>((uint64_t)v12, (KB::String *)v10);
      if (v11) {
        KB::Word::~Word((KB::Word *)v10);
      }
      if (v13)
      {
LABEL_6:
        KB::Word::Word(a4, v12);
        if (v13) {
          KB::Word::~Word((KB::Word *)v12);
        }
        return result;
      }
    }
    *((_OWORD *)a4 + 13) = 0u;
    *((_OWORD *)a4 + 14) = 0u;
    *((_OWORD *)a4 + 11) = 0u;
    *((_OWORD *)a4 + 12) = 0u;
    *((_OWORD *)a4 + 9) = 0u;
    *((_OWORD *)a4 + 10) = 0u;
    *((_OWORD *)a4 + 7) = 0u;
    *((_OWORD *)a4 + 8) = 0u;
    *((_OWORD *)a4 + 5) = 0u;
    *((_OWORD *)a4 + 6) = 0u;
    *((_OWORD *)a4 + 3) = 0u;
    *((_OWORD *)a4 + 4) = 0u;
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *(_OWORD *)a4 = 0u;
    return KB::Word::Word(a4);
  }
  *((_OWORD *)a4 + 13) = 0u;
  *((_OWORD *)a4 + 14) = 0u;
  *((_OWORD *)a4 + 11) = 0u;
  *((_OWORD *)a4 + 12) = 0u;
  *((_OWORD *)a4 + 9) = 0u;
  *((_OWORD *)a4 + 10) = 0u;
  *((_OWORD *)a4 + 7) = 0u;
  *((_OWORD *)a4 + 8) = 0u;
  *((_OWORD *)a4 + 5) = 0u;
  *((_OWORD *)a4 + 6) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  *((_OWORD *)a4 + 4) = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  *((_OWORD *)a4 + 2) = 0u;
  *(_OWORD *)a4 = 0u;

  return KB::Word::Word(a4);
}

void KB::word_from_lexicon(KB *this, const KB::String *a2, const _LXLexicon *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 240) = 0;
    return;
  }
  RootCursor = (const void *)LXLexiconCreateRootCursor();
  uint64_t v5 = LXCursorCreateByAdvancingWithUTF8();
  if (!v5)
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 240) = 0;
    if (!RootCursor) {
      return;
    }
    goto LABEL_11;
  }
  BOOL v6 = (const void *)v5;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x12002000000;
  char v11 = __Block_byref_object_copy__7891;
  uint64_t v12 = __Block_byref_object_dispose__7892;
  v13[0] = 0;
  char v14 = 0;
  LXCursorEnumerateEntries();
  uint64_t v7 = v9;
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 240) = 0;
  if (*((unsigned char *)v7 + 280))
  {
    KB::Word::Word(this, (size_t *)v7 + 5);
    *((unsigned char *)this + 240) = 1;
  }
  _Block_object_dispose(&v8, 8);
  if (v14) {
    KB::Word::~Word((KB::Word *)v13);
  }
  CFRelease(v6);
  if (RootCursor) {
LABEL_11:
  }
    CFRelease(RootCursor);
}

void std::__optional_storage_base<KB::Word,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<KB::Word,false>>(uint64_t a1, KB::String *this)
{
  if (*(unsigned __int8 *)(a1 + 240) == *((unsigned __int8 *)this + 240))
  {
    if (*(unsigned char *)(a1 + 240))
    {
      KB::String::operator=(a1, this);
      KB::ByteString::operator=((unsigned __int16 *)(a1 + 32), (unsigned __int16 *)this + 16);
      uint64_t v4 = *((void *)this + 6);
      *(_DWORD *)(a1 + 56) = *((_DWORD *)this + 14);
      *(void *)(a1 + 48) = v4;
      KB::String::operator=(a1 + 64, (KB::String *)((char *)this + 64));
      long long v5 = *((_OWORD *)this + 6);
      long long v6 = *((_OWORD *)this + 7);
      long long v7 = *((_OWORD *)this + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)this + 8);
      *(_OWORD *)(a1 + 144) = v7;
      *(_OWORD *)(a1 + 96) = v5;
      *(_OWORD *)(a1 + 112) = v6;
      KB::String::operator=(a1 + 160, (KB::String *)((char *)this + 160));
      *(unsigned char *)(a1 + 192) = *((unsigned char *)this + 192);
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign(a1 + 200, (uint64_t *)this + 25);
    }
  }
  else if (*(unsigned char *)(a1 + 240))
  {
    KB::Word::~Word((KB::Word *)a1);
    *(unsigned char *)(a1 + 240) = 0;
  }
  else
  {
    KB::Word::Word(a1, (uint64_t)this);
    *(unsigned char *)(a1 + 240) = 1;
  }
}

uint64_t __Block_byref_object_copy__7891(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t result = a1 + 40;
  *(unsigned char *)(result + 240) = 0;
  if (*(unsigned char *)(a2 + 280))
  {
    uint64_t result = KB::Word::Word(result, a2 + 40);
    *(unsigned char *)(a1 + 280) = 1;
  }
  return result;
}

void __Block_byref_object_dispose__7892(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 280)) {
    KB::Word::~Word((KB::Word *)(a1 + 40));
  }
}

void ___ZN2KBL17word_from_lexiconERKNS_6StringEPK10_LXLexiconj_block_invoke(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFStringRef v6 = (const __CFString *)LXEntryCopyString();
  KB::utf8_string(v6, (uint64_t)v10);
  long long v7 = *(const KB::String **)(a1 + 40);
  if (v10 == (unsigned char *)v7 || KB::String::equal((KB::String *)v10, v7, 1))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v9 = (KB::Word *)(v8 + 40);
    if (*(unsigned char *)(v8 + 280))
    {
      KB::Word::~Word(v9);
      *(unsigned char *)(v8 + 280) = 0;
    }
    KB::Word::Word((uint64_t)v9, a2, *(_DWORD *)(a1 + 48));
    *(unsigned char *)(v8 + 280) = 1;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 144) |= 0x40000u;
    *a3 = 1;
  }
  if (v11 && v10[6] == 1) {
    free(v11);
  }
  if (v6) {
    CFRelease(v6);
  }
}

BOOL KB::StaticDictionary::valid(KB::StaticDictionary *this)
{
  return *(void *)this != *((void *)this + 1);
}

BOOL KB::StaticDictionary::load(const void ***this, uint64_t a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a2 + 160);
  if (v4 == -1)
  {
    if (*this == this[1]) {
      goto LABEL_4;
    }
    return 0;
  }
  if ((char *)this[1] - (char *)*this == 24
    || KB::StaticDictionary::lexicon_index((KB::StaticDictionary *)this, v4) != -1)
  {
    return 0;
  }
LABEL_4:
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v7 = (const void *)*MEMORY[0x1E4F72458];
  KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)a2);
  uint64_t v8 = value;
  CFDictionarySetValue(Mutable, v7, value);
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)*MEMORY[0x1E4F72430];
  KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)(a2 + 32));
  uint64_t v10 = value;
  CFDictionarySetValue(Mutable, v9, value);
  if (v10) {
    CFRelease(v10);
  }
  char v11 = CFArrayCreateMutable(v5, 1, MEMORY[0x1E4F1D510]);
  KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)(a2 + 64));
  uint64_t v12 = value;
  CFArrayAppendValue(v11, value);
  if (v12) {
    CFRelease(v12);
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72438], v11);
  uint64_t v13 = LXLexiconCreate();
  BOOL v14 = v13 != 0;
  if (!v13) {
    goto LABEL_72;
  }
  uint64_t v15 = v13;
  unint64_t v16 = (unint64_t)this[2];
  uint64_t v17 = (uint64_t *)this[1];
  if ((unint64_t)v17 >= v16)
  {
    uint64_t v20 = (uint64_t *)*this;
    uint64_t v21 = ((char *)v17 - (char *)*this) >> 3;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61) {
      goto LABEL_76;
    }
    uint64_t v23 = v16 - (void)v20;
    if (v23 >> 2 > v22) {
      unint64_t v22 = v23 >> 2;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    CFNumberRef v65 = (char *)(this + 2);
    if (v24)
    {
      unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v24);
      uint64_t v20 = (uint64_t *)*this;
      uint64_t v17 = (uint64_t *)this[1];
    }
    else
    {
      uint64_t v25 = 0;
    }
    char v26 = (const void **)(v24 + 8 * v21);
    unint64_t v27 = v24 + 8 * v25;
    unint64_t v64 = v27;
    *char v26 = (const void *)v15;
    uint64_t v63 = v26 + 1;
    if (v17 == v20)
    {
      uint64_t v18 = v26 + 1;
    }
    else
    {
      do
      {
        uint64_t v28 = (const void *)*--v17;
        *uint64_t v17 = 0;
        *--char v26 = v28;
      }
      while (v17 != v20);
      uint64_t v18 = (const void **)v63;
      unint64_t v27 = v64;
    }
    uint64_t v29 = *this;
    char v30 = this[1];
    *this = v26;
    this[1] = v18;
    double v31 = this[2];
    this[2] = (const void **)v27;
    uint64_t v63 = v30;
    unint64_t v64 = (unint64_t)v31;
    value = v29;
    BOOL v62 = v29;
    std::__split_buffer<KB::retain_ptr<_LXLexicon const*>>::~__split_buffer((uint64_t)&value);
  }
  else
  {
    *uint64_t v17 = v13;
    uint64_t v18 = (const void **)(v17 + 1);
  }
  this[1] = v18;
  uint64_t v33 = (char *)this[4];
  unint64_t v32 = (unint64_t)this[5];
  if ((unint64_t)v33 >= v32)
  {
    uint64_t v35 = (char *)this[3];
    uint64_t v36 = (v33 - v35) >> 2;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62) {
      goto LABEL_76;
    }
    uint64_t v38 = v32 - (void)v35;
    if (v38 >> 1 > v37) {
      unint64_t v37 = v38 >> 1;
    }
    BOOL v39 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v39) {
      unint64_t v40 = v37;
    }
    if (v40)
    {
      unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v40);
      uint64_t v35 = (char *)this[3];
      uint64_t v33 = (char *)this[4];
    }
    else
    {
      uint64_t v41 = 0;
    }
    uint64_t v42 = (_DWORD *)(v40 + 4 * v36);
    unint64_t v43 = v40 + 4 * v41;
    *uint64_t v42 = *(_DWORD *)(a2 + 168);
    uint64_t v34 = (const void **)(v42 + 1);
    while (v33 != v35)
    {
      int v44 = *((_DWORD *)v33 - 1);
      v33 -= 4;
      *--uint64_t v42 = v44;
    }
    this[3] = (const void **)v42;
    this[4] = v34;
    this[5] = (const void **)v43;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v33 = *(_DWORD *)(a2 + 168);
    uint64_t v34 = (const void **)(v33 + 4);
  }
  this[4] = v34;
  char v46 = (char *)this[7];
  unint64_t v45 = (unint64_t)this[8];
  if ((unint64_t)v46 >= v45)
  {
    uint64_t v48 = (char *)this[6];
    uint64_t v49 = (v46 - v48) >> 2;
    unint64_t v50 = v49 + 1;
    if (!((unint64_t)(v49 + 1) >> 62))
    {
      uint64_t v51 = v45 - (void)v48;
      if (v51 >> 1 > v50) {
        unint64_t v50 = v51 >> 1;
      }
      BOOL v39 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v39) {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v52);
        uint64_t v48 = (char *)this[6];
        char v46 = (char *)this[7];
      }
      else
      {
        uint64_t v53 = 0;
      }
      double v54 = (_DWORD *)(v52 + 4 * v49);
      unint64_t v55 = v52 + 4 * v53;
      *double v54 = *(_DWORD *)(a2 + 160);
      unint64_t v47 = (const void **)(v54 + 1);
      while (v46 != v48)
      {
        int v56 = *((_DWORD *)v46 - 1);
        v46 -= 4;
        *--double v54 = v56;
      }
      this[6] = (const void **)v54;
      this[7] = v47;
      this[8] = (const void **)v55;
      if (v48) {
        operator delete(v48);
      }
      goto LABEL_61;
    }
LABEL_76:
    abort();
  }
  *(_DWORD *)char v46 = *(_DWORD *)(a2 + 160);
  unint64_t v47 = (const void **)(v46 + 4);
LABEL_61:
  this[7] = v47;
  if (*this != this[1])
  {
    long long v57 = **this;
    long long v58 = (const char *)TILocaleIdentifierForLexiconID(*(_DWORD *)this[6]);
    KB::String::String((KB::String *)v68, v58);
    KB::CollatorWrapper::CollatorWrapper((KB::CollatorWrapper *)&value, v57, (const KB::String *)v68);
    uint64_t v59 = this[9];
    if (v59) {
      CFRelease(v59);
    }
    float v60 = (const void **)value;
    value = 0;
    this[9] = v60;
    KB::String::operator=((uint64_t)(this + 10), (KB::String *)&v62);
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](this + 14, (uint64_t)v66);
    std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::operator=[abi:nn180100](this + 18, (uint64_t)v67);
    std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::~__value_func[abi:nn180100](v67);
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::~__value_func[abi:nn180100](v66);
    if (v63 && BYTE6(v62) == 1) {
      free(v63);
    }
    if (value) {
      CFRelease(value);
    }
    if (v69 && v68[6] == 1) {
      free(v69);
    }
  }
LABEL_72:
  if (v11) {
    CFRelease(v11);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v14;
}

void KB::StaticDictionary::derive_words_at_cursor(uint64_t a1, uint64_t a2, KB::StaticDictionaryCursor *a3)
{
}

BOOL KB::StaticDictionary::is_lexicon_loaded(KB::StaticDictionary *this, int a2)
{
  return KB::StaticDictionary::lexicon_index(this, a2) != -1;
}

double KB::StaticDictionary::lexicon_weight(KB::StaticDictionary *this, int a2)
{
  uint64_t v3 = KB::StaticDictionary::lexicon_index(this, a2);
  if (v3 == -1) {
    return 0.0;
  }
  LODWORD(result) = *(_DWORD *)(*((void *)this + 3) + 4 * v3);
  return result;
}

uint64_t KB::StaticDictionary::set_lexicon_weight(KB::StaticDictionary *this, int a2, float a3)
{
  uint64_t result = KB::StaticDictionary::lexicon_index(this, a2);
  if (result != -1) {
    *(float *)(*((void *)this + 3) + 4 * result) = a3;
  }
  return result;
}

id TISupplementalLexiconControllerConnectionIdentifierToObjectPointerFunctions()
{
  id v0 = objc_opt_new();
  [v0 setHashFunction:supplementalLexiconControllerIdentifierToObjectHash];
  [v0 setIsEqualFunction:supplementalLexiconControllerAreIdentifiersOrObjectsEqual];

  return v0;
}

BOOL supplementalLexiconControllerAreIdentifiersOrObjectsEqual(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v5 = [v4 intValue];
  }
  else {
    int v5 = [v4 connectionIdentifier];
  }
  int v6 = v5;

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v7 = [v3 intValue];
  }
  else {
    int v7 = [v3 connectionIdentifier];
  }
  BOOL v8 = v6 == v7;

  return v8;
}

uint64_t supplementalLexiconControllerIdentifierToObjectHash(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v2 = [v1 intValue];
  }
  else {
    int v2 = [v1 connectionIdentifier];
  }
  int v3 = v2;

  return v3;
}

uint64_t TI::CP::ShapeRecord::ShapeRecord(uint64_t a1, long long *a2, const std::vector<unsigned int> *a3, int a4)
{
  int v7 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 120) = a4;
  std::vector<TI::CP::PathSample>::vector(v12, (uint64_t)a3);
  std::vector<unsigned int>::vector(&v13, a3 + 1);
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v9 = (const std::string *)TI::CP::PathEncoder::encode_path((TI::CP::PathEncoder *)v12);
  std::string::operator=((std::string *)(a1 + 80), v9);
  std::vector<unsigned int>::pointer begin = a3->__begin_;
  *(_DWORD *)(a1 + 104) = -1431655765 * ((unint64_t)((char *)a3->__end_ - (char *)a3->__begin_) >> 4);
  *(void *)(a1 + 112) = *((void *)begin + 2);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  return a1;
}

void *std::vector<TI::CP::PathSample>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  id v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<TI::CP::PathSample>::__vallocate[abi:nn180100](a1, 0xAAAAAAAAAAAAAAABLL * (v5 >> 4));
    int v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

BOOL TI::CP::ShapeStore::attempt_database_migration(sqlite3 **this)
{
  v31[19] = *MEMORY[0x1E4F143B8];
  int v2 = *this;
  ppStmt = 0;
  if (!sqlite3_prepare_v2(v2, "SELECT value FROM properties WHERE kedouble y = 'version'", -1, &ppStmt, 0))
  {
    if (sqlite3_step(ppStmt) == 100)
    {
      int v3 = sqlite3_column_int(ppStmt, 0);
      sqlite3_finalize(ppStmt);
      if (v3)
      {
        BOOL v4 = 1;
LABEL_15:
        if (v3 != 2)
        {
          BOOL v14 = *this;
          file_path_for_bundle_resource = get_file_path_for_bundle_resource(@"shape_store_schema_migration", @"sql");
          if (!file_path_for_bundle_resource) {
            return 0;
          }
          uint64_t v16 = file_path_for_bundle_resource;
          uint64_t v17 = (sqlite3_stmt *)(MEMORY[0x1E4FBA460] + 24);
          uint64_t v18 = MEMORY[0x1E4FBA460] + 64;
          v31[0] = MEMORY[0x1E4FBA460] + 64;
          uint64_t v19 = MEMORY[0x1E4FBA3F8];
          uint64_t v20 = *(sqlite3_stmt **)(MEMORY[0x1E4FBA3F8] + 16);
          ppStmt = *(sqlite3_stmt **)(MEMORY[0x1E4FBA3F8] + 8);
          *(sqlite3_stmt **)((char *)&ppStmt + *((void *)ppStmt - 3)) = v20;
          uint64_t v29 = 0;
          uint64_t v21 = (std::ios_base *)((char *)&ppStmt + *((void *)ppStmt - 3));
          std::ios_base::init(v21, v30);
          v21[1].__vftable = 0;
          v21[1].__fmtflags_ = -1;
          ppStmt = v17;
          v31[0] = v18;
          MEMORY[0x1E4E7B9A0](v30);
          if (!std::filebuf::open()) {
            std::ios_base::clear((std::ios_base *)((char *)&ppStmt + *((void *)ppStmt - 3)), *(_DWORD *)&v30[*((void *)ppStmt - 3) + 16] | 4);
          }
          std::string::__init_with_sentinel[abi:nn180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, *(void **)&v30[*((void *)ppStmt - 3) + 24]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v23 = sqlite3_exec(v14, (const char *)p_p, 0, 0, 0);
          free(v16);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          ppStmt = *(sqlite3_stmt **)v19;
          *(sqlite3_stmt **)((char *)&ppStmt + *((void *)ppStmt - 3)) = *(sqlite3_stmt **)(v19 + 24);
          MEMORY[0x1E4E7B9B0](v30);
          std::istream::~istream();
          MEMORY[0x1E4E7BBB0](v31);
          if (v23) {
            return 0;
          }
          uint64_t v25 = *this;
          ppStmt = 0;
          int v26 = sqlite3_prepare_v2(v25, "INSERT OR REPLACE INTO properties (key, value) VALUES ('version', ?)", -1, &ppStmt, 0);
          BOOL v4 = v26 == 0;
          if (v26)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              LOWORD(__p.__r_.__value_.__l.__data_) = 0;
              _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "CPShapeStore: Unable to update library version.", (uint8_t *)&__p, 2u);
            }
          }
          else
          {
            sqlite3_bind_int(ppStmt, 1, 2);
            sqlite3_step(ppStmt);
            sqlite3_finalize(ppStmt);
          }
        }
        return v4;
      }
    }
    else
    {
      sqlite3_finalize(ppStmt);
    }
  }
  int64_t v5 = *this;
  int v6 = get_file_path_for_bundle_resource(@"shape_store_schema", @"sql");
  if (!v6) {
    return 0;
  }
  int v7 = v6;
  long long v8 = (sqlite3_stmt *)(MEMORY[0x1E4FBA460] + 24);
  uint64_t v9 = MEMORY[0x1E4FBA460] + 64;
  v31[0] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v10 = MEMORY[0x1E4FBA3F8];
  char v11 = *(sqlite3_stmt **)(MEMORY[0x1E4FBA3F8] + 16);
  ppStmt = *(sqlite3_stmt **)(MEMORY[0x1E4FBA3F8] + 8);
  *(sqlite3_stmt **)((char *)&ppStmt + *((void *)ppStmt - 3)) = v11;
  uint64_t v29 = 0;
  uint64_t v12 = (std::ios_base *)((char *)&ppStmt + *((void *)ppStmt - 3));
  std::ios_base::init(v12, v30);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  ppStmt = v8;
  v31[0] = v9;
  MEMORY[0x1E4E7B9A0](v30);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)&ppStmt + *((void *)ppStmt - 3)), *(_DWORD *)&v30[*((void *)ppStmt - 3) + 16] | 4);
  }
  std::string::__init_with_sentinel[abi:nn180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, *(void **)&v30[*((void *)ppStmt - 3) + 24]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::vector<unsigned int> v13 = &__p;
  }
  else {
    std::vector<unsigned int> v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  BOOL v4 = sqlite3_exec(v5, (const char *)v13, 0, 0, 0) == 0;
  free(v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ppStmt = *(sqlite3_stmt **)v10;
  *(sqlite3_stmt **)((char *)&ppStmt + *((void *)ppStmt - 3)) = *(sqlite3_stmt **)(v10 + 24);
  MEMORY[0x1E4E7B9B0](v30);
  std::istream::~istream();
  MEMORY[0x1E4E7BBB0](v31);
  int v3 = 0;
  if (v4) {
    goto LABEL_15;
  }
  return v4;
}

uint64_t TI::CP::ShapeStore::ShapeStore(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a2;
  BOOL v4 = *(const void **)(a2 + 8);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    CFRetain(v4);
    *(void *)(a1 + 40) = v4;
  }
  int64_t v5 = *(const void **)(a2 + 16);
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    CFRetain(v5);
    *(void *)(a1 + 48) = v5;
  }
  *(unsigned char *)(a1 + 64) = 0;
  CFURLRef v6 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFURLRef *)(a2 + 8), *(CFStringRef *)(a2 + 16), 0);
  CFStringRef v7 = CFURLCopyFileSystemPath(v6, kCFURLPOSIXPathStyle);
  if (v6) {
    CFRelease(v6);
  }
  CFIndex MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(v7);
  uint64_t v9 = (char *)malloc_type_malloc(MaximumSizeOfFileSystemRepresentation, 0x8BFE11FuLL);
  if (!CFStringGetFileSystemRepresentation(v7, v9, MaximumSizeOfFileSystemRepresentation) && v9)
  {
    MEMORY[0x1E4E7BC20](v9, 0x1000C4077774924);
    uint64_t v9 = 0;
  }
  if (v7) {
    CFRelease(v7);
  }
  TI::CP::ShapeStore::create_store_at_path((sqlite3 **)a1, v9);
  if (v9) {
    MEMORY[0x1E4E7BC20](v9, 0x1000C4077774924);
  }
  return a1;
}

{
  const char *v4;

  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(_DWORD *)(a1 + 32) = 1050253722;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = @"shapestore.db";
  CFRetain(@"shapestore.db");
  *(void *)(a1 + 48) = @"shapestore.db";
  *(unsigned char *)(a1 + 64) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    BOOL v4 = (const char *)a2;
  }
  else {
    BOOL v4 = *(const char **)a2;
  }
  TI::CP::ShapeStore::create_store_at_path((sqlite3 **)a1, v4);
  return a1;
}

uint64_t TI::CP::ShapeStore::create_store_at_path(sqlite3 **this, const char *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)TI_DEVICE_UNLOCKED_SINCE_BOOT();
  if (result)
  {
    ppDb = 0;
    if (sqlite3_open_v2(a2, &ppDb, 3145734, 0))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        CFStringRef v7 = a2;
        _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "CPShapeStore: Error creating/opening database at: %s", buf, 0xCu);
      }
      return sqlite3_close(ppDb);
    }
    uint64_t result = TI_IS_FILE_CLASS_C((uint64_t)a2);
    if ((result & 1) == 0)
    {
      uint64_t result = TI_SET_PROTECTION_CLASS_C((uint64_t)a2);
      if ((result & 1) == 0) {
        return sqlite3_close(ppDb);
      }
    }
    if (ppDb)
    {
      *this = ppDb;
      return TI::CP::ShapeStore::attempt_database_migration(this);
    }
  }
  return result;
}

void TI::CP::ShapeStore::~ShapeStore(char **this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  TI::CP::ShapeStore::clear_statement_cache((TI::CP::ShapeStore *)this);
  int v2 = sqlite3_close((sqlite3 *)*this);
  if (v2)
  {
    int v3 = v2;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = v3;
      _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "CPShapeStore: Error closing database: %d", (uint8_t *)v6, 8u);
    }
  }
  BOOL v4 = this[6];
  if (v4) {
    CFRelease(v4);
  }
  this[6] = 0;
  int64_t v5 = this[5];
  if (v5) {
    CFRelease(v5);
  }
  this[5] = 0;
  std::__tree<std::__value_type<std::string,sqlite3_stmt *>,std::__map_value_compare<std::string,std::__value_type<std::string,sqlite3_stmt *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sqlite3_stmt *>>>::destroy(this[2]);
}

void TI::CP::ShapeStore::clear_statement_cache(TI::CP::ShapeStore *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v2 = (void *)*((void *)this + 1);
  int v3 = (char *)this + 16;
  if (v2 != (void *)((char *)this + 16))
  {
    BOOL v4 = MEMORY[0x1E4F14500];
    do
    {
      if (*((char *)v2 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v10, (const std::string::value_type *)v2[4], v2[5]);
      }
      else {
        std::string v10 = *(std::string *)(v2 + 4);
      }
      int v5 = sqlite3_finalize((sqlite3_stmt *)v2[7]);
      if (v5)
      {
        int v6 = v5;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          int v12 = v6;
          _os_log_error_impl(&dword_1E3F0E000, v4, OS_LOG_TYPE_ERROR, "CPShapeStore: Error finalizing statement: %d", buf, 8u);
        }
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = (char *)v2[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)v2[2];
          BOOL v9 = *(void *)v8 == (void)v2;
          int v2 = v8;
        }
        while (!v9);
      }
      int v2 = v8;
    }
    while (v8 != v3);
  }
  std::__tree<std::__value_type<std::string,sqlite3_stmt *>,std::__map_value_compare<std::string,std::__value_type<std::string,sqlite3_stmt *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sqlite3_stmt *>>>::destroy(*((char **)this + 2));
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = v3;
}

void std::__tree<std::__value_type<std::string,sqlite3_stmt *>,std::__map_value_compare<std::string,std::__value_type<std::string,sqlite3_stmt *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sqlite3_stmt *>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,sqlite3_stmt *>,std::__map_value_compare<std::string,std::__value_type<std::string,sqlite3_stmt *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sqlite3_stmt *>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,sqlite3_stmt *>,std::__map_value_compare<std::string,std::__value_type<std::string,sqlite3_stmt *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sqlite3_stmt *>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

sqlite3_stmt *TI::CP::ShapeStore::cached_statement_for_query(uint64_t a1, char *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  ppStmt = 0;
  BOOL v4 = (uint64_t **)(a1 + 16);
  int v5 = *(void **)(a1 + 16);
  if (!v5) {
    goto LABEL_12;
  }
  int v6 = (uint64_t **)(a1 + 16);
  do
  {
    char v7 = std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v5 + 4, a2);
    if (v7 >= 0) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v5 + 1;
    }
    if (v7 >= 0) {
      int v6 = (uint64_t **)v5;
    }
    int v5 = (void *)*v8;
  }
  while (*v8);
  if (v6 != v4
    && (std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4) & 0x80) == 0)
  {
    return (sqlite3_stmt *)v6[7];
  }
LABEL_12:
  BOOL v9 = a2;
  if (a2[23] < 0) {
    BOOL v9 = *(const char **)a2;
  }
  int v10 = sqlite3_prepare_v2(*(sqlite3 **)a1, v9, -1, &ppStmt, 0);
  char v11 = ppStmt;
  if (!ppStmt || v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      if (a2[23] < 0) {
        a2 = *(char **)a2;
      }
      uint64_t v17 = sqlite3_errmsg(*(sqlite3 **)a1);
      *(_DWORD *)buf = 136315394;
      int v23 = a2;
      __int16 v24 = 2080;
      uint64_t v25 = v17;
      _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "CPShapeStore: Error preparing statement: %s. ERROR: %s", buf, 0x16u);
    }
  }
  else
  {
    while (1)
    {
      int v12 = *v4;
      uint64_t v13 = v4;
      if (!*v4) {
        break;
      }
      while (1)
      {
        BOOL v4 = (uint64_t **)v12;
        BOOL v14 = v12 + 4;
        if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v12 + 4) & 0x80) != 0) {
          break;
        }
        if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v14, a2) & 0x80) == 0)
        {
          uint64_t v15 = v4;
          goto LABEL_31;
        }
        uint64_t v13 = v4 + 1;
        int v12 = v4[1];
        if (!v12) {
          goto LABEL_20;
        }
      }
    }
LABEL_20:
    uint64_t v15 = operator new(0x40uLL);
    uint64_t v16 = (std::string *)(v15 + 4);
    if (a2[23] < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v15[6] = *((void *)a2 + 2);
    }
    v15[7] = 0;
    *uint64_t v15 = 0;
    v15[1] = 0;
    v15[2] = v4;
    *uint64_t v13 = v15;
    uint64_t v18 = **(void **)(a1 + 8);
    uint64_t v19 = v15;
    if (v18)
    {
      *(void *)(a1 + 8) = v18;
      uint64_t v19 = *v13;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v19);
    ++*(void *)(a1 + 24);
LABEL_31:
    v15[7] = v11;
  }
  return ppStmt;
}

BOOL TI::CP::ShapeStore::store_shape(uint64_t a1, uint64_t *a2, const std::vector<unsigned int> *a3)
{
  std::vector<TI::CP::PathSample>::vector(v9, (uint64_t)a3);
  std::vector<unsigned int>::vector(&v10, a3 + 1);
  std::string __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v6 = TI::CP::PathEncoder::encode_path((TI::CP::PathEncoder *)v9);
  BOOL v7 = TI::CP::ShapeStore::store_shape(a1, a2, (const void **)v6, -1431655765 * ((unint64_t)((char *)a3->__end_ - (char *)a3->__begin_) >> 4), *((double *)a3->__begin_ + 2));
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  return v7;
}

BOOL TI::CP::ShapeStore::store_shape(uint64_t a1, uint64_t *a2, const void **a3, int a4, double a5)
{
  std::string::basic_string[abi:nn180100]<0>(v29, "INSERT INTO shapes (size, word_id, string_representation, shape_data, timestamp) VALUES (:size, :word_id, :string_representation, :shape_data, :timestamp)");
  std::vector<unsigned int> v10 = TI::CP::ShapeStore::cached_statement_for_query(a1, (char *)v29);
  char v11 = v10;
  if (v30 < 0)
  {
    operator delete(v29[0]);
    if (v11) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!v10) {
    return 0;
  }
LABEL_3:
  int v12 = sqlite3_bind_parameter_index(v11, ":size");
  sqlite3_bind_int(v11, v12, a4);
  int v13 = sqlite3_bind_parameter_index(v11, ":word_id");
  sqlite3_bind_int(v11, v13, 0);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v28 = 0;
  int v14 = *((char *)a2 + 23);
  if (v14 >= 0) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = (uint64_t *)*a2;
  }
  if (v14 >= 0) {
    uint64_t v16 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v16 = a2[1];
  }
  uint64_t v17 = __p;
  if (v16)
  {
    for (uint64_t i = 0; i != v16; ++i)
      *((unsigned char *)__p + i) = __tolower(*((char *)v15 + i));
    if (v28 >= 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
  }
  int v19 = sqlite3_bind_parameter_index(v11, ":string_representation");
  sqlite3_bind_text(v11, v19, (const char *)v17, -1, 0);
  int v20 = sqlite3_bind_parameter_index(v11, ":shape_data");
  char v21 = *((unsigned char *)a3 + 23);
  if (v21 >= 0) {
    unint64_t v22 = a3;
  }
  else {
    unint64_t v22 = *a3;
  }
  if (v21 >= 0) {
    int v23 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    int v23 = *((_DWORD *)a3 + 2);
  }
  sqlite3_bind_blob(v11, v20, v22, v23, 0);
  int v24 = sqlite3_bind_parameter_index(v11, ":timestamp");
  sqlite3_bind_double(v11, v24, a5);
  BOOL v25 = sqlite3_step(v11) == 0;
  sqlite3_reset(v11);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  return v25;
}

BOOL TI::CP::ShapeStore::store_shape(uint64_t a1, uint64_t a2)
{
  return TI::CP::ShapeStore::store_shape(a1, (uint64_t *)(a2 + 8), (const void **)(a2 + 80), *(_DWORD *)(a2 + 104), *(double *)(a2 + 112));
}

void TI::CP::ShapeStore::recall_shapes(TI::CP::ShapeStore *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v6 = this;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (*((unsigned char *)this + 64)) {
    BOOL v7 = "SELECT ROWID, string_representation, shape_data, ratifications, rejections, origin_type FROM shapes WHERE size "
  }
         ">= ? AND size < ? AND timestamp < ?";
  else {
    BOOL v7 = "SELECT ROWID, string_representation, shape_data, ratifications, rejections, origin_type FROM shapes WHERE size "
  }
         ">= ? AND size < ?";
  std::string::basic_string[abi:nn180100]<0>(v56, v7);
  uint64_t v8 = TI::CP::ShapeStore::cached_statement_for_query((uint64_t)v6, (char *)v56);
  BOOL v9 = v8;
  if ((v57 & 0x80000000) == 0)
  {
    if (!v8) {
      goto LABEL_54;
    }
    goto LABEL_8;
  }
  operator delete(v56[0]);
  if (v9)
  {
LABEL_8:
    sqlite3_bind_int(v9, 1, a2);
    sqlite3_bind_int(v9, 2, a3);
    if (*((unsigned char *)v6 + 64)) {
      sqlite3_bind_double(v9, 3, *((double *)v6 + 7));
    }
    unint64_t v32 = v6;
    while (1)
    {
      do
      {
        if (sqlite3_step(v9) != 100)
        {
          sqlite3_reset(v9);
          int v6 = v32;
          goto LABEL_54;
        }
        int v10 = sqlite3_column_int(v9, 0);
        char v11 = (char *)sqlite3_column_text(v9, 1);
        int v12 = sqlite3_column_blob(v9, 2);
        int v13 = sqlite3_column_bytes(v9, 2);
        int v14 = sqlite3_column_int(v9, 3);
        int v15 = sqlite3_column_int(v9, 4);
        int v16 = sqlite3_column_int(v9, 5);
      }
      while (!*v11 || !v12);
      int v17 = v16;
      std::string::basic_string[abi:nn180100]<0>(&__str, v11);
      if (v13 < 0) {
        goto LABEL_55;
      }
      std::string::size_type v18 = v13;
      if (v13 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
      p_dst = &__dst;
      if (v13) {
        goto LABEL_21;
      }
LABEL_22:
      p_dst->__r_.__value_.__s.__data_[v18] = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v50 = 0u;
      int v22 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v53, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v53 = __dst;
      }
      TI::CP::PathEncoder::decode_path((TI::CP::PathEncoder *)&v50);
      int v44 = 0;
      unint64_t v45 = 0;
      char v46 = 0;
      int v23 = (const void *)v50;
      int64_t v24 = *((void *)&v50 + 1) - v50;
      if (*((void *)&v50 + 1) != (void)v50)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v24 >> 4) >= 0x555555555555556) {
          goto LABEL_55;
        }
        int v25 = v22;
        uint64_t v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TI::CP::PathSample>>(0xAAAAAAAAAAAAAAABLL * (v24 >> 4));
        int v44 = v26;
        unint64_t v45 = v26;
        char v46 = &v26[48 * v27];
        memmove(v26, v23, v24);
        unint64_t v45 = &v26[16 * (v24 >> 4)];
        int v22 = v25;
      }
      unint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v28 = (const void *)*((void *)&v51 + 1);
      int64_t v29 = v52 - *((void *)&v51 + 1);
      if ((void)v52 != *((void *)&v51 + 1))
      {
        if ((uint64_t)(v52 - *((void *)&v51 + 1)) < 0) {
LABEL_55:
        }
          abort();
        char v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v29 >> 2);
        unint64_t v47 = v30;
        uint64_t v48 = v30;
        uint64_t v49 = &v30[4 * v31];
        memmove(v30, v28, v29);
        uint64_t v48 = &v30[v29];
      }
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      int v34 = v10;
      TI::CP::Path::operator=((char **)&v36 + 1, (const void **)&v44);
      std::string::operator=((std::string *)&v35, &__str);
      int v42 = v14;
      int v43 = v15;
      int v41 = v17;
      std::vector<TI::CP::ShapeRecord>::push_back[abi:nn180100](a4, (uint64_t)&v34);
      if (SHIBYTE(v40) < 0) {
        operator delete(*((void **)&v39 + 1));
      }
      if ((void)v38)
      {
        *((void *)&v38 + 1) = v38;
        operator delete((void *)v38);
      }
      if (*((void *)&v36 + 1))
      {
        *(void *)&long long v37 = *((void *)&v36 + 1);
        operator delete(*((void **)&v36 + 1));
      }
      if (SBYTE7(v36) < 0) {
        operator delete((void *)v35);
      }
      if (v47)
      {
        uint64_t v48 = (char *)v47;
        operator delete(v47);
      }
      if (v44)
      {
        unint64_t v45 = (char *)v44;
        operator delete(v44);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v51 + 1))
      {
        *(void *)&long long v52 = *((void *)&v51 + 1);
        operator delete(*((void **)&v51 + 1));
      }
      if ((void)v50)
      {
        *((void *)&v50 + 1) = v50;
        operator delete((void *)v50);
      }
      if (v22 < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v20 = v13 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_dst = (std::string *)operator new(v20 + 1);
    __dst.__r_.__value_.__l.__size_ = v18;
    __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_21:
    memmove(p_dst, v12, v18);
    goto LABEL_22;
  }
LABEL_54:
  *((unsigned char *)v6 + 64) = 0;
}

char **TI::CP::Path::operator=(char **a1, const void **a2)
{
  if (a1 != (char **)a2)
  {
    BOOL v4 = (char *)*a2;
    int v5 = (char *)a2[1];
    int64_t v6 = v5 - (unsigned char *)*a2;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    uint64_t v8 = (uint64_t)a1[2];
    BOOL v9 = *a1;
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 4) >= v7)
    {
      int v13 = a1[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - v9) >> 4) < v7)
      {
        int v14 = &v4[16 * ((v13 - v9) >> 4)];
        if (v13 != v9)
        {
          memmove(*a1, *a2, v13 - v9);
          BOOL v9 = a1[1];
        }
        int64_t v6 = v5 - v14;
        if (v5 == v14) {
          goto LABEL_20;
        }
        int v15 = v9;
        int v16 = v14;
        goto LABEL_19;
      }
    }
    else
    {
      if (v9)
      {
        a1[1] = v9;
        operator delete(v9);
        uint64_t v8 = 0;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      if (v7 > 0x555555555555555) {
        abort();
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
      uint64_t v11 = 2 * v10;
      if (2 * v10 <= v7) {
        uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
      }
      if (v10 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v12 = 0x555555555555555;
      }
      else {
        unint64_t v12 = v11;
      }
      std::vector<TI::CP::PathSample>::__vallocate[abi:nn180100](a1, v12);
      BOOL v9 = a1[1];
    }
    if (v5 == v4)
    {
LABEL_20:
      a1[1] = &v9[v6];
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((char *)a1 + 24, (char *)a2[3], (uint64_t)a2[4], ((unsigned char *)a2[4] - (unsigned char *)a2[3]) >> 2);
      return a1;
    }
    int v15 = v9;
    int v16 = v4;
LABEL_19:
    memmove(v15, v16, v6);
    goto LABEL_20;
  }
  return a1;
}

void std::vector<TI::CP::ShapeRecord>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 < v5)
  {
    uint64_t v6 = std::construct_at[abi:nn180100]<TI::CP::ShapeRecord,TI::CP::ShapeRecord const&,TI::CP::ShapeRecord*>(v4, a2)
       + 136;
    goto LABEL_21;
  }
  unint64_t v7 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - *a1) >> 3);
  if (v7 + 1 > 0x1E1E1E1E1E1E1E1) {
    abort();
  }
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - *a1) >> 3);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= v7 + 1) {
    uint64_t v9 = v7 + 1;
  }
  if (v8 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v10 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10)
  {
    if (v10 > 0x1E1E1E1E1E1E1E1) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v11 = (char *)operator new(136 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  unint64_t v12 = &v11[136 * v10];
  uint64_t v13 = std::construct_at[abi:nn180100]<TI::CP::ShapeRecord,TI::CP::ShapeRecord const&,TI::CP::ShapeRecord*>((uint64_t)&v11[136 * v7], a2);
  uint64_t v6 = v13 + 136;
  int v14 = (char *)*a1;
  int v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v13;
    a1[1] = v6;
    a1[2] = (uint64_t)v12;
    if (!v15) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v16 = 0;
  do
  {
    int v17 = &v15[v16];
    uint64_t v18 = v13 + v16;
    *(_DWORD *)(v18 - 136) = *(_DWORD *)&v15[v16 - 136];
    long long v19 = *(_OWORD *)&v15[v16 - 128];
    *(void *)(v18 - 112) = *(void *)&v15[v16 - 112];
    *(_OWORD *)(v18 - 128) = v19;
    *((void *)v17 - 15) = 0;
    *((void *)v17 - 14) = 0;
    *((void *)v17 - 16) = 0;
    *(void *)(v18 - 104) = 0;
    *(void *)(v18 - 96) = 0;
    *(void *)(v18 - 88) = 0;
    *(_OWORD *)(v18 - 104) = *(_OWORD *)&v15[v16 - 104];
    *(void *)(v18 - 88) = *(void *)&v15[v16 - 88];
    *((void *)v17 - 13) = 0;
    *((void *)v17 - 12) = 0;
    *((void *)v17 - 11) = 0;
    *(void *)(v18 - 80) = 0;
    *(void *)(v18 - 72) = 0;
    *(void *)(v18 - 64) = 0;
    *(_OWORD *)(v18 - 80) = *(_OWORD *)&v15[v16 - 80];
    *(void *)(v18 - 64) = *(void *)&v15[v16 - 64];
    *((void *)v17 - 10) = 0;
    *((void *)v17 - 9) = 0;
    long long v20 = *(_OWORD *)&v15[v16 - 56];
    uint64_t v21 = *(void *)&v15[v16 - 40];
    *((void *)v17 - 8) = 0;
    *(void *)(v18 - 40) = v21;
    *(_OWORD *)(v18 - 56) = v20;
    *((void *)v17 - 6) = 0;
    *((void *)v17 - 5) = 0;
    *((void *)v17 - 7) = 0;
    long long v22 = *(_OWORD *)&v15[v16 - 32];
    *(_OWORD *)(v18 - 20) = *(_OWORD *)&v15[v16 - 20];
    *(_OWORD *)(v18 - 32) = v22;
    v16 -= 136;
  }
  while (&v15[v16] != v14);
  int v23 = (char *)*a1;
  int v15 = (char *)a1[1];
  *a1 = v13 + v16;
  a1[1] = v6;
  a1[2] = (uint64_t)v12;
  if (v15 != v23)
  {
    do
    {
      v15 -= 136;
      std::__destroy_at[abi:nn180100]<TI::CP::ShapeRecord,0>((uint64_t)v15);
    }
    while (v15 != v23);
    int v15 = v23;
  }
  if (v15) {
LABEL_20:
  }
    operator delete(v15);
LABEL_21:
  a1[1] = v6;
}

uint64_t std::construct_at[abi:nn180100]<TI::CP::ShapeRecord,TI::CP::ShapeRecord const&,TI::CP::ShapeRecord*>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  unint64_t v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  std::vector<TI::CP::PathSample>::vector((void *)(a1 + 32), a2 + 32);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)(a1 + 56), (const std::vector<unsigned int> *)(a2 + 56));
  uint64_t v6 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  long long v8 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 116) = *(_OWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 104) = v8;
  return a1;
}

void std::__destroy_at[abi:nn180100]<TI::CP::ShapeRecord,0>(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  int v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    unint64_t v4 = *(void **)(a1 + 8);
    operator delete(v4);
  }
}

BOOL TI::CP::ShapeStore::increment_row_with_column_name(uint64_t a1, const char *a2, int a3)
{
  unint64_t v4 = a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2[23] < 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  else {
    uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  size_t v7 = 2 * v6 + 45;
  std::string::basic_string[abi:nn180100](&__p, v7, 32);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v4[23] < 0) {
    unint64_t v4 = *(const char **)v4;
  }
  snprintf((char *)p_p, v7, "UPDATE shapes SET %s = %s + 1 WHERE ROWID = ?", v4, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = __p;
  }
  uint64_t v9 = TI::CP::ShapeStore::cached_statement_for_query(a1, (char *)&v14);
  unint64_t v10 = v9;
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9) {
      goto LABEL_14;
    }
LABEL_19:
    BOOL v12 = 1;
    goto LABEL_20;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if (!v10) {
    goto LABEL_19;
  }
LABEL_14:
  sqlite3_bind_int(v10, 1, a3);
  int v11 = sqlite3_step(v10);
  BOOL v12 = v11 != 1;
  if (v11 == 1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    int v17 = a3;
    _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "CPShapeStore: Unable to modify usage count for ROWID = %d", buf, 8u);
  }
  sqlite3_reset(v10);
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v12;
}

void TI::CP::ShapeStore::increment_shape_usage_count(TI::CP::ShapeStore *this, int a2)
{
  std::string::basic_string[abi:nn180100]<0>(__p, "ratifications");
  TI::CP::ShapeStore::increment_row_with_column_name((uint64_t)this, (const char *)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void TI::CP::ShapeStore::increment_shape_penalty_count(TI::CP::ShapeStore *this, int a2)
{
  std::string::basic_string[abi:nn180100]<0>(__p, "rejections");
  TI::CP::ShapeStore::increment_row_with_column_name((uint64_t)this, (const char *)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

BOOL TI::CP::ShapeStore::reset_database(sqlite3 **this)
{
  return sqlite3_exec(*this, "DELETE FROM shapes;", 0, 0, 0) == 0;
}

uint64_t TI::CP::ShapeStore::num_records(sqlite3 **this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  ppStmt = 0;
  if (sqlite3_prepare_v2(*this, "SELECT COUNT(*) FROM shapes;", -1, &ppStmt, 0)) {
    return 0;
  }
  if (sqlite3_step(ppStmt) == 1)
  {
    if (TICanLogMessageAtLevel_onceToken != -1) {
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
    }
    int v3 = TIOSLogFacility();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      char v5 = sqlite3_errmsg(*this);
      *(_DWORD *)buf = 136315394;
      long long v8 = "num_records";
      __int16 v9 = 2080;
      unint64_t v10 = v5;
      _os_log_debug_impl(&dword_1E3F0E000, v3, OS_LOG_TYPE_DEBUG, "%s couldn't read # of records %s", buf, 0x16u);
    }
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = sqlite3_column_int(ppStmt, 0);
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

BOOL TI::CP::ShapeStore::remove_shapes_older_than(sqlite3 **this, double a2)
{
  std::string::basic_string[abi:nn180100]<0>(&v10, "DELETE From shapes WHERE timestamp <= ");
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v10, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v10;
  }
  else {
    uint64_t v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  int v7 = sqlite3_exec(*this, (const char *)v6, 0, 0, 0);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return v7 == 0;
}

uint64_t TI::CP::ShapeStore::shape_count_for_word(sqlite3 **a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&v13, "SELECT COUNT(*) FROM shapes WHERE string_representation LIKE '");
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    char v5 = (const std::string::value_type *)a2;
  }
  else {
    char v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  std::string::append(&v13, v5, v6);
  std::string::append(&v13, "';", 2uLL);
  pStmt = 0;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = &v13;
  }
  else {
    int v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (sqlite3_prepare_v2(*a1, (const char *)v7, -1, &pStmt, 0))
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (sqlite3_step(pStmt) == 1)
    {
      if (TICanLogMessageAtLevel_onceToken != -1) {
        dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
      }
      __int16 v9 = TIOSLogFacility();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = sqlite3_errmsg(*a1);
        *(_DWORD *)buf = 136315394;
        int v15 = "shape_count_for_word";
        __int16 v16 = 2080;
        int v17 = v11;
        _os_log_debug_impl(&dword_1E3F0E000, v9, OS_LOG_TYPE_DEBUG, "%s couldn't read # of records %s", buf, 0x16u);
      }
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = sqlite3_column_int(pStmt, 0);
    }
    sqlite3_finalize(pStmt);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v8;
}

uint64_t __Block_byref_object_copy__8191(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8192(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__8337(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8338(uint64_t a1)
{
}

void ___getSystemActiveInputModes_block_invoke(uint64_t a1)
{
  id v5 = [MEMORY[0x1E4FAE2D8] sharedInputModeController];
  uint64_t v2 = [v5 enabledInputModeIdentifiers];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___getCurrentValueFromPreferenceController_block_invoke(uint64_t a1)
{
  id v5 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  uint64_t v2 = [v5 valueForPreferenceKey:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id _getPreferenceAnalyzedAtDateForKeyInDomain(uint64_t a1, void *a2)
{
  uint64_t v3 = NSString;
  int v4 = a2;
  id v5 = [v3 stringWithFormat:@"%@_analyzedAt", a1];
  std::string::size_type v6 = (void *)CFPreferencesCopyAppValue(v5, v4);

  return v6;
}

BOOL _propertyAnalyzedInPastDay(void *a1, uint64_t a2)
{
  uint64_t v2 = _getPreferenceAnalyzedAtDateForKeyInDomain(a2, a1);
  if (v2)
  {
    uint64_t v3 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceNow:-86400.0];
    int v4 = [v2 earlierDate:v3];
    BOOL v5 = v4 != v2;
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

void _HandleUserNotificationCallBack(uint64_t a1, unint64_t a2)
{
  if (sNotification == a1)
  {
    if (a2 > 2) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = qword_1E4155A08[a2];
    }
    (*(void (**)(uint64_t, uint64_t))(sCompletionHandler + 16))(sCompletionHandler, v2);
    if (sNotification)
    {
      CFUserNotificationCancel((CFUserNotificationRef)sNotification);
      CFRelease((CFTypeRef)sNotification);
      sNotification = 0;
    }
    uint64_t v3 = (void *)sCompletionHandler;
    sCompletionHandler = 0;
  }
  else
  {
    NSLog(&cfstr_UnexpectedNoti.isa);
  }
}

void *__getMKBGetDeviceLockStateSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!MobileKeyBagLibraryCore_frameworkLibrary)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = __MobileKeyBagLibraryCore_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E6E2B408;
    uint64_t v7 = 0;
    MobileKeyBagLibraryCore_frameworkLibrardouble y = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)MobileKeyBagLibraryCore_frameworkLibrary;
    if (MobileKeyBagLibraryCore_frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)MobileKeyBagLibraryCore_frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "MKBGetDeviceLockState");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKBGetDeviceLockStateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MobileKeyBagLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MobileKeyBagLibraryCore_frameworkLibrardouble y = result;
  return result;
}

void __TIGetTypologyEnabledByProfileValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"TypologyEnabledByProfile" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

uint64_t KB::String::String(uint64_t this)
{
  *(_DWORD *)this = 0x100000;
  *(_WORD *)(this + 4) = 0;
  *(unsigned char *)(this + 6) = 0;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = 0;
  return this;
}

{
  *(_DWORD *)this = 0x100000;
  *(_WORD *)(this + 4) = 0;
  *(unsigned char *)(this + 6) = 0;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = 0;
  return this;
}

uint64_t KB::String::String(uint64_t this, unsigned int a2)
{
  *(_DWORD *)(this + 2) = 16;
  *(unsigned char *)(this + 6) = 1;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        unsigned int v3 = (a2 >> 18) | 0xFFFFFFF0;
        *(unsigned char *)(this + 17) = (a2 >> 12) & 0x3F | 0x80;
        unsigned int v4 = 2;
      }
      else
      {
        unsigned int v3 = (a2 >> 12) | 0xFFFFFFE0;
        unsigned int v4 = 1;
      }
      *(unsigned char *)(this + 16) = v3;
      unsigned int v2 = v4 + 1;
      *(unsigned char *)(this + 16 + v4) = (a2 >> 6) & 0x3F | 0x80;
    }
    else
    {
      *(unsigned char *)(this + 16) = (a2 >> 6) | 0xC0;
      unsigned int v2 = 1;
    }
    *(_WORD *)this = v2 + 1;
    *(unsigned char *)(this + 16 + v2) = a2 & 0x3F | 0x80;
    *(unsigned char *)(this + 16 + v2 + 1) = 0;
  }
  else
  {
    *(unsigned char *)(this + 16) = a2;
    *(_WORD *)this = 1;
  }
  return this;
}

void *KB::String::initialize(void *this, const char *a2, int a3, unsigned int a4)
{
  this[2] = 0;
  this[3] = 0;
  unsigned int v4 = this + 2;
  if (a2 && a4)
  {
    uint64_t v8 = this;
    KB::String::ensure_capacity((KB::String *)this, a4);
    if (v8[1]) {
      __int16 v9 = (void *)v8[1];
    }
    else {
      __int16 v9 = v4;
    }
    this = memcpy(v9, &a2[a3], a4);
    *(_WORD *)uint64_t v8 = a4;
  }
  return this;
}

void KB::String::ensure_capacity(KB::String *this, __int16 a2)
{
  unsigned __int16 v2 = a2 + 1;
  unsigned int v3 = *((unsigned __int16 *)this + 1);
  if (v3 <= (unsigned __int16)(a2 + 1))
  {
    if (!*((unsigned char *)this + 6))
    {
      KB::String::internalize_buffer((unsigned __int16 *)this);
      unsigned int v3 = *((unsigned __int16 *)this + 1);
    }
    if (v2 >= 0x7FF8u) {
      unsigned int v5 = 32760;
    }
    else {
      unsigned int v5 = v2;
    }
    unsigned __int16 v6 = v3;
    if (v3 < v5)
    {
      unsigned __int16 v6 = v3;
      do
        unsigned __int16 v6 = 2 * v6 + 16;
      while ((v6 & 0xFFFEu) < v5);
      *((_WORD *)this + 1) = v6;
    }
    if (v6 >= 0x11u)
    {
      if (*((unsigned char *)this + 6) == 1 && (uint64_t v7 = (void *)*((void *)this + 1)) != 0)
      {
        uint64_t v8 = v3;
        __int16 v9 = (char *)malloc_type_realloc(v7, v6 + 1, 0x2B419C0FuLL);
        *((void *)this + 1) = v9;
        std::string v10 = &v9[v8];
        size_t v11 = *((unsigned __int16 *)this + 1) - v8 + 1;
        bzero(v10, v11);
      }
      else
      {
        BOOL v12 = malloc_type_malloc(v6 + 1, 0x1F39E810uLL);
        *((void *)this + 1) = v12;
        bzero(v12, *((unsigned __int16 *)this + 1) + 1);
        if (*(_WORD *)this)
        {
          strlcpy(*((char **)this + 1), (const char *)this + 16, *((unsigned __int16 *)this + 1) + 1);
          *((void *)this + 2) = 0;
          *((void *)this + 3) = 0;
        }
      }
    }
  }
}

unsigned __int16 *KB::String::internalize_buffer(unsigned __int16 *this)
{
  *((unsigned char *)this + 6) = 1;
  id v1 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  size_t v2 = *this;
  *((void *)this + 2) = 0;
  unsigned int v3 = this + 8;
  *((void *)this + 3) = 0;
  if (v1) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unsigned int v5 = this;
    KB::String::ensure_capacity((KB::String *)this, v2);
    if (*((void *)v5 + 1)) {
      unsigned __int16 v6 = (unsigned __int16 *)*((void *)v5 + 1);
    }
    else {
      unsigned __int16 v6 = v3;
    }
    this = (unsigned __int16 *)memcpy(v6, v1, v2);
    *unsigned int v5 = v2;
  }
  return this;
}

KB::String *KB::String::String(KB::String *this, const char *__s)
{
  *(_DWORD *)this = 0x100000;
  *((_WORD *)this + 2) = 0;
  *((unsigned char *)this + 6) = 1;
  *((void *)this + 1) = 0;
  if (__s)
  {
    __int16 v4 = strlen(__s);
    unsigned __int16 v5 = v4;
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    if (v4)
    {
      KB::String::ensure_capacity(this, v4);
      if (*((void *)this + 1)) {
        unsigned __int16 v6 = (char *)*((void *)this + 1);
      }
      else {
        unsigned __int16 v6 = (char *)this + 16;
      }
      memcpy(v6, __s, v5);
      *(_WORD *)this = v5;
    }
  }
  else
  {
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
  }
  return this;
}

KB::String *KB::String::String(KB::String *this, char a2, char *__s, int a4, __int16 a5)
{
  unsigned __int16 v5 = a4;
  *(_WORD *)this = a4;
  *((_WORD *)this + 1) = 16;
  *((_WORD *)this + 2) = a5;
  *((unsigned char *)this + 6) = a2;
  *((void *)this + 1) = 0;
  if (a2 == 1)
  {
    if (__s && !a4)
    {
      unsigned __int16 v5 = strlen(__s);
      *(_WORD *)this = v5;
    }
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    if (__s && v5)
    {
      KB::String::ensure_capacity(this, v5);
      if (*((void *)this + 1)) {
        __int16 v9 = (char *)*((void *)this + 1);
      }
      else {
        __int16 v9 = (char *)this + 16;
      }
      memcpy(v9, __s, v5);
      *(_WORD *)this = v5;
    }
  }
  else if (!a2)
  {
    *((void *)this + 1) = __s;
    if (!a4)
    {
      if (__s) {
        __int16 v8 = strlen(__s);
      }
      else {
        __int16 v8 = 0;
      }
      *(_WORD *)this = v8;
    }
    *((unsigned char *)this + 17) = 0;
  }
  return this;
}

KB::String *KB::String::String(KB::String *this, const char *a2, unsigned int a3)
{
  *(_DWORD *)this = 0x100000;
  *((_WORD *)this + 2) = 0;
  *((unsigned char *)this + 6) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  if (a2 && a3)
  {
    KB::String::ensure_capacity(this, a3);
    if (*((void *)this + 1)) {
      unsigned __int16 v6 = (char *)*((void *)this + 1);
    }
    else {
      unsigned __int16 v6 = (char *)this + 16;
    }
    memcpy(v6, a2, a3);
    *(_WORD *)this = a3;
  }
  return this;
}

KB::String *KB::String::String(KB::String *this, const KB::String *a2)
{
  *(_DWORD *)this = 0x100000;
  *((_WORD *)this + 2) = 0;
  int v4 = *((unsigned __int8 *)a2 + 6);
  *((unsigned char *)this + 6) = v4;
  *((void *)this + 1) = 0;
  if (v4 == 1)
  {
    unsigned __int16 v6 = (char *)*((void *)a2 + 1);
    size_t v7 = *(unsigned __int16 *)a2;
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    if (v7)
    {
      if (v6) {
        __int16 v8 = v6;
      }
      else {
        __int16 v8 = (char *)a2 + 16;
      }
      KB::String::ensure_capacity(this, v7);
      if (*((void *)this + 1)) {
        __int16 v9 = (char *)*((void *)this + 1);
      }
      else {
        __int16 v9 = (char *)this + 16;
      }
      memcpy(v9, v8, v7);
      *(_WORD *)this = v7;
    }
  }
  else if (!v4)
  {
    *((void *)this + 1) = *((void *)a2 + 1);
    *(_WORD *)this = *(_WORD *)a2;
    __int16 v5 = *((_WORD *)a2 + 2);
    if (!v5)
    {
      KB::String::compute_length((unsigned __int16 *)a2);
      __int16 v5 = *((_WORD *)a2 + 2);
    }
    *((_WORD *)this + 2) = v5;
    *((unsigned char *)this + 17) = 0;
  }
  return this;
}

unsigned __int16 *KB::String::compute_length(unsigned __int16 *this)
{
  this[2] = 0;
  unsigned int v1 = *this;
  if (*this)
  {
    int v2 = 0;
    int v3 = 0;
    int v4 = (unsigned __int16 *)*((void *)this + 1);
    if (!v4) {
      int v4 = this + 8;
    }
    do
    {
      int v5 = v2 + 1;
      uint64_t v6 = *((unsigned __int8 *)v4 + (unsigned __int16)v2);
      if ((v6 + 64) <= 0x3Du)
      {
        unsigned int v7 = kb_utf8_countTrailBytes[v6];
        if (v7 + (unsigned __int16)v5 > v1) {
          unsigned int v7 = v1 - v5;
        }
        if ((_BYTE)v7)
        {
          int v8 = v2 + (v7 - 1) + 2;
          while ((*((unsigned char *)v4 + (unsigned __int16)v5) & 0xC0) == 0x80)
          {
            ++v5;
            if (!(_BYTE)--v7)
            {
              int v5 = v8;
              break;
            }
          }
        }
      }
      this[2] = ++v3;
      int v2 = v5;
    }
    while (v1 > (unsigned __int16)v5);
  }
  return this;
}

KB::String *KB::String::String(KB::String *this, const KB::String::iterator *a2, const KB::String::iterator *a3)
{
  *(_DWORD *)this = 0x100000;
  *((_WORD *)this + 2) = 0;
  *((unsigned char *)this + 6) = 1;
  *((void *)this + 1) = 0;
  uint64_t v5 = *(void *)a2;
  unsigned int v6 = KB::String::iterator::offset(a2);
  unsigned __int16 v7 = KB::String::iterator::offset(a3) - v6;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (v5) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    __int16 v9 = (const void *)(v5 + v6);
    KB::String::ensure_capacity(this, v7);
    if (*((void *)this + 1)) {
      std::string v10 = (char *)*((void *)this + 1);
    }
    else {
      std::string v10 = (char *)this + 16;
    }
    memcpy(v10, v9, v7);
    *(_WORD *)this = v7;
  }
  return this;
}

uint64_t KB::String::iterator::offset(KB::String::iterator *this)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = *((unsigned int *)this + 3);
  if (v3 <= (int)result)
  {
    unsigned int v4 = *((_DWORD *)this + 4);
    if (v4 >= 0x10000) {
      int v5 = -4;
    }
    else {
      int v5 = -3;
    }
    if (v4 - 1114112 >= 0xFFEFE000) {
      int v6 = v5;
    }
    else {
      int v6 = 0;
    }
    if (v4 >> 11 >= 0x1B) {
      int v7 = v6;
    }
    else {
      int v7 = -3;
    }
    if (v4 >= 0x800) {
      int v8 = v7;
    }
    else {
      int v8 = -2;
    }
    if (v4 >= 0x80) {
      int v9 = v8;
    }
    else {
      int v9 = -1;
    }
    return (v9 + v3);
  }
  return result;
}

uint64_t KB::String::String(uint64_t a1, KB::String *this)
{
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 6) = 0;
  *(void *)(a1 + 8) = 0;
  return KB::String::operator=(a1, this);
}

{
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 6) = 0;
  *(void *)(a1 + 8) = 0;
  return KB::String::operator=(a1, this);
}

uint64_t KB::String::operator=(uint64_t a1, KB::String *this)
{
  unsigned int v4 = *(void **)(a1 + 8);
  if (v4 && *(unsigned char *)(a1 + 6) == 1) {
    free(v4);
  }
  int v5 = *(unsigned __int16 *)this;
  *(_WORD *)a1 = v5;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)((char *)this + 2);
  *(unsigned char *)(a1 + 6) = *((unsigned char *)this + 6);
  uint64_t v6 = *((void *)this + 1);
  *(void *)(a1 + 8) = v6;
  if (!v6)
  {
    int v7 = (_OWORD *)(a1 + 16);
    if (v5) {
      *int v7 = *((_OWORD *)this + 1);
    }
    else {
      *(unsigned char *)int v7 = 0;
    }
  }
  *((void *)this + 1) = 0;
  KB::String::clear(this);
  return a1;
}

void KB::String::clear(KB::String *this)
{
  int v2 = (void *)*((void *)this + 1);
  if (v2 && *((unsigned char *)this + 6) == 1) {
    free(v2);
  }
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 6) = 1;
  *((unsigned char *)this + 16) = 0;
  *(_DWORD *)this = 0x100000;
  *((_WORD *)this + 2) = 0;
}

void KB::String::~String(KB::String *this)
{
  int v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    if (*((unsigned char *)this + 6) == 1) {
      free(v2);
    }
  }
}

{
  void *v2;

  int v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    if (*((unsigned char *)this + 6) == 1) {
      free(v2);
    }
  }
}

void *KB::String::operator=(void *a1, const char *a2)
{
  KB::String::clear((KB::String *)a1);
  if (a2)
  {
    __int16 v4 = strlen(a2);
    unsigned __int16 v5 = v4;
    a1[2] = 0;
    a1[3] = 0;
    if (v4)
    {
      KB::String::ensure_capacity((KB::String *)a1, v4);
      if (a1[1]) {
        uint64_t v6 = (void *)a1[1];
      }
      else {
        uint64_t v6 = a1 + 2;
      }
      memcpy(v6, a2, v5);
      *(_WORD *)a1 = v5;
    }
  }
  else
  {
    a1[2] = 0;
    a1[3] = 0;
  }
  return a1;
}

KB::String *KB::String::operator=(KB::String *this, KB::String *a2)
{
  if (this != a2)
  {
    if (*((unsigned char *)a2 + 6) == 1)
    {
      KB::String::clear(this);
      if (*(_WORD *)a2)
      {
        KB::String::ensure_capacity(this, *(_WORD *)a2);
        if (*((void *)this + 1)) {
          uint64_t v6 = (char *)*((void *)this + 1);
        }
        else {
          uint64_t v6 = (char *)this + 16;
        }
        if (*((void *)a2 + 1)) {
          int v7 = (const char *)*((void *)a2 + 1);
        }
        else {
          int v7 = (char *)a2 + 16;
        }
        strlcpy(v6, v7, *(unsigned __int16 *)a2 + 1);
        *(_WORD *)this = *(_WORD *)a2;
        __int16 v8 = *((_WORD *)a2 + 2);
        if (!v8)
        {
          KB::String::compute_length((unsigned __int16 *)a2);
          __int16 v8 = *((_WORD *)a2 + 2);
        }
        *((_WORD *)this + 2) = v8;
      }
    }
    else if (!*((unsigned char *)a2 + 6))
    {
      __int16 v4 = (void *)*((void *)this + 1);
      if (v4 && *((unsigned char *)this + 6) == 1) {
        free(v4);
      }
      *((_WORD *)this + 1) = 16;
      *((unsigned char *)this + 16) = 0;
      *((void *)this + 1) = *((void *)a2 + 1);
      *(_WORD *)this = *(_WORD *)a2;
      __int16 v5 = *((_WORD *)a2 + 2);
      if (!v5)
      {
        KB::String::compute_length((unsigned __int16 *)a2);
        __int16 v5 = *((_WORD *)a2 + 2);
      }
      *((_WORD *)this + 2) = v5;
      *((unsigned char *)this + 6) = 0;
    }
  }
  return this;
}

KB::String *KB::String::operator=(KB::String *a1, unsigned int a2)
{
  if (a2) {
    KB::String::append(a1, a2);
  }
  return a1;
}

void KB::String::append(KB::String *this, unsigned int a2)
{
  if (!*((unsigned char *)this + 6)) {
    KB::String::internalize_buffer((unsigned __int16 *)this);
  }
  unsigned __int16 v4 = *(_WORD *)this;
  if (a2 > 0x7F)
  {
    KB::String::ensure_capacity(this, v4 + 4);
    uint64_t v6 = (char *)*((void *)this + 1);
    if (!v6) {
      uint64_t v6 = (char *)this + 16;
    }
    if (a2 > 0x7FF)
    {
      uint64_t v8 = *(unsigned __int16 *)this;
      *(_WORD *)this = v8 + 1;
      if (HIWORD(a2))
      {
        v6[v8] = (a2 >> 18) | 0xF0;
        uint64_t v9 = *(unsigned __int16 *)this;
        *(_WORD *)this = v9 + 1;
        v6[v9] = (a2 >> 12) & 0x3F | 0x80;
      }
      else
      {
        v6[v8] = (a2 >> 12) | 0xE0;
      }
      unsigned int v7 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    }
    else
    {
      unsigned int v7 = (a2 >> 6) | 0xFFFFFFC0;
    }
    uint64_t v10 = *(unsigned __int16 *)this;
    *(_WORD *)this = v10 + 1;
    v6[v10] = v7;
    uint64_t v11 = *(unsigned __int16 *)this;
    *(_WORD *)this = v11 + 1;
    v6[v11] = a2 & 0x3F | 0x80;
  }
  else
  {
    unsigned __int16 v5 = v4 + 1;
    KB::String::ensure_capacity(this, v4 + 1);
    uint64_t v6 = (char *)*((void *)this + 1);
    if (!v6) {
      uint64_t v6 = (char *)this + 16;
    }
    *(_WORD *)this = v5;
    v6[v5 - 1] = a2;
  }
  v6[*(unsigned __int16 *)this] = 0;
  *((_WORD *)this + 2) = 0;
}

int *KB::String::empty_string(KB::String *this)
{
  {
    KB::String::empty_string(void)::empty_string = 0x100000;
    word_1EBFF07D4 = 0;
    byte_1EBFF07D6 = 0;
    qword_1EBFF07D8 = 0;
    byte_1EBFF07E0 = 0;
    __cxa_atexit((void (*)(void *))KB::String::~String, &KB::String::empty_string(void)::empty_string, &dword_1E3F0E000);
  }
  return &KB::String::empty_string(void)::empty_string;
}

int *KB::String::space(KB::String *this)
{
  {
    word_1EBFEFFC4 = 0;
    byte_1EBFEFFC6 = 0;
    qword_1EBFEFFC8 = (uint64_t)" ";
    KB::String::space(void)::space = 1048577;
    byte_1EBFEFFD1 = 0;
    __cxa_atexit((void (*)(void *))KB::String::~String, &KB::String::space(void)::space, &dword_1E3F0E000);
  }
  return &KB::String::space(void)::space;
}

void KB::String::resize(KB::String *this, unsigned int a2, int a3)
{
  unsigned int v3 = *(unsigned __int16 *)this;
  if (v3 != a2)
  {
    if (!*((unsigned char *)this + 6))
    {
      KB::String::internalize_buffer((unsigned __int16 *)this);
      unsigned int v3 = *(unsigned __int16 *)this;
    }
    BOOL v7 = v3 >= a2;
    unsigned int v8 = v3 - a2;
    if (v8 != 0 && v7)
    {
      uint64_t v9 = (char *)*((void *)this + 1);
      if (!v9) {
        uint64_t v9 = (char *)this + 16;
      }
      bzero(&v9[a2], (int)v8);
    }
    else
    {
      KB::String::ensure_capacity(this, a2);
      uint64_t v10 = (char *)*((void *)this + 1);
      if (!v10) {
        uint64_t v10 = (char *)this + 16;
      }
      memset(&v10[*(unsigned __int16 *)this], a3, a2 - (unint64_t)*(unsigned __int16 *)this);
    }
    *(_WORD *)this = a2;
    *((_WORD *)this + 2) = 0;
  }
}

uint64_t *KB::String::shorten@<X0>(KB::String *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 6) = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  unsigned __int16 v5 = (char *)*((void *)this + 1);
  if (!v5) {
    unsigned __int16 v5 = (char *)this + 16;
  }
  uint64_t v11 = v5;
  int v6 = *(unsigned __int16 *)this;
  int v12 = 0;
  int v13 = v6;
  unsigned int v14 = 0;
  uint64_t result = KB::String::iterator::initialize((uint64_t *)&v11);
  unsigned int v8 = v14;
  if (v14 && a2)
  {
    unsigned int v9 = 1;
    do
    {
      KB::String::append((KB::String *)a3, v8);
      uint64_t result = KB::String::iterator::operator++((uint64_t *)&v11);
      unsigned int v8 = v14;
      if (v14) {
        BOOL v10 = v9 >= a2;
      }
      else {
        BOOL v10 = 1;
      }
      ++v9;
    }
    while (!v10);
  }
  return result;
}

uint64_t *KB::String::iterator::initialize(uint64_t *this)
{
  int v1 = *((_DWORD *)this + 3);
  uint64_t v2 = *((int *)this + 2);
  if ((int)v2 >= v1)
  {
    *((_DWORD *)this + 2) = v1 + 1;
    *((_DWORD *)this + 4) = 0;
  }
  else
  {
    uint64_t v3 = *this;
    uint64_t v4 = v2 + 1;
    *((_DWORD *)this + 2) = v2 + 1;
    int v5 = *(char *)(v3 + v2);
    *((_DWORD *)this + 4) = v5;
    if ((v5 + 64) > 0x34) {
      return this;
    }
    int v6 = kb_utf8_countTrailBytes[v5];
    int v7 = v5 & ~(-1 << (6 - v6));
    *((_DWORD *)this + 4) = v7;
    if (v6 != 1)
    {
      if (v6 != 2)
      {
        if (v6 != 3) {
          return this;
        }
        int v8 = v2 + 2;
        *((_DWORD *)this + 2) = v8;
        int v9 = *(unsigned char *)(v3 + v4) & 0x3F | (v7 << 6);
        *((_DWORD *)this + 4) = v9;
        LODWORD(v4) = v8;
        int v7 = v9;
      }
      *((_DWORD *)this + 2) = v4 + 1;
      int v10 = *(unsigned char *)(v3 + (int)v4) & 0x3F | (v7 << 6);
      *((_DWORD *)this + 4) = v10;
      LODWORD(v4) = v4 + 1;
      int v7 = v10;
    }
    *((_DWORD *)this + 2) = v4 + 1;
    *((_DWORD *)this + 4) = *(unsigned char *)(v3 + (int)v4) & 0x3F | (v7 << 6);
  }
  return this;
}

uint64_t *KB::String::iterator::operator++(uint64_t *result)
{
  int v1 = *((_DWORD *)result + 3);
  uint64_t v2 = *((int *)result + 2);
  if ((int)v2 >= v1)
  {
    *((_DWORD *)result + 2) = v1 + 1;
    *((_DWORD *)result + 4) = 0;
  }
  else
  {
    uint64_t v3 = *result;
    uint64_t v4 = v2 + 1;
    *((_DWORD *)result + 2) = v2 + 1;
    int v5 = *(char *)(v3 + v2);
    *((_DWORD *)result + 4) = v5;
    if ((v5 + 64) > 0x34) {
      return result;
    }
    int v6 = kb_utf8_countTrailBytes[v5];
    int v7 = v5 & ~(-1 << (6 - v6));
    *((_DWORD *)result + 4) = v7;
    if (v6 != 1)
    {
      if (v6 != 2)
      {
        if (v6 != 3) {
          return result;
        }
        int v8 = v2 + 2;
        *((_DWORD *)result + 2) = v8;
        int v9 = *(unsigned char *)(v3 + v4) & 0x3F | (v7 << 6);
        *((_DWORD *)result + 4) = v9;
        LODWORD(v4) = v8;
        int v7 = v9;
      }
      *((_DWORD *)result + 2) = v4 + 1;
      int v10 = *(unsigned char *)(v3 + (int)v4) & 0x3F | (v7 << 6);
      *((_DWORD *)result + 4) = v10;
      LODWORD(v4) = v4 + 1;
      int v7 = v10;
    }
    *((_DWORD *)result + 2) = v4 + 1;
    *((_DWORD *)result + 4) = *(unsigned char *)(v3 + (int)v4) & 0x3F | (v7 << 6);
  }
  return result;
}

KB::String::iterator *KB::String::iterator::operator--(KB::String::iterator *a1)
{
  int v2 = KB::String::iterator::offset(a1);
  if (v2)
  {
    *((_DWORD *)a1 + 2) = v2;
    uint64_t v3 = *(void *)a1;
    int v4 = *(char *)(*(void *)a1 + (v2 - 1));
    *((_DWORD *)a1 + 4) = v4;
    if ((v4 & 0xC0) == 0x80)
    {
      int v5 = v4 & 0x3F;
      *((_DWORD *)a1 + 4) = v5;
      unsigned int v6 = *(unsigned __int8 *)(v3 + (v2 - 2));
      if (v6 <= 0xBF)
      {
        unsigned int v9 = v2 - 3;
        char v10 = 1;
        char v11 = 6;
        do
        {
          v5 |= (v6 & 0x3F) << v11;
          *((_DWORD *)a1 + 4) = v5;
          ++v10;
          v11 += 6;
          unsigned int v6 = *(unsigned __int8 *)(v3 + v9--);
        }
        while (v6 <= 0xBF);
        char v8 = 6 - v10;
        char v7 = v11;
      }
      else
      {
        char v7 = 6;
        char v8 = 5;
      }
      *((_DWORD *)a1 + 4) = v5 | ((v6 & ~(-1 << v8)) << v7);
    }
  }
  return a1;
}

KB::String::iterator *KB::String::iterator::operator+@<X0>(uint64_t a1@<X0>, int a2@<W1>, KB::String::iterator *a3@<X8>)
{
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *((void *)a3 + 2) = *(void *)(a1 + 16);
  return std::__advance[abi:nn180100]<KB::String::iterator>(a3, a2);
}

KB::String::iterator *std::__advance[abi:nn180100]<KB::String::iterator>(KB::String::iterator *result, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 < 0)
  {
    do
      uint64_t result = KB::String::iterator::operator--(result);
    while (!__CFADD__(v2++, 1));
  }
  else if (a2)
  {
    unint64_t v3 = a2 + 1;
    do
    {
      uint64_t result = (KB::String::iterator *)KB::String::iterator::operator++((uint64_t *)result);
      --v3;
    }
    while (v3 > 1);
  }
  return result;
}

KB::String::iterator *KB::String::iterator::operator-@<X0>(uint64_t a1@<X0>, int a2@<W1>, KB::String::iterator *a3@<X8>)
{
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *((void *)a3 + 2) = *(void *)(a1 + 16);
  return std::__advance[abi:nn180100]<KB::String::iterator>(a3, -a2);
}

uint64_t *KB::String::find@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 1)) {
    int v5 = (char *)*((void *)this + 1);
  }
  else {
    int v5 = (char *)this + 16;
  }
  if (*((void *)a2 + 1)) {
    unsigned int v6 = (const char *)*((void *)a2 + 1);
  }
  else {
    unsigned int v6 = (char *)a2 + 16;
  }
  char v7 = strstr(v5, v6);
  if (v7) {
    int v8 = v7 - v5;
  }
  else {
    int v8 = *(unsigned __int16 *)this;
  }
  unsigned int v9 = *(unsigned __int16 *)this;
  *(void *)a3 = v5;
  *(_DWORD *)(a3 + 8) = v8;
  *(void *)(a3 + 12) = v9;

  return KB::String::iterator::initialize((uint64_t *)a3);
}

uint64_t *KB::String::rfind@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = (unsigned __int8 *)this + 16;
  if (*((void *)this + 1)) {
    int v5 = (unsigned __int8 *)*((void *)this + 1);
  }
  uint64_t v6 = *(unsigned __int16 *)this;
  char v7 = &v5[v6];
  int v8 = (unsigned __int8 *)a2 + 16;
  if (*((void *)a2 + 1)) {
    int v8 = (unsigned __int8 *)*((void *)a2 + 1);
  }
  uint64_t v9 = *(unsigned __int16 *)a2;
  if (v6) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (!*(_WORD *)a2)
    {
LABEL_22:
      *(void *)a3 = v5;
      *(_DWORD *)(a3 + 8) = v7 - v5;
      goto LABEL_23;
    }
  }
  else
  {
    char v11 = v5;
    int v12 = (char *)&v5[v6];
    do
    {
      if (*v11 == *v8)
      {
        uint64_t v13 = 1;
        while (v9 != v13)
        {
          if (&v11[v13] == v7) {
            goto LABEL_21;
          }
          int v14 = v11[v13];
          int v15 = v8[v13++];
          if (v14 != v15) {
            goto LABEL_13;
          }
        }
        int v12 = (char *)v11;
      }
LABEL_13:
      ++v11;
    }
    while (v11 != v7);
LABEL_21:
    BOOL v10 = v12 == (char *)v7;
    LODWORD(v7) = v12;
    if (!v10) {
      goto LABEL_22;
    }
  }
  *(void *)a3 = v5;
  *(_DWORD *)(a3 + 8) = v6;
LABEL_23:
  *(_DWORD *)(a3 + 12) = v6;
  *(_DWORD *)(a3 + 16) = 0;
  return KB::String::iterator::initialize((uint64_t *)a3);
}

double KB::String::find_first_of@<D0>(KB::String *this@<X0>, const KB::String *a2@<X1>, const KB::String::iterator *a3@<X2>, uint64_t a4@<X8>)
{
  long long v15 = *(_OWORD *)a3;
  *(void *)__int16 v16 = *((void *)a3 + 2);
  int v6 = *(unsigned __int16 *)this;
  char v7 = (char *)*((void *)this + 1);
  if (!v7) {
    char v7 = (char *)this + 16;
  }
  char v11 = v7;
  int v12 = v6;
  int v13 = v6;
  int v14 = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  int v8 = DWORD2(v15);
  int v9 = v12;
  while (v8 != v9 && !KB::String::contains(a2, v16[0]))
  {
    KB::String::iterator::operator++((uint64_t *)&v15);
    int v8 = DWORD2(v15);
  }
  double result = *(double *)&v15;
  *(_OWORD *)a4 = v15;
  *(void *)(a4 + 16) = *(void *)v16;
  return result;
}

BOOL KB::String::contains(KB::String *this, unsigned int a2)
{
  if (*((void *)this + 1)) {
    unint64_t v3 = (char *)*((void *)this + 1);
  }
  else {
    unint64_t v3 = (char *)this + 16;
  }
  if (a2 > 0x7F)
  {
    *(void *)&long long v17 = v3;
    int v7 = *(unsigned __int16 *)this;
    DWORD2(v17) = 0;
    HIDWORD(v17) = v7;
    LODWORD(v18) = 0;
    KB::String::iterator::initialize((uint64_t *)&v17);
    int v13 = v3;
    int v14 = v7;
    int v15 = v7;
    int v16 = 0;
    KB::String::iterator::initialize((uint64_t *)&v13);
    long long v19 = v17;
    uint64_t v20 = v18;
    int v8 = v14;
    int v9 = DWORD2(v17);
    if (DWORD2(v17) != v14 && v18 != a2)
    {
      do
      {
        KB::String::iterator::operator++((uint64_t *)&v19);
        int v9 = DWORD2(v19);
      }
      while (DWORD2(v19) != v8 && v20 != a2);
    }
    *(void *)&long long v19 = v3;
    DWORD2(v19) = v7;
    HIDWORD(v19) = v7;
    LODWORD(v20) = 0;
    KB::String::iterator::initialize((uint64_t *)&v19);
    BOOL v11 = v9 == DWORD2(v19);
  }
  else
  {
    uint64_t v4 = *(unsigned __int16 *)this;
    if (*(_WORD *)this)
    {
      uint64_t v5 = *(unsigned __int16 *)this;
      int v6 = v3;
      while (*v6 != a2)
      {
        ++v6;
        if (!--v5)
        {
          int v6 = &v3[v4];
          break;
        }
      }
    }
    else
    {
      int v6 = v3;
    }
    BOOL v11 = v6 - v3 == v4;
  }
  return !v11;
}

double KB::String::find_first_not_of@<D0>(KB::String *this@<X0>, const KB::String *a2@<X1>, const KB::String::iterator *a3@<X2>, uint64_t a4@<X8>)
{
  long long v15 = *(_OWORD *)a3;
  *(void *)int v16 = *((void *)a3 + 2);
  int v6 = *(unsigned __int16 *)this;
  int v7 = (char *)*((void *)this + 1);
  if (!v7) {
    int v7 = (char *)this + 16;
  }
  BOOL v11 = v7;
  int v12 = v6;
  int v13 = v6;
  int v14 = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  int v8 = DWORD2(v15);
  int v9 = v12;
  while (v8 != v9 && KB::String::contains(a2, v16[0]))
  {
    KB::String::iterator::operator++((uint64_t *)&v15);
    int v8 = DWORD2(v15);
  }
  double result = *(double *)&v15;
  *(_OWORD *)a4 = v15;
  *(void *)(a4 + 16) = *(void *)v16;
  return result;
}

uint64_t *KB::String::find_last_of@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, const KB::String::iterator *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)int v16 = *(_OWORD *)a3;
  *(void *)&v16[16] = *((void *)a3 + 2);
  long long v14 = *(_OWORD *)v16;
  uint64_t v15 = *(void *)&v16[16];
  if (*((void *)this + 1)) {
    int v6 = (char *)*((void *)this + 1);
  }
  else {
    int v6 = (char *)this + 16;
  }
  *(void *)&long long v12 = v6;
  int v7 = *(unsigned __int16 *)this;
  DWORD2(v12) = 0;
  HIDWORD(v12) = v7;
  v13[0] = 0;
  KB::String::iterator::initialize((uint64_t *)&v12);
  int v8 = DWORD2(v12);
  int v9 = *(_DWORD *)&v16[8];
  if (*(_DWORD *)&v16[8] == DWORD2(v12))
  {
LABEL_7:
    int v9 = v8;
  }
  else
  {
    while (1)
    {
      long long v12 = *(_OWORD *)v16;
      *(void *)int v13 = *(void *)&v16[16];
      KB::String::iterator::operator--((KB::String::iterator *)&v12);
      if (KB::String::contains(a2, v13[0])) {
        break;
      }
      KB::String::iterator::operator--((KB::String::iterator *)v16);
      int v9 = *(_DWORD *)&v16[8];
      if (*(_DWORD *)&v16[8] == v8) {
        goto LABEL_7;
      }
    }
  }
  uint64_t v10 = *(void *)v16;
  *(void *)&long long v12 = v6;
  DWORD2(v12) = 0;
  HIDWORD(v12) = v7;
  v13[0] = 0;
  KB::String::iterator::initialize((uint64_t *)&v12);
  if (v9 == DWORD2(v12))
  {
    *(void *)a4 = v6;
    *(_DWORD *)(a4 + 8) = v7;
    *(_DWORD *)(a4 + 12) = v7;
    *(_DWORD *)(a4 + 16) = 0;
    return KB::String::iterator::initialize((uint64_t *)a4);
  }
  else
  {
    *(void *)(a4 + 12) = *(void *)&v16[12];
    *(_DWORD *)(a4 + 20) = *(_DWORD *)&v16[20];
    *(void *)a4 = v10;
    *(_DWORD *)(a4 + 8) = v9;
    return (uint64_t *)KB::String::iterator::operator--((KB::String::iterator *)a4);
  }
}

uint64_t *KB::String::find_last_not_of@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, const KB::String::iterator *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)int v16 = *(_OWORD *)a3;
  *(void *)&v16[16] = *((void *)a3 + 2);
  long long v14 = *(_OWORD *)v16;
  uint64_t v15 = *(void *)&v16[16];
  if (*((void *)this + 1)) {
    int v6 = (char *)*((void *)this + 1);
  }
  else {
    int v6 = (char *)this + 16;
  }
  *(void *)&long long v12 = v6;
  int v7 = *(unsigned __int16 *)this;
  DWORD2(v12) = 0;
  HIDWORD(v12) = v7;
  v13[0] = 0;
  KB::String::iterator::initialize((uint64_t *)&v12);
  int v8 = DWORD2(v12);
  int v9 = *(_DWORD *)&v16[8];
  if (*(_DWORD *)&v16[8] == DWORD2(v12))
  {
LABEL_7:
    int v9 = v8;
  }
  else
  {
    while (1)
    {
      long long v12 = *(_OWORD *)v16;
      *(void *)int v13 = *(void *)&v16[16];
      KB::String::iterator::operator--((KB::String::iterator *)&v12);
      if (!KB::String::contains(a2, v13[0])) {
        break;
      }
      KB::String::iterator::operator--((KB::String::iterator *)v16);
      int v9 = *(_DWORD *)&v16[8];
      if (*(_DWORD *)&v16[8] == v8) {
        goto LABEL_7;
      }
    }
  }
  uint64_t v10 = *(void *)v16;
  *(void *)&long long v12 = v6;
  DWORD2(v12) = 0;
  HIDWORD(v12) = v7;
  v13[0] = 0;
  KB::String::iterator::initialize((uint64_t *)&v12);
  if (v9 == DWORD2(v12))
  {
    *(void *)a4 = v6;
    *(_DWORD *)(a4 + 8) = v7;
    *(_DWORD *)(a4 + 12) = v7;
    *(_DWORD *)(a4 + 16) = 0;
    return KB::String::iterator::initialize((uint64_t *)a4);
  }
  else
  {
    *(void *)(a4 + 12) = *(void *)&v16[12];
    *(_DWORD *)(a4 + 20) = *(_DWORD *)&v16[20];
    *(void *)a4 = v10;
    *(_DWORD *)(a4 + 8) = v9;
    return (uint64_t *)KB::String::iterator::operator--((KB::String::iterator *)a4);
  }
}

BOOL KB::String::contains(KB::String *this, const KB::String *a2)
{
  uint64_t v4 = (char *)*((void *)this + 1);
  uint64_t v5 = (char *)this + 16;
  if (!v4) {
    uint64_t v4 = (char *)this + 16;
  }
  BOOL v11 = v4;
  int v6 = *(unsigned __int16 *)this;
  int v12 = 0;
  int v13 = v6;
  int v14 = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  KB::String::find_first_of(this, a2, (const KB::String::iterator *)&v11, (uint64_t)v10);
  int v7 = *(unsigned __int16 *)this;
  uint64_t v8 = *((void *)this + 1);
  if (!v8) {
    uint64_t v8 = (uint64_t)v5;
  }
  BOOL v11 = (char *)v8;
  int v12 = v7;
  int v13 = v7;
  int v14 = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  return v10[2] != v12;
}

uint64_t KB::String::count(KB::String *this, unsigned int a2)
{
  if (*((void *)this + 1)) {
    unint64_t v3 = (char *)*((void *)this + 1);
  }
  else {
    unint64_t v3 = (char *)this + 16;
  }
  if (a2 > 0x7F)
  {
    *(void *)&long long v14 = v3;
    int v7 = *(unsigned __int16 *)this;
    DWORD2(v14) = 0;
    HIDWORD(v14) = v7;
    LODWORD(v15) = 0;
    KB::String::iterator::initialize((uint64_t *)&v14);
    uint64_t v10 = v3;
    int v11 = v7;
    int v12 = v7;
    int v13 = 0;
    KB::String::iterator::initialize((uint64_t *)&v10);
    uint64_t v5 = 0;
    long long v16 = v14;
    uint64_t v17 = v15;
    int v8 = v11;
    if (DWORD2(v14) != v11)
    {
      LODWORD(v5) = 0;
      do
      {
        if (v17 == a2) {
          uint64_t v5 = (v5 + 1);
        }
        else {
          uint64_t v5 = v5;
        }
        KB::String::iterator::operator++((uint64_t *)&v16);
      }
      while (DWORD2(v16) != v8);
    }
  }
  else
  {
    uint64_t v4 = *(unsigned __int16 *)this;
    if (*(_WORD *)this)
    {
      LODWORD(v5) = 0;
      do
      {
        int v6 = *v3++;
        if (v6 == a2) {
          uint64_t v5 = (v5 + 1);
        }
        else {
          uint64_t v5 = v5;
        }
        --v4;
      }
      while (v4);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t KB::String::compare(KB::String *this, const KB::String *a2)
{
  if (*((void *)this + 1)) {
    uint64_t v2 = (const char *)*((void *)this + 1);
  }
  else {
    uint64_t v2 = (char *)this + 16;
  }
  if (*((void *)a2 + 1)) {
    unint64_t v3 = (const char *)*((void *)a2 + 1);
  }
  else {
    unint64_t v3 = (char *)a2 + 16;
  }
  return strcmp(v2, v3);
}

KB::String *KB::String::trim@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(unsigned __int16 *)this;
  if (!*(_WORD *)this) {
    goto LABEL_8;
  }
  int v6 = this;
  uint64_t v7 = *((void *)this + 1);
  int v8 = (char *)this + 16;
  if (!v7) {
    uint64_t v7 = (uint64_t)this + 16;
  }
  uint64_t v22 = v7;
  int v23 = 0;
  int v24 = v4;
  int v25 = 0;
  KB::String::iterator::initialize(&v22);
  KB::String::find_first_not_of(v6, a2, (const KB::String::iterator *)&v22, (uint64_t)v20);
  int v9 = *(unsigned __int16 *)v6;
  uint64_t v10 = *((void *)v6 + 1) ? *((void *)v6 + 1) : (uint64_t)v8;
  uint64_t v22 = v10;
  int v23 = v9;
  int v24 = v9;
  int v25 = 0;
  this = (KB::String *)KB::String::iterator::initialize(&v22);
  int v11 = v21;
  if (v21 != v23)
  {
    uint64_t v22 = v10;
    int v23 = v9;
    int v24 = v9;
    int v25 = 0;
    KB::String::iterator::initialize(&v22);
    KB::String::find_last_not_of(v6, a2, (const KB::String::iterator *)&v22, (uint64_t)&v18);
    KB::String::iterator::operator++(&v18);
    if (*((void *)v6 + 1)) {
      uint64_t v12 = *((void *)v6 + 1);
    }
    else {
      uint64_t v12 = (uint64_t)v8;
    }
    uint64_t v22 = v12;
    int v13 = *(unsigned __int16 *)v6;
    int v23 = 0;
    int v24 = v13;
    int v25 = 0;
    KB::String::iterator::initialize(&v22);
    if (v11 == v23 && (uint64_t v14 = v12, v15 = v13, v16 = v13, v17 = 0, KB::String::iterator::initialize(&v14), v19 == v15)) {
      return KB::String::String((KB::String *)a3, v6);
    }
    else {
      return KB::String::String((KB::String *)a3, (const KB::String::iterator *)v20, (const KB::String::iterator *)&v18);
    }
  }
  else
  {
LABEL_8:
    *(_DWORD *)a3 = 0x100000;
    *(_WORD *)(a3 + 4) = 0;
    *(unsigned char *)(a3 + 6) = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  return this;
}

uint64_t *KB::String::remove@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_WORD *)a2)
  {
    *(_DWORD *)a3 = 0x100000;
    *(_WORD *)(a3 + 4) = 0;
    *(unsigned char *)(a3 + 6) = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    KB::String::ensure_capacity((KB::String *)a3, *(_WORD *)this);
    if (*((void *)this + 1)) {
      int v6 = (char *)*((void *)this + 1);
    }
    else {
      int v6 = (char *)this + 16;
    }
    int v15 = v6;
    int v7 = *(unsigned __int16 *)this;
    int v16 = 0;
    int v17 = v7;
    unsigned int v18 = 0;
    KB::String::iterator::initialize((uint64_t *)&v15);
    int v11 = v6;
    int v12 = v7;
    int v13 = v7;
    int v14 = 0;
    double result = KB::String::iterator::initialize((uint64_t *)&v11);
    int v9 = v12;
    while (v16 != v9)
    {
      unsigned int v10 = v18;
      if (!KB::String::contains(a2, v18)) {
        KB::String::append((KB::String *)a3, v10);
      }
      double result = KB::String::iterator::operator++((uint64_t *)&v15);
    }
  }
  else
  {
    return (uint64_t *)KB::String::String((KB::String *)a3, this);
  }
  return result;
}

KB::String *KB::String::operator+=(KB::String *a1, unsigned int a2)
{
  return a1;
}

KB::String *KB::String::remove_prefix_bytes@<X0>(KB::String *this@<X0>, uint64_t a2@<X1>, KB::String *a3@<X8>)
{
  unint64_t v3 = (char *)*((void *)this + 1);
  if (!v3) {
    unint64_t v3 = (char *)this + 16;
  }
  return KB::String::String(a3, &v3[a2], (unsigned __int16)(*(_WORD *)this - a2));
}

unsigned __int16 *KB::String::replace@<X0>(KB::String *this@<X0>, const KB::String::iterator *a2@<X1>, const KB::String::iterator *a3@<X2>, const KB::String *a4@<X3>, uint64_t a5@<X8>)
{
  __int16 v10 = KB::String::iterator::offset(a3);
  __int16 v11 = KB::String::iterator::offset(a2);
  *(_DWORD *)a5 = 0x100000;
  *(_WORD *)(a5 + 4) = 0;
  *(unsigned char *)(a5 + 6) = 0;
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 16) = 0;
  KB::String::ensure_capacity((KB::String *)a5, *(_WORD *)this + v11 - v10 + *(_WORD *)a4);
  int v12 = (char *)*((void *)this + 1);
  if (!v12) {
    int v12 = (char *)this + 16;
  }
  int v17 = v12;
  int v13 = *(unsigned __int16 *)this;
  int v18 = 0;
  int v19 = v13;
  int v20 = 0;
  KB::String::iterator::initialize((uint64_t *)&v17);
  KB::String::append((KB::String *)a5, (const KB::String::iterator *)&v17, a2);
  KB::String::append((unsigned __int16 *)a5, a4);
  int v14 = *(unsigned __int16 *)this;
  int v15 = (char *)*((void *)this + 1);
  if (!v15) {
    int v15 = (char *)this + 16;
  }
  int v17 = v15;
  int v18 = v14;
  int v19 = v14;
  int v20 = 0;
  KB::String::iterator::initialize((uint64_t *)&v17);
  return KB::String::append((KB::String *)a5, a3, (const KB::String::iterator *)&v17);
}

unsigned __int16 *KB::String::append(KB::String *this, const KB::String::iterator *a2, const KB::String::iterator *a3)
{
  uint64_t v5 = *(void *)a2;
  unsigned int v6 = KB::String::iterator::offset(a2);
  int v7 = (const char *)(v5 + v6);
  size_t v8 = (unsigned __int16)(KB::String::iterator::offset(a3) - v6);

  return KB::String::append((unsigned __int16 *)this, v7, v8);
}

unsigned __int16 *KB::String::append(unsigned __int16 *this, const KB::String *a2)
{
  if (*(_WORD *)a2)
  {
    unint64_t v3 = this;
    if (!*((unsigned char *)this + 6)) {
      KB::String::internalize_buffer(this);
    }
    if (*((void *)a2 + 1)) {
      int v4 = (const char *)*((void *)a2 + 1);
    }
    else {
      int v4 = (char *)a2 + 16;
    }
    return KB::String::append(v3, v4, 0xFFFFuLL);
  }
  return this;
}

unsigned __int16 *KB::String::append(unsigned __int16 *this, const char *__s1, size_t __n)
{
  if (__s1)
  {
    int v4 = this;
    this = (unsigned __int16 *)strnlen(__s1, __n);
    size_t v5 = (unsigned __int16)this;
    if ((_WORD)this)
    {
      __int16 v6 = (__int16)this;
      if (!*((unsigned char *)v4 + 6)) {
        KB::String::internalize_buffer(v4);
      }
      KB::String::ensure_capacity((KB::String *)v4, *v4 + v6);
      int v7 = (unsigned __int16 *)*((void *)v4 + 1);
      if (!v7) {
        int v7 = v4 + 8;
      }
      this = (unsigned __int16 *)memcpy((char *)v7 + *v4, __s1, v5);
      unsigned __int16 v8 = *v4 + v6;
      *int v4 = v8;
      int v9 = (unsigned __int16 *)*((void *)v4 + 1);
      if (!v9) {
        int v9 = v4 + 8;
      }
      *((unsigned char *)v9 + v8) = 0;
      _DWORD v4[2] = 0;
    }
  }
  return this;
}

uint64_t *KB::String::replace_char@<X0>(KB::String *this@<X0>, const KB::String *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0x100000;
  *(_WORD *)(a4 + 4) = 0;
  *(unsigned char *)(a4 + 6) = 0;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  unsigned __int16 v8 = (char *)*((void *)this + 1);
  int v9 = (char *)this + 16;
  if (v8) {
    __int16 v10 = (char *)*((void *)this + 1);
  }
  else {
    __int16 v10 = (char *)this + 16;
  }
  int v18 = v10;
  int v11 = *(unsigned __int16 *)this;
  int v19 = 0;
  int v20 = v11;
  unsigned int v21 = 0;
  KB::String::iterator::initialize((uint64_t *)&v18);
  while (1)
  {
    uint64_t v12 = (uint64_t)(v8 ? v8 : v9);
    uint64_t v14 = v12;
    int v15 = v11;
    int v16 = v11;
    int v17 = 0;
    double result = KB::String::iterator::initialize(&v14);
    if (v19 == v15) {
      break;
    }
    if (v21 == a3) {
      KB::String::append((unsigned __int16 *)a4, a2);
    }
    else {
      KB::String::append((KB::String *)a4, v21);
    }
    KB::String::iterator::operator++((uint64_t *)&v18);
    int v11 = *(unsigned __int16 *)this;
    unsigned __int16 v8 = (char *)*((void *)this + 1);
  }
  return result;
}

unsigned __int16 *KB::String::append(KB::String *this, const char *a2)
{
  return KB::String::append((unsigned __int16 *)this, a2, 0xFFFFuLL);
}

uint64_t KB::String::append_float(KB::String *this, float a2)
{
  return KB::String::append_format(this, "%.2f", a2);
}

uint64_t KB::String::append_format(KB::String *this, const char *a2, ...)
{
  va_start(va, a2);
  return KB::String::append_format(this, a2, va);
}

uint64_t KB::String::append_format(KB::String *this, const char *a2, va_list a3)
{
  size_t v5 = funopen(this, 0, (int (__cdecl *)(void *, const char *, int))KB::kbstring_write, 0, 0);
  vfprintf(v5, a2, a3);

  return fclose(v5);
}

const char *KB::kbstring_write(KB *this, const char *a2, const char *a3)
{
  return a3;
}

unsigned __int16 *KB::String::append_byte(KB::String *this, char a2)
{
  __s1[0] = a2;
  __s1[1] = 0;
  return KB::String::append((unsigned __int16 *)this, __s1, 0xFFFFuLL);
}

uint64_t KB::String::pop_last(KB::String *this)
{
  int v1 = *(unsigned __int16 *)this;
  if (!*(_WORD *)this) {
    return 0;
  }
  unint64_t v3 = (char *)*((void *)this + 1);
  if (!v3) {
    unint64_t v3 = (char *)this + 16;
  }
  *(void *)&long long v13 = v3;
  DWORD2(v13) = v1;
  HIDWORD(v13) = v1;
  LODWORD(v14) = 0;
  KB::String::iterator::initialize((uint64_t *)&v13);
  long long v15 = v13;
  uint64_t v16 = v14;
  KB::String::iterator::operator--((KB::String::iterator *)&v15);
  uint64_t v4 = v16;
  if (v16 >= 0x10000) {
    __int16 v5 = -4;
  }
  else {
    __int16 v5 = -3;
  }
  if ((v16 - 1114112) >= 0xFFEFE000) {
    __int16 v6 = v5;
  }
  else {
    __int16 v6 = 0;
  }
  if (v16 >> 11 >= 0x1B) {
    __int16 v7 = v6;
  }
  else {
    __int16 v7 = -3;
  }
  if (v16 >= 0x800) {
    __int16 v8 = v7;
  }
  else {
    __int16 v8 = -2;
  }
  if (v16 >= 0x80) {
    __int16 v9 = v8;
  }
  else {
    __int16 v9 = -1;
  }
  unsigned __int16 v10 = v9 + WORD4(v15);
  if (SDWORD2(v15) <= SHIDWORD(v15)) {
    unsigned __int16 v11 = v10;
  }
  else {
    unsigned __int16 v11 = WORD6(v15);
  }
  KB::String::resize(this, v11, 0);
  return v4;
}

uint64_t KB::String::format@<X0>(KB::String *this@<X0>, uint64_t a2@<X8>, ...)
{
  va_start(va, a2);
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return KB::String::append_format((KB::String *)a2, (const char *)this, va);
}

void KB::String::operator+(KB::String *a1@<X0>, unsigned int a2@<W1>, KB::String *a3@<X8>)
{
  uint64_t v4 = KB::String::String(a3, a1);

  KB::String::append(v4, a2);
}

unsigned __int16 *KB::String::operator+@<X0>(KB::String *a1@<X0>, const char *a2@<X1>, KB::String *a3@<X8>)
{
  uint64_t v4 = (unsigned __int16 *)KB::String::String(a3, a1);

  return KB::String::append(v4, a2, 0xFFFFuLL);
}

unsigned __int16 *KB::String::operator+@<X0>(KB::String *a1@<X0>, const KB::String *a2@<X1>, KB::String *a3@<X8>)
{
  uint64_t v4 = (unsigned __int16 *)KB::String::String(a3, a1);

  return KB::String::append(v4, a2);
}

unsigned __int16 *KB::String::operator+=(unsigned __int16 *a1, const char *a2)
{
  return a1;
}

unsigned __int16 *KB::String::operator+=(unsigned __int16 *a1, const KB::String *a2)
{
  return a1;
}

BOOL KB::String::equal(KB::String *this, const KB::String *a2, int a3)
{
  void v24[2] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (*((unsigned __int8 *)this + 6) | *((unsigned __int8 *)a2 + 6) || *((void *)this + 1) != *((void *)a2 + 1))
    {
      if (*(unsigned __int16 *)this != *(unsigned __int16 *)a2) {
        return 0;
      }
      if (*(_WORD *)this)
      {
        if (*((void *)this + 1)) {
          __int16 v5 = (const char *)*((void *)this + 1);
        }
        else {
          __int16 v5 = (char *)this + 16;
        }
        if (*((void *)a2 + 1)) {
          __int16 v6 = (const char *)*((void *)a2 + 1);
        }
        else {
          __int16 v6 = (char *)a2 + 16;
        }
        return strcmp(v5, v6) == 0;
      }
    }
    return 1;
  }
  if (*(unsigned __int16 *)this == *(unsigned __int16 *)a2)
  {
    if (!*(_WORD *)this) {
      return 1;
    }
    __int16 v8 = *((void *)this + 1) ? (const char *)*((void *)this + 1) : (char *)this + 16;
    __int16 v9 = *((void *)a2 + 1) ? (const char *)*((void *)a2 + 1) : (char *)a2 + 16;
    if (!strcasecmp(v8, v9)) {
      return 1;
    }
  }
  KB::lower_string(this, 0, (KB::String *)v21);
  KB::lower_string(a2, 0, (KB::String *)v17);
  unsigned __int16 v10 = v23;
  unsigned __int16 v11 = (const char *)v24;
  if (v23) {
    unsigned __int16 v11 = (const char *)v23;
  }
  if (v21[0]) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = "";
  }
  long long v13 = v19;
  uint64_t v14 = (const char *)&v20;
  if (v19) {
    uint64_t v14 = (const char *)v19;
  }
  if (v17[0]) {
    long long v15 = v14;
  }
  else {
    long long v15 = "";
  }
  BOOL v7 = strcmp(v12, v15) == 0;
  if (v13 && v18 == 1)
  {
    free(v13);
    unsigned __int16 v10 = v23;
  }
  if (v10 && v22 == 1) {
    free(v10);
  }
  return v7;
}

BOOL KB::String::starts_with(unsigned __int16 *a1, unsigned __int16 *a2, int a3)
{
  if (*a2 > *a1) {
    return 0;
  }
  uint64_t v4 = (unsigned int (*)(unsigned __int16 *, unsigned __int16 *))MEMORY[0x1E4F14A80];
  if (a3 == 1) {
    uint64_t v4 = (unsigned int (*)(unsigned __int16 *, unsigned __int16 *))MEMORY[0x1E4F14A88];
  }
  if (*((void *)a1 + 1)) {
    __int16 v5 = (unsigned __int16 *)*((void *)a1 + 1);
  }
  else {
    __int16 v5 = a1 + 8;
  }
  if (*((void *)a2 + 1)) {
    __int16 v6 = (unsigned __int16 *)*((void *)a2 + 1);
  }
  else {
    __int16 v6 = a2 + 8;
  }
  return v4(v5, v6) == 0;
}

BOOL KB::String::ends_with(unsigned __int16 *a1, unsigned __int16 *a2, int a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  if (v4 > v5) {
    return 0;
  }
  BOOL v7 = a3 == 1;
  __int16 v8 = (unsigned int (*)(char *, unsigned __int16 *))MEMORY[0x1E4F14A80];
  if (v7) {
    __int16 v8 = (unsigned int (*)(char *, unsigned __int16 *))MEMORY[0x1E4F14A88];
  }
  uint64_t v9 = v5 - v4;
  unsigned __int16 v10 = (unsigned __int16 *)*((void *)a1 + 1);
  if (!v10) {
    unsigned __int16 v10 = a1 + 8;
  }
  if (*((void *)a2 + 1)) {
    unsigned __int16 v11 = (unsigned __int16 *)*((void *)a2 + 1);
  }
  else {
    unsigned __int16 v11 = a2 + 8;
  }
  return v8((char *)v10 + v9, v11) == 0;
}

uint64_t KB::String::hash(KB::String *this, const char *a2)
{
  unsigned int v2 = -1640531527;
  if (a2 >= 2)
  {
    unsigned int v3 = a2 >> 1;
    uint64_t v4 = this;
    do
    {
      unsigned int v5 = v2 + *(unsigned __int8 *)v4;
      int v6 = (v5 << 16) ^ (*((unsigned __int8 *)v4 + 1) << 11);
      uint64_t v4 = (KB::String *)((char *)v4 + 2);
      unsigned int v2 = (v6 ^ v5) + ((v6 ^ v5) >> 11);
      --v3;
    }
    while (v3);
    this = (KB::String *)((char *)this + 2 * (a2 >> 1));
  }
  if (a2) {
    unsigned int v2 = ((v2 + *(unsigned __int8 *)this) ^ ((v2 + *(unsigned __int8 *)this) << 11))
  }
       + (((v2 + *(unsigned __int8 *)this) ^ ((v2 + *(unsigned __int8 *)this) << 11)) >> 17);
  unsigned int v7 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  unsigned int v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
  return v8 ^ (v8 << 10);
}

unsigned __int16 *KB::sbs_string_tokenize@<X0>(unsigned __int16 *this@<X0>, const KB::String *a2@<X1>, void *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v5 = *this;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v5)
  {
    unsigned int v7 = (KB::String *)this;
    if (*(_WORD *)a2)
    {
      unsigned int v8 = (unsigned __int16 *)*((void *)this + 1);
      if (!v8) {
        unsigned int v8 = this + 8;
      }
      *(void *)&long long v26 = v8;
      DWORD2(v26) = 0;
      HIDWORD(v26) = v5;
      LODWORD(v27) = 0;
      KB::String::iterator::initialize((uint64_t *)&v26);
      KB::String::find_first_not_of(v7, a2, (const KB::String::iterator *)&v26, (uint64_t)&v24);
      KB::String::find_first_of(v7, a2, (const KB::String::iterator *)&v24, (uint64_t)&v22);
      while (1)
      {
        int v9 = *(unsigned __int16 *)v7;
        uint64_t v10 = *((void *)v7 + 1) ? *((void *)v7 + 1) : (uint64_t)v7 + 16;
        *(void *)&long long v26 = v10;
        DWORD2(v26) = v9;
        HIDWORD(v26) = v9;
        LODWORD(v27) = 0;
        KB::String::iterator::initialize((uint64_t *)&v26);
        if (DWORD2(v22) == DWORD2(v26))
        {
          uint64_t v30 = v10;
          LODWORD(v31) = v9;
          HIDWORD(v31) = v9;
          int v32 = 0;
          this = (unsigned __int16 *)KB::String::iterator::initialize(&v30);
          if (DWORD2(v24) == v31) {
            break;
          }
        }
        KB::String::String((KB::String *)&v30, (const KB::String::iterator *)&v24, (const KB::String::iterator *)&v22);
        unint64_t v11 = a3[1];
        unint64_t v12 = a3[2];
        if (v11 >= v12)
        {
          uint64_t v14 = (uint64_t)(v11 - *a3) >> 5;
          if ((unint64_t)(v14 + 1) >> 59) {
            abort();
          }
          uint64_t v15 = v12 - *a3;
          uint64_t v16 = v15 >> 4;
          if (v15 >> 4 <= (unint64_t)(v14 + 1)) {
            uint64_t v16 = v14 + 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          int64_t v29 = a3 + 2;
          char v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v17);
          uint64_t v19 = (uint64_t)&v18[32 * v14];
          *(void *)&long long v26 = v18;
          *((void *)&v26 + 1) = v19;
          uint64_t v28 = &v18[32 * v20];
          *(_DWORD *)uint64_t v19 = 0x100000;
          *(_WORD *)(v19 + 4) = 0;
          *(unsigned char *)(v19 + 6) = 0;
          *(void *)(v19 + 8) = 0;
          KB::String::operator=(v19, (KB::String *)&v30);
          uint64_t v27 = v19 + 32;
          std::vector<KB::String>::__swap_out_circular_buffer((uint64_t)a3, &v26);
          uint64_t v13 = a3[1];
          std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v26);
        }
        else
        {
          *(_DWORD *)unint64_t v11 = 0x100000;
          *(_WORD *)(v11 + 4) = 0;
          *(unsigned char *)(v11 + 6) = 0;
          *(void *)(v11 + 8) = 0;
          uint64_t v13 = KB::String::operator=(v11, (KB::String *)&v30) + 32;
        }
        a3[1] = v13;
        if (v31)
        {
          if (BYTE6(v30) == 1) {
            free(v31);
          }
        }
        KB::String::find_first_not_of(v7, a2, (const KB::String::iterator *)&v22, (uint64_t)&v26);
        long long v24 = v26;
        int v25 = v27;
        KB::String::find_first_of(v7, a2, (const KB::String::iterator *)&v24, (uint64_t)&v26);
        long long v22 = v26;
        int v23 = v27;
      }
    }
    else
    {
      int64_t v29 = a3 + 2;
      *(void *)&long long v26 = operator new(0x20uLL);
      *((void *)&v26 + 1) = v26;
      uint64_t v28 = (char *)(v26 + 32);
      KB::String::String((KB::String *)v26, v7);
      uint64_t v27 = v26 + 32;
      std::vector<KB::String>::__swap_out_circular_buffer((uint64_t)a3, &v26);
      uint64_t v21 = a3[1];
      this = (unsigned __int16 *)std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v26);
      a3[1] = v21;
    }
  }
  return this;
}

uint64_t std::vector<KB::String>::__swap_out_circular_buffer(uint64_t result, void *a2)
{
  unsigned int v3 = (uint64_t *)result;
  int v5 = *(KB::String **)result;
  uint64_t v4 = *(KB::String **)(result + 8);
  uint64_t v6 = a2[1];
  if (v4 != *(KB::String **)result)
  {
    double result = v6 - 32;
    do
    {
      uint64_t v4 = (KB::String *)((char *)v4 - 32);
      *(_DWORD *)double result = 0x100000;
      *(_WORD *)(result + 4) = 0;
      *(unsigned char *)(result + 6) = 0;
      *(void *)(result + 8) = 0;
      double result = KB::String::operator=(result, v4) - 32;
    }
    while (v4 != v5);
    uint64_t v6 = result + 32;
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

unsigned __int16 *KB::string_split_after@<X0>(unsigned __int16 *this@<X0>, const KB::String *a2@<X1>, void *a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v5 = *this;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v5)
  {
    uint64_t v7 = (KB::String *)this;
    if (*(_WORD *)a2)
    {
      uint64_t v8 = (void *)*((void *)this + 1);
      if (v8) {
        uint64_t v9 = (unsigned __int16 *)*((void *)this + 1);
      }
      else {
        uint64_t v9 = this + 8;
      }
      *(void *)&long long v24 = v9;
      DWORD2(v24) = 0;
      HIDWORD(v24) = v5;
      LODWORD(v25) = 0;
      KB::String::iterator::initialize((uint64_t *)&v24);
      while (1)
      {
        uint64_t v10 = v8 ? v8 : (void *)((char *)v7 + 16);
        *(void *)&long long v26 = v10;
        DWORD2(v26) = v5;
        HIDWORD(v26) = v5;
        LODWORD(v27) = 0;
        this = (unsigned __int16 *)KB::String::iterator::initialize((uint64_t *)&v26);
        if (DWORD2(v24) == DWORD2(v26)) {
          break;
        }
        long long v22 = v24;
        uint64_t v23 = v25;
        KB::String::find_first_of(v7, a2, (const KB::String::iterator *)&v22, (uint64_t)&v26);
        long long v22 = v26;
        LODWORD(v23) = v27;
        KB::String::find_first_not_of(v7, a2, (const KB::String::iterator *)&v22, (uint64_t)&v26);
        long long v22 = v26;
        LODWORD(v23) = v27;
        KB::String::String((KB::String *)v30, (const KB::String::iterator *)&v24, (const KB::String::iterator *)&v22);
        unint64_t v11 = a3[1];
        unint64_t v12 = a3[2];
        if (v11 >= v12)
        {
          uint64_t v14 = (uint64_t)(v11 - *a3) >> 5;
          if ((unint64_t)(v14 + 1) >> 59) {
            abort();
          }
          uint64_t v15 = v12 - *a3;
          uint64_t v16 = v15 >> 4;
          if (v15 >> 4 <= (unint64_t)(v14 + 1)) {
            uint64_t v16 = v14 + 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          int64_t v29 = a3 + 2;
          char v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v17);
          uint64_t v19 = (uint64_t)&v18[32 * v14];
          *(void *)&long long v26 = v18;
          *((void *)&v26 + 1) = v19;
          uint64_t v28 = &v18[32 * v20];
          *(_DWORD *)uint64_t v19 = 0x100000;
          *(_WORD *)(v19 + 4) = 0;
          *(unsigned char *)(v19 + 6) = 0;
          *(void *)(v19 + 8) = 0;
          KB::String::operator=(v19, (KB::String *)v30);
          uint64_t v27 = v19 + 32;
          std::vector<KB::String>::__swap_out_circular_buffer((uint64_t)a3, &v26);
          uint64_t v13 = a3[1];
          std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v26);
        }
        else
        {
          *(_DWORD *)unint64_t v11 = 0x100000;
          *(_WORD *)(v11 + 4) = 0;
          *(unsigned char *)(v11 + 6) = 0;
          *(void *)(v11 + 8) = 0;
          uint64_t v13 = KB::String::operator=(v11, (KB::String *)v30) + 32;
        }
        a3[1] = v13;
        if (v31)
        {
          if (v30[6] == 1) {
            free(v31);
          }
        }
        long long v24 = v22;
        LODWORD(v25) = v23;
        int v5 = *(unsigned __int16 *)v7;
        uint64_t v8 = (void *)*((void *)v7 + 1);
      }
    }
    else
    {
      int64_t v29 = a3 + 2;
      *(void *)&long long v26 = operator new(0x20uLL);
      *((void *)&v26 + 1) = v26;
      uint64_t v28 = (char *)(v26 + 32);
      KB::String::String((KB::String *)v26, v7);
      uint64_t v27 = v26 + 32;
      std::vector<KB::String>::__swap_out_circular_buffer((uint64_t)a3, &v26);
      uint64_t v21 = a3[1];
      this = (unsigned __int16 *)std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v26);
      a3[1] = v21;
    }
  }
  return this;
}

void KB::word_ranges(KB *this@<X0>, const KB::String *a2@<X1>, unint64_t **a3@<X8>)
{
  char v3 = (char)a2;
  if (*((void *)this + 1)) {
    int v5 = (char *)*((void *)this + 1);
  }
  else {
    int v5 = (char *)this + 16;
  }
  *(void *)&long long v48 = v5;
  int v6 = *(unsigned __int16 *)this;
  DWORD2(v48) = 0;
  HIDWORD(v48) = v6;
  LODWORD(v49) = 0;
  KB::String::iterator::initialize((uint64_t *)&v48);
  int v44 = v5;
  int v45 = v6;
  int v46 = v6;
  int v47 = 0;
  KB::String::iterator::initialize((uint64_t *)&v44);
  long long v50 = v48;
  uint64_t v51 = v49;
  int v7 = v45;
  if (DWORD2(v48) == v45)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v10 = -1;
    do
    {
      unint64_t v11 = v10;
      KB::String::iterator::operator++((uint64_t *)&v50);
      unint64_t v10 = v11 + 1;
    }
    while (DWORD2(v50) != v7);
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
LABEL_68:
    }
      abort();
    unint64_t v12 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v11 + 2);
    uint64_t v8 = v12;
    long long v50 = v48;
    uint64_t v51 = v49;
    uint64_t v9 = v12;
    if (DWORD2(v48) != v7)
    {
      uint64_t v9 = v12;
      do
      {
        *(_DWORD *)uint64_t v9 = v51;
        v9 += 4;
        KB::String::iterator::operator++((uint64_t *)&v50);
      }
      while (DWORD2(v50) != v7);
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v13 = v9 - v8;
  if (v9 - v8 != -4)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    unsigned int v16 = 0;
    unint64_t v17 = v13 >> 2;
    uint64_t v42 = v13 >> 2;
    unint64_t v43 = (v13 >> 2) + 1;
    LODWORD(v18) = -1;
    char v41 = v3;
    long long v40 = a3;
    do
    {
      if (v17 == v15
        || (TI::Favonius::KeyClassification::KeyClassification((TI::Favonius::KeyClassification *)&v50, *(_DWORD *)&v8[4 * v15]), (v50 & 0x34E) == 0))
      {
        if (v18 == -1) {
          goto LABEL_47;
        }
        if (v18 < v16)
        {
          uint64_t v18 = (int)v18;
          while (1)
          {
            UChar32 v19 = *(_DWORD *)&v8[4 * v18];
            int v20 = u_ispunct(v19);
            if (v19 == 38 || v20 == 0) {
              break;
            }
            if (v16 <= ++v18)
            {
              LODWORD(v18) = v16;
              break;
            }
          }
        }
        if (v17 == v15) {
          char v22 = v3;
        }
        else {
          char v22 = 1;
        }
        if (v17 > v15 || (unsigned int v23 = v16, (v22 & 1) == 0))
        {
          unint64_t v24 = v16;
          if (v18 >= v16) {
            unsigned int v23 = v16;
          }
          else {
            unsigned int v23 = v18;
          }
          while (v24 > v18)
          {
            unint64_t v25 = v24--;
            UChar32 v26 = *(_DWORD *)&v8[4 * v25 - 4];
            int v27 = u_ispunct(v26);
            if (v26 == 38 || v27 == 0)
            {
              unsigned int v23 = v25;
              break;
            }
          }
          char v3 = v41;
          a3 = v40;
          unint64_t v17 = v42;
        }
        if (v23 <= v18)
        {
LABEL_47:
          LODWORD(v18) = -1;
        }
        else
        {
          unint64_t v29 = v18 | ((unint64_t)(v23 - v18) << 32);
          unint64_t v30 = (unint64_t)a3[2];
          if ((unint64_t)v14 >= v30)
          {
            uint64_t v32 = *a3;
            uint64_t v33 = v14 - *a3;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61) {
              goto LABEL_68;
            }
            uint64_t v35 = v30 - (void)v32;
            if (v35 >> 2 > v34) {
              unint64_t v34 = v35 >> 2;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              if (v36 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              long long v37 = (char *)operator new(8 * v36);
            }
            else
            {
              long long v37 = 0;
            }
            long long v38 = (unint64_t *)&v37[8 * v33];
            *long long v38 = v29;
            uint64_t v31 = v38 + 1;
            if (v14 != v32)
            {
              do
              {
                unint64_t v39 = *--v14;
                *--long long v38 = v39;
              }
              while (v14 != v32);
              uint64_t v14 = *a3;
            }
            *a3 = v38;
            a3[1] = v31;
            a3[2] = (unint64_t *)&v37[8 * v36];
            if (v14) {
              operator delete(v14);
            }
          }
          else
          {
            *uint64_t v14 = v29;
            uint64_t v31 = v14 + 1;
          }
          a3[1] = v31;
          LODWORD(v18) = -1;
          uint64_t v14 = v31;
          unint64_t v17 = v42;
        }
      }
      else if (v18 == -1)
      {
        LODWORD(v18) = v16;
      }
      unint64_t v15 = ++v16;
    }
    while (v43 > v16);
  }
  if (v8) {
    operator delete(v8);
  }
}

BOOL KB::character_is_stop_input(KB *this)
{
  int v1 = (int)this;
  int v2 = u_ispunct((UChar32)this);
  return v1 != 38 && v2 != 0;
}

unsigned __int16 *KB::string_join@<X0>(unsigned __int16 **a1@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  return KB::string_join(*a1, a1[1], a2, a3);
}

unsigned __int16 *KB::string_join@<X0>(unsigned __int16 *result@<X0>, unsigned __int16 *a2@<X1>, const KB::String *a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0x100000;
  *(_WORD *)(a4 + 4) = 0;
  *(unsigned char *)(a4 + 6) = 0;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  if (result != a2)
  {
    int v5 = (const KB::String *)result;
    int v6 = (const KB::String *)(a2 - 16);
    if (a2 - 16 != result)
    {
      do
      {
        KB::String::append((unsigned __int16 *)a4, v5);
        KB::String::append((unsigned __int16 *)a4, a3);
        int v5 = (const KB::String *)((char *)v5 + 32);
      }
      while (v5 != v6);
    }
    return KB::String::append((unsigned __int16 *)a4, v6);
  }
  return result;
}

BOOL KB::string_has_lowercase_characters(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  do
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    UChar32 v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (!u_islower(v4));
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 < v3;
}

BOOL KB::string_has_only_lowercase_characters(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  do
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    UChar32 v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (u_islower(v4));
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 >= v3;
}

BOOL KB::string_has_uppercase_characters(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  do
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    UChar32 v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (!u_isupper(v4));
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 < v3;
}

BOOL KB::string_has_only_uppercase_characters(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  do
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    UChar32 v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (u_isupper(v4));
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 >= v3;
}

BOOL KB::any_of_string_characters_in_set(KB *this, const KB::String *a2, const USet *a3)
{
  if (*((void *)this + 1)) {
    UChar32 v4 = (char *)*((void *)this + 1);
  }
  else {
    UChar32 v4 = (char *)this + 16;
  }
  uint64_t v13 = v4;
  int v5 = *(unsigned __int16 *)this;
  int v14 = 0;
  int v15 = v5;
  unsigned int v16 = 0;
  KB::String::iterator::initialize((uint64_t *)&v13);
  char v9 = v4;
  int v10 = v5;
  int v11 = v5;
  int v12 = 0;
  KB::String::iterator::initialize((uint64_t *)&v9);
  BOOL result = 0;
  int v7 = v10;
  if (v14 != v10)
  {
    while (1)
    {
      int v8 = MEMORY[0x1E4E7CD40](a2, v16);
      BOOL result = v8 != 0;
      if (v8) {
        break;
      }
      KB::String::iterator::operator++((uint64_t *)&v13);
      if (v14 == v7) {
        return 0;
      }
    }
  }
  return result;
}

BOOL KB::all_of_string_characters_in_set(KB *this, const KB::String *a2, const USet *a3)
{
  if (*((void *)this + 1)) {
    UChar32 v4 = (char *)*((void *)this + 1);
  }
  else {
    UChar32 v4 = (char *)this + 16;
  }
  int v14 = v4;
  int v5 = *(unsigned __int16 *)this;
  int v15 = 0;
  int v16 = v5;
  unsigned int v17 = 0;
  KB::String::iterator::initialize((uint64_t *)&v14);
  int v10 = v4;
  int v11 = v5;
  int v12 = v5;
  int v13 = 0;
  KB::String::iterator::initialize((uint64_t *)&v10);
  int v6 = v15;
  int v7 = v11;
  while (v6 != v7)
  {
    int v8 = MEMORY[0x1E4E7CD40](a2, v17);
    BOOL result = v8 != 0;
    if (!v8) {
      return result;
    }
    KB::String::iterator::operator++((uint64_t *)&v14);
    int v6 = v15;
  }
  return 1;
}

BOOL KB::none_of_string_characters_in_set(KB *this, const KB::String *a2, const USet *a3)
{
  if (*((void *)this + 1)) {
    UChar32 v4 = (char *)*((void *)this + 1);
  }
  else {
    UChar32 v4 = (char *)this + 16;
  }
  int v14 = v4;
  int v5 = *(unsigned __int16 *)this;
  int v15 = 0;
  int v16 = v5;
  unsigned int v17 = 0;
  KB::String::iterator::initialize((uint64_t *)&v14);
  int v10 = v4;
  int v11 = v5;
  int v12 = v5;
  int v13 = 0;
  KB::String::iterator::initialize((uint64_t *)&v10);
  int v6 = v15;
  int v7 = v11;
  while (v6 != v7)
  {
    int v8 = MEMORY[0x1E4E7CD40](a2, v17);
    BOOL result = v8 == 0;
    if (v8) {
      return result;
    }
    KB::String::iterator::operator++((uint64_t *)&v14);
    int v6 = v15;
  }
  return 1;
}

uint64_t KB::count_uppercase_letters(KB *this, const KB::String *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v8, this);
  unsigned int v2 = 0;
  uint64_t v3 = 0;
  for (int i = 0; ; v2 = HIWORD(i))
  {
    unsigned int v4 = v9;
    if (!v9)
    {
      KB::String::compute_length(v8);
      unsigned int v4 = v9;
    }
    if (v2 >= v4) {
      break;
    }
    UChar32 v5 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v8);
    if (u_isupper(v5)) {
      uint64_t v3 = (v3 + 1);
    }
    else {
      uint64_t v3 = v3;
    }
  }
  if (v11) {
    BOOL v6 = v10 == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    free(v11);
  }
  return v3;
}

uint64_t KB::count_characters_UTF8(KB *this, const KB::String *a2, int a3, int a4)
{
  unsigned int v6 = a2;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v15, this);
  unsigned int v7 = 0;
  uint64_t v8 = 0;
  int v19 = 0;
  while (1)
  {
    unsigned int v9 = v16;
    if (!v16)
    {
      KB::String::compute_length(v15);
      unsigned int v9 = v16;
    }
    if (v7 >= v9) {
      break;
    }
    int v10 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v15);
    BOOL v11 = v10 == a3 || v10 == a4;
    unsigned int v7 = HIWORD(v19);
    if (v11 && HIWORD(v19) > v6) {
      uint64_t v8 = (v8 + 1);
    }
    else {
      uint64_t v8 = v8;
    }
  }
  if (v18) {
    BOOL v13 = v17 == 1;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13) {
    free(v18);
  }
  return v8;
}

uint64_t KB::count_letters_if_word(KB *this, const KB::String *a2)
{
  if (*((void *)this + 1)) {
    uint64_t v3 = (char *)*((void *)this + 1);
  }
  else {
    uint64_t v3 = (char *)this + 16;
  }
  *(void *)&long long v21 = v3;
  int v4 = *(unsigned __int16 *)this;
  DWORD2(v21) = 0;
  HIDWORD(v21) = v4;
  LODWORD(v22) = 0;
  KB::String::iterator::initialize((uint64_t *)&v21);
  char v17 = v3;
  int v18 = v4;
  int v19 = v4;
  int v20 = 0;
  KB::String::iterator::initialize((uint64_t *)&v17);
  unsigned int v5 = 0;
  long long v15 = v21;
  uint64_t v16 = v22;
  int v6 = v18;
  int v7 = DWORD2(v21);
LABEL_5:
  int v8 = DWORD2(v15);
  while (v8 != v6)
  {
    UChar32 v9 = v16;
    KB::String::iterator::operator++((uint64_t *)&v15);
    if ((v9 - 38) >= 2 && (v9 - 1523) >= 2 && v9 != 8217)
    {
      int8_t v12 = u_charType(v9);
      v5 += (0x3Eu >> v12) & 1;
      if (((1 << v12) & 0x40003FE) == 0) {
        return 0;
      }
      goto LABEL_5;
    }
    uint64_t result = 0;
    if (v8 != v7)
    {
      int v8 = DWORD2(v15);
      if (DWORD2(v15) != v6) {
        continue;
      }
    }
    return result;
  }
  if (!v5) {
    return 0;
  }
  unsigned int v13 = *((unsigned __int16 *)this + 2);
  if (!*((_WORD *)this + 2))
  {
    KB::String::compute_length((unsigned __int16 *)this);
    unsigned int v13 = *((unsigned __int16 *)this + 2);
  }
  if (v13 - v5 >= 4 || (float)((float)v5 / (float)v13) < 0.49) {
    return 0;
  }
  else {
    return v5;
  }
}

BOOL KB::character_is_word_medial_punctuation(KB *this)
{
  BOOL v1 = (this - 1523) < 2 || this == 8217;
  return (this - 38) < 2 || v1;
}

BOOL KB::string_is_learnable_word(KB *this, const KB::String *a2)
{
  return KB::count_letters_if_word(this, a2) != 0;
}

uint64_t KB::strings_have_same_digraphs(KB *this, const KB::String *a2, const KB::String *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v27, a2);
  int v31 = 0;
  KB::String::String((KB::String *)v22, this);
  int v26 = 0;
  while (1)
  {
    unsigned int v4 = HIWORD(v31);
    unsigned int v5 = v28;
    if (!v28)
    {
      KB::String::compute_length(v27);
      unsigned int v5 = v28;
    }
    if (v4 >= v5) {
      break;
    }
    unsigned int v6 = HIWORD(v26);
    unsigned int v7 = v23;
    if (!v23)
    {
      KB::String::compute_length(v22);
      unsigned int v7 = v23;
    }
    if (v6 >= v7) {
      break;
    }
    do
    {
      uint64_t v8 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v27);
      UChar32 v9 = (KB *)v8;
      if ((v8 - 38) >= 2 && (v8 - 1523) >= 2 && v8 != 8217) {
        break;
      }
      unsigned int v11 = HIWORD(v31);
      unsigned int v12 = v28;
      if (!v28)
      {
        KB::String::compute_length(v27);
        unsigned int v12 = v28;
      }
    }
    while (v11 < v12);
    do
    {
      uint64_t v13 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v22);
      int v14 = (KB *)v13;
      if ((v13 - 38) >= 2 && (v13 - 1523) >= 2 && v13 != 8217) {
        break;
      }
      unsigned int v16 = HIWORD(v26);
      unsigned int v17 = v23;
      if (!v23)
      {
        KB::String::compute_length(v22);
        unsigned int v17 = v23;
      }
    }
    while (v16 < v17);
    int is_digraph = KB::character_is_digraph(v9);
    if (is_digraph != KB::character_is_digraph(v14))
    {
      uint64_t v19 = 0;
      goto LABEL_29;
    }
  }
  uint64_t v19 = 1;
LABEL_29:
  if (v25) {
    BOOL v20 = v24 == 1;
  }
  else {
    BOOL v20 = 0;
  }
  if (v20) {
    free(v25);
  }
  if (v30 && v29 == 1) {
    free(v30);
  }
  return v19;
}

uint64_t KB::character_is_digraph(KB *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 <= 337)
  {
    unsigned int v3 = v1 - 197;
    if (v3 <= 0x21 && ((1 << v3) & 0x304000003) != 0) {
      return result;
    }
    return 0;
  }
  if ((v1 - 338) >= 2 && (v1 - 2507) >= 2 && v1 != 3635) {
    return 0;
  }
  return result;
}

uint64_t KB::count_precomposed_diacritic_letters(KB *this, const KB::String *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v8, this);
  unsigned int v2 = 0;
  uint64_t v3 = 0;
  for (int i = 0; ; v2 = HIWORD(i))
  {
    unsigned int v4 = v9;
    if (!v9)
    {
      KB::String::compute_length(v8);
      unsigned int v4 = v9;
    }
    if (v2 >= v4) {
      break;
    }
    unsigned int v5 = (KB *)KB::UTF8Iterator::next((KB::UTF8Iterator *)v8);
    uint64_t v3 = (v3 + KB::character_is_precomposed_diacritic_letter(v5));
  }
  if (v11) {
    BOOL v6 = v10 == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    free(v11);
  }
  return v3;
}

BOOL KB::character_is_precomposed_diacritic_letter(KB *this)
{
  UChar32 v1 = (int)this;
  return !u_getIntPropertyValue((UChar32)this, UCHAR_LEAD_CANONICAL_COMBINING_CLASS)
      && u_getIntPropertyValue(v1, UCHAR_TRAIL_CANONICAL_COMBINING_CLASS) != 0;
}

BOOL KB::string_has_precomposed_diacritic_letters(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  do
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    unsigned int v4 = (KB *)KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (!KB::character_is_precomposed_diacritic_letter(v4));
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 < v3;
}

BOOL KB::string_has_separated_diacritics(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  do
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    UChar32 v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (((1 << u_charType(v4)) & 0x4000050) == 0);
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 < v3;
}

BOOL KB::character_is_separated_diacritic_letter(KB *this)
{
  return ((1 << u_charType((UChar32)this)) & 0x4000050) != 0;
}

BOOL KB::string_has_spaces(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  do
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    UChar32 v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (u_charType(v4) != 12);
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 < v3;
}

BOOL KB::strings_have_spaces_in_same_positions(KB *this, const KB::String *a2, const KB::String *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v18, this);
  int v22 = 0;
  KB::String::String((KB::String *)v13, a2);
  int v17 = 0;
  do
  {
    unsigned int v4 = HIWORD(v17);
    unsigned int v5 = v14;
    if (!v14)
    {
      KB::String::compute_length(v13);
      unsigned int v5 = v14;
    }
    if (v4 >= v5) {
      break;
    }
    unsigned int v6 = HIWORD(v22);
    unsigned int v7 = v19;
    if (!v19)
    {
      KB::String::compute_length(v18);
      unsigned int v7 = v19;
    }
    if (v6 >= v7) {
      break;
    }
    UChar32 v8 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v18);
    UChar32 v9 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v13);
    BOOL v10 = u_charType(v8) != 12;
  }
  while (((v10 ^ (u_charType(v9) == 12)) & 1) != 0);
  if (v16) {
    BOOL v11 = v15 == 1;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11) {
    free(v16);
  }
  if (v21 && v20 == 1) {
    free(v21);
  }
  return v4 >= v5;
}

BOOL KB::string_has_letters(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  do
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    UChar32 v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (((1 << u_charType(v4)) & 0x3E) == 0);
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 < v3;
}

uint64_t KB::count_letters(KB *this, const KB::String *a2)
{
  if (*((void *)this + 1)) {
    unsigned int v2 = (char *)*((void *)this + 1);
  }
  else {
    unsigned int v2 = (char *)this + 16;
  }
  int v11 = v2;
  int v3 = *(unsigned __int16 *)this;
  int v12 = 0;
  int v13 = v3;
  UChar32 c = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  unsigned int v7 = v2;
  int v8 = v3;
  int v9 = v3;
  int v10 = 0;
  KB::String::iterator::initialize((uint64_t *)&v7);
  uint64_t v4 = 0;
  int v5 = v8;
  if (v12 != v8)
  {
    LODWORD(v4) = 0;
    do
    {
      uint64_t v4 = ((0x3Eu >> u_charType(c)) & 1) + v4;
      KB::String::iterator::operator++((uint64_t *)&v11);
    }
    while (v12 != v5);
  }
  return v4;
}

BOOL KB::string_has_numbers(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  do
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    UChar32 v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (u_charType(v4) != 9);
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 < v3;
}

uint64_t KB::count_numbers(KB *this, const KB::String *a2)
{
  if (*((void *)this + 1)) {
    unsigned int v2 = (char *)*((void *)this + 1);
  }
  else {
    unsigned int v2 = (char *)this + 16;
  }
  int v11 = v2;
  int v3 = *(unsigned __int16 *)this;
  int v12 = 0;
  int v13 = v3;
  UChar32 c = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  unsigned int v7 = v2;
  int v8 = v3;
  int v9 = v3;
  int v10 = 0;
  KB::String::iterator::initialize((uint64_t *)&v7);
  uint64_t v4 = 0;
  int v5 = v8;
  if (v12 != v8)
  {
    LODWORD(v4) = 0;
    do
    {
      if (u_charType(c) == 9) {
        uint64_t v4 = (v4 + 1);
      }
      else {
        uint64_t v4 = v4;
      }
      KB::String::iterator::operator++((uint64_t *)&v11);
    }
    while (v12 != v5);
  }
  return v4;
}

BOOL KB::string_has_nonnumbers(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  do
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    UChar32 v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (u_charType(v4) == 9);
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 < v3;
}

BOOL KB::strings_have_diacritics_in_same_positions(KB *this, const KB::String *a2, const KB::String *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *((unsigned __int16 *)a2 + 2);
  if (!*((_WORD *)a2 + 2))
  {
    KB::String::compute_length((unsigned __int16 *)a2);
    unsigned int v5 = *((unsigned __int16 *)a2 + 2);
  }
  int v6 = *((unsigned __int16 *)this + 2);
  if (!*((_WORD *)this + 2))
  {
    KB::String::compute_length((unsigned __int16 *)this);
    int v6 = *((unsigned __int16 *)this + 2);
  }
  KB::String::String((KB::String *)v20, this);
  int v22 = 0;
  KB::String::String((KB::String *)v17, a2);
  int v19 = 0;
  if (v5)
  {
    BOOL v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = v6 - 1;
    while (1)
    {
      uint64_t v10 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v20);
      UChar32 v11 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v17);
      if (v8 >= v5 - 1) {
        UChar32 v12 = 0;
      }
      else {
        UChar32 v12 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v17);
      }
      if (v8 >= v9) {
        UChar32 v13 = 0;
      }
      else {
        UChar32 v13 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v20);
      }
      unsigned __int16 v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FAF010];
      if (v12 > 710)
      {
        switch(v12)
        {
          case 711:
            int v15 = MEMORY[0x1E4FAF018](v10);
            goto LABEL_26;
          case 730:
            unsigned __int16 v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FAF040];
LABEL_25:
            int v15 = v14(v10);
LABEL_26:
            if (v15 == v10) {
              goto LABEL_36;
            }
            break;
          case 715:
            int v15 = MEMORY[0x1E4FAF030](v10);
            goto LABEL_26;
        }
      }
      else
      {
        switch(v12)
        {
          case 175:
            int v15 = MEMORY[0x1E4FAF038](v10);
            goto LABEL_26;
          case 180:
            goto LABEL_25;
          case 710:
            int v15 = MEMORY[0x1E4FAF020](v10);
            goto LABEL_26;
        }
      }
      if (u_charType(v11) != 6 || u_charType(v10) == 6)
      {
        if (((0x4000050u >> u_charType(v12)) & 1) == 0) {
          KB::UTF8Iterator::prev((KB::UTF8Iterator *)v17);
        }
        if (((0x4000050u >> u_charType(v13)) & 1) == 0) {
          KB::UTF8Iterator::prev((KB::UTF8Iterator *)v20);
        }
        BOOL v7 = ++v8 >= v5;
        if (v5 != v8) {
          continue;
        }
      }
      goto LABEL_36;
    }
  }
  BOOL v7 = 1;
LABEL_36:
  if (v18 && v17[6] == 1) {
    free(v18);
  }
  if (v21 && v20[6] == 1) {
    free(v21);
  }
  return v7;
}

uint64_t KB::strings_have_same_precomposed_diacritic_letters(KB *a1, KB *a2, uint64_t a3, const KB::String *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  KB::lower_string(a1, a4, (KB::String *)v43);
  KB::lower_string(a2, a4, (KB::String *)v41);
  KB::String::String((KB::String *)v36, (const KB::String *)v41);
  int v40 = 0;
  KB::String::String((KB::String *)v31, (const KB::String *)v43);
  int v35 = 0;
  while (1)
  {
    unsigned int v7 = HIWORD(v40);
    unsigned int v8 = v37;
    if (!v37)
    {
      KB::String::compute_length(v36);
      unsigned int v8 = v37;
    }
    if (v7 >= v8) {
      break;
    }
    unsigned int v9 = HIWORD(v35);
    unsigned int v10 = v32;
    if (!v32)
    {
      KB::String::compute_length(v31);
      unsigned int v10 = v32;
    }
    if (v9 >= v10) {
      break;
    }
    do
    {
      uint64_t v11 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v36);
      UChar32 v12 = (KB *)v11;
      if ((v11 - 38) >= 2 && (v11 - 1523) >= 2 && v11 != 8217) {
        break;
      }
      unsigned int v14 = HIWORD(v40);
      unsigned int v15 = v37;
      if (!v37)
      {
        KB::String::compute_length(v36);
        unsigned int v15 = v37;
      }
    }
    while (v14 < v15);
    do
    {
      unsigned int v16 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v31);
      unsigned int v17 = v16;
      if (v16 - 38 >= 2 && v16 - 1523 >= 2 && v16 != 8217) {
        break;
      }
      unsigned int v19 = HIWORD(v35);
      unsigned int v20 = v32;
      if (!v32)
      {
        KB::String::compute_length(v31);
        unsigned int v20 = v32;
      }
    }
    while (v19 < v20);
    BOOL is_precomposed_diacritic_letter = KB::character_is_precomposed_diacritic_letter(v12);
    if (v12 != v17 && is_precomposed_diacritic_letter)
    {
      KB::String::String((uint64_t)v29, v12);
      KB::String::String((uint64_t)v27, v17);
      uint64_t v22 = *(void *)(a3 + 24);
      if (!v22) {
        std::__throw_bad_function_call[abi:nn180100]();
      }
      int v23 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)v22 + 48))(v22, v29, v27);
      if (v28 && v27[6] == 1) {
        free(v28);
      }
      if (v30 && v29[6] == 1) {
        free(v30);
      }
      if (v23)
      {
        uint64_t v24 = 0;
        goto LABEL_38;
      }
    }
  }
  uint64_t v24 = 1;
LABEL_38:
  if (v34) {
    BOOL v25 = v33 == 1;
  }
  else {
    BOOL v25 = 0;
  }
  if (v25) {
    free(v34);
  }
  if (v39 && v38 == 1) {
    free(v39);
  }
  if (v42 && v41[6] == 1) {
    free(v42);
  }
  if (v44 && v43[6] == 1) {
    free(v44);
  }
  return v24;
}

BOOL KB::string_has_digraphs(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  do
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    UChar32 v4 = (KB *)KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (!KB::character_is_digraph(v4));
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 < v3;
}

BOOL KB::string_has_word_medial_punctuation(KB *this, const KB::String *a2)
{
  int v2 = *(unsigned __int16 *)this;
  if (*((void *)this + 1)) {
    unsigned int v3 = (char *)*((void *)this + 1);
  }
  else {
    unsigned int v3 = (char *)this + 16;
  }
  unsigned int v16 = v3;
  int v17 = v2;
  int v18 = v2;
  int v19 = 0;
  KB::String::iterator::initialize((uint64_t *)&v16);
  uint64_t v12 = v3;
  int v13 = 0;
  int v14 = v2;
  int v15 = 0;
  KB::String::iterator::initialize((uint64_t *)&v12);
  unsigned __int16 v8 = v3;
  int v9 = v2;
  int v10 = v2;
  int v11 = 0;
  KB::String::iterator::initialize((uint64_t *)&v8);
  int v4 = v13;
  int v5 = v9;
  if (v13 != v9)
  {
    while ((v15 - 38) >= 2)
    {
      if ((v15 - 1523) < 2 || v15 == 8217) {
        break;
      }
      KB::String::iterator::operator++((uint64_t *)&v12);
      int v4 = v13;
      if (v13 == v5)
      {
        int v4 = v5;
        return v17 != v4;
      }
    }
  }
  return v17 != v4;
}

uint64_t KB::count_word_medial_punctuation(KB *this, const KB::String *a2)
{
  if (*((void *)this + 1)) {
    int v2 = (char *)*((void *)this + 1);
  }
  else {
    int v2 = (char *)this + 16;
  }
  int v13 = v2;
  int v3 = *(unsigned __int16 *)this;
  int v14 = 0;
  int v15 = v3;
  int v16 = 0;
  KB::String::iterator::initialize((uint64_t *)&v13);
  int v9 = v2;
  int v10 = v3;
  int v11 = v3;
  int v12 = 0;
  KB::String::iterator::initialize((uint64_t *)&v9);
  uint64_t v4 = 0;
  int v5 = v10;
  if (v14 != v10)
  {
    LODWORD(v4) = 0;
    do
    {
      BOOL v7 = (v16 - 1523) < 2 || v16 == 8217;
      if ((v16 - 38) < 2) {
        BOOL v7 = 1;
      }
      uint64_t v4 = (v7 + v4);
      KB::String::iterator::operator++((uint64_t *)&v13);
    }
    while (v14 != v5);
  }
  return v4;
}

uint64_t KB::string_contains_run(KB *this, const KB::String *a2)
{
  int v2 = (int)a2;
  if (*((void *)this + 1)) {
    int v3 = (char *)*((void *)this + 1);
  }
  else {
    int v3 = (char *)this + 16;
  }
  int v14 = v3;
  int v4 = *(unsigned __int16 *)this;
  int v15 = 0;
  int v16 = v4;
  int v17 = 0;
  KB::String::iterator::initialize((uint64_t *)&v14);
  int v10 = v3;
  int v11 = v4;
  int v12 = v4;
  int v13 = 0;
  KB::String::iterator::initialize((uint64_t *)&v10);
  int v5 = v11;
  if (v15 == v11) {
    return 0;
  }
  int v6 = 0;
  int v7 = 0;
  while (1)
  {
    int v8 = v17;
    if (v17 == v7) {
      ++v6;
    }
    else {
      int v6 = 1;
    }
    if (v6 >= v2) {
      break;
    }
    KB::String::iterator::operator++((uint64_t *)&v14);
    int v7 = v8;
    if (v15 == v5) {
      return 0;
    }
  }
  return 1;
}

uint64_t KB::string_contains_pair_run(KB *this, const KB::String *a2)
{
  int v2 = (int)a2;
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  v19[0] = 0;
  if (*((void *)this + 1)) {
    int v3 = (char *)*((void *)this + 1);
  }
  else {
    int v3 = (char *)this + 16;
  }
  int v14 = v3;
  int v4 = *(unsigned __int16 *)this;
  int v15 = 0;
  int v16 = v4;
  int v17 = 0;
  KB::String::iterator::initialize((uint64_t *)&v14);
  int v10 = v3;
  int v11 = v4;
  int v12 = v4;
  int v13 = 0;
  KB::String::iterator::initialize((uint64_t *)&v10);
  int v5 = v11;
  if (v15 == v11) {
    return 0;
  }
  BOOL v6 = 0;
  while (1)
  {
    if (v17 == *((_DWORD *)v19 + v6))
    {
      int v7 = *((_DWORD *)&v19[-1] + v6) + 1;
    }
    else
    {
      *((_DWORD *)v19 + v6) = v17;
      int v7 = 1;
    }
    *((_DWORD *)&v19[-1] + v6) = v7;
    int v8 = HIDWORD(v18);
    if (SHIDWORD(v18) >= (int)v18) {
      int v8 = v18;
    }
    if (v8 >= v2) {
      break;
    }
    BOOL v6 = !v6;
    KB::String::iterator::operator++((uint64_t *)&v14);
    if (v15 == v5) {
      return 0;
    }
  }
  return 1;
}

BOOL KB::string_contains_terminal_run(KB *this, const KB::String *a2)
{
  int v2 = (int)a2;
  int v4 = *((unsigned __int16 *)this + 2);
  if (!*((_WORD *)this + 2))
  {
    KB::String::compute_length((unsigned __int16 *)this);
    int v4 = *((unsigned __int16 *)this + 2);
  }
  if (v4 < v2) {
    return 0;
  }
  int v6 = KB::String::last(this);
  int v7 = *(unsigned __int16 *)this;
  if (*((void *)this + 1)) {
    int v8 = (char *)*((void *)this + 1);
  }
  else {
    int v8 = (char *)this + 16;
  }
  *(void *)&long long v15 = v8;
  DWORD2(v15) = v7;
  HIDWORD(v15) = v7;
  LODWORD(v16) = 0;
  KB::String::iterator::initialize((uint64_t *)&v15);
  long long v17 = v15;
  uint64_t v18 = v16;
  std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v17, -v2);
  *(void *)&long long v11 = v8;
  DWORD2(v11) = v7;
  HIDWORD(v11) = v7;
  LODWORD(v12) = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  long long v13 = v11;
  uint64_t v14 = v12;
  KB::String::iterator::operator--((KB::String::iterator *)&v13);
  int v9 = DWORD2(v17);
  int v10 = DWORD2(v13);
  while (v9 != v10)
  {
    BOOL result = v18 == v6;
    if (v18 != v6) {
      return result;
    }
    KB::String::iterator::operator++((uint64_t *)&v17);
    int v9 = DWORD2(v17);
  }
  return 1;
}

BOOL KB::character_is_punctuation(KB *this)
{
  return u_ispunct((UChar32)this) != 0;
}

BOOL KB::string_has_control_characters(KB *this, const KB::String *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, this);
  int v11 = 0;
  {
    KB::string_has_control_characters(KB::String const&)::controlCharacters = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetControl);
  }
  while (1)
  {
    unsigned int v2 = HIWORD(v11);
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v2 >= v3) {
      break;
    }
    int v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
    if (v4 != 8204)
    {
      if (CFCharacterSetIsCharacterMember((CFCharacterSetRef)KB::string_has_control_characters(KB::String const&)::controlCharacters, v4))
      {
        break;
      }
    }
  }
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2 < v3;
}

BOOL KB::character_is_letter(KB *this)
{
  return ((1 << u_charType((UChar32)this)) & 0x2E) != 0;
}

BOOL KB::strings_have_same_uppercase_letters(KB *this, const KB::String *a2, const KB::String *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v19, this);
  int v23 = 0;
  KB::String::String((KB::String *)v14, a2);
  int v18 = 0;
  do
  {
    unsigned int v4 = HIWORD(v18);
    unsigned int v5 = v15;
    if (!v15)
    {
      KB::String::compute_length(v14);
      unsigned int v5 = v15;
    }
    if (v4 >= v5) {
      break;
    }
    unsigned int v6 = HIWORD(v23);
    unsigned int v7 = v20;
    if (!v20)
    {
      KB::String::compute_length(v19);
      unsigned int v7 = v20;
    }
    if (v6 >= v7) {
      break;
    }
    UChar32 v8 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v19);
    UChar32 v9 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v14);
    int v10 = u_isupper(v8);
    int v11 = u_isupper(v9);
    if ((v10 != 0) != (v11 != 0)) {
      break;
    }
  }
  while (!v10 || !v11 || v8 == v9);
  if (v17) {
    BOOL v12 = v16 == 1;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12) {
    free(v17);
  }
  if (v22 && v21 == 1) {
    free(v22);
  }
  return v4 >= v5;
}

BOOL KB::string_has_punctuation(KB *this, const KB::String *a2)
{
  unsigned int v3 = (char *)*((void *)this + 1);
  unsigned int v4 = (char *)this + 16;
  if (v3) {
    unsigned int v5 = (char *)*((void *)this + 1);
  }
  else {
    unsigned int v5 = (char *)this + 16;
  }
  unsigned __int16 v15 = v5;
  int v6 = *(unsigned __int16 *)this;
  int v16 = 0;
  int v17 = v6;
  UChar32 c = 0;
  KB::String::iterator::initialize((uint64_t *)&v15);
  while (1)
  {
    uint64_t v7 = (uint64_t)(v3 ? v3 : v4);
    uint64_t v11 = v7;
    int v12 = v6;
    int v13 = v6;
    int v14 = 0;
    KB::String::iterator::initialize(&v11);
    int v8 = v16;
    int v9 = v12;
    if (v16 == v12 || u_ispunct(c)) {
      break;
    }
    KB::String::iterator::operator++((uint64_t *)&v15);
    int v6 = *(unsigned __int16 *)this;
    unsigned int v3 = (char *)*((void *)this + 1);
  }
  return v8 != v9;
}

uint64_t KB::string_capitalization(KB *this, const KB::String *a2)
{
  unsigned int v2 = (char *)*((void *)this + 1);
  if (!v2) {
    unsigned int v2 = (char *)this + 16;
  }
  uint64_t v11 = v2;
  int v3 = *(unsigned __int16 *)this;
  int v12 = 0;
  int v13 = v3;
  UChar32 c = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  UChar32 v4 = c;
  if (!c) {
    return 0;
  }
  LODWORD(v5) = 0;
  unsigned int v6 = 0;
  do
  {
    int v7 = u_isupper(v4);
    int v8 = 1 << v6;
    if (!v7) {
      int v8 = 0;
    }
    uint64_t v5 = v8 | v5;
    KB::String::iterator::operator++((uint64_t *)&v11);
    UChar32 v4 = c;
    if (c) {
      BOOL v9 = v6 >= 0x1F;
    }
    else {
      BOOL v9 = 1;
    }
    ++v6;
  }
  while (!v9);
  return v5;
}

uint64_t KB::to_hex_string@<X0>(uint64_t this@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 6) = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  if (a2)
  {
    UChar32 v4 = (unsigned __int8 *)this;
    uint64_t v5 = a2;
    do
    {
      int v6 = *v4++;
      this = KB::String::append_format((KB::String *)a3, "%02x", v6);
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t KB::to_hex_string@<X0>(KB *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = (const void *)*(unsigned __int16 *)this;
  UChar32 v4 = (const char *)*((void *)this + 1);
  if (!v4) {
    UChar32 v4 = (char *)this + 16;
  }
  if (*(_WORD *)this) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = "";
  }
  return KB::to_hex_string((uint64_t)v5, v3, a2);
}

{
  const void *v3;
  char *v4;

  int v3 = (const void *)*(unsigned __int16 *)this;
  if (v3 <= 0xE) {
    UChar32 v4 = (char *)this + 2;
  }
  else {
    UChar32 v4 = (char *)*((void *)this + 1);
  }
  return KB::to_hex_string((uint64_t)v4, v3, a2);
}

uint64_t KB::suffixes_equal_utf8(KB *this, const KB::String *a2, const KB::String *a3, const KB::String *a4)
{
  unsigned int v4 = a4;
  unsigned int v6 = a2;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v30, this);
  unsigned int v7 = 0;
  for (i = 0; ; unsigned int v7 = HIWORD(i))
  {
    unsigned int v8 = v31;
    unsigned int v9 = v7;
    if (!v31)
    {
      KB::String::compute_length(v30);
      unsigned int v8 = v31;
      unsigned int v9 = HIWORD(i);
    }
    if (v7 >= v8 || v9 >= v6) {
      break;
    }
    KB::UTF8Iterator::next((KB::UTF8Iterator *)v30);
  }
  KB::String::String((KB::String *)v25, a3);
  unsigned int v11 = 0;
  for (j = 0; ; unsigned int v11 = HIWORD(j))
  {
    unsigned int v12 = v26;
    unsigned int v13 = v11;
    if (!v26)
    {
      KB::String::compute_length(v25);
      unsigned int v12 = v26;
      unsigned int v13 = HIWORD(j);
    }
    if (v11 >= v12 || v13 >= v4) {
      break;
    }
    KB::UTF8Iterator::next((KB::UTF8Iterator *)v25);
  }
  while (1)
  {
    unsigned int v18 = HIWORD(i);
    unsigned int v19 = v31;
    if (!v31)
    {
      KB::String::compute_length(v30);
      unsigned int v19 = v31;
    }
    if (v18 >= v19) {
      break;
    }
    unsigned int v15 = HIWORD(j);
    unsigned int v16 = v26;
    if (!v26)
    {
      KB::String::compute_length(v25);
      unsigned int v16 = v26;
    }
    if (v15 >= v16)
    {
      unsigned int v20 = HIWORD(i);
      goto LABEL_27;
    }
    int v17 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v30);
    if (v17 != KB::UTF8Iterator::next((KB::UTF8Iterator *)v25))
    {
      uint64_t v23 = 0;
      goto LABEL_31;
    }
  }
  unsigned int v20 = HIWORD(i);
  if (!v19)
  {
    KB::String::compute_length(v30);
    unsigned int v19 = v31;
  }
LABEL_27:
  unsigned int v21 = HIWORD(j);
  unsigned int v22 = v26;
  if (!v26)
  {
    KB::String::compute_length(v25);
    unsigned int v22 = v26;
  }
  uint64_t v23 = (v20 >= v19) ^ (v21 < v22);
LABEL_31:
  if (v28 && v27 == 1) {
    free(v28);
  }
  if (v33 && v32 == 1) {
    free(v33);
  }
  return v23;
}

uint64_t KB::prefixes_equal_utf8(KB *this, const KB::String *a2, const KB::String *a3, int a4)
{
  unsigned int v5 = a3;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v26, this);
  int v30 = 0;
  KB::String::String((KB::String *)v21, a2);
  int v25 = 0;
  while (1)
  {
    unsigned int v7 = HIWORD(v30);
    unsigned int v8 = v27;
    if (!v27)
    {
      KB::String::compute_length(v26);
      unsigned int v8 = v27;
    }
    if (v7 >= v8) {
      break;
    }
    unsigned int v9 = HIWORD(v25);
    unsigned int v10 = v22;
    if (!v22)
    {
      KB::String::compute_length(v21);
      unsigned int v10 = v22;
    }
    unsigned int v11 = HIWORD(v30);
    if (v9 >= v10 || HIWORD(v30) >= v5) {
      goto LABEL_18;
    }
    uint64_t v13 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v26);
    int v14 = v13;
    if (a4)
    {
      int v15 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v21);
    }
    else
    {
      int v14 = MEMORY[0x1E4E7CC30](v13);
      uint64_t v16 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v21);
      int v15 = MEMORY[0x1E4E7CC30](v16);
    }
    if (v14 != v15)
    {
      uint64_t v17 = 0;
      goto LABEL_21;
    }
  }
  unsigned int v11 = HIWORD(v30);
  if (!v8)
  {
    KB::String::compute_length(v26);
    unsigned int v8 = v27;
  }
LABEL_18:
  unsigned int v18 = HIWORD(v25);
  unsigned int v19 = v22;
  if (!v22)
  {
    KB::String::compute_length(v21);
    unsigned int v19 = v22;
  }
  uint64_t v17 = (v11 >= v8) ^ (v18 < v19);
LABEL_21:
  if (v24 && v23 == 1) {
    free(v24);
  }
  if (v29 && v28 == 1) {
    free(v29);
  }
  return v17;
}

void KB::word_with_string(KB::String *this@<X1>, uint64_t *a2@<X0>, int a3@<W2>, KB::Word *a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  if (*a2 != a2[1] && *(_WORD *)this != 0)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 1;
    while (1)
    {
      if (a3)
      {
        KB::Word::capitalized_string((KB::Word *)(v5 + 240 * v10), (uint64_t)v14);
        BOOL v12 = KB::String::equal(this, (const KB::String *)v14, 1);
        if (v15)
        {
          if (v14[6] == 1) {
            free(v15);
          }
        }
        if (v12)
        {
LABEL_18:
          KB::Word::Word(a4, (size_t *)(*a2 + 240 * v10));
          return;
        }
      }
      else if (KB::String::equal(this, (const KB::String *)(v5 + 240 * v10), 0))
      {
        goto LABEL_18;
      }
      uint64_t v10 = v11;
      uint64_t v5 = *a2;
      if (0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 4) <= v11++)
      {
        *((_OWORD *)a4 + 13) = 0u;
        *((_OWORD *)a4 + 14) = 0u;
        *((_OWORD *)a4 + 11) = 0u;
        *((_OWORD *)a4 + 12) = 0u;
        *((_OWORD *)a4 + 9) = 0u;
        *((_OWORD *)a4 + 10) = 0u;
        *((_OWORD *)a4 + 7) = 0u;
        *((_OWORD *)a4 + 8) = 0u;
        *((_OWORD *)a4 + 5) = 0u;
        *((_OWORD *)a4 + 6) = 0u;
        *((_OWORD *)a4 + 3) = 0u;
        *((_OWORD *)a4 + 4) = 0u;
        *((_OWORD *)a4 + 1) = 0u;
        *((_OWORD *)a4 + 2) = 0u;
        *(_OWORD *)a4 = 0u;
        KB::Word::Word(a4);
        return;
      }
    }
  }
  *((_OWORD *)a4 + 13) = 0u;
  *((_OWORD *)a4 + 14) = 0u;
  *((_OWORD *)a4 + 11) = 0u;
  *((_OWORD *)a4 + 12) = 0u;
  *((_OWORD *)a4 + 9) = 0u;
  *((_OWORD *)a4 + 10) = 0u;
  *((_OWORD *)a4 + 7) = 0u;
  *((_OWORD *)a4 + 8) = 0u;
  *((_OWORD *)a4 + 5) = 0u;
  *((_OWORD *)a4 + 6) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  *((_OWORD *)a4 + 4) = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  *((_OWORD *)a4 + 2) = 0u;
  *(_OWORD *)a4 = 0u;

  KB::Word::Word(a4);
}

BOOL KB::word_vector_contains_string(uint64_t *a1, KB::String *a2, int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  KB::word_with_string(a2, a1, a3, (KB::Word *)v5);
  BOOL v3 = v5[0] != 0;
  KB::Word::~Word((KB::Word *)v5);
  return v3;
}

BOOL KB::character_has_diacritic(KB *this, int a2)
{
  BOOL result = 0;
  if (a2 > 710)
  {
    if (a2 > 729)
    {
      if (a2 == 730)
      {
        unsigned int v4 = (uint64_t (*)(KB *))MEMORY[0x1E4FAF040];
      }
      else
      {
        if (a2 != 732) {
          return result;
        }
        unsigned int v4 = (uint64_t (*)(KB *))MEMORY[0x1E4FAF048];
      }
    }
    else if (a2 == 711)
    {
      unsigned int v4 = (uint64_t (*)(KB *))MEMORY[0x1E4FAF018];
    }
    else
    {
      if (a2 != 715) {
        return result;
      }
      unsigned int v4 = (uint64_t (*)(KB *))MEMORY[0x1E4FAF030];
    }
    goto LABEL_19;
  }
  if (a2 <= 179)
  {
    if (a2 == 168)
    {
      unsigned int v4 = (uint64_t (*)(KB *))MEMORY[0x1E4FAF028];
    }
    else
    {
      if (a2 != 175) {
        return result;
      }
      unsigned int v4 = (uint64_t (*)(KB *))MEMORY[0x1E4FAF038];
    }
LABEL_19:
    uint64_t v5 = v4;
    goto LABEL_20;
  }
  uint64_t v5 = (uint64_t (*)(KB *))MEMORY[0x1E4FAF010];
  if (a2 != 180)
  {
    if (a2 != 710) {
      return result;
    }
    unsigned int v4 = (uint64_t (*)(KB *))MEMORY[0x1E4FAF020];
    goto LABEL_19;
  }
LABEL_20:
  int v6 = v5(this);
  if (v6) {
    BOOL v7 = v6 == this;
  }
  else {
    BOOL v7 = 1;
  }
  return !v7;
}

BOOL KB::character_is_free_insertion(UChar32 c)
{
  BOOL result = 1;
  if (c > 729)
  {
    if (c == 730 || c == 732 || c == 901) {
      return result;
    }
  }
  else if ((c - 168) <= 0xC && ((1 << (c + 88)) & 0x1081) != 0)
  {
    return result;
  }
  if (u_charType(c) == 4) {
    return 1;
  }
  BOOL result = 1;
  if (c <= 2304)
  {
    if (c > 1599)
    {
      if ((c - 1600) <= 0x30)
      {
        uint64_t v3 = 1 << (c - 64);
        uint64_t v4 = 0x1000000FFF801;
LABEL_18:
        if ((v3 & v4) != 0) {
          return result;
        }
      }
LABEL_47:
      int v5 = u_ispunct(c);
      return c != 38 && v5 != 0;
    }
    if (((c - 710) > 5 || ((1 << (c + 58)) & 0x33) == 0)
      && ((c - 168) > 0xC || ((1 << (c + 88)) & 0x1081) == 0))
    {
      goto LABEL_47;
    }
  }
  else
  {
    if (c > 2636)
    {
      if (c > 2747)
      {
        if (c <= 3020)
        {
          if (c == 2748 || c == 2765 || c == 2946) {
            return result;
          }
        }
        else if (c > 3148)
        {
          if (c == 3149 || c == 8204) {
            return result;
          }
        }
        else if (c == 3021 || c == 3075)
        {
          return result;
        }
        goto LABEL_47;
      }
      if ((c - 2637) <= 0x36)
      {
        uint64_t v3 = 1 << (c - 77);
        uint64_t v4 = 0x70001800000011;
        goto LABEL_18;
      }
      goto LABEL_47;
    }
    if (c <= 2491)
    {
      if ((c - 2305) <= 0x3B && ((1 << (c - 1)) & 0x800000000000007) != 0) {
        return result;
      }
      if ((c - 2381) > 0x36) {
        goto LABEL_47;
      }
      uint64_t v3 = 1 << (c - 77);
      uint64_t v4 = 0x50000000000001;
      goto LABEL_18;
    }
    if (((c - 2561) > 0x3B || ((1 << (c - 1)) & 0x800000000000007) == 0)
      && c != 2492
      && c != 2509)
    {
      goto LABEL_47;
    }
  }
  return result;
}

BOOL KB::string_contains_surface_form_features(KB *this, const KB::String *a2)
{
  uint64_t v3 = (char *)this + 16;
  if (*((void *)this + 1)) {
    uint64_t v4 = (char *)*((void *)this + 1);
  }
  else {
    uint64_t v4 = (char *)this + 16;
  }
  unsigned int v20 = v4;
  int v5 = *(unsigned __int16 *)this;
  int v21 = 0;
  int v22 = v5;
  UChar32 c = 0;
  KB::String::iterator::initialize((uint64_t *)&v20);
  uint64_t v16 = v4;
  int v17 = v5;
  int v18 = v5;
  int v19 = 0;
  KB::String::iterator::initialize((uint64_t *)&v16);
  int v6 = v21;
  int v7 = v17;
  if (v21 != v17)
  {
    while (1)
    {
      unsigned int v8 = (KB *)c;
      if (KB::character_is_free_insertion(c)
        || KB::character_is_precomposed_diacritic_letter(v8)
        || KB::character_is_digraph(v8))
      {
        break;
      }
      KB::String::iterator::operator++((uint64_t *)&v20);
      if (v21 == v7)
      {
        int v6 = v7;
        goto LABEL_11;
      }
    }
    int v6 = v21;
  }
LABEL_11:
  int v9 = *(unsigned __int16 *)this;
  uint64_t v10 = *((void *)this + 1);
  if (!v10) {
    uint64_t v10 = (uint64_t)v3;
  }
  uint64_t v12 = v10;
  int v13 = v9;
  int v14 = v9;
  int v15 = 0;
  KB::String::iterator::initialize(&v12);
  return v6 != v13;
}

BOOL KB::substitution_allowed(KB *this, uint64_t a2, unsigned char *a3, BOOL *a4)
{
  if (a3) {
    *a3 = 0;
  }
  if (a2 == this) {
    return 1;
  }
  int v6 = (KB *)MEMORY[0x1E4E7CC30](a2);
  UChar32 v7 = MEMORY[0x1E4E7CC30](this);
  if (v6 == v7) {
    return 1;
  }
  UChar32 v9 = v7;
  if (a3) {
    *a3 = 1;
  }
  if (((1 << u_charType((UChar32)v6)) & 0x2E) != 0
    && ((1 << u_charType(v9)) & 0x2E) != 0
    && !KB::character_is_precomposed_diacritic_letter(v6)
    && !KB::character_is_digraph(v6))
  {
    return 1;
  }
  if (v9 > 368)
  {
    switch(v9)
    {
      case 369:
        BOOL v13 = v6 == 252;
        int v14 = 250;
        break;
      case 901:
        BOOL v13 = v6 == 180;
        int v14 = 168;
        break;
      case 2305:
        return v6 == 2306;
      default:
        return 0;
    }
    return v13 || v6 == v14;
  }
  BOOL v12 = v6 == 246 || v6 == 243;
  if (v9 != 337) {
    BOOL v12 = 0;
  }
  if (v9 == 39) {
    return v6 == 8217;
  }
  else {
    return v12;
  }
}

uint64_t KB::string_preserves_surface_form_features(KB *this, const KB::String *a2, const KB::String *a3, std::vector<unsigned int> *a4, KB::Alignment *a5)
{
  v6[1] = 1;
  v6[0] = &unk_1F3F77D18;
  return KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)v6, this, a2, (BOOL *)a3, a4);
}

uint64_t KB::string_preserves_surface_form_features_of_prefix(const KB::String *a1, const KB::String *a2, const ByteString *a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a4 + 24);
  if (!v5) {
LABEL_31:
  }
    std::__throw_bad_function_call[abi:nn180100]();
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 48))(&v16);
  if (KB::ByteString::starts_with((KB::ByteString *)&v16, a3))
  {
    KB::String::String((KB::String *)v20, a1);
    unsigned int v9 = (unsigned __int16)v16;
    if ((unsigned __int16)v16 >= 0xFu) {
      operator new[]();
    }
    unsigned int v11 = __src;
    while (v9 > a3->var0.var0.var0)
    {
      __int16 v12 = v21;
      if (!v21)
      {
        KB::String::compute_length(v20);
        __int16 v12 = v21;
      }
      KB::String::shorten((KB::String *)v20, (unsigned __int16)(v12 - 1), (uint64_t)&v18);
      KB::String::operator=((uint64_t)v20, (KB::String *)&v18);
      if (v19) {
        BOOL v13 = BYTE6(v18) == 1;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13) {
        free(v19);
      }
      uint64_t v14 = *(void *)(a4 + 24);
      if (!v14) {
        goto LABEL_31;
      }
      (*(void (**)(void **__return_ptr))(*(void *)v14 + 48))(&v18);
      if (v9 >= 0xF && v11) {
        MEMORY[0x1E4E7BC00](v11, 0x1000C8077774924);
      }
      unsigned int v9 = (unsigned __int16)v18;
      unsigned int v11 = v19;
    }
    int v19 = (void *)1;
    int v18 = &unk_1F3F77D18;
    uint64_t v10 = KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)&v18, (const KB::String *)v20, a2, 0, 0);
    if (v9 >= 0xF && v11) {
      MEMORY[0x1E4E7BC00](v11, 0x1000C8077774924);
    }
    if (v23 && v22 == 1) {
      free(v23);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  if ((unsigned __int16)v16 >= 0xFu && __src) {
    MEMORY[0x1E4E7BC00](__src, 0x1000C8077774924);
  }
  return v10;
}

uint64_t *KB::compose_diacritics@<X0>(KB *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 6) = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  if (*((void *)this + 1)) {
    int v6 = (char *)*((void *)this + 1);
  }
  else {
    int v6 = (char *)this + 16;
  }
  int v17 = v6;
  int v7 = *(unsigned __int16 *)this;
  int v18 = 0;
  int v19 = v7;
  unsigned int v20 = 0;
  KB::String::iterator::initialize((uint64_t *)&v17);
  BOOL v13 = v6;
  int v14 = v7;
  int v15 = v7;
  int v16 = 0;
  BOOL result = KB::String::iterator::initialize((uint64_t *)&v13);
  for (i = v14; v18 != i; BOOL result = KB::String::iterator::operator++((uint64_t *)&v17))
  {
    unsigned int v10 = v20;
    uint64_t v11 = combine_with_accent();
    if (v11)
    {
      unsigned int v12 = v11;
      if (!a2 || MEMORY[0x1E4E7CD40](a2, v11))
      {
        KB::String::pop_last((KB::String *)a3);
        unsigned int v10 = v12;
      }
    }
    KB::String::append((KB::String *)a3, v10);
  }
  return result;
}

uint64_t *KB::decompose_diacritics@<X0>(unsigned __int16 *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0x100000;
  *(_WORD *)(a4 + 4) = 0;
  *(unsigned char *)(a4 + 6) = 0;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  if (*((void *)a1 + 1)) {
    uint64_t v7 = *((void *)a1 + 1);
  }
  else {
    uint64_t v7 = (uint64_t)(a1 + 8);
  }
  uint64_t v21 = v7;
  int v8 = *a1;
  int v22 = 0;
  int v23 = v8;
  unsigned int v24 = 0;
  KB::String::iterator::initialize(&v21);
  uint64_t v17 = v7;
  int v18 = v8;
  int v19 = v8;
  int v20 = 0;
  BOOL result = KB::String::iterator::initialize(&v17);
  int v10 = v22;
  int v11 = v18;
  while (v10 != v11)
  {
    unsigned int v12 = v24;
    if (!a3 || MEMORY[0x1E4E7CD40](a3, v24))
    {
      BOOL v13 = *a2;
      int v14 = a2[1];
      while (v13 != v14)
      {
        unsigned int v15 = *v13;
        unsigned int v16 = strip_accent();
        if (v16)
        {
          KB::String::append((KB::String *)a4, v16);
          unsigned int v12 = v15;
          break;
        }
        ++v13;
      }
    }
    KB::String::append((KB::String *)a4, v12);
    BOOL result = KB::String::iterator::operator++(&v21);
    int v10 = v22;
  }
  return result;
}

KB::String *KB::trim_stops@<X0>(KB *this@<X0>, uint64_t a2@<X8>)
{
  int v5 = *(unsigned __int16 *)this;
  if (*(_WORD *)this)
  {
    int v6 = (char *)*((void *)this + 1);
    if (v6) {
      uint64_t v7 = (char *)*((void *)this + 1);
    }
    else {
      uint64_t v7 = (char *)this + 16;
    }
    int v19 = v7;
    int v20 = 0;
    int v21 = v5;
    UChar32 c = 0;
    KB::String::iterator::initialize((uint64_t *)&v19);
    UChar32 v8 = c;
    if (c)
    {
      do
      {
        int v9 = u_ispunct(v8);
        if (v8 == 38) {
          break;
        }
        if (!v9) {
          break;
        }
        KB::String::iterator::operator++((uint64_t *)&v19);
        UChar32 v8 = c;
      }
      while (c);
      int v5 = *(unsigned __int16 *)this;
      int v6 = (char *)*((void *)this + 1);
    }
    if (v6) {
      int v10 = v6;
    }
    else {
      int v10 = (char *)this + 16;
    }
    *(void *)&long long v17 = v10;
    DWORD2(v17) = v5;
    HIDWORD(v17) = v5;
    LODWORD(v18) = 0;
    BOOL result = (KB::String *)KB::String::iterator::initialize((uint64_t *)&v17);
    if (v20 == DWORD2(v17))
    {
      *(_DWORD *)a2 = 0x100000;
      *(_WORD *)(a2 + 4) = 0;
      *(unsigned char *)(a2 + 6) = 0;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 0;
    }
    else
    {
      do
      {
        long long v15 = v17;
        *(void *)unsigned int v16 = v18;
        KB::String::iterator::operator--((KB::String::iterator *)&v15);
        UChar32 v12 = v16[0];
        int v13 = u_ispunct(v16[0]);
        if (v12 == 38 || v13 == 0) {
          break;
        }
        KB::String::iterator::operator--((KB::String::iterator *)&v17);
      }
      while (DWORD2(v17) != v20);
      return KB::String::String((KB::String *)a2, (const KB::String::iterator *)&v19, (const KB::String::iterator *)&v17);
    }
  }
  else
  {
    return KB::String::String((KB::String *)a2, this);
  }
  return result;
}

uint64_t KB::edit_distance(KB *this, const KB::String *a2, const KB::String *a3)
{
  v78[16] = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 1)) {
    uint64_t v4 = (char *)*((void *)this + 1);
  }
  else {
    uint64_t v4 = (char *)this + 16;
  }
  unint64_t v55 = v4;
  int v5 = *(unsigned __int16 *)this;
  int v56 = 0;
  int v57 = v5;
  int v58 = 0;
  KB::String::iterator::initialize((uint64_t *)&v55);
  uint64_t v51 = v4;
  int v52 = v5;
  int v53 = v5;
  int v54 = 0;
  KB::String::iterator::initialize((uint64_t *)&v51);
  WTF::Vector<unsigned int,32ul>::Vector<KB::String::iterator>(&v75, (uint64_t)&v55, (uint64_t)&v51);
  if (*((void *)a2 + 1)) {
    int v6 = (char *)*((void *)a2 + 1);
  }
  else {
    int v6 = (char *)a2 + 16;
  }
  int v47 = v6;
  int v7 = *(unsigned __int16 *)a2;
  int v48 = 0;
  int v49 = v7;
  int v50 = 0;
  KB::String::iterator::initialize((uint64_t *)&v47);
  unint64_t v43 = v6;
  int v44 = v7;
  int v45 = v7;
  int v46 = 0;
  KB::String::iterator::initialize((uint64_t *)&v43);
  WTF::Vector<unsigned int,32ul>::Vector<KB::String::iterator>(&v71, (uint64_t)&v47, (uint64_t)&v43);
  int v8 = v75;
  int v9 = v71;
  unint64_t v10 = (v71 + 1);
  unint64_t v67 = v10;
  char v68 = v70;
  uint64_t v69 = 32;
  unint64_t v11 = v10;
  UChar32 v12 = v70;
  if (v10 >= 0x21)
  {
    uint64_t v69 = (v71 + 1);
    size_t v13 = 4 * v10;
    UChar32 v12 = malloc_type_malloc(4 * v10, 0x100004052888210uLL);
    char v68 = v12;
    if (!v12)
    {
      unint64_t v63 = v10;
      unint64_t v64 = v66;
      goto LABEL_21;
    }
    unint64_t v11 = v67;
  }
  if (v11) {
    bzero(v12, 4 * v11);
  }
  unint64_t v63 = v10;
  unint64_t v64 = v66;
  uint64_t v65 = 32;
  if (v10 < 0x21)
  {
    unint64_t v14 = v10;
    long long v15 = v66;
    if (!v10) {
      goto LABEL_16;
    }
LABEL_15:
    bzero(v15, 4 * v14);
    goto LABEL_16;
  }
  size_t v13 = 4 * v10;
LABEL_21:
  uint64_t v65 = v10;
  long long v15 = malloc_type_malloc(v13, 0x100004052888210uLL);
  unint64_t v64 = v15;
  if (!v15)
  {
    unint64_t v59 = v10;
    float v60 = (unsigned int *)v62;
    goto LABEL_25;
  }
  unint64_t v14 = v63;
  if (v63) {
    goto LABEL_15;
  }
LABEL_16:
  unint64_t v59 = v10;
  float v60 = (unsigned int *)v62;
  uint64_t v61 = 32;
  if (v10 < 0x21)
  {
    unint64_t v16 = v10;
    long long v17 = v62;
    if (!v10) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  size_t v13 = 4 * v10;
LABEL_25:
  uint64_t v61 = v10;
  long long v17 = malloc_type_malloc(v13, 0x100004052888210uLL);
  float v60 = (unsigned int *)v17;
  if (v17)
  {
    unint64_t v16 = v59;
    if (v59) {
LABEL_27:
    }
      bzero(v17, 4 * v16);
  }
LABEL_28:
  uint64_t v18 = 0;
  do
  {
    *(_DWORD *)&v17[4 * v18] = v18;
    ++v18;
  }
  while (v10 != v18);
  if (v8)
  {
    uint64_t v19 = (v8 + 1);
    unint64_t v20 = v10 - 1;
    unint64_t v21 = 1;
    do
    {
      WTF::Vector<unsigned int,32ul>::operator=(&v67, (uint64_t)&v63);
      WTF::Vector<unsigned int,32ul>::operator=(&v63, (uint64_t)&v59);
      int v22 = v64;
      unsigned int v23 = *(_DWORD *)v64 + 1;
      long long v17 = v60;
      unsigned int *v60 = v23;
      if (v9)
      {
        uint64_t v24 = 0;
        unint64_t v25 = v21 - 1;
        unsigned __int16 v26 = v76;
        unsigned __int16 v27 = v72;
        char v28 = v17 + 4;
        char v29 = v68;
        do
        {
          unint64_t v30 = v24 + 1;
          unsigned int v31 = v22[v24];
          int v32 = v22[v24 + 1];
          ++v23;
          if (*((_DWORD *)v26 + v25) != v27[v24]) {
            ++v31;
          }
          if (v23 >= v32 + 1) {
            unsigned int v23 = v32 + 1;
          }
          if (v31 < v23) {
            unsigned int v23 = v31;
          }
          *(_DWORD *)&v28[4 * v24] = v23;
          if (v21 >= 2 && v30 >= 2)
          {
            int v33 = *((_DWORD *)v26 + v25);
            uint64_t v34 = (v24 - 1);
            if (v33 == v27[v34])
            {
              int v35 = v27[v24];
              if (*((_DWORD *)v26 + (v21 - 2)) == v35 && v33 != v35)
              {
                int v36 = v29[v34];
                if (v36 + 1 < v23) {
                  unsigned int v23 = v36 + 1;
                }
                *(_DWORD *)&v28[4 * v24] = v23;
              }
            }
          }
          ++v24;
        }
        while (v20 != v30);
      }
      ++v21;
    }
    while (v21 != v19);
  }
  uint64_t v37 = *(unsigned int *)&v17[4 * v9];
  if (v59) {
    unint64_t v59 = 0;
  }
  if (v62 != v17)
  {
    float v60 = 0;
    uint64_t v61 = 0;
    free(v17);
  }
  if (v63) {
    unint64_t v63 = 0;
  }
  char v38 = v64;
  if (v66 != v64)
  {
    unint64_t v64 = 0;
    uint64_t v65 = 0;
    free(v38);
  }
  if (v67) {
    unint64_t v67 = 0;
  }
  unint64_t v39 = v68;
  if (v70 != v68)
  {
    char v68 = 0;
    uint64_t v69 = 0;
    free(v39);
  }
  if (v71) {
    unint64_t v71 = 0;
  }
  int v40 = v72;
  if (&v74 != v72)
  {
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    free(v40);
  }
  if (v75) {
    unint64_t v75 = 0;
  }
  char v41 = v76;
  if (v78 != v76)
  {
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    free(v41);
  }
  return v37;
}

unint64_t *WTF::Vector<unsigned int,32ul>::Vector<KB::String::iterator>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = (unint64_t)(a1 + 3);
  a1[2] = 32;
  while (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a3 + 8))
  {
    int v6 = *(_DWORD *)(a2 + 16);
    int v18 = v6;
    unint64_t v7 = *a1;
    if (*a1 == a1[2])
    {
      unint64_t v8 = v7 + 1;
      unint64_t v9 = a1[1];
      if (v9 > (unint64_t)&v18 || v9 + 4 * v7 <= (unint64_t)&v18)
      {
        if (v7 >= 0x100) {
          unint64_t v15 = v7 + (v7 >> 1);
        }
        else {
          unint64_t v15 = 2 * v7;
        }
        if (v15 <= v8) {
          unint64_t v16 = v8;
        }
        else {
          unint64_t v16 = v15;
        }
        WTF::Vector<unsigned int,32ul>::reserveCapacity(a1, v16);
        unint64_t v13 = a1[1];
        unint64_t v14 = (char *)&v18;
        if (!v13) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t v10 = (char *)&v18 - v9;
        if (v7 >= 0x100) {
          unint64_t v11 = v7 + (v7 >> 1);
        }
        else {
          unint64_t v11 = 2 * v7;
        }
        if (v11 <= v8) {
          unint64_t v12 = v8;
        }
        else {
          unint64_t v12 = v11;
        }
        WTF::Vector<unsigned int,32ul>::reserveCapacity(a1, v12);
        unint64_t v13 = a1[1];
        unint64_t v14 = &v10[v13];
        if (!v13) {
          goto LABEL_23;
        }
      }
      unint64_t v7 = *a1;
      int v6 = *(_DWORD *)v14;
    }
    else
    {
      unint64_t v13 = a1[1];
    }
    *(_DWORD *)(v13 + 4 * v7) = v6;
    *a1 = v7 + 1;
LABEL_23:
    KB::String::iterator::operator++((uint64_t *)a2);
  }
  return a1;
}

unint64_t *WTF::Vector<unsigned int,32ul>::operator=(unint64_t *a1, uint64_t a2)
{
  if ((unint64_t *)a2 == a1) {
    return a1;
  }
  unint64_t v4 = *a1;
  unint64_t v5 = *(void *)a2;
  if (*a1 > *(void *)a2)
  {
    *a1 = v5;
    unint64_t v4 = v5;
LABEL_14:
    unint64_t v9 = (char *)a1[1];
    if (v4)
    {
      memmove(v9, *(const void **)(a2 + 8), 4 * v4);
      unint64_t v4 = *a1;
      unint64_t v9 = (char *)a1[1];
    }
    memcpy(&v9[4 * v4], (const void *)(*(void *)(a2 + 8) + 4 * v4), 4 * *(void *)a2 - 4 * v4);
    *a1 = *(void *)a2;
    return a1;
  }
  unint64_t v6 = a1[2];
  if (v5 <= v6) {
    goto LABEL_14;
  }
  if (v6)
  {
    if (v4) {
      *a1 = 0;
    }
    unint64_t v8 = (unint64_t **)(a1 + 1);
    unint64_t v7 = (unint64_t *)a1[1];
    if (a1 + 3 != v7)
    {
      *unint64_t v8 = 0;
      a1[2] = 0;
      free(v7);
      unint64_t v7 = *v8;
    }
    if (!v7)
    {
      a1[1] = (unint64_t)(a1 + 3);
      a1[2] = 32;
    }
  }
  WTF::Vector<unsigned int,32ul>::reserveCapacity(a1, *(void *)a2);
  if (a1[1])
  {
    unint64_t v4 = *a1;
    goto LABEL_14;
  }
  return a1;
}

void WTF::Vector<unsigned int,32ul>::reserveCapacity(void *a1, unint64_t a2)
{
  if (a1[2] >= a2) {
    return;
  }
  unint64_t v4 = (void **)(a1 + 1);
  uint64_t v3 = (void *)a1[1];
  uint64_t v5 = *a1;
  if (a2 <= 0x20)
  {
    unint64_t v6 = a1 + 3;
    a1[1] = a1 + 3;
    a1[2] = 32;
    goto LABEL_6;
  }
  a1[2] = a2;
  unint64_t v6 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  a1[1] = v6;
  if (v6) {
LABEL_6:
  }
    memcpy(v6, v3, 4 * v5);
  if (a1 + 3 != v3)
  {
    if (*v4 == v3)
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
    }
    free(v3);
  }
}

void KB::character_to_titlecase(UChar32 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  srUChar32 c = a1;
  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 6) = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  if (a1)
  {
    {
      unint64_t v25 = (void *)KB::thread_local_titlecase_break_iterator(std::string const&)::break_iterators(&KB::thread_local_titlecase_break_iterator(std::string const&)::break_iterators);
      unsigned __int16 v25[2] = 0;
      v25[1] = 0;
      *unint64_t v25 = v25 + 1;
      _tlv_atexit((void (__cdecl *)(void *))std::map<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>::~map[abi:nn180100], v25);
    }
    uint64_t v6 = KB::thread_local_titlecase_break_iterator(std::string const&)::break_iterators(&KB::thread_local_titlecase_break_iterator(std::string const&)::break_iterators);
    uint64_t v7 = v6;
    unint64_t v9 = (void *)(v6 + 8);
    unint64_t v8 = *(void **)(v6 + 8);
    if (!v8) {
      goto LABEL_15;
    }
    uint64_t v10 = v6 + 8;
    do
    {
      char v11 = std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, (void *)a2);
      if (v11 >= 0) {
        unint64_t v12 = v8;
      }
      else {
        unint64_t v12 = v8 + 1;
      }
      if (v11 >= 0) {
        uint64_t v10 = (uint64_t)v8;
      }
      unint64_t v8 = (void *)*v12;
    }
    while (*v12);
    if ((void *)v10 == v9
      || (std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, (void *)(v10 + 32)) & 0x80) != 0)
    {
LABEL_15:
      *(_DWORD *)unsigned int v31 = 0;
      unint64_t v13 = (UBreakIterator *)ubrk_open();
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v32, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)int v32 = *(_OWORD *)a2;
        *(void *)&v32[16] = *(void *)(a2 + 16);
      }
      unint64_t v14 = operator new(0x40uLL);
      uint64_t v15 = *(void *)&v32[16];
      *((_OWORD *)v14 + 2) = *(_OWORD *)v32;
      memset(v32, 0, sizeof(v32));
      v14[6] = v15;
      v14[7] = v13;
      unint64_t v16 = (void *)*v9;
      long long v17 = v9;
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v9 = v16;
            int v18 = v16 + 4;
            if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v14 + 4, v16 + 4) & 0x80) == 0) {
              break;
            }
            unint64_t v16 = (void *)*v9;
            long long v17 = v9;
            if (!*v9) {
              goto LABEL_24;
            }
          }
          if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v18, v14 + 4) & 0x80) == 0) {
            break;
          }
          long long v17 = v9 + 1;
          unint64_t v16 = (void *)v9[1];
          if (!v16) {
            goto LABEL_24;
          }
        }
        std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,0>((uint64_t)(v14 + 4));
        operator delete(v14);
      }
      else
      {
LABEL_24:
        *unint64_t v14 = 0;
        v14[1] = 0;
        unsigned __int16 v14[2] = v9;
        *long long v17 = v14;
        uint64_t v19 = **(void **)v7;
        if (v19)
        {
          *(void *)uint64_t v7 = v19;
          unint64_t v14 = (void *)*v17;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v14);
        ++*(void *)(v7 + 16);
        if (*(void *)&v32[24]) {
          ubrk_close();
        }
      }
      if ((v32[23] & 0x80000000) != 0) {
        operator delete(*(void **)v32);
      }
    }
    else
    {
      unint64_t v13 = *(UBreakIterator **)(v10 + 56);
    }
    uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
    if ((v20 & 0x80u) != 0) {
      uint64_t v20 = *(void *)(a2 + 8);
    }
    if (v20) {
      BOOL v21 = v13 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_43;
    }
    UErrorCode pErrorCode = U_ZERO_ERROR;
    int32_t pDestLength = 0;
    u_strFromUTF32(dest, 3, &pDestLength, &src, 1, &pErrorCode);
    int v22 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
    int32_t v23 = u_strToTitle(v31, 5, dest, pDestLength, v13, v22, &pErrorCode);
    int32_t v26 = 0;
    u_strToUTF8(v32, 13, &v26, v31, v23, &pErrorCode);
    if (pErrorCode <= U_ZERO_ERROR) {
      KB::String::append((unsigned __int16 *)a3, v32, 0xFFFFuLL);
    }
    if (!*(_WORD *)a3)
    {
LABEL_43:
      unsigned int v24 = MEMORY[0x1E4E7CC40](src);
      KB::String::append((KB::String *)a3, v24);
    }
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    ubrk_close();
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::map<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>::~map[abi:nn180100](uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void KB::character_to_lowercase(UChar32 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  srUChar32 c = a1;
  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 6) = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  if (a1)
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(a2 + 8);
    }
    if (!v5) {
      goto LABEL_11;
    }
    UErrorCode pErrorCode = U_ZERO_ERROR;
    int32_t pDestLength = 0;
    u_strFromUTF32(dest, 3, &pDestLength, &src, 1, &pErrorCode);
    uint64_t v6 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
    int32_t v7 = u_strToLower(v15, 5, dest, pDestLength, v6, &pErrorCode);
    int32_t v9 = 0;
    u_strToUTF8(__s1, 13, &v9, v15, v7, &pErrorCode);
    if (pErrorCode <= U_ZERO_ERROR) {
      KB::String::append((unsigned __int16 *)a3, __s1, 0xFFFFuLL);
    }
    if (!*(_WORD *)a3)
    {
LABEL_11:
      unsigned int v8 = MEMORY[0x1E4E7CC30](src);
      KB::String::append((KB::String *)a3, v8);
    }
  }
}

void KB::string_to_lowercase(KB *this@<X0>, const KB::String *a2@<X1>, KB::String *a3@<X8>)
{
  unint64_t v4 = this;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)this)
  {
    LODWORD(v29) = 0x100000;
    WORD2(v29) = 0;
    BYTE6(v29) = 0;
    unint64_t v30 = 0;
    char v31 = 0;
    UErrorCode pErrorCode = U_ZERO_ERROR;
    unsigned int v7 = *((unsigned __int16 *)this + 2);
    if (!*((_WORD *)this + 2))
    {
      KB::String::compute_length((unsigned __int16 *)this);
      unsigned int v7 = *((unsigned __int16 *)v4 + 2);
    }
    unint64_t v8 = 4 * v7 + 4;
    int32_t pDestLength = 0;
    int32_t v26 = 0;
    unint64_t v27 = v8;
    BOOL v28 = v7 > 0xFF;
    if (v7 < 0x100)
    {
      int32_t v9 = dest;
    }
    else
    {
      int32_t v9 = (UChar *)malloc_type_malloc(4 * v7 + 4, 0xBD7CD695uLL);
      int32_t v26 = v9;
    }
    uint64_t v10 = (const char *)*((void *)v4 + 1);
    if (!v10) {
      uint64_t v10 = (char *)v4 + 16;
    }
    if (*(_WORD *)v4) {
      char v11 = v10;
    }
    else {
      char v11 = "";
    }
    u_strFromUTF8(v9, v8 >> 1, &pDestLength, v11, *(unsigned __int16 *)v4, &pErrorCode);
    int v22 = 0;
    uint64_t v23 = 2 * v8;
    BOOL v24 = v7 > 0x7F;
    unint64_t v12 = (UChar *)v21;
    if (v7 >= 0x80)
    {
      unint64_t v12 = (UChar *)malloc_type_malloc(2 * v8, 0xBD7CD695uLL);
      int v22 = v12;
    }
    if (v28) {
      unint64_t v13 = v26;
    }
    else {
      unint64_t v13 = dest;
    }
    int32_t v14 = u_strToLower(v12, v8, v13, pDestLength, (const char *)a2, &pErrorCode);
    int32_t v18 = 0;
    if (v28) {
      uint64_t v15 = v26;
    }
    else {
      uint64_t v15 = dest;
    }
    if (v24) {
      uint64_t v16 = v22;
    }
    else {
      uint64_t v16 = (const UChar *)v21;
    }
    u_strToUTF8((char *)v15, v8, &v18, v16, v14, &pErrorCode);
    if (pErrorCode <= U_ZERO_ERROR)
    {
      long long v17 = (const char *)(v28 ? v26 : dest);
      KB::String::operator=(&v29, v17);
      if ((_WORD)v29) {
        unint64_t v4 = (KB *)&v29;
      }
    }
    KB::String::String(a3, v4);
    free(v22);
    free(v26);
    if (v30)
    {
      if (BYTE6(v29) == 1) {
        free(v30);
      }
    }
  }
  else
  {
    KB::String::String(a3, this);
  }
}

id KB::preheat_text_checker(KB *this)
{
  return _text_checker((uint64_t)this);
}

id _text_checker(uint64_t a1)
{
  uint64_t v2 = (void *)_text_checker(BOOL)::checker;
  if (!_text_checker(BOOL)::checker)
  {
    uint64_t v3 = [[TITextChecker alloc] initWithAsynchronousLoading:a1];
    unint64_t v4 = (void *)_text_checker(BOOL)::checker;
    _text_checker(BOOL)::checker = (uint64_t)v3;

    uint64_t v2 = (void *)_text_checker(BOOL)::checker;
  }

  return v2;
}

void KB::spellcheck_candidates(KB *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a3 + 100) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  unsigned int v7 = KB::ns_string(a2, a2);
  unint64_t v8 = _text_checker(1);
  int32_t v9 = v8;
  if (v8 && [v8 doneLoading])
  {
    KB::Candidate::Candidate((KB::Candidate *)&v37, this, 0);
    if (v37 && (*(unsigned char *)(v38 + 240 * (v37 - 1) + 135) & 4) == 0)
    {
      char v11 = KB::ns_string((KB *)(v38 + 240 * (v37 - 1)), v10);
      id v31 = 0;
      uint64_t v12 = [v9 checkSpellingOfString:v11 startingAt:0 language:v7 wrap:0 correction:&v31];
      unint64_t v13 = (KB *)v31;
      int32_t v14 = v13;
      if (v13)
      {
        KB::utf8_string(v13, (uint64_t)v35);
        uint64_t v15 = (char *)*((void *)a2 + 1);
        if (!v15) {
          uint64_t v15 = (char *)a2 + 16;
        }
        if (*(_WORD *)a2) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = "";
        }
        v30.lexicon_id = TILexiconIDForLocaleIdentifier(v16);
        v30.word_id = 0;
        KB::Word::Word((KB::Word *)v33, (const KB::String *)v35, &v30, 0);
        v34 |= 0x8000u;
        KB::Candidate::pop_last_word((KB::Candidate *)&v37);
        KB::Candidate::append((unsigned __int16 *)&v37, (size_t *)v33);
        int v18 = KB::edit_distance(this, (const KB::String *)v35, v17);
        float v39 = logf(1.0 / (float)(v18 + 1));
        unint64_t v19 = *(void *)(a3 + 16);
        uint64_t v20 = *(KB::Candidate **)(a3 + 8);
        if ((unint64_t)v20 >= v19)
        {
          uint64_t v24 = 0x1CAC083126E978D5 * (((uint64_t)v20 - *(void *)a3) >> 3);
          if ((unint64_t)(v24 + 1) > 0x4189374BC6A7EFLL) {
            abort();
          }
          unint64_t v25 = 0x1CAC083126E978D5 * ((uint64_t)(v19 - *(void *)a3) >> 3);
          uint64_t v26 = 2 * v25;
          if (2 * v25 <= v24 + 1) {
            uint64_t v26 = v24 + 1;
          }
          if (v25 >= 0x20C49BA5E353F7) {
            unint64_t v27 = 0x4189374BC6A7EFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          void v32[4] = a3 + 16;
          if (v27) {
            unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v27);
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v29 = (KB::Candidate *)(v27 + 1000 * v24);
          v32[0] = v27;
          v32[1] = v29;
          v32[3] = v27 + 1000 * v28;
          KB::Candidate::Candidate(v29, (const KB::Candidate *)&v37);
          v32[2] = (char *)v29 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a3, v32);
          BOOL v21 = *(char **)(a3 + 8);
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v32);
        }
        else
        {
          BOOL v21 = (char *)KB::Candidate::Candidate(v20, (const KB::Candidate *)&v37) + 1000;
        }
        *(void *)(a3 + 8) = v21;
        KB::Word::~Word((KB::Word *)v33);
        if (v36 && v35[6] == 1) {
          free(v36);
        }
      }
      else if (v12 == 0x7FFFFFFFFFFFFFFFLL)
      {
        void v33[4] = (KB::Candidate *)(a3 + 16);
        v33[0] = (KB::Candidate *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(1uLL);
        v33[1] = v33[0];
        v33[3] = (KB::Candidate *)((char *)v33[0] + 1000 * v22);
        v33[2] = (KB::Candidate *)((char *)KB::Candidate::Candidate(v33[0], (const KB::Candidate *)&v37) + 1000);
        std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a3, v33);
        uint64_t v23 = *(void *)(a3 + 8);
        std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v33);
        *(void *)(a3 + 8) = v23;
      }
    }
    KB::Candidate::~Candidate((KB::Candidate *)&v37);
  }
}

const __CFString *KB::utf8_string@<X0>(const __CFString *this@<X0>, uint64_t a2@<X8>)
{
  if (this)
  {
    CFIndex Length = CFStringGetLength(this);
    CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    operator new[]();
  }
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return this;
}

const __CFString *KB::std_string@<X0>(const __CFString *this@<X0>, void *a2@<X8>)
{
  if (this)
  {
    CFIndex Length = CFStringGetLength(this);
    CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    operator new[]();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return this;
}

void KB::cf_string(KB *this@<X0>, CFStringRef *a2@<X8>)
{
}

{
  BOOL v3;
  unsigned __int16 v4[3];
  char v5;
  void *v6;
  uint64_t v7;

  unsigned int v7 = *MEMORY[0x1E4F143B8];
  KB::String::String((uint64_t)v4, this);
  KB::cf_string_impl<KB::String>(a2, v4);
  if (v6) {
    uint64_t v3 = v5 == 1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    free(v6);
  }
}

void KB::cf_string_impl<KB::String>(CFStringRef *a1, unsigned __int16 *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFIndex v4 = *a2;
  uint64_t v5 = (const UInt8 *)*((void *)a2 + 1);
  uint64_t v6 = a2 + 8;
  if (!v5) {
    uint64_t v5 = (const UInt8 *)(a2 + 8);
  }
  if (*a2) {
    unsigned int v7 = v5;
  }
  else {
    unsigned int v7 = (const UInt8 *)"";
  }
  CFStringRef v8 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7, v4, 0x8000100u, 1u);
  if (!v8)
  {
    if (TICanLogMessageAtLevel_onceToken != -1) {
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
    }
    if (TICanLogMessageAtLevel_logLevel)
    {
      int32_t v9 = TIOSLogFacility();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = (const char *)*((void *)a2 + 1);
        if (!v10) {
          uint64_t v10 = (const char *)v6;
        }
        if (*a2) {
          char v11 = v10;
        }
        else {
          char v11 = "";
        }
        int v12 = 136315394;
        unint64_t v13 = "cf_string_impl";
        __int16 v14 = 2080;
        uint64_t v15 = v11;
        _os_log_debug_impl(&dword_1E3F0E000, v9, OS_LOG_TYPE_DEBUG, "%s warning: bytes do not represent UTF8 string: %s", (uint8_t *)&v12, 0x16u);
      }
    }
  }
  *a1 = v8;
}

void KB::cf_string(const UInt8 *a1@<X0>, CFStringRef *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(const UInt8 **)a1;
  }
  if (v4 >= 0) {
    CFIndex v6 = a1[23];
  }
  else {
    CFIndex v6 = *((void *)a1 + 1);
  }
  CFStringRef v7 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, v6, 0x8000100u, 1u);
  if (!v7)
  {
    if (TICanLogMessageAtLevel_onceToken != -1) {
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
    }
    if (TICanLogMessageAtLevel_logLevel)
    {
      CFStringRef v8 = TIOSLogFacility();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a1 + 23) >= 0) {
          int32_t v9 = a1;
        }
        else {
          int32_t v9 = *(const UInt8 **)a1;
        }
        int v10 = 136315394;
        char v11 = "cf_string_impl";
        __int16 v12 = 2080;
        unint64_t v13 = v9;
        _os_log_debug_impl(&dword_1E3F0E000, v8, OS_LOG_TYPE_DEBUG, "%s warning: bytes do not represent UTF8 string: %s", (uint8_t *)&v10, 0x16u);
      }
    }
  }
  *a2 = v7;
}

void KB::cf_string_no_copy(KB *this@<X0>, CFStringRef *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (const UInt8 *)*((void *)this + 1);
  if (!v5) {
    uint64_t v5 = (const UInt8 *)this + 16;
  }
  if (*(_WORD *)this) {
    CFIndex v6 = v5;
  }
  else {
    CFIndex v6 = (const UInt8 *)"";
  }
  CFStringRef v7 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, *(unsigned __int16 *)this, 0x8000100u, 1u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (!v7)
  {
    if (TICanLogMessageAtLevel_onceToken != -1) {
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
    }
    if (TICanLogMessageAtLevel_logLevel)
    {
      CFStringRef v8 = TIOSLogFacility();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int32_t v9 = (const char *)*((void *)this + 1);
        if (!v9) {
          int32_t v9 = (char *)this + 16;
        }
        if (*(_WORD *)this) {
          int v10 = v9;
        }
        else {
          int v10 = "";
        }
        int v11 = 136315394;
        __int16 v12 = "cf_string_no_copy";
        __int16 v13 = 2080;
        uint64_t v14 = v10;
        _os_log_debug_impl(&dword_1E3F0E000, v8, OS_LOG_TYPE_DEBUG, "%s warning: bytes do not represent UTF8 string: %s", (uint8_t *)&v11, 0x16u);
      }
    }
  }
  *a2 = v7;
}

CFMutableStringRef KB::cf_mutable_string@<X0>(CFMutableStringRef *a1@<X8>)
{
  CFMutableStringRef result = CFStringCreateMutable(0, 0);
  *a1 = result;
  return result;
}

void KB::append_format(__CFString *this, __CFString *a2, const char *a3, ...)
{
  va_start(va, a3);
  {
    KB::append_format(__CFString *,char const*,...)::__buffer = 0x100000;
    word_1EBFF06F4 = 0;
    byte_1EBFF06F6 = 0;
    qword_1EBFF06F8 = 0;
    byte_1EBFF0700 = 0;
    __cxa_atexit((void (*)(void *))KB::String::~String, &KB::append_format(__CFString *,char const*,...)::__buffer, &dword_1E3F0E000);
  }
  KB::String::clear((KB::String *)&KB::append_format(__CFString *,char const*,...)::__buffer);
  KB::String::append_format((KB::String *)&KB::append_format(__CFString *,char const*,...)::__buffer, (const char *)a2, va);
  uint64_t v5 = (char *)qword_1EBFF06F8;
  if (!qword_1EBFF06F8) {
    uint64_t v5 = &byte_1EBFF0700;
  }
  if ((_WORD)KB::append_format(__CFString *,char const*,...)::__buffer) {
    CFIndex v6 = v5;
  }
  else {
    CFIndex v6 = "";
  }
  CFStringAppendCString(this, v6, 0x8000100u);
}

void KB::lower_string(KB *this@<X0>, const KB::String *a2@<X1>, KB::String *a3@<X8>)
{
  v18[1] = *(CFMutableStringRef *)MEMORY[0x1E4F143B8];
  int v7 = *(unsigned __int16 *)this;
  int v8 = *((unsigned __int16 *)this + 2);
  if (*((_WORD *)this + 2))
  {
    if (a2)
    {
LABEL_21:
      KB::cf_mutable_string((KB *)v18, this);
      CFStringRef v17 = v18[0];
      CFStringLowercase(v18[0], a2);
      KB::utf8_string(v17, (uint64_t)a3);
      if (v17) {
        CFRelease(v17);
      }
      return;
    }
  }
  else
  {
    KB::String::compute_length((unsigned __int16 *)this);
    int v8 = *((unsigned __int16 *)this + 2);
    if (a2) {
      goto LABEL_21;
    }
  }
  if (v7 != v8) {
    goto LABEL_21;
  }
  uint64_t v9 = *(unsigned __int16 *)this;
  MEMORY[0x1F4188790]();
  int v11 = (char *)v18 - v10;
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      __int16 v13 = (const char *)*((void *)this + 1);
      if (!v13) {
        __int16 v13 = (char *)this + 16;
      }
      if (*(_WORD *)this) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = "";
      }
      v11[i] = __tolower(v14[i]);
    }
  }
  v11[v9] = 0;
  uint64_t v15 = (const char *)*((void *)this + 1);
  if (!v15) {
    uint64_t v15 = (char *)this + 16;
  }
  if (*(_WORD *)this) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = "";
  }
  if (!strcmp(v16, v11)) {
    KB::String::String(a3, this);
  }
  else {
    KB::String::String(a3, v11);
  }
}

void KB::cf_mutable_string(KB *this, const KB::String *a2)
{
  Mutable = CFStringCreateMutable(0, 0);
  *(void *)this = Mutable;
  uint64_t v5 = (const char *)*((void *)a2 + 1);
  if (!v5) {
    uint64_t v5 = (char *)a2 + 16;
  }
  if (*(_WORD *)a2) {
    CFIndex v6 = v5;
  }
  else {
    CFIndex v6 = "";
  }

  CFStringAppendCString(Mutable, v6, 0x8000100u);
}

void KB::upper_string(KB *this@<X0>, const KB::String *a2@<X1>, const __CFLocale *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, KB::String *a6@<X8>)
{
  int v7 = this;
  v20[1] = *(CFMutableStringRef *)MEMORY[0x1E4F143B8];
  int v9 = *(unsigned __int16 *)this;
  int v10 = *((unsigned __int16 *)this + 2);
  if (*((_WORD *)this + 2))
  {
    if (a2)
    {
LABEL_21:
      KB::cf_mutable_string((KB *)v20, v7);
      CFStringRef v19 = v20[0];
      CFStringUppercase(v20[0], a2);
      KB::utf8_string(v19, (uint64_t)a6);
      if (v19) {
        CFRelease(v19);
      }
      return;
    }
  }
  else
  {
    this = (KB *)KB::String::compute_length((unsigned __int16 *)this);
    int v10 = *((unsigned __int16 *)v7 + 2);
    if (a2) {
      goto LABEL_21;
    }
  }
  if (v9 != v10) {
    goto LABEL_21;
  }
  uint64_t v11 = *(unsigned __int16 *)v7;
  MEMORY[0x1F4188790](this, a2, a3, a4, a5);
  __int16 v13 = (char *)v20 - v12;
  if (v11)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      uint64_t v15 = (const char *)*((void *)v7 + 1);
      if (!v15) {
        uint64_t v15 = (char *)v7 + 16;
      }
      if (*(_WORD *)v7) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = "";
      }
      v13[i] = __toupper(v16[i]);
    }
  }
  v13[v11] = 0;
  CFStringRef v17 = (const char *)*((void *)v7 + 1);
  if (!v17) {
    CFStringRef v17 = (char *)v7 + 16;
  }
  if (*(_WORD *)v7) {
    int v18 = v17;
  }
  else {
    int v18 = "";
  }
  if (!strcmp(v18, v13)) {
    KB::String::String(a6, v7);
  }
  else {
    KB::String::String(a6, v13);
  }
}

void KB::lower_character(unsigned int this@<W0>, const __CFLocale *a2@<X1>, uint64_t a3@<X8>)
{
  UniChar v5 = this;
  if (this > 0x7F || a2)
  {
    CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
    UniChar chars = v5;
    CFStringAppendCharacters(Mutable, &chars, 1);
    CFStringLowercase(Mutable, a2);
    KB::utf8_string(Mutable, a3);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    __darwin_ct_rune_t v7 = __tolower(this);
    KB::String::String(a3, v7);
  }
}

void KB::upper_character(unsigned int this@<W0>, const __CFLocale *a2@<X1>, uint64_t a3@<X8>)
{
  UniChar v5 = this;
  if (this > 0x7F || a2)
  {
    CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
    UniChar chars = v5;
    CFStringAppendCharacters(Mutable, &chars, 1);
    CFStringUppercase(Mutable, a2);
    KB::utf8_string(Mutable, a3);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    __darwin_ct_rune_t v7 = __toupper(this);
    KB::String::String(a3, v7);
  }
}

CFNumberRef KB::cf_number@<X0>(double a1@<D0>, CFNumberRef *a2@<X8>)
{
  double valuePtr = a1;
  CFNumberRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  *a2 = result;
  return result;
}

CFMutableDictionaryRef KB::cf_mutable_dictionary@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *a1 = result;
  return result;
}

CFMutableArrayRef KB::cf_mutable_array@<X0>(CFIndex capacity@<X0>, CFMutableArrayRef *a2@<X8>)
{
  CFMutableArrayRef result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

void KB::string_from_locale(KB *this@<X0>, const __CFLocale *a2@<X1>, void *a3@<X8>)
{
  _OWORD v11[2] = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = (const __CFString *)MEMORY[0x1E4E79AD0](this, a2);
  KB::utf8_string(v4, (uint64_t)v8);
  UniChar v5 = (char *)v10;
  if (!v10) {
    UniChar v5 = (char *)v11;
  }
  if (v8[0]) {
    CFIndex v6 = v5;
  }
  else {
    CFIndex v6 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(a3, v6);
  if (v10) {
    BOOL v7 = v9 == 1;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    free(v10);
  }
}

void KB::kb_string_from_locale(KB *this@<X0>, const __CFLocale *a2@<X1>, KB::String *a3@<X8>)
{
  _OWORD v11[2] = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = (const __CFString *)MEMORY[0x1E4E79AD0](this, a2);
  KB::utf8_string(v4, (uint64_t)v8);
  UniChar v5 = (const char *)v10;
  if (!v10) {
    UniChar v5 = (const char *)v11;
  }
  if (v8[0]) {
    CFIndex v6 = v5;
  }
  else {
    CFIndex v6 = "";
  }
  KB::String::String(a3, v6);
  if (v10) {
    BOOL v7 = v9 == 1;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    free(v10);
  }
}

void __getLSApplicationProxyClass_block_invoke_8922(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("LSApplicationProxy");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getLSApplicationProxyClass_softClass_8921 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    CoreServicesLibrary();
  }
}

void CoreServicesLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!CoreServicesLibraryCore_frameworkLibrary_8940)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __CoreServicesLibraryCore_block_invoke_8941;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E6E2B448;
    uint64_t v3 = 0;
    CoreServicesLibraryCore_frameworkLibrary_8940 = _sl_dlopen();
    id v0 = (void *)v1[0];
    if (CoreServicesLibraryCore_frameworkLibrary_8940)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      id v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

uint64_t __CoreServicesLibraryCore_block_invoke_8941()
{
  uint64_t result = _sl_dlopen();
  CoreServicesLibraryCore_frameworkLibrary_8940 = result;
  return result;
}

Class __getLSApplicationWorkspaceClass_block_invoke(uint64_t a1)
{
  CoreServicesLibrary();
  Class result = objc_getClass("LSApplicationWorkspace");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getLSApplicationWorkspaceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__40__TILaunchServicesLookup_lookupAppNames__block_invoke(v3);
  }
  return result;
}

uint64_t is_device_under_pressure(void)
{
  id v0 = [MEMORY[0x1E4F28F80] processInfo];
  if ([v0 thermalState] <= 1) {
    uint64_t v1 = [v0 isLowPowerModeEnabled];
  }
  else {
    uint64_t v1 = 1;
  }

  return v1;
}

void CoreDuetLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!CoreDuetLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __CoreDuetLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E6E2B488;
    uint64_t v3 = 0;
    CoreDuetLibraryCore_frameworkLibrardouble y = _sl_dlopen();
    id v0 = (void *)v1[0];
    if (CoreDuetLibraryCore_frameworkLibrary)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      id v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

uint64_t __CoreDuetLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrardouble y = result;
  return result;
}

void CoreDuetContextLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!CoreDuetContextLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __CoreDuetContextLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E6E2B4A0;
    uint64_t v3 = 0;
    CoreDuetContextLibraryCore_frameworkLibrardouble y = _sl_dlopen();
    id v0 = (void *)v1[0];
    if (CoreDuetContextLibraryCore_frameworkLibrary)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      id v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

uint64_t __CoreDuetContextLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreDuetContextLibraryCore_frameworkLibrardouble y = result;
  return result;
}

uint64_t _createStaticLexiconForLocaleIdentifier(void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F72458], v1);
  uint64_t v3 = LXLexiconCreate();
  CFRelease(Mutable);

  return v3;
}

void TI::CP::PathReducer::append_average_previous_point(TI::CP::PathReducer *this)
{
  long long v2 = (char *)*((void *)this + 8);
  uint64_t v3 = (float64x2_t *)*((void *)this + 9);
  float64x2_t v4 = 0uLL;
  float64x2_t v5 = 0uLL;
  if (v2 != (char *)v3)
  {
    CFIndex v6 = (float64x2_t *)*((void *)this + 8);
    do
    {
      float64x2_t v7 = *v6;
      float64x2_t v8 = v6[1];
      v6 += 2;
      float64x2_t v5 = vaddq_f64(v5, v8);
      float64x2_t v4 = vaddq_f64(v4, v7);
    }
    while (v6 != v3);
  }
  float64x2_t v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(unint64_t)(((char *)v3 - v2) >> 5)), 0);
  float64x2_t v10 = vdivq_f64(v5, v9);
  CGPoint v11 = (CGPoint)vdivq_f64(v4, v9);
  CGFloat y = v11.y;
  TI::CP::Path::append((TI::CP::PathReducer *)((char *)this + 16), v11, v10.f64[1], v10.f64[0], -1.0, 0.0);
  uint64_t v14 = *((void *)this + 8);
  uint64_t v13 = *((void *)this + 9);
  uint64_t v15 = v13 - (v14 + 32);
  if (v13 != v14 + 32) {
    memmove(*((void **)this + 8), (const void *)(v14 + 32), v13 - (v14 + 32));
  }
  *((void *)this + 9) = v14 + v15;
}

void TI::CP::PathReducer::append(TI::CP::PathReducer *this, CGPoint a2, CGFloat a3, CGFloat a4)
{
  CGPoint v6 = a2;
  long long v7 = *(unint64_t *)&a4;
  uint64_t v9 = *((void *)this + 8);
  unint64_t v8 = *((void *)this + 9);
  uint64_t v10 = (uint64_t)(v8 - v9) >> 5;
  if (v8 == v9)
  {
    unint64_t v15 = *((void *)this + 10);
    if (v8 >= v15)
    {
      CGFloat x = a2.x;
      CGFloat y = a2.y;
      double v40 = a4;
      uint64_t v17 = v15 - v9;
      if (v17 >> 4 <= (unint64_t)(v10 + 1)) {
        uint64_t v18 = v10 + 1;
      }
      else {
        uint64_t v18 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      CGPoint v43 = a2;
      CGPoint v41 = (CGPoint)*(unint64_t *)&a4;
      uint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v19);
      BOOL v21 = (CGPoint *)&v20[32 * v10];
      uint64_t v23 = &v20[32 * v22];
      *BOOL v21 = v43;
      v21[1] = v41;
      p_CGFloat x = (_OWORD *)&v21[2].x;
      unint64_t v25 = (char *)*((void *)this + 8);
      uint64_t v24 = (char *)*((void *)this + 9);
      if (v24 != v25)
      {
        do
        {
          CGPoint v26 = (CGPoint)*((_OWORD *)v24 - 2);
          CGPoint v27 = (CGPoint)*((_OWORD *)v24 - 1);
          v24 -= 32;
          v21[-2] = v26;
          v21[-1] = v27;
          v21 -= 2;
        }
        while (v24 != v25);
        uint64_t v24 = (char *)*((void *)this + 8);
      }
      *((void *)this + 8) = v21;
      *((void *)this + 9) = p_x;
      *((void *)this + 10) = v23;
      if (v24) {
        operator delete(v24);
      }
      a2.CGFloat y = y;
      a4 = v40;
      a2.CGFloat x = x;
    }
    else
    {
      *(CGPoint *)unint64_t v8 = a2;
      *(_OWORD *)(v8 + 16) = *(unint64_t *)&a4;
      p_CGFloat x = (_OWORD *)(v8 + 32);
    }
    *((void *)this + 9) = p_x;
    TI::CP::Path::append((TI::CP::PathReducer *)((char *)this + 16), a2, a3, a4, -1.0, 0.0);
  }
  else
  {
    float64x2_t v11 = vsubq_f64(*(float64x2_t *)(v8 - 32), (float64x2_t)a2);
    float64x2_t v12 = vsubq_f64(*(float64x2_t *)(v8 - 16), (float64x2_t)*(unint64_t *)&a4);
    *(float *)v12.f64 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v11, v11), vmulq_f64(v12, v12))));
    if (*(double *)this <= *(float *)v12.f64)
    {
      unint64_t v13 = *((void *)this + 10);
      if (v8 >= v13)
      {
        unint64_t v28 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 59) {
          abort();
        }
        uint64_t v29 = v13 - v9;
        if (v29 >> 4 > v28) {
          unint64_t v28 = v29 >> 4;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          CGPoint v44 = v6;
          long long v42 = *(unint64_t *)&a4;
          unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v30);
          long long v7 = v42;
          CGPoint v6 = v44;
        }
        else
        {
          uint64_t v31 = 0;
        }
        unint64_t v32 = v30 + 32 * v10;
        unint64_t v33 = v30 + 32 * v31;
        *(CGPoint *)unint64_t v32 = v6;
        *(_OWORD *)(v32 + 16) = v7;
        unint64_t v14 = v32 + 32;
        int v35 = (char *)*((void *)this + 8);
        int v34 = (char *)*((void *)this + 9);
        if (v34 != v35)
        {
          do
          {
            long long v36 = *((_OWORD *)v34 - 2);
            long long v37 = *((_OWORD *)v34 - 1);
            v34 -= 32;
            *(_OWORD *)(v32 - 32) = v36;
            *(_OWORD *)(v32 - 16) = v37;
            v32 -= 32;
          }
          while (v34 != v35);
          int v34 = (char *)*((void *)this + 8);
        }
        *((void *)this + 8) = v32;
        *((void *)this + 9) = v14;
        *((void *)this + 10) = v33;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(CGPoint *)unint64_t v8 = v6;
        *(_OWORD *)(v8 + 16) = *(unint64_t *)&a4;
        unint64_t v14 = v8 + 32;
      }
      *((void *)this + 9) = v14;
      uint64_t v10 = (uint64_t)(v14 - *((void *)this + 8)) >> 5;
    }
    if (v10 == *((_DWORD *)this + 2))
    {
      TI::CP::PathReducer::append_average_previous_point(this);
    }
  }
}

void TI::CP::PathReducer::finalize(TI::CP::PathReducer *this)
{
  uint64_t v3 = *((void *)this + 8);
  uint64_t v2 = *((void *)this + 9);
  if (*((_DWORD *)this + 2) == (v2 - v3) >> 5)
  {
    TI::CP::PathReducer::append_average_previous_point(this);
    uint64_t v3 = *((void *)this + 8);
    uint64_t v2 = *((void *)this + 9);
  }
  if (v2 != v3)
  {
    CGPoint v4 = *(CGPoint *)(v2 - 32);
    uint64_t v5 = *(void *)(v2 - 24);
    TI::CP::Path::append((TI::CP::PathReducer *)((char *)this + 16), v4, *(CGFloat *)(v2 - 8), *(CGFloat *)(v2 - 16), -1.0, 0.0);
    uint64_t v3 = *((void *)this + 8);
  }
  *((void *)this + 9) = v3;
}

void *TI::CP::PathReducer::clear(void *this)
{
  this[9] = this[8];
  this[3] = this[2];
  this[6] = this[5];
  return this;
}

void TI::CP::PathReducer::reduced_path(TI::CP::PathReducer *this@<X0>, double a2@<D0>, TI::CP::Path *a3@<X8>)
{
  uint64_t v5 = (int8x16_t *)*((void *)this + 2);
  CGPoint v6 = (long long *)*((void *)this + 3);
  if (v5 == (int8x16_t *)v6)
  {
    BOOL v21 = 0;
    long long v7 = 0;
    unint64_t v8 = 0;
    unint64_t v33 = 0;
    int v34 = 0;
    unint64_t v32 = 0;
  }
  else
  {
    long long v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      int8x16_t v10 = *v5;
      int8x16_t v11 = vextq_s8(v5[1], v5[1], 8uLL);
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v12 = (v8 - v7) >> 5;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 59) {
          goto LABEL_38;
        }
        if ((uint64_t)(v9 - (void)v7) >> 4 > v13) {
          unint64_t v13 = (uint64_t)(v9 - (void)v7) >> 4;
        }
        if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          int8x16_t v30 = v11;
          int8x16_t v31 = *v5;
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v14);
          int8x16_t v11 = v30;
          int8x16_t v10 = v31;
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v16 = (char *)(v14 + 32 * v12);
        *(int8x16_t *)uint64_t v16 = v10;
        *((int8x16_t *)v16 + 1) = v11;
        uint64_t v17 = v16;
        while (v8 != v7)
        {
          long long v18 = *((_OWORD *)v8 - 2);
          long long v19 = *((_OWORD *)v8 - 1);
          v8 -= 32;
          *((_OWORD *)v17 - 2) = v18;
          *((_OWORD *)v17 - 1) = v19;
          v17 -= 32;
        }
        unint64_t v9 = v14 + 32 * v15;
        unint64_t v8 = v16 + 32;
        if (v7) {
          operator delete(v7);
        }
        long long v7 = v17;
      }
      else
      {
        *(int8x16_t *)unint64_t v8 = v10;
        *((int8x16_t *)v8 + 1) = v11;
        v8 += 32;
      }
      v5 += 3;
    }
    while (v5 != (int8x16_t *)v6);
    unint64_t v33 = 0;
    int v34 = 0;
    unint64_t v32 = 0;
    uint64_t v20 = v8 - v7;
    if (v8 == v7)
    {
      BOOL v21 = 0;
      unint64_t v8 = v7;
    }
    else
    {
      if (v8 - v7 < 0) {
LABEL_38:
      }
        abort();
      BOOL v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v20 >> 5);
      unint64_t v32 = v21;
      int v34 = &v21[32 * v22];
      memmove(v21, v7, v8 - v7);
      unint64_t v33 = &v21[v20];
    }
  }
  float v23 = a2;
  end_point_fit(&v35, &v32, 0, ((v8 - v7) >> 5) - 1, v23);
  if (v21) {
    operator delete(v21);
  }
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v24 = v35;
  unint64_t v25 = v36;
  if (v35 != v36)
  {
    CGPoint v26 = v35;
    do
    {
      CGPoint v27 = *v26;
      CGPoint v28 = v26[1];
      v26 += 2;
      CGFloat y = v27.y;
      TI::CP::Path::append(a3, v27, v28.y, v28.x, -1.0, 0.0);
    }
    while (v26 != v25);
  }
  if (v24) {
    operator delete(v24);
  }
  if (v7)
  {
    operator delete(v7);
  }
}

void end_point_fit(void *a1, void *a2, uint64_t a3, unint64_t a4, float a5)
{
  uint64_t v10 = a3 + 1;
  double v11 = 0.0;
  uint64_t v12 = a3;
  if (a3 + 1 < a4)
  {
    unint64_t v13 = (float64x2_t *)(*a2 + 32 * a3);
    float64x2_t v14 = *v13;
    float64x2_t v15 = v13[1];
    uint64_t v16 = (float64x2_t *)(*a2 + 32 * a4);
    float64x2_t v17 = *v16;
    int64x2_t v18 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v14, *v16), (int8x16_t)vceqq_f64(v15, v16[1]));
    unint64_t v19 = vandq_s8((int8x16_t)v18, (int8x16_t)vdupq_laneq_s64(v18, 1)).u64[0];
    double v20 = v17.f64[0] - v14.f64[0];
    double v21 = v17.f64[1] - v14.f64[1];
    double v22 = sqrt(v21 * v21 + v20 * v20);
    double v11 = 0.0;
    uint64_t v12 = a3;
    do
    {
      uint64_t v23 = *a2 + 32 * v10;
      float64x2_t v24 = *(float64x2_t *)v23;
      if ((v19 & 0x8000000000000000) != 0)
      {
        float64x2_t v26 = vsubq_f64(*(float64x2_t *)(v23 + 16), v15);
        float64x2_t v27 = vsubq_f64(v24, v14);
        double v25 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v27, v27), vmulq_f64(v26, v26))));
      }
      else
      {
        double v25 = fabs(v20 * (v14.f64[1] - v24.f64[1]) - (v14.f64[0] - v24.f64[0]) * v21) / v22;
      }
      if (v25 > v11)
      {
        uint64_t v12 = v10;
        double v11 = v25;
      }
      ++v10;
    }
    while (a4 != v10);
  }
  if (v11 <= a5)
  {
    char v68 = (long long *)(*a2 + 32 * a3);
    uint64_t v69 = (long long *)(*a2 + 32 * a4);
    long long v73 = *v69;
    long long v74 = *v68;
    long long v71 = v69[1];
    long long v72 = v68[1];
    uint64_t v70 = operator new(0x40uLL);
    a1[1] = v70 + 4;
    a1[2] = v70 + 4;
    *uint64_t v70 = v74;
    v70[1] = v72;
    v70[2] = v73;
    v70[3] = v71;
    *a1 = v70;
    return;
  }
  _ZNSt3__16vectorIDv4_dNS_9allocatorIS1_EEEC2ERKS4_(__p, (uint64_t)a2);
  end_point_fit(&v79, __p, a3, v12, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  _ZNSt3__16vectorIDv4_dNS_9allocatorIS1_EEEC2ERKS4_(v75, (uint64_t)a2);
  end_point_fit(&v76, v75, v12, a4, a5);
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
  CGPoint v28 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v29 = v79;
  if (v80 - (void)v79 != 32)
  {
    CGPoint v28 = 0;
    uint64_t v30 = 0;
    if ((unint64_t)(((v80 - (uint64_t)v79) >> 5) - 1) <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = ((v80 - (uint64_t)v79) >> 5) - 1;
    }
    do
    {
      unint64_t v32 = a1[2];
      if ((unint64_t)v28 >= v32)
      {
        int v35 = (_OWORD *)*a1;
        uint64_t v36 = ((uint64_t)v28 - *a1) >> 5;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 59) {
LABEL_64:
        }
          abort();
        uint64_t v38 = v32 - (void)v35;
        if (v38 >> 4 > v37) {
          unint64_t v37 = v38 >> 4;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39) {
          unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v39);
        }
        else {
          uint64_t v40 = 0;
        }
        CGPoint v41 = &v29[32 * v30];
        long long v42 = *(_OWORD *)v41;
        long long v43 = *((_OWORD *)v41 + 1);
        CGPoint v44 = (_OWORD *)(v39 + 32 * v36);
        *CGPoint v44 = v42;
        v44[1] = v43;
        int v45 = v44;
        while (v28 != v35)
        {
          long long v46 = *(v28 - 2);
          long long v47 = *(v28 - 1);
          v28 -= 2;
          *(v45 - 2) = v46;
          *(v45 - 1) = v47;
          v45 -= 2;
        }
        CGPoint v28 = v44 + 2;
        *a1 = v45;
        a1[2] = v39 + 32 * v40;
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        unint64_t v33 = &v29[32 * v30];
        long long v34 = *((_OWORD *)v33 + 1);
        *CGPoint v28 = *(_OWORD *)v33;
        v28[1] = v34;
        v28 += 2;
      }
      a1[1] = v28;
      ++v30;
    }
    while (v30 != v31);
  }
  int v48 = v76;
  uint64_t v49 = v77 - v76;
  if (v77 != v76)
  {
    uint64_t v50 = 0;
    if ((unint64_t)(v49 >> 5) <= 1) {
      uint64_t v51 = 1;
    }
    else {
      uint64_t v51 = v49 >> 5;
    }
    do
    {
      unint64_t v52 = a1[2];
      if ((unint64_t)v28 >= v52)
      {
        unint64_t v55 = (_OWORD *)*a1;
        uint64_t v56 = ((uint64_t)v28 - *a1) >> 5;
        unint64_t v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 59) {
          goto LABEL_64;
        }
        uint64_t v58 = v52 - (void)v55;
        if (v58 >> 4 > v57) {
          unint64_t v57 = v58 >> 4;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v59 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v57;
        }
        if (v59) {
          unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v59);
        }
        else {
          uint64_t v60 = 0;
        }
        uint64_t v61 = &v48[32 * v50];
        long long v62 = *(_OWORD *)v61;
        long long v63 = *((_OWORD *)v61 + 1);
        unint64_t v64 = (_OWORD *)(v59 + 32 * v56);
        *unint64_t v64 = v62;
        v64[1] = v63;
        uint64_t v65 = v64;
        while (v28 != v55)
        {
          long long v66 = *(v28 - 2);
          long long v67 = *(v28 - 1);
          v28 -= 2;
          *(v65 - 2) = v66;
          *(v65 - 1) = v67;
          v65 -= 2;
        }
        CGPoint v28 = v64 + 2;
        *a1 = v65;
        a1[2] = v59 + 32 * v60;
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        int v53 = &v48[32 * v50];
        long long v54 = *((_OWORD *)v53 + 1);
        *CGPoint v28 = *(_OWORD *)v53;
        v28[1] = v54;
        v28 += 2;
      }
      a1[1] = v28;
      ++v50;
    }
    while (v50 != v51);
    if (!v48) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  int v48 = v77;
  if (v77) {
LABEL_57:
  }
    operator delete(v48);
LABEL_58:
  if (v29) {
    operator delete(v29);
  }
}

void *_ZNSt3__16vectorIDv4_dNS_9allocatorIS1_EEEC2ERKS4_(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  CGPoint v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<KB::String>::__vallocate[abi:nn180100](a1, v5 >> 5);
    CGPoint v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

KB::String *KB::UTF8Iterator::UTF8Iterator(KB::UTF8Iterator *this, const KB::String *a2)
{
  uint64_t result = KB::String::String(this, a2);
  *((_DWORD *)result + 8) = 0;
  return result;
}

{
  KB::String *result;

  uint64_t result = KB::String::String(this, a2);
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t KB::UTF8Iterator::reset(uint64_t this)
{
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t KB::UTF8Iterator::prev(KB::UTF8Iterator *this)
{
  uint64_t v1 = *((unsigned __int16 *)this + 17);
  if (*((_WORD *)this + 17))
  {
    *((_WORD *)this + 17) = v1 - 1;
    if (*(_WORD *)this)
    {
      uint64_t v2 = (char *)this + 16;
      if (*((void *)this + 1)) {
        uint64_t v2 = (const char *)*((void *)this + 1);
      }
    }
    else
    {
      uint64_t v2 = "";
    }
    int v3 = *((unsigned __int16 *)this + 16);
    *((_WORD *)this + 16) = v3 - 1;
    uint64_t v1 = v2[(unsigned __int16)(v3 - 1)];
    if ((v2[(unsigned __int16)(v3 - 1)] & 0xC0) == 0x80)
    {
      int v4 = v2[(unsigned __int16)(v3 - 1)] & 0x3F;
      int v5 = v3 - 2;
      *((_WORD *)this + 16) = v3 - 2;
      unsigned int v6 = v2[(unsigned __int16)(v3 - 2)];
      if (v6 <= 0xBF)
      {
        char v9 = 1;
        char v10 = 6;
        do
        {
          v4 |= (v6 & 0x3F) << v10;
          ++v9;
          v10 += 6;
          *((_WORD *)this + 16) = --v5;
          unsigned int v6 = v2[(unsigned __int16)v5];
        }
        while (v6 <= 0xBF);
        char v8 = 6 - v9;
        char v7 = v10;
      }
      else
      {
        char v7 = 6;
        char v8 = 5;
      }
      return ((v6 & ~(-1 << v8)) << v7) | v4;
    }
  }
  return v1;
}

uint64_t KB::UTF8Iterator::next(KB::UTF8Iterator *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 17);
  unsigned int v3 = *((unsigned __int16 *)this + 2);
  if (!*((_WORD *)this + 2))
  {
    KB::String::compute_length((unsigned __int16 *)this);
    unsigned int v3 = *((unsigned __int16 *)this + 2);
  }
  if (v2 >= v3) {
    return 0;
  }
  ++*((_WORD *)this + 17);
  if (*(_WORD *)this)
  {
    int v4 = (const char *)*((void *)this + 1);
    if (!v4) {
      int v4 = (char *)this + 16;
    }
  }
  else
  {
    int v4 = "";
  }
  uint64_t v6 = *((unsigned __int16 *)this + 16);
  unsigned __int16 v7 = v6 + 1;
  *((_WORD *)this + 16) = v6 + 1;
  uint64_t result = v4[v6];
  if ((result + 64) <= 0x34)
  {
    int v8 = kb_utf8_countTrailBytes[v4[v6]];
    uint64_t result = result & ~(-1 << (6 - v8));
    if (v8 != 1)
    {
      if (v8 != 2)
      {
        if (v8 != 3) {
          return result;
        }
        unsigned __int16 v9 = v6 + 2;
        *((_WORD *)this + 16) = v9;
        int v10 = v4[v7] & 0x3F | (result << 6);
        unsigned __int16 v7 = v9;
        LODWORD(result) = v10;
      }
      *((_WORD *)this + 16) = v7 + 1;
      int v11 = v4[v7++] & 0x3F | (result << 6);
      LODWORD(result) = v11;
    }
    *((_WORD *)this + 16) = v7 + 1;
    return v4[v7] & 0x3Fu | (result << 6);
  }
  return result;
}

void KB::substr_to_pos_UTF8(KB *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = a2;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v11, this);
  unsigned int v5 = 0;
  int v15 = 0;
  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 6) = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  while (1)
  {
    unsigned int v6 = v12;
    unsigned int v7 = v5;
    if (!v12)
    {
      KB::String::compute_length(v11);
      unsigned int v6 = v12;
      unsigned int v7 = HIWORD(v15);
    }
    if (v5 >= v6 || v7 >= v3) {
      break;
    }
    unsigned int v9 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v11);
    KB::String::append((KB::String *)a3, v9);
    unsigned int v5 = HIWORD(v15);
  }
  if (v14) {
    BOOL v10 = v13 == 1;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10) {
    free(v14);
  }
}

void KB::utf8_string(KB *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = this;
  v6.location = [(KB *)v4 length];
  KB::utf8_substring(v4, 0, v6, a2);
}

void KB::utf8_substring(KB *this@<X0>, NSString *a2@<X1>, _NSRange a3@<0:X2, 8:X3>, uint64_t a4@<X8>)
{
  NSUInteger location = a3.location;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = this;
  if (!v7)
  {
    *(_DWORD *)a4 = 0x100000;
    *(_WORD *)(a4 + 4) = 0;
    *(unsigned char *)(a4 + 6) = 0;
    *(void *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 16) = 0;
    goto LABEL_33;
  }
  if (((4 * location) | 1) >= 0xFFF0) {
    size_t v8 = 65520;
  }
  else {
    size_t v8 = (4 * location) | 1;
  }
  float64x2_t v27 = 0;
  size_t v28 = v8;
  BOOL v29 = v8 > 0x400;
  if (v8 <= 0x400)
  {
    *(void *)uint64_t v23 = 0;
    long long v22 = xmmword_1E4154B50;
    BOOL v10 = v26;
LABEL_10:
    uint64_t v9 = v8 - 1;
    goto LABEL_11;
  }
  BOOL v10 = malloc_type_malloc(v8, 0xBD7CD695uLL);
  float64x2_t v27 = v10;
  *(void *)uint64_t v23 = 0;
  long long v22 = xmmword_1E4154B50;
  if (v10) {
    goto LABEL_10;
  }
  uint64_t v9 = -1;
LABEL_11:
  if (-[KB getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v7, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v10, v9, v23, 4, 0, a2, location, &v22))
  {
    if (v29) {
      int v11 = v27;
    }
    else {
      int v11 = v26;
    }
    v11[*(void *)v23] = 0;
    if (*((void *)&v22 + 1))
    {
      if (TICanLogMessageAtLevel_onceToken != -1) {
        dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
      }
      unsigned __int16 v12 = TIOSLogFacility();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v15 = NSString;
        v31.NSUInteger location = (NSUInteger)a2;
        v31.length = location;
        uint64_t v16 = NSStringFromRange(v31);
        float64x2_t v17 = NSStringFromRange((NSRange)v22);
        int64x2_t v18 = [v15 stringWithFormat:@"%s warning: attempt to convert range [%@] is incomplete, with remaining range [%@]", "utf8_substring", v16, v17];
        *(_DWORD *)buf = 138412290;
        double v25 = v18;
        _os_log_debug_impl(&dword_1E3F0E000, v12, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
    if (v29) {
      char v13 = (const char *)v27;
    }
    else {
      char v13 = v26;
    }
    KB::String::String((KB::String *)a4, v13, v23[0]);
  }
  else
  {
    if (TICanLogMessageAtLevel_onceToken != -1) {
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
    }
    if (TICanLogMessageAtLevel_logLevel)
    {
      float64x2_t v14 = TIOSLogFacility();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v19 = NSString;
        v32.NSUInteger location = (NSUInteger)a2;
        v32.length = location;
        double v20 = NSStringFromRange(v32);
        double v21 = [v19 stringWithFormat:@"%s warning: cannot get UTF8 substring from [%@] in range [%@]", "utf8_substring", v7, v20];
        *(_DWORD *)buf = 138412290;
        double v25 = v21;
        _os_log_debug_impl(&dword_1E3F0E000, v14, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
    *(_DWORD *)a4 = 0x100000;
    *(_WORD *)(a4 + 4) = 0;
    *(unsigned char *)(a4 + 6) = 0;
    *(void *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 16) = 0;
  }
  free(v27);
LABEL_33:
}

id KB::ns_string(KB *this, const KB::String *a2)
{
  KB::cf_string_impl<KB::String>((CFStringRef *)&v4, (unsigned __int16 *)this);
  id v2 = v4;

  return v2;
}

void KB::utf8_string_tokens_from_string(KB *this@<X0>, KB::String *a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x4812000000;
  int64x2_t v18 = __Block_byref_object_copy__9477;
  unint64_t v19 = __Block_byref_object_dispose__9478;
  double v20 = "";
  memset(v21, 0, sizeof(v21));
  unsigned int v5 = [NSString stringWithFormat:@"%@ ", this];
  if ([v5 length])
  {
    size_t v6 = 4 * [v5 length];
    unsigned int v7 = malloc_type_malloc(v6, 0xA907DC48uLL);
    uint64_t v14 = 0;
    long long v13 = xmmword_1E4154B50;
    if (objc_msgSend(v5, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v7, v6, &v14, 4, 0, 0, objc_msgSend(v5, "length"), &v13))
    {
      if (v13 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (TICanLogMessageAtLevel_onceToken != -1) {
          dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
        }
        if (TICanLogMessageAtLevel_logLevel >= 2)
        {
          size_t v8 = TIOSLogFacility();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            unsigned __int16 v12 = [NSString stringWithFormat:@"%s The range (%lu, %lu) was left over when getting the bytes from the original document text '%@'", "utf8_string_tokens_from_string", v13, v5];
            *(_DWORD *)buf = 138412290;
            uint64_t v23 = v12;
            _os_log_debug_impl(&dword_1E3F0E000, v8, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
          }
        }
      }
      LMStreamTokenizerCreate();
      LMStreamTokenizerPushBytes();
      LMStreamTokenizerRelease();
    }
    else
    {
      if (TICanLogMessageAtLevel_onceToken != -1) {
        dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
      }
      if (TICanLogMessageAtLevel_logLevel >= 2)
      {
        uint64_t v9 = TIOSLogFacility();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          int v11 = [NSString stringWithFormat:@"%s Unable to get the bytes from the candidate text '%@'", "utf8_string_tokens_from_string", v5];
          *(_DWORD *)buf = 138412290;
          uint64_t v23 = v11;
          _os_log_debug_impl(&dword_1E3F0E000, v9, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
        }
      }
    }
    free(v7);
  }
  BOOL v10 = v16;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  std::vector<KB::String>::__init_with_size[abi:nn180100]<KB::String*,KB::String*>(a2, (const KB::String *)v10[6], (const KB::String *)v10[7], (v10[7] - v10[6]) >> 5);

  _Block_object_dispose(&v15, 8);
  *(void *)&long long v13 = v21;
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v13);
}

__n128 __Block_byref_object_copy__9477(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__9478(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void ___ZN2KB30utf8_string_tokens_from_stringEP8NSStringPK10__CFLocale_block_invoke(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a3 < 0x10000 && (a4 - 500) <= 0xFFFFFE0C)
  {
    KB::String::String((KB::String *)v20, a2, (unsigned __int16)a3);
    unsigned int v5 = *(void **)(*(void *)(a1 + 32) + 8);
    size_t v6 = (KB::String *)v5[7];
    unint64_t v7 = v5[8];
    if ((unint64_t)v6 >= v7)
    {
      uint64_t v9 = v5[6];
      uint64_t v10 = ((uint64_t)v6 - v9) >> 5;
      if ((unint64_t)(v10 + 1) >> 59) {
        abort();
      }
      uint64_t v11 = v7 - v9;
      uint64_t v12 = v11 >> 4;
      if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v19 = v5 + 8;
      if (v13) {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      unint64_t v15 = v13;
      uint64_t v16 = (KB::String *)(v13 + 32 * v10);
      unint64_t v18 = v13 + 32 * v14;
      KB::String::String(v16, (const KB::String *)v20);
      uint64_t v17 = (char *)v16 + 32;
      std::vector<KB::String>::__swap_out_circular_buffer((uint64_t)(v5 + 6), &v15);
      size_t v8 = (char *)v5[7];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v15);
    }
    else
    {
      size_t v8 = (char *)KB::String::String(v6, (const KB::String *)v20) + 32;
    }
    v5[7] = v8;
    if (v21)
    {
      if (v20[6] == 1) {
        free(v21);
      }
    }
  }
}

uint64_t __Block_byref_object_copy__9763(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9764(uint64_t a1)
{
}

uint64_t TI::CP::PathResampler::clear(uint64_t this)
{
  *(void *)(this + 48) = *(void *)(this + 40);
  *(void *)(this + 72) = *(void *)(this + 64);
  *(void *)(this + 96) = *(void *)(this + 88);
  *(void *)(this + 120) = *(void *)(this + 112);
  *(unsigned char *)(this + 136) = 0;
  *(_DWORD *)(this + 140) = 0;
  *(_DWORD *)(this + 144) = 0;
  return this;
}

uint64_t TI::CP::PathResampler::is_inflection_point(TI::CP::PathResampler *this, unsigned int a2)
{
  uint64_t v2 = 0;
  v21[4] = *MEMORY[0x1E4F143B8];
  if (a2 && *((_DWORD *)this + 2))
  {
    uint64_t v3 = *((void *)this + 11);
    double v4 = *(double *)this * 3.0;
    uint64_t v5 = v3 + 48 * a2;
    double v7 = *(double *)(v5 + 32);
    size_t v6 = (double *)(v5 + 32);
    double v8 = v7;
    if (v7 < v4) {
      return 0;
    }
    uint64_t v9 = *((void *)this + 12);
    double v10 = v3 == v9 ? 0.0 : *(double *)(v9 - 16);
    if (v4 + v8 > v10) {
      return 0;
    }
    if (*((unsigned char *)this + 32))
    {
      uint64_t v12 = (v9 - v3) >> 4;
      unsigned int v13 = a2 - 2;
      uint64_t v14 = (double *)(v3 + 48 * (a2 - 1) + 32);
      unint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        while (*v14 > *v6 - v4)
        {
          if (0xAAAAAAAAAAAAAAABLL * v12 > v15
            && *(v14 - 2) - *(double *)(v3 + 48 * v13 + 16) > *((double *)this + 3))
          {
            return 0;
          }
          --v13;
          v14 -= 6;
          if (!--v15) {
            break;
          }
        }
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * v12;
      if (0xAAAAAAAAAAAAAAABLL * v12 > a2
        && *(double *)(v3 + 48 * a2 + 16) - *(double *)(v3 + 48 * (a2 - 1) + 16) > *((double *)this + 3))
      {
        return 1;
      }
      double v17 = v8 - v4;
      for (unsigned int i = a2 + 1; v16 > i && *(double *)(v3 + 48 * i + 32) > v17; ++i)
      {
        if (i && *(double *)(v3 + 48 * i + 16) - *(double *)(v3 + 48 * (i - 1) + 16) > *((double *)this + 3)) {
          return 0;
        }
      }
    }
    int v19 = *((_DWORD *)this + 3);
    if (v19 == 1)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v9 - v3) >> 4) > a2
        && *(double *)(v3 + 48 * a2 + 16) - *(double *)(v3 + 48 * (a2 - 1) + 16) > *((double *)this + 3))
      {
        return 1;
      }
      v21[0] = &unk_1F3F75670;
      v21[1] = this;
      void v21[3] = v21;
      is_local_maCGFloat x = TI::CP::Path::is_local_max((void *)this + 11, a2, (uint64_t)v21, v4);
      std::__function::__value_func<double ()>::~__value_func[abi:nn180100](v21);
      if (is_local_max) {
        return 1;
      }
    }
    else if (!v19 {
           && (TI::CP::Path::is_curvature_local_max((TI::CP::PathResampler *)((char *)this + 88), a2, v4) & 1) != 0)
    }
    {
      return 1;
    }
    return 0;
  }
  return v2;
}

BOOL TI::CP::PathResampler::is_absolute_pause(TI::CP::PathResampler *this, unsigned int a2)
{
  if (a2 && (uint64_t v2 = *((void *)this + 11), 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 12) - v2) >> 4) > a2)) {
    return *(double *)(v2 + 48 * a2 + 16) - *(double *)(v2 + 48 * (a2 - 1) + 16) > *((double *)this + 3);
  }
  else {
    return 0;
  }
}

double std::__function::__func<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0,std::allocator<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0>,double ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v2) {
    return -TI::CP::Path::speed((TI::CP::Path *)(v3 + 88), v2);
  }
  uint64_t v4 = *(void *)(v3 + 88);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v3 + 96) - v4) >> 4) <= v2) {
    return -TI::CP::Path::speed((TI::CP::Path *)(v3 + 88), v2);
  }
  double result = 0.0;
  if (*(double *)(v4 + 48 * v2 + 16) - *(double *)(v4 + 48 * (v2 - 1) + 16) <= *(double *)(v3 + 24)) {
    return -TI::CP::Path::speed((TI::CP::Path *)(v3 + 88), v2);
  }
  return result;
}

uint64_t std::__function::__func<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0,std::allocator<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0>,double ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F3F75670;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0,std::allocator<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0>,double ()(unsigned int)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F3F75670;
  result[1] = v3;
  return result;
}

void std::__function::__func<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0,std::allocator<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0>,double ()(unsigned int)>::~__func()
{
}

uint64_t TI::CP::PathResampler::process_sample(const TI::CP::PathSample **this, unsigned int a2)
{
  int is_inflection_point = TI::CP::PathResampler::is_inflection_point((TI::CP::PathResampler *)this, a2);
  uint64_t v5 = this[5];
  size_t v6 = this[6];
  if (!a2)
  {
    double v20 = this[11];
    double v21 = (TI::CP::Path *)(this + 5);
    goto LABEL_10;
  }
  int v7 = is_inflection_point;
  uint64_t v23 = this[5];
  double v8 = this[11];
  uint64_t v9 = (float64x2_t *)((char *)v8 + 48 * a2);
  double v10 = v9 + 2;
  double v11 = v9[2].f64[0];
  double v12 = *((double *)v6 - 2) + *(double *)this;
  if (v12 < v11)
  {
    unsigned int v13 = (float64x2_t *)((char *)v8 + 48 * a2 - 48);
    unsigned int v14 = a2;
    unint64_t v15 = v13 + 2;
    unint64_t v16 = (float64x2_t *)((char *)v8 + 48 * v14 + 16);
    do
    {
      float v17 = (v12 - v15->f64[0]) / (v11 - v15->f64[0]);
      double v18 = v17;
      float64x2_t v19 = vmlaq_n_f64(v13[1], vsubq_f64(*v16, v13[1]), v18);
      v24[0] = vmlaq_n_f64(*v13, vsubq_f64(*v9, *v13), v18);
      v24[1] = v19;
      void v24[2] = vmlaq_n_f64(*v15, vsubq_f64(*v10, *v15), v18);
      TI::CP::Path::append((TI::CP::Path *)(this + 5), (const TI::CP::PathSample *)v24);
      double v12 = *((double *)this[6] - 2) + *(double *)this;
      double v11 = v10->f64[0];
    }
    while (v12 < v10->f64[0]);
  }
  if (!v7)
  {
    uint64_t v5 = v23;
    if (*((unsigned char *)this + 16)) {
      return -1431655765 * ((unint64_t)(v6 - v5) >> 4);
    }
    double v21 = (TI::CP::Path *)(this + 5);
    double v20 = (const TI::CP::PathSample *)v9;
LABEL_10:
    TI::CP::Path::append(v21, v20);
    return -1431655765 * ((unint64_t)(v6 - v5) >> 4);
  }
  TI::CP::Path::append((TI::CP::Path *)(this + 5), (const TI::CP::PathSample *)v9);
  TI::CP::Path::set_sample_is_inflection_point((TI::CP::Path *)(this + 5), -1431655765 * ((unint64_t)(this[6] - this[5]) >> 4) - 1);
  uint64_t v5 = v23;
  return -1431655765 * ((unint64_t)(v6 - v5) >> 4);
}

uint64_t TI::CP::PathResampler::retroactively_process_sample(TI::CP::PathResampler *this, unsigned int a2)
{
  unsigned int v2 = a2;
  if (TI::CP::PathResampler::is_inflection_point(this, a2))
  {
    uint64_t v4 = *((void *)this + 5);
    uint64_t v5 = *((void *)this + 6);
    if (v5 != v4)
    {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4);
      uint64_t v5 = *((void *)this + 5);
      do
      {
        unint64_t v7 = v6 >> 1;
        uint64_t v8 = v5 + 48 * (v6 >> 1);
        double v9 = *(double *)(v8 + 32);
        uint64_t v10 = v8 + 48;
        v6 += ~(v6 >> 1);
        if (v9 < *(double *)(*((void *)this + 11) + 48 * v2 + 32)) {
          uint64_t v5 = v10;
        }
        else {
          unint64_t v6 = v7;
        }
      }
      while (v6);
    }
    TI::CP::Path::resize((TI::CP::PathResampler *)((char *)this + 40), -1431655765 * ((unint64_t)(v5 - v4) >> 4));
    unint64_t v11 = *((void *)this + 6) - *((void *)this + 5);
    unsigned int v12 = *((_DWORD *)this + 35);
    for (*((_DWORD *)this + 35) = v2; v2 < v12; *((_DWORD *)this + 35) = v2)
    {
      TI::CP::PathResampler::process_sample((const TI::CP::PathSample **)this, v2);
      unsigned int v2 = *((_DWORD *)this + 35) + 1;
    }
  }
  else
  {
    unint64_t v11 = *((void *)this + 6) - *((void *)this + 5);
  }
  return -1431655765 * (v11 >> 4);
}

uint64_t TI::CP::PathResampler::process_new_samples(TI::CP::PathResampler *this)
{
  uint64_t v2 = *((void *)this + 11);
  uint64_t v3 = *((void *)this + 12);
  if (v2 == v3) {
    return -1431655765 * ((*((void *)this + 6) - *((void *)this + 5)) >> 4);
  }
  BOOL v6 = *((unsigned char *)this + 32)
    && (unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4), v5 = v4 - 1, v4 != 1)
    && v4 > v5
    && *(double *)(v2 + 48 * v5 + 16) - *(double *)(v2 + 48 * (v4 - 2) + 16) > *((double *)this + 3);
  int v7 = *((_DWORD *)this + 2);
  double v8 = *(double *)(v3 - 16);
  if (v7 == 1 && !v6) {
    double v8 = v8 + *(double *)this * -3.0;
  }
  uint64_t v9 = -1431655765 * ((*((void *)this + 6) - *((void *)this + 5)) >> 4);
  unint64_t v10 = *((unsigned int *)this + 35);
  if (0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4) > v10 && *(double *)(v2 + 48 * v10 + 32) <= v8)
  {
    do
    {
      unsigned int v11 = TI::CP::PathResampler::process_sample((const TI::CP::PathSample **)this, v10);
      if (v11 >= v9) {
        uint64_t v9 = v9;
      }
      else {
        uint64_t v9 = v11;
      }
      unint64_t v10 = (*((_DWORD *)this + 35) + 1);
      *((_DWORD *)this + 35) = v10;
      uint64_t v2 = *((void *)this + 11);
      uint64_t v3 = *((void *)this + 12);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4) > v10 && *(double *)(v2 + 48 * v10 + 32) <= v8);
    int v7 = *((_DWORD *)this + 2);
  }
  if (v7 == 2)
  {
    double v12 = v2 == v3 ? 0.0 : *(double *)(v3 - 16);
    unint64_t v13 = *((unsigned int *)this + 36);
    if (0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4) > v13)
    {
      double v14 = v12 + *(double *)this * -3.0;
      do
      {
        if (*(double *)(v2 + 48 * v13 + 32) >= v14) {
          break;
        }
        unsigned int v15 = TI::CP::PathResampler::retroactively_process_sample(this, v13);
        uint64_t v9 = v15 >= v9 ? v9 : v15;
        unint64_t v13 = (*((_DWORD *)this + 36) + 1);
        *((_DWORD *)this + 36) = v13;
        uint64_t v2 = *((void *)this + 11);
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 12) - v2) >> 4) > v13);
    }
  }
  return v9;
}

uint64_t TI::CP::PathResampler::append_and_resample(TI::CP::PathResampler *this, CGPoint a2, double a3, double a4, double a5)
{
  CGFloat y = a2.y;
  CGFloat x = a2.x;
  uint64_t v11 = *((void *)this + 12);
  double v12 = (TI::CP::PathResampler *)((char *)this + 88);
  if (*((void *)this + 11) == v11)
  {
    double v14 = 0.0;
  }
  else
  {
    double v13 = *(double *)(v11 - 16);
    double v14 = v13 + hypot(a2.x - *(double *)(v11 - 48), a2.y - *(double *)(v11 - 40));
  }
  *(CGFloat *)unint64_t v16 = x;
  *(CGFloat *)&v16[1] = y;
  *(double *)&void v16[2] = a3;
  *(double *)&void v16[3] = a4;
  *(double *)&UChar32 v16[4] = v14;
  *(double *)&v16[5] = a5;
  TI::CP::Path::append(v12, (const TI::CP::PathSample *)v16);

  return TI::CP::PathResampler::process_new_samples(this);
}

uint64_t TI::CP::PathResampler::finalize(TI::CP::PathResampler *this)
{
  uint64_t v1 = (TI::CP::PathResampler *)((char *)this + 40);
  uint64_t v2 = -1431655765 * ((*((void *)this + 6) - *((void *)this + 5)) >> 4);
  if (!*((unsigned char *)this + 136))
  {
    unint64_t v4 = *((unsigned int *)this + 35);
    uint64_t v5 = *((void *)this + 11);
    for (uint64_t i = *((void *)this + 12); 0xAAAAAAAAAAAAAAABLL * ((i - v5) >> 4) > v4; uint64_t i = *((void *)this + 12))
    {
      unsigned int v7 = TI::CP::PathResampler::process_sample((const TI::CP::PathSample **)this, v4);
      if (v7 >= v2) {
        uint64_t v2 = v2;
      }
      else {
        uint64_t v2 = v7;
      }
      unint64_t v4 = (*((_DWORD *)this + 35) + 1);
      *((_DWORD *)this + 35) = v4;
      uint64_t v5 = *((void *)this + 11);
    }
    if (*((_DWORD *)this + 2) == 2)
    {
      unint64_t v8 = *((unsigned int *)this + 36);
      if (0xAAAAAAAAAAAAAAABLL * ((i - v5) >> 4) > v8)
      {
        do
        {
          unsigned int v9 = TI::CP::PathResampler::retroactively_process_sample(this, v8);
          if (v9 >= v2) {
            uint64_t v2 = v2;
          }
          else {
            uint64_t v2 = v9;
          }
          unint64_t v8 = (*((_DWORD *)this + 36) + 1);
          *((_DWORD *)this + 36) = v8;
          uint64_t i = *((void *)this + 12);
        }
        while (0xAAAAAAAAAAAAAAABLL * ((i - *((void *)this + 11)) >> 4) > v8);
      }
    }
    uint64_t v10 = *((void *)this + 5);
    uint64_t v11 = *((void *)this + 6);
    if (v10 != v11)
    {
      double v13 = *(double *)(i - 48);
      double v14 = *(double *)(i - 40);
      double v12 = (const TI::CP::PathSample *)(i - 48);
      if (hypot(v13 - *(double *)(v11 - 48), v14 - *(double *)(v11 - 40)) > 1.0e-10)
      {
        unsigned int v15 = -1431655765 * ((unint64_t)(v11 - v10) >> 4);
        if (v2 >= v15) {
          uint64_t v2 = v15;
        }
        else {
          uint64_t v2 = v2;
        }
        TI::CP::Path::append(v1, v12);
      }
    }
    *((unsigned char *)this + 136) = 1;
  }
  return v2;
}

void KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::FilterSortkeyMatchFromDifferentLanguage *this, const KB::LanguageModelContext **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  v75[4] = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *((void *)a4 + 3);
  BOOL v6 = (std::__shared_weak_count *)*((void *)a4 + 4);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:nn180100](v6);
  }
  if (v7)
  {
    unint64_t v8 = *a2;
    KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v67, (const KB::CandidateFilterLookupContext *)((char *)a3 + 2032));
    unint64_t v10 = KB::CandidateFilter::language_id_for_context_and_candidate_with_confidence((KB::CandidateFilter *)v67, v8, a4, *((float *)this + 2), v9);
    if (v10
      || KB::LanguageModelContext::is_linguistically_void((KB::LanguageModelContext *)v67)
      && (unint64_t v10 = *((unsigned int *)a4 + 2), v10))
    {
      *(_OWORD *)std::string __p = 0u;
      long long v65 = 0u;
      float v66 = 1.0;
      uint64_t v11 = *a2;
      double v12 = a2[1];
      unint64_t v59 = (KB::CandidateCollection *)a2;
      if (*a2 != v12)
      {
        unsigned int v60 = v10;
        while (!KB::CandidateFilter::candidate_static_words_from_same_language(v11, (const Candidate *)v10))
        {
LABEL_105:
          uint64_t v11 = (const KB::LanguageModelContext *)((char *)v11 + 1000);
          if (v11 == v12) {
            goto LABEL_116;
          }
        }
        if (!*((_WORD *)v11 + 444)) {
          KB::Candidate::compute_string(v11);
        }
        KB::CandidateFilter::_sortkey_for_string((_LXLexicon *)((char *)v11 + 888), a4, v63);
        unsigned int v13 = LOWORD(v63[0]);
        if (LOWORD(v63[0]) <= 0xEu) {
          double v14 = (KB::String *)((char *)v63 + 2);
        }
        else {
          double v14 = (KB::String *)v63[1];
        }
        unsigned int v15 = KB::String::hash(v14, (const char *)LOWORD(v63[0]));
        unint64_t v16 = v15;
        unint64_t v17 = (unint64_t)__p[1];
        if (__p[1])
        {
          uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v18.i16[0] = vaddlv_u8(v18);
          unint64_t v19 = v18.u32[0];
          if (v18.u32[0] > 1uLL)
          {
            unint64_t v7 = v15;
            if (__p[1] <= (void *)v15) {
              unint64_t v7 = v15 % (unint64_t)__p[1];
            }
          }
          else
          {
            unint64_t v7 = (LODWORD(__p[1]) - 1) & v15;
          }
          double v20 = (void *)*((void *)__p[0] + v7);
          if (v20)
          {
            double v21 = (void *)*v20;
            if (*v20)
            {
              while (1)
              {
                unint64_t v22 = v21[1];
                if (v22 == v16)
                {
                  if (KB::operator==((unsigned __int16 *)v21 + 8, (unsigned __int16 *)v63))
                  {
                    unint64_t v10 = v60;
                    goto LABEL_90;
                  }
                }
                else
                {
                  if (v19 > 1)
                  {
                    if (v22 >= v17) {
                      v22 %= v17;
                    }
                  }
                  else
                  {
                    v22 &= v17 - 1;
                  }
                  if (v22 != v7)
                  {
LABEL_31:
                    unint64_t v10 = v60;
                    break;
                  }
                }
                double v21 = (void *)*v21;
                if (!v21) {
                  goto LABEL_31;
                }
              }
            }
          }
        }
        uint64_t v23 = operator new(0x38uLL);
        double v21 = v23;
        *uint64_t v23 = 0;
        v23[1] = v16;
        if (v13 >= 0xF)
        {
          *((_WORD *)v23 + 8) = v13;
          operator new[]();
        }
        *((_OWORD *)v23 + 1) = *(_OWORD *)v63;
        unsigned __int16 v23[4] = 0;
        v23[5] = 0;
        v23[6] = 0;
        float v24 = (float)(unint64_t)(*((void *)&v65 + 1) + 1);
        if (v17 && (float)(v66 * (float)v17) >= v24)
        {
LABEL_80:
          uint64_t v40 = __p[0];
          CGPoint v41 = (void *)*((void *)__p[0] + v7);
          if (v41)
          {
            *double v21 = *v41;
          }
          else
          {
            *double v21 = v65;
            *(void *)&long long v65 = v21;
            v40[v7] = &v65;
            if (!*v21) {
              goto LABEL_89;
            }
            unint64_t v42 = *(void *)(*v21 + 8);
            if ((v17 & (v17 - 1)) != 0)
            {
              if (v42 >= v17) {
                v42 %= v17;
              }
            }
            else
            {
              v42 &= v17 - 1;
            }
            CGPoint v41 = (char *)__p[0] + 8 * v42;
          }
          *CGPoint v41 = v21;
LABEL_89:
          ++*((void *)&v65 + 1);
LABEL_90:
          unint64_t v43 = v21[6];
          CGPoint v44 = (KB::Candidate *)v21[5];
          if ((unint64_t)v44 >= v43)
          {
            uint64_t v45 = v21[4];
            uint64_t v46 = 0x1CAC083126E978D5 * (((uint64_t)v44 - v45) >> 3);
            unint64_t v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) > 0x4189374BC6A7EFLL) {
              abort();
            }
            unint64_t v48 = 0x1CAC083126E978D5 * ((uint64_t)(v43 - v45) >> 3);
            if (2 * v48 > v47) {
              unint64_t v47 = 2 * v48;
            }
            if (v48 >= 0x20C49BA5E353F7) {
              unint64_t v49 = 0x4189374BC6A7EFLL;
            }
            else {
              unint64_t v49 = v47;
            }
            v74[4] = (void **)(v21 + 6);
            if (v49) {
              unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v49);
            }
            else {
              uint64_t v50 = 0;
            }
            uint64_t v51 = (void **)(v49 + 1000 * v46);
            v74[0] = (void **)v49;
            v74[1] = v51;
            v74[3] = (void **)(v49 + 1000 * v50);
            KB::Candidate::Candidate((KB::Candidate *)v51, v11);
            v74[2] = v51 + 125;
            std::vector<KB::Candidate>::__swap_out_circular_buffer(v21 + 4, v74);
            unint64_t v7 = v21[5];
            std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v74);
          }
          else
          {
            unint64_t v7 = (unint64_t)KB::Candidate::Candidate(v44, v11) + 1000;
          }
          void v21[5] = v7;
          if (LOWORD(v63[0]) >= 0xFu && v63[1]) {
            MEMORY[0x1E4E7BC00](v63[1], 0x1000C8077774924);
          }
          goto LABEL_105;
        }
        BOOL v25 = (v17 & (v17 - 1)) != 0;
        if (v17 < 3) {
          BOOL v25 = 1;
        }
        unint64_t v26 = v25 | (2 * v17);
        unint64_t v27 = vcvtps_u32_f32(v24 / v66);
        if (v26 <= v27) {
          int8x8_t prime = (int8x8_t)v27;
        }
        else {
          int8x8_t prime = (int8x8_t)v26;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v17 = (unint64_t)__p[1];
        if ((void *)*(void *)&prime > __p[1]) {
          goto LABEL_46;
        }
        if ((void *)*(void *)&prime < __p[1])
        {
          unint64_t v35 = vcvtps_u32_f32((float)*((unint64_t *)&v65 + 1) / v66);
          if (__p[1] < (void *)3
            || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
          {
            unint64_t v35 = std::__next_prime(v35);
          }
          else
          {
            uint64_t v37 = 1 << -(char)__clz(v35 - 1);
            if (v35 >= 2) {
              unint64_t v35 = v37;
            }
          }
          if (*(void *)&prime <= v35) {
            int8x8_t prime = (int8x8_t)v35;
          }
          if (*(void *)&prime >= v17)
          {
            unint64_t v17 = (unint64_t)__p[1];
          }
          else
          {
            if (prime)
            {
LABEL_46:
              if (*(void *)&prime >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              BOOL v29 = operator new(8 * *(void *)&prime);
              uint64_t v30 = __p[0];
              __p[0] = v29;
              if (v30) {
                operator delete(v30);
              }
              uint64_t v31 = 0;
              __p[1] = (void *)prime;
              do
                *((void *)__p[0] + v31++) = 0;
              while (*(void *)&prime != v31);
              NSRange v32 = (void **)v65;
              if ((void)v65)
              {
                unint64_t v33 = *(void *)(v65 + 8);
                uint8x8_t v34 = (uint8x8_t)vcnt_s8(prime);
                v34.i16[0] = vaddlv_u8(v34);
                if (v34.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                *((void *)__p[0] + v33) = &v65;
                for (uint64_t i = *v32; i; v33 = v39)
                {
                  unint64_t v39 = i[1];
                  if (v34.u32[0] > 1uLL)
                  {
                    if (v39 >= *(void *)&prime) {
                      v39 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v39 &= *(void *)&prime - 1;
                  }
                  if (v39 != v33)
                  {
                    if (!*((void *)__p[0] + v39))
                    {
                      *((void *)__p[0] + v39) = v32;
                      goto LABEL_71;
                    }
                    *NSRange v32 = (void *)*i;
                    *uint64_t i = **((void **)__p[0] + v39);
                    **((void **)__p[0] + v39) = i;
                    uint64_t i = v32;
                  }
                  unint64_t v39 = v33;
LABEL_71:
                  NSRange v32 = (void **)i;
                  uint64_t i = (void *)*i;
                }
              }
              unint64_t v17 = (unint64_t)prime;
              goto LABEL_75;
            }
            unint64_t v52 = __p[0];
            __p[0] = 0;
            if (v52) {
              operator delete(v52);
            }
            unint64_t v17 = 0;
            __p[1] = 0;
          }
        }
LABEL_75:
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v17 <= v16) {
            unint64_t v7 = v16 % v17;
          }
          else {
            unint64_t v7 = v16;
          }
        }
        else
        {
          unint64_t v7 = (v17 - 1) & v16;
        }
        goto LABEL_80;
      }
LABEL_116:
      int v53 = *((_DWORD *)this + 3);
      uint64_t v54 = *((void *)a4 + 7);
      unint64_t v55 = operator new(0x20uLL);
      *(void *)unint64_t v55 = &unk_1F3F75718;
      v55[2] = v10;
      v55[3] = v53;
      *((void *)v55 + 2) = __p;
      *((void *)v55 + 3) = a4;
      v75[3] = v55;
      KB::CandidateFilter::remove_candidates_satisfying_predicate((uint64_t)v59, v54, (uint64_t)"FilterSortkeyMatchFromDifferentLanguage", (uint64_t)v75);
      std::__function::__value_func<BOOL ()(KB::Candidate const&,KB::String *)>::~__value_func[abi:nn180100](v75);
      uint64_t v56 = (unsigned __int16 *)v65;
      if ((void)v65)
      {
        do
        {
          unint64_t v57 = *(unsigned __int16 **)v56;
          std::__destroy_at[abi:nn180100]<std::pair<KB::ByteString const,std::vector<KB::Candidate>>,0>(v56 + 8);
          operator delete(v56);
          uint64_t v56 = v57;
        }
        while (v57);
      }
      uint64_t v58 = __p[0];
      __p[0] = 0;
      if (v58) {
        operator delete(v58);
      }
    }
    v74[0] = (void **)&v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v74);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v72);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v71);
    if (v69)
    {
      uint64_t v70 = v69;
      operator delete(v69);
    }
    if (v68) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v68);
    }
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<KB::ByteString const,std::vector<KB::Candidate>>,0>(unsigned __int16 *a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*a1 >= 0xFu && *((void *)a1 + 1))
  {
    JUMPOUT(0x1E4E7BC00);
  }
}

BOOL std::__function::__func<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::operator()(uint64_t a1, KB::CandidateFilter *this, KB::String **a3)
{
  v46[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  if (KB::CandidateFilter::candidate_static_words_from_same_language(this, (const Candidate *)*(unsigned int *)(a1 + 8)))return 0; {
  if (!*((_WORD *)this + 444))
  }
    KB::Candidate::compute_string(this);
  KB::CandidateFilter::_sortkey_for_string((_LXLexicon *)((char *)this + 888), *(const KB::String **)(a1 + 24), &v40);
  BOOL v6 = *(void **)(a1 + 16);
  unsigned int v7 = v40;
  unint64_t v8 = v42;
  if (v40 >= 0xFu) {
    unsigned int v9 = v42;
  }
  else {
    unsigned int v9 = (KB::String *)&v41;
  }
  unsigned int v10 = KB::String::hash(v9, (const char *)v40);
  unint64_t v11 = v6[1];
  if (!v11) {
    goto LABEL_23;
  }
  unint64_t v35 = v5;
  uint64_t v12 = v10;
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = v10;
    if (v11 <= v10) {
      unint64_t v15 = v10 % v11;
    }
  }
  else
  {
    unint64_t v15 = (v11 - 1) & v10;
  }
  unint64_t v16 = *(unsigned __int16 ***)(*v6 + 8 * v15);
  if (!v16 || (unint64_t v17 = *v16) == 0)
  {
LABEL_23:
    int v19 = 1;
    goto LABEL_24;
  }
  while (1)
  {
    unint64_t v18 = *((void *)v17 + 1);
    if (v18 == v12) {
      break;
    }
    if (v14 > 1)
    {
      if (v18 >= v11) {
        v18 %= v11;
      }
    }
    else
    {
      v18 &= v11 - 1;
    }
    if (v18 != v15) {
      goto LABEL_23;
    }
LABEL_22:
    unint64_t v17 = *(unsigned __int16 **)v17;
    if (!v17) {
      goto LABEL_23;
    }
  }
  if (!KB::operator==(v17 + 8, &v40)) {
    goto LABEL_22;
  }
  uint64_t v22 = *((void *)v17 + 4);
  uint64_t v21 = *((void *)v17 + 5);
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 0x40000000;
  uint64_t v37 = ___ZZNK2KB39FilterSortkeyMatchFromDifferentLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesEENK3__0clERKNS_9CandidateEPNS_6StringE_block_invoke;
  uint64_t v38 = &__block_descriptor_tmp_9804;
  unint64_t v39 = this;
  if (v22 == v21) {
    goto LABEL_23;
  }
  int v19 = 1;
  while ((((uint64_t (*)(void *, uint64_t))v37)(v36, v22) & 1) != 0)
  {
    v22 += 1000;
    if (v22 == v21) {
      goto LABEL_24;
    }
  }
  uint64_t v23 = (void *)*((void *)v17 + 4);
  float v24 = 1.0;
  float v25 = 1.0;
  if (*v23)
  {
    uint64_t v26 = 240 * *v23;
    unint64_t v27 = (float *)(v23[1] + 52);
    do
    {
      float v28 = *v27;
      v27 += 60;
      float v25 = v25 * v28;
      v26 -= 240;
    }
    while (v26);
  }
  float v29 = v25 * *(float *)(a1 + 12);
  if (*(void *)this)
  {
    uint64_t v30 = 240 * *(void *)this;
    uint64_t v31 = (float *)(*((void *)this + 1) + 52);
    float v24 = 1.0;
    do
    {
      float v32 = *v31;
      v31 += 60;
      float v24 = v24 * v32;
      v30 -= 240;
    }
    while (v30);
  }
  if (v29 <= v24) {
    goto LABEL_23;
  }
  if (v35)
  {
    KB::Candidate::capitalized_string(this, (uint64_t)v43);
    unint64_t v33 = (const char *)v45;
    if (!v45) {
      unint64_t v33 = (const char *)v46;
    }
    if (v43[0]) {
      uint8x8_t v34 = v33;
    }
    else {
      uint8x8_t v34 = "";
    }
    KB::String::append_format(v35, "Candidate '%s' is from a different language and less likely than other candidates in the collection set", v34);
    if (v45 && v44 == 1) {
      free(v45);
    }
  }
  int v19 = 0;
LABEL_24:
  if (v7 >= 0xF)
  {
    if (v8) {
      MEMORY[0x1E4E7BC00](v8, 0x1000C8077774924);
    }
  }
  return !v19;
}

BOOL ___ZZNK2KB39FilterSortkeyMatchFromDifferentLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesEENK3__0clERKNS_9CandidateEPNS_6StringE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 32);
  if (*a2 != *v3) {
    return 0;
  }
  uint64_t v5 = (KB::Word *)a2[1];
  if (v2)
  {
    BOOL v6 = (KB::Word *)((char *)v5 + 240 * v2);
    unsigned int v7 = (KB::Word *)v3[1];
    uint64_t v8 = 240 * v2;
    while (1)
    {
      if ((*((unsigned char *)v5 + 106) & 4) == 0 && (v5 == v7 || KB::String::equal(v5, v7, 1)))
      {
        KB::Word::capitalized_string(v5, (uint64_t)v15);
        KB::Word::capitalized_string(v7, (uint64_t)v13);
        BOOL v9 = KB::String::equal((KB::String *)v15, (const KB::String *)v13, 1);
        if (v14 && v13[6] == 1) {
          free(v14);
        }
        if (v16)
        {
          if (v15[6] == 1) {
            free(v16);
          }
        }
        if (!v9) {
          break;
        }
      }
      uint64_t v5 = (KB::Word *)((char *)v5 + 240);
      unsigned int v7 = (KB::Word *)((char *)v7 + 240);
      v8 -= 240;
      if (!v8)
      {
        uint64_t v5 = v6;
        break;
      }
    }
    unsigned int v10 = v5;
    uint64_t v11 = *a2;
    uint64_t v5 = (KB::Word *)a2[1];
  }
  else
  {
    uint64_t v11 = 0;
    unsigned int v10 = (KB::Word *)a2[1];
  }
  return (KB::Word *)((char *)v5 + 240 * v11) != v10;
}

__n128 std::__function::__func<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F75718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F3F75718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::~__func()
{
}

const char *KB::FilterSortkeyMatchFromDifferentLanguage::filter_description(KB::FilterSortkeyMatchFromDifferentLanguage *this)
{
  return "FilterSortkeyMatchFromDifferentLanguage";
}

void KB::FilterSortkeyMatchFromDifferentLanguage::~FilterSortkeyMatchFromDifferentLanguage(KB::FilterSortkeyMatchFromDifferentLanguage *this)
{
}

void KB::FilterDifferentLanguageThanContext::filter_candidates(KB::FilterDifferentLanguageThanContext *this, const KB::Candidate **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  v65[2] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *((void *)a4 + 3);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a4 + 4);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  }
  if (v9 && *a2 != a2[1])
  {
    KB::Candidate::Candidate((KB::Candidate *)v58, *a2);
    KB::Candidate::capitalized_string(a3, (uint64_t)v54);
    KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v46, (const KB::CandidateFilterLookupContext *)((char *)a3 + 2032));
    uint64_t v10 = *((void *)a4 + 2);
    if (v10) {
      atomic_fetch_add((atomic_uint *volatile)v10, 1u);
    }
    uint64_t v11 = *(void *)(v10 + 8) + 144;
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v10);
    std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::__value_func[abi:nn180100]((uint64_t)v53, v11);
    unint64_t v42 = (__CFString *)*((void *)a4 + 7);
    uint8x8_t v13 = (const Candidate *)KB::CandidateFilter::language_id_for_context_and_candidate_with_confidence((KB::CandidateFilter *)v46, (const KB::LanguageModelContext *)v58, a4, *((float *)this + 2), v12);
    if (v13) {
      goto LABEL_11;
    }
    if (KB::LanguageModelContext::is_linguistically_void((KB::LanguageModelContext *)v46))
    {
      unsigned int v21 = v55;
      if (!v55)
      {
        KB::String::compute_length(v54);
        unsigned int v21 = v55;
      }
      if (v21 <= 1)
      {
        uint8x8_t v13 = (const Candidate *)*((unsigned int *)a4 + 2);
        if (v13)
        {
LABEL_11:
          unint64_t v14 = *a2;
          unint64_t v15 = a2[1];
          if (*a2 != v15)
          {
            uint64_t v16 = 0;
            do
            {
              v16 += KB::CandidateFilter::candidate_static_words_from_same_language(v14, v13);
              unint64_t v14 = (KB::CandidateFilter *)((char *)v14 + 1000);
            }
            while (v14 != v15);
            if (v16)
            {
              LODWORD(v43) = v13;
              char v44 = v54;
              uint64_t v45 = v53;
              uint64_t v17 = *a2;
              unint64_t v18 = a2[1];
              long long v63 = &v43;
              if (v18 - v17 <= 0)
              {
                std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>((uint64_t *)v17, v18, (unsigned int **)&v63, 0x1CAC083126E978D5 * ((v18 - v17) >> 3), 0, 0);
              }
              else
              {
                int v19 = std::get_temporary_buffer[abi:nn180100]<KB::Candidate>(0x1CAC083126E978D5 * ((v18 - v17) >> 3));
                std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>((uint64_t *)v17, v18, (unsigned int **)&v63, 0x1CAC083126E978D5 * ((v18 - v17) >> 3), (uint64_t)v19, v20);
                if (v19) {
                  operator delete(v19);
                }
              }
              uint64_t v23 = *a2;
              uint64_t v22 = a2[1];
              if (*a2 == v22)
              {
                uint64_t v22 = *a2;
              }
              else
              {
                float v24 = (const Candidate *)v43;
                float v25 = (char *)v23 + 888;
                uint64_t v26 = v44;
                unint64_t v27 = v45;
                while (1)
                {
                  if ((KB::CandidateFilter::candidate_static_words_from_same_language((KB::CandidateFilter *)(v25 - 888), v24) & 1) == 0)
                  {
                    if (!*(_WORD *)v25) {
                      KB::Candidate::compute_string((KB::Candidate *)(v25 - 888));
                    }
                    uint64_t v28 = v27[3];
                    if (!v28)
                    {
                      uint8x8_t v36 = (uint64_t *)std::__throw_bad_function_call[abi:nn180100]();
                      std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(v36, v37, v38, v39, v40, v41);
                      return;
                    }
                    if (!(*(unsigned int (**)(uint64_t, char *, unsigned __int16 *))(*(void *)v28 + 48))(v28, v25, v26)&& !v25[76])
                    {
                      break;
                    }
                  }
                  float v29 = (const KB::Candidate *)(v25 + 112);
                  v25 += 1000;
                  if (v29 == v22) {
                    goto LABEL_31;
                  }
                }
                uint64_t v22 = (const KB::Candidate *)(v25 - 888);
LABEL_31:
                uint64_t v23 = a2[1];
                if (v42 && v22 != v23)
                {
                  uint64_t v30 = v22;
                  do
                  {
                    KB::Candidate::capitalized_string(v30, (uint64_t)&v63);
                    uint64_t v31 = v64;
                    if (!v64) {
                      uint64_t v31 = (const char *)v65;
                    }
                    if ((_WORD)v63) {
                      float v32 = v31;
                    }
                    else {
                      float v32 = "";
                    }
                    KB::Candidate::token_ids_as_string(v30, (uint64_t)v59);
                    uint8x8_t v34 = v61;
                    if (!v61) {
                      uint8x8_t v34 = (const char *)&v62;
                    }
                    if (v59[0]) {
                      unint64_t v35 = v34;
                    }
                    else {
                      unint64_t v35 = "";
                    }
                    KB::append_format(v42, (__CFString *)"[%s] {%s} removed by %s\n", v33, v32, v35, "FilterDifferentLanguageThanContext");
                    if (v61 && v60 == 1) {
                      free(v61);
                    }
                    if (v64 && BYTE6(v63) == 1) {
                      free(v64);
                    }
                    uint64_t v30 = (KB::Candidate *)((char *)v30 + 1000);
                  }
                  while (v30 != v23);
                  uint64_t v23 = a2[1];
                }
              }
              std::vector<KB::Candidate>::erase((uint64_t)a2, (uint64_t *)v22, v23);
            }
          }
        }
      }
    }
    std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::~__value_func[abi:nn180100](v53);
    long long v63 = (Candidate **)&v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v63);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v51);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v50);
    if (__p)
    {
      unint64_t v49 = __p;
      operator delete(__p);
    }
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v47);
    }
    if (v57)
    {
      if (v56 == 1) {
        free(v57);
      }
    }
    KB::Candidate::~Candidate((KB::Candidate *)v58);
  }
}

void std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(uint64_t *a1, KB::CandidateFilter *a2, unsigned int **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  v28[125] = *MEMORY[0x1E4F143B8];
  if (a4 >= 2)
  {
    uint64_t v8 = a1;
    if (a4 == 2)
    {
      if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, (KB::CandidateFilter *)((char *)a2 - 1000), (uint64_t)a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v8, (uint64_t *)a2 - 125);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != (uint64_t *)a2)
      {
        unint64_t v15 = (KB::CandidateFilter *)(a1 + 125);
        if (a1 + 125 != (uint64_t *)a2)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (uint64_t)a1;
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (uint64_t)v15;
            if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, v15, v18))
            {
              KB::Candidate::Candidate((uint64_t)v28, v17);
              uint64_t v19 = v16;
              while (1)
              {
                KB::Candidate::operator=((uint64_t *)((char *)v8 + v19 + 1000), (uint64_t *)((char *)v8 + v19));
                if (!v19) {
                  break;
                }
                v19 -= 1000;
                if ((KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, (KB::CandidateFilter *)v28, (uint64_t)v8 + v19) & 1) == 0)
                {
                  uint64_t v20 = (uint64_t *)((char *)v8 + v19 + 1000);
                  goto LABEL_21;
                }
              }
              uint64_t v20 = v8;
LABEL_21:
              KB::Candidate::operator=(v20, v28);
              KB::Candidate::~Candidate((KB::Candidate *)v28);
            }
            unint64_t v15 = (KB::CandidateFilter *)(v17 + 1000);
            v16 += 1000;
          }
          while ((KB::CandidateFilter *)(v17 + 1000) != a2);
        }
      }
    }
    else
    {
      uint64_t v11 = (KB::Candidate *)a5;
      unint64_t v12 = a4 >> 1;
      uint8x8_t v13 = (KB::CandidateFilter *)&a1[125 * (a4 >> 1)];
      unint64_t v14 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(a1, v13, a3, v14, a5);
        uint64_t v21 = (uint64_t)v11 + 1000 * v12;
        std::__stable_sort_move<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(&v8[125 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v21);
        uint64_t v22 = (uint64_t *)((char *)v11 + 1000 * a4);
        uint64_t v23 = (uint64_t *)v21;
        float v24 = (uint64_t *)v11;
        while (v23 != v22)
        {
          if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, (KB::CandidateFilter *)v23, (uint64_t)v24))
          {
            KB::Candidate::operator=(v8, v23);
            v23 += 125;
          }
          else
          {
            KB::Candidate::operator=(v8, v24);
            v24 += 125;
          }
          v8 += 125;
          if (v24 == (uint64_t *)v21)
          {
            if (v23 != v22)
            {
              uint64_t v25 = 0;
              do
              {
                KB::Candidate::operator=(&v8[v25], &v23[v25]);
                v25 += 125;
              }
              while (&v23[v25] != v22);
            }
            goto LABEL_37;
          }
        }
        if (v24 != (uint64_t *)v21)
        {
          uint64_t v26 = 0;
          do
          {
            KB::Candidate::operator=(&v8[v26], &v24[v26]);
            v26 += 125;
          }
          while (&v24[v26] != (uint64_t *)v21);
        }
LABEL_37:
        if (v11)
        {
          unint64_t v27 = a4;
          do
          {
            KB::Candidate::~Candidate(v11);
            uint64_t v11 = (KB::Candidate *)((char *)v11 + 1000);
            --v27;
          }
          while (v27);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(a1, v13, a3, v14, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(&v8[125 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v11, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(v8, (KB::CandidateFilter *)&v8[125 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), v11, a6);
      }
    }
  }
}

uint64_t KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(unsigned int **a1, KB::CandidateFilter *this, uint64_t a3)
{
  BOOL v6 = *a1;
  if ((KB::CandidateFilter::candidate_static_words_from_same_language(this, (const Candidate *)**a1) & 1) == 0)
  {
    uint64_t v7 = *((void *)v6 + 2);
    if (!*((_WORD *)this + 444)) {
      KB::Candidate::compute_string(this);
    }
    uint64_t v8 = *(void *)(v7 + 24);
    if (!v8)
    {
LABEL_16:
      int v14 = std::__throw_bad_function_call[abi:nn180100]();
      return std::__stable_sort_move<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(v14, v15, v16);
    }
    if ((*(unsigned int (**)(uint64_t, char *, void))(*(void *)v8 + 48))(v8, (char *)this + 888, *((void *)v6 + 1)))
    {
      BOOL v9 = 0;
    }
    else
    {
      BOOL v9 = *((unsigned char *)this + 964) == 0;
    }
    if (v9) {
      return 0;
    }
  }
  uint64_t v10 = *a1;
  if (KB::CandidateFilter::candidate_static_words_from_same_language((KB::CandidateFilter *)a3, (const Candidate *)*v10))return 0; {
  uint64_t v11 = *((void *)v10 + 2);
  }
  if (!*(_WORD *)(a3 + 888)) {
    KB::Candidate::compute_string((KB::Candidate *)a3);
  }
  uint64_t v12 = *(void *)(v11 + 24);
  if (!v12) {
    goto LABEL_16;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v12 + 48))(v12, a3 + 888, *((void *)v10 + 1)))
  {
    return 0;
  }
  return *(unsigned char *)(a3 + 964) == 0;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(uint64_t *result, KB::CandidateFilter *a2, unsigned int **a3, unint64_t a4, uint64_t a5)
{
  if (!a4) {
    return result;
  }
  uint64_t v5 = a5;
  uint64_t v9 = (uint64_t)result;
  if (a4 == 2)
  {
    uint64_t v11 = (uint64_t)a2 - 1000;
    if (!KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, (KB::CandidateFilter *)((char *)a2 - 1000), (uint64_t)result))
    {
      KB::Candidate::Candidate(v5, v9);
      uint64_t v10 = v5 + 1000;
      uint64_t v12 = v11;
      goto LABEL_23;
    }
    KB::Candidate::Candidate(v5, v11);
    uint64_t v10 = v5 + 1000;
LABEL_7:
    uint64_t v12 = v9;
LABEL_23:
    return (uint64_t *)KB::Candidate::Candidate(v10, v12);
  }
  if (a4 == 1)
  {
    uint64_t v10 = a5;
    goto LABEL_7;
  }
  if ((uint64_t)a4 > 8)
  {
    uint64_t v18 = 1000 * (a4 >> 1);
    uint64_t v19 = &result[(unint64_t)v18 / 8];
    std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(result, &result[(unint64_t)v18 / 8], a3, a4 >> 1, a5, a4 >> 1);
    __n128 result = (uint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(v9 + v18, a2, a3, a4 - (a4 >> 1), v5 + v18, a4 - (a4 >> 1));
    uint64_t v20 = (KB::CandidateFilter *)(v9 + v18);
    while (v20 != a2)
    {
      if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, v20, v9))
      {
        __n128 result = (uint64_t *)KB::Candidate::Candidate(v5, (uint64_t)v20);
        uint64_t v20 = (KB::CandidateFilter *)((char *)v20 + 1000);
      }
      else
      {
        __n128 result = (uint64_t *)KB::Candidate::Candidate(v5, v9);
        v9 += 1000;
      }
      v5 += 1000;
      if ((uint64_t *)v9 == v19)
      {
        if (v20 != a2)
        {
          uint64_t v21 = 0;
          do
          {
            __n128 result = (uint64_t *)KB::Candidate::Candidate(v5 + v21, (uint64_t)v20 + v21);
            v21 += 1000;
          }
          while ((KB::CandidateFilter *)((char *)v20 + v21) != a2);
        }
        return result;
      }
    }
    if ((uint64_t *)v9 != v19)
    {
      uint64_t v22 = 0;
      do
      {
        __n128 result = (uint64_t *)KB::Candidate::Candidate(v5 + v22, v9 + v22);
        v22 += 1000;
      }
      while ((uint64_t *)(v9 + v22) != v19);
    }
  }
  else if (result != (uint64_t *)a2)
  {
    __n128 result = (uint64_t *)KB::Candidate::Candidate(a5, (uint64_t)result);
    uint8x8_t v13 = (KB::CandidateFilter *)(v9 + 1000);
    if (v13 != a2)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v5;
      do
      {
        if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, v13, v15))
        {
          KB::Candidate::Candidate(v15 + 1000, v15);
          int v16 = (uint64_t *)v5;
          if (v15 != v5)
          {
            uint64_t v17 = v14;
            while (1)
            {
              int v16 = (uint64_t *)(v5 + v17);
              if (!KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, v13, v5 + v17 - 1000))break; {
              KB::Candidate::operator=((uint64_t *)(v5 + v17), (uint64_t *)(v5 + v17 - 1000));
              }
              v17 -= 1000;
              if (!v17)
              {
                int v16 = (uint64_t *)v5;
                break;
              }
            }
          }
          __n128 result = KB::Candidate::operator=(v16, (uint64_t *)v13);
        }
        else
        {
          __n128 result = (uint64_t *)KB::Candidate::Candidate(v15 + 1000, (uint64_t)v13);
        }
        uint8x8_t v13 = (KB::CandidateFilter *)((char *)v13 + 1000);
        v14 += 1000;
        v15 += 1000;
      }
      while (v13 != a2);
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(uint64_t *a1, KB::CandidateFilter *a2, KB::CandidateFilter *a3, unsigned int **a4, uint64_t a5, uint64_t a6, KB::Candidate *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v10 = a6;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return;
      }
      while ((KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a4, a2, (uint64_t)a1) & 1) == 0)
      {
        a1 += 125;
        if (!--a5) {
          return;
        }
      }
      unint64_t v49 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, (uint64_t *)a2);
          return;
        }
        if (a5 >= 0) {
          uint64_t v21 = a5;
        }
        else {
          uint64_t v21 = a5 + 1;
        }
        uint64_t v20 = v21 >> 1;
        uint64_t v18 = &a1[125 * (v21 >> 1)];
        uint64_t v50 = *a4;
        if (a3 != a2)
        {
          uint64_t v46 = v21 >> 1;
          uint64_t v48 = a8;
          unint64_t v22 = 0x1CAC083126E978D5 * ((a3 - a2) >> 3);
          a3 = a2;
          do
          {
            uint64_t v23 = (KB::CandidateFilter *)((char *)a3 + 1000 * (v22 >> 1));
            int v24 = KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(&v50, v23, (uint64_t)v18);
            if (v24) {
              v22 += ~(v22 >> 1);
            }
            else {
              v22 >>= 1;
            }
            if (v24) {
              a3 = (KB::CandidateFilter *)((char *)v23 + 1000);
            }
          }
          while (v22);
          a8 = v48;
          uint64_t v20 = v46;
        }
        uint64_t v17 = 0x1CAC083126E978D5 * ((a3 - a2) >> 3);
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v16 = v10;
        }
        else {
          uint64_t v16 = v10 + 1;
        }
        uint64_t v17 = v16 >> 1;
        a3 = (KB::CandidateFilter *)((char *)a2 + 1000 * (v16 >> 1));
        uint64_t v18 = (uint64_t *)a2;
        if (a2 != (KB::CandidateFilter *)a1)
        {
          uint64_t v47 = v16 >> 1;
          unint64_t v19 = 0x1CAC083126E978D5 * ((a2 - (KB::CandidateFilter *)a1) >> 3);
          uint64_t v18 = a1;
          do
          {
            if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a4, a3, (uint64_t)&v18[125 * (v19 >> 1)]))
            {
              v19 >>= 1;
            }
            else
            {
              v18 += 125 * (v19 >> 1) + 125;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          uint64_t v17 = v47;
        }
        uint64_t v20 = 0x1CAC083126E978D5 * (v18 - a1);
      }
      if (v18 == (uint64_t *)a2)
      {
        float v29 = a3;
      }
      else if (a3 == a2)
      {
        float v29 = (KB::CandidateFilter *)v18;
      }
      else
      {
        uint64_t v25 = (uint64_t *)a2;
        uint64_t v26 = v20;
        uint64_t v27 = v17;
        uint64_t v28 = std::__rotate_forward[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<KB::Candidate *>>(v18, v25, (uint64_t *)a3);
        uint64_t v17 = v27;
        uint64_t v20 = v26;
        float v29 = (KB::CandidateFilter *)v28;
      }
      a5 -= v20;
      v10 -= v17;
      if (v20 + v17 >= a5 + v10)
      {
        uint64_t v30 = a3;
        uint64_t v31 = v20;
        uint64_t v32 = a5;
        uint64_t v33 = v17;
        std::__inplace_merge<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(v29, v30, v49, a4, v32, v10, a7, a8);
        a2 = (KB::CandidateFilter *)v18;
        uint64_t v10 = v33;
        a5 = v31;
        a3 = v29;
      }
      else
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(a1, v18, v29, a4, v20, v17, a7, a8);
        a1 = (uint64_t *)v29;
        a2 = a3;
        a3 = v49;
      }
      if (!v10) {
        return;
      }
    }
    if (a5 <= v10)
    {
      if (a1 == (uint64_t *)a2) {
        return;
      }
      uint64_t v40 = 0;
      uint64_t v35 = 0;
      do
      {
        KB::Candidate::Candidate((uint64_t)a7 + v40 * 8, (uint64_t)&a1[v40]);
        ++v35;
        v40 += 125;
      }
      while (&a1[v40] != (uint64_t *)a2);
      uint64_t v41 = (uint64_t *)((char *)a7 + v40 * 8);
      if ((KB::Candidate *)((char *)a7 + v40 * 8) != a7)
      {
        unint64_t v42 = (uint64_t *)a7;
        while (a2 != a3)
        {
          if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a4, a2, (uint64_t)v42))
          {
            KB::Candidate::operator=(a1, (uint64_t *)a2);
            a2 = (KB::CandidateFilter *)((char *)a2 + 1000);
          }
          else
          {
            KB::Candidate::operator=(a1, v42);
            v42 += 125;
          }
          a1 += 125;
          if (v42 == v41) {
            goto LABEL_80;
          }
        }
        if (v42 != v41)
        {
          uint64_t v45 = 0;
          do
          {
            KB::Candidate::operator=(&a1[v45], &v42[v45]);
            v45 += 125;
          }
          while (&v42[v45 - 125] != v41 - 125);
        }
      }
    }
    else
    {
      if (a3 == a2) {
        return;
      }
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      do
      {
        KB::Candidate::Candidate((uint64_t)a7 + v34, (uint64_t)a2 + v34);
        ++v35;
        v34 += 1000;
      }
      while ((KB::CandidateFilter *)((char *)a2 + v34) != a3);
      uint8x8_t v36 = (KB::Candidate *)((char *)a7 + v34);
      if ((KB::Candidate *)((char *)a7 + v34) != a7)
      {
        uint64_t v37 = (uint64_t *)((char *)a3 - 1000);
        while (a2 != (KB::CandidateFilter *)a1)
        {
          int v38 = KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a4, (KB::Candidate *)((char *)v36 - 1000), (uint64_t)a2 - 1000);
          if (v38) {
            unint64_t v39 = (uint64_t *)((char *)a2 - 1000);
          }
          else {
            unint64_t v39 = (uint64_t *)((char *)v36 - 1000);
          }
          if (v38) {
            a2 = (KB::CandidateFilter *)((char *)a2 - 1000);
          }
          else {
            uint8x8_t v36 = (KB::Candidate *)((char *)v36 - 1000);
          }
          KB::Candidate::operator=(v37, v39);
          v37 -= 125;
          if (v36 == a7) {
            goto LABEL_80;
          }
        }
        uint64_t v43 = 0;
        do
        {
          char v44 = &v37[v43];
          v43 -= 125;
          KB::Candidate::operator=(v44, (uint64_t *)((char *)v36 + v43 * 8));
        }
        while ((KB::Candidate *)((char *)v36 + v43 * 8) != a7);
      }
    }
LABEL_80:
    if (a7 && v35)
    {
      do
      {
        KB::Candidate::~Candidate(a7);
        a7 = (KB::Candidate *)((char *)a7 + 1000);
        --v35;
      }
      while (v35);
    }
  }
}

const char *KB::FilterDifferentLanguageThanContext::filter_description(KB::FilterDifferentLanguageThanContext *this)
{
  return "FilterDifferentLanguageThanContext";
}

void KB::FilterDifferentLanguageThanContext::~FilterDifferentLanguageThanContext(KB::FilterDifferentLanguageThanContext *this)
{
}

KB::Word *KB::Word::Word(KB::Word *this, const KB::String *a2, const TITokenID *a3, const KB::ByteString *a4)
{
  uint64_t v7 = (_OWORD *)((char *)KB::String::String(this, a2) + 32);
  if (a4)
  {
    unint64_t v8 = *(unsigned __int16 *)a4;
    if (v8 >= 0xF)
    {
      *((_WORD *)this + 16) = v8;
      operator new[]();
    }
    *uint64_t v7 = *(_OWORD *)a4;
  }
  else
  {
    *(_WORD *)uint64_t v7 = 0;
  }
  *((void *)this + 6) = 0x3F80000000000000;
  *((_DWORD *)this + 14) = 1065353216;
  *((_DWORD *)this + 16) = 0x100000;
  *((_WORD *)this + 34) = 0;
  *((unsigned char *)this + 70) = 0;
  *((void *)this + 9) = 0;
  *((unsigned char *)this + 80) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 12) = _D0;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = 0;
  *((TITokenID *)this + 17) = *a3;
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0x100000;
  *((_WORD *)this + 82) = 0;
  *((unsigned char *)this + 166) = 0;
  *((void *)this + 21) = 0;
  *((unsigned char *)this + 176) = 0;
  *((unsigned char *)this + 192) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 1065353216;
  return this;
}

uint64_t KB::Word::should_suggest(KB::Word *this)
{
  unsigned int v1 = *((_DWORD *)this + 26);
  if ((v1 & 0x800012) != 0) {
    return 0;
  }
  int v2 = v1 & 0x2040000;
  unsigned int v3 = (v1 >> 13) & 1;
  if (v2 != 0x2000000) {
    unsigned int v3 = 1;
  }
  if ((*((_DWORD *)this + 26) & 0x2080) == 0x80) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t KB::Word::Word(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 6) = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 32) = 0;
  LXEntryGetPartialProbability();
  *(float *)&double v6 = v6;
  *(float *)(a1 + 48) = __exp10f(*(float *)&v6);
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 52) = _D0;
  *(_DWORD *)(a1 + 64) = 0x100000;
  *(_WORD *)(a1 + 68) = 0;
  *(unsigned char *)(a1 + 70) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = _D0;
  unsigned int MetaFlags = LXEntryGetMetaFlags();
  *(_DWORD *)(a1 + 104) = MetaFlags & 0x4000EF | (((MetaFlags >> 23) & 7) << 27);
  *(void *)(a1 + 112) = ((unint64_t)LXEntryGetCategoryFlags() >> 8) & 0x3FF;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = LXEntryGetUsageCount();
  *(_DWORD *)(a1 + 128) = LXEntryGetPenaltyCount();
  *(_DWORD *)(a1 + 132) = LXEntryGetAffixData();
  if (a2)
  {
    int TokenID = LXEntryGetTokenID();
    if (TokenID) {
      int v14 = TokenID;
    }
    else {
      int v14 = 500;
    }
  }
  else
  {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 136) = a3;
  *(_DWORD *)(a1 + 140) = v14;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0x100000;
  *(_WORD *)(a1 + 164) = 0;
  *(unsigned char *)(a1 + 166) = 0;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  CFStringRef v15 = (const __CFString *)LXEntryCopyStoredString();
  KB::utf8_string(v15, (uint64_t)v17);
  KB::String::operator=((KB::String *)a1, (KB::String *)v17);
  if (v18 && v17[6] == 1) {
    free(v18);
  }
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 104) &= ~1u;
  if (v15) {
    CFRelease(v15);
  }
  return a1;
}

uint64_t KB::handle_missing_token_id(uint64_t result)
{
  if (result)
  {
    LODWORD(result) = LXEntryGetTokenID();
    if (result) {
      return result;
    }
    else {
      return 500;
    }
  }
  return result;
}

uint64_t KB::Word::set_custom_capitalization(uint64_t this, int a2)
{
  *(_DWORD *)(this + 120) = a2;
  *(_DWORD *)(this + 104) = *(_DWORD *)(this + 104) & 0xFFFFFFFE | (a2 == 1);
  return this;
}

void KB::Word::append_suffix(KB::Word *this, const KB::Word *a2, int a3, TITokenID a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (char *)*((void *)a2 + 1);
  if (!v7) {
    uint64_t v7 = (char *)a2 + 16;
  }
  KB::String::String((KB::String *)v11, &v7[a3], (unsigned __int16)(*(_WORD *)a2 - a3));
  KB::String::append((unsigned __int16 *)this, (const KB::String *)v11);
  if (v12) {
    BOOL v8 = v11[6] == 1;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    free(v12);
  }
  *((TITokenID *)this + 17) = a4;
  *((_DWORD *)this + 33) &= ~0x20000000u;
  int v9 = *((_DWORD *)a2 + 26);
  if ((v9 & 2) == 0)
  {
    if ((v9 & 0x80) == 0) {
      goto LABEL_11;
    }
LABEL_18:
    *((_DWORD *)this + 26) |= 0x80u;
    if ((*((_DWORD *)a2 + 26) & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  *((_DWORD *)this + 26) |= 2u;
  int v9 = *((_DWORD *)a2 + 26);
  if ((v9 & 0x80) != 0) {
    goto LABEL_18;
  }
LABEL_11:
  if ((v9 & 4) != 0) {
LABEL_12:
  }
    *((_DWORD *)this + 26) |= 4u;
LABEL_13:
  if (*((unsigned __int16 *)this + 16) >= 0xFu)
  {
    uint64_t v10 = *((void *)this + 5);
    if (v10) {
      MEMORY[0x1E4E7BC00](v10, 0x1000C8077774924);
    }
  }
  *((_WORD *)this + 16) = 0;
}

void KB::Word::dictionary_sort_key(uint64_t a1, uint64_t a2)
{
  int v2 = (_OWORD *)(a1 + 32);
  if (!*(_WORD *)(a1 + 32))
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (v4)
    {
      (*(void (**)(long long *__return_ptr))(*(void *)v4 + 48))(&v8);
      if (*(unsigned __int16 *)(a1 + 32) >= 0xFu)
      {
        uint64_t v5 = *(void *)(a1 + 40);
        if (v5) {
          MEMORY[0x1E4E7BC00](v5, 0x1000C8077774924);
        }
      }
      _OWORD *v2 = v8;
    }
    else
    {
      double v6 = (KB::Word *)std::__throw_bad_function_call[abi:nn180100]();
      KB::Word::capitalized_string(v6, v7);
    }
  }
}

void KB::Word::capitalized_string(KB::Word *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 30))
  {
    unint64_t v4 = TILocaleIdentifierForLexiconID(*((_DWORD *)this + 34));
    if (v4) {
      uint64_t v5 = (char *)v4;
    }
    else {
      uint64_t v5 = "";
    }
    std::string::basic_string[abi:nn180100]<0>(__p, v5);
    *(_DWORD *)a2 = 0x100000;
    *(_WORD *)(a2 + 4) = 0;
    *(unsigned char *)(a2 + 6) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
    if (*((void *)this + 1)) {
      double v6 = (char *)*((void *)this + 1);
    }
    else {
      double v6 = (char *)this + 16;
    }
    CFStringRef v15 = v6;
    int v7 = *(unsigned __int16 *)this;
    int v16 = 0;
    int v17 = v7;
    UChar32 c = 0;
    KB::String::iterator::initialize((uint64_t *)&v15);
    uint64_t v11 = v6;
    int v12 = v7;
    int v13 = v7;
    int v14 = 0;
    KB::String::iterator::initialize((uint64_t *)&v11);
    int v8 = v12;
    if (v16 != v12)
    {
      unsigned int v9 = 0;
      do
      {
        UChar32 v10 = c;
        if (v9 <= 0x1F && ((*((_DWORD *)this + 30) >> v9) & 1) != 0 && !u_istitle(c))
        {
          KB::character_to_titlecase(v10, (uint64_t)__p, (uint64_t)v21);
          KB::String::append((unsigned __int16 *)a2, (const KB::String *)v21);
          if (v22 && v21[6] == 1) {
            free(v22);
          }
        }
        else
        {
          KB::String::append((KB::String *)a2, v10);
        }
        ++v9;
        KB::String::iterator::operator++((uint64_t *)&v15);
      }
      while (v16 != v8);
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    KB::String::String((KB::String *)a2, this);
  }
}

unint64_t KB::Word::locale_identifier(KB::Word *this)
{
  return TILocaleIdentifierForLexiconID(*((_DWORD *)this + 34));
}

void KB::Word::lowercased_string(KB::Word *this@<X0>, KB::String *a2@<X8>)
{
  unint64_t v4 = TILocaleIdentifierForLexiconID(*((_DWORD *)this + 34));
  if (v4) {
    uint64_t v5 = (char *)v4;
  }
  else {
    uint64_t v5 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(__p, v5);
  if (v8 >= 0) {
    double v6 = __p;
  }
  else {
    double v6 = (void **)__p[0];
  }
  KB::string_to_lowercase(this, (const KB::String *)v6, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

BOOL KB::Word::capitalized_string_equal(KB::Word *this, const KB::Word *a2)
{
  if (this == a2) {
    return *((_DWORD *)this + 30) == *((_DWORD *)a2 + 30);
  }
  BOOL result = KB::String::equal(this, a2, 1);
  if (result) {
    return *((_DWORD *)this + 30) == *((_DWORD *)a2 + 30);
  }
  return result;
}

BOOL KB::Word::is_capitalized_string_all_caps(KB::Word *this)
{
  __int16 v2 = *((_WORD *)this + 2);
  if (!v2)
  {
    KB::String::compute_length((unsigned __int16 *)this);
    __int16 v2 = *((_WORD *)this + 2);
  }
  return ((-1 << v2) | *((_DWORD *)this + 30)) == -1;
}

void KB::Word::set_custom_capitalization(KB::Word *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v8, this);
  unsigned int v2 = 0;
  int v3 = 0;
  unsigned int v4 = 0;
  for (int i = 0; ; v2 = HIWORD(i))
  {
    unsigned int v5 = v9;
    if (!v9)
    {
      KB::String::compute_length(v8);
      unsigned int v5 = v9;
    }
    if (v2 >= v5 || v4 >= 0x20) {
      break;
    }
    UChar32 v6 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v8);
    if (u_isupper(v6) || u_istitle(v6)) {
      v3 |= 1 << v4;
    }
    ++v4;
  }
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 26) = *((_DWORD *)this + 26) & 0xFFFFFFFE | (v3 == 1);
  if (v11) {
    BOOL v7 = v10 == 1;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    free(v11);
  }
}

uint64_t KB::Word::capitalize_first_letter(KB::Word *this, int a2)
{
  unsigned int v4 = (char *)*((void *)this + 1);
  if (!v4) {
    unsigned int v4 = (char *)this + 16;
  }
  BOOL v7 = v4;
  int v5 = *(unsigned __int16 *)this;
  int v8 = 0;
  int v9 = v5;
  UChar32 c = 0;
  KB::String::iterator::initialize((uint64_t *)&v7);
  uint64_t result = u_isalnum(c);
  *((_DWORD *)this + 30) |= 1 << (result == 0);
  if (a2) {
    *((_DWORD *)this + 26) |= 0x100000u;
  }
  return result;
}

void KB::Word::move_capitalization_to_bits(KB::Word *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = TILocaleIdentifierForLexiconID(*((_DWORD *)this + 34));
  if (v2) {
    int v3 = (char *)v2;
  }
  else {
    int v3 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(__p, v3);
  int v32 = 0x100000;
  __int16 v33 = 0;
  char v34 = 0;
  uint64_t v35 = 0;
  char v36 = 0;
  KB::String::String((KB::String *)v27, this);
  unsigned int v4 = 0;
  int v5 = 0;
  unsigned int v6 = 0;
  for (i = 0; ; unsigned int v4 = HIWORD(i))
  {
    unsigned int v7 = v28;
    if (!v28)
    {
      KB::String::compute_length(v27);
      unsigned int v7 = v28;
    }
    if (v4 >= v7 || v6 >= 0x20) {
      break;
    }
    unsigned int v8 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v27);
    if (u_isupper(v8))
    {
      KB::character_to_lowercase(v8, (uint64_t)__p, (uint64_t)v22);
      int v9 = (uint64_t *)v25;
      if (!v25) {
        int v9 = &v26;
      }
      uint64_t v19 = v9;
      LODWORD(v20) = 0;
      HIDWORD(v20) = v22[0];
      UChar32 v21 = 0;
      KB::String::iterator::initialize((uint64_t *)&v19);
      KB::character_to_titlecase(v21, (uint64_t)__p, (uint64_t)&v19);
      int v10 = v23;
      if (!v23)
      {
        KB::String::compute_length(v22);
        int v10 = v23;
      }
      if (v10 != 1) {
        goto LABEL_20;
      }
      KB::String::String((uint64_t)v17, v8);
      BOOL v11 = KB::String::equal((KB::String *)&v19, (const KB::String *)v17, 1);
      if (v18 && v17[6] == 1) {
        free(v18);
      }
      if (v11) {
        KB::String::append((unsigned __int16 *)&v32, (const KB::String *)v22);
      }
      else {
LABEL_20:
      }
        KB::String::append((KB::String *)&v32, v8);
      if (v20 && BYTE6(v19) == 1) {
        free(v20);
      }
      if (v25)
      {
        if (v24 == 1) {
          free(v25);
        }
      }
      v5 |= 1 << v6;
    }
    else
    {
      KB::String::append((KB::String *)&v32, v8);
    }
    ++v6;
  }
  int v12 = *((_DWORD *)this + 30) | v5;
  *((_DWORD *)this + 30) = v12;
  int v13 = *((_DWORD *)this + 26);
  if (v12 == 1)
  {
    *((_DWORD *)this + 26) = v13 | 1;
    unsigned int v14 = HIWORD(i);
    if (!v7)
    {
      KB::String::compute_length(v27);
      unsigned int v7 = v28;
    }
    if (v14 >= v7) {
      KB::String::operator=(this, (KB::String *)&v32);
    }
  }
  else
  {
    *((_DWORD *)this + 26) = v13 & 0xFFFFFFFE;
  }
  if (v30 && v29 == 1) {
    free(v30);
  }
  if (v35 && v34 == 1) {
    free(v35);
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t KB::Word::matches_input(KB::String *a1, const KB::String *a2, uint64_t a3)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v6 = 1;
  if (KB::String::equal(a1, a2, 1)) {
    return v6;
  }
  uint64_t v7 = *(void *)(a3 + 24);
  if (v7)
  {
    if (!(*(unsigned int (**)(uint64_t, KB::String *, const KB::String *))(*(void *)v7 + 48))(v7, a1, a2)) {
      return 0;
    }
    v12[1] = 1;
    v12[0] = &unk_1F3F77D18;
    return KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)v12, a1, a2, 0, 0);
  }
  int v9 = (KB::String *)std::__throw_bad_function_call[abi:nn180100]();
  return KB::Word::preserves_input(v9, v10, v11);
}

uint64_t KB::Word::preserves_input(KB::String *this, KB::String *a2, uint64_t a3)
{
  if ((*((unsigned char *)this + 135) & 4) != 0)
  {
    if ((*((unsigned char *)a2 + 135) & 4) == 0) {
      return 0;
    }
    if (this == a2) {
      return 1;
    }
    return KB::String::equal(this, a2, 1);
  }
  else
  {
    if (!*((_DWORD *)this + 30))
    {
      if (this == a2) {
        return 1;
      }
      uint64_t v7 = 1;
      if (KB::String::equal(this, a2, 1)) {
        return v7;
      }
    }
    uint64_t v6 = *(void *)(a3 + 24);
    if (v6)
    {
      if (!(*(unsigned int (**)(uint64_t, KB::String *, KB::String *))(*(void *)v6 + 48))(v6, this, a2)) {
        return 0;
      }
      BOOL v14 = 0;
      uint64_t v16 = 1;
      CFStringRef v15 = &unk_1F3F77D18;
      uint64_t v7 = 0;
      if (!KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)&v15, this, a2, &v14, 0)|| v14)
      {
        return v7;
      }
      if (*((unsigned char *)this + 120))
      {
        unsigned int v8 = (char *)*((void *)a2 + 1);
        if (!v8) {
          unsigned int v8 = (char *)a2 + 16;
        }
        CFStringRef v15 = v8;
        int v9 = *(unsigned __int16 *)a2;
        LODWORD(v16) = 0;
        HIDWORD(v16) = v9;
        UChar32 c = 0;
        KB::String::iterator::initialize((uint64_t *)&v15);
        UChar32 v10 = c;
        if (!u_isupper(c) && !u_istitle(v10)) {
          return 0;
        }
      }
      return 1;
    }
    int v12 = (KB::Word *)std::__throw_bad_function_call[abi:nn180100]();
    return KB::Word::is_acceptable_for_input(v12, v13);
  }
}

uint64_t KB::Word::is_acceptable_for_input(KB::Word *this, const KB::String *a2)
{
  if (KB::string_contains_surface_form_features(a2, a2))
  {
    BOOL v8 = 0;
    v9[1] = 1;
    v9[0] = &unk_1F3F77D18;
    int v5 = KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)v9, this, a2, &v8, 0);
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
    if (*((float *)this + 12) <= 0.0) {
      return 0;
    }
    unsigned int v7 = *((_DWORD *)this + 26) & 0xFFDFFFFF | (v8 << 21);
    goto LABEL_7;
  }
  if (KB::string_contains_surface_form_features(this, v4))
  {
    unsigned int v7 = *((_DWORD *)this + 26) | 0x200000;
LABEL_7:
    *((_DWORD *)this + 26) = v7;
  }
  return 1;
}

BOOL KB::Word::is_potentially_private(KB::Word *this)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 106) & 4) != 0) {
    return 0;
  }
  KB::Word::capitalized_string(this, (uint64_t)v30);
  unsigned int v2 = v30[0];
  if (v33) {
    BOOL v3 = v32 == 1;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    free(v33);
  }
  if (v2 < 6) {
    return 0;
  }
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  KB::Word::capitalized_string(this, (uint64_t)v30);
  BOOL v8 = (const char *)v33;
  int v9 = v34;
  if (!v33) {
    BOOL v8 = (const char *)v34;
  }
  if (v30[0]) {
    UChar32 v10 = v8;
  }
  else {
    UChar32 v10 = "";
  }
  KB::append_format(Mutable, (__CFString *)"%s", v7, v10);
  if (v33 && v32 == 1) {
    free(v33);
  }
  CFStringTransform(Mutable, 0, (CFStringRef)*MEMORY[0x1E4F1D4F0], 0);
  KB::utf8_string(Mutable, (uint64_t)v30);
  if (v33) {
    int v9 = v33;
  }
  uint64_t v26 = v9;
  int v11 = v30[0];
  int v27 = 0;
  int v28 = v30[0];
  int v29 = 0;
  KB::String::iterator::initialize((uint64_t *)&v26);
  unint64_t v22 = v9;
  int v23 = v11;
  int v24 = v11;
  int v25 = 0;
  KB::String::iterator::initialize((uint64_t *)&v22);
  int v12 = v23;
  if (v27 == v23)
  {
    int v13 = 0;
    unsigned int v14 = 0;
    if (!v11) {
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v14 = 0;
    int v13 = 0;
    uint64_t v15 = MEMORY[0x1E4F14390];
    do
    {
      if ((v29 & 0x80) != 0)
      {
        int v16 = __maskrune((char)v29, 0x8000uLL);
      }
      else
      {
        v13 += (*(_DWORD *)(v15 + 4 * (char)v29 + 60) >> 10) & 1;
        int v16 = *(_DWORD *)(v15 + 4 * (char)v29 + 60) & 0x8000;
      }
      if (v16) {
        ++v14;
      }
      KB::String::iterator::operator++((uint64_t *)&v26);
    }
    while (v27 != v12);
    if (!v30[0]) {
      goto LABEL_33;
    }
  }
  unsigned int v17 = KB::String::last((KB::String *)v30);
  if (v17 <= 0xFF)
  {
    int v18 = (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v17 + 60) >> 10) & 1;
    goto LABEL_35;
  }
LABEL_33:
  LOBYTE(v18) = 0;
LABEL_35:
  int v19 = v31;
  if (!v31)
  {
    KB::String::compute_length(v30);
    int v19 = v31;
  }
  if (v13 < v19) {
    char v20 = v18;
  }
  else {
    char v20 = 0;
  }
  BOOL v4 = (v20 & 1) != 0 || v13 > 0 && v14 > 1;
  if (v33 && v32 == 1) {
    free(v33);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v4;
}

void KB::Word::append_debug_data(KB::Word *this, __CFString *a2, const KB::String *a3)
{
  uint64_t v275 = *MEMORY[0x1E4F143B8];
  int v266 = 0x100000;
  __int16 v267 = 0;
  char v268 = 0;
  v269 = 0;
  char v270 = 0;
  int v5 = (const char *)*((void *)a3 + 1);
  if (!v5) {
    int v5 = (char *)a3 + 16;
  }
  if (*(_WORD *)a3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = "";
  }
  KB::Word::capitalized_string(this, (uint64_t)&v271);
  unsigned int v7 = (const char *)v272.i64[0];
  if (!v272.i64[0]) {
    unsigned int v7 = &v272.i8[8];
  }
  if ((_WORD)v271) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = "";
  }
  KB::String::append_format((KB::String *)&v266, "%s[%s]", v6, v8);
  if (v272.i64[0] && BYTE6(v271) == 1) {
    free((void *)v272.i64[0]);
  }
  int v9 = (const char *)v269;
  if (!v269) {
    int v9 = &v270;
  }
  if ((_WORD)v266) {
    UChar32 v10 = v9;
  }
  else {
    UChar32 v10 = "";
  }
  CFStringAppendCString(a2, v10, 0x8000100u);
  unint64_t v11 = *((void *)this + 17);
  if (HIDWORD(v11))
  {
    unint64_t v12 = TILocaleIdentifierForLexiconID(v11);
    if (v12) {
      int v13 = (const char *)v12;
    }
    else {
      int v13 = "";
    }
    uint64_t v14 = *((unsigned int *)this + 35);
    float v15 = logf(*((float *)this + 13));
    float v16 = logf(*((float *)this + 24));
    CFStringAppendFormat(a2, 0, @" word_id [%s]%d, ln P(word|ctx,lex) %.3f, ln P(lex|ctx) %.3f", v13, v14, (float)(v15 - v16), v16);
  }
  else
  {
    double v254 = logf(*((float *)this + 13));
    CFStringAppendFormat(a2, 0, @" ln P(word) %.3f", *(void *)&v254, v256);
  }
  int64x2_t v259 = 0uLL;
  v260[0] = 0;
  int v17 = *((_DWORD *)this + 26);
  if ((v17 & 0x40000000) != 0)
  {
    __int16 v262 = 0;
    char v263 = 0;
    v264 = "blocklist";
    int v261 = 1048585;
    char v265 = 0;
    v274 = v260;
    int v18 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(1uLL);
    v271 = (int64x2_t *)v18;
    v272.i64[0] = (uint64_t)v18;
    v273 = &v18[4 * v19];
    *(_DWORD *)int v18 = 0x100000;
    *((_WORD *)v18 + 2) = 0;
    *((unsigned char *)v18 + 6) = 0;
    v18[1] = 0;
    uint64_t v20 = KB::String::operator=((uint64_t)v18, (KB::String *)&v261) + 32;
    v272.i64[1] = v20;
    UChar32 v21 = (KB::String *)v259.i64[1];
    unint64_t v22 = (KB::String *)v259.i64[0];
    uint64_t v23 = v272.i64[0];
    if (v259.i64[1] == v259.i64[0])
    {
      int64x2_t v25 = vdupq_n_s64(v259.u64[1]);
    }
    else
    {
      uint64_t v24 = v272.i64[0] - 32;
      do
      {
        *(_DWORD *)uint64_t v24 = 0x100000;
        UChar32 v21 = (KB::String *)((char *)v21 - 32);
        *(_WORD *)(v24 + 4) = 0;
        *(unsigned char *)(v24 + 6) = 0;
        *(void *)(v24 + 8) = 0;
        uint64_t v23 = KB::String::operator=(v24, v21);
        uint64_t v24 = v23 - 32;
      }
      while (v21 != v22);
      int64x2_t v25 = v259;
      uint64_t v20 = v272.i64[1];
    }
    v259.i64[0] = v23;
    int64x2_t v272 = v25;
    uint64_t v26 = (void **)v260[0];
    v260[0] = v273;
    v273 = v26;
    v271 = (int64x2_t *)v25.i64[0];
    std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    v259.i64[1] = v20;
    if (v264 && v263 == 1) {
      free(v264);
    }
    int v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 2) != 0)
  {
    __int16 v262 = 0;
    char v263 = 0;
    v264 = "no-suggest";
    int v261 = 1048586;
    char v265 = 0;
    uint64_t v27 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      uint64_t v29 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v29 + 1) >> 59) {
        goto LABEL_362;
      }
      unint64_t v30 = (v260[0] - v259.i64[0]) >> 4;
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      v274 = v260;
      char v32 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v31);
      uint64_t v33 = (uint64_t)&v32[4 * v29];
      v271 = (int64x2_t *)v32;
      v272.i64[0] = v33;
      v273 = &v32[4 * v34];
      *(_DWORD *)uint64_t v33 = 0x100000;
      *(_WORD *)(v33 + 4) = 0;
      *(unsigned char *)(v33 + 6) = 0;
      *(void *)(v33 + 8) = 0;
      KB::String::operator=(v33, (KB::String *)&v261);
      uint64_t v28 = v33 + 32;
      v272.i64[1] = v33 + 32;
      uint64_t v35 = (KB::String *)v259.i64[1];
      char v36 = (KB::String *)v259.i64[0];
      uint64_t v37 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        int64x2_t v39 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        uint64_t v38 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)uint64_t v38 = 0x100000;
          uint64_t v35 = (KB::String *)((char *)v35 - 32);
          *(_WORD *)(v38 + 4) = 0;
          *(unsigned char *)(v38 + 6) = 0;
          *(void *)(v38 + 8) = 0;
          uint64_t v37 = KB::String::operator=(v38, v35);
          uint64_t v38 = v37 - 32;
        }
        while (v35 != v36);
        int64x2_t v39 = v259;
        uint64_t v28 = v272.i64[1];
      }
      v259.i64[0] = v37;
      v259.i64[1] = v28;
      int64x2_t v272 = v39;
      uint64_t v40 = (void **)v260[0];
      v260[0] = v273;
      v273 = v40;
      v271 = (int64x2_t *)v39.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v27 + 4) = 0;
      *(unsigned char *)(v27 + 6) = 0;
      *(void *)(v27 + 8) = 0;
      uint64_t v28 = KB::String::operator=(v27, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v28;
    if (v264 && v263 == 1) {
      free(v264);
    }
    int v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 0x80) != 0)
  {
    __int16 v262 = 0;
    char v263 = 0;
    v264 = "no-suggest-until-learned";
    int v261 = 1048600;
    char v265 = 0;
    uint64_t v41 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      uint64_t v43 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v43 + 1) >> 59) {
        goto LABEL_362;
      }
      unint64_t v44 = (v260[0] - v259.i64[0]) >> 4;
      if (v44 <= v43 + 1) {
        unint64_t v44 = v43 + 1;
      }
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v45 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v44;
      }
      v274 = v260;
      uint64_t v46 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v45);
      uint64_t v47 = (uint64_t)&v46[4 * v43];
      v271 = (int64x2_t *)v46;
      v272.i64[0] = v47;
      v273 = &v46[4 * v48];
      *(_DWORD *)uint64_t v47 = 0x100000;
      *(_WORD *)(v47 + 4) = 0;
      *(unsigned char *)(v47 + 6) = 0;
      *(void *)(v47 + 8) = 0;
      KB::String::operator=(v47, (KB::String *)&v261);
      uint64_t v42 = v47 + 32;
      v272.i64[1] = v47 + 32;
      unint64_t v49 = (KB::String *)v259.i64[1];
      uint64_t v50 = (KB::String *)v259.i64[0];
      uint64_t v51 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        int64x2_t v53 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        uint64_t v52 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)uint64_t v52 = 0x100000;
          unint64_t v49 = (KB::String *)((char *)v49 - 32);
          *(_WORD *)(v52 + 4) = 0;
          *(unsigned char *)(v52 + 6) = 0;
          *(void *)(v52 + 8) = 0;
          uint64_t v51 = KB::String::operator=(v52, v49);
          uint64_t v52 = v51 - 32;
        }
        while (v49 != v50);
        int64x2_t v53 = v259;
        uint64_t v42 = v272.i64[1];
      }
      v259.i64[0] = v51;
      v259.i64[1] = v42;
      int64x2_t v272 = v53;
      uint64_t v54 = (void **)v260[0];
      v260[0] = v273;
      v273 = v54;
      v271 = (int64x2_t *)v53.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v41 + 4) = 0;
      *(unsigned char *)(v41 + 6) = 0;
      *(void *)(v41 + 8) = 0;
      uint64_t v42 = KB::String::operator=(v41, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v42;
    if (v264 && v263 == 1) {
      free(v264);
    }
    int v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 4) != 0)
  {
    __int16 v262 = 0;
    char v263 = 0;
    v264 = "no-predict-until-learned";
    int v261 = 1048600;
    char v265 = 0;
    uint64_t v55 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      uint64_t v57 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v57 + 1) >> 59) {
        goto LABEL_362;
      }
      unint64_t v58 = (v260[0] - v259.i64[0]) >> 4;
      if (v58 <= v57 + 1) {
        unint64_t v58 = v57 + 1;
      }
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v59 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v58;
      }
      v274 = v260;
      char v60 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v59);
      uint64_t v61 = (uint64_t)&v60[4 * v57];
      v271 = (int64x2_t *)v60;
      v272.i64[0] = v61;
      v273 = &v60[4 * v62];
      *(_DWORD *)uint64_t v61 = 0x100000;
      *(_WORD *)(v61 + 4) = 0;
      *(unsigned char *)(v61 + 6) = 0;
      *(void *)(v61 + 8) = 0;
      KB::String::operator=(v61, (KB::String *)&v261);
      uint64_t v56 = v61 + 32;
      v272.i64[1] = v61 + 32;
      long long v63 = (KB::String *)v259.i64[1];
      unint64_t v64 = (KB::String *)v259.i64[0];
      uint64_t v65 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        int64x2_t v67 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        uint64_t v66 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)uint64_t v66 = 0x100000;
          long long v63 = (KB::String *)((char *)v63 - 32);
          *(_WORD *)(v66 + 4) = 0;
          *(unsigned char *)(v66 + 6) = 0;
          *(void *)(v66 + 8) = 0;
          uint64_t v65 = KB::String::operator=(v66, v63);
          uint64_t v66 = v65 - 32;
        }
        while (v63 != v64);
        int64x2_t v67 = v259;
        uint64_t v56 = v272.i64[1];
      }
      v259.i64[0] = v65;
      v259.i64[1] = v56;
      int64x2_t v272 = v67;
      char v68 = (void **)v260[0];
      v260[0] = v273;
      v273 = v68;
      v271 = (int64x2_t *)v67.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v55 + 4) = 0;
      *(unsigned char *)(v55 + 6) = 0;
      *(void *)(v55 + 8) = 0;
      uint64_t v56 = KB::String::operator=(v55, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v56;
    if (v264 && v263 == 1) {
      free(v264);
    }
    int v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 0x10000000) != 0)
  {
    __int16 v262 = 0;
    char v263 = 0;
    v264 = "offensive";
    int v261 = 1048585;
    char v265 = 0;
    uint64_t v69 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      uint64_t v71 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v71 + 1) >> 59) {
        goto LABEL_362;
      }
      unint64_t v72 = (v260[0] - v259.i64[0]) >> 4;
      if (v72 <= v71 + 1) {
        unint64_t v72 = v71 + 1;
      }
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v73 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v73 = v72;
      }
      v274 = v260;
      long long v74 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v73);
      uint64_t v75 = (uint64_t)&v74[4 * v71];
      v271 = (int64x2_t *)v74;
      v272.i64[0] = v75;
      v273 = &v74[4 * v76];
      *(_DWORD *)uint64_t v75 = 0x100000;
      *(_WORD *)(v75 + 4) = 0;
      *(unsigned char *)(v75 + 6) = 0;
      *(void *)(v75 + 8) = 0;
      KB::String::operator=(v75, (KB::String *)&v261);
      uint64_t v70 = v75 + 32;
      v272.i64[1] = v75 + 32;
      uint64_t v77 = (KB::String *)v259.i64[1];
      double v78 = (KB::String *)v259.i64[0];
      uint64_t v79 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        int64x2_t v81 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        uint64_t v80 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)uint64_t v80 = 0x100000;
          uint64_t v77 = (KB::String *)((char *)v77 - 32);
          *(_WORD *)(v80 + 4) = 0;
          *(unsigned char *)(v80 + 6) = 0;
          *(void *)(v80 + 8) = 0;
          uint64_t v79 = KB::String::operator=(v80, v77);
          uint64_t v80 = v79 - 32;
        }
        while (v77 != v78);
        int64x2_t v81 = v259;
        uint64_t v70 = v272.i64[1];
      }
      v259.i64[0] = v79;
      v259.i64[1] = v70;
      int64x2_t v272 = v81;
      double v82 = (void **)v260[0];
      v260[0] = v273;
      v273 = v82;
      v271 = (int64x2_t *)v81.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v69 + 4) = 0;
      *(unsigned char *)(v69 + 6) = 0;
      *(void *)(v69 + 8) = 0;
      uint64_t v70 = KB::String::operator=(v69, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v70;
    if (v264 && v263 == 1) {
      free(v264);
    }
    int v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 0x8000000) != 0)
  {
    __int16 v262 = 0;
    char v263 = 0;
    v264 = "vulgar";
    int v261 = 1048582;
    char v265 = 0;
    uint64_t v83 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      uint64_t v85 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v85 + 1) >> 59) {
        goto LABEL_362;
      }
      unint64_t v86 = (v260[0] - v259.i64[0]) >> 4;
      if (v86 <= v85 + 1) {
        unint64_t v86 = v85 + 1;
      }
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v87 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v87 = v86;
      }
      v274 = v260;
      unint64_t v88 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v87);
      uint64_t v89 = (uint64_t)&v88[4 * v85];
      v271 = (int64x2_t *)v88;
      v272.i64[0] = v89;
      v273 = &v88[4 * v90];
      *(_DWORD *)uint64_t v89 = 0x100000;
      *(_WORD *)(v89 + 4) = 0;
      *(unsigned char *)(v89 + 6) = 0;
      *(void *)(v89 + 8) = 0;
      KB::String::operator=(v89, (KB::String *)&v261);
      uint64_t v84 = v89 + 32;
      v272.i64[1] = v89 + 32;
      char v91 = (KB::String *)v259.i64[1];
      unint64_t v92 = (KB::String *)v259.i64[0];
      uint64_t v93 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        int64x2_t v95 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        uint64_t v94 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)uint64_t v94 = 0x100000;
          char v91 = (KB::String *)((char *)v91 - 32);
          *(_WORD *)(v94 + 4) = 0;
          *(unsigned char *)(v94 + 6) = 0;
          *(void *)(v94 + 8) = 0;
          uint64_t v93 = KB::String::operator=(v94, v91);
          uint64_t v94 = v93 - 32;
        }
        while (v91 != v92);
        int64x2_t v95 = v259;
        uint64_t v84 = v272.i64[1];
      }
      v259.i64[0] = v93;
      v259.i64[1] = v84;
      int64x2_t v272 = v95;
      uint64_t v96 = (void **)v260[0];
      v260[0] = v273;
      v273 = v96;
      v271 = (int64x2_t *)v95.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v83 + 4) = 0;
      *(unsigned char *)(v83 + 6) = 0;
      *(void *)(v83 + 8) = 0;
      uint64_t v84 = KB::String::operator=(v83, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v84;
    if (v264 && v263 == 1) {
      free(v264);
    }
    int v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 0x20000000) != 0)
  {
    __int16 v262 = 0;
    char v263 = 0;
    v264 = "sensitive";
    int v261 = 1048585;
    char v265 = 0;
    uint64_t v97 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      uint64_t v99 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v99 + 1) >> 59) {
        goto LABEL_362;
      }
      unint64_t v100 = (v260[0] - v259.i64[0]) >> 4;
      if (v100 <= v99 + 1) {
        unint64_t v100 = v99 + 1;
      }
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v101 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v101 = v100;
      }
      v274 = v260;
      char v102 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v101);
      uint64_t v103 = (uint64_t)&v102[4 * v99];
      v271 = (int64x2_t *)v102;
      v272.i64[0] = v103;
      v273 = &v102[4 * v104];
      *(_DWORD *)uint64_t v103 = 0x100000;
      *(_WORD *)(v103 + 4) = 0;
      *(unsigned char *)(v103 + 6) = 0;
      *(void *)(v103 + 8) = 0;
      KB::String::operator=(v103, (KB::String *)&v261);
      uint64_t v98 = v103 + 32;
      v272.i64[1] = v103 + 32;
      unint64_t v105 = (KB::String *)v259.i64[1];
      unint64_t v106 = (KB::String *)v259.i64[0];
      uint64_t v107 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        int64x2_t v109 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        uint64_t v108 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)uint64_t v108 = 0x100000;
          unint64_t v105 = (KB::String *)((char *)v105 - 32);
          *(_WORD *)(v108 + 4) = 0;
          *(unsigned char *)(v108 + 6) = 0;
          *(void *)(v108 + 8) = 0;
          uint64_t v107 = KB::String::operator=(v108, v105);
          uint64_t v108 = v107 - 32;
        }
        while (v105 != v106);
        int64x2_t v109 = v259;
        uint64_t v98 = v272.i64[1];
      }
      v259.i64[0] = v107;
      v259.i64[1] = v98;
      int64x2_t v272 = v109;
      v110 = (void **)v260[0];
      v260[0] = v273;
      v273 = v110;
      v271 = (int64x2_t *)v109.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v97 + 4) = 0;
      *(unsigned char *)(v97 + 6) = 0;
      *(void *)(v97 + 8) = 0;
      uint64_t v98 = KB::String::operator=(v97, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v98;
    if (v264 && v263 == 1) {
      free(v264);
    }
  }
  __int16 v262 = 0;
  char v263 = 0;
  v264 = ", ";
  int v261 = 1048578;
  char v265 = 0;
  KB::string_join((unsigned __int16 *)v259.i64[0], (unsigned __int16 *)v259.i64[1], (const KB::String *)&v261, (uint64_t)&v271);
  long long v111 = (const char *)v272.i64[0];
  if (!v272.i64[0]) {
    long long v111 = &v272.i8[8];
  }
  if ((_WORD)v271) {
    uint64_t v112 = v111;
  }
  else {
    uint64_t v112 = "";
  }
  CFStringAppendFormat(a2, 0, @" flags=(%s)", v112);
  if (v272.i64[0] && BYTE6(v271) == 1) {
    free((void *)v272.i64[0]);
  }
  if (v264 && v263 == 1) {
    free(v264);
  }
  int v113 = *((_DWORD *)this + 26);
  if ((v113 & 0x80032000) != 0 || *((_DWORD *)this + 31))
  {
    int64x2_t v257 = 0uLL;
    v258[0] = 0;
    if ((v113 & 0x40000) != 0)
    {
      __int16 v262 = 0;
      char v263 = 0;
      v264 = "static";
      int v261 = 1048582;
      char v265 = 0;
      v274 = v258;
      uint64_t v114 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(1uLL);
      v271 = (int64x2_t *)v114;
      v272.i64[0] = (uint64_t)v114;
      v273 = &v114[4 * v115];
      *(_DWORD *)uint64_t v114 = 0x100000;
      *((_WORD *)v114 + 2) = 0;
      *((unsigned char *)v114 + 6) = 0;
      v114[1] = 0;
      uint64_t v116 = KB::String::operator=((uint64_t)v114, (KB::String *)&v261) + 32;
      v272.i64[1] = v116;
      long long v117 = (KB::String *)v257.i64[1];
      long long v118 = (KB::String *)v257.i64[0];
      uint64_t v119 = v272.i64[0];
      if (v257.i64[1] == v257.i64[0])
      {
        int64x2_t v121 = vdupq_n_s64(v257.u64[1]);
      }
      else
      {
        uint64_t v120 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)uint64_t v120 = 0x100000;
          long long v117 = (KB::String *)((char *)v117 - 32);
          *(_WORD *)(v120 + 4) = 0;
          *(unsigned char *)(v120 + 6) = 0;
          *(void *)(v120 + 8) = 0;
          uint64_t v119 = KB::String::operator=(v120, v117);
          uint64_t v120 = v119 - 32;
        }
        while (v117 != v118);
        int64x2_t v121 = v257;
        uint64_t v116 = v272.i64[1];
      }
      v257.i64[0] = v119;
      int64x2_t v272 = v121;
      double v122 = (void **)v258[0];
      v258[0] = v273;
      v273 = v122;
      v271 = (int64x2_t *)v121.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      v257.i64[1] = v116;
      if (v264 && v263 == 1) {
        free(v264);
      }
      int v113 = *((_DWORD *)this + 26);
    }
    if ((v113 & 0x2000) != 0)
    {
      __int16 v262 = 0;
      char v263 = 0;
      v264 = "learned";
      int v261 = 1048583;
      char v265 = 0;
      uint64_t v123 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        uint64_t v125 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v125 + 1) >> 59) {
          goto LABEL_362;
        }
        unint64_t v126 = (v258[0] - v257.i64[0]) >> 4;
        if (v126 <= v125 + 1) {
          unint64_t v126 = v125 + 1;
        }
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v127 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v126;
        }
        v274 = v258;
        BOOL v128 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v127);
        uint64_t v129 = (uint64_t)&v128[4 * v125];
        v271 = (int64x2_t *)v128;
        v272.i64[0] = v129;
        v273 = &v128[4 * v130];
        *(_DWORD *)uint64_t v129 = 0x100000;
        *(_WORD *)(v129 + 4) = 0;
        *(unsigned char *)(v129 + 6) = 0;
        *(void *)(v129 + 8) = 0;
        KB::String::operator=(v129, (KB::String *)&v261);
        uint64_t v124 = v129 + 32;
        v272.i64[1] = v129 + 32;
        unint64_t v131 = (KB::String *)v257.i64[1];
        uint64_t v132 = (KB::String *)v257.i64[0];
        uint64_t v133 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          int64x2_t v135 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          uint64_t v134 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)uint64_t v134 = 0x100000;
            unint64_t v131 = (KB::String *)((char *)v131 - 32);
            *(_WORD *)(v134 + 4) = 0;
            *(unsigned char *)(v134 + 6) = 0;
            *(void *)(v134 + 8) = 0;
            uint64_t v133 = KB::String::operator=(v134, v131);
            uint64_t v134 = v133 - 32;
          }
          while (v131 != v132);
          int64x2_t v135 = v257;
          uint64_t v124 = v272.i64[1];
        }
        v257.i64[0] = v133;
        v257.i64[1] = v124;
        int64x2_t v272 = v135;
        float v136 = (void **)v258[0];
        v258[0] = v273;
        v273 = v136;
        v271 = (int64x2_t *)v135.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v123 + 4) = 0;
        *(unsigned char *)(v123 + 6) = 0;
        *(void *)(v123 + 8) = 0;
        uint64_t v124 = KB::String::operator=(v123, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v124;
      if (v264 && v263 == 1) {
        free(v264);
      }
    }
    if (*((_DWORD *)this + 31))
    {
      KB::String::format((KB::String *)"f=%d", (uint64_t)&v261, *((unsigned int *)this + 31));
      uint64_t v137 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        uint64_t v139 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v139 + 1) >> 59) {
          goto LABEL_362;
        }
        unint64_t v140 = (v258[0] - v257.i64[0]) >> 4;
        if (v140 <= v139 + 1) {
          unint64_t v140 = v139 + 1;
        }
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v141 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v141 = v140;
        }
        v274 = v258;
        int v142 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v141);
        uint64_t v143 = (uint64_t)&v142[4 * v139];
        v271 = (int64x2_t *)v142;
        v272.i64[0] = v143;
        v273 = &v142[4 * v144];
        *(_DWORD *)uint64_t v143 = 0x100000;
        *(_WORD *)(v143 + 4) = 0;
        *(unsigned char *)(v143 + 6) = 0;
        *(void *)(v143 + 8) = 0;
        KB::String::operator=(v143, (KB::String *)&v261);
        uint64_t v138 = v143 + 32;
        v272.i64[1] = v143 + 32;
        unint64_t v145 = (KB::String *)v257.i64[1];
        v146 = (KB::String *)v257.i64[0];
        uint64_t v147 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          int64x2_t v149 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          uint64_t v148 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)uint64_t v148 = 0x100000;
            unint64_t v145 = (KB::String *)((char *)v145 - 32);
            *(_WORD *)(v148 + 4) = 0;
            *(unsigned char *)(v148 + 6) = 0;
            *(void *)(v148 + 8) = 0;
            uint64_t v147 = KB::String::operator=(v148, v145);
            uint64_t v148 = v147 - 32;
          }
          while (v145 != v146);
          int64x2_t v149 = v257;
          uint64_t v138 = v272.i64[1];
        }
        v257.i64[0] = v147;
        v257.i64[1] = v138;
        int64x2_t v272 = v149;
        uint64_t v150 = (void **)v258[0];
        v258[0] = v273;
        v273 = v150;
        v271 = (int64x2_t *)v149.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v137 + 4) = 0;
        *(unsigned char *)(v137 + 6) = 0;
        *(void *)(v137 + 8) = 0;
        uint64_t v138 = KB::String::operator=(v137, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v138;
      if (v264 && v263 == 1) {
        free(v264);
      }
    }
    if (*((_DWORD *)this + 32))
    {
      KB::String::format((KB::String *)"p=%d", (uint64_t)&v261, *((unsigned int *)this + 32));
      uint64_t v151 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        uint64_t v153 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v153 + 1) >> 59) {
          goto LABEL_362;
        }
        unint64_t v154 = (v258[0] - v257.i64[0]) >> 4;
        if (v154 <= v153 + 1) {
          unint64_t v154 = v153 + 1;
        }
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v155 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v155 = v154;
        }
        v274 = v258;
        int v156 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v155);
        uint64_t v157 = (uint64_t)&v156[4 * v153];
        v271 = (int64x2_t *)v156;
        v272.i64[0] = v157;
        v273 = &v156[4 * v158];
        *(_DWORD *)uint64_t v157 = 0x100000;
        *(_WORD *)(v157 + 4) = 0;
        *(unsigned char *)(v157 + 6) = 0;
        *(void *)(v157 + 8) = 0;
        KB::String::operator=(v157, (KB::String *)&v261);
        uint64_t v152 = v157 + 32;
        v272.i64[1] = v157 + 32;
        int v159 = (KB::String *)v257.i64[1];
        uint64_t v160 = (KB::String *)v257.i64[0];
        uint64_t v161 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          int64x2_t v163 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          uint64_t v162 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)uint64_t v162 = 0x100000;
            int v159 = (KB::String *)((char *)v159 - 32);
            *(_WORD *)(v162 + 4) = 0;
            *(unsigned char *)(v162 + 6) = 0;
            *(void *)(v162 + 8) = 0;
            uint64_t v161 = KB::String::operator=(v162, v159);
            uint64_t v162 = v161 - 32;
          }
          while (v159 != v160);
          int64x2_t v163 = v257;
          uint64_t v152 = v272.i64[1];
        }
        v257.i64[0] = v161;
        v257.i64[1] = v152;
        int64x2_t v272 = v163;
        char v164 = (void **)v258[0];
        v258[0] = v273;
        v273 = v164;
        v271 = (int64x2_t *)v163.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v151 + 4) = 0;
        *(unsigned char *)(v151 + 6) = 0;
        *(void *)(v151 + 8) = 0;
        uint64_t v152 = KB::String::operator=(v151, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v152;
      if (v264 && v263 == 1) {
        free(v264);
      }
    }
    int v165 = *((_DWORD *)this + 26);
    if ((v165 & 0x10000) != 0)
    {
      __int16 v262 = 0;
      char v263 = 0;
      v264 = "user dictionary";
      int v261 = 1048591;
      char v265 = 0;
      uint64_t v166 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        uint64_t v168 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v168 + 1) >> 59) {
          goto LABEL_362;
        }
        unint64_t v169 = (v258[0] - v257.i64[0]) >> 4;
        if (v169 <= v168 + 1) {
          unint64_t v169 = v168 + 1;
        }
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v170 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v170 = v169;
        }
        v274 = v258;
        v171 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v170);
        uint64_t v172 = (uint64_t)&v171[4 * v168];
        v271 = (int64x2_t *)v171;
        v272.i64[0] = v172;
        v273 = &v171[4 * v173];
        *(_DWORD *)uint64_t v172 = 0x100000;
        *(_WORD *)(v172 + 4) = 0;
        *(unsigned char *)(v172 + 6) = 0;
        *(void *)(v172 + 8) = 0;
        KB::String::operator=(v172, (KB::String *)&v261);
        uint64_t v167 = v172 + 32;
        v272.i64[1] = v172 + 32;
        v174 = (KB::String *)v257.i64[1];
        v175 = (KB::String *)v257.i64[0];
        uint64_t v176 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          int64x2_t v178 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          uint64_t v177 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)uint64_t v177 = 0x100000;
            v174 = (KB::String *)((char *)v174 - 32);
            *(_WORD *)(v177 + 4) = 0;
            *(unsigned char *)(v177 + 6) = 0;
            *(void *)(v177 + 8) = 0;
            uint64_t v176 = KB::String::operator=(v177, v174);
            uint64_t v177 = v176 - 32;
          }
          while (v174 != v175);
          int64x2_t v178 = v257;
          uint64_t v167 = v272.i64[1];
        }
        v257.i64[0] = v176;
        v257.i64[1] = v167;
        int64x2_t v272 = v178;
        v179 = (void **)v258[0];
        v258[0] = v273;
        v273 = v179;
        v271 = (int64x2_t *)v178.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v166 + 4) = 0;
        *(unsigned char *)(v166 + 6) = 0;
        *(void *)(v166 + 8) = 0;
        uint64_t v167 = KB::String::operator=(v166, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v167;
      if (v264 && v263 == 1) {
        free(v264);
      }
      int v165 = *((_DWORD *)this + 26);
    }
    if ((v165 & 0x20000) != 0)
    {
      __int16 v262 = 0;
      char v263 = 0;
      v264 = "address book";
      int v261 = 1048588;
      char v265 = 0;
      uint64_t v180 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        uint64_t v182 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v182 + 1) >> 59) {
          goto LABEL_362;
        }
        unint64_t v183 = (v258[0] - v257.i64[0]) >> 4;
        if (v183 <= v182 + 1) {
          unint64_t v183 = v182 + 1;
        }
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v184 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v184 = v183;
        }
        v274 = v258;
        v185 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v184);
        uint64_t v186 = (uint64_t)&v185[4 * v182];
        v271 = (int64x2_t *)v185;
        v272.i64[0] = v186;
        v273 = &v185[4 * v187];
        *(_DWORD *)uint64_t v186 = 0x100000;
        *(_WORD *)(v186 + 4) = 0;
        *(unsigned char *)(v186 + 6) = 0;
        *(void *)(v186 + 8) = 0;
        KB::String::operator=(v186, (KB::String *)&v261);
        uint64_t v181 = v186 + 32;
        v272.i64[1] = v186 + 32;
        v188 = (KB::String *)v257.i64[1];
        v189 = (KB::String *)v257.i64[0];
        uint64_t v190 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          int64x2_t v192 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          uint64_t v191 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)uint64_t v191 = 0x100000;
            v188 = (KB::String *)((char *)v188 - 32);
            *(_WORD *)(v191 + 4) = 0;
            *(unsigned char *)(v191 + 6) = 0;
            *(void *)(v191 + 8) = 0;
            uint64_t v190 = KB::String::operator=(v191, v188);
            uint64_t v191 = v190 - 32;
          }
          while (v188 != v189);
          int64x2_t v192 = v257;
          uint64_t v181 = v272.i64[1];
        }
        v257.i64[0] = v190;
        v257.i64[1] = v181;
        int64x2_t v272 = v192;
        v193 = (void **)v258[0];
        v258[0] = v273;
        v273 = v193;
        v271 = (int64x2_t *)v192.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v180 + 4) = 0;
        *(unsigned char *)(v180 + 6) = 0;
        *(void *)(v180 + 8) = 0;
        uint64_t v181 = KB::String::operator=(v180, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v181;
      if (v264 && v263 == 1) {
        free(v264);
      }
      int v165 = *((_DWORD *)this + 26);
    }
    if (v165 < 0)
    {
      __int16 v262 = 0;
      char v263 = 0;
      v264 = "app names";
      int v261 = 1048585;
      char v265 = 0;
      uint64_t v194 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        uint64_t v196 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v196 + 1) >> 59) {
          goto LABEL_362;
        }
        unint64_t v197 = (v258[0] - v257.i64[0]) >> 4;
        if (v197 <= v196 + 1) {
          unint64_t v197 = v196 + 1;
        }
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v198 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v198 = v197;
        }
        v274 = v258;
        v199 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v198);
        uint64_t v200 = (uint64_t)&v199[4 * v196];
        v271 = (int64x2_t *)v199;
        v272.i64[0] = v200;
        v273 = &v199[4 * v201];
        *(_DWORD *)uint64_t v200 = 0x100000;
        *(_WORD *)(v200 + 4) = 0;
        *(unsigned char *)(v200 + 6) = 0;
        *(void *)(v200 + 8) = 0;
        KB::String::operator=(v200, (KB::String *)&v261);
        uint64_t v195 = v200 + 32;
        v272.i64[1] = v200 + 32;
        v202 = (KB::String *)v257.i64[1];
        v203 = (KB::String *)v257.i64[0];
        uint64_t v204 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          int64x2_t v206 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          uint64_t v205 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)uint64_t v205 = 0x100000;
            v202 = (KB::String *)((char *)v202 - 32);
            *(_WORD *)(v205 + 4) = 0;
            *(unsigned char *)(v205 + 6) = 0;
            *(void *)(v205 + 8) = 0;
            uint64_t v204 = KB::String::operator=(v205, v202);
            uint64_t v205 = v204 - 32;
          }
          while (v202 != v203);
          int64x2_t v206 = v257;
          uint64_t v195 = v272.i64[1];
        }
        v257.i64[0] = v204;
        v257.i64[1] = v195;
        int64x2_t v272 = v206;
        v207 = (void **)v258[0];
        v258[0] = v273;
        v273 = v207;
        v271 = (int64x2_t *)v206.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v194 + 4) = 0;
        *(unsigned char *)(v194 + 6) = 0;
        *(void *)(v194 + 8) = 0;
        uint64_t v195 = KB::String::operator=(v194, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v195;
      if (v264 && v263 == 1) {
        free(v264);
      }
      if ((*((_DWORD *)this + 26) & 0x100) == 0) {
        goto LABEL_301;
      }
    }
    else if ((v165 & 0x100) == 0)
    {
      goto LABEL_301;
    }
    __int16 v262 = 0;
    char v263 = 0;
    v264 = "named entities";
    int v261 = 1048590;
    char v265 = 0;
    uint64_t v208 = v257.i64[1];
    if (v257.i64[1] >= v258[0])
    {
      uint64_t v210 = (v257.i64[1] - v257.i64[0]) >> 5;
      if ((unint64_t)(v210 + 1) >> 59) {
        goto LABEL_362;
      }
      unint64_t v211 = (v258[0] - v257.i64[0]) >> 4;
      if (v211 <= v210 + 1) {
        unint64_t v211 = v210 + 1;
      }
      if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v212 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v212 = v211;
      }
      v274 = v258;
      v213 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v212);
      uint64_t v214 = (uint64_t)&v213[4 * v210];
      v271 = (int64x2_t *)v213;
      v272.i64[0] = v214;
      v273 = &v213[4 * v215];
      *(_DWORD *)uint64_t v214 = 0x100000;
      *(_WORD *)(v214 + 4) = 0;
      *(unsigned char *)(v214 + 6) = 0;
      *(void *)(v214 + 8) = 0;
      KB::String::operator=(v214, (KB::String *)&v261);
      uint64_t v209 = v214 + 32;
      v272.i64[1] = v214 + 32;
      v216 = (KB::String *)v257.i64[1];
      v217 = (KB::String *)v257.i64[0];
      uint64_t v218 = v272.i64[0];
      if (v257.i64[1] == v257.i64[0])
      {
        int64x2_t v220 = vdupq_n_s64(v257.u64[1]);
      }
      else
      {
        uint64_t v219 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)uint64_t v219 = 0x100000;
          v216 = (KB::String *)((char *)v216 - 32);
          *(_WORD *)(v219 + 4) = 0;
          *(unsigned char *)(v219 + 6) = 0;
          *(void *)(v219 + 8) = 0;
          uint64_t v218 = KB::String::operator=(v219, v216);
          uint64_t v219 = v218 - 32;
        }
        while (v216 != v217);
        int64x2_t v220 = v257;
        uint64_t v209 = v272.i64[1];
      }
      v257.i64[0] = v218;
      v257.i64[1] = v209;
      int64x2_t v272 = v220;
      v221 = (void **)v258[0];
      v258[0] = v273;
      v273 = v221;
      v271 = (int64x2_t *)v220.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v257.i64[1] = 0x100000;
      *(_WORD *)(v208 + 4) = 0;
      *(unsigned char *)(v208 + 6) = 0;
      *(void *)(v208 + 8) = 0;
      uint64_t v209 = KB::String::operator=(v208, (KB::String *)&v261) + 32;
    }
    v257.i64[1] = v209;
    if (v264 && v263 == 1) {
      free(v264);
    }
LABEL_301:
    if (*((void *)this + 28))
    {
      __int16 v262 = 0;
      char v263 = 0;
      v264 = "supplemental lexicon item";
      int v261 = 1048601;
      char v265 = 0;
      uint64_t v222 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        uint64_t v224 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v224 + 1) >> 59) {
          goto LABEL_362;
        }
        unint64_t v225 = (v258[0] - v257.i64[0]) >> 4;
        if (v225 <= v224 + 1) {
          unint64_t v225 = v224 + 1;
        }
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v226 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v226 = v225;
        }
        v274 = v258;
        v227 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v226);
        uint64_t v228 = (uint64_t)&v227[4 * v224];
        v271 = (int64x2_t *)v227;
        v272.i64[0] = v228;
        v273 = &v227[4 * v229];
        *(_DWORD *)uint64_t v228 = 0x100000;
        *(_WORD *)(v228 + 4) = 0;
        *(unsigned char *)(v228 + 6) = 0;
        *(void *)(v228 + 8) = 0;
        KB::String::operator=(v228, (KB::String *)&v261);
        uint64_t v223 = v228 + 32;
        v272.i64[1] = v228 + 32;
        v230 = (KB::String *)v257.i64[1];
        v231 = (KB::String *)v257.i64[0];
        uint64_t v232 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          int64x2_t v234 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          uint64_t v233 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)uint64_t v233 = 0x100000;
            v230 = (KB::String *)((char *)v230 - 32);
            *(_WORD *)(v233 + 4) = 0;
            *(unsigned char *)(v233 + 6) = 0;
            *(void *)(v233 + 8) = 0;
            uint64_t v232 = KB::String::operator=(v233, v230);
            uint64_t v233 = v232 - 32;
          }
          while (v230 != v231);
          int64x2_t v234 = v257;
          uint64_t v223 = v272.i64[1];
        }
        v257.i64[0] = v232;
        v257.i64[1] = v223;
        int64x2_t v272 = v234;
        v235 = (void **)v258[0];
        v258[0] = v273;
        v273 = v235;
        v271 = (int64x2_t *)v234.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v222 + 4) = 0;
        *(unsigned char *)(v222 + 6) = 0;
        *(void *)(v222 + 8) = 0;
        uint64_t v223 = KB::String::operator=(v222, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v223;
      if (v264 && v263 == 1) {
        free(v264);
      }
    }
    if ((*((unsigned char *)this + 107) & 4) == 0)
    {
LABEL_337:
      __int16 v262 = 0;
      char v263 = 0;
      v264 = ", ";
      int v261 = 1048578;
      char v265 = 0;
      KB::string_join((unsigned __int16 *)v257.i64[0], (unsigned __int16 *)v257.i64[1], (const KB::String *)&v261, (uint64_t)&v271);
      v250 = (const char *)v272.i64[0];
      if (!v272.i64[0]) {
        v250 = &v272.i8[8];
      }
      if ((_WORD)v271) {
        v251 = v250;
      }
      else {
        v251 = "";
      }
      CFStringAppendFormat(a2, 0, @" sources=(%s)", v251);
      if (v272.i64[0] && BYTE6(v271) == 1) {
        free((void *)v272.i64[0]);
      }
      if (v264 && v263 == 1) {
        free(v264);
      }
      v271 = &v257;
      std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v271);
      goto LABEL_349;
    }
    __int16 v262 = 0;
    char v263 = 0;
    v264 = "conversation history";
    int v261 = 1048596;
    char v265 = 0;
    uint64_t v236 = v257.i64[1];
    if (v257.i64[1] < v258[0])
    {
      *(_DWORD *)v257.i64[1] = 0x100000;
      *(_WORD *)(v236 + 4) = 0;
      *(unsigned char *)(v236 + 6) = 0;
      *(void *)(v236 + 8) = 0;
      uint64_t v237 = KB::String::operator=(v236, (KB::String *)&v261) + 32;
LABEL_334:
      v257.i64[1] = v237;
      if (v264 && v263 == 1) {
        free(v264);
      }
      goto LABEL_337;
    }
    uint64_t v238 = (v257.i64[1] - v257.i64[0]) >> 5;
    if (!((unint64_t)(v238 + 1) >> 59))
    {
      unint64_t v239 = (v258[0] - v257.i64[0]) >> 4;
      if (v239 <= v238 + 1) {
        unint64_t v239 = v238 + 1;
      }
      if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v240 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v240 = v239;
      }
      v274 = v258;
      v241 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v240);
      uint64_t v242 = (uint64_t)&v241[4 * v238];
      v271 = (int64x2_t *)v241;
      v272.i64[0] = v242;
      v273 = &v241[4 * v243];
      *(_DWORD *)uint64_t v242 = 0x100000;
      *(_WORD *)(v242 + 4) = 0;
      *(unsigned char *)(v242 + 6) = 0;
      *(void *)(v242 + 8) = 0;
      KB::String::operator=(v242, (KB::String *)&v261);
      uint64_t v237 = v242 + 32;
      v272.i64[1] = v242 + 32;
      v244 = (KB::String *)v257.i64[1];
      v245 = (KB::String *)v257.i64[0];
      uint64_t v246 = v272.i64[0];
      if (v257.i64[1] == v257.i64[0])
      {
        int64x2_t v248 = vdupq_n_s64(v257.u64[1]);
      }
      else
      {
        uint64_t v247 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)uint64_t v247 = 0x100000;
          v244 = (KB::String *)((char *)v244 - 32);
          *(_WORD *)(v247 + 4) = 0;
          *(unsigned char *)(v247 + 6) = 0;
          *(void *)(v247 + 8) = 0;
          uint64_t v246 = KB::String::operator=(v247, v244);
          uint64_t v247 = v246 - 32;
        }
        while (v244 != v245);
        int64x2_t v248 = v257;
        uint64_t v237 = v272.i64[1];
      }
      v257.i64[0] = v246;
      v257.i64[1] = v237;
      int64x2_t v272 = v248;
      v249 = (void **)v258[0];
      v258[0] = v273;
      v273 = v249;
      v271 = (int64x2_t *)v248.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      goto LABEL_334;
    }
LABEL_362:
    abort();
  }
LABEL_349:
  if (*((_WORD *)this + 32))
  {
    v252 = (char *)*((void *)this + 9);
    if (!v252) {
      v252 = (char *)this + 80;
    }
    CFStringAppendFormat(a2, 0, @" log10 P(word|ctx,lm) details=(%s)", v252);
  }
  if (*((_WORD *)this + 80))
  {
    v253 = (char *)*((void *)this + 21);
    if (!v253) {
      v253 = (char *)this + 176;
    }
    CFStringAppendFormat(a2, 0, @"\n%s", v253);
  }
  else
  {
    CFStringAppendFormat(a2, 0, @"\n", v255);
  }
  v271 = &v259;
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v271);
  if (v269)
  {
    if (v268 == 1) {
      free(v269);
    }
  }
}

void TI::Favonius::BasicStrokeBuildManager::get_it_recognizer_state(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::uses_stem_suffix_correction_factor(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::uses_continuous_path_retrocorrection(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::enabled_continuous_path_algorithms(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::uses_ml_tap_typing(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::uses_continuous_path(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::is_hit_test_correction(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::keys_for_input(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::touch_count(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

void TI::Favonius::BasicStrokeBuildManager::search_algorithm(void *a1@<X8>)
{
  *a1 = 0;
}

void TI::Favonius::BasicStrokeBuildManager::typing_model(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::has_input_from_touch(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::language_model_uses_input_context(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

void TI::Favonius::BasicStrokeBuildManager::text_accepted_from_UI(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void TI::Favonius::BasicStrokeBuildManager::lookup_inline_completions_for_UI(uint64_t a1@<X8>)
{
  v13[125] = *(void ***)MEMORY[0x1E4F143B8];
  HIDWORD(v9) = 0;
  long long v5 = 0u;
  memset(v6, 0, sizeof(v6));
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  KB::String::String((KB::String *)v11, "one");
  KB::Candidate::Candidate((KB::Candidate *)v13, (const KB::String *)v11, 0);
  unsigned int v2 = (KB::Candidate *)operator new(0x3E8uLL);
  KB::Candidate::Candidate(v2, (const KB::Candidate *)v13);
  std::vector<KB::Candidate>::__vdeallocate((void **)&v5);
  *(void *)&long long v5 = v2;
  *((void *)&v5 + 1) = (char *)v2 + 1000;
  memset(v4, 0, sizeof(v4));
  UChar32 v10 = (void **)v4;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v10);
  KB::Candidate::~Candidate((KB::Candidate *)v13);
  if (v12 && v11[6] == 1) {
    free(v12);
  }
  *(_OWORD *)a1 = v5;
  *(void *)(a1 + 16) = (char *)v2 + 1000;
  long long v5 = 0uLL;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)v6 + 8);
  *(void *)(a1 + 40) = *((void *)&v6[1] + 1);
  memset(v6, 0, sizeof(v6));
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)&v8[0];
  long long v7 = 0uLL;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)((char *)v8 + 8);
  memset(v8, 0, sizeof(v8));
  uint64_t v3 = v9;
  *(void *)(a1 + 88) = *((void *)&v8[1] + 1);
  *(void *)(a1 + 96) = v3;
  *(unsigned char *)(a1 + 104) = 1;
  v13[0] = (void **)v8 + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v13);
  v13[0] = (void **)&v7;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v13);
  v13[0] = (void **)v6 + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v13);
  v13[0] = (void **)&v5;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v13);
}

void TI::Favonius::BasicStrokeBuildManager::lookup_suggestions_for_UI(int a1@<W5>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  v21[125] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a3 + 100) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  if ((a1 & 0xFFFFFFFD) == 1)
  {
    KB::String::String((KB::String *)v17, "one");
    KB::Candidate::Candidate((KB::Candidate *)v19, (const KB::String *)v17, 0);
    KB::String::String((KB::String *)v15, "two");
    KB::Candidate::Candidate((KB::Candidate *)&v20, (const KB::String *)v15, 0);
    KB::String::String((KB::String *)v13, "three");
    KB::Candidate::Candidate((KB::Candidate *)v21, (const KB::String *)v13, 0);
    long long v5 = (char *)operator new(0xBB8uLL);
    for (uint64_t i = 0; i != 3000; i += 1000)
      KB::Candidate::Candidate((KB::Candidate *)&v5[i], (const KB::Candidate *)&v19[i]);
    std::vector<KB::Candidate>::__vdeallocate((void **)a3);
    *(void *)a3 = v5;
    *(void *)(a3 + 8) = v5 + 3000;
    *(void *)(a3 + 16) = v5 + 3000;
    memset(v11, 0, sizeof(v11));
    unint64_t v12 = (void **)v11;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v12);
    for (uint64_t j = 2000; j != -1000; j -= 1000)
      KB::Candidate::~Candidate((KB::Candidate *)&v19[j]);
    if (v14) {
      BOOL v8 = v13[6] == 1;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8) {
      free(v14);
    }
    if (v16 && v15[6] == 1) {
      free(v16);
    }
    if (v18 && v17[6] == 1) {
      free(v18);
    }
  }
  memset(v9, 0, sizeof(v9));
  KB::CandidateFilterFlags::CandidateFilterFlags(__p, v9);
  std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>::operator()(*(void *)(a2 + 24), a3, (uint64_t)__p, 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = a4;
  if (!a1)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1E402A36CLL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a1 + 48))(a1, a2, a3, &v5);
}

uint64_t TI::Favonius::BasicStrokeBuildManager::add_touch_cancel(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::add_touch_up(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 == -1)
  {
    TI::Favonius::KeyboardLayout::find_nearest_key(*(atomic_uint **)(*(void *)a2 + 56), *(CGPoint *)(*(void *)a2 + 8), &v5);
    uint64_t v3 = *((__int16 *)v5 + 31);
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v5);
  }
  return v3;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::add_touch_down_or_drag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 == -1)
  {
    TI::Favonius::KeyboardLayout::find_nearest_key(*(atomic_uint **)(*(void *)a2 + 56), *(CGPoint *)(*(void *)a2 + 8), &v5);
    uint64_t v3 = *((__int16 *)v5 + 31);
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v5);
  }
  return v3;
}

uint64_t TI::Favonius::StrokeBuildManager::engineType(TI::Favonius::StrokeBuildManager *this)
{
  return 0;
}

uint64_t __Block_byref_object_copy__10089(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10090(uint64_t a1)
{
}

uint64_t KB::LanguageModelImplBase::last_set_supplemental_phrase_lexicon(KB::LanguageModelImplBase *this)
{
  return 0;
}

uint64_t KB::LanguageModelImplBase::last_set_supplemental_word_lexicon(KB::LanguageModelImplBase *this)
{
  return 0;
}

CFTypeRef KB::LanguageModelImplBase::engine_string_to_surface_form@<X0>(KB::LanguageModelImplBase *this@<X0>, CFTypeRef cf@<X1>, void *a3@<X8>)
{
  CFTypeRef result = (CFTypeRef)*((void *)this + 16);
  if (result)
  {
    uint64_t v6 = (uint64_t (*)(void))*((void *)result + 2);
    return (CFTypeRef)v6();
  }
  else
  {
    *a3 = cf;
    if (cf)
    {
      CFTypeRef result = CFRetain(cf);
      *a3 = cf;
    }
  }
  return result;
}

void KB::LanguageModelImplBase::set_string_converter(uint64_t a1, void *aBlock)
{
  uint64_t v3 = *(const void **)(a1 + 128);
  if (v3 != aBlock)
  {
    if (aBlock)
    {
      BOOL v4 = _Block_copy(aBlock);
      uint64_t v3 = *(const void **)(a1 + 128);
      if (!v3)
      {
LABEL_5:
        *(void *)(a1 + 128) = v4;
        return;
      }
    }
    else
    {
      BOOL v4 = 0;
      if (!v3) {
        goto LABEL_5;
      }
    }
    _Block_release(v3);
    goto LABEL_5;
  }
}

uint64_t KB::LanguageModelImplBase::tokenize_text(uint64_t a1)
{
  return LMStreamTokenizerRelease();
}

void ___ZNK2KB21LanguageModelImplBase13tokenize_textERKNS_6StringEU13block_pointerFvS3_RK9TITokenIDE_block_invoke(uint64_t a1, const char *a2, unsigned __int16 a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v5, a2, a3);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
  if (v6) {
    BOOL v4 = v5[6] == 1;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    free(v6);
  }
}

uint64_t KB::LanguageModelImplBase::completions()
{
  return 0;
}

uint64_t KB::LanguageModelImplBase::predictions()
{
  return 0;
}

uint64_t KB::LanguageModelImplBase::should_not_suggest_or_predict_text(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)
    || !*(void *)a3
    || **(void **)(*(void *)a3 + 8) == *(void *)(*(void *)(*(void *)a3 + 8) + 8))
  {
    return 1;
  }
  uint64_t v7 = 0;
  BOOL v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  KB::LanguageModelImplBase::tokenize_text(a1);
  BOOL v5 = *((unsigned char *)v8 + 24) != 0;
  _Block_object_dispose(&v7, 8);
  return v5;
}

void ___ZNK2KB21LanguageModelImplBase34should_not_suggest_or_predict_textERKNS_6StringERKN3WTF6RefPtrINS_19DictionaryContainerEEE_block_invoke(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24) && (*(_DWORD *)(a3 + 4) - 500) <= 0xFFFFFE0C)
  {
    uint64_t v5 = a1[5];
    uint64_t v6 = (KB::DictionaryContainer **)a1[6];
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    *(_OWORD *)std::string __p = 0u;
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v15);
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v15 + 8));
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    KB::LanguageModelImplBase::static_words_for_string(v5, a2, v6, (uint64_t)&v11, 1, 0, (uint64_t)&v18);
    uint64_t v20 = (void **)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v20);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v15 + 8));
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v15);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*((void *)&v11 + 1)) {
      std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v11 + 1));
    }
    uint64_t v7 = v18;
    if (v18 != v19)
    {
      while (1)
      {
        int v8 = *(_DWORD *)(v7 + 104);
        if ((v8 & 0x800012) == 0)
        {
          BOOL v9 = (*(_DWORD *)(v7 + 104) & 0x2080) == 0x80 || (v8 & 0x2042000) == 0x2000000;
          if (!v9 && (v8 & 0x800000) == 0 && (*(_DWORD *)(v7 + 104) & 0x2004) != 4) {
            break;
          }
        }
        v7 += 240;
        if (v7 == v19)
        {
          char v10 = 1;
          goto LABEL_18;
        }
      }
    }
    char v10 = 0;
LABEL_18:
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v10;
    *(void *)&long long v11 = &v18;
    std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100]((void ***)&v11);
  }
}

void KB::LanguageModelImplBase::static_words_for_string(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, KB::DictionaryContainer **a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  KB::DictionaryContainer::derive_static_words(*a3, (uint64_t *)a7, a2);
  uint64_t v14 = *(void *)a7;
  uint64_t v13 = *(void *)(a7 + 8);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  unsigned __int16 v19[2] = ___ZNK2KB21LanguageModelImplBase23static_words_for_stringERKNS_6StringERKN3WTF6RefPtrINS_19DictionaryContainerEEERKNS_20LanguageModelContextEbb_block_invoke;
  v19[3] = &__block_descriptor_tmp_10467;
  char v20 = a6;
  v19[4] = a1;
  v19[5] = a2;
  uint64_t v15 = std::remove_if[abi:nn180100]<std::__wrap_iter<KB::Word *>,BOOL({block_pointer})(KB::Word const&)>(v14, v13, (uint64_t)v19);
  std::vector<KB::Word>::erase(a7, v15, *(KB::Word **)(a7 + 8));
  if ((a5 & 1) == 0)
  {
    while (v14 != v15)
    {
      uint64_t v16 = *(void *)(v14 + 136);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, void, float))(*(void *)a1 + 424))(v17, a1, v14, &v16, a4, 0, *(float *)(v14 + 52));
      *(_DWORD *)(v14 + 48) = v17[0];
      if (v18 < 0) {
        operator delete(v17[2]);
      }
      v14 += 240;
    }
  }
}

BOOL ___ZNK2KB21LanguageModelImplBase23static_words_for_stringERKNS_6StringERKN3WTF6RefPtrINS_19DictionaryContainerEEERKNS_20LanguageModelContextEbb_block_invoke(uint64_t a1, const KB::String *a2)
{
  unint64_t v3 = *((void *)a2 + 17);
  if (*(unsigned char *)(a1 + 48)) {
    BOOL v4 = HIDWORD(v3) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  return v4
      || !KB::LanguageModel::lexicon_id_active(*(KB::LanguageModel **)(a1 + 32), v3)
      || !KB::String::equal(*(KB::String **)(a1 + 40), a2, 0);
}

uint64_t std::remove_if[abi:nn180100]<std::__wrap_iter<KB::Word *>,BOOL({block_pointer})(KB::Word const&)>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v5 = a1;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v5) & 1) == 0)
  {
    v5 += 240;
    if (v5 == a2) {
      return a2;
    }
  }
  if (v5 == a2) {
    return a2;
  }
  for (uint64_t i = v5 + 240; i != a2; i += 240)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, i) & 1) == 0)
    {
      KB::String::operator=(v5, (KB::String *)i);
      KB::ByteString::operator=((unsigned __int16 *)(v5 + 32), (unsigned __int16 *)(i + 32));
      uint64_t v7 = *(void *)(i + 48);
      *(_DWORD *)(v5 + 56) = *(_DWORD *)(i + 56);
      *(void *)(v5 + 48) = v7;
      KB::String::operator=(v5 + 64, (KB::String *)(i + 64));
      long long v8 = *(_OWORD *)(i + 96);
      long long v9 = *(_OWORD *)(i + 112);
      long long v10 = *(_OWORD *)(i + 144);
      *(_OWORD *)(v5 + 128) = *(_OWORD *)(i + 128);
      *(_OWORD *)(v5 + 144) = v10;
      *(_OWORD *)(v5 + 96) = v8;
      *(_OWORD *)(v5 + 112) = v9;
      KB::String::operator=(v5 + 160, (KB::String *)(i + 160));
      *(unsigned char *)(v5 + 192) = *(unsigned char *)(i + 192);
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign(v5 + 200, (uint64_t *)(i + 200));
      v5 += 240;
    }
  }
  return v5;
}

BOOL KB::LanguageModelImplBase::is_text_blocklisted(KB::LanguageModel *a1, int a2, int a3, const KB::LanguageModelContext *a4, uint64_t a5)
{
  KB::LanguageModel::lexicon_id_active(a1, a3);
  if (!(*(unsigned int (**)(KB::LanguageModel *))(*(void *)a1 + 16))(a1)
    || !*(void *)a5
    || **(void **)(*(void *)a5 + 8) == *(void *)(*(void *)(*(void *)a5 + 8) + 8))
  {
    return 1;
  }
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  char v21 = 0;
  v10[0] = 0;
  v10[1] = v10;
  void v10[2] = 0x9002000000;
  v10[3] = __Block_byref_object_copy__10469;
  v10[4] = __Block_byref_object_dispose__10470;
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v11, a4);
  KB::LanguageModelImplBase::tokenize_text((uint64_t)a1);
  BOOL v8 = *((unsigned char *)v19 + 24) != 0;
  _Block_object_dispose(v10, 8);
  unint64_t v22 = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v22);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v16);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v15);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v12);
  }
  _Block_object_dispose(&v18, 8);
  return v8;
}

uint64_t __Block_byref_object_copy__10469(uint64_t a1, uint64_t a2)
{
  return KB::LanguageModelContext::LanguageModelContext(a1 + 40, a2 + 40);
}

void __Block_byref_object_dispose__10470(uint64_t a1)
{
  BOOL v4 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 112));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 104));
  unsigned int v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
}

void ___ZNK2KB21LanguageModelImplBase19is_text_blocklistedERKNS_6StringEjRKNS_20LanguageModelContextERKN3WTF6RefPtrINS_19DictionaryContainerEEE27TIBlocklistSensitivityLevel_block_invoke(uint64_t a1, unsigned __int16 *a2, TITokenID *a3)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    TITokenID v6 = *a3;
    unint64_t v7 = HIDWORD(*(unint64_t *)a3);
    if ((v7 - 500) > 0xFFFFFE0C) {
      goto LABEL_22;
    }
    KB::LanguageModelImplBase::static_words_for_string(*(void *)(a1 + 48), a2, *(KB::DictionaryContainer ***)(a1 + 56), *(void *)(*(void *)(a1 + 40) + 8) + 40, 1, 1, (uint64_t)&v18);
    uint64_t v8 = v18;
    uint64_t v9 = v19;
    if (v18 == v19)
    {
      LOBYTE(v12) = 0;
    }
    else
    {
      uint64_t v10 = v18 + 240;
      do
      {
        unsigned int v11 = *(_DWORD *)(v10 - 136);
        int v12 = (v11 >> 1) & 1;
        if ((v11 & 2) == 0) {
          break;
        }
        BOOL v13 = v10 == v19;
        v10 += 240;
      }
      while (!v13);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v12;
    if (!v7)
    {
      if (v8 != v9)
      {
        for (uint64_t i = v8 + 240; i != v9; i += 240)
        {
          if (*(float *)(v8 + 48) < *(float *)(i + 48)) {
            uint64_t v8 = i;
          }
        }
      }
      if (v8 == v9) {
        TITokenID v6 = 0;
      }
      else {
        TITokenID v6 = *(TITokenID *)(v8 + 136);
      }
    }
    uint64_t v20 = (void **)&v18;
    std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](&v20);
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
    if (*(unsigned char *)(v15 + 24))
    {
      char v16 = 1;
    }
    else
    {
LABEL_22:
      char v16 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, TITokenID, uint64_t, void))(*(void *)v5 + 488))(v5, a2, v6, *(void *)(*(void *)(a1 + 40) + 8) + 40, *(unsigned int *)(a1 + 64));
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
    }
    *(unsigned char *)(v15 + 24) = v16;
    TITokenID v17 = v6;
    KB::LanguageModelContext::append((KB::LanguageModelContext *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v17, (const KB::String *)a2, 0);
  }
}

BOOL KB::LanguageModelImplBase::can_reason_about(KB::LanguageModelImplBase *this, const KB::String *a2, const TITokenID *a3)
{
  return a3->word_id != 0;
}

uint64_t KB::LanguageModelImplBase::id_for_separator(KB::LanguageModelImplBase *this)
{
  return (*(unsigned int (**)(KB::LanguageModelImplBase *))(*(void *)this + 40))(this);
}

void KB::LanguageModelImplBase::set_recipient_context(KB::LanguageModelImplBase *this, const __CFDictionary *a2)
{
  BOOL v4 = (std::mutex *)*((void *)this + 17);
  std::mutex::lock(v4);
  KB::retain_ptr<__CFDictionary const*>::operator=((const void **)this + 7, a2);

  std::mutex::unlock(v4);
}

void KB::LanguageModelImplBase::set_app_context(KB::LanguageModelImplBase *this, const __CFString *a2)
{
  BOOL v4 = (std::mutex *)*((void *)this + 17);
  std::mutex::lock(v4);
  KB::retain_ptr<__CFDictionary const*>::operator=((const void **)this + 6, a2);

  std::mutex::unlock(v4);
}

void *KB::LanguageModelImplBase::model_locales@<X0>(KB::LanguageModelImplBase *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *((void *)this + 1);
  BOOL v4 = operator new(8uLL);
  *a2 = v4;
  *BOOL v4 = v3;
  CFTypeRef result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

void KB::LanguageModelImplBase::update_lexicon_id_vector(KB::LanguageModelImplBase *this, CFArrayRef theArray)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    *((void *)this + 14) = *((void *)this + 13);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(theArray, i);
        CFStringRef v8 = (const __CFString *)MEMORY[0x1E4E79AD0](ValueAtIndex);
        if (v8)
        {
          uint64_t v24 = 0;
          uint64_t v25 = 32;
          char v26 = 0;
          if (CFStringGetCString(v8, v23, 32, 0x8000100u))
          {
            if (v26) {
              uint64_t v9 = (char *)v24;
            }
            else {
              uint64_t v9 = v23;
            }
            int v10 = TILexiconIDForLocaleIdentifier(v9);
            int v11 = v10;
            BOOL v13 = (char *)*((void *)this + 14);
            unint64_t v12 = *((void *)this + 15);
            if ((unint64_t)v13 >= v12)
            {
              uint64_t v15 = (char *)*((void *)this + 13);
              uint64_t v16 = (v13 - v15) >> 2;
              unint64_t v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 62) {
                abort();
              }
              uint64_t v18 = v12 - (void)v15;
              if (v18 >> 1 > v17) {
                unint64_t v17 = v18 >> 1;
              }
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v19 = v17;
              }
              if (v19)
              {
                unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v19);
                uint64_t v15 = (char *)*((void *)this + 13);
                BOOL v13 = (char *)*((void *)this + 14);
              }
              else
              {
                uint64_t v20 = 0;
              }
              char v21 = (_DWORD *)(v19 + 4 * v16);
              *char v21 = v11;
              uint64_t v14 = v21 + 1;
              while (v13 != v15)
              {
                int v22 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *--char v21 = v22;
              }
              *((void *)this + 13) = v21;
              *((void *)this + 14) = v14;
              *((void *)this + 15) = v19 + 4 * v20;
              if (v15) {
                operator delete(v15);
              }
            }
            else
            {
              *(_DWORD *)BOOL v13 = v10;
              uint64_t v14 = v13 + 4;
            }
            *((void *)this + 14) = v14;
          }
          free(v24);
        }
      }
    }
  }
  else
  {
    *((void *)this + 14) = *((void *)this + 13);
  }
}

unint64_t KB::LanguageModelImplBase::does_support_english(KB::LanguageModelImplBase *this)
{
  uint64_t v1 = *((void *)this + 13);
  uint64_t v2 = *((void *)this + 14);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 4;
  do
  {
    unint64_t result = TIIsLexiconIDEnglish(*(_DWORD *)(v3 - 4));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 4;
  }
  while (!v5);
  return result;
}

std::vector<unsigned int> *KB::LanguageModelImplBase::lexicon_id_vector@<X0>(KB::LanguageModelImplBase *this@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  return std::vector<unsigned int>::vector(a2, (const std::vector<unsigned int> *)((char *)this + 104));
}

uint64_t KB::LanguageModelImplBase::lexicon_id(KB::LanguageModelImplBase *this)
{
  return **((unsigned int **)this + 13);
}

KB::LanguageModelImplBase *KB::LanguageModelImplBase::LanguageModelImplBase(KB::LanguageModelImplBase *this, const KB::LanguageModelConfig *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F3F777B0;
  BOOL v4 = *(const void **)a2;
  *((void *)this + 1) = *(void *)a2;
  if (v4)
  {
    CFRetain(v4);
    *((void *)this + 1) = v4;
  }
  BOOL v5 = (const void *)*((void *)a2 + 1);
  *((void *)this + 2) = v5;
  if (v5)
  {
    CFRetain(v5);
    *((void *)this + 2) = v5;
  }
  TITokenID v6 = (const void *)*((void *)a2 + 2);
  *((void *)this + 3) = v6;
  if (v6)
  {
    CFRetain(v6);
    *((void *)this + 3) = v6;
  }
  unint64_t v7 = (const void *)*((void *)a2 + 3);
  *((void *)this + 4) = v7;
  if (v7)
  {
    CFRetain(v7);
    *((void *)this + 4) = v7;
  }
  CFStringRef v8 = (const void *)*((void *)a2 + 4);
  *((void *)this + 5) = v8;
  if (v8)
  {
    CFRetain(v8);
    *((void *)this + 5) = v8;
  }
  uint64_t v9 = (const void *)*((void *)a2 + 5);
  *((void *)this + 6) = v9;
  if (v9)
  {
    CFRetain(v9);
    *((void *)this + 6) = v9;
  }
  int v10 = (const void *)*((void *)a2 + 6);
  *((void *)this + 7) = v10;
  if (v10)
  {
    CFRetain(v10);
    *((void *)this + 7) = v10;
  }
  long long v11 = *(_OWORD *)((char *)a2 + 56);
  long long v12 = *(_OWORD *)((char *)a2 + 72);
  int v13 = *((_DWORD *)a2 + 22);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 24) = v13;
  *((_OWORD *)this + 5) = v12;
  *((_OWORD *)this + 4) = v11;
  *(_OWORD *)((char *)this + 120) = 0u;
  uint64_t v14 = operator new(0x58uLL);
  v14[1] = 0;
  unsigned __int16 v14[2] = 0;
  *uint64_t v14 = &unk_1F3F759A8;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  v14[10] = 0;
  *((void *)this + 18) = v14;
  v14[3] = 850045863;
  *((void *)this + 17) = v14 + 3;
  CFArrayRef v15 = (const __CFArray *)*((void *)a2 + 1);
  if (v15)
  {
    CFIndex Count = CFArrayGetCount(*((CFArrayRef *)a2 + 1));
    if (Count >= 1)
    {
      CFIndex v17 = Count;
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      unint64_t v20 = 0;
      CFIndex v21 = 0;
      while (1)
      {
        ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(v15, v21);
        CFStringRef v23 = (const __CFString *)MEMORY[0x1E4E79AD0](ValueAtIndex);
        if (v23) {
          break;
        }
LABEL_42:
        if (++v21 == v17) {
          goto LABEL_45;
        }
      }
      char v36 = 0;
      uint64_t v37 = 32;
      char v38 = 0;
      if (CFStringGetCString(v23, buffer, 32, 0x8000100u))
      {
        if (v38) {
          uint64_t v24 = (char *)v36;
        }
        else {
          uint64_t v24 = buffer;
        }
        int v25 = TILexiconIDForLocaleIdentifier(v24);
        int v26 = v25;
        if ((unint64_t)v19 >= v20)
        {
          uint64_t v28 = (v19 - v18) >> 2;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62) {
            abort();
          }
          if ((uint64_t)(v20 - (void)v18) >> 1 > v29) {
            unint64_t v29 = (uint64_t)(v20 - (void)v18) >> 1;
          }
          if (v20 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30) {
            unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v30);
          }
          else {
            uint64_t v31 = 0;
          }
          char v32 = (char *)(v30 + 4 * v28);
          *(_DWORD *)char v32 = v26;
          uint64_t v27 = v32 + 4;
          while (v19 != v18)
          {
            int v33 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }
          unint64_t v20 = v30 + 4 * v31;
          if (v18) {
            operator delete(v18);
          }
          uint64_t v18 = v32;
          goto LABEL_41;
        }
        *(_DWORD *)unint64_t v19 = v25;
        v19 += 4;
      }
      uint64_t v27 = v19;
LABEL_41:
      free(v36);
      unint64_t v19 = v27;
      goto LABEL_42;
    }
  }
  uint64_t v18 = 0;
  unint64_t v19 = 0;
LABEL_45:
  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((char *)this + 104, v18, (uint64_t)v19, (v19 - v18) >> 2);
  if (v18) {
    operator delete(v18);
  }
  return this;
}

void std::__shared_ptr_emplace<std::mutex>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<std::mutex>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F759A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<std::mutex>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F759A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void KB::LanguageModelImplBase::dynamic_resource_locale_identifier(CFArrayRef *this)
{
  CFArrayGetValueAtIndex(this[2], 0);

  JUMPOUT(0x1E4E79AD0);
}

void KB::LanguageModelImplBase::trial_parameters(KB::LanguageModelImplBase *this@<X0>, const __CFDictionary *a2@<X1>, uint64_t a3@<X8>)
{
}

const void **KB::LanguageModelImplBase::_set_app_context_under_mutex(const void **this, const __CFString *a2)
{
  return KB::retain_ptr<__CFDictionary const*>::operator=(this + 6, a2);
}

const void **KB::LanguageModelImplBase::_set_recipient_context_under_mutex(const void **this, const __CFDictionary *a2)
{
  return KB::retain_ptr<__CFDictionary const*>::operator=(this + 7, a2);
}

uint64_t KB::LanguageModelImplBase::_is_multilingual_mode_enabled(KB::LanguageModelImplBase *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t __Block_byref_object_copy__10563(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10564(uint64_t a1)
{
}

uint64_t KB::CandidateFilterFlags::get_filter_flag_index(uint64_t a1, int a2)
{
  if (a2 == 1) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = -1;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

void *KB::CandidateFilterFlags::CandidateFilterFlags(void *a1, int **a2)
{
  BOOL v4 = (char *)operator new(0x10uLL);
  a1[1] = v4 + 16;
  a1[2] = v4 + 16;
  *(_DWORD *)BOOL v4 = 0;
  v4[4] = 0;
  *((_DWORD *)v4 + 2) = 1;
  v4[12] = 0;
  *a1 = v4;
  BOOL v5 = *a2;
  TITokenID v6 = a2[1];
  while (v5 != v6)
  {
    int v8 = *v5++;
    int v7 = v8;
    if (v8 == 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = -1;
    }
    if (v7) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    v4[8 * v10 + 4] = 1;
  }
  return a1;
}

void *KB::CandidateFilterFlags::enable_flag(void *result, int a2)
{
  if (a2 == 1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = -1;
  }
  if (!a2) {
    uint64_t v2 = 0;
  }
  *(unsigned char *)(*result + 8 * v2 + 4) = 1;
  return result;
}

void *KB::CandidateFilterFlags::disable_flag(void *result, int a2)
{
  uint64_t v2 = 1;
  if (a2 != 1) {
    uint64_t v2 = -1;
  }
  if (!a2) {
    uint64_t v2 = 0;
  }
  *(unsigned char *)(*result + 8 * v2 + 4) = 0;
  return result;
}

std::string *KB::CandidateFilterFlags::serialize_flag_val@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::size_type v2 = this->__r_.__value_.__r.__words[0];
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if (this->__r_.__value_.__r.__words[0] != size)
  {
    do
    {
      if (*(unsigned char *)(v2 + 4)) {
        BOOL v5 = "1";
      }
      else {
        BOOL v5 = "0";
      }
      this = std::string::append(a2, v5, 1uLL);
      v2 += 8;
    }
    while (v2 != size);
  }
  return this;
}

uint64_t KB::CandidateFilterFlags::candidate_filter_flag_type(unsigned int **this)
{
  uint64_t v1 = *this;
  std::string::size_type v2 = this[1];
  if (*this == v2) {
    return 2;
  }
  uint64_t v3 = v1 + 2;
  do
  {
    int v4 = *((unsigned __int8 *)v3 - 4);
    if (*((unsigned char *)v3 - 4)) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v3 == v2;
    }
    v3 += 2;
  }
  while (!v5);
  TITokenID v6 = *this;
  while (*((unsigned char *)v6 + 4))
  {
    v6 += 2;
    if (v6 == v2) {
      return 2;
    }
  }
  if (!v4) {
    return 2;
  }
  while (1)
  {
    if (*((unsigned char *)v1 + 4))
    {
      uint64_t result = *v1;
      if (result < 2) {
        break;
      }
    }
    v1 += 2;
    if (v1 == v2) {
      return 2;
    }
  }
  return result;
}

KB::String *KB::CandidateFilterFlags::candidate_filter_flag_desc@<X0>(unsigned int **this@<X0>, KB::String *a2@<X8>)
{
  int v3 = KB::CandidateFilterFlags::candidate_filter_flag_type(this);
  int v4 = (const KB::String *)&kGenericFlagDesc;
  if (v3 == 1) {
    int v4 = (const KB::String *)&kPostLMFlagDesc;
  }
  if (v3) {
    BOOL v5 = v4;
  }
  else {
    BOOL v5 = (const KB::String *)&kPreLMFlagDesc;
  }

  return KB::String::String(a2, v5);
}

TI::CP::PathEncoder *TI::CP::PathEncoder::decode_path(TI::CP::PathEncoder *this)
{
  if (*(void *)this == *((void *)this + 1))
  {
    uint64_t v2 = *((unsigned __int8 *)this + 71);
    int v3 = (CGPoint *)((char *)this + 48);
    if (*((char *)this + 71) < 0) {
      int v3 = (CGPoint *)*((void *)this + 6);
    }
    while (1)
    {
      int v4 = (char *)this + 48;
      if ((v2 & 0x80) != 0)
      {
        int v4 = (char *)*((void *)this + 6);
        uint64_t v2 = *((void *)this + 7);
      }
      if (v3 >= (CGPoint *)&v4[v2]) {
        break;
      }
      TI::CP::Path::append(this, *v3, v3[1].y, v3[1].x, -1.0, 0.0);
      v3 += 2;
      uint64_t v2 = *((unsigned __int8 *)this + 71);
    }
  }
  return this;
}

char *TI::CP::PathEncoder::encode_path(TI::CP::PathEncoder *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 71) < 0) {
    uint64_t v2 = *((void *)this + 7);
  }
  else {
    uint64_t v2 = *((unsigned __int8 *)this + 71);
  }
  int v3 = (char *)this + 48;
  if (!v2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v11);
    uint64_t v4 = *(void *)this;
    uint64_t v5 = *((void *)this + 1);
    if (*(void *)this != v5)
    {
      do
      {
        *(_OWORD *)&v14[152] = *(_OWORD *)v4;
        int8x16_t v15 = vextq_s8(*(int8x16_t *)(v4 + 16), *(int8x16_t *)(v4 + 16), 8uLL);
        std::ostream::write();
        v4 += 48;
      }
      while (v4 != v5);
    }
    std::stringbuf::str[abi:nn180100]<std::allocator<char>>(&v9, (uint64_t)v12);
    if (*((char *)this + 71) < 0) {
      operator delete(*(void **)v3);
    }
    *(_OWORD *)int v3 = v9;
    TITokenID v6 = (void *)MEMORY[0x1E4FBA408];
    *((void *)v3 + 2) = v10;
    v11[0] = *v6;
    uint64_t v7 = v6[9];
    *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = v6[8];
    unsigned __int16 v11[2] = v7;
    v12[0] = MEMORY[0x1E4FBA470] + 16;
    if (v13 < 0) {
      operator delete((void *)v12[8]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1E4E7BBB0](v14);
  }
  return v3;
}

uint64_t PatternState::reset(uint64_t this)
{
  *(void *)(this + 208) = 0;
  return this;
}

size_t PatternState::init(PatternState *this, const char *a2)
{
  *((void *)this + 26) = 0;
  size_t result = strlcpy((char *)this, a2, 0x29uLL);
  *((_DWORD *)this + 11) = -1;
  int v4 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    uint64_t v5 = 0;
    unsigned int v6 = -1;
    do
    {
      for (; (v6 & 0x80000000) == 0; unsigned int v6 = *((_DWORD *)this + v6 + 11))
      {
        if (v4 == *((unsigned __int8 *)this + v6)) {
          break;
        }
      }
      *((_DWORD *)this + ++v5 + 11) = ++v6;
      int v4 = *((unsigned __int8 *)this + v5);
    }
    while (*((unsigned char *)this + v5));
  }
  return result;
}

uint64_t PatternState::foundAtNextChar(PatternState *this, unsigned __int8 a2)
{
  for (unsigned int i = *((_DWORD *)this + 52); (i & 0x80000000) == 0; *((_DWORD *)this + 52) = i)
  {
    if (*((unsigned __int8 *)this + i) == a2) {
      break;
    }
    unsigned int i = *((_DWORD *)this + i + 11);
  }
  uint64_t v3 = (int)i + 1;
  *((_DWORD *)this + 52) = v3;
  if (*((unsigned char *)this + v3)) {
    return 0;
  }
  ++*((_DWORD *)this + 53);
  *((_DWORD *)this + 52) = *((_DWORD *)this + v3 + 11);
  return 1;
}

void PatternList::init(PatternList *this, const char **a2, int a3)
{
  *((_DWORD *)this + 2) = a3;
  uint64_t v4 = *(void *)this;
  if (v4) {
    MEMORY[0x1E4E7BC00](v4, 0x1000C809243D869);
  }
  is_mul_ok(a3, 0xD8uLL);
  operator new[]();
}

uint64_t PatternList::foundAtNextChar(PatternList *this, unsigned __int8 a2)
{
  if (*((int *)this + 2) < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  LODWORD(v6) = -1;
  do
  {
    if (PatternState::foundAtNextChar((PatternState *)(*(void *)this + v4), a2)) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = v6;
    }
    ++v5;
    v4 += 216;
  }
  while (v5 < *((int *)this + 2));
  return v6;
}

unsigned int *PatternList::reset(unsigned int *this)
{
  uint64_t v1 = this[2];
  if ((int)v1 >= 1)
  {
    uint64_t v2 = (void *)(*(void *)this + 208);
    do
    {
      void *v2 = 0;
      v2 += 27;
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t KB::CandidateFilter_Indic::filter_candidates(KB::CandidateFilter_Indic *this, KB::Candidate **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  void v45[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (KB::Candidate *)((char *)*a2 + 888);
  if (!*(_WORD *)v6) {
    KB::Candidate::compute_string(*a2);
  }
  uint64_t result = string_has_diacritics(v6);
  if (result)
  {
    uint64_t v8 = *((void *)a4 + 2);
    if (v8) {
      atomic_fetch_add((atomic_uint *volatile)v8, 1u);
    }
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::__value_func[abi:nn180100]((uint64_t)v37, *(void *)(v8 + 8) + 112);
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v8);
    long long v9 = (__CFString *)*((void *)a4 + 7);
    uint64_t v10 = (KB::Candidate *)((char *)*a2 + 888);
    if (!*(_WORD *)v10) {
      KB::Candidate::compute_string(*a2);
    }
    unsigned int v11 = count_diacritics(v10);
    BOOL v36 = KB::Candidate::sort_key(*a2, (uint64_t)v37);
    long long v12 = *a2;
    char v13 = (uint64_t *)a2[1];
    unint64_t v14 = 0x1CAC083126E978D5 * (((char *)v13 - (char *)*a2) >> 3);
    if (v14 >= 2)
    {
      uint64_t v35 = v9;
      unsigned int v15 = 0;
      unint64_t v16 = 1;
      do
      {
        CFIndex v17 = (void *)((char *)v12 + 1000 * v16);
        if (!*((_WORD *)v17 + 444)) {
          KB::Candidate::compute_string((KB::Candidate *)((char *)v12 + 1000 * v16));
        }
        unsigned int v18 = count_diacritics((const KB::String *)(v17 + 111));
        if (v18 < v11)
        {
          unsigned int v19 = v18;
          if (KB::Candidate::should_suggest((KB::Candidate *)v17))
          {
            if (!*v17) {
              goto LABEL_22;
            }
            uint64_t v21 = 240 * *v17 - 240;
            int v22 = (int *)(v17[1] + 120);
            do
            {
              int v24 = *v22;
              v22 += 60;
              int v23 = v24;
              if (v24) {
                BOOL v25 = 1;
              }
              else {
                BOOL v25 = v21 == 0;
              }
              v21 -= 240;
            }
            while (!v25);
            if (!v23)
            {
LABEL_22:
              int v26 = *a2;
              if (!*((_WORD *)*a2 + 444)) {
                KB::Candidate::compute_string(*a2);
              }
              if (!*((_WORD *)v17 + 444)) {
                KB::Candidate::compute_string((KB::Candidate *)v17);
              }
              if (KB::strings_have_spaces_in_same_positions((KB::Candidate *)((char *)v26 + 888), (const KB::String *)(v17 + 111), v20))
              {
                BOOL v27 = KB::Candidate::sort_key((KB::Candidate *)v17, (uint64_t)v37);
                if (KB::operator==((unsigned __int16 *)v27, (unsigned __int16 *)v36))
                {
                  unsigned int v15 = v16;
                  unsigned int v11 = v19;
                }
              }
            }
          }
        }
        unint64_t v16 = (v16 + 1);
        long long v12 = *a2;
        char v13 = (uint64_t *)a2[1];
        unint64_t v14 = 0x1CAC083126E978D5 * (((char *)v13 - (char *)*a2) >> 3);
      }
      while (v14 > v16);
      if (v15)
      {
        *((_DWORD *)v12 + 250 * v15 + 186) = 0;
        if (v35)
        {
          KB::Candidate::capitalized_string((KB::Candidate *)((char *)v12 + 1000 * v15), (uint64_t)v42);
          uint64_t v28 = (const char *)v44;
          if (!v44) {
            uint64_t v28 = (const char *)v45;
          }
          if (v42[0]) {
            unint64_t v29 = v28;
          }
          else {
            unint64_t v29 = "";
          }
          KB::Candidate::capitalized_string(*a2, (uint64_t)v38);
          uint64_t v31 = (const char *)v40;
          if (!v40) {
            uint64_t v31 = (const char *)&v41;
          }
          if (v38[0]) {
            char v32 = v31;
          }
          else {
            char v32 = "";
          }
          KB::append_format(v35, (__CFString *)"[%s] boosted over [%s] by %s\n", v30, v29, v32, "boost_word_with_minimum_diacritics");
          if (v40 && v39 == 1) {
            free(v40);
          }
          if (v44 && v43 == 1) {
            free(v44);
          }
          long long v12 = *a2;
          char v13 = (uint64_t *)a2[1];
          unint64_t v14 = 0x1CAC083126E978D5 * (((char *)v13 - (char *)*a2) >> 3);
        }
      }
    }
    unint64_t v33 = 126 - 2 * __clz(v14);
    if (v13 == (uint64_t *)v12) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = v33;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,KB::Candidate *,false>((unint64_t)v12, v13, v34, 1);
    return (uint64_t)std::__function::__value_func<KB::ByteString ()(KB::String const&)>::~__value_func[abi:nn180100](v37);
  }
  return result;
}

BOOL string_has_diacritics(const KB::String *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v6, a1);
  int v10 = 0;
  do
  {
    unsigned int v1 = HIWORD(v10);
    unsigned int v2 = v7;
    if (!v7)
    {
      KB::String::compute_length(v6);
      unsigned int v2 = v7;
    }
    if (v1 >= v2) {
      break;
    }
    UChar32 v3 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v6);
  }
  while (!character_is_diacritic_or_has_diacritics(v3));
  if (v9) {
    BOOL v4 = v8 == 1;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    free(v9);
  }
  return v1 < v2;
}

uint64_t count_diacritics(const KB::String *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, a1);
  unsigned int v1 = 0;
  uint64_t v2 = 0;
  for (int i = 0; ; v1 = HIWORD(i))
  {
    unsigned int v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      unsigned int v3 = v8;
    }
    if (v1 >= v3) {
      break;
    }
    UChar32 v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
    uint64_t v2 = (v2 + character_is_diacritic_or_has_diacritics(v4));
  }
  if (v10) {
    BOOL v5 = v9 == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v10);
  }
  return v2;
}

BOOL character_is_diacritic_or_has_diacritics(UChar32 a1)
{
  uint64_t v2 = 1;
  if (!u_getIntPropertyValue(a1, UCHAR_TRAIL_CANONICAL_COMBINING_CLASS)) {
    return ((1 << u_charType(a1)) & 0x4000050) != 0;
  }
  return v2;
}

const char *KB::CandidateFilter_Indic::filter_description(KB::CandidateFilter_Indic *this)
{
  return "CandidateFilter_Indic";
}

void KB::CandidateFilter_Indic::~CandidateFilter_Indic(KB::CandidateFilter_Indic *this)
{
}

BOOL search_result_preserves_diacritics_of_input_string(const KB::String *a1, const KB::String *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *((unsigned __int16 *)this + 2);
  if (!*((_WORD *)this + 2))
  {
    KB::String::compute_length((unsigned __int16 *)this);
    unsigned int v4 = *((unsigned __int16 *)this + 2);
  }
  KB::String::String((KB::String *)v15, a1);
  int v17 = 0;
  KB::String::String((KB::String *)v12, this);
  int v14 = 0;
  if (v4)
  {
    BOOL v5 = 0;
    for (unsigned int i = 0; i != v4; v5 = i >= v4)
    {
      UChar32 v7 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v12);
      int v8 = u_charType(v7);
      do
      {
        UChar32 v9 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v15);
        int v10 = u_charType(v9);
      }
      while (v8 != 6 && v10 == 6);
      if (v8 == 6 && v7 != v9 && (v7 != 2306 || v9 != 2305)) {
        break;
      }
      ++i;
    }
  }
  else
  {
    BOOL v5 = 1;
  }
  if (v13 && v12[6] == 1) {
    free(v13);
  }
  if (v16 && v15[6] == 1) {
    free(v16);
  }
  return v5;
}

BOOL TI::CP::ContextualShapeRecognizer::remove_shapes_older_than(sqlite3 **this, double a2)
{
  return TI::CP::ShapeStore::remove_shapes_older_than(this + 26, a2);
}

uint64_t TI::CP::TIPathRecognizerInterface::usage_count(TI::CP::TIPathRecognizerInterface *this)
{
  return 0;
}

void TI::CP::ContextualShapeRecognizer::store_shapes(TI::CP::ContextualShapeRecognizer *this)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v16 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  uint64_t v2 = (uint64_t **)*((void *)this + 38);
  if (v2)
  {
    do
    {
      if ((v2[20] & 9) != 0) {
        unsigned int v3 = (uint64_t *)&v16;
      }
      else {
        unsigned int v3 = &v19;
      }
      std::vector<TI::CP::ShapeRecord>::push_back[abi:nn180100](v3, (uint64_t)(v2 + 5));
      uint64_t v2 = (uint64_t **)*v2;
    }
    while (v2);
    uint64_t v4 = v19;
    BOOL v5 = v16;
    uint64_t v6 = v17;
    unint64_t v7 = 0xF0F0F0F0F0F0F0F1 * ((v20 - v19) >> 3);
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v5 = 0;
    uint64_t v6 = 0;
    LODWORD(v7) = 0;
  }
  if ((int)v7 >= 1)
  {
    unint64_t v8 = (int)(float)(*((float *)this + 60) * (float)(int)v7);
    if (0xF0F0F0F0F0F0F0F1 * (v6 - v5) < v8)
    {
      unint64_t v9 = v7;
      do
      {
        uint64_t v10 = v4 + 136 * (int)arc4random_uniform(v9);
        std::vector<TI::CP::ShapeRecord>::push_back[abi:nn180100]((uint64_t *)&v16, v10);
        uint64_t v11 = v4 + 136 * (v9 - 1);
        *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
        std::string::operator=((std::string *)(v10 + 8), (const std::string *)(v11 + 8));
        TI::CP::Path::operator=((char **)(v10 + 32), (const void **)(v11 + 32));
        std::string::operator=((std::string *)(v10 + 80), (const std::string *)(v11 + 80));
        long long v12 = *(_OWORD *)(v11 + 116);
        *(_OWORD *)(v10 + 104) = *(_OWORD *)(v11 + 104);
        *(_OWORD *)(v10 + 116) = v12;
        BOOL v5 = v16;
        uint64_t v6 = v17;
        if (v9 < 2) {
          break;
        }
        --v9;
      }
      while (0xF0F0F0F0F0F0F0F1 * (v17 - v16) < v8);
    }
  }
  if (v5 != v6)
  {
    int v13 = *((_DWORD *)this + 70);
    int v14 = v5 + 10;
    do
    {
      if (v13 <= 9999)
      {
        TI::CP::ShapeStore::store_shape((uint64_t)this + 208, (uint64_t *)v14 - 9, (const void **)v14, *((_DWORD *)v14 + 6), *((double *)v14 + 4));
        int v13 = *((_DWORD *)this + 70) + 1;
        *((_DWORD *)this + 70) = v13;
      }
      unsigned int v15 = v14 + 7;
      v14 += 17;
    }
    while (v15 != v6);
  }
  int v22 = &v16;
  std::vector<TI::CP::ShapeRecord>::__destroy_vector::operator()[abi:nn180100]((void ***)&v22);
  unint64_t v16 = (void **)&v19;
  std::vector<TI::CP::ShapeRecord>::__destroy_vector::operator()[abi:nn180100](&v16);
}

void std::vector<TI::CP::ShapeRecord>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::__destroy_at[abi:nn180100]<TI::CP::ShapeRecord,0>(v4);
      }
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void TI::CP::ContextualShapeRecognizer::remove_text_usage(int8x8_t *this, const KB::String *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v19, " \t\n");
  KB::String::trim(a2, (const KB::String *)v19, (uint64_t)&v21);
  uint64_t v4 = (char *)v22;
  if (!v22) {
    uint64_t v4 = &v23;
  }
  if ((_WORD)v21) {
    BOOL v5 = v4;
  }
  else {
    BOOL v5 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(__p, v5);
  if (v22 && BYTE6(v21) == 1) {
    free(v22);
  }
  if (v20 && v19[6] == 1) {
    free(v20);
  }
  uint64_t v6 = this + 36;
  unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::find<std::string>(&this[36], (uint64_t)__p);
  if (v7)
  {
    int8x8_t v8 = this[37];
    unint64_t v9 = *((void *)v7 + 1);
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v8) {
        v9 %= *(void *)&v8;
      }
    }
    else
    {
      v9 &= *(void *)&v8 - 1;
    }
    uint64_t v11 = *(unsigned __int8 **)(*(void *)v6 + 8 * v9);
    do
    {
      long long v12 = (int8x8_t *)v11;
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11 != v7);
    if (v12 == &this[38]) {
      goto LABEL_30;
    }
    unint64_t v13 = (unint64_t)v12[1];
    if (v10.u32[0] > 1uLL)
    {
      if (v13 >= *(void *)&v8) {
        v13 %= *(void *)&v8;
      }
    }
    else
    {
      v13 &= *(void *)&v8 - 1;
    }
    if (v13 != v9)
    {
LABEL_30:
      if (!*(void *)v7) {
        goto LABEL_31;
      }
      unint64_t v14 = *(void *)(*(void *)v7 + 8);
      if (v10.u32[0] > 1uLL)
      {
        if (v14 >= *(void *)&v8) {
          v14 %= *(void *)&v8;
        }
      }
      else
      {
        v14 &= *(void *)&v8 - 1;
      }
      if (v14 != v9) {
LABEL_31:
      }
        *(void *)(*(void *)v6 + 8 * v9) = 0;
    }
    int8x8_t v15 = *(int8x8_t *)v7;
    if (*(void *)v7)
    {
      unint64_t v16 = *(void *)(*(void *)&v15 + 8);
      if (v10.u32[0] > 1uLL)
      {
        if (v16 >= *(void *)&v8) {
          v16 %= *(void *)&v8;
        }
      }
      else
      {
        v16 &= *(void *)&v8 - 1;
      }
      if (v16 != v9)
      {
        *(void *)(*(void *)v6 + 8 * v16) = v12;
        int8x8_t v15 = *(int8x8_t *)v7;
      }
    }
    *long long v12 = v15;
    *(void *)unint64_t v7 = 0;
    --*(void *)&this[39];
    uint64_t v21 = v7;
    int v22 = &this[38];
    char v23 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>>>>::reset[abi:nn180100]((uint64_t)&v21);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  unsigned int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,TI::CP::ShapeRecord>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,TI::CP::ShapeRecord>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  unsigned int v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

void TI::CP::ContextualShapeRecognizer::text_accepted_from_UI(TI::CP::ContextualShapeRecognizer *this, const KB::String *a2, const KB::String *a3, unsigned int a4, int a5)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 8) != *((void *)this + 9))
  {
    KB::String::String((KB::String *)&v23, " \t\n");
    KB::String::trim(a2, (const KB::String *)&v23, (uint64_t)v26);
    if (v24) {
      BOOL v9 = BYTE6(v23) == 1;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      free(v24);
    }
    KB::String::String((KB::String *)&v23, " ");
    KB::String::find_last_of((KB::String *)&v19, (const KB::String *)v26, (const KB::String *)&v23);
    if (v24 && BYTE6(v23) == 1) {
      free(v24);
    }
    int v10 = v26[0];
    if (v28) {
      uint64_t v11 = v28;
    }
    else {
      uint64_t v11 = v29;
    }
    char v23 = v11;
    LODWORD(v24) = v26[0];
    HIDWORD(v24) = v26[0];
    int v25 = 0;
    KB::String::iterator::initialize((uint64_t *)&v23);
    if (DWORD2(v19) != v24)
    {
      *(_OWORD *)uint64_t v21 = v19;
      uint64_t v22 = v20;
      KB::String::iterator::operator++((uint64_t *)v21);
      int8x8_t v15 = v11;
      int v16 = v10;
      int v17 = v10;
      int v18 = 0;
      KB::String::iterator::initialize((uint64_t *)&v15);
      KB::String::String((KB::String *)&v23, (const KB::String::iterator *)v21, (const KB::String::iterator *)&v15);
      KB::String::operator=((uint64_t)v26, (KB::String *)&v23);
      if (v24)
      {
        if (BYTE6(v23) == 1) {
          free(v24);
        }
      }
    }
    KB::String::String((KB::String *)v21, " \t\n");
    KB::String::trim(a3, (const KB::String *)v21, (uint64_t)&v23);
    if (v21[1] && BYTE6(v21[0]) == 1) {
      free(v21[1]);
    }
    if (a5) {
      int v12 = 8;
    }
    else {
      int v12 = 2;
    }
    if ((_WORD)v23)
    {
      unint64_t v13 = (const char *)(v28 ? v28 : v29);
      unint64_t v14 = *((void *)a3 + 1) ? (const char *)*((void *)a3 + 1) : (char *)a3 + 16;
      if (strcmp(v13, v14))
      {
        (*(void (**)(TI::CP::ContextualShapeRecognizer *, void **))(*(void *)this + 96))(this, &v23);
        int v12 = 1;
      }
    }
    if (*((int *)this + 70) <= 9999) {
      TI::CP::ContextualShapeRecognizer::store_path_with_correct_word((uint64_t)this, v26, v12);
    }
    *((void *)this + 9) = *((void *)this + 8);
    *((void *)this + 12) = *((void *)this + 11);
    if (v24 && BYTE6(v23) == 1) {
      free(v24);
    }
    if (v28)
    {
      if (v27 == 1) {
        free(v28);
      }
    }
  }
}

void TI::CP::ContextualShapeRecognizer::store_path_with_correct_word(uint64_t a1, unsigned __int16 *a2, int a3)
{
  if (*a2 < 2u) {
    return;
  }
  BOOL v5 = (const std::vector<unsigned int> *)(a1 + 64);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 4) < 2) {
    return;
  }
  if (*((void *)a2 + 1)) {
    unint64_t v7 = (char *)*((void *)a2 + 1);
  }
  else {
    unint64_t v7 = (char *)(a2 + 8);
  }
  std::string::basic_string[abi:nn180100]<0>(v52, v7);
  TI::CP::ShapeRecord::ShapeRecord((uint64_t)&v45, (long long *)v52, v5, a3);
  int v8 = SHIBYTE(v53);
  BOOL v9 = (const std::string::value_type *)v52[0];
  int v10 = v52[1];
  if (v53 >= 0) {
    uint64_t v11 = (uint64_t *)v52;
  }
  else {
    uint64_t v11 = (uint64_t *)v52[0];
  }
  if (v53 >= 0) {
    unint64_t v12 = HIBYTE(v53);
  }
  else {
    unint64_t v12 = (unint64_t)v52[1];
  }
  unint64_t v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v11, v12);
  unint64_t v14 = v13;
  unint64_t v15 = *(void *)(a1 + 296);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    unint64_t v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v3 = v13;
      if (v13 >= v15) {
        unint64_t v3 = v13 % v15;
      }
    }
    else
    {
      unint64_t v3 = (v15 - 1) & v13;
    }
    int v18 = *(uint64_t ***)(*(void *)(a1 + 288) + 8 * v3);
    if (v18)
    {
      for (unsigned int i = *v18; i; unsigned int i = (uint64_t *)*i)
      {
        unint64_t v20 = i[1];
        if (v20 == v14)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)v52)) {
            goto LABEL_88;
          }
        }
        else
        {
          if (v17 > 1)
          {
            if (v20 >= v15) {
              v20 %= v15;
            }
          }
          else
          {
            v20 &= v15 - 1;
          }
          if (v20 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v21 = (void *)(a1 + 304);
  uint64_t v22 = (char *)operator new(0xB0uLL);
  v54[0] = v22;
  v54[1] = a1 + 304;
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = v14;
  char v23 = (std::string *)(v22 + 16);
  if (v8 < 0)
  {
    std::string::__init_copy_ctor_external(v23, v9, (std::string::size_type)v10);
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)v52;
    *((void *)v22 + 4) = v53;
  }
  *((void *)v22 + 21) = 0;
  *(_OWORD *)(v22 + 152) = 0u;
  *(_OWORD *)(v22 + 136) = 0u;
  *(_OWORD *)(v22 + 120) = 0u;
  *(_OWORD *)(v22 + 104) = 0u;
  *(_OWORD *)(v22 + 88) = 0u;
  *(_OWORD *)(v22 + 72) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  char v55 = 1;
  float v24 = (float)(unint64_t)(*(void *)(a1 + 312) + 1);
  float v25 = *(float *)(a1 + 320);
  if (!v15 || (float)(v25 * (float)v15) < v24)
  {
    BOOL v26 = 1;
    if (v15 >= 3) {
      BOOL v26 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v15);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      int8x8_t prime = (int8x8_t)v28;
    }
    else {
      int8x8_t prime = (int8x8_t)v27;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v15 = *(void *)(a1 + 296);
    if (*(void *)&prime > v15) {
      goto LABEL_44;
    }
    if (*(void *)&prime < v15)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 312) / *(float *)(a1 + 320));
      if (v15 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (*(void *)&prime <= v36) {
        int8x8_t prime = (int8x8_t)v36;
      }
      if (*(void *)&prime >= v15)
      {
        unint64_t v15 = *(void *)(a1 + 296);
      }
      else
      {
        if (prime)
        {
LABEL_44:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v30 = operator new(8 * *(void *)&prime);
          uint64_t v31 = *(void **)(a1 + 288);
          *(void *)(a1 + 288) = v30;
          if (v31) {
            operator delete(v31);
          }
          uint64_t v32 = 0;
          *(int8x8_t *)(a1 + 296) = prime;
          do
            *(void *)(*(void *)(a1 + 288) + 8 * v32++) = 0;
          while (*(void *)&prime != v32);
          unint64_t v33 = (void *)*v21;
          if (*v21)
          {
            unint64_t v34 = v33[1];
            uint8x8_t v35 = (uint8x8_t)vcnt_s8(prime);
            v35.i16[0] = vaddlv_u8(v35);
            if (v35.u32[0] > 1uLL)
            {
              if (v34 >= *(void *)&prime) {
                v34 %= *(void *)&prime;
              }
            }
            else
            {
              v34 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 288) + 8 * v34) = v21;
            char v39 = (void *)*v33;
            if (*v33)
            {
              do
              {
                unint64_t v40 = v39[1];
                if (v35.u32[0] > 1uLL)
                {
                  if (v40 >= *(void *)&prime) {
                    v40 %= *(void *)&prime;
                  }
                }
                else
                {
                  v40 &= *(void *)&prime - 1;
                }
                if (v40 != v34)
                {
                  uint64_t v41 = *(void *)(a1 + 288);
                  if (!*(void *)(v41 + 8 * v40))
                  {
                    *(void *)(v41 + 8 * v40) = v33;
                    goto LABEL_69;
                  }
                  *unint64_t v33 = *v39;
                  void *v39 = **(void **)(*(void *)(a1 + 288) + 8 * v40);
                  **(void **)(*(void *)(a1 + 288) + 8 * v40) = v39;
                  char v39 = v33;
                }
                unint64_t v40 = v34;
LABEL_69:
                unint64_t v33 = v39;
                char v39 = (void *)*v39;
                unint64_t v34 = v40;
              }
              while (v39);
            }
          }
          unint64_t v15 = (unint64_t)prime;
          goto LABEL_73;
        }
        unint64_t v44 = *(void **)(a1 + 288);
        *(void *)(a1 + 288) = 0;
        if (v44) {
          operator delete(v44);
        }
        unint64_t v15 = 0;
        *(void *)(a1 + 296) = 0;
      }
    }
LABEL_73:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v3 = v14 % v15;
      }
      else {
        unint64_t v3 = v14;
      }
    }
    else
    {
      unint64_t v3 = (v15 - 1) & v14;
    }
  }
  uint64_t v42 = *(void **)(*(void *)(a1 + 288) + 8 * v3);
  unsigned int i = (uint64_t *)v54[0];
  if (v42)
  {
    *(void *)v54[0] = *v42;
  }
  else
  {
    *(void *)v54[0] = *(void *)(a1 + 304);
    *(void *)(a1 + 304) = i;
    *(void *)(*(void *)(a1 + 288) + 8 * v3) = v21;
    if (!*i) {
      goto LABEL_87;
    }
    unint64_t v43 = *(void *)(*i + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v43 >= v15) {
        v43 %= v15;
      }
    }
    else
    {
      v43 &= v15 - 1;
    }
    uint64_t v42 = (void *)(*(void *)(a1 + 288) + 8 * v43);
  }
  *uint64_t v42 = i;
LABEL_87:
  v54[0] = 0;
  ++*(void *)(a1 + 312);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>>>>::reset[abi:nn180100]((uint64_t)v54);
LABEL_88:
  *((_DWORD *)i + 10) = v45;
  std::string::operator=((std::string *)i + 2, &v46);
  TI::CP::Path::operator=((char **)i + 9, (const void **)v47);
  std::string::operator=((std::string *)i + 5, &__p);
  *((_OWORD *)i + 9) = v51[0];
  *(_OWORD *)((char *)i + 156) = *(_OWORD *)((char *)v51 + 12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v48)
  {
    unint64_t v49 = v48;
    operator delete(v48);
  }
  if (v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[0]);
  }
}

void TI::CP::ContextualShapeRecognizer::generate_candidates(uint64_t a1, uint64_t *a2, int a3, double a4, __n128 a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 328))
  {
    a4 = *(double *)(*(void *)(a1 + 16) + 16);
    *(unsigned char *)(a1 + 272) = 1;
    *(double *)(a1 + 264) = a4;
  }
  TI::CP::ContextualShapeRecognizer::hypotheses_for_path((TI::CP::ContextualShapeRecognizer *)a1, (__n128 **)(a1 + 64), (unint64_t *)&__p, a4, a5);
  unint64_t v7 = (int *)__p;
  int v8 = v29;
  if (v29 != __p)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      KB::String::String((KB::String *)v32, (const KB::String *)v7);
      double v10 = *((double *)v7 + 4);
      int v35 = v7[10];
      double v34 = v10;
      double v11 = v10;
      KB::String::String((KB::String *)&valuePtr, (const KB::String *)v32);
      KB::Candidate::Candidate((KB::Candidate *)v30, (const KB::String *)&valuePtr, 0);
      if (v37 && BYTE6(valuePtr) == 1) {
        free(v37);
      }
      float v12 = fmin(1.0 / (v11 / 100.0), 1.0);
      float v31 = logf(v12);
      unint64_t v13 = (KB::Candidate *)a2[1];
      unint64_t v14 = a2[2];
      if ((unint64_t)v13 >= v14)
      {
        uint64_t v16 = 0x1CAC083126E978D5 * (((uint64_t)v13 - *a2) >> 3);
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) > 0x4189374BC6A7EFLL) {
          abort();
        }
        unint64_t v18 = 0x1CAC083126E978D5 * ((uint64_t)(v14 - *a2) >> 3);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x20C49BA5E353F7) {
          *(double *)&unint64_t v19 = 1.95094476e-307;
        }
        else {
          unint64_t v19 = v17;
        }
        unint64_t v40 = a2 + 2;
        if (*(double *)&v19 == 0.0) {
          uint64_t v20 = 0;
        }
        else {
          *(double *)&unint64_t v19 = COERCE_DOUBLE(std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v19));
        }
        uint64_t v21 = (char *)(v19 + 1000 * v16);
        double valuePtr = *(double *)&v19;
        uint8x8_t v37 = v21;
        unint64_t v39 = v19 + 1000 * v20;
        KB::Candidate::Candidate((KB::Candidate *)v21, (const KB::Candidate *)v30);
        uint64_t v38 = v21 + 1000;
        std::vector<KB::Candidate>::__swap_out_circular_buffer(a2, &valuePtr);
        unint64_t v15 = (char *)a2[1];
        std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&valuePtr);
      }
      else
      {
        unint64_t v15 = (char *)KB::Candidate::Candidate(v13, (const KB::Candidate *)v30) + 1000;
      }
      a2[1] = (uint64_t)v15;
      if (a3 >= 1)
      {
        CFMutableStringRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        double valuePtr = (double)v35;
        CFNumberRef v23 = CFNumberCreate(v9, kCFNumberDoubleType, &valuePtr);
        CFDictionarySetValue(Mutable, @"num_records", v23);
        if (v23) {
          CFRelease(v23);
        }
        double valuePtr = v12;
        CFNumberRef v24 = CFNumberCreate(v9, kCFNumberDoubleType, &valuePtr);
        CFDictionarySetValue(Mutable, @"final_score", v24);
        if (v24) {
          CFRelease(v24);
        }
        CFDictionarySetValue(Mutable, @"source", @"shapematching");
        KB::Candidate::add_sources_info((KB::Candidate *)v30, @"shapematching", Mutable);
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      KB::Candidate::~Candidate((KB::Candidate *)v30);
      if (v33 && v32[6] == 1) {
        free(v33);
      }
      v7 += 12;
    }
    while (v7 != v8);
    int v8 = (int *)__p;
  }
  if (v8)
  {
    float v25 = v29;
    BOOL v26 = v8;
    if (v29 != v8)
    {
      do
      {
        unint64_t v27 = (void *)*((void *)v25 - 5);
        if (v27)
        {
          if (*((unsigned char *)v25 - 42) == 1) {
            free(v27);
          }
        }
        v25 -= 12;
      }
      while (v25 != v8);
      BOOL v26 = __p;
    }
    unint64_t v29 = v8;
    operator delete(v26);
  }
}

void TI::CP::ContextualShapeRecognizer::hypotheses_for_path(TI::CP::ContextualShapeRecognizer *this@<X0>, __n128 **a2@<X1>, unint64_t *a3@<X8>, double a4@<D0>, __n128 a5@<Q1>)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  shape_as_simd_double3((const TI::CP::Path *)&v117, *a2, a2[1], a4, a5);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  unint64_t v9 = ((double)v8 * 1.4);
  if (v8 <= v9) {
    int v10 = 0;
  }
  else {
    int v10 = v8 - v9;
  }
  TI::CP::ShapeStore::recall_shapes((TI::CP::ContextualShapeRecognizer *)((char *)this + 208), v10, v9 - 1431655765 * (a2[1] - *a2), &v115);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v11 = v115;
  uint64_t v12 = v116;
  if (v115 != v116)
  {
    unint64_t v101 = a3 + 2;
    uint64_t v99 = a3;
    uint64_t v100 = v116;
    do
    {
      LODWORD(v108) = *(_DWORD *)v11;
      if (*(char *)(v11 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)(v11 + 8), *(void *)(v11 + 16));
      }
      else
      {
        long long v13 = *(_OWORD *)(v11 + 8);
        v109.__r_.__value_.__r.__words[2] = *(void *)(v11 + 24);
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v13;
      }
      std::vector<TI::CP::PathSample>::vector(&v110, v11 + 32);
      std::vector<unsigned int>::vector(&v112, (const std::vector<unsigned int> *)(v11 + 56));
      if (*(char *)(v11 + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)(v11 + 80), *(void *)(v11 + 88));
      }
      else
      {
        long long v14 = *(_OWORD *)(v11 + 80);
        v113.__r_.__value_.__r.__words[2] = *(void *)(v11 + 96);
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v14;
      }
      long long v15 = *(_OWORD *)(v11 + 104);
      *(_OWORD *)((char *)v114 + 12) = *(_OWORD *)(v11 + 116);
      __n128 v16 = *(__n128 *)((char *)v114 + 12);
      v114[0] = v15;
      shape_as_simd_double3((const TI::CP::Path *)&__p, (__n128 *)v110, v111, *(double *)&v15, v16);
      unint64_t v17 = (float64x2_t *)v117;
      unint64_t v18 = (float64x2_t *)__p;
      uint64_t v19 = v118 - (unsigned char *)v117;
      if (v118 != v117 && v107 != __p)
      {
        uint64_t v20 = v107 - (unsigned char *)__p;
        if (v107 - (unsigned char *)__p < 0) {
          goto LABEL_125;
        }
        unint64_t v102 = v19 >> 5;
        unint64_t v103 = v20 >> 5;
        __srUChar32 c = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v20 >> 5);
        memset_pattern16(__src, &unk_1E4154E90, 8 * (v20 >> 5));
        if ((unint64_t)v19 >= 0x20)
        {
          if (v19 < 0) {
            goto LABEL_125;
          }
          uint64_t v21 = (char *)operator new(24 * v102);
          uint64_t v23 = 0;
          size_t v24 = 8 * v103;
          unint64_t v104 = (uint64_t)(8 * v103) >> 3;
          do
          {
            float v25 = &v21[v23];
            *(void *)float v25 = 0;
            *((void *)v25 + 1) = 0;
            *((void *)v25 + 2) = 0;
            if ((unint64_t)v20 >= 0x20)
            {
              if ((v24 & 0x8000000000000000) != 0) {
                goto LABEL_125;
              }
              uint64_t v26 = v20;
              unint64_t v27 = &v21[v23];
              unint64_t v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v104);
              *(void *)unint64_t v27 = v28;
              *((void *)v27 + 1) = v28;
              *((void *)v27 + 2) = &v28[8 * v29];
              memmove(v28, __src, v24);
              *((void *)v27 + 1) = &v28[8 * v104];
              uint64_t v20 = v26;
            }
            v23 += 24;
          }
          while (24 * v102 != v23);
          a3 = v99;
          uint64_t v12 = v100;
          uint64_t v22 = &v21[24 * v102];
        }
        else
        {
          uint64_t v21 = 0;
          uint64_t v22 = 0;
        }
        if (__src) {
          operator delete(__src);
        }
        uint64_t v30 = 0;
        uint64_t v32 = v102;
        uint64_t v31 = v103;
        if (v103 <= 1) {
          uint64_t v31 = 1;
        }
        if (v102 <= 1) {
          uint64_t v32 = 1;
        }
        do
        {
          uint64_t v33 = 0;
          double v34 = &v21[24 * (v30 - 1)];
          uint64_t v35 = *(void *)&v21[24 * v30];
          do
          {
            if (v30)
            {
              double v36 = *(double *)(*(void *)v34 + 8 * v33);
              if (v33)
              {
                unsigned int v37 = v33 - 1;
                if (*(double *)(v35 + 8 * (v33 - 1)) < v36) {
                  double v36 = *(double *)(v35 + 8 * v37);
                }
                if (*(double *)(*(void *)v34 + 8 * v37) < v36) {
                  double v36 = *(double *)(*(void *)v34 + 8 * v37);
                }
              }
            }
            else if (v33)
            {
              double v36 = fmin(*(double *)(v35 + 8 * (v33 - 1)), 0.0);
            }
            else
            {
              double v36 = 0.0;
            }
            float64x2_t v38 = vsubq_f64(v17[2 * v30], v18[2 * v33]);
            *(double *)(v35 + 8 * v33++) = sqrt(vaddvq_f64(vmulq_f64(v38, v38))) + v36;
          }
          while (v31 != v33);
          ++v30;
        }
        while (v30 != v32);
        double v39 = *(double *)(*(void *)&v21[24 * v102 - 24] + 8 * v103 - 8);
        if (v22 != v21)
        {
          unint64_t v40 = v22;
          do
          {
            uint64_t v42 = (void *)*((void *)v40 - 3);
            v40 -= 24;
            uint64_t v41 = v42;
            if (v42)
            {
              *((void *)v22 - 2) = v41;
              operator delete(v41);
            }
            uint64_t v22 = v40;
          }
          while (v40 != v21);
        }
        operator delete(v21);
        if (v39 < 440.0)
        {
          if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v43 = &v109;
          }
          else {
            unint64_t v43 = (std::string *)v109.__r_.__value_.__r.__words[0];
          }
          KB::String::String((KB::String *)v127, (const char *)v43);
          KB::String::String((KB::String *)v129, (const KB::String *)v127);
          double v131 = v39;
          if (v128 && v127[6] == 1) {
            free(v128);
          }
          int v132 = -252645135 * ((unint64_t)(v116 - v115) >> 3);
          unint64_t v44 = *a3;
          unint64_t v45 = a3[1];
          if (*a3 == v45)
          {
            unint64_t v46 = *a3;
          }
          else
          {
            unint64_t v46 = *a3;
            while (*(double *)(v46 + 32) <= v131)
            {
              v46 += 48;
              if (v46 == v45)
              {
                unint64_t v46 = a3[1];
                break;
              }
            }
          }
          int64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v44) >> 4);
          if (v45 >= *v101)
          {
            unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v44) >> 4) + 1;
            if (v61 > 0x555555555555555) {
LABEL_125:
            }
              abort();
            if (0x5555555555555556 * ((uint64_t)(*v101 - v44) >> 4) > v61) {
              unint64_t v61 = 0x5555555555555556 * ((uint64_t)(*v101 - v44) >> 4);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v101 - v44) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v62 = 0x555555555555555;
            }
            else {
              unint64_t v62 = v61;
            }
            double v122 = v101;
            if (v62)
            {
              unint64_t v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TI::CP::PathSample>>(v62);
            }
            else
            {
              unint64_t v64 = 0;
              uint64_t v63 = 0;
            }
            int64x2_t v67 = (KB::String *)&v64[16 * ((uint64_t)(v46 - v44) >> 4)];
            uint64_t v119 = v64;
            *(void *)&long long v120 = v67;
            *((void *)&v120 + 1) = v67;
            int64x2_t v121 = &v64[48 * v63];
            if (v47 == v63)
            {
              if ((uint64_t)(v46 - v44) < 1)
              {
                uint64_t v69 = v11;
                if (v46 == v44) {
                  unint64_t v70 = 1;
                }
                else {
                  unint64_t v70 = 0x5555555555555556 * ((uint64_t)(v46 - v44) >> 4);
                }
                unint64_t v71 = v70 >> 2;
                unint64_t v126 = v122;
                unint64_t v72 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TI::CP::PathSample>>(v70);
                uint64_t v74 = v73;
                uint64_t v75 = &v72[48 * v71];
                uint64_t v76 = v120;
                if (*((void *)&v120 + 1) == (void)v120)
                {
                  int64x2_t v81 = vdupq_n_s64(v120);
                  uint64_t v77 = v75;
                }
                else
                {
                  uint64_t v77 = &v75[*((void *)&v120 + 1) - v120];
                  uint64_t v78 = (uint64_t)v75;
                  do
                  {
                    *(_DWORD *)uint64_t v78 = 0x100000;
                    *(_WORD *)(v78 + 4) = 0;
                    *(unsigned char *)(v78 + 6) = 0;
                    *(void *)(v78 + 8) = 0;
                    uint64_t v79 = KB::String::operator=(v78, (KB::String *)v76);
                    uint64_t v80 = *(void *)(v76 + 32);
                    *(_DWORD *)(v79 + 40) = *(_DWORD *)(v76 + 40);
                    *(void *)(v79 + 32) = v80;
                    v76 += 48;
                    uint64_t v78 = v79 + 48;
                  }
                  while ((char *)v78 != v77);
                  int64x2_t v81 = (int64x2_t)v120;
                }
                double v82 = v119;
                uint64_t v83 = v121;
                uint64_t v119 = v72;
                *(void *)&long long v120 = v75;
                int64x2_t v124 = v81;
                *((void *)&v120 + 1) = v77;
                int64x2_t v121 = &v72[48 * v74];
                uint64_t v123 = v82;
                uint64_t v125 = v83;
                std::__split_buffer<TI::CP::ContextualShapeRecognizer::recognition_hypothesis>::~__split_buffer((uint64_t)&v123);
                int64x2_t v67 = (KB::String *)*((void *)&v120 + 1);
                uint64_t v11 = v69;
                uint64_t v12 = v100;
              }
              else
              {
                uint64_t v68 = v47 + 2;
                if (v47 >= -1) {
                  uint64_t v68 = v47 + 1;
                }
                int64x2_t v67 = (KB::String *)((char *)v67 - 48 * (v68 >> 1));
                *(void *)&long long v120 = v67;
                *((void *)&v120 + 1) = v67;
              }
            }
            uint64_t v84 = KB::String::String(v67, (const KB::String *)v129);
            double v85 = v131;
            *((_DWORD *)v84 + 10) = v132;
            *((double *)v84 + 4) = v85;
            unint64_t v86 = v120;
            uint64_t v87 = *((void *)&v120 + 1) + 48;
            *((void *)&v120 + 1) += 48;
            unint64_t v88 = *a3;
            if (*a3 != v46)
            {
              uint64_t v89 = v11;
              uint64_t v90 = 0;
              do
              {
                *(_DWORD *)(v86 + v90 - 48) = 0x100000;
                uint64_t v91 = v86 + v90 - 48;
                *(_WORD *)(v91 + 4) = 0;
                *(unsigned char *)(v91 + 6) = 0;
                *(void *)(v91 + 8) = 0;
                uint64_t v92 = KB::String::operator=(v91, (KB::String *)(v46 + v90 - 48));
                uint64_t v93 = *(void *)(v46 + v90 - 16);
                *(_DWORD *)(v92 + 40) = *(_DWORD *)(v46 + v90 - 8);
                *(void *)(v92 + 32) = v93;
                v90 -= 48;
              }
              while (v46 + v90 != v88);
              v86 += v90;
              uint64_t v87 = *((void *)&v120 + 1);
              uint64_t v11 = v89;
            }
            *(void *)&long long v120 = v86;
            unint64_t v94 = a3[1];
            if (v94 != v46)
            {
              do
              {
                *(_DWORD *)uint64_t v87 = 0x100000;
                *(_WORD *)(v87 + 4) = 0;
                *(unsigned char *)(v87 + 6) = 0;
                *(void *)(v87 + 8) = 0;
                uint64_t v95 = KB::String::operator=(v87, (KB::String *)v46);
                uint64_t v96 = *(void *)(v46 + 32);
                *(_DWORD *)(v95 + 40) = *(_DWORD *)(v46 + 40);
                *(void *)(v95 + 32) = v96;
                v46 += 48;
                uint64_t v87 = v95 + 48;
              }
              while (v46 != v94);
              unint64_t v86 = v120;
              unint64_t v46 = a3[1];
            }
            unint64_t v97 = *a3;
            *a3 = v86;
            a3[1] = v87;
            uint64_t v98 = (char *)a3[2];
            a3[2] = (unint64_t)v121;
            *((void *)&v120 + 1) = v46;
            int64x2_t v121 = v98;
            uint64_t v119 = (char *)v97;
            *(void *)&long long v120 = v97;
            std::__split_buffer<TI::CP::ContextualShapeRecognizer::recognition_hypothesis>::~__split_buffer((uint64_t)&v119);
          }
          else if (v46 == v45)
          {
            KB::String::String((KB::String *)a3[1], (const KB::String *)v129);
            unint64_t v65 = v44 + 16 * ((uint64_t)(v46 - v44) >> 4);
            double v66 = v131;
            *(_DWORD *)(v65 + 40) = v132;
            *(double *)(v65 + 32) = v66;
            a3[1] = v45 + 48;
          }
          else
          {
            uint64_t v48 = v11;
            uint64_t v49 = v45 - 48;
            uint64_t v50 = a3[1];
            unint64_t v51 = v45 - 48;
            if (v45 >= 0x30)
            {
              do
              {
                *(_DWORD *)uint64_t v50 = 0x100000;
                *(_WORD *)(v50 + 4) = 0;
                *(unsigned char *)(v50 + 6) = 0;
                *(void *)(v50 + 8) = 0;
                uint64_t v52 = KB::String::operator=(v50, (KB::String *)v51);
                uint64_t v53 = *(void *)(v51 + 32);
                *(_DWORD *)(v52 + 40) = *(_DWORD *)(v51 + 40);
                *(void *)(v52 + 32) = v53;
                v51 += 48;
                uint64_t v50 = v52 + 48;
              }
              while (v51 < v45);
            }
            a3[1] = v50;
            if (v45 != v46 + 48)
            {
              uint64_t v54 = 16 * ((uint64_t)(v45 - (v46 + 48)) >> 4);
              do
              {
                KB::String::operator=(v49, (KB::String *)(v46 + v54 - 48));
                uint64_t v55 = *(void *)(v46 + v54 - 16);
                *(_DWORD *)(v49 + 40) = *(_DWORD *)(v46 + v54 - 8);
                *(void *)(v49 + 32) = v55;
                v49 -= 48;
                v54 -= 48;
              }
              while (v54);
            }
            BOOL v57 = v46 <= (unint64_t)v129 && a3[1] > (unint64_t)v129;
            unint64_t v58 = (KB::String *)&v129[48 * v57];
            KB::String::operator=((KB::String *)v46, v58);
            uint64_t v59 = *((void *)v58 + 4);
            unint64_t v60 = v44 + 16 * ((uint64_t)(v46 - v44) >> 4);
            *(_DWORD *)(v60 + 40) = *((_DWORD *)v58 + 10);
            *(void *)(v60 + 32) = v59;
            uint64_t v11 = v48;
            uint64_t v12 = v100;
          }
          if (v130 && v129[6] == 1) {
            free(v130);
          }
          unint64_t v18 = (float64x2_t *)__p;
        }
      }
      if (v18) {
        operator delete(v18);
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
      if (v112.__begin_)
      {
        v112.__end_ = v112.__begin_;
        operator delete(v112.__begin_);
      }
      if (v110)
      {
        long long v111 = (__n128 *)v110;
        operator delete(v110);
      }
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v109.__r_.__value_.__l.__data_);
      }
      v11 += 136;
    }
    while (v11 != v12);
  }
  uint64_t v108 = (void **)&v115;
  std::vector<TI::CP::ShapeRecord>::__destroy_vector::operator()[abi:nn180100](&v108);
  if (v117) {
    operator delete(v117);
  }
}

void shape_as_simd_double3(const TI::CP::Path *a1, __n128 *a2, __n128 *a3, double a4, __n128 a5)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    unint64_t v8 = 0;
    do
    {
      __n128 v9 = *v6;
      a5.n128_u64[0] = v6[1].n128_u64[1];
      unint64_t v10 = *((void *)a1 + 2);
      if ((unint64_t)v8 >= v10)
      {
        uint64_t v11 = *(__n128 **)a1;
        uint64_t v12 = ((uint64_t)v8 - *(void *)a1) >> 5;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 59) {
          abort();
        }
        uint64_t v14 = v10 - (void)v11;
        if (v14 >> 4 > v13) {
          unint64_t v13 = v14 >> 4;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          __n128 v20 = a5;
          __n128 v21 = *v6;
          if (v15 >> 59) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          __n128 v16 = (char *)operator new(32 * v15);
          a5 = v20;
          __n128 v9 = v21;
        }
        else
        {
          __n128 v16 = 0;
        }
        unint64_t v17 = (__n128 *)&v16[32 * v12];
        *unint64_t v17 = v9;
        v17[1] = a5;
        unint64_t v18 = v17;
        while (v8 != v11)
        {
          __n128 v19 = v8[-2];
          a5 = v8[-1];
          v8 -= 2;
          v18[-2] = v19;
          v18[-1] = a5;
          v18 -= 2;
        }
        unint64_t v8 = v17 + 2;
        *(void *)a1 = v18;
        *((void *)a1 + 2) = &v16[32 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *unint64_t v8 = v9;
        v8[1] = a5;
        v8 += 2;
      }
      *((void *)a1 + 1) = v8;
      v6 += 3;
    }
    while (v6 != a3);
  }
}

uint64_t std::__split_buffer<TI::CP::ContextualShapeRecognizer::recognition_hypothesis>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      BOOL v5 = *(void **)(v2 - 40);
      if (v5 && *(unsigned char *)(v2 - 42) == 1)
      {
        free(v5);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double TI::CP::ContextualShapeRecognizer::path_length(TI::CP::ContextualShapeRecognizer *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)this + 2) == v1) {
    return 0.0;
  }
  else {
    return *(double *)(v1 - 16);
  }
}

uint64_t TI::CP::ContextualShapeRecognizer::reset_path(uint64_t this)
{
  *(void *)(this + 192) = *(void *)(this + 184);
  *(void *)(this + 144) = *(void *)(this + 136);
  *(void *)(this + 168) = *(void *)(this + 160);
  *(void *)(this + 24) = *(void *)(this + 16);
  *(void *)(this + 48) = *(void *)(this + 40);
  *(void *)(this + 72) = *(void *)(this + 64);
  *(void *)(this + 96) = *(void *)(this + 88);
  *(_DWORD *)(this + 112) = 7;
  return this;
}

double TI::CP::ContextualShapeRecognizer::last_touch(TI::CP::ContextualShapeRecognizer *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)this + 2) == v1) {
    uint64_t v2 = MEMORY[0x1E4F1DAD8];
  }
  else {
    uint64_t v2 = v1 - 48;
  }
  return *(double *)v2;
}

uint64_t TI::CP::ContextualShapeRecognizer::touch_stage(TI::CP::ContextualShapeRecognizer *this)
{
  return *((unsigned int *)this + 28);
}

void TI::CP::ContextualShapeRecognizer::add_touch(uint64_t a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  if (!a2) {
    (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  }
  v16.CGFloat x = a3;
  v16.CGFloat y = a4;
  TI::CP::PathReducer::append((TI::CP::PathReducer *)(a1 + 120), v16, a5, a6);
  v17.CGFloat x = a3;
  v17.CGFloat y = a4;
  TI::CP::Path::append((TI::CP::Path *)(a1 + 16), v17, a5, a6, -1.0, 0.0);
  if (a2 == 2)
  {
    TI::CP::PathReducer::finalize((TI::CP::PathReducer *)(a1 + 120));
    uint64_t v12 = *(void *)(a1 + 144);
    if (*(void *)(a1 + 136) != v12 && *(double *)(v12 - 16) > 20.0)
    {
      TI::CP::PathReducer::reduced_path((TI::CP::PathReducer *)(a1 + 120), 13.0, (TI::CP::Path *)v13);
      TI::CP::Path::operator=((char **)(a1 + 64), (const void **)v13);
      if (__p)
      {
        unint64_t v15 = __p;
        operator delete(__p);
      }
      if (v13[0])
      {
        v13[1] = v13[0];
        operator delete(v13[0]);
      }
    }
  }
  *(_DWORD *)(a1 + 112) = a2;
}

uint64_t TI::CP::ContextualShapeRecognizer::recognitionSources(TI::CP::ContextualShapeRecognizer *this)
{
  return 4;
}

uint64_t TI::CP::ContextualShapeRecognizer::get_recognizer_type(TI::CP::ContextualShapeRecognizer *this)
{
  return 2;
}

void TI::CP::ContextualShapeRecognizer::~ContextualShapeRecognizer(TI::CP::ContextualShapeRecognizer *this)
{
  TI::CP::ContextualShapeRecognizer::~ContextualShapeRecognizer(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  *(void *)this = &unk_1F3F76970;
  uint64_t v2 = (void *)*((void *)this + 38);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,TI::CP::ShapeRecord>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v4) {
    operator delete(v4);
  }
  TI::CP::ShapeStore::~ShapeStore((char **)this + 26);
  BOOL v5 = (void *)*((void *)this + 23);
  if (v5)
  {
    *((void *)this + 24) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 20);
  if (v6)
  {
    *((void *)this + 21) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 17);
  if (v7)
  {
    *((void *)this + 18) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 11);
  if (v8)
  {
    *((void *)this + 12) = v8;
    operator delete(v8);
  }
  __n128 v9 = (void *)*((void *)this + 8);
  if (v9)
  {
    *((void *)this + 9) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 5);
  if (v10)
  {
    *((void *)this + 6) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 2);
  if (v11)
  {
    *((void *)this + 3) = v11;
    operator delete(v11);
  }
  *(void *)this = &unk_1F3F78B70;
  uint64_t v12 = *((void *)this + 1);
  if (v12) {
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref(v12);
  }
}

uint64_t TI::CP::TIPathRecognizerInterface::remove_shapes_older_than(TI::CP::TIPathRecognizerInterface *this, double a2)
{
  return 1;
}

uint64_t TI::Favonius::SearchNodeResultQueue::SearchNodeResultQueue(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v4 = *a2;
  BOOL v5 = a2[1];
  while (v4 != v5)
    TI::Favonius::SearchNodeResultQueue::visit((unsigned int *)a1, v4++);
  return a1;
}

{
  uint64_t *v4;
  uint64_t *v5;

  *(void *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v4 = *a2;
  BOOL v5 = a2[1];
  while (v4 != v5)
    TI::Favonius::SearchNodeResultQueue::visit((unsigned int *)a1, v4++);
  return a1;
}

unsigned int *TI::Favonius::SearchNodeResultQueue::visit(unsigned int *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return result;
  }
  uint64_t v4 = result;
  if ((*(_DWORD *)(v2 + 160) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    unint64_t v5 = *((void *)result + 3);
    uint64_t v6 = (void *)*((void *)result + 2);
    if ((unint64_t)v6 < v5)
    {
      *uint64_t v6 = v2;
      uint64_t v7 = (uint64_t)(v6 + 1);
      atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
LABEL_21:
      *((void *)v4 + 2) = v7;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeResultQueue::LessThanWordScore &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> *>>(*((unsigned int **)v4 + 1), v7, (v7 - *((void *)v4 + 1)) >> 3);
      goto LABEL_22;
    }
    uint64_t v8 = *((void *)result + 1);
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    unint64_t v28 = v4 + 6;
    if (v12)
    {
      unint64_t v13 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v12);
      uint64_t v2 = *a2;
      uint64_t v14 = &v13[2 * v9];
      float v25 = v13;
      v26.i64[0] = (uint64_t)v14;
      v26.i64[1] = (uint64_t)v14;
      unint64_t v27 = &v13[2 * v15];
      *(void *)uint64_t v14 = v2;
      if (!v2)
      {
        CGPoint v16 = &v13[2 * v9];
LABEL_16:
        uint64_t v7 = (uint64_t)(v16 + 2);
        v26.i64[1] = (uint64_t)(v16 + 2);
        unint64_t v18 = (void *)*((void *)v4 + 1);
        CGPoint v17 = (void *)*((void *)v4 + 2);
        if (v17 == v18)
        {
          int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
        }
        else
        {
          do
          {
            uint64_t v19 = *--v17;
            *CGPoint v17 = 0;
            *((void *)v14 - 1) = v19;
            v14 -= 2;
          }
          while (v17 != v18);
          int64x2_t v20 = *(int64x2_t *)(v4 + 2);
          uint64_t v7 = v26.i64[1];
        }
        *((void *)v4 + 1) = v14;
        *((void *)v4 + 2) = v7;
        int64x2_t v26 = v20;
        __n128 v21 = (unsigned int *)*((void *)v4 + 3);
        *((void *)v4 + 3) = v27;
        unint64_t v27 = v21;
        float v25 = (unsigned int *)v20.i64[0];
        std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v25);
        goto LABEL_21;
      }
    }
    else
    {
      float v25 = 0;
      v26.i64[0] = 8 * v9;
      v26.i64[1] = 8 * v9;
      unint64_t v27 = 0;
      *(void *)(8 * v9) = v2;
    }
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
    CGPoint v16 = (unsigned int *)v26.i64[1];
    uint64_t v14 = (unsigned int *)v26.i64[0];
    goto LABEL_16;
  }
LABEL_22:
  uint64_t result = (unsigned int *)(*(void *(**)(unsigned int **__return_ptr))(*(void *)v4 + 16))(&v25);
  if (v25)
  {
    size_t v24 = v25;
    float v25 = 0;
    TI::Favonius::SearchNodeSourceQueue::insert((TI::Favonius::SearchNodeSourceQueue *)(v4 + 10), (uint64_t *)&v24);
    if (v24)
    {
      unsigned int v22 = atomic_load(v24 + 2);
      if (v22 == 1) {
        (*(void (**)(void))(*(void *)v24 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v24 + 2, 0xFFFFFFFF);
      }
    }
    uint64_t result = v25;
    if (v25)
    {
      unsigned int v23 = atomic_load(v25 + 2);
      if (v23 == 1) {
        return (unsigned int *)(*(uint64_t (**)(void))(*(void *)v25 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF);
      }
    }
  }
  return result;
}

unsigned int *std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeResultQueue::LessThanWordScore &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> *>>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v4 = result;
  unint64_t v5 = v3 >> 1;
  uint64_t v6 = (unsigned int **)&result[2 * (v3 >> 1)];
  uint64_t v9 = *(void *)(a2 - 8);
  uint64_t v7 = (unsigned int **)(a2 - 8);
  uint64_t v8 = v9;
  if ((float)(*((float *)*v6 + 36) + (float)(*((float *)*v6 + 35) * 0.35)) >= (float)(*(float *)(v9 + 144)
                                                                                     + (float)(*(float *)(v9 + 140)
                                                                                             * 0.35)))
    return result;
  *uint64_t v7 = 0;
  uint64_t v10 = *v6;
  do
  {
    uint64_t v11 = v6;
    *uint64_t v6 = 0;
    unint64_t v12 = *v7;
    *uint64_t v7 = v10;
    if (!v12) {
      goto LABEL_7;
    }
    unsigned int v13 = atomic_load(v12 + 2);
    if (v13 == 1)
    {
      (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
LABEL_7:
      if (!v5) {
        break;
      }
      goto LABEL_10;
    }
    atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF);
    if (!v5) {
      break;
    }
LABEL_10:
    unint64_t v5 = (v5 - 1) >> 1;
    uint64_t v6 = (unsigned int **)&v4[2 * v5];
    uint64_t v10 = *v6;
    uint64_t v7 = v11;
  }
  while ((float)(*((float *)*v6 + 36) + (float)(*((float *)*v6 + 35) * 0.35)) < (float)(*(float *)(v8 + 144)
                                                                                       + (float)(*(float *)(v8 + 140)
                                                                                               * 0.35)));
  uint64_t result = *v11;
  *uint64_t v11 = (unsigned int *)v8;
  if (result)
  {
    unsigned int v14 = atomic_load(result + 2);
    if (v14 == 1)
    {
      uint64_t v15 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v15();
    }
    else
    {
      atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

uint64_t TI::Favonius::SearchNodeSourceQueue::insert(TI::Favonius::SearchNodeSourceQueue *this, uint64_t *a2)
{
  uint64_t v4 = (char *)this + 40;
  unint64_t v5 = *((void *)this + 5);
  uint64_t v6 = (void *)*((void *)this + 4);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (void *)*((void *)this + 3);
    uint64_t v9 = v6 - v8;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    int64x2_t v26 = v4;
    if (v12)
    {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v12);
      uint64_t v8 = (void *)*((void *)this + 3);
      uint64_t v6 = (void *)*((void *)this + 4);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unsigned int v14 = (void *)(v12 + 8 * v9);
    unint64_t v15 = v12 + 8 * v13;
    unint64_t v25 = v15;
    *unsigned int v14 = 0;
    *((void *)&v24 + 1) = v14 + 1;
    if (v6 == v8)
    {
      uint64_t v7 = v14 + 1;
    }
    else
    {
      do
      {
        uint64_t v16 = *--v6;
        *uint64_t v6 = 0;
        *--unsigned int v14 = v16;
      }
      while (v6 != v8);
      uint64_t v7 = (void *)*((void *)&v24 + 1);
      unint64_t v15 = v25;
    }
    long long v17 = *(_OWORD *)((char *)this + 24);
    *((void *)this + 3) = v14;
    *((void *)this + 4) = v7;
    long long v24 = v17;
    unint64_t v18 = *((void *)this + 5);
    *((void *)this + 5) = v15;
    unint64_t v25 = v18;
    uint64_t v23 = v17;
    std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    *uint64_t v6 = 0;
    uint64_t v7 = v6 + 1;
  }
  *((void *)this + 4) = v7;
  uint64_t v19 = (unsigned int *)*(v7 - 1);
  uint64_t v20 = *a2;
  *a2 = 0;
  *(v7 - 1) = v20;
  if (v19)
  {
    unsigned int v21 = atomic_load(v19 + 2);
    if (v21 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v19 + 8))(v19);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v19 + 2, 0xFFFFFFFF);
    }
  }
  return TI::Favonius::SearchNodeSourceQueue::push_heap(this, (TI::Favonius::SearchNodeSource *)*(v7 - 1));
}

uint64_t std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(unsigned int **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    if (v4)
    {
      unsigned int v5 = atomic_load(v4 + 2);
      if (v5 == 1) {
        (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF);
      }
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned int *TI::Favonius::SearchNodeResultQueue::next_word_node@<X0>(unsigned int **this@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v4 = this + 5;
  while (1)
  {
    uint64_t result = (unsigned int *)TI::Favonius::SearchNodeResultQueue::is_search_queue_bounded_by_top_word((TI::Favonius::SearchNodeResultQueue *)this);
    if (result) {
      break;
    }
    TI::Favonius::SearchNodeSourceQueue::next_search_node(v4, -INFINITY, &v33);
    double v34 = (unsigned int *)v33;
    TI::Favonius::SearchNodeResultQueue::visit((unsigned int *)this, (uint64_t *)&v34);
    if (v34)
    {
      unsigned int v6 = atomic_load(v34 + 2);
      if (v6 == 1) {
        (*(void (**)(void))(*(void *)v34 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v34 + 2, 0xFFFFFFFF);
      }
    }
  }
  uint64_t v7 = this[1];
  uint64_t v8 = this[2];
  if (v7 == v8)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = *(unsigned int **)v7;
    if (*(void *)v7)
    {
      atomic_fetch_add((atomic_uint *volatile)v9 + 2, 1u);
      uint64_t v7 = this[1];
      uint64_t v8 = this[2];
    }
    unint64_t v10 = (char *)v8 - (char *)v7;
    if ((char *)v8 - (char *)v7 >= 9)
    {
      uint64_t v11 = 0;
      uint64_t v12 = v10 >> 3;
      uint64_t v31 = *(unsigned int **)v7;
      uint64_t v32 = a2;
      *(void *)uint64_t v7 = 0;
      BOOL v13 = __OFSUB__(v10 >> 3, 2);
      uint64_t v14 = (v10 >> 3) - 2;
      if (v14 < 0 != v13) {
        uint64_t v14 = v12 - 1;
      }
      uint64_t v15 = v14 >> 1;
      uint64_t v16 = v7;
      do
      {
        long long v17 = (unsigned int **)v16;
        v16 += 2 * v11 + 2;
        uint64_t v18 = 2 * v11;
        uint64_t v11 = (2 * v11) | 1;
        uint64_t v19 = v18 + 2;
        if (v19 < v12
          && (float)(*(float *)(*(void *)v16 + 144) + (float)(*(float *)(*(void *)v16 + 140) * 0.35)) < (float)(*(float *)(*((void *)v16 + 1) + 144) + (float)(*(float *)(*((void *)v16 + 1) + 140) * 0.35)))
        {
          v16 += 2;
          uint64_t v11 = v19;
        }
        uint64_t v20 = *(unsigned int **)v16;
        *(void *)uint64_t v16 = 0;
        unsigned int v21 = *v17;
        *long long v17 = v20;
        if (v21)
        {
          unsigned int v22 = atomic_load(v21 + 2);
          if (v22 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v21 + 8))(v21);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v21 + 2, 0xFFFFFFFF);
          }
        }
      }
      while (v11 <= v15);
      uint64_t v23 = (unsigned int **)(v8 - 2);
      if (v8 - 2 == v16)
      {
        unint64_t v27 = *(unsigned int **)v16;
        a2 = v32;
        *(void *)uint64_t v16 = v31;
        if (v27)
        {
          unsigned int v28 = atomic_load(v27 + 2);
          if (v28 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v27 + 8))(v27);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v27 + 2, 0xFFFFFFFF);
          }
        }
      }
      else
      {
        long long v24 = *v23;
        *uint64_t v23 = 0;
        unint64_t v25 = *(unsigned int **)v16;
        *(void *)uint64_t v16 = v24;
        if (v25)
        {
          unsigned int v26 = atomic_load(v25 + 2);
          if (v26 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v25 + 8))(v25);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF);
          }
        }
        uint64_t v29 = *v23;
        a2 = v32;
        *uint64_t v23 = v31;
        if (v29)
        {
          unsigned int v30 = atomic_load(v29 + 2);
          if (v30 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v29 + 8))(v29);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v29 + 2, 0xFFFFFFFF);
          }
        }
        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeResultQueue::LessThanWordScore &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> *>>(v7, (uint64_t)(v16 + 2), ((char *)(v16 + 2) - (char *)v7) >> 3);
      }
    }
    uint64_t result = std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__base_destruct_at_end[abi:nn180100]((unsigned int *)this + 2, (uint64_t)(this[2] - 2));
  }
  *a2 = v9;
  return result;
}

BOOL TI::Favonius::SearchNodeResultQueue::is_search_queue_bounded_by_top_word(TI::Favonius::SearchNodeResultQueue *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 == *((void *)this + 2)) {
    float v2 = -INFINITY;
  }
  else {
    float v2 = *(float *)(*(void *)v1 + 144) + (float)(*(float *)(*(void *)v1 + 140) * 0.35);
  }
  uint64_t v3 = *((void *)this + 5);
  if (v3 == *((void *)this + 6)) {
    return 1;
  }
  float v4 = *(float *)(*(void *)v3 + 24);
  return v4 < v2 || (LODWORD(v4) & 0x7FFFFFFFu) > 0x7F7FFFFF;
}

unsigned int *std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__base_destruct_at_end[abi:nn180100](unsigned int *result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *((void *)result + 1); i != a2; i -= 8)
  {
    unsigned int v5 = *(unsigned int **)(i - 8);
    uint64_t result = v5;
    if (v5)
    {
      unsigned int v6 = atomic_load(result + 2);
      if (v6 == 1) {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
      }
    }
  }
  *((void *)v3 + 1) = a2;
  return result;
}

id _deepCopyOfStringDictionary(void *a1)
{
  uint64_t v1 = (objc_class *)MEMORY[0x1E4F1C9E8];
  id v2 = a1;
  id v3 = [v1 alloc];
  if (v2) {
    id v4 = v2;
  }
  else {
    id v4 = (id)MEMORY[0x1E4F1CC08];
  }
  unsigned int v5 = (void *)[v3 initWithDictionary:v4 copyItems:1];

  return v5;
}

id UIKeyboardUserDirectory()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v0 = TI_KB_USER_DIRECTORY();
  uint64_t v1 = [MEMORY[0x1E4F28CB8] defaultManager];
  char v16 = 0;
  int v2 = [v1 fileExistsAtPath:v0 isDirectory:&v16];
  char v3 = v2;
  if (v2) {
    BOOL v4 = v16 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    id v15 = 0;
    char v7 = [v1 removeItemAtPath:v0 error:&v15];
    id v8 = v15;
    id v6 = v8;
    if ((v7 & 1) == 0)
    {
      if (TICanLogMessageAtLevel_onceToken != -1) {
        dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
      }
      uint64_t v11 = TIOSLogFacility();
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_18;
      }
      uint64_t v12 = [NSString stringWithFormat:@"%s %@", "UIKeyboardUserDirectory", v6];
      *(_DWORD *)buf = 138412290;
      uint64_t v18 = v12;
      goto LABEL_23;
    }
    unsigned int v5 = v8;
    if (v3) {
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v5 = 0;
    if (v2)
    {
LABEL_6:
      id v6 = v5;
LABEL_10:
      id v10 = v0;
      goto LABEL_19;
    }
  }
  id v14 = v5;
  char v9 = [v1 createDirectoryAtPath:v0 withIntermediateDirectories:1 attributes:0 error:&v14];
  id v6 = v14;

  if (v9) {
    goto LABEL_10;
  }
  if (TICanLogMessageAtLevel_onceToken != -1) {
    dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
  }
  uint64_t v11 = TIOSLogFacility();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = [NSString stringWithFormat:@"%s %@", "UIKeyboardUserDirectory", v6];
    *(_DWORD *)buf = 138412290;
    uint64_t v18 = v12;
LABEL_23:
    _os_log_debug_impl(&dword_1E3F0E000, v11, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
  }
LABEL_18:

  id v10 = 0;
LABEL_19:

  return v10;
}

id languageIdentifierForInputMode(void *a1)
{
  id v1 = a1;
  int v2 = [v1 normalizedIdentifier];
  if (TIInputModeIsTransliteration()) {
    [v1 normalizedIdentifier];
  }
  else {
  char v3 = [v1 languageWithRegion];
  }

  return v3;
}

id UIAssetPathForInputMode(void *a1)
{
  id v1 = languageIdentifierForInputMode(a1);
  int v2 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:v1];
  PathForMatchingFile = (void *)KB::TIAssetPathRegistry::createPathForMatchingFile();

  return PathForMatchingFile;
}

CFMutableArrayRef UIAssetLMBundlePathForInputMode(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F1CA20];
  int v2 = [a1 preferredModelLocaleIdentifier];
  char v3 = [v1 localeWithLocaleIdentifier:v2];

  CFMutableArrayRef PathsForMatchingBundles = KB::TIAssetPathRegistry::createPathsForMatchingBundles();
  if (PathsForMatchingBundles) {
    CFMutableArrayRef v5 = PathsForMatchingBundles;
  }
  else {
    CFMutableArrayRef v5 = (CFMutableArrayRef)MEMORY[0x1E4F1CBF0];
  }

  return v5;
}

id UIKeyboardTransliterationLexiconPathForInputMode(void *a1)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = [v1 locale];
  char v3 = [v2 scriptCode];
  int v4 = [v3 isEqualToString:@"Latn"];

  if (v4)
  {
    CFMutableArrayRef v5 = [v1 locale];
    id v6 = [v5 languageCode];
    uint64_t v7 = +[TIInputMode inputModeWithIdentifier:isSiriMode:](TIInputMode, "inputModeWithIdentifier:isSiriMode:", v6, [v1 isSiriMode]);

    id v1 = (id)v7;
  }
  v10[0] = &unk_1F3F78280;
  v10[3] = v10;
  id v8 = UIAssetPathForInputMode(v1);
  std::__function::__value_func<BOOL ()(__CFURL const*,__CFString const*)>::~__value_func[abi:nn180100](v10);

  return v8;
}

void *std::__function::__value_func<BOOL ()(__CFURL const*,__CFString const*)>::~__value_func[abi:nn180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

id UIKeyboardUnigramLexiconPathForInputMode(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 isSiriMode])
  {
    v6[0] = &unk_1F3F782C8;
    uint64_t v7 = v6;
    UIAssetPathForInputMode(v1);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    std::__function::__value_func<BOOL ()(__CFURL const*,__CFString const*)>::~__value_func[abi:nn180100](v6);
  }
  else
  {
    char v3 = UIKeyboardTransliterationLexiconPathForInputMode(v1);
    int v4 = v3;
    if (v3)
    {
      id v2 = v3;
    }
    else
    {
      v6[0] = &unk_1F3F78238;
      uint64_t v7 = v6;
      UIAssetPathForInputMode(v1);
      id v2 = (id)objc_claimAutoreleasedReturnValue();
      std::__function::__value_func<BOOL ()(__CFURL const*,__CFString const*)>::~__value_func[abi:nn180100](v6);
    }
  }

  return v2;
}

id UIKeyboardPhraseLexiconPathForInputMode(void *a1)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 isSiriMode]) {
    id v2 = &unk_1F3F78358;
  }
  else {
    id v2 = &unk_1F3F78310;
  }
  v5[0] = v2;
  v5[3] = v5;
  char v3 = UIAssetPathForInputMode(v1);

  std::__function::__value_func<BOOL ()(__CFURL const*,__CFString const*)>::~__value_func[abi:nn180100](v5);

  return v3;
}

id UIKeyboardDeltaLexiconPathForInputMode(void *a1)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 isSiriMode]) {
    id v2 = &unk_1F3F783E8;
  }
  else {
    id v2 = &unk_1F3F783A0;
  }
  v5[0] = v2;
  v5[3] = v5;
  char v3 = UIAssetPathForInputMode(v1);

  std::__function::__value_func<BOOL ()(__CFURL const*,__CFString const*)>::~__value_func[abi:nn180100](v5);

  return v3;
}

id UIKeyboardMorphemeLexiconPathForInputMode(void *a1)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  v5[0] = &unk_1F3F78430;
  v5[3] = v5;
  id v2 = UIAssetPathForInputMode(v1);

  std::__function::__value_func<BOOL ()(__CFURL const*,__CFString const*)>::~__value_func[abi:nn180100](v5);
  if (v2)
  {
    char v3 = [v2 stringByAppendingPathComponent:@"morpheme.dat"];
  }
  else
  {
    char v3 = 0;
  }

  return v3;
}

id UIKeyboardOTALanguageModelPathsForInputMode(void *a1)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 isSiriMode]) {
    id v2 = &unk_1F3F78550;
  }
  else {
    id v2 = &unk_1F3F78508;
  }
  v5[0] = v2;
  v5[3] = v5;
  char v3 = UIAssetLMBundlePathForInputMode(v1);

  std::__function::__value_func<BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::~__value_func[abi:nn180100](v5);

  return v3;
}

void *std::__function::__value_func<BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::~__value_func[abi:nn180100](void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

id UIKeyboardSystemLanguageModelPathsForInputMode(void *a1)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 isSiriMode]) {
    id v2 = &unk_1F3F784C0;
  }
  else {
    id v2 = &unk_1F3F78478;
  }
  v5[0] = v2;
  v5[3] = v5;
  char v3 = UIAssetLMBundlePathForInputMode(v1);

  std::__function::__value_func<BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::~__value_func[abi:nn180100](v5);

  return v3;
}

id UIKeyboardOTADictionaryPathForContentType(void *a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = +[TIAssetManager sharedAssetManager];
  char v9 = [v8 ddsAssetContentItemsWithContentType:v5 inputMode:v6 filteredWithRegion:0];

  id v10 = TIAssetsOSLogFacility();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    long long v24 = [NSString stringWithFormat:@"%s Content items for type %@: %@", "UIKeyboardOTADictionaryPathForContentType", v5, v9];
    *(_DWORD *)buf = 138412290;
    uint64_t v33 = v24;
    _os_log_debug_impl(&dword_1E3F0E000, v10, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v11 = v9;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v27 objects:v31 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    id v25 = v6;
    id v26 = v5;
    uint64_t v14 = *(void *)v28;
    while (2)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v28 != v14) {
          objc_enumerationMutation(v11);
        }
        char v16 = [*(id *)(*((void *)&v27 + 1) + 8 * i) path];
        long long v17 = [v16 path];

        uint64_t v18 = [v17 lastPathComponent];
        if (![v7 length] || objc_msgSend(v18, "hasPrefix:", v7))
        {
          if ([v18 hasSuffix:@".dat"])
          {
            uint64_t v19 = [MEMORY[0x1E4F28CB8] defaultManager];
            int v20 = [v19 fileExistsAtPath:v17];

            if (v20)
            {

              goto LABEL_16;
            }
          }
        }
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v27 objects:v31 count:16];
      if (v13) {
        continue;
      }
      break;
    }
    long long v17 = 0;
LABEL_16:
    id v6 = v25;
    id v5 = v26;
  }
  else
  {
    long long v17 = 0;
  }

  unsigned int v21 = TIAssetsOSLogFacility();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    unsigned int v22 = [NSString stringWithFormat:@"%s dictionaryPathForContentType ddsResult: %@", "UIKeyboardOTADictionaryPathForContentType", v17];
    *(_DWORD *)buf = 138412290;
    uint64_t v33 = v22;
    _os_log_impl(&dword_1E3F0E000, v21, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }

  return v17;
}

id UIKeyboardStaticUnigramsFile(void *a1)
{
  id v1 = a1;
  int v2 = TIInputModeUseMorphemeLevelLexicon();
  char v3 = +[TIInputMode inputModeWithIdentifier:v1];

  if (v2) {
    UIKeyboardMorphemeLexiconPathForInputMode(v3);
  }
  else {
  int v4 = UIKeyboardUnigramLexiconPathForInputMode(v3);
  }

  return v4;
}

id UIKeyboardDynamicDictionaryFileWithSiriMode(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if ([v5 length])
  {
    id v7 = TIInputModeGetLanguageWithRegion();
    char v8 = [v7 isEqualToString:@"en_US"];

    if (v8)
    {
      char v9 = @"dynamic-text.dat";
      if (!a3) {
        goto LABEL_8;
      }
    }
    else
    {
      id v11 = TIInputModeGetLanguageWithRegion();
      char v9 = [v11 stringByAppendingString:@"-dynamic-text.dat"];

      if (!a3)
      {
LABEL_8:
        if (v6)
        {
          id v13 = v6;
        }
        else
        {
          UIKeyboardUserDirectory();
          id v13 = (id)objc_claimAutoreleasedReturnValue();
        }
        uint64_t v14 = v13;
        id v10 = [v13 stringByAppendingPathComponent:v9];

        goto LABEL_12;
      }
    }
    uint64_t v12 = [@"siri-" stringByAppendingString:v9];

    char v9 = (__CFString *)v12;
    goto LABEL_8;
  }
  id v10 = 0;
LABEL_12:

  return v10;
}

id UIKeyboardDynamicDictionaryFile(void *a1, void *a2)
{
  return UIKeyboardDynamicDictionaryFileWithSiriMode(a1, a2, 0);
}

__CFString *UIKeyboardLanguageFromDynamicDictionaryPath(void *a1)
{
  id v1 = [a1 lastPathComponent];
  if ([v1 isEqualToString:@"dynamic-text.dat"])
  {
    int v2 = @"en_US";
  }
  else if ([v1 hasSuffix:@"-dynamic-text.dat"])
  {
    int v2 = [v1 substringToIndex:objc_msgSend(v1, "length") - objc_msgSend(@"-dynamic-text.dat", "length")];
  }
  else
  {
    int v2 = @"intl";
  }

  return v2;
}

id UIKeyboardSimulatedImplicitInputModeDetectionForPrimaryInputMode(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = objc_alloc_init(TILanguageSelectionController);
  char v3 = objc_opt_new();
  int v4 = +[TIInputMode inputModeWithIdentifier:v1];
  id v5 = [(TILanguageSelectionController *)v2 simulateImplicitInputModeDetectionForPrimaryInputMode:v4];

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v6 = v5;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * i), "normalizedIdentifier", (void)v13);
        [v3 addObject:v11];
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  return v3;
}

TI::RejectionsDatabase *std::unique_ptr<TI::RejectionsDatabase>::reset[abi:nn180100](TI::RejectionsDatabase **a1, TI::RejectionsDatabase *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    TI::RejectionsDatabase::~RejectionsDatabase(result);
    JUMPOUT(0x1E4E7BC20);
  }
  return result;
}

void std::__destroy_at[abi:nn180100]<RecentMessage,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    std::default_delete<KB::LanguageModelContext>::operator()[abi:nn180100](v2);
  }
  char v3 = *(void **)(a1 + 8);
  if (v3 && *(unsigned char *)(a1 + 6) == 1)
  {
    free(v3);
  }
}

void std::default_delete<KB::LanguageModelContext>::operator()[abi:nn180100](uint64_t a1)
{
  int v4 = (void **)(a1 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 72));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
  char v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }

  JUMPOUT(0x1E4E7BC20);
}

uint64_t std::__shared_ptr_emplace<KB::TypologyLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<KB::TypologyLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<KB::TypologyLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t __Block_byref_object_copy__11289(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11290(uint64_t a1)
{
}

void __destroy_helper_block_a8_40c46_ZTSNSt3__110shared_ptrIN2KB13LanguageModelEEE(uint64_t a1)
{
  id v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

uint64_t __copy_helper_block_a8_40c46_ZTSNSt3__110shared_ptrIN2KB13LanguageModelEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

id KB::createNSArray<std::unordered_set<unsigned long long> const&>(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*(void *)(a1 + 24)];
  for (uint64_t i = *(void **)(a1 + 16); i; uint64_t i = (void *)*i)
  {
    int v4 = [NSNumber numberWithUnsignedLongLong:i[2]];
    if (v4) {
      [v2 addObject:v4];
    }
  }

  return v2;
}

void populateAutocorrectionAccuracyFields(void *a1, float *a2)
{
  id v11 = a1;
  [v11 setGeometryScore:a2[187]];
  [v11 setWordScore:a2[188]];
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v4 = *(void *)a2 - 1;
  unint64_t v5 = TILocaleIdentifierForLexiconID(*(_DWORD *)(v3 + 240 * v4 + 136));
  if (v5)
  {
    uint64_t v7 = [NSString stringWithUTF8String:v5];
    [v11 setLexiconLocale:v7];
  }
  uint64_t v8 = *(void *)a2;
  if (*(void *)a2 == 1)
  {
    uint64_t v9 = v3 + 240 * v4;
    [v11 setDynamicUsageCount:*(unsigned int *)(v9 + 124)];
    [v11 setDynamicPenaltyCount:*(unsigned int *)(v9 + 128)];
    uint64_t v8 = *(void *)a2;
  }
  LODWORD(v6) = *(_DWORD *)(*((void *)a2 + 1) + 240 * v8 - 184);
  id v10 = [NSNumber numberWithFloat:v6];
  [v11 setStaticLinguisticLikelihood:v10];
}

void std::__shared_ptr_emplace<std::vector<KB::LanguageModelContext>>::__on_zero_shared(uint64_t a1)
{
  id v1 = (void **)(a1 + 24);
  std::vector<KB::LanguageModelContext>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void std::__shared_ptr_emplace<std::vector<KB::LanguageModelContext>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75B20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<std::vector<KB::LanguageModelContext>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 __Block_byref_object_copy__334(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__335(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__330(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 48) = 0x100000;
  uint64_t v2 = a1 + 48;
  *(_WORD *)(v2 + 4) = 0;
  *(unsigned char *)(v2 + 6) = 0;
  *(void *)(v2 + 8) = 0;
  return KB::String::operator=(v2, (KB::String *)(a2 + 48));
}

void __Block_byref_object_dispose__331(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 54) == 1) {
      free(v2);
    }
  }
}

__n128 __Block_byref_object_copy__325(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void *std::__function::__value_func<void ()(KB::Candidate &,float)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

double std::__fs::filesystem::path::filename[abi:nn180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v9;
  return result;
}

BOOL std::string::starts_with[abi:nn180100](uint64_t a1, void *__s2, size_t a3)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v5 = a1;
    a1 = *(void *)a1;
    unint64_t v4 = *(void *)(v5 + 8);
  }
  else
  {
    unint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  return v4 >= a3 && std::string_view::compare[abi:nn180100](a1, v4, 0, a3, __s2, a3) == 0;
}

uint64_t std::string_view::compare[abi:nn180100](uint64_t a1, unint64_t a2, unint64_t a3, size_t a4, void *__s2, size_t a6)
{
  if (a2 < a3) {
    abort();
  }
  uint64_t v7 = (const void *)(a1 + a3);
  if (a2 - a3 >= a4) {
    size_t v8 = a4;
  }
  else {
    size_t v8 = a2 - a3;
  }
  if (a6 >= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = a6;
  }
  LODWORD(result) = memcmp(v7, __s2, v9);
  if (v8 < a6) {
    unsigned int v11 = -1;
  }
  else {
    unsigned int v11 = 1;
  }
  if (v8 == a6) {
    unsigned int v11 = 0;
  }
  if (result) {
    return result;
  }
  else {
    return v11;
  }
}

uint64_t std::__optional_destruct_base<std::tuple<KB::CandidateCollection,KB::String>,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v2 = *(void **)(a1 + 112);
    if (v2 && *(unsigned char *)(a1 + 110) == 1) {
      free(v2);
    }
    unint64_t v4 = (void **)(a1 + 72);
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
    unint64_t v4 = (void **)(a1 + 48);
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
    unint64_t v4 = (void **)(a1 + 24);
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
    unint64_t v4 = (void **)a1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  }
  return a1;
}

void __destroy_helper_block_a8_72c16_ZTSN2KB6StringE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 78) == 1) {
      free(v2);
    }
  }
}

KB::String *__copy_helper_block_a8_72c16_ZTSN2KB6StringE(uint64_t a1, uint64_t a2)
{
  return KB::String::String((KB::String *)(a1 + 72), (const KB::String *)(a2 + 72));
}

std::string *std::optional<std::string>::operator=[abi:nn180100]<char const*,void>(std::string *a1, std::string::value_type *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0]) {
    return std::string::__assign_external(a1, a2);
  }
  uint64_t result = (std::string *)std::string::basic_string[abi:nn180100]<0>(a1, a2);
  result[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void ___ZL38TIGetSkipStickersSuggestionGatingValuev_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"SkipStickersSuggestionGating" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void ___ZL35TIGetKeyboardDisableHitTestingValuev_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"KeyboardDisableHitTesting" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

__n128 __Block_byref_object_copy__1242(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t std::tuple<KB::CandidateCollection,KB::String>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2 && *(unsigned char *)(a1 + 110) == 1) {
    free(v2);
  }
  unint64_t v4 = (void **)(a1 + 72);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  unint64_t v4 = (void **)(a1 + 48);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  unint64_t v4 = (void **)(a1 + 24);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  unint64_t v4 = (void **)a1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  return a1;
}

uint64_t std::optional<KB::String>::operator=[abi:nn180100]<KB::String,void>(uint64_t a1, KB::String *a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    return KB::String::operator=(a1, a2);
  }
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 6) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t result = KB::String::operator=(a1, a2);
  *(unsigned char *)(result + 32) = 1;
  return result;
}

const char *linguisticResourceStatusToString(unint64_t a1)
{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E6E2C1F0[a1];
  }
}

void TI::Favonius::KeyboardLayout::create()
{
}

uint64_t TI::Favonius::KeyboardLayout::KeyboardLayout(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  *(_OWORD *)(a1 + 120) = *MEMORY[0x1E4F1DB20];
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 136) = v3;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(_DWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0x100000;
  *(_WORD *)(a1 + 212) = 0;
  *(unsigned char *)(a1 + 214) = 0;
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  if (*a2)
  {
    unint64_t v4 = (CGRect **)a2[1];
    uint64_t v5 = 8 * *a2;
    do
    {
      TI::Favonius::KeyboardLayout::add_key(a1, v4++);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

uint64_t **TI::Favonius::KeyboardLayout::add_key(uint64_t a1, CGRect **a2)
{
  long long v3 = (atomic_uint **)a2;
  *(CGRect *)(a1 + 120) = CGRectUnion(*(CGRect *)(a1 + 120), (*a2)[2]);
  std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::push_back[abi:nn180100]((atomic_uint ***)(a1 + 8), *v3);
  uint64_t v5 = *v3;
  int v6 = *((unsigned __int16 *)*v3 + 6);
  if (!*((_WORD *)*v3 + 6))
  {
    KB::String::compute_length((unsigned __int16 *)v5 + 4);
    int v6 = *((unsigned __int16 *)v5 + 6);
    uint64_t v5 = *v3;
  }
  if (v6 == 1)
  {
    uint64_t v7 = *((void *)v5 + 2);
    if (!v7) {
      uint64_t v7 = (uint64_t)(v5 + 6);
    }
    uint64_t v98 = v7;
    int v8 = *((unsigned __int16 *)v5 + 4);
    int v99 = 0;
    int v100 = v8;
    unsigned int v101 = 0;
    KB::String::iterator::initialize(&v98);
    unint64_t v9 = v101;
    unint64_t v10 = *(void *)(a1 + 40);
    if (v10)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        unint64_t v2 = v101;
        if (v10 <= v101) {
          unint64_t v2 = v101 % v10;
        }
      }
      else
      {
        unint64_t v2 = (v10 - 1) & v101;
      }
      uint64_t v12 = *(uint64_t ***)(*(void *)(a1 + 32) + 8 * v2);
      if (v12)
      {
        for (uint64_t i = *v12; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v14 = i[1];
          if (v14 == v101)
          {
            if (*((_DWORD *)i + 4) == v101) {
              goto LABEL_81;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v2) {
              break;
            }
          }
        }
      }
    }
    long long v15 = (void *)(a1 + 48);
    long long v16 = operator new(0x20uLL);
    *long long v16 = 0;
    v16[1] = v9;
    *((_DWORD *)v16 + 4) = v9;
    void v16[3] = v5;
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
    float v17 = (float)(unint64_t)(*(void *)(a1 + 56) + 1);
    float v18 = *(float *)(a1 + 64);
    if (v10 && (float)(v18 * (float)v10) >= v17)
    {
LABEL_71:
      uint64_t v35 = *(void *)(a1 + 32);
      double v36 = *(void **)(v35 + 8 * v2);
      if (v36)
      {
        *long long v16 = *v36;
      }
      else
      {
        *long long v16 = *v15;
        *long long v15 = v16;
        *(void *)(v35 + 8 * v2) = v15;
        if (!*v16)
        {
LABEL_80:
          ++*(void *)(a1 + 56);
          uint64_t v5 = *v3;
          goto LABEL_81;
        }
        unint64_t v37 = *(void *)(*v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v37 >= v10) {
            v37 %= v10;
          }
        }
        else
        {
          v37 &= v10 - 1;
        }
        double v36 = (void *)(*(void *)(a1 + 32) + 8 * v37);
      }
      void *v36 = v16;
      goto LABEL_80;
    }
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(a1 + 40);
    if (*(void *)&prime > v10) {
      goto LABEL_37;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 56) / *(float *)(a1 + 64));
      if (v10 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 40);
      }
      else
      {
        if (prime)
        {
LABEL_37:
          if (*(void *)&prime >> 61) {
            goto LABEL_194;
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          long long v24 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *(int8x8_t *)(a1 + 40) = prime;
          do
            *(void *)(*(void *)(a1 + 32) + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          id v26 = (void *)*v15;
          if (*v15)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 32) + 8 * v27) = v15;
            uint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  uint64_t v34 = *(void *)(a1 + 32);
                  if (!*(void *)(v34 + 8 * v33))
                  {
                    *(void *)(v34 + 8 * v33) = v26;
                    goto LABEL_62;
                  }
                  *id v26 = *v32;
                  *uint64_t v32 = **(void **)(*(void *)(a1 + 32) + 8 * v33);
                  **(void **)(*(void *)(a1 + 32) + 8 * v33) = v32;
                  uint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_62:
                id v26 = v32;
                uint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_66;
        }
        uint64_t v90 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = 0;
        if (v90) {
          operator delete(v90);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + 40) = 0;
      }
    }
LABEL_66:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9) {
        unint64_t v2 = v9 % v10;
      }
      else {
        unint64_t v2 = v9;
      }
    }
    else
    {
      unint64_t v2 = (v10 - 1) & v9;
    }
    goto LABEL_71;
  }
LABEL_81:
  float64x2_t v38 = (char *)operator new(0x28uLL);
  double v39 = v38;
  *(void *)float64x2_t v38 = 0;
  *((void *)v38 + 1) = 0;
  unint64_t v40 = *((unsigned __int16 *)v5 + 20);
  uint64_t v95 = (uint64_t **)(a1 + 88);
  uint64_t v41 = (unsigned __int16 *)(v38 + 16);
  if (v40 > 0xE)
  {
    *((_WORD *)v38 + 8) = v40;
    operator new[]();
  }
  *(_OWORD *)uint64_t v41 = *(_OWORD *)(v5 + 10);
  *((void *)v38 + 4) = v5;
  atomic_fetch_add(v5, 1u);
  uint64_t v42 = (const char *)*((unsigned __int16 *)v38 + 8);
  if (v42 <= 0xE) {
    unint64_t v43 = (KB::String *)(v38 + 18);
  }
  else {
    unint64_t v43 = (KB::String *)*((void *)v38 + 3);
  }
  *((void *)v38 + 1) = KB::String::hash(v43, (const char *)*((unsigned __int16 *)v38 + 8));
  unint64_t v44 = KB::String::hash(v43, v42);
  *((void *)v39 + 1) = v44;
  unint64_t v45 = *(void *)(a1 + 80);
  float v46 = (float)(unint64_t)(*(void *)(a1 + 96) + 1);
  float v47 = *(float *)(a1 + 104);
  uint64_t v96 = (uint64_t *)v39;
  unint64_t v97 = v44;
  if (v45 && (float)(v47 * (float)v45) >= v46) {
    goto LABEL_145;
  }
  BOOL v48 = 1;
  if (v45 >= 3) {
    BOOL v48 = (v45 & (v45 - 1)) != 0;
  }
  unint64_t v49 = v48 | (2 * v45);
  unint64_t v50 = vcvtps_u32_f32(v46 / v47);
  if (v49 <= v50) {
    size_t v51 = v50;
  }
  else {
    size_t v51 = v49;
  }
  if (v51 == 1)
  {
    size_t v51 = 2;
  }
  else if ((v51 & (v51 - 1)) != 0)
  {
    size_t v52 = std::__next_prime(v51);
    unint64_t v44 = v97;
    size_t v51 = v52;
    unint64_t v45 = *(void *)(a1 + 80);
  }
  if (v51 <= v45)
  {
    if (v51 >= v45) {
      goto LABEL_145;
    }
    unint64_t v60 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 96) / *(float *)(a1 + 104));
    if (v45 < 3 || (uint8x8_t v61 = (uint8x8_t)vcnt_s8((int8x8_t)v45), v61.i16[0] = vaddlv_u8(v61), v61.u32[0] > 1uLL))
    {
      unint64_t v60 = std::__next_prime(v60);
      unint64_t v44 = v97;
    }
    else
    {
      uint64_t v62 = 1 << -(char)__clz(v60 - 1);
      if (v60 >= 2) {
        unint64_t v60 = v62;
      }
    }
    if (v51 <= v60) {
      size_t v51 = v60;
    }
    if (v51 >= v45)
    {
      unint64_t v45 = *(void *)(a1 + 80);
      goto LABEL_145;
    }
    if (!v51)
    {
      uint64_t v69 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = 0;
      if (v69)
      {
        operator delete(v69);
        unint64_t v44 = v97;
      }
      unint64_t v45 = 0;
      *(void *)(a1 + 80) = 0;
      goto LABEL_145;
    }
  }
  if (v51 >> 61) {
LABEL_194:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v53 = operator new(8 * v51);
  uint64_t v54 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v53;
  if (v54) {
    operator delete(v54);
  }
  uint64_t v92 = v41;
  uint64_t v55 = 0;
  *(void *)(a1 + 80) = v51;
  do
    *(void *)(*(void *)(a1 + 72) + 8 * v55++) = 0;
  while (v51 != v55);
  uint64_t v56 = *v95;
  unint64_t v44 = v97;
  if (!*v95) {
    goto LABEL_135;
  }
  size_t v57 = v56[1];
  uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v51);
  v58.i16[0] = vaddlv_u8(v58);
  unint64_t v59 = v58.u32[0];
  if (v58.u32[0] > 1uLL)
  {
    if (v57 >= v51) {
      v57 %= v51;
    }
  }
  else
  {
    v57 &= v51 - 1;
  }
  *(void *)(*(void *)(a1 + 72) + 8 * v57) = v95;
  uint64_t v63 = *v56;
  if (*v56)
  {
    uint64_t v91 = v3;
    unint64_t v93 = v58.u32[0];
    do
    {
      size_t v64 = *(void *)(v63 + 8);
      if (v59 > 1)
      {
        if (v64 >= v51) {
          v64 %= v51;
        }
      }
      else
      {
        v64 &= v51 - 1;
      }
      if (v64 == v57)
      {
        uint64_t v56 = (uint64_t *)v63;
      }
      else
      {
        uint64_t v65 = *(void *)(a1 + 72);
        if (*(void *)(v65 + 8 * v64))
        {
          double v66 = *(void **)v63;
          if (*(void *)v63)
          {
            int64x2_t v67 = (void *)v63;
            while (1)
            {
              uint64_t v68 = v66;
              if (!KB::operator==((unsigned __int16 *)(v63 + 16), (unsigned __int16 *)v66 + 8)) {
                break;
              }
              double v66 = (void *)*v68;
              int64x2_t v67 = v68;
              if (!*v68) {
                goto LABEL_131;
              }
            }
            double v66 = v68;
            uint64_t v68 = v67;
LABEL_131:
            unint64_t v44 = v97;
            unint64_t v59 = v93;
          }
          else
          {
            uint64_t v68 = (void *)v63;
          }
          *uint64_t v56 = (uint64_t)v66;
          *uint64_t v68 = **(void **)(*(void *)(a1 + 72) + 8 * v64);
          **(void **)(*(void *)(a1 + 72) + 8 * v64) = v63;
        }
        else
        {
          *(void *)(v65 + 8 * v64) = v56;
          uint64_t v56 = (uint64_t *)v63;
          size_t v57 = v64;
        }
      }
      uint64_t v63 = *v56;
    }
    while (*v56);
    unint64_t v45 = v51;
    long long v3 = v91;
    uint64_t v41 = v92;
  }
  else
  {
LABEL_135:
    unint64_t v45 = v51;
    uint64_t v41 = v92;
  }
LABEL_145:
  uint8x8_t v70 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
  v70.i16[0] = vaddlv_u8(v70);
  unint64_t v71 = v70.u32[0];
  if (v70.u32[0] > 1uLL)
  {
    unint64_t v72 = v44;
    if (v45 <= v44) {
      unint64_t v72 = v44 % v45;
    }
  }
  else
  {
    unint64_t v72 = (v45 - 1) & v44;
  }
  uint64_t v73 = *(unsigned __int16 **)(*(void *)(a1 + 72) + 8 * v72);
  uint64_t v94 = *(void *)(a1 + 72);
  if (v73)
  {
    uint64_t v74 = (CGRect **)v3;
    uint64_t v75 = *(unsigned __int16 **)v73;
    if (*(void *)v73)
    {
      uint64_t v76 = v41;
      int v77 = 0;
      do
      {
        uint64_t v78 = v75;
        unint64_t v79 = *((void *)v75 + 1);
        if (v71 > 1)
        {
          unint64_t v80 = v79;
          if (v79 >= v45) {
            unint64_t v80 = v79 % v45;
          }
        }
        else
        {
          unint64_t v80 = v79 & (v45 - 1);
        }
        if (v80 != v72) {
          break;
        }
        if (v79 == v44)
        {
          BOOL v81 = KB::operator==(v78 + 8, v76);
          unint64_t v44 = v97;
        }
        else
        {
          BOOL v81 = 0;
        }
        if (v77 & !v81) {
          break;
        }
        v77 |= v81;
        uint64_t v75 = *(unsigned __int16 **)v78;
        uint64_t v73 = v78;
      }
      while (*(void *)v78);
    }
  }
  else
  {
    uint64_t v74 = (CGRect **)v3;
  }
  if (v71 > 1)
  {
    double v82 = v74;
    uint64_t v83 = v96;
    if (v45 <= v44) {
      v44 %= v45;
    }
  }
  else
  {
    unint64_t v44 = (v45 - 1) & v44;
    double v82 = v74;
    uint64_t v83 = v96;
  }
  if (!v73)
  {
    double v85 = *v95;
    uint64_t *v83 = (uint64_t)*v95;
    *uint64_t v95 = v83;
    *(void *)(v94 + 8 * v44) = v95;
    if (!v85) {
      goto LABEL_182;
    }
    unint64_t v84 = v85[1];
    if (v71 > 1)
    {
      if (v84 >= v45) {
        v84 %= v45;
      }
    }
    else
    {
      v84 &= v45 - 1;
    }
    goto LABEL_181;
  }
  uint64_t *v83 = *(void *)v73;
  *(void *)uint64_t v73 = v83;
  if (*v83)
  {
    unint64_t v84 = *(void *)(*v83 + 8);
    if (v71 > 1)
    {
      if (v84 >= v45) {
        v84 %= v45;
      }
    }
    else
    {
      v84 &= v45 - 1;
    }
    if (v84 != v44) {
LABEL_181:
    }
      *(void *)(*(void *)(a1 + 72) + 8 * v84) = v83;
  }
LABEL_182:
  ++*(void *)(a1 + 96);
  float Width = CGRectGetWidth((*v82)[2]);
  *(float *)&uint64_t v98 = Width * 0.5;
  uint64_t v87 = std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float &&>,std::tuple<>>((uint64_t **)(a1 + 152), &v98, Width * 0.5);
  ++*((_DWORD *)v87 + 8);
  float Height = CGRectGetHeight((*v82)[2]);
  *(float *)&uint64_t v98 = Height * 0.5;
  uint64_t result = std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float &&>,std::tuple<>>((uint64_t **)(a1 + 176), &v98, Height * 0.5);
  ++*((_DWORD *)result + 8);
  if ((WORD2((*v82)[1].size.height) & 2) != 0) {
    ++*(_DWORD *)(a1 + 200);
  }
  return result;
}

void std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::push_back[abi:nn180100](atomic_uint ***a1, atomic_uint *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v5 - *a1;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    long long v13 = (atomic_uint **)&v12[8 * v8];
    *long long v13 = a2;
    if (a2)
    {
      atomic_fetch_add(a2, 1u);
      uint64_t v7 = *a1;
      uint64_t v5 = a1[1];
    }
    unint64_t v14 = &v12[8 * v11];
    int v6 = v13 + 1;
    if (v5 == v7)
    {
      int64x2_t v16 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      do
      {
        long long v15 = *--v5;
        *uint64_t v5 = 0;
        *--long long v13 = v15;
      }
      while (v5 != v7);
      int64x2_t v16 = *(int64x2_t *)a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = (atomic_uint **)v14;
    float v18 = (char *)v16.i64[1];
    float v17 = (char *)v16.i64[0];
    while (v18 != v17)
    {
      uint64_t v20 = *((void *)v18 - 1);
      v18 -= 8;
      uint64_t v19 = v20;
      if (v20) {
        WTF::RefCounted<TI::Favonius::Key>::deref(v19);
      }
    }
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    if (a2) {
      atomic_fetch_add(a2, 1u);
    }
    int v6 = v5 + 1;
  }
  a1[1] = v6;
}

uint64_t **std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float &&>,std::tuple<>>(uint64_t **a1, _DWORD *a2, float a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        float v8 = *((float *)v5 + 7);
        if (v8 <= a3) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v5;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a3) {
        break;
      }
      uint64_t v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a2;
    *((_DWORD *)v7 + 8) = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    unsigned __int16 v7[2] = v9;
    *int v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

atomic_uint *TI::Favonius::KeyboardLayout::find_nearest_key@<X0>(atomic_uint *this@<X0>, CGPoint a2@<0:D0, 8:D1>, atomic_uint **a3@<X8>)
{
  unint64_t v4 = (atomic_uint **)*((void *)this + 1);
  uint64_t v5 = (atomic_uint **)*((void *)this + 2);
  if (v4 == v5)
  {
    unint64_t v9 = 0;
  }
  else
  {
    double y = a2.y;
    double x = a2.x;
    this = 0;
    float v8 = INFINITY;
    do
    {
      unint64_t v9 = *v4;
      float v10 = sqrt((*((double *)*v4 + 13) - y) * (*((double *)*v4 + 13) - y)+ (*((double *)*v4 + 12) - x) * (*((double *)*v4 + 12) - x));
      if (v8 <= v10)
      {
        unint64_t v9 = this;
        float v10 = v8;
      }
      else
      {
        atomic_fetch_add(v9, 1u);
        if (this) {
          WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)this);
        }
      }
      ++v4;
      float v8 = v10;
      this = v9;
    }
    while (v4 != v5);
  }
  *a3 = v9;
  return this;
}

uint64_t TI::Favonius::KeyboardLayout::find_key_for_touch@<X0>(uint64_t this@<X0>, CGPoint a2@<0:D0, 8:D1>, CGRect **a3@<X8>)
{
  unint64_t v4 = *(CGRect ***)(this + 8);
  uint64_t v5 = *(CGRect ***)(this + 16);
  if (v4 == v5)
  {
    float v10 = 0;
LABEL_11:
    *a3 = v10;
  }
  else
  {
    double y = a2.y;
    double x = a2.x;
    uint64_t v8 = 0;
    float v9 = INFINITY;
    while (1)
    {
      v13.double x = x;
      v13.double y = y;
      this = CGRectContainsPoint((*v4)[2], v13);
      float v10 = *v4;
      if (this) {
        break;
      }
      float v11 = sqrt((v10[3].origin.y - y) * (v10[3].origin.y - y) + (v10[3].origin.x - x) * (v10[3].origin.x - x));
      if (v9 <= v11)
      {
        float v10 = (CGRect *)v8;
        float v11 = v9;
      }
      else
      {
        atomic_fetch_add((atomic_uint *volatile)v10, 1u);
        if (v8) {
          this = WTF::RefCounted<TI::Favonius::Key>::deref(v8);
        }
      }
      ++v4;
      float v9 = v11;
      uint64_t v8 = (uint64_t)v10;
      if (v4 == v5) {
        goto LABEL_11;
      }
    }
    *a3 = v10;
    if (v10) {
      atomic_fetch_add((atomic_uint *volatile)v10, 1u);
    }
    if (v8)
    {
      return WTF::RefCounted<TI::Favonius::Key>::deref(v8);
    }
  }
  return this;
}

uint64_t TI::Favonius::KeyboardLayout::enumerate_keys(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  for (uint64_t i = *(void *)(result + 16); v2 != i; v2 += 8)
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v2);
  return result;
}

void TI::Favonius::KeyboardLayout::enumerate_keys_in_centroid_distance_order(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  *(double *)&long long v35 = a3;
  *((double *)&v35 + 1) = a4;
  unint64_t v4 = *(atomic_uint ***)(a1 + 8);
  uint64_t v5 = *(atomic_uint ***)(a1 + 16);
  if (v4 != v5)
  {
    do
    {
      uint64_t v7 = *v4++;
      std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::push_back[abi:nn180100](&v32, v7);
      uint64_t v8 = v32;
      uint64_t v9 = v33;
      *(_OWORD *)uint64_t v31 = v35;
      long long v36 = v35;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::KeyboardLayout::enumerate_keys_in_centroid_distance_order(CGPoint,void({block_pointer})(WTF::RefPtr<TI::Favonius::LayoutKey> const&))::$_0 &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::LayoutKey>*>>((uint64_t)v32, v33, (double *)&v36, (v33 - (uint64_t)v32) >> 3);
    }
    while (v4 != v5);
    for (; v8 != (atomic_uint **)v9; uint64_t v33 = v9)
    {
      (*(void (**)(uint64_t, atomic_uint **))(a2 + 16))(a2, v8);
      double v10 = v31[0];
      long long v36 = *(_OWORD *)v31;
      uint64_t v11 = v9 - (void)v8;
      if (v9 - (uint64_t)v8 >= 9)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v11 >> 3;
        unint64_t v14 = *v8;
        *uint64_t v8 = 0;
        int64_t v15 = (unint64_t)((v11 >> 3) - 2) >> 1;
        int64x2_t v16 = (uint64_t *)v8;
        do
        {
          float v17 = &v16[v12 + 1];
          uint64_t v18 = 2 * v12;
          uint64_t v12 = (2 * v12) | 1;
          uint64_t v19 = v18 + 2;
          if (v19 < v13)
          {
            float v20 = sqrt((*(double *)(*v17 + 104) - v31[1]) * (*(double *)(*v17 + 104) - v31[1])+ (*(double *)(*v17 + 96) - v10) * (*(double *)(*v17 + 96) - v10));
            float v21 = sqrt((*(double *)(v17[1] + 104) - v31[1]) * (*(double *)(v17[1] + 104) - v31[1])+ (*(double *)(v17[1] + 96) - v10) * (*(double *)(v17[1] + 96) - v10));
            if (v20 > v21)
            {
              ++v17;
              uint64_t v12 = v19;
            }
          }
          uint64_t v22 = *v17;
          *float v17 = 0;
          uint64_t v23 = *v16;
          *int64x2_t v16 = v22;
          if (v23)
          {
            WTF::RefCounted<TI::Favonius::Key>::deref(v23);
            double v10 = v31[0];
          }
          int64x2_t v16 = v17;
        }
        while (v12 <= v15);
        long long v24 = (uint64_t *)(v9 - 8);
        if (v17 == (uint64_t *)(v9 - 8))
        {
          uint64_t v28 = *v17;
          *float v17 = (uint64_t)v14;
          if (v28) {
            WTF::RefCounted<TI::Favonius::Key>::deref(v28);
          }
        }
        else
        {
          uint64_t v25 = *v24;
          *long long v24 = 0;
          uint64_t v26 = *v17;
          *float v17 = v25;
          if (v26) {
            WTF::RefCounted<TI::Favonius::Key>::deref(v26);
          }
          uint64_t v27 = *v24;
          *long long v24 = (uint64_t)v14;
          if (v27) {
            WTF::RefCounted<TI::Favonius::Key>::deref(v27);
          }
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::KeyboardLayout::enumerate_keys_in_centroid_distance_order(CGPoint,void({block_pointer})(WTF::RefPtr<TI::Favonius::LayoutKey> const&))::$_0 &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::LayoutKey>*>>((uint64_t)v8, (uint64_t)(v17 + 1), (double *)&v36, ((char *)(v17 + 1) - (char *)v8) >> 3);
        }
      }
      uint64_t v30 = *(void *)(v9 - 8);
      v9 -= 8;
      uint64_t v29 = v30;
      if (v30) {
        WTF::RefCounted<TI::Favonius::Key>::deref(v29);
      }
    }
  }
  *(void *)&long long v36 = &v32;
  std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v36);
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::KeyboardLayout::enumerate_keys_in_centroid_distance_order(CGPoint,void({block_pointer})(WTF::RefPtr<TI::Favonius::LayoutKey> const&))::$_0 &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::LayoutKey>*>>(uint64_t result, uint64_t a2, double *a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v11 = *(void *)(a2 - 8);
    uint64_t v9 = (uint64_t *)(a2 - 8);
    uint64_t v10 = v11;
    double v12 = a3[1];
    double v13 = *(double *)(*v8 + 96) - *a3;
    *(float *)&double v13 = sqrt((*(double *)(*v8 + 104) - v12) * (*(double *)(*v8 + 104) - v12) + v13 * v13);
    float v14 = sqrt((*(double *)(v11 + 104) - v12) * (*(double *)(v11 + 104) - v12)+ (*(double *)(v11 + 96) - *a3) * (*(double *)(v11 + 96) - *a3));
    if (*(float *)&v13 > v14)
    {
      *uint64_t v9 = 0;
      uint64_t v15 = *v8;
      do
      {
        int64x2_t v16 = v8;
        *uint64_t v8 = 0;
        uint64_t v17 = *v9;
        *uint64_t v9 = v15;
        if (v17) {
          WTF::RefCounted<TI::Favonius::Key>::deref(v17);
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        double v18 = a3[1];
        uint64_t v15 = *v8;
        double v19 = *(double *)(*v8 + 96) - *a3;
        *(float *)&double v19 = sqrt((*(double *)(*v8 + 104) - v18) * (*(double *)(*v8 + 104) - v18) + v19 * v19);
        float v20 = sqrt((*(double *)(v10 + 104) - v18) * (*(double *)(v10 + 104) - v18)+ (*(double *)(v10 + 96) - *a3) * (*(double *)(v10 + 96) - *a3));
        uint64_t v9 = v16;
      }
      while (*(float *)&v19 > v20);
      uint64_t result = *v16;
      *int64x2_t v16 = v10;
      if (result)
      {
        return WTF::RefCounted<TI::Favonius::Key>::deref(result);
      }
    }
  }
  return result;
}

uint64_t TI::Favonius::KeyboardLayout::key_for_char@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  unint64_t v3 = *(void *)(this + 40);
  if (!v3) {
    goto LABEL_17;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2;
    if (v3 <= a2) {
      unint64_t v5 = a2 % v3;
    }
  }
  else
  {
    unint64_t v5 = (v3 - 1) & a2;
  }
  uint64_t v6 = *(uint64_t ***)(*(void *)(this + 32) + 8 * v5);
  if (!v6) {
    goto LABEL_17;
  }
  unint64_t v7 = *v6;
  if (!v7) {
    goto LABEL_17;
  }
  while (1)
  {
    unint64_t v8 = v7[1];
    if (v8 == a2) {
      break;
    }
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= v3) {
        v8 %= v3;
      }
    }
    else
    {
      v8 &= v3 - 1;
    }
    if (v8 != v5) {
      goto LABEL_17;
    }
LABEL_16:
    unint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v7 + 4) != a2) {
    goto LABEL_16;
  }
  this = v7[3];
  if (!this)
  {
LABEL_17:
    *a3 = 0;
    return this;
  }
  atomic_fetch_add((atomic_uint *volatile)this, 1u);
  *a3 = this;
  atomic_fetch_add((atomic_uint *volatile)this, 1u);
  return WTF::RefCounted<TI::Favonius::Key>::deref(this);
}

float TI::Favonius::KeyboardLayout::enumerate_keys_with_sort_key(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = (const char *)*a2;
  if (v6 <= 0xE) {
    unint64_t v7 = (KB::String *)(a2 + 1);
  }
  else {
    unint64_t v7 = (KB::String *)*((void *)a2 + 1);
  }
  unsigned int v8 = KB::String::hash(v7, v6);
  unint64_t v10 = *(void *)(a1 + 80);
  if (!v10) {
    return *(float *)v9.i32;
  }
  uint64_t v11 = v8;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v12 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v13 = v8;
    if (v10 <= v8) {
      unint64_t v13 = v8 % v10;
    }
  }
  else
  {
    unint64_t v13 = (v10 - 1) & v8;
  }
  float v14 = *(unsigned __int16 ***)(*(void *)(a1 + 72) + 8 * v13);
  if (!v14) {
    return *(float *)v9.i32;
  }
  uint64_t v15 = *v14;
  if (!*v14) {
    return *(float *)v9.i32;
  }
  while (1)
  {
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 == v11) {
      break;
    }
    if (v12 > 1)
    {
      if (v16 >= v10) {
        v16 %= v10;
      }
    }
    else
    {
      v16 &= v10 - 1;
    }
    if (v16 != v13) {
      return *(float *)v9.i32;
    }
LABEL_19:
    uint64_t v15 = *(unsigned __int16 **)v15;
    if (!v15) {
      return *(float *)v9.i32;
    }
  }
  if (!KB::operator==(v15 + 8, a2)) {
    goto LABEL_19;
  }
  uint64_t v17 = v15;
  do
    uint64_t v17 = *(unsigned __int16 **)v17;
  while (v17 && KB::operator==(v17 + 8, a2));
  while (v15 != v17)
  {
    uint64_t v18 = *(void *)(a3 + 24);
    if (!v18)
    {
      double v19 = (TI::Favonius::KeyboardLayout *)std::__throw_bad_function_call[abi:nn180100]();
      *(float *)v9.i32 = TI::Favonius::KeyboardLayout::median_key_half_width(v19);
      return *(float *)v9.i32;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 48))(v18, (uint64_t *)v15 + 4);
    uint64_t v15 = *(unsigned __int16 **)v15;
  }
  return *(float *)v9.i32;
}

float TI::Favonius::KeyboardLayout::median_key_half_width(TI::Favonius::KeyboardLayout *this)
{
  id v1 = (float *)*((void *)this + 19);
  uint64_t v2 = (char *)this + 160;
  if (v1 != (float *)((char *)this + 160))
  {
    int64_t v3 = (unint64_t)((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3) >> 1;
    while (1)
    {
      int64_t v4 = *((int *)v1 + 8);
      BOOL v5 = v3 < v4;
      v3 -= v4;
      if (v5) {
        break;
      }
      uint64_t v6 = (char *)*((void *)v1 + 1);
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (char *)*((void *)v1 + 2);
          BOOL v8 = *(void *)v7 == (void)v1;
          id v1 = (float *)v7;
        }
        while (!v8);
      }
      id v1 = (float *)v7;
      if (v7 == v2) {
        return 15.0;
      }
    }
  }
  if (v1 == (float *)v2) {
    return 15.0;
  }
  else {
    return v1[7];
  }
}

float TI::Favonius::KeyboardLayout::median_key_half_height(TI::Favonius::KeyboardLayout *this)
{
  id v1 = (float *)*((void *)this + 22);
  uint64_t v2 = (char *)this + 184;
  if (v1 != (float *)((char *)this + 184))
  {
    int64_t v3 = (unint64_t)((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3) >> 1;
    while (1)
    {
      int64_t v4 = *((int *)v1 + 8);
      BOOL v5 = v3 < v4;
      v3 -= v4;
      if (v5) {
        break;
      }
      uint64_t v6 = (char *)*((void *)v1 + 1);
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (char *)*((void *)v1 + 2);
          BOOL v8 = *(void *)v7 == (void)v1;
          id v1 = (float *)v7;
        }
        while (!v8);
      }
      id v1 = (float *)v7;
      if (v7 == v2) {
        return 22.0;
      }
    }
  }
  if (v1 == (float *)v2) {
    return 22.0;
  }
  else {
    return v1[7];
  }
}

float TI::Favonius::KeyboardLayout::get_horizontal_center(TI::Favonius::KeyboardLayout *this)
{
  BOOL IsNull = CGRectIsNull(*(CGRect *)((char *)this + 120));
  float result = 0.0;
  if (!IsNull) {
    return CGRectGetMidX(*(CGRect *)((char *)this + 120));
  }
  return result;
}

BOOL TI::Favonius::KeyboardLayout::is_far_away_point(CGFloat *this, CGPoint a2)
{
  double y = a2.y;
  double x = a2.x;
  float v5 = TI::Favonius::KeyboardLayout::median_key_half_height((TI::Favonius::KeyboardLayout *)this);
  CGFloat v7 = this[15];
  CGFloat v6 = this[16];
  CGFloat v9 = this[17];
  CGFloat v8 = this[18];
  v14.origin.double x = v7;
  v14.origin.double y = v6;
  v14.size.width = v9;
  v14.size.height = v8;
  if (x >= CGRectGetMinX(v14))
  {
    v16.origin.double x = v7;
    v16.origin.double y = v6;
    v16.size.width = v9;
    v16.size.height = v8;
    double v10 = 0.0;
    if (CGRectGetMaxX(v16) < x)
    {
      v17.origin.double x = v7;
      v17.origin.double y = v6;
      v17.size.width = v9;
      v17.size.height = v8;
      double v10 = x - CGRectGetMaxX(v17);
    }
  }
  else
  {
    v15.origin.double x = v7;
    v15.origin.double y = v6;
    v15.size.width = v9;
    v15.size.height = v8;
    double v10 = CGRectGetMinX(v15) - x;
  }
  v18.origin.double x = v7;
  v18.origin.double y = v6;
  v18.size.width = v9;
  v18.size.height = v8;
  if (y >= CGRectGetMinY(v18))
  {
    v20.origin.double x = v7;
    v20.origin.double y = v6;
    v20.size.width = v9;
    v20.size.height = v8;
    CGFloat MaxY = CGRectGetMaxY(v20);
    double v11 = 0.0;
    if (MaxY < y)
    {
      v21.origin.double x = v7;
      v21.origin.double y = v6;
      v21.size.width = v9;
      v21.size.height = v8;
      double v11 = y - CGRectGetMaxY(v21);
    }
  }
  else
  {
    v19.origin.double x = v7;
    v19.origin.double y = v6;
    v19.size.width = v9;
    v19.size.height = v8;
    double v11 = CGRectGetMinY(v19) - y;
  }
  return hypot(v10, v11) > (float)(v5 * 4.0);
}

void KB::BoostPreferedFormForSortkey::filter_candidates(KB::BoostPreferedFormForSortkey *this, KB::CandidateCollection *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  v50[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  if ((unint64_t)(0x1CAC083126E978D5 * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3)) >= 2)
  {
    uint64_t v9 = *((void *)a4 + 2);
    if (v9) {
      atomic_fetch_add((atomic_uint *volatile)v9, 1u);
    }
    uint64_t v46 = *(void *)(v9 + 8);
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v9);
    unsigned int v10 = KB::Candidate::num_words_preserving_input((void *)v4, a3, v46 + 144);
    if (v10)
    {
      uint64_t v11 = 0;
      unsigned int v12 = 0;
      uint64_t v13 = 240 * v10;
      int v14 = 1;
      do
      {
        KB::Word::capitalized_string((KB::Word *)(*((void *)a3 + 1) + v11), (uint64_t)v47);
        if (KB::string_has_uppercase_characters((KB *)v47, v15)
          || KB::string_contains_surface_form_features((KB *)v47, v16))
        {
          unsigned int v12 = v14;
        }
        if (v49 && v48 == 1) {
          free(v49);
        }
        v11 += 240;
        ++v14;
      }
      while (v13 != v11);
    }
    else
    {
      unsigned int v12 = 0;
    }
    uint64_t v17 = *(void *)a2;
    uint64_t v18 = *((void *)a2 + 1) - *(void *)a2;
    if (v18)
    {
      unint64_t v43 = a4;
      unsigned int v44 = 0;
      unint64_t v19 = 0;
      unint64_t v45 = 0x1CAC083126E978D5 * (v18 >> 3);
      do
      {
        CGRect v20 = (KB::Candidate *)(v17 + 1000 * v19);
        if (*(void *)v20 == *(void *)v4)
        {
          uint64_t v21 = v17 + 1000 * v19;
          if (!*(_WORD *)(v21 + 888)) {
            KB::Candidate::compute_string(v20);
          }
          if (!*(_WORD *)(v4 + 888)) {
            KB::Candidate::compute_string((KB::Candidate *)v4);
          }
          uint64_t v22 = *(void *)(v46 + 168);
          if (!v22) {
            std::__throw_bad_function_call[abi:nn180100]();
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22 + 48))(v22, v21 + 888, v4 + 888))
          {
            if (*(void *)v20)
            {
              uint64_t v23 = (int *)(*(void *)(v4 + 8) + 136);
              long long v24 = (int *)(*((void *)v20 + 1) + 136);
              uint64_t v25 = 240 * *(void *)v20;
              while (1)
              {
                int v27 = *v24;
                v24 += 60;
                int v26 = v27;
                int v28 = *v23;
                v23 += 60;
                if (v26 != v28) {
                  break;
                }
                v25 -= 240;
                if (!v25) {
                  goto LABEL_28;
                }
              }
            }
            else
            {
LABEL_28:
              if (KB::Candidate::num_words_preserving_input(v20, a3, v46 + 144) >= v12)
              {
                if (*(void *)v20 == v12)
                {
                  unsigned int v29 = 0;
                }
                else
                {
                  unsigned int v29 = 0;
                  uint64_t v30 = -240 * v12 + 240 * *(void *)v20;
                  uint64_t v31 = (unsigned int *)(*((void *)v20 + 1) + 240 * v12 + 104);
                  do
                  {
                    unsigned int v32 = *v31;
                    v31 += 60;
                    v29 += (v32 >> 3) & 1;
                    v30 -= 240;
                  }
                  while (v30);
                }
                unsigned int v33 = v44;
                unint64_t v34 = v45;
                if (v44 < v29) {
                  unint64_t v34 = v19;
                }
                unint64_t v45 = v34;
                if (v44 <= v29) {
                  unsigned int v33 = v29;
                }
                unsigned int v44 = v33;
              }
            }
          }
        }
        ++v19;
        uint64_t v17 = *(void *)a2;
        unint64_t v35 = 0x1CAC083126E978D5 * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
      }
      while (v19 < v35);
      if (v45)
      {
        if (v45 < v35)
        {
          float v36 = *(float *)(v17 + 744);
          float v37 = v36 + logf(*((float *)this + 2) * 1.1);
          std::__rotate_forward[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<KB::Candidate *>>((uint64_t *)v17, (uint64_t *)(v17 + 1000 * v45), (uint64_t *)(v17 + 1000 * v45 + 1000));
          float64x2_t v38 = *(KB::Candidate **)a2;
          *(float *)(*(void *)a2 + 744) = v37;
          double v39 = (__CFString *)*((void *)v43 + 7);
          if (v39)
          {
            KB::Candidate::capitalized_string(v38, (uint64_t)v47);
            uint64_t v41 = (const char *)v49;
            if (!v49) {
              uint64_t v41 = (const char *)v50;
            }
            if (v47[0]) {
              uint64_t v42 = v41;
            }
            else {
              uint64_t v42 = "";
            }
            KB::append_format(v39, (__CFString *)"[%s] %s\n", v40, v42, "filter_candidates");
            if (v49)
            {
              if (v48 == 1) {
                free(v49);
              }
            }
          }
        }
      }
    }
  }
}

const char *KB::BoostPreferedFormForSortkey::filter_description(KB::BoostPreferedFormForSortkey *this)
{
  return "BoostPreferedFormForSortkey";
}

void KB::BoostPreferedFormForSortkey::~BoostPreferedFormForSortkey(KB::BoostPreferedFormForSortkey *this)
{
}

void KB::BoostMinimumVariation::filter_candidates(KB::BoostMinimumVariation *this, KB::Candidate **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (float *)*a2;
  if (*a2 != a2[1])
  {
    if (!*((_WORD *)v4 + 444)) {
      KB::Candidate::compute_string(*a2);
    }
    KB::String::String((KB::String *)v57, (const KB::String *)(v4 + 222));
    float v9 = expf(v4[186]);
    if (!*((_WORD *)v4 + 444)) {
      KB::Candidate::compute_string((KB::Candidate *)v4);
    }
    int v11 = KB::count_word_medial_punctuation((KB *)(v4 + 222), v8);
    if (!*((_WORD *)v4 + 444)) {
      KB::Candidate::compute_string((KB::Candidate *)v4);
    }
    int v12 = KB::count_precomposed_diacritic_letters((KB *)(v4 + 222), v10);
    uint64_t v13 = *((void *)a4 + 2);
    if (v13) {
      atomic_fetch_add((atomic_uint *volatile)v13, 1u);
    }
    uint64_t v14 = *(void *)(v13 + 8);
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v13);
    CGRect v15 = *a2;
    CGRect v16 = (uint64_t *)a2[1];
    if ((unint64_t)(0x1CAC083126E978D5 * (((char *)v16 - (char *)*a2) >> 3)) >= 2)
    {
      uint64_t v45 = v14;
      unsigned int v46 = 0;
      uint64_t v47 = v14 + 144;
      unsigned int v17 = v12 + v11;
      unint64_t v18 = 1;
      do
      {
        unint64_t v19 = (float *)((char *)v15 + 1000 * v18);
        if ((float)(expf(v19[186]) * *((float *)this + 2)) < v9) {
          break;
        }
        uint64_t v21 = (char *)v15 + 1000 * v18;
        if (!*((_WORD *)v21 + 444)) {
          KB::Candidate::compute_string((KB::Candidate *)((char *)v15 + 1000 * v18));
        }
        uint64_t v22 = (KB *)(v21 + 888);
        int v24 = KB::count_word_medial_punctuation((KB *)(v21 + 888), v20);
        if (!*(_WORD *)v22) {
          KB::Candidate::compute_string((KB::Candidate *)v19);
        }
        unsigned int v25 = KB::count_precomposed_diacritic_letters(v22, v23) + v24;
        if (v25 < v17
          && KB::CandidateFilter::is_suggestible_for_input((uint64_t *)v19, a3, 1, (KB::BoostMinimumVariation *)((char *)this + 16), v47, 0))
        {
          if (!*(void *)v19) {
            goto LABEL_66;
          }
          uint64_t v26 = 240 * *(void *)v19 - 240;
          int v27 = (int *)(*((void *)v19 + 1) + 120);
          do
          {
            int v29 = *v27;
            v27 += 60;
            int v28 = v29;
            if (v29) {
              BOOL v30 = 1;
            }
            else {
              BOOL v30 = v26 == 0;
            }
            v26 -= 240;
          }
          while (!v30);
          if (!v28)
          {
LABEL_66:
            if (!*(_WORD *)v22) {
              KB::Candidate::compute_string((KB::Candidate *)v19);
            }
            uint64_t v31 = *(void *)(v45 + 168);
            if (!v31)
            {
              unsigned int v44 = (KB::BoostMinimumVariation *)std::__throw_bad_function_call[abi:nn180100]();
              KB::BoostMinimumVariation::filter_description(v44);
              return;
            }
            int v32 = (*(uint64_t (**)(uint64_t, KB *, unsigned char *))(*(void *)v31 + 48))(v31, v22, v57);
            if (v32) {
              unsigned int v17 = v25;
            }
            unsigned int v33 = v46;
            if (v32) {
              unsigned int v33 = v18;
            }
            unsigned int v46 = v33;
          }
        }
        unint64_t v18 = (v18 + 1);
        CGRect v15 = *a2;
        CGRect v16 = (uint64_t *)a2[1];
      }
      while (0x1CAC083126E978D5 * (((char *)v16 - (char *)*a2) >> 3) > v18);
      if (v46)
      {
        unint64_t v34 = (float *)((char *)v15 + 1000 * v46);
        float v35 = expf(v34[186]);
        v34[186] = logf(v35 * *((float *)this + 2));
        float v36 = (__CFString *)*((void *)a4 + 7);
        if (v36)
        {
          KB::Candidate::capitalized_string((KB::Candidate *)((char *)v15 + 1000 * v46), (uint64_t)v53);
          float v37 = (const char *)v55;
          if (!v55) {
            float v37 = (const char *)&v56;
          }
          if (v53[0]) {
            float64x2_t v38 = v37;
          }
          else {
            float64x2_t v38 = "";
          }
          KB::Candidate::capitalized_string((KB::Candidate *)v4, (uint64_t)v49);
          unint64_t v40 = (const char *)v51;
          if (!v51) {
            unint64_t v40 = (const char *)&v52;
          }
          if (v49[0]) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = "";
          }
          KB::append_format(v36, (__CFString *)"[%s] boosted over [%s] by %s\n", v39, v38, v41, "filter_candidates");
          if (v51 && v50 == 1) {
            free(v51);
          }
          if (v55 && v54 == 1) {
            free(v55);
          }
          CGRect v15 = *a2;
          CGRect v16 = (uint64_t *)a2[1];
        }
        unint64_t v42 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((char *)v16 - (char *)v15) >> 3));
        if (v16 == (uint64_t *)v15) {
          uint64_t v43 = 0;
        }
        else {
          uint64_t v43 = v42;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,KB::Candidate *,false>((unint64_t)v15, v16, v43, 1);
      }
    }
    if (v58)
    {
      if (v57[6] == 1) {
        free(v58);
      }
    }
  }
}

const char *KB::BoostMinimumVariation::filter_description(KB::BoostMinimumVariation *this)
{
  return "BoostMinimumVariation";
}

void KB::BoostMinimumVariation::~BoostMinimumVariation(KB::BoostMinimumVariation *this)
{
}

void KB::BoostCaseVariantsOfTopCandidate::filter_candidates(KB::BoostCaseVariantsOfTopCandidate *this, float **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  float v5 = a2[1];
  if (*a2 != v5 && (unint64_t)(0x1CAC083126E978D5 * (((char *)v5 - (char *)v4) >> 3)) >= 2)
  {
    int v8 = 0;
    unsigned int v9 = 2;
    uint64_t v10 = 1;
    do
    {
      if (KB::BoostCaseVariantsOfTopCandidate::is_last_word_case_variant((KB::BoostCaseVariantsOfTopCandidate *)v4, (const KB::Candidate *)&v4[250 * v10], a3))
      {
        int v11 = (__CFString *)*((void *)a4 + 7);
        if (v11)
        {
          KB::Candidate::capitalized_string((KB::Candidate *)&(*a2)[250 * v10], (uint64_t)v29);
          uint64_t v13 = (const char *)v31;
          if (!v31) {
            uint64_t v13 = (const char *)v32;
          }
          uint64_t v14 = "";
          if (v29[0]) {
            uint64_t v14 = v13;
          }
          KB::append_format(v11, (__CFString *)"[%s] boosted capital case variant to the next spot that isn't a capital case variant\n", v12, v14);
          if (v31 && v30 == 1) {
            free(v31);
          }
        }
        CGRect v15 = (uint64_t *)&(*a2)[250 * v8 + 250];
        CGRect v16 = (uint64_t *)&(*a2)[250 * v10];
        if (v15 != v16) {
          std::__rotate_forward[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<KB::Candidate *>>(v15, v16, v16 + 125);
        }
        ++v8;
      }
      uint64_t v10 = v9;
      uint64_t v4 = *a2;
      unint64_t v17 = 0x1CAC083126E978D5 * (((char *)a2[1] - (char *)*a2) >> 3);
    }
    while (v17 > v9++);
    if (v8)
    {
      unint64_t v19 = (v8 + 1);
      if (v17 > v19 && v19 >= 2)
      {
        float v20 = v4[186];
        float v21 = (float)(v4[250 * v19 + 186] - v20) / (float)v19;
        uint64_t v22 = 1;
        uint64_t v23 = 250;
        do
        {
          int v24 = &(*a2)[v23];
          v24[186] = v20 + (float)((float)v22 * v21);
          unsigned int v25 = (__CFString *)*((void *)a4 + 7);
          if (v25)
          {
            KB::Candidate::capitalized_string((KB::Candidate *)v24, (uint64_t)v29);
            int v27 = (const char *)v31;
            if (!v31) {
              int v27 = (const char *)v32;
            }
            int v28 = "";
            if (v29[0]) {
              int v28 = v27;
            }
            KB::append_format(v25, (__CFString *)"[%s] updated omega after boost so order will be preserved after sort\n", v26, v28);
            if (v31)
            {
              if (v30 == 1) {
                free(v31);
              }
            }
          }
          ++v22;
          v23 += 250;
        }
        while (v19 != v22);
      }
    }
  }
}

BOOL KB::BoostCaseVariantsOfTopCandidate::is_last_word_case_variant(KB::BoostCaseVariantsOfTopCandidate *this, const KB::Candidate *a2, const KB::Candidate *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)this) {
    BOOL v3 = *(_DWORD *)this == *(_DWORD *)a2;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  while (++v7 < (unint64_t)*(void *)this)
  {
    KB::Word::capitalized_string((KB::Word *)(*((void *)this + 1) + v6), (uint64_t)v14);
    KB::Word::capitalized_string((KB::Word *)(*((void *)a2 + 1) + v6), (uint64_t)v11);
    BOOL v8 = KB::String::equal((KB::String *)v14, (const KB::String *)v11, 1);
    if (v13 && v12 == 1) {
      free(v13);
    }
    if (v16 && v15 == 1) {
      free(v16);
    }
    v6 += 240;
    if (!v8) {
      return 0;
    }
  }
  KB::Word::capitalized_string((KB::Word *)(*((void *)this + 1) + 240 * *(void *)this - 240), (uint64_t)v14);
  KB::Word::capitalized_string((KB::Word *)(*((void *)a2 + 1) + 240 * *(void *)a2 - 240), (uint64_t)v11);
  BOOL v9 = KB::String::equal((KB::String *)v14, (const KB::String *)v11, 0);
  if (v13 && v12 == 1) {
    free(v13);
  }
  if (v16 && v15 == 1) {
    free(v16);
  }
  return v9;
}

const char *KB::BoostCaseVariantsOfTopCandidate::filter_description(KB::BoostCaseVariantsOfTopCandidate *this)
{
  return "BoostCaseVariantsOfTopCandidate";
}

void KB::BoostCaseVariantsOfTopCandidate::~BoostCaseVariantsOfTopCandidate(KB::BoostCaseVariantsOfTopCandidate *this)
{
}

void KB::ExemptHighFrequencyWordsFromNoSuggest::filter_candidates(KB::ExemptHighFrequencyWordsFromNoSuggest *this, KB::CandidateCollection *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)a2;
  int v24 = (void *)*((void *)a2 + 1);
  if (*(void **)a2 == v24) {
    return;
  }
  int v6 = 0;
  do
  {
    if (*v4)
    {
      uint64_t v7 = v4[1];
      uint64_t v8 = 240 * *v4;
      while (1)
      {
        int v9 = *(_DWORD *)(v7 + 104);
        if ((v9 & 0x86) == 0) {
          goto LABEL_15;
        }
        if (*(float *)(v7 + 56) > 0.00001) {
          break;
        }
LABEL_16:
        v7 += 240;
        v8 -= 240;
        if (!v8) {
          goto LABEL_17;
        }
      }
      *(_DWORD *)(v7 + 104) = v9 & 0xFFFFFF79;
      uint64_t v10 = (__CFString *)*((void *)a4 + 7);
      if (v10)
      {
        KB::Word::capitalized_string((KB::Word *)v7, (uint64_t)v25);
        char v12 = (const char *)v27;
        if (!v27) {
          char v12 = (const char *)v28;
        }
        uint64_t v13 = "";
        if (v25[0]) {
          uint64_t v13 = v12;
        }
        KB::append_format(v10, (__CFString *)"[%s] updated no-suggest/no-predict flags for high frequency words\n", v11, v13);
        if (v27 && v26 == 1) {
          free(v27);
        }
      }
LABEL_15:
      ++v6;
      goto LABEL_16;
    }
LABEL_17:
    v4 += 125;
  }
  while (v4 != v24);
  if (!v6)
  {
    uint64_t v14 = *(void **)a2;
    char v15 = (void *)*((void *)a2 + 1);
    if (*(void **)a2 != v15)
    {
      do
      {
        if (*v14)
        {
          CGRect v16 = (KB::Word *)v14[1];
          uint64_t v17 = 240 * *v14;
          do
          {
            int v18 = *((_DWORD *)v16 + 26);
            if ((v18 & 0x86) != 0)
            {
              *((_DWORD *)v16 + 26) = v18 & 0xFFFFFF79;
              unint64_t v19 = (__CFString *)*((void *)a4 + 7);
              if (v19)
              {
                KB::Word::capitalized_string(v16, (uint64_t)v25);
                float v21 = (const char *)v27;
                if (!v27) {
                  float v21 = (const char *)v28;
                }
                uint64_t v22 = "";
                if (v25[0]) {
                  uint64_t v22 = v21;
                }
                KB::append_format(v19, (__CFString *)"[%s] updated no-suggest/no-predict flags as there are no other suggestable candidates\n", v20, v22);
                if (v27)
                {
                  if (v26 == 1) {
                    free(v27);
                  }
                }
              }
            }
            CGRect v16 = (KB::Word *)((char *)v16 + 240);
            v17 -= 240;
          }
          while (v17);
        }
        v14 += 125;
      }
      while (v14 != v15);
    }
  }
}

const char *KB::ExemptHighFrequencyWordsFromNoSuggest::filter_description(KB::ExemptHighFrequencyWordsFromNoSuggest *this)
{
  return "ExemptHighFrequencyWordsFromNoSuggest";
}

void KB::ExemptHighFrequencyWordsFromNoSuggest::~ExemptHighFrequencyWordsFromNoSuggest(KB::ExemptHighFrequencyWordsFromNoSuggest *this)
{
}

uint64_t KB::RescoreShortWords::update_candidate_probability_if_better(KB::RescoreShortWords *this, KB::Candidate *a2, KB::Word **a3, const KB::CandidateFilterLookupContext *a4, const KB::CandidateFilterResources *a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *((void *)a5 + 3);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)a5 + 4);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v11 = *((void *)a5 + 3);
    char v12 = (std::__shared_weak_count *)*((void *)a5 + 4);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11) ^ 1;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v12);
    }
    if (v10) {
      goto LABEL_9;
    }
  }
  else
  {
    char v13 = 1;
    if (v10) {
LABEL_9:
    }
      std::__shared_weak_count::__release_shared[abi:nn180100](v10);
  }
  if ((v13 & 1) == 0)
  {
    uint64_t v69 = a4;
    uint8x8_t v70 = a2;
    unint64_t v71 = (KB::Candidate *)a3;
    unint64_t v72 = a5;
    if (*a3)
    {
      unint64_t v15 = 0;
      CGRect v16 = 0;
      uint64_t v17 = 0;
      int v18 = a3[1];
      unint64_t v19 = (KB::Word *)((char *)v18 + 240 * (void)*a3);
      do
      {
        BOOL is_linguistically_void = KB::Word::is_linguistically_void(v18);
        BOOL v21 = is_linguistically_void;
        __int16 v22 = !is_linguistically_void;
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v25 = v16 - v17;
          if (v16 - v17 <= -3) {
            goto LABEL_85;
          }
          uint64_t v26 = v25 >> 1;
          if (v15 - (unint64_t)v17 <= (v25 >> 1) + 1) {
            uint64_t v27 = v26 + 1;
          }
          else {
            uint64_t v27 = v15 - (void)v17;
          }
          if (v15 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v28 = v27;
          }
          if (v28) {
            uint64_t v28 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::TokenMetadata>>(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          char v30 = (char *)(v28 + 2 * v26);
          if (v21) {
            __int16 v31 = 256;
          }
          else {
            __int16 v31 = 0;
          }
          *(_WORD *)char v30 = v31 | v22;
          int v24 = v30 + 2;
          if (v16 != v17)
          {
            do
            {
              __int16 v32 = *((_WORD *)v16 - 1);
              v16 -= 2;
              *((_WORD *)v30 - 1) = v32;
              v30 -= 2;
            }
            while (v16 != v17);
            CGRect v16 = v17;
          }
          uint64_t v17 = v30;
          unint64_t v15 = v28 + 2 * v29;
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          if (is_linguistically_void) {
            __int16 v23 = 256;
          }
          else {
            __int16 v23 = 0;
          }
          *(_WORD *)CGRect v16 = v23 | v22;
          int v24 = v16 + 2;
        }
        int v18 = (KB::Word *)((char *)v18 + 240);
        CGRect v16 = v24;
      }
      while (v18 != v19);
    }
    else
    {
      int v24 = 0;
      uint64_t v17 = 0;
    }
    long long v79 = 0uLL;
    uint64_t v80 = 0;
    uint64_t v34 = *((void *)v72 + 3);
    unsigned int v33 = (std::__shared_weak_count *)*((void *)v72 + 4);
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v35 = v71;
    KB::Candidate::Candidate((KB::Candidate *)&v82, v71);
    float v36 = (KB::Candidate *)operator new(0x3E8uLL);
    float v37 = (char *)v36 + 1000;
    v76[0] = v36;
    v76[2] = (char *)v36 + 1000;
    KB::Candidate::Candidate(v36, (const KB::Candidate *)&v82);
    v76[1] = v37;
    int64_t v38 = v24 - v17;
    if (v24 == v17)
    {
      double v39 = 0;
      unint64_t v40 = 0;
    }
    else
    {
      if (v24 - v17 < 0) {
LABEL_85:
      }
        abort();
      double v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::TokenMetadata>>(v38 >> 1);
      memmove(v39, v17, v38);
      unint64_t v40 = &v39[v38];
    }
    uint64_t v41 = (void **)operator new(0x18uLL);
    unint64_t v42 = v41 + 3;
    v75[0] = v41;
    v75[2] = v41 + 3;
    v41[1] = 0;
    v41[2] = 0;
    *uint64_t v41 = 0;
    int64_t v43 = v40 - v39;
    if (v40 != v39)
    {
      unsigned int v44 = v41;
      std::vector<language_modeling::v1::TokenMetadata>::__vallocate[abi:nn180100](v41, v43 >> 1);
      uint64_t v45 = (char *)v44[1];
      memmove(v45, v39, v43);
      unsigned int v46 = &v45[v43];
      float v35 = v71;
      v44[1] = v46;
    }
    v75[1] = v42;
    (*(void (**)(long long *__return_ptr, uint64_t, void *, void ***, uint64_t, void, void))(*(void *)v34 + 432))(&v77, v34, v76, v75, (uint64_t)v69 + 2032, *((void *)v72 + 7), 0);
    long long v73 = v77;
    long long v79 = v77;
    uint64_t v80 = v78;
    uint64_t v78 = 0;
    long long v77 = 0uLL;
    BOOL v81 = (void ***)&v77;
    std::vector<std::vector<KB::LikelihoodInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v81);
    BOOL v81 = v75;
    std::vector<std::vector<language_modeling::v1::TokenMetadata>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v81);
    if (v39) {
      operator delete(v39);
    }
    v75[0] = (void **)v76;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v75);
    KB::Candidate::~Candidate((KB::Candidate *)&v82);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v33);
    }
    if (*((void *)&v73 + 1) != (void)v73)
    {
      uint64_t v47 = *(float **)v73;
      uint64_t v48 = *(void *)(v73 + 8) - *(void *)v73;
      if (v48)
      {
        unint64_t v49 = v48 / 40;
        if (v49 <= 1) {
          unint64_t v49 = 1;
        }
        float v50 = 1.0;
        size_t v51 = v17;
        do
        {
          int v52 = *v51;
          v51 += 2;
          if (v52) {
            float v50 = v50 * *v47;
          }
          v47 += 10;
          --v49;
        }
        while (v49);
        if (!*((_WORD *)v35 + 444)) {
          KB::Candidate::compute_string(v35);
        }
        float v53 = logf(v50);
        if (v53 <= *((float *)v70 + 188))
        {
          uint64_t v14 = 0;
        }
        else
        {
          float v54 = *((float *)v35 + 187);
          float v55 = *((float *)v35 + 189);
          float v56 = *((float *)v35 + 190);
          int v74 = *((_DWORD *)v35 + 193);
          uint64_t v57 = *(void *)((char *)v35 + 764);
          *((float *)v70 + 186) = v54 + (float)(v56 * (float)(v53 + v55));
          *((float *)v70 + 187) = v54;
          *((float *)v70 + 188) = v53;
          *((float *)v70 + 189) = v55;
          *((float *)v70 + 190) = v56;
          *(void *)((char *)v70 + 764) = v57;
          *((_DWORD *)v70 + 193) = v74;
          uint64_t v58 = *(void *)v73;
          if (*(void *)(v73 + 8) != *(void *)v73)
          {
            uint64_t v59 = 0;
            uint64_t v60 = 0;
            unint64_t v61 = 0;
            uint64_t v62 = *((void *)v70 + 1);
            do
            {
              uint64_t v63 = (int *)(v58 + v59);
              int v64 = *v63;
              uint64_t v65 = v62 + v60;
              *(_DWORD *)(v62 + v60 + 56) = v63[1];
              double v66 = (const char *)(v63 + 4);
              if (*((char *)v63 + 39) < 0) {
                double v66 = *(const char **)v66;
              }
              KB::String::String((KB::String *)&v82, v66);
              KB::String::operator=((KB::String *)(v65 + 64), (KB::String *)&v82);
              if (v83) {
                BOOL v67 = BYTE6(v82) == 1;
              }
              else {
                BOOL v67 = 0;
              }
              if (v67) {
                free(v83);
              }
              uint64_t v62 = *((void *)v70 + 1);
              *(_DWORD *)(v62 + v60 + 52) = v64;
              ++v61;
              uint64_t v58 = *(void *)v73;
              v60 += 240;
              v59 += 40;
            }
            while (v61 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v73 + 8) - *(void *)v73) >> 3));
            uint64_t v14 = 1;
LABEL_78:
            double v82 = (void **)&v79;
            std::vector<std::vector<KB::LikelihoodInfo>>::__destroy_vector::operator()[abi:nn180100](&v82);
            if (!v17) {
              return v14;
            }
            goto LABEL_83;
          }
          uint64_t v14 = 1;
        }
        double v82 = (void **)&v79;
        std::vector<std::vector<KB::LikelihoodInfo>>::__destroy_vector::operator()[abi:nn180100](&v82);
LABEL_83:
        operator delete(v17);
        return v14;
      }
    }
    uint64_t v14 = 0;
    goto LABEL_78;
  }
  return 0;
}

BOOL KB::RescoreShortWords::is_word_replaceable(KB::RescoreShortWords *this, const KB::Word *a2)
{
  if (!TIIsLexiconIDEnglish(*((_DWORD *)a2 + 34))) {
    return 0;
  }
  BOOL v3 = (char *)*((void *)a2 + 1);
  if (!v3) {
    BOOL v3 = (char *)a2 + 16;
  }
  if (*(_WORD *)a2) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(__p, v4);
  BOOL v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((uint64_t)__p) != 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(uint64_t a1)
{
  id v1 = (unsigned __int8 *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v3 = v2;
  }
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  unint64_t v5 = *((void *)&KB::RescoreShortWords::short_word_map + 1);
  if (!*((void *)&KB::RescoreShortWords::short_word_map + 1)) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&KB::RescoreShortWords::short_word_map + 8));
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *((void *)&KB::RescoreShortWords::short_word_map + 1)) {
      unint64_t v9 = v4 % *((void *)&KB::RescoreShortWords::short_word_map + 1);
    }
  }
  else
  {
    unint64_t v9 = (*((void *)&KB::RescoreShortWords::short_word_map + 1) - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(KB::RescoreShortWords::short_word_map + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5) {
          v12 %= v5;
        }
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t KB::RescoreShortWords::update_candidate_probability(KB::RescoreShortWords *this, KB::Candidate *a2, KB::Word **a3, const KB::CandidateFilterLookupContext *a4, const KB::CandidateFilterResources *a5)
{
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, KB::Candidate *, KB::Word **, const KB::CandidateFilterLookupContext *, const KB::CandidateFilterResources *))(*(void *)v5 + 48))(v5, a2, a3, a4, a5);
  }
  else {
    return KB::RescoreShortWords::update_candidate_probability_if_better(0, a2, a3, a4, a5);
  }
}

void KB::RescoreShortWords::filter_candidates(KB::RescoreShortWords *this, KB::CandidateCollection *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v22 = *((void *)a2 + 1);
  if (*(void *)a2 != v22)
  {
    int v8 = 0;
    uint64_t v21 = MEMORY[0x1E4F143A8];
    do
    {
      unint64_t v9 = *(KB::Word **)v4;
      uint64_t v10 = *(void *)(v4 + 8);
      v23[0] = v21;
      v23[1] = 0x40000000;
      int v24 = ___ZNK2KB17RescoreShortWords17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke;
      uint64_t v25 = &__block_descriptor_tmp_11789;
      uint64_t v26 = this;
      if (v9)
      {
        int v11 = 0;
        uint64_t v12 = 240 * (void)v9;
        do
        {
          v11 += ((uint64_t (*)(void *, uint64_t))v24)(v23, v10);
          v10 += 240;
          v12 -= 240;
        }
        while (v12);
        BOOL v13 = v11 == 0;
        int v14 = 1 << v11;
        if (!v13 && v14 >= 2)
        {
          unsigned int v16 = 1;
          do
            v8 |= KB::RescoreShortWords::update_candidate_probability_by_replacing_short_words_using_mask(this, (KB::Word **)v4, a3, a4, v16++);
          while (v14 != v16);
        }
      }
      v4 += 1000;
    }
    while (v4 != v22);
    if (v8)
    {
      uint64_t v17 = (KB::Candidate *)*((void *)a2 + 1);
      unint64_t v18 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v17 - *(void *)a2) >> 3));
      if (v17 == *(KB::Candidate **)a2) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v18;
      }
      std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(*(uint64_t **)a2, v17, v19, 1);
    }
  }
}

uint64_t ___ZNK2KB17RescoreShortWords17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))();
}

uint64_t KB::RescoreShortWords::update_candidate_probability_by_replacing_short_words_using_mask(KB::RescoreShortWords *this, KB::Word **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4, unsigned int a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  KB::Candidate::Candidate((KB::Candidate *)v28, (const KB::Candidate *)a2);
  KB::Candidate::clear((KB::Candidate *)v28);
  if (*a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = a2[1];
    uint64_t v10 = 240 * (void)*a2;
    while (TIIsLexiconIDEnglish(*((_DWORD *)v9 + 34)))
    {
      if (*(_WORD *)v9)
      {
        if (*((void *)v9 + 1)) {
          int v11 = (char *)*((void *)v9 + 1);
        }
        else {
          int v11 = (char *)v9 + 16;
        }
      }
      else
      {
        int v11 = "";
      }
      std::string::basic_string[abi:nn180100]<0>(__p, v11);
      BOOL v13 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((uint64_t)__p);
      if (v13)
      {
        uint64_t v12 = (v8 + 1);
        if ((a5 >> v8))
        {
          int v14 = (const char *)(v13 + 40);
          if ((char)v13[63] < 0) {
            int v14 = *(const char **)v14;
          }
          KB::String::String((KB::String *)v26, v14);
          unint64_t v15 = (atomic_uint *)*((void *)a4 + 2);
          if (v15) {
            atomic_fetch_add(v15, 1u);
          }
          KB::String::String((KB::String *)v23, (const KB::String *)v26);
          KB::DictionaryContainer::word_with_string((KB::DictionaryContainer *)v15, (const KB::String *)v23, *((_DWORD *)v9 + 34), (KB::Word *)v25);
          if (v24 && v23[6] == 1) {
            free(v24);
          }
          if (v15) {
            WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v15);
          }
          KB::Candidate::append((unsigned __int16 *)v28, v25);
          KB::Word::~Word((KB::Word *)v25);
          if (v27 && v26[6] == 1) {
            free(v27);
          }
          int v16 = 0;
        }
        else
        {
          int v16 = 1;
        }
      }
      else
      {
        int v16 = 1;
        uint64_t v12 = v8;
      }
      if (v22 < 0)
      {
        operator delete(__p[0]);
        if (!v16) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
      if (v16) {
        goto LABEL_29;
      }
LABEL_30:
      unint64_t v9 = (KB::Word *)((char *)v9 + 240);
      uint64_t v8 = v12;
      v10 -= 240;
      if (!v10) {
        goto LABEL_34;
      }
    }
    uint64_t v12 = v8;
LABEL_29:
    KB::Candidate::append((unsigned __int16 *)v28, (size_t *)v9);
    goto LABEL_30;
  }
LABEL_34:
  if (!*((_WORD *)a2 + 444)) {
    KB::Candidate::compute_string((KB::Candidate *)a2);
  }
  if (!v29[0]) {
    KB::Candidate::compute_string((KB::Candidate *)v28);
  }
  if (v28 == a2 || KB::String::equal((KB::String *)(a2 + 111), (const KB::String *)v29, 1)) {
    uint64_t updated = 0;
  }
  else {
    uint64_t updated = KB::RescoreShortWords::update_candidate_probability(this, (KB::Candidate *)a2, v28, a3, a4);
  }
  KB::Candidate::~Candidate((KB::Candidate *)v28);
  return updated;
}

const char *KB::RescoreShortWords::filter_description(KB::RescoreShortWords *this)
{
  return "RescoreShortWords";
}

void KB::RescoreShortWords::~RescoreShortWords(KB::RescoreShortWords *this)
{
  *(void *)this = &unk_1F3F75CB8;
  std::__function::__value_func<BOOL ()(KB::Candidate &,KB::Candidate &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)>::~__value_func[abi:nn180100]((void *)this + 1);

  JUMPOUT(0x1E4E7BC20);
}

{
  *(void *)this = &unk_1F3F75CB8;
  std::__function::__value_func<BOOL ()(KB::Candidate &,KB::Candidate &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)>::~__value_func[abi:nn180100]((void *)this + 1);
}

uint64_t std::unordered_map<std::string,std::string>::~unordered_map[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void TI::TIInputRecognizer::update_transcoder(TI::TIInputRecognizer *this)
{
  v16[0] = 0;
  v16[1] = v16;
  void v16[2] = 0x4002000000;
  void v16[3] = __Block_byref_object_copy__11807;
  UChar32 v16[4] = __Block_byref_object_dispose__11808;
  memset(v17, 0, sizeof(v17));
  v12[0] = 0;
  v12[1] = (void **)v12;
  void v12[2] = (void **)0x4002000000;
  v12[3] = (void **)__Block_byref_object_copy__1;
  v12[4] = (void **)__Block_byref_object_dispose__2;
  std::string __p = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v2 = *((void *)this + 1);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  uint64_t v8 = ___ZN2TI17TIInputRecognizer17update_transcoderEv_block_invoke;
  unint64_t v9 = &unk_1E6E2C230;
  uint64_t v10 = v16;
  int v11 = v12;
  uint64_t v3 = *(void *)(v2 + 8);
  for (uint64_t i = *(void *)(v2 + 16); v3 != i; v3 += 8)
    v8((uint64_t)v7, v3);
  if (*((void *)this + 8))
  {
    ITTouchTranscoderUpdateKeyboardLayout();
  }
  else
  {
    TI::TIInputRecognizer::create_transcoder((uint64_t)this);
    uint64_t v5 = *((void *)this + 5);
    if (v5)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
      TI::TIInputRecognizer::load_lexicons_if_needed((uint64_t)this, *(const KB::DynamicDictionary **)(*(void *)v6 + 24));
    }
    TI::TIInputRecognizer::create_transcoder_session(this);
  }
  _Block_object_dispose(v12, 8);
  if (__p)
  {
    int v14 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(v16, 8);
  v12[0] = (void **)v17;
  std::vector<KB::retain_ptr<__CFString const*>>::__destroy_vector::operator()[abi:nn180100](v12);
}

__n128 __Block_byref_object_copy__11807(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__11808(uint64_t a1)
{
  id v1 = (void **)(a1 + 40);
  std::vector<KB::retain_ptr<__CFString const*>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__1(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN2TI17TIInputRecognizer17update_transcoderEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  KB::cf_string_impl<KB::String>((CFStringRef *)&cf, (unsigned __int16 *)(*(void *)a2 + 8));
  uint64_t v6 = (CFTypeRef *)v4[6];
  unint64_t v5 = v4[7];
  if ((unint64_t)v6 >= v5)
  {
    uint8x8_t v7 = (void *)v4[5];
    uint64_t v8 = v6 - (CFTypeRef *)v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      goto LABEL_43;
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        goto LABEL_44;
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    BOOL v13 = &v12[8 * v8];
    CFTypeRef v14 = cf;
    CFTypeRef cf = 0;
    *(void *)BOOL v13 = v14;
    uint64_t v15 = v13 + 8;
    while (v6 != v7)
    {
      uint64_t v16 = (uint64_t)*--v6;
      *uint64_t v6 = 0;
      *((void *)v13 - 1) = v16;
      v13 -= 8;
    }
    long long v17 = *(_OWORD *)(v4 + 5);
    void v4[5] = v13;
    void v4[6] = v15;
    v4[7] = &v12[8 * v11];
    unint64_t v18 = (char *)*((void *)&v17 + 1);
    uint64_t v19 = (char *)v17;
    if (*((void *)&v17 + 1) != (void)v17)
    {
      float v20 = (char *)*((void *)&v17 + 1);
      do
      {
        char v22 = (const void *)*((void *)v20 - 1);
        v20 -= 8;
        uint64_t v21 = v22;
        if (v22) {
          CFRelease(v21);
        }
        *((void *)v18 - 1) = 0;
        unint64_t v18 = v20;
      }
      while (v20 != v19);
    }
    if (v19) {
      operator delete(v19);
    }
    CFTypeRef v23 = cf;
    void v4[6] = v15;
    if (v23) {
      CFRelease(v23);
    }
  }
  else
  {
    *uint64_t v6 = cf;
    void v4[6] = v6 + 1;
  }
  uint64_t v25 = *(void *)(*(void *)a2 + 96);
  uint64_t v24 = *(void *)(*(void *)a2 + 104);
  uint64_t v27 = *(void *)(*(void *)a2 + 64);
  uint64_t v26 = *(void *)(*(void *)a2 + 72);
  uint64_t v29 = *(void *)(*(void *)a2 + 80);
  uint64_t v28 = *(void *)(*(void *)a2 + 88);
  uint64_t v30 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) - 8);
  __int16 v31 = *(void **)(*(void *)(a1 + 40) + 8);
  unsigned int v33 = (void *)v31[6];
  unint64_t v32 = v31[7];
  if ((unint64_t)v33 < v32)
  {
    *unsigned int v33 = v25;
    v33[1] = v24;
    v33[2] = v27;
    v33[3] = v26;
    void v33[4] = v29;
    v33[5] = v28;
    uint64_t v34 = v33 + 7;
    v33[6] = v30;
    goto LABEL_42;
  }
  float v35 = (void *)v31[5];
  unint64_t v36 = 0x6DB6DB6DB6DB6DB7 * (v33 - v35) + 1;
  if (v36 > 0x492492492492492) {
LABEL_43:
  }
    abort();
  unint64_t v37 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v32 - (void)v35) >> 3);
  if (2 * v37 > v36) {
    unint64_t v36 = 2 * v37;
  }
  if (v37 >= 0x249249249249249) {
    unint64_t v38 = 0x492492492492492;
  }
  else {
    unint64_t v38 = v36;
  }
  if (!v38)
  {
    double v39 = 0;
    goto LABEL_37;
  }
  if (v38 > 0x492492492492492) {
LABEL_44:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  double v39 = (char *)operator new(56 * v38);
LABEL_37:
  unint64_t v40 = &v39[8 * (v33 - v35)];
  *(void *)unint64_t v40 = v25;
  *((void *)v40 + 1) = v24;
  *((void *)v40 + 2) = v27;
  *((void *)v40 + 3) = v26;
  *((void *)v40 + 4) = v29;
  *((void *)v40 + 5) = v28;
  *((void *)v40 + 6) = v30;
  uint64_t v34 = v40 + 56;
  if (v33 != v35)
  {
    do
    {
      long long v41 = *(_OWORD *)(v33 - 7);
      long long v42 = *(_OWORD *)(v33 - 5);
      long long v43 = *(_OWORD *)(v33 - 3);
      *((void *)v40 - 1) = *(v33 - 1);
      *(_OWORD *)(v40 - 24) = v43;
      *(_OWORD *)(v40 - 40) = v42;
      *(_OWORD *)(v40 - 56) = v41;
      v40 -= 56;
      v33 -= 7;
    }
    while (v33 != v35);
    unsigned int v33 = (void *)v31[5];
  }
  v31[5] = v40;
  UChar v31[6] = v34;
  v31[7] = &v39[56 * v38];
  if (v33) {
    operator delete(v33);
  }
LABEL_42:
  UChar v31[6] = v34;
}

void TI::TIInputRecognizer::create_transcoder(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  KB::String::String((KB::String *)__p, v2);
  KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)__p);
  if (*(void *)&__p[8]) {
    BOOL v3 = __p[6] == 1;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    free(*(void **)&__p[8]);
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unint64_t v5 = value;
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F6F510], value);
  if (*(void *)(a1 + 240)) {
    uint64_t v6 = (const void **)MEMORY[0x1E4F6F500];
  }
  else {
    uint64_t v6 = (const void **)MEMORY[0x1E4F6F4F8];
  }
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F6F4F0], *v6);
  if (*(unsigned char *)(a1 + 232))
  {
    if (*(char *)(a1 + 231) < 0)
    {
      if (!*(void *)(a1 + 216)) {
        goto LABEL_26;
      }
    }
    else if (!*(unsigned char *)(a1 + 231))
    {
      goto LABEL_26;
    }
    uint8x8_t v7 = (char **)(a1 + 208);
    CFAllocatorRef Default = CFAllocatorGetDefault();
    unint64_t v9 = (char *)(a1 + 208);
    if (*(char *)(a1 + 231) < 0) {
      unint64_t v9 = *v7;
    }
    std::string::basic_string[abi:nn180100]<0>(__p, v9);
    KB::cf_string(__p, &URLString);
    CFStringRef v10 = URLString;
    CFURLRef v11 = CFURLCreateWithString(Default, URLString, 0);
    if (v10) {
      CFRelease(v10);
    }
    if (SHIBYTE(v20) < 0)
    {
      operator delete(*(void **)__p);
      if (v11) {
        goto LABEL_23;
      }
    }
    else if (v11)
    {
LABEL_23:
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F6F4E8], v11);
      CFRelease(v11);
      goto LABEL_26;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 231) < 0) {
        uint8x8_t v7 = (char **)*v7;
      }
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "create_transcoder";
      *(_WORD *)&__p[12] = 2080;
      *(void *)&__p[14] = v7;
      _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s  Failed to create CFURL from url string: %s, will be using the default bundle.", __p, 0x16u);
    }
  }
LABEL_26:
  CFStringRef URLString = 0;
  uint64_t v12 = ITTouchTranscoderCreateWithKeyboardLayout();
  BOOL v13 = *(const void **)(a1 + 64);
  if (v13) {
    CFRelease(v13);
  }
  *(void *)(a1 + 64) = v12;
  CFStringRef v14 = URLString;
  if (URLString)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 240);
      *(void *)&__p[4] = "create_transcoder";
      *(_DWORD *)std::string __p = 136315650;
      if (v15 == 1) {
        uint64_t v16 = "TapTyping";
      }
      else {
        uint64_t v16 = "ContinuousPath";
      }
      *(_WORD *)&__p[12] = 2080;
      *(void *)&__p[14] = v16;
      __int16 v20 = 2112;
      CFStringRef v21 = v14;
      _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s  failed to create touch transcoder for %s Error: %@", __p, 0x20u);
      CFStringRef v14 = URLString;
    }
    CFRelease(v14);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t TI::TIInputRecognizer::load_lexicons_if_needed(uint64_t this, const KB::DynamicDictionary *a2)
{
  if (*(void *)(this + 64))
  {
    uint64_t v3 = this;
    if (KB::DynamicDictionary::named_entity_lexicon(a2) && !*(unsigned char *)(v3 + 275))
    {
      KB::DynamicDictionary::named_entity_lexicon(a2);
      ITTouchTranscoderAddLexicon();
      *(unsigned char *)(v3 + 275) = 1;
    }
    uint64_t v4 = (void **)*((void *)a2 + 3);
    if (v4)
    {
      unint64_t v5 = *v4;
      if (v5)
      {
        if (*v5 && !*(unsigned char *)(v3 + 272))
        {
          ITTouchTranscoderAddLexicon();
          *(unsigned char *)(v3 + 272) = 1;
        }
      }
    }
    if (*((void *)a2 + 1) && !*(unsigned char *)(v3 + 273))
    {
      ITTouchTranscoderAddLexicon();
      *(unsigned char *)(v3 + 273) = 1;
    }
    if (*((void *)a2 + 2) && *(unsigned char *)(v3 + 274))
    {
      ITTouchTranscoderAddLexicon();
      *(unsigned char *)(v3 + 274) = 1;
    }
    uint64_t ActiveSupplementalLexiconWords = TITransientLexiconManagerGetActiveSupplementalLexiconWords();
    uint64_t v7 = *(void *)(v3 + 280);
    if (ActiveSupplementalLexiconWords != v7)
    {
      uint64_t v8 = ActiveSupplementalLexiconWords;
      if (v7) {
        ITTouchTranscoderRemoveLexicon();
      }
      if (v8) {
        ITTouchTranscoderAddLexicon();
      }
      *(void *)(v3 + 280) = v8;
    }
    this = (*(uint64_t (**)(const KB::DynamicDictionary *))(*(void *)a2 + 80))(a2);
    if (this && !*(unsigned char *)(v3 + 276))
    {
      this = (*(uint64_t (**)(const KB::DynamicDictionary *, void))(*(void *)a2 + 88))(a2, 0);
      if (this)
      {
        (*(void (**)(const KB::DynamicDictionary *, void))(*(void *)a2 + 88))(a2, 0);
        this = ITTouchTranscoderAddLexicon();
        *(unsigned char *)(v3 + 276) = 1;
      }
    }
  }
  return this;
}

void TI::TIInputRecognizer::create_transcoder_session(TI::TIInputRecognizer *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 8) && !*((void *)this + 9))
  {
    uint64_t Session = ITTouchTranscoderCreateSession();
    uint64_t v3 = (const void *)*((void *)this + 9);
    if (v3) {
      CFRelease(v3);
    }
    *((void *)this + 9) = Session;
    if (!Session && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = "ContinuousPath";
      if (*((void *)this + 30) == 1) {
        uint64_t v4 = "TapTyping";
      }
      int v5 = 136315394;
      uint64_t v6 = "create_transcoder_session";
      __int16 v7 = 2080;
      uint64_t v8 = v4;
      _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s  Failed to create touch transcoder session for %s", (uint8_t *)&v5, 0x16u);
    }
  }
}

void std::vector<KB::retain_ptr<__CFString const*>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  id v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (const void *)*((void *)v6 - 1);
        v6 -= 8;
        __int16 v7 = v8;
        if (v8) {
          CFRelease(v7);
        }
        *((void *)v4 - 1) = 0;
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t TI::TIInputRecognizer::set_context(TI::TIInputRecognizer *this, const KB::LanguageModelContext *a2)
{
  return KB::LanguageModelContext::operator=((uint64_t)this + 104, (uint64_t *)a2);
}

void TI::TIInputRecognizer::set_candidate_refinery(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }
}

uint64_t TI::TIInputRecognizer::text_accepted_from_UI(TI::TIInputRecognizer *this, const KB::String *a2, const KB::String *a3)
{
  uint64_t result = *((void *)this + 5);
  if (result)
  {
    int v5 = *(const KB::DynamicDictionary **)(*(void *)(*(uint64_t (**)(uint64_t, const KB::String *, const KB::String *))(*(void *)result + 48))(result, a2, a3)+ 24);
    return TI::TIInputRecognizer::load_lexicons_if_needed((uint64_t)this, v5);
  }
  return result;
}

void TI::TIInputRecognizer::generate_candidates(uint64_t a1, uint64_t *a2, int a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v7 = Mutable;
  if (Mutable)
  {
    CFRetain(Mutable);
    TI::TIInputRecognizer::generate_candidates(a1);
    CFRelease(v7);
  }
  else
  {
    TI::TIInputRecognizer::generate_candidates(a1);
  }
  uint64_t v8 = *(uint64_t **)(a1 + 80);
  uint64_t v9 = *(uint64_t **)(a1 + 88);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    TI::TIInputRecognizer::addCandidatesForITCandidate(a1, a2, v10, a3);
  }
  if (v7)
  {
    CFRelease(v7);
  }
}

uint64_t TI::TIInputRecognizer::generate_candidates(uint64_t this)
{
  if (*(void *)(this + 64) && *(void *)(this + 80) == *(void *)(this + 88) && *(void *)(this + 72))
  {
    this = TI::CP::TIPathRecognizerInterface::should_generate_candidates((TI::CP::TIPathRecognizerInterface *)this);
    if (this) {
      return ITTouchTranscoderSessionEnumerateCandidatesWithOptions();
    }
  }
  return this;
}

void TI::TIInputRecognizer::addCandidatesForITCandidate(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40) && ITCandidateIsValidWord())
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (!ITCandidateIsMultiWord())
    {
      CFStringRef String = (const __CFString *)ITCandidateGetString();
      KB::utf8_string(String, (uint64_t)v59);
      uint64_t v30 = (char *)v59[1];
      if (!v59[1]) {
        uint64_t v30 = (char *)&v60;
      }
      if (LOWORD(v59[0])) {
        __int16 v31 = v30;
      }
      else {
        __int16 v31 = "";
      }
      std::string::basic_string[abi:nn180100]<0>(v43, v31);
      if (v59[1] && BYTE6(v59[0]) == 1) {
        free(v59[1]);
      }
      unint64_t v32 = *(atomic_uint **)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
      if (v32) {
        atomic_fetch_add(v32, 1u);
      }
      if ((SBYTE7(v44[0]) & 0x80u) == 0) {
        unsigned int v33 = v43;
      }
      else {
        unsigned int v33 = (void **)v43[0];
      }
      KB::String::String((KB::String *)v59, (const char *)v33);
      operator new();
    }
    CFMutableDictionaryRef v7 = *(unsigned int **)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
    uint64_t v48 = v7;
    if (v7) {
      atomic_fetch_add((atomic_uint *volatile)v7, 1u);
    }
    CFStringRef v8 = (const __CFString *)ITCandidateGetString();
    KB::utf8_string(v8, (uint64_t)v55);
    KB::word_ranges((KB *)v55, 0, (unint64_t **)__p);
    int v46 = 0;
    *(_OWORD *)long long v43 = 0u;
    memset(v44, 0, sizeof(v44));
    memset(v45, 0, sizeof(v45));
    uint64_t v9 = (int *)__p[0];
    if (__p[0] != __p[1])
    {
      uint64_t v10 = (uint64_t *)v57;
      if (!v57) {
        uint64_t v10 = &v58;
      }
      v59[0] = v10;
      LODWORD(v59[1]) = 0;
      HIDWORD(v59[1]) = v55[0];
      LODWORD(v60) = 0;
      KB::String::iterator::initialize((uint64_t *)v59);
      uint64_t v11 = *v9;
      long long v41 = *(_OWORD *)v59;
      uint64_t v42 = v60;
      std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v41, v11);
      uint64_t v12 = v9[1];
      long long v39 = v41;
      uint64_t v40 = v42;
      std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v39, v12);
      KB::String::String((KB::String *)v54, (const KB::String::iterator *)&v41, (const KB::String::iterator *)&v39);
      operator new();
    }
    v59[0] = (char *)&v45[1] + 8;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v59);
    v59[0] = v45;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v59);
    v59[0] = (char *)v44 + 8;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v59);
    v59[0] = v43;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v59);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (v57 && v56 == 1) {
      free(v57);
    }
    if (v48) {
      WTF::RefCounted<KB::DictionaryContainer>::deref(v48);
    }
  }
  else
  {
    CFStringRef v13 = (const __CFString *)ITCandidateGetString();
    KB::utf8_string(v13, (uint64_t)&valuePtr);
    KB::Candidate::Candidate((KB::Candidate *)v59, (const KB::String *)&valuePtr, 0);
    if (v50 && BYTE6(valuePtr) == 1) {
      free(v50);
    }
    char IsCompletion = ITCandidateIsCompletion();
    char v66 = ITCandidateIsValidWord() ^ 1;
    int UnshiftMask = ITCandidateGetUnshiftMask();
    ITCandidateGetScore();
    float v15 = v14;
    float v16 = logf(v14);
    float v61 = v16;
    if (a4 >= 1)
    {
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      double valuePtr = v15;
      CFNumberRef v19 = CFNumberCreate(v17, kCFNumberDoubleType, &valuePtr);
      CFDictionarySetValue(Mutable, @"lstm_prob", v19);
      if (v19) {
        CFRelease(v19);
      }
      CFDictionarySetValue(Mutable, @"source", @"ml");
      CFDictionarySetValue(Mutable, @"sort_key_expanded", @"no");
      StrokedPath = (const void *)ITCandidateGetStrokedPath();
      CFDictionarySetValue(Mutable, @"stroked_path", StrokedPath);
      KB::Candidate::add_sources_info((KB::Candidate *)v59, @"ml", Mutable);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    float v62 = v16;
    long long v63 = xmmword_1E4154C70;
    unint64_t v21 = a2[2];
    uint64_t v22 = (KB::Candidate *)a2[1];
    if ((unint64_t)v22 >= v21)
    {
      uint64_t v24 = 0x1CAC083126E978D5 * (((uint64_t)v22 - *a2) >> 3);
      if ((unint64_t)(v24 + 1) > 0x4189374BC6A7EFLL) {
        abort();
      }
      unint64_t v25 = 0x1CAC083126E978D5 * ((uint64_t)(v21 - *a2) >> 3);
      uint64_t v26 = 2 * v25;
      if (2 * v25 <= v24 + 1) {
        uint64_t v26 = v24 + 1;
      }
      if (v25 >= 0x20C49BA5E353F7) {
        *(double *)&unint64_t v27 = 1.95094476e-307;
      }
      else {
        unint64_t v27 = v26;
      }
      float v53 = a2 + 2;
      if (*(double *)&v27 == 0.0) {
        uint64_t v28 = 0;
      }
      else {
        *(double *)&unint64_t v27 = COERCE_DOUBLE(std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v27));
      }
      uint64_t v34 = (char *)(v27 + 1000 * v24);
      double valuePtr = *(double *)&v27;
      float v50 = v34;
      unint64_t v52 = v27 + 1000 * v28;
      KB::Candidate::Candidate((KB::Candidate *)v34, (const KB::Candidate *)v59);
      size_t v51 = v34 + 1000;
      std::vector<KB::Candidate>::__swap_out_circular_buffer(a2, &valuePtr);
      CFTypeRef v23 = (char *)a2[1];
      std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&valuePtr);
    }
    else
    {
      CFTypeRef v23 = (char *)KB::Candidate::Candidate(v22, (const KB::Candidate *)v59) + 1000;
    }
    a2[1] = (uint64_t)v23;
    KB::Candidate::~Candidate((KB::Candidate *)v59);
  }
  if (*(void *)(a1 + 240)) {
    int v35 = 4;
  }
  else {
    int v35 = 3;
  }
  uint64_t v36 = *a2;
  uint64_t v37 = a2[1];
  while (v36 != v37)
  {
    *(_DWORD *)(v36 + 992) = v35;
    v36 += 1000;
  }
}

void TI::create_kb_candidate(KB::Candidate *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int a6)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  KB::Candidate::Candidate(a1, (size_t *)a2);
  uint64_t v11 = *a4;
  if (*a4)
  {
    float v12 = *(float *)(v11 + 100);
    float v13 = (float)(v12
                * KB::DictionaryCursors::termination_probability((KB::DictionaryCursors *)(v11 + 16), *(const KB::DictionaryContainer **)(v11 + 8)))* *(float *)(a2 + 48);
  }
  else
  {
    float v13 = *(float *)(a2 + 52);
  }
  uint64_t v15 = *(void *)a1;
  uint64_t v14 = *((void *)a1 + 1);
  if (*(void *)a1)
  {
    uint64_t v16 = 240 * v15;
    uint64_t v17 = *((void *)a1 + 1);
    while ((*(unsigned char *)(v17 + 105) & 1) == 0)
    {
      v17 += 240;
      v16 -= 240;
      if (!v16) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t v17 = *((void *)a1 + 1);
  }
  if (v17 != v14 + 240 * v15) {
    goto LABEL_19;
  }
LABEL_11:
  if (v15)
  {
    uint64_t v18 = 240 * v15 - 240;
    CFNumberRef v19 = (uint64_t *)(v14 + 224);
    do
    {
      uint64_t v21 = *v19;
      v19 += 30;
      uint64_t v20 = v21;
      if (v21) {
        BOOL v22 = 1;
      }
      else {
        BOOL v22 = v18 == 0;
      }
      v18 -= 240;
    }
    while (!v22);
    if (v20) {
LABEL_19:
    }
      float v13 = v13 * 0.8;
  }
  KB::LanguageModelContext::operator=((uint64_t)a1 + 784, a5);
  *(float *)(*((void *)a1 + 1) + 240 * *(void *)a1 - 188) = v13;
  ITCandidateGetScore();
  float v24 = logf(v23);
  *((float *)a1 + 186) = v24;
  *((float *)a1 + 187) = v24;
  *((_OWORD *)a1 + 47) = xmmword_1E4154C70;
  *((unsigned char *)a1 + 960) = ITCandidateIsCompletion();
  *((unsigned char *)a1 + 961) = ITCandidateIsValidWord() ^ 1;
  *((_DWORD *)a1 + 195) = ITCandidateGetUnshiftMask();
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *((void *)a1 + 1);
  ITCandidateGetScore();
  float v28 = v27;
  CFStringRef String = (const __CFString *)ITCandidateGetString();
  KB::utf8_string(String, (uint64_t)&valuePtr);
  uint64_t v30 = (char *)v52;
  if (!v52) {
    uint64_t v30 = (char *)&v53;
  }
  if (LOWORD(valuePtr)) {
    __int16 v31 = v30;
  }
  else {
    __int16 v31 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(__p, v31);
  if (v52 && BYTE6(valuePtr) == 1) {
    free(v52);
  }
  if (a6 >= 1)
  {
    uint64_t v32 = v26 + 240 * v25 - 240;
    CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (*(_WORD *)v32)
    {
      if (*(void *)(v32 + 8)) {
        int v35 = *(char **)(v32 + 8);
      }
      else {
        int v35 = (char *)(v32 + 16);
      }
    }
    else
    {
      int v35 = "";
    }
    std::string::basic_string[abi:nn180100]<0>(&valuePtr, v35);
    int v36 = SHIBYTE(v53);
    double v37 = valuePtr;
    if ((v50 & 0x80u) == 0) {
      size_t v38 = v50;
    }
    else {
      size_t v38 = (size_t)__p[1];
    }
    if ((v50 & 0x80u) == 0) {
      long long v39 = __p;
    }
    else {
      long long v39 = (void **)__p[0];
    }
    if (v53 >= 0) {
      uint64_t v40 = (void *)HIBYTE(v53);
    }
    else {
      uint64_t v40 = v52;
    }
    if (v53 >= 0) {
      p_double valuePtr = &valuePtr;
    }
    else {
      p_double valuePtr = *(double **)&valuePtr;
    }
    if ((unint64_t)v40 >= v38) {
      size_t v42 = v38;
    }
    else {
      size_t v42 = (size_t)v40;
    }
    BOOL v43 = memcmp(v39, p_valuePtr, v42) == 0;
    BOOL v44 = v40 == (void *)v38 && v43;
    if (v36 < 0) {
      operator delete(*(void **)&v37);
    }
    if (v44) {
      uint64_t v45 = @"no";
    }
    else {
      uint64_t v45 = @"yes";
    }
    CFDictionarySetValue(Mutable, @"sort_key_expanded", v45);
    double valuePtr = v28;
    CFNumberRef v46 = CFNumberCreate(v33, kCFNumberDoubleType, &valuePtr);
    CFDictionarySetValue(Mutable, @"lstm_prob", v46);
    if (v46) {
      CFRelease(v46);
    }
    double valuePtr = v13;
    CFNumberRef v47 = CFNumberCreate(v33, kCFNumberDoubleType, &valuePtr);
    CFDictionarySetValue(Mutable, @"uni_prob", v47);
    if (v47) {
      CFRelease(v47);
    }
    StrokedPath = (const void *)ITCandidateGetStrokedPath();
    CFDictionarySetValue(Mutable, @"stroked_path", StrokedPath);
    CFDictionarySetValue(Mutable, @"source", @"ml");
    KB::Candidate::add_sources_info(a1, @"ml", Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  if ((char)v50 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = atomic_load((unsigned int *)result);
  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(result + 72);
    *(void *)(v1 + 72) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    uint64_t v4 = 32;
    while (1)
    {
      int v5 = *(const void **)(v1 + v4);
      if (v5) {
        CFRelease(v5);
      }
      *(void *)(v1 + v4) = 0;
      v4 -= 8;
      if (v4 == 8)
      {
        uint64_t v6 = *(unsigned int **)(v1 + 8);
        if (v6) {
          WTF::RefCounted<KB::DictionaryContainer>::deref(v6);
        }
        JUMPOUT(0x1E4E7BC20);
      }
    }
  }
  atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF);
  return result;
}

BOOL TI::CP::TIPathRecognizerInterface::should_generate_candidates(TI::CP::TIPathRecognizerInterface *this)
{
  if ((*(unsigned int (**)(TI::CP::TIPathRecognizerInterface *))(*(void *)this + 40))(this) == 7) {
    return 0;
  }
  unsigned int v2 = (CGFloat *)*((void *)this + 1);
  if (!v2) {
    return 0;
  }
  v4.double x = (*(double (**)(TI::CP::TIPathRecognizerInterface *))(*(void *)this + 48))(this);
  return !TI::Favonius::KeyboardLayout::is_far_away_point(v2, v4);
}

void ___ZN2TI17TIInputRecognizer19generate_candidatesEN2KB10retain_ptrIP14__CFDictionaryEEU13block_pointerFbP11__CandidateE_block_invoke(uint64_t a1, const void *a2)
{
  unsigned __int16 v21[2] = *MEMORY[0x1E4F143B8];
  CGPoint v4 = *(void **)(a1 + 40);
  CFStringRef String = (const __CFString *)ITCandidateGetString();
  KB::utf8_string(String, (uint64_t)v18);
  uint64_t v6 = (char *)v20;
  if (!v20) {
    uint64_t v6 = (char *)v21;
  }
  if (v18[0]) {
    CFMutableDictionaryRef v7 = v6;
  }
  else {
    CFMutableDictionaryRef v7 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(__p, v7);
  if (v20 && v19 == 1) {
    free(v20);
  }
  unint64_t v8 = v17;
  if ((v17 & 0x80u) != 0) {
    unint64_t v8 = (unint64_t)__p[1];
  }
  switch(v8)
  {
    case 0uLL:
      goto LABEL_23;
    case 1uLL:
      uint64_t v15 = (void **)__p[0];
      if ((v17 & 0x80u) == 0) {
        uint64_t v15 = __p;
      }
      BOOL v13 = *(unsigned char *)v15 == 95;
LABEL_28:
      char v14 = v13;
      if (((char)v17 & 0x80000000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_32;
    case 3uLL:
      uint64_t v9 = (void **)__p[0];
      if ((v17 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      if (*(_WORD *)v9 != 20053 || *((unsigned char *)v9 + 2) != 75)
      {
        int v11 = *(unsigned __int16 *)v9;
        int v12 = *((unsigned __int8 *)v9 + 2);
        BOOL v13 = v11 == 28277 && v12 == 107;
        goto LABEL_28;
      }
LABEL_23:
      char v14 = 1;
      if (((char)v17 & 0x80000000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_32;
  }
  char v14 = 0;
  if ((char)v17 < 0) {
LABEL_32:
  }
    operator delete(__p[0]);
LABEL_33:
  if ((v14 & 1) == 0 && ((*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))() & 1) == 0) {
    TI::TIInputRecognizer::add_candidate_to_cache(v4, a2);
  }
}

void TI::TIInputRecognizer::add_candidate_to_cache(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  int v5 = (void *)a1[11];
  unint64_t v4 = a1[12];
  if ((unint64_t)v5 >= v4)
  {
    CFMutableDictionaryRef v7 = (void *)a1[10];
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v12 = (char *)operator new(8 * v11);
    }
    else
    {
      int v12 = 0;
    }
    BOOL v13 = &v12[8 * v8];
    *(void *)BOOL v13 = cf;
    uint64_t v6 = v13 + 8;
    while (v5 != v7)
    {
      uint64_t v14 = *--v5;
      *int v5 = 0;
      *((void *)v13 - 1) = v14;
      v13 -= 8;
    }
    long long v15 = *((_OWORD *)a1 + 5);
    a1[10] = v13;
    a1[11] = v6;
    a1[12] = &v12[8 * v11];
    uint64_t v16 = (char *)*((void *)&v15 + 1);
    unsigned __int8 v17 = (char *)v15;
    if (*((void *)&v15 + 1) != (void)v15)
    {
      uint64_t v18 = (char *)*((void *)&v15 + 1);
      do
      {
        uint64_t v20 = (const void *)*((void *)v18 - 1);
        v18 -= 8;
        char v19 = v20;
        if (v20) {
          CFRelease(v19);
        }
        *((void *)v16 - 1) = 0;
        uint64_t v16 = v18;
      }
      while (v18 != v17);
    }
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *int v5 = cf;
    uint64_t v6 = v5 + 1;
  }
  a1[11] = v6;
}

uint64_t ___ZN2TI17TIInputRecognizer19generate_candidatesERN2KB19CandidateCollectionENS_2CP21ScoreExplanationLevelE_block_invoke()
{
  return 0;
}

double TI::TIInputRecognizer::path_length(TI::TIInputRecognizer *this)
{
  return 0.0;
}

void TI::TIInputRecognizer::reset_session(TI::TIInputRecognizer *this)
{
  unsigned int v2 = (const void *)*((void *)this + 9);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 9) = 0;
  TI::TIInputRecognizer::create_transcoder_session(this);
  *((_DWORD *)this + 66) = 7;

  std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)this + 10);
}

double TI::TIInputRecognizer::last_touch(TI::TIInputRecognizer *this)
{
  return *((double *)this + 31);
}

uint64_t TI::TIInputRecognizer::touch_stage(TI::TIInputRecognizer *this)
{
  return *((unsigned int *)this + 66);
}

void TI::TIInputRecognizer::add_touch(uint64_t a1, int a2, double a3, double a4)
{
  std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)(a1 + 80));
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(unsigned int *)(v8 + 200);
  unint64_t v10 = (unint64_t)((uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 3) >> 1;
  if (v9 > 0xB || v10 < v9)
  {
    *(double *)(a1 + 248) = a3;
    *(double *)(a1 + 256) = a4;
    *(_DWORD *)(a1 + 264) = a2;
    if (*(void *)(a1 + 240) != 1)
    {
      if (*(void *)(a1 + 72)) {
        ITTouchTranscoderSessionAddEventWithTouchKeyInfo();
      }
    }
  }
}

uint64_t TI::TIInputRecognizer::recognitionSources(TI::TIInputRecognizer *this)
{
  return 2;
}

uint64_t TI::TIInputRecognizer::get_recognizer_type(TI::TIInputRecognizer *this)
{
  return 1;
}

void TI::TIInputRecognizer::~TIInputRecognizer(TI::TIInputRecognizer *this)
{
  TI::TIInputRecognizer::~TIInputRecognizer(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  const void *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  void **v10;

  *(void *)this = &unk_1F3F75D00;
  if (*((unsigned char *)this + 232) && *((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  unint64_t v10 = (void **)((char *)this + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v10);
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::TIInputRecognizer *)((char *)this + 176));
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::TIInputRecognizer *)((char *)this + 168));
  unsigned int v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  if (*((void *)this + 10))
  {
    std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)this + 10);
    operator delete(*((void **)this + 10));
  }
  unint64_t v4 = (const void *)*((void *)this + 9);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 9) = 0;
  int v5 = (const void *)*((void *)this + 8);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 8) = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v6);
  }
  CFMutableDictionaryRef v7 = (unsigned int *)*((void *)this + 5);
  if (v7)
  {
    uint64_t v8 = atomic_load(v7 + 2);
    if (v8 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v7 + 40))(v7);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF);
    }
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  *(void *)this = &unk_1F3F78B70;
  unint64_t v9 = *((void *)this + 1);
  if (v9) {
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref(v9);
  }
}

uint64_t TI::TIInputRecognizer::TIInputRecognizer(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, long long *a5)
{
  *(void *)a1 = &unk_1F3F75D00;
  *(void *)(a1 + 8) = 0;
  unint64_t v9 = (std::string *)(a1 + 16);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    v9->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v11 = *a3;
  *a3 = 0;
  *(void *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 168));
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 176));
  *(unsigned char *)(a1 + 208) = 0;
  int v12 = (std::string *)(a1 + 208);
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  if (*((unsigned char *)a5 + 24))
  {
    if (*((char *)a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a5, *((void *)a5 + 1));
    }
    else
    {
      long long v13 = *a5;
      *(void *)(a1 + 224) = *((void *)a5 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *(unsigned char *)(a1 + 232) = 1;
  }
  *(void *)(a1 + 240) = a2;
  *(_DWORD *)(a1 + 264) = 7;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 276) = 0;
  return a1;
}

void TI::TIInputRecognizer::recreate_transcoder(TI::TIInputRecognizer *this)
{
  unsigned int v2 = (const void *)*((void *)this + 8);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 8) = 0;
  uint64_t v3 = (const void *)*((void *)this + 9);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 9) = 0;

  TI::TIInputRecognizer::update_transcoder(this);
}

BOOL TI::TIInputRecognizer::is_ready(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 64);
  if (v1)
  {
    CFRetain(*(CFTypeRef *)(a1 + 64));
    CFRelease(v1);
  }
  return v1 != 0;
}

uint64_t TI::TIInputRecognizer::touch_transcoder_provides_completion_candidates(TI::TIInputRecognizer *this)
{
  return MEMORY[0x1F4124DD0](*((void *)this + 8));
}

BOOL TI::TIInputRecognizer::is_candidates_cache_empty(TI::TIInputRecognizer *this)
{
  return *((void *)this + 10) == *((void *)this + 11);
}

void TI::TIInputRecognizer::process_candidates_from_cache(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 80);
  unint64_t v4 = *(uint64_t **)(a1 + 88);
  while (v3 != v4)
  {
    uint64_t v8 = *v3++;
    TI::TIInputRecognizer::addCandidatesForITCandidate(a1, a2, v8, a3);
  }
}

void TI::TIInputRecognizer::generate_mltt_autocorrection_candidates(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 240) == 1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    KB::cf_string_impl<KB::String>((CFStringRef *)&value, a2);
    uint64_t v8 = value;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F6F520], value);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F6F518], (const void *)*MEMORY[0x1E4F1CFD0]);
    if (*(unsigned char *)(a3 + 64))
    {
      KB::cf_string_impl<KB::String>((CFStringRef *)&v43, (unsigned __int16 *)a3);
      KB::cf_string_impl<KB::String>((CFStringRef *)v36, (unsigned __int16 *)(a3 + 32));
      unint64_t v9 = v43;
      CFDictionaryAddValue(Mutable, @"previousTypedString", v43);
      long long v10 = v36[0];
      CFDictionaryAddValue(Mutable, @"previousCandidateString", v36[0]);
      if (v10) {
        CFRelease(v10);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
    uint64_t v40 = Mutable;
    if (Mutable)
    {
      CFRetain(Mutable);
      uint64_t v40 = Mutable;
      uint64_t v11 = a1;
      TI::TIInputRecognizer::generate_candidates(a1);
      CFRelease(Mutable);
    }
    else
    {
      uint64_t v11 = a1;
      TI::TIInputRecognizer::generate_candidates(a1);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    long long v13 = *(uint64_t **)(v11 + 80);
    int v12 = *(uint64_t **)(v11 + 88);
    if (v13 != v12)
    {
      uint64_t v14 = 0;
      uint64_t v15 = a1;
      uint64_t v34 = v12;
      while (1)
      {
        int v39 = 0;
        *(_OWORD *)int v36 = 0u;
        memset(v37, 0, sizeof(v37));
        memset(v38, 0, sizeof(v38));
        TI::TIInputRecognizer::addCandidatesForITCandidate(v15, (uint64_t *)v36, *v13, 0);
        CFStringRef v16 = (const __CFString *)ITCandidateCopyPrefix();
        KB::utf8_string(v16, (uint64_t)v49);
        KB::String::String((KB::String *)&v43, (const KB::String *)v49);
        KB::CandidateCollection::CandidateCollection((KB::CandidateCollection *)v45, (const KB::Candidate **)v36);
        unsigned __int8 v17 = (char *)a4[2];
        if (v14 < v17)
        {
          KB::String::String((KB::String *)v14, (const KB::String *)&v43);
          KB::CandidateCollection::CandidateCollection((KB::CandidateCollection *)(v14 + 32), v45);
          v14 += 136;
          goto LABEL_38;
        }
        unint64_t v18 = 0xF0F0F0F0F0F0F0F1 * ((v14 - (unsigned char *)*a4) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0x1E1E1E1E1E1E1E1) {
          abort();
        }
        unint64_t v20 = 0xF0F0F0F0F0F0F0F1 * ((v17 - (unsigned char *)*a4) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0xF0F0F0F0F0F0F0) {
          unint64_t v21 = 0x1E1E1E1E1E1E1E1;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 > 0x1E1E1E1E1E1E1E1) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          BOOL v22 = (char *)operator new(136 * v21);
        }
        else
        {
          BOOL v22 = 0;
        }
        float v23 = &v22[136 * v18];
        float v24 = &v22[136 * v21];
        KB::String::String((KB::String *)v23, (const KB::String *)&v43);
        KB::CandidateCollection::CandidateCollection((KB::CandidateCollection *)(v23 + 32), v45);
        uint64_t v14 = v23 + 136;
        uint64_t v26 = (char *)*a4;
        uint64_t v25 = (char *)a4[1];
        if (v25 == *a4)
        {
          *a4 = v23;
          a4[1] = v14;
          a4[2] = v24;
        }
        else
        {
          int v35 = v24;
          uint64_t v27 = 0;
          do
          {
            *(_DWORD *)&v23[v27 - 136] = 0x100000;
            uint64_t v28 = (uint64_t)&v23[v27 - 136];
            uint64_t v29 = &v25[v27];
            *(_WORD *)(v28 + 4) = 0;
            *(unsigned char *)(v28 + 6) = 0;
            *(void *)(v28 + 8) = 0;
            uint64_t v30 = (void *)KB::String::operator=(v28, (KB::String *)&v25[v27 - 136]);
            v30[4] = 0;
            void v30[5] = 0;
            v30[6] = 0;
            *((_OWORD *)v30 + 2) = *(_OWORD *)&v25[v27 - 104];
            v30[6] = *(void *)&v25[v27 - 88];
            *((void *)v29 - 13) = 0;
            *((void *)v29 - 12) = 0;
            *((void *)v29 - 11) = 0;
            v30[7] = 0;
            unsigned char v30[8] = 0;
            v30[9] = 0;
            *(_OWORD *)(v30 + 7) = *(_OWORD *)&v25[v27 - 80];
            v30[9] = *(void *)&v25[v27 - 64];
            *((void *)v29 - 10) = 0;
            *((void *)v29 - 9) = 0;
            *((void *)v29 - 8) = 0;
            v30[10] = 0;
            v30[11] = 0;
            v30[12] = 0;
            *((_OWORD *)v30 + 5) = *(_OWORD *)&v25[v27 - 56];
            v30[12] = *(void *)&v25[v27 - 40];
            *((void *)v29 - 7) = 0;
            *((void *)v29 - 6) = 0;
            *((void *)v29 - 5) = 0;
            v30[13] = 0;
            v30[14] = 0;
            v30[15] = 0;
            *(_OWORD *)(v30 + 13) = *(_OWORD *)&v25[v27 - 32];
            v30[15] = *(void *)&v25[v27 - 16];
            *((void *)v29 - 4) = 0;
            *((void *)v29 - 3) = 0;
            *((void *)v29 - 2) = 0;
            v30[16] = *(void *)&v25[v27 - 8];
            v27 -= 136;
          }
          while (&v25[v27] != v26);
          __int16 v31 = &v23[v27];
          uint64_t v32 = (char *)*a4;
          uint64_t v25 = (char *)a4[1];
          *a4 = v31;
          a4[1] = v14;
          a4[2] = v35;
          if (v25 != v32)
          {
            uint64_t v15 = a1;
            do
            {
              v25 -= 136;
              std::__destroy_at[abi:nn180100]<TI::MLTTAutocorrectionCandidateInfo,0>((uint64_t)v25);
            }
            while (v25 != v32);
            uint64_t v25 = v32;
            if (!v32) {
              goto LABEL_37;
            }
LABEL_36:
            operator delete(v25);
            goto LABEL_37;
          }
          uint64_t v15 = a1;
        }
        if (v25) {
          goto LABEL_36;
        }
LABEL_37:
        int v12 = v34;
LABEL_38:
        a4[1] = v14;
        size_t v42 = (const KB::Candidate **)&v48;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v42);
        size_t v42 = (const KB::Candidate **)&v47;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v42);
        size_t v42 = (const KB::Candidate **)&v46;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v42);
        size_t v42 = v45;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v42);
        if (v44 && BYTE6(v43) == 1) {
          free(v44);
        }
        if (v50 && v49[6] == 1) {
          free(v50);
        }
        if (v16) {
          CFRelease(v16);
        }
        BOOL v43 = (char *)&v38[1] + 8;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
        BOOL v43 = v38;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
        BOOL v43 = (char *)v37 + 8;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
        BOOL v43 = v36;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
        if (++v13 == v12)
        {
          uint64_t v8 = value;
          break;
        }
      }
    }
    if (v8) {
      CFRelease(v8);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void std::__destroy_at[abi:nn180100]<TI::MLTTAutocorrectionCandidateInfo,0>(uint64_t a1)
{
  unsigned int v2 = (void **)(a1 + 32);
  unint64_t v4 = (void **)(a1 + 104);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  unint64_t v4 = (void **)(a1 + 80);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  unint64_t v4 = (void **)(a1 + 56);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  unint64_t v4 = v2;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3 && *(unsigned char *)(a1 + 6) == 1)
  {
    free(v3);
  }
}

uint64_t ___ZN2TI17TIInputRecognizer39generate_mltt_autocorrection_candidatesERKN2KB6StringERKNSt3__18optionalINS5_4pairIS2_S2_EEEE_block_invoke()
{
  if (!ITCandidateIsValidWord()) {
    return 1;
  }

  return ITCandidateIsCompletion();
}

uint64_t TI::TIInputRecognizer::is_language_and_layout_supported(uint64_t a1, const KB::String *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = (const char *)a1;
  }
  else {
    uint64_t v3 = *(const char **)a1;
  }
  KB::String::String((KB::String *)v12, v3);
  KB::cf_string_impl<KB::String>(&localeIdentifier, v12);
  if (v14) {
    BOOL v4 = v13 == 1;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    free(v14);
  }
  CFLocaleIdentifier v5 = localeIdentifier;
  if (!localeIdentifier) {
    return 0;
  }
  CFLocaleRef v6 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], localeIdentifier);
  KB::String::String((KB::String *)v12, a2);
  KB::cf_string_impl<KB::String>(&v10, v12);
  CFStringRef v7 = v10;
  uint64_t v8 = ITTouchTranscoderSupportsLocaleAndLayout();
  if (v7) {
    CFRelease(v7);
  }
  if (v14 && v13 == 1) {
    free(v14);
  }
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(v5);
  return v8;
}

uint64_t TI::TIInputRecognizer::is_ml_based_typing_mode_supported(const UInt8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  KB::cf_string(a1, &localeIdentifier);
  CFLocaleIdentifier v8 = localeIdentifier;
  CFLocaleRef v9 = CFLocaleCreate(v7, localeIdentifier);
  if (v8) {
    CFRelease(v8);
  }
  if (!v9) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F6F510], v9);
  if (*(unsigned char *)(a3 + 24))
  {
    CFAllocatorRef Default = CFAllocatorGetDefault();
    KB::cf_string((const UInt8 *)a3, &localeIdentifier);
    CFLocaleIdentifier v12 = localeIdentifier;
    CFURLRef v13 = CFURLCreateWithString(Default, localeIdentifier, 0);
    if (v12) {
      CFRelease(v12);
    }
    if (v13)
    {
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F6F4E8], v13);
      CFRelease(v13);
    }
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  if (v14)
  {
    uint64_t v15 = (const void *)*MEMORY[0x1E4F6F508];
    KB::cf_string((const UInt8 *)a2, &localeIdentifier);
    CFLocaleIdentifier v16 = localeIdentifier;
    CFDictionaryAddValue(Mutable, v15, localeIdentifier);
    if (v16) {
      CFRelease(v16);
    }
  }
  unsigned __int8 v17 = (const void **)MEMORY[0x1E4F6F4F8];
  if (a4) {
    unsigned __int8 v17 = (const void **)MEMORY[0x1E4F6F500];
  }
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F6F4F0], *v17);
  uint64_t v18 = ITTouchTranscoderSupportsConfiguration();
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFRelease(v9);
  return v18;
}

uint64_t TI::TIInputRecognizer::ml_based_tap_typing_enabled(unsigned __int16 *a1, uint64_t a2, atomic_uint **a3, uint64_t a4)
{
  v49[19] = *MEMORY[0x1E4F143B8];
  {
    TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table = 0u;
    *(_OWORD *)&qword_1EBFEFF68 = 0u;
    dword_1EBFEFF78 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,BOOL>::~unordered_map[abi:nn180100], &TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table, &dword_1E3F0E000);
  }
  {
    TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::ml_based_tap_typing_feature_flag = _os_feature_enabled_impl();
  }
  if (!(s_ml_based_tap_typing | TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::ml_based_tap_typing_feature_flag)) {
    return 0;
  }
  CFLocaleIdentifier v8 = *a3;
  if (*a3) {
    atomic_fetch_add(v8, 1u);
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&__n);
  CFLocaleRef v9 = (const char *)*((void *)a1 + 1);
  if (!v9) {
    CFLocaleRef v9 = (const char *)(a1 + 8);
  }
  CFStringRef v10 = "";
  if (*a1) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = "";
  }
  size_t v12 = strlen(v11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, (uint64_t)"_", 1);
  CFURLRef v13 = *(const char **)(a2 + 8);
  if (!v13) {
    CFURLRef v13 = (const char *)(a2 + 16);
  }
  if (*(_WORD *)a2) {
    CFStringRef v10 = v13;
  }
  size_t v14 = strlen(v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, (uint64_t)v10, v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, (uint64_t)"_", 1);
  std::ostream::operator<<();
  if (*(unsigned char *)(a4 + 24))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, (uint64_t)"_", 1);
    int v15 = *(char *)(a4 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = *(void *)a4;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a4 + 8);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, v16, v17);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(__dst, (uint64_t)&v45);
  size_t __n = *MEMORY[0x1E4FBA418];
  *(size_t *)((char *)&__n + *(void *)(__n - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v45 = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (v48 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E4E7BBB0](v49);
  if (v8) {
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v8);
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v18 = (uint64_t *)__dst;
  }
  else {
    uint64_t v18 = (uint64_t *)__dst[0];
  }
  if ((v43 & 0x80u) == 0) {
    unint64_t v19 = v43;
  }
  else {
    unint64_t v19 = (unint64_t)__dst[1];
  }
  unint64_t v20 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v18, v19);
  unint64_t v21 = *((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
        + 1);
  if (*((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
       + 1))
  {
    unint64_t v22 = v20;
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                                         + 8));
    v23.i16[0] = vaddlv_u8(v23);
    unint64_t v24 = v23.u32[0];
    if (v23.u32[0] > 1uLL)
    {
      unint64_t v25 = v20;
      if (v20 >= *((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                  + 1))
        unint64_t v25 = v20
            % *((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
              + 1);
    }
    else
    {
      unint64_t v25 = (*((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
             + 1)
           - 1) & v20;
    }
    uint64_t v27 = *(uint64_t ***)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                       + 8 * v25);
    if (v27)
    {
      for (uint64_t i = *v27; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v29 = i[1];
        if (v29 == v22)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)__dst))
          {
            uint64_t is_ml_based_typing_mode_supported = *((unsigned char *)i + 40) != 0;
            goto LABEL_91;
          }
        }
        else
        {
          if (v24 > 1)
          {
            if (v29 >= v21) {
              v29 %= v21;
            }
          }
          else
          {
            v29 &= v21 - 1;
          }
          if (v29 != v25) {
            break;
          }
        }
      }
    }
  }
  uint64_t v30 = *a3;
  if (v30) {
    atomic_fetch_add(v30, 1u);
  }
  KB::String::String((KB::String *)&__n, "en");
  if ((unsigned __int16)__n <= *a1)
  {
    if (*((void *)a1 + 1)) {
      CFAllocatorRef v33 = (const char *)*((void *)a1 + 1);
    }
    else {
      CFAllocatorRef v33 = (const char *)(a1 + 8);
    }
    uint64_t v32 = v45;
    if (v45) {
      uint64_t v34 = (const char *)v45;
    }
    else {
      uint64_t v34 = v46;
    }
    BOOL v31 = strncmp(v33, v34, (unsigned __int16)__n) == 0;
    if (!v32) {
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v31 = 0;
    uint64_t v32 = v45;
    if (!v45) {
      goto LABEL_64;
    }
  }
  if (BYTE6(__n) == 1) {
    free(v32);
  }
LABEL_64:
  if (v31)
  {
    LOBYTE(__n) = 0;
    int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"EnableMLTapTyping", @"com.apple.keyboard", (Boolean *)&__n);
    if (!(_BYTE)__n || !AppBooleanValue)
    {
      if (!v30)
      {
        BOOL v31 = 0;
        goto LABEL_69;
      }
      BOOL v31 = *((unsigned char *)v30 + 66) == 0;
      goto LABEL_68;
    }
  }
  if (v30) {
LABEL_68:
  }
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v30);
LABEL_69:
  if (s_ml_based_tap_typing)
  {
    std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__dst, (uint64_t)__dst)[40] = v31;
    uint64_t is_ml_based_typing_mode_supported = v31;
  }
  else
  {
    uint64_t is_ml_based_typing_mode_supported = 0;
    if (*(_WORD *)a2 && *a1)
    {
      if (v31)
      {
        if (*((void *)a1 + 1)) {
          int v36 = (char *)*((void *)a1 + 1);
        }
        else {
          int v36 = (char *)(a1 + 8);
        }
        std::string::basic_string[abi:nn180100]<0>(&__n, v36);
        double v37 = *(char **)(a2 + 8);
        if (!v37) {
          double v37 = (char *)(a2 + 16);
        }
        if (*(_WORD *)a2) {
          size_t v38 = v37;
        }
        else {
          size_t v38 = "";
        }
        std::string::basic_string[abi:nn180100]<0>(v40, v38);
        uint64_t is_ml_based_typing_mode_supported = TI::TIInputRecognizer::is_ml_based_typing_mode_supported((const UInt8 *)&__n, (uint64_t)v40, a4, 1);
        if (v41 < 0) {
          operator delete(v40[0]);
        }
        if ((v46[7] & 0x80000000) != 0) {
          operator delete((void *)__n);
        }
      }
      else
      {
        uint64_t is_ml_based_typing_mode_supported = 0;
      }
      std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__dst, (uint64_t)__dst)[40] = is_ml_based_typing_mode_supported;
    }
  }
LABEL_91:
  if ((char)v43 < 0) {
    operator delete(__dst[0]);
  }
  return is_ml_based_typing_mode_supported;
}

char *std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (unsigned __int8 *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v6 = v5;
  }
  unint64_t v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v6);
  unint64_t v8 = v7;
  unint64_t v9 = *((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
       + 1);
  if (*((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
       + 1))
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                                         + 8));
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= *((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                 + 1))
        unint64_t v2 = v7
           % *((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
             + 1);
    }
    else
    {
      unint64_t v2 = (*((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
            + 1)
          - 1) & v7;
    }
    size_t v12 = *(void ***)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                    + 8 * v2);
    if (v12)
    {
      CFURLRef v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v13 + 16, v4)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v2) {
              break;
            }
          }
          CFURLRef v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  CFURLRef v13 = (char *)operator new(0x30uLL);
  *(void *)CFURLRef v13 = 0;
  *((void *)v13 + 1) = v8;
  int v15 = (std::string *)(v13 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v13 + 4) = *(void *)(a2 + 16);
  }
  v13[40] = 0;
  float v16 = (float)(unint64_t)(qword_1EBFEFF70 + 1);
  if (!v9 || (float)(*(float *)&dword_1EBFEFF78 * (float)v9) < v16)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1EBFEFF78);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
         + 1);
    if (*(void *)&prime > *((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                             + 1))
      goto LABEL_36;
    if (*(void *)&prime < *((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                             + 1))
    {
      unint64_t v27 = vcvtps_u32_f32((float)(unint64_t)qword_1EBFEFF70 / *(float *)&dword_1EBFEFF78);
      if (*((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
           + 1) < 3uLL
        || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                                                 + 8)),
            v28.i16[0] = vaddlv_u8(v28),
            v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
             + 1);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v21 = operator new(8 * *(void *)&prime);
          unint64_t v22 = (void *)TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table;
          *(void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
          + 1) = prime;
          do
            *(void *)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                      + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          unint64_t v24 = (void **)qword_1EBFEFF68;
          if (qword_1EBFEFF68)
          {
            unint64_t v25 = *(void *)(qword_1EBFEFF68 + 8);
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                      + 8 * v25) = &qword_1EBFEFF68;
            for (uint64_t i = *v24; i; v25 = v31)
            {
              unint64_t v31 = i[1];
              if (v26.u32[0] > 1uLL)
              {
                if (v31 >= *(void *)&prime) {
                  v31 %= *(void *)&prime;
                }
              }
              else
              {
                v31 &= *(void *)&prime - 1;
              }
              if (v31 != v25)
              {
                if (!*(void *)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                                + 8 * v31))
                {
                  *(void *)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                            + 8 * v31) = v24;
                  goto LABEL_61;
                }
                *unint64_t v24 = (void *)*i;
                *uint64_t i = **(void **)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                                 + 8 * v31);
                **(void **)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                            + 8 * v31) = i;
                uint64_t i = v24;
              }
              unint64_t v31 = v25;
LABEL_61:
              unint64_t v24 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_65;
        }
        int v36 = (void *)TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table;
        *(void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v9 = 0;
        *((void *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
        + 1) = 0;
      }
    }
LABEL_65:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v8;
    }
  }
  uint64_t v32 = TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table;
  CFAllocatorRef v33 = *(void **)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                   + 8 * v2);
  if (v33)
  {
    *(void *)CFURLRef v13 = *v33;
LABEL_78:
    *CFAllocatorRef v33 = v13;
    goto LABEL_79;
  }
  *(void *)CFURLRef v13 = qword_1EBFEFF68;
  qword_1EBFEFF68 = (uint64_t)v13;
  *(void *)(v32 + 8 * v2) = &qword_1EBFEFF68;
  if (*(void *)v13)
  {
    unint64_t v34 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    CFAllocatorRef v33 = (void *)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                   + 8 * v34);
    goto LABEL_78;
  }
LABEL_79:
  ++qword_1EBFEFF70;
  return v13;
}

uint64_t std::unordered_map<std::string,BOOL>::~unordered_map[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  BOOL v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void TI::TIInputRecognizer::sync_with_input_from_UI(TI::TIInputRecognizer *this, const KB::String *a2, const KB::LanguageModelContext *a3)
{
  if (*((void *)this + 30) == 1 && *((void *)this + 9))
  {
    KB::LanguageModelContext::operator=((uint64_t)this + 104, (uint64_t *)a3);
    std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)this + 10);
  }
}

void TI::TIInputRecognizer::drop_input_prefix(TI::TIInputRecognizer *this, const KB::LanguageModelContext *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v6, "");
  TI::TIInputRecognizer::sync_with_input_from_UI(this, v4, a2);
  if (v7) {
    BOOL v5 = v6[6] == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    free(v7);
  }
  std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)this + 10);
}

void TI::TIInputRecognizer::state_for_typology_logging(uint64_t a1@<X0>, int a2@<W1>, CFMutableStringRef *a3@<X8>)
{
  void v45[2] = *MEMORY[0x1E4F143B8];
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  uint64_t v8 = Mutable;
  if (*(void *)(a1 + 80) == *(void *)(a1 + 88))
  {
    *a3 = Mutable;
    if (Mutable)
    {
      CFRetain(Mutable);
      *a3 = v8;
      CFRelease(v8);
    }
    return;
  }
  KB::append_format(Mutable, (__CFString *)"IT Recognizer State\n", v7);
  if (*(unsigned char *)(a1 + 232))
  {
    uint8x8_t v10 = (void *)(a1 + 208);
    if (*(char *)(a1 + 231) < 0)
    {
      if (!*(void *)(a1 + 216)) {
        goto LABEL_13;
      }
      uint8x8_t v10 = (void *)*v10;
    }
    else if (!*(unsigned char *)(a1 + 231))
    {
      goto LABEL_13;
    }
    KB::append_format(v8, (__CFString *)"BundleURL: \"%s\"\n", v9, v10);
  }
LABEL_13:
  double v37 = a3;
  if (a2 == 1)
  {
    KB::append_format(v8, (__CFString *)"\nIT Prefixes:\n", v9);
    uint64_t v11 = *(void *)(a1 + 80);
    for (uint64_t i = *(void *)(a1 + 88); v11 != i; v11 += 8)
    {
      if ((ITCandidateIsValidWord() & 1) == 0)
      {
        CFStringRef String = (const __CFString *)ITCandidateGetString();
        KB::utf8_string(String, (uint64_t)v42);
        unint64_t v14 = (const char *)v44;
        if (!v44) {
          unint64_t v14 = (const char *)v45;
        }
        if (v42[0]) {
          int v15 = v14;
        }
        else {
          int v15 = "";
        }
        ITCandidateGetScore();
        double v17 = v16;
        CFStringRef StrokedPath = (const __CFString *)ITCandidateGetStrokedPath();
        KB::utf8_string(StrokedPath, (uint64_t)v38);
        unint64_t v20 = (const char *)v40;
        if (!v40) {
          unint64_t v20 = v41;
        }
        if (v38[0]) {
          unint64_t v21 = v20;
        }
        else {
          unint64_t v21 = "";
        }
        KB::append_format(v8, (__CFString *)"[%s] G %.6f StrokedPath=%s\n", v19, v15, *(void *)&v17, v21);
        if (v40 && v39 == 1) {
          free(v40);
        }
        if (v44 && v43 == 1) {
          free(v44);
        }
      }
    }
  }
  KB::append_format(v8, (__CFString *)"\nIT Candidates:\n", v9);
  uint64_t v22 = *(void *)(a1 + 80);
  uint64_t v23 = *(void *)(a1 + 88);
  if (v22 != v23)
  {
    uint64_t v24 = 0;
    do
    {
      int IsCompletion = ITCandidateIsCompletion();
      if (a2 != 5)
      {
        if (a2)
        {
          if (a2 == 1) {
            int v26 = IsCompletion;
          }
          else {
            int v26 = 0;
          }
          if (v26 != 1) {
            goto LABEL_63;
          }
        }
        else if (IsCompletion)
        {
          goto LABEL_63;
        }
      }
      CFStringRef v27 = (const __CFString *)ITCandidateGetString();
      KB::utf8_string(v27, (uint64_t)v42);
      uint8x8_t v28 = (const char *)v44;
      if (!v44) {
        uint8x8_t v28 = (const char *)v45;
      }
      if (v42[0]) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = "";
      }
      ITCandidateGetScore();
      double v31 = v30;
      if (ITCandidateIsCompletion()) {
        uint64_t v32 = "Yes";
      }
      else {
        uint64_t v32 = "No";
      }
      CFStringRef v33 = (const __CFString *)ITCandidateGetStrokedPath();
      KB::utf8_string(v33, (uint64_t)v38);
      int v35 = (const char *)v40;
      if (!v40) {
        int v35 = v41;
      }
      if (v38[0]) {
        int v36 = v35;
      }
      else {
        int v36 = "";
      }
      KB::append_format(v8, (__CFString *)"[%s] G %.6f Completion=%s StrokedPath=%s\n", v34, v29, *(void *)&v31, v32, v36);
      if (v40 && v39 == 1) {
        free(v40);
      }
      if (v44)
      {
        if (v43 == 1) {
          free(v44);
        }
      }
      if (++v24 == 10) {
        break;
      }
LABEL_63:
      v22 += 8;
    }
    while (v22 != v23);
  }
  *double v37 = v8;
}

void TI::Favonius::Touch::create()
{
}

uint64_t TI::Favonius::Touch::Touch(uint64_t result, int a2, int a3, atomic_uint **a4, int a5, int a6, double a7, double a8, float a9, double a10)
{
  *(_DWORD *)uint64_t result = 1;
  *(double *)(result + 8) = a7;
  *(double *)(result + 16) = a8;
  *(float *)(result + 24) = a9;
  *(double *)(result + 32) = a10;
  *(_DWORD *)(result + 40) = a5;
  *(_DWORD *)(result + 44) = a6;
  *(_DWORD *)(result + 48) = a2;
  *(_DWORD *)(result + 52) = a3;
  uint8x8_t v10 = *a4;
  *(void *)(result + 56) = *a4;
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  return result;
}

{
  atomic_uint *v10;

  *(_DWORD *)uint64_t result = 1;
  *(double *)(result + 8) = a7;
  *(double *)(result + 16) = a8;
  *(float *)(result + 24) = a9;
  *(double *)(result + 32) = a10;
  *(_DWORD *)(result + 40) = a5;
  *(_DWORD *)(result + 44) = a6;
  *(_DWORD *)(result + 48) = a2;
  *(_DWORD *)(result + 52) = a3;
  uint8x8_t v10 = *a4;
  *(void *)(result + 56) = *a4;
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  return result;
}

void TIInlineCompletionGeneratorImpl::TIInlineCompletionGeneratorImpl(TIInlineCompletionGeneratorImpl *this, const __CFLocale *a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFString *a6)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *((void *)this + 7) = a2;
  if (a2)
  {
    CFRetain(a2);
    *((void *)this + 7) = a2;
  }
  *((void *)this + 8) = a6;
  if (a6)
  {
    CFRetain(a6);
    *((void *)this + 8) = a6;
  }
  *((void *)this + 9) = a3;
  *((void *)this + 10) = a4;
  *((void *)this + 11) = a5;
  *((void *)this + 12) = a4;
  *((unsigned char *)this + 104) = 0;
  *((unsigned char *)this + 288) = 0;
  *((unsigned char *)this + 352) = 0;
  *((void *)this + 45) = 0;
  *((unsigned char *)this + 368) = 0;
  *((unsigned char *)this + 392) = 0;
  *((void *)this + 50) = 0;
  *((unsigned char *)this + 408) = 0;
  *((unsigned char *)this + 736) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((unsigned char *)this + 328) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((unsigned char *)this + 760) = 0;
  CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 6), (const void *)*MEMORY[0x1E4F720D8], (const void *)*MEMORY[0x1E4F72118]);
  CFNumberRef v12 = CFNumberCreate(0, kCFNumberSInt64Type, (char *)this + 72);
  CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt64Type, (char *)this + 80);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 6), (const void *)*MEMORY[0x1E4F720A8], v12);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 6), (const void *)*MEMORY[0x1E4F720A0], v13);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 6), (const void *)*MEMORY[0x1E4F72120], (const void *)*MEMORY[0x1E4F1CFC8]);
  *((void *)this + 45) = +[TIKeyboardFeatureSpecialization createAcceptableCharacterSetForKeyboardLocale:*((void *)this + 7)];
  MEMORY[0x1E4E7CD70]();
  unint64_t v14 = (std::__shared_weak_count *)operator new(0x1F8uLL);
  v14->__shared_weak_owners_ = 0;
  v14->__shared_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75EC0;
  v14[1].__vftable = 0;
  uint64_t v15 = (uint64_t)&v14[1];
  LOBYTE(v14[3].__vftable) = 0;
  LOBYTE(v14[3].__shared_owners_) = 0;
  LOBYTE(v14[4].__shared_weak_owners_) = 0;
  LOBYTE(v14[5].__vftable) = 0;
  LOBYTE(v14[6].__shared_owners_) = 0;
  LOBYTE(v14[6].__shared_weak_owners_) = 0;
  BYTE4(v14[6].__shared_weak_owners_) = 0;
  LOBYTE(v14[7].__vftable) = 0;
  LOBYTE(v14[20].__shared_weak_owners_) = 0;
  v14[1].__shared_owners_ = 0;
  *(void *)&long long v16 = v14 + 1;
  *((void *)&v16 + 1) = v14;
  long long v18 = v16;
  LOBYTE(v14[1].__shared_weak_owners_) = 0;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)&v14[1];
  v14[1].__shared_owners_ = (uint64_t)v14;
  std::__shared_weak_count::__release_shared[abi:nn180100](v14);
  double v17 = (std::__shared_weak_count *)*((void *)this + 94);
  *(_OWORD *)((char *)this + 744) = v18;
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v17);
    uint64_t v15 = *((void *)this + 93);
  }
  TIInlineCompletionEventDispatcher::did_update_metadata(v15, (unsigned char *)this + 408);
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
}

void std::__shared_ptr_emplace<TIInlineCompletionEventDispatcher>::__on_zero_shared(uint64_t a1)
{
  std::__optional_destruct_base<TIInlineCompletionAnalyticsMetadata,false>::~__optional_destruct_base[abi:nn180100](a1 + 168);
  if (*(unsigned char *)(a1 + 152))
  {
    unint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      if (*(unsigned char *)(a1 + 126) == 1) {
        free(v2);
      }
    }
  }
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v3 = *(void **)(a1 + 88);
    if (v3)
    {
      if (*(unsigned char *)(a1 + 86) == 1) {
        free(v3);
      }
    }
  }
  if (*(unsigned char *)(a1 + 72))
  {
    BOOL v4 = *(void **)(a1 + 48);
    if (v4)
    {
      if (*(unsigned char *)(a1 + 46) == 1) {
        free(v4);
      }
    }
  }
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__shared_ptr_emplace<TIInlineCompletionEventDispatcher>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TIInlineCompletionEventDispatcher>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F75EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TIInlineCompletionGeneratorImpl::~TIInlineCompletionGeneratorImpl(TIInlineCompletionGeneratorImpl *this)
{
  if (*((void *)this + 45)) {
    uset_close();
  }
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 94);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  std::__optional_destruct_base<TIInlineCompletionAnalyticsMetadata,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)this + 408);
  uint64_t v3 = (unsigned int *)*((void *)this + 50);
  if (v3) {
    WTF::RefCounted<KB::DictionaryContainer>::deref(v3);
  }
  if (*((unsigned char *)this + 392))
  {
    uint8x8_t v10 = (void **)((char *)this + 368);
    std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v10);
  }
  if (*((unsigned char *)this + 352))
  {
    uint8x8_t v10 = (void **)((char *)this + 328);
    std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v10);
  }
  std::unique_ptr<TI::RejectionsDatabase>::reset[abi:nn180100]((TI::RejectionsDatabase **)this + 39, 0);
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }
  if (*((unsigned char *)this + 288)) {
    std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair((uint64_t)this + 104);
  }
  BOOL v5 = (const void *)*((void *)this + 8);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 8) = 0;
  unint64_t v6 = (const void *)*((void *)this + 7);
  if (v6) {
    CFRelease(v6);
  }
  *((void *)this + 7) = 0;
  unint64_t v7 = (const void *)*((void *)this + 6);
  if (v7) {
    CFRelease(v7);
  }
  *((void *)this + 6) = 0;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  }
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176)) {
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)(a1 + 168));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  BOOL v5 = (void **)(a1 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 72));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 64));
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  return a1;
}

void TIInlineCompletionGeneratorImpl::initialize(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  atomic_store(0, (unsigned __int8 *)(a1 + 16));
  unint64_t v6 = *(std::mutex **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 304);
  *(void *)(a1 + 296) = v6;
  *(void *)(a1 + 304) = v5;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
    unint64_t v6 = *(std::mutex **)(a1 + 296);
  }
  std::mutex::lock(v6);
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint8x8_t v10 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v10);
    uint64_t v8 = *(void *)(a1 + 32);
  }
  if (v8)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 16));
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315138;
    CFNumberRef v12 = "initialize";
    _os_log_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s  TIInlineCompletionGeneratorImpl: Failed to initialize language model session", (uint8_t *)&v11, 0xCu);
  }
  std::mutex::unlock(v6);
}

uint64_t TIInlineCompletionGeneratorImpl::isValid(TIInlineCompletionGeneratorImpl *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 16);
  return v1 & 1;
}

void validFirstNames(void *a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  size_t v38 = 0;
  int64x2_t v3 = 0uLL;
  int64x2_t v37 = 0u;
  if (a1[1] == *a1)
  {
    float v30 = 0;
  }
  else
  {
    double v31 = a3;
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = objc_opt_new();
      if (*(_WORD *)(*a1 + 32 * v6))
      {
        uint64_t v8 = *a1 + 32 * v6;
        uint64_t v9 = *(const char **)(v8 + 8);
        uint8x8_t v10 = (const char *)(v8 + 16);
        if (v9) {
          int v11 = v9;
        }
        else {
          int v11 = v10;
        }
      }
      else
      {
        int v11 = "";
      }
      CFNumberRef v12 = objc_msgSend(NSString, "stringWithUTF8String:", v11, v31);
      uint64_t v13 = [v7 personNameComponentsFromString:v12];
      unint64_t v14 = [v13 givenName];

      if ([v14 length])
      {
        uint64_t v33 = 0;
        unint64_t v34 = &v33;
        uint64_t v35 = 0x2020000000;
        char v36 = 1;
        uint64_t v15 = [v14 length];
        v32[0] = MEMORY[0x1E4F143A8];
        v32[1] = 3221225472;
        v32[2] = ___Z15validFirstNamesRKNSt3__16vectorIN2KB6StringENS_9allocatorIS2_EEEEPK4USet_block_invoke;
        void v32[3] = &unk_1E6E2C2C0;
        void v32[4] = &v33;
        void v32[5] = a2;
        objc_msgSend(v14, "_enumerateLongCharactersInRange:usingBlock:", 0, v15, v32);
        if (*((unsigned char *)v34 + 24))
        {
          KB::utf8_string((KB *)v14, (uint64_t)v43);
          uint64_t v16 = v37.i64[1];
          if (v37.i64[1] >= (unint64_t)v38)
          {
            uint64_t v18 = (v37.i64[1] - v37.i64[0]) >> 5;
            if ((unint64_t)(v18 + 1) >> 59) {
              abort();
            }
            unint64_t v19 = ((uint64_t)v38 - v37.i64[0]) >> 4;
            if (v19 <= v18 + 1) {
              unint64_t v19 = v18 + 1;
            }
            if ((unint64_t)v38 - v37.i64[0] >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            size_t v42 = &v38;
            unint64_t v21 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v20);
            uint64_t v22 = (uint64_t)&v21[4 * v18];
            char v39 = v21;
            v40.i64[0] = v22;
            char v41 = &v21[4 * v23];
            *(_DWORD *)uint64_t v22 = 0x100000;
            *(_WORD *)(v22 + 4) = 0;
            *(unsigned char *)(v22 + 6) = 0;
            *(void *)(v22 + 8) = 0;
            KB::String::operator=(v22, (KB::String *)v43);
            uint64_t v17 = v22 + 32;
            v40.i64[1] = v22 + 32;
            uint64_t v24 = (KB::String *)v37.i64[1];
            unint64_t v25 = (KB::String *)v37.i64[0];
            uint64_t v26 = v40.i64[0];
            if (v37.i64[1] == v37.i64[0])
            {
              int64x2_t v28 = vdupq_n_s64(v37.u64[1]);
            }
            else
            {
              uint64_t v27 = v40.i64[0] - 32;
              do
              {
                *(_DWORD *)uint64_t v27 = 0x100000;
                uint64_t v24 = (KB::String *)((char *)v24 - 32);
                *(_WORD *)(v27 + 4) = 0;
                *(unsigned char *)(v27 + 6) = 0;
                *(void *)(v27 + 8) = 0;
                uint64_t v26 = KB::String::operator=(v27, v24);
                uint64_t v27 = v26 - 32;
              }
              while (v24 != v25);
              int64x2_t v28 = v37;
              uint64_t v17 = v40.i64[1];
            }
            v37.i64[0] = v26;
            v37.i64[1] = v17;
            int64x2_t v40 = v28;
            uint64_t v29 = v38;
            size_t v38 = v41;
            char v41 = v29;
            char v39 = (void **)v28.i64[0];
            std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v39);
          }
          else
          {
            *(_DWORD *)v37.i64[1] = 0x100000;
            *(_WORD *)(v16 + 4) = 0;
            *(unsigned char *)(v16 + 6) = 0;
            *(void *)(v16 + 8) = 0;
            uint64_t v17 = KB::String::operator=(v16, (KB::String *)v43) + 32;
          }
          v37.i64[1] = v17;
          if (v44 && v43[6] == 1) {
            free(v44);
          }
        }
        _Block_object_dispose(&v33, 8);
      }

      ++v6;
    }
    while (v6 < (uint64_t)(a1[1] - *a1) >> 5);
    int64x2_t v3 = v37;
    float v30 = v38;
    a3 = v31;
  }
  *a3 = v3;
  a3[1].i64[0] = (uint64_t)v30;
  size_t v38 = 0;
  int64x2_t v37 = 0uLL;
  a3[1].i8[8] = 1;
  char v39 = (void **)&v37;
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v39);
}

uint64_t ___Z15validFirstNamesRKNSt3__16vectorIN2KB6StringENS_9allocatorIS2_EEEEPK4USet_block_invoke(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = MEMORY[0x1E4E7CC30](a2);
  uint64_t result = MEMORY[0x1E4E7CD40](v5, v6);
  if (!result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    *a3 = 1;
  }
  return result;
}

void TIInlineCompletionGeneratorImpl::setCurrentRecipientNames(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (KB::String *)(a1 + 328);
  if (!*(unsigned char *)(a1 + 352)
    || (uint64_t v5 = *(KB::String **)(a1 + 328),
        uint64_t v6 = *(KB::String **)(a1 + 336),
        unint64_t v7 = *(const KB::String **)a2,
        v6 - v5 != *(void *)(a2 + 8) - *(void *)a2))
  {
LABEL_7:
    validFirstNames((void *)a2, *(void *)(a1 + 360), &v9);
    int v8 = v11;
    if (*(unsigned __int8 *)(a1 + 392) == v11)
    {
      if (*(unsigned char *)(a1 + 392))
      {
        std::vector<KB::String>::__vdeallocate((void **)(a1 + 368));
        *(int64x2_t *)(a1 + 368) = v9;
        *(void *)(a1 + 384) = v10;
        uint64_t v10 = 0;
        int64x2_t v9 = 0uLL;
        if (!v8) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 392))
      {
        *(int64x2_t *)(a1 + 368) = v9;
        *(void *)(a1 + 384) = v10;
        uint64_t v10 = 0;
        int64x2_t v9 = 0uLL;
        *(unsigned char *)(a1 + 392) = 1;
        if (!v8) {
          goto LABEL_15;
        }
LABEL_14:
        CFNumberRef v12 = &v9;
        std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v12);
        goto LABEL_15;
      }
      CFNumberRef v12 = (int64x2_t *)(a1 + 368);
      std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v12);
      *(unsigned char *)(a1 + 392) = 0;
    }
    if (!v8) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  while (v5 != v6)
  {
    if (v5 != v7 && !KB::String::equal(v5, v7, 1)) {
      goto LABEL_7;
    }
    uint64_t v5 = (KB::String *)((char *)v5 + 32);
    unint64_t v7 = (const KB::String *)((char *)v7 + 32);
  }
LABEL_15:
  if (*(unsigned char *)(a1 + 352))
  {
    if (v4 != (KB::String *)a2) {
      std::vector<KB::String>::__assign_with_size[abi:nn180100]<KB::String*,KB::String*>((uint64_t)v4, *(KB::String **)a2, *(KB::String **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
    }
  }
  else
  {
    *(void *)BOOL v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    std::vector<KB::String>::__init_with_size[abi:nn180100]<KB::String*,KB::String*>(v4, *(const KB::String **)a2, *(const KB::String **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
    *(unsigned char *)(a1 + 352) = 1;
  }
}

void std::vector<KB::String>::__assign_with_size[abi:nn180100]<KB::String*,KB::String*>(uint64_t a1, KB::String *a2, KB::String *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  int v8 = *(KB::String **)a1;
  if (a4 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    unint64_t v14 = *(KB::String **)(a1 + 8);
    unint64_t v15 = (v14 - v8) >> 5;
    if (v15 >= a4)
    {
      if (a2 != a3)
      {
        do
        {
          KB::String::operator=(v8, v6);
          uint64_t v6 = (KB::String *)((char *)v6 + 32);
          int v8 = (KB::String *)((char *)v8 + 32);
        }
        while (v6 != a3);
        unint64_t v14 = *(KB::String **)(a1 + 8);
      }
      while (v14 != v8)
      {
        unint64_t v20 = (void *)*((void *)v14 - 3);
        if (v20 && *((unsigned char *)v14 - 26) == 1) {
          free(v20);
        }
        unint64_t v14 = (KB::String *)((char *)v14 - 32);
      }
      *(void *)(a1 + 8) = v8;
    }
    else
    {
      uint64_t v16 = (KB::String *)((char *)a2 + 32 * v15);
      if (v14 != v8)
      {
        uint64_t v17 = 32 * v15;
        do
        {
          KB::String::operator=(v8, v6);
          uint64_t v6 = (KB::String *)((char *)v6 + 32);
          int v8 = (KB::String *)((char *)v8 + 32);
          v17 -= 32;
        }
        while (v17);
        int v8 = *(KB::String **)(a1 + 8);
      }
      uint64_t v18 = v8;
      if (v16 != a3)
      {
        uint64_t v18 = v8;
        do
        {
          unint64_t v19 = KB::String::String(v18, v16);
          uint64_t v16 = (const KB::String *)((char *)v16 + 32);
          uint64_t v18 = (KB::String *)((char *)v19 + 32);
        }
        while (v16 != a3);
      }
      *(void *)(a1 + 8) = v18;
    }
  }
  else
  {
    std::vector<KB::String>::__vdeallocate((void **)a1);
    if (a4 >> 59) {
      abort();
    }
    uint64_t v9 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v10 = v9 >> 4;
    if (v9 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<KB::String>::__vallocate[abi:nn180100]((void *)a1, v11);
    CFNumberRef v12 = *(KB::String **)(a1 + 8);
    while (v6 != a3)
    {
      uint64_t v13 = KB::String::String(v12, v6);
      uint64_t v6 = (KB::String *)((char *)v6 + 32);
      CFNumberRef v12 = (KB::String *)((char *)v13 + 32);
    }
    *(void *)(a1 + 8) = v12;
  }
}

void std::vector<KB::String>::__vdeallocate(void **a1)
{
  unsigned __int8 v1 = (char *)*a1;
  if (*a1)
  {
    int64x2_t v3 = (char *)a1[1];
    BOOL v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          if (*(v3 - 26) == 1) {
            free(v5);
          }
        }
        v3 -= 32;
      }
      while (v3 != v1);
      BOOL v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void TIInlineCompletionGeneratorImpl::setInlineCompletionPersonalization(CFMutableDictionaryRef *this, const KB::String *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v6, a2);
  BOOL v3 = isInlineCompletionDefaultAllowlistedApp((KB::String *)v6);
  if (v7) {
    BOOL v4 = v6[6] == 1;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    free(v7);
  }
  uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
  if (v3) {
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  CFDictionarySetValue(this[6], (const void *)*MEMORY[0x1E4F72120], *v5);
}

void TIInlineCompletionGeneratorImpl::setAnalyticsMetaData(TIInlineCompletionGeneratorImpl *this, TIInlineCompletionAnalyticsMetadata *a2)
{
  BOOL v4 = (TIInlineCompletionGeneratorImpl *)((char *)this + 408);
  p_var1 = &a2->var1;
  uint64_t v6 = (TIInlineCompletionGeneratorImpl *)((char *)this + 472);
  p_var2 = &a2->var2;
  p_var3 = &a2->var3;
  p_var4 = &a2->var4;
  p_var5 = &a2->var5;
  uint64_t v13 = (TIInlineCompletionGeneratorImpl *)((char *)this + 568);
  uint64_t v16 = (TIInlineCompletionGeneratorImpl *)((char *)this + 640);
  p_var7 = (KB::String *)&a2->var7;
  p_var8 = &a2->var8;
  p_var9 = &a2->var9;
  uint64_t v18 = (TIInlineCompletionGeneratorImpl *)((char *)this + 672);
  unint64_t v20 = (TIInlineCompletionGeneratorImpl *)((char *)this + 704);
  unint64_t v21 = (TIInlineCompletionGeneratorImpl *)((char *)this + 608);
  p_var10 = &a2->var10;
  unint64_t v11 = v4;
  if (*((unsigned char *)this + 736))
  {
    KB::String::operator=(v4, (KB::String *)a2);
    KB::String::operator=((TIInlineCompletionGeneratorImpl *)((char *)this + 440), (KB::String *)p_var1);
    KB::String::operator=((TIInlineCompletionGeneratorImpl *)((char *)this + 472), (KB::String *)p_var2);
    KB::String::operator=((TIInlineCompletionGeneratorImpl *)((char *)this + 504), (KB::String *)p_var3);
    KB::String::operator=((TIInlineCompletionGeneratorImpl *)((char *)this + 536), (KB::String *)p_var4);
    KB::String::operator=(v13, (KB::String *)p_var5);
    *((unsigned char *)this + 600) = a2->var6;
    uint64_t v6 = (TIInlineCompletionGeneratorImpl *)((char *)this + 608);
    KB::String::operator=(v21, p_var7);
    KB::String::operator=(v16, (KB::String *)p_var8);
    KB::String::operator=(v18, (KB::String *)p_var9);
    KB::String::operator=(v20, (KB::String *)p_var10);
    if (*((unsigned char *)this + 736)) {
      goto LABEL_5;
    }
    BOOL v4 = (KB::String *)std::__throw_bad_optional_access[abi:nn180100]();
  }
  KB::String::String(v4, (const KB::String *)a2);
  KB::String::String((TIInlineCompletionGeneratorImpl *)((char *)this + 440), (const KB::String *)p_var1);
  KB::String::String(v6, (const KB::String *)p_var2);
  KB::String::String((TIInlineCompletionGeneratorImpl *)((char *)this + 504), (const KB::String *)p_var3);
  KB::String::String((TIInlineCompletionGeneratorImpl *)((char *)this + 536), (const KB::String *)p_var4);
  KB::String::String(v13, (const KB::String *)p_var5);
  *((unsigned char *)this + 600) = a2->var6;
  uint64_t v6 = (TIInlineCompletionGeneratorImpl *)((char *)this + 608);
  KB::String::String(v21, p_var7);
  KB::String::String(v16, (const KB::String *)p_var8);
  KB::String::String(v18, (const KB::String *)p_var9);
  KB::String::String(v20, (const KB::String *)p_var10);
  *((unsigned char *)this + 736) = 1;
LABEL_5:
  TIInlineCompletionGeneratorImpl::setInlineCompletionPersonalization((CFMutableDictionaryRef *)this, v6);
  uint64_t v10 = *((void *)this + 93);
  if (v10)
  {
    TIInlineCompletionEventDispatcher::did_update_metadata(v10, v11);
  }
}

void tokenize(const __CFLocale *a1@<X1>, KB::LanguageModelContext *a2@<X8>)
{
  LMStreamTokenizerCreate();
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x9812000000;
  CFNumberRef v12 = __Block_byref_object_copy__11906;
  uint64_t v13 = __Block_byref_object_dispose__11907;
  unint64_t v14 = "";
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v19);
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v20);
  memset(v21, 0, sizeof(v21));
  CFStringRef v5 = (const __CFString *)MEMORY[0x1E4E79AD0](a1);
  KB::std_string(v5, __p);
  if (v8 >= 0) {
    uint64_t v6 = (char *)__p;
  }
  else {
    uint64_t v6 = (char *)__p[0];
  }
  TILexiconIDForLocaleIdentifier(v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  LMStreamTokenizerPushBytes();
  LMStreamTokenizerRelease();
  KB::LanguageModelContext::LanguageModelContext(a2, (const KB::LanguageModelContext *)(v10 + 6));
  _Block_object_dispose(&v9, 8);
  __p[0] = v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v20);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v19);
  if ((void)v16)
  {
    *((void *)&v16 + 1) = v16;
    operator delete((void *)v16);
  }
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v15 + 1));
  }
}

uint64_t __Block_byref_object_copy__11906(uint64_t a1, uint64_t a2)
{
  return KB::LanguageModelContext::LanguageModelContext(a1 + 48, a2 + 48);
}

void __Block_byref_object_dispose__11907(uint64_t a1)
{
  BOOL v4 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 120));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 112));
  unint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
}

void ___Z8tokenizeRKN2KB6StringEPK10__CFLocale_block_invoke(uint64_t a1, const char *a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v7, a2, a3);
  if (a4 != 2)
  {
    v10.lexicon_id = *(_DWORD *)(a1 + 40);
    v10.word_id = a4;
    KB::LanguageModelContext::append((KB::LanguageModelContext *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), v10, (const KB::String *)v7, 0);
  }
  if (v8) {
    BOOL v6 = v7[6] == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    free(v8);
  }
}

uint64_t fullCompletionFromCacheElement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
  }
  BOOL v4 = (std::string *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    *(void *)(a2 + 40) = *(void *)(a1 + 40);
  }
  *(unsigned char *)(a2 + 64) = 0;
  uint64_t result = a2 + 64;
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  *(unsigned char *)(a2 + 72) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = MEMORY[0x1E4E7B4C0]();
    *(unsigned char *)(a2 + 72) = 1;
  }
  return result;
}

void completionFromCacheElement(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __str = *(std::string *)a1;
  }
  std::string::basic_string(&v8, &__str, *(void *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v9);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v8;
  }
  if (*(unsigned char *)(a1 + 72)) {
    uint64_t v4 = language_modeling::v1::InlineCompletion::probability((language_modeling::v1::InlineCompletion *)(a1 + 64));
  }
  else {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 56);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = v4;
    *(_DWORD *)(a2 + 56) = v5;
    *(unsigned char *)(a2 + 64) = 0;
    *(unsigned char *)(a2 + 72) = 0;
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)a2 = __p;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = v4;
    *(_DWORD *)(a2 + 56) = v5;
    *(unsigned char *)(a2 + 64) = 0;
    *(unsigned char *)(a2 + 72) = 0;
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

uint64_t phraseBlockedByNegativeLearning(sqlite3 **a1, int a2, std::string *this)
{
  std::string::size_type v6 = 0;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  long long v44 = 0uLL;
  unint64_t v45 = 0;
  while (1)
  {
    std::string::size_type v7 = std::string::find(this, 32, v6);
    if (v7 == -1) {
      break;
    }
    std::string::size_type v8 = v7;
    std::string::basic_string(&v46, this, v6, v7 - v6, (std::allocator<char> *)v47);
    char v9 = (_OWORD *)*((void *)&v44 + 1);
    if (*((void *)&v44 + 1) >= v45)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v44 + 1) - v44) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_58;
      }
      if (0x5555555555555556 * ((uint64_t)(v45 - v44) >> 3) > v12) {
        unint64_t v12 = 0x5555555555555556 * ((uint64_t)(v45 - v44) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v44) >> 3) >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      *(void *)&v47[32] = &v45;
      if (v13) {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      unint64_t v15 = v13 + 8 * ((uint64_t)(*((void *)&v44 + 1) - v44) >> 3);
      long long v16 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
      *(void *)(v15 + 16) = *((void *)&v46.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v15 = v16;
      memset(&v46, 0, sizeof(v46));
      uint64_t v17 = *((void *)&v44 + 1);
      uint64_t v18 = v44;
      if (*((void *)&v44 + 1) == (void)v44)
      {
        int64x2_t v21 = vdupq_n_s64(*((unint64_t *)&v44 + 1));
        unint64_t v19 = v13 + 24 * v11;
      }
      else
      {
        unint64_t v19 = v13 + 24 * v11;
        do
        {
          long long v20 = *(_OWORD *)(v17 - 24);
          *(void *)(v19 - 8) = *(void *)(v17 - 8);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          *(void *)(v17 - 16) = 0;
          *(void *)(v17 - 8) = 0;
          *(void *)(v17 - 24) = 0;
          v17 -= 24;
        }
        while (v17 != v18);
        int64x2_t v21 = (int64x2_t)v44;
      }
      unint64_t v22 = v15 + 24;
      *(void *)&long long v44 = v19;
      *(int64x2_t *)&v47[8] = v21;
      unint64_t v23 = v45;
      unint64_t v45 = v13 + 24 * v14;
      *(void *)&v47[24] = v23;
      *(void *)uint64_t v47 = v21.i64[0];
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)v47);
      *((void *)&v44 + 1) = v22;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v10 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
      *(void *)(*((void *)&v44 + 1) + 16) = *((void *)&v46.__r_.__value_.__l + 2);
      *char v9 = v10;
      *((void *)&v44 + 1) = (char *)v9 + 24;
    }
    std::string::size_type v6 = v8 + 1;
  }
  std::string::basic_string(&v46, this, v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v47);
  uint64_t v24 = (_OWORD *)*((void *)&v44 + 1);
  if (*((void *)&v44 + 1) >= v45)
  {
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v44 + 1) - v44) >> 3);
    unint64_t v28 = v27 + 1;
    if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_58:
    }
      abort();
    if (0x5555555555555556 * ((uint64_t)(v45 - v44) >> 3) > v28) {
      unint64_t v28 = 0x5555555555555556 * ((uint64_t)(v45 - v44) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v44) >> 3) >= 0x555555555555555) {
      unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v29 = v28;
    }
    *(void *)&v47[32] = &v45;
    if (v29) {
      unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v29);
    }
    else {
      uint64_t v30 = 0;
    }
    unint64_t v31 = v29 + 8 * ((uint64_t)(*((void *)&v44 + 1) - v44) >> 3);
    long long v32 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
    *(void *)(v31 + 16) = *((void *)&v46.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v31 = v32;
    memset(&v46, 0, sizeof(v46));
    uint64_t v33 = *((void *)&v44 + 1);
    uint64_t v34 = v44;
    if (*((void *)&v44 + 1) == (void)v44)
    {
      int64x2_t v37 = vdupq_n_s64(*((unint64_t *)&v44 + 1));
      unint64_t v35 = v29 + 24 * v27;
    }
    else
    {
      unint64_t v35 = v29 + 24 * v27;
      do
      {
        long long v36 = *(_OWORD *)(v33 - 24);
        *(void *)(v35 - 8) = *(void *)(v33 - 8);
        *(_OWORD *)(v35 - 24) = v36;
        v35 -= 24;
        *(void *)(v33 - 16) = 0;
        *(void *)(v33 - 8) = 0;
        *(void *)(v33 - 24) = 0;
        v33 -= 24;
      }
      while (v33 != v34);
      int64x2_t v37 = (int64x2_t)v44;
    }
    uint64_t v26 = (char *)(v31 + 24);
    *(void *)&long long v44 = v35;
    *(int64x2_t *)&v47[8] = v37;
    unint64_t v38 = v45;
    unint64_t v45 = v29 + 24 * v30;
    *(void *)&v47[24] = v38;
    *(void *)uint64_t v47 = v37.i64[0];
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)v47);
    *((void *)&v44 + 1) = v26;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v46.__r_.__value_.__l.__data_);
      uint64_t v26 = (char *)*((void *)&v44 + 1);
    }
  }
  else
  {
    long long v25 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
    *(void *)(*((void *)&v44 + 1) + 16) = *((void *)&v46.__r_.__value_.__l + 2);
    *uint64_t v24 = v25;
    uint64_t v26 = (char *)v24 + 24;
    *((void *)&v44 + 1) = (char *)v24 + 24;
  }
  uint64_t v39 = v44;
  if ((char *)v44 == v26)
  {
LABEL_44:
    *(void *)uint64_t v47 = &v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v47);
    return 0;
  }
  else
  {
    int v40 = a2;
    while (!((unint64_t)TIInlineCompletionsNegativeLearning::wordBlockedByNegativeLearning(a1, v40, v39, 0) >> 32))
    {
      int v40 = 0;
      v39 += 24;
      if ((char *)v39 == v26) {
        goto LABEL_44;
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string(&v46, this, 0, a2, (std::allocator<char> *)v47);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v42 = &v46;
      }
      else {
        size_t v42 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v43 = this;
      }
      else {
        char v43 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      if (*(char *)(v39 + 23) < 0) {
        uint64_t v39 = *(void *)v39;
      }
      *(_DWORD *)uint64_t v47 = 136315906;
      *(void *)&v47[4] = "phraseBlockedByNegativeLearning";
      *(_WORD *)&v47[12] = 2080;
      *(void *)&v47[14] = v42;
      *(_WORD *)&v47[22] = 2080;
      *(void *)&v47[24] = v43;
      *(_WORD *)&v47[32] = 2080;
      *(void *)&v47[34] = v39;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
    }
    *(void *)uint64_t v47 = &v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v47);
    return 1;
  }
}

uint64_t TIInlineCompletionsNegativeLearning::wordBlockedByNegativeLearning(sqlite3 **a1, int a2, uint64_t a3, unsigned int a4)
{
  if (!TIAdaptationAutocorrectionRejectionV2Enabled())
  {
    uint64_t v11 = 0;
    LOBYTE(v10) = 0;
    return v10 | ((*(void *)&a4 & 0xFFFFFFLL) << 8) | (v11 << 32);
  }
  double v8 = (double)std::chrono::system_clock::now().__d_.__rep_ / 1000000.0;
  if ((a4 & 1) == 0)
  {
    std::string::basic_string[abi:nn180100]<0>(&__p, "");
    unsigned int should_block = TI::RejectionsDatabase::soft_should_block((uint64_t)a1, (unsigned __int8 *)&__p, (unsigned __int8 **)a3, 20, v8);
    a4 = should_block;
    if (v18 < 0)
    {
      operator delete(__p);
      if (a4) {
        goto LABEL_5;
      }
    }
    else if (should_block)
    {
LABEL_5:
      if (*(char *)(a3 + 23) >= 0) {
        LODWORD(v10) = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        LODWORD(v10) = *(_DWORD *)(a3 + 8);
      }
      a4 = v10 >> 8;
      uint64_t v11 = 1;
      return v10 | ((*(void *)&a4 & 0xFFFFFFLL) << 8) | (v11 << 32);
    }
  }
  if (*(char *)(a3 + 23) >= 0) {
    unint64_t v12 = (unsigned __int8 *)a3;
  }
  else {
    unint64_t v12 = *(unsigned __int8 **)a3;
  }
  TI::RejectionsDatabase::get_inline_completion_rejections(a1, (const char *)v12, (uint64_t)&__p);
  if (!v23)
  {
    LOBYTE(v10) = 0;
    uint64_t v11 = 0;
    return v10 | ((*(void *)&a4 & 0xFFFFFFLL) << 8) | (v11 << 32);
  }
  int v13 = (char)v22;
  if ((v22 & 0x80u) == 0) {
    unint64_t v10 = v22;
  }
  else {
    unint64_t v10 = v21;
  }
  if (v10 < a2 || (double v14 = (v8 - v19) / 60.0 / 60.0 / 24.0, v14 > 180.0))
  {
LABEL_23:
    uint64_t v11 = 0;
    goto LABEL_24;
  }
  uint64_t v11 = v17;
  if (v17)
  {
    if (log(v14) / 1.38629436 < (double)((int)v11 - 1))
    {
      a4 = v10 >> 8;
      uint64_t v11 = 1;
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_24:
  LOBYTE(v10) = 0;
LABEL_25:
  if (v13 < 0) {
    operator delete(v20);
  }
  return v10 | ((*(void *)&a4 & 0xFFFFFFLL) << 8) | (v11 << 32);
}

uint64_t TIInlineCompletionGeneratorImpl::_shouldSuppress(TIInlineCompletionGeneratorImpl *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 72)
    && language_modeling::v1::InlineCompletion::wordBoundaryAt((language_modeling::v1::InlineCompletion *)(a2 + 64)))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v11 = *(std::string *)a2;
      }
      unint64_t v10 = &v11;
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
      }
      if (*((char *)a3 + 23) < 0) {
        a3 = (uint64_t **)*a3;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"_shouldSuppress";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v10;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      std::string __p = a3;
      _os_log_debug_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: Completion --> %s was found but was suppressed for prefix %s", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
    }
    return 1;
  }
  else
  {
    completionFromCacheElement(a2, (uint64_t)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v11, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else {
      std::string v11 = buf;
    }
    if (v15[8]) {
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v15);
    }
    if (v14 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::string::size_type v7 = (sqlite3 **)TIInlineCompletionGeneratorImpl::rejectionsDatabase(a1);
    if (*((char *)a3 + 23) < 0) {
      double v8 = a3[1];
    }
    else {
      LODWORD(v8) = *((unsigned __int8 *)a3 + 23);
    }
    if (phraseBlockedByNegativeLearning(v7, (int)v8, &v11)) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 0;
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  return v6;
}

uint64_t TIInlineCompletionGeneratorImpl::rejectionsDatabase(TIInlineCompletionGeneratorImpl *this)
{
  uint64_t result = *((void *)this + 39);
  if (!result) {
    operator new();
  }
  return result;
}

void supportedGreetingForLanguage(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v79, "en");
  std::string::basic_string[abi:nn180100]<0>(&v102, "Hi");
  std::string::basic_string[abi:nn180100]<0>(v103, "Hey");
  std::string::basic_string[abi:nn180100]<0>(v104, "Hello");
  std::string::basic_string[abi:nn180100]<0>(v105, "Dear");
  std::string::basic_string[abi:nn180100]<0>(v106, "hi");
  std::string::basic_string[abi:nn180100]<0>(v107, "hey");
  std::string::basic_string[abi:nn180100]<0>(v108, "hello");
  std::string::basic_string[abi:nn180100]<0>(v109, "dear");
  v78[0] = (long long *)operator new(0xC0uLL);
  v78[2] = v78[0] + 12;
  v78[1] = (long long *)std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(&v102, (long long *)v110, (std::string *)v78[0]);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:nn180100]<true,0>(v110, (long long *)v79, v78);
  std::string::basic_string[abi:nn180100]<0>(v76, "fr");
  std::string::basic_string[abi:nn180100]<0>(&v96, "Bonjour");
  std::string::basic_string[abi:nn180100]<0>(v97, "Salut");
  std::string::basic_string[abi:nn180100]<0>(v98, "Coucou");
  std::string::basic_string[abi:nn180100]<0>(v99, "bonjour");
  std::string::basic_string[abi:nn180100]<0>(v100, "salut");
  std::string::basic_string[abi:nn180100]<0>(v101, "coucou");
  v75[0] = (long long *)operator new(0x90uLL);
  v75[2] = v75[0] + 9;
  v75[1] = (long long *)std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(&v96, &v102, (std::string *)v75[0]);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:nn180100]<true,0>(v111, (long long *)v76, v75);
  unint64_t v2 = (unint64_t)v112;
  std::string::basic_string[abi:nn180100]<0>(v73, "es");
  std::string::basic_string[abi:nn180100]<0>(&v85, "Hola");
  std::string::basic_string[abi:nn180100]<0>(v87, "Querido");
  std::string::basic_string[abi:nn180100]<0>(v88, "Querida");
  std::string::basic_string[abi:nn180100]<0>(v89, "Estimado");
  std::string::basic_string[abi:nn180100]<0>(v90, "Estimada");
  std::string::basic_string[abi:nn180100]<0>(v91, "hola");
  std::string::basic_string[abi:nn180100]<0>(v92, "querido");
  std::string::basic_string[abi:nn180100]<0>(v93, "querida");
  std::string::basic_string[abi:nn180100]<0>(v94, "estimado");
  std::string::basic_string[abi:nn180100]<0>(v95, "estimada");
  v72[0] = (long long *)operator new(0xF0uLL);
  v72[2] = v72[0] + 15;
  v72[1] = (long long *)std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(&v85, &v96, (std::string *)v72[0]);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:nn180100]<true,0>(v112, (long long *)v73, v72);
  uint64_t v3 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v82 = 0u;
  float v83 = 1.0;
  do
  {
    uint64_t v4 = &v110[2 * v3];
    int v5 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
    uint64_t v6 = (const std::string::value_type *)v4->__r_.__value_.__r.__words[0];
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
    if (v5 >= 0) {
      double v8 = &v110[2 * v3];
    }
    else {
      double v8 = (std::string *)v4->__r_.__value_.__r.__words[0];
    }
    if (v5 >= 0) {
      unint64_t v9 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    }
    else {
      unint64_t v9 = v4->__r_.__value_.__l.__size_;
    }
    unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v8, v9);
    unint64_t v11 = v10;
    unint64_t v12 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v13.i16[0] = vaddlv_u8(v13);
      unint64_t v14 = v13.u32[0];
      if (v13.u32[0] > 1uLL)
      {
        unint64_t v2 = v10;
        if ((void *)v10 >= __p[1]) {
          unint64_t v2 = v10 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v2 = ((unint64_t)__p[1] - 1) & v10;
      }
      unint64_t v15 = (unsigned __int8 **)*((void *)__p[0] + v2);
      if (v15)
      {
        for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
        {
          unint64_t v17 = *((void *)i + 1);
          if (v17 == v11)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)&v110[2 * v3])) {
              goto LABEL_83;
            }
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12) {
                v17 %= v12;
              }
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v2) {
              break;
            }
          }
        }
      }
    }
    char v18 = (char *)operator new(0x40uLL);
    *(void *)char v18 = 0;
    *((void *)v18 + 1) = v11;
    double v19 = (std::string *)(v18 + 16);
    if (v5 < 0)
    {
      std::string::__init_copy_ctor_external(v19, v6, size);
    }
    else
    {
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      *((void *)v18 + 4) = *((void *)&v4->__r_.__value_.__l + 2);
    }
    *((void *)v18 + 5) = 0;
    *((void *)v18 + 6) = 0;
    *((void *)v18 + 7) = 0;
    std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)(v18 + 40), (long long *)v110[2 * v3 + 1].__r_.__value_.__l.__data_, (long long *)v110[2 * v3 + 1].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v110[2 * v3 + 1].__r_.__value_.__l.__size_ - v110[2 * v3 + 1].__r_.__value_.__r.__words[0]) >> 3));
    float v20 = (float)(unint64_t)(*((void *)&v82 + 1) + 1);
    if (!v12 || (float)(v83 * (float)v12) < v20)
    {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
      if (v12 < 3) {
        BOOL v21 = 1;
      }
      unint64_t v22 = v21 | (2 * v12);
      unint64_t v23 = vcvtps_u32_f32(v20 / v83);
      if (v22 <= v23) {
        int8x8_t prime = (int8x8_t)v23;
      }
      else {
        int8x8_t prime = (int8x8_t)v22;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v12 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_39;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v31 = vcvtps_u32_f32((float)*((unint64_t *)&v82 + 1) / v83);
        if (__p[1] < (void *)3
          || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
        {
          unint64_t v31 = std::__next_prime(v31);
        }
        else
        {
          uint64_t v33 = 1 << -(char)__clz(v31 - 1);
          if (v31 >= 2) {
            unint64_t v31 = v33;
          }
        }
        if (*(void *)&prime <= v31) {
          int8x8_t prime = (int8x8_t)v31;
        }
        if (*(void *)&prime >= v12)
        {
          unint64_t v12 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_39:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            long long v25 = operator new(8 * *(void *)&prime);
            uint64_t v26 = __p[0];
            __p[0] = v25;
            if (v26) {
              operator delete(v26);
            }
            uint64_t v27 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v27++) = 0;
            while (*(void *)&prime != v27);
            unint64_t v28 = (void **)v82;
            if ((void)v82)
            {
              unint64_t v29 = *(void *)(v82 + 8);
              uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
              v30.i16[0] = vaddlv_u8(v30);
              if (v30.u32[0] > 1uLL)
              {
                if (v29 >= *(void *)&prime) {
                  v29 %= *(void *)&prime;
                }
              }
              else
              {
                v29 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v29) = &v82;
              for (j = *v28; j; unint64_t v29 = v35)
              {
                unint64_t v35 = j[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*((void *)__p[0] + v35))
                  {
                    *((void *)__p[0] + v35) = v28;
                    goto LABEL_64;
                  }
                  *unint64_t v28 = (void *)*j;
                  *uint64_t j = **((void **)__p[0] + v35);
                  **((void **)__p[0] + v35) = j;
                  uint64_t j = v28;
                }
                unint64_t v35 = v29;
LABEL_64:
                unint64_t v28 = (void **)j;
                uint64_t j = (void *)*j;
              }
            }
            unint64_t v12 = (unint64_t)prime;
            goto LABEL_68;
          }
          uint64_t v39 = __p[0];
          __p[0] = 0;
          if (v39) {
            operator delete(v39);
          }
          unint64_t v12 = 0;
          __p[1] = 0;
        }
      }
LABEL_68:
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v11 >= v12) {
          unint64_t v2 = v11 % v12;
        }
        else {
          unint64_t v2 = v11;
        }
      }
      else
      {
        unint64_t v2 = (v12 - 1) & v11;
      }
    }
    long long v36 = __p[0];
    int64x2_t v37 = (void *)*((void *)__p[0] + v2);
    if (v37)
    {
      *(void *)char v18 = *v37;
LABEL_81:
      *int64x2_t v37 = v18;
      goto LABEL_82;
    }
    *(void *)char v18 = v82;
    *(void *)&long long v82 = v18;
    v36[v2] = &v82;
    if (*(void *)v18)
    {
      unint64_t v38 = *(void *)(*(void *)v18 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12) {
          v38 %= v12;
        }
      }
      else
      {
        v38 &= v12 - 1;
      }
      int64x2_t v37 = (char *)__p[0] + 8 * v38;
      goto LABEL_81;
    }
LABEL_82:
    ++*((void *)&v82 + 1);
LABEL_83:
    ++v3;
  }
  while (v3 != 3);
  for (unint64_t k = 0; k != 0x1FFFFFFFFFFFFFEELL; k -= 6)
  {
    uint64_t v84 = &v112[k / 3 + 1];
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v84);
    if (SHIBYTE(v112[0].__r_.__value_.__r.__words[k + 2]) < 0) {
      operator delete(v112[k / 3].__r_.__value_.__l.__data_);
    }
  }
  uint64_t v84 = (std::string *)v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v84);
  for (uint64_t m = 0; m != -30; m -= 3)
  {
    if (SHIBYTE(v95[m + 2]) < 0) {
      operator delete((void *)v95[m]);
    }
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  *(void *)&long long v85 = v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v85);
  for (uint64_t n = 0; n != -18; n -= 3)
  {
    if (SHIBYTE(v101[n + 2]) < 0) {
      operator delete((void *)v101[n]);
    }
  }
  if (v77 < 0) {
    operator delete(v76[0]);
  }
  *(void *)&long long v85 = v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v85);
  for (iuint64_t i = 0; ii != -24; ii -= 3)
  {
    if (SHIBYTE(v109[ii + 2]) < 0) {
      operator delete((void *)v109[ii]);
    }
  }
  if (v80 < 0) {
    operator delete(v79[0]);
  }
  long long v85 = 0uLL;
  uint64_t v86 = 0;
  int v44 = *(char *)(a1 + 23);
  if (v44 >= 0) {
    unint64_t v45 = (uint64_t *)a1;
  }
  else {
    unint64_t v45 = *(uint64_t **)a1;
  }
  if (v44 >= 0) {
    unint64_t v46 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v46 = *(void *)(a1 + 8);
  }
  unint64_t v47 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v45, v46);
  unint64_t v48 = (unint64_t)__p[1];
  if (!__p[1]) {
    goto LABEL_138;
  }
  unint64_t v49 = v47;
  uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
  v50.i16[0] = vaddlv_u8(v50);
  unint64_t v51 = v50.u32[0];
  if (v50.u32[0] > 1uLL)
  {
    unint64_t v52 = v47;
    if ((void *)v47 >= __p[1]) {
      unint64_t v52 = v47 % (unint64_t)__p[1];
    }
  }
  else
  {
    unint64_t v52 = ((unint64_t)__p[1] - 1) & v47;
  }
  uint64_t v53 = __p[0];
  uint64_t v54 = (unsigned __int8 **)*((void *)__p[0] + v52);
  if (!v54 || (float v55 = *v54) == 0)
  {
LABEL_138:
    uint64_t v58 = 0;
    uint64_t v59 = &v85;
    goto LABEL_139;
  }
  unint64_t v56 = (unint64_t)__p[1] - 1;
  while (2)
  {
    unint64_t v57 = *((void *)v55 + 1);
    if (v49 != v57)
    {
      if (v51 > 1)
      {
        if (v57 >= v48) {
          v57 %= v48;
        }
      }
      else
      {
        v57 &= v56;
      }
      if (v57 != v52) {
        goto LABEL_138;
      }
      goto LABEL_137;
    }
    if (!std::equal_to<std::string>::operator()[abi:nn180100](v55 + 16, (unsigned __int8 *)a1))
    {
LABEL_137:
      float v55 = *(unsigned __int8 **)v55;
      if (!v55) {
        goto LABEL_138;
      }
      continue;
    }
    break;
  }
  unint64_t v63 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v45, v46);
  unint64_t v64 = v63;
  if (v51 > 1)
  {
    unint64_t v65 = v63;
    if (v63 >= v48) {
      unint64_t v65 = v63 % v48;
    }
  }
  else
  {
    unint64_t v65 = v56 & v63;
  }
  char v66 = (uint64_t **)v53[v65];
  if (!v66 || (uint64_t v67 = *v66) == 0) {
LABEL_159:
  }
    abort();
  while (2)
  {
    unint64_t v68 = v67[1];
    if (v68 != v64)
    {
      if (v51 > 1)
      {
        if (v68 >= v48) {
          v68 %= v48;
        }
      }
      else
      {
        v68 &= v56;
      }
      if (v68 != v65) {
        goto LABEL_159;
      }
      goto LABEL_158;
    }
    if (!std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v67 + 16, (unsigned __int8 *)a1))
    {
LABEL_158:
      uint64_t v67 = (uint64_t *)*v67;
      if (!v67) {
        goto LABEL_159;
      }
      continue;
    }
    break;
  }
  uint64_t v69 = (long long *)v67[5];
  uint64_t v59 = (long long *)(v67 + 5);
  uint64_t v58 = v69;
LABEL_139:
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(a2, v58, *((long long **)v59 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v59 + 1) - (void)v58) >> 3));
  *(void *)&long long v102 = &v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v102);
  uint64_t v60 = (void *)v82;
  if ((void)v82)
  {
    do
    {
      float v61 = (void *)*v60;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v60 + 2));
      operator delete(v60);
      uint64_t v60 = v61;
    }
    while (v61);
  }
  float v62 = __p[0];
  __p[0] = 0;
  if (v62) {
    operator delete(v62);
  }
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:nn180100]<true,0>(std::string *this, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[1].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

BOOL isGreeting(unsigned char *a1, CFLocaleRef locale)
{
  CFStringRef Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  if (!Value) {
    return 0;
  }
  KB::std_string(Value, __p);
  supportedGreetingForLanguage((uint64_t)__p, &v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type size = v15.__r_.__value_.__l.__size_;
  std::string::size_type v4 = v15.__r_.__value_.__r.__words[0];
  if (v15.__r_.__value_.__r.__words[0] != v15.__r_.__value_.__l.__size_)
  {
    char v6 = a1[23];
    if (v6 >= 0) {
      uint64_t v7 = a1[23];
    }
    else {
      uint64_t v7 = *((void *)a1 + 1);
    }
    if (v6 < 0) {
      a1 = *(unsigned char **)a1;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v4 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *(unsigned __int8 *)(v4 + 23);
      }
      else {
        uint64_t v9 = *(void *)(v4 + 8);
      }
      if (v9 == v7)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v4, a1, *(void *)(v4 + 8))) {
            goto LABEL_23;
          }
        }
        else
        {
          if (!*(unsigned char *)(v4 + 23)) {
            goto LABEL_23;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v4 + v10) == a1[v10])
          {
            if (v8 == ++v10) {
              goto LABEL_23;
            }
          }
        }
      }
      v4 += 24;
    }
    while (v4 != size);
    std::string::size_type v4 = size;
  }
LABEL_23:
  BOOL v11 = v4 != size;
  uint64_t v16 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v16);
  return v11;
}

void prefixMatchesCaseInsensitive(uint64_t a1@<X0>, const KB::String **a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::string::size_type v4 = *a2;
  long long v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      KB::String::String((KB::String *)v36, v4);
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v7 = (const char *)a1;
      }
      else {
        uint64_t v7 = *(const char **)a1;
      }
      KB::String::String((KB::String *)&v40, v7);
      std::__split_buffer<std::string>::pointer begin = v40.__begin_;
      if (LOWORD(v40.__first_) <= v36[0])
      {
        if (v38) {
          uint64_t v10 = (const char *)v38;
        }
        else {
          uint64_t v10 = v39;
        }
        if (v40.__begin_) {
          p_end = (const char *)v40.__begin_;
        }
        else {
          p_end = (const char *)&v40.__end_;
        }
        BOOL v9 = strncasecmp(v10, p_end, LOWORD(v40.__first_)) == 0;
      }
      else
      {
        BOOL v9 = 0;
      }
      if (begin) {
        BOOL v12 = BYTE6(v40.__first_) == 1;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12) {
        free(begin);
      }
      uint8x8_t v13 = v38;
      if (v9)
      {
        if (v38) {
          char v14 = (char *)v38;
        }
        else {
          char v14 = v39;
        }
        if (v36[0]) {
          std::string v15 = v14;
        }
        else {
          std::string v15 = "";
        }
        std::string::basic_string[abi:nn180100]<0>(__p, v15);
        unint64_t v17 = a3[1];
        unint64_t v16 = a3[2];
        if (v17 >= v16)
        {
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a3) >> 3);
          unint64_t v20 = v19 + 1;
          if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a3) >> 3);
          if (2 * v21 > v20) {
            unint64_t v20 = 2 * v21;
          }
          if (v21 >= 0x555555555555555) {
            unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v22 = v20;
          }
          v40.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 2);
          if (v22) {
            unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          unint64_t v24 = v22 + 24 * v19;
          long long v25 = *(_OWORD *)__p;
          *(void *)(v24 + 16) = v35;
          *(_OWORD *)unint64_t v24 = v25;
          __p[1] = 0;
          uint64_t v35 = 0;
          __p[0] = 0;
          unint64_t v27 = *a3;
          unint64_t v26 = a3[1];
          if (v26 == *a3)
          {
            int64x2_t v30 = vdupq_n_s64(v26);
            unint64_t v28 = v22 + 24 * v19;
          }
          else
          {
            unint64_t v28 = v22 + 24 * v19;
            do
            {
              long long v29 = *(_OWORD *)(v26 - 24);
              *(void *)(v28 - 8) = *(void *)(v26 - 8);
              *(_OWORD *)(v28 - 24) = v29;
              v28 -= 24;
              *(void *)(v26 - 16) = 0;
              *(void *)(v26 - 8) = 0;
              *(void *)(v26 - 24) = 0;
              v26 -= 24;
            }
            while (v26 != v27);
            int64x2_t v30 = *(int64x2_t *)a3;
          }
          unint64_t v31 = v24 + 24;
          *a3 = v28;
          a3[1] = v24 + 24;
          *(int64x2_t *)&v40.__begin_ = v30;
          uint8x8_t v32 = (std::string *)a3[2];
          a3[2] = v22 + 24 * v23;
          v40.__end_cap_.__value_ = v32;
          v40.__first_ = (std::__split_buffer<std::string>::pointer)v30.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v40);
          int v33 = SHIBYTE(v35);
          a3[1] = v31;
          if (v33 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v18 = *(_OWORD *)__p;
          *(void *)(v17 + 16) = v35;
          *(_OWORD *)unint64_t v17 = v18;
          a3[1] = v17 + 24;
        }
        uint8x8_t v13 = v38;
      }
      if (v13)
      {
        if (v37 == 1) {
          free(v13);
        }
      }
      std::string::size_type v4 = (const KB::String *)((char *)v4 + 32);
    }
    while (v4 != v5);
  }
}

void greetingCompletion(language_modeling::v1::CompletionStem *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, KB::DictionaryContainer **a4@<X3>, const __CFLocale *a5@<X4>, std::string *a6@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 88) - v7;
  if (!v8 || !*(unsigned char *)(a3 + 24))
  {
    a6->__r_.__value_.__s.__data_[0] = 0;
    a6[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  uint64_t v14 = v7 + 8 * (v8 >> 3);
  if (*(char *)(v14 - 1) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(v14 - 24), *(void *)(v14 - 16));
  }
  else {
    std::string v29 = *(std::string *)(v14 - 24);
  }
  language_modeling::v1::CompletionStem::prefix((uint64_t *)&__p, this);
  if (*(void *)(a2 + 88) - *(void *)(a2 + 80) == 48)
  {
    unint64_t v15 = v28;
    if ((v28 & 0x80u) != 0) {
      unint64_t v15 = v27;
    }
    if (v15 && isGreeting(&v29, a5))
    {
      unint64_t v16 = *a4;
      if ((v28 & 0x80u) == 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      KB::String::String((KB::String *)buf, p_p);
      KB::DictionaryContainer::word_with_string(v16, (const KB::String *)buf, 0, (KB::Word *)v31);
      unsigned int v18 = v32;
      KB::Word::~Word((KB::Word *)v31);
      if (*((void *)&buf[0] + 1) && BYTE6(buf[0]) == 1) {
        free(*((void **)&buf[0] + 1));
      }
      if (v18 < 3)
      {
        if (!*(unsigned char *)(a3 + 24))
        {
          uint64_t v23 = (TIInlineCompletionGeneratorImpl *)std::__throw_bad_optional_access[abi:nn180100]();
          TIInlineCompletionGeneratorImpl::cachedCompletionsForContextAndStem(v23, v24, v25);
          return;
        }
        prefixMatchesCaseInsensitive((uint64_t)&__p, (const KB::String **)a3, v31);
        unint64_t v19 = v31[0];
        if (v31[1] - v31[0] == 24)
        {
          int v20 = *(char *)(v31[0] + 23);
          if (v20 < 0) {
            unint64_t v21 = *(void *)(v31[0] + 8);
          }
          else {
            unint64_t v21 = *(unsigned __int8 *)(v31[0] + 23);
          }
          unint64_t v22 = v28;
          if ((v28 & 0x80u) != 0) {
            unint64_t v22 = v27;
          }
          if (v21 > v22)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0]) = 136315138;
              *(void *)((char *)buf + 4) = "greetingCompletion";
              _os_log_debug_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: Constructing a greeting completion", (uint8_t *)buf, 0xCu);
              unint64_t v19 = v31[0];
              if ((*(unsigned char *)(v31[0] + 23) & 0x80) == 0) {
                goto LABEL_29;
              }
            }
            else if ((v20 & 0x80) == 0)
            {
LABEL_29:
              *(_OWORD *)&a6->__r_.__value_.__l.__data_ = *(_OWORD *)v19;
              a6->__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
LABEL_39:
              a6[1].__r_.__value_.__s.__data_[0] = 1;
              *(void *)&buf[0] = v31;
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
              goto LABEL_32;
            }
            std::string::__init_copy_ctor_external(a6, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
            goto LABEL_39;
          }
        }
        *(void *)&buf[0] = v31;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
      }
    }
  }
  a6->__r_.__value_.__s.__data_[0] = 0;
  a6[1].__r_.__value_.__s.__data_[0] = 0;
LABEL_32:
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void TIInlineCompletionGeneratorImpl::cachedCompletionsForContextAndStem(TIInlineCompletionGeneratorImpl *this@<X0>, const KB::LanguageModelContext *a2@<X1>, const language_modeling::v1::CompletionStem *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (char *)this + 96;
  language_modeling::v1::CompletionStem::prefix((uint64_t *)&v91, a3);
  TIInlineCompletionsCache::cached_candidate(a2, (uint64_t)v8, (const void **)&v91.__r_.__value_.__l.__data_, *((void *)this + 11), &v68);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (!v75)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v91.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 4) = (std::string::size_type)"cachedCompletionsForContextAndStem";
      _os_log_debug_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: No cached completion was found, cache emptied", (uint8_t *)&v91, 0xCu);
    }
    if (*((unsigned char *)this + 288))
    {
      std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair((uint64_t)this + 104);
      *((unsigned char *)this + 288) = 0;
    }
    BOOL v9 = (char *)this + 368;
    uint64_t v10 = (KB::DictionaryContainer *)*((void *)this + 50);
    uint64_t v54 = v10;
    if (v10)
    {
      atomic_fetch_add((atomic_uint *volatile)v10, 1u);
      BOOL v11 = (unsigned int *)v54;
      greetingCompletion(a3, (uint64_t)a2, (uint64_t)v9, &v54, *((const __CFLocale **)this + 7), &__s1);
      if (v11) {
        WTF::RefCounted<KB::DictionaryContainer>::deref(v11);
      }
    }
    else
    {
      greetingCompletion(a3, (uint64_t)a2, (uint64_t)v9, &v54, *((const __CFLocale **)this + 7), &__s1);
    }
    if (!v77.__r_.__value_.__s.__data_[0])
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 24) = 0;
      goto LABEL_173;
    }
    int v12 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v53, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    }
    else {
      std::string v53 = __s1;
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v91, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
      long long v93 = 0u;
      long long v92 = 0u;
      int v94 = 3;
      v95[0] = 0;
      char v96 = 0;
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string v91 = v53;
      long long v92 = 0u;
      long long v93 = 0u;
      int v94 = 3;
      v95[0] = 0;
      char v96 = 0;
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v46, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    }
    else {
      std::string v46 = v91;
    }
    if (SBYTE7(v93) < 0)
    {
      std::string::__init_copy_ctor_external(&v47, (const std::string::value_type *)v92, *((std::string::size_type *)&v92 + 1));
    }
    else
    {
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v92;
      v47.__r_.__value_.__r.__words[2] = v93;
    }
    uint64_t v48 = *((void *)&v93 + 1);
    int v49 = v94;
    v50[0] = 0;
    char v51 = 0;
    if (v96)
    {
      MEMORY[0x1E4E7B4C0](v50, v95);
      char v51 = 1;
    }
    uint64_t v52 = 0;
    language_modeling::v1::CompletionStem::prefix((uint64_t *)v44, a3);
    int shouldSuppress = TIInlineCompletionGeneratorImpl::_shouldSuppress(this, (uint64_t)&v46, (uint64_t **)v44);
    if (v45 < 0) {
      operator delete(v44[0]);
    }
    if (v51) {
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v50);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    TIInlineCompletionEventDispatcher::did_generate_cached_completion(*((void *)this + 93), (uint64_t)&v91, (uint64_t)&v91, a3, shouldSuppress);
    if (shouldSuppress)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
      {
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__s, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
        }
        else {
          std::string __s = v91;
        }
        p_s = &__s;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        LODWORD(v84.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 4) = (std::string::size_type)"cachedCompletionsForContextAndStem";
        WORD2(v84.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v84.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_s;
        _os_log_debug_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: Greeting completion --> %s was found but was suppressed", (uint8_t *)&v84, 0x16u);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
      }
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      memset(&__s, 0, sizeof(__s));
      *(unsigned char *)(a4 + 24) = 1;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
      std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v84);
    }
    else
    {
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__s, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
      }
      else {
        std::string __s = v91;
      }
      if (SBYTE7(v93) < 0)
      {
        std::string::__init_copy_ctor_external(&v86, (const std::string::value_type *)v92, *((std::string::size_type *)&v92 + 1));
      }
      else
      {
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v92;
        v86.__r_.__value_.__r.__words[2] = v93;
      }
      uint64_t v87 = *((void *)&v93 + 1);
      int v88 = v94;
      v89[0] = 0;
      char v90 = 0;
      if (v96)
      {
        MEMORY[0x1E4E7B4C0](v89, v95);
        char v90 = 1;
      }
      std::__split_buffer<std::string> v40 = (std::string *)operator new(0x50uLL);
      uint64_t v41 = &v40[3].__r_.__value_.__s.__data_[8];
      *(void *)a4 = std::construct_at[abi:nn180100]<TIInlineCompletion,TIInlineCompletion const&,TIInlineCompletion*>(v40, (long long *)&__s);
      *(void *)(a4 + 8) = v41;
      *(void *)(a4 + 16) = v41;
      memset(&v84, 0, sizeof(v84));
      *(unsigned char *)(a4 + 24) = 1;
      long long v82 = &v84;
      std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v82);
      if (v90) {
        language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v89);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
    }
    if (v96) {
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v95);
    }
    if (SBYTE7(v93) < 0) {
      operator delete((void *)v92);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v91.__r_.__value_.__l.__data_);
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_173;
      }
    }
    else if ((v12 & 0x80000000) == 0)
    {
      goto LABEL_173;
    }
    uint64_t v39 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_172;
  }
  fullCompletionFromCacheElement((uint64_t)&v68, (uint64_t)&v91);
  if (!v75) {
    goto LABEL_197;
  }
  completionFromCacheElement((uint64_t)&v68, (uint64_t)&__s);
  if (!v75) {
    goto LABEL_197;
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v61, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  }
  else {
    std::string v61 = v68;
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v62, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  }
  else {
    std::string v62 = v69;
  }
  uint64_t v63 = v70;
  int v64 = v71;
  v65[0] = 0;
  char v66 = 0;
  if (v73)
  {
    MEMORY[0x1E4E7B4C0](v65, &v72);
    char v66 = 1;
  }
  uint64_t v67 = v74;
  language_modeling::v1::CompletionStem::prefix((uint64_t *)__p, a3);
  int v13 = TIInlineCompletionGeneratorImpl::_shouldSuppress(this, (uint64_t)&v61, (uint64_t **)__p);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  if (v66) {
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v65);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  TIInlineCompletionEventDispatcher::did_generate_cached_completion(*((void *)this + 93), (uint64_t)&__s, (uint64_t)&v91, a3, v13);
  language_modeling::v1::CompletionStem::prefix((uint64_t *)&__s1, a3);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v84, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v84 = __s;
  }
  char v14 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  std::string::size_type v16 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
  int v17 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v16 = v84.__r_.__value_.__l.__size_;
  }
  if (size == v16)
  {
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v18 = &v84;
    }
    else {
      unsigned int v18 = (std::string *)v84.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v28 = memcmp(__s1.__r_.__value_.__l.__data_, v18, __s1.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      uint64_t v19 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        int v22 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        int v21 = v22;
        int v24 = v18->__r_.__value_.__s.__data_[0];
        unsigned int v18 = (std::string *)((char *)v18 + 1);
        int v23 = v24;
        BOOL v26 = v19-- != 0;
        BOOL v27 = v21 == v23;
        BOOL v28 = v21 == v23;
      }
      while (v27 && v26);
    }
    else
    {
      BOOL v28 = 1;
    }
  }
  else
  {
    BOOL v28 = 0;
  }
  BOOL v30 = v13 != 2 && v28;
  if (v17 < 0)
  {
    operator delete(v84.__r_.__value_.__l.__data_);
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_88:
      if (!v30) {
        goto LABEL_121;
      }
      goto LABEL_92;
    }
  }
  else if ((v14 & 0x80) == 0)
  {
    goto LABEL_88;
  }
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (!v30) {
    goto LABEL_121;
  }
LABEL_92:
  uint64_t v31 = *((void *)this + 93);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v58, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v58 = __s;
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v32 = &v58;
  }
  else {
    unsigned int v32 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  KB::String::String((KB::String *)&__s1, (const char *)v32);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v57, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  }
  else {
    std::string v57 = v91;
  }
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v33 = &v57;
  }
  else {
    uint64_t v33 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  KB::String::String((KB::String *)&v84, (const char *)v33);
  language_modeling::v1::CompletionStem::prefix((uint64_t *)v55, a3);
  if (v56 >= 0) {
    uint64_t v34 = v55;
  }
  else {
    uint64_t v34 = (void **)v55[0];
  }
  KB::String::String((KB::String *)&v82, (const char *)v34);
  TIInlineCompletionEventDispatcher::did_register_completion_acceptance(v31, (const KB::String *)&__s1, (const KB::String *)&v84, (const KB::String *)&v82, 2);
  if (v83 && BYTE6(v82) == 1) {
    free(v83);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v84.__r_.__value_.__l.__size_ && v84.__r_.__value_.__s.__data_[6] == 1) {
    free((void *)v84.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (__s1.__r_.__value_.__l.__size_ && __s1.__r_.__value_.__s.__data_[6] == 1) {
    free((void *)__s1.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v58.__r_.__value_.__l.__data_);
    if (v13) {
      goto LABEL_122;
    }
    goto LABEL_125;
  }
LABEL_121:
  if (v13)
  {
LABEL_122:
    uint64_t v35 = MEMORY[0x1E4F14500];
    id v36 = MEMORY[0x1E4F14500];
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
LABEL_123:

      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      memset(&__s1, 0, sizeof(__s1));
      *(unsigned char *)(a4 + 24) = 1;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
      std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v84);
      goto LABEL_139;
    }
    if (v75)
    {
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__s1, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
      }
      else {
        std::string __s1 = v68;
      }
      size_t v42 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        size_t v42 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      LODWORD(v84.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 4) = (std::string::size_type)"cachedCompletionsForContextAndStem";
      WORD2(v84.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v84.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v42;
      _os_log_debug_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: Cached completion --> %s was found but was suppressed or blocked by negative learning", (uint8_t *)&v84, 0x16u);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      goto LABEL_123;
    }
LABEL_197:
    std::__throw_bad_optional_access[abi:nn180100]();
  }
LABEL_125:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__s1, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string __s1 = __s;
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v77, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  }
  else {
    std::string v77 = v86;
  }
  uint64_t v78 = v87;
  int v79 = v88;
  v80[0] = 0;
  char v81 = 0;
  if (v90)
  {
    MEMORY[0x1E4E7B4C0](v80, v89);
    char v81 = 1;
  }
  char v37 = (std::string *)operator new(0x50uLL);
  unint64_t v38 = &v37[3].__r_.__value_.__s.__data_[8];
  *(void *)a4 = std::construct_at[abi:nn180100]<TIInlineCompletion,TIInlineCompletion const&,TIInlineCompletion*>(v37, (long long *)&__s1);
  *(void *)(a4 + 8) = v38;
  *(void *)(a4 + 16) = v38;
  memset(&v84, 0, sizeof(v84));
  *(unsigned char *)(a4 + 24) = 1;
  long long v82 = &v84;
  std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v82);
  if (v81) {
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v80);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
LABEL_139:
  if (v90) {
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v89);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (v96) {
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v95);
  }
  if (SBYTE7(v93) < 0) {
    operator delete((void *)v92);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v39 = (void *)v91.__r_.__value_.__r.__words[0];
LABEL_172:
    operator delete(v39);
  }
LABEL_173:
  if (v75)
  {
    if (v73) {
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)&v72);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
  }
}

std::string *std::construct_at[abi:nn180100]<TIInlineCompletion,TIInlineCompletion const&,TIInlineCompletion*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  std::string::size_type v7 = *((void *)a2 + 6);
  int v8 = *((_DWORD *)a2 + 14);
  this[2].__r_.__value_.__s.__data_[16] = 0;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = v8;
  this[2].__r_.__value_.__r.__words[0] = v7;
  this[3].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 72))
  {
    MEMORY[0x1E4E7B4C0]();
    this[3].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

uint64_t TIInlineCompletionGeneratorImpl::_updateCache(uint64_t a1, const KB::LanguageModelContext *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v9, a2);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v10 = *(std::string *)a3;
  }
  if (*(char *)(a3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else {
    std::string v11 = *(std::string *)(a3 + 24);
  }
  uint64_t v12 = *(void *)(a3 + 48);
  int v13 = *(_DWORD *)(a3 + 56);
  v14[0] = 0;
  char v15 = 0;
  if (*(unsigned char *)(a3 + 72))
  {
    MEMORY[0x1E4E7B4C0](v14, a3 + 64);
    char v15 = 1;
  }
  if (*(unsigned char *)(a1 + 288))
  {
    std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair(a1 + 104);
    *(unsigned char *)(a1 + 288) = 0;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v8 = *(std::string *)a3;
    }
    long long v6 = &v8;
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v6 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    int v17 = "_updateCache";
    __int16 v18 = 2080;
    uint64_t v19 = v6;
    _os_log_debug_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: Updating cache with new completion: %s", buf, 0x16u);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
  std::pair<KB::LanguageModelContext,TIInlineCompletion>::pair[abi:nn180100]((uint64_t)v7, (uint64_t)v9);
  TIInlineCompletionsCache::update(a1 + 96, (uint64_t)v7);
  std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair((uint64_t)v7);
  return std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair((uint64_t)v9);
}

uint64_t std::pair<KB::LanguageModelContext,TIInlineCompletion>::pair[abi:nn180100](uint64_t a1, uint64_t a2)
{
  long long v4 = (std::string *)((char *)KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)a1, (const KB::LanguageModelContext *)a2)+ 104);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 104);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 120);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = *(void *)(a2 + 152);
  int v9 = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  *(void *)(a1 + 152) = v8;
  *(unsigned char *)(a1 + 176) = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    MEMORY[0x1E4E7B4C0]();
    *(unsigned char *)(a1 + 176) = 1;
  }
  return a1;
}

void TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(uint64_t a1@<X0>, language_modeling::v1::CompletionStem **a2@<X2>, void *a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 16));
  if (v4)
  {
    language_modeling::v1::CompletionStem::prefix((uint64_t *)&buf, *a2);
    if ((char)v20 < 0)
    {
      unint64_t v6 = *(void *)(a1 + 88);
      unint64_t v7 = *((void *)&buf + 1);
      operator delete((void *)buf);
      if (v7 < v6) {
        return;
      }
    }
    else if (*(void *)(a1 + 88) > (unint64_t)v20)
    {
      return;
    }
    kdebug_trace();
    kac_get_log();
    uint64_t v8 = (id)objc_claimAutoreleasedReturnValue();
    int v9 = (const void *)(a1 ^ 0xC8);
    os_signpost_id_t v10 = os_signpost_id_make_with_pointer(v8, (const void *)(a1 ^ 0xC8));
    if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v11 = v10;
      if (os_signpost_enabled(v8))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_1E3F0E000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v11, "kbdManager.languageModel.generateInlineCompletions", (const char *)&unk_1E41704BE, (uint8_t *)&buf, 2u);
      }
    }

    uint64_t v12 = *(std::mutex **)(a1 + 296);
    std::mutex::lock(v12);
    *(void *)&long long buf = &unk_1F3F75EF8;
    *((void *)&buf + 1) = a3;
    p_long long buf = &buf;
    v17[0] = &unk_1F3F75F40;
    v17[1] = a1;
    __int16 v18 = v17;
    language_modeling::v1::LanguageModelSession::enumerateInlineCompletions();
    kdebug_trace();
    kac_get_log();
    int v13 = (id)objc_claimAutoreleasedReturnValue();
    os_signpost_id_t v14 = os_signpost_id_make_with_pointer(v13, v9);
    if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v15 = v14;
      if (os_signpost_enabled(v13))
      {
        *(_WORD *)std::string::size_type v16 = 0;
        _os_signpost_emit_with_name_impl(&dword_1E3F0E000, v13, OS_SIGNPOST_INTERVAL_END, v15, "kbdManager.languageModel.generateInlineCompletions", (const char *)&unk_1E41704BE, v16, 2u);
      }
    }

    if (v18 == v17)
    {
      (*(void (**)(void *))(v17[0] + 32))(v17);
    }
    else if (v18)
    {
      (*(void (**)(void))(*v18 + 40))();
    }
    if (p_buf == &buf)
    {
      (*(void (**)(long long *))(buf + 32))(&buf);
    }
    else if (p_buf)
    {
      (*(void (**)(void))(*(void *)p_buf + 40))();
    }
    std::mutex::unlock(v12);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "_inlineCompletionsWithLM";
    _os_log_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s  TIInlineCompletionGeneratorImpl: langugage model is not loaded, cannot compute inline completions", (uint8_t *)&buf, 0xCu);
  }
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1>,BOOL ()(void)>::operator()(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 8) + 760));
  return v1 & 1;
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F3F75F40;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F3F75F40;
  result[1] = v3;
  return result;
}

void std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1>,BOOL ()(void)>::~__func()
{
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0>,BOOL ()(language_modeling::v1::InlineCompletion const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = v3[1];
  unint64_t v5 = v3[2];
  if (v4 < v5)
  {
    uint64_t v6 = MEMORY[0x1E4E7B4C0]() + 8;
    goto LABEL_20;
  }
  uint64_t v7 = (uint64_t)(v4 - *v3) >> 3;
  if ((unint64_t)(v7 + 1) >> 61) {
    abort();
  }
  uint64_t v8 = v5 - *v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
    uint64_t v9 = v7 + 1;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10)
  {
    if (v10 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    os_signpost_id_t v11 = (char *)operator new(8 * v10);
  }
  else
  {
    os_signpost_id_t v11 = 0;
  }
  uint64_t v12 = &v11[8 * v10];
  uint64_t v13 = MEMORY[0x1E4E7B4C0](&v11[8 * v7], a2);
  uint64_t v6 = v13 + 8;
  os_signpost_id_t v15 = (language_modeling::v1::InlineCompletion *)*v3;
  os_signpost_id_t v14 = (language_modeling::v1::InlineCompletion *)v3[1];
  if (v14 == (language_modeling::v1::InlineCompletion *)*v3)
  {
    uint64_t *v3 = v13;
    v3[1] = v6;
    v3[2] = (uint64_t)v12;
    if (!v14) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  do
  {
    os_signpost_id_t v14 = (language_modeling::v1::InlineCompletion *)((char *)v14 - 8);
    uint64_t v16 = language_modeling::v1::InlineCompletion::InlineCompletion();
  }
  while (v14 != v15);
  int v17 = (language_modeling::v1::InlineCompletion *)*v3;
  os_signpost_id_t v14 = (language_modeling::v1::InlineCompletion *)v3[1];
  uint64_t *v3 = v16;
  v3[1] = v6;
  v3[2] = (uint64_t)v12;
  if (v14 != v17)
  {
    do
    {
      os_signpost_id_t v14 = (language_modeling::v1::InlineCompletion *)((char *)v14 - 8);
      language_modeling::v1::InlineCompletion::~InlineCompletion(v14);
    }
    while (v14 != v17);
    os_signpost_id_t v14 = v17;
  }
  if (v14) {
LABEL_19:
  }
    operator delete(v14);
LABEL_20:
  v3[1] = v6;
  return 1;
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0>,BOOL ()(language_modeling::v1::InlineCompletion const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F3F75EF8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0>,BOOL ()(language_modeling::v1::InlineCompletion const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F3F75EF8;
  result[1] = v3;
  return result;
}

void std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0>,BOOL ()(language_modeling::v1::InlineCompletion const&)>::~__func()
{
}

void TIInlineCompletionGeneratorImpl::_computeInlineCompletions(void ***a1, const KB::LanguageModelContext *a2, language_modeling::v1::CompletionStem **a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v19 = *a1;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v20 = v6;
  TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM((uint64_t)a1, a3, &v26);
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  unint64_t v25 = 0;
  uint64_t v7 = (char *)v26;
  uint64_t v8 = v27;
  if (v26 != v27)
  {
    unint64_t v9 = 0;
    do
    {
      if (v9 >= v25)
      {
        unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v23) >> 4);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0x333333333333333) {
          abort();
        }
        if (0x999999999999999ALL * ((uint64_t)(v25 - v23) >> 4) > v11) {
          unint64_t v11 = 0x999999999999999ALL * ((uint64_t)(v25 - v23) >> 4);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - v23) >> 4) >= 0x199999999999999) {
          unint64_t v12 = 0x333333333333333;
        }
        else {
          unint64_t v12 = v11;
        }
        uint64_t v41 = &v25;
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::DictionaryCursors>>(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        os_signpost_id_t v14 = (void **)(v12 + 80 * v10);
        v40[0] = (void **)v12;
        v40[1] = v14;
        v40[3] = (void **)(v12 + 80 * v13);
        std::construct_at[abi:nn180100]<TIInlineCompletion,language_modeling::v1::InlineCompletion const&,TIInlineCompletion*>((uint64_t)v14);
        v40[2] = v14 + 10;
        std::vector<TIInlineCompletion>::__swap_out_circular_buffer(&v23, v40);
        unint64_t v9 = v24;
        std::__split_buffer<TIInlineCompletion>::~__split_buffer((uint64_t)v40);
      }
      else
      {
        std::construct_at[abi:nn180100]<TIInlineCompletion,language_modeling::v1::InlineCompletion const&,TIInlineCompletion*>(v9);
        v9 += 80;
      }
      unint64_t v24 = v9;
      v7 += 8;
    }
    while (v7 != v8);
  }
  std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v40, a4);
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v41, a2);
  uint64_t v48 = 0;
  int v49 = 0;
  uint64_t v50 = 0;
  std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>((language_modeling::v1::CompletionStem *)&v48, *a3, a3[1], (a3[1] - *a3) >> 3);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  std::vector<TIInlineCompletion>::__init_with_size[abi:nn180100]<TIInlineCompletion*,TIInlineCompletion*>(&v51, v23, v24, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - v23) >> 4));
  uint64_t v54 = a1;
  if ([MEMORY[0x1E4F29060] isMainThread])
  {
    TIInlineCompletionGeneratorImpl::_computeInlineCompletions(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&,std::function<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>)::$_0::operator()((uint64_t)v40);
    os_signpost_id_t v15 = v20;
  }
  else
  {
    v28[1] = (void **)MEMORY[0x1E4F143A8];
    v28[2] = (void **)3321888768;
    void v28[3] = (void **)___ZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEE_block_invoke;
    v28[4] = (void **)&__block_descriptor_240_a8_32c56_ZTSNSt3__18weak_ptrI31TIInlineCompletionGeneratorImplEE48c241_ZTSZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0_e5_v8__0l;
    os_signpost_id_t v15 = v20;
    v28[5] = v19;
    std::string v29 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v30, (uint64_t)v40);
    KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v31, (const KB::LanguageModelContext *)&v41);
    memset(v38, 0, sizeof(v38));
    std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>((language_modeling::v1::CompletionStem *)v38, v48, v49, (v49 - v48) >> 3);
    memset(v39, 0, 24);
    std::vector<TIInlineCompletion>::__init_with_size[abi:nn180100]<TIInlineCompletion*,TIInlineCompletion*>(v39, v51, v52, 0xCCCCCCCCCCCCCCCDLL * ((v52 - v51) >> 4));
    v39[3] = v54;
    TIDispatchAsync();
    v28[0] = (void **)v39;
    std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100](v28);
    v28[0] = (void **)v38;
    std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100](v28);
    v28[0] = (void **)&v37;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v28);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v36);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v35);
    if (__p)
    {
      uint64_t v34 = __p;
      operator delete(__p);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v32);
    }
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v30);
    if (v29) {
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v28[0] = (void **)&v51;
  std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100](v28);
  v28[0] = (void **)&v48;
  std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100](v28);
  v28[0] = (void **)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v28);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v46);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v45);
  if (v43)
  {
    int v44 = v43;
    operator delete(v43);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v42);
  }
  std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v40);
  v40[0] = (void **)&v23;
  std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100](v40);
  uint64_t v16 = (char *)v26;
  if (v26)
  {
    int v17 = v27;
    __int16 v18 = v26;
    if (v27 != v26)
    {
      do
        language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)(v17 - 8));
      while (v17 != v16);
      __int16 v18 = v26;
    }
    BOOL v27 = v16;
    operator delete(v18);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

uint64_t std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

language_modeling::v1::CompletionStem *std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>(language_modeling::v1::CompletionStem *result, const language_modeling::v1::CompletionStem *a2, const language_modeling::v1::CompletionStem *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 61) {
      abort();
    }
    uint64_t v6 = result;
    uint64_t result = (language_modeling::v1::CompletionStem *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a4);
    *uint64_t v6 = result;
    v6[1] = result;
    unsigned __int16 v6[2] = (char *)result + 8 * v7;
    while (a2 != a3)
    {
      uint64_t v8 = language_modeling::v1::CompletionStem::CompletionStem(result, a2);
      a2 = (const language_modeling::v1::CompletionStem *)((char *)a2 + 8);
      uint64_t result = (language_modeling::v1::CompletionStem *)(v8 + 8);
    }
    v6[1] = result;
  }
  return result;
}

void *std::vector<TIInlineCompletion>::__init_with_size[abi:nn180100]<TIInlineCompletion*,TIInlineCompletion*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x333333333333334) {
      abort();
    }
    uint64_t v6 = result;
    uint64_t result = std::__allocate_at_least[abi:nn180100]<std::allocator<KB::DictionaryCursors>>(a4);
    uint64_t v7 = result;
    *uint64_t v6 = result;
    v6[1] = result;
    unsigned __int16 v6[2] = &result[10 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        unint64_t v10 = (long long *)(a2 + v9);
        unint64_t v11 = (std::string *)&v7[v9 / 8];
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v10, *((void *)v10 + 1));
        }
        else
        {
          long long v12 = *v10;
          v11->__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
        }
        uint64_t v13 = (std::string *)&v7[v9 / 8 + 3];
        os_signpost_id_t v14 = (const std::string::value_type **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(v13, *v14, *(void *)(a2 + v9 + 32));
        }
        else
        {
          long long v15 = *(_OWORD *)v14;
          v7[v9 / 8 + 5] = *(void *)(a2 + v9 + 40);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
        }
        uint64_t v16 = &v7[v9 / 8];
        uint64_t v17 = *(void *)(a2 + v9 + 48);
        *((_DWORD *)v16 + 14) = *(_DWORD *)(a2 + v9 + 56);
        void v16[6] = v17;
        LOBYTE(v7[v9 / 8 + 8]) = 0;
        uint64_t result = &v7[v9 / 8 + 8];
        *((unsigned char *)v16 + 72) = 0;
        if (*(unsigned char *)(a2 + v9 + 72))
        {
          uint64_t result = (void *)MEMORY[0x1E4E7B4C0](result, a2 + v9 + 64);
          *((unsigned char *)v16 + 72) = 1;
        }
        v9 += 80;
      }
      while (a2 + v9 != a3);
      uint64_t v7 = (void *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void ___ZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      if (*(void *)(a1 + 32)) {
        TIInlineCompletionGeneratorImpl::_computeInlineCompletions(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&,std::function<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>)::$_0::operator()(a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
}

void TIInlineCompletionGeneratorImpl::_computeInlineCompletions(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&,std::function<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>)::$_0::operator()(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 160);
  uint64_t v3 = *(void *)(a1 + 184);
  if (*(void *)(a1 + 168) != *(void *)(a1 + 160))
  {
    KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v43, (const KB::LanguageModelContext *)(a1 + 32));
    unint64_t v4 = *(long long **)(a1 + 160);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else
    {
      long long v5 = *v4;
      v37.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v5;
    }
    if (*((char *)v4 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v4 + 3), *((void *)v4 + 4));
    }
    else
    {
      long long v8 = *(long long *)((char *)v4 + 24);
      v38.__r_.__value_.__r.__words[2] = *((void *)v4 + 5);
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v8;
    }
    uint64_t v9 = *((void *)v4 + 6);
    int v40 = *((_DWORD *)v4 + 14);
    uint64_t v39 = v9;
    v41[0] = 0;
    char v42 = 0;
    if (*((unsigned char *)v4 + 72))
    {
      MEMORY[0x1E4E7B4C0](v41, v4 + 4);
      char v42 = 1;
    }
    TIInlineCompletionGeneratorImpl::_updateCache(v3, (const KB::LanguageModelContext *)v43, (uint64_t)&v37);
    if (v42) {
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v41);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    *(void *)&long long v18 = &v49;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v18);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v48);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v47);
    if (v45)
    {
      uint64_t v46 = v45;
      operator delete(v45);
    }
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v44);
    }
    uint64_t v10 = *v2;
    if (*(char *)(*v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
    }
    else
    {
      long long v11 = *(_OWORD *)v10;
      v30.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
    }
    if (*(char *)(v10 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v10 + 24), *(void *)(v10 + 32));
    }
    else
    {
      long long v12 = *(_OWORD *)(v10 + 24);
      v31.__r_.__value_.__r.__words[2] = *(void *)(v10 + 40);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
    }
    uint64_t v13 = *(void *)(v10 + 48);
    int v33 = *(_DWORD *)(v10 + 56);
    uint64_t v32 = v13;
    v34[0] = 0;
    char v35 = 0;
    if (*(unsigned char *)(v10 + 72))
    {
      MEMORY[0x1E4E7B4C0](v34, v10 + 64);
      char v35 = 1;
    }
    uint64_t v36 = 0;
    language_modeling::v1::CompletionStem::prefix((uint64_t *)v28, *(language_modeling::v1::CompletionStem **)(a1 + 136));
    int shouldSuppress = TIInlineCompletionGeneratorImpl::_shouldSuppress((TIInlineCompletionGeneratorImpl *)v3, (uint64_t)&v30, (uint64_t **)v28);
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if (v35) {
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v34);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    TIInlineCompletionEventDispatcher::did_generate_new_completion(*(void *)(v3 + 744), v10, *(const language_modeling::v1::CompletionStem **)(a1 + 136), shouldSuppress);
    if (shouldSuppress)
    {
      memset(v27, 0, sizeof(v27));
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      *(_OWORD *)std::string __p = 0u;
      language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v22);
      language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v23);
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v15 = *(void *)(a1 + 24);
      if (v15)
      {
        (*(void (**)(uint64_t, void ***, long long *))(*(void *)v15 + 48))(v15, v27, &v18);
        uint64_t v50 = (void **)&v24;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v50);
        language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v23);
        language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v22);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*((void *)&v18 + 1)) {
          std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v18 + 1));
        }
        *(void *)&long long v18 = v27;
        std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v18);
        return;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(a1 + 24);
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v16 + 48))(v16, v2, a1 + 32);
        return;
      }
    }
LABEL_53:
    uint64_t v17 = std::__throw_bad_function_call[abi:nn180100]();
    __destroy_helper_block_a8_32c56_ZTSNSt3__18weak_ptrI31TIInlineCompletionGeneratorImplEE48c241_ZTSZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0(v17);
    return;
  }
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v3 + 16));
  if (v6) {
    TIInlineCompletionEventDispatcher::did_generate_no_completion(*(TIInlineCompletionEventDispatcher **)(v3 + 744));
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  *(_OWORD *)std::string __p = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v22);
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v23);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    goto LABEL_53;
  }
  (*(void (**)(uint64_t, uint64_t *, long long *))(*(void *)v7 + 48))(v7, v2, &v18);
  v27[0] = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v27);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v23);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v22);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v18 + 1));
  }
}

void __destroy_helper_block_a8_32c56_ZTSNSt3__18weak_ptrI31TIInlineCompletionGeneratorImplEE48c241_ZTSZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 48);
  unsigned __int8 v6 = (void **)(a1 + 208);
  std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100](&v6);
  unsigned __int8 v6 = (void **)(a1 + 184);
  std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100](&v6);
  unsigned __int8 v6 = (void **)(a1 + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v6);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 152));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 144));
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 88);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }
  std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v2);
  long long v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void *__copy_helper_block_a8_32c56_ZTSNSt3__18weak_ptrI31TIInlineCompletionGeneratorImplEE48c241_ZTSZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)(a1 + 6), a2 + 48);
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 10), (const KB::LanguageModelContext *)(a2 + 80));
  a1[24] = 0;
  a1[25] = 0;
  a1[23] = 0;
  std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>((language_modeling::v1::CompletionStem *)(a1 + 23), *(const language_modeling::v1::CompletionStem **)(a2 + 184), *(const language_modeling::v1::CompletionStem **)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 3);
  a1[26] = 0;
  a1[27] = 0;
  long long v5 = a1 + 26;
  v5[2] = 0;
  uint64_t result = std::vector<TIInlineCompletion>::__init_with_size[abi:nn180100]<TIInlineCompletion*,TIInlineCompletion*>(v5, *(void *)(a2 + 208), *(void *)(a2 + 216), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 4));
  v5[3] = *(void *)(a2 + 232);
  return result;
}

uint64_t std::construct_at[abi:nn180100]<TIInlineCompletion,language_modeling::v1::InlineCompletion const&,TIInlineCompletion*>(uint64_t a1)
{
  MEMORY[0x1E4E7B4C0](v3);
  TIInlineCompletion::TIInlineCompletion(a1, (language_modeling::v1::InlineCompletion *)v3);
  language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v3);
  return a1;
}

uint64_t *std::vector<TIInlineCompletion>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      uint64_t v9 = v4 + v7;
      long long v10 = *(_OWORD *)(v4 + v7 - 80);
      *(void *)(v8 - 64) = *(void *)(v4 + v7 - 64);
      *(_OWORD *)(v8 - 80) = v10;
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 80) = 0;
      long long v11 = *(_OWORD *)(v4 + v7 - 56);
      *(void *)(v8 - 40) = *(void *)(v4 + v7 - 40);
      *(_OWORD *)(v8 - 56) = v11;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 56) = 0;
      uint64_t v12 = *(void *)(v4 + v7 - 32);
      *(_DWORD *)(v8 - 24) = *(_DWORD *)(v4 + v7 - 24);
      *(void *)(v8 - 32) = v12;
      *(unsigned char *)(v6 + v7 - 16) = 0;
      uint64_t result = (uint64_t *)(v6 + v7 - 16);
      *(unsigned char *)(v8 - 8) = 0;
      if (*(unsigned char *)(v4 + v7 - 8))
      {
        uint64_t result = (uint64_t *)language_modeling::v1::InlineCompletion::InlineCompletion();
        *(unsigned char *)(v8 - 8) = 1;
      }
      v7 -= 80;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v13 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v13;
  uint64_t v14 = v3[1];
  v3[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = v3[2];
  v3[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<TIInlineCompletion>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:nn180100]<TIInlineCompletion,0>(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void TIInlineCompletionGeneratorImpl::enumerateInlineCompletionsWithLM(uint64_t a1, const KB::LanguageModelContext *a2, language_modeling::v1::CompletionStem **a3, char a4, uint64_t a5)
{
  v48[3] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v18, a5);
    TIInlineCompletionGeneratorImpl::_computeInlineCompletions((void ***)a1, a2, a3, (uint64_t)v18);
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v18);
  }
  else
  {
    ++*(void *)(a1 + 24);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v9 || (long long v10 = *(void ***)a1, (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
      std::__throw_bad_weak_ptr[abi:nn180100]();
    }
    uint64_t v12 = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
    uint64_t v13 = [MEMORY[0x1E4F28F80] processInfo];
    uint64_t v14 = [v13 thermalState];
    if (([v13 isLowPowerModeEnabled] & 1) != 0 || v14 >= 2)
    {
      if (inlineCompletionsQueueLP(void)::onceToken != -1) {
        dispatch_once(&inlineCompletionsQueueLP(void)::onceToken, &__block_literal_global_11958);
      }
      uint64_t v15 = &inlineCompletionsQueueLP(void)::queue;
    }
    else
    {
      if (inlineCompletionsQueueHP(void)::onceToken != -1) {
        dispatch_once(&inlineCompletionsQueueHP(void)::onceToken, &__block_literal_global_44);
      }
      uint64_t v15 = &inlineCompletionsQueueHP(void)::queue;
    }
    id v16 = (id)*v15;

    uint64_t v33 = MEMORY[0x1E4F143A8];
    uint64_t v34 = 3321888768;
    char v35 = ___ZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEE_block_invoke;
    uint64_t v36 = &__block_descriptor_216_a8_32c250_ZTSKZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0_e5_v8__0l;
    uint64_t v19 = v10;
    long long v20 = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = *(void *)(a1 + 24);
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v22, a5);
    KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v23, a2);
    std::string v30 = 0;
    std::string v31 = 0;
    uint64_t v32 = 0;
    std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>((language_modeling::v1::CompletionStem *)&v30, *a3, a3[1], (a3[1] - *a3) >> 3);
    std::string v37 = v10;
    std::string v38 = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v39 = v21;
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v40, (uint64_t)v22);
    KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v41, (const KB::LanguageModelContext *)&v23);
    memset(v48, 0, 24);
    std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>((language_modeling::v1::CompletionStem *)v48, v30, v31, (v31 - v30) >> 3);
    TIDispatchAsync();
    uint64_t v17 = &v30;
    std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100]((void ***)&v17);
    uint64_t v17 = (const language_modeling::v1::CompletionStem **)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v17);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v28);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v27);
    if (__p)
    {
      uint64_t v26 = __p;
      operator delete(__p);
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v24);
    }
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v22);
    if (v20) {
      std::__shared_weak_count::__release_weak(v20);
    }

    uint64_t v19 = (void **)v48;
    std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100](&v19);
    uint64_t v19 = (void **)&v47;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v19);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v46);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v45);
    if (v43)
    {
      int v44 = v43;
      operator delete(v43);
    }
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v42);
    }
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v40);
    if (v38) {
      std::__shared_weak_count::__release_weak(v38);
    }
    std::__shared_weak_count::__release_weak(v12);
  }
}

void ___ZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEE_block_invoke(uint64_t a1)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
  {
    uint64_t v3 = 0;
    goto LABEL_7;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 32)) == 0 || *(void *)(a1 + 48) != *(void *)(v4 + 24))
  {
LABEL_7:
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3321888768;
    v5[2] = ___ZZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEENK3__0clEv_block_invoke;
    v5[3] = &__block_descriptor_64_a8_32c109_ZTSNSt3__18functionIFvRKNS_6vectorI18TIInlineCompletionNS_9allocatorIS2_EEEERKN2KB20LanguageModelContextEEEE_e5_v8__0l;
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v6, a1 + 56);
    TIDispatchAsync();
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v6);
    if (!v3) {
      return;
    }
    goto LABEL_8;
  }
  std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v5, a1 + 56);
  TIInlineCompletionGeneratorImpl::_computeInlineCompletions((void ***)v4, (const KB::LanguageModelContext *)(a1 + 88), (language_modeling::v1::CompletionStem **)(a1 + 192), (uint64_t)v5);
  std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v5);
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:nn180100](v3);
}

void __destroy_helper_block_a8_32c250_ZTSKZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 192);
  std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100](&v5);
  uint64_t v5 = (void **)(a1 + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 160));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 152));
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100]((void *)(a1 + 56));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

language_modeling::v1::CompletionStem *__copy_helper_block_a8_32c250_ZTSKZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  a1[6] = a2[6];
  std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)(a1 + 7), (uint64_t)(a2 + 7));
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 11), (const KB::LanguageModelContext *)(a2 + 11));
  a1[24] = 0;
  a1[25] = 0;
  uint64_t v5 = (language_modeling::v1::CompletionStem *)(a1 + 24);
  *((void *)v5 + 2) = 0;
  uint64_t v6 = (const language_modeling::v1::CompletionStem *)a2[24];
  uint64_t v7 = (const language_modeling::v1::CompletionStem *)a2[25];

  return std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>(v5, v6, v7, (v7 - v6) >> 3);
}

void ___ZZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEENK3__0clEv_block_invoke(uint64_t a1)
{
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  *(_OWORD *)std::string __p = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v8);
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v8 + 8));
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    (*(void (**)(uint64_t, void *, long long *))(*(void *)v2 + 48))(v2, v11, &v4);
    uint64_t v12 = (void **)&v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v12);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v8 + 8));
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*((void *)&v4 + 1)) {
      std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v4 + 1));
    }
    *(void *)&long long v4 = v11;
    std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v4);
  }
  else
  {
    uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
    __destroy_helper_block_a8_32c109_ZTSNSt3__18functionIFvRKNS_6vectorI18TIInlineCompletionNS_9allocatorIS2_EEEERKN2KB20LanguageModelContextEEEE(v3);
  }
}

void *__destroy_helper_block_a8_32c109_ZTSNSt3__18functionIFvRKNS_6vectorI18TIInlineCompletionNS_9allocatorIS2_EEEERKN2KB20LanguageModelContextEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_a8_32c109_ZTSNSt3__18functionIFvRKNS_6vectorI18TIInlineCompletionNS_9allocatorIS2_EEEERKN2KB20LanguageModelContextEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100](a1 + 32, a2 + 32);
}

void ___ZL24inlineCompletionsQueueHPv_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.TextInput.InlineCompletionsHP", v2);
  unsigned __int8 v1 = (void *)inlineCompletionsQueueHP(void)::queue;
  inlineCompletionsQueueHP(void)::queue = (uint64_t)v0;
}

void ___ZL24inlineCompletionsQueueLPv_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.TextInput.InlineCompletionsLP", v2);
  unsigned __int8 v1 = (void *)inlineCompletionsQueueLP(void)::queue;
  inlineCompletionsQueueLP(void)::queue = (uint64_t)v0;
}

void TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(const __CFLocale **this@<X0>, const KB::String *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  tokenize(this[7], (KB::LanguageModelContext *)v36);
  long long v7 = (char *)*((void *)a2 + 1);
  if (!v7) {
    long long v7 = (char *)a2 + 16;
  }
  if (*(_WORD *)a2) {
    long long v8 = v7;
  }
  else {
    long long v8 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(&v48, v8);
  uint64_t v50 = 0;
  long long v9 = (std::string *)operator new(0x20uLL);
  uint64_t v10 = v9;
  if (SHIBYTE(v49) < 0)
  {
    std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)v48, *((std::string::size_type *)&v48 + 1));
    long long v11 = v50;
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v48;
    v9->__r_.__value_.__r.__words[2] = v49;
    long long v11 = 0;
  }
  v10[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  v34[1] = 0;
  unint64_t v35 = 0;
  v34[0] = 0;
  language_modeling::v1::CompletionStem::CompletionStem((language_modeling::v1::CompletionStem *)&v46);
  std::string::size_type size = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  int v13 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = v10->__r_.__value_.__l.__size_;
  }
  if (size == 6)
  {
    if (v13 >= 0) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = (std::string *)v10->__r_.__value_.__r.__words[0];
    }
    unsigned int v15 = 2018788690;
    unsigned int v16 = bswap32(v14->__r_.__value_.__l.__data_);
    if (v16 == 2018788690 && (v16 = bswap32(WORD2(v14->__r_.__value_.__r.__words[0])) >> 16, unsigned int v15 = 19832, v16 == 19832))
    {
      int v17 = 0;
    }
    else if (v16 < v15)
    {
      int v17 = -1;
    }
    else
    {
      int v17 = 1;
    }
    if (v17) {
      int v18 = 0;
    }
    else {
      int v18 = 3;
    }
    if (v13 < 0) {
      goto LABEL_27;
    }
LABEL_19:
    std::string v43 = *v10;
    goto LABEL_28;
  }
  int v18 = 0;
  if ((v13 & 0x80000000) == 0) {
    goto LABEL_19;
  }
LABEL_27:
  std::string::__init_copy_ctor_external(&v43, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
LABEL_28:
  LODWORD(v44) = v18;
  language_modeling::v1::CompletionStem::try_push_back();
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  language_modeling::v1::CompletionStem::set_score((language_modeling::v1::CompletionStem *)&v46, *(double *)&v10[1].__r_.__value_.__l.__data_);
  language_modeling::v1::CompletionStem::set_unique_id((language_modeling::v1::CompletionStem *)&v46);
  int64_t v19 = (v34[1] - v34[0]) >> 3;
  if ((unint64_t)(v19 + 1) >> 61) {
    abort();
  }
  unint64_t v20 = (uint64_t)(v35 - (unint64_t)v34[0]) >> 2;
  if (v20 <= v19 + 1) {
    unint64_t v20 = v19 + 1;
  }
  if (v35 - (unint64_t)v34[0] >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v20;
  }
  uint64_t v45 = &v35;
  if (v21) {
    unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v21);
  }
  else {
    uint64_t v22 = 0;
  }
  std::string::size_type v23 = v21 + 8 * v19;
  v43.__r_.__value_.__r.__words[0] = v21;
  v43.__r_.__value_.__l.__size_ = v23;
  unint64_t v44 = v21 + 8 * v22;
  language_modeling::v1::CompletionStem::CompletionStem((language_modeling::v1::CompletionStem *)v23, (const language_modeling::v1::CompletionStem *)&v46);
  v34[0] = (language_modeling::v1::CompletionStem *)v43.__r_.__value_.__l.__size_;
  *(int64x2_t *)&v43.__r_.__value_.__r.__words[1] = vdupq_n_s64((unint64_t)v34[1]);
  unint64_t v24 = v35;
  unint64_t v35 = v44;
  unint64_t v44 = v24;
  v43.__r_.__value_.__r.__words[0] = v43.__r_.__value_.__l.__size_;
  std::__split_buffer<language_modeling::v1::CompletionStem>::~__split_buffer((uint64_t)&v43);
  v34[1] = (language_modeling::v1::CompletionStem *)(v23 + 8);
  language_modeling::v1::CompletionStem::~CompletionStem((language_modeling::v1::CompletionStem *)&v46);
  if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10->__r_.__value_.__l.__data_);
  }
  operator delete(v10);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  TIInlineCompletionGeneratorImpl::cachedCompletionsForContextAndStem((TIInlineCompletionGeneratorImpl *)this, (const KB::LanguageModelContext *)v36, v34[0], (uint64_t)&v43);
  if ((_BYTE)v44)
  {
    if (v43.__r_.__value_.__r.__words[0] == v43.__r_.__value_.__l.__size_)
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 32) = 0;
    }
    else
    {
      if (*(char *)(v43.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v43.__r_.__value_.__l.__data_, *(void *)(v43.__r_.__value_.__r.__words[0] + 8));
      }
      else
      {
        long long v25 = *(_OWORD *)v43.__r_.__value_.__l.__data_;
        v46.__r_.__value_.__r.__words[2] = *(void *)(v43.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v25;
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v27 = &v46;
      }
      else {
        uint64_t v27 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      KB::String::String((KB::String *)&v48, (const char *)v27);
      *(_DWORD *)a3 = 0x100000;
      *(_WORD *)(a3 + 4) = 0;
      *(unsigned char *)(a3 + 6) = 0;
      *(void *)(a3 + 8) = 0;
      KB::String::operator=(a3, (KB::String *)&v48);
      *(unsigned char *)(a3 + 32) = 1;
      if (*((void *)&v48 + 1) && BYTE6(v48) == 1) {
        free(*((void **)&v48 + 1));
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
    }
    *(void *)&long long v48 = &v43;
    uint64_t v28 = (void ***)&v48;
  }
  else
  {
    std::string v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    *(void *)&long long v48 = &unk_1F3F75F88;
    *((void *)&v48 + 1) = &v31;
    uint64_t v50 = &v48;
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v47, (uint64_t)&v48);
    TIInlineCompletionGeneratorImpl::enumerateInlineCompletionsWithLM((uint64_t)this, (const KB::LanguageModelContext *)v36, v34, 1, (uint64_t)v47);
    std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v47);
    if (v31 == v32)
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 32) = 0;
    }
    else
    {
      if (*((char *)v31 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v31, *((void *)v31 + 1));
      }
      else
      {
        long long v26 = *v31;
        __p.__r_.__value_.__r.__words[2] = *((void *)v31 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      KB::String::String((KB::String *)&v46, (const char *)p_p);
      *(_DWORD *)a3 = 0x100000;
      *(_WORD *)(a3 + 4) = 0;
      *(unsigned char *)(a3 + 6) = 0;
      *(void *)(a3 + 8) = 0;
      KB::String::operator=(a3, (KB::String *)&v46);
      *(unsigned char *)(a3 + 32) = 1;
      if (v46.__r_.__value_.__l.__size_ && v46.__r_.__value_.__s.__data_[6] == 1) {
        free((void *)v46.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v28 = (void ***)std::__function::__value_func<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](&v48);
    *(void *)&long long v48 = &v31;
  }
  std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100](v28);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v41);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v40);
  if (v38)
  {
    uint64_t v39 = v38;
    operator delete(v38);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v37);
  }
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0>,void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::operator()(uint64_t result, long long **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(uint64_t **)(v4 + 8);
      long long v6 = (std::string *)v5[1];
      unint64_t v7 = v5[2];
      if ((unint64_t)v6 >= v7)
      {
        unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *v5) >> 4);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0x333333333333333) {
          abort();
        }
        unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *v5) >> 4);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x199999999999999) {
          unint64_t v12 = 0x333333333333333;
        }
        else {
          unint64_t v12 = v10;
        }
        v15[4] = v5 + 2;
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::DictionaryCursors>>(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = (std::string *)(v12 + 80 * v9);
        v15[0] = v12;
        v15[1] = v14;
        v15[3] = v12 + 80 * v13;
        std::construct_at[abi:nn180100]<TIInlineCompletion,TIInlineCompletion const&,TIInlineCompletion*>(v14, v2);
        unsigned __int16 v15[2] = (char *)v14 + 80;
        std::vector<TIInlineCompletion>::__swap_out_circular_buffer(v5, v15);
        uint64_t v8 = v5[1];
        uint64_t result = std::__split_buffer<TIInlineCompletion>::~__split_buffer((uint64_t)v15);
      }
      else
      {
        uint64_t result = (uint64_t)std::construct_at[abi:nn180100]<TIInlineCompletion,TIInlineCompletion const&,TIInlineCompletion*>(v6, v2);
        uint64_t v8 = result + 80;
      }
      v5[1] = v8;
      v2 += 5;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0>,void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F3F75F88;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0>,void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F3F75F88;
  result[1] = v3;
  return result;
}

void std::__function::__func<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0>,void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__func()
{
}

void TIInlineCompletionGeneratorImpl::registerLearning(TIInlineCompletionGeneratorImpl *a1, const std::string *a2, uint64_t a3, std::string::size_type a4, int a5)
{
  uint64_t v8 = (sqlite3 **)TIInlineCompletionGeneratorImpl::rejectionsDatabase(a1);

  TIInlineCompletionsNegativeLearning::registerLearning(v8, a2, v9, a4, a5);
}

void TIInlineCompletionsNegativeLearning::registerLearning(sqlite3 **a1, const std::string *a2, uint64_t a3, std::string::size_type a4, int a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (TIAdaptationAutocorrectionRejectionV2Enabled())
  {
    double v9 = (double)std::chrono::system_clock::now().__d_.__rep_ / 1000000.0;
    if (a5)
    {
      std::string::size_type v10 = std::string::find(a2, 32, 0);
      if (v10 == -1)
      {
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = *a2;
        }
      }
      else
      {
        std::string::basic_string(&__p, a2, 0, v10, (std::allocator<char> *)&v28);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      std::string::basic_string[abi:nn180100]<0>(&v28, (char *)p_p);
      unint64_t v17 = TIInlineCompletionsNegativeLearning::wordBlockedByNegativeLearning(a1, 0, (uint64_t)&v28, 1u);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      unint64_t v18 = *(unsigned __int8 *)(a4 + 23);
      if (!HIDWORD(v17))
      {
        if ((v18 & 0x80u) == 0) {
          int64_t v19 = (sqlite3 *)a4;
        }
        else {
          int64_t v19 = *(sqlite3 **)a4;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v20 = &__p;
        }
        else {
          unint64_t v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        unint64_t v21 = a1;
        double v22 = v9;
        int v23 = a5;
LABEL_45:
        TI::RejectionsDatabase::insert_inline_completion_rejection(v21, v19, (const char *)v20, v23, v22);
LABEL_47:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        unsigned int v15 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_49;
      }
      if ((v18 & 0x80) != 0)
      {
        if (*(void *)(a4 + 8) <= (unint64_t)(int)v17) {
          goto LABEL_46;
        }
        a4 = *(void *)a4;
      }
      else if (v18 <= (int)v17)
      {
LABEL_46:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
        {
          unint64_t v24 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v25 = *(void *)a4;
          unint64_t v26 = *(void *)(a4 + 8);
          if ((v18 & 0x80u) == 0)
          {
            std::string::size_type v25 = a4;
            unint64_t v26 = v18;
          }
          LODWORD(v28.__r_.__value_.__l.__data_) = 136316162;
          *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = (std::string::size_type)"registerLearning";
          WORD2(v28.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = v25;
          HIWORD(v28.__r_.__value_.__r.__words[2]) = 2080;
          uint64_t v29 = v24;
          __int16 v30 = 2048;
          unint64_t v31 = v26;
          __int16 v32 = 1024;
          int v33 = v17;
          _os_log_debug_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%s  [Inline Completions Generator] Negative learning from %s to %s should be unnecessary since prefix has length %zu <= %d already in database", (uint8_t *)&v28, 0x30u);
        }
        goto LABEL_47;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v20 = &__p;
      }
      else {
        unint64_t v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      unint64_t v21 = a1;
      int64_t v19 = (sqlite3 *)a4;
      double v22 = v9;
      int v23 = a5;
      goto LABEL_45;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    int v12 = (char)size;
    if ((size & 0x80u) == 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    if (size)
    {
      while (size)
      {
        int v14 = v13->__r_.__value_.__s.__data_[--size];
        if (v14 == 32)
        {
          if (size == -1) {
            break;
          }
          std::string::basic_string(&v28, a2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
          goto LABEL_20;
        }
      }
    }
    if (v12 < 0) {
      std::string::__init_copy_ctor_external(&v28, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else {
      std::string v28 = *a2;
    }
LABEL_20:
    TI::RejectionsDatabase::soft_add_deleted((uint64_t)a1, &v28, v9);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      unsigned int v15 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_49:
      operator delete(v15);
    }
  }
}

void TIInlineCompletionGeneratorImpl::register_inline_completion_acceptance_rejection(uint64_t a1, const KB::String *a2, const KB::String *a3, const KB::String *a4, int a5)
{
}

uint64_t TI::Favonius::SearchNode::instance_error_correction_type(TI::Favonius::SearchNode *this)
{
  uint64_t result = *((void *)this + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  return result;
}

unsigned int *TI::Favonius::SearchNode::set_typing_hypothesis(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 56);
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 56) = v4;
  if (result)
  {
    unsigned int v5 = atomic_load(result + 2);
    if (v5 == 1) {
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)result + 248))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

void TI::Favonius::SearchNode::clone_with_typing()
{
}

uint64_t TI::Favonius::SearchNode::SearchNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(void *)a1 = &unk_1F3F75FD0;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  *(_DWORD *)(a1 + 40) = ++s_counter;
  unint64_t v7 = *(atomic_uint **)(a2 + 48);
  *(void *)(a1 + 48) = v7;
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  uint64_t v8 = *a3;
  *a3 = 0;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  KB::String::String((KB::String *)(a1 + 88), (const KB::String *)(a2 + 88));
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 128) = v9;
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_WORD *)(a1 + 148) = *(_WORD *)(a2 + 148);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10)
  {
    if (*(void *)(a1 + 56))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
    }
    else
    {
      int v11 = *(_DWORD *)(v10 + 136);
      *(_DWORD *)(a1 + 136) = v11;
      *(_DWORD *)(a1 + 140) = v11;
    }
    *(unsigned char *)(a1 + 148) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    int v12 = (const float *)(a1 + 144);
    float32x2_t v13 = vld1_dup_f32(v12);
    float32x2_t v14 = vmla_n_f32(v13, *(float32x2_t *)(a1 + 136), *(float *)(a1 + 152));
    *(float32x2_t *)(a1 + 156) = v14;
    *(_DWORD *)(a1 + 24) = v14.i32[0];
  }
  return a1;
}

void TI::Favonius::SearchNode::set_language_scores_from_parent_and_typing_hypothesis(TI::Favonius::SearchNode *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1) {
    TI::Favonius::SearchNode::set_language_scores_from_parent_and_typing_hypothesis((uint64_t)this, v1);
  }
}

void TI::Favonius::SearchNode::set_language_scores_from_parent_and_typing_hypothesis(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(v4 + 136);
  float v5 = TI::Favonius::SearchNode::partial_language_score(a2, *(void *)(v4 + 56)) + *(float *)(a1 + 136);
  *(float *)(a1 + 136) = v5;
  if (!*(void *)(a1 + 64))
  {
    float v6 = (*(float (**)(uint64_t))(*(void *)a2 + 80))(a2);
    float v7 = *(float *)(a1 + 136);
    float v5 = v7 + logf(v6);
  }
  *(float *)(a1 + 140) = v5;
}

float TI::Favonius::SearchNode::partial_language_score(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 0.0;
  }
  uint64_t v3 = a1;
  float v4 = 0.0;
  do
  {
    float v5 = (*(float (**)(uint64_t))(*(void *)v3 + 24))(v3);
    float v4 = v4 + logf(v5);
    uint64_t v3 = (**(uint64_t (***)(uint64_t))v3)(v3);
  }
  while (v3 != a2);
  return v4;
}

BOOL TI::Favonius::SearchNode::compute_score_is_final(TI::Favonius::SearchNode *this)
{
  if (!*((void *)this + 7) || *((void *)this + 8)) {
    return 0;
  }
  if (*((void *)this + 16)) {
    return 1;
  }
  return *((void *)this + 2) == 0;
}

unsigned int *TI::Favonius::SearchNode::compute_geometry_model_data(TI::Favonius::SearchNode *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 6);
  uint64_t v2 = *(void *)(*((void *)this + 4) + 128);
  uint64_t v3 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v10 = (unsigned int *)*((void *)this + 2);
    if (v3)
    {
      atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
      uint64_t v1 = (atomic_uint *)*((void *)this + 6);
      uint64_t v9 = v1;
      if (!v1) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v9 = v1;
    }
    atomic_fetch_add(v1, 1u);
LABEL_5:
    (*(void (**)(uint64_t, unsigned int **, atomic_uint **))(*(void *)v2 + 48))(v2, &v10, &v9);
    if (v9) {
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v9);
    }
    uint64_t result = v10;
    if (!v10) {
      return result;
    }
LABEL_16:
    unsigned int v6 = atomic_load(result + 2);
    if (v6 == 1) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
    atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
    return result;
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 2);
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  }
  float v5 = *(atomic_uint **)(*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
  float v7 = v5;
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  (*(void (**)(uint64_t, unsigned int **, atomic_uint **))(*(void *)v2 + 64))(v2, &v8, &v7);
  if (v7) {
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v7);
  }
  uint64_t result = v8;
  if (v8) {
    goto LABEL_16;
  }
  return result;
}

uint64_t TI::Favonius::SearchNode::compute_language_model_data(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    float v4 = *(atomic_uint **)(*(void *)(a1 + 48) + 8);
    float v5 = v4;
    if (v4)
    {
      atomic_fetch_add(v4, 1u);
      uint64_t result = *(void *)(a1 + 32);
    }
    TI::Favonius::SearchNode::get_language_extensions(result, a2, (uint64_t *)&v5);
    uint64_t result = (uint64_t)v5;
    if (v5) {
      return WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v5);
    }
  }
  return result;
}

void TI::Favonius::SearchNode::get_language_extensions(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 56) + 56))(*(void *)(a1 + 56))) {
    goto LABEL_38;
  }
  uint64_t v6 = *a3;
  int v7 = *(unsigned __int16 *)(*a3 + 12);
  if (!*(_WORD *)(*a3 + 12))
  {
    KB::String::compute_length((unsigned __int16 *)(v6 + 8));
    int v7 = *(unsigned __int16 *)(v6 + 12);
  }
  if (v7 != 1) {
    goto LABEL_38;
  }
  uint64_t v8 = a1 + 200;
  uint64_t v9 = 200;
  if (!KB::SetInputHasSupplementalPrefixForScope::s_inputHasSupplementalPrefix)
  {
    uint64_t v9 = 176;
    uint64_t v8 = a1 + 176;
  }
  uint64_t v10 = *(void *)(a1 + v9);
  if (!v10)
  {
LABEL_38:
    std::string v28 = *(void (**)(void))(**(void **)(a1 + 56) + 40);
    v28();
    return;
  }
  char v11 = 0;
  unint64_t v12 = *(void *)(v8 + 8);
  uint64_t v13 = 8 * v10;
  unint64_t v14 = v12;
  do
  {
    int v15 = *(_DWORD *)(*a3 + 56);
    if (v15 != *(_DWORD *)(*(void *)(*(uint64_t (**)(void))(**(void **)v14 + 16))() + 56)) {
      goto LABEL_36;
    }
    unint64_t v16 = *a2;
    if (*a2 != a2[2])
    {
      unint64_t v22 = a2[1];
      int v23 = (uint64_t *)v14;
      goto LABEL_32;
    }
    unint64_t v17 = v16 + 1;
    unint64_t v18 = a2[1];
    if (v18 <= v14 && v18 + 8 * v16 > v14)
    {
      unint64_t v24 = v12 - v18;
      if (v16 >= 0x100) {
        unint64_t v25 = v16 + (v16 >> 1);
      }
      else {
        unint64_t v25 = 2 * v16;
      }
      if (v25 <= v17) {
        unint64_t v26 = v17;
      }
      else {
        unint64_t v26 = v25;
      }
      WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v26);
      unint64_t v22 = a2[1];
      int v23 = (uint64_t *)(v22 + v24);
      if (!v22) {
        goto LABEL_35;
      }
LABEL_31:
      unint64_t v16 = *a2;
LABEL_32:
      uint64_t v27 = *v23;
      *(void *)(v22 + 8 * v16) = v27;
      if (v27)
      {
        atomic_fetch_add((atomic_uint *volatile)(v27 + 8), 1u);
        unint64_t v16 = *a2;
      }
      *a2 = v16 + 1;
      goto LABEL_35;
    }
    if (v16 >= 0x100) {
      unint64_t v20 = v16 + (v16 >> 1);
    }
    else {
      unint64_t v20 = 2 * v16;
    }
    if (v20 <= v17) {
      unint64_t v21 = v17;
    }
    else {
      unint64_t v21 = v20;
    }
    WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v21);
    unint64_t v22 = a2[1];
    int v23 = (uint64_t *)v14;
    if (v22) {
      goto LABEL_31;
    }
LABEL_35:
    char v11 = 1;
LABEL_36:
    v14 += 8;
    v12 += 8;
    v13 -= 8;
  }
  while (v13);
  if ((v11 & 1) == 0) {
    goto LABEL_38;
  }
}

uint64_t *TI::Favonius::SearchNode::append_local_keys_for_debugging(TI::Favonius::SearchNode *this, KB::String *a2)
{
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    float v4 = (TI::Favonius::Key **)(v3 + 8);
  }
  else {
    float v4 = (TI::Favonius::Key **)(*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
  }
  float v5 = *v4;

  return TI::Favonius::Key::append_debug_data(v5, a2);
}

void TI::Favonius::SearchNode::clone_inserting_key(TI::Favonius::SearchNode *this, TI::Favonius::SearchNode *a2)
{
  uint64_t v4 = *(void *)(*((void *)a2 + 4) + 128);
  float v5 = *(atomic_uint **)(*(uint64_t (**)(void))(**((void **)a2 + 7) + 16))(*((void *)a2 + 7));
  unint64_t v14 = v5;
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  (*(void (**)(void **__return_ptr, uint64_t, atomic_uint **, void))(*(void *)v4 + 72))(__p, v4, &v14, *((void *)this + 2));
  __p[0] = 0;
  if (v14) {
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v14);
  }
  uint64_t v6 = *((void *)this + 2);
  uint64_t v13 = v6;
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  uint64_t v7 = *((void *)a2 + 7);
  uint64_t v8 = (atomic_uint *)*((void *)this + 6);
  unint64_t v12 = v8;
  uint64_t v9 = v7;
  if (v8)
  {
    atomic_fetch_add(v8, 1u);
    uint64_t v9 = *((void *)a2 + 7);
  }
  float v10 = (*(float (**)(uint64_t))(*(void *)v9 + 24))(v9);
  logf(v10);
  TI::Favonius::SearchNodeInsertingKey::create();
}

void std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__base_destruct_at_end[abi:nn180100]((unsigned int *)v2, (uint64_t)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void TI::Favonius::SearchNode::clone_discarding_second_touch_with_parent(void *a1@<X8>)
{
  *a1 = 0;
}

void TI::Favonius::SearchNode::clone_discarding_first_touch_with_parent(void *a1@<X8>)
{
  *a1 = 0;
}

void TI::Favonius::SearchNode::clone_with_parent(TI::Favonius::SearchNode *this, TI::Favonius::SearchNode *a2)
{
}

uint64_t TI::Favonius::SearchNode::SearchNode(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6, float a7, float a8)
{
  uint64_t v11 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(void *)a1 = &unk_1F3F75FD0;
  *(void *)(a1 + 32) = a2;
  if (a2) {
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  }
  *(_DWORD *)(a1 + 40) = ++s_counter;
  uint64_t v12 = *a4;
  *a4 = 0;
  uint64_t v13 = *a5;
  *a5 = 0;
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  unint64_t v14 = (void *)(a1 + 64);
  if (a6)
  {
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::Vector(v14, a6);
    uint64_t v12 = *(void *)(a1 + 48);
  }
  else
  {
    *unint64_t v14 = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  if (v12) {
    uint64_t v15 = v12 + 8;
  }
  else {
    uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
  }
  KB::String::String((KB::String *)(a1 + 88), (const KB::String *)(*(void *)v15 + 8));
  uint64_t v16 = *(void *)(a1 + 48);
  if (v16) {
    uint64_t v17 = v16 + 8;
  }
  else {
    uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
  }
  *(_WORD *)(a1 + 120) = *(_WORD *)(*(void *)v17 + 60);
  *(void *)(a1 + 128) = 0;
  uint64_t v18 = *(void *)(a1 + 32);
  if (v18)
  {
    *(float *)(a1 + 152) = a7;
    int64_t v19 = (float *)(a1 + 152);
    uint64_t v20 = *(void *)(a1 + 56);
    if (*(void *)(a1 + 16)) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = v20 == 0;
    }
    char v22 = !v21;
    *(unsigned char *)(a1 + 148) = v22;
    *(unsigned char *)(a1 + 149) = 1;
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(v18 + 164) + 1;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
    }
    else
    {
      int v25 = *(_DWORD *)(v18 + 136);
      *(_DWORD *)(a1 + 136) = v25;
      *(_DWORD *)(a1 + 140) = v25;
    }
  }
  else
  {
    *(float *)(a1 + 152) = a7;
    int64_t v19 = (float *)(a1 + 152);
    *(_WORD *)(a1 + 148) = 1;
    *(_DWORD *)(a1 + 164) = 0;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    float v23 = (*(float (**)(void))(**(void **)(a1 + 56) + 88))(*(void *)(a1 + 56));
    *(float *)(a1 + 136) = v23;
    float v24 = (*(float (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
    *(float *)(a1 + 140) = v23 + logf(v24);
  }
  *(_DWORD *)(a1 + 144) = 0;
  uint64_t v26 = *(void *)(a1 + 32);
  if (v26)
  {
    float v27 = *(float *)(v26 + 144) + 0.0;
    *(float *)(a1 + 144) = v27;
    uint64_t v28 = *(void *)(a1 + 48);
    if (v28)
    {
      float v29 = *(float *)(v28 + 32);
    }
    else
    {
      uint64_t v34 = *(void *)(a1 + 16);
      if (v34)
      {
        float v30 = (*(float (**)(uint64_t))(*(void *)v34 + 16))(v34) + *(float *)(a1 + 144);
        goto LABEL_32;
      }
      if (*(void *)(v26 + 16))
      {
        unsigned int v43 = *(_DWORD *)(v26 + 164);
        if (v43 >= 5) {
          unsigned int v43 = 5;
        }
        float v44 = TI::Favonius::SearchParameters::k_prediction_costs[v43];
      }
      else
      {
        float v44 = 0.8;
      }
      float v42 = *v19;
      float v29 = (float)(1.0 - a8) * (float)(v42 * logf(v44));
    }
    float v30 = v27 + v29;
LABEL_32:
    *(float *)(a1 + 144) = v30;
    goto LABEL_38;
  }
  (*(void (**)(unsigned int **__return_ptr))(**(void **)(a1 + 16) + 96))(&v45);
  unint64_t v31 = *(unsigned int **)(a1 + 128);
  __int16 v32 = v45;
  uint64_t v45 = 0;
  *(void *)(a1 + 128) = v32;
  if (v31)
  {
    unsigned int v33 = atomic_load(v31 + 2);
    if (v33 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v31 + 8))(v31);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v31 + 2, 0xFFFFFFFF);
    }
    if (v45)
    {
      unsigned int v35 = atomic_load(v45 + 2);
      if (v35 == 1) {
        (*(void (**)(void))(*(void *)v45 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v45 + 2, 0xFFFFFFFF);
      }
    }
  }
LABEL_38:
  uint64_t v36 = *(void *)(a1 + 32);
  if (v36)
  {
    int v37 = *(_DWORD *)(v36 + 168);
    *(_DWORD *)(a1 + 168) = v37;
    if ((*(_WORD *)(a1 + 120) & 0x20) != 0) {
      *(_DWORD *)(a1 + 168) = v37 + 1;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 168) = 0;
  }
  std::string v38 = (const float *)(a1 + 144);
  float32x2_t v39 = vld1_dup_f32(v38);
  float32x2_t v40 = vmla_n_f32(v39, *(float32x2_t *)(a1 + 136), *(float *)(a1 + 152));
  *(float32x2_t *)(a1 + 156) = v40;
  *(_DWORD *)(a1 + 24) = v40.i32[0];
  return a1;
}

void *WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::Vector(void *a1, void *a2)
{
  uint64_t v3 = a2[2];
  *a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  if (v3)
  {
    a1[2] = v3;
    float v5 = malloc_type_malloc(8 * v3, 0x2004093837F09uLL);
    a1[1] = v5;
    if (v5)
    {
      if (*a2)
      {
        uint64_t v6 = (uint64_t *)a2[1];
        uint64_t v7 = 8 * *a2;
        do
        {
          uint64_t v8 = *v6;
          *float v5 = *v6;
          if (v8) {
            atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
          }
          ++v5;
          ++v6;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return a1;
}

uint64_t TI::Favonius::SearchNode::key_count(TI::Favonius::SearchNode *this)
{
  return 1;
}

uint64_t TI::Favonius::SearchNode::touch_count(TI::Favonius::SearchNode *this)
{
  return 1;
}

float TI::Favonius::SearchNode::decrease_bound_on_score(TI::Favonius::SearchNode *this)
{
  if (!*((unsigned char *)this + 148))
  {
    if (*((void *)this + 16) || !*((void *)this + 2))
    {
      if (*((void *)this + 7)) {
        goto LABEL_26;
      }
      float v5 = (char *)this + 64;
      uint64_t v6 = *((void *)this + 8);
      if (!v6)
      {
        (*(void (**)(TI::Favonius::SearchNode *, char *))(*(void *)this + 112))(this, v5);
        unint64_t v8 = *((void *)this + 8);
        uint64_t v7 = *((void *)this + 9);
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3221225472;
        void v24[2] = ___ZN2TI8Favonius10SearchNode23decrease_bound_on_scoreEv_block_invoke;
        _OWORD v24[3] = &__block_descriptor_40_e15_B24__0r_v8r_v16l;
        v24[4] = this;
        uint64_t v9 = v24;
        int v25 = v9;
        unint64_t v10 = 126 - 2 * __clz(v8);
        if (v8) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(v7, (uint64_t *)(v7 + 8 * v8), (uint64_t)&v25, v11, 1);

        uint64_t v6 = *((void *)this + 8);
      }
      uint64_t v12 = *((void *)this + 9) + 8 * v6;
      uint64_t v13 = *(void *)(v12 - 8);
      *(void *)(v12 - 8) = 0;
      unint64_t v14 = (unsigned int *)*((void *)this + 7);
      *((void *)this + 7) = v13;
      if (v14)
      {
        unsigned int v15 = atomic_load(v14 + 2);
        if (v15 == 1) {
          (*(void (**)(unsigned int *, char *))(*(void *)v14 + 248))(v14, v5);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v14 + 2, 0xFFFFFFFF);
        }
      }
      uint64_t v16 = *((void *)this + 8);
      uint64_t v17 = v16 - 1;
      WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct((unsigned int *)(*((void *)this + 9) + 8 * (v16 - 1)), (unsigned int **)(*((void *)this + 9) + 8 * v16));
      *((void *)this + 8) = v17;
      uint64_t v18 = *(void *)this;
    }
    else
    {
      (*(void (**)(unsigned int **__return_ptr, TI::Favonius::SearchNode *))(*(void *)this + 120))(&v25, this);
      uint64_t v2 = (unsigned int *)*((void *)this + 16);
      uint64_t v3 = v25;
      int v25 = 0;
      *((void *)this + 16) = v3;
      if (v2)
      {
        unsigned int v4 = atomic_load(v2 + 2);
        if (v4 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
        }
        if (v25)
        {
          unsigned int v19 = atomic_load(v25 + 2);
          if (v19 == 1) {
            (*(void (**)(void))(*(void *)v25 + 8))();
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF);
          }
        }
      }
      *((float *)this + 36) = (*(float (**)(void))(**((void **)this + 16) + 16))(*((void *)this + 16));
      uint64_t v18 = *(void *)this;
    }
    (*(void (**)(TI::Favonius::SearchNode *))(v18 + 136))(this);
LABEL_26:
    *((unsigned char *)this + 148) = (*(uint64_t (**)(TI::Favonius::SearchNode *))(*(void *)this + 128))(this);
    float result = *((float *)this + 38);
    BOOL v21 = (const float *)((char *)this + 144);
    float32x2_t v22 = vld1_dup_f32(v21);
    float32x2_t v23 = vmla_n_f32(v22, *(float32x2_t *)((char *)this + 136), result);
    *(float32x2_t *)((char *)this + 156) = v23;
    *((_DWORD *)this + 6) = v23.i32[0];
  }
  return result;
}

BOOL ___ZN2TI8Favonius10SearchNode23decrease_bound_on_scoreEv_block_invoke(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  float v5 = TI::Favonius::SearchNode::partial_language_score(*a2, *(void *)(*(void *)(v4 + 32) + 56));
  return v5 < TI::Favonius::SearchNode::partial_language_score(*a3, *(void *)(*(void *)(v4 + 32) + 56));
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
LABEL_2:
  unint64_t v105 = a2 - 2;
  uint64_t v107 = a2 - 1;
  unint64_t v104 = a2 - 3;
  uint64_t v12 = v11;
  std::string v109 = a2;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = a2 - v12;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
          if (result)
          {
            uint64_t v41 = *v12;
            *uint64_t v12 = *v107;
            uint64_t *v107 = v41;
          }
          break;
        case 3uLL:
          float result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v107, a3);
          break;
        case 4uLL:
          float result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v12 + 2, v107, a3);
          break;
        case 5uLL:
          float result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v12 + 2, v12 + 3, v107, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 == a2) {
        return result;
      }
      int64_t v55 = (v14 - 2) >> 1;
      int64_t v108 = v55;
      do
      {
        int64_t v56 = v55;
        if (v108 >= v55)
        {
          uint64_t v57 = (2 * v55) | 1;
          std::string v58 = &v11[v57];
          if (2 * v55 + 2 < (uint64_t)v14 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
          {
            ++v58;
            uint64_t v57 = 2 * v56 + 2;
          }
          uint64_t v59 = (unsigned int **)&v11[v56];
          a2 = v109;
          if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
          {
            char v60 = *v59;
            *uint64_t v59 = 0;
            uint64_t v114 = v60;
            do
            {
              std::string v61 = (unsigned int **)v58;
              std::string v62 = (unsigned int *)*v58;
              uint64_t *v58 = 0;
              uint64_t v63 = *v59;
              *uint64_t v59 = v62;
              if (v63)
              {
                unsigned int v64 = atomic_load(v63 + 2);
                if (v64 == 1) {
                  (*(void (**)(unsigned int *))(*(void *)v63 + 248))(v63);
                }
                else {
                  atomic_fetch_add((atomic_uint *volatile)v63 + 2, 0xFFFFFFFF);
                }
              }
              if (v108 < v57) {
                break;
              }
              uint64_t v65 = (2 * v57) | 1;
              std::string v58 = &v11[v65];
              uint64_t v66 = 2 * v57 + 2;
              if (v66 < (uint64_t)v14 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
              {
                ++v58;
                uint64_t v65 = v66;
              }
              uint64_t v59 = v61;
              uint64_t v57 = v65;
            }
            while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
            uint64_t v67 = *v61;
            *std::string v61 = v114;
            if (v67)
            {
              unsigned int v68 = atomic_load(v67 + 2);
              if (v68 == 1) {
                (*(void (**)(unsigned int *))(*(void *)v67 + 248))(v67);
              }
              else {
                atomic_fetch_add((atomic_uint *volatile)v67 + 2, 0xFFFFFFFF);
              }
            }
            a2 = v109;
          }
        }
        int64_t v55 = v56 - 1;
      }
      while (v56);
      uint64_t v69 = (unint64_t)v13 >> 3;
      while (1)
      {
        v110 = a2;
        uint64_t v70 = 0;
        uint64_t v71 = *v11;
        *uint64_t v11 = 0;
        uint64_t v72 = v69 - 2;
        uint64_t v106 = v71;
        if (v69 < 2) {
          uint64_t v72 = v69 - 1;
        }
        uint64_t v73 = v72 >> 1;
        uint64_t v74 = v11;
        do
        {
          char v75 = (unsigned int **)v74;
          v74 += v70 + 1;
          uint64_t v76 = 2 * v70;
          uint64_t v70 = (2 * v70) | 1;
          uint64_t v77 = v76 + 2;
          if (v76 + 2 < v69 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
          {
            ++v74;
            uint64_t v70 = v77;
          }
          uint64_t v78 = (unsigned int *)*v74;
          uint64_t *v74 = 0;
          int v79 = *v75;
          *char v75 = v78;
          if (v79)
          {
            unsigned int v80 = atomic_load(v79 + 2);
            if (v80 == 1) {
              (*(void (**)(unsigned int *))(*(void *)v79 + 248))(v79);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)v79 + 2, 0xFFFFFFFF);
            }
          }
        }
        while (v70 <= v73);
        char v81 = v110 - 1;
        if (v74 == v110 - 1)
        {
          float result = *v74;
          uint64_t v85 = v69 - 1;
          uint64_t *v74 = v106;
          if (result)
          {
            unsigned int v96 = atomic_load((unsigned int *)(result + 8));
            if (v96 == 1) {
              float result = (*(uint64_t (**)(uint64_t))(*(void *)result + 248))(result);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
            }
          }
        }
        else
        {
          uint64_t v82 = *v81;
          uint64_t *v81 = 0;
          float v83 = (unsigned int *)*v74;
          uint64_t *v74 = v82;
          if (v83)
          {
            unsigned int v84 = atomic_load(v83 + 2);
            if (v84 == 1) {
              (*(void (**)(unsigned int *))(*(void *)v83 + 248))(v83);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)v83 + 2, 0xFFFFFFFF);
            }
          }
          float result = *v81;
          uint64_t v85 = v69 - 1;
          uint64_t *v81 = v106;
          if (result)
          {
            unsigned int v86 = atomic_load((unsigned int *)(result + 8));
            if (v86 == 1) {
              float result = (*(uint64_t (**)(uint64_t))(*(void *)result + 248))(result);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
            }
          }
          uint64_t v87 = (char *)(v74 + 1) - (char *)v11;
          if (v87 >= 9)
          {
            unint64_t v88 = (unint64_t)((v87 >> 3) - 2) >> 1;
            uint64_t v89 = &v11[v88];
            float result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
            if (result)
            {
              char v90 = (unsigned int *)*v74;
              uint64_t *v74 = 0;
              uint64_t v115 = (uint64_t)v90;
              while (1)
              {
                std::string v91 = v89;
                uint64_t v92 = *v89;
                uint64_t *v89 = 0;
                long long v93 = (unsigned int *)*v74;
                uint64_t *v74 = v92;
                if (v93)
                {
                  unsigned int v94 = atomic_load(v93 + 2);
                  if (v94 != 1)
                  {
                    atomic_fetch_add((atomic_uint *volatile)v93 + 2, 0xFFFFFFFF);
                    if (!v88) {
                      goto LABEL_160;
                    }
                    goto LABEL_159;
                  }
                  (*(void (**)(unsigned int *))(*(void *)v93 + 248))(v93);
                }
                if (!v88) {
                  goto LABEL_160;
                }
LABEL_159:
                unint64_t v88 = (v88 - 1) >> 1;
                uint64_t v89 = &v11[v88];
                uint64_t v74 = v91;
                if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
                {
LABEL_160:
                  float result = *v91;
                  uint64_t *v91 = v115;
                  if (result)
                  {
                    unsigned int v95 = atomic_load((unsigned int *)(result + 8));
                    if (v95 == 1) {
                      (*(void (**)(uint64_t))(*(void *)result + 248))(result);
                    }
                    else {
                      atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
                    }
                    float result = 0;
                  }
                  break;
                }
              }
            }
          }
        }
        BOOL v97 = v69 <= 2;
        uint64_t v69 = v85;
        a2 = v110 - 1;
        if (v97) {
          return result;
        }
      }
    }
    unsigned int v15 = &v12[v14 >> 1];
    if ((unint64_t)v13 >= 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, &v12[v14 >> 1], v107, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12 + 1, v15 - 1, v105, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12 + 2, &v12[(v14 >> 1) + 1], v104, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v15 - 1, &v12[v14 >> 1], &v12[(v14 >> 1) + 1], a3);
      uint64_t v16 = *v12;
      *uint64_t v12 = *v15;
      *unsigned int v15 = v16;
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(&v12[v14 >> 1], v12, v107, a3);
    }
    --a4;
    a2 = v109;
    if (a5 & 1) != 0 || ((*(uint64_t (**)(void))(*(void *)a3 + 16))())
    {
      uint64_t v17 = *v12;
      *uint64_t v12 = 0;
      uint64_t v111 = v17;
      uint64_t v18 = v12;
      do
        unsigned int v19 = v18++;
      while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      uint64_t v20 = v109;
      if (v19 == v12)
      {
        uint64_t v20 = v109;
        do
        {
          if (v18 >= v20) {
            break;
          }
          --v20;
        }
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
      }
      else
      {
        do
          --v20;
        while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
      }
      if (v18 < v20)
      {
        BOOL v21 = v18;
        float32x2_t v22 = v20;
        do
        {
          uint64_t v23 = *v21;
          *BOOL v21 = *v22;
          uint64_t *v22 = v23;
          do
            unsigned int v19 = v21++;
          while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
          do
            --v22;
          while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
        }
        while (v21 < v22);
      }
      if (v19 != v11)
      {
        uint64_t v24 = *v19;
        uint64_t *v19 = 0;
        int v25 = (unsigned int *)*v11;
        *uint64_t v11 = v24;
        if (v25)
        {
          unsigned int v26 = atomic_load(v25 + 2);
          if (v26 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v25 + 248))(v25);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF);
          }
        }
      }
      float v27 = (unsigned int *)*v19;
      uint64_t *v19 = v111;
      if (v27)
      {
        unsigned int v28 = atomic_load(v27 + 2);
        if (v28 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v27 + 248))(v27);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v27 + 2, 0xFFFFFFFF);
        }
      }
      if (v18 < v20)
      {
LABEL_38:
        float result = std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(v11, v19, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v19 + 1;
      }
      else
      {
        BOOL v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v11, v19, a3);
        uint64_t v12 = v19 + 1;
        float result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v19 + 1, v109, a3);
        if (result)
        {
          a2 = v19;
          if (v29) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v29) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      uint64_t v30 = *v12;
      *uint64_t v12 = 0;
      uint64_t v112 = v30;
      if ((*(uint64_t (**)(void))(*(void *)a3 + 16))())
      {
        do
          ++v12;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
      }
      else
      {
        unint64_t v31 = v12 + 1;
        do
        {
          uint64_t v12 = v31;
          if (v31 >= v109) {
            break;
          }
          int v32 = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
          unint64_t v31 = v12 + 1;
        }
        while (!v32);
      }
      unsigned int v33 = v109;
      if (v12 < v109)
      {
        unsigned int v33 = v109;
        do
          --v33;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      }
      while (v12 < v33)
      {
        uint64_t v34 = *v12;
        *uint64_t v12 = *v33;
        *unsigned int v33 = v34;
        do
          ++v12;
        while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
        do
          --v33;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      }
      unsigned int v35 = (unsigned int **)(v12 - 1);
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11)
      {
        uint64_t v36 = *v35;
        *unsigned int v35 = 0;
        int v37 = (unsigned int *)*v11;
        *uint64_t v11 = (uint64_t)v36;
        if (v37)
        {
          unsigned int v38 = atomic_load(v37 + 2);
          BOOL v5 = v38 != 0;
          BOOL v6 = v38 == 1;
          if (v38 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v37 + 248))(v37);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v37 + 2, 0xFFFFFFFF);
          }
        }
      }
      float32x2_t v39 = *v35;
      *unsigned int v35 = (unsigned int *)v112;
      if (v39)
      {
        unsigned int v40 = atomic_load(v39 + 2);
        BOOL v5 = v40 != 0;
        BOOL v6 = v40 == 1;
        if (v40 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v39 + 248))(v39);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v39 + 2, 0xFFFFFFFF);
        }
      }
      float result = 0;
      a5 = 0;
    }
  }
  float v42 = v12 + 1;
  BOOL v44 = v12 == a2 || v42 == a2;
  if ((a5 & 1) == 0)
  {
    if (!v44)
    {
      do
      {
        uint64_t v98 = v42;
        float result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
        if (result)
        {
          int v99 = 0;
          uint64_t v100 = *v98;
          uint64_t *v98 = 0;
          uint64_t v116 = v100;
          while (1)
          {
            uint64_t v101 = *v11;
            *uint64_t v11 = 0;
            v11[1] = v101;
            if (v99)
            {
              unsigned int v102 = atomic_load(v99 + 2);
              if (v102 == 1) {
                (*(void (**)(unsigned int *))(*(void *)v99 + 248))(v99);
              }
              else {
                atomic_fetch_add((atomic_uint *volatile)v99 + 2, 0xFFFFFFFF);
              }
            }
            if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
              break;
            }
            int v99 = (unsigned int *)*v11--;
          }
          float result = *v11;
          *uint64_t v11 = v116;
          if (result)
          {
            unsigned int v103 = atomic_load((unsigned int *)(result + 8));
            if (v103 == 1) {
              (*(void (**)(uint64_t))(*(void *)result + 248))(result);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
            }
            float result = 0;
          }
        }
        float v42 = v98 + 1;
        uint64_t v11 = v98;
      }
      while (v98 + 1 != a2);
    }
    return result;
  }
  if (v44) {
    return result;
  }
  uint64_t v45 = 0;
  while (2)
  {
    std::string v46 = v42;
    float result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
    if (!result) {
      goto LABEL_102;
    }
    uint64_t v47 = 0;
    uint64_t v48 = *v46;
    uint64_t *v46 = 0;
    uint64_t v113 = v48;
    uint64_t v49 = v45;
    while (2)
    {
      uint64_t v50 = (unsigned int **)((char *)v12 + v49);
      uint64_t v51 = *(unsigned int **)((char *)v12 + v49);
      *uint64_t v50 = 0;
      v50[1] = v51;
      if (!v47)
      {
LABEL_91:
        if (!v49) {
          break;
        }
        goto LABEL_94;
      }
      unsigned int v52 = atomic_load(v47 + 2);
      if (v52 == 1)
      {
        (*(void (**)(unsigned int *))(*(void *)v47 + 248))(v47);
        goto LABEL_91;
      }
      atomic_fetch_add((atomic_uint *volatile)v47 + 2, 0xFFFFFFFF);
      if (v49)
      {
LABEL_94:
        uint64_t v53 = (uint64_t *)((char *)v12 + v49);
        if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
          goto LABEL_97;
        }
        uint64_t v47 = *v50;
        v49 -= 8;
        continue;
      }
      break;
    }
    uint64_t v53 = v12;
LABEL_97:
    a2 = v109;
    float result = *v53;
    uint64_t *v53 = v113;
    if (result)
    {
      unsigned int v54 = atomic_load((unsigned int *)(result + 8));
      if (v54 == 1) {
        (*(void (**)(uint64_t))(*(void *)result + 248))(result);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
      }
      float result = 0;
    }
LABEL_102:
    float v42 = v46 + 1;
    v45 += 8;
    if (v46 + 1 != a2) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v8 = a2 - 1;
      if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *unint64_t v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a3);
      unint64_t v10 = (unsigned int **)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
    {
      uint64_t v13 = 0;
      unint64_t v14 = *v10;
      *unint64_t v10 = 0;
      float32x2_t v22 = v14;
      for (uint64_t i = v11; ; i -= 8)
      {
        uint64_t v16 = (char *)a1 + i;
        uint64_t v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((void *)v16 + 2) = 0;
        *((void *)v16 + 3) = v17;
        if (v13)
        {
          unsigned int v18 = atomic_load(v13 + 2);
          if (v18 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v13 + 248))(v13);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
          }
        }
        if (i == -16)
        {
          unsigned int v19 = (unsigned int **)a1;
          goto LABEL_17;
        }
        if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
          break;
        }
        uint64_t v13 = (unsigned int *)*((void *)v16 + 2);
      }
      unsigned int v19 = (unsigned int **)((char *)a1 + i + 16);
LABEL_17:
      uint64_t v20 = *v19;
      uint64_t *v19 = v22;
      if (v20)
      {
        unsigned int v21 = atomic_load(v20 + 2);
        if (v21 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v20 + 248))(v20);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF);
        }
      }
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int **)a2;
      }
    }
    v11 += 8;
    if (++v10 == (unsigned int **)a2) {
      return 1;
    }
  }
}

void *TI::Favonius::SearchNode::branch_at_current_bound@<X0>(void *this@<X0>, void *a2@<X8>)
{
  if (this[8])
  {
    uint64_t v3 = this;
    uint64_t v4 = (unsigned int *)this[7];
    this[7] = 0;
    uint64_t v9 = v4;
    (*(void (**)(uint64_t *__return_ptr))(*this + 144))(&v10);
    uint64_t v5 = v10;
    uint64_t v10 = 0;
    if (v9)
    {
      unsigned int v6 = atomic_load(v9 + 2);
      if (v6 == 1) {
        (*(void (**)(void))(*(void *)v9 + 248))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF);
      }
    }
    uint64_t v7 = (unsigned int *)v3[7];
    v3[7] = 0;
    if (v7)
    {
      unsigned int v8 = atomic_load(v7 + 2);
      if (v8 == 1) {
        (*(void (**)(unsigned int *))(*(void *)v7 + 248))(v7);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF);
      }
    }
    this = (void *)(*(uint64_t (**)(void *))(*v3 + 48))(v3);
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  return this;
}

uint64_t TI::Favonius::SearchNode::node_at_current_bound@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if (!*(void *)(this + 64) && *(unsigned char *)(this + 148) && *(unsigned char *)(this + 149))
  {
    *(unsigned char *)(this + 149) = 0;
    *(_DWORD *)(this + 24) = -8388608;
    *a2 = this;
    atomic_fetch_add((atomic_uint *volatile)(this + 8), 1u);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

atomic_uint *TI::Favonius::SearchNode::clone_substituting_touch@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(void *)(a1 + 48)) {
    goto LABEL_4;
  }
  BOOL result = (atomic_uint *)(*(uint64_t (**)(void))(**(void **)a2 + 72))();
  if (result)
  {
    atomic_fetch_add(result, 1u);
    goto LABEL_4;
  }
  if (!*(void *)(a1 + 48)) {
LABEL_4:
  }
    operator new();
  *a3 = 0;
  return result;
}

void TI::Favonius::SearchNode::~SearchNode(TI::Favonius::SearchNode *this)
{
  TI::Favonius::SearchNode::~SearchNode(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t vars8;

  *(void *)this = &unk_1F3F75FD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 200);
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 176);
  uint64_t v2 = (unsigned int *)*((void *)this + 16);
  if (v2)
  {
    uint64_t v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = (void *)*((void *)this + 12);
  if (v4 && *((unsigned char *)this + 94) == 1) {
    free(v4);
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 64);
  uint64_t v5 = (unsigned int *)*((void *)this + 7);
  if (v5)
  {
    unsigned int v6 = atomic_load(v5 + 2);
    if (v6 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v5 + 248))(v5);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v7);
  }
  unsigned int v8 = (unsigned int *)*((void *)this + 4);
  if (v8)
  {
    uint64_t v9 = atomic_load(v8 + 2);
    if (v9 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF);
    }
  }

  TI::Favonius::SearchNodeSource::~SearchNodeSource(this);
}

void TI::Favonius::SearchNode::create_root()
{
}

void TI::Favonius::SearchNode::input_string(TI::Favonius::SearchNode *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  TI::Favonius::SearchNode::input_string_recursive(this, (KB::String *)a2, 0);
}

void TI::Favonius::SearchNode::input_string_recursive(TI::Favonius::SearchNode *this, KB::String *a2, unsigned int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)*((void *)this + 4);
  if (!v4) {
    return;
  }
  int v17 = 0x100000;
  unsigned __int16 v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  unsigned int v7 = *((unsigned __int16 *)this + 60);
  if ((v7 & 0xB81) != 0)
  {
    unsigned int v8 = ((v7 >> 7) & 1) + a3;
  }
  else
  {
    TI::Favonius::SearchNode::compute_characters((unsigned __int16 *)&v17, v4[7], *((void *)this + 7));
    unsigned int v9 = v18;
    if (!v18)
    {
      KB::String::compute_length((unsigned __int16 *)&v17);
      unsigned int v9 = v18;
    }
    unsigned int v10 = v9 - a3;
    if (v9 > a3)
    {
      TI::Favonius::SearchNode::input_string_recursive(*((TI::Favonius::SearchNode **)this + 4), a2, 0);
      uint64_t v11 = (char *)v20;
      if (!v20) {
        uint64_t v11 = &v21;
      }
      uint64_t v13 = v11;
      int v14 = 0;
      int v15 = (unsigned __int16)v17;
      unsigned int v16 = 0;
      KB::String::iterator::initialize((uint64_t *)&v13);
      if (v10 <= 1) {
        int v12 = 1;
      }
      else {
        int v12 = v10;
      }
      do
      {
        KB::String::append(a2, v16);
        KB::String::iterator::operator++((uint64_t *)&v13);
        --v12;
      }
      while (v12);
      goto LABEL_16;
    }
    unsigned int v8 = a3 - v9;
    uint64_t v4 = (uint64_t *)*((void *)this + 4);
  }
  TI::Favonius::SearchNode::input_string_recursive((TI::Favonius::SearchNode *)v4, a2, v8);
LABEL_16:
  if (v20)
  {
    if (v19 == 1) {
      free(v20);
    }
  }
}

unsigned __int16 *TI::Favonius::SearchNode::compute_characters(unsigned __int16 *result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    unsigned int v6 = result;
    uint64_t v7 = (**(uint64_t (***)(uint64_t))a3)(a3);
    TI::Favonius::SearchNode::compute_characters(v6, a2, v7);
    unsigned int v8 = (const KB::String *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3) + 8);
    return KB::String::append(v6, v8);
  }
  return result;
}

uint64_t TI::Favonius::SearchNode::unshift_mask(TI::Favonius::SearchNode *this, const TI::Favonius::SearchNode ***a2)
{
  uint64_t v2 = (const TI::Favonius::SearchNode *)a2;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  do
  {
    uint64_t v3 = this;
    this = (TI::Favonius::SearchNode *)*((void *)this + 4);
  }
  while (this && !*((void *)v3 + 2));
  uint64_t v4 = a2[4];
  if (v4)
  {
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = v3;
      unsigned int v8 = v2;
      if (v3)
      {
        uint64_t v3 = (TI::Favonius::SearchNode *)*((void *)v3 + 4);
        if ((*(unsigned int (**)(TI::Favonius::SearchNode *))(*(void *)v7 + 56))(v7) == 2
          && (*(unsigned int (**)(const TI::Favonius::SearchNode *))(*(void *)v2 + 56))(v2) == 1)
        {
          uint64_t v2 = v4[4];
          if (v2) {
            goto LABEL_17;
          }
        }
        if ((*(unsigned int (**)(TI::Favonius::SearchNode *))(*(void *)v7 + 56))(v7) == 1
          && (*(unsigned int (**)(const TI::Favonius::SearchNode *))(*(void *)v8 + 56))(v8) == 2
          && v3 != 0)
        {
          uint64_t v3 = (TI::Favonius::SearchNode *)*((void *)v3 + 4);
        }
      }
      uint64_t v2 = (const TI::Favonius::SearchNode *)v4;
LABEL_17:
      __int16 v10 = *((_WORD *)v8 + 60);
      if ((v10 & 0xB81) != 0)
      {
        if ((v10 & 0x80) != 0)
        {
          ++v5;
        }
        else if (v7 && (*((_WORD *)v8 + 60) & 0x100) != 0)
        {
          uint64_t v6 = v6 | ((*((_WORD *)v7 + 60) & 0x100) == 0);
        }
      }
      else
      {
        int v17 = 0x100000;
        unsigned __int16 v18 = 0;
        char v19 = 0;
        uint64_t v20 = 0;
        char v21 = 0;
        TI::Favonius::SearchNode::compute_characters((unsigned __int16 *)&v17, *((void *)v2 + 7), *((void *)v8 + 7));
        unsigned int v11 = v18;
        if (!v18)
        {
          KB::String::compute_length((unsigned __int16 *)&v17);
          unsigned int v11 = v18;
        }
        if (v5 >= v11) {
          unsigned int v12 = v5 - v11;
        }
        else {
          unsigned int v12 = 0;
        }
        BOOL v13 = v11 >= v5;
        char v14 = v11 - v5;
        if (v13) {
          char v15 = v14;
        }
        else {
          char v15 = 0;
        }
        if (v20 && v19 == 1) {
          free(v20);
        }
        uint64_t v6 = (v6 << v15);
        unsigned int v5 = v12;
      }
      uint64_t v4 = (const TI::Favonius::SearchNode **)*((void *)v2 + 4);
      if (!v4) {
        return v6;
      }
    }
  }
  return 0;
}

float TI::Favonius::SearchNode::prediction_geometric_log_likelihood(TI::Favonius::SearchNode *this, float a2, float a3)
{
  if (*((void *)this + 2))
  {
    unsigned int v4 = *((_DWORD *)this + 41);
    if (v4 >= 5) {
      unsigned int v4 = 5;
    }
    float v5 = TI::Favonius::SearchParameters::k_prediction_costs[v4];
  }
  else
  {
    float v5 = 0.8;
  }
  return (float)(1.0 - a3) * (float)(logf(v5) * a2);
}

float TI::Favonius::SearchNode::long_prediction_geometric_log_likelihood(TI::Favonius::SearchNode *this, int a2, float a3, float a4)
{
  if (a2 < 1)
  {
    float v8 = 0.0;
  }
  else
  {
    unsigned int v7 = *((_DWORD *)this + 41);
    if (v7 >= 5) {
      unsigned int v7 = 5;
    }
    float v8 = logf(TI::Favonius::SearchParameters::k_prediction_costs[v7]) + 0.0;
    if (a2 != 1) {
      float v8 = v8 + (float)((float)(a2 - 1) * -0.22314);
    }
  }
  return (float)(1.0 - a4) * (float)(v8 * a3);
}

unint64_t TI::Favonius::SearchNode::error_correction_type_for_current_word(TI::Favonius::SearchNode *this)
{
  uint64_t v2 = (*(uint64_t (**)(TI::Favonius::SearchNode *))(*(void *)this + 160))(this);
  uint64_t v3 = *((void *)this + 7);
  if (v3 && (*(unsigned int (**)(uint64_t))(*(void *)v3 + 72))(v3))
  {
    unint64_t v4 = *((void *)this + 4);
    if (v4) {
      unint64_t v4 = TI::Favonius::SearchNode::error_correction_type_for_current_word((TI::Favonius::SearchNode *)v4);
    }
    return v4 | v2;
  }
  return v2;
}

unint64_t TI::Favonius::SearchNode::transfer_error_correction_types_to_candidates(TI::Favonius::SearchNode *this, CandidateCollection *a2, uint64_t a3)
{
  unint64_t result = TI::Favonius::SearchNode::error_correction_type_for_current_word(this);
  var1 = a2->var0.var1;
  for (uint64_t i = (Candidate *)((char *)a2->var0.var0 + 1000 * a3); i < var1; uint64_t i = (Candidate *)((char *)i + 1000))
    *(void *)(*((void *)i + 1) + 240 * *(void *)i - 88) = result;
  return result;
}

void TI::Favonius::SearchNode::build_candidates(uint64_t a1, void *a2, void *a3, void *a4)
{
  __int16 v10 = a3;
  unsigned int v7 = a4;
  if (*(void *)(a1 + 56))
  {
    uint64_t v8 = a2[1] - *a2;
    v10[2](v10, a2);
    for (unint64_t i = *a2 + v8; i < a2[1]; i += 1000)
    {
      v7[2](v7, i);
      *(_DWORD *)(i + 776) = *(_DWORD *)(a1 + 40);
    }
  }
}

void TI::Favonius::SearchNode::candidates(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, float a5)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = ___ZNK2TI8Favonius10SearchNode10candidatesEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEf_block_invoke;
  v7[3] = &__block_descriptor_56_e9_v16__0_v8l;
  v7[4] = a1;
  v7[5] = a2;
  v7[6] = a3;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___ZNK2TI8Favonius10SearchNode10candidatesEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEf_block_invoke_2;
  v5[3] = &__block_descriptor_52_e9_v16__0_v8l;
  void v5[4] = a1;
  void v5[5] = a2;
  float v6 = a5;
  TI::Favonius::SearchNode::build_candidates(a1, a4, v7, v5);
}

unint64_t ___ZNK2TI8Favonius10SearchNode10candidatesEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEf_block_invoke(uint64_t a1, CandidateCollection *a2)
{
  uint64_t v3 = 0x1CAC083126E978D5 * ((a2->var0.var1 - a2->var0.var0) >> 3);
  unint64_t v4 = *(TI::Favonius::SearchNode **)(a1 + 32);
  (*(void (**)(void, void, void, CandidateCollection *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *((void *)v4 + 7), *(void *)(a1 + 48), a2);

  return TI::Favonius::SearchNode::transfer_error_correction_types_to_candidates(v4, a2, v3);
}

uint64_t ___ZNK2TI8Favonius10SearchNode10candidatesEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEf_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void, float, float))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2, *(void *)(*(void *)(a1 + 32) + 56), *(float *)(*(void *)(a1 + 32) + 144), *(float *)(a1 + 48));
}

void TI::Favonius::SearchNode::completion_stems(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, float a6)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = ___ZNK2TI8Favonius10SearchNode16completion_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEffb_block_invoke;
  _WORD v8[3] = &__block_descriptor_57_e9_v16__0_v8l;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  char v9 = a5;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  unsigned __int16 v6[2] = ___ZNK2TI8Favonius10SearchNode16completion_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEffb_block_invoke_2;
  void v6[3] = &__block_descriptor_52_e9_v16__0_v8l;
  v6[4] = a1;
  void v6[5] = a2;
  float v7 = a6;
  TI::Favonius::SearchNode::build_candidates(a1, a4, v8, v6);
}

void ___ZNK2TI8Favonius10SearchNode16completion_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEffb_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(void))(**(void **)(v4 + 56) + 168))(*(void *)(v4 + 56)) & 1) == 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(v4 + 56) + 136))(*(void *)(v4 + 56));
    if (v5 && (uint64_t v6 = v5, ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 144))(v5) & 1) == 0))
    {
      (*(void (**)(KB::Candidate **__return_ptr))(**(void **)(v4 + 56) + 120))(v36);
      KB::Word::Word((KB::Word *)&v32, (const KB::String *)v36, &kTITokenIDUNK, 0);
      if (v36[1] && BYTE6(v36[0]) == 1) {
        free(v36[1]);
      }
      v35 |= 0x800000u;
      int v34 = 1065353216;
      int v39 = 0;
      memset(v38, 0, sizeof(v38));
      *(_OWORD *)uint64_t v36 = 0u;
      memset(v37, 0, sizeof(v37));
      (*(void (**)(void, uint64_t, void, KB::Candidate **))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), v6, *(void *)(a1 + 48), v36);
      __int16 v10 = (unsigned __int16 *)v36[0];
      for (unint64_t i = v36[1]; v10 != (unsigned __int16 *)i; v10 += 500)
      {
        KB::Candidate::append(v10, &v32);
        unsigned int v12 = (KB::Candidate *)a2[1];
        unint64_t v13 = a2[2];
        if ((unint64_t)v12 >= v13)
        {
          uint64_t v15 = 0x1CAC083126E978D5 * (((uint64_t)v12 - *a2) >> 3);
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) > 0x4189374BC6A7EFLL) {
            goto LABEL_41;
          }
          unint64_t v17 = 0x1CAC083126E978D5 * ((uint64_t)(v13 - *a2) >> 3);
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0x20C49BA5E353F7) {
            unint64_t v18 = 0x4189374BC6A7EFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          unint64_t v31 = a2 + 2;
          if (v18) {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v18);
          }
          else {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (KB::Candidate *)(v18 + 1000 * v15);
          float v27 = (KB::Candidate **)v18;
          unsigned int v28 = v20;
          unint64_t v30 = v18 + 1000 * v19;
          KB::Candidate::Candidate(v20, (const KB::Candidate *)v10);
          BOOL v29 = (char *)v20 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer(a2, &v27);
          char v14 = (char *)a2[1];
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v27);
        }
        else
        {
          char v14 = (char *)KB::Candidate::Candidate(v12, (const KB::Candidate *)v10) + 1000;
        }
        a2[1] = (uint64_t)v14;
      }
      float v27 = (KB::Candidate **)&v38[1] + 1;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
      float v27 = (KB::Candidate **)v38;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
      float v27 = (KB::Candidate **)v37 + 1;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
      float v27 = v36;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
      char v21 = (KB::Candidate **)&v32;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 56)) {
        return;
      }
      (*(void (**)(size_t *__return_ptr))(**(void **)(v4 + 56) + 120))(&v32);
      KB::Word::Word((KB::Word *)v36, (const KB::String *)&v32, &kTITokenIDUNK, 0);
      if (v33 && BYTE6(v32) == 1) {
        free(v33);
      }
      v40 |= 0x800000u;
      LODWORD(v38[0]) = 1065353216;
      KB::Candidate::Candidate((KB::Candidate *)&v32);
      KB::Candidate::append((unsigned __int16 *)&v32, (size_t *)v36);
      unint64_t v7 = a2[2];
      uint64_t v8 = (KB::Candidate *)a2[1];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v22 = 0x1CAC083126E978D5 * (((uint64_t)v8 - *a2) >> 3);
        if ((unint64_t)(v22 + 1) > 0x4189374BC6A7EFLL) {
LABEL_41:
        }
          abort();
        unint64_t v23 = 0x1CAC083126E978D5 * ((uint64_t)(v7 - *a2) >> 3);
        uint64_t v24 = 2 * v23;
        if (2 * v23 <= v22 + 1) {
          uint64_t v24 = v22 + 1;
        }
        if (v23 >= 0x20C49BA5E353F7) {
          unint64_t v25 = 0x4189374BC6A7EFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        unint64_t v31 = a2 + 2;
        if (v25) {
          unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        float v27 = (KB::Candidate **)v25;
        unsigned int v28 = (KB::Candidate *)(v25 + 1000 * v22);
        unint64_t v30 = v25 + 1000 * v26;
        KB::Candidate::Candidate(v28, (const KB::Candidate *)&v32);
        BOOL v29 = (char *)v28 + 1000;
        std::vector<KB::Candidate>::__swap_out_circular_buffer(a2, &v27);
        char v9 = (char *)a2[1];
        std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v27);
      }
      else
      {
        char v9 = (char *)KB::Candidate::Candidate(v8, (const KB::Candidate *)&v32) + 1000;
      }
      a2[1] = (uint64_t)v9;
      KB::Candidate::~Candidate((KB::Candidate *)&v32);
      char v21 = v36;
    }
    KB::Word::~Word((KB::Word *)v21);
  }
}

uint64_t ___ZNK2TI8Favonius10SearchNode16completion_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEffb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void, float, float))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), a2, *(void *)(*(void *)(a1 + 32) + 56), *(float *)(*(void *)(a1 + 32) + 144), *(float *)(a1 + 48));
}

void TI::Favonius::SearchNode::prediction_stems(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, float a5)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = ___ZNK2TI8Favonius10SearchNode16prediction_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEff_block_invoke;
  v7[3] = &__block_descriptor_56_e9_v16__0_v8l;
  v7[4] = a1;
  v7[5] = a2;
  v7[6] = a3;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___ZNK2TI8Favonius10SearchNode16prediction_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEff_block_invoke_2;
  v5[3] = &__block_descriptor_52_e9_v16__0_v8l;
  void v5[4] = a1;
  void v5[5] = a2;
  float v6 = a5;
  TI::Favonius::SearchNode::build_candidates(a1, a4, v7, v5);
}

void ___ZNK2TI8Favonius10SearchNode16prediction_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEff_block_invoke(uint64_t a1, uint64_t a2)
{
  int v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  (*(void (**)(void, void, void, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 56), *(void *)(a1 + 48), a2);
  uint64_t v4 = *(KB::Candidate **)a2;
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    unint64_t v5 = *(void *)(a2 + 16);
    if ((unint64_t)v4 >= v5)
    {
      v14[4] = (void **)(a2 + 16);
      unint64_t v7 = 0x1CAC083126E978D5 * ((uint64_t)(v5 - (void)v4) >> 3);
      unint64_t v8 = 0x395810624DD2F1AALL * ((uint64_t)(v5 - (void)v4) >> 3);
      if (v8 <= 1) {
        unint64_t v8 = 1;
      }
      if (v7 >= 0x20C49BA5E353F7) {
        unint64_t v9 = 0x4189374BC6A7EFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      v14[0] = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v9);
      v14[1] = v14[0];
      v14[3] = &v14[0][125 * v10];
      bzero(v14[0], 0x3E8uLL);
      KB::Candidate::Candidate((KB::Candidate *)v14[0]);
      unsigned __int16 v14[2] = v14[0] + 125;
      std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a2, v14);
      float v6 = *(char **)(a2 + 8);
      std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v14);
    }
    else
    {
      bzero(*(void **)a2, 0x3E8uLL);
      KB::Candidate::Candidate(v4);
      float v6 = (char *)v4 + 1000;
    }
    *(void *)(a2 + 8) = v6;
    KB::LanguageModelContext::operator=((uint64_t)(v6 - 216), *(uint64_t **)(a1 + 48));
  }
  v14[0] = (void **)&v12[1] + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v14);
  v14[0] = (void **)v12;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v14);
  v14[0] = (void **)&v11[1] + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v14);
  v14[0] = (void **)v11;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v14);
}

uint64_t ___ZNK2TI8Favonius10SearchNode16prediction_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEff_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void, float, float))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2, *(void *)(*(void *)(a1 + 32) + 56), *(float *)(*(void *)(a1 + 32) + 144), *(float *)(a1 + 48));
}

float TI::Favonius::SearchNode::set_scores_from_language_and_geometry_scores(TI::Favonius::SearchNode *this)
{
  *((unsigned char *)this + 148) = (*(uint64_t (**)(TI::Favonius::SearchNode *))(*(void *)this + 128))(this);
  float result = *((float *)this + 38);
  uint64_t v3 = (const float *)((char *)this + 144);
  float32x2_t v4 = vld1_dup_f32(v3);
  float32x2_t v5 = vmla_n_f32(v4, *(float32x2_t *)((char *)this + 136), result);
  *(float32x2_t *)((char *)this + 156) = v5;
  *((_DWORD *)this + 6) = v5.i32[0];
  return result;
}

uint64_t TI::Favonius::SearchNode::cached_language_extensions(TI::Favonius::SearchNode *this)
{
  if (KB::SetInputHasSupplementalPrefixForScope::s_inputHasSupplementalPrefix) {
    return (uint64_t)this + 200;
  }
  else {
    return (uint64_t)this + 176;
  }
}

unint64_t *TI::Favonius::SearchNode::get_language_extensions(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = 200;
  if (KB::SetInputHasSupplementalPrefixForScope::s_inputHasSupplementalPrefix)
  {
    float32x2_t v4 = (unint64_t *)(a1 + 200);
  }
  else
  {
    uint64_t v3 = 176;
    float32x2_t v4 = (unint64_t *)(a1 + 176);
  }
  if (!*(void *)(a1 + v3)) {
    (*(void (**)(void, unint64_t *))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56), v4);
  }

  return WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::operator=(a2, v4);
}

void TI::Favonius::SearchNode::clear_cached_language_extensions(TI::Favonius::SearchNode *this)
{
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity((uint64_t)this + 176);

  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity((uint64_t)this + 200);
}

void TI::Favonius::SearchNode::create_key_sequence_extensions(uint64_t a1, void *a2, uint64_t *a3)
{
  if (a1) {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  }
  unint64_t v6 = a2[2];
  unint64_t v7 = (uint64_t *)a2[1];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = (uint64_t *)*a2;
    uint64_t v10 = ((uint64_t)v7 - *a2) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    int v35 = a2 + 2;
    if (v13)
    {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v13);
      unint64_t v9 = (uint64_t *)*a2;
      unint64_t v7 = (uint64_t *)a2[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (void *)(v13 + 8 * v10);
    unint64_t v16 = v13 + 8 * v14;
    unint64_t v34 = v16;
    *uint64_t v15 = a1;
    *((void *)&v33 + 1) = v15 + 1;
    if (v7 == v9)
    {
      unint64_t v8 = v15 + 1;
    }
    else
    {
      do
      {
        uint64_t v17 = *--v7;
        *unint64_t v7 = 0;
        *--uint64_t v15 = v17;
      }
      while (v7 != v9);
      unint64_t v8 = (void *)*((void *)&v33 + 1);
      unint64_t v16 = v34;
    }
    long long v18 = *(_OWORD *)a2;
    *a2 = v15;
    a2[1] = v8;
    long long v33 = v18;
    unint64_t v19 = a2[2];
    a2[2] = v16;
    unint64_t v34 = v19;
    size_t v32 = (void **)v18;
    std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v32);
  }
  else
  {
    *unint64_t v7 = a1;
    unint64_t v8 = v7 + 1;
  }
  a2[1] = v8;
  uint64_t v20 = *a3;
  uint64_t v27 = a3[1];
  if (*a3 != v27)
  {
    do
    {
      unint64_t v30 = (uint64_t *)*a2;
      char v21 = v30;
      long long v22 = *(_OWORD *)(a2 + 1);
      *a2 = 0;
      a2[1] = 0;
      long long v31 = v22;
      a2[2] = 0;
      std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::reserve(a2, (uint64_t)(v22 - (void)v21) >> 3);
      uint64_t v24 = v30;
      unint64_t v23 = (uint64_t *)v31;
      unsigned int v28 = (uint64_t *)v31;
      while (v24 != v23)
      {
        memset(v29, 0, sizeof(v29));
        uint64_t v25 = *v24;
        uint64_t v26 = *(void ***)(*(void *)(v20 + 8) + 8);
        size_t v32 = v26;
        if (v26) {
          atomic_fetch_add((atomic_uint *volatile)v26, 1u);
        }
        TI::Favonius::SearchNode::get_language_extensions(v25, v29, (uint64_t *)&v32);
        if (v32) {
          WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v32);
        }
        if (v29[0]) {
          operator new();
        }
        WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)v29);
        ++v24;
        unint64_t v23 = v28;
      }
      size_t v32 = (void **)&v30;
      std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v32);
      v20 += 16;
    }
    while (v20 != v27);
  }
}

void *std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::reserve(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    uint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    uint64_t v15 = result + 2;
    float32x2_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a2);
    unint64_t v7 = *v2;
    unint64_t v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      unint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      unint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)unint64_t v6 = 0;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }
    const TI::Favonius::SearchNode *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v13 = v10;
    unint64_t v11 = v2[2];
    v2[2] = &v4[8 * v5];
    uint64_t v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

TI::Favonius::SearchNode *TI::Favonius::SearchNode::append_keys_for_debugging(TI::Favonius::SearchNode *this, KB::String *a2)
{
  float result = (TI::Favonius::SearchNode *)*((void *)this + 4);
  if (result)
  {
    TI::Favonius::SearchNode::append_keys_for_debugging(result, a2);
    uint64_t v5 = *(uint64_t (**)(TI::Favonius::SearchNode *, KB::String *))(*(void *)this + 104);
    return (TI::Favonius::SearchNode *)v5(this, a2);
  }
  return result;
}

void TI::Favonius::SearchNode::append_debug_data(TI::Favonius::SearchNode *this, __CFString *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v28 = 0x100000;
  __int16 v29 = 0;
  char v30 = 0;
  long long v31 = 0;
  char v32 = 0;
  TI::Favonius::SearchNode::input_string_recursive(this, (KB::String *)&v28, 0);
  int v23 = 0x100000;
  __int16 v24 = 0;
  char v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  float32x2_t v4 = v31;
  if (!v31) {
    float32x2_t v4 = &v32;
  }
  uint64_t v20 = v4;
  LODWORD(v21) = 0;
  HIDWORD(v21) = (unsigned __int16)v28;
  unsigned int v22 = 0;
  KB::String::iterator::initialize((uint64_t *)&v20);
  while (v22 == 10)
  {
    KB::String::append((unsigned __int16 *)&v23, "<BR>", 0xFFFFuLL);
LABEL_8:
    KB::String::iterator::operator++((uint64_t *)&v20);
  }
  if (v22)
  {
    KB::String::append((KB::String *)&v23, v22);
    goto LABEL_8;
  }
  LODWORD(v20) = 0x100000;
  WORD2(v20) = 0;
  BYTE6(v20) = 0;
  char v21 = 0;
  LOBYTE(v22) = 0;
  TI::Favonius::SearchNode::append_keys_for_debugging(this, (KB::String *)&v20);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 7) + 224))(&v17);
  int v12 = 0x100000;
  __int16 v13 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v5 = v26;
  if (!v26) {
    uint64_t v5 = &v27;
  }
  if (!(_WORD)v23) {
    uint64_t v5 = "";
  }
  unint64_t v6 = (const char *)v21;
  if (!v21) {
    unint64_t v6 = (const char *)&v22;
  }
  if ((_WORD)v20) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = "";
  }
  unint64_t v8 = (const char *)v18;
  if (!v18) {
    unint64_t v8 = (const char *)&v19;
  }
  if ((_WORD)v17) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = "";
  }
  KB::String::append_format((KB::String *)&v12, "[%s] [L %7.3f + G %7.3f = %7.3f] [word %7.3f] [keys %s] [typing %s]\n", v5, *((float *)this + 34), *((float *)this + 36), *((float *)this + 39), *((float *)this + 40), v7, v9);
  int64x2_t v10 = (const char *)v15;
  if (!v15) {
    int64x2_t v10 = &v16;
  }
  if ((_WORD)v12) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = "";
  }
  CFStringAppendCString(a2, v11, 0x8000100u);
  if (v15 && v14 == 1) {
    free(v15);
  }
  if (v18 && BYTE6(v17) == 1) {
    free(v18);
  }
  if (v21 && BYTE6(v20) == 1) {
    free(v21);
  }
  if (v26 && v25 == 1) {
    free(v26);
  }
  if (v31)
  {
    if (v30 == 1) {
      free(v31);
    }
  }
}

void TI::Favonius::SearchNode::debug_data(TI::Favonius::SearchNode *this@<X0>, uint64_t a2@<X8>)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  TI::Favonius::SearchNode::append_debug_data(this, Mutable);
  KB::utf8_string(Mutable, a2);
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t TI::Favonius::UnigramTypingModel::dictionary(TI::Favonius::UnigramTypingModel *this)
{
  return (uint64_t)this + 24;
}

void TI::Favonius::UnigramTypingModel::~UnigramTypingModel(TI::Favonius::UnigramTypingModel *this)
{
  TI::Favonius::UnigramTypingModel::~UnigramTypingModel(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  void *v2;
  void *v3;
  unsigned int *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F3F760A8;
  uint64_t v2 = (void *)((char *)this + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>>>::__deallocate_node(*((void **)this + 10));
  uint64_t v3 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    operator delete(v3);
  }
  std::__function::__value_func<KB::ByteString ()(KB::String const&)>::~__value_func[abi:nn180100](v2);
  float32x2_t v4 = (unsigned int *)*((void *)this + 3);
  if (v4) {
    WTF::RefCounted<KB::DictionaryContainer>::deref(v4);
  }

  TI::Favonius::ZephyrTypingModel::~ZephyrTypingModel(this);
}

void std::__hash_table<std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = v1[3];
      if (v3) {
        WTF::RefCounted<TI::Favonius::Key>::deref(v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

unsigned int *TI::Favonius::ZephyrTypingModel::set_input_segment_filter(uint64_t a1, uint64_t *a2)
{
  float result = *(unsigned int **)(a1 + 16);
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v4;
  if (result)
  {
    unsigned int v5 = atomic_load(result + 2);
    if (v5 == 1) {
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

uint64_t TI::Favonius::UnigramTypingModel::key_factory(TI::Favonius::UnigramTypingModel *this)
{
  return (uint64_t)this + 32;
}

uint64_t TI::Favonius::UnigramTypingModel::all_words_allow_restart(TI::Favonius::UnigramTypingModel *this)
{
  return *(unsigned __int8 *)(*(void *)(*(uint64_t (**)(TI::Favonius::UnigramTypingModel *))(*(void *)this + 48))(this)
                            + 64);
}

void TI::Favonius::UnigramTypingModel::root_hypotheses()
{
}

void TI::Favonius::UnigramTypingModel::Hypothesis::Hypothesis(void *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = a3;
  if (a3) {
    atomic_fetch_add((atomic_uint *volatile)a3 + 2, 1u);
  }
  TI::Favonius::ZephyrTypingModel::Hypothesis::Hypothesis((uint64_t)a1, (uint64_t *)&v5);
  if (v5)
  {
    unsigned int v4 = atomic_load(v5 + 2);
    if (v4 == 1) {
      (*(void (**)(void))(*(void *)v5 + 40))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF);
    }
  }
  *a1 = &unk_1F3F760F0;
  int v6 = 0x100000;
  __int16 v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  operator new();
}

uint64_t *TI::Favonius::UnigramTypingModel::extend_hypotheses(uint64_t a1, unint64_t *a2, unsigned __int16 *a3, unsigned int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*((void *)a3 + 1)) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  else {
    uint64_t v7 = (uint64_t)(a3 + 8);
  }
  uint64_t v30 = v7;
  int v8 = *a3;
  int v31 = 0;
  int v32 = v8;
  unsigned int v33 = 0;
  KB::String::iterator::initialize(&v30);
  uint64_t v26 = v7;
  int v27 = v8;
  int v28 = v8;
  int v29 = 0;
  float result = KB::String::iterator::initialize(&v26);
  int v10 = v27;
  if (v31 != v27)
  {
    while (1)
    {
      unsigned int v11 = v33;
      long long v24 = *(_OWORD *)a2;
      unint64_t v12 = a2[2];
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      unint64_t v25 = v12;
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      KB::String::String((uint64_t)v35, v11);
      TI::Favonius::KeyFactory::create_key(v13);
      uint64_t v23 = (uint64_t)v34;
      if (v36 && v35[6] == 1) {
        free(v36);
      }
      if ((void)v24)
      {
        char v14 = (uint64_t *)*((void *)&v24 + 1);
        uint64_t v15 = 8 * v24;
        do
        {
          uint64_t v16 = *v14++;
          (*(void (**)(uint64_t, unint64_t *, uint64_t *))(*(void *)v16 + 40))(v16, a2, &v23);
          v15 -= 8;
        }
        while (v15);
      }
      unint64_t v17 = *a2;
      if (!*a2) {
        break;
      }
      if (a4 && v17 > a4)
      {
        uint64_t v18 = a2[1];
        unint64_t v34 = &__block_literal_global_12194;
        std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(v18, (uint64_t *)(v18 + 8 * v17), (uint64_t)&v34, 126 - 2 * __clz(v17), 1);
        if (*a2 >= a4)
        {
          WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct((unsigned int *)(a2[1] + 8 * a4), (unsigned int **)(a2[1] + 8 * *a2));
        }
        else
        {
          unint64_t v19 = a2[2];
          if (v19 < a4)
          {
            if (v19 >= 0x100) {
              unint64_t v20 = v19 + (v19 >> 1);
            }
            else {
              unint64_t v20 = 2 * v19;
            }
            if (v20 <= a4) {
              unint64_t v21 = a4;
            }
            else {
              unint64_t v21 = v20;
            }
            WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v21);
          }
          unint64_t v22 = a2[1];
          if (v22) {
            bzero((void *)(v22 + 8 * *a2), 8 * a4 - 8 * *a2);
          }
        }
        *a2 = a4;
      }
      if (v23) {
        WTF::RefCounted<TI::Favonius::Key>::deref(v23);
      }
      WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)&v24);
      float result = KB::String::iterator::operator++(&v30);
      if (v31 == v10) {
        return result;
      }
    }
    if (v23) {
      WTF::RefCounted<TI::Favonius::Key>::deref(v23);
    }
    return (uint64_t *)WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)&v24);
  }
  return result;
}

BOOL ___ZN2TI8Favonius18UnigramTypingModel17extend_hypothesesERN3WTF6VectorINS2_6RefPtrINS0_16TypingHypothesisEEELm0EEERKN2KB6StringEj_block_invoke(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  float v4 = (*(float (**)(void))(**(void **)a2 + 88))();
  return v4 > (*(float (**)(uint64_t))(*(void *)v3 + 88))(v3);
}

void TI::Favonius::UnigramTypingModel::Hypothesis::create()
{
}

{
  operator new();
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::Hypothesis(uint64_t a1, const TI::Favonius::UnigramTypingModel::Hypothesis *a2, uint64_t *a3, atomic_uint **a4, int a5)
{
  char v5 = a5;
  uint64_t v9 = (void *)TI::Favonius::ZephyrTypingModel::Hypothesis::Hypothesis(a1, (uint64_t)a2, a4, a5);
  *uint64_t v9 = &unk_1F3F760F0;
  uint64_t v10 = *a3;
  *a3 = 0;
  unsigned int v11 = (atomic_uint *)*((void *)a2 + 11);
  v9[10] = v10;
  v9[11] = v11;
  if (v11) {
    atomic_fetch_add(v11, 1u);
  }
  *(void *)(a1 + 96) = 0xFF8000003F800000;
  if (*(unsigned char *)(a1 + 57))
  {
    if ((v5 & 1) == 0
      && TI::Favonius::UnigramTypingModel::Hypothesis::ends_with_word_apostrophe_word((TI::Favonius::UnigramTypingModel::Hypothesis *)a1))
    {
      uint64_t v12 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = 0;
      float v13 = 0.0000004;
      if (!v12) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    float v13 = 1.0;
    if ((*(_WORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) + 60) & 0x80) != 0)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      uint64_t v15 = *(atomic_uint **)(v14 + 80);
      if (v15) {
        atomic_fetch_add(v15, 1u);
      }
      uint64_t v16 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = v15;
      if (v16) {
        WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v16);
      }
      float v17 = *(float *)(v14 + 96);
      if (v17 <= 0.0) {
        float v13 = 1.0;
      }
      else {
        float v13 = 1.0 / v17;
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    float v13 = 1.0;
    if (v12) {
LABEL_17:
    }
      WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v12);
  }
LABEL_18:
  TI::Favonius::UnigramTypingModel::Hypothesis::unigram_probability_of_letter_key((TI::Favonius::UnigramTypingModel::Hypothesis *)a1, a2);
  *(float *)(a1 + 96) = v13 * v18;
  return a1;
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::ends_with_word_apostrophe_word(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  if ((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 144))(this)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 136))(this);
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if ((*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 136))(v3);
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (((*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result) & 1) != 0
    || ((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 168))(this) & 1) != 0)
  {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 168))(v3);
  if (!result) {
    return result;
  }
  if (*(_DWORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3) + 56) != 39) {
    return 0;
  }
  else {
    return (*(unsigned int (**)(uint64_t))(*(void *)v4 + 168))(v4) ^ 1;
  }
}

void TI::Favonius::UnigramTypingModel::Hypothesis::unigram_probability_of_letter_key(TI::Favonius::UnigramTypingModel::Hypothesis *this, const TI::Favonius::UnigramTypingModel::Hypothesis *a2)
{
  if ((*(_WORD *)(*(void *)(*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 16))(this)
                 + 60) & 0xE) != 0)
  {
    uint64_t v4 = *((void *)this + 10);
    if (v4)
    {
      if (v4 != *((void *)a2 + 10)) {
        (*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 168))(this);
      }
    }
  }
  if (((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 72))(this) & 1) == 0
    && *((void *)a2 + 10)
    && ((*(uint64_t (**)(const TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)a2 + 168))(a2) & 1) == 0)
  {
    (*(float (**)(const TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)a2 + 80))(a2);
  }
}

double TI::Favonius::UnigramTypingModel::Hypothesis::probability_of_unigram_prefix(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  char v2 = (*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 168))(this);
  LODWORD(result) = 1.0;
  if ((v2 & 1) == 0)
  {
    uint64_t v4 = *((void *)this + 10);
    if (v4) {
      LODWORD(result) = *(_DWORD *)(v4 + 100);
    }
    else {
      return 0.0;
    }
  }
  return result;
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::extend(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v6 = (atomic_uint *)a1[10];
  if (v6)
  {
    atomic_fetch_add(v6, 1u);
    __int16 v7 = *(_WORD *)(*a2 + 60);
    if ((a3 & 1) == 0) {
      goto LABEL_3;
    }
    if (((v7 & 8) != 0 || (v7 & 0x30) == 0) && (v7 & 0xB81) == 0 && (v7 & 0x40) == 0)
    {
      uint64_t v12 = *a2;
      unsigned int v13 = *(unsigned __int16 *)(*a2 + 12);
      if (!*(_WORD *)(*a2 + 12))
      {
        KB::String::compute_length((unsigned __int16 *)(v12 + 8));
        unsigned int v13 = *(unsigned __int16 *)(v12 + 12);
      }
      if (v13 >= 2)
      {
        int v19 = 0x100000;
        __int16 v20 = 0;
        char v21 = 0;
        unint64_t v22 = 0;
        char v23 = 0;
        if (a3)
        {
          (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 120))(&v17, a1);
          KB::String::operator=((uint64_t)&v19, (KB::String *)&v17);
          if (v18)
          {
            if (BYTE6(v17) == 1) {
              free(v18);
            }
          }
        }
        KB::String::append((unsigned __int16 *)&v19, (const KB::String *)(*a2 + 8));
        operator new();
      }
      if (*(_WORD *)(*a2 + 40)) {
        operator new();
      }
    }
    char v14 = 0;
    uint64_t v16 = v6;
    atomic_fetch_add(v6, 1u);
  }
  else
  {
    if ((a3 & 1) == 0)
    {
LABEL_3:
      int v8 = (TI::Favonius::DictionaryHypothesis *)a1[10];
      if (v8)
      {
        TI::Favonius::DictionaryHypothesis::affix_sentinel(v8, (uint64_t)&v19);
      }
      else
      {
        int v19 = 0x100000;
        __int16 v20 = 0;
        char v21 = 0;
        unint64_t v22 = 0;
        char v23 = 0;
      }
      operator new();
    }
    int v6 = 0;
    uint64_t v16 = 0;
    char v14 = 1;
  }
  (*(void (**)(void *, atomic_uint **, uint64_t *, uint64_t))(*a1 + 272))(a1, &v16, a2, a3);
  uint64_t result = (uint64_t)v16;
  if (v16) {
    uint64_t result = WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v16);
  }
  if ((v14 & 1) == 0) {
    return WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v6);
  }
  return result;
}

void TI::Favonius::UnigramTypingModel::Hypothesis::next_root_string(TI::Favonius::UnigramTypingModel::Hypothesis *this@<X0>, uint64_t a2@<X8>)
{
  char v2 = (TI::Favonius::DictionaryHypothesis *)*((void *)this + 10);
  if (v2)
  {
    TI::Favonius::DictionaryHypothesis::affix_sentinel(v2, a2);
  }
  else
  {
    *(_DWORD *)a2 = 0x100000;
    *(_WORD *)(a2 + 4) = 0;
    *(unsigned char *)(a2 + 6) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void TI::Favonius::UnigramTypingModel::Hypothesis::~Hypothesis(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  TI::Favonius::UnigramTypingModel::Hypothesis::~Hypothesis(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F3F760F0;
  char v2 = (unsigned int *)*((void *)this + 11);
  if (v2) {
    WTF::RefCounted<KB::DictionaryContainer>::deref(v2);
  }
  uint64_t v3 = *((void *)this + 10);
  if (v3) {
    WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v3);
  }

  TI::Favonius::ZephyrTypingModel::Hypothesis::~Hypothesis(this);
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::clone_with_key@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void *))*a1)(a1);
  __int16 v7 = (atomic_uint *)a1[10];
  unsigned int v13 = v7;
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  uint64_t v12 = v8;
  uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, atomic_uint **, uint64_t *, uint64_t))(*(void *)v6 + 272))(&v14, v6, &v13, &v12, v9);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  *a3 = v10;
  if (v12) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v12);
  }
  uint64_t result = (uint64_t)v13;
  if (v13) {
    return WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v13);
  }
  return result;
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::clone_with_parent(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1)) {
    uint64_t v4 = (*(unsigned int (**)(uint64_t))(*(void *)a2 + 144))(a2) ^ 1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v5, v4);
}

BOOL TI::Favonius::UnigramTypingModel::Hypothesis::ends_with_separator(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  BOOL result = 1;
  if (!*((void *)this + 10) || !LXCursorIsRoot())
  {
    if ((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 72))(this)) {
      return 0;
    }
    uint64_t v2 = (*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 32))(this);
    if ((*(_WORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2) + 60) & 8) == 0) {
      return 0;
    }
  }
  return result;
}

BOOL TI::Favonius::UnigramTypingModel::Hypothesis::ends_with_word_prefix(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  if ((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 144))(this)) {
    return 1;
  }
  if (!*((void *)this + 10)) {
    return 0;
  }
  if (((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 168))(this) & 1) != 0
    || *(_DWORD *)(*((void *)this + 10) + 88))
  {
    return 1;
  }
  return LXCursorIsRoot() != 0;
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::is_input_boundary(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  return *(unsigned __int8 *)(*((void *)this + 5) + 56);
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::previous_input_segment(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  return *((void *)this + 6);
}

void TI::Favonius::UnigramTypingModel::Hypothesis::words_for_input_segment(void *a1, uint64_t *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((*(uint64_t (**)(void *))(*a1 + 168))(a1))
  {
    uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    KB::Word::Word((KB::Word *)v29, (const KB::String *)(*(void *)v5 + 8), &kTITokenIDUNK, 0);
    int v30 = 1065353216;
    v33 |= 0x4000000u;
LABEL_23:
    unint64_t v20 = a2[2];
    char v21 = (KB::Word *)a2[1];
    if ((unint64_t)v21 >= v20)
    {
      unint64_t v23 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v21 - *a2) >> 4);
      if (v23 + 1 > 0x111111111111111) {
        abort();
      }
      unint64_t v24 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v20 - *a2) >> 4);
      uint64_t v25 = 2 * v24;
      if (2 * v24 <= v23 + 1) {
        uint64_t v25 = v23 + 1;
      }
      if (v24 >= 0x88888888888888) {
        unint64_t v26 = 0x111111111111111;
      }
      else {
        unint64_t v26 = v25;
      }
      unsigned int v38 = a2 + 2;
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      int v28 = (char *)(v26 + 240 * v23);
      unint64_t v34 = v26;
      int v35 = v28;
      unint64_t v37 = v26 + 240 * v27;
      KB::Word::Word((KB::Word *)v28, v29);
      uint64_t v36 = v28 + 240;
      std::vector<KB::Word>::__swap_out_circular_buffer(a2, &v34);
      unint64_t v22 = (char *)a2[1];
      std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)&v34);
    }
    else
    {
      unint64_t v22 = (char *)KB::Word::Word(v21, v29) + 240;
    }
    a2[1] = (uint64_t)v22;
    KB::Word::~Word((KB::Word *)v29);
    return;
  }
  uint64_t v6 = a1[10];
  if (v6)
  {
    TI::Favonius::DictionaryHypothesis::_words(v6, a2, 1, 1, 1);
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    TI::Favonius::ZephyrTypingModel::Hypothesis::filter_words_for_input_segment((uint64_t)a1, (uint64_t)a2);
    if (v7 == v8) {
      float v9 = 1.0;
    }
    else {
      float v9 = 0.0001;
    }
  }
  else
  {
    float v9 = 1.0;
  }
  uint64_t v10 = *a1;
  if (*a2 == a2[1])
  {
    uint64_t v15 = (*(uint64_t (**)(void *))(v10 + 136))(a1);
    float v16 = (*(float (**)(void *))(*a1 + 88))(a1);
    float v17 = v16 - (*(float (**)(uint64_t))(*(void *)v15 + 88))(v15);
    if (v17 > 0.0) {
      float v17 = 0.0;
    }
    float v18 = expf(v17);
    if (v18 >= 0.00000003) {
      float v19 = v18;
    }
    else {
      float v19 = 0.00000003;
    }
    (*(void (**)(unint64_t *__return_ptr, void *))(*a1 + 120))(&v34, a1);
    KB::Word::Word((KB::Word *)v29, (const KB::String *)&v34, &kTITokenIDUNK, 0);
    if (v35 && BYTE6(v34) == 1) {
      free(v35);
    }
    int v30 = LODWORD(v9);
    float v31 = v19 * v9;
    v32 |= 0x800000u;
    goto LABEL_23;
  }
  float v11 = (*(float (**)(void *))(v10 + 264))(a1);
  float v12 = v11 * (*(float (**)(void *))(*a1 + 80))(a1);
  if (v12 < 0.00000003) {
    float v12 = 0.00000003;
  }
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  while (v13 != v14)
  {
    *(float *)(v13 + 52) = v12 * *(float *)(v13 + 48);
    v13 += 240;
  }
}

void TI::Favonius::UnigramTypingModel::Hypothesis::word_score(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  if ((*((_DWORD *)this + 25) & 0x7FFFFFFFu) >= 0x7F800000)
  {
    if ((**(uint64_t (***)(TI::Favonius::UnigramTypingModel::Hypothesis *))this)(this))
    {
      uint64_t v2 = (**(uint64_t (***)(TI::Favonius::UnigramTypingModel::Hypothesis *))this)(this);
      float v3 = (*(float (**)(uint64_t))(*(void *)v2 + 104))(v2);
      float v4 = v3 + logf(*((float *)this + 24));
    }
    else
    {
      float v4 = 0.0;
    }
    *((float *)this + 25) = v4;
  }
}

double TI::Favonius::UnigramTypingModel::Hypothesis::probability_of_word_termination(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  char v2 = (*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 168))(this);
  LODWORD(result) = 1.0;
  if ((v2 & 1) == 0)
  {
    uint64_t v4 = *((void *)this + 10);
    if (v4)
    {
      uint64_t v5 = *(const KB::DictionaryContainer **)(v4 + 8);
      *(float *)&double result = KB::DictionaryCursors::termination_probability((KB::DictionaryCursors *)(v4 + 16), v5);
    }
    else
    {
      return 0.0;
    }
  }
  return result;
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::ends_with_word(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  if (((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 144))(this) & 1) != 0
    || !*((void *)this + 10))
  {
    return 0;
  }
  if ((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 168))(this)) {
    return 1;
  }
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3)
  {
    uint64_t v4 = v2 + 16;
    uint64_t v5 = 8 * v3 - 8;
    do
    {
      v4 += 8;
      int HasEntries = LXCursorHasEntries();
      if (HasEntries) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v5 == 0;
      }
      v5 -= 8;
    }
    while (!v7);
    if (HasEntries) {
      return 1;
    }
  }
  float v9 = *(KB::DynamicDictionaryCursor **)(v2 + 72);

  return KB::DynamicDictionaryCursor::has_entries(v9);
}

TI::Favonius::DictionaryHypothesis *TI::Favonius::UnigramTypingModel::Hypothesis::predicted_extensions_are_canonical(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  if (*(void *)(*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 16))(this)) {
    BOOL v2 = (*(_WORD *)(*(void *)(*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(void *)this + 16))(this)
  }
                   + 60) & 8) == 0;
  else {
    BOOL v2 = 1;
  }
  double result = (TI::Favonius::DictionaryHypothesis *)*((void *)this + 10);
  if (result) {
    return (TI::Favonius::DictionaryHypothesis *)(v2 & ~TI::Favonius::DictionaryHypothesis::allows_restart(result));
  }
  return result;
}

uint64_t TI::Favonius::DictionaryHypothesis::allows_restart(TI::Favonius::DictionaryHypothesis *this)
{
  BOOL v2 = (char *)this + 16;
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    uint64_t v4 = 8 * v3 - 8;
    uint64_t v5 = (char *)this + 16;
    do
    {
      v5 += 8;
      int v6 = LXCursorTerminatesWordStem();
      if (v6) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v4 == 0;
      }
      v4 -= 8;
    }
    while (!v7);
    if (v6) {
      return 1;
    }
  }
  if (!*(unsigned char *)(*((void *)this + 1) + 64)) {
    return 0;
  }
  uint64_t v8 = *((void *)this + 7);
  if (v8)
  {
    uint64_t v9 = 8 * v8 - 8;
    do
    {
      v2 += 8;
      int HasEntries = LXCursorHasEntries();
      if (HasEntries) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v9 == 0;
      }
      v9 -= 8;
    }
    while (!v11);
    if (HasEntries) {
      return 1;
    }
  }
  uint64_t v13 = (KB::DynamicDictionaryCursor *)*((void *)this + 9);

  return KB::DynamicDictionaryCursor::has_entries(v13);
}

void TI::Favonius::UnigramTypingModel::Hypothesis::predict_extensions(uint64_t *a1, unint64_t *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1[10])
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
    if (((*(_WORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4) + 60) & 1) != 0
       || (*(_WORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4) + 60) & 0x34E) != 0)
      && (((*(uint64_t (**)(uint64_t *))(*a1 + 72))(a1) & 1) != 0
       || (*(_WORD *)(*(void *)(*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) + 60) & 8) == 0))
    {
      unint64_t v5 = *a2;
      TI::Favonius::UnigramTypingModel::Hypothesis::extensions_from_dict_hypothesis((uint64_t)a1, a2, a1[10], 1);
      unint64_t v6 = *a2;
      unint64_t v7 = a2[1];
      uint64_t v8 = v7 + 8 * v5;
      uint64_t v9 = (unsigned int **)(v7 + 8 * *a2);
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 0x40000000;
      unint64_t v23 = ___ZNK2TI8Favonius18UnigramTypingModel10Hypothesis18predict_extensionsERN3WTF6VectorINS3_6RefPtrINS0_16TypingHypothesisEEELm0EEE_block_invoke;
      unint64_t v24 = &__block_descriptor_tmp_12198;
      uint64_t v25 = a1;
      if (v5 != v6)
      {
        uint64_t v15 = 8 * v6 - 8 * v5;
        while ((v23((uint64_t)v22, v8) & 1) == 0)
        {
          v8 += 8;
          v15 -= 8;
          if (!v15)
          {
            uint64_t v10 = v9;
            goto LABEL_23;
          }
        }
      }
      uint64_t v10 = v9;
      if ((unsigned int **)v8 != v9)
      {
        BOOL v11 = (unsigned int **)(v8 + 8);
        if ((unsigned int **)(v8 + 8) == v9)
        {
          uint64_t v10 = (unsigned int **)v8;
        }
        else
        {
          uint64_t v10 = (unsigned int **)v8;
          do
          {
            if ((v23((uint64_t)v22, (uint64_t)v11) & 1) == 0)
            {
              float v12 = *v11;
              *BOOL v11 = 0;
              uint64_t v13 = *v10;
              *uint64_t v10 = v12;
              if (v13)
              {
                unsigned int v14 = atomic_load(v13 + 2);
                if (v14 == 1) {
                  (*(void (**)(unsigned int *))(*(void *)v13 + 248))(v13);
                }
                else {
                  atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
                }
              }
              ++v10;
            }
            ++v11;
          }
          while (v11 != v9);
        }
      }
LABEL_23:
      unint64_t v16 = a2[1];
      unint64_t v17 = (uint64_t)((uint64_t)v10 - v16) >> 3;
      if (*a2 >= v17)
      {
        WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct((unsigned int *)(v16 + 8 * v17), (unsigned int **)(v16 + 8 * *a2));
      }
      else
      {
        unint64_t v18 = a2[2];
        if (v18 < v17)
        {
          unint64_t v19 = v18 + (v18 >> 1);
          if (v18 < 0x100) {
            unint64_t v19 = 2 * v18;
          }
          if (v19 <= v17) {
            unint64_t v20 = v17;
          }
          else {
            unint64_t v20 = v19;
          }
          WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v20);
          unint64_t v16 = a2[1];
        }
        if (v16) {
          bzero((void *)(v16 + 8 * *a2), 8 * v17 - 8 * *a2);
        }
      }
      *a2 = v17;
      if (!*(unsigned char *)(a1[11] + 64)
        && TI::Favonius::DictionaryHypothesis::allows_restart((TI::Favonius::DictionaryHypothesis *)a1[10]))
      {
        char v21 = (TI::Favonius::DictionaryHypothesis *)a1[10];
        if (v21)
        {
          TI::Favonius::DictionaryHypothesis::affix_sentinel(v21, (uint64_t)&v26);
        }
        else
        {
          int v26 = 0x100000;
          __int16 v27 = 0;
          char v28 = 0;
          int v29 = 0;
          char v30 = 0;
        }
        operator new();
      }
    }
  }
}

void TI::Favonius::UnigramTypingModel::Hypothesis::extensions_from_dict_hypothesis(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = 0;
  __int16 v27 = 0;
  uint64_t v28 = 0;
  TI::Favonius::DictionaryHypothesis::extensions(a3, &v26);
  uint64_t v7 = v26;
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v26 + *a2);
  uint64_t v8 = (atomic_uint **)v27;
  if (!v7) {
    goto LABEL_31;
  }
  uint64_t v9 = 8 * v7;
  do
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    BOOL v11 = (TI::Favonius::KeyFactory *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    TI::Favonius::KeyFactory::create_key(v11, (*v8)[22], &v24);
    float v12 = v24;
    uint64_t v25 = v24;
    if ((v24[15] & 0xB81) != 0)
    {
LABEL_19:
      WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v12);
      goto LABEL_20;
    }
    uint64_t v13 = *v8;
    unint64_t v23 = v13;
    if (v13) {
      atomic_fetch_add(v13, 1u);
    }
    (*(void (**)(atomic_uint **__return_ptr, uint64_t, atomic_uint **, atomic_uint **, uint64_t))(*(void *)a1 + 272))(&v24, a1, &v23, &v25, a4);
    unint64_t v14 = *a2;
    if (*a2 != a2[2])
    {
      unint64_t v17 = a2[1];
      goto LABEL_15;
    }
    unint64_t v15 = v14 + (v14 >> 1);
    if (v14 < 0x100) {
      unint64_t v15 = 2 * v14;
    }
    if (v15 <= v14 + 1) {
      unint64_t v16 = v14 + 1;
    }
    else {
      unint64_t v16 = v15;
    }
    WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v16);
    unint64_t v17 = a2[1];
    if (v17)
    {
      unint64_t v14 = *a2;
LABEL_15:
      unint64_t v18 = v24;
      unint64_t v24 = 0;
      *(void *)(v17 + 8 * v14) = v18;
      *a2 = v14 + 1;
      goto LABEL_16;
    }
    if (v24)
    {
      unsigned int v19 = atomic_load((unsigned int *)v24 + 2);
      if (v19 == 1) {
        (*(void (**)(void))(*(void *)v24 + 248))();
      }
      else {
        atomic_fetch_add(v24 + 2, 0xFFFFFFFF);
      }
    }
LABEL_16:
    if (v23) {
      WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v23);
    }
    float v12 = v25;
    if (v25) {
      goto LABEL_19;
    }
LABEL_20:
    ++v8;
    v9 -= 8;
  }
  while (v9);
  uint64_t v8 = (atomic_uint **)v27;
  if (v26)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 8 * v26;
    do
    {
      uint64_t v22 = (uint64_t)v8[v20 / 8];
      if (v22) {
        WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v22);
      }
      v20 += 8;
    }
    while (v21 != v20);
  }
LABEL_31:
  free(v8);
}

uint64_t ___ZNK2TI8Favonius18UnigramTypingModel10Hypothesis18predict_extensionsERN3WTF6VectorINS3_6RefPtrINS0_16TypingHypothesisEEELm0EEE_block_invoke(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void **)(a1 + 32);
  uint64_t v3 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)a2 + 16))();
  return TI::Favonius::ZephyrTypingModel::Hypothesis::input_segment_is_extended_by_key(v2, *v3) ^ 1;
}

void TI::Favonius::UnigramTypingModel::Hypothesis::extensions(void *a1, unint64_t *a2, uint64_t *a3)
{
  if (TI::Favonius::ZephyrTypingModel::Hypothesis::input_segment_is_extended_by_key(a1, *a3))
  {
    int v6 = TI::Favonius::UnigramTypingModel::Hypothesis::extending_key_could_terminate_input_segment(a1, *a3);
    (*(void (**)(unsigned int **__return_ptr, void *, uint64_t *, uint64_t))(*a1 + 256))(&v20, a1, a3, 1);
    uint64_t v7 = v20;
    if (!v6)
    {
      if (!v20) {
        return;
      }
      uint64_t v8 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  (*(void (**)(unsigned int **__return_ptr, void *, uint64_t *, void))(*a1 + 256))(&v20, a1, a3, 0);
  uint64_t v8 = v20;
  if (!v7) {
    goto LABEL_22;
  }
  if (v20
    && ((*(uint64_t (**)(unsigned int *))(*(void *)v7 + 160))(v7) & 1) == 0
    && (*(unsigned int (**)(unsigned int *))(*(void *)v8 + 160))(v8))
  {
    unsigned int v9 = atomic_load(v7 + 2);
    if (v9 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v7 + 248))(v7);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF);
    }
    goto LABEL_23;
  }
LABEL_12:
  unint64_t v10 = *a2;
  if (*a2 != a2[2])
  {
    unint64_t v13 = a2[1];
    goto LABEL_21;
  }
  unint64_t v11 = v10 + (v10 >> 1);
  if (v10 < 0x100) {
    unint64_t v11 = 2 * v10;
  }
  if (v11 <= v10 + 1) {
    unint64_t v12 = v10 + 1;
  }
  else {
    unint64_t v12 = v11;
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v12);
  unint64_t v13 = a2[1];
  if (v13)
  {
    unint64_t v10 = *a2;
LABEL_21:
    *(void *)(v13 + 8 * v10) = v7;
    *a2 = v10 + 1;
    goto LABEL_22;
  }
  unsigned int v19 = atomic_load(v7 + 2);
  if (v19 == 1) {
    (*(void (**)(unsigned int *))(*(void *)v7 + 248))(v7);
  }
  else {
    atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF);
  }
LABEL_22:
  if (!v8) {
    return;
  }
LABEL_23:
  unint64_t v14 = *a2;
  if (*a2 != a2[2])
  {
    unint64_t v17 = a2[1];
    goto LABEL_32;
  }
  unint64_t v15 = v14 + (v14 >> 1);
  if (v14 < 0x100) {
    unint64_t v15 = 2 * v14;
  }
  if (v15 <= v14 + 1) {
    unint64_t v16 = v14 + 1;
  }
  else {
    unint64_t v16 = v15;
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v16);
  unint64_t v17 = a2[1];
  if (v17)
  {
    unint64_t v14 = *a2;
LABEL_32:
    *(void *)(v17 + 8 * v14) = v8;
    *a2 = v14 + 1;
    return;
  }
  unsigned int v18 = atomic_load(v8 + 2);
  if (v18 == 1) {
    (*(void (**)(unsigned int *))(*(void *)v8 + 248))(v8);
  }
  else {
    atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF);
  }
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::extending_key_could_terminate_input_segment(void *a1, uint64_t a2)
{
  uint64_t result = a1[10];
  if (result)
  {
    if (a2 && (*(_WORD *)(a2 + 60) & 0xB81) != 0) {
      return 0;
    }
    if ((TI::Favonius::DictionaryHypothesis::allows_restart((TI::Favonius::DictionaryHypothesis *)result) & 1) != 0
      || ((*(uint64_t (**)(void *))(*a1 + 168))(a1) & 1) != 0)
    {
      return 1;
    }
    if (!a2 || (*(_WORD *)(a2 + 60) & 8) == 0) {
      return 0;
    }
    if (LXCursorIsRoot()) {
      return 1;
    }
    uint64_t v5 = a1[10];
    uint64_t v6 = *(void *)(v5 + 56);
    if (v6)
    {
      uint64_t v7 = v5 + 16;
      uint64_t v8 = 8 * v6 - 8;
      do
      {
        v7 += 8;
        int HasEntries = LXCursorHasEntries();
        if (HasEntries) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = v8 == 0;
        }
        v8 -= 8;
      }
      while (!v10);
      if (HasEntries) {
        return 1;
      }
    }
    return (KB::DynamicDictionaryCursor::has_entries(*(KB::DynamicDictionaryCursor **)(v5 + 72)) & 1) != 0;
  }
  return result;
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::current_string_key(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  return *((void *)this + 5);
}

float TI::Favonius::UnigramTypingModel::Hypothesis::probability_of_key(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  return *((float *)this + 16) * *((float *)this + 24);
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::typing_model(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  return *((void *)this + 2);
}

void TI::Favonius::UnigramTypingModel::create()
{
}

uint64_t TI::Favonius::UnigramTypingModel::UnigramTypingModel(uint64_t a1, atomic_uint **a2)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3F760A8;
  uint64_t v3 = *a2;
  *(void *)(a1 + 24) = *a2;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  if (*a2)
  {
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::__value_func[abi:nn180100]((uint64_t)v5, *((void *)*a2 + 1) + 112);
  }
  else
  {
    v5[0] = &unk_1F3F76238;
    v5[3] = v5;
  }
  std::__function::__value_func<KB::ByteString ()(KB::String const&)>::__value_func[abi:nn180100](a1 + 32, (uint64_t)v5);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  std::__function::__value_func<KB::ByteString ()(KB::String const&)>::~__value_func[abi:nn180100](v5);
  return a1;
}

void std::__function::__func<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0,std::allocator<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0>,KB::ByteString ()(KB::String const&)>::operator()(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void std::__function::__func<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0,std::allocator<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0>,KB::ByteString ()(KB::String const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F76238;
}

void *std::__function::__func<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0,std::allocator<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0>,KB::ByteString ()(KB::String const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F3F76238;
  return result;
}

void std::__function::__func<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0,std::allocator<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0>,KB::ByteString ()(KB::String const&)>::~__func()
{
}

void TI::Favonius::BeamSearch::append_debug_data(TI::Favonius::SearchNode **this, CFMutableStringRef theString)
{
  CFStringAppendCString(theString, "", 0x8000100u);
  CFStringAppendFormat(theString, 0, @"INPUT NODE:\n");
  TI::Favonius::SearchNode::append_debug_data(this[35], theString);
  CFStringAppendFormat(theString, 0, @"STEMS:\n");
  for (unint64_t i = (TI::Favonius::SearchNode **)this[25]; i != (TI::Favonius::SearchNode **)this[26]; ++i)
  {
    uint64_t v5 = *i;
    TI::Favonius::SearchNode::append_debug_data(v5, theString);
  }
}

void TI::Favonius::BeamSearch::generate_prediction_stems(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, KB::Candidate *a4@<X8>, float a5@<S0>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v22 = 0;
  memset(v20, 0, sizeof(v20));
  memset(v21, 0, sizeof(v21));
  if (a3)
  {
    unsigned int v9 = (TI::Favonius::SearchNode **)a1[25];
    if (v9 != (TI::Favonius::SearchNode **)a1[26])
    {
      unint64_t v11 = *v9;
      LODWORD(v29) = 0x100000;
      WORD2(v29) = 0;
      BYTE6(v29) = 0;
      char v30 = 0;
      char v31 = 0;
      TI::Favonius::SearchNode::input_string_recursive(v11, (KB::String *)&v29, 0);
      KB::String::operator=(a3, (KB::String *)&v29);
      if (v30)
      {
        if (BYTE6(v29) == 1) {
          free(v30);
        }
      }
    }
  }
  unint64_t v12 = (TI::Favonius::SearchNode *)a1[35];
  LODWORD(v29) = 0x100000;
  WORD2(v29) = 0;
  BYTE6(v29) = 0;
  char v30 = 0;
  char v31 = 0;
  TI::Favonius::SearchNode::input_string_recursive(v12, (KB::String *)&v29, 0);
  unint64_t v13 = *(TI::Favonius::SearchNode **)a1[25];
  int v24 = 0x100000;
  __int16 v25 = 0;
  char v26 = 0;
  __int16 v27 = 0;
  char v28 = 0;
  TI::Favonius::SearchNode::input_string_recursive(v13, (KB::String *)&v24, 0);
  if (KB::String::equal((KB::String *)&v24, (const KB::String *)&v29, 0)) {
    unint64_t v14 = (uint64_t *)a1[25];
  }
  else {
    unint64_t v14 = a1 + 35;
  }
  TI::Favonius::SearchNode::prediction_stems(*v14, a1[4], (uint64_t)(a1 + 6), v20, a5);
  unint64_t v15 = 126 - 2 * __clz(0x1CAC083126E978D5 * ((uint64_t)(*((void *)&v20[0] + 1) - *(void *)&v20[0]) >> 3));
  unint64_t v23 = &__block_literal_global_29;
  if (*((void *)&v20[0] + 1) == *(void *)&v20[0]) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,false>(*(uint64_t **)&v20[0], *((uint64_t **)&v20[0] + 1), (uint64_t)&v23, v16, 1);
  unsigned int v18 = (const KB::Candidate *)*((void *)&v20[0] + 1);
  unint64_t v17 = *(const KB::Candidate **)&v20[0];
  unint64_t v19 = 0x1CAC083126E978D5 * ((uint64_t)(*((void *)&v20[0] + 1) - *(void *)&v20[0]) >> 3);
  if (v19 > a2)
  {
    std::vector<KB::Candidate>::erase((uint64_t)v20, (uint64_t *)(*(void *)&v20[0] + 1000 * a2), *((KB::Candidate **)&v20[0] + 1));
    unsigned int v18 = (const KB::Candidate *)*((void *)&v20[0] + 1);
    unint64_t v17 = *(const KB::Candidate **)&v20[0];
    unint64_t v19 = 0x1CAC083126E978D5 * ((uint64_t)(*((void *)&v20[0] + 1) - *(void *)&v20[0]) >> 3);
  }
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  std::vector<KB::Candidate>::__init_with_size[abi:nn180100]<KB::Candidate*,KB::Candidate*>(a4, v17, v18, v19);
  if (v27 && v26 == 1) {
    free(v27);
  }
  if (v30 && BYTE6(v29) == 1) {
    free(v30);
  }
  int v29 = (void **)&v21[1] + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v29);
  int v29 = (void **)v21;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v29);
  int v29 = (void **)&v20[1] + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v29);
  int v29 = (void **)v20;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v29);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  v38[125] = *MEMORY[0x1E4F143B8];
LABEL_2:
  unint64_t v12 = a1;
  uint64_t v36 = a1 + 250;
  unint64_t v37 = a1 + 125;
  while (1)
  {
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = 0x1CAC083126E978D5 * (a2 - v12);
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*(unsigned int (**)(void))(*(void *)a3 + 16))()) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v12, a2 - 125);
          }
          break;
        case 3uLL:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v12, v12 + 125, a2 - 125, a3);
          break;
        case 4uLL:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v12, v12 + 125, v12 + 250, a2 - 125, a3);
          break;
        case 5uLL:
          std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v12, v12 + 125, v12 + 250, v12 + 375, a2 - 125, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 23999) {
      break;
    }
    if (!a4)
    {
      if (v12 != a2) {
        std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,KB::Candidate*>(v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = &v12[125 * (v14 >> 1)];
    if ((unint64_t)v13 >= 0x1F401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v12, &v12[125 * (v14 >> 1)], a2 - 125, a3);
      unint64_t v17 = &v12[125 * v15];
      unsigned int v18 = v17 - 125;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v37, v17 - 125, a2 - 250, a3);
      v17 += 125;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v36, v17, a2 - 375, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v18, v16, v17, a3);
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v12, v16);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(&v12[125 * (v14 >> 1)], v12, a2 - 125, a3);
    }
    --a4;
    if ((a5 & 1) == 0 && ((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
    {
      KB::Candidate::Candidate((uint64_t)v38, (uint64_t)v12);
      if ((*(uint64_t (**)(void))(*(void *)a3 + 16))())
      {
        a1 = v12;
        do
          a1 += 125;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
      }
      else
      {
        int v24 = v12 + 125;
        do
        {
          a1 = v24;
          if (v24 >= a2) {
            break;
          }
          int v25 = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
          int v24 = a1 + 125;
        }
        while (!v25);
      }
      char v26 = a2;
      if (a1 < a2)
      {
        char v26 = a2;
        do
          v26 -= 125;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      }
      while (a1 < v26)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, v26);
        do
          a1 += 125;
        while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
        do
          v26 -= 125;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      }
      if (a1 - 125 != v12) {
        KB::Candidate::operator=(v12, a1 - 125);
      }
      KB::Candidate::operator=(a1 - 125, v38);
      KB::Candidate::~Candidate((KB::Candidate *)v38);
      a5 = 0;
      goto LABEL_2;
    }
    KB::Candidate::Candidate((uint64_t)v38, (uint64_t)v12);
    unint64_t v19 = v12;
    do
    {
      unint64_t v20 = v19;
      v19 += 125;
    }
    while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
    uint64_t v21 = a2;
    if (v20 == v12)
    {
      uint64_t v21 = a2;
      do
      {
        if (v19 >= v21) {
          break;
        }
        v21 -= 125;
      }
      while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
    }
    else
    {
      do
        v21 -= 125;
      while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
    }
    a1 = v19;
    if (v19 < v21)
    {
      int v22 = v21;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, v22);
        do
          a1 += 125;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
        do
          v22 -= 125;
        while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
      }
      while (a1 < v22);
    }
    if (a1 - 125 != v12) {
      KB::Candidate::operator=(v12, a1 - 125);
    }
    KB::Candidate::operator=(a1 - 125, v38);
    KB::Candidate::~Candidate((KB::Candidate *)v38);
    if (v19 < v21) {
      goto LABEL_33;
    }
    char v23 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v12, a1 - 125, a3);
    if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a2, a3))
    {
      if (v23) {
        goto LABEL_2;
      }
LABEL_33:
      std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,false>(v12, a1 - 125, a3, a4, a5 & 1);
      a5 = 0;
      goto LABEL_2;
    }
    a2 = a1 - 125;
    if (v23) {
      return;
    }
  }
  __int16 v27 = v12 + 125;
  BOOL v29 = v12 == a2 || v27 == a2;
  if (a5)
  {
    if (!v29)
    {
      uint64_t v30 = 0;
      do
      {
        uint64_t v31 = (uint64_t)v27;
        if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
        {
          KB::Candidate::Candidate((uint64_t)v38, v31);
          uint64_t v32 = v30;
          while (1)
          {
            KB::Candidate::operator=((uint64_t *)((char *)v12 + v32 + 1000), (uint64_t *)((char *)v12 + v32));
            if (!v32) {
              break;
            }
            v32 -= 1000;
            if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
            {
              int v33 = (uint64_t *)((char *)v12 + v32 + 1000);
              goto LABEL_73;
            }
          }
          int v33 = v12;
LABEL_73:
          KB::Candidate::operator=(v33, v38);
          KB::Candidate::~Candidate((KB::Candidate *)v38);
        }
        __int16 v27 = (uint64_t *)(v31 + 1000);
        v30 += 1000;
      }
      while ((uint64_t *)(v31 + 1000) != a2);
    }
  }
  else if (!v29)
  {
    do
    {
      uint64_t v34 = (uint64_t)v27;
      if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
      {
        KB::Candidate::Candidate((uint64_t)v38, v34);
        do
        {
          int v35 = v12;
          KB::Candidate::operator=(v12 + 125, v12);
          v12 -= 125;
        }
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
        KB::Candidate::operator=(v35, v38);
        KB::Candidate::~Candidate((KB::Candidate *)v38);
      }
      __int16 v27 = (uint64_t *)(v34 + 1000);
      unint64_t v12 = (uint64_t *)v34;
    }
    while ((uint64_t *)(v34 + 1000) != a2);
  }
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  char v8 = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
  int v9 = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
  if (v8)
  {
    if (v9)
    {
      BOOL v10 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, a2);
      if (!(*(unsigned int (**)(void))(*(void *)a4 + 16))()) {
        return;
      }
      BOOL v10 = a2;
    }
    unint64_t v11 = a3;
  }
  else
  {
    if (!v9) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a2, a3);
    if (!(*(unsigned int (**)(void))(*(void *)a4 + 16))()) {
      return;
    }
    BOOL v10 = a1;
    unint64_t v11 = a2;
  }

  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v10, v11);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a2, a3, a5);
  if ((*(unsigned int (**)(void))(*(void *)a5 + 16))())
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a3, a4);
    if ((*(unsigned int (**)(void))(*(void *)a5 + 16))())
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a2, a3);
      if ((*(unsigned int (**)(void))(*(void *)a5 + 16))())
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, a2);
      }
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a2, a3, a4, a6);
  if ((*(unsigned int (**)(void))(*(void *)a6 + 16))())
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a4, a5);
    if ((*(unsigned int (**)(void))(*(void *)a6 + 16))())
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a3, a4);
      if ((*(unsigned int (**)(void))(*(void *)a6 + 16))())
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a2, a3);
        if ((*(unsigned int (**)(void))(*(void *)a6 + 16))())
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, a2);
        }
      }
    }
  }
}

void std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,KB::Candidate*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  v30[125] = *MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    char v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 1000;
    if ((char *)a2 - (char *)a1 >= 1001)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[125 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>((uint64_t)a1, a4, v9, v12);
        v12 -= 125;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      uint64_t v13 = v6;
      do
      {
        if ((*(unsigned int (**)(void))(*(void *)a4 + 16))())
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v13, a1);
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>((uint64_t)a1, a4, v9, a1);
        }
        v13 += 125;
      }
      while (v13 != a3);
    }
    if (v8 >= 1001)
    {
      int64_t v14 = v8 / 0x3E8uLL;
      do
      {
        char v28 = v6;
        KB::Candidate::Candidate((uint64_t)v29, (uint64_t)a1);
        uint64_t v15 = 0;
        uint64_t v16 = v14 - 2;
        if (v14 < 2) {
          uint64_t v16 = v14 - 1;
        }
        uint64_t v17 = v16 >> 1;
        unsigned int v18 = a1;
        do
        {
          unint64_t v19 = &v18[125 * v15 + 125];
          uint64_t v20 = (2 * v15) | 1;
          uint64_t v21 = 2 * v15 + 2;
          if (v21 < v14 && (*(unsigned int (**)(void))(*(void *)a4 + 16))())
          {
            v19 += 125;
            uint64_t v20 = v21;
          }
          KB::Candidate::operator=(v18, v19);
          unsigned int v18 = v19;
          uint64_t v15 = v20;
        }
        while (v20 <= v17);
        char v6 = v28 - 125;
        if (v19 == v28 - 125)
        {
          KB::Candidate::operator=(v19, v29);
          int64_t v23 = v14 - 1;
        }
        else
        {
          KB::Candidate::operator=(v19, v28 - 125);
          KB::Candidate::operator=(v6, v29);
          uint64_t v22 = (char *)v19 - (char *)a1 + 1000;
          int64_t v23 = v14 - 1;
          if (v22 >= 1001)
          {
            unint64_t v24 = (unint64_t)(0x1CAC083126E978D5 * (v22 >> 3) - 2) >> 1;
            int v25 = &a1[125 * v24];
            if ((*(unsigned int (**)(void))(*(void *)a4 + 16))())
            {
              KB::Candidate::Candidate((uint64_t)v30, (uint64_t)v19);
              do
              {
                char v26 = v25;
                KB::Candidate::operator=(v19, v25);
                if (!v24) {
                  break;
                }
                unint64_t v24 = (v24 - 1) >> 1;
                int v25 = &a1[125 * v24];
                unint64_t v19 = v26;
              }
              while (((*(uint64_t (**)(void))(*(void *)a4 + 16))() & 1) != 0);
              KB::Candidate::operator=(v26, v30);
              KB::Candidate::~Candidate((KB::Candidate *)v30);
            }
          }
        }
        KB::Candidate::~Candidate((KB::Candidate *)v29);
        BOOL v27 = v14 <= 2;
        int64_t v14 = v23;
      }
      while (!v27);
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  v13[125] = *MEMORY[0x1E4F143B8];
  BOOL v6 = 1;
  switch(0x1CAC083126E978D5 * (a2 - a1))
  {
    case 0:
    case 1:
      return v6;
    case 2:
      if ((*(unsigned int (**)(void))(*(void *)a3 + 16))()) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, a2 - 125);
      }
      return v6;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a1 + 125, a2 - 125, a3);
      return v6;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a1 + 125, a1 + 250, a2 - 125, a3);
      return v6;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a1 + 125, a1 + 250, a1 + 375, a2 - 125, a3);
      return v6;
    default:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a1 + 125, a1 + 250, a3);
      uint64_t v7 = (uint64_t)(a1 + 375);
      if (a1 + 375 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))())
  {
LABEL_14:
    v8 += 1000;
    v7 += 1000;
    if ((uint64_t *)v7 == a2) {
      return 1;
    }
  }
  KB::Candidate::Candidate((uint64_t)v13, v7);
  uint64_t v10 = v8;
  while (1)
  {
    KB::Candidate::operator=((uint64_t *)((char *)a1 + v10 + 3000), (uint64_t *)((char *)a1 + v10 + 2000));
    if (v10 == -2000) {
      break;
    }
    v10 -= 1000;
    if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
    {
      unint64_t v11 = (uint64_t *)((char *)a1 + v10 + 3000);
      goto LABEL_12;
    }
  }
  unint64_t v11 = a1;
LABEL_12:
  KB::Candidate::operator=(v11, v13);
  if (++v9 != 8)
  {
    KB::Candidate::~Candidate((KB::Candidate *)v13);
    goto LABEL_14;
  }
  BOOL v6 = v7 + 1000 == (void)a2;
  KB::Candidate::~Candidate((KB::Candidate *)v13);
  return v6;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v16[125] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x1CAC083126E978D5 * (((uint64_t)a4 - a1) >> 3))
    {
      uint64_t v10 = (0x395810624DD2F1AALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      unint64_t v11 = (uint64_t *)(a1 + 1000 * v10);
      uint64_t v12 = 0x395810624DD2F1AALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*(unsigned int (**)(void))(*(void *)a2 + 16))())
      {
        v11 += 125;
        uint64_t v10 = v12;
      }
      if (((*(uint64_t (**)(void))(*(void *)a2 + 16))() & 1) == 0)
      {
        KB::Candidate::Candidate((uint64_t)v16, (uint64_t)v5);
        do
        {
          uint64_t v13 = v11;
          KB::Candidate::operator=(v5, v11);
          if (v7 < v10) {
            break;
          }
          uint64_t v14 = (2 * v10) | 1;
          unint64_t v11 = (uint64_t *)(a1 + 1000 * v14);
          uint64_t v15 = 2 * v10 + 2;
          if (v15 < a3)
          {
            if ((*(unsigned int (**)(void))(*(void *)a2 + 16))())
            {
              v11 += 125;
              uint64_t v14 = v15;
            }
          }
          char v5 = v13;
          uint64_t v10 = v14;
        }
        while (!(*(unsigned int (**)(void))(*(void *)a2 + 16))());
        KB::Candidate::operator=(v13, v16);
        KB::Candidate::~Candidate((KB::Candidate *)v16);
      }
    }
  }
}

BOOL ___ZN2TI8Favonius10BeamSearch25generate_prediction_stemsEmPN2KB6StringENS2_10LookupTypeEf_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4 = expf(*(float *)(a2 + 744));
  return v4 > expf(*(float *)(a3 + 744));
}

void TI::Favonius::BeamSearch::generate_completion_stems(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, char a4@<W4>, KB::Candidate *a5@<X8>, float a6@<S0>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v36 = 0;
  *(_OWORD *)int v33 = 0u;
  memset(v34, 0, sizeof(v34));
  memset(v35, 0, sizeof(v35));
  if (a2)
  {
    unint64_t v11 = *(TI::Favonius::SearchNode ***)(a1 + 200);
    if (v11 != *(TI::Favonius::SearchNode ***)(a1 + 208))
    {
      uint64_t v13 = *v11;
      LODWORD(v41[0]) = 0x100000;
      WORD2(v41[0]) = 0;
      BYTE6(v41[0]) = 0;
      v41[1] = 0;
      LOBYTE(v42[0]) = 0;
      TI::Favonius::SearchNode::input_string_recursive(v13, (KB::String *)v41, 0);
      KB::String::operator=(a2, (KB::String *)v41);
      if (v41[1])
      {
        if (BYTE6(v41[0]) == 1) {
          free(v41[1]);
        }
      }
    }
  }
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__base_destruct_at_end[abi:nn180100]((unsigned int *)(a1 + 224), *(void *)(a1 + 224));
  if (a3 == 4)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    int v44 = 0;
    *(_OWORD *)uint64_t v41 = 0u;
    memset(v42, 0, sizeof(v42));
    memset(v43, 0, sizeof(v43));
    unint64_t v16 = (uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 3;
    if (v16 >= 3) {
      unint64_t v16 = 3;
    }
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 8 * v16;
      do
      {
        TI::Favonius::SearchNode::completion_stems(*(void *)(*(void *)(a1 + 200) + v17), *(void *)(a1 + 32), a1 + 48, v41, a4, a6);
        v17 += 8;
      }
      while (v18 != v17);
      unint64_t v19 = (const KB::Candidate *)v41[0];
      uint64_t v20 = (const KB::Candidate *)v41[1];
      if (v41[0] != v41[1])
      {
        uint64_t v21 = v33[1];
        do
        {
          if ((unint64_t)v21 >= *(void *)&v34[0])
          {
            uint64_t v22 = 0x1CAC083126E978D5 * ((v21 - v33[0]) >> 3);
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) > 0x4189374BC6A7EFLL) {
              abort();
            }
            if (0x395810624DD2F1AALL * ((uint64_t)(*(void *)&v34[0] - (unint64_t)v33[0]) >> 3) > v23) {
              unint64_t v23 = 0x395810624DD2F1AALL * ((uint64_t)(*(void *)&v34[0] - (unint64_t)v33[0]) >> 3);
            }
            if ((unint64_t)(0x1CAC083126E978D5
                                  * ((uint64_t)(*(void *)&v34[0] - (unint64_t)v33[0]) >> 3)) >= 0x20C49BA5E353F7)
              unint64_t v24 = 0x4189374BC6A7EFLL;
            else {
              unint64_t v24 = v23;
            }
            int v40 = v34;
            if (v24) {
              unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v24);
            }
            else {
              uint64_t v25 = 0;
            }
            char v26 = (KB::Candidate *)(v24 + 1000 * v22);
            unint64_t v37 = (void **)v24;
            v38.i64[0] = (uint64_t)v26;
            unint64_t v39 = v24 + 1000 * v25;
            KB::Candidate::Candidate(v26, v19);
            uint64_t v21 = (KB::Candidate *)((char *)v26 + 1000);
            v38.i64[1] = (uint64_t)v21;
            BOOL v27 = v33[1];
            char v28 = (KB::Candidate *)v38.i64[0];
            if (v33[1] == v33[0])
            {
              int64x2_t v29 = vdupq_n_s64((unint64_t)v33[1]);
            }
            else
            {
              do
              {
                BOOL v27 = (KB::Candidate *)((char *)v27 - 1000);
                char v28 = (KB::Candidate *)KB::Candidate::Candidate((uint64_t)v28 - 1000, (uint64_t)v27);
              }
              while (v27 != v33[0]);
              int64x2_t v29 = *(int64x2_t *)v33;
              uint64_t v21 = (KB::Candidate *)v38.i64[1];
            }
            v33[0] = v28;
            v33[1] = v21;
            int64x2_t v38 = v29;
            unint64_t v30 = *(void *)&v34[0];
            *(void *)&v34[0] = v39;
            unint64_t v39 = v30;
            unint64_t v37 = (void **)v29.i64[0];
            std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v37);
          }
          else
          {
            KB::Candidate::Candidate(v21, v19);
            uint64_t v21 = (KB::Candidate *)((char *)v21 + 1000);
          }
          v33[1] = v21;
          unint64_t v19 = (const KB::Candidate *)((char *)v19 + 1000);
        }
        while (v19 != v20);
      }
    }
    unint64_t v37 = (void **)&v43[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
    unint64_t v37 = (void **)v43;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
    unint64_t v37 = (void **)v42 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
    unint64_t v37 = v41;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
    uint64_t v15 = (uint64_t *)v33[0];
    uint64_t v14 = (uint64_t *)v33[1];
  }
  unint64_t v31 = 126 - 2 * __clz(0x1CAC083126E978D5 * (v14 - v15));
  v41[0] = &__block_literal_global_26;
  if (v14 == v15) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,false>(v15, v14, (uint64_t)v41, v32, 1);
  *(void *)a5 = 0;
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  std::vector<KB::Candidate>::__init_with_size[abi:nn180100]<KB::Candidate*,KB::Candidate*>(a5, v33[0], v33[1], 0x1CAC083126E978D5 * ((v33[1] - v33[0]) >> 3));
  v41[0] = (char *)&v35[1] + 8;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
  v41[0] = v35;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
  v41[0] = (char *)v34 + 8;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
  v41[0] = v33;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
}

BOOL ___ZN2TI8Favonius10BeamSearch25generate_completion_stemsEmPN2KB6StringENS2_10LookupTypeEfb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4 = expf(*(float *)(a2 + 744));
  return v4 > expf(*(float *)(a3 + 744));
}

void TI::Favonius::BeamSearch::generate_candidates(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  log = kac_get_log();
  ptr = (void *)(a1 ^ 0x16);
  os_signpost_id_t v13 = os_signpost_id_make_with_pointer(log, (const void *)(a1 ^ 0x16));
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v14 = v13;
    if (os_signpost_enabled(log))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1E3F0E000, log, OS_SIGNPOST_INTERVAL_BEGIN, v14, "kbdManager.beamSearchCandidateGeneration", (const char *)&unk_1E41704BE, buf, 2u);
    }
  }
  if (((a4 - 1) & 0xFFFFFFFD) != 0) {
    float v15 = 0.0;
  }
  else {
    float v15 = 1.0;
  }
  if (a3)
  {
    unint64_t v16 = *(TI::Favonius::SearchNode ***)(a1 + 200);
    if (v16 != *(TI::Favonius::SearchNode ***)(a1 + 208))
    {
      uint64_t v17 = *v16;
      *(_DWORD *)long long buf = 0x100000;
      *(_WORD *)&uint8_t buf[4] = 0;
      buf[6] = 0;
      int v79 = 0;
      LOBYTE(v80) = 0;
      TI::Favonius::SearchNode::input_string_recursive(v17, (KB::String *)buf, 0);
      KB::String::operator=(a3, (KB::String *)buf);
      if (v79)
      {
        if (buf[6] == 1) {
          free(v79);
        }
      }
    }
  }
  TI::Favonius::BeamSearch::filtered_beam_for_candidate_generation(a1, (uint64_t **)(a1 + 200), a4, &v73);
  v68[0] = MEMORY[0x1E4F143A8];
  v68[1] = 0x40000000;
  v68[2] = ___ZNK2TI8Favonius10BeamSearch19generate_candidatesEmPN2KB6StringENS2_10LookupTypeEf_block_invoke;
  v68[3] = &__block_descriptor_tmp_15;
  v68[4] = a1;
  BOOL v71 = a4 != 4;
  int v69 = a4;
  float v70 = v15;
  *(void *)long long buf = v68;
  int v79 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  long long __p = 0u;
  memset(v83, 0, sizeof(v83));
  unint64_t v19 = (uint64_t *)v73;
  uint64_t v18 = (uint64_t *)v74;
  while (v19 != v18)
    TI::Favonius::SearchNodeResultQueue::visit((unsigned int *)buf, v19++);
  unsigned int v64 = &v73;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v64);
  *(_DWORD *)(a5 + 100) = 0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  uint64_t v20 = *(void *)(a1 + 200);
  uint64_t v21 = *(void *)(a1 + 208);
  if (v20 == v21)
  {
    unint64_t v22 = 0;
  }
  else
  {
    unint64_t v22 = 0;
    do
    {
      if (*(void *)(*(void *)v20 + 56)) {
        BOOL v23 = (*(_DWORD *)(*(void *)v20 + 140) & 0x7FFFFFFFu) < 0x7F800000;
      }
      else {
        BOOL v23 = 0;
      }
      v22 += v23;
      v20 += 8;
    }
    while (v20 != v21);
  }
  if (v22 >= a2) {
    unint64_t v24 = a2;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v24)
  {
    if (v24 >= 0x4189374BC6A7F0) {
      abort();
    }
    uint64_t v77 = a5 + 16;
    uint64_t v73 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v24);
    uint64_t v74 = (void ***)v73;
    uint64_t v75 = (uint64_t)v73;
    uint64_t v76 = &v73[125 * v25];
    std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a5, &v73);
    std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v73);
  }
  char v26 = std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__base_destruct_at_end[abi:nn180100]((unsigned int *)(a1 + 224), *(void *)(a1 + 224));
  uint64_t v73 = 0;
  uint64_t v74 = &v73;
  uint64_t v75 = 0x2000000000;
  uint64_t v76 = 0;
  unsigned int v64 = 0;
  uint64_t v65 = &v64;
  uint64_t v66 = 0x2000000000;
  uint64_t v67 = 0;
  v59[0] = MEMORY[0x1E4F143A8];
  v59[1] = 0x40000000;
  char v60 = ___ZNK2TI8Favonius10BeamSearch19generate_candidatesEmPN2KB6StringENS2_10LookupTypeEf_block_invoke_3;
  std::string v61 = &unk_1E6E2C4A0;
  std::string v62 = (void ***)&v64;
  uint64_t v63 = &v73;
  double v27 = KB::system_uptime((KB *)v26);
  double v28 = *(double *)(*(void *)(a1 + 24) + 40);
  TI::Favonius::SearchNodeResultQueue::next_word_node((unsigned int **)buf, (unsigned int **)v72);
  uint64_t v29 = *(void *)v72;
  uint64_t v58 = *(void *)v72;
  if (*(void *)v72)
  {
    double v30 = v27 + v28;
    do
    {
      if ((((uint64_t (*)(void *, unint64_t))v60)(v59, a2) & 1) == 0)
      {
        unint64_t v31 = (KB *)((uint64_t (*)(void *, unint64_t))v60)(v59, 2 * a2);
        if (!v31 || KB::system_uptime(v31) >= v30) {
          break;
        }
      }
      if ((*(_WORD *)(*(void *)(*(uint64_t (**)(void))(**(void **)(v29 + 56) + 16))(*(void *)(v29 + 56))
                     + 60) & 0x20) != 0)
      {
        TI::Favonius::SearchNodeResultQueue::next_word_node((unsigned int **)buf, (unsigned int **)v72);
        uint64_t v45 = *(void *)v72;
        *(void *)uint64_t v72 = 0;
        uint64_t v58 = v45;
      }
      else
      {
        int v32 = TI::Favonius::SearchNode::unshift_mask((TI::Favonius::SearchNode *)v29, *(const TI::Favonius::SearchNode ****)(a1 + 280));
        unint64_t v33 = (*(void *)(a5 + 8) - *(void *)a5) / 1000;
        TI::Favonius::SearchNode::candidates(v29, *(void *)(a1 + 32), a1 + 48, (void *)a5, a6);
        uint64_t v34 = *(void *)a5;
        unint64_t v35 = 0x1CAC083126E978D5 * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
        if (v33 < v35 && !*(void *)(v29 + 16))
        {
          std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::push_back[abi:nn180100]((void *)(a1 + 224), &v58);
          uint64_t v34 = *(void *)a5;
          unint64_t v35 = 0x1CAC083126E978D5 * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
        }
        BOOL v36 = v35 > v33;
        unint64_t v37 = v35 - v33;
        if (v36)
        {
          char v38 = 0;
          int v39 = (*(void *)(v29 + 16) == 0) << 19;
          unint64_t v40 = v34 + 1000 * v33;
          do
          {
            *(_DWORD *)(v40 + 780) = v32;
            uint64_t v41 = *(void *)v40;
            uint64_t v42 = *(void *)(v40 + 8) + 240 * *(void *)v40;
            int v43 = *(_DWORD *)(v42 - 136);
            *(_DWORD *)(v42 - 136) = v43 & 0xFFF7FFFF | v39;
            if (v41) {
              v38 |= (v43 & 0x800000) == 0;
            }
            v40 += 1000;
            --v37;
          }
          while (v37);
          if (v38) {
            v65[3] = (void ***)((char *)v65[3] + 1);
          }
        }
        TI::Favonius::SearchNodeResultQueue::next_word_node((unsigned int **)buf, (unsigned int **)v72);
        uint64_t v44 = *(void *)v72;
        *(void *)uint64_t v72 = 0;
        uint64_t v58 = v44;
        if (!v29) {
          goto LABEL_56;
        }
      }
      unsigned int v46 = atomic_load((unsigned int *)(v29 + 8));
      if (v46 == 1) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)(v29 + 8), 0xFFFFFFFF);
      }
      if (*(void *)v72)
      {
        unsigned int v47 = atomic_load((unsigned int *)(*(void *)v72 + 8));
        if (v47 == 1) {
          (*(void (**)(void))(**(void **)v72 + 8))();
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)(*(void *)v72 + 8), 0xFFFFFFFF);
        }
      }
LABEL_56:
      v74[3] = (void **)((char *)v74[3] + 1);
      uint64_t v29 = v58;
    }
    while (v58);
  }
  uint64_t v48 = *(uint64_t **)a5;
  uint64_t v49 = *(uint64_t **)(a5 + 8);
  unint64_t v50 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v49 - *(void *)a5) >> 3));
  BOOL v51 = v49 == *(uint64_t **)a5;
  *(void *)uint64_t v72 = &__block_literal_global_23;
  if (v51) {
    uint64_t v52 = 0;
  }
  else {
    uint64_t v52 = v50;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,false>(v48, v49, (uint64_t)v72, v52, 1);
  kdebug_trace();
  uint64_t v53 = kac_get_log();
  os_signpost_id_t v54 = os_signpost_id_make_with_pointer(v53, ptr);
  if (v54 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v55 = v54;
    if (os_signpost_enabled(v53))
    {
      *(_WORD *)uint64_t v72 = 0;
      _os_signpost_emit_with_name_impl(&dword_1E3F0E000, v53, OS_SIGNPOST_INTERVAL_END, v55, "kbdManager.beamSearchCandidateGeneration", (const char *)&unk_1E41704BE, v72, 2u);
    }
  }
  if (v29)
  {
    unsigned int v56 = atomic_load((unsigned int *)(v29 + 8));
    if (v56 == 1) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)(v29 + 8), 0xFFFFFFFF);
    }
  }
  _Block_object_dispose(&v64, 8);
  _Block_object_dispose(&v73, 8);
  uint64_t v73 = (void **)&v83[8];
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v73);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  uint64_t v73 = &v79;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v73);
}

void *TI::Favonius::BeamSearch::filtered_beam_for_candidate_generation@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::reserve(a4, a2[1] - *a2);
  int v9 = *a2;
  uint64_t v10 = a2[1];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  uint64_t v12 = ___ZNK2TI8Favonius10BeamSearch38filtered_beam_for_candidate_generationERKNSt3__16vectorIN3WTF6RefPtrINS0_10SearchNodeEEENS2_9allocatorIS7_EEEEN2KB10LookupTypeE_block_invoke;
  os_signpost_id_t v13 = &__block_descriptor_tmp_13;
  uint64_t v14 = a1;
  int v15 = a3;
  while (v9 != v10)
  {
    uint64_t result = (void *)v12((uint64_t)v11, (uint64_t)v9);
    if (result) {
      uint64_t result = std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::push_back[abi:nn180100](a4, v9);
    }
    ++v9;
  }
  return result;
}

uint64_t ___ZNK2TI8Favonius10BeamSearch19generate_candidatesEmPN2KB6StringENS2_10LookupTypeEf_block_invoke@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(result + 48))
  {
    uint64_t result = TI::Favonius::BeamSearch::should_extend_for_prediction(*(void *)(result + 32), a2, *(_DWORD *)(result + 40));
    if (result)
    {
      uint64_t v5 = *a2;
      if (*(void *)(v5 + 16))
      {
        unsigned int v6 = *(_DWORD *)(v5 + 164);
        if (v6 >= 5) {
          unsigned int v6 = 5;
        }
        float v7 = TI::Favonius::SearchParameters::k_prediction_costs[v6];
      }
      else
      {
        float v7 = 0.8;
      }
      logf(v7);
      TI::Favonius::SearchNodeLanguageExtensions::create();
    }
  }
  *a3 = 0;
  return result;
}

BOOL ___ZNK2TI8Favonius10BeamSearch19generate_candidatesEmPN2KB6StringENS2_10LookupTypeEf_block_invoke_3(uint64_t a1, unint64_t a2)
{
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < a2
      && *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) < 4 * a2;
}

void *std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::push_back[abi:nn180100](void *result, uint64_t *a2)
{
  uint64_t v3 = (uint64_t **)result;
  float v4 = result + 2;
  unint64_t v5 = result[2];
  unsigned int v6 = (uint64_t *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = ((uint64_t)v6 - *result) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v5 - *result;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v25 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (uint64_t *)(v12 + 8 * v9);
    unint64_t v22 = v12;
    v23.i64[0] = (uint64_t)v14;
    v23.i64[1] = (uint64_t)v14;
    unint64_t v24 = v12 + 8 * v13;
    uint64_t v15 = *a2;
    *uint64_t v14 = *a2;
    if (v15)
    {
      atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
      unint64_t v16 = v23.u64[1];
      uint64_t v14 = (uint64_t *)v23.i64[0];
    }
    else
    {
      unint64_t v16 = v12 + 8 * v9;
    }
    uint64_t v8 = (uint64_t *)(v16 + 8);
    v23.i64[1] = v16 + 8;
    uint64_t v18 = *v3;
    uint64_t v17 = v3[1];
    if (v17 == *v3)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *--v17;
        *uint64_t v17 = 0;
        *--uint64_t v14 = v19;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)v3;
      uint64_t v8 = (uint64_t *)v23.i64[1];
    }
    atomic_uint *v3 = v14;
    v3[1] = v8;
    int64x2_t v23 = v20;
    unint64_t v21 = (unint64_t)v3[2];
    v3[2] = (uint64_t *)v24;
    unint64_t v24 = v21;
    unint64_t v22 = v20.i64[0];
    uint64_t result = (void *)std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    uint64_t v7 = *a2;
    *unsigned int v6 = *a2;
    if (v7) {
      atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
    }
    uint64_t v8 = v6 + 1;
  }
  v3[1] = v8;
  return result;
}

BOOL ___ZNK2TI8Favonius10BeamSearch19generate_candidatesEmPN2KB6StringENS2_10LookupTypeEf_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4 = expf(*(float *)(a2 + 744));
  return v4 > expf(*(float *)(a3 + 744));
}

uint64_t TI::Favonius::BeamSearch::should_extend_for_prediction(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3 = *a2;
  if (a3 != 1 && *(_DWORD *)(v3 + 168) > *(_DWORD *)(*(void *)(a1 + 280) + 168)) {
    return 0;
  }
  uint64_t v5 = *(void *)(v3 + 56);
  if (!v5) {
    return 1;
  }
  if ((*(_WORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5) + 60) & 8) == 0) {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 72))(v5);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t ___ZNK2TI8Favonius10BeamSearch38filtered_beam_for_candidate_generationERKNSt3__16vectorIN3WTF6RefPtrINS0_10SearchNodeEEENS2_9allocatorIS7_EEEEN2KB10LookupTypeE_block_invoke(uint64_t a1, uint64_t a2)
{
  return TI::Favonius::BeamSearch::should_consider_for_candidate_generation(*(void *)(a1 + 32), a2, *(_DWORD *)(a1 + 40));
}

uint64_t TI::Favonius::BeamSearch::should_consider_for_candidate_generation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 32);
  if (!v3) {
    return 1;
  }
  int v4 = *(unsigned __int16 *)(*(void *)a2 + 120);
  if ((v4 & 0x4E) != 0 || a3 == 1 && (v4 & 0x80) != 0) {
    return 1;
  }
  if ((v4 & 0x300) == 0 || v4 != *(unsigned __int16 *)(*(void *)(a1 + 280) + 120)) {
    return 0;
  }
  uint64_t v8 = *(unsigned int **)(*(void *)a2 + 32);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  should_consider_for_candidate_generatiouint64_t n = TI::Favonius::BeamSearch::should_consider_for_candidate_generation();
  if (v8)
  {
    unsigned int v7 = atomic_load(v8 + 2);
    if (v7 == 1) {
      (*(void (**)(void))(*(void *)v8 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF);
    }
  }
  return should_consider_for_candidate_generation;
}

void TI::Favonius::BeamSearch::drop_touches(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, atomic_uint **a5@<X4>, atomic_uint **a6@<X5>, void ***a7@<X8>)
{
  *(_OWORD *)uint64_t v29 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v31 = 1065353216;
  double v28 = 0;
  uint64_t v11 = *(unint64_t **)a2;
  unint64_t v12 = *(void *)(a2 + 8);
  unint64_t v13 = (unint64_t)&v11[v12 >> 6];
  uint64_t v14 = v12 & 0x3F;
  if (v12 < 0x40)
  {
LABEL_4:
    if (v12)
    {
      int v15 = __clz(__rbit64(*v11 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v12)));
      if ((*v11 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v12)) != 0) {
        LODWORD(v12) = v15;
      }
    }
  }
  else
  {
    while (!*v11)
    {
      ++v11;
      v12 -= 64;
      if (v12 <= 0x3F) {
        goto LABEL_4;
      }
    }
    LODWORD(v12) = __clz(__rbit64(*v11));
  }
  uint64_t v16 = v12;
  uint64_t v17 = *a5;
  *a5 = 0;
  uint64_t v18 = *a6;
  *a6 = 0;
  char v26 = v18;
  double v27 = v17;
  TI::Favonius::BeamSearch::drop_touches(a1, (uint64_t)v11, v16, v13, v14, a3, a4, &v27, a7, &v26, (uint64_t)v29, &v28);
  if (v26)
  {
    unsigned int v19 = atomic_load((unsigned int *)v26 + 2);
    if (v19 == 1) {
      (*(void (**)(void))(*(void *)v26 + 8))();
    }
    else {
      atomic_fetch_add(v26 + 2, 0xFFFFFFFF);
    }
  }
  if (v27)
  {
    unsigned int v20 = atomic_load((unsigned int *)v27 + 2);
    if (v20 == 1) {
      (*(void (**)(void))(*(void *)v27 + 40))();
    }
    else {
      atomic_fetch_add(v27 + 2, 0xFFFFFFFF);
    }
  }
  unint64_t v21 = __p[0];
  if (__p[0])
  {
    do
    {
      unint64_t v22 = v21;
      unint64_t v21 = (void *)*v21;
      int64x2_t v23 = (unsigned int *)v22[3];
      if (v23)
      {
        unsigned int v24 = atomic_load(v23 + 2);
        if (v24 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v23 + 8))(v23);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v23 + 2, 0xFFFFFFFF);
        }
      }
      operator delete(v22);
    }
    while (v21);
  }
  uint64_t v25 = v29[0];
  v29[0] = 0;
  if (v25) {
    operator delete(v25);
  }
}

void TI::Favonius::BeamSearch::drop_touches(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, atomic_uint **a8@<X7>, void ***a9@<X8>, atomic_uint **a10, uint64_t a11, atomic_uint **a12)
{
  uint64_t v15 = a3;
  uint64_t v18 = *a8;
  *a8 = 0;
  unsigned int v19 = *a10;
  *a10 = 0;
  if (a2 != a4 || a3 != a5)
  {
    if (!a1[2]) {
      goto LABEL_23;
    }
    uint64_t v25 = a5 - 1;
    if (a5 >= 0x40uLL) {
      uint64_t v25 = a5 - 64;
    }
    char v26 = (void *)(a4 + 8 * (v25 >> 6));
    char v27 = a5 - 1;
    unint64_t v104 = (unsigned int *)v18;
    if (v18) {
      atomic_fetch_add(v18 + 2, 1u);
    }
    unsigned int v96 = v18;
    unsigned int v103 = (unsigned int *)v19;
    if (v19) {
      atomic_fetch_add(v19 + 2, 1u);
    }
    uint64_t v100 = v19;
    TI::Favonius::BeamSearch::drop_touches(&v108);
    double v28 = v108;
    int64_t v108 = 0;
    if (v103)
    {
      unsigned int v29 = atomic_load(v103 + 2);
      if (v29 == 1) {
        (*(void (**)(void))(*(void *)v103 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v103 + 2, 0xFFFFFFFF);
      }
    }
    unsigned int v19 = v100;
    if (v104)
    {
      unsigned int v31 = atomic_load(v104 + 2);
      if (v31 != 1)
      {
        atomic_fetch_add((atomic_uint *volatile)v104 + 2, 0xFFFFFFFF);
        if (v28) {
          goto LABEL_33;
        }
        goto LABEL_64;
      }
      (*(void (**)(void))(*(void *)v104 + 40))();
      unsigned int v19 = v100;
    }
    if (v28)
    {
LABEL_33:
      if ((*v26 >> (v27 & 0x3F)))
      {
        unsigned int v95 = (unsigned int *)v28;
        int64x2_t v101 = 0uLL;
        unint64_t v102 = 0;
        unint64_t v33 = (unint64_t *)a1[25];
        int v32 = (unint64_t *)a1[26];
        if (v33 != v32)
        {
          do
          {
            TI::Favonius::BeamSearch::clone_search_node((unint64_t)a1, *v33, a2, v15, a4, a5, a11, *a12, (atomic_uint **)&v108);
            uint64_t v34 = (atomic_uint *)v108;
            if (v108)
            {
              uint64_t v35 = v101.i64[1];
              if (v101.i64[1] >= v102)
              {
                uint64_t v37 = (v101.i64[1] - v101.i64[0]) >> 3;
                if ((unint64_t)(v37 + 1) >> 61) {
                  abort();
                }
                unint64_t v38 = (uint64_t)(v102 - v101.i64[0]) >> 2;
                if (v38 <= v37 + 1) {
                  unint64_t v38 = v37 + 1;
                }
                if (v102 - v101.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v39 = v38;
                }
                uint64_t v111 = &v102;
                if (v39) {
                  unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v39);
                }
                else {
                  uint64_t v40 = 0;
                }
                int64_t v108 = (void **)v39;
                v109.i64[0] = v39 + 8 * v37;
                v109.i64[1] = v109.i64[0];
                unint64_t v110 = v39 + 8 * v40;
                *(void *)v109.i64[0] = v34;
                atomic_fetch_add(v34 + 2, 1u);
                uint64_t v41 = v109.i64[0];
                uint64_t v36 = v109.i64[1] + 8;
                v109.i64[1] += 8;
                uint64_t v42 = (void *)v101.i64[1];
                int v43 = (void *)v101.i64[0];
                if (v101.i64[1] == v101.i64[0])
                {
                  int64x2_t v45 = vdupq_n_s64(v101.u64[1]);
                }
                else
                {
                  do
                  {
                    uint64_t v44 = *--v42;
                    *uint64_t v42 = 0;
                    *(void *)(v41 - 8) = v44;
                    v41 -= 8;
                  }
                  while (v42 != v43);
                  int64x2_t v45 = v101;
                  uint64_t v36 = v109.i64[1];
                }
                v101.i64[0] = v41;
                v101.i64[1] = v36;
                int64x2_t v109 = v45;
                unint64_t v46 = v102;
                unint64_t v102 = v110;
                unint64_t v110 = v46;
                int64_t v108 = (void **)v45.i64[0];
                std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v108);
              }
              else
              {
                *(void *)v101.i64[1] = v108;
                uint64_t v36 = v35 + 8;
                atomic_fetch_add(v34 + 2, 1u);
              }
              v101.i64[1] = v36;
              unsigned int v47 = atomic_load((unsigned int *)v34 + 2);
              if (v47 == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v34 + 8))(v34);
              }
              else {
                atomic_fetch_add(v34 + 2, 0xFFFFFFFF);
              }
            }
            ++v33;
          }
          while (v33 != v32);
          if (v101.i64[0] != v101.i64[1])
          {
            TI::Favonius::BeamSearch::clone_search_node((unint64_t)a1, a1[35], a2, v15, a4, a5, a11, *a12, (atomic_uint **)&v108);
            if (v108) {
              operator new();
            }
          }
        }
        *a9 = 0;
        int64_t v108 = (void **)&v101;
        std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v108);
        unsigned int v78 = atomic_load(v95 + 2);
        uint64_t v18 = v96;
        if (v78 == 1) {
          (*(void (**)(void))(*(void *)v95 + 8))();
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v95 + 2, 0xFFFFFFFF);
        }
        goto LABEL_168;
      }
      *a9 = v28;
LABEL_126:
      uint64_t v18 = v96;
      goto LABEL_169;
    }
LABEL_64:
    *a9 = 0;
    goto LABEL_126;
  }
  unint64_t v20 = a1[3];
  if (!v20)
  {
LABEL_23:
    *a9 = 0;
    goto LABEL_169;
  }
  uint64_t v107 = (unsigned int *)v18;
  if (v18) {
    atomic_fetch_add(v18 + 2, 1u);
  }
  uint64_t v106 = (unsigned int *)v19;
  if (v19) {
    atomic_fetch_add(v19 + 2, 1u);
  }
  uint64_t v100 = v19;
  uint64_t v22 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  unint64_t v105 = (unsigned int *)v22;
  if (v22) {
    atomic_fetch_add((atomic_uint *volatile)(v22 + 8), 1u);
  }
  (**(void (***)(void ***__return_ptr, unint64_t, uint64_t, uint64_t, unsigned int **, unsigned int **, unsigned int **))v20)(&v108, v20, a6, a7, &v107, &v106, &v105);
  int64x2_t v23 = v108;
  int64_t v108 = 0;
  if (v105)
  {
    unsigned int v24 = atomic_load(v105 + 2);
    if (v24 == 1) {
      (*(void (**)(void))(*(void *)v105 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v105 + 2, 0xFFFFFFFF);
    }
  }
  if (v106)
  {
    unsigned int v30 = atomic_load(v106 + 2);
    if (v30 == 1) {
      (*(void (**)(void))(*(void *)v106 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v106 + 2, 0xFFFFFFFF);
    }
  }
  if (v107)
  {
    unsigned int v48 = atomic_load(v107 + 2);
    if (v48 == 1) {
      (*(void (**)(void))(*(void *)v107 + 40))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v107 + 2, 0xFFFFFFFF);
    }
  }
  *a12 = (atomic_uint *)v23[35];
  if (v18 && ((*(uint64_t (**)(atomic_uint *))(*(void *)v18 + 8))(v18) & 1) != 0)
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1[35] + 56) + 64))(*(void *)(a1[35] + 56))) {
      std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::__emplace_unique_key_args<TI::Favonius::SearchNode *,TI::Favonius::SearchNode *,TI::Favonius::SearchNode *&>(a11, a1[35], a1[35], (uint64_t)*a12);
    }
    unint64_t v49 = *(void *)(a11 + 24);
    if (v49 <= 2)
    {
      unint64_t v50 = (unint64_t *)a1[25];
      if (v50 != (unint64_t *)a1[26])
      {
        BOOL v97 = (void *)(a11 + 16);
        while (1)
        {
          unint64_t v51 = *v50;
          if (!std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::find<TI::Favonius::SearchNode *>(*(void *)a11, *(void *)(a11 + 8), *v50))
          {
            if ((*(unsigned int (**)(void))(**(void **)(v51 + 56) + 64))(*(void *)(v51 + 56))) {
              break;
            }
          }
LABEL_102:
          unint64_t v49 = *(void *)(a11 + 24);
LABEL_103:
          if (v49 >= 3) {
            goto LABEL_167;
          }
          if (++v50 == (unint64_t *)a1[26]) {
            goto LABEL_154;
          }
        }
        unint64_t v52 = 0x9DDFEA08EB382D69 * (((8 * v51) + 8) ^ HIDWORD(v51));
        unint64_t v53 = 0x9DDFEA08EB382D69 * (HIDWORD(v51) ^ (v52 >> 47) ^ v52);
        unint64_t v54 = 0x9DDFEA08EB382D69 * (v53 ^ (v53 >> 47));
        unint64_t v55 = *(void *)(a11 + 8);
        if (v55)
        {
          uint8x8_t v56 = (uint8x8_t)vcnt_s8((int8x8_t)v55);
          v56.i16[0] = vaddlv_u8(v56);
          if (v56.u32[0] > 1uLL)
          {
            uint64_t v15 = 0x9DDFEA08EB382D69 * (v53 ^ (v53 >> 47));
            if (v54 >= v55) {
              uint64_t v15 = v54 % v55;
            }
          }
          else
          {
            uint64_t v15 = v54 & (v55 - 1);
          }
          uint64_t v57 = *(void **)(*(void *)a11 + 8 * v15);
          if (v57)
          {
            for (unint64_t i = (void *)*v57; i; unint64_t i = (void *)*i)
            {
              unint64_t v59 = i[1];
              if (v59 == v54)
              {
                if (i[2] == v51) {
                  goto LABEL_102;
                }
              }
              else
              {
                if (v56.u32[0] > 1uLL)
                {
                  if (v59 >= v55) {
                    v59 %= v55;
                  }
                }
                else
                {
                  v59 &= v55 - 1;
                }
                if (v59 != v15) {
                  break;
                }
              }
            }
          }
        }
        char v60 = operator new(0x20uLL);
        void *v60 = 0;
        v60[1] = v54;
        std::string v61 = *a12;
        v60[2] = v51;
        v60[3] = v61;
        if (v61) {
          atomic_fetch_add(v61 + 2, 1u);
        }
        float v62 = (float)(unint64_t)(*(void *)(a11 + 24) + 1);
        float v63 = *(float *)(a11 + 32);
        if (!v55 || (float)(v63 * (float)v55) < v62)
        {
          BOOL v64 = (v55 & (v55 - 1)) != 0;
          if (v55 < 3) {
            BOOL v64 = 1;
          }
          unint64_t v65 = v64 | (2 * v55);
          unint64_t v66 = vcvtps_u32_f32(v62 / v63);
          if (v65 <= v66) {
            size_t v67 = v66;
          }
          else {
            size_t v67 = v65;
          }
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a11, v67);
          unint64_t v55 = *(void *)(a11 + 8);
          if ((v55 & (v55 - 1)) != 0)
          {
            if (v54 >= v55) {
              uint64_t v15 = v54 % v55;
            }
            else {
              uint64_t v15 = v54;
            }
          }
          else
          {
            uint64_t v15 = (v55 - 1) & v54;
          }
        }
        uint64_t v68 = *(void *)a11;
        int v69 = *(void **)(*(void *)a11 + 8 * v15);
        if (v69)
        {
          void *v60 = *v69;
        }
        else
        {
          void *v60 = *v97;
          *BOOL v97 = v60;
          *(void *)(v68 + 8 * v15) = v97;
          if (!*v60)
          {
LABEL_118:
            unint64_t v49 = *(void *)(a11 + 24) + 1;
            *(void *)(a11 + 24) = v49;
            goto LABEL_103;
          }
          unint64_t v70 = *(void *)(*v60 + 8);
          if ((v55 & (v55 - 1)) != 0)
          {
            if (v70 >= v55) {
              v70 %= v55;
            }
          }
          else
          {
            v70 &= v55 - 1;
          }
          int v69 = (void *)(*(void *)a11 + 8 * v70);
        }
        *int v69 = v60;
        goto LABEL_118;
      }
LABEL_154:
      if (!v49) {
        std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::__emplace_unique_key_args<TI::Favonius::SearchNode *,TI::Favonius::SearchNode *,TI::Favonius::SearchNode *&>(a11, a1[35], a1[35], (uint64_t)*a12);
      }
    }
    goto LABEL_167;
  }
  unint64_t v71 = a1[35];
  uint64_t v72 = (atomic_uint *)v23[35];
  unint64_t v73 = 0x9DDFEA08EB382D69 * (((8 * v71) + 8) ^ HIDWORD(v71));
  unint64_t v74 = 0x9DDFEA08EB382D69 * (HIDWORD(v71) ^ (v73 >> 47) ^ v73);
  unint64_t v75 = 0x9DDFEA08EB382D69 * (v74 ^ (v74 >> 47));
  unint64_t v76 = *(void *)(a11 + 8);
  if (v76)
  {
    uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)v76);
    v77.i16[0] = vaddlv_u8(v77);
    if (v77.u32[0] > 1uLL)
    {
      unint64_t v20 = 0x9DDFEA08EB382D69 * (v74 ^ (v74 >> 47));
      if (v75 >= v76) {
        unint64_t v20 = v75 % v76;
      }
    }
    else
    {
      unint64_t v20 = v75 & (v76 - 1);
    }
    int v79 = *(void **)(*(void *)a11 + 8 * v20);
    if (v79)
    {
      for (uint64_t j = (void *)*v79; j; uint64_t j = (void *)*j)
      {
        unint64_t v81 = j[1];
        if (v81 == v75)
        {
          if (j[2] == v71) {
            goto LABEL_167;
          }
        }
        else
        {
          if (v77.u32[0] > 1uLL)
          {
            if (v81 >= v76) {
              v81 %= v76;
            }
          }
          else
          {
            v81 &= v76 - 1;
          }
          if (v81 != v20) {
            break;
          }
        }
      }
    }
  }
  uint64_t v82 = operator new(0x20uLL);
  *uint64_t v82 = 0;
  v82[1] = v75;
  v82[2] = v71;
  v82[3] = v72;
  if (v72) {
    atomic_fetch_add(v72 + 2, 1u);
  }
  float v83 = (float)(unint64_t)(*(void *)(a11 + 24) + 1);
  float v84 = *(float *)(a11 + 32);
  if (!v76 || (float)(v84 * (float)v76) < v83)
  {
    BOOL v85 = 1;
    if (v76 >= 3) {
      BOOL v85 = (v76 & (v76 - 1)) != 0;
    }
    unint64_t v86 = v85 | (2 * v76);
    unint64_t v87 = vcvtps_u32_f32(v83 / v84);
    if (v86 <= v87) {
      size_t v88 = v87;
    }
    else {
      size_t v88 = v86;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a11, v88);
    unint64_t v76 = *(void *)(a11 + 8);
    if ((v76 & (v76 - 1)) != 0)
    {
      if (v75 >= v76) {
        unint64_t v20 = v75 % v76;
      }
      else {
        unint64_t v20 = v75;
      }
    }
    else
    {
      unint64_t v20 = (v76 - 1) & v75;
    }
  }
  uint64_t v89 = *(void *)a11;
  char v90 = *(void **)(*(void *)a11 + 8 * v20);
  if (v90)
  {
    *uint64_t v82 = *v90;
LABEL_165:
    void *v90 = v82;
    goto LABEL_166;
  }
  uint64_t v91 = *(void *)(a11 + 16);
  *uint64_t v82 = v91;
  *(void *)(a11 + 16) = v82;
  *(void *)(v89 + 8 * v20) = a11 + 16;
  if (v91)
  {
    unint64_t v92 = *(void *)(v91 + 8);
    if ((v76 & (v76 - 1)) != 0)
    {
      if (v92 >= v76) {
        v92 %= v76;
      }
    }
    else
    {
      v92 &= v76 - 1;
    }
    char v90 = (void *)(*(void *)a11 + 8 * v92);
    goto LABEL_165;
  }
LABEL_166:
  ++*(void *)(a11 + 24);
LABEL_167:
  *a9 = v23;
LABEL_168:
  unsigned int v19 = v100;
LABEL_169:
  if (v19)
  {
    unsigned int v93 = atomic_load((unsigned int *)v19 + 2);
    if (v93 == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v19 + 8))(v19);
    }
    else {
      atomic_fetch_add(v19 + 2, 0xFFFFFFFF);
    }
  }
  if (v18)
  {
    unsigned int v94 = atomic_load((unsigned int *)v18 + 2);
    if (v94 == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v18 + 40))(v18);
    }
    else {
      atomic_fetch_add(v18 + 2, 0xFFFFFFFF);
    }
  }
}

void std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::__emplace_unique_key_args<TI::Favonius::SearchNode *,TI::Favonius::SearchNode *,TI::Favonius::SearchNode *&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (unint64_t i = (void *)*v13; i; unint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x20uLL);
  *uint64_t v16 = 0;
  v16[1] = v10;
  void v16[2] = a3;
  void v16[3] = a4;
  if (a4) {
    atomic_fetch_add((atomic_uint *volatile)(a4 + 8), 1u);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  unsigned int v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t v16 = *v24;
LABEL_40:
    *unsigned int v24 = v16;
    goto LABEL_41;
  }
  uint64_t v25 = *(void *)(a1 + 16);
  *uint64_t v16 = v25;
  *(void *)(a1 + 16) = v16;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (v25)
  {
    unint64_t v26 = *(void *)(v25 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }
    else
    {
      v26 &= v11 - 1;
    }
    unsigned int v24 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
}

void *std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::find<TI::Favonius::SearchNode *>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= a2) {
      unint64_t v7 = v5 % a2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (a2 - 1);
  }
  unint64_t v8 = *(void **)(a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= a2) {
            v10 %= a2;
          }
        }
        else
        {
          v10 &= a2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void TI::Favonius::BeamSearch::clone_search_node(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, atomic_uint *a8@<X7>, atomic_uint **a9@<X8>)
{
  float v18 = std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::find<TI::Favonius::SearchNode *>(*(void *)a7, *(void *)(a7 + 8), a2);
  if (v18)
  {
    BOOL v19 = (atomic_uint *)v18[3];
    *a9 = v19;
    if (v19)
    {
      unint64_t v20 = v19 + 2;
      unsigned int v21 = 1;
LABEL_4:
      atomic_fetch_add(v20, v21);
      return;
    }
    return;
  }
  if (a3 == a5 && a4 == a6) {
    goto LABEL_19;
  }
  if ((*(unsigned int (**)(unint64_t))(*(void *)a2 + 56))(a2) == 2
    && a3 + ((((unint64_t)a4 + 1) >> 3) & 0x3FFFFFF8) == a5
    && (((_BYTE)a4 + 1) & 0x3F) == a6)
  {
    if (a8)
    {
      atomic_fetch_add(a8 + 2, 1u);
      goto LABEL_22;
    }
LABEL_19:
    std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::__emplace_unique_key_args<TI::Favonius::SearchNode *,TI::Favonius::SearchNode *&,decltype(nullptr)>(a7, a2, a2);
    *a9 = 0;
    return;
  }
  uint64_t v24 = *(void *)(a2 + 32);
  unsigned int v25 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 56))(a2);
  int64_t v26 = a6 - (unint64_t)v25;
  int64_t v27 = v26 - 63;
  if (v26 < 63) {
    int64_t v27 = a6 - (unint64_t)v25;
  }
  uint64_t v28 = v27 >> 6;
  unint64_t v29 = (unint64_t)v26 >> 6;
  if (v25) {
    unint64_t v29 = v28;
  }
  TI::Favonius::BeamSearch::clone_search_node(&v56, a1, v24, a3, a4, a5 + 8 * v29, a6 & 0xFFFFFFFF00000000 | ((_BYTE)a6 - (_BYTE)v25) & 0x3F, a7, a8);
  a8 = v56;
  if (!v56) {
    goto LABEL_19;
  }
LABEL_22:
  if ((*(unsigned int (**)(unint64_t))(*(void *)a2 + 56))(a2) == 1)
  {
    uint64_t v30 = a6 - 1;
    if (a6 >= 0x40uLL) {
      uint64_t v30 = a6 - 64;
    }
    if ((*(void *)(a5 + 8 * (v30 >> 6)) >> (a6 - 1))) {
      goto LABEL_26;
    }
LABEL_42:
    uint64_t v35 = 0;
    goto LABEL_43;
  }
  unint64_t v31 = a3 + ((((unint64_t)(a4 & 0xFFFFFFFE) + 2) >> 3) & 0x3FFFFFF8);
  if (v31 > a5 || v31 == a5 && (((_BYTE)a4 + 2) & 0x3Fu) > a6) {
    goto LABEL_37;
  }
  uint64_t v32 = a6 - 65;
  if (a6 < 0x41uLL) {
    uint64_t v32 = a6 - 2;
  }
  if (((*(void *)(a5 + 8 * (v32 >> 6)) >> (a6 + 62)) & 1) == 0)
  {
LABEL_37:
    uint64_t v34 = a6 - 1;
    if (a6 >= 0x40uLL) {
      uint64_t v34 = a6 - 64;
    }
    if ((*(void *)(a5 + 8 * (v34 >> 6)) >> (a6 - 1)))
    {
      (*(void (**)(atomic_uint **__return_ptr, unint64_t, atomic_uint *))(*(void *)a2 + 80))(&v56, a2, a8);
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  uint64_t v33 = a6 - 1;
  if (a6 >= 0x40uLL) {
    uint64_t v33 = a6 - 64;
  }
  if (((*(void *)(a5 + 8 * (v33 >> 6)) >> (a6 - 1)) & 1) == 0)
  {
    (*(void (**)(atomic_uint **__return_ptr, unint64_t, atomic_uint *))(*(void *)a2 + 88))(&v56, a2, a8);
    goto LABEL_41;
  }
LABEL_26:
  (*(void (**)(atomic_uint **__return_ptr, unint64_t, atomic_uint *))(*(void *)a2 + 72))(&v56, a2, a8);
LABEL_41:
  uint64_t v35 = v56;
LABEL_43:
  unint64_t v36 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v37 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v36 >> 47) ^ v36);
  unint64_t v38 = 0x9DDFEA08EB382D69 * (v37 ^ (v37 >> 47));
  unint64_t v39 = *(void *)(a7 + 8);
  if (v39)
  {
    uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.u32[0] > 1uLL)
    {
      a1 = 0x9DDFEA08EB382D69 * (v37 ^ (v37 >> 47));
      if (v38 >= v39) {
        a1 = v38 % v39;
      }
    }
    else
    {
      a1 = v38 & (v39 - 1);
    }
    uint64_t v41 = *(void **)(*(void *)a7 + 8 * a1);
    if (v41)
    {
      for (unint64_t i = (void *)*v41; i; unint64_t i = (void *)*i)
      {
        unint64_t v43 = i[1];
        if (v43 == v38)
        {
          if (i[2] == a2) {
            goto LABEL_84;
          }
        }
        else
        {
          if (v40.u32[0] > 1uLL)
          {
            if (v43 >= v39) {
              v43 %= v39;
            }
          }
          else
          {
            v43 &= v39 - 1;
          }
          if (v43 != a1) {
            break;
          }
        }
      }
    }
  }
  uint64_t v44 = operator new(0x20uLL);
  *uint64_t v44 = 0;
  v44[1] = v38;
  _OWORD v44[2] = a2;
  v44[3] = v35;
  if (v35) {
    atomic_fetch_add(v35 + 2, 1u);
  }
  float v45 = (float)(unint64_t)(*(void *)(a7 + 24) + 1);
  float v46 = *(float *)(a7 + 32);
  if (!v39 || (float)(v46 * (float)v39) < v45)
  {
    BOOL v47 = 1;
    if (v39 >= 3) {
      BOOL v47 = (v39 & (v39 - 1)) != 0;
    }
    unint64_t v48 = v47 | (2 * v39);
    unint64_t v49 = vcvtps_u32_f32(v45 / v46);
    if (v48 <= v49) {
      size_t v50 = v49;
    }
    else {
      size_t v50 = v48;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a7, v50);
    unint64_t v39 = *(void *)(a7 + 8);
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v38 >= v39) {
        a1 = v38 % v39;
      }
      else {
        a1 = v38;
      }
    }
    else
    {
      a1 = (v39 - 1) & v38;
    }
  }
  uint64_t v51 = *(void *)a7;
  unint64_t v52 = *(void **)(*(void *)a7 + 8 * a1);
  if (v52)
  {
    *uint64_t v44 = *v52;
  }
  else
  {
    uint64_t v53 = *(void *)(a7 + 16);
    *uint64_t v44 = v53;
    *(void *)(a7 + 16) = v44;
    *(void *)(v51 + 8 * a1) = a7 + 16;
    if (!v53) {
      goto LABEL_83;
    }
    unint64_t v54 = *(void *)(v53 + 8);
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v54 >= v39) {
        v54 %= v39;
      }
    }
    else
    {
      v54 &= v39 - 1;
    }
    unint64_t v52 = (void *)(*(void *)a7 + 8 * v54);
  }
  *unint64_t v52 = v44;
LABEL_83:
  ++*(void *)(a7 + 24);
LABEL_84:
  *a9 = v35;
  unint64_t v20 = a8 + 2;
  unsigned int v55 = atomic_load((unsigned int *)a8 + 2);
  if (v55 != 1)
  {
    unsigned int v21 = -1;
    goto LABEL_4;
  }
  (*(void (**)(atomic_uint *))(*(void *)a8 + 8))(a8);
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, void *a2, uint64_t *a3, KB::LanguageModelContext *a4, uint64_t **a5, uint64_t *a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F76280;
  uint64_t v10 = *a3;
  *a3 = 0;
  uint64_t v11 = a2[3];
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  if (v11) {
    atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
  }
  uint64_t v12 = a2[4];
  *(void *)(a1 + 32) = v12;
  if (v12) {
    atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
  }
  uint64_t v13 = a2[5];
  *(void *)(a1 + 40) = v13;
  if (v13) {
    atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
  }
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), a4);
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((void *)(a1 + 200), *a5, a5[1], a5[1] - *a5);
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  uint64_t v14 = (atomic_uint *)a2[34];
  *(void *)(a1 + 272) = v14;
  if (v14) {
    atomic_fetch_add(v14, 1u);
  }
  uint64_t v15 = *a6;
  *a6 = 0;
  *(void *)(a1 + 280) = v15;
  uint64_t v16 = *(void *)(a1 + 200);
  float v17 = *(uint64_t **)(a1 + 208);
  float v18 = (uint64_t *)v16;
  if ((uint64_t *)v16 != v17)
  {
    while (*v18 != v15)
    {
      if (++v18 == v17)
      {
        float v18 = *(uint64_t **)(a1 + 208);
        break;
      }
    }
  }
  if (v18 == v17)
  {
    std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::push_back[abi:nn180100]((void *)(a1 + 200), (uint64_t *)(a1 + 280));
    uint64_t v16 = *(void *)(a1 + 200);
    float v17 = *(uint64_t **)(a1 + 208);
  }
  size_t v22 = &__block_literal_global_10;
  unint64_t v19 = 126 - 2 * __clz(((uint64_t)v17 - v16) >> 3);
  if (v17 == (uint64_t *)v16) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*,false>(v16, v17, (uint64_t)&v22, v20, 1);
  return a1;
}

void *std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 61) {
      abort();
    }
    uint8x8_t v6 = result;
    uint64_t result = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a4);
    *uint8x8_t v6 = result;
    v6[1] = result;
    for (unsigned __int16 v6[2] = &result[v7]; a2 != a3; ++result)
    {
      uint64_t v8 = *a2;
      *uint64_t result = *a2;
      if (v8) {
        atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
      }
      ++a2;
    }
    v6[1] = result;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
LABEL_2:
  unint64_t v105 = a2 - 2;
  uint64_t v107 = a2 - 1;
  unint64_t v104 = a2 - 3;
  uint64_t v12 = v11;
  int64x2_t v109 = a2;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = a2 - v12;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
          if (result)
          {
            uint64_t v41 = *v12;
            *uint64_t v12 = *v107;
            uint64_t *v107 = v41;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v107, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v12 + 2, v107, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v12 + 2, v12 + 3, v107, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 == a2) {
        return result;
      }
      int64_t v55 = (v14 - 2) >> 1;
      int64_t v108 = v55;
      do
      {
        int64_t v56 = v55;
        if (v108 >= v55)
        {
          uint64_t v57 = (2 * v55) | 1;
          uint64_t v58 = &v11[v57];
          if (2 * v55 + 2 < (uint64_t)v14 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
          {
            ++v58;
            uint64_t v57 = 2 * v56 + 2;
          }
          unint64_t v59 = (unsigned int **)&v11[v56];
          a2 = v109;
          if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
          {
            char v60 = *v59;
            *unint64_t v59 = 0;
            uint64_t v114 = v60;
            do
            {
              std::string v61 = (unsigned int **)v58;
              float v62 = (unsigned int *)*v58;
              uint64_t *v58 = 0;
              float v63 = *v59;
              *unint64_t v59 = v62;
              if (v63)
              {
                unsigned int v64 = atomic_load(v63 + 2);
                if (v64 == 1) {
                  (*(void (**)(unsigned int *))(*(void *)v63 + 8))(v63);
                }
                else {
                  atomic_fetch_add((atomic_uint *volatile)v63 + 2, 0xFFFFFFFF);
                }
              }
              if (v108 < v57) {
                break;
              }
              uint64_t v65 = (2 * v57) | 1;
              uint64_t v58 = &v11[v65];
              uint64_t v66 = 2 * v57 + 2;
              if (v66 < (uint64_t)v14 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
              {
                ++v58;
                uint64_t v65 = v66;
              }
              unint64_t v59 = v61;
              uint64_t v57 = v65;
            }
            while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
            size_t v67 = *v61;
            *std::string v61 = v114;
            if (v67)
            {
              unsigned int v68 = atomic_load(v67 + 2);
              if (v68 == 1) {
                (*(void (**)(unsigned int *))(*(void *)v67 + 8))(v67);
              }
              else {
                atomic_fetch_add((atomic_uint *volatile)v67 + 2, 0xFFFFFFFF);
              }
            }
            a2 = v109;
          }
        }
        int64_t v55 = v56 - 1;
      }
      while (v56);
      uint64_t v69 = (unint64_t)v13 >> 3;
      while (1)
      {
        unint64_t v110 = a2;
        uint64_t v70 = 0;
        uint64_t v71 = *v11;
        *uint64_t v11 = 0;
        uint64_t v72 = v69 - 2;
        uint64_t v106 = v71;
        if (v69 < 2) {
          uint64_t v72 = v69 - 1;
        }
        uint64_t v73 = v72 >> 1;
        unint64_t v74 = v11;
        do
        {
          unint64_t v75 = (unsigned int **)v74;
          v74 += v70 + 1;
          uint64_t v76 = 2 * v70;
          uint64_t v70 = (2 * v70) | 1;
          uint64_t v77 = v76 + 2;
          if (v76 + 2 < v69 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
          {
            ++v74;
            uint64_t v70 = v77;
          }
          unsigned int v78 = (unsigned int *)*v74;
          uint64_t *v74 = 0;
          int v79 = *v75;
          *unint64_t v75 = v78;
          if (v79)
          {
            unsigned int v80 = atomic_load(v79 + 2);
            if (v80 == 1) {
              (*(void (**)(unsigned int *))(*(void *)v79 + 8))(v79);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)v79 + 2, 0xFFFFFFFF);
            }
          }
        }
        while (v70 <= v73);
        unint64_t v81 = v110 - 1;
        if (v74 == v110 - 1)
        {
          uint64_t result = *v74;
          uint64_t v85 = v69 - 1;
          uint64_t *v74 = v106;
          if (result)
          {
            unsigned int v96 = atomic_load((unsigned int *)(result + 8));
            if (v96 == 1) {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
            }
          }
        }
        else
        {
          uint64_t v82 = *v81;
          uint64_t *v81 = 0;
          float v83 = (unsigned int *)*v74;
          uint64_t *v74 = v82;
          if (v83)
          {
            unsigned int v84 = atomic_load(v83 + 2);
            if (v84 == 1) {
              (*(void (**)(unsigned int *))(*(void *)v83 + 8))(v83);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)v83 + 2, 0xFFFFFFFF);
            }
          }
          uint64_t result = *v81;
          uint64_t v85 = v69 - 1;
          uint64_t *v81 = v106;
          if (result)
          {
            unsigned int v86 = atomic_load((unsigned int *)(result + 8));
            if (v86 == 1) {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
            }
          }
          uint64_t v87 = (char *)(v74 + 1) - (char *)v11;
          if (v87 >= 9)
          {
            unint64_t v88 = (unint64_t)((v87 >> 3) - 2) >> 1;
            uint64_t v89 = &v11[v88];
            uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
            if (result)
            {
              char v90 = (unsigned int *)*v74;
              uint64_t *v74 = 0;
              uint64_t v115 = (uint64_t)v90;
              while (1)
              {
                uint64_t v91 = v89;
                uint64_t v92 = *v89;
                uint64_t *v89 = 0;
                unsigned int v93 = (unsigned int *)*v74;
                uint64_t *v74 = v92;
                if (v93)
                {
                  unsigned int v94 = atomic_load(v93 + 2);
                  if (v94 != 1)
                  {
                    atomic_fetch_add((atomic_uint *volatile)v93 + 2, 0xFFFFFFFF);
                    if (!v88) {
                      goto LABEL_160;
                    }
                    goto LABEL_159;
                  }
                  (*(void (**)(unsigned int *))(*(void *)v93 + 8))(v93);
                }
                if (!v88) {
                  goto LABEL_160;
                }
LABEL_159:
                unint64_t v88 = (v88 - 1) >> 1;
                uint64_t v89 = &v11[v88];
                unint64_t v74 = v91;
                if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
                {
LABEL_160:
                  uint64_t result = *v91;
                  uint64_t *v91 = v115;
                  if (result)
                  {
                    unsigned int v95 = atomic_load((unsigned int *)(result + 8));
                    if (v95 == 1) {
                      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
                    }
                    else {
                      atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
                    }
                    uint64_t result = 0;
                  }
                  break;
                }
              }
            }
          }
        }
        BOOL v97 = v69 <= 2;
        uint64_t v69 = v85;
        a2 = v110 - 1;
        if (v97) {
          return result;
        }
      }
    }
    uint64_t v15 = &v12[v14 >> 1];
    if ((unint64_t)v13 >= 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, &v12[v14 >> 1], v107, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12 + 1, v15 - 1, v105, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12 + 2, &v12[(v14 >> 1) + 1], v104, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v15 - 1, &v12[v14 >> 1], &v12[(v14 >> 1) + 1], a3);
      uint64_t v16 = *v12;
      *uint64_t v12 = *v15;
      *uint64_t v15 = v16;
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(&v12[v14 >> 1], v12, v107, a3);
    }
    --a4;
    a2 = v109;
    if (a5 & 1) != 0 || ((*(uint64_t (**)(void))(*(void *)a3 + 16))())
    {
      uint64_t v17 = *v12;
      *uint64_t v12 = 0;
      uint64_t v111 = v17;
      float v18 = v12;
      do
        unint64_t v19 = v18++;
      while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      uint64_t v20 = v109;
      if (v19 == v12)
      {
        uint64_t v20 = v109;
        do
        {
          if (v18 >= v20) {
            break;
          }
          --v20;
        }
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
      }
      else
      {
        do
          --v20;
        while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
      }
      if (v18 < v20)
      {
        unsigned int v21 = v18;
        size_t v22 = v20;
        do
        {
          uint64_t v23 = *v21;
          *unsigned int v21 = *v22;
          uint64_t *v22 = v23;
          do
            unint64_t v19 = v21++;
          while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
          do
            --v22;
          while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
        }
        while (v21 < v22);
      }
      if (v19 != v11)
      {
        uint64_t v24 = *v19;
        uint64_t *v19 = 0;
        unsigned int v25 = (unsigned int *)*v11;
        *uint64_t v11 = v24;
        if (v25)
        {
          unsigned int v26 = atomic_load(v25 + 2);
          if (v26 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v25 + 8))(v25);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF);
          }
        }
      }
      int64_t v27 = (unsigned int *)*v19;
      uint64_t *v19 = v111;
      if (v27)
      {
        unsigned int v28 = atomic_load(v27 + 2);
        if (v28 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v27 + 8))(v27);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v27 + 2, 0xFFFFFFFF);
        }
      }
      if (v18 < v20)
      {
LABEL_38:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*,false>(v11, v19, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v19 + 1;
      }
      else
      {
        BOOL v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*>(v11, v19, a3);
        uint64_t v12 = v19 + 1;
        uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*>(v19 + 1, v109, a3);
        if (result)
        {
          a2 = v19;
          if (v29) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v29) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      uint64_t v30 = *v12;
      *uint64_t v12 = 0;
      uint64_t v112 = v30;
      if ((*(uint64_t (**)(void))(*(void *)a3 + 16))())
      {
        do
          ++v12;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
      }
      else
      {
        unint64_t v31 = v12 + 1;
        do
        {
          uint64_t v12 = v31;
          if (v31 >= v109) {
            break;
          }
          int v32 = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
          unint64_t v31 = v12 + 1;
        }
        while (!v32);
      }
      uint64_t v33 = v109;
      if (v12 < v109)
      {
        uint64_t v33 = v109;
        do
          --v33;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      }
      while (v12 < v33)
      {
        uint64_t v34 = *v12;
        *uint64_t v12 = *v33;
        *uint64_t v33 = v34;
        do
          ++v12;
        while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
        do
          --v33;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      }
      uint64_t v35 = (unsigned int **)(v12 - 1);
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11)
      {
        unint64_t v36 = *v35;
        *uint64_t v35 = 0;
        unint64_t v37 = (unsigned int *)*v11;
        *uint64_t v11 = (uint64_t)v36;
        if (v37)
        {
          unsigned int v38 = atomic_load(v37 + 2);
          BOOL v5 = v38 != 0;
          BOOL v6 = v38 == 1;
          if (v38 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v37 + 8))(v37);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v37 + 2, 0xFFFFFFFF);
          }
        }
      }
      unint64_t v39 = *v35;
      *uint64_t v35 = (unsigned int *)v112;
      if (v39)
      {
        unsigned int v40 = atomic_load(v39 + 2);
        BOOL v5 = v40 != 0;
        BOOL v6 = v40 == 1;
        if (v40 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v39 + 8))(v39);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v39 + 2, 0xFFFFFFFF);
        }
      }
      uint64_t result = 0;
      a5 = 0;
    }
  }
  uint64_t v42 = v12 + 1;
  BOOL v44 = v12 == a2 || v42 == a2;
  if ((a5 & 1) == 0)
  {
    if (!v44)
    {
      do
      {
        uint64_t v98 = v42;
        uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
        if (result)
        {
          int v99 = 0;
          uint64_t v100 = *v98;
          uint64_t *v98 = 0;
          uint64_t v116 = v100;
          while (1)
          {
            uint64_t v101 = *v11;
            *uint64_t v11 = 0;
            v11[1] = v101;
            if (v99)
            {
              unsigned int v102 = atomic_load(v99 + 2);
              if (v102 == 1) {
                (*(void (**)(unsigned int *))(*(void *)v99 + 8))(v99);
              }
              else {
                atomic_fetch_add((atomic_uint *volatile)v99 + 2, 0xFFFFFFFF);
              }
            }
            if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
              break;
            }
            int v99 = (unsigned int *)*v11--;
          }
          uint64_t result = *v11;
          *uint64_t v11 = v116;
          if (result)
          {
            unsigned int v103 = atomic_load((unsigned int *)(result + 8));
            if (v103 == 1) {
              (*(void (**)(uint64_t))(*(void *)result + 8))(result);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
            }
            uint64_t result = 0;
          }
        }
        uint64_t v42 = v98 + 1;
        uint64_t v11 = v98;
      }
      while (v98 + 1 != a2);
    }
    return result;
  }
  if (v44) {
    return result;
  }
  uint64_t v45 = 0;
  while (2)
  {
    float v46 = v42;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
    if (!result) {
      goto LABEL_102;
    }
    BOOL v47 = 0;
    uint64_t v48 = *v46;
    uint64_t *v46 = 0;
    uint64_t v113 = v48;
    uint64_t v49 = v45;
    while (2)
    {
      size_t v50 = (unsigned int **)((char *)v12 + v49);
      uint64_t v51 = *(unsigned int **)((char *)v12 + v49);
      *size_t v50 = 0;
      v50[1] = v51;
      if (!v47)
      {
LABEL_91:
        if (!v49) {
          break;
        }
        goto LABEL_94;
      }
      unsigned int v52 = atomic_load(v47 + 2);
      if (v52 == 1)
      {
        (*(void (**)(unsigned int *))(*(void *)v47 + 8))(v47);
        goto LABEL_91;
      }
      atomic_fetch_add((atomic_uint *volatile)v47 + 2, 0xFFFFFFFF);
      if (v49)
      {
LABEL_94:
        uint64_t v53 = (uint64_t *)((char *)v12 + v49);
        if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
          goto LABEL_97;
        }
        BOOL v47 = *v50;
        v49 -= 8;
        continue;
      }
      break;
    }
    uint64_t v53 = v12;
LABEL_97:
    a2 = v109;
    uint64_t result = *v53;
    uint64_t *v53 = v113;
    if (result)
    {
      unsigned int v54 = atomic_load((unsigned int *)(result + 8));
      if (v54 == 1) {
        (*(void (**)(uint64_t))(*(void *)result + 8))(result);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
      }
      uint64_t result = 0;
    }
LABEL_102:
    uint64_t v42 = v46 + 1;
    v45 += 8;
    if (v46 + 1 != a2) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 1;
      if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *uint64_t v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = (unsigned int **)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
    {
      uint64_t v13 = 0;
      unint64_t v14 = *v10;
      *uint64_t v10 = 0;
      size_t v22 = v14;
      for (uint64_t i = v11; ; i -= 8)
      {
        uint64_t v16 = (char *)a1 + i;
        uint64_t v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((void *)v16 + 2) = 0;
        *((void *)v16 + 3) = v17;
        if (v13)
        {
          unsigned int v18 = atomic_load(v13 + 2);
          if (v18 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
          }
        }
        if (i == -16)
        {
          unint64_t v19 = (unsigned int **)a1;
          goto LABEL_17;
        }
        if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
          break;
        }
        uint64_t v13 = (unsigned int *)*((void *)v16 + 2);
      }
      unint64_t v19 = (unsigned int **)((char *)a1 + i + 16);
LABEL_17:
      uint64_t v20 = *v19;
      uint64_t *v19 = v22;
      if (v20)
      {
        unsigned int v21 = atomic_load(v20 + 2);
        if (v21 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF);
        }
      }
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int **)a2;
      }
    }
    v11 += 8;
    if (++v10 == (unsigned int **)a2) {
      return 1;
    }
  }
}

BOOL ___ZN2TI8Favonius10BeamSearchC2ERKS1_N3WTF10PassRefPtrIS1_EERKN2KB20LanguageModelContextERKNSt3__16vectorINS4_6RefPtrINS0_10SearchNodeEEENSB_9allocatorISF_EEEENS5_ISE_EE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(float *)(*(void *)a2 + 156) > *(float *)(*(void *)a3 + 156);
}

void std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::__emplace_unique_key_args<TI::Favonius::SearchNode *,TI::Favonius::SearchNode *&,decltype(nullptr)>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v14 = operator new(0x20uLL);
  v14[1] = v8;
  unsigned __int16 v14[2] = a3;
  v14[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *unint64_t v14 = *v22;
LABEL_38:
    void *v22 = v14;
    goto LABEL_39;
  }
  uint64_t v23 = *(void *)(a1 + 16);
  *unint64_t v14 = v23;
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (v23)
  {
    unint64_t v24 = *(void *)(v23 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    size_t v22 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

uint64_t TI::Favonius::BeamSearch::accept_text@<X0>(TI::Favonius::BeamSearch *this@<X0>, const KB::String *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result = TI::Favonius::BeamSearch::search_node_for_accepted_text(this, a2, a3, &v12);
  unint64_t v7 = (unsigned int *)v12;
  if (v12)
  {
    if (*(void *)(v12 + 16))
    {
      uint64_t v11 = (unsigned int *)v12;
      atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
      TI::Favonius::BeamSearch::clone_with_input_node((uint64_t)this, &v11, &v12);
      uint64_t result = (uint64_t)v11;
      uint64_t v8 = v12;
      uint64_t v12 = 0;
      if (v11)
      {
        unsigned int v9 = atomic_load(v11 + 2);
        if (v9 == 1) {
          uint64_t result = (*(uint64_t (**)(void))(*(void *)v11 + 8))();
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF);
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    *a4 = v8;
    unsigned int v10 = atomic_load(v7 + 2);
    if (v10 == 1) {
      return (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 8))(v7);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF);
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t TI::Favonius::BeamSearch::search_node_for_accepted_text@<X0>(TI::Favonius::BeamSearch *this@<X0>, const KB::String *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  unsigned int v26 = ___ZNK2TI8Favonius10BeamSearch29search_node_for_accepted_textERKN2KB6StringEj_block_invoke;
  int64_t v27 = &__block_descriptor_tmp_30;
  unsigned int v29 = a3;
  unsigned int v28 = a2;
  uint64_t v8 = (uint64_t *)*((void *)this + 28);
  unsigned int v9 = (uint64_t *)*((void *)this + 29);
  if (v8 != v9)
  {
    while (1)
    {
      uint64_t result = ((uint64_t (*)(void *, uint64_t *))v26)(v25, v8);
      if (result) {
        break;
      }
      if (++v8 == v9)
      {
        uint64_t v8 = v9;
        break;
      }
    }
    if (v8 != *((uint64_t **)this + 29)) {
      goto LABEL_11;
    }
  }
  uint64_t v8 = (uint64_t *)*((void *)this + 25);
  uint64_t v11 = (uint64_t *)*((void *)this + 26);
  if (v8 == v11) {
    goto LABEL_14;
  }
  while (1)
  {
    uint64_t result = ((uint64_t (*)(void *, uint64_t *))v26)(v25, v8);
    if (result) {
      break;
    }
    if (++v8 == v11)
    {
      uint64_t v8 = v11;
      break;
    }
  }
  if (v8 == *((uint64_t **)this + 26))
  {
LABEL_14:
    uint64_t result = *((void *)this + 2);
    if (result
      && (result = (uint64_t)TI::Favonius::BeamSearch::search_node_for_accepted_text((uint64_t *)&v24, (TI::Favonius::BeamSearch *)result, a2, a3), (float v15 = v24) != 0))
    {
      if (*((void *)v24 + 2))
      {
        float v16 = (uint64_t *)*((void *)this + 25);
        BOOL v17 = (uint64_t *)*((void *)this + 26);
        while (1)
        {
          if (v16 == v17)
          {
            uint64_t result = (*(uint64_t (**)(void, unsigned int *))(**((void **)this + 35) + 72))(*((void *)this + 35), v15);
            goto LABEL_36;
          }
          uint64_t v18 = *v16;
          if (v15 == *(unsigned int **)(*v16 + 32))
          {
            uint64_t v19 = *((void *)this + 35);
            if (v18 == v19)
            {
              *a4 = v18;
              goto LABEL_32;
            }
            uint64_t result = KB::String::equal((KB::String *)(v18 + 88), (const KB::String *)(v19 + 88), 1);
            if (result) {
              break;
            }
          }
          ++v16;
        }
        uint64_t v18 = *v16;
        *a4 = *v16;
        if (!v18) {
          goto LABEL_36;
        }
LABEL_32:
        atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
      }
      else if (*(void *)(*((void *)v24 + 4) + 16))
      {
        (*(void (**)(unsigned int **__return_ptr))(**((void **)this + 35) + 96))(&v24);
        size_t v20 = v24;
        uint64_t result = TI::Favonius::BeamSearch::search_node_with_typing((uint64_t)this, *((void *)v24 + 7));
        if (result)
        {
          uint64_t v21 = result;
          atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
          unsigned int v22 = atomic_load(v20 + 2);
          if (v22 == 1) {
            uint64_t result = (*(uint64_t (**)(unsigned int *))(*(void *)v20 + 8))(v20);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF);
          }
        }
        else
        {
          uint64_t v21 = (uint64_t)v20;
        }
        *a4 = v21;
      }
      else
      {
        *a4 = 0;
      }
LABEL_36:
      unint64_t v13 = (atomic_uint *)(v15 + 2);
      unsigned int v23 = atomic_load(v15 + 2);
      if (v23 != 1)
      {
        unsigned int v14 = -1;
        goto LABEL_13;
      }
      return (*(uint64_t (**)(unsigned int *))(*(void *)v15 + 8))(v15);
    }
    else
    {
      *a4 = 0;
    }
  }
  else
  {
LABEL_11:
    uint64_t v12 = *v8;
    *a4 = *v8;
    if (v12)
    {
      unint64_t v13 = (atomic_uint *)(v12 + 8);
      unsigned int v14 = 1;
LABEL_13:
      atomic_fetch_add(v13, v14);
    }
  }
  return result;
}

uint64_t TI::Favonius::BeamSearch::clone_with_input_node@<X0>(uint64_t result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*a2 != *(void *)(result + 280)) {
    operator new();
  }
  *a3 = result;
  atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  return result;
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F76280;
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v6;
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v7;
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v8;
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), (const KB::LanguageModelContext *)(a2 + 48));
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((void *)(a1 + 200), *(uint64_t **)(a2 + 200), *(uint64_t **)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 3);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((void *)(a1 + 224), *(uint64_t **)(a2 + 224), *(uint64_t **)(a2 + 232), (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 3);
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  unsigned int v9 = *(atomic_uint **)(a2 + 272);
  *(void *)(a1 + 272) = v9;
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  uint64_t v10 = a1 + 280;
  uint64_t v11 = *a3;
  *a3 = 0;
  *(void *)(a1 + 280) = v11;
  uint64_t v12 = *(void *)(a1 + 200);
  unint64_t v13 = *(void **)(a1 + 208);
  if ((void *)v12 == v13) {
    goto LABEL_20;
  }
  unsigned int v14 = *(void **)(a1 + 200);
  while (*v14 != v11)
  {
    if (++v14 == v13)
    {
      unsigned int v14 = *(void **)(a1 + 208);
      break;
    }
  }
  if (v14 == v13)
  {
    unint64_t v15 = ((uint64_t)v13 - v12) >> 3;
    do
    {
      unint64_t v16 = v15 >> 1;
      BOOL v17 = (uint64_t *)(v12 + 8 * (v15 >> 1));
      uint64_t v19 = *v17;
      uint64_t v18 = v17 + 1;
      v15 += ~(v15 >> 1);
      if (*(float *)(v19 + 156) > *(float *)(v11 + 156)) {
        uint64_t v12 = (uint64_t)v18;
      }
      else {
        unint64_t v15 = v16;
      }
    }
    while (v15);
LABEL_20:
    std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::insert((unsigned int *)(a1 + 200), v12, (unsigned int **)(a1 + 280));
  }
  if (*(void *)(a2 + 16))
  {
    if ((*(unsigned int (**)(void))(**(void **)v10 + 56))() != 1)
    {
      uint64_t v25 = *(void *)(*(void *)(a2 + 16) + 16);
      uint64_t v26 = *(void *)(*(void *)v10 + 32);
      uint64_t v35 = (unsigned int *)v26;
      if (v26) {
        atomic_fetch_add((atomic_uint *volatile)(v26 + 8), 1u);
      }
      TI::Favonius::BeamSearch::clone_with_input_node(&v37, v25, &v35);
      unint64_t v37 = 0;
      if (v35)
      {
        unsigned int v27 = atomic_load(v35 + 2);
        if (v27 == 1) {
          (*(void (**)(void))(*(void *)v35 + 8))();
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v35 + 2, 0xFFFFFFFF);
        }
      }
      operator new();
    }
    uint64_t v20 = *(void *)(a2 + 16);
    uint64_t v21 = *(void *)(*(void *)v10 + 32);
    unint64_t v36 = (unsigned int *)v21;
    if (v21) {
      atomic_fetch_add((atomic_uint *volatile)(v21 + 8), 1u);
    }
    TI::Favonius::BeamSearch::clone_with_input_node(&v37, v20, &v36);
    unsigned int v22 = *(unsigned int **)(a1 + 16);
    unsigned int v23 = v37;
    unint64_t v37 = 0;
    *(void *)(a1 + 16) = v23;
    if (v22)
    {
      unsigned int v24 = atomic_load(v22 + 2);
      if (v24 == 1) {
        (*(void (**)(unsigned int *))(*(void *)v22 + 8))(v22);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v22 + 2, 0xFFFFFFFF);
      }
      if (v37)
      {
        unsigned int v28 = atomic_load(v37 + 2);
        if (v28 == 1) {
          (*(void (**)(void))(*(void *)v37 + 8))();
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v37 + 2, 0xFFFFFFFF);
        }
      }
    }
    if (v36)
    {
      unsigned int v29 = atomic_load(v36 + 2);
      if (v29 == 1) {
        (*(void (**)(void))(*(void *)v36 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v36 + 2, 0xFFFFFFFF);
      }
    }
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v30 = (unsigned int **)(a2 + 280);
    if (TI::Favonius::BeamSearch::finalized_search_should_exclude_node((void *)a1, (uint64_t)v30))
    {
      int v32 = *(unsigned int ***)(a1 + 200);
      unint64_t v31 = *(unsigned int ***)(a1 + 208);
      if (v32 != v31)
      {
        while (*v32 != *v30)
        {
          if (++v32 == v31)
          {
            int v32 = *(unsigned int ***)(a1 + 208);
            break;
          }
        }
      }
      uint64_t v33 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode> *,WTF::RefPtr<TI::Favonius::SearchNode> *,WTF::RefPtr<TI::Favonius::SearchNode> *>(v32 + 1, v31, v32);
      std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__base_destruct_at_end[abi:nn180100]((unsigned int *)(a1 + 200), (uint64_t)v33);
    }
  }
  return a1;
}

unsigned int **std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::insert(unsigned int *a1, uint64_t a2, unsigned int **a3)
{
  unint64_t v4 = (unsigned int **)a2;
  unint64_t v6 = *((void *)a1 + 1);
  uint64_t v8 = a1 + 4;
  unint64_t v7 = *((void *)a1 + 2);
  if (v6 >= v7)
  {
    uint64_t v12 = *(unsigned int ***)a1;
    unint64_t v13 = ((uint64_t)(v6 - *(void *)a1) >> 3) + 1;
    if (v13 >> 61) {
      abort();
    }
    uint64_t v14 = a2 - (void)v12;
    uint64_t v15 = (a2 - (uint64_t)v12) >> 3;
    uint64_t v16 = v7 - (void)v12;
    if (v16 >> 2 > v13) {
      unint64_t v13 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v13;
    }
    uint64_t v33 = v8;
    if (v17)
    {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v17);
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v18 = 0;
    }
    uint64_t v21 = (unsigned int **)&v19[8 * v15];
    unsigned int v29 = v19;
    uint64_t v30 = v21;
    unsigned int v22 = &v19[8 * v18];
    unint64_t v31 = v21;
    int v32 = v22;
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == v4) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v14 >> 2;
        }
        unsigned int v38 = v8;
        unsigned int v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v25);
        uint64_t v30 = (unsigned int **)&v29[8 * (v25 >> 2)];
        uint64_t v34 = v19;
        uint64_t v35 = &v19[8 * v15];
        unint64_t v31 = v30;
        int v32 = &v29[8 * v26];
        unint64_t v36 = v35;
        unint64_t v37 = v22;
        std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v34);
        uint64_t v21 = v30;
      }
      else
      {
        unint64_t v23 = v15 + 2;
        if (v15 >= -1) {
          unint64_t v23 = v15 + 1;
        }
        unsigned int v24 = &v21[-(v23 >> 1)];
        uint64_t v21 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode> *,WTF::RefPtr<TI::Favonius::SearchNode> *,WTF::RefPtr<TI::Favonius::SearchNode> *>(v21, v21, v24);
        uint64_t v30 = v24;
        unint64_t v31 = v21;
      }
    }
    unsigned int v27 = *a3;
    *uint64_t v21 = *a3;
    if (v27)
    {
      atomic_fetch_add((atomic_uint *volatile)v27 + 2, 1u);
      uint64_t v21 = v31;
    }
    unint64_t v31 = v21 + 1;
    unint64_t v4 = (unsigned int **)std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__swap_out_circular_buffer(a1, &v29, v4);
    std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v29);
  }
  else if (a2 == v6)
  {
    uint64_t v20 = *a3;
    *(void *)a2 = *a3;
    if (v20) {
      atomic_fetch_add((atomic_uint *volatile)v20 + 2, 1u);
    }
    *((void *)a1 + 1) = a2 + 8;
  }
  else
  {
    std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__move_range(a1, a2, v6, (char *)(a2 + 8));
    if (v4 <= a3) {
      a3 += *((void *)a1 + 1) > (unint64_t)a3;
    }
    unsigned int v9 = *a3;
    if (*a3) {
      atomic_fetch_add((atomic_uint *volatile)v9 + 2, 1u);
    }
    uint64_t v10 = *v4;
    *unint64_t v4 = v9;
    if (v10)
    {
      unsigned int v11 = atomic_load(v10 + 2);
      if (v11 == 1) {
        (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF);
      }
    }
  }
  return v4;
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, uint64_t a2, uint64_t *a3, atomic_uint **a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F76280;
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
    uint64_t v7 = *(void *)(a1 + 16);
  }
  uint64_t v9 = *(void *)(v7 + 32);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
  }
  uint64_t v10 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v10;
  if (v10) {
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
  }
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), (const KB::LanguageModelContext *)(*(void *)(a1 + 16) + 48));
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((void *)(a1 + 200), *(uint64_t **)(a2 + 200), *(uint64_t **)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 3);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((void *)(a1 + 224), *(uint64_t **)(a2 + 224), *(uint64_t **)(a2 + 232), (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 3);
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  unsigned int v11 = *(atomic_uint **)(a2 + 272);
  *(void *)(a1 + 272) = v11;
  if (v11) {
    atomic_fetch_add(v11, 1u);
  }
  uint64_t v12 = *(void *)(a2 + 280);
  *(void *)(a1 + 280) = v12;
  if (v12) {
    atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
  }
  unint64_t v13 = *a4;
  if (*a4)
  {
    *a4 = 0;
    unsigned int v28 = v13;
    TI::Favonius::BeamSearch::initialize_input_node(a1, &v28);
    if (v28) {
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v28);
    }
  }
  uint64_t v14 = *(void *)(a1 + 200);
  uint64_t v15 = *(unsigned int ***)(a1 + 208);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 0x40000000;
  unint64_t v25 = ___ZN2TI8Favonius10BeamSearchC2ERKS1_N3WTF10PassRefPtrIS1_EENS5_INS0_8KeyMatchEEE_block_invoke;
  uint64_t v26 = &__block_descriptor_tmp_4_12218;
  uint64_t v27 = a1;
  if ((unsigned int **)v14 == v15) {
    goto LABEL_30;
  }
  uint64_t v16 = v15;
  while ((v25((uint64_t)v24, v14) & 1) == 0)
  {
    v14 += 8;
    if ((unsigned int **)v14 == v15) {
      goto LABEL_31;
    }
  }
  if ((unsigned int **)v14 != v15)
  {
    unint64_t v17 = (unsigned int **)(v14 + 8);
    if ((unsigned int **)(v14 + 8) != v15)
    {
      uint64_t v16 = (unsigned int **)v14;
      do
      {
        if ((v25((uint64_t)v24, (uint64_t)v17) & 1) == 0)
        {
          uint64_t v18 = *v17;
          *unint64_t v17 = 0;
          uint64_t v19 = *v16;
          *uint64_t v16 = v18;
          if (v19)
          {
            unsigned int v20 = atomic_load(v19 + 2);
            if (v20 == 1) {
              (*(void (**)(unsigned int *))(*(void *)v19 + 8))(v19);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)v19 + 2, 0xFFFFFFFF);
            }
          }
          ++v16;
        }
        ++v17;
      }
      while (v17 != v15);
      goto LABEL_31;
    }
LABEL_30:
    uint64_t v16 = (unsigned int **)v14;
  }
LABEL_31:
  uint64_t v21 = *(unsigned int ***)(a1 + 208);
  if (v16 != v21)
  {
    unsigned int v22 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode> *,WTF::RefPtr<TI::Favonius::SearchNode> *,WTF::RefPtr<TI::Favonius::SearchNode> *>(v21, *(unsigned int ***)(a1 + 208), v16);
    std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__base_destruct_at_end[abi:nn180100]((unsigned int *)(a1 + 200), (uint64_t)v22);
  }
  return a1;
}

uint64_t TI::Favonius::BeamSearch::finalized_search_should_exclude_node(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[35];
  if (*(void *)a2 == v2) {
    return 0;
  }
  if (*(_DWORD *)(*(void *)a2 + 168) > (*(_DWORD *)(v2 + 168) + 2)) {
    return 1;
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  uint64_t v7 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6) + 56);
  unint64_t v8 = *(unsigned int *)(v7 + 200);
  unint64_t v9 = (unint64_t)((uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 3) >> 1;
  if (v8 > 0xB || v9 < v8) {
    goto LABEL_8;
  }
  uint64_t v37 = *(void *)(*(void *)a2 + 48);
  if (!v37) {
    return 1;
  }
  uint64_t v38 = *(void *)(v37 + 8);
  uint64_t v39 = *(void *)((*(uint64_t (**)(void *))(*a1 + 32))(a1) + 8);
  if (v38 == v39 || (v40 = (KB::String *)(v38 + 8), uint64_t v3 = 1, KB::String::equal(v40, (const KB::String *)(v39 + 8), 1)))
  {
LABEL_8:
    uint64_t v11 = *(void *)(*(void *)a2 + 56);
    if ((*(_WORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11) + 60) & 0x20) != 0)
    {
      if ((**(uint64_t (***)(uint64_t))v11)(v11))
      {
        uint64_t v12 = (**(uint64_t (***)(uint64_t))v11)(v11);
        if ((*(_WORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12) + 60) & 0x20) != 0) {
          return 1;
        }
      }
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    if ((*(_WORD *)(*(void *)v13 + 60) & 0x30) != 0 && (*(_WORD *)(*(void *)v13 + 60) & 8) == 0)
    {
      uint64_t v15 = (**(uint64_t (***)(uint64_t))v11)(v11);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v15 + 64))(v15)) {
        return 1;
      }
    }
    if ((*(_WORD *)(*(void *)(*(uint64_t (**)(void))(**(void **)(*(void *)a2 + 56) + 16))(*(void *)(*(void *)a2 + 56))
                   + 60) & 0x80) != 0)
    {
      uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(*(void *)a2 + 56) + 32))(*(void *)(*(void *)a2 + 56));
      uint64_t v17 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
      uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1[35] + 56) + 32))(*(void *)(a1[35] + 56));
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
      __int16 v20 = *(_WORD *)(v17 + 60);
      BOOL v21 = (v20 & 8) != 0 || (v20 & 0x30) == 0;
      int v22 = v20 & 1;
      if (!v21) {
        int v22 = 1;
      }
      __int16 v23 = *(_WORD *)(*(void *)v19 + 60);
      BOOL v24 = (v23 & 8) != 0 || (v23 & 0x30) == 0;
      int v25 = v23 & 1;
      if (!v24) {
        int v25 = 1;
      }
      if (v22 != v25) {
        return 1;
      }
    }
    if (*(_DWORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11) + 56) == 39)
    {
      uint64_t v26 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      uint64_t v27 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v26 + 56))(v26) + 56);
      unint64_t v28 = *(unsigned int *)(v27 + 200);
      unint64_t v29 = (unint64_t)((uint64_t)(*(void *)(v27 + 16) - *(void *)(v27 + 8)) >> 3) >> 1;
      BOOL v30 = v28 <= 0xB && v29 >= v28;
      if (!v30
        && (*(_WORD *)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1[35] + 56) + 16))(*(void *)(a1[35] + 56))
                     + 60) & 2) != 0)
      {
        return 1;
      }
    }
    if ((*(unsigned int (**)(void))(**(void **)a2 + 64))() == 2)
    {
      uint64_t v31 = (**(uint64_t (***)(uint64_t))v11)(v11);
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 16))(v31);
      if ((*(_WORD *)(*(void *)v32 + 60) & 0x30) != 0 && (*(_WORD *)(*(void *)v32 + 60) & 8) == 0)
      {
        uint64_t v34 = (uint64_t (***)(void))(**(uint64_t (***)(uint64_t))v11)(v11);
        uint64_t v35 = (**v34)(v34);
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v35 + 64))(v35)) {
          return 1;
        }
      }
    }
    return 0;
  }
  return v3;
}

unsigned int **std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode> *,WTF::RefPtr<TI::Favonius::SearchNode> *,WTF::RefPtr<TI::Favonius::SearchNode> *>(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  if (a1 != a2)
  {
    BOOL v5 = a1;
    do
    {
      uint64_t v6 = *v5;
      *BOOL v5 = 0;
      uint64_t v7 = *a3;
      *a3 = v6;
      if (v7)
      {
        unsigned int v8 = atomic_load(v7 + 2);
        if (v8 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF);
        }
      }
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t TI::Favonius::BeamSearch::initialize_input_node(uint64_t a1, atomic_uint **a2)
{
  unint64_t v4 = *(atomic_uint **)(*(void *)(a1 + 16) + 280);
  if (v4) {
    atomic_fetch_add(v4 + 2, 1u);
  }
  BOOL v5 = *(unsigned int ***)(a1 + 200);
  uint64_t v6 = *(unsigned int ***)(a1 + 208);
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 1174405120;
  unint64_t v36 = ___ZN2TI8Favonius10BeamSearch21initialize_input_nodeERKN3WTF6RefPtrINS0_8KeyMatchEEEf_block_invoke;
  uint64_t v37 = &__block_descriptor_tmp_12219;
  uint64_t v38 = a2;
  uint64_t v39 = (unsigned int *)v4;
  if (v4) {
    atomic_fetch_add(v4 + 2, 1u);
  }
  if (v5 != v6)
  {
    while (((uint64_t)v36((uint64_t)v35, (uint64_t *)v5) & 1) == 0)
    {
      if (++v5 == v6)
      {
        BOOL v5 = v6;
        break;
      }
    }
  }
  if (v5 == *(unsigned int ***)(a1 + 208))
  {
    uint64_t v7 = (unsigned int **)operator new(0x10uLL);
    uint64_t v33 = v7 + 2;
    uint64_t v34 = v7 + 2;
    *uint64_t v7 = 0;
    v7[1] = 0;
    uint64_t v32 = v7;
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
      unint64_t v9 = *v7;
      *uint64_t v7 = (unsigned int *)v8;
      if (v9)
      {
        unsigned int v10 = atomic_load(v9 + 2);
        if (v10 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v9 + 8))(v9);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF);
        }
      }
    }
    uint64_t v11 = *a2;
    if (*a2) {
      atomic_fetch_add(v11, 1u);
    }
    uint64_t v12 = *(v33 - 1);
    *(v33 - 1) = v11;
    if (v12) {
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v12);
    }
    memset(v31, 0, sizeof(v31));
    TI::Favonius::SearchNode::create_key_sequence_extensions((uint64_t)v4, v31, (uint64_t *)&v32);
    uint64_t v13 = v31[0];
    uint64_t v14 = (uint64_t)*v31[0];
    *v31[0] = 0;
    unsigned int v40 = (unsigned int *)v14;
    std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__base_destruct_at_end[abi:nn180100]((unsigned int *)v31, (uint64_t)v13);
    uint64_t v16 = *(void **)(a1 + 200);
    uint64_t v15 = *(void *)(a1 + 208);
    if ((void *)v15 != v16)
    {
      unint64_t v17 = (v15 - (uint64_t)v16) >> 3;
      do
      {
        unint64_t v18 = v17 >> 1;
        uint64_t v19 = &v16[v17 >> 1];
        uint64_t v21 = *v19;
        __int16 v20 = v19 + 1;
        v17 += ~(v17 >> 1);
        if (*(float *)(v21 + 156) > *(float *)(v14 + 156)) {
          uint64_t v16 = v20;
        }
        else {
          unint64_t v17 = v18;
        }
      }
      while (v17);
      uint64_t v15 = (uint64_t)v16;
    }
    BOOL v5 = std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::insert((unsigned int *)(a1 + 200), v15, &v40);
    if (v40)
    {
      unsigned int v22 = atomic_load(v40 + 2);
      if (v22 == 1) {
        (*(void (**)(void))(*(void *)v40 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v40 + 2, 0xFFFFFFFF);
      }
    }
    unsigned int v40 = (unsigned int *)v31;
    std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v40);
    v31[0] = (void **)&v32;
    std::vector<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::__destroy_vector::operator()[abi:nn180100](v31);
  }
  __int16 v23 = *v5;
  if (*v5) {
    atomic_fetch_add((atomic_uint *volatile)v23 + 2, 1u);
  }
  BOOL v24 = *(unsigned int **)(a1 + 280);
  *(void *)(a1 + 280) = v23;
  if (v24)
  {
    unsigned int v25 = atomic_load(v24 + 2);
    if (v25 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v24 + 8))(v24);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v24 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v26 = *a2;
  if (*a2) {
    atomic_fetch_add(v26, 1u);
  }
  uint64_t v27 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = v26;
  if (v27) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v27);
  }
  uint64_t result = (uint64_t)v39;
  if (v39)
  {
    unsigned int v29 = atomic_load(v39 + 2);
    if (v29 == 1) {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v39 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v39 + 2, 0xFFFFFFFF);
    }
  }
  if (v4)
  {
    unsigned int v30 = atomic_load((unsigned int *)v4 + 2);
    if (v30 == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
    else {
      atomic_fetch_add(v4 + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

uint64_t ___ZN2TI8Favonius10BeamSearchC2ERKS1_N3WTF10PassRefPtrIS1_EENS5_INS0_8KeyMatchEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return TI::Favonius::BeamSearch::finalized_search_should_exclude_node(*(void **)(a1 + 32), a2);
}

uint64_t (***___ZN2TI8Favonius10BeamSearch21initialize_input_nodeERKN3WTF6RefPtrINS0_8KeyMatchEEEf_block_invoke(uint64_t a1, uint64_t *a2))(void)
{
  uint64_t v3 = *(void *)(*a2 + 48);
  uint64_t v4 = **(void **)(a1 + 32);
  uint64_t v5 = *(void *)(*a2 + 32);
  if (*(void *)(a1 + 40) == v5)
  {
    BOOL v8 = 0;
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v5 + 56) + 192))(*(void *)(v5 + 56));
    BOOL v8 = v7 != (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 56) + 192))(*(void *)(*(void *)(a1 + 40) + 56));
  }
  uint64_t result = 0;
  if (v4 == v3 && !v8)
  {
    uint64_t v10 = *a2;
    if (*(void *)(v10 + 32))
    {
      uint64_t result = *(uint64_t (****)(void))(v10 + 56);
      if (result) {
        return (uint64_t (***)(void))((**result)(result) == *(void *)(*(void *)(v10 + 32) + 56));
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::vector<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:nn180100]<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned int *std::__destroy_at[abi:nn180100]<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v2);
  }
  uint64_t result = *(unsigned int **)a1;
  if (*(void *)a1)
  {
    unsigned int v4 = atomic_load(result + 2);
    if (v4 == 1)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v5();
    }
    else
    {
      atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

unsigned int *__destroy_helper_block_8_40c46_ZTSKN3WTF6RefPtrIN2TI8Favonius10SearchNodeEEE(uint64_t a1)
{
  uint64_t result = *(unsigned int **)(a1 + 40);
  if (result)
  {
    unsigned int v2 = atomic_load(result + 2);
    if (v2 == 1) {
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

uint64_t __copy_helper_block_8_40c46_ZTSKN3WTF6RefPtrIN2TI8Favonius10SearchNodeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  }
  return result;
}

unsigned int *std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__move_range(unsigned int *result, uint64_t a2, unint64_t a3, char *a4)
{
  unsigned int v4 = (char *)*((void *)result + 1);
  uint64_t v5 = (uint64_t *)(a2 + v4 - a4);
  uint64_t v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    uint64_t v7 = *v5;
    *v5++ = 0;
    *(void *)uint64_t v6 = v7;
    v6 += 8;
  }
  *((void *)result + 1) = v6;
  if (v4 != a4)
  {
    BOOL v8 = (unsigned int **)(v4 - 8);
    uint64_t v9 = 8 * ((v4 - a4) >> 3);
    uint64_t v10 = a2 - 8;
    do
    {
      uint64_t v11 = *(unsigned int **)(v10 + v9);
      *(void *)(v10 + v9) = 0;
      uint64_t result = *v8;
      *BOOL v8 = v11;
      if (result)
      {
        unsigned int v12 = atomic_load(result + 2);
        if (v12 == 1) {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
        }
      }
      --v8;
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

uint64_t std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__swap_out_circular_buffer(void *a1, void *a2, void *a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = (void *)*a1;
  uint64_t v6 = result;
  if ((void *)*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      uint64_t v8 = *--v7;
      *uint64_t v7 = 0;
      *(void *)(v6 - 8) = v8;
      v6 -= 8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v9 = (void *)a1[1];
  uint64_t v10 = (void *)a2[2];
  if (v9 != a3)
  {
    do
    {
      uint64_t v11 = *a3;
      *a3++ = 0;
      *v10++ = v11;
    }
    while (a3 != v9);
    uint64_t v6 = a2[1];
  }
  a2[2] = v10;
  unsigned int v12 = (void *)*a1;
  *a1 = v6;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

BOOL ___ZNK2TI8Favonius10BeamSearch29search_node_for_accepted_textERKN2KB6StringEj_block_invoke(uint64_t a1, TI::Favonius::SearchNode **a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3) {
    return *((_DWORD *)*a2 + 10) == v3;
  }
  uint64_t v5 = *(KB::String **)(a1 + 32);
  uint64_t v6 = *a2;
  int v9 = 0x100000;
  __int16 v10 = 0;
  char v11 = 0;
  unsigned int v12 = 0;
  char v13 = 0;
  TI::Favonius::SearchNode::input_string_recursive(v6, (KB::String *)&v9, 0);
  BOOL v7 = KB::String::equal(v5, (const KB::String *)&v9, 0);
  BOOL v4 = 0;
  if (v7) {
    BOOL v4 = (*((_WORD *)*a2 + 60) & 0xB81) == 0;
  }
  if (v12 && v11 == 1) {
    free(v12);
  }
  return v4;
}

uint64_t TI::Favonius::BeamSearch::search_node_with_typing(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 192))(a2);
  uint64_t v6 = *(void *)(a1 + 200);
  uint64_t v5 = *(void *)(a1 + 208);
  if (v6 == v5) {
    return 0;
  }
  uint64_t v7 = v4;
  while ((*(uint64_t (**)(void))(**(void **)(*(void *)v6 + 56) + 192))(*(void *)(*(void *)v6 + 56)) != v7
       || !(*(unsigned int (**)(void, uint64_t))(**(void **)(*(void *)v6 + 56) + 184))(*(void *)(*(void *)v6 + 56), a2))
  {
    v6 += 8;
    if (v6 == v5) {
      return 0;
    }
  }
  return *(void *)v6;
}

void TI::Favonius::BeamSearch::finalize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    if (v2)
    {
      for (uint64_t i = *(uint64_t **)(v2 + 200); i != *(uint64_t **)(v2 + 208); ++i)
      {
        uint64_t v4 = *i;
        WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity(v4 + 176);
        WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity(v4 + 200);
      }
    }
  }
  operator new();
}

void TI::Favonius::BeamSearch::update(atomic_uint ***a1, atomic_uint **a2)
{
  int v3 = *a2;
  *a2 = 0;
  (*(uint64_t (**)(atomic_uint *))(*(void *)v3 + 56))(v3);
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)long long __p = 0u;
  uint64_t v5 = v3;
  atomic_fetch_add(v3 + 2, 1u);
  TI::Favonius::SearchNodeSourceQueue::clone_search_substituting_touch((char **)__p, a1 + 19, a1 + 25, a1 + 31, &v5);
  if (v5)
  {
    unsigned int v4 = atomic_load((unsigned int *)v5 + 2);
    if (v4 == 1) {
      (*(void (**)(void))(*(void *)v5 + 8))();
    }
    else {
      atomic_fetch_add(v5 + 2, 0xFFFFFFFF);
    }
  }
  operator new();
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, float a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F76280;
  __int16 v10 = (void *)*a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = v10[3];
  *(void *)(a1 + 24) = v11;
  if (v11)
  {
    atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
    __int16 v10 = *(void **)(a1 + 16);
  }
  uint64_t v12 = v10[4];
  *(void *)(a1 + 32) = v12;
  if (v12)
  {
    atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
    __int16 v10 = *(void **)(a1 + 16);
  }
  uint64_t v13 = *a3;
  *a3 = 0;
  *(void *)(a1 + 40) = v13;
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), (const KB::LanguageModelContext *)(v10 + 6));
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  uint64_t v15 = *(const void **)a4;
  uint64_t v14 = *(void *)(a4 + 8);
  int64_t v16 = v14 - *(void *)a4;
  if (v14 != *(void *)a4)
  {
    if (v14 - *(void *)a4 < 0) {
      goto LABEL_20;
    }
    unint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v16 >> 3);
    *(void *)(a1 + 152) = v17;
    *(void *)(a1 + 160) = v17;
    *(void *)(a1 + 168) = &v17[8 * v18];
    memmove(v17, v15, v16);
    *(void *)(a1 + 160) = &v17[v16];
  }
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  __int16 v20 = *(char **)(a4 + 24);
  uint64_t v19 = *(char **)(a4 + 32);
  uint64_t v21 = v19 - v20;
  if (v19 == v20) {
    goto LABEL_15;
  }
  if (v21 < 0) {
LABEL_20:
  }
    abort();
  unsigned int v22 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v21 >> 3);
  *(void *)(a1 + 176) = v22;
  *(void *)(a1 + 184) = v22;
  *(void *)(a1 + 192) = &v22[v23];
  do
  {
    uint64_t v24 = *(void *)v20;
    void *v22 = *(void *)v20;
    if (v24) {
      atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
    }
    v20 += 8;
    ++v22;
  }
  while (v20 != v19);
  *(void *)(a1 + 184) = v22;
LABEL_15:
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  uint64_t v25 = *a5;
  *a5 = 0;
  uint64_t v27 = v25;
  TI::Favonius::BeamSearch::advance_search_beam(a1, (void *)(a1 + 200), (TI::Favonius::SearchNodeSourceQueue *)(a1 + 152), (void *)(a1 + 248), &v27, &v28, a6);
  if (v27) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v27);
  }
  TI::Favonius::BeamSearch::initialize_input_node(a1, &v28);
  if (v28) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v28);
  }
  return a1;
}

TI::Favonius::SearchNodeSource *TI::Favonius::BeamSearch::advance_search_beam@<X0>(uint64_t a1@<X0>, void *a2@<X1>, TI::Favonius::SearchNodeSourceQueue *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X4>, atomic_uint **a6@<X8>, float a7@<S0>)
{
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::reserve(a2, *(void *)(*(void *)(a1 + 24) + 24));
  TI::Favonius::SearchNodeSourceQueue::next_search_node(a3, -INFINITY, &v72);
  uint64_t v13 = v72;
  uint64_t v71 = v72;
  if (v72) {
    std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::push_back[abi:nn180100](a2, (uint64_t *)&v71);
  }
  uint64_t v14 = *a5;
  *a5 = 0;
  uint64_t v15 = *(void *)(*(void *)(a1 + 16) + 280);
  uint64_t v69 = (unsigned int *)v15;
  uint64_t v70 = (atomic_uint *)v14;
  if (v15)
  {
    atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
    uint64_t v13 = v71;
  }
  if (v13)
  {
    uint64_t v72 = 0;
    uint64_t v16 = TI::Favonius::BeamSearch::choose_hit_test_node(&v69, &v70, &v72, &v71);
    uint64_t v68 = v16;
    if (v16)
    {
      atomic_fetch_add((atomic_uint *volatile)(v16 + 8), 1u);
      if (v72)
      {
        unsigned int v17 = atomic_load((unsigned int *)v72 + 2);
        if (v17 == 1) {
          (*(void (**)(void))(*(void *)v72 + 8))();
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v72 + 2, 0xFFFFFFFF);
        }
      }
    }
    uint64_t v13 = v71;
    uint64_t v65 = a1 + 40;
    if (v71)
    {
      float v18 = *((float *)v71 + 39);
      float v19 = (float)(v18 + (*(float (**)(void))(**(void **)(a1 + 40) + 16))()) + (float)(a7 * -5.9915);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v68 = 0;
    uint64_t v65 = a1 + 40;
  }
  float v19 = -INFINITY;
LABEL_15:
  unsigned int v20 = -1;
  uint64_t v21 = a1;
  do
  {
    uint64_t v21 = *(void *)(v21 + 16);
    ++v20;
  }
  while (v21);
  if (v13)
  {
    uint64_t v22 = *((void *)v13 + 7);
    if (v22) {
      uint64_t v23 = (*(unsigned int (**)(uint64_t))(*(void *)v22 + 160))(v22) ^ 1;
    }
    else {
      uint64_t v23 = 1;
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t v24 = (double *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40));
  uint64_t v25 = *(void *)(a1 + 24);
  double v26 = v24[4] + *(double *)(v25 + 32);
  while (1)
  {
    unint64_t v27 = (uint64_t)(a2[1] - *a2) >> 3;
    if (v27 >= *(void *)(v25 + 16) && (v27 >= *(void *)(v25 + 24) || KB::system_uptime((KB *)v24) >= v26)) {
      break;
    }
    TI::Favonius::SearchNodeSourceQueue::next_search_node(a3, v19, &v72);
    unint64_t v28 = v72;
    size_t v67 = v72;
    if (!v72) {
      break;
    }
    uint64_t v29 = TI::Favonius::BeamSearch::search_node_with_typing(a1, *((void *)v72 + 7));
    if (v29) {
      BOOL v30 = 0;
    }
    else {
      BOOL v30 = v20 >= 4;
    }
    if (v30)
    {
      uint64_t v33 = (atomic_uint *)*((void *)v28 + 16);
      if (v33) {
        atomic_fetch_add(v33 + 2, 1u);
      }
      float v34 = (*(float (**)(atomic_uint *))(*(void *)v33 + 16))(v33);
      unsigned int v35 = atomic_load((unsigned int *)v33 + 2);
      if (v35 == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v33 + 8))(v33);
      }
      else {
        atomic_fetch_add(v33 + 2, 0xFFFFFFFF);
      }
      if (v34 <= (float)((float)(v20 + 3) * -0.8))
      {
LABEL_32:
        uint64_t v31 = v23;
        uint64_t v32 = a4;
        goto LABEL_51;
      }
    }
    else if (v29)
    {
      goto LABEL_32;
    }
    uint64_t v36 = TI::Favonius::BeamSearch::choose_hit_test_node(&v69, &v70, &v68, &v67);
    uint64_t v37 = v36;
    if (v36) {
      atomic_fetch_add((atomic_uint *volatile)(v36 + 8), 1u);
    }
    uint64_t v38 = (unsigned int *)v68;
    uint64_t v68 = v37;
    if (v38)
    {
      unsigned int v39 = atomic_load(v38 + 2);
      if (v39 == 1) {
        (*(void (**)(unsigned int *))(*(void *)v38 + 8))(v38);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v38 + 2, 0xFFFFFFFF);
      }
    }
    uint64_t v40 = *((void *)v67 + 7);
    if (!v40)
    {
      uint64_t v31 = 1;
      uint64_t v32 = a4;
      if (v23) {
        goto LABEL_51;
      }
LABEL_50:
      uint64_t v32 = a2;
      goto LABEL_51;
    }
    int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 160))(v40);
    uint64_t v31 = v41 ^ 1 | v23;
    if (v41) {
      goto LABEL_50;
    }
    uint64_t v32 = a4;
    if ((v23 ^ 1)) {
      goto LABEL_50;
    }
LABEL_51:
    unint64_t v42 = v32[2];
    unint64_t v43 = (void *)v32[1];
    if ((unint64_t)v43 >= v42)
    {
      uint64_t v45 = (void *)*v32;
      uint64_t v46 = ((uint64_t)v43 - *v32) >> 3;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 61) {
        abort();
      }
      uint64_t v48 = v42 - (void)v45;
      if (v48 >> 2 > v47) {
        unint64_t v47 = v48 >> 2;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v47;
      }
      unint64_t v75 = v32 + 2;
      if (v49)
      {
        unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v49);
        uint64_t v45 = (void *)*v32;
        unint64_t v43 = (void *)v32[1];
      }
      else
      {
        uint64_t v50 = 0;
      }
      uint64_t v51 = (void *)(v49 + 8 * v46);
      unint64_t v52 = v49 + 8 * v50;
      unint64_t v74 = v52;
      void *v51 = 0;
      *((void *)&v73 + 1) = v51 + 1;
      if (v43 == v45)
      {
        BOOL v44 = v51 + 1;
      }
      else
      {
        do
        {
          uint64_t v53 = *--v43;
          void *v43 = 0;
          *--uint64_t v51 = v53;
        }
        while (v43 != v45);
        BOOL v44 = (void *)*((void *)&v73 + 1);
        unint64_t v52 = v74;
      }
      long long v54 = *(_OWORD *)v32;
      *uint64_t v32 = v51;
      v32[1] = v44;
      long long v73 = v54;
      unint64_t v55 = v32[2];
      v32[2] = v52;
      unint64_t v74 = v55;
      uint64_t v72 = (TI::Favonius::SearchNodeSource *)v54;
      std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v72);
    }
    else
    {
      void *v43 = 0;
      BOOL v44 = v43 + 1;
    }
    v32[1] = v44;
    int64_t v56 = v67;
    size_t v67 = 0;
    uint64_t v57 = (unsigned int *)*(v44 - 1);
    *(v44 - 1) = v56;
    if (v57)
    {
      unsigned int v58 = atomic_load(v57 + 2);
      if (v58 == 1) {
        (*(void (**)(unsigned int *))(*(void *)v57 + 8))(v57);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v57 + 2, 0xFFFFFFFF);
      }
    }
    uint64_t v24 = (double *)v67;
    if (v67)
    {
      unsigned int v59 = atomic_load((unsigned int *)v67 + 2);
      if (v59 == 1) {
        uint64_t v24 = (double *)(*(uint64_t (**)(void))(*(void *)v67 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v67 + 2, 0xFFFFFFFF);
      }
    }
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v23 = v31;
  }
  char v60 = v70;
  if (v70) {
    goto LABEL_83;
  }
  if (v68)
  {
    char v60 = *(atomic_uint **)(v68 + 48);
    if (!v60) {
      goto LABEL_83;
    }
  }
  else
  {
    char v60 = **(atomic_uint ***)((*(uint64_t (**)(void))(**(void **)v65 + 64))() + 8);
    if (!v60) {
      goto LABEL_83;
    }
  }
  atomic_fetch_add(v60, 1u);
  if (v70) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v70);
  }
LABEL_83:
  TI::Favonius::SearchNodeSourceQueue::clean_up(a3);
  uint64_t v70 = 0;
  *a6 = v60;
  if (v68)
  {
    unsigned int v61 = atomic_load((unsigned int *)(v68 + 8));
    if (v61 == 1) {
      (*(void (**)(void))(*(void *)v68 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)(v68 + 8), 0xFFFFFFFF);
    }
  }
  if (v69)
  {
    unsigned int v62 = atomic_load(v69 + 2);
    if (v62 == 1) {
      (*(void (**)(void))(*(void *)v69 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v69 + 2, 0xFFFFFFFF);
    }
  }
  if (v70) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v70);
  }
  uint64_t result = v71;
  if (v71)
  {
    unsigned int v64 = atomic_load((unsigned int *)v71 + 2);
    if (v64 == 1) {
      return (TI::Favonius::SearchNodeSource *)(*(uint64_t (**)(void))(*(void *)v71 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v71 + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

uint64_t TI::Favonius::BeamSearch::choose_hit_test_node(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = *a4;
  uint64_t v6 = *(void *)(*a4 + 48);
  if (!v6) {
    goto LABEL_25;
  }
  if (*a2 && *a2 != v6) {
    goto LABEL_25;
  }
  long long v8 = a4;
  uint64_t v9 = *a3;
  if (*a3)
  {
    float v10 = *(float *)(v6 + 32);
    uint64_t v11 = *(void *)(v9 + 48);
    float v12 = *(float *)(v11 + 32);
    if ((float)(v10 * 4.0) > v12 || v10 <= v12)
    {
      if ((float)(v10 * 4.0) > v12) {
        return *v8;
      }
    }
    else if ((float)(*(float *)(v5 + 144) + (float)(*(float *)(v5 + 136) * 0.18)) > (float)(*(float *)(v9 + 144) {
                                                                                           + (float)(*(float *)(v9 + 136) * 0.18)))
    }
    {
      return *v8;
    }
    uint64_t v14 = *(void *)(v5 + 32);
    BOOL v16 = v6 != v11 || *a1 != v14 || v14 == 0;
    if (v16
      || (unsigned int v17 = *(uint64_t (****)(void))(v5 + 56)) == 0
      || (**v17)(v17) != *(void *)(*(void *)(v5 + 32) + 56))
    {
LABEL_25:
      long long v8 = a3;
    }
  }
  return *v8;
}

void TI::Favonius::BeamSearch::extend_with_backspace(uint64_t a1, atomic_uint **a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  int64x2_t v81 = 0uLL;
  v82[0] = 0;
  uint64_t v6 = *(void ***)a4;
  uint64_t v7 = *(void *)(a4 + 8) - *(void *)a4;
  if (v7 >= 1)
  {
    unsigned int v86 = (char **)v82;
    long long v8 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v7 >> 4);
    float v83 = v8;
    v84.i64[0] = (uint64_t)v8;
    v84.i64[1] = (uint64_t)v8;
    uint64_t v85 = &v8[2 * v9];
    float v10 = (void **)((char *)v8 + v7);
    do
    {
      uint64_t v11 = (atomic_uint *)*v6;
      *long long v8 = *v6;
      if (v11) {
        atomic_fetch_add(v11 + 2, 1u);
      }
      float v12 = (atomic_uint *)v6[1];
      v8[1] = v12;
      if (v12) {
        atomic_fetch_add(v12, 1u);
      }
      v8 += 2;
      v6 += 2;
    }
    while (v8 != v10);
    v84.i64[1] = (uint64_t)v10;
    uint64_t v13 = v84.i64[0];
    uint64_t v14 = (void *)v81.i64[0];
    if (v81.i64[0])
    {
      uint64_t v15 = 0;
      do
      {
        long long v16 = *((_OWORD *)v15 - 1);
        v15 -= 2;
        *(_OWORD *)(v13 - 16) = v16;
        v13 -= 16;
        *uint64_t v15 = 0;
        v15[1] = 0;
      }
      while (v15 != v14);
      float v10 = (void **)v84.i64[1];
    }
    v84.i64[0] = v13;
    uint64_t v17 = v81.i64[1];
    if (v81.i64[1])
    {
      float v18 = 0;
      do
      {
        long long v19 = *v18;
        *(void *)float v18 = 0;
        *((void *)v18++ + 1) = 0;
        *(_OWORD *)float v10 = v19;
        v10 += 2;
      }
      while (v18 != (long long *)v17);
      uint64_t v13 = v84.i64[0];
      uint64_t v17 = v81.i64[1];
    }
    unsigned int v20 = (void **)v81.i64[0];
    uint64_t v21 = (void **)v82[0];
    v81.i64[0] = v13;
    v81.i64[1] = (uint64_t)v10;
    v82[0] = v85;
    v84.i64[1] = v17;
    uint64_t v85 = v21;
    float v83 = v20;
    v84.i64[0] = (uint64_t)v20;
    std::__split_buffer<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::~__split_buffer((uint64_t)&v83);
  }
  uint64_t v22 = (uint64_t *)(*(uint64_t (**)(atomic_uint *))(*(void *)v5 + 64))(v5);
  uint64_t v24 = *v22;
  uint64_t v23 = (atomic_uint **)v22[1];
  if (*v22)
  {
    uint64_t v25 = 8 * v24;
    double v26 = &v23[v24];
    do
    {
      if ((*(_WORD *)(*((void *)*v23 + 1) + 60) & 0x80) != 0) {
        goto LABEL_22;
      }
      ++v23;
      v25 -= 8;
    }
    while (v25);
    uint64_t v23 = v26;
  }
LABEL_22:
  unint64_t v27 = *v23;
  unsigned int v80 = v27;
  if (v27) {
    atomic_fetch_add(v27, 1u);
  }
  uint64_t v28 = v81.i64[1];
  if (v81.i64[1] >= v82[0])
  {
    uint64_t v30 = (v81.i64[1] - v81.i64[0]) >> 4;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60) {
LABEL_83:
    }
      abort();
    uint64_t v32 = v82[0] - v81.i64[0];
    if ((v82[0] - v81.i64[0]) >> 3 > v31) {
      unint64_t v31 = v32 >> 3;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    unsigned int v86 = (char **)v82;
    float v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v33);
    uint64_t v36 = &v34[16 * v30];
    uint64_t v29 = (uint64_t)(v36 + 16);
    *(void *)uint64_t v36 = 0;
    *((void *)v36 + 1) = 0;
    uint64_t v37 = (void *)v81.i64[1];
    uint64_t v38 = (void *)v81.i64[0];
    if (v81.i64[1] == v81.i64[0])
    {
      int64x2_t v40 = vdupq_n_s64(v81.u64[1]);
    }
    else
    {
      do
      {
        long long v39 = *((_OWORD *)v37 - 1);
        v37 -= 2;
        *uint64_t v37 = 0;
        v37[1] = 0;
        *((_OWORD *)v36 - 1) = v39;
        v36 -= 16;
      }
      while (v37 != v38);
      int64x2_t v40 = v81;
    }
    v81.i64[0] = (uint64_t)v36;
    v81.i64[1] = v29;
    int64x2_t v84 = v40;
    int v41 = (void **)v82[0];
    v82[0] = &v34[16 * v35];
    uint64_t v85 = v41;
    float v83 = (void **)v40.i64[0];
    std::__split_buffer<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::~__split_buffer((uint64_t)&v83);
  }
  else
  {
    uint64_t v29 = v81.i64[1] + 16;
    *(void *)v81.i64[1] = 0;
    *(void *)(v28 + 8) = 0;
  }
  v81.i64[1] = v29;
  atomic_fetch_add(v5 + 2, 1u);
  unint64_t v42 = *(unsigned int **)(v29 - 16);
  *(void *)(v29 - 16) = v5;
  if (v42)
  {
    unsigned int v43 = atomic_load(v42 + 2);
    if (v43 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v42 + 8))(v42);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v42 + 2, 0xFFFFFFFF);
    }
  }
  if (v80) {
    atomic_fetch_add(v80, 1u);
  }
  uint64_t v44 = *(void *)(v81.i64[1] - 8);
  *(void *)(v81.i64[1] - 8) = v80;
  if (v44) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v44);
  }
  uint64_t v77 = 0;
  unint64_t v78 = 0;
  int v79 = 0;
  for (uint64_t i = *(uint64_t **)(v4 + 200); i != *(uint64_t **)(v4 + 208); ++i)
  {
    uint64_t v46 = *i;
    unint64_t v74 = 0;
    unint64_t v75 = 0;
    uint64_t v76 = 0;
    TI::Favonius::SearchNode::create_key_sequence_extensions(v46, &v74, v81.i64);
    uint64_t v48 = v74;
    unint64_t v47 = v75;
    if ((char *)v75 - (char *)v74 >= 1)
    {
      uint64_t v49 = v75 - v74;
      uint64_t v50 = (unsigned int **)v78;
      if (v49 <= (uint64_t)&v79[-v78] >> 3)
      {
        if (v49 <= 0)
        {
          unsigned int v58 = &v74[v49];
          std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__move_range((unsigned int *)&v77, v78, v78, (char *)(v78 + 8 * v49));
          while (v48 != v58)
          {
            uint64_t v71 = *v48;
            *uint64_t v48 = 0;
            uint64_t v72 = *v50;
            *uint64_t v50 = v71;
            if (v72)
            {
              unsigned int v73 = atomic_load(v72 + 2);
              if (v73 == 1) {
                (*(void (**)(unsigned int *))(*(void *)v72 + 8))(v72);
              }
              else {
                atomic_fetch_add((atomic_uint *volatile)v72 + 2, 0xFFFFFFFF);
              }
            }
            ++v48;
            ++v50;
          }
        }
        else
        {
          if (v74 == v75)
          {
            int64_t v56 = (unsigned int **)v78;
          }
          else
          {
            unint64_t v55 = v74;
            int64_t v56 = (unsigned int **)v78;
            do
            {
              uint64_t v57 = *v55;
              *v55++ = 0;
              *v56++ = v57;
            }
            while (v55 != v47);
          }
          unint64_t v78 = (unint64_t)v56;
        }
      }
      else
      {
        uint64_t v51 = (uint64_t)(v78 - (void)v77) >> 3;
        if ((unint64_t)(v51 + v49) >> 61) {
          goto LABEL_83;
        }
        unint64_t v52 = (v79 - (char *)v77) >> 2;
        if (v52 <= v51 + v49) {
          unint64_t v52 = v51 + v49;
        }
        if ((unint64_t)(v79 - (char *)v77) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        unsigned int v86 = &v79;
        if (v53) {
          unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v53);
        }
        else {
          uint64_t v54 = 0;
        }
        unsigned int v59 = (unsigned int **)(v53 + 8 * v51);
        uint64_t v85 = (void **)(v53 + 8 * v54);
        uint64_t v60 = 8 * v49;
        unsigned int v61 = v59;
        unsigned int v62 = &v59[v49];
        do
        {
          float v63 = *v48;
          *v48++ = 0;
          *v61++ = v63;
          v60 -= 8;
        }
        while (v60);
        v84.i64[1] = (uint64_t)&v59[v49];
        unsigned int v64 = v77;
        if (v77 != v50)
        {
          uint64_t v65 = v50;
          do
          {
            uint64_t v66 = *--v65;
            *uint64_t v65 = 0;
            *--unsigned int v59 = v66;
          }
          while (v65 != v64);
        }
        v84.i64[0] = (uint64_t)v59;
        unint64_t v67 = v78;
        if ((unsigned int **)v78 != v50)
        {
          do
          {
            uint64_t v68 = *v50;
            *v50++ = 0;
            *v62++ = v68;
          }
          while (v50 != (unsigned int **)v67);
          unsigned int v59 = (unsigned int **)v84.i64[0];
          uint64_t v50 = (unsigned int **)v78;
        }
        uint64_t v69 = (void **)v77;
        uint64_t v70 = (void **)v79;
        uint64_t v77 = v59;
        unint64_t v78 = (unint64_t)v62;
        int v79 = (char *)v85;
        v84.i64[1] = (uint64_t)v50;
        uint64_t v85 = v70;
        float v83 = v69;
        v84.i64[0] = (uint64_t)v69;
        std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v83);
      }
    }
    float v83 = (void **)&v74;
    std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v83);
  }
  operator new();
}

uint64_t std::__split_buffer<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:nn180100]<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>,0>(i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, void *a2, uint64_t *a3, uint64_t **a4, atomic_uint **a5)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F76280;
  long long v8 = (void *)*a2;
  *a2 = 0;
  uint64_t v9 = v8[3];
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  if (v9)
  {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
    long long v8 = *(void **)(a1 + 16);
  }
  uint64_t v10 = v8[4];
  *(void *)(a1 + 32) = v10;
  if (v10)
  {
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
    long long v8 = *(void **)(a1 + 16);
  }
  uint64_t v11 = *a3;
  *a3 = 0;
  *(void *)(a1 + 40) = v11;
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), (const KB::LanguageModelContext *)(v8 + 6));
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((void *)(a1 + 200), *a4, a4[1], a4[1] - *a4);
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  TI::Favonius::BeamSearch::initialize_input_node(a1, a5);
  return a1;
}

void TI::Favonius::BeamSearch::extend(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)long long __p = 0u;
  uint64_t v5 = (unsigned int *)v3;
  atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  TI::Favonius::BeamSearch::initialize_search_for_extensions(a1, (uint64_t)__p, &v5);
  if (v5)
  {
    unsigned int v4 = atomic_load(v5 + 2);
    if (v4 == 1) {
      (*(void (**)(void))(*(void *)v5 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF);
    }
  }
  operator new();
}

uint64_t TI::Favonius::BeamSearch::initialize_search_for_extensions(void *a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v11 = v5;
  uint64_t v7 = a1[25];
  for (uint64_t i = a1[26]; v7 != i; uint64_t i = a1[26])
  {
    if (TI::Favonius::BeamSearch::should_extend_for_hit_testing(a1, v7, *(unsigned __int8 *)(a1[3] + 12)))TI::Favonius::BeamSearch::add_extensions_to_fringe((uint64_t)a1, a2, v7, (uint64_t)&v11); {
    v7 += 8;
    }
  }
  uint64_t result = TI::Favonius::BeamSearch::add_transposition_extensions_to_fringe((uint64_t)a1, a2, (uint64_t)&v11);
  if (v5)
  {
    unsigned int v9 = atomic_load(v5 + 2);
    if (v9 == 1)
    {
      uint64_t v10 = *(uint64_t (**)(unsigned int *))(*(void *)v5 + 8);
      return v10(v5);
    }
    else
    {
      atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

uint64_t TI::Favonius::BeamSearch::should_extend_for_hit_testing(void *a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = *(_WORD *)(*(void *)a2 + 120);
  uint64_t should_extend_for_hit_testing = 1;
  if (!KB::String::equal((KB::String *)(*(void *)a2 + 88), (const KB::String *)(a1[35] + 88), 1)
    && (v6 & 0xE) == 0)
  {
    long long v8 = *(void **)a2;
    if ((v6 & 0x20) == 0
      || !a3
      || (uint64_t v9 = v8[4], (*(_WORD *)(v9 + 120) & 0x4E) == 0)
      || !*(void *)(v9 + 56)
      || (*(_DWORD *)(v9 + 140) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      if (!(*(unsigned int (**)(void *))(*v8 + 64))(v8)
        && (*(uint64_t (**)(void *))(*a1 + 24))(a1)
        && *(void *)(*(void *)a2 + 32))
      {
        uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
        uint64_t v12 = *(void *)(*(void *)a2 + 32);
        uint64_t v15 = (unsigned int *)v12;
        if (v12)
        {
          atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
          uint64_t v13 = v15;
          uint64_t should_extend_for_hit_testing = TI::Favonius::BeamSearch::should_extend_for_hit_testing(v11, &v15, a3);
          if (v13)
          {
            unsigned int v14 = atomic_load(v13 + 2);
            if (v14 == 1) {
              (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
            }
          }
        }
        else
        {
          return TI::Favonius::BeamSearch::should_extend_for_hit_testing(v11, &v15, a3);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return should_extend_for_hit_testing;
}

void TI::Favonius::BeamSearch::add_extensions_to_fringe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a4) {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)a4 + 8), 1u);
  }
  TI::Favonius::SearchNodeGeometryExtensions::create();
}

void TI::Favonius::BeamSearch::add_unmatched_touch_extensions_to_fringe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a4) {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)a4 + 8), 1u);
  }
  TI::Favonius::SearchNodeSkippingTouch::create();
}

uint64_t TI::Favonius::BeamSearch::add_transposition_extensions_to_fringe(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
    uint64_t v4 = *(void *)(v3 + 200);
    if (v4 != *(void *)(v3 + 208))
    {
      uint64_t v6 = result;
      do
      {
        uint64_t result = TI::Favonius::BeamSearch::should_extend_for_hit_testing((void *)v3, v4, *(unsigned __int8 *)(*(void *)(v6 + 24) + 12));
        if (result)
        {
          uint64_t v7 = *(void *)(v6 + 40);
          if (v7) {
            atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
          }
          if (*(void *)a3) {
            atomic_fetch_add((atomic_uint *volatile)(*(void *)a3 + 8), 1u);
          }
          TI::Favonius::SearchNodeTranspositionGeometryExtensions::create();
        }
        v4 += 8;
      }
      while (v4 != *(void *)(v3 + 208));
    }
    unsigned int v8 = atomic_load((unsigned int *)(v3 + 8));
    if (v8 == 1)
    {
      uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
      return v9(v3);
    }
    else
    {
      atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF);
    }
  }
  return result;
}

uint64_t TI::Favonius::BeamSearch::most_likely_geometry_hypothesis@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(**(void **)(this + 200) + 128);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  }
  return this;
}

uint64_t TI::Favonius::BeamSearch::input_geometry_hypothesis@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(this + 280) + 128);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  }
  return this;
}

void TI::Favonius::BeamSearch::alignment_for_accepted_text(TI::Favonius::BeamSearch *this@<X0>, const KB::String *a2@<X1>, const KB::String *a3@<X2>, KB::String *a4@<X3>, std::vector<unsigned int> *a5@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((void *)this + 35);
  uint64_t v11 = v10;
  do
  {
    uint64_t v12 = v11;
    uint64_t v11 = *(void *)(v11 + 32);
  }
  while (v11);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  int v47 = 0;
  uint64_t v13 = *(atomic_uint **)(v10 + 128);
  if (v13) {
    atomic_fetch_add(v13 + 2, 1u);
  }
  (*(void (**)(atomic_uint *, void **, int *))(*(void *)v13 + 88))(v13, &v48, &v47);
  unsigned int v14 = atomic_load((unsigned int *)v13 + 2);
  if (v14 == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v13 + 8))(v13);
  }
  else {
    atomic_fetch_add(v13 + 2, 0xFFFFFFFF);
  }
  KB::String::String((KB::String *)v54, a4);
  memset(&v46, 0, sizeof(v46));
  unsigned int v15 = *((unsigned __int16 *)a4 + 2);
  if (!*((_WORD *)a4 + 2))
  {
    KB::String::compute_length((unsigned __int16 *)a4);
    unsigned int v15 = *((unsigned __int16 *)a4 + 2);
  }
  LODWORD(__x.__begin_) = -1;
  v16.__i_ = 0;
  std::vector<unsigned int>::insert(&v46, v16, v15, (std::vector<unsigned int>::const_reference)&__x);
  (*(void (**)(void, unsigned char *, std::vector<unsigned int> *, void))(**(void **)(*((void *)this + 35)
                                                                                             + 56)
                                                                               + 200))(*(void *)(*((void *)this + 35) + 56), v54, &v46, *(void *)(v12 + 56));
  memset(&__p, 0, sizeof(__p));
  __x.__begin_ = (std::vector<unsigned int>::pointer)&unk_1F3F77D18;
  __x.__end_ = (std::vector<unsigned int>::pointer)1;
  if ((KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)&__x, a2, (const KB::String *)v54, 0, &__p) & 1) == 0)
  {
    a5->__begin_ = 0;
    a5->__end_ = 0;
    a5->__end_cap_.__value_ = 0;
    goto LABEL_46;
  }
  if (*(_WORD *)a4)
  {
    unsigned int v17 = *((unsigned __int16 *)a3 + 2);
    if (!*((_WORD *)a3 + 2))
    {
      KB::String::compute_length((unsigned __int16 *)a3);
      unsigned int v17 = *((unsigned __int16 *)a3 + 2);
    }
    unsigned int v18 = *((unsigned __int16 *)a4 + 2);
    if (!*((_WORD *)a4 + 2))
    {
      KB::String::compute_length((unsigned __int16 *)a4);
      unsigned int v18 = *((unsigned __int16 *)a4 + 2);
    }
    if (v17 <= v18)
    {
      uint64_t v22 = (char *)*((void *)a4 + 1);
      if (v22) {
        uint64_t v23 = (char *)*((void *)a4 + 1);
      }
      else {
        uint64_t v23 = (char *)a4 + 16;
      }
      *(void *)&long long v41 = v23;
      int v24 = *(unsigned __int16 *)a4;
      DWORD2(v41) = 0;
      HIDWORD(v41) = v24;
      LODWORD(v42) = 0;
      KB::String::iterator::initialize((uint64_t *)&v41);
      unsigned int v25 = *((unsigned __int16 *)a3 + 2);
      if (!*((_WORD *)a3 + 2))
      {
        KB::String::compute_length((unsigned __int16 *)a3);
        unsigned int v25 = *((unsigned __int16 *)a3 + 2);
        int v24 = *(unsigned __int16 *)a4;
        uint64_t v22 = (char *)*((void *)a4 + 1);
      }
      long long v43 = v41;
      uint64_t v44 = v42;
      std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v43, v25);
      if (v22) {
        double v26 = v22;
      }
      else {
        double v26 = (char *)a4 + 16;
      }
      uint64_t v37 = v26;
      int v38 = v24;
      int v39 = v24;
      int v40 = 0;
      KB::String::iterator::initialize((uint64_t *)&v37);
      KB::String::String((KB::String *)&v51, (const KB::String::iterator *)&v43, (const KB::String::iterator *)&v37);
      unint64_t v27 = (unsigned __int16 *)KB::String::String((KB::String *)&__x, a2);
      KB::String::append(v27, (const KB::String *)&v51);
      KB::String::operator=((uint64_t)a4, (KB::String *)&__x);
      if (__x.__end_ && BYTE6(__x.__begin_) == 1) {
        free(__x.__end_);
      }
      std::vector<unsigned int>::pointer v28 = *(std::vector<unsigned int>::pointer *)v52;
      if (!*(void *)v52) {
        goto LABEL_44;
      }
      int v29 = BYTE6(v51);
    }
    else
    {
      std::vector<unsigned int>::pointer begin = __p.__begin_;
      std::vector<unsigned int>::pointer end = __p.__end_;
      v33[0] = MEMORY[0x1E4F143A8];
      v33[1] = 0x40000000;
      float v34 = ___ZNK2TI8Favonius10BeamSearch27alignment_for_accepted_textERKN2KB6StringES5_RS3__block_invoke;
      uint64_t v35 = &__block_descriptor_tmp_32;
      uint64_t v36 = a4;
      if (__p.__begin_ == __p.__end_)
      {
        std::vector<unsigned int>::pointer v21 = __p.__begin_;
      }
      else
      {
        while ((((uint64_t (*)(void *, void))v34)(v33, *begin) & 1) == 0)
        {
          if (++begin == end)
          {
            std::vector<unsigned int>::pointer begin = end;
            break;
          }
        }
        std::vector<unsigned int>::pointer v21 = begin;
        std::vector<unsigned int>::pointer begin = __p.__begin_;
      }
      uint64_t v30 = (char *)v21 - (char *)begin;
      if (*((void *)a2 + 1)) {
        unint64_t v31 = (char *)*((void *)a2 + 1);
      }
      else {
        unint64_t v31 = (char *)a2 + 16;
      }
      uint64_t v51 = v31;
      unsigned int v32 = *(unsigned __int16 *)a2;
      *(_DWORD *)unint64_t v52 = 0;
      *(void *)&v52[4] = v32;
      KB::String::iterator::initialize((uint64_t *)&v51);
      *(void *)&long long v41 = v31;
      DWORD2(v41) = 0;
      HIDWORD(v41) = v32;
      LODWORD(v42) = 0;
      KB::String::iterator::initialize((uint64_t *)&v41);
      long long v43 = v41;
      uint64_t v44 = v42;
      std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v43, (int)(v30 >> 2));
      KB::String::String((KB::String *)&__x, (const KB::String::iterator *)&v51, (const KB::String::iterator *)&v43);
      KB::String::operator=((uint64_t)a4, (KB::String *)&__x);
      std::vector<unsigned int>::pointer v28 = __x.__end_;
      if (!__x.__end_) {
        goto LABEL_44;
      }
      int v29 = BYTE6(__x.__begin_);
    }
    if (v29 == 1) {
      free(v28);
    }
  }
LABEL_44:
  KB::Alignment::operator*(&__p, (uint64_t *)&v46, &__x);
  KB::Alignment::operator*(&__x, (uint64_t *)&v48, a5);
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
LABEL_46:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v46.__begin_)
  {
    v46.__end_ = v46.__begin_;
    operator delete(v46.__begin_);
  }
  if (v55 && v54[6] == 1) {
    free(v55);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  if (__n)
  {
    std::vector<unsigned int>::const_reference v4 = __x;
    uint64_t i = (unsigned int *)__position.__i_;
    uint64_t v7 = this;
    p_end_cap = (std::allocator<unsigned int> *)&this->__end_cap_;
    value = this->__end_cap_.__value_;
    std::vector<unsigned int>::pointer end = this->__end_;
    if (__n <= value - end)
    {
      uint64_t v17 = (char *)end - (char *)__position.__i_;
      if (__n <= end - __position.__i_)
      {
        unsigned int v20 = this->__end_;
        std::vector<unsigned int>::size_type v19 = __n;
      }
      else
      {
        unint64_t v18 = 0;
        std::vector<unsigned int>::size_type v19 = v17 >> 2;
        unsigned int v20 = (unsigned int *)&end[__n - (v17 >> 2)];
        do
        {
          end[v18 / 4] = *__x;
          v18 += 4;
        }
        while (4 * __n - 4 * v19 != v18);
        this->__end_ = v20;
        if (end == __position.__i_) {
          return (std::vector<unsigned int>::iterator)this;
        }
      }
      std::vector<unsigned int>::pointer v21 = &__position.__i_[__n];
      uint64_t v22 = &v20[-__n];
      uint64_t v23 = v20;
      if (v22 < end)
      {
        uint64_t v23 = v20;
        do
        {
          unsigned int v24 = *v22++;
          *v23++ = v24;
        }
        while (v22 < end);
      }
      this->__end_ = v23;
      if (v20 != v21) {
        this = (std::vector<unsigned int> *)memmove(&v20[-(v20 - v21)], __position.__i_, (char *)v20 - (char *)v21);
      }
      if (i <= v4)
      {
        if (v7->__end_ <= v4) {
          std::vector<unsigned int>::size_type v25 = 0;
        }
        else {
          std::vector<unsigned int>::size_type v25 = __n;
        }
        v4 += v25;
      }
      do
      {
        *i++ = *v4;
        --v19;
      }
      while (v19);
    }
    else
    {
      std::vector<unsigned int>::pointer begin = this->__begin_;
      unint64_t v12 = __n + end - this->__begin_;
      if (v12 >> 62) {
        abort();
      }
      uint64_t v13 = __position.__i_ - begin;
      uint64_t v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v12) {
        unint64_t v12 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v12;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v15) {
        unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v15);
      }
      else {
        uint64_t v16 = 0;
      }
      double v26 = (unsigned int *)(v15 + 4 * v13);
      __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v15;
      __v.__begin_ = v26;
      __v.__end_cap_.__value_ = (unsigned int *)(v15 + 4 * v16);
      std::vector<unsigned int>::size_type v27 = 4 * __n;
      std::vector<unsigned int>::pointer v28 = &v26[__n];
      do
      {
        *v26++ = *v4;
        v27 -= 4;
      }
      while (v27);
      __v.__end_ = v28;
      std::vector<unsigned int>::__swap_out_circular_buffer(v7, &__v, i);
      this = (std::vector<unsigned int> *)__v.__first_;
      if (__v.__first_) {
        operator delete(__v.__first_);
      }
    }
  }
  return (std::vector<unsigned int>::iterator)this;
}

BOOL ___ZNK2TI8Favonius10BeamSearch27alignment_for_accepted_textERKN2KB6StringES5_RS3__block_invoke(uint64_t a1, unsigned int a2)
{
  if (a2 == -1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(unsigned __int16 *)(v3 + 4);
  if (!*(_WORD *)(v3 + 4))
  {
    KB::String::compute_length(*(unsigned __int16 **)(a1 + 32));
    unsigned int v4 = *(unsigned __int16 *)(v3 + 4);
  }
  return v4 <= a2;
}

void TI::Favonius::BeamSearch::input_string(TI::Favonius::BeamSearch *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (TI::Favonius::SearchNode *)*((void *)this + 35);
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  TI::Favonius::SearchNode::input_string_recursive(v2, (KB::String *)a2, 0);
}

uint64_t TI::Favonius::BeamSearch::hit_key(TI::Favonius::BeamSearch *this)
{
  return *((void *)this + 34);
}

uint64_t TI::Favonius::BeamSearch::parent(TI::Favonius::BeamSearch *this)
{
  return *((void *)this + 2);
}

uint64_t TI::Favonius::BeamSearch::touch_history(TI::Favonius::BeamSearch *this)
{
  return *((void *)this + 5);
}

void TI::Favonius::BeamSearch::~BeamSearch(TI::Favonius::BeamSearch *this)
{
  TI::Favonius::BeamSearch::~BeamSearch(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  void **v16;

  *(void *)this = &unk_1F3F76280;
  uint64_t v2 = (unsigned int *)*((void *)this + 35);
  if (v2)
  {
    uint64_t v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  unsigned int v4 = *((void *)this + 34);
  if (v4) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v4);
  }
  uint64_t v16 = (void **)((char *)this + 248);
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v16);
  uint64_t v16 = (void **)((char *)this + 224);
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v16);
  uint64_t v16 = (void **)((char *)this + 200);
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v16);
  uint64_t v16 = (void **)((char *)this + 176);
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v16);
  uint64_t v5 = (void *)*((void *)this + 19);
  if (v5)
  {
    *((void *)this + 20) = v5;
    operator delete(v5);
  }
  uint64_t v16 = (void **)((char *)this + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v16);
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::Favonius::BeamSearch *)((char *)this + 120));
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::Favonius::BeamSearch *)((char *)this + 112));
  uint64_t v6 = (void *)*((void *)this + 8);
  if (v6)
  {
    *((void *)this + 9) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  }
  unsigned int v8 = (unsigned int *)*((void *)this + 5);
  if (v8)
  {
    uint64_t v9 = atomic_load(v8 + 2);
    if (v9 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v10 = (unsigned int *)*((void *)this + 4);
  if (v10)
  {
    uint64_t v11 = atomic_load(v10 + 2);
    if (v11 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF);
    }
  }
  unint64_t v12 = (unsigned int *)*((void *)this + 3);
  if (v12)
  {
    uint64_t v13 = atomic_load(v12 + 2);
    if (v13 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v12 + 16))(v12);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v14 = (unsigned int *)*((void *)this + 2);
  if (v14)
  {
    unint64_t v15 = atomic_load(v14 + 2);
    if (v15 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v14 + 8))(v14);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v14 + 2, 0xFFFFFFFF);
    }
  }
}

void TI::Favonius::BeamSearchAlgorithm::~BeamSearchAlgorithm(TI::Favonius::BeamSearchAlgorithm *this)
{
}

void TI::Favonius::BeamSearchAlgorithm::create_search(uint64_t a1, uint64_t a2, uint64_t a3, void (****a4)(void), uint64_t *a5, uint64_t *a6)
{
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v7 = *a5;
  *a5 = 0;
  uint64_t v8 = *a6;
  *a6 = 0;
  (**v6)();
  uint64_t v10 = &__block_literal_global_39;
  std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(0, 0, (uint64_t)&v10, 0, 1);
  if (a1) {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  }
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  }
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  TI::Favonius::BeamSearch::create();
}

void TI::Favonius::BeamSearch::create()
{
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, uint64_t *a2, uint64_t *a3, KB::LanguageModelContext *a4, uint64_t *a5, uint64_t **a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F76280;
  uint64_t v8 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v8;
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = *a5;
  *a5 = 0;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), a4);
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((void *)(a1 + 200), *a6, a6[1], a6[1] - *a6);
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  uint64_t v11 = **(void **)(a1 + 200);
  *(void *)(a1 + 280) = v11;
  if (v11) {
    atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
  }
  return a1;
}

BOOL ___ZN2TI8Favonius19BeamSearchAlgorithm13create_searchERKN2KB20LanguageModelContextERKNS2_6StringEN3WTF10PassRefPtrINS0_11TypingModelEEENSA_INS0_18CandidateGeneratorEEENSA_INS0_12TouchHistoryEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4 = (*(float (**)(void))(**(void **)a2 + 88))();
  return v4 > (*(float (**)(void))(**(void **)a3 + 88))();
}

float TI::Favonius::BeamSearch::compute_language_power(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) + 56);
  unint64_t v4 = *(unsigned int *)(v3 + 200);
  unint64_t v5 = (unint64_t)((uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 3) >> 1;
  float result = 0.24;
  if (a2) {
    float result = 0.12;
  }
  if (v5 >= v4 && v4 <= 0xB) {
    return 0.02;
  }
  return result;
}

void TI::Favonius::BeamSearch::clear_cached_language_extensions(TI::Favonius::BeamSearch *this)
{
  for (uint64_t i = (uint64_t *)*((void *)this + 25); i != *((uint64_t **)this + 26); ++i)
  {
    uint64_t v3 = *i;
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity(v3 + 176);
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity(v3 + 200);
  }
}

void TI::Favonius::BeamSearch::log_search_nodes(uint64_t a1, unsigned int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v12 = 0x100000;
  __int16 v13 = 0;
  char v14 = 0;
  unint64_t v15 = 0;
  char v16 = 0;
  if (a2 > 6) {
    uint64_t v3 = "UNKNOWN";
  }
  else {
    uint64_t v3 = off_1E6E2C580[a2];
  }
  KB::String::append_format((KB::String *)&v12, "BeamSearch(%s):\n", v3);
  unint64_t v4 = *(TI::Favonius::SearchNode ***)(a1 + 200);
  for (uint64_t i = *(TI::Favonius::SearchNode ***)(a1 + 208); v4 != i; ++v4)
  {
    TI::Favonius::SearchNode::debug_data(*v4, (uint64_t)&v9);
    uint64_t v6 = (const char *)v10;
    if (!v10) {
      uint64_t v6 = (const char *)&v11;
    }
    if ((_WORD)v9) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = "";
    }
    KB::String::append_format((KB::String *)&v12, "    %s", v7);
    if (v10 && BYTE6(v9) == 1) {
      free(v10);
    }
  }
  KB::cf_string_impl<KB::String>(&v9, (unsigned __int16 *)&v12);
  CFStringRef v8 = v9;
  TIOSLogLines(v9);
  if (v8) {
    CFRelease(v8);
  }
  if (v15)
  {
    if (v14 == 1) {
      free(v15);
    }
  }
}

uint64_t TI::Favonius::BeamSearch::depth(uint64_t this)
{
  uint64_t v1 = this;
  LODWORD(this) = -1;
  do
  {
    uint64_t v1 = *(void *)(v1 + 16);
    this = (this + 1);
  }
  while (v1);
  return this;
}

BOOL TI::Favonius::BeamSearch::is_ancestor(TI::Favonius::BeamSearch *this, const TI::Favonius::BeamSearch *a2)
{
  if (this && this != a2)
  {
    do
    {
      this = (TI::Favonius::BeamSearch *)*((void *)this + 2);
      if (this) {
        BOOL v2 = this == a2;
      }
      else {
        BOOL v2 = 1;
      }
    }
    while (!v2);
  }
  return this == a2;
}

float TI::Favonius::BeamSearch::compute_pruning_threshold(uint64_t a1, uint64_t a2, float a3)
{
  if (!a2) {
    return -INFINITY;
  }
  float v3 = *(float *)(a2 + 156);
  return (float)(v3 + (*(float (**)(uint64_t))(*(void *)a1 + 16))(a1)) + (float)(a3 * -5.9915);
}

uint64_t TI::Favonius::BeamSearch::append_hit_keys(uint64_t result, char **a2, uint64_t a3)
{
  if (result != a3)
  {
    unint64_t v4 = (void *)result;
    TI::Favonius::BeamSearch::append_hit_keys(*(void *)(result + 16));
    unint64_t v5 = (unint64_t)a2[2];
    uint64_t v6 = a2[1];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = (v6 - *a2) >> 4;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60) {
        abort();
      }
      uint64_t v10 = v5 - (void)*a2;
      if (v10 >> 3 > v9) {
        unint64_t v9 = v10 >> 3;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      uint64_t v30 = a2 + 2;
      int v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v11);
      char v14 = &v12[16 * v8];
      uint64_t v7 = v14 + 16;
      *(void *)char v14 = 0;
      *((void *)v14 + 1) = 0;
      char v16 = *a2;
      unint64_t v15 = a2[1];
      if (v15 == *a2)
      {
        int64x2_t v18 = vdupq_n_s64((unint64_t)v15);
      }
      else
      {
        do
        {
          long long v17 = *((_OWORD *)v15 - 1);
          v15 -= 16;
          *(void *)unint64_t v15 = 0;
          *((void *)v15 + 1) = 0;
          *((_OWORD *)v14 - 1) = v17;
          v14 -= 16;
        }
        while (v15 != v16);
        int64x2_t v18 = *(int64x2_t *)a2;
      }
      *a2 = v14;
      a2[1] = v7;
      int64x2_t v28 = v18;
      std::vector<unsigned int>::size_type v19 = a2[2];
      a2[2] = &v12[16 * v13];
      int v29 = v19;
      uint64_t v27 = v18.i64[0];
      std::__split_buffer<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::~__split_buffer((uint64_t)&v27);
    }
    else
    {
      uint64_t v7 = v6 + 16;
      *(void *)uint64_t v6 = 0;
      *((void *)v6 + 1) = 0;
    }
    a2[1] = v7;
    uint64_t v20 = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
    uint64_t v21 = v20;
    uint64_t v22 = a2[1];
    if (v20) {
      atomic_fetch_add((atomic_uint *volatile)(v20 + 8), 1u);
    }
    uint64_t v23 = (unsigned int *)*((void *)v22 - 2);
    *((void *)v22 - 2) = v21;
    if (v23)
    {
      unsigned int v24 = atomic_load(v23 + 2);
      if (v24 == 1) {
        (*(void (**)(unsigned int *))(*(void *)v23 + 8))(v23);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v23 + 2, 0xFFFFFFFF);
      }
    }
    std::vector<unsigned int>::size_type v25 = (atomic_uint *)v4[34];
    double v26 = a2[1];
    if (v25) {
      atomic_fetch_add(v25, 1u);
    }
    float result = *((void *)v26 - 1);
    *((void *)v26 - 1) = v25;
    if (result) {
      return WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
    }
  }
  return result;
}

void TI::Favonius::BeamSearchAlgorithm::create(TI::Favonius::BeamSearchAlgorithm *this, double a2, double a3)
{
}

uint64_t TI::Favonius::BeamSearchAlgorithm::BeamSearchAlgorithm(uint64_t this, char a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(this + 8) = 1;
  *(void *)this = &unk_1F3F763D8;
  *(unsigned char *)(this + 12) = a2;
  *(void *)(this + 16) = a5;
  *(void *)(this + 24) = a6;
  *(double *)(this + 32) = a3;
  *(double *)(this + 40) = a4;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(void *)this = &unk_1F3F763D8;
  *(unsigned char *)(this + 12) = a2;
  *(void *)(this + 16) = a5;
  *(void *)(this + 24) = a6;
  *(double *)(this + 32) = a3;
  *(double *)(this + 40) = a4;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_favonius_language_weight(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 332) = a2;
  *(unsigned char *)(result + 336) = BYTE4(a2);
  return result;
}

void TI::Favonius::FavoniusStrokeBuildManager::get_it_recognizer_state(uint64_t a1@<X0>, int a2@<W1>, CFMutableStringRef *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 720);
  if (v3) {
    TI::TIInputRecognizer::state_for_typology_logging(v3, a2, a3);
  }
  else {
    *a3 = 0;
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::remove_shapes_older_than(TI::Favonius::FavoniusStrokeBuildManager *this, double a2)
{
  uint64_t result = *((void *)this + 88);
  if (result) {
    return (*(uint64_t (**)(double))(*(void *)result + 144))(a2);
  }
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_ensemble_scheme(uint64_t result, int a2)
{
  *(_DWORD *)(result + 344) = a2;
  return result;
}

KB::String *TI::Favonius::FavoniusStrokeBuildManager::set_shape_store_resource_path(TI::Favonius::FavoniusStrokeBuildManager *this, const KB::String *a2)
{
  return KB::String::operator=((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 504), a2);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::continuous_path_usage_count(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t result = *((void *)this + 88);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 136))();
  }
  return result;
}

std::string *TI::Favonius::FavoniusStrokeBuildManager::set_language_identifier(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 448), a2);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_stem_suffix_correction_factor(uint64_t this, char a2)
{
  *(unsigned char *)(this + 768) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::uses_stem_suffix_correction_factor(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  return *((unsigned __int8 *)this + 768);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_mltt_bundle_url(uint64_t result, const std::string *a2)
{
  BOOL v2 = a2;
  uint64_t v3 = result;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (std::string *)(result + 736);
  int v5 = *(unsigned __int8 *)(result + 760);
  int v6 = a2[1].__r_.__value_.__s.__data_[0];
  if (*(unsigned char *)(result + 760)) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    BOOL v8 = (*(unsigned char *)(result + 760) != 0) == (a2[1].__r_.__value_.__s.__data_[0] != 0);
    goto LABEL_7;
  }
  uint64_t v9 = *(unsigned __int8 *)(result + 759);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = *(unsigned __int8 *)(result + 759);
  }
  else {
    uint64_t v10 = *(void *)(result + 744);
  }
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v12 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (v10 == size)
  {
    if (v12 < 0) {
      a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((v9 & 0x80) == 0)
    {
      if (!*(unsigned char *)(result + 759)) {
        return result;
      }
      uint64_t v13 = v9 - 1;
      char v14 = (unsigned __int8 *)(result + 736);
      do
      {
        int v16 = *v14++;
        int v15 = v16;
        int v18 = a2->__r_.__value_.__s.__data_[0];
        a2 = (const std::string *)((char *)a2 + 1);
        int v17 = v18;
        BOOL v20 = v13-- != 0;
        BOOL v8 = v15 == v17;
      }
      while (v8 && v20);
LABEL_7:
      if (v8) {
        return result;
      }
      goto LABEL_28;
    }
    uint64_t result = memcmp(v4->__r_.__value_.__l.__data_, a2, *(void *)(result + 744));
    if (!result) {
      return result;
    }
  }
LABEL_28:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v22 = 136315138;
    uint64_t v23 = "set_mltt_bundle_url";
    _os_log_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "%s  Resetting ml tap typing recognizer", (uint8_t *)&v22, 0xCu);
    int v5 = *(unsigned __int8 *)(v3 + 760);
    int v6 = v2[1].__r_.__value_.__s.__data_[0];
  }
  if (v5 == v6)
  {
    if (v5) {
      std::string::operator=(v4, v2);
    }
  }
  else if (v5)
  {
    if (*(char *)(v3 + 759) < 0) {
      operator delete(v4->__r_.__value_.__l.__data_);
    }
    *(unsigned char *)(v3 + 760) = 0;
  }
  else
  {
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v4, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v21 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
      v4->__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v21;
    }
    *(unsigned char *)(v3 + 760) = 1;
  }
  uint64_t result = *(void *)(v3 + 720);
  *(void *)(v3 + 720) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_ensemble_source_scales(uint64_t this, CFArrayRef theArray)
{
  if (theArray)
  {
    uint64_t v3 = this;
    this = CFArrayGetCount(theArray);
    if (this >= 1)
    {
      uint64_t v4 = this;
      unint64_t v5 = 0;
      uint64_t v6 = v3 + 376;
      do
      {
        this = (uint64_t)applesauce::CF::details::at_as<__CFNumber const*>(theArray, v5);
        if (v7)
        {
          this = applesauce::CF::convert_as<double,0>(this);
          if (v8) {
            *(void *)(v6 + 8 * v5) = this;
          }
        }
        ++v5;
      }
      while (v4 != v5);
    }
  }
  return this;
}

const void *applesauce::CF::details::at_as<__CFNumber const*>(const __CFArray *a1, unint64_t a2)
{
  if (CFArrayGetCount(a1) <= a2) {
    return 0;
  }
  else {
    return CFArrayGetValueAtIndex(a1, a2);
  }
}

unint64_t applesauce::CF::convert_as<double,0>(unint64_t result)
{
  if (*(double *)&result != 0.0)
  {
    CFNumberRef v1 = (const __CFNumber *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          CFNumberRef v3 = v1;
          CFNumberType v4 = kCFNumberSInt8Type;
          goto LABEL_16;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          CFNumberRef v8 = v1;
          CFNumberType v9 = kCFNumberSInt16Type;
          goto LABEL_18;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          CFNumberRef v10 = v1;
          CFNumberType v11 = kCFNumberSInt32Type;
          goto LABEL_20;
        case kCFNumberSInt64Type:
          uint64_t valuePtr = 0;
          CFNumberRef v12 = v1;
          CFNumberType v13 = kCFNumberSInt64Type;
          goto LABEL_29;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          CFNumberRef v14 = v1;
          CFNumberType v15 = kCFNumberFloat32Type;
          goto LABEL_25;
        case kCFNumberFloat64Type:
          uint64_t valuePtr = 0;
          CFNumberRef v16 = v1;
          CFNumberType v17 = kCFNumberFloat64Type;
          goto LABEL_37;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          CFNumberRef v3 = v1;
          CFNumberType v4 = kCFNumberCharType;
LABEL_16:
          BOOL v18 = CFNumberGetValue(v3, v4, &valuePtr) == 0;
          int v19 = (char)valuePtr;
          goto LABEL_21;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          CFNumberRef v8 = v1;
          CFNumberType v9 = kCFNumberShortType;
LABEL_18:
          BOOL v18 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
          int v19 = (__int16)valuePtr;
          goto LABEL_21;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          CFNumberRef v10 = v1;
          CFNumberType v11 = kCFNumberIntType;
LABEL_20:
          BOOL v18 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
          int v19 = valuePtr;
LABEL_21:
          double v20 = (double)v19;
          goto LABEL_30;
        case kCFNumberLongType:
          uint64_t valuePtr = 0;
          CFNumberRef v12 = v1;
          CFNumberType v13 = kCFNumberLongType;
          goto LABEL_29;
        case kCFNumberLongLongType:
          uint64_t valuePtr = 0;
          CFNumberRef v12 = v1;
          CFNumberType v13 = kCFNumberLongLongType;
          goto LABEL_29;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          CFNumberRef v14 = v1;
          CFNumberType v15 = kCFNumberFloatType;
LABEL_25:
          BOOL v18 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
          double v20 = *(float *)&valuePtr;
          goto LABEL_30;
        case kCFNumberDoubleType:
          uint64_t valuePtr = 0;
          CFNumberRef v16 = v1;
          CFNumberType v17 = kCFNumberDoubleType;
          goto LABEL_37;
        case kCFNumberCFIndexType:
          uint64_t valuePtr = 0;
          CFNumberRef v12 = v1;
          CFNumberType v13 = kCFNumberCFIndexType;
          goto LABEL_29;
        case kCFNumberNSIntegerType:
          uint64_t valuePtr = 0;
          CFNumberRef v12 = v1;
          CFNumberType v13 = kCFNumberNSIntegerType;
LABEL_29:
          BOOL v18 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
          double v20 = (double)valuePtr;
LABEL_30:
          double v7 = v20;
          goto LABEL_31;
        case kCFNumberCGFloatType:
          uint64_t valuePtr = 0;
          CFNumberRef v16 = v1;
          CFNumberType v17 = kCFNumberCGFloatType;
LABEL_37:
          BOOL v18 = CFNumberGetValue(v16, v17, &valuePtr) == 0;
          double v7 = *(double *)&valuePtr;
LABEL_31:
          if (v18) {
            double v7 = 0.0;
          }
          unint64_t v6 = *(void *)&v7 & 0xFFFFFFFFFFFFFF00;
          break;
        default:
          unint64_t v6 = 0;
          LOBYTE(v7) = 0;
          break;
      }
      return LOBYTE(v7) | v6;
    }
    else
    {
      CFTypeID v5 = CFBooleanGetTypeID();
      if (v5 == CFGetTypeID(v1)) {
        *(double *)&uint64_t result = (double)CFBooleanGetValue(v1);
      }
      else {
        *(double *)&uint64_t result = 0.0;
      }
    }
  }
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_ensemble_source_weights(uint64_t this, CFArrayRef theArray)
{
  if (theArray)
  {
    uint64_t v3 = this;
    this = CFArrayGetCount(theArray);
    if (this >= 1)
    {
      uint64_t v4 = this;
      unint64_t v5 = 0;
      uint64_t v6 = v3 + 352;
      do
      {
        this = (uint64_t)applesauce::CF::details::at_as<__CFNumber const*>(theArray, v5);
        if (v7)
        {
          this = applesauce::CF::convert_as<double,0>(this);
          if (v8) {
            *(void *)(v6 + 8 * v5) = this;
          }
        }
        ++v5;
      }
      while (v4 != v5);
    }
  }
  return this;
}

const void **TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_params(const void **this, const __CFDictionary *a2)
{
  return KB::retain_ptr<__CFDictionary const*>::operator=(this + 91, a2);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_continuous_path_retrocorrection(uint64_t this, char a2)
{
  *(unsigned char *)(this + 329) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::uses_continuous_path_retrocorrection(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  return *((unsigned __int8 *)this + 329);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_enabled_continuous_path_algorithms(uint64_t result, int a2)
{
  *(_DWORD *)(result + 444) = a2;
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::enabled_continuous_path_algorithms(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  return *((unsigned int *)this + 111);
}

double TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_language_weight(TI::Favonius::FavoniusStrokeBuildManager *this, double result)
{
  uint64_t v2 = *((void *)this + 88);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    if (v3)
    {
      *(void *)(v3 + 432) = 0x3FD60DC768DFBD6ALL;
      float v4 = result;
      *(double *)(v3 + 440) = v4;
      *(_OWORD *)(v3 + 448) = xmmword_1E4154C80;
      *(_OWORD *)(v3 + 464) = xmmword_1E4154C90;
      *(_OWORD *)(v3 + 480) = xmmword_1E4154CA0;
      *(_OWORD *)(v3 + 496) = xmmword_1E4154CB0;
      *(_OWORD *)(v3 + 512) = xmmword_1E4154CC0;
      *(_OWORD *)(v3 + 528) = xmmword_1E4154CD0;
      *(_OWORD *)(v3 + 544) = xmmword_1E4154CE0;
      *(void *)(v3 + 560) = 0x401F404C05921038;
      *(unsigned char *)(v3 + 568) = 1;
      uint64_t result = 54.3812;
      *(_OWORD *)(v3 + 576) = xmmword_1E4154CF0;
    }
  }
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::clear_continuous_path(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t result = *((void *)this + 88);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_should_detect_pause(uint64_t this, char a2)
{
  *(unsigned char *)(this + 498) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_completes_words(uint64_t this, char a2)
{
  *(unsigned char *)(this + 497) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_continuous_path_progressive_candidates(uint64_t this, char a2)
{
  *(unsigned char *)(this + 496) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_ml_tap_typing(uint64_t this, char a2)
{
  *(unsigned char *)(this + 330) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::uses_ml_tap_typing(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  return *((unsigned __int8 *)this + 330);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_exact_typed_string_lm_ranking(uint64_t this, char a2)
{
  *(unsigned char *)(this + 212) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_continuous_path(uint64_t this, char a2)
{
  *(unsigned char *)(this + 328) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::uses_continuous_path(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  return *((unsigned __int8 *)this + 328);
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::is_hit_test_correction(TI::Favonius::FavoniusStrokeBuildManager *this, unsigned int a2)
{
  if (*((unsigned char *)this + 209)) {
    return 0;
  }
  for (uint64_t i = *((void *)this + 21); a2; --a2)
  {
    if (*(_DWORD *)(i + 4 * a2) != -1) {
      break;
    }
  }
  uint64_t v5 = *(unsigned int *)(i + 4 * a2);
  if (v5 == -1) {
    return 0;
  }
  uint64_t v6 = v5 + 1;
  if (*((void *)this + 9) <= (unint64_t)(v5 + 1)) {
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*((void *)this + 7) + 8 * v6) + 8);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7);
  uint64_t v9 = *(void *)(*((void *)this + 10) + 8 * v6);
  uint64_t v10 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9) + 8);
  uint64_t v11 = *(void *)(**(void **)(v8 + 8) + 8);
  return v10 != v11 && !KB::String::equal((KB::String *)(v10 + 8), (const KB::String *)(v11 + 8), 1);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_skip_language_layout_check_cp_ml(uint64_t this, int a2)
{
  if (a2) {
    *(unsigned char *)(this + 440) = 0;
  }
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_testing(uint64_t this, char a2)
{
  *(unsigned char *)(this + 211) = a2;
  return this;
}

void TI::Favonius::FavoniusStrokeBuildManager::append_debug_data(TI::Favonius::FavoniusStrokeBuildManager *this, __CFString *a2, int a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a3
    && (*(unsigned int (**)(TI::Favonius::FavoniusStrokeBuildManager *))(*(void *)this + 288))(this)
    && (uint64_t v6 = *((void *)this + 88)) != 0)
  {
    uint64_t v7 = *(TI::CP::Search **)(v6 + 64);
    if (v7)
    {
      TI::CP::Search::append_debug_data(v7, a2, v5);
    }
  }
  else
  {
    unint64_t v8 = *((unsigned int *)this + 40);
    if (v8 && *((void *)this + 9) > v8)
    {
      int v26 = 0x100000;
      __int16 v27 = 0;
      char v28 = 0;
      int v29 = 0;
      char v30 = 0;
      uint64_t v9 = *(void *)(*(void *)(*((void *)this + 7) + 8 * v8) + 8);
      (*(void (**)(uint64_t, int *))(*(void *)v9 + 104))(v9, &v26);
      uint64_t v10 = (const char *)v29;
      if (!v29) {
        uint64_t v10 = &v30;
      }
      if ((_WORD)v26) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = "";
      }
      CFStringAppendCString(a2, v11, 0x8000100u);
      int v21 = 0x100000;
      __int16 v22 = 0;
      char v23 = 0;
      uint64_t v24 = 0;
      char v25 = 0;
      KB::LanguageModelContext::description((int **)this + 28, (KB::String *)v17);
      CFNumberRef v12 = (const char *)v19;
      if (!v19) {
        CFNumberRef v12 = (const char *)&v20;
      }
      if (v17[0]) {
        CFNumberType v13 = v12;
      }
      else {
        CFNumberType v13 = "";
      }
      KB::String::append_format((KB::String *)&v21, "CONTEXT: %s\n", v13);
      if (v19 && v18 == 1) {
        free(v19);
      }
      CFNumberRef v14 = (const char *)v24;
      if (!v24) {
        CFNumberRef v14 = &v25;
      }
      if ((_WORD)v21) {
        CFNumberType v15 = v14;
      }
      else {
        CFNumberType v15 = "";
      }
      CFStringAppendCString(a2, v15, 0x8000100u);
      uint64_t v16 = *(void *)(*((void *)this + 10) + 8 * *((unsigned int *)this + 40));
      (*(void (**)(uint64_t, __CFString *))(*(void *)v16 + 144))(v16, a2);
      if (v24 && v23 == 1) {
        free(v24);
      }
      if (v29 && v28 == 1) {
        free(v29);
      }
    }
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::initialize_search_if_necessary_from_last_touch(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 209))
  {
    int v2 = *((_DWORD *)this + 40);
    if (v2)
    {
      *((_DWORD *)this + 40) = v2 - 1;
      int v3 = 1;
    }
    else
    {
      int v3 = 0;
    }
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v4 = 0u;
    *(_OWORD *)std::vector<unsigned int> __p = 0u;
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v8);
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v8 + 8));
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    LODWORD(v11) = 0x100000;
    WORD2(v11) = 0;
    BYTE6(v11) = 0;
    CFNumberRef v12 = 0;
    char v13 = 0;
    (*(void (**)(TI::Favonius::FavoniusStrokeBuildManager *, long long *, void ***, void, void))(*(void *)this + 144))(this, &v4, &v11, 0, 0);
    *((_DWORD *)this + 40) = v3;
    if (v12 && BYTE6(v11) == 1) {
      free(v12);
    }
    uint64_t v11 = (void **)&v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v8 + 8));
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*((void *)&v4 + 1)) {
      std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v4 + 1));
    }
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::keys_for_input(TI::Favonius::FavoniusStrokeBuildManager *this, unsigned int a2)
{
  if (*((unsigned char *)this + 209)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 21);
  if (((unint64_t)(*((void *)this + 22) - v2) >> 2) <= a2) {
    return 0;
  }
  for (; a2; --a2)
  {
    if (*(_DWORD *)(v2 + 4 * a2) != -1) {
      break;
    }
  }
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2);
  if (v3 == -1) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)(*(void *)(*((void *)this + 7) + 8 * v3 + 8) + 8) + 64))();
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::touch_count(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  if (*((unsigned char *)this + 209)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    return (v2 - 1);
  }
  else {
    return 0;
  }
}

unsigned int *TI::Favonius::FavoniusStrokeBuildManager::set_search_algorithm(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 40);
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 40) = v4;
  if (result)
  {
    unsigned int v5 = atomic_load(result + 2);
    if (v5 == 1) {
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)result + 16))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::search_algorithm@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 40);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  }
  return this;
}

void TI::Favonius::FavoniusStrokeBuildManager::set_candidate_refinery(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::candidate_refinery@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

unsigned int *TI::Favonius::FavoniusStrokeBuildManager::set_candidate_generator(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 16);
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v4;
  if (result)
  {
    unsigned int v5 = atomic_load(result + 2);
    if (v5 == 1) {
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
    }
  }
  *(unsigned char *)(a1 + 210) = 1;
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::candidate_generator@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  }
  return this;
}

unsigned int *TI::Favonius::FavoniusStrokeBuildManager::set_typing_model(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 8);
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 8) = v4;
  if (result)
  {
    unsigned int v5 = atomic_load(result + 2);
    if (v5 == 1) {
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 40))(result);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
    }
  }
  *(unsigned char *)(a1 + 210) = 1;
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::typing_model@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 8);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  }
  return this;
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::has_input_from_touch(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  if (*((unsigned char *)this + 209)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 21);
  uint64_t v3 = *((unsigned int *)this + 48);
  if (v3)
  {
    uint64_t v4 = 4 * v3;
    unsigned int v5 = (_DWORD *)*((void *)this + 21);
    while (*v5 == -1)
    {
      ++v5;
      v4 -= 4;
      if (!v4)
      {
        unsigned int v5 = (_DWORD *)(v2 + 4 * v3);
        return v3 > (((unint64_t)v5 - v2) >> 2);
      }
    }
  }
  else
  {
    unsigned int v5 = (_DWORD *)*((void *)this + 21);
  }
  return v3 > (((unint64_t)v5 - v2) >> 2);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::language_model_uses_input_context(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void TI::Favonius::FavoniusStrokeBuildManager::sync_with_input_from_UI(TI::Favonius::FavoniusStrokeBuildManager *this, const KB::LanguageModelContext *a2, const KB::String *a3, unsigned int a4, unsigned int a5)
{
  void (***v25)(std::vector<unsigned int>::value_type *__return_ptr);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  const KB::String *v36;
  unsigned int v37;
  TI::TIInputRecognizer *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  atomic_uint *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int *v52;
  std::vector<unsigned int>::value_type __x[2];
  size_t __n;
  void *v55;
  void v56[3];

  v56[2] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 209))
  {
    size_t __n = 0;
    unint64_t v55 = 0;
    v56[0] = 0;
    TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history((uint64_t)this, *((_DWORD *)this + 40), &__n);
    uint64_t v10 = *((void *)this + 6);
    uint64_t v11 = (uint64_t *)*((void *)this + 7);
    CFNumberRef v12 = (void *)((char *)this + 48);
    char v13 = &v11[v10];
    uint64_t v14 = *v11;
    *uint64_t v11 = *(v13 - 1);
    *(v13 - 1) = v14;
    if (v10)
    {
      if (v10 != 1)
      {
        CFNumberType v15 = (uint64_t *)(*((void *)this + 7) + 8);
        uint64_t v16 = 8 * v10 - 8;
        do
        {
          if (*v15) {
            WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(*v15);
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
    }
    else
    {
      if (!*((void *)this + 8)) {
        WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((void *)this + 6, 1uLL);
      }
      uint64_t v20 = *((void *)this + 7);
      if (v20) {
        bzero((void *)(v20 + 8 * *v12), 8 - 8 * *v12);
      }
    }
    *((void *)this + 6) = 1;
    int v21 = (unint64_t *)((char *)this + 72);
    WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::shrinkCapacity((uint64_t)this + 72);
    uint64_t v22 = *((void *)this + 21);
    *((unsigned char *)this + 208) = 0;
    *((void *)this + 22) = v22;
    *((_DWORD *)this + 48) = 0;
    KB::String::operator=((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 128), a3);
    __x[0] = -1;
    v23.__i_ = (std::__wrap_iter<const unsigned int *>::iterator_type)(*((void *)this + 21)
                                                                     + 4 * *((unsigned int *)this + 48));
    std::vector<unsigned int>::insert((std::vector<unsigned int> *)this + 7, v23, a5, __x);
    *((_DWORD *)this + 48) = a4;
    KB::LanguageModelContext::operator=((uint64_t)this + 224, (uint64_t *)a2);
    if (a4 > 0x7F) {
      goto LABEL_46;
    }
    uint64_t v24 = *((void *)this + 1);
    if (!v24) {
      goto LABEL_46;
    }
    char v25 = (void (***)(std::vector<unsigned int>::value_type *__return_ptr))*((void *)this + 5);
    if (!v25) {
      goto LABEL_46;
    }
    unint64_t v52 = (unsigned int *)*((void *)this + 1);
    atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
    int v26 = *((void *)this + 2);
    uint64_t v51 = (unsigned int *)v26;
    if (v26) {
      atomic_fetch_add((atomic_uint *volatile)(v26 + 8), 1u);
    }
    __int16 v27 = *(void *)(*(void *)(*((void *)this + 7) + 8 * *((void *)this + 6) - 8) + 8);
    uint64_t v50 = (unsigned int *)v27;
    if (v27) {
      atomic_fetch_add((atomic_uint *volatile)(v27 + 8), 1u);
    }
    (**v25)(__x);
    char v28 = *((void *)this + 9);
    if (v28 == *((void *)this + 11))
    {
      int v29 = v28 + (v28 >> 1);
      if (v28 < 0x100) {
        int v29 = 2 * v28;
      }
      if (v29 <= v28 + 1) {
        char v30 = v28 + 1;
      }
      else {
        char v30 = v29;
      }
      WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((void *)this + 9, v30);
      uint64_t v31 = *((void *)this + 10);
      if (!v31)
      {
        if (*(void *)__x)
        {
          uint64_t v48 = atomic_load((unsigned int *)(*(void *)__x + 8));
          if (v48 == 1) {
            (*(void (**)(void))(**(void **)__x + 8))();
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)(*(void *)__x + 8), 0xFFFFFFFF);
          }
        }
        goto LABEL_34;
      }
      char v28 = *v21;
    }
    else
    {
      uint64_t v31 = *((void *)this + 10);
    }
    unsigned int v32 = *(void *)__x;
    *(void *)__double x = 0;
    *(void *)(v31 + 8 * v28) = v32;
    *int v21 = v28 + 1;
LABEL_34:
    if (v50)
    {
      unint64_t v33 = atomic_load(v50 + 2);
      if (v33 == 1) {
        (*(void (**)(void))(*(void *)v50 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v50 + 2, 0xFFFFFFFF);
      }
    }
    if (v51)
    {
      float v34 = atomic_load(v51 + 2);
      if (v34 == 1) {
        (*(void (**)(void))(*(void *)v51 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v51 + 2, 0xFFFFFFFF);
      }
    }
    if (v52)
    {
      uint64_t v35 = atomic_load(v52 + 2);
      if (v35 == 1) {
        (*(void (**)(void))(*(void *)v52 + 40))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v52 + 2, 0xFFFFFFFF);
      }
    }
LABEL_46:
    *((_DWORD *)this + 40) = 0;
    TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history((uint64_t)this, &__n);
    if (*((void *)this + 6) >= 2uLL)
    {
      uint64_t v37 = 2;
      do
      {
        TI::Favonius::FavoniusStrokeBuildManager::perform_search(this, v37 - 1, &v49);
        if (v49) {
          WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v49);
        }
      }
      while (*v12 > (unint64_t)v37++);
    }
    int v39 = (TI::TIInputRecognizer *)*((void *)this + 90);
    if (v39) {
      TI::TIInputRecognizer::sync_with_input_from_UI(v39, v36, a2);
    }
    int v40 = *((void *)this + 88);
    if (v40) {
      (*(void (**)(uint64_t, const KB::LanguageModelContext *))(*(void *)v40 + 120))(v40, a2);
    }
    std::__optional_destruct_base<std::pair<KB::String,KB::String>,false>::reset[abi:nn180100]((uint64_t)this + 920);
    WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(&__n);
    goto LABEL_56;
  }
  if (a4 && TI::Favonius::FavoniusStrokeBuildManager::last_touch_committed_and_hit_return_key(this))
  {
    KB::String::String((KB::String *)&__n, "\n");
    uint64_t v17 = *(unsigned __int16 *)a3;
    if ((unsigned __int16)__n <= v17)
    {
      long long v41 = v17 - (unsigned __int16)__n;
      uint64_t v42 = (char *)*((void *)a3 + 1);
      if (!v42) {
        uint64_t v42 = (char *)a3 + 16;
      }
      int v19 = v55;
      if (v55) {
        long long v43 = (const char *)v55;
      }
      else {
        long long v43 = (const char *)v56;
      }
      BOOL v18 = strncmp(&v42[v41], v43, (unsigned __int16)__n) == 0;
    }
    else
    {
      BOOL v18 = 0;
      int v19 = v55;
    }
    if (v19 && BYTE6(__n) == 1) {
      free(v19);
    }
    if (!v18)
    {
      --*((_DWORD *)this + 40);
      uint64_t v44 = *((void *)this + 9);
      uint64_t v45 = v44 - 1;
      WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::Search>>::destruct((unsigned int *)(*((void *)this + 10) + 8 * (v44 - 1)), (unsigned int **)(*((void *)this + 10) + 8 * v44));
      *((void *)this + 9) = v45;
      std::vector<unsigned int> v46 = *((void *)this + 6) - 1;
      int v47 = *(void *)(*((void *)this + 7) + 8 * v46);
      if (v47) {
        WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v47);
      }
      *((void *)this + 6) = v46;
    }
  }
LABEL_56:
  *((unsigned char *)this + 209) = 0;
}

void TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(uint64_t a1, int a2, void *a3)
{
  unint64_t v4 = (a2 + 1);
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a3, *a3 - v4 + *(void *)(a1 + 48));
  unint64_t v5 = *(void *)(a1 + 48);
  if (v5 > v4)
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8 * v5 - 8) + 8);
    long long v7 = (atomic_uint *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
    operator new();
  }
}

uint64_t WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)result);
  if (v1 == 1)
  {
    uint64_t v2 = *(unsigned int **)(result + 8);
    if (v2)
    {
      unsigned int v3 = atomic_load(v2 + 2);
      if (v3 == 1) {
        (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
      }
    }
    JUMPOUT(0x1E4E7BC20);
  }
  atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF);
  return result;
}

void WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::shrinkCapacity(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    if (*(void *)a1)
    {
      WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::Search>>::destruct(*(unsigned int **)(a1 + 8), (unsigned int **)(*(void *)(a1 + 8) + 8 * *(void *)a1));
      *(void *)a1 = 0;
    }
    uint64_t v2 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    free(v2);
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history(uint64_t result, void *a2)
{
  if (*a2)
  {
    uint64_t v2 = *(void *)(*(void *)(result + 56) + 8 * *(void *)(result + 48) - 8);
    unsigned int v3 = *(atomic_uint **)(*(void *)(a2[1] + 8 * *a2 - 8) + 8);
    unint64_t v4 = v3;
    if (v3) {
      atomic_fetch_add(v3, 1u);
    }
    TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode::history_by_appending_touch_keycode((uint64_t)&v5, *(void *)(v2 + 8), (uint64_t *)&v4);
  }
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::perform_search@<X0>(TI::Favonius::FavoniusStrokeBuildManager *this@<X0>, unsigned int a2@<W1>, atomic_uint **a3@<X8>)
{
  uint64_t v6 = *(void *)(*((void *)this + 7) + 8 * a2);
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  }
  uint64_t v7 = a2;
  unsigned int v8 = *(_DWORD *)(v6 + 16);
  long long v9 = *(atomic_uint **)(v6 + 8);
  if (v9)
  {
    atomic_fetch_add(v9 + 2, 1u);
    BOOL v10 = v8 == -2;
    if (v8 < 0xFFFFFFFE)
    {
      long long v41 = v9;
      atomic_fetch_add(v9 + 2, 1u);
      uint64_t v11 = (unsigned int *)v9;
      goto LABEL_6;
    }
LABEL_12:
    CFNumberRef v12 = 0;
    goto LABEL_13;
  }
  BOOL v10 = v8 == -2;
  if (v8 >= 0xFFFFFFFE) {
    goto LABEL_12;
  }
  uint64_t v11 = 0;
  long long v41 = 0;
LABEL_6:
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 0x40000000;
  v39[2] = ___ZN2TI8Favonius26FavoniusStrokeBuildManager14perform_searchEj_block_invoke;
  v39[3] = &__block_descriptor_tmp_16;
  unsigned int v40 = v8;
  TI::Favonius::FavoniusStrokeBuildManager::key_near_touch_passing_test((uint64_t)&v41, (uint64_t)v39, &v42);
  CFNumberRef v12 = v42;
  uint64_t v42 = 0;
  if (v11)
  {
    unsigned int v13 = atomic_load(v11 + 2);
    if (v13 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF);
    }
  }
LABEL_13:
  if (TI::Favonius::FavoniusStrokeBuildManager::can_update_existing_search(this, a2))
  {
    uint64_t v14 = *((void *)this + 10);
    uint64_t v15 = *(void *)(v14 + 8 * v7);
    if (!v10)
    {
      if (v9) {
        atomic_fetch_add(v9 + 2, 1u);
      }
      if (v12) {
        atomic_fetch_add(v12, 1u);
      }
      (*(void (**)(atomic_uint **__return_ptr))(*(void *)v15 + 88))(&v42);
      uint64_t v16 = *(unsigned int **)(v14 + 8 * v7);
      uint64_t v17 = v42;
      uint64_t v42 = 0;
      *(void *)(v14 + 8 * v7) = v17;
      if (v16)
      {
        unsigned int v18 = atomic_load(v16 + 2);
        if (v18 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v16 + 8))(v16);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v16 + 2, 0xFFFFFFFF);
        }
        if (v42)
        {
          unsigned int v21 = atomic_load((unsigned int *)v42 + 2);
          if (v21 == 1) {
            (*(void (**)(void))(*(void *)v42 + 8))();
          }
          else {
            atomic_fetch_add(v42 + 2, 0xFFFFFFFF);
          }
        }
      }
      if (v12) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v12);
      }
      if (v9)
      {
        unsigned int v22 = atomic_load((unsigned int *)v9 + 2);
        if (v22 == 1) {
          (*(void (**)(void))(*(void *)v9 + 8))();
        }
        else {
          atomic_fetch_add(v9 + 2, 0xFFFFFFFF);
        }
      }
      uint64_t v15 = *(void *)(v14 + 8 * v7);
    }
LABEL_72:
    float v34 = (atomic_uint *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
    uint64_t v35 = v34;
    if (v34) {
      atomic_fetch_add(v34, 1u);
    }
    if (v12) {
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v12);
    }
    CFNumberRef v12 = v35;
    goto LABEL_77;
  }
  int v19 = (unint64_t *)((char *)this + 72);
  unint64_t v20 = *((void *)this + 9);
  if (v20 >= a2)
  {
    if (v20 == a2)
    {
      unint64_t v20 = a2 + 1;
      if (a2 == -1)
      {
        WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::Search>>::destruct((unsigned int *)(*((void *)this + 10) + 8 * v20), (unsigned int **)(*((void *)this + 10) + 8 * v7));
      }
      else
      {
        unint64_t v23 = *((void *)this + 11);
        if (v23 < v20)
        {
          if (v23 >= 0x100) {
            unint64_t v24 = v23 + (v23 >> 1);
          }
          else {
            unint64_t v24 = 2 * v23;
          }
          if (v24 <= v20) {
            unint64_t v25 = a2 + 1;
          }
          else {
            unint64_t v25 = v24;
          }
          WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((void *)this + 9, v25);
        }
        uint64_t v26 = *((void *)this + 10);
        if (v26) {
          bzero((void *)(v26 + 8 * *v19), 8 * v20 - 8 * *v19);
        }
      }
      unint64_t *v19 = v20;
    }
    if (v20 > a2)
    {
      uint64_t v27 = *(void *)(*((void *)this + 10) + 8 * (a2 - 1));
      if (v9) {
        atomic_fetch_add(v9 + 2, 1u);
      }
      if (v12) {
        atomic_fetch_add(v12, 1u);
      }
      (*(void (**)(atomic_uint **__return_ptr))(*(void *)v27 + 72))(&v42);
      uint64_t v28 = *((void *)this + 10);
      int v29 = *(unsigned int **)(v28 + 8 * a2);
      char v30 = v42;
      uint64_t v42 = 0;
      *(void *)(v28 + 8 * a2) = v30;
      if (v29)
      {
        unsigned int v31 = atomic_load(v29 + 2);
        if (v31 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v29 + 8))(v29);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v29 + 2, 0xFFFFFFFF);
        }
        if (v42)
        {
          unsigned int v32 = atomic_load((unsigned int *)v42 + 2);
          if (v32 == 1) {
            (*(void (**)(void))(*(void *)v42 + 8))();
          }
          else {
            atomic_fetch_add(v42 + 2, 0xFFFFFFFF);
          }
        }
      }
      if (v12) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v12);
      }
      if (v9)
      {
        unsigned int v33 = atomic_load((unsigned int *)v9 + 2);
        if (v33 == 1) {
          (*(void (**)(void))(*(void *)v9 + 8))();
        }
        else {
          atomic_fetch_add(v9 + 2, 0xFFFFFFFF);
        }
      }
      uint64_t v15 = *(void *)(*((void *)this + 10) + 8 * a2);
      goto LABEL_72;
    }
  }
  if (!v12)
  {
    CFNumberRef v12 = **(atomic_uint ***)((*(uint64_t (**)(atomic_uint *))(*(void *)v9 + 64))(v9) + 8);
    if (v12) {
      atomic_fetch_add(v12, 1u);
    }
  }
LABEL_77:
  uint64_t v36 = (atomic_uint *)*((void *)v12 + 1);
  *a3 = v36;
  if (v36) {
    atomic_fetch_add(v36, 1u);
  }
  WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v12);
  if (v9)
  {
    unsigned int v37 = atomic_load((unsigned int *)v9 + 2);
    if (v37 == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
    }
    else {
      atomic_fetch_add(v9 + 2, 0xFFFFFFFF);
    }
  }
  return WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v6);
}

void std::__optional_destruct_base<std::pair<KB::String,KB::String>,false>::reset[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2 && *(unsigned char *)(a1 + 38) == 1) {
      free(v2);
    }
    unsigned int v3 = *(void **)(a1 + 8);
    if (v3)
    {
      if (*(unsigned char *)(a1 + 6) == 1) {
        free(v3);
      }
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
}

void *WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(void *a1)
{
  if (*a1)
  {
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v3 = 8 * *a1;
    do
    {
      if (*v2) {
        WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>::deref(*v2);
      }
      ++v2;
      v3 -= 8;
    }
    while (v3);
    *a1 = 0;
  }
  unint64_t v4 = (void *)a1[1];
  a1[1] = 0;
  a1[2] = 0;
  free(v4);
  return a1;
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::last_touch_committed_and_hit_return_key(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1 != *((_DWORD *)this + 40) + 1) {
    return 0;
  }
  if (*((void *)this + 9) != v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(*((void *)this + 10) + 8 * v1 - 8);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  if (!v3) {
    return 0;
  }
  atomic_fetch_add((atomic_uint *volatile)v3, 1u);
  BOOL v4 = *(_DWORD *)(*(void *)(v3 + 8) + 56) == 10;
  WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v3);
  return v4;
}

unsigned int *WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::Search>>::destruct(unsigned int *result, unsigned int **a2)
{
  if (result != (unsigned int *)a2)
  {
    uint64_t v3 = (unsigned int **)result;
    do
    {
      uint64_t result = *v3;
      if (*v3)
      {
        unsigned int v4 = atomic_load(result + 2);
        if (v4 == 1) {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>::deref(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)result);
  if (v1 == 1)
  {
    uint64_t v2 = *(void *)(result + 8);
    if (v2) {
      WTF::RefCounted<TI::Favonius::Touch>::deref(v2);
    }
    JUMPOUT(0x1E4E7BC20);
  }
  atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF);
  return result;
}

BOOL ___ZN2TI8Favonius26FavoniusStrokeBuildManager14perform_searchEj_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 32) == *(__int16 *)(*(void *)(*(void *)a2 + 8) + 62);
}

void *TI::Favonius::FavoniusStrokeBuildManager::key_near_touch_passing_test@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, atomic_uint **a3@<X8>)
{
  uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 64))();
  if (*result)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unsigned int v8 = 1;
    while (1)
    {
      long long v9 = (atomic_uint **)(v6[1] + 8 * v7);
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, atomic_uint **))(a2 + 16))(a2, v9);
      if (result) {
        break;
      }
      uint64_t v7 = v8;
      if (*v6 <= (unint64_t)v8++) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = *v9;
    *a3 = *v9;
    if (v11) {
      atomic_fetch_add(v11, 1u);
    }
  }
  else
  {
LABEL_5:
    *a3 = 0;
  }
  return result;
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::can_update_existing_search(TI::Favonius::FavoniusStrokeBuildManager *this, unsigned int a2)
{
  if (*((void *)this + 9) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)(*((void *)this + 10) + 8 * a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  unsigned int v8 = (unsigned int *)v7;
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  }
  uint64_t v9 = *(void *)(*((void *)this + 10) + 8 * (a2 - 1));
  BOOL v10 = (atomic_uint *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  uint64_t v11 = (unsigned int *)v10;
  if (v10)
  {
    atomic_fetch_add(v10 + 2, 1u);
    unsigned int v12 = atomic_load((unsigned int *)v10 + 2);
    if (v12 == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v10 + 8))(v10);
    }
    else {
      atomic_fetch_add(v10 + 2, 0xFFFFFFFF);
    }
  }
  if (v8)
  {
    unsigned int v13 = atomic_load(v8 + 2);
    if (v13 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF);
    }
  }
  if (v8 != v11) {
    return 0;
  }
  uint64_t v15 = *(void *)(*((void *)this + 10) + 8 * v4);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
  uint64_t v17 = *(atomic_uint **)((*(uint64_t (**)(uint64_t))(*(void *)v16 + 56))(v16) + 56);
  if (v17) {
    atomic_fetch_add(v17, 1u);
  }
  uint64_t v18 = *(void *)(*(void *)(*((void *)this + 7) + 8 * v4) + 8);
  int v19 = *(atomic_uint **)((*(uint64_t (**)(uint64_t))(*(void *)v18 + 56))(v18) + 56);
  if (v19)
  {
    atomic_fetch_add(v19, 1u);
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v19);
  }
  BOOL v14 = v17 == v19;
  if (v17) {
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v17);
  }
  return v14;
}

void TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode::history_by_appending_touch_keycode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = v3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)a2 + 80))(&v5, a2, &v4);
  operator new();
}

void TI::Favonius::FavoniusStrokeBuildManager::input_disruption_from_UI(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  *((unsigned char *)this + 209) = 1;
  if (*((void *)this + 9)) {
    operator new();
  }
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 104))(v2);
  }
  uint64_t v3 = (TI::TIInputRecognizer *)*((void *)this + 90);
  if (v3) {
    TI::TIInputRecognizer::reset_session(v3);
  }
}

uint64_t ___ZN2TI8Favonius26FavoniusStrokeBuildManager24input_disruption_from_UIEv_block_invoke()
{
  return TIDispatchAsync();
}

uint64_t WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::~Vector(uint64_t a1)
{
  if (*(void *)a1)
  {
    WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::Search>>::destruct(*(unsigned int **)(a1 + 8), (unsigned int **)(*(void *)(a1 + 8) + 8 * *(void *)a1));
    *(void *)a1 = 0;
  }
  uint64_t v2 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  free(v2);
  return a1;
}

uint64_t ___ZN2TI8Favonius26FavoniusStrokeBuildManager24input_disruption_from_UIEv_block_invoke_2(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::~Vector(result);
    JUMPOUT(0x1E4E7BC20);
  }
  return result;
}

void TI::Favonius::FavoniusStrokeBuildManager::drop_input_prefix(TI::Favonius::FavoniusStrokeBuildManager *this, const KB::LanguageModelContext *a2, unsigned int a3, const KB::String *a4)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (unint64_t *)((char *)this + 48);
  unint64_t v8 = *((void *)this + 6) - 1;
  LOBYTE(v99) = 0;
  std::vector<BOOL>::vector(__p, v8, (unsigned __int8 *)&v99);
  TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::drop_input_prefix((uint64_t)(v7 + 15), a3, (uint64_t)__p);
  unint64_t v95 = 0;
  unsigned int v96 = 0;
  uint64_t v97 = 0;
  unint64_t v9 = *v7;
  if (*v7 <= 1)
  {
    int v10 = 0;
    unint64_t v24 = (atomic_uint **)(*((void *)this + 7) + 8 * v9 - 8);
    goto LABEL_27;
  }
  int v10 = 0;
  unsigned int v11 = 2;
  uint64_t v12 = 1;
  do
  {
    unint64_t v13 = v11 - 2;
    if (((*(void *)((char *)__p[0] + ((v13 >> 3) & 0x1FFFFFF8)) >> (v11 - 2)) & 1) == 0) {
      goto LABEL_22;
    }
    unint64_t v14 = v95;
    if (!v95)
    {
      uint64_t v15 = (atomic_uint **)(*((void *)this + 7) + 8 * v13);
      if (v97)
      {
        unint64_t v14 = 0;
        uint64_t v16 = v96;
      }
      else
      {
        unint64_t v17 = WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity(&v95, 1uLL, (unint64_t)v15);
        unint64_t v14 = v95;
        uint64_t v16 = v96;
        if (!v96) {
          goto LABEL_12;
        }
        uint64_t v15 = (atomic_uint **)v17;
      }
      uint64_t v18 = *v15;
      v16[v14] = *v15;
      if (v18)
      {
        atomic_fetch_add(v18, 1u);
        unint64_t v14 = v95;
      }
      unint64_t v95 = ++v14;
    }
LABEL_12:
    int v19 = (atomic_uint **)(*((void *)this + 7) + 8 * v12);
    if (v14 != v97)
    {
      unsigned int v21 = v96;
      goto LABEL_16;
    }
    unint64_t v20 = WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity(&v95, v14 + 1, (unint64_t)v19);
    unsigned int v21 = v96;
    if (v96)
    {
      int v19 = (atomic_uint **)v20;
      unint64_t v14 = v95;
LABEL_16:
      unsigned int v22 = *v19;
      v21[v14] = *v19;
      if (v22)
      {
        atomic_fetch_add(v22, 1u);
        unint64_t v14 = v95;
      }
      unint64_t v95 = v14 + 1;
    }
    if (v13 < *((_DWORD *)this + 40)) {
      ++v10;
    }
    unint64_t v9 = *((void *)this + 6);
LABEL_22:
    uint64_t v12 = v11;
  }
  while (v9 > v11++);
  if (!v95)
  {
    unint64_t v24 = (atomic_uint **)(*((void *)this + 7) + 8 * v9 - 8);
    if (v97)
    {
      unint64_t v25 = 0;
      uint64_t v26 = v96;
      goto LABEL_29;
    }
LABEL_27:
    unint64_t v27 = WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity(&v95, 1uLL, (unint64_t)v24);
    uint64_t v26 = v96;
    if (v96)
    {
      unint64_t v24 = (atomic_uint **)v27;
      unint64_t v25 = v95;
LABEL_29:
      uint64_t v28 = *v24;
      v26[v25] = *v24;
      if (v28)
      {
        atomic_fetch_add(v28, 1u);
        unint64_t v25 = v95;
      }
      unint64_t v95 = v25 + 1;
    }
  }
  unsigned int v29 = *((unsigned __int16 *)this + 66);
  if (!*((_WORD *)this + 66))
  {
    KB::String::compute_length((unsigned __int16 *)this + 64);
    unsigned int v29 = *((unsigned __int16 *)this + 66);
  }
  if (v29 <= a3)
  {
    KB::String::clear((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 128));
  }
  else
  {
    char v30 = (char *)this + 144;
    if (*((void *)this + 17)) {
      unsigned int v31 = (char *)*((void *)this + 17);
    }
    else {
      unsigned int v31 = (char *)this + 144;
    }
    *(void *)&long long v91 = v31;
    int v32 = *((unsigned __int16 *)this + 64);
    DWORD2(v91) = 0;
    HIDWORD(v91) = v32;
    LODWORD(v92) = 0;
    KB::String::iterator::initialize((uint64_t *)&v91);
    long long v93 = v91;
    uint64_t v94 = v92;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v93, (int)a3);
    *(void *)&long long v89 = v31;
    DWORD2(v89) = v32;
    HIDWORD(v89) = v32;
    LODWORD(v90) = 0;
    KB::String::iterator::initialize((uint64_t *)&v89);
    KB::String::String((KB::String *)&v99, (const KB::String::iterator *)&v93, (const KB::String::iterator *)&v89);
    KB::String::operator=((uint64_t)this + 128, (KB::String *)&v99);
    if (v100 && BYTE6(v99) == 1) {
      free(v100);
    }
    uint64_t v33 = *((void *)this + 21);
    uint64_t v34 = *((unsigned int *)this + 48);
    if (v34)
    {
      uint64_t v35 = 4 * v34;
      uint64_t v36 = (_DWORD *)*((void *)this + 21);
      unsigned int v37 = (_DWORD *)(v33 + 4 * v34);
      while (*v36 == -1)
      {
        ++v36;
        v35 -= 4;
        if (!v35)
        {
          uint64_t v36 = v37;
          break;
        }
      }
    }
    else
    {
      uint64_t v36 = (_DWORD *)*((void *)this + 21);
    }
    uint64_t v38 = (uint64_t)v36 - v33;
    if (*((void *)this + 17)) {
      char v30 = (char *)*((void *)this + 17);
    }
    *(void *)&long long v93 = v30;
    int v39 = *((unsigned __int16 *)this + 64);
    DWORD2(v93) = 0;
    HIDWORD(v93) = v39;
    LODWORD(v94) = 0;
    KB::String::iterator::initialize((uint64_t *)&v93);
    *(void *)&long long v89 = v30;
    DWORD2(v89) = 0;
    HIDWORD(v89) = v39;
    LODWORD(v90) = 0;
    KB::String::iterator::initialize((uint64_t *)&v89);
    long long v91 = v89;
    uint64_t v92 = v90;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v91, (int)(v38 >> 2));
    KB::String::String((KB::String *)&v99, (const KB::String::iterator *)&v93, (const KB::String::iterator *)&v91);
    KB::String::operator=((uint64_t)this + 128, (KB::String *)&v99);
    if (v100 && BYTE6(v99) == 1) {
      free(v100);
    }
  }
  if (&v95 != v7)
  {
    unint64_t v40 = *v7;
    unint64_t v41 = v95;
    if (*v7 <= v95)
    {
      unint64_t v44 = *((void *)this + 8);
      if (v95 <= v44)
      {
        unint64_t v41 = *v7;
        goto LABEL_72;
      }
      if (v44)
      {
        if (v40)
        {
          uint64_t v45 = (uint64_t *)*((void *)this + 7);
          uint64_t v46 = 8 * v40;
          do
          {
            if (*v45) {
              WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(*v45);
            }
            ++v45;
            v46 -= 8;
          }
          while (v46);
          *uint64_t v7 = 0;
        }
        int v47 = (void *)*((void *)this + 7);
        *((void *)this + 7) = 0;
        *((void *)this + 8) = 0;
        free(v47);
        unint64_t v41 = v95;
      }
      WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(v7, v41);
      if (*((void *)this + 7))
      {
        unint64_t v41 = *v7;
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v42 = (uint64_t *)(*((void *)this + 7) + 8 * v95);
      uint64_t v43 = 8 * v40 - 8 * v95;
      do
      {
        if (*v42) {
          WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(*v42);
        }
        ++v42;
        v43 -= 8;
      }
      while (v43);
      *uint64_t v7 = v41;
LABEL_72:
      uint64_t v48 = v96;
      if (v41)
      {
        uint64_t v49 = (uint64_t *)*((void *)this + 7);
        uint64_t v50 = 8 * v41;
        do
        {
          uint64_t v51 = *v48;
          if (*v48) {
            atomic_fetch_add(v51, 1u);
          }
          uint64_t v52 = *v49;
          *uint64_t v49 = (uint64_t)v51;
          if (v52) {
            WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v52);
          }
          ++v48;
          ++v49;
          v50 -= 8;
        }
        while (v50);
        uint64_t v48 = v96;
        unint64_t v53 = *v7;
      }
      else
      {
        unint64_t v53 = 0;
      }
      if (v53 != v95)
      {
        uint64_t v54 = (atomic_uint **)(*((void *)this + 7) + 8 * v53);
        unint64_t v55 = &v48[v53];
        uint64_t v56 = 8 * v95 - 8 * v53;
        do
        {
          uint64_t v57 = *v55;
          *uint64_t v54 = *v55;
          if (v57) {
            atomic_fetch_add(v57, 1u);
          }
          ++v54;
          ++v55;
          v56 -= 8;
        }
        while (v56);
        unint64_t v53 = v95;
      }
      *uint64_t v7 = v53;
    }
  }
  *((_DWORD *)this + 40) = v10;
  KB::LanguageModelContext::operator=((uint64_t)this + 224, (uint64_t *)a2);
  unsigned int v58 = (TI::TIInputRecognizer *)*((void *)this + 90);
  if (v58) {
    TI::TIInputRecognizer::drop_input_prefix(v58, (TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 224));
  }
  uint64_t v59 = *((void *)this + 88);
  if (v59) {
    (*(void (**)(uint64_t, char *))(*(void *)v59 + 120))(v59, (char *)this + 224);
  }
  unsigned int v60 = *((unsigned __int16 *)this + 66);
  if (!*((_WORD *)this + 66))
  {
    KB::String::compute_length((unsigned __int16 *)this + 64);
    unsigned int v60 = *((unsigned __int16 *)this + 66);
  }
  if (v60 <= 0x7F)
  {
    uint64_t v61 = *((void *)this + 1);
    if (v61)
    {
      if (*((void *)this + 5))
      {
        int v99 = 0;
        float v63 = (uint64_t *)((char *)this + 72);
        uint64_t v62 = *((void *)this + 9);
        if (!v62) {
          goto LABEL_140;
        }
        uint64_t v64 = *(void *)(*((void *)this + 10) + 8 * v62 - 8);
        unint64_t v88 = (unsigned int *)v61;
        atomic_fetch_add((atomic_uint *volatile)(v61 + 8), 1u);
        uint64_t v65 = *((void *)this + 2);
        uint64_t v87 = (unsigned int *)v65;
        if (v65) {
          atomic_fetch_add((atomic_uint *volatile)(v65 + 8), 1u);
        }
        (*(void (**)(long long *__return_ptr))(*(void *)v64 + 112))(&v93);
        uint64_t v66 = (unsigned int *)v99;
        unint64_t v67 = (atomic_uint *)v93;
        *(void *)&long long v93 = 0;
        int v99 = v67;
        if (v66)
        {
          unsigned int v68 = atomic_load(v66 + 2);
          if (v68 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v66 + 8))(v66);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v66 + 2, 0xFFFFFFFF);
          }
          if ((void)v93)
          {
            unsigned int v69 = atomic_load((unsigned int *)(v93 + 8));
            if (v69 == 1) {
              (*(void (**)(void))(*(void *)v93 + 8))();
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)(v93 + 8), 0xFFFFFFFF);
            }
          }
        }
        if (v87)
        {
          unsigned int v70 = atomic_load(v87 + 2);
          if (v70 == 1) {
            (*(void (**)(void))(*(void *)v87 + 8))();
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v87 + 2, 0xFFFFFFFF);
          }
        }
        unsigned int v71 = atomic_load(v88 + 2);
        if (v71 == 1) {
          (*(void (**)(void))(*(void *)v88 + 40))();
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v88 + 2, 0xFFFFFFFF);
        }
        uint64_t v72 = v99;
        if (!v99)
        {
LABEL_140:
          (*(void (**)(TI::Favonius::FavoniusStrokeBuildManager *))(*(void *)this + 136))(this);
          goto LABEL_141;
        }
        WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::shrinkCapacity((uint64_t)this + 72);
        while (1)
        {
          uint64_t v73 = *((void *)this + 9);
          if (v73 != *((void *)this + 11)) {
            break;
          }
          unint64_t v74 = (atomic_uint **)WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity((void *)this + 9, v73 + 1, (unint64_t)&v99);
          uint64_t v75 = *((void *)this + 10);
          if (v75)
          {
            uint64_t v76 = *v63;
            uint64_t v72 = *v74;
            *(void *)(v75 + 8 * *v63) = *v74;
            if (!v72) {
              goto LABEL_123;
            }
            goto LABEL_122;
          }
LABEL_124:
          uint64_t v77 = (*(uint64_t (**)(atomic_uint *))(*(void *)v99 + 24))(v99);
          uint64_t v72 = (atomic_uint *)v77;
          if (v77) {
            atomic_fetch_add((atomic_uint *volatile)(v77 + 8), 1u);
          }
          unint64_t v78 = (unsigned int *)v99;
          int v99 = v72;
          if (v78)
          {
            unsigned int v79 = atomic_load(v78 + 2);
            if (v79 == 1) {
              (*(void (**)(unsigned int *))(*(void *)v78 + 8))(v78);
            }
            else {
              atomic_fetch_add((atomic_uint *volatile)v78 + 2, 0xFFFFFFFF);
            }
            uint64_t v72 = v99;
          }
          if (!v72)
          {
            uint64_t v80 = *((void *)this + 9);
            if (v80)
            {
              unint64_t v81 = *((void *)this + 10);
              uint64_t v82 = (void *)(v81 + 8 * v80 - 8);
              if ((unint64_t)v82 > v81)
              {
                unint64_t v83 = v81 + 8;
                do
                {
                  uint64_t v84 = *(void *)(v83 - 8);
                  *(void *)(v83 - 8) = *v82;
                  *v82-- = v84;
                  BOOL v85 = v83 >= (unint64_t)v82;
                  v83 += 8;
                }
                while (!v85);
                if (v99)
                {
                  unsigned int v86 = atomic_load((unsigned int *)v99 + 2);
                  if (v86 == 1) {
                    (*(void (**)(void))(*(void *)v99 + 8))();
                  }
                  else {
                    atomic_fetch_add(v99 + 2, 0xFFFFFFFF);
                  }
                }
              }
            }
            goto LABEL_141;
          }
        }
        *(void *)(*((void *)this + 10) + 8 * v73) = v72;
LABEL_122:
        atomic_fetch_add(v72 + 2, 1u);
        uint64_t v76 = *v63;
LABEL_123:
        uint64_t *v63 = v76 + 1;
        goto LABEL_124;
      }
    }
  }
LABEL_141:
  WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>,0ul>::~Vector(&v95);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::drop_input_prefix(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int **)a1;
  uint64_t v3 = *(unsigned int **)(a1 + 8);
  unint64_t v5 = ((uint64_t)v3 - *(void *)a1) >> 2;
  if (v5 >= a2) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v3 == v4) {
    return;
  }
  unint64_t v9 = *(void *)(a3 + 8);
  if (v9)
  {
    v60.__begin_ = *(std::vector<unsigned int>::pointer *)a3;
    LODWORD(v60.__end_) = 0;
    std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v60, v9);
    uint64_t v4 = *(unsigned int **)a1;
    uint64_t v3 = *(unsigned int **)(a1 + 8);
    unint64_t v5 = ((uint64_t)v3 - *(void *)a1) >> 2;
  }
  if (v5 <= v6) {
    goto LABEL_29;
  }
  int v10 = &v4[v6];
  unsigned int v11 = v10 + 1;
  if (v10 != v3 && v11 != v3)
  {
    unsigned int v13 = *v10;
    unint64_t v14 = v10 + 1;
    do
    {
      unsigned int v16 = *v14++;
      unsigned int v15 = v16;
      if (v16 < v13)
      {
        unsigned int v13 = v15;
        int v10 = v11;
      }
      unsigned int v11 = v14;
    }
    while (v14 != v3);
  }
  unint64_t v17 = *v10;
  if (v17 == -1)
  {
LABEL_29:
    if (!v6) {
      goto LABEL_32;
    }
    uint64_t v19 = 4 * v6;
    unint64_t v20 = 0xFFFFFFFFLL;
    unsigned int v21 = v4;
    do
    {
      unsigned int v23 = *v21++;
      unint64_t v22 = v23;
      if (v20 <= v23) {
        unint64_t v24 = v22;
      }
      else {
        unint64_t v24 = v20;
      }
      if (v20 == 0xFFFFFFFF) {
        unint64_t v24 = v22;
      }
      if (v22 != -1) {
        unint64_t v20 = v24;
      }
      v19 -= 4;
    }
    while (v19);
    if (v20 == 0xFFFFFFFF) {
      goto LABEL_32;
    }
    uint64_t v18 = *(unsigned int **)a3;
    unint64_t v17 = v20 + 1;
    goto LABEL_31;
  }
  if (v17)
  {
    uint64_t v18 = *(unsigned int **)a3;
LABEL_31:
    v60.__begin_ = v18;
    LODWORD(v60.__end_) = 0;
    std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v60, v17);
    uint64_t v4 = *(unsigned int **)a1;
    uint64_t v3 = *(unsigned int **)(a1 + 8);
    unint64_t v5 = ((uint64_t)v3 - *(void *)a1) >> 2;
  }
LABEL_32:
  if (v3 != v4)
  {
    uint64_t v25 = 0;
    std::vector<unsigned int>::pointer v26 = *(std::vector<unsigned int>::pointer *)a3;
    do
    {
      unint64_t v27 = v4[v25];
      if (v27 != -1)
      {
        if (*(void *)(a3 + 8) <= v27)
        {
          v4[v25] = -1;
        }
        else
        {
          unint64_t v28 = v27 >> 6;
          uint64_t v29 = 1 << v27;
          if (v25 >= v6) {
            uint64_t v30 = *(void *)&v26[2 * v28] | v29;
          }
          else {
            uint64_t v30 = *(void *)&v26[2 * v28] & ~v29;
          }
          *(void *)&v26[2 * v28] = v30;
        }
      }
      ++v25;
    }
    while (v5 > v25);
  }
  if (v6)
  {
    unsigned int v31 = &v4[v6];
    int64_t v32 = (char *)v3 - (char *)v31;
    if (v3 != v31) {
      memmove(v4, v31, (char *)v3 - (char *)v31);
    }
    *(void *)(a1 + 8) = (char *)v4 + v32;
  }
  *(_DWORD *)(a1 + 24) -= v6;
  memset(&v60, 0, sizeof(v60));
  std::vector<unsigned int>::reserve(&v60, *(void *)(a3 + 8));
  std::vector<unsigned int>::pointer begin = v60.__begin_;
  if (*(void *)(a3 + 8))
  {
    unint64_t v34 = 0;
    unsigned int v35 = 0;
    uint64_t v36 = 0;
    value = v60.__end_cap_.__value_;
    do
    {
      if ((*(void *)(*(void *)a3 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v34))
      {
        uint64_t v38 = (v36 + 1);
        std::vector<unsigned int>::pointer end = v60.__end_;
        if (v60.__end_ >= value)
        {
          uint64_t v42 = v60.__end_ - begin;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62) {
            goto LABEL_93;
          }
          if (((char *)value - (char *)begin) >> 1 > v43) {
            unint64_t v43 = ((char *)value - (char *)begin) >> 1;
          }
          if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44) {
            unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v44);
          }
          else {
            uint64_t v45 = 0;
          }
          uint64_t v50 = (unsigned int *)(v44 + 4 * v42);
          *uint64_t v50 = v36;
          unint64_t v40 = v50 + 1;
          while (end != begin)
          {
            unsigned int v51 = *--end;
            *--uint64_t v50 = v51;
          }
          value = (unsigned int *)(v44 + 4 * v45);
          if (begin) {
            operator delete(begin);
          }
          std::vector<unsigned int>::pointer begin = v50;
        }
        else
        {
          *v60.__end_ = v36;
          unint64_t v40 = end + 1;
        }
      }
      else
      {
        std::vector<unsigned int>::pointer v41 = v60.__end_;
        if (v60.__end_ >= value)
        {
          uint64_t v46 = v60.__end_ - begin;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62) {
LABEL_93:
          }
            abort();
          if (((char *)value - (char *)begin) >> 1 > v47) {
            unint64_t v47 = ((char *)value - (char *)begin) >> 1;
          }
          if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48) {
            unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v48);
          }
          else {
            uint64_t v49 = 0;
          }
          uint64_t v52 = (unsigned int *)(v48 + 4 * v46);
          *uint64_t v52 = -1;
          unint64_t v40 = v52 + 1;
          while (v41 != begin)
          {
            unsigned int v53 = *--v41;
            *--uint64_t v52 = v53;
          }
          value = (unsigned int *)(v48 + 4 * v49);
          if (begin) {
            operator delete(begin);
          }
          std::vector<unsigned int>::pointer begin = v52;
        }
        else
        {
          *v60.__end_ = -1;
          unint64_t v40 = v41 + 1;
        }
        uint64_t v38 = v36;
      }
      v60.__end_ = v40;
      unint64_t v34 = ++v35;
      uint64_t v36 = v38;
    }
    while (*(void *)(a3 + 8) > (unint64_t)v35);
  }
  uint64_t v54 = *(unsigned int **)a1;
  uint64_t v55 = *(void *)(a1 + 8);
  uint64_t v56 = v55 - *(void *)a1;
  if (v55 != *(void *)a1)
  {
    uint64_t v57 = 0;
    unint64_t v58 = v56 >> 2;
    do
    {
      uint64_t v59 = v54[v57];
      if (v59 != -1) {
        v54[v57] = begin[v59];
      }
      ++v57;
    }
    while (v58 > v57);
  }
  if (begin) {
    operator delete(begin);
  }
}

void *WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>,0ul>::~Vector(void *a1)
{
  if (*a1)
  {
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v3 = 8 * *a1;
    do
    {
      if (*v2) {
        WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(*v2);
      }
      ++v2;
      v3 -= 8;
    }
    while (v3);
    *a1 = 0;
  }
  uint64_t v4 = (void *)a1[1];
  a1[1] = 0;
  a1[2] = 0;
  free(v4);
  return a1;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::keyboard_did_suspend(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t result = *((void *)this + 88);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 104))();
  }
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::remove_text_usage(TI::Favonius::FavoniusStrokeBuildManager *this, const KB::String *a2)
{
  uint64_t result = *((void *)this + 88);
  if (result) {
    return (*(uint64_t (**)(uint64_t, const KB::String *))(*(void *)result + 96))(result, a2);
  }
  return result;
}

void TI::Favonius::FavoniusStrokeBuildManager::text_accepted_from_UI(TI::Favonius::FavoniusStrokeBuildManager *this@<X0>, const KB::String *a2@<X1>, const KB::String *a3@<X2>, const KB::String *a4@<X3>, const KB::String *a5@<X5>, uint64_t a6@<X4>, int a7@<W6>, std::vector<unsigned int> *a8@<X8>)
{
  uint64_t v92[3] = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 88)) {
    BOOL v13 = a7 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    if (*(_WORD *)a3) {
      BOOL v16 = *(unsigned __int16 *)a5 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      std::__optional_destruct_base<std::pair<KB::String,KB::String>,false>::reset[abi:nn180100]((uint64_t)this + 920);
    }
    else
    {
      KB::String::String((KB::String *)__p, a3);
      KB::String::String((KB::String *)v86, a5);
      uint64_t v30 = (char *)this + 920;
      if (*((unsigned char *)this + 984))
      {
        KB::String::operator=((uint64_t)v30, (KB::String *)__p);
        KB::String::operator=((uint64_t)this + 952, (KB::String *)v86);
      }
      else
      {
        *((_DWORD *)this + 230) = 0x100000;
        *((_WORD *)this + 462) = 0;
        *((unsigned char *)this + 926) = 0;
        *((void *)this + 116) = 0;
        KB::String::operator=((uint64_t)v30, (KB::String *)__p);
        *((_DWORD *)this + 238) = 0x100000;
        *((_WORD *)this + 478) = 0;
        *((unsigned char *)this + 958) = 0;
        *((void *)this + 120) = 0;
        KB::String::operator=((uint64_t)this + 952, (KB::String *)v86);
        *((unsigned char *)this + 984) = 1;
      }
      if (v86[1] && BYTE6(v86[0]) == 1) {
        free(v86[1]);
      }
      if (__p[1] && BYTE6(__p[0]) == 1) {
        free(__p[1]);
      }
    }
    uint64_t v31 = *((void *)this + 90);
    if (v31)
    {
      uint64_t v32 = *(void *)(v31 + 40);
      if (v32)
      {
        uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32);
        TI::TIInputRecognizer::load_lexicons_if_needed(v31, *(const KB::DynamicDictionary **)(*(void *)v33 + 24));
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v85 = 0;
    uint64_t v34 = *((void *)this + 9);
    if (v34)
    {
      unsigned int v35 = *(atomic_uint **)(*((void *)this + 10) + 8 * v34 - 8);
      if (v35) {
        atomic_fetch_add(v35 + 2, 1u);
      }
      if (a2 != a4 && !KB::String::equal(a2, a4, 1))
      {
        (*(void (**)(long long *__return_ptr, atomic_uint *, const KB::String *, uint64_t))(*(void *)v35 + 104))(&v91, v35, a2, a6);
        uint64_t v36 = (atomic_uint *)v91;
        *(void *)&long long v91 = 0;
        unsigned int v37 = atomic_load((unsigned int *)v35 + 2);
        if (v37 == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v35 + 8))(v35);
        }
        else {
          atomic_fetch_add(v35 + 2, 0xFFFFFFFF);
        }
        if ((void)v91)
        {
          unsigned int v38 = atomic_load((unsigned int *)(v91 + 8));
          if (v38 == 1) {
            (*(void (**)(void))(*(void *)v91 + 8))();
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)(v91 + 8), 0xFFFFFFFF);
          }
        }
        unsigned int v35 = v36;
      }
      if (v35)
      {
        uint64_t v39 = *((void *)this + 9);
        if ((int)v39 >= 1)
        {
          unint64_t v40 = *((void *)this + 9);
          do
          {
            uint64_t v41 = *((void *)this + 10);
            atomic_fetch_add(v35 + 2, 1u);
            uint64_t v42 = *(unsigned int **)(v41 + 8 * (v40 - 1));
            *(void *)(v41 + 8 * (v40 - 1)) = v35;
            if (v42)
            {
              unsigned int v43 = atomic_load(v42 + 2);
              if (v43 == 1) {
                (*(void (**)(unsigned int *))(*(void *)v42 + 8))(v42);
              }
              else {
                atomic_fetch_add((atomic_uint *volatile)v42 + 2, 0xFFFFFFFF);
              }
            }
            uint64_t v44 = (*(uint64_t (**)(atomic_uint *))(*(void *)v35 + 24))(v35);
            uint64_t v45 = (atomic_uint *)v44;
            if (v44) {
              atomic_fetch_add((atomic_uint *volatile)(v44 + 8), 1u);
            }
            unsigned int v46 = atomic_load((unsigned int *)v35 + 2);
            if (v46 == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v35 + 8))(v35);
            }
            else {
              atomic_fetch_add(v35 + 2, 0xFFFFFFFF);
            }
            if (v45) {
              BOOL v47 = v40 > 1;
            }
            else {
              BOOL v47 = 0;
            }
            --v40;
            unsigned int v35 = v45;
          }
          while (v47);
          uint64_t v39 = *((void *)this + 9);
          unsigned int v35 = v45;
        }
        (*(void (**)(long long *__return_ptr))(**(void **)(*((void *)this + 10) + 8 * v39 - 8) + 48))(&v91);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::vector<unsigned int> __p = v91;
        *(void *)&long long v85 = v92[0];
        (*(void (**)(long long *__return_ptr))(**(void **)(*((void *)this + 10)
                                                                     + 8 * *((void *)this + 9)
                                                                     - 8)
                                                       + 56))(&v91);
      }
      else
      {
        (*(void (**)(long long *__return_ptr))(**(void **)(*((void *)this + 10)
                                                                     + 8 * *((void *)this + 9)
                                                                     - 8)
                                                       + 64))(&v91);
      }
      uint64_t v77 = (unsigned int *)v91;
      (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(*((void *)this + 7)
                                                                               + 8 * *((void *)this + 6)
                                                                               - 8)
                                                                   + 8)
                                                     + 88))(&v91);
      uint64_t v48 = *(void *)(*((void *)this + 7) + 8 * *((void *)this + 6) - 8);
      uint64_t v49 = *(unsigned int **)(v48 + 8);
      uint64_t v50 = v91;
      *(void *)&long long v91 = 0;
      *(void *)(v48 + 8) = v50;
      if (v49)
      {
        unsigned int v51 = atomic_load(v49 + 2);
        if (v51 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v49 + 8))(v49);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v49 + 2, 0xFFFFFFFF);
        }
        if ((void)v91)
        {
          unsigned int v52 = atomic_load((unsigned int *)(v91 + 8));
          if (v52 == 1) {
            (*(void (**)(void))(*(void *)v91 + 8))();
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)(v91 + 8), 0xFFFFFFFF);
          }
        }
      }
      if (v77)
      {
        unsigned int v53 = atomic_load(v77 + 2);
        if (v53 == 1) {
          (*(void (**)(void))(*(void *)v77 + 8))();
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v77 + 2, 0xFFFFFFFF);
        }
      }
      if (v35)
      {
        unsigned int v54 = atomic_load((unsigned int *)v35 + 2);
        if (v54 == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v35 + 8))(v35);
        }
        else {
          atomic_fetch_add(v35 + 2, 0xFFFFFFFF);
        }
      }
    }
    if (*(_WORD *)a2 && __p[0] == __p[1]) {
      goto LABEL_98;
    }
    unsigned int v55 = *((unsigned __int16 *)a4 + 2);
    if (!*((_WORD *)a4 + 2))
    {
      KB::String::compute_length((unsigned __int16 *)a4);
      unsigned int v55 = *((unsigned __int16 *)a4 + 2);
    }
    uint64_t v56 = (*((void *)this + 22) - *((void *)this + 21)) >> 2;
    if (v56 < v55)
    {
LABEL_98:
      uint64_t v57 = (char *)this + 209;
    }
    else
    {
      uint64_t v57 = (char *)this + 209;
      if (*((_DWORD *)this + 48) <= v56)
      {
        if (!*v57)
        {
          TI::Favonius::FavoniusStrokeBuildManager::align_candidate_to_input((const std::vector<unsigned int> *)this, a2, a4, (std::vector<unsigned int> *)__p, a8);
LABEL_102:
          if (__p[0]) {
            operator delete(__p[0]);
          }
          return;
        }
LABEL_101:
        a8->__begin_ = 0;
        a8->__end_ = 0;
        a8->__end_cap_.__value_ = 0;
        goto LABEL_102;
      }
    }
    *uint64_t v57 = 1;
    goto LABEL_101;
  }
  if ((*(unsigned int (**)(TI::Favonius::FavoniusStrokeBuildManager *, const KB::String *, const KB::String *, const KB::String *, uint64_t, const KB::String *))(*(void *)this + 384))(this, a2, a3, a4, a6, a5))
  {
    if (*(_WORD *)a2)
    {
      KB::word_ranges(a2, 0, &v82);
      uint64_t v18 = v82;
      uint64_t v19 = v83;
      if (v82 != v83)
      {
        unint64_t v20 = (char *)*((void *)a2 + 1);
        if (!v20) {
          unint64_t v20 = (char *)a2 + 16;
        }
        __p[0] = v20;
        int v21 = *(unsigned __int16 *)a2;
        LODWORD(__p[1]) = 0;
        HIDWORD(__p[1]) = v21;
        LODWORD(v85) = 0;
        KB::String::iterator::initialize((uint64_t *)__p);
        uint64_t v22 = *((int *)v19 - 2);
        long long v80 = *(_OWORD *)__p;
        uint64_t v81 = v85;
        std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v80, v22);
        uint64_t v23 = *((int *)v19 - 1);
        long long v78 = v80;
        uint64_t v79 = v81;
        std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v78, v23);
        KB::String::String((KB::String *)__p, (const KB::String::iterator *)&v80, (const KB::String::iterator *)&v78);
        KB::lower_string((KB *)__p, 0, (KB::String *)&v91);
        unint64_t v24 = (char *)*((void *)this + 98);
        if (v24)
        {
          if (*((void *)&v91 + 1)) {
            uint64_t v25 = (const char *)*((void *)&v91 + 1);
          }
          else {
            uint64_t v25 = (const char *)v92;
          }
          while (1)
          {
            while (1)
            {
              std::vector<unsigned int>::pointer v26 = v24;
              unint64_t v27 = (char *)*((void *)v24 + 5);
              unint64_t v28 = v27 ? v27 : v26 + 48;
              if ((strcmp(v25, v28) & 0x80000000) == 0) {
                break;
              }
              unint64_t v24 = *(char **)v26;
              uint64_t v29 = (uint64_t **)v26;
              if (!*(void *)v26) {
                goto LABEL_108;
              }
            }
            if ((strcmp(v28, v25) & 0x80000000) == 0) {
              break;
            }
            uint64_t v29 = (uint64_t **)(v26 + 8);
            unint64_t v24 = (char *)*((void *)v26 + 1);
            if (!v24) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          std::vector<unsigned int>::pointer v26 = (char *)this + 784;
          uint64_t v29 = (uint64_t **)((char *)this + 784);
LABEL_108:
          unint64_t v58 = v26;
          std::vector<unsigned int>::pointer v26 = (char *)operator new(0xA8uLL);
          *((_DWORD *)v26 + 8) = 0x100000;
          *((_WORD *)v26 + 18) = 0;
          v26[38] = 0;
          *((void *)v26 + 5) = 0;
          KB::String::operator=((uint64_t)(v26 + 32), (KB::String *)&v91);
          *((_DWORD *)v26 + 41) = 0;
          *((_OWORD *)v26 + 4) = 0u;
          *((_OWORD *)v26 + 5) = 0u;
          *((_OWORD *)v26 + 6) = 0u;
          *((_OWORD *)v26 + 7) = 0u;
          *((_OWORD *)v26 + 8) = 0u;
          *((_OWORD *)v26 + 9) = 0u;
          *(void *)std::vector<unsigned int>::pointer v26 = 0;
          *((void *)v26 + 1) = 0;
          *((void *)v26 + 2) = v58;
          *uint64_t v29 = (uint64_t *)v26;
          uint64_t v59 = **((void **)this + 97);
          std::vector<unsigned int> v60 = (uint64_t *)v26;
          if (v59)
          {
            *((void *)this + 97) = v59;
            std::vector<unsigned int> v60 = *v29;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 98), v60);
          ++*((void *)this + 99);
        }
        std::vector<KB::Candidate>::__vdeallocate((void **)v26 + 8);
        *((_OWORD *)v26 + 4) = *((_OWORD *)this + 50);
        *((void *)v26 + 10) = *((void *)this + 102);
        *((void *)this + 100) = 0;
        *((void *)this + 101) = 0;
        *((void *)this + 102) = 0;
        if (*((void *)&v91 + 1) && BYTE6(v91) == 1) {
          free(*((void **)&v91 + 1));
        }
        if (__p[1] && BYTE6(__p[0]) == 1) {
          free(__p[1]);
        }
        uint64_t v18 = v82;
      }
      int v90 = 0;
      *(_OWORD *)std::vector<unsigned int> __p = 0u;
      long long v85 = 0u;
      *(_OWORD *)unsigned int v86 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      KB::CandidateCollection::operator=((uint64_t)this + 800, (uint64_t)__p);
      *(void *)&long long v91 = (char *)&v88 + 8;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v91);
      *(void *)&long long v91 = &v87;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v91);
      *(void *)&long long v91 = (char *)&v85 + 8;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v91);
      *(void *)&long long v91 = __p;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v91);
      if (v18)
      {
        unint64_t v83 = v18;
        operator delete(v18);
      }
    }
    else
    {
      int v90 = 0;
      *(_OWORD *)std::vector<unsigned int> __p = 0u;
      long long v85 = 0u;
      *(_OWORD *)unsigned int v86 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      KB::CandidateCollection::operator=((uint64_t)this + 800, (uint64_t)__p);
      *(void *)&long long v91 = (char *)&v88 + 8;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v91);
      *(void *)&long long v91 = &v87;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v91);
      *(void *)&long long v91 = (char *)&v85 + 8;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v91);
      *(void *)&long long v91 = __p;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v91);
      std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*((void **)this + 98));
      *((void *)this + 97) = (char *)this + 784;
      *((void *)this + 99) = 0;
      *((void *)this + 98) = 0;
    }
  }
  uint64_t v61 = *((void *)this + 90);
  if (v61)
  {
    uint64_t v62 = *(void *)(v61 + 40);
    if (v62)
    {
      uint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 48))(v62);
      TI::TIInputRecognizer::load_lexicons_if_needed(v61, *(const KB::DynamicDictionary **)(*(void *)v63 + 24));
    }
  }
  uint64_t v64 = *((void *)this + 88);
  if (v64) {
    (*(void (**)(uint64_t, const KB::String *, const KB::String *, uint64_t, void))(*(void *)v64 + 88))(v64, a2, a3, a6, 0);
  }
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  unsigned __int16 v68 = 0;
  *((unsigned char *)this + 209) = 1;
  a8->__end_ = 0;
  a8->__end_cap_.__value_ = 0;
  a8->__begin_ = 0;
  while (1)
  {
    unsigned int v69 = *((unsigned __int16 *)a2 + 2);
    if (!*((_WORD *)a2 + 2))
    {
      KB::String::compute_length((unsigned __int16 *)a2);
      unsigned int v69 = *((unsigned __int16 *)a2 + 2);
    }
    if (v69 <= v68) {
      break;
    }
    if (v67 >= (char *)v66)
    {
      uint64_t v71 = (v67 - v65) >> 2;
      unint64_t v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 62) {
        abort();
      }
      if (((char *)v66 - v65) >> 1 > v72) {
        unint64_t v72 = ((char *)v66 - v65) >> 1;
      }
      if ((unint64_t)((char *)v66 - v65) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v73 = v72;
      }
      if (v73) {
        unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v73);
      }
      else {
        uint64_t v74 = 0;
      }
      uint64_t v75 = (unsigned int *)(v73 + 4 * v71);
      *uint64_t v75 = -1;
      unsigned int v70 = v75 + 1;
      while (v67 != v65)
      {
        unsigned int v76 = *((_DWORD *)v67 - 1);
        v67 -= 4;
        *--uint64_t v75 = v76;
      }
      uint64_t v66 = (unsigned int *)(v73 + 4 * v74);
      a8->__begin_ = v75;
      a8->__end_ = v70;
      a8->__end_cap_.__value_ = v66;
      if (v65) {
        operator delete(v65);
      }
      uint64_t v65 = (char *)v75;
    }
    else
    {
      *(_DWORD *)unint64_t v67 = -1;
      unsigned int v70 = (unsigned int *)(v67 + 4);
    }
    a8->__end_ = v70;
    ++v68;
    unint64_t v67 = (char *)v70;
  }
}

void std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*a1);
    std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<TI::MLTTAutocorrectionCandidateInfo,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::align_candidate_to_input(const std::vector<unsigned int> *this@<X0>, const KB::String *a2@<X1>, const KB::String *a3@<X2>, std::vector<unsigned int> *a4@<X3>, std::vector<unsigned int> *a5@<X8>)
{
  int v10 = (uint64_t *)&this[7];
  std::vector<unsigned int>::vector(&v39, this + 7);
  unint64_t begin_low = LODWORD(this[8].__begin_);
  std::vector<unsigned int>::pointer end = v39.__end_;
  unint64_t v13 = v39.__end_ - v39.__begin_;
  if (begin_low <= v13)
  {
    if (begin_low >= v13) {
      goto LABEL_17;
    }
    unint64_t v24 = &v39.__begin_[begin_low];
LABEL_14:
    v39.__end_ = v24;
    goto LABEL_17;
  }
  unint64_t v14 = begin_low - v13;
  if (begin_low - v13 <= v39.__end_cap_.__value_ - v39.__end_)
  {
    bzero(v39.__end_, 4 * v14);
    unint64_t v24 = &end[v14];
    goto LABEL_14;
  }
  int64_t v15 = (char *)v39.__end_cap_.__value_ - (char *)v39.__begin_;
  if (((char *)v39.__end_cap_.__value_ - (char *)v39.__begin_) >> 1 > begin_low) {
    unint64_t begin_low = v15 >> 1;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = begin_low;
  }
  unint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v16);
  std::vector<unsigned int>::pointer begin = v39.__begin_;
  std::vector<unsigned int>::pointer v19 = v39.__end_;
  unint64_t v20 = &v17[4 * v13];
  unsigned int v37 = (unsigned int *)&v17[4 * v21];
  bzero(v20, 4 * v14);
  uint64_t v22 = (unsigned int *)&v20[4 * v14];
  while (v19 != begin)
  {
    int v23 = *--v19;
    *((_DWORD *)v20 - 1) = v23;
    v20 -= 4;
  }
  v39.__begin_ = (std::vector<unsigned int>::pointer)v20;
  v39.__end_ = v22;
  v39.__end_cap_.__value_ = v37;
  if (begin) {
    operator delete(begin);
  }
LABEL_17:
  KB::Alignment::inverse((KB::Alignment *)&v39, (std::vector<unsigned int>::size_type)this[2].__begin_ - 1, (uint64_t)v38);
  uint64_t v25 = (void *)v38[0];
  if (v38[0] == v38[1] && this[2].__begin_ >= (std::vector<unsigned int>::pointer)2)
  {
    BYTE1(this[8].__end_cap_.__value_) = 1;
    a5->__end_ = 0;
    a5->__end_cap_.__value_ = 0;
    a5->__begin_ = 0;
    if (!v25) {
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v25);
    goto LABEL_47;
  }
  KB::Alignment::operator*(a4, v38, a5);
  unint64_t v28 = a5;
  std::vector<unsigned int>::pointer v26 = a5->__begin_;
  unint64_t v27 = v28->__end_;
  unsigned int v29 = *((unsigned __int16 *)a2 + 2);
  if (!*((_WORD *)a2 + 2))
  {
    KB::String::compute_length((unsigned __int16 *)a2);
    unsigned int v29 = *((unsigned __int16 *)a2 + 2);
  }
  unint64_t v30 = v27 - v26;
  unsigned int v31 = *((unsigned __int16 *)a3 + 2);
  if (!*((_WORD *)a3 + 2))
  {
    KB::String::compute_length((unsigned __int16 *)a3);
    unsigned int v31 = *((unsigned __int16 *)a3 + 2);
  }
  if (v31 >= v29) {
    unint64_t v32 = v29;
  }
  else {
    unint64_t v32 = v31;
  }
  if (v30 < v32) {
    unint64_t v32 = v27 - v26;
  }
  if (v27 != v26)
  {
    uint64_t v33 = 0;
    do
    {
      unsigned int v34 = v26[v33];
      if (v33 >= v32) {
        unsigned int v35 = v32;
      }
      else {
        unsigned int v35 = v33;
      }
      if (v34 < v35) {
        unsigned int v35 = v26[v33];
      }
      if (v34 != -1) {
        LODWORD(v32) = v35;
      }
      ++v33;
    }
    while (v30 > v33);
  }
  if (v32)
  {
    uint64_t v36 = 0;
    do
    {
      v26[v36] = v36;
      ++v36;
    }
    while (v32 != v36);
  }
  if (!v31)
  {
    KB::String::compute_length((unsigned __int16 *)a3);
    unsigned int v31 = *((unsigned __int16 *)a3 + 2);
  }
  TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::replace_alignment(v10, 0, v31, (uint64_t)a4);
  if (v25) {
    goto LABEL_46;
  }
LABEL_47:
  if (v39.__begin_)
  {
    v39.__end_ = v39.__begin_;
    operator delete(v39.__begin_);
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::replace_alignment(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *a1;
  if (a3)
  {
    uint64_t v9 = v8 + 4 * a2;
    int v10 = (unsigned char *)(v9 + 4 * a3);
    unsigned int v11 = (unsigned char *)a1[1];
    int64_t v12 = v11 - v10;
    if (v11 != v10)
    {
      memmove((void *)(v8 + 4 * a2), v10, v11 - v10);
      uint64_t v8 = *a1;
    }
    a1[1] = v9 + v12;
  }
  unint64_t v14 = *(unsigned int **)a4;
  unint64_t v13 = *(char **)(a4 + 8);
  uint64_t v15 = (uint64_t)&v13[-*(void *)a4];
  if (v15 >= 1)
  {
    uint64_t v16 = a2;
    unint64_t v17 = (unsigned int *)(v8 + 4 * a2);
    uint64_t v18 = v15 >> 2;
    uint64_t v19 = a1[2];
    unint64_t v20 = a1[1];
    if (v15 >> 2 > (uint64_t)(v19 - v20) >> 2)
    {
      unint64_t v21 = v18 + ((uint64_t)(v20 - v8) >> 2);
      if (v21 >> 62) {
        abort();
      }
      uint64_t v22 = v19 - v8;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)(a1 + 2);
      if (v23) {
        unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v33 = (unsigned int *)(v23 + 4 * v16);
      __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v23;
      __v.__begin_ = v33;
      __v.__end_cap_.__value_ = (unsigned int *)(v23 + 4 * v24);
      uint64_t v34 = 4 * v18;
      unsigned int v35 = &v33[v18];
      do
      {
        unsigned int v36 = *v14++;
        *v33++ = v36;
        v34 -= 4;
      }
      while (v34);
      __v.__end_ = v35;
      std::vector<unsigned int>::__swap_out_circular_buffer((std::vector<unsigned int> *)a1, &__v, v17);
      if (__v.__first_) {
        operator delete(__v.__first_);
      }
      goto LABEL_33;
    }
    uint64_t v25 = (uint64_t)(v20 - (void)v17) >> 2;
    if (v25 >= v18)
    {
      std::vector<unsigned int>::pointer v26 = (char *)&v14[v18];
      unint64_t v28 = (_DWORD *)a1[1];
    }
    else
    {
      std::vector<unsigned int>::pointer v26 = (char *)&v14[v25];
      int64_t v27 = v13 - v26;
      if (v13 != v26) {
        memmove((void *)a1[1], &v14[v25], v13 - v26);
      }
      unint64_t v28 = (_DWORD *)(v20 + v27);
      a1[1] = v20 + v27;
      if ((uint64_t)(v20 - (void)v17) < 1) {
        goto LABEL_33;
      }
    }
    unsigned int v29 = &v17[v18];
    unint64_t v30 = &v28[-v18];
    unsigned int v31 = v28;
    if ((unint64_t)v30 < v20)
    {
      unsigned int v31 = v28;
      do
      {
        int v32 = *v30++;
        *v31++ = v32;
      }
      while ((unint64_t)v30 < v20);
    }
    a1[1] = (uint64_t)v31;
    if (v28 != v29) {
      memmove(&v28[-(v28 - v29)], v17, (char *)v28 - (char *)v29);
    }
    if (v26 != (char *)v14) {
      memmove(v17, v14, v26 - (char *)v14);
    }
  }
LABEL_33:
  *((_DWORD *)a1 + 6) = *((_DWORD *)a1 + 6) - a3 + ((*(void *)(a4 + 8) - *(void *)a4) >> 2);
}

void *TI::Favonius::FavoniusStrokeBuildManager::delete_from_stroke_history_for_UI(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 160);
  memset(v6, 0, 24);
  TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(a1, v3, v6);
  TI::Favonius::KeyboardLayout::key_for_char(*a2, 8u, &v5);
  if ((void)v5) {
    operator new();
  }
  return WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(v6);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::register_inline_completion_acceptance_rejection(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96))();
}

void TI::Favonius::FavoniusStrokeBuildManager::lookup_inline_completions_for_UI(TI::Favonius::FavoniusStrokeBuildManager *a1@<X0>, unsigned __int16 *a2@<X1>, const KB::LanguageModelContext *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(**((void **)a1 + 3) + 24))(*((void **)a1 + 3)))
  {
    WORD2(v37) = 0;
    BYTE6(v37) = 0;
    unsigned int v38 = " \t\n";
    LODWORD(v37) = 1048579;
    char v39 = 0;
    KB::sbs_string_tokenize(a2, (const KB::String *)&v37, v22);
    int64_t v12 = (KB::String *)v38;
    if (v38 && BYTE6(v37) == 1) {
      free(v38);
    }
    unint64_t v14 = *(const KB::String **)v22;
    unint64_t v13 = v23;
    if ((const KB::String *)((char *)v23 - *(void *)v22) == (const KB::String *)32
      && (unsigned __int16)**(_WORD **)v22 < *a2)
    {
      KB::String::space(v12);
      KB::String::String((KB::String *)&v37, v14);
      KB::String::append((unsigned __int16 *)&v37, (const KB::String *)&KB::String::space(void)::space);
      KB::String::operator=(*(uint64_t *)v22, (KB::String *)&v37);
      if (v38 && BYTE6(v37) == 1) {
        free(v38);
      }
      unint64_t v14 = *(const KB::String **)v22;
      unint64_t v13 = v23;
    }
    if (v13 == v14) {
      KB::String::String((KB::String *)v24, "");
    }
    else {
      KB::String::String((KB::String *)v24, (const KB::String *)((char *)v13 - 32));
    }
    KB::Word::Word((KB::Word *)&v32, (const KB::String *)v24, &kTITokenIDUNK, 0);
    KB::Candidate::Candidate((KB::Candidate *)&v37, (size_t *)&v32);
    KB::Word::~Word((KB::Word *)&v32);
    if (v24[1] && BYTE6(v24[0]) == 1) {
      free(v24[1]);
    }
    float v41 = TI::Favonius::FavoniusStrokeBuildManager::language_power_for_lookup(a1);
    int v42 = -8388608;
    long long v40 = 0u;
    KB::Candidate::Candidate((KB::Candidate *)&v32, (const KB::Candidate *)&v37);
    uint64_t v18 = (char *)operator new(0x3E8uLL);
    uint64_t v19 = v18 + 1000;
    v24[0] = v18;
    __p[0] = v18 + 1000;
    KB::Candidate::Candidate((KB::Candidate *)v18, (const KB::Candidate *)&v32);
    v24[1] = v19;
    KB::Candidate::~Candidate((KB::Candidate *)&v32);
    if (v23 != *(const KB::String **)v22)
    {
      unint64_t v20 = (const KB::String *)((char *)v23 - 32);
      unint64_t v21 = (void *)*((void *)v23 - 3);
      if (v21)
      {
        if (*((unsigned char *)v23 - 26) == 1) {
          free(v21);
        }
      }
      unint64_t v23 = v20;
    }
    std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__value_func[abi:nn180100]((uint64_t)v31, a5);
    TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious((uint64_t)a1, a3, (uint64_t)v24, (const KB::String **)v22, a4, (uint64_t)v31, a6);
    std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100](v31);
    *(void *)&long long v32 = v24;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v32);
    KB::Candidate::~Candidate((KB::Candidate *)&v37);
    unsigned int v37 = (void **)v22;
    std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v37);
  }
  else
  {
    HIDWORD(v36) = 0;
    long long v32 = 0u;
    memset(v33, 0, sizeof(v33));
    long long v34 = 0u;
    memset(v35, 0, sizeof(v35));
    bzero(&v37, 0x3E8uLL);
    KB::Candidate::Candidate((KB::Candidate *)&v37);
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)uint64_t v24 = 0u;
    *(_OWORD *)std::vector<unsigned int> __p = 0u;
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v28);
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v28 + 8));
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::operator()(*(void *)(a5 + 24), (uint64_t)&v32, (uint64_t)&v37, (uint64_t)v24, 0);
    *(void *)uint64_t v22 = &v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v22);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v28 + 8));
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v28);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v24[1]) {
      std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v24[1]);
    }
    KB::Candidate::~Candidate((KB::Candidate *)&v37);
    *(_OWORD *)a6 = v32;
    uint64_t v15 = v33[3];
    *(void *)(a6 + 16) = v33[0];
    long long v32 = 0uLL;
    *(_OWORD *)(a6 + 24) = *(_OWORD *)&v33[1];
    *(void *)(a6 + 40) = v15;
    memset(v33, 0, sizeof(v33));
    *(_OWORD *)(a6 + 48) = v34;
    uint64_t v16 = v35[3];
    uint64_t v17 = v36;
    *(void *)(a6 + 64) = v35[0];
    long long v34 = 0uLL;
    *(_OWORD *)(a6 + 72) = *(_OWORD *)&v35[1];
    memset(v35, 0, sizeof(v35));
    *(void *)(a6 + 88) = v16;
    *(void *)(a6 + 96) = v17;
    *(unsigned char *)(a6 + 104) = 1;
    unsigned int v37 = (void **)&v35[1];
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
    unsigned int v37 = (void **)&v34;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
    unsigned int v37 = (void **)&v33[1];
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
    unsigned int v37 = (void **)&v32;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
  }
}

float TI::Favonius::FavoniusStrokeBuildManager::language_power_for_lookup(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  if ((*(unsigned int (**)(TI::Favonius::FavoniusStrokeBuildManager *))(*(void *)this + 152))(this))
  {
    uint64_t v2 = &TI::Favonius::SearchParameters::k_linguistic_context_power;
    if (*((unsigned char *)this + 336))
    {
      float v3 = *((float *)this + 83);
      if (v3 <= 1.0 && v3 >= 0.0) {
        uint64_t v2 = (int *)((char *)this + 332);
      }
    }
  }
  else
  {
    uint64_t v2 = &TI::Favonius::SearchParameters::k_predictive_spell_power;
  }
  return *(float *)v2;
}

uint64_t std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(uint64_t a1@<X0>, const KB::LanguageModelContext *a2@<X1>, uint64_t a3@<X2>, const KB::String **a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v62[5] = *MEMORY[0x1E4F143B8];
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v31, a2);
  int v10 = *a4;
  uint64_t v9 = a4[1];
  if (*a4 == v9)
  {
LABEL_13:
    uint64_t v14 = *(void *)(a1 + 24);
    std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__value_func[abi:nn180100]((uint64_t)v39, a6);
    uint64_t v15 = operator new(0x28uLL);
    uint64_t v16 = v15;
    *uint64_t v15 = &unk_1F3F767C0;
    if (v40)
    {
      if (v40 == v39)
      {
        v15[4] = v15 + 1;
        (*(void (**)(void *))(v39[0] + 24))(v39);
      }
      else
      {
        v15[4] = v40;
        long long v40 = 0;
      }
    }
    else
    {
      v15[4] = 0;
    }
    v41[3] = v16;
    (*(void (**)(uint64_t, uint64_t, char *, void, void *))(*(void *)v14 + 88))(v14, a3, v31, a5, v41);
    std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100](v41);
    std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100](v39);
  }
  else
  {
    while (1)
    {
      unsigned int v11 = (KB::DictionaryContainer *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24));
      KB::DictionaryContainer::word_with_string(v11, v10, 0, (KB::Word *)v54);
      if (!v54[0])
      {
        KB::string_to_lowercase(v10, 0, (KB::String *)v49);
        int64_t v12 = (KB::DictionaryContainer *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24));
        KB::DictionaryContainer::word_with_string(v12, (const KB::String *)v49, 0, (KB::Word *)v42);
        KB::String::operator=((uint64_t)v54, (KB::String *)v42);
        if ((unsigned __int16)v55 >= 0xFu && *((void *)&v55 + 1)) {
          MEMORY[0x1E4E7BC00](*((void *)&v55 + 1), 0x1000C8077774924);
        }
        long long v55 = v43;
        if ((unsigned __int16)v43 >= 0xFu) {
          LOWORD(v43) = 0;
        }
        uint64_t v56 = v44;
        int v57 = v45;
        KB::String::operator=((uint64_t)v58, (KB::String *)v46);
        v58[2] = v46[2];
        v58[3] = v46[3];
        long long v59 = v46[4];
        long long v60 = v46[5];
        KB::String::operator=((uint64_t)v61, (KB::String *)v47);
        v61[32] = v47[32];
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign((uint64_t)v62, v48);
        KB::Word::~Word((KB::Word *)v42);
        if (v49[1] && BYTE6(v49[0]) == 1) {
          free(v49[1]);
        }
        if (!v54[0]) {
          break;
        }
      }
      TITokenID v13 = (TITokenID)*((void *)&v59 + 1);
      KB::LanguageModelContext::append((KB::LanguageModelContext *)v31, v13, v10, 0);
      KB::Word::~Word((KB::Word *)v54);
      int v10 = (const KB::String *)((char *)v10 + 32);
      if (v10 == v9) {
        goto LABEL_13;
      }
    }
    HIDWORD(v53) = 0;
    *(_OWORD *)uint64_t v49 = 0u;
    memset(v50, 0, sizeof(v50));
    long long v51 = 0u;
    memset(v52, 0, sizeof(v52));
    bzero(v42, 0x3E8uLL);
    KB::Candidate::Candidate((KB::Candidate *)v42);
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    *(_OWORD *)uint64_t v25 = 0u;
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v28);
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v28 + 8));
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::operator()(*(void *)(a6 + 24), (uint64_t)v49, (uint64_t)v42, (uint64_t)&v24, 0);
    unsigned int v38 = (void **)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v38);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v28 + 8));
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v28);
    if (v25[0])
    {
      v25[1] = v25[0];
      operator delete(v25[0]);
    }
    if (*((void *)&v24 + 1)) {
      std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v24 + 1));
    }
    KB::Candidate::~Candidate((KB::Candidate *)v42);
    *(_OWORD *)a7 = *(_OWORD *)v49;
    uint64_t v17 = *((void *)&v50[1] + 1);
    *(void *)(a7 + 16) = *(void *)&v50[0];
    v49[0] = 0;
    v49[1] = 0;
    *(_OWORD *)(a7 + 24) = *(_OWORD *)((char *)v50 + 8);
    *(void *)(a7 + 40) = v17;
    memset(v50, 0, sizeof(v50));
    *(_OWORD *)(a7 + 48) = v51;
    uint64_t v18 = *((void *)&v52[1] + 1);
    *(void *)(a7 + 64) = *(void *)&v52[0];
    long long v51 = 0uLL;
    *(_OWORD *)(a7 + 72) = *(_OWORD *)((char *)v52 + 8);
    memset(v52, 0, sizeof(v52));
    uint64_t v19 = v53;
    *(void *)(a7 + 88) = v18;
    *(void *)(a7 + 96) = v19;
    *(unsigned char *)(a7 + 104) = 1;
    v42[0] = (void **)v52 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v42);
    v42[0] = (void **)&v51;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v42);
    v42[0] = (void **)v50 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v42);
    v42[0] = v49;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v42);
    KB::Word::~Word((KB::Word *)v54);
  }
  v42[0] = (void **)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v42);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v36);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v35);
  if (__p)
  {
    long long v34 = __p;
    operator delete(__p);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v32);
  }
}

uint64_t std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v7 = a5;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)a1 + 48))(a1, a2, a3, a4, &v7);
  }
  uint64_t v6 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::operator()(v6);
}

uint64_t std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  int v9 = *a5;
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  while (v10 != v11)
  {
    v18[0] = *(_OWORD *)(v10 + 748);
    *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)(v10 + 760);
    if (*(void *)v10)
    {
      uint64_t v12 = 240 * *(void *)v10;
      TITokenID v13 = (float *)(*(void *)(v10 + 8) + 52);
      float v14 = 1.0;
      do
      {
        float v15 = *v13;
        v13 += 60;
        float v14 = v14 * v15;
        v12 -= 240;
      }
      while (v12);
    }
    else
    {
      float v14 = 1.0;
    }
    update_lookup_suggestions_omega_factors(v10, (uint64_t)v18, 0, v14);
    v10 += 1000;
  }
  uint64_t v16 = *(void *)(a1 + 32);

  return std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::operator()(v16, (uint64_t)a2, a3, a4, v9 != 0);
}

void update_lookup_suggestions_omega_factors(uint64_t a1, uint64_t a2, int a3, float a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  float v6 = *(float *)a2;
  float v7 = *(float *)(a2 + 8);
  float v8 = *(float *)(a2 + 12);
  uint64_t v18 = *(void *)(a2 + 16);
  int v19 = *(_DWORD *)(a2 + 24);
  float v9 = logf(a4);
  float v10 = v6 + (float)(v8 * (float)(v9 + v7));
  if (a3)
  {
    if (*(void *)a1)
    {
      uint64_t v11 = 240 * *(void *)a1;
      uint64_t v12 = (float *)(*(void *)(a1 + 8) + 100);
      float v13 = 1.0;
      do
      {
        float v14 = *v12;
        v12 += 60;
        float v13 = v13 * v14;
        v11 -= 240;
      }
      while (v11);
    }
    else
    {
      float v13 = 1.0;
    }
    float v10 = v10 + (float)(v8 * logf(v13));
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
  {
    int v15 = *(unsigned __int16 *)(a1 + 888);
    if (!*(_WORD *)(a1 + 888))
    {
      KB::Candidate::compute_string((KB::Candidate *)a1);
      int v15 = *(unsigned __int16 *)(a1 + 888);
    }
    uint64_t v16 = *(const char **)(a1 + 896);
    unint64_t v21 = "update_lookup_suggestions_omega_factors";
    if (!v16) {
      uint64_t v16 = (const char *)(a1 + 904);
    }
    __int16 v22 = 2080;
    *(_DWORD *)long long buf = 136316162;
    if (v15) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = "";
    }
    unint64_t v23 = v17;
    __int16 v24 = 2048;
    double v25 = v6;
    __int16 v26 = 2048;
    double v27 = v9;
    __int16 v28 = 2048;
    double v29 = v10;
    _os_log_debug_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%s  LM_SPI_changes candidate = %s, omega_factors.geometrdouble y = %f, omega_factors.word = %f recalculated log_omega = %f", buf, 0x34u);
  }
  *(float *)(a1 + 744) = v10;
  *(float *)(a1 + 748) = v6;
  *(float *)(a1 + 752) = v9;
  *(float *)(a1 + 756) = v7;
  *(float *)(a1 + 760) = v8;
  *(_DWORD *)(a1 + 772) = v19;
  *(void *)(a1 + 764) = v18;
  *(_DWORD *)(a1 + 992) = 1;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100](a1 + 1);

  operator delete(a1);
}

void *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100]((void *)(a1 + 8));
}

uint64_t std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F767C0;
  return std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F3F767C0;
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1F3F767C0;
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100](a1 + 1);

  JUMPOUT(0x1E4E7BC20);
}

void *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1F3F767C0;
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String *a1@<X1>, KB::String *this@<X4>, void **a3@<X0>, uint64_t *a4@<X2>, unsigned int a5@<W3>, uint64_t a6@<X5>, uint64_t *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  unsigned int v65 = a6;
  if (a6 != 5)
  {
    uint64_t v17 = a6;
    KB::String::operator=(this, (KB::String *)(a3 + 16));
    *(_DWORD *)(a9 + 100) = 0;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)(a9 + 64) = 0u;
    *(_OWORD *)(a9 + 80) = 0u;
    unint64_t v19 = *((unsigned int *)a3 + 40);
    if ((unint64_t)a3[9] <= v19 || *((unsigned char *)a3 + 209)) {
      return;
    }
    uint64_t v50 = a1;
    long long v51 = a3[10];
    int v71 = 0x100000;
    __int16 v72 = 0;
    unsigned __int8 v73 = 0;
    uint64_t v74 = 0;
    char v75 = 0;
    char v20 = ((uint64_t (*)(void **))(*a3)[54])(a3);
    char v64 = v20;
    if (v17 < 2 || v17 == 4)
    {
      uint64_t v49 = (const KB::LanguageModelContext *)a4;
      if ((v17 & 0xFFFFFFFD) == 1) {
        float v28 = 1.0;
      }
      else {
        float v28 = 0.0;
      }
      uint64_t v29 = v51[v19];
      float v30 = TI::Favonius::FavoniusStrokeBuildManager::language_power_for_lookup((TI::Favonius::FavoniusStrokeBuildManager *)a3);
      uint64_t v48 = a5;
      (*(void (**)(uint64_t **__return_ptr, uint64_t, void, int *, uint64_t, uint64_t, float))(*(void *)v29 + 128))(&v60, v29, a5, &v71, v17, 1, v30);
      long long v32 = v60;
      unsigned int v31 = v61;
      if (v60 == (uint64_t *)v61)
      {
        unsigned int v31 = (KB::Candidate *)v60;
      }
      else
      {
        while (*v32)
        {
          uint64_t v33 = v32[1] + 240 * *v32;
          uint64_t v34 = *(void *)(v33 - 232);
          uint64_t v35 = v33 - 224;
          uint64_t v36 = (const char *)(v34 ? v34 : v35);
          if (!strcmp(v36, " ")) {
            break;
          }
          v32 += 125;
          if (v32 == (uint64_t *)v31)
          {
            long long v32 = (uint64_t *)v31;
            goto LABEL_42;
          }
        }
        if (v32 != (uint64_t *)v31)
        {
          uint64_t v37 = v32 + 125;
          if (v32 + 125 != (uint64_t *)v31)
          {
            do
            {
              if (*v37)
              {
                uint64_t v38 = v37[1] + 240 * *v37;
                uint64_t v39 = *(void *)(v38 - 232);
                uint64_t v40 = v38 - 224;
                float v41 = (const char *)(v39 ? v39 : v40);
                if (strcmp(v41, " "))
                {
                  KB::Candidate::operator=(v32, v37);
                  v32 += 125;
                }
              }
              v37 += 125;
            }
            while (v37 != (uint64_t *)v31);
            unsigned int v31 = v61;
            uint64_t v17 = v65;
          }
        }
      }
LABEL_42:
      std::vector<KB::Candidate>::erase((uint64_t)&v60, v32, v31);
      if v17 == 1 && ((*(uint64_t (**)(void *))(*a3[3] + 48))(a3[3])) {
        goto LABEL_51;
      }
      uint64_t v42 = v51[v19];
      float v43 = TI::Favonius::FavoniusStrokeBuildManager::language_power_for_lookup((TI::Favonius::FavoniusStrokeBuildManager *)a3);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, int *, uint64_t, float))(*(void *)v42 + 120))(v56, v42, v48, &v71, v17, v43);
      KB::CandidateCollection::operator=(a9, (uint64_t)v56);
      uint64_t v66 = (void **)&v59;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v66);
      uint64_t v66 = (void **)&v58;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v66);
      uint64_t v66 = (void **)&v57;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v66);
      uint64_t v66 = (void **)v56;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v66);
      if (is_device_under_pressure())
      {
        if ((unint64_t)(0x1CAC083126E978D5 * ((uint64_t)(*(void *)(a9 + 8) - *(void *)a9) >> 3)) >= 0x1F
          && a8 != 0)
        {
          std::vector<KB::Candidate>::resize((uint64_t *)a9, 0x1EuLL);
        }
      }
      if (v17 == 1) {
LABEL_51:
      }
        (*(void (**)(void *, uint64_t))(*a3[3] + 136))(a3[3], a9);
      (*(void (**)(void *, uint64_t, uint64_t))(*a3[3] + 64))(a3[3], a9, 1);
      KB::String::append((unsigned __int16 *)this, (const KB::String *)&v71);
      (*(void (**)(void *, uint64_t **, const KB::LanguageModelContext *, uint64_t, uint64_t, float))(*a3[3] + 72))(a3[3], &v60, v49, a9, v17, v28);
      int v45 = (int *)operator new(4uLL);
      *int v45 = 0;
      v54[1] = v45 + 1;
      void v54[2] = v45 + 1;
      v54[0] = v45;
      KB::CandidateFilterFlags::CandidateFilterFlags(v55, v54);
      std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>::operator()(a7[3], a9, (uint64_t)v55, 0);
      if (v55[0])
      {
        v55[1] = v55[0];
        operator delete(v55[0]);
      }
      operator delete(v45);
      unsigned int v46 = a3[3];
      v67[0] = &unk_1F3F76778;
      v67[1] = &v64;
      v67[2] = &v65;
      v67[3] = v67;
      (*(void (**)(void *, uint64_t, void *))(*v46 + 56))(v46, a9, v67);
      std::__function::__value_func<void ()(KB::Candidate &,float)>::~__value_func[abi:nn180100](v67);
      if (!v65) {
        TI::Favonius::FavoniusStrokeBuildManager::update_autocorrection_candidates_with_ensemble((TI::Favonius::FavoniusStrokeBuildManager *)a3, (KB::CandidateCollection *)a9, v50, v49);
      }
      BOOL v47 = (int *)operator new(4uLL);
      int *v47 = 1;
      v52[1] = v47 + 1;
      _OWORD v52[2] = v47 + 1;
      v52[0] = v47;
      KB::CandidateFilterFlags::CandidateFilterFlags(v53, v52);
      std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>::operator()(a7[3], a9, (uint64_t)v53, 1);
      if (v53[0])
      {
        v53[1] = v53[0];
        operator delete(v53[0]);
      }
      operator delete(v47);
      v56[0] = &v60;
      double v25 = (void ***)v56;
    }
    else
    {
      if (v17 != 3)
      {
LABEL_60:
        __int16 v26 = v74;
        if (!v74) {
          return;
        }
        int v27 = v73;
        goto LABEL_17;
      }
      char v21 = v20;
      uint64_t v22 = v51[v19];
      float v23 = TI::Favonius::FavoniusStrokeBuildManager::language_power_for_lookup((TI::Favonius::FavoniusStrokeBuildManager *)a3);
      (*(void (**)(void *__return_ptr, uint64_t, void, int *, uint64_t, float))(*(void *)v22 + 136))(v56, v22, a5, &v71, 3, v23);
      KB::String::append((unsigned __int16 *)this, (const KB::String *)&v71);
      __int16 v24 = a3[3];
      unsigned __int16 v68 = &unk_1F3F76730;
      char v69 = v21;
      unsigned int v70 = &v68;
      (*(void (**)(void *, void *, uint64_t *, uint64_t, void **))(*v24 + 80))(v24, v56, a4, a9, &v68);
      std::__function::__value_func<void ()(KB::Candidate &,float)>::~__value_func[abi:nn180100](&v68);
      memset(v62, 0, sizeof(v62));
      KB::CandidateFilterFlags::CandidateFilterFlags(__p, v62);
      std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>::operator()(a7[3], a9, (uint64_t)__p, 1);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      long long v60 = v56;
      double v25 = (void ***)&v60;
    }
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v25);
    goto LABEL_60;
  }
  KB::String::String((KB::String *)v78, a1);
  int v15 = (uint64_t *)a7[3];
  if (v15)
  {
    if (v15 == a7)
    {
      uint64_t v77 = v76;
      (*(void (**)(uint64_t *, void *))(*a7 + 24))(a7, v76);
    }
    else
    {
      uint64_t v77 = (void *)(*(uint64_t (**)(uint64_t *))(*v15 + 16))(v15);
    }
  }
  else
  {
    uint64_t v77 = 0;
  }
  TI::Favonius::FavoniusStrokeBuildManager::latham_conversions((uint64_t)a3, a5, (KB *)v78, a4, (uint64_t)v76, a9);
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>::~__value_func[abi:nn180100](v76);
  __int16 v26 = v79;
  if (v79)
  {
    int v27 = v78[6];
LABEL_17:
    if (v27 == 1) {
      free(v26);
    }
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::latham_conversions(uint64_t a1@<X0>, unsigned int a2@<W1>, KB *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 100) = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  uint64_t v7 = *(void *)(a1 + 704);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v7 + 80))(v7, a6, 0);
    uint64_t v13 = *(void *)(a1 + 8);
    if (v13
      && *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13)
      && !*(unsigned char *)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8))
                   + 65))
    {
      uint64_t v38 = a4;
      int v48 = 0;
      int64x2_t v45 = 0u;
      memset(v46, 0, sizeof(v46));
      memset(v47, 0, sizeof(v47));
      float v14 = *(const KB::Candidate **)a6;
      int v15 = *(const KB::Candidate **)(a6 + 8);
      if (*(const KB::Candidate **)a6 != v15)
      {
        uint64_t v16 = 0;
        do
        {
          uint64_t v17 = *(void *)v14;
          if (*(void *)v14)
          {
            uint64_t v18 = 240 * v17;
            uint64_t v19 = *((void *)v14 + 1);
            while (!*(unsigned char *)(v19 + 192))
            {
              v19 += 240;
              v18 -= 240;
              if (!v18) {
                goto LABEL_14;
              }
            }
          }
          else
          {
            uint64_t v19 = *((void *)v14 + 1);
          }
          if (v19 == *((void *)v14 + 1) + 240 * v17)
          {
LABEL_14:
            if ((unint64_t)v16 >= *(void *)&v46[0])
            {
              uint64_t v20 = 0x1CAC083126E978D5 * (((uint64_t)v16 - v45.i64[0]) >> 3);
              unint64_t v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) > 0x4189374BC6A7EFLL) {
                abort();
              }
              if (0x395810624DD2F1AALL * ((*(void *)&v46[0] - v45.i64[0]) >> 3) > v21) {
                unint64_t v21 = 0x395810624DD2F1AALL * ((*(void *)&v46[0] - v45.i64[0]) >> 3);
              }
              if ((unint64_t)(0x1CAC083126E978D5 * ((*(void *)&v46[0] - v45.i64[0]) >> 3)) >= 0x20C49BA5E353F7) {
                unint64_t v22 = 0x4189374BC6A7EFLL;
              }
              else {
                unint64_t v22 = v21;
              }
              uint64_t v53 = v46;
              if (v22) {
                unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v22);
              }
              else {
                uint64_t v23 = 0;
              }
              __int16 v24 = (KB::Candidate *)(v22 + 1000 * v20);
              uint64_t v50 = (void **)v22;
              v51.i64[0] = (uint64_t)v24;
              unint64_t v52 = v22 + 1000 * v23;
              KB::Candidate::Candidate(v24, v14);
              uint64_t v16 = (KB::Candidate *)((char *)v24 + 1000);
              v51.i64[1] = (uint64_t)v16;
              uint64_t v25 = v45.i64[1];
              uint64_t v26 = v51.i64[0];
              if (v45.i64[1] == v45.i64[0])
              {
                int64x2_t v27 = vdupq_n_s64(v45.u64[1]);
              }
              else
              {
                do
                {
                  v25 -= 1000;
                  uint64_t v26 = KB::Candidate::Candidate(v26 - 1000, v25);
                }
                while (v25 != v45.i64[0]);
                int64x2_t v27 = v45;
                uint64_t v16 = (KB::Candidate *)v51.i64[1];
              }
              v45.i64[0] = v26;
              v45.i64[1] = (uint64_t)v16;
              int64x2_t v51 = v27;
              unint64_t v28 = *(void *)&v46[0];
              *(void *)&v46[0] = v52;
              unint64_t v52 = v28;
              uint64_t v50 = (void **)v27.i64[0];
              std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v50);
            }
            else
            {
              KB::Candidate::Candidate(v16, v14);
              uint64_t v16 = (KB::Candidate *)((char *)v16 + 1000);
            }
            v45.i64[1] = (uint64_t)v16;
          }
          float v14 = (const KB::Candidate *)((char *)v14 + 1000);
        }
        while (v14 != v15);
      }
      KB::CandidateCollection::operator=(a6, (uint64_t)&v45);
      uint64_t v50 = (void **)&v47[1] + 1;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v50);
      uint64_t v50 = (void **)v47;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v50);
      uint64_t v50 = (void **)v46 + 1;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v50);
      uint64_t v50 = (void **)&v45;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v50);
      a4 = v38;
    }
    unint64_t v29 = a2;
    unint64_t v30 = *(void *)(a1 + 904);
    (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 24) + 112))(&v50);
    if (v51.i8[8])
    {
      unint64_t v30 = v51.i64[0];
      unint64_t v31 = (unint64_t)v50;
    }
    else
    {
      unint64_t v31 = v29;
    }
    if (0x1CAC083126E978D5 * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3) > v31) {
      std::vector<KB::Candidate>::resize((uint64_t *)a6, v31);
    }
    if (a1 + 800 != a6) {
      std::vector<KB::Candidate>::__assign_with_size[abi:nn180100]<KB::Candidate*,KB::Candidate*>((KB::Candidate **)(a1 + 800), *(const KB::Candidate **)a6, *(const KB::Candidate **)(a6 + 8), 0x1CAC083126E978D5 * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 384))(a1))
    {
      TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions(a3, a1, (const KB::Candidate **)a6, a4, a1 + 776, v30, (uint64_t)&v45);
      long long v32 = (int *)operator new(4uLL);
      *long long v32 = 0;
      v43[1] = v32 + 1;
      v43[2] = v32 + 1;
      v43[0] = v32;
      KB::CandidateFilterFlags::CandidateFilterFlags(__p, v43);
      std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>::operator()(*(void *)(a5 + 24), (uint64_t)&v45, (uint64_t)__p, 0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      operator delete(v32);
      TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions((void *)a1, (KB::CandidateCollection *)&v45, 1);
      if (&v45 != (int64x2_t *)a6) {
        std::vector<KB::Candidate>::__assign_with_size[abi:nn180100]<KB::Candidate*,KB::Candidate*>((KB::Candidate **)a6, (const KB::Candidate *)v45.i64[0], (const KB::Candidate *)v45.i64[1], 0x1CAC083126E978D5 * ((v45.i64[1] - v45.i64[0]) >> 3));
      }
      uint64_t v49 = (int64x2_t *)((char *)&v47[1] + 8);
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v49);
      uint64_t v49 = (int64x2_t *)v47;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v49);
      uint64_t v49 = (int64x2_t *)((char *)v46 + 8);
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v49);
      uint64_t v49 = &v45;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v49);
    }
    else
    {
      uint64_t v33 = (int *)operator new(4uLL);
      *uint64_t v33 = 0;
      v41[1] = v33 + 1;
      v41[2] = v33 + 1;
      v41[0] = v33;
      KB::CandidateFilterFlags::CandidateFilterFlags(v42, v41);
      std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>::operator()(*(void *)(a5 + 24), a6, (uint64_t)v42, 0);
      if (v42[0])
      {
        v42[1] = v42[0];
        operator delete(v42[0]);
      }
      operator delete(v33);
      TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions((void *)a1, (KB::CandidateCollection *)a6, 1);
    }
    uint64_t v34 = *(KB::Candidate **)(a6 + 8);
    unint64_t v35 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v34 - *(void *)a6) >> 3));
    if (v34 == *(KB::Candidate **)a6) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v35;
    }
    std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(*(uint64_t **)a6, v34, v36, 1);
    KB::CandidateCollection::normalize_scores((float32x2_t **)a6);
    uint64_t v37 = (int *)operator new(4uLL);
    *uint64_t v37 = 1;
    v39[1] = v37 + 1;
    v39[2] = v37 + 1;
    v39[0] = v37;
    KB::CandidateFilterFlags::CandidateFilterFlags(v40, v39);
    std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>::operator()(*(void *)(a5 + 24), a6, (uint64_t)v40, 1);
    if (v40[0])
    {
      v40[1] = v40[0];
      operator delete(v40[0]);
    }
    operator delete(v37);
  }
}

void std::vector<KB::Candidate>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  long long v5 = (KB::Candidate *)a1[1];
  unint64_t v6 = 0x1CAC083126E978D5 * (((uint64_t)v5 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      uint64_t v18 = (KB::Candidate *)(v4 + 1000 * a2);
      while (v5 != v18)
      {
        long long v5 = (KB::Candidate *)((char *)v5 - 1000);
        KB::Candidate::~Candidate(v5);
      }
      a1[1] = (uint64_t)v18;
    }
  }
  else
  {
    uint64_t v8 = a1[2];
    if (0x1CAC083126E978D5 * ((v8 - (uint64_t)v5) >> 3) >= v7)
    {
      uint64_t v19 = (char *)v5 + 1000 * v7;
      uint64_t v20 = 1000 * a2 - 8 * (((uint64_t)v5 - *a1) >> 3);
      do
      {
        bzero(v5, 0x3E8uLL);
        KB::Candidate::Candidate(v5);
        long long v5 = (KB::Candidate *)((char *)v5 + 1000);
        v20 -= 1000;
      }
      while (v20);
      a1[1] = (uint64_t)v19;
    }
    else
    {
      if (a2 > 0x4189374BC6A7EFLL) {
        abort();
      }
      v21[4] = a1 + 2;
      unint64_t v9 = 0x1CAC083126E978D5 * ((v8 - v4) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x20C49BA5E353F7) {
        unint64_t v11 = 0x4189374BC6A7EFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v11);
      uint64_t v13 = &v12[1000 * v6];
      v21[0] = v12;
      v21[1] = v13;
      _OWORD v21[3] = &v12[1000 * v14];
      uint64_t v15 = 1000 * a2;
      uint64_t v16 = &v12[1000 * a2];
      unint64_t v17 = v15 - 1000 * v6;
      do
      {
        bzero(v13, 0x3E8uLL);
        KB::Candidate::Candidate((KB::Candidate *)v13);
        v13 += 1000;
        v17 -= 1000;
      }
      while (v17);
      unsigned __int16 v21[2] = v16;
      std::vector<KB::Candidate>::__swap_out_circular_buffer(a1, v21);
      std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v21);
    }
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::update_autocorrection_candidates_with_ensemble(TI::Favonius::FavoniusStrokeBuildManager *this, KB::CandidateCollection *a2, const KB::String *a3, const KB::LanguageModelContext *a4)
{
  if (!TI::Favonius::FavoniusStrokeBuildManager::shouldSkipEnsembleForFavoniusCandidates(this, a2, a3, a4))
  {
    TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_ml_tap_typing(this, a2, a3, a4);
    TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(this, a2, a3, a4);
  }
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::shouldSkipEnsembleForFavoniusCandidates(TI::Favonius::FavoniusStrokeBuildManager *this, const KB::CandidateCollection *a2, const KB::String *a3, const KB::String *a4)
{
  uint64_t v4 = *(void *)a2;
  if (*(void *)a2 == *((void *)a2 + 1)) {
    return 0;
  }
  if (!*(_WORD *)(v4 + 888)) {
    KB::Candidate::compute_string(*(KB::Candidate **)a2);
  }
  uint64_t v7 = *(void *)(*((void *)this + 2) + 16);
  uint64_t v8 = 1;
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  int v9 = KB::CollatorWrapper::sortkey_compare_strings((KB::CollatorWrapper **)(*(void *)(v7 + 8) + 72), (_LXLexicon *)(v4 + 888), a3, a4);
  WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v7);
  if (v9)
  {
    uint64_t v10 = *(void *)(v4 + 8);
    uint64_t v11 = v10 + 240 * *(void *)v4;
    if (*(void *)v4)
    {
      uint64_t v12 = 240 * *(void *)v4;
      while ((*(unsigned char *)(v10 + 106) & 1) == 0)
      {
        v10 += 240;
        v12 -= 240;
        if (!v12)
        {
          uint64_t v10 = v11;
          return v10 != v11;
        }
      }
    }
    return v10 != v11;
  }
  return v8;
}

void TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_ml_tap_typing(TI::Favonius::FavoniusStrokeBuildManager *this, KB::CandidateCollection *a2, const KB::String *a3, const KB::LanguageModelContext *a4)
{
  if (TI::Favonius::FavoniusStrokeBuildManager::is_ml_tap_typing_enabled(this))
  {
    TI::Favonius::FavoniusStrokeBuildManager::ml_tap_typing_autocorrection_candidates(this, a3, a4, 1u, (uint64_t)v29);
    uint64_t v8 = (float *)v29[0];
    if (v29[0] != v29[1])
    {
      int v9 = *(float **)a2;
      if (*(void *)a2 == *((void *)a2 + 1))
      {
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v9 >= v13)
        {
          uint64_t v37 = (char *)a2 + 16;
          unint64_t v15 = 0x1CAC083126E978D5 * ((uint64_t)(v13 - (void)v9) >> 3);
          unint64_t v16 = 0x395810624DD2F1AALL * ((uint64_t)(v13 - (void)v9) >> 3);
          if (v16 <= 1) {
            unint64_t v16 = 1;
          }
          if (v15 >= 0x20C49BA5E353F7) {
            unint64_t v17 = 0x4189374BC6A7EFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          uint64_t v33 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v17);
          uint64_t v34 = v33;
          uint64_t v36 = &v33[125 * v18];
          unint64_t v35 = (char *)KB::Candidate::Candidate((KB::Candidate *)v33, (const KB::Candidate *)v8) + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a2, &v33);
          uint64_t v14 = (float *)*((void *)a2 + 1);
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v33);
        }
        else
        {
          KB::Candidate::Candidate(*(KB::Candidate **)a2, v29[0]);
          uint64_t v14 = v9 + 250;
        }
        *((void *)a2 + 1) = v14;
      }
      else
      {
        if (!*((_WORD *)v9 + 444)) {
          KB::Candidate::compute_string(*(KB::Candidate **)a2);
        }
        if (!*((_WORD *)v8 + 444)) {
          KB::Candidate::compute_string((KB::Candidate *)v8);
        }
        if (v9 != v8
          && !KB::String::equal((KB::String *)(v9 + 222), (const KB::String *)(v8 + 222), 1)
          && v9[188] < v8[188])
        {
          unint64_t v10 = *((void *)a2 + 2);
          uint64_t v11 = (KB::Candidate *)*((void *)a2 + 1);
          if ((unint64_t)v11 >= v10)
          {
            uint64_t v19 = 0x1CAC083126E978D5 * (((uint64_t)v11 - *(void *)a2) >> 3);
            if ((unint64_t)(v19 + 1) > 0x4189374BC6A7EFLL) {
              abort();
            }
            unint64_t v20 = 0x1CAC083126E978D5 * ((uint64_t)(v10 - *(void *)a2) >> 3);
            uint64_t v21 = 2 * v20;
            if (2 * v20 <= v19 + 1) {
              uint64_t v21 = v19 + 1;
            }
            if (v20 >= 0x20C49BA5E353F7) {
              unint64_t v22 = 0x4189374BC6A7EFLL;
            }
            else {
              unint64_t v22 = v21;
            }
            uint64_t v37 = (char *)a2 + 16;
            if (v22) {
              unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v22);
            }
            else {
              uint64_t v23 = 0;
            }
            __int16 v24 = (KB::Candidate *)(v22 + 1000 * v19);
            uint64_t v33 = (void **)v22;
            uint64_t v34 = (void **)v24;
            uint64_t v36 = (void **)(v22 + 1000 * v23);
            KB::Candidate::Candidate(v24, (const KB::Candidate *)v8);
            unint64_t v35 = (char *)v24 + 1000;
            std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a2, &v33);
            uint64_t v12 = (KB::Candidate *)*((void *)a2 + 1);
            std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v33);
          }
          else
          {
            uint64_t v12 = (KB::Candidate *)((char *)KB::Candidate::Candidate(v11, (const KB::Candidate *)v8) + 1000);
          }
          uint64_t v25 = *(uint64_t **)a2;
          unint64_t v26 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v12 - *(void *)a2) >> 3));
          BOOL v27 = v12 == *(KB::Candidate **)a2;
          *((void *)a2 + 1) = v12;
          if (v27) {
            uint64_t v28 = 0;
          }
          else {
            uint64_t v28 = v26;
          }
          std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(v25, v12, v28, 1);
        }
      }
    }
    uint64_t v33 = (void **)&v32;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
    uint64_t v33 = (void **)&v31;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
    uint64_t v33 = (void **)&v30;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
    uint64_t v33 = (void **)v29;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(TI::Favonius::FavoniusStrokeBuildManager *this, KB::CandidateCollection *a2, const KB::String *a3, const KB::LanguageModelContext *a4)
{
  v42[27] = *MEMORY[0x1E4F143B8];
  if (((TI::Favonius::FavoniusStrokeBuildManager::is_ml_tap_typing_enabled(this) & 1) != 0
     || (*(unsigned int (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3))
     && *((unsigned char *)this + 212))
    && *(void *)a2 != *((void *)a2 + 1)
    && *(_WORD *)a3 != 0)
  {
    (*(void (**)(void **__return_ptr))(**((void **)this + 3) + 128))(&__p);
    int v9 = __p;
    if (__p != v32)
    {
      __int16 v24 = a2;
      uint64_t v25 = *(void *)a2;
      KB::Candidate::Candidate((KB::Candidate *)v41, a3, 0);
      KB::LanguageModelContext::operator=((uint64_t)v42, (uint64_t *)a4);
      int v30 = 0;
      int64x2_t v27 = 0u;
      memset(v28, 0, sizeof(v28));
      memset(v29, 0, sizeof(v29));
      unint64_t v10 = __p;
      uint64_t v11 = v32;
      if (__p != v32)
      {
        do
        {
          KB::Candidate::Candidate((KB::Candidate *)v38, (const KB::Candidate *)v41);
          if (*(void *)&v38[0])
          {
            uint64_t v12 = 240 * *(void *)&v38[0];
            unint64_t v13 = (_DWORD *)(*((void *)&v38[0] + 1) + 136);
            do
            {
              *unint64_t v13 = *v10;
              v13 += 60;
              v12 -= 240;
            }
            while (v12);
          }
          if (v27.i64[1] >= *(void *)&v28[0])
          {
            unint64_t v15 = 0x1CAC083126E978D5 * ((v27.i64[1] - v27.i64[0]) >> 3) + 1;
            if (v15 > 0x4189374BC6A7EFLL) {
              abort();
            }
            if (0x395810624DD2F1AALL * ((*(void *)&v28[0] - v27.i64[0]) >> 3) > v15) {
              unint64_t v15 = 0x395810624DD2F1AALL * ((*(void *)&v28[0] - v27.i64[0]) >> 3);
            }
            if ((unint64_t)(0x1CAC083126E978D5 * ((*(void *)&v28[0] - v27.i64[0]) >> 3)) >= 0x20C49BA5E353F7) {
              unint64_t v16 = 0x4189374BC6A7EFLL;
            }
            else {
              unint64_t v16 = v15;
            }
            uint64_t v36 = v28;
            if (v16) {
              unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v16);
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = (KB::Candidate *)(v16 + 8 * ((v27.i64[1] - v27.i64[0]) >> 3));
            uint64_t v33 = (void **)v16;
            v34.i64[0] = (uint64_t)v18;
            unint64_t v35 = v16 + 1000 * v17;
            KB::Candidate::Candidate(v18, (const KB::Candidate *)v38);
            uint64_t v14 = (char *)v18 + 1000;
            v34.i64[1] = (uint64_t)v18 + 1000;
            uint64_t v19 = v27.i64[1];
            uint64_t v20 = v34.i64[0];
            if (v27.i64[1] == v27.i64[0])
            {
              int64x2_t v21 = vdupq_n_s64(v27.u64[1]);
            }
            else
            {
              do
              {
                v19 -= 1000;
                uint64_t v20 = KB::Candidate::Candidate(v20 - 1000, v19);
              }
              while (v19 != v27.i64[0]);
              int64x2_t v21 = v27;
              uint64_t v14 = (char *)v34.i64[1];
            }
            v27.i64[0] = v20;
            v27.i64[1] = (uint64_t)v14;
            int64x2_t v34 = v21;
            unint64_t v22 = *(void *)&v28[0];
            *(void *)&v28[0] = v35;
            unint64_t v35 = v22;
            uint64_t v33 = (void **)v21.i64[0];
            std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v33);
          }
          else
          {
            uint64_t v14 = (char *)KB::Candidate::Candidate((KB::Candidate *)v27.i64[1], (const KB::Candidate *)v38) + 1000;
          }
          v27.i64[1] = (uint64_t)v14;
          KB::Candidate::~Candidate((KB::Candidate *)v38);
          ++v10;
        }
        while (v10 != v11);
      }
      float v26 = 0.0;
      uint64_t v23 = *((void *)this + 3);
      v37[0] = &unk_1F3F766E8;
      v37[1] = &v26;
      v37[3] = v37;
      (*(void (**)(uint64_t, int64x2_t *, void *))(*(void *)v23 + 56))(v23, &v27, v37);
      std::__function::__value_func<void ()(KB::Candidate &,float)>::~__value_func[abi:nn180100](v37);
      if (logf(v26) >= *(float *)(v25 + 752))
      {
        int v40 = 0;
        memset(v38, 0, sizeof(v38));
        memset(v39, 0, sizeof(v39));
        KB::CandidateCollection::operator=((uint64_t)v24, (uint64_t)v38);
        uint64_t v33 = (void **)&v39[1] + 1;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
        uint64_t v33 = (void **)v39;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
        uint64_t v33 = (void **)&v38[1] + 1;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
        uint64_t v33 = (void **)v38;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
      }
      *(void *)&v38[0] = (char *)&v29[1] + 8;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v38);
      *(void *)&v38[0] = v29;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v38);
      *(void *)&v38[0] = (char *)v28 + 8;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v38);
      *(void *)&v38[0] = &v27;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v38);
      KB::Candidate::~Candidate((KB::Candidate *)v41);
      int v9 = __p;
    }
    if (v9)
    {
      uint64_t v32 = v9;
      operator delete(v9);
    }
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::is_ml_tap_typing_enabled(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  if (result)
  {
    if (((*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3)) & 1) == 0)
    {
      uint64_t v3 = *((void *)this + 90);
      if (v3)
      {
        uint64_t v4 = *(const void **)(v3 + 64);
        if (v4)
        {
          CFRetain(*(CFTypeRef *)(v3 + 64));
          CFRelease(v4);
          uint64_t v5 = *((void *)this + 9);
          if (!v5) {
            return 1;
          }
          uint64_t v6 = *((void *)this + 10);
          uint64_t v7 = 8 * v5;
          while (1)
          {
            uint64_t v8 = (*(uint64_t (**)(void))(**(void **)v6 + 32))();
            if (v8)
            {
              if ((*(_WORD *)(*(void *)(v8 + 8) + 60) & 0x80) != 0) {
                break;
              }
            }
            v6 += 8;
            v7 -= 8;
            if (!v7) {
              return 1;
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0>,void ()(KB::Candidate &,float)>::operator()(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3 = *(float **)(result + 8);
  if (*v3 < *a3) {
    float *v3 = *a3;
  }
  return result;
}

uint64_t std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0>,void ()(KB::Candidate &,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F3F766E8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0>,void ()(KB::Candidate &,float)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F3F766E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0>,void ()(KB::Candidate &,float)>::~__func()
{
}

void TI::Favonius::FavoniusStrokeBuildManager::ml_tap_typing_autocorrection_candidates(TI::Favonius::FavoniusStrokeBuildManager *this@<X0>, const KB::String *a2@<X2>, const KB::LanguageModelContext *a3@<X3>, unsigned int a4@<W1>, uint64_t a5@<X8>)
{
  unsigned __int16 v36[3] = *(void **)MEMORY[0x1E4F143B8];
  TI::TIInputRecognizer::generate_mltt_autocorrection_candidates(*((void *)this + 90), (unsigned __int16 *)a2, (uint64_t)this + 920, &__p);
  uint64_t v11 = (const KB::Candidate **)__p;
  uint64_t v10 = (uint64_t)v29;
  if (__p == v29)
  {
    *(_DWORD *)(a5 + 100) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
  }
  else
  {
    uint64_t v12 = (const KB::Candidate **)__p;
    while (v12[4] != v12[5])
    {
      v12 += 17;
      if (v12 == v29) {
        goto LABEL_18;
      }
    }
    if (v12 != v29)
    {
      unint64_t v13 = (KB::String *)(v12 + 17);
      if (v12 + 17 != v29)
      {
        do
        {
          if (*((void *)v13 + 4) != *((void *)v13 + 5))
          {
            KB::String::operator=((uint64_t)v12, v13);
            KB::CandidateCollection::operator=((uint64_t)(v12 + 4), (uint64_t)v13 + 32);
            v12 += 17;
          }
          unint64_t v13 = (KB::String *)((char *)v13 + 136);
        }
        while (v13 != (KB::String *)v10);
        uint64_t v11 = (const KB::Candidate **)__p;
        uint64_t v10 = (uint64_t)v29;
      }
    }
    if (v12 == (const KB::Candidate **)v10)
    {
LABEL_18:
      uint64_t v12 = (const KB::Candidate **)v10;
      goto LABEL_19;
    }
    while ((const KB::Candidate **)v10 != v12)
    {
      v10 -= 136;
      std::__destroy_at[abi:nn180100]<TI::MLTTAutocorrectionCandidateInfo,0>(v10);
    }
    unint64_t v29 = v12;
    uint64_t v11 = (const KB::Candidate **)__p;
LABEL_19:
    *(_DWORD *)(a5 + 100) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    if (v11 != v12)
    {
      do
      {
        v36[0] = 0;
        v36[1] = 0;
        unint64_t v35 = v36;
        TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions((KB *)v11, (uint64_t)this, v11 + 4, (uint64_t *)a3, (uint64_t)&v35, *((void *)this + 113), (uint64_t)&v30);
        std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy((void *)v36[0]);
        KB::CandidateCollection::add((KB::CandidateCollection *)a5, &v30);
        unint64_t v35 = (void **)&v34;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
        unint64_t v35 = (void **)&v33;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
        unint64_t v35 = (void **)&v32;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
        unint64_t v35 = (void **)&v30;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
        v11 += 17;
      }
      while (v11 != v12);
      uint64_t v14 = *(const KB::Candidate **)(a5 + 8);
      if (*(const KB::Candidate **)a5 != v14)
      {
        unint64_t v15 = (KB *)(*(void *)a5 + 888);
        while (1)
        {
          if (!*(_WORD *)v15) {
            KB::Candidate::compute_string((KB *)((char *)v15 - 888));
          }
          KB::lower_string(v15, 0, (KB::String *)&v30);
          KB::lower_string(a2, 0, (KB::String *)&v35);
          BOOL v16 = KB::String::equal((KB::String *)&v30, (const KB::String *)&v35, 1);
          if (v36[0] && BYTE6(v35) == 1) {
            free(v36[0]);
          }
          if (v31 && BYTE6(v30) == 1) {
            free(v31);
          }
          if (v16) {
            break;
          }
          uint64_t v17 = (KB *)((char *)v15 + 112);
          unint64_t v15 = (KB *)((char *)v15 + 1000);
          if (v17 == v14) {
            goto LABEL_35;
          }
        }
        uint64_t v14 = (KB *)((char *)v15 - 888);
LABEL_35:
        if (v14 != *(const KB::Candidate **)(a5 + 8))
        {
          KB::Candidate::Candidate((KB::Candidate *)&v30, v14);
          uint64_t v18 = *(KB::Candidate **)a5;
          if (*(void *)(a5 + 16) == *(void *)a5)
          {
            std::vector<KB::Candidate>::__vdeallocate((void **)a5);
            unint64_t v21 = 0x395810624DD2F1AALL * ((uint64_t)(*(void *)(a5 + 16) - *(void *)a5) >> 3);
            if (v21 <= 1) {
              unint64_t v21 = 1;
            }
            if ((unint64_t)(0x1CAC083126E978D5 * ((uint64_t)(*(void *)(a5 + 16) - *(void *)a5) >> 3)) >= 0x20C49BA5E353F7) {
              unint64_t v22 = 0x4189374BC6A7EFLL;
            }
            else {
              unint64_t v22 = v21;
            }
            std::vector<KB::Candidate>::__vallocate[abi:nn180100]((void *)a5, v22);
            uint64_t v19 = (char *)KB::Candidate::Candidate(*(KB::Candidate **)(a5 + 8), (const KB::Candidate *)&v30) + 1000;
          }
          else
          {
            uint64_t v19 = (char *)v18 + 1000;
            if (*(KB::Candidate **)(a5 + 8) == v18)
            {
              KB::Candidate::Candidate(v18, (const KB::Candidate *)&v30);
            }
            else
            {
              KB::Candidate::operator=((uint64_t)v18, (uint64_t)&v30);
              for (uint64_t i = *(char **)(a5 + 8); i != v19; KB::Candidate::~Candidate((KB::Candidate *)(i - 1000)))
                ;
            }
          }
          *(void *)(a5 + 8) = v19;
          KB::Candidate::~Candidate((KB::Candidate *)&v30);
        }
      }
    }
  }
  TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(this, (KB::CandidateCollection *)a5, 0);
  KB::CandidateCollection::normalize_scores((float32x2_t **)a5);
  uint64_t v23 = *(uint64_t **)(a5 + 8);
  unint64_t v24 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v23 - *(void *)a5) >> 3));
  if (v23 == *(uint64_t **)a5) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v24;
  }
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *,false>(*(void *)a5, v23, v25, 1);
  if (0x1CAC083126E978D5 * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3) > (unint64_t)a4) {
    std::vector<KB::Candidate>::resize((uint64_t *)a5, a4);
  }
  float v26 = __p;
  if (__p)
  {
    uint64_t v27 = (uint64_t)v29;
    if (v29 != __p)
    {
      do
      {
        v27 -= 136;
        std::__destroy_at[abi:nn180100]<TI::MLTTAutocorrectionCandidateInfo,0>(v27);
      }
      while ((void *)v27 != v26);
      float v26 = __p;
    }
    operator delete(v26);
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions(KB *this@<X2>, uint64_t a2@<X0>, const KB::Candidate **a3@<X1>, uint64_t *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a7 + 100) = 0;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  uint64_t v10 = *(void *)(*(void *)(a2 + 16) + 16);
  atomic_fetch_add((atomic_uint *volatile)v10, 1u);
  long long v87 = (unsigned int *)v10;
  uint64_t v84 = *(void *)(v10 + 8);
  KB::word_ranges(this, (const KB::String *)1, (unint64_t **)&__p);
  LODWORD(v156[0]) = 0x100000;
  WORD2(v156[0]) = 0;
  BYTE6(v156[0]) = 0;
  v156[1] = 0;
  char v157 = 0;
  v158[0] = 0;
  uint64_t v159 = 0x3F80000000000000;
  int v160 = 1065353216;
  int v161 = 0x100000;
  __int16 v162 = 0;
  char v163 = 0;
  uint64_t v164 = 0;
  char v165 = 0;
  __asm { FMOV            V9.2S, #1.0 }
  *(void *)&long long v166 = _D9;
  *((void *)&v169 + 1) = 0;
  long long v167 = 0u;
  long long v168 = 0u;
  DWORD2(v166) = 0;
  LODWORD(v169) = 0;
  int v170 = 0x100000;
  __int16 v171 = 0;
  char v172 = 0;
  uint64_t v173 = 0;
  char v174 = 0;
  char v175 = 0;
  memset(v176, 0, sizeof(v176));
  int v177 = 1065353216;
  BOOL v16 = (int *)__p;
  uint64_t v17 = v102;
  long long v89 = a4;
  if (__p == v102)
  {
    int v19 = *(unsigned __int16 *)this;
    if (*((void *)this + 1)) {
      uint64_t v18 = (char *)*((void *)this + 1);
    }
    else {
      uint64_t v18 = (char *)this + 16;
    }
    *(void *)&long long v99 = v18;
    DWORD2(v99) = v19;
    HIDWORD(v99) = v19;
    LODWORD(v100) = 0;
    KB::String::iterator::initialize((uint64_t *)&v99);
  }
  else
  {
    if (*((void *)this + 1)) {
      uint64_t v18 = (char *)*((void *)this + 1);
    }
    else {
      uint64_t v18 = (char *)this + 16;
    }
    *(void *)&long long v116 = v18;
    int v19 = *(unsigned __int16 *)this;
    DWORD2(v116) = 0;
    HIDWORD(v116) = v19;
    LODWORD(v117) = 0;
    KB::String::iterator::initialize((uint64_t *)&v116);
    uint64_t v20 = *(v17 - 2);
    long long v99 = v116;
    uint64_t v100 = v117;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v99, v20);
  }
  *(void *)&long long v116 = v18;
  DWORD2(v116) = 0;
  HIDWORD(v116) = v19;
  LODWORD(v117) = 0;
  KB::String::iterator::initialize((uint64_t *)&v116);
  if (DWORD2(v116) != DWORD2(v99))
  {
    *(void *)&long long v116 = v18;
    DWORD2(v116) = 0;
    HIDWORD(v116) = v19;
    LODWORD(v117) = 0;
    KB::String::iterator::initialize((uint64_t *)&v116);
    KB::String::String((KB::String *)&v111, (const KB::String::iterator *)&v116, (const KB::String::iterator *)&v99);
    unint64_t v21 = KB::Word::Word((KB::Word *)&v116, (const KB::String *)&v111, &kTITokenIDUNK, 0);
    KB::String::space(v21);
    if (KB::String::equal((KB::String *)&v111, (const KB::String *)&KB::String::space(void)::space, 1)) {
      DWORD1(v124) |= 0x4000000u;
    }
    DWORD2(v122) |= 0x800000u;
    KB::String::operator=((KB::String *)v156, (KB::String *)&v116);
    KB::ByteString::operator=(v158, v118);
    uint64_t v159 = v119;
    int v160 = v120;
    KB::String::operator=((KB::String *)&v161, (KB::String *)v121);
    long long v166 = v122;
    long long v167 = v123;
    long long v168 = v124;
    long long v169 = v125;
    KB::String::operator=((KB::String *)&v170, (KB::String *)v126);
    char v175 = v127;
    int v177 = v129;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>(v176, v128);
    KB::Word::~Word((KB::Word *)&v116);
    if (*((void *)&v111 + 1) && BYTE6(v111) == 1) {
      free(*((void **)&v111 + 1));
    }
  }
  LODWORD(v134[0]) = 0x100000;
  WORD2(v134[0]) = 0;
  BYTE6(v134[0]) = 0;
  v134[1] = 0;
  char v135 = 0;
  v136[0] = 0;
  uint64_t v137 = 0x3F80000000000000;
  int v138 = 1065353216;
  int v139 = 0x100000;
  __int16 v140 = 0;
  char v141 = 0;
  uint64_t v142 = 0;
  char v143 = 0;
  *(void *)&long long v144 = _D9;
  *((void *)&v147 + 1) = 0;
  long long v145 = 0u;
  long long v146 = 0u;
  DWORD2(v144) = 0;
  LODWORD(v147) = 0;
  int v148 = 0x100000;
  __int16 v149 = 0;
  char v150 = 0;
  uint64_t v151 = 0;
  char v152 = 0;
  char v153 = 0;
  memset(v154, 0, sizeof(v154));
  int v155 = 1065353216;
  if (v16 == v17)
  {
    long long v97 = v99;
    uint64_t v98 = v100;
    int v24 = *(unsigned __int16 *)this;
    unint64_t v22 = (char *)*((void *)this + 1);
  }
  else
  {
    unint64_t v22 = (char *)*((void *)this + 1);
    if (v22) {
      uint64_t v23 = (char *)*((void *)this + 1);
    }
    else {
      uint64_t v23 = (char *)this + 16;
    }
    *(void *)&long long v111 = v23;
    int v24 = *(unsigned __int16 *)this;
    DWORD2(v111) = 0;
    HIDWORD(v111) = v24;
    LODWORD(v112) = 0;
    KB::String::iterator::initialize((uint64_t *)&v111);
    uint64_t v25 = *(v17 - 2);
    long long v116 = v111;
    uint64_t v117 = v112;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v116, v25);
    uint64_t v26 = *(v17 - 1);
    long long v97 = v116;
    uint64_t v98 = v117;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v97, v26);
  }
  if (v22) {
    uint64_t v27 = v22;
  }
  else {
    uint64_t v27 = (char *)this + 16;
  }
  *(void *)&long long v116 = v27;
  DWORD2(v116) = v24;
  HIDWORD(v116) = v24;
  LODWORD(v117) = 0;
  KB::String::iterator::initialize((uint64_t *)&v116);
  if (DWORD2(v97) != DWORD2(v116))
  {
    *(void *)&long long v116 = v27;
    DWORD2(v116) = v24;
    HIDWORD(v116) = v24;
    LODWORD(v117) = 0;
    KB::String::iterator::initialize((uint64_t *)&v116);
    KB::String::String((KB::String *)&v111, (const KB::String::iterator *)&v97, (const KB::String::iterator *)&v116);
    uint64_t v28 = KB::Word::Word((KB::Word *)&v116, (const KB::String *)&v111, &kTITokenIDUNK, 0);
    KB::String::space(v28);
    if (KB::String::equal((KB::String *)&v111, (const KB::String *)&KB::String::space(void)::space, 1)) {
      DWORD1(v124) |= 0x4000000u;
    }
    else {
      DWORD2(v122) |= 0x800000u;
    }
    KB::String::operator=((KB::String *)v134, (KB::String *)&v116);
    KB::ByteString::operator=(v136, v118);
    uint64_t v137 = v119;
    int v138 = v120;
    KB::String::operator=((KB::String *)&v139, (KB::String *)v121);
    long long v144 = v122;
    long long v145 = v123;
    long long v146 = v124;
    long long v147 = v125;
    KB::String::operator=((KB::String *)&v148, (KB::String *)v126);
    char v153 = v127;
    int v155 = v129;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>(v154, v128);
    KB::Word::~Word((KB::Word *)&v116);
    if (*((void *)&v111 + 1))
    {
      if (BYTE6(v111) == 1) {
        free(*((void **)&v111 + 1));
      }
    }
  }
  unsigned int v96 = v89;
  if (v16 != v17)
  {
    unint64_t v29 = (char *)*((void *)this + 1);
    if (!v29) {
      unint64_t v29 = (char *)this + 16;
    }
    *(void *)&long long v116 = v29;
    int v30 = *(unsigned __int16 *)this;
    DWORD2(v116) = 0;
    HIDWORD(v116) = v30;
    LODWORD(v117) = 0;
    KB::String::iterator::initialize((uint64_t *)&v116);
    uint64_t v31 = *(v17 - 2);
    long long v94 = v116;
    uint64_t v95 = v117;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v94, v31);
    uint64_t v32 = *(v17 - 1);
    long long v92 = v94;
    uint64_t v93 = v95;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v92, v32);
    KB::String::String((KB::String *)v132, (const KB::String::iterator *)&v94, (const KB::String::iterator *)&v92);
    int v110 = 0;
    int64x2_t v107 = 0u;
    memset(v108, 0, sizeof(v108));
    memset(v109, 0, sizeof(v109));
    KB::lower_string((KB *)v132, 0, (KB::String *)&v116);
    uint64_t v34 = a5 + 8;
    uint64_t v33 = *(void *)(a5 + 8);
    unint64_t v35 = (void *)*((void *)&v116 + 1);
    if (!v33) {
      goto LABEL_51;
    }
    uint64_t v36 = *((void *)&v116 + 1) ? (const char *)*((void *)&v116 + 1) : (const char *)&v117;
    uint64_t v37 = a5 + 8;
    do
    {
      if (*(void *)(v33 + 40)) {
        uint64_t v38 = *(const char **)(v33 + 40);
      }
      else {
        uint64_t v38 = (const char *)(v33 + 48);
      }
      int v39 = strcmp(v38, v36);
      int v40 = (uint64_t *)(v33 + 8);
      if (v39 >= 0)
      {
        int v40 = (uint64_t *)v33;
        uint64_t v37 = v33;
      }
      uint64_t v33 = *v40;
    }
    while (*v40);
    if (v34 == v37
      || (*(void *)(v37 + 40) ? (float v41 = *(const char **)(v37 + 40)) : (float v41 = (const char *)(v37 + 48)),
          strcmp(v36, v41) < 0))
    {
LABEL_51:
      uint64_t v37 = a5 + 8;
    }
    if (v35 && BYTE6(v116) == 1) {
      free(v35);
    }
    if (v34 == v37
      || (KB::CandidateCollection::operator=((uint64_t)&v107, v37 + 64),
          uint64_t v43 = v107.i64[1],
          uint64_t v44 = v107.i64[0],
          v107.i64[0] == v107.i64[1]))
    {
      KB::Word::Word((KB::Word *)&v111, (const KB::String *)v132, &kTITokenIDUNK, 0);
      v115 |= 0x800000u;
      KB::Candidate::Candidate((KB::Candidate *)&v116, (size_t *)&v111);
      long long v130 = 0u;
      unint64_t v131 = 0xFF8000003F800000;
      if (v107.i64[1] >= *(void *)&v108[0])
      {
        uint64_t v47 = 0x1CAC083126E978D5 * ((v107.i64[1] - v107.i64[0]) >> 3);
        if ((unint64_t)(v47 + 1) > 0x4189374BC6A7EFLL) {
LABEL_132:
        }
          abort();
        unint64_t v48 = 0x395810624DD2F1AALL * ((*(void *)&v108[0] - v107.i64[0]) >> 3);
        if (v48 <= v47 + 1) {
          unint64_t v48 = v47 + 1;
        }
        if ((unint64_t)(0x1CAC083126E978D5 * ((*(void *)&v108[0] - v107.i64[0]) >> 3)) >= 0x20C49BA5E353F7) {
          unint64_t v49 = 0x4189374BC6A7EFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        uint64_t v106 = v108;
        if (v49) {
          unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v49);
        }
        else {
          uint64_t v50 = 0;
        }
        uint64_t v62 = v49 + 1000 * v47;
        unint64_t v103 = v49;
        v104.i64[0] = v62;
        unint64_t v105 = v49 + 1000 * v50;
        KB::Candidate::Candidate(v62, (uint64_t)&v116);
        uint64_t v45 = v62 + 1000;
        v104.i64[1] = v62 + 1000;
        uint64_t v63 = v107.i64[1];
        uint64_t v64 = v107.i64[0];
        uint64_t v65 = v104.i64[0];
        if (v107.i64[1] == v107.i64[0])
        {
          int64x2_t v66 = vdupq_n_s64(v107.u64[1]);
        }
        else
        {
          do
          {
            v63 -= 1000;
            uint64_t v65 = KB::Candidate::Candidate(v65 - 1000, v63);
          }
          while (v63 != v64);
          int64x2_t v66 = v107;
          uint64_t v45 = v104.i64[1];
        }
        v107.i64[0] = v65;
        v107.i64[1] = v45;
        int64x2_t v104 = v66;
        unint64_t v67 = *(void *)&v108[0];
        *(void *)&v108[0] = v105;
        unint64_t v105 = v67;
        unint64_t v103 = v66.i64[0];
        std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v103);
      }
      else
      {
        uint64_t v45 = KB::Candidate::Candidate(v107.i64[1], (uint64_t)&v116) + 1000;
      }
      v107.i64[1] = v45;
      KB::Candidate::~Candidate((KB::Candidate *)&v116);
      KB::Word::~Word((KB::Word *)&v111);
      uint64_t v43 = v107.i64[1];
      uint64_t v44 = v107.i64[0];
    }
    unint64_t v68 = 0x1CAC083126E978D5 * ((v43 - v44) >> 3);
    if (v68 >= a6) {
      unint64_t v68 = a6;
    }
    unint64_t v90 = v68;
    if (v43 != v44)
    {
      unint64_t v69 = 0;
      do
      {
        unsigned int v70 = (KB::Candidate *)(v44 + 1000 * v69);
        if (v69 < v90) {
          goto LABEL_107;
        }
        unint64_t v71 = v44 + 1000 * v69;
        if (!*(_WORD *)(v71 + 888)) {
          KB::Candidate::compute_string((KB::Candidate *)(v44 + 1000 * v69));
        }
        if (!KB::CollatorWrapper::sortkey_compare_strings((KB::CollatorWrapper **)(v84 + 72), (_LXLexicon *)(v71 + 888), (const KB::String *)v132, v42))
        {
LABEL_107:
          if ((unint64_t)(0x1CAC083126E978D5 * ((a3[1] - *a3) >> 3)) >= *(void *)(a2 + 912)) {
            uint64_t v72 = *(void *)(a2 + 912);
          }
          else {
            uint64_t v72 = 0x1CAC083126E978D5 * ((a3[1] - *a3) >> 3);
          }
          unint64_t v73 = v44 + 1000 * v69;
          if (!*(_WORD *)(v73 + 888)) {
            KB::Candidate::compute_string(v70);
          }
          if (KB::String::equal((KB::String *)v132, (const KB::String *)(v73 + 888), 0)) {
            uint64_t v72 = 0x1CAC083126E978D5 * ((a3[1] - *a3) >> 3);
          }
          if (v72)
          {
            uint64_t v74 = 0;
            do
            {
              TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions(KB::CandidateCollection const&,KB::String const&,KB::LanguageModelContext const&,std::map<KB::String,KB::CandidateCollection> const&,unsigned long)const::$_0::operator()((uint64_t)&v116, &v96, v156, (uint64_t)v70, v134, (float32x2_t *)((char *)*a3 + v74));
              unint64_t v75 = *(void *)(a7 + 8);
              unint64_t v76 = *(void *)(a7 + 16);
              if (v75 >= v76)
              {
                uint64_t v78 = 0x1CAC083126E978D5 * ((uint64_t)(v75 - *(void *)a7) >> 3);
                unint64_t v79 = v78 + 1;
                if ((unint64_t)(v78 + 1) > 0x4189374BC6A7EFLL) {
                  goto LABEL_132;
                }
                unint64_t v80 = 0x1CAC083126E978D5 * ((uint64_t)(v76 - *(void *)a7) >> 3);
                if (2 * v80 > v79) {
                  unint64_t v79 = 2 * v80;
                }
                if (v80 >= 0x20C49BA5E353F7) {
                  unint64_t v81 = 0x4189374BC6A7EFLL;
                }
                else {
                  unint64_t v81 = v79;
                }
                uint64_t v114 = a7 + 16;
                if (v81) {
                  unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v81);
                }
                else {
                  uint64_t v82 = 0;
                }
                uint64_t v83 = v81 + 1000 * v78;
                *(void *)&long long v111 = v81;
                *((void *)&v111 + 1) = v83;
                unint64_t v113 = v81 + 1000 * v82;
                KB::Candidate::Candidate(v83, (uint64_t)&v116);
                uint64_t v112 = v83 + 1000;
                std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a7, &v111);
                uint64_t v77 = *(void *)(a7 + 8);
                std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v111);
              }
              else
              {
                uint64_t v77 = KB::Candidate::Candidate(v75, (uint64_t)&v116) + 1000;
              }
              *(void *)(a7 + 8) = v77;
              KB::Candidate::~Candidate((KB::Candidate *)&v116);
              v74 += 1000;
              --v72;
            }
            while (v72);
          }
        }
        ++v69;
        uint64_t v44 = v107.i64[0];
      }
      while (v69 < 0x1CAC083126E978D5 * ((v107.i64[1] - v107.i64[0]) >> 3));
    }
    *(void *)&long long v116 = (char *)&v109[1] + 8;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v116);
    *(void *)&long long v116 = v109;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v116);
    *(void *)&long long v116 = (char *)v108 + 8;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v116);
    *(void *)&long long v116 = &v107;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v116);
    if (v133 && v132[6] == 1) {
      free(v133);
    }
LABEL_126:
    unsigned int v46 = v87;
    goto LABEL_127;
  }
  if (LOWORD(v156[0]) | LOWORD(v134[0]))
  {
    KB::Candidate::Candidate((KB::Candidate *)&v116);
    long long v130 = 0u;
    unint64_t v131 = 0xFF8000003F800000;
    unint64_t v52 = *a3;
    int64x2_t v51 = a3[1];
    if (*a3 != v51)
    {
      do
      {
        KB::Candidate::Candidate((KB::Candidate *)&v111, v52);
        TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions(KB::CandidateCollection const&,KB::String const&,KB::LanguageModelContext const&,std::map<KB::String,KB::CandidateCollection> const&,unsigned long)const::$_0::operator()((uint64_t)&v107, &v96, v156, (uint64_t)&v116, v134, (float32x2_t *)&v111);
        unint64_t v53 = *(void *)(a7 + 8);
        unint64_t v54 = *(void *)(a7 + 16);
        if (v53 >= v54)
        {
          uint64_t v56 = 0x1CAC083126E978D5 * ((uint64_t)(v53 - *(void *)a7) >> 3);
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) > 0x4189374BC6A7EFLL) {
            goto LABEL_132;
          }
          unint64_t v58 = 0x1CAC083126E978D5 * ((uint64_t)(v54 - *(void *)a7) >> 3);
          if (2 * v58 > v57) {
            unint64_t v57 = 2 * v58;
          }
          if (v58 >= 0x20C49BA5E353F7) {
            unint64_t v59 = 0x4189374BC6A7EFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          uint64_t v106 = (_OWORD *)(a7 + 16);
          if (v59) {
            unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v59);
          }
          else {
            uint64_t v60 = 0;
          }
          uint64_t v61 = v59 + 1000 * v56;
          unint64_t v103 = v59;
          v104.i64[0] = v61;
          unint64_t v105 = v59 + 1000 * v60;
          KB::Candidate::Candidate(v61, (uint64_t)&v107);
          v104.i64[1] = v61 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a7, &v103);
          uint64_t v55 = *(void *)(a7 + 8);
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v103);
        }
        else
        {
          uint64_t v55 = KB::Candidate::Candidate(v53, (uint64_t)&v107) + 1000;
        }
        *(void *)(a7 + 8) = v55;
        KB::Candidate::~Candidate((KB::Candidate *)&v107);
        KB::Candidate::~Candidate((KB::Candidate *)&v111);
        unint64_t v52 = (const KB::Candidate *)((char *)v52 + 1000);
      }
      while (v52 != v51);
    }
    KB::Candidate::~Candidate((KB::Candidate *)&v116);
    goto LABEL_126;
  }
  unsigned int v46 = v87;
  if ((const KB::Candidate **)a7 != a3) {
    std::vector<KB::Candidate>::__assign_with_size[abi:nn180100]<KB::Candidate*,KB::Candidate*>((KB::Candidate **)a7, *a3, a3[1], 0x1CAC083126E978D5 * ((a3[1] - *a3) >> 3));
  }
LABEL_127:
  KB::Word::~Word((KB::Word *)v134);
  KB::Word::~Word((KB::Word *)v156);
  if (__p) {
    operator delete(__p);
  }
  if (v46) {
    WTF::RefCounted<KB::DictionaryContainer>::deref(v46);
  }
}

void *TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(void *this, KB::CandidateCollection *a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (this[3])
  {
    uint64_t v5 = this;
    char v6 = (*(uint64_t (**)(void *))(*this + 432))(this);
    (*(void (**)(void, KB::CandidateCollection *, void))(*(void *)v5[3] + 64))(v5[3], a2, a3 ^ 1u);
    uint64_t v7 = v5[3];
    uint64_t v8 = &unk_1F3F76808;
    char v9 = v6;
    uint64_t v10 = &v8;
    (*(void (**)(uint64_t, KB::CandidateCollection *, void **))(*(void *)v7 + 56))(v7, a2, &v8);
    return std::__function::__value_func<void ()(KB::Candidate &,float)>::~__value_func[abi:nn180100](&v8);
  }
  return this;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0>,void ()(KB::Candidate &,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  float v5 = *a3;
  float v6 = a2[187];
  float v7 = a2[189];
  float v8 = a2[190];
  uint64_t v10 = *(void *)a2;
  uint64_t v9 = *((void *)a2 + 1);
  uint64_t v11 = *(void *)a2 << 8;
  if (*(void *)a2)
  {
    uint64_t v12 = v11 - 16 * v10;
    uint64_t v13 = *((void *)a2 + 1);
    while ((*(unsigned char *)(v13 + 105) & 1) == 0)
    {
      v13 += 240;
      v12 -= 240;
      if (!v12) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v13 = *((void *)a2 + 1);
  }
  if (v13 == v9 + 240 * v10)
  {
LABEL_8:
    if (!v10) {
      goto LABEL_17;
    }
    uint64_t v14 = 240 * v10 - 240;
    unint64_t v15 = (uint64_t *)(v9 + 224);
    do
    {
      uint64_t v17 = *v15;
      v15 += 30;
      uint64_t v16 = v17;
      if (v17) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = v14 == 0;
      }
      v14 -= 240;
    }
    while (!v18);
    if (!v16) {
      goto LABEL_17;
    }
  }
  float v5 = v5 * 0.8;
LABEL_17:
  float v19 = logf(v5);
  float v20 = v6 + (float)(v8 * (float)(v7 + v19));
  if (*(unsigned char *)(a1 + 8))
  {
    if (v10)
    {
      uint64_t v21 = v11 - 16 * v10;
      unint64_t v22 = (float *)(v9 + 100);
      float v23 = 1.0;
      do
      {
        float v24 = *v22;
        v22 += 60;
        float v23 = v23 * v24;
        v21 -= 240;
      }
      while (v21);
    }
    else
    {
      float v23 = 1.0;
    }
    float v20 = v20 + (float)(v8 * logf(v23));
  }
  a2[186] = v20;
  a2[187] = v6;
  a2[188] = v19;
  a2[189] = v7;
  a2[190] = v8;
}

uint64_t std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0>,void ()(KB::Candidate &,float)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F76808;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0>,void ()(KB::Candidate &,float)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F3F76808;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0>,void ()(KB::Candidate &,float)>::~__func()
{
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions(KB::CandidateCollection const&,KB::String const&,KB::LanguageModelContext const&,std::map<KB::String,KB::CandidateCollection> const&,unsigned long)const::$_0::operator()(uint64_t a1, uint64_t **a2, size_t *a3, uint64_t a4, size_t *a5, float32x2_t *a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = KB::Candidate::Candidate((KB::Candidate *)a1);
  KB::LanguageModelContext::operator=((uint64_t)v12 + 784, *a2);
  KB::Candidate::append((unsigned __int16 *)a1, a3);
  KB::Candidate::append((KB::Candidate *)a1, (const KB::Candidate *)a4);
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(a4 + 744);
  *(_OWORD *)(a1 + 748) = *(_OWORD *)(a4 + 748);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a4 + 760);
  uint64_t v13 = KB::Candidate::append((unsigned __int16 *)a1, a5);
  if (*(void *)a1 && (*(unsigned char *)(*(void *)(a1 + 8) + 240 * *(void *)a1 - 105) & 4) == 0)
  {
    KB::String::space((KB::String *)v13);
    KB::Word::Word((KB::Word *)v20, (const KB::String *)&KB::String::space(void)::space, &kTITokenIDUNK, 0);
    v21 |= 0x4000000u;
    KB::Candidate::append((unsigned __int16 *)a1, v20);
    KB::Word::~Word((KB::Word *)v20);
  }
  KB::Candidate::append((KB::Candidate *)a1, (const KB::Candidate *)a6);
  float v14 = *(float *)(a1 + 760);
  float v15 = *(float *)(a1 + 748) + a6[93].f32[1];
  *(float *)(a1 + 748) = v15;
  float32x2_t v16 = vadd_f32(*(float32x2_t *)(a1 + 752), a6[94]);
  *(float *)(a1 + 744) = v15 + (float)(v14 * vaddv_f32(v16));
  *(float32x2_t *)(a1 + 752) = v16;
  *(unsigned char *)(a1 + 960) = a6[120].i8[0];
  *(_DWORD *)(a1 + 992) = a6[124].i32[0];
  int v17 = *(_DWORD *)(a4 + 780);
  __int32 v18 = a6[97].i32[1];
  uint64_t result = KB::Candidate::length((KB::Candidate *)a4);
  *(_DWORD *)(a1 + 780) = (v18 << (result + 1)) | v17;
  return result;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_2,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_2>,void ()(KB::Candidate &,float)>::operator()(uint64_t a1, uint64_t a2, float *a3)
{
  float v3 = *a3;
  v4[0] = *(_OWORD *)(a2 + 748);
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a2 + 760);
  update_lookup_suggestions_omega_factors(a2, (uint64_t)v4, **(unsigned __int8 **)(a1 + 8), v3);
}

__n128 std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_2,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_2>,void ()(KB::Candidate &,float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F76778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_2,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_2>,void ()(KB::Candidate &,float)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F3F76778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_2,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_2>,void ()(KB::Candidate &,float)>::~__func()
{
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_1,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_1>,void ()(KB::Candidate &,float)>::operator()(uint64_t a1, uint64_t a2, float *a3)
{
  float v3 = *a3;
  v4[0] = *(_OWORD *)(a2 + 748);
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a2 + 760);
  update_lookup_suggestions_omega_factors(a2, (uint64_t)v4, *(unsigned __int8 *)(a1 + 8), v3);
}

uint64_t std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_1,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_1>,void ()(KB::Candidate &,float)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F76730;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_1,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_1>,void ()(KB::Candidate &,float)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F3F76730;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_1,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>,BOOL)::$_1>,void ()(KB::Candidate &,float)>::~__func()
{
}

void TI::Favonius::FavoniusStrokeBuildManager::set_input_index(TI::Favonius::FavoniusStrokeBuildManager *this, int a2)
{
  if (!*((unsigned char *)this + 209))
  {
    *((_DWORD *)this + 48) = a2;
    int v5 = 0;
    memset(v3, 0, sizeof(v3));
    memset(v4, 0, sizeof(v4));
    KB::CandidateCollection::operator=((uint64_t)this + 800, (uint64_t)v3);
    float v6 = (void **)&v4[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v6);
    float v6 = (void **)v4;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v6);
    float v6 = (void **)&v3[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v6);
    float v6 = (void **)v3;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v6);
    std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*((void **)this + 98));
    *((void *)this + 97) = (char *)this + 784;
    *((void *)this + 99) = 0;
    *((void *)this + 98) = 0;
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::delete_from_input(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  if (!*((unsigned char *)this + 209))
  {
    unsigned int v2 = *((_DWORD *)this + 48) - 1;
    *((_DWORD *)this + 48) = v2;
    uint64_t v3 = *((void *)this + 22);
    uint64_t v4 = *((void *)this + 21) + 4 * v2;
    uint64_t v5 = v3 - (v4 + 4);
    if (v3 != v4 + 4) {
      memmove((void *)(*((void *)this + 21) + 4 * v2), (const void *)(v4 + 4), v3 - (v4 + 4));
    }
    *((void *)this + 22) = v4 + v5;
    *((unsigned char *)this + 208) = 1;
    int v8 = 0;
    memset(v6, 0, sizeof(v6));
    memset(v7, 0, sizeof(v7));
    KB::CandidateCollection::operator=((uint64_t)this + 800, (uint64_t)v6);
    uint64_t v9 = (void **)&v7[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v9);
    uint64_t v9 = (void **)v7;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v9);
    uint64_t v9 = (void **)&v6[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v9);
    uint64_t v9 = (void **)v6;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v9);
    std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*((void **)this + 98));
    *((void *)this + 97) = (char *)this + 784;
    *((void *)this + 99) = 0;
    *((void *)this + 98) = 0;
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::add_input(TI::Favonius::FavoniusStrokeBuildManager *this, std::vector<unsigned int>::size_type __n, char a3)
{
  if (!*((unsigned char *)this + 209))
  {
    unsigned int v3 = __n;
    int v5 = *((_DWORD *)this + 40);
    float v6 = (std::vector<unsigned int> *)((char *)this + 168);
    if (!v5 || (a3 & 1) != 0) {
      int v7 = -1;
    }
    else {
      int v7 = v5 - 1;
    }
    LODWORD(v9[0]) = v7;
    v8.__i_ = (std::__wrap_iter<const unsigned int *>::iterator_type)(*((void *)this + 21)
                                                                    + 4 * *((unsigned int *)this + 48));
    std::vector<unsigned int>::insert(v6, v8, v3, (std::vector<unsigned int>::const_reference)v9);
    *((_DWORD *)this + 48) += v3;
    int v11 = 0;
    memset(v9, 0, sizeof(v9));
    memset(v10, 0, sizeof(v10));
    KB::CandidateCollection::operator=((uint64_t)this + 800, (uint64_t)v9);
    uint64_t v12 = (void **)&v10[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v12);
    uint64_t v12 = (void **)v10;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v12);
    uint64_t v12 = (void **)&v9[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v12);
    uint64_t v12 = (void **)v9;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v12);
    std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*((void **)this + 98));
    *((void *)this + 97) = (char *)this + 784;
    *((void *)this + 99) = 0;
    *((void *)this + 98) = 0;
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::add_touch_cancel(TI::Favonius::FavoniusStrokeBuildManager *this, int a2)
{
  uint64_t v4 = (_DWORD *)*((void *)this + 88);
  if (v4 && v4[20] == a2) {
    (*(void (**)(_DWORD *))(*(void *)v4 + 56))(v4);
  }
  unsigned int v5 = TI::Favonius::FavoniusStrokeBuildManager::uncommitted_search_index_for_path_index(this, a2);
  unint64_t v6 = *((void *)this + 9);
  unint64_t v7 = v5;
  if (v6 <= v5) {
    int v8 = 0;
  }
  else {
    int v8 = v6 + ~v5;
  }
  memset(v17, 0, sizeof(v17));
  unint64_t v9 = v5 + 1;
  if (*((void *)this + 6) > v9)
  {
    TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history((uint64_t)this, v5, v17);
    unint64_t v10 = *((void *)this + 9);
    if (v10 > v9)
    {
      WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::Search>>::destruct((unsigned int *)(*((void *)this + 10) + 8 * v9), (unsigned int **)(*((void *)this + 10) + 8 * v10));
      *((void *)this + 9) = v9;
    }
  }
  for (unint64_t i = *((void *)this + 6); i > v7; *((void *)this + 6) = i)
  {
    uint64_t v12 = *((void *)this + 9);
    if (v12)
    {
      uint64_t v13 = v12 - 1;
      WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::Search>>::destruct((unsigned int *)(*((void *)this + 10) + 8 * (v12 - 1)), (unsigned int **)(*((void *)this + 10) + 8 * v12));
      *((void *)this + 9) = v13;
      unint64_t i = *((void *)this + 6);
    }
    --i;
    uint64_t v14 = *(void *)(*((void *)this + 7) + 8 * i);
    if (v14) {
      WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v14);
    }
  }
  if (v17[0])
  {
    TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history((uint64_t)this, v17);
    if (v8 + (int)i > i)
    {
      do
      {
        TI::Favonius::FavoniusStrokeBuildManager::perform_search(this, i, &v16);
        if (v16) {
          WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v16);
        }
        LODWORD(i) = i + 1;
        --v8;
      }
      while (v8);
    }
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(v17);
  return 0;
}

unint64_t TI::Favonius::FavoniusStrokeBuildManager::uncommitted_search_index_for_path_index(TI::Favonius::FavoniusStrokeBuildManager *this, int a2)
{
  unint64_t v2 = *((void *)this + 6);
  int v3 = *((_DWORD *)this + 40);
  unint64_t v4 = (v3 + 1);
  if (v2 > v4)
  {
    unsigned int v7 = v3 + 2;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(*((void *)this + 7) + 8 * v4) + 8);
      if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8) + 48) == a2) {
        unint64_t v2 = v7 - 1;
      }
      else {
        unint64_t v2 = v2;
      }
      unint64_t v4 = v7;
    }
    while (*((void *)this + 6) > (unint64_t)v7++);
  }
  return v2;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::add_touch_up(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  unsigned int v6 = TI::Favonius::FavoniusStrokeBuildManager::uncommitted_search_index_for_path_index((TI::Favonius::FavoniusStrokeBuildManager *)a1, *(_DWORD *)(v5 + 48));
  unsigned int v7 = v6;
  unint64_t v8 = v6;
  if (*(void *)(a1 + 48) == v6)
  {
    *(void *)(a1 + 200) = *(void *)(v5 + 32);
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8 * v6 - 8);
    uint64_t v40 = v5;
    atomic_fetch_add((atomic_uint *volatile)v5, 1u);
    TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode::history_by_appending_touch_keycode((uint64_t)v39, *(void *)(v9 + 8), &v40);
  }
  if (*(void *)(a1 + 72) <= (unint64_t)v6
    || TI::Favonius::FavoniusStrokeBuildManager::can_update_existing_search((TI::Favonius::FavoniusStrokeBuildManager *)a1, v6))
  {
    if (v7 - 1 <= *(_DWORD *)(a1 + 160)) {
      goto LABEL_25;
    }
    memset(v39, 0, sizeof(v39));
    if (*(void *)(a1 + 48) > (unint64_t)(v7 + 1)) {
      TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(a1, v7, v39);
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(a1, v7 - 1, &v36);
    memset(v35, 0, sizeof(v35));
    int v10 = *(_DWORD *)(a1 + 160);
    if (*(void *)(a1 + 48) > (unint64_t)(v10 + 1)) {
      TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(a1, v10, v35);
    }
    int v11 = v39[0];
    if (v39[0])
    {
      uint64_t v12 = v39;
    }
    else
    {
      int v11 = (atomic_uint *)v35[0];
      if (!v35[0])
      {
LABEL_17:
        unint64_t v13 = *(void *)(a1 + 72);
        unint64_t v14 = (*(_DWORD *)(a1 + 160) + 1);
        if (v13 > v14)
        {
          WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::Search>>::destruct((unsigned int *)(*(void *)(a1 + 80) + 8 * v14), (unsigned int **)(*(void *)(a1 + 80) + 8 * v13));
          *(void *)(a1 + 72) = v14;
        }
        TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history(a1, &v36);
        TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history(a1, v35);
        TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history(a1, v39);
        unsigned int v15 = *(_DWORD *)(a1 + 160) + 1;
        if (v15 <= v7)
        {
          do
          {
            TI::Favonius::FavoniusStrokeBuildManager::perform_search((TI::Favonius::FavoniusStrokeBuildManager *)a1, v15, &v34);
            if (v34) {
              WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v34);
            }
            ++v15;
          }
          while (v15 <= v7);
          unsigned int v15 = *(_DWORD *)(a1 + 160) + 1;
        }
        WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(v35);
        WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(&v36);
        WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(v39);
        unint64_t v8 = v15;
        unsigned int v7 = v15;
        goto LABEL_25;
      }
      uint64_t v12 = (atomic_uint **)v35;
    }
    *(void *)(*(void *)(*(void *)(v37 + 8 * v36 - 8) + 8) + 32) = *(void *)(*(void *)(*(void *)&v12[1][2 * (void)v11 - 2]
                                                                                                  + 8)
                                                                                      + 32);
    goto LABEL_17;
  }
  TI::Favonius::FavoniusStrokeBuildManager::perform_search((TI::Favonius::FavoniusStrokeBuildManager *)a1, v7, &v33);
  if (v33) {
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v33);
  }
LABEL_25:
  if (*(void *)(a1 + 72) <= v8)
  {
    float v24 = 0;
  }
  else
  {
    TI::Favonius::FavoniusStrokeBuildManager::forced_hit_key(a1, *(const TI::Favonius::KeyboardLayout **)(v5 + 56), v7, a3, v39);
    float32x2_t v16 = v39[0];
    uint64_t v17 = *(void *)(a1 + 80);
    uint64_t v18 = *(void *)(v17 + 8 * v8);
    uint64_t v19 = *(void *)(v17 + 8 * (v7 - 1));
    uint64_t v32 = (unsigned int *)v19;
    if (v19) {
      atomic_fetch_add((atomic_uint *volatile)(v19 + 8), 1u);
    }
    if (v16) {
      atomic_fetch_add(v16, 1u);
    }
    (*(void (**)(atomic_uint **__return_ptr))(*(void *)v18 + 96))(v39);
    uint64_t v20 = *(void *)(a1 + 80);
    int v21 = *(unsigned int **)(v20 + 8 * v8);
    uint64_t v22 = v39[0];
    v39[0] = 0;
    *(void *)(v20 + 8 * v8) = v22;
    if (v21)
    {
      unsigned int v23 = atomic_load(v21 + 2);
      if (v23 == 1) {
        (*(void (**)(unsigned int *))(*(void *)v21 + 8))(v21);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v21 + 2, 0xFFFFFFFF);
      }
      if (v39[0])
      {
        unsigned int v25 = atomic_load((unsigned int *)v39[0] + 2);
        if (v25 == 1) {
          (*(void (**)(void))(*(void *)v39[0] + 8))();
        }
        else {
          atomic_fetch_add(v39[0] + 2, 0xFFFFFFFF);
        }
      }
    }
    if (v16) {
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v16);
    }
    if (v32)
    {
      unsigned int v26 = atomic_load(v32 + 2);
      if (v26 == 1) {
        (*(void (**)(void))(*(void *)v32 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v32 + 2, 0xFFFFFFFF);
      }
    }
    uint64_t v27 = *(void *)(*(void *)(a1 + 80) + 8 * v8);
    float v24 = *(atomic_uint **)((*(uint64_t (**)(uint64_t))(*(void *)v27 + 32))(v27) + 8);
    if (v24) {
      atomic_fetch_add(v24, 1u);
    }
    uint64_t v28 = *(void *)(*(void *)(a1 + 80) + 8 * v8);
    a3 = *(__int16 *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v28 + 32))(v28) + 8)
                                  + 62);
    if (v16) {
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v16);
    }
  }
  if (*(_DWORD *)(a1 + 160) < v7) {
    *(_DWORD *)(a1 + 160) = v7;
  }
  uint64_t v29 = *(void *)(a1 + 704);
  if (v29) {
    (*(void (**)(uint64_t, uint64_t, void, double, double, double, double))(*(void *)v29 + 32))(v29, 2, *(unsigned int *)(v5 + 48), *(double *)(v5 + 8), *(double *)(v5 + 16), *(double *)(v5 + 32), 0.0);
  }
  uint64_t v30 = *(void *)(a1 + 720);
  if (v30) {
    TI::TIInputRecognizer::add_touch(v30, 2, *(double *)(v5 + 8), *(double *)(v5 + 16));
  }
  if (v24) {
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v24);
  }
  if (v5) {
    WTF::RefCounted<TI::Favonius::Touch>::deref(v5);
  }
  return a3;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::forced_hit_key@<X0>(uint64_t this@<X0>, const TI::Favonius::KeyboardLayout *a2@<X2>, unsigned int a3@<W1>, int a4@<W3>, atomic_uint **a5@<X8>)
{
  if (a4 == -1)
  {
    unsigned int v15 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(this + 56);
    uint64_t v9 = a3;
    uint64_t v10 = *(void *)(*(void *)(v8 + 8 * a3) + 8);
    if (*(const TI::Favonius::KeyboardLayout **)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 56))(v10) + 56) == a2)
    {
      uint64_t v17 = *(void *)(*(void *)(v8 + 8 * v9) + 8);
      uint64_t v36 = (unsigned int *)v17;
      if (v17)
      {
        atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 1u);
        uint64_t v18 = v36;
      }
      else
      {
        uint64_t v18 = 0;
      }
      v34[0] = MEMORY[0x1E4F143A8];
      v34[1] = 0x40000000;
      _OWORD v34[2] = ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke;
      void v34[3] = &__block_descriptor_tmp_11_12292;
      int v35 = a4;
      this = (uint64_t)TI::Favonius::FavoniusStrokeBuildManager::key_near_touch_passing_test((uint64_t)&v36, (uint64_t)v34, &v28);
      unsigned int v15 = v28;
      uint64_t v28 = 0;
      if (v18)
      {
        unsigned int v19 = atomic_load(v18 + 2);
        if (v19 == 1) {
          this = (*(uint64_t (**)(unsigned int *))(*(void *)v18 + 8))(v18);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v18 + 2, 0xFFFFFFFF);
        }
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = &v28;
      uint64_t v30 = 0x3002000000;
      uint64_t v31 = __Block_byref_object_copy__12293;
      uint64_t v32 = __Block_byref_object_dispose__12294;
      uint64_t v33 = 0;
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 0x40000000;
      float v24 = ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke_12;
      unsigned int v25 = &unk_1E6E2C620;
      int v27 = a4;
      unsigned int v26 = &v28;
      int v11 = (atomic_uint **)*((void *)a2 + 1);
      uint64_t v12 = (atomic_uint **)*((void *)a2 + 2);
      if (v11 == v12) {
        goto LABEL_12;
      }
      do
        v24((uint64_t)v23, v11++);
      while (v11 != v12);
      if (!v29[5])
      {
LABEL_12:
        unsigned int v15 = 0;
      }
      else
      {
        uint64_t v13 = *(void *)(*(void *)(v8 + 8 * v9) + 8);
        int v21 = (unsigned int *)v13;
        if (v13)
        {
          atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
          unint64_t v14 = v21;
        }
        else
        {
          unint64_t v14 = 0;
        }
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 0x40000000;
        CFMutableStringRef v20[2] = ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke_2;
        _OWORD v20[3] = &unk_1E6E2C648;
        v20[4] = &v28;
        TI::Favonius::FavoniusStrokeBuildManager::key_near_touch_passing_test((uint64_t)&v21, (uint64_t)v20, &v22);
        unsigned int v15 = v22;
        uint64_t v22 = 0;
        if (v14)
        {
          unsigned int v16 = atomic_load(v14 + 2);
          if (v16 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v14 + 8))(v14);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v14 + 2, 0xFFFFFFFF);
          }
        }
      }
      _Block_object_dispose(&v28, 8);
      this = v33;
      if (v33) {
        this = WTF::RefCounted<TI::Favonius::Key>::deref(v33);
      }
    }
  }
  *a5 = v15;
  return this;
}

BOOL ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 32) == *(__int16 *)(*(void *)(*(void *)a2 + 8) + 62);
}

uint64_t __Block_byref_object_copy__12293(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__12294(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return WTF::RefCounted<TI::Favonius::Key>::deref(result);
  }
  return result;
}

uint64_t ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke_12(uint64_t result, atomic_uint **a2)
{
  uint64_t v2 = *a2;
  if (*(_DWORD *)(result + 40) == *((__int16 *)*a2 + 31))
  {
    uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
    atomic_fetch_add(v2, 1u);
    uint64_t result = *(void *)(v3 + 40);
    *(void *)(v3 + 40) = v2;
    if (result) {
      return WTF::RefCounted<TI::Favonius::Key>::deref(result);
    }
  }
  return result;
}

BOOL ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 8);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return v2 == v3 || KB::String::equal((KB::String *)(v2 + 8), (const KB::String *)(v3 + 8), 1);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::add_touch_down_or_drag(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  *(void *)(a1 + 200) = *(void *)(*a2 + 32);
  double v9 = *(double *)(v8 + 8);
  double v10 = *(double *)(v8 + 16);
  int v11 = *(TI::Favonius::KeyboardLayout **)(v8 + 56);
  *(double *)(a1 + 216) = TI::Favonius::KeyboardLayout::median_key_half_width(v11);
  uint64_t v12 = *(unsigned int *)(v8 + 48);
  uint64_t v13 = *(unsigned int *)(v8 + 40);
  uint64_t v33 = (atomic_uint *)v11;
  if (v11) {
    atomic_fetch_add((atomic_uint *volatile)v11, 1u);
  }
  unsigned int v14 = TI::Favonius::FavoniusStrokeBuildManager::uncommitted_search_index_for_path_index((TI::Favonius::FavoniusStrokeBuildManager *)a1, v12);
  uint64_t v15 = v14;
  if (*(void *)(a1 + 48) == v14)
  {
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v14 - 8);
    uint64_t v17 = *a2;
    *a2 = 0;
    uint64_t v32 = v17;
    TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode::history_by_appending_touch_keycode((uint64_t)&v43, *(void *)(v16 + 8), &v32);
  }
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(a1, v14 - 1, &v43);
  uint64_t v18 = v44[(void)v43 - 1];
  uint64_t v19 = *(void *)(v18 + 8);
  uint64_t v20 = *a2;
  *a2 = 0;
  *(void *)(v18 + 8) = v20;
  if (v19) {
    WTF::RefCounted<TI::Favonius::Touch>::deref(v19);
  }
  TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history(a1, &v43);
  WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(&v43);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8 * v15) + 16) = a3;
  if ((a4 & 1) != 0 || v13 != 1)
  {
    TI::Favonius::FavoniusStrokeBuildManager::perform_search((TI::Favonius::FavoniusStrokeBuildManager *)a1, v15, &v43);
    int v21 = v43;
    a3 = *((__int16 *)v43 + 31);
  }
  else
  {
    int v21 = 0;
  }
  uint64_t v22 = *(void **)(a1 + 704);
  if (v22)
  {
    if (v33)
    {
      atomic_fetch_add(v33, 1u);
      TI::CP::TIPathRecognizerInterface::set_key_layout(v22, v33);
      WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v33);
      if (v13)
      {
LABEL_15:
        (*(void (**)(void, uint64_t, uint64_t, double, double, double, double))(**(void **)(a1 + 704) + 32))(*(void *)(a1 + 704), v13, v12, v9, v10, *(double *)(a1 + 200), 0.0);
        if (v33)
        {
          unsigned __int8 v23 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 704) + 633));
          if ((v23 & 1) == 0)
          {
            uint64_t v24 = *(void *)(a1 + 704);
            unsigned int v25 = *(std::__shared_weak_count **)(a1 + 712);
            if (v25) {
              atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            KB::String::String((KB::String *)&v43, (const KB::String *)(v33 + 52));
            if (*(char *)(a1 + 471) < 0) {
              std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a1 + 448), *(void *)(a1 + 456));
            }
            else {
              std::string v31 = *(std::string *)(a1 + 448);
            }
            if (TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::onceToken != -1) {
              dispatch_once(&TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::onceToken, &__block_literal_global_19_12297);
            }
            uint64_t v34 = MEMORY[0x1E4F143A8];
            uint64_t v35 = 1174405120;
            uint64_t v36 = ___ZN2TI8Favonius26FavoniusStrokeBuildManager22add_touch_down_or_dragEN3WTF10PassRefPtrINS0_5TouchEEEib_block_invoke;
            uint64_t v37 = &__block_descriptor_tmp_3_12298;
            uint64_t v38 = v24;
            int v39 = v25;
            if (v25) {
              atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            int v26 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__p, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
            }
            else {
              std::string __p = v31;
            }
            KB::String::String((KB::String *)v41, (const KB::String *)&v43);
            TIDispatchAsync();
            if (v42 && v41[6] == 1) {
              free(v42);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v39) {
              std::__shared_weak_count::__release_weak(v39);
            }
            if (v26 < 0) {
              operator delete(v31.__r_.__value_.__l.__data_);
            }
            if (v44 && BYTE6(v43) == 1) {
              free(v44);
            }
            if (v25) {
              std::__shared_weak_count::__release_weak(v25);
            }
          }
        }
        goto LABEL_43;
      }
    }
    else
    {
      TI::CP::TIPathRecognizerInterface::set_key_layout(v22, 0);
      if (v13) {
        goto LABEL_15;
      }
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 704) + 120))(*(void *)(a1 + 704), a1 + 224);
    goto LABEL_15;
  }
LABEL_43:
  uint64_t v27 = *(void *)(a1 + 720);
  if (v27)
  {
    KB::LanguageModelContext::operator=(v27 + 104, (uint64_t *)(a1 + 224));
    uint64_t v28 = *(void **)(a1 + 720);
    uint64_t v29 = v33;
    if (v33)
    {
      atomic_fetch_add(v33, 1u);
      TI::CP::TIPathRecognizerInterface::set_key_layout(v28, v29);
      WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v29);
    }
    else
    {
      TI::CP::TIPathRecognizerInterface::set_key_layout(v28, 0);
    }
    TI::TIInputRecognizer::add_touch(*(void *)(a1 + 720), v13, v9, v10);
  }
  if (v21) {
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v21);
  }
  if (v33) {
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v33);
  }
  return a3;
}

void TI::Favonius::FavoniusStrokeBuildManager::initialize_it_recognizer(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 330) && !*(void *)(a1 + 720))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      uint64_t v5 = *(atomic_uint **)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
      if (v5) {
        atomic_fetch_add(v5, 1u);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    unsigned int v6 = (const char *)(a1 + 448);
    if (*(char *)(a1 + 471) < 0) {
      unsigned int v6 = *(const char **)(a1 + 448);
    }
    KB::String::String((KB::String *)&buf, v6);
    uint64_t v7 = *a2 + 208;
    double v10 = v5;
    if (v5)
    {
      atomic_fetch_add(v5, 1u);
      uint64_t v8 = (unsigned int *)v10;
      int v9 = TI::TIInputRecognizer::ml_based_tap_typing_enabled((unsigned __int16 *)&buf, v7, &v10, a1 + 736);
      if (v8) {
        WTF::RefCounted<KB::DictionaryContainer>::deref(v8);
      }
    }
    else
    {
      int v9 = TI::TIInputRecognizer::ml_based_tap_typing_enabled((unsigned __int16 *)&buf, v7, &v10, a1 + 736);
    }
    if (*(void *)&buf_4[4] && buf_4[2] == 1) {
      free(*(void **)&buf_4[4]);
    }
    if (v9)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
      {
        int buf = 136315138;
        *(void *)buf_4 = "initialize_it_recognizer";
        _os_log_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "%s  Creating ml tap typing recognizer", (uint8_t *)&buf, 0xCu);
      }
      operator new();
    }
    if (v5) {
      WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v5);
    }
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::initialize_ensemble_path_recognizer(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 328) && *((unsigned char *)this + 210))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 89);
    *((_OWORD *)this + 44) = 0u;
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v2);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = "initialize_ensemble_path_recognizer";
      _os_log_debug_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%s  Loading/reloading ensemble path recognizer", buf, 0xCu);
    }
    CFDictionaryRef v3 = (const __CFDictionary *)*((void *)this + 91);
    if (v3)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v3, @"CPSearch");
      if (Value) {
        CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)TI::CP::SearchParameters::set_values_from_dictionary(__CFDictionary const*)::$_0::__invoke, (char *)this + 544);
      }
    }
    uint64_t v5 = operator new(0x298uLL);
    unsigned int v6 = v5;
    v5[1] = 0;
    v5[2] = 0;
    *uint64_t v5 = &unk_1F3F766B0;
    uint64_t v7 = (unsigned int *)*((void *)this + 1);
    uint64_t v24 = v7;
    if (v7) {
      atomic_fetch_add((atomic_uint *volatile)v7 + 2, 1u);
    }
    uint64_t v8 = (unsigned int *)*((void *)this + 2);
    unsigned __int8 v23 = v8;
    if (v8) {
      atomic_fetch_add((atomic_uint *volatile)v8 + 2, 1u);
    }
    int v9 = v5 + 3;
    long long v10 = *(_OWORD *)((char *)this + 424);
    long long v29 = *(_OWORD *)((char *)this + 408);
    long long v30 = v10;
    uint64_t v31 = *((void *)this + 55);
    long long v11 = *(_OWORD *)((char *)this + 360);
    *(_OWORD *)int buf = *(_OWORD *)((char *)this + 344);
    long long v26 = v11;
    long long v12 = *(_OWORD *)((char *)this + 392);
    long long v27 = *(_OWORD *)((char *)this + 376);
    long long v28 = v12;
    if (*((char *)this + 471) < 0) {
      std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)this + 56), *((void *)this + 57));
    }
    else {
      std::string v32 = *(std::string *)((char *)this + 448);
    }
    if (*((char *)this + 495) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 59), *((void *)this + 60));
    }
    else {
      std::string __p = *(std::string *)((char *)this + 472);
    }
    __int16 v34 = *((_WORD *)this + 248);
    char v35 = *((unsigned char *)this + 498);
    KB::String::String((KB::String *)v36, (TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 504));
    long long v13 = *(_OWORD *)((char *)this + 680);
    long long v46 = *(_OWORD *)((char *)this + 664);
    long long v47 = v13;
    uint64_t v48 = *((void *)this + 87);
    long long v14 = *(_OWORD *)((char *)this + 616);
    long long v42 = *(_OWORD *)((char *)this + 600);
    long long v43 = v14;
    long long v15 = *(_OWORD *)((char *)this + 648);
    long long v44 = *(_OWORD *)((char *)this + 632);
    long long v45 = v15;
    long long v16 = *(_OWORD *)((char *)this + 552);
    long long v38 = *(_OWORD *)((char *)this + 536);
    long long v39 = v16;
    long long v17 = *(_OWORD *)((char *)this + 584);
    long long v40 = *(_OWORD *)((char *)this + 568);
    long long v41 = v17;
    TI::CP::TIPathRecognizerEnsemble::TIPathRecognizerEnsemble((uint64_t)(v6 + 3), (uint64_t *)&v24, (uint64_t *)&v23, (uint64_t)buf);
    if (v37 && v36[6] == 1) {
      free(v37);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (v23)
    {
      unsigned int v18 = atomic_load(v23 + 2);
      if (v18 == 1) {
        (*(void (**)(void))(*(void *)v23 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v23 + 2, 0xFFFFFFFF);
      }
    }
    if (v24)
    {
      unsigned int v19 = atomic_load(v24 + 2);
      if (v19 == 1) {
        (*(void (**)(void))(*(void *)v24 + 40))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v24 + 2, 0xFFFFFFFF);
      }
    }
    *((void *)this + 88) = v9;
    uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 89);
    *((void *)this + 89) = v6;
    if (v20)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v20);
      int v9 = (void *)*((void *)this + 88);
    }
    uint64_t v21 = *(void *)(*(void *)(*((void *)this + 7) + 8 * *((void *)this + 6) - 8) + 8);
    uint64_t v22 = *(atomic_uint **)((*(uint64_t (**)(uint64_t))(*(void *)v21 + 56))(v21) + 56);
    if (v22)
    {
      atomic_fetch_add(v22, 1u);
      TI::CP::TIPathRecognizerInterface::set_key_layout(v9, v22);
      WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v22);
    }
    else
    {
      TI::CP::TIPathRecognizerInterface::set_key_layout(v9, 0);
    }
    (*(void (**)(void, char *))(**((void **)this + 88) + 120))(*((void *)this + 88), (char *)this + 224);
    TI::CP::TIPathRecognizerEnsemble::load_ml_source_if_needed(*((TI::CP::TIPathRecognizerEnsemble **)this + 88));
    *((unsigned char *)this + 210) = 0;
  }
}

uint64_t TI::CP::TIPathRecognizerInterface::set_key_layout(void *a1, atomic_uint *a2)
{
  uint64_t result = a1[1];
  if ((atomic_uint *)result != a2)
  {
    if (a2)
    {
      atomic_fetch_add(a2, 1u);
      uint64_t result = a1[1];
    }
    a1[1] = a2;
    if (result) {
      WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref(result);
    }
    uint64_t v4 = *(uint64_t (**)(void *))(*a1 + 152);
    return v4(a1);
  }
  return result;
}

void ___ZN2TI8Favonius26FavoniusStrokeBuildManager22add_touch_down_or_dragEN3WTF10PassRefPtrINS0_5TouchEEEib_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    CFDictionaryRef v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5) {
        TI::CP::TIPathRecognizerEnsemble::update_ml_supports_language_layout_if_needed(v5, (uint64_t)(a1 + 6), (const KB::String *)(a1 + 9));
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
}

void __destroy_helper_block_8_32c58_ZTSKNSt3__18weak_ptrIN2TI2CP24TIPathRecognizerEnsembleEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c17_ZTSKN2KB6StringE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2 && *(unsigned char *)(a1 + 78) == 1) {
    free(v2);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  CFDictionaryRef v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

KB::String *__copy_helper_block_8_32c58_ZTSKNSt3__18weak_ptrIN2TI2CP24TIPathRecognizerEnsembleEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c17_ZTSKN2KB6StringE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }

  return KB::String::String((KB::String *)&a1[3], (const KB::String *)(a2 + 72));
}

dispatch_queue_t ___ZN2TI8Favonius26FavoniusStrokeBuildManager21background_task_queueEv_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t result = dispatch_queue_create("com.apple.TextInput.FSBM.backgroundTasks", v0);
  TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::__queue = (uint64_t)result;
  return result;
}

uint64_t std::__shared_ptr_emplace<TI::CP::TIPathRecognizerEnsemble>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::TIPathRecognizerEnsemble>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F766B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::TIPathRecognizerEnsemble>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F766B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::engineType(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 90)) {
    return 1;
  }
  uint64_t v2 = (char *)this + 448;
  if (*((char *)this + 471) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  KB::String::String((KB::String *)v10, v2);
  KB::String::String((KB::String *)v8, (const KB::String *)(*(void *)(*((void *)this + 90) + 8) + 208));
  uint64_t v3 = *((void *)this + 1);
  if (v3 && (std::string::size_type v4 = *(atomic_uint **)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3)) != 0)
  {
    atomic_fetch_add(v4, 1u);
    uint64_t v7 = v4;
    atomic_fetch_add(v4, 1u);
    char v5 = TI::TIInputRecognizer::ml_based_tap_typing_enabled(v10, (uint64_t)v8, &v7, (uint64_t)this + 736);
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v4);
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v4);
  }
  else
  {
    uint64_t v7 = 0;
    char v5 = TI::TIInputRecognizer::ml_based_tap_typing_enabled(v10, (uint64_t)v8, &v7, (uint64_t)this + 736);
  }
  if (v9 && v8[6] == 1) {
    free(v9);
  }
  if (v12)
  {
    if (v11 == 1) {
      free(v12);
    }
  }
  if (v5) {
    return 2;
  }
  else {
    return 1;
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::~FavoniusStrokeBuildManager(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  TI::Favonius::FavoniusStrokeBuildManager::~FavoniusStrokeBuildManager(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  void *v2;
  void *v3;
  const void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  void **v20;

  *(void *)this = &unk_1F3F76420;
  if (*((unsigned char *)this + 984))
  {
    uint64_t v2 = (void *)*((void *)this + 120);
    if (v2 && *((unsigned char *)this + 958) == 1) {
      free(v2);
    }
    uint64_t v3 = (void *)*((void *)this + 116);
    if (v3 && *((unsigned char *)this + 926) == 1) {
      free(v3);
    }
  }
  uint64_t v20 = (void **)((char *)this + 872);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v20);
  uint64_t v20 = (void **)((char *)this + 848);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v20);
  uint64_t v20 = (void **)((char *)this + 824);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v20);
  uint64_t v20 = (void **)((char *)this + 800);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v20);
  std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*((void **)this + 98));
  if (*((unsigned char *)this + 760) && *((char *)this + 759) < 0) {
    operator delete(*((void **)this + 92));
  }
  std::string::size_type v4 = (const void *)*((void *)this + 91);
  if (v4) {
    CFRelease(v4);
  }
  char v5 = *((void *)this + 90);
  *((_OWORD *)this + 45) = 0u;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 89);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v6);
  }
  uint64_t v7 = (void *)*((void *)this + 64);
  if (v7 && *((unsigned char *)this + 510) == 1) {
    free(v7);
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  uint64_t v20 = (void **)((char *)this + 304);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v20);
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 296));
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 288));
  uint64_t v8 = (void *)*((void *)this + 30);
  if (v8)
  {
    *((void *)this + 31) = v8;
    operator delete(v8);
  }
  int v9 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v9);
  }
  long long v10 = (void *)*((void *)this + 21);
  if (v10)
  {
    *((void *)this + 22) = v10;
    operator delete(v10);
  }
  char v11 = (void *)*((void *)this + 17);
  if (v11 && *((unsigned char *)this + 134) == 1) {
    free(v11);
  }
  long long v12 = (void *)*((void *)this + 13);
  if (v12 && *((unsigned char *)this + 102) == 1) {
    free(v12);
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::~Vector((uint64_t)this + 72);
  WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>,0ul>::~Vector((void *)this + 6);
  uint64_t v13 = (unsigned int *)*((void *)this + 5);
  if (v13)
  {
    long long v14 = atomic_load(v13 + 2);
    if (v14 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v13 + 16))(v13);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
    }
  }
  long long v15 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v15);
  }
  long long v16 = (unsigned int *)*((void *)this + 2);
  if (v16)
  {
    long long v17 = atomic_load(v16 + 2);
    if (v17 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v16 + 8))(v16);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v16 + 2, 0xFFFFFFFF);
    }
  }
  unsigned int v18 = (unsigned int *)*((void *)this + 1);
  if (v18)
  {
    unsigned int v19 = atomic_load(v18 + 2);
    if (v19 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v18 + 40))(v18);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v18 + 2, 0xFFFFFFFF);
    }
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::InputTouchAlignment(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::touch_index_for_input_index(TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment *this, unsigned int a2)
{
  for (uint64_t i = *(void *)this; a2; --a2)
  {
    if (*(_DWORD *)(i + 4 * a2) != -1) {
      break;
    }
  }
  return *(unsigned int *)(i + 4 * a2);
}

std::__wrap_iter<unsigned int *>::iterator_type TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::add_input(std::vector<unsigned int> *this, std::vector<unsigned int>::value_type a2, std::vector<unsigned int>::size_type __n)
{
  int v3 = __n;
  __double x = a2;
  v5.__i_ = &this->__begin_[LODWORD(this[1].__begin_)];
  std::__wrap_iter<unsigned int *>::iterator_type result = std::vector<unsigned int>::insert(this, v5, __n, &__x).__i_;
  LODWORD(this[1].__begin_) += v3;
  return result;
}

std::__wrap_iter<unsigned int *>::iterator_type TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::add_unmapped_inputs(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  unsigned int v2 = __n;
  __double x = -1;
  v4.__i_ = &this->__begin_[LODWORD(this[1].__begin_)];
  std::__wrap_iter<unsigned int *>::iterator_type result = std::vector<unsigned int>::insert(this, v4, v2, &__x).__i_;
  LODWORD(this[1].__begin_) += v2;
  return result;
}

void *TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::delete_from_input(void *this)
{
  uint64_t v1 = this;
  unsigned int v2 = *((_DWORD *)this + 6) - 1;
  *((_DWORD *)this + 6) = v2;
  uint64_t v3 = this[1];
  uint64_t v4 = *this + 4 * v2;
  uint64_t v5 = v3 - (v4 + 4);
  if (v3 != v4 + 4) {
    this = memmove((void *)(*this + 4 * v2), (const void *)(v4 + 4), v3 - (v4 + 4));
  }
  v1[1] = v4 + v5;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::set_input_index(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::clear(uint64_t this)
{
  *(void *)(this + 8) = *(void *)this;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

unint64_t TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::index_of_first_input_from_touch(char **this)
{
  uint64_t v1 = *this;
  uint64_t v2 = *((unsigned int *)this + 6);
  if (v2)
  {
    uint64_t v3 = 4 * v2;
    uint64_t v4 = *this;
    uint64_t v5 = &v1[4 * v2];
    while (*(_DWORD *)v4 == -1)
    {
      v4 += 4;
      v3 -= 4;
      if (!v3)
      {
        uint64_t v4 = v5;
        return (unint64_t)(v4 - v1) >> 2;
      }
    }
  }
  else
  {
    uint64_t v4 = *this;
  }
  return (unint64_t)(v4 - v1) >> 2;
}

void TI::Favonius::FavoniusStrokeBuildManager::FavoniusStrokeBuildManager(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F3F76420;
  uint64_t v2 = operator new(0x28uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_1F3F76678;
  v2[3] = &unk_1F3F796E0;
  v2[4] = 0;
  *((void *)this + 3) = v2 + 3;
  *((void *)this + 4) = v2;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 82) = 0u;
  *(_DWORD *)((char *)this + 98) = 16;
  *((unsigned char *)this + 102) = 0;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 112) = 0;
  *((_DWORD *)this + 32) = 0x100000;
  *((_WORD *)this + 66) = 0;
  *((unsigned char *)this + 134) = 0;
  *((void *)this + 17) = 0;
  *((unsigned char *)this + 144) = 0;
  *((_DWORD *)this + 40) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 48) = 0;
  *((void *)this + 23) = 0;
  *((_WORD *)this + 104) = 256;
  *((unsigned char *)this + 210) = 1;
  *((unsigned char *)this + 212) = 1;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 35) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 288));
  language_modeling::v1::LinguisticContext::LinguisticContext((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 296));
  *((unsigned char *)this + 332) = 0;
  *((unsigned char *)this + 336) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = 0;
  *(_DWORD *)((char *)this + 327) = 0;
  *((_DWORD *)this + 86) = 4;
  *((void *)this + 46) = 0;
  *((_OWORD *)this + 22) = xmmword_1E4155EF8;
  *((void *)this + 49) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 376) = xmmword_1E4155F10;
  *((void *)this + 52) = 0;
  *((_OWORD *)this + 25) = xmmword_1E4155F28;
  *((_DWORD *)this + 106) = 1056964608;
  *((void *)this + 54) = 0x200000001;
  *((unsigned char *)this + 440) = 1;
  *((_DWORD *)this + 111) = 3;
  *(_DWORD *)((char *)this + 495) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_DWORD *)this + 126) = 0x100000;
  *((_WORD *)this + 254) = 0;
  *((unsigned char *)this + 510) = 0;
  *((void *)this + 64) = 0;
  *((unsigned char *)this + 520) = 0;
  *((_DWORD *)this + 134) = 1050253722;
  *((unsigned char *)this + 680) = 1;
  *((_OWORD *)this + 34) = xmmword_1E4154D10;
  *((_OWORD *)this + 35) = xmmword_1E4154C80;
  *((_OWORD *)this + 36) = xmmword_1E4154C90;
  *((_OWORD *)this + 37) = xmmword_1E4154CA0;
  *((_OWORD *)this + 40) = xmmword_1E4154CD0;
  *((_OWORD *)this + 41) = xmmword_1E4154CE0;
  *((_OWORD *)this + 38) = xmmword_1E4154CB0;
  *((_OWORD *)this + 39) = xmmword_1E4154CC0;
  *((void *)this + 84) = 0x401F404C05921038;
  *((unsigned char *)this + 760) = 0;
  *((unsigned char *)this + 768) = 0;
  *((void *)this + 99) = 0;
  *((void *)this + 98) = 0;
  *((unsigned char *)this + 736) = 0;
  *((_OWORD *)this + 43) = xmmword_1E4154CF0;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((void *)this + 97) = (char *)this + 784;
  *((_DWORD *)this + 225) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((void *)this + 113) = 6;
  *((void *)this + 114) = 8;
  *((unsigned char *)this + 920) = 0;
  *((unsigned char *)this + 984) = 0;
  operator new();
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  if (TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::onceToken != -1) {
    dispatch_once(&TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::onceToken, &__block_literal_global_19_12297);
  }
  return TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::__queue;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::is_exact_typed_string_lm_ranking_enabled(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  if (result) {
    return *((unsigned char *)this + 212) != 0;
  }
  return result;
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::areStringsSortKeyEquivalent(TI::Favonius::FavoniusStrokeBuildManager *this, _LXLexicon *a2, const KB::String *a3, const KB::String *a4)
{
  uint64_t v4 = *(void *)(*((void *)this + 2) + 16);
  atomic_fetch_add((atomic_uint *volatile)v4, 1u);
  BOOL v5 = KB::CollatorWrapper::sortkey_compare_strings((KB::CollatorWrapper **)(*(void *)(v4 + 8) + 72), a2, a3, a4) == 0;
  WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v4);
  return v5;
}

float TI::Favonius::FavoniusStrokeBuildManager::favonius_language_weight(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t v1 = &TI::Favonius::SearchParameters::k_linguistic_context_power;
  if (*((unsigned char *)this + 336))
  {
    float v2 = *((float *)this + 83);
    if (v2 <= 1.0 && v2 >= 0.0) {
      uint64_t v1 = (int *)((char *)this + 332);
    }
  }
  return *(float *)v1;
}

void TI::CP::TIPathRecognizerEnsemble::key_layout_did_update(TI::Favonius::KeyboardLayout **this)
{
  double v2 = TI::Favonius::KeyboardLayout::median_key_half_width(this[1]);
  *((double *)this + 13) = v2;
  *((double *)this + 14) = v2 * 6.0;
  for (uint64_t i = this[4]; i; uint64_t i = *(TI::Favonius::KeyboardLayout **)i)
  {
    int v4 = *((_DWORD *)i + 4);
    if (!v4 || v4 == 1 && *((_DWORD *)this + 20) == -1)
    {
      BOOL v5 = (void *)*((void *)i + 3);
      long long v6 = (atomic_uint *)this[1];
      if (v6)
      {
        atomic_fetch_add(v6, 1u);
        TI::CP::TIPathRecognizerInterface::set_key_layout(v5, v6);
        WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v6);
      }
      else
      {
        TI::CP::TIPathRecognizerInterface::set_key_layout(v5, 0);
      }
    }
  }
}

uint64_t TI::CP::TIPathRecognizerEnsemble::remove_shapes_older_than(TI::CP::TIPathRecognizerEnsemble *this, double a2)
{
  double v2 = (uint64_t **)*((void *)this + 4);
  if (!v2) {
    return 1;
  }
  LODWORD(v4) = 1;
  do
  {
    uint64_t v4 = v4 & (*(unsigned int (**)(uint64_t *, double))(*v2[3] + 144))(v2[3], a2);
    double v2 = (uint64_t **)*v2;
  }
  while (v2);
  return v4;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::usage_count(TI::CP::TIPathRecognizerEnsemble *this)
{
  return *((unsigned int *)this + 150);
}

uint64_t TI::CP::TIPathRecognizerEnsemble::set_input_stem(uint64_t this, const KB::String *a2)
{
  for (uint64_t i = *(uint64_t ***)(this + 32); i; uint64_t i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *, const KB::String *))(*i[3] + 128))(i[3], a2);
  return this;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::set_context(uint64_t this, const KB::LanguageModelContext *a2)
{
  for (uint64_t i = *(uint64_t ***)(this + 32); i; uint64_t i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *, const KB::LanguageModelContext *))(*i[3] + 120))(i[3], a2);
  return this;
}

void TI::CP::TIPathRecognizerEnsemble::set_candidate_refinery(uint64_t a1, uint64_t *a2)
{
  for (uint64_t i = *(void **)(a1 + 32); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[3];
    BOOL v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v6 = *a2;
    uint64_t v7 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 112))(v4, &v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v7);
    }
  }
}

uint64_t TI::CP::TIPathRecognizerEnsemble::store_shapes(uint64_t this)
{
  for (uint64_t i = *(uint64_t ***)(this + 32); i; uint64_t i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *))(*i[3] + 104))(i[3]);
  return this;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::remove_text_usage(uint64_t this, const KB::String *a2)
{
  for (uint64_t i = *(uint64_t ***)(this + 32); i; uint64_t i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *, const KB::String *))(*i[3] + 96))(i[3], a2);
  return this;
}

void TI::CP::TIPathRecognizerEnsemble::text_accepted_from_UI(TI::CP::TIPathRecognizerEnsemble *this, const KB::String *a2, const KB::String *a3, uint64_t a4, uint64_t a5)
{
  for (uint64_t i = (uint64_t **)*((void *)this + 4); i; uint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, const KB::String *, const KB::String *, uint64_t, uint64_t))(*i[3] + 88))(i[3], a2, a3, a4, a5);
  unsigned int v11 = *((unsigned __int16 *)a2 + 2);
  if (!*((_WORD *)a2 + 2))
  {
    KB::String::compute_length((unsigned __int16 *)a2);
    unsigned int v11 = *((unsigned __int16 *)a2 + 2);
  }
  if (v11 > 2
    || (uint64_t v12 = *((void *)this + 8)) != 0
    && (*(double (**)(uint64_t, const KB::String *, const KB::String *))(*(void *)v12 + 72))(v12, a2, a3) > *((double *)this + 14))
  {
    ++*((_DWORD *)this + 150);
  }

  TI::CP::TIPathRecognizerEnsemble::load_ml_source_if_needed(this);
}

void TI::CP::TIPathRecognizerEnsemble::load_ml_source_if_needed(TI::CP::TIPathRecognizerEnsemble *this)
{
  if (std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>((void *)this + 2, 1))
  {
    return;
  }
  if ((*((_DWORD *)this + 55) & 2) == 0) {
    return;
  }
  int v2 = *((_DWORD *)this + 55) & 5;
  if (v2)
  {
    if (*((_DWORD *)this + 150) < *((_DWORD *)this + 53)) {
      return;
    }
  }
  if (!*((unsigned char *)this + 216))
  {
    uint64_t v3 = *((void *)this + 1);
LABEL_11:
    TI::CP::TIPathRecognizerEnsemble::update_ml_supports_language_layout_if_needed((uint64_t)this, (uint64_t)this + 224, (const KB::String *)(v3 + 208));
    goto LABEL_12;
  }
  if (!v2 || !*((void *)this + 5))
  {
    uint64_t v3 = *((void *)this + 1);
    if (v3) {
      goto LABEL_11;
    }
  }
LABEL_12:
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 632);
  if ((v4 & 1) != 0
    || (keyExistsAndHasValidFormat[0] = 0,
        int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"kbForceCPMLLan", @"com.apple.keyboard", keyExistsAndHasValidFormat), keyExistsAndHasValidFormat[0])&& AppBooleanValue)
  {
    uint64_t v6 = (std::__shared_weak_count *)operator new(0x138uLL);
    uint64_t v7 = v6;
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F76A20;
    uint64_t v8 = &v6[1].__vftable;
    int v9 = (unsigned int *)*((void *)this + 60);
    uint64_t v13 = v9;
    if (v9) {
      atomic_fetch_add((atomic_uint *volatile)v9 + 2, 1u);
    }
    keyExistsAndHasValidFormat[0] = 0;
    keyExistsAndHasValidFormat[24] = 0;
    TI::TIInputRecognizer::TIInputRecognizer((uint64_t)&v6[1], 0, (uint64_t *)&v13, (long long *)this + 14, (long long *)keyExistsAndHasValidFormat);
    if (v13)
    {
      unsigned int v10 = atomic_load(v13 + 2);
      if (v10 == 1) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
      }
    }
    v11[0] = v8;
    v11[1] = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    TI::CP::TIPathRecognizerEnsemble::add_recognizer((uint64_t)this, v11);
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
    TI::CP::TIPathRecognizerEnsemble::normalize_weights(this);
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  }
}

uint64_t TI::CP::TIPathRecognizerEnsemble::update_ml_supports_language_layout_if_needed(uint64_t result, uint64_t a2, const KB::String *a3)
{
  uint64_t v3 = (unsigned __int8 *)(result + 632);
  if (!*(unsigned char *)(result + 216)) {
    goto LABEL_5;
  }
  unsigned __int8 v4 = atomic_load(v3);
  if ((v4 & 1) == 0)
  {
    BOOL v5 = (unsigned __int8 *)(result + 633);
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(result + 633));
    if ((v6 & 1) == 0)
    {
      uint64_t result = TI::TIInputRecognizer::is_language_and_layout_supported(a2, a3);
      atomic_store(result, v3);
      uint64_t v3 = v5;
LABEL_5:
      atomic_store(1u, v3);
    }
  }
  return result;
}

void TI::CP::TIPathRecognizerEnsemble::add_recognizer(uint64_t a1, void *a2)
{
  BOOL v5 = (uint64_t *)(a1 + 16);
  int v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  int v7 = v6;
  unint64_t v8 = v6;
  unint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v6;
      if (v9 <= v6) {
        unint64_t v2 = v6 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v6;
    }
    unsigned int v11 = *(void ***)(*v5 + 8 * v2);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = *(void **)i)
      {
        unint64_t v13 = *((void *)i + 1);
        if (v13 == v6)
        {
          if (*((_DWORD *)i + 4) == v6) {
            goto LABEL_40;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  *((void *)i + 1) = v8;
  *((_DWORD *)i + 4) = v7;
  *((void *)i + 3) = 0;
  *((void *)i + 4) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v15 = *(float *)(a1 + 48);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v5, v19);
    unint64_t v9 = *(void *)(a1 + 24);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v2 = v8 % v9;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *v5;
  uint64_t v21 = *(void **)(*v5 + 8 * v2);
  if (v21)
  {
    *(void *)uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  uint64_t v22 = *(void *)(a1 + 32);
  *(void *)uint64_t i = v22;
  *(void *)(a1 + 32) = i;
  *(void *)(v20 + 8 * v2) = a1 + 32;
  if (v22)
  {
    unint64_t v23 = *(void *)(v22 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*v5 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 40);
LABEL_40:
  uint64_t v25 = *a2;
  uint64_t v24 = a2[1];
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v26 = (std::__shared_weak_count *)*((void *)i + 4);
  *((void *)i + 3) = v25;
  *((void *)i + 4) = v24;
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v26);
  }
  long long v27 = *(atomic_uint **)(a1 + 8);
  if (v27)
  {
    long long v28 = (void *)*a2;
    atomic_fetch_add(v27, 1u);
    TI::CP::TIPathRecognizerInterface::set_key_layout(v28, v27);
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v27);
  }
}

uint64_t *TI::CP::TIPathRecognizerEnsemble::normalize_weights(TI::CP::TIPathRecognizerEnsemble *this)
{
  unint64_t v2 = (void *)((char *)this + 16);
  if (std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>((void *)this + 2, 0))
  {
    double v3 = *((double *)this + 16) + 0.0;
  }
  else
  {
    double v3 = 0.0;
  }
  if (std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>(v2, 1))
  {
    double v3 = v3 + *((double *)this + 17);
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>(v2, 2);
  if (result) {
    double v3 = v3 + *((double *)this + 18);
  }
  if (v3 > 0.0)
  {
    for (uint64_t i = 0; i != 24; i += 8)
      *(double *)((char *)this + i + 128) = *(double *)((char *)this + i + 128) / v3;
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<TI::TIInputRecognizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::TIInputRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F76A20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::TIInputRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F76A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TI::CP::TIPathRecognizerEnsemble::generate_candidates(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!TI::CP::TIPathRecognizerInterface::should_generate_candidates((TI::CP::TIPathRecognizerInterface *)a1)) {
    return;
  }
  *(_OWORD *)std::string __p = 0u;
  long long v46 = 0u;
  float v47 = 1.0;
  int v7 = *(_DWORD *)(a1 + 120);
  if ((v7 & 0x10) != 0)
  {
    unint64_t v9 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>((void *)(a1 + 16), *(_DWORD *)(a1 + 204));
    if (!v9)
    {
      double v11 = -1.0;
      goto LABEL_59;
    }
    int v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint8x8_t v10 = (TI::ConfidenceModel *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v9[3] + 80))(v9[3], &v38, a3);
    double v11 = TI::ConfidenceModel::compute_confidence1(v10, (KB::CandidateCollection *)&v38, 2u);
    int v12 = *(_DWORD *)(a1 + 204);
    unint64_t v13 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        unint64_t v3 = v12;
        if (__p[1] <= (void *)v12) {
          unint64_t v3 = v12 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v3 = ((unint64_t)__p[1] - 1) & v12;
      }
      uint64_t v22 = (void **)*((void *)__p[0] + v3);
      if (v22)
      {
        unint64_t v23 = (char *)*v22;
        if (*v22)
        {
          do
          {
            unint64_t v24 = *((void *)v23 + 1);
            if (v24 == v12)
            {
              if (*((_DWORD *)v23 + 4) == v12) {
                goto LABEL_58;
              }
            }
            else
            {
              if (v14.u32[0] > 1uLL)
              {
                if ((void *)v24 >= __p[1]) {
                  v24 %= (unint64_t)__p[1];
                }
              }
              else
              {
                v24 &= (unint64_t)__p[1] - 1;
              }
              if (v24 != v3) {
                break;
              }
            }
            unint64_t v23 = *(char **)v23;
          }
          while (v23);
        }
      }
    }
    unint64_t v23 = (char *)operator new(0x80uLL);
    v48[1] = (void **)&v46;
    *(void *)unint64_t v23 = 0;
    *((void *)v23 + 1) = v12;
    *((_DWORD *)v23 + 4) = v12;
    *((_DWORD *)v23 + 31) = 0;
    *(_OWORD *)(v23 + 24) = 0u;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *(_OWORD *)(v23 + 72) = 0u;
    *(_OWORD *)(v23 + 88) = 0u;
    *(_OWORD *)(v23 + 104) = 0u;
    char v49 = 1;
    float v25 = (float)(unint64_t)(*((void *)&v46 + 1) + 1);
    if (!v13 || (float)(v47 * (float)v13) < v25)
    {
      BOOL v26 = 1;
      if (v13 >= 3) {
        BOOL v26 = (v13 & (v13 - 1)) != 0;
      }
      unint64_t v27 = v26 | (2 * v13);
      unint64_t v28 = vcvtps_u32_f32(v25 / v47);
      if (v27 <= v28) {
        size_t v29 = v28;
      }
      else {
        size_t v29 = v27;
      }
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)__p, v29);
      unint64_t v13 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
      {
        if (__p[1] <= (void *)v12) {
          unint64_t v3 = v12 % (unint64_t)__p[1];
        }
        else {
          unint64_t v3 = v12;
        }
      }
      else
      {
        unint64_t v3 = ((unint64_t)__p[1] - 1) & v12;
      }
    }
    long long v30 = __p[0];
    uint64_t v31 = (void *)*((void *)__p[0] + v3);
    if (v31)
    {
      *(void *)unint64_t v23 = *v31;
    }
    else
    {
      *(void *)unint64_t v23 = v46;
      *(void *)&long long v46 = v23;
      v30[v3] = &v46;
      if (!*(void *)v23) {
        goto LABEL_57;
      }
      unint64_t v32 = *(void *)(*(void *)v23 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v32 >= v13) {
          v32 %= v13;
        }
      }
      else
      {
        v32 &= v13 - 1;
      }
      uint64_t v31 = (char *)__p[0] + 8 * v32;
    }
    *uint64_t v31 = v23;
LABEL_57:
    v48[0] = 0;
    ++*((void *)&v46 + 1);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>>>>::reset[abi:nn180100]((uint64_t)v48);
LABEL_58:
    KB::CandidateCollection::operator=((uint64_t)(v23 + 24), (uint64_t)&v38);
    v48[0] = (void **)&v42 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v41;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v39 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v38;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
LABEL_59:
    if (v11 >= *(float *)(a1 + 200)) {
      goto LABEL_67;
    }
    int v44 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    for (uint64_t i = *(uint64_t **)(a1 + 32); i; uint64_t i = (uint64_t *)*i)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)i[3] + 16))(i[3]) != *(_DWORD *)(a1 + 204)
        && (*((_DWORD *)i + 4) != 2 || *(unsigned char *)(a1 + 56)))
      {
        (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)i[3] + 80))(i[3], &v38, a3);
        LODWORD(v48[0]) = (*(uint64_t (**)(uint64_t))(*(void *)i[3] + 16))(i[3]);
        __int16 v34 = std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType&&>,std::tuple<>>((uint64_t)__p, (int)v48[0], v48);
        KB::CandidateCollection::operator=((uint64_t)(v34 + 24), (uint64_t)&v38);
      }
    }
    TI::CP::TIPathRecognizerEnsemble::combine_candidates_from_sources(a1, (uint64_t)__p, a2, *(_DWORD *)(a1 + 120), 0);
    v48[0] = (void **)&v42 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v41;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v39 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v38;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    goto LABEL_69;
  }
  if ((v7 & 0x20) != 0
    && TI::CP::TIPathRecognizerEnsemble::can_use_preferred_source((TI::CP::TIPathRecognizerEnsemble *)a1))
  {
    unint64_t v8 = std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType const&>,std::tuple<>>(a1 + 16, *(_DWORD *)(a1 + 208), (_DWORD *)(a1 + 208));
    (*(void (**)(void, uint64_t *, uint64_t))(*(void *)v8[3] + 80))(v8[3], a2, a3);
    KB::CandidateCollection::normalize_scores((float32x2_t **)a2);
    goto LABEL_69;
  }
  float v15 = *(uint64_t **)(a1 + 32);
  if (!v15) {
    goto LABEL_67;
  }
  do
  {
    int v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    int v16 = *((_DWORD *)v15 + 4);
    if (v16 == 1)
    {
      unsigned __int8 v17 = atomic_load((unsigned __int8 *)(a1 + 632));
      if ((v17 & 1) == 0) {
        goto LABEL_18;
      }
    }
    else if (v16 == 2 && !*(unsigned char *)(a1 + 56))
    {
      goto LABEL_18;
    }
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v15[3] + 80))(v15[3], &v38, a3);
    if (*((void *)&v38 + 1) != (void)v38)
    {
      LODWORD(v48[0]) = (*(uint64_t (**)(uint64_t))(*(void *)v15[3] + 16))(v15[3]);
      unint64_t v18 = std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType&&>,std::tuple<>>((uint64_t)__p, (int)v48[0], v48);
      KB::CandidateCollection::operator=((uint64_t)(v18 + 24), (uint64_t)&v38);
    }
LABEL_18:
    v48[0] = (void **)&v42 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v41;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v39 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v38;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    float v15 = (uint64_t *)*v15;
  }
  while (v15);
  if (*((void *)&v46 + 1) > 1uLL)
  {
    int v19 = *(_DWORD *)(a1 + 120);
    uint64_t v20 = a1;
    uint64_t v21 = a2;
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  int v19 = 0;
LABEL_68:
  TI::CP::TIPathRecognizerEnsemble::combine_candidates_from_sources(v20, (uint64_t)__p, v21, v19, 0);
LABEL_69:
  char v35 = (void **)v46;
  if ((void)v46)
  {
    do
    {
      uint64_t v36 = (void **)*v35;
      std::__destroy_at[abi:nn180100]<std::pair<TI::CP::TIPathRecognizerType const,KB::CandidateCollection>,0>(v35 + 2);
      operator delete(v35);
      char v35 = v36;
    }
    while (v36);
  }
  uint64_t v37 = __p[0];
  __p[0] = 0;
  if (v37) {
    operator delete(v37);
  }
}

void TI::CP::TIPathRecognizerEnsemble::combine_candidates_from_sources(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v246 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    if ((a4 & 2) == 0)
    {
      if ((a4 & 8) == 0)
      {
        long long v235 = 0uLL;
        long long v236 = 0uLL;
        float v237 = 1.0;
        *(_OWORD *)uint64_t v232 = 0uLL;
        *(_OWORD *)uint64_t v233 = 0uLL;
        float v234 = 1.0;
        int v7 = *(float32x2_t **)(a2 + 16);
        if (v7)
        {
          char v224 = 0;
          unint64_t v8 = (TI::ConfidenceModel *)(a1 + 604);
          unint64_t v9 = 126;
          do
          {
            uint8x8_t v10 = (uint64_t *)v7[3];
            double v11 = (KB::Candidate *)v7[4];
            int v12 = (uint64_t *)&v7[3];
            unint64_t v13 = 126 - 2 * __clz(0x1CAC083126E978D5 * ((v11 - (KB::Candidate *)v10) >> 3));
            if (v11 == (KB::Candidate *)v10) {
              uint64_t v14 = 0;
            }
            else {
              uint64_t v14 = v13;
            }
            std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(v10, v11, v14, 1);
            uint64_t v15 = *v12;
            float32x2_t v16 = v7[4];
            if (*v12 != *(void *)&v16)
            {
              float v17 = *(double *)(a1 + 8 * v7[2].u32[0] + 152);
              do
              {
                *(float32x4_t *)(v15 + 744) = vmulq_n_f32(*(float32x4_t *)(v15 + 744), v17);
                v15 += 1000;
              }
              while (v15 != *(void *)&v16);
            }
            KB::CandidateCollection::normalize_scores((float32x2_t **)&v7[3]);
            LODWORD(v243) = 0x7FFFFFFF;
            if (KB::CandidateCollection::contains_secondary_language_candidates((KB::CandidateCollection *)&v7[3], (int *)&v243, 6u))
            {
              TI::ConfidenceModel::update_confidence_for_candidates(v8, (KB::CandidateCollection *)&v7[3]);
              v224 |= (int)v243 < 4;
            }
            int v7 = (float32x2_t *)*v7;
          }
          while (v7);
          unint64_t v18 = *(uint64_t **)(a2 + 16);
          if (v18)
          {
            uint64_t v223 = *(unsigned int *)(a2 + 24);
            char v227 = 1;
            do
            {
              uint64_t v19 = a1 + 8 * *((unsigned int *)v18 + 4);
              double v20 = *(double *)(v19 + 128);
              uint64_t v21 = *(void *)(a1 + 480);
              if (v21)
              {
                double v22 = *(double *)(v19 + 176);
                if (*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21))
                {
                  int v23 = *(unsigned __int8 *)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 480)
                                                                                          + 48))(*(void *)(a1 + 480))
                                           + 65);
                  double v24 = (v224 & 1) != 0 ? v22 : v20;
                  if (v23) {
                    double v20 = v24;
                  }
                }
              }
              long long v243 = 0u;
              long long v244 = 0u;
              LODWORD(v245) = 1065353216;
              uint64_t v25 = v18[3];
              if (v18[4] != v25)
              {
                if (v223 == 1) {
                  double v26 = 1.0;
                }
                else {
                  double v26 = v20;
                }
                float v27 = v26;
                float v28 = logf(v27);
                unint64_t v29 = 0;
                unint64_t v30 = 0;
                unint64_t v226 = v18;
                while (1)
                {
                  uint64_t v31 = (const KB::Candidate *)(v25 + 1000 * v29);
                  TI::CP::TIPathRecognizerEnsemble::dictionary_key_for_candidate(v31, (uint64_t)&v240);
                  if (std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::find<KB::String>(v243, *((unint64_t *)&v243 + 1), &v240))
                  {
                    uint64_t v32 = *(void *)v31;
                    if (*(void *)v31)
                    {
                      uint64_t v33 = 240 * v32;
                      uint64_t v34 = *((void *)v31 + 1);
                      while ((*(unsigned char *)(v34 + 106) & 1) == 0)
                      {
                        v34 += 240;
                        v33 -= 240;
                        if (!v33) {
                          goto LABEL_160;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v34 = *((void *)v31 + 1);
                    }
                    if (v34 == *((void *)v31 + 1) + 240 * v32) {
                      goto LABEL_160;
                    }
                  }
                  int v229 = v30;
                  if (v227) {
                    break;
                  }
                  char v35 = (float *)std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::find<KB::String>(v235, *((unint64_t *)&v235 + 1), &v240);
                  if (!v35) {
                    break;
                  }
                  uint64_t v36 = v35;
                  float v37 = v35[198];
                  float v38 = v35[199];
                  uint64_t v39 = v25 + 1000 * v29;
                  CFDictionaryRef v40 = *(const __CFDictionary **)(v39 + 984);
                  if (v40)
                  {
                    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v39 + 984));
                    if (Count >= 1)
                    {
                      CFIndex v42 = Count;
                      if ((unint64_t)Count >> 61) {
                        goto LABEL_410;
                      }
                      unint64_t v9 = (unint64_t)(v36 + 12);
                      long long v43 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(Count);
                      bzero(v43, 8 * v42);
                      int v44 = operator new(8 * v42);
                      bzero(v44, 8 * v42);
                      CFDictionaryGetKeysAndValues(v40, (const void **)v43, (const void **)v44);
                      for (uint64_t i = 0; i != v42; ++i)
                        KB::Candidate::add_sources_info((KB::Candidate *)v9, *((const __CFString **)v43 + i), *((const __CFDictionary **)v44 + i));
                      operator delete(v44);
                      unint64_t v18 = v226;
                      if (v43) {
                        operator delete(v43);
                      }
                    }
                  }
                  uint64_t v46 = v25 + 1000 * v29;
                  float v47 = v28 + *(float *)(v46 + 744);
                  if (v37 == -INFINITY)
                  {
                    LODWORD(v30) = v229;
                  }
                  else
                  {
                    LODWORD(v30) = v229;
                    if (v47 == -INFINITY)
                    {
                      float v47 = v37;
                    }
                    else
                    {
                      if (v37 >= v47) {
                        float v68 = v37;
                      }
                      else {
                        float v68 = v28 + *(float *)(v46 + 744);
                      }
                      if (v37 >= v47) {
                        float v69 = v28 + *(float *)(v46 + 744);
                      }
                      else {
                        float v69 = v37;
                      }
                      float v70 = expf(v69 - v68);
                      float v47 = v68 + log1pf(v70);
                    }
                  }
                  int64x2_t v66 = (float *)(v46 + 744);
                  uint64_t v71 = v25 + 1000 * v29;
                  float v67 = v28 + *(float *)(v71 + 748);
                  if (v38 != -INFINITY)
                  {
                    if (v67 == -INFINITY)
                    {
                      float v67 = v38;
                    }
                    else
                    {
                      if (v38 >= v67) {
                        float v72 = v38;
                      }
                      else {
                        float v72 = v28 + *(float *)(v71 + 748);
                      }
                      if (v38 >= v67) {
                        float v73 = v28 + *(float *)(v71 + 748);
                      }
                      else {
                        float v73 = v38;
                      }
                      float v74 = expf(v73 - v72);
                      float v67 = v72 + log1pf(v74);
                    }
                  }
LABEL_110:
                  double valuePtr = COERCE_DOUBLE(&v240);
                  unint64_t v75 = std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>((uint64_t)&v235, &v240, (const KB::String **)&valuePtr);
                  *((float *)v75 + 198) = v47;
                  uint64_t v76 = v75[100];
                  int v77 = *((_DWORD *)v75 + 202);
                  double valuePtr = *(double *)((char *)v75 + 812);
                  LODWORD(v239) = *((_DWORD *)v75 + 205);
                  if (v26 == 1.0) {
                    int v77 = *(_DWORD *)(v25 + 1000 * v29 + 760);
                  }
                  uint64_t v78 = *(void *)v31;
                  if (*(void *)v31)
                  {
                    uint64_t v79 = 240 * v78;
                    uint64_t v80 = *((void *)v31 + 1);
                    while ((*(unsigned char *)(v80 + 106) & 1) == 0)
                    {
                      v80 += 240;
                      v79 -= 240;
                      if (!v79) {
                        goto LABEL_120;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v80 = *((void *)v31 + 1);
                  }
                  if (v80 != *((void *)v31 + 1) + 240 * v78) {
                    *(_DWORD *)(v75[7] + 104) |= 0x10000u;
                  }
LABEL_120:
                  *((float *)v75 + 199) = v67;
                  v75[100] = v76;
                  *((_DWORD *)v75 + 202) = v77;
                  *(double *)((char *)v75 + 812) = valuePtr;
                  *((_DWORD *)v75 + 205) = v239;
                  __p[0] = &v240;
                  unint64_t v81 = std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>((uint64_t)&v243, &v240, (const KB::String **)__p);
                  KB::Candidate::operator=((uint64_t)(v81 + 6), v25 + 1000 * v29);
                  if (a5 < 1) {
                    goto LABEL_160;
                  }
                  float v82 = expf(*v66);
                  __p[0] = &v240;
                  uint64_t v83 = std::__hash_table<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>((uint64_t *)v232, &v240, (const KB::String **)__p);
                  uint64_t v84 = v83 + 6;
                  unint64_t v85 = *((int *)v18 + 4);
                  unint64_t v86 = v83[7];
                  if (v86)
                  {
                    uint8x8_t v87 = (uint8x8_t)vcnt_s8((int8x8_t)v86);
                    v87.i16[0] = vaddlv_u8(v87);
                    if (v87.u32[0] > 1uLL)
                    {
                      unint64_t v9 = *((int *)v18 + 4);
                      if (v86 <= v85) {
                        unint64_t v9 = v85 % v86;
                      }
                    }
                    else
                    {
                      unint64_t v9 = (v86 - 1) & v85;
                    }
                    long long v88 = *(void ***)(*v84 + 8 * v9);
                    if (v88)
                    {
                      long long v89 = *v88;
                      if (*v88)
                      {
                        do
                        {
                          unint64_t v90 = v89[1];
                          if (v90 == v85)
                          {
                            if (*((_DWORD *)v89 + 4) == v85) {
                              goto LABEL_159;
                            }
                          }
                          else
                          {
                            if (v87.u32[0] > 1uLL)
                            {
                              if (v90 >= v86) {
                                v90 %= v86;
                              }
                            }
                            else
                            {
                              v90 &= v86 - 1;
                            }
                            if (v90 != v9) {
                              break;
                            }
                          }
                          long long v89 = (void *)*v89;
                        }
                        while (v89);
                      }
                    }
                  }
                  long long v89 = operator new(0x20uLL);
                  void *v89 = 0;
                  v89[1] = v85;
                  *((_DWORD *)v89 + 4) = *((_DWORD *)v18 + 4);
                  *(void *)((char *)v89 + 20) = 0;
                  float v91 = (float)(unint64_t)(v83[9] + 1);
                  float v92 = *((float *)v83 + 20);
                  if (!v86 || (float)(v92 * (float)v86) < v91)
                  {
                    BOOL v93 = (v86 & (v86 - 1)) != 0;
                    if (v86 < 3) {
                      BOOL v93 = 1;
                    }
                    unint64_t v94 = v93 | (2 * v86);
                    unint64_t v95 = vcvtps_u32_f32(v91 / v92);
                    if (v94 <= v95) {
                      size_t v96 = v95;
                    }
                    else {
                      size_t v96 = v94;
                    }
                    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v84, v96);
                    unint64_t v86 = v83[7];
                    if ((v86 & (v86 - 1)) != 0)
                    {
                      if (v86 <= v85) {
                        unint64_t v9 = v85 % v86;
                      }
                      else {
                        unint64_t v9 = v85;
                      }
                    }
                    else
                    {
                      unint64_t v9 = (v86 - 1) & v85;
                    }
                  }
                  uint64_t v97 = *v84;
                  uint64_t v98 = *(void **)(*v84 + 8 * v9);
                  if (v98)
                  {
                    void *v89 = *v98;
                  }
                  else
                  {
                    void *v89 = v83[8];
                    v83[8] = v89;
                    *(void *)(v97 + 8 * v9) = v83 + 8;
                    if (!*v89) {
                      goto LABEL_158;
                    }
                    unint64_t v99 = *(void *)(*v89 + 8);
                    if ((v86 & (v86 - 1)) != 0)
                    {
                      if (v99 >= v86) {
                        v99 %= v86;
                      }
                    }
                    else
                    {
                      v99 &= v86 - 1;
                    }
                    uint64_t v98 = (void *)(*v84 + 8 * v99);
                  }
                  void *v98 = v89;
LABEL_158:
                  ++v83[9];
LABEL_159:
                  *((_DWORD *)v89 + 5) = v30;
                  *((float *)v89 + 6) = v82;
LABEL_160:
                  if (v241) {
                    BOOL v100 = BYTE6(v240) == 1;
                  }
                  else {
                    BOOL v100 = 0;
                  }
                  if (v100) {
                    free(v241);
                  }
                  unint64_t v29 = (v30 + 1);
                  uint64_t v25 = v18[3];
                  unint64_t v30 = v29;
                  if (0x1CAC083126E978D5 * ((v18[4] - v25) >> 3) <= v29) {
                    goto LABEL_167;
                  }
                }
                if (v241) {
                  uint64_t v48 = (KB::String *)v241;
                }
                else {
                  uint64_t v48 = (KB::String *)v242;
                }
                unsigned int v49 = KB::String::hash(v48, (const char *)(unsigned __int16)v240);
                unint64_t v9 = v49;
                unint64_t v50 = *((void *)&v235 + 1);
                if (*((void *)&v235 + 1))
                {
                  uint8x8_t v51 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v235 + 8));
                  v51.i16[0] = vaddlv_u8(v51);
                  unint64_t v52 = v51.u32[0];
                  if (v51.u32[0] > 1uLL)
                  {
                    unint64_t v30 = v49;
                    if (*((void *)&v235 + 1) <= (unint64_t)v49) {
                      unint64_t v30 = (unint64_t)v49 % *((void *)&v235 + 1);
                    }
                  }
                  else
                  {
                    unint64_t v30 = (DWORD2(v235) - 1) & v49;
                  }
                  unint64_t v53 = *(uint64_t ***)(v235 + 8 * v30);
                  if (v53)
                  {
                    unint64_t v54 = (uint64_t **)*v53;
                    if (*v53)
                    {
                      do
                      {
                        unint64_t v55 = (unint64_t)v54[1];
                        if (v55 == v9)
                        {
                          if (v54 + 2 == (uint64_t **)&v240
                            || KB::String::equal((KB::String *)(v54 + 2), (const KB::String *)&v240, 1))
                          {
                            goto LABEL_92;
                          }
                        }
                        else
                        {
                          if (v52 > 1)
                          {
                            if (v55 >= v50) {
                              v55 %= v50;
                            }
                          }
                          else
                          {
                            v55 &= v50 - 1;
                          }
                          if (v55 != v30) {
                            break;
                          }
                        }
                        unint64_t v54 = (uint64_t **)*v54;
                      }
                      while (v54);
                    }
                  }
                }
                uint64_t v56 = operator new(0x418uLL);
                *uint64_t v56 = 0;
                v56[1] = v9;
                KB::String::String((KB::String *)(v56 + 2), (const KB::String *)&v240);
                KB::Candidate::Candidate((KB::Candidate *)(v56 + 6), (const KB::Candidate *)(v25 + 1000 * v29));
                float v57 = (float)(unint64_t)(*((void *)&v236 + 1) + 1);
                if (!v50 || (float)(v237 * (float)v50) < v57)
                {
                  BOOL v58 = (v50 & (v50 - 1)) != 0;
                  if (v50 < 3) {
                    BOOL v58 = 1;
                  }
                  unint64_t v59 = v58 | (2 * v50);
                  unint64_t v60 = vcvtps_u32_f32(v57 / v237);
                  if (v59 <= v60) {
                    size_t v61 = v60;
                  }
                  else {
                    size_t v61 = v59;
                  }
                  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v235, v61);
                  unint64_t v50 = *((void *)&v235 + 1);
                  if ((*((void *)&v235 + 1) & (*((void *)&v235 + 1) - 1)) != 0)
                  {
                    if (*((void *)&v235 + 1) <= v9) {
                      unint64_t v30 = v9 % *((void *)&v235 + 1);
                    }
                    else {
                      unint64_t v30 = v9;
                    }
                  }
                  else
                  {
                    unint64_t v30 = (DWORD2(v235) - 1) & v9;
                  }
                }
                uint64_t v62 = v235;
                uint64_t v63 = *(void **)(v235 + 8 * v30);
                if (v63)
                {
                  *uint64_t v56 = *v63;
                }
                else
                {
                  *uint64_t v56 = v236;
                  *(void *)&long long v236 = v56;
                  *(void *)(v62 + 8 * v30) = &v236;
                  if (!*v56) {
                    goto LABEL_91;
                  }
                  unint64_t v64 = *(void *)(*v56 + 8);
                  if ((v50 & (v50 - 1)) != 0)
                  {
                    if (v64 >= v50) {
                      v64 %= v50;
                    }
                  }
                  else
                  {
                    v64 &= v50 - 1;
                  }
                  uint64_t v63 = (void *)(v235 + 8 * v64);
                }
                void *v63 = v56;
LABEL_91:
                ++*((void *)&v236 + 1);
LABEL_92:
                uint64_t v65 = v25 + 1000 * v29;
                int64x2_t v66 = (float *)(v65 + 744);
                float v47 = v28 + *(float *)(v65 + 744);
                float v67 = v28 + *(float *)(v65 + 748);
                unint64_t v18 = v226;
                LODWORD(v30) = v229;
                goto LABEL_110;
              }
LABEL_167:
              std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::~__hash_table((uint64_t)&v243);
              char v227 = 0;
              unint64_t v18 = (uint64_t *)*v18;
            }
            while (v18);
            uint64_t v101 = (float *)v236;
            if ((void)v236)
            {
              CFAllocatorRef v102 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              do
              {
                TI::CP::TIPathRecognizerEnsemble::dictionary_key_for_candidate((const KB::Candidate *)(v101 + 12), (uint64_t)&v240);
                float v103 = v101[199];
                if (fabsf(v103) == INFINITY) {
                  float v104 = v101[200];
                }
                else {
                  float v104 = (float)(v101[198] - v103) / v101[202];
                }
                v101[200] = v104;
                v101[201] = 0.0;
                if (a5 < 1) {
                  goto LABEL_259;
                }
                unint64_t v105 = (KB::String *)(v241 ? v241 : v242);
                unsigned int v106 = KB::String::hash(v105, (const char *)(unsigned __int16)v240);
                unint64_t v107 = (unint64_t)v232[1];
                if (!v232[1]) {
                  goto LABEL_259;
                }
                uint64_t v108 = v106;
                uint8x8_t v109 = (uint8x8_t)vcnt_s8((int8x8_t)v232[1]);
                v109.i16[0] = vaddlv_u8(v109);
                unint64_t v110 = v109.u32[0];
                if (v109.u32[0] > 1uLL)
                {
                  unint64_t v111 = v106;
                  if (v232[1] <= (void *)v106) {
                    unint64_t v111 = v106 % (unint64_t)v232[1];
                  }
                }
                else
                {
                  unint64_t v111 = (LODWORD(v232[1]) - 1) & v106;
                }
                uint64_t v112 = (uint64_t **)*((void *)v232[0] + v111);
                if (!v112) {
                  goto LABEL_259;
                }
                unint64_t v113 = (uint64_t **)*v112;
                if (!*v112) {
                  goto LABEL_259;
                }
                while (1)
                {
                  unint64_t v114 = (unint64_t)v113[1];
                  if (v114 == v108) {
                    break;
                  }
                  if (v110 > 1)
                  {
                    if (v114 >= v107) {
                      v114 %= v107;
                    }
                  }
                  else
                  {
                    v114 &= v107 - 1;
                  }
                  if (v114 != v111) {
                    goto LABEL_259;
                  }
LABEL_193:
                  unint64_t v113 = (uint64_t **)*v113;
                  if (!v113) {
                    goto LABEL_259;
                  }
                }
                if (v113 + 2 != (uint64_t **)&v240
                  && !KB::String::equal((KB::String *)(v113 + 2), (const KB::String *)&v240, 1))
                {
                  goto LABEL_193;
                }
                double valuePtr = COERCE_DOUBLE(&v240);
                int v115 = std::__hash_table<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>((uint64_t *)v232, &v240, (const KB::String **)&valuePtr);
                long long v243 = 0u;
                long long v244 = 0u;
                LODWORD(v245) = *((_DWORD *)v115 + 20);
                std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v243, v115[7]);
                long long v116 = (uint64_t *)v115[8];
                if (v116)
                {
                  unint64_t v117 = *((void *)&v243 + 1);
                  do
                  {
                    unint64_t v118 = *((int *)v116 + 4);
                    if (v117)
                    {
                      uint8x8_t v119 = (uint8x8_t)vcnt_s8((int8x8_t)v117);
                      v119.i16[0] = vaddlv_u8(v119);
                      if (v119.u32[0] > 1uLL)
                      {
                        unint64_t v107 = *((int *)v116 + 4);
                        if (v117 <= v118) {
                          unint64_t v107 = v118 % v117;
                        }
                      }
                      else
                      {
                        unint64_t v107 = (v117 - 1) & v118;
                      }
                      int v120 = *(uint64_t ***)(v243 + 8 * v107);
                      if (v120)
                      {
                        for (uint64_t j = *v120; j; uint64_t j = (uint64_t *)*j)
                        {
                          unint64_t v122 = j[1];
                          if (v122 == v118)
                          {
                            if (*((_DWORD *)j + 4) == v118) {
                              goto LABEL_235;
                            }
                          }
                          else
                          {
                            if (v119.u32[0] > 1uLL)
                            {
                              if (v122 >= v117) {
                                v122 %= v117;
                              }
                            }
                            else
                            {
                              v122 &= v117 - 1;
                            }
                            if (v122 != v107) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    long long v123 = operator new(0x20uLL);
                    void *v123 = 0;
                    v123[1] = v118;
                    int v124 = *((_DWORD *)v116 + 6);
                    v123[2] = v116[2];
                    *((_DWORD *)v123 + 6) = v124;
                    float v125 = (float)(unint64_t)(*((void *)&v244 + 1) + 1);
                    if (!v117 || (float)(*(float *)&v245 * (float)v117) < v125)
                    {
                      BOOL v126 = (v117 & (v117 - 1)) != 0;
                      if (v117 < 3) {
                        BOOL v126 = 1;
                      }
                      unint64_t v127 = v126 | (2 * v117);
                      unint64_t v128 = vcvtps_u32_f32(v125 / *(float *)&v245);
                      if (v127 <= v128) {
                        size_t v129 = v128;
                      }
                      else {
                        size_t v129 = v127;
                      }
                      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v243, v129);
                      unint64_t v117 = *((void *)&v243 + 1);
                      if ((v117 & (v117 - 1)) != 0)
                      {
                        if (*((void *)&v243 + 1) <= v118) {
                          unint64_t v107 = v118 % *((void *)&v243 + 1);
                        }
                        else {
                          unint64_t v107 = v118;
                        }
                      }
                      else
                      {
                        unint64_t v107 = (*((void *)&v243 + 1) - 1) & v118;
                      }
                    }
                    uint64_t v130 = v243;
                    unint64_t v131 = *(void **)(v243 + 8 * v107);
                    if (v131)
                    {
                      void *v123 = *v131;
                    }
                    else
                    {
                      void *v123 = v244;
                      *(void *)&long long v244 = v123;
                      *(void *)(v130 + 8 * v107) = &v244;
                      if (!*v123) {
                        goto LABEL_234;
                      }
                      unint64_t v132 = *(void *)(*v123 + 8);
                      if ((v117 & (v117 - 1)) != 0)
                      {
                        if (v132 >= v117) {
                          v132 %= v117;
                        }
                      }
                      else
                      {
                        v132 &= v117 - 1;
                      }
                      unint64_t v131 = (void *)(v243 + 8 * v132);
                    }
                    void *v131 = v123;
LABEL_234:
                    ++*((void *)&v244 + 1);
LABEL_235:
                    long long v116 = (uint64_t *)*v116;
                  }
                  while (v116);
                }
                CFMutableStringRef Mutable = CFDictionaryCreateMutable(v102, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                for (unint64_t k = (uint64_t *)v244; k; unint64_t k = (uint64_t *)*k)
                {
                  char v135 = CFDictionaryCreateMutable(v102, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  LODWORD(v136) = *((_DWORD *)k + 5);
                  double valuePtr = (double)v136;
                  CFNumberRef v137 = CFNumberCreate(v102, kCFNumberDoubleType, &valuePtr);
                  CFDictionarySetValue(v135, @"cand_index", v137);
                  if (v137) {
                    CFRelease(v137);
                  }
                  double valuePtr = *((float *)k + 6);
                  CFNumberRef v138 = CFNumberCreate(v102, kCFNumberDoubleType, &valuePtr);
                  CFDictionarySetValue(v135, @"cand_omega", v138);
                  if (v138) {
                    CFRelease(v138);
                  }
                  std::string::basic_string[abi:nn180100]<0>(__p, off_1E6E2C730[*((int *)k + 4)]);
                  if (v231 >= 0) {
                    int v139 = __p;
                  }
                  else {
                    int v139 = (void **)__p[0];
                  }
                  KB::String::String((KB::String *)&valuePtr, (const char *)v139);
                  if (v231 < 0) {
                    operator delete(__p[0]);
                  }
                  KB::cf_string_impl<KB::String>((CFStringRef *)__p, (unsigned __int16 *)&valuePtr);
                  __int16 v140 = __p[0];
                  CFDictionarySetValue(Mutable, __p[0], v135);
                  if (v140) {
                    CFRelease(v140);
                  }
                  if (v239 && BYTE6(valuePtr) == 1) {
                    free(v239);
                  }
                  if (v135) {
                    CFRelease(v135);
                  }
                }
                double valuePtr = expf(v101[198]);
                CFNumberRef v141 = CFNumberCreate(v102, kCFNumberDoubleType, &valuePtr);
                CFDictionarySetValue(Mutable, @"ensemble_omega", v141);
                if (v141) {
                  CFRelease(v141);
                }
                KB::Candidate::add_sources_info((KB::Candidate *)(v101 + 12), @"ensemble", Mutable);
                if (Mutable) {
                  CFRelease(Mutable);
                }
                std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v243);
LABEL_259:
                uint64_t v142 = (KB::Candidate *)a3[1];
                unint64_t v143 = a3[2];
                if ((unint64_t)v142 >= v143)
                {
                  uint64_t v145 = 0x1CAC083126E978D5 * (((uint64_t)v142 - *a3) >> 3);
                  unint64_t v146 = v145 + 1;
                  if ((unint64_t)(v145 + 1) > 0x4189374BC6A7EFLL) {
                    goto LABEL_410;
                  }
                  unint64_t v147 = 0x1CAC083126E978D5 * ((uint64_t)(v143 - *a3) >> 3);
                  if (2 * v147 > v146) {
                    unint64_t v146 = 2 * v147;
                  }
                  if (v147 >= 0x20C49BA5E353F7) {
                    unint64_t v148 = 0x4189374BC6A7EFLL;
                  }
                  else {
                    unint64_t v148 = v146;
                  }
                  v245 = a3 + 2;
                  if (v148) {
                    unint64_t v148 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v148);
                  }
                  else {
                    uint64_t v149 = 0;
                  }
                  char v150 = (KB::Candidate *)(v148 + 1000 * v145);
                  *(void *)&long long v243 = v148;
                  *((void *)&v243 + 1) = v150;
                  *((void *)&v244 + 1) = v148 + 1000 * v149;
                  KB::Candidate::Candidate(v150, (const KB::Candidate *)(v101 + 12));
                  *(void *)&long long v244 = (char *)v150 + 1000;
                  std::vector<KB::Candidate>::__swap_out_circular_buffer(a3, &v243);
                  long long v144 = (char *)a3[1];
                  std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v243);
                }
                else
                {
                  long long v144 = (char *)KB::Candidate::Candidate(v142, (const KB::Candidate *)(v101 + 12)) + 1000;
                }
                a3[1] = (uint64_t)v144;
                if (v241 && BYTE6(v240) == 1) {
                  free(v241);
                }
                uint64_t v101 = *(float **)v101;
              }
              while (v101);
            }
          }
        }
        uint64_t v151 = v233[0];
        if (v233[0])
        {
          do
          {
            char v152 = v151;
            uint64_t v151 = (void *)*v151;
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)(v152 + 6));
            char v153 = (void *)v152[3];
            if (v153 && *((unsigned char *)v152 + 22) == 1) {
              free(v153);
            }
            operator delete(v152);
          }
          while (v151);
        }
        goto LABEL_403;
      }
      long long v235 = 0uLL;
      long long v236 = 0uLL;
      float v237 = 1.0;
      *(_OWORD *)uint64_t v232 = 0uLL;
      *(_OWORD *)uint64_t v233 = 0uLL;
      float v234 = 1.0;
      v179 = *(void **)(a2 + 16);
      if (!v179) {
        goto LABEL_398;
      }
      unint64_t v180 = (unint64_t)&v243;
      do
      {
        uint64_t v181 = v179[3];
        if (v179[4] != v181)
        {
          uint64_t v182 = 0;
          unsigned int v183 = 1;
          do
          {
            unint64_t v184 = (KB::Candidate *)(v181 + 1000 * v182);
            KB::Candidate::capitalized_string(v184, (uint64_t)&v243);
            v185 = std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::find<KB::String>(v235, *((unint64_t *)&v235 + 1), &v243);
            if (*((void *)&v243 + 1)) {
              BOOL v186 = BYTE6(v243) == 1;
            }
            else {
              BOOL v186 = 0;
            }
            if (v186) {
              free(*((void **)&v243 + 1));
            }
            if (v185)
            {
              KB::Candidate::capitalized_string(v184, (uint64_t)&v243);
              unint64_t v240 = (char *)&v243;
              uint64_t v187 = std::__hash_table<std::__hash_value_type<KB::String,unsigned int>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,unsigned int>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>((uint64_t)v232, &v243, (KB::String **)&v240);
              ++*((_DWORD *)v187 + 12);
            }
            else
            {
              KB::Candidate::capitalized_string(v184, (uint64_t)&v243);
              unint64_t v240 = (char *)&v243;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<KB::String,unsigned int>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,unsigned int>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>((uint64_t)v232, &v243, (KB::String **)&v240)+ 12) = 1;
              if (*((void *)&v243 + 1) && BYTE6(v243) == 1) {
                free(*((void **)&v243 + 1));
              }
              KB::Candidate::capitalized_string(v184, (uint64_t)&v243);
              unint64_t v240 = (char *)&v243;
              v188 = std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>((uint64_t)&v235, &v243, (KB::String **)&v240);
              KB::Candidate::operator=((uint64_t)(v188 + 6), (uint64_t)v184);
            }
            if (*((void *)&v243 + 1) && BYTE6(v243) == 1) {
              free(*((void **)&v243 + 1));
            }
            uint64_t v182 = v183;
            uint64_t v181 = v179[3];
            BOOL v166 = 0x1CAC083126E978D5 * ((v179[4] - v181) >> 3) > (unint64_t)v183++;
          }
          while (v166);
        }
        v179 = (void *)*v179;
      }
      while (v179);
      v189 = (float *)v236;
      if (!(void)v236)
      {
LABEL_398:
        v216 = v233[0];
        if (v233[0])
        {
          do
          {
            v217 = v216;
            v216 = (void *)*v216;
            uint64_t v218 = (void *)v217[3];
            if (v218 && *((unsigned char *)v217 + 22) == 1) {
              free(v218);
            }
            operator delete(v217);
          }
          while (v216);
        }
LABEL_403:
        uint64_t v219 = v232[0];
        v232[0] = 0;
        if (v219) {
          operator delete(v219);
        }
        std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::~__hash_table((uint64_t)&v235);
        goto LABEL_406;
      }
      while (1)
      {
        if (*((void *)v189 + 3)) {
          uint64_t v190 = (KB::String *)*((void *)v189 + 3);
        }
        else {
          uint64_t v190 = (KB::String *)(v189 + 8);
        }
        unsigned int v191 = KB::String::hash(v190, (const char *)*((unsigned __int16 *)v189 + 8));
        unint64_t v192 = v191;
        unint64_t v193 = (unint64_t)v232[1];
        if (v232[1])
        {
          uint8x8_t v194 = (uint8x8_t)vcnt_s8((int8x8_t)v232[1]);
          v194.i16[0] = vaddlv_u8(v194);
          unint64_t v195 = v194.u32[0];
          if (v194.u32[0] > 1uLL)
          {
            unint64_t v180 = v191;
            if (v232[1] <= (void *)v191) {
              unint64_t v180 = v191 % (unint64_t)v232[1];
            }
          }
          else
          {
            unint64_t v180 = (LODWORD(v232[1]) - 1) & v191;
          }
          uint64_t v196 = (unsigned int **)*((void *)v232[0] + v180);
          if (v196)
          {
            for (uint64_t m = *v196; m; uint64_t m = *(unsigned int **)m)
            {
              unint64_t v198 = *((void *)m + 1);
              if (v198 == v192)
              {
                if (m + 4 == (unsigned int *)(v189 + 4)
                  || KB::String::equal((KB::String *)(m + 4), (const KB::String *)(v189 + 4), 1))
                {
                  goto LABEL_383;
                }
              }
              else
              {
                if (v195 > 1)
                {
                  if (v198 >= v193) {
                    v198 %= v193;
                  }
                }
                else
                {
                  v198 &= v193 - 1;
                }
                if (v198 != v180) {
                  break;
                }
              }
            }
          }
        }
        uint64_t m = (unsigned int *)operator new(0x38uLL);
        *(void *)&long long v243 = m;
        *((void *)&v243 + 1) = v233;
        *(void *)uint64_t m = 0;
        *((void *)m + 1) = v192;
        KB::String::String((KB::String *)(m + 4), (const KB::String *)(v189 + 4));
        m[12] = 0;
        LOBYTE(v244) = 1;
        float v199 = (float)((unint64_t)v233[1] + 1);
        if (!v193 || (float)(v234 * (float)v193) < v199)
        {
          BOOL v200 = (v193 & (v193 - 1)) != 0;
          if (v193 < 3) {
            BOOL v200 = 1;
          }
          unint64_t v201 = v200 | (2 * v193);
          unint64_t v202 = vcvtps_u32_f32(v199 / v234);
          if (v201 <= v202) {
            size_t v203 = v202;
          }
          else {
            size_t v203 = v201;
          }
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v232, v203);
          unint64_t v193 = (unint64_t)v232[1];
          if (((unint64_t)v232[1] & ((unint64_t)v232[1] - 1)) != 0)
          {
            if (v232[1] <= (void *)v192) {
              unint64_t v180 = v192 % (unint64_t)v232[1];
            }
            else {
              unint64_t v180 = v192;
            }
          }
          else
          {
            unint64_t v180 = (LODWORD(v232[1]) - 1) & v192;
          }
        }
        uint64_t v204 = v232[0];
        uint64_t v205 = (unsigned int **)*((void *)v232[0] + v180);
        if (v205)
        {
          *(void *)uint64_t m = *v205;
        }
        else
        {
          *(void **)uint64_t m = v233[0];
          v233[0] = m;
          v204[v180] = v233;
          if (!*(void *)m) {
            goto LABEL_382;
          }
          unint64_t v206 = *(void *)(*(void *)m + 8);
          if ((v193 & (v193 - 1)) != 0)
          {
            if (v206 >= v193) {
              v206 %= v193;
            }
          }
          else
          {
            v206 &= v193 - 1;
          }
          uint64_t v205 = (unsigned int **)((char *)v232[0] + 8 * v206);
        }
        *uint64_t v205 = m;
LABEL_382:
        *(void *)&long long v243 = 0;
        ++v233[1];
        std::unique_ptr<std::__hash_node<KB::String,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<KB::String,void *>>>>::reset[abi:nn180100]((uint64_t *)&v243);
LABEL_383:
        v189[198] = logf((float)m[12]);
        v207 = (KB::Candidate *)a3[1];
        unint64_t v208 = a3[2];
        if ((unint64_t)v207 >= v208)
        {
          uint64_t v210 = 0x1CAC083126E978D5 * (((uint64_t)v207 - *a3) >> 3);
          unint64_t v211 = v210 + 1;
          if ((unint64_t)(v210 + 1) > 0x4189374BC6A7EFLL) {
            goto LABEL_410;
          }
          unint64_t v212 = 0x1CAC083126E978D5 * ((uint64_t)(v208 - *a3) >> 3);
          if (2 * v212 > v211) {
            unint64_t v211 = 2 * v212;
          }
          if (v212 >= 0x20C49BA5E353F7) {
            unint64_t v213 = 0x4189374BC6A7EFLL;
          }
          else {
            unint64_t v213 = v211;
          }
          v245 = a3 + 2;
          if (v213) {
            unint64_t v213 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v213);
          }
          else {
            uint64_t v214 = 0;
          }
          uint64_t v215 = (KB::Candidate *)(v213 + 1000 * v210);
          *(void *)&long long v243 = v213;
          *((void *)&v243 + 1) = v215;
          *((void *)&v244 + 1) = v213 + 1000 * v214;
          KB::Candidate::Candidate(v215, (const KB::Candidate *)(v189 + 12));
          *(void *)&long long v244 = (char *)v215 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer(a3, &v243);
          uint64_t v209 = (char *)a3[1];
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v243);
        }
        else
        {
          uint64_t v209 = (char *)KB::Candidate::Candidate(v207, (const KB::Candidate *)(v189 + 12)) + 1000;
        }
        a3[1] = (uint64_t)v209;
        v189 = *(float **)v189;
        if (!v189) {
          goto LABEL_398;
        }
      }
    }
    long long v167 = *(void **)(a2 + 16);
    if (v167)
    {
      long long v168 = a3 + 2;
      do
      {
        uint64_t v169 = v167[3];
        if (v167[4] != v169)
        {
          uint64_t v170 = 0;
          __int16 v171 = (KB::Candidate *)a3[1];
          unsigned int v172 = 1;
          do
          {
            uint64_t v173 = (const KB::Candidate *)(v169 + 1000 * v170);
            *((_DWORD *)v173 + 186) = 0;
            if ((unint64_t)v171 >= *v168)
            {
              uint64_t v174 = 0x1CAC083126E978D5 * (((uint64_t)v171 - *a3) >> 3);
              unint64_t v175 = v174 + 1;
              if ((unint64_t)(v174 + 1) > 0x4189374BC6A7EFLL) {
                goto LABEL_410;
              }
              if (0x395810624DD2F1AALL * ((*v168 - *a3) >> 3) > v175) {
                unint64_t v175 = 0x395810624DD2F1AALL * ((*v168 - *a3) >> 3);
              }
              if ((unint64_t)(0x1CAC083126E978D5 * ((*v168 - *a3) >> 3)) >= 0x20C49BA5E353F7) {
                unint64_t v176 = 0x4189374BC6A7EFLL;
              }
              else {
                unint64_t v176 = v175;
              }
              v245 = a3 + 2;
              if (v176) {
                unint64_t v176 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v176);
              }
              else {
                uint64_t v177 = 0;
              }
              uint64_t v178 = (KB::Candidate *)(v176 + 1000 * v174);
              *(void *)&long long v243 = v176;
              *((void *)&v243 + 1) = v178;
              *((void *)&v244 + 1) = v176 + 1000 * v177;
              KB::Candidate::Candidate(v178, v173);
              *(void *)&long long v244 = (char *)v178 + 1000;
              std::vector<KB::Candidate>::__swap_out_circular_buffer(a3, &v243);
              __int16 v171 = (KB::Candidate *)a3[1];
              std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v243);
            }
            else
            {
              KB::Candidate::Candidate(v171, v173);
              __int16 v171 = (KB::Candidate *)((char *)v171 + 1000);
            }
            a3[1] = (uint64_t)v171;
            uint64_t v170 = v172;
            uint64_t v169 = v167[3];
            BOOL v166 = 0x1CAC083126E978D5 * ((v167[4] - v169) >> 3) > (unint64_t)v172++;
          }
          while (v166);
        }
        long long v167 = (void *)*v167;
      }
      while (v167);
    }
  }
  else
  {
    unint64_t v154 = *(void **)(a2 + 16);
    if (v154)
    {
      int v155 = a3 + 2;
      do
      {
        uint64_t v156 = v154[3];
        if (v154[4] != v156)
        {
          uint64_t v157 = 0;
          uint64_t v158 = (KB::Candidate *)a3[1];
          unsigned int v159 = 1;
          do
          {
            int v160 = (const KB::Candidate *)(v156 + 1000 * v157);
            if ((unint64_t)v158 >= *v155)
            {
              uint64_t v161 = 0x1CAC083126E978D5 * (((uint64_t)v158 - *a3) >> 3);
              unint64_t v162 = v161 + 1;
              if ((unint64_t)(v161 + 1) > 0x4189374BC6A7EFLL) {
LABEL_410:
              }
                abort();
              if (0x395810624DD2F1AALL * ((*v155 - *a3) >> 3) > v162) {
                unint64_t v162 = 0x395810624DD2F1AALL * ((*v155 - *a3) >> 3);
              }
              if ((unint64_t)(0x1CAC083126E978D5 * ((*v155 - *a3) >> 3)) >= 0x20C49BA5E353F7) {
                unint64_t v163 = 0x4189374BC6A7EFLL;
              }
              else {
                unint64_t v163 = v162;
              }
              v245 = a3 + 2;
              if (v163) {
                unint64_t v163 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v163);
              }
              else {
                uint64_t v164 = 0;
              }
              char v165 = (KB::Candidate *)(v163 + 1000 * v161);
              *(void *)&long long v243 = v163;
              *((void *)&v243 + 1) = v165;
              *((void *)&v244 + 1) = v163 + 1000 * v164;
              KB::Candidate::Candidate(v165, v160);
              *(void *)&long long v244 = (char *)v165 + 1000;
              std::vector<KB::Candidate>::__swap_out_circular_buffer(a3, &v243);
              uint64_t v158 = (KB::Candidate *)a3[1];
              std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v243);
            }
            else
            {
              KB::Candidate::Candidate(v158, v160);
              uint64_t v158 = (KB::Candidate *)((char *)v158 + 1000);
            }
            a3[1] = (uint64_t)v158;
            uint64_t v157 = v159;
            uint64_t v156 = v154[3];
            BOOL v166 = 0x1CAC083126E978D5 * ((v154[4] - v156) >> 3) > (unint64_t)v159++;
          }
          while (v166);
        }
        unint64_t v154 = (void *)*v154;
      }
      while (v154);
    }
  }
LABEL_406:
  int64x2_t v220 = (KB::Candidate *)a3[1];
  unint64_t v221 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v220 - *a3) >> 3));
  if (v220 == (KB::Candidate *)*a3) {
    uint64_t v222 = 0;
  }
  else {
    uint64_t v222 = v221;
  }
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>((uint64_t *)*a3, v220, v222, 1);
}

char *std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType&&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint8x8_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint8x8_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  int v12 = (void *)(a1 + 16);
  uint8x8_t v10 = (char *)operator new(0x80uLL);
  v23[1] = a1 + 16;
  *(void *)uint8x8_t v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 31) = 0;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  char v24 = 1;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  double v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)uint8x8_t v10 = *v20;
LABEL_38:
    *double v20 = v10;
    goto LABEL_39;
  }
  *(void *)uint8x8_t v10 = *v12;
  *int v12 = v10;
  *(void *)(v19 + 8 * v3) = v12;
  if (*(void *)v10)
  {
    unint64_t v21 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    double v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>>>>::reset[abi:nn180100]((uint64_t)v23);
  return v10;
}

uint64_t *TI::CP::TIPathRecognizerEnsemble::can_use_preferred_source(TI::CP::TIPathRecognizerEnsemble *this)
{
  unint64_t v2 = (int *)((char *)this + 208);
  unint64_t v3 = (char *)this + 16;
  uint64_t result = std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>((void *)this + 2, *((_DWORD *)this + 52));
  if (result)
  {
    uint64_t v5 = *((void *)this + 60);
    uint64_t result = 0;
    if (!v5
      || !*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5)
      || !*(unsigned char *)(*(void *)(*(uint64_t (**)(void))(**((void **)this + 60) + 48))(*((void *)this + 60))
                   + 66)
      || !*(unsigned char *)(*(void *)(*(uint64_t (**)(void))(**((void **)this + 60) + 48))(*((void *)this + 60))
                   + 65))
    {
      unint64_t v6 = std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType const&>,std::tuple<>>((uint64_t)v3, *v2, v2);
      if ((*(unsigned int (**)(void))(*(void *)v6[3] + 16))(v6[3]) == 1)
      {
        unsigned __int8 v7 = atomic_load((unsigned __int8 *)this + 632);
        if (v7) {
          return (uint64_t *)1;
        }
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint8x8_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint8x8_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint8x8_t v10 = operator new(0x28uLL);
  *uint8x8_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  unsigned __int16 v10[3] = 0;
  v10[4] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint8x8_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *uint8x8_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void std::__destroy_at[abi:nn180100]<std::pair<TI::CP::TIPathRecognizerType const,KB::CandidateCollection>,0>(void **a1)
{
  unint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v3);
  unint64_t v3 = a1 + 7;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v3);
  unint64_t v3 = a1 + 4;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v3);
  unint64_t v3 = v2;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v3);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<TI::CP::TIPathRecognizerType const,KB::CandidateCollection>,0>(v1 + 2);
    }
    operator delete(v1);
  }
}

void *std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::find<KB::String>(uint64_t a1, unint64_t a2, void *a3)
{
  if (a3[1]) {
    unint64_t v6 = (KB::String *)a3[1];
  }
  else {
    unint64_t v6 = (KB::String *)(a3 + 2);
  }
  unsigned int v7 = KB::String::hash(v6, (const char *)*(unsigned __int16 *)a3);
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v7;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v7;
    if (v7 >= a2) {
      unint64_t v11 = v7 % a2;
    }
  }
  else
  {
    unint64_t v11 = (a2 - 1) & v7;
  }
  float v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  float v13 = (void *)*v12;
  if (*v12)
  {
    do
    {
      unint64_t v14 = v13[1];
      if (v14 == v8)
      {
        if (v13 + 2 == a3 || KB::String::equal((KB::String *)(v13 + 2), (const KB::String *)a3, 1)) {
          return v13;
        }
      }
      else
      {
        if (v10 > 1)
        {
          if (v14 >= a2) {
            v14 %= a2;
          }
        }
        else
        {
          v14 &= a2 - 1;
        }
        if (v14 != v11) {
          return 0;
        }
      }
      float v13 = (void *)*v13;
    }
    while (v13);
  }
  return v13;
}

void *std::__hash_table<std::__hash_value_type<KB::String,unsigned int>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,unsigned int>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>(uint64_t a1, void *a2, KB::String **a3)
{
  if (a2[1]) {
    unsigned int v7 = (KB::String *)a2[1];
  }
  else {
    unsigned int v7 = (KB::String *)(a2 + 2);
  }
  unsigned int v8 = KB::String::hash(v7, (const char *)*(unsigned __int16 *)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v10 <= v8) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (v14 + 2 == a2 || KB::String::equal((KB::String *)(v14 + 2), (const KB::String *)a2, 1)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  unint64_t v16 = (void *)(a1 + 16);
  unint64_t v14 = operator new(0x38uLL);
  v28[0] = (uint64_t)v14;
  v28[1] = a1 + 16;
  *unint64_t v14 = 0;
  v14[1] = v9;
  size_t v17 = *a3;
  *((_DWORD *)v14 + 4) = 0x100000;
  *((_WORD *)v14 + 10) = 0;
  *((unsigned char *)v14 + 22) = 0;
  v14[3] = 0;
  KB::String::operator=((uint64_t)(v14 + 2), v17);
  *((_DWORD *)v14 + 12) = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *unint64_t v14 = *v25;
LABEL_42:
    *uint64_t v25 = v14;
    goto LABEL_43;
  }
  *unint64_t v14 = *v16;
  *unint64_t v16 = v14;
  *(void *)(v24 + 8 * v3) = v16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_42;
  }
LABEL_43:
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<KB::String,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<KB::String,void *>>>>::reset[abi:nn180100](v28);
  return v14;
}

void *std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>(uint64_t a1, void *a2, KB::String **a3)
{
  if (a2[1]) {
    unsigned int v7 = (KB::String *)a2[1];
  }
  else {
    unsigned int v7 = (KB::String *)(a2 + 2);
  }
  unsigned int v8 = KB::String::hash(v7, (const char *)*(unsigned __int16 *)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v10 <= v8) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (v14 + 2 == a2 || KB::String::equal((KB::String *)(v14 + 2), (const KB::String *)a2, 1)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  unint64_t v14 = operator new(0x418uLL);
  *unint64_t v14 = 0;
  v14[1] = v9;
  unint64_t v16 = *a3;
  *((_DWORD *)v14 + 4) = 0x100000;
  *((_WORD *)v14 + 10) = 0;
  *((unsigned char *)v14 + 22) = 0;
  v14[3] = 0;
  KB::String::operator=((uint64_t)(v14 + 2), v16);
  bzero(v14 + 6, 0x3E8uLL);
  KB::Candidate::Candidate((KB::Candidate *)(v14 + 6));
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *unint64_t v14 = *v24;
LABEL_42:
    *uint64_t v24 = v14;
    goto LABEL_43;
  }
  *unint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v14;
}

uint64_t std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    unint64_t v3 = v2;
    unint64_t v2 = (void *)*v2;
    KB::Candidate::~Candidate((KB::Candidate *)(v3 + 6));
    unsigned __int8 v4 = (void *)v3[3];
    if (v4 && *((unsigned char *)v3 + 22) == 1) {
      free(v4);
    }
    operator delete(v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void TI::CP::TIPathRecognizerEnsemble::dictionary_key_for_candidate(const KB::Candidate *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned __int16 v13[2] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (*(void *)a1)
  {
    unsigned __int8 v4 = (KB::Word *)*((void *)a1 + 1);
    uint64_t v5 = 240 * *(void *)a1;
    do
    {
      uint64_t v6 = *((void *)v4 + 17);
      KB::Word::capitalized_string(v4, (uint64_t)v10);
      unsigned int v7 = (const char *)v12;
      if (!v12) {
        unsigned int v7 = (const char *)v13;
      }
      if (v10[0]) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = "";
      }
      KB::String::append_format((KB::String *)a2, "[%u]%s", v6, v8);
      if (v12) {
        BOOL v9 = v11 == 1;
      }
      else {
        BOOL v9 = 0;
      }
      if (v9) {
        free(v12);
      }
      unsigned __int8 v4 = (KB::Word *)((char *)v4 + 240);
      v5 -= 240;
    }
    while (v5);
  }
}

void *std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>(uint64_t a1, void *a2, const KB::String **a3)
{
  if (a2[1]) {
    unsigned int v7 = (KB::String *)a2[1];
  }
  else {
    unsigned int v7 = (KB::String *)(a2 + 2);
  }
  unsigned int v8 = KB::String::hash(v7, (const char *)*(unsigned __int16 *)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v10 <= v8) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (i + 2 == a2 || KB::String::equal((KB::String *)(i + 2), (const KB::String *)a2, 1)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x418uLL);
  *uint64_t i = 0;
  i[1] = v9;
  KB::String::String((KB::String *)(i + 2), *a3);
  bzero(i + 6, 0x3E8uLL);
  KB::Candidate::Candidate((KB::Candidate *)(i + 6));
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_42:
    *uint64_t v23 = i;
    goto LABEL_43;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void *std::__hash_table<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>(uint64_t *a1, void *a2, const KB::String **a3)
{
  if (a2[1]) {
    unsigned int v7 = (KB::String *)a2[1];
  }
  else {
    unsigned int v7 = (KB::String *)(a2 + 2);
  }
  unsigned int v8 = KB::String::hash(v7, (const char *)*(unsigned __int16 *)a2);
  unint64_t v9 = v8;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v10 <= v8) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(void ***)(*a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (v14 + 2 == a2 || KB::String::equal((KB::String *)(v14 + 2), (const KB::String *)a2, 1)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  float v16 = a1 + 2;
  unint64_t v14 = operator new(0x58uLL);
  *unint64_t v14 = 0;
  v14[1] = v9;
  KB::String::String((KB::String *)(v14 + 2), *a3);
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_DWORD *)v14 + 20) = 1065353216;
  float v17 = (float)(unint64_t)(a1[3] + 1);
  float v18 = *((float *)a1 + 8);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = a1[1];
    if (*(void *)&prime > v10) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v29 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          unint64_t v24 = (void *)*a1;
          *a1 = (uint64_t)v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          unint64_t v26 = (void *)*v16;
          if (*v16)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v27) = v16;
            uint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*a1 + 8 * v33))
                  {
                    *(void *)(*a1 + 8 * v33) = v26;
                    goto LABEL_59;
                  }
                  *unint64_t v26 = *v32;
                  *uint64_t v32 = **(void **)(*a1 + 8 * v33);
                  **(void **)(*a1 + 8 * v33) = v32;
                  uint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_59:
                unint64_t v26 = v32;
                uint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_63;
        }
        float v38 = (void *)*a1;
        *a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_63:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v34 = *a1;
  char v35 = *(void **)(*a1 + 8 * v3);
  if (v35)
  {
    *unint64_t v14 = *v35;
LABEL_76:
    *char v35 = v14;
    goto LABEL_77;
  }
  *unint64_t v14 = *v16;
  *float v16 = v14;
  *(void *)(v34 + 8 * v3) = v16;
  if (*v14)
  {
    unint64_t v36 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v36 >= v10) {
        v36 %= v10;
      }
    }
    else
    {
      v36 &= v10 - 1;
    }
    char v35 = (void *)(*a1 + 8 * v36);
    goto LABEL_76;
  }
LABEL_77:
  ++a1[3];
  return v14;
}

double TI::CP::TIPathRecognizerEnsemble::path_length(TI::CP::TIPathRecognizerEnsemble *this)
{
  unint64_t v2 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>((void *)this + 2, *((_DWORD *)this + 51));
  if (!v2)
  {
    unint64_t v2 = (uint64_t *)*((void *)this + 4);
    if (!v2) {
      return 0.0;
    }
  }
  unint64_t v3 = *(void (**)(void))(*(void *)v2[3] + 72);

  v3();
  return result;
}

unsigned int *TI::CP::TIPathRecognizerEnsemble::set_typing_model(uint64_t a1, uint64_t *a2)
{
  double result = *(unsigned int **)(a1 + 480);
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 480) = v4;
  if (result)
  {
    unsigned int v5 = atomic_load(result + 2);
    if (v5 == 1) {
      double result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 40))(result);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
    }
  }
  for (uint64_t i = *(void **)(a1 + 32); i; uint64_t i = (void *)*i)
  {
    uint64_t v7 = i[3];
    uint64_t v8 = *(void *)(a1 + 480);
    unint64_t v10 = (unsigned int *)v8;
    if (v8) {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
    }
    (*(void (**)(uint64_t, unsigned int **))(*(void *)v7 + 64))(v7, &v10);
    double result = v10;
    if (v10)
    {
      unsigned int v9 = atomic_load(v10 + 2);
      if (v9 == 1) {
        double result = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v10 + 40))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF);
      }
    }
  }
  return result;
}

double TI::CP::TIPathRecognizerEnsemble::reset_path(TI::CP::TIPathRecognizerEnsemble *this)
{
  for (uint64_t i = (uint64_t **)*((void *)this + 4); i; uint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[3] + 56))(i[3]);
  *(_OWORD *)((char *)this + 88) = *MEMORY[0x1E4F1DAD8];
  *(void *)&double result = 0x7FFFFFFFFLL;
  *((void *)this + 10) = 0x7FFFFFFFFLL;
  return result;
}

double TI::CP::TIPathRecognizerEnsemble::last_touch(TI::CP::TIPathRecognizerEnsemble *this)
{
  return *((double *)this + 11);
}

uint64_t TI::CP::TIPathRecognizerEnsemble::touch_stage(TI::CP::TIPathRecognizerEnsemble *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t TI::CP::TIPathRecognizerEnsemble::add_touch(uint64_t result, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  int v7 = *(_DWORD *)(result + 80);
  if (v7 == -1) {
    BOOL v8 = a2 != 0;
  }
  else {
    BOOL v8 = v7 != a3;
  }
  if (v8) {
    return result;
  }
  int v15 = a3;
  if (a2)
  {
    if ((a2 & 0xFFFFFFFE) != 2) {
      goto LABEL_9;
    }
    int v15 = -1;
  }
  *(_DWORD *)(result + 80) = v15;
LABEL_9:
  *(double *)(result + 88) = a4;
  *(double *)(result + 96) = a5;
  *(_DWORD *)(result + 84) = a2;
  for (uint64_t i = *(uint64_t ***)(result + 32); i; uint64_t i = (uint64_t **)*i)
    double result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double, double, double, double))(*i[3] + 32))(i[3], a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::recognitionSources(TI::CP::TIPathRecognizerEnsemble *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 4);
  if (v1)
  {
    uint64_t result = 0;
    while (1)
    {
      int v3 = *((_DWORD *)v1 + 4);
      if (!v3) {
        goto LABEL_7;
      }
      if (v3 == 1) {
        goto LABEL_8;
      }
      if (v3 == 2) {
        break;
      }
LABEL_9:
      uint64_t v1 = (uint64_t *)*v1;
      if (!v1) {
        return result;
      }
    }
    LODWORD(result) = result | 4;
LABEL_7:
    LODWORD(result) = result | 1;
LABEL_8:
    uint64_t result = result | 2;
    goto LABEL_9;
  }
  return 0;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::get_recognizer_type(TI::CP::TIPathRecognizerEnsemble *this)
{
  return 3;
}

void TI::CP::TIPathRecognizerEnsemble::~TIPathRecognizerEnsemble(TI::CP::TIPathRecognizerEnsemble *this)
{
  TI::CP::TIPathRecognizerEnsemble::~TIPathRecognizerEnsemble(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  CFNumberRef v2;
  CFNumberRef v3;
  void *v4;
  std::__shared_weak_count *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void *v10;
  std::__shared_weak_count *v11;
  void *v12;
  void *v13;
  std::__shared_weak_count *v14;
  void *v15;
  uint64_t v16;
  int valuePtr;
  void **v18;

  *(void *)this = &unk_1F3F76850;
  if (preference_value_for_key((const __CFString *)this) != *((_DWORD *)this + 150))
  {
    double valuePtr = *((_DWORD *)this + 150);
    unint64_t v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (v2)
    {
      int v3 = v2;
      CFPreferencesSetAppValue(@"kbUserDidPath", v2, @"com.apple.keyboard");
      CFPreferencesAppSynchronize(@"com.apple.keyboard");
      CFRelease(v3);
    }
  }
  float v18 = (void **)((char *)this + 576);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v18);
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::CP::TIPathRecognizerEnsemble *)((char *)this + 568));
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::CP::TIPathRecognizerEnsemble *)((char *)this + 560));
  uint64_t v4 = (void *)*((void *)this + 64);
  if (v4)
  {
    *((void *)this + 65) = v4;
    operator delete(v4);
  }
  unsigned int v5 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v5);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 61);
  if (v6)
  {
    int v7 = atomic_load(v6 + 2);
    if (v7 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF);
    }
  }
  BOOL v8 = (unsigned int *)*((void *)this + 60);
  if (v8)
  {
    unsigned int v9 = atomic_load(v8 + 2);
    if (v9 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v8 + 40))(v8);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF);
    }
  }
  unint64_t v10 = (void *)*((void *)this + 36);
  if (v10 && *((unsigned char *)this + 286) == 1) {
    free(v10);
  }
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  uint8x8_t v11 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
  }
  unint64_t v12 = (void *)*((void *)this + 4);
  if (v12)
  {
    do
    {
      float v13 = (void *)*v12;
      unint64_t v14 = (std::__shared_weak_count *)v12[4];
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v14);
      }
      operator delete(v12);
      unint64_t v12 = v13;
    }
    while (v13);
  }
  int v15 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v15) {
    operator delete(v15);
  }
  *(void *)this = &unk_1F3F78B70;
  float v16 = *((void *)this + 1);
  if (v16) {
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref(v16);
  }
}

CFNumberRef preference_value_for_key(const __CFString *a1)
{
  CFNumberRef result = (const __CFNumber *)CFPreferencesCopyAppValue(@"kbUserDidPath", @"com.apple.keyboard");
  unsigned int valuePtr = 0;
  if (result)
  {
    CFNumberRef v2 = result;
    if (!CFNumberGetValue(result, kCFNumberIntType, &valuePtr)) {
      unsigned int valuePtr = 0;
    }
    CFRelease(v2);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::TIPathRecognizerEnsemble(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F3F76850;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0x7FFFFFFFFLL;
  *(_OWORD *)(a1 + 88) = *MEMORY[0x1E4F1DAD8];
  long long v9 = *(_OWORD *)(a4 + 16);
  long long v8 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 136) = v9;
  long long v11 = *(_OWORD *)(a4 + 64);
  long long v10 = *(_OWORD *)(a4 + 80);
  uint64_t v12 = *(void *)(a4 + 96);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a4 + 48);
  *(void *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v11;
  float v13 = (std::string *)(a1 + 224);
  if (*(char *)(a4 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a4 + 104), *(void *)(a4 + 112));
  }
  else
  {
    long long v14 = *(_OWORD *)(a4 + 104);
    v13->__r_.__value_.__r.__words[2] = *(void *)(a4 + 120);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  int v15 = (std::string *)(a1 + 248);
  if (*(char *)(a4 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(a4 + 128), *(void *)(a4 + 136));
  }
  else
  {
    long long v16 = *(_OWORD *)(a4 + 128);
    *(void *)(a1 + 264) = *(void *)(a4 + 144);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  __int16 v17 = *(_WORD *)(a4 + 152);
  *(unsigned char *)(a1 + 274) = *(unsigned char *)(a4 + 154);
  *(_WORD *)(a1 + 272) = v17;
  KB::String::String((KB::String *)(a1 + 280), (const KB::String *)(a4 + 160));
  long long v18 = *(_OWORD *)(a4 + 192);
  long long v19 = *(_OWORD *)(a4 + 224);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a4 + 208);
  *(_OWORD *)(a1 + 344) = v19;
  *(_OWORD *)(a1 + 312) = v18;
  long long v20 = *(_OWORD *)(a4 + 240);
  long long v21 = *(_OWORD *)(a4 + 256);
  long long v22 = *(_OWORD *)(a4 + 288);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a4 + 272);
  *(_OWORD *)(a1 + 408) = v22;
  *(_OWORD *)(a1 + 360) = v20;
  *(_OWORD *)(a1 + 376) = v21;
  long long v23 = *(_OWORD *)(a4 + 304);
  long long v24 = *(_OWORD *)(a4 + 320);
  long long v25 = *(_OWORD *)(a4 + 336);
  *(void *)(a1 + 472) = *(void *)(a4 + 352);
  *(_OWORD *)(a1 + 440) = v24;
  *(_OWORD *)(a1 + 456) = v25;
  *(_OWORD *)(a1 + 424) = v23;
  uint64_t v26 = *a2;
  *a2 = 0;
  *(void *)(a1 + 480) = v26;
  uint64_t v27 = *a3;
  *a3 = 0;
  *(void *)(a1 + 488) = v27;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 560));
  CFStringRef v28 = (const __CFString *)language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 568));
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 604) = xmmword_1E4154BF0;
  *(_DWORD *)(a1 + 620) = 1028443341;
  *(void *)(a1 + 624) = 0x300000000;
  *(_WORD *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  atomic_store(0, (unsigned __int8 *)(a1 + 632));
  atomic_store(0, (unsigned __int8 *)(a1 + 633));
  int v29 = *(_DWORD *)(a1 + 220);
  if (v29)
  {
    long long v30 = *(_OWORD *)(a1 + 384);
    long long v78 = *(_OWORD *)(a1 + 400);
    long long v31 = *(_OWORD *)(a1 + 432);
    long long v79 = *(_OWORD *)(a1 + 416);
    long long v80 = v31;
    uint64_t v81 = *(void *)(a1 + 448);
    long long v32 = *(_OWORD *)(a1 + 368);
    long long v75 = *(_OWORD *)(a1 + 352);
    long long v76 = v32;
    long long v77 = v30;
    long long v33 = *(_OWORD *)(a1 + 336);
    long long filePath = *(_OWORD *)(a1 + 320);
    long long v74 = v33;
    *(_OWORD *)uint64_t v84 = *(_OWORD *)(a1 + 457);
    *(void *)&v84[15] = *(void *)(a1 + 472);
    char v34 = *(unsigned char *)(a1 + 273);
    if (*(unsigned char *)(a1 + 272)) {
      int v35 = 2;
    }
    else {
      int v35 = 1;
    }
    unsigned int v36 = *(unsigned __int8 *)(a1 + 274);
    *(void *)&long long v61 = 0x402E000000000000;
    *((void *)&v61 + 1) = __PAIR64__(v36, v35);
    LOBYTE(cf[0]) = 1;
    cf[1] = (CFTypeRef)0x3FD3333333333333;
    char v63 = 0;
    int v71 = 0;
    int v72 = 0;
    *(_OWORD *)unint64_t v64 = 0u;
    *(_OWORD *)uint64_t v65 = 0u;
    long long v66 = 0u;
    *(_OWORD *)float v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    char v70 = 0;
    float v37 = operator new(0x268uLL);
    float v38 = v37;
    v37[1] = 0;
    _OWORD v37[2] = 0;
    *float v37 = &unk_1F3F76900;
    uint64_t v39 = v37 + 3;
    CFDictionaryRef v40 = *(unsigned int **)(a1 + 480);
    uint64_t v83 = v40;
    if (v40) {
      atomic_fetch_add((atomic_uint *volatile)v40 + 2, 1u);
    }
    long long v41 = *(unsigned int **)(a1 + 488);
    float v82 = v41;
    if (v41) {
      atomic_fetch_add((atomic_uint *volatile)v41 + 2, 1u);
    }
    TI::CP::Search::Search((uint64_t)(v37 + 3), (uint64_t *)&v83, (uint64_t *)&v82, &v61);
    if (v82)
    {
      unsigned int v42 = atomic_load(v82 + 2);
      if (v42 == 1) {
        (*(void (**)(void))(*(void *)v82 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v82 + 2, 0xFFFFFFFF);
      }
    }
    if (v83)
    {
      unsigned int v43 = atomic_load(v83 + 2);
      if (v43 == 1) {
        (*(void (**)(void))(*(void *)v83 + 40))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v83 + 2, 0xFFFFFFFF);
      }
    }
    int v44 = *(std::__shared_weak_count **)(a1 + 72);
    *(void *)(a1 + 64) = v39;
    *(void *)(a1 + 72) = v38;
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v44);
    }
    if (*((void *)&v68 + 1)) {
      operator delete(*((void **)&v68 + 1));
    }
    if (v67[0]) {
      operator delete(v67[0]);
    }
    if (v65[1]) {
      operator delete(v65[1]);
    }
    if (v64[0]) {
      operator delete(v64[0]);
    }
    uint64_t v45 = *(void *)(a1 + 64);
    long long v46 = v80;
    *(_OWORD *)(v45 + 528) = v79;
    *(_OWORD *)(v45 + 544) = v46;
    *(void *)(v45 + 560) = v81;
    long long v47 = v76;
    *(_OWORD *)(v45 + 464) = v75;
    *(_OWORD *)(v45 + 480) = v47;
    long long v48 = v78;
    *(_OWORD *)(v45 + 496) = v77;
    *(_OWORD *)(v45 + 512) = v48;
    long long v49 = v74;
    *(_OWORD *)(v45 + 432) = filePath;
    *(_OWORD *)(v45 + 448) = v49;
    *(unsigned char *)(v45 + 568) = v34;
    *(_OWORD *)(v45 + 569) = *(_OWORD *)v84;
    *(void *)(v45 + 584) = *(void *)&v84[15];
    unint64_t v50 = *(std::__shared_weak_count **)(a1 + 72);
    v60[0] = *(void *)(a1 + 64);
    v60[1] = v50;
    if (v50)
    {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      TI::CP::TIPathRecognizerEnsemble::add_recognizer(a1, v60);
      std::__shared_weak_count::__release_shared[abi:nn180100](v50);
    }
    else
    {
      TI::CP::TIPathRecognizerEnsemble::add_recognizer(a1, v60);
    }
    int v29 = *(_DWORD *)(a1 + 220);
  }
  if ((v29 & 0xC) != 0)
  {
    CFRetain(@"shapestore.db");
    cf[0] = @"shapestore.db";
    if (*(_WORD *)(a1 + 284) || (KB::String::compute_length((unsigned __int16 *)(a1 + 280)), *(_WORD *)(a1 + 284)))
    {
      CFAllocatorRef v51 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      KB::cf_string_impl<KB::String>((CFStringRef *)&filePath, (unsigned __int16 *)(a1 + 280));
      unint64_t v52 = (const void *)filePath;
      *((void *)&v61 + 1) = CFURLCreateWithFileSystemPath(v51, (CFStringRef)filePath, kCFURLPOSIXPathStyle, 1u);
      if (v52) {
        CFRelease(v52);
      }
    }
    else
    {
      CFAllocatorRef v53 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v54 = (const __CFString *)TI_KB_USER_DIRECTORY();
      *((void *)&v61 + 1) = CFURLCreateWithFileSystemPath(v53, v54, kCFURLPOSIXPathStyle, 1u);
    }
    LODWORD(v61) = *(_DWORD *)(a1 + 312);
    KB::retain_ptr<__CFDictionary const*>::operator=(cf, @"shapestore.db");
    unint64_t v55 = (char *)operator new(0x168uLL);
    *((void *)v55 + 1) = 0;
    *(void *)unint64_t v55 = &unk_1F3F76938;
    *((void *)v55 + 4) = 0;
    *((void *)v55 + 2) = 0;
    *((void *)v55 + 3) = &unk_1F3F76970;
    *(_OWORD *)(v55 + 40) = 0u;
    *(_OWORD *)(v55 + 56) = 0u;
    *(_OWORD *)(v55 + 72) = 0u;
    *(_OWORD *)(v55 + 88) = 0u;
    *(_OWORD *)(v55 + 104) = 0u;
    *(_OWORD *)(v55 + 120) = 0u;
    *((_DWORD *)v55 + 34) = 7;
    *((void *)v55 + 18) = 0x4028000000000000;
    *((_DWORD *)v55 + 38) = 8;
    *((_OWORD *)v55 + 10) = 0u;
    *((_OWORD *)v55 + 11) = 0u;
    *((_OWORD *)v55 + 12) = 0u;
    *((_OWORD *)v55 + 13) = 0u;
    *((void *)v55 + 28) = 0;
    uint64_t v56 = (sqlite3 **)TI::CP::ShapeStore::ShapeStore((uint64_t)(v55 + 232), (uint64_t)&v61);
    *((_DWORD *)v55 + 76) = 0;
    *(_OWORD *)(v55 + 312) = 0u;
    *(_OWORD *)(v55 + 328) = 0u;
    *((_DWORD *)v55 + 86) = 1065353216;
    v55[352] = 0;
    *((_DWORD *)v55 + 76) = TI::CP::ShapeStore::num_records(v56);
    v59[0] = v55 + 24;
    v59[1] = v55;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v55 + 1, 1uLL, memory_order_relaxed);
    TI::CP::TIPathRecognizerEnsemble::add_recognizer(a1, v59);
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v55);
    *(unsigned char *)(a1 + 56) = (*(unsigned char *)(a1 + 220) & 4) != 0;
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v55);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    cf[0] = 0;
    CFStringRef v28 = (const __CFString *)*((void *)&v61 + 1);
    if (*((void *)&v61 + 1)) {
      CFRelease(*((CFTypeRef *)&v61 + 1));
    }
  }
  int v57 = preference_value_for_key(v28);
  *(_DWORD *)(a1 + 600) = v57;
  if (v57 == 0x7FFFFFFF)
  {
    int v57 = *(_DWORD *)(a1 + 212) + 1;
    *(_DWORD *)(a1 + 600) = v57;
  }
  if (v57 < 0) {
    *(_DWORD *)(a1 + 600) = 0;
  }
  TI::CP::TIPathRecognizerEnsemble::load_ml_source_if_needed((TI::CP::TIPathRecognizerEnsemble *)a1);
  TI::CP::TIPathRecognizerEnsemble::normalize_weights((TI::CP::TIPathRecognizerEnsemble *)a1);
  return a1;
}

uint64_t std::__shared_ptr_emplace<TI::CP::ContextualShapeRecognizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::ContextualShapeRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F76938;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::ContextualShapeRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F76938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<TI::CP::Search>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::Search>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F76900;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::Search>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F76900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TI::CP::TIPathRecognizerEnsemble::append_debug_data(TI::CP::TIPathRecognizerEnsemble *this, __CFString *a2, const char *a3)
{
  int v3 = (TI::CP::Search *)*((void *)this + 8);
  if (v3) {
    TI::CP::Search::append_debug_data(v3, a2, a3);
  }
}

double TI::CP::TIPathRecognizerEnsemble::set_lm_weight(TI::CP::TIPathRecognizerEnsemble *this, double result)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    *(void *)(v2 + 432) = 0x3FD60DC768DFBD6ALL;
    *(double *)(v2 + 440) = *(float *)&result;
    *(_OWORD *)(v2 + 448) = xmmword_1E4154C80;
    *(_OWORD *)(v2 + 464) = xmmword_1E4154C90;
    *(_OWORD *)(v2 + 480) = xmmword_1E4154CA0;
    *(_OWORD *)(v2 + 496) = xmmword_1E4154CB0;
    *(_OWORD *)(v2 + 512) = xmmword_1E4154CC0;
    *(_OWORD *)(v2 + 528) = xmmword_1E4154CD0;
    *(_OWORD *)(v2 + 544) = xmmword_1E4154CE0;
    *(void *)(v2 + 560) = 0x401F404C05921038;
    *(unsigned char *)(v2 + 568) = 1;
    CFNumberRef result = 54.3812;
    *(_OWORD *)(v2 + 576) = xmmword_1E4154CF0;
  }
  return result;
}

float TI::Favonius::CMGeometryParameters::kb_points_per_mm(TI::Favonius::CMGeometryParameters *this)
{
  return flt_1E4154A10[s_interface_idiom_is_pad == 0];
}

float TI::Favonius::CMGeometryParameters::kb_mm_per_point(TI::Favonius::CMGeometryParameters *this)
{
  uint64_t v1 = &kTIACMessageHasNoCorrectionSymbol;
  {
    uint64_t v1 = &kTIACMessageHasNoCorrectionSymbol;
    if (v3)
    {
      TI::Favonius::CMGeometryParameters::kb_mm_per_point(void)::mm_per_point = dword_1E4154A18[s_interface_idiom_is_pad == 0];
      uint64_t v1 = &kTIACMessageHasNoCorrectionSymbol;
    }
  }
  return *((float *)v1 + 470);
}

float TI::Favonius::CMGeometryParameters::kb_mm_to_points(TI::Favonius::CMGeometryParameters *this, float a2)
{
  return flt_1E4154A10[s_interface_idiom_is_pad == 0] * a2;
}

float TI::Favonius::CMGeometryParameters::kb_points_to_mm(TI::Favonius::CMGeometryParameters *this, float a2)
{
  return TI::Favonius::CMGeometryParameters::kb_mm_per_point(this) * a2;
}

uint64_t TI::Favonius::CMGeometryParameters::CMGeometryParameters(uint64_t a1, TI::Favonius::KeyboardLayout **a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  unint64_t v5 = *((unsigned int *)*a2 + 50);
  BOOL v7 = v5 > 0xB || v5 > (unint64_t)((uint64_t)(*((void *)*a2 + 2) - *((void *)*a2 + 1)) >> 3) >> 1;
  *(unsigned char *)a1 = v7;
  *(unsigned char *)(a1 + 1) = TI::Favonius::KeyboardLayout::is_indic_alphabetic(v4);
  long long v8 = (TI::Favonius::KeyboardLayout *)((char *)*a2 + 208);
  KB::String::String((KB::String *)v18, "Zhuyin-Grid");
  BOOL v9 = KB::String::equal(v8, (const KB::String *)v18, 1);
  if (v19 && v18[6] == 1) {
    free(v19);
  }
  *(unsigned char *)(a1 + 2) = v9;
  float v10 = TI::Favonius::KeyboardLayout::median_key_half_width(*a2) / 15.0;
  v11.i32[0] = 1.0;
  if (v10 >= 1.0)
  {
    *(float *)v11.i32 = v10;
    if (v10 > 4.0) {
      v11.i32[0] = 4.0;
    }
  }
  int32x4_t v17 = v11;
  unsigned int v12 = s_interface_idiom_is_pad == 0;
  float v13 = powf(*(float *)v11.i32, 0.66);
  int8x16_t v14 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v12)), 0x1FuLL));
  int32x4_t v15 = v17;
  *(float *)&v15.i32[1] = v13;
  *(float32x4_t *)(a1 + 4) = vmulq_f32((float32x4_t)vzip1q_s32(v15, vdupq_lane_s32(*(int32x2_t *)v15.i8, 1)), (float32x4_t)vbslq_s8(v14, (int8x16_t)xmmword_1E4154D40, (int8x16_t)xmmword_1E4154D30));
  *(float32x4_t *)(a1 + 20) = vmulq_n_f32((float32x4_t)vbslq_s8(v14, (int8x16_t)xmmword_1E4154D60, (int8x16_t)xmmword_1E4154D50), v13);
  return a1;
}

BOOL TI::Favonius::KeyboardLayout::is_indic_alphabetic(TI::Favonius::KeyboardLayout *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v4, (TI::Favonius::KeyboardLayout *)((char *)this + 208));
  BOOL isAlphabeticLayout = TI::IndicUtils::isAlphabeticLayout((KB::String *)v4);
  if (v5) {
    BOOL v2 = v4[6] == 1;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    free(v5);
  }
  return isAlphabeticLayout;
}

double TI::Favonius::CMGeometryParametersForTouch::CMGeometryParametersForTouch(TI::Favonius::CMGeometryParametersForTouch *this)
{
  *(void *)&double result = 0x7F0000007FLL;
  *(void *)this = 0x7F0000007FLL;
  *((_DWORD *)this + 2) = 0;
  return result;
}

{
  double result;

  *(void *)&double result = 0x7F0000007FLL;
  *(void *)this = 0x7F0000007FLL;
  *((_DWORD *)this + 2) = 0;
  return result;
}

float TI::Favonius::CMGeometryParametersForTouch::CMGeometryParametersForTouch(float *a1, uint64_t a2, uint64_t a3, double a4)
{
  float v4 = *(float *)(*(void *)a3 + 24);
  double v5 = 1.0;
  double v6 = 1.0;
  if (v4 <= 12.0)
  {
    double v6 = 0.0;
    if (v4 > 6.5) {
      double v6 = (float)((float)(v4 + -6.5) / 5.5);
    }
  }
  if (a4 >= 0.15)
  {
    double v5 = 0.0;
    if (a4 < 0.35)
    {
      float v7 = (0.35 - a4) / 0.2;
      double v5 = v7;
    }
  }
  float v8 = v6 * 0.3 + v5 * (v6 * 0.7 + 1.0);
  if (v8 > 1.0) {
    float v8 = 1.0;
  }
  float v9 = *(float *)(a2 + 16) + (float)((float)(*(float *)(a2 + 20) - *(float *)(a2 + 16)) * v8);
  *a1 = -1.0 / (float)(v9 * (float)(v9 * 4.0));
  if (*(unsigned char *)a2) {
    float v10 = *(float *)(a2 + 24) + (float)((float)(*(float *)(a2 + 28) - *(float *)(a2 + 24)) * v8);
  }
  else {
    float v10 = *(float *)(a2 + 32);
  }
  a1[1] = -1.0 / (float)(v10 * (float)(v10 * 4.0));
  float v11 = 1.0;
  if (a4 >= 0.15)
  {
    float v11 = 0.0;
    if (a4 < 0.35) {
      float v11 = (0.35 - a4) / 0.2;
    }
  }
  float result = *(float *)(a2 + 8) + (float)((float)(*(float *)(a2 + 12) - *(float *)(a2 + 8)) * v11);
  a1[2] = result;
  return result;
}

float TI::Favonius::CMGeometryParametersForTouch::fuzzy_thumbness(uint64_t a1)
{
  float v1 = *(float *)(*(void *)a1 + 24);
  float result = 1.0;
  if (v1 <= 12.0)
  {
    float result = 0.0;
    if (v1 > 6.5) {
      return (float)(v1 + -6.5) / 5.5;
    }
  }
  return result;
}

float TI::Favonius::CMGeometryParametersForTouch::typing_quickness(TI::Favonius::CMGeometryParametersForTouch *this, double a2)
{
  float result = 1.0;
  if (a2 >= 0.15)
  {
    float result = 0.0;
    if (a2 < 0.35) {
      return (0.35 - a2) / 0.2;
    }
  }
  return result;
}

double TI::Favonius::CMGeometryParametersForTouch::bounded_touch_interval(TI::Favonius::CMGeometryParametersForTouch *this, double a2)
{
  double v2 = 0.15;
  if (a2 >= 0.15)
  {
    double v2 = 0.5;
    if (a2 <= 0.5) {
      return a2;
    }
  }
  return v2;
}

void *__Block_byref_object_copy__12747(void *result, void *a2)
{
  result[6] = 0;
  result[7] = 0;
  result[8] = 0;
  uint64_t v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  a2[6] = 0;
  a2[7] = 0;
  uint64_t v3 = result[8];
  result[8] = a2[8];
  a2[8] = v3;
  return result;
}

void *__Block_byref_object_dispose__12748(uint64_t a1)
{
  return WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::~Vector((void *)(a1 + 48));
}

uint64_t KB::CandidateFilterLookupContext::CandidateFilterLookupContext(uint64_t a1, const KB::Candidate *a2, const std::vector<unsigned int> *a3, const KB::LanguageModelContext *a4, const KB::String *a5, const KB::Candidate *a6, int a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  KB::Candidate::Candidate((KB::Candidate *)v28, a2);
  v26[0] = 0;
  char v27 = 0;
  std::vector<unsigned int>::vector(&v21, a3);
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v14, a4);
  KB::String::String((KB::String *)v24, a5);
  KB::Candidate::Candidate((KB::Candidate *)v23, a6);
  KB::CandidateFilterLookupContext::CandidateFilterLookupContext(a1, (uint64_t)v28, (const KB::Candidate *)v26, (uint64_t)&v21, (uint64_t)&v14, (KB::String *)v24, (uint64_t)v23, a7);
  KB::Candidate::~Candidate((KB::Candidate *)v23);
  if (v25 && v24[6] == 1) {
    free(v25);
  }
  long long v22 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v22);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v19);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v18);
  if (__p)
  {
    int32x4_t v17 = __p;
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v15);
  }
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
  if (v27) {
    KB::Candidate::~Candidate((KB::Candidate *)v26);
  }
  KB::Candidate::~Candidate((KB::Candidate *)v28);
  return a1;
}

{
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::vector<unsigned int> v21;
  void **v22;
  unsigned char v23[1000];
  unsigned char v24[8];
  void *v25;
  unsigned char v26[1000];
  char v27;
  unsigned char v28[1000];
  uint64_t v29;

  uint64_t v29 = *MEMORY[0x1E4F143B8];
  KB::Candidate::Candidate((KB::Candidate *)v28, a2);
  v26[0] = 0;
  char v27 = 0;
  std::vector<unsigned int>::vector(&v21, a3);
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v14, a4);
  KB::String::String((KB::String *)v24, a5);
  KB::Candidate::Candidate((KB::Candidate *)v23, a6);
  KB::CandidateFilterLookupContext::CandidateFilterLookupContext(a1, (uint64_t)v28, (const KB::Candidate *)v26, (uint64_t)&v21, (uint64_t)&v14, (KB::String *)v24, (uint64_t)v23, a7);
  KB::Candidate::~Candidate((KB::Candidate *)v23);
  if (v25 && v24[6] == 1) {
    free(v25);
  }
  long long v22 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v22);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v19);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v18);
  if (__p)
  {
    int32x4_t v17 = __p;
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v15);
  }
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
  if (v27) {
    KB::Candidate::~Candidate((KB::Candidate *)v26);
  }
  KB::Candidate::~Candidate((KB::Candidate *)v28);
  return a1;
}

uint64_t KB::CandidateFilterLookupContext::CandidateFilterLookupContext(uint64_t a1, uint64_t a2, const KB::Candidate *a3, uint64_t a4, uint64_t a5, KB::String *a6, uint64_t a7, int a8)
{
  uint64_t v15 = KB::Candidate::Candidate(a1, a2);
  *(unsigned char *)(v15 + 1000) = 0;
  *(unsigned char *)(v15 + 2000) = 0;
  if (*((unsigned char *)a3 + 1000))
  {
    KB::Candidate::Candidate((KB::Candidate *)(a1 + 1000), a3);
    *(unsigned char *)(a1 + 2000) = 1;
  }
  *(void *)(a1 + 2024) = 0;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2008) = *(_OWORD *)a4;
  *(void *)(a1 + 2024) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  KB::LanguageModelContext::LanguageModelContext(a1 + 2032, a5);
  *(_DWORD *)(a1 + 2136) = 0x100000;
  *(_WORD *)(a1 + 2140) = 0;
  *(unsigned char *)(a1 + 2142) = 0;
  *(void *)(a1 + 2144) = 0;
  KB::String::operator=(a1 + 2136, a6);
  KB::Candidate::Candidate(a1 + 2168, a7);
  *(_DWORD *)(a1 + 3168) = a8;
  *(_DWORD *)(a1 + 3172) = 0;
  *(unsigned char *)(a1 + 3176) = 0;
  return a1;
}

KB::UserDictionary *KB::UserDictionary::UserDictionary(KB::UserDictionary *this, const KB::String *a2, const __CFArray *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((_DWORD *)this + 22) = 0;
  CFArrayRef v5 = a3;
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  float v7 = (const void *)*MEMORY[0x1E4F72458];
  KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)a2);
  float v8 = value;
  CFDictionarySetValue(Mutable, v7, value);
  if (v8) {
    CFRelease(v8);
  }
  float v9 = NSString;
  float v10 = [MEMORY[0x1E4F29128] UUID];
  float v11 = [v10 UUIDString];
  unsigned int v12 = [v9 stringWithFormat:@"TextInput-TextReplacement-%@", v11];

  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72460], v12);
  uint64_t Transient = LXLexiconCreateTransient();
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
  *(void *)this = Transient;
  uint64_t v14 = [(__CFArray *)v5 count];
  if (v14)
  {
    unint64_t v15 = v14;
    for (unint64_t i = 0; i < v15; unint64_t i = v18 + 1)
    {
      int32x4_t v17 = [(__CFArray *)v5 objectAtIndex:i];
      unint64_t v18 = i + 1;
      uint64_t v19 = [(__CFArray *)v5 objectAtIndex:v18];
      if ([(KB *)v17 length]
        && (unint64_t)[(KB *)v17 length] <= 0x3FFC
        && (unint64_t)[(KB *)v19 length] <= 0x40)
      {
        KB::utf8_string(v17, (uint64_t)&value);
        unsigned int v20 = WORD2(value);
        if (!WORD2(value))
        {
          KB::String::compute_length((unsigned __int16 *)&value);
          unsigned int v20 = WORD2(value);
        }
        if (v20 <= 0x80 && LXLexiconAdd()) {
          LXLexiconIncrementUsageCount();
        }
        if ([(KB *)v19 length] && ([(KB *)v19 isEqualToString:v17] & 1) == 0)
        {
          KB::utf8_string(v19, (uint64_t)v23);
          KB::lower_string((KB *)v23, 0, (KB::String *)v25);
          if (v24 && v23[6] == 1) {
            free(v24);
          }
          unsigned int v21 = v26;
          if (!v26)
          {
            KB::String::compute_length(v25);
            unsigned int v21 = v26;
          }
          if (*((_DWORD *)this + 22) < v21)
          {
            if (!v21)
            {
              KB::String::compute_length(v25);
              unsigned int v21 = v26;
            }
            *((_DWORD *)this + 22) = v21;
          }
          if (LXLexiconAdd()) {
            LXLexiconIncrementUsageCount();
          }
          KB::UserDictionary::set_conversion_for_shortcut(this, (const KB::String *)v25, (const KB::String *)&value);
          if (v28 && v27 == 1) {
            free(v28);
          }
        }
        if (v30 && BYTE6(value) == 1) {
          free(v30);
        }
      }
    }
  }

  if (Mutable) {
    CFRelease(Mutable);
  }

  return this;
}

void KB::UserDictionary::set_conversion_for_shortcut(KB::UserDictionary *this, const KB::String *a2, const KB::String *a3)
{
  uint64_t v107[3] = *MEMORY[0x1E4F143B8];
  KB::lower_string(a2, 0, (KB::String *)v102);
  if (v104) {
    double v6 = (KB::String *)v104;
  }
  else {
    double v6 = (KB::String *)v105;
  }
  unsigned int v7 = KB::String::hash(v6, (const char *)v102[0]);
  unint64_t v8 = v7;
  unint64_t v9 = *((void *)this + 2);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v9 <= v7) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unsigned int v12 = *(void ***)(*((void *)this + 1) + 8 * v3);
    if (v12)
    {
      float v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (v13 + 16 == (char *)v102 || KB::String::equal((KB::String *)(v13 + 16), (const KB::String *)v102, 1)) {
              goto LABEL_78;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          float v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v15 = (void *)((char *)this + 24);
  float v13 = (char *)operator new(0x48uLL);
  *(void *)float v13 = 0;
  *((void *)v13 + 1) = v8;
  KB::String::String((KB::String *)(v13 + 16), (const KB::String *)v102);
  *((void *)v13 + 6) = 0;
  *((void *)v13 + 7) = 0;
  *((void *)v13 + 8) = 0;
  float v16 = (float)(unint64_t)(*((void *)this + 4) + 1);
  float v17 = *((float *)this + 10);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *((void *)this + 2);
    if (*(void *)&prime > v9) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)this + 4) / *((float *)this + 10));
      if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)this + 2);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            goto LABEL_210;
          }
          long long v22 = operator new(8 * *(void *)&prime);
          long long v23 = (void *)*((void *)this + 1);
          *((void *)this + 1) = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)this + 2) = prime;
          do
            *(void *)(*((void *)this + 1) + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          long long v25 = (void *)*v15;
          if (*v15)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*((void *)this + 1) + 8 * v26) = v15;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  uint64_t v33 = *((void *)this + 1);
                  if (!*(void *)(v33 + 8 * v32))
                  {
                    *(void *)(v33 + 8 * v32) = v25;
                    goto LABEL_59;
                  }
                  *long long v25 = *v31;
                  *uint64_t v31 = **(void **)(*((void *)this + 1) + 8 * v32);
                  **(void **)(*((void *)this + 1) + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_59:
                long long v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_63;
        }
        unint64_t v90 = (void *)*((void *)this + 1);
        *((void *)this + 1) = 0;
        if (v90) {
          operator delete(v90);
        }
        unint64_t v9 = 0;
        *((void *)this + 2) = 0;
      }
    }
LABEL_63:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v34 = *((void *)this + 1);
  int v35 = *(void **)(v34 + 8 * v3);
  if (v35)
  {
    *(void *)float v13 = *v35;
LABEL_76:
    *int v35 = v13;
    goto LABEL_77;
  }
  *(void *)float v13 = *v15;
  *unint64_t v15 = v13;
  *(void *)(v34 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v36 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9) {
        v36 %= v9;
      }
    }
    else
    {
      v36 &= v9 - 1;
    }
    int v35 = (void *)(*((void *)this + 1) + 8 * v36);
    goto LABEL_76;
  }
LABEL_77:
  ++*((void *)this + 4);
LABEL_78:
  unint64_t v37 = *((void *)v13 + 8);
  float v38 = (KB::String *)*((void *)v13 + 7);
  if ((unint64_t)v38 >= v37)
  {
    uint64_t v40 = *((void *)v13 + 6);
    uint64_t v41 = ((uint64_t)v38 - v40) >> 5;
    if ((unint64_t)(v41 + 1) >> 59) {
      abort();
    }
    uint64_t v42 = v37 - v40;
    uint64_t v43 = v42 >> 4;
    if (v42 >> 4 <= (unint64_t)(v41 + 1)) {
      uint64_t v43 = v41 + 1;
    }
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v44 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v43;
    }
    v107[2] = v13 + 64;
    if (v44) {
      unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v44);
    }
    else {
      uint64_t v45 = 0;
    }
    long long v46 = (char *)(v44 + 32 * v41);
    v106[0] = (char *)v44;
    v106[1] = v46;
    v107[1] = v44 + 32 * v45;
    KB::String::String((KB::String *)v46, a3);
    v107[0] = v46 + 32;
    std::vector<KB::String>::__swap_out_circular_buffer((uint64_t)(v13 + 48), v106);
    uint64_t v39 = (char *)*((void *)v13 + 7);
    std::__split_buffer<KB::String>::~__split_buffer((uint64_t)v106);
  }
  else
  {
    uint64_t v39 = (char *)KB::String::String(v38, a3) + 32;
  }
  *((void *)v13 + 7) = v39;
  int v47 = v102[0];
  if (v104) {
    unint64_t v48 = (unint64_t)v104;
  }
  else {
    unint64_t v48 = (unint64_t)v105;
  }
  v106[0] = (char *)v48;
  LODWORD(v106[1]) = v102[0];
  HIDWORD(v106[1]) = v102[0];
  LODWORD(v107[0]) = 0;
  KB::String::iterator::initialize((uint64_t *)v106);
  long long v98 = *(_OWORD *)v106;
  uint64_t v99 = v107[0];
  KB::String::iterator::operator--((KB::String::iterator *)&v98);
  *(void *)&long long v100 = v48;
  DWORD2(v100) = 0;
  HIDWORD(v100) = v47;
  LODWORD(v101) = 0;
  KB::String::iterator::initialize((uint64_t *)&v100);
  KB::String::String((KB::String *)v106, (const KB::String::iterator *)&v100, (const KB::String::iterator *)&v98);
  if (v106[1]) {
    long long v49 = (KB::String *)v106[1];
  }
  else {
    long long v49 = (KB::String *)v107;
  }
  unsigned int v50 = KB::String::hash(v49, (const char *)LOWORD(v106[0]));
  unint64_t v51 = v50;
  unint64_t v52 = *((void *)this + 7);
  if (v52)
  {
    uint8x8_t v53 = (uint8x8_t)vcnt_s8((int8x8_t)v52);
    v53.i16[0] = vaddlv_u8(v53);
    unint64_t v54 = v53.u32[0];
    if (v53.u32[0] > 1uLL)
    {
      unint64_t v48 = v50;
      if (v52 <= v50) {
        unint64_t v48 = v50 % v52;
      }
    }
    else
    {
      unint64_t v48 = (v52 - 1) & v50;
    }
    unint64_t v55 = *(void ***)(*((void *)this + 6) + 8 * v48);
    if (v55)
    {
      uint64_t v56 = *v55;
      if (*v55)
      {
        do
        {
          unint64_t v57 = v56[1];
          if (v57 == v51)
          {
            if (v56 + 2 == v106 || KB::String::equal((KB::String *)(v56 + 2), (const KB::String *)v106, 1)) {
              goto LABEL_170;
            }
          }
          else
          {
            if (v54 > 1)
            {
              if (v57 >= v52) {
                v57 %= v52;
              }
            }
            else
            {
              v57 &= v52 - 1;
            }
            if (v57 != v48) {
              break;
            }
          }
          uint64_t v56 = (void *)*v56;
        }
        while (v56);
      }
    }
  }
  BOOL v58 = (void *)((char *)this + 64);
  uint64_t v56 = operator new(0x50uLL);
  *uint64_t v56 = 0;
  v56[1] = v51;
  KB::String::String((KB::String *)(v56 + 2), (const KB::String *)v106);
  *((_DWORD *)v56 + 12) = 0x100000;
  *((_WORD *)v56 + 26) = 0;
  *((unsigned char *)v56 + 54) = 0;
  v56[7] = 0;
  *((unsigned char *)v56 + 64) = 0;
  float v59 = (float)(unint64_t)(*((void *)this + 9) + 1);
  float v60 = *((float *)this + 20);
  if (!v52 || (float)(v60 * (float)v52) < v59)
  {
    BOOL v61 = 1;
    if (v52 >= 3) {
      BOOL v61 = (v52 & (v52 - 1)) != 0;
    }
    unint64_t v62 = v61 | (2 * v52);
    unint64_t v63 = vcvtps_u32_f32(v59 / v60);
    if (v62 <= v63) {
      int8x8_t v64 = (int8x8_t)v63;
    }
    else {
      int8x8_t v64 = (int8x8_t)v62;
    }
    if (*(void *)&v64 == 1)
    {
      int8x8_t v64 = (int8x8_t)2;
    }
    else if ((*(void *)&v64 & (*(void *)&v64 - 1)) != 0)
    {
      int8x8_t v64 = (int8x8_t)std::__next_prime(*(void *)&v64);
    }
    unint64_t v52 = *((void *)this + 7);
    if (*(void *)&v64 > v52)
    {
LABEL_126:
      if (!(*(void *)&v64 >> 61))
      {
        uint64_t v65 = operator new(8 * *(void *)&v64);
        long long v66 = (void *)*((void *)this + 6);
        *((void *)this + 6) = v65;
        if (v66) {
          operator delete(v66);
        }
        uint64_t v67 = 0;
        *((int8x8_t *)this + 7) = v64;
        do
          *(void *)(*((void *)this + 6) + 8 * v67++) = 0;
        while (*(void *)&v64 != v67);
        long long v68 = (void *)*v58;
        if (*v58)
        {
          unint64_t v69 = v68[1];
          uint8x8_t v70 = (uint8x8_t)vcnt_s8(v64);
          v70.i16[0] = vaddlv_u8(v70);
          if (v70.u32[0] > 1uLL)
          {
            if (v69 >= *(void *)&v64) {
              v69 %= *(void *)&v64;
            }
          }
          else
          {
            v69 &= *(void *)&v64 - 1;
          }
          *(void *)(*((void *)this + 6) + 8 * v69) = v58;
          long long v74 = (void *)*v68;
          if (*v68)
          {
            do
            {
              unint64_t v75 = v74[1];
              if (v70.u32[0] > 1uLL)
              {
                if (v75 >= *(void *)&v64) {
                  v75 %= *(void *)&v64;
                }
              }
              else
              {
                v75 &= *(void *)&v64 - 1;
              }
              if (v75 != v69)
              {
                uint64_t v76 = *((void *)this + 6);
                if (!*(void *)(v76 + 8 * v75))
                {
                  *(void *)(v76 + 8 * v75) = v68;
                  goto LABEL_151;
                }
                *long long v68 = *v74;
                void *v74 = **(void **)(*((void *)this + 6) + 8 * v75);
                **(void **)(*((void *)this + 6) + 8 * v75) = v74;
                long long v74 = v68;
              }
              unint64_t v75 = v69;
LABEL_151:
              long long v68 = v74;
              long long v74 = (void *)*v74;
              unint64_t v69 = v75;
            }
            while (v74);
          }
        }
        unint64_t v52 = (unint64_t)v64;
        goto LABEL_155;
      }
LABEL_210:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    if (*(void *)&v64 < v52)
    {
      unint64_t v71 = vcvtps_u32_f32((float)*((unint64_t *)this + 9) / *((float *)this + 20));
      if (v52 < 3 || (uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)v52), v72.i16[0] = vaddlv_u8(v72), v72.u32[0] > 1uLL))
      {
        unint64_t v71 = std::__next_prime(v71);
      }
      else
      {
        uint64_t v73 = 1 << -(char)__clz(v71 - 1);
        if (v71 >= 2) {
          unint64_t v71 = v73;
        }
      }
      if (*(void *)&v64 <= v71) {
        int8x8_t v64 = (int8x8_t)v71;
      }
      if (*(void *)&v64 >= v52)
      {
        unint64_t v52 = *((void *)this + 7);
      }
      else
      {
        if (v64) {
          goto LABEL_126;
        }
        float v91 = (void *)*((void *)this + 6);
        *((void *)this + 6) = 0;
        if (v91) {
          operator delete(v91);
        }
        unint64_t v52 = 0;
        *((void *)this + 7) = 0;
      }
    }
LABEL_155:
    if ((v52 & (v52 - 1)) != 0)
    {
      if (v52 <= v51) {
        unint64_t v48 = v51 % v52;
      }
      else {
        unint64_t v48 = v51;
      }
    }
    else
    {
      unint64_t v48 = (v52 - 1) & v51;
    }
  }
  uint64_t v77 = *((void *)this + 6);
  long long v78 = *(void **)(v77 + 8 * v48);
  if (v78)
  {
    *uint64_t v56 = *v78;
LABEL_168:
    void *v78 = v56;
    goto LABEL_169;
  }
  *uint64_t v56 = *v58;
  void *v58 = v56;
  *(void *)(v77 + 8 * v48) = v58;
  if (*v56)
  {
    unint64_t v79 = *(void *)(*v56 + 8);
    if ((v52 & (v52 - 1)) != 0)
    {
      if (v79 >= v52) {
        v79 %= v52;
      }
    }
    else
    {
      v79 &= v52 - 1;
    }
    long long v78 = (void *)(*((void *)this + 6) + 8 * v79);
    goto LABEL_168;
  }
LABEL_169:
  ++*((void *)this + 9);
LABEL_170:
  int v80 = *((unsigned __int16 *)v56 + 24);
  uint64_t v81 = (char *)v56[7];
  if (!v81) {
    uint64_t v81 = (char *)(v56 + 8);
  }
  *(void *)&long long v96 = v81;
  DWORD2(v96) = 0;
  HIDWORD(v96) = v80;
  LODWORD(v97) = 0;
  KB::String::iterator::initialize((uint64_t *)&v96);
  int v82 = *((unsigned __int16 *)v56 + 24);
  uint64_t v83 = v56[7];
  if (!v83) {
    uint64_t v83 = (uint64_t)(v56 + 8);
  }
  uint64_t v92 = v83;
  int v93 = v82;
  int v94 = v82;
  int v95 = 0;
  KB::String::iterator::initialize(&v92);
  unsigned int v84 = v99;
  long long v100 = v96;
  uint64_t v101 = v97;
  int v85 = v93;
  int v86 = DWORD2(v96);
  if (DWORD2(v96) != v93 && v101 != v99)
  {
    do
    {
      KB::String::iterator::operator++((uint64_t *)&v100);
      int v86 = DWORD2(v100);
    }
    while (DWORD2(v100) != v85 && v101 != v84);
  }
  int v88 = *((unsigned __int16 *)v56 + 24);
  long long v89 = (char *)v56[7];
  if (!v89) {
    long long v89 = (char *)(v56 + 8);
  }
  *(void *)&long long v100 = v89;
  DWORD2(v100) = v88;
  HIDWORD(v100) = v88;
  LODWORD(v101) = 0;
  KB::String::iterator::initialize((uint64_t *)&v100);
  if (v86 == DWORD2(v100)) {
    KB::String::append((KB::String *)(v56 + 6), v84);
  }
  if (v106[1] && BYTE6(v106[0]) == 1) {
    free(v106[1]);
  }
  if (v104)
  {
    if (v103 == 1) {
      free(v104);
    }
  }
}

uint64_t KB::UserDictionary::trie(KB::UserDictionary *this)
{
  return *(void *)this;
}

void KB::UserDictionary::conversions_for_shortcut(uint64_t a1, KB *this, uint64_t a3)
{
  unsigned __int16 v19[2] = *MEMORY[0x1E4F143B8];
  KB::lower_string(this, 0, (KB::String *)v16);
  if (v18) {
    CFArrayRef v5 = (KB::String *)v18;
  }
  else {
    CFArrayRef v5 = (KB::String *)v19;
  }
  unsigned int v6 = KB::String::hash(v5, (const char *)v16[0]);
  unint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v7 <= v6) {
        unint64_t v11 = v6 % v7;
      }
    }
    else
    {
      unint64_t v11 = (v7 - 1) & v6;
    }
    unsigned int v12 = *(uint64_t ***)(*(void *)(a1 + 8) + 8 * v11);
    if (v12)
    {
      float v13 = (uint64_t **)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = (unint64_t)v13[1];
          if (v14 == v8)
          {
            if (v13 + 2 == (uint64_t **)v16 || KB::String::equal((KB::String *)(v13 + 2), (const KB::String *)v16, 1))
            {
              if (v13 + 6 != (uint64_t **)a3) {
                std::vector<KB::String>::__assign_with_size[abi:nn180100]<KB::String*,KB::String*>(a3, (KB::String *)v13[6], (KB::String *)v13[7], ((char *)v13[7] - (char *)v13[6]) >> 5);
              }
              break;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v14 >= v7) {
                v14 %= v7;
              }
            }
            else
            {
              v14 &= v7 - 1;
            }
            if (v14 != v11) {
              break;
            }
          }
          float v13 = (uint64_t **)*v13;
        }
        while (v13);
      }
    }
  }
  if (v18) {
    BOOL v15 = v17 == 1;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15) {
    free(v18);
  }
}

uint64_t KB::UserDictionary::single_character_completions_for_shortcut_prefix@<X0>(KB::UserDictionary *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 6) = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  if (*((void *)a2 + 1)) {
    unsigned int v6 = (KB::String *)*((void *)a2 + 1);
  }
  else {
    unsigned int v6 = (const KB::String *)((char *)a2 + 16);
  }
  uint64_t result = KB::String::hash(v6, (const char *)*(unsigned __int16 *)a2);
  unint64_t v8 = *((void *)this + 7);
  if (v8)
  {
    uint64_t v9 = result;
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = result;
      if (v8 <= result) {
        unint64_t v12 = result % v8;
      }
    }
    else
    {
      unint64_t v12 = (v8 - 1) & result;
    }
    float v13 = *(void **)(*((void *)this + 6) + 8 * v12);
    if (v13)
    {
      unint64_t v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (v14 + 2 == (void *)a2
              || (uint64_t result = KB::String::equal((KB::String *)(v14 + 2), a2, 1), (result & 1) != 0))
            {
              return (uint64_t)KB::String::operator=((KB::String *)a3, (KB::String *)(v14 + 6));
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v15 >= v8) {
                v15 %= v8;
              }
            }
            else
            {
              v15 &= v8 - 1;
            }
            if (v15 != v12) {
              return result;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  return result;
}

uint64_t KB::UserDictionary::maximum_shortcut_length(KB::UserDictionary *this)
{
  return *((unsigned int *)this + 22);
}

void KB::match_shortcut_conversion_case_with_input(KB *this@<X0>, const KB::String *a2@<X1>, KB::String *a3@<X8>)
{
  if (*(_WORD *)this) {
    BOOL v6 = *(unsigned __int16 *)a2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    KB::String::String(a3, a2);
  }
  else
  {
    uint64_t v8 = KB::ns_string(a2, a2);
    uint64_t v9 = (void *)v8;
    if (v8)
    {
      uint8x8_t v10 = [MEMORY[0x1E4F28B88] lowercaseLetterCharacterSet];
      unint64_t v11 = [MEMORY[0x1E4F28B88] uppercaseLetterCharacterSet];
      [v9 rangeOfCharacterFromSet:v10];
      if (v12 && ([v9 rangeOfCharacterFromSet:v11], !v13))
      {
        unint64_t v14 = KB::ns_string(this, 0);
        unint64_t v15 = v14;
        if (v14
          && ([v14 rangeOfCharacterFromSet:v11], v16)
          && (([v15 rangeOfCharacterFromSet:v10], v17)
           || (unint64_t)[v15 length] < 2)
          && ([v15 capitalizedString],
              BOOL v18 = objc_claimAutoreleasedReturnValue(),
              char v19 = [v15 isEqualToString:v18],
              v18,
              (v19 & 1) != 0))
        {
          uint64_t v31 = 0;
          unint64_t v32 = &v31;
          uint64_t v33 = 0x4012000000;
          uint64_t v34 = __Block_byref_object_copy__12782;
          int v35 = __Block_byref_object_dispose__12783;
          unint64_t v36 = "";
          long long v37 = xmmword_1E4154B50;
          uint64_t v20 = [v9 length];
          v30[0] = MEMORY[0x1E4F143A8];
          v30[1] = 3221225472;
          unsigned __int16 v30[2] = ___ZN2KB41match_shortcut_conversion_case_with_inputERKNS_6StringES2__block_invoke;
          v30[3] = &unk_1E6E2D2F0;
          void v30[4] = &v31;
          objc_msgSend(v9, "enumerateSubstringsInRange:options:usingBlock:", 0, v20, 515, v30);
          uint64_t v21 = v32[6];
          if (v21 == 0x7FFFFFFFFFFFFFFFLL || (uint64_t v22 = v32[7]) == 0)
          {
            KB::String::String(a3, a2);
          }
          else
          {
            if (v21 || v22 != [v9 length])
            {
              uint64_t v24 = [MEMORY[0x1E4F28E78] stringWithString:v9];
              uint64_t v26 = v32[6];
              uint64_t v27 = v32[7];
              unint64_t v28 = objc_msgSend(v9, "substringWithRange:", v26, v27);
              uint8x8_t v29 = [v28 capitalizedString];
              objc_msgSend(v24, "replaceCharactersInRange:withString:", v26, v27, v29);

              uint64_t v25 = (uint64_t)a3;
              long long v23 = (KB *)v24;
            }
            else
            {
              long long v23 = [v9 capitalizedString];
              uint64_t v24 = v23;
              uint64_t v25 = (uint64_t)a3;
            }
            KB::utf8_string(v23, v25);
          }
          _Block_object_dispose(&v31, 8);
        }
        else
        {
          KB::String::String(a3, a2);
        }
      }
      else
      {
        KB::String::String(a3, a2);
      }
    }
    else
    {
      KB::String::String(a3, a2);
    }
  }
}

__n128 __Block_byref_object_copy__12782(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t ___ZN2KB41match_shortcut_conversion_case_with_inputERKNS_6StringES2__block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  *a7 = 1;
  uint64_t v7 = *(void *)(*(void *)(result + 32) + 8);
  *(void *)(v7 + 48) = a3;
  *(void *)(v7 + 56) = a4;
  return result;
}

BOOL KB::should_match_input_with_shortcut(KB *this, const KB::String *a2, const KB::String *a3)
{
  if (!*(_WORD *)a2) {
    return 0;
  }
  float v4 = KB::ns_string(a2, a2);
  CFArrayRef v5 = [MEMORY[0x1E4F28B88] letterCharacterSet];
  BOOL v6 = [v4 stringByTrimmingCharactersInSet:v5];
  BOOL v11 = 1;
  if ([v6 length])
  {
    uint64_t v8 = KB::ns_string(this, v7);
    uint64_t v9 = [v8 stringByTrimmingCharactersInSet:v5];
    int v10 = [v6 isEqualToString:v9];

    if (!v10) {
      BOOL v11 = 0;
    }
  }

  return v11;
}

atomic_uint *TI::Favonius::SearchNodeSourceQueue::clone_search_substituting_touch(char **a1, atomic_uint ***a2, atomic_uint ***a3, atomic_uint ***a4, atomic_uint **a5)
{
  uint64_t v9 = *a5;
  *a5 = 0;
  uint8x8_t v70 = v9;
  a1[1] = *a1;
  int v10 = (int64x2_t *)(a1 + 3);
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__base_destruct_at_end[abi:nn180100]((unsigned int *)a1 + 6, (uint64_t)a1[3]);
  BOOL v11 = *a3;
  uint64_t v12 = a3[1];
  unint64_t v13 = v12 - *a3 + a2[1] - *a2 + a4[1] - *a4;
  if (v13 > (uint64_t)&a1[5][-v10->i64[0]] >> 3)
  {
    if (v13 >> 61) {
      goto LABEL_75;
    }
    uint64_t v14 = (uint64_t)&a1[4][-v10->i64[0]];
    unint64_t v75 = a1 + 5;
    unint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v13);
    BOOL v18 = a1[3];
    uint64_t v17 = a1[4];
    if (v17 == v18)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v17);
      char v19 = &v15[v14 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      char v19 = &v15[v14 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v20 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)uint64_t v17 = 0;
        *((void *)v19 - 1) = v20;
        v19 -= 8;
      }
      while (v17 != v18);
      int64x2_t v21 = *v10;
    }
    a1[3] = v19;
    a1[4] = &v15[v14 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v73 = v21;
    uint64_t v22 = a1[5];
    a1[5] = &v15[8 * v16];
    unint64_t v74 = (unint64_t)v22;
    uint64_t v72 = v21.i64[0];
    std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v72);
    BOOL v11 = *a3;
    uint64_t v12 = a3[1];
  }
  TI::Favonius::SearchNodeSourceQueue::add_clone_substituting_touch_to_strong_refs<std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> const*>>((unsigned int *)a1, v11, v12, (uint64_t *)&v70);
  TI::Favonius::SearchNodeSourceQueue::add_clone_substituting_touch_to_strong_refs<std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> const*>>((unsigned int *)a1, *a4, a4[1], (uint64_t *)&v70);
  long long v23 = *a2;
  uint64_t v24 = a2[1];
  if (*a2 != v24)
  {
    while (1)
    {
      uint64_t v25 = *v23;
      if (*v23) {
        atomic_fetch_add(v25 + 2, 1u);
      }
      unint64_t v71 = (unsigned int *)v70;
      if (v70) {
        atomic_fetch_add(v70 + 2, 1u);
      }
      (*(void (**)(uint64_t *__return_ptr, atomic_uint *, unsigned int **))(*(void *)v25 + 24))(&v72, v25, &v71);
      uint64_t v26 = v72;
      uint64_t v72 = 0;
      if (!v71) {
        goto LABEL_17;
      }
      unsigned int v27 = atomic_load(v71 + 2);
      if (v27 == 1) {
        break;
      }
      atomic_fetch_add((atomic_uint *volatile)v71 + 2, 0xFFFFFFFF);
      if (v26)
      {
LABEL_20:
        uint8x8_t v29 = a1[4];
        unint64_t v28 = (unint64_t)a1[5];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v31 = (char *)v10->i64[0];
          uint64_t v32 = (uint64_t)&v29[-v10->i64[0]] >> 3;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61) {
            goto LABEL_75;
          }
          uint64_t v34 = v28 - (void)v31;
          if (v34 >> 2 > v33) {
            unint64_t v33 = v34 >> 2;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          unint64_t v75 = a1 + 5;
          if (v35)
          {
            unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v35);
            uint64_t v31 = a1[3];
            uint8x8_t v29 = a1[4];
          }
          else
          {
            uint64_t v36 = 0;
          }
          long long v37 = (char *)(v35 + 8 * v32);
          unint64_t v38 = v35 + 8 * v36;
          unint64_t v74 = v38;
          *(void *)long long v37 = 0;
          v73.i64[1] = (uint64_t)(v37 + 8);
          if (v29 == v31)
          {
            uint64_t v30 = v37 + 8;
          }
          else
          {
            do
            {
              uint64_t v39 = *((void *)v29 - 1);
              v29 -= 8;
              *(void *)uint8x8_t v29 = 0;
              *((void *)v37 - 1) = v39;
              v37 -= 8;
            }
            while (v29 != v31);
            uint64_t v30 = (char *)v73.i64[1];
            unint64_t v38 = v74;
          }
          long long v40 = *(_OWORD *)(a1 + 3);
          a1[3] = v37;
          a1[4] = v30;
          int64x2_t v73 = (int64x2_t)v40;
          uint64_t v41 = a1[5];
          a1[5] = (char *)v38;
          unint64_t v74 = (unint64_t)v41;
          uint64_t v72 = v40;
          std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v72);
        }
        else
        {
          *(void *)uint8x8_t v29 = 0;
          uint64_t v30 = v29 + 8;
        }
        a1[4] = v30;
        uint64_t v42 = (unsigned int *)*((void *)v30 - 1);
        *((void *)v30 - 1) = v26;
        if (v42)
        {
          unsigned int v43 = atomic_load(v42 + 2);
          if (v43 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v42 + 8))(v42);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v42 + 2, 0xFFFFFFFF);
          }
        }
      }
LABEL_40:
      unsigned int v44 = atomic_load((unsigned int *)v25 + 2);
      if (v44 == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v25 + 8))(v25);
      }
      else {
        atomic_fetch_add(v25 + 2, 0xFFFFFFFF);
      }
      if (++v23 == v24) {
        goto LABEL_44;
      }
    }
    (*(void (**)(void))(*(void *)v71 + 8))();
LABEL_17:
    if (v26) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_44:
  uint64_t v45 = a1[4] - a1[3];
  if (v45 >> 3 > (unint64_t)((a1[2] - *a1) >> 3))
  {
    if ((v45 & 0x8000000000000000) == 0)
    {
      int64_t v46 = a1[1] - *a1;
      int v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v45 >> 3);
      unint64_t v48 = &v47[v46 & 0xFFFFFFFFFFFFFFF8];
      unsigned int v50 = &v47[8 * v49];
      unint64_t v52 = *a1;
      unint64_t v51 = a1[1];
      uint8x8_t v53 = v48;
      if (v51 != *a1)
      {
        do
        {
          uint64_t v54 = *((void *)v51 - 1);
          v51 -= 8;
          *((void *)v53 - 1) = v54;
          v53 -= 8;
        }
        while (v51 != v52);
        unint64_t v51 = *a1;
      }
      *a1 = v53;
      a1[1] = v48;
      a1[2] = v50;
      if (v51) {
        operator delete(v51);
      }
      goto LABEL_51;
    }
LABEL_75:
    abort();
  }
LABEL_51:
  unint64_t v55 = a1[3];
  if (v55 != a1[4])
  {
    uint64_t v56 = a1[1];
    do
    {
      uint64_t v57 = *(void *)v55;
      unint64_t v58 = (unint64_t)a1[2];
      if ((unint64_t)v56 >= v58)
      {
        uint64_t v59 = (v56 - *a1) >> 3;
        if ((unint64_t)(v59 + 1) >> 61) {
          goto LABEL_75;
        }
        uint64_t v60 = v58 - (void)*a1;
        uint64_t v61 = v60 >> 2;
        if (v60 >> 2 <= (unint64_t)(v59 + 1)) {
          uint64_t v61 = v59 + 1;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v61;
        }
        if (v62) {
          unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v62);
        }
        else {
          uint64_t v63 = 0;
        }
        int8x8_t v64 = (char *)(v62 + 8 * v59);
        *(void *)int8x8_t v64 = v57;
        uint64_t v56 = v64 + 8;
        long long v66 = *a1;
        uint64_t v65 = a1[1];
        if (v65 != *a1)
        {
          do
          {
            uint64_t v67 = *((void *)v65 - 1);
            v65 -= 8;
            *((void *)v64 - 1) = v67;
            v64 -= 8;
          }
          while (v65 != v66);
          uint64_t v65 = *a1;
        }
        *a1 = v64;
        a1[1] = v56;
        a1[2] = (char *)(v62 + 8 * v63);
        if (v65) {
          operator delete(v65);
        }
      }
      else
      {
        *(void *)uint64_t v56 = v57;
        v56 += 8;
      }
      a1[1] = v56;
      v55 += 8;
    }
    while (v55 != a1[4]);
  }
  TI::Favonius::SearchNodeSourceQueue::make_heap((float *)a1);
  __n128 result = v70;
  if (v70)
  {
    unsigned int v69 = atomic_load((unsigned int *)v70 + 2);
    if (v69 == 1) {
      return (atomic_uint *)(*(uint64_t (**)(void))(*(void *)v70 + 8))();
    }
    else {
      atomic_fetch_add(v70 + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

unsigned int *TI::Favonius::SearchNodeSourceQueue::add_clone_substituting_touch_to_strong_refs<std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> const*>>(unsigned int *result, atomic_uint **a2, atomic_uint **a3, uint64_t *a4)
{
  if (a2 != a3)
  {
    BOOL v6 = a2;
    uint64_t v7 = result;
    unint64_t v28 = result + 10;
    while (1)
    {
      uint64_t v8 = *v6;
      if (*v6) {
        atomic_fetch_add(v8 + 2, 1u);
      }
      uint64_t v9 = *a4;
      uint8x8_t v29 = (unsigned int *)v9;
      if (v9) {
        atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
      }
      (*(void (**)(uint64_t *__return_ptr, atomic_uint *, unsigned int **))(*(void *)v8 + 24))(&v30, v8, &v29);
      __n128 result = v29;
      uint64_t v10 = v30;
      uint64_t v30 = 0;
      if (!v29) {
        goto LABEL_10;
      }
      unsigned int v11 = atomic_load(v29 + 2);
      if (v11 == 1) {
        break;
      }
      atomic_fetch_add((atomic_uint *volatile)v29 + 2, 0xFFFFFFFF);
      if (v10)
      {
LABEL_13:
        unint64_t v13 = (void *)*((void *)v7 + 4);
        unint64_t v12 = *((void *)v7 + 5);
        if ((unint64_t)v13 >= v12)
        {
          unint64_t v15 = (void *)*((void *)v7 + 3);
          uint64_t v16 = v13 - v15;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61) {
            abort();
          }
          uint64_t v18 = v12 - (void)v15;
          if (v18 >> 2 > v17) {
            unint64_t v17 = v18 >> 2;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          unint64_t v33 = v28;
          if (v19)
          {
            unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v19);
            unint64_t v15 = (void *)*((void *)v7 + 3);
            unint64_t v13 = (void *)*((void *)v7 + 4);
          }
          else
          {
            uint64_t v20 = 0;
          }
          int64x2_t v21 = (void *)(v19 + 8 * v16);
          unint64_t v22 = v19 + 8 * v20;
          unint64_t v32 = v22;
          *int64x2_t v21 = 0;
          *((void *)&v31 + 1) = v21 + 1;
          if (v13 == v15)
          {
            uint64_t v14 = v21 + 1;
          }
          else
          {
            do
            {
              uint64_t v23 = *--v13;
              *unint64_t v13 = 0;
              *--int64x2_t v21 = v23;
            }
            while (v13 != v15);
            uint64_t v14 = (void *)*((void *)&v31 + 1);
            unint64_t v22 = v32;
          }
          long long v24 = *(_OWORD *)(v7 + 6);
          *((void *)v7 + 3) = v21;
          *((void *)v7 + 4) = v14;
          long long v31 = v24;
          unint64_t v25 = *((void *)v7 + 5);
          *((void *)v7 + 5) = v22;
          unint64_t v32 = v25;
          uint64_t v30 = v24;
          std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v30);
        }
        else
        {
          *unint64_t v13 = 0;
          uint64_t v14 = v13 + 1;
        }
        *((void *)v7 + 4) = v14;
        __n128 result = (unsigned int *)*(v14 - 1);
        *(v14 - 1) = v10;
        if (result)
        {
          unsigned int v26 = atomic_load(result + 2);
          if (v26 == 1) {
            __n128 result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
          }
        }
      }
LABEL_33:
      unsigned int v27 = atomic_load((unsigned int *)v8 + 2);
      if (v27 == 1) {
        __n128 result = (unsigned int *)(*(uint64_t (**)(atomic_uint *))(*(void *)v8 + 8))(v8);
      }
      else {
        atomic_fetch_add(v8 + 2, 0xFFFFFFFF);
      }
      if (++v6 == a3) {
        return result;
      }
    }
    __n128 result = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v29 + 8))();
LABEL_10:
    if (v10) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
  return result;
}

float *TI::Favonius::SearchNodeSourceQueue::make_heap(float *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1) - *(void *)this;
  if (v2 >= 9)
  {
    uint64_t v3 = v2 >> 3;
    int64_t v4 = (unint64_t)((v2 >> 3) - 2) >> 1;
    int64_t v5 = v4;
    do
    {
      int64_t v6 = v5;
      if (v2 >= 16 && v4 >= v5)
      {
        uint64_t v7 = (2 * v5) | 1;
        uint64_t v8 = (void *)(v1 + 8 * v7);
        if (2 * v6 + 2 < v3)
        {
          this = (float *)v8[1];
          if (*(float *)(*v8 + 24) < this[6])
          {
            ++v8;
            uint64_t v7 = 2 * v6 + 2;
          }
        }
        uint64_t v9 = (void *)(v1 + 8 * v6);
        uint64_t v10 = *v8;
        uint64_t v11 = *v9;
        float v12 = *(float *)(*v9 + 24);
        if (*(float *)(*v8 + 24) >= v12)
        {
          do
          {
            *uint64_t v9 = v10;
            uint64_t v9 = v8;
            if (v4 < v7) {
              break;
            }
            uint64_t v13 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v8 = (void *)(v1 + 8 * v7);
            uint64_t v14 = v13 + 2;
            if (v14 < v3)
            {
              this = (float *)(v8 + 1);
              if (*(float *)(*v8 + 24) < *(float *)(v8[1] + 24))
              {
                ++v8;
                uint64_t v7 = v14;
              }
            }
            uint64_t v10 = *v8;
          }
          while (*(float *)(*v8 + 24) >= v12);
          *uint64_t v9 = v11;
        }
      }
      int64_t v5 = v6 - 1;
    }
    while (v6);
  }
  return this;
}

void *TI::Favonius::SearchNodeSourceQueue::next_search_node@<X0>(void *this@<X0>, float a2@<S0>, TI::Favonius::SearchNodeSource **a3@<X8>)
{
  int64_t v4 = this;
  int64_t v5 = this + 5;
  while (1)
  {
    int64_t v6 = (TI::Favonius::SearchNodeSource **)*v4;
    if (*v4 == v4[1]) {
      break;
    }
    uint64_t v7 = *v6;
    if ((*((_DWORD *)*v6 + 6) & 0x7FFFFFFFu) > 0x7F7FFFFF || *((float *)*v6 + 6) < a2) {
      break;
    }
    TI::Favonius::SearchNodeSourceQueue::pop_heap((TI::Favonius::SearchNodeSourceQueue *)v4);
    (*(void (**)(TI::Favonius::SearchNodeSource **__return_ptr, TI::Favonius::SearchNodeSource *))(*(void *)v7 + 32))(&v26, v7);
    uint64_t v9 = v26;
    if (v26)
    {
      uint64_t v10 = 0;
    }
    else
    {
      (*(void (**)(TI::Favonius::SearchNodeSource **__return_ptr, TI::Favonius::SearchNodeSource *))(*(void *)v7 + 40))(&v26, v7);
      uint64_t v10 = v26;
      if (!v26) {
        (*(void (**)(TI::Favonius::SearchNodeSource *))(*(void *)v7 + 48))(v7);
      }
    }
    if ((*((_DWORD *)v7 + 6) & 0x7FFFFFFFu) < 0x7F800000
      || (this = (void *)(*(uint64_t (**)(TI::Favonius::SearchNodeSource *))(*(void *)v7 + 16))(v7),
          this))
    {
      this = (void *)TI::Favonius::SearchNodeSourceQueue::push_heap((TI::Favonius::SearchNodeSourceQueue *)v4, v7);
    }
    if (v10)
    {
      this = (void *)TI::Favonius::SearchNodeSourceQueue::push_heap((TI::Favonius::SearchNodeSourceQueue *)v4, v10);
      float v12 = (TI::Favonius::SearchNodeSource **)v4[4];
      unint64_t v11 = v4[5];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = (void *)v4[3];
        uint64_t v15 = v12 - (TI::Favonius::SearchNodeSource **)v14;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          abort();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        uint8x8_t v29 = v5;
        if (v18)
        {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v18);
          uint64_t v14 = (void *)v4[3];
          float v12 = (TI::Favonius::SearchNodeSource **)v4[4];
        }
        else
        {
          uint64_t v19 = 0;
        }
        uint64_t v20 = (TI::Favonius::SearchNodeSource **)(v18 + 8 * v15);
        unint64_t v21 = v18 + 8 * v19;
        unint64_t v28 = v21;
        *uint64_t v20 = v10;
        *((void *)&v27 + 1) = v20 + 1;
        if (v12 == v14)
        {
          uint64_t v13 = v20 + 1;
        }
        else
        {
          do
          {
            unint64_t v22 = *--v12;
            *float v12 = 0;
            *--uint64_t v20 = v22;
          }
          while (v12 != v14);
          uint64_t v13 = (void *)*((void *)&v27 + 1);
          unint64_t v21 = v28;
        }
        long long v23 = *(_OWORD *)(v4 + 3);
        _OWORD v4[3] = v20;
        v4[4] = v13;
        long long v27 = v23;
        unint64_t v24 = v4[5];
        void v4[5] = v21;
        unint64_t v28 = v24;
        unsigned int v26 = (TI::Favonius::SearchNodeSource *)v23;
        this = (void *)std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v26);
      }
      else
      {
        *float v12 = v10;
        uint64_t v13 = v12 + 1;
      }
      v4[4] = v13;
    }
    if (v9) {
      goto LABEL_35;
    }
  }
  uint64_t v9 = 0;
LABEL_35:
  *a3 = v9;
  return this;
}

uint64_t TI::Favonius::SearchNodeSourceQueue::pop_heap(TI::Favonius::SearchNodeSourceQueue *this)
{
  uint64_t v2 = *(void **)this;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *v2;
  if (v3 - (uint64_t)v2 >= 9)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (v3 - (uint64_t)v2) >> 3;
    uint64_t v7 = v2;
    do
    {
      uint64_t v8 = v7;
      v7 += v5 + 1;
      uint64_t v9 = 2 * v5;
      uint64_t v5 = (2 * v5) | 1;
      uint64_t v10 = v9 + 2;
      if (v10 < v6 && *(float *)(*v7 + 24) < *(float *)(v7[1] + 24))
      {
        ++v7;
        uint64_t v5 = v10;
      }
      *uint64_t v8 = *v7;
    }
    while (v5 <= (uint64_t)((unint64_t)(v6 - 2) >> 1));
    unint64_t v11 = (void *)(v3 - 8);
    if (v7 == v11)
    {
      *uint64_t v7 = v4;
    }
    else
    {
      *uint64_t v7 = *v11;
      *unint64_t v11 = v4;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeSourceQueue::BoundComparator &,std::__wrap_iter<TI::Favonius::SearchNodeSource **>>((uint64_t)v2, (uint64_t)(v7 + 1), v7 + 1 - v2);
    }
  }
  *((void *)this + 1) -= 8;
  return v4;
}

uint64_t TI::Favonius::SearchNodeSourceQueue::push_heap(TI::Favonius::SearchNodeSourceQueue *this, TI::Favonius::SearchNodeSource *a2)
{
  uint64_t v5 = (void *)*((void *)this + 1);
  unint64_t v4 = *((void *)this + 2);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((uint64_t)v5 - *(void *)this) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      abort();
    }
    uint64_t v8 = v4 - *(void *)this;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    float v12 = (void *)(v10 + 8 * v7);
    unint64_t v13 = v10 + 8 * v11;
    *float v12 = a2;
    uint64_t v6 = (uint64_t)(v12 + 1);
    uint64_t v15 = *(char **)this;
    uint64_t v14 = (char *)*((void *)this + 1);
    if (v14 != *(char **)this)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *--float v12 = v16;
      }
      while (v14 != v15);
      uint64_t v14 = *(char **)this;
    }
    *(void *)this = v12;
    *((void *)this + 1) = v6;
    *((void *)this + 2) = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  *((void *)this + 1) = v6;
  uint64_t v17 = *(void *)this;
  uint64_t v18 = (v6 - *(void *)this) >> 3;

  return std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeSourceQueue::BoundComparator &,std::__wrap_iter<TI::Favonius::SearchNodeSource **>>(v17, v6, v18);
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeSourceQueue::BoundComparator &,std::__wrap_iter<TI::Favonius::SearchNodeSource **>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v3 = (unint64_t)(a3 - 2) >> 1;
    unint64_t v4 = (void *)(result + 8 * v3);
    uint64_t v5 = *v4;
    uint64_t v8 = *(void *)(a2 - 8);
    uint64_t v6 = (void *)(a2 - 8);
    uint64_t v7 = v8;
    float v9 = *(float *)(v8 + 24);
    if (*(float *)(*v4 + 24) < v9)
    {
      do
      {
        unint64_t v10 = v4;
        *uint64_t v6 = v5;
        if (!v3) {
          break;
        }
        unint64_t v3 = (v3 - 1) >> 1;
        unint64_t v4 = (void *)(result + 8 * v3);
        uint64_t v5 = *v4;
        uint64_t v6 = v10;
      }
      while (*(float *)(*v4 + 24) < v9);
      *unint64_t v10 = v7;
    }
  }
  return result;
}

void TI::Favonius::SearchNodeSourceQueue::clean_up(TI::Favonius::SearchNodeSourceQueue *this)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v16 = 0;
  long long v15 = 0uLL;
  int64_t v4 = v2 - v3;
  if (v2 == v3)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v2 - v3 < 0) {
      abort();
    }
    uint64_t v5 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v4 >> 3);
    uint64_t v7 = &v5[v6];
    *(void *)&long long v15 = v5;
    uint64_t v16 = v7;
    bzero(v5, v4);
    *((void *)&v15 + 1) = (char *)v5 + v4;
    uint64_t v8 = *(uint64_t **)this;
    float v9 = (uint64_t *)*((void *)this + 1);
    if (*(uint64_t **)this != v9)
    {
      do
      {
        uint64_t v10 = *v8;
        if (*v8) {
          atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
        }
        uint64_t v11 = (unsigned int *)*v5;
        *uint64_t v5 = v10;
        if (v11)
        {
          unsigned int v12 = atomic_load(v11 + 2);
          if (v12 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF);
          }
        }
        ++v8;
        ++v5;
      }
      while (v8 != v9);
      uint64_t v7 = v16;
    }
  }
  long long v13 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = v15;
  long long v15 = v13;
  uint64_t v14 = (void *)*((void *)this + 5);
  *((void *)this + 5) = v7;
  uint64_t v16 = v14;
  uint64_t v17 = (void **)&v15;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v17);
}

void TI::Favonius::SearchNodeGeometryExtensions::create_extension()
{
}

unsigned int *TI::Favonius::SearchNodeGeometryExtensions::branch_at_current_bound@<X0>(unsigned int *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = v3 - 1;
    uint64_t v6 = *(atomic_uint **)(*((void *)this + 6) + 8 * (v3 - 1));
    if (v6)
    {
      atomic_fetch_add(v6, 1u);
      uint64_t v5 = *((void *)this + 5) - 1;
      uint64_t v7 = *(void *)(*((void *)this + 6) + 8 * v5);
      if (v7) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v7);
      }
    }
    *(void *)(v4 + 40) = v5;
    TI::Favonius::SearchNodeGeometryExtensions::set_bound_on_score(v4);
    uint64_t v8 = *(void *)(v4 + 32);
    uint64_t v9 = *(void *)(v4 + 16);
    unsigned int v12 = (unsigned int *)v9;
    if (v9) {
      atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
    }
    uint64_t v11 = v6;
    if (v6) {
      atomic_fetch_add(v6, 1u);
    }
    (*(void (**)(uint64_t, uint64_t, unsigned int **, atomic_uint **, float))(*(void *)v4 + 56))(v4, v8, &v12, &v11, *(float *)(v4 + 64));
    if (v11) {
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v11);
    }
    this = v12;
    if (v12)
    {
      unsigned int v10 = atomic_load(v12 + 2);
      if (v10 == 1) {
        this = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v12 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF);
      }
    }
    if (v6) {
      return (unsigned int *)WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v6);
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t TI::Favonius::SearchNodeGeometryExtensions::set_bound_on_score(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 68)) {
    this = TI::Favonius::SearchNodeGeometryExtensions::pop_nonletter_keys(this);
  }
  uint64_t v2 = *(void *)(v1 + 40);
  if (v2) {
    float v3 = *(float *)(v1 + 72) + *(float *)(*(void *)(*(void *)(v1 + 48) + 8 * v2 - 8) + 32);
  }
  else {
    float v3 = -INFINITY;
  }
  *(float *)(v1 + 24) = v3;
  return this;
}

uint64_t TI::Favonius::SearchNodeGeometryExtensions::pop_nonletter_keys(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 40);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = v1 - 1;
    do
    {
      this = *(void *)(*(void *)(v2 + 48) + 8 * v3);
      if ((*(_WORD *)(*(void *)(this + 8) + 60) & 0x22) != 0) {
        break;
      }
      this = WTF::RefCounted<TI::Favonius::KeyMatch>::deref(this);
      *(void *)(v2 + 40) = v3--;
    }
    while (v3 != -1);
  }
  return this;
}

void TI::Favonius::SearchNodeGeometryExtensions::clone_substituting_touch()
{
}

uint64_t TI::Favonius::SearchNodeGeometryExtensions::SearchNodeGeometryExtensions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(void *)a1 = &unk_1F3F76A78;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  int v8 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 72) = v8;
  if ((v8 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    uint64_t v9 = (unint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
    WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((void *)(a1 + 40), *v9);
    unint64_t v10 = *v9;
    if (*v9)
    {
      uint64_t v11 = 8 * v10 - 8;
      do
      {
        unint64_t v12 = v9[1] + v11;
        if (!(*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 72))(*(void *)(a2 + 16), *(__int16 *)(*(void *)(*(void *)v12 + 8) + 62)))
        {
          unint64_t v13 = *(void *)(a1 + 40);
          if (v13 != *(void *)(a1 + 56))
          {
            uint64_t v15 = *(void *)(a1 + 48);
            goto LABEL_11;
          }
          unint64_t v14 = WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity((void *)(a1 + 40), v13 + 1, v12);
          uint64_t v15 = *(void *)(a1 + 48);
          if (v15)
          {
            unint64_t v12 = v14;
            unint64_t v13 = *v7;
LABEL_11:
            uint64_t v16 = *(atomic_uint **)v12;
            *(void *)(v15 + 8 * v13) = *(void *)v12;
            if (v16)
            {
              atomic_fetch_add(v16, 1u);
              unint64_t v13 = *v7;
            }
            *uint64_t v7 = v13 + 1;
          }
        }
        v11 -= 8;
        --v10;
      }
      while (v10);
    }
    if (*(void *)(a2 + 40))
    {
      for (uint64_t i = *(void *)(a2 + 48); i != *(void *)(a2 + 48) + 8 * *(void *)(a2 + 40); i += 8)
      {
        uint64_t v18 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16), *(__int16 *)(*(void *)(*(void *)i + 8) + 62));
        if (v18)
        {
          uint64_t v19 = (atomic_uint *)v18;
          unint64_t v20 = *(void *)(a1 + 40);
          if (v20 == *(void *)(a1 + 56))
          {
            unint64_t v21 = v20 + (v20 >> 1);
            if (v20 < 0x100) {
              unint64_t v21 = 2 * v20;
            }
            if (v21 <= v20 + 1) {
              unint64_t v22 = v20 + 1;
            }
            else {
              unint64_t v22 = v21;
            }
            WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((void *)(a1 + 40), v22);
            uint64_t v23 = *(void *)(a1 + 48);
            if (!v23) {
              continue;
            }
            unint64_t v20 = *v7;
          }
          else
          {
            uint64_t v23 = *(void *)(a1 + 48);
          }
          *(void *)(v23 + 8 * v20) = v19;
          atomic_fetch_add(v19, 1u);
          ++*v7;
        }
      }
    }
    unint64_t v25 = *(void *)(a1 + 40);
    uint64_t v24 = *(void *)(a1 + 48);
    uint8x8_t v29 = &__block_literal_global_12961;
    unint64_t v26 = 126 - 2 * __clz(v25);
    if (v25) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*,false>(v24, (uint64_t *)(v24 + 8 * v25), (uint64_t)&v29, v27, 1);
    TI::Favonius::SearchNodeGeometryExtensions::set_bound_on_score(a1);
  }
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
  while (2)
  {
    float v91 = a2;
    int v93 = a2 - 1;
    long long v89 = a2 - 3;
    unint64_t v90 = a2 - 2;
    unint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                __n128 result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
                if (result)
                {
                  uint64_t v37 = *v12;
                  *unint64_t v12 = *v93;
                  uint64_t *v93 = v37;
                }
                break;
              case 3uLL:
                __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v93, a3);
                break;
              case 4uLL:
                __n128 result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v12 + 2, v93, a3);
                break;
              case 5uLL:
                __n128 result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v12 + 2, v12 + 3, v93, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            unint64_t v38 = v12 + 1;
            BOOL v40 = v12 == a2 || v38 == a2;
            if (a5)
            {
              if (!v40)
              {
                uint64_t v41 = 0;
                do
                {
                  uint64_t v42 = v38;
                  __n128 result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
                  if (result)
                  {
                    uint64_t v43 = 0;
                    uint64_t v44 = *v42;
                    *uint64_t v42 = 0;
                    uint64_t v97 = v44;
                    for (uint64_t i = v41; ; i -= 8)
                    {
                      int64_t v46 = (uint64_t *)((char *)v12 + i);
                      uint64_t v47 = *(uint64_t *)((char *)v12 + i);
                      uint64_t *v46 = 0;
                      v46[1] = v47;
                      if (v43) {
                        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v43);
                      }
                      if (!i) {
                        break;
                      }
                      unint64_t v48 = (uint64_t *)((char *)v12 + i);
                      if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
                        goto LABEL_87;
                      }
                      uint64_t v43 = *v46;
                    }
                    unint64_t v48 = v12;
LABEL_87:
                    __n128 result = *v48;
                    *unint64_t v48 = v97;
                    a2 = v91;
                    if (result)
                    {
                      WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
                      __n128 result = 0;
                    }
                  }
                  unint64_t v38 = v42 + 1;
                  v41 += 8;
                }
                while (v42 + 1 != a2);
              }
            }
            else if (!v40)
            {
              do
              {
                int v85 = v38;
                __n128 result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
                if (result)
                {
                  uint64_t v86 = 0;
                  uint64_t v87 = *v85;
                  *int v85 = 0;
                  uint64_t v100 = v87;
                  while (1)
                  {
                    uint64_t v88 = *v11;
                    *uint64_t v11 = 0;
                    v11[1] = v88;
                    if (v86) {
                      WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v86);
                    }
                    if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
                      break;
                    }
                    uint64_t v86 = *v11--;
                  }
                  __n128 result = *v11;
                  *uint64_t v11 = v100;
                  if (result)
                  {
                    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
                    __n128 result = 0;
                  }
                }
                unint64_t v38 = v85 + 1;
                uint64_t v11 = v85;
              }
              while (v85 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v49 = (v14 - 2) >> 1;
              int64_t v94 = v49;
              do
              {
                int64_t v50 = v49;
                if (v94 >= v49)
                {
                  uint64_t v51 = (2 * v49) | 1;
                  unint64_t v52 = &v11[v51];
                  if (2 * v49 + 2 < (uint64_t)v14 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
                  {
                    ++v52;
                    uint64_t v51 = 2 * v50 + 2;
                  }
                  uint8x8_t v53 = &v11[v50];
                  a2 = v91;
                  if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
                  {
                    uint64_t v54 = *v53;
                    uint64_t *v53 = 0;
                    uint64_t v98 = v54;
                    do
                    {
                      unint64_t v55 = v52;
                      uint64_t v56 = *v52;
                      *unint64_t v52 = 0;
                      uint64_t v57 = *v53;
                      uint64_t *v53 = v56;
                      if (v57) {
                        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v57);
                      }
                      if (v94 < v51) {
                        break;
                      }
                      uint64_t v58 = (2 * v51) | 1;
                      unint64_t v52 = &v11[v58];
                      uint64_t v59 = 2 * v51 + 2;
                      if (v59 < (uint64_t)v14 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
                      {
                        ++v52;
                        uint64_t v58 = v59;
                      }
                      uint8x8_t v53 = v55;
                      uint64_t v51 = v58;
                    }
                    while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
                    uint64_t v60 = *v55;
                    *unint64_t v55 = v98;
                    if (v60) {
                      WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v60);
                    }
                    a2 = v91;
                  }
                }
                int64_t v49 = v50 - 1;
              }
              while (v50);
              uint64_t v61 = (unint64_t)v13 >> 3;
              do
              {
                unint64_t v62 = a2;
                uint64_t v63 = 0;
                uint64_t v64 = *v11;
                *uint64_t v11 = 0;
                uint64_t v65 = v61 - 2;
                uint64_t v92 = v64;
                if (v61 < 2) {
                  uint64_t v65 = v61 - 1;
                }
                uint64_t v66 = v65 >> 1;
                uint64_t v67 = v11;
                do
                {
                  long long v68 = &v67[v63 + 1];
                  uint64_t v69 = 2 * v63;
                  uint64_t v63 = (2 * v63) | 1;
                  uint64_t v70 = v69 + 2;
                  if (v69 + 2 < v61 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
                  {
                    ++v68;
                    uint64_t v63 = v70;
                  }
                  uint64_t v71 = *v68;
                  *long long v68 = 0;
                  uint64_t v72 = *v67;
                  uint64_t *v67 = v71;
                  if (v72) {
                    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v72);
                  }
                  uint64_t v67 = v68;
                }
                while (v63 <= v66);
                int64x2_t v73 = v62 - 1;
                if (v68 == v73)
                {
                  uint64_t v76 = v73;
                  __n128 result = *v68;
                  *long long v68 = v92;
                  if (result) {
                    __n128 result = WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
                  }
                }
                else
                {
                  uint64_t v74 = *v73;
                  *int64x2_t v73 = 0;
                  uint64_t v75 = *v68;
                  *long long v68 = v74;
                  if (v75) {
                    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v75);
                  }
                  __n128 result = *v73;
                  uint64_t v76 = v73;
                  *int64x2_t v73 = v92;
                  if (result) {
                    __n128 result = WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
                  }
                  uint64_t v77 = (char *)(v68 + 1) - (char *)v11;
                  if (v77 >= 9)
                  {
                    unint64_t v78 = (unint64_t)((v77 >> 3) - 2) >> 1;
                    unint64_t v79 = &v11[v78];
                    __n128 result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
                    if (result)
                    {
                      uint64_t v80 = *v68;
                      *long long v68 = 0;
                      uint64_t v99 = v80;
                      do
                      {
                        uint64_t v81 = v79;
                        uint64_t v82 = *v79;
                        uint64_t *v79 = 0;
                        uint64_t v83 = *v68;
                        *long long v68 = v82;
                        if (v83) {
                          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v83);
                        }
                        if (!v78) {
                          break;
                        }
                        unint64_t v78 = (v78 - 1) >> 1;
                        unint64_t v79 = &v11[v78];
                        long long v68 = v81;
                      }
                      while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
                      __n128 result = *v81;
                      uint64_t *v81 = v99;
                      if (result)
                      {
                        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
                        __n128 result = 0;
                      }
                    }
                  }
                }
                BOOL v84 = v61-- <= 2;
                a2 = v76;
              }
              while (!v84);
            }
            return result;
          }
          uint64_t v15 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, &v12[v14 >> 1], v93, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12 + 1, v15 - 1, v90, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12 + 2, &v12[(v14 >> 1) + 1], v89, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v15 - 1, &v12[v14 >> 1], &v12[(v14 >> 1) + 1], a3);
            uint64_t v16 = *v12;
            *unint64_t v12 = *v15;
            *uint64_t v15 = v16;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(&v12[v14 >> 1], v12, v93, a3);
          }
          --a4;
          a2 = v91;
          if (a5 & 1) != 0 || ((*(uint64_t (**)(void))(*(void *)a3 + 16))()) {
            break;
          }
          uint64_t v28 = *v12;
          *unint64_t v12 = 0;
          uint64_t v96 = v28;
          if ((*(uint64_t (**)(void))(*(void *)a3 + 16))())
          {
            do
              ++v12;
            while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
          }
          else
          {
            uint8x8_t v29 = v12 + 1;
            do
            {
              unint64_t v12 = v29;
              if (v29 >= v91) {
                break;
              }
              int v30 = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
              uint8x8_t v29 = v12 + 1;
            }
            while (!v30);
          }
          long long v31 = v91;
          if (v12 < v91)
          {
            long long v31 = v91;
            do
              --v31;
            while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
          }
          while (v12 < v31)
          {
            uint64_t v32 = *v12;
            *unint64_t v12 = *v31;
            *long long v31 = v32;
            do
              ++v12;
            while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
            do
              --v31;
            while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
          }
          unint64_t v33 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11)
          {
            uint64_t v34 = *v33;
            *unint64_t v33 = 0;
            uint64_t v35 = *v11;
            *uint64_t v11 = v34;
            if (v35) {
              WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v35);
            }
          }
          uint64_t v36 = *v33;
          *unint64_t v33 = v96;
          if (v36) {
            WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v36);
          }
          __n128 result = 0;
          a5 = 0;
        }
        uint64_t v17 = *v12;
        *unint64_t v12 = 0;
        uint64_t v95 = v17;
        uint64_t v18 = v12;
        do
          uint64_t v19 = v18++;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
        unint64_t v20 = v91;
        if (v19 == v12)
        {
          unint64_t v20 = v91;
          do
          {
            if (v18 >= v20) {
              break;
            }
            --v20;
          }
          while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
        }
        else
        {
          do
            --v20;
          while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
        }
        if (v18 < v20)
        {
          unint64_t v21 = v18;
          unint64_t v22 = v20;
          do
          {
            uint64_t v23 = *v21;
            *unint64_t v21 = *v22;
            uint64_t *v22 = v23;
            do
              uint64_t v19 = v21++;
            while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
            do
              --v22;
            while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
          }
          while (v21 < v22);
        }
        if (v19 != v11)
        {
          uint64_t v24 = *v19;
          uint64_t *v19 = 0;
          uint64_t v25 = *v11;
          *uint64_t v11 = v24;
          if (v25) {
            WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v25);
          }
        }
        uint64_t v26 = *v19;
        uint64_t *v19 = v95;
        if (v26) {
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v26);
        }
        if (v18 >= v20) {
          break;
        }
LABEL_34:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*,false>(v11, v19, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v19 + 1;
      }
      BOOL v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*>(v11, v19, a3);
      unint64_t v12 = v19 + 1;
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*>(v19 + 1, v91, a3);
      if (result) {
        break;
      }
      if (!v27) {
        goto LABEL_34;
      }
    }
    a2 = v19;
    if (!v27) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 1;
      if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *int v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a3);
      unint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
    {
      uint64_t v13 = 0;
      uint64_t v14 = *v10;
      *unint64_t v10 = 0;
      uint64_t v20 = v14;
      for (uint64_t i = v11; ; i -= 8)
      {
        uint64_t v16 = (char *)a1 + i;
        uint64_t v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((void *)v16 + 2) = 0;
        *((void *)v16 + 3) = v17;
        if (v13) {
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v13);
        }
        if (i == -16)
        {
          uint64_t v18 = a1;
          goto LABEL_15;
        }
        if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
          break;
        }
        uint64_t v13 = *((void *)v16 + 2);
      }
      uint64_t v18 = (uint64_t *)((char *)a1 + i + 16);
LABEL_15:
      uint64_t v19 = *v18;
      *uint64_t v18 = v20;
      if (v19) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v19);
      }
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

BOOL ___ZN2TI8Favonius28SearchNodeGeometryExtensionsC2ERKS1_N3WTF10PassRefPtrINS0_12TouchHistoryEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(float *)(*(void *)a2 + 32) < *(float *)(*(void *)a3 + 32);
}

uint64_t TI::Favonius::SearchNodeGeometryExtensions::can_refill_on_clone(TI::Favonius::SearchNodeGeometryExtensions *this)
{
  return 1;
}

void TI::Favonius::SearchNodeGeometryExtensions::~SearchNodeGeometryExtensions(TI::Favonius::SearchNodeGeometryExtensions *this)
{
  TI::Favonius::SearchNodeGeometryExtensions::~SearchNodeGeometryExtensions(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t vars8;

  *(void *)this = &unk_1F3F76A78;
  WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::~Vector((void *)this + 5);
  uint64_t v2 = (unsigned int *)*((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }

  TI::Favonius::SearchNodeSource::~SearchNodeSource(this);
}

void TI::Favonius::SearchNodeGeometryExtensions::create()
{
}

uint64_t TI::Favonius::SearchNodeGeometryExtensions::SearchNodeGeometryExtensions(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, float a5, float a6)
{
  uint64_t v7 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(void *)a1 = &unk_1F3F76A78;
  *(void *)(a1 + 32) = a2;
  if (a2) {
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  int v8 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 56) = 0;
  *(float *)(a1 + 64) = a5;
  *(unsigned char *)(a1 + 68) = a4;
  float v9 = (float)(*(float *)(a2 + 144) + (float)(a5 * *(float *)(a2 + 136))) + a6;
  *(float *)(a1 + 72) = v9;
  if ((LODWORD(v9) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    unint64_t v10 = (unint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
    WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::operator=((unint64_t *)(a1 + 40), v10);
    unint64_t v11 = *(void *)(a1 + 40);
    if (v11 >= 2)
    {
      unint64_t v12 = 0;
      uint64_t v13 = -1;
      do
      {
        uint64_t v14 = *(void *)(a1 + 48);
        unint64_t v15 = v11 + v13;
        uint64_t v16 = *(void *)(v14 + 8 * v12);
        *(void *)(v14 + 8 * v12) = 0;
        uint64_t v17 = *(void *)(v14 + 8 * (v11 + v13));
        *(void *)(v14 + 8 * v15) = 0;
        uint64_t v18 = *(void *)(v14 + 8 * v12);
        *(void *)(v14 + 8 * v12) = v17;
        if (v18) {
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v18);
        }
        uint64_t v19 = *(void *)(v14 + 8 * v15);
        *(void *)(v14 + 8 * v15) = v16;
        if (v19) {
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v19);
        }
        ++v12;
        unint64_t v11 = *v8;
        --v13;
      }
      while (v12 < *v8 >> 1);
    }
    TI::Favonius::SearchNodeGeometryExtensions::set_bound_on_score(a1);
  }
  return a1;
}

unint64_t *WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::operator=(unint64_t *a1, unint64_t *a2)
{
  if (a2 == a1) {
    return a1;
  }
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (*a1 > *a2)
  {
    uint64_t v6 = (uint64_t *)(a1[1] + 8 * v5);
    uint64_t v7 = 8 * v4 - 8 * v5;
    do
    {
      if (*v6) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(*v6);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
    *a1 = v5;
    goto LABEL_20;
  }
  unint64_t v8 = a1[2];
  if (v5 <= v8)
  {
    unint64_t v5 = *a1;
    goto LABEL_20;
  }
  if (v8)
  {
    if (v4)
    {
      float v9 = (uint64_t *)a1[1];
      uint64_t v10 = 8 * v4;
      do
      {
        if (*v9) {
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(*v9);
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
      *a1 = 0;
    }
    unint64_t v11 = (void *)a1[1];
    a1[1] = 0;
    a1[2] = 0;
    free(v11);
    unint64_t v5 = *a2;
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a1, v5);
  if (a1[1])
  {
    unint64_t v5 = *a1;
LABEL_20:
    unint64_t v12 = (atomic_uint **)a2[1];
    if (v5)
    {
      uint64_t v13 = (uint64_t *)a1[1];
      uint64_t v14 = 8 * v5;
      do
      {
        unint64_t v15 = *v12;
        if (*v12) {
          atomic_fetch_add(v15, 1u);
        }
        uint64_t v16 = *v13;
        *uint64_t v13 = (uint64_t)v15;
        if (v16) {
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v16);
        }
        ++v12;
        ++v13;
        v14 -= 8;
      }
      while (v14);
      unint64_t v12 = (atomic_uint **)a2[1];
      unint64_t v17 = *a1;
    }
    else
    {
      unint64_t v17 = 0;
    }
    if (v17 != *a2)
    {
      uint64_t v18 = (atomic_uint **)(a1[1] + 8 * v17);
      uint64_t v19 = &v12[v17];
      uint64_t v20 = 8 * *a2 - 8 * v17;
      do
      {
        unint64_t v21 = *v19;
        *uint64_t v18 = *v19;
        if (v21) {
          atomic_fetch_add(v21, 1u);
        }
        ++v18;
        ++v19;
        v20 -= 8;
      }
      while (v20);
      unint64_t v17 = *a2;
    }
    *a1 = v17;
  }
  return a1;
}

void KB::InputManagerSpecializationTransliteration::create_input_segment_filter()
{
}

uint64_t KB::NullInputSegmentFilter::letter_combines_with_selective_modifier(KB::NullInputSegmentFilter *this)
{
  return 1;
}

uint64_t KB::NullInputSegmentFilter::word_is_acceptable_for_input(KB::NullInputSegmentFilter *this, KB::Word *a2, const KB::String *a3)
{
  return 1;
}

void KB::NullInputSegmentFilter::~NullInputSegmentFilter(KB::NullInputSegmentFilter *this)
{
}

void KB::InputManagerSpecializationTransliteration::~InputManagerSpecializationTransliteration(KB::InputManagerSpecializationTransliteration *this)
{
  *(void *)this = &unk_1F3F73A58;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 1) = 0;

  JUMPOUT(0x1E4E7BC20);
}

{
  const void *v2;

  *(void *)this = &unk_1F3F73A58;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 1) = 0;
}

uint64_t std::__shared_ptr_emplace<KB::InputManagerSpecializationTransliteration>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<KB::InputManagerSpecializationTransliteration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F76B78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<KB::InputManagerSpecializationTransliteration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F76B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TI::Favonius::SearchNodeLanguageExtensions::decrease_bound_on_score(TI::Favonius::SearchNodeLanguageExtensions *this)
{
  if (!*((unsigned char *)this + 52))
  {
    TI::Favonius::SearchNode::get_language_extensions(*((void *)this + 4), (unint64_t *)this + 7);
    *((unsigned char *)this + 52) = 1;
    unint64_t v2 = *((void *)this + 7);
    unint64_t v3 = 126 - 2 * __clz(v2);
    if (v2) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(*((uint64_t **)this + 8), (uint64_t *)(*((void *)this + 8) + 8 * v2), v4, 1);
    TI::Favonius::SearchNodeLanguageExtensions::set_bound_on_score(this);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
void TI::Favonius::SearchNodeLanguageExtensions::set_bound_on_score(TI::Favonius::SearchNodeLanguageExtensions *this)
{
  if (*((unsigned char *)this + 52))
  {
    uint64_t v2 = *((void *)this + 7);
    if (v2)
    {
      uint64_t v3 = *(void *)(*((void *)this + 8) + 8 * v2 - 8);
      float v4 = (*(float (**)(uint64_t))(*(void *)v3 + 24))(v3);
      float v5 = *((float *)this + 12);
      float v6 = *((float *)this + 10);
      float v7 = v5 + (float)(v6 * logf(v4));
    }
    else
    {
      float v7 = -INFINITY;
    }
  }
  else
  {
    float v7 = *((float *)this + 12);
  }
  *((float *)this + 6) = v7;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = (*(float (**)(void))(*(void *)*(a2 - 1) + 24))(*(a2 - 1));
      if (v6 < (*(float (**)(void))(*(void *)*a1 + 24))())
      {
        uint64_t v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2);
      float v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    float v12 = (*(float (**)(void))(*(void *)*v9 + 24))();
    if (v12 < (*(float (**)(void))(*(void *)*v8 + 24))())
    {
      unint64_t v13 = 0;
      uint64_t v14 = (unsigned int *)*v9;
      *float v9 = 0;
      for (uint64_t i = v10; ; i -= 8)
      {
        uint64_t v16 = (char *)a1 + i;
        uint64_t v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((void *)v16 + 2) = 0;
        *((void *)v16 + 3) = v17;
        if (v13)
        {
          unsigned int v18 = atomic_load(v13 + 2);
          if (v18 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v13 + 248))(v13);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
          }
        }
        if (i == -16)
        {
          float v21 = (unsigned int **)a1;
          goto LABEL_17;
        }
        uint64_t v19 = (char *)a1 + i;
        float v20 = (*(float (**)(unsigned int *))(*(void *)v14 + 24))(v14);
        if (v20 >= (*(float (**)(void))(**((void **)v19 + 1) + 24))(*((void *)v19 + 1))) {
          break;
        }
        unint64_t v13 = (unsigned int *)*((void *)v16 + 2);
      }
      float v21 = (unsigned int **)(v19 + 16);
LABEL_17:
      unint64_t v22 = *v21;
      *float v21 = v14;
      if (v22)
      {
        unsigned int v23 = atomic_load(v22 + 2);
        if (v23 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v22 + 248))(v22);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v22 + 2, 0xFFFFFFFF);
        }
      }
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

TI::Favonius::SearchNodeLanguageExtensions *TI::Favonius::SearchNodeLanguageExtensions::branch_at_current_bound@<X0>(TI::Favonius::SearchNodeLanguageExtensions *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    uint64_t v4 = this;
    uint64_t v5 = v3 - 1;
    uint64_t v6 = *((void *)this + 8);
    uint64_t v7 = *(void *)(v6 + 8 * (v3 - 1));
    if (v7)
    {
      atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
      uint64_t v3 = *((void *)this + 7);
      uint64_t v6 = *((void *)this + 8);
      uint64_t v5 = v3 - 1;
    }
    WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct((unsigned int *)(v6 + 8 * v5), (unsigned int **)(v6 + 8 * v3));
    *((void *)v4 + 7) = v5;
    TI::Favonius::SearchNodeLanguageExtensions::set_bound_on_score(v4);
    operator new();
  }
  *a2 = 0;
  return this;
}

void TI::Favonius::SearchNodeLanguageExtensions::clone_substituting_touch()
{
}

uint64_t TI::Favonius::SearchNodeLanguageExtensions::SearchNodeLanguageExtensions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(void *)a1 = &unk_1F3F76C70;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::Vector((void *)(a1 + 56), (void *)(a2 + 56));
  return a1;
}

void TI::Favonius::SearchNodeLanguageExtensions::~SearchNodeLanguageExtensions(TI::Favonius::SearchNodeLanguageExtensions *this)
{
  TI::Favonius::SearchNodeLanguageExtensions::~SearchNodeLanguageExtensions(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t vars8;

  *(void *)this = &unk_1F3F76C70;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);
  uint64_t v2 = (unsigned int *)*((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }

  TI::Favonius::SearchNodeSource::~SearchNodeSource(this);
}

void TI::Favonius::SearchNodeLanguageExtensions::create()
{
}

TI::Favonius::SearchNodeLanguageExtensions *TI::Favonius::SearchNodeLanguageExtensions::SearchNodeLanguageExtensions(TI::Favonius::SearchNodeLanguageExtensions *this, uint64_t a2, uint64_t *a3, float a4, float a5, float a6)
{
  uint64_t v7 = *a3;
  *a3 = 0;
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = v7;
  *((_DWORD *)this + 6) = -8388608;
  *(void *)this = &unk_1F3F76C70;
  *((void *)this + 4) = a2;
  if (a2) {
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  }
  *((float *)this + 10) = a4;
  *((float *)this + 11) = a5;
  *((float *)this + 12) = (float)(*(float *)(a2 + 144) + (float)(a4 * *(float *)(a2 + 136))) + a6;
  *((unsigned char *)this + 52) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = 0;
  TI::Favonius::SearchNodeLanguageExtensions::set_bound_on_score(this);
  return this;
}

uint64_t _doesSessionContainValidStrings(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v1 = objc_msgSend(a1, "alignedEntries", 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v12;
LABEL_3:
    uint64_t v5 = 0;
    while (1)
    {
      if (*(void *)v12 != v4) {
        objc_enumerationMutation(v1);
      }
      uint64_t v6 = *(void **)(*((void *)&v11 + 1) + 8 * v5);
      uint64_t v7 = [v6 originalWord];
      if (!v7) {
        break;
      }
      unint64_t v8 = [v6 originalWord];
      float v9 = [v8 acceptedString];

      if (!v9)
      {
        uint64_t v7 = 0;
        break;
      }
      if (v3 == ++v5)
      {
        uint64_t v3 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
        uint64_t v7 = 1;
        if (v3) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  else
  {
    uint64_t v7 = 1;
  }

  return v7;
}

BOOL _isSessionAlignedConfidently(void *a1)
{
  uint64_t v1 = [a1 alignedEntries];
  uint64_t v2 = [v1 lastObject];

  BOOL v3 = [v2 inSessionAlignmentConfidence] == 3;
  return v3;
}

uint64_t _shouldHandleSession(void *a1)
{
  id v1 = a1;
  if (_isSessionAlignedConfidently(v1)) {
    uint64_t doesSessionContainValidStrings = _doesSessionContainValidStrings(v1);
  }
  else {
    uint64_t doesSessionContainValidStrings = 0;
  }

  return doesSessionContainValidStrings;
}

void KB::LexiconIDManager::LexiconIDManager(KB::LexiconIDManager *this)
{
  *(void *)this = 0;
  atomic_store(0, (unint64_t *)this);
}

{
  *(void *)this = 0;
  atomic_store(0, (unint64_t *)this);
}

void KB::LexiconIDManager::~LexiconIDManager(atomic_ullong *this)
{
}

{
  atomic_exchange_explicit(this, 0, memory_order_acquire);
}

atomic_ullong *KB::LexiconIDManager::clear(atomic_ullong *this)
{
  return this;
}

unint64_t KB::LexiconIDManager::locale_for_id(atomic_ullong *this, int a2)
{
  unint64_t result = atomic_load_explicit(this, memory_order_acquire);
  if (result)
  {
    while (*(_DWORD *)(result + 24) != a2)
    {
      unint64_t result = *(void *)(result + 32);
      if (!result) {
        return result;
      }
    }
    if (*(char *)(result + 23) < 0) {
      return *(void *)result;
    }
  }
  return result;
}

uint64_t KB::LexiconIDManager::id_for_locale(atomic_ullong *a1, unsigned __int8 **a2)
{
  unint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
  if (!explicit) {
LABEL_21:
  }
    operator new();
  char v3 = *((unsigned char *)a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v4 = a2[1];
  }
  if (v3 >= 0) {
    uint64_t v5 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  unint64_t v6 = explicit;
  while (1)
  {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    unint64_t v8 = (v7 & 0x80u) == 0 ? (unsigned __int8 *)*(unsigned __int8 *)(v6 + 23) : *(unsigned __int8 **)(v6 + 8);
    if (v8 == v4)
    {
      if ((v7 & 0x80) == 0)
      {
        if (!*(unsigned char *)(v6 + 23)) {
          return *(unsigned int *)(v6 + 24);
        }
        uint64_t v9 = 0;
        while (*(unsigned __int8 *)(v6 + v9) == v5[v9])
        {
          if (v7 == ++v9) {
            return *(unsigned int *)(v6 + 24);
          }
        }
        goto LABEL_20;
      }
      if (!memcmp(*(const void **)v6, v5, *(void *)(v6 + 8))) {
        return *(unsigned int *)(v6 + 24);
      }
    }
LABEL_20:
    unint64_t v6 = *(void *)(v6 + 32);
    if (!v6) {
      goto LABEL_21;
    }
  }
}

uint64_t __Block_byref_object_copy__13435(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13436(uint64_t a1)
{
}

void ___createFilterQueryForQueryString_block_invoke()
{
  id v3 = (id)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.keyboard"];
  dispatch_queue_t v0 = [v3 objectForKey:@"shouldUseTokenizedQuery"];
  id v1 = v0;
  if (v0) {
    char v2 = [v0 BOOLValue];
  }
  else {
    char v2 = 1;
  }
  _createFilterQueryForQueryString___shouldUseTokenizedFilterQuerdouble y = v2;
}

void __TIGetShowStickersValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"ShowStickers" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

void TI::Favonius::SearchNodeSource::branch_at_current_bound(void *a1@<X8>)
{
  *a1 = 0;
}

void TI::Favonius::SearchNodeSource::node_at_current_bound(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t TI::Favonius::SearchNodeSource::can_refill_on_clone(TI::Favonius::SearchNodeSource *this)
{
  return 0;
}

uint64_t TI::Favonius::SearchNodeSource::SearchNodeSource(uint64_t result, uint64_t *a2)
{
  *(_DWORD *)(result + 8) = 1;
  *(void *)unint64_t result = &unk_1F3F76D38;
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)(result + 16) = v2;
  *(_DWORD *)(result + 24) = -8388608;
  return result;
}

void TI::Favonius::SearchNodeSource::~SearchNodeSource(TI::Favonius::SearchNodeSource *this)
{
  *(void *)this = &unk_1F3F76D38;
  id v1 = (unsigned int *)*((void *)this + 2);
  if (v1)
  {
    unsigned int v2 = atomic_load(v1 + 2);
    if (v2 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v1 + 8))(v1);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v1 + 2, 0xFFFFFFFF);
    }
  }
}

void TI::Favonius::SearchNodeTransposition::clone_with_typing()
{
}

TI::Favonius::SearchNodeTransposition *TI::Favonius::SearchNodeTransposition::SearchNodeTransposition(TI::Favonius::SearchNodeTransposition *a1, void *a2, uint64_t *a3, unsigned int **a4)
{
  uint64_t v7 = *a4;
  *a4 = 0;
  long long v14 = v7;
  TI::Favonius::SearchNode::SearchNode((uint64_t)a1, (uint64_t)a2, (uint64_t *)&v14);
  if (v14)
  {
    unsigned int v8 = atomic_load(v14 + 2);
    if (v8 == 1) {
      (*(void (**)(void))(*(void *)v14 + 248))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v14 + 2, 0xFFFFFFFF);
    }
  }
  *(void *)a1 = &unk_1F3F76D80;
  uint64_t v9 = a2[28];
  *((void *)a1 + 28) = v9;
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
  }
  uint64_t v10 = (atomic_uint *)a2[29];
  *((void *)a1 + 29) = v10;
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  uint64_t v11 = a2[30];
  *((void *)a1 + 30) = v11;
  if (v11) {
    atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
  }
  uint64_t v12 = *a3;
  *a3 = 0;
  *((void *)a1 + 31) = v12;
  *((void *)a1 + 32) = 0;
  *((void *)a1 + 33) = 0;
  *((void *)a1 + 34) = 0;
  if (!*((void *)a1 + 7)) {
    TI::Favonius::SearchNodeTransposition::set_bound_on_score(a1);
  }
  return a1;
}

float TI::Favonius::SearchNodeTransposition::set_bound_on_score(TI::Favonius::SearchNodeTransposition *this)
{
  float v2 = *(float *)(*((void *)this + 6) + 32);
  float v3 = v2 + (*(float (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  uint64_t v4 = *((void *)this + 30);
  if (!v4)
  {
    float v3 = v3 + *(float *)(*((void *)this + 29) + 32);
    uint64_t v5 = *((void *)this + 4);
    if (!*(void *)(v5 + 32)) {
      goto LABEL_5;
    }
    uint64_t v4 = *(void *)(v5 + 128);
  }
  float v3 = v3 + (*(float (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *((void *)this + 4);
LABEL_5:
  float v6 = *(float *)(v5 + 136);
  uint64_t v7 = *((void *)this + 31);
  if (v7)
  {
    float v8 = (*(float (**)(uint64_t))(*(void *)v7 + 24))(v7);
    float v6 = v6 + logf(v8);
  }
  float result = v3 + (float)(*((float *)this + 38) * v6);
  *((float *)this + 6) = result;
  return result;
}

void TI::Favonius::SearchNodeTransposition::set_language_scores_from_parent_and_typing_hypothesis(TI::Favonius::SearchNodeTransposition *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (!v1) {
    uint64_t v1 = *((void *)this + 31);
  }
  TI::Favonius::SearchNode::set_language_scores_from_parent_and_typing_hypothesis((uint64_t)this, v1);
}

unsigned int *TI::Favonius::SearchNodeTransposition::compute_geometry_model_data(atomic_uint **this)
{
  if (!this[30]) {
    TI::Favonius::SearchNodeTransposition::compute_geometry_model_data_for_first_key((TI::Favonius::SearchNodeTransposition *)this);
  }
  float v2 = this[6];
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  float v3 = this[30];
  uint64_t v4 = this[2];
  float v8 = (unsigned int *)v4;
  if (v4) {
    atomic_fetch_add(v4 + 2, 1u);
  }
  uint64_t v7 = v2;
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  (*(void (**)(atomic_uint *, unsigned int **, atomic_uint **))(*(void *)v3 + 56))(v3, &v8, &v7);
  if (v7) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v7);
  }
  float result = v8;
  if (v8)
  {
    unsigned int v6 = atomic_load(v8 + 2);
    if (v6 == 1) {
      float result = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v8 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF);
    }
  }
  if (v2) {
    return (unsigned int *)WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v2);
  }
  return result;
}

unsigned int *TI::Favonius::SearchNodeTransposition::compute_geometry_model_data_for_first_key(TI::Favonius::SearchNodeTransposition *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 4) + 128);
  uint64_t v3 = *((void *)this + 28);
  uint64_t v12 = (unsigned int *)v3;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 29);
  uint64_t v11 = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  (*(void (**)(unsigned int **__return_ptr))(*(void *)v2 + 48))(&v13);
  uint64_t v5 = (unsigned int *)*((void *)this + 30);
  unsigned int v6 = v13;
  long long v13 = 0;
  *((void *)this + 30) = v6;
  if (v5)
  {
    unsigned int v7 = atomic_load(v5 + 2);
    if (v7 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF);
    }
    if (v13)
    {
      unsigned int v8 = atomic_load(v13 + 2);
      if (v8 == 1) {
        (*(void (**)(void))(*(void *)v13 + 8))();
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
      }
    }
  }
  if (v11) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v11);
  }
  float result = v12;
  if (v12)
  {
    unsigned int v10 = atomic_load(v12 + 2);
    if (v10 == 1) {
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)v12 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

uint64_t TI::Favonius::SearchNodeTransposition::compute_language_model_data(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)(*(void *)(a1 + 232) + 8);
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  (*(void (**)(void, uint64_t, atomic_uint **))(**(void **)(a1 + 248) + 40))(*(void *)(a1 + 248), a2, &v4);
  uint64_t result = (uint64_t)v4;
  if (v4) {
    return WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v4);
  }
  return result;
}

void TI::Favonius::SearchNodeTransposition::append_local_keys_for_debugging(TI::Favonius::SearchNodeTransposition *this, KB::String *a2)
{
  KB::String::append(a2, 0x7Bu);
  TI::Favonius::Key::append_debug_data(*(TI::Favonius::Key **)(*((void *)this + 29) + 8), a2);
  TI::Favonius::SearchNode::append_local_keys_for_debugging(this, a2);

  KB::String::append(a2, 0x7Du);
}

BOOL TI::Favonius::SearchNodeTransposition::clone_discarding_second_touch_with_parent@<W0>(TI::Favonius::SearchNodeTransposition *this@<X0>, TI::Favonius::SearchNode *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (TI::Favonius::SearchNodeTransposition *)((char *)this + 88);
  uint64_t v5 = (const KB::String *)(*(void *)(*(uint64_t (**)(void))(**((void **)a2 + 7) + 16))(*((void *)a2 + 7))
                          + 8);
  if (v4 == v5 || (BOOL result = KB::String::equal(v4, v5, 1))) {
    operator new();
  }
  *a3 = 0;
  return result;
}

void TI::Favonius::SearchNodeTransposition::clone_discarding_first_touch_with_parent(void *a1@<X8>)
{
  *a1 = 0;
}

void TI::Favonius::SearchNodeTransposition::clone_with_parent(TI::Favonius::SearchNodeTransposition *this, TI::Favonius::SearchNode *a2)
{
}

TI::Favonius::SearchNodeTransposition *TI::Favonius::SearchNodeTransposition::SearchNodeTransposition(TI::Favonius::SearchNodeTransposition *this, const TI::Favonius::SearchNodeTransposition *a2, TI::Favonius::SearchNode *a3)
{
  uint64_t v5 = (unsigned int *)*((void *)a2 + 2);
  uint64_t v17 = v5;
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
  }
  unsigned int v6 = (atomic_uint *)*((void *)a2 + 6);
  uint64_t v16 = v6;
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  unint64_t v15 = 0;
  TI::Favonius::SearchNode::SearchNode((uint64_t)this, (uint64_t)a3, (uint64_t *)&v17, (uint64_t *)&v16, (uint64_t *)&v15, 0, *((float *)a2 + 38), NAN);
  if (v15)
  {
    unsigned int v7 = atomic_load(v15 + 2);
    if (v7 == 1) {
      (*(void (**)(void))(*(void *)v15 + 248))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v15 + 2, 0xFFFFFFFF);
    }
  }
  if (v16) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v16);
  }
  if (v17)
  {
    unsigned int v8 = atomic_load(v17 + 2);
    if (v8 == 1) {
      (*(void (**)(void))(*(void *)v17 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v17 + 2, 0xFFFFFFFF);
    }
  }
  *(void *)this = &unk_1F3F76D80;
  uint64_t v9 = *((void *)a2 + 28);
  *((void *)this + 28) = v9;
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
  }
  unsigned int v10 = (atomic_uint *)*((void *)a2 + 29);
  *((void *)this + 29) = v10;
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  *((void *)this + 30) = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)a2 + 31) + 208))(&v14);
  *((void *)this + 31) = v14;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  (*(void (**)(unsigned int **__return_ptr))(**((void **)a2 + 7) + 208))(&v13);
  (*(void (**)(TI::Favonius::SearchNodeTransposition *, unsigned int **))(*(void *)this + 152))(this, &v13);
  if (v13)
  {
    unsigned int v11 = atomic_load(v13 + 2);
    if (v11 == 1) {
      (*(void (**)(void))(*(void *)v13 + 248))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
    }
  }
  (*(void (**)(TI::Favonius::SearchNodeTransposition *))(*(void *)this + 136))(this);
  return this;
}

uint64_t TI::Favonius::SearchNodeTransposition::key_count(TI::Favonius::SearchNodeTransposition *this)
{
  return 2;
}

uint64_t TI::Favonius::SearchNodeTransposition::touch_count(TI::Favonius::SearchNodeTransposition *this)
{
  return 2;
}

float TI::Favonius::SearchNodeTransposition::decrease_bound_on_score(TI::Favonius::SearchNodeTransposition *this)
{
  uint64_t v2 = *((void *)this + 32);
  if (*((void *)this + 31))
  {
    if (!v2)
    {
      return TI::Favonius::SearchNode::decrease_bound_on_score(this);
    }
  }
  else if (!v2)
  {
    TI::Favonius::SearchNodeTransposition::compute_language_model_data_for_first_key(this);
    unint64_t v5 = *((void *)this + 32);
    uint64_t v4 = *((void *)this + 33);
    uint64_t v14 = &__block_literal_global_13588;
    unint64_t v6 = 126 - 2 * __clz(v5);
    if (v5) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(v4, (uint64_t *)(v4 + 8 * v5), (uint64_t)&v14, v7, 1);
    uint64_t v2 = *((void *)this + 32);
  }
  uint64_t v8 = *((void *)this + 33) + 8 * v2;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v8 - 8) = 0;
  unsigned int v10 = (unsigned int *)*((void *)this + 31);
  *((void *)this + 31) = v9;
  if (v10)
  {
    unsigned int v11 = atomic_load(v10 + 2);
    if (v11 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v10 + 248))(v10);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v12 = *((void *)this + 32);
  uint64_t v13 = v12 - 1;
  WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct((unsigned int *)(*((void *)this + 33) + 8 * (v12 - 1)), (unsigned int **)(*((void *)this + 33) + 8 * v12));
  *((void *)this + 32) = v13;

  return TI::Favonius::SearchNodeTransposition::set_bound_on_score(this);
}

atomic_uint *TI::Favonius::SearchNodeTransposition::compute_language_model_data_for_first_key(TI::Favonius::SearchNodeTransposition *this)
{
  uint64_t v1 = *(atomic_uint **)(*((void *)this + 6) + 8);
  uint64_t v3 = v1;
  if (v1) {
    atomic_fetch_add(v1, 1u);
  }
  TI::Favonius::SearchNode::get_language_extensions(*((void *)this + 4), (unint64_t *)this + 32, (uint64_t *)&v3);
  BOOL result = v3;
  if (v3) {
    return (atomic_uint *)WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v3);
  }
  return result;
}

BOOL ___ZN2TI8Favonius23SearchNodeTransposition23decrease_bound_on_scoreEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4 = (*(float (**)(void))(**(void **)a2 + 24))();
  return v4 < (*(float (**)(void))(**(void **)a3 + 24))();
}

void *TI::Favonius::SearchNodeTransposition::branch_at_current_bound@<X0>(TI::Favonius::SearchNodeTransposition *this@<X0>, void *a2@<X8>)
{
  if (*((void *)this + 32)) {
    operator new();
  }

  return TI::Favonius::SearchNode::branch_at_current_bound(this, a2);
}

uint64_t TI::Favonius::SearchNodeTransposition::node_at_current_bound@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if (!*(void *)(this + 64) && *(unsigned char *)(this + 148) && *(unsigned char *)(this + 149))
  {
    *(unsigned char *)(this + 149) = 0;
    *(_DWORD *)(this + 24) = -8388608;
    *a2 = this;
    atomic_fetch_add((atomic_uint *volatile)(this + 8), 1u);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

atomic_uint *TI::Favonius::SearchNodeTransposition::clone_substituting_touch@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  BOOL result = (atomic_uint *)(*(uint64_t (**)(void, void))(*(void *)*a2 + 72))(*a2, *(__int16 *)(*(void *)(*(void *)(a1 + 48) + 8) + 62));
  if (result)
  {
    atomic_fetch_add(result, 1u);
    operator new();
  }
  *a3 = 0;
  return result;
}

void *TI::Favonius::SearchNodeTransposition::SearchNodeTransposition(void *a1, uint64_t a2, unsigned int **a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = *a4;
  *a4 = 0;
  uint64_t v18 = v8;
  uint64_t v19 = v7;
  uint64_t v9 = *(unsigned int **)(a2 + 56);
  uint64_t v17 = v9;
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)v9 + 2, 1u);
  }
  TI::Favonius::SearchNode::SearchNode((uint64_t)a1, v6, (uint64_t *)&v19, &v18, (uint64_t *)&v17, (void *)(a2 + 64), *(float *)(a2 + 152), NAN);
  if (v17)
  {
    unsigned int v10 = atomic_load(v17 + 2);
    if (v10 == 1) {
      (*(void (**)(void))(*(void *)v17 + 248))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v17 + 2, 0xFFFFFFFF);
    }
  }
  if (v18) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v18);
  }
  if (v19)
  {
    unsigned int v11 = atomic_load(v19 + 2);
    if (v11 == 1) {
      (*(void (**)(void))(*(void *)v19 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v19 + 2, 0xFFFFFFFF);
    }
  }
  *a1 = &unk_1F3F76D80;
  uint64_t v12 = *(void *)(a2 + 224);
  a1[28] = v12;
  if (v12) {
    atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
  }
  uint64_t v13 = *(atomic_uint **)(a2 + 232);
  a1[29] = v13;
  if (v13) {
    atomic_fetch_add(v13, 1u);
  }
  uint64_t v14 = *(void *)(a2 + 240);
  a1[30] = v14;
  if (v14) {
    atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 1u);
  }
  uint64_t v15 = *(void *)(a2 + 248);
  a1[31] = v15;
  if (v15) {
    atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::Vector(a1 + 32, (void *)(a2 + 256));
  return a1;
}

void TI::Favonius::SearchNodeTransposition::~SearchNodeTransposition(TI::Favonius::SearchNodeTransposition *this)
{
  TI::Favonius::SearchNodeTransposition::~SearchNodeTransposition(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t vars8;

  *(void *)this = &unk_1F3F76D80;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 256);
  uint64_t v2 = (unsigned int *)*((void *)this + 31);
  if (v2)
  {
    uint64_t v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  float v4 = (unsigned int *)*((void *)this + 30);
  if (v4)
  {
    unint64_t v5 = atomic_load(v4 + 2);
    if (v5 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v6 = *((void *)this + 29);
  if (v6) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v6);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 28);
  if (v7)
  {
    uint64_t v8 = atomic_load(v7 + 2);
    if (v8 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF);
    }
  }

  TI::Favonius::SearchNode::~SearchNode(this);
}

void TI::Favonius::SearchNodeTransposition::create()
{
}

uint64_t TI::Favonius::SearchNodeTransposition::SearchNodeTransposition(uint64_t a1, uint64_t a2, uint64_t a3, atomic_uint *a4, unsigned int *a5, atomic_uint *a6, float a7)
{
  uint64_t v15 = a5;
  if (a5) {
    atomic_fetch_add((atomic_uint *volatile)a5 + 2, 1u);
  }
  uint64_t v14 = a6;
  if (a6) {
    atomic_fetch_add(a6, 1u);
  }
  uint64_t v13 = 0;
  TI::Favonius::SearchNode::SearchNode(a1, a2, (uint64_t *)&v15, (uint64_t *)&v14, (uint64_t *)&v13, 0, a7, NAN);
  if (v13)
  {
    unsigned int v10 = atomic_load(v13 + 2);
    if (v10 == 1) {
      (*(void (**)(void))(*(void *)v13 + 248))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
    }
  }
  if (v14) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v14);
  }
  if (v15)
  {
    unsigned int v11 = atomic_load(v15 + 2);
    if (v11 == 1) {
      (*(void (**)(void))(*(void *)v15 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v15 + 2, 0xFFFFFFFF);
    }
  }
  *(void *)a1 = &unk_1F3F76D80;
  *(void *)(a1 + 224) = a3;
  if (a3) {
    atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  }
  *(void *)(a1 + 232) = a4;
  if (a4) {
    atomic_fetch_add(a4, 1u);
  }
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  TI::Favonius::SearchNodeTransposition::set_bound_on_score((TI::Favonius::SearchNodeTransposition *)a1);
  return a1;
}

void TI::Favonius::SearchNodeSkippingTouch::clone_with_typing()
{
}

TI::Favonius::SearchNodeSkippingTouch *TI::Favonius::SearchNodeSkippingTouch::SearchNodeSkippingTouch(TI::Favonius::SearchNodeSkippingTouch *this, const TI::Favonius::SearchNodeSkippingTouch *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)a2 + 4);
  if (v3)
  {
    uint64_t v3 = (unsigned int *)*((void *)v3 + 7);
    if (v3) {
      atomic_fetch_add((atomic_uint *volatile)v3 + 2, 1u);
    }
  }
  uint64_t v6 = v3;
  TI::Favonius::SearchNode::SearchNode((uint64_t)this, (uint64_t)a2, (uint64_t *)&v6);
  if (v6)
  {
    unsigned int v4 = atomic_load(v6 + 2);
    if (v4 == 1) {
      (*(void (**)(void))(*(void *)v6 + 248))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF);
    }
  }
  *(void *)this = &unk_1F3F76E58;
  return this;
}

BOOL TI::Favonius::SearchNodeSkippingTouch::compute_score_is_final(TI::Favonius::SearchNodeSkippingTouch *this)
{
  return *((void *)this + 16) != 0;
}

unsigned int *TI::Favonius::SearchNodeSkippingTouch::compute_geometry_model_data(TI::Favonius::SearchNodeSkippingTouch *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 4) + 128);
  uint64_t v3 = *((void *)this + 2);
  uint64_t v6 = (unsigned int *)v3;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  }
  (*(void (**)(uint64_t, unsigned int **))(*(void *)v2 + 80))(v2, &v6);
  BOOL result = v6;
  if (v6)
  {
    unsigned int v5 = atomic_load(v6 + 2);
    if (v5 == 1) {
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)v6 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

unsigned __int16 *TI::Favonius::SearchNodeSkippingTouch::append_local_keys_for_debugging(TI::Favonius::SearchNodeSkippingTouch *this, KB::String *a2)
{
  return KB::String::append((unsigned __int16 *)a2, "{}", 0xFFFFuLL);
}

void TI::Favonius::SearchNodeSkippingTouch::clone_with_parent(TI::Favonius::SearchNodeSkippingTouch *this, TI::Favonius::SearchNode *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 7) + 208))(&v2);
  operator new();
}

uint64_t TI::Favonius::SearchNodeSkippingTouch::SearchNodeSkippingTouch(uint64_t a1, uint64_t a2, unsigned int **a3, float a4)
{
  unsigned int v5 = *a3;
  *a3 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = v5;
  uint64_t v6 = *(unsigned int **)(a2 + 56);
  unsigned int v10 = v6;
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)v6 + 2, 1u);
  }
  TI::Favonius::SearchNode::SearchNode(a1, a2, (uint64_t *)&v12, &v11, (uint64_t *)&v10, 0, a4, NAN);
  if (v10)
  {
    unsigned int v7 = atomic_load(v10 + 2);
    if (v7 == 1) {
      (*(void (**)(void))(*(void *)v10 + 248))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF);
    }
  }
  if (v11) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v11);
  }
  if (v12)
  {
    unsigned int v8 = atomic_load(v12 + 2);
    if (v8 == 1) {
      (*(void (**)(void))(*(void *)v12 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF);
    }
  }
  *(void *)a1 = &unk_1F3F76E58;
  *(float *)(a1 + 24) = (*(float (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16))
                      + (float)(*(float *)(*(void *)(a1 + 32) + 144)
                              + (float)(*(float *)(a1 + 152) * *(float *)(*(void *)(a1 + 32) + 136)));
  return a1;
}

uint64_t TI::Favonius::SearchNodeSkippingTouch::key_count(TI::Favonius::SearchNodeSkippingTouch *this)
{
  return 0;
}

float TI::Favonius::SearchNodeSkippingTouch::decrease_bound_on_score(TI::Favonius::SearchNodeSkippingTouch *this)
{
  if (!*((unsigned char *)this + 148))
  {
    if (!*((void *)this + 16))
    {
      (*(void (**)(unsigned int **__return_ptr, TI::Favonius::SearchNodeSkippingTouch *))(*(void *)this + 120))(&v10, this);
      uint64_t v2 = (unsigned int *)*((void *)this + 16);
      uint64_t v3 = v10;
      unsigned int v10 = 0;
      *((void *)this + 16) = v3;
      if (v2)
      {
        unsigned int v4 = atomic_load(v2 + 2);
        if (v4 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
        }
        if (v10)
        {
          unsigned int v5 = atomic_load(v10 + 2);
          if (v5 == 1) {
            (*(void (**)(void))(*(void *)v10 + 8))();
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF);
          }
        }
      }
      *((float *)this + 36) = (*(float (**)(void))(**((void **)this + 16) + 16))(*((void *)this + 16));
      (*(void (**)(TI::Favonius::SearchNodeSkippingTouch *))(*(void *)this + 136))(this);
    }
    *((unsigned char *)this + 148) = (*(uint64_t (**)(TI::Favonius::SearchNodeSkippingTouch *))(*(void *)this + 128))(this);
    float result = *((float *)this + 38);
    unsigned int v7 = (const float *)((char *)this + 144);
    float32x2_t v8 = vld1_dup_f32(v7);
    float32x2_t v9 = vmla_n_f32(v8, *(float32x2_t *)((char *)this + 136), result);
    *(float32x2_t *)((char *)this + 156) = v9;
    *((_DWORD *)this + 6) = v9.i32[0];
  }
  return result;
}

void TI::Favonius::SearchNodeSkippingTouch::clone_substituting_touch()
{
}

void TI::Favonius::SearchNodeSkippingTouch::~SearchNodeSkippingTouch(TI::Favonius::SearchNodeSkippingTouch *this)
{
  TI::Favonius::SearchNode::~SearchNode(this);

  JUMPOUT(0x1E4E7BC20);
}

void TI::Favonius::SearchNodeSkippingTouch::create()
{
}

void TIInlineCompletionsCache::TIInlineCompletionsCache(TIInlineCompletionsCache *this, uint64_t a2)
{
  *(void *)this = a2;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 192) = 0;
}

{
  *(void *)this = a2;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 192) = 0;
}

void TIInlineCompletionsCache::cached_candidate(KB::LanguageModelContext *this@<X1>, uint64_t a2@<X0>, const void **a3@<X2>, size_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 192)) {
    goto LABEL_41;
  }
  unsigned int v10 = (const void *)*((unsigned __int8 *)a3 + 23);
  if ((char)v10 < 0) {
    unsigned int v10 = a3[1];
  }
  if (!v10)
  {
    if (KB::LanguageModelContext::is_linguistically_void(this))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315138;
        *(void *)BOOL v64 = "cached_candidate";
        uint64_t v15 = MEMORY[0x1E4F14500];
        uint64_t v16 = "%s  TIInlineCompletionsCache:: Context is not linguistically void. Also prefix is empty - will not look into cache.";
LABEL_40:
        _os_log_debug_impl(&dword_1E3F0E000, v15, OS_LOG_TYPE_DEBUG, v16, buf, 0xCu);
      }
    }
    else
    {
      uint64_t v26 = *((void *)this + 3);
      if (v26 == *((void *)this + 2) || *(_DWORD *)(v26 - 4) > 0x1F3u) {
        goto LABEL_5;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315138;
        *(void *)BOOL v64 = "cached_candidate";
        uint64_t v15 = MEMORY[0x1E4F14500];
        uint64_t v16 = "%s  TIInlineCompletionsCache:: Context is not linguistically void but ends with a sentence delimiter or sp"
              "ecial token. Also prefix is empty - will not look into cache.";
        goto LABEL_40;
      }
    }
LABEL_41:
    *a5 = 0;
    a5[88] = 0;
    return;
  }
LABEL_5:
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)buf, (const KB::LanguageModelContext *)(a2 + 8));
  uint64_t v11 = v69;
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 3);
  uint64_t v13 = *((void *)this + 10);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 11) - v13) >> 3);
  if (v14 >= v12 && v14 <= *(void *)a2 - 0x5555555555555555 * ((v70 - v69) >> 3))
  {
    if (v70 != v69)
    {
      uint64_t v17 = 0;
      if (v12 <= 1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 3);
      }
      while (1)
      {
        uint64_t v19 = (unsigned __int8 *)(v13 + 24 * v17);
        float v20 = (unsigned __int8 **)(v11 + 24 * v17);
        uint64_t v21 = v19[23];
        if ((v21 & 0x80u) == 0) {
          unint64_t v22 = (unsigned __int8 *)v19[23];
        }
        else {
          unint64_t v22 = (unsigned __int8 *)*((void *)v19 + 1);
        }
        unsigned int v23 = (unsigned __int8 *)*((unsigned __int8 *)v20 + 23);
        int v24 = (char)v23;
        if ((char)v23 < 0) {
          unsigned int v23 = v20[1];
        }
        if (v22 != v23) {
          goto LABEL_7;
        }
        if (v24 >= 0) {
          uint64_t v25 = (unsigned __int8 *)(v11 + 24 * v17);
        }
        else {
          uint64_t v25 = *v20;
        }
        if ((v21 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v19, v25, *((void *)v19 + 1))) {
            goto LABEL_7;
          }
        }
        else if (v19[23])
        {
          while (*v19 == *v25)
          {
            ++v19;
            ++v25;
            if (!--v21) {
              goto LABEL_34;
            }
          }
          goto LABEL_7;
        }
LABEL_34:
        if (++v17 == v18) {
          goto LABEL_44;
        }
      }
    }
    unint64_t v18 = 0;
LABEL_44:
    std::string::basic_string[abi:nn180100]<0>(&v62, "");
    unint64_t v27 = v14 - v18;
    if (v14 > v18)
    {
      uint64_t v28 = (char *)(v13 + 24 * v18);
      do
      {
        uint64_t v29 = v28;
        if (v28[23] < 0) {
          uint64_t v29 = *(char **)v28;
        }
        std::string::basic_string[abi:nn180100]<0>(&v53, v29);
        uint64_t v30 = std::string::append(&v53, " ", 1uLL);
        std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p[0].__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v32 = __p;
        }
        else {
          uint64_t v32 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
        }
        std::string::append(&v62, (const std::string::value_type *)v32, size);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        v28 += 24;
        --v27;
      }
      while (v27);
    }
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v34 = v62.__r_.__value_.__l.__size_;
    }
    if (*((char *)a3 + 23) >= 0) {
      size_t v35 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v35 = (size_t)a3[1];
    }
    p_s2 = (char *)&__s2;
    std::string::basic_string[abi:nn180100]((uint64_t)&__s2, v35 + v34);
    if ((v61 & 0x80u) != 0) {
      p_s2 = (char *)__s2;
    }
    if (v34)
    {
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v62;
      }
      else {
        uint64_t v37 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      memmove(p_s2, v37, v34);
    }
    unsigned int v38 = &p_s2[v34];
    if (v35)
    {
      if (*((char *)a3 + 23) >= 0) {
        BOOL v39 = a3;
      }
      else {
        BOOL v39 = *a3;
      }
      memmove(v38, v39, v35);
    }
    v38[v35] = 0;
    size_t v40 = v61;
    unsigned __int8 v41 = v61;
    if ((v61 & 0x80u) != 0) {
      size_t v40 = *(void *)v60;
    }
    if (v40 < a4)
    {
      *a5 = 0;
      a5[88] = 0;
LABEL_115:
      if ((v41 & 0x80) != 0) {
        operator delete(__s2);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      goto LABEL_8;
    }
    if (!*(unsigned char *)(a2 + 192)) {
      goto LABEL_119;
    }
    if (*(char *)(a2 + 135) < 0) {
      std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a2 + 112), *(void *)(a2 + 120));
    }
    else {
      std::string v53 = *(std::string *)(a2 + 112);
    }
    if (*(char *)(a2 + 159) < 0) {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(a2 + 136), *(void *)(a2 + 144));
    }
    else {
      std::string v54 = *(std::string *)(a2 + 136);
    }
    uint64_t v55 = *(void *)(a2 + 160);
    int v56 = *(_DWORD *)(a2 + 168);
    v57[0] = 0;
    char v58 = 0;
    if (*(unsigned char *)(a2 + 184))
    {
      MEMORY[0x1E4E7B4C0](v57, a2 + 176);
      char v58 = 1;
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v52, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
    }
    else {
      std::string v52 = v53;
    }
    std::string::size_type v42 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    int v43 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v42 = v52.__r_.__value_.__l.__size_;
    }
    if ((char)v61 < 0)
    {
      size_t v44 = *(void *)v60;
      if (v42 < *(void *)v60) {
        goto LABEL_105;
      }
      float v45 = __s2;
    }
    else
    {
      size_t v44 = v61;
      if (v42 < v61) {
        goto LABEL_105;
      }
      float v45 = &__s2;
    }
    if (std::string::starts_with[abi:nn180100]((uint64_t)&v52, v45, v44))
    {
      if (*(unsigned char *)(a2 + 192))
      {
        std::string::size_type v46 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v46 = v62.__r_.__value_.__l.__size_;
        }
        std::string::size_type v50 = v46;
        std::pair<TIInlineCompletion,unsigned long>::pair[abi:nn180100]<TIInlineCompletion const&,unsigned long,0>(__p, (long long *)(a2 + 112), &v50);
        std::pair<TIInlineCompletion,unsigned long>::pair[abi:nn180100]((uint64_t)a5, (long long *)__p);
        a5[88] = 1;
        std::pair<TIInlineCompletion,unsigned long>::~pair((uint64_t)__p);
        goto LABEL_106;
      }
LABEL_119:
      float v47 = (std::string *)std::__throw_bad_optional_access[abi:nn180100]();
      std::pair<TIInlineCompletion,unsigned long>::pair[abi:nn180100]<TIInlineCompletion const&,unsigned long,0>(v47, v48, v49);
      return;
    }
LABEL_105:
    *a5 = 0;
    a5[88] = 0;
LABEL_106:
    if (v43 < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (v58) {
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v57);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    unsigned __int8 v41 = v61;
    goto LABEL_115;
  }
LABEL_7:
  *a5 = 0;
  a5[88] = 0;
LABEL_8:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v68);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v67);
  if (v65)
  {
    uint64_t v66 = v65;
    operator delete(v65);
  }
  if (*(void *)&v64[4]) {
    std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&v64[4]);
  }
}

std::string *std::pair<TIInlineCompletion,unsigned long>::pair[abi:nn180100]<TIInlineCompletion const&,unsigned long,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  unsigned int v7 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  std::string::size_type v9 = *((void *)a2 + 6);
  int v10 = *((_DWORD *)a2 + 14);
  this[2].__r_.__value_.__s.__data_[16] = 0;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = v10;
  this[2].__r_.__value_.__r.__words[0] = v9;
  this[3].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 72))
  {
    MEMORY[0x1E4E7B4C0]();
    this[3].__r_.__value_.__s.__data_[0] = 1;
  }
  this[3].__r_.__value_.__l.__size_ = *a3;
  return this;
}

uint64_t std::pair<TIInlineCompletion,unsigned long>::pair[abi:nn180100](uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v5 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v5;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v6 = *((void *)a2 + 6);
  int v7 = *((_DWORD *)a2 + 14);
  *(unsigned char *)(a1 + 64) = 0;
  uint64_t v8 = a1 + 64;
  *(_DWORD *)(v8 - 8) = v7;
  *(void *)(v8 - 16) = v6;
  *(unsigned char *)(v8 + 8) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    language_modeling::v1::InlineCompletion::InlineCompletion();
    *(unsigned char *)(a1 + 72) = 1;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  return a1;
}

uint64_t std::pair<TIInlineCompletion,unsigned long>::~pair(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)(a1 + 64));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t TIInlineCompletionsCache::clear(uint64_t this)
{
  if (*(unsigned char *)(this + 192))
  {
    uint64_t v1 = this;
    this = std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair(this + 8);
    *(unsigned char *)(v1 + 192) = 0;
  }
  return this;
}

void TIInlineCompletionsCache::update(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)(a1 + 192))
  {
    KB::LanguageModelContext::operator=(v4, (uint64_t *)a2);
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 104));
    std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 128));
    uint64_t v5 = *(void *)(a2 + 152);
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 160);
    *(void *)(a1 + 160) = v5;
    uint64_t v6 = (language_modeling::v1::InlineCompletion *)(a1 + 176);
    uint64_t v7 = a2 + 168;
    if (*(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 176))
    {
      if (*(unsigned char *)(a1 + 184))
      {
        MEMORY[0x1F412A408](v6, v7);
      }
    }
    else if (*(unsigned char *)(a1 + 184))
    {
      language_modeling::v1::InlineCompletion::~InlineCompletion(v6);
      *(unsigned char *)(a1 + 184) = 0;
    }
    else
    {
      MEMORY[0x1E4E7B4C0](v6, v7);
      *(unsigned char *)(a1 + 184) = 1;
    }
  }
  else
  {
    std::pair<KB::LanguageModelContext,TIInlineCompletion>::pair[abi:nn180100](v4, a2);
    *(unsigned char *)(a1 + 192) = 1;
  }
}

BOOL TIInlineCompletionsCache::empty(TIInlineCompletionsCache *this)
{
  return *((unsigned char *)this + 192) == 0;
}

uint64_t TI::Favonius::SearchNodeInsertingKey::instance_error_correction_type(TI::Favonius::SearchNodeInsertingKey *this)
{
  return 4;
}

void TI::Favonius::SearchNodeInsertingKey::clone_with_typing()
{
}

uint64_t TI::Favonius::SearchNodeInsertingKey::SearchNodeInsertingKey(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  unint64_t v12 = v5;
  TI::Favonius::SearchNode::SearchNode(a1, a2, (uint64_t *)&v12);
  if (v12)
  {
    unsigned int v6 = atomic_load(v12 + 2);
    if (v6 == 1) {
      (*(void (**)(void))(*(void *)v12 + 248))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF);
    }
  }
  *(void *)a1 = &unk_1F3F76F10;
  uint64_t v7 = *(void *)(a2 + 224);
  *(void *)(a1 + 224) = v7;
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  }
  uint64_t v8 = *(void *)(a2 + 232);
  *(void *)(a1 + 232) = v8;
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  float v9 = *(float *)(a2 + 240);
  float v10 = *(float *)(a2 + 244);
  *(float *)(a1 + 240) = v9;
  *(float *)(a1 + 244) = v10;
  *(float *)(a1 + 24) = v10 + (float)(v9 + *(float *)(a1 + 24));
  return a1;
}

unsigned int *TI::Favonius::SearchNodeInsertingKey::compute_geometry_model_data(TI::Favonius::SearchNodeInsertingKey *this)
{
  *((_DWORD *)this + 61) = 0;
  uint64_t v2 = *((void *)this + 29);
  uint64_t v3 = *((void *)this + 2);
  uint64_t v8 = (unsigned int *)v3;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 6);
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  (*(void (**)(uint64_t, unsigned int **, atomic_uint **))(*(void *)v2 + 48))(v2, &v8, &v7);
  if (v7) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v7);
  }
  float result = v8;
  if (v8)
  {
    unsigned int v6 = atomic_load(v8 + 2);
    if (v6 == 1) {
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)v8 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

uint64_t TI::Favonius::SearchNodeInsertingKey::compute_language_model_data(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 240) = 0;
  uint64_t v2 = *(atomic_uint **)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  (*(void (**)(void, uint64_t, atomic_uint **))(**(void **)(a1 + 224) + 40))(*(void *)(a1 + 224), a2, &v4);
  uint64_t result = (uint64_t)v4;
  if (v4) {
    return WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v4);
  }
  return result;
}

uint64_t *TI::Favonius::SearchNodeInsertingKey::append_local_keys_for_debugging(TI::Favonius::SearchNodeInsertingKey *this, KB::String *a2)
{
  KB::String::append(a2, 0x7Bu);
  uint64_t v4 = (TI::Favonius::Key **)(*(uint64_t (**)(void))(**((void **)this + 28) + 16))(*((void *)this + 28));
  TI::Favonius::Key::append_debug_data(*v4, a2);
  KB::String::append(a2, 0x7Du);

  return TI::Favonius::SearchNode::append_local_keys_for_debugging(this, a2);
}

void TI::Favonius::SearchNodeInsertingKey::clone_with_parent(TI::Favonius::SearchNodeInsertingKey *this, TI::Favonius::SearchNode *a2)
{
  if (*((void *)a2 + 4)
    || (*(_WORD *)(*(void *)(*(uint64_t (**)(void))(**((void **)this + 28) + 16))(*((void *)this + 28))
                 + 60) & 0x20) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 28) + 208))(&v9);
    uint64_t v4 = v9;
    uint64_t v5 = (atomic_uint *)*((void *)a2 + 16);
    if (v5) {
      atomic_fetch_add(v5 + 2, 1u);
    }
    unsigned int v6 = *(atomic_uint **)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    uint64_t v8 = v6;
    if (v6) {
      atomic_fetch_add(v6, 1u);
    }
    (*(void (**)(uint64_t *__return_ptr, atomic_uint *, atomic_uint **, void))(*(void *)v5 + 72))(&v9, v5, &v8, *((void *)this + 2));
    uint64_t v9 = 0;
    if (v8) {
      WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v8);
    }
    unsigned int v7 = atomic_load((unsigned int *)v5 + 2);
    if (v7 == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
    }
    else {
      atomic_fetch_add(v5 + 2, 0xFFFFFFFF);
    }
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 7) + 208))(&v9);
    operator new();
  }

  TI::Favonius::SearchNode::clone_with_parent(this, a2);
}

uint64_t TI::Favonius::SearchNodeInsertingKey::SearchNodeInsertingKey(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned int **a7, void *a8, float a9, float a10)
{
  unint64_t v14 = *a3;
  *a3 = 0;
  uint64_t v15 = *a6;
  *a6 = 0;
  uint64_t v21 = v15;
  unint64_t v22 = v14;
  uint64_t v16 = *a7;
  *a7 = 0;
  float v20 = v16;
  TI::Favonius::SearchNode::SearchNode(a1, a2, (uint64_t *)&v22, &v21, (uint64_t *)&v20, a8, a9, NAN);
  if (v20)
  {
    unsigned int v17 = atomic_load(v20 + 2);
    if (v17 == 1) {
      (*(void (**)(void))(*(void *)v20 + 248))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF);
    }
  }
  if (v21) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v21);
  }
  if (v22)
  {
    unsigned int v18 = atomic_load(v22 + 2);
    if (v18 == 1) {
      (*(void (**)(void))(*(void *)v22 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v22 + 2, 0xFFFFFFFF);
    }
  }
  *(void *)a1 = &unk_1F3F76F10;
  *(void *)(a1 + 224) = a4;
  if (a4) {
    atomic_fetch_add((atomic_uint *volatile)(a4 + 8), 1u);
  }
  *(void *)(a1 + 232) = a5;
  if (a5) {
    atomic_fetch_add((atomic_uint *volatile)(a5 + 8), 1u);
  }
  *(float *)(a1 + 240) = a10;
  *(float *)(a1 + 244) = (*(float (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
  if (*(void *)(a1 + 32)
    && (*(_WORD *)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 224) + 16))(*(void *)(a1 + 224))
                 + 60) & 0x20) != 0)
  {
    ++*(_DWORD *)(a1 + 168);
  }
  *(float *)(a1 + 24) = (float)(*(float *)(a1 + 24) + *(float *)(a1 + 240)) + *(float *)(a1 + 244);
  return a1;
}

uint64_t TI::Favonius::SearchNodeInsertingKey::key_count(TI::Favonius::SearchNodeInsertingKey *this)
{
  return 2;
}

float TI::Favonius::SearchNodeInsertingKey::decrease_bound_on_score(TI::Favonius::SearchNodeInsertingKey *this)
{
  TI::Favonius::SearchNode::decrease_bound_on_score(this);
  float result = (float)(*((float *)this + 6) + *((float *)this + 60)) + *((float *)this + 61);
  *((float *)this + 6) = result;
  return result;
}

atomic_uint *TI::Favonius::SearchNodeInsertingKey::clone_substituting_touch@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  float result = (atomic_uint *)(*(uint64_t (**)(void, void))(*(void *)*a2 + 72))(*a2, *(__int16 *)(*(void *)(*(void *)(a1 + 48) + 8) + 62));
  if (result)
  {
    atomic_fetch_add(result, 1u);
    float v6 = (*(float (**)(void))(**(void **)(a1 + 224) + 24))(*(void *)(a1 + 224));
    logf(v6);
    operator new();
  }
  *a3 = 0;
  return result;
}

void TI::Favonius::SearchNodeInsertingKey::~SearchNodeInsertingKey(TI::Favonius::SearchNodeInsertingKey *this)
{
  TI::Favonius::SearchNodeInsertingKey::~SearchNodeInsertingKey(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t vars8;

  *(void *)this = &unk_1F3F76F10;
  uint64_t v2 = (unsigned int *)*((void *)this + 29);
  if (v2)
  {
    uint64_t v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 28);
  if (v4)
  {
    uint64_t v5 = atomic_load(v4 + 2);
    if (v5 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v4 + 248))(v4);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF);
    }
  }

  TI::Favonius::SearchNode::~SearchNode(this);
}

void TI::Favonius::SearchNodeInsertingKey::create()
{
}

void TIFitAffineMLLMatrix::TIFitAffineMLLMatrix(TIFitAffineMLLMatrix *this, uint64_t a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = a2;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
}

{
  *(void *)this = a2;
  *((void *)this + 1) = a2;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
}

void TIFitAffineMLLMatrix::TIFitAffineMLLMatrix(TIFitAffineMLLMatrix *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = a3;
  *((void *)this + 1) = a2;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
}

{
  *(void *)this = a3;
  *((void *)this + 1) = a2;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
}

void *TIFitAffineMLLMatrix::TIFitAffineMLLMatrix(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[3] = 0;
  a1[2] = a1 + 3;
  float v6 = (uint64_t **)(a1 + 2);
  *a1 = a3;
  a1[1] = a2;
  a1[4] = 0;
  unint64_t v15 = 0;
  if (a3 * a2) {
    BOOL v7 = a5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    unint64_t v9 = 0;
    uint64_t v10 = a3 * a2 - 1;
    uint64_t v11 = 8 * a5 - 8;
    do
    {
      double v12 = *(double *)(a4 + 8 * v9);
      if (v12 != 0.0) {
        *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v6, v9, (uint64_t *)&v15)+ 5) = v12;
      }
      unint64_t v15 = v9 + 1;
      if (v10 == v9) {
        break;
      }
      uint64_t v13 = v11;
      v11 -= 8;
      ++v9;
    }
    while (v13);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  float v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        float v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        float v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)operator new(0x30uLL);
    v9[4] = *a3;
    v9[5] = 0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

__n128 TIFitAffineMLLMatrix::TIFitAffineMLLMatrix(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  a1[1].n128_u64[0] = (unint64_t)&a1[1].n128_u64[1];
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  a1[1].n128_u64[0] = (unint64_t)&a1[1].n128_u64[1];
  return result;
}

void TIFitAffineMLLMatrix::TIFitAffineMLLMatrix(TIFitAffineMLLMatrix *this, const TIFitAffineMLLMatrix *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = (char *)this + 24;
  std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>((uint64_t *)this + 2, *((void **)a2 + 2), (void *)a2 + 3);
}

{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = (char *)this + 24;
  std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>((uint64_t *)this + 2, *((void **)a2 + 2), (void *)a2 + 3);
}

uint64_t *std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    float v6 = result + 1;
    do
    {
      BOOL v7 = v4 + 4;
      unint64_t v8 = (uint64_t *)v5[1];
      unint64_t v9 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_9;
      }
      uint64_t v10 = (uint64_t *)v5[1];
      uint64_t v11 = v6;
      if (v8)
      {
        do
        {
          unint64_t v9 = v10;
          uint64_t v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      unint64_t v13 = *v7;
      if (v9[4] < *v7)
      {
LABEL_9:
        if (v8) {
          unint64_t v14 = (uint64_t **)v9;
        }
        else {
          unint64_t v14 = (uint64_t **)v6;
        }
        if (v8) {
          unint64_t v15 = (uint64_t **)(v9 + 1);
        }
        else {
          unint64_t v15 = (uint64_t **)v6;
        }
      }
      else
      {
        unint64_t v14 = (uint64_t **)v6;
        unint64_t v15 = (uint64_t **)v6;
        if (v8)
        {
          unint64_t v15 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              unint64_t v14 = (uint64_t **)v8;
              unint64_t v19 = v8[4];
              if (v13 >= v19) {
                break;
              }
              unint64_t v8 = *v14;
              unint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v19 >= v13) {
              break;
            }
            unint64_t v15 = v14 + 1;
            unint64_t v8 = v14[1];
            if (!v8) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = (uint64_t *)operator new(0x30uLL);
        *((_OWORD *)v16 + 2) = *(_OWORD *)v7;
        __n128 result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v14, v15, v16);
      }
      unsigned int v17 = (void *)v4[1];
      if (v17)
      {
        do
        {
          unsigned int v18 = v17;
          unsigned int v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unsigned int v18 = (void *)v4[2];
          BOOL v12 = *v18 == (void)v4;
          uint64_t v4 = v18;
        }
        while (!v12);
      }
      uint64_t v4 = v18;
    }
    while (v18 != a3);
  }
  return result;
}

uint64_t *TIFitAffineMLLMatrix::operator=@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (a1 == a2) {
    goto LABEL_47;
  }
  uint64_t v5 = *(void **)(a2 + 16);
  float v6 = (void *)(a2 + 24);
  if (*(void *)(a1 + 32))
  {
    unint64_t v8 = (uint64_t **)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v9 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a1 + 24;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    if (*(void *)(v9 + 8)) {
      uint64_t v10 = *(uint64_t **)(v9 + 8);
    }
    else {
      uint64_t v10 = (uint64_t *)v9;
    }
    if (v10)
    {
      uint64_t v11 = std::__tree<std::__value_type<std::string,std::variant<BOOL,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<BOOL,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<BOOL,std::string>>>>::_DetachedTreeCache::__detach_next((uint64_t)v10);
      if (v5 == v6)
      {
        unint64_t v13 = v10;
      }
      else
      {
        BOOL v12 = v5;
        do
        {
          unint64_t v13 = v11;
          unint64_t v14 = v12[4];
          v10[4] = v14;
          void v10[5] = v12[5];
          unint64_t v15 = *v8;
          uint64_t v16 = (uint64_t **)(a1 + 24);
          unsigned int v17 = (uint64_t **)(a1 + 24);
          if (*v8)
          {
            do
            {
              while (1)
              {
                uint64_t v16 = (uint64_t **)v15;
                if (v14 >= v15[4]) {
                  break;
                }
                unint64_t v15 = (uint64_t *)*v15;
                unsigned int v17 = v16;
                if (!*v16) {
                  goto LABEL_15;
                }
              }
              unint64_t v15 = (uint64_t *)v15[1];
            }
            while (v15);
            unsigned int v17 = v16 + 1;
          }
LABEL_15:
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)(a1 + 16), (uint64_t)v16, v17, v10);
          if (v11) {
            uint64_t v11 = std::__tree<std::__value_type<std::string,std::variant<BOOL,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<BOOL,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<BOOL,std::string>>>>::_DetachedTreeCache::__detach_next((uint64_t)v11);
          }
          else {
            uint64_t v11 = 0;
          }
          unsigned int v18 = (void *)v12[1];
          if (v18)
          {
            do
            {
              uint64_t v5 = v18;
              unsigned int v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              uint64_t v5 = (void *)v12[2];
              BOOL v19 = *v5 == (void)v12;
              BOOL v12 = v5;
            }
            while (!v19);
          }
          if (!v13) {
            break;
          }
          BOOL v12 = v5;
          uint64_t v10 = v13;
        }
        while (v5 != v6);
      }
      std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v13);
      if (!v11) {
        goto LABEL_33;
      }
      for (uint64_t i = (uint64_t *)v11[2]; i; uint64_t i = (uint64_t *)i[2])
        uint64_t v11 = i;
      float v20 = v11;
    }
    else
    {
      float v20 = 0;
    }
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v20);
  }
LABEL_33:
  if (v5 != v6)
  {
    unint64_t v22 = (uint64_t **)(a1 + 24);
    do
    {
      unsigned int v23 = operator new(0x30uLL);
      void v23[2] = *((_OWORD *)v5 + 2);
      int v24 = *v22;
      uint64_t v25 = (uint64_t **)(a1 + 24);
      uint64_t v26 = (uint64_t **)(a1 + 24);
      if (*v22)
      {
        do
        {
          while (1)
          {
            uint64_t v25 = (uint64_t **)v24;
            if (*((void *)v23 + 4) >= (unint64_t)v24[4]) {
              break;
            }
            int v24 = (uint64_t *)*v24;
            uint64_t v26 = v25;
            if (!*v25) {
              goto LABEL_41;
            }
          }
          int v24 = (uint64_t *)v24[1];
        }
        while (v24);
        uint64_t v26 = v25 + 1;
      }
LABEL_41:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)(a1 + 16), (uint64_t)v25, v26, (uint64_t *)v23);
      unint64_t v27 = (void *)v5[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          unint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v5[2];
          BOOL v19 = *v28 == (void)v5;
          uint64_t v5 = v28;
        }
        while (!v19);
      }
      uint64_t v5 = v28;
    }
    while (v28 != v6);
  }
LABEL_47:
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = a3 + 24;
  uint64_t v29 = *(void **)(a1 + 16);

  return std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>((uint64_t *)(a3 + 16), v29, (void *)(a1 + 24));
}

char *TIFitAffineMLLMatrix::identity@<X0>(char *this@<X0>, char **a2@<X8>)
{
  *a2 = this;
  a2[1] = this;
  a2[4] = 0;
  a2[3] = 0;
  a2[2] = (char *)(a2 + 3);
  if (this)
  {
    uint64_t v3 = this;
    for (unint64_t i = 0; (char *)i != v3; ++i)
    {
      this = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)a2, i, i);
      *(void *)this = 0x3FF0000000000000;
    }
  }
  return this;
}

char *TIFitAffineMLLMatrix::valueAt(TIFitAffineMLLMatrix *this, unint64_t a2, unint64_t a3)
{
  if (*(void *)this <= a3)
  {
    unint64_t v3 = -1;
  }
  else if (*((void *)this + 1) > a2)
  {
    unint64_t v3 = a3 + *(void *)this * a2;
  }
  else
  {
    unint64_t v3 = -1;
  }
  unint64_t v15 = v3;
  uint64_t v5 = (char *)this + 24;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (!v4) {
    goto LABEL_17;
  }
  float v6 = (char *)this + 24;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= v3;
    if (v7 >= v3) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v4 + 1;
    }
    if (v8) {
      float v6 = (char *)v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v5 || v3 < *((void *)v6 + 4))
  {
LABEL_17:
    std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)this + 2, v3, (uint64_t *)&v15)[5] = 0;
    uint64_t v10 = *(void **)v5;
    if (!*(void *)v5) {
      goto LABEL_28;
    }
    float v6 = v5;
    do
    {
      unint64_t v11 = v10[4];
      BOOL v12 = v11 >= v3;
      if (v11 >= v3) {
        unint64_t v13 = v10;
      }
      else {
        unint64_t v13 = v10 + 1;
      }
      if (v12) {
        float v6 = (char *)v10;
      }
      uint64_t v10 = (void *)*v13;
    }
    while (*v13);
    if (v6 == v5 || v3 < *((void *)v6 + 4)) {
LABEL_28:
    }
      float v6 = v5;
  }
  return v6 + 40;
}

char *TIFitAffineMLLMatrix::diag@<X0>(char *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *(void *)this;
  *a2 = *(void *)this;
  a2[1] = v4;
  a2[4] = 0;
  a2[3] = 0;
  a2[2] = (unint64_t)(a2 + 3);
  if (v4)
  {
    uint64_t v5 = (TIFitAffineMLLMatrix *)this;
    unint64_t v6 = 0;
    do
    {
      double v7 = TIFitAffineMLLMatrix::valueAt(v5, 0, v6);
      this = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)a2, v6, v6);
      *(double *)this = v7;
      ++v6;
    }
    while (v6 < *a2);
  }
  return this;
}

double TIFitAffineMLLMatrix::valueAt(TIFitAffineMLLMatrix *this, unint64_t a2, unint64_t a3)
{
  if (*(void *)this <= a3)
  {
    unint64_t v3 = -1;
  }
  else
  {
    unint64_t v3 = a3 + *(void *)this * a2;
    if (*((void *)this + 1) <= a2) {
      unint64_t v3 = -1;
    }
  }
  unint64_t v6 = (void *)*((void *)this + 3);
  unint64_t v4 = (char *)this + 24;
  uint64_t v5 = v6;
  double result = 0.0;
  if (v6)
  {
    BOOL v8 = (double *)v4;
    do
    {
      unint64_t v9 = v5[4];
      BOOL v10 = v9 >= v3;
      if (v9 >= v3) {
        unint64_t v11 = v5;
      }
      else {
        unint64_t v11 = v5 + 1;
      }
      if (v10) {
        BOOL v8 = (double *)v5;
      }
      uint64_t v5 = (void *)*v11;
    }
    while (*v11);
    if (v8 != (double *)v4 && v3 >= *((void *)v8 + 4)) {
      return v8[5];
    }
  }
  return result;
}

char *TIFitAffineMLLMatrix::diag@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  *a4 = result;
  a4[1] = result;
  a4[4] = 0;
  a4[3] = 0;
  a4[2] = (char *)(a4 + 3);
  if (result && a3)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 8 * a3 - 8;
    BOOL v8 = result - 1;
    do
    {
      double v9 = *(double *)(a2 + 8 * v6);
      if (v9 != 0.0)
      {
        double result = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)a4, v6, v6);
        *(double *)double result = v9;
      }
      if (v8 == (char *)v6) {
        break;
      }
      ++v6;
      uint64_t v10 = v7;
      v7 -= 8;
    }
    while (v10);
  }
  return result;
}

char *TIFitAffineMLLMatrix::ones@<X0>(char *this@<X0>, uint64_t a2@<X1>, TIFitAffineMLLMatrix *a3@<X8>)
{
  *(void *)a3 = a2;
  *((void *)a3 + 1) = this;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 2) = (char *)a3 + 24;
  if (this)
  {
    uint64_t v5 = this;
    for (unint64_t i = 0; (char *)i != v5; ++i)
    {
      if (a2)
      {
        unint64_t v7 = 0;
        do
        {
          this = TIFitAffineMLLMatrix::valueAt(a3, i, v7);
          *(void *)this = 0x3FF0000000000000;
          ++v7;
        }
        while (a2 != v7);
      }
    }
  }
  return this;
}

void TIFitAffineMLLMatrix::clear(TIFitAffineMLLMatrix *this)
{
  uint64_t v1 = (void *)((char *)this + 24);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*((void **)this + 3));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
}

void TIFitAffineMLLMatrix::values(TIFitAffineMLLMatrix *this@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v19 = *((void *)this + 1);
  if (v19)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    for (unint64_t i = 0; i != v19; ++i)
    {
      uint64_t v7 = *(void *)this;
      if (*(void *)this)
      {
        unint64_t v8 = 0;
        unint64_t v9 = (unint64_t)a2[2];
        uint64_t v10 = *a2;
        do
        {
          double v11 = TIFitAffineMLLMatrix::valueAt(this, i, v8);
          double v12 = v11;
          if ((unint64_t)v5 >= v9)
          {
            uint64_t v13 = v5 - v10;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 61) {
              abort();
            }
            if ((uint64_t)(v9 - (void)v10) >> 2 > v14) {
              unint64_t v14 = (uint64_t)(v9 - (void)v10) >> 2;
            }
            if (v9 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v14;
            }
            if (v15)
            {
              unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v15);
              uint64_t v5 = v4;
            }
            else
            {
              uint64_t v16 = 0;
            }
            unsigned int v17 = (double *)(v15 + 8 * v13);
            *unsigned int v17 = v12;
            unint64_t v4 = v17 + 1;
            while (v5 != v10)
            {
              uint64_t v18 = *((void *)v5-- - 1);
              *((void *)v17-- - 1) = v18;
            }
            unint64_t v9 = v15 + 8 * v16;
            *a2 = v17;
            a2[1] = v4;
            a2[2] = (double *)v9;
            if (v10) {
              operator delete(v10);
            }
            uint64_t v10 = v17;
          }
          else
          {
            *uint64_t v5 = v11;
            unint64_t v4 = v5 + 1;
          }
          a2[1] = v4;
          ++v8;
          uint64_t v5 = v4;
        }
        while (v8 != v7);
      }
    }
  }
}

void TIFitAffineMLLMatrix::setValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)(a1 + 24);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)(a1 + 24));
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = (uint64_t **)(a1 + 16);
  *(void *)(a1 + 32) = 0;
  *unint64_t v6 = 0;
  unint64_t v15 = 0;
  uint64_t v8 = *(void *)a1 * *(void *)(a1 + 8);
  if (v8) {
    BOOL v9 = a3 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = v8 - 1;
    uint64_t v12 = 8 * a3 - 8;
    do
    {
      double v13 = *(double *)(a2 + 8 * v10);
      if (v13 != 0.0) {
        *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v7, v10, (uint64_t *)&v15)+ 5) = v13;
      }
      unint64_t v15 = v10 + 1;
      if (v11 == v10) {
        break;
      }
      uint64_t v14 = v12;
      v12 -= 8;
      ++v10;
    }
    while (v14);
  }
}

void TIFitAffineMLLMatrix::setDiagValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)(a1 + 24);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)(a1 + 24));
  *(void *)(a1 + 16) = v6;
  *unint64_t v6 = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7) {
    BOOL v8 = a3 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = v7 - 1;
    uint64_t v11 = 8 * a3 - 8;
    do
    {
      double v12 = *(double *)(a2 + 8 * v9);
      if (v12 != 0.0)
      {
        if (*(void *)a1 <= v9)
        {
          unint64_t v13 = -1;
        }
        else if (*(void *)(a1 + 8) > v9)
        {
          unint64_t v13 = v9 + v9 * *(void *)a1;
        }
        else
        {
          unint64_t v13 = -1;
        }
        unint64_t v15 = v13;
        *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 16), v13, (uint64_t *)&v15)+ 5) = v12;
      }
      if (v10 == v9) {
        break;
      }
      ++v9;
      uint64_t v14 = v11;
      v11 -= 8;
    }
    while (v14);
  }
}

unint64_t TIFitAffineMLLMatrix::keyFromIndexes(TIFitAffineMLLMatrix *this, unint64_t a2, unint64_t a3)
{
  if (*(void *)this <= a3 || *((void *)this + 1) <= a2) {
    return -1;
  }
  else {
    return a3 + *(void *)this * a2;
  }
}

void TIFitAffineMLLMatrix::setDiagValues(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = (void *)(a1 + 24);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)(a1 + 24));
  *(void *)(a1 + 16) = v4;
  *unint64_t v4 = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v5) {
    BOOL v8 = v6 == v7;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v9 = v6 + 8;
    uint64_t v10 = 1;
    do
    {
      double v11 = *(double *)(v9 - 8);
      if (v11 != 0.0)
      {
        unint64_t v12 = v10 - 1;
        if (*(void *)a1 <= (unint64_t)(v10 - 1))
        {
          unint64_t v15 = -1;
        }
        else
        {
          BOOL v13 = *(void *)(a1 + 8) > v12;
          unint64_t v14 = v12 + v12 * *(void *)a1;
          if (v13) {
            unint64_t v15 = v14;
          }
          else {
            unint64_t v15 = -1;
          }
        }
        unint64_t v16 = v15;
        *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 16), v15, (uint64_t *)&v16)+ 5) = v11;
      }
      if (v5 == v10) {
        break;
      }
      ++v10;
      BOOL v8 = v9 == v7;
      v9 += 8;
    }
    while (!v8);
  }
}

double *TIFitAffineMLLMatrix::addRow@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *(_OWORD *)a4 = *(_OWORD *)a1;
  a4[4] = 0;
  a4[3] = 0;
  a4[2] = (uint64_t)(a4 + 3);
  unint64_t v8 = a1[1];
  double result = (double *)std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>(a4 + 2, (void *)a1[2], a1 + 3);
  ++a4[1];
  uint64_t v10 = *a1;
  if (*a1 && a3)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 8 * a3 - 8;
    do
    {
      double v13 = *(double *)(a2 + 8 * v11);
      if (v13 != 0.0)
      {
        double result = (double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)a4, v8, v11);
        *double result = v13;
        uint64_t v10 = *a1;
      }
      if (++v11 == v10) {
        break;
      }
      uint64_t v14 = v12;
      v12 -= 8;
    }
    while (v14);
  }
  return result;
}

void *TIFitAffineMLLMatrix::addRow@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = a3 + 24;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(void *)(a3 + 32) = 0;
  std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>((uint64_t *)(a3 + 16), v5, (void *)(a1 + 24));
  ++*(void *)(a3 + 8);
  v8[0] = &unk_1F3F76FC8;
  v8[1] = a3;
  _OWORD v8[2] = &v7;
  _WORD v8[3] = v8;
  TIFitAffineMLLMatrix::do_for_each_valid_element(a2, (uint64_t)v8);
  return std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](v8);
}

void *TIFitAffineMLLMatrix::do_for_each_valid_element(void *a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::__value_func[abi:nn180100]((uint64_t)v8, a2);
  unint64_t v3 = operator new(0x30uLL);
  unint64_t v4 = v3;
  uint64_t v5 = v9;
  void *v3 = &unk_1F3F77130;
  v3[1] = a1;
  if (v5)
  {
    if (v5 == v8)
    {
      v3[5] = v3 + 2;
      (*(void (**)(void *))(v8[0] + 24))(v8);
    }
    else
    {
      v3[5] = v5;
      uint64_t v9 = 0;
    }
  }
  else
  {
    v3[5] = 0;
  }
  _WORD v10[3] = v4;
  TIFitAffineMLLMatrix::do_for_each_valid_element(a1, (uint64_t)v10);
  std::__function::__value_func<void ()(unsigned long,double const&)>::~__value_func[abi:nn180100](v10);
  return std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](v8);
}

void *std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *TIFitAffineMLLMatrix::do_for_each_valid_element(void *result, uint64_t a2)
{
  uint64_t v2 = (void *)result[2];
  uint64_t v3 = result + 3;
  if (v2 != result + 3)
  {
    while (1)
    {
      uint64_t v10 = v2[4];
      uint64_t v5 = *(void *)(a2 + 24);
      if (!v5) {
        break;
      }
      double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v5 + 48))(v5, &v10, v2 + 5);
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
      if (v7 == v3) {
        return result;
      }
    }
    uint64_t v9 = (char *)std::__throw_bad_function_call[abi:nn180100]();
    return std::__function::__value_func<void ()(unsigned long,double const&)>::~__value_func[abi:nn180100](v9);
  }
  return result;
}

void *std::__function::__value_func<void ()(unsigned long,double const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0,std::allocator<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0>,void ()(unsigned long,double const&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = **(void **)(a1 + 8);
  unint64_t v4 = *a2 / v3;
  unint64_t v8 = *a2 % v3;
  unint64_t v9 = v4;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, unint64_t *, unint64_t *, uint64_t))(*(void *)v5 + 48))(v5, &v9, &v8, a3);
  }
  uint64_t v7 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0,std::allocator<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0>,void ()(unsigned long,double const&)>::destroy_deallocate(v7);
}

void std::__function::__func<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0,std::allocator<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0>,void ()(unsigned long,double const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](a1 + 2);

  operator delete(a1);
}

void *std::__function::__func<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0,std::allocator<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0>,void ()(unsigned long,double const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100]((void *)(a1 + 16));
}

uint64_t std::__function::__func<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0,std::allocator<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0>,void ()(unsigned long,double const&)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_1F3F77130;
  a2[1] = v2;
  return std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::__value_func[abi:nn180100]((uint64_t)(a2 + 2), a1 + 16);
}

void *std::__function::__func<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0,std::allocator<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0>,void ()(unsigned long,double const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_1F3F77130;
  v2[1] = v3;
  std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::__value_func[abi:nn180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void std::__function::__func<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0,std::allocator<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0>,void ()(unsigned long,double const&)>::~__func(void *a1)
{
  *a1 = &unk_1F3F77130;
  std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](a1 + 2);

  JUMPOUT(0x1E4E7BC20);
}

void *std::__function::__func<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0,std::allocator<TIFitAffineMLLMatrix::do_for_each_valid_element(std::function<void ()(unsigned long,unsigned long,double const&)>)::$_0>,void ()(unsigned long,double const&)>::~__func(void *a1)
{
  *a1 = &unk_1F3F77130;
  std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](a1 + 2);
  return a1;
}

char *std::__function::__func<TIFitAffineMLLMatrix::addRow(TIFitAffineMLLMatrix)::$_0,std::allocator<TIFitAffineMLLMatrix::addRow(TIFitAffineMLLMatrix)::$_0>,void ()(unsigned long,unsigned long,double const&)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  double result = TIFitAffineMLLMatrix::valueAt(*(TIFitAffineMLLMatrix **)(a1 + 8), **(void **)(a1 + 16), *a3);
  *(void *)double result = v4;
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::addRow(TIFitAffineMLLMatrix)::$_0,std::allocator<TIFitAffineMLLMatrix::addRow(TIFitAffineMLLMatrix)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F76FC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::addRow(TIFitAffineMLLMatrix)::$_0,std::allocator<TIFitAffineMLLMatrix::addRow(TIFitAffineMLLMatrix)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F3F76FC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<TIFitAffineMLLMatrix::addRow(TIFitAffineMLLMatrix)::$_0,std::allocator<TIFitAffineMLLMatrix::addRow(TIFitAffineMLLMatrix)::$_0>,void ()(unsigned long,unsigned long,double const&)>::~__func()
{
}

void *TIFitAffineMLLMatrix::deleteRow@<X0>(TIFitAffineMLLMatrix *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 1) - 1;
  *a3 = *(void *)this;
  a3[1] = v3;
  a3[4] = 0;
  a3[3] = 0;
  a3[2] = a3 + 3;
  uint64_t v5 = a2;
  v6[0] = &unk_1F3F77010;
  v6[1] = &v5;
  unsigned __int16 v6[2] = a3;
  _OWORD v6[3] = v6;
  TIFitAffineMLLMatrix::do_for_each_valid_element(this, (uint64_t)v6);
  return std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](v6);
}

char *std::__function::__func<TIFitAffineMLLMatrix::deleteRow(unsigned long)::$_0,std::allocator<TIFitAffineMLLMatrix::deleteRow(unsigned long)::$_0>,void ()(unsigned long,unsigned long,double const&)>::operator()(char *result, unint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *a3;
  unint64_t v6 = **((void **)result + 1);
  if (v6 <= v4)
  {
    if (v6 >= v4) {
      return result;
    }
    uint64_t v7 = *a4;
    unint64_t v8 = (TIFitAffineMLLMatrix *)*((void *)result + 2);
    --v4;
  }
  else
  {
    uint64_t v7 = *a4;
    unint64_t v8 = (TIFitAffineMLLMatrix *)*((void *)result + 2);
  }
  __n128 result = TIFitAffineMLLMatrix::valueAt(v8, v4, v5);
  *(void *)__n128 result = v7;
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::deleteRow(unsigned long)::$_0,std::allocator<TIFitAffineMLLMatrix::deleteRow(unsigned long)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F77010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::deleteRow(unsigned long)::$_0,std::allocator<TIFitAffineMLLMatrix::deleteRow(unsigned long)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F3F77010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<TIFitAffineMLLMatrix::deleteRow(unsigned long)::$_0,std::allocator<TIFitAffineMLLMatrix::deleteRow(unsigned long)::$_0>,void ()(unsigned long,unsigned long,double const&)>::~__func()
{
}

BOOL TIFitAffineMLLMatrix::hasValue(TIFitAffineMLLMatrix *this, unint64_t a2, unint64_t a3)
{
  if (*(void *)this <= a3) {
    return 0;
  }
  if (*((void *)this + 1) <= a2) {
    return 0;
  }
  unint64_t v3 = a3 + *(void *)this * a2;
  if (v3 == -1) {
    return 0;
  }
  unint64_t v6 = (void *)*((void *)this + 3);
  unint64_t v4 = (char *)this + 24;
  unint64_t v5 = v6;
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v7 = v4;
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= v3;
    if (v8 >= v3) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 + 1;
    }
    if (v9) {
      uint64_t v7 = (char *)v5;
    }
    unint64_t v5 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v4 || v3 < *((void *)v7 + 4)) {
LABEL_15:
  }
    uint64_t v7 = v4;
  return v7 != v4;
}

void TIFitAffineMLLMatrix::operator+(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *a1;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = a3 + 24;
  *(_OWORD *)a3 = v4;
  *(void *)(a3 + 32) = 0;
  unint64_t v5 = (void *)*((void *)a1 + 2);
  unint64_t v6 = (void *)a1 + 3;
  uint64_t v7 = *(void **)(a2 + 16);
  unint64_t v8 = (void *)(a2 + 24);
  while (v5 != v6)
  {
    uint64_t v10 = v5 + 4;
    unint64_t v9 = v5[4];
    if (v7 == v8)
    {
LABEL_18:
      uint64_t v18 = v5[5];
      std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a3 + 16), v9, v10)[5] = v18;
      uint64_t v19 = (void *)v5[1];
      if (v19)
      {
        do
        {
          unint64_t v5 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          float v20 = v5;
          unint64_t v5 = (void *)v5[2];
        }
        while ((void *)*v5 != v20);
      }
    }
    else
    {
      unint64_t v11 = v7[4];
      if (v9 == v11)
      {
        double v12 = *((double *)v5 + 5) + *((double *)v7 + 5);
        *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a3 + 16), v9, v10)+ 5) = v12;
        double v13 = (void *)v5[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            double v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v5[2];
            BOOL v15 = *v14 == (void)v5;
            unint64_t v5 = v14;
          }
          while (!v15);
        }
        unint64_t v16 = (void *)v7[1];
        if (v16)
        {
          do
          {
            uint64_t v7 = v16;
            unint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            unsigned int v17 = v7;
            uint64_t v7 = (void *)v7[2];
          }
          while ((void *)*v7 != v17);
        }
        unint64_t v5 = v14;
      }
      else
      {
        if (v9 < v11) {
          goto LABEL_18;
        }
LABEL_23:
        uint64_t v21 = v7[5];
        std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a3 + 16), v11, v7 + 4)[5] = v21;
        unint64_t v22 = (void *)v7[1];
        if (v22)
        {
          do
          {
            uint64_t v7 = v22;
            unint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            unsigned int v23 = v7;
            uint64_t v7 = (void *)v7[2];
          }
          while ((void *)*v7 != v23);
        }
      }
    }
  }
  if (v7 != v8)
  {
    unint64_t v11 = v7[4];
    goto LABEL_23;
  }

  TIFitAffineMLLMatrix::removeDefaults((TIFitAffineMLLMatrix *)a3);
}

void TIFitAffineMLLMatrix::removeDefaults(TIFitAffineMLLMatrix *this)
{
  v19[4] = *MEMORY[0x1E4F143B8];
  unint64_t v16 = 0;
  unsigned int v17 = 0;
  uint64_t v18 = 0;
  v19[0] = &unk_1F3F77250;
  v19[1] = &v16;
  void v19[3] = v19;
  TIFitAffineMLLMatrix::do_for_each_valid_element(this, (uint64_t)v19);
  std::__function::__value_func<void ()(unsigned long,double const&)>::~__value_func[abi:nn180100](v19);
  uint64_t v2 = v16;
  unint64_t v3 = v17;
  if (v16 != v17)
  {
    long long v4 = (uint64_t **)((char *)this + 24);
    do
    {
      unint64_t v5 = *v4;
      if (*v4)
      {
        unint64_t v6 = *v2;
        uint64_t v7 = (uint64_t *)((char *)this + 24);
        unint64_t v8 = *v4;
        do
        {
          unint64_t v9 = v8[4];
          BOOL v10 = v9 >= v6;
          if (v9 >= v6) {
            unint64_t v11 = (uint64_t **)v8;
          }
          else {
            unint64_t v11 = (uint64_t **)(v8 + 1);
          }
          if (v10) {
            uint64_t v7 = v8;
          }
          unint64_t v8 = *v11;
        }
        while (*v11);
        if (v7 != (uint64_t *)v4 && v6 >= v7[4])
        {
          double v12 = (uint64_t *)v7[1];
          double v13 = v7;
          if (v12)
          {
            do
            {
              uint64_t v14 = v12;
              double v12 = (uint64_t *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              uint64_t v14 = (uint64_t *)v13[2];
              BOOL v15 = *v14 == (void)v13;
              double v13 = v14;
            }
            while (!v15);
          }
          if (*((uint64_t **)this + 2) == v7) {
            *((void *)this + 2) = v14;
          }
          --*((void *)this + 4);
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v5, v7);
          operator delete(v7);
        }
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = v16;
  }
  if (v2)
  {
    unsigned int v17 = v2;
    operator delete(v2);
  }
}

void std::__function::__func<TIFitAffineMLLMatrix::removeDefaults(void)::$_0,std::allocator<TIFitAffineMLLMatrix::removeDefaults(void)::$_0>,void ()(unsigned long,double const&)>::operator()(uint64_t a1, uint64_t *a2, double *a3)
{
  if (*a3 == 0.0)
  {
    uint64_t v3 = *a2;
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v6 = *(void **)(v4 + 8);
    unint64_t v5 = *(void *)(v4 + 16);
    if ((unint64_t)v6 >= v5)
    {
      unint64_t v8 = *(void **)v4;
      uint64_t v9 = ((uint64_t)v6 - *(void *)v4) >> 3;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v12) {
        unint64_t v13 = v10;
      }
      if (v13)
      {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v13);
        unint64_t v8 = *(void **)v4;
        unint64_t v6 = *(void **)(v4 + 8);
      }
      else
      {
        uint64_t v14 = 0;
      }
      BOOL v15 = (void *)(v13 + 8 * v9);
      unint64_t v16 = v13 + 8 * v14;
      *BOOL v15 = v3;
      uint64_t v7 = v15 + 1;
      while (v6 != v8)
      {
        uint64_t v17 = *--v6;
        *--BOOL v15 = v17;
      }
      *(void *)uint64_t v4 = v15;
      *(void *)(v4 + 8) = v7;
      *(void *)(v4 + 16) = v16;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *unint64_t v6 = v3;
      uint64_t v7 = v6 + 1;
    }
    *(void *)(v4 + 8) = v7;
  }
}

uint64_t std::__function::__func<TIFitAffineMLLMatrix::removeDefaults(void)::$_0,std::allocator<TIFitAffineMLLMatrix::removeDefaults(void)::$_0>,void ()(unsigned long,double const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F3F77250;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<TIFitAffineMLLMatrix::removeDefaults(void)::$_0,std::allocator<TIFitAffineMLLMatrix::removeDefaults(void)::$_0>,void ()(unsigned long,double const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F3F77250;
  result[1] = v3;
  return result;
}

void std::__function::__func<TIFitAffineMLLMatrix::removeDefaults(void)::$_0,std::allocator<TIFitAffineMLLMatrix::removeDefaults(void)::$_0>,void ()(unsigned long,double const&)>::~__func()
{
}

void TIFitAffineMLLMatrix::operator+=(TIFitAffineMLLMatrix *this, uint64_t a2)
{
  uint64_t v3 = (uint64_t **)((char *)this + 16);
  uint64_t v4 = (char *)*((void *)this + 2);
  unint64_t v5 = (char *)this + 24;
  unint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = (void *)(a2 + 24);
  while (v4 != v5)
  {
    uint64_t v9 = (uint64_t *)(v4 + 32);
    unint64_t v8 = *((void *)v4 + 4);
    if (v6 == v7)
    {
LABEL_18:
      uint64_t v17 = *((void *)v4 + 5);
      std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, v8, v9)[5] = v17;
      uint64_t v18 = (char *)*((void *)v4 + 1);
      if (v18)
      {
        do
        {
          uint64_t v4 = v18;
          uint64_t v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = v4;
          uint64_t v4 = (char *)*((void *)v4 + 2);
        }
        while (*(char **)v4 != v19);
      }
    }
    else
    {
      unint64_t v10 = v6[4];
      if (v8 == v10)
      {
        double v11 = *((double *)v4 + 5) + *((double *)v6 + 5);
        *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, v8, v9)+ 5) = v11;
        BOOL v12 = (char *)*((void *)v4 + 1);
        if (v12)
        {
          do
          {
            unint64_t v13 = v12;
            BOOL v12 = *(char **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            unint64_t v13 = (char *)*((void *)v4 + 2);
            BOOL v14 = *(void *)v13 == (void)v4;
            uint64_t v4 = v13;
          }
          while (!v14);
        }
        BOOL v15 = (void *)v6[1];
        if (v15)
        {
          do
          {
            unint64_t v6 = v15;
            BOOL v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            unint64_t v16 = v6;
            unint64_t v6 = (void *)v6[2];
          }
          while ((void *)*v6 != v16);
        }
        uint64_t v4 = v13;
      }
      else
      {
        if (v8 < v10) {
          goto LABEL_18;
        }
LABEL_23:
        uint64_t v20 = v6[5];
        std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, v10, v6 + 4)[5] = v20;
        uint64_t v21 = (void *)v6[1];
        if (v21)
        {
          do
          {
            unint64_t v6 = v21;
            uint64_t v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            unint64_t v22 = v6;
            unint64_t v6 = (void *)v6[2];
          }
          while ((void *)*v6 != v22);
        }
      }
    }
  }
  if (v6 != v7)
  {
    unint64_t v10 = v6[4];
    goto LABEL_23;
  }

  TIFitAffineMLLMatrix::removeDefaults(this);
}

void TIFitAffineMLLMatrix::operator-(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *a1;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = a3 + 24;
  *(_OWORD *)a3 = v4;
  *(void *)(a3 + 32) = 0;
  unint64_t v5 = (void *)*((void *)a1 + 2);
  unint64_t v6 = (void *)a1 + 3;
  uint64_t v7 = *(void **)(a2 + 16);
  unint64_t v8 = (void *)(a2 + 24);
  while (v5 != v6)
  {
    unint64_t v10 = v5 + 4;
    unint64_t v9 = v5[4];
    if (v7 == v8)
    {
LABEL_18:
      uint64_t v18 = v5[5];
      std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a3 + 16), v9, v10)[5] = v18;
      uint64_t v19 = (void *)v5[1];
      if (v19)
      {
        do
        {
          unint64_t v5 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = v5;
          unint64_t v5 = (void *)v5[2];
        }
        while ((void *)*v5 != v20);
      }
    }
    else
    {
      unint64_t v11 = v7[4];
      if (v9 == v11)
      {
        double v12 = *((double *)v5 + 5) - *((double *)v7 + 5);
        *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a3 + 16), v9, v10)+ 5) = v12;
        unint64_t v13 = (void *)v5[1];
        if (v13)
        {
          do
          {
            BOOL v14 = v13;
            unint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            BOOL v14 = (void *)v5[2];
            BOOL v15 = *v14 == (void)v5;
            unint64_t v5 = v14;
          }
          while (!v15);
        }
        unint64_t v16 = (void *)v7[1];
        if (v16)
        {
          do
          {
            uint64_t v7 = v16;
            unint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = v7;
            uint64_t v7 = (void *)v7[2];
          }
          while ((void *)*v7 != v17);
        }
        unint64_t v5 = v14;
      }
      else
      {
        if (v9 < v11) {
          goto LABEL_18;
        }
LABEL_23:
        uint64_t v21 = v7[5];
        std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a3 + 16), v11, v7 + 4)[5] = v21;
        unint64_t v22 = (void *)v7[1];
        if (v22)
        {
          do
          {
            uint64_t v7 = v22;
            unint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            unsigned int v23 = v7;
            uint64_t v7 = (void *)v7[2];
          }
          while ((void *)*v7 != v23);
        }
      }
    }
  }
  if (v7 != v8)
  {
    unint64_t v11 = v7[4];
    goto LABEL_23;
  }

  TIFitAffineMLLMatrix::removeDefaults((TIFitAffineMLLMatrix *)a3);
}

void TIFitAffineMLLMatrix::operator*=(TIFitAffineMLLMatrix *this, double a2)
{
  uint64_t v2 = (TIFitAffineMLLMatrix *)*((void *)this + 2);
  if (v2 != (TIFitAffineMLLMatrix *)((char *)this + 24))
  {
    do
    {
      *((double *)v2 + 5) = *((double *)v2 + 5) * a2;
      uint64_t v3 = (TIFitAffineMLLMatrix *)*((void *)v2 + 1);
      if (v3)
      {
        do
        {
          long long v4 = v3;
          uint64_t v3 = *(TIFitAffineMLLMatrix **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          long long v4 = (TIFitAffineMLLMatrix *)*((void *)v2 + 2);
          BOOL v5 = *(void *)v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != (TIFitAffineMLLMatrix *)((char *)this + 24));
  }
  TIFitAffineMLLMatrix::removeDefaults(this);
}

void TIFitAffineMLLMatrix::operator*(void *a1@<X0>, TIFitAffineMLLMatrix *a2@<X8>, double a3@<D0>)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  double v4 = a3;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 2) = (char *)a2 + 24;
  v5[0] = &unk_1F3F77058;
  v5[1] = a2;
  v5[2] = &v4;
  v5[3] = v5;
  TIFitAffineMLLMatrix::do_for_each_valid_element(a1, (uint64_t)v5);
  std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](v5);
  TIFitAffineMLLMatrix::removeDefaults(a2);
}

char *std::__function::__func<TIFitAffineMLLMatrix::operator*(double)::$_0,std::allocator<TIFitAffineMLLMatrix::operator*(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, double *a4)
{
  double v4 = *a4 * **(double **)(a1 + 16);
  __n128 result = TIFitAffineMLLMatrix::valueAt(*(TIFitAffineMLLMatrix **)(a1 + 8), *a2, *a3);
  *(double *)__n128 result = v4;
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::operator*(double)::$_0,std::allocator<TIFitAffineMLLMatrix::operator*(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F77058;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::operator*(double)::$_0,std::allocator<TIFitAffineMLLMatrix::operator*(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F3F77058;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<TIFitAffineMLLMatrix::operator*(double)::$_0,std::allocator<TIFitAffineMLLMatrix::operator*(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::~__func()
{
}

void TIFitAffineMLLMatrix::operator*(TIFitAffineMLLMatrix *this@<X0>, TIFitAffineMLLMatrix *a2@<X1>, TIFitAffineMLLMatrix *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(void *)a2;
  *(void *)a3 = *(void *)a2;
  *((void *)a3 + 1) = v4;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 2) = (char *)a3 + 24;
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v9 = *((void *)a3 + 1);
      if (v9)
      {
        for (unint64_t j = 0; j != v9; ++j)
        {
          uint64_t v11 = *(void *)this;
          if (*(void *)this)
          {
            unint64_t v12 = 0;
            double v13 = 0.0;
            do
            {
              double v14 = TIFitAffineMLLMatrix::valueAt(this, j, v12);
              double v13 = v13 + v14 * TIFitAffineMLLMatrix::valueAt(a2, v12++, i);
            }
            while (v11 != v12);
          }
          else
          {
            double v13 = 0.0;
          }
          *(double *)TIFitAffineMLLMatrix::valueAt(a3, j, i) = v13;
        }
      }
    }
  }

  TIFitAffineMLLMatrix::removeDefaults(a3);
}

void TIFitAffineMLLMatrix::operator/(void *a1@<X0>, TIFitAffineMLLMatrix *a2@<X8>, double a3@<D0>)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  double v4 = a3;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 2) = (char *)a2 + 24;
  v5[0] = &unk_1F3F770A0;
  v5[1] = a2;
  v5[2] = &v4;
  v5[3] = v5;
  TIFitAffineMLLMatrix::do_for_each_valid_element(a1, (uint64_t)v5);
  std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](v5);
  TIFitAffineMLLMatrix::removeDefaults(a2);
}

char *std::__function::__func<TIFitAffineMLLMatrix::operator/(double)::$_0,std::allocator<TIFitAffineMLLMatrix::operator/(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, double *a4)
{
  double v4 = *a4 / **(double **)(a1 + 16);
  __n128 result = TIFitAffineMLLMatrix::valueAt(*(TIFitAffineMLLMatrix **)(a1 + 8), *a2, *a3);
  *(double *)__n128 result = v4;
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::operator/(double)::$_0,std::allocator<TIFitAffineMLLMatrix::operator/(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F770A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::operator/(double)::$_0,std::allocator<TIFitAffineMLLMatrix::operator/(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F3F770A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<TIFitAffineMLLMatrix::operator/(double)::$_0,std::allocator<TIFitAffineMLLMatrix::operator/(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::~__func()
{
}

void TIFitAffineMLLMatrix::operator/(TIFitAffineMLLMatrix *this@<X1>, TIFitAffineMLLMatrix *a2@<X0>, TIFitAffineMLLMatrix *a3@<X8>)
{
  TIFitAffineMLLMatrix::inverse(this, (TIFitAffineMLLMatrix *)v5);
  TIFitAffineMLLMatrix::operator*(a2, (TIFitAffineMLLMatrix *)v5, a3);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v6);
}

void TIFitAffineMLLMatrix::inverse(TIFitAffineMLLMatrix *this@<X0>, TIFitAffineMLLMatrix *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  *(void *)a2 = v4;
  *((void *)a2 + 1) = v4;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 2) = (char *)a2 + 24;
  TIFitAffineMLLMatrix::determinant(this);
  double v6 = v5;
  TIFitAffineMLLMatrix::coFactor(this, (TIFitAffineMLLMatrix *)v12);
  unint64_t v7 = *((void *)this + 1);
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = *(void *)this;
    do
    {
      if (v9)
      {
        unint64_t v10 = 0;
        do
        {
          double v11 = *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v12, v8, v10) / v6;
          *(double *)TIFitAffineMLLMatrix::valueAt(a2, v10++, v8) = v11;
          uint64_t v9 = *(void *)this;
        }
        while (v10 < *(void *)this);
        unint64_t v7 = *((void *)this + 1);
      }
      ++v8;
    }
    while (v8 < v7);
  }
  TIFitAffineMLLMatrix::removeDefaults(a2);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v13);
}

void TIFitAffineMLLMatrix::determinant(TIFitAffineMLLMatrix *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2 == 3)
  {
    TIFitAffineMLLMatrix::valueAt(this, 0, 0);
    TIFitAffineMLLMatrix::valueAt(this, 0, 1uLL);
    TIFitAffineMLLMatrix::valueAt(this, 0, 2uLL);
    TIFitAffineMLLMatrix::valueAt(this, 1uLL, 0);
    TIFitAffineMLLMatrix::valueAt(this, 1uLL, 1uLL);
    TIFitAffineMLLMatrix::valueAt(this, 1uLL, 2uLL);
    TIFitAffineMLLMatrix::valueAt(this, 2uLL, 0);
    TIFitAffineMLLMatrix::valueAt(this, 2uLL, 1uLL);
    TIFitAffineMLLMatrix::valueAt(this, 2uLL, 2uLL);
  }
  else if (v2 == 2)
  {
    TIFitAffineMLLMatrix::valueAt(this, 0, 0);
    TIFitAffineMLLMatrix::valueAt(this, 1uLL, 1uLL);
    TIFitAffineMLLMatrix::valueAt(this, 0, 1uLL);
    TIFitAffineMLLMatrix::valueAt(this, 1uLL, 0);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    if (v2)
    {
      for (unint64_t i = 0; i < v2; ++i)
      {
        v15[0] = (void **)(v2 - 1);
        v15[1] = (void **)(v2 - 1);
        v16[0] = 0;
        v16[1] = 0;
        unsigned __int16 v15[2] = (void **)v16;
        std::vector<TIFitAffineMLLMatrix>::push_back[abi:nn180100](v17, (uint64_t)v15);
        std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v16[0]);
        unint64_t v2 = *((void *)this + 1);
      }
      if (v2)
      {
        uint64_t v4 = 0;
        while (v2 >= 2)
        {
          for (unint64_t j = 1; j < v2; ++j)
          {
            unint64_t v6 = 0;
            unint64_t v7 = 0;
            do
            {
              if (v4 != v6)
              {
                double v8 = TIFitAffineMLLMatrix::valueAt(this, j, v6);
                *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)((char *)v17[0] + 40 * v4), j - 1, v7) = v8;
                unint64_t v2 = *((void *)this + 1);
                ++v7;
              }
              ++v6;
            }
            while (v6 < v2);
          }
          if (++v4 >= v2)
          {
            if (!v2) {
              goto LABEL_23;
            }
            break;
          }
        }
        unint64_t v9 = 0;
        double v10 = 0.0;
        double v11 = (TIFitAffineMLLMatrix *)v17[0];
        do
        {
          double v12 = TIFitAffineMLLMatrix::valueAt(this, 0, v9);
          TIFitAffineMLLMatrix::determinant(v11);
          double v14 = -v12;
          if ((v9 & 1) == 0) {
            double v14 = v12;
          }
          double v10 = v10 + v14 * v13;
          ++v9;
          double v11 = (TIFitAffineMLLMatrix *)((char *)v11 + 40);
        }
        while (*((void *)this + 1) > v9);
      }
    }
LABEL_23:
    v15[0] = v17;
    std::vector<TIFitAffineMLLMatrix>::__destroy_vector::operator()[abi:nn180100](v15);
  }
}

void TIFitAffineMLLMatrix::coFactor(TIFitAffineMLLMatrix *this@<X0>, TIFitAffineMLLMatrix *a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)this;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 2) = (char *)a2 + 24;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    if (v3 == 2)
    {
      double v5 = TIFitAffineMLLMatrix::valueAt(this, 1uLL, 1uLL);
      *(double *)TIFitAffineMLLMatrix::valueAt(a2, 0, 0) = v5;
      double v6 = -TIFitAffineMLLMatrix::valueAt(this, 1uLL, 0);
      *(double *)TIFitAffineMLLMatrix::valueAt(a2, 0, 1uLL) = v6;
      double v7 = -TIFitAffineMLLMatrix::valueAt(this, 0, 1uLL);
      *(double *)TIFitAffineMLLMatrix::valueAt(a2, 1uLL, 0) = v7;
      double v8 = TIFitAffineMLLMatrix::valueAt(this, 0, 0);
      *(double *)TIFitAffineMLLMatrix::valueAt(a2, 1uLL, 1uLL) = v8;
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      int64x2_t v11 = 0uLL;
      while (1)
      {
        long long v49 = 0uLL;
        std::string::size_type v50 = 0;
        double v12 = (void *)v11.i64[1];
        if (v11.i64[1] >= (unint64_t)v9)
        {
          double v14 = (void *)v11.i64[0];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11.i64[1] - v11.i64[0]) >> 3);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          int64x2_t v47 = v11;
          if (0x5555555555555556 * ((uint64_t)&v9[-v11.i64[0]] >> 3) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)&v9[-v11.i64[0]] >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v9[-v11.i64[0]] >> 3) >= 0x555555555555555) {
            unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
          }
          if (v16 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v17 = 3 * v16;
          uint64_t v18 = (char *)operator new(24 * v16);
          uint64_t v19 = v18;
          uint64_t v20 = &v18[24 * v15];
          *((void *)v20 + 1) = 0;
          *((void *)v20 + 2) = 0;
          *(void *)uint64_t v20 = 0;
          std::string::size_type v50 = 0;
          long long v49 = 0uLL;
          if (v12 == v14)
          {
            int64x2_t v22 = vdupq_laneq_s64(v47, 1);
            uint64_t v21 = &v18[24 * v15];
          }
          else
          {
            uint64_t v21 = &v18[24 * v15];
            int64x2_t v22 = v47;
            do
            {
              *((void *)v21 - 3) = 0;
              *((void *)v21 - 2) = 0;
              v21 -= 24;
              *((void *)v21 + 2) = 0;
              long long v23 = *(_OWORD *)(v12 - 3);
              v12 -= 3;
              *(_OWORD *)uint64_t v21 = v23;
              *((void *)v21 + 2) = v12[2];
              *double v12 = 0;
              v12[1] = 0;
              void v12[2] = 0;
            }
            while (v12 != v14);
          }
          uint64_t v25 = (void **)v22.i64[1];
          float v45 = (void *)v22.i64[0];
          int v24 = (void **)v22.i64[0];
          while (v25 != v24)
          {
            v25 -= 3;
            std::string v52 = v25;
            std::vector<TIFitAffineMLLMatrix>::__destroy_vector::operator()[abi:nn180100](&v52);
          }
          unint64_t v9 = &v19[8 * v17];
          uint64_t v13 = (uint64_t)(v20 + 24);
          v11.i64[0] = (uint64_t)v21;
          if (v45)
          {
            operator delete(v45);
            v11.i64[0] = (uint64_t)v21;
          }
        }
        else
        {
          *(_OWORD *)v11.i64[1] = 0uLL;
          *(void *)(v11.i64[1] + 16) = 0;
          *(_OWORD *)v11.i64[1] = v49;
          *(void *)(v11.i64[1] + 16) = v50;
          long long v49 = 0uLL;
          std::string::size_type v50 = 0;
          uint64_t v13 = v11.i64[1] + 24;
        }
        std::string::size_type v46 = (char *)v11.i64[0];
        v11.i64[1] = v13;
        int64x2_t v48 = v11;
        std::string v52 = (void **)&v49;
        std::vector<TIFitAffineMLLMatrix>::__destroy_vector::operator()[abi:nn180100](&v52);
        unint64_t v26 = *((void *)this + 1);
        unint64_t v27 = v46;
        if (!v26) {
          break;
        }
        for (unint64_t i = 0; i < v26; ++i)
        {
          *(void *)&long long v49 = v26 - 1;
          *((void *)&v49 + 1) = v26 - 1;
          v51[0] = 0;
          v51[1] = 0;
          std::string::size_type v50 = v51;
          std::vector<TIFitAffineMLLMatrix>::push_back[abi:nn180100]((void **)&v46[24 * v10], (uint64_t)&v49);
          std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v51[0]);
          unint64_t v26 = *((void *)this + 1);
        }
        ++v10;
        int64x2_t v11 = v48;
        if (v26 <= v10)
        {
          if (v26)
          {
            for (unint64_t j = 0; j < v26; ++j)
            {
              unint64_t v30 = 0;
              do
              {
                unint64_t v31 = 0;
                unsigned int v32 = 0;
                do
                {
                  unint64_t v33 = 0;
                  int v34 = 0;
                  unint64_t v35 = v32;
                  do
                  {
                    if (j != v31 && v30 != v33)
                    {
                      double v36 = TIFitAffineMLLMatrix::valueAt(this, v31, v33);
                      *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)(*(void *)&v46[24 * j] + 40 * v30), v35, v34) = v36;
                      unint64_t v26 = *((void *)this + 1);
                      ++v34;
                    }
                    ++v33;
                  }
                  while (v26 > v33);
                  if (j == v31) {
                    unsigned int v32 = v35;
                  }
                  else {
                    unsigned int v32 = v35 + 1;
                  }
                  ++v31;
                }
                while (v26 > v31);
                ++v30;
              }
              while (v26 > v30);
            }
            if (v26)
            {
              for (unint64_t k = 0; k < v43; ++k)
              {
                uint64_t v38 = 0;
                unint64_t v39 = 0;
                char v40 = (k & 1) == 0;
                do
                {
                  TIFitAffineMLLMatrix::determinant((TIFitAffineMLLMatrix *)(*(void *)&v46[24 * k] + v38));
                  if (v40) {
                    double v42 = v41;
                  }
                  else {
                    double v42 = -v41;
                  }
                  *(double *)TIFitAffineMLLMatrix::valueAt(a2, k, v39) = v42;
                  v40 ^= 1u;
                  ++v39;
                  unint64_t v43 = *((void *)this + 1);
                  v38 += 40;
                }
                while (v43 > v39);
              }
            }
          }
          break;
        }
      }
      if (v46)
      {
        size_t v44 = (char *)v48.i64[1];
        if ((char *)v48.i64[1] != v46)
        {
          do
          {
            v44 -= 24;
            *(void *)&long long v49 = v44;
            std::vector<TIFitAffineMLLMatrix>::__destroy_vector::operator()[abi:nn180100]((void ***)&v49);
          }
          while (v44 != v46);
          unint64_t v27 = (char *)v48.i64[0];
        }
        operator delete(v27);
      }
    }
  }
  TIFitAffineMLLMatrix::removeDefaults(a2);
}

void std::vector<TIFitAffineMLLMatrix>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        double v6 = v4 - 40;
        std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<TIFitAffineMLLMatrix>::push_back[abi:nn180100](void **a1, uint64_t a2)
{
  double v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v5 < v4)
  {
    *(_OWORD *)double v5 = *(_OWORD *)a2;
    *((void *)v5 + 3) = 0;
    *((void *)v5 + 4) = 0;
    *((void *)v5 + 2) = v5 + 24;
    std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>((uint64_t *)v5 + 2, *(void **)(a2 + 16), (void *)(a2 + 24));
    double v6 = v5 + 40;
    goto LABEL_21;
  }
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
  if (v7 + 1 > 0x666666666666666) {
    abort();
  }
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= v7 + 1) {
    uint64_t v9 = v7 + 1;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10)
  {
    if (v10 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int64x2_t v11 = (char *)operator new(40 * v10);
  }
  else
  {
    int64x2_t v11 = 0;
  }
  double v12 = &v11[40 * v7];
  uint64_t v13 = &v11[40 * v10];
  *(_OWORD *)double v12 = *(_OWORD *)a2;
  *((void *)v12 + 3) = 0;
  *((void *)v12 + 4) = 0;
  *((void *)v12 + 2) = v12 + 24;
  std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>((uint64_t *)v12 + 2, *(void **)(a2 + 16), (void *)(a2 + 24));
  double v6 = v12 + 40;
  unint64_t v15 = (char *)*a1;
  double v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v16 = 0;
  do
  {
    long long v17 = *(_OWORD *)&v14[v16 - 40];
    *(void *)&v12[v16 - 16] = 0;
    *(void *)&v12[v16 - 24] = &v12[v16 - 16];
    uint64_t v18 = (uint64_t *)&v12[v16 - 24];
    *((_OWORD *)v18 - 1) = v17;
    _OWORD v18[2] = 0;
    std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>(v18, *(void **)&v14[v16 - 24], &v14[v16 - 16]);
    v16 -= 40;
  }
  while (&v14[v16] != v15);
  uint64_t v19 = &v12[v16];
  uint64_t v20 = (char *)*a1;
  double v14 = (char *)a1[1];
  *a1 = v19;
  a1[1] = v6;
  a1[2] = v13;
  if (v14 != v20)
  {
    do
    {
      std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*((void **)v14 - 2));
      v14 -= 40;
    }
    while (v14 != v20);
    double v14 = v20;
  }
  if (v14) {
LABEL_20:
  }
    operator delete(v14);
LABEL_21:
  a1[1] = v6;
}

void *TIFitAffineMLLMatrix::submatrix@<X0>(void *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = result;
  void v18[4] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  unint64_t v17 = *a2;
  if (v7 == -1) {
    unint64_t v8 = result[1];
  }
  else {
    unint64_t v8 = v7 + v6;
  }
  unint64_t v9 = *a3;
  unint64_t v10 = a3[1];
  unint64_t v15 = *a3;
  unint64_t v16 = v8 - 1;
  if (v10 == -1) {
    unint64_t v11 = *result;
  }
  else {
    unint64_t v11 = v10 + v9;
  }
  unint64_t v14 = v11 - 1;
  *a4 = v11 - v9;
  a4[1] = v8 - v6;
  a4[4] = 0;
  a4[3] = 0;
  a4[2] = a4 + 3;
  if (v6 <= v8 - 1 && v9 <= v11 - 1)
  {
    uint64_t v13 = operator new(0x30uLL);
    *uint64_t v13 = &unk_1F3F770E8;
    v13[1] = &v17;
    unsigned __int16 v13[2] = &v16;
    void v13[3] = &v15;
    unsigned int v13[4] = &v14;
    v13[5] = a4;
    _WORD v18[3] = v13;
    TIFitAffineMLLMatrix::do_for_each_valid_element(v4, (uint64_t)v18);
    return std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](v18);
  }
  return result;
}

char *std::__function::__func<TIFitAffineMLLMatrix::submatrix(TIFitAffineMLLMatrixDimRange const&,TIFitAffineMLLMatrixDimRange const&)::$_0,std::allocator<TIFitAffineMLLMatrix::submatrix(TIFitAffineMLLMatrixDimRange const&,TIFitAffineMLLMatrixDimRange const&)::$_0>,void ()(unsigned long,unsigned long,double const&)>::operator()(char *result, unint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v4 = *a2;
  unint64_t v5 = **((void **)result + 1);
  BOOL v6 = *a2 >= v5;
  unint64_t v7 = *a2 - v5;
  if (v6 && **((void **)result + 2) >= v4)
  {
    unint64_t v8 = *a3;
    unint64_t v9 = **((void **)result + 3);
    BOOL v6 = *a3 >= v9;
    unint64_t v10 = *a3 - v9;
    if (v6 && **((void **)result + 4) >= v8)
    {
      uint64_t v11 = *a4;
      __n128 result = TIFitAffineMLLMatrix::valueAt(*((TIFitAffineMLLMatrix **)result + 5), v7, v10);
      *(void *)__n128 result = v11;
    }
  }
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::submatrix(TIFitAffineMLLMatrixDimRange const&,TIFitAffineMLLMatrixDimRange const&)::$_0,std::allocator<TIFitAffineMLLMatrix::submatrix(TIFitAffineMLLMatrixDimRange const&,TIFitAffineMLLMatrixDimRange const&)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F770E8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::submatrix(TIFitAffineMLLMatrixDimRange const&,TIFitAffineMLLMatrixDimRange const&)::$_0,std::allocator<TIFitAffineMLLMatrix::submatrix(TIFitAffineMLLMatrixDimRange const&,TIFitAffineMLLMatrixDimRange const&)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v2 = &unk_1F3F770E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<TIFitAffineMLLMatrix::submatrix(TIFitAffineMLLMatrixDimRange const&,TIFitAffineMLLMatrixDimRange const&)::$_0,std::allocator<TIFitAffineMLLMatrix::submatrix(TIFitAffineMLLMatrixDimRange const&,TIFitAffineMLLMatrixDimRange const&)::$_0>,void ()(unsigned long,unsigned long,double const&)>::~__func()
{
}

void *TIFitAffineMLLMatrix::transform@<X0>(int8x16_t *this@<X0>, int8x16_t *a2@<X8>)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  *a2 = vextq_s8(*this, *this, 8uLL);
  a2[2].i64[0] = 0;
  a2[1].i64[1] = 0;
  a2[1].i64[0] = (uint64_t)&a2[1].i64[1];
  v3[0] = &unk_1F3F77178;
  v3[1] = a2;
  _OWORD v3[3] = v3;
  TIFitAffineMLLMatrix::do_for_each_valid_element(this, (uint64_t)v3);
  return std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](v3);
}

char *std::__function::__func<TIFitAffineMLLMatrix::transform(void)::$_0,std::allocator<TIFitAffineMLLMatrix::transform(void)::$_0>,void ()(unsigned long,unsigned long,double const&)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  __n128 result = TIFitAffineMLLMatrix::valueAt(*(TIFitAffineMLLMatrix **)(a1 + 8), *a3, *a2);
  *(void *)__n128 result = v4;
  return result;
}

uint64_t std::__function::__func<TIFitAffineMLLMatrix::transform(void)::$_0,std::allocator<TIFitAffineMLLMatrix::transform(void)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F3F77178;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<TIFitAffineMLLMatrix::transform(void)::$_0,std::allocator<TIFitAffineMLLMatrix::transform(void)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F3F77178;
  result[1] = v3;
  return result;
}

void std::__function::__func<TIFitAffineMLLMatrix::transform(void)::$_0,std::allocator<TIFitAffineMLLMatrix::transform(void)::$_0>,void ()(unsigned long,unsigned long,double const&)>::~__func()
{
}

void TIFitAffineMLLMatrix::cholesky(TIFitAffineMLLMatrix *this@<X0>, uint64_t a2@<X8>)
{
  v49[4] = *MEMORY[0x1E4F143B8];
  long long v46 = *(_OWORD *)this;
  v48[0] = 0;
  v48[1] = 0;
  int64x2_t v47 = v48;
  std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>((uint64_t *)&v47, *((void **)this + 2), (void *)this + 3);
  if (*((void *)this + 1))
  {
    unint64_t v4 = 0;
    while (1)
    {
      unint64_t v5 = v4;
      double v6 = *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v4, v4);
      if (v4)
      {
        for (unint64_t i = 0; i != v4; ++i)
        {
          unint64_t v8 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v4, i);
          double v6 = v6 - *(double *)v8 * *(double *)v8;
        }
      }
      if (v6 <= 0.0) {
        break;
      }
      double v9 = sqrt(v6);
      *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v4, v4) = v9;
      ++v4;
      unint64_t v10 = *(void **)this;
      if (v5 + 1 < *(void *)this)
      {
        unint64_t v11 = v5 + 1;
        double v12 = 1.0 / v9;
        do
        {
          if (v5)
          {
            for (unint64_t j = 0; j != v5; ++j)
            {
              double v14 = *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, j, v11);
              double v15 = *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, j, v5);
              unint64_t v16 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v5, v11);
              *(double *)unint64_t v16 = *(double *)v16 - v14 * v15;
            }
            double v17 = v12 * *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v5, v11);
            *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v5, v11) = v17;
            unint64_t v18 = v5;
          }
          else
          {
            double v19 = *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, 0, v11);
            uint64_t v20 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, 0, v11);
            unint64_t v18 = 0;
            double v17 = v12 * v19;
            *(double *)uint64_t v20 = v17;
          }
          *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v11++, v18) = v17;
          unint64_t v10 = *(void **)this;
        }
        while (v11 < *(void *)this);
      }
      unint64_t v21 = *((void *)this + 1);
      if (v4 >= v21) {
        goto LABEL_18;
      }
    }
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 16) = a2 + 24;
  }
  else
  {
    unint64_t v21 = 0;
    unint64_t v10 = *(void **)this;
LABEL_18:
    v44[0] = 1;
    v44[1] = v21;
    v45[0] = 0;
    v45[1] = 0;
    _OWORD v44[2] = v45;
    v42[0] = 1;
    v42[1] = v21;
    v43[0] = 0;
    v43[1] = 0;
    _OWORD v42[2] = v43;
    if (v10)
    {
      unint64_t v22 = 0;
      while (*(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v22, v22) != 0.0)
      {
        uint64_t v23 = *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v44, v22, 0);
        *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v42, v22, 0) = v23;
        if (v22)
        {
          for (unint64_t k = 0; k != v22; ++k)
          {
            double v25 = *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v42, k, 0);
            double v26 = *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, k, v22);
            unint64_t v27 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v42, v22, 0);
            *(double *)unint64_t v27 = *(double *)v27 - v25 * v26;
          }
          uint64_t v28 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v22, v22);
          unint64_t v29 = v22;
        }
        else
        {
          uint64_t v28 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, 0, 0);
          unint64_t v29 = 0;
        }
        double v30 = *(double *)v28;
        unint64_t v31 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v42, v29, 0);
        *(double *)unint64_t v31 = *(double *)v31 / v30;
        if (++v22 >= *(void *)this)
        {
          unint64_t v21 = *((void *)this + 1);
          unint64_t v32 = *(void *)this - 1;
          if (v21) {
            goto LABEL_31;
          }
          goto LABEL_39;
        }
      }
    }
    else
    {
      unint64_t v32 = -1;
      if (!v21)
      {
LABEL_39:
        v49[0] = &unk_1F3F771C0;
        v49[1] = &v46;
        __int16 v49[3] = v49;
        TIFitAffineMLLMatrix::do_for_each_valid_element(&v46, (uint64_t)v49);
        std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](v49);
        TIFitAffineMLLMatrix::removeDefaults((TIFitAffineMLLMatrix *)&v46);
        std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v43[0]);
        std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v45[0]);
        *(_OWORD *)a2 = v46;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 16) = a2 + 24;
        std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>((uint64_t *)(a2 + 16), v47, v48);
        goto LABEL_40;
      }
LABEL_31:
      unint64_t v33 = v21 - 1;
      int v34 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v21 - 1, v32);
      while (*(double *)v34 != 0.0)
      {
        unint64_t v35 = v33;
        uint64_t v36 = *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v44, v33, 0);
        *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v42, v33, 0) = v36;
        while (v21 < *((void *)this + 1))
        {
          double v37 = *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v42, v21, 0);
          double v38 = *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v21, v32);
          unint64_t v39 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v42, v33, 0);
          *(double *)unint64_t v39 = *(double *)v39 - v37 * v38;
          ++v21;
        }
        double v40 = *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v33, v32);
        double v41 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v42, v33, 0);
        *(double *)double v41 = *(double *)v41 / v40;
        if (!v33) {
          goto LABEL_39;
        }
        --v32;
        --v33;
        int v34 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v46, v35 - 1, v32);
        unint64_t v21 = v35;
      }
    }
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 16) = a2 + 24;
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v43[0]);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v45[0]);
  }
LABEL_40:
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v48[0]);
}

char *std::__function::__func<TIFitAffineMLLMatrix::cholesky(void)::$_0,std::allocator<TIFitAffineMLLMatrix::cholesky(void)::$_0>,void ()(unsigned long,unsigned long,double const&)>::operator()(char *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (v4 < v3)
  {
    __n128 result = TIFitAffineMLLMatrix::valueAt(*((TIFitAffineMLLMatrix **)result + 1), v3, v4);
    *(void *)__n128 result = 0;
  }
  return result;
}

uint64_t std::__function::__func<TIFitAffineMLLMatrix::cholesky(void)::$_0,std::allocator<TIFitAffineMLLMatrix::cholesky(void)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F3F771C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<TIFitAffineMLLMatrix::cholesky(void)::$_0,std::allocator<TIFitAffineMLLMatrix::cholesky(void)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F3F771C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<TIFitAffineMLLMatrix::cholesky(void)::$_0,std::allocator<TIFitAffineMLLMatrix::cholesky(void)::$_0>,void ()(unsigned long,unsigned long,double const&)>::~__func()
{
}

void *TIFitAffineMLLMatrix::pow@<X0>(TIFitAffineMLLMatrix *this@<X0>, double a2@<D0>, void *a3@<X8>)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  double v5 = a2;
  *(_OWORD *)a3 = *(_OWORD *)this;
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = a3 + 3;
  std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>(a3 + 2, *((void **)this + 2), (void *)this + 3);
  v6[0] = &unk_1F3F77208;
  v6[1] = a3;
  unsigned __int16 v6[2] = &v5;
  _OWORD v6[3] = v6;
  TIFitAffineMLLMatrix::do_for_each_valid_element(a3, (uint64_t)v6);
  return std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](v6);
}

char *std::__function::__func<TIFitAffineMLLMatrix::pow(double)::$_0,std::allocator<TIFitAffineMLLMatrix::pow(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, long double *a4)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *a3;
  long double v7 = pow(*a4, **(long double **)(a1 + 16));
  __n128 result = TIFitAffineMLLMatrix::valueAt(*(TIFitAffineMLLMatrix **)(a1 + 8), v5, v6);
  *(long double *)__n128 result = v7;
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::pow(double)::$_0,std::allocator<TIFitAffineMLLMatrix::pow(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F77208;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TIFitAffineMLLMatrix::pow(double)::$_0,std::allocator<TIFitAffineMLLMatrix::pow(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F3F77208;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<TIFitAffineMLLMatrix::pow(double)::$_0,std::allocator<TIFitAffineMLLMatrix::pow(double)::$_0>,void ()(unsigned long,unsigned long,double const&)>::~__func()
{
}

char *TIFitAffineMLLMatrix::sumCols@<X0>(char *this@<X0>, TIFitAffineMLLMatrix *a2@<X8>)
{
  double v3 = *(double *)this;
  *(void *)a2 = *(void *)this;
  *((void *)a2 + 1) = 1;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 2) = (char *)a2 + 24;
  if (v3 != 0.0)
  {
    unint64_t v4 = this;
    unint64_t v5 = 0;
    unint64_t v6 = *((void *)this + 1);
    do
    {
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          double v8 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v4, i, v5);
          this = TIFitAffineMLLMatrix::valueAt(a2, 0, v5);
          *(double *)this = v8 + *(double *)this;
          unint64_t v6 = *((void *)v4 + 1);
        }
        double v3 = *(double *)v4;
      }
      ++v5;
    }
    while (*(void *)&v3 > v5);
  }
  return this;
}

char *TIFitAffineMLLMatrix::sumRows@<X0>(char *this@<X0>, TIFitAffineMLLMatrix *a2@<X8>)
{
  unint64_t v3 = *((void *)this + 1);
  *(void *)a2 = 1;
  *((void *)a2 + 1) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 2) = (char *)a2 + 24;
  if (v3)
  {
    unint64_t v4 = (unint64_t *)this;
    unint64_t v5 = 0;
    double v6 = *(double *)this;
    do
    {
      if (v6 != 0.0)
      {
        unint64_t v7 = 0;
        do
        {
          double v8 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v4, v5, v7);
          this = TIFitAffineMLLMatrix::valueAt(a2, v5, 0);
          *(double *)this = v8 + *(double *)this;
          ++v7;
          double v6 = *(double *)v4;
        }
        while (*v4 > v7);
        unint64_t v3 = v4[1];
      }
      ++v5;
    }
    while (v3 > v5);
  }
  return this;
}

double TIFitAffineMLLMatrix::univalue(TIFitAffineMLLMatrix *this)
{
  return TIFitAffineMLLMatrix::valueAt(this, 0, 0);
}

unint64_t TIFitAffineMLLMatrix::indexesFromKey(TIFitAffineMLLMatrix *this, unint64_t a2)
{
  return a2 / *(void *)this;
}

uint64_t TIFitAffineMLLMatrix::print(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  if (v1)
  {
    uint64_t v2 = (TIFitAffineMLLMatrix *)this;
    for (unint64_t i = 0; i != v1; ++i)
    {
      uint64_t v4 = *(void *)v2;
      if (*(void *)v2)
      {
        unint64_t v5 = 0;
        do
        {
          double v6 = TIFitAffineMLLMatrix::valueAt(v2, i, v5);
          printf(" %5.4f", v6);
          ++v5;
        }
        while (v4 != v5);
      }
      this = putchar(10);
    }
  }
  return this;
}

void operator+(TIFitAffineMLLMatrix *this@<X1>, double *a2@<X0>, TIFitAffineMLLMatrix *a3@<X8>)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  *(void *)a3 = *(void *)this;
  *((void *)a3 + 1) = v5;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 2) = (char *)a3 + 24;
  if (v4)
  {
    for (unint64_t i = 0; i != v4; ++i)
    {
      if (v5)
      {
        for (unint64_t j = 0; j != v5; ++j)
        {
          double v10 = *a2;
          double v11 = v10 + TIFitAffineMLLMatrix::valueAt(this, i, j);
          *(double *)TIFitAffineMLLMatrix::valueAt(a3, i, j) = v11;
        }
      }
    }
  }

  TIFitAffineMLLMatrix::removeDefaults(a3);
}

void operator-(TIFitAffineMLLMatrix *this@<X1>, double *a2@<X0>, TIFitAffineMLLMatrix *a3@<X8>)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  *(void *)a3 = *(void *)this;
  *((void *)a3 + 1) = v5;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 2) = (char *)a3 + 24;
  if (v4)
  {
    for (unint64_t i = 0; i != v4; ++i)
    {
      if (v5)
      {
        for (unint64_t j = 0; j != v5; ++j)
        {
          double v10 = *a2;
          double v11 = v10 - TIFitAffineMLLMatrix::valueAt(this, i, j);
          *(double *)TIFitAffineMLLMatrix::valueAt(a3, i, j) = v11;
        }
      }
    }
  }

  TIFitAffineMLLMatrix::removeDefaults(a3);
}

void operator*(uint64_t a1@<X0>, void *a2@<X1>, TIFitAffineMLLMatrix *a3@<X8>)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 2) = (char *)a3 + 24;
  double v6 = operator new(0x20uLL);
  *double v6 = &unk_1F3F77298;
  v6[1] = a3;
  unsigned __int16 v6[2] = a1;
  _OWORD v6[3] = a2;
  _OWORD v7[3] = v6;
  TIFitAffineMLLMatrix::do_for_each_valid_element(a2, (uint64_t)v7);
  std::__function::__value_func<void ()(unsigned long,unsigned long,double const&)>::~__value_func[abi:nn180100](v7);
  TIFitAffineMLLMatrix::removeDefaults(a3);
}

char *std::__function::__func<operator*(double const&,TIFitAffineMLLMatrix const&)::$_0,std::allocator<operator*(double const&,TIFitAffineMLLMatrix const&)::$_0>,void ()(unsigned long,unsigned long,double const&)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *a3;
  double v6 = **(double **)(a1 + 16);
  double v7 = v6 * TIFitAffineMLLMatrix::valueAt(*(TIFitAffineMLLMatrix **)(a1 + 24), *a2, *a3);
  __n128 result = TIFitAffineMLLMatrix::valueAt(*(TIFitAffineMLLMatrix **)(a1 + 8), v4, v5);
  *(double *)__n128 result = v7;
  return result;
}

__n128 std::__function::__func<operator*(double const&,TIFitAffineMLLMatrix const&)::$_0,std::allocator<operator*(double const&,TIFitAffineMLLMatrix const&)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F77298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operator*(double const&,TIFitAffineMLLMatrix const&)::$_0,std::allocator<operator*(double const&,TIFitAffineMLLMatrix const&)::$_0>,void ()(unsigned long,unsigned long,double const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F3F77298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<operator*(double const&,TIFitAffineMLLMatrix const&)::$_0,std::allocator<operator*(double const&,TIFitAffineMLLMatrix const&)::$_0>,void ()(unsigned long,unsigned long,double const&)>::~__func()
{
}

void operator/(TIFitAffineMLLMatrix *this@<X1>, uint64_t a2@<X0>, TIFitAffineMLLMatrix *a3@<X8>)
{
  TIFitAffineMLLMatrix::inverse(this, (TIFitAffineMLLMatrix *)v5);
  operator*(a2, v5, a3);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy((void *)v5[3]);
}

id getSTKStickerUsageManagerClass()
{
  uint64_t v4 = 0;
  unint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getSTKStickerUsageManagerClass_softClass;
  uint64_t v7 = getSTKStickerUsageManagerClass_softClass;
  if (!getSTKStickerUsageManagerClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSTKStickerUsageManagerClass_block_invoke;
    _OWORD v3[3] = &unk_1E6E2E248;
    v3[4] = &v4;
    __getSTKStickerUsageManagerClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

Class __getSTKStickerUsageManagerClass_block_invoke(uint64_t a1)
{
  if (!StickersLibraryCore_frameworkLibrary) {
    StickersLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  Class result = objc_getClass("STKStickerUsageManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSTKStickerUsageManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __StickersLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  StickersLibraryCore_frameworkLibrardouble y = result;
  return result;
}

uint64_t FlagsForCandidate()
{
  int v0 = MecabraCandidateIsExtensionCandidate() != 0;
  if (MecabraCandidateIsEmojiCandidate()) {
    v0 |= 2u;
  }
  if (MecabraCandidateIsUserWordCandidate()) {
    v0 |= 4u;
  }
  if (MecabraCandidateIsAutocorrectionCandidate()) {
    v0 |= 8u;
  }
  if (MecabraCandidateIsOTAWordlistCandidate()) {
    v0 |= 0x10u;
  }
  if (MecabraCandidateIsRegionalCandidate()) {
    v0 |= 0x20u;
  }
  int v1 = v0 | 0x80;
  if (MecabraCandidateIsBilingualCandidate()) {
    v0 |= 0x80u;
  }
  if (MecabraCandidateGetKind() != 83) {
    int v1 = v0;
  }
  int IsExtensionForCandidateBar = MecabraCandidateIsExtensionForCandidateBar();
  if (MecabraCandidateIsPartialCandidate() | IsExtensionForCandidateBar) {
    int v3 = v1 | 0x200;
  }
  else {
    int v3 = v1;
  }
  int v4 = ((unsigned __int16)MecabraCandidateGetWubixingType() << 9) & 0x400;
  unsigned int v5 = v4 & 0xFFFFF7FF | (((MecabraCandidateGetWubixingType() >> 2) & 1) << 11) | v3;
  int IsSinglePhraseCandidate = MecabraCandidateIsSinglePhraseCandidate();
  unsigned __int16 v7 = v5 | 0x1000;
  if (!IsSinglePhraseCandidate) {
    return (unsigned __int16)v5;
  }
  return v7;
}

id _sbsOverrideLog()
{
  if (_sbsOverrideLog_onceToken != -1) {
    dispatch_once(&_sbsOverrideLog_onceToken, &__block_literal_global_31);
  }
  int v0 = (void *)_sbsOverrideLog_logFacility;

  return v0;
}

uint64_t ___sbsOverrideLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "StatusBarStyleOverrides");
  uint64_t v1 = _sbsOverrideLog_logFacility;
  _sbsOverrideLog_logFacilitdouble y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TITypingSpeedAllowedValues()
{
  v2[7] = *MEMORY[0x1E4F143B8];
  v2[0] = kFeatureStringTypingSpeedInsufficientData;
  v2[1] = kFeatureStringTypingSpeedVerySlow;
  v2[2] = kFeatureStringTypingSpeedSlow;
  v2[3] = kFeatureStringTypingSpeedMedium;
  v2[4] = kFeatureStringTypingSpeedFast;
  v2[5] = kFeatureStringTypingSpeedVeryFast;
  v2[6] = kFeatureStringTypingSpeedUnusual;
  os_log_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:7];

  return v0;
}

id TITypingEngineAllowedValues()
{
  void v5[6] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4FAE7E8];
  v5[0] = *MEMORY[0x1E4FAE808];
  v5[1] = v0;
  uint64_t v1 = *MEMORY[0x1E4FAE7F0];
  v5[2] = *MEMORY[0x1E4FAE7E0];
  v5[3] = v1;
  uint64_t v2 = *MEMORY[0x1E4FAE800];
  void v5[4] = *MEMORY[0x1E4FAE7F8];
  void v5[5] = v2;
  int v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:6];

  return v3;
}

id TIAssetAvailabilityStatusAllowedValues()
{
  v2[2] = *MEMORY[0x1E4F143B8];
  v2[0] = @"Unavailable";
  v2[1] = @"Installed";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:2];

  return v0;
}

Class __getMCProfileConnectionClass_block_invoke_14589(uint64_t a1)
{
  ManagedConfigurationLibrary_14592();
  Class result = objc_getClass("MCProfileConnection");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMCProfileConnectionClass_softClass_14588 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__50__TIUserDictionaryServer_loadPhraseShortcutPairs___block_invoke(v3);
  }
  return result;
}

uint64_t ManagedConfigurationLibrary_14592()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!ManagedConfigurationLibraryCore_frameworkLibrary_14595)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    _OWORD v3[3] = __ManagedConfigurationLibraryCore_block_invoke_14596;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E6E2CB80;
    uint64_t v5 = 0;
    ManagedConfigurationLibraryCore_frameworkLibrary_14595 = _sl_dlopen();
    uint64_t v1 = (void *)v3[0];
    uint64_t v0 = ManagedConfigurationLibraryCore_frameworkLibrary_14595;
    if (ManagedConfigurationLibraryCore_frameworkLibrary_14595)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      uint64_t v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return ManagedConfigurationLibraryCore_frameworkLibrary_14595;
}

uint64_t __ManagedConfigurationLibraryCore_block_invoke_14596()
{
  uint64_t result = _sl_dlopen();
  ManagedConfigurationLibraryCore_frameworkLibrary_14595 = result;
  return result;
}

void *__getMCKeyboardSettingsChangedNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)ManagedConfigurationLibrary_14592();
  uint64_t result = dlsym(v2, "MCKeyboardSettingsChangedNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMCKeyboardSettingsChangedNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id getKSTextReplacementDidChangeNotification()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v0 = (void **)getKSTextReplacementDidChangeNotificationSymbolLoc_ptr;
  uint64_t v8 = getKSTextReplacementDidChangeNotificationSymbolLoc_ptr;
  if (!getKSTextReplacementDidChangeNotificationSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)KeyboardServicesLibrary_14603();
    _OWORD v6[3] = (uint64_t)dlsym(v1, "KSTextReplacementDidChangeNotification");
    getKSTextReplacementDidChangeNotificationSymbolLoc_ptr = v6[3];
    uint64_t v0 = (void **)v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    return v2;
  }
  else
  {
    dlerror();
    uint64_t v4 = abort_report_np();
    return (id)ShortcutsDidChange(v4);
  }
}

uint64_t ShortcutsDidChange()
{
  return TIDispatchAsync();
}

uint64_t __ShortcutsDidChange_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateCache];
}

void *__getKSTextReplacementDidChangeNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)KeyboardServicesLibrary_14603();
  uint64_t result = dlsym(v2, "KSTextReplacementDidChangeNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getKSTextReplacementDidChangeNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t KeyboardServicesLibrary_14603()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!KeyboardServicesLibraryCore_frameworkLibrary_14605)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    _OWORD v3[3] = __KeyboardServicesLibraryCore_block_invoke_14606;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E6E2CB68;
    uint64_t v5 = 0;
    KeyboardServicesLibraryCore_frameworkLibrary_14605 = _sl_dlopen();
    uint64_t v1 = (void *)v3[0];
    uint64_t v0 = KeyboardServicesLibraryCore_frameworkLibrary_14605;
    if (KeyboardServicesLibraryCore_frameworkLibrary_14605)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      uint64_t v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return KeyboardServicesLibraryCore_frameworkLibrary_14605;
}

uint64_t __KeyboardServicesLibraryCore_block_invoke_14606()
{
  uint64_t result = _sl_dlopen();
  KeyboardServicesLibraryCore_frameworkLibrary_14605 = result;
  return result;
}

uint64_t TI::Favonius::SearchNodeGeometryExtensionsInsertingKey::create_extension@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80));
  if ((*(_WORD *)(*(void *)result + 60) & 0x20) == 0
    || (*(_WORD *)(*(void *)(*(void *)a3 + 8) + 60) & 0x20) == 0)
  {
    *a2 = 0;
    *(void *)a3 = 0;
    TI::Favonius::SearchNodeInsertingKey::create();
  }
  *a4 = 0;
  return result;
}

void TI::Favonius::SearchNodeGeometryExtensionsInsertingKey::clone_substituting_touch()
{
}

uint64_t TI::Favonius::SearchNodeGeometryExtensionsInsertingKey::SearchNodeGeometryExtensionsInsertingKey(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  double v10 = v5;
  TI::Favonius::SearchNodeGeometryExtensions::SearchNodeGeometryExtensions(a1, a2, (uint64_t *)&v10);
  if (v10)
  {
    unsigned int v6 = atomic_load(v10 + 2);
    if (v6 == 1) {
      (*(void (**)(void))(*(void *)v10 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF);
    }
  }
  *(void *)a1 = &unk_1F3F773A0;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v7;
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  }
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v8;
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

void TI::Favonius::SearchNodeGeometryExtensionsInsertingKey::~SearchNodeGeometryExtensionsInsertingKey(TI::Favonius::SearchNodeGeometryExtensionsInsertingKey *this)
{
  TI::Favonius::SearchNodeGeometryExtensionsInsertingKey::~SearchNodeGeometryExtensionsInsertingKey(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t vars8;

  *(void *)this = &unk_1F3F773A0;
  uint64_t v2 = (unsigned int *)*((void *)this + 11);
  if (v2)
  {
    uint64_t v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  long long v4 = (unsigned int *)*((void *)this + 10);
  if (v4)
  {
    uint64_t v5 = atomic_load(v4 + 2);
    if (v5 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v4 + 248))(v4);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF);
    }
  }

  TI::Favonius::SearchNodeGeometryExtensions::~SearchNodeGeometryExtensions(this);
}

void TI::Favonius::SearchNodeGeometryExtensionsInsertingKey::create(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 128);
  unsigned int v6 = *(atomic_uint **)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  uint64_t v8 = v6;
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, atomic_uint **, void))(*(void *)v5 + 72))(&v9, v5, &v8, *a2);
  uint64_t v9 = 0;
  if (v8) {
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v8);
  }
  float v7 = (*(float (**)(uint64_t))(*(void *)a3 + 24))(a3);
  logf(v7);
  (*(void (**)(void))(*(void *)*a2 + 32))();
  operator new();
}

uint64_t TI::Favonius::SearchNodeGeometryExtensionsInsertingKey::SearchNodeGeometryExtensionsInsertingKey(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t *a5, float a6, float a7, float a8)
{
  double v12 = *a3;
  *a3 = 0;
  unint64_t v16 = v12;
  TI::Favonius::SearchNodeGeometryExtensions::SearchNodeGeometryExtensions(a1, a2, (uint64_t *)&v16, 1, a6, a7 + a8);
  if (v16)
  {
    unsigned int v13 = atomic_load(v16 + 2);
    if (v13 == 1) {
      (*(void (**)(void))(*(void *)v16 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v16 + 2, 0xFFFFFFFF);
    }
  }
  *(void *)a1 = &unk_1F3F773A0;
  *(void *)(a1 + 80) = a4;
  if (a4) {
    atomic_fetch_add((atomic_uint *volatile)(a4 + 8), 1u);
  }
  uint64_t v14 = *a5;
  *a5 = 0;
  *(void *)(a1 + 88) = v14;
  *(float *)(a1 + 96) = a7;
  return a1;
}

void GetConsonantLettersSetAndArray(int a1, void *a2, void *a3)
{
  if (a2)
  {
    unsigned int v6 = objc_opt_new();
    if (a3)
    {
LABEL_3:
      float v7 = [MEMORY[0x1E4F1CA48] array];
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v6 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  float v7 = 0;
LABEL_6:
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  void v23[2] = ___ZL30GetConsonantLettersSetAndArray11UScriptCodePU15__autoreleasingP14NSCharacterSetPU15__autoreleasingP7NSArray_block_invoke;
  void v23[3] = &unk_1E6E2CBE8;
  id v8 = v6;
  id v24 = v8;
  id v9 = v7;
  id v25 = v9;
  double v10 = (char *)_Block_copy(v23);
  double v11 = v10;
  if (a1 <= 20)
  {
    if (a1 > 14)
    {
      if (a1 != 15)
      {
        if (a1 != 16) {
          goto LABEL_31;
        }
        double v17 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
        (*((void (**)(char *, uint64_t, uint64_t))v10 + 2))(v10, 2581, 37);
        (*v17)(v11, 2620, 1);
        double v12 = *v17;
        unsigned int v13 = v11;
        uint64_t v14 = 2649;
        goto LABEL_22;
      }
      unint64_t v22 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      (*((void (**)(char *, uint64_t, uint64_t))v10 + 2))(v10, 2709, 37);
      (*v22)(v11, 2748, 1);
      double v12 = *v22;
      unsigned int v13 = v11;
      uint64_t v14 = 2809;
    }
    else
    {
      if (a1 == 4)
      {
        uint64_t v20 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
        (*((void (**)(char *, uint64_t, uint64_t))v10 + 2))(v10, 2453, 37);
        (*v20)(v11, 2492, 1);
        (*v20)(v11, 2510, 1);
        (*v20)(v11, 2524, 4);
        double v12 = *v20;
        unsigned int v13 = v11;
        uint64_t v14 = 2544;
LABEL_27:
        uint64_t v18 = 2;
        goto LABEL_30;
      }
      if (a1 != 10) {
        goto LABEL_31;
      }
      double v15 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      (*((void (**)(char *, uint64_t, uint64_t))v10 + 2))(v10, 2325, 37);
      (*v15)(v11, 2364, 1);
      (*v15)(v11, 2392, 8);
      double v12 = *v15;
      unsigned int v13 = v11;
      uint64_t v14 = 2424;
    }
    uint64_t v18 = 8;
    goto LABEL_30;
  }
  if (a1 > 30)
  {
    if (a1 == 31)
    {
      double v19 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      (*((void (**)(char *, uint64_t, uint64_t))v10 + 2))(v10, 2837, 37);
      (*v19)(v11, 2876, 1);
      (*v19)(v11, 2908, 4);
      (*v19)(v11, 2929, 1);
      goto LABEL_31;
    }
    if (a1 == 35)
    {
      (*((void (**)(char *, uint64_t, uint64_t))v10 + 2))(v10, 2965, 37);
      goto LABEL_31;
    }
    if (a1 != 36) {
      goto LABEL_31;
    }
    (*((void (**)(char *, uint64_t, uint64_t))v10 + 2))(v10, 3093, 37);
    double v12 = (void (*)(char *, uint64_t, uint64_t))*((void *)v11 + 2);
    unsigned int v13 = v11;
    uint64_t v14 = 3160;
    goto LABEL_22;
  }
  if (a1 == 21)
  {
    unint64_t v21 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    (*((void (**)(char *, uint64_t, uint64_t))v10 + 2))(v10, 3221, 37);
    (*v21)(v11, 3260, 1);
    double v12 = *v21;
    unsigned int v13 = v11;
    uint64_t v14 = 3293;
    goto LABEL_27;
  }
  if (a1 != 26) {
    goto LABEL_31;
  }
  unint64_t v16 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  (*((void (**)(char *, uint64_t, uint64_t))v10 + 2))(v10, 3349, 37);
  (*v16)(v11, 3386, 1);
  (*v16)(v11, 3412, 3);
  double v12 = *v16;
  unsigned int v13 = v11;
  uint64_t v14 = 3450;
LABEL_22:
  uint64_t v18 = 6;
LABEL_30:
  v12(v13, v14, v18);
LABEL_31:
  if (a2) {
    *a2 = v8;
  }
  if (a3) {
    *a3 = v9;
  }
}

void ___ZL30GetConsonantLettersSetAndArray11UScriptCodePU15__autoreleasingP14NSCharacterSetPU15__autoreleasingP7NSArray_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(void **)(a1 + 32);
  if (v6) {
    objc_msgSend(v6, "addCharactersInRange:", a2, a3);
  }
  if (*(void *)(a1 + 40))
  {
    unint64_t v7 = a2 + a3;
    for (unsigned __int16 i = a2; v7 > i; ++i)
    {
      id v8 = *(void **)(a1 + 40);
      id v9 = [NSString stringWithCharacters:&i length:1];
      [v8 addObject:v9];
    }
  }
}

uint64_t GetScriptCodeForLanguage(NSString *a1)
{
  id v1 = [MEMORY[0x1E4F1CA20] scriptCodeFromLanguage:a1];
  [v1 UTF8String];
  uscript_getCode();

  return 0;
}

uint64_t ___ZL16GetTallConjunctsv_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F1CAD0] setWithArray:&unk_1F3FA78C8];
  uint64_t v1 = GetTallConjuncts(void)::__tallConjuncts;
  GetTallConjuncts(void)::__tallConjuncts = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void ___ZL18GetAkhandConjunctsv_block_invoke()
{
  uint64_t v0 = (void *)GetAkhandConjuncts(void)::__akhandConjuncts;
  GetAkhandConjuncts(void)::__akhandConjuncts = (uint64_t)&unk_1F3FA78B0;
}

void *___ZL32GetGlyphCountForStringInLanguageP8NSStringS0__block_invoke(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  *(void *)(*(void *)(a1[4] + 8) + 24) = *(void *)(*(void *)(a1[5] + 8) + 24) + a3;
  *(void *)(*(void *)(a1[6] + 8) + 24) = reallocf(*(void **)(*(void *)(a1[6] + 8) + 24), 2 * *(void *)(*(void *)(a1[4] + 8) + 24));
  *(void *)(*(void *)(a1[7] + 8) + 24) = reallocf(*(void **)(*(void *)(a1[7] + 8) + 24), 16 * *(void *)(*(void *)(a1[4] + 8) + 24));
  *(void *)(*(void *)(a1[8] + 8) + 24) = reallocf(*(void **)(*(void *)(a1[8] + 8) + 24), 16 * *(void *)(*(void *)(a1[4] + 8) + 24));
  *(void *)(*(void *)(a1[9] + 8) + 24) = reallocf(*(void **)(*(void *)(a1[9] + 8) + 24), 8 * *(void *)(*(void *)(a1[4] + 8) + 24));
  *a4 = *(void *)(*(void *)(a1[6] + 8) + 24);
  *a5 = *(void *)(*(void *)(a1[7] + 8) + 24);
  *a6 = *(void *)(*(void *)(a1[8] + 8) + 24);
  *a7 = *(void *)(*(void *)(a1[9] + 8) + 24);
  uint64_t v14 = (char *)(*(void *)(*(void *)(a1[6] + 8) + 24) + 2 * a2);
  memmove(&v14[2 * a3], v14, 2 * (*(void *)(*(void *)(a1[5] + 8) + 24) - a2));
  double v15 = (char *)(*(void *)(*(void *)(a1[7] + 8) + 24) + 16 * a2);
  memmove(&v15[16 * a3], v15, 16 * (*(void *)(*(void *)(a1[5] + 8) + 24) - a2));
  unint64_t v16 = (char *)(*(void *)(*(void *)(a1[8] + 8) + 24) + 16 * a2);
  memmove(&v16[16 * a3], v16, 16 * (*(void *)(*(void *)(a1[5] + 8) + 24) - a2));
  double v17 = (char *)(*(void *)(*(void *)(a1[9] + 8) + 24) + 8 * a2);
  uint64_t result = memmove(&v17[8 * a3], v17, 8 * (*(void *)(*(void *)(a1[5] + 8) + 24) - a2));
  *(void *)(*(void *)(a1[5] + 8) + 24) += a3;
  return result;
}

void TI::ConfidenceModel::compute_confidence2(TI::ConfidenceModel *this, CandidateCollection *a2)
{
  size_t var0 = a2->var0.var0;
  if ((unint64_t)(0x1CAC083126E978D5 * ((a2->var0.var1 - a2->var0.var0) >> 3)) > 1)
  {
    expf(*((float *)var0 + 437) - *((float *)var0 + 187));
    expf(*((float *)var0 + 436) - *((float *)var0 + 186));
  }
}

double TI::ConfidenceModel::compute_confidence1(TI::ConfidenceModel *this, KB::CandidateCollection *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = 652835029 * ((*((void *)a2 + 1) - *(void *)a2) >> 3);
  int v45 = 0;
  if (v4 >= a3) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = v4;
  }
  *(_OWORD *)double v42 = 0u;
  memset(v43, 0, sizeof(v43));
  memset(v44, 0, sizeof(v44));
  if (v5)
  {
    unint64_t v7 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      id v9 = (const KB::Candidate *)(*(void *)a2 + 1000 * i);
      if ((unint64_t)v7 >= *(void *)&v43[0])
      {
        uint64_t v10 = 0x1CAC083126E978D5 * ((v7 - v42[0]) >> 3);
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) > 0x4189374BC6A7EFLL) {
          abort();
        }
        if (0x395810624DD2F1AALL * ((uint64_t)(*(void *)&v43[0] - (unint64_t)v42[0]) >> 3) > v11) {
          unint64_t v11 = 0x395810624DD2F1AALL * ((uint64_t)(*(void *)&v43[0] - (unint64_t)v42[0]) >> 3);
        }
        if ((unint64_t)(0x1CAC083126E978D5 * ((uint64_t)(*(void *)&v43[0] - (unint64_t)v42[0]) >> 3)) >= 0x20C49BA5E353F7) {
          unint64_t v12 = 0x4189374BC6A7EFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        int64x2_t v48 = v43;
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = (KB::Candidate *)(v12 + 1000 * v10);
        *(void *)&v47[0] = v12;
        *((void *)&v47[0] + 1) = v14;
        *((void *)&v47[1] + 1) = v12 + 1000 * v13;
        KB::Candidate::Candidate(v14, v9);
        unint64_t v7 = (KB::Candidate *)((char *)v14 + 1000);
        *(void *)&v47[1] = v7;
        double v15 = v42[1];
        unint64_t v16 = (KB::Candidate *)*((void *)&v47[0] + 1);
        if (v42[1] == v42[0])
        {
          int64x2_t v17 = vdupq_n_s64((unint64_t)v42[1]);
        }
        else
        {
          do
          {
            double v15 = (KB::Candidate *)((char *)v15 - 1000);
            unint64_t v16 = (KB::Candidate *)KB::Candidate::Candidate((uint64_t)v16 - 1000, (uint64_t)v15);
          }
          while (v15 != v42[0]);
          int64x2_t v17 = *(int64x2_t *)v42;
          unint64_t v7 = *(KB::Candidate **)&v47[1];
        }
        v42[0] = v16;
        v42[1] = v7;
        *(int64x2_t *)((char *)v47 + 8) = v17;
        uint64_t v18 = *(void *)&v43[0];
        *(void *)&v43[0] = *((void *)&v47[1] + 1);
        *((void *)&v47[1] + 1) = v18;
        *(void *)&v47[0] = v17.i64[0];
        std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v47);
      }
      else
      {
        KB::Candidate::Candidate(v7, (const KB::Candidate *)(*(void *)a2 + 1000 * i));
        unint64_t v7 = (KB::Candidate *)((char *)v7 + 1000);
      }
      v42[1] = v7;
    }
    unsigned int v3 = a3;
    double v19 = (uint64_t *)v42[0];
  }
  else
  {
    unint64_t v7 = 0;
    double v19 = 0;
  }
  unint64_t v20 = 126 - 2 * __clz(0x1CAC083126E978D5 * ((v7 - (KB::Candidate *)v19) >> 3));
  if (v7 == (KB::Candidate *)v19) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v20;
  }
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(v19, v7, v21, 1);
  uint64_t v22 = 0x1CAC083126E978D5 * ((v42[1] - v42[0]) >> 3);
  if (v22)
  {
    if (v22 == 1)
    {
      double v23 = 1.0;
    }
    else
    {
      memset(v47, 0, sizeof(v47));
      LODWORD(v48) = 1065353216;
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v47, (unint64_t)(float)(unint64_t)(int)v3);
      long long v51 = xmmword_1E4155FA0;
      uint64_t v52 = 0x3FF0000000000000;
      if (v3 == 2) {
        *(void *)&long long v51 = 0x3FF0000000000000;
      }
      float v24 = *((float *)v42[0] + 186);
      KB::Candidate::capitalized_string(v42[0], (uint64_t)&v49);
      long long v46 = (KB::String *)&v49;
      id v25 = std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>((uint64_t)v47, &v49, &v46);
      KB::Candidate::operator=((uint64_t)(v25 + 6), (uint64_t)v42[0]);
      if (v50 && BYTE6(v49) == 1) {
        free(v50);
      }
      double v26 = 0.0;
      double v27 = 0.0;
      if (v5 >= 2)
      {
        unsigned int v28 = 0;
        double v29 = expf(v24);
        uint64_t v30 = v5 - 1;
        uint64_t v31 = 1744;
        do
        {
          unint64_t v32 = (KB::Candidate *)((char *)v42[0] + v31 - 744);
          KB::Candidate::capitalized_string(v32, (uint64_t)&v49);
          unint64_t v33 = std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::find<KB::String>(*(uint64_t *)&v47[0], *((unint64_t *)&v47[0] + 1), &v49);
          BOOL v35 = v29 > 0.0 && v33 == 0;
          if (v50) {
            BOOL v36 = BYTE6(v49) == 1;
          }
          else {
            BOOL v36 = 0;
          }
          if (v36) {
            free(v50);
          }
          if (v35)
          {
            float v37 = expf(*(float *)((char *)v42[0] + v31));
            if (v28 >= 2) {
              unsigned int v28 = 2;
            }
            double v38 = *((double *)&v51 + v28);
            KB::Candidate::capitalized_string(v32, (uint64_t)&v49);
            long long v46 = (KB::String *)&v49;
            unint64_t v39 = std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>((uint64_t)v47, &v49, &v46);
            KB::Candidate::operator=((uint64_t)(v39 + 6), (uint64_t)v32);
            if (v50 && BYTE6(v49) == 1) {
              free(v50);
            }
            double v26 = v26 + (1.0 - v37 / v29) * v38;
            double v27 = v27 + v38;
            ++v28;
            double v29 = v37;
          }
          v31 += 1000;
          --v30;
        }
        while (v30);
      }
      if (v27 == 0.0) {
        double v23 = 1.0;
      }
      else {
        double v23 = v26 / v27;
      }
      std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::~__hash_table((uint64_t)v47);
    }
  }
  else
  {
    double v23 = 0.0;
  }
  *(void *)&v47[0] = (char *)&v44[1] + 8;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v47);
  *(void *)&v47[0] = v44;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v47);
  *(void *)&v47[0] = (char *)v43 + 8;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v47);
  *(void *)&v47[0] = v42;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v47);
  return v23;
}

void TI::ConfidenceModel::update_confidence_for_candidates(TI::ConfidenceModel *this, KB::CandidateCollection *a2)
{
  float v4 = *((float *)this + 3);
  float v5 = *((float *)this + 1);
  BOOL v6 = KB::CandidateCollection::contains_secondary_language_candidates(a2, &v10, 3u);
  if (v6)
  {
    float v4 = *((float *)this + 4);
    float v5 = *((float *)this + 2);
  }
  int v7 = *((_DWORD *)this + 5);
  if (v7)
  {
    double v8 = 0.0;
    if (v7 == 1) {
      TI::ConfidenceModel::compute_confidence2((TI::ConfidenceModel *)v6, (CandidateCollection *)a2);
    }
  }
  else
  {
    double v8 = TI::ConfidenceModel::compute_confidence1((TI::ConfidenceModel *)v6, a2, *((_DWORD *)this + 6));
  }
  if (v8 >= *(float *)this)
  {
    *((_DWORD *)a2 + 24) = 0;
  }
  else
  {
    if (v8 >= v5) {
      int v9 = 1;
    }
    else {
      int v9 = 2;
    }
    *((_DWORD *)a2 + 24) = v9;
    if (*(void *)a2 != *((void *)a2 + 1) && expf(*(float *)(*(void *)a2 + 744)) < v4) {
      *((_DWORD *)a2 + 24) = 2;
    }
  }
}

void TI::Favonius::SearchNodeLanguageThenGeometryExtensions::decrease_bound_on_score(TI::Favonius::SearchNodeLanguageThenGeometryExtensions *this)
{
  if (!*((unsigned char *)this + 72))
  {
    TI::Favonius::SearchNode::get_language_extensions(*((void *)this + 4), (unint64_t *)this + 6);
    *((unsigned char *)this + 72) = 1;
    if (*((unsigned char *)this + 73))
    {
      uint64_t v2 = *(void *)(*((void *)this + 4) + 56);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 64))(v2))
      {
        if ((*(_WORD *)(*((void *)this + 4) + 120) & 0x20) == 0)
        {
          uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
          float v4 = (TI::Favonius::KeyFactory *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
          TI::Favonius::KeyFactory::create_key(v4, 0x20u, &v8);
          (*(void (**)(uint64_t, char *, atomic_uint **))(*(void *)v2 + 40))(v2, (char *)this + 48, &v8);
          if (v8) {
            WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v8);
          }
        }
      }
    }
    unint64_t v5 = *((void *)this + 6);
    unint64_t v6 = 126 - 2 * __clz(v5);
    if (v5) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageThenGeometryExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(*((uint64_t **)this + 7), (uint64_t *)(*((void *)this + 7) + 8 * v5), v7, 1);
    TI::Favonius::SearchNodeLanguageThenGeometryExtensions::set_bound_on_score(this);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageThenGeometryExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
void TI::Favonius::SearchNodeLanguageThenGeometryExtensions::set_bound_on_score(TI::Favonius::SearchNodeLanguageThenGeometryExtensions *this)
{
  if (*((unsigned char *)this + 72))
  {
    uint64_t v2 = *((void *)this + 6);
    if (v2)
    {
      uint64_t v3 = *(void *)(*((void *)this + 7) + 8 * v2 - 8);
      float v4 = (*(float (**)(uint64_t))(*(void *)v3 + 24))(v3);
      float v6 = *((float *)this + 10);
      float v5 = *((float *)this + 11);
      float v7 = v5 + (float)(v6 * logf(v4));
    }
    else
    {
      float v7 = -INFINITY;
    }
  }
  else
  {
    float v7 = *((float *)this + 11);
  }
  *((float *)this + 6) = v7;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageThenGeometryExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = (*(float (**)(void))(*(void *)*(a2 - 1) + 24))(*(a2 - 1));
      if (v6 < (*(float (**)(void))(*(void *)*a1 + 24))())
      {
        uint64_t v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      double v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    float v12 = (*(float (**)(void))(*(void *)*v9 + 24))();
    if (v12 < (*(float (**)(void))(*(void *)*v8 + 24))())
    {
      unint64_t v13 = 0;
      uint64_t v14 = (unsigned int *)*v9;
      *int v9 = 0;
      for (uint64_t i = v10; ; i -= 8)
      {
        uint64_t v16 = (char *)a1 + i;
        uint64_t v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((void *)v16 + 2) = 0;
        *((void *)v16 + 3) = v17;
        if (v13)
        {
          unsigned int v18 = atomic_load(v13 + 2);
          if (v18 == 1) {
            (*(void (**)(unsigned int *))(*(void *)v13 + 248))(v13);
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF);
          }
        }
        if (i == -16)
        {
          float v21 = (unsigned int **)a1;
          goto LABEL_17;
        }
        double v19 = (char *)a1 + i;
        float v20 = (*(float (**)(unsigned int *))(*(void *)v14 + 24))(v14);
        if (v20 >= (*(float (**)(void))(**((void **)v19 + 1) + 24))(*((void *)v19 + 1))) {
          break;
        }
        unint64_t v13 = (unsigned int *)*((void *)v16 + 2);
      }
      float v21 = (unsigned int **)(v19 + 16);
LABEL_17:
      uint64_t v22 = *v21;
      *float v21 = v14;
      if (v22)
      {
        unsigned int v23 = atomic_load(v22 + 2);
        if (v23 == 1) {
          (*(void (**)(unsigned int *))(*(void *)v22 + 248))(v22);
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v22 + 2, 0xFFFFFFFF);
        }
      }
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    double v8 = v9;
    v10 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

TI::Favonius::SearchNodeLanguageThenGeometryExtensions *TI::Favonius::SearchNodeLanguageThenGeometryExtensions::branch_at_current_bound@<X0>(TI::Favonius::SearchNodeLanguageThenGeometryExtensions *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 6);
  if (v3)
  {
    uint64_t v4 = this;
    uint64_t v5 = v3 - 1;
    uint64_t v6 = *((void *)this + 7);
    uint64_t v7 = *(void *)(v6 + 8 * (v3 - 1));
    if (v7)
    {
      atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
      uint64_t v3 = *((void *)this + 6);
      uint64_t v6 = *((void *)this + 7);
      uint64_t v5 = v3 - 1;
    }
    WTF::VectorDestructor<true,WTF::RefPtr<TI::Favonius::TypingHypothesis>>::destruct((unsigned int *)(v6 + 8 * v5), (unsigned int **)(v6 + 8 * v3));
    *((void *)v4 + 6) = v5;
    TI::Favonius::SearchNodeLanguageThenGeometryExtensions::set_bound_on_score(v4);
    uint64_t v8 = *((void *)v4 + 4);
    uint64_t v9 = *((void *)v4 + 2);
    uint64_t v10 = v9;
    if (v9) {
      atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
    }
    TI::Favonius::SearchNodeGeometryExtensionsInsertingKey::create(v8, &v10, v7);
  }
  *a2 = 0;
  return this;
}

void TI::Favonius::SearchNodeLanguageThenGeometryExtensions::clone_substituting_touch()
{
}

uint64_t TI::Favonius::SearchNodeLanguageThenGeometryExtensions::SearchNodeLanguageThenGeometryExtensions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(void *)a1 = &unk_1F3F77490;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::Vector((void *)(a1 + 48), (void *)(a2 + 48));
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  return a1;
}

void TI::Favonius::SearchNodeLanguageThenGeometryExtensions::~SearchNodeLanguageThenGeometryExtensions(TI::Favonius::SearchNodeLanguageThenGeometryExtensions *this)
{
  TI::Favonius::SearchNodeLanguageThenGeometryExtensions::~SearchNodeLanguageThenGeometryExtensions(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t vars8;

  *(void *)this = &unk_1F3F77490;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 48);
  uint64_t v2 = (unsigned int *)*((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }

  TI::Favonius::SearchNodeSource::~SearchNodeSource(this);
}

void TI::Favonius::SearchNodeLanguageThenGeometryExtensions::create()
{
}

uint64_t TI::Favonius::SearchNodeLanguageThenGeometryExtensions::SearchNodeLanguageThenGeometryExtensions(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, float a5)
{
  uint64_t v7 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(void *)a1 = &unk_1F3F77490;
  *(void *)(a1 + 32) = a2;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  uint64_t v8 = *(void *)(a1 + 32);
  *(float *)(a1 + 40) = a5;
  float v9 = *(float *)(v8 + 144) + (float)(a5 * *(float *)(v8 + 136));
  *(float *)(a1 + 44) = v9 + (*(float (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 73) = a4;
  TI::Favonius::SearchNodeLanguageThenGeometryExtensions::set_bound_on_score((TI::Favonius::SearchNodeLanguageThenGeometryExtensions *)a1);
  return a1;
}

void TI::Favonius::DictionaryHypothesis::create()
{
}

uint64_t TI::Favonius::DictionaryHypothesis::DictionaryHypothesis(uint64_t a1, atomic_uint **a2, const KB::String *a3)
{
  *(_DWORD *)a1 = 1;
  uint64_t v5 = *a2;
  *(void *)(a1 + 8) = *a2;
  atomic_fetch_add(v5, 1u);
  uint64_t v6 = KB::DictionaryCursors::DictionaryCursors((KB::DictionaryCursors *)(a1 + 16), *(const KB::DictionaryContainer **)(a1 + 8));
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 96) = _D0;
  if (*(_WORD *)a3)
  {
    float v12 = KB::DictionaryCursors::advance(v6, *(const KB::DictionaryContainer **)(a1 + 8), a3);
    *(float *)(a1 + 96) = v12;
    *(float *)(a1 + 100) = v12;
  }
  return a1;
}

float TI::Favonius::DictionaryHypothesis::termination_probability(const KB::DictionaryContainer **this)
{
  return KB::DictionaryCursors::termination_probability((KB::DictionaryCursors *)(this + 2), this[1]);
}

void TI::Favonius::DictionaryHypothesis::_words(uint64_t a1, uint64_t *a2, int a3, char a4, char a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (KB::SetOnlySearchSupplementalLexiconForScope::s_shouldOnlySearchSupplementalLexicon)
  {
    double v27 = 0;
    unsigned int v28 = 0;
    uint64_t v29 = 0;
    uint64_t v8 = *(const void **)(*(void *)(a1 + 72) + 40);
    float v33 = v8;
    if (v8)
    {
      CFRetain(v8);
      float v33 = v8;
      TI::Favonius::DictionaryHypothesis::merge_dynamic_words((TI::Favonius::DictionaryHypothesis *)a1, (uint64_t *)&v27, &v33, 5u, 0, a3, 0);
      CFRelease(v8);
    }
    else
    {
      TI::Favonius::DictionaryHypothesis::merge_dynamic_words((TI::Favonius::DictionaryHypothesis *)a1, (uint64_t *)&v27, &v33, 5u, 0, a3, 0);
    }
    std::vector<KB::Word>::__insert_with_size[abi:nn180100]<std::__wrap_iter<KB::Word*>,std::__wrap_iter<KB::Word*>>((KB::Word *)a2, a2[1], v27, v28, 0xEEEEEEEEEEEEEEEFLL * (((char *)v28 - (char *)v27) >> 4));
    uint64_t v34 = &v27;
  }
  else
  {
    double v27 = 0;
    unsigned int v28 = (size_t *)&v27;
    uint64_t v29 = 0x4002000000;
    uint64_t v30 = __Block_byref_object_copy__15156;
    float v31 = __Block_byref_object_dispose__15157;
    memset(v32, 0, sizeof(v32));
    KB::StaticDictionaryCursor::derive_words((KB::StaticDictionaryCursor *)(a1 + 16), (uint64_t)v32);
    KB::DictionaryCursors::probability_of_static_trie_given_termination((KB::DictionaryCursors *)(a1 + 16), *(const KB::DictionaryContainer **)(a1 + 8));
    float v12 = v28;
    size_t v13 = v28[5];
    if (v28[6] != v13)
    {
      float v14 = v11;
      uint64_t v15 = 0;
      unsigned int v16 = 1;
      do
      {
        uint64_t v17 = (float *)(v13 + 240 * v15);
        v17[12] = v14 * v17[12];
        unsigned int v18 = *(KB::DictionaryContainer **)(a1 + 8);
        if (*((void *)v18 + 4) && (*(unsigned char *)(v13 + 240 * v15 + 135) & 0x10) != 0)
        {
          TITokenID v19 = *(TITokenID *)(v13 + 240 * v15 + 136);
          KB::DictionaryContainer::affix_sentinel(v18, v19, 1, (uint64_t)&v34);
          uint64_t v20 = (unsigned __int16)v34;
          if (v35 && BYTE6(v34) == 1) {
            free(v35);
          }
          if (v20)
          {
            unsigned int v21 = *(unsigned __int16 *)v17;
            if (v21 >= v20)
            {
              uint64_t v22 = (unsigned __int16 *)*((void *)v17 + 1);
              if (!v22) {
                uint64_t v22 = (unsigned __int16 *)(v17 + 4);
              }
              KB::String::String((KB::String *)&v34, (const char *)v22 + v20, (unsigned __int16)(v21 - v20));
              KB::String::operator=((KB::String *)v17, (KB::String *)&v34);
              if (v35 && BYTE6(v34) == 1) {
                free(v35);
              }
            }
          }
        }
        uint64_t v15 = v16;
        float v12 = v28;
        size_t v13 = v28[5];
      }
      while (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v28[6] - v13) >> 4) > v16++);
    }
    if (a4)
    {
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 0x40000000;
      void v24[2] = ___ZNK2TI8Favonius20DictionaryHypothesis6_wordsERNSt3__16vectorIN2KB4WordENS2_9allocatorIS5_EEEEbbb_block_invoke;
      _OWORD v24[3] = &unk_1E6E2CC10;
      v24[4] = &v27;
      void v24[5] = a1;
      char v25 = a3;
      char v26 = a5;
      (*(void (**)(void, void *))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72), v24);
      float v12 = v28;
    }
    std::vector<KB::Word>::__insert_with_size[abi:nn180100]<std::__wrap_iter<KB::Word*>,std::__wrap_iter<KB::Word*>>((KB::Word *)a2, a2[1], (size_t *)v12[5], (size_t *)v12[6], 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v12[6] - v12[5]) >> 4));
    _Block_object_dispose(&v27, 8);
    uint64_t v34 = (size_t **)v32;
  }
  std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100]((void ***)&v34);
}

void TI::Favonius::DictionaryHypothesis::merge_dynamic_words(TI::Favonius::DictionaryHypothesis *a1, uint64_t *a2, void *a3, unsigned int a4, uint64_t a5, int a6, int a7)
{
  if (a4 != 5 || TITransientLexiconManagerIsSupplementalLexiconSearchEnabled())
  {
    if (*a3)
    {
      int HasEntries = LXCursorHasEntries();
      if (*a3)
      {
        if (HasEntries)
        {
          if (a4 > 2) {
            int v15 = 0;
          }
          else {
            int v15 = *(_DWORD *)((*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 1) + 24)
          }
                                                                         + 48))(*(void *)(*((void *)a1 + 1) + 24), a5)+ 160);
          uint64_t v25 = 0;
          char v26 = &v25;
          uint64_t v27 = 0x4002000000;
          unsigned int v28 = __Block_byref_object_copy__4;
          uint64_t v29 = __Block_byref_object_dispose__5;
          memset(v30, 0, sizeof(v30));
          LXCursorEnumerateEntries();
          int v16 = *(_DWORD *)(*(void *)(*((void *)a1 + 1) + 40) + 160);
          switch(a4)
          {
            case 0u:
              TITokenID v19 = v26 + 5;
              float v20 = TI::Favonius::DictionaryHypothesis::partial_probability_per_dynamic_usage(a1);
              TI::Favonius::DictionaryHypothesis::merge_persistent_custom_words(a2, v19, v15, v16, v20);
              break;
            case 1u:
            case 2u:
            case 3u:
              uint64_t v17 = v26 + 5;
              float v18 = TI::Favonius::DictionaryHypothesis::partial_probability_per_dynamic_usage(a1);
              TI::Favonius::DictionaryHypothesis::merge_transient_dynamic_words((KB::String **)a2, v17, a4, v15, v16, a6, a7, v18);
              break;
            case 4u:
              unsigned int v21 = (uint64_t **)(v26 + 5);
              float v22 = TI::Favonius::DictionaryHypothesis::partial_probability_per_dynamic_usage(a1);
              TI::Favonius::DictionaryHypothesis::merge_named_entity_words(a2, v21, v15, v16, a6, v22);
              break;
            case 5u:
              unsigned int v23 = (uint64_t **)(v26 + 5);
              float v24 = TI::Favonius::DictionaryHypothesis::partial_probability_per_dynamic_usage(a1);
              TI::Favonius::DictionaryHypothesis::merge_supplemental_item_words((uint64_t)a1, (uint64_t)a2, v23, v15, v16, v24);
              break;
            default:
              break;
          }
          _Block_object_dispose(&v25, 8);
          float v31 = (void **)v30;
          std::vector<KB::retain_ptr<__CFString const*>>::__destroy_vector::operator()[abi:nn180100](&v31);
        }
      }
    }
  }
}

__n128 __Block_byref_object_copy__15156(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__15157(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void ___ZNK2TI8Favonius20DictionaryHypothesis6_wordsERNSt3__16vectorIN2KB4WordENS2_9allocatorIS5_EEEEbbb_block_invoke(uint64_t a1, const void **a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(TI::Favonius::DictionaryHypothesis **)(a1 + 40);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  float v9 = (uint64_t *)(v8 + 40);
  uint64_t v10 = *a2;
  float v11 = v10;
  if (v10)
  {
    CFRetain(v10);
    float v11 = v10;
    TI::Favonius::DictionaryHypothesis::merge_dynamic_words(v7, v9, &v11, a3, a4, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));
    CFRelease(v10);
  }
  else
  {
    TI::Favonius::DictionaryHypothesis::merge_dynamic_words(v7, (uint64_t *)(v8 + 40), &v11, a3, a4, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));
  }
}

__n128 __Block_byref_object_copy__4(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<KB::retain_ptr<__CFString const*>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void ___ZNK2TI8Favonius20DictionaryHypothesis19merge_dynamic_wordsERNSt3__16vectorIN2KB4WordENS2_9allocatorIS5_EEEENS4_10retain_ptrIPK9_LXCursorEENS4_16DynamicEntryTypeEmbb_block_invoke(uint64_t a1, CFTypeRef cf)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 40);
  if (cf) {
    CFRetain(cf);
  }
  if (*(_DWORD *)(a1 + 48) == 5
    || (uint64_t v5 = *(void *)(v4 + 8),
        KB::Word::Word((uint64_t)v25, (uint64_t)cf, *(_DWORD *)(a1 + 52)),
        LOBYTE(v5) = KB::DynamicDictionary::is_word_in_supplemental_lexicon(*(KB::DynamicDictionary **)(v5 + 24), (const KB::String *)v25), KB::Word::~Word((KB::Word *)v25), (v5 & 1) == 0))
  {
    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v8 = (void *)v6[6];
    unint64_t v7 = v6[7];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v10 = (void *)v6[5];
      uint64_t v11 = v8 - v10;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        abort();
      }
      uint64_t v13 = v7 - (void)v10;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        int v15 = (char *)operator new(8 * v14);
      }
      else
      {
        int v15 = 0;
      }
      int v16 = &v15[8 * v11];
      *(void *)int v16 = cf;
      if (cf)
      {
        CFRetain(cf);
        *(void *)int v16 = cf;
        uint64_t v10 = (void *)v6[5];
        uint64_t v8 = (void *)v6[6];
      }
      uint64_t v17 = &v15[8 * v14];
      float v9 = v16 + 8;
      if (v8 == v10)
      {
        int64x2_t v19 = vdupq_n_s64((unint64_t)v8);
      }
      else
      {
        do
        {
          uint64_t v18 = *--v8;
          *uint64_t v8 = 0;
          *((void *)v16 - 1) = v18;
          v16 -= 8;
        }
        while (v8 != v10);
        int64x2_t v19 = *(int64x2_t *)(v6 + 5);
      }
      void v6[5] = v16;
      void v6[6] = v9;
      v6[7] = v17;
      uint64_t v21 = v19.i64[1];
      float v20 = (char *)v19.i64[0];
      if (v19.i64[1] != v19.i64[0])
      {
        float v22 = (char *)v19.i64[1];
        do
        {
          float v24 = (const void *)*((void *)v22 - 1);
          v22 -= 8;
          unsigned int v23 = v24;
          if (v24) {
            CFRelease(v23);
          }
          *(void *)(v21 - 8) = 0;
          uint64_t v21 = (uint64_t)v22;
        }
        while (v22 != v20);
      }
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *uint64_t v8 = cf;
      if (cf)
      {
        CFRetain(cf);
        *uint64_t v8 = cf;
      }
      float v9 = v8 + 1;
    }
    void v6[6] = v9;
  }
  if (cf) {
    CFRelease(cf);
  }
}

float TI::Favonius::DictionaryHypothesis::partial_probability_per_dynamic_usage(TI::Favonius::DictionaryHypothesis *this)
{
  unsigned int v2 = (*(uint64_t (**)(void, void))(**((void **)this + 9) + 88))(*((void *)this + 9), *(void *)(*((void *)this + 1) + 24));
  if (v2) {
    float v3 = 1.0 / (double)v2;
  }
  else {
    float v3 = 0.0;
  }
  KB::DictionaryCursors::probability_of_static_trie_given_termination((TI::Favonius::DictionaryHypothesis *)((char *)this + 16), *((const KB::DictionaryContainer **)this + 1));
  return v3 * (float)(1.0 - v4);
}

void TI::Favonius::DictionaryHypothesis::merge_transient_dynamic_words(KB::String **a1, uint64_t *a2, int a3, int a4, int a5, int a6, int a7, float a8)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int64x2_t v53 = 0uLL;
  std::string v54 = 0;
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v14 = v13 - *a2;
  if (v13 != *a2)
  {
    if ((unint64_t)v14 >= 0x888888888888889) {
      goto LABEL_82;
    }
    float v60 = &v54;
    int v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v14 >> 3);
    size_t __n = (size_t)v15;
    v58[0] = v15;
    uint64_t v17 = &v15[240 * v16];
    v58[1] = v15;
    unsigned int v59 = v17;
    uint64_t v18 = v53.i64[1];
    if (v53.i64[1] == v53.i64[0])
    {
      int64x2_t v20 = vdupq_n_s64(v53.u64[1]);
      uint64_t v19 = (uint64_t)v15;
    }
    else
    {
      uint64_t v19 = (uint64_t)v15;
      do
      {
        v19 -= 240;
        v18 -= 240;
        KB::Word::Word(v19, v18);
      }
      while (v18 != v53.i64[0]);
      int64x2_t v20 = v53;
      int v15 = (char *)v58[1];
      uint64_t v17 = v59;
    }
    v53.i64[0] = v19;
    v53.i64[1] = (uint64_t)v15;
    *(int64x2_t *)char v58 = v20;
    uint64_t v21 = v54;
    std::string v54 = v17;
    unsigned int v59 = v21;
    size_t __n = v20.i64[0];
    std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)&__n);
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
  }
  if (v13 == v12) {
    goto LABEL_81;
  }
  uint64_t v22 = 0;
  unsigned int v23 = 0;
  if (a3 == 2) {
    unsigned int v24 = 0x80000000;
  }
  else {
    unsigned int v24 = 0x10000;
  }
  if (a3 == 1) {
    int v25 = 0x20000;
  }
  else {
    int v25 = v24;
  }
  do
  {
    uint64_t v26 = *(void *)(v12 + 8 * v22);
    if (v26) {
      float v27 = (float)LXEntryGetUsageCount() * a8;
    }
    else {
      float v27 = 0.0;
    }
    if ((a3 - 1) <= 1)
    {
      if (TIIsLexiconIDEnglish(a4))
      {
LABEL_38:
        a4 = 0;
        goto LABEL_39;
      }
      KB::String::String((KB::String *)&__n, "'s");
      CFStringRef v28 = (const __CFString *)LXEntryCopyStoredString();
      KB::utf8_string(v28, (uint64_t)&v64);
      uint64_t v29 = (void *)v65.i64[0];
      if ((unsigned __int16)__n <= (unsigned __int16)v64)
      {
        float v31 = &v65.i8[8];
        if (v65.i64[0]) {
          float v31 = (__int8 *)v65.i64[0];
        }
        if (v58[0]) {
          uint64_t v32 = (const char *)v58[0];
        }
        else {
          uint64_t v32 = (const char *)&v58[1];
        }
        BOOL v30 = strncmp(&v31[(unsigned __int16)v64 - (unint64_t)(unsigned __int16)__n], v32, (unsigned __int16)__n) == 0;
        if (!v29)
        {
LABEL_32:
          if (v28) {
            CFRelease(v28);
          }
          if (v58[0] && BYTE6(__n) == 1) {
            free(v58[0]);
          }
          if (v30) {
            goto LABEL_80;
          }
          goto LABEL_38;
        }
      }
      else
      {
        BOOL v30 = 0;
        if (!v65.i64[0]) {
          goto LABEL_32;
        }
      }
      if (BYTE6(v64) == 1) {
        free(v29);
      }
      goto LABEL_32;
    }
LABEL_39:
    TI::Favonius::DictionaryHypothesis::word_from_dynamic_entry(v26, a3, a4, a5, (uint64_t)&__n, v27);
    if (a6)
    {
      if (v62)
      {
        TI::Favonius::DictionaryHypothesis::decapitalize_word_matching_previous_words((KB::String *)&__n, *a1, a1[1], a3);
      }
      else if ((v61 & 0x800012) == 0 && (v61 & 0x2080) != 0x80 && (v61 & 0x2042000) != 0x2000000)
      {
        TI::Favonius::DictionaryHypothesis::decapitalize_previous_words_matching_word(*a1, a1[1], (KB::String *)&__n);
      }
    }
    if (!a7 || (float v33 = *a1, v34 = a1[1], *a1 == v34))
    {
LABEL_62:
      if (v53.i64[1] < (unint64_t)v54)
      {
        uint64_t v40 = (char *)KB::Word::Word((KB::Word *)v53.i64[1], &__n) + 240;
LABEL_78:
        v53.i64[1] = (uint64_t)v40;
        goto LABEL_79;
      }
      unint64_t v41 = 0xEEEEEEEEEEEEEEEFLL * ((v53.i64[1] - v53.i64[0]) >> 4) + 1;
      if (v41 <= 0x111111111111111)
      {
        if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)&v54[-v53.i64[0]] >> 4) > v41) {
          unint64_t v41 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)&v54[-v53.i64[0]] >> 4);
        }
        if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v54[-v53.i64[0]] >> 4) >= 0x88888888888888) {
          unint64_t v42 = 0x111111111111111;
        }
        else {
          unint64_t v42 = v41;
        }
        uint64_t v67 = &v54;
        if (v42) {
          unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v42);
        }
        else {
          uint64_t v43 = 0;
        }
        size_t v44 = (KB::Word *)(v42 + 16 * ((v53.i64[1] - v53.i64[0]) >> 4));
        unint64_t v64 = v42;
        v65.i64[0] = (uint64_t)v44;
        unint64_t v66 = v42 + 240 * v43;
        KB::Word::Word(v44, &__n);
        uint64_t v40 = (char *)v44 + 240;
        v65.i64[1] = (uint64_t)v44 + 240;
        uint64_t v45 = v53.i64[1];
        uint64_t v46 = v65.i64[0];
        if (v53.i64[1] == v53.i64[0])
        {
          int64x2_t v47 = vdupq_n_s64(v53.u64[1]);
        }
        else
        {
          do
          {
            v45 -= 240;
            uint64_t v46 = KB::Word::Word(v46 - 240, v45);
          }
          while (v45 != v53.i64[0]);
          int64x2_t v47 = v53;
          uint64_t v40 = (char *)v65.i64[1];
        }
        v53.i64[0] = v46;
        v53.i64[1] = (uint64_t)v40;
        int64x2_t v65 = v47;
        unint64_t v48 = (unint64_t)v54;
        std::string v54 = (char *)v66;
        unint64_t v66 = v48;
        unint64_t v64 = v47.i64[0];
        std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)&v64);
        goto LABEL_78;
      }
LABEL_82:
      abort();
    }
    char v35 = 0;
    do
    {
      int v36 = *((_DWORD *)v33 + 26);
      if ((v36 & 0x40000) == 0 && (((v36 & 0x2000000) == 0) & v35) != 0) {
        goto LABEL_59;
      }
      KB::Word::capitalized_string(v33, (uint64_t)&v64);
      KB::Word::capitalized_string((KB::Word *)&__n, (uint64_t)v55);
      BOOL v37 = KB::String::equal((KB::String *)&v64, (const KB::String *)v55, 1);
      if (v56 && v55[6] == 1) {
        free(v56);
      }
      if (v65.i64[0] && BYTE6(v64) == 1) {
        free((void *)v65.i64[0]);
      }
      if (v37)
      {
        int v38 = *((_DWORD *)v33 + 26);
        *((float *)v33 + 12) = v27 + *((float *)v33 + 12);
        int v39 = v63 + *((_DWORD *)v33 + 31);
        *((_DWORD *)v33 + 31) = v39;
        *((_DWORD *)v33 + 26) = v38 & 0xFFFFDFFF | v25 | ((v39 != 0) << 13);
LABEL_59:
        char v35 = 1;
      }
      float v33 = (KB::String *)((char *)v33 + 240);
    }
    while (v33 != v34);
    if ((v35 & 1) == 0) {
      goto LABEL_62;
    }
LABEL_79:
    KB::Word::~Word((KB::Word *)&__n);
LABEL_80:
    uint64_t v12 = *a2;
    uint64_t v22 = ++v23;
  }
  while (v23 < (unint64_t)((a2[1] - *a2) >> 3));
LABEL_81:
  std::vector<KB::Word>::__insert_with_size[abi:nn180100]<std::__wrap_iter<KB::Word*>,std::__wrap_iter<KB::Word*>>((KB::Word *)a1, (uint64_t)a1[1], (size_t *)v53.i64[0], (size_t *)v53.i64[1], 0xEEEEEEEEEEEEEEEFLL * ((v53.i64[1] - v53.i64[0]) >> 4));
  size_t __n = (size_t)&v53;
  std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100]((void ***)&__n);
}

void TI::Favonius::DictionaryHypothesis::merge_persistent_custom_words(uint64_t *a1, uint64_t *a2, int a3, int a4, float a5)
{
  uint64_t v10 = *a1;
  float v11 = 0.0;
  while (v10 != a1[1])
  {
    if ((*(unsigned char *)(v10 + 106) & 4) != 0 && *(_DWORD *)(v10 + 136) == a3) {
      float v11 = v11 + *(float *)(v10 + 48);
    }
    v10 += 240;
  }
  if (a2[1] != *a2)
  {
    char v12 = v11 == 0.0;
    unsigned int v13 = 1;
    do
    {
      v12 |= LXEntryGetUsageCount() > 5;
      unint64_t v14 = v13;
      uint64_t v15 = *a2;
      uint64_t v16 = a2[1];
      ++v13;
    }
    while (v14 < (v16 - *a2) >> 3);
    if (v16 != v15)
    {
      unint64_t v17 = 0;
      unsigned int v18 = 1;
      do
      {
        float v11 = v11
            + TI::Favonius::DictionaryHypothesis::merge_persistent_custom_entry(a1, *(void *)(v15 + 8 * v17), a3, a4, v12 & 1, a5, v11);
        unint64_t v17 = v18;
        uint64_t v15 = *a2;
        ++v18;
      }
      while (v17 < (a2[1] - *a2) >> 3);
    }
  }
}

void TI::Favonius::DictionaryHypothesis::merge_named_entity_words(uint64_t *a1, uint64_t **a2, int a3, int a4, int a5, float a6)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v34 = a1 + 2;
    while (1)
    {
      uint64_t v12 = *v6;
      if (*v6) {
        break;
      }
LABEL_62:
      if (++v6 == v7) {
        return;
      }
    }
    float v13 = (float)LXEntryGetUsageCount() * a6;
    TI::Favonius::DictionaryHypothesis::word_from_dynamic_entry(v12, 4, a3, a4, (uint64_t)v42, v13);
    int v14 = _os_feature_enabled_impl();
    uint64_t v16 = *a1;
    uint64_t v15 = a1[1];
    if (v14)
    {
      while (v16 != v15)
      {
        if (KB::String::equal((KB::String *)v16, (const KB::String *)v42, 0)) {
          goto LABEL_61;
        }
        v16 += 240;
      }
      goto LABEL_48;
    }
    if (v16 == v15)
    {
      char v17 = 0;
      goto LABEL_31;
    }
    char v17 = 0;
    while (1)
    {
      KB::Word::capitalized_string((KB::Word *)v16, (uint64_t)&v45);
      KB::Word::capitalized_string((KB::Word *)v42, (uint64_t)v40);
      int v18 = *(_DWORD *)(v16 + 104);
      if ((v18 & 0x40000) != 0 || (((v18 & 0x2000000) == 0) & v17) == 0)
      {
        KB::Word::capitalized_string((KB::Word *)v16, (uint64_t)v38);
        KB::Word::capitalized_string((KB::Word *)v42, (uint64_t)v36);
        BOOL v19 = KB::String::equal((KB::String *)v38, (const KB::String *)v36, 1);
        if (v37 && v36[6] == 1) {
          free(v37);
        }
        if (v39 && v38[6] == 1) {
          free(v39);
        }
        if (!v19) {
          goto LABEL_21;
        }
        *(float *)(v16 + 48) = v13 + *(float *)(v16 + 48);
        *(_DWORD *)(v16 + 124) += v44;
        *(_DWORD *)(v16 + 104) = *(_DWORD *)(v16 + 104) & 0xFFFFDFFF | ((v44 != 0) << 13);
      }
      char v17 = 1;
LABEL_21:
      if (v41 && v40[6] == 1) {
        free(v41);
      }
      if (v46 && BYTE6(v45) == 1) {
        free(v46);
      }
      v16 += 240;
      if (v16 == v15)
      {
        if (v17) {
          goto LABEL_47;
        }
LABEL_31:
        if (!a5 || !v43)
        {
LABEL_47:
          if (v17)
          {
LABEL_61:
            KB::Word::~Word((KB::Word *)v42);
            goto LABEL_62;
          }
LABEL_48:
          int v25 = (KB::Word *)a1[1];
          unint64_t v26 = a1[2];
          if ((unint64_t)v25 >= v26)
          {
            unint64_t v28 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v25 - *a1) >> 4);
            unint64_t v29 = v28 + 1;
            if (v28 + 1 > 0x111111111111111) {
              abort();
            }
            unint64_t v30 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v26 - *a1) >> 4);
            if (2 * v30 > v29) {
              unint64_t v29 = 2 * v30;
            }
            if (v30 >= 0x88888888888888) {
              unint64_t v31 = 0x111111111111111;
            }
            else {
              unint64_t v31 = v29;
            }
            uint64_t v49 = v34;
            if (v31) {
              unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v31);
            }
            else {
              uint64_t v32 = 0;
            }
            float v33 = (char *)(v31 + 240 * v28);
            unint64_t v45 = v31;
            uint64_t v46 = v33;
            unint64_t v48 = v31 + 240 * v32;
            KB::Word::Word((KB::Word *)v33, v42);
            int64x2_t v47 = v33 + 240;
            std::vector<KB::Word>::__swap_out_circular_buffer(a1, &v45);
            float v27 = (char *)a1[1];
            std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)&v45);
          }
          else
          {
            float v27 = (char *)KB::Word::Word(v25, v42) + 240;
          }
          a1[1] = (uint64_t)v27;
          goto LABEL_61;
        }
        uint64_t v21 = *a1;
        uint64_t v20 = a1[1];
        while (2)
        {
          if (v21 == v20) {
            goto LABEL_47;
          }
          int v22 = *(_DWORD *)(v21 + 104);
          if ((v22 & 0x40000) != 0 || (((v22 & 0x2000000) == 0) & v17) == 0)
          {
            if (!KB::String::equal((KB::String *)v21, (const KB::String *)v42, 0)) {
              goto LABEL_46;
            }
            int v23 = *(_DWORD *)(v21 + 104);
            if ((v23 & 0x84) != 0 || *(_DWORD *)(v21 + 120))
            {
              char v24 = BYTE4(v42[0]);
              if (!WORD2(v42[0]))
              {
                KB::String::compute_length((unsigned __int16 *)v42);
                char v24 = BYTE4(v42[0]);
              }
              if (((-1 << v24) | v43) == 0xFFFFFFFF)
              {
                int v23 = *(_DWORD *)(v21 + 104);
                goto LABEL_44;
              }
LABEL_46:
              v21 += 240;
              continue;
            }
LABEL_44:
            *(float *)(v21 + 48) = v13 + *(float *)(v21 + 48);
            *(_DWORD *)(v21 + 124) += v44;
            *(_DWORD *)(v21 + 104) = v23 & 0xFFFFDFFF | ((v44 != 0) << 13);
          }
          break;
        }
        char v17 = 1;
        goto LABEL_46;
      }
    }
  }
}

void TI::Favonius::DictionaryHypothesis::merge_supplemental_item_words(uint64_t a1, uint64_t a2, uint64_t **a3, int a4, int a5, float a6)
{
  v35[30] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  unint64_t v7 = a3[1];
  if (*a3 != v7)
  {
    uint64_t v33 = a2 + 16;
    do
    {
      uint64_t v13 = *v6;
      if (*v6)
      {
        UsageCFIndex Count = LXEntryGetUsageCount();
        TI::Favonius::DictionaryHypothesis::word_from_dynamic_entry(v13, 5, a4, a5, (uint64_t)v35, (float)UsageCount * a6);
        uint64_t v16 = *(_LXLexicon **)a2;
        char v17 = *(_LXLexicon **)(a2 + 8);
        uint64_t v18 = (uint64_t)v17;
        if (*(_LXLexicon **)a2 != v17)
        {
          while (KB::CollatorWrapper::sortkey_compare_strings((KB::CollatorWrapper **)(*(void *)(*(void *)(a1 + 8) + 8) + 72), v16, (const KB::String *)v35, v15))
          {
            uint64_t v16 = (_LXLexicon *)((char *)v16 + 240);
            if (v16 == v17) {
              goto LABEL_14;
            }
          }
        }
        if (v16 != v17)
        {
          BOOL v19 = (_LXLexicon *)((char *)v16 + 240);
          uint64_t v18 = (uint64_t)v16;
          while (v19 != v17)
          {
            if (KB::CollatorWrapper::sortkey_compare_strings((KB::CollatorWrapper **)(*(void *)(*(void *)(a1 + 8) + 8) + 72), v19, (const KB::String *)v35, v15))
            {
              KB::String::operator=(v18, (KB::String *)v19);
              KB::ByteString::operator=((unsigned __int16 *)(v18 + 32), (unsigned __int16 *)v19 + 16);
              uint64_t v20 = *((void *)v19 + 6);
              *(_DWORD *)(v18 + 56) = *((_DWORD *)v19 + 14);
              *(void *)(v18 + 48) = v20;
              KB::String::operator=(v18 + 64, (KB::String *)((char *)v19 + 64));
              long long v21 = *((_OWORD *)v19 + 6);
              long long v22 = *((_OWORD *)v19 + 7);
              long long v23 = *((_OWORD *)v19 + 9);
              *(_OWORD *)(v18 + 128) = *((_OWORD *)v19 + 8);
              *(_OWORD *)(v18 + 144) = v23;
              *(_OWORD *)(v18 + 96) = v21;
              *(_OWORD *)(v18 + 112) = v22;
              KB::String::operator=(v18 + 160, (KB::String *)((char *)v19 + 160));
              *(unsigned char *)(v18 + 192) = *((unsigned char *)v19 + 192);
              std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign(v18 + 200, (uint64_t *)v19 + 25);
              v18 += 240;
            }
            BOOL v19 = (_LXLexicon *)((char *)v19 + 240);
          }
        }
LABEL_14:
        std::vector<KB::Word>::erase(a2, v18, *(KB::Word **)(a2 + 8));
        char v24 = *(KB::Word **)(a2 + 8);
        unint64_t v25 = *(void *)(a2 + 16);
        if ((unint64_t)v24 >= v25)
        {
          unint64_t v27 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v24 - *(void *)a2) >> 4);
          unint64_t v28 = v27 + 1;
          if (v27 + 1 > 0x111111111111111) {
            abort();
          }
          unint64_t v29 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v25 - *(void *)a2) >> 4);
          if (2 * v29 > v28) {
            unint64_t v28 = 2 * v29;
          }
          if (v29 >= 0x88888888888888) {
            unint64_t v30 = 0x111111111111111;
          }
          else {
            unint64_t v30 = v28;
          }
          void v34[4] = v33;
          if (v30) {
            unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v30);
          }
          else {
            uint64_t v31 = 0;
          }
          uint64_t v32 = (KB::Word *)(v30 + 240 * v27);
          v34[0] = v30;
          v34[1] = v32;
          void v34[3] = v30 + 240 * v31;
          KB::Word::Word(v32, v35);
          _OWORD v34[2] = (char *)v32 + 240;
          std::vector<KB::Word>::__swap_out_circular_buffer((uint64_t *)a2, v34);
          unint64_t v26 = *(char **)(a2 + 8);
          std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)v34);
        }
        else
        {
          unint64_t v26 = (char *)KB::Word::Word(v24, v35) + 240;
        }
        *(void *)(a2 + 8) = v26;
        KB::Word::~Word((KB::Word *)v35);
      }
      ++v6;
    }
    while (v6 != v7);
  }
}

void TI::Favonius::DictionaryHypothesis::word_from_dynamic_entry(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, float a6@<S0>)
{
  KB::Word::Word(a5, a1, a3);
  *(_DWORD *)(a5 + 104) &= 0xFFFFFF79;
  if ((a3 + 1) >= 2 && a3 != a4) {
    *(unsigned char *)(a5 + 192) = 1;
  }
  KB::Word::move_capitalization_to_bits((KB::Word *)a5);
  switch(a2)
  {
    case 0:
      unsigned int v11 = *(_DWORD *)(a5 + 104) & 0xFFFFDFFF | ((*(_DWORD *)(a5 + 124) > 1u) << 13) | 0x2000000;
      goto LABEL_16;
    case 1:
      unsigned int v11 = *(_DWORD *)(a5 + 104) | 0x20000;
      goto LABEL_16;
    case 2:
      unsigned int v11 = *(_DWORD *)(a5 + 104) | 0x80000000;
      goto LABEL_16;
    case 3:
      unsigned int v11 = *(_DWORD *)(a5 + 104) | 0x10000;
      goto LABEL_16;
    case 4:
      unsigned int v11 = *(_DWORD *)(a5 + 104) | 0x100;
      goto LABEL_16;
    case 5:
      TILXEntryGetSupplementalItemIdentifiers((uint64_t)v13);
      if ((unsigned char *)(a5 + 200) != v13)
      {
        *(_DWORD *)(a5 + 232) = v15;
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((void *)(a5 + 200), v14);
      }
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)v13);
      if (TILXEntryIsPartOfHyphenatedWord()) {
        int v12 = 16;
      }
      else {
        int v12 = 0;
      }
      unsigned int v11 = *(_DWORD *)(a5 + 104) & 0xFFFFFFEF | v12;
LABEL_16:
      *(_DWORD *)(a5 + 104) = v11;
      break;
    default:
      break;
  }
  *(float *)(a5 + 48) = a6;
  *(_DWORD *)(a5 + 140) = 0;
}

float TI::Favonius::DictionaryHypothesis::merge_persistent_custom_entry(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, float a6, float a7)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  UsageCFIndex Count = LXEntryGetUsageCount();
  float v15 = (float)UsageCount * a6;
  KB::Word::Word((uint64_t)v60, a2, a3);
  KB::Word::capitalized_string((KB::Word *)v60, (uint64_t)v58);
  BOOL v51 = 0;
  uint64_t v16 = TI::Favonius::DictionaryHypothesis::best_static_match_for_dynamic_string(a1, (KB::String *)v58, a3, &v51);
  if (a1[1] == v16) {
    goto LABEL_19;
  }
  uint64_t v18 = v16;
  float v19 = 0.0;
  if (KB::string_has_only_uppercase_characters((KB *)v58, v17)) {
    goto LABEL_59;
  }
  int v20 = *(_DWORD *)(v18 + 104);
  BOOL v21 = v51;
  if ((v20 & 0x84) != 0 && !v51)
  {
LABEL_19:
    if (a7 != 0.0 && !TI::Favonius::DictionaryHypothesis::should_create_word_from_persistent_custom_entry(a2, a5))
    {
      uint64_t v35 = *a1;
      uint64_t v36 = a1[1];
      while (v35 != v36)
      {
        if ((*(unsigned char *)(v35 + 106) & 4) != 0 && *(_DWORD *)(v35 + 136) == a3) {
          *(float *)(v35 + 48) = *(float *)(v35 + 48) + (float)(v15 * (float)(*(float *)(v35 + 48) / a7));
        }
        v35 += 240;
      }
      goto LABEL_58;
    }
    TI::Favonius::DictionaryHypothesis::word_from_dynamic_entry(a2, 0, a3, a4, (uint64_t)v57, v15);
    unint64_t v27 = a1[2];
    unint64_t v28 = a1[1];
    if (v28 >= v27)
    {
      unint64_t v30 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v28 - *a1) >> 4);
      if (v30 + 1 > 0x111111111111111) {
        goto LABEL_66;
      }
      unint64_t v31 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v27 - *a1) >> 4);
      uint64_t v32 = 2 * v31;
      if (2 * v31 <= v30 + 1) {
        uint64_t v32 = v30 + 1;
      }
      if (v31 >= 0x88888888888888) {
        unint64_t v33 = 0x111111111111111;
      }
      else {
        unint64_t v33 = v32;
      }
      int v56 = a1 + 2;
      if (v33) {
        unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v33);
      }
      else {
        uint64_t v34 = 0;
      }
      uint64_t v37 = v33 + 240 * v30;
      unint64_t v52 = v33;
      uint64_t v53 = v37;
      unint64_t v55 = v33 + 240 * v34;
      KB::Word::Word(v37, (uint64_t)v57);
      uint64_t v54 = v37 + 240;
      std::vector<KB::Word>::__swap_out_circular_buffer(a1, &v52);
      uint64_t v29 = a1[1];
      std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)&v52);
    }
    else
    {
      uint64_t v29 = KB::Word::Word(v28, (uint64_t)v57) + 240;
    }
    a1[1] = v29;
    KB::Word::~Word((KB::Word *)v57);
    float v19 = 0.0;
    goto LABEL_59;
  }
  if ((v20 & 0x80) != 0) {
    unsigned int v23 = 2;
  }
  else {
    unsigned int v23 = 1;
  }
  if (a5)
  {
    *(float *)(v18 + 48) = v15 + *(float *)(v18 + 48);
  }
  else
  {
    uint64_t v38 = *a1;
    uint64_t v39 = a1[1];
    while (v38 != v39)
    {
      if ((*(unsigned char *)(v38 + 106) & 4) != 0 && *(_DWORD *)(v38 + 136) == a3) {
        *(float *)(v38 + 48) = *(float *)(v38 + 48) + (float)(v15 * (float)(*(float *)(v38 + 48) / a7));
      }
      v38 += 240;
    }
  }
  if (v21)
  {
    *(_DWORD *)(v18 + 124) = UsageCount;
    *(_DWORD *)(v18 + 128) = LXEntryGetPenaltyCount();
    unsigned int MetaFlags = LXEntryGetMetaFlags();
    int v25 = *(_DWORD *)(v18 + 104);
    unsigned int v26 = v25 & 0xFBFFFFFF | (((MetaFlags >> 26) & 1) << 26);
    *(_DWORD *)(v18 + 104) = v26;
    if (!*(_DWORD *)(v18 + 140)) {
      *(void *)(v18 + 136) = v61;
    }
    if (UsageCount > v23 && (v25 & 0x2000) == 0) {
      *(_DWORD *)(v18 + 104) = v26 | 0x2000;
    }
    goto LABEL_58;
  }
  TI::Favonius::DictionaryHypothesis::word_from_dynamic_entry(a2, 0, a3, a4, (uint64_t)v57, 0.0);
  unint64_t v40 = a1[2];
  unint64_t v41 = a1[1];
  if (v41 >= v40)
  {
    unint64_t v43 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v41 - *a1) >> 4);
    if (v43 + 1 <= 0x111111111111111)
    {
      unint64_t v44 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v40 - *a1) >> 4);
      uint64_t v45 = 2 * v44;
      if (2 * v44 <= v43 + 1) {
        uint64_t v45 = v43 + 1;
      }
      if (v44 >= 0x88888888888888) {
        unint64_t v46 = 0x111111111111111;
      }
      else {
        unint64_t v46 = v45;
      }
      int v56 = a1 + 2;
      if (v46) {
        unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v46);
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v48 = v46 + 240 * v43;
      unint64_t v52 = v46;
      uint64_t v53 = v48;
      unint64_t v55 = v46 + 240 * v47;
      KB::Word::Word(v48, (uint64_t)v57);
      uint64_t v54 = v48 + 240;
      std::vector<KB::Word>::__swap_out_circular_buffer(a1, &v52);
      uint64_t v42 = a1[1];
      std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)&v52);
      goto LABEL_57;
    }
LABEL_66:
    abort();
  }
  uint64_t v42 = KB::Word::Word(v41, (uint64_t)v57) + 240;
LABEL_57:
  a1[1] = v42;
  KB::Word::~Word((KB::Word *)v57);
LABEL_58:
  float v19 = v15;
LABEL_59:
  if (v59) {
    BOOL v49 = v58[6] == 1;
  }
  else {
    BOOL v49 = 0;
  }
  if (v49) {
    free(v59);
  }
  KB::Word::~Word((KB::Word *)v60);
  return v19;
}

uint64_t TI::Favonius::DictionaryHypothesis::best_static_match_for_dynamic_string(uint64_t *a1, KB::String *a2, int a3, BOOL *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    uint64_t v10 = a1[1];
    while (1)
    {
      if ((*(unsigned char *)(v6 + 106) & 4) != 0
        && (a3 == -2 || *(_DWORD *)(v6 + 136) == a3)
        && KB::String::equal((KB::String *)v6, a2, 0))
      {
        KB::Word::capitalized_string((KB::Word *)v6, (uint64_t)v15);
        if (v15 == (unsigned char *)a2)
        {
          int v14 = (void *)*((void *)a2 + 1);
          if (v14 && *((unsigned char *)a2 + 6) == 1) {
            free(v14);
          }
          goto LABEL_18;
        }
        BOOL v11 = KB::String::equal((KB::String *)v15, a2, 1);
        if (v16 && v15[6] == 1) {
          free(v16);
        }
        if (v11) {
          goto LABEL_18;
        }
        if (!*(_DWORD *)(v6 + 120)) {
          uint64_t v10 = v6;
        }
      }
      v6 += 240;
      if (v6 == a1[1]) {
        goto LABEL_17;
      }
    }
  }
  uint64_t v10 = a1[1];
LABEL_17:
  uint64_t v6 = v7;
LABEL_18:
  uint64_t v12 = a1[1];
  if (a4) {
    *a4 = v6 != v12;
  }
  if (v6 == v12) {
    return v10;
  }
  else {
    return v6;
  }
}

BOOL TI::Favonius::DictionaryHypothesis::should_create_word_from_persistent_custom_entry(uint64_t a1, char a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  UsageCFIndex Count = LXEntryGetUsageCount();
  if ((a2 & 1) == 0 && UsageCount < 3) {
    return 0;
  }
  CFStringRef v5 = (const __CFString *)LXEntryCopyStoredString();
  KB::utf8_string(v5, (uint64_t)v8);
  BOOL v4 = !KB::string_has_word_medial_punctuation((KB *)v8, v6);
  if (v9 && v8[6] == 1) {
    free(v9);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v4;
}

uint64_t TI::Favonius::DictionaryHypothesis::decapitalize_word_matching_previous_words(KB::String *a1, KB::String *a2, KB::String *a3, int a4)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  uint64_t v10 = ___ZN2TI8Favonius20DictionaryHypothesis41decapitalize_word_matching_previous_wordsERN2KB4WordENSt3__111__wrap_iterIPKS3_EES9_NS2_16DynamicEntryTypeE_block_invoke;
  BOOL v11 = &__block_descriptor_tmp_2_15162;
  int v13 = a4;
  uint64_t v12 = a1;
  if (a2 == a3) {
    return 0;
  }
  CFStringRef v5 = a2;
  while ((((uint64_t (*)(void *, KB::String *))v10)(v9, v5) & 1) == 0)
  {
    CFStringRef v5 = (KB::String *)((char *)v5 + 240);
    if (v5 == a3) {
      return 0;
    }
  }
  if (v5 == a3) {
    return 0;
  }
  *((_DWORD *)a1 + 30) = 0;
  *((_DWORD *)a1 + 26) &= ~1u;
  KB::String::operator=(a1, v5);
  int v7 = *((_DWORD *)v5 + 30);
  *((_DWORD *)a1 + 30) = v7;
  *((_DWORD *)a1 + 26) = *((_DWORD *)a1 + 26) & 0xFFFFFFFE | (v7 == 1);
  return 1;
}

KB::String *TI::Favonius::DictionaryHypothesis::decapitalize_previous_words_matching_word(KB::String *this, KB::String *a2, KB::String *a3)
{
  if (this != a2)
  {
    CFStringRef v5 = this;
    do
    {
      if (*(_WORD *)v5)
      {
        this = (KB::String *)KB::String::equal(v5, a3, 0);
        if (this)
        {
          *((_DWORD *)v5 + 30) = 0;
          *((_DWORD *)v5 + 26) &= ~1u;
          this = KB::String::operator=(v5, a3);
        }
      }
      CFStringRef v5 = (KB::String *)((char *)v5 + 240);
    }
    while (v5 != a2);
  }
  return this;
}

BOOL ___ZN2TI8Favonius20DictionaryHypothesis41decapitalize_word_matching_previous_wordsERN2KB4WordENSt3__111__wrap_iterIPKS3_EES9_NS2_16DynamicEntryTypeE_block_invoke(uint64_t a1, KB::String *this)
{
  return *(_WORD *)this
      && (!*((_DWORD *)this + 30) || (*(_DWORD *)(a1 + 40) - 1) <= 1)
      && (*((_DWORD *)this + 26) & 2) == 0
      && (*((_DWORD *)this + 26) & 0x2080) != 0x80
      && KB::String::equal(this, *(const KB::String **)(a1 + 32), 0);
}

void TI::Favonius::DictionaryHypothesis::words(uint64_t a1, uint64_t *a2, char a3, int a4)
{
}

void TI::Favonius::DictionaryHypothesis::static_words(uint64_t a1, uint64_t *a2)
{
}

void TI::Favonius::DictionaryHypothesis::affix_sentinel(TI::Favonius::DictionaryHypothesis *this@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(*((void *)this + 1) + 32))
  {
    uint64_t v4 = *((void *)this + 7);
    if (v4)
    {
      uint64_t v5 = 8 * v4 - 8;
      uint64_t v6 = (char *)this + 16;
      do
      {
        v6 += 8;
        int v7 = LXCursorTerminatesWordStem();
        if (v7) {
          BOOL v8 = 1;
        }
        else {
          BOOL v8 = v5 == 0;
        }
        v5 -= 8;
      }
      while (!v8);
      if (v7) {
        KB::StaticDictionaryCursor::derive_word_ids((uint64_t)this + 16);
      }
    }
  }
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
}

void TI::Favonius::DictionaryHypothesis::extend(TI::Favonius::DictionaryHypothesis *this)
{
}

TI::Favonius::DictionaryHypothesis *TI::Favonius::DictionaryHypothesis::DictionaryHypothesis(TI::Favonius::DictionaryHypothesis *this, const TI::Favonius::DictionaryHypothesis *a2, unsigned int a3)
{
  *(_DWORD *)this = 1;
  uint64_t v6 = (atomic_uint *)*((void *)a2 + 1);
  *((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  int v7 = KB::DictionaryCursors::DictionaryCursors((TI::Favonius::DictionaryHypothesis *)((char *)this + 16), (const TI::Favonius::DictionaryHypothesis *)((char *)a2 + 16));
  float v8 = KB::DictionaryCursors::advance(v7, *((const KB::DictionaryContainer **)this + 1), a3);
  float v9 = v8 * *((float *)a2 + 25);
  *((float *)this + 24) = v8;
  *((float *)this + 25) = v9;
  return this;
}

void TI::Favonius::DictionaryHypothesis::extensions(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (!KB::SetInputHasSupplementalPrefixForScope::s_inputHasSupplementalPrefix) {
    KB::DictionaryCursors::fill_vector_with_static_trie_children((KB::StaticDictionaryCursor *)(a1 + 16), (uint64_t *)&v4, *(void *)(a1 + 8));
  }
  KB::DictionaryCursors::merge_dynamic_children_with_static_siblings((KB::DictionaryCursors *)(a1 + 16), &v4, *(const KB::DictionaryContainer **)(a1 + 8));
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, *a2 - 0x3333333333333333 * ((v5 - v4) >> 4));
  if (v5 != v4) {
    operator new();
  }
  if (v5) {
    operator delete(v5);
  }
}

TI::Favonius::DictionaryHypothesis *TI::Favonius::DictionaryHypothesis::DictionaryHypothesis(TI::Favonius::DictionaryHypothesis *this, const TI::Favonius::DictionaryHypothesis *a2, const KB::DictionaryCursors *a3)
{
  *(_DWORD *)this = 1;
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 1);
  *((void *)this + 1) = v5;
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t v6 = KB::DictionaryCursors::DictionaryCursors((TI::Favonius::DictionaryHypothesis *)((char *)this + 16), a3);
  uint64_t v7 = *((void *)a2 + 1);
  float v8 = *((float *)this + 21);
  float v9 = KB::StaticDictionaryCursor::conditional_probability(v6);
  if (*((_DWORD *)this + 20)) {
    double v10 = (float)((float)(*(unsigned int (**)(void, void))(**((void **)this + 9) + 80))(*((void *)this + 9), *(void *)(v7 + 24))/ (float)*((unsigned int *)this + 20));
  }
  else {
    double v10 = 0.0;
  }
  float v11 = (float)(v8 * v9) + (1.0 - v8) * v10;
  float v12 = *((float *)a2 + 25) * v11;
  *((float *)this + 24) = v11;
  *((float *)this + 25) = v12;
  return this;
}

uint64_t TI::Favonius::DictionaryHypothesis::merge_probability_into_static_words(uint64_t result, uint64_t a2, int a3, float a4, float a5)
{
  while (result != a2)
  {
    if ((*(unsigned char *)(result + 106) & 4) != 0 && *(_DWORD *)(result + 136) == a3) {
      *(float *)(result + 48) = *(float *)(result + 48) + (float)((float)(*(float *)(result + 48) / a5) * a4);
    }
    result += 240;
  }
  return result;
}

void KB::DictionaryContainer::create()
{
}

void KB::DictionaryContainer::DictionaryContainer(KB::StaticDictionary *a1)
{
  *(_DWORD *)a1 = 1;
  KB::StaticDictionary::create(a1);
}

void *KB::DictionaryContainer::load_dynamic_dict(void *this, uint64_t a2)
{
  unsigned int v2 = this + 5;
  if (this[5] != this[6])
  {
    float v3 = this;
    this = (void *)this[3];
    if (this)
    {
      if (((*(uint64_t (**)(void *))(*this + 32))(this) & 1) == 0)
      {
        (*(void (**)(void, void *, uint64_t))(*(void *)v3[3] + 40))(v3[3], v2, a2);
        KB::DynamicDictionary::load_address_book((KB::DynamicDictionary *)v3[3]);
        KB::DynamicDictionary::load_app_names((KB::DynamicDictionary *)v3[3]);
        TITransientLexiconManagerLoad();
      }
      uint64_t v5 = (void *)v3[3];
      return KB::DynamicDictionary::load_user_dictionary(v5);
    }
  }
  return this;
}

void KB::DictionaryContainer::create_multilexicon()
{
}

void KB::DictionaryContainer::~DictionaryContainer(KB::DictionaryContainer *this)
{
  if (*((void *)this + 4))
  {
    LMLexiconIDConverterDestroy();
    *((void *)this + 4) = 0;
  }
  float v3 = (void **)((char *)this + 40);
  std::vector<KB::LexiconInfo>::__destroy_vector::operator()[abi:nn180100](&v3);
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<KB::StaticDictionary>::reset[abi:nn180100]((const void ****)this + 2, 0);
  std::unique_ptr<KB::StaticDictionary>::reset[abi:nn180100]((const void ****)this + 1, 0);
}

void KB::DictionaryContainer::suspend_dynamic_dict(KB::DictionaryContainer *this)
{
  uint64_t v1 = *((void *)this + 3);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 32);
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
}

uint64_t KB::DictionaryContainer::lookup@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (**(void **)(this + 8) != *(void *)(*(void *)(this + 8) + 8))
  {
    uint64_t v3 = this;
    atomic_fetch_add((atomic_uint *volatile)this, 1u);
    operator new();
  }
  return this;
}

void KB::DictionaryContainer::_probability_of_word_with_string_and_id(atomic_uint *this, const KB::String *a2, const TITokenID *a3)
{
  uint64_t v3 = this;
  if (this) {
    atomic_fetch_add(this, 1u);
  }
  operator new();
}

BOOL ___ZNK2KB19DictionaryContainer39_probability_of_word_with_string_and_idERKNS_6StringERK9TITokenIDb_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 136) == **(void **)(a1 + 32);
}

void KB::DictionaryContainer::probability_of_word_with_string_and_id(atomic_uint *this, const KB::String *a2, const TITokenID *a3)
{
}

void KB::DictionaryContainer::static_probability_of_word_with_string_and_id(atomic_uint *this, const KB::String *a2, const TITokenID *a3)
{
}

uint64_t KB::DictionaryContainer::is_word_in_supplemental_lexicon(KB::DynamicDictionary **this, const KB::String *a2)
{
  return KB::DynamicDictionary::is_word_in_supplemental_lexicon(this[3], a2);
}

void KB::DictionaryContainer::word_with_string(KB::DictionaryContainer *this@<X0>, const KB::String *a2@<X1>, int a3@<W2>, KB::Word *a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  KB::StaticDictionary::word_with_string(*((KB::StaticDictionary **)this + 1), a2, a3, (KB::Word *)v8);
  KB::DynamicDictionary::word_with_string((KB::DynamicDictionary *)v7, *((const String **)this + 3), (uint64_t)a2);
  combine_words(a4, v8, (KB::Word *)v7);
  KB::Word::~Word((KB::Word *)v7);
  KB::Word::~Word((KB::Word *)v8);
}

double combine_words(KB::Word *this, _WORD *a2, KB::Word *a3)
{
  int v5 = *(unsigned __int16 *)a3;
  if (*a2)
  {
    KB::Word::Word((uint64_t)this, (uint64_t)a2);
    if (!v5) {
      return result;
    }
    double result = *(double *)((char *)a3 + 124);
    *(double *)((char *)this + 124) = result;
    *((_DWORD *)this + 26) = *((_DWORD *)this + 26) & 0x7DFCFEFF | *((_DWORD *)a3 + 26) & 0x82030100;
    if (this != a3)
    {
      *((_DWORD *)this + 58) = *((_DWORD *)a3 + 58);
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((void *)this + 25, *((void **)a3 + 27));
    }
    if (*((void *)a3 + 28)) {
      return result;
    }
    unsigned int v8 = *((_DWORD *)a3 + 31);
    unsigned int v7 = *((_DWORD *)a3 + 32);
    BOOL v9 = v8 >= v7;
    unsigned int v10 = v8 - v7;
    if (!v9 || v10 < 3) {
      return result;
    }
LABEL_15:
    *((_DWORD *)this + 26) |= 0x2000u;
    return result;
  }
  if (*(_WORD *)a3)
  {
    KB::Word::Word((uint64_t)this, (uint64_t)a3);
    if (*((void *)this + 28)) {
      return result;
    }
    unsigned int v12 = *((_DWORD *)this + 31);
    unsigned int v11 = *((_DWORD *)this + 32);
    BOOL v9 = v12 >= v11;
    unsigned int v13 = v12 - v11;
    if (!v9 || v13 < 2) {
      return result;
    }
    goto LABEL_15;
  }
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;

  return KB::Word::Word(this);
}

void KB::DictionaryContainer::word_with_string_exhaustive(KB::DictionaryContainer *this@<X0>, const KB::String *a2@<X1>, int a3@<W2>, KB::Word *a4@<X8>)
{
  void v20[5] = *MEMORY[0x1E4F143B8];
  KB::StaticDictionary::word_with_string(*((KB::StaticDictionary **)this + 1), a2, a3, (KB::Word *)v14);
  if (!v14[0])
  {
    KB::DictionaryContainer::closest_static_match(this, a2, (KB::Word *)v7);
    KB::String::operator=((uint64_t)v14, (KB::String *)v7);
    if ((unsigned __int16)v15 >= 0xFu && *((void *)&v15 + 1)) {
      MEMORY[0x1E4E7BC00](*((void *)&v15 + 1), 0x1000C8077774924);
    }
    long long v15 = v8;
    if ((unsigned __int16)v8 >= 0xFu) {
      LOWORD(v8) = 0;
    }
    uint64_t v16 = v9;
    int v17 = v10;
    KB::String::operator=((uint64_t)v18, (KB::String *)v11);
    _OWORD v18[2] = v11[2];
    _WORD v18[3] = v11[3];
    void v18[4] = v11[4];
    void v18[5] = v11[5];
    KB::String::operator=((uint64_t)v19, (KB::String *)v12);
    v19[32] = v12[32];
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign((uint64_t)v20, v13);
    KB::Word::~Word((KB::Word *)v7);
  }
  KB::DynamicDictionary::word_with_string((KB::DynamicDictionary *)v7, *((const String **)this + 3), (uint64_t)a2);
  combine_words(a4, v14, (KB::Word *)v7);
  KB::Word::~Word((KB::Word *)v7);
  KB::Word::~Word((KB::Word *)v14);
}

void KB::DictionaryContainer::closest_static_match(KB::DictionaryContainer *this@<X0>, const KB::String *a2@<X1>, KB::Word *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  uint64_t v13 = 0;
  KB::DictionaryContainer::derive_static_words(this, (uint64_t *)&v11, (unsigned __int16 *)a2);
  int v5 = v11;
  uint64_t v6 = v12;
  if (v11 == v12)
  {
LABEL_7:
    *((_OWORD *)a3 + 13) = 0u;
    *((_OWORD *)a3 + 14) = 0u;
    *((_OWORD *)a3 + 11) = 0u;
    *((_OWORD *)a3 + 12) = 0u;
    *((_OWORD *)a3 + 9) = 0u;
    *((_OWORD *)a3 + 10) = 0u;
    *((_OWORD *)a3 + 7) = 0u;
    *((_OWORD *)a3 + 8) = 0u;
    *((_OWORD *)a3 + 5) = 0u;
    *((_OWORD *)a3 + 6) = 0u;
    *((_OWORD *)a3 + 3) = 0u;
    *((_OWORD *)a3 + 4) = 0u;
    *((_OWORD *)a3 + 1) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *(_OWORD *)a3 = 0u;
    KB::Word::Word(a3);
  }
  else
  {
    while (!KB::String::equal((KB::String *)v5, a2, 0))
    {
      v5 += 240;
      if (v5 == v6)
      {
        int v5 = v11;
        unsigned int v7 = v12;
        if (v11 == v12) {
          goto LABEL_7;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
        {
          long long v8 = (char *)a2 + 16;
          if (*((void *)a2 + 1)) {
            long long v8 = (const char *)*((void *)a2 + 1);
          }
          uint64_t v9 = "";
          if (*(_WORD *)a2) {
            int v10 = v8;
          }
          else {
            int v10 = "";
          }
          if (*(_WORD *)v5)
          {
            uint64_t v9 = (const char *)*((void *)v5 + 1);
            if (!v9) {
              uint64_t v9 = v5 + 16;
            }
          }
          *(void *)&uint8_t buf[4] = "closest_static_match";
          *(_DWORD *)int buf = 136315906;
          __int16 v15 = 2080;
          uint64_t v16 = v10;
          __int16 v17 = 2080;
          uint64_t v18 = v9;
          __int16 v19 = 2048;
          unint64_t v20 = 0xEEEEEEEEEEEEEEEFLL * ((v7 - v5) >> 4);
          _os_log_debug_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%s  DictionaryContainer::closest_static_match: \"%s\" has only diacritic-insensitive matches, returning the first one (\"%s\") out of %zu", buf, 0x2Au);
          int v5 = v11;
        }
        break;
      }
    }
    KB::Word::Word(a3, (size_t *)v5);
  }
  *(void *)int buf = &v11;
  std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
}

void KB::DictionaryContainer::derive_static_words(KB::DictionaryContainer *a1, uint64_t *a2, unsigned __int16 *a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (const KB::StaticDictionary *)*((void *)a1 + 1);
  if (*(void *)v4 != *((void *)v4 + 1) && *a3 != 0)
  {
    uint64_t v46 = 0;
    int v47 = 0;
    memset(v44, 0, sizeof(v44));
    int v45 = 0;
    KB::StaticDictionaryCursor::reset((KB::StaticDictionaryCursor *)v44, v4);
    memset(v43, 0, sizeof(v43));
    if (*((void *)a3 + 1)) {
      uint64_t v8 = *((void *)a3 + 1);
    }
    else {
      uint64_t v8 = (uint64_t)(a3 + 8);
    }
    uint64_t v38 = v8;
    int v9 = *a3;
    int v39 = 0;
    int v40 = v9;
    unsigned int v41 = 0;
    KB::String::iterator::initialize(&v38);
    int v42 = 0;
    uint64_t v34 = v8;
    int v35 = v9;
    int v36 = v9;
    int v37 = 0;
    KB::String::iterator::initialize(&v34);
    int v10 = v35;
    if (v39 != v35)
    {
      float v11 = 1.0;
      do
      {
        if (!KB::StaticDictionaryCursor::valid((KB::StaticDictionaryCursor *)v44)) {
          break;
        }
        unsigned int v12 = v41;
        ++v42;
        KB::String::iterator::operator++(&v38);
        float v11 = v11 * KB::StaticDictionaryCursor::advance((KB::StaticDictionaryCursor *)v44, v12);
        if (*((void *)a1 + 4))
        {
          int v13 = v42;
          int v14 = a3[2];
          if (!a3[2])
          {
            KB::String::compute_length(a3);
            int v14 = a3[2];
          }
          if (v13 < v14 && v46)
          {
            uint64_t v15 = 0;
            uint64_t v16 = 8 * v46 - 8;
            do
            {
              int v17 = LXCursorTerminatesWordStem();
              if (v17) {
                BOOL v18 = 1;
              }
              else {
                BOOL v18 = v16 == v15;
              }
              v15 += 8;
            }
            while (!v18);
            if (v17)
            {
              uint64_t v31 = 0;
              uint64_t v32 = 0;
              uint64_t v33 = 0;
              KB::StaticDictionaryCursor::derive_words((KB::StaticDictionaryCursor *)v44, (uint64_t)&v31);
              int v19 = *a3;
              uint64_t v20 = *((void *)a3 + 1);
              if (!v20) {
                uint64_t v20 = (uint64_t)(a3 + 8);
              }
              uint64_t v27 = v20;
              int v28 = v19;
              int v29 = v19;
              int v30 = 0;
              KB::String::iterator::initialize(&v27);
              KB::String::String((KB::String *)&v48, (const KB::String::iterator *)&v38, (const KB::String::iterator *)&v27);
              uint64_t v21 = v31;
              uint64_t v22 = v32;
              while (v21 != v22)
              {
                *(float *)(v21 + 52) = v11;
                KB::DictionaryContainer::derive_combined_words(a1, v43, v21, (const KB::String *)&v48);
                v21 += 240;
              }
              if (v49) {
                BOOL v23 = BYTE6(v48) == 1;
              }
              else {
                BOOL v23 = 0;
              }
              if (v23) {
                free(v49);
              }
              uint64_t v48 = (void **)&v31;
              std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](&v48);
            }
          }
        }
      }
      while (v39 != v10);
    }
    KB::StaticDictionaryCursor::derive_words((KB::StaticDictionaryCursor *)v44, (uint64_t)a2);
    if (*((void *)a1 + 4))
    {
      uint64_t v24 = std::remove_if[abi:nn180100]<std::__wrap_iter<KB::Word *>,BOOL({block_pointer})(KB::Word const&)>(*a2, a2[1], (uint64_t)&__block_literal_global_15196);
      std::vector<KB::Word>::erase((uint64_t)a2, v24, (KB::Word *)a2[1]);
      KB::StaticDictionary::merge_words((uint64_t)a2, v43);
    }
    uint64_t v48 = (void **)v43;
    std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](&v48);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      unsigned int v26 = *(const void **)((char *)v44 + i);
      if (v26) {
        CFRelease(v26);
      }
      *(void *)((char *)v44 + i) = 0;
    }
  }
}

void KB::DictionaryContainer::derive_combined_words(KB::DictionaryContainer *a1, uint64_t *a2, uint64_t a3, const KB::String *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  *(void *)int v35 = 0;
  int v36 = 0;
  if (*((void *)a1 + 4) && LMLexiconIDConverterGetStemData())
  {
    KB::String::String((KB::String *)v39, v36, v35[0]);
    uint64_t v8 = (const KB::StaticDictionary *)*((void *)a1 + 1);
    uint64_t v33 = 0;
    int v34 = 0;
    memset(v31, 0, sizeof(v31));
    int v32 = 0;
    KB::StaticDictionaryCursor::reset((KB::StaticDictionaryCursor *)v31, v8);
    KB::StaticDictionaryCursor::advance((KB::StaticDictionaryCursor *)v31, (const KB::String *)v39);
    KB::StaticDictionaryCursor::advance((KB::StaticDictionaryCursor *)v31, a4);
    int v28 = 0;
    int v29 = 0;
    uint64_t v30 = 0;
    KB::StaticDictionaryCursor::derive_words((KB::StaticDictionaryCursor *)v31, (uint64_t)&v28);
    int v9 = v28;
    for (uint64_t i = v29; v9 != i; v9 += 30)
    {
      TITokenID v11 = *(TITokenID *)(a3 + 136);
      TITokenID v12 = v9[17];
      unint64_t v13 = KB::DictionaryContainer::combined_word_id(a1, v11, v12);
      if (HIDWORD(v13)
        && (v9[16].word_id & (*(_DWORD *)(a3 + 132) >> 12) & 0xFFF) != 0
        && *(uint64_t *)v35 <= LOWORD(v9->lexicon_id))
      {
        TITokenID v14 = (TITokenID)v13;
        KB::Word::Word((KB::Word *)v38, (size_t *)a3);
        TITokenID v15 = v14;
        KB::Word::append_suffix((KB::Word *)v38, (const KB::Word *)v9, v35[0], v15);
        uint64_t v16 = (KB::Word *)a2[1];
        unint64_t v17 = a2[2];
        if ((unint64_t)v16 >= v17)
        {
          unint64_t v19 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v16 - *a2) >> 4);
          unint64_t v20 = v19 + 1;
          if (v19 + 1 > 0x111111111111111) {
            abort();
          }
          unint64_t v21 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v17 - *a2) >> 4);
          if (2 * v21 > v20) {
            unint64_t v20 = 2 * v21;
          }
          if (v21 >= 0x88888888888888) {
            unint64_t v22 = 0x111111111111111;
          }
          else {
            unint64_t v22 = v20;
          }
          void v37[4] = a2 + 2;
          if (v22) {
            unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = (KB::Word *)(v22 + 240 * v19);
          v37[0] = v22;
          v37[1] = v24;
          v37[3] = v22 + 240 * v23;
          KB::Word::Word(v24, (size_t *)v38);
          _OWORD v37[2] = (char *)v24 + 240;
          std::vector<KB::Word>::__swap_out_circular_buffer(a2, v37);
          BOOL v18 = (char *)a2[1];
          std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)v37);
        }
        else
        {
          BOOL v18 = (char *)KB::Word::Word(v16, (size_t *)v38) + 240;
        }
        a2[1] = (uint64_t)v18;
        KB::Word::~Word((KB::Word *)v38);
      }
    }
    v38[0] = (void **)&v28;
    std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](v38);
    for (uint64_t j = 16; j != -8; j -= 8)
    {
      unsigned int v26 = *(const void **)((char *)v31 + j);
      if (v26) {
        CFRelease(v26);
      }
      *(void *)((char *)v31 + j) = 0;
    }
    if (v40) {
      BOOL v27 = v39[6] == 1;
    }
    else {
      BOOL v27 = 0;
    }
    if (v27) {
      free(v40);
    }
  }
}

uint64_t ___ZNK2KB19DictionaryContainer19derive_static_wordsERNSt3__16vectorINS_4WordENS1_9allocatorIS3_EEEERKNS_6StringE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 135) >> 5) & 1;
}

uint64_t KB::DictionaryContainer::combined_word_id(KB::DictionaryContainer *this, TITokenID a2, TITokenID a3)
{
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)v3 == *(void *)(v3 + 8)) {
    unsigned int v4 = -1;
  }
  else {
    unsigned int v4 = **(_DWORD **)(v3 + 48);
  }
  if (*((void *)this + 4)) {
    BOOL v5 = v4 == a2.lexicon_id;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && v4 == a3.lexicon_id) {
    LMLexiconIDConverterGetStemSuffixTokenID();
  }
  return v4;
}

uint64_t KB::DictionaryContainer::affix_sentinel@<X0>(KB::DictionaryContainer *this@<X0>, TITokenID a2@<0:X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *((void *)this + 1);
  if (*(void *)v5 == *(void *)(v5 + 8)) {
    int v6 = -1;
  }
  else {
    int v6 = **(_DWORD **)(v5 + 48);
  }
  uint64_t result = *((void *)this + 4);
  if (result) {
    BOOL v8 = v6 == a2.lexicon_id;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    goto LABEL_11;
  }
  if (a3)
  {
    uint64_t result = LMLexiconIDConverterGetSuffixData();
    if ((result & 1) == 0)
    {
LABEL_11:
      *(_DWORD *)a4 = 0x100000;
      *(_WORD *)(a4 + 4) = 0;
      *(unsigned char *)(a4 + 6) = 0;
      *(void *)(a4 + 8) = 0;
      *(unsigned char *)(a4 + 16) = 0;
      return result;
    }
  }
  else
  {
    uint64_t result = LMLexiconIDConverterGetStemData();
    if (!result) {
      goto LABEL_11;
    }
  }
  return (uint64_t)KB::String::String((KB::String *)a4, 0, 0);
}

void options_with_word_locale(char *a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  *a2 = Mutable;
  if (a1)
  {
    int v6 = Mutable;
    std::string::basic_string[abi:nn180100]<0>(__p, a1);
    KB::cf_string((const UInt8 *)__p, &localeIdentifier);
    CFLocaleIdentifier v7 = localeIdentifier;
    CFLocaleRef v8 = CFLocaleCreate(v4, localeIdentifier);
    if (v7) {
      CFRelease(v7);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E4F72488], v8);
    if (v8) {
      CFRelease(v8);
    }
  }
}

uint64_t TI::VulgarWordUsageDatabaseWrapper::VulgarWordUsageDatabaseWrapper(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (simular_swear_word_policy_v2_setting)
  {
    if (([(id)simular_swear_word_policy_v2_setting BOOLValue] & 1) == 0) {
      return a1;
    }
  }
  else if (!_os_feature_enabled_impl())
  {
    return a1;
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4) {
    TI::VulgarWordUsageDatabaseWrapper::set_dynamic_resource_directory((CFTypeRef *)a1, (std::string *)a2);
  }
  return a1;
}

void TI::VulgarWordUsageDatabaseWrapper::set_dynamic_resource_directory(CFTypeRef *a1, std::string *a2)
{
  memset(&v10, 0, sizeof(v10));
  std::string::size_type v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type v3 = size;
  }
  std::string::append[abi:nn180100]<char const*,0>(&v10, a2, (std::string *)((char *)a2 + v3));
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:nn180100]<char const*,0>(&__p, (std::string *)"VulgarWordUsage.db", (std::string *)"");
  std::__fs::filesystem::operator/[abi:nn180100](&v9, (uint64_t)&v10, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v9;
  }
  KB::cf_string((const UInt8 *)&__p, &v7);
  CFStringRef v5 = v7;
  uint64_t v6 = LXVulgarWordUsageDatabaseCreate();
  if (*a1) {
    CFRelease(*a1);
  }
  *a1 = (CFTypeRef)v6;
  if (v5) {
    CFRelease(v5);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LXVulgarWordUsageDatabasePerformMaintenance();
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void TI::VulgarWordUsageDatabaseWrapper::~VulgarWordUsageDatabaseWrapper(TI::VulgarWordUsageDatabaseWrapper *this)
{
  LXVulgarWordUsageDatabasePerformMaintenance();
  std::string::size_type v3 = (void **)((char *)this + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 1) = 0;
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
  *(void *)this = 0;
}

BOOL TI::VulgarWordUsageDatabaseWrapper::perform_maintenance(TI::VulgarWordUsageDatabaseWrapper *this)
{
  return LXVulgarWordUsageDatabasePerformMaintenance() != 0;
}

uint64_t TI::VulgarWordUsageDatabaseWrapper::increment_usage_count(TI::VulgarWordUsageDatabaseWrapper *a1, char *a2, char *a3, uint64_t *a4, char *a5)
{
  TI::VulgarWordUsageDatabaseWrapper::perform_maintenance_if_time(a1);
  uint64_t v24 = a3;
  if (a3)
  {
    uint64_t v7 = *a4;
    uint64_t v22 = a4[1];
    if (v22 != *a4)
    {
      LOBYTE(v8) = 1;
      while (1)
      {
        if (*(char *)(v7 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else {
          std::string v36 = *(std::string *)v7;
        }
        std::string::basic_string[abi:nn180100]<0>(__p, a2);
        KB::cf_string((const UInt8 *)__p, (CFStringRef *)&v33);
        CFMutableDictionaryRef v9 = v33;
        std::string::basic_string[abi:nn180100]<0>(v30, v24);
        KB::cf_string((const UInt8 *)v30, &v32);
        CFStringRef v10 = v32;
        int v11 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
        TITokenID v12 = (void *)v36.__r_.__value_.__r.__words[0];
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v13 = &v36;
        }
        else {
          unint64_t v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:nn180100]<0>(v27, (char *)v13);
        KB::cf_string((const UInt8 *)v27, &v29);
        CFStringRef v14 = v29;
        options_with_word_locale(a5, &v26);
        CFMutableDictionaryRef v15 = v26;
        int v16 = LXVulgarWordUsageDatabaseIncrementUsageCount();
        if (v15) {
          CFRelease(v15);
        }
        if (v14) {
          CFRelease(v14);
        }
        if ((v28 & 0x80000000) == 0) {
          break;
        }
        operator delete(v27[0]);
        if (v10) {
          goto LABEL_16;
        }
LABEL_17:
        if (v31 < 0)
        {
          operator delete(v30[0]);
          if (!v9) {
            goto LABEL_20;
          }
LABEL_19:
          CFRelease(v9);
          goto LABEL_20;
        }
        if (v9) {
          goto LABEL_19;
        }
LABEL_20:
        if (v35 < 0) {
          operator delete(__p[0]);
        }
        if (v11 < 0) {
          operator delete(v12);
        }
        uint64_t v8 = v8 & (v16 != 0);
        v7 += 24;
        if (v7 == v22) {
          return v8;
        }
      }
      if (!v10) {
        goto LABEL_17;
      }
LABEL_16:
      CFRelease(v10);
      goto LABEL_17;
    }
    unint64_t v17 = (const UInt8 *)std::string::basic_string[abi:nn180100]<0>(&v36, a2);
    KB::cf_string(v17, (CFStringRef *)v30);
    BOOL v18 = v30[0];
    std::string::basic_string[abi:nn180100]<0>(__p, a3);
    KB::cf_string((const UInt8 *)__p, (CFStringRef *)v27);
    unint64_t v19 = v27[0];
    options_with_word_locale(a5, &v33);
    CFMutableDictionaryRef v20 = v33;
    uint64_t v8 = LXVulgarWordUsageDatabaseIncrementUsageCount() != 0;
    if (v20) {
      CFRelease(v20);
    }
    if (v19) {
      CFRelease(v19);
    }
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v36.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Cannot increment the usage count because app_id is NULL", (uint8_t *)&v36, 2u);
    }
    return 0;
  }
  return v8;
}

uint64_t TI::VulgarWordUsageDatabaseWrapper::perform_maintenance_if_time(TI::VulgarWordUsageDatabaseWrapper *this)
{
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v2.__d_.__rep_ - *((void *)this + 5) < 0x1A3185C5001) {
    return 0;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v2.__d_.__rep_;
  uint64_t result = LXVulgarWordUsageDatabasePerformMaintenance();
  if (result)
  {
    *((void *)this + 5) = rep;
    return 1;
  }
  return result;
}

uint64_t TI::VulgarWordUsageDatabaseWrapper::decrement_usage_count(uint64_t a1, char *a2, char *a3, uint64_t *a4, char *a5)
{
  if (a3)
  {
    uint64_t v5 = *a4;
    uint64_t v6 = a4[1];
    if (v6 != *a4)
    {
      LOBYTE(v7) = 1;
      while (1)
      {
        if (*(char *)(v5 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
        }
        else {
          std::string v34 = *(std::string *)v5;
        }
        std::string::basic_string[abi:nn180100]<0>(__p, a2);
        KB::cf_string((const UInt8 *)__p, (CFStringRef *)&v31);
        CFMutableDictionaryRef v8 = v31;
        std::string::basic_string[abi:nn180100]<0>(v28, a3);
        KB::cf_string((const UInt8 *)v28, &v30);
        CFStringRef v9 = v30;
        int v10 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
        int v11 = (void *)v34.__r_.__value_.__r.__words[0];
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          TITokenID v12 = &v34;
        }
        else {
          TITokenID v12 = (std::string *)v34.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:nn180100]<0>(v25, (char *)v12);
        KB::cf_string((const UInt8 *)v25, &v27);
        CFStringRef v13 = v27;
        options_with_word_locale(a5, &v24);
        CFMutableDictionaryRef v14 = v24;
        int v15 = LXVulgarWordUsageDatabaseDecrementUsageCount();
        if (v14) {
          CFRelease(v14);
        }
        if (v13) {
          CFRelease(v13);
        }
        if ((v26 & 0x80000000) == 0) {
          break;
        }
        operator delete(v25[0]);
        if (v9) {
          goto LABEL_16;
        }
LABEL_17:
        if (v29 < 0)
        {
          operator delete(v28[0]);
          if (!v8) {
            goto LABEL_20;
          }
LABEL_19:
          CFRelease(v8);
          goto LABEL_20;
        }
        if (v8) {
          goto LABEL_19;
        }
LABEL_20:
        if (v33 < 0) {
          operator delete(__p[0]);
        }
        if (v10 < 0) {
          operator delete(v11);
        }
        uint64_t v7 = v7 & (v15 != 0);
        v5 += 24;
        if (v5 == v6) {
          return v7;
        }
      }
      if (!v9) {
        goto LABEL_17;
      }
LABEL_16:
      CFRelease(v9);
      goto LABEL_17;
    }
    int v16 = (const UInt8 *)std::string::basic_string[abi:nn180100]<0>(&v34, a2);
    KB::cf_string(v16, (CFStringRef *)v28);
    unint64_t v17 = v28[0];
    std::string::basic_string[abi:nn180100]<0>(__p, a3);
    KB::cf_string((const UInt8 *)__p, (CFStringRef *)v25);
    BOOL v18 = v25[0];
    options_with_word_locale(a5, &v31);
    CFMutableDictionaryRef v19 = v31;
    uint64_t v7 = LXVulgarWordUsageDatabaseDecrementUsageCount() != 0;
    if (v19) {
      CFRelease(v19);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v34.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Cannot decrement the usage count because app_id is NULL", (uint8_t *)&v34, 2u);
    }
    return 0;
  }
  return v7;
}

BOOL TI::VulgarWordUsageDatabaseWrapper::can_autocorrect(uint64_t a1, char *a2, uint64_t a3, void *a4, char *a5)
{
  if (a3)
  {
    uint64_t v5 = a4[1];
    if (v5 != *a4)
    {
      for (uint64_t i = *a4 + 24; ; i += 24)
      {
        if (*(char *)(i - 1) < 0) {
          std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(i - 24), *(void *)(i - 16));
        }
        else {
          std::string v28 = *(std::string *)(i - 24);
        }
        std::string::basic_string[abi:nn180100]<0>(v25, a2);
        KB::cf_string((const UInt8 *)v25, &v27);
        CFStringRef v8 = v27;
        uint64_t v7 = (void *)v28.__r_.__value_.__r.__words[0];
        int v9 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v10 = &v28;
        }
        else {
          int v10 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
        KB::cf_string((const UInt8 *)__p, &v24);
        CFStringRef v11 = v24;
        options_with_word_locale(a5, &v21);
        CFMutableDictionaryRef v12 = v21;
        int CanAutocorrect = LXVulgarWordUsageDatabaseCanAutocorrect();
        BOOL v14 = CanAutocorrect != 0;
        if (v12) {
          CFRelease(v12);
        }
        if (v11) {
          CFRelease(v11);
        }
        if ((v23 & 0x80000000) == 0) {
          break;
        }
        operator delete(__p[0]);
        if (v8) {
          goto LABEL_16;
        }
LABEL_17:
        if (v26 < 0)
        {
          operator delete(v25[0]);
          if (v9 < 0)
          {
LABEL_24:
            operator delete(v7);
            if (!CanAutocorrect) {
              return v14;
            }
            goto LABEL_25;
          }
        }
        else if (v9 < 0)
        {
          goto LABEL_24;
        }
        if (!CanAutocorrect) {
          return v14;
        }
LABEL_25:
        if (i == v5) {
          return v14;
        }
      }
      if (!v8) {
        goto LABEL_17;
      }
LABEL_16:
      CFRelease(v8);
      goto LABEL_17;
    }
    std::string::basic_string[abi:nn180100]<0>(&v28, a2);
    KB::cf_string((const UInt8 *)&v28, (CFStringRef *)v25);
    int v16 = v25[0];
    options_with_word_locale(a5, (CFMutableDictionaryRef *)__p);
    unint64_t v17 = __p[0];
    BOOL v14 = LXVulgarWordUsageDatabaseCanAutocorrect() != 0;
    if (v17) {
      CFRelease(v17);
    }
    if (v16) {
      CFRelease(v16);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v28.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Cannot read the usage count because app_id is NULL", (uint8_t *)&v28, 2u);
    }
    return 0;
  }
  return v14;
}

BOOL TI::VulgarWordUsageDatabaseWrapper::can_autocorrect_somewhere(TI::VulgarWordUsageDatabaseWrapper *this, char *a2, char *a3)
{
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  KB::cf_string((const UInt8 *)__p, &v11);
  CFStringRef v4 = v11;
  options_with_word_locale(a3, &v8);
  CFMutableDictionaryRef v5 = v8;
  int CanAutocorrectSomewhere = LXVulgarWordUsageDatabaseCanAutocorrectSomewhere();
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return CanAutocorrectSomewhere != 0;
}

BOOL TI::VulgarWordUsageDatabaseWrapper::clear(TI::VulgarWordUsageDatabaseWrapper *this)
{
  return LXVulgarWordUsageDatabaseReset() != 0;
}

const void **TI::VulgarWordUsageDatabaseWrapper::set_current_app_id(const void **this, const __CFString *a2)
{
  return KB::retain_ptr<__CFDictionary const*>::operator=(this + 1, a2);
}

uint64_t TI::VulgarWordUsageDatabaseWrapper::get_current_app_id(TI::VulgarWordUsageDatabaseWrapper *this)
{
  return *((void *)this + 1);
}

void TI::VulgarWordUsageDatabaseWrapper::set_current_recipient_ids(uint64_t a1, std::string **a2)
{
  std::chrono::steady_clock::time_point v2 = (std::vector<std::string> *)(a1 + 16);
  if (v2 != (std::vector<std::string> *)a2) {
    std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
}

std::string *TI::VulgarWordUsageDatabaseWrapper::get_current_recipient_ids@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(a2, this[2], this[3], 0xAAAAAAAAAAAAAAABLL * (((char *)this[3] - (char *)this[2]) >> 3));
}

void TI::VulgarWordUsageDatabaseWrapper::removeDynamicResourceDirectory(CFTypeRef *this)
{
  if (*this) {
    CFRelease(*this);
  }
  *this = 0;
}

uint64_t KB::LanguageModelImplStub::do_store(KB::LanguageModelImplStub *this)
{
  uint64_t result = (*(uint64_t (**)(KB::LanguageModelImplStub *))(*(void *)this + 16))(this);
  if (result)
  {
    if ((*((unsigned char *)this + 169) & 1) != 0
      && (uint64_t v3 = *((void *)this + 19), *(void *)v3)
      && (atomic_load_explicit((atomic_uchar *volatile)(v3 + 120), memory_order_acquire) & 1) != 0)
    {
      CFStringRef v4 = *(KB::MutableLexiconWrapper **)v3;
    }
    else
    {
      CFStringRef v4 = 0;
    }
    return KB::MutableLexiconWrapper::store(v4);
  }
  return result;
}

void KB::LanguageModelImplStub::background_load(atomic_uchar *this)
{
  KB::LanguageModelImplStub::_load_if_necessary((KB::LanguageModelImplStub *)this);
  if ((atomic_load_explicit(this + 169, memory_order_acquire) & 1) == 0)
  {
    KB::LanguageModelImplStub::_wait_for_load((KB::LanguageModelImplStub *)this);
  }
}

void KB::LanguageModelImplStub::_load_if_necessary(KB::LanguageModelImplStub *this)
{
  if ((atomic_exchange((atomic_uchar *volatile)this + 168, 1u) & 1) == 0)
  {
    KB::LanguageModelImplStub::_load_dynamic(this);
    v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 224);
    v2.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)this + 224));
    atomic_store(1u, (unsigned __int8 *)this + 169);
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 176));
    std::unique_lock<std::mutex>::unlock(&v2);
    if ((*(unsigned int (**)(KB::LanguageModelImplStub *))(*(void *)this + 16))(this)) {
      TILanguageModelScheduleMaintenance();
    }
    if (v2.__owns_) {
      std::mutex::unlock(v2.__m_);
    }
  }
}

void KB::LanguageModelImplStub::_wait_for_load(KB::LanguageModelImplStub *this)
{
  if (pthread_main_np())
  {
    std::unique_lock<std::mutex> v2 = (KB::LanguageModel *)dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, -1, &__block_literal_global_5);
    uint64_t v3 = KB::LanguageModel::background_loading_queue(v2);
    TIDispatchAsync();
  }
  uint64_t m = (std::mutex *)((char *)this + 224);
  v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 224);
  v5.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 224));
  if (*((unsigned char *)this + 169)) {
    goto LABEL_7;
  }
  do
    std::condition_variable::wait((std::condition_variable *)((char *)this + 176), &v5);
  while ((*((unsigned char *)this + 169) & 1) == 0);
  if (v5.__owns_)
  {
    uint64_t m = v5.__m_;
LABEL_7:
    std::mutex::unlock(m);
  }
}

void KB::LanguageModelImplStub::_load_dynamic(KB::LanguageModelImplStub *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 5))
  {
    ValueAtIndedouble x = CFArrayGetValueAtIndex(*((CFArrayRef *)this + 2), 0);
    CFStringRef v3 = (const __CFString *)MEMORY[0x1E4E79AD0](ValueAtIndex);
    KB::utf8_string(v3, (uint64_t)&v16);
    CFStringRef v4 = CFArrayGetValueAtIndex(*((CFArrayRef *)this + 2), 0);
    std::unique_lock<std::mutex> v5 = (void *)MEMORY[0x1E4E79AD0](v4);
    CFStringRef v6 = (const __CFString *)UIKeyboardDynamicDictionaryFileWithSiriMode(v5, *((void **)this + 5), 0);
    KB::utf8_string(v6, (uint64_t)v14);
    KB::LanguageModelImplStub::get_or_create_shared_handle((KB::LanguageModelImplStub *)&v16, &v13);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 20);
    CFMutableDictionaryRef v8 = (KB::LanguageModelImplStub::WrapperHandle *)v13;
    *(_OWORD *)((char *)this + 152) = v13;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v7);
      int v9 = (KB::LanguageModelImplStub::WrapperHandle *)*((void *)this + 19);
    }
    else
    {
      int v9 = v8;
    }
    KB::LanguageModelImplStub::WrapperHandle::wait_until_ready(v9);
    if (v15 && v14[6] == 1) {
      free(v15);
    }
    if (v17)
    {
      if (BYTE6(v16) == 1) {
        free(v17);
      }
    }
  }
  else
  {
    char v10 = operator new(0x98uLL);
    CFStringRef v11 = (uint64_t *)(_ZNSt3__120__shared_ptr_emplaceIN2KB21LanguageModelImplStub13WrapperHandleENS_9allocatorIS3_EEEC2B8nn180100IJES5_Li0EEES5_DpOT_((uint64_t)v10)
                    + 24);
    CFMutableDictionaryRef v12 = (std::__shared_weak_count *)*((void *)this + 20);
    *((void *)this + 19) = v11;
    *((void *)this + 20) = v10;
    if (v12)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v12);
      CFStringRef v11 = (uint64_t *)*((void *)this + 19);
    }
    uint64_t v16 = 0;
    KB::LanguageModelImplStub::WrapperHandle::set(v11, &v16);
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    KB::LanguageModelImplStub::get_or_create_shared_handle(v2, v3, v4);
  }
}

void KB::LanguageModelImplStub::get_or_create_shared_handle(KB::LanguageModelImplStub *this@<X0>, void *a2@<X8>)
{
  KB::LanguageModelImplStub::wrapper_cache_mutex(this);
  v55.__m_ = &KB::LanguageModelImplStub::wrapper_cache_mutex(void)::mutex;
  v55.__owns_ = 1;
  std::mutex::lock(&KB::LanguageModelImplStub::wrapper_cache_mutex(void)::mutex);
  *a2 = 0;
  a2[1] = 0;
  CFStringRef v6 = (char *)*((void *)this + 1);
  if (!v6) {
    CFStringRef v6 = (char *)this + 16;
  }
  if (*(_WORD *)this) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = "";
  }
  CFMutableDictionaryRef v8 = (KB::LanguageModelImplStub *)std::string::basic_string[abi:nn180100]<0>(__p, v7);
  KB::LanguageModelImplStub::wrapper_cache(v8);
  if (v54 >= 0) {
    int v9 = (uint64_t *)__p;
  }
  else {
    int v9 = (uint64_t *)__p[0];
  }
  if (v54 >= 0) {
    unint64_t v10 = HIBYTE(v54);
  }
  else {
    unint64_t v10 = (unint64_t)__p[1];
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v9, v10);
  unint64_t v12 = *((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1);
  if (!*((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1)) {
    goto LABEL_28;
  }
  unint64_t v13 = v11;
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 8));
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = v11;
    unint64_t v17 = &knownAssetRegionAttributes_assetRegionAttributes;
    if (v11 >= *((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1)) {
      unint64_t v16 = v11 % *((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1);
    }
  }
  else
  {
    unint64_t v16 = (*((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1) - 1) & v11;
    unint64_t v17 = &knownAssetRegionAttributes_assetRegionAttributes;
  }
  uint64_t v18 = *(unsigned __int8 ***)(v17[228] + 8 * v16);
  if (!v18 || (CFMutableDictionaryRef v19 = *v18) == 0)
  {
LABEL_28:
    KB::LanguageModelImplStub::wrapper_cache((KB::LanguageModelImplStub *)v11);
LABEL_29:
    CFMutableDictionaryRef v21 = 0;
    goto LABEL_30;
  }
  while (1)
  {
    unint64_t v20 = *((void *)v19 + 1);
    if (v20 == v13) {
      break;
    }
    if (v15 > 1)
    {
      if (v20 >= v12) {
        v20 %= v12;
      }
    }
    else
    {
      v20 &= v12 - 1;
    }
    if (v20 != v16) {
      goto LABEL_28;
    }
LABEL_27:
    CFMutableDictionaryRef v19 = *(unsigned __int8 **)v19;
    if (!v19) {
      goto LABEL_28;
    }
  }
  unint64_t v11 = std::equal_to<std::string>::operator()[abi:nn180100](v19 + 16, (unsigned __int8 *)__p);
  if ((v11 & 1) == 0) {
    goto LABEL_27;
  }
  KB::LanguageModelImplStub::wrapper_cache((KB::LanguageModelImplStub *)v11);
  uint64_t v48 = (std::__shared_weak_count *)*((void *)v19 + 6);
  if (!v48) {
    goto LABEL_29;
  }
  BOOL v49 = std::__shared_weak_count::lock(v48);
  CFMutableDictionaryRef v21 = v49;
  if (!v49 || (uint64_t v50 = *((void *)v19 + 5), *a2 = v50, a2[1] = v49, !v50))
  {
LABEL_30:
    uint64_t v22 = (atomic_ullong *)operator new(0x98uLL);
    char v23 = (KB::LanguageModelImplStub *)_ZNSt3__120__shared_ptr_emplaceIN2KB21LanguageModelImplStub13WrapperHandleENS_9allocatorIS3_EEEC2B8nn180100IJES5_Li0EEES5_DpOT_((uint64_t)v22);
    unint64_t v24 = (unint64_t)v23 + 24;
    *a2 = (char *)v23 + 24;
    a2[1] = v23;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v21);
    }
    unint64_t v52 = v24;
    KB::LanguageModelImplStub::wrapper_cache(v23);
    int v25 = SHIBYTE(v54);
    char v26 = (const std::string::value_type *)__p[0];
    CFStringRef v27 = __p[1];
    if (v54 >= 0) {
      std::string v28 = (uint64_t *)__p;
    }
    else {
      std::string v28 = (uint64_t *)__p[0];
    }
    if (v54 >= 0) {
      unint64_t v29 = HIBYTE(v54);
    }
    else {
      unint64_t v29 = (unint64_t)__p[1];
    }
    unint64_t v30 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v28, v29);
    unint64_t v31 = v30;
    unint64_t v32 = *((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1);
    if (*((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1))
    {
      uint8x8_t v33 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 8));
      v33.i16[0] = vaddlv_u8(v33);
      unint64_t v34 = v33.u32[0];
      if (v33.u32[0] > 1uLL)
      {
        unint64_t v24 = v30;
        if (v30 >= *((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1)) {
          unint64_t v24 = v30 % *((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1);
        }
      }
      else
      {
        unint64_t v24 = (*((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1) - 1) & v30;
      }
      char v35 = *(void ***)(KB::LanguageModelImplStub::wrapper_cache(void)::cache + 8 * v24);
      if (v35)
      {
        std::string v36 = (char *)*v35;
        if (*v35)
        {
          do
          {
            unint64_t v37 = *((void *)v36 + 1);
            if (v37 == v31)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v36 + 16, (unsigned __int8 *)__p))
              {
                unint64_t v51 = v52;
                goto LABEL_80;
              }
            }
            else
            {
              if (v34 > 1)
              {
                if (v37 >= v32) {
                  v37 %= v32;
                }
              }
              else
              {
                v37 &= v32 - 1;
              }
              if (v37 != v24) {
                break;
              }
            }
            std::string v36 = *(char **)v36;
          }
          while (v36);
        }
      }
    }
    std::string v36 = (char *)operator new(0x38uLL);
    v56[0] = v36;
    v56[1] = &qword_1EBFF0730;
    *(void *)std::string v36 = 0;
    *((void *)v36 + 1) = v31;
    uint64_t v38 = (std::string *)(v36 + 16);
    if (v25 < 0)
    {
      std::string::__init_copy_ctor_external(v38, v26, (std::string::size_type)v27);
    }
    else
    {
      *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      *((void *)v36 + 4) = v54;
    }
    *((void *)v36 + 5) = 0;
    *((void *)v36 + 6) = 0;
    char v57 = 1;
    float v39 = (float)(unint64_t)(qword_1EBFF0738 + 1);
    if (!v32 || (float)(*(float *)&dword_1EBFF0740 * (float)v32) < v39)
    {
      BOOL v40 = 1;
      if (v32 >= 3) {
        BOOL v40 = (v32 & (v32 - 1)) != 0;
      }
      unint64_t v41 = v40 | (2 * v32);
      unint64_t v42 = vcvtps_u32_f32(v39 / *(float *)&dword_1EBFF0740);
      if (v41 <= v42) {
        size_t v43 = v42;
      }
      else {
        size_t v43 = v41;
      }
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&KB::LanguageModelImplStub::wrapper_cache(void)::cache, v43);
      unint64_t v32 = *((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1);
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v31 >= *((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1)) {
          unint64_t v24 = v31 % *((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1);
        }
        else {
          unint64_t v24 = v31;
        }
      }
      else
      {
        unint64_t v24 = (*((void *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1) - 1) & v31;
      }
    }
    uint64_t v44 = KB::LanguageModelImplStub::wrapper_cache(void)::cache;
    int v45 = *(void **)(KB::LanguageModelImplStub::wrapper_cache(void)::cache + 8 * v24);
    if (v45)
    {
      *(void *)std::string v36 = *v45;
      unint64_t v51 = v52;
    }
    else
    {
      *(void *)std::string v36 = qword_1EBFF0730;
      qword_1EBFF0730 = (uint64_t)v36;
      *(void *)(v44 + 8 * v24) = &qword_1EBFF0730;
      unint64_t v51 = v52;
      if (!*(void *)v36)
      {
LABEL_79:
        v56[0] = 0;
        ++qword_1EBFF0738;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,void *>>>>::reset[abi:nn180100]((uint64_t)v56);
LABEL_80:
        atomic_fetch_add_explicit(v22 + 2, 1uLL, memory_order_relaxed);
        int v47 = (std::__shared_weak_count *)*((void *)v36 + 6);
        *((void *)v36 + 5) = v51;
        *((void *)v36 + 6) = v22;
        if (v47) {
          std::__shared_weak_count::__release_weak(v47);
        }
        std::unique_lock<std::mutex>::unlock(&v55);
        operator new();
      }
      unint64_t v46 = *(void *)(*(void *)v36 + 8);
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v46 >= v32) {
          v46 %= v32;
        }
      }
      else
      {
        v46 &= v32 - 1;
      }
      int v45 = (void *)(KB::LanguageModelImplStub::wrapper_cache(void)::cache + 8 * v46);
    }
    *int v45 = v36;
    goto LABEL_79;
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  std::mutex::unlock(&KB::LanguageModelImplStub::wrapper_cache_mutex(void)::mutex);
}

void KB::LanguageModelImplStub::WrapperHandle::wait_until_ready(KB::LanguageModelImplStub::WrapperHandle *this)
{
  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 120);
  if ((v2 & 1) == 0)
  {
    do
    {
      std::condition_variable::wait((std::condition_variable *)((char *)this + 72), &v4);
      unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 120);
    }
    while ((v3 & 1) == 0);
  }
  if (v4.__owns_) {
    std::mutex::unlock(v4.__m_);
  }
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN2KB21LanguageModelImplStub13WrapperHandleENS_9allocatorIS3_EEEC2B8nn180100IJES5_Li0EEES5_DpOT_(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3F77A90;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 850045863;
  unsigned __int8 v2 = (std::mutex *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 1018212795;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  std::mutex::lock((std::mutex *)(a1 + 32));
  *(unsigned char *)(a1 + 144) = 0;
  std::mutex::unlock(v2);
  return a1;
}

void KB::LanguageModelImplStub::WrapperHandle::set(uint64_t *a1, uint64_t *a2)
{
  std::unique_lock<std::mutex> v4 = (std::mutex *)(a1 + 1);
  std::mutex::lock((std::mutex *)(a1 + 1));
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = *a1;
  *a1 = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  atomic_store(1u, (unsigned __int8 *)a1 + 120);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 9));

  std::mutex::unlock(v4);
}

uint64_t std::__shared_ptr_emplace<KB::LanguageModelImplStub::WrapperHandle>::__on_zero_shared(uint64_t a1)
{
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  uint64_t result = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (result)
  {
    unsigned __int8 v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v3();
  }
  return result;
}

void std::__shared_ptr_emplace<KB::LanguageModelImplStub::WrapperHandle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F77A90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<KB::LanguageModelImplStub::WrapperHandle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F77A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *KB::LanguageModelImplStub::wrapper_cache_mutex(KB::LanguageModelImplStub *this)
{
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &KB::LanguageModelImplStub::wrapper_cache_mutex(void)::mutex, &dword_1E3F0E000);
  }
  return &KB::LanguageModelImplStub::wrapper_cache_mutex(void)::mutex;
}

long long *KB::LanguageModelImplStub::wrapper_cache(KB::LanguageModelImplStub *this)
{
  {
    KB::LanguageModelImplStub::wrapper_cache(void)::cache = 0u;
    *(_OWORD *)&qword_1EBFF0730 = 0u;
    dword_1EBFF0740 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>::~unordered_map[abi:nn180100], &KB::LanguageModelImplStub::wrapper_cache(void)::cache, &dword_1E3F0E000);
  }
  return &KB::LanguageModelImplStub::wrapper_cache(void)::cache;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,0>(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unsigned __int8 v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>>>::~__hash_table(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unsigned __int8 v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unsigned __int8 v2 = v3;
    }
    while (v3);
  }
  std::unique_lock<std::mutex> v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t KB::LanguageModelImplStub::completions(uint64_t a1, const KB::Candidate **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v21[125] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    LOBYTE(v11) = 0;
  }
  else
  {
    int v11 = 0;
    do
    {
      KB::Candidate::Candidate((KB::Candidate *)v21, v5);
      KB::Candidate::pop_last_word((KB::Candidate *)v21);
      if (v21[0])
      {
        KB::Candidate::Candidate((KB::Candidate *)v20, (const KB::Candidate *)v21);
        unint64_t v15 = (KB::Candidate *)operator new(0x3E8uLL);
        unint64_t v16 = v15;
        unint64_t v12 = (KB::Candidate *)((char *)v15 + 1000);
        unint64_t v17 = (char *)v15 + 1000;
        KB::Candidate::Candidate(v15, (const KB::Candidate *)v20);
        unint64_t v16 = v12;
        std::__function::__value_func<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v19, a4);
        (*(void (**)(uint64_t, KB::Candidate **, uint64_t, void *, void))(*(void *)a1 + 512))(a1, &v15, a3, v19, 0);
        std::__function::__value_func<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v19);
        uint64_t v18 = &v15;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v18);
        KB::Candidate::~Candidate((KB::Candidate *)v20);
        uint64_t v13 = *(void *)(a5 + 24);
        if (!v13) {
          std::__throw_bad_function_call[abi:nn180100]();
        }
        v11 |= (*(uint64_t (**)(uint64_t, const KB::Candidate *))(*(void *)v13 + 48))(v13, v5);
      }
      KB::Candidate::~Candidate((KB::Candidate *)v21);
      uint64_t v5 = (const KB::Candidate *)((char *)v5 + 1000);
    }
    while (v5 != v6);
  }
  return v11 & 1;
}

BOOL KB::LanguageModelImplStub::predictions(uint64_t a1, const KB::Candidate **a2, KB::LanguageModelContext *a3, uint64_t a4)
{
  v33[125] = *(void ***)MEMORY[0x1E4F143B8];
  char v26 = 0;
  std::unique_lock<std::mutex> v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5) {
    return 0;
  }
  do
  {
    KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v19, a3);
    CFMutableDictionaryRef v8 = KB::Candidate::Candidate((KB::Candidate *)v33, v4);
    if (v33[0])
    {
      int v9 = v33[1];
      uint64_t v10 = 240 * (uint64_t)v33[0];
      do
      {
        if ((*((unsigned char *)v9 + 135) & 4) == 0) {
          goto LABEL_10;
        }
        __int16 v29 = 0;
        char v30 = 0;
        unint64_t v31 = " ";
        int v28 = 1048577;
        char v32 = 0;
        if (v9 != (void **)&v28)
        {
          BOOL v11 = KB::String::equal((KB::String *)v9, (const KB::String *)&v28, 1);
          CFMutableDictionaryRef v8 = (KB::LanguageModel *)v31;
          if (v31 && v30 == 1) {
            free(v31);
          }
          if (!v11)
          {
LABEL_10:
            *((float *)v9 + 24) = (*(float (**)(uint64_t, void, KB::LanguageModelContext *))(*(void *)a1 + 456))(a1, *((unsigned int *)v9 + 34), a3);
            TITokenID v12 = (TITokenID)v9[17];
            KB::Word::capitalized_string((KB::Word *)v9, (uint64_t)&v28);
            TITokenID v13 = v12;
            KB::LanguageModelContext::append((KB::LanguageModelContext *)v19, v13, (const KB::String *)&v28, 0);
            CFMutableDictionaryRef v8 = (KB::LanguageModel *)v31;
            if (v31) {
              BOOL v14 = v30 == 1;
            }
            else {
              BOOL v14 = 0;
            }
            if (v14) {
              free(v31);
            }
          }
        }
        v9 += 30;
        v10 -= 240;
      }
      while (v10);
    }
    CFIndex prediction_count = KB::LanguageModel::get_prediction_count(v8);
    unint64_t v16 = operator new(0x28uLL);
    *unint64_t v16 = &unk_1F3F77AC8;
    v16[1] = &v26;
    void v16[2] = a4;
    _WORD v16[3] = v33;
    UChar32 v16[4] = v19;
    v27[3] = v16;
    (*(void (**)(uint64_t, char *, CFIndex, void *))(*(void *)a1 + 464))(a1, v19, prediction_count, v27);
    std::__function::__value_func<void ()(KB::LanguageModel::PredictionInfo const&)>::~__value_func[abi:nn180100](v27);
    KB::Candidate::~Candidate((KB::Candidate *)v33);
    v33[0] = (void **)&v25;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v33);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v24);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v23);
    if (__p)
    {
      uint64_t v22 = __p;
      operator delete(__p);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v20);
    }
    std::unique_lock<std::mutex> v4 = (const KB::Candidate *)((char *)v4 + 1000);
  }
  while (v4 != v5);
  return v26 != 0;
}

void std::__function::__func<KB::LanguageModelImplStub::predictions(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,std::function<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>,BOOL)::$_0,std::allocator<KB::LanguageModelImplStub::predictions(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,std::function<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>,BOOL)::$_0>,void ()(KB::LanguageModel::PredictionInfo const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v3)
  {
    **(unsigned char **)(a1 + 8) |= (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v3 + 48))(v3, a2, *(void *)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    std::unique_lock<std::mutex> v4 = (char *)std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<KB::LanguageModelImplStub::predictions(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,std::function<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>,BOOL)::$_0,std::allocator<KB::LanguageModelImplStub::predictions(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,std::function<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>,BOOL)::$_0>,void ()(KB::LanguageModel::PredictionInfo const&)>::destroy_deallocate(v4);
  }
}

__n128 std::__function::__func<KB::LanguageModelImplStub::predictions(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,std::function<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>,BOOL)::$_0,std::allocator<KB::LanguageModelImplStub::predictions(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,std::function<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>,BOOL)::$_0>,void ()(KB::LanguageModel::PredictionInfo const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F77AC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<KB::LanguageModelImplStub::predictions(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,std::function<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>,BOOL)::$_0,std::allocator<KB::LanguageModelImplStub::predictions(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,std::function<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>,BOOL)::$_0>,void ()(KB::LanguageModel::PredictionInfo const&)>::__clone(uint64_t a1)
{
  unsigned __int8 v2 = (char *)operator new(0x28uLL);
  *(void *)unsigned __int8 v2 = &unk_1F3F77AC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<KB::LanguageModelImplStub::predictions(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,std::function<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>,BOOL)::$_0,std::allocator<KB::LanguageModelImplStub::predictions(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,std::function<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>,BOOL)::$_0>,void ()(KB::LanguageModel::PredictionInfo const&)>::~__func()
{
}

uint64_t KB::LanguageModelImplStub::is_token_blocklisted()
{
  return 0;
}

void *KB::LanguageModelImplStub::create_prediction_enumerator@<X0>(void *a1@<X8>)
{
  __n128 result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *__n128 result = &unk_1F3F77A28;
  result[3] = &unk_1F3F77A60;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

uint64_t KB::LanguageModelImplStub::PredictionEnumeratorStub::advance(KB::LanguageModelImplStub::PredictionEnumeratorStub *this)
{
  return 0;
}

double KB::LanguageModelImplStub::PredictionEnumeratorStub::get_prediction@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  return result;
}

void KB::LanguageModelImplStub::PredictionEnumeratorStub::~PredictionEnumeratorStub(KB::LanguageModelImplStub::PredictionEnumeratorStub *this)
{
}

uint64_t std::__shared_ptr_emplace<KB::LanguageModelImplStub::PredictionEnumeratorStub>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<KB::LanguageModelImplStub::PredictionEnumeratorStub>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F77A28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<KB::LanguageModelImplStub::PredictionEnumeratorStub>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F77A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void KB::LanguageModelImplStub::predictions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kdebug_trace();
  kac_get_log();
  CFMutableDictionaryRef v8 = (id)objc_claimAutoreleasedReturnValue();
  int v9 = (const void *)(a1 ^ 0xCD);
  os_signpost_id_t v10 = os_signpost_id_make_with_pointer(v8, (const void *)(a1 ^ 0xCD));
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v11 = v10;
    if (os_signpost_enabled(v8))
    {
      LOWORD(v17[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1E3F0E000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v11, "kbdManager.languageModel.stubGenerateCompletionsAndPredictions", (const char *)&unk_1E41704BE, (uint8_t *)v17, 2u);
    }
  }

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 480))(&v23, a1, a2, a3);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v23 + 24))(v23))
  {
    while (1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v23 + 16))(v17);
      uint64_t v12 = *(void *)(a4 + 24);
      if (!v12) {
        break;
      }
      (*(void (**)(uint64_t, void **))(*(void *)v12 + 48))(v12, v17);
      uint64_t v25 = (void **)&v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v25);
      uint64_t v25 = (void **)&v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v25);
      if (v20 < 0) {
        operator delete(__p);
      }
      if (v18 < 0) {
        operator delete(v17[6]);
      }
      if (v17[0])
      {
        v17[1] = v17[0];
        operator delete(v17[0]);
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v23 + 24))(v23) & 1) == 0) {
        goto LABEL_13;
      }
    }
    unint64_t v16 = std::__throw_bad_function_call[abi:nn180100]();
    KB::LanguageModelImplStub::conditional_likelihood_batched(v16);
  }
  else
  {
LABEL_13:
    kdebug_trace();
    kac_get_log();
    TITokenID v13 = (id)objc_claimAutoreleasedReturnValue();
    os_signpost_id_t v14 = os_signpost_id_make_with_pointer(v13, v9);
    if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v15 = v14;
      if (os_signpost_enabled(v13))
      {
        LOWORD(v17[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1E3F0E000, v13, OS_SIGNPOST_INTERVAL_END, v15, "kbdManager.languageModel.stubGenerateCompletionsAndPredictions", (const char *)&unk_1E41704BE, (uint8_t *)v17, 2u);
      }
    }

    if (v24) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v24);
    }
  }
}

void KB::LanguageModelImplStub::conditional_likelihood_batched(unsigned int **a1@<X1>, void *a2@<X2>, int a3@<W5>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    std::unique_lock<std::mutex> v4 = *a1;
    uint64_t v5 = a1[1];
    if (*a1 != v5)
    {
      do
      {
        std::vector<KB::LikelihoodInfo>::vector(&v65, *v4, (uint64_t)&KB::k_invalid_likelihood_value);
        uint64_t v6 = (void *)a4[1];
        unint64_t v7 = a4[2];
        if ((unint64_t)v6 >= v7)
        {
          unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a4) >> 3);
          unint64_t v10 = v9 + 1;
          if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_64;
          }
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a4) >> 3);
          if (2 * v11 > v10) {
            unint64_t v10 = 2 * v11;
          }
          if (v11 >= 0x555555555555555) {
            unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v12 = v10;
          }
          int64x2_t v73 = (char **)(a4 + 2);
          TITokenID v13 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v12);
          os_signpost_id_t v14 = &v13[3 * v9];
          uint64_t v70 = v13;
          v71.i64[0] = (uint64_t)v14;
          uint64_t v72 = &v13[3 * v15];
          v14[1] = 0;
          unsigned __int16 v14[2] = 0;
          *os_signpost_id_t v14 = 0;
          *(_OWORD *)os_signpost_id_t v14 = v65;
          unsigned __int16 v14[2] = (void *)__p;
          long long v65 = 0uLL;
          *(void *)&long long __p = 0;
          v71.i64[1] = (uint64_t)(v14 + 3);
          std::vector<std::vector<KB::LikelihoodInfo>>::__swap_out_circular_buffer(a4, &v70);
          CFMutableDictionaryRef v8 = (void *)a4[1];
          std::__split_buffer<std::vector<KB::LikelihoodInfo>>::~__split_buffer((uint64_t)&v70);
        }
        else
        {
          *uint64_t v6 = 0;
          v6[1] = 0;
          unsigned __int16 v6[2] = 0;
          *(_OWORD *)uint64_t v6 = v65;
          unsigned __int16 v6[2] = __p;
          long long v65 = 0uLL;
          *(void *)&long long __p = 0;
          CFMutableDictionaryRef v8 = v6 + 3;
        }
        a4[1] = v8;
        uint64_t v70 = (void **)&v65;
        std::vector<KB::LikelihoodInfo>::__destroy_vector::operator()[abi:nn180100](&v70);
        v4 += 250;
      }
      while (v4 != v5);
    }
  }
  else
  {
    unint64_t v16 = *a1;
    if (a1[1] != *a1)
    {
      unint64_t v18 = 0;
      do
      {
        CFMutableDictionaryRef v19 = &v16[250 * v18];
        int64x2_t v68 = 0uLL;
        uint64_t v69 = 0;
        if (*(void *)v19)
        {
          unint64_t v20 = 0;
          do
          {
            if (*(unsigned char *)(*(void *)(*a2 + 24 * v18) + 2 * v20))
            {
              LODWORD(v65) = *(_DWORD *)(*((void *)v19 + 1) + 240 * v20 + 52);
              *(void *)((char *)&v65 + 4) = v65;
              std::string::basic_string[abi:nn180100]<0>(&__p, "");
              uint64_t v21 = v68.i64[1];
              if (v68.i64[1] >= (unint64_t)v69)
              {
                unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((v68.i64[1] - v68.i64[0]) >> 3);
                unint64_t v29 = v28 + 1;
                if (v28 + 1 > 0x666666666666666) {
                  goto LABEL_64;
                }
                if (0x999999999999999ALL * ((uint64_t)&v69[-v68.i64[0]] >> 3) > v29) {
                  unint64_t v29 = 0x999999999999999ALL * ((uint64_t)&v69[-v68.i64[0]] >> 3);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v69[-v68.i64[0]] >> 3) >= 0x333333333333333) {
                  unint64_t v30 = 0x666666666666666;
                }
                else {
                  unint64_t v30 = v29;
                }
                int64x2_t v73 = &v69;
                if (v30) {
                  unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::LikelihoodInfo>>(v30);
                }
                else {
                  uint64_t v31 = 0;
                }
                unint64_t v38 = v30 + 40 * v28;
                uint64_t v39 = v65;
                *(_DWORD *)(v38 + 8) = DWORD2(v65);
                *(void *)unint64_t v38 = v39;
                long long v40 = __p;
                *(void *)(v38 + 32) = v67;
                *(_OWORD *)(v38 + 16) = v40;
                uint64_t v67 = 0;
                long long __p = 0uLL;
                uint64_t v41 = v68.i64[1];
                uint64_t v42 = v68.i64[0];
                if (v68.i64[1] == v68.i64[0])
                {
                  int64x2_t v47 = vdupq_n_s64(v68.u64[1]);
                  unint64_t v43 = v30 + 40 * v28;
                }
                else
                {
                  unint64_t v43 = v30 + 40 * v28;
                  do
                  {
                    uint64_t v44 = *(void *)(v41 - 40);
                    v41 -= 40;
                    int v45 = *(_DWORD *)(v41 + 8);
                    *(void *)(v43 - 40) = v44;
                    v43 -= 40;
                    *(_DWORD *)(v43 + 8) = v45;
                    long long v46 = *(_OWORD *)(v41 + 16);
                    *(void *)(v43 + 32) = *(void *)(v41 + 32);
                    *(_OWORD *)(v43 + 16) = v46;
                    *(void *)(v41 + 24) = 0;
                    *(void *)(v41 + 32) = 0;
                    *(void *)(v41 + 16) = 0;
                  }
                  while (v41 != v42);
                  int64x2_t v47 = v68;
                }
                unint64_t v48 = v38 + 40;
                v68.i64[0] = v43;
                v68.i64[1] = v38 + 40;
                int64x2_t v71 = v47;
                BOOL v49 = (void **)v69;
                uint64_t v69 = (char *)(v30 + 40 * v31);
                uint64_t v72 = v49;
                uint64_t v70 = (void **)v47.i64[0];
                std::__split_buffer<KB::LikelihoodInfo>::~__split_buffer((uint64_t)&v70);
                v68.i64[1] = v48;
                if (SHIBYTE(v67) < 0) {
                  operator delete((void *)__p);
                }
              }
              else
              {
                uint64_t v22 = v65;
                *(_DWORD *)(v68.i64[1] + 8) = DWORD2(v65);
                *(void *)uint64_t v21 = v22;
                long long v23 = __p;
                *(void *)(v21 + 32) = v67;
                *(_OWORD *)(v21 + 16) = v23;
                v68.i64[1] = v21 + 40;
              }
            }
            else
            {
              uint64_t v24 = (uint64_t *)v68.i64[1];
              if (v68.i64[1] >= (unint64_t)v69)
              {
                unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * ((v68.i64[1] - v68.i64[0]) >> 3);
                unint64_t v33 = v32 + 1;
                if (v32 + 1 > 0x666666666666666) {
LABEL_64:
                }
                  abort();
                if (0x999999999999999ALL * ((uint64_t)&v69[-v68.i64[0]] >> 3) > v33) {
                  unint64_t v33 = 0x999999999999999ALL * ((uint64_t)&v69[-v68.i64[0]] >> 3);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v69[-v68.i64[0]] >> 3) >= 0x333333333333333) {
                  unint64_t v34 = 0x666666666666666;
                }
                else {
                  unint64_t v34 = v33;
                }
                int64x2_t v73 = &v69;
                if (v34)
                {
                  char v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::LikelihoodInfo>>(v34);
                  uint64_t v37 = v36;
                }
                else
                {
                  char v35 = 0;
                  uint64_t v37 = 0;
                }
                unint64_t v51 = &v35[40 * v32];
                uint64_t v52 = KB::k_invalid_likelihood_value;
                *((_DWORD *)v51 + 2) = dword_1EAE3F8C0;
                *(void *)unint64_t v51 = v52;
                uint64_t v53 = (std::string *)(v51 + 16);
                if (byte_1EAE3F8DF < 0)
                {
                  std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)aInvalidLikelih_1, *(std::string::size_type *)&aInvalidLikelih_1[8]);
                }
                else
                {
                  long long v54 = *(_OWORD *)aInvalidLikelih_1;
                  *((void *)v51 + 4) = *(void *)&aInvalidLikelih_1[16];
                  *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
                }
                uint64_t v55 = v68.i64[1];
                uint64_t v56 = v68.i64[0];
                if (v68.i64[1] == v68.i64[0])
                {
                  int64x2_t v61 = vdupq_n_s64(v68.u64[1]);
                  char v57 = v51;
                }
                else
                {
                  char v57 = v51;
                  do
                  {
                    uint64_t v58 = *(void *)(v55 - 40);
                    v55 -= 40;
                    int v59 = *(_DWORD *)(v55 + 8);
                    *((void *)v57 - 5) = v58;
                    v57 -= 40;
                    *((_DWORD *)v57 + 2) = v59;
                    long long v60 = *(_OWORD *)(v55 + 16);
                    *((void *)v57 + 4) = *(void *)(v55 + 32);
                    *((_OWORD *)v57 + 1) = v60;
                    *(void *)(v55 + 24) = 0;
                    *(void *)(v55 + 32) = 0;
                    *(void *)(v55 + 16) = 0;
                  }
                  while (v55 != v56);
                  int64x2_t v61 = v68;
                }
                uint64_t v50 = v51 + 40;
                v68.i64[0] = (uint64_t)v57;
                v68.i64[1] = (uint64_t)v50;
                int64x2_t v71 = v61;
                uint64_t v62 = (void **)v69;
                uint64_t v69 = &v35[40 * v37];
                uint64_t v72 = v62;
                uint64_t v70 = (void **)v61.i64[0];
                std::__split_buffer<KB::LikelihoodInfo>::~__split_buffer((uint64_t)&v70);
              }
              else
              {
                uint64_t v25 = KB::k_invalid_likelihood_value;
                *(_DWORD *)(v68.i64[1] + 8) = dword_1EAE3F8C0;
                *uint64_t v24 = v25;
                char v26 = (std::string *)(v24 + 2);
                if (byte_1EAE3F8DF < 0)
                {
                  std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)aInvalidLikelih_1, *(std::string::size_type *)&aInvalidLikelih_1[8]);
                }
                else
                {
                  long long v27 = *(_OWORD *)aInvalidLikelih_1;
                  v24[4] = *(void *)&aInvalidLikelih_1[16];
                  *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
                }
                uint64_t v50 = v24 + 5;
              }
              v68.i64[1] = (uint64_t)v50;
            }
            ++v20;
          }
          while (v20 < *(void *)v19);
        }
        std::vector<std::vector<KB::LikelihoodInfo>>::emplace_back<std::vector<KB::LikelihoodInfo>&>(a4, (long long **)&v68);
        uint64_t v70 = (void **)&v68;
        std::vector<KB::LikelihoodInfo>::__destroy_vector::operator()[abi:nn180100](&v70);
        ++v18;
        unint64_t v16 = *a1;
      }
      while (v18 < 0x1CAC083126E978D5 * (((char *)a1[1] - (char *)*a1) >> 3));
    }
  }
}

void KB::LanguageModelImplStub::conditional_likelihood(KB::LanguageModelImplStub *this@<X0>, const TITokenID *a2@<X2>, float a3@<S0>, __CFString *a4@<X4>, uint64_t a5@<X8>)
{
  BOOL v11 = KB::LanguageModel::lexicon_id_active(this, a2->lexicon_id);
  if (a2->word_id < 0x1F4 || v11)
  {
    if (a4) {
      KB::append_format(a4, (__CFString *)"LMMock - LM_score %f", v12, a3);
    }
    *(float *)a5 = a3;
    *(float *)(a5 + 4) = a3;
    *(_DWORD *)(a5 + 8) = 0;
    std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 16), "");
  }
  else
  {
    *(void *)a5 = KB::k_invalid_likelihood_value;
    *(_DWORD *)(a5 + 8) = dword_1EAE3F8C0;
    TITokenID v13 = (std::string *)(a5 + 16);
    if (byte_1EAE3F8DF < 0)
    {
      os_signpost_id_t v14 = *(const std::string::value_type **)aInvalidLikelih_1;
      std::string::size_type v15 = *(void *)&aInvalidLikelih_1[8];
      std::string::__init_copy_ctor_external(v13, v14, v15);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)aInvalidLikelih_1;
      *(void *)(a5 + 32) = *(void *)&aInvalidLikelih_1[16];
    }
  }
}

double KB::LanguageModelImplStub::marginal_likelihood(KB::LanguageModelImplStub *this, const KB::String *a2, const TITokenID *a3)
{
  return 0.0;
}

uint64_t KB::LanguageModelImplStub::is_swear_word_policy_enabled(KB::LanguageModelImplStub *this)
{
  return 0;
}

uint64_t KB::LanguageModelImplStub::should_adapt_to_paragraph(KB::LanguageModelImplStub *this, const __CFString *a2)
{
  return 0;
}

uint64_t KB::LanguageModelImplStub::register_negative_evidence(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a6 == 1) {
    return (*(uint64_t (**)(void))(*(void *)result + 352))();
  }
  return result;
}

void KB::LanguageModelImplStub::decrement_usage_count(KB::LanguageModelImplStub *this, const KB::String *a2, const TITokenID *a3, const KB::LanguageModelContext *a4)
{
  if ((*(unsigned int (**)(KB::LanguageModelImplStub *, const KB::String *, const TITokenID *, const KB::LanguageModelContext *))(*(void *)this + 16))(this, a2, a3, a4))
  {
    unint64_t v7 = HIDWORD(*(unint64_t *)a3);
    if (v7)
    {
      if (v7 >= 0x1F4 && *(_WORD *)a2 != 0)
      {
        if ((*((unsigned char *)this + 169) & 1) != 0
          && (uint64_t v9 = *((void *)this + 19), *(void *)v9)
          && (atomic_load_explicit((atomic_uchar *volatile)(v9 + 120), memory_order_acquire) & 1) != 0)
        {
          unint64_t v10 = *(KB::LexiconWrapperBase **)v9;
        }
        else
        {
          unint64_t v10 = 0;
        }
        KB::LexiconWrapperBase::entry_for_string(v10, a2, &cf);
        if (cf)
        {
          if ((*((unsigned char *)this + 169) & 1) != 0
            && (uint64_t v11 = *((void *)this + 19), *(void *)v11)
            && (atomic_load_explicit((atomic_uchar *volatile)(v11 + 120), memory_order_acquire) & 1) != 0)
          {
            unint64_t v12 = *(KB::MutableLexiconWrapper **)v11;
          }
          else
          {
            unint64_t v12 = 0;
          }
          KB::MutableLexiconWrapper::increment_usage_count(v12, a2);
          if (cf) {
            CFRelease(cf);
          }
        }
      }
    }
  }
}

void KB::LanguageModelImplStub::increment_usage_count(KB::LanguageModelImplStub *this, const KB::String *a2, const TITokenID *a3, const KB::LanguageModelContext *a4)
{
  if ((*(unsigned int (**)(KB::LanguageModelImplStub *, const KB::String *, const TITokenID *, const KB::LanguageModelContext *))(*(void *)this + 16))(this, a2, a3, a4))
  {
    if (a3->word_id >= 0x1F4 && *(_WORD *)a2 != 0)
    {
      if ((*((unsigned char *)this + 169) & 1) != 0
        && (uint64_t v8 = *((void *)this + 19), *(void *)v8)
        && (atomic_load_explicit((atomic_uchar *volatile)(v8 + 120), memory_order_acquire) & 1) != 0)
      {
        uint64_t v9 = *(KB::MutableLexiconWrapper **)v8;
      }
      else
      {
        uint64_t v9 = 0;
      }
      KB::MutableLexiconWrapper::increment_usage_count(v9, a2);
    }
  }
}

uint64_t KB::LanguageModelImplStub::add_dynamic_word(KB::LanguageModelImplStub *this, const __CFString *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (*(uint64_t (**)(KB::LanguageModelImplStub *))(*(void *)this + 40))(this);
  if ((*(unsigned int (**)(KB::LanguageModelImplStub *))(*(void *)this + 16))(this))
  {
    KB::utf8_string(a2, (uint64_t)v10);
    if ((*((unsigned char *)this + 169) & 1) != 0
      && (uint64_t v5 = *((void *)this + 19), *(void *)v5)
      && (atomic_load_explicit((atomic_uchar *volatile)(v5 + 120), memory_order_acquire) & 1) != 0)
    {
      uint64_t v6 = *(KB::MutableLexiconWrapper **)v5;
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v7 = KB::MutableLexiconWrapper::add_entry(v6, (const KB::String *)v10);
    if (v11 && v10[6] == 1) {
      free(v11);
    }
    uint64_t v8 = v7 << 32;
  }
  else
  {
    uint64_t v8 = 0;
  }
  return v8 | v4;
}

BOOL KB::LanguageModelImplStub::is_dynamic_word_id(KB::LanguageModelImplStub *this, unint64_t a2)
{
  return a2 >> 54 == 3;
}

void KB::LanguageModelImplStub::set_dynamic_resource_directory(const void **a1, const UInt8 *a2)
{
  KB::cf_string(a2, (CFStringRef *)&cf);
  CFTypeRef v3 = cf;
  KB::retain_ptr<__CFDictionary const*>::operator=(a1 + 5, cf);
  if (v3) {
    CFRelease(v3);
  }

  KB::LanguageModelImplStub::_load_dynamic((KB::LanguageModelImplStub *)a1);
}

void KB::LanguageModelImplStub::remove_dynamic_resource_directory(KB::LanguageModelImplStub *this)
{
  if ((*((unsigned char *)this + 169) & 1) != 0
    && (uint64_t v2 = *((void *)this + 19), *(void *)v2)
    && (atomic_load_explicit((atomic_uchar *volatile)(v2 + 120), memory_order_acquire) & 1) != 0)
  {
    CFTypeRef v3 = *(KB::MutableLexiconWrapper **)v2;
  }
  else
  {
    CFTypeRef v3 = 0;
  }
  KB::MutableLexiconWrapper::store(v3);
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 20);
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }
}

uint64_t KB::LanguageModelImplStub::synchronized_load(KB::LanguageModelImplStub *this)
{
  return (*(uint64_t (**)(KB::LanguageModelImplStub *, uint64_t))(*(void *)this + 72))(this, 1);
}

void KB::LanguageModelImplStub::load(atomic_uchar *this)
{
  uint64_t v2 = (KB::LanguageModel *)pthread_main_np();
  if (v2)
  {
    KB::LanguageModelImplStub::_load_if_necessary((KB::LanguageModelImplStub *)this);
    if ((atomic_load_explicit(this + 169, memory_order_acquire) & 1) == 0)
    {
      KB::LanguageModelImplStub::_wait_for_load((KB::LanguageModelImplStub *)this);
    }
  }
  else
  {
    CFTypeRef v3 = KB::LanguageModel::background_loading_queue(v2);
    TIDispatchSync();
  }
}

uint64_t ___ZN2KB21LanguageModelImplStub4loadEb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 584))();
}

void KB::LanguageModelImplStub::active_locale_identifiers_vector(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t KB::LanguageModelImplStub::supports_prediction(KB::LanguageModelImplStub *this)
{
  return 0;
}

uint64_t KB::LanguageModelImplStub::is_string_based_lm_model(KB::LanguageModelImplStub *this)
{
  return 0;
}

BOOL KB::LanguageModelImplStub::is_valid(KB::LanguageModelImplStub *this)
{
  if ((*((unsigned char *)this + 169) & 1) == 0) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 19);
  if (!*(void *)v1
    || (atomic_load_explicit((atomic_uchar *volatile)(v1 + 120), memory_order_acquire) & 1) == 0
    || !*(void *)v1)
  {
    return 0;
  }
  if ((*((unsigned char *)this + 169) & 1) != 0
    && (uint64_t v2 = (atomic_uchar *)*((void *)this + 19), *(void *)v2)
    && (atomic_load_explicit(v2 + 120, memory_order_acquire) & 1) != 0)
  {
    uint64_t v3 = *(void *)v2;
  }
  else
  {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3) != 0;
}

void KB::LanguageModelImplStub::~LanguageModelImplStub(KB::LanguageModelImplStub *this)
{
  KB::LanguageModelImplStub::~LanguageModelImplStub(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  void *v6;
  void *v7;

  *(void *)this = &unk_1F3F774F8;
  KB::LanguageModelImplStub::wrapper_cache_mutex(this);
  std::mutex::lock(&KB::LanguageModelImplStub::wrapper_cache_mutex(void)::mutex);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  std::mutex::unlock(&KB::LanguageModelImplStub::wrapper_cache_mutex(void)::mutex);
  std::mutex::~mutex((std::mutex *)((char *)this + 224));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 176));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  *(void *)this = &unk_1F3F777B0;
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 16);
  if (v5)
  {
    _Block_release(v5);
    uint64_t v6 = (void *)*((void *)this + 16);
  }
  else
  {
    uint64_t v6 = 0;
  }
  *((void *)this + 16) = 0;

  uint64_t v7 = (void *)*((void *)this + 13);
  if (v7)
  {
    *((void *)this + 14) = v7;
    operator delete(v7);
  }
  KB::LanguageModelConfig::~LanguageModelConfig((KB::LanguageModelImplStub *)((char *)this + 8));
}

double KB::LanguageModelImplStub::LanguageModelImplStub(KB::LanguageModelImplBase *a1, const KB::LanguageModelConfig *a2)
{
  uint64_t v2 = KB::LanguageModelImplBase::LanguageModelImplBase(a1, a2);
  *(void *)uint64_t v2 = &unk_1F3F774F8;
  *((void *)v2 + 19) = 0;
  *((void *)v2 + 20) = 0;
  *((_WORD *)v2 + 84) = 0;
  *((void *)v2 + 22) = 1018212795;
  double result = 0.0;
  *(_OWORD *)((char *)v2 + 184) = 0u;
  *(_OWORD *)((char *)v2 + 200) = 0u;
  *((void *)v2 + 27) = 0;
  *((void *)v2 + 28) = 850045863;
  *(_OWORD *)((char *)v2 + 232) = 0u;
  *(_OWORD *)((char *)v2 + 248) = 0u;
  *((void *)v2 + 35) = 0;
  *(_OWORD *)((char *)v2 + 264) = 0u;
  *((unsigned char *)v2 + 169) = 0;
  return result;
}

{
  KB::LanguageModelImplBase *v2;
  double result;

  uint64_t v2 = KB::LanguageModelImplBase::LanguageModelImplBase(a1, a2);
  *(void *)uint64_t v2 = &unk_1F3F774F8;
  *((void *)v2 + 19) = 0;
  *((void *)v2 + 20) = 0;
  *((_WORD *)v2 + 84) = 0;
  *((void *)v2 + 22) = 1018212795;
  double result = 0.0;
  *(_OWORD *)((char *)v2 + 184) = 0u;
  *(_OWORD *)((char *)v2 + 200) = 0u;
  *((void *)v2 + 27) = 0;
  *((void *)v2 + 28) = 850045863;
  *(_OWORD *)((char *)v2 + 232) = 0u;
  *(_OWORD *)((char *)v2 + 248) = 0u;
  *((void *)v2 + 35) = 0;
  *(_OWORD *)((char *)v2 + 264) = 0u;
  *((unsigned char *)v2 + 169) = 0;
  return result;
}

uint64_t KB::LanguageModelImplStub::lexicon_wrapper(KB::LanguageModelImplStub *this)
{
  if ((*((unsigned char *)this + 169) & 1) != 0
    && (uint64_t v1 = (atomic_uchar *)*((void *)this + 19), *(void *)v1)
    && (atomic_load_explicit(v1 + 120, memory_order_acquire) & 1) != 0)
  {
    return *(void *)v1;
  }
  else
  {
    return 0;
  }
}

uint64_t KB::LanguageModelImplStub::WrapperHandle::get(atomic_uchar *this)
{
  if (*(void *)this && (atomic_load_explicit(this + 120, memory_order_acquire) & 1) != 0) {
    return *(void *)this;
  }
  else {
    return 0;
  }
}

void KB::LanguageModelImplStub::perform_maintenance(KB::LanguageModelImplStub *this)
{
}

void KB::LanguageModelImplStub::enumerate_cached_wrappers(void *a1)
{
  uint64_t v1 = a1;
  KB::LanguageModelImplStub::copy_wrapper_cache((KB::LanguageModelImplStub *)v1, (uint64_t)v9);
  for (uint64_t i = v10; i; uint64_t i = *(long long **)i)
  {
    std::pair<std::string const,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>::pair[abi:nn180100](&__p, i + 1);
    if (v8)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v8);
      if (v3)
      {
        unsigned int v4 = v3;
        uint64_t v5 = v7;
        if (v7
          && *(void *)v7
          && (atomic_load_explicit((atomic_uchar *volatile)(v7 + 120), memory_order_acquire) & 1) != 0
          && *(void *)v5
          && (atomic_load_explicit((atomic_uchar *volatile)(v5 + 120), memory_order_acquire) & 1) != 0
          && *(void *)v5)
        {
          v1[2](v1);
        }
        std::__shared_weak_count::__release_shared[abi:nn180100](v4);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>>>::~__hash_table((uint64_t)v9);
}

void KB::LanguageModelImplStub::copy_wrapper_cache(KB::LanguageModelImplStub *this@<X0>, uint64_t a2@<X8>)
{
  KB::LanguageModelImplStub::wrapper_cache_mutex(this);
  std::mutex::lock(&KB::LanguageModelImplStub::wrapper_cache_mutex(void)::mutex);
  KB::LanguageModelImplStub::wrapper_cache(v4);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = dword_1EBFF0740;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a2, *((size_t *)&KB::LanguageModelImplStub::wrapper_cache(void)::cache + 1));
  uint64_t v5 = qword_1EBFF0730;
  if (qword_1EBFF0730)
  {
    uint64_t v6 = (void *)(a2 + 16);
    do
    {
      int v7 = *(char *)(v5 + 39);
      if (v7 >= 0) {
        uint64_t v8 = (uint64_t *)(v5 + 16);
      }
      else {
        uint64_t v8 = *(uint64_t **)(v5 + 16);
      }
      if (v7 >= 0) {
        unint64_t v9 = *(unsigned __int8 *)(v5 + 39);
      }
      else {
        unint64_t v9 = *(void *)(v5 + 24);
      }
      unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v8, v9);
      unint64_t v11 = v10;
      unint64_t v12 = *(void *)(a2 + 8);
      if (v12)
      {
        uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v13.i16[0] = vaddlv_u8(v13);
        unint64_t v14 = v13.u32[0];
        if (v13.u32[0] > 1uLL)
        {
          unint64_t v2 = v10;
          if (v10 >= v12) {
            unint64_t v2 = v10 % v12;
          }
        }
        else
        {
          unint64_t v2 = (v12 - 1) & v10;
        }
        std::string::size_type v15 = *(unsigned __int8 ***)(*(void *)a2 + 8 * v2);
        if (v15)
        {
          for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v17 = *((void *)i + 1);
            if (v17 == v11)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)(v5 + 16))) {
                goto LABEL_47;
              }
            }
            else
            {
              if (v14 > 1)
              {
                if (v17 >= v12) {
                  v17 %= v12;
                }
              }
              else
              {
                v17 &= v12 - 1;
              }
              if (v17 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v18 = (char *)operator new(0x38uLL);
      v28[1] = a2 + 16;
      *(void *)unint64_t v18 = 0;
      *((void *)v18 + 1) = v11;
      std::pair<std::string const,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>::pair[abi:nn180100]((std::string *)(v18 + 16), (long long *)(v5 + 16));
      char v29 = 1;
      float v19 = (float)(unint64_t)(*(void *)(a2 + 24) + 1);
      float v20 = *(float *)(a2 + 32);
      if (!v12 || (float)(v20 * (float)v12) < v19)
      {
        BOOL v21 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3) {
          BOOL v21 = 1;
        }
        unint64_t v22 = v21 | (2 * v12);
        unint64_t v23 = vcvtps_u32_f32(v19 / v20);
        if (v22 <= v23) {
          size_t v24 = v23;
        }
        else {
          size_t v24 = v22;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a2, v24);
        unint64_t v12 = *(void *)(a2 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12) {
            unint64_t v2 = v11 % v12;
          }
          else {
            unint64_t v2 = v11;
          }
        }
        else
        {
          unint64_t v2 = (v12 - 1) & v11;
        }
      }
      uint64_t v25 = *(void *)a2;
      char v26 = *(void **)(*(void *)a2 + 8 * v2);
      if (v26)
      {
        *(void *)unint64_t v18 = *v26;
      }
      else
      {
        *(void *)unint64_t v18 = *v6;
        *uint64_t v6 = v18;
        *(void *)(v25 + 8 * v2) = v6;
        if (!*(void *)v18) {
          goto LABEL_46;
        }
        unint64_t v27 = *(void *)(*(void *)v18 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v27 >= v12) {
            v27 %= v12;
          }
        }
        else
        {
          v27 &= v12 - 1;
        }
        char v26 = (void *)(*(void *)a2 + 8 * v27);
      }
      *char v26 = v18;
LABEL_46:
      v28[0] = 0;
      ++*(void *)(a2 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>,void *>>>>::reset[abi:nn180100]((uint64_t)v28);
LABEL_47:
      uint64_t v5 = *(void *)v5;
    }
    while (v5);
  }

  std::mutex::unlock(&KB::LanguageModelImplStub::wrapper_cache_mutex(void)::mutex);
}

std::string *std::pair<std::string const,std::weak_ptr<KB::LanguageModelImplStub::WrapperHandle>>::pair[abi:nn180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t ___ZN2KB21LanguageModelImplStub19perform_maintenanceEv_block_invoke(int a1, KB::MutableLexiconWrapper *this)
{
  if (this) {
    return KB::MutableLexiconWrapper::store(this);
  }
  return result;
}

KB::LanguageModelImplStub::WrapperHandle *KB::LanguageModelImplStub::WrapperHandle::WrapperHandle(KB::LanguageModelImplStub::WrapperHandle *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 850045863;
  unint64_t v2 = (std::mutex *)((char *)this + 8);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 1018212795;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((unsigned char *)this + 120) = 0;
  std::mutex::unlock(v2);
  return this;
}

{
  std::mutex *v2;

  *(void *)this = 0;
  *((void *)this + 1) = 850045863;
  unint64_t v2 = (std::mutex *)((char *)this + 8);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 1018212795;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((unsigned char *)this + 120) = 0;
  std::mutex::unlock(v2);
  return this;
}

uint64_t KB::LanguageModelImplStub::WrapperHandle::ready(KB::LanguageModelImplStub::WrapperHandle *this)
{
  return *((unsigned char *)this + 120) & 1;
}

void TI::Favonius::Key::create(TI::Favonius::Key *this, const KB::String *a2, const KB::ByteString *a3)
{
}

TI::Favonius::Key *TI::Favonius::Key::Key(TI::Favonius::Key *this, const KB::String *a2, const KB::ByteString *a3)
{
  *(_DWORD *)this = 1;
  std::string::size_type v5 = (_OWORD *)((char *)this + 40);
  uint64_t v6 = (_WORD *)((char *)this + 8);
  TI::Favonius::Key::string_for_represented_string(a2, (uint64_t)this + 8);
  unint64_t v7 = *(unsigned __int16 *)a3;
  if (v7 >= 0xF)
  {
    *((_WORD *)this + 20) = v7;
    operator new[]();
  }
  *std::string::size_type v5 = *(_OWORD *)a3;
  int v8 = (unsigned __int16)*v6;
  if (*v6)
  {
    unint64_t v9 = (char *)*((void *)this + 2);
    if (!v9) {
      unint64_t v9 = (char *)this + 24;
    }
    unint64_t v12 = v9;
    int v13 = 0;
    int v14 = v8;
    UChar32 v15 = 0;
    KB::String::iterator::initialize((uint64_t *)&v12);
    UChar32 v10 = v15;
  }
  else
  {
    UChar32 v10 = 0;
  }
  *((_DWORD *)this + 14) = v10;
  TI::Favonius::KeyClassification::KeyClassification((TI::Favonius::Key *)((char *)this + 60), v10);
  return this;
}

KB::String *TI::Favonius::Key::string_for_represented_string@<X0>(TI::Favonius::Key *this@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v5 = (const char *)*((void *)this + 1);
  if (!v5) {
    std::string::size_type v5 = (char *)this + 16;
  }
  if (*(_WORD *)this) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = "";
  }
  uint64_t result = (KB::String *)strcmp(v6, "delete");
  if (!result)
  {
    *(_WORD *)(a2 + 4) = 0;
    *(unsigned char *)(a2 + 6) = 1;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    char v8 = 8;
LABEL_20:
    *(unsigned char *)(a2 + 16) = v8;
    *(_DWORD *)a2 = 1048577;
    return result;
  }
  uint64_t result = (KB::String *)strcmp(v6, "shift");
  if (!result)
  {
    *(_WORD *)(a2 + 4) = 0;
    *(unsigned char *)(a2 + 6) = 1;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    char v8 = 14;
    goto LABEL_20;
  }
  uint64_t result = (KB::String *)strcmp(v6, "more");
  if (!result)
  {
    *(_WORD *)(a2 + 4) = 0;
    *(unsigned char *)(a2 + 6) = 1;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    char v8 = 16;
    goto LABEL_20;
  }
  uint64_t result = (KB::String *)strcmp(v6, "international");
  if (!result)
  {
    *(_WORD *)(a2 + 4) = 0;
    *(unsigned char *)(a2 + 6) = 1;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    char v8 = 15;
    goto LABEL_20;
  }
  uint64_t result = (KB::String *)strcmp(v6, "dismiss");
  if (!result)
  {
    *(_WORD *)(a2 + 4) = 0;
    *(unsigned char *)(a2 + 6) = 1;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    char v8 = 4;
    goto LABEL_20;
  }
  uint64_t result = (KB::String *)strcmp(v6, "undo");
  if (result)
  {
    return KB::String::String((KB::String *)a2, this);
  }
  else
  {
    *(_WORD *)(a2 + 4) = 0;
    *(unsigned char *)(a2 + 6) = 1;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(_WORD *)(a2 + 16) = -28958;
    *(_DWORD *)a2 = 1048579;
    *(unsigned char *)(a2 + 18) = -116;
  }
  return result;
}