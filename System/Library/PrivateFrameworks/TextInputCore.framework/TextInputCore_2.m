void TI::Favonius::Key::create(TI::Favonius::Key *this, unsigned int a2, const KB::ByteString *a3)
{
  unsigned char v3[6];
  uint64_t v4;

  v4 = *MEMORY[0x1E4F143B8];
  KB::String::String((uint64_t)v3, this);
  operator new();
}

void TI::Favonius::Key::append_debug_string_for_char(TI::Favonius::Key *this, KB::String *a2)
{
  switch((int)a2)
  {
    case 4:
      v2 = "<DISMISS>";
      goto LABEL_11;
    case 5:
    case 6:
    case 7:
    case 9:
    case 11:
    case 12:
    case 13:
      goto LABEL_5;
    case 8:
      v2 = "^H";
      goto LABEL_11;
    case 10:
      v2 = "<RETURN>";
      goto LABEL_11;
    case 14:
      v2 = "<SHIFT>";
      goto LABEL_11;
    case 15:
      v2 = "<GLOBE>";
      goto LABEL_11;
    case 16:
      v2 = "<MORE>";
      goto LABEL_11;
    default:
      if (a2 == 9100)
      {
        v2 = "<UNDO>";
LABEL_11:
        KB::String::append((unsigned __int16 *)this, v2, 0xFFFFuLL);
      }
      else
      {
LABEL_5:
        KB::String::append(this, a2);
      }
      return;
  }
}

uint64_t *TI::Favonius::Key::append_debug_data(TI::Favonius::Key *this, KB::String *a2)
{
  v3 = (char *)*((void *)this + 2);
  if (!v3) {
    v3 = (char *)this + 24;
  }
  v6 = v3;
  int v4 = *((unsigned __int16 *)this + 4);
  int v7 = 0;
  int v8 = v4;
  LODWORD(v9) = 0;
  result = KB::String::iterator::initialize((uint64_t *)&v6);
  while (v9)
  {
    TI::Favonius::Key::append_debug_string_for_char(a2, (KB::String *)v9);
    result = KB::String::iterator::operator++((uint64_t *)&v6);
  }
  return result;
}

uint64_t *TI::Favonius::Key::debug_data@<X0>(TI::Favonius::Key *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return TI::Favonius::Key::append_debug_data(this, (KB::String *)a2);
}

uint64_t TI::Favonius::KeyFactory::create_key(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 48))(&v5);
    operator new();
  }
  v2 = (TI::Favonius::KeyFactory *)std::__throw_bad_function_call[abi:nn180100]();
  return TI::Favonius::KeyFactory::create_key(v2, v3);
}

void TI::Favonius::KeyFactory::create_key(TI::Favonius::KeyFactory *this@<X0>, unsigned int a2@<W1>, atomic_uint **a3@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = a2;
  unint64_t v8 = *((void *)this + 5);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v8 <= a2) {
        unint64_t v3 = a2 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & a2;
    }
    v10 = *(void ***)(*((void *)this + 4) + 8 * v3);
    if (v10)
    {
      for (i = *v10; i; i = *(void **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            goto LABEL_74;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  v13 = (void *)((char *)this + 48);
  i = operator new(0x20uLL);
  *(void *)i = 0;
  *((void *)i + 1) = v7;
  *((_DWORD *)i + 4) = a2;
  *((void *)i + 3) = 0;
  float v14 = (float)(unint64_t)(*((void *)this + 7) + 1);
  float v15 = *((float *)this + 16);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)this + 5);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)this + 7) / *((float *)this + 16));
      if (v8 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)this + 5);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            goto LABEL_88;
          }
          v20 = operator new(8 * *(void *)&prime);
          v21 = (void *)*((void *)this + 4);
          *((void *)this + 4) = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)this + 5) = prime;
          do
            *(void *)(*((void *)this + 4) + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          v23 = (void *)*v13;
          if (*v13)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*((void *)this + 4) + 8 * v24) = v13;
            v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  uint64_t v31 = *((void *)this + 4);
                  if (!*(void *)(v31 + 8 * v30))
                  {
                    *(void *)(v31 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  void *v23 = *v29;
                  void *v29 = **(void **)(*((void *)this + 4) + 8 * v30);
                  **(void **)(*((void *)this + 4) + 8 * v30) = v29;
                  v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        v38 = (void *)*((void *)this + 4);
        *((void *)this + 4) = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v8 = 0;
        *((void *)this + 5) = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v32 = *((void *)this + 4);
  v33 = *(void **)(v32 + 8 * v3);
  if (v33)
  {
    *(void *)i = *v33;
LABEL_72:
    void *v33 = i;
    goto LABEL_73;
  }
  v34 = (void *)*v13;
  *(void *)i = *v13;
  void *v13 = i;
  *(void *)(v32 + 8 * v3) = v13;
  if (v34)
  {
    unint64_t v35 = v34[1];
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8) {
        v35 %= v8;
      }
    }
    else
    {
      v35 &= v8 - 1;
    }
    v33 = (void *)(*((void *)this + 4) + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)this + 7);
LABEL_74:
  v36 = (atomic_uint *)*((void *)i + 3);
  if (!v36)
  {
    KB::String::String((uint64_t)v40, a2);
    uint64_t v37 = *((void *)this + 3);
    if (v37)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v37 + 48))(&v39);
      operator new();
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_88:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  *a3 = v36;
  atomic_fetch_add(v36, 1u);
}

void TI::Favonius::KeyFactory::clear_cache(TI::Favonius::KeyFactory *this)
{
  if (*((void *)this + 7))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>>>::__deallocate_node(*((void **)this + 6));
    *((void *)this + 6) = 0;
    uint64_t v2 = *((void *)this + 5);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*((void *)this + 4) + 8 * i) = 0;
    }
    *((void *)this + 7) = 0;
  }
}

void TI::Favonius::LayoutKey::create(TI::Favonius::LayoutKey *this, const KB::String *a2, const KB::ByteString *a3, CGRect a4)
{
}

TI::Favonius::LayoutKey *TI::Favonius::LayoutKey::LayoutKey(TI::Favonius::LayoutKey *this, const KB::String *a2, const KB::ByteString *a3, CGRect a4, __int16 a5)
{
  CGFloat height = a4.size.height;
  CGFloat width = a4.size.width;
  CGFloat y = a4.origin.y;
  CGFloat x = a4.origin.x;
  v11 = TI::Favonius::Key::Key(this, a2, a3);
  *((_WORD *)v11 + 31) = a5;
  *((CGFloat *)v11 + 8) = x;
  *((CGFloat *)v11 + 9) = y;
  *((CGFloat *)v11 + 10) = width;
  *((CGFloat *)v11 + 11) = height;
  v15.origin.CGFloat x = x;
  v15.origin.CGFloat y = y;
  v15.size.CGFloat width = width;
  v15.size.CGFloat height = height;
  CGFloat MidX = CGRectGetMidX(v15);
  v16.origin.CGFloat x = x;
  v16.origin.CGFloat y = y;
  v16.size.CGFloat width = width;
  v16.size.CGFloat height = height;
  CGFloat MidY = CGRectGetMidY(v16);
  *((CGFloat *)this + 12) = MidX;
  *((CGFloat *)this + 13) = MidY;
  return this;
}

void TI::Favonius::KeyMatch::create()
{
}

uint64_t TI::Favonius::KeyMatch::KeyMatch(uint64_t result, atomic_uint **a2, double a3, double a4, float a5)
{
  *(_DWORD *)result = 1;
  uint64_t v5 = *a2;
  *(void *)(result + 8) = *a2;
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  *(double *)(result + 16) = a3;
  *(double *)(result + 24) = a4;
  *(float *)(result + 32) = a5;
  return result;
}

{
  atomic_uint *v5;

  *(_DWORD *)result = 1;
  uint64_t v5 = *a2;
  *(void *)(result + 8) = *a2;
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  *(double *)(result + 16) = a3;
  *(double *)(result + 24) = a4;
  *(float *)(result + 32) = a5;
  return result;
}

void *__getSBApplicationStateDisplayIDKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = __SpringBoardServicesLibraryCore_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E6E2CD58;
    uint64_t v7 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
    unint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary;
    if (SpringBoardServicesLibraryCore_frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary;
LABEL_5:
  result = dlsym(v2, "SBApplicationStateDisplayIDKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBApplicationStateDisplayIDKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

id _TILSCLanguageForInputMode(TIInputMode *a1)
{
  uint64_t v1 = [(TIInputMode *)a1 normalizedIdentifier];
  uint64_t v2 = TIInputModeGetLanguage();

  return v2;
}

__n128 __Block_byref_object_copy__15986(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__15987(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

id _TISharedLanguageLikelihoodModel()
{
  return +[_TILanguageLikelihoodModel sharedLanguageLikelihoodModel];
}

uint64_t KB::CandidateFilterResources::CandidateFilterResources(uint64_t a1, CFTypeRef cf, int a3, uint64_t *a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8)
{
  if (cf) {
    CFTypeRef v15 = CFRetain(cf);
  }
  else {
    CFTypeRef v15 = 0;
  }
  *(void *)a1 = v15;
  *(_DWORD *)(a1 + 8) = a3;
  uint64_t v16 = *a4;
  *a4 = 0;
  *(void *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a1 + 40) = _Block_copy(a6);
  *(void *)(a1 + 48) = a7;
  if (a8) {
    CFTypeRef v17 = CFRetain(a8);
  }
  else {
    CFTypeRef v17 = 0;
  }
  *(void *)(a1 + 56) = v17;
  return a1;
}

void KB::CandidateFilterResources::~CandidateFilterResources(KB::CandidateFilterResources *this)
{
  uint64_t v2 = *(const void **)this;
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = (const void *)*((void *)this + 5);
  if (v3) {
    _Block_release(v3);
  }
  int v4 = (const void *)*((void *)this + 7);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v5);
  }
  long long v6 = (unsigned int *)*((void *)this + 2);
  if (v6) {
    WTF::RefCounted<KB::DictionaryContainer>::deref(v6);
  }
}

uint64_t KB::CandidateFilterResources::locale(KB::CandidateFilterResources *this)
{
  return *(void *)this;
}

uint64_t KB::CandidateFilterResources::primary_lexicon_id(KB::CandidateFilterResources *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t KB::CandidateFilterResources::dictionary@<X0>(uint64_t this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = *(atomic_uint **)(this + 16);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  return this;
}

uint64_t KB::CandidateFilterResources::language_model@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t KB::CandidateFilterResources::word_medial_punctuation_predicate(KB::CandidateFilterResources *this)
{
  return *((void *)this + 5);
}

uint64_t KB::CandidateFilterResources::vulgar_word_usage_database(KB::CandidateFilterResources *this)
{
  return *((void *)this + 6);
}

uint64_t KB::CandidateFilterResources::debug_stream(KB::CandidateFilterResources *this)
{
  return *((void *)this + 7);
}

_WORD *TI::Favonius::KeyClassification::KeyClassification(_WORD *this)
{
  *this = 1;
  return this;
}

{
  *this = 1;
  return this;
}

TI::Favonius::KeyClassification *TI::Favonius::KeyClassification::KeyClassification(TI::Favonius::KeyClassification *this, UChar32 c)
{
  __int16 v4 = 0;
  *(_WORD *)this = 0;
  if (c <= 729)
  {
    if ((c - 168) <= 0xC && ((1 << (c + 88)) & 0x1081) != 0) {
      goto LABEL_16;
    }
    if (!c)
    {
      __int16 v5 = 1;
      goto LABEL_23;
    }
    if (c != 699) {
      goto LABEL_14;
    }
LABEL_11:
    __int16 v5 = 2;
LABEL_23:
    *(_WORD *)this = v5;
    return this;
  }
  if (c <= 900)
  {
    if (c == 730 || c == 732) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (c == 901) {
    goto LABEL_16;
  }
  if (c == 8204 || c == 3654) {
    goto LABEL_11;
  }
LABEL_14:
  if (u_charType(c) != 4)
  {
    if (((1 << u_charType(c)) & 0x16E) != 0)
    {
      __int16 v4 = *(_WORD *)this;
      *(_WORD *)this |= 2u;
      if (c > 2491)
      {
        if (c > 2747)
        {
          if (c <= 3020)
          {
            if (c != 2748 && c != 2765 && c != 2946) {
              return this;
            }
          }
          else if (c > 3148)
          {
            if (c != 8204 && c != 3149) {
              return this;
            }
          }
          else if (c != 3021 && c != 3075)
          {
            return this;
          }
        }
        else
        {
          if (c > 2636)
          {
            if ((c - 2637) > 0x36) {
              return this;
            }
            uint64_t v8 = 1 << (c - 77);
            uint64_t v9 = 0x70001800000011;
LABEL_40:
            if ((v8 & v9) == 0) {
              return this;
            }
            goto LABEL_51;
          }
          if (((c - 2561) > 0x3B || ((1 << (c - 1)) & 0x800000000000007) == 0)
            && c != 2492
            && c != 2509)
          {
            return this;
          }
        }
      }
      else if (((c - 1600) > 0x30 || ((1 << (c - 64)) & 0x1000000FFF801) == 0) {
             && ((c - 2305) > 0x3B || ((1 << (c - 1)) & 0x800000000000007) == 0))
      }
      {
        if ((c - 2381) > 0x36) {
          return this;
        }
        uint64_t v8 = 1 << (c - 77);
        uint64_t v9 = 0x50000000000001;
        goto LABEL_40;
      }
LABEL_51:
      __int16 v6 = 4098;
      goto LABEL_22;
    }
    if (u_isspace(c))
    {
      __int16 v5 = *(_WORD *)this | 0x20;
      goto LABEL_23;
    }
    if (u_isdigit(c))
    {
      __int16 v5 = *(_WORD *)this | 4;
      goto LABEL_23;
    }
    if (u_ispunct(c))
    {
      *(_WORD *)this |= 0x10u;
      if (!is_nonstop(c)) {
        return this;
      }
      __int16 v5 = *(_WORD *)this | 8;
      goto LABEL_23;
    }
    if (c > 14)
    {
      if ((c - 15) >= 2)
      {
        if (c == 9100)
        {
          __int16 v5 = *(_WORD *)this | 0x800;
          goto LABEL_23;
        }
        goto LABEL_75;
      }
    }
    else if (c != 4)
    {
      if (c == 8)
      {
        __int16 v5 = *(_WORD *)this | 0x80;
        goto LABEL_23;
      }
      if (c == 14)
      {
        __int16 v5 = *(_WORD *)this | 0x100;
        goto LABEL_23;
      }
LABEL_75:
      __int16 v5 = *(_WORD *)this | 0x8000;
      goto LABEL_23;
    }
    __int16 v5 = *(_WORD *)this | 0x200;
    goto LABEL_23;
  }
  __int16 v4 = *(_WORD *)this;
LABEL_16:
  *(_WORD *)this = v4 | 0x40;
  if ((c - 710) <= 0x16 && ((1 << (c + 58)) & 0x400033) != 0
    || (c - 168) <= 0xC && ((1 << (c + 88)) & 0x1081) != 0
    || c == 901)
  {
    __int16 v6 = 1088;
LABEL_22:
    __int16 v5 = v4 | v6;
    goto LABEL_23;
  }
  return this;
}

BOOL is_nonstop(UChar32 a1)
{
  int8_t v2 = u_charType(a1);
  BOOL result = 1;
  if (((1 << v2) & 0x4000FFE) == 0
    && ((a1 - 38) > 0x3A || ((1 << (a1 - 38)) & 0x400000000000083) == 0))
  {
    return (a1 - 1523) < 2 || a1 == 8217;
  }
  return result;
}

__int16 *TI::Favonius::KeyClassification::add_classifier_flags(__int16 *this, __int16 a2)
{
  __int16 v2 = (*this | a2) & 0xFFFE;
  if ((unsigned __int16)(*this | a2) == 1) {
    __int16 v2 = 1;
  }
  *this = v2;
  return this;
}

float TI::Favonius::SearchParameters::prediction_cost_of_first_predicted_key(TI::Favonius::SearchParameters *this)
{
  if (this >= 5) {
    unsigned int v1 = 5;
  }
  else {
    unsigned int v1 = this;
  }
  return TI::Favonius::SearchParameters::k_prediction_costs[v1];
}

void TI::Favonius::ZephyrTypingModel::Hypothesis::debug_context_string(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 6) = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

void TI::Favonius::ZephyrTypingModel::Hypothesis::debug_hypothesis_string(TI::Favonius::ZephyrTypingModel::Hypothesis *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  TI::Favonius::ZephyrTypingModel::Hypothesis::append_debug_string(this, (KB::String *)a2);
}

void TI::Favonius::ZephyrTypingModel::Hypothesis::append_debug_string(TI::Favonius::ZephyrTypingModel::Hypothesis *this, KB::String *a2)
{
  unint64_t v3 = (TI::Favonius::ZephyrTypingModel::Hypothesis *)*((void *)this + 4);
  if (v3)
  {
    TI::Favonius::ZephyrTypingModel::Hypothesis::append_debug_string(v3, a2);
    if (((*(uint64_t (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)this + 72))(this) & 1) == 0) {
      KB::String::append(a2, 0x7Cu);
    }
    TI::Favonius::Key::append_debug_data(*((TI::Favonius::Key **)this + 3), a2);
    if ((*(unsigned int (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)this + 144))(this))
    {
      KB::String::append(a2, 0x23u);
    }
  }
}

void TI::Favonius::ZephyrTypingModel::Hypothesis::get_input_string_and_key_alignment(TI::Favonius::ZephyrTypingModel::Hypothesis *a1, KB::String *a2, const unsigned int **a3, const TI::Favonius::ZephyrTypingModel::Hypothesis *a4)
{
  unsigned int v4 = 0;
  TI::Favonius::ZephyrTypingModel::Hypothesis::append_typed_string(a1, a2, a4, a3, &v4);
}

void TI::Favonius::ZephyrTypingModel::Hypothesis::append_typed_string(TI::Favonius::ZephyrTypingModel::Hypothesis *this, KB::String *a2, const TI::Favonius::ZephyrTypingModel::Hypothesis *a3, const unsigned int **a4, unsigned int *a5)
{
  if (this == a3) {
    goto LABEL_5;
  }
  uint64_t v7 = a2;
  if (!a3)
  {
    if (((*(uint64_t (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)this + 144))(this) & 1) == 0)
    {
      uint64_t v9 = (TI::Favonius::ZephyrTypingModel::Hypothesis *)*((void *)this + 4);
      a2 = v7;
      a3 = 0;
      goto LABEL_8;
    }
LABEL_5:
    if (!a5) {
      return;
    }
    unsigned int v10 = 0;
    goto LABEL_46;
  }
  uint64_t v9 = (TI::Favonius::ZephyrTypingModel::Hypothesis *)*((void *)this + 4);
LABEL_8:
  TI::Favonius::ZephyrTypingModel::Hypothesis::append_typed_string(v9, a2, a3, (KB::Alignment *)a4, a5);
  uint64_t v11 = *((void *)this + 3);
  if ((*(_WORD *)(v11 + 60) & 0x80) != 0 && (int v12 = *(unsigned __int16 *)v7, *(_WORD *)v7))
  {
    if (*((void *)v7 + 1)) {
      uint64_t v13 = *((void *)v7 + 1);
    }
    else {
      uint64_t v13 = (uint64_t)v7 + 16;
    }
    uint64_t v31 = v13;
    int v32 = 0;
    int v33 = v12;
    int v34 = 0;
    KB::String::iterator::initialize(&v31);
    *(void *)&long long v27 = v13;
    DWORD2(v27) = v12;
    HIDWORD(v27) = v12;
    LODWORD(v28) = 0;
    KB::String::iterator::initialize((uint64_t *)&v27);
    long long v29 = v27;
    *(void *)c = v28;
    KB::String::iterator::operator--((KB::String::iterator *)&v29);
    int v14 = v32;
    unsigned int v15 = 1;
    if (DWORD2(v29) == v32)
    {
      int v14 = DWORD2(v29);
    }
    else
    {
      while (1)
      {
        TI::Favonius::KeyClassification::KeyClassification((TI::Favonius::KeyClassification *)&v27, c[0]);
        if ((v27 & 0x40) == 0) {
          break;
        }
        KB::String::iterator::operator--((KB::String::iterator *)&v29);
        ++v15;
        if (DWORD2(v29) == v14) {
          goto LABEL_24;
        }
      }
      int v14 = DWORD2(v29);
    }
LABEL_24:
    unsigned __int16 v20 = WORD6(v29);
    if (v14 <= SHIDWORD(v29))
    {
      if (c[0] >= 0x10000u) {
        __int16 v21 = -4;
      }
      else {
        __int16 v21 = -3;
      }
      if ((c[0] - 1114112) >= 0xFFEFE000) {
        __int16 v22 = v21;
      }
      else {
        __int16 v22 = 0;
      }
      if (c[0] >> 11 >= 0x1B) {
        __int16 v23 = v22;
      }
      else {
        __int16 v23 = -3;
      }
      if (c[0] >= 0x800u) {
        __int16 v24 = v23;
      }
      else {
        __int16 v24 = -2;
      }
      if (c[0] >= 0x80u) {
        __int16 v25 = v24;
      }
      else {
        __int16 v25 = -1;
      }
      unsigned __int16 v20 = v25 + v14;
    }
    KB::String::resize(v7, v20, 0);
    if (a4)
    {
      if (v15)
      {
        unint64_t v26 = a4[1];
        a4[1] = &v26[-v15];
      }
    }
  }
  else if ((*(_WORD *)(v11 + 60) & 0xB81) == 0)
  {
    KB::String::append((unsigned __int16 *)v7, (const KB::String *)(v11 + 8));
    if (a4)
    {
      uint64_t v16 = a4[1];
      uint64_t v17 = *((void *)this + 3);
      unsigned int v18 = *(unsigned __int16 *)(v17 + 12);
      if (!*(_WORD *)(v17 + 12))
      {
        KB::String::compute_length((unsigned __int16 *)(v17 + 8));
        unsigned int v18 = *(unsigned __int16 *)(v17 + 12);
      }
      v19.__i_ = v16;
      std::vector<unsigned int>::insert((std::vector<unsigned int> *)a4, v19, v18, a5);
    }
  }
  if (a5)
  {
    unsigned int v10 = *a5 + 1;
LABEL_46:
    *a5 = v10;
  }
}

unint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::isomorphism_hash(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  unint64_t result = *((void *)this + 9);
  if (!result)
  {
    uint64_t v3 = 2654435769;
    unsigned int v4 = (void *)(*(uint64_t (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)this + 32))(this);
    *((void *)this + 9) = 1;
    uint64_t v5 = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
    uint64_t v6 = *(void *)v5;
    if (*(void *)(*(void *)v5 + 16)) {
      uint64_t v7 = *(KB::String **)(*(void *)v5 + 16);
    }
    else {
      uint64_t v7 = (KB::String *)(*(void *)v5 + 24);
    }
    *((void *)this + 9) ^= (*((void *)this + 9) << 6)
                           + KB::String::hash(v7, (const char *)*(unsigned __int16 *)(v6 + 8))
                           + (*((void *)this + 9) >> 2)
                           + 2654435769;
    if ((*(unsigned int (**)(void *))(*v4 + 72))(v4)) {
      uint64_t v8 = 2654435770;
    }
    else {
      uint64_t v8 = 2654435769;
    }
    unint64_t v9 = (v8 + (*((void *)this + 9) << 6) + (*((void *)this + 9) >> 2)) ^ *((void *)this + 9);
    *((void *)this + 9) = v9;
    uint64_t v10 = v4[4];
    if (v10)
    {
      uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 192))(v10) + 2654435769;
      unint64_t v9 = *((void *)this + 9);
    }
    unint64_t result = (v3 + (v9 << 6) + (v9 >> 2)) ^ v9;
    *((void *)this + 9) = result;
  }
  return result;
}

BOOL TI::Favonius::ZephyrTypingModel::Hypothesis::is_isomorphic(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  for (uint64_t i = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
        ;
        uint64_t i = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12))
  {
    uint64_t v5 = i;
    if (v3) {
      BOOL v6 = i == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6) {
      return v3 == i;
    }
    BOOL result = v3 == i;
    if (v3 == v5) {
      return result;
    }
    uint64_t v8 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v9 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    if (v8 != v9)
    {
      BOOL result = KB::String::equal((KB::String *)(v8 + 8), (const KB::String *)(v9 + 8), 1);
      if (!result) {
        return result;
      }
    }
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 72))(v3);
    if (v10 != (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5)) {
      break;
    }
    uint64_t v11 = (**(uint64_t (***)(uint64_t))v3)(v3);
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
    uint64_t v12 = (**(uint64_t (***)(uint64_t))v5)(v5);
  }
  return 0;
}

BOOL TI::Favonius::ZephyrTypingModel::Hypothesis::input_segment_includes_backspace(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  unsigned int v1 = this;
  do
  {
    __int16 v2 = this;
    uint64_t v3 = (*(uint64_t (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)v1 + 136))(v1);
    if (v2 == (TI::Favonius::ZephyrTypingModel::Hypothesis *)v3) {
      break;
    }
    __int16 v4 = *(_WORD *)(*(void *)(*(uint64_t (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)v2 + 16))(v2)
                  + 60);
    this = (TI::Favonius::ZephyrTypingModel::Hypothesis *)(**(uint64_t (***)(TI::Favonius::ZephyrTypingModel::Hypothesis *))v2)(v2);
  }
  while ((v4 & 0x80) == 0);
  return v2 != (TI::Favonius::ZephyrTypingModel::Hypothesis *)v3;
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::input_segment_count(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  unsigned int v1 = this;
  for (uint64_t i = 0;
        (*(uint64_t (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)v1 + 136))(v1);
        uint64_t i = (i + 1))
  {
    if ((*(uint64_t (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)v1 + 144))(v1)) {
      break;
    }
    unsigned int v1 = (TI::Favonius::ZephyrTypingModel::Hypothesis *)(*(uint64_t (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)v1 + 136))(v1);
  }
  return i;
}

void TI::Favonius::ZephyrTypingModel::Hypothesis::last_typed_input_segment(const TI::Favonius::ZephyrTypingModel::Hypothesis **this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  TI::Favonius::ZephyrTypingModel::Hypothesis::append_typed_string((TI::Favonius::ZephyrTypingModel::Hypothesis *)this, (KB::String *)a2, this[6], 0, 0);
}

void TI::Favonius::ZephyrTypingModel::Hypothesis::for_each_input_segment(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    __int16 v4 = 0;
    uint64_t v5 = 0;
    BOOL v6 = 0;
    while (((*(uint64_t (**)(void *))(*v3 + 144))(v3) & 1) == 0)
    {
      if (v5 >= v6)
      {
        uint64_t v8 = (v5 - v4) >> 3;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 61) {
          goto LABEL_33;
        }
        if ((v6 - v4) >> 2 > v9) {
          unint64_t v9 = (v6 - v4) >> 2;
        }
        if ((unint64_t)(v6 - v4) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10)
        {
          if (v10 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v11 = (char *)operator new(8 * v10);
        }
        else
        {
          uint64_t v11 = 0;
        }
        uint64_t v12 = &v11[8 * v8];
        *(void *)uint64_t v12 = v3;
        uint64_t v7 = v12 + 8;
        while (v5 != v4)
        {
          uint64_t v13 = *((void *)v5 - 1);
          v5 -= 8;
          *((void *)v12 - 1) = v13;
          v12 -= 8;
        }
        BOOL v6 = &v11[8 * v10];
        if (v4) {
          operator delete(v4);
        }
        __int16 v4 = v12;
      }
      else
      {
        *(void *)uint64_t v5 = v3;
        uint64_t v7 = v5 + 8;
      }
      uint64_t v3 = (void *)v3[6];
      uint64_t v5 = v7;
      if (!v3) {
        goto LABEL_25;
      }
    }
    uint64_t v7 = v5;
LABEL_25:
    if (v7 != v4)
    {
      while (1)
      {
        uint64_t v14 = *((void *)v7 - 1);
        v7 -= 8;
        uint64_t v16 = v14;
        uint64_t v15 = *(void *)(a2 + 24);
        if (!v15) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v16);
        if (v7 == v4) {
          goto LABEL_30;
        }
      }
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_33:
      abort();
    }
    if (v4) {
LABEL_30:
    }
      operator delete(v4);
  }
}

double TI::Favonius::ZephyrTypingModel::Hypothesis::word_score(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  return 0.0;
}

void TI::Favonius::ZephyrTypingModel::Hypothesis::typing_score(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  if ((*((_DWORD *)this + 17) & 0x7FFFFFFFu) >= 0x7F800000)
  {
    uint64_t v2 = *((void *)this + 4);
    if (v2)
    {
      float v3 = (*(float (**)(uint64_t))(*(void *)v2 + 96))(v2);
      float v4 = v3 + logf(*((float *)this + 16));
    }
    else
    {
      float v4 = 0.0;
    }
    *((float *)this + 17) = v4;
  }
}

float TI::Favonius::ZephyrTypingModel::Hypothesis::context_score(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  float v2 = (*(float (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)this + 96))(this);
  return v2 + (*(float (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)this + 104))(this);
}

BOOL TI::Favonius::ZephyrTypingModel::Hypothesis::extends_word(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  uint64_t v1 = *((void *)this + 6);
  return v1 != (**(uint64_t (***)(TI::Favonius::ZephyrTypingModel::Hypothesis *))this)(this);
}

float TI::Favonius::ZephyrTypingModel::Hypothesis::probability_of_key(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  return *((float *)this + 16);
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::key(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  return (uint64_t)this + 24;
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::typing_model(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  return *((void *)this + 2);
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::parent_hypothesis(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  return *((void *)this + 4);
}

void TI::Favonius::ZephyrTypingModel::~ZephyrTypingModel(TI::Favonius::ZephyrTypingModel *this)
{
  *(void *)this = &unk_1F3F77B90;
  uint64_t v1 = (unsigned int *)*((void *)this + 2);
  if (v1)
  {
    unsigned int v2 = atomic_load(v1 + 2);
    if (v2 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v1 + 8))(v1);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v1 + 2, 0xFFFFFFFF);
    }
  }
}

void TI::Favonius::ZephyrTypingModel::Hypothesis::~Hypothesis(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  *(void *)this = &unk_1F3F77BD8;
  unsigned int v2 = (unsigned int *)*((void *)this + 4);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 248))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  if (v5)
  {
    unsigned int v6 = atomic_load(v5 + 2);
    if (v6 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v5 + 40))(v5);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF);
    }
  }
}

TI::Favonius::ZephyrTypingModel::Hypothesis **TI::Favonius::ZephyrTypingModel::Hypothesis::probability_of_input_segment(TI::Favonius::ZephyrTypingModel::Hypothesis **this, const TI::Favonius::ZephyrTypingModel::Hypothesis *a2)
{
  unsigned int v2 = a2;
  unsigned int v3 = this;
  if (!a2)
  {
    this = (TI::Favonius::ZephyrTypingModel::Hypothesis **)(*((uint64_t (**)(TI::Favonius::ZephyrTypingModel::Hypothesis **))*this
                                                            + 17))(this);
    unsigned int v2 = (const TI::Favonius::ZephyrTypingModel::Hypothesis *)this;
  }
  if (v2)
  {
    if (v2 != (const TI::Favonius::ZephyrTypingModel::Hypothesis *)v3)
    {
      (*((void (**)(TI::Favonius::ZephyrTypingModel::Hypothesis **, float))*v3 + 3))(v3, 1.0);
      return (TI::Favonius::ZephyrTypingModel::Hypothesis **)TI::Favonius::ZephyrTypingModel::Hypothesis::probability_of_input_segment(v3[4], v2);
    }
  }
  return this;
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::Hypothesis(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F77BD8;
  uint64_t v3 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 24);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a1;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 257;
  *(_DWORD *)(a1 + 60) = 1065353216;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 72) = 0;
  {
    unint64_t v9 = (uint64_t *)(a1 + 24);
    uint64_t v4 = v9;
    if (v8) {
      operator new();
    }
  }
  uint64_t v5 = TI::Favonius::ZephyrTypingModel::Hypothesis::Hypothesis(WTF::PassRefPtr<TI::Favonius::ZephyrTypingModel const>)::blank_key;
  if (TI::Favonius::ZephyrTypingModel::Hypothesis::Hypothesis(WTF::PassRefPtr<TI::Favonius::ZephyrTypingModel const>)::blank_key) {
    atomic_fetch_add((atomic_uint *volatile)TI::Favonius::ZephyrTypingModel::Hypothesis::Hypothesis(WTF::PassRefPtr<TI::Favonius::ZephyrTypingModel const>)::blank_key, 1u);
  }
  uint64_t v6 = *v4;
  *uint64_t v4 = v5;
  if (v6) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  }
  return a1;
}

uint64_t *WTF::RefPtr<TI::Favonius::Key>::~RefPtr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v2);
  }
  return a1;
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::Hypothesis(uint64_t a1, uint64_t a2, atomic_uint **a3, int a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F77BD8;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  *(void *)(a1 + 16) = v8;
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  unint64_t v9 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  *(void *)(a1 + 32) = a2;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 40) = a1;
  *(void *)(a1 + 48) = v10;
  *(_WORD *)(a1 + 56) = 256;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 68) = -8388608;
  *(void *)(a1 + 72) = 0;
  if (a4)
  {
    uint64_t v11 = *(void *)(a2 + 48);
    *(void *)(a1 + 48) = v11;
    *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
    __int16 v12 = *(_WORD *)(*(void *)(a1 + 24) + 60);
    uint64_t v13 = a1;
    if ((v12 & 0xE) != 0)
    {
      if ((v12 & 0x80) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v13;
      if ((v12 & 0x80) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v14 = *(void *)(v13 + 32);
    if (v14)
    {
      if (!*(unsigned char *)(v13 + 56))
      {
        *(void *)(a1 + 40) = *(void *)(v14 + 40);
        if (v11 == v14)
        {
          *(void *)(a1 + 48) = *(void *)(v11 + 48);
          *(unsigned char *)(a1 + 57) = *(unsigned char *)(v11 + 57);
        }
      }
    }
  }
LABEL_14:
  TI::Favonius::ZephyrTypingModel::Hypothesis::initialize_probability_of_key((TI::Favonius::ZephyrTypingModel::Hypothesis *)a1);
  return a1;
}

void TI::Favonius::ZephyrTypingModel::Hypothesis::initialize_probability_of_key(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  __int16 v2 = *(_WORD *)(*((void *)this + 3) + 60);
  float v3 = 1.0;
  if ((v2 & 0xE) != 0)
  {
    if ((*(_WORD *)(*((void *)this + 3) + 60) & 0x1000) != 0)
    {
      uint64_t v4 = *(void *)(*((void *)this + 4) + 40);
      goto LABEL_4;
    }
  }
  else
  {
    if (v2) {
      goto LABEL_21;
    }
    if ((*(_WORD *)(*((void *)this + 3) + 60) & 0x400) != 0)
    {
      if (!(*(unsigned int (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)this + 144))(this))
      {
        uint64_t v6 = *(unsigned int *)(*(void *)(*((void *)this + 5) + 24) + 56);
        uint64_t v7 = (TI::Favonius::ZephyrTypingModel *)(*(uint64_t (**)(TI::Favonius::ZephyrTypingModel::Hypothesis *))(*(void *)this + 8))(this);
        if ((TI::Favonius::ZephyrTypingModel::letter_combines_with_selective_modifier(v7, v6, *(unsigned int *)(*((void *)this + 3) + 56)) & 1) == 0)goto LABEL_5; {
        goto LABEL_20;
        }
      }
      __int16 v2 = *(_WORD *)(*((void *)this + 3) + 60);
    }
    if ((v2 & 0x40) != 0)
    {
      uint64_t v4 = *((void *)this + 5);
LABEL_4:
      if ((*(_WORD *)(*(void *)(v4 + 24) + 60) & 2) == 0)
      {
LABEL_5:
        *((unsigned char *)this + 57) = 0;
        float v3 = 0.0000004;
        goto LABEL_21;
      }
LABEL_20:
      float v3 = 0.01;
      goto LABEL_21;
    }
    if ((v2 & 0x80) != 0)
    {
      uint64_t v8 = *((void *)this + 4);
      if (v8)
      {
        float v3 = flt_1E4154A70[(*(_WORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8) + 60) & 0x80) == 0];
        uint64_t v9 = *((void *)this + 4);
        if (v9 && ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 144))(v9) & 1) == 0)
        {
          float v10 = *(float *)(*(void *)(*((void *)this + 4) + 40) + 64);
          if (v10 <= 0.0) {
            float v10 = 1.0;
          }
          float v3 = v3 / v10;
        }
      }
      else
      {
        float v3 = 0.008;
      }
    }
    else if ((v2 & 0x30) != 0 && (v2 & 8) == 0)
    {
      float v3 = TI::Favonius::ZephyrTypingModel::Hypothesis::typing_probability_of_terminator_key(this);
    }
    else if ((v2 & 0x300) != 0)
    {
      float v3 = 0.002;
    }
    else
    {
      float v3 = flt_1E4154A78[(v2 & 0x800) == 0];
    }
  }
LABEL_21:
  *((float *)this + 16) = v3;
}

uint64_t TI::Favonius::ZephyrTypingModel::letter_combines_with_selective_modifier(TI::Favonius::ZephyrTypingModel *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    return (*(uint64_t (**)(void))(*(void *)v3 + 24))();
  }
  else {
    return MEMORY[0x1F4163E28](a2, a3);
  }
}

float TI::Favonius::ZephyrTypingModel::Hypothesis::typing_probability_of_terminator_key(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  uint64_t v1 = *((void *)this + 4);
  __int16 v2 = *(_WORD *)(*(void *)(*(void *)(v1 + 40) + 24) + 60);
  float result = 1.0;
  if ((v2 & 0xE) == 0)
  {
    if ((*(_WORD *)(*(void *)(*((void *)this + 5) + 24) + 60) & 0x20) != 0)
    {
      if ((v2 & 0x20) != 0)
      {
        uint64_t v4 = *(void *)(v1 + 32);
        if (v4)
        {
          if ((*(_WORD *)(*(void *)(*(void *)(v4 + 40) + 24) + 60) & 0xE) != 0) {
            float result = 0.05;
          }
        }
      }
    }
    else
    {
      float result = 0.0025;
    }
  }
  if (!s_interface_idiom_is_pad && *(_DWORD *)(*((void *)this + 3) + 56) == 10) {
    return result * 0.005;
  }
  return result;
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::input_segment_is_extended_by_key(void *a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0xE) == 0) {
    return (v2 & 0xBC1) != 0;
  }
  uint64_t v4 = *(void *)(a1[5] + 24);
  if (*(_WORD *)(v4 + 60) & 0xE) == 0 || ((*(uint64_t (**)(void *))(*a1 + 144))(a1)) {
    return 0;
  }
  __int16 v7 = *(_WORD *)(a2 + 60);
  uint64_t result = (*(_WORD *)(v4 + 60) & 8) == 0 || (v7 & 8) == 0;
  if ((v7 & 8) == 0 && (*(_WORD *)(v4 + 60) & 8) != 0)
  {
    if ((*(unsigned int (**)(void *))(*a1 + 168))(a1))
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void *))(*a1 + 136))(a1) + 168);
      return v8();
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void TI::Favonius::ZephyrTypingModel::Hypothesis::filter_words_for_input_segment(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 120))(&v19);
  uint64_t v4 = *(uint64_t **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  uint64_t v14 = ___ZNK2TI8Favonius17ZephyrTypingModel10Hypothesis30filter_words_for_input_segmentERNSt3__16vectorIN2KB4WordENS3_9allocatorIS6_EEEE_block_invoke;
  uint64_t v15 = &__block_descriptor_tmp_16248;
  uint64_t v16 = a1;
  KB::String::String((KB::String *)v17, (const KB::String *)&v19);
  if (v4 == (uint64_t *)v5) {
    goto LABEL_13;
  }
  uint64_t v6 = v5;
  while ((v14((uint64_t)v13, (KB::Word *)v4) & 1) == 0)
  {
    v4 += 30;
    if (v4 == (uint64_t *)v5) {
      goto LABEL_14;
    }
  }
  if (v4 != (uint64_t *)v5)
  {
    if (v4 + 30 != (uint64_t *)v5)
    {
      __int16 v7 = v4 + 55;
      uint64_t v6 = (uint64_t)v4;
      do
      {
        if ((v14((uint64_t)v13, (KB::Word *)(v7 - 25)) & 1) == 0)
        {
          KB::String::operator=(v6, (KB::String *)(v7 - 25));
          KB::ByteString::operator=((unsigned __int16 *)(v6 + 32), (unsigned __int16 *)v7 - 84);
          uint64_t v8 = *(v7 - 19);
          *(_DWORD *)(v6 + 56) = *((_DWORD *)v7 - 36);
          *(void *)(v6 + 48) = v8;
          KB::String::operator=(v6 + 64, (KB::String *)(v7 - 17));
          long long v9 = *(_OWORD *)(v7 - 13);
          long long v10 = *(_OWORD *)(v7 - 11);
          long long v11 = *(_OWORD *)(v7 - 7);
          *(_OWORD *)(v6 + 128) = *(_OWORD *)(v7 - 9);
          *(_OWORD *)(v6 + 144) = v11;
          *(_OWORD *)(v6 + 96) = v9;
          *(_OWORD *)(v6 + 112) = v10;
          KB::String::operator=(v6 + 160, (KB::String *)(v7 - 5));
          *(unsigned char *)(v6 + 192) = *((unsigned char *)v7 - 8);
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign(v6 + 200, v7);
          v6 += 240;
        }
        __int16 v12 = v7 + 5;
        v7 += 30;
      }
      while (v12 != (uint64_t *)v5);
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v6 = (uint64_t)v4;
  }
LABEL_14:
  std::vector<KB::Word>::erase(a2, v6, *(KB::Word **)(a2 + 8));
  if (v18 && v17[6] == 1) {
    free(v18);
  }
  if (v20)
  {
    if (BYTE6(v19) == 1) {
      free(v20);
    }
  }
}

uint64_t ___ZNK2TI8Favonius17ZephyrTypingModel10Hypothesis30filter_words_for_input_segmentERNSt3__16vectorIN2KB4WordENS3_9allocatorIS6_EEEE_block_invoke(uint64_t a1, KB::Word *a2)
{
  uint64_t v4 = (TI::Favonius::ZephyrTypingModel *)(*(uint64_t (**)(void))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32));
  return TI::Favonius::ZephyrTypingModel::word_is_acceptable_for_input(v4, a2, (const KB::String *)(a1 + 40)) ^ 1;
}

void __destroy_helper_block_8_40c17_ZTSKN2KB6StringE(uint64_t a1)
{
  __int16 v2 = *(void **)(a1 + 48);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 46) == 1) {
      free(v2);
    }
  }
}

KB::String *__copy_helper_block_8_40c17_ZTSKN2KB6StringE(uint64_t a1, uint64_t a2)
{
  return KB::String::String((KB::String *)(a1 + 40), (const KB::String *)(a2 + 40));
}

uint64_t TI::Favonius::ZephyrTypingModel::word_is_acceptable_for_input(TI::Favonius::ZephyrTypingModel *this, KB::Word *a2, const KB::String *a3)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 16);
    return v4();
  }
  else
  {
    v6[1] = 1;
    v6[0] = &unk_1F3F77D18;
    return KB::InputSegmentFilter::word_is_acceptable_for_input((KB::InputSegmentFilter *)v6, a2, a3);
  }
}

void __TIGetEnableUserWordSyncingValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"EnableUserWordSyncing" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

BOOL TIStringContainsCharacterFromSet(void *a1, uint64_t a2)
{
  return [a1 rangeOfCharacterFromSet:a2] != 0x7FFFFFFFFFFFFFFFLL;
}

void TI::Favonius::CMTouchHistory::history_by_appending_touch(uint64_t a1, uint64_t a2)
{
  TI::Favonius::CMGeometryParameters::CMGeometryParameters((uint64_t)v2, (TI::Favonius::KeyboardLayout **)(*(void *)a2 + 56));
  operator new();
}

uint64_t TI::Favonius::CMTouchHistory::CMTouchHistory(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F77FB0;
  *(void *)(a1 + 16) = *a3;
  long long v9 = (uint64_t *)(a1 + 16);
  *a3 = 0;
  TI::Favonius::CMTouchHistory::initialize_history_correlation((uint64_t *)(a1 + 16), (void *)a2, (unint64_t *)(a1 + 24));
  *(void *)(a1 + 48) = 0;
  TI::Favonius::CMTouchHistory::initialize_touch_interval((uint64_t)v9, a2);
  double v11 = v10;
  *(double *)(a1 + 56) = v10;
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2)) {
    double v12 = *(double *)(a2 + 64) + (v11 - *(double *)(a2 + 64)) * 0.200000003;
  }
  else {
    double v12 = 0.35;
  }
  *(double *)(a1 + 64) = v12;
  if (a5)
  {
    uint64_t v13 = *a5;
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a5 + 2);
    *(void *)(a1 + 72) = v13;
  }
  else
  {
    TI::Favonius::CMGeometryParametersForTouch::CMGeometryParametersForTouch((float *)(a1 + 72), a4, (uint64_t)v9, v12);
  }
  TI::Favonius::CMTouchHistory::initialize_key_matches(v9, a4, a1 + 72, (void *)(a1 + 88));
  TI::Favonius::CMTouchHistory::initialize_indexed_key_matches((void *)(a1 + 88), (unint64_t *)(a1 + 112));
  float v14 = *(float *)(a1 + 80) * *(float *)(a1 + 80);
  float v15 = v14 * 0.5 * *(float *)(a1 + 76);
  double v16 = *(double *)(a1 + 64);
  float v17 = *(double *)(a1 + 56) * -8.16326523 * *(double *)(a1 + 56) + -2.0;
  *(float *)(a1 + 136) = (float)(v14 * *(float *)(a1 + 72)) + v15;
  *(float *)(a1 + 140) = v17;
  double v18 = 0.15;
  double v19 = 0.15;
  if (v16 >= 0.15)
  {
    double v19 = v16;
    if (v16 > 0.5) {
      double v19 = 0.5;
    }
  }
  float v20 = v19 * -8.16326523 * v19 + -2.0;
  *(float *)(a1 + 144) = v20;
  is_repeated_tap_on_same_keCGFloat y = TI::Favonius::CMTouchHistory::is_repeated_tap_on_same_key(a1 + 88, a2);
  double v22 = v16 * -8.16326523 * v16 + -3.20000005 + -1.10524082;
  if (is_repeated_tap_on_same_key) {
    double v22 = v16 * -8.16326523 * v16 + -2.24000001;
  }
  float v23 = v22;
  *(float *)(a1 + 148) = v23;
  double v24 = *(double *)(a1 + 64);
  if (v24 >= 0.15)
  {
    if (v24 > 0.5) {
      double v18 = 0.5;
    }
    else {
      double v18 = *(double *)(a1 + 64);
    }
  }
  float v25 = v18 * -8.16326523 * v18 + -3.20000005;
  *(float *)(a1 + 152) = v25;
  return a1;
}

void TI::Favonius::CMTouchHistory::initialize_history_correlation(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t *a3@<X8>)
{
  a3[2] = 0;
  uint64_t v6 = a3 + 2;
  *a3 = 0;
  a3[1] = 0;
  uint64_t v7 = (uint64_t)(a2[4] - a2[3]) >> 5;
  unint64_t v8 = v7 + 1;
  if (v7 != -1)
  {
    if (v8 >> 59) {
      goto LABEL_114;
    }
    v102 = v6;
    long long v9 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v8);
    v99 = v9;
    v100.i64[0] = (uint64_t)v9;
    double v11 = &v9[32 * v10];
    v100.i64[1] = (uint64_t)v9;
    unint64_t v101 = (unint64_t)v11;
    unint64_t v13 = *a3;
    unint64_t v12 = a3[1];
    if (v12 == *a3)
    {
      int64x2_t v16 = vdupq_n_s64(v12);
      float v14 = v9;
    }
    else
    {
      float v14 = v9;
      do
      {
        long long v15 = *(_OWORD *)(v12 - 32);
        v12 -= 32;
        *(void *)unint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        *((_OWORD *)v14 - 2) = v15;
        v14 -= 32;
        *((_OWORD *)v14 + 1) = *(_OWORD *)(v12 + 16);
      }
      while (v12 != v13);
      int64x2_t v16 = *(int64x2_t *)a3;
      long long v9 = (char *)v100.i64[1];
      double v11 = (char *)v101;
    }
    *a3 = (unint64_t)v14;
    a3[1] = (unint64_t)v9;
    int64x2_t v100 = v16;
    unint64_t v17 = a3[2];
    a3[2] = (unint64_t)v11;
    unint64_t v101 = v17;
    v99 = (char *)v16.i64[0];
    std::__split_buffer<TI::Favonius::CMTouchHistory::TouchCorrelation>::~__split_buffer((uint64_t)&v99);
  }
  if (a2[2])
  {
    unint64_t v18 = a3[1];
    unint64_t v19 = a3[2];
    if (v18 >= v19)
    {
      unint64_t v21 = *a3;
      uint64_t v22 = (uint64_t)(v18 - *a3) >> 5;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 59) {
        goto LABEL_114;
      }
      uint64_t v24 = v19 - v21;
      if (v24 >> 4 > v23) {
        unint64_t v23 = v24 >> 4;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      v102 = v6;
      if (v25)
      {
        unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v25);
        unint64_t v21 = *a3;
        unint64_t v18 = a3[1];
      }
      else
      {
        uint64_t v26 = 0;
      }
      long long v27 = (_OWORD *)(v25 + 32 * v22);
      v99 = (char *)v25;
      v100.i64[0] = (uint64_t)v27;
      unint64_t v28 = v25 + 32 * v26;
      unint64_t v101 = v28;
      float v20 = v27 + 2;
      *long long v27 = 0u;
      v27[1] = 0u;
      v100.i64[1] = (uint64_t)(v27 + 2);
      if (v18 == v21)
      {
        int64x2_t v30 = vdupq_n_s64(v21);
      }
      else
      {
        do
        {
          long long v29 = *(_OWORD *)(v18 - 32);
          v18 -= 32;
          *(void *)unint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
          *(v27 - 2) = v29;
          v27 -= 2;
          v27[1] = *(_OWORD *)(v18 + 16);
        }
        while (v18 != v21);
        int64x2_t v30 = *(int64x2_t *)a3;
        float v20 = (_OWORD *)v100.i64[1];
        unint64_t v28 = v101;
      }
      *a3 = (unint64_t)v27;
      a3[1] = (unint64_t)v20;
      int64x2_t v100 = v30;
      unint64_t v31 = a3[2];
      a3[2] = v28;
      unint64_t v101 = v31;
      v99 = (char *)v30.i64[0];
      std::__split_buffer<TI::Favonius::CMTouchHistory::TouchCorrelation>::~__split_buffer((uint64_t)&v99);
    }
    else
    {
      float v20 = (_OWORD *)(v18 + 32);
      *(_OWORD *)unint64_t v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
    }
    a3[1] = (unint64_t)v20;
    int v32 = (atomic_uint *)a2[2];
    if (v32) {
      atomic_fetch_add(v32, 1u);
    }
    uint64_t v33 = *((void *)v20 - 4);
    *((void *)v20 - 4) = v32;
    if (v33) {
      WTF::RefCounted<TI::Favonius::Touch>::deref(v33);
    }
    unint64_t v34 = a3[1];
    unint64_t v35 = (atomic_uint *)a2[6];
    if (v35) {
      atomic_fetch_add(v35, 1u);
    }
    uint64_t v36 = *(void *)(v34 - 24);
    *(void *)(v34 - 24) = v35;
    if (v36) {
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v36);
    }
  }
  uint64_t v38 = a2[3];
  uint64_t v37 = a2[4];
  if (v37 - v38 < 1) {
    goto LABEL_91;
  }
  uint64_t v39 = (v37 - v38) >> 5;
  unint64_t v40 = *a3;
  unint64_t v41 = a3[1];
  uint64_t v42 = v41 - *a3;
  uint64_t v43 = v42 >> 5;
  unint64_t v44 = *a3 + (v42 & 0xFFFFFFFFFFFFFFE0);
  if (v39 > (uint64_t)(*v6 - v41) >> 5)
  {
    unint64_t v45 = v43 + v39;
    if (!((unint64_t)(v43 + v39) >> 59))
    {
      uint64_t v46 = *v6 - v40;
      if (v46 >> 4 > v45) {
        unint64_t v45 = v46 >> 4;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v47 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v45;
      }
      v102 = v6;
      if (v47) {
        unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v47);
      }
      else {
        uint64_t v48 = 0;
      }
      unint64_t v55 = v47 + 32 * v43;
      v99 = (char *)v47;
      v100.i64[0] = v55;
      v100.i64[1] = v55;
      unint64_t v101 = v47 + 32 * v48;
      v56 = (_OWORD *)(v55 + 32 * v39);
      do
      {
        v57 = *(atomic_uint **)v38;
        *(void *)unint64_t v55 = *(void *)v38;
        if (v57) {
          atomic_fetch_add(v57, 1u);
        }
        v58 = *(atomic_uint **)(v38 + 8);
        *(void *)(v55 + 8) = v58;
        if (v58) {
          atomic_fetch_add(v58, 1u);
        }
        *(_OWORD *)(v55 + 16) = *(_OWORD *)(v38 + 16);
        v55 += 32;
        v38 += 32;
      }
      while ((_OWORD *)v55 != v56);
      v100.i64[1] = (uint64_t)v56;
      unint64_t v59 = v100.i64[0];
      unint64_t v60 = *a3;
      if (*a3 != v44)
      {
        unint64_t v61 = v44;
        do
        {
          long long v62 = *(_OWORD *)(v61 - 32);
          v61 -= 32;
          *(void *)unint64_t v61 = 0;
          *(void *)(v61 + 8) = 0;
          *(_OWORD *)(v59 - 32) = v62;
          v59 -= 32;
          *(_OWORD *)(v59 + 16) = *(_OWORD *)(v61 + 16);
        }
        while (v61 != v60);
        v56 = (_OWORD *)v100.i64[1];
      }
      v100.i64[0] = v59;
      unint64_t v63 = a3[1];
      if (v63 != v44)
      {
        do
        {
          long long v64 = *(_OWORD *)v44;
          *(void *)unint64_t v44 = 0;
          *(void *)(v44 + 8) = 0;
          _OWORD *v56 = v64;
          v56[1] = *(_OWORD *)(v44 + 16);
          v56 += 2;
          v44 += 32;
        }
        while (v44 != v63);
        unint64_t v59 = v100.i64[0];
        unint64_t v44 = a3[1];
      }
      unint64_t v65 = *a3;
      *a3 = v59;
      a3[1] = (unint64_t)v56;
      unint64_t v66 = a3[2];
      a3[2] = v101;
      v100.i64[1] = v44;
      unint64_t v101 = v66;
      v99 = (char *)v65;
      v100.i64[0] = v65;
      std::__split_buffer<TI::Favonius::CMTouchHistory::TouchCorrelation>::~__split_buffer((uint64_t)&v99);
      goto LABEL_91;
    }
LABEL_114:
    abort();
  }
  uint64_t v49 = (uint64_t)(v41 - v44) >> 5;
  if (v49 >= v39)
  {
    uint64_t v50 = v38 + 32 * v39;
    unint64_t v52 = a3[1];
LABEL_71:
    unint64_t v67 = v44 + 32 * v39;
    v68 = (long long *)(v52 - 32 * v39);
    v69 = (_OWORD *)v52;
    if ((unint64_t)v68 < v41)
    {
      v69 = (_OWORD *)v52;
      do
      {
        long long v70 = *v68;
        *(void *)v68 = 0;
        *((void *)v68 + 1) = 0;
        _OWORD *v69 = v70;
        v69[1] = v68[1];
        v69 += 2;
        v68 += 2;
      }
      while ((unint64_t)v68 < v41);
    }
    a3[1] = (unint64_t)v69;
    if (v52 != v67)
    {
      uint64_t v71 = 32 * ((uint64_t)(v52 - v67) >> 5);
      uint64_t v72 = v40 + 32 * v43 - 16;
      unint64_t v73 = v52 - 32;
      do
      {
        uint64_t v74 = v72 + v71;
        uint64_t v75 = *(void *)(v72 + v71 - 16);
        *(void *)(v72 + v71 - 16) = 0;
        uint64_t v76 = *(void *)v73;
        *(void *)unint64_t v73 = v75;
        if (v76) {
          WTF::RefCounted<TI::Favonius::Touch>::deref(v76);
        }
        uint64_t v77 = *(void *)(v74 - 8);
        *(void *)(v74 - 8) = 0;
        uint64_t v78 = *(void *)(v73 + 8);
        *(void *)(v73 + 8) = v77;
        if (v78) {
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v78);
        }
        *(_OWORD *)(v73 + 16) = *(_OWORD *)(v72 + v71);
        v73 -= 32;
        v71 -= 32;
      }
      while (v71);
    }
    for (; v38 != v50; v44 += 32)
    {
      v79 = *(atomic_uint **)v38;
      if (*(void *)v38) {
        atomic_fetch_add(v79, 1u);
      }
      uint64_t v80 = *(void *)v44;
      *(void *)unint64_t v44 = v79;
      if (v80) {
        WTF::RefCounted<TI::Favonius::Touch>::deref(v80);
      }
      v81 = *(atomic_uint **)(v38 + 8);
      if (v81) {
        atomic_fetch_add(v81, 1u);
      }
      uint64_t v82 = *(void *)(v44 + 8);
      *(void *)(v44 + 8) = v81;
      if (v82) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v82);
      }
      *(_OWORD *)(v44 + 16) = *(_OWORD *)(v38 + 16);
      v38 += 32;
    }
    goto LABEL_91;
  }
  uint64_t v50 = v38 + 32 * v49;
  if (v50 == v37)
  {
    unint64_t v52 = a3[1];
  }
  else
  {
    uint64_t v51 = v38 + 32 * v49;
    unint64_t v52 = a3[1];
    do
    {
      v53 = *(atomic_uint **)v51;
      *(void *)unint64_t v52 = *(void *)v51;
      if (v53) {
        atomic_fetch_add(v53, 1u);
      }
      v54 = *(atomic_uint **)(v51 + 8);
      *(void *)(v52 + 8) = v54;
      if (v54) {
        atomic_fetch_add(v54, 1u);
      }
      *(_OWORD *)(v52 + 16) = *(_OWORD *)(v51 + 16);
      v52 += 32;
      v51 += 32;
    }
    while (v51 != v37);
  }
  a3[1] = v52;
  if ((uint64_t)(v41 - v44) >= 1) {
    goto LABEL_71;
  }
LABEL_91:
  v84 = (double *)*a3;
  v83 = (uint64_t *)a3[1];
  if ((unint64_t)v83 - *a3 < 0x401)
  {
    v85 = (uint64_t *)a3[1];
  }
  else
  {
    v85 = (uint64_t *)(v84 + 128);
    if (v83 != (uint64_t *)(v84 + 128))
    {
      do
      {
        v83 -= 4;
        std::__destroy_at[abi:nn180100]<TI::Favonius::CMTouchHistory::TouchCorrelation,0>(v83);
      }
      while (v83 != v85);
      v84 = (double *)*a3;
    }
    a3[1] = (unint64_t)v85;
  }
  if (v84 != (double *)v85)
  {
    v86 = v85 - 4;
    if (*(double *)(*a1 + 32) - *(double *)(*(v85 - 4) + 32) <= 40.0)
    {
LABEL_102:
      if (v84 != (double *)v85)
      {
        do
        {
          uint64_t v88 = *(void *)v84;
          uint64_t v89 = *a1;
          float v90 = *(double *)(*a1 + 32) - *(double *)(*(void *)v84 + 32);
          double v91 = 0.0;
          if (v90 <= 40.0) {
            double v91 = (40.0 - v90) / 40.0;
          }
          float v92 = *(float *)(v89 + 24);
          float v93 = *(float *)(v88 + 24);
          if (v92 >= v93) {
            float v94 = *(float *)(v89 + 24);
          }
          else {
            float v94 = *(float *)(v88 + 24);
          }
          float v95 = 0.0;
          if (v94 > 0.0)
          {
            if (v92 >= v93) {
              float v92 = *(float *)(v88 + 24);
            }
            float v95 = (float)(v94 - v92) / v94;
          }
          float v96 = v91;
          double v97 = (float)((float)(1.0 - v95) * v96);
          v84[2] = TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(v88, v89) * v97;
          v84[3] = v98 * v97;
          v84 += 4;
        }
        while (v84 != (double *)a3[1]);
      }
    }
    else
    {
      while (1)
      {
        std::__destroy_at[abi:nn180100]<TI::Favonius::CMTouchHistory::TouchCorrelation,0>(v86);
        a3[1] = (unint64_t)v86;
        v84 = (double *)*a3;
        if (v86 == (uint64_t *)*a3) {
          break;
        }
        uint64_t v87 = *(v86 - 4);
        v86 -= 4;
        if (*(double *)(*a1 + 32) - *(double *)(v87 + 32) <= 40.0)
        {
          v85 = v86 + 4;
          goto LABEL_102;
        }
      }
    }
  }
}

uint64_t TI::Favonius::CMTouchHistory::initialize_touch_interval(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  }
  return result;
}

void *TI::Favonius::CMTouchHistory::initialize_key_matches@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v31 = 0;
  int v32 = &v31;
  uint64_t v33 = 0x4002000000;
  unint64_t v34 = __Block_byref_object_copy__17359;
  unint64_t v35 = __Block_byref_object_dispose__17360;
  memset(v36, 0, sizeof(v36));
  uint64_t v8 = *a1;
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(v36, ((*(void *)(*(void *)(*a1 + 56) + 16) - *(void *)(*(void *)(*a1 + 56) + 8)) >> 3));
  uint64_t v9 = *(void *)(v8 + 56);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 0x40000000;
  unint64_t v25 = ___ZN2TI8Favonius14CMTouchHistory22initialize_key_matchesERKN3WTF6RefPtrINS0_5TouchEEERKNS0_20CMGeometryParametersERKNS0_28CMGeometryParametersForTouchE_block_invoke;
  uint64_t v26 = &unk_1E6E2D338;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  long long v27 = &v31;
  unint64_t v28 = a1;
  uint64_t v10 = *(CGRect ***)(v9 + 8);
  double v11 = *(CGRect ***)(v9 + 16);
  while (v10 != v11)
    v25((uint64_t)v24, v10++);
  unint64_t v13 = v32[5];
  uint64_t v12 = v32[6];
  uint64_t v37 = &__block_literal_global_17362;
  unint64_t v14 = 126 - 2 * __clz(v13);
  if (v13) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*,false>(v12, (uint64_t *)(v12 + 8 * v13), (uint64_t)&v37, v15, 1);
  int64x2_t v16 = v32;
  unint64_t v17 = v32[5];
  if (v17 >= 0xE)
  {
    uint64_t v18 = v32[6];
    unint64_t v19 = (void *)(v18 + 104);
    float v20 = (const void *)(v18 + 8 * v17);
    uint64_t v21 = 8 * v17 - 104;
    uint64_t v22 = (uint64_t *)(v18 + 104);
    do
    {
      if (*v22) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(*v22);
      }
      ++v22;
      v21 -= 8;
    }
    while (v21);
    memmove(v19, v20, v16[6] + 8 * v16[5] - (void)v20);
    v16[5] = v16[5] - v17 + 13;
    int64x2_t v16 = v32;
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::Vector(a4, v16 + 5);
  _Block_object_dispose(&v31, 8);
  return WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::~Vector(v36);
}

void *TI::Favonius::CMTouchHistory::initialize_indexed_key_matches@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*result)
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    for (uint64_t i = (atomic_uint **)result[1]; i != (atomic_uint **)(v3[1] + 8 * *v3); ++i)
    {
      uint64_t v6 = *i;
      unint64_t v7 = *(__int16 *)(*((void *)*i + 1) + 62);
      if (v4 <= v7)
      {
        unint64_t v9 = v7 + 1;
        if (v4 >= v7 + 1)
        {
          unint64_t v13 = a2[1];
          if (v4 != v7 + 1)
          {
            uint64_t v14 = 8 * v4;
            uint64_t v15 = 8 * v7 + 8;
            do
            {
              uint64_t v16 = *(void *)(v13 + v15);
              if (v16) {
                WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v16);
              }
              v15 += 8;
            }
            while (v14 != v15);
          }
        }
        else
        {
          unint64_t v10 = a2[2];
          if (v10 < v9)
          {
            if (v10 >= 0x100) {
              unint64_t v11 = v10 + (v10 >> 1);
            }
            else {
              unint64_t v11 = 2 * v10;
            }
            if (v11 <= v9) {
              unint64_t v12 = v7 + 1;
            }
            else {
              unint64_t v12 = v11;
            }
            WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v12);
          }
          unint64_t v13 = a2[1];
          if (v13) {
            bzero((void *)(v13 + 8 * *a2), 8 * v9 - 8 * *a2);
          }
        }
        *a2 = v9;
        uint64_t v6 = *i;
        uint64_t v8 = (atomic_uint **)(v13 + 8 * v7);
        if (!*i)
        {
          unint64_t v4 = v7 + 1;
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v8 = (atomic_uint **)(a2[1] + 8 * v7);
      }
      atomic_fetch_add(v6, 1u);
      unint64_t v4 = *a2;
LABEL_23:
      uint64_t result = *v8;
      *uint64_t v8 = v6;
      if (result) {
        uint64_t result = (void *)WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)result);
      }
    }
  }
  return result;
}

BOOL TI::Favonius::CMTouchHistory::is_repeated_tap_on_same_key(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (!*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2) || *(void *)a1 == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(**(void **)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2) + 8) + 8);
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  }
  uint64_t v7 = *(void *)(**(void **)(a1 + 8) + 8);
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  }
  if (*(unsigned __int16 *)(v7 + 62) == *(unsigned __int16 *)(v6 + 62)) {
    BOOL v5 = v7 == v6 || KB::String::equal((KB::String *)(v7 + 8), (const KB::String *)(v6 + 8), 1);
  }
  else {
    BOOL v5 = 0;
  }
  WTF::RefCounted<TI::Favonius::Key>::deref(v7);
  WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  return v5;
}

void *__Block_byref_object_copy__17359(void *result, void *a2)
{
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  a2[5] = 0;
  a2[6] = 0;
  uint64_t v3 = result[7];
  result[7] = a2[7];
  a2[7] = v3;
  return result;
}

void *__Block_byref_object_dispose__17360(uint64_t a1)
{
  return WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::~Vector((void *)(a1 + 40));
}

void ___ZN2TI8Favonius14CMTouchHistory22initialize_key_matchesERKN3WTF6RefPtrINS0_5TouchEEERKNS0_20CMGeometryParametersERKNS0_28CMGeometryParametersForTouchE_block_invoke(uint64_t a1, CGRect **a2)
{
}

BOOL ___ZN2TI8Favonius14CMTouchHistory22initialize_key_matchesERKN3WTF6RefPtrINS0_5TouchEEERKNS0_20CMGeometryParametersERKNS0_28CMGeometryParametersForTouchE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(float *)(*(void *)a2 + 32) > *(float *)(*(void *)a3 + 32);
}

uint64_t std::__split_buffer<TI::Favonius::CMTouchHistory::TouchCorrelation>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__destroy_at[abi:nn180100]<TI::Favonius::CMTouchHistory::TouchCorrelation,0>((uint64_t *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__destroy_at[abi:nn180100]<TI::Favonius::CMTouchHistory::TouchCorrelation,0>(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v2);
  }
  uint64_t result = *a1;
  if (*a1)
  {
    return WTF::RefCounted<TI::Favonius::Touch>::deref(result);
  }
  return result;
}

double TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(uint64_t a1, uint64_t a2)
{
  float v2 = *(double *)(a2 + 16) - *(double *)(a1 + 16);
  double v3 = vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 8)) + fabsf(v2) * 0.6;
  {
    uint64_t v23 = a2;
    uint64_t v25 = a1;
    a2 = v23;
    a1 = v25;
    if (v13)
    {
      float v14 = 26.5;
      if (!s_interface_idiom_is_pad) {
        float v14 = 31.5;
      }
      TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::min_sep_CGFloat x = LODWORD(v14);
      a2 = v23;
      a1 = v25;
    }
  }
  float v4 = v3;
  {
    uint64_t v24 = a2;
    uint64_t v26 = a1;
    float v15 = v3;
    float v4 = v15;
    int v17 = v16;
    a2 = v24;
    a1 = v26;
    if (v17)
    {
      TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::max_sep_CGFloat x = dword_1E4154AB0[s_interface_idiom_is_pad == 0];
      float v4 = v15;
      a2 = v24;
      a1 = v26;
    }
  }
  double v5 = 1.0;
  if (*(float *)&TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::min_sep_x <= v4)
  {
    double v5 = 0.0;
    if (*(float *)&TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::max_sep_x > v4) {
      double v5 = (float)((float)(*(float *)&TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::max_sep_x
    }
                         - v4)
                 / (float)(*(float *)&TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::max_sep_x
                         - *(float *)&TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::min_sep_x));
  }
  if (*(unsigned char *)(*(void *)(a2 + 56) + 112))
  {
    int v6 = *(_DWORD *)(a2 + 52);
    if (v6 && (int v7 = *(_DWORD *)(a1 + 52)) != 0)
    {
      if (v6 != v7) {
        double v5 = v5 * 0.5;
      }
    }
    else
    {
      float v8 = (*(double *)(a1 + 8) + *(double *)(a2 + 8)) * -0.5;
      float v9 = TI::Favonius::KeyboardLayout::get_horizontal_center(*(TI::Favonius::KeyboardLayout **)(a2 + 56)) + v8;
      unint64_t v10 = &kTIACMessageHasNoCorrectionSymbol;
      {
        float v27 = v9;
        float v9 = v27;
        unint64_t v10 = &kTIACMessageHasNoCorrectionSymbol;
        if (v19)
        {
          float v20 = 53.0;
          if (!s_interface_idiom_is_pad) {
            float v20 = 63.0;
          }
          TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::min_center_distance = LODWORD(v20);
          float v9 = v27;
          unint64_t v10 = &kTIACMessageHasNoCorrectionSymbol;
        }
      }
      float v11 = fabsf(v9);
      {
        float v28 = v11;
        float v11 = v28;
        unint64_t v10 = &kTIACMessageHasNoCorrectionSymbol;
        if (v21)
        {
          float v22 = 106.0;
          if (!s_interface_idiom_is_pad) {
            float v22 = 126.0;
          }
          TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::max_center_distance = LODWORD(v22);
          float v11 = v28;
          unint64_t v10 = &kTIACMessageHasNoCorrectionSymbol;
        }
      }
      if (v11 < *((float *)v10 + 558)) {
        double v5 = v5
      }
           * ((float)(v11
                    / *(float *)&TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::max_center_distance)
            + 0.5);
    }
  }
  {
    float v18 = 26.5;
    if (!s_interface_idiom_is_pad) {
      float v18 = 31.5;
    }
    TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::min_sep_CGFloat y = LODWORD(v18);
  }
  {
    TI::Favonius::CMTouchHistory::estimate_inter_finger_zone_correlation(TI::Favonius::Touch const*,TI::Favonius::Touch const*)::max_sep_CGFloat y = dword_1E4154AB8[s_interface_idiom_is_pad == 0];
  }
  return v5;
}

unsigned __int16 *TI::Favonius::CMTouchHistory::append_debug_data(TI::Favonius::CMTouchHistory *this, KB::String *a2)
{
  KB::String::append((unsigned __int16 *)a2, "TOUCH INTERVAL: ", 0xFFFFuLL);
  float v4 = *((double *)this + 7);
  KB::String::append_format(a2, "%.2f", v4);
  KB::String::append((unsigned __int16 *)a2, " (average: ", 0xFFFFuLL);
  float v5 = *((double *)this + 8);
  KB::String::append_format(a2, "%.2f", v5);
  KB::String::append((unsigned __int16 *)a2, ")\n", 0xFFFFuLL);
  KB::String::append((unsigned __int16 *)a2, "TOUCH at (", 0xFFFFuLL);
  float v6 = *(double *)(*((void *)this + 2) + 8);
  KB::String::append_format(a2, "%.2f", v6);
  KB::String::append((unsigned __int16 *)a2, ",", 0xFFFFuLL);
  float v7 = *(double *)(*((void *)this + 2) + 16);
  KB::String::append_format(a2, "%.2f", v7);
  KB::String::append((unsigned __int16 *)a2, ") at time ", 0xFFFFuLL);
  float v8 = *(double *)(*((void *)this + 2) + 32);
  KB::String::append_format(a2, "%.2f", v8);
  KB::String::append((unsigned __int16 *)a2, " with radius ", 0xFFFFuLL);
  KB::String::append_format(a2, "%.2f", *(float *)(*((void *)this + 2) + 24));
  KB::String::append((unsigned __int16 *)a2, "\n", 0xFFFFuLL);
  KB::String::append((unsigned __int16 *)a2, "\tPRUNING THRESHOLD: ", 0xFFFFuLL);
  float v9 = (*(float (**)(TI::Favonius::CMTouchHistory *))(*(void *)this + 16))(this);
  KB::String::append_format(a2, "%.2f", v9);
  KB::String::append((unsigned __int16 *)a2, "\n\tTRANSPOSITION COST: ", 0xFFFFuLL);
  float v10 = (*(float (**)(TI::Favonius::CMTouchHistory *))(*(void *)this + 24))(this);
  KB::String::append_format(a2, "%.2f", v10);
  KB::String::append((unsigned __int16 *)a2, "\n\tINSERTION COST: ", 0xFFFFuLL);
  float v11 = (*(float (**)(TI::Favonius::CMTouchHistory *))(*(void *)this + 32))(this);
  KB::String::append_format(a2, "%.2f", v11);
  KB::String::append((unsigned __int16 *)a2, "\n\tDELETION COST: ", 0xFFFFuLL);
  float v12 = (*(float (**)(TI::Favonius::CMTouchHistory *))(*(void *)this + 40))(this);
  KB::String::append_format(a2, "%.2f", v12);
  KB::String::append((unsigned __int16 *)a2, "\n", 0xFFFFuLL);
  uint64_t result = KB::String::append((unsigned __int16 *)a2, "KEYS NEAR TOUCH:\n", 0xFFFFuLL);
  if (*((void *)this + 11))
  {
    uint64_t v14 = 0;
    unsigned int v15 = 1;
    do
    {
      uint64_t v16 = *((void *)this + 12);
      TI::Favonius::Key::append_debug_data(*(TI::Favonius::Key **)(*(void *)(v16 + 8 * v14) + 8), a2);
      uint64_t result = (unsigned __int16 *)KB::String::append_format(a2, ": %7.3f (%6.1f,%6.1f)\n", *(float *)(*(void *)(v16 + 8 * v14) + 32), *(double *)(*(void *)(v16 + 8 * v14) + 16), *(double *)(*(void *)(v16 + 8 * v14) + 24));
      uint64_t v14 = v15;
    }
    while (*((void *)this + 11) > (unint64_t)v15++);
  }
  return result;
}

void TI::Favonius::CMTouchHistory::root_hypothesis(atomic_uint *this)
{
  if (this) {
    atomic_fetch_add(this + 2, 1u);
  }
  operator new();
}

void TI::Favonius::CMTouchHistory::history_by_accepting_hypothesis()
{
}

uint64_t TI::Favonius::CMTouchHistory::CMTouchHistory(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F77FB0;
  float v6 = *(atomic_uint **)(a2 + 16);
  *(void *)(a1 + 16) = v6;
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    if (v9 < 0) {
      abort();
    }
    float v10 = std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v9 >> 5);
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = &v10[4 * v11];
    do
    {
      float v12 = *(atomic_uint **)v7;
      *float v10 = *(void *)v7;
      if (v12) {
        atomic_fetch_add(v12, 1u);
      }
      int v13 = *(atomic_uint **)(v7 + 8);
      v10[1] = v13;
      if (v13) {
        atomic_fetch_add(v13, 1u);
      }
      *((_OWORD *)v10 + 1) = *(_OWORD *)(v7 + 16);
      v10 += 4;
      v7 += 32;
    }
    while (v7 != v8);
    *(void *)(a1 + 32) = v10;
  }
  uint64_t v14 = *(atomic_uint **)(a2 + 48);
  *(void *)(a1 + 48) = v14;
  if (v14) {
    atomic_fetch_add(v14, 1u);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 72) = v15;
  WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::Vector((void *)(a1 + 88), (void *)(a2 + 88));
  WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::Vector((void *)(a1 + 112), (void *)(a2 + 112));
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  uint64_t v16 = *a3;
  if (v16)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
    if (*(void *)(a1 + 16) != (*(uint64_t (**)(uint64_t))(*(void *)v17 + 56))(v17)) {
      goto LABEL_21;
    }
    float v18 = (atomic_uint *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
    if (v18) {
      atomic_fetch_add(v18, 1u);
    }
    uint64_t v19 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v18;
    if (v19) {
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v19);
    }
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16);
    if (v16)
    {
LABEL_21:
      uint64_t v20 = *(void *)(a1 + 24);
      uint64_t v21 = MEMORY[0x1E4F143A8];
      do
      {
        uint64_t v22 = *(void *)(a1 + 32);
        v26[0] = v21;
        v26[1] = 0x40000000;
        float v27 = ___ZN2TI8Favonius14CMTouchHistoryC2EPKS1_N3WTF10PassRefPtrINS0_18GeometryHypothesisEEE_block_invoke;
        float v28 = &__block_descriptor_tmp_17383;
        uint64_t v29 = v16;
        if (v20 == v22) {
          break;
        }
        while ((((uint64_t (*)(void *, uint64_t))v27)(v26, v20) & 1) == 0)
        {
          v20 += 32;
          if (v20 == v22)
          {
            uint64_t v20 = v22;
            break;
          }
        }
        if (v20 == *(void *)(a1 + 32)) {
          break;
        }
        uint64_t v23 = (atomic_uint *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
        if (v23) {
          atomic_fetch_add(v23, 1u);
        }
        uint64_t v24 = *(void *)(v20 + 8);
        *(void *)(v20 + 8) = v23;
        if (v24) {
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v24);
        }
        uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16);
      }
      while (v16);
    }
  }
  return a1;
}

BOOL ___ZN2TI8Favonius14CMTouchHistoryC2EPKS1_N3WTF10PassRefPtrINS0_18GeometryHypothesisEEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  return *a2 == (*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
}

uint64_t TI::Favonius::CMTouchHistory::history_by_appending_touch@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 112))(&v8);
  uint64_t result = v7;
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  *a3 = v6;
  if (result) {
    return WTF::RefCounted<TI::Favonius::Touch>::deref(result);
  }
  return result;
}

uint64_t TI::Favonius::CMTouchHistory::nearby_key_with_key_code(TI::Favonius::CMTouchHistory *this, int a2)
{
  if (*((void *)this + 14) <= (unint64_t)a2) {
    return 0;
  }
  else {
    return *(void *)(*((void *)this + 15) + 8 * a2);
  }
}

uint64_t TI::Favonius::CMTouchHistory::nearby_keys(TI::Favonius::CMTouchHistory *this)
{
  return (uint64_t)this + 88;
}

uint64_t TI::Favonius::CMTouchHistory::touch(TI::Favonius::CMTouchHistory *this)
{
  return *((void *)this + 2);
}

float TI::Favonius::CMTouchHistory::cost_for_key_substitution(TI::Favonius::CMTouchHistory *this)
{
  return *((float *)this + 38);
}

float TI::Favonius::CMTouchHistory::cost_for_ignoring_touch(TI::Favonius::CMTouchHistory *this)
{
  return *((float *)this + 37);
}

float TI::Favonius::CMTouchHistory::cost_for_inserting_key_before_touch(TI::Favonius::CMTouchHistory *this)
{
  return *((float *)this + 36);
}

float TI::Favonius::CMTouchHistory::transposition_cost_for_touch(TI::Favonius::CMTouchHistory *this)
{
  return *((float *)this + 35);
}

float TI::Favonius::CMTouchHistory::pruning_threshold_for_touch(TI::Favonius::CMTouchHistory *this)
{
  return *((float *)this + 34);
}

void TI::Favonius::CMTouchHistory::~CMTouchHistory(TI::Favonius::CMTouchHistory *this)
{
  TI::Favonius::CMTouchHistory::~CMTouchHistory(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;

  *(void *)this = &unk_1F3F77FB0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::~Vector((void *)this + 14);
  WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::~Vector((void *)this + 11);
  float v2 = *((void *)this + 6);
  if (v2) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v2);
  }
  uint64_t v3 = (uint64_t *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)*((void *)this + 4);
    float v5 = (void *)*((void *)this + 3);
    if (v4 != v3)
    {
      do
      {
        v4 -= 4;
        std::__destroy_at[abi:nn180100]<TI::Favonius::CMTouchHistory::TouchCorrelation,0>(v4);
      }
      while (v4 != v3);
      float v5 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v3;
    operator delete(v5);
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    WTF::RefCounted<TI::Favonius::Touch>::deref(v6);
  }
}

void TI::Favonius::CMTouchHistory::empty_history(TI::Favonius::CMTouchHistory *this)
{
}

double TI::Favonius::CMTouchHistory::CMTouchHistory(TI::Favonius::CMTouchHistory *this)
{
  *((_DWORD *)this + 2) = 1;
  *(void *)this = &unk_1F3F77FB0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  *(_OWORD *)((char *)this + 56) = xmmword_1E4154D20;
  *((void *)this + 9) = 0x7F0000007FLL;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  *(void *)((char *)this + 140) = 0x7F0000007FLL;
  *((_DWORD *)this + 37) = -8388608;
  return result;
}

{
  double result;

  *((_DWORD *)this + 2) = 1;
  *(void *)this = &unk_1F3F77FB0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  *(_OWORD *)((char *)this + 56) = xmmword_1E4154D20;
  *((void *)this + 9) = 0x7F0000007FLL;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  *(void *)((char *)this + 140) = 0x7F0000007FLL;
  *((_DWORD *)this + 37) = -8388608;
  return result;
}

uint64_t TI::Favonius::CMTouchHistory::initialize_average_touch_interval(TI::Favonius::CMTouchHistory *this, double a2, const TI::Favonius::CMTouchHistory *a3)
{
  return (*(uint64_t (**)(TI::Favonius::CMTouchHistory *, const TI::Favonius::CMTouchHistory *))(*(void *)this + 56))(this, a3);
}

float TI::Favonius::CMTouchHistory::initialize_pruning_threshold(TI::Favonius::CMTouchHistory *this, const TI::Favonius::CMGeometryParametersForTouch *a2)
{
  float v2 = *((float *)this + 2) * *((float *)this + 2);
  float v3 = v2 * *(float *)this;
  float v4 = v2 * 0.5 * *((float *)this + 1);
  return v3 + v4;
}

float TI::Favonius::CMTouchHistory::initialize_transposition_cost(TI::Favonius::CMTouchHistory *this, double a2)
{
  return a2 * -8.16326523 * a2 + -2.0;
}

float TI::Favonius::CMTouchHistory::initialize_insertion_cost(TI::Favonius::CMTouchHistory *this, double a2)
{
  double v2 = 0.15;
  if (a2 >= 0.15)
  {
    double v2 = 0.5;
    if (a2 <= 0.5) {
      double v2 = a2;
    }
  }
  return v2 * -8.16326523 * v2 + -2.0;
}

float TI::Favonius::CMTouchHistory::initialize_deletion_cost(uint64_t a1, uint64_t a2, double a3, double a4)
{
  is_repeated_tap_on_same_keCGFloat y = TI::Favonius::CMTouchHistory::is_repeated_tap_on_same_key(a1, a2);
  double v6 = a4 * -8.16326523 * a4 + -3.20000005 + -1.10524082;
  if (is_repeated_tap_on_same_key) {
    return a4 * -8.16326523 * a4 + -2.24000001;
  }
  return v6;
}

float TI::Favonius::CMTouchHistory::initialize_substitution_cost(TI::Favonius::CMTouchHistory *this, double a2)
{
  double v2 = 0.15;
  if (a2 >= 0.15)
  {
    double v2 = 0.5;
    if (a2 <= 0.5) {
      double v2 = a2;
    }
  }
  return v2 * -8.16326523 * v2 + -3.20000005;
}

float TI::Favonius::CMTouchHistory::initialize_geometry_parameters_for_touch(uint64_t a1, double *a2, uint64_t a3)
{
  TI::Favonius::CMTouchHistory::initialize_touch_interval(a1, (uint64_t)a2);
  double v7 = v6;
  if ((*(uint64_t (**)(double *))(*(void *)a2 + 56))(a2)) {
    double v8 = a2[8] + (v7 - a2[8]) * 0.200000003;
  }
  else {
    double v8 = 0.35;
  }
  TI::Favonius::CMGeometryParametersForTouch::CMGeometryParametersForTouch(&v10, a3, a1, v8);
  return v10;
}

const char *TILanguageModelCacheStrategyAsString(unsigned int a1)
{
  if (a1 > 2) {
    return "cache-strategy: unknown";
  }
  else {
    return off_1E6E2D378[a1];
  }
}

uint64_t AppTrieLoaderImpl::handle@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void AppTrieLoaderImpl::~AppTrieLoaderImpl(AppTrieLoaderImpl *this)
{
  AppTrieLoaderImpl::~AppTrieLoaderImpl(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  NSObject *v2;
  void *v3;
  void *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint8_t buf[4];
  void *v9;
  uint64_t v10;

  float v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = TIPersonalizationAppNamesOSLogFacility();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    float v3 = objc_msgSend(NSString, "stringWithFormat:", @"%s Removing contact observer for app names", "~AppTrieLoaderImpl");
    *(_DWORD *)buf = 138412290;
    uint64_t v9 = v3;
    _os_log_impl(&dword_1E3F0E000, v2, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  float v4 = +[TITransientLexiconManager sharedInstance];
  [v4 removeContactObserver:*((void *)this + 6)];

  float v5 = (const void *)*((void *)this + 5);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 5) = 0;
  double v6 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v6);
  }
  double v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AppTrieLoaderImpl::AppTrieLoaderImpl(AppTrieLoaderImpl *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F3F78098;
  uint64_t View = LXLexiconRepositoryCreateView();
  float v3 = operator new(0x20uLL);
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = View;
  void *v3 = &unk_1F3F79260;
  *((void *)this + 3) = v3 + 3;
  *((void *)this + 4) = v3;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
}

void std::__shared_ptr_emplace<KB::LexiconHandle>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 24) = 0;
}

void std::__shared_ptr_emplace<KB::LexiconHandle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F79260;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<KB::LexiconHandle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F79260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

id AppTrieLoaderImpl::app_name_loading_queue(AppTrieLoaderImpl *this)
{
  if (AppTrieLoaderImpl::app_name_loading_queue(void)::once_token != -1) {
    dispatch_once(&AppTrieLoaderImpl::app_name_loading_queue(void)::once_token, &__block_literal_global_17422);
  }
  uint64_t v1 = (void *)AppTrieLoaderImpl::app_name_loading_queue(void)::queue;

  return v1;
}

void ___ZN17AppTrieLoaderImpl22app_name_loading_queueEv_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.TextInput.appNameLoading", v2);
  uint64_t v1 = (void *)AppTrieLoaderImpl::app_name_loading_queue(void)::queue;
  AppTrieLoaderImpl::app_name_loading_queue(void)::queue = (uint64_t)v0;
}

void AppTrieLoaderImpl::static_dictionary_for_filtering(AppTrieLoaderImpl *this, const KB::String *a2, const KB::String *a3, const KB::String *a4)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  KB::StaticDictionary::create(this);
}

void AppTrieLoaderImpl::create_empty_transient_lexicon(AppTrieLoaderImpl *this@<X0>, uint64_t *a2@<X8>)
{
  value[3] = *(void **)MEMORY[0x1E4F143B8];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  double v6 = (const void *)*MEMORY[0x1E4F72458];
  KB::cf_string_impl<KB::String>((CFStringRef *)value, (unsigned __int16 *)this);
  double v7 = value[0];
  CFDictionaryAddValue(Mutable, v6, value[0]);
  if (v7) {
    CFRelease(v7);
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72460], @"TextInput-AppNames");
  *a2 = LXLexiconCreateTransient();
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void AppTrieLoaderImpl::register_as_contact_observer(void *a1, const KB::String *a2, const KB::String *a3, const KB::String *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  double v8 = TIPersonalizationAppNamesOSLogFacility();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = objc_msgSend(NSString, "stringWithFormat:", @"%s Adding contact observer for app names", "register_as_contact_observer");
    *(_DWORD *)buf = 138412290;
    float v27 = v9;
    _os_log_impl(&dword_1E3F0E000, v8, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  float v10 = (std::__shared_weak_count *)a1[2];
  if (!v10 || (v11 = a1[1], (float v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:nn180100]();
  }
  int v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:nn180100](v12);
  uint64_t v15 = +[TITransientLexiconManager sharedInstance];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3321888768;
  v18[2] = ___ZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1__block_invoke;
  v18[3] = &__block_descriptor_144_a8_32c42_ZTSNSt3__18weak_ptrI17AppTrieLoaderImplEE48c17_ZTSKN2KB6StringE80c17_ZTSKN2KB6StringE112c17_ZTSKN2KB6StringE_e22_v16__0__NSDictionary_8l;
  v18[4] = v11;
  uint64_t v19 = v13;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  KB::String::String((KB::String *)v20, a2);
  KB::String::String((KB::String *)v22, a3);
  KB::String::String((KB::String *)v24, a4);
  uint64_t v16 = [v15 addContactObserver:v18];
  uint64_t v17 = (void *)a1[6];
  a1[6] = v16;

  if (v25 && v24[6] == 1) {
    free(v25);
  }
  if (v23 && v22[6] == 1) {
    free(v23);
  }
  if (v21 && v20[6] == 1) {
    free(v21);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void ___ZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1__block_invoke(void *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    float v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      double v6 = v5;
      uint64_t v7 = a1[4];
      if (v7)
      {
        AppTrieLoaderImpl::create_empty_transient_lexicon((AppTrieLoaderImpl *)(a1 + 6), (uint64_t *)&v12);
        double v8 = v12;
        if (v12)
        {
          uint64_t v9 = TIPersonalizationAppNamesOSLogFacility();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            float v10 = objc_msgSend(NSString, "stringWithFormat:", @"%s Installing app lexicon on main thread", "register_as_contact_observer_block_invoke");
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v10;
            _os_log_impl(&dword_1E3F0E000, v9, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&buf, 0xCu);
          }
          uint64_t v21 = MEMORY[0x1E4F143A8];
          uint64_t v22 = 3321888768;
          uint64_t v23 = ___ZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1__block_invoke_19;
          uint64_t v24 = &__block_descriptor_152_a8_32c85_ZTSKZZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1_EUb_E3__0_e5_v8__0l;
          *(void *)&long long buf = v7;
          *((void *)&buf + 1) = v6;
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          CFRetain(v8);
          CFTypeRef cf = v8;
          KB::String::String((KB::String *)v15, (const KB::String *)(a1 + 6));
          KB::String::String((KB::String *)v17, (const KB::String *)(a1 + 10));
          KB::String::String((KB::String *)v19, (const KB::String *)(a1 + 14));
          long long v25 = buf;
          if (*((void *)&buf + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 16), 1uLL, memory_order_relaxed);
          }
          CFTypeRef v11 = cf;
          CFTypeRef v26 = cf;
          if (cf)
          {
            CFRetain(cf);
            CFTypeRef v26 = v11;
          }
          KB::String::String((KB::String *)v27, (const KB::String *)v15);
          KB::String::String((KB::String *)v29, (const KB::String *)v17);
          KB::String::String((KB::String *)v31, (const KB::String *)v19);
          TIDispatchAsync();
          if (v20 && v19[6] == 1) {
            free(v20);
          }
          if (v18 && v17[6] == 1) {
            free(v18);
          }
          if (v16 && v15[6] == 1) {
            free(v16);
          }
          if (cf) {
            CFRelease(cf);
          }
          CFTypeRef cf = 0;
          if (*((void *)&buf + 1)) {
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&buf + 1));
          }
          if (v32 && v31[6] == 1) {
            free(v32);
          }
          if (v30 && v29[6] == 1) {
            free(v30);
          }
          if (v28 && v27[6] == 1) {
            free(v28);
          }
          if (v26) {
            CFRelease(v26);
          }
          CFTypeRef v26 = 0;
          if (*((void *)&v25 + 1)) {
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
          }
          CFRelease(v8);
        }
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v6);
    }
  }
}

void __destroy_helper_block_a8_32c42_ZTSNSt3__18weak_ptrI17AppTrieLoaderImplEE48c17_ZTSKN2KB6StringE80c17_ZTSKN2KB6StringE112c17_ZTSKN2KB6StringE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2 && *(unsigned char *)(a1 + 118) == 1) {
    free(v2);
  }
  id v3 = *(void **)(a1 + 88);
  if (v3 && *(unsigned char *)(a1 + 86) == 1) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 56);
  if (v4 && *(unsigned char *)(a1 + 54) == 1) {
    free(v4);
  }
  float v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

KB::String *__copy_helper_block_a8_32c42_ZTSNSt3__18weak_ptrI17AppTrieLoaderImplEE48c17_ZTSKN2KB6StringE80c17_ZTSKN2KB6StringE112c17_ZTSKN2KB6StringE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  KB::String::String((KB::String *)(a1 + 6), (const KB::String *)(a2 + 6));
  KB::String::String((KB::String *)(a1 + 10), (const KB::String *)(a2 + 10));

  return KB::String::String((KB::String *)(a1 + 14), (const KB::String *)(a2 + 14));
}

void ___ZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1__block_invoke_19(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    id v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        double v6 = *(const void **)(a1 + 48);
        if (v6)
        {
          CFRetain(*(CFTypeRef *)(a1 + 48));
          LXLexiconRepositoryAddOrUpdate();
          KB::retain_ptr<__CFDictionary const*>::operator=((const void **)(v5 + 40), v6);
          CFRelease(v6);
        }
        else
        {
          LXLexiconRepositoryAddOrUpdate();
          uint64_t v7 = *(void **)(v5 + 40);
          if (v7)
          {
            CFRelease(v7);
            *(void *)(v5 + 40) = 0;
          }
        }
        double v8 = AppTrieLoaderImpl::app_name_loading_queue((AppTrieLoaderImpl *)v7);
        uint64_t v18 = MEMORY[0x1E4F143A8];
        uint64_t v19 = 3321888768;
        uint64_t v20 = ___ZZZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1_EUb_ENK3__0clEv_block_invoke;
        uint64_t v21 = &__block_descriptor_152_a8_32c98_ZTSKZZZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1_EUb_ENK3__0clEvEUlvE__e5_v8__0l;
        uint64_t v10 = v5;
        atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v9 = *(const void **)(a1 + 48);
        CFTypeRef cf = v9;
        if (v9)
        {
          CFRetain(v9);
          CFTypeRef cf = v9;
        }
        KB::String::String((KB::String *)v12, (const KB::String *)(a1 + 56));
        KB::String::String((KB::String *)v14, (const KB::String *)(a1 + 88));
        KB::String::String((KB::String *)v16, (const KB::String *)(a1 + 120));
        uint64_t v22 = v10;
        uint64_t v23 = v4;
        atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        CFTypeRef v24 = cf;
        if (cf)
        {
          CFRetain(cf);
          CFTypeRef v24 = cf;
        }
        KB::String::String((KB::String *)v25, (const KB::String *)v12);
        KB::String::String((KB::String *)v27, (const KB::String *)v14);
        KB::String::String((KB::String *)v29, (const KB::String *)v16);
        TIDispatchAsync();
        if (v17 && v16[6] == 1) {
          free(v17);
        }
        if (v15 && v14[6] == 1) {
          free(v15);
        }
        if (v13 && v12[6] == 1) {
          free(v13);
        }
        if (cf) {
          CFRelease(cf);
        }
        std::__shared_weak_count::__release_weak(v4);

        if (v30 && v29[6] == 1) {
          free(v30);
        }
        if (v28 && v27[6] == 1) {
          free(v28);
        }
        if (v26 && v25[6] == 1) {
          free(v26);
        }
        if (v24) {
          CFRelease(v24);
        }
        CFTypeRef v24 = 0;
        if (v23) {
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
}

void __destroy_helper_block_a8_32c85_ZTSKZZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1_EUb_E3__0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2 && *(unsigned char *)(a1 + 126) == 1) {
    free(v2);
  }
  id v3 = *(void **)(a1 + 96);
  if (v3 && *(unsigned char *)(a1 + 94) == 1) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4 && *(unsigned char *)(a1 + 62) == 1) {
    free(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  *(void *)(a1 + 48) = 0;
  double v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

KB::String *__copy_helper_block_a8_32c85_ZTSKZZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1_EUb_E3__0(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (const void *)a2[6];
  a1[6] = v5;
  if (v5)
  {
    CFRetain(v5);
    a1[6] = v5;
  }
  KB::String::String((KB::String *)(a1 + 7), (const KB::String *)(a2 + 7));
  KB::String::String((KB::String *)(a1 + 11), (const KB::String *)(a2 + 11));

  return KB::String::String((KB::String *)(a1 + 15), (const KB::String *)(a2 + 15));
}

void ___ZZZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1_EUb_ENK3__0clEv_block_invoke(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    id v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (a1[4])
      {
        uint64_t v4 = TIPersonalizationAppNamesOSLogFacility();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          uint64_t v5 = objc_msgSend(NSString, "stringWithFormat:", @"%s Adding app names to app lexicon", "operator()");
          int buf = 138412290;
          *(void *)buf_4 = v5;
          _os_log_impl(&dword_1E3F0E000, v4, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&buf, 0xCu);
        }
        AppTrieLoaderImpl::static_dictionary_for_filtering((AppTrieLoaderImpl *)(a1 + 7), (const KB::String *)(a1 + 11), (const KB::String *)(a1 + 15), v6);
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v3);
    }
  }
}

void __destroy_helper_block_a8_32c98_ZTSKZZZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1_EUb_ENK3__0clEvEUlvE_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2 && *(unsigned char *)(a1 + 126) == 1) {
    free(v2);
  }
  id v3 = *(void **)(a1 + 96);
  if (v3 && *(unsigned char *)(a1 + 94) == 1) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4 && *(unsigned char *)(a1 + 62) == 1) {
    free(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  *(void *)(a1 + 48) = 0;
  double v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

KB::String *__copy_helper_block_a8_32c98_ZTSKZZZN17AppTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1_EUb_ENK3__0clEvEUlvE_(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (const void *)a2[6];
  a1[6] = v5;
  if (v5)
  {
    CFRetain(v5);
    a1[6] = v5;
  }
  KB::String::String((KB::String *)(a1 + 7), (const KB::String *)(a2 + 7));
  KB::String::String((KB::String *)(a1 + 11), (const KB::String *)(a2 + 11));

  return KB::String::String((KB::String *)(a1 + 15), (const KB::String *)(a2 + 15));
}

void ___ZL27background_append_app_namesN2KB10retain_ptrIP10_LXLexiconEERKNS_16StaticDictionaryE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = TIPersonalizationAppNamesOSLogFacility();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    CFTypeRef v11 = [NSString stringWithFormat:@"%s AppName=%@", "background_append_app_names_block_invoke", v3];
    *(_DWORD *)int buf = 138412290;
    *(void *)uint64_t v18 = v11;
    _os_log_debug_impl(&dword_1E3F0E000, v4, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
  }
  uint64_t v5 = *(KB::StaticDictionary **)(a1 + 40);
  double v6 = (__CFString *)v3;
  if ([(__CFString *)v6 length])
  {
    *(_WORD *)uint64_t v18 = 0;
    v18[2] = 0;
    *(void *)&v18[4] = " ,:;";
    *(_DWORD *)int buf = 1048580;
    char v19 = 0;
    KB::utf8_string(v6, (uint64_t)v14);
    KB::sbs_string_tokenize(v14, (const KB::String *)buf, v12);
    uint64_t v7 = (unsigned __int16 *)v12[0];
    double v8 = (unsigned __int16 *)v12[1];
    while (v7 != v8)
    {
      unsigned int v9 = v7[2];
      if (!v7[2])
      {
        KB::String::compute_length(v7);
        unsigned int v9 = v7[2];
      }
      if (v9 >= 3 && !KB::StaticDictionary::contains(v5, (const KB::String *)v7, 2, 0.0))
      {
        KB::cf_string_impl<KB::String>((CFStringRef *)&v13, v7);
        uint64_t v10 = v13;
        if (LXLexiconAdd()) {
          LXLexiconIncrementUsageCount();
        }
        if (v10) {
          CFRelease(v10);
        }
      }
      v7 += 16;
    }
    int v13 = (void **)v12;
    std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v13);
    if (v16 && v15 == 1) {
      free(v16);
    }
    if (*(void *)&v18[4] && v18[2] == 1) {
      free(*(void **)&v18[4]);
    }
  }
}

void __destroy_helper_block_a8_32c36_ZTSN2KB10retain_ptrIP10_LXLexiconEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
}

void *__copy_helper_block_a8_32c36_ZTSN2KB10retain_ptrIP10_LXLexiconEE(void *result, uint64_t a2)
{
  uint64_t v2 = *(const void **)(a2 + 32);
  result[4] = v2;
  if (v2)
  {
    id v3 = result;
    double result = CFRetain(v2);
    v3[4] = v2;
  }
  return result;
}

const void **AppTrieLoaderImpl::set_lexicon(uint64_t a1, const void **a2)
{
  LXLexiconRepositoryAddOrUpdate();
  uint64_t v4 = *a2;

  return KB::retain_ptr<__CFDictionary const*>::operator=((const void **)(a1 + 40), v4);
}

void KB::AppTrieLoader::create(KB::AppTrieLoader *this)
{
}

uint64_t std::__shared_ptr_pointer<AppTrieLoaderStub *,std::shared_ptr<AppTrieLoaderStub>::__shared_ptr_default_delete<AppTrieLoaderStub,AppTrieLoaderStub>,std::allocator<AppTrieLoaderStub>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v2);
    }
    JUMPOUT(0x1E4E7BC20);
  }
  return result;
}

void std::__shared_ptr_pointer<AppTrieLoaderStub *,std::shared_ptr<AppTrieLoaderStub>::__shared_ptr_default_delete<AppTrieLoaderStub,AppTrieLoaderStub>,std::allocator<AppTrieLoaderStub>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

uint64_t AppTrieLoaderStub::handle@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void AppTrieLoaderStub::~AppTrieLoaderStub(AppTrieLoaderStub *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }

  JUMPOUT(0x1E4E7BC20);
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void KB::AppTrieLoader::create()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

AppTrieLoaderImpl *std::__shared_ptr_pointer<AppTrieLoaderImpl *,std::shared_ptr<AppTrieLoaderImpl>::__shared_ptr_default_delete<AppTrieLoaderImpl,AppTrieLoaderImpl>,std::allocator<AppTrieLoaderImpl>>::__on_zero_shared(uint64_t a1)
{
  double result = *(AppTrieLoaderImpl **)(a1 + 24);
  if (result)
  {
    AppTrieLoaderImpl::~AppTrieLoaderImpl(result);
    JUMPOUT(0x1E4E7BC20);
  }
  return result;
}

void std::__shared_ptr_pointer<AppTrieLoaderImpl *,std::shared_ptr<AppTrieLoaderImpl>::__shared_ptr_default_delete<AppTrieLoaderImpl,AppTrieLoaderImpl>,std::allocator<AppTrieLoaderImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

uint64_t KB::TIAssetPathRegistry::createPathForMatchingFile()
{
  uint64_t v2 = 0;
  id v3 = &v2;
  uint64_t v4 = 0x3002000000;
  uint64_t v5 = __Block_byref_object_copy__17466;
  double v6 = __Block_byref_object_dispose__17467;
  CFTypeRef cf = 0;
  LDEnumerateAssetDataItems();
  uint64_t v0 = v3[5];
  v3[5] = 0;
  _Block_object_dispose(&v2, 8);
  if (cf) {
    CFRelease(cf);
  }
  return v0;
}

uint64_t __Block_byref_object_copy__17466(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__17467(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZN2KB19TIAssetPathRegistry25createPathForMatchingFileEPK10__CFLocaleRKNSt3__18functionIFbPK7__CFURLPK10__CFStringEEE_block_invoke(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v15 = a5;
  CFURLRef v16 = a2;
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8)
  {
    if ((*(unsigned int (**)(uint64_t, const __CFURL **, uint64_t *))(*(void *)v8 + 48))(v8, &v16, &v15))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
      CFStringRef v12 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
      int v13 = *(const void **)(v11 + 40);
      if (v13) {
        CFRelease(v13);
      }
      *(void *)(v11 + 40) = v12;
      *a6 = 1;
    }
  }
  else
  {
    uint64_t v14 = std::__throw_bad_function_call[abi:nn180100]();
    KB::TIAssetPathRegistry::createPathsForMatchingBundles(v14);
  }
}

CFMutableArrayRef KB::TIAssetPathRegistry::createPathsForMatchingBundles()
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  LDEnumerateAssetDataItems();
  return Mutable;
}

void ___ZN2KB19TIAssetPathRegistry29createPathsForMatchingBundlesEPK10__CFLocaleRKNSt3__18functionIFbPK7__CFURLPK10__CFString17LDAssetBundleTypeEEEb_block_invoke(uint64_t a1, const __CFURL *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v12 = a5;
  CFURLRef v13 = a2;
  int v11 = a3;
  uint64_t v7 = *(void *)(v6 + 24);
  if (v7)
  {
    if ((*(unsigned int (**)(uint64_t, const __CFURL **, uint64_t *, int *))(*(void *)v7 + 48))(v7, &v13, &v12, &v11))
    {
      CFStringRef v9 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v9);
      if (v9)
      {
        CFRelease(v9);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    KB::TIAssetPathRegistry::unigramLexiconPredicate(v10);
  }
}

void KB::TIAssetPathRegistry::unigramLexiconPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F78238;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::unigramLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::unigramLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::operator()(uint64_t a1, KB **a2, CFStringRef *a3)
{
  id v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F724E0], 0)) {
    return 0;
  }

  return KB::fileNameMatches(v3, @"Unigrams", v4, v5);
}

BOOL KB::fileNameMatches(KB *this, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  CFStringRef PathComponent = CFURLCopyLastPathComponent(this);
  if ((unint64_t)CFStringFind(PathComponent, a2, 0).location)
  {
    BOOL v7 = 0;
  }
  else
  {
    CFStringRef v8 = CFURLCopyPathExtension(this);
    BOOL v7 = CFEqual(@"dat", v8);
    if (v8) {
      CFRelease(v8);
    }
  }
  if (PathComponent) {
    CFRelease(PathComponent);
  }
  return v7;
}

void std::__function::__func<KB::TIAssetPathRegistry::unigramLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::unigramLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F78238;
}

void *std::__function::__func<KB::TIAssetPathRegistry::unigramLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::unigramLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F78238;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::unigramLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::unigramLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::~__func()
{
}

void KB::TIAssetPathRegistry::TransliterationLexiconPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F78280;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::TransliterationLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::TransliterationLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::operator()(uint64_t a1, uint64_t a2, CFStringRef *a3)
{
  return CFEqual(*a3, (CFStringRef)*MEMORY[0x1E4F72520]);
}

void std::__function::__func<KB::TIAssetPathRegistry::TransliterationLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::TransliterationLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F78280;
}

void *std::__function::__func<KB::TIAssetPathRegistry::TransliterationLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::TransliterationLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F78280;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::TransliterationLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::TransliterationLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::~__func()
{
}

void KB::TIAssetPathRegistry::siriUnigramLexiconPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F782C8;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::siriUnigramLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriUnigramLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::operator()(uint64_t a1, KB **a2, CFStringRef *a3)
{
  id v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F72510], 0)) {
    return 0;
  }

  return KB::fileNameMatches(v3, @"Siri-Unigrams", v4, v5);
}

void std::__function::__func<KB::TIAssetPathRegistry::siriUnigramLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriUnigramLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F782C8;
}

void *std::__function::__func<KB::TIAssetPathRegistry::siriUnigramLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriUnigramLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F782C8;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::siriUnigramLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriUnigramLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::~__func()
{
}

void KB::TIAssetPathRegistry::phraseLexiconPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F78310;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::phraseLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::phraseLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::operator()(uint64_t a1, KB **a2, CFStringRef *a3)
{
  id v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F724E0], 0)) {
    return 0;
  }

  return KB::fileNameMatches(v3, @"Phrases", v4, v5);
}

void std::__function::__func<KB::TIAssetPathRegistry::phraseLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::phraseLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F78310;
}

void *std::__function::__func<KB::TIAssetPathRegistry::phraseLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::phraseLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F78310;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::phraseLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::phraseLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::~__func()
{
}

void KB::TIAssetPathRegistry::siriPhraseLexiconPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F78358;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::siriPhraseLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriPhraseLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::operator()(uint64_t a1, KB **a2, CFStringRef *a3)
{
  id v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F72510], 0)) {
    return 0;
  }

  return KB::fileNameMatches(v3, @"Siri-Phrases", v4, v5);
}

void std::__function::__func<KB::TIAssetPathRegistry::siriPhraseLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriPhraseLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F78358;
}

void *std::__function::__func<KB::TIAssetPathRegistry::siriPhraseLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriPhraseLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F78358;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::siriPhraseLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriPhraseLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::~__func()
{
}

void KB::TIAssetPathRegistry::deltaLexiconPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F783A0;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::deltaLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::deltaLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::operator()(uint64_t a1, KB **a2, CFStringRef *a3)
{
  id v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F724C0], 0)) {
    return 0;
  }

  return KB::fileNameMatches(v3, @"Delta", v4, v5);
}

void std::__function::__func<KB::TIAssetPathRegistry::deltaLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::deltaLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F783A0;
}

void *std::__function::__func<KB::TIAssetPathRegistry::deltaLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::deltaLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F783A0;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::deltaLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::deltaLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::~__func()
{
}

void KB::TIAssetPathRegistry::siriDeltaLexiconPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F783E8;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::siriDeltaLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriDeltaLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::operator()(uint64_t a1, KB **a2, CFStringRef *a3)
{
  id v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F72518], 0)) {
    return 0;
  }

  return KB::fileNameMatches(v3, @"Siri-Delta", v4, v5);
}

void std::__function::__func<KB::TIAssetPathRegistry::siriDeltaLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriDeltaLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F783E8;
}

void *std::__function::__func<KB::TIAssetPathRegistry::siriDeltaLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriDeltaLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F783E8;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::siriDeltaLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriDeltaLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::~__func()
{
}

void KB::TIAssetPathRegistry::morphemeLexiconPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F78430;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::morphemeLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::morphemeLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::operator()(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  CFURLRef v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F724E8], 0)) {
    return 0;
  }
  CFURLRef v5 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, @"morpheme.dat", 0);
  CFErrorRef error = 0;
  int IsReachable = CFURLResourceIsReachable(v5, &error);
  if (error) {
    CFRelease(error);
  }
  if (v5) {
    CFRelease(v5);
  }
  return IsReachable != 0;
}

void std::__function::__func<KB::TIAssetPathRegistry::morphemeLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::morphemeLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F78430;
}

void *std::__function::__func<KB::TIAssetPathRegistry::morphemeLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::morphemeLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F78430;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::morphemeLexiconPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::morphemeLexiconPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*)>::~__func()
{
}

void KB::TIAssetPathRegistry::requiredAssetLanguageModelPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F78478;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::requiredAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::requiredAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::operator()(uint64_t a1, uint64_t a2, CFStringRef *a3, int *a4)
{
  CFStringRef v4 = *a3;
  int v5 = *a4;
  return (CFEqual(*a3, (CFStringRef)*MEMORY[0x1E4F724D0])
       || CFEqual(v4, (CFStringRef)*MEMORY[0x1E4F724F0]))
      && v5 == 0;
}

void std::__function::__func<KB::TIAssetPathRegistry::requiredAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::requiredAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F78478;
}

void *std::__function::__func<KB::TIAssetPathRegistry::requiredAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::requiredAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F78478;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::requiredAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::requiredAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::~__func()
{
}

void KB::TIAssetPathRegistry::siriRequiredAssetLanguageModelPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F784C0;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::siriRequiredAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriRequiredAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::operator()(uint64_t a1, uint64_t a2, CFStringRef *a3, int *a4)
{
  int v4 = *a4;
  CFComparisonResult v5 = CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F72508], 0);
  return !v4 && v5 == kCFCompareEqualTo;
}

void std::__function::__func<KB::TIAssetPathRegistry::siriRequiredAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriRequiredAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F784C0;
}

void *std::__function::__func<KB::TIAssetPathRegistry::siriRequiredAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriRequiredAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F784C0;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::siriRequiredAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriRequiredAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::~__func()
{
}

void KB::TIAssetPathRegistry::mobileAssetLanguageModelPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F78508;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::mobileAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::mobileAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::operator()(uint64_t a1, uint64_t a2, CFStringRef *a3, int *a4)
{
  CFStringRef v4 = *a3;
  int v5 = *a4;
  return (CFEqual(*a3, (CFStringRef)*MEMORY[0x1E4F724D0])
       || CFEqual(v4, (CFStringRef)*MEMORY[0x1E4F724F0]))
      && v5 != 0;
}

void std::__function::__func<KB::TIAssetPathRegistry::mobileAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::mobileAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F78508;
}

void *std::__function::__func<KB::TIAssetPathRegistry::mobileAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::mobileAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F78508;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::mobileAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::mobileAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::~__func()
{
}

void KB::TIAssetPathRegistry::siriMobileAssetLanguageModelPredicate(void *a1@<X8>)
{
  *a1 = &unk_1F3F78550;
  a1[3] = a1;
}

BOOL std::__function::__func<KB::TIAssetPathRegistry::siriMobileAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriMobileAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::operator()(uint64_t a1, uint64_t a2, CFStringRef *a3, int *a4)
{
  int v4 = *a4;
  CFComparisonResult v5 = CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E4F72508], 0);
  return v4 && v5 == kCFCompareEqualTo;
}

void std::__function::__func<KB::TIAssetPathRegistry::siriMobileAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriMobileAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F78550;
}

void *std::__function::__func<KB::TIAssetPathRegistry::siriMobileAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriMobileAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F3F78550;
  return result;
}

void std::__function::__func<KB::TIAssetPathRegistry::siriMobileAssetLanguageModelPredicate(void)::$_0,std::allocator<KB::TIAssetPathRegistry::siriMobileAssetLanguageModelPredicate(void)::$_0>,BOOL ()(__CFURL const*,__CFString const*,LDAssetBundleType)>::~__func()
{
}

__n128 __Block_byref_object_copy__17653(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__17654(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

uint64_t __Block_byref_object_copy__116(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__117(uint64_t a1)
{
}

uint64_t TI::Favonius::CMGeometryHypothesis::is_key_match(TI::Favonius::CMGeometryHypothesis *this)
{
  return 0;
}

uint64_t TI::Favonius::CMGeometryHypothesis::instance_error_correction_type(TI::Favonius::CMGeometryHypothesis *this)
{
  return 0;
}

void TI::Favonius::CMGeometryHypothesis::get_key_touch_alignment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t, int *))(*(void *)v5 + 88))(v5, a2, a3);
    BOOL v7 = *(int **)(a2 + 8);
    unint64_t v6 = *(void *)(a2 + 16);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v10 = *(int **)a2;
      uint64_t v11 = ((uint64_t)v7 - *(void *)a2) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        abort();
      }
      uint64_t v13 = v6 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v15 = v12;
      }
      if (v15)
      {
        unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v15);
        uint64_t v10 = *(int **)a2;
        BOOL v7 = *(int **)(a2 + 8);
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v17 = (int *)(v15 + 4 * v11);
      unint64_t v18 = v15 + 4 * v16;
      *uint64_t v17 = *a3;
      CFStringRef v8 = v17 + 1;
      while (v7 != v10)
      {
        int v19 = *--v7;
        *--uint64_t v17 = v19;
      }
      *(void *)a2 = v17;
      *(void *)(a2 + 8) = v8;
      *(void *)(a2 + 16) = v18;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *BOOL v7 = *a3;
      CFStringRef v8 = v7 + 1;
    }
    *(void *)(a2 + 8) = v8;
    int v9 = *a3 + 1;
  }
  else
  {
    int v9 = 0;
    *(void *)(a2 + 8) = *(void *)a2;
  }
  *a3 = v9;
}

void TI::Favonius::CMGeometryHypothesis::extension_with_unmatched_touch()
{
}

uint64_t TI::Favonius::CMUnmatchedTouchHypothesis::CMUnmatchedTouchHypothesis(uint64_t a1, atomic_uint *a2, unsigned int **a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  int v9 = v5;
  TI::Favonius::CMGeometryHypothesis::CMGeometryHypothesis(a1, a2, (uint64_t *)&v9);
  if (v9)
  {
    unsigned int v6 = atomic_load(v9 + 2);
    if (v6 == 1) {
      (*(void (**)(void))(*(void *)v9 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF);
    }
  }
  *(void *)a1 = &unk_1F3F78858;
  float v7 = (*(float (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
  *(float *)(a1 + 40) = v7 + (*(float (**)(atomic_uint *))(*(void *)a2 + 16))(a2);
  return a1;
}

uint64_t TI::Favonius::CMGeometryHypothesis::CMGeometryHypothesis(uint64_t a1, atomic_uint *a2, uint64_t *a3)
{
  CFURLRef v3 = a2;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F785D8;
  *(void *)(a1 + 16) = a2;
  if (a2) {
    atomic_fetch_add(a2 + 2, 1u);
  }
  uint64_t v5 = *a3;
  *a3 = 0;
  *(void *)(a1 + 24) = v5;
  if (((*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 104))(a2) & 1) == 0) {
    CFURLRef v3 = (atomic_uint *)*((void *)v3 + 4);
  }
  *(void *)(a1 + 32) = v3;
  return a1;
}

uint64_t TI::Favonius::CMUnmatchedTouchHypothesis::instance_error_correction_type(TI::Favonius::CMUnmatchedTouchHypothesis *this)
{
  return 8;
}

uint64_t TI::Favonius::CMUnmatchedTouchHypothesis::get_key_touch_alignment(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v5 + 88))(v5, a2, a3);
  ++*a3;
  return result;
}

void TI::Favonius::CMGeometryHypothesis::extension_with_unmatched_key()
{
}

uint64_t TI::Favonius::CMUnmatchedKeyHypothesis::CMUnmatchedKeyHypothesis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3F785D8;
  *(void *)(a1 + 16) = a2;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  *(void *)(a1 + 24) = v7;
  char v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  uint64_t v9 = a2;
  if ((v8 & 1) == 0) {
    uint64_t v9 = *(void *)(a2 + 32);
  }
  *(void *)(a1 + 32) = v9;
  *(void *)a1 = &unk_1F3F787D8;
  float v10 = (*(float (**)(uint64_t))(*(void *)a4 + 32))(a4);
  *(float *)(a1 + 40) = v10 + (*(float (**)(uint64_t))(*(void *)a2 + 16))(a2);
  return a1;
}

uint64_t TI::Favonius::CMUnmatchedKeyHypothesis::instance_error_correction_type(TI::Favonius::CMUnmatchedKeyHypothesis *this)
{
  return 4;
}

void TI::Favonius::CMUnmatchedKeyHypothesis::get_key_touch_alignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2, a3);
  uint64_t v7 = *(_DWORD **)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *(_DWORD **)a2;
    uint64_t v10 = ((uint64_t)v7 - *(void *)a2) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      abort();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14)
    {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v14);
      uint64_t v9 = *(_DWORD **)a2;
      uint64_t v7 = *(_DWORD **)(a2 + 8);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (_DWORD *)(v14 + 4 * v10);
    unint64_t v17 = v14 + 4 * v15;
    *uint64_t v16 = -1;
    char v8 = v16 + 1;
    while (v7 != v9)
    {
      int v18 = *--v7;
      *--uint64_t v16 = v18;
    }
    *(void *)a2 = v16;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v7 = -1;
    char v8 = v7 + 1;
  }
  *(void *)(a2 + 8) = v8;
}

void TI::Favonius::CMGeometryHypothesis::extension_with_arbitrary_key_substitution()
{
}

void *TI::Favonius::CMSubstitutionHypothesis::CMSubstitutionHypothesis(void *a1, atomic_uint *a2, unsigned int **a3)
{
  int v4 = *a3;
  *a3 = 0;
  uint64_t v7 = v4;
  TI::Favonius::CMGeometryHypothesis::CMGeometryHypothesis((uint64_t)a1, a2, (uint64_t *)&v7);
  if (v7)
  {
    unsigned int v5 = atomic_load(v7 + 2);
    if (v5 == 1) {
      (*(void (**)(void))(*(void *)v7 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF);
    }
  }
  *a1 = &unk_1F3F78758;
  return a1;
}

uint64_t TI::Favonius::CMSubstitutionHypothesis::instance_error_correction_type(TI::Favonius::CMSubstitutionHypothesis *this)
{
  return 32;
}

void TI::Favonius::CMGeometryHypothesis::extension_with_transposed_key()
{
}

void *TI::Favonius::CMTranspositionHypothesis::CMTranspositionHypothesis(void *a1, atomic_uint *a2, unsigned int **a3, uint64_t *a4)
{
  unsigned int v5 = *a3;
  *a3 = 0;
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v9 = v6;
  uint64_t v10 = v5;
  TI::Favonius::CMMatchedKeyHypothesis::CMMatchedKeyHypothesis((uint64_t)a1, a2, &v10, &v9);
  if (v9) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v9);
  }
  if (v10)
  {
    unsigned int v7 = atomic_load(v10 + 2);
    if (v7 == 1) {
      (*(void (**)(void))(*(void *)v10 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF);
    }
  }
  *a1 = &unk_1F3F786D8;
  return a1;
}

uint64_t TI::Favonius::CMMatchedKeyHypothesis::CMMatchedKeyHypothesis(uint64_t a1, atomic_uint *a2, unsigned int **a3, uint64_t *a4)
{
  unsigned int v7 = *a3;
  *a3 = 0;
  uint64_t v12 = v7;
  TI::Favonius::CMGeometryHypothesis::CMGeometryHypothesis(a1, a2, (uint64_t *)&v12);
  if (v12)
  {
    unsigned int v8 = atomic_load(v12 + 2);
    if (v8 == 1) {
      (*(void (**)(void))(*(void *)v12 + 8))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF);
    }
  }
  *(void *)a1 = &unk_1F3F78658;
  uint64_t v9 = *a4;
  *a4 = 0;
  *(void *)(a1 + 40) = v9;
  float v10 = (*(float (**)(atomic_uint *))(*(void *)a2 + 16))(a2);
  *(float *)(a1 + 48) = v10
                      + TI::Favonius::CMMatchedKeyHypothesis::partial_log_likelihood(a2, *(void *)(a1 + 24), *(void *)(a1 + 40));
  return a1;
}

uint64_t TI::Favonius::CMMatchedKeyHypothesis::is_key_match(TI::Favonius::CMMatchedKeyHypothesis *this)
{
  return 1;
}

uint64_t TI::Favonius::CMTranspositionHypothesis::instance_error_correction_type(TI::Favonius::CMTranspositionHypothesis *this)
{
  return 2;
}

int32x2_t TI::Favonius::CMTranspositionHypothesis::get_key_touch_alignment(uint64_t a1, uint64_t a2, int *a3)
{
  TI::Favonius::CMGeometryHypothesis::get_key_touch_alignment(a1, a2, a3);
  uint64_t v4 = *(void *)(a2 + 8);
  int32x2_t result = vrev64_s32(*(int32x2_t *)(v4 - 8));
  *(int32x2_t *)(v4 - 8) = result;
  return result;
}

void TI::Favonius::CMGeometryHypothesis::extension_with_matched_key()
{
}

uint64_t TI::Favonius::CMGeometryHypothesis::parent_hypothesis(TI::Favonius::CMGeometryHypothesis *this)
{
  return *((void *)this + 2);
}

uint64_t TI::Favonius::CMMatchedKeyHypothesis::matched_key(TI::Favonius::CMMatchedKeyHypothesis *this)
{
  return *((void *)this + 5);
}

uint64_t TI::Favonius::CMGeometryHypothesis::touch_history(TI::Favonius::CMGeometryHypothesis *this)
{
  return *((void *)this + 3);
}

float TI::Favonius::CMTranspositionHypothesis::log_likelihood(TI::Favonius::CMTranspositionHypothesis *this)
{
  uint64_t v2 = (*(uint64_t (**)(TI::Favonius::CMTranspositionHypothesis *))(*(void *)this + 24))(this);
  return (*(float (**)(uint64_t))(*(void *)v2 + 24))(v2) + *((float *)this + 12);
}

void TI::Favonius::CMTranspositionHypothesis::~CMTranspositionHypothesis(TI::Favonius::CMTranspositionHypothesis *this)
{
  TI::Favonius::CMMatchedKeyHypothesis::~CMMatchedKeyHypothesis(this);

  JUMPOUT(0x1E4E7BC20);
}

void TI::Favonius::CMMatchedKeyHypothesis::~CMMatchedKeyHypothesis(TI::Favonius::CMMatchedKeyHypothesis *this)
{
  *(void *)this = &unk_1F3F78658;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v2);
  }

  TI::Favonius::CMGeometryHypothesis::~CMGeometryHypothesis(this);
}

{
  uint64_t vars8;

  TI::Favonius::CMMatchedKeyHypothesis::~CMMatchedKeyHypothesis(this);

  JUMPOUT(0x1E4E7BC20);
}

void TI::Favonius::CMGeometryHypothesis::~CMGeometryHypothesis(TI::Favonius::CMGeometryHypothesis *this)
{
  *(void *)this = &unk_1F3F785D8;
  uint64_t v2 = (unsigned int *)*((void *)this + 3);
  if (v2)
  {
    unsigned int v3 = atomic_load(v2 + 2);
    if (v3 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  if (v4)
  {
    unsigned int v5 = atomic_load(v4 + 2);
    if (v5 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF);
    }
  }
}

{
  uint64_t vars8;

  TI::Favonius::CMGeometryHypothesis::~CMGeometryHypothesis(this);

  JUMPOUT(0x1E4E7BC20);
}

uint64_t TI::Favonius::CMMatchedKeyHypothesis::instance_error_correction_type(TI::Favonius::CMMatchedKeyHypothesis *this)
{
  uint64_t v2 = (atomic_uint *)*((void *)this + 3);
  if (v2) {
    atomic_fetch_add(v2 + 2, 1u);
  }
  uint64_t v3 = **(void **)((*(uint64_t (**)(atomic_uint *))(*(void *)v2 + 64))(v2) + 8);
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
  }
  int v4 = *(unsigned __int16 *)(*(void *)(v3 + 8) + 62);
  int v5 = *(unsigned __int16 *)(*(void *)((*(uint64_t (**)(TI::Favonius::CMMatchedKeyHypothesis *))(*(void *)this + 32))(this)
                                       + 8)
                           + 62);
  WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v3);
  unsigned int v6 = atomic_load((unsigned int *)v2 + 2);
  if (v6 == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  else {
    atomic_fetch_add(v2 + 2, 0xFFFFFFFF);
  }
  return 16 * (v4 != v5);
}

float TI::Favonius::CMMatchedKeyHypothesis::log_likelihood(TI::Favonius::CMMatchedKeyHypothesis *this)
{
  return *((float *)this + 12);
}

float TI::Favonius::CMMatchedKeyHypothesis::partial_log_likelihood(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = a1;
  if (((*(uint64_t (**)(void *))(*a1 + 104))(a1) & 1) == 0) {
    unsigned int v6 = (void *)a1[4];
  }
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7 != *(void *)(a2 + 32))
  {
    int v8 = 0;
    int v9 = 0;
    unsigned int v10 = 0;
    char v11 = 0;
    float64x2_t v25 = 0u;
    float64x2_t v26 = 0u;
    while (1)
    {
      uint64_t v12 = *(void *)(v7 + 8);
      if (v6
        && (uint64_t v13 = (*(uint64_t (**)(void *))(*v6 + 24))(v6),
            *(void *)v7 == (*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13)))
      {
        uint64_t v12 = (*(uint64_t (**)(void *))(*v6 + 32))(v6);
        unsigned int v6 = (void *)v6[4];
        if (!v12) {
          goto LABEL_20;
        }
      }
      else if (!v12)
      {
        goto LABEL_20;
      }
      uint64_t v14 = *(void *)(v12 + 8);
      __int16 v15 = *(_WORD *)(v14 + 60);
      if (v11 & 1 | ((v15 & 0xB81) != 0))
      {
        if ((v15 & 0x80) != 0)
        {
          if (++v8 > 3) {
            goto LABEL_23;
          }
          ++v9;
          goto LABEL_20;
        }
      }
      else
      {
        if (v9)
        {
          char v11 = 0;
          --v9;
          if (*(unsigned __int16 *)(v14 + 62) == *(unsigned __int16 *)(*(void *)(a3 + 8) + 62)) {
            ++v10;
          }
          goto LABEL_20;
        }
        char v11 = 1;
      }
      float64x2_t v16 = vsubq_f64(*(float64x2_t *)(v12 + 16), *(float64x2_t *)(a3 + 16));
      float64x2_t v17 = *(float64x2_t *)(v7 + 16);
      float64x2_t v25 = vaddq_f64(v25, v17);
      float64x2_t v26 = vmlaq_f64(v26, v16, vmulq_f64(v16, v17));
LABEL_20:
      v7 += 32;
      if (v7 == *(void *)(a2 + 32)) {
        goto LABEL_23;
      }
    }
  }
  unsigned int v10 = 0;
  float64x2_t v25 = 0u;
  float64x2_t v26 = 0u;
LABEL_23:
  __asm { FMOV            V0.2D, #2.0 }
  *(float *)_Q0.f64 = vaddvq_f64(vdivq_f64(v26, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v25), (int8x16_t)_Q0, (int8x16_t)v25)));
  float v23 = (float)(*(float *)(a2 + 76) * *(float *)_Q0.f64) + *(float *)(a3 + 32);
  return (float)(v23 + TI::Favonius::CMMatchedKeyHypothesis::penalty_for_different_key_in_clustered_touches(a1, a2, a3))
       + (float)((float)v10 * -0.1625);
}

float TI::Favonius::CMMatchedKeyHypothesis::penalty_for_different_key_in_clustered_touches(void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1;
  if (((*(uint64_t (**)(void *))(*a1 + 104))(a1) & 1) == 0)
  {
    int v5 = (void *)v5[4];
    if (!v5) {
      return 0.0;
    }
  }
  float v6 = 0.0;
  if ((*(uint64_t (**)(void *))(*v5 + 32))(v5))
  {
    uint64_t v7 = (*(uint64_t (**)(void *))(*v5 + 24))(v5);
    int v8 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
    int v9 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    double v10 = v8[1];
    double v11 = v8[2];
    double v12 = v8[4];
    double v13 = v9[1];
    double v14 = v9[2];
    double v15 = v9[4];
    uint64_t v16 = (*(uint64_t (**)(void *))(*v5 + 32))(v5);
    float v17 = v15 - v12;
    uint64_t v18 = *(void *)(v16 + 8);
    __int16 v19 = *(_WORD *)(v18 + 60);
    float v20 = 4.0;
    if ((v19 & 0x80) != 0) {
      float v20 = 8.0;
    }
    if (v17 != 0.0 && v17 <= 0.5)
    {
      float v22 = sqrt((v11 - v14) * (v11 - v14) + (v10 - v13) * (v10 - v13));
      if ((float)(flt_1E4154A10[s_interface_idiom_is_pad == 0] * v20) >= v22)
      {
        int v23 = *(unsigned __int16 *)(*(void *)(a3 + 8) + 62);
        int v24 = *(unsigned __int16 *)(v18 + 62);
        if (v23 == v24) {
          float v6 = 0.0;
        }
        else {
          float v6 = -3.5;
        }
        if (v23 != v24 && (v19 & 0x80) == 0)
        {
          if ((v19 & 0x20) != 0) {
            return -3.5;
          }
          else {
            return 0.0;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t TI::Favonius::CMGeometryHypothesis::matched_key(TI::Favonius::CMGeometryHypothesis *this)
{
  return 0;
}

float TI::Favonius::CMSubstitutionHypothesis::log_likelihood(TI::Favonius::CMSubstitutionHypothesis *this)
{
  uint64_t v2 = (*(uint64_t (**)(TI::Favonius::CMSubstitutionHypothesis *))(*(void *)this + 24))(this);
  float v3 = (*(float (**)(uint64_t))(*(void *)v2 + 48))(v2);
  uint64_t v4 = (*(uint64_t (**)(TI::Favonius::CMSubstitutionHypothesis *))(*(void *)this + 40))(this);
  return v3 + (*(float (**)(uint64_t))(*(void *)v4 + 16))(v4);
}

void TI::Favonius::CMSubstitutionHypothesis::~CMSubstitutionHypothesis(TI::Favonius::CMSubstitutionHypothesis *this)
{
  TI::Favonius::CMGeometryHypothesis::~CMGeometryHypothesis(this);

  JUMPOUT(0x1E4E7BC20);
}

float TI::Favonius::CMUnmatchedKeyHypothesis::log_likelihood(TI::Favonius::CMUnmatchedKeyHypothesis *this)
{
  return *((float *)this + 10);
}

void TI::Favonius::CMUnmatchedKeyHypothesis::~CMUnmatchedKeyHypothesis(TI::Favonius::CMUnmatchedKeyHypothesis *this)
{
  TI::Favonius::CMGeometryHypothesis::~CMGeometryHypothesis(this);

  JUMPOUT(0x1E4E7BC20);
}

float TI::Favonius::CMUnmatchedTouchHypothesis::log_likelihood(TI::Favonius::CMUnmatchedTouchHypothesis *this)
{
  return *((float *)this + 10);
}

void TI::Favonius::CMUnmatchedTouchHypothesis::~CMUnmatchedTouchHypothesis(TI::Favonius::CMUnmatchedTouchHypothesis *this)
{
  TI::Favonius::CMGeometryHypothesis::~CMGeometryHypothesis(this);

  JUMPOUT(0x1E4E7BC20);
}

double TI::Favonius::CMGeometryHypothesis::log_likelihood(TI::Favonius::CMGeometryHypothesis *this)
{
  return 0.0;
}

void TI::Favonius::CMGeometryHypothesis::root_hypothesis()
{
}

uint64_t TI::Favonius::CMGeometryHypothesis::CMGeometryHypothesis(uint64_t result, uint64_t *a2)
{
  *(_DWORD *)(result + 8) = 1;
  *(void *)int32x2_t result = &unk_1F3F785D8;
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v2;
  *(void *)(result + 32) = 0;
  return result;
}

{
  uint64_t v2;

  *(_DWORD *)(result + 8) = 1;
  *(void *)int32x2_t result = &unk_1F3F785D8;
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v2;
  *(void *)(result + 32) = 0;
  return result;
}

BOOL TI::Favonius::CMMatchedKeyHypothesis::is_time_matching(TI::Favonius::CMMatchedKeyHypothesis *this, double a2, double a3)
{
  float v3 = a2 - a3;
  return v3 <= 0.5 && v3 != 0.0;
}

BOOL TI::Favonius::CMMatchedKeyHypothesis::is_space_matching(TI::Favonius::CMMatchedKeyHypothesis *this, CGPoint a2, CGPoint a3)
{
  float v3 = 4.0;
  if (this) {
    float v3 = 8.0;
  }
  float v4 = sqrt((a3.y - a2.y) * (a3.y - a2.y) + (a3.x - a2.x) * (a3.x - a2.x));
  return (float)(flt_1E4154A10[s_interface_idiom_is_pad == 0] * v3) >= v4;
}

float KB::DynamicDictionaryCursor::do_advance(KB::DynamicDictionaryCursor *this, const KB::DynamicDictionary *a2, const KB::String *a3, unsigned int a4)
{
  float v6 = 0.0;
  float v7 = 0.0;
  if (*((void *)this + 5))
  {
    uint64_t v8 = LXCursorCreateByAdvancingWithUTF8();
    int v9 = (const void *)*((void *)this + 5);
    if (v9) {
      CFRelease(v9);
    }
    *((void *)this + 5) = v8;
    if (v8)
    {
      int v10 = LXCursorUsageCountRecursive();
      if (a4) {
        float v7 = (float)((float)v10 / (float)a4) + 0.0;
      }
    }
  }
  if (*((void *)this + 1))
  {
    uint64_t v11 = LXCursorCreateByAdvancingWithUTF8();
    double v12 = (const void *)*((void *)this + 1);
    if (v12) {
      CFRelease(v12);
    }
    *((void *)this + 1) = v11;
    if (v11)
    {
      int v13 = LXCursorUsageCountRecursive();
      if (a4) {
        float v6 = (float)v13 / (float)a4;
      }
    }
  }
  float v14 = 0.0;
  float v15 = 0.0;
  if (*((void *)this + 2))
  {
    uint64_t v16 = LXCursorCreateByAdvancingWithUTF8();
    float v17 = (const void *)*((void *)this + 2);
    if (v17) {
      CFRelease(v17);
    }
    *((void *)this + 2) = v16;
    if (v16)
    {
      int v18 = LXCursorUsageCountRecursive();
      if (a4) {
        float v15 = (float)v18 / (float)a4;
      }
    }
  }
  if (*((void *)this + 3))
  {
    uint64_t v19 = LXCursorCreateByAdvancingWithUTF8();
    float v20 = (const void *)*((void *)this + 3);
    if (v20) {
      CFRelease(v20);
    }
    *((void *)this + 3) = v19;
    if (v19)
    {
      int v21 = LXCursorUsageCountRecursive();
      if (a4) {
        float v14 = (float)v21 / (float)a4;
      }
    }
  }
  float v22 = 0.0;
  if (*((void *)this + 4))
  {
    uint64_t v23 = LXCursorCreateByAdvancingWithUTF8();
    int v24 = (const void *)*((void *)this + 4);
    if (v24) {
      CFRelease(v24);
    }
    *((void *)this + 4) = v23;
    if (v23)
    {
      int v25 = LXCursorUsageCountRecursive();
      if (a4) {
        float v22 = (float)v25 / (float)a4;
      }
    }
  }
  return (float)((float)((float)(v7 + v6) + v15) + v14) + v22;
}

uint64_t KB::DynamicDictionaryCursor::copy(KB::DynamicDictionaryCursor *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

uint64_t KB::DynamicDictionarySingleCursor::get_entry_count(KB::DynamicDictionarySingleCursor *this, const KB::DynamicDictionary *a2)
{
  uint64_t v5 = 0;
  float v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2KB29DynamicDictionarySingleCursor15get_entry_countERKNS_17DynamicDictionaryE_block_invoke;
  v4[3] = &unk_1E6E2D610;
  v4[4] = &v5;
  (*(void (**)(KB::DynamicDictionarySingleCursor *, void *))(*(void *)this + 40))(this, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZNK2KB29DynamicDictionarySingleCursor15get_entry_countERKNS_17DynamicDictionaryE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    uint64_t result = LXCursorUsageCount();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  }
  return result;
}

uint64_t KB::DynamicDictionarySingleCursor::get_subtree_usage_count(KB::DynamicDictionarySingleCursor *this, const KB::DynamicDictionary *a2)
{
  uint64_t v5 = 0;
  float v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2KB29DynamicDictionarySingleCursor23get_subtree_usage_countERKNS_17DynamicDictionaryE_block_invoke;
  v4[3] = &unk_1E6E2D5E8;
  v4[4] = &v5;
  (*(void (**)(KB::DynamicDictionarySingleCursor *, void *))(*(void *)this + 40))(this, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZNK2KB29DynamicDictionarySingleCursor23get_subtree_usage_countERKNS_17DynamicDictionaryE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    uint64_t result = LXCursorUsageCountRecursive();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  }
  return result;
}

float KB::DynamicDictionarySingleCursor::get_termination_probability(KB::DynamicDictionarySingleCursor *this, const KB::DynamicDictionary *a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = (unsigned int *)&v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK2KB29DynamicDictionarySingleCursor27get_termination_probabilityERKNS_17DynamicDictionaryE_block_invoke;
  v5[3] = &unk_1E6E2D5C0;
  v5[4] = &v10;
  v5[5] = &v6;
  (*(void (**)(KB::DynamicDictionarySingleCursor *, void *))(*(void *)this + 40))(this, v5);
  unsigned int v2 = *((_DWORD *)v11 + 6);
  if (v2) {
    float v3 = (float)v7[6] / (float)v2;
  }
  else {
    float v3 = 0.0;
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(&v10, 8);
  return v3;
}

uint64_t ___ZNK2KB29DynamicDictionarySingleCursor27get_termination_probabilityERKNS_17DynamicDictionaryE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += LXCursorUsageCountRecursive();
    uint64_t result = LXCursorUsageCount();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += result;
  }
  return result;
}

void KB::DynamicDictionarySingleCursor::do_copy(KB::DynamicDictionarySingleCursor *this)
{
}

KB::DynamicDictionaryCursor *KB::DynamicDictionaryCursor::DynamicDictionaryCursor(KB::DynamicDictionaryCursor *this, const KB::DynamicDictionaryCursor *a2)
{
  float v4 = (const void *)*((void *)a2 + 1);
  *(void *)this = &unk_1F3F788D8;
  *((void *)this + 1) = v4;
  if (v4)
  {
    CFRetain(v4);
    *((void *)this + 1) = v4;
  }
  uint64_t v5 = (const void *)*((void *)a2 + 2);
  *((void *)this + 2) = v5;
  if (v5)
  {
    CFRetain(v5);
    *((void *)this + 2) = v5;
  }
  uint64_t v6 = (const void *)*((void *)a2 + 3);
  *((void *)this + 3) = v6;
  if (v6)
  {
    CFRetain(v6);
    *((void *)this + 3) = v6;
  }
  uint64_t v7 = (const void *)*((void *)a2 + 4);
  *((void *)this + 4) = v7;
  if (v7)
  {
    CFRetain(v7);
    *((void *)this + 4) = v7;
  }
  uint64_t v8 = (const void *)*((void *)a2 + 5);
  *((void *)this + 5) = v8;
  if (v8)
  {
    CFRetain(v8);
    *((void *)this + 5) = v8;
  }
  return this;
}

float KB::DynamicDictionarySingleCursor::do_advance(KB::DynamicDictionarySingleCursor *this, const KB::DynamicDictionary *a2, const KB::String *a3, unsigned int a4)
{
  float v6 = KB::DynamicDictionaryCursor::do_advance(this, a2, a3, a4) + 0.0;
  if (*((void *)this + 6))
  {
    uint64_t v7 = LXCursorCreateByAdvancingWithUTF8();
    uint64_t v8 = (const void *)*((void *)this + 6);
    if (v8) {
      CFRelease(v8);
    }
    *((void *)this + 6) = v7;
    if (v7)
    {
      int v9 = LXCursorUsageCountRecursive();
      if (a4) {
        float v10 = (float)v9 / (float)a4;
      }
      else {
        float v10 = 0.0;
      }
      return v6 + v10;
    }
  }
  return v6;
}

uint64_t KB::DynamicDictionarySingleCursor::do_for_each_mutable_dynamic_trie_node(uint64_t result, uint64_t a2)
{
  float v3 = (void *)result;
  if (*(void *)(result + 48)) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(a2 + 16))(a2, result + 48, 0, 0);
  }
  if (v3[1]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 1, 1, 0);
  }
  if (v3[2]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 2, 2, 0);
  }
  if (v3[3]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 3, 3, 0);
  }
  if (v3[4]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 4, 4, 0);
  }
  uint64_t v5 = v3[5];
  float v4 = v3 + 5;
  if (v5)
  {
    float v6 = *(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16);
    return v6(a2, v4, 5, 0);
  }
  return result;
}

uint64_t KB::DynamicDictionarySingleCursor::do_for_each_dynamic_trie_node(uint64_t result, uint64_t a2)
{
  float v3 = (void *)result;
  if (*(void *)(result + 48)) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(a2 + 16))(a2, result + 48, 0, 0);
  }
  if (v3[1]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 1, 1, 0);
  }
  if (v3[2]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 2, 2, 0);
  }
  if (v3[3]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 3, 3, 0);
  }
  if (v3[4]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 4, 4, 0);
  }
  uint64_t v5 = v3[5];
  float v4 = v3 + 5;
  if (v5)
  {
    float v6 = *(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16);
    return v6(a2, v4, 5, 0);
  }
  return result;
}

uint64_t KB::DynamicDictionarySingleCursor::get_persistent_custom_node(KB::DynamicDictionarySingleCursor *this)
{
  return (uint64_t)this + 48;
}

uint64_t KB::DynamicDictionarySingleCursor::get_mutable_persistent_custom_node(KB::DynamicDictionarySingleCursor *this)
{
  return (uint64_t)this + 48;
}

void KB::DynamicDictionarySingleCursor::~DynamicDictionarySingleCursor(KB::DynamicDictionarySingleCursor *this)
{
  KB::DynamicDictionarySingleCursor::~DynamicDictionarySingleCursor(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F3F78968;
  unsigned int v2 = (const void *)*((void *)this + 6);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 6) = 0;

  KB::DynamicDictionaryCursor::~DynamicDictionaryCursor(this);
}

void KB::DynamicDictionaryCursor::~DynamicDictionaryCursor(KB::DynamicDictionaryCursor *this)
{
  *(void *)this = &unk_1F3F788D8;
  unsigned int v2 = (const void *)*((void *)this + 5);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 5) = 0;
  float v3 = (const void *)*((void *)this + 4);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 4) = 0;
  float v4 = (const void *)*((void *)this + 3);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 3) = 0;
  uint64_t v5 = (const void *)*((void *)this + 2);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 2) = 0;
  float v6 = (const void *)*((void *)this + 1);
  if (v6) {
    CFRelease(v6);
  }
  *((void *)this + 1) = 0;
}

unint64_t KB::DynamicDictionaryContainerCursor::get_entry_count(KB::DynamicDictionaryContainerCursor *this, const KB::DynamicDictionary *a2)
{
  uint64_t v5 = 0;
  float v6 = (float *)&v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2KB32DynamicDictionaryContainerCursor15get_entry_countERKNS_17DynamicDictionaryE_block_invoke;
  v4[3] = &unk_1E6E2D688;
  v4[4] = &v5;
  void v4[5] = a2;
  (*(void (**)(KB::DynamicDictionaryContainerCursor *, void *))(*(void *)this + 40))(this, v4);
  unint64_t v2 = llroundf(ceilf(v6[6]));
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZNK2KB32DynamicDictionaryContainerCursor15get_entry_countERKNS_17DynamicDictionaryE_block_invoke(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = LXCursorUsageCount();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    float v7 = *(float *)(v6 + 24) + (float)(int)result;
  }
  else
  {
    float v8 = *(float *)(*(void *)(*(void *)(a1 + 40) + 168) + 4 * a4);
    uint64_t result = LXCursorUsageCount();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    float v7 = *(float *)(v6 + 24) + (float)(v8 * (float)(int)result);
  }
  *(float *)(v6 + 24) = v7;
  return result;
}

unint64_t KB::DynamicDictionaryContainerCursor::get_subtree_usage_count(KB::DynamicDictionaryContainerCursor *this, const KB::DynamicDictionary *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = (float *)&v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2KB32DynamicDictionaryContainerCursor23get_subtree_usage_countERKNS_17DynamicDictionaryE_block_invoke;
  v4[3] = &unk_1E6E2D660;
  v4[4] = &v5;
  void v4[5] = a2;
  (*(void (**)(KB::DynamicDictionaryContainerCursor *, void *))(*(void *)this + 40))(this, v4);
  unint64_t v2 = llroundf(ceilf(v6[6]));
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZNK2KB32DynamicDictionaryContainerCursor23get_subtree_usage_countERKNS_17DynamicDictionaryE_block_invoke(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = LXCursorUsageCountRecursive();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    float v7 = *(float *)(v6 + 24) + (float)(int)result;
  }
  else
  {
    float v8 = *(float *)(*(void *)(*(void *)(a1 + 40) + 168) + 4 * a4);
    uint64_t result = LXCursorUsageCountRecursive();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    float v7 = *(float *)(v6 + 24) + (float)(v8 * (float)(int)result);
  }
  *(float *)(v6 + 24) = v7;
  return result;
}

float KB::DynamicDictionaryContainerCursor::get_termination_probability(KB::DynamicDictionaryContainerCursor *this, const KB::DynamicDictionary *a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = (float *)&v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t v6 = 0;
  float v7 = (float *)&v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK2KB32DynamicDictionaryContainerCursor27get_termination_probabilityERKNS_17DynamicDictionaryE_block_invoke;
  v5[3] = &unk_1E6E2D638;
  v5[5] = &v6;
  void v5[6] = a2;
  v5[4] = &v10;
  (*(void (**)(KB::DynamicDictionaryContainerCursor *, void *))(*(void *)this + 40))(this, v5);
  float v2 = v11[6];
  float v3 = 0.0;
  if (v2 > 0.0) {
    float v3 = v7[6] / v2;
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(&v10, 8);
  return v3;
}

uint64_t ___ZNK2KB32DynamicDictionaryContainerCursor27get_termination_probabilityERKNS_17DynamicDictionaryE_block_invoke(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t result = *a2;
  if (a3)
  {
    if (!result) {
      return result;
    }
    *(float *)(*(void *)(a1[4] + 8) + 24) = *(float *)(*(void *)(a1[4] + 8) + 24)
                                                + (float)(int)LXCursorUsageCountRecursive();
    uint64_t result = LXCursorUsageCount();
    uint64_t v6 = *(void *)(a1[5] + 8);
    float v7 = *(float *)(v6 + 24) + (float)(int)result;
  }
  else
  {
    if (!result) {
      return result;
    }
    float v8 = *(float *)(*(void *)(a1[6] + 168) + 4 * a4);
    *(float *)(*(void *)(a1[4] + 8) + 24) = *(float *)(*(void *)(a1[4] + 8) + 24)
                                                + (float)(v8 * (float)(int)LXCursorUsageCountRecursive());
    uint64_t result = LXCursorUsageCount();
    uint64_t v6 = *(void *)(a1[5] + 8);
    float v7 = *(float *)(v6 + 24) + (float)(v8 * (float)(int)result);
  }
  *(float *)(v6 + 24) = v7;
  return result;
}

void KB::DynamicDictionaryContainerCursor::do_copy(KB::DynamicDictionaryContainerCursor *this)
{
}

float KB::DynamicDictionaryContainerCursor::do_advance(KB::DynamicDictionaryContainerCursor *this, const KB::DynamicDictionary *a2, const KB::String *a3, unsigned int a4)
{
  float v7 = KB::DynamicDictionaryCursor::do_advance(this, a2, a3, a4) + 0.0;
  uint64_t v8 = *((void *)a2 + 15) - *((void *)a2 + 14);
  uint64_t v9 = *((void *)this + 6);
  if ((*((void *)this + 7) - v9) >> 3 >= (unint64_t)(v8 >> 3)) {
    uint64_t v10 = v8 >> 3;
  }
  else {
    uint64_t v10 = (*((void *)this + 7) - v9) >> 3;
  }
  if (v10)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      uint64_t v12 = *((void *)this + 6);
      if (*(void *)(v12 + 8 * i))
      {
        float v13 = *(float *)(*((void *)a2 + 21) + 4 * i);
        uint64_t v14 = LXCursorCreateByAdvancingWithUTF8();
        float v15 = *(const void **)(v12 + 8 * i);
        if (v15) {
          CFRelease(v15);
        }
        *(void *)(v12 + 8 * i) = v14;
        if (v14)
        {
          int v16 = LXCursorUsageCountRecursive();
          if (a4) {
            float v17 = (float)v16 / (float)a4;
          }
          else {
            float v17 = 0.0;
          }
          float v7 = v7 + (float)(v13 * v17);
        }
      }
    }
  }
  return v7;
}

uint64_t KB::DynamicDictionaryContainerCursor::do_for_each_mutable_dynamic_trie_node(uint64_t result, uint64_t a2)
{
  float v3 = (void *)result;
  uint64_t v4 = *(void *)(result + 56) - *(void *)(result + 48);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 3;
    unsigned int v7 = 1;
    do
    {
      if (*(void *)(v3[6] + 8 * v5)) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
      }
      uint64_t v5 = v7;
    }
    while (v6 > v7++);
  }
  if (v3[1]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 1, 1, 0);
  }
  if (v3[2]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 2, 2, 0);
  }
  if (v3[3]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 3, 3, 0);
  }
  if (v3[4]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 4, 4, 0);
  }
  uint64_t v10 = v3[5];
  uint64_t v9 = v3 + 5;
  if (v10)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16);
    return v11(a2, v9, 5, 0);
  }
  return result;
}

uint64_t KB::DynamicDictionaryContainerCursor::do_for_each_dynamic_trie_node(uint64_t result, uint64_t a2)
{
  float v3 = (void *)result;
  uint64_t v4 = *(void *)(result + 56) - *(void *)(result + 48);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 3;
    unsigned int v7 = 1;
    do
    {
      if (*(void *)(v3[6] + 8 * v5)) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
      }
      uint64_t v5 = v7;
    }
    while (v6 > v7++);
  }
  if (v3[1]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 1, 1, 0);
  }
  if (v3[2]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 2, 2, 0);
  }
  if (v3[3]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 3, 3, 0);
  }
  if (v3[4]) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16))(a2, v3 + 4, 4, 0);
  }
  uint64_t v10 = v3[5];
  uint64_t v9 = v3 + 5;
  if (v10)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, void *, uint64_t, void))(a2 + 16);
    return v11(a2, v9, 5, 0);
  }
  return result;
}

uint64_t KB::DynamicDictionaryContainerCursor::get_persistent_custom_node(KB::DynamicDictionaryContainerCursor *this, uint64_t a2)
{
  return *((void *)this + 6) + 8 * a2;
}

uint64_t KB::DynamicDictionaryContainerCursor::get_mutable_persistent_custom_node(KB::DynamicDictionaryContainerCursor *this, uint64_t a2)
{
  return *((void *)this + 6) + 8 * a2;
}

void KB::DynamicDictionaryContainerCursor::~DynamicDictionaryContainerCursor(KB::DynamicDictionaryContainerCursor *this)
{
  *(void *)this = &unk_1F3F789D8;
  float v2 = (void **)((char *)this + 48);
  std::vector<KB::retain_ptr<__CFString const*>>::__destroy_vector::operator()[abi:nn180100](&v2);
  KB::DynamicDictionaryCursor::~DynamicDictionaryCursor(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F3F789D8;
  float v2 = (void **)((char *)this + 48);
  std::vector<KB::retain_ptr<__CFString const*>>::__destroy_vector::operator()[abi:nn180100](&v2);

  KB::DynamicDictionaryCursor::~DynamicDictionaryCursor(this);
}

double KB::DynamicDictionaryCursor::DynamicDictionaryCursor(KB::DynamicDictionaryCursor *this, const KB::DynamicDictionary *a2)
{
  *(void *)this = &unk_1F3F788D8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

void KB::DynamicDictionaryCursor::set_to_root(KB::DynamicDictionaryCursor *this, const KB::DynamicDictionary *a2)
{
  if (*((void *)a2 + 1)) {
    uint64_t RootCursor = LXLexiconCreateRootCursor();
  }
  else {
    uint64_t RootCursor = 0;
  }
  uint64_t v5 = (const void *)*((void *)this + 1);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 1) = RootCursor;
  if (*((void *)a2 + 2)) {
    uint64_t v6 = LXLexiconCreateRootCursor();
  }
  else {
    uint64_t v6 = 0;
  }
  unsigned int v7 = (const void *)*((void *)this + 2);
  if (v7) {
    CFRelease(v7);
  }
  *((void *)this + 2) = v6;
  uint64_t v8 = (void **)*((void *)a2 + 3);
  if (v8 && (uint64_t v9 = *v8) != 0 && *v9) {
    uint64_t v10 = LXLexiconCreateRootCursor();
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (const void *)*((void *)this + 3);
  if (v11) {
    CFRelease(v11);
  }
  *((void *)this + 3) = v10;
  if (KB::DynamicDictionary::named_entity_lexicon(a2)) {
    uint64_t v12 = LXLexiconCreateRootCursor();
  }
  else {
    uint64_t v12 = 0;
  }
  float v13 = (const void *)*((void *)this + 4);
  if (v13) {
    CFRelease(v13);
  }
  *((void *)this + 4) = v12;
  if (TITransientLexiconManagerGetActiveSupplementalLexiconWords()) {
    uint64_t v14 = LXLexiconCreateRootCursor();
  }
  else {
    uint64_t v14 = 0;
  }
  float v15 = (const void *)*((void *)this + 5);
  if (v15) {
    CFRelease(v15);
  }
  *((void *)this + 5) = v14;
}

uint64_t KB::DynamicDictionaryCursor::invalidate(KB::DynamicDictionaryCursor *this)
{
  return (*(uint64_t (**)(KB::DynamicDictionaryCursor *, void *))(*(void *)this + 48))(this, &__block_literal_global_17804);
}

void ___ZN2KB23DynamicDictionaryCursor10invalidateEv_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
  *a2 = 0;
}

uint64_t KB::DynamicDictionaryCursor::valid(KB::DynamicDictionaryCursor *this)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  char v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZNK2KB23DynamicDictionaryCursor5validEv_block_invoke;
  v3[3] = &unk_1E6E2D4E8;
  v3[4] = &v4;
  (*(void (**)(KB::DynamicDictionaryCursor *, void *))(*(void *)this + 40))(this, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t ___ZNK2KB23DynamicDictionaryCursor5validEv_block_invoke(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  if (*(unsigned char *)(v2 + 24)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *a2 == 0;
  }
  char v4 = !v3;
  *(unsigned char *)(v2 + 24) = v4;
  return result;
}

uint64_t KB::DynamicDictionaryCursor::has_entries(KB::DynamicDictionaryCursor *this)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  char v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZNK2KB23DynamicDictionaryCursor11has_entriesEv_block_invoke;
  v3[3] = &unk_1E6E2D510;
  v3[4] = &v4;
  (*(void (**)(KB::DynamicDictionaryCursor *, void *))(*(void *)this + 40))(this, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t ___ZNK2KB23DynamicDictionaryCursor11has_entriesEv_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    BOOL v2 = 1;
  }
  else
  {
    double result = LXCursorHasEntries();
    if (result)
    {
      double result = LXCursorUsageCount();
      BOOL v2 = (int)result > 0;
    }
    else
    {
      BOOL v2 = 0;
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = v2;
  return result;
}

uint64_t KB::DynamicDictionaryCursor::has_children(KB::DynamicDictionaryCursor *this)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  char v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZNK2KB23DynamicDictionaryCursor12has_childrenEv_block_invoke;
  v3[3] = &unk_1E6E2D538;
  v3[4] = &v4;
  (*(void (**)(KB::DynamicDictionaryCursor *, void *))(*(void *)this + 40))(this, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t ___ZNK2KB23DynamicDictionaryCursor12has_childrenEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 8);
  if (*(unsigned char *)(v1 + 24))
  {
    BOOL v2 = 1;
  }
  else
  {
    uint64_t v3 = result;
    double result = LXCursorHasChildren();
    BOOL v2 = result != 0;
    uint64_t v1 = *(void *)(*(void *)(v3 + 32) + 8);
  }
  *(unsigned char *)(v1 + 24) = v2;
  return result;
}

uint64_t KB::DynamicDictionaryCursor::merge_children_with_static_siblings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK2KB23DynamicDictionaryCursor35merge_children_with_static_siblingsERNSt3__16vectorINS_17DictionaryCursorsENS1_9allocatorIS3_EEEERKNS_16StaticDictionaryERKNS_17DynamicDictionaryE_block_invoke;
  v5[3] = &__block_descriptor_tmp_9_17819;
  v5[4] = a2;
  v5[5] = a3;
  void v5[6] = a4;
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 40))(a1, v5);
}

uint64_t ___ZNK2KB23DynamicDictionaryCursor35merge_children_with_static_siblingsERNSt3__16vectorINS_17DictionaryCursorsENS1_9allocatorIS3_EEEERKNS_16StaticDictionaryERKNS_17DynamicDictionaryE_block_invoke(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t result = *a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK2KB23DynamicDictionaryCursor35merge_children_with_static_siblingsERNSt3__16vectorINS_17DictionaryCursorsENS1_9allocatorIS3_EEEERKNS_16StaticDictionaryERKNS_17DynamicDictionaryE_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_8_17820;
  long long v8 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  int v11 = a3;
  uint64_t v9 = v6;
  uint64_t v10 = a4;
  if (result)
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    uint64_t v14 = ___ZL34enumerate_whole_character_childrenPK9_LXCursorU13block_pointerFvS1_jE_block_invoke;
    float v15 = &unk_1E6E2D6B0;
    int v16 = v7;
    return LXCursorEnumerateChildren();
  }
  return result;
}

void ___ZNK2KB23DynamicDictionaryCursor35merge_children_with_static_siblingsERNSt3__16vectorINS_17DictionaryCursorsENS1_9allocatorIS3_EEEERKNS_16StaticDictionaryERKNS_17DynamicDictionaryE_block_invoke_2(uint64_t a1, const void *a2, int a3)
{
  if (a3 != 65533)
  {
    int v3 = a3;
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    uint64_t v6 = *(uint64_t **)(a1 + 32);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    v64[0] = MEMORY[0x1E4F143A8];
    v64[1] = 0x40000000;
    unint64_t v65 = ___ZNK2KB23DynamicDictionaryCursor35merge_children_with_static_siblingsERNSt3__16vectorINS_17DictionaryCursorsENS1_9allocatorIS3_EEEERKNS_16StaticDictionaryERKNS_17DynamicDictionaryE_block_invoke_3;
    unint64_t v66 = &__block_descriptor_tmp_6_17824;
    int v67 = a3;
    uint64_t v9 = v7 - v8;
    if (v9)
    {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * (v9 >> 4);
      do
      {
        unint64_t v12 = v8 + 80 * (v11 >> 1);
        int v13 = ((uint64_t (*)(void *, unint64_t))v65)(v64, v12);
        if (v13) {
          v11 += ~(v11 >> 1);
        }
        else {
          v11 >>= 1;
        }
        if (v13) {
          uint64_t v8 = v12 + 80;
        }
      }
      while (v11);
      uint64_t v14 = v8;
      uint64_t v6 = *(uint64_t **)(v5 + 32);
      uint64_t v8 = v6[1];
      int v3 = a3;
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v14 = v8;
    }
    if (v8 == v14 || (uint64_t v15 = v14, *(_DWORD *)(v14 + 72) != v3))
    {
      uint64_t v16 = *(void *)(v5 + 48);
      uint64_t v57 = v5;
      uint64_t v17 = ((*(void *)(*(void *)(v5 + 40) + 8) - **(void **)(v5 + 40)) >> 3);
      memset(v60, 0, sizeof(v60));
      int v61 = 0;
      uint64_t v62 = v17;
      int v63 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v16 + 24))(&v59);
      uint64_t v19 = *v6;
      unint64_t v18 = v6[1];
      uint64_t v20 = v14 - *v6;
      uint64_t v21 = v20 / 80;
      uint64_t v15 = *v6 + 80 * (v20 / 80);
      unint64_t v22 = v6[2];
      if (v18 >= v22)
      {
        unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v19) >> 4) + 1;
        if (v29 > 0x333333333333333) {
          abort();
        }
        unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v19) >> 4);
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x199999999999999) {
          unint64_t v31 = 0x333333333333333;
        }
        else {
          unint64_t v31 = v29;
        }
        uint64_t v72 = v6 + 2;
        int v56 = v3;
        if (v31)
        {
          uint64_t v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::DictionaryCursors>>(v31);
        }
        else
        {
          uint64_t v33 = 0;
          uint64_t v32 = 0;
        }
        unint64_t v34 = (unint64_t)&v33[80 * v21];
        v68 = v33;
        unint64_t v69 = v34;
        unint64_t v35 = &v33[80 * v32];
        uint64_t v70 = v34;
        uint64_t v71 = v35;
        if (v21 == v32)
        {
          if (v20 < 1)
          {
            if (v14 == v19) {
              unint64_t v38 = 1;
            }
            else {
              unint64_t v38 = 2 * v21;
            }
            unint64_t v39 = v38 >> 2;
            uint64_t v76 = v6 + 2;
            unint64_t v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::DictionaryCursors>>(v38);
            unint64_t v41 = &v40[80 * v39];
            unint64_t v73 = v33;
            v68 = v40;
            unint64_t v69 = (unint64_t)v41;
            int64x2_t v74 = vdupq_n_s64(v34);
            uint64_t v70 = (uint64_t)v41;
            uint64_t v71 = &v40[80 * v42];
            uint64_t v75 = v35;
            std::__split_buffer<KB::DictionaryCursors>::~__split_buffer((uint64_t)&v73);
            unint64_t v34 = (unint64_t)v41;
          }
          else
          {
            uint64_t v36 = v21 + 2;
            if (v21 >= -1) {
              uint64_t v36 = v21 + 1;
            }
            v34 -= 80 * (v36 >> 1);
            unint64_t v69 = v34;
            uint64_t v70 = v34;
          }
        }
        KB::DictionaryCursors::DictionaryCursors(v34, (uint64_t)v60, &v59);
        uint64_t v43 = v69;
        uint64_t v44 = v70 + 80;
        v70 += 80;
        uint64_t v45 = *v6;
        if (*v6 == v15)
        {
          uint64_t v47 = v69;
          uint64_t v4 = a2;
          int v3 = v56;
        }
        else
        {
          uint64_t v46 = v15;
          uint64_t v47 = v69;
          uint64_t v4 = a2;
          int v3 = v56;
          do
          {
            v47 -= 80;
            v46 -= 80;
            KB::DictionaryCursors::DictionaryCursors(v47, v46);
          }
          while (v46 != v45);
          uint64_t v44 = v70;
        }
        uint64_t v48 = v6[1];
        if (v48 != v15)
        {
          do
          {
            uint64_t v49 = KB::DictionaryCursors::DictionaryCursors(v44, v15);
            v15 += 80;
            uint64_t v44 = v49 + 80;
          }
          while (v15 != v48);
          uint64_t v15 = v6[1];
        }
        uint64_t v50 = (char *)*v6;
        uint64_t *v6 = v47;
        v68 = v50;
        unint64_t v69 = (unint64_t)v50;
        v6[1] = v44;
        uint64_t v70 = v15;
        uint64_t v51 = (char *)v6[2];
        void v6[2] = (uint64_t)v71;
        uint64_t v71 = v51;
        std::__split_buffer<KB::DictionaryCursors>::~__split_buffer((uint64_t)&v68);
        uint64_t v15 = v43;
      }
      else
      {
        if (v15 == v18)
        {
          KB::DictionaryCursors::DictionaryCursors(*v6 + 80 * (v20 / 80), (uint64_t)v60, &v59);
          v6[1] = v15 + 80;
        }
        else
        {
          uint64_t v77 = v6 + 2;
          KB::DictionaryCursors::DictionaryCursors((uint64_t)&v73, (uint64_t)v60, &v59);
          unint64_t v23 = v6[1];
          uint64_t v24 = v15 + 80;
          uint64_t v25 = v23 - 80;
          if (v23 < 0x50)
          {
            uint64_t v27 = v6[1];
          }
          else
          {
            unint64_t v26 = v23 - 80;
            uint64_t v27 = v6[1];
            do
            {
              uint64_t v28 = KB::DictionaryCursors::DictionaryCursors(v27, v26);
              v26 += 80;
              uint64_t v27 = v28 + 80;
            }
            while (v26 < v23);
          }
          v6[1] = v27;
          if (v23 != v24)
          {
            uint64_t v37 = 16 * ((uint64_t)(v23 - v24) >> 4);
            do
            {
              KB::DictionaryCursors::operator=(v25, v19 + 80 * v21 - 80 + v37);
              v25 -= 80;
              v37 -= 80;
            }
            while (v37);
          }
          KB::DictionaryCursors::operator=(v15, (uint64_t)&v73);
          std::__destroy_at[abi:nn180100]<KB::DictionaryCursors,0>((uint64_t)&v73);
        }
        uint64_t v4 = a2;
      }
      uint64_t v52 = v59;
      uint64_t v59 = 0;
      uint64_t v5 = v57;
      if (v52) {
        (*(void (**)(uint64_t))(*(void *)v52 + 16))(v52);
      }
      for (uint64_t i = 16; i != -8; i -= 8)
      {
        v54 = *(const void **)((char *)v60 + i);
        if (v54) {
          CFRelease(v54);
        }
        *(void *)((char *)v60 + i) = 0;
      }
      *(_DWORD *)(v15 + 72) = v3;
    }
    switch(*(_DWORD *)(v5 + 64))
    {
      case 0:
        unint64_t v55 = (const void **)(*(uint64_t (**)(void, void))(**(void **)(v15 + 56) + 24))(*(void *)(v15 + 56), *(void *)(v5 + 56));
        goto LABEL_68;
      case 1:
        unint64_t v55 = (const void **)(*(void *)(v15 + 56) + 8);
        goto LABEL_68;
      case 2:
        unint64_t v55 = (const void **)(*(void *)(v15 + 56) + 16);
        goto LABEL_68;
      case 3:
        unint64_t v55 = (const void **)(*(void *)(v15 + 56) + 24);
        goto LABEL_68;
      case 4:
        unint64_t v55 = (const void **)(*(void *)(v15 + 56) + 32);
        goto LABEL_68;
      case 5:
        unint64_t v55 = (const void **)(*(void *)(v15 + 56) + 40);
LABEL_68:
        KB::retain_ptr<__CFDictionary const*>::operator=(v55, v4);
        break;
      default:
        return;
    }
  }
}

uint64_t ___ZL34enumerate_whole_character_childrenPK9_LXCursorU13block_pointerFvS1_jE_block_invoke(uint64_t a1)
{
  LXCursorLastTraversedCharacter();
  BOOL v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v2();
}

BOOL ___ZNK2KB23DynamicDictionaryCursor35merge_children_with_static_siblingsERNSt3__16vectorINS_17DictionaryCursorsENS1_9allocatorIS3_EEEERKNS_16StaticDictionaryERKNS_17DynamicDictionaryE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 72) < *(_DWORD *)(a1 + 32);
}

void KB::DynamicDictionarySingleCursor::create_root_cursor(KB::DynamicDictionarySingleCursor *this, const KB::DynamicDictionarySingle *a2)
{
}

void KB::DynamicDictionarySingleCursor::set_to_root(KB::DynamicDictionarySingleCursor *this, const KB::DynamicDictionarySingle *a2)
{
  KB::DynamicDictionaryCursor::set_to_root(this, a2);
  if ((*(uint64_t (**)(const KB::DynamicDictionarySingle *, void))(*(void *)a2 + 88))(a2, 0))
  {
    (*(void (**)(const KB::DynamicDictionarySingle *, void))(*(void *)a2 + 88))(a2, 0);
    uint64_t RootCursor = LXLexiconCreateRootCursor();
  }
  else
  {
    uint64_t RootCursor = 0;
  }
  uint64_t v5 = (const void *)*((void *)this + 6);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 6) = RootCursor;
}

double KB::DynamicDictionarySingleCursor::DynamicDictionarySingleCursor(KB::DynamicDictionarySingleCursor *this, const KB::DynamicDictionarySingle *a2)
{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F3F78968;
  return result;
}

{
  double result;

  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F3F78968;
  return result;
}

void KB::DynamicDictionarySingleCursor::create_invalid_cursor(KB::DynamicDictionarySingleCursor *this, const KB::DynamicDictionarySingle *a2)
{
}

KB::DynamicDictionaryContainerCursor *KB::DynamicDictionaryContainerCursor::DynamicDictionaryContainerCursor(KB::DynamicDictionaryContainerCursor *this, const KB::DynamicDictionaryContainer *a2)
{
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F3F789D8;
  uint64_t v4 = *((void *)a2 + 14);
  uint64_t v3 = *((void *)a2 + 15);
  *((void *)this + 6) = 0;
  uint64_t v5 = (void *)((char *)this + 48);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  uint64_t v6 = v3 - v4;
  if (v3 != v4)
  {
    std::vector<KB::FilterFlag>::__vallocate[abi:nn180100](v5, v6 >> 3);
    uint64_t v7 = (void *)*((void *)this + 7);
    uint64_t v8 = (char *)v7 + v6;
    do
    {
      *v7++ = 0;
      v6 -= 8;
    }
    while (v6);
    *((void *)this + 7) = v8;
  }
  return this;
}

void KB::DynamicDictionaryContainerCursor::create_root_cursor(KB::DynamicDictionaryContainerCursor *this, const KB::DynamicDictionaryContainer *a2)
{
}

void KB::DynamicDictionaryContainerCursor::set_to_root(KB::DynamicDictionaryContainerCursor *this, const KB::DynamicDictionaryContainer *a2)
{
  KB::DynamicDictionaryCursor::set_to_root(this, a2);
  if (*((void *)a2 + 15) != *((void *)a2 + 14))
  {
    unint64_t v4 = 0;
    do
    {
      if ((*(uint64_t (**)(const KB::DynamicDictionaryContainer *, unint64_t))(*(void *)a2 + 88))(a2, v4))
      {
        uint64_t RootCursor = LXLexiconCreateRootCursor();
        uint64_t v6 = *((void *)this + 6);
        uint64_t v7 = *(const void **)(v6 + 8 * v4);
        if (v7) {
          CFRelease(v7);
        }
        *(void *)(v6 + 8 * v4) = RootCursor;
      }
      else
      {
        uint64_t v8 = *((void *)this + 6);
        uint64_t v9 = *(const void **)(v8 + 8 * v4);
        if (v9) {
          CFRelease(v9);
        }
        *(void *)(v8 + 8 * v4) = 0;
      }
      ++v4;
    }
    while (v4 < (uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 3);
  }
}

void KB::DynamicDictionaryContainerCursor::create_invalid_cursor(KB::DynamicDictionaryContainerCursor *this, const KB::DynamicDictionaryContainer *a2)
{
}

long long *lmContextOrEmpty(TIContextTokens *a1)
{
  uint64_t v1 = a1;
  {
    if (v4)
    {
      KB::LanguageModelContext::LanguageModelContext(v4);
      __cxa_atexit((void (*)(void *))KB::LanguageModelContext::~LanguageModelContext, &lmContextOrEmpty(TIContextTokens const*)::emptyContext, &dword_1E3F0E000);
    }
  }
  if (v1) {
    BOOL v2 = [(TIContextTokens *)v1 lmContext];
  }
  else {
    BOOL v2 = &lmContextOrEmpty(TIContextTokens const*)::emptyContext;
  }

  return v2;
}

uint64_t KB::LanguageModelContext::LanguageModelContext(KB::LanguageModelContext *this)
{
  xmmword_1EBFF0278 = 0u;
  unk_1EBFF0288 = 0u;
  lmContextOrEmpty(TIContextTokens const*)::emptyContext = 0u;
  unk_1EBFF0268 = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&unk_1EBFF0298);
  uint64_t result = language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&unk_1EBFF02A0);
  qword_1EBFF02A8 = 0;
  unk_1EBFF02B0 = 0;
  qword_1EBFF02B8 = 0;
  return result;
}

void KB::LanguageModelContext::~LanguageModelContext(KB::LanguageModelContext *this)
{
  unint64_t v4 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
  language_modeling::v1::LinguisticContext::~LinguisticContext((KB::LanguageModelContext *)((char *)this + 72));
  language_modeling::v1::LinguisticContext::~LinguisticContext((KB::LanguageModelContext *)((char *)this + 64));
  BOOL v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
}

uint64_t __Block_byref_object_copy__18126(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

unsigned int *__Block_byref_object_dispose__18127(uint64_t a1)
{
  uint64_t result = *(unsigned int **)(a1 + 48);
  if (result) {
    return WTF::RefCounted<KB::DictionaryContainer>::deref(result);
  }
  return result;
}

void __destroy_helper_block_a8_80c43_ZTSNSt3__18weak_ptrIN2KB13LanguageModelEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 88);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_a8_80c43_ZTSNSt3__18weak_ptrIN2KB13LanguageModelEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 88);
  *(void *)(result + 80) = *(void *)(a2 + 80);
  *(void *)(result + 88) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

BOOL onlyChangesCaseDiacriticsPunctuation(NSString *a1, NSString *a2)
{
  uint64_t v3 = a2;
  unint64_t v4 = a1;
  uint64_t v5 = [(NSString *)v4 _stringByReplacingCharactersInSet:CFCharacterSetGetPredefined(kCFCharacterSetPunctuation) withString:&stru_1F3F7A998];

  uint64_t v6 = [(NSString *)v3 _stringByReplacingCharactersInSet:CFCharacterSetGetPredefined(kCFCharacterSetPunctuation) withString:&stru_1F3F7A998];

  BOOL v7 = [v5 compare:v6 options:129] == 0;
  return v7;
}

void *__getSRKeyboardMetricScalarTotalWordsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalWordsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalWordsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t SensorKitLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SensorKitLibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = __SensorKitLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E6E2D738;
    uint64_t v5 = 0;
    SensorKitLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
    uint64_t v1 = (void *)v3[0];
    uint64_t v0 = SensorKitLibraryCore_frameworkLibrary;
    if (SensorKitLibraryCore_frameworkLibrary)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      uint64_t v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return SensorKitLibraryCore_frameworkLibrary;
}

void *__getSRKeyboardMetricScalarTotalAlteredWordsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalAlteredWordsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalAlteredWordsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalTapsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalTapsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalTapsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalDragsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalDragsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalDragsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalDeletesKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalDeletesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalDeletesKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalEmojiKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalEmojiKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalEmojiKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalPathsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalPathsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalPathsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalPathTimeKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalPathTimeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalPathTimeKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalPathLengthKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalPathLengthKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalPathLengthKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalSessionTypingDurationKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalSessionTypingDurationKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalSessionTypingDurationKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                              + 8)
                                                                                  + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTypingPausesKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTypingPausesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTypingPausesKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarEpisodeCountKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarEpisodeCountKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarEpisodeCountKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTapTypingSpeedKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTapTypingSpeedKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTapTypingSpeedKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarPathTypingSpeedSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarPathTypingSpeed");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarPathTypingSpeedSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalAutoCorrectionsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalAutoCorrectionsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalAutoCorrectionsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalSpaceCorrectionsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalSpaceCorrectionsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalSpaceCorrectionsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalRetroCorrectionsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalRetroCorrectionsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalRetroCorrectionsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalTranspositionCorrectionsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalTranspositionCorrectionsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalTranspositionCorrectionsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                 + 8)
                                                                                     + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalInsertKeyCorrectionsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalInsertKeyCorrectionsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalInsertKeyCorrectionsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                 + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalSkipTouchCorrectionsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalSkipTouchCorrectionsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalSkipTouchCorrectionsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                 + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalNearKeyCorrectionsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalNearKeyCorrectionsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalNearKeyCorrectionsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                               + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalSubstitutionCorrectionsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalSubstitutionCorrectionsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalSubstitutionCorrectionsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                + 8)
                                                                                    + 24);
  return result;
}

void *__getSRKeyboardMetricScalarTotalHitTestCorrectionsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarTotalHitTestCorrectionsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarTotalHitTestCorrectionsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                               + 24);
  return result;
}

void *__getSRKeyboardMetricPositionalWordDownErrorDistanceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricPositionalWordDownErrorDistanceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricPositionalWordDownErrorDistanceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                 + 24);
  return result;
}

void *__getSRKeyboardMetricPositionalWordUpErrorDistanceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricPositionalWordUpErrorDistanceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricPositionalWordUpErrorDistanceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                               + 24);
  return result;
}

void *__getSRKeyboardMetricPositionalWordTouchDownUpKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricPositionalWordTouchDownUpKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricPositionalWordTouchDownUpKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getSRKeyboardMetricPositionalWordTouchDownDownKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricPositionalWordTouchDownDownKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricPositionalWordTouchDownDownKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityUpErrorDistanceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityUpErrorDistanceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityUpErrorDistanceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityDownErrorDistanceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityDownErrorDistanceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityDownErrorDistanceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                              + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilitySpaceUpErrorDistanceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilitySpaceUpErrorDistanceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilitySpaceUpErrorDistanceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                 + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilitySpaceDownErrorDistanceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilitySpaceDownErrorDistanceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilitySpaceDownErrorDistanceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                               + 8)
                                                                                   + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityDeleteUpErrorDistanceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityDeleteUpErrorDistanceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityDeleteUpErrorDistanceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                              + 8)
                                                                                  + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityDeleteDownErrorDistanceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityDeleteDownErrorDistanceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityDeleteDownErrorDistanceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                + 8)
                                                                                    + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityShortWordCharKeyUpErrorDistanceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityShortWordCharKeyUpErrorDistanceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityShortWordCharKeyUpErrorDistanceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                            + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityShortWordCharKeyDownErrorDistanceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityShortWordCharKeyDownErrorDistanceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityShortWordCharKeyDownErrorDistanceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                              + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityShortWordCharKeyToCharKeyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityShortWordCharKeyToCharKeyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityShortWordCharKeyToCharKeyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                  + 8)
                                                                                      + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityShortWordCharKeyTouchDownUpKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityShortWordCharKeyTouchDownUpKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityShortWordCharKeyTouchDownUpKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                        + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityTouchDownUpKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityTouchDownUpKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityTouchDownUpKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilitySpaceTouchDownUpKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilitySpaceTouchDownUpKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilitySpaceTouchDownUpKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityDeleteTouchDownUpKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityDeleteTouchDownUpKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityDeleteTouchDownUpKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                              + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityTouchDownDownKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityTouchDownDownKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityTouchDownDownKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityTouchUpDownKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityTouchUpDownKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityTouchUpDownKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricPositionalWordTouchUpDownKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricPositionalWordTouchUpDownKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricPositionalWordTouchUpDownKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityCharKeyToPredictionKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityCharKeyToPredictionKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityCharKeyToPredictionKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityCharKeyToAnyTapKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityCharKeyToAnyTapKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityCharKeyToAnyTapKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityAnyTapToCharKeyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityAnyTapToCharKeyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityAnyTapToCharKeyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilitySpaceToCharKeyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilitySpaceToCharKeyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilitySpaceToCharKeyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityCharKeyToSpaceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityCharKeyToSpaceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityCharKeyToSpaceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilitySpaceToDeleteKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilitySpaceToDeleteKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilitySpaceToDeleteKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityDeleteToSpaceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityDeleteToSpaceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityDeleteToSpaceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilitySpaceToSpaceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilitySpaceToSpaceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilitySpaceToSpaceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilitySpaceToShiftKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilitySpaceToShiftKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilitySpaceToShiftKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilitySpaceTo123KeyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilitySpaceTo123KeyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilitySpaceTo123KeyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilitySpaceToPredictionKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilitySpaceToPredictionKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilitySpaceToPredictionKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                              + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityDeleteToCharKeyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityDeleteToCharKeyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityDeleteToCharKeyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityCharKeyToDeleteKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityCharKeyToDeleteKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityCharKeyToDeleteKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityDeleteToDeleteKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityDeleteToDeleteKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityDeleteToDeleteKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityDeleteToShiftKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityDeleteToShiftKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityDeleteToShiftKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityDeleteTo123KeyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityDeleteTo123KeyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityDeleteTo123KeyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityPathErrorDistanceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityPathErrorDistanceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityPathErrorDistanceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                              + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityDeleteToPathKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityDeleteToPathKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityDeleteToPathKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityPathToDeleteKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityPathToDeleteKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityPathToDeleteKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilitySpaceToPathKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilitySpaceToPathKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilitySpaceToPathKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityPathToSpaceKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityPathToSpaceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityPathToSpaceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityPathToPathKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityPathToPathKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityPathToPathKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarMidPathPauseKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarMidPathPauseKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarMidPathPauseKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricPositionalDeleteToDeleteKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricPositionalDeleteToDeleteKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricPositionalDeleteToDeleteKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityAnyTapTo123KeyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityAnyTapTo123KeyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityAnyTapTo123KeyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getSRKeyboardMetricProbabilityCharKeyTo123KeyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbabilityCharKeyTo123KeyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbabilityCharKeyTo123KeyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getSRKeyboardMetricProbability123KeyToAnyTapKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbability123KeyToAnyTapKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbability123KeyToAnyTapKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getSRKeyboardMetricProbability123KeyToCharKeyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricProbability123KeyToCharKeyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricProbability123KeyToCharKeyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getSRKeyboardMetricScalarlWordBucketAbsolutistKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarlWordBucketAbsolutistKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarlWordBucketAbsolutistKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 24);
  return result;
}

void *__getSRKeyboardMetricScalarlWordBucketDownKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarlWordBucketDownKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarlWordBucketDownKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarlWordBucketDeathKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarlWordBucketDeathKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarlWordBucketDeathKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarlWordBucketAnxietyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarlWordBucketAnxietyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarlWordBucketAnxietyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getSRKeyboardMetricScalarlWordBucketAngerKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarlWordBucketAngerKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarlWordBucketAngerKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarlWordBucketFeelKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarlWordBucketFeelKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarlWordBucketFeelKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarWordBucketPositiveKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarWordBucketPositiveKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarWordBucketPositiveKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getSRKeyboardMetricScalarEmojiBucketPositiveKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarEmojiBucketPositiveKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarEmojiBucketPositiveKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getSRKeyboardMetricScalarEmojiBucketSadKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarEmojiBucketSadKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarEmojiBucketSadKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarEmojiBucketAnxietyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarEmojiBucketAnxietyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarEmojiBucketAnxietyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getSRKeyboardMetricScalarEmojiBucketAngerKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarEmojiBucketAngerKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarEmojiBucketAngerKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarEmojiBucketFeelKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarEmojiBucketFeelKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarEmojiBucketFeelKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetricScalarEmojiBucketLowEnergyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarEmojiBucketLowEnergyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarEmojiBucketLowEnergyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getSRKeyboardMetricScalarEmojiBucketConfusedKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary();
  uint64_t result = dlsym(v2, "SRKeyboardMetricScalarEmojiBucketConfusedKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetricScalarEmojiBucketConfusedKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

uint64_t __SensorKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SensorKitLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

uint64_t genConvert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (**(void (***)(uint64_t))a1)(a1);
  (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 80))(a3)) {
    return 0;
  }
  int v12 = 0;
  int v9 = 1;
  do
  {
    int v13 = 0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *, int *))(*(void *)a1 + 16))(a1, a3, &v13, &v12)) {
      break;
    }
    int v10 = v13;
    if (v13 != -1)
    {
      if (*(_DWORD *)(VnCharsetLibObj + 100))
      {
        if ((v13 & 1) == 0 && (v13 - 0x10000) < 0xBA) {
          int v10 = v13 + 1;
        }
LABEL_15:
        int v13 = v10;
      }
      else if (*(_DWORD *)(VnCharsetLibObj + 96))
      {
        int v10 = v13 & ~((v13 - 0x10000) < 0xBA);
        goto LABEL_15;
      }
      if (*(_DWORD *)(VnCharsetLibObj + 104))
      {
        if ((v10 - 0x10000) <= 0xD4) {
          int v10 = StdVnRootChar[v10 - 0x10000] + 0x10000;
        }
        int v13 = v10;
      }
      int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a4);
    }
  }
  while (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 80))(a3));
  if (v9) {
    return 0;
  }
  else {
    return 5;
  }
}

uint64_t VnConvert(int a1, int a2, unsigned __int8 *a3, uint64_t a4, int *a5, int *a6)
{
  int v6 = *a5;
  if (*a5 < -1) {
    return 0xFFFFFFFFLL;
  }
  int v13 = *a6;
  uint64_t VnCharset = CVnCharsetLib::getVnCharset((CVnCharsetLib *)VnCharsetLibObj, a1);
  uint64_t v15 = CVnCharsetLib::getVnCharset((CVnCharsetLib *)VnCharsetLibObj, a2);
  if (VnCharset) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16) {
    return 2;
  }
  uint64_t v17 = v15;
  int v18 = (*(uint64_t (**)(uint64_t))(*(void *)VnCharset + 32))(VnCharset);
  StringBIStream::StringBIStream((StringBIStream *)v23, a3, v6, v18);
  v19[0] = &unk_1F3F75490;
  v19[1] = a4;
  v19[2] = a4;
  int v20 = 0;
  int v21 = v13;
  int v22 = 0;
  uint64_t result = genConvert(VnCharset, v17, (uint64_t)v23, (uint64_t)v19);
  *a6 = v20;
  *a5 = v24;
  return result;
}

char *VnConvErrMsg(unsigned int a1)
{
  if (a1 > 6) {
    int v1 = 1;
  }
  else {
    int v1 = a1;
  }
  return ErrTable[v1];
}

uint64_t KB::CandidateFilterConfiguration::CandidateFilterConfiguration(uint64_t a1, int a2, int a3, KB::String *this, long long *a5, int a6, uint64_t a7)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = 0x100000;
  *(_WORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 14) = 0;
  *(void *)(a1 + 16) = 0;
  KB::String::operator=(a1 + 8, this);
  long long v11 = *a5;
  *(_OWORD *)(a1 + 56) = a5[1];
  *(_OWORD *)(a1 + 40) = v11;
  long long v12 = a5[2];
  long long v13 = a5[3];
  long long v14 = a5[4];
  *(_OWORD *)(a1 + 120) = a5[5];
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 72) = v12;
  *(_DWORD *)(a1 + 136) = a6;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a7;
  *(void *)(a1 + 160) = *(void *)(a7 + 16);
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0x10000;
  *(unsigned char *)(a1 + 188) = 0;
  return a1;
}

{
  long long v11;
  long long v12;
  long long v13;
  long long v14;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = 0x100000;
  *(_WORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 14) = 0;
  *(void *)(a1 + 16) = 0;
  KB::String::operator=(a1 + 8, this);
  long long v11 = *a5;
  *(_OWORD *)(a1 + 56) = a5[1];
  *(_OWORD *)(a1 + 40) = v11;
  long long v12 = a5[2];
  long long v13 = a5[3];
  long long v14 = a5[4];
  *(_OWORD *)(a1 + 120) = a5[5];
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 72) = v12;
  *(_DWORD *)(a1 + 136) = a6;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a7;
  *(void *)(a1 + 160) = *(void *)(a7 + 16);
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0x10000;
  *(unsigned char *)(a1 + 188) = 0;
  return a1;
}

unsigned int *KB::CandidateFilterConfiguration::word_suggestion_policy@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)this + 184))
  {
    if (v2 >= 7) {
      return this;
    }
    uint64_t v3 = (char *)&unk_1E4155518 + 4 * v2;
    int v4 = dword_1E4155534[v2];
    uint64_t v5 = &unk_1E4155570;
  }
  else
  {
    if (v2 >= 7) {
      return this;
    }
    uint64_t v3 = (char *)&unk_1E41554C0 + 4 * v2;
    int v4 = 402653186;
    uint64_t v5 = &unk_1E41554E0;
  }
  int v6 = dword_1E4155550[(int)v2];
  uint64_t v7 = v5[(int)v2];
  *(void *)a2 = *(unsigned int *)v3;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v6;
  *(void *)(a2 + 16) = v7;
  return this;
}

void TI::CP::SearchParameters::set_values_from_dictionary(TI::CP::SearchParameters *this, CFDictionaryRef theDict)
{
}

void TI::CP::SearchParameters::set_values_from_dictionary(__CFDictionary const*)::$_0::__invoke(const __CFString *a1, const void *a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (CFStringCompare(a1, @"GeometryWeight", 0))
  {
    if (CFStringCompare(a1, @"LanguageWeight", 0))
    {
      if (CFStringCompare(a1, @"PathDeviationPower", 0))
      {
        if (CFStringCompare(a1, @"PathDeviationWeight", 0))
        {
          if (CFStringCompare(a1, @"KeyDeviationPower", 0))
          {
            if (CFStringCompare(a1, @"KeyDeviationWeight", 0))
            {
              if (CFStringCompare(a1, @"FirstKeyDeviationWeight", 0))
              {
                if (CFStringCompare(a1, @"InflectionPointKeyDeviationWeight", 0))
                {
                  if (CFStringCompare(a1, @"FarKeyDistance", 0))
                  {
                    if (CFStringCompare(a1, @"SkippedKeyCost", 0))
                    {
                      if (CFStringCompare(a1, @"SkippedInflectionPointCost", 0))
                      {
                        if (CFStringCompare(a1, @"OvershootPower", 0))
                        {
                          if (CFStringCompare(a1, @"OvershootWeight", 0))
                          {
                            if (CFStringCompare(a1, @"TranspositionCost", 0))
                            {
                              if (CFStringCompare(a1, @"FirstKeyPredictionCost", 0))
                              {
                                if (CFStringCompare(a1, @"NonFirstKeyPredictionCost", 0))
                                {
                                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                                  {
                                    int v8 = 136315394;
                                    int v9 = "operator()";
                                    __int16 v10 = 2112;
                                    CFStringRef v11 = a1;
                                    _os_log_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s  SearchParameters initializer: unhandled search parameter %@", (uint8_t *)&v8, 0x16u);
                                  }
                                  return;
                                }
                                CFGetTypeID(a2);
                                CFBooleanGetTypeID();
                                uint64_t v7 = (void *)(a3 + 152);
                              }
                              else
                              {
                                CFGetTypeID(a2);
                                CFBooleanGetTypeID();
                                uint64_t v7 = (void *)(a3 + 144);
                              }
                            }
                            else
                            {
                              CFGetTypeID(a2);
                              CFBooleanGetTypeID();
                              uint64_t v7 = (void *)(a3 + 128);
                            }
                          }
                          else
                          {
                            CFGetTypeID(a2);
                            CFBooleanGetTypeID();
                            uint64_t v7 = (void *)(a3 + 88);
                          }
                        }
                        else
                        {
                          CFGetTypeID(a2);
                          CFBooleanGetTypeID();
                          uint64_t v7 = (void *)(a3 + 80);
                        }
                      }
                      else
                      {
                        CFGetTypeID(a2);
                        CFBooleanGetTypeID();
                        uint64_t v7 = (void *)(a3 + 96);
                      }
                    }
                    else
                    {
                      CFGetTypeID(a2);
                      CFBooleanGetTypeID();
                      uint64_t v7 = (void *)(a3 + 72);
                    }
                  }
                  else
                  {
                    CFGetTypeID(a2);
                    CFBooleanGetTypeID();
                    uint64_t v7 = (void *)(a3 + 64);
                  }
                }
                else
                {
                  CFGetTypeID(a2);
                  CFBooleanGetTypeID();
                  uint64_t v7 = (void *)(a3 + 56);
                }
              }
              else
              {
                CFGetTypeID(a2);
                CFBooleanGetTypeID();
                uint64_t v7 = (void *)(a3 + 48);
              }
            }
            else
            {
              CFGetTypeID(a2);
              CFBooleanGetTypeID();
              uint64_t v7 = (void *)(a3 + 40);
            }
          }
          else
          {
            CFGetTypeID(a2);
            CFBooleanGetTypeID();
            uint64_t v7 = (void *)(a3 + 32);
          }
        }
        else
        {
          CFGetTypeID(a2);
          CFBooleanGetTypeID();
          uint64_t v7 = (void *)(a3 + 24);
        }
      }
      else
      {
        CFGetTypeID(a2);
        CFBooleanGetTypeID();
        uint64_t v7 = (void *)(a3 + 16);
      }
    }
    else
    {
      CFGetTypeID(a2);
      CFBooleanGetTypeID();
      uint64_t v7 = (void *)(a3 + 8);
    }
    CFNumberRef v6 = (const __CFNumber *)a2;
  }
  else
  {
    CFGetTypeID(a2);
    CFBooleanGetTypeID();
    CFNumberRef v6 = (const __CFNumber *)a2;
    uint64_t v7 = (void *)a3;
  }

  CFNumberGetValue(v6, kCFNumberDoubleType, v7);
}

TI::CP::SearchParameters *TI::CP::SearchParameters::SearchParameters(TI::CP::SearchParameters *this, CFDictionaryRef theDict)
{
  *(_OWORD *)this = xmmword_1E4154D70;
  *((_OWORD *)this + 1) = xmmword_1E4154D80;
  *((_OWORD *)this + 2) = xmmword_1E4154D90;
  *((_OWORD *)this + 3) = xmmword_1E4154DA0;
  *((_OWORD *)this + 4) = xmmword_1E4154DB0;
  *((_OWORD *)this + 5) = xmmword_1E4154DC0;
  *((_OWORD *)this + 6) = xmmword_1E4154DD0;
  *((_OWORD *)this + 7) = xmmword_1E4154CE0;
  *((void *)this + 16) = 0x403E000000000000;
  *((void *)this + 17) = 1;
  __asm { FMOV            V0.2D, #10.0 }
  *((_OWORD *)this + 9) = _Q0;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)TI::CP::SearchParameters::set_values_from_dictionary(__CFDictionary const*)::$_0::__invoke, this);
  return this;
}

{
  *(_OWORD *)this = xmmword_1E4154D70;
  *((_OWORD *)this + 1) = xmmword_1E4154D80;
  *((_OWORD *)this + 2) = xmmword_1E4154D90;
  *((_OWORD *)this + 3) = xmmword_1E4154DA0;
  *((_OWORD *)this + 4) = xmmword_1E4154DB0;
  *((_OWORD *)this + 5) = xmmword_1E4154DC0;
  *((_OWORD *)this + 6) = xmmword_1E4154DD0;
  *((_OWORD *)this + 7) = xmmword_1E4154CE0;
  *((void *)this + 16) = 0x403E000000000000;
  *((void *)this + 17) = 1;
  __asm { FMOV            V0.2D, #10.0 }
  *((_OWORD *)this + 9) = _Q0;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)TI::CP::SearchParameters::set_values_from_dictionary(__CFDictionary const*)::$_0::__invoke, this);
  return this;
}

double TI::CP::Search::key_layout_did_update(TI::Favonius::KeyboardLayout **this)
{
  double result = TI::Favonius::KeyboardLayout::median_key_half_width(this[1]);
  *((double *)this + 39) = result;
  *((double *)this + 40) = 1.0 / result;
  return result;
}

KB::String *TI::CP::Search::set_input_stem(TI::CP::Search *this, const KB::String *a2)
{
  return KB::String::operator=((TI::CP::Search *)((char *)this + 400), a2);
}

uint64_t TI::CP::Search::set_context(TI::CP::Search *this, const KB::LanguageModelContext *a2)
{
  return KB::LanguageModelContext::operator=((uint64_t)this + 208, (uint64_t *)a2);
}

void TI::CP::Search::set_candidate_refinery(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 200);
  *(void *)(a1 + 192) = v3;
  *(void *)(a1 + 200) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }
}

void TI::CP::Search::generate_candidates(uint64_t a1, uint64_t *a2, int a3)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 4) >= 2)
  {
    uint64_t v5 = (TI::CP::PathResampler *)(a1 + 16);
    long long v6 = *(_OWORD *)(a1 + 32);
    long long v33 = *(_OWORD *)(a1 + 16);
    long long v34 = v6;
    uint64_t v35 = *(void *)(a1 + 48);
    unint64_t v31 = (char **)(a1 + 56);
    std::vector<TI::CP::PathSample>::vector(v36, a1 + 56);
    std::vector<unsigned int>::vector(&v37, (const std::vector<unsigned int> *)(a1 + 80));
    std::vector<TI::CP::PathSample>::vector(v38, a1 + 104);
    std::vector<unsigned int>::vector(&__p, (const std::vector<unsigned int> *)(a1 + 128));
    uint64_t v40 = *(void *)(a1 + 152);
    int v41 = *(_DWORD *)(a1 + 160);
    unint64_t v30 = v5;
    unsigned int v7 = TI::CP::PathResampler::finalize(v5);
    unsigned int v8 = -1431655765 * ((*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 3) - 1;
    if (v7 < v8)
    {
      unsigned int v9 = v7;
      std::vector<std::vector<std::shared_ptr<TI::CP::SearchNode const>>>::resize((uint64_t *)(a1 + 328), v7 + 1);
      std::vector<std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>>::resize((uint64_t *)(a1 + 376), v9);
      unsigned int v8 = v9;
    }
    unsigned int v28 = v8;
    __int16 v10 = (void *)(a1 + 344);
    while (1)
    {
      uint64_t v12 = *(void *)(a1 + 328);
      CFStringRef v11 = *(void **)(a1 + 336);
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - v12) >> 3);
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 4);
      if (v13 - 1 >= v14 - 1) {
        break;
      }
      if ((unint64_t)v11 >= *v10)
      {
        unint64_t v16 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((*v10 - v12) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        v42[4] = a1 + 344;
        if (v18) {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        int v20 = (void *)(v18 + 24 * v13);
        v42[0] = v18;
        v42[1] = v20;
        v42[3] = v18 + 24 * v19;
        void *v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
        v42[2] = v20 + 3;
        std::vector<std::vector<KB::LikelihoodInfo>>::__swap_out_circular_buffer((void *)(a1 + 328), v42);
        uint64_t v15 = *(void **)(a1 + 336);
        std::__split_buffer<std::vector<std::shared_ptr<TI::CP::SearchNode const>>>::~__split_buffer((uint64_t)v42);
      }
      else
      {
        void *v11 = 0;
        v11[1] = 0;
        uint64_t v15 = v11 + 3;
        v11[2] = 0;
      }
      *(void *)(a1 + 336) = v15;
      TI::CP::Search::step_search(a1, (TI::CP::SearchNode *)(v13 - 1), 0, v15 - 3);
    }
    int v21 = (TI::CP::SearchNode *)(v14 - 1);
    std::vector<std::shared_ptr<TI::CP::SearchNode const>>::__clear[abi:nn180100]((uint64_t *)(a1 + 352));
    TI::CP::Search::step_search(a1, v21, 1, (unint64_t *)(a1 + 352));
    int v22 = *(double ***)(a1 + 352);
    for (uint64_t i = *(double ***)(a1 + 360); v22 != i; v22 += 2)
    {
      if ((*(unsigned int (**)(void))(**((void **)*v22 + 8) + 64))(*((void *)*v22 + 8)))
      {
        int v24 = *v22;
        uint64_t v25 = *(void *)(a1 + 184);
        uint64_t v32 = (unsigned int *)v25;
        if (v25) {
          atomic_fetch_add((atomic_uint *volatile)(v25 + 8), 1u);
        }
        TI::CP::SearchNode::generate_candidates(v24, &v32, a1 + 208, a2, a3);
        if (v32)
        {
          unsigned int v26 = atomic_load(v32 + 2);
          if (v26 == 1) {
            (*(void (**)(void))(*(void *)v32 + 8))();
          }
          else {
            atomic_fetch_add((atomic_uint *volatile)v32 + 2, 0xFFFFFFFF);
          }
        }
      }
    }
    std::vector<std::vector<std::shared_ptr<TI::CP::SearchNode const>>>::resize((uint64_t *)(a1 + 328), v28 + 1);
    std::vector<std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>>::resize((uint64_t *)(a1 + 376), v28);
    long long v27 = v34;
    *(_OWORD *)unint64_t v30 = v33;
    *((_OWORD *)v30 + 1) = v27;
    *((unsigned char *)v30 + 32) = v35;
    TI::CP::Path::operator=(v31, (const void **)v36);
    TI::CP::Path::operator=((char **)(a1 + 104), (const void **)v38);
    *(void *)(a1 + 152) = v40;
    *(_DWORD *)(a1 + 160) = v41;
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v38[0])
    {
      v38[1] = v38[0];
      operator delete(v38[0]);
    }
    if (v37.__begin_)
    {
      v37.__end_ = v37.__begin_;
      operator delete(v37.__begin_);
    }
    if (v36[0])
    {
      v36[1] = v36[0];
      operator delete(v36[0]);
    }
  }
}

void std::vector<std::vector<std::shared_ptr<TI::CP::SearchNode const>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = (void **)a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v15 = (void **)(v3 + 24 * a2);
      while (v4 != v15)
      {
        v4 -= 3;
        v17[0] = v4;
        std::vector<std::shared_ptr<TI::CP::SearchNode const>>::__destroy_vector::operator()[abi:nn180100](v17);
      }
      a1[1] = (uint64_t)v15;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3) >= v6)
    {
      size_t v16 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v16);
      a1[1] = (uint64_t)v4 + v16;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      v17[4] = (void **)(a1 + 2);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      CFStringRef v11 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v10);
      uint64_t v12 = &v11[3 * v5];
      v17[0] = v11;
      v17[1] = v12;
      v17[3] = &v11[3 * v13];
      size_t v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v17[2] = (void **)((char *)v12 + v14);
      std::vector<std::vector<KB::LikelihoodInfo>>::__swap_out_circular_buffer(a1, v17);
      std::__split_buffer<std::vector<std::shared_ptr<TI::CP::SearchNode const>>>::~__split_buffer((uint64_t)v17);
    }
  }
}

void std::vector<std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = (void **)a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v15 = (void **)(v3 + 24 * a2);
      while (v4 != v15)
      {
        v4 -= 3;
        v17[0] = v4;
        std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::__destroy_vector::operator()[abi:nn180100](v17);
      }
      a1[1] = (uint64_t)v15;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3) >= v6)
    {
      size_t v16 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v16);
      a1[1] = (uint64_t)v4 + v16;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      v17[4] = (void **)(a1 + 2);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      CFStringRef v11 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v10);
      uint64_t v12 = &v11[3 * v5];
      v17[0] = v11;
      v17[1] = v12;
      v17[3] = &v11[3 * v13];
      size_t v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v17[2] = (void **)((char *)v12 + v14);
      std::vector<std::vector<KB::LikelihoodInfo>>::__swap_out_circular_buffer(a1, v17);
      std::__split_buffer<std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>>::~__split_buffer((uint64_t)v17);
    }
  }
}

uint64_t std::__split_buffer<std::vector<std::shared_ptr<TI::CP::SearchNode const>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    int v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    unint64_t v6 = v4;
    std::vector<std::shared_ptr<TI::CP::SearchNode const>>::__destroy_vector::operator()[abi:nn180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void TI::CP::Search::step_search(uint64_t a1, TI::CP::SearchNode *a2, int a3, unint64_t *a4)
{
  int64x2_t v260 = 0uLL;
  v261[0] = 0;
  long long v257 = 0u;
  long long v258 = 0u;
  float v259 = 1.0;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v257, 0x28uLL);
  TI::CP::Search::compute_keys_near_sample((void *)a1, a2);
  int v223 = a3;
  if (a3)
  {
    TI::Favonius::KeyboardLayout::key_for_char(*(void *)(a1 + 8), 0x20u, v262);
    uint64_t v7 = *(void *)v262;
    unsigned int v8 = a2;
    TI::Favonius::KeyboardLayout::find_nearest_key(*(atomic_uint **)(a1 + 8), *(CGPoint *)(*(void *)(a1 + 56) + 48 * a2), (atomic_uint **)v262);
    uint64_t v9 = *(atomic_uint **)v262;
    uint64_t v221 = v7;
    if (*(void *)v262)
    {
      if (memchr(".,?!", *(_DWORD *)(*(void *)v262 + 56), 5uLL))
      {
        atomic_fetch_add(v9, 1u);
        unint64_t v10 = v9;
      }
      else
      {
        unint64_t v10 = 0;
      }
      WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v221 = 0;
    unsigned int v8 = a2;
  }
  uint64_t v11 = *(void *)(a1 + 328) + 24 * v8;
  uint64_t v13 = *(TI::CP::SearchNode ***)v11;
  unint64_t v12 = *(void *)(v11 + 8);
  if (*(void *)v11 != v12)
  {
    if (a2) {
      char v14 = v223;
    }
    else {
      char v14 = 1;
    }
    char v239 = v14;
    char v15 = v223 ^ 1;
    if (!a2) {
      char v15 = 1;
    }
    char v237 = v15;
    while (1)
    {
      size_t v16 = *v13;
      if (!v10) {
        break;
      }
      if (!(*(unsigned int (**)(void *))(**((void **)v16 + 8) + 64))(*((void **)v16 + 8))) {
        goto LABEL_207;
      }
      unint64_t v17 = v13[1];
      *(void *)&long long v256 = *v13;
      *((void *)&v256 + 1) = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 1, 1uLL, memory_order_relaxed);
      }
      v255 = v10;
      atomic_fetch_add(v10, 1u);
      v254 = 0;
      v265[0] = (int)a2;
      std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeKeyMatch,std::allocator<TI::CP::SearchNodeKeyMatch>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,WTF::PassRefPtr<TI::Favonius::TypingHypothesis> &,void>(v262, a1, &v256, v265, (uint64_t *)&v255, (uint64_t *)&v254);
      TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::push<std::shared_ptr<TI::CP::SearchNodeKeyMatch>>(v260.i64, (long long *)v262, 0);
      if (*(void *)&v262[8]) {
        std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&v262[8]);
      }
      if (v254)
      {
        unsigned int v18 = atomic_load(v254 + 2);
        if (v18 == 1) {
          (*(void (**)(void))(*(void *)v254 + 248))();
        }
        else {
          atomic_fetch_add((atomic_uint *volatile)v254 + 2, 0xFFFFFFFF);
        }
      }
      if (v255) {
        WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v255);
      }
      unint64_t v23 = (std::__shared_weak_count *)*((void *)&v256 + 1);
      if (!*((void *)&v256 + 1)) {
        goto LABEL_207;
      }
LABEL_37:
      std::__shared_weak_count::__release_shared[abi:nn180100](v23);
LABEL_207:
      v13 += 2;
      if (v13 == (TI::CP::SearchNode **)v12) {
        goto LABEL_208;
      }
    }
    int has_extensions = TI::CP::SearchNode::has_extensions(v16);
    if (!has_extensions)
    {
LABEL_78:
      if (v239) {
        goto LABEL_127;
      }
      long long v228 = *(_OWORD *)v13;
      uint64_t v59 = (std::__shared_weak_count *)v13[1];
      if (v59) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v13[1] + 1, 1uLL, memory_order_relaxed);
      }
      unint64_t v60 = (std::__shared_weak_count *)operator new(0x58uLL);
      v60->__shared_owners_ = 0;
      v60->__shared_weak_owners_ = 0;
      v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78D00;
      int v61 = v60 + 1;
      *(_OWORD *)v262 = v228;
      TI::CP::SearchNodeForward::SearchNodeForward((uint64_t)&v60[1], a1, (uint64_t)v262, a2);
      if (v59) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v59);
      }
      shared_weak_owners = (std::__shared_weak_count *)v60[1].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        if (shared_weak_owners->__shared_owners_ != -1) {
          goto LABEL_88;
        }
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v60->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v60[1].__shared_owners_ = (uint64_t)v61;
        v60[1].__shared_weak_owners_ = (uint64_t)v60;
        std::__shared_weak_count::__release_weak(shared_weak_owners);
      }
      else
      {
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v60->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v60[1].__shared_owners_ = (uint64_t)v61;
        v60[1].__shared_weak_owners_ = (uint64_t)v60;
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v60);
LABEL_88:
      uint64_t v63 = v260.i64[1];
      if (v260.i64[1] >= v261[0])
      {
        uint64_t v65 = (v260.i64[1] - v260.i64[0]) >> 4;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 60) {
          goto LABEL_364;
        }
        *(void *)&long long v67 = v60 + 1;
        *((void *)&v67 + 1) = v60;
        long long v229 = v67;
        uint64_t v68 = v261[0] - v260.i64[0];
        if ((v261[0] - v260.i64[0]) >> 3 > v66) {
          unint64_t v66 = v68 >> 3;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v66;
        }
        v264 = v261;
        uint64_t v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v69);
        uint64_t v72 = &v70[16 * v65];
        *(_OWORD *)uint64_t v72 = v229;
        unint64_t v73 = (void *)v260.i64[1];
        int64x2_t v74 = (void *)v260.i64[0];
        if (v260.i64[1] == v260.i64[0])
        {
          int64x2_t v77 = vdupq_n_s64(v260.u64[1]);
          uint64_t v75 = &v70[16 * v65];
        }
        else
        {
          uint64_t v75 = &v70[16 * v65];
          do
          {
            long long v76 = *((_OWORD *)v73 - 1);
            v73 -= 2;
            *((_OWORD *)v75 - 1) = v76;
            v75 -= 16;
            *unint64_t v73 = 0;
            v73[1] = 0;
          }
          while (v73 != v74);
          int64x2_t v77 = v260;
        }
        long long v64 = v72 + 16;
        v260.i64[0] = (uint64_t)v75;
        v260.i64[1] = (uint64_t)(v72 + 16);
        *(int64x2_t *)&v262[8] = v77;
        unint64_t v78 = v261[0];
        v261[0] = &v70[16 * v71];
        unint64_t v263 = v78;
        *(void *)v262 = v77.i64[0];
        std::__split_buffer<std::shared_ptr<KB::LanguageModel>>::~__split_buffer((uint64_t)v262);
      }
      else
      {
        *(void *)v260.i64[1] = v61;
        *(void *)(v63 + 8) = v60;
        long long v64 = (_OWORD *)(v63 + 16);
      }
      v260.i64[1] = (uint64_t)v64;
      if ((*(uint64_t (**)(void))(*(void *)*v13 + 80))()) {
        goto LABEL_127;
      }
      long long v230 = *(_OWORD *)v13;
      v79 = (std::__shared_weak_count *)v13[1];
      if (v79) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v13[1] + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v80 = (std::__shared_weak_count *)operator new(0xA0uLL);
      v80->__shared_owners_ = 0;
      v80->__shared_weak_owners_ = 0;
      v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78D38;
      v81 = v80 + 1;
      *(_OWORD *)v262 = v230;
      TI::CP::SearchNodeSkippedKey::SearchNodeSkippedKey((TI::CP::SearchNode *)&v80[1], a1, (uint64_t *)v262, (int)a2);
      if (v79) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v79);
      }
      uint64_t v82 = (std::__shared_weak_count *)v80[1].__shared_weak_owners_;
      if (v82)
      {
        if (v82->__shared_owners_ != -1)
        {
LABEL_112:
          uint64_t v83 = v260.i64[1];
          if (v260.i64[1] >= v261[0])
          {
            uint64_t v85 = (v260.i64[1] - v260.i64[0]) >> 4;
            unint64_t v86 = v85 + 1;
            if ((unint64_t)(v85 + 1) >> 60) {
              goto LABEL_364;
            }
            *(void *)&long long v87 = v80 + 1;
            *((void *)&v87 + 1) = v80;
            long long v231 = v87;
            uint64_t v88 = v261[0] - v260.i64[0];
            if ((v261[0] - v260.i64[0]) >> 3 > v86) {
              unint64_t v86 = v88 >> 3;
            }
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v89 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v89 = v86;
            }
            v264 = v261;
            float v90 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v89);
            float v92 = &v90[16 * v85];
            *(_OWORD *)float v92 = v231;
            float v93 = (void *)v260.i64[1];
            float v94 = (void *)v260.i64[0];
            if (v260.i64[1] == v260.i64[0])
            {
              int64x2_t v97 = vdupq_n_s64(v260.u64[1]);
              float v95 = &v90[16 * v85];
            }
            else
            {
              float v95 = &v90[16 * v85];
              do
              {
                long long v96 = *((_OWORD *)v93 - 1);
                v93 -= 2;
                *((_OWORD *)v95 - 1) = v96;
                v95 -= 16;
                *float v93 = 0;
                v93[1] = 0;
              }
              while (v93 != v94);
              int64x2_t v97 = v260;
            }
            v84 = v92 + 16;
            v260.i64[0] = (uint64_t)v95;
            v260.i64[1] = (uint64_t)(v92 + 16);
            *(int64x2_t *)&v262[8] = v97;
            unint64_t v98 = v261[0];
            v261[0] = &v90[16 * v91];
            unint64_t v263 = v98;
            *(void *)v262 = v97.i64[0];
            std::__split_buffer<std::shared_ptr<KB::LanguageModel>>::~__split_buffer((uint64_t)v262);
          }
          else
          {
            *(void *)v260.i64[1] = v81;
            *(void *)(v83 + 8) = v80;
            v84 = (_OWORD *)(v83 + 16);
          }
          v260.i64[1] = (uint64_t)v84;
LABEL_127:
          if (v237)
          {
            if (!has_extensions) {
              goto LABEL_207;
            }
            goto LABEL_164;
          }
          if (((*(uint64_t (**)(void))(*(void *)*v13 + 72))() & 1) != 0 || (v99 = *v13, !*((_DWORD *)*v13 + 12)))
          {
LABEL_156:
            if (!has_extensions) {
              goto LABEL_207;
            }
            if (*(unsigned char *)(a1 + 568))
            {
              v121 = (std::__shared_weak_count *)v13[1];
              v252 = *v13;
              v253 = v121;
              if (v121) {
                atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v265[0] = (int)a2;
              std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeKeyPredictionExtensions,std::allocator<TI::CP::SearchNodeKeyPredictionExtensions>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,void>((std::__shared_weak_count **)v262, (TI::CP::SearchNodeKeyPredictionExtensions *)a1, (uint64_t)&v252, (unsigned int *)v265);
              TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::push<std::shared_ptr<TI::CP::SearchNodeKeyMatch>>(v260.i64, (long long *)v262, 0);
              if (*(void *)&v262[8]) {
                std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&v262[8]);
              }
              if (v253) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v253);
              }
            }
LABEL_164:
            int v122 = (*(uint64_t (**)(void))(*(void *)*v13 + 104))();
            v123 = *v13;
            if (!v122 || *((_DWORD *)v123 + 12) + 1 >= a2)
            {
LABEL_190:
              char v145 = (*(uint64_t (**)(TI::CP::SearchNode *))(*(void *)v123 + 72))(v123);
              v146 = *v13;
              if ((a2 < 2 || (v145 & 1) == 0) && *((_DWORD *)v146 + 12) + 2 > a2) {
                goto LABEL_207;
              }
              if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)v146 + 80))(v146))
              {
                TI::CP::SearchNode::shared_from_this(*((TI::CP::SearchNode **)*v13 + 4), &v251);
                uint64_t v250 = 0;
                v265[0] = (int)a2;
                std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeTranspositionExtensions,std::allocator<TI::CP::SearchNodeTranspositionExtensions>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,void>((std::__shared_weak_count **)v262, a1, (uint64_t *)&v251, v265, &v250);
                TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::push<std::shared_ptr<TI::CP::SearchNodeTranspositionExtensions>>(&v260, (long long *)v262);
                if (*(void *)&v262[8]) {
                  std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&v262[8]);
                }
                if (v250) {
                  WTF::RefCounted<TI::Favonius::Key>::deref(v250);
                }
                unint64_t v23 = (std::__shared_weak_count *)*((void *)&v251 + 1);
                if (!*((void *)&v251 + 1)) {
                  goto LABEL_207;
                }
              }
              else
              {
                v147 = (std::__shared_weak_count *)v13[1];
                v248 = *v13;
                v249 = v147;
                if (v147) {
                  atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v247 = 0;
                v265[0] = (int)a2;
                std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeTranspositionExtensions,std::allocator<TI::CP::SearchNodeTranspositionExtensions>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,void>((std::__shared_weak_count **)v262, a1, (uint64_t *)&v248, v265, &v247);
                TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::push<std::shared_ptr<TI::CP::SearchNodeTranspositionExtensions>>(&v260, (long long *)v262);
                if (*(void *)&v262[8]) {
                  std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&v262[8]);
                }
                if (v247) {
                  WTF::RefCounted<TI::Favonius::Key>::deref(v247);
                }
                unint64_t v23 = v249;
                if (!v249) {
                  goto LABEL_207;
                }
              }
              goto LABEL_37;
            }
            v124 = (std::__shared_weak_count *)v13[1];
            if (v124) {
              atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(void *)&long long v125 = v123;
            *((void *)&v125 + 1) = v124;
            long long v234 = v125;
            v126 = (std::__shared_weak_count *)operator new(0xA0uLL);
            v126->__shared_owners_ = 0;
            v126->__shared_weak_owners_ = 0;
            v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78DE0;
            v127 = v126 + 1;
            *(_OWORD *)v262 = v234;
            TI::CP::SearchNodeLoop::SearchNodeLoop((TI::CP::SearchNode *)&v126[1], a1, (uint64_t *)v262, (int)a2);
            if (v124) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v124);
            }
            v128 = (std::__shared_weak_count *)v126[1].__shared_weak_owners_;
            if (v128)
            {
              if (v128->__shared_owners_ != -1)
              {
LABEL_175:
                uint64_t v129 = v260.i64[1];
                if (v260.i64[1] >= v261[0])
                {
                  uint64_t v131 = (v260.i64[1] - v260.i64[0]) >> 4;
                  unint64_t v132 = v131 + 1;
                  if ((unint64_t)(v131 + 1) >> 60) {
LABEL_364:
                  }
                    abort();
                  *(void *)&long long v133 = v126 + 1;
                  *((void *)&v133 + 1) = v126;
                  long long v235 = v133;
                  uint64_t v134 = v261[0] - v260.i64[0];
                  if ((v261[0] - v260.i64[0]) >> 3 > v132) {
                    unint64_t v132 = v134 >> 3;
                  }
                  if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v135 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v135 = v132;
                  }
                  v264 = v261;
                  v136 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v135);
                  v138 = &v136[16 * v131];
                  *(_OWORD *)v138 = v235;
                  v139 = (void *)v260.i64[1];
                  v140 = (void *)v260.i64[0];
                  if (v260.i64[1] == v260.i64[0])
                  {
                    int64x2_t v143 = vdupq_n_s64(v260.u64[1]);
                    v141 = &v136[16 * v131];
                  }
                  else
                  {
                    v141 = &v136[16 * v131];
                    do
                    {
                      long long v142 = *((_OWORD *)v139 - 1);
                      v139 -= 2;
                      *((_OWORD *)v141 - 1) = v142;
                      v141 -= 16;
                      void *v139 = 0;
                      v139[1] = 0;
                    }
                    while (v139 != v140);
                    int64x2_t v143 = v260;
                  }
                  v130 = v138 + 16;
                  v260.i64[0] = (uint64_t)v141;
                  v260.i64[1] = (uint64_t)(v138 + 16);
                  *(int64x2_t *)&v262[8] = v143;
                  unint64_t v144 = v261[0];
                  v261[0] = &v136[16 * v137];
                  unint64_t v263 = v144;
                  *(void *)v262 = v143.i64[0];
                  std::__split_buffer<std::shared_ptr<KB::LanguageModel>>::~__split_buffer((uint64_t)v262);
                }
                else
                {
                  *(void *)v260.i64[1] = v127;
                  *(void *)(v129 + 8) = v126;
                  v130 = (_OWORD *)(v129 + 16);
                }
                v260.i64[1] = (uint64_t)v130;
                v123 = *v13;
                goto LABEL_190;
              }
              atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v126->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              v126[1].__shared_owners_ = (uint64_t)v127;
              v126[1].__shared_weak_owners_ = (uint64_t)v126;
              std::__shared_weak_count::__release_weak(v128);
            }
            else
            {
              atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v126->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              v126[1].__shared_owners_ = (uint64_t)v127;
              v126[1].__shared_weak_owners_ = (uint64_t)v126;
            }
            std::__shared_weak_count::__release_shared[abi:nn180100](v126);
            goto LABEL_175;
          }
          int64x2_t v100 = (std::__shared_weak_count *)v13[1];
          if (v100) {
            atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)&long long v101 = v99;
          *((void *)&v101 + 1) = v100;
          long long v232 = v101;
          v102 = (std::__shared_weak_count *)operator new(0xA0uLL);
          v102->__shared_owners_ = 0;
          v102->__shared_weak_owners_ = 0;
          v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78D70;
          v103 = v102 + 1;
          *(_OWORD *)v262 = v232;
          TI::CP::SearchNodeOvershoot::SearchNodeOvershoot((TI::CP::SearchNode *)&v102[1], a1, (uint64_t *)v262, (int)a2);
          if (v100) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v100);
          }
          v104 = (std::__shared_weak_count *)v102[1].__shared_weak_owners_;
          if (v104)
          {
            if (v104->__shared_owners_ != -1)
            {
LABEL_141:
              uint64_t v105 = v260.i64[1];
              if (v260.i64[1] >= v261[0])
              {
                uint64_t v107 = (v260.i64[1] - v260.i64[0]) >> 4;
                unint64_t v108 = v107 + 1;
                if ((unint64_t)(v107 + 1) >> 60) {
                  goto LABEL_364;
                }
                *(void *)&long long v109 = v102 + 1;
                *((void *)&v109 + 1) = v102;
                long long v233 = v109;
                uint64_t v110 = v261[0] - v260.i64[0];
                if ((v261[0] - v260.i64[0]) >> 3 > v108) {
                  unint64_t v108 = v110 >> 3;
                }
                if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v111 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v111 = v108;
                }
                v264 = v261;
                v112 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v111);
                v114 = &v112[16 * v107];
                *(_OWORD *)v114 = v233;
                v115 = (void *)v260.i64[1];
                v116 = (void *)v260.i64[0];
                if (v260.i64[1] == v260.i64[0])
                {
                  int64x2_t v119 = vdupq_n_s64(v260.u64[1]);
                  v117 = &v112[16 * v107];
                }
                else
                {
                  v117 = &v112[16 * v107];
                  do
                  {
                    long long v118 = *((_OWORD *)v115 - 1);
                    v115 -= 2;
                    *((_OWORD *)v117 - 1) = v118;
                    v117 -= 16;
                    void *v115 = 0;
                    v115[1] = 0;
                  }
                  while (v115 != v116);
                  int64x2_t v119 = v260;
                }
                v106 = v114 + 16;
                v260.i64[0] = (uint64_t)v117;
                v260.i64[1] = (uint64_t)(v114 + 16);
                *(int64x2_t *)&v262[8] = v119;
                unint64_t v120 = v261[0];
                v261[0] = &v112[16 * v113];
                unint64_t v263 = v120;
                *(void *)v262 = v119.i64[0];
                std::__split_buffer<std::shared_ptr<KB::LanguageModel>>::~__split_buffer((uint64_t)v262);
              }
              else
              {
                *(void *)v260.i64[1] = v103;
                *(void *)(v105 + 8) = v102;
                v106 = (_OWORD *)(v105 + 16);
              }
              v260.i64[1] = (uint64_t)v106;
              goto LABEL_156;
            }
            atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v102->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            v102[1].__shared_owners_ = (uint64_t)v103;
            v102[1].__shared_weak_owners_ = (uint64_t)v102;
            std::__shared_weak_count::__release_weak(v104);
          }
          else
          {
            atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v102->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            v102[1].__shared_owners_ = (uint64_t)v103;
            v102[1].__shared_weak_owners_ = (uint64_t)v102;
          }
          std::__shared_weak_count::__release_shared[abi:nn180100](v102);
          goto LABEL_141;
        }
        atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v80->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v80[1].__shared_owners_ = (uint64_t)v81;
        v80[1].__shared_weak_owners_ = (uint64_t)v80;
        std::__shared_weak_count::__release_weak(v82);
      }
      else
      {
        atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v80->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v80[1].__shared_owners_ = (uint64_t)v81;
        v80[1].__shared_weak_owners_ = (uint64_t)v80;
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v80);
      goto LABEL_112;
    }
    long long v224 = *(_OWORD *)v13;
    if (v13[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v13[1] + 1, 1uLL, memory_order_relaxed);
    }
    int v20 = (std::__shared_weak_count *)operator new(0x80uLL);
    v20->__shared_owners_ = 0;
    v20->__shared_weak_owners_ = 0;
    v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78C90;
    int v21 = v20 + 1;
    *(_OWORD *)v262 = v224;
    TI::CP::SearchNodeLanguageExtensions::SearchNodeLanguageExtensions((uint64_t)&v20[1], (TI::CP::SearchNodeLanguageExtensions *)a1, (long long *)v262, a2);
    if (*(void *)&v262[8]) {
      std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&v262[8]);
    }
    int v22 = (std::__shared_weak_count *)v20[1].__shared_weak_owners_;
    if (v22)
    {
      if (v22->__shared_owners_ != -1) {
        goto LABEL_40;
      }
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v20[1].__shared_owners_ = (uint64_t)v21;
      v20[1].__shared_weak_owners_ = (uint64_t)v20;
      std::__shared_weak_count::__release_weak(v22);
    }
    else
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v20[1].__shared_owners_ = (uint64_t)v21;
      v20[1].__shared_weak_owners_ = (uint64_t)v20;
    }
    std::__shared_weak_count::__release_shared[abi:nn180100](v20);
LABEL_40:
    uint64_t v24 = v260.i64[1];
    if (v260.i64[1] >= v261[0])
    {
      uint64_t v26 = (v260.i64[1] - v260.i64[0]) >> 4;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60) {
        goto LABEL_364;
      }
      *(void *)&long long v28 = v20 + 1;
      *((void *)&v28 + 1) = v20;
      long long v225 = v28;
      uint64_t v29 = v261[0] - v260.i64[0];
      if ((v261[0] - v260.i64[0]) >> 3 > v27) {
        unint64_t v27 = v29 >> 3;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v27;
      }
      v264 = v261;
      unint64_t v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v30);
      long long v33 = &v31[16 * v26];
      *(_OWORD *)long long v33 = v225;
      long long v34 = (void *)v260.i64[1];
      uint64_t v35 = (void *)v260.i64[0];
      if (v260.i64[1] == v260.i64[0])
      {
        int64x2_t v38 = vdupq_n_s64(v260.u64[1]);
        uint64_t v36 = &v31[16 * v26];
      }
      else
      {
        uint64_t v36 = &v31[16 * v26];
        do
        {
          long long v37 = *((_OWORD *)v34 - 1);
          v34 -= 2;
          *((_OWORD *)v36 - 1) = v37;
          v36 -= 16;
          void *v34 = 0;
          v34[1] = 0;
        }
        while (v34 != v35);
        int64x2_t v38 = v260;
      }
      uint64_t v25 = v33 + 16;
      v260.i64[0] = (uint64_t)v36;
      v260.i64[1] = (uint64_t)(v33 + 16);
      *(int64x2_t *)&v262[8] = v38;
      unint64_t v39 = v261[0];
      v261[0] = &v31[16 * v32];
      unint64_t v263 = v39;
      *(void *)v262 = v38.i64[0];
      std::__split_buffer<std::shared_ptr<KB::LanguageModel>>::~__split_buffer((uint64_t)v262);
    }
    else
    {
      *(void *)v260.i64[1] = v21;
      *(void *)(v24 + 8) = v20;
      uint64_t v25 = (_OWORD *)(v24 + 16);
    }
    v260.i64[1] = (uint64_t)v25;
    long long v226 = *(_OWORD *)v13;
    if (v13[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v13[1] + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = (std::__shared_weak_count *)operator new(0x60uLL);
    v40->__shared_owners_ = 0;
    v40->__shared_weak_owners_ = 0;
    v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78CC8;
    int v41 = v40 + 1;
    *(_OWORD *)v262 = v226;
    TI::CP::SearchNodeGeometryExtensions::SearchNodeGeometryExtensions((uint64_t)&v40[1], (TI::CP::SearchNodeGeometryExtensions *)a1, (long long *)v262, a2);
    if (*(void *)&v262[8]) {
      std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&v262[8]);
    }
    uint64_t v42 = (std::__shared_weak_count *)v40[1].__shared_weak_owners_;
    if (v42)
    {
      if (v42->__shared_owners_ != -1)
      {
LABEL_63:
        uint64_t v43 = v260.i64[1];
        if (v260.i64[1] >= v261[0])
        {
          uint64_t v45 = (v260.i64[1] - v260.i64[0]) >> 4;
          unint64_t v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 60) {
            goto LABEL_364;
          }
          *(void *)&long long v47 = v40 + 1;
          *((void *)&v47 + 1) = v40;
          long long v227 = v47;
          uint64_t v48 = v261[0] - v260.i64[0];
          if ((v261[0] - v260.i64[0]) >> 3 > v46) {
            unint64_t v46 = v48 >> 3;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v46;
          }
          v264 = v261;
          uint64_t v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v49);
          uint64_t v52 = &v50[16 * v45];
          *(_OWORD *)uint64_t v52 = v227;
          v53 = (void *)v260.i64[1];
          v54 = (void *)v260.i64[0];
          if (v260.i64[1] == v260.i64[0])
          {
            int64x2_t v57 = vdupq_n_s64(v260.u64[1]);
            unint64_t v55 = &v50[16 * v45];
          }
          else
          {
            unint64_t v55 = &v50[16 * v45];
            do
            {
              long long v56 = *((_OWORD *)v53 - 1);
              v53 -= 2;
              *((_OWORD *)v55 - 1) = v56;
              v55 -= 16;
              void *v53 = 0;
              v53[1] = 0;
            }
            while (v53 != v54);
            int64x2_t v57 = v260;
          }
          uint64_t v44 = v52 + 16;
          v260.i64[0] = (uint64_t)v55;
          v260.i64[1] = (uint64_t)(v52 + 16);
          *(int64x2_t *)&v262[8] = v57;
          unint64_t v58 = v261[0];
          v261[0] = &v50[16 * v51];
          unint64_t v263 = v58;
          *(void *)v262 = v57.i64[0];
          std::__split_buffer<std::shared_ptr<KB::LanguageModel>>::~__split_buffer((uint64_t)v262);
        }
        else
        {
          *(void *)v260.i64[1] = v41;
          *(void *)(v43 + 8) = v40;
          uint64_t v44 = (_OWORD *)(v43 + 16);
        }
        v260.i64[1] = (uint64_t)v44;
        goto LABEL_78;
      }
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v40[1].__shared_owners_ = (uint64_t)v41;
      v40[1].__shared_weak_owners_ = (uint64_t)v40;
      std::__shared_weak_count::__release_weak(v42);
    }
    else
    {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v40[1].__shared_owners_ = (uint64_t)v41;
      v40[1].__shared_weak_owners_ = (uint64_t)v40;
    }
    std::__shared_weak_count::__release_shared[abi:nn180100](v40);
    goto LABEL_63;
  }
LABEL_208:
  v149 = (void *)v260.i64[1];
  v148 = (void *)v260.i64[0];
  uint64_t v150 = ((unint64_t)(v260.i64[1] - v260.i64[0]) >> 5) & 0x7FFFFFFF;
  if (v150)
  {
    unsigned int v151 = v150 - 1;
    v152 = a4;
    do
      TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::_downheapify(v260.i64, v151--);
    while (v151 != -1);
    v149 = (void *)v260.i64[1];
    v148 = (void *)v260.i64[0];
  }
  else
  {
    v152 = a4;
  }
  if (v148 != v149)
  {
    v238 = v152 + 2;
    int v153 = v223;
    if (!a2) {
      int v153 = 0;
    }
    int v236 = v153;
    double v154 = -INFINITY;
    do
    {
      if (v152[1] - *v152 > 0x27F) {
        break;
      }
      uint64_t v155 = *v148;
      if ((COERCE_UNSIGNED_INT64((*(double (**)(void))(*(void *)*v148 + 56))(*v148)) & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(double (**)(uint64_t))(*(void *)v155 + 56))(v155) < v154)
      {
        break;
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v155 + 40))(v262, v155);
      long long v240 = *(_OWORD *)v262;
      uint64_t v156 = *(void *)v262;
      long long v157 = 0uLL;
      if (!*(void *)v262)
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t, __n128))(*(void *)v155 + 32))(v262, v155, (__n128)0);
        long long v157 = *(_OWORD *)v262;
        if (!*(void *)v262)
        {
          uint64_t v242 = *(void *)&v262[8];
          (*(void (**)(uint64_t))(*(void *)v155 + 48))(v155);
          *((void *)&v157 + 1) = v242;
          *(void *)&long long v157 = 0;
        }
      }
      long long v241 = v157;
      if ((COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(void *)v155 + 56))(v155)) & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
      {
        if (v156)
        {
          v160 = *(std::__shared_weak_count **)(v260.i64[0] + 8);
          *(_OWORD *)v260.i64[0] = v240;
          if (v160) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v160);
          }
          TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::_downheapify(v260.i64, 0);
LABEL_252:
          v179 = 0;
          goto LABEL_253;
        }
        int64x2_t v161 = v260;
        if (((v260.i64[1] - v260.i64[0]) & 0xFFFFFFFE0) != 0)
        {
          uint64_t v162 = *(void *)v260.i64[0];
          *(void *)v260.i64[0] = *(void *)(v260.i64[1] - 16);
          *(void *)(v161.i64[1] - 16) = v162;
          uint64_t v163 = *(void *)(v161.i64[0] + 8);
          *(void *)(v161.i64[0] + 8) = *(void *)(v161.i64[1] - 8);
          *(void *)(v161.i64[1] - 8) = v163;
          uint64_t v164 = v260.i64[1];
          v165 = *(std::__shared_weak_count **)(v260.i64[1] - 8);
          if (v165) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v165);
          }
          v260.i64[1] = v164 - 16;
          TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::_downheapify(v260.i64, 0);
        }
        else
        {
          v178 = *(std::__shared_weak_count **)(v260.i64[1] - 8);
          if (v178) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v178);
          }
          v260.i64[1] = v161.i64[1] - 16;
        }
      }
      else
      {
        TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::_downheapify(v260.i64, 0);
        if (v156)
        {
          uint64_t v158 = v260.i64[1];
          uint64_t v159 = v260.i64[1] - v260.i64[0];
          if (v260.i64[1] >= v261[0])
          {
            unint64_t v167 = (v159 >> 4) + 1;
            if (v167 >> 60) {
              goto LABEL_364;
            }
            unint64_t v168 = (v261[0] - v260.i64[0]) >> 3;
            if (v168 <= v167) {
              unint64_t v168 = (v159 >> 4) + 1;
            }
            if (v261[0] - v260.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
              unint64_t v169 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v169 = v168;
            }
            v264 = v261;
            v170 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v169);
            uint64_t v166 = v159 >> 4;
            v172 = &v170[16 * (v159 >> 4)];
            *(_OWORD *)v172 = v240;
            v173 = (void *)v260.i64[1];
            v174 = (void *)v260.i64[0];
            if (v260.i64[1] == v260.i64[0])
            {
              int64x2_t v177 = vdupq_n_s64(v260.u64[1]);
              v175 = &v170[16 * v166];
            }
            else
            {
              v175 = &v170[16 * v166];
              do
              {
                long long v176 = *((_OWORD *)v173 - 1);
                v173 -= 2;
                *((_OWORD *)v175 - 1) = v176;
                v175 -= 16;
                void *v173 = 0;
                v173[1] = 0;
              }
              while (v173 != v174);
              int64x2_t v177 = v260;
            }
            unint64_t v12 = (unint64_t)(v172 + 16);
            v260.i64[0] = (uint64_t)v175;
            v260.i64[1] = (uint64_t)(v172 + 16);
            *(int64x2_t *)&v262[8] = v177;
            unint64_t v180 = v261[0];
            v261[0] = &v170[16 * v171];
            unint64_t v263 = v180;
            *(void *)v262 = v177.i64[0];
            std::__split_buffer<std::shared_ptr<KB::LanguageModel>>::~__split_buffer((uint64_t)v262);
          }
          else
          {
            *(_OWORD *)v260.i64[1] = v240;
            unint64_t v12 = v158 + 16;
          }
          v260.i64[1] = v12;
          TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::_upheapify(v260.i64, (unint64_t)v159 >> 4);
          goto LABEL_252;
        }
      }
      v179 = (std::__shared_weak_count *)*((void *)&v240 + 1);
LABEL_253:
      if ((void)v241 && (!v223 || *(_DWORD *)(v241 + 48) >= a2))
      {
        unint64_t v181 = (*(uint64_t (**)(void))(**(void **)(v241 + 64) + 192))(*(void *)(v241 + 64));
        unint64_t v182 = v181;
        unint64_t v183 = *((void *)&v257 + 1);
        if (*((void *)&v257 + 1))
        {
          uint8x8_t v184 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v257 + 8));
          v184.i16[0] = vaddlv_u8(v184);
          if (v184.u32[0] > 1uLL)
          {
            unint64_t v12 = v181;
            if (v181 >= *((void *)&v257 + 1)) {
              unint64_t v12 = v181 % *((void *)&v257 + 1);
            }
          }
          else
          {
            unint64_t v12 = (*((void *)&v257 + 1) - 1) & v181;
          }
          v185 = *(void **)(v257 + 8 * v12);
          if (v185)
          {
            for (uint64_t i = (void *)*v185; i; uint64_t i = (void *)*i)
            {
              unint64_t v187 = i[1];
              if (v187 == v181)
              {
                if (i[2] == v181)
                {
                  v152 = a4;
                  goto LABEL_343;
                }
              }
              else
              {
                if (v184.u32[0] > 1uLL)
                {
                  if (v187 >= *((void *)&v257 + 1)) {
                    v187 %= *((void *)&v257 + 1);
                  }
                }
                else
                {
                  v187 &= *((void *)&v257 + 1) - 1;
                }
                if (v187 != v12) {
                  break;
                }
              }
            }
          }
        }
        v188 = operator new(0x18uLL);
        void *v188 = 0;
        v188[1] = v182;
        v188[2] = v182;
        float v189 = (float)(unint64_t)(*((void *)&v258 + 1) + 1);
        if (!v183 || (float)(v259 * (float)v183) < v189)
        {
          BOOL v190 = (v183 & (v183 - 1)) != 0;
          if (v183 < 3) {
            BOOL v190 = 1;
          }
          unint64_t v191 = v190 | (2 * v183);
          unint64_t v192 = vcvtps_u32_f32(v189 / v259);
          if (v191 <= v192) {
            size_t v193 = v192;
          }
          else {
            size_t v193 = v191;
          }
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v257, v193);
          unint64_t v183 = *((void *)&v257 + 1);
          if ((v183 & (v183 - 1)) != 0)
          {
            if (v182 >= *((void *)&v257 + 1)) {
              unint64_t v12 = v182 % *((void *)&v257 + 1);
            }
            else {
              unint64_t v12 = v182;
            }
          }
          else
          {
            unint64_t v12 = (*((void *)&v257 + 1) - 1) & v182;
          }
        }
        uint64_t v194 = v257;
        v195 = *(void **)(v257 + 8 * v12);
        if (v195)
        {
          void *v188 = *v195;
          v152 = a4;
          goto LABEL_292;
        }
        void *v188 = v258;
        *(void *)&long long v258 = v188;
        *(void *)(v194 + 8 * v12) = &v258;
        v152 = a4;
        if (*v188)
        {
          unint64_t v196 = *(void *)(*v188 + 8);
          if ((v183 & (v183 - 1)) != 0)
          {
            if (v196 >= v183) {
              v196 %= v183;
            }
          }
          else
          {
            v196 &= v183 - 1;
          }
          v195 = (void *)(v257 + 8 * v196);
LABEL_292:
          void *v195 = v188;
        }
        ++*((void *)&v258 + 1);
        if (!v223 || (*(unsigned int (**)(void))(**(void **)(v241 + 64) + 64))(*(void *)(v241 + 64)))
        {
          unint64_t v12 = *v152;
          v197 = (long long *)v152[1];
          if ((long long *)*v152 == v197)
          {
            double v198 = TI::CP::SearchNode::score_at_sample_index((TI::CP::SearchNode *)v241, a2);
            double v154 = v198
                 + TI::CP::Search::key_substitution_cost((TI::CP::Search *)a1, a2)
                 + *(double *)(a1 + 440) * -5.99146455;
          }
          if ((unint64_t)v197 >= *v238)
          {
            uint64_t v200 = (uint64_t)((uint64_t)v197 - v12) >> 4;
            unint64_t v201 = v200 + 1;
            if ((unint64_t)(v200 + 1) >> 60) {
              goto LABEL_364;
            }
            uint64_t v202 = *v238 - v12;
            if (v202 >> 3 > v201) {
              unint64_t v201 = v202 >> 3;
            }
            if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v203 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v203 = v201;
            }
            v264 = v238;
            v204 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v203);
            v206 = (long long *)&v204[16 * v200];
            long long *v206 = v241;
            if (*((void *)&v241 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v241 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            v208 = (void *)*v152;
            v207 = (void *)v152[1];
            if (v207 == (void *)*v152)
            {
              int64x2_t v211 = vdupq_n_s64((unint64_t)v207);
              v209 = &v204[16 * v200];
            }
            else
            {
              v209 = &v204[16 * v200];
              do
              {
                long long v210 = *((_OWORD *)v207 - 1);
                v207 -= 2;
                *((_OWORD *)v209 - 1) = v210;
                v209 -= 16;
                void *v207 = 0;
                v207[1] = 0;
              }
              while (v207 != v208);
              int64x2_t v211 = *(int64x2_t *)v152;
            }
            v199 = v206 + 1;
            unint64_t *v152 = (unint64_t)v209;
            v152[1] = (unint64_t)(v206 + 1);
            *(int64x2_t *)&v262[8] = v211;
            unint64_t v212 = v152[2];
            v152[2] = (unint64_t)&v204[16 * v205];
            unint64_t v263 = v212;
            *(void *)v262 = v211.i64[0];
            std::__split_buffer<std::shared_ptr<KB::LanguageModel>>::~__split_buffer((uint64_t)v262);
          }
          else
          {
            long long *v197 = v241;
            if (*((void *)&v241 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v241 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            v199 = v197 + 1;
          }
          v152[1] = (unint64_t)v199;
        }
        if ((*(unsigned int (**)(void))(*(void *)v241 + 104))(v241))
        {
          uint64_t v213 = *(void *)(v241 + 56);
          if ((*(_WORD *)(v213 + 60) & 2) != 0 && *(_DWORD *)(v241 + 48) == a2)
          {
            long long v246 = v241;
            if (*((void *)&v241 + 1))
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v241 + 1) + 8), 1uLL, memory_order_relaxed);
              uint64_t v213 = *(void *)(v241 + 56);
              uint64_t v245 = v213;
              if (!v213)
              {
LABEL_324:
                v244 = 0;
                v265[0] = (int)a2;
                std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeKeyMatch,std::allocator<TI::CP::SearchNodeKeyMatch>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,WTF::PassRefPtr<TI::Favonius::TypingHypothesis> &,void>(v262, a1, &v246, v265, &v245, (uint64_t *)&v244);
                TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::push<std::shared_ptr<TI::CP::SearchNodeKeyMatch>>(v260.i64, (long long *)v262, 1);
                if (*(void *)&v262[8]) {
                  std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&v262[8]);
                }
                if (v244)
                {
                  unsigned int v214 = atomic_load(v244 + 2);
                  if (v214 == 1) {
                    (*(void (**)(void))(*(void *)v244 + 248))();
                  }
                  else {
                    atomic_fetch_add((atomic_uint *volatile)v244 + 2, 0xFFFFFFFF);
                  }
                }
                if (v245) {
                  WTF::RefCounted<TI::Favonius::Key>::deref(v245);
                }
                if (*((void *)&v246 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v246 + 1));
                }
                goto LABEL_334;
              }
            }
            else
            {
              uint64_t v245 = v213;
            }
            atomic_fetch_add((atomic_uint *volatile)v213, 1u);
            goto LABEL_324;
          }
        }
LABEL_334:
        if (v236
          && *(unsigned char *)(a1 + 568)
          && TI::CP::SearchNode::has_extensions((TI::CP::SearchNode *)v241))
        {
          long long v243 = v241;
          if (*((void *)&v241 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v241 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v265[0] = (int)a2;
          std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeKeyPredictionExtensions,std::allocator<TI::CP::SearchNodeKeyPredictionExtensions>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,void>((std::__shared_weak_count **)v262, (TI::CP::SearchNodeKeyPredictionExtensions *)a1, (uint64_t)&v243, (unsigned int *)v265);
          TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::push<std::shared_ptr<TI::CP::SearchNodeKeyMatch>>(v260.i64, (long long *)v262, 1);
          if (*(void *)&v262[8]) {
            std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&v262[8]);
          }
          if (*((void *)&v243 + 1)) {
            std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v243 + 1));
          }
        }
      }
LABEL_343:
      if (*((void *)&v241 + 1)) {
        std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v241 + 1));
      }
      if (v179) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v179);
      }
      v148 = (void *)v260.i64[0];
    }
    while (v260.i64[0] != v260.i64[1]);
  }
  if (v10) {
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v10);
  }
  if (v221) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v221);
  }
  v215 = (void *)v258;
  if ((void)v258)
  {
    do
    {
      v216 = (void *)*v215;
      operator delete(v215);
      v215 = v216;
    }
    while (v216);
  }
  v217 = (void *)v257;
  *(void *)&long long v257 = 0;
  if (v217) {
    operator delete(v217);
  }
  uint64_t v218 = v260.i64[0];
  if (v260.i64[0])
  {
    for (uint64_t j = v260.i64[1]; j != v218; j -= 16)
    {
      v220 = *(std::__shared_weak_count **)(j - 8);
      if (v220) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v220);
      }
    }
    v260.i64[1] = v218;
    operator delete((void *)v260.i64[0]);
  }
}

void std::vector<std::shared_ptr<TI::CP::SearchNode const>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    int v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
  a1[1] = v2;
}

void *TI::CP::Search::compute_keys_near_sample(void *this, unsigned int a2)
{
  uint64_t v3 = this[47];
  uint64_t v2 = (void *)this[48];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v2 - v3) >> 3);
  if (v4 <= a2)
  {
    unint64_t v6 = this;
    unint64_t v8 = this[49];
    if ((unint64_t)v2 >= v8)
    {
      uint64_t v35 = this + 49;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v3) >> 3);
      unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v8 - v3) >> 3);
      if (v11 <= v4 + 1) {
        unint64_t v11 = v4 + 1;
      }
      if (v10 >= 0x555555555555555) {
        unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v12);
      char v14 = &v13[24 * v4];
      *(void *)&long long v32 = v13;
      *((void *)&v32 + 1) = v14;
      long long v34 = &v13[24 * v15];
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0;
      *(void *)char v14 = 0;
      long long v33 = v14 + 24;
      std::vector<std::vector<KB::LikelihoodInfo>>::__swap_out_circular_buffer(v6 + 47, &v32);
      uint64_t v9 = (void *)v6[48];
      std::__split_buffer<std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>>::~__split_buffer((uint64_t)&v32);
    }
    else
    {
      void *v2 = 0;
      v2[1] = 0;
      uint64_t v9 = v2 + 3;
      v2[2] = 0;
    }
    v6[48] = v9;
    long long v32 = *(_OWORD *)(v6[7] + 48 * a2);
    uint64_t v16 = v6[1];
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 0x40000000;
    uint64_t v26 = ___ZN2TI2CP6Search24compute_keys_near_sampleEj_block_invoke;
    unint64_t v27 = &__block_descriptor_tmp_18494;
    long long v28 = v6;
    unsigned int v31 = a2;
    long long v29 = v32;
    unint64_t v30 = v9 - 3;
    unint64_t v17 = *(uint64_t **)(v16 + 8);
    unsigned int v18 = *(uint64_t **)(v16 + 16);
    while (v17 != v18)
      v26((uint64_t)v25, v17++);
    uint64_t v19 = *(v9 - 3);
    int v20 = (uint64_t *)*(v9 - 2);
    unint64_t v21 = 126 - 2 * __clz(((uint64_t)v20 - v19) >> 3);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 0x40000000;
    v23[2] = ___ZN2TI2CP6Search24compute_keys_near_sampleEj_block_invoke_2;
    v23[3] = &__block_descriptor_tmp_2_18495;
    v23[4] = v6;
    unsigned int v24 = a2;
    uint64_t v36 = v23;
    if (v20 == (uint64_t *)v19) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v21;
    }
    return (void *)std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::LayoutKey> const&,WTF::RefPtr<TI::Favonius::LayoutKey> const&),WTF::RefPtr<TI::Favonius::LayoutKey>*,false>(v19, v20, (uint64_t)&v36, v22, 1);
  }
  return this;
}

void TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::_downheapify(uint64_t *a1, unsigned int a2)
{
  unsigned int v2 = (2 * a2) | 1;
  uint64_t v3 = *a1;
  unint64_t v4 = (unint64_t)(a1[1] - *a1) >> 4;
  if (v2 < v4)
  {
    int v6 = 2 * a2;
    do
    {
      uint64_t v7 = (v6 + 2);
      uint64_t v8 = a2;
      uint64_t v9 = 16 * a2;
      double v10 = (*(double (**)(void))(**(void **)(v3 + 16 * v2) + 56))(*(void *)(v3 + 16 * v2));
      double v11 = (*(double (**)(void))(**(void **)(v3 + v9) + 56))(*(void *)(v3 + v9));
      double v12 = v11;
      if (v7 >= v4)
      {
        if (v10 <= v11) {
          return;
        }
        int v20 = (uint64_t *)(*a1 + 16 * v8);
        unint64_t v21 = (uint64_t *)(*a1 + 16 * v2);
        uint64_t v18 = *v20;
        uint64_t *v20 = *v21;
        uint64_t v19 = v20 + 1;
      }
      else
      {
        uint64_t v13 = *a1;
        uint64_t v14 = *(void *)(*a1 + 16 * v7);
        double v15 = (*(double (**)(uint64_t))(*(void *)v14 + 56))(v14);
        if (v10 <= v12)
        {
          if (v15 <= (*(double (**)(void))(**(void **)(v13 + 16 * v8) + 56))(*(void *)(v13 + 16 * v8))) {
            return;
          }
          uint64_t v16 = (uint64_t *)(*a1 + 16 * v8);
          unint64_t v17 = (uint64_t *)(*a1 + 16 * v7);
          uint64_t v18 = *v16;
          *uint64_t v16 = *v17;
          uint64_t v19 = v16 + 1;
          goto LABEL_13;
        }
        double v22 = (*(double (**)(void))(**(void **)(v13 + 16 * v2) + 56))(*(void *)(v13 + 16 * v2));
        uint64_t v23 = *a1;
        unsigned int v24 = (uint64_t *)(*a1 + 16 * v8);
        uint64_t v19 = v24 + 1;
        uint64_t v18 = *v24;
        if (v15 > v22)
        {
          unint64_t v17 = (uint64_t *)(v23 + 16 * v7);
          *unsigned int v24 = *v17;
LABEL_13:
          *unint64_t v17 = v18;
          uint64_t v25 = v17 + 1;
          unsigned int v2 = v7;
          goto LABEL_14;
        }
        unint64_t v21 = (uint64_t *)(v23 + 16 * v2);
        *unsigned int v24 = *v21;
      }
      uint64_t *v21 = v18;
      uint64_t v25 = v21 + 1;
LABEL_14:
      a2 = v2;
      uint64_t v26 = *v19;
      *uint64_t v19 = *v25;
      *uint64_t v25 = v26;
      int v6 = 2 * v2;
      unsigned int v2 = (2 * v2) | 1;
      uint64_t v3 = *a1;
      unint64_t v4 = (unint64_t)(a1[1] - *a1) >> 4;
    }
    while (v2 < v4);
  }
}

void TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::push<std::shared_ptr<TI::CP::SearchNodeKeyMatch>>(uint64_t *a1, long long *a2, int a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  long long v7 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v8 = (_OWORD *)a1[1];
  uint64_t v9 = a1 + 2;
  unint64_t v10 = a1[2];
  if ((unint64_t)v8 >= v10)
  {
    long long v25 = v7;
    uint64_t v12 = ((uint64_t)v8 - *a1) >> 4;
    if ((unint64_t)(v12 + 1) >> 60) {
      abort();
    }
    uint64_t v13 = v10 - *a1;
    uint64_t v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    long long v29 = v9;
    uint64_t v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v15);
    uint64_t v18 = &v16[16 * v12];
    *(_OWORD *)uint64_t v18 = v25;
    int v20 = (void *)*a1;
    uint64_t v19 = (void *)a1[1];
    if (v19 == (void *)*a1)
    {
      int64x2_t v23 = vdupq_n_s64((unint64_t)v19);
      unint64_t v21 = &v16[16 * v12];
    }
    else
    {
      unint64_t v21 = &v16[16 * v12];
      do
      {
        long long v22 = *((_OWORD *)v19 - 1);
        v19 -= 2;
        *((_OWORD *)v21 - 1) = v22;
        v21 -= 16;
        *uint64_t v19 = 0;
        v19[1] = 0;
      }
      while (v19 != v20);
      int64x2_t v23 = *(int64x2_t *)a1;
    }
    double v11 = v18 + 16;
    *a1 = (uint64_t)v21;
    a1[1] = (uint64_t)(v18 + 16);
    int64x2_t v27 = v23;
    uint64_t v24 = a1[2];
    a1[2] = (uint64_t)&v16[16 * v17];
    uint64_t v28 = v24;
    uint64_t v26 = v23.i64[0];
    std::__split_buffer<std::shared_ptr<KB::LanguageModel>>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    *uint64_t v8 = v7;
    double v11 = v8 + 1;
  }
  a1[1] = (uint64_t)v11;
  if (a3) {
    TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::_upheapify(a1, (unint64_t)(v5 - v6) >> 4);
  }
}

uint64_t TI::CP::SearchNode::has_extensions(TI::CP::SearchNode *this)
{
  if (((*(uint64_t (**)(TI::CP::SearchNode *))(*(void *)this + 128))(this) & 1) != 0
    || ((*(uint64_t (**)(TI::CP::SearchNode *))(*(void *)this + 88))(this) & 1) != 0)
  {
    return 0;
  }
  if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(void *)this + 104))(this))
  {
    if ((*(_WORD *)(*((void *)this + 7) + 60) & 0x30) != 0 && (*(_WORD *)(*((void *)this + 7) + 60) & 8) == 0) {
      return 0;
    }
  }
  if ((*(uint64_t (**)(TI::CP::SearchNode *))(*(void *)this + 72))(this)) {
    return 1;
  }
  unint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 8) + 160);

  return v4();
}

void std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeKeyPredictionExtensions,std::allocator<TI::CP::SearchNodeKeyPredictionExtensions>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,void>(std::__shared_weak_count **a1, TI::CP::SearchNodeKeyPredictionExtensions *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x80uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78DA8;
  uint64_t v9 = v8 + 1;
  long long v11 = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  TI::CP::SearchNodeKeyPredictionExtensions::SearchNodeKeyPredictionExtensions((uint64_t)&v8[1], a2, &v11, (TI::CP::SearchNode *)*a4);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *a1 = v9;
  a1[1] = v8;
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }

  std::__shared_weak_count::__release_shared[abi:nn180100](v8);
}

void *TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::push<std::shared_ptr<TI::CP::SearchNodeTranspositionExtensions>>(void *result, long long *a2)
{
  unsigned int v2 = (char **)result;
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t v4 = result + 2;
  unint64_t v5 = result[2];
  uint64_t v6 = (_OWORD *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    long long v21 = v3;
    uint64_t v8 = ((uint64_t)v6 - *result) >> 4;
    if ((unint64_t)(v8 + 1) >> 60) {
      abort();
    }
    uint64_t v9 = v5 - *result;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    long long v25 = v4;
    uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v11);
    uint64_t v14 = &v12[16 * v8];
    *(_OWORD *)uint64_t v14 = v21;
    uint64_t v16 = *v2;
    unint64_t v15 = v2[1];
    if (v15 == *v2)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v15);
      uint64_t v17 = &v12[16 * v8];
    }
    else
    {
      uint64_t v17 = &v12[16 * v8];
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)unint64_t v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v16);
      int64x2_t v19 = *(int64x2_t *)v2;
    }
    long long v7 = v14 + 16;
    void *v2 = v17;
    v2[1] = v14 + 16;
    int64x2_t v23 = v19;
    int v20 = v2[2];
    v2[2] = &v12[16 * v13];
    uint64_t v24 = v20;
    uint64_t v22 = v19.i64[0];
    double result = (void *)std::__split_buffer<std::shared_ptr<KB::LanguageModel>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    _OWORD *v6 = v3;
    long long v7 = (char *)(v6 + 1);
  }
  v2[1] = v7;
  return result;
}

void TI::CP::Heap<std::shared_ptr<TI::CP::SearchNodeSource>,TI::CP::Search::step_search(unsigned int,BOOL,std::vector<std::shared_ptr<TI::CP::SearchNode const>> &)::SearchNodeCompare>::_upheapify(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    unsigned int v2 = a2;
    do
    {
      unsigned int v4 = v2 - 1;
      uint64_t v5 = (v2 - 1) >> 1;
      uint64_t v6 = *a1;
      uint64_t v7 = *(void *)(*a1 + 16 * v2);
      double v8 = (*(double (**)(uint64_t))(*(void *)v7 + 56))(v7);
      if (v8 <= (*(double (**)(void))(**(void **)(v6 + 16 * v5) + 56))(*(void *)(v6 + 16 * v5))) {
        break;
      }
      uint64_t v9 = *a1;
      long long v10 = *(_OWORD *)(*a1 + 16 * v5);
      *(_OWORD *)(*a1 + 16 * v5) = *(_OWORD *)(*a1 + 16 * v2);
      *(_OWORD *)(v9 + 16 * v2) = v10;
      unsigned int v2 = v4 >> 1;
    }
    while (v4 > 1);
  }
}

long double TI::CP::Search::key_substitution_cost(TI::CP::Search *this, unsigned int a2)
{
  long double v3 = *((double *)this + 62);
  long double v4 = *((double *)this + 58);
  if (a2)
  {
    if (TI::CP::Path::inflection_point_count((TI::CP::Search *)((char *)this + 56), a2, a2)) {
      uint64_t v5 = (double *)((char *)this + 488);
    }
    else {
      uint64_t v5 = (double *)((char *)this + 472);
    }
  }
  else
  {
    uint64_t v5 = (double *)((char *)this + 480);
  }
  return -(pow(v3, v4) * *v5) * *((double *)this + 54);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeLoop>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeLoop>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeLoop>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeKeyPredictionExtensions>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeyPredictionExtensions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeyPredictionExtensions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeOvershoot>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeOvershoot>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78D70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeOvershoot>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeSkippedKey>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeSkippedKey>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78D38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeSkippedKey>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeForward>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeForward>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78D00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeForward>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeGeometryExtensions>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeGeometryExtensions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeGeometryExtensions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeLanguageExtensions>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeLanguageExtensions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78C90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeLanguageExtensions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__split_buffer<std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    long double v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::__destroy_vector::operator()[abi:nn180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ___ZN2TI2CP6Search24compute_keys_near_sampleEj_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  __int16 v3 = *(_WORD *)(*a2 + 60);
  if ((v3 & 0x20) == 0 && ((v3 & 0x30) == 0 || (v3 & 8) != 0))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (((*(_WORD *)(*a2 + 60) & 0xB81) == 0 || (*(_WORD *)(*a2 + 60) & 0x100) != 0 && !*(_DWORD *)(a1 + 64))
      && hypot(*(double *)(v2 + 96) - *(double *)(a1 + 40), *(double *)(v2 + 104) - *(double *)(a1 + 48))
       * *(double *)(v7 + 320) <= *(double *)(v7 + 496))
    {
      std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::push_back[abi:nn180100](*(atomic_uint ****)(a1 + 56), (atomic_uint *)v2);
      if (TI::Favonius::KeyboardLayout::is_indic_alphabetic(*(TI::Favonius::KeyboardLayout **)(v7 + 8)))
      {
        KB::String::String((KB::String *)v15, (const KB::String *)(*a2 + 8));
        KB::String::String((KB::String *)v13, (const KB::String *)v15);
        TI::IndicUtils::convertVowel((const KB::String *)v13, (uint64_t)v12);
        if (v14 && v13[6] == 1) {
          free(v14);
        }
        for (uint64_t i = 0; i != 96; i += 32)
        {
          if (!*(_WORD *)&v12[i + 4])
          {
            KB::String::compute_length((unsigned __int16 *)&v12[i]);
            if (!*(_WORD *)&v12[i + 4]) {
              continue;
            }
          }
          if (!KB::String::equal((KB::String *)&v12[i], (const KB::String *)v15, 1))
          {
            if (*(unsigned __int16 *)(*a2 + 40) >= 0xFu) {
              operator new[]();
            }
            operator new();
          }
        }
        for (uint64_t j = 0; j != -96; j -= 32)
        {
          long long v10 = *(void **)&v12[j + 72];
          if (v10 && v12[j + 70] == 1) {
            free(v10);
          }
        }
        if (v16) {
          BOOL v11 = v15[6] == 1;
        }
        else {
          BOOL v11 = 0;
        }
        if (v11) {
          free(v16);
        }
      }
    }
  }
}

BOOL ___ZN2TI2CP6Search24compute_keys_near_sampleEj_block_invoke_2(uint64_t a1, CGRect **a2, CGRect **a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = TI::CP::Search::key_deviation_cost(v5, *(_DWORD *)(a1 + 40), *a2);
  return v6 > TI::CP::Search::key_deviation_cost(v5, *(_DWORD *)(a1 + 40), *a3);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::LayoutKey> const&,WTF::RefPtr<TI::Favonius::LayoutKey> const&),WTF::RefPtr<TI::Favonius::LayoutKey>*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  BOOL v11 = (uint64_t *)result;
  while (2)
  {
    uint64_t v91 = a2;
    float v93 = a2 - 1;
    unint64_t v89 = a2 - 3;
    float v90 = a2 - 2;
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          BOOL v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                double result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
                if (result)
                {
                  uint64_t v37 = *v12;
                  *uint64_t v12 = *v93;
                  *float v93 = v37;
                }
                break;
              case 3uLL:
                double result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v93, a3);
                break;
              case 4uLL:
                double result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v12 + 2, v93, a3);
                break;
              case 5uLL:
                double result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, v12 + 1, v12 + 2, v12 + 3, v93, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            int64x2_t v38 = v12 + 1;
            BOOL v40 = v12 == a2 || v38 == a2;
            if (a5)
            {
              if (!v40)
              {
                uint64_t v41 = 0;
                do
                {
                  uint64_t v42 = v38;
                  double result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
                  if (result)
                  {
                    uint64_t v43 = 0;
                    uint64_t v44 = *v42;
                    *uint64_t v42 = 0;
                    uint64_t v97 = v44;
                    for (uint64_t i = v41; ; i -= 8)
                    {
                      unint64_t v46 = (uint64_t *)((char *)v12 + i);
                      uint64_t v47 = *(uint64_t *)((char *)v12 + i);
                      *unint64_t v46 = 0;
                      v46[1] = v47;
                      if (v43) {
                        WTF::RefCounted<TI::Favonius::Key>::deref(v43);
                      }
                      if (!i) {
                        break;
                      }
                      uint64_t v48 = (uint64_t *)((char *)v12 + i);
                      if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
                        goto LABEL_87;
                      }
                      uint64_t v43 = *v46;
                    }
                    uint64_t v48 = v12;
LABEL_87:
                    double result = *v48;
                    *uint64_t v48 = v97;
                    a2 = v91;
                    if (result)
                    {
                      WTF::RefCounted<TI::Favonius::Key>::deref(result);
                      double result = 0;
                    }
                  }
                  int64x2_t v38 = v42 + 1;
                  v41 += 8;
                }
                while (v42 + 1 != a2);
              }
            }
            else if (!v40)
            {
              do
              {
                uint64_t v85 = v38;
                double result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
                if (result)
                {
                  uint64_t v86 = 0;
                  uint64_t v87 = *v85;
                  uint64_t *v85 = 0;
                  uint64_t v100 = v87;
                  while (1)
                  {
                    uint64_t v88 = *v11;
                    uint64_t *v11 = 0;
                    v11[1] = v88;
                    if (v86) {
                      WTF::RefCounted<TI::Favonius::Key>::deref(v86);
                    }
                    if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
                      break;
                    }
                    uint64_t v86 = *v11--;
                  }
                  double result = *v11;
                  uint64_t *v11 = v100;
                  if (result)
                  {
                    WTF::RefCounted<TI::Favonius::Key>::deref(result);
                    double result = 0;
                  }
                }
                int64x2_t v38 = v85 + 1;
                BOOL v11 = v85;
              }
              while (v85 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v49 = (v14 - 2) >> 1;
              int64_t v94 = v49;
              do
              {
                int64_t v50 = v49;
                if (v94 >= v49)
                {
                  uint64_t v51 = (2 * v49) | 1;
                  uint64_t v52 = &v11[v51];
                  if (2 * v49 + 2 < (uint64_t)v14 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
                  {
                    ++v52;
                    uint64_t v51 = 2 * v50 + 2;
                  }
                  v53 = &v11[v50];
                  a2 = v91;
                  if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
                  {
                    uint64_t v54 = *v53;
                    uint64_t *v53 = 0;
                    uint64_t v98 = v54;
                    do
                    {
                      unint64_t v55 = v52;
                      uint64_t v56 = *v52;
                      *uint64_t v52 = 0;
                      uint64_t v57 = *v53;
                      uint64_t *v53 = v56;
                      if (v57) {
                        WTF::RefCounted<TI::Favonius::Key>::deref(v57);
                      }
                      if (v94 < v51) {
                        break;
                      }
                      uint64_t v58 = (2 * v51) | 1;
                      uint64_t v52 = &v11[v58];
                      uint64_t v59 = 2 * v51 + 2;
                      if (v59 < (uint64_t)v14 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
                      {
                        ++v52;
                        uint64_t v58 = v59;
                      }
                      v53 = v55;
                      uint64_t v51 = v58;
                    }
                    while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
                    uint64_t v60 = *v55;
                    *unint64_t v55 = v98;
                    if (v60) {
                      WTF::RefCounted<TI::Favonius::Key>::deref(v60);
                    }
                    a2 = v91;
                  }
                }
                int64_t v49 = v50 - 1;
              }
              while (v50);
              uint64_t v61 = (unint64_t)v13 >> 3;
              do
              {
                uint64_t v62 = a2;
                uint64_t v63 = 0;
                uint64_t v64 = *v11;
                uint64_t *v11 = 0;
                uint64_t v65 = v61 - 2;
                uint64_t v92 = v64;
                if (v61 < 2) {
                  uint64_t v65 = v61 - 1;
                }
                uint64_t v66 = v65 >> 1;
                long long v67 = v11;
                do
                {
                  uint64_t v68 = &v67[v63 + 1];
                  uint64_t v69 = 2 * v63;
                  uint64_t v63 = (2 * v63) | 1;
                  uint64_t v70 = v69 + 2;
                  if (v69 + 2 < v61 && (*(unsigned int (**)(void))(*(void *)a3 + 16))())
                  {
                    ++v68;
                    uint64_t v63 = v70;
                  }
                  uint64_t v71 = *v68;
                  uint64_t *v68 = 0;
                  uint64_t v72 = *v67;
                  *long long v67 = v71;
                  if (v72) {
                    WTF::RefCounted<TI::Favonius::Key>::deref(v72);
                  }
                  long long v67 = v68;
                }
                while (v63 <= v66);
                unint64_t v73 = v62 - 1;
                if (v68 == v73)
                {
                  long long v76 = v73;
                  double result = *v68;
                  uint64_t *v68 = v92;
                  if (result) {
                    double result = WTF::RefCounted<TI::Favonius::Key>::deref(result);
                  }
                }
                else
                {
                  uint64_t v74 = *v73;
                  *unint64_t v73 = 0;
                  uint64_t v75 = *v68;
                  uint64_t *v68 = v74;
                  if (v75) {
                    WTF::RefCounted<TI::Favonius::Key>::deref(v75);
                  }
                  double result = *v73;
                  long long v76 = v73;
                  *unint64_t v73 = v92;
                  if (result) {
                    double result = WTF::RefCounted<TI::Favonius::Key>::deref(result);
                  }
                  uint64_t v77 = (char *)(v68 + 1) - (char *)v11;
                  if (v77 >= 9)
                  {
                    unint64_t v78 = (unint64_t)((v77 >> 3) - 2) >> 1;
                    v79 = &v11[v78];
                    double result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
                    if (result)
                    {
                      uint64_t v80 = *v68;
                      uint64_t *v68 = 0;
                      uint64_t v99 = v80;
                      do
                      {
                        v81 = v79;
                        uint64_t v82 = *v79;
                        uint64_t *v79 = 0;
                        uint64_t v83 = *v68;
                        uint64_t *v68 = v82;
                        if (v83) {
                          WTF::RefCounted<TI::Favonius::Key>::deref(v83);
                        }
                        if (!v78) {
                          break;
                        }
                        unint64_t v78 = (v78 - 1) >> 1;
                        v79 = &v11[v78];
                        uint64_t v68 = v81;
                      }
                      while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
                      double result = *v81;
                      uint64_t *v81 = v99;
                      if (result)
                      {
                        WTF::RefCounted<TI::Favonius::Key>::deref(result);
                        double result = 0;
                      }
                    }
                  }
                }
                BOOL v84 = v61-- <= 2;
                a2 = v76;
              }
              while (!v84);
            }
            return result;
          }
          unint64_t v15 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12, &v12[v14 >> 1], v93, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12 + 1, v15 - 1, v90, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v12 + 2, &v12[(v14 >> 1) + 1], v89, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v15 - 1, &v12[v14 >> 1], &v12[(v14 >> 1) + 1], a3);
            uint64_t v16 = *v12;
            *uint64_t v12 = *v15;
            *unint64_t v15 = v16;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(&v12[v14 >> 1], v12, v93, a3);
          }
          --a4;
          a2 = v91;
          if (a5 & 1) != 0 || ((*(uint64_t (**)(void))(*(void *)a3 + 16))()) {
            break;
          }
          uint64_t v28 = *v12;
          *uint64_t v12 = 0;
          uint64_t v96 = v28;
          if ((*(uint64_t (**)(void))(*(void *)a3 + 16))())
          {
            do
              ++v12;
            while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
          }
          else
          {
            long long v29 = v12 + 1;
            do
            {
              uint64_t v12 = v29;
              if (v29 >= v91) {
                break;
              }
              int v30 = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
              long long v29 = v12 + 1;
            }
            while (!v30);
          }
          unsigned int v31 = v91;
          if (v12 < v91)
          {
            unsigned int v31 = v91;
            do
              --v31;
            while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
          }
          while (v12 < v31)
          {
            uint64_t v32 = *v12;
            *uint64_t v12 = *v31;
            *unsigned int v31 = v32;
            do
              ++v12;
            while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
            do
              --v31;
            while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
          }
          long long v33 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11)
          {
            uint64_t v34 = *v33;
            uint64_t *v33 = 0;
            uint64_t v35 = *v11;
            uint64_t *v11 = v34;
            if (v35) {
              WTF::RefCounted<TI::Favonius::Key>::deref(v35);
            }
          }
          uint64_t v36 = *v33;
          uint64_t *v33 = v96;
          if (v36) {
            WTF::RefCounted<TI::Favonius::Key>::deref(v36);
          }
          double result = 0;
          a5 = 0;
        }
        uint64_t v17 = *v12;
        *uint64_t v12 = 0;
        uint64_t v95 = v17;
        long long v18 = v12;
        do
          int64x2_t v19 = v18++;
        while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
        int v20 = v91;
        if (v19 == v12)
        {
          int v20 = v91;
          do
          {
            if (v18 >= v20) {
              break;
            }
            --v20;
          }
          while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
        }
        else
        {
          do
            --v20;
          while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
        }
        if (v18 < v20)
        {
          long long v21 = v18;
          uint64_t v22 = v20;
          do
          {
            uint64_t v23 = *v21;
            uint64_t *v21 = *v22;
            *uint64_t v22 = v23;
            do
              int64x2_t v19 = v21++;
            while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
            do
              --v22;
            while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
          }
          while (v21 < v22);
        }
        if (v19 != v11)
        {
          uint64_t v24 = *v19;
          *int64x2_t v19 = 0;
          uint64_t v25 = *v11;
          uint64_t *v11 = v24;
          if (v25) {
            WTF::RefCounted<TI::Favonius::Key>::deref(v25);
          }
        }
        uint64_t v26 = *v19;
        *int64x2_t v19 = v95;
        if (v26) {
          WTF::RefCounted<TI::Favonius::Key>::deref(v26);
        }
        if (v18 >= v20) {
          break;
        }
LABEL_34:
        double result = std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::LayoutKey> const&,WTF::RefPtr<TI::Favonius::LayoutKey> const&),WTF::RefPtr<TI::Favonius::LayoutKey>*,false>(v11, v19, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v19 + 1;
      }
      BOOL v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::LayoutKey> const&,WTF::RefPtr<TI::Favonius::LayoutKey> const&),WTF::RefPtr<TI::Favonius::LayoutKey>*>(v11, v19, a3);
      uint64_t v12 = v19 + 1;
      double result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::LayoutKey> const&,WTF::RefPtr<TI::Favonius::LayoutKey> const&),WTF::RefPtr<TI::Favonius::LayoutKey>*>(v19 + 1, v91, a3);
      if (result) {
        break;
      }
      if (!v27) {
        goto LABEL_34;
      }
    }
    a2 = v19;
    if (!v27) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::LayoutKey> const&,WTF::RefPtr<TI::Favonius::LayoutKey> const&),WTF::RefPtr<TI::Favonius::LayoutKey>*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v8 = a2 - 1;
      if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *double v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a3);
      long long v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
    {
      uint64_t v13 = 0;
      uint64_t v14 = *v10;
      *long long v10 = 0;
      uint64_t v20 = v14;
      for (uint64_t i = v11; ; i -= 8)
      {
        uint64_t v16 = (char *)a1 + i;
        uint64_t v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((void *)v16 + 2) = 0;
        *((void *)v16 + 3) = v17;
        if (v13) {
          WTF::RefCounted<TI::Favonius::Key>::deref(v13);
        }
        if (i == -16)
        {
          long long v18 = a1;
          goto LABEL_15;
        }
        if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0) {
          break;
        }
        uint64_t v13 = *((void *)v16 + 2);
      }
      long long v18 = (uint64_t *)((char *)a1 + i + 16);
LABEL_15:
      uint64_t v19 = *v18;
      *long long v18 = v20;
      if (v19) {
        WTF::RefCounted<TI::Favonius::Key>::deref(v19);
      }
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

long double TI::CP::Search::key_deviation_cost(uint64_t a1, unsigned int a2, CGRect *a3)
{
  uint64_t v6 = (TI::CP::Path *)(a1 + 56);
  uint64_t v7 = (double *)(*(void *)(a1 + 56) + 48 * a2);
  double v8 = *v7;
  double v9 = v7[1];
  double x = a3[3].origin.x;
  double y = a3[3].origin.y;
  if (CGRectGetWidth(a3[2]) > *(double *)(a1 + 312) * 3.0)
  {
    double v12 = CGRectGetMinX(a3[2]) + *(double *)(a1 + 312);
    double v13 = CGRectGetMaxX(a3[2]) - *(double *)(a1 + 312);
    if (v8 <= v13) {
      double v13 = v8;
    }
    if (v8 >= v12) {
      double x = v13;
    }
    else {
      double x = v12;
    }
  }
  double v14 = *(double *)(a1 + 320);
  double v15 = *(double *)(a1 + 496);
  long double v16 = *(double *)(a1 + 464);
  if (a2)
  {
    if (TI::CP::Path::inflection_point_count(v6, a2, a2)) {
      uint64_t v17 = (double *)(a1 + 488);
    }
    else {
      uint64_t v17 = (double *)(a1 + 472);
    }
  }
  else
  {
    uint64_t v17 = (double *)(a1 + 480);
  }
  long double v18 = v14 * hypot(x - v8, y - v9);
  if (v15 < v18) {
    long double v18 = v15;
  }
  return *(double *)(a1 + 432) * -(pow(v18, v16) * *v17);
}

void std::vector<std::shared_ptr<TI::CP::SearchNode const>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<TI::CP::SearchNode const>>::__clear[abi:nn180100]((uint64_t *)v2);
    __int16 v3 = **a1;
    operator delete(v3);
  }
}

double TI::CP::Search::path_length(TI::CP::Search *this)
{
  uint64_t v1 = *((void *)this + 14);
  if (*((void *)this + 13) == v1) {
    return 0.0;
  }
  else {
    return *(double *)(v1 - 16);
  }
}

unsigned int *TI::CP::Search::set_typing_model(uint64_t a1, uint64_t *a2)
{
  BOOL result = *(unsigned int **)(a1 + 176);
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 176) = v4;
  if (result)
  {
    unsigned int v5 = atomic_load(result + 2);
    if (v5 == 1) {
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)result + 40))();
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF);
    }
  }
  return result;
}

void TI::CP::Search::reset_path(TI::CP::Search *this)
{
  *((void *)this + 8) = *((void *)this + 7);
  *((void *)this + 11) = *((void *)this + 10);
  *((void *)this + 14) = *((void *)this + 13);
  *((void *)this + 17) = *((void *)this + 16);
  *((unsigned char *)this + 152) = 0;
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 40) = 0;
  uint64_t v2 = (void **)*((void *)this + 41);
  __int16 v3 = (void **)*((void *)this + 42);
  while (v3 != v2)
  {
    v3 -= 3;
    uint64_t v6 = v3;
    std::vector<std::shared_ptr<TI::CP::SearchNode const>>::__destroy_vector::operator()[abi:nn180100](&v6);
  }
  *((void *)this + 42) = v2;
  std::vector<std::shared_ptr<TI::CP::SearchNode const>>::__clear[abi:nn180100]((uint64_t *)this + 44);
  uint64_t v4 = (void **)*((void *)this + 47);
  unsigned int v5 = (void **)*((void *)this + 48);
  while (v5 != v4)
  {
    v5 -= 3;
    uint64_t v6 = v5;
    std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::__destroy_vector::operator()[abi:nn180100](&v6);
  }
  *((void *)this + 48) = v4;
  *((_DWORD *)this + 42) = 7;
}

double TI::CP::Search::last_touch(TI::CP::Search *this)
{
  uint64_t v1 = *((void *)this + 14);
  if (*((void *)this + 13) == v1) {
    uint64_t v2 = MEMORY[0x1E4F1DAD8];
  }
  else {
    uint64_t v2 = v1 - 48;
  }
  return *(double *)v2;
}

uint64_t TI::CP::Search::touch_stage(TI::CP::Search *this)
{
  return *((unsigned int *)this + 42);
}

void TI::CP::Search::add_touch(TI::CP::Search *this, int a2, CGFloat a3, CGFloat a4, double a5, double a6)
{
  if (!a2 && *((unsigned char *)this + 152)) {
    (*(void (**)(TI::CP::Search *))(*(void *)this + 56))(this);
  }
  if (*((void *)this + 41) == *((void *)this + 42)) {
    TI::CP::Search::initialize_search(this);
  }
  v27.double x = a3;
  v27.double y = a4;
  unsigned int v12 = TI::CP::PathResampler::append_and_resample((TI::CP::Search *)((char *)this + 16), v27, a5, a6, 0.0);
  if (a2 == 2)
  {
    unsigned int v13 = TI::CP::PathResampler::finalize((TI::CP::Search *)((char *)this + 16));
    if (v13 < v12) {
      unsigned int v12 = v13;
    }
  }
  int v25 = a2;
  unint64_t v14 = v12 + 1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 42) - *((void *)this + 41)) >> 3) > v14)
  {
    std::vector<std::vector<std::shared_ptr<TI::CP::SearchNode const>>>::resize((uint64_t *)this + 41, v14);
    std::vector<std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>>::resize((uint64_t *)this + 47, v12);
  }
  double v15 = (void *)((char *)this + 344);
  while (1)
  {
    uint64_t v17 = *((void *)this + 41);
    long double v16 = (void *)*((void *)this + 42);
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - v17) >> 3);
    if (v18 >= 1 - 0x5555555555555555 * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 4)) {
      break;
    }
    if ((unint64_t)v16 >= *v15)
    {
      unint64_t v20 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((*v15 - v17) >> 3);
      if (2 * v21 > v20) {
        unint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x555555555555555) {
        unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v22 = v20;
      }
      v26[4] = (char *)this + 344;
      if (v22) {
        unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v22);
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = (void *)(v22 + 24 * v18);
      v26[0] = v22;
      v26[1] = v24;
      v26[3] = v22 + 24 * v23;
      *uint64_t v24 = 0;
      v24[1] = 0;
      void v24[2] = 0;
      void v26[2] = v24 + 3;
      std::vector<std::vector<KB::LikelihoodInfo>>::__swap_out_circular_buffer((void *)this + 41, v26);
      uint64_t v19 = (void *)*((void *)this + 42);
      std::__split_buffer<std::vector<std::shared_ptr<TI::CP::SearchNode const>>>::~__split_buffer((uint64_t)v26);
    }
    else
    {
      *long double v16 = 0;
      v16[1] = 0;
      uint64_t v19 = v16 + 3;
      v16[2] = 0;
    }
    *((void *)this + 42) = v19;
    TI::CP::Search::step_search((uint64_t)this, (TI::CP::SearchNode *)(v18 - 1), 0, v19 - 3);
  }
  *((_DWORD *)this + 42) = v25;
}

void (***TI::CP::Search::initialize_search(TI::CP::Search *this))(void, uint64_t *, char *)
{
  __int16 v3 = (void *)*((void *)this + 42);
  unint64_t v2 = *((void *)this + 43);
  if ((unint64_t)v3 >= v2)
  {
    uint64_t v5 = *((void *)this + 41);
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - v5) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_35:
    }
      abort();
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - v5) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    uint64_t v44 = (char *)this + 344;
    if (v9) {
      unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (void *)(v9 + 24 * v6);
    unint64_t v40 = v9;
    uint64_t v41 = v11;
    unint64_t v43 = v9 + 24 * v10;
    void *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    uint64_t v42 = v11 + 3;
    std::vector<std::vector<KB::LikelihoodInfo>>::__swap_out_circular_buffer((void *)this + 41, &v40);
    uint64_t v4 = (void *)*((void *)this + 42);
    std::__split_buffer<std::vector<std::shared_ptr<TI::CP::SearchNode const>>>::~__split_buffer((uint64_t)&v40);
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
    uint64_t v4 = v3 + 3;
    v3[2] = 0;
  }
  *((void *)this + 42) = v4;
  BOOL result = (void (***)(void, uint64_t *, char *))*((void *)this + 22);
  if (result)
  {
    uint64_t v37 = 0;
    int64x2_t v38 = 0;
    uint64_t v39 = 0;
    (**result)(result, &v37, (char *)this + 400);
    if (v37)
    {
      unsigned int v13 = v38;
      unint64_t v14 = &v38[v37];
      do
      {
        uint64_t v15 = *((void *)this + 42);
        uint64_t v16 = *v13;
        if (*v13) {
          atomic_fetch_add((atomic_uint *volatile)(v16 + 8), 1u);
        }
        uint64_t v17 = (char *)operator new(0xA0uLL);
        *((void *)v17 + 2) = 0;
        *((void *)v17 + 1) = 0;
        *(void *)uint64_t v17 = &unk_1F3F78C20;
        *((void *)v17 + 4) = 0;
        *((void *)v17 + 5) = 0;
        *((void *)v17 + 7) = 0;
        *((void *)v17 + 8) = 0;
        *((void *)v17 + 5) = v17;
        *((void *)v17 + 6) = this;
        *((_DWORD *)v17 + 18) = -1;
        *((void *)v17 + 10) = 0;
        *((void *)v17 + 11) = v16;
        *(_WORD *)(v17 + 105) = 1;
        *((void *)v17 + 15) = 0;
        *((void *)v17 + 16) = 0;
        *((void *)v17 + 14) = 0;
        *((void *)v17 + 3) = &unk_1F3F74820;
        *((void *)v17 + 4) = v17 + 24;
        *((void *)v17 + 12) = 0;
        *((void *)v17 + 17) = 0;
        *((void *)v17 + 18) = 0;
        *((void *)v17 + 19) = 0;
        v17[104] = 1;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 1, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 2, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v17);
        unint64_t v18 = *(void *)(v15 - 8);
        uint64_t v19 = *(void **)(v15 - 16);
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v21 = *(void *)(v15 - 24);
          uint64_t v22 = ((uint64_t)v19 - v21) >> 4;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60) {
            goto LABEL_35;
          }
          *(void *)&long long v24 = v17 + 24;
          *((void *)&v24 + 1) = v17;
          long long v36 = v24;
          uint64_t v25 = v18 - v21;
          if (v25 >> 3 > v23) {
            unint64_t v23 = v25 >> 3;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v23;
          }
          uint64_t v44 = (char *)(v15 - 8);
          CGPoint v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v26);
          long long v29 = &v27[16 * v22];
          *(_OWORD *)long long v29 = v36;
          unsigned int v31 = *(void **)(v15 - 24);
          int v30 = *(void **)(v15 - 16);
          if (v30 == v31)
          {
            uint64_t v34 = *(void **)(v15 - 16);
            uint64_t v32 = &v27[16 * v22];
          }
          else
          {
            uint64_t v32 = &v27[16 * v22];
            do
            {
              long long v33 = *((_OWORD *)v30 - 1);
              v30 -= 2;
              *((_OWORD *)v32 - 1) = v33;
              v32 -= 16;
              *int v30 = 0;
              v30[1] = 0;
            }
            while (v30 != v31);
            uint64_t v34 = *(void **)(v15 - 24);
            int v30 = *(void **)(v15 - 16);
          }
          unint64_t v20 = v29 + 16;
          *(void *)(v15 - 24) = v32;
          uint64_t v41 = v34;
          *(void *)(v15 - 16) = v29 + 16;
          uint64_t v42 = v30;
          unint64_t v35 = *(void *)(v15 - 8);
          *(void *)(v15 - 8) = &v27[16 * v28];
          unint64_t v43 = v35;
          unint64_t v40 = (unint64_t)v34;
          std::__split_buffer<std::shared_ptr<KB::LanguageModel>>::~__split_buffer((uint64_t)&v40);
        }
        else
        {
          *uint64_t v19 = v17 + 24;
          v19[1] = v17;
          unint64_t v20 = v19 + 2;
        }
        *(void *)(v15 - 16) = v20;
        ++v13;
      }
      while (v13 != v14);
    }
    return (void (***)(void, uint64_t *, char *))WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)&v37);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeRoot>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeRoot>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78C20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeRoot>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F78C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t TI::CP::Search::recognitionSources(TI::CP::Search *this)
{
  return 1;
}

uint64_t TI::CP::Search::get_recognizer_type(TI::CP::Search *this)
{
  return 0;
}

void TI::CP::Search::~Search(TI::CP::Search *this)
{
  TI::CP::Search::~Search(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  void *v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void **v21;

  *(void *)this = &unk_1F3F78AC0;
  unint64_t v2 = (void *)*((void *)this + 51);
  if (v2 && *((unsigned char *)this + 406) == 1) {
    free(v2);
  }
  __int16 v3 = (void **)*((void *)this + 47);
  if (v3)
  {
    uint64_t v4 = (void **)*((void *)this + 48);
    uint64_t v5 = (void *)*((void *)this + 47);
    if (v4 != v3)
    {
      do
      {
        v4 -= 3;
        uint64_t v21 = v4;
        std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::__destroy_vector::operator()[abi:nn180100](&v21);
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 47);
    }
    *((void *)this + 48) = v3;
    operator delete(v5);
  }
  uint64_t v21 = (void **)((char *)this + 352);
  std::vector<std::shared_ptr<TI::CP::SearchNode const>>::__destroy_vector::operator()[abi:nn180100](&v21);
  unint64_t v6 = (void **)*((void *)this + 41);
  if (v6)
  {
    unint64_t v7 = (void **)*((void *)this + 42);
    unint64_t v8 = (void *)*((void *)this + 41);
    if (v7 != v6)
    {
      do
      {
        v7 -= 3;
        uint64_t v21 = v7;
        std::vector<std::shared_ptr<TI::CP::SearchNode const>>::__destroy_vector::operator()[abi:nn180100](&v21);
      }
      while (v7 != v6);
      unint64_t v8 = (void *)*((void *)this + 41);
    }
    *((void *)this + 42) = v6;
    operator delete(v8);
  }
  uint64_t v21 = (void **)((char *)this + 288);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v21);
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::CP::Search *)((char *)this + 280));
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::CP::Search *)((char *)this + 272));
  unint64_t v9 = (void *)*((void *)this + 28);
  if (v9)
  {
    *((void *)this + 29) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
  }
  unsigned int v12 = (unsigned int *)*((void *)this + 23);
  if (v12)
  {
    unsigned int v13 = atomic_load(v12 + 2);
    if (v13 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF);
    }
  }
  unint64_t v14 = (unsigned int *)*((void *)this + 22);
  if (v14)
  {
    uint64_t v15 = atomic_load(v14 + 2);
    if (v15 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v14 + 40))(v14);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v14 + 2, 0xFFFFFFFF);
    }
  }
  uint64_t v16 = (void *)*((void *)this + 16);
  if (v16)
  {
    *((void *)this + 17) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 13);
  if (v17)
  {
    *((void *)this + 14) = v17;
    operator delete(v17);
  }
  unint64_t v18 = (void *)*((void *)this + 10);
  if (v18)
  {
    *((void *)this + 11) = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 7);
  if (v19)
  {
    *((void *)this + 8) = v19;
    operator delete(v19);
  }
  *(void *)this = &unk_1F3F78B70;
  unint64_t v20 = *((void *)this + 1);
  if (v20) {
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref(v20);
  }
}

uint64_t TI::CP::Search::Search(uint64_t a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  *(void *)a1 = &unk_1F3F78AC0;
  *(void *)(a1 + 8) = 0;
  long long v8 = *a4;
  long long v9 = a4[1];
  *(void *)(a1 + 48) = *((void *)a4 + 4);
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  std::vector<TI::CP::PathSample>::vector((void *)(a1 + 56), (uint64_t)a4 + 40);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)(a1 + 80), (const std::vector<unsigned int> *)(a4 + 4));
  std::vector<TI::CP::PathSample>::vector((void *)(a1 + 104), (uint64_t)a4 + 88);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)(a1 + 128), (const std::vector<unsigned int> *)(a4 + 7));
  uint64_t v10 = *((void *)a4 + 17);
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a4 + 36);
  *(void *)(a1 + 152) = v10;
  *(_DWORD *)(a1 + 168) = 7;
  uint64_t v11 = *a2;
  *a2 = 0;
  uint64_t v12 = *a3;
  *a3 = 0;
  *(void *)(a1 + 176) = v11;
  *(void *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 272));
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 280));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 386) = 0u;
  *(_DWORD *)(a1 + 402) = 16;
  *(unsigned char *)(a1 + 406) = 0;
  *(void *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 432) = xmmword_1E4154D70;
  *(_OWORD *)(a1 + 448) = xmmword_1E4154D80;
  *(_OWORD *)(a1 + 464) = xmmword_1E4154D90;
  *(_OWORD *)(a1 + 480) = xmmword_1E4154DA0;
  *(_OWORD *)(a1 + 496) = xmmword_1E4154DB0;
  *(_OWORD *)(a1 + 512) = xmmword_1E4154DC0;
  *(_OWORD *)(a1 + 528) = xmmword_1E4154DD0;
  *(_OWORD *)(a1 + 544) = xmmword_1E4154CE0;
  *(void *)(a1 + 560) = 0x403E000000000000;
  *(unsigned char *)(a1 + 568) = 1;
  __asm { FMOV            V0.2D, #10.0 }
  *(_OWORD *)(a1 + 576) = _Q0;
  return a1;
}

uint64_t TI::CP::Search::keys_near_sample(TI::CP::Search *this, unsigned int a2)
{
  return *((void *)this + 47) + 24 * a2;
}

uint64_t TI::CP::Search::extend_typing@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, unsigned int **a5@<X8>)
{
  uint64_t v8 = result;
  if (*(unsigned char *)(a2 + 82))
  {
    uint64_t v10 = *(void *)(a2 + 88);
    uint64_t v11 = *(uint64_t **)(a2 + 96);
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 0x40000000;
    uint64_t v34 = ___ZNK2TI2CP6Search13extend_typingEPKNS0_10SearchNodeERKN3WTF6RefPtrINS_8Favonius9LayoutKeyEEEj_block_invoke;
    unint64_t v35 = &__block_descriptor_tmp_5_18510;
    long long v36 = a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      unsigned int v13 = &v11[v10];
      while (1)
      {
        BOOL result = ((uint64_t (*)(void *, uint64_t *))v34)(v33, v11);
        if (result) {
          break;
        }
        ++v11;
        v12 -= 8;
        if (!v12)
        {
          uint64_t v11 = v13;
          break;
        }
      }
      unint64_t v14 = v11;
      uint64_t v11 = *(uint64_t **)(a2 + 96);
    }
    else
    {
      unint64_t v14 = v11;
    }
    if (v14 == &v11[*(void *)(a2 + 88)])
    {
      if (*(_WORD *)(*a3 + 40))
      {
        *a5 = 0;
        return result;
      }
    }
    else
    {
      uint64_t v15 = *v14;
      *a5 = (unsigned int *)v15;
      if (v15)
      {
        atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
        uint64_t v16 = *a5;
      }
      else
      {
        uint64_t v16 = 0;
      }
      int v17 = *(unsigned __int16 *)(*a3 + 40);
      if (v17 == *(unsigned __int16 *)(*(void *)(*(uint64_t (**)(unsigned int *))(*(void *)v16 + 16))(v16)
                                      + 40))
      {
        BOOL result = (*(uint64_t (**)(unsigned int *))(*(void *)v16 + 16))(v16);
        if (*(void *)result != *a3)
        {
          BOOL result = KB::String::equal((KB::String *)(*(void *)result + 8), (const KB::String *)(*a3 + 8), 1);
          if ((result & 1) == 0)
          {
            unint64_t v18 = (atomic_uint *)*a3;
            uint64_t v32 = v18;
            uint64_t v19 = v16;
            if (v18)
            {
              atomic_fetch_add(v18, 1u);
              uint64_t v19 = *a5;
            }
            (*(void (**)(unsigned int **__return_ptr, unsigned int *, atomic_uint **))(*(void *)v16 + 216))(&v29, v16, &v32);
            unint64_t v20 = v29;
            long long v29 = 0;
            *a5 = v20;
            if (v19)
            {
              unsigned int v21 = atomic_load(v19 + 2);
              if (v21 == 1) {
                (*(void (**)(unsigned int *))(*(void *)v19 + 248))(v19);
              }
              else {
                atomic_fetch_add((atomic_uint *volatile)v19 + 2, 0xFFFFFFFF);
              }
              if (v29)
              {
                unsigned int v27 = atomic_load(v29 + 2);
                if (v27 == 1) {
                  (*(void (**)(void))(*(void *)v29 + 248))();
                }
                else {
                  atomic_fetch_add((atomic_uint *volatile)v29 + 2, 0xFFFFFFFF);
                }
              }
            }
            BOOL result = (uint64_t)v32;
            if (v32) {
              return WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v32);
            }
          }
        }
        return result;
      }
      unsigned int v22 = atomic_load(v16 + 2);
      if (v22 == 1) {
        (*(void (**)(unsigned int *))(*(void *)v16 + 248))(v16);
      }
      else {
        atomic_fetch_add((atomic_uint *volatile)v16 + 2, 0xFFFFFFFF);
      }
    }
  }
  BOOL result = TI::CP::Search::find_clone_in_prev_beam(v8, *(void *)(a2 + 64), *a3, a4);
  if (result)
  {
    uint64_t v23 = *(void *)(result + 64);
    *a5 = (unsigned int *)v23;
    if (v23) {
      atomic_fetch_add((atomic_uint *volatile)(v23 + 8), 1u);
    }
  }
  else
  {
    long long v29 = 0;
    int v30 = 0;
    uint64_t v31 = 0;
    uint64_t v24 = *(void *)(a2 + 64);
    uint64_t v25 = (atomic_uint *)*a3;
    uint64_t v28 = v25;
    if (v25) {
      atomic_fetch_add(v25, 1u);
    }
    (*(void (**)(uint64_t, unsigned int **, atomic_uint **))(*(void *)v24 + 40))(v24, &v29, &v28);
    if (v28) {
      WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v28);
    }
    if ((*(unsigned int (**)(void))(*(void *)*v30 + 160))())
    {
      unint64_t v26 = *v30;
      *a5 = *v30;
      if (v26) {
        atomic_fetch_add((atomic_uint *volatile)v26 + 2, 1u);
      }
    }
    else
    {
      *a5 = 0;
    }
    return WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)&v29);
  }
  return result;
}

BOOL ___ZNK2TI2CP6Search13extend_typingEPKNS0_10SearchNodeERKN3WTF6RefPtrINS_8Favonius9LayoutKeyEEEj_block_invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (KB::ByteString *)(**(void **)(a1 + 32) + 40);
  __int16 v3 = (const ByteString *)(*(void *)(*(uint64_t (**)(void))(**(void **)a2 + 16))() + 40);

  return KB::ByteString::starts_with(v2, v3);
}

uint64_t TI::CP::Search::find_clone_in_prev_beam(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 328) + 24 * a4;
  uint64_t v5 = *(void **)v4;
  unint64_t v6 = *(void **)(v4 + 8);
  if (*(void **)v4 == v6) {
    return 0;
  }
  while (1)
  {
    uint64_t v9 = *(void *)(*v5 + 32);
    if (v9)
    {
      if (*(void *)(v9 + 64) == a2)
      {
        if ((*(unsigned int (**)(void))(*(void *)*v5 + 104))(*v5))
        {
          uint64_t result = *v5;
          if (*(void *)(*v5 + 56) == a3) {
            break;
          }
        }
      }
    }
    v5 += 2;
    if (v5 == v6) {
      return 0;
    }
  }
  return result;
}

double TI::CP::Search::top_score(TI::CP::Search *this)
{
  uint64_t v1 = *((void *)this + 42);
  if (*((void *)this + 41) == v1) {
    return -INFINITY;
  }
  else {
    return *(double *)(**(void **)(v1 - 24) + 72);
  }
}

double TI::CP::Search::path_deviation_cost(TI::CP::Search *this, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v8 = *((void *)this + 7);
  uint64_t v9 = (double *)(v8 + 48 * a2);
  uint64_t v10 = (double *)(v8 + 48 * a3);
  double v11 = v10[4] - v9[4];
  long double v12 = hypot(*v10 - *v9, v10[1] - v9[1]);
  double v13 = pow((v11 - v12) * *((double *)this + 40), *((long double *)this + 56));
  double v14 = *((double *)this + 57);
  return *((double *)this + 54)
       * (-(*((double *)this + 66)
          * (double)TI::CP::Search::skipped_inflection_point_count(this, a2, a3, a4))
        - v13 * v14);
}

unint64_t TI::CP::Search::skipped_inflection_point_count(TI::CP::Search *this, int a2, unsigned int a3, int a4)
{
  if (a2 + 2 > a3)
  {
    unint64_t v7 = 0;
    if (!a4) {
      return v7;
    }
    return TI::CP::Path::inflection_point_count((TI::CP::Search *)((char *)this + 56), a3, a3)
         + v7;
  }
  unint64_t v7 = TI::CP::Path::inflection_point_count((TI::CP::Search *)((char *)this + 56), a2 + 1, a3 - 1);
  if (a4) {
    return TI::CP::Path::inflection_point_count((TI::CP::Search *)((char *)this + 56), a3, a3)
  }
         + v7;
  return v7;
}

double TI::CP::Search::extended_path_deviation_cost(TI::CP::Search *this, unsigned int a2, unsigned int a3, CGPoint a4)
{
  double y = a4.y;
  double x = a4.x;
  uint64_t v9 = *((void *)this + 7);
  uint64_t v10 = (double *)(v9 + 48 * a3);
  double v11 = (double *)(v9 + 48 * a2);
  double v12 = v10[4] - v11[4];
  long double v13 = v12 + hypot(a4.x - *v10, a4.y - v10[1]);
  long double v14 = hypot(x - *v11, y - v11[1]);
  double v15 = pow((v13 - v14) * *((double *)this + 40), *((long double *)this + 56));
  double v16 = *((double *)this + 57);
  return *((double *)this + 54)
       * (-(*((double *)this + 66)
          * (double)TI::CP::Search::skipped_inflection_point_count(this, a2, a3, 1))
        - v15 * v16);
}

double TI::CP::Search::key_deviation_weight(TI::CP::Search *this, unsigned int a2)
{
  if (a2)
  {
    int v3 = TI::CP::Path::inflection_point_count((TI::CP::Search *)((char *)this + 56), a2, a2);
    uint64_t v4 = (char *)this + 472;
    if (v3) {
      uint64_t v4 = (char *)this + 488;
    }
  }
  else
  {
    uint64_t v4 = (char *)this + 480;
  }
  return *(double *)v4;
}

double TI::CP::Search::skipped_key_cost(TI::CP::Search *this, unsigned int a2)
{
  double v3 = *((double *)this + 63);
  if (a2)
  {
    int v4 = TI::CP::Path::inflection_point_count((TI::CP::Search *)((char *)this + 56), a2, a2);
    uint64_t v5 = (double *)((char *)this + 472);
    if (v4) {
      uint64_t v5 = (double *)((char *)this + 488);
    }
  }
  else
  {
    uint64_t v5 = (double *)((char *)this + 480);
  }
  return -(v3 * *v5) * *((double *)this + 54);
}

double TI::CP::Search::overshoot_cost(TI::CP::Search *this, unsigned int a2, unsigned int a3)
{
  double v6 = pow((*(double *)(*((void *)this + 7) + 48 * a3 + 32) - *(double *)(*((void *)this + 7) + 48 * a2 + 32))* *((double *)this + 40), *((long double *)this + 64));
  double v7 = *((double *)this + 65);
  return *((double *)this + 54)
       * (-(*((double *)this + 66)
          * (double)TI::CP::Search::skipped_inflection_point_count(this, a2, a3, 1))
        - v6 * v7);
}

void TI::CP::Search::loop_cost(TI::CP::Search *this, unsigned int a2, unsigned int a3)
{
  double v3 = *((double *)this + 39);
  double v4 = *((double *)this + 67) * v3;
  uint64_t v5 = *((void *)this + 7);
  double v6 = *(double *)(v5 + 48 * a3 + 32) - *(double *)(v5 + 48 * a2 + 32);
  double v7 = v3 * *((double *)this + 68);
  if (v6 >= v4 && v6 <= v7) {
    hypot(*(double *)(v5 + 48 * a3) - *(double *)(v5 + 48 * a2), *(double *)(v5 + 48 * a3 + 8) - *(double *)(v5 + 48 * a2 + 8));
  }
}

double TI::CP::Search::language_cost(uint64_t a1, uint64_t a2)
{
  float v3 = (*(float (**)(uint64_t))(*(void *)a2 + 24))(a2);
  return *(double *)(a1 + 440) * logf(v3);
}

double TI::CP::Search::language_termination_cost(uint64_t a1, uint64_t a2)
{
  float v3 = (*(float (**)(uint64_t))(*(void *)a2 + 80))(a2);
  return *(double *)(a1 + 440) * logf(v3);
}

double TI::CP::Search::language_extension_cost(uint64_t a1, uint64_t a2)
{
  float v3 = (*(float (**)(uint64_t))(*(void *)a2 + 80))(a2);
  return *(double *)(a1 + 440) * logf(1.0 - v3);
}

double TI::CP::Search::transposition_cost(TI::CP::Search *this)
{
  return -(*((double *)this + 70) * *((double *)this + 54));
}

double TI::CP::Search::key_prediction_cost(TI::CP::Search *this, int a2)
{
  uint64_t v2 = 584;
  if (!a2) {
    uint64_t v2 = 576;
  }
  return -(*(double *)((char *)this + v2) * *((double *)this + 54));
}

void TI::CP::Search::append_debug_data_for_sample(uint64_t a1, __CFString *a2, uint64_t a3, TI::CP::SearchNode ***a4, int a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (TI::CP::Path *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 56);
  double v11 = (CGFloat *)(v9 + 48 * a3);
  double v12 = *v11;
  double v13 = v11[1];
  double v14 = v11[2] - *(double *)(v9 + 16);
  v34.double x = *v11;
  v34.double y = v13;
  TI::Favonius::KeyboardLayout::find_nearest_key(*(atomic_uint **)(a1 + 8), v34, (atomic_uint **)&__p);
  double v15 = (double *)__p;
  int v16 = TI::CP::Path::inflection_point_count(v10, a3, a3);
  double v17 = v12 - v15[12];
  double v18 = v13 - v15[13];
  LODWORD(__p) = 0x100000;
  WORD2(__p) = 0;
  BYTE6(__p) = 0;
  int v30 = 0;
  char v31 = 0;
  TI::Favonius::Key::append_debug_data((TI::Favonius::Key *)v15, (KB::String *)&__p);
  unint64_t v20 = (const char *)v30;
  if (!v30) {
    unint64_t v20 = &v31;
  }
  if ((_WORD)__p) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = "";
  }
  unsigned int v22 = "true";
  if (v16) {
    uint64_t v23 = "true";
  }
  else {
    uint64_t v23 = "false";
  }
  if (!a5) {
    unsigned int v22 = "false";
  }
  KB::append_format(a2, (__CFString *)"search %u @ (%.2f, %.2f) = '%s' + (%.2f, %.2f), t = %.2f, inflection_point = %s, final = %s:\n", v19, a3, *(void *)&v12, *(void *)&v13, v21, *(void *)&v17, *(void *)&v18, *(void *)&v14, v23, v22);
  if (v30 && BYTE6(__p) == 1) {
    free(v30);
  }
  uint64_t v24 = *a4;
  uint64_t v25 = a4[1];
  if (*a4 == v25) {
    goto LABEL_22;
  }
  do
  {
    (*(void (**)(void **__return_ptr))(*(void *)*v24 + 64))(&__p);
    if (v32 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    double v27 = TI::CP::SearchNode::score_at_sample_index(*v24, a3);
    KB::append_format(a2, (__CFString *)"    %s (s=%g here)\n", v28, p_p, *(void *)&v27);
    if (v32 < 0) {
      operator delete(__p);
    }
    v24 += 2;
  }
  while (v24 != v25);
  if (v15) {
LABEL_22:
  }
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v15);
}

void TI::CP::Search::append_debug_data(TI::CP::Search *this, __CFString *a2, const char *a3)
{
  KB::append_format(a2, (__CFString *)"CONTINUOUS PATH SEARCH STATE:\n", a3);
  uint64_t v5 = *((void *)this + 8) - *((void *)this + 7);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 4);
    do
    {
      unint64_t v8 = (v6 + 1);
      int v9 = v7 > v8 && *((unsigned char *)this + 152) != 0;
      TI::CP::Search::append_debug_data_for_sample((uint64_t)this, a2, v6, (TI::CP::SearchNode ***)(*((void *)this + 41) + 24 * v8), v9);
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 4);
      uint64_t v6 = v8;
    }
    while (v7 > v8);
  }
}

void KB::TypologyLogger::log_candidates(CFMutableStringRef *a1, uint64_t a2, unsigned int a3, uint64_t a4, KB::Candidate **a5, const __CFString *a6, KB::Candidate **a7, CFStringRef *a8)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v29 = 0x100000;
  __int16 v30 = 0;
  char v31 = 0;
  char v32 = 0;
  char v33 = 0;
  double v13 = *(const char **)(a2 + 8);
  if (!v13) {
    double v13 = (const char *)(a2 + 16);
  }
  if (*(_WORD *)a2) {
    double v14 = v13;
  }
  else {
    double v14 = "";
  }
  if (a3 > 5) {
    double v15 = "Unknown";
  }
  else {
    double v15 = off_1E6E2D7E8[a3];
  }
  int v16 = *(const char **)(a4 + 8);
  if (!v16) {
    int v16 = (const char *)(a4 + 16);
  }
  if (*(_WORD *)a4) {
    double v17 = v16;
  }
  else {
    double v17 = "";
  }
  KB::String::append_format((KB::String *)&v29, "Typed String: \"%s\"  Lookup Type: %s  State Description: \"%s\"\n", v14, v15, v17);
  double v18 = (const char *)v32;
  if (!v32) {
    double v18 = &v33;
  }
  if ((_WORD)v29) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = "";
  }
  CFStringAppendCString(a1[1], v19, 0x8000100u);
  KB::TypologyLogger::build_debug_candidate(a1, a5, "Raw Candidates", 1);
  if (a6)
  {
    CFStringAppend(a1[1], @"\n");
    CFStringAppend(a1[1], a6);
  }
  KB::TypologyLogger::build_debug_candidate(a1, a7, "Candidates", 0);
  if (*a8)
  {
    CFStringAppend(a1[1], @"\n");
    CFStringAppend(a1[1], *a8);
  }
  unint64_t v20 = *a5;
  unsigned int v21 = a5[1];
  if (*a5 != v21)
  {
    do
    {
      if (*((char *)v20 + 943) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)v20 + 115), *((void *)v20 + 116));
      }
      else
      {
        long long v22 = *(_OWORD *)((char *)v20 + 920);
        v28.__r_.__value_.__r.__words[2] = *((void *)v20 + 117);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v22;
      }
      std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      char v24 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        CFStringAppend(a1[1], @"-------------------------------\n");
        CFStringAppend(a1[1], @"Raw candidate tracelogs from LM\n");
        CFStringAppend(a1[1], @"\n");
        uint64_t v25 = a1[1];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v26 = &v28;
        }
        else {
          unint64_t v26 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        CFStringRef v27 = CFStringCreateWithCString(0, (const char *)v26, 0x8000100u);
        CFStringAppend(v25, v27);
        CFStringAppend(a1[1], @"\n");
        CFStringAppend(a1[1], @"-------------------------------\n");
        char v24 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      if (v24 < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      unint64_t v20 = (KB::Candidate *)((char *)v20 + 1000);
    }
    while (v20 != v21);
  }
  if (v32)
  {
    if (v31 == 1) {
      free(v32);
    }
  }
}

void KB::TypologyLogger::build_debug_candidate(CFMutableStringRef *this, KB::Candidate **a2, const char *a3, int a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*a2 != a2[1])
  {
    CFStringAppendFormat(this[1], 0, @"\n%s\n", a3);
    unint64_t v7 = *a2;
    for (i = a2[1]; v7 != i; unint64_t v7 = (KB::Candidate *)((char *)v7 + 1000))
    {
      int v9 = this[1];
      int v11 = 0x100000;
      __int16 v12 = 0;
      char v13 = 0;
      double v14 = 0;
      char v15 = 0;
      KB::Candidate::append_debug_data(v7, v9, a4, (const KB::String *)&v11);
      if (v14) {
        BOOL v10 = v13 == 1;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        free(v14);
      }
    }
  }
}

void KB::TypologyLogger::log_autocorrection_engine_state(KB::TypologyLogger *this, const TI::Favonius::StrokeBuildManager *a2)
{
  (*(void (**)(const TI::Favonius::StrokeBuildManager *, void))(*(void *)a2 + 256))(a2, *((void *)this + 1));
  float v3 = (__CFString *)*((void *)this + 1);

  CFStringAppend(v3, @"------------------------------\n");
}

void KB::TypologyLogger::~TypologyLogger(KB::TypologyLogger *this)
{
  *(void *)this = &unk_1F3F78E50;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 1) = 0;

  JUMPOUT(0x1E4E7BC20);
}

{
  const void *v2;

  *(void *)this = &unk_1F3F78E50;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 1) = 0;
}

{
  const void *v2;

  *(void *)this = &unk_1F3F78E50;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 1) = 0;
}

KB::TypologyLogger *KB::TypologyLogger::TypologyLogger(KB::TypologyLogger *this)
{
  *(void *)this = &unk_1F3F78E50;
  *((void *)this + 1) = CFStringCreateMutable(0, 0);
  return this;
}

{
  *(void *)this = &unk_1F3F78E50;
  *((void *)this + 1) = CFStringCreateMutable(0, 0);
  return this;
}

const char *KB::TypologyLogger::description_for_lookup_type(uint64_t a1, unsigned int a2)
{
  if (a2 > 5) {
    return "Unknown";
  }
  else {
    return off_1E6E2D7E8[a2];
  }
}

void KB::TypologyLogger::log_string(CFMutableStringRef *this, const __CFString *a2)
{
  if (a2) {
    CFStringAppend(this[1], a2);
  }
}

void KB::TypologyLogger::clear(KB::TypologyLogger *this)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  float v3 = (const void *)*((void *)this + 1);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 1) = Mutable;
}

void *__getSBSSetTypingActiveSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_18709)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = __SpringBoardServicesLibraryCore_block_invoke_18710;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E6E2D858;
    uint64_t v7 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrary_18709 = _sl_dlopen();
    float v3 = (void *)v5[0];
    uint64_t v2 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_18709;
    if (SpringBoardServicesLibraryCore_frameworkLibrary_18709)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      float v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_18709;
LABEL_5:
  uint64_t result = dlsym(v2, "SBSSetTypingActive");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSSetTypingActiveSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_18710()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrary_18709 = result;
  return result;
}

Class __getPSPointerClientControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!PointerUIServicesLibraryCore_frameworkLibrary)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = __PointerUIServicesLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E6E2D840;
    uint64_t v6 = 0;
    PointerUIServicesLibraryCore_frameworkLibrardouble y = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!PointerUIServicesLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("PSPointerClientController");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getPSPointerClientControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PointerUIServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PointerUIServicesLibraryCore_frameworkLibrardouble y = result;
  return result;
}

void __TIGetKeyboardCompletionsShouldSharePrefixValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"KeyboardCompletionsShouldSharePrefix" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

void __TIGetKeyboardMaxWordsPerPredictionValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"KeyboardMaxWordsPerPrediction" domain:@"com.apple.keyboard" defaultValue:&unk_1F3FA7CE8];
}

void __TIGetKeyboardWordNgramModelAdaptationValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"KeyboardWordNgramModelAdaptation" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

void __TIGetKeyboardWordNgramModelValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"KeyboardWordNgramModel" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

void __TIGetKeyboardRetrocorrectionDisabledValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"KeyboardRetrocorrectionDisabled" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

uint64_t __Block_byref_object_copy__19141(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19142(uint64_t a1)
{
}

id TILanguageModelScheduleMaintenance()
{
  if ([MEMORY[0x1E4F29060] isMainThread]) {
    return +[TILanguageModelMaintainer sharedLanguageModelMaintainer];
  }

  return (id)TIDispatchAsync();
}

id __TILanguageModelScheduleMaintenance_block_invoke()
{
  return +[TILanguageModelMaintainer sharedLanguageModelMaintainer];
}

void KB::CompositeCandidateFilter::filter_candidates(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  double v4 = *(uint64_t **)(a1 + 8);
  for (uint64_t i = *(uint64_t **)(a1 + 16); v4 != i; v4 += 2)
  {
    uint64_t v9 = *v4;
    BOOL v10 = (std::__shared_weak_count *)v4[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v9 && (*a2 != a2[1] || a2[6] != a2[7] || a2[9] != a2[10])) {
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2, a3, a4);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v10);
    }
  }
}

const char *KB::CompositeCandidateFilter::filter_description(KB::CompositeCandidateFilter *this)
{
  return "CompositeCandidateFilter";
}

void KB::CompositeCandidateFilter::~CompositeCandidateFilter(KB::CompositeCandidateFilter *this)
{
  *(void *)this = &unk_1F3F78FE0;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<KB::LanguageModel>>::__destroy_vector::operator()[abi:nn180100](&v1);

  JUMPOUT(0x1E4E7BC20);
}

{
  void **v1;

  *(void *)this = &unk_1F3F78FE0;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<KB::LanguageModel>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 KB::CompositeCandidateFilter::CompositeCandidateFilter(void *a1, __n128 *a2)
{
  *a1 = &unk_1F3F78FE0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 1) = *a2;
  a1[3] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *a1 = &unk_1F3F78FE0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 1) = *a2;
  a1[3] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

id getSRKeyboardProbabilityMetricClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getSRKeyboardProbabilityMetricClass_softClass;
  uint64_t v7 = getSRKeyboardProbabilityMetricClass_softClass;
  if (!getSRKeyboardProbabilityMetricClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSRKeyboardProbabilityMetricClass_block_invoke;
    v3[3] = &unk_1E6E2E248;
    v3[4] = &v4;
    __getSRKeyboardProbabilityMetricClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

Class __getSRKeyboardProbabilityMetricClass_block_invoke(uint64_t a1)
{
  SensorKitLibrary_19465();
  Class result = objc_getClass("SRKeyboardProbabilityMetric");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSRKeyboardProbabilityMetricClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    return (Class)SensorKitLibrary_19465();
  }
  return result;
}

uint64_t SensorKitLibrary_19465()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SensorKitLibraryCore_frameworkLibrary_19468)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = __SensorKitLibraryCore_block_invoke_19469;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E6E2DA18;
    uint64_t v5 = 0;
    SensorKitLibraryCore_frameworkLibrary_19468 = _sl_dlopen();
    id v1 = (void *)v3[0];
    uint64_t v0 = SensorKitLibraryCore_frameworkLibrary_19468;
    if (SensorKitLibraryCore_frameworkLibrary_19468)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      id v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return SensorKitLibraryCore_frameworkLibrary_19468;
}

uint64_t __SensorKitLibraryCore_block_invoke_19469()
{
  uint64_t result = _sl_dlopen();
  SensorKitLibraryCore_frameworkLibrary_19468 = result;
  return result;
}

void *__getSRKeyboardMetaInformationIdentifierKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary_19465();
  uint64_t result = dlsym(v2, "SRKeyboardMetaInformationIdentifierKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetaInformationIdentifierKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetaInformationVersionKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary_19465();
  uint64_t result = dlsym(v2, "SRKeyboardMetaInformationVersionKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetaInformationVersionKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetaInformationWidthKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary_19465();
  uint64_t result = dlsym(v2, "SRKeyboardMetaInformationWidthKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetaInformationWidthKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetaInformationHeightKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary_19465();
  uint64_t result = dlsym(v2, "SRKeyboardMetaInformationHeightKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetaInformationHeightKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetaInformationInputModesKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary_19465();
  uint64_t result = dlsym(v2, "SRKeyboardMetaInformationInputModesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetaInformationInputModesKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSRKeyboardMetaInformationSessionIdentifiersKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SensorKitLibrary_19465();
  uint64_t result = dlsym(v2, "SRKeyboardMetaInformationSessionIdentifiersKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSRKeyboardMetaInformationSessionIdentifiersKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 24);
  return result;
}

Class __getSRKeyboardMetricsClass_block_invoke(uint64_t a1)
{
  SensorKitLibrary_19465();
  Class result = objc_getClass("SRKeyboardMetrics");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSRKeyboardMetricsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    float v3 = (TISKSessionStats *)abort_report_np();
    return (Class)[(TISKSessionStats *)v3 _roundedSessionInterval];
  }
  return result;
}

KB::StaticDictionaryCursor *KB::StaticDictionaryCursor::StaticDictionaryCursor(KB::StaticDictionaryCursor *this, const KB::StaticDictionary *a2)
{
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 0;
  KB::StaticDictionaryCursor::reset(this, a2);
  return this;
}

{
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 0;
  KB::StaticDictionaryCursor::reset(this, a2);
  return this;
}

void KB::StaticDictionaryCursor::reset(KB::StaticDictionaryCursor *this, const KB::StaticDictionary *a2)
{
  uint64_t v3 = *((void *)a2 + 1) - *(void *)a2;
  *((void *)this + 5) = v3 >> 3;
  if (v3)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t RootCursor = LXLexiconCreateRootCursor();
      uint64_t v7 = (const void *)*((void *)this + v5);
      if (v7) {
        CFRelease(v7);
      }
      *((void *)this + v5) = RootCursor;
      *((_DWORD *)this + v5 + 6) = *(_DWORD *)(*((void *)a2 + 3) + 4 * v5);
      ++v5;
    }
    while (v5 < *((void *)this + 5));
  }
  *((_DWORD *)this + 12) = 0;
}

float KB::StaticDictionaryCursor::conditional_probability(KB::StaticDictionaryCursor *this)
{
  unint64_t v1 = *((void *)this + 5);
  if (!v1) {
    return 0.0;
  }
  unint64_t v3 = 0;
  float v4 = 0.0;
  do
  {
    if (*((void *)this + v3))
    {
      LXCursorConditionalProbability();
      *(float *)&double v5 = v5;
      float v4 = v4 + (float)(*((float *)this + v3 + 6) * __exp10f(*(float *)&v5));
      unint64_t v1 = *((void *)this + 5);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

float KB::StaticDictionaryCursor::termination_probability(KB::StaticDictionaryCursor *this)
{
  unint64_t v1 = *((void *)this + 5);
  if (!v1) {
    return 0.0;
  }
  unint64_t v3 = 0;
  float v4 = 0.0;
  do
  {
    if (*((void *)this + v3))
    {
      LXCursorTerminationProbability();
      *(float *)&double v5 = v5;
      float v6 = __exp10f(*(float *)&v5);
      float v4 = v4 + (float)(KB::StaticDictionaryCursor::probability_of_lexicon(this, v3) * v6);
      unint64_t v1 = *((void *)this + 5);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

float KB::StaticDictionaryCursor::probability_of_lexicon(KB::StaticDictionaryCursor *this, uint64_t a2)
{
  unint64_t v3 = (float *)((char *)this + 4 * a2);
  float v5 = v3[6];
  float v4 = v3 + 6;
  float v6 = v5;
  if (!LXCursorIsRoot())
  {
    float v7 = KB::StaticDictionaryCursor::conditional_probability(this);
    if (v7 > 0.0)
    {
      float v8 = v7;
      LXCursorConditionalProbability();
      *(float *)&double v9 = v9;
      return (float)(__exp10f(*(float *)&v9) * *v4) / v8;
    }
  }
  return v6;
}

float KB::StaticDictionaryCursor::probability_of_lexicon_given_termination(KB::StaticDictionaryCursor *this, uint64_t a2)
{
  float v4 = KB::StaticDictionaryCursor::termination_probability(this);
  float v5 = KB::StaticDictionaryCursor::probability_of_lexicon(this, a2);
  if (v4 > 0.0)
  {
    LXCursorTerminationProbability();
    *(float *)&double v6 = v6;
    return (float)(v5 * __exp10f(*(float *)&v6)) / v4;
  }
  return v5;
}

BOOL KB::StaticDictionaryCursor::is_root(KB::StaticDictionaryCursor *this)
{
  return LXCursorIsRoot() != 0;
}

float KB::StaticDictionaryCursor::advance(KB::StaticDictionaryCursor *this, const KB::String *a2)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790]();
  float v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
  {
    unint64_t v7 = 0;
    do
    {
      *(float *)&v5[4 * v7] = KB::StaticDictionaryCursor::probability_of_lexicon(this, v7);
      ++v7;
      unint64_t v8 = *((void *)this + 5);
    }
    while (v7 < v8);
    if (v8)
    {
      memcpy((char *)this + 24, v5, 4 * v8);
      if (*((void *)this + 5))
      {
        unint64_t v9 = 0;
        do
        {
          if (*((void *)this + v9))
          {
            uint64_t v10 = LXCursorCreateByAdvancingWithUTF8();
            int v11 = (const void *)*((void *)this + v9);
            if (v11) {
              CFRelease(v11);
            }
          }
          else
          {
            uint64_t v10 = 0;
          }
          *((void *)this + v9++) = v10;
        }
        while (v9 < *((void *)this + 5));
      }
    }
  }
  *((_DWORD *)this + 12) = KB::String::last(a2);

  return KB::StaticDictionaryCursor::conditional_probability(this);
}

float KB::StaticDictionaryCursor::advance(KB::StaticDictionaryCursor *this, unsigned int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  KB::String::String((uint64_t)v6, a2);
  float v3 = KB::StaticDictionaryCursor::advance(this, (const KB::String *)v6);
  if (v7) {
    BOOL v4 = v6[6] == 1;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    free(v7);
  }
  return v3;
}

void KB::StaticDictionaryCursor::children(KB::StaticDictionaryCursor *this@<X0>, void *a2@<X8>)
{
  uint64_t v14 = 0;
  char v15 = &v14;
  uint64_t v16 = 0x4002000000;
  double v17 = __Block_byref_object_copy__19739;
  double v18 = __Block_byref_object_dispose__19740;
  memset(v19, 0, sizeof(v19));
  if (*((void *)this + 5))
  {
    unsigned int v4 = 1;
    do
      LXCursorEnumerateChildren();
    while (*((void *)this + 5) > (unint64_t)v4++);
    uint64_t v6 = v15[5];
    uint64_t v7 = v15[6];
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    if (v7 != v6)
    {
      unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3);
      if (v8 >= 0x492492492492493) {
        abort();
      }
      unint64_t v9 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::LanguageModelLexiconGroup>>(v8);
      *a2 = v9;
      a2[2] = &v9[56 * v10];
      do
      {
        for (uint64_t i = 0; i != 24; i += 8)
        {
          __int16 v12 = *(const void **)(v6 + i);
          *(void *)&v9[i] = v12;
          if (v12)
          {
            CFRetain(v12);
            *(void *)&v9[i] = v12;
          }
        }
        long long v13 = *(_OWORD *)(v6 + 24);
        *(_OWORD *)(v9 + 36) = *(_OWORD *)(v6 + 36);
        *(_OWORD *)(v9 + 24) = v13;
        v6 += 56;
        v9 += 56;
      }
      while (v6 != v7);
      a2[1] = v9;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  _Block_object_dispose(&v14, 8);
  unint64_t v20 = (void **)v19;
  std::vector<KB::StaticDictionaryCursor>::__destroy_vector::operator()[abi:nn180100](&v20);
}

__n128 __Block_byref_object_copy__19739(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__19740(uint64_t a1)
{
  unint64_t v1 = (void **)(a1 + 40);
  std::vector<KB::StaticDictionaryCursor>::__destroy_vector::operator()[abi:nn180100](&v1);
}

const void **___ZNK2KB22StaticDictionaryCursor8childrenEv_block_invoke(uint64_t a1, const void *a2)
{
  uint64_t v3 = a1;
  unsigned int v4 = *(unsigned int **)(a1 + 40);
  unsigned int TraversedCharacter = LXCursorLastTraversedCharacter();
  uint64_t v6 = *(void *)(*(void *)(v3 + 32) + 8);
  unint64_t v9 = *(void *)(v6 + 40);
  unint64_t v8 = *(void *)(v6 + 48);
  uint64_t v7 = (unint64_t *)(v6 + 40);
  v74[0] = MEMORY[0x1E4F143A8];
  v74[1] = 0x40000000;
  uint64_t v75 = ___ZNK2KB22StaticDictionaryCursor8childrenEv_block_invoke_2;
  long long v76 = &__block_descriptor_tmp_19743;
  unsigned int v77 = TraversedCharacter;
  if (v9 == v8) {
    goto LABEL_7;
  }
  while ((((uint64_t (*)(void *, unint64_t))v75)(v74, v9) & 1) == 0)
  {
    v9 += 56;
    if (v9 == v8)
    {
      unint64_t v9 = v8;
      break;
    }
  }
  uint64_t v10 = *(void *)(*(void *)(v3 + 32) + 8);
  uint64_t v7 = (unint64_t *)(v10 + 40);
  if (v9 == *(void *)(v10 + 48) || TraversedCharacter < *(_DWORD *)(v9 + 48))
  {
LABEL_7:
    unsigned int v71 = TraversedCharacter;
    unint64_t v12 = *v7;
    unint64_t v11 = v7[1];
    uint64_t v13 = v9 - *v7;
    uint64_t v14 = 0x6DB6DB6DB6DB6DB7 * (v13 >> 3);
    uint64_t v72 = v3;
    unint64_t v73 = v7;
    uint64_t v16 = v7 + 2;
    unint64_t v15 = v7[2];
    if (v11 >= v15)
    {
      unint64_t v33 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) + 1;
      if (v33 > 0x492492492492492) {
        abort();
      }
      unint64_t v34 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - v12) >> 3);
      if (2 * v34 > v33) {
        unint64_t v33 = 2 * v34;
      }
      if (v34 >= 0x249249249249249) {
        unint64_t v35 = 0x492492492492492;
      }
      else {
        unint64_t v35 = v33;
      }
      uint64_t v80 = v7 + 2;
      if (v35) {
        unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::LanguageModelLexiconGroup>>(v35);
      }
      else {
        uint64_t v36 = 0;
      }
      unint64_t v32 = v35 + 8 * (v13 >> 3);
      *(void *)&long long v78 = v35;
      *((void *)&v78 + 1) = v32;
      *(void *)&long long v79 = v32;
      *((void *)&v79 + 1) = v35 + 56 * v36;
      unint64_t v39 = v32;
      if (v14 == v36)
      {
        if (v13 < 1)
        {
          if (v9 == v12) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = 0xDB6DB6DB6DB6DB6ELL * (v13 >> 3);
          }
          unint64_t v42 = v41 >> 2;
          *(void *)&v81[32] = v16;
          *(void *)v81 = std::__allocate_at_least[abi:nn180100]<std::allocator<KB::LanguageModelLexiconGroup>>(v41);
          *(void *)&v81[8] = *(void *)v81 + 56 * v42;
          *(void *)&v81[16] = *(void *)&v81[8];
          *(void *)&v81[24] = *(void *)v81 + 56 * v43;
          long long v44 = v78;
          long long v45 = v79;
          unint64_t v67 = *(void *)&v81[8];
          unint64_t v70 = *(void *)&v81[8];
          long long v78 = *(_OWORD *)v81;
          long long v79 = *(_OWORD *)&v81[16];
          *(_OWORD *)v81 = v44;
          *(_OWORD *)&v81[16] = v45;
          std::__split_buffer<KB::StaticDictionaryCursor>::~__split_buffer((uint64_t)v81);
          unint64_t v39 = v67;
          unint64_t v32 = v70;
        }
        else
        {
          uint64_t v40 = v14 + 2;
          if (v14 >= -1) {
            uint64_t v40 = v14 + 1;
          }
          v32 -= 56 * (v40 >> 1);
          unint64_t v39 = v32;
        }
      }
      uint64_t v46 = v4[10];
      *(_DWORD *)(v39 + 32) = 0;
      *(_OWORD *)unint64_t v39 = 0u;
      *(_OWORD *)(v39 + 16) = 0u;
      *(void *)(v39 + 40) = v46;
      *(_DWORD *)(v39 + 48) = 0;
      unint64_t v47 = v39 + 56;
      *(void *)&long long v79 = v39 + 56;
      uint64_t v48 = v73;
      unint64_t v49 = *v73;
      if (v9 == *v73)
      {
        unint64_t v52 = v32;
      }
      else
      {
        uint64_t v69 = a2;
        unint64_t v50 = v9;
        unint64_t v51 = v32;
        do
        {
          unint64_t v52 = v51 - 56;
          unint64_t v53 = v50 - 56;
          for (uint64_t i = -56; i != -32; i += 8)
          {
            unint64_t v55 = *(const void **)(v50 + i);
            *(void *)(v51 + i) = v55;
            if (v55)
            {
              CFRetain(v55);
              *(void *)(v51 + i) = v55;
            }
          }
          long long v56 = *(_OWORD *)(v50 - 32);
          *(_OWORD *)(v51 - 20) = *(_OWORD *)(v50 - 20);
          *(_OWORD *)(v51 - 32) = v56;
          v50 -= 56;
          v51 -= 56;
        }
        while (v53 != v49);
        unint64_t v47 = v79;
        a2 = v69;
        uint64_t v48 = v73;
      }
      *((void *)&v78 + 1) = v52;
      unint64_t v57 = v48[1];
      if (v9 != v57)
      {
        do
        {
          for (uint64_t j = 0; j != 24; j += 8)
          {
            uint64_t v59 = *(const void **)(v9 + j);
            *(void *)(v47 + j) = v59;
            if (v59)
            {
              CFRetain(v59);
              *(void *)(v47 + j) = v59;
            }
          }
          long long v60 = *(_OWORD *)(v9 + 24);
          *(_OWORD *)(v47 + 36) = *(_OWORD *)(v9 + 36);
          *(_OWORD *)(v47 + 24) = v60;
          v9 += 56;
          v47 += 56;
        }
        while (v9 != v57);
        unint64_t v52 = *((void *)&v78 + 1);
        unint64_t v9 = v48[1];
      }
      unint64_t v61 = *v48;
      *uint64_t v48 = v52;
      v48[1] = v47;
      unint64_t v62 = v48[2];
      v48[2] = *((void *)&v79 + 1);
      *(void *)&long long v79 = v9;
      *((void *)&v79 + 1) = v62;
      *(void *)&long long v78 = v61;
      *((void *)&v78 + 1) = v61;
      std::__split_buffer<KB::StaticDictionaryCursor>::~__split_buffer((uint64_t)&v78);
    }
    else
    {
      if (v9 != v11)
      {
        uint64_t v68 = a2;
        uint64_t v82 = v7 + 2;
        uint64_t v17 = v4[10];
        memset(v81, 0, 36);
        *(void *)&v81[40] = v17;
        *(_DWORD *)&v81[48] = 0;
        unint64_t v18 = v11 - 56;
        unint64_t v19 = v11;
        if (v11 >= 0x38)
        {
          unint64_t v20 = v11 - 56;
          unint64_t v19 = v11;
          do
          {
            for (uint64_t k = 0; k != 24; k += 8)
            {
              long long v22 = *(const void **)(v20 + k);
              *(void *)(v19 + k) = v22;
              if (v22)
              {
                CFRetain(v22);
                *(void *)(v19 + k) = v22;
              }
            }
            long long v23 = *(_OWORD *)(v20 + 24);
            *(_OWORD *)(v19 + 36) = *(_OWORD *)(v20 + 36);
            *(_OWORD *)(v19 + 24) = v23;
            v20 += 56;
            v19 += 56;
          }
          while (v20 < v11);
        }
        v73[1] = v19;
        if (v11 != v9 + 56)
        {
          do
          {
            uint64_t v24 = 0;
            unint64_t v25 = v18 - 56;
            do
            {
              KB::retain_ptr<__CFDictionary const*>::operator=((const void **)(v11 + v24 - 56), *(CFTypeRef *)(v18 + v24 - 56));
              v24 += 8;
            }
            while (v24 != 24);
            long long v26 = *(_OWORD *)(v18 - 32);
            *(_OWORD *)(v11 - 20) = *(_OWORD *)(v18 - 20);
            *(_OWORD *)(v11 - 32) = v26;
            v11 -= 56;
            v18 -= 56;
          }
          while (v25 != v9);
        }
        for (uint64_t m = 0; m != 24; m += 8)
          KB::retain_ptr<__CFDictionary const*>::operator=((const void **)(v9 + m), *(CFTypeRef *)&v81[m]);
        unint64_t v28 = v12 + 56 * v14;
        *(_OWORD *)(v28 + 24) = *(_OWORD *)&v81[24];
        *(_OWORD *)(v28 + 36) = *(_OWORD *)&v81[36];
        uint64_t v29 = 16;
        a2 = v68;
        unsigned int v30 = v71;
        do
        {
          char v31 = *(const void **)&v81[v29];
          if (v31) {
            CFRelease(v31);
          }
          *(void *)&v81[v29] = 0;
          v29 -= 8;
        }
        while (v29 != -8);
        unint64_t v32 = v9;
        goto LABEL_64;
      }
      uint64_t v37 = v4[10];
      unint64_t v38 = v12 + 8 * (v13 >> 3);
      *(_DWORD *)(v9 + 32) = 0;
      *(_OWORD *)unint64_t v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      *(void *)(v38 + 40) = v37;
      *(_DWORD *)(v38 + 48) = 0;
      v7[1] = v9 + 56;
      unint64_t v32 = v9;
    }
    unsigned int v30 = v71;
LABEL_64:
    *(_DWORD *)(v32 + 48) = v30;
    if (*((void *)v4 + 5))
    {
      uint64_t v63 = 0;
      unsigned int v64 = 1;
      do
      {
        *(float *)(v32 + 4 * v63 + 24) = KB::StaticDictionaryCursor::probability_of_lexicon((KB::StaticDictionaryCursor *)v4, v63);
        uint64_t v63 = v64;
      }
      while (*((void *)v4 + 5) > (unint64_t)v64++);
    }
    unint64_t v9 = v32;
    uint64_t v3 = v72;
  }
  return KB::retain_ptr<__CFDictionary const*>::operator=((const void **)(v9 + 8 * *(unsigned int *)(v3 + 48)), a2);
}

BOOL ___ZNK2KB22StaticDictionaryCursor8childrenEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 32) <= *(_DWORD *)(a2 + 48);
}

uint64_t std::__split_buffer<KB::StaticDictionaryCursor>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = 0;
    *(void *)(a1 + 16) = i - 56;
    uint64_t v5 = i - 40;
    do
    {
      uint64_t v6 = *(const void **)(v5 + v4);
      if (v6) {
        CFRelease(v6);
      }
      *(void *)(v5 + v4) = 0;
      v4 -= 8;
    }
    while (v4 != -24);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL KB::StaticDictionaryCursor::has_children(KB::StaticDictionaryCursor *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = this;
  uint64_t v3 = 8 * v1 - 8;
  do
  {
    uint64_t v2 = (KB::StaticDictionaryCursor *)((char *)v2 + 8);
    int HasChildren = LXCursorHasChildren();
    BOOL result = HasChildren != 0;
    if (HasChildren) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v3 == 0;
    }
    v3 -= 8;
  }
  while (!v6);
  return result;
}

void KB::StaticDictionaryCursor::derive_words(KB::StaticDictionaryCursor *this, uint64_t a2)
{
  if (*((void *)this + 5))
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = 0;
      BOOL v6 = &v5;
      uint64_t v7 = 0x4002000000;
      unint64_t v8 = __Block_byref_object_copy__5;
      unint64_t v9 = __Block_byref_object_dispose__6;
      memset(v10, 0, sizeof(v10));
      KB::StaticDictionaryCursor::probability_of_lexicon_given_termination(this, v4);
      LXCursorEnumerateEntries();
      KB::StaticDictionary::merge_words(a2, v6 + 5);
      _Block_object_dispose(&v5, 8);
      unint64_t v11 = (void **)v10;
      std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](&v11);
      ++v4;
    }
    while (v4 < *((void *)this + 5));
  }
}

__n128 __Block_byref_object_copy__5(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](&v1);
}

uint64_t ___ZNK2KB22StaticDictionaryCursor12derive_wordsERNSt3__16vectorINS_4WordENS1_9allocatorIS3_EEEERKNS_16StaticDictionaryE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t result = std::vector<KB::Word>::emplace_back<_LXEntry const*&,unsigned int const&>((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v6, (int *)(a1 + 40));
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  *(float *)(v4 - 192) = *(float *)(v4 - 192) * *(float *)(a1 + 44);
  *(_DWORD *)(v4 - 136) |= 0x40000u;
  int v5 = *(_DWORD *)(a1 + 40);
  if ((v5 + 1) >= 2 && v5 != *(_DWORD *)(a1 + 48)) {
    *(unsigned char *)(v4 - 48) = 1;
  }
  return result;
}

uint64_t KB::StaticDictionaryCursor::derive_word_ids(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    unint64_t v2 = 0;
    do
    {
      uint64_t result = LXCursorEnumerateEntries();
      ++v2;
    }
    while (v2 < *(void *)(v1 + 40));
  }
  return result;
}

void ___ZNK2KB22StaticDictionaryCursor15derive_word_idsERNSt3__16vectorI9TITokenIDNS1_9allocatorIS3_EEEERKNS_16StaticDictionaryE_block_invoke(void *a1, uint64_t a2)
{
  unint64_t v2 = (void **)a1[4];
  int v3 = *(_DWORD *)(*(void *)(a1[5] + 48) + 4 * a1[6]);
  if (a2)
  {
    int TokenID = LXEntryGetTokenID();
    if (TokenID) {
      int v5 = TokenID;
    }
    else {
      int v5 = 500;
    }
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v7 = v2[1];
  unint64_t v6 = (unint64_t)v2[2];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*v2) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v6 - (void)*v2;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v12);
    uint64_t v14 = &v13[8 * v9];
    uint64_t v16 = &v13[8 * v15];
    *(_DWORD *)uint64_t v14 = v3;
    *((_DWORD *)v14 + 1) = v5;
    unint64_t v8 = v14 + 8;
    unint64_t v18 = (char *)*v2;
    uint64_t v17 = (char *)v2[1];
    if (v17 != *v2)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*v2;
    }
    KB::StaticDictionaryCursor *v2 = v14;
    v2[1] = v8;
    v2[2] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v7 = v3;
    v7[1] = v5;
    unint64_t v8 = v7 + 2;
  }
  v2[1] = v8;
}

BOOL KB::StaticDictionaryCursor::finishes_words(KB::StaticDictionaryCursor *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = this;
  uint64_t v3 = 8 * v1 - 8;
  do
  {
    unint64_t v2 = (KB::StaticDictionaryCursor *)((char *)v2 + 8);
    int HasEntries = LXCursorHasEntries();
    BOOL result = HasEntries != 0;
    if (HasEntries) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v3 == 0;
    }
    v3 -= 8;
  }
  while (!v6);
  return result;
}

BOOL KB::StaticDictionaryCursor::allows_restart(KB::StaticDictionaryCursor *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = this;
  uint64_t v3 = 8 * v1 - 8;
  do
  {
    unint64_t v2 = (KB::StaticDictionaryCursor *)((char *)v2 + 8);
    int v4 = LXCursorTerminatesWordStem();
    BOOL result = v4 != 0;
    if (v4) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v3 == 0;
    }
    v3 -= 8;
  }
  while (!v6);
  return result;
}

uint64_t KB::StaticDictionaryCursor::valid(KB::StaticDictionaryCursor *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 8 * v1;
  while (1)
  {
    uint64_t v3 = *(const void **)this;
    if (*(void *)this) {
      break;
    }
    this = (KB::StaticDictionaryCursor *)((char *)this + 8);
    v2 -= 8;
    if (!v2) {
      return 0;
    }
  }
  CFRetain(*(CFTypeRef *)this);
  CFRelease(v3);
  return 1;
}

void KB::StaticDictionaryCursor::invalidate(KB::StaticDictionaryCursor *this)
{
  unint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = 0;
    unsigned int v4 = 1;
    do
    {
      int v5 = (const void *)*((void *)this + v3);
      if (v5)
      {
        CFRelease(v5);
        unint64_t v2 = *((void *)this + 5);
      }
      *((void *)this + v3) = 0;
      uint64_t v3 = v4;
    }
    while (v2 > v4++);
  }
  *((_DWORD *)this + 12) = 0;
}

TI::Favonius::SearchNodeTranspositionGeometryExtensions *TI::Favonius::SearchNodeTranspositionGeometryExtensions::branch_at_current_bound@<X0>(TI::Favonius::SearchNodeTranspositionGeometryExtensions *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    unsigned int v4 = this;
    uint64_t v5 = v3 - 1;
    BOOL v6 = *(atomic_uint **)(*((void *)this + 6) + 8 * (v3 - 1));
    if (v6)
    {
      atomic_fetch_add(v6, 1u);
      uint64_t v5 = *((void *)this + 5) - 1;
      uint64_t v7 = *(void *)(*((void *)this + 6) + 8 * v5);
      if (v7) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v7);
      }
    }
    *((void *)v4 + 5) = v5;
    TI::Favonius::SearchNodeTranspositionGeometryExtensions::set_bound_on_score_with_first_matched_key(v4);
    unint64_t v8 = (atomic_uint *)*((void *)v4 + 11);
    if (v8)
    {
      uint64_t v9 = *((void *)v4 + 10);
      if (!v9
        || (atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u), (unint64_t v8 = (atomic_uint *)*((void *)v4 + 11)) != 0))
      {
        atomic_fetch_add(v8, 1u);
      }
      uint64_t v10 = *((void *)v4 + 2);
      if (v10) {
        atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
      }
      if (v6)
      {
        atomic_fetch_add(v6, 1u);
        operator new();
      }
      operator new();
    }
    uint64_t v11 = *((void *)v4 + 10);
    if (v11) {
      atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
    }
    if (v6) {
      atomic_fetch_add(v6, 1u);
    }
    uint64_t v12 = *((void *)v4 + 2);
    if (v12) {
      atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
    }
    TI::Favonius::SearchNodeTranspositionGeometryExtensions::create_extension();
  }
  *a2 = 0;
  return this;
}

uint64_t TI::Favonius::SearchNodeTranspositionGeometryExtensions::set_bound_on_score_with_first_matched_key(TI::Favonius::SearchNodeTranspositionGeometryExtensions *this)
{
  uint64_t result = TI::Favonius::SearchNodeTranspositionGeometryExtensions::pop_nonletter_keys((uint64_t)this);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    float v4 = *((float *)this + 18) + *(float *)(*(void *)(*((void *)this + 6) + 8 * v3 - 8) + 32);
  }
  else {
    float v4 = -INFINITY;
  }
  *((float *)this + 6) = v4;
  return result;
}

void TI::Favonius::SearchNodeTranspositionGeometryExtensions::create_extension()
{
}

{
  operator new();
}

uint64_t TI::Favonius::SearchNodeTranspositionGeometryExtensions::SearchNodeTranspositionGeometryExtensions(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char a6, float a7, float a8)
{
  uint64_t v9 = *a5;
  *a5 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(void *)a1 = &unk_1F3F79010;
  *(void *)(a1 + 32) = a2;
  if (a2) {
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v10 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 56) = 0;
  *(float *)(a1 + 64) = a7;
  *(unsigned char *)(a1 + 68) = a6;
  float v11 = (float)(*(float *)(a2 + 144) + (float)(a7 * *(float *)(a2 + 136))) + a8;
  *(float *)(a1 + 72) = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = *a4;
  *a4 = 0;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v13;
  if ((LODWORD(v11) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    *(float *)(a1 + 72) = *(float *)(a1 + 72)
                        + (float)((*(float (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16))
                                + *(float *)(*(void *)(a1 + 88) + 32));
    uint64_t v14 = (unint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
    WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::operator=((unint64_t *)(a1 + 40), v14);
    unint64_t v15 = *(void *)(a1 + 40);
    if (v15 < 5)
    {
      if (v15 < 2)
      {
LABEL_17:
        TI::Favonius::SearchNodeTranspositionGeometryExtensions::set_bound_on_score_with_first_matched_key((TI::Favonius::SearchNodeTranspositionGeometryExtensions *)a1);
        return a1;
      }
    }
    else
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 32);
      uint64_t v17 = 8 * v15 - 32;
      do
      {
        if (*v16) {
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(*v16);
        }
        ++v16;
        v17 -= 8;
      }
      while (v17);
      unint64_t v15 = 4;
      *uint64_t v10 = 4;
    }
    unint64_t v18 = 0;
    uint64_t v19 = -1;
    do
    {
      uint64_t v20 = *(void *)(a1 + 48);
      unint64_t v21 = v15 + v19;
      uint64_t v22 = *(void *)(v20 + 8 * v18);
      *(void *)(v20 + 8 * v18) = 0;
      uint64_t v23 = *(void *)(v20 + 8 * (v15 + v19));
      *(void *)(v20 + 8 * v21) = 0;
      uint64_t v24 = *(void *)(v20 + 8 * v18);
      *(void *)(v20 + 8 * v18) = v23;
      if (v24) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v24);
      }
      uint64_t v25 = *(void *)(v20 + 8 * v21);
      *(void *)(v20 + 8 * v21) = v22;
      if (v25) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v25);
      }
      ++v18;
      unint64_t v15 = *v10;
      --v19;
    }
    while (v18 < *v10 >> 1);
    goto LABEL_17;
  }
  return a1;
}

uint64_t TI::Favonius::SearchNodeTranspositionGeometryExtensions::pop_nonletter_keys(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 40);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = v1 - 1;
    do
    {
      this = *(void *)(*(void *)(v2 + 48) + 8 * v3);
      __int16 v4 = *(_WORD *)(*(void *)(this + 8) + 60);
      if ((v4 & 2) != 0 || (v4 & 0x20) != 0 && *(unsigned char *)(v2 + 68)) {
        break;
      }
      this = WTF::RefCounted<TI::Favonius::KeyMatch>::deref(this);
      *(void *)(v2 + 40) = v3--;
    }
    while (v3 != -1);
  }
  return this;
}

void TI::Favonius::SearchNodeTranspositionGeometryExtensions::clone_substituting_touch()
{
}

uint64_t TI::Favonius::SearchNodeTranspositionGeometryExtensions::SearchNodeTranspositionGeometryExtensions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(void *)a1 = &unk_1F3F79010;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v8;
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  uint64_t v9 = *(atomic_uint **)(a2 + 88);
  *(void *)(a1 + 88) = v9;
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  if ((*(_DWORD *)(a1 + 72) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    uint64_t v10 = (unint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
    WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((void *)(a1 + 40), *v10);
    unint64_t v11 = *v10;
    if (*v10)
    {
      uint64_t v12 = 8 * v11 - 8;
      do
      {
        unint64_t v13 = v10[1] + v12;
        if (!(*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 72))(*(void *)(a2 + 16), *(__int16 *)(*(void *)(*(void *)v13 + 8) + 62)))
        {
          unint64_t v14 = *(void *)(a1 + 40);
          if (v14 != *(void *)(a1 + 56))
          {
            uint64_t v16 = *(void *)(a1 + 48);
            goto LABEL_15;
          }
          unint64_t v15 = WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity((void *)(a1 + 40), v14 + 1, v13);
          uint64_t v16 = *(void *)(a1 + 48);
          if (v16)
          {
            unint64_t v13 = v15;
            unint64_t v14 = *v7;
LABEL_15:
            uint64_t v17 = *(atomic_uint **)v13;
            *(void *)(v16 + 8 * v14) = *(void *)v13;
            if (v17)
            {
              atomic_fetch_add(v17, 1u);
              unint64_t v14 = *v7;
            }
            *uint64_t v7 = v14 + 1;
          }
        }
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    if (*(void *)(a2 + 40))
    {
      for (uint64_t i = *(void *)(a2 + 48); i != *(void *)(a2 + 48) + 8 * *(void *)(a2 + 40); i += 8)
      {
        uint64_t v19 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 80) + 72))(*(void *)(a1 + 80), *(__int16 *)(*(void *)(*(void *)i + 8) + 62));
        if (v19)
        {
          uint64_t v20 = (atomic_uint *)v19;
          unint64_t v21 = *(void *)(a1 + 40);
          if (v21 == *(void *)(a1 + 56))
          {
            unint64_t v22 = v21 + (v21 >> 1);
            if (v21 < 0x100) {
              unint64_t v22 = 2 * v21;
            }
            if (v22 <= v21 + 1) {
              unint64_t v23 = v21 + 1;
            }
            else {
              unint64_t v23 = v22;
            }
            WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((void *)(a1 + 40), v23);
            uint64_t v24 = *(void *)(a1 + 48);
            if (!v24) {
              continue;
            }
            unint64_t v21 = *v7;
          }
          else
          {
            uint64_t v24 = *(void *)(a1 + 48);
          }
          *(void *)(v24 + 8 * v21) = v20;
          atomic_fetch_add(v20, 1u);
          ++*v7;
        }
      }
    }
    unint64_t v26 = *(void *)(a1 + 40);
    uint64_t v25 = *(void *)(a1 + 48);
    unsigned int v30 = &__block_literal_global_19761;
    unint64_t v27 = 126 - 2 * __clz(v26);
    if (v26) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*,false>(v25, (uint64_t *)(v25 + 8 * v26), (uint64_t)&v30, v28, 1);
    TI::Favonius::SearchNodeTranspositionGeometryExtensions::set_bound_on_score_with_first_matched_key((TI::Favonius::SearchNodeTranspositionGeometryExtensions *)a1);
  }
  return a1;
}

BOOL ___ZN2TI8Favonius41SearchNodeTranspositionGeometryExtensionsC2ERKS1_N3WTF10PassRefPtrINS0_12TouchHistoryEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(float *)(*(void *)a2 + 32) < *(float *)(*(void *)a3 + 32);
}

void TI::Favonius::SearchNodeTranspositionGeometryExtensions::~SearchNodeTranspositionGeometryExtensions(TI::Favonius::SearchNodeTranspositionGeometryExtensions *this)
{
  TI::Favonius::SearchNodeTranspositionGeometryExtensions::~SearchNodeTranspositionGeometryExtensions(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t vars8;

  *(void *)this = &unk_1F3F79010;
  uint64_t v2 = *((void *)this + 11);
  if (v2) {
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v2);
  }
  uint64_t v3 = (unsigned int *)*((void *)this + 10);
  if (v3)
  {
    __int16 v4 = atomic_load(v3 + 2);
    if (v4 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF);
    }
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::~Vector((void *)this + 5);
  uint64_t v5 = (unsigned int *)*((void *)this + 4);
  if (v5)
  {
    uint64_t v6 = atomic_load(v5 + 2);
    if (v6 == 1) {
      (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
    else {
      atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF);
    }
  }

  TI::Favonius::SearchNodeSource::~SearchNodeSource(this);
}

void TI::Favonius::SearchNodeTranspositionGeometryExtensions::create()
{
}

uint64_t TI::Favonius::SearchNodeTranspositionGeometryExtensions::SearchNodeTranspositionGeometryExtensions(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, float a6, float a7)
{
  uint64_t v8 = *a4;
  *a4 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(void *)a1 = &unk_1F3F79010;
  *(void *)(a1 + 32) = a2;
  if (a2) {
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v9 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(float *)(a1 + 64) = a6;
  *(unsigned char *)(a1 + 68) = a5;
  float v10 = (float)(*(float *)(a2 + 144) + (float)(a6 * *(float *)(a2 + 136))) + a7;
  *(float *)(a1 + 72) = v10;
  uint64_t v11 = *a3;
  *a3 = 0;
  *(void *)(a1 + 80) = v11;
  *(void *)(a1 + 88) = 0;
  if ((LODWORD(v10) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    *(float *)(a1 + 72) = (*(float (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16))
                        + *(float *)(a1 + 72);
    uint64_t v12 = (unint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 80) + 64))(*(void *)(a1 + 80));
    WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::operator=((unint64_t *)(a1 + 40), v12);
    unint64_t v13 = *(void *)(a1 + 40);
    if (v13 < 5)
    {
      if (v13 < 2)
      {
LABEL_17:
        TI::Favonius::SearchNodeTranspositionGeometryExtensions::set_bound_on_score_with_first_matched_key((TI::Favonius::SearchNodeTranspositionGeometryExtensions *)a1);
        return a1;
      }
    }
    else
    {
      unint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 32);
      uint64_t v15 = 8 * v13 - 32;
      do
      {
        if (*v14) {
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(*v14);
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
      unint64_t v13 = 4;
      unint64_t *v9 = 4;
    }
    unint64_t v16 = 0;
    uint64_t v17 = -1;
    do
    {
      uint64_t v18 = *(void *)(a1 + 48);
      unint64_t v19 = v13 + v17;
      uint64_t v20 = *(void *)(v18 + 8 * v16);
      *(void *)(v18 + 8 * v16) = 0;
      uint64_t v21 = *(void *)(v18 + 8 * (v13 + v17));
      *(void *)(v18 + 8 * v19) = 0;
      uint64_t v22 = *(void *)(v18 + 8 * v16);
      *(void *)(v18 + 8 * v16) = v21;
      if (v22) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v22);
      }
      uint64_t v23 = *(void *)(v18 + 8 * v19);
      *(void *)(v18 + 8 * v19) = v20;
      if (v23) {
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v23);
      }
      ++v16;
      unint64_t v13 = *v9;
      --v17;
    }
    while (v16 < *v9 >> 1);
    goto LABEL_17;
  }
  return a1;
}

void *KB::UserDictionaryLoader::UserDictionaryLoader(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

void KB::UserDictionaryLoader::~UserDictionaryLoader(KB::UserDictionaryLoader *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = TIUserDictionaryOSLogFacility();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = objc_msgSend(NSString, "stringWithFormat:", @"%s Destructing UserDictionaryLoader", "~UserDictionaryLoader");
    *(_DWORD *)int buf = 138412290;
    float v10 = v3;
    _os_log_impl(&dword_1E3F0E000, v2, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  __int16 v4 = (id *)*((void *)this + 2);
  if (v4)
  {
    id WeakRetained = objc_loadWeakRetained(v4);
    if (WeakRetained)
    {
      uint64_t v6 = +[TIUserDictionaryServer sharedInstance];
      [v6 removeObserver:WeakRetained];
    }
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  }
  std::unique_ptr<KB::WeakHolder>::reset[abi:nn180100]((id **)this + 2, 0);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  }
}

id **std::unique_ptr<KB::WeakHolder>::reset[abi:nn180100](id **result, id *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    objc_destroyWeak(v2);
    JUMPOUT(0x1E4E7BC20);
  }
  return result;
}

id KB::UserDictionaryLoader::dispatch_queue(KB::UserDictionaryLoader *this)
{
  if (KB::UserDictionaryLoader::dispatch_queue(void)::once_token != -1) {
    dispatch_once(&KB::UserDictionaryLoader::dispatch_queue(void)::once_token, &__block_literal_global_19791);
  }
  uint64_t v1 = (void *)KB::UserDictionaryLoader::dispatch_queue(void)::queue;

  return v1;
}

void ___ZN2KB20UserDictionaryLoader14dispatch_queueEv_block_invoke()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_BACKGROUND, 0);

  dispatch_queue_t v1 = dispatch_queue_create("com.apple.textInput.userDictionaryLoader", attr);
  uint64_t v2 = (void *)KB::UserDictionaryLoader::dispatch_queue(void)::queue;
  KB::UserDictionaryLoader::dispatch_queue(void)::queue = (uint64_t)v1;
}

void KB::UserDictionaryLoader::create_and_load(KB::UserDictionaryLoader *this, const KB::String *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = TIUserDictionaryOSLogFacility();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = objc_msgSend(NSString, "stringWithFormat:", @"%s Creating UserDictionaryLoader", "create_and_load");
    int buf = 138412290;
    *(void *)buf_4 = v3;
    _os_log_impl(&dword_1E3F0E000, v2, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&buf, 0xCu);
  }
  operator new();
}

__n128 __Block_byref_object_copy__19798(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__19799(uint64_t a1)
{
  dispatch_queue_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN2KB20UserDictionaryLoader15create_and_loadERKNS_6StringE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  __int16 v4 = TIUserDictionaryOSLogFacility();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = objc_msgSend(NSString, "stringWithFormat:", @"%s Queuing UserDictionary trie load/reload...", "create_and_load_block_invoke");
    *(_DWORD *)int buf = 138412290;
    uint64_t v12 = v5;
    _os_log_impl(&dword_1E3F0E000, v4, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  uint64_t v7 = KB::UserDictionaryLoader::dispatch_queue(v6);
  KB::String::String((KB::String *)v9, (const KB::String *)(a1 + 40));
  id v8 = v3;
  TIDispatchAsync();

  if (v10)
  {
    if (v9[6] == 1) {
      free(v10);
    }
  }
}

void __destroy_helper_block_a8_40c17_ZTSKN2KB6StringE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 46) == 1) {
      free(v2);
    }
  }
}

KB::String *__copy_helper_block_a8_40c17_ZTSKN2KB6StringE(uint64_t a1, uint64_t a2)
{
  return KB::String::String((KB::String *)(a1 + 40), (const KB::String *)(a2 + 40));
}

void ___ZN2KB20UserDictionaryLoader15create_and_loadERKNS_6StringE_block_invoke_10()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = TIUserDictionaryOSLogFacility();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    dispatch_queue_t v1 = objc_msgSend(NSString, "stringWithFormat:", @"%s Loading UserDictionary trie...", "create_and_load_block_invoke");
    *(_DWORD *)int buf = 138412290;
    id v3 = v1;
    _os_log_impl(&dword_1E3F0E000, v0, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  operator new();
}

void __destroy_helper_block_a8_48c17_ZTSKN2KB6StringE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 54) == 1) {
      free(v2);
    }
  }
}

KB::String *__copy_helper_block_a8_48c17_ZTSKN2KB6StringE(uint64_t a1, uint64_t a2)
{
  return KB::String::String((KB::String *)(a1 + 48), (const KB::String *)(a2 + 48));
}

void ___ZN2KB20UserDictionaryLoader15create_and_loadERKNS_6StringE_block_invoke_14(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = TIUserDictionaryOSLogFacility();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(NSString, "stringWithFormat:", @"%s Done loading UserDictionary trie; installing on main thread.",
    id v3 = "create_and_load_block_invoke");
    *(_DWORD *)int buf = 138412290;
    uint64_t v13 = v3;
    _os_log_impl(&dword_1E3F0E000, v2, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  uint64_t v4 = *(void *)(a1[4] + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 56);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      id v8 = *(void **)(v4 + 48);
      if (v8)
      {
        uint64_t v10 = a1[5];
        uint64_t v9 = a1[6];
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = (std::__shared_weak_count *)v8[1];
        *id v8 = v10;
        v8[1] = v9;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v7);
    }
  }
}

void __destroy_helper_block_a8_40c47_ZTSNSt3__110shared_ptrIN2KB14UserDictionaryEEE(uint64_t a1)
{
  dispatch_queue_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

uint64_t __copy_helper_block_a8_40c47_ZTSNSt3__110shared_ptrIN2KB14UserDictionaryEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<KB::UserDictionary *,std::shared_ptr<KB::UserDictionary>::__shared_ptr_default_delete<KB::UserDictionary,KB::UserDictionary>,std::allocator<KB::UserDictionary>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 64);
    while (v2)
    {
      id v3 = v2;
      uint64_t v2 = (void *)*v2;
      uint64_t v4 = (void *)v3[7];
      if (v4 && *((unsigned char *)v3 + 54) == 1) {
        free(v4);
      }
      uint64_t v5 = (void *)v3[3];
      if (v5 && *((unsigned char *)v3 + 22) == 1) {
        free(v5);
      }
      operator delete(v3);
    }
    uint64_t v6 = *(void **)(v1 + 48);
    *(void *)(v1 + 48) = 0;
    if (v6) {
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(v1 + 24);
    while (v7)
    {
      id v8 = v7;
      uint64_t v7 = (void *)*v7;
      uint64_t v11 = (void **)(v8 + 6);
      std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v11);
      uint64_t v9 = (void *)v8[3];
      if (v9 && *((unsigned char *)v8 + 22) == 1) {
        free(v9);
      }
      operator delete(v8);
    }
    uint64_t v10 = *(void **)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    if (v10) {
      operator delete(v10);
    }
    if (*(void *)v1) {
      CFRelease(*(CFTypeRef *)v1);
    }
    *(void *)uint64_t v1 = 0;
    JUMPOUT(0x1E4E7BC20);
  }
  return result;
}

void std::__shared_ptr_pointer<KB::UserDictionary *,std::shared_ptr<KB::UserDictionary>::__shared_ptr_default_delete<KB::UserDictionary,KB::UserDictionary>,std::allocator<KB::UserDictionary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

KB::UserDictionaryLoader *std::__shared_ptr_pointer<KB::UserDictionaryLoader *,std::shared_ptr<KB::UserDictionaryLoader>::__shared_ptr_default_delete<KB::UserDictionaryLoader,KB::UserDictionaryLoader>,std::allocator<KB::UserDictionaryLoader>>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(KB::UserDictionaryLoader **)(a1 + 24);
  if (result)
  {
    KB::UserDictionaryLoader::~UserDictionaryLoader(result);
    JUMPOUT(0x1E4E7BC20);
  }
  return result;
}

void std::__shared_ptr_pointer<KB::UserDictionaryLoader *,std::shared_ptr<KB::UserDictionaryLoader>::__shared_ptr_default_delete<KB::UserDictionaryLoader,KB::UserDictionaryLoader>,std::allocator<KB::UserDictionaryLoader>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

__n128 __Block_byref_object_copy__19881(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

BOOL KB::character_is_letter_modifier(UChar32 c)
{
  BOOL result = 1;
  if (c <= 729)
  {
    if ((c - 168) <= 0xC && ((1 << (c + 88)) & 0x1081) != 0) {
      return result;
    }
    return u_charType(c) == 4;
  }
  if (c != 730 && c != 732 && c != 901) {
    return u_charType(c) == 4;
  }
  return result;
}

uint64_t KB::MutableLexiconWrapper::lexicon(KB::MutableLexiconWrapper *this)
{
  return *((void *)this + 18);
}

void KB::MutableLexiconWrapper::~MutableLexiconWrapper(KB::MutableLexiconWrapper *this)
{
  KB::MutableLexiconWrapper::~MutableLexiconWrapper(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  const void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F3F791B0;
  uint64_t v2 = (const void *)*((void *)this + 18);
  if (v2) {
    CFRelease(v2);
  }
  long long v3 = (void *)*((void *)this + 20);
  if (v3 && *((unsigned char *)this + 158) == 1) {
    free(v3);
  }

  KB::LexiconWrapperBase::~LexiconWrapperBase(this);
}

void KB::LexiconWrapperBase::~LexiconWrapperBase(KB::LexiconWrapperBase *this)
{
  *(void *)this = &unk_1F3F79ED8;
  std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::~__value_func[abi:nn180100]((void *)this + 14);
  std::__function::__value_func<KB::ByteString ()(KB::String const&)>::~__value_func[abi:nn180100]((void *)this + 10);
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2 && *((unsigned char *)this + 54) == 1) {
    free(v2);
  }
  long long v3 = (const void *)*((void *)this + 5);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 5) = 0;
  uint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    if (*((unsigned char *)this + 14) == 1) {
      free(v4);
    }
  }
}

void KB::MutableLexiconWrapper::create(KB::MutableLexiconWrapper *this, const KB::String *a2, const KB::String *a3)
{
}

CFTypeRef *KB::MutableLexiconWrapper::MutableLexiconWrapper(CFTypeRef *this, const KB::String *a2, const KB::String *a3)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  *(void *)KB::LexiconWrapperBase::LexiconWrapperBase((KB::LexiconWrapperBase *)this, a2) = &unk_1F3F791B0;
  this[18] = (CFTypeRef)KB::MutableLexiconWrapper::create_mutable_lexicon(a2, a3, v6);
  KB::String::String((KB::String *)(this + 19), a3);
  KB::CollatorWrapper::CollatorWrapper((KB::CollatorWrapper *)&cf, this[18], a2);
  KB::LexiconWrapperBase::set_collator(this, (uint64_t *)&cf);
  std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::~__value_func[abi:nn180100](v12);
  std::__function::__value_func<KB::ByteString ()(KB::String const&)>::~__value_func[abi:nn180100](v11);
  if (v10 && v9 == 1) {
    free(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  return this;
}

uint64_t KB::MutableLexiconWrapper::create_mutable_lexicon(KB::MutableLexiconWrapper *this, const KB::String *a2, const KB::String *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (*(_WORD *)this)
  {
    uint64_t v6 = (const void *)*MEMORY[0x1E4F72458];
    KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)this);
    uint64_t v7 = value;
    CFDictionarySetValue(Mutable, v6, value);
    if (v7) {
      CFRelease(v7);
    }
  }
  if (*(_WORD *)a2)
  {
    id v8 = (const void *)*MEMORY[0x1E4F72430];
    KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)a2);
    char v9 = value;
    CFDictionarySetValue(Mutable, v8, value);
    if (v9) {
      CFRelease(v9);
    }
  }
  KB::String::String((KB::String *)&value, "TextInput-Dynamic.");
  KB::String::append((unsigned __int16 *)&value, this);
  uint64_t v10 = (const void *)*MEMORY[0x1E4F72460];
  KB::cf_string_impl<KB::String>((CFStringRef *)&v20, (unsigned __int16 *)&value);
  uint64_t v11 = v20;
  CFDictionarySetValue(Mutable, v10, v20);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = LXLexiconCreateMutable();
  if (!v12)
  {
    LODWORD(v20) = 0x100000;
    WORD2(v20) = 0;
    BYTE6(v20) = 0;
    uint64_t v21 = 0;
    char v22 = 0;
    if (TICanLogMessageAtLevel_onceToken != -1) {
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
    }
    uint64_t v13 = TIOSLogFacility();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = &v22;
      if (v21) {
        uint64_t v15 = (const char *)v21;
      }
      if (!(_WORD)v20) {
        uint64_t v15 = "";
      }
      *(_DWORD *)int buf = 136315394;
      uint64_t v17 = "create_mutable_lexicon";
      __int16 v18 = 2080;
      unint64_t v19 = v15;
      _os_log_debug_impl(&dword_1E3F0E000, v13, OS_LOG_TYPE_DEBUG, "%s Unable to create LXMutableLexicon: %s", buf, 0x16u);
    }
    if (v21 && BYTE6(v20) == 1) {
      free(v21);
    }
  }
  LXLexiconRepositoryAddOrUpdate();
  if (v24 && BYTE6(value) == 1) {
    free(v24);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v12;
}

void *KB::LexiconWrapperBase::set_collator(void *a1, uint64_t *a2)
{
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  a1[5] = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  a1[5] = v5;
  KB::String::operator=((uint64_t)(a1 + 6), (KB::String *)(a2 + 1));
  std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](a1 + 10, (uint64_t)(a2 + 5));

  return std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::operator=[abi:nn180100](a1 + 14, (uint64_t)(a2 + 9));
}

unsigned __int16 *KB::MutableLexiconWrapper::default_lexicon_name@<X0>(KB::MutableLexiconWrapper *this@<X0>, KB::String *a2@<X8>)
{
  uint64_t v4 = (unsigned __int16 *)KB::String::String(a2, "TextInput-Dynamic.");

  return KB::String::append(v4, this);
}

uint64_t KB::MutableLexiconWrapper::store(KB::MutableLexiconWrapper *this)
{
  if ((*(uint64_t (**)(KB::MutableLexiconWrapper *))(*(void *)this + 16))(this)) {
    LXLexiconWrite();
  }
  return 1;
}

uint64_t KB::MutableLexiconWrapper::clear(KB::MutableLexiconWrapper *this)
{
  uint64_t result = (*(uint64_t (**)(KB::MutableLexiconWrapper *))(*(void *)this + 16))(this);
  if (result)
  {
    uint64_t v3 = *((void *)this + 18);
    return MEMORY[0x1F412A740](v3);
  }
  return result;
}

void KB::MutableLexiconWrapper::increment_usage_count(KB::MutableLexiconWrapper *this, const KB::String *a2)
{
  if ((*(uint64_t (**)(KB::MutableLexiconWrapper *))(*(void *)this + 16))(this))
  {
    KB::cf_string_impl<KB::String>(&v4, (unsigned __int16 *)a2);
    CFStringRef v3 = v4;
    LXLexiconIncrementUsageCount();
    if (v3) {
      CFRelease(v3);
    }
  }
}

uint64_t KB::MutableLexiconWrapper::add_entry(KB::MutableLexiconWrapper *this, const KB::String *a2)
{
  if (!(*(uint64_t (**)(KB::MutableLexiconWrapper *))(*(void *)this + 16))(this)) {
    return 0;
  }
  KB::cf_string_impl<KB::String>(&v6, (unsigned __int16 *)a2);
  CFStringRef v3 = v6;
  uint64_t v4 = LXLexiconAdd();
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

uint64_t KB::MutableLexiconWrapper::add_entry_with_token_id(KB::MutableLexiconWrapper *this, const KB::String *a2, double a3)
{
  if (!(*(uint64_t (**)(KB::MutableLexiconWrapper *))(*(void *)this + 16))(this)) {
    return 0;
  }
  KB::cf_string_impl<KB::String>(&v8, (unsigned __int16 *)a2);
  CFStringRef v4 = v8;
  CFMutableStringRef Mutable = (const void *)LXEntryCreateMutable();
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v6 = LXLexiconAddEntryWithTokenID();
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v6;
}

void KB::MutableLexiconWrapper::write_debug_dump(KB::MutableLexiconWrapper *this, const KB::String *a2)
{
  if ((*(uint64_t (**)(KB::MutableLexiconWrapper *))(*(void *)this + 16))(this))
  {
    KB::cf_string_impl<KB::String>(&filePath, (unsigned __int16 *)a2);
    CFStringRef v3 = filePath;
    CFURLRef v4 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], filePath, kCFURLPOSIXPathStyle, 0);
    if (v4)
    {
      CFURLRef v5 = v4;
      LXLexiconWriteDebugDump();
      CFRelease(v5);
    }
    if (v3) {
      CFRelease(v3);
    }
  }
}

uint64_t AddressBookTrieLoaderImpl::handle@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void AddressBookTrieLoaderImpl::~AddressBookTrieLoaderImpl(AddressBookTrieLoaderImpl *this)
{
  AddressBookTrieLoaderImpl::~AddressBookTrieLoaderImpl(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  NSObject *v2;
  void *v3;
  void *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint8_t buf[4];
  void *v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = TIPersonalizationContactOSLogFacility();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    CFStringRef v3 = objc_msgSend(NSString, "stringWithFormat:", @"%s Removing contact observer", "~AddressBookTrieLoaderImpl");
    *(_DWORD *)int buf = 138412290;
    char v9 = v3;
    _os_log_impl(&dword_1E3F0E000, v2, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  CFURLRef v4 = +[TITransientLexiconManager sharedInstance];
  [v4 removeContactObserver:*((void *)this + 6)];

  CFURLRef v5 = (const void *)*((void *)this + 5);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

float acceptable_threshold_for_locale(void *a1, uint64_t a2)
{
  CFStringRef v3 = (float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::find<std::string>(a2, a1);
  float result = 0.003;
  if ((float *)(a2 + 8) != v3 && v3[14] != 0.0) {
    return v3[14];
  }
  return result;
}

void *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::find<std::string>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  CFStringRef v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  CFURLRef v5 = (void *)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      CFURLRef v5 = v3;
    }
    CFStringRef v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void AddressBookTrieLoaderImpl::AddressBookTrieLoaderImpl(AddressBookTrieLoaderImpl *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F3F791D8;
  uint64_t View = LXLexiconRepositoryCreateView();
  CFStringRef v3 = operator new(0x20uLL);
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = View;
  void *v3 = &unk_1F3F79260;
  *((void *)this + 3) = v3 + 3;
  *((void *)this + 4) = v3;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
}

void AddressBookTrieLoaderImpl::static_dictionary_for_filtering(AddressBookTrieLoaderImpl *this, const KB::String *a2, const KB::String *a3, const KB::String *a4)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  KB::StaticDictionary::create(this);
}

void AddressBookTrieLoaderImpl::create_empty_transient_lexicon(AddressBookTrieLoaderImpl *this@<X0>, uint64_t *a2@<X8>)
{
  value[3] = *(void **)MEMORY[0x1E4F143B8];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  char v6 = (const void *)*MEMORY[0x1E4F72458];
  KB::cf_string_impl<KB::String>((CFStringRef *)value, (unsigned __int16 *)this);
  uint64_t v7 = value[0];
  CFDictionaryAddValue(Mutable, v6, value[0]);
  if (v7) {
    CFRelease(v7);
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72460], @"TextInput-AddressBook");
  *a2 = LXLexiconCreateTransient();
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void AddressBookTrieLoaderImpl::register_as_contact_observer(void *a1, const KB::String *a2, const KB::String *a3, const KB::String *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  CFStringRef v8 = TIPersonalizationContactOSLogFacility();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    char v9 = objc_msgSend(NSString, "stringWithFormat:", @"%s Adding contact observer", "register_as_contact_observer");
    *(_DWORD *)int buf = 138412290;
    unint64_t v27 = v9;
    _os_log_impl(&dword_1E3F0E000, v8, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[2];
  if (!v10 || (v11 = a1[1], (uint64_t v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:nn180100]();
  }
  uint64_t v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:nn180100](v12);
  uint64_t v15 = +[TITransientLexiconManager sharedInstance];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3321888768;
  v18[2] = ___ZN25AddressBookTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1__block_invoke;
  v18[3] = &__block_descriptor_144_a8_32c50_ZTSNSt3__18weak_ptrI25AddressBookTrieLoaderImplEE48c17_ZTSKN2KB6StringE80c17_ZTSKN2KB6StringE112c17_ZTSKN2KB6StringE_e22_v16__0__NSDictionary_8l;
  v18[4] = v11;
  unint64_t v19 = v13;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  KB::String::String((KB::String *)v20, a2);
  KB::String::String((KB::String *)v22, a3);
  KB::String::String((KB::String *)v24, a4);
  uint64_t v16 = [v15 addContactObserver:v18];
  uint64_t v17 = (void *)a1[6];
  a1[6] = v16;

  if (v25 && v24[6] == 1) {
    free(v25);
  }
  if (v23 && v22[6] == 1) {
    free(v23);
  }
  if (v21 && v20[6] == 1) {
    free(v21);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void ___ZN25AddressBookTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1__block_invoke(void *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    CFURLRef v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      char v6 = v5;
      if (a1[4])
      {
        AddressBookTrieLoaderImpl::create_empty_transient_lexicon((AddressBookTrieLoaderImpl *)(a1 + 6), &v10);
        if (v10)
        {
          uint64_t v7 = TIPersonalizationContactOSLogFacility();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            CFStringRef v8 = objc_msgSend(NSString, "stringWithFormat:", @"%s Adding %ld contacts to lexicon", "register_as_contact_observer_block_invoke", objc_msgSend(v3, "count"));
            *(_DWORD *)int buf = 138412290;
            uint64_t v12 = v8;
            _os_log_impl(&dword_1E3F0E000, v7, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
          }
          AddressBookTrieLoaderImpl::static_dictionary_for_filtering((AddressBookTrieLoaderImpl *)(a1 + 6), (const KB::String *)(a1 + 10), (const KB::String *)(a1 + 14), v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v6);
    }
  }
}

void __destroy_helper_block_a8_32c50_ZTSNSt3__18weak_ptrI25AddressBookTrieLoaderImplEE48c17_ZTSKN2KB6StringE80c17_ZTSKN2KB6StringE112c17_ZTSKN2KB6StringE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2 && *(unsigned char *)(a1 + 118) == 1) {
    free(v2);
  }
  id v3 = *(void **)(a1 + 88);
  if (v3 && *(unsigned char *)(a1 + 86) == 1) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 56);
  if (v4 && *(unsigned char *)(a1 + 54) == 1) {
    free(v4);
  }
  CFURLRef v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

KB::String *__copy_helper_block_a8_32c50_ZTSNSt3__18weak_ptrI25AddressBookTrieLoaderImplEE48c17_ZTSKN2KB6StringE80c17_ZTSKN2KB6StringE112c17_ZTSKN2KB6StringE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  KB::String::String((KB::String *)(a1 + 6), (const KB::String *)(a2 + 6));
  KB::String::String((KB::String *)(a1 + 10), (const KB::String *)(a2 + 10));

  return KB::String::String((KB::String *)(a1 + 14), (const KB::String *)(a2 + 14));
}

uint64_t __Block_byref_object_copy__20497(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20498(uint64_t a1)
{
}

void ___ZL28background_load_address_bookN2KB10retain_ptrIP10_LXLexiconEERKNS_16StaticDictionaryEP12NSDictionaryIP8NSStringP10_ICContactE_block_invoke(uint64_t a1)
{
  id v5 = [MEMORY[0x1E4FAE2D8] sharedInputModeController];
  uint64_t v2 = [v5 enabledInputModeIdentifiers];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void addName(void *a1, long double a2, uint64_t a3, uint64_t a4, uint64_t a5, KB::StaticDictionary *a6, int a7, uint64_t a8)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  uint64_t v13 = v12;
  if (v12 && (unint64_t)[(__CFString *)v12 length] <= 0x100)
  {
    int v35 = a7;
    __int16 v51 = 0;
    char v52 = 0;
    unint64_t v53 = " ,:;";
    int v50 = 1048580;
    char v54 = 0;
    KB::utf8_string(v13, (uint64_t)v47);
    KB::sbs_string_tokenize(v47, (const KB::String *)&v50, &v38);
    uint64_t v15 = v38;
    uint64_t v14 = v39;
    if (v38 != v39)
    {
      if (a4) {
        BOOL v16 = (unint64_t)(v39 - v38) > 0x3F;
      }
      else {
        BOOL v16 = 1;
      }
      char v17 = v16;
      char v36 = v17;
      log10(a2);
      do
      {
        KB::String::String((KB::String *)&v45, v15);
        float v42 = 0.0;
        KB::StaticDictionary::candidates_for_string(a6, (const KB::String *)&v45, &v42, &v40);
        float v18 = v42;
        if ((KB::StaticDictionary::contains_surfaceform_insertion_with_candidates((uint64_t *)&v40, 0, v42) & 1) == 0)
        {
          unsigned int v20 = KB::count_letters_if_word((KB *)&v45, v19);
          if (v20 == 2)
          {
            CFStringRef v22 = v40;
            CFStringRef v23 = v41;
            if (v18 > 0.002 && v41 != v40) {
              goto LABEL_41;
            }
          }
          else
          {
            if (v20 < 2) {
              goto LABEL_41;
            }
            CFStringRef v22 = v40;
            CFStringRef v23 = v41;
          }
          float v25 = v42;
          if (v23 == v22)
          {
            BOOL v29 = v42 > 0.0;
          }
          else
          {
            unint64_t v26 = (char *)TILocaleIdentifierForLexiconID(v22[4].info);
            std::string::basic_string[abi:nn180100]<0>(__p, v26);
            unint64_t v27 = (float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::find<std::string>(a8, __p);
            float v28 = 0.003;
            if ((float *)(a8 + 8) != v27)
            {
              float v28 = 0.003;
              if (v27[14] != 0.0) {
                float v28 = v27[14];
              }
            }
            if (v44 < 0) {
              operator delete(__p[0]);
            }
            if (v25 > v28 && v41 != v40) {
              goto LABEL_41;
            }
            BOOL v29 = v25 > 0.0;
            if (v25 > 0.0 && v41 != v40)
            {
              unsigned int v30 = WORD2(v45);
              if (!WORD2(v45))
              {
                KB::String::compute_length((unsigned __int16 *)&v45);
                unsigned int v30 = WORD2(v45);
              }
              if (v30 < 3) {
                goto LABEL_41;
              }
            }
          }
          if (_unacceptable_confusable_characters(void)::once_token != -1) {
            dispatch_once(&_unacceptable_confusable_characters(void)::once_token, &__block_literal_global_20512);
          }
          if (!KB::any_of_string_characters_in_set((KB *)&v45, (const KB::String *)_unacceptable_confusable_characters(void)::excluded_set, v21))goto LABEL_47; {
          char v31 = !v29;
          }
          if (v41 == v40) {
            char v31 = 1;
          }
          if (v31)
          {
LABEL_47:
            __p[0] = &v40;
            std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
            KB::cf_string_impl<KB::String>((CFStringRef *)__p, (unsigned __int16 *)&v45);
            unint64_t v32 = __p[0];
            if (LXLexiconAdd()) {
              LXLexiconIncrementUsageCount();
            }
            if ((v36 & 1) == 0)
            {
              KB::cf_string_impl<KB::String>(&v40, (unsigned __int16 *)&v45);
              CFStringRef v33 = v40;
              int v34 = LMVocabularyAddLemma();
              if (v33) {
                CFRelease(v33);
              }
              if (v34 && v35) {
                LMVocabularyEnumerateInflectionsOfLemma();
              }
            }
            if (v32) {
              CFRelease(v32);
            }
            goto LABEL_42;
          }
        }
LABEL_41:
        __p[0] = &v40;
        std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
LABEL_42:
        if (v46 && BYTE6(v45) == 1) {
          free(v46);
        }
        uint64_t v15 = (const KB::String *)((char *)v15 + 32);
      }
      while (v15 != v14);
    }
    long long v45 = &v38;
    std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v45);
    if (v49 && v48 == 1) {
      free(v49);
    }
    if (v53 && v52 == 1) {
      free(v53);
    }
  }
}

void ___ZL28background_load_address_bookN2KB10retain_ptrIP10_LXLexiconEERKNS_16StaticDictionaryEP12NSDictionaryIP8NSStringP10_ICContactE_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(KB::StaticDictionary **)(a1 + 48);
  id v5 = *(void **)(a1 + 32);
  id v7 = a2;
  [v5 score];
  addName(v7, v6, v4, 0, 0, v3, *(unsigned __int8 *)(a1 + 80), a1 + 56);
}

uint64_t std::map<std::string,float>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,float>,std::__tree_node<std::__value_type<std::string,float>,void *> *,long>>>(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v20[9] = v3;
    v20[10] = v4;
    long double v6 = a2;
    uint64_t v7 = result;
    uint64_t v8 = result + 8;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8);
      uint64_t v10 = (void *)v8;
      if (*(void *)v7 == v8) {
        goto LABEL_10;
      }
      uint64_t v11 = *(void **)(v7 + 8);
      uint64_t v12 = (void *)v8;
      if (v9)
      {
        do
        {
          uint64_t v10 = v11;
          uint64_t v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v12[2];
          BOOL v13 = *v10 == (void)v12;
          uint64_t v12 = v10;
        }
        while (v13);
      }
      float result = std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 4, v6 + 4);
      if ((result & 0x80) != 0)
      {
LABEL_10:
        if (!v9)
        {
          v20[0] = v8;
          uint64_t v14 = (uint64_t **)v8;
LABEL_15:
          uint64_t v15 = (char *)operator new(0x40uLL);
          BOOL v16 = (std::string *)(v15 + 32);
          if (*((char *)v6 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v16, (const std::string::value_type *)v6[4], v6[5]);
          }
          else
          {
            long long v17 = *((_OWORD *)v6 + 2);
            *((void *)v15 + 6) = v6[6];
            *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
          }
          *((_DWORD *)v15 + 14) = *((_DWORD *)v6 + 14);
          float result = (uint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)v7, v20[0], v14, (uint64_t *)v15);
          goto LABEL_19;
        }
        v20[0] = (uint64_t)v10;
        uint64_t v14 = (uint64_t **)(v10 + 1);
      }
      else
      {
        float result = (uint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v7, v20, v6 + 4);
        uint64_t v14 = (uint64_t **)result;
      }
      if (!*v14) {
        goto LABEL_15;
      }
LABEL_19:
      float v18 = (void *)v6[1];
      if (v18)
      {
        do
        {
          unint64_t v19 = v18;
          float v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v19 = (void *)v6[2];
          BOOL v13 = *v19 == (void)v6;
          long double v6 = v19;
        }
        while (!v13);
      }
      long double v6 = v19;
    }
    while (v19 != a3);
  }
  return result;
}

void ___ZL28background_load_address_bookN2KB10retain_ptrIP10_LXLexiconEERKNS_16StaticDictionaryEP12NSDictionaryIP8NSStringP10_ICContactE_block_invoke_41(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(KB::StaticDictionary **)(a1 + 48);
  id v5 = *(void **)(a1 + 32);
  id v7 = a2;
  [v5 score];
  addName(v7, v6, v4, 0, 0, v3, *(unsigned __int8 *)(a1 + 80), a1 + 56);
}

void ___ZN25AddressBookTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1__block_invoke_20(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        long double v6 = (const void *)a1[6];
        if (v6)
        {
          CFRetain(v6);
          LXLexiconRepositoryAddOrUpdate();
          KB::retain_ptr<__CFDictionary const*>::operator=((const void **)(v5 + 40), v6);
          CFRelease(v6);
        }
        else
        {
          LXLexiconRepositoryAddOrUpdate();
          id v7 = *(const void **)(v5 + 40);
          if (v7)
          {
            CFRelease(v7);
            *(void *)(v5 + 40) = 0;
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
}

void __destroy_helper_block_a8_32c93_ZTSKZZN25AddressBookTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1_EUb_E3__0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 48) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_a8_32c93_ZTSKZZN25AddressBookTrieLoaderImpl28register_as_contact_observerEN2KB6StringES1_S1_EUb_E3__0(void *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = a2[5];
  result[4] = a2[4];
  result[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (const void *)a2[6];
  result[6] = v4;
  if (v4)
  {
    float result = CFRetain(v4);
    v2[6] = v4;
  }
  return result;
}

void __destroy_helper_block_a8_40c36_ZTSN2KB10retain_ptrIP10_LXLexiconEE56c114_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEEE(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,sqlite3_stmt *>,std::__map_value_compare<std::string,std::__value_type<std::string,sqlite3_stmt *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sqlite3_stmt *>>>::destroy(*(char **)(a1 + 64));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t __copy_helper_block_a8_40c36_ZTSN2KB10retain_ptrIP10_LXLexiconEE56c114_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4lessIS6_EENS4_INS_4pairIKS6_fEEEEEE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4)
  {
    CFRetain(v4);
    a1[5] = v4;
  }
  a1[8] = 0;
  a1[7] = a1 + 8;
  uint64_t v5 = (uint64_t)(a1 + 7);
  *(void *)(v5 + 16) = 0;
  long double v6 = (void *)a2[7];

  return std::map<std::string,float>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,float>,std::__tree_node<std::__value_type<std::string,float>,void *> *,long>>>(v5, v6, a2 + 8);
}

void ___ZL7addNameP8NSStringP10_LXLexiconPvjRKN2KB16StaticDictionaryEdbRKNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEfNS8_4lessISF_EENSD_INS8_4pairIKSF_fEEEEEE_block_invoke(int a1, id a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  KB::String::String((KB::String *)v4, (const char *)[a2 UTF8String]);
  KB::cf_string_impl<KB::String>(&v3, v4);
  CFStringRef v2 = v3;
  if (LXLexiconAdd()) {
    LXLexiconIncrementUsageCount();
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v6)
  {
    if (v5 == 1) {
      free(v6);
    }
  }
}

uint64_t ___ZL35_unacceptable_confusable_charactersv_block_invoke()
{
  uint64_t result = uset_openEmpty();
  _unacceptable_confusable_characters(void)::excluded_set = result;
  if (result)
  {
    MEMORY[0x1E4E7CD20](result, 119808, 120831);
    MEMORY[0x1E4E7CD20](_unacceptable_confusable_characters(void)::excluded_set, 688, 696);
    MEMORY[0x1E4E7CD20](_unacceptable_confusable_characters(void)::excluded_set, 736, 739);
    MEMORY[0x1E4E7CD20](_unacceptable_confusable_characters(void)::excluded_set, 7468, 7615);
    MEMORY[0x1E4E7CD20](_unacceptable_confusable_characters(void)::excluded_set, 8305, 8348);
    MEMORY[0x1E4E7CD20](_unacceptable_confusable_characters(void)::excluded_set, 11388, 11389);
    MEMORY[0x1E4E7CD20](_unacceptable_confusable_characters(void)::excluded_set, 8448, 8527);
    MEMORY[0x1E4E7CD20](_unacceptable_confusable_characters(void)::excluded_set, 127232, 127405);
    MEMORY[0x1E4E7CD20](_unacceptable_confusable_characters(void)::excluded_set, 127462, 127487);
    JUMPOUT(0x1E4E7CD50);
  }
  return result;
}

const void **AddressBookTrieLoaderImpl::set_lexicon(uint64_t a1, const void **a2)
{
  LXLexiconRepositoryAddOrUpdate();
  uint64_t v4 = *a2;

  return KB::retain_ptr<__CFDictionary const*>::operator=((const void **)(a1 + 40), v4);
}

void KB::AddressBookTrieLoader::create(KB::AddressBookTrieLoader *this)
{
}

uint64_t std::__shared_ptr_pointer<AddressBookTrieLoaderStub *,std::shared_ptr<AddressBookTrieLoaderStub>::__shared_ptr_default_delete<AddressBookTrieLoaderStub,AddressBookTrieLoaderStub>,std::allocator<AddressBookTrieLoaderStub>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    CFStringRef v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v2);
    }
    JUMPOUT(0x1E4E7BC20);
  }
  return result;
}

void std::__shared_ptr_pointer<AddressBookTrieLoaderStub *,std::shared_ptr<AddressBookTrieLoaderStub>::__shared_ptr_default_delete<AddressBookTrieLoaderStub,AddressBookTrieLoaderStub>,std::allocator<AddressBookTrieLoaderStub>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

uint64_t AddressBookTrieLoaderStub::handle@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void AddressBookTrieLoaderStub::~AddressBookTrieLoaderStub(AddressBookTrieLoaderStub *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }

  JUMPOUT(0x1E4E7BC20);
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void KB::AddressBookTrieLoader::create()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

AddressBookTrieLoaderImpl *std::__shared_ptr_pointer<AddressBookTrieLoaderImpl *,std::shared_ptr<AddressBookTrieLoaderImpl>::__shared_ptr_default_delete<AddressBookTrieLoaderImpl,AddressBookTrieLoaderImpl>,std::allocator<AddressBookTrieLoaderImpl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(AddressBookTrieLoaderImpl **)(a1 + 24);
  if (result)
  {
    AddressBookTrieLoaderImpl::~AddressBookTrieLoaderImpl(result);
    JUMPOUT(0x1E4E7BC20);
  }
  return result;
}

void std::__shared_ptr_pointer<AddressBookTrieLoaderImpl *,std::shared_ptr<AddressBookTrieLoaderImpl>::__shared_ptr_default_delete<AddressBookTrieLoaderImpl,AddressBookTrieLoaderImpl>,std::allocator<AddressBookTrieLoaderImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void TIFitAffineHand::~TIFitAffineHand(TIFitAffineHand *this)
{
  TIFitAffineHand::~TIFitAffineHand(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *(void *)this = &unk_1F3F79388;
  uint64_t v2 = *((void *)this + 10);
  if (v2)
  {
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)(v2 + 24));
    MEMORY[0x1E4E7BC20](v2, 0x1020C40FAF5D19FLL);
  }
  CFStringRef v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

void TIFitAffineHand::TIFitAffineHand(TIFitAffineHand *this)
{
  *(void *)this = &unk_1F3F79388;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0x7FF0000000000000;
  *((void *)this + 10) = 0;
}

{
  *(void *)this = &unk_1F3F79388;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0x7FF0000000000000;
  *((void *)this + 10) = 0;
}

void TIFitAffineHand::TIFitAffineHand(TIFitAffineHand *this, const TIFitAffineHand *a2)
{
  *(void *)this = &unk_1F3F79388;
  std::vector<CGRect>::vector((void *)this + 1, (uint64_t)a2 + 8);
  std::vector<CGRect>::vector((void *)this + 4, (uint64_t)a2 + 32);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)this + 10) = 0;
  if (*((void *)a2 + 10)) {
    operator new();
  }
}

void *std::vector<CGRect>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<CGRect>::__vallocate[abi:nn180100](a1, v5 >> 5);
    long double v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<CGRect>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    abort();
  }
  uint64_t result = (char *)operator new(32 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * a2];
  return result;
}

void TIFitAffineHand::resetKeyRects(TIFitAffineHand *this, uint64_t a2)
{
  uint64_t v4 = (char *)this + 8;
  if (v4 != (char *)a2) {
    std::vector<CGRect>::__assign_with_size[abi:nn180100]<CGRect*,CGRect*>(v4, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if ((TIFitAffineHand *)((char *)this + 32) != (TIFitAffineHand *)a2) {
    std::vector<CGRect>::__assign_with_size[abi:nn180100]<CGRect*,CGRect*>((char *)this + 32, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  uint64_t v5 = *((void *)this + 10);
  if (v5)
  {
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)(v5 + 24));
    MEMORY[0x1E4E7BC20](v5, 0x1020C40FAF5D19FLL);
  }
  *((void *)this + 10) = 0;

  TIFitAffineHand::updateMean(this);
}

char *std::vector<CGRect>::__assign_with_size[abi:nn180100]<CGRect*,CGRect*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59) {
      abort();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<CGRect>::__vallocate[abi:nn180100](v7, v11);
    BOOL v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  BOOL v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

void TIFitAffineHand::updateMean(TIFitAffineHand *this)
{
  *(_OWORD *)((char *)this + 56) = *MEMORY[0x1E4F1DAD8];
  *((void *)this + 9) = 0;
  uint64_t v2 = (CGRect *)*((void *)this + 4);
  uint64_t v1 = (CGRect *)*((void *)this + 5);
  if (v1 != v2)
  {
    do
    {
      double MidX = CGRectGetMidX(*v2);
      CGFloat MidY = CGRectGetMidY(*v2);
      double v6 = MidX + *((double *)this + 7);
      double v7 = MidY + *((double *)this + 8);
      *((double *)this + 7) = v6;
      *((double *)this + 8) = v7;
      double v8 = *((double *)this + 9) + v2->size.width + v2->size.height;
      *((double *)this + 9) = v8;
      ++v2;
    }
    while (v2 != v1);
    uint64_t v9 = *((void *)this + 5) - *((void *)this + 4);
    double v10 = (double)(unint64_t)(v9 >> 5);
    *((double *)this + 7) = v6 / v10;
    *((double *)this + 8) = v7 / v10;
    *((double *)this + 9) = v8 / (double)(unint64_t)(v9 >> 4);
  }
}

BOOL TIFitAffineHand::findClosestKeyRectForPoint(TIFitAffineHand *this, CGPoint a2, CGRect *a3)
{
  uint64_t v4 = (CGRect *)*((void *)this + 4);
  uint64_t v3 = (CGRect *)*((void *)this + 5);
  if (v3 == v4)
  {
LABEL_9:
    int v8 = 0;
  }
  else
  {
    double y = a2.y;
    double x = a2.x;
    int v8 = 0;
    double v9 = *((double *)this + 9) * *((double *)this + 9);
    CGPoint v17 = (CGPoint)*MEMORY[0x1E4F1DB28];
    CGSize v18 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
    char v10 = 1;
    do
    {
      while (1)
      {
        double MidX = CGRectGetMidX(*v4);
        CGFloat MidY = CGRectGetMidY(*v4);
        double v13 = (MidY - y) * (MidY - y) + (MidX - x) * (MidX - x);
        if (v13 >= v9) {
          break;
        }
        char v10 = 0;
        CGPoint origin = v4->origin;
        CGSize size = v4->size;
        ++v4;
        CGPoint v17 = origin;
        CGSize v18 = size;
        int v8 = 1;
        double v9 = v13;
        if (v4 == v3) {
          goto LABEL_10;
        }
      }
      ++v4;
    }
    while (v4 != v3);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    a3->CGPoint origin = v17;
    a3->CGSize size = v18;
  }
  return v8 != 0;
}

double TIFitAffineHand::keyRectForIndex(TIFitAffineHand *this, uint64_t a2)
{
  return *(double *)(*((void *)this + 4) + 32 * a2);
}

void TIFitAffineHand::updateFromMatrix(TIFitAffineHand *this, const TIFitAffineMLLMatrix *a2, double a3)
{
  double v6 = (uint64_t *)*((void *)this + 1);
  uint64_t v5 = *((void *)this + 2);
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v7 = v5 - (void)v6;
  uint64_t v8 = v7 >> 5;
  v18[0] = v7 >> 5;
  v18[1] = 3;
  v18[2] = v19;
  if (v7)
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *v6;
      *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v18, 0, v10) = v11;
      uint64_t v12 = v6[1];
      *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v18, 1uLL, v10) = v12;
      *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v18, 2uLL, v10++) = a3;
      v6 += 4;
    }
    while (v8 != v10);
  }
  TIFitAffineMLLMatrix::operator*(a2, (TIFitAffineMLLMatrix *)v18, (TIFitAffineMLLMatrix *)v17);
  uint64_t v13 = *((void *)this + 2) - *((void *)this + 1);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = v13 >> 5;
    BOOL v16 = (void *)*((void *)this + 4);
    do
    {
      *BOOL v16 = *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v17, 0, v14);
      v16[1] = *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v17, 1uLL, v14++);
      v16 += 4;
    }
    while (v15 != v14);
  }
  TIFitAffineHand::updateMean(this);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v17[3]);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v19[0]);
}

void TIFitAffineHand::setCovar(TIFitAffineHand *this, const TIFitAffineMLLMatrix *a2)
{
  uint64_t v2 = *((void *)this + 10);
  if (!v2) {
    operator new();
  }
  TIFitAffineMLLMatrix::operator=(v2, (uint64_t)a2, (uint64_t)v3);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v4);
}

BOOL TIFitAffineHand::containsKeyRect(TIFitAffineHand *this, const CGRect *a2)
{
  uint64_t v2 = (CGRect *)*((void *)this + 4);
  uint64_t v3 = (CGRect *)*((void *)this + 5);
  if (v2 == v3)
  {
    double v6 = (CGRect *)*((void *)this + 4);
  }
  else
  {
    while (!CGRectEqualToRect(*v2, *a2))
    {
      if (++v2 == v3)
      {
        uint64_t v2 = v3;
        break;
      }
    }
    double v6 = v2;
    uint64_t v2 = (CGRect *)*((void *)this + 5);
  }
  return v6 != v2;
}

void UnicodeCharset::~UnicodeCharset(UnicodeCharset *this)
{
}

uint64_t UnicodeCharset::elementSize(UnicodeCharset *this)
{
  return 2;
}

uint64_t UnicodeCharset::putChar(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  *a4 = 2;
  if (a3 >= 0x10000) {
    LOWORD(a3) = *(_WORD *)(*(void *)(a1 + 864) + 2 * (a3 - 0x10000));
  }
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, (unsigned __int16)a3);
}

uint64_t UnicodeCharset::nextInput(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  unsigned __int16 v11 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int16 *))(*(void *)a2 + 40))(a2, &v11);
  if (result)
  {
    *a4 = 2;
    __kedouble y = v11;
    uint64_t v8 = (unsigned __int16 *)bsearch(&__key, (const void *)(a1 + 8), 0xD5uLL, 4uLL, (int (__cdecl *)(const void *, const void *))wideCharCompare);
    if (v8) {
      int v9 = v8[1] | 0x10000;
    }
    else {
      int v9 = v11;
    }
    *a3 = v9;
    return 1;
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t wideCharCompare(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  BOOL v4 = v2 == v3;
  if (v2 > v3) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = -1;
  }
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

void UnicodeCompCharset::~UnicodeCompCharset(UnicodeCompCharset *this)
{
}

uint64_t UnicodeCompCharset::elementSize(UnicodeCompCharset *this)
{
  return 2;
}

uint64_t UnicodeCompCharset::putChar(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  if (a3 < 0x10000)
  {
    *a4 = 2;
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 3416) + 4 * (a3 - 0x10000));
    *a4 = 2;
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, (unsigned __int16)v6);
    if (v6 < 0x10000) {
      return result;
    }
    a3 = HIWORD(v6);
    *a4 += 2;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24);

  return v8(a2, (unsigned __int16)a3);
}

uint64_t UnicodeCompCharset::nextInput(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unsigned __int16 v11 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int16 *))(*(void *)a2 + 40))(a2, &v11);
  if (result)
  {
    __kedouble y = v11;
    *a4 = 2;
    int v9 = bsearch(&__key, (const void *)(a1 + 8), *(int *)(a1 + 3424), 8uLL, (int (__cdecl *)(const void *, const void *))uniCompInfoCompare);
    if (v9)
    {
      *a3 = v9[1] + 0x10000;
      if ((*(unsigned int (**)(uint64_t, unsigned __int16 *))(*(void *)a2 + 48))(a2, &v11) && v11)
      {
        __key += v11 << 16;
        unint64_t v10 = bsearch(&__key, (const void *)(a1 + 8), *(int *)(a1 + 3424), 8uLL, (int (__cdecl *)(const void *, const void *))uniCompInfoCompare);
        if (v10)
        {
          *a3 = v10[1] + 0x10000;
          *a4 += 2;
          (*(void (**)(uint64_t, unsigned __int16 *))(*(void *)a2 + 40))(a2, &v11);
        }
      }
    }
    else
    {
      *a3 = __key;
    }
    return 1;
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t uniCompInfoCompare(_DWORD *a1, _DWORD *a2)
{
  if (*a1 > *a2) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 == *a2) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t VnCharset::elementSize(VnCharset *this)
{
  return 1;
}

void VnInternalCharset::~VnInternalCharset(VnInternalCharset *this)
{
}

uint64_t VnInternalCharset::elementSize(VnInternalCharset *this)
{
  return 4;
}

uint64_t VnInternalCharset::putChar(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v5 = HIWORD(a3);
  *a4 = 4;
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, (unsigned __int16)a3);
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24);

  return v6(a2, v5);
}

BOOL VnInternalCharset::nextInput(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  BOOL result = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a3) != 0;
  *a4 = 4 * result;
  return result;
}

void UnicodeUTF8Charset::~UnicodeUTF8Charset(UnicodeUTF8Charset *this)
{
}

uint64_t UnicodeUTF8Charset::putChar(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  unsigned int v4 = a3;
  if (HIWORD(a3)) {
    unsigned int v4 = *(unsigned __int16 *)(*(void *)(a1 + 864) + 2 * (a3 - 0x10000));
  }
  if ((unsigned __int16)v4 > 0x7Fu)
  {
    if ((unsigned __int16)v4 > 0x7FFu)
    {
      *a4 = 3;
      (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, ((unsigned __int16)v4 >> 12) | 0xE0u);
      (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, (v4 >> 6) & 0x3F | 0x80);
    }
    else
    {
      *a4 = 2;
      (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, (v4 >> 6) | 0xC0u);
    }
    LOBYTE(v4) = v4 & 0x3F | 0x80;
  }
  else
  {
    *a4 = 1;
  }
  unsigned int v6 = *(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16);

  return v6(a2, v4);
}

uint64_t UnicodeUTF8Charset::nextInput(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  __int16 v14 = 0;
  char v13 = 0;
  *a4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)a2 + 16))(a2, (char *)&v14 + 1);
  if (result)
  {
    *a4 = 1;
    unsigned __int16 v9 = HIBYTE(v14);
    if ((v14 & 0x8000u) == 0)
    {
LABEL_3:
      int v10 = v9;
      __kedouble y = v9;
      unsigned __int16 v11 = (unsigned __int16 *)bsearch(&__key, (const void *)(a1 + 8), 0xD5uLL, 4uLL, (int (__cdecl *)(const void *, const void *))wideCharCompare);
      if (v11) {
        int v10 = v11[1] | 0x10000;
      }
      *a3 = v10;
      return 1;
    }
    if ((HIBYTE(v14) & 0xE0) == 0xC0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)a2 + 24))(a2, &v14);
      if (!result) {
        return result;
      }
      if ((v14 & 0xC0) == 0x80)
      {
        (*(void (**)(uint64_t, __int16 *))(*(void *)a2 + 16))(a2, &v14);
        *a4 = 2;
        unsigned __int16 v9 = v14 & 0x3F | ((HIBYTE(v14) & 0x1F) << 6);
        goto LABEL_3;
      }
    }
    else if ((HIBYTE(v14) & 0xF0) == 0xE0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)a2 + 24))(a2, &v14);
      if (!result) {
        return result;
      }
      if ((v14 & 0xC0) == 0x80)
      {
        (*(void (**)(uint64_t, __int16 *))(*(void *)a2 + 16))(a2, &v14);
        *a4 = 2;
        uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)a2 + 24))(a2, &v13);
        if (!result) {
          return result;
        }
        if ((v13 & 0xC0) == 0x80)
        {
          (*(void (**)(uint64_t, char *))(*(void *)a2 + 16))(a2, &v13);
          *a4 = 3;
          unsigned __int16 v9 = (HIBYTE(v14) << 12) | ((v14 & 0x3F) << 6) | v13 & 0x3F;
          goto LABEL_3;
        }
      }
    }
    *a3 = -1;
    return 1;
  }
  return result;
}

void UnicodeRefCharset::~UnicodeRefCharset(UnicodeRefCharset *this)
{
}

uint64_t UnicodeRefCharset::putChar(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  unsigned __int16 v5 = a3;
  if (HIWORD(a3)) {
    unsigned __int16 v5 = *(_WORD *)(*(void *)(a1 + 864) + 2 * (a3 - 0x10000));
  }
  if (v5 > 0x7Fu)
  {
    *a4 = 2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 38);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 35);
    int v9 = 0;
    int v10 = 10000;
    int v11 = 5;
    do
    {
      int v12 = v5 / v10;
      v9 |= v12;
      if (v9)
      {
        ++*a4;
        (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, (v12 + 48));
        int v9 = 1;
      }
      v5 %= v10;
      v10 /= 10;
      --v11;
    }
    while (v11);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 59);
    ++*a4;
  }
  else
  {
    *a4 = 1;
    uint64_t v7 = *(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16);
    return v7(a2, v5);
  }
  return result;
}

uint64_t UnicodeRefCharset::nextInput(uint64_t a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  unsigned __int8 v24 = 0;
  *a4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t *, unsigned __int8 *))(*a2 + 16))(a2, &v24);
  if (!result) {
    return result;
  }
  *a4 = 1;
  unsigned __int16 v9 = v24;
  if (v24 != 38)
  {
LABEL_31:
    unsigned __int16 v11 = v9;
    goto LABEL_32;
  }
  int v10 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *))(*a2 + 24))(a2, &v24);
  unsigned __int16 v11 = 38;
  if (v10 && v24 == 35)
  {
    (*(void (**)(uint64_t *, unsigned __int8 *))(*a2 + 16))(a2, &v24);
    ++*a4;
    if ((*(unsigned int (**)(uint64_t *))(*a2 + 80))(a2))
    {
      unsigned __int16 v11 = 38;
      goto LABEL_32;
    }
    (*(void (**)(uint64_t *, unsigned __int8 *))(*a2 + 24))(a2, &v24);
    uint64_t v12 = *a2;
    if ((v24 & 0xDF) == 0x58)
    {
      (*(void (**)(uint64_t *, unsigned __int8 *))(v12 + 16))(a2, &v24);
      ++*a4;
      if ((*(unsigned int (**)(uint64_t *, unsigned __int8 *))(*a2 + 24))(a2, &v24))
      {
        unsigned int v13 = 0;
        unsigned __int16 v14 = 0;
        uint64_t v15 = MEMORY[0x1E4F14390];
        do
        {
          if ((*(_DWORD *)(v15 + 4 * v24 + 60) & 0x10000) == 0 || v13 > 3) {
            break;
          }
          (*(void (**)(uint64_t *, unsigned __int8 *))(*a2 + 16))(a2, &v24);
          ++*a4;
          unsigned int v16 = v24 - 48;
          if (v16 >= 0xA) {
            LOWORD(v16) = 0;
          }
          if (v24 - 65 <= 5) {
            __int16 v17 = v24 - 55;
          }
          else {
            __int16 v17 = v16;
          }
          __int16 v18 = v24 - 87;
          if (v24 - 97 > 5) {
            __int16 v18 = v17;
          }
          unsigned __int16 v14 = v18 | (16 * v14);
          ++v13;
        }
        while ((*(unsigned int (**)(uint64_t *, unsigned __int8 *))(*a2 + 24))(a2, &v24));
LABEL_28:
        if ((*(unsigned int (**)(uint64_t *, unsigned __int8 *))(*a2 + 24))(a2, &v24))
        {
          unsigned __int16 v11 = v9;
          if (v24 == 59)
          {
            (*(void (**)(uint64_t *, unsigned __int8 *))(*a2 + 16))(a2, &v24);
            ++*a4;
            unsigned __int16 v11 = v14;
          }
          goto LABEL_32;
        }
        goto LABEL_31;
      }
    }
    else if ((*(unsigned int (**)(uint64_t *, unsigned __int8 *))(v12 + 24))(a2, &v24))
    {
      unsigned int v19 = 0;
      unsigned __int16 v14 = 0;
      uint64_t v20 = MEMORY[0x1E4F14390];
      do
      {
        if ((*(_DWORD *)(v20 + 4 * v24 + 60) & 0x400) == 0) {
          break;
        }
        if (v19 > 4) {
          break;
        }
        (*(void (**)(uint64_t *, unsigned __int8 *))(*a2 + 16))(a2, &v24);
        ++*a4;
        unsigned __int16 v14 = v24 + 10 * v14 - 48;
        ++v19;
      }
      while ((*(unsigned int (**)(uint64_t *, unsigned __int8 *))(*a2 + 24))(a2, &v24));
      goto LABEL_28;
    }
    unsigned __int16 v14 = 0;
    goto LABEL_28;
  }
LABEL_32:
  int v21 = v11;
  __kedouble y = v11;
  CFStringRef v22 = (unsigned __int16 *)bsearch(&__key, (const void *)(a1 + 8), 0xD5uLL, 4uLL, (int (__cdecl *)(const void *, const void *))wideCharCompare);
  if (v22) {
    int v21 = v22[1] | 0x10000;
  }
  *a3 = v21;
  return 1;
}

void UnicodeHexCharset::~UnicodeHexCharset(UnicodeHexCharset *this)
{
}

uint64_t UnicodeHexCharset::putChar(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  if (HIWORD(a3)) {
    LOWORD(a3) = *(_WORD *)(*(void *)(a1 + 864) + 2 * (a3 - 0x10000));
  }
  unsigned int v6 = (unsigned __int16)a3;
  if ((unsigned __int16)a3 > 0xFFu)
  {
    *a4 = 3;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 38);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 35);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 120);
    int v9 = 0;
    for (int i = 12; i != -4; i -= 4)
    {
      unsigned int v11 = (v6 >> i) & 0xF;
      v9 |= v11;
      if (v9)
      {
        ++*a4;
        if (v11 >= 0xA) {
          uint64_t v12 = v11 + 55;
        }
        else {
          uint64_t v12 = v11 | 0x30;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v12);
        int v9 = 1;
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 59);
    ++*a4;
  }
  else
  {
    *a4 = 1;
    uint64_t v7 = *(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16);
    return v7(a2, v6);
  }
  return result;
}

void UnicodeCStringCharset::~UnicodeCStringCharset(UnicodeCStringCharset *this)
{
}

uint64_t UnicodeCStringCharset::putChar(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  if (HIWORD(a3)) {
    LOWORD(a3) = *(_WORD *)(*(void *)(a1 + 864) + 2 * (a3 - 0x10000));
  }
  unsigned int v7 = (unsigned __int16)a3;
  if ((unsigned __int16)a3 <= 0x7Fu
    && ((a3 & 0xFFDF) != 0x58
      ? (BOOL v8 = (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * (unsigned __int16)a3 + 60) & 0x10000) == 0)
      : (BOOL v8 = 0),
        v8))
  {
    *a4 = 1;
    unsigned __int16 v14 = *(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16);
    return v14(a2, v7);
  }
  else
  {
    *a4 = 2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 92);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 120);
    int v9 = 0;
    for (int i = 12; i != -4; i -= 4)
    {
      unsigned int v11 = (v7 >> i) & 0xF;
      v9 |= v11;
      if (v9)
      {
        ++*a4;
        if (v11 >= 0xA) {
          uint64_t v12 = v11 + 55;
        }
        else {
          uint64_t v12 = v11 | 0x30;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v12);
        int v9 = 1;
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    *(_DWORD *)(a1 + 872) = 1;
  }
  return result;
}

uint64_t UnicodeCStringCharset::nextInput(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  unsigned __int8 v18 = 0;
  *a4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 16))(a2, &v18);
  if (result)
  {
    *a4 = 1;
    unsigned __int16 v9 = v18;
    if (v18 == 92)
    {
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 24))(a2, &v18)
        && (v18 & 0xDF) == 0x58)
      {
        (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 16))(a2, &v18);
        ++*a4;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 24))(a2, &v18))
        {
          unsigned int v10 = 0;
          unsigned __int16 v9 = 0;
          uint64_t v11 = MEMORY[0x1E4F14390];
          do
          {
            if ((*(_DWORD *)(v11 + 4 * v18 + 60) & 0x10000) == 0 || v10 > 3) {
              break;
            }
            (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 16))(a2, &v18);
            ++*a4;
            unsigned int v12 = v18 - 48;
            if (v12 >= 0xA) {
              LOWORD(v12) = 0;
            }
            if (v18 - 65 <= 5) {
              __int16 v13 = v18 - 55;
            }
            else {
              __int16 v13 = v12;
            }
            __int16 v14 = v18 - 87;
            if (v18 - 97 > 5) {
              __int16 v14 = v13;
            }
            unsigned __int16 v9 = v14 | (16 * v9);
            ++v10;
          }
          while ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 24))(a2, &v18));
        }
        else
        {
          unsigned __int16 v9 = 0;
        }
      }
      else
      {
        unsigned __int16 v9 = 92;
      }
    }
    int v15 = v9;
    __kedouble y = v9;
    unsigned int v16 = (unsigned __int16 *)bsearch(&__key, (const void *)(a1 + 8), 0xD5uLL, 4uLL, (int (__cdecl *)(const void *, const void *))wideCharCompare);
    if (v16) {
      int v15 = v16[1] | 0x10000;
    }
    *a3 = v15;
    return 1;
  }
  return result;
}

uint64_t UnicodeCStringCharset::startInput(uint64_t this)
{
  *(_DWORD *)(this + 872) = 0;
  return this;
}

void _createGlobalVnCharsetIfNeeded(void)
{
  if (!VnCharsetLibObj) {
    operator new();
  }
}

void CVnCharsetLib::CVnCharsetLib(CVnCharsetLib *this)
{
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 20) = 0;
  *((void *)this + 9) = 0;
  *(_OWORD *)algn_1EAE42764 = 0u;
  *(_OWORD *)algn_1EAE42774 = 0u;
  unk_1EAE42794 = 0u;
  unk_1EAE427A4 = 0u;
  xmmword_1EAE427B0 = 0u;
  unk_1EAE42784 = 0u;
  LoVowel = 1;
  dword_1EAE42770 = 1;
  dword_1EAE42780 = 1;
  dword_1EAE42798 = 1;
  LODWORD(xmmword_1EAE427B0) = 1;
  dword_1EAE427C0 = 1;
  unk_1EAE427CC = 0u;
  unk_1EAE427DC = 0u;
  *(_OWORD *)algn_1EAE427EC = 0u;
  xmmword_1EAE42818 = 0u;
  unk_1EAE4280C = 0u;
  *(_OWORD *)&algn_1EAE427EC[16] = 0u;
  HiVowel = 1;
  dword_1EAE427D8 = 1;
  dword_1EAE427E8 = 1;
  dword_1EAE42800 = 1;
  LODWORD(xmmword_1EAE42818) = 1;
  dword_1EAE42828 = 1;
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 88) = xmmword_1E4154DE0;
  *((void *)this + 13) = 0x100000000;
}

{
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 20) = 0;
  *((void *)this + 9) = 0;
  *(_OWORD *)algn_1EAE42764 = 0u;
  *(_OWORD *)algn_1EAE42774 = 0u;
  unk_1EAE42794 = 0u;
  unk_1EAE427A4 = 0u;
  xmmword_1EAE427B0 = 0u;
  unk_1EAE42784 = 0u;
  LoVowel = 1;
  dword_1EAE42770 = 1;
  dword_1EAE42780 = 1;
  dword_1EAE42798 = 1;
  LODWORD(xmmword_1EAE427B0) = 1;
  dword_1EAE427C0 = 1;
  unk_1EAE427CC = 0u;
  unk_1EAE427DC = 0u;
  *(_OWORD *)algn_1EAE427EC = 0u;
  xmmword_1EAE42818 = 0u;
  unk_1EAE4280C = 0u;
  *(_OWORD *)&algn_1EAE427EC[16] = 0u;
  HiVowel = 1;
  dword_1EAE427D8 = 1;
  dword_1EAE427E8 = 1;
  dword_1EAE42800 = 1;
  LODWORD(xmmword_1EAE42818) = 1;
  dword_1EAE42828 = 1;
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 88) = xmmword_1E4154DE0;
  *((void *)this + 13) = 0x100000000;
}

void UnicodeCharset::UnicodeCharset(UnicodeCharset *this, const unsigned __int16 *a2)
{
  int v2 = 0;
  uint64_t v3 = 0;
  *(void *)this = &unk_1F3F793A8;
  *((void *)this + 108) = a2;
  do
  {
    *((_DWORD *)this + v3 + 2) = v2 + a2[v3];
    ++v3;
    v2 += 0x10000;
  }
  while (v3 != 213);
  qsort((char *)this + 8, 0xD5uLL, 4uLL, (int (__cdecl *)(const void *, const void *))wideCharCompare);
}

void UnicodeCompCharset::UnicodeCompCharset(UnicodeCompCharset *this, const unsigned __int16 *a2, const unsigned int *a3)
{
  uint64_t v3 = 0;
  *(void *)this = &unk_1F3F793F0;
  *((void *)this + 427) = a3;
  *((_DWORD *)this + 856) = 0;
  unsigned int v4 = (_DWORD *)((char *)this + 12);
  do
  {
    *(v4 - 1) = a3[v3];
    *unsigned int v4 = v3++;
    *((_DWORD *)this + 856) = v3;
    v4 += 2;
  }
  while (v3 != 213);
  uint64_t v5 = 0;
  int v6 = 213;
  do
  {
    int v7 = a2[v5];
    if (a3[v5] != v7)
    {
      BOOL v8 = (char *)this + 8 * v6;
      *((_DWORD *)v8 + 2) = v7;
      *((_DWORD *)v8 + 3) = v5;
      LODWORD(v3) = v3 + 1;
      *((_DWORD *)this + 856) = v3;
      ++v6;
    }
    ++v5;
  }
  while (v5 != 213);
  qsort((char *)this + 8, (int)v3, 8uLL, (int (__cdecl *)(const void *, const void *))uniCompInfoCompare);
}

double VnConvResetOptions(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_1E4154DE0;
  *(void *)&double result = 0x100000000;
  *(void *)(a1 + 16) = 0x100000000;
  return result;
}

void CVnCharsetLib::~CVnCharsetLib(CVnCharsetLib *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  if (v8) {
    MEMORY[0x1E4E7BC00](v8, 0x1000C809243D869);
  }
  uint64_t v9 = *((void *)this + 7);
  if (v9) {
    MEMORY[0x1E4E7BC00](v9, 0x1000C809243D869);
  }
}

uint64_t CVnCharsetLib::getVnCharset(CVnCharsetLib *this, int a2)
{
  _createGlobalVnCharsetIfNeeded();
  switch(a2)
  {
    case 0:
      uint64_t result = *(void *)this;
      if (!*(void *)this) {
        operator new();
      }
      return result;
    case 1:
    case 12:
      uint64_t result = *((void *)this + 2);
      if (!result) {
        goto LABEL_3;
      }
      return result;
    case 2:
      uint64_t result = *((void *)this + 3);
      if (!result) {
        operator new();
      }
      return result;
    case 3:
      uint64_t result = *((void *)this + 4);
      if (!result) {
        operator new();
      }
      return result;
    case 4:
      uint64_t result = *((void *)this + 1);
      if (!result) {
        operator new();
      }
      return result;
    case 6:
      uint64_t result = *((void *)this + 5);
      if (!result) {
        operator new();
      }
      return result;
    case 7:
      uint64_t result = *((void *)this + 6);
      if (!result) {
        operator new();
      }
      return result;
    default:
LABEL_3:
      operator new();
  }
}

__n128 VnConvSetOptions(__n128 *a1)
{
  uint64_t v1 = VnCharsetLibObj;
  unint64_t v2 = a1[1].n128_u64[0];
  __n128 result = *a1;
  *(__n128 *)(VnCharsetLibObj + 88) = *a1;
  *(void *)(v1 + 104) = v2;
  return result;
}

__n128 VnConvGetOptions(__n128 *a1)
{
  unint64_t v1 = *(void *)(VnCharsetLibObj + 104);
  __n128 result = *(__n128 *)(VnCharsetLibObj + 88);
  *a1 = result;
  a1[1].n128_u64[0] = v1;
  return result;
}

uint64_t StdVnToUpper(int a1)
{
  return a1 & ~((a1 - 0x10000) < 0xBA);
}

uint64_t StdVnToLower(uint64_t result)
{
  if ((result & 1) != 0 || (result - 0x10000) >= 0xBA) {
    return result;
  }
  else {
    return (result + 1);
  }
}

uint64_t StdVnGetRoot(uint64_t result)
{
  if ((result - 0x10000) <= 0xD4) {
    return (StdVnRootChar[(result - 0x10000)] + 0x10000);
  }
  return result;
}

id createAutoshiftRegularExpression(NSString *a1, NSString *a2, NSString *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = character_set_pattern_from_string(&stru_1F3F896F8.isa);
  uint64_t v9 = NSString;
  unsigned int v10 = character_set_pattern_from_string(v7);

  uint64_t v11 = character_set_pattern_from_string(v6);

  unsigned int v12 = [v9 stringWithFormat:@"\\A|\\n|(?:%@){3}|((?:\\b\\w++(?:\\.\\w++)*)?(?:%@))(?:%@)*(?:%@)", v8, v10, v11, v8];

  __int16 v13 = NSString;
  __int16 v14 = character_set_pattern_from_string(v5);

  int v15 = [v13 stringWithFormat:@"(?:%@)(?:%@)*(?:%@)*\\Z", v12, v8, v14];

  id v21 = 0;
  unsigned int v16 = (void *)[objc_alloc(MEMORY[0x1E4F28FD8]) initWithPattern:v15 options:16 error:&v21];
  id v17 = v21;
  if (!v16)
  {
    if (TICanLogMessageAtLevel_onceToken != -1) {
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
    }
    unsigned __int8 v18 = TIOSLogFacility();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = [NSString stringWithFormat:@"%s failed: %@", "createAutoshiftRegularExpression", v17];
      *(_DWORD *)int buf = 138412290;
      CFStringRef v23 = v20;
      _os_log_debug_impl(&dword_1E3F0E000, v18, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
    }
  }

  return v16;
}

id character_set_pattern_from_string(NSString *a1)
{
  unint64_t v1 = NSString;
  unint64_t v2 = [MEMORY[0x1E4F28FD8] escapedPatternForString:a1];
  uint64_t v3 = [v1 stringWithFormat:@"[%@]", v2];

  uint64_t v4 = [v3 stringByReplacingOccurrencesOfString:@"-" withString:@"\\-"];

  return v4;
}

void TIFitAffineTransform::TIFitAffineTransform(TIFitAffineTransform *this, double a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)this = xmmword_1E4154DF0;
  *((_OWORD *)this + 1) = xmmword_1E4154E00;
  *((_OWORD *)this + 2) = xmmword_1E4154E10;
  *((_OWORD *)this + 3) = xmmword_1E4154E20;
  *((int64x2_t *)this + 4) = vdupq_n_s64(0x3FC999999999999AuLL);
  *((_OWORD *)this + 5) = xmmword_1E4154E30;
  *((void *)this + 12) = 0x4054000000000000;
  double v3 = log1p(2.71828182);
  *((double *)this + 13) = -v3;
  *((double *)this + 14) = 0.999999998 - v3;
  *((long double *)this + 15) = exp(0.999999998 - v3);
  *((long double *)this + 16) = exp(-v3);
  *((double *)this + 17) = -1.14472989 - v3 + -8.76405327;
  *((void *)this + 18) = 0x4080000000000000;
  operator new();
}

void Translate_A(const TIFitAffineMLLMatrix *a1, CGPoint *a2, double *a3)
{
  v20[2] = *(void **)MEMORY[0x1E4F143B8];
  int64x2_t v18 = (int64x2_t)xmmword_1E4156970;
  uint64_t v19 = 0x3FF0000000000000;
  TIFitAffineMLLMatrix::addRow((uint64_t *)a2, (uint64_t)&v18, 3, v17);
  unint64_t v5 = 0;
  int64x2_t v18 = vdupq_n_s64(3uLL);
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v19 = (uint64_t)v20;
  do
  {
    *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v18, v5, v5) = 0x3FF0000000000000;
    ++v5;
  }
  while (v5 != 3);
  double v6 = *a3 * -0.001953125;
  *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v18, 0, 2uLL) = v6;
  double v7 = a3[1] * -0.001953125;
  *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v18, 1uLL, 2uLL) = v7;
  unint64_t v8 = 0;
  *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v18, 2uLL, 2uLL) = 0x3FF0000000000000;
  int64x2_t v14 = vdupq_n_s64(3uLL);
  v16[0] = 0;
  v16[1] = 0;
  int v15 = v16;
  do
  {
    *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v14, v8, v8) = 0x3FF0000000000000;
    ++v8;
  }
  while (v8 != 3);
  double v9 = *a3 * 0.001953125;
  *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v14, 0, 2uLL) = v9;
  double v10 = a3[1] * 0.001953125;
  *(double *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v14, 1uLL, 2uLL) = v10;
  *(void *)TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)&v14, 2uLL, 2uLL) = 0x3FF0000000000000;
  TIFitAffineMLLMatrix::operator*((TIFitAffineMLLMatrix *)&v14, (TIFitAffineMLLMatrix *)v17, (TIFitAffineMLLMatrix *)v12);
  TIFitAffineMLLMatrix::operator*((TIFitAffineMLLMatrix *)v12, (TIFitAffineMLLMatrix *)&v18, a1);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v13);
  TIFitAffineMLLMatrix::deleteRow(a1, 2, v12);
  TIFitAffineMLLMatrix::operator=((uint64_t)a1, (uint64_t)v12, (uint64_t)v11);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v11[3]);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v13);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v16[0]);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v20[0]);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy((void *)v17[3]);
}

uint64_t std::__shared_ptr_pointer<TIFitAffineHand *,std::shared_ptr<TIFitAffineHand>::__shared_ptr_default_delete<TIFitAffineHand,TIFitAffineHand>,std::allocator<TIFitAffineHand>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<TIFitAffineHand *,std::shared_ptr<TIFitAffineHand>::__shared_ptr_default_delete<TIFitAffineHand,TIFitAffineHand>,std::allocator<TIFitAffineHand>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void TIFitAffineTransform::resetState(TIFitAffineTransform *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)this = xmmword_1E4154DF0;
  *((_OWORD *)this + 1) = xmmword_1E4154E00;
  *((_OWORD *)this + 2) = xmmword_1E4154E10;
  *((_OWORD *)this + 3) = xmmword_1E4154E20;
  *((int64x2_t *)this + 4) = vdupq_n_s64(0x3FC999999999999AuLL);
  *((_OWORD *)this + 5) = xmmword_1E4154E30;
  *((void *)this + 12) = 0x4054000000000000;
  double v2 = log1p(2.71828182);
  *((double *)this + 13) = -v2;
  *((double *)this + 14) = 0.999999998 - v2;
  *((long double *)this + 15) = exp(0.999999998 - v2);
  *((long double *)this + 16) = exp(-v2);
  *((double *)this + 17) = -1.14472989 - v2 + -8.76405327;
  *((void *)this + 18) = 0x4080000000000000;
  *(_OWORD *)((char *)this + 184) = xmmword_1E4154E40;
  *(_OWORD *)unint64_t v26 = xmmword_1E4156940;
  *(_OWORD *)&v26[16] = *(_OWORD *)algn_1E4156950;
  long long v27 = xmmword_1E4156960;
  TIFitAffineMLLMatrix::setValues((uint64_t)this + 200, (uint64_t)v26, 6);
  long long v3 = *((_OWORD *)this + 4);
  *(void *)unint64_t v26 = *((void *)this + 8);
  *(_OWORD *)&v26[8] = v3;
  TIFitAffineMLLMatrix::setDiagValues((uint64_t)this + 240, (uint64_t)v26, 3);
  TIFitAffineMLLMatrix::operator*=((TIFitAffineTransform *)((char *)this + 240), *((double *)this + 18) * *((double *)this + 18));
  TIFitAffineMLLMatrix::operator*((TIFitAffineTransform *)((char *)this + 200), (TIFitAffineTransform *)((char *)this + 240), (TIFitAffineMLLMatrix *)v26);
  TIFitAffineMLLMatrix::operator=((uint64_t)this + 280, (uint64_t)v26, (uint64_t)v24);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v25);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)&v26[24]);
  TIFitAffineMLLMatrix::operator*((TIFitAffineTransform *)((char *)this + 200), (TIFitAffineTransform *)((char *)this + 240), (TIFitAffineMLLMatrix *)&v20);
  TIFitAffineMLLMatrix::transform((int8x16_t *)((char *)this + 200), &v18);
  TIFitAffineMLLMatrix::operator*((TIFitAffineMLLMatrix *)&v20, (TIFitAffineMLLMatrix *)&v18, (TIFitAffineMLLMatrix *)v26);
  TIFitAffineMLLMatrix::operator=((uint64_t)this + 320, (uint64_t)v26, (uint64_t)v22);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v23);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)&v26[24]);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v19);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v21);
  uint64_t v4 = *((void *)this + 10);
  *((double *)this + 45) = *((double *)this + 11) + (double)*((unint64_t *)this + 23);
  *(void *)unint64_t v26 = v4;
  *(void *)&v26[8] = v4;
  TIFitAffineMLLMatrix::setValues((uint64_t)this + 376, (uint64_t)v26, 2);
  TIFitAffineMLLMatrix::pow((TIFitAffineTransform *)((char *)this + 376), 2.0, v26);
  TIFitAffineMLLMatrix::values((TIFitAffineMLLMatrix *)v26, (double **)&v20);
  TIFitAffineMLLMatrix::setDiagValues((uint64_t)this + 416, (uint64_t *)&v20);
  if ((void)v20) {
    operator delete((void *)v20);
  }
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)&v26[24]);
  TIFitAffineMLLMatrix::operator*((void *)this + 52, (TIFitAffineMLLMatrix *)v26, *((double *)this + 45) - (double)*((unint64_t *)this + 23) + -1.0);
  TIFitAffineMLLMatrix::operator=((uint64_t)this + 456, (uint64_t)v26, (uint64_t)v16);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v17);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)&v26[24]);
  TIFitAffineMLLMatrix::operator=((uint64_t)this + 496, (uint64_t)this + 416, (uint64_t)v14);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v15);
  TIFitAffineMLLMatrix::operator=((uint64_t)this + 536, (uint64_t)this + 416, (uint64_t)v12);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v13);
  TIFitAffineMLLMatrix::operator=((uint64_t)this + 576, (uint64_t)this + 200, (uint64_t)v10);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v11);
  TIFitAffineMLLMatrix::operator=((uint64_t)this + 616, (uint64_t)this + 200, (uint64_t)v8);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v9);
  long long v20 = *(_OWORD *)(*((void *)this + 19) + 56);
  Translate_A((const TIFitAffineMLLMatrix *)v26, (CGPoint *)this + 36, (double *)&v20);
  TIFitAffineMLLMatrix::operator=((uint64_t)this + 656, (uint64_t)v26, (uint64_t)v6);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v7);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)&v26[24]);
  long long v20 = *(_OWORD *)(*((void *)this + 21) + 56);
  Translate_A((const TIFitAffineMLLMatrix *)v26, (CGPoint *)((char *)this + 616), (double *)&v20);
  TIFitAffineMLLMatrix::operator=((uint64_t)this + 696, (uint64_t)v26, (uint64_t)v5);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v5[3]);
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)&v26[24]);
  *((_OWORD *)this + 46) = 0u;
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*((void **)this + 97));
  *((void *)this + 96) = (char *)this + 776;
  *(_OWORD *)((char *)this + 776) = 0u;
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*((void **)this + 102));
  *((void *)this + 101) = (char *)this + 816;
  *((_OWORD *)this + 51) = 0u;
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*((void **)this + 107));
  *((void *)this + 106) = (char *)this + 856;
  *(_OWORD *)((char *)this + 856) = 0u;
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*((void **)this + 112));
  *((void *)this + 111) = (char *)this + 896;
  *((_OWORD *)this + 56) = 0u;
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*((void **)this + 117));
  *((void *)this + 116) = (char *)this + 936;
  *(_OWORD *)((char *)this + 936) = 0u;
  std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*((void **)this + 122));
  *((void *)this + 121) = (char *)this + 976;
  *((_OWORD *)this + 61) = 0u;
  *((double *)this + 124) = 1.0 - *((double *)this + 7);
  *(_OWORD *)((char *)this + 1000) = 0u;
}

void TIFitAffineTransform::processLocation(TIFitAffineHand **this, const CGPoint *a2)
{
  if (TIFitAffineHand::findClosestKeyRectForPoint(this[19], *a2, &v5))
  {
    int v4 = 1;
  }
  else
  {
    if (!TIFitAffineHand::findClosestKeyRectForPoint(this[21], *a2, &v5)) {
      return;
    }
    int v4 = 2;
  }
  TIFitAffineTransform::processLocation((uint64_t)this, &a2->x, v4, &v5);
}

void TIFitAffineTransform::processLocation(uint64_t a1, double *a2, int a3, CGRect *a4)
{
  v95[3] = *(void **)MEMORY[0x1E4F143B8];
  double v8 = *(double *)(a1 + 992);
  *(double *)(a1 + 736) = v8 * *(double *)(a1 + 736);
  *(double *)(a1 + 744) = v8 * *(double *)(a1 + 744);
  double v9 = (long long *)(a1 + 752);
  TIFitAffineMLLMatrix::operator*=((TIFitAffineMLLMatrix *)(a1 + 752), v8);
  TIFitAffineMLLMatrix::operator*=((TIFitAffineMLLMatrix *)(a1 + 792), v8);
  double v10 = *(double *)(a1 + 992);
  uint64_t v11 = (TIFitAffineMLLMatrix *)(a1 + 832);
  TIFitAffineMLLMatrix::operator*=((TIFitAffineMLLMatrix *)(a1 + 832), v10);
  TIFitAffineMLLMatrix::operator*=((TIFitAffineMLLMatrix *)(a1 + 872), v10);
  double v12 = *(double *)(a1 + 992);
  __int16 v13 = (TIFitAffineMLLMatrix *)(a1 + 912);
  TIFitAffineMLLMatrix::operator*=((TIFitAffineMLLMatrix *)(a1 + 912), v12);
  TIFitAffineMLLMatrix::operator*=((TIFitAffineMLLMatrix *)(a1 + 952), v12);
  if (a3)
  {
    double MidX = CGRectGetMidX(*a4);
    double MidY = CGRectGetMidY(*a4);
    unsigned int v16 = (uint64_t *)(a1 + 152);
    unint64_t v57 = (TIFitAffineHand **)(a1 + 152);
    if (a3 != 1) {
      unsigned int v16 = (uint64_t *)(a1 + 168);
    }
    uint64_t v17 = *v16;
    double v18 = *(double *)(v17 + 56);
    double v19 = *(double *)(v17 + 64);
    *(double *)v93.i64 = MidX - v18;
    *(double *)&v93.i64[1] = MidY - v19;
    int64_t v94 = *(void ***)(a1 + 144);
    TIFitAffineMLLMatrix::TIFitAffineMLLMatrix(&v83, 3, 1, (uint64_t)&v93, 3);
    double v20 = a2[1] - v19;
    *(double *)v93.i64 = *a2 - v18;
    *(double *)&v93.i64[1] = v20;
    TIFitAffineMLLMatrix::TIFitAffineMLLMatrix(&v81, 2, 1, (uint64_t)&v93, 2);
    if (a3 == 1)
    {
      TIFitAffineMLLMatrix::operator+(v9, a1 + 240, (uint64_t)v79);
      TIFitAffineMLLMatrix::operator+((long long *)(a1 + 912), a1 + 280, (uint64_t)&v77);
      TIFitAffineMLLMatrix::operator+((long long *)(a1 + 832), a1 + 320, (uint64_t)&v75);
      TIFitAffineMLLMatrix::operator/((TIFitAffineMLLMatrix *)v79, (TIFitAffineMLLMatrix *)&v77, (TIFitAffineMLLMatrix *)&v93);
      id v21 = (TIFitAffineMLLMatrix *)(a1 + 576);
      uint64_t v22 = a1 + 576;
    }
    else
    {
      TIFitAffineMLLMatrix::operator+((long long *)(a1 + 792), a1 + 240, (uint64_t)v79);
      TIFitAffineMLLMatrix::operator+((long long *)(a1 + 952), a1 + 280, (uint64_t)&v77);
      TIFitAffineMLLMatrix::operator+((long long *)(a1 + 872), a1 + 320, (uint64_t)&v75);
      TIFitAffineMLLMatrix::operator/((TIFitAffineMLLMatrix *)v79, (TIFitAffineMLLMatrix *)&v77, (TIFitAffineMLLMatrix *)&v93);
      id v21 = (TIFitAffineMLLMatrix *)(a1 + 576);
      uint64_t v22 = a1 + 616;
    }
    TIFitAffineMLLMatrix::operator=(v22, (uint64_t)&v93, (uint64_t)v73);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v74);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v95[0]);
    CFStringRef v23 = (CGPoint *)v21;
    if (a3 == 1) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = (TIFitAffineMLLMatrix *)(a1 + 616);
    }
    TIFitAffineMLLMatrix::transform(&v77, &v91);
    TIFitAffineMLLMatrix::operator*(v24, (TIFitAffineMLLMatrix *)&v91, (TIFitAffineMLLMatrix *)&v93);
    TIFitAffineMLLMatrix::operator-(&v75, (uint64_t)&v93, (uint64_t)&v71);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v95[0]);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v92);
    TIFitAffineMLLMatrix::operator+(&v71, a1 + 456, (uint64_t)v70);
    if (a3 == 1)
    {
      TIFitAffineMLLMatrix::operator/(v70, (TIFitAffineMLLMatrix *)&v93, *(double *)(a1 + 736) + *(double *)(a1 + 360) - (double)*(unint64_t *)(a1 + 184) + -1.0);
      float v25 = (void *)(a1 + 496);
      uint64_t v26 = a1 + 496;
    }
    else
    {
      TIFitAffineMLLMatrix::operator/(v70, (TIFitAffineMLLMatrix *)&v93, *(double *)(a1 + 744) + *(double *)(a1 + 360) - (double)*(unint64_t *)(a1 + 184) + -1.0);
      float v25 = (void *)(a1 + 496);
      uint64_t v26 = a1 + 536;
    }
    long long v27 = (double *)(a1 + 736);
    TIFitAffineMLLMatrix::operator=(v26, (uint64_t)&v93, (uint64_t)v68);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v69);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v95[0]);
    v88[0] = 1.0;
    TIFitAffineMLLMatrix::transform(&v83, &v89);
    TIFitAffineMLLMatrix::operator/((TIFitAffineMLLMatrix *)v79, (TIFitAffineMLLMatrix *)&v89, (TIFitAffineMLLMatrix *)&v91);
    TIFitAffineMLLMatrix::operator*((TIFitAffineMLLMatrix *)&v91, (TIFitAffineMLLMatrix *)&v83, (TIFitAffineMLLMatrix *)&v93);
    operator+((TIFitAffineMLLMatrix *)&v93, v88, (TIFitAffineMLLMatrix *)v66);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v95[0]);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v92);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v90);
    double v28 = 1.0 / TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v66, 0, 0);
    if (a3 == 1)
    {
      double v29 = *v27 + *(double *)(a1 + 360);
      TIFitAffineMLLMatrix::operator/(v25, (TIFitAffineMLLMatrix *)v65, v28);
      unsigned int v30 = v23;
      char v31 = (TIFitAffineMLLMatrix *)v23;
    }
    else
    {
      double v29 = *(double *)(a1 + 744) + *(double *)(a1 + 360);
      TIFitAffineMLLMatrix::operator/((void *)(a1 + 536), (TIFitAffineMLLMatrix *)v65, v28);
      char v31 = (TIFitAffineMLLMatrix *)(a1 + 616);
      unsigned int v30 = v23;
    }
    double v32 = v29 + 1.0;
    TIFitAffineMLLMatrix::operator*(v31, (TIFitAffineMLLMatrix *)&v83, (TIFitAffineMLLMatrix *)v60);
    TIFitAffineMLLMatrix::operator-((long long *)v81.i8, (uint64_t)v60, (uint64_t)&v62);
    int8x16_t v93 = v62;
    v95[0] = 0;
    v95[1] = 0;
    int64_t v94 = v95;
    std::map<unsigned long,double>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,double>,std::__tree_node<std::__value_type<unsigned long,double>,void *> *,long>>>((uint64_t *)&v94, v63, &v64);
    unint64_t v33 = v93.u64[1];
    if (v65[1] == v93.i64[1])
    {
      TIFitAffineMLLMatrix::transform(&v93, &v89);
      TIFitAffineMLLMatrix::operator=((uint64_t)&v93, (uint64_t)&v89, (uint64_t)&v91);
      std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v92);
      std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v90);
    }
    else
    {
      unint64_t v33 = v93.i64[0];
    }
    TIFitAffineMLLMatrix::determinant((TIFitAffineMLLMatrix *)v65);
    double v35 = v34;
    TIFitAffineMLLMatrix::cholesky((TIFitAffineMLLMatrix *)v65, (uint64_t)&v89);
    TIFitAffineMLLMatrix::operator/((TIFitAffineMLLMatrix *)&v89, (TIFitAffineMLLMatrix *)&v93, (TIFitAffineMLLMatrix *)v88);
    double v36 = log(sqrt(v35));
    TIFitAffineMLLMatrix::pow((TIFitAffineMLLMatrix *)v88, 2.0, v85);
    TIFitAffineMLLMatrix::sumRows((char *)v85, (TIFitAffineMLLMatrix *)v86);
    double v37 = TIFitAffineMLLMatrix::valueAt((TIFitAffineMLLMatrix *)v86, 0, 0);
    long double v38 = (v32 + (double)v33) * 0.5 * log(v37 / v32 + 1.0);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v87);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy((void *)v85[3]);
    long double v39 = v36 + (double)(v33 >> 1) * log(v32 * 3.14159265);
    double v40 = gammaln((v32 + (double)v33) * 0.5);
    double v41 = v40 - gammaln(v32 * 0.5) - v38 - v39;
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(*(void **)&v88[3]);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v90);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v95[0]);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v64);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v61);
    double v42 = *(double *)(a1 + 120);
    double v43 = v42 / (exp(*(double *)(a1 + 136) - v41) + 1.0);
    v88[0] = v43;
    if (a3 != 1) {
      long long v27 = (double *)(a1 + 744);
    }
    *long long v27 = v43 + *v27;
    operator*((uint64_t)v88, &v83, (TIFitAffineMLLMatrix *)&v91);
    TIFitAffineMLLMatrix::transform(&v83, &v89);
    TIFitAffineMLLMatrix::operator*((TIFitAffineMLLMatrix *)&v91, (TIFitAffineMLLMatrix *)&v89, (TIFitAffineMLLMatrix *)&v93);
    if (a3 == 1) {
      char v44 = (TIFitAffineMLLMatrix *)v9;
    }
    else {
      char v44 = (TIFitAffineMLLMatrix *)(a1 + 792);
    }
    TIFitAffineMLLMatrix::operator+=(v44, (uint64_t)&v93);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v95[0]);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v90);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v92);
    operator*((uint64_t)v88, &v81, (TIFitAffineMLLMatrix *)&v91);
    TIFitAffineMLLMatrix::transform(&v81, &v89);
    TIFitAffineMLLMatrix::operator*((TIFitAffineMLLMatrix *)&v91, (TIFitAffineMLLMatrix *)&v89, (TIFitAffineMLLMatrix *)&v93);
    if (a3 != 1) {
      uint64_t v11 = (TIFitAffineMLLMatrix *)(a1 + 872);
    }
    TIFitAffineMLLMatrix::operator+=(v11, (uint64_t)&v93);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v95[0]);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v90);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v92);
    operator*((uint64_t)v88, &v81, (TIFitAffineMLLMatrix *)&v91);
    TIFitAffineMLLMatrix::transform(&v83, &v89);
    TIFitAffineMLLMatrix::operator*((TIFitAffineMLLMatrix *)&v91, (TIFitAffineMLLMatrix *)&v89, (TIFitAffineMLLMatrix *)&v93);
    if (a3 != 1) {
      __int16 v13 = (TIFitAffineMLLMatrix *)(a1 + 952);
    }
    TIFitAffineMLLMatrix::operator+=(v13, (uint64_t)&v93);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v95[0]);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v90);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v92);
    double v45 = v41 + *(double *)(a1 + 112);
    double v46 = *(double *)(a1 + 136);
    if (v45 >= v46) {
      double v47 = v41 + *(double *)(a1 + 112);
    }
    else {
      double v47 = *(double *)(a1 + 136);
    }
    if (v45 >= v46) {
      double v45 = *(double *)(a1 + 136);
    }
    long double v48 = exp(v45 - v47);
    long double v49 = log1p(v48) + v47;
    *(long double *)(a1 + 1000) = *(double *)(a1 + 1000) + v49;
    *(long double *)(a1 + 1008) = *(double *)(a1 + 1008) + v88[0] * (v49 * v49);
    if (a3 == 1)
    {
      int8x16_t v91 = *(int8x16_t *)(*(void *)(a1 + 152) + 56);
      Translate_A((const TIFitAffineMLLMatrix *)&v93, v30, (double *)v91.i64);
      int v50 = (const TIFitAffineMLLMatrix *)(a1 + 656);
      uint64_t v51 = a1 + 656;
    }
    else
    {
      int8x16_t v91 = *(int8x16_t *)(*(void *)(a1 + 168) + 56);
      Translate_A((const TIFitAffineMLLMatrix *)&v93, (CGPoint *)(a1 + 616), (double *)v91.i64);
      int v50 = (const TIFitAffineMLLMatrix *)(a1 + 656);
      uint64_t v51 = a1 + 696;
    }
    TIFitAffineMLLMatrix::operator=(v51, (uint64_t)&v93, (uint64_t)v58);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v59);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v95[0]);
    if (a3 == 1)
    {
      char v52 = (TIFitAffineHand **)(a1 + 152);
      unint64_t v53 = *v57;
      char v54 = v50;
    }
    else
    {
      uint64_t v55 = *(TIFitAffineHand **)(a1 + 168);
      char v52 = (TIFitAffineHand **)(a1 + 168);
      unint64_t v53 = v55;
      char v54 = (const TIFitAffineMLLMatrix *)(v52 + 66);
    }
    TIFitAffineHand::updateFromMatrix(v53, v54, 512.0);
    long long v56 = *v52;
    TIFitAffineMLLMatrix::operator*(v65, (TIFitAffineMLLMatrix *)&v93, v32 / (v32 + -2.0));
    TIFitAffineHand::setCovar(v56, (const TIFitAffineMLLMatrix *)&v93);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v95[0]);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy((void *)v65[3]);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v67);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy((void *)v70[3]);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v72);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v76);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v78);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v80);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v82);
    std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::destroy(v84);
  }
}

long double gammaln(long double a1)
{
  uint64_t v2 = 0;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  double v3 = a1 * a1;
  double v4 = a1;
  do
  {
    *(double *)&v8[v2 * 8] = *(double *)&gammaln_asy_exp(long double)::B[v2] / v4;
    double v4 = v3 * v4;
    ++v2;
  }
  while (v2 != 3);
  double v5 = 0.0;
  for (uint64_t i = 16; i != -8; i -= 8)
    double v5 = v5 + *(double *)&v8[i];
  return 0.918938533 - a1 + (a1 + -0.5) * log(a1) + v5;
}

void TIFitAffineTransform::processLocation(TIFitAffineHand **this, const CGPoint *a2, CGRect *a3)
{
  int HandEnumForKeyRect = TIFitAffineTransform::getHandEnumForKeyRect(this, a3);

  TIFitAffineTransform::processLocation((uint64_t)this, &a2->x, HandEnumForKeyRect, a3);
}

uint64_t TIFitAffineTransform::getHandEnumForKeyRect(TIFitAffineHand **this, const CGRect *a2)
{
  if (TIFitAffineHand::containsKeyRect(this[19], a2)) {
    return 1;
  }
  if (TIFitAffineHand::containsKeyRect(this[21], a2)) {
    return 2;
  }
  return 0;
}

uint64_t __Block_byref_object_copy__20956(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20957(uint64_t a1)
{
}

void KB::NgramCandidateRefinery::clean_favonius_generated_candidates(uint64_t a1, uint64_t **a2)
{
  double v3 = *a2;
  double v4 = a2[1];
  if (*a2 == v4) {
    goto LABEL_13;
  }
  double v6 = a2[1];
  while ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 32) + 200))(*(void *)(a1 + 32), v3))
  {
    v3 += 125;
    if (v3 == v4) {
      goto LABEL_14;
    }
  }
  if (v3 != v4)
  {
    double v7 = v3 + 125;
    if (v3 + 125 != v4)
    {
      double v6 = v3;
      do
      {
        if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 32) + 200))(*(void *)(a1 + 32), v7))
        {
          KB::Candidate::operator=(v6, v7);
          v6 += 125;
        }
        v7 += 125;
      }
      while (v7 != v4);
      goto LABEL_14;
    }
LABEL_13:
    double v6 = v3;
  }
LABEL_14:
  double v8 = (KB::Candidate *)a2[1];

  std::vector<KB::Candidate>::erase((uint64_t)a2, v6, v8);
}

uint64_t KB::NgramCandidateRefinery::lexicon_id_vector(KB::NgramCandidateRefinery *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 48))();
}

uint64_t KB::NgramCandidateRefinery::dictionary(KB::NgramCandidateRefinery *this)
{
  return *((void *)this + 3);
}

uint64_t KB::NgramCandidateRefinery::get_num_candidates@<X0>(uint64_t result@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  if (a2 == 5
    && (uint64_t v4 = result, (result = *(void *)(result + 32)) != 0)
    && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result), (result & 1) != 0))
  {
    double v5 = *(uint64_t (**)(void))(**(void **)(v4 + 32) + 224);
    return v5();
  }
  else
  {
    *a3 = 0;
    a3[16] = 0;
  }
  return result;
}

uint64_t KB::NgramCandidateRefinery::clear_cache(KB::NgramCandidateRefinery *this)
{
  uint64_t result = *((void *)this + 4);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if (result)
    {
      double v3 = *(uint64_t (**)(void))(**((void **)this + 4) + 472);
      return v3();
    }
  }
  return result;
}

uint64_t KB::NgramCandidateRefinery::register_inline_completion_acceptance_rejection(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 544))();
}

void KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(void *a1@<X0>, const KB::Candidate **a2@<X1>, const KB::LanguageModelContext *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v38[4] = *MEMORY[0x1E4F143B8];
  double v8 = (std::__shared_weak_count *)a1[2];
  if (!v8 || (v13 = (std::__shared_weak_count *)a1[1], (int64x2_t v14 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:nn180100]();
  }
  int v15 = v14;
  double v36 = v13;
  double v37 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__value_func[abi:nn180100]((uint64_t)v38, a5);
  std::__shared_weak_count::__release_shared[abi:nn180100](v15);
  unint64_t v33 = v13;
  double v34 = v37;
  atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__value_func[abi:nn180100]((uint64_t)v35, (uint64_t)v38);
  uint64_t v16 = a1[4];
  v29[0] = v33;
  v29[1] = v34;
  atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__value_func[abi:nn180100]((uint64_t)v30, (uint64_t)v35);
  uint64_t v17 = (char *)operator new(0x38uLL);
  double v18 = v17;
  *(void *)uint64_t v17 = &unk_1F3F797B8;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)v29;
  v29[0] = 0;
  v29[1] = 0;
  if (v31)
  {
    if (v31 == v30)
    {
      *((void *)v17 + 6) = v17 + 24;
      (*(void (**)(void *))(v30[0] + 24))(v30);
    }
    else
    {
      *((void *)v17 + 6) = v31;
      char v31 = 0;
    }
  }
  else
  {
    *((void *)v17 + 6) = 0;
  }
  v32[3] = v18;
  (*(void (**)(int32x2_t **__return_ptr, uint64_t, const KB::Candidate **, const KB::LanguageModelContext *, uint64_t, void *))(*(void *)v16 + 536))(v26, v16, a2, a3, a4, v32);
  std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v32);
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100](v30);
  if (v29[1]) {
    std::__shared_weak_count::__release_weak(v29[1]);
  }
  if (v27)
  {
    HIDWORD(v25) = 0;
    long long v21 = 0u;
    memset(v22, 0, sizeof(v22));
    long long v23 = 0u;
    memset(v24, 0, sizeof(v24));
    KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0::operator()((uint64_t)&v36, v26, *a2, a3, (KB::CandidateCollection *)&v21, 0);
    *(_OWORD *)a6 = v21;
    *(void *)(a6 + 16) = *(void *)&v22[0];
    long long v21 = 0uLL;
    *(_OWORD *)(a6 + 24) = *(_OWORD *)((char *)v22 + 8);
    *(void *)(a6 + 40) = *((void *)&v22[1] + 1);
    memset(v22, 0, sizeof(v22));
    *(_OWORD *)(a6 + 48) = v23;
    *(void *)(a6 + 64) = *(void *)&v24[0];
    long long v23 = 0uLL;
    *(_OWORD *)(a6 + 72) = *(_OWORD *)((char *)v24 + 8);
    memset(v24, 0, sizeof(v24));
    uint64_t v19 = v25;
    *(void *)(a6 + 88) = *((void *)&v24[1] + 1);
    *(void *)(a6 + 96) = v19;
    double v28 = (void **)v24 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v28);
    double v28 = (void **)&v23;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v28);
    double v28 = (void **)v22 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v28);
    double v28 = (void **)&v21;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v28);
    int v20 = v27;
    *(unsigned char *)(a6 + 104) = 1;
    if (v20)
    {
      *(void *)&long long v21 = v26;
      std::vector<KB::LanguageModel::PredictionInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v21);
    }
  }
  else
  {
    *(unsigned char *)a6 = 0;
    *(unsigned char *)(a6 + 104) = 0;
  }
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100](v35);
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100](v38);
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
}

void KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0::operator()(uint64_t a1, int32x2_t **a2, const KB::Candidate *a3, const KB::LanguageModelContext *a4, KB::CandidateCollection *a5, char a6)
{
  v19[125] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (v11 && (__int16 v13 = std::__shared_weak_count::lock(v11)) != 0)
  {
    int64x2_t v14 = v13;
    int v15 = *(KB::NgramCandidateRefinery **)a1;
    if (*(void *)a1)
    {
      uint64_t v16 = *a2;
      for (uint64_t i = a2[1]; v16 != i; v16 += 20)
      {
        KB::Candidate::Candidate((KB::Candidate *)v19, a3);
        while (v19[0] && !KB::Word::is_linguistically_void((KB::Word *)(v19[1] + 240 * v19[0] - 240)))
          KB::Candidate::pop_last_word((KB::Candidate *)v19);
        KB::NgramCandidateRefinery::post_processing_predictions(v15, v16, (const KB::Candidate *)v19, a4, a5);
        KB::Candidate::~Candidate((KB::Candidate *)v19);
      }
    }
    std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::operator()(*(void *)(a1 + 40), (uint64_t)a5, (uint64_t)a3, (uint64_t)a4, a6);
    std::__shared_weak_count::__release_shared[abi:nn180100](v14);
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 40);
    std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::operator()(v18, (uint64_t)a5, (uint64_t)a3, (uint64_t)a4, a6);
  }
}

uint64_t KB::NgramCandidateRefinery::post_processing_predictions(KB::NgramCandidateRefinery *this, int32x2_t *a2, const KB::Candidate *a3, const KB::LanguageModelContext *a4, KB::CandidateCollection *a5)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  KB::Candidate::Candidate((KB::Candidate *)&v57, a3);
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v37, a4);
  if (a2[18].i8[4]) {
    char v59 = 1;
  }
  if (*(void *)&a2[13] != *(void *)&a2[12])
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a2[13] - *(void *)&a2[12]) >> 3) > i; ++i)
    {
      double v10 = (KB::DictionaryContainer *)(*(uint64_t (**)(KB::NgramCandidateRefinery *))(*(void *)this + 120))(this);
      uint64_t v11 = (const char *)(*(void *)&a2[12] + v8);
      if (v11[23] < 0) {
        uint64_t v11 = *(const char **)v11;
      }
      KB::String::String((KB::String *)&v47, v11);
      if (a2[18].i8[4]) {
        int v12 = 0;
      }
      else {
        int v12 = a2[18].i32[0];
      }
      KB::DictionaryContainer::word_with_string_exhaustive(v10, (const KB::String *)&v47, v12, (KB::Word *)v51);
      if (v48) {
        BOOL v13 = BYTE6(v47) == 1;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13) {
        free(v48);
      }
      if (v56.lexicon_id == -2) {
        v56.lexicon_id = a2[18].u32[0];
      }
      int v14 = a2[18].u8[6];
      if (!LOWORD(v51[0]) && !a2[18].i8[6])
      {
        KB::Word::~Word((KB::Word *)v51);
LABEL_61:
        uint64_t v28 = 0;
        goto LABEL_73;
      }
      if (a2[18].i8[5]) {
        unsigned int v54 = v54 & 0xFFFBFE7B | 0x100;
      }
      if (v14) {
        v54 |= 0x200u;
      }
      int v15 = (const char *)(*(void *)&a2[15] + v8);
      if (v15[23] < 0) {
        int v15 = *(const char **)v15;
      }
      KB::String::String((KB::String *)&v47, v15);
      KB::String::operator=((KB::String *)v51, (KB::String *)&v47);
      if (v48 && BYTE6(v47) == 1) {
        free(v48);
      }
      unsigned int v54 = v54 & 0xFAFFFFFF | ((a2[5].i32[0] & 1) << 24) & 0xFBFFFFFF | ((((unsigned __int32)a2[5].i32[0] >> 1) & 1) << 26);
      if (a2[11].i8[7] >= 0) {
        uint64_t v16 = (const char *)&a2[9];
      }
      else {
        uint64_t v16 = (const char *)a2[9];
      }
      KB::String::String((KB::String *)&v47, v16);
      KB::String::operator=((KB::String *)v53, (KB::String *)&v47);
      if (v48 && BYTE6(v47) == 1) {
        free(v48);
      }
      v53[8] = (*(float (**)(void, void, unsigned char *))(**((void **)this + 4) + 456))(*((void *)this + 4), v56.lexicon_id, v37);
      uint64_t v17 = *((void *)this + 4);
      KB::Word::capitalized_string((KB::Word *)v51, (uint64_t)&v47);
      int v18 = (*(uint64_t (**)(uint64_t, size_t *, uint64_t, unsigned char *, char *, uint64_t))(*(void *)v17 + 496))(v17, &v47, 0xFFFFFFFFLL, v37, (char *)this + 24, 1);
      if (v48 && BYTE6(v47) == 1) {
        free(v48);
      }
      if (v18) {
        v54 |= 0x40000000u;
      }
      uint64_t v19 = (*(uint64_t (**)(KB::NgramCandidateRefinery *))(*(void *)this + 120))(this);
      WORD2(v47) = 0;
      BYTE6(v47) = 0;
      long double v48 = ".,;:!?";
      LODWORD(v47) = 1048582;
      char v49 = 0;
      if (v57)
      {
        if ((*(unsigned char *)(v58 + 240 * (v57 - 1) + 135) & 4) != 0)
        {
          if ((v55 & 0x4000000) != 0) {
            goto LABEL_53;
          }
          int v20 = (unsigned __int16 *)(v58 + 240 * (v57 - 1));
          uint64_t v21 = *((void *)v20 + 1);
          if (!v21) {
            uint64_t v21 = (uint64_t)(v20 + 8);
          }
          uint64_t v44 = v21;
          int v22 = *v20;
          LODWORD(v45) = 0;
          HIDWORD(v45) = v22;
          unsigned int v46 = 0;
          KB::String::iterator::initialize(&v44);
          if (!KB::String::contains((KB::String *)&v47, v46)) {
            goto LABEL_53;
          }
LABEL_49:
          WORD2(v44) = 0;
          BYTE6(v44) = 0;
          double v45 = " ";
          LODWORD(v44) = 1048577;
          BYTE1(v46) = 0;
          KB::Word::Word((KB::Word *)&v47, (const KB::String *)&v44, &kTITokenIDUNK, 0);
          if (v45 && BYTE6(v44) == 1) {
            free(v45);
          }
          v50 |= 0x4000000u;
          KB::Candidate::append((unsigned __int16 *)&v57, &v47);
          KB::Word::~Word((KB::Word *)&v47);
          goto LABEL_53;
        }
        if ((v55 & 0x4000000) == 0 && !*(unsigned char *)(v19 + 64)) {
          goto LABEL_49;
        }
      }
LABEL_53:
      int v52 = 1065353216;
      KB::Candidate::append((unsigned __int16 *)&v57, (size_t *)v51);
      TITokenID v23 = v56;
      KB::Word::capitalized_string((KB::Word *)v51, (uint64_t)&v47);
      TITokenID v24 = v23;
      KB::LanguageModelContext::append((KB::LanguageModelContext *)v37, v24, (const KB::String *)&v47, (v54 >> 1) & 1);
      if (v48 && BYTE6(v47) == 1) {
        free(v48);
      }
      KB::Word::~Word((KB::Word *)v51);
      v8 += 24;
    }
  }
  if (!v57) {
    goto LABEL_61;
  }
  *(int32x2_t *)(v58 + 240 * v57 - 188) = vdup_lane_s32(a2[3], 0);
  unint64_t v25 = *((void *)a5 + 2);
  unint64_t v26 = *((void *)a5 + 1);
  if (v26 >= v25)
  {
    uint64_t v29 = 0x1CAC083126E978D5 * ((uint64_t)(v26 - *(void *)a5) >> 3);
    if ((unint64_t)(v29 + 1) > 0x4189374BC6A7EFLL) {
      abort();
    }
    unint64_t v30 = 0x1CAC083126E978D5 * ((uint64_t)(v25 - *(void *)a5) >> 3);
    uint64_t v31 = 2 * v30;
    if (2 * v30 <= v29 + 1) {
      uint64_t v31 = v29 + 1;
    }
    if (v30 >= 0x20C49BA5E353F7) {
      unint64_t v32 = 0x4189374BC6A7EFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    v51[4] = (void **)((char *)a5 + 16);
    if (v32) {
      unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v32);
    }
    else {
      uint64_t v33 = 0;
    }
    double v34 = (void **)(v32 + 1000 * v29);
    v51[0] = (void **)v32;
    v51[1] = v34;
    v51[3] = (void **)(v32 + 1000 * v33);
    KB::Candidate::Candidate((uint64_t)v34, (uint64_t)&v57);
    v51[2] = v34 + 125;
    std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a5, v51);
    uint64_t v27 = *((void *)a5 + 1);
    std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v51);
  }
  else
  {
    uint64_t v27 = KB::Candidate::Candidate(v26, (uint64_t)&v57) + 1000;
  }
  *((void *)a5 + 1) = v27;
  uint64_t v28 = 1;
LABEL_73:
  v51[0] = (void **)&v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v51);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v42);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v41);
  if (__p)
  {
    double v40 = __p;
    operator delete(__p);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v38);
  }
  KB::Candidate::~Candidate((KB::Candidate *)&v57);
  return v28;
}

void std::__function::__func<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1,std::allocator<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1>,void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::operator()(uint64_t a1, int32x2_t **a2, const KB::Candidate *a3, const KB::LanguageModelContext *a4)
{
  int v6 = 0;
  memset(v4, 0, sizeof(v4));
  memset(v5, 0, sizeof(v5));
  KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0::operator()(a1 + 8, a2, a3, a4, (KB::CandidateCollection *)v4, 1);
  double v7 = (void **)&v5[1] + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v7);
  double v7 = (void **)v5;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v7);
  double v7 = (void **)&v4[1] + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v7);
  double v7 = (void **)v4;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v7);
}

void std::__function::__func<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1,std::allocator<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1>,void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1,std::allocator<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1>,void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::destroy[abi:nn180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1,std::allocator<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1>,void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::destroy[abi:nn180100](uint64_t a1)
{
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100]((void *)(a1 + 16));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__function::__func<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1,std::allocator<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1>,void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1,std::allocator<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1>,void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *a2 = &unk_1F3F797B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__value_func[abi:nn180100]((uint64_t)(a2 + 3), a1 + 24);
}

void *std::__function::__func<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1,std::allocator<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1>,void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  void *v2 = &unk_1F3F797B8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__value_func[abi:nn180100]((uint64_t)(v2 + 3), a1 + 24);
  return v3;
}

void std::__function::__func<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1,std::allocator<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1>,void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::~__func(void *a1)
{
  *a1 = &unk_1F3F797B8;
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100](a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x1E4E7BC20);
}

void *std::__function::__func<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1,std::allocator<KB::NgramCandidateRefinery::inline_predictions_for_completion_stems(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_1>,void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::~__func(void *a1)
{
  *a1 = &unk_1F3F797B8;
  std::__function::__value_func<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__value_func[abi:nn180100](a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void KB::NgramCandidateRefinery::predictions_for_prediction_stems(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    if (a2[1] != *a2) {
      KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(a1, (uint64_t)a2, a3, a4);
    }
    double v10 = *(uint64_t **)a4;
    uint64_t v11 = *(uint64_t **)(a4 + 8);
    if (*(uint64_t **)a4 == v11)
    {
      uint64_t v16 = *(uint64_t **)a4;
    }
    else
    {
      do
      {
        if (*v10)
        {
          uint64_t v12 = 240 * *v10;
          BOOL v13 = (float *)(v10[1] + 52);
          float v14 = 1.0;
          do
          {
            float v15 = *v13;
            v13 += 60;
            float v14 = v14 * v15;
            v12 -= 240;
          }
          while (v12);
        }
        else
        {
          float v14 = 1.0;
        }
        std::function<void ()(KB::Candidate &,float)>::operator()(*(void *)(a5 + 24), (uint64_t)v10, v14);
        v10 += 125;
      }
      while (v10 != v11);
      uint64_t v16 = *(uint64_t **)a4;
      double v10 = *(uint64_t **)(a4 + 8);
    }
    unint64_t v17 = 126 - 2 * __clz(0x1CAC083126E978D5 * (v10 - v16));
    if (v10 == v16) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v17;
    }
    std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(v16, (KB::Candidate *)v10, v18, 1);
  }
}

void *KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = &unk_1F3F79800;
  v6[1] = a1;
  void v6[2] = a4;
  v6[3] = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(void *)v4 + 512))(v4, a2, a3, v6, 1);
  return std::__function::__value_func<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v6);
}

uint64_t std::function<void ()(KB::Candidate &,float)>::operator()(uint64_t a1, uint64_t a2, float a3)
{
  float v5 = a3;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, float *))(*(void *)a1 + 48))(a1, a2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &)::$_0,std::allocator<KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &)::$_0>,BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::operator()(v4);
}

uint64_t std::__function::__func<KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &)::$_0,std::allocator<KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &)::$_0>,BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::operator()(uint64_t a1, int32x2_t *a2, const KB::Candidate *a3, const KB::LanguageModelContext *a4)
{
  return KB::NgramCandidateRefinery::post_processing_predictions(*(KB::NgramCandidateRefinery **)(a1 + 8), a2, a3, a4, *(KB::CandidateCollection **)(a1 + 16));
}

__n128 std::__function::__func<KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &)::$_0,std::allocator<KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &)::$_0>,BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F79800;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &)::$_0,std::allocator<KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &)::$_0>,BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F3F79800;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &)::$_0,std::allocator<KB::NgramCandidateRefinery::predictions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &)::$_0>,BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::~__func()
{
}

void KB::NgramCandidateRefinery::completions_for_completion_stems(KB::NgramCandidateRefinery *a1, const KB::Candidate **a2, uint64_t a3, uint64_t *a4, uint64_t a5, float a6)
{
  float v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<KB::Candidate>::__init_with_size[abi:nn180100]<KB::Candidate*,KB::Candidate*>((KB::Candidate *)&v15, *a2, a2[1], 0x1CAC083126E978D5 * ((a2[1] - *a2) >> 3));
  if (((*(uint64_t (**)(KB::NgramCandidateRefinery *))(*(void *)a1 + 48))(a1) & 1) == 0) {
    KB::NgramCandidateRefinery::add_context_weights_batched(a1, &v15);
  }
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  uint64_t v13 = 0x1CAC083126E978D5 * ((v11 - *a4) >> 3);
  if (v16 != v15)
  {
    KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(a1, (uint64_t)&v15, a3, a4, a5, a6);
    uint64_t v12 = *a4;
    uint64_t v11 = a4[1];
  }
  for (uint64_t i = v12 + 1000 * v13; i != v11; i += 1000)
    *(_DWORD *)(i + 992) = 7;
  uint64_t v18 = &v15;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v18);
}

void KB::NgramCandidateRefinery::add_context_weights_batched(KB::NgramCandidateRefinery *a1, unsigned int **a2)
{
  v73[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v60 = a2[1];
  if (*a2 == v60) {
    return;
  }
  int8x16_t v62 = 0;
  uint64_t v63 = 0;
  unint64_t v64 = 0;
  do
  {
    if (*(void *)v2)
    {
      uint64_t v4 = 0;
      float v5 = 0;
      unint64_t v6 = 0;
      double v7 = (KB::Word *)*((void *)v2 + 1);
      uint64_t v8 = (KB::Word *)((char *)v7 + 240 * *(void *)v2);
      do
      {
        if (v2[248] == 7)
        {
          __int16 v9 = 0;
          v2[248] = 1;
        }
        else if (KB::NgramCandidateRefinery::should_not_score_token(a1, v7))
        {
          __int16 v9 = 0;
        }
        else
        {
          uint64_t v10 = *((void *)a1 + 4);
          KB::Word::capitalized_string(v7, (uint64_t)&v67);
          uint64_t v65 = (void **)*((void *)v7 + 17);
          __int16 v9 = (*(uint64_t (**)(uint64_t, char ***, void ***))(*(void *)v10 + 408))(v10, &v67, &v65);
          if (v68 && BYTE6(v67) == 1) {
            free(v68);
          }
        }
        BOOL is_linguistically_void = KB::Word::is_linguistically_void(v7);
        BOOL v12 = is_linguistically_void;
        if ((unint64_t)v5 >= v6)
        {
          uint64_t v14 = v5 - v4;
          if (v5 - v4 <= -3) {
            goto LABEL_105;
          }
          uint64_t v15 = v14 >> 1;
          if (v6 - (unint64_t)v4 <= (v14 >> 1) + 1) {
            uint64_t v16 = v15 + 1;
          }
          else {
            uint64_t v16 = v6 - (void)v4;
          }
          if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v17 = v16;
          }
          if (v17) {
            uint64_t v17 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::TokenMetadata>>(v17);
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (char *)(v17 + 2 * v15);
          if (v12) {
            __int16 v20 = 256;
          }
          else {
            __int16 v20 = 0;
          }
          *(_WORD *)uint64_t v19 = v20 | v9;
          uint64_t v21 = v19 + 2;
          while (v5 != v4)
          {
            __int16 v22 = *((_WORD *)v5 - 1);
            v5 -= 2;
            *((_WORD *)v19 - 1) = v22;
            v19 -= 2;
          }
          unint64_t v6 = v17 + 2 * v18;
          if (v4) {
            operator delete(v4);
          }
          uint64_t v4 = v19;
          float v5 = v21;
        }
        else
        {
          if (is_linguistically_void) {
            __int16 v13 = 256;
          }
          else {
            __int16 v13 = 0;
          }
          *(_WORD *)float v5 = v13 | v9;
          v5 += 2;
        }
        double v7 = (KB::Word *)((char *)v7 + 240);
      }
      while (v7 != v8);
      TITokenID v24 = v63;
      unint64_t v23 = v64;
      if ((unint64_t)v63 < v64)
      {
        *(void *)uint64_t v63 = 0;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 2) = 0;
        uint64_t v25 = v5 - v4;
        if (v5 != v4)
        {
          std::vector<language_modeling::v1::TokenMetadata>::__vallocate[abi:nn180100](v24, v25 >> 1);
          unint64_t v26 = (char *)*((void *)v24 + 1);
          memmove(v26, v4, v5 - v4);
          *((void *)v24 + 1) = &v26[v25];
        }
        goto LABEL_42;
      }
    }
    else
    {
      TITokenID v24 = v63;
      unint64_t v23 = v64;
      if ((unint64_t)v63 < v64)
      {
        uint64_t v4 = 0;
        *(void *)uint64_t v63 = 0;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 2) = 0;
LABEL_42:
        uint64_t v27 = v24 + 24;
        goto LABEL_65;
      }
      float v5 = 0;
      uint64_t v4 = 0;
    }
    uint64_t v28 = v62;
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v62) >> 3);
    unint64_t v30 = v29 + 1;
    if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_105;
    }
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)v62) >> 3);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 >= 0x555555555555555) {
      unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v32);
    }
    else
    {
      double v34 = 0;
      uint64_t v33 = 0;
    }
    double v35 = &v34[8 * ((v24 - v62) >> 3)];
    *(void *)double v35 = 0;
    *((void *)v35 + 1) = 0;
    *((void *)v35 + 2) = 0;
    int64_t v36 = v5 - v4;
    if (v36)
    {
      double v37 = &v34[24 * v29];
      uint64_t v38 = v33;
      std::vector<language_modeling::v1::TokenMetadata>::__vallocate[abi:nn180100](v37, v36 >> 1);
      long double v39 = (char *)*((void *)v37 + 1);
      memmove(v39, v4, v36);
      uint64_t v33 = v38;
      *((void *)v37 + 1) = &v39[v36];
      uint64_t v28 = v62;
      TITokenID v24 = v63;
    }
    double v40 = &v34[24 * v33];
    uint64_t v27 = v35 + 24;
    if (v24 == v28)
    {
      int8x16_t v62 = v35;
      uint64_t v63 = v35 + 24;
      unint64_t v64 = (unint64_t)v40;
      if (v28) {
        goto LABEL_64;
      }
    }
    else
    {
      do
      {
        *((void *)v35 - 3) = 0;
        *((void *)v35 - 2) = 0;
        v35 -= 24;
        *((void *)v35 + 2) = 0;
        long long v41 = *(_OWORD *)(v24 - 24);
        v24 -= 24;
        *(_OWORD *)double v35 = v41;
        *((void *)v35 + 2) = *((void *)v24 + 2);
        *(void *)TITokenID v24 = 0;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 2) = 0;
      }
      while (v24 != v28);
      uint64_t v42 = v62;
      uint64_t v28 = v63;
      int8x16_t v62 = v35;
      uint64_t v63 = v27;
      unint64_t v64 = (unint64_t)v40;
      if (v28 != v42)
      {
        uint64_t v43 = v28;
        do
        {
          double v45 = (void *)*((void *)v43 - 3);
          v43 -= 24;
          uint64_t v44 = v45;
          if (v45)
          {
            *((void *)v28 - 2) = v44;
            operator delete(v44);
          }
          uint64_t v28 = v43;
        }
        while (v43 != v42);
        uint64_t v28 = v42;
      }
      if (v28) {
LABEL_64:
      }
        operator delete(v28);
    }
LABEL_65:
    uint64_t v63 = v27;
    if (v4) {
      operator delete(v4);
    }
    v2 += 250;
  }
  while (v2 != v60);
  if (a2[1] == *a2) {
LABEL_105:
  }
    abort();
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v67, (const KB::LanguageModelContext *)(*a2 + 196));
  if (s_trace_logging_enabled) {
    CFStringRef Mutable = CFStringCreateMutable(0, 0);
  }
  else {
    CFStringRef Mutable = 0;
  }
  KB::NgramCandidateRefinery::context_probability_of_batched_word((uint64_t)a1, a2, v61);
  long double v48 = *a2;
  size_t v47 = a2[1];
  if (v47 == *a2) {
    goto LABEL_97;
  }
  uint64_t v49 = 0;
  while (2)
  {
    int v50 = &v48[250 * v49];
    if (!*(void *)v50) {
      goto LABEL_96;
    }
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    unint64_t v54 = 0;
    while (2)
    {
      if (*(unsigned char *)(*(void *)&v62[24 * v49] + v51))
      {
        uint64_t v55 = *((void *)v50 + 1);
        uint64_t v56 = *(void *)(v61[0] + 24 * v49) + v52;
        *(void *)(v55 + v53 + 52) = *(void *)v56;
        uint64_t v57 = (const char *)(v56 + 16);
        if (*(char *)(v56 + 39) < 0) {
          uint64_t v57 = *(const char **)v57;
        }
        KB::String::String((KB::String *)&v65, v57);
        KB::String::operator=((KB::String *)(v55 + v53 + 64), (KB::String *)&v65);
        if (v66 && BYTE6(v65) == 1) {
          free(v66);
        }
        int v58 = *(_DWORD *)(*(void *)(v61[0] + 24 * v49) + v52 + 8);
        if (v58)
        {
          *(_DWORD *)(v55 + v53 + 104) |= 0x1000000u;
          if ((v58 & 2) != 0) {
            goto LABEL_90;
          }
LABEL_87:
          if (Mutable)
          {
LABEL_91:
            KB::utf8_string(Mutable, (uint64_t)&v65);
            KB::String::operator=((KB::String *)(v55 + v53 + 160), (KB::String *)&v65);
            if (v66 && BYTE6(v65) == 1) {
              free(v66);
            }
          }
        }
        else
        {
          if ((v58 & 2) == 0) {
            goto LABEL_87;
          }
LABEL_90:
          *(_DWORD *)(v55 + v53 + 104) |= 0x4000000u;
          if (Mutable) {
            goto LABEL_91;
          }
        }
      }
      ++v54;
      v53 += 240;
      v52 += 40;
      v51 += 2;
      if (v54 < *(void *)v50) {
        continue;
      }
      break;
    }
    long double v48 = *a2;
    size_t v47 = a2[1];
LABEL_96:
    if (++v49 < (unint64_t)(0x1CAC083126E978D5 * (((char *)v47 - (char *)v48) >> 3))) {
      continue;
    }
    break;
  }
LABEL_97:
  uint64_t v65 = (void **)v61;
  std::vector<std::vector<KB::LikelihoodInfo>>::__destroy_vector::operator()[abi:nn180100](&v65);
  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t v65 = (void **)v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v65);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v72);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v71);
  if (__p)
  {
    unint64_t v70 = __p;
    operator delete(__p);
  }
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v68);
  }
  unint64_t v67 = &v62;
  std::vector<std::vector<language_modeling::v1::TokenMetadata>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v67);
}

void *KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, float a6)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  float v16 = a6;
  __n128 result = (void *)(*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (result)
  {
    uint64_t v15 = 0x1CAC083126E978D5 * ((uint64_t)(a4[1] - *a4) >> 3);
    uint64_t v12 = *(void *)((*(uint64_t (**)(void *))(*a1 + 120))(a1) + 8) + 112;
    uint64_t v13 = a1[4];
    v18[0] = &unk_1F3F79848;
    v18[1] = a1;
    v18[2] = a4;
    void v18[3] = v18;
    uint64_t v14 = operator new(0x30uLL);
    *uint64_t v14 = &unk_1F3F79890;
    v14[1] = v12;
    v14[2] = a4;
    unsigned __int16 v14[3] = &v15;
    v14[4] = a1;
    v14[5] = &v16;
    v17[3] = v14;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void *, uint64_t))(*(void *)v13 + 520))(v13, a2, a3, v18, v17, a5);
    std::__function::__value_func<BOOL ()(KB::Candidate const&)>::~__value_func[abi:nn180100](v17);
    return std::__function::__value_func<BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::~__value_func[abi:nn180100](v18);
  }
  return result;
}

uint64_t std::__function::__func<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0,std::allocator<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0>,BOOL ()(KB::Candidate const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v42 = *(void *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!*(_WORD *)(a2 + 888)) {
    KB::Candidate::compute_string((KB::Candidate *)a2);
  }
  uint64_t v5 = *(void *)(v4 + 24);
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 48))(&v40);
    unint64_t v6 = *(void **)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = (KB::Candidate *)v6[1];
    __int16 v9 = (KB::Candidate *)(*v6 + 1000 * **(void **)(a1 + 24));
    v39[0] = a2;
    v39[1] = v7;
    v39[2] = &v40;
    v39[3] = &v42;
    if (v9 != v8)
    {
      while ((KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0::operator() const(KB::Candidate const&)::{lambda(KB::Candidate const&)#1}::operator()((uint64_t)v39, v9) & 1) == 0)
      {
        __int16 v9 = (KB::Candidate *)((char *)v9 + 1000);
        if (v9 == v8)
        {
          __int16 v9 = v8;
          goto LABEL_14;
        }
      }
      if (v9 != v8)
      {
        for (uint64_t i = (uint64_t *)((char *)v9 + 1000); i != (uint64_t *)v8; i += 125)
        {
          if ((KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0::operator() const(KB::Candidate const&)::{lambda(KB::Candidate const&)#1}::operator()((uint64_t)v39, (KB::Candidate *)i) & 1) == 0)
          {
            KB::Candidate::operator=((uint64_t *)v9, i);
            __int16 v9 = (KB::Candidate *)((char *)v9 + 1000);
          }
        }
      }
    }
LABEL_14:
    std::vector<KB::Candidate>::erase((uint64_t)v6, (uint64_t *)v9, *(KB::Candidate **)(*(void *)(a1 + 16) + 8));
    uint64_t v11 = *(uint64_t **)(a1 + 16);
    uint64_t v12 = *(unint64_t **)(a1 + 24);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    unint64_t v15 = *v12;
    unint64_t v16 = *v12 + 10;
    if (0x1CAC083126E978D5 * ((v14 - *v11) >> 3) > v16)
    {
      std::vector<KB::Candidate>::resize(v11, v16);
      uint64_t v17 = *(uint64_t **)(a1 + 16);
      uint64_t v12 = *(unint64_t **)(a1 + 24);
      unint64_t v15 = *v12;
      uint64_t v13 = *v17;
      uint64_t v14 = v17[1];
    }
    if (v13 + 1000 * v15 != v14)
    {
      uint64_t v14 = v13 + 1000 * v15;
      while (1)
      {
        if (!*(_WORD *)(v14 + 888)) {
          KB::Candidate::compute_string((KB::Candidate *)v14);
        }
        int v18 = *(unsigned __int16 *)(v14 + 892);
        if (!*(_WORD *)(v14 + 892))
        {
          KB::String::compute_length((unsigned __int16 *)(v14 + 888));
          int v18 = *(unsigned __int16 *)(v14 + 892);
        }
        if (!*(_WORD *)(a2 + 888)) {
          KB::Candidate::compute_string((KB::Candidate *)a2);
        }
        unsigned int v19 = *(unsigned __int16 *)(a2 + 892);
        if (!*(_WORD *)(a2 + 892))
        {
          KB::String::compute_length((unsigned __int16 *)(a2 + 888));
          unsigned int v19 = *(unsigned __int16 *)(a2 + 892);
        }
        int v20 = v18 - v19;
        *(_DWORD *)(*(void *)(v14 + 8) + 240 * *(void *)v14 - 96) = v20;
        *(unsigned char *)(v14 + 960) = 1;
        float v21 = *(float *)(a2 + 748);
        float v22 = *(float *)(a2 + 756);
        float v23 = *(float *)(a2 + 760);
        uint64_t v37 = *(void *)(a2 + 764);
        int v38 = *(_DWORD *)(a2 + 772);
        if (*(_WORD *)(a2 + 888))
        {
          if (!v19) {
            goto LABEL_34;
          }
        }
        else
        {
          KB::Candidate::compute_string((KB::Candidate *)a2);
          unsigned int v19 = *(unsigned __int16 *)(a2 + 892);
          if (!*(_WORD *)(a2 + 892))
          {
LABEL_34:
            KB::String::compute_length((unsigned __int16 *)(a2 + 888));
            unsigned int v19 = *(unsigned __int16 *)(a2 + 892);
          }
        }
        float v24 = **(float **)(a1 + 40);
        if (v20 < 1)
        {
          float v25 = 0.0;
        }
        else
        {
          if (v19 >= 5) {
            unsigned int v19 = 5;
          }
          float v25 = logf(TI::Favonius::SearchParameters::k_prediction_costs[v19]) + 0.0;
          if (v20 != 1) {
            float v25 = v25 + (float)((float)(v20 - 1) * -0.22314);
          }
        }
        float v26 = 1.0;
        if (*(void *)v14)
        {
          uint64_t v27 = 240 * *(void *)v14;
          uint64_t v28 = (float *)(*(void *)(v14 + 8) + 52);
          do
          {
            float v29 = *v28;
            v28 += 60;
            float v26 = v26 * v29;
            v27 -= 240;
          }
          while (v27);
        }
        float v30 = v21 + (float)((float)(1.0 - v24) * (float)(v25 * v23));
        float v31 = logf(v26);
        *(float *)(v14 + 748) = v30;
        *(float *)(v14 + 752) = v31;
        *(float *)(v14 + 756) = v22;
        *(float *)(v14 + 760) = v23;
        *(_DWORD *)(v14 + 772) = v38;
        *(void *)(v14 + 764) = v37;
        *(float *)(v14 + 744) = v30 + (float)(v23 * (float)(v22 + v31));
        v14 += 1000;
        unint64_t v32 = *(uint64_t **)(a1 + 16);
        if (v14 == v32[1])
        {
          uint64_t v12 = *(unint64_t **)(a1 + 24);
          unint64_t v15 = *v12;
          uint64_t v13 = *v32;
          break;
        }
      }
    }
    unint64_t v33 = 0x1CAC083126E978D5 * ((v14 - v13) >> 3);
    *uint64_t v12 = v33;
    if ((unsigned __int16)v40 >= 0xFu)
    {
      if (v41) {
        MEMORY[0x1E4E7BC00](v41, 0x1000C8077774924);
      }
    }
    return v15 < v33;
  }
  else
  {
    double v35 = std::__throw_bad_function_call[abi:nn180100]();
    return KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0::operator() const(KB::Candidate const&)::{lambda(KB::Candidate const&)#1}::operator()((uint64_t)v35, v36);
  }
}

uint64_t KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0::operator() const(KB::Candidate const&)::{lambda(KB::Candidate const&)#1}::operator()(uint64_t a1, KB::Candidate *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(KB::Candidate **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(const ByteString **)(a1 + 16);
  uint64_t v6 = **(unsigned int **)(a1 + 24);
  if (!*((_WORD *)a2 + 444))
  {
    KB::Candidate::compute_string(a2);
    if (!*((_WORD *)a2 + 444)) {
      return 1;
    }
  }
  KB::Candidate::capitalized_string(a2, (uint64_t)v19);
  KB::Candidate::capitalized_string(v4, (uint64_t)&v17);
  int v7 = KB::string_preserves_surface_form_features_of_prefix((const KB::String *)v19, (const KB::String *)&v17, v5, v3);
  if (v18 && BYTE6(v17) == 1) {
    free(v18);
  }
  if (v21 && v20 == 1) {
    free(v21);
  }
  if (!v7) {
    return 1;
  }
  KB::Candidate::capitalized_string(a2, (uint64_t)v19);
  uint64_t v8 = *(void *)(v3 + 24);
  if (v8)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 48))(&v17);
    if (v21 && v20 == 1) {
      free(v21);
    }
    BOOL v10 = (unsigned __int16)v17 <= v5->var0.var0.var0 && (unint64_t)(v6 + 1) >= *(void *)a2;
    if ((unsigned __int16)v17 >= 0xFu)
    {
      if (v18) {
        MEMORY[0x1E4E7BC00](v18, 0x1000C8077774924);
      }
    }
    return v10;
  }
  uint64_t v12 = (KB::NgramCandidateRefinery *)std::__throw_bad_function_call[abi:nn180100]();
  return KB::NgramCandidateRefinery::long_prediction_geometric_log_likelihood(v12, v13, v14, v15, v16);
}

float KB::NgramCandidateRefinery::long_prediction_geometric_log_likelihood(KB::NgramCandidateRefinery *this, unsigned int a2, int a3, float a4, float a5)
{
  if (a3 < 1)
  {
    float v9 = 0.0;
  }
  else
  {
    if (a2 >= 5) {
      int v8 = 5;
    }
    else {
      int v8 = a2;
    }
    float v9 = logf(TI::Favonius::SearchParameters::k_prediction_costs[v8]) + 0.0;
    if (a3 != 1) {
      float v9 = v9 + (float)((float)(a3 - 1) * -0.22314);
    }
  }
  return (float)(1.0 - a5) * (float)(v9 * a4);
}

__n128 std::__function::__func<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0,std::allocator<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0>,BOOL ()(KB::Candidate const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F79890;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0,std::allocator<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0>,BOOL ()(KB::Candidate const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F3F79890;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0,std::allocator<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_0>,BOOL ()(KB::Candidate const&)>::~__func()
{
}

uint64_t std::__function::__func<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_1,std::allocator<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_1>,BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::operator()(uint64_t a1, int32x2_t *a2, const KB::Candidate *a3, const KB::LanguageModelContext *a4)
{
  return KB::NgramCandidateRefinery::post_processing_predictions(*(KB::NgramCandidateRefinery **)(a1 + 8), a2, a3, a4, *(KB::CandidateCollection **)(a1 + 16));
}

__n128 std::__function::__func<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_1,std::allocator<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_1>,BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F3F79848;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_1,std::allocator<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_1>,BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F3F79848;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_1,std::allocator<KB::NgramCandidateRefinery::completions_from_candidate_string_based_lm(std::vector<KB::Candidate> const&,KB::LanguageModelContext const&,KB::CandidateCollection &,float,KB::LookupType)::$_1>,BOOL ()(KB::LanguageModel::PredictionInfo const&,KB::Candidate const&,KB::LanguageModelContext const&)>::~__func()
{
}

uint64_t KB::NgramCandidateRefinery::should_not_score_token(KB::NgramCandidateRefinery *this, const KB::Word *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(KB::NgramCandidateRefinery *))(*(void *)this + 16))(this);
  if (result)
  {
    uint64_t v5 = *((void *)this + 4);
    KB::Word::capitalized_string(a2, (uint64_t)v11);
    uint64_t v10 = *((void *)a2 + 17);
    int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v5 + 408))(v5, v11, &v10);
    if (v12 && v11[6] == 1) {
      free(v12);
    }
    int v7 = *((_DWORD *)a2 + 26);
    if (v6)
    {
      if ((v7 & 0x80022100) != 0x2000 || *((void *)a2 + 28) != 0) {
        return 0;
      }
      return *((_DWORD *)a2 + 31) == 0;
    }
    else
    {
      return (v7 & 0x2040000) == 0x2000000;
    }
  }
  return result;
}

void KB::NgramCandidateRefinery::context_probability_of_batched_word(uint64_t a1@<X0>, unsigned int **a2@<X1>, void *a3@<X8>)
{
  int v7 = *a2;
  int v6 = a2[1];
  if (v6 != *a2)
  {
    unint64_t v8 = 0;
    do
    {
      float v9 = &v7[250 * v8];
      if (*(void *)v9)
      {
        unint64_t v10 = 0;
        do
        {
          (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
          ++v10;
        }
        while (v10 < *(void *)v9);
        int v7 = *a2;
        int v6 = a2[1];
      }
      ++v8;
    }
    while (v8 < 0x1CAC083126E978D5 * (((char *)v6 - (char *)v7) >> 3));
  }
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    uint64_t v11 = *(void (**)(void))(**(void **)(a1 + 32) + 432);
    v11();
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    if (*a2 != v13)
    {
      do
      {
        std::vector<KB::LikelihoodInfo>::vector(&v24, *v12, (uint64_t)&KB::k_invalid_likelihood_value);
        int v14 = (void *)a3[1];
        unint64_t v15 = a3[2];
        if ((unint64_t)v14 >= v15)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - *a3) >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *a3) >> 3);
          if (2 * v19 > v18) {
            unint64_t v18 = 2 * v19;
          }
          if (v19 >= 0x555555555555555) {
            unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v20 = v18;
          }
          v26[4] = (void **)(a3 + 2);
          float v21 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v20);
          uint64_t v22 = &v21[3 * v17];
          v26[0] = v21;
          v26[1] = v22;
          v26[3] = &v21[3 * v23];
          v22[1] = 0;
          _OWORD v22[2] = 0;
          *uint64_t v22 = 0;
          *(_OWORD *)uint64_t v22 = v24;
          _OWORD v22[2] = v25;
          long long v24 = 0uLL;
          float v25 = 0;
          void v26[2] = v22 + 3;
          std::vector<std::vector<KB::LikelihoodInfo>>::__swap_out_circular_buffer(a3, v26);
          float v16 = (void *)a3[1];
          std::__split_buffer<std::vector<KB::LikelihoodInfo>>::~__split_buffer((uint64_t)v26);
        }
        else
        {
          *int v14 = 0;
          v14[1] = 0;
          v14[2] = 0;
          *(_OWORD *)int v14 = v24;
          v14[2] = v25;
          long long v24 = 0uLL;
          float v25 = 0;
          float v16 = v14 + 3;
        }
        a3[1] = v16;
        v26[0] = (void **)&v24;
        std::vector<KB::LikelihoodInfo>::__destroy_vector::operator()[abi:nn180100](v26);
        v12 += 250;
      }
      while (v12 != v13);
    }
  }
}

void KB::NgramCandidateRefinery::set_text_blocklisted_flag(void *a1, uint64_t a2, uint64_t a3)
{
  v37[3] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1))
  {
    int v6 = *(void **)a2;
    uint64_t v28 = *(void **)(a2 + 8);
    if (*(void **)a2 != v28)
    {
      do
      {
        if (*v6)
        {
          int v7 = (unsigned __int16 *)v6[1];
          uint64_t v8 = 240 * *v6;
          do
          {
            if ((*((unsigned char *)v7 + 135) & 4) == 0) {
              goto LABEL_14;
            }
            int v9 = v7[2];
            if (!v7[2])
            {
              KB::String::compute_length(v7);
              int v9 = v7[2];
            }
            if (v9 == 1
              && (*((void *)v7 + 1) ? (unint64_t v10 = (const char *)*((void *)v7 + 1)) : (unint64_t v10 = (const char *)(v7 + 8)),
                  strcmp(v10, " ")))
            {
              uint64_t v11 = a1[4];
              float v31 = v10;
              LODWORD(v32) = 0;
              HIDWORD(v32) = *v7;
              LODWORD(__p) = 0;
              KB::String::iterator::initialize((uint64_t *)&v31);
              *((void *)v7 + 17) = (*(uint64_t (**)(uint64_t, void))(*(void *)v11 + 304))(v11, __p);
            }
            else
            {
LABEL_14:
              int v12 = *((_DWORD *)v7 + 26);
              if ((v12 & 0x40000) == 0
                && (*((unsigned char *)v7 + 135) & 4) == 0
                && (v12 & 0x800000) == 0
                && *v7
                && ((*(uint64_t (**)(void))(*(void *)a1[4] + 24))(a1[4]) & 1) == 0)
              {
                uint64_t v13 = a1[4];
                KB::Word::capitalized_string((KB::Word *)v7, (uint64_t)&v31);
                unint64_t v14 = KB::LanguageModel::id_for_dynamic_engine_word(v13, (unsigned __int16 *)&v31, (uint64_t)(a1 + 3));
                if (v32 && BYTE6(v31) == 1) {
                  free(v32);
                }
                *((void *)v7 + 17) = v14;
                if (!HIDWORD(v14))
                {
                  int v15 = *((_DWORD *)v7 + 26);
                  if ((v15 & 0x80020100) == 0 && !*((void *)v7 + 28)) {
                    *((_DWORD *)v7 + 26) = v15 | 4;
                  }
                }
              }
            }
            v7 += 120;
            v8 -= 240;
          }
          while (v8);
        }
        KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v31, (const KB::LanguageModelContext *)(v6 + 98));
        if (*(_DWORD *)v6)
        {
          uint64_t v16 = 0;
          unint64_t v17 = 0;
          do
          {
            if (v16)
            {
              uint64_t v18 = v6[1];
              unint64_t v19 = (KB::Word *)(v18 + v16 - 240);
              unint64_t v20 = (KB::NgramCandidateRefinery *)(*(uint64_t (**)(void))(*(void *)a1[4] + 144))(a1[4]);
              if (v20)
              {
                if (!KB::Word::is_linguistically_void((KB::Word *)(v18 + v16 - 240)))
                {
                  uint64_t v21 = v18 + v16;
                  TITokenID v22 = *(TITokenID *)(v21 - 104);
                  KB::Word::capitalized_string(v19, (uint64_t)&v29);
                  TITokenID v23 = v22;
                  KB::LanguageModelContext::append((KB::LanguageModelContext *)&v31, v23, (const KB::String *)&v29, (*(_DWORD *)(v21 - 136) >> 1) & 1);
                  if (v30)
                  {
                    if (BYTE6(v29) == 1) {
                      free(v30);
                    }
                  }
                }
              }
              else
              {
                KB::NgramCandidateRefinery::update_context(v20, (KB::LanguageModelContext *)&v31, (const KB::Word *)(v18 + v16 - 240));
              }
            }
            uint64_t v24 = v6[1];
            uint64_t v25 = a1[4];
            KB::Word::capitalized_string((KB::Word *)(v24 + v16), (uint64_t)&v29);
            int v26 = (*(uint64_t (**)(uint64_t, void ***, void, const char **, uint64_t))(*(void *)v25 + 488))(v25, &v29, *(void *)(v24 + v16 + 136), &v31, a3);
            if (v30) {
              BOOL v27 = BYTE6(v29) == 1;
            }
            else {
              BOOL v27 = 0;
            }
            if (v27) {
              free(v30);
            }
            if (v26) {
              *(_DWORD *)(v24 + v16 + 104) |= 0x40000000u;
            }
            ++v17;
            v16 += 240;
          }
          while (v17 < *(unsigned int *)v6);
        }
        float v29 = (void **)v37;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v29);
        language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v36);
        language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v35);
        if (__p)
        {
          double v34 = __p;
          operator delete(__p);
        }
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v32);
        }
        v6 += 125;
      }
      while (v6 != v28);
    }
  }
}

void KB::NgramCandidateRefinery::update_context(KB::NgramCandidateRefinery *this, KB::LanguageModelContext *a2, const KB::Word *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!KB::Word::is_linguistically_void(a3))
  {
    TITokenID v5 = (TITokenID)*((void *)a3 + 17);
    KB::Word::capitalized_string(a3, (uint64_t)v7);
    TITokenID v6 = v5;
    KB::LanguageModelContext::append(a2, v6, (const KB::String *)v7, (*((_DWORD *)a3 + 26) >> 1) & 1);
    if (v8)
    {
      if (v7[6] == 1) {
        free(v8);
      }
    }
  }
}

void KB::NgramCandidateRefinery::refine_candidates(KB::NgramCandidateRefinery *a1, unsigned int **a2, uint64_t a3)
{
  KB::NgramCandidateRefinery::add_context_weights_batched(a1, a2);
  TITokenID v5 = *a2;
  TITokenID v6 = a2[1];
  if (*a2 == v6)
  {
    uint64_t v11 = *a2;
  }
  else
  {
    do
    {
      if (*(void *)v5)
      {
        uint64_t v7 = 240 * *(void *)v5;
        uint64_t v8 = (float *)(*((void *)v5 + 1) + 52);
        float v9 = 1.0;
        do
        {
          float v10 = *v8;
          v8 += 60;
          float v9 = v9 * v10;
          v7 -= 240;
        }
        while (v7);
      }
      else
      {
        float v9 = 1.0;
      }
      std::function<void ()(KB::Candidate &,float)>::operator()(*(void *)(a3 + 24), (uint64_t)v5, v9);
      v5 += 250;
    }
    while (v5 != v6);
    uint64_t v11 = *a2;
    TITokenID v5 = a2[1];
  }
  unint64_t v12 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((char *)v5 - (char *)v11) >> 3));
  if (v5 == v11) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }

  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>((uint64_t *)v11, (KB::Candidate *)v5, v13, 1);
}

uint64_t KB::NgramCandidateRefinery::does_language_model_support_completions(KB::NgramCandidateRefinery *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2 || !(*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
    return 0;
  }
  long long v3 = *(uint64_t (**)(void))(**((void **)this + 4) + 144);

  return v3();
}

uint64_t KB::NgramCandidateRefinery::does_language_model_support_fragment_conditional_prob(KB::NgramCandidateRefinery *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2 || !(*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
    return 0;
  }
  long long v3 = *(uint64_t (**)(void))(**((void **)this + 4) + 192);

  return v3();
}

uint64_t KB::NgramCandidateRefinery::does_language_model_support_multilingual(KB::NgramCandidateRefinery *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2 || !(*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
    return 0;
  }
  long long v3 = *(uint64_t (**)(void))(**((void **)this + 4) + 184);

  return v3();
}

uint64_t KB::NgramCandidateRefinery::does_language_model_provide_inline_completions(KB::NgramCandidateRefinery *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2 || !(*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
    return 0;
  }
  long long v3 = *(uint64_t (**)(void))(**((void **)this + 4) + 160);

  return v3();
}

uint64_t KB::NgramCandidateRefinery::uses_document_context(KB::NgramCandidateRefinery *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  return v2 & (*(unsigned int (**)(void))(**((void **)this + 4) + 32))(*((void *)this + 4));
}

void KB::NgramCandidateRefinery::~NgramCandidateRefinery(KB::NgramCandidateRefinery *this)
{
  KB::NgramCandidateRefinery::~NgramCandidateRefinery(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  std::__shared_weak_count *v2;
  unsigned int *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1F3F79640;
  int v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  long long v3 = (unsigned int *)*((void *)this + 3);
  if (v3) {
    WTF::RefCounted<KB::DictionaryContainer>::deref(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void KB::UnigramCandidateRefinery::lexicon_id_vector(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t KB::UnigramCandidateRefinery::dictionary(KB::UnigramCandidateRefinery *this)
{
  return *((void *)this + 1);
}

void KB::UnigramCandidateRefinery::get_num_candidates(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void KB::UnigramCandidateRefinery::inline_predictions_for_completion_stems(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[104] = 0;
}

void KB::UnigramCandidateRefinery::predictions_for_prediction_stems(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(KB::Candidate **)(a4 + 8);
  unint64_t v5 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v4 - *(void *)a4) >> 3));
  if (v4 == *(KB::Candidate **)a4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(*(uint64_t **)a4, v4, v6, 1);
}

void KB::UnigramCandidateRefinery::completions_for_completion_stems(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(KB::Candidate **)(a4 + 8);
  unint64_t v5 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v4 - *(void *)a4) >> 3));
  if (v4 == *(KB::Candidate **)a4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(*(uint64_t **)a4, v4, v6, 1);
}

void KB::UnigramCandidateRefinery::refine_candidates(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t **)a2;
  long long v3 = *(KB::Candidate **)(a2 + 8);
  unint64_t v4 = 126 - 2 * __clz(0x1CAC083126E978D5 * ((v3 - (KB::Candidate *)v2) >> 3));
  if (v3 == (KB::Candidate *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(v2, v3, v5, 1);
}

uint64_t KB::UnigramCandidateRefinery::does_language_model_support_completions(KB::UnigramCandidateRefinery *this)
{
  return 0;
}

uint64_t KB::UnigramCandidateRefinery::does_language_model_support_fragment_conditional_prob(KB::UnigramCandidateRefinery *this)
{
  return 0;
}

uint64_t KB::UnigramCandidateRefinery::does_language_model_support_multilingual(KB::UnigramCandidateRefinery *this)
{
  return 0;
}

uint64_t KB::UnigramCandidateRefinery::does_language_model_provide_inline_completions(KB::UnigramCandidateRefinery *this)
{
  return 0;
}

uint64_t KB::UnigramCandidateRefinery::uses_document_context(KB::UnigramCandidateRefinery *this)
{
  return 0;
}

void KB::UnigramCandidateRefinery::~UnigramCandidateRefinery(KB::UnigramCandidateRefinery *this)
{
  *(void *)this = &unk_1F3F796E0;
  unint64_t v1 = (unsigned int *)*((void *)this + 1);
  if (v1) {
    WTF::RefCounted<KB::DictionaryContainer>::deref(v1);
  }

  JUMPOUT(0x1E4E7BC20);
}

{
  unsigned int *v1;

  *(void *)this = &unk_1F3F796E0;
  unint64_t v1 = (unsigned int *)*((void *)this + 1);
  if (v1) {
    WTF::RefCounted<KB::DictionaryContainer>::deref(v1);
  }
}

void KB::CandidateRefinery::sort_candidate_collection(KB::CandidateRefinery *this, KB::CandidateCollection *a2)
{
  int v2 = (KB::Candidate *)*((void *)this + 1);
  unint64_t v3 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v2 - *(void *)this) >> 3));
  if (v2 == *(KB::Candidate **)this) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(*(uint64_t **)this, v2, v4, 1);
}

void KB::NgramCandidateRefinery::create(atomic_uint **a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  float v10 = (std::__shared_weak_count *)operator new(0x50uLL);
  uint64_t v11 = v10;
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F79780;
  unint64_t v12 = &v10[1].__vftable;
  uint64_t v13 = *a1;
  uint64_t v18 = v13;
  if (v13) {
    atomic_fetch_add(v13, 1u);
  }
  uint64_t v14 = *a2;
  int v15 = (std::__shared_weak_count *)a2[1];
  v17[0] = v14;
  v17[1] = v15;
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    KB::NgramCandidateRefinery::NgramCandidateRefinery((uint64_t)&v10[1], &v18, v17, a3, a4);
    std::__shared_weak_count::__release_shared[abi:nn180100](v15);
  }
  else
  {
    KB::NgramCandidateRefinery::NgramCandidateRefinery((uint64_t)&v10[1], &v18, v17, a3, a4);
  }
  if (v18) {
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v18);
  }
  *a5 = v12;
  a5[1] = v11;
  shared_weak_owners = (std::__shared_weak_count *)v11[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[1].__shared_owners_ = (uint64_t)v12;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[1].__shared_owners_ = (uint64_t)v12;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
  }

  std::__shared_weak_count::__release_shared[abi:nn180100](v11);
}

uint64_t KB::NgramCandidateRefinery::NgramCandidateRefinery(uint64_t a1, atomic_uint **a2, void *a3, int a4, int a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3F79640;
  uint64_t v6 = *a2;
  *(void *)(a1 + 24) = *a2;
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v7 = a3[1];
  *(void *)(a1 + 32) = *a3;
  *(void *)(a1 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 48) = a4;
  if (a5) {
    (*(void (**)(void))(**(void **)(a1 + 32) + 96))(*(void *)(a1 + 32));
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<KB::NgramCandidateRefinery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<KB::NgramCandidateRefinery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F79780;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

void std::__shared_ptr_emplace<KB::NgramCandidateRefinery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3F79780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void KB::NgramCandidateRefinery::context_probability_of_word(KB::NgramCandidateRefinery *this@<X0>, float a2@<S0>, uint64_t a3@<X8>)
{
  (*(void (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  if ((*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4)))
  {
    uint64_t v11 = *(void (**)(__n128))(**((void **)this + 4) + 424);
    v10.n128_f32[0] = a2;
    v11(v10);
  }
  else
  {
    *(void *)a3 = KB::k_invalid_likelihood_value;
    *(_DWORD *)(a3 + 8) = dword_1EAE3FEC8;
    unint64_t v12 = (std::string *)(a3 + 16);
    if (byte_1EAE3FEE7 < 0)
    {
      uint64_t v13 = *(const std::string::value_type **)aInvalidLikelih_2;
      std::string::size_type v14 = *(void *)&aInvalidLikelih_2[8];
      std::string::__init_copy_ctor_external(v12, v13, v14);
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)aInvalidLikelih_2;
      *(void *)(a3 + 32) = *(void *)&aInvalidLikelih_2[16];
    }
  }
}

void KB::NgramCandidateRefinery::add_context_weight(KB::NgramCandidateRefinery *this, KB::Word *a2, const KB::LanguageModelContext *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (KB::NgramCandidateRefinery::should_not_score_token(this, a2))
  {
    *((_DWORD *)a2 + 12) = 0;
    return;
  }
  uint64_t v6 = *((void *)this + 4);
  KB::Word::capitalized_string(a2, (uint64_t)&v16);
  uint64_t v14 = *((void *)a2 + 17);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 408))(v6, &v16, &v14);
  if (v17) {
    BOOL v8 = BYTE6(v16) == 1;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    free(v17);
  }
  if (v7)
  {
    if (s_trace_logging_enabled) {
      CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
    }
    else {
      CFMutableStringRef Mutable = 0;
    }
    KB::Word::capitalized_string(a2, (uint64_t)&v14);
    KB::NgramCandidateRefinery::context_probability_of_word(this, *((float *)a2 + 13), (uint64_t)&v16);
    if (v15 && BYTE6(v14) == 1) {
      free(v15);
    }
    *(void *)((char *)a2 + 52) = v16;
    int v10 = (*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
    float v11 = 1.0;
    if (v10) {
      float v11 = (*(float (**)(void, void, const KB::LanguageModelContext *, float))(**((void **)this + 4)
    }
                                                                                             + 456))(*((void *)this + 4), *((unsigned int *)a2 + 34), a3, 1.0);
    *((float *)a2 + 24) = v11;
    if (v19 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    KB::String::String((KB::String *)&v14, p_p);
    KB::String::operator=((KB::Word *)((char *)a2 + 64), (KB::String *)&v14);
    if (v15 && BYTE6(v14) == 1) {
      free(v15);
    }
    char v13 = (char)v17;
    if (v17)
    {
      *((_DWORD *)a2 + 26) |= 0x1000000u;
      if ((v13 & 2) == 0)
      {
LABEL_26:
        if (!Mutable) {
          goto LABEL_33;
        }
        goto LABEL_30;
      }
    }
    else if ((v17 & 2) == 0)
    {
      goto LABEL_26;
    }
    *((_DWORD *)a2 + 26) |= 0x4000000u;
    if (!Mutable)
    {
LABEL_33:
      if (v19 < 0) {
        operator delete(__p);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      return;
    }
LABEL_30:
    KB::utf8_string(Mutable, (uint64_t)&v14);
    KB::String::operator=((KB::Word *)((char *)a2 + 160), (KB::String *)&v14);
    if (v15 && BYTE6(v14) == 1) {
      free(v15);
    }
    goto LABEL_33;
  }
}

void KB::ChooseTopQualityAutocorrection::filter_candidates(KB::ChooseTopQualityAutocorrection *this, const KB::Candidate **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  if (*a2 != a2[1])
  {
    KB::CandidateCollection::CandidateCollection((KB::CandidateCollection *)v34, a2);
    float v8 = expf(*((float *)*a2 + 186));
    KB::ChooseTopQualityAutocorrection::filter_candidates_subset(this, a2, a3, a4, v8);
    if (*a2 != a2[1])
    {
      char v9 = 0;
      int v10 = (void **)&v33;
      float v11 = (void **)&v32;
      unint64_t v12 = (void **)&v31;
      uint64_t v28 = (uint64_t *)(a2 + 3);
      uint64_t v13 = 1;
      while (1)
      {
        char v14 = v9;
        KB::CandidateCollection::CandidateCollection((KB::CandidateCollection *)&v29, v34);
        std::vector<KB::Candidate>::erase((uint64_t)&v29, (uint64_t *)v29, (KB::Candidate *)&v29[125 * v13]);
        if (v29 == v30) {
          break;
        }
        KB::ChooseTopQualityAutocorrection::filter_candidates_subset(this, (KB::Candidate **)&v29, a3, a4, v8);
        int v15 = (const KB::Candidate *)v29;
        if (v29 == v30) {
          break;
        }
        uint64_t v16 = a2[4];
        unint64_t v17 = a2[5];
        if (v16 >= v17)
        {
          char v19 = v10;
          uint64_t v20 = v11;
          uint64_t v21 = v12;
          uint64_t v22 = 0x1CAC083126E978D5 * (((uint64_t)v16 - *v28) >> 3);
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) > 0x4189374BC6A7EFLL) {
            abort();
          }
          unint64_t v24 = 0x1CAC083126E978D5 * (((uint64_t)v17 - *v28) >> 3);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x20C49BA5E353F7) {
            unint64_t v25 = 0x4189374BC6A7EFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          v38[4] = (void **)(a2 + 5);
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          BOOL v27 = (void **)(v25 + 1000 * v22);
          v38[0] = (void **)v25;
          v38[1] = v27;
          v38[3] = (void **)(v25 + 1000 * v26);
          KB::Candidate::Candidate((KB::Candidate *)v27, v15);
          v38[2] = v27 + 125;
          std::vector<KB::Candidate>::__swap_out_circular_buffer(v28, v38);
          uint64_t v18 = a2[4];
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v38);
          unint64_t v12 = v21;
          float v11 = v20;
          int v10 = v19;
        }
        else
        {
          uint64_t v18 = (KB::Candidate *)((char *)KB::Candidate::Candidate(v16, (const KB::Candidate *)v29) + 1000);
        }
        a2[4] = v18;
        v38[0] = v10;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v38);
        v38[0] = v11;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v38);
        v38[0] = v12;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v38);
        v38[0] = (void **)&v29;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v38);
        char v9 = 1;
        uint64_t v13 = 2;
        if (v14) {
          goto LABEL_21;
        }
      }
      v38[0] = v10;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v38);
      v38[0] = v11;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v38);
      v38[0] = v12;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v38);
      v38[0] = (void **)&v29;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v38);
    }
LABEL_21:
    float v29 = (void **)&v37;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v29);
    float v29 = (void **)&v36;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v29);
    float v29 = (void **)&v35;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v29);
    float v29 = (void **)v34;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v29);
  }
}

void KB::ChooseTopQualityAutocorrection::filter_candidates_subset(KB::ChooseTopQualityAutocorrection *this, KB::Candidate **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4, float a5)
{
  v53[2] = *MEMORY[0x1E4F143B8];
  if (*a2 != a2[1])
  {
    KB::Candidate::capitalized_string(*a2, (uint64_t)v50);
    KB::Candidate::capitalized_string(a3, (uint64_t)&v46);
    BOOL v10 = KB::String::equal((KB::String *)&v46, (const KB::String *)v50, 1);
    if (v47.i64[0] && BYTE6(v46) == 1) {
      free((void *)v47.i64[0]);
    }
    KB::Candidate::capitalized_string((const KB::CandidateFilterLookupContext *)((char *)a3 + 2168), (uint64_t)&v46);
    char v36 = KB::String::equal((KB::String *)&v46, (const KB::String *)v50, 1);
    if (v47.i64[0] && BYTE6(v46) == 1) {
      free((void *)v47.i64[0]);
    }
    int v44 = 0;
    memset(v42, 0, sizeof(v42));
    memset(v43, 0, sizeof(v43));
    std::vector<KB::Candidate>::__insert_with_size[abi:nn180100]<std::__wrap_iter<KB::Candidate const*>,std::__wrap_iter<KB::Candidate const*>>((uint64_t *)v43, 0, a2[6], a2[7], 0x1CAC083126E978D5 * ((a2[7] - a2[6]) >> 3));
    std::vector<KB::Candidate>::__insert_with_size[abi:nn180100]<std::__wrap_iter<KB::Candidate const*>,std::__wrap_iter<KB::Candidate const*>>((uint64_t *)&v42[1] + 1, 0, a2[3], a2[4], 0x1CAC083126E978D5 * ((a2[4] - a2[3]) >> 3));
    KB::Candidate::capitalized_string(a3, (uint64_t)&v46);
    BOOL v12 = KB::String::equal((KB::String *)&v46, (const KB::String *)v50, 0);
    if (v47.i64[0] && BYTE6(v46) == 1) {
      free((void *)v47.i64[0]);
    }
    char v13 = (*((unsigned char *)a2 + 100) & 1) == 0 || v12;
    if ((v13 & 1) == 0) {
      v44 |= 1u;
    }
    if (v12)
    {
      uint64_t v35 = this;
      char v14 = *a2;
      if (*(void *)&v43[2] >= *((void *)&v43[2] + 1))
      {
        uint64_t v16 = 0x1CAC083126E978D5 * ((uint64_t)(*(void *)&v43[2] - *((void *)&v43[1] + 1)) >> 3);
        if ((unint64_t)(v16 + 1) > 0x4189374BC6A7EFLL) {
          abort();
        }
        unint64_t v17 = 0x395810624DD2F1AALL * ((uint64_t)(*((void *)&v43[2] + 1) - *((void *)&v43[1] + 1)) >> 3);
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        if ((unint64_t)(0x1CAC083126E978D5
                              * ((uint64_t)(*((void *)&v43[2] + 1) - *((void *)&v43[1] + 1)) >> 3)) >= 0x20C49BA5E353F7)
          unint64_t v18 = 0x4189374BC6A7EFLL;
        else {
          unint64_t v18 = v17;
        }
        uint64_t v49 = (char *)&v43[2] + 8;
        if (v18) {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = (KB::Candidate *)(v18 + 1000 * v16);
        unsigned int v46 = (void **)v18;
        v47.i64[0] = (uint64_t)v20;
        unint64_t v48 = v18 + 1000 * v19;
        KB::Candidate::Candidate(v20, v14);
        int v15 = (char *)v20 + 1000;
        v47.i64[1] = (uint64_t)v15;
        uint64_t v21 = *((void *)&v43[1] + 1);
        uint64_t v22 = *(void *)&v43[2];
        uint64_t v23 = v47.i64[0];
        if (*(void *)&v43[2] == *((void *)&v43[1] + 1))
        {
          int64x2_t v24 = vdupq_n_s64(*(unint64_t *)&v43[2]);
        }
        else
        {
          do
          {
            v22 -= 1000;
            uint64_t v23 = KB::Candidate::Candidate(v23 - 1000, v22);
          }
          while (v22 != v21);
          int64x2_t v24 = *(int64x2_t *)((char *)&v43[1] + 8);
          int v15 = (char *)v47.i64[1];
        }
        *((void *)&v43[1] + 1) = v23;
        *(void *)&v43[2] = v15;
        int64x2_t v47 = v24;
        unint64_t v25 = *((void *)&v43[2] + 1);
        *((void *)&v43[2] + 1) = v48;
        unint64_t v48 = v25;
        unsigned int v46 = (void **)v24.i64[0];
        std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v46);
      }
      else
      {
        int v15 = (char *)KB::Candidate::Candidate(*(KB::Candidate **)&v43[2], *a2) + 1000;
      }
      *(void *)&v43[2] = v15;
      this = v35;
    }
    if (v10)
    {
      uint64_t v26 = (__CFString *)*((void *)a4 + 7);
      if (v26)
      {
        BOOL v27 = v52;
        if (!v52) {
          BOOL v27 = (const char *)v53;
        }
        if (v50[0]) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = "";
        }
        KB::append_format(v26, (__CFString *)"[%s] matches the input string - ignoring\n", v11, v28);
      }
    }
    else if (KB::ChooseTopQualityAutocorrection::is_first_candidate_significantly_better((uint64_t)this, a2, v36, a3, (uint64_t *)a4, a5))
    {
      KB::Candidate::Candidate((KB::Candidate *)&v46, *a2);
      float v30 = (char *)operator new(0x3E8uLL);
      uint64_t v31 = (const KB::Candidate *)(v30 + 1000);
      v37[0] = (const KB::Candidate *)v30;
      v37[2] = (const KB::Candidate *)(v30 + 1000);
      KB::Candidate::Candidate((KB::Candidate *)v30, (const KB::Candidate *)&v46);
      v37[1] = v31;
      int v41 = 0;
      memset(v38, 0, sizeof(v38));
      long long v39 = 0u;
      uint64_t v40 = 0;
      KB::CandidateCollection::add((KB::CandidateCollection *)v42, v37);
      double v45 = (const KB::Candidate **)&v39;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v45);
      double v45 = (const KB::Candidate **)&v38[1] + 1;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v45);
      double v45 = (const KB::Candidate **)v38;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v45);
      double v45 = v37;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v45);
      KB::Candidate::~Candidate((KB::Candidate *)&v46);
    }
    else
    {
      uint64_t v32 = (__CFString *)*((void *)a4 + 7);
      if (v32)
      {
        uint64_t v33 = v52;
        if (!v52) {
          uint64_t v33 = (const char *)v53;
        }
        if (v50[0]) {
          double v34 = v33;
        }
        else {
          double v34 = "";
        }
        KB::append_format(v32, (__CFString *)"[%s] not significantly better than input - rejecting\n", v29, v34);
      }
    }
    KB::CandidateCollection::operator=((uint64_t)a2, (uint64_t)v42);
    unsigned int v46 = (void **)&v43[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v46);
    unsigned int v46 = (void **)v43;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v46);
    unsigned int v46 = (void **)&v42[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v46);
    unsigned int v46 = (void **)v42;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v46);
    if (v52)
    {
      if (v51 == 1) {
        free(v52);
      }
    }
  }
}

uint64_t KB::ChooseTopQualityAutocorrection::is_first_candidate_significantly_better(uint64_t a1, KB::Candidate **a2, char a3, unsigned char *a4, uint64_t *a5, float a6)
{
  char v9 = a2;
  v123[2] = *MEMORY[0x1E4F143B8];
  BOOL v10 = *a2;
  float v11 = a4 + 2008;
  KB::Candidate::capitalized_string((KB::Candidate *)a4, (uint64_t)v119);
  KB::Candidate::capitalized_string(v10, (uint64_t)v115);
  difference = (const KB::Candidate *)KB::ChooseTopQualityAutocorrection::case_sens_position_of_first_difference((KB::String *)v119, v11, (KB::String *)v115);
  int v100 = KB::Candidate::length((KB::Candidate *)a4);
  int v99 = KB::ChooseTopQualityAutocorrection::inactive_prefix_length_for_candidate((KB::ChooseTopQualityAutocorrection *)a4, v10, difference);
  int v13 = KB::Candidate::length(v10);
  int v14 = KB::Candidate::length((KB::Candidate *)a4);
  if (v117) {
    int v15 = v117;
  }
  else {
    int v15 = v118;
  }
  v108[0] = v15;
  int v16 = v115[0];
  LODWORD(v108[1]) = 0;
  HIDWORD(v108[1]) = v115[0];
  LODWORD(v109[0]) = 0;
  KB::String::iterator::initialize((uint64_t *)v108);
  *(_OWORD *)uint64_t v110 = *(_OWORD *)v108;
  v111[0] = v109[0];
  std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)v110, (int)difference);
  v104 = v15;
  int v105 = v16;
  int v106 = v16;
  int v107 = 0;
  KB::String::iterator::initialize((uint64_t *)&v104);
  KB::String::String((KB::String *)v112, (const KB::String::iterator *)v110, (const KB::String::iterator *)&v104);
  BOOL v20 = KB::string_has_precomposed_diacritic_letters((KB *)v112, v17)
     || KB::string_has_separated_diacritics((KB *)v112, v18)
     || KB::ChooseTopQualityAutocorrection::string_contains_word_medial_punctuation(v112, a5[5]);
  if (KB::ChooseTopQualityAutocorrection::does_candidate_extend_one_letter_word((KB::ChooseTopQualityAutocorrection *)a4, v10, v19)&& !a4[3175])
  {
    uint64_t v22 = (__CFString *)a5[7];
    if (!v22)
    {
LABEL_91:
      uint64_t v40 = 0;
      goto LABEL_92;
    }
    KB::Candidate::capitalized_string(*v9, (uint64_t)v110);
    int64x2_t v24 = (const char *)v110[1];
    if (!v110[1]) {
      int64x2_t v24 = (const char *)v111;
    }
    if (LOWORD(v110[0])) {
      unint64_t v25 = v24;
    }
    else {
      unint64_t v25 = "";
    }
    KB::append_format(v22, (__CFString *)"[%s] prediction skipped for single-character input\n", v23, v25);
LABEL_88:
    if (v110[1] && BYTE6(v110[0]) == 1) {
      free(v110[1]);
    }
    goto LABEL_91;
  }
  float v26 = *(float *)(a1 + 8);
  if (KB::ChooseTopQualityAutocorrection::candidate_is_complex((KB::ChooseTopQualityAutocorrection *)a4, v10, (const KB::Candidate *)a5, v21)&& !KB::ChooseTopQualityAutocorrection::should_allow_complex_candidate((KB::ChooseTopQualityAutocorrection *)a4, v10, (const KB::Candidate *)a5, v26, v27))
  {
    uint64_t v40 = a5[7];
    if (v40)
    {
      KB::Candidate::capitalized_string(v10, (uint64_t)v110);
      int v42 = (const char *)v110[1];
      if (!v110[1]) {
        int v42 = (const char *)v111;
      }
      if (LOWORD(v110[0])) {
        uint64_t v43 = v42;
      }
      else {
        uint64_t v43 = "";
      }
      KB::append_format((__CFString *)v40, (__CFString *)"[%s] skipped complex candidate with insufficient linguistic support\n", v41, v43);
      goto LABEL_88;
    }
  }
  else
  {
    if (v119[0] <= v115[0])
    {
      if (v117) {
        float v29 = (const char *)v117;
      }
      else {
        float v29 = v118;
      }
      if (v122) {
        float v30 = v122;
      }
      else {
        float v30 = (const char *)v123;
      }
      BOOL v28 = strncasecmp(v29, v30, v119[0]) == 0;
    }
    else
    {
      BOOL v28 = 0;
    }
    int v31 = v120;
    if (!v120)
    {
      BOOL v32 = v28;
      KB::String::compute_length(v119);
      BOOL v28 = v32;
      int v31 = v120;
    }
    int v33 = v13 - v14;
    BOOL v98 = v20;
    if (v20)
    {
      BOOL v34 = 0;
    }
    else
    {
      if (*(void *)v10)
      {
        uint64_t v35 = 240 * *(void *)v10 - 240;
        char v36 = (uint64_t *)(*((void *)v10 + 1) + 224);
        do
        {
          uint64_t v37 = *v36;
          v36 += 30;
          BOOL v38 = v37 != 0;
          if (v37) {
            BOOL v39 = 1;
          }
          else {
            BOOL v39 = v35 == 0;
          }
          v35 -= 240;
        }
        while (!v39);
      }
      else
      {
        BOOL v38 = 0;
      }
      BOOL v34 = 0;
      if (!v38 && difference == v31 && (a3 & 1) == 0)
      {
        int v44 = (_DWORD *)(a1 + 24);
        if (v33 == 2) {
          int v44 = (_DWORD *)(a1 + 20);
        }
        if (v33 <= 1) {
          int v44 = (_DWORD *)(a1 + 16);
        }
        BOOL v34 = (v100 - v99) < *v44;
      }
    }
    double v45 = *v9;
    uint64_t v46 = v9[1] - *v9;
    unint64_t v47 = 0x1CAC083126E978D5 * (v46 >> 3);
    float v48 = 0.0;
    if (v47 >= 2)
    {
      BOOL v49 = v28;
      v102 = a5;
      int v50 = v9;
      int v51 = v33;
      int v52 = (int)difference;
      int v53 = v31;
      float v54 = expf(*((float *)v45 + 436));
      int v31 = v53;
      LODWORD(difference) = v52;
      int v33 = v51;
      char v9 = v50;
      a5 = v102;
      BOOL v28 = v49;
      float v48 = v54;
    }
    int v55 = v46 != 1000 || v34;
    if ((v55 & v28) != 1) {
      goto LABEL_66;
    }
    int v56 = v98;
    if (v33 < 1) {
      int v56 = 1;
    }
    if (difference != v31 && v56)
    {
LABEL_66:
      uint64_t v57 = (__CFString *)a5[7];
      if (v57)
      {
        KB::Candidate::capitalized_string(v45, (uint64_t)v110);
        char v59 = (const char *)v110[1];
        if (!v110[1]) {
          char v59 = (const char *)v111;
        }
        if (LOWORD(v110[0])) {
          uint64_t v60 = v59;
        }
        else {
          uint64_t v60 = "";
        }
        KB::append_format(v57, (__CFString *)"[%s] dominant due to mismatch with typed string\n", v58, v60);
LABEL_73:
        if (v110[1] && BYTE6(v110[0]) == 1) {
          free(v110[1]);
        }
      }
LABEL_76:
      uint64_t v40 = 1;
      goto LABEL_92;
    }
    char v61 = v47 < 2 || v34;
    if ((v61 & 1) == 0)
    {
      uint64_t v66 = (KB::Candidate *)((char *)v45 + 888);
      if (!*((_WORD *)v45 + 444))
      {
        KB::Candidate::compute_string(v45);
        double v45 = *v9;
      }
      if (!*((_WORD *)v45 + 944)) {
        KB::Candidate::compute_string((KB::Candidate *)((char *)v45 + 1000));
      }
      if (KB::String::equal(v66, (KB::Candidate *)((char *)v45 + 1888), 0))
      {
        unint64_t v67 = (__CFString *)a5[7];
        if (!v67) {
          goto LABEL_76;
        }
        KB::Candidate::capitalized_string(*v9, (uint64_t)v110);
        uint64_t v68 = (const char *)v110[1];
        if (!v110[1]) {
          uint64_t v68 = (const char *)v111;
        }
        if (LOWORD(v110[0])) {
          uint64_t v69 = v68;
        }
        else {
          uint64_t v69 = "";
        }
        KB::Candidate::capitalized_string((KB::Candidate *)((char *)*v9 + 1000), (uint64_t)v108);
        uint64_t v71 = (const char *)v108[1];
        if (!v108[1]) {
          uint64_t v71 = (const char *)v109;
        }
        if (LOWORD(v108[0])) {
          uint64_t v72 = v71;
        }
        else {
          uint64_t v72 = "";
        }
        KB::append_format(v67, (__CFString *)"[%s] candidate is dominant as second candidate [%s] is a duplicate as well\n", v70, v69, v72);
      }
      else
      {
        unint64_t v73 = *v9;
        uint64_t v74 = *v9;
        if (!*((_WORD *)*v9 + 944))
        {
          KB::Candidate::compute_string((KB::Candidate *)((char *)v73 + 1000));
          uint64_t v74 = *v9;
        }
        unsigned int v75 = *((unsigned __int16 *)v74 + 444);
        if (!*((_WORD *)v74 + 444))
        {
          KB::Candidate::compute_string(v74);
          unsigned int v75 = *((unsigned __int16 *)v74 + 444);
        }
        if (v75 > *((unsigned __int16 *)v73 + 944)
          || (*((void *)v73 + 237) ? (long long v76 = (const char *)*((void *)v73 + 237)) : (long long v76 = (char *)v73 + 1904),
              *((void *)v74 + 112) ? (int8x16_t v77 = (const char *)*((void *)v74 + 112)) : (int8x16_t v77 = (char *)v74 + 904),
              strncasecmp(v76, v77, v75)))
        {
          if (a4[3172]) {
            BOOL v78 = v98;
          }
          else {
            BOOL v78 = 0;
          }
          if (v78 && (uint64_t v79 = *((void *)*v9 + 125)) != 0)
          {
            uint64_t v80 = 240 * v79 - 240;
            int8x16_t v81 = (int *)(*((void *)*v9 + 126) + 120);
            do
            {
              int v82 = *v81;
              v81 += 60;
              BOOL v83 = v82 != 0;
              if (v82) {
                BOOL v84 = 1;
              }
              else {
                BOOL v84 = v80 == 0;
              }
              v80 -= 240;
            }
            while (!v84);
          }
          else
          {
            BOOL v83 = 0;
          }
          float v85 = v48 * *(float *)(a1 + 12);
          uint64_t v86 = (__CFString *)a5[7];
          if (v86)
          {
            KB::Candidate::capitalized_string(*v9, (uint64_t)v110);
            uint64_t v88 = (const char *)v110[1];
            if (!v110[1]) {
              uint64_t v88 = (const char *)v111;
            }
            if (LOWORD(v110[0])) {
              int8x16_t v89 = v88;
            }
            else {
              int8x16_t v89 = "";
            }
            float v90 = "false";
            if (v85 >= a6) {
              int8x16_t v91 = "false";
            }
            else {
              int8x16_t v91 = "true";
            }
            if (v83) {
              float v90 = "true";
            }
            KB::append_format(v86, (__CFString *)"[%s] dominant=%s (p0=%g,p1=%g) (competing_variants=%s)\n", v87, v89, v91, a6, v48, v90);
            if (v110[1] && BYTE6(v110[0]) == 1) {
              free(v110[1]);
            }
          }
          uint64_t v40 = v85 < a6 && !v83;
          goto LABEL_92;
        }
        uint64_t v92 = (__CFString *)a5[7];
        if (!v92) {
          goto LABEL_76;
        }
        KB::Candidate::capitalized_string(*v9, (uint64_t)v110);
        int8x16_t v93 = (const char *)v110[1];
        if (!v110[1]) {
          int8x16_t v93 = (const char *)v111;
        }
        if (LOWORD(v110[0])) {
          int64_t v94 = v93;
        }
        else {
          int64_t v94 = "";
        }
        KB::Candidate::capitalized_string((KB::Candidate *)((char *)*v9 + 1000), (uint64_t)v108);
        uint64_t v96 = (const char *)v108[1];
        if (!v108[1]) {
          uint64_t v96 = (const char *)v109;
        }
        if (LOWORD(v108[0])) {
          uint64_t v97 = v96;
        }
        else {
          uint64_t v97 = "";
        }
        KB::append_format(v92, (__CFString *)"[%s] candidate is dominant as it is a subset (prefix) of the second candidate [%s]\n", v95, v94, v97);
      }
      if (v108[1] && BYTE6(v108[0]) == 1) {
        free(v108[1]);
      }
      goto LABEL_73;
    }
    uint64_t v40 = a5[7];
    if (v40)
    {
      KB::Candidate::capitalized_string(v45, (uint64_t)v110);
      uint64_t v63 = (const char *)v110[1];
      if (!v110[1]) {
        uint64_t v63 = (const char *)v111;
      }
      if (LOWORD(v110[0])) {
        unint64_t v64 = v63;
      }
      else {
        unint64_t v64 = "";
      }
      KB::append_format((__CFString *)v40, (__CFString *)"[%s] skipped as length gain from autocorrection does not produce a viable candidate\n", v62, v64);
      goto LABEL_88;
    }
  }
LABEL_92:
  if (v114 && v113 == 1) {
    free(v114);
  }
  if (v117 && v116 == 1) {
    free(v117);
  }
  if (v122 && v121 == 1) {
    free(v122);
  }
  return v40;
}

uint64_t KB::ChooseTopQualityAutocorrection::case_sens_position_of_first_difference(KB::String *this, void *a2, KB::String *a3)
{
  LODWORD(v6) = *((unsigned __int16 *)this + 2);
  if (!*((_WORD *)this + 2))
  {
    KB::String::compute_length((unsigned __int16 *)this);
    LODWORD(v6) = *((unsigned __int16 *)this + 2);
  }
  unsigned int v7 = *((unsigned __int16 *)a3 + 2);
  if (!*((_WORD *)a3 + 2))
  {
    KB::String::compute_length((unsigned __int16 *)a3);
    unsigned int v7 = *((unsigned __int16 *)a3 + 2);
  }
  if (v7 >= v6) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = v7;
  }
  float v8 = (char *)*((void *)this + 1);
  if (!v8) {
    float v8 = (char *)this + 16;
  }
  *(void *)&long long v29 = v8;
  int v9 = *(unsigned __int16 *)this;
  DWORD2(v29) = 0;
  HIDWORD(v29) = v9;
  LODWORD(v30) = 0;
  KB::String::iterator::initialize((uint64_t *)&v29);
  long long v35 = v29;
  int v36 = v30;
  BOOL v10 = (char *)*((void *)a3 + 1);
  if (!v10) {
    BOOL v10 = (char *)a3 + 16;
  }
  *(void *)BOOL v34 = v10;
  unsigned int v11 = *(unsigned __int16 *)a3;
  *(_DWORD *)&v34[8] = 0;
  *(void *)&v34[12] = v11;
  KB::String::iterator::initialize((uint64_t *)v34);
  *(void *)&long long v29 = 0;
  *((void *)&v29 + 1) = &v29;
  uint64_t v30 = 0x3002000000;
  int v31 = __Block_byref_object_copy__20993;
  uint64_t v12 = *a2;
  BOOL v32 = __Block_byref_object_dispose__20994;
  uint64_t v33 = v12;
  long long v26 = v35;
  int v27 = v36;
  int v28 = 0;
  std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v26, v6);
  uint64_t v13 = 0;
  int v14 = DWORD2(v26);
  long long v23 = v35;
  int v24 = v36;
  unsigned int v25 = 0;
  long long v21 = *(_OWORD *)v34;
  uint64_t v22 = *(void *)&v34[16];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  unint64_t v17 = ___ZN2KB30ChooseTopQualityAutocorrection38case_sens_position_of_first_differenceERKNS_6StringERKNSt3__16vectorIjNS4_9allocatorIjEEEES3__block_invoke;
  unint64_t v18 = &unk_1E6E2DC60;
  uint64_t v19 = &v29;
  BOOL v20 = a2;
  if (DWORD2(v35) != DWORD2(v26))
  {
    do
    {
      LODWORD(v26) = v24;
      int v37 = v22;
      if (!((unsigned int (*)(void *, long long *, int *))v17)(v16, &v26, &v37)) {
        break;
      }
      ++v25;
      KB::String::iterator::operator++((uint64_t *)&v23);
      KB::String::iterator::operator++((uint64_t *)&v21);
    }
    while (DWORD2(v23) != v14);
    uint64_t v13 = v25;
  }
  _Block_object_dispose(&v29, 8);
  return v13;
}

uint64_t KB::ChooseTopQualityAutocorrection::inactive_prefix_length_for_candidate(KB::ChooseTopQualityAutocorrection *this, const KB::Candidate *a2, const KB::Candidate *a3)
{
  int v3 = (int)a3;
  unsigned int v6 = KB::Candidate::index_of_word_containing_position(this, a3);
  if (KB::Candidate::does_word_begin_at_position(this, v3)) {
    v6 -= !KB::Candidate::does_word_begin_at_position(a2, v3);
  }

  return KB::Candidate::length_to_word(this, v6);
}

BOOL KB::ChooseTopQualityAutocorrection::string_contains_word_medial_punctuation(unsigned __int16 *a1, uint64_t a2)
{
  int v3 = a1 + 8;
  if (*((void *)a1 + 1)) {
    uint64_t v4 = *((void *)a1 + 1);
  }
  else {
    uint64_t v4 = (uint64_t)(a1 + 8);
  }
  if (a2)
  {
    uint64_t v33 = v4;
    unsigned int v6 = *a1;
    unsigned int v34 = 0;
    uint64_t v35 = v6;
    KB::String::iterator::initialize(&v33);
    uint64_t v29 = v4;
    unsigned int v30 = v6;
    unsigned int v31 = v6;
    int v32 = 0;
    KB::String::iterator::initialize(&v29);
    unsigned int v7 = v34;
    unsigned int v8 = v30;
    if (v34 != v30)
    {
      while (!(*(unsigned int (**)(uint64_t, void))(a2 + 16))(a2, HIDWORD(v35)))
      {
        KB::String::iterator::operator++(&v33);
        if (v34 == v8)
        {
          unsigned int v7 = v8;
          goto LABEL_19;
        }
      }
      unsigned int v7 = v34;
    }
LABEL_19:
    int v14 = *a1;
    uint64_t v15 = *((void *)a1 + 1);
    if (!v15) {
      uint64_t v15 = (uint64_t)v3;
    }
    uint64_t v25 = v15;
    int v26 = v14;
    int v27 = v14;
    int v28 = 0;
    KB::String::iterator::initialize(&v25);
    BOOL v12 = v7 == v26;
  }
  else
  {
    uint64_t v21 = v4;
    int v9 = *a1;
    int v22 = 0;
    int v23 = v9;
    int v24 = 0;
    KB::String::iterator::initialize(&v21);
    uint64_t v17 = v4;
    int v18 = v9;
    int v19 = v9;
    int v20 = 0;
    KB::String::iterator::initialize(&v17);
    int v10 = v22;
    int v11 = v18;
    if (v22 != v18)
    {
      while ((v24 - 38) >= 2)
      {
        if ((v24 - 1523) < 2 || v24 == 8217) {
          break;
        }
        KB::String::iterator::operator++(&v21);
        int v10 = v22;
        if (v22 == v11)
        {
          int v10 = v11;
          break;
        }
      }
    }
    uint64_t v25 = v4;
    int v26 = v9;
    int v27 = v9;
    int v28 = 0;
    KB::String::iterator::initialize(&v25);
    BOOL v12 = v10 == v26;
  }
  return !v12;
}

BOOL KB::ChooseTopQualityAutocorrection::does_candidate_extend_one_letter_word(KB::ChooseTopQualityAutocorrection *this, const KB::Candidate *a2, const KB::Candidate *a3)
{
  unsigned int v5 = KB::Candidate::length(a2);
  unsigned int v6 = KB::Candidate::length(this);
  uint64_t v7 = *(void *)a2;
  if (*(void *)a2)
  {
    int v8 = 0;
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v10 = 240 * v7;
    do
    {
      if ((*(unsigned char *)(v9 + 135) & 4) == 0)
      {
        int v11 = *(unsigned __int16 *)(v9 + 4);
        if (!*(_WORD *)(v9 + 4))
        {
          KB::String::compute_length((unsigned __int16 *)v9);
          int v11 = *(unsigned __int16 *)(v9 + 4);
        }
        if (v11 == 1) {
          ++v8;
        }
      }
      v9 += 240;
      v10 -= 240;
    }
    while (v10);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v12 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v13 = *((void *)this + 1);
    uint64_t v14 = 240 * v12;
    do
    {
      if ((*(unsigned char *)(v13 + 135) & 4) == 0)
      {
        int v15 = *(unsigned __int16 *)(v13 + 4);
        if (!*(_WORD *)(v13 + 4))
        {
          KB::String::compute_length((unsigned __int16 *)v13);
          int v15 = *(unsigned __int16 *)(v13 + 4);
        }
        v8 -= v15 == 1;
      }
      v13 += 240;
      v14 -= 240;
    }
    while (v14);
  }
  return v5 > v6 && v8 < 0;
}

BOOL KB::ChooseTopQualityAutocorrection::candidate_is_complex(KB::ChooseTopQualityAutocorrection *this, const KB::Candidate *a2, const KB::Candidate *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  KB::Candidate::capitalized_string(this, (uint64_t)&v42);
  __int16 v37 = 0;
  char v38 = 0;
  BOOL v39 = " \t\n";
  int v36 = 1048579;
  char v41 = 0;
  KB::string_split_after((unsigned __int16 *)&v42, (const KB::String *)&v36, &v34);
  if (v39) {
    BOOL v7 = v38 == 1;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    free(v39);
  }
  if (v43 && BYTE6(v42) == 1) {
    free(v43);
  }
  KB::Candidate::capitalized_string(a2, (uint64_t)&v42);
  __int16 v37 = 0;
  char v38 = 0;
  BOOL v39 = " \t\n";
  int v36 = 1048579;
  char v41 = 0;
  KB::string_split_after((unsigned __int16 *)&v42, (const KB::String *)&v36, &v32);
  if (v39 && v38 == 1) {
    free(v39);
  }
  if (v43 && BYTE6(v42) == 1) {
    free(v43);
  }
  uint64_t v8 = *((void *)a3 + 2);
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  }
  uint64_t v9 = *(void *)(v8 + 8);
  WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v8);
  LOBYTE(v42) = 0;
  std::vector<BOOL>::vector(&v30, (v35 - v34) >> 5, (unsigned __int8 *)&v42);
  uint64_t v10 = v34;
  int v11 = v35;
  if (v35 == v34)
  {
    uint64_t v10 = v35;
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      if (v13 >= (v33 - (uint64_t)v32) >> 5) {
        break;
      }
      if (v10 == v32) {
        goto LABEL_26;
      }
      uint64_t v14 = (KB::String *)((char *)v10 + v12);
      int v15 = (KB::String *)((char *)v32 + v12);
      if (KB::String::equal((KB::String *)((char *)v10 + v12), (KB::String *)((char *)v32 + v12), 1)) {
        goto LABEL_26;
      }
      uint64_t v16 = *(void *)(v9 + 168);
      if (!v16) {
        std::__throw_bad_function_call[abi:nn180100]();
      }
      if ((*(unsigned int (**)(uint64_t, const KB::String *, const KB::String *))(*(void *)v16 + 48))(v16, v15, v14))
      {
        int v42 = (KB::String **)&unk_1F3F77D18;
        uint64_t v43 = (void *)1;
        if (KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)&v42, v15, v14, 0, 0))LABEL_26:*(void *)((char *)v30 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13; {
      }
        }
      ++v13;
      uint64_t v10 = v34;
      int v11 = v35;
      v12 += 32;
    }
    while (v13 < (v35 - v34) >> 5);
  }
  uint64_t v17 = v30;
  unint64_t v18 = v31;
  if (v31 < 0x40)
  {
    uint64_t v19 = 0;
    int v20 = v30;
    if (v31)
    {
LABEL_34:
      uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)v20 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v18)));
      v23.i16[0] = vaddlv_u8(v23);
      v19 += v23.u32[0];
    }
  }
  else
  {
    uint64_t v19 = 0;
    int v20 = v30;
    do
    {
      int8x8_t v21 = *v20++;
      uint8x8_t v22 = (uint8x8_t)vcnt_s8(v21);
      v22.i16[0] = vaddlv_u8(v22);
      v19 += v22.u32[0];
      v18 -= 64;
    }
    while (v18 > 0x3F);
    if (v18) {
      goto LABEL_34;
    }
  }
  uint64_t v24 = v11 - v10;
  if (v19 == v24 >> 5)
  {
LABEL_36:
    BOOL v25 = 0;
    goto LABEL_51;
  }
  unint64_t v26 = v24 >> 5;
  if (v19 + 1 == v26)
  {
    if (v26 >= (v33 - (uint64_t)v32) >> 5) {
      goto LABEL_36;
    }
    unsigned int v27 = KB::Candidate::length(this);
    int v36 = 0x100000;
    __int16 v37 = 0;
    char v38 = 0;
    BOOL v39 = 0;
    char v40 = 0;
    KB::string_join((unsigned __int16 *)v32, (unsigned __int16 *)((char *)v32 + v35 - v34), (const KB::String *)&v36, (uint64_t)&v42);
    if (v39 && v38 == 1) {
      free(v39);
    }
    unsigned int v28 = WORD2(v42);
    if (!WORD2(v42))
    {
      KB::String::compute_length((unsigned __int16 *)&v42);
      unsigned int v28 = WORD2(v42);
    }
    BOOL v25 = v27 >= v28;
    if (v43 && BYTE6(v42) == 1) {
      free(v43);
    }
    uint64_t v17 = v30;
  }
  else
  {
    BOOL v25 = 1;
  }
LABEL_51:
  if (v17) {
    operator delete(v17);
  }
  int v42 = &v32;
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v42);
  int v42 = &v34;
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v42);
  return v25;
}

BOOL KB::ChooseTopQualityAutocorrection::should_allow_complex_candidate(KB::ChooseTopQualityAutocorrection *this, const KB::Candidate *a2, const KB::Candidate *a3, float a4, const KB::CandidateFilterResources *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = (atomic_uint *)*((void *)a3 + 2);
  uint64_t v7 = 1;
  if (v6)
  {
    atomic_fetch_add(v6, 1u);
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v6);
    if (*(void *)a2 >= 2uLL)
    {
      uint64_t v11 = *((void *)a3 + 2);
      if (v11) {
        atomic_fetch_add((atomic_uint *volatile)v11, 1u);
      }
      uint64_t v12 = *(void *)(v11 + 8) + 144;
      WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v11);
      unsigned int v13 = KB::Candidate::num_words_preserving_input(a2, this, v12);
      if (*(void *)a2 <= (unint64_t)v13) {
        return (float)(1.0 / 1.0) >= a4;
      }
      unint64_t v14 = v13;
      uint64_t v15 = 240 * v13;
      do
      {
        uint64_t v16 = *((void *)a2 + 1);
        uint64_t v17 = (KB::Word *)(v16 + v15);
        if ((*(unsigned char *)(v16 + v15 + 135) & 4) == 0 && (*((unsigned char *)v17 + 106) & 4) != 0)
        {
          unint64_t v18 = (atomic_uint *)*((void *)a3 + 2);
          if (v18) {
            atomic_fetch_add(v18, 1u);
          }
          KB::Word::capitalized_string(v17, (uint64_t)v21);
          TITokenID v20 = *(TITokenID *)(v16 + v15 + 136);
          KB::DictionaryContainer::_probability_of_word_with_string_and_id(v18, (const KB::String *)v21, &v20);
        }
        ++v14;
        v15 += 240;
      }
      while (v14 < *(void *)a2);
      return 1.0 <= 0.0 || (float)(1.0 / 1.0) >= a4;
    }
  }
  return v7;
}

uint64_t __Block_byref_object_copy__20993(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  return result;
}

BOOL ___ZN2KB30ChooseTopQualityAutocorrection38case_sens_position_of_first_differenceERKNS_6StringERKNSt3__16vectorIjNS4_9allocatorIjEEEES3__block_invoke(uint64_t a1, UChar32 *a2, UChar32 *a3)
{
  if (*a2 != *a3)
  {
    int v7 = MEMORY[0x1E4E7CC30]();
    if (v7 != MEMORY[0x1E4E7CC30](*a2) || u_isupper(*a3) && u_islower(*a2))
    {
      BOOL result = 0;
      goto LABEL_7;
    }
    if (u_islower(*a3))
    {
      if (u_isupper(*a2))
      {
        uint64_t v8 = *(unsigned char **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        if ((unint64_t)v8 < *(void *)(*(void *)(a1 + 40) + 8))
        {
          BOOL result = (*v8 & 0x10) == 0;
          goto LABEL_7;
        }
      }
    }
  }
  BOOL result = 1;
LABEL_7:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) += 4;
  return result;
}

const char *KB::ChooseTopQualityAutocorrection::filter_description(KB::ChooseTopQualityAutocorrection *this)
{
  return "ChooseTopQualityAutocorrection";
}

void KB::ChooseTopQualityAutocorrection::~ChooseTopQualityAutocorrection(KB::ChooseTopQualityAutocorrection *this)
{
}

uint64_t KB::ChooseTopQualityAutocorrection::min_stem_length_for_predicting_num_letters(KB::ChooseTopQualityAutocorrection *this, int a2)
{
  int v2 = (char *)this + 24;
  if (a2 == 2) {
    int v2 = (char *)this + 20;
  }
  if (a2 <= 1) {
    int v2 = (char *)this + 16;
  }
  return *(unsigned int *)v2;
}

uint64_t fieldName(void *a1, const char *a2)
{
  return [a1 stringByAppendingString:a2];
}

uint64_t bucketedLength(unsigned int a1)
{
  if (a1 >= 9) {
    int v1 = 9;
  }
  else {
    int v1 = 7;
  }
  if (a1 >= 7) {
    int v2 = v1;
  }
  else {
    int v2 = 5;
  }
  if (a1 < 5) {
    int v2 = a1;
  }
  if (a1 >= 3) {
    unsigned int v3 = v2;
  }
  else {
    unsigned int v3 = 1;
  }
  if ((int)a1 >= 1) {
    return v3;
  }
  else {
    return 0;
  }
}

__CFString *capitalization(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unsigned int v5 = [v3 capitalizedStringWithLocale:v4];
  char v6 = [v5 isEqualToString:v3];

  if (v6)
  {
    int v7 = @"initial";
  }
  else
  {
    uint64_t v8 = [v3 uppercaseStringWithLocale:v4];
    char v9 = [v8 isEqualToString:v3];

    if (v9)
    {
      int v7 = @"upper";
    }
    else
    {
      uint64_t v10 = [v3 lowercaseStringWithLocale:v4];
      int v11 = [v10 isEqualToString:v3];

      if (v11) {
        int v7 = @"lower";
      }
      else {
        int v7 = @"other";
      }
    }
  }

  return v7;
}

uint64_t diacritics(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = [v3 stringByFoldingWithOptions:128 locale:a2];
  int v5 = [v4 isEqualToString:v3];

  return v5 ^ 1u;
}

BOOL medialPunctuation(void *a1)
{
  id v1 = a1;
  if ((unint64_t)[v1 length] >= 3)
  {
    id v3 = objc_msgSend(v1, "substringWithRange:", 1, objc_msgSend(v1, "length") - 2);
    id v4 = [MEMORY[0x1E4F28B88] punctuationCharacterSet];
    uint64_t v5 = [v3 rangeOfCharacterFromSet:v4];

    BOOL v2 = v5 != 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    BOOL v2 = 0;
  }

  return v2;
}

BOOL containsWhitespace(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F28B88];
  id v2 = a1;
  id v3 = [v1 whitespaceCharacterSet];
  uint64_t v4 = [v2 rangeOfCharacterFromSet:v3];

  return v4 != 0x7FFFFFFFFFFFFFFFLL;
}

double clip(double a1, double a2, double a3)
{
  if (a1 >= a2) {
    a2 = a1;
  }
  if (a1 <= a3) {
    return a2;
  }
  else {
    return a3;
  }
}

unsigned int bucketedScore(double a1)
{
  double v1 = a1 * 10.0;
  if (a1 < -10.0) {
    double v1 = -100.0;
  }
  BOOL v2 = a1 <= 0.0;
  double v3 = 0.0;
  if (v2) {
    double v3 = v1;
  }
  return vcvtmd_s64_f64(v3);
}

uint64_t biggestBit(uint64_t a1, uint64_t a2)
{
  if ((int)a1 < (int)a2)
  {
    do
    {
      a2 = a1;
      a1 = (a1 - 1) & a1;
    }
    while (a1);
  }
  return a2;
}

id alignmentConfidence(uint64_t a1)
{
  if (alignmentConfidence_onceToken != -1) {
    dispatch_once(&alignmentConfidence_onceToken, &__block_literal_global_21385);
  }
  BOOL v2 = (void *)alignmentConfidence_map;
  double v3 = [NSNumber numberWithUnsignedInt:a1];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  return v4;
}

void __alignmentConfidence_block_invoke()
{
  v3[4] = *MEMORY[0x1E4F143B8];
  v2[0] = &unk_1F3FA7F88;
  v2[1] = &unk_1F3FA7FA0;
  v3[0] = @"none";
  v3[1] = @"low";
  v2[2] = &unk_1F3FA7FB8;
  v2[3] = &unk_1F3FA7FD0;
  v3[2] = @"mid";
  v3[3] = @"high";
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:v2 count:4];
  double v1 = (void *)alignmentConfidence_map;
  alignmentConfidence_map = v0;
}

id payloadForText(void *a1, void *a2, void *a3)
{
  v29[5] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  id v7 = a2;
  unsigned int v27 = [@"length" stringByAppendingString:v7];
  v28[0] = v27;
  uint64_t v8 = NSNumber;
  unsigned int v9 = [v5 length];
  if (v9 >= 9) {
    int v10 = 9;
  }
  else {
    int v10 = 7;
  }
  if (v9 >= 7) {
    int v11 = v10;
  }
  else {
    int v11 = 5;
  }
  if (v9 < 5) {
    int v11 = v9;
  }
  if (v9 >= 3) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = 1;
  }
  if ((int)v9 >= 1) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  unint64_t v26 = [v8 numberWithInt:v13];
  v29[0] = v26;
  unint64_t v14 = [@"capitalization" stringByAppendingString:v7];
  v28[1] = v14;
  uint64_t v15 = capitalization(v5, v6);
  v29[1] = v15;
  uint64_t v16 = [@"diacritics" stringByAppendingString:v7];
  v28[2] = v16;
  uint64_t v17 = NSNumber;
  uint64_t v18 = diacritics(v5, (uint64_t)v6);

  uint64_t v19 = [v17 numberWithBool:v18];
  v29[2] = v19;
  TITokenID v20 = [@"punctuation" stringByAppendingString:v7];
  v28[3] = v20;
  int8x8_t v21 = [NSNumber numberWithBool:medialPunctuation(v5)];
  v29[3] = v21;
  uint64_t v22 = [@"multiword" stringByAppendingString:v7];

  v28[4] = v22;
  uint8x8_t v23 = [NSNumber numberWithBool:containsWhitespace(v5)];
  v29[4] = v23;
  uint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v29 forKeys:v28 count:5];

  return v24;
}

id mergeDicts(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(v2, "addEntriesFromDictionary:", *(void *)(*((void *)&v10 + 1) + 8 * i), (void)v10);
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  uint64_t v8 = (void *)[v2 copy];

  return v8;
}

id concatArrays(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = [MEMORY[0x1E4F1CA48] array];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(v2, "addObjectsFromArray:", *(void *)(*((void *)&v10 + 1) + 8 * i), (void)v10);
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  uint64_t v8 = (void *)[v2 copy];

  return v8;
}

float KB::ContinuousPathDetector::Parameters::user_value_for_key(const __CFString *this, const __CFString *a2, float a3, float a4, float a5)
{
  CFNumberRef v8 = (const __CFNumber *)CFPreferencesCopyAppValue(this, @"com.apple.keyboard");
  CFNumberRef v9 = v8;
  float valuePtr = a3;
  if (v8 && CFNumberGetValue(v8, kCFNumberFloatType, &valuePtr)) {
    a3 = valuePtr;
  }
  if (a3 > a5) {
    float v10 = a5;
  }
  else {
    float v10 = a3;
  }
  if (a3 >= a4) {
    a4 = v10;
  }
  if (v9) {
    CFRelease(v9);
  }
  return a4;
}

void KB::ContinuousPathDetector::Parameters::user_parameters(const __CFString *a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_1E4154C10;
  *(void *)(a2 + 16) = 0x40A0000040000000;
  if (TI_IS_INTERNAL_INSTALL::once_token != -1) {
    dispatch_once(&TI_IS_INTERNAL_INSTALL::once_token, &__block_literal_global_3708);
  }
  if (TI_IS_INTERNAL_INSTALL::is_internal_install)
  {
    *(float *)a2 = KB::ContinuousPathDetector::Parameters::user_value_for_key(@"CPDetectorDecayRate", a1, -0.347, -10.0, -0.001);
    *(float *)(a2 + 4) = KB::ContinuousPathDetector::Parameters::user_value_for_key(@"CPDetectorPathWeight", v4, 5.0, 0.01, 100.0);
    *(float *)(a2 + 8) = KB::ContinuousPathDetector::Parameters::user_value_for_key(@"CPDetectorTotalPseudoWeight", v5, 5.0, 0.01, 100.0);
    float v7 = KB::ContinuousPathDetector::Parameters::user_value_for_key(@"CPDetectorMinThreshold", v6, 1.0, 0.01, 100.0);
    *(float *)(a2 + 12) = v7;
    float v9 = KB::ContinuousPathDetector::Parameters::user_value_for_key(@"CPDetectorNeutralThreshold", v8, 2.0, 0.01, 100.0);
    *(float *)(a2 + 16) = v9;
    float v11 = KB::ContinuousPathDetector::Parameters::user_value_for_key(@"CPDetectorMaxThreshold", v10, 5.0, 0.01, 100.0);
    *(float *)(a2 + 20) = v11;
    if (v9 < v7 || v11 < v9)
    {
      float v12 = v9 * 0.5;
      if ((float)(v9 * 0.5) >= v7) {
        float v12 = v7;
      }
      *(float *)(a2 + 12) = v12;
      if (v11 < (float)(v9 + v9)) {
        float v11 = v9 + v9;
      }
      *(float *)(a2 + 20) = v11;
    }
  }
}

float KB::ContinuousPathDetector::AnnotatedPath::horizontal_scale(KB::ContinuousPathDetector::AnnotatedPath *this)
{
  id v1 = (TI::Favonius::KeyboardLayout *)*((void *)this + 6);
  if (v1) {
    return TI::Favonius::KeyboardLayout::median_key_half_width(v1);
  }
  else {
    return 15.0;
  }
}

float KB::ContinuousPathDetector::AnnotatedPath::vertical_scale(KB::ContinuousPathDetector::AnnotatedPath *this)
{
  id v1 = (TI::Favonius::KeyboardLayout *)*((void *)this + 6);
  if (v1) {
    return TI::Favonius::KeyboardLayout::median_key_half_height(v1);
  }
  else {
    return 22.0;
  }
}

float KB::ContinuousPathDetector::AnnotatedPath::normalized_length(KB::ContinuousPathDetector::AnnotatedPath *this)
{
  float v2 = *((float *)this + 15);
  id v3 = (TI::Favonius::KeyboardLayout *)*((void *)this + 6);
  if (v3)
  {
    float v4 = TI::Favonius::KeyboardLayout::median_key_half_width(*((TI::Favonius::KeyboardLayout **)this + 6));
    float v5 = TI::Favonius::KeyboardLayout::median_key_half_height(v3);
  }
  else
  {
    float v5 = 22.0;
    float v4 = 15.0;
  }
  float v6 = *((float *)this + 16) / v5;

  return hypotf(v2 / v4, v6);
}

double KB::ContinuousPathDetector::AnnotatedPath::add_touch_event(TI::CP::Path *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 1);
  CGPoint v5 = *(CGPoint *)(a2 + 8);
  if (*(void *)this != v4) {
    *(float32x2_t *)((char *)this + 60) = vcvt_f32_f64(vaddq_f64(vabdq_f64(*(float64x2_t *)(v4 - 48), (float64x2_t)v5), vcvtq_f64_f32(*(float32x2_t *)((char *)this + 60))));
  }
  CGFloat y = v5.y;
  TI::CP::Path::append(this, v5, *(CGFloat *)(a2 + 32), 1.0, -1.0, 0.0);
  double result = *(double *)(a2 + 40);
  *(double *)((char *)this + 68) = result;
  return result;
}

int *KB::ContinuousPathDetector::AnnotatedPath::key_string(KB::ContinuousPathDetector::AnnotatedPath *this)
{
  uint64_t v12 = 0;
  long long v13 = &v12;
  uint64_t v14 = 0x3002000000;
  uint64_t v15 = __Block_byref_object_copy__21431;
  uint64_t v16 = __Block_byref_object_dispose__21432;
  uint64_t v17 = 0;
  uint64_t v1 = *((void *)this + 6);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  CFStringRef v8 = ___ZNK2KB22ContinuousPathDetector13AnnotatedPath10key_stringEv_block_invoke;
  float v9 = &unk_1E6E2DD28;
  CFStringRef v10 = &v12;
  float v11 = this;
  float v2 = *(atomic_uint ***)(v1 + 8);
  id v3 = *(atomic_uint ***)(v1 + 16);
  if (v2 == v3) {
    goto LABEL_5;
  }
  do
    v8((uint64_t)v7, v2++);
  while (v2 != v3);
  uint64_t v4 = v13[5];
  if (!v4)
  {
LABEL_5:
    {
      CGPoint v5 = &KB::ContinuousPathDetector::AnnotatedPath::key_string(void)const::empty_string;
    }
    else
    {
      CGPoint v5 = &KB::ContinuousPathDetector::AnnotatedPath::key_string(void)const::empty_string;
      {
        KB::ContinuousPathDetector::AnnotatedPath::key_string(void)const::empty_string = 0x100000;
        word_1EAE40C2C = 0;
        byte_1EAE40C2E = 0;
        qword_1EAE40C30 = 0;
        byte_1EAE40C38 = 0;
        __cxa_atexit((void (*)(void *))KB::String::~String, &KB::ContinuousPathDetector::AnnotatedPath::key_string(void)const::empty_string, &dword_1E3F0E000);
      }
    }
  }
  else
  {
    CGPoint v5 = (int *)(v4 + 8);
  }
  _Block_object_dispose(&v12, 8);
  if (v17) {
    WTF::RefCounted<TI::Favonius::Key>::deref(v17);
  }
  return v5;
}

uint64_t __Block_byref_object_copy__21431(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__21432(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return WTF::RefCounted<TI::Favonius::Key>::deref(result);
  }
  return result;
}

uint64_t ___ZNK2KB22ContinuousPathDetector13AnnotatedPath10key_stringEv_block_invoke(uint64_t result, atomic_uint **a2)
{
  uint64_t v2 = *a2;
  if (*(_DWORD *)(*(void *)(result + 40) + 76) == *((__int16 *)*a2 + 31))
  {
    uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
    atomic_fetch_add(v2, 1u);
    uint64_t result = *(void *)(v3 + 40);
    *(void *)(v3 + 40) = v2;
    if (result) {
      return WTF::RefCounted<TI::Favonius::Key>::deref(result);
    }
  }
  return result;
}

uint64_t KB::ContinuousPathDetector::ContinuousPathDetector(uint64_t this, const KB::ContinuousPathDetector::Parameters *a2, double a3)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  *(void *)this = this + 8;
  long long v3 = *(_OWORD *)a2;
  *(void *)(this + 40) = *((void *)a2 + 2);
  *(_OWORD *)(this + 24) = v3;
  *(double *)(this + 48) = a3;
  *(void *)(this + 56) = 0;
  return this;
}

{
  long long v3;

  *(void *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  *(void *)this = this + 8;
  long long v3 = *(_OWORD *)a2;
  *(void *)(this + 40) = *((void *)a2 + 2);
  *(_OWORD *)(this + 24) = v3;
  *(double *)(this + 48) = a3;
  *(void *)(this + 56) = 0;
  return this;
}

BOOL KB::ContinuousPathDetector::looks_like_continuous_path(KB::ContinuousPathDetector *this, int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = (_DWORD *)((char *)this + 8);
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      float v7 = (uint64_t *)v2;
    }
    else {
      float v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = (_DWORD *)v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == (_DWORD *)((char *)this + 8) || v4[8] > a2) {
    return 0;
  }
  if (v4[29] == -2) {
    return 1;
  }
  float v9 = KB::ContinuousPathDetector::AnnotatedPath::normalized_length((KB::ContinuousPathDetector::AnnotatedPath *)(v4 + 10));
  float v10 = *((float *)this + 11);
  float v11 = *((float *)this + 9);
  float v12 = (float)(*((float *)this + 14)
              + (float)(*((float *)this + 8)
                      * (float)(1.0 - (float)((float)(v10 - *((float *)this + 10)) / (float)(v10 - v11)))))
      / (float)((float)(*((float *)this + 14) + *((float *)this + 8))
              + (float)(*((float *)this + 7) * *((float *)this + 15)));
  return v9 > (float)((float)(v10 * v12) + (float)((float)(1.0 - v12) * v11)) && v4[28] == 3;
}

float KB::ContinuousPathDetector::detection_threshold(KB::ContinuousPathDetector *this)
{
  float v1 = *((float *)this + 11);
  float v2 = *((float *)this + 9);
  float v3 = (float)(*((float *)this + 14)
             + (float)(*((float *)this + 8)
                     * (float)(1.0 - (float)((float)(v1 - *((float *)this + 10)) / (float)(v1 - v2)))))
     / (float)((float)(*((float *)this + 8) + *((float *)this + 14))
             + (float)(*((float *)this + 7) * *((float *)this + 15)));
  return (float)(v1 * v3) + (float)((float)(1.0 - v3) * v2);
}

void KB::ContinuousPathDetector::observe_touch_event(void **a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v4 = *a2;
  if (!*a2) {
    return;
  }
  double v8 = *(double *)(v4 + 32);
  double v9 = v8 - *((double *)a1 + 6);
  if (v9 < 0.0) {
    double v9 = 0.0;
  }
  float v10 = v9 * *((float *)a1 + 6);
  float32x2_t v11 = vmul_n_f32((float32x2_t)a1[7], expf(v10));
  *((double *)a1 + 6) = v8;
  a1[7] = (void *)v11;
  int v12 = *(_DWORD *)(v4 + 48);
  int v30 = v12;
  if (!*(_DWORD *)(v4 + 40))
  {
    uint8x8_t v23 = a1[1];
    if (v23)
    {
      uint64_t v24 = (uint64_t *)(a1 + 1);
      do
      {
        int v25 = *((_DWORD *)v23 + 8);
        BOOL v26 = v25 < v12;
        if (v25 >= v12) {
          unsigned int v27 = v23;
        }
        else {
          unsigned int v27 = v23 + 1;
        }
        if (!v26) {
          uint64_t v24 = v23;
        }
        uint8x8_t v23 = (void *)*v27;
      }
      while (*v27);
      if (v24 != (uint64_t *)(a1 + 1) && v12 >= *((_DWORD *)v24 + 8))
      {
        std::__tree<std::__value_type<int,KB::ContinuousPathDetector::AnnotatedPath>,std::__map_value_compare<int,std::__value_type<int,KB::ContinuousPathDetector::AnnotatedPath>,std::less<int>,true>,std::allocator<std::__value_type<int,KB::ContinuousPathDetector::AnnotatedPath>>>::__remove_node_pointer(a1, v24);
        std::__destroy_at[abi:nn180100]<std::pair<int const,KB::ContinuousPathDetector::AnnotatedPath>,0>(v24 + 4);
        operator delete(v24);
      }
    }
  }
  long long v13 = a1 + 1;
  uint64_t v14 = operator new(0x78uLL);
  *((_DWORD *)v14 + 8) = v12;
  uint64_t v15 = v14 + 4;
  *(_OWORD *)(v14 + 5) = 0u;
  *(_OWORD *)(v14 + 7) = 0u;
  *(_OWORD *)(v14 + 9) = 0u;
  uint64_t v16 = *(atomic_uint **)(v4 + 56);
  v14[11] = v16;
  if (v16) {
    atomic_fetch_add(v16, 1u);
  }
  *((_DWORD *)v14 + 25) = 0;
  *((_DWORD *)v14 + 26) = 0;
  *((_DWORD *)v14 + 24) = v12;
  *(void *)((char *)v14 + 108) = 7;
  *((_DWORD *)v14 + 29) = -1;
  uint64_t v17 = *v13;
  uint64_t v18 = a1 + 1;
  if (*v13)
  {
    int v19 = *(_DWORD *)v15;
    while (1)
    {
      while (1)
      {
        uint64_t v18 = (uint64_t **)v17;
        int v20 = *((_DWORD *)v17 + 8);
        if (v19 >= v20) {
          break;
        }
        uint64_t v17 = *v18;
        long long v13 = v18;
        if (!*v18) {
          goto LABEL_15;
        }
      }
      if (v20 >= v19) {
        break;
      }
      uint64_t v17 = v18[1];
      if (!v17)
      {
        long long v13 = v18 + 1;
        goto LABEL_15;
      }
    }
    std::__destroy_at[abi:nn180100]<std::pair<int const,KB::ContinuousPathDetector::AnnotatedPath>,0>(v15);
    operator delete(v14);
    uint64_t v14 = v18;
  }
  else
  {
LABEL_15:
    *uint64_t v14 = 0;
    v14[1] = 0;
    v14[2] = v18;
    uint64_t *v13 = v14;
    int8x8_t v21 = (void *)**a1;
    uint64_t v22 = v14;
    if (v21)
    {
      *a1 = v21;
      uint64_t v22 = *v13;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v22);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  KB::ContinuousPathDetector::AnnotatedPath::add_touch_event((TI::CP::Path *)(v14 + 5), v4);
  if (a4 != -1) {
    goto LABEL_33;
  }
  if (KB::ContinuousPathDetector::looks_like_continuous_path((KB::ContinuousPathDetector *)a1, v30))
  {
    a4 = -2;
LABEL_33:
    *((_DWORD *)v14 + 29) = a4;
  }
  if (*((_DWORD *)v14 + 27) != 2) {
    return;
  }
  int v29 = *((_DWORD *)v14 + 29);
  if ((a3 & 0x80000000) == 0 && v29 == -1)
  {
    *((_DWORD *)v14 + 29) = a3;
LABEL_41:
    if (KB::ContinuousPathDetector::should_count_tap((KB::ContinuousPathDetector *)(v14 + 5), v28)) {
      *((float *)a1 + 14) = *((float *)a1 + 14) + 1.0;
    }
    return;
  }
  if (v29 == -2)
  {
    *((float *)a1 + 15) = *((float *)a1 + 15) + 1.0;
    return;
  }
  if ((v29 & 0x80000000) == 0) {
    goto LABEL_41;
  }
}

BOOL KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector *this, const KB::ContinuousPathDetector::AnnotatedPath *a2)
{
  {
    word_1EBFF07AC = 0;
    byte_1EBFF07AE = 0;
    qword_1EBFF07B0 = (uint64_t)" ";
    KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::space_keCGFloat y = 1048577;
    byte_1EBFF07B9 = 0;
    __cxa_atexit((void (*)(void *))KB::String::~String, &KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::space_key, &dword_1E3F0E000);
  }
  {
    word_1EBFF076C = 0;
    byte_1EBFF076E = 0;
    qword_1EBFF0770 = (uint64_t)"\b";
    KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::backspace_keCGFloat y = 1048577;
    byte_1EBFF0779 = 0;
    __cxa_atexit((void (*)(void *))KB::String::~String, &KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::backspace_key, &dword_1E3F0E000);
  }
  {
    word_1EBFF074C = 0;
    byte_1EBFF074E = 0;
    qword_1EBFF0750 = (uint64_t)"\n";
    KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::return_keCGFloat y = 1048577;
    byte_1EBFF0759 = 0;
    __cxa_atexit((void (*)(void *))KB::String::~String, &KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::return_key, &dword_1E3F0E000);
  }
  {
    word_1EBFF078C = 0;
    byte_1EBFF078E = 0;
    qword_1EBFF0790 = (uint64_t)"\x0E";
    KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::shift_keCGFloat y = 1048577;
    byte_1EBFF0799 = 0;
    __cxa_atexit((void (*)(void *))KB::String::~String, &KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::shift_key, &dword_1E3F0E000);
  }
  float v3 = KB::ContinuousPathDetector::AnnotatedPath::key_string(this);
  uint64_t v4 = *((void *)this + 6);
  unint64_t v5 = *(unsigned int *)(v4 + 200);
  unint64_t v6 = (unint64_t)((uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3) >> 1;
  if (v5 <= 0xB && v6 >= v5) {
    return 0;
  }
  double v8 = (KB::String *)v3;
  return !KB::String::equal((KB::String *)v3, (const KB::String *)&KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::space_key, 1)&& !KB::String::equal(v8, (const KB::String *)&KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::return_key, 1)&& !KB::String::equal(v8, (const KB::String *)&KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::backspace_key, 1)&& !KB::String::equal(v8, (const KB::String *)&KB::ContinuousPathDetector::should_count_tap(KB::ContinuousPathDetector::AnnotatedPath const&)::shift_key, 1);
}

uint64_t *std::__tree<std::__value_type<int,KB::ContinuousPathDetector::AnnotatedPath>,std::__map_value_compare<int,std::__value_type<int,KB::ContinuousPathDetector::AnnotatedPath>,std::less<int>,true>,std::allocator<std::__value_type<int,KB::ContinuousPathDetector::AnnotatedPath>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  float v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      float v3 = v2;
      float v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      float v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

float32x2_t KB::ContinuousPathDetector::update_clock_and_decay_counts(KB::ContinuousPathDetector *this, double a2)
{
  double v4 = a2 - *((double *)this + 6);
  if (v4 < 0.0) {
    double v4 = 0.0;
  }
  float v5 = v4 * *((float *)this + 6);
  float32x2_t result = vmul_n_f32(*(float32x2_t *)((char *)this + 56), expf(v5));
  *((double *)this + 6) = a2;
  *((float32x2_t *)this + 7) = result;
  return result;
}

uint64_t KB::ContinuousPathDetector::num_touch_paths(KB::ContinuousPathDetector *this)
{
  return *((void *)this + 2);
}

void KB::ContinuousPathDetector::clear_completed_paths(uint64_t **this)
{
  float v2 = (uint64_t *)(this + 1);
  float v1 = *this;
  if (*this != (uint64_t *)(this + 1))
  {
    do
    {
      if ((*((_DWORD *)v1 + 27) - 2) > 3)
      {
        float v5 = (uint64_t *)v1[1];
        if (v5)
        {
          do
          {
            double v4 = v5;
            float v5 = (uint64_t *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            double v4 = (uint64_t *)v1[2];
            BOOL v6 = *v4 == (void)v1;
            float v1 = v4;
          }
          while (!v6);
        }
      }
      else
      {
        double v4 = std::__tree<std::__value_type<int,KB::ContinuousPathDetector::AnnotatedPath>,std::__map_value_compare<int,std::__value_type<int,KB::ContinuousPathDetector::AnnotatedPath>,std::less<int>,true>,std::allocator<std::__value_type<int,KB::ContinuousPathDetector::AnnotatedPath>>>::__remove_node_pointer(this, v1);
        std::__destroy_at[abi:nn180100]<std::pair<int const,KB::ContinuousPathDetector::AnnotatedPath>,0>(v1 + 4);
        operator delete(v1);
      }
      float v1 = v4;
    }
    while (v4 != v2);
  }
}

BOOL KB::ContinuousPathDetector::touch_stage_finishes_path(int a1)
{
  return (a1 - 2) < 4;
}

float KB::ContinuousPathDetector::prior_probability_of_tap(KB::ContinuousPathDetector *this)
{
  return (float)(*((float *)this + 14)
               + (float)(*((float *)this + 8)
                       * (float)(1.0
                               - (float)((float)(*((float *)this + 11) - *((float *)this + 10))
                                       / (float)(*((float *)this + 11) - *((float *)this + 9))))))
       / (float)((float)(*((float *)this + 8) + *((float *)this + 14))
               + (float)(*((float *)this + 7) * *((float *)this + 15)));
}

float KB::ContinuousPathDetector::prior_probability_of_path(KB::ContinuousPathDetector *this)
{
  return 1.0
       - (float)((float)(*((float *)this + 14)
                       + (float)(*((float *)this + 8)
                               * (float)(1.0
                                       - (float)((float)(*((float *)this + 11) - *((float *)this + 10))
                                               / (float)(*((float *)this + 11) - *((float *)this + 9))))))
               / (float)((float)(*((float *)this + 8) + *((float *)this + 14))
                       + (float)(*((float *)this + 7) * *((float *)this + 15))));
}

void KB::ContinuousPathDetector::description(KB::ContinuousPathDetector *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  float v4 = *((float *)this + 11);
  float v5 = *((float *)this + 9);
  float v6 = (float)(*((float *)this + 14)
             + (float)(*((float *)this + 8)
                     * (float)(1.0 - (float)((float)(v4 - *((float *)this + 10)) / (float)(v4 - v5)))))
     / (float)((float)(*((float *)this + 8) + *((float *)this + 14))
             + (float)(*((float *)this + 7) * *((float *)this + 15)));
  KB::String::append_format((KB::String *)a2, "<ContinuousPathDetector: clock=%.2f Pr(Tap)=%.3g Pr(Path)=%.3g threshold=%.3g", *((double *)this + 6), v6, (float)(1.0 - v6), (float)((float)(v4 * v6) + (float)((float)(1.0 - v6) * v5)));
  int64x2_t v31 = 0uLL;
  unint64_t v32 = 0;
  float v7 = *(KB::ContinuousPathDetector **)this;
  if (*(KB::ContinuousPathDetector **)this == (KB::ContinuousPathDetector *)((char *)this + 8))
  {
    int v29 = 0;
    unsigned int v28 = 0;
  }
  else
  {
    do
    {
      uint64_t v8 = *((unsigned int *)v7 + 27);
      double v9 = "?";
      if (v8 <= 3) {
        double v9 = off_1E6E2DD48[v8];
      }
      if (*((_DWORD *)v7 + 29) == -2) {
        float v10 = "yes";
      }
      else {
        float v10 = "no";
      }
      uint64_t v11 = *((unsigned int *)v7 + 24);
      float v12 = KB::ContinuousPathDetector::AnnotatedPath::normalized_length((KB::ContinuousPathDetector *)((char *)v7 + 40));
      KB::String::format((KB::String *)"%d{len=%.3g,stg=%s,cp=%s}", (uint64_t)v33, v11, v12, v9, v10);
      if (v31.i64[1] >= v32)
      {
        uint64_t v14 = (v31.i64[1] - v31.i64[0]) >> 5;
        if ((unint64_t)(v14 + 1) >> 59) {
          abort();
        }
        unint64_t v15 = (uint64_t)(v32 - v31.i64[0]) >> 4;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if (v32 - v31.i64[0] >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        char v38 = &v32;
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = (char *)(v16 + 32 * v14);
        uint64_t v35 = (int64x2_t *)v16;
        v36[0] = v18;
        unint64_t v37 = v16 + 32 * v17;
        KB::String::String((KB::String *)v18, (const KB::String *)v33);
        long long v13 = v18 + 32;
        v36[1] = v18 + 32;
        int v19 = (KB::String *)v31.i64[1];
        int v20 = (KB::String *)v31.i64[0];
        int8x8_t v21 = (char *)v36[0];
        if (v31.i64[1] == v31.i64[0])
        {
          int64x2_t v23 = vdupq_n_s64(v31.u64[1]);
        }
        else
        {
          uint64_t v22 = (char *)v36[0] - 32;
          do
          {
            *(_DWORD *)uint64_t v22 = 0x100000;
            int v19 = (KB::String *)((char *)v19 - 32);
            *((_WORD *)v22 + 2) = 0;
            v22[6] = 0;
            *((void *)v22 + 1) = 0;
            int8x8_t v21 = (char *)KB::String::operator=((uint64_t)v22, v19);
            uint64_t v22 = v21 - 32;
          }
          while (v19 != v20);
          int64x2_t v23 = v31;
          long long v13 = (char *)v36[1];
        }
        v31.i64[0] = (uint64_t)v21;
        v31.i64[1] = (uint64_t)v13;
        *(int64x2_t *)int v36 = v23;
        unint64_t v24 = v32;
        unint64_t v32 = v37;
        unint64_t v37 = v24;
        uint64_t v35 = (int64x2_t *)v23.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v35);
      }
      else
      {
        long long v13 = (char *)KB::String::String((KB::String *)v31.i64[1], (const KB::String *)v33) + 32;
      }
      v31.i64[1] = (uint64_t)v13;
      if (v34 && v33[6] == 1) {
        free(v34);
      }
      int v25 = (KB::ContinuousPathDetector *)*((void *)v7 + 1);
      if (v25)
      {
        do
        {
          BOOL v26 = v25;
          int v25 = *(KB::ContinuousPathDetector **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          BOOL v26 = (KB::ContinuousPathDetector *)*((void *)v7 + 2);
          BOOL v27 = *(void *)v26 == (void)v7;
          float v7 = v26;
        }
        while (!v27);
      }
      float v7 = v26;
    }
    while (v26 != (KB::ContinuousPathDetector *)((char *)this + 8));
    int v29 = (const KB::String *)v31.i64[1];
    unsigned int v28 = (const KB::String *)v31.i64[0];
  }
  LODWORD(v35) = 0x100000;
  WORD2(v35) = 0;
  BYTE6(v35) = 0;
  v36[0] = 0;
  LOBYTE(v36[1]) = 0;
  if (v28 == v29) {
    goto LABEL_42;
  }
  do
  {
    if ((_WORD)v35) {
      KB::String::append((unsigned __int16 *)&v35, ", ", 0xFFFFuLL);
    }
    KB::String::append((unsigned __int16 *)&v35, v28);
    unsigned int v28 = (const KB::String *)((char *)v28 + 32);
  }
  while (v28 != v29);
  int v30 = (const char *)v36[0];
  if (!v36[0]) {
    int v30 = (const char *)&v36[1];
  }
  if (!(_WORD)v35) {
LABEL_42:
  }
    int v30 = "";
  KB::String::append_format((KB::String *)a2, "; path=[%s]", v30);
  KB::String::append((unsigned __int16 *)a2, ">", 0xFFFFuLL);
  if (v36[0] && BYTE6(v35) == 1) {
    free(v36[0]);
  }
  uint64_t v35 = &v31;
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v35);
}

id mecabraCreationQueue()
{
  if (mecabraCreationQueue_onceToken != -1) {
    dispatch_once(&mecabraCreationQueue_onceToken, &__block_literal_global_21904);
  }
  uint64_t v0 = (void *)mecabraCreationQueue___queue;

  return v0;
}

void __mecabraCreationQueue_block_invoke()
{
  float v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.TextInput.mecabra.creation", v2);
  float v1 = (void *)mecabraCreationQueue___queue;
  mecabraCreationQueue___queue = (uint64_t)v0;
}

uint64_t _wordEntryInputStringContainsOnlyWordSeparatorFromSession(void *a1, void *a2)
{
  id v3 = a1;
  float v4 = [a2 sessionParams];
  float v5 = [v4 wordSeparator];

  float v6 = [v3 acceptedCandidate];

  float v7 = [v6 input];

  uint64_t v8 = [v5 isEqualToString:v7];
  return v8;
}

BOOL _wordEntryAcceptedStringWasEmpty(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  float v2 = [v1 acceptedString];
  uint64_t v3 = [v2 length];

  if (v3)
  {
    BOOL v4 = 0;
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    float v5 = objc_msgSend(v1, "allKeyboardInputs", 0);
    uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      int v8 = 0;
      uint64_t v9 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v5);
          }
          if ([*(id *)(*((void *)&v12 + 1) + 8 * i) isBackspace]) {
            --v8;
          }
          else {
            ++v8;
          }
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v7);
      BOOL v4 = v8 < 1;
    }
    else
    {
      BOOL v4 = 1;
    }
  }
  return v4;
}

uint64_t _doesWordEntryContainDiacritics(void *a1, char a2)
{
  id v3 = a1;
  BOOL v4 = [v3 keyboardState];
  float v5 = [v4 inputMode];
  uint64_t v6 = TIInputModeGetLanguageWithRegion();

  if ([&unk_1F3FA7958 containsObject:v6])
  {
    uint64_t doesStringContainDiacritics = 0;
  }
  else
  {
    if (a2)
    {
      int v8 = [v3 acceptedCandidate];
      uint64_t v9 = [v8 input];
    }
    else
    {
      uint64_t v9 = [v3 acceptedString];
    }
    uint64_t doesStringContainDiacritics = _doesStringContainDiacritics(v9);
  }
  return doesStringContainDiacritics;
}

uint64_t _doesStringContainDiacritics(void *a1)
{
  id v1 = [a1 decomposedStringWithCanonicalMapping];
  float v2 = [v1 stringByApplyingTransform:*MEMORY[0x1E4F1C4D8] reverse:0];
  uint64_t v3 = [v1 isEqualToString:v2] ^ 1;

  return v3;
}

BOOL _doesWordEntryContainApostrophe(void *a1, char a2)
{
  if (a2)
  {
    float v2 = [a1 acceptedCandidate];
    uint64_t v3 = [v2 input];
  }
  else
  {
    uint64_t v3 = [a1 acceptedString];
  }
  BOOL doesStringContainApostrophe = _doesStringContainApostrophe(v3);

  return doesStringContainApostrophe;
}

BOOL _doesStringContainApostrophe(void *a1)
{
  id v1 = a1;
  float v2 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@"'’"];
  if (v2) {
    BOOL v3 = [v1 rangeOfCharacterFromSet:v2] != 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

uint64_t _doesWordEntryHaveLeftHandContext(void *a1)
{
  id v1 = a1;
  float v2 = [v1 documentState];
  BOOL v3 = [v2 contextBeforeInput];

  if (v3)
  {
    BOOL v4 = [v1 documentState];
    float v5 = [v4 contextBeforeInput];
    if (v5)
    {
      uint64_t v6 = [v1 documentState];
      uint64_t v7 = [v6 contextBeforeInput];
      uint64_t v8 = [v7 isEqualToString:&stru_1F3F7A998] ^ 1;
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

__CFString *_capitalizationForStringUsingLocale(void *a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = [a1 decomposedStringWithCanonicalMapping];
  float v5 = [v4 lowercaseStringWithLocale:v3];
  if ([v4 isEqualToString:v5])
  {
    uint64_t v6 = kTIACRACapitalizationLower;
  }
  else
  {
    uint64_t v7 = [v4 capitalizedStringWithLocale:v3];

    if ([v4 isEqualToString:v7])
    {
      uint64_t v6 = kTIACRACapitalizationTitle;
      float v5 = v7;
    }
    else
    {
      float v5 = [v4 uppercaseStringWithLocale:v3];

      int v8 = [v4 isEqualToString:v5];
      uint64_t v6 = kTIACRACapitalizationMixed;
      if (v8) {
        uint64_t v6 = kTIACRACapitalizationUpper;
      }
    }
  }
  uint64_t v9 = *v6;

  return v9;
}

uint64_t _editDistanceForOriginalAndRevisedStrings(uint64_t a1, void *a2)
{
  return [a2 _editDistanceFrom:a1];
}

unint64_t _wordLengthBucketForString(void *a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = [a1 length];
  if (!v3
    || ([v3 languageCode],
        float v5 = objc_claimAutoreleasedReturnValue(),
        int v6 = [v5 hasPrefix:@"zh"],
        v5,
        !v6))
  {
    if (v4 < 2)
    {
      unint64_t v4 = 0;
      goto LABEL_16;
    }
    if (v4 == 2)
    {
      unint64_t v4 = 1;
      goto LABEL_16;
    }
    if (v4 != 3) {
      goto LABEL_5;
    }
LABEL_11:
    unint64_t v4 = 2;
    goto LABEL_16;
  }
  if (v4 < 2) {
    goto LABEL_16;
  }
  if (v4 < 4) {
    goto LABEL_11;
  }
LABEL_5:
  if (v4 >= 6)
  {
    if (v4 >= 8) {
      unint64_t v4 = 5;
    }
    else {
      unint64_t v4 = 4;
    }
  }
  else
  {
    unint64_t v4 = 3;
  }
LABEL_16:

  return v4;
}

uint64_t _revisionCountBucketForWordEntry(void *a1)
{
  id v1 = a1;
  float v2 = [v1 allEdits];
  uint64_t v3 = [v2 count];

  unsigned int v4 = [v1 deleted];
  if (v3 + (unint64_t)v4 >= 5) {
    return 5;
  }
  else {
    return v3 + v4;
  }
}

id _primaryInputModeForTypingSession(void *a1)
{
  id v1 = [a1 sessionParams];
  float v2 = [v1 activeInputModes];
  uint64_t v3 = [v2 objectAtIndexedSubscript:0];
  unsigned int v4 = [v3 normalizedIdentifier];

  return v4;
}

id _secondaryInputModeForTypingSession(void *a1)
{
  id v1 = [a1 sessionParams];
  float v2 = [v1 activeInputModes];

  if ([v2 count] == 1)
  {
    uint64_t v3 = 0;
  }
  else
  {
    unsigned int v4 = [v2 objectAtIndexedSubscript:1];
    uint64_t v3 = [v4 normalizedIdentifier];
  }

  return v3;
}

id _capitalizationForWordEntry(void *a1, char a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  unsigned int v4 = [v3 keyboardState];
  float v5 = [v4 inputMode];
  int v6 = TIInputModeGetLanguageWithRegion();

  uint64_t v7 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:v6];
  if (!v7)
  {
    int v8 = IXADefaultLogFacility();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v13 = objc_msgSend(NSString, "stringWithFormat:", @"%s A valid locale could not be determined from the keyboard state in context for the supplied word entry.", "_capitalizationForWordEntry");
      *(_DWORD *)int buf = 138412290;
      long long v15 = v13;
      _os_log_error_impl(&dword_1E3F0E000, v8, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
  }
  if (a2)
  {
    uint64_t v9 = [v3 acceptedCandidate];
    float v10 = [v9 input];
  }
  else
  {
    float v10 = [v3 acceptedString];
  }
  uint64_t v11 = _capitalizationForStringUsingLocale(v10, v7);

  return v11;
}

id _editDistanceBucketForOriginalAndRevisedWordEntries(void *a1, void *a2, char a3)
{
  id v5 = a1;
  id v6 = a2;
  if (a3)
  {
    uint64_t v7 = [v5 acceptedCandidate];
    int v8 = [v7 input];
  }
  else
  {
    int v8 = [v5 acceptedString];
  }
  if ([v6 deleted])
  {
    uint64_t v9 = &stru_1F3F7A998;
  }
  else
  {
    uint64_t v9 = [v6 acceptedString];
  }
  unint64_t v10 = [(__CFString *)v9 _editDistanceFrom:v8];
  uint64_t v11 = (id *)kTIACRAEditDistanceBucketNone;
  long long v12 = kTIACRAEditDistanceBucketShort;
  long long v13 = kTIACRAEditDistanceBucketLong;
  if (v10 < 6) {
    long long v13 = kTIACRAEditDistanceBucketMedium;
  }
  if (v10 >= 3) {
    long long v12 = v13;
  }
  if (v10) {
    uint64_t v11 = (id *)v12;
  }
  id v14 = *v11;

  return v14;
}

id _payloadTextForWordEntry(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 acceptedString];
  id v3 = (void *)v2;
  if (v2) {
    unsigned int v4 = (__CFString *)v2;
  }
  else {
    unsigned int v4 = @"<NIL>";
  }
  id v5 = v4;

  id v6 = [v1 acceptedCandidate];

  uint64_t v7 = [v6 input];
  int v8 = (void *)v7;
  if (v7) {
    uint64_t v9 = (__CFString *)v7;
  }
  else {
    uint64_t v9 = @"<NIL>";
  }
  unint64_t v10 = v9;

  uint64_t v11 = [NSString stringWithFormat:@"|%@|%@|", v5, v10];

  return v11;
}

id _textForWordEntry(void *a1, char a2)
{
  id v3 = a1;
  if (([v3 wordEntryType] & 4) != 0
    || ([v3 wordEntryType] & 0xC0) != 0
    || ([v3 wordEntryType] & 0x100) != 0
    || (a2 & 1) == 0)
  {
    unsigned int v4 = [v3 acceptedString];
  }
  else
  {
    id v6 = [v3 acceptedCandidate];
    unsigned int v4 = [v6 input];
  }

  return v4;
}

unint64_t _wordLengthBucketForWordEntry(void *a1, char a2)
{
  id v3 = a1;
  unsigned int v4 = [v3 keyboardState];
  id v5 = [v4 inputMode];

  id v6 = TIInputModeGetNormalizedIdentifier();
  uint64_t v7 = _textForWordEntry(v3, a2);

  int v8 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:v6];
  unint64_t v9 = _wordLengthBucketForString(v7, v8);

  return v9;
}

uint64_t _doesWordHaveBackspace(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = objc_msgSend(a1, "allKeyboardInputsM", 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v7;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v7 != v3) {
          objc_enumerationMutation(v1);
        }
        if ([*(id *)(*((void *)&v6 + 1) + 8 * i) isBackspace])
        {
          uint64_t v2 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v2;
}

__CFString *_inputModalityForWordEntry(void *a1, int a2)
{
  id v3 = a1;
  unsigned int v4 = [v3 acceptedCandidate];
  char v5 = [v4 isContinuousPathConversion];

  if (v5)
  {
    long long v6 = kTIACRAModalityPathed;
  }
  else if (([v3 wordEntryType] & 4) != 0)
  {
    long long v6 = kTIACRAModalityCandidateBar;
  }
  else if (([v3 wordEntryType] & 0xC0) != 0)
  {
    long long v6 = kTIACRAModalityRevisionBubble;
  }
  else if (([v3 wordEntryType] & 0x100) != 0)
  {
    long long v6 = kTIACRAModalityInlineCompletion;
  }
  else if (a2 && _doesWordHaveBackspace(v3) && ![v3 cancelled])
  {
    long long v6 = kTIACRAModalityTappedWithBackspace;
  }
  else
  {
    long long v6 = kTIACRAModalityTapped;
  }
  long long v7 = *v6;

  return v7;
}

__CFString *_sourceForWordEntry(void *a1)
{
  id v1 = a1;
  if ([v1 cancelled])
  {
    uint64_t v2 = @"Uncommitted";
    id v3 = @"Uncommitted";
  }
  else
  {
    unsigned int v4 = [v1 acceptedCandidate];
    if (v4)
    {
      char v5 = [v1 acceptedCandidate];
      [v5 sourceMask];
    }
    TIStatisticCandidateSourceAsString();
    uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

id _correctedOperationForWordEntry(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 acceptedCandidate];
  if (v2)
  {
    id v3 = [v1 acceptedCandidate];
    int v4 = [v3 usageTrackingMask];
  }
  else
  {
    int v4 = 1;
  }

  char v5 = [MEMORY[0x1E4F1CA48] array];
  long long v6 = v5;
  if ((v4 & 0x400) != 0)
  {
    [v5 addObject:@"KeyTransposition"];
    if ((v4 & 0x800) == 0)
    {
LABEL_6:
      if ((v4 & 0x1000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
  }
  else if ((v4 & 0x800) == 0)
  {
    goto LABEL_6;
  }
  [v6 addObject:@"KeyInsertion"];
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  [v6 addObject:@"KeyDeletion"];
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  [v6 addObject:@"AdjacentKeySubstitution"];
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  [v6 addObject:@"FarKeySubstitution"];
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_22:
  [v6 addObject:@"WordSplit"];
  if ((v4 & 0x200000) != 0) {
LABEL_11:
  }
    [v6 addObject:@"WordJoin"];
LABEL_12:
  if (![v6 count]) {
    [v6 addObject:@"Unknown"];
  }
  long long v7 = [v6 componentsJoinedByString:@","];

  return v7;
}

id _addGenericMetadataToPayloadFromKeyboardSession(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  char v5 = [v4 userActionHistory];
  long long v6 = [v5 lastObject];
  long long v7 = [v6 keyboardState];

  long long v8 = [TIKBAnalyticsMetricsContext alloc];
  long long v9 = [v4 sessionParams];
  unint64_t v10 = [v9 activeInputModes];
  uint64_t v11 = [v4 sessionParams];
  long long v12 = [v11 testingParameters];
  long long v13 = [(TIKBAnalyticsMetricsContext *)v8 initWithKeyboardState:v7 activeInputModes:v10 testingParameters:v12];

  id v14 = [(TIAnalyticsMetricsContext *)v13 inputLanguage];
  [v3 setObject:v14 forKeyedSubscript:kFeatureStringKeyboardLanguage];

  long long v15 = [(TIAnalyticsMetricsContext *)v13 inputRegion];
  [v3 setObject:v15 forKeyedSubscript:kFeatureStringKeyboardRegion];

  uint64_t v16 = [(TIKBAnalyticsMetricsContext *)v13 inputVariant];
  [v3 setObject:v16 forKeyedSubscript:kFeatureStringKeyboardVariant];

  uint64_t v17 = [(TIKBAnalyticsMetricsContext *)v13 secondaryLanguage];
  [v3 setObject:v17 forKeyedSubscript:kFeatureStringKeyboardSecondaryLanguage];

  uint64_t v18 = [(TIKBAnalyticsMetricsContext *)v13 secondaryRegion];
  [v3 setObject:v18 forKeyedSubscript:kFeatureStringKeyboardSecondaryRegion];

  int v19 = [(TIKBAnalyticsMetricsContext *)v13 layoutName];
  [v3 setObject:v19 forKeyedSubscript:kFeatureStringKeyboardLayout];

  int v20 = +[TIKBAnalyticsMetricsContext keyboardTypeEnumToString:[(TIKBAnalyticsMetricsContext *)v13 keyboardType]];
  [v3 setObject:v20 forKeyedSubscript:kFeatureStringKeyboardType];

  int8x8_t v21 = [v4 sessionParams];
  uint64_t v22 = [v21 assetAvailabilityStatus];
  int64x2_t v23 = @"Installed";
  if (!v22) {
    int64x2_t v23 = @"Unavailable";
  }
  unint64_t v24 = v23;
  [v3 setObject:v24 forKeyedSubscript:kFeatureStringAssetAvailabilityStatus];

  int v25 = [v4 featureUsageMetricsCache];

  BOOL v26 = [v25 featureUsageMetricFromName:kFeatureKeyboardUsage forContext:v13];
  [v3 setObject:v26 forKeyedSubscript:kFeatureKeyboardUsage];

  BOOL v27 = [v25 featureUsageMetricFromName:kFeatureContinuousPathUsage forContext:v13];
  [v3 setObject:v27 forKeyedSubscript:kFeatureContinuousPathUsage];

  unsigned int v28 = [v25 featureUsageMetricFromName:kFeatureCandidateBarUsage forContext:v13];
  [v3 setObject:v28 forKeyedSubscript:kFeatureCandidateBarUsage];

  int v29 = [v25 featureUsageMetricFromName:kFeatureAutocorrectionUsage forContext:v13];
  [v3 setObject:v29 forKeyedSubscript:kFeatureAutocorrectionUsage];

  int v30 = [v25 featureUsageMetricFromName:kFeatureMultilingualUsage forContext:v13];
  [v3 setObject:v30 forKeyedSubscript:kFeatureMultilingualUsage];

  int64x2_t v31 = [v25 featureUsageMetricFromName:kFeatureStringTypingSpeed forContext:v13];
  [v3 setObject:v31 forKeyedSubscript:kFeatureStringTypingSpeed];

  return v3;
}

id _revisionMetricPayloadFromOriginalAndRevisedWordEntries(void *a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if ([v3 origin] == 1)
  {
    BOOL v6 = 1;
    if (v4) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v6 = [v3 origin] == 3;
    if (v4) {
      goto LABEL_7;
    }
  }
  if (v6) {
    id v4 = v3;
  }
LABEL_7:
  if (v6)
  {
    [v5 setObject:@"OriginalText" forKeyedSubscript:@"enteredModality"];
  }
  else
  {
    long long v7 = _inputModalityForWordEntry(v3, 1);
    [v5 setObject:v7 forKeyedSubscript:@"enteredModality"];

    long long v8 = _sourceForWordEntry(v3);
    [v5 setObject:v8 forKeyedSubscript:@"enteredSource"];

    long long v9 = _capitalizationForWordEntry(v3, 1);
    [v5 setObject:v9 forKeyedSubscript:@"enteredCapitalization"];

    unint64_t v10 = objc_msgSend(NSNumber, "numberWithBool:", _doesWordEntryContainDiacritics(v3, 1));
    [v5 setObject:v10 forKeyedSubscript:@"enteredDiacritics"];

    uint64_t v11 = objc_msgSend(NSNumber, "numberWithBool:", _doesWordEntryContainApostrophe(v3, 1));
    [v5 setObject:v11 forKeyedSubscript:@"enteredApostrophe"];

    long long v12 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", _wordLengthBucketForWordEntry(v3, 1));
    [v5 setObject:v12 forKeyedSubscript:@"enteredWordLength"];
  }
  uint64_t v13 = [v3 wordEntryType] & !v6;
  if (v13 == 1)
  {
    id v14 = _sourceForWordEntry(v3);
    [v5 setObject:v14 forKeyedSubscript:@"correctedSource"];

    long long v15 = _capitalizationForWordEntry(v3, 0);
    [v5 setObject:v15 forKeyedSubscript:@"correctedCapitalization"];

    uint64_t v16 = objc_msgSend(NSNumber, "numberWithBool:", _doesWordEntryContainDiacritics(v3, 0));
    [v5 setObject:v16 forKeyedSubscript:@"correctedDiacritics"];

    uint64_t v17 = objc_msgSend(NSNumber, "numberWithBool:", _doesWordEntryContainApostrophe(v3, 0));
    [v5 setObject:v17 forKeyedSubscript:@"correctedApostrophe"];

    uint64_t v18 = _editDistanceBucketForOriginalAndRevisedWordEntries(v3, v3, 1);
    [v5 setObject:v18 forKeyedSubscript:@"correctedEditDistance"];

    int v19 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", _wordLengthBucketForWordEntry(v3, 0));
    [v5 setObject:v19 forKeyedSubscript:@"correctedWordLength"];

    int v20 = [NSNumber numberWithBool:_doesWordEntryHaveLeftHandContext(v3)];
    [v5 setObject:v20 forKeyedSubscript:@"correctedHasLeftHandContext"];

    int8x8_t v21 = _correctedOperationForWordEntry(v3);
    [v5 setObject:v21 forKeyedSubscript:@"correctedOperationType"];

    uint64_t v22 = [v3 acceptedCandidate];
    [v22 typingEngine];
    int64x2_t v23 = TIKeyboardCandidateTypingEngineTypeToString();
    [v5 setObject:v23 forKeyedSubscript:kFeatureStringTypingEngine];

    if (IXACanLogMessageAtLevel())
    {
      unint64_t v24 = IXADefaultLogFacility();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        char v41 = NSString;
        int v42 = [v3 acceptedCandidate];
        uint64_t v43 = [v42 input];
        uint64_t v44 = [v41 stringWithFormat:@"%s Autocorrection of %@ -> %@", "_revisionMetricPayloadFromOriginalAndRevisedWordEntries", v3, v43];
        *(_DWORD *)int buf = 138412290;
        uint64_t v46 = v44;
        _os_log_debug_impl(&dword_1E3F0E000, v24, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
  int v25 = v3;
  if (v4)
  {
    if ([v3 isEqual:v4])
    {
      int v25 = v4;
      if (!v6) {
        goto LABEL_22;
      }
    }
    else
    {
      int v26 = [v3 wasRevised];
      int v25 = v4;
      if (((v6 | v26) & 1) == 0) {
        goto LABEL_22;
      }
    }
    char v27 = [v4 deleted];
    int v25 = v4;
    if ((v27 & 1) == 0)
    {
      unsigned int v28 = _inputModalityForWordEntry(v4, 0);
      [v5 setObject:v28 forKeyedSubscript:@"revisedModality"];

      int v29 = _sourceForWordEntry(v4);
      [v5 setObject:v29 forKeyedSubscript:@"revisedSource"];

      int v30 = _capitalizationForWordEntry(v4, 1);
      [v5 setObject:v30 forKeyedSubscript:@"revisedCapitalization"];

      int64x2_t v31 = objc_msgSend(NSNumber, "numberWithBool:", _doesWordEntryContainDiacritics(v4, 1));
      [v5 setObject:v31 forKeyedSubscript:@"revisedDiacritics"];

      unint64_t v32 = objc_msgSend(NSNumber, "numberWithBool:", _doesWordEntryContainApostrophe(v4, 1));
      [v5 setObject:v32 forKeyedSubscript:@"revisedApostrophe"];

      uint64_t v33 = _editDistanceBucketForOriginalAndRevisedWordEntries(v3, v4, 1);
      [v5 setObject:v33 forKeyedSubscript:@"revisedEditDistance"];

      unsigned int v34 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", _wordLengthBucketForWordEntry(v4, 1));
      [v5 setObject:v34 forKeyedSubscript:@"revisedWordLength"];

      uint64_t v35 = [NSNumber numberWithUnsignedInteger:_revisionCountBucketForWordEntry(v3)];
      [v5 setObject:v35 forKeyedSubscript:@"revisedWordRevisionCount"];

      int v25 = v4;
    }
  }
LABEL_22:
  id v36 = v25;
  if ([v36 deleted])
  {
    [v5 setObject:@"Deleted" forKeyedSubscript:@"revisedModality"];
    unint64_t v37 = [NSNumber numberWithUnsignedInteger:_revisionCountBucketForWordEntry(v3)];
    [v5 setObject:v37 forKeyedSubscript:@"revisedWordRevisionCount"];
  }
  if (IXACanLogMessageAtLevel())
  {
    char v38 = IXADefaultLogFacility();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      char v40 = [NSString stringWithFormat:@"%s originalWordEntry: %@, revisedWordEntry:%@, isAutocorrected: %d, isDeleted: %d, payload: %@", "_revisionMetricPayloadFromOriginalAndRevisedWordEntries", v3, v4, v13, objc_msgSend(v36, "deleted"), v5];
      *(_DWORD *)int buf = 138412290;
      uint64_t v46 = v40;
      _os_log_debug_impl(&dword_1E3F0E000, v38, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
    }
  }

  return v5;
}

id _allUserEditEventIndexesForSession(void *a1)
{
  id v1 = [a1 userActionHistory];
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E60]);
  if ([v1 count])
  {
    unint64_t v3 = 0;
    do
    {
      id v4 = [v1 objectAtIndexedSubscript:v3];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v5 = [v4 editedEntry];

        if (v5) {
          [v2 addIndex:v3];
        }
      }

      ++v3;
    }
    while (v3 < [v1 count]);
  }
  BOOL v6 = (void *)[v2 copy];

  return v6;
}

id _allNonEditEventIndexesForSession(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  unint64_t v3 = [v1 userActionHistory];
  id v4 = objc_alloc_init(MEMORY[0x1E4F28E60]);
  if ([v3 count])
  {
    unint64_t v5 = 0;
    do
    {
      BOOL v6 = [v3 objectAtIndexedSubscript:v5];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v7 = v6;
        long long v8 = [v7 editedEntry];
        if (v8)
        {
          long long v9 = [v7 allEdits];
          [v2 addObjectsFromArray:v9];
        }
        else if (([v2 containsObject:v7] & 1) == 0)
        {
          char v10 = _wordEntryInputStringContainsOnlyWordSeparatorFromSession(v7, v1);
          BOOL v11 = _wordEntryAcceptedStringWasEmpty(v7);
          if ((v10 & 1) == 0
            && (!v11 || [v7 cancelled])
            && [v7 origin] != 2)
          {
            [v4 addIndex:v5];
          }
        }
      }
      ++v5;
    }
    while (v5 < [v3 count]);
  }
  long long v12 = (void *)[v4 copy];

  return v12;
}

id _allUserCursorMovementEditEventsAndAssociatedWordEntriesForSession(void *a1)
{
  id v21 = a1;
  id v1 = [v21 userActionHistory];
  id v22 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if ([v1 count])
  {
    unint64_t v2 = 0;
    uint64_t v3 = -1;
    do
    {
      id v4 = [v1 objectAtIndexedSubscript:v2];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v5 = v4;
        int v26 = [v5 inWord];
        if (v26)
        {
          id v23 = v5;
          unint64_t v24 = v4;
          id v25 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          BOOL v6 = 0;
          uint64_t v7 = v3;
          do
          {
            if (v7 < 0) {
              break;
            }
            long long v8 = [v1 objectAtIndexedSubscript:v7];
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v9 = v8;
              char v10 = [v9 acceptedString];
              int v11 = [v26 isEqualToString:v10];

              if (v11)
              {
                id v12 = v9;

                int v13 = 5;
                BOOL v6 = v12;
              }
              else
              {
                int v13 = 7;
              }
            }
            else
            {
              int v13 = 7;
            }

            --v7;
          }
          while (v13 == 7);
          unint64_t v14 = v2 + 1;
          if (v2 + 1 >= [v1 count])
          {
            long long v15 = 0;
          }
          else
          {
            long long v15 = 0;
            do
            {
              uint64_t v16 = [v1 objectAtIndexedSubscript:v14];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                id v17 = v16;

                long long v15 = v17;
              }

              ++v14;
            }
            while (v14 < [v1 count]);
            if (v6 && v15)
            {
              [v25 addObject:v6];
              [v25 addObject:v15];
              [v22 addObject:v25];

              id v18 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
              BOOL v6 = 0;
              long long v15 = 0;
              id v25 = v18;
            }
          }

          id v5 = v23;
          id v4 = v24;
        }
      }
      ++v2;
      ++v3;
    }
    while (v2 < [v1 count]);
  }
  int v19 = (void *)[v22 copy];

  return v19;
}

id _analyzeEditEvents(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v26[0] = 0;
  v26[1] = v26;
  void v26[2] = 0x3032000000;
  v26[3] = __Block_byref_object_copy__21966;
  v26[4] = __Block_byref_object_dispose__21967;
  id v27 = 0;
  v24[0] = 0;
  v24[1] = v24;
  _OWORD v24[2] = 0x3032000000;
  v24[3] = __Block_byref_object_copy__21966;
  v24[4] = __Block_byref_object_dispose__21967;
  id v25 = 0;
  id v5 = [v3 userActionHistory];
  BOOL v6 = _allUserEditEventIndexesForSession(v3);
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 3221225472;
  uint64_t v16 = ___analyzeEditEvents_block_invoke;
  id v17 = &unk_1E6E2DFA0;
  id v22 = v26;
  id v23 = v24;
  id v18 = v5;
  id v19 = v3;
  id v20 = v4;
  id v21 = v7;
  id v8 = v7;
  id v9 = v4;
  id v10 = v3;
  id v11 = v5;
  [v6 enumerateIndexesUsingBlock:&v14];
  id v12 = objc_msgSend(v8, "copy", v14, v15, v16, v17);

  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v26, 8);

  return v12;
}

uint64_t __Block_byref_object_copy__21966(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21967(uint64_t a1)
{
}

void ___analyzeEditEvents_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) editedEntry];
  uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  _revisionMetricPayloadFromOriginalAndRevisedWordEntries(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40));
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  _addGenericMetadataToPayloadFromKeyboardSession(v9, *(void **)(a1 + 40));
  objc_claimAutoreleasedReturnValue();

  [v9 addEntriesFromDictionary:*(void *)(a1 + 48)];
  [*(id *)(a1 + 56) addObject:v9];
}

id _analyzeNonEditEvents(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x3032000000;
  v20[3] = __Block_byref_object_copy__21966;
  v20[4] = __Block_byref_object_dispose__21967;
  id v21 = 0;
  id v5 = [v3 userActionHistory];
  uint64_t v6 = _allNonEditEventIndexesForSession(v3);
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = ___analyzeNonEditEvents_block_invoke;
  unsigned __int16 v14[3] = &unk_1E6E2DFC8;
  id v18 = v7;
  id v19 = v20;
  id v15 = v5;
  id v16 = v3;
  id v17 = v4;
  id v8 = v7;
  id v9 = v4;
  id v10 = v3;
  id v11 = v5;
  [v6 enumerateIndexesUsingBlock:v14];
  id v12 = (void *)[v8 copy];

  _Block_object_dispose(v20, 8);

  return v12;
}

void ___analyzeNonEditEvents_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  _revisionMetricPayloadFromOriginalAndRevisedWordEntries(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), 0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  _addGenericMetadataToPayloadFromKeyboardSession(v6, *(void **)(a1 + 40));
  objc_claimAutoreleasedReturnValue();

  [v6 addEntriesFromDictionary:*(void *)(a1 + 48)];
  [*(id *)(a1 + 56) addObject:v6];
}

id _analyzeDeletedOriginalWordEvents(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = objc_msgSend(v3, "originalWords", 0);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        if ([v11 deleted])
        {
          id v12 = [v11 allEdits];
          uint64_t v13 = [v12 count];

          if (!v13)
          {
            uint64_t v14 = _revisionMetricPayloadFromOriginalAndRevisedWordEntries(v11, 0);
            _addGenericMetadataToPayloadFromKeyboardSession(v14, v3);
            objc_claimAutoreleasedReturnValue();

            [v14 addEntriesFromDictionary:v4];
            [v5 addObject:v14];
          }
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v8);
  }

  id v15 = (void *)[v5 copy];

  return v15;
}

id _analyzeUserCursorMovementEditEvents(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = _allUserCursorMovementEditEventsAndAssociatedWordEntriesForSession(a1);
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if (objc_msgSend(v8, "count", (void)v14) == 2)
        {
          uint64_t v9 = [v8 objectAtIndexedSubscript:0];
          id v10 = [v8 objectAtIndexedSubscript:1];
          id v11 = _revisionMetricPayloadFromOriginalAndRevisedWordEntries(v9, v10);
          [v2 addObject:v11];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }

  id v12 = (void *)[v2 copy];

  return v12;
}

double CMacroTable::init(CMacroTable *this)
{
  *(void *)&double result = 0x2000000000000;
  *((void *)this + 17408) = 0x2000000000000;
  *((_DWORD *)this + 34818) = 0;
  return result;
}

char *CMacroTable::lookup(CMacroTable *this, unsigned int *__key)
{
  id v2 = (char *)this + 0x2000;
  MacCompareStartMeuint64_t m = (uint64_t)this + 0x2000;
  double result = (char *)bsearch(__key, this, *((int *)this + 34816), 8uLL, (int (__cdecl *)(const void *, const void *))macKeyCompare);
  if (result) {
    return &v2[*((int *)result + 1)];
  }
  return result;
}

uint64_t macKeyCompare(unsigned int *a1, int *a2)
{
  uint64_t v2 = MacCompareStartMem + *a2;
  unsigned int v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      unsigned int v5 = *(_DWORD *)(v2 + 4 * v4);
      if (v3 > v5) {
        return 1;
      }
      if (v3 < v5) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v6 = v4 + 1;
      unsigned int v3 = a1[++v4];
      if (!v3) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
LABEL_9:
    if (*(_DWORD *)(v2 + 4 * v6)) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
}

uint64_t CMacroTable::readHeader(CMacroTable *this, __sFILE *a2, int *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!fgets(__s, 1040, a2))
  {
    uint64_t result = feof(a2);
    if (!result) {
      return result;
    }
    goto LABEL_19;
  }
  size_t v5 = strlen(__s);
  BOOL v8 = __s[2] == 191 && __s[1] == 187 && __s[0] == 239 && v5 > 2;
  uint64_t v9 = 3;
  if (!v8) {
    uint64_t v9 = 0;
  }
  id v10 = strstr(&__s[v9], "***");
  if (!v10) {
    goto LABEL_19;
  }
  id v11 = v10 + 2;
  do
    int v12 = *(unsigned __int8 *)++v11;
  while (v12 == 32);
  uint64_t result = sscanf(v11, "version=%d", a3);
  if (result != 1)
  {
LABEL_19:
    fseek(a2, 0, 0);
    *a3 = 0;
    return 1;
  }
  return result;
}

uint64_t CMacroTable::writeHeader(CMacroTable *this, __sFILE *a2)
{
  return fprintf(a2, "DO NOT DELETE THIS LINE*** version=%d ***\n", 1);
}

FILE *CMacroTable::loadFromFile(CMacroTable *this, const char *__filename)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = fopen(__filename, "r");
  if (result)
  {
    size_t v5 = result;
    *((_DWORD *)this + 34818) = 0;
    *((_DWORD *)this + 34816) = 0;
    int v12 = 0;
    if ((CMacroTable::readHeader((CMacroTable *)result, result, &v12) & 1) == 0) {
      int v12 = 0;
    }
    while (fgets(__s, 1040, v5))
    {
      size_t v6 = strlen(__s);
      if (v6)
      {
        if (__s[v6 - 1] == 10) {
          __s[v6 - 1] = 0;
        }
        size_t v7 = v6 - 2;
        if (v6 >= 2 && __s[v7] == 13) {
          __s[v7] = 0;
        }
      }
      if (v12 == 1) {
        int v8 = 1;
      }
      else {
        int v8 = 10;
      }
      CMacroTable::addItem(this, __s, v8);
    }
    fclose(v5);
    MacCompareStartMeuint64_t m = (uint64_t)this + 0x2000;
    qsort(this, *((int *)this + 34816), 8uLL, (int (__cdecl *)(const void *, const void *))macCompare);
    if (v12 != 1) {
      CMacroTable::writeToFile(this, __filename, v9, v10, v11);
    }
    return (FILE *)1;
  }
  return result;
}

uint64_t CMacroTable::addItem(CMacroTable *this, char *__s, int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  size_t v6 = strchr(__s, 58);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  size_t v7 = v6;
  if ((int)v6 - (int)__s >= 15) {
    int v8 = 15;
  }
  else {
    int v8 = v6 - __s;
  }
  strncpy(__dst, __s, v8);
  __dst[v8] = 0;
  return CMacroTable::addItem(this, (unsigned __int8 *)__dst, (unsigned __int8 *)v7 + 1, a3);
}

uint64_t CMacroTable::writeToFile(CMacroTable *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x1F4188790](this, a2, a3, a4, a5);
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)fopen(v6, "w");
  if (result)
  {
    int v8 = (FILE *)result;
    fprintf((FILE *)result, "DO NOT DELETE THIS LINE*** version=%d ***\n", 1);
    uint64_t v9 = (int *)(v5 + 139264);
    if (*(int *)(v5 + 139264) >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = v5 + 0x2000;
      int v12 = (int *)(v5 + 4);
      do
      {
        uint64_t v13 = (unsigned __int8 *)(v11 + *(v12 - 1));
        int v15 = 48;
        int v16 = -1;
        if (!VnConvert(7, 1, v13, (uint64_t)v18, &v16, &v15))
        {
          uint64_t v14 = (unsigned __int8 *)(v11 + *v12);
          int v15 = 3072;
          int v16 = -1;
          if (!VnConvert(7, 1, v14, (uint64_t)v17, &v16, &v15))
          {
            if (v10 >= *v9 - 1) {
              snprintf(__str, 0xC31uLL, "%s:%s");
            }
            else {
              snprintf(__str, 0xC31uLL, "%s:%s\n");
            }
            fputs(__str, v8);
          }
        }
        ++v10;
        v12 += 2;
      }
      while (v10 < *v9);
    }
    fclose(v8);
    return 1;
  }
  return result;
}

uint64_t macCompare(int *a1, int *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = MacCompareStartMem + *a2;
  unsigned int v4 = *(_DWORD *)(MacCompareStartMem + v2);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v2 + MacCompareStartMem + 4;
    while (1)
    {
      unsigned int v7 = *(_DWORD *)(v3 + 4 * v5);
      if (v4 > v7) {
        return 1;
      }
      if (v4 < v7) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v8 = v5 + 1;
      unsigned int v4 = *(_DWORD *)(v6 + 4 * v5++);
      if (!v4) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
LABEL_9:
    if (*(_DWORD *)(v3 + 4 * v8)) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
}

uint64_t CMacroTable::addItem(CMacroTable *this, unsigned __int8 *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v5 = (unsigned int *)((char *)this + 139264);
  uint64_t v6 = *((int *)this + 34816);
  uint64_t result = 0xFFFFFFFFLL;
  if ((int)v6 <= 1023)
  {
    int v10 = v5[1];
    uint64_t v11 = (int)v5[2];
    *((_DWORD *)this + 2 * v6) = v11;
    int v12 = (char *)this + v11 + 0x2000;
    int v17 = 64;
    int v18 = -1;
    if ((int)v11 + 64 > v10) {
      int v17 = v10 - v11;
    }
    int v13 = VnConvert(a4, 7, a2, (uint64_t)this + v11 + 0x2000, &v18, &v17);
    uint64_t result = 0xFFFFFFFFLL;
    if (!v13)
    {
      int v14 = v17 + v11;
      uint64_t v15 = (uint64_t)&v12[v17];
      int v16 = v5[1];
      *((_DWORD *)this + 2 * (int)*v5 + 1) = v14;
      int v17 = 4096;
      int v18 = -1;
      if (v14 + 4096 > v16) {
        int v17 = v16 - v14;
      }
      if (VnConvert(a4, 7, a3, v15, &v18, &v17))
      {
        return 0xFFFFFFFFLL;
      }
      else
      {
        v5[2] = v17 + v14;
        uint64_t result = *v5;
        *uint64_t v5 = result + 1;
      }
    }
  }
  return result;
}

uint64_t CMacroTable::resetContent(uint64_t this)
{
  *(_DWORD *)(this + 139272) = 0;
  *(_DWORD *)(this + 139264) = 0;
  return this;
}

uint64_t CMacroTable::getKey(CMacroTable *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 34816) <= (signed int)a2) {
    return 0;
  }
  else {
    return (uint64_t)this + *((int *)this + 2 * a2) + 0x2000;
  }
}

uint64_t CMacroTable::getText(CMacroTable *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 34816) <= (signed int)a2) {
    return 0;
  }
  else {
    return (uint64_t)this + *((int *)this + 2 * a2 + 1) + 0x2000;
  }
}

uint64_t *_TISharedLexiconIDManager(void)
{
  {
    _TISharedLexiconIDManager(void)::lexicon_id_manager = 0;
    atomic_store(0, (unint64_t *)&_TISharedLexiconIDManager(void)::lexicon_id_manager);
    __cxa_atexit((void (*)(void *))KB::LexiconIDManager::~LexiconIDManager, &_TISharedLexiconIDManager(void)::lexicon_id_manager, &dword_1E3F0E000);
  }
  return &_TISharedLexiconIDManager(void)::lexicon_id_manager;
}

unint64_t TIIsLexiconIDEnglish(int a1)
{
  _TISharedLexiconIDManager();
  unint64_t result = atomic_load_explicit(&_TISharedLexiconIDManager(void)::lexicon_id_manager, memory_order_acquire);
  if (result)
  {
    while (*(_DWORD *)(result + 24) != a1)
    {
      unint64_t result = *(void *)(result + 32);
      if (!result) {
        return result;
      }
    }
    if ((*(char *)(result + 23) & 0x80000000) == 0) {
      return strncmp((const char *)result, "en", 2uLL) == 0;
    }
    unint64_t result = *(void *)result;
    if (result) {
      return strncmp((const char *)result, "en", 2uLL) == 0;
    }
  }
  return result;
}

unint64_t TILocaleIdentifierForLexiconID(int a1)
{
  _TISharedLexiconIDManager();
  unint64_t result = atomic_load_explicit(&_TISharedLexiconIDManager(void)::lexicon_id_manager, memory_order_acquire);
  if (result)
  {
    while (*(_DWORD *)(result + 24) != a1)
    {
      unint64_t result = *(void *)(result + 32);
      if (!result) {
        return result;
      }
    }
    if (*(char *)(result + 23) < 0) {
      return *(void *)result;
    }
  }
  return result;
}

const char *TIIsLocaleEnglish(const char *result)
{
  if (result) {
    return (const char *)(strncmp(result, "en", 2uLL) == 0);
  }
  return result;
}

uint64_t TILexiconIDForLocaleIdentifier(char *__s)
{
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  _TISharedLexiconIDManager();
  uint64_t v1 = KB::LexiconIDManager::id_for_locale(&_TISharedLexiconIDManager(void)::lexicon_id_manager, (unsigned __int8 **)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return v1;
}

_DWORD *TITokenIDsToWordIDs(_DWORD *result, uint64_t a2, int a3, unsigned int *a4, void *a5)
{
  *a5 = 0;
  if (a2 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &result[2 * a2];
    unsigned int v7 = a4;
    do
    {
      unsigned int v8 = result[1];
      if (*result == a3 || v8 <= 0x1F3)
      {
        *v7++ = v8;
        ++v5;
      }
      else
      {
        uint64_t v5 = 0;
        unsigned int v7 = a4;
      }
      *a5 = v5;
      result += 2;
    }
    while (result < v6);
  }
  return result;
}

BOOL KB::InputSegmentFilter::character_is_precomposed_diacritic_letter(KB::InputSegmentFilter *this, KB *a2)
{
  return KB::character_is_precomposed_diacritic_letter(a2);
}

BOOL KB::InputSegmentFilter::character_is_letter_modifier(KB::InputSegmentFilter *this, UChar32 c)
{
  BOOL result = 1;
  if (c <= 729)
  {
    if ((c - 168) <= 0xC && ((1 << (c + 88)) & 0x1081) != 0) {
      return result;
    }
    return u_charType(c) == 4;
  }
  if (c != 730 && c != 732 && c != 901) {
    return u_charType(c) == 4;
  }
  return result;
}

uint64_t KB::InputSegmentFilter::character_is_digraph(KB::InputSegmentFilter *this, KB *a2)
{
  return KB::character_is_digraph(a2);
}

BOOL KB::InputSegmentFilter::allows_composed_substitution(KB::InputSegmentFilter *this, KB *a2, unsigned int a3, int a4)
{
  return KB::character_has_diacritic(a2, a4);
}

BOOL KB::InputSegmentFilter::allows_substitution(KB::InputSegmentFilter *this, KB *a2, uint64_t a3, BOOL *a4)
{
  return KB::substitution_allowed(a2, a3, a4, a4);
}

uint64_t KB::InputSegmentFilter::letter_combines_with_selective_modifier(KB::InputSegmentFilter *this, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4163E28](a2, a3);
}

uint64_t KB::InputSegmentFilter::word_is_acceptable_for_input(KB::InputSegmentFilter *this, KB::Word *a2, const KB::String *a3)
{
  BOOL v5 = 0;
  LODWORD(result) = KB::InputSegmentFilter::string_preserves_surface_form_features(this, a2, a3, &v5, 0);
  if (*((float *)a2 + 12) > 0.0) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 0;
  }
  if (result == 1) {
    *((_DWORD *)a2 + 26) = *((_DWORD *)a2 + 26) & 0xFFDFFFFF | (v5 << 21);
  }
  return result;
}

uint64_t KB::InputSegmentFilter::string_preserves_surface_form_features(KB::InputSegmentFilter *this, const KB::String *a2, const KB::String *a3, BOOL *a4, std::vector<unsigned int> *a5)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  int v10 = (char *)*((void *)a2 + 1);
  v141 = (char *)a2 + 16;
  if (!v10) {
    int v10 = (char *)a2 + 16;
  }
  *(void *)&long long v146 = v10;
  int v11 = *(unsigned __int16 *)a2;
  DWORD2(v146) = 0;
  HIDWORD(v146) = v11;
  c[0] = 0;
  KB::String::iterator::initialize((uint64_t *)&v146);
  int v12 = (char *)*((void *)a3 + 1);
  if (!v12) {
    int v12 = (char *)a3 + 16;
  }
  *(void *)int buf = v12;
  int v13 = *(unsigned __int16 *)a3;
  *(_DWORD *)&buf[8] = 0;
  *(_DWORD *)&buf[12] = v13;
  *(_DWORD *)&buf[16] = 0;
  KB::String::iterator::initialize((uint64_t *)buf);
  v145[0] = *(_DWORD *)&buf[16];
  long long v144 = *(_OWORD *)buf;
  v145[1] = 0;
  if (a5)
  {
    unsigned int v14 = *((unsigned __int16 *)a3 + 2);
    if (!*((_WORD *)a3 + 2))
    {
      KB::String::compute_length((unsigned __int16 *)a3);
      unsigned int v14 = *((unsigned __int16 *)a3 + 2);
    }
    std::vector<unsigned int>::reserve(a5, v14);
  }
  UChar32 v15 = v145[0];
  if (v145[0])
  {
    UChar32 v16 = c[0];
    if (!c[0])
    {
      int v17 = 0;
      goto LABEL_197;
    }
    int v17 = 0;
    while (1)
    {
      if (v17 == 100)
      {
        int v17 = 101;
        goto LABEL_197;
      }
      if (KB::character_is_free_insertion(v16)
        && ((*(uint64_t (**)(KB::InputSegmentFilter *, void, void, void))(*(void *)this + 32))(this, c[0], v145[0], 0) & 1) == 0)
      {
        KB::String::iterator::operator++((uint64_t *)&v146);
        if (a5)
        {
          std::vector<unsigned int>::pointer end = a5->__end_;
          value = a5->__end_cap_.__value_;
          if (end >= value)
          {
            std::vector<unsigned int>::pointer begin = a5->__begin_;
            uint64_t v45 = end - a5->__begin_;
            unint64_t v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62) {
              goto LABEL_240;
            }
            uint64_t v47 = (char *)value - (char *)begin;
            if (v47 >> 1 > v46) {
              unint64_t v46 = v47 >> 1;
            }
            BOOL v35 = (unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v35) {
              unint64_t v48 = v46;
            }
            if (v48)
            {
              unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v48);
              std::vector<unsigned int>::pointer begin = a5->__begin_;
              std::vector<unsigned int>::pointer end = a5->__end_;
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v63 = (unsigned int *)(v48 + 4 * v45);
            *uint64_t v63 = -1;
            int v30 = v63 + 1;
            while (end != begin)
            {
              unsigned int v64 = *--end;
              *--uint64_t v63 = v64;
            }
            a5->__begin_ = v63;
            a5->__end_ = v30;
            a5->__end_cap_.__value_ = (unsigned int *)(v48 + 4 * v49);
            if (begin) {
              operator delete(begin);
            }
          }
          else
          {
            *std::vector<unsigned int>::pointer end = -1;
            int v30 = end + 1;
          }
          a5->__end_ = v30;
        }
        if (a4) {
          *a4 = 1;
        }
        goto LABEL_124;
      }
      if ((*(unsigned int (**)(KB::InputSegmentFilter *, void))(*(void *)this + 64))(this, v145[0]))
      {
        *(_OWORD *)int buf = v146;
        *(void *)&buf[16] = *(void *)c;
        KB::String::iterator::operator++((uint64_t *)buf);
        if ((*(unsigned int (**)(KB::InputSegmentFilter *, void))(*(void *)this + 56))(this, *(unsigned int *)&buf[16]))
        {
          uint64_t v18 = v145[0];
          uint64_t v19 = c[0];
          long long v142 = v146;
          uint64_t v143 = *(void *)c;
          KB::String::iterator::operator++((uint64_t *)&v142);
          if ((*(unsigned int (**)(KB::InputSegmentFilter *, uint64_t, uint64_t, void))(*(void *)this
                                                                                                  + 40))(this, v18, v19, v143))
          {
            if (a5)
            {
              UChar32 v20 = v145[1];
              std::vector<unsigned int>::pointer v22 = a5->__end_;
              id v21 = a5->__end_cap_.__value_;
              if (v22 >= v21)
              {
                std::vector<unsigned int>::pointer v57 = a5->__begin_;
                uint64_t v58 = v22 - a5->__begin_;
                unint64_t v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62) {
                  goto LABEL_240;
                }
                uint64_t v60 = (char *)v21 - (char *)v57;
                if (v60 >> 1 > v59) {
                  unint64_t v59 = v60 >> 1;
                }
                BOOL v35 = (unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v35) {
                  unint64_t v61 = v59;
                }
                if (v61)
                {
                  unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v61);
                  std::vector<unsigned int>::pointer v57 = a5->__begin_;
                  std::vector<unsigned int>::pointer v22 = a5->__end_;
                }
                else
                {
                  uint64_t v62 = 0;
                }
                unint64_t v73 = (unsigned int *)(v61 + 4 * v58);
                *unint64_t v73 = v20;
                id v23 = v73 + 1;
                while (v22 != v57)
                {
                  unsigned int v74 = *--v22;
                  *--unint64_t v73 = v74;
                }
                id v21 = (unsigned int *)(v61 + 4 * v62);
                a5->__begin_ = v73;
                a5->__end_ = v23;
                a5->__end_cap_.__value_ = v21;
                if (v57)
                {
                  operator delete(v57);
                  id v21 = a5->__end_cap_.__value_;
                }
              }
              else
              {
                *std::vector<unsigned int>::pointer v22 = v145[1];
                id v23 = v22 + 1;
              }
              a5->__end_ = v23;
              UChar32 v75 = v145[1];
              if (v23 >= v21)
              {
                std::vector<unsigned int>::pointer v77 = a5->__begin_;
                uint64_t v78 = v23 - a5->__begin_;
                unint64_t v79 = v78 + 1;
                if ((unint64_t)(v78 + 1) >> 62) {
                  goto LABEL_240;
                }
                uint64_t v80 = (char *)v21 - (char *)v77;
                if (v80 >> 1 > v79) {
                  unint64_t v79 = v80 >> 1;
                }
                BOOL v35 = (unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v35) {
                  unint64_t v81 = v79;
                }
                if (v81)
                {
                  unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v81);
                  std::vector<unsigned int>::pointer v77 = a5->__begin_;
                  id v23 = a5->__end_;
                }
                else
                {
                  uint64_t v82 = 0;
                }
                BOOL v83 = (unsigned int *)(v81 + 4 * v78);
                unsigned int *v83 = v75;
                long long v76 = v83 + 1;
                while (v23 != v77)
                {
                  unsigned int v84 = *--v23;
                  *--BOOL v83 = v84;
                }
                a5->__begin_ = v83;
                a5->__end_ = v76;
                a5->__end_cap_.__value_ = (unsigned int *)(v81 + 4 * v82);
                if (v77) {
                  operator delete(v77);
                }
              }
              else
              {
                unsigned int *v23 = v145[1];
                long long v76 = v23 + 1;
              }
              a5->__end_ = v76;
            }
            ++v145[1];
            KB::String::iterator::operator++((uint64_t *)&v144);
            for (unint64_t i = 3; i > 1; --i)
              KB::String::iterator::operator++((uint64_t *)&v146);
            goto LABEL_124;
          }
        }
      }
      if (KB::character_is_free_insertion(v145[0])
        || ((*(uint64_t (**)(KB::InputSegmentFilter *, void))(*(void *)this + 64))(this, v145[0]) & 1) != 0|| (*(unsigned int (**)(KB::InputSegmentFilter *, void))(*(void *)this + 48))(this, v145[0]))
      {
        buf[0] = 0;
        if (!(*(unsigned int (**)(KB::InputSegmentFilter *, void, void, unsigned char *))(*(void *)this + 32))(this, c[0], v145[0], buf))return 0; {
        if (a4 && buf[0])
        }
          *a4 = 1;
        KB::String::iterator::operator++((uint64_t *)&v146);
        if (a5)
        {
          UChar32 v24 = v145[1];
          std::vector<unsigned int>::pointer v26 = a5->__end_;
          id v25 = a5->__end_cap_.__value_;
          if (v26 >= v25)
          {
            std::vector<unsigned int>::pointer v31 = a5->__begin_;
            uint64_t v32 = v26 - a5->__begin_;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62) {
              goto LABEL_240;
            }
            uint64_t v34 = (char *)v25 - (char *)v31;
            if (v34 >> 1 > v33) {
              unint64_t v33 = v34 >> 1;
            }
            BOOL v35 = (unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v35) {
              unint64_t v36 = v33;
            }
            if (v36)
            {
              unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v36);
              std::vector<unsigned int>::pointer v31 = a5->__begin_;
              std::vector<unsigned int>::pointer v26 = a5->__end_;
            }
            else
            {
              uint64_t v37 = 0;
            }
            int v50 = (unsigned int *)(v36 + 4 * v32);
            *int v50 = v24;
            id v27 = v50 + 1;
            while (v26 != v31)
            {
              unsigned int v51 = *--v26;
              *--int v50 = v51;
            }
            a5->__begin_ = v50;
            a5->__end_ = v27;
            a5->__end_cap_.__value_ = (unsigned int *)(v36 + 4 * v37);
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *std::vector<unsigned int>::pointer v26 = v145[1];
            id v27 = v26 + 1;
          }
          a5->__end_ = v27;
        }
      }
      else
      {
        *(_OWORD *)int buf = v144;
        *(void *)&buf[16] = *(void *)v145;
        KB::String::iterator::operator++((uint64_t *)buf);
        if (((*(uint64_t (**)(KB::InputSegmentFilter *, void))(*(void *)this + 56))(this, *(unsigned int *)&buf[16]) & 1) != 0|| (long long v142 = v144, v143 = *(void *)v145, KB::String::iterator::operator++((uint64_t *)&v142), v143 == 39)|| v143 == 8217)
        {
          if ((*(unsigned int (**)(KB::InputSegmentFilter *, void))(*(void *)this + 64))(this, c[0]))
          {
            uint64_t v38 = c[0];
            uint64_t v39 = v145[0];
            *(_OWORD *)int buf = v144;
            *(void *)&buf[16] = *(void *)v145;
            KB::String::iterator::operator++((uint64_t *)buf);
            if ((*(unsigned int (**)(KB::InputSegmentFilter *, uint64_t, uint64_t, void))(*(void *)this + 40))(this, v38, v39, *(unsigned int *)&buf[16]))
            {
              KB::String::iterator::operator++((uint64_t *)&v146);
              if (a5)
              {
                UChar32 v40 = v145[1];
                std::vector<unsigned int>::pointer v42 = a5->__end_;
                char v41 = a5->__end_cap_.__value_;
                if (v42 >= v41)
                {
                  std::vector<unsigned int>::pointer v92 = a5->__begin_;
                  uint64_t v93 = v42 - a5->__begin_;
                  unint64_t v94 = v93 + 1;
                  if ((unint64_t)(v93 + 1) >> 62) {
                    goto LABEL_240;
                  }
                  uint64_t v95 = (char *)v41 - (char *)v92;
                  if (v95 >> 1 > v94) {
                    unint64_t v94 = v95 >> 1;
                  }
                  BOOL v35 = (unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL;
                  unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v35) {
                    unint64_t v96 = v94;
                  }
                  if (v96)
                  {
                    unint64_t v96 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v96);
                    std::vector<unsigned int>::pointer v92 = a5->__begin_;
                    std::vector<unsigned int>::pointer v42 = a5->__end_;
                  }
                  else
                  {
                    uint64_t v97 = 0;
                  }
                  char v113 = (unsigned int *)(v96 + 4 * v93);
                  *char v113 = v40;
                  uint64_t v43 = v113 + 1;
                  while (v42 != v92)
                  {
                    unsigned int v114 = *--v42;
                    *--char v113 = v114;
                  }
                  a5->__begin_ = v113;
                  a5->__end_ = v43;
                  a5->__end_cap_.__value_ = (unsigned int *)(v96 + 4 * v97);
                  if (v92) {
                    operator delete(v92);
                  }
                }
                else
                {
                  *std::vector<unsigned int>::pointer v42 = v145[1];
                  uint64_t v43 = v42 + 1;
                }
                a5->__end_ = v43;
              }
              for (unint64_t j = 3; j > 1; --j)
              {
                ++v145[1];
                KB::String::iterator::operator++((uint64_t *)&v144);
              }
              goto LABEL_124;
            }
          }
        }
        if ((c[0] | 0x20) != 0x20)
        {
LABEL_68:
          if ((*(unsigned int (**)(KB::InputSegmentFilter *))(*(void *)this + 48))(this))
          {
            if (a5)
            {
              UChar32 v53 = v145[1];
              std::vector<unsigned int>::pointer v55 = a5->__end_;
              float v54 = a5->__end_cap_.__value_;
              if (v55 >= v54)
              {
                std::vector<unsigned int>::pointer v86 = a5->__begin_;
                uint64_t v87 = v55 - a5->__begin_;
                unint64_t v88 = v87 + 1;
                if ((unint64_t)(v87 + 1) >> 62) {
                  goto LABEL_240;
                }
                uint64_t v89 = (char *)v54 - (char *)v86;
                if (v89 >> 1 > v88) {
                  unint64_t v88 = v89 >> 1;
                }
                BOOL v35 = (unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v35) {
                  unint64_t v90 = v88;
                }
                if (v90)
                {
                  unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v90);
                  std::vector<unsigned int>::pointer v86 = a5->__begin_;
                  std::vector<unsigned int>::pointer v55 = a5->__end_;
                }
                else
                {
                  uint64_t v91 = 0;
                }
                uint64_t v110 = (unsigned int *)(v90 + 4 * v87);
                *uint64_t v110 = v53;
                int v56 = v110 + 1;
                while (v55 != v86)
                {
                  unsigned int v111 = *--v55;
                  *--uint64_t v110 = v111;
                }
                a5->__begin_ = v110;
                a5->__end_ = v56;
                a5->__end_cap_.__value_ = (unsigned int *)(v90 + 4 * v91);
                if (v86) {
                  operator delete(v86);
                }
              }
              else
              {
                *std::vector<unsigned int>::pointer v55 = v145[1];
                int v56 = v55 + 1;
              }
              a5->__end_ = v56;
            }
            for (unint64_t k = 3; k > 1; --k)
            {
              ++v145[1];
              KB::String::iterator::operator++((uint64_t *)&v144);
            }
            if (!a4) {
              goto LABEL_193;
            }
          }
          else
          {
            buf[0] = 0;
            if (!(*(unsigned int (**)(KB::InputSegmentFilter *, void, void, unsigned char *))(*(void *)this + 32))(this, c[0], v145[0], buf))return 0; {
            if (a4 && buf[0])
            }
              *a4 = 1;
            uint64_t v68 = c[0];
            if (a5 && c[0])
            {
              UChar32 v69 = v145[1];
              std::vector<unsigned int>::pointer v71 = a5->__end_;
              unint64_t v70 = a5->__end_cap_.__value_;
              if (v71 >= v70)
              {
                std::vector<unsigned int>::pointer v98 = a5->__begin_;
                uint64_t v99 = v71 - a5->__begin_;
                unint64_t v100 = v99 + 1;
                if ((unint64_t)(v99 + 1) >> 62) {
                  goto LABEL_240;
                }
                uint64_t v101 = (char *)v70 - (char *)v98;
                if (v101 >> 1 > v100) {
                  unint64_t v100 = v101 >> 1;
                }
                BOOL v35 = (unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v35) {
                  unint64_t v102 = v100;
                }
                if (v102)
                {
                  unint64_t v102 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v102);
                  std::vector<unsigned int>::pointer v98 = a5->__begin_;
                  std::vector<unsigned int>::pointer v71 = a5->__end_;
                }
                else
                {
                  uint64_t v103 = 0;
                }
                char v116 = (unsigned int *)(v102 + 4 * v99);
                unsigned int *v116 = v69;
                uint64_t v72 = v116 + 1;
                while (v71 != v98)
                {
                  unsigned int v117 = *--v71;
                  *--char v116 = v117;
                }
                a5->__begin_ = v116;
                a5->__end_ = v72;
                a5->__end_cap_.__value_ = (unsigned int *)(v102 + 4 * v103);
                if (v98) {
                  operator delete(v98);
                }
              }
              else
              {
                *std::vector<unsigned int>::pointer v71 = v145[1];
                uint64_t v72 = v71 + 1;
              }
              a5->__end_ = v72;
              uint64_t v68 = c[0];
            }
            ++v145[1];
            KB::String::iterator::operator++((uint64_t *)&v144);
            int v118 = (*(uint64_t (**)(KB::InputSegmentFilter *, uint64_t))(*(void *)this + 64))(this, v68);
            if (!a4 || !v118) {
              goto LABEL_193;
            }
          }
          *a4 = 1;
LABEL_193:
          int v52 = (uint64_t *)&v146;
          goto LABEL_64;
        }
        if (v145[0] == 32)
        {
          if (c[0]) {
            goto LABEL_68;
          }
        }
        else
        {
          *(_OWORD *)int buf = v144;
          *(void *)&buf[16] = *(void *)v145;
          KB::String::iterator::operator++((uint64_t *)buf);
          if (*(_DWORD *)&buf[16] != 32)
          {
            if (a5)
            {
              std::vector<unsigned int>::pointer v66 = a5->__end_;
              uint64_t v65 = a5->__end_cap_.__value_;
              if (v66 >= v65)
              {
                std::vector<unsigned int>::pointer v104 = a5->__begin_;
                uint64_t v105 = v66 - a5->__begin_;
                unint64_t v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 62) {
LABEL_240:
                }
                  abort();
                uint64_t v107 = (char *)v65 - (char *)v104;
                if (v107 >> 1 > v106) {
                  unint64_t v106 = v107 >> 1;
                }
                BOOL v35 = (unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v108 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v35) {
                  unint64_t v108 = v106;
                }
                if (v108)
                {
                  unint64_t v108 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v108);
                  std::vector<unsigned int>::pointer v104 = a5->__begin_;
                  std::vector<unsigned int>::pointer v66 = a5->__end_;
                }
                else
                {
                  uint64_t v109 = 0;
                }
                int64x2_t v119 = (unsigned int *)(v108 + 4 * v105);
                *int64x2_t v119 = -1;
                unint64_t v67 = v119 + 1;
                while (v66 != v104)
                {
                  unsigned int v120 = *--v66;
                  *--int64x2_t v119 = v120;
                }
                a5->__begin_ = v119;
                a5->__end_ = v67;
                a5->__end_cap_.__value_ = (unsigned int *)(v108 + 4 * v109);
                if (v104) {
                  operator delete(v104);
                }
              }
              else
              {
                *std::vector<unsigned int>::pointer v66 = -1;
                unint64_t v67 = v66 + 1;
              }
              a5->__end_ = v67;
            }
            goto LABEL_193;
          }
        }
      }
      ++v145[1];
      int v52 = (uint64_t *)&v144;
LABEL_64:
      KB::String::iterator::operator++(v52);
LABEL_124:
      ++v17;
      UChar32 v15 = v145[0];
      if (!v145[0]) {
        goto LABEL_199;
      }
      UChar32 v16 = c[0];
      if (!c[0])
      {
LABEL_197:
        while (!KB::character_is_free_insertion(v15))
        {
          ++v145[1];
          KB::String::iterator::operator++((uint64_t *)&v144);
          UChar32 v15 = v145[0];
          if (!v145[0]) {
            goto LABEL_199;
          }
        }
        return 0;
      }
    }
  }
  int v17 = 0;
LABEL_199:
  UChar32 v121 = c[0];
  uint64_t v122 = 1;
  if (c[0])
  {
    do
    {
      BOOL is_free_insertion = KB::character_is_free_insertion(v121);
      if (a4 && is_free_insertion) {
        *a4 = 1;
      }
      if (a5)
      {
        std::vector<unsigned int>::pointer v125 = a5->__end_;
        v124 = a5->__end_cap_.__value_;
        if (v125 >= v124)
        {
          std::vector<unsigned int>::pointer v127 = a5->__begin_;
          uint64_t v128 = v125 - a5->__begin_;
          unint64_t v129 = v128 + 1;
          if ((unint64_t)(v128 + 1) >> 62) {
            goto LABEL_240;
          }
          uint64_t v130 = (char *)v124 - (char *)v127;
          if (v130 >> 1 > v129) {
            unint64_t v129 = v130 >> 1;
          }
          if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v131 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v131 = v129;
          }
          if (v131)
          {
            unint64_t v131 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v131);
            std::vector<unsigned int>::pointer v127 = a5->__begin_;
            std::vector<unsigned int>::pointer v125 = a5->__end_;
          }
          else
          {
            uint64_t v132 = 0;
          }
          long long v133 = (unsigned int *)(v131 + 4 * v128);
          *long long v133 = -1;
          v126 = v133 + 1;
          while (v125 != v127)
          {
            unsigned int v134 = *--v125;
            *--long long v133 = v134;
          }
          a5->__begin_ = v133;
          a5->__end_ = v126;
          a5->__end_cap_.__value_ = (unsigned int *)(v131 + 4 * v132);
          if (v127) {
            operator delete(v127);
          }
        }
        else
        {
          *std::vector<unsigned int>::pointer v125 = -1;
          v126 = v125 + 1;
        }
        a5->__end_ = v126;
      }
      KB::String::iterator::operator++((uint64_t *)&v146);
      UChar32 v121 = c[0];
    }
    while (c[0]);
    if (v145[0])
    {
      if (TICanLogMessageAtLevel_onceToken != -1) {
        dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
      }
      unint64_t v135 = TIOSLogFacility();
      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v137 = (const char *)*((void *)a2 + 1);
        if (!v137) {
          uint64_t v137 = v141;
        }
        if (*(_WORD *)a2) {
          v138 = v137;
        }
        else {
          v138 = "";
        }
        v139 = (const char *)*((void *)a3 + 1);
        if (!v139) {
          v139 = (char *)a3 + 16;
        }
        if (*(_WORD *)a3) {
          v140 = v139;
        }
        else {
          v140 = "";
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "string_preserves_surface_form_features";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v138;
        *(_WORD *)&buf[22] = 2080;
        v149 = v140;
        __int16 v150 = 1024;
        int v151 = v17;
        _os_log_debug_impl(&dword_1E3F0E000, v135, OS_LOG_TYPE_DEBUG, "%s warning: string_preserves_surface_form_features([%s], [%s]) iterated %d times without reaching end of input", buf, 0x26u);
      }
    }
    return 1;
  }
  return v122;
}

void KB::InputSegmentFilter::~InputSegmentFilter(KB::InputSegmentFilter *this)
{
}

uint64_t KB::LayoutBasedInputSegmentFilter::allows_sortkey_equivalent_substitution(KB::LayoutBasedInputSegmentFilter *this)
{
  return 0;
}

void KB::LayoutBasedInputSegmentFilter::swap_case(KB::LayoutBasedInputSegmentFilter *this, UChar32 c)
{
  if (u_isupper(c))
  {
    JUMPOUT(0x1E4E7CC30);
  }

  JUMPOUT(0x1E4E7CC50);
}

BOOL KB::LayoutBasedInputSegmentFilter::allows_substitution(KB::LayoutBasedInputSegmentFilter *this, KB *a2, uint64_t a3, BOOL *a4)
{
  if (a2 != a3
    && (*(unsigned int (**)(KB::LayoutBasedInputSegmentFilter *, uint64_t))(*(void *)this + 72))(this, a3) != a2)
  {
    TI::Favonius::KeyboardLayout::key_for_char(*((void *)this + 2), a2, &v17);
    uint64_t v9 = v17;
    uint64_t v10 = *((void *)this + 2);
    if (!v17)
    {
      unsigned int v11 = (*(uint64_t (**)(KB::LayoutBasedInputSegmentFilter *, KB *))(*(void *)this + 72))(this, a2);
      TI::Favonius::KeyboardLayout::key_for_char(v10, v11, &v18);
      uint64_t v9 = v18;
      uint64_t v10 = *((void *)this + 2);
    }
    TI::Favonius::KeyboardLayout::key_for_char(v10, a3, &v17);
    uint64_t v13 = v17;
    if (v17)
    {
      if (v9)
      {
LABEL_8:
        if (v13)
        {
          BOOL v8 = (v9 == v13
             || !KB::operator==((unsigned __int16 *)(v9 + 40), (unsigned __int16 *)(v13 + 40))
             || (*(unsigned int (**)(KB::LayoutBasedInputSegmentFilter *, KB *, uint64_t))(*(void *)this + 80))(this, a2, a3))&& KB::substitution_allowed(a2, a3, a4, v12);
          WTF::RefCounted<TI::Favonius::Key>::deref(v13);
        }
        else
        {
          BOOL v8 = KB::substitution_allowed(a2, a3, a4, v12);
        }
        uint64_t v13 = v9;
LABEL_19:
        WTF::RefCounted<TI::Favonius::Key>::deref(v13);
        return v8;
      }
    }
    else
    {
      uint64_t v14 = *((void *)this + 2);
      unsigned int v15 = (*(uint64_t (**)(KB::LayoutBasedInputSegmentFilter *, uint64_t))(*(void *)this + 72))(this, a3);
      TI::Favonius::KeyboardLayout::key_for_char(v14, v15, &v18);
      uint64_t v13 = v18;
      if (v9) {
        goto LABEL_8;
      }
    }
    BOOL v8 = KB::substitution_allowed(a2, a3, a4, v12);
    if (!v13) {
      return v8;
    }
    goto LABEL_19;
  }
  return 1;
}

void KB::LayoutBasedInputSegmentFilter::~LayoutBasedInputSegmentFilter(KB::LayoutBasedInputSegmentFilter *this)
{
  *(void *)this = &unk_1F3F799C0;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref(v1);
  }

  JUMPOUT(0x1E4E7BC20);
}

{
  uint64_t v1;

  *(void *)this = &unk_1F3F799C0;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref(v1);
  }
}

BOOL KB::AccentKeyInputSegmentFilter::allows_composed_substitution(KB::AccentKeyInputSegmentFilter *this, KB *a2, unsigned int a3, unsigned int a4)
{
  if (KB::String::contains((KB::AccentKeyInputSegmentFilter *)((char *)this + 16), a4)
    && KB::AccentKeyInputSegmentFilter::character_has_accent_key_accent(this, a2))
  {
    return 1;
  }

  return KB::character_has_diacritic(a2, a4);
}

BOOL KB::AccentKeyInputSegmentFilter::character_has_accent_key_accent(KB::AccentKeyInputSegmentFilter *this, KB *a2)
{
  if (*((void *)this + 3)) {
    uint64_t v3 = (char *)*((void *)this + 3);
  }
  else {
    uint64_t v3 = (char *)this + 32;
  }
  uint64_t v13 = v3;
  int v4 = *((unsigned __int16 *)this + 8);
  int v14 = 0;
  int v15 = v4;
  unsigned int v16 = 0;
  KB::String::iterator::initialize((uint64_t *)&v13);
  uint64_t v9 = v3;
  int v10 = v4;
  int v11 = v4;
  int v12 = 0;
  KB::String::iterator::initialize((uint64_t *)&v9);
  BOOL has_diacritic = 0;
  int v6 = v14;
  int v7 = v10;
  while (v6 != v7)
  {
    BOOL has_diacritic = KB::character_has_diacritic(a2, v16);
    if (has_diacritic) {
      break;
    }
    KB::String::iterator::operator++((uint64_t *)&v13);
    int v6 = v14;
  }
  return has_diacritic;
}

BOOL KB::AccentKeyInputSegmentFilter::allows_substitution(KB::AccentKeyInputSegmentFilter *this, KB *a2, uint64_t a3, BOOL *a4)
{
  int v7 = (KB::AccentKeyInputSegmentFilter *)((char *)this + 16);
  if (KB::String::contains((KB::AccentKeyInputSegmentFilter *)((char *)this + 16), a2)
    && KB::String::contains(v7, a3))
  {
    return 1;
  }

  return KB::substitution_allowed(a2, a3, a4, v8);
}

uint64_t KB::AccentKeyInputSegmentFilter::letter_combines_with_selective_modifier(KB::AccentKeyInputSegmentFilter *this, uint64_t a2, uint64_t a3)
{
  if (KB::String::contains((KB::AccentKeyInputSegmentFilter *)((char *)this + 16), a3)) {
    return 1;
  }

  return MEMORY[0x1F4163E28](a2, a3);
}

void KB::AccentKeyInputSegmentFilter::~AccentKeyInputSegmentFilter(KB::AccentKeyInputSegmentFilter *this)
{
  *(void *)this = &unk_1F3F79A28;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && *((unsigned char *)this + 22) == 1) {
    free(v2);
  }

  JUMPOUT(0x1E4E7BC20);
}

{
  void *v2;

  *(void *)this = &unk_1F3F79A28;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    if (*((unsigned char *)this + 22) == 1) {
      free(v2);
    }
  }
}

BOOL KB::AccentKeyInputSegmentFilter::is_accent_key_char(KB::AccentKeyInputSegmentFilter *this, unsigned int a2)
{
  return KB::String::contains((KB::AccentKeyInputSegmentFilter *)((char *)this + 16), a2);
}

uint64_t __Block_byref_object_copy__23133(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23134(uint64_t a1)
{
}

id wordEntryDetailForLog(void *a1, uint64_t a2)
{
  int v30 = NSString;
  id v2 = a1;
  uint64_t v43 = [v2 candidatesOffered];
  uint64_t v28 = [v43 count];
  std::vector<unsigned int>::pointer v42 = [v2 allKeyboardInputs];
  uint64_t v27 = [v42 count];
  char v41 = [v2 allTouches];
  uint64_t v24 = [v41 count];
  UChar32 v40 = [v2 touchLayouts];
  uint64_t v23 = [v40 count];
  uint64_t v39 = [v2 acceptedCandidate];
  uint64_t v38 = [v39 candidate];
  unint64_t v48 = formatStringForLog(v38);
  uint64_t v37 = [v2 acceptedCandidate];
  unint64_t v36 = [v37 input];
  uint64_t v47 = formatStringForLog(v36);
  BOOL v35 = [v2 acceptedCandidate];
  uint64_t v34 = [v35 rawInput];
  unint64_t v46 = formatStringForLog(v34);
  unint64_t v33 = [v2 inputContext];
  uint64_t v45 = formatStringForLog(v33);
  int v29 = [v2 inputStem];
  unsigned int v16 = formatStringForLog(v29);
  std::vector<unsigned int>::pointer v26 = [v2 documentState];
  id v25 = [v26 contextBeforeInput];
  uint64_t v44 = formatStringForLog(v25);
  std::vector<unsigned int>::pointer v22 = [v2 documentState];
  id v21 = [v22 selectedText];
  uint64_t v3 = formatStringForLog(v21);
  UChar32 v20 = [v2 documentState];
  uint64_t v19 = [v20 contextAfterInput];
  uint64_t v13 = formatStringForLog(v19);
  uint64_t v18 = [v2 keyboardState];
  uint64_t v17 = [v18 documentState];
  int v15 = [v17 contextBeforeInput];
  int v4 = formatStringForLog(v15);
  int v14 = [v2 keyboardState];
  BOOL v5 = [v14 documentState];
  int v6 = [v5 selectedText];
  int v7 = formatStringForLog(v6);
  BOOL v8 = [v2 keyboardState];

  uint64_t v9 = [v8 documentState];
  int v10 = [v9 contextAfterInput];
  int v11 = formatStringForLog(v10);
  uint64_t v32 = [v30 stringWithFormat:@"CA detail %d n:<%lu|%lu|%lu|%lu> c:<%@|%@|%@> s:<%@|%@> d:<%@|%@|%@> k:<%@|%@|%@>", a2, v28, v27, v24, v23, v48, v47, v46, v45, v16, v44, v3, v13, v4, v7, v11];

  return v32;
}

__CFString *formatStringForLog(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 stringByReplacingOccurrencesOfString:@" " withString:@"␣"];
    id v2 = [v1 stringByReplacingOccurrencesOfString:@"\n" withString:@"⏎"];
  }
  else
  {
    id v2 = @"∅";
  }

  return v2;
}

uint64_t __Block_byref_object_copy__23265(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23266(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__23426(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23427(uint64_t a1)
{
}

uint64_t __KeyboardSettingsFeedbackLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  KeyboardSettingsFeedbackLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

uint64_t __Block_byref_object_copy__23597(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23598(uint64_t a1)
{
}

CFDataRef TICryptographerCreateStringDigest(const __CFString *a1, const __CFData *a2)
{
  CFDataRef Mutable = a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    memset(&c, 0, sizeof(c));
    CC_SHA1_Init(&c);
    CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
    if (CStringPtr)
    {
      BOOL v5 = CStringPtr;
      CC_LONG v6 = strlen(CStringPtr);
      CC_SHA1_Update(&c, v5, v6);
    }
    else
    {
      CFIndex Length = CFStringGetLength(a1);
      if (Length >= 1)
      {
        CFIndex v8 = Length;
        CFIndex v9 = 0;
        do
        {
          CFIndex usedBufLen = 0;
          v20.location = v9;
          v20.length = v8;
          CFIndex Bytes = CFStringGetBytes(a1, v20, 0x8000100u, 0, 0, buffer, 512, &usedBufLen);
          CC_SHA1_Update(&c, buffer, usedBufLen);
          v9 += Bytes;
          BOOL v11 = v8 <= Bytes;
          v8 -= Bytes;
        }
        while (!v11);
      }
    }
    BytePtr = CFDataGetBytePtr(Mutable);
    CC_LONG v13 = CFDataGetLength(Mutable);
    CC_SHA1_Update(&c, BytePtr, v13);
    CC_SHA1_Final(buffer, &c);
    CFDataRef Mutable = (const __CFData *)CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 40);
    for (uint64_t i = 0; i != 20; ++i)
      CFStringAppendFormat((CFMutableStringRef)Mutable, 0, @"%x", buffer[i]);
  }
  return Mutable;
}

CFDataRef TICryptographerCreateSalt()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  arc4random_buf(__buf, 0x14uLL);
  return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], __buf, 20);
}

std::vector<unsigned int> *KB::Alignment::operator*@<X0>(std::vector<unsigned int> *__x@<X0>, uint64_t *a2@<X1>, std::vector<unsigned int> *a3@<X8>)
{
  uint64_t result = std::vector<unsigned int>::vector(a3, __x);
  std::vector<unsigned int>::pointer begin = result->__begin_;
  std::vector<unsigned int>::pointer end = result->__end_;
  uint64_t v7 = (char *)end - (char *)result->__begin_;
  if (end != result->__begin_)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v7 >> 2;
    uint64_t v10 = *a2;
    do
    {
      uint64_t v11 = begin[v8];
      if (v11 != -1) {
        begin[v8] = *(_DWORD *)(v10 + 4 * v11);
      }
      ++v8;
    }
    while (v9 > v8);
  }
  return result;
}

uint64_t *KB::Alignment::operator*=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = v3 - *result;
  if (v3 != *result)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 2;
    uint64_t v7 = *a2;
    do
    {
      uint64_t v8 = *(unsigned int *)(v2 + 4 * v5);
      if (v8 != -1) {
        *(_DWORD *)(v2 + 4 * v5) = *(_DWORD *)(v7 + 4 * v8);
      }
      ++v5;
    }
    while (v6 > v5);
  }
  return result;
}

uint64_t KB::Alignment::range_contains_domain(unsigned int **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = *v2;
    if (v4 != -1 && *(_DWORD *)(*a2 + 4 * v4) == -1) {
      break;
    }
    if (++v2 == v3) {
      return 1;
    }
  }
  return 0;
}

void KB::Alignment::inverse(KB::Alignment *this@<X0>, std::vector<unsigned int>::size_type __n@<X1>, uint64_t a3@<X8>)
{
  memset(&v16, 0, sizeof(v16));
  __double x = -1;
  v6.__i_ = 0;
  std::vector<unsigned int>::insert(&v16, v6, __n, &__x);
  uint64_t v7 = *(void *)this;
  std::vector<unsigned int>::pointer begin = v16.__begin_;
  uint64_t v9 = *((void *)this + 1) - *(void *)this;
  if (!v9)
  {
LABEL_8:
    *(void *)a3 = begin;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&v16.__end_;
    return;
  }
  uint64_t v10 = 0;
  unint64_t v11 = v9 >> 2;
  unsigned int v12 = 1;
  while (1)
  {
    std::vector<unsigned int>::size_type v13 = *(unsigned int *)(v7 + 4 * v10);
    if (v13 != -1) {
      break;
    }
LABEL_7:
    uint64_t v10 = v12;
    if (v11 <= v12++) {
      goto LABEL_8;
    }
  }
  if (v13 < __n)
  {
    if (begin[v13] == -1) {
      begin[v13] = v12 - 1;
    }
    goto LABEL_7;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (begin)
  {
    v16.__end_ = begin;
    operator delete(begin);
  }
}

void KB::Alignment::description(KB::Alignment *this@<X0>, unsigned __int16 *a2@<X8>)
{
  *(_DWORD *)a2 = 0x100000;
  a2[2] = 0;
  *((unsigned char *)a2 + 6) = 0;
  *((void *)a2 + 1) = 0;
  *((unsigned char *)a2 + 16) = 0;
  uint64_t v3 = a2 + 8;
  uint64_t v4 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    unint64_t v6 = 0;
    unsigned int v7 = 1;
    do
    {
      int v8 = *(_DWORD *)(v4 + 4 * v6);
      if (v8 == -1) {
        KB::String::append(a2, "x ", 0xFFFFuLL);
      }
      else {
        KB::String::append_format((KB::String *)a2, "%d ", v8);
      }
      unint64_t v6 = v7;
      uint64_t v4 = *(void *)this;
      ++v7;
    }
    while (v6 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2);
    int v9 = *a2;
    if (*a2)
    {
      uint64_t v10 = (unsigned __int16 *)*((void *)a2 + 1);
      if (!v10) {
        uint64_t v10 = v3;
      }
      *(void *)&long long v17 = v10;
      DWORD2(v17) = v9;
      HIDWORD(v17) = v9;
      LODWORD(v18) = 0;
      KB::String::iterator::initialize((uint64_t *)&v17);
      long long v19 = v17;
      uint64_t v20 = v18;
      KB::String::iterator::operator--((KB::String::iterator *)&v19);
      unsigned __int16 v11 = WORD6(v19);
      if (SDWORD2(v19) <= SHIDWORD(v19))
      {
        if (v20 >= 0x10000) {
          __int16 v12 = -4;
        }
        else {
          __int16 v12 = -3;
        }
        if ((v20 - 1114112) >= 0xFFEFE000) {
          __int16 v13 = v12;
        }
        else {
          __int16 v13 = 0;
        }
        if (v20 >> 11 >= 0x1B) {
          __int16 v14 = v13;
        }
        else {
          __int16 v14 = -3;
        }
        if (v20 >= 0x800) {
          __int16 v15 = v14;
        }
        else {
          __int16 v15 = -2;
        }
        if (v20 >= 0x80) {
          __int16 v16 = v15;
        }
        else {
          __int16 v16 = -1;
        }
        unsigned __int16 v11 = v16 + WORD4(v19);
      }
      KB::String::resize((KB::String *)a2, v11, 0);
    }
  }
}

BOOL TICanLogMessageAtLevel(unsigned int a1)
{
  if (TICanLogMessageAtLevel_onceToken != -1) {
    dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
  }
  return TICanLogMessageAtLevel_logLevel >= a1;
}

void __TICanLogMessageAtLevel_block_invoke()
{
  if (TI_IS_INTERNAL_INSTALL::once_token != -1) {
    dispatch_once(&TI_IS_INTERNAL_INSTALL::once_token, &__block_literal_global_3708);
  }
  if (TI_IS_INTERNAL_INSTALL::is_internal_install) {
    TICanLogMessageAtLevel_logLevel = CFPreferencesGetAppIntegerValue(@"kbdLogLevel", @"com.apple.keyboard", 0);
  }
}

id TIOSLogFacility()
{
  if (TIOSLogFacility_onceToken != -1) {
    dispatch_once(&TIOSLogFacility_onceToken, &__block_literal_global_42_23837);
  }
  dispatch_queue_t v0 = (void *)TIOSLogFacility_logFacility;

  return v0;
}

uint64_t __TIOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "KBDLog");
  uint64_t v1 = TIOSLogFacility_logFacility;
  TIOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TIProactiveQuickTypeOSLogFacility()
{
  if (TIProactiveQuickTypeOSLogFacility_onceToken != -1) {
    dispatch_once(&TIProactiveQuickTypeOSLogFacility_onceToken, &__block_literal_global_46_23843);
  }
  os_log_t v0 = (void *)TIProactiveQuickTypeOSLogFacility_logFacility;

  return v0;
}

uint64_t __TIProactiveQuickTypeOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "ProactiveQuickType");
  uint64_t v1 = TIProactiveQuickTypeOSLogFacility_logFacility;
  TIProactiveQuickTypeOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TIPersonalizationNamedEntityOSLogFacility()
{
  if (TIPersonalizationNamedEntityOSLogFacility_onceToken != -1) {
    dispatch_once(&TIPersonalizationNamedEntityOSLogFacility_onceToken, &__block_literal_global_48_23846);
  }
  os_log_t v0 = (void *)TIPersonalizationNamedEntityOSLogFacility_logFacility;

  return v0;
}

uint64_t __TIPersonalizationNamedEntityOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "PersonalizationNamedEntity");
  uint64_t v1 = TIPersonalizationNamedEntityOSLogFacility_logFacility;
  TIPersonalizationNamedEntityOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TIPersonalizationContactOSLogFacility()
{
  if (TIPersonalizationContactOSLogFacility_onceToken != -1) {
    dispatch_once(&TIPersonalizationContactOSLogFacility_onceToken, &__block_literal_global_50);
  }
  os_log_t v0 = (void *)TIPersonalizationContactOSLogFacility_logFacility;

  return v0;
}

uint64_t __TIPersonalizationContactOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "PersonalizationContact");
  uint64_t v1 = TIPersonalizationContactOSLogFacility_logFacility;
  TIPersonalizationContactOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TIPersonalizationAppNamesOSLogFacility()
{
  if (TIPersonalizationAppNamesOSLogFacility_onceToken != -1) {
    dispatch_once(&TIPersonalizationAppNamesOSLogFacility_onceToken, &__block_literal_global_52);
  }
  os_log_t v0 = (void *)TIPersonalizationAppNamesOSLogFacility_logFacility;

  return v0;
}

uint64_t __TIPersonalizationAppNamesOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "PersonalizationAppNames");
  uint64_t v1 = TIPersonalizationAppNamesOSLogFacility_logFacility;
  TIPersonalizationAppNamesOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TIInlineCompletionsOSLogFacility()
{
  if (TIInlineCompletionsOSLogFacility_onceToken != -1) {
    dispatch_once(&TIInlineCompletionsOSLogFacility_onceToken, &__block_literal_global_55);
  }
  os_log_t v0 = (void *)TIInlineCompletionsOSLogFacility_logFacility;

  return v0;
}

uint64_t __TIInlineCompletionsOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "InlineTextCompletions");
  uint64_t v1 = TIInlineCompletionsOSLogFacility_logFacility;
  TIInlineCompletionsOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TIInputManagerOSLogFacility()
{
  if (TIInputManagerOSLogFacility_onceToken != -1) {
    dispatch_once(&TIInputManagerOSLogFacility_onceToken, &__block_literal_global_58);
  }
  os_log_t v0 = (void *)TIInputManagerOSLogFacility_logFacility;

  return v0;
}

uint64_t __TIInputManagerOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "KBDInputManager");
  uint64_t v1 = TIInputManagerOSLogFacility_logFacility;
  TIInputManagerOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TIKeyboardActivityOSLogFacility()
{
  if (TIKeyboardActivityOSLogFacility_onceToken != -1) {
    dispatch_once(&TIKeyboardActivityOSLogFacility_onceToken, &__block_literal_global_61_23863);
  }
  os_log_t v0 = (void *)TIKeyboardActivityOSLogFacility_logFacility;

  return v0;
}

uint64_t __TIKeyboardActivityOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "KeyboardActivity");
  uint64_t v1 = TIKeyboardActivityOSLogFacility_logFacility;
  TIKeyboardActivityOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TIUserDictionaryOSLogFacility()
{
  if (TIUserDictionaryOSLogFacility_onceToken != -1) {
    dispatch_once(&TIUserDictionaryOSLogFacility_onceToken, &__block_literal_global_64_23868);
  }
  os_log_t v0 = (void *)TIUserDictionaryOSLogFacility_logFacility;

  return v0;
}

uint64_t __TIUserDictionaryOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "UserDictionary");
  uint64_t v1 = TIUserDictionaryOSLogFacility_logFacility;
  TIUserDictionaryOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t __TIAssetsOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "Assets");
  uint64_t v1 = TIAssetsOSLogFacility_logFacility;
  TIAssetsOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TILanguageModelLogFacility()
{
  if (TILanguageModelLogFacility_onceToken != -1) {
    dispatch_once(&TILanguageModelLogFacility_onceToken, &__block_literal_global_70);
  }
  os_log_t v0 = (void *)TILanguageModelLogFacility_logFacility;

  return v0;
}

uint64_t __TILanguageModelLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "LanguageModel");
  uint64_t v1 = TILanguageModelLogFacility_logFacility;
  TILanguageModelLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TISupplementalLexiconOSLogFacility()
{
  if (TISupplementalLexiconOSLogFacility_onceToken != -1) {
    dispatch_once(&TISupplementalLexiconOSLogFacility_onceToken, &__block_literal_global_73);
  }
  os_log_t v0 = (void *)TISupplementalLexiconOSLogFacility_logFacility;

  return v0;
}

uint64_t __TISupplementalLexiconOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "SupplementalLexicon");
  uint64_t v1 = TISupplementalLexiconOSLogFacility_logFacility;
  TISupplementalLexiconOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TIAppAutofillOSLogFacility()
{
  if (TIAppAutofillOSLogFacility_onceToken != -1) {
    dispatch_once(&TIAppAutofillOSLogFacility_onceToken, &__block_literal_global_76);
  }
  os_log_t v0 = (void *)TIAppAutofillOSLogFacility_logFacility;

  return v0;
}

uint64_t __TIAppAutofillOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "TIAppAutofill");
  uint64_t v1 = TIAppAutofillOSLogFacility_logFacility;
  TIAppAutofillOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TITypologyDiagnosticExtensionOSLogFacility()
{
  if (TITypologyDiagnosticExtensionOSLogFacility_onceToken != -1) {
    dispatch_once(&TITypologyDiagnosticExtensionOSLogFacility_onceToken, &__block_literal_global_79_23885);
  }
  os_log_t v0 = (void *)TITypologyDiagnosticExtensionOSLogFacility_logFacility;

  return v0;
}

uint64_t __TITypologyDiagnosticExtensionOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "TITypologyDiagnosticExtension");
  uint64_t v1 = TITypologyDiagnosticExtensionOSLogFacility_logFacility;
  TITypologyDiagnosticExtensionOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id TIStickerCandidateGeneratorOSLogFacility()
{
  if (TIStickerCandidateGeneratorOSLogFacility_onceToken != -1) {
    dispatch_once(&TIStickerCandidateGeneratorOSLogFacility_onceToken, &__block_literal_global_82_23890);
  }
  os_log_t v0 = (void *)TIStickerCandidateGeneratorOSLogFacility_logFacility;

  return v0;
}

uint64_t __TIStickerCandidateGeneratorOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "TIStickerCandidateGenerator");
  uint64_t v1 = TIStickerCandidateGeneratorOSLogFacility_logFacility;
  TIStickerCandidateGeneratorOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id UnicodeScalar.__ivar_initializer()
{
  if (TISceneTaxonomyGeneratorOSLogFacility_onceToken != -1) {
    dispatch_once(&TISceneTaxonomyGeneratorOSLogFacility_onceToken, &__block_literal_global_85);
  }
  os_log_t v0 = (void *)TISceneTaxonomyGeneratorOSLogFacility_logFacility;

  return v0;
}

uint64_t __TISceneTaxonomyGeneratorOSLogFacility_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextInput", "TISceneTaxonomyGenerator");
  uint64_t v1 = TISceneTaxonomyGeneratorOSLogFacility_logFacility;
  TISceneTaxonomyGeneratorOSLogFacility_logFacilitCGFloat y = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void TIAddressBookFindRecordsMatchingRecipientsAsync(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (objc_class *)MEMORY[0x1E4F1CA80];
  id v5 = a1;
  unint64_t v6 = objc_msgSend([v4 alloc], "initWithCapacity:", objc_msgSend(v5, "count"));
  unsigned int v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v5, "count"));
  divideRecipientsIntoEmailAddressesAndPhoneNumbers(v5, v6, v7);

  int v8 = __GetAddressBookLookupQueue();
  __int16 v12 = v6;
  __int16 v13 = v7;
  __int16 v14 = v3;
  id v9 = v3;
  id v10 = v7;
  id v11 = v6;
  TIDispatchAsync();
}

void divideRecipientsIntoEmailAddressesAndPhoneNumbers(void *a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v8 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v5);
        }
        __int16 v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        char v13 = [v12 hasPrefix:@"mailto:"];
        __int16 v14 = v6;
        if ((v13 & 1) == 0)
        {
          char v15 = [v12 hasPrefix:@"tel:"];
          __int16 v14 = v7;
          if ((v15 & 1) == 0)
          {
            if ([v12 rangeOfString:@"@"] == 0x7FFFFFFFFFFFFFFFLL) {
              __int16 v14 = v7;
            }
            else {
              __int16 v14 = v6;
            }
          }
        }
        [v14 addObject:v12];
      }
      uint64_t v9 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v9);
  }
}

id __GetAddressBookLookupQueue()
{
  if (__GetAddressBookLookupQueue_onceToken != -1) {
    dispatch_once(&__GetAddressBookLookupQueue_onceToken, &__block_literal_global_23938);
  }
  os_log_t v0 = (void *)__GetAddressBookLookupQueue___queueSingleton;

  return v0;
}

void __TIAddressBookFindRecordsMatchingRecipientsAsync_block_invoke(uint64_t a1)
{
  id v3 = objc_alloc_init(MEMORY[0x1E4F1B980]);
  uint64_t v2 = recordsFromAddressBookMatchingRecipients(v3, *(void **)(a1 + 32), *(void **)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

id recordsFromAddressBookMatchingRecipients(void *a1, void *a2, void *a3)
{
  v56[1] = *MEMORY[0x1E4F143B8];
  id v44 = a1;
  id v5 = a2;
  id v40 = a3;
  id v43 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v40, "count") + objc_msgSend(v5, "count"));
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  obuint64_t j = v5;
  uint64_t v6 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v50;
    uint64_t v9 = *MEMORY[0x1E4F1AE08];
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v50 != v8) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(id *)(*((void *)&v49 + 1) + 8 * i);
        __int16 v12 = v11;
        if ([v11 hasPrefix:@"mailto:"])
        {
          __int16 v12 = [v11 substringFromIndex:objc_msgSend(@"mailto:", "length")];
        }
        uint64_t v13 = [v11 rangeOfString:@">" options:14];
        if (v13 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v14 = v13;
          uint64_t v15 = [v11 rangeOfString:@"<" options:6];
          if (v15 != 0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v17 = objc_msgSend(v11, "substringWithRange:", v15 + v16, v14 - (v15 + v16));

            __int16 v12 = (void *)v17;
          }
        }

        long long v18 = (void *)MEMORY[0x1E4F1B8F8];
        id v19 = v44;
        uint64_t v20 = [v18 predicateForContactsMatchingEmailAddress:v12];
        v56[0] = v9;
        uint64_t v21 = [MEMORY[0x1E4F1C978] arrayWithObjects:v56 count:1];
        uint64_t v53 = 0;
        std::vector<unsigned int>::pointer v22 = [v19 unifiedContactsMatchingPredicate:v20 keysToFetch:v21 error:&v53];

        uint64_t v23 = recordsFromAddressBookUIDs(v19, v22);

        if (v23) {
          [v43 setObject:v23 forKey:v11];
        }
      }
      uint64_t v7 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
    }
    while (v7);
  }

  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id v41 = v40;
  uint64_t v24 = [v41 countByEnumeratingWithState:&v45 objects:v54 count:16];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)v46;
    uint64_t v27 = *MEMORY[0x1E4F1AE08];
    do
    {
      for (uint64_t j = 0; j != v25; ++j)
      {
        if (*(void *)v46 != v26) {
          objc_enumerationMutation(v41);
        }
        id v29 = *(id *)(*((void *)&v45 + 1) + 8 * j);
        int v30 = v29;
        if ([v29 hasPrefix:@"tel:"])
        {
          int v30 = [v29 substringFromIndex:objc_msgSend(@"tel:", "length")];
        }
        std::vector<unsigned int>::pointer v31 = (void *)MEMORY[0x1E4F1B8F8];
        uint64_t v32 = (void *)MEMORY[0x1E4F1BA70];
        id v33 = v44;
        uint64_t v34 = [v32 phoneNumberWithStringValue:v30];
        BOOL v35 = [v31 predicateForContactsMatchingPhoneNumber:v34];

        v56[0] = v27;
        unint64_t v36 = [MEMORY[0x1E4F1C978] arrayWithObjects:v56 count:1];
        uint64_t v53 = 0;
        uint64_t v37 = [v33 unifiedContactsMatchingPredicate:v35 keysToFetch:v36 error:&v53];

        uint64_t v38 = recordsFromAddressBookUIDs(v33, v37);

        if (v38) {
          [v43 setObject:v38 forKey:v29];
        }
      }
      uint64_t v25 = [v41 countByEnumeratingWithState:&v45 objects:v54 count:16];
    }
    while (v25);
  }

  return v43;
}

id recordsFromAddressBookUIDs(void *a1, void *a2)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = [MEMORY[0x1E4F1B910] descriptorForRequiredKeysForStyle:0];
  v29[0] = v5;
  uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v29 count:1];

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v7 = v4;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)v25;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v25 != v11) {
          objc_enumerationMutation(v7);
        }
        uint64_t v13 = [*(id *)(*((void *)&v24 + 1) + 8 * i) identifier];
        id v23 = 0;
        uint64_t v14 = [v3 unifiedContactWithIdentifier:v13 keysToFetch:v6 error:&v23];
        id v15 = v23;

        if (v14)
        {
          if (!v10)
          {
            uint64_t v10 = [MEMORY[0x1E4F1CA60] dictionary];
          }
          uint64_t v16 = [v14 givenName];

          if (v16)
          {
            uint64_t v17 = [v14 givenName];
            [v10 setObject:v17 forKey:@"firstName"];
          }
          long long v18 = [v14 familyName];

          if (v18)
          {
            id v19 = [v14 familyName];
            [v10 setObject:v19 forKey:@"lastName"];
          }
          uint64_t v20 = [MEMORY[0x1E4F1B910] stringFromContact:v14 style:0];
          if (v20)
          {
            uint64_t v21 = (void *)v20;
            [v10 setObject:v20 forKey:@"compositeName"];

            goto LABEL_19;
          }
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_19:

  return v10;
}

id TIAddressBookFindRecordsMatchingRecipients(void *a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = &knownAssetRegionAttributes_assetRegionAttributes;
  if (TICanLogMessageAtLevel_onceToken != -1) {
    dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
  }
  if (TICanLogMessageAtLevel_logLevel >= 2)
  {
    id v3 = TIOSLogFacility();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      std::vector<unsigned int>::pointer v22 = objc_msgSend(NSString, "stringWithFormat:", @"%s CONTACTS: Lookup record(s) for %lu recipient(s)", "TIAddressBookFindRecordsMatchingRecipients", objc_msgSend(v1, "count"));
      LODWORD(v37) = 138412290;
      *(void *)((char *)&v37 + 4) = v22;
      _os_log_debug_impl(&dword_1E3F0E000, v3, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&v37, 0xCu);
    }
  }
  id v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v1, "count"));
  id v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v1, "count"));
  divideRecipientsIntoEmailAddressesAndPhoneNumbers(v1, v4, v5);
  id v6 = objc_alloc_init(MEMORY[0x1E4F28BB0]);
  *(void *)&long long v37 = 0;
  *((void *)&v37 + 1) = &v37;
  uint64_t v38 = 0x3032000000;
  uint64_t v39 = __Block_byref_object_copy__23948;
  id v40 = __Block_byref_object_dispose__23949;
  id v41 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  char v34 = 0;
  id v7 = objc_alloc_init(MEMORY[0x1E4F1B980]);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  _OWORD v24[2] = __TIAddressBookFindRecordsMatchingRecipients_block_invoke;
  v24[3] = &unk_1E6E2E330;
  id v8 = v7;
  id v25 = v8;
  id v9 = v4;
  id v26 = v9;
  id v10 = v5;
  id v27 = v10;
  id v11 = v6;
  id v28 = v11;
  id v29 = &v31;
  int v30 = &v37;
  [v8 requestAccessForEntityType:0 completionHandler:v24];
  __int16 v12 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceNow:120.0];
  [v11 lock];
  if (!*((unsigned char *)v32 + 24))
  {
    unint64_t v15 = 0x1E4F29000uLL;
    do
    {
      if (([v11 waitUntilDate:v12] & 1) == 0)
      {
        *((unsigned char *)v32 + 24) = 1;
        if (v2[149] != -1) {
          dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
        }
        uint64_t v16 = TIOSLogFacility();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(*(id *)(v15 + 24), "stringWithFormat:", @"%s CONTACTS: Timeout while waiting for access to database", "TIAddressBookFindRecordsMatchingRecipients");
          id v23 = v10;
          id v17 = v9;
          id v18 = v1;
          id v19 = v2;
          v21 = unint64_t v20 = v15;
          *(_DWORD *)int buf = 138412290;
          unint64_t v36 = v21;
          _os_log_debug_impl(&dword_1E3F0E000, v16, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);

          unint64_t v15 = v20;
          uint64_t v2 = v19;
          id v1 = v18;
          id v9 = v17;
          id v10 = v23;
        }
      }
    }
    while (!*((unsigned char *)v32 + 24));
  }
  [v11 unlock];
  id v13 = *(id *)(*((void *)&v37 + 1) + 40);

  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v37, 8);

  return v13;
}

uint64_t __Block_byref_object_copy__23948(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23949(uint64_t a1)
{
}

void __TIAddressBookFindRecordsMatchingRecipients_block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5)
  {
    if (TICanLogMessageAtLevel_onceToken != -1) {
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
    }
    id v6 = TIOSLogFacility();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id v11 = [NSString stringWithFormat:@"%s CONTACTS: Could not access database: %@", "TIAddressBookFindRecordsMatchingRecipients_block_invoke", v5];
      *(_DWORD *)int buf = 138412290;
      unint64_t v15 = v11;
      _os_log_debug_impl(&dword_1E3F0E000, v6, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
    }
  }
  else if (a2)
  {
    id v7 = recordsFromAddressBookMatchingRecipients(*(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
    goto LABEL_10;
  }
  id v7 = 0;
LABEL_10:
  [*(id *)(a1 + 56) lock];
  int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  if (TICanLogMessageAtLevel_onceToken != -1) {
    dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
  }
  if (v8)
  {
    if (TICanLogMessageAtLevel_logLevel >= 2)
    {
      id v9 = TIOSLogFacility();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        __int16 v12 = objc_msgSend(NSString, "stringWithFormat:", @"%s CONTACTS: Timeout before access handler completed", "TIAddressBookFindRecordsMatchingRecipients_block_invoke");
        *(_DWORD *)int buf = 138412290;
        unint64_t v15 = v12;
        _os_log_debug_impl(&dword_1E3F0E000, v9, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
  else
  {
    if (TICanLogMessageAtLevel_logLevel >= 2)
    {
      id v10 = TIOSLogFacility();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        id v13 = objc_msgSend(NSString, "stringWithFormat:", @"%s CONTACTS: Retrieved %lu record(s) from database", "TIAddressBookFindRecordsMatchingRecipients_block_invoke", objc_msgSend(v7, "count"));
        *(_DWORD *)int buf = 138412290;
        unint64_t v15 = v13;
        _os_log_debug_impl(&dword_1E3F0E000, v10, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), v7);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  }
  [*(id *)(a1 + 56) broadcast];
  [*(id *)(a1 + 56) unlock];
}

id TIAddressBookFindRecordsMatchingRecipientsOnMainThread(void *a1)
{
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x3032000000;
  id v23 = __Block_byref_object_copy__23948;
  long long v24 = __Block_byref_object_dispose__23949;
  id v25 = 0;
  id v1 = (objc_class *)MEMORY[0x1E4F1CA80];
  id v2 = a1;
  id v3 = objc_msgSend([v1 alloc], "initWithCapacity:", objc_msgSend(v2, "count"));
  id v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v2, "count"));
  divideRecipientsIntoEmailAddressesAndPhoneNumbers(v2, v3, v4);

  id v5 = objc_alloc_init(MEMORY[0x1E4F1B980]);
  dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __TIAddressBookFindRecordsMatchingRecipientsOnMainThread_block_invoke;
  unsigned __int16 v14[3] = &unk_1E6E2E358;
  dispatch_semaphore_t v18 = v6;
  id v19 = &v20;
  id v15 = v5;
  id v16 = v3;
  id v17 = v4;
  id v7 = v6;
  id v8 = v4;
  id v9 = v3;
  id v10 = v5;
  [v10 requestAccessForEntityType:0 completionHandler:v14];
  dispatch_time_t v11 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v7, v11);
  id v12 = (id)v21[5];

  _Block_object_dispose(&v20, 8);

  return v12;
}

void __TIAddressBookFindRecordsMatchingRecipientsOnMainThread_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    if (TICanLogMessageAtLevel_onceToken != -1) {
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
    }
    id v5 = TIOSLogFacility();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      id v9 = [NSString stringWithFormat:@"%s Could not open address book on main thread: %@", "TIAddressBookFindRecordsMatchingRecipientsOnMainThread_block_invoke", v4];
      *(_DWORD *)int buf = 138412290;
      dispatch_time_t v11 = v9;
      _os_log_debug_impl(&dword_1E3F0E000, v5, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v6 = recordsFromAddressBookMatchingRecipients(*(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

id TIAddressBookGetMeCardWithKeys(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  id v2 = objc_msgSend(a1, "_ios_meContactWithKeysToFetch:error:", a2, &v4);

  return v2;
}

id TIAddressBookGetMeCard(void *a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  id v1 = (void *)MEMORY[0x1E4F1B998];
  id v2 = a1;
  id v3 = [v1 descriptorForRequiredKeys];
  v7[0] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];

  id v5 = TIAddressBookGetMeCardWithKeys(v2, (uint64_t)v4);

  return v5;
}

id TIAddressBookGetArrayOfMeCardEmailAddresses(void *a1)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  v17[0] = *MEMORY[0x1E4F1ADC8];
  id v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:1];
  id v3 = TIAddressBookGetMeCardWithKeys(v1, (uint64_t)v2);

  uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = objc_msgSend(v3, "emailAddresses", 0);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = [*(id *)(*((void *)&v12 + 1) + 8 * i) value];
        [v4 addObject:v10];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return v4;
}

void TIGetMeCardAsync(void *a1)
{
  id v1 = a1;
  id v2 = __GetAddressBookLookupQueue();
  uint64_t v4 = v1;
  id v3 = v1;
  TIDispatchAsync();
}

void __TIGetMeCardAsync_block_invoke(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1B980]);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __TIGetMeCardAsync_block_invoke_2;
  _OWORD v5[3] = &unk_1E6E2E380;
  id v3 = *(id *)(a1 + 32);
  id v6 = v2;
  id v7 = v3;
  id v4 = v2;
  [v4 requestAccessForEntityType:0 completionHandler:v5];
}

void __TIGetMeCardAsync_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    if (TICanLogMessageAtLevel_onceToken != -1) {
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
    }
    id v5 = TIOSLogFacility();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = [NSString stringWithFormat:@"%s Failed to open address book for Me card: %@", "TIGetMeCardAsync_block_invoke_2", v4];
      *(_DWORD *)int buf = 138412290;
      id v10 = v8;
      _os_log_debug_impl(&dword_1E3F0E000, v5, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = TIAddressBookGetMeCard(*(void **)(a1 + 32));
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
}

void KB::CollatorWrapper::sortkey_for_string_with_root_collator(KB::CollatorWrapper *this@<X0>, _WORD *a2@<X8>)
{
  uint64_t v5 = _icu_root_collator();

  _sortkey_for_string_with_collator(a2, this, v5);
}

uint64_t _icu_root_collator(void)
{
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<UCollator>::~shared_ptr[abi:nn180100], &_icu_root_collator(void)::root_collator, &dword_1E3F0E000);
  }
  if (_icu_root_collator(void)::once != -1) {
    dispatch_once(&_icu_root_collator(void)::once, &__block_literal_global_23978);
  }
  return _icu_root_collator(void)::root_collator;
}

void _sortkey_for_string_with_collator(_WORD *a1, KB::String *this, uint64_t a3)
{
  if (!*(_WORD *)this)
  {
    *a1 = 0;
    return;
  }
  unsigned int v6 = *((unsigned __int16 *)this + 2);
  if (*((_WORD *)this + 2)
    || (KB::String::compute_length((unsigned __int16 *)this), unsigned int v6 = *((unsigned __int16 *)this + 2), *((_WORD *)this + 2)))
  {
    id v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::TokenMetadata>>(v6);
    id v9 = &v7[2 * v8];
    bzero(v7, 2 * v6);
    id v10 = &v7[2 * v6];
  }
  else
  {
    id v7 = 0;
    id v10 = 0;
    id v9 = 0;
  }
  *(void *)pErrorCode = 0;
  uint64_t v11 = (const char *)*((void *)this + 1);
  if (!v11) {
    uint64_t v11 = (char *)this + 16;
  }
  if (*(_WORD *)this) {
    long long v12 = v11;
  }
  else {
    long long v12 = "";
  }
  u_strFromUTF8((UChar *)v7, (unint64_t)(v10 - v7) >> 1, (int32_t *)pErrorCode, v12, *(unsigned __int16 *)this, &pErrorCode[1]);
  UErrorCode v13 = pErrorCode[1];
  if (pErrorCode[1] == U_BUFFER_OVERFLOW_ERROR)
  {
    uint64_t v14 = pErrorCode[0];
    unint64_t v15 = (v10 - v7) >> 1;
    if ((int)pErrorCode[0] <= v15)
    {
      if ((int)pErrorCode[0] >= v15) {
        id v19 = v10;
      }
      else {
        id v19 = &v7[2 * pErrorCode[0]];
      }
    }
    else
    {
      unint64_t v16 = (int)pErrorCode[0] - v15;
      if (v16 <= (v9 - v10) >> 1)
      {
        bzero(v10, 2 * v16);
        id v19 = &v10[2 * v16];
      }
      else
      {
        if (pErrorCode[0] < 0) {
          goto LABEL_71;
        }
        if (v9 - v7 > (unint64_t)(int)pErrorCode[0]) {
          uint64_t v14 = v9 - v7;
        }
        if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v17 = v14;
        }
        dispatch_semaphore_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::TokenMetadata>>(v17)
            + 2 * v15;
        bzero(v18, 2 * v16);
        id v19 = &v18[2 * v16];
        while (v10 != v7)
        {
          __int16 v20 = *((_WORD *)v10 - 1);
          v10 -= 2;
          *((_WORD *)v18 - 1) = v20;
          v18 -= 2;
        }
        if (v7) {
          operator delete(v7);
        }
        id v7 = v18;
      }
    }
    pErrorCode[1] = U_ZERO_ERROR;
    uint64_t v21 = (const char *)*((void *)this + 1);
    if (!v21) {
      uint64_t v21 = (char *)this + 16;
    }
    if (*(_WORD *)this) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = "";
    }
    u_strFromUTF8((UChar *)v7, (unint64_t)(v19 - v7) >> 1, (int32_t *)pErrorCode, v22, *(unsigned __int16 *)this, &pErrorCode[1]);
    UErrorCode v13 = pErrorCode[1];
  }
  if (v13 < U_ILLEGAL_ARGUMENT_ERROR && a3)
  {
    uint64_t v23 = pErrorCode[0];
    if (pErrorCode[0] == U_ZERO_ERROR)
    {
      unint64_t v25 = 0;
      id v26 = 0;
LABEL_47:
      SortKeCGFloat y = ucol_getSortKey();
      size_t v28 = SortKey - (void)&v26[-v25];
      if (SortKey <= (unint64_t)&v26[-v25])
      {
        unint64_t v32 = v25;
LABEL_63:
        *a1 = SortKey - 1;
        if ((unsigned __int16)(SortKey - 1) >= 0xFu) {
          operator new[]();
        }
        if (SortKey != 1) {
          memmove(a1 + 1, (const void *)v32, SortKey - 1);
        }
        if (v32) {
          operator delete((void *)v32);
        }
        goto LABEL_39;
      }
      unint64_t v29 = (unint64_t)&v26[-v25];
      uint64_t v30 = SortKey;
      if (2 * (uint64_t)&v26[-v25] > (unint64_t)SortKey) {
        uint64_t v30 = 2 * v29;
      }
      if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v31 = v30;
      }
      if (v31) {
        unint64_t v32 = (unint64_t)operator new(v31);
      }
      else {
        unint64_t v32 = 0;
      }
      uint64_t v33 = (char *)(v32 + v29);
      bzero(v33, v28);
      if (v26 == (char *)v25)
      {
        unint64_t v32 = (unint64_t)v33;
        if (!v25) {
          goto LABEL_62;
        }
      }
      else
      {
        char v34 = &v26[~v25];
        do
        {
          char v35 = *--v26;
          (v34--)[v32] = v35;
        }
        while (v26 != (char *)v25);
        if (!v25) {
          goto LABEL_62;
        }
      }
      operator delete((void *)v25);
LABEL_62:
      SortKeCGFloat y = ucol_getSortKey();
      goto LABEL_63;
    }
    if ((pErrorCode[0] & 0x80000000) == 0)
    {
      size_t v24 = 3 * (int)pErrorCode[0];
      unint64_t v25 = (unint64_t)operator new(v24);
      id v26 = (char *)(v25 + v24);
      bzero((void *)v25, 3 * v23);
      goto LABEL_47;
    }
LABEL_71:
    abort();
  }
  *a1 = 0;
LABEL_39:
  if (v7) {
    operator delete(v7);
  }
}

void ___ZL18_icu_root_collatorv_block_invoke()
{
}

uint64_t std::__shared_ptr_pointer<UCollator *,void (*)(UCollator *),std::allocator<UCollator>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<UCollator *,void (*)(UCollator *),std::allocator<UCollator>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E4E7BC20);
}

uint64_t std::shared_ptr<UCollator>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  id v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  return a1;
}

uint64_t KB::CollatorWrapper::sortkey_compare_strings_with_root_collator(KB::CollatorWrapper *this, const KB::String *a2, const KB::String *a3)
{
  _icu_root_collator();

  return _sortkey_compare_strings_with_collator();
}

uint64_t _sortkey_compare_strings_with_collator()
{
  int v0 = ucol_strcollUTF8();
  if (v0) {
    unsigned int v1 = -1;
  }
  else {
    unsigned int v1 = 0;
  }
  if (v0 == 1) {
    return 1;
  }
  else {
    return v1;
  }
}

KB::CollatorWrapper *KB::CollatorWrapper::CollatorWrapper(KB::CollatorWrapper *this)
{
  *(void *)this = 0;
  KB::String::String((KB::CollatorWrapper *)((char *)this + 8), "");
  *((void *)this + 5) = &unk_1F3F79DB8;
  *((void *)this + 8) = (char *)this + 40;
  *((void *)this + 9) = &unk_1F3F79E00;
  *((void *)this + 12) = (char *)this + 72;
  return this;
}

{
  *(void *)this = 0;
  KB::String::String((KB::CollatorWrapper *)((char *)this + 8), "");
  *((void *)this + 5) = &unk_1F3F79DB8;
  *((void *)this + 8) = (char *)this + 40;
  *((void *)this + 9) = &unk_1F3F79E00;
  *((void *)this + 12) = (char *)this + 72;
  return this;
}

BOOL std::__function::__func<KB::CollatorWrapper::CollatorWrapper(void)::$_1,std::allocator<KB::CollatorWrapper::CollatorWrapper(void)::$_1>,int ()(KB::String const&,KB::String const&)>::operator()()
{
  return _sortkey_compare_strings_with_collator() == 0;
}

void std::__function::__func<KB::CollatorWrapper::CollatorWrapper(void)::$_1,std::allocator<KB::CollatorWrapper::CollatorWrapper(void)::$_1>,int ()(KB::String const&,KB::String const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F79E00;
}

void *std::__function::__func<KB::CollatorWrapper::CollatorWrapper(void)::$_1,std::allocator<KB::CollatorWrapper::CollatorWrapper(void)::$_1>,int ()(KB::String const&,KB::String const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F3F79E00;
  return result;
}

void std::__function::__func<KB::CollatorWrapper::CollatorWrapper(void)::$_1,std::allocator<KB::CollatorWrapper::CollatorWrapper(void)::$_1>,int ()(KB::String const&,KB::String const&)>::~__func()
{
}

void std::__function::__func<KB::CollatorWrapper::CollatorWrapper(void)::$_0,std::allocator<KB::CollatorWrapper::CollatorWrapper(void)::$_0>,KB::ByteString ()(KB::String const&)>::operator()(KB::String *a1@<X1>, _WORD *a2@<X8>)
{
  uint64_t v4 = _icu_root_collator();

  _sortkey_for_string_with_collator(a2, a1, v4);
}

void std::__function::__func<KB::CollatorWrapper::CollatorWrapper(void)::$_0,std::allocator<KB::CollatorWrapper::CollatorWrapper(void)::$_0>,KB::ByteString ()(KB::String const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F3F79DB8;
}

void *std::__function::__func<KB::CollatorWrapper::CollatorWrapper(void)::$_0,std::allocator<KB::CollatorWrapper::CollatorWrapper(void)::$_0>,KB::ByteString ()(KB::String const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F3F79DB8;
  return result;
}

void std::__function::__func<KB::CollatorWrapper::CollatorWrapper(void)::$_0,std::allocator<KB::CollatorWrapper::CollatorWrapper(void)::$_0>,KB::ByteString ()(KB::String const&)>::~__func()
{
}

KB::CollatorWrapper *KB::CollatorWrapper::CollatorWrapper(KB::CollatorWrapper *this, CFTypeRef cf, const KB::String *a3)
{
  *(void *)this = cf;
  if (cf)
  {
    CFRetain(cf);
    *(void *)this = cf;
  }
  KB::String::String((KB::CollatorWrapper *)((char *)this + 8), a3);
  *((void *)this + 5) = &unk_1F3F79E48;
  *((void *)this + 6) = cf;
  *((void *)this + 8) = (char *)this + 40;
  *((void *)this + 9) = &unk_1F3F79E90;
  *((void *)this + 10) = cf;
  *((void *)this + 12) = (char *)this + 72;
  return this;
}

BOOL std::__function::__func<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_1,std::allocator<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_1>,int ()(KB::String const&,KB::String const&)>::operator()(uint64_t a1, _LXLexicon *a2, const KB::String *a3, const KB::String *a4)
{
  return KB::CollatorWrapper::_sortkey_compare_strings(*(KB::CollatorWrapper **)(a1 + 8), a2, a3, a4) == 0;
}

uint64_t KB::CollatorWrapper::_sortkey_compare_strings(KB::CollatorWrapper *this, _LXLexicon *a2, const KB::String *a3, const KB::String *a4)
{
  KB::cf_string_impl<KB::String>(&v10, (unsigned __int16 *)a2);
  CFStringRef v5 = v10;
  KB::cf_string_impl<KB::String>(&v9, (unsigned __int16 *)a3);
  CFStringRef v6 = v9;
  uint64_t v7 = LXLexiconCompareStrings();
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

uint64_t std::__function::__func<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_1,std::allocator<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_1>,int ()(KB::String const&,KB::String const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F3F79E90;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_1,std::allocator<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_1>,int ()(KB::String const&,KB::String const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F3F79E90;
  result[1] = v3;
  return result;
}

void std::__function::__func<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_1,std::allocator<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_1>,int ()(KB::String const&,KB::String const&)>::~__func()
{
}

void std::__function::__func<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_0,std::allocator<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_0>,KB::ByteString ()(KB::String const&)>::operator()(_LXLexicon *a1@<X1>, _WORD *a2@<X8>)
{
}

void KB::CollatorWrapper::_sortkey_for_string(_LXLexicon *a1@<X1>, _WORD *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  KB::cf_string_impl<KB::String>((CFStringRef *)&cf, (unsigned __int16 *)a1);
  CFStringRef v6 = 0;
  uint64_t v7 = 32;
  char v8 = 0;
  if (LXLexiconGetSortkeyBytes()) {
    *a2 = 0;
  }
  else {
    *a2 = 0;
  }
  free(v6);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t std::__function::__func<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_0,std::allocator<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_0>,KB::ByteString ()(KB::String const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F3F79E48;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_0,std::allocator<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_0>,KB::ByteString ()(KB::String const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F3F79E48;
  result[1] = v3;
  return result;
}

void std::__function::__func<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_0,std::allocator<KB::CollatorWrapper::CollatorWrapper(_LXLexicon const*,KB::String const&)::$_0>,KB::ByteString ()(KB::String const&)>::~__func()
{
}

void KB::CollatorWrapper::sortkey_for_string(KB::CollatorWrapper *this@<X0>, _LXLexicon *a2@<X1>, _WORD *a3@<X8>)
{
  if (*(void *)this)
  {
    KB::CollatorWrapper::_sortkey_for_string(a2, a3);
  }
  else
  {
    uint64_t v5 = _icu_root_collator();
    _sortkey_for_string_with_collator(a3, (KB::String *)a2, v5);
  }
}

BOOL KB::CollatorWrapper::sortkey_equal_strings(KB::CollatorWrapper **this, _LXLexicon *a2, const KB::String *a3, const KB::String *a4)
{
  return KB::CollatorWrapper::sortkey_compare_strings(this, a2, a3, a4) == 0;
}

uint64_t KB::CollatorWrapper::sortkey_compare_strings(KB::CollatorWrapper **this, _LXLexicon *a2, const KB::String *a3, const KB::String *a4)
{
  uint64_t v4 = *this;
  if (v4)
  {
    return KB::CollatorWrapper::_sortkey_compare_strings(v4, a2, a3, a4);
  }
  else
  {
    _icu_root_collator();
    return _sortkey_compare_strings_with_collator();
  }
}

BOOL KB::CollatorWrapper::sortkey_starts_with(KB::CollatorWrapper *this, _LXLexicon *a2, _LXLexicon *a3)
{
  KB::CollatorWrapper::sortkey_for_string(this, a2, &v8);
  KB::CollatorWrapper::sortkey_for_string(this, a3, &v7);
  BOOL v5 = KB::ByteString::starts_with((KB::ByteString *)&v8, &v7);
  if (v7.var0.var0.var0 >= 0xFu && v7.var0.var0.var1) {
    MEMORY[0x1E4E7BC00](v7.var0.var0.var1, 0x1000C8077774924);
  }
  if (v8 >= 0xFu && v9) {
    MEMORY[0x1E4E7BC00](v9, 0x1000C8077774924);
  }
  return v5;
}

char *get_file_path_for_bundle_resource(const __CFString *a1, const __CFString *a2)
{
  CFBundleRef BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.TextInputCore");
  BOOL v5 = BundleWithIdentifier;
  if (BundleWithIdentifier) {
    CFRetain(BundleWithIdentifier);
  }
  CFURLRef v6 = CFBundleCopyResourceURL(v5, a1, a2, 0);
  CFStringRef v7 = CFURLCopyFileSystemPath(v6, kCFURLPOSIXPathStyle);
  CFIndex v8 = CFStringGetLength(v7) + 1;
  uint64_t v9 = (char *)malloc_type_malloc(v8, 0x49DACD06uLL);
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  if (CFStringGetCString(v7, v9, v8, SystemEncoding))
  {
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  free(v9);
  uint64_t v9 = 0;
  if (v7) {
LABEL_5:
  }
    CFRelease(v7);
LABEL_6:
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v9;
}

CFPropertyListRef CreatePropertyListFromFile(const __CFString *a1, CFStringRef bundleID)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  CFBundleRef BundleWithIdentifier = CFBundleGetBundleWithIdentifier(bundleID);
  uint64_t v4 = BundleWithIdentifier;
  if (BundleWithIdentifier) {
    CFRetain(BundleWithIdentifier);
  }
  CFURLRef v5 = CFBundleCopyResourceURL(v4, a1, @"plist", 0);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v7 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5);
  if (v7)
  {
    CFIndex v8 = v7;
    if (CFReadStreamOpen(v7))
    {
      CFErrorRef error = 0;
      CFPropertyListRef v9 = CFPropertyListCreateWithStream(v6, v8, 0, 0, 0, &error);
      if (error)
      {
        CFStringRef v10 = CFErrorCopyDescription(error);
        KB::utf8_string(v10, (uint64_t)v18);
        if (v10)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = (const char *)v20;
            if (!v20) {
              uint64_t v11 = (const char *)v21;
            }
            if (!v18[0]) {
              uint64_t v11 = "";
            }
            *(_DWORD *)int buf = 136315394;
            unint64_t v15 = "CreatePropertyListFromFile";
            __int16 v16 = 2080;
            uint64_t v17 = v11;
            _os_log_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s  Error! reading plist file: %s \n", buf, 0x16u);
          }
          CFRelease(v10);
        }
        CFRelease(error);
        if (v20 && v19 == 1) {
          free(v20);
        }
      }
      CFReadStreamClose(v8);
    }
    else
    {
      CFPropertyListRef v9 = 0;
    }
    CFRelease(v8);
    if (v5) {
      goto LABEL_22;
    }
  }
  else
  {
    CFPropertyListRef v9 = 0;
    if (v5) {
LABEL_22:
    }
      CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v9;
}

void TI::CP::ScoreComponentSerializer::serialize_point(CGPoint a1@<0:D0, 8:D1>, uint64_t *a2@<X8>)
{
  double y = a1.y;
  v9[2] = *MEMORY[0x1E4F143B8];
  v8[0] = @"x";
  CFURLRef v5 = [NSNumber numberWithDouble:a1.x];
  v8[1] = @"y";
  v9[0] = v5;
  CFAllocatorRef v6 = [NSNumber numberWithDouble:y];
  v9[1] = v6;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:2];

  *a2 = v7;
}

void TI::CP::ScoreComponentSerializer::serialize_score_component(uint64_t a1@<X0>, void *a2@<X8>)
{
  void v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [MEMORY[0x1E4F1CA60] dictionary];
  CFURLRef v5 = [NSNumber numberWithDouble:*(double *)(a1 + 48)];
  [v4 setObject:v5 forKeyedSubscript:@"score"];

  switch(*(_DWORD *)a1)
  {
    case 0:
      [v4 setObject:@"KeyDeviation" forKeyedSubscript:@"type"];
      CFAllocatorRef v6 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 4)];
      [v4 setObject:v6 forKeyedSubscript:@"sample"];

      TI::CP::ScoreComponentSerializer::serialize_point(*(CGPoint *)(a1 + 16), (uint64_t *)&v23);
      uint64_t v7 = v23;
      [v4 setObject:v23 forKeyedSubscript:@"point"];
      if (v7) {
        CFRelease(v7);
      }
      TI::CP::ScoreComponentSerializer::serialize_point(*(CGPoint *)(a1 + 32), (uint64_t *)&v23);
      CFIndex v8 = v23;
      [v4 setObject:v23 forKeyedSubscript:@"keyPoint"];
      if (v8) {
        CFRelease(v8);
      }
      TI::CP::ScoreComponentSerializer::serialize_point(*(CGPoint *)(a1 + 32), (uint64_t *)&v23);
      CFPropertyListRef v9 = v23;
      CFStringRef v10 = @"keyPoint";
      goto LABEL_18;
    case 1:
      uint64_t v11 = @"PathDeviation";
      goto LABEL_15;
    case 2:
      uint64_t v11 = @"Loop";
      goto LABEL_15;
    case 3:
      uint64_t v11 = @"Overshoot";
      goto LABEL_15;
    case 4:
      long long v12 = @"SkippedKey";
      goto LABEL_13;
    case 5:
      long long v12 = @"KeySubstitution";
      goto LABEL_13;
    case 6:
      long long v12 = @"KeyPrediction";
LABEL_13:
      [v4 setObject:v12 forKeyedSubscript:@"type"];
      UErrorCode v13 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 4)];
      [v4 setObject:v13 forKeyedSubscript:@"sample"];

      TI::CP::ScoreComponentSerializer::serialize_point(*(CGPoint *)(a1 + 16), (uint64_t *)&v23);
      CFPropertyListRef v9 = v23;
      CFStringRef v10 = @"point";
      goto LABEL_18;
    case 7:
      uint64_t v11 = @"Transposition";
LABEL_15:
      [v4 setObject:v11 forKeyedSubscript:@"type"];
      uint64_t v14 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 4)];
      [v4 setObject:v14 forKeyedSubscript:@"sample1"];

      TI::CP::ScoreComponentSerializer::serialize_point(*(CGPoint *)(a1 + 16), (uint64_t *)&v23);
      unint64_t v15 = v23;
      [v4 setObject:v23 forKeyedSubscript:@"point1"];
      if (v15) {
        CFRelease(v15);
      }
      __int16 v16 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 8)];
      [v4 setObject:v16 forKeyedSubscript:@"sample2"];

      TI::CP::ScoreComponentSerializer::serialize_point(*(CGPoint *)(a1 + 32), (uint64_t *)&v23);
      CFPropertyListRef v9 = v23;
      CFStringRef v10 = @"point2";
LABEL_18:
      [v4 setObject:v9 forKeyedSubscript:v10];
      if (v9) {
        CFRelease(v9);
      }
      break;
    case 8:
      [v4 setObject:@"LanguageCharacter" forKeyedSubscript:@"type"];
      uint64_t v17 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 4)];
      [v4 setObject:v17 forKeyedSubscript:@"sample"];

      v24[0] = @"x";
      dispatch_semaphore_t v18 = [NSNumber numberWithDouble:*(double *)(a1 + 16)];
      v24[1] = @"y";
      v25[0] = v18;
      char v19 = [NSNumber numberWithDouble:*(double *)(a1 + 24)];
      v25[1] = v19;
      __int16 v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:v24 count:2];
      [v4 setObject:v20 forKeyedSubscript:@"point"];

      uint64_t v21 = objc_msgSend(NSString, "stringWithFormat:", @"%C", *(unsigned __int16 *)(a1 + 8));
      [v4 setObject:v21 forKeyedSubscript:@"character"];

      break;
    case 9:
      uint64_t v22 = @"LanguageTermination";
      goto LABEL_23;
    case 0xA:
      uint64_t v22 = @"LanguagePartialProb";
LABEL_23:
      [v4 setObject:v22 forKeyedSubscript:@"type"];
      break;
    default:
      break;
  }
  *a2 = v4;
}

void TI::CP::ScoreComponentSerializer::serialize_score_components(uint64_t *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  CFAllocatorRef v6 = [MEMORY[0x1E4F1CA48] array];
  *a2 = 0.0;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  while (v7 != v8)
  {
    TI::CP::ScoreComponentSerializer::serialize_score_component(v7, &v11);
    id v9 = v11;
    CFStringRef v10 = v9;
    if (v9) {
      CFRelease(v9);
    }
    *a2 = *(double *)(v7 + 48) + *a2;
    [v6 addObject:v10];

    v7 += 56;
  }
  *a3 = v6;
}

uint64_t KB::LexiconWrapper::lexicon(KB::LexiconWrapper *this)
{
  return *((void *)this + 18);
}

void KB::LexiconWrapper::~LexiconWrapper(KB::LexiconWrapper *this)
{
  KB::LexiconWrapper::~LexiconWrapper(this);

  JUMPOUT(0x1E4E7BC20);
}

{
  const void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F3F79F00;
  uint64_t v2 = (const void *)*((void *)this + 18);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 20);
  if (v3 && *((unsigned char *)this + 158) == 1) {
    free(v3);
  }

  KB::LexiconWrapperBase::~LexiconWrapperBase(this);
}

KB::LexiconWrapperBase *KB::LexiconWrapperBase::LexiconWrapperBase(KB::LexiconWrapperBase *this, const KB::String *a2)
{
  *(void *)this = &unk_1F3F79ED8;
  KB::String::String((KB::LexiconWrapperBase *)((char *)this + 8), a2);
  *((void *)this + 5) = 0;
  KB::String::String((KB::LexiconWrapperBase *)((char *)this + 48), a2);
  *((void *)this + 10) = &unk_1F3F79E48;
  *((void *)this + 11) = 0;
  *((void *)this + 13) = (char *)this + 80;
  *((void *)this + 14) = &unk_1F3F79E90;
  *((void *)this + 15) = 0;
  *((void *)this + 17) = (char *)this + 112;
  return this;
}

void KB::LexiconWrapperBase::enumerate_entries(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t RootCursor = (const void *)LXLexiconCreateRootCursor();
    LXCursorEnumerateEntriesRecursively();
    if (RootCursor)
    {
      CFRelease(RootCursor);
    }
  }
}

void KB::LexiconWrapperBase::enumerate_entries_for_string(uint64_t a1, unsigned __int16 *a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
    KB::cf_string_impl<KB::String>(&v5, a2);
    CFStringRef v4 = v5;
    LXLexiconEnumerateEntriesForString();
    if (v4) {
      CFRelease(v4);
    }
  }
}

void KB::LexiconWrapperBase::entry_for_string(KB::LexiconWrapperBase *this@<X0>, const KB::String *a2@<X1>, void *a3@<X8>)
{
  if (*((_WORD *)this + 4))
  {
    if (*((void *)this + 2)) {
      CFAllocatorRef v6 = (char *)*((void *)this + 2);
    }
    else {
      CFAllocatorRef v6 = (char *)this + 24;
    }
  }
  else
  {
    CFAllocatorRef v6 = "";
  }
  TILexiconIDForLocaleIdentifier(v6);
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x3002000000;
  UErrorCode v13 = __Block_byref_object_copy__24197;
  uint64_t v14 = __Block_byref_object_dispose__24198;
  CFTypeRef cf = 0;
  (*(void (**)(KB::LexiconWrapperBase *))(*(void *)this + 16))(this);
  KB::cf_string_impl<KB::String>(&v9, (unsigned __int16 *)a2);
  CFStringRef v7 = v9;
  LXLexiconEnumerateEntriesForString();
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)v11[5];
  *a3 = v8;
  if (v8)
  {
    CFRetain(v8);
    *a3 = v8;
  }
  _Block_object_dispose(&v10, 8);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t __Block_byref_object_copy__24197(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__24198(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZNK2KB18LexiconWrapperBase16entry_for_stringERKNS_6StringE_block_invoke(uint64_t a1, const void *a2, unsigned char *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  KB::Word::Word((uint64_t)v10, (uint64_t)a2, *(_DWORD *)(a1 + 48));
  KB::Word::capitalized_string((KB::Word *)v10, (uint64_t)v8);
  BOOL v6 = KB::String::equal((KB::String *)v8, *(const KB::String **)(a1 + 40), 1);
  if (v9) {
    BOOL v7 = v8[6] == 1;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    free(v9);
  }
  if (v6)
  {
    KB::retain_ptr<__CFDictionary const*>::operator=((const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    *a3 = 1;
  }
  KB::Word::~Word((KB::Word *)v10);
}

uint64_t KB::LexiconWrapperBase::total_usage_count(KB::LexiconWrapperBase *this)
{
  if (!(*(uint64_t (**)(KB::LexiconWrapperBase *))(*(void *)this + 16))(this)) {
    return 0;
  }
  (*(void (**)(KB::LexiconWrapperBase *))(*(void *)this + 16))(this);
  uint64_t RootCursor = LXLexiconCreateRootCursor();
  if (!RootCursor) {
    return 0;
  }
  uint64_t v3 = (const void *)RootCursor;
  uint64_t v4 = LXCursorUsageCountRecursive();
  CFRelease(v3);
  return v4;
}

uint64_t KB::LexiconWrapperBase::usage_count_for_string(KB::LexiconWrapperBase *this, const KB::String *a2)
{
  KB::LexiconWrapperBase::entry_for_string(this, a2, &v5);
  uint64_t v2 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t UsageCount = LXEntryGetUsageCount();
  CFRelease(v2);
  return UsageCount;
}

KB::LexiconWrapper *KB::LexiconWrapper::LexiconWrapper(KB::LexiconWrapper *this, const KB::String *a2, const KB::String *a3)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F3F79ED8;
  KB::String::String((KB::LexiconWrapper *)((char *)this + 8), a2);
  *((void *)this + 5) = 0;
  KB::String::String((KB::LexiconWrapper *)((char *)this + 48), a2);
  *((void *)this + 10) = &unk_1F3F79E48;
  *((void *)this + 11) = 0;
  *((void *)this + 13) = (char *)this + 80;
  *((void *)this + 14) = &unk_1F3F79E90;
  *((void *)this + 15) = 0;
  *((void *)this + 17) = (char *)this + 112;
  *(void *)this = &unk_1F3F79F00;
  *((void *)this + 18) = KB::LexiconWrapper::create_lexicon(a2, a3, v6);
  KB::String::String((KB::LexiconWrapper *)((char *)this + 152), a3);
  KB::CollatorWrapper::CollatorWrapper((KB::CollatorWrapper *)&cf, *((CFTypeRef *)this + 18), a2);
  KB::LexiconWrapperBase::set_collator(this, (uint64_t *)&cf);
  std::__function::__value_func<int ()(KB::String const&,KB::String const&)>::~__value_func[abi:nn180100](v12);
  std::__function::__value_func<KB::ByteString ()(KB::String const&)>::~__value_func[abi:nn180100](v11);
  if (v10 && v9 == 1) {
    free(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  return this;
}

uint64_t KB::LexiconWrapper::create_lexicon(KB::LexiconWrapper *this, const KB::String *a2, const KB::String *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (*(_WORD *)this)
  {
    BOOL v6 = (const void *)*MEMORY[0x1E4F72458];
    KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)this);
    BOOL v7 = value;
    CFDictionarySetValue(Mutable, v6, value);
    if (v7) {
      CFRelease(v7);
    }
  }
  if (*(_WORD *)a2)
  {
    uint64_t v8 = (const void *)*MEMORY[0x1E4F72430];
    KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)a2);
    char v9 = value;
    CFDictionarySetValue(Mutable, v8, value);
    if (v9) {
      CFRelease(v9);
    }
  }
  uint64_t v10 = LXLexiconCreate();
  if (!v10)
  {
    LODWORD(value) = 0x100000;
    WORD2(value) = 0;
    BYTE6(value) = 0;
    char v19 = 0;
    char v20 = 0;
    if (TICanLogMessageAtLevel_onceToken != -1) {
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_23827);
    }
    if (TICanLogMessageAtLevel_logLevel >= 2)
    {
      uint64_t v11 = TIOSLogFacility();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        UErrorCode v13 = &v20;
        if (v19) {
          UErrorCode v13 = (const char *)v19;
        }
        if (!(_WORD)value) {
          UErrorCode v13 = "";
        }
        *(_DWORD *)int buf = 136315394;
        unint64_t v15 = "create_lexicon";
        __int16 v16 = 2080;
        uint64_t v17 = v13;
        _os_log_debug_impl(&dword_1E3F0E000, v11, OS_LOG_TYPE_DEBUG, "%s Unable to create LXLexicon: %s", buf, 0x16u);
      }
    }
    if (v19 && BYTE6(value) == 1) {
      free(v19);
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v10;
}

KB::Candidate *KB::Candidate::Candidate(KB::Candidate *this, const KB::Candidate *a2, size_t *a3)
{
  BOOL v6 = WTF::Vector<KB::Word,3ul>::Vector(this, a2);
  *(_OWORD *)(v6 + 93) = xmmword_1E4154B40;
  v6[95] = 0xFF8000003F800000;
  *(_OWORD *)(v6 + 97) = 0u;
  *(_OWORD *)(v6 + 99) = 0u;
  *(_OWORD *)(v6 + 101) = 0u;
  *(_OWORD *)(v6 + 103) = 0u;
  *((void *)this + 105) = 0;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)(v6 + 106));
  language_modeling::v1::LinguisticContext::LinguisticContext((KB::Candidate *)((char *)this + 856));
  *((void *)this + 109) = 0;
  *((void *)this + 108) = 0;
  *((void *)this + 110) = 0;
  if (!*((_WORD *)a2 + 444)) {
    KB::Candidate::compute_string(a2);
  }
  KB::String::String((KB::Candidate *)((char *)this + 888), (const KB::Candidate *)((char *)a2 + 888));
  BOOL v7 = (std::string *)((char *)this + 920);
  if (*((char *)a2 + 943) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 115), *((void *)a2 + 116));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 920);
    *((void *)this + 117) = *((void *)a2 + 117);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *((_WORD *)this + 472) = 0;
  *((_DWORD *)this + 240) = 0;
  *((unsigned char *)this + 964) = 0;
  *((_OWORD *)this + 61) = 0u;
  *((_DWORD *)this + 248) = 0;
  KB::Candidate::append((unsigned __int16 *)this, a3);
  return this;
}

void KB::Candidate::compute_string(KB::Candidate *this)
{
  uint64_t v2 = (unsigned __int16 *)((char *)this + 888);
  KB::String::clear((KB::Candidate *)((char *)this + 888));
  uint64_t v3 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v4 = (const KB::String *)*((void *)this + 1);
    uint64_t v5 = 240 * v3;
    do
    {
      KB::String::append(v2, v4);
      uint64_t v4 = (const KB::String *)((char *)v4 + 240);
      v5 -= 240;
    }
    while (v5);
  }
}

unsigned __int16 *KB::Candidate::append(unsigned __int16 *this, size_t *a2)
{
  if (!*(_WORD *)a2) {
    return this;
  }
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = this + 444;
  if (!this[444]) {
    KB::Candidate::compute_string((KB::Candidate *)this);
  }
  unint64_t v5 = *(void *)v3;
  if (*(void *)v3 != *(void *)(v3 + 16))
  {
    uint64_t v11 = *(void *)(v3 + 8);
    uint64_t v12 = a2;
LABEL_24:
    KB::Word::Word((KB::Word *)(v11 + 240 * v5), v12);
    ++*(void *)v3;
    goto LABEL_25;
  }
  unint64_t v6 = v5 + 1;
  unint64_t v7 = *(void *)(v3 + 8);
  if (v7 <= (unint64_t)a2 && v7 + 240 * v5 > (unint64_t)a2)
  {
    long long v8 = (char *)a2 - v7;
    if (v5 >= 0x100) {
      unint64_t v9 = v5 + (v5 >> 1);
    }
    else {
      unint64_t v9 = 2 * v5;
    }
    if (v9 <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = v9;
    }
    WTF::Vector<KB::Word,3ul>::reserveCapacity((void *)v3, v10);
    uint64_t v11 = *(void *)(v3 + 8);
    uint64_t v12 = (size_t *)&v8[v11];
    if (!v11) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (v5 >= 0x100) {
    unint64_t v13 = v5 + (v5 >> 1);
  }
  else {
    unint64_t v13 = 2 * v5;
  }
  if (v13 <= v6) {
    unint64_t v14 = v6;
  }
  else {
    unint64_t v14 = v13;
  }
  WTF::Vector<KB::Word,3ul>::reserveCapacity((void *)v3, v14);
  uint64_t v11 = *(void *)(v3 + 8);
  uint64_t v12 = a2;
  if (v11)
  {
LABEL_23:
    unint64_t v5 = *(void *)v3;
    goto LABEL_24;
  }
LABEL_25:
  this = KB::String::append(v4, (const KB::String *)a2);
  if (*(unsigned __int16 *)(v3 + 944) >= 0xFu)
  {
    this = *(unsigned __int16 **)(v3 + 952);
    if (this) {
      this = (unsigned __int16 *)MEMORY[0x1E4E7BC00](this, 0x1000C8077774924);
    }
  }
  *(_WORD *)(v3 + 944) = 0;
  return this;
}

char *KB::Candidate::string(KB::Candidate *this)
{
  unsigned int v1 = (char *)this + 888;
  if (!*((_WORD *)this + 444)) {
    KB::Candidate::compute_string(this);
  }
  return v1;
}

KB::Candidate *KB::Candidate::Candidate(KB::Candidate *this, const __CFDictionary *a2, const KB::LanguageModelContext *a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = (char *)this + 24;
  *((void *)this + 2) = 3;
  *(_OWORD *)((char *)this + 744) = xmmword_1E4154B40;
  *((void *)this + 95) = 0xFF8000003F800000;
  *((void *)this + 97) = 0;
  KB::LanguageModelContext::LanguageModelContext((KB::Candidate *)((char *)this + 784), a3);
  *((_DWORD *)this + 222) = 0x100000;
  *((_WORD *)this + 446) = 0;
  *((unsigned char *)this + 894) = 0;
  *((void *)this + 112) = 0;
  *((unsigned char *)this + 904) = 0;
  *((void *)this + 115) = 0;
  *((void *)this + 117) = 0;
  *((void *)this + 116) = 0;
  *((_WORD *)this + 472) = 0;
  *((_DWORD *)this + 240) = 0;
  *((unsigned char *)this + 964) = 0;
  *((void *)this + 122) = a2;
  if (a2)
  {
    CFRetain(a2);
    *((void *)this + 122) = a2;
  }
  *((void *)this + 123) = 0;
  *((_DWORD *)this + 248) = 0;
  return this;
}

void KB::Candidate::~Candidate(KB::Candidate *this)
{
  uint64_t v2 = (const void *)*((void *)this + 123);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 123) = 0;
  uint64_t v3 = (const void *)*((void *)this + 122);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 122) = 0;
  if (*((unsigned __int16 *)this + 472) >= 0xFu)
  {
    uint64_t v4 = *((void *)this + 119);
    if (v4) {
      MEMORY[0x1E4E7BC00](v4, 0x1000C8077774924);
    }
  }
  if (*((char *)this + 943) < 0) {
    operator delete(*((void **)this + 115));
  }
  unint64_t v5 = (void *)*((void *)this + 112);
  if (v5 && *((unsigned char *)this + 894) == 1) {
    free(v5);
  }
  uint64_t v12 = (void **)((char *)this + 864);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v12);
  language_modeling::v1::LinguisticContext::~LinguisticContext((KB::Candidate *)((char *)this + 856));
  language_modeling::v1::LinguisticContext::~LinguisticContext((KB::Candidate *)((char *)this + 848));
  unint64_t v6 = (void *)*((void *)this + 100);
  if (v6)
  {
    *((void *)this + 101) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 99);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  }
  if (*(void *)this)
  {
    long long v8 = (KB::Word *)*((void *)this + 1);
    uint64_t v9 = 240 * *(void *)this;
    do
    {
      KB::Word::~Word(v8);
      long long v8 = (KB::Word *)(v10 + 240);
      v9 -= 240;
    }
    while (v9);
    *(void *)this = 0;
  }
  uint64_t v11 = (char *)*((void *)this + 1);
  if ((char *)this + 24 != v11)
  {
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    free(v11);
  }
}

KB::Candidate *KB::Candidate::Candidate(KB::Candidate *this, const KB::String *a2, unsigned int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = (char *)this + 24;
  *((void *)this + 2) = 3;
  *(_OWORD *)((char *)this + 744) = xmmword_1E4154B40;
  *((void *)this + 95) = 0xFF8000003F800000;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((void *)this + 105) = 0;
  language_modeling::v1::LinguisticContext::LinguisticContext((KB::Candidate *)((char *)this + 848));
  language_modeling::v1::LinguisticContext::LinguisticContext((KB::Candidate *)((char *)this + 856));
  *((void *)this + 109) = 0;
  *((void *)this + 108) = 0;
  *((void *)this + 110) = 0;
  *((_DWORD *)this + 222) = 0x100000;
  *((_WORD *)this + 446) = 0;
  *((unsigned char *)this + 894) = 0;
  *((void *)this + 112) = 0;
  *((unsigned char *)this + 904) = 0;
  *((void *)this + 115) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((_WORD *)this + 472) = 0;
  *((_DWORD *)this + 240) = 0;
  *((unsigned char *)this + 964) = 0;
  *((_OWORD *)this + 61) = 0u;
  *((_DWORD *)this + 248) = 0;
  KB::word_ranges(a2, (const KB::String *)1, &v26);
  unint64_t v6 = (char *)*((void *)a2 + 1);
  if (!v6) {
    unint64_t v6 = (char *)a2 + 16;
  }
  *(void *)&long long v31 = v6;
  int v7 = *(unsigned __int16 *)a2;
  DWORD2(v31) = 0;
  HIDWORD(v31) = v7;
  LODWORD(v32) = 0;
  KB::String::iterator::initialize((uint64_t *)&v31);
  v25[0] = v32;
  long long v24 = v31;
  v25[1] = 0;
  long long v8 = v27;
  std::vector<unsigned int> __p = v26;
  if (v26 != v27)
  {
    uint64_t v9 = v26;
    do
    {
      unsigned int v10 = *(_DWORD *)v9;
      uint64_t v11 = *((int *)v9 + 1);
      while (v25[1] < v10)
      {
        KB::String::String((uint64_t)v28, v25[0]);
        KB::Word::Word((KB::Word *)&v31, (const KB::String *)v28, &kTITokenIDUNK, 0);
        KB::Candidate::append((unsigned __int16 *)this, (size_t *)&v31);
        KB::Word::~Word((KB::Word *)&v31);
        if (v30) {
          BOOL v12 = v29 == 1;
        }
        else {
          BOOL v12 = 0;
        }
        if (v12) {
          free(v30);
        }
        uint64_t v13 = *((void *)this + 1) + 240 * *(void *)this;
        *(_DWORD *)(v13 - 108) |= 0x4000000u;
        ++v25[1];
        KB::String::iterator::operator++((uint64_t *)&v24);
      }
      long long v22 = v24;
      uint64_t v23 = *(void *)v25;
      std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v22, v11);
      KB::String::String((KB::String *)v28, (const KB::String::iterator *)&v24, (const KB::String::iterator *)&v22);
      v21.lexicon_id = a3;
      v21.word_id = 0;
      KB::Word::Word((KB::Word *)&v31, (const KB::String *)v28, &v21, 0);
      KB::Candidate::append((unsigned __int16 *)this, (size_t *)&v31);
      KB::Word::~Word((KB::Word *)&v31);
      if (v30 && v29 == 1) {
        free(v30);
      }
      if ((v11 & 0x80000000) != 0)
      {
        do
        {
          --v25[1];
          KB::String::iterator::operator--((KB::String::iterator *)&v24);
        }
        while (!__CFADD__(v11++, 1));
      }
      else if (v11)
      {
        unint64_t v14 = v11 + 1;
        do
        {
          ++v25[1];
          KB::String::iterator::operator++((uint64_t *)&v24);
          --v14;
        }
        while (v14 > 1);
      }
      ++v9;
    }
    while (v9 != v8);
  }
  while (1)
  {
    int v17 = *(unsigned __int16 *)a2;
    dispatch_semaphore_t v18 = (char *)*((void *)a2 + 1);
    if (!v18) {
      dispatch_semaphore_t v18 = (char *)a2 + 16;
    }
    *(void *)&long long v31 = v18;
    DWORD2(v31) = v17;
    HIDWORD(v31) = v17;
    LODWORD(v32) = 0;
    KB::String::iterator::initialize((uint64_t *)&v31);
    if (DWORD2(v24) == DWORD2(v31)) {
      break;
    }
    KB::String::String((uint64_t)v28, v25[0]);
    KB::Word::Word((KB::Word *)&v31, (const KB::String *)v28, &kTITokenIDUNK, 0);
    KB::Candidate::append((unsigned __int16 *)this, (size_t *)&v31);
    KB::Word::~Word((KB::Word *)&v31);
    if (v30 && v29 == 1) {
      free(v30);
    }
    uint64_t v16 = *((void *)this + 1) + 240 * *(void *)this;
    *(_DWORD *)(v16 - 108) |= 0x4000000u;
    ++v25[1];
    KB::String::iterator::operator++((uint64_t *)&v24);
  }
  if (__p) {
    operator delete(__p);
  }
  return this;
}

void KB::Candidate::clear(KB::Candidate *this)
{
  WTF::Vector<KB::Word,3ul>::shrinkCapacity(this);
  KB::String::clear((KB::Candidate *)((char *)this + 888));
  if (*((unsigned __int16 *)this + 472) >= 0xFu)
  {
    uint64_t v2 = *((void *)this + 119);
    if (v2) {
      MEMORY[0x1E4E7BC00](v2, 0x1000C8077774924);
    }
  }
  *((_WORD *)this + 472) = 0;
}

std::string *KB::Candidate::append(KB::Candidate *this, const KB::Candidate *a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = (size_t *)*((void *)a2 + 1);
    uint64_t v5 = 240 * *(void *)a2;
    do
    {
      KB::Candidate::append((unsigned __int16 *)this, v4);
      v4 += 30;
      v5 -= 240;
    }
    while (v5);
  }
  int v6 = *((char *)a2 + 943);
  if (v6 >= 0) {
    int v7 = (char *)a2 + 920;
  }
  else {
    int v7 = (const std::string::value_type *)*((void *)a2 + 115);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *((unsigned __int8 *)a2 + 943);
  }
  else {
    std::string::size_type v8 = *((void *)a2 + 116);
  }

  return std::string::append((std::string *)((char *)this + 920), v7, v8);
}

void KB::Candidate::pop_last_word(KB::Candidate *this)
{
  uint64_t v2 = *(void *)this - 1;
  KB::Word::~Word((KB::Word *)(*((void *)this + 1) + 240 * v2));
  *(void *)this = v2;
  KB::String::clear((KB::Candidate *)((char *)this + 888));
  if (*((unsigned __int16 *)this + 472) >= 0xFu)
  {
    uint64_t v3 = *((void *)this + 119);
    if (v3) {
      MEMORY[0x1E4E7BC00](v3, 0x1000C8077774924);
    }
  }
  *((_WORD *)this + 472) = 0;
}

uint64_t KB::Candidate::length(KB::Candidate *this)
{
  if (!*((_WORD *)this + 444)) {
    KB::Candidate::compute_string(this);
  }
  uint64_t result = *((unsigned __int16 *)this + 446);
  if (!*((_WORD *)this + 446))
  {
    KB::String::compute_length((unsigned __int16 *)this + 444);
    return *((unsigned __int16 *)this + 446);
  }
  return result;
}

void KB::Candidate::capitalized_string(KB::Candidate *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (*(void *)this)
  {
    uint64_t v3 = (KB::Word *)*((void *)this + 1);
    uint64_t v4 = 240 * *(void *)this;
    do
    {
      KB::Word::capitalized_string(v3, (uint64_t)v6);
      KB::String::append((unsigned __int16 *)a2, (const KB::String *)v6);
      if (v7) {
        BOOL v5 = v6[6] == 1;
      }
      else {
        BOOL v5 = 0;
      }
      if (v5) {
        free(v7);
      }
      uint64_t v3 = (KB::Word *)((char *)v3 + 240);
      v4 -= 240;
    }
    while (v4);
  }
}

BOOL KB::Candidate::sort_key(KB::Candidate *this, uint64_t a2)
{
  uint64_t v2 = (unsigned __int16 *)((char *)this + 944);
  if (*((_WORD *)this + 472)) {
    return (BOOL)v2;
  }
  if (!*((_WORD *)this + 444)) {
    KB::Candidate::compute_string(this);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v5 + 48))(&v9);
    if (*v2 >= 0xFu)
    {
      uint64_t v6 = *((void *)this + 119);
      if (v6) {
        MEMORY[0x1E4E7BC00](v6, 0x1000C8077774924);
      }
    }
    *(_OWORD *)uint64_t v2 = v9;
    return (BOOL)v2;
  }
  uint64_t v8 = (KB::Candidate *)std::__throw_bad_function_call[abi:nn180100]();
  return KB::Candidate::has_custom_capitalization(v8);
}

BOOL KB::Candidate::has_custom_capitalization(KB::Candidate *this)
{
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v1 = 240 * *(void *)this - 240;
  uint64_t v2 = (int *)(*((void *)this + 1) + 120);
  do
  {
    int v3 = *v2;
    v2 += 60;
    BOOL result = v3 != 0;
    if (v3) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v1 == 0;
    }
    v1 -= 240;
  }
  while (!v5);
  return result;
}

void KB::Candidate::custom_capitalization(std::vector<unsigned int>::size_type *this@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<unsigned int>::reserve(a2, *this);
  if (*this)
  {
    std::vector<unsigned int>::size_type v4 = this[1];
    std::vector<unsigned int>::size_type v5 = v4 + 240 * *this;
    std::vector<unsigned int>::pointer end = (char *)a2->__end_;
    value = a2->__end_cap_.__value_;
    std::vector<unsigned int>::pointer begin = a2->__begin_;
    do
    {
      unsigned int v9 = *(_DWORD *)(v4 + 120);
      if (end >= (char *)value)
      {
        uint64_t v11 = (end - (char *)begin) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          abort();
        }
        if (((char *)value - (char *)begin) >> 1 > v12) {
          unint64_t v12 = ((char *)value - (char *)begin) >> 1;
        }
        if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        unint64_t v15 = (unsigned int *)(v13 + 4 * v11);
        *unint64_t v15 = v9;
        unsigned int v10 = v15 + 1;
        while (end != (char *)begin)
        {
          unsigned int v16 = *((_DWORD *)end - 1);
          end -= 4;
          *--unint64_t v15 = v16;
        }
        value = (unsigned int *)(v13 + 4 * v14);
        a2->__begin_ = v15;
        a2->__end_ = v10;
        a2->__end_cap_.__value_ = value;
        if (begin) {
          operator delete(begin);
        }
        std::vector<unsigned int>::pointer begin = v15;
      }
      else
      {
        *(_DWORD *)std::vector<unsigned int>::pointer end = v9;
        unsigned int v10 = (unsigned int *)(end + 4);
      }
      a2->__end_ = v10;
      v4 += 240;
      std::vector<unsigned int>::pointer end = (char *)v10;
    }
    while (v4 != v5);
  }
}

void *KB::Candidate::clear_custom_capitalization(void *this)
{
  if (*this)
  {
    uint64_t v1 = (_DWORD *)(this[1] + 104);
    uint64_t v2 = 240 * *this;
    do
    {
      v1[4] = 0;
      *v1 &= ~1u;
      v1 += 60;
      v2 -= 240;
    }
    while (v2);
  }
  return this;
}

void KB::Candidate::commit_custom_capitalization(KB::Candidate *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(void *)this)
  {
    uint64_t v2 = (KB::Word *)*((void *)this + 1);
    uint64_t v3 = 240 * *(void *)this;
    do
    {
      if (*((_DWORD *)v2 + 30))
      {
        KB::Word::capitalized_string(v2, (uint64_t)v5);
        KB::String::operator=(v2, (KB::String *)v5);
        if (v6) {
          BOOL v4 = v5[6] == 1;
        }
        else {
          BOOL v4 = 0;
        }
        if (v4) {
          free(v6);
        }
      }
      uint64_t v2 = (KB::Word *)((char *)v2 + 240);
      v3 -= 240;
    }
    while (v3);
  }
  KB::String::clear((KB::Candidate *)((char *)this + 888));
}

float KB::Candidate::partial_prob(KB::Candidate *this)
{
  if (!*(void *)this) {
    return 1.0;
  }
  uint64_t v1 = 240 * *(void *)this;
  uint64_t v2 = (float *)(*((void *)this + 1) + 48);
  float result = 1.0;
  do
  {
    float v4 = *v2;
    v2 += 60;
    float result = result * v4;
    v1 -= 240;
  }
  while (v1);
  return result;
}

float KB::Candidate::linguistic_likelihood(KB::Candidate *this)
{
  if (!*(void *)this) {
    return 1.0;
  }
  uint64_t v1 = 240 * *(void *)this;
  uint64_t v2 = (float *)(*((void *)this + 1) + 52);
  float result = 1.0;
  do
  {
    float v4 = *v2;
    v2 += 60;
    float result = result * v4;
    v1 -= 240;
  }
  while (v1);
  return result;
}

float KB::Candidate::static_linguistic_likelihood(KB::Candidate *this)
{
  if (!*(void *)this) {
    return 1.0;
  }
  uint64_t v1 = 240 * *(void *)this;
  uint64_t v2 = (float *)(*((void *)this + 1) + 56);
  float result = 1.0;
  do
  {
    float v4 = *v2;
    v2 += 60;
    float result = result * v4;
    v1 -= 240;
  }
  while (v1);
  return result;
}

float KB::Candidate::stem_suffix_correction_factor(KB::Candidate *this)
{
  if (!*(void *)this) {
    return 1.0;
  }
  uint64_t v1 = 240 * *(void *)this;
  uint64_t v2 = (float *)(*((void *)this + 1) + 100);
  float result = 1.0;
  do
  {
    float v4 = *v2;
    v2 += 60;
    float result = result * v4;
    v1 -= 240;
  }
  while (v1);
  return result;
}

BOOL KB::Candidate::should_suggest(KB::Candidate *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v1 = *((void *)this + 1);
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = 240 * v2;
    while (1)
    {
      int v5 = *(_DWORD *)(v3 + 104);
      if ((v5 & 0x800012) != 0) {
        break;
      }
      int v6 = v5 & 0x2042000;
      if ((*(_DWORD *)(v3 + 104) & 0x2080) == 0x80 || v6 == 0x2000000) {
        break;
      }
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v1 + 240 * v2;
        return v3 == v1 + 240 * v2;
      }
    }
  }
  else
  {
    uint64_t v3 = *((void *)this + 1);
  }
  return v3 == v1 + 240 * v2;
}

BOOL KB::Candidate::should_predict(KB::Candidate *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = v1 + 240 * *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = 240 * *(void *)this;
    while ((*(_DWORD *)(v1 + 104) & 0x800000) == 0 && (*(_DWORD *)(v1 + 104) & 0x2004) != 4)
    {
      v1 += 240;
      v3 -= 240;
      if (!v3)
      {
        uint64_t v1 = v2;
        return v1 == v2;
      }
    }
  }
  return v1 == v2;
}

uint64_t KB::Candidate::num_words_matching_input(void *a1, void *a2, uint64_t a3)
{
  unsigned int v6 = 0;
  do
  {
    uint64_t v7 = v6;
    if (*a2 <= (unint64_t)v6) {
      break;
    }
    if (*a1 <= (unint64_t)v6) {
      break;
    }
    char v8 = KB::Word::matches_input((KB::String *)(a1[1] + 240 * v6), (const KB::String *)(a2[1] + 240 * v6), a3);
    unsigned int v6 = v7 + 1;
  }
  while ((v8 & 1) != 0);
  return v7;
}

uint64_t KB::Candidate::num_words_preserving_input(void *a1, void *a2, uint64_t a3)
{
  unsigned int v6 = 0;
  do
  {
    uint64_t v7 = v6;
    if (*a2 <= (unint64_t)v6) {
      break;
    }
    if (*a1 <= (unint64_t)v6) {
      break;
    }
    char v8 = KB::Word::preserves_input((KB::String *)(a1[1] + 240 * v6), (KB::String *)(a2[1] + 240 * v6), a3);
    unsigned int v6 = v7 + 1;
  }
  while ((v8 & 1) != 0);
  return v7;
}

uint64_t KB::Candidate::space_count(KB::Candidate *this)
{
  if (!*(void *)this) {
    return 0;
  }
  LODWORD(v1) = 0;
  uint64_t v2 = 240 * *(void *)this;
  uint64_t v3 = *((void *)this + 1) + 16;
  do
  {
    if (*(void *)(v3 - 8)) {
      uint64_t v4 = *(const char **)(v3 - 8);
    }
    else {
      uint64_t v4 = (const char *)v3;
    }
    if (!strcmp(v4, " ")) {
      uint64_t v1 = (v1 + 1);
    }
    else {
      uint64_t v1 = v1;
    }
    v3 += 240;
    v2 -= 240;
  }
  while (v2);
  return v1;
}

BOOL KB::Candidate::candidate_is_capitalization(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while (!*(_DWORD *)(v3 + 120) || (*(_DWORD *)(v3 + 104) & 0x100000) != 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::candidate_has_sort_key_preserving_insertion(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 106) & 0x20) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::is_spell_correction(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 105) & 0x80) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_static(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 106) & 4) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_primary_static(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 106) & 4) == 0 || *(unsigned char *)(v3 + 192))
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_secondary_static(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 106) & 4) == 0 || !*(unsigned char *)(v3 + 192))
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_dynamic(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(_DWORD *)(v3 + 104) & 0x80032000) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_primary_dynamic(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(_DWORD *)(v3 + 104) & 0x80032000) == 0 || *(unsigned char *)(v3 + 192) != 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_secondary_dynamic(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(_DWORD *)(v3 + 104) & 0x80032000) == 0 || *(unsigned char *)(v3 + 192) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_learned(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 105) & 0x20) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_dynamic_contribution(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 107) & 1) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_secondary_lexicon_contribution(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while (!*(unsigned char *)(v3 + 192))
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_user_dictionary_word(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 106) & 1) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_recency_contribution(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 107) & 4) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_novel_learned_word(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(_DWORD *)(v3 + 104) & 0x2040000) != 0x2000000)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_error_correction_type(KB::Candidate *this, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v5 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  uint64_t v6 = v4 + 240 * a2;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  unint64_t v12 = ___ZNK2KB9Candidate25has_error_correction_typeEjm_block_invoke;
  unint64_t v13 = &__block_descriptor_tmp_53;
  uint64_t v14 = a3;
  if (v5 != a2)
  {
    uint64_t v8 = v4 + 240 * v5;
    uint64_t v9 = 240 * v5 - 240 * a2;
    while ((((uint64_t (*)(void *, uint64_t))v12)(v11, v6) & 1) == 0)
    {
      v6 += 240;
      v9 -= 240;
      if (!v9)
      {
        uint64_t v6 = v8;
        break;
      }
    }
    uint64_t v3 = *(void *)this;
    uint64_t v4 = *((void *)this + 1);
  }
  return v6 != v4 + 240 * v3;
}

BOOL ___ZNK2KB9Candidate25has_error_correction_typeEjm_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(void *)(a2 + 152) & *(void *)(a1 + 32)) != 0;
}

BOOL KB::Candidate::has_from_supplemental_lexicon(KB::Candidate *this, unsigned int a2)
{
  if (*(void *)this == a2) {
    return 0;
  }
  uint64_t v3 = -240 * a2 + 240 * *(void *)this - 240;
  uint64_t v4 = (uint64_t *)(240 * a2 + *((void *)this + 1) + 224);
  do
  {
    uint64_t v5 = *v4;
    v4 += 30;
    BOOL result = v5 != 0;
    if (v5) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v3 == 0;
    }
    v3 -= 240;
  }
  while (!v6);
  return result;
}

uint64_t KB::Candidate::is_phrase_from_supplemental_lexicon(KB::Candidate *this)
{
  unint64_t v1 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 1);
  if (!*(void *)(v2 + 224)) {
    return 0;
  }
  if (v1 < 2) {
    return 1;
  }
  unint64_t v3 = 1;
  while (1)
  {
    if ((*(unsigned char *)(v2 + 240 * v3 + 135) & 4) == 0)
    {
      uint64_t v4 = *(void *)(v2 + 240 * v3 + 224);
      if (!v4) {
        return 0;
      }
      uint64_t v5 = v2 + 240 * (v3 - 1);
      if (v4 != *(void *)(v5 + 224)) {
        return 0;
      }
      BOOL v6 = (void *)(v5 + 200);
      uint64_t v7 = (void *)(v2 + 240 * v3 + 216);
LABEL_9:
      uint64_t v7 = (void *)*v7;
      if (v7) {
        break;
      }
    }
    unint64_t v3 = (v3 + 1);
    uint64_t result = 1;
    if (v1 <= v3) {
      return result;
    }
  }
  int8x8_t v8 = (int8x8_t)v6[1];
  if (!*(void *)&v8) {
    return 0;
  }
  unint64_t v9 = v7[2];
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = v7[2];
    if (v9 >= *(void *)&v8) {
      unint64_t v11 = v9 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v8 - 1) & v9;
  }
  uint64_t result = *(void *)(*v6 + 8 * v11);
  if (result)
  {
    for (uint64_t result = *(void *)result; result; uint64_t result = *(void *)result)
    {
      unint64_t v13 = *(void *)(result + 8);
      if (v9 == v13)
      {
        if (*(void *)(result + 16) == v9) {
          goto LABEL_9;
        }
      }
      else
      {
        if (v10.u32[0] > 1uLL)
        {
          if (v13 >= *(void *)&v8) {
            v13 %= *(void *)&v8;
          }
        }
        else
        {
          v13 &= *(void *)&v8 - 1;
        }
        if (v13 != v11) {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL KB::Candidate::has_from_named_entities(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 105) & 1) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_from_user_dictionary(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 106) & 1) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_from_address_book(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 106) & 2) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_from_app_names(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(_DWORD *)(v3 + 104) & 0x80000000) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_from_transient_lexicon(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(_DWORD *)(v3 + 104) & 0x80020100) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_oov(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 106) & 0x80) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_persisted_custom_word(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 107) & 2) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_offensive_word(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 107) & 0x10) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_vulgar_word(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 107) & 8) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::every_vulgar_word_is_allowlisted(void *a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (*a1 == a4) {
      return 1;
    }
    uint64_t v6 = a1[1] + 240 * a4 + 136;
    __asm { FMOV            V9.2S, #1.0 }
    while (1)
    {
      *(_DWORD *)int buf = 0x100000;
      *(_WORD *)uint64_t v32 = 0;
      v32[2] = 0;
      *(void *)&void v32[4] = 0;
      char v33 = 0;
      v34[0] = 0;
      uint64_t v35 = 0x3F80000000000000;
      int v36 = 1065353216;
      int v37 = 0x100000;
      __int16 v38 = 0;
      char v39 = 0;
      uint64_t v40 = 0;
      char v41 = 0;
      *(void *)&long long v42 = _D9;
      DWORD2(v42) = 0;
      *((void *)&v45 + 1) = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      LODWORD(v45) = 0;
      int v46 = 0x100000;
      __int16 v47 = 0;
      char v48 = 0;
      uint64_t v49 = 0;
      char v50 = 0;
      char v51 = 0;
      memset(v52, 0, sizeof(v52));
      int v53 = 1065353216;
      int v12 = *(_DWORD *)(v6 - 32);
      KB::Word::lowercased_string((KB::Word *)(v6 - 136), (KB::String *)&v29);
      unint64_t v13 = std::__hash_table<std::__hash_value_type<KB::String,unsigned long>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,unsigned long>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,unsigned long>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,unsigned long>>>::find<KB::String>(a3, &v29);
      if (*((void *)&v29 + 1) && BYTE6(v29) == 1) {
        free(*((void **)&v29 + 1));
      }
      if (v13)
      {
        KB::Word::lowercased_string((KB::Word *)(v6 - 136), (KB::String *)&v29);
        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        uint64_t v14 = std::__hash_table<std::__hash_value_type<KB::String,KB::Word>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Word>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Word>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Word>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>((uint64_t)a3, &v29, (KB::String **)&v27);
        KB::String::operator=((KB::String *)buf, (KB::String *)(v14 + 6));
        KB::ByteString::operator=(v34, (unsigned __int16 *)v14 + 40);
        uint64_t v35 = v14[12];
        int v36 = *((_DWORD *)v14 + 26);
        KB::String::operator=((KB::String *)&v37, (KB::String *)(v14 + 14));
        long long v15 = *((_OWORD *)v14 + 10);
        long long v42 = *((_OWORD *)v14 + 9);
        long long v43 = v15;
        long long v16 = *((_OWORD *)v14 + 12);
        long long v44 = *((_OWORD *)v14 + 11);
        long long v45 = v16;
        KB::String::operator=((KB::String *)&v46, (KB::String *)(v14 + 26));
        char v51 = *((unsigned char *)v14 + 240);
        if (buf != (uint8_t *)(v14 + 6))
        {
          int v53 = *((_DWORD *)v14 + 70);
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>(v52, (void *)v14[33]);
        }
        if (*((void *)&v29 + 1) && BYTE6(v29) == 1) {
          free(*((void **)&v29 + 1));
        }
        if ((v12 & 0x8000000) != 0 && (*(unsigned char *)(v6 - 29) & 0x40) != 0 || (BYTE11(v42) & 0x40) != 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((v12 & 0x8000000) == 0) {
          goto LABEL_31;
        }
        if ((*(unsigned char *)(v6 - 29) & 0x40) != 0) {
          goto LABEL_37;
        }
      }
      uint64_t v17 = *(void *)(a2 + 8);
      if (!v17)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v29) = 136315138;
          *(void *)((char *)&v29 + 4) = "every_vulgar_word_is_allowlisted";
          _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s  Cannot read vulgar word usage database because current app ID is NULL", (uint8_t *)&v29, 0xCu);
        }
LABEL_37:
        KB::Word::~Word((KB::Word *)buf);
        return 0;
      }
      memset(&v27, 0, sizeof(v27));
      std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(&v27, *(long long **)(a2 + 16), *(long long **)(a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3));
      dispatch_semaphore_t v18 = (int *)&v44 + 2;
      if ((v12 & 0x8000000) != 0) {
        dispatch_semaphore_t v18 = (int *)v6;
      }
      char v19 = (char *)TILocaleIdentifierForLexiconID(*v18);
      KB::Word::capitalized_string((KB::Word *)(v6 - 136), (uint64_t)&v29);
      char v20 = (char *)*((void *)&v29 + 1);
      if (!*((void *)&v29 + 1)) {
        char v20 = (char *)&v30;
      }
      if ((_WORD)v29) {
        TITokenID v21 = v20;
      }
      else {
        TITokenID v21 = "";
      }
      memset(&v26, 0, sizeof(v26));
      std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(&v26, (long long *)v27.__r_.__value_.__l.__data_, (long long *)v27.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27.__r_.__value_.__l.__size_ - v27.__r_.__value_.__r.__words[0]) >> 3));
      BOOL can_autocorrect = TI::VulgarWordUsageDatabaseWrapper::can_autocorrect(a2, v21, v17, &v26, v19);
      size_t v28 = &v26;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v28);
      if (*((void *)&v29 + 1))
      {
        if (BYTE6(v29) == 1) {
          free(*((void **)&v29 + 1));
        }
      }
      *(void *)&long long v29 = &v27;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v29);
      if (!can_autocorrect) {
        goto LABEL_37;
      }
LABEL_31:
      KB::Word::~Word((KB::Word *)buf);
      uint64_t v23 = v6 + 104;
      v6 += 240;
      if (v23 == a1[1] + 240 * *a1) {
        return 1;
      }
    }
  }
  BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)int buf = 136315138;
    *(void *)uint64_t v32 = "every_vulgar_word_is_allowlisted";
    _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s  Cannot read vulgar word usage database because it has not been provided", buf, 0xCu);
    return 0;
  }
  return result;
}

BOOL KB::Candidate::every_vulgar_word_is_allowlisted_somewhere(void *a1, TI::VulgarWordUsageDatabaseWrapper *a2, void *a3, unsigned int a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (*a1 == a4) {
      return 1;
    }
    uint64_t v6 = a1[1] + 240 * a4 + 136;
    __asm { FMOV            V9.2S, #1.0 }
    while (1)
    {
      *(_DWORD *)int buf = 0x100000;
      *(_WORD *)long long v31 = 0;
      v31[2] = 0;
      *(void *)&v31[4] = 0;
      char v32 = 0;
      v33[0] = 0;
      uint64_t v34 = 0x3F80000000000000;
      int v35 = 1065353216;
      int v36 = 0x100000;
      __int16 v37 = 0;
      char v38 = 0;
      uint64_t v39 = 0;
      char v40 = 0;
      *(void *)&long long v41 = _D9;
      DWORD2(v41) = 0;
      *((void *)&v44 + 1) = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      LODWORD(v44) = 0;
      int v45 = 0x100000;
      __int16 v46 = 0;
      char v47 = 0;
      uint64_t v48 = 0;
      char v49 = 0;
      char v50 = 0;
      memset(v51, 0, sizeof(v51));
      int v52 = 1065353216;
      int v12 = *(_DWORD *)(v6 - 32);
      KB::Word::lowercased_string((KB::Word *)(v6 - 136), (KB::String *)&v27);
      unint64_t v13 = std::__hash_table<std::__hash_value_type<KB::String,unsigned long>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,unsigned long>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,unsigned long>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,unsigned long>>>::find<KB::String>(a3, &v27);
      if (v28 && BYTE6(v27) == 1) {
        free(v28);
      }
      if (v13)
      {
        KB::Word::lowercased_string((KB::Word *)(v6 - 136), (KB::String *)&v27);
        std::string v26 = (KB::String *)&v27;
        uint64_t v14 = std::__hash_table<std::__hash_value_type<KB::String,KB::Word>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Word>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Word>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Word>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>((uint64_t)a3, &v27, &v26);
        KB::String::operator=((KB::String *)buf, (KB::String *)(v14 + 6));
        KB::ByteString::operator=(v33, (unsigned __int16 *)v14 + 40);
        uint64_t v34 = v14[12];
        int v35 = *((_DWORD *)v14 + 26);
        KB::String::operator=((KB::String *)&v36, (KB::String *)(v14 + 14));
        long long v15 = *((_OWORD *)v14 + 10);
        long long v41 = *((_OWORD *)v14 + 9);
        long long v42 = v15;
        long long v16 = *((_OWORD *)v14 + 12);
        long long v43 = *((_OWORD *)v14 + 11);
        long long v44 = v16;
        KB::String::operator=((KB::String *)&v45, (KB::String *)(v14 + 26));
        char v50 = *((unsigned char *)v14 + 240);
        if (buf != (uint8_t *)(v14 + 6))
        {
          int v52 = *((_DWORD *)v14 + 70);
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>(v51, (void *)v14[33]);
        }
        if (v28 && BYTE6(v27) == 1) {
          free(v28);
        }
        if ((v12 & 0x8000000) == 0)
        {
          uint64_t v17 = (int *)&v43 + 2;
          if ((BYTE11(v41) & 0x40) != 0) {
            goto LABEL_34;
          }
          goto LABEL_21;
        }
        if ((*(unsigned char *)(v6 - 29) & 0x40) != 0) {
          goto LABEL_34;
        }
        char v18 = BYTE11(v41);
      }
      else
      {
        if ((v12 & 0x8000000) == 0) {
          goto LABEL_30;
        }
        char v18 = *(unsigned char *)(v6 - 29);
      }
      uint64_t v17 = (int *)v6;
      if ((v18 & 0x40) != 0) {
        goto LABEL_34;
      }
LABEL_21:
      char v19 = (char *)TILocaleIdentifierForLexiconID(*v17);
      KB::Word::capitalized_string((KB::Word *)(v6 - 136), (uint64_t)&v27);
      char v20 = (char *)v28;
      if (!v28) {
        char v20 = (char *)&v29;
      }
      if ((_WORD)v27) {
        TITokenID v21 = v20;
      }
      else {
        TITokenID v21 = "";
      }
      BOOL can_autocorrect_somewhere = TI::VulgarWordUsageDatabaseWrapper::can_autocorrect_somewhere(a2, v21, v19);
      if (v28)
      {
        if (BYTE6(v27) == 1) {
          free(v28);
        }
      }
      if (!can_autocorrect_somewhere)
      {
LABEL_34:
        KB::Word::~Word((KB::Word *)buf);
        return 0;
      }
LABEL_30:
      KB::Word::~Word((KB::Word *)buf);
      uint64_t v23 = v6 + 104;
      v6 += 240;
      if (v23 == a1[1] + 240 * *a1) {
        return 1;
      }
    }
  }
  BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)int buf = 136315138;
    *(void *)long long v31 = "every_vulgar_word_is_allowlisted_somewhere";
    _os_log_error_impl(&dword_1E3F0E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s  Cannot read vulgar word usage database because it has not been provided", buf, 0xCu);
    return 0;
  }
  return result;
}

BOOL KB::Candidate::has_sensitive_word(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(unsigned char *)(v3 + 107) & 0x20) == 0)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

BOOL KB::Candidate::has_no_suggest_entries(KB::Candidate *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 240 * a2;
  if (*(void *)this != a2)
  {
    uint64_t v4 = 240 * *(void *)this - 240 * a2;
    while ((*(_DWORD *)(v3 + 104) & 0x40000002) != 2)
    {
      v3 += 240;
      v4 -= 240;
      if (!v4)
      {
        uint64_t v3 = v2 + 240 * *(void *)this;
        return v3 != v2 + 240 * *(void *)this;
      }
    }
  }
  return v3 != v2 + 240 * *(void *)this;
}

uint64_t KB::Candidate::has_part_of_hyphenated_word(KB::Candidate *this, unsigned int a2)
{
  if (*(void *)this == a2) {
    return 0;
  }
  uint64_t v3 = -240 * a2 + 240 * *(void *)this - 240;
  uint64_t v4 = (unsigned int *)(240 * a2 + *((void *)this + 1) + 104);
  do
  {
    unsigned int v5 = *v4;
    v4 += 60;
    uint64_t result = (v5 >> 4) & 1;
    if ((v5 & 0x10) != 0) {
      break;
    }
    uint64_t v6 = v3;
    v3 -= 240;
  }
  while (v6);
  return result;
}

CFStringRef KB::Candidate::named_entity_timestamp(KB::Candidate *this)
{
  if (*(void *)this)
  {
    uint64_t v1 = *((void *)this + 1);
    for (uint64_t i = 240 * *(void *)this; i; i -= 240)
    {
      if (*(unsigned char *)(v1 + 105))
      {
        unint64_t v3 = TILocaleIdentifierForLexiconID(*(_DWORD *)(v1 + 136));
        if (TITransientLexiconManagerGetNamedEntitiesForLocale(v3))
        {
          KB::cf_string_impl<KB::String>(&v9, (unsigned __int16 *)v1);
          CFStringRef v4 = v9;
          LXLexiconGetFirstTokenIDForString();
          if (v4) {
            CFRelease(v4);
          }
          uint64_t v5 = LXLexiconCopyEntryForTokenID();
          if (v5)
          {
            uint64_t v6 = (const void *)v5;
            CFStringRef v9 = 0;
            if (LXEntryGetTimestamp())
            {
              CFStringRef v7 = v9;
              CFRelease(v6);
              return v7;
            }
            CFRelease(v6);
          }
        }
      }
      v1 += 240;
    }
  }
  return 0;
}

uint64_t KB::Candidate::length_to_word(KB::Candidate *this, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = 0;
  LODWORD(v4) = 0;
  uint64_t v5 = 240 * a2;
  do
  {
    uint64_t v6 = *((void *)this + 1) + v3;
    int v7 = *(unsigned __int16 *)(v6 + 4);
    if (!*(_WORD *)(v6 + 4))
    {
      KB::String::compute_length((unsigned __int16 *)(*((void *)this + 1) + v3));
      int v7 = *(unsigned __int16 *)(v6 + 4);
    }
    uint64_t v4 = (v4 + v7);
    v3 += 240;
  }
  while (v5 != v3);
  return v4;
}

unint64_t KB::Candidate::index_of_word_containing_position(KB::Candidate *this, unsigned int a2)
{
  if (!*(void *)this) {
    return 0;
  }
  unint64_t result = 0;
  unsigned int v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *((void *)this + 1) + 240 * result;
    int v8 = *(unsigned __int16 *)(v7 + 4);
    if (!*(_WORD *)(v7 + 4))
    {
      KB::String::compute_length((unsigned __int16 *)(*((void *)this + 1) + 240 * result));
      int v8 = *(unsigned __int16 *)(v7 + 4);
    }
    v5 += v8;
    if (v5 > a2) {
      break;
    }
    unint64_t result = (v6 + 1);
    unint64_t v6 = result;
    if (*(void *)this <= result) {
      return result;
    }
  }
  return v6;
}

BOOL KB::Candidate::does_word_begin_at_position(KB::Candidate *this, int a2)
{
  if (!a2) {
    return 1;
  }
  if (!*(void *)this) {
    return 0;
  }
  int v3 = 0;
  uint64_t v4 = (unsigned __int16 *)*((void *)this + 1);
  uint64_t v5 = 240 * *(void *)this - 240;
  do
  {
    int v6 = v4[2];
    if (!v4[2])
    {
      KB::String::compute_length(v4);
      int v6 = v4[2];
    }
    v3 += v6;
    BOOL result = v3 == a2;
    BOOL v8 = v3 == a2 || v5 == 0;
    v5 -= 240;
    v4 += 120;
  }
  while (!v8);
  return result;
}

void KB::Candidate::append_debug_data(KB::Candidate *this, __CFString *a2, int a3, const KB::String *a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  int v48 = 0x100000;
  __int16 v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  if (*(void *)this) {
    uint64_t v8 = *(void *)(*((void *)this + 1) + 240 * *(void *)this - 88);
  }
  else {
    uint64_t v8 = 0;
  }
  CFStringRef v9 = (const char *)*((void *)a4 + 1);
  uint8x8_t v10 = (char *)a4 + 16;
  if (!v9) {
    CFStringRef v9 = (char *)a4 + 16;
  }
  if (*(_WORD *)a4) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = "";
  }
  if (a3)
  {
    long long v42 = (char *)a4 + 16;
    KB::Candidate::capitalized_string(this, (uint64_t)&v47);
    CGSize size = (const char *)v47.__r_.__value_.__l.__size_;
    if (!v47.__r_.__value_.__l.__size_) {
      CGSize size = &v47.__r_.__value_.__s.__data_[16];
    }
    if (LOWORD(v47.__r_.__value_.__l.__data_)) {
      unint64_t v13 = size;
    }
    else {
      unint64_t v13 = "";
    }
    float v14 = expf(*((float *)this + 186));
    double v15 = logf(v14);
    double v16 = *((float *)this + 190);
    double v17 = *((float *)this + 188);
    double v18 = *((float *)this + 189);
    double v19 = *((float *)this + 187);
    if (*((unsigned char *)this + 960)) {
      char v20 = "completion";
    }
    else {
      char v20 = "";
    }
    uint64_t v21 = *((unsigned int *)this + 248);
    if (v21 > 6) {
      long long v22 = "Unknown";
    }
    else {
      long long v22 = off_1E6E2E4A0[v21];
    }
    KB::String::String((KB::String *)v43, v22);
    uint64_t v29 = (const char *)v45;
    if (!v45) {
      uint64_t v29 = v46;
    }
    if (v43[0]) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = "";
    }
    KB::String::append_format((KB::String *)&v48, "%s[%s] ln(omega) %.3f = [%.3f*(W %.3f + T %.3f) + G %.3f] %s %lu %s\n", v11, v13, v15, v16, v17, v18, v19, v20, v8, v30);
    if (v45 && v44 == 1) {
      free(v45);
    }
    long long v31 = (void *)v47.__r_.__value_.__l.__size_;
    uint8x8_t v10 = v42;
    if (!v47.__r_.__value_.__l.__size_) {
      goto LABEL_50;
    }
LABEL_48:
    if (v47.__r_.__value_.__s.__data_[6] == 1) {
      free(v31);
    }
    goto LABEL_50;
  }
  KB::Candidate::capitalized_string(this, (uint64_t)&v47);
  uint64_t v23 = (const char *)v47.__r_.__value_.__l.__size_;
  if (!v47.__r_.__value_.__l.__size_) {
    uint64_t v23 = &v47.__r_.__value_.__s.__data_[16];
  }
  if (LOWORD(v47.__r_.__value_.__l.__data_)) {
    long long v24 = v23;
  }
  else {
    long long v24 = "";
  }
  float v25 = expf(*((float *)this + 186));
  double v26 = logf(v25);
  uint64_t v27 = *((unsigned int *)this + 248);
  if (v27 > 6) {
    size_t v28 = "Unknown";
  }
  else {
    size_t v28 = off_1E6E2E4A0[v27];
  }
  KB::String::String((KB::String *)v43, v28);
  char v32 = (const char *)v45;
  if (!v45) {
    char v32 = v46;
  }
  if (v43[0]) {
    char v33 = v32;
  }
  else {
    char v33 = "";
  }
  KB::String::append_format((KB::String *)&v48, "%s[%s] ln(omega) %.3f %lu %s\n", v11, v24, v26, v8, v33);
  if (v45 && v44 == 1) {
    free(v45);
  }
  long long v31 = (void *)v47.__r_.__value_.__l.__size_;
  if (v47.__r_.__value_.__l.__size_) {
    goto LABEL_48;
  }
LABEL_50:
  uint64_t v34 = (const char *)v51;
  if (!v51) {
    uint64_t v34 = &v52;
  }
  if ((_WORD)v48) {
    int v35 = v34;
  }
  else {
    int v35 = "";
  }
  CFStringAppendCString(a2, v35, 0x8000100u);
  if (a3)
  {
    if (*(void *)this)
    {
      int v36 = (KB::Word *)*((void *)this + 1);
      uint64_t v37 = 240 * *(void *)this;
      do
      {
        KB::String::String((KB::String *)&v47, a4);
        KB::String::append((unsigned __int16 *)&v47, "\t", 0xFFFFuLL);
        KB::Word::append_debug_data(v36, a2, (const KB::String *)&v47);
        if (v47.__r_.__value_.__l.__size_) {
          BOOL v38 = v47.__r_.__value_.__s.__data_[6] == 1;
        }
        else {
          BOOL v38 = 0;
        }
        if (v38) {
          free((void *)v47.__r_.__value_.__l.__size_);
        }
        int v36 = (KB::Word *)((char *)v36 + 240);
        v37 -= 240;
      }
      while (v37);
    }
    uint64_t v39 = *((unsigned int *)this + 195);
    if (v39)
    {
      char v40 = (const char *)*((void *)a4 + 1);
      if (!v40) {
        char v40 = v10;
      }
      if (*(_WORD *)a4) {
        long long v41 = v40;
      }
      else {
        long long v41 = "";
      }
      CFStringAppendFormat(a2, 0, @"%s\tunshift mask: %#x\n", v41, v39);
    }
  }
  if (*((char *)this + 943) < 0) {
    std::string::__init_copy_ctor_external(&v47, *((const std::string::value_type **)this + 115), *((void *)this + 116));
  }
  else {
    std::string v47 = *(std::string *)((char *)this + 920);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v51)
  {
    if (v50 == 1) {
      free(v51);
    }
  }
}

void KB::Candidate::token_ids_as_string(KB::Candidate *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int64x2_t v23 = 0uLL;
  long long v24 = 0;
  if (*(void *)this)
  {
    uint64_t v22 = a2;
    uint64_t v2 = *((void *)this + 1);
    uint64_t v3 = v2 + 240 * *(void *)this;
    do
    {
      unint64_t v4 = TILocaleIdentifierForLexiconID(*(_DWORD *)(v2 + 136));
      if (v4) {
        uint64_t v5 = (const char *)v4;
      }
      else {
        uint64_t v5 = "";
      }
      KB::String::format((KB::String *)"%s:%d", (uint64_t)v25, v5, *(unsigned int *)(v2 + 140));
      uint64_t v6 = v23.i64[1];
      if (v23.i64[1] >= (unint64_t)v24)
      {
        uint64_t v8 = (v23.i64[1] - v23.i64[0]) >> 5;
        if ((unint64_t)(v8 + 1) >> 59) {
          abort();
        }
        unint64_t v9 = ((uint64_t)v24 - v23.i64[0]) >> 4;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if ((unint64_t)v24 - v23.i64[0] >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        uint64_t v30 = &v24;
        unint64_t v11 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v10);
        int v12 = &v11[4 * v8];
        uint64_t v27 = v11;
        v28[0] = v12;
        uint64_t v29 = &v11[4 * v13];
        *int v12 = 0x100000;
        *((_WORD *)v12 + 2) = 0;
        *((unsigned char *)v12 + 6) = 0;
        *((void *)v12 + 1) = 0;
        KB::String::operator=((uint64_t)v12, (KB::String *)v25);
        uint64_t v7 = v12 + 8;
        v28[1] = v12 + 8;
        float v14 = (KB::String *)v23.i64[1];
        double v15 = (KB::String *)v23.i64[0];
        double v16 = (char *)v28[0];
        if (v23.i64[1] == v23.i64[0])
        {
          int64x2_t v18 = vdupq_n_s64(v23.u64[1]);
        }
        else
        {
          double v17 = (char *)v28[0] - 32;
          do
          {
            *(_DWORD *)double v17 = 0x100000;
            float v14 = (KB::String *)((char *)v14 - 32);
            *((_WORD *)v17 + 2) = 0;
            v17[6] = 0;
            *((void *)v17 + 1) = 0;
            double v16 = (char *)KB::String::operator=((uint64_t)v17, v14);
            double v17 = v16 - 32;
          }
          while (v14 != v15);
          int64x2_t v18 = v23;
          uint64_t v7 = v28[1];
        }
        v23.i64[0] = (uint64_t)v16;
        v23.i64[1] = (uint64_t)v7;
        *(int64x2_t *)size_t v28 = v18;
        double v19 = v24;
        long long v24 = v29;
        uint64_t v29 = v19;
        uint64_t v27 = (void **)v18.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v27);
      }
      else
      {
        *(_DWORD *)v23.i64[1] = 0x100000;
        *(_WORD *)(v6 + 4) = 0;
        *(unsigned char *)(v6 + 6) = 0;
        *(void *)(v6 + 8) = 0;
        uint64_t v7 = (void *)(KB::String::operator=(v6, (KB::String *)v25) + 32);
      }
      v23.i64[1] = (uint64_t)v7;
      if (v26 && v25[6] == 1) {
        free(v26);
      }
      v2 += 240;
    }
    while (v2 != v3);
    uint64_t v21 = (unsigned __int16 *)v23.i64[1];
    char v20 = (unsigned __int16 *)v23.i64[0];
    a2 = v22;
  }
  else
  {
    uint64_t v21 = 0;
    char v20 = 0;
  }
  WORD2(v27) = 0;
  BYTE6(v27) = 0;
  v28[0] = ", ";
  LODWORD(v27) = 1048578;
  BYTE1(v28[1]) = 0;
  KB::string_join(v20, v21, (const KB::String *)&v27, a2);
  if (v28[0] && BYTE6(v27) == 1) {
    free(v28[0]);
  }
  uint64_t v27 = (void **)&v23;
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v27);
}

void KB::Candidate::add_sources_info(KB::Candidate *this, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t v6 = (const void *)*((void *)this + 123);
  if (v6)
  {
    CFRetain(*((CFTypeRef *)this + 123));
    CFRelease(v6);
    CFDataRef Mutable = (__CFDictionary *)*((void *)this + 123);
  }
  else
  {
    CFDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v8 = (const void *)*((void *)this + 123);
    if (v8) {
      CFRelease(v8);
    }
    *((void *)this + 123) = Mutable;
  }

  CFDictionarySetValue(Mutable, a2, a3);
}

uint64_t *KB::CandidateCollection::scale_scores(uint64_t *this, float a2)
{
  uint64_t v2 = *this;
  uint64_t v3 = this[1];
  while (v2 != v3)
  {
    *(float32x4_t *)(v2 + 744) = vmulq_n_f32(*(float32x4_t *)(v2 + 744), a2);
    v2 += 1000;
  }
  return this;
}

BOOL KB::CandidateCollection::contains_secondary_language_candidates(KB::CandidateCollection *this, int *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)this;
  unint64_t v4 = 0x1CAC083126E978D5 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  if (v4 <= (int)a3) {
    unint64_t v4 = v4;
  }
  else {
    unint64_t v4 = a3;
  }
  if ((int)v4 < 1)
  {
    return 0;
  }
  else
  {
    uint64_t v5 = 0;
    BOOL v6 = 1;
    while (1)
    {
      uint64_t v7 = *(void *)(v3 + 1000 * v5);
      if (v7)
      {
        uint64_t v8 = 240 * v7;
        uint64_t v9 = *(void *)(v3 + 1000 * v5 + 8);
        while (!*(unsigned char *)(v9 + 192))
        {
          v9 += 240;
          v8 -= 240;
          if (!v8) {
            goto LABEL_13;
          }
        }
      }
      else
      {
        uint64_t v9 = *(void *)(v3 + 1000 * v5 + 8);
      }
      if (v9 != *(void *)(v3 + 1000 * v5 + 8) + 240 * v7) {
        break;
      }
LABEL_13:
      BOOL v6 = ++v5 < v4;
      if (v5 == v4) {
        return v6;
      }
    }
    *a2 = v5;
  }
  return v6;
}

void KB::CandidateCollection::sort(KB::CandidateCollection *this)
{
  uint64_t v1 = (KB::Candidate *)*((void *)this + 1);
  unint64_t v2 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v1 - *(void *)this) >> 3));
  if (v1 == *(KB::Candidate **)this) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(*(uint64_t **)this, v1, v3, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(uint64_t *a1, KB::Candidate *a2, uint64_t a3, char a4)
{
  uint64_t v258 = *MEMORY[0x1E4F143B8];
LABEL_2:
  v253 = (KB::Candidate *)((char *)a2 - 1000);
  uint64_t v250 = (float *)((char *)a2 - 3000);
  long long v251 = (float *)((char *)a2 - 2000);
  v249 = (uint64_t *)((char *)a2 - 992);
  unint64_t v9 = (unint64_t)a1;
  while (1)
  {
    a1 = (uint64_t *)v9;
    uint64_t v10 = (uint64_t)a2 - v9;
    unint64_t v11 = 0x1CAC083126E978D5 * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v177 = *((float *)a2 - 64);
          float v178 = *(float *)(v9 + 744);
          if (v177 != v178) {
            goto LABEL_421;
          }
          uint64_t v179 = *(void *)v253;
          if (*(void *)v253)
          {
            uint64_t v180 = 240 * v179;
            uint64_t v181 = *v249;
            while ((*(unsigned char *)(v181 + 105) & 1) == 0)
            {
              v181 += 240;
              v180 -= 240;
              if (!v180) {
                goto LABEL_421;
              }
            }
          }
          else
          {
            uint64_t v181 = *v249;
          }
          if (v181 == *v249 + 240 * v179) {
            goto LABEL_421;
          }
          uint64_t v241 = *(void *)v9;
          if (*(void *)v9)
          {
            uint64_t v242 = 240 * v241;
            uint64_t v243 = *(void *)(v9 + 8);
            while ((*(unsigned char *)(v243 + 105) & 1) == 0)
            {
              v243 += 240;
              v242 -= 240;
              if (!v242) {
                goto LABEL_421;
              }
            }
          }
          else
          {
            uint64_t v243 = *(void *)(v9 + 8);
          }
          if (v243 != *(void *)(v9 + 8) + 240 * v241)
          {
            double v244 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(v253));
            char v246 = v245;
            double v247 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v9));
            if (v246 && v248)
            {
              if (v244 <= v247) {
                return;
              }
              goto LABEL_422;
            }
            float v177 = *((float *)a2 - 64);
            float v178 = *(float *)(v9 + 744);
          }
LABEL_421:
          if (v177 <= v178) {
            return;
          }
LABEL_422:
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)v9, (uint64_t *)v253);
          break;
        case 3uLL:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>((float *)v9, (KB::Candidate *)(v9 + 1000), (float *)v253);
          return;
        case 4uLL:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>((float *)v9, (float *)(v9 + 1000), (float *)(v9 + 2000), (float *)v253);
          return;
        case 5uLL:
          std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,0>((float *)v9, (float *)(v9 + 1000), (float *)(v9 + 2000), (float *)(v9 + 3000), (float *)v253);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 23999) {
      break;
    }
    if (!a3)
    {
      std::__partial_sort[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,KB::Candidate *>((KB::Candidate *)v9, a2, (uint64_t *)a2);
      return;
    }
    unint64_t v12 = v11 >> 1;
    uint64_t v13 = (KB::Candidate *)(v9 + 1000 * (v11 >> 1));
    if ((unint64_t)v10 >= 0x1F401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>((float *)v9, (KB::Candidate *)(v9 + 1000 * (v11 >> 1)), (float *)v253);
      uint64_t v14 = 1000 * v12;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>((float *)(v9 + 1000), (KB::Candidate *)(v14 + v9 - 1000), v251);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>((float *)(v9 + 2000), (KB::Candidate *)(v9 + 1000 + v14), v250);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>((float *)(v14 + v9 - 1000), v13, (float *)(v9 + 1000 + v14));
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)v9, (uint64_t *)v13);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>((float *)(v9 + 1000 * (v11 >> 1)), (KB::Candidate *)v9, (float *)v253);
    }
    --a3;
    if ((a4 & 1) == 0)
    {
      float v15 = *(float *)(v9 - 256);
      float v16 = *(float *)(v9 + 744);
      if (v15 == v16)
      {
        uint64_t v17 = *(void *)(v9 - 1000);
        if (v17)
        {
          uint64_t v18 = 240 * v17;
          uint64_t v19 = *(void *)(v9 - 992);
          while ((*(unsigned char *)(v19 + 105) & 1) == 0)
          {
            v19 += 240;
            v18 -= 240;
            if (!v18) {
              goto LABEL_36;
            }
          }
        }
        else
        {
          uint64_t v19 = *(void *)(v9 - 992);
        }
        if (v19 != *(void *)(v9 - 992) + 240 * v17)
        {
          uint64_t v20 = *(void *)v9;
          if (*(void *)v9)
          {
            uint64_t v21 = 240 * v20;
            uint64_t v22 = *(void *)(v9 + 8);
            while ((*(unsigned char *)(v22 + 105) & 1) == 0)
            {
              v22 += 240;
              v21 -= 240;
              if (!v21) {
                goto LABEL_36;
              }
            }
          }
          else
          {
            uint64_t v22 = *(void *)(v9 + 8);
          }
          if (v22 != *(void *)(v9 + 8) + 240 * v20)
          {
            double v23 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)(v9 - 1000)));
            char v25 = v24;
            double v26 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v9));
            if (v25 && v27)
            {
              if (v23 <= v26)
              {
LABEL_29:
                KB::Candidate::Candidate((uint64_t)&v255, v9);
                float v28 = v257;
                float v29 = *((float *)a2 - 64);
                if (v257 != v29) {
                  goto LABEL_200;
                }
                if (v255)
                {
                  uint64_t v30 = 240 * v255;
                  uint64_t v31 = v256;
                  while ((*(unsigned char *)(v31 + 105) & 1) == 0)
                  {
                    v31 += 240;
                    v30 -= 240;
                    if (!v30) {
                      goto LABEL_200;
                    }
                  }
                }
                else
                {
                  uint64_t v31 = v256;
                }
                if (v31 == v256 + 240 * v255) {
                  goto LABEL_200;
                }
                uint64_t v102 = *(void *)v253;
                if (*(void *)v253)
                {
                  uint64_t v103 = 240 * v102;
                  uint64_t v104 = *v249;
                  while ((*(unsigned char *)(v104 + 105) & 1) == 0)
                  {
                    v104 += 240;
                    v103 -= 240;
                    if (!v103) {
                      goto LABEL_200;
                    }
                  }
                }
                else
                {
                  uint64_t v104 = *v249;
                }
                if (v104 == *v249 + 240 * v102) {
                  goto LABEL_200;
                }
                double v105 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
                char v107 = v106;
                double v108 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(v253));
                if (!v107 || !v109)
                {
                  float v28 = v257;
                  float v29 = *((float *)a2 - 64);
LABEL_200:
                  if (v28 > v29) {
                    goto LABEL_201;
                  }
                  goto LABEL_174;
                }
                if (v105 <= v108)
                {
LABEL_174:
                  v9 += 1000;
                  for (uint64_t i = a1; ; uint64_t i = (uint64_t *)v111)
                  {
                    if (v9 >= (unint64_t)a2) {
                      goto LABEL_222;
                    }
                    unint64_t v111 = v9;
                    float v112 = v257;
                    float v113 = *((float *)i + 436);
                    if (v257 == v113)
                    {
                      if (v255)
                      {
                        uint64_t v114 = 240 * v255;
                        uint64_t v115 = v256;
                        while ((*(unsigned char *)(v115 + 105) & 1) == 0)
                        {
                          v115 += 240;
                          v114 -= 240;
                          if (!v114) {
                            goto LABEL_196;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v115 = v256;
                      }
                      if (v115 != v256 + 240 * v255)
                      {
                        uint64_t v116 = *(void *)v9;
                        if (*(void *)v9)
                        {
                          uint64_t v117 = 240 * v116;
                          uint64_t v118 = i[126];
                          while ((*(unsigned char *)(v118 + 105) & 1) == 0)
                          {
                            v118 += 240;
                            v117 -= 240;
                            if (!v117) {
                              goto LABEL_196;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v118 = i[126];
                        }
                        if (v118 != i[126] + 240 * v116)
                        {
                          double v119 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
                          char v121 = v120;
                          double v122 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v9));
                          if (v121 && v123)
                          {
                            if (v119 > v122) {
                              goto LABEL_222;
                            }
                            goto LABEL_197;
                          }
                          float v112 = v257;
                          float v113 = *((float *)i + 436);
                        }
                      }
                    }
LABEL_196:
                    if (v112 > v113) {
                      goto LABEL_222;
                    }
LABEL_197:
                    v9 += 1000;
                  }
                }
                do
                {
LABEL_201:
                  while (1)
                  {
                    unint64_t v124 = v9;
                    v9 += 1000;
                    float v125 = v257;
                    float v126 = *(float *)(v124 + 1744);
                    if (v257 != v126) {
                      break;
                    }
                    if (v255)
                    {
                      uint64_t v127 = 240 * v255;
                      uint64_t v128 = v256;
                      while ((*(unsigned char *)(v128 + 105) & 1) == 0)
                      {
                        v128 += 240;
                        v127 -= 240;
                        if (!v127) {
                          goto LABEL_221;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v128 = v256;
                    }
                    if (v128 == v256 + 240 * v255) {
                      break;
                    }
                    uint64_t v129 = *(void *)(v124 + 1000);
                    if (v129)
                    {
                      uint64_t v130 = 240 * v129;
                      uint64_t v131 = *(void *)(v124 + 1008);
                      while ((*(unsigned char *)(v131 + 105) & 1) == 0)
                      {
                        v131 += 240;
                        v130 -= 240;
                        if (!v130) {
                          goto LABEL_221;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v131 = *(void *)(v124 + 1008);
                    }
                    if (v131 == *(void *)(v124 + 1008) + 240 * v129) {
                      break;
                    }
                    double v132 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
                    char v134 = v133;
                    double v135 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v9));
                    if (!v134 || !v136)
                    {
                      float v125 = v257;
                      float v126 = *(float *)(v124 + 1744);
                      break;
                    }
                    if (v132 > v135) {
                      goto LABEL_222;
                    }
                  }
LABEL_221:
                  ;
                }
                while (v125 <= v126);
LABEL_222:
                uint64_t v137 = a2;
                if (v9 < (unint64_t)a2)
                {
                  uint64_t v137 = a2;
                  while (1)
                  {
                    v138 = v137;
                    uint64_t v137 = (KB::Candidate *)((char *)v137 - 1000);
                    float v139 = v257;
                    float v140 = *((float *)v138 - 64);
                    if (v257 != v140) {
                      goto LABEL_244;
                    }
                    if (v255)
                    {
                      uint64_t v141 = 240 * v255;
                      uint64_t v142 = v256;
                      while ((*(unsigned char *)(v142 + 105) & 1) == 0)
                      {
                        v142 += 240;
                        v141 -= 240;
                        if (!v141) {
                          goto LABEL_244;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v142 = v256;
                    }
                    if (v142 == v256 + 240 * v255) {
                      goto LABEL_244;
                    }
                    uint64_t v143 = *(void *)v137;
                    if (*(void *)v137)
                    {
                      uint64_t v144 = 240 * v143;
                      uint64_t v145 = *((void *)v138 - 124);
                      while ((*(unsigned char *)(v145 + 105) & 1) == 0)
                      {
                        v145 += 240;
                        v144 -= 240;
                        if (!v144) {
                          goto LABEL_244;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v145 = *((void *)v138 - 124);
                    }
                    if (v145 == *((void *)v138 - 124) + 240 * v143) {
                      goto LABEL_244;
                    }
                    double v146 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
                    char v148 = v147;
                    double v149 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(v137));
                    if (v148 && v150)
                    {
                      if (v146 <= v149) {
                        break;
                      }
                    }
                    else
                    {
                      float v139 = v257;
                      float v140 = *((float *)v138 - 64);
LABEL_244:
                      if (v139 <= v140) {
                        break;
                      }
                    }
                  }
                }
LABEL_289:
                if (v9 < (unint64_t)v137)
                {
                  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)v9, (uint64_t *)v137);
                  while (1)
                  {
                    unint64_t v151 = v9;
                    v9 += 1000;
                    float v152 = v257;
                    float v153 = *(float *)(v151 + 1744);
                    if (v257 != v153) {
                      goto LABEL_267;
                    }
                    if (v255)
                    {
                      uint64_t v154 = 240 * v255;
                      uint64_t v155 = v256;
                      while ((*(unsigned char *)(v155 + 105) & 1) == 0)
                      {
                        v155 += 240;
                        v154 -= 240;
                        if (!v154) {
                          goto LABEL_267;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v155 = v256;
                    }
                    if (v155 == v256 + 240 * v255) {
                      goto LABEL_267;
                    }
                    uint64_t v156 = *(void *)(v151 + 1000);
                    if (v156)
                    {
                      uint64_t v157 = 240 * v156;
                      uint64_t v158 = *(void *)(v151 + 1008);
                      while ((*(unsigned char *)(v158 + 105) & 1) == 0)
                      {
                        v158 += 240;
                        v157 -= 240;
                        if (!v157) {
                          goto LABEL_267;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v158 = *(void *)(v151 + 1008);
                    }
                    if (v158 == *(void *)(v151 + 1008) + 240 * v156) {
                      goto LABEL_267;
                    }
                    double v159 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
                    char v161 = v160;
                    double v162 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v9));
                    if (v161 && v163)
                    {
                      if (v159 > v162) {
                        goto LABEL_268;
                      }
                    }
                    else
                    {
                      float v152 = v257;
                      float v153 = *(float *)(v151 + 1744);
LABEL_267:
                      if (v152 > v153)
                      {
                        while (1)
                        {
LABEL_268:
                          uint64_t v164 = v137;
                          uint64_t v137 = (KB::Candidate *)((char *)v137 - 1000);
                          float v165 = v257;
                          float v166 = *((float *)v164 - 64);
                          if (v257 != v166) {
                            goto LABEL_288;
                          }
                          if (v255)
                          {
                            uint64_t v167 = 240 * v255;
                            uint64_t v168 = v256;
                            while ((*(unsigned char *)(v168 + 105) & 1) == 0)
                            {
                              v168 += 240;
                              v167 -= 240;
                              if (!v167) {
                                goto LABEL_288;
                              }
                            }
                          }
                          else
                          {
                            uint64_t v168 = v256;
                          }
                          if (v168 == v256 + 240 * v255) {
                            goto LABEL_288;
                          }
                          uint64_t v169 = *(void *)v137;
                          if (*(void *)v137)
                          {
                            uint64_t v170 = 240 * v169;
                            uint64_t v171 = *((void *)v164 - 124);
                            while ((*(unsigned char *)(v171 + 105) & 1) == 0)
                            {
                              v171 += 240;
                              v170 -= 240;
                              if (!v170) {
                                goto LABEL_288;
                              }
                            }
                          }
                          else
                          {
                            uint64_t v171 = *((void *)v164 - 124);
                          }
                          if (v171 == *((void *)v164 - 124) + 240 * v169) {
                            goto LABEL_288;
                          }
                          double v172 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
                          char v174 = v173;
                          double v175 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(v137));
                          if (v174 && v176)
                          {
                            if (v172 <= v175) {
                              goto LABEL_289;
                            }
                          }
                          else
                          {
                            float v165 = v257;
                            float v166 = *((float *)v164 - 64);
LABEL_288:
                            if (v165 <= v166) {
                              goto LABEL_289;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if ((uint64_t *)(v9 - 1000) != a1) {
                  KB::Candidate::operator=(a1, (uint64_t *)(v9 - 1000));
                }
                KB::Candidate::operator=((uint64_t *)(v9 - 1000), &v255);
                KB::Candidate::~Candidate((KB::Candidate *)&v255);
                a4 = 0;
                continue;
              }
              goto LABEL_37;
            }
            float v15 = *(float *)(v9 - 256);
            float v16 = *(float *)(v9 + 744);
          }
        }
      }
LABEL_36:
      if (v15 <= v16) {
        goto LABEL_29;
      }
    }
LABEL_37:
    uint64_t v254 = a3;
    KB::Candidate::Candidate((uint64_t)&v255, v9);
    char v32 = (KB::Candidate *)v9;
    do
    {
      while (1)
      {
        char v33 = v32;
        char v32 = (KB::Candidate *)((char *)v32 + 1000);
        float v34 = *((float *)v33 + 436);
        float v35 = v257;
        if (v34 != v257) {
          break;
        }
        uint64_t v36 = *((void *)v33 + 125);
        if (v36)
        {
          uint64_t v37 = 240 * v36;
          uint64_t v38 = *((void *)v33 + 126);
          while ((*(unsigned char *)(v38 + 105) & 1) == 0)
          {
            v38 += 240;
            v37 -= 240;
            if (!v37) {
              goto LABEL_58;
            }
          }
        }
        else
        {
          uint64_t v38 = *((void *)v33 + 126);
        }
        if (v38 == *((void *)v33 + 126) + 240 * v36) {
          break;
        }
        if (v255)
        {
          uint64_t v39 = 240 * v255;
          uint64_t v40 = v256;
          while ((*(unsigned char *)(v40 + 105) & 1) == 0)
          {
            v40 += 240;
            v39 -= 240;
            if (!v39) {
              goto LABEL_58;
            }
          }
        }
        else
        {
          uint64_t v40 = v256;
        }
        if (v40 == v256 + 240 * v255) {
          break;
        }
        double v41 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(v32));
        char v43 = v42;
        double v44 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
        if (!v43 || !v45)
        {
          float v34 = *((float *)v33 + 436);
          float v35 = v257;
          break;
        }
        if (v41 <= v44) {
          goto LABEL_59;
        }
      }
LABEL_58:
      ;
    }
    while (v34 > v35);
LABEL_59:
    __int16 v46 = (uint64_t *)a2;
    if (v33 != (KB::Candidate *)v9)
    {
      while (1)
      {
        std::string v47 = a2;
        a2 = (KB::Candidate *)((char *)a2 - 1000);
        float v48 = *((float *)v47 - 64);
        float v49 = v257;
        if (v48 != v257) {
          goto LABEL_80;
        }
        uint64_t v50 = *(void *)a2;
        if (*(void *)a2)
        {
          uint64_t v51 = 240 * v50;
          uint64_t v52 = *((void *)v47 - 124);
          while ((*(unsigned char *)(v52 + 105) & 1) == 0)
          {
            v52 += 240;
            v51 -= 240;
            if (!v51) {
              goto LABEL_80;
            }
          }
        }
        else
        {
          uint64_t v52 = *((void *)v47 - 124);
        }
        if (v52 == *((void *)v47 - 124) + 240 * v50) {
          goto LABEL_80;
        }
        if (v255)
        {
          uint64_t v53 = 240 * v255;
          uint64_t v54 = v256;
          while ((*(unsigned char *)(v54 + 105) & 1) == 0)
          {
            v54 += 240;
            v53 -= 240;
            if (!v53) {
              goto LABEL_80;
            }
          }
        }
        else
        {
          uint64_t v54 = v256;
        }
        if (v54 == v256 + 240 * v255) {
          goto LABEL_80;
        }
        double v55 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(a2));
        char v57 = v56;
        double v58 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
        if (v57 && v59)
        {
          if (v55 > v58) {
            goto LABEL_109;
          }
        }
        else
        {
          float v48 = *((float *)v47 - 64);
          float v49 = v257;
LABEL_80:
          if (v48 > v49) {
            goto LABEL_109;
          }
        }
      }
    }
    if (v32 < a2)
    {
      do
      {
LABEL_83:
        uint64_t v60 = a2;
        a2 = (KB::Candidate *)((char *)a2 - 1000);
        float v61 = *((float *)v60 - 64);
        float v62 = v257;
        if (v61 == v257)
        {
          uint64_t v63 = *(void *)a2;
          if (*(void *)a2)
          {
            uint64_t v64 = 240 * v63;
            uint64_t v65 = *((void *)v60 - 124);
            while ((*(unsigned char *)(v65 + 105) & 1) == 0)
            {
              v65 += 240;
              v64 -= 240;
              if (!v64) {
                goto LABEL_104;
              }
            }
          }
          else
          {
            uint64_t v65 = *((void *)v60 - 124);
          }
          if (v65 != *((void *)v60 - 124) + 240 * v63)
          {
            if (v255)
            {
              uint64_t v66 = 240 * v255;
              uint64_t v67 = v256;
              while ((*(unsigned char *)(v67 + 105) & 1) == 0)
              {
                v67 += 240;
                v66 -= 240;
                if (!v66) {
                  goto LABEL_104;
                }
              }
            }
            else
            {
              uint64_t v67 = v256;
            }
            if (v67 != v256 + 240 * v255)
            {
              double v68 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(a2));
              char v70 = v69;
              double v71 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
              if (v70 && v72)
              {
                if (v68 > v71 || v32 >= a2) {
                  break;
                }
                goto LABEL_83;
              }
              float v61 = *((float *)v60 - 64);
              float v62 = v257;
            }
          }
        }
LABEL_104:
        ;
      }
      while (v61 <= v62 && v32 < a2);
    }
LABEL_109:
    unint64_t v9 = (unint64_t)v32;
    if (v32 >= a2) {
      goto LABEL_155;
    }
    unsigned int v74 = (uint64_t *)a2;
    while (2)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)v9, v74);
      do
      {
LABEL_112:
        unint64_t v75 = v9;
        v9 += 1000;
        float v76 = *(float *)(v75 + 1744);
        float v77 = v257;
        if (v76 == v257)
        {
          uint64_t v78 = *(void *)(v75 + 1000);
          if (v78)
          {
            uint64_t v79 = 240 * v78;
            uint64_t v80 = *(void *)(v75 + 1008);
            while ((*(unsigned char *)(v80 + 105) & 1) == 0)
            {
              v80 += 240;
              v79 -= 240;
              if (!v79) {
                goto LABEL_132;
              }
            }
          }
          else
          {
            uint64_t v80 = *(void *)(v75 + 1008);
          }
          if (v80 != *(void *)(v75 + 1008) + 240 * v78)
          {
            if (v255)
            {
              uint64_t v81 = 240 * v255;
              uint64_t v82 = v256;
              while ((*(unsigned char *)(v82 + 105) & 1) == 0)
              {
                v82 += 240;
                v81 -= 240;
                if (!v81) {
                  goto LABEL_132;
                }
              }
            }
            else
            {
              uint64_t v82 = v256;
            }
            if (v82 != v256 + 240 * v255)
            {
              double v83 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v9));
              char v85 = v84;
              double v86 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
              if (v85 && v87)
              {
                if (v83 <= v86) {
                  break;
                }
                goto LABEL_112;
              }
              float v76 = *(float *)(v75 + 1744);
              float v77 = v257;
            }
          }
        }
LABEL_132:
        ;
      }
      while (v76 > v77);
      while (2)
      {
        while (1)
        {
          unint64_t v88 = v74;
          v74 -= 125;
          float v89 = *((float *)v88 - 64);
          float v90 = v257;
          if (v89 != v257) {
            break;
          }
          uint64_t v91 = *v74;
          if (*v74)
          {
            uint64_t v92 = 240 * v91;
            uint64_t v93 = *(v88 - 124);
            while ((*(unsigned char *)(v93 + 105) & 1) == 0)
            {
              v93 += 240;
              v92 -= 240;
              if (!v92) {
                goto LABEL_153;
              }
            }
          }
          else
          {
            uint64_t v93 = *(v88 - 124);
          }
          if (v93 == *(v88 - 124) + 240 * v91) {
            break;
          }
          if (v255)
          {
            uint64_t v94 = 240 * v255;
            uint64_t v95 = v256;
            while ((*(unsigned char *)(v95 + 105) & 1) == 0)
            {
              v95 += 240;
              v94 -= 240;
              if (!v94) {
                goto LABEL_153;
              }
            }
          }
          else
          {
            uint64_t v95 = v256;
          }
          if (v95 == v256 + 240 * v255) {
            break;
          }
          double v96 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v74));
          char v98 = v97;
          double v99 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
          if (!v98 || !v100)
          {
            float v89 = *((float *)v88 - 64);
            float v90 = v257;
            break;
          }
          if (v96 > v99) {
            goto LABEL_154;
          }
        }
LABEL_153:
        if (v89 <= v90) {
          continue;
        }
        break;
      }
LABEL_154:
      if (v9 < (unint64_t)v74) {
        continue;
      }
      break;
    }
LABEL_155:
    if ((uint64_t *)(v9 - 1000) != a1) {
      KB::Candidate::operator=(a1, (uint64_t *)(v9 - 1000));
    }
    KB::Candidate::operator=((uint64_t *)(v9 - 1000), &v255);
    KB::Candidate::~Candidate((KB::Candidate *)&v255);
    BOOL v4 = v32 >= a2;
    a2 = (KB::Candidate *)v46;
    a3 = v254;
    if (v4)
    {
      BOOL v101 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>((float *)a1, (uint64_t *)(v9 - 1000));
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>((float *)v9, v46))
      {
        a2 = (KB::Candidate *)(v9 - 1000);
        if (v101) {
          return;
        }
        goto LABEL_2;
      }
      if (!v101) {
        goto LABEL_161;
      }
    }
    else
    {
LABEL_161:
      std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(a1, v9 - 1000, v254, a4 & 1);
      a4 = 0;
    }
  }
  if ((a4 & 1) == 0)
  {
    if ((KB::Candidate *)v9 == a2) {
      return;
    }
    unint64_t v212 = (KB::Candidate *)(v9 + 1000);
    if ((KB::Candidate *)(v9 + 1000) == a2) {
      return;
    }
    while (1)
    {
      uint64_t v213 = a1;
      a1 = (uint64_t *)v212;
      float v214 = *((float *)v213 + 436);
      float v215 = *((float *)v213 + 186);
      if (v214 == v215)
      {
        uint64_t v216 = *(void *)v212;
        if (*(void *)v212)
        {
          uint64_t v217 = 240 * v216;
          uint64_t v218 = v213[126];
          while ((*(unsigned char *)(v218 + 105) & 1) == 0)
          {
            v218 += 240;
            v217 -= 240;
            if (!v217) {
              goto LABEL_381;
            }
          }
        }
        else
        {
          uint64_t v218 = v213[126];
        }
        if (v218 != v213[126] + 240 * v216)
        {
          uint64_t v219 = *v213;
          if (*v213)
          {
            uint64_t v220 = 240 * v219;
            uint64_t v221 = v213[1];
            while ((*(unsigned char *)(v221 + 105) & 1) == 0)
            {
              v221 += 240;
              v220 -= 240;
              if (!v220) {
                goto LABEL_381;
              }
            }
          }
          else
          {
            uint64_t v221 = v213[1];
          }
          if (v221 != v213[1] + 240 * v219)
          {
            double v222 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(v212));
            char v224 = v223;
            double v225 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v213));
            if (v224 && v226)
            {
              if (v222 <= v225) {
                goto LABEL_405;
              }
LABEL_382:
              KB::Candidate::Candidate((uint64_t)&v255, (uint64_t)a1);
              long long v227 = a1;
              while (1)
              {
                long long v228 = v227;
                long long v227 = v213;
                KB::Candidate::operator=(v228, v213);
                v213 -= 125;
                float v229 = v257;
                float v230 = *((float *)v227 - 64);
                if (v257 == v230)
                {
                  if (v255)
                  {
                    uint64_t v231 = 240 * v255;
                    uint64_t v232 = v256;
                    while ((*(unsigned char *)(v232 + 105) & 1) == 0)
                    {
                      v232 += 240;
                      v231 -= 240;
                      if (!v231) {
                        goto LABEL_403;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v232 = v256;
                  }
                  if (v232 != v256 + 240 * v255)
                  {
                    uint64_t v233 = *v213;
                    if (*v213)
                    {
                      uint64_t v234 = 240 * v233;
                      uint64_t v235 = *(v227 - 124);
                      while ((*(unsigned char *)(v235 + 105) & 1) == 0)
                      {
                        v235 += 240;
                        v234 -= 240;
                        if (!v234) {
                          goto LABEL_403;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v235 = *(v227 - 124);
                    }
                    if (v235 != *(v227 - 124) + 240 * v233)
                    {
                      double v236 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
                      char v238 = v237;
                      double v239 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v213));
                      if (v238 && v240)
                      {
                        if (v236 <= v239) {
                          goto LABEL_404;
                        }
                        continue;
                      }
                      float v229 = v257;
                      float v230 = *((float *)v227 - 64);
                    }
                  }
                }
LABEL_403:
                if (v229 <= v230)
                {
LABEL_404:
                  KB::Candidate::operator=(v227, &v255);
                  KB::Candidate::~Candidate((KB::Candidate *)&v255);
                  goto LABEL_405;
                }
              }
            }
            float v214 = *((float *)v213 + 436);
            float v215 = *((float *)v213 + 186);
          }
        }
      }
LABEL_381:
      if (v214 > v215) {
        goto LABEL_382;
      }
LABEL_405:
      unint64_t v212 = (KB::Candidate *)(a1 + 125);
      if (a1 + 125 == (uint64_t *)a2) {
        return;
      }
    }
  }
  if ((KB::Candidate *)v9 == a2) {
    return;
  }
  unint64_t v182 = (KB::Candidate *)(v9 + 1000);
  if ((KB::Candidate *)(v9 + 1000) == a2) {
    return;
  }
  uint64_t v183 = v9;
  while (2)
  {
    uint64_t v184 = v183;
    uint64_t v183 = (uint64_t)v182;
    float v185 = *(float *)(v184 + 1744);
    float v186 = *(float *)(v184 + 744);
    if (v185 != v186) {
      goto LABEL_329;
    }
    uint64_t v187 = *(void *)v182;
    if (*(void *)v182)
    {
      uint64_t v188 = 240 * v187;
      uint64_t v189 = *(void *)(v184 + 1008);
      while ((*(unsigned char *)(v189 + 105) & 1) == 0)
      {
        v189 += 240;
        v188 -= 240;
        if (!v188) {
          goto LABEL_329;
        }
      }
    }
    else
    {
      uint64_t v189 = *(void *)(v184 + 1008);
    }
    if (v189 == *(void *)(v184 + 1008) + 240 * v187) {
      goto LABEL_329;
    }
    uint64_t v190 = *(void *)v184;
    if (*(void *)v184)
    {
      uint64_t v191 = 240 * v190;
      uint64_t v192 = *(void *)(v184 + 8);
      while ((*(unsigned char *)(v192 + 105) & 1) == 0)
      {
        v192 += 240;
        v191 -= 240;
        if (!v191) {
          goto LABEL_329;
        }
      }
    }
    else
    {
      uint64_t v192 = *(void *)(v184 + 8);
    }
    if (v192 == *(void *)(v184 + 8) + 240 * v190)
    {
LABEL_329:
      if (v185 <= v186) {
        goto LABEL_356;
      }
      goto LABEL_330;
    }
    double v193 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(v182));
    char v195 = v194;
    double v196 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v184));
    if (!v195 || !v197)
    {
      float v185 = *(float *)(v184 + 1744);
      float v186 = *(float *)(v184 + 744);
      goto LABEL_329;
    }
    if (v193 <= v196) {
      goto LABEL_356;
    }
LABEL_330:
    KB::Candidate::Candidate((uint64_t)&v255, v183);
    double v198 = (uint64_t *)v183;
    while (1)
    {
      v199 = v198;
      double v198 = (uint64_t *)v184;
      KB::Candidate::operator=(v199, (uint64_t *)v184);
      if (v184 == v9) {
        break;
      }
      v184 -= 1000;
      float v200 = v257;
      float v201 = *((float *)v198 - 64);
      if (v257 == v201)
      {
        if (v255)
        {
          uint64_t v202 = 240 * v255;
          uint64_t v203 = v256;
          while ((*(unsigned char *)(v203 + 105) & 1) == 0)
          {
            v203 += 240;
            v202 -= 240;
            if (!v202) {
              goto LABEL_352;
            }
          }
        }
        else
        {
          uint64_t v203 = v256;
        }
        if (v203 != v256 + 240 * v255)
        {
          uint64_t v204 = *(void *)v184;
          if (*(void *)v184)
          {
            uint64_t v205 = 240 * v204;
            uint64_t v206 = *(v198 - 124);
            while ((*(unsigned char *)(v206 + 105) & 1) == 0)
            {
              v206 += 240;
              v205 -= 240;
              if (!v205) {
                goto LABEL_352;
              }
            }
          }
          else
          {
            uint64_t v206 = *(v198 - 124);
          }
          if (v206 != *(v198 - 124) + 240 * v204)
          {
            double v207 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v255));
            char v209 = v208;
            double v210 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)(v198 - 125)));
            if (v209 && v211)
            {
              if (v207 <= v210) {
                goto LABEL_355;
              }
              continue;
            }
            float v200 = v257;
            float v201 = *((float *)v198 - 64);
          }
        }
      }
LABEL_352:
      if (v200 <= v201) {
        goto LABEL_355;
      }
    }
    double v198 = (uint64_t *)v9;
LABEL_355:
    KB::Candidate::operator=(v198, &v255);
    KB::Candidate::~Candidate((KB::Candidate *)&v255);
LABEL_356:
    unint64_t v182 = (KB::Candidate *)(v183 + 1000);
    if ((KB::Candidate *)(v183 + 1000) != a2) {
      continue;
    }
    break;
  }
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>(float *a1, KB::Candidate *this, float *a3)
{
  float v6 = *((float *)this + 186);
  float v7 = a1[186];
  if (v6 != v7) {
    goto LABEL_33;
  }
  uint64_t v8 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v9 = 240 * v8;
    uint64_t v10 = *((void *)this + 1);
    while ((*(unsigned char *)(v10 + 105) & 1) == 0)
    {
      v10 += 240;
      v9 -= 240;
      if (!v9) {
        goto LABEL_33;
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)this + 1);
  }
  if (v10 == *((void *)this + 1) + 240 * v8) {
    goto LABEL_33;
  }
  uint64_t v11 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v12 = 240 * v11;
    uint64_t v13 = *((void *)a1 + 1);
    while ((*(unsigned char *)(v13 + 105) & 1) == 0)
    {
      v13 += 240;
      v12 -= 240;
      if (!v12) {
        goto LABEL_33;
      }
    }
  }
  else
  {
    uint64_t v13 = *((void *)a1 + 1);
  }
  if (v13 == *((void *)a1 + 1) + 240 * v11)
  {
LABEL_33:
    if (v6 <= v7) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
  double v14 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(this));
  char v16 = v15;
  double v17 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a1));
  if (!v16 || !v18)
  {
    float v6 = *((float *)this + 186);
    float v7 = a1[186];
    goto LABEL_33;
  }
  float v6 = *((float *)this + 186);
  if (v14 <= v17)
  {
LABEL_19:
    float v19 = a3[186];
    if (v19 == v6)
    {
      uint64_t v20 = *(void *)a3;
      if (*(void *)a3)
      {
        uint64_t v21 = 240 * v20;
        uint64_t v22 = *((void *)a3 + 1);
        while ((*(unsigned char *)(v22 + 105) & 1) == 0)
        {
          v22 += 240;
          v21 -= 240;
          if (!v21) {
            goto LABEL_72;
          }
        }
      }
      else
      {
        uint64_t v22 = *((void *)a3 + 1);
      }
      if (v22 != *((void *)a3 + 1) + 240 * v20)
      {
        uint64_t v23 = *(void *)this;
        if (*(void *)this)
        {
          uint64_t v24 = 240 * v23;
          uint64_t v25 = *((void *)this + 1);
          while ((*(unsigned char *)(v25 + 105) & 1) == 0)
          {
            v25 += 240;
            v24 -= 240;
            if (!v24) {
              goto LABEL_72;
            }
          }
        }
        else
        {
          uint64_t v25 = *((void *)this + 1);
        }
        if (v25 != *((void *)this + 1) + 240 * v23)
        {
          double v33 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a3));
          char v35 = v34;
          double v36 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(this));
          if (v35 && v37)
          {
            if (v33 <= v36) {
              return;
            }
LABEL_73:
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)this, (uint64_t *)a3);
            float v51 = *((float *)this + 186);
            float v52 = a1[186];
            if (v51 == v52)
            {
              uint64_t v53 = *(void *)this;
              if (*(void *)this)
              {
                uint64_t v54 = 240 * v53;
                uint64_t v55 = *((void *)this + 1);
                while ((*(unsigned char *)(v55 + 105) & 1) == 0)
                {
                  v55 += 240;
                  v54 -= 240;
                  if (!v54) {
                    goto LABEL_106;
                  }
                }
              }
              else
              {
                uint64_t v55 = *((void *)this + 1);
              }
              if (v55 != *((void *)this + 1) + 240 * v53)
              {
                uint64_t v56 = *(void *)a1;
                if (*(void *)a1)
                {
                  uint64_t v57 = 240 * v56;
                  uint64_t v58 = *((void *)a1 + 1);
                  while ((*(unsigned char *)(v58 + 105) & 1) == 0)
                  {
                    v58 += 240;
                    v57 -= 240;
                    if (!v57) {
                      goto LABEL_106;
                    }
                  }
                }
                else
                {
                  uint64_t v58 = *((void *)a1 + 1);
                }
                if (v58 != *((void *)a1 + 1) + 240 * v56)
                {
                  double v65 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(this));
                  char v67 = v66;
                  double v68 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a1));
                  if (v67 && v69)
                  {
                    if (v65 <= v68) {
                      return;
                    }
                    goto LABEL_107;
                  }
                  float v51 = *((float *)this + 186);
                  float v52 = a1[186];
                }
              }
            }
LABEL_106:
            if (v51 <= v52) {
              return;
            }
LABEL_107:
            char v59 = (uint64_t *)a1;
            char v70 = (uint64_t *)this;
            goto LABEL_108;
          }
          float v19 = a3[186];
          float v6 = *((float *)this + 186);
        }
      }
    }
LABEL_72:
    if (v19 <= v6) {
      return;
    }
    goto LABEL_73;
  }
LABEL_34:
  float v26 = a3[186];
  if (v26 != v6) {
    goto LABEL_87;
  }
  uint64_t v27 = *(void *)a3;
  if (*(void *)a3)
  {
    uint64_t v28 = 240 * v27;
    uint64_t v29 = *((void *)a3 + 1);
    while ((*(unsigned char *)(v29 + 105) & 1) == 0)
    {
      v29 += 240;
      v28 -= 240;
      if (!v28) {
        goto LABEL_87;
      }
    }
  }
  else
  {
    uint64_t v29 = *((void *)a3 + 1);
  }
  if (v29 == *((void *)a3 + 1) + 240 * v27) {
    goto LABEL_87;
  }
  uint64_t v30 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v31 = 240 * v30;
    uint64_t v32 = *((void *)this + 1);
    while ((*(unsigned char *)(v32 + 105) & 1) == 0)
    {
      v32 += 240;
      v31 -= 240;
      if (!v31) {
        goto LABEL_87;
      }
    }
  }
  else
  {
    uint64_t v32 = *((void *)this + 1);
  }
  if (v32 == *((void *)this + 1) + 240 * v30)
  {
LABEL_87:
    if (v26 <= v6) {
      goto LABEL_58;
    }
    goto LABEL_88;
  }
  double v38 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a3));
  char v40 = v39;
  double v41 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(this));
  if (!v40 || !v42)
  {
    float v26 = a3[186];
    float v6 = *((float *)this + 186);
    goto LABEL_87;
  }
  if (v38 <= v41)
  {
LABEL_58:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a1, (uint64_t *)this);
    float v43 = a3[186];
    float v44 = *((float *)this + 186);
    if (v43 == v44)
    {
      uint64_t v45 = *(void *)a3;
      if (*(void *)a3)
      {
        uint64_t v46 = 240 * v45;
        uint64_t v47 = *((void *)a3 + 1);
        while ((*(unsigned char *)(v47 + 105) & 1) == 0)
        {
          v47 += 240;
          v46 -= 240;
          if (!v46) {
            goto LABEL_102;
          }
        }
      }
      else
      {
        uint64_t v47 = *((void *)a3 + 1);
      }
      if (v47 != *((void *)a3 + 1) + 240 * v45)
      {
        uint64_t v48 = *(void *)this;
        if (*(void *)this)
        {
          uint64_t v49 = 240 * v48;
          uint64_t v50 = *((void *)this + 1);
          while ((*(unsigned char *)(v50 + 105) & 1) == 0)
          {
            v50 += 240;
            v49 -= 240;
            if (!v49) {
              goto LABEL_102;
            }
          }
        }
        else
        {
          uint64_t v50 = *((void *)this + 1);
        }
        if (v50 != *((void *)this + 1) + 240 * v48)
        {
          double v60 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a3));
          char v62 = v61;
          double v63 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(this));
          if (v62 && v64)
          {
            if (v60 <= v63) {
              return;
            }
            goto LABEL_103;
          }
          float v43 = a3[186];
          float v44 = *((float *)this + 186);
        }
      }
    }
LABEL_102:
    if (v43 <= v44) {
      return;
    }
LABEL_103:
    char v59 = (uint64_t *)this;
    goto LABEL_104;
  }
LABEL_88:
  char v59 = (uint64_t *)a1;
LABEL_104:
  char v70 = (uint64_t *)a3;
LABEL_108:

  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v59, v70);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>(float *a1, float *a2, float *a3, float *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>(a1, (KB::Candidate *)a2, a3);
  float v8 = a4[186];
  float v9 = a3[186];
  if (v8 == v9)
  {
    uint64_t v10 = *(void *)a4;
    if (*(void *)a4)
    {
      uint64_t v11 = 240 * v10;
      uint64_t v12 = *((void *)a4 + 1);
      while ((*(unsigned char *)(v12 + 105) & 1) == 0)
      {
        v12 += 240;
        v11 -= 240;
        if (!v11) {
          goto LABEL_21;
        }
      }
    }
    else
    {
      uint64_t v12 = *((void *)a4 + 1);
    }
    if (v12 != *((void *)a4 + 1) + 240 * v10)
    {
      uint64_t v13 = *(void *)a3;
      if (*(void *)a3)
      {
        uint64_t v14 = 240 * v13;
        uint64_t v15 = *((void *)a3 + 1);
        while ((*(unsigned char *)(v15 + 105) & 1) == 0)
        {
          v15 += 240;
          v14 -= 240;
          if (!v14) {
            goto LABEL_21;
          }
        }
      }
      else
      {
        uint64_t v15 = *((void *)a3 + 1);
      }
      if (v15 != *((void *)a3 + 1) + 240 * v13)
      {
        double v16 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a4));
        char v18 = v17;
        double v19 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a3));
        if (v18 && v20)
        {
          if (v16 <= v19) {
            return;
          }
          goto LABEL_22;
        }
        float v8 = a4[186];
        float v9 = a3[186];
      }
    }
  }
LABEL_21:
  if (v8 <= v9) {
    return;
  }
LABEL_22:
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a3, (uint64_t *)a4);
  float v21 = a3[186];
  float v22 = a2[186];
  if (v21 == v22)
  {
    uint64_t v23 = *(void *)a3;
    if (*(void *)a3)
    {
      uint64_t v24 = 240 * v23;
      uint64_t v25 = *((void *)a3 + 1);
      while ((*(unsigned char *)(v25 + 105) & 1) == 0)
      {
        v25 += 240;
        v24 -= 240;
        if (!v24) {
          goto LABEL_42;
        }
      }
    }
    else
    {
      uint64_t v25 = *((void *)a3 + 1);
    }
    if (v25 != *((void *)a3 + 1) + 240 * v23)
    {
      uint64_t v26 = *(void *)a2;
      if (*(void *)a2)
      {
        uint64_t v27 = 240 * v26;
        uint64_t v28 = *((void *)a2 + 1);
        while ((*(unsigned char *)(v28 + 105) & 1) == 0)
        {
          v28 += 240;
          v27 -= 240;
          if (!v27) {
            goto LABEL_42;
          }
        }
      }
      else
      {
        uint64_t v28 = *((void *)a2 + 1);
      }
      if (v28 != *((void *)a2 + 1) + 240 * v26)
      {
        double v29 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a3));
        char v31 = v30;
        double v32 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a2));
        if (v31 && v33)
        {
          if (v29 <= v32) {
            return;
          }
          goto LABEL_43;
        }
        float v21 = a3[186];
        float v22 = a2[186];
      }
    }
  }
LABEL_42:
  if (v21 <= v22) {
    return;
  }
LABEL_43:
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a2, (uint64_t *)a3);
  float v34 = a2[186];
  float v35 = a1[186];
  if (v34 != v35) {
    goto LABEL_63;
  }
  uint64_t v36 = *(void *)a2;
  if (*(void *)a2)
  {
    uint64_t v37 = 240 * v36;
    uint64_t v38 = *((void *)a2 + 1);
    while ((*(unsigned char *)(v38 + 105) & 1) == 0)
    {
      v38 += 240;
      v37 -= 240;
      if (!v37) {
        goto LABEL_63;
      }
    }
  }
  else
  {
    uint64_t v38 = *((void *)a2 + 1);
  }
  if (v38 == *((void *)a2 + 1) + 240 * v36) {
    goto LABEL_63;
  }
  uint64_t v39 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v40 = 240 * v39;
    uint64_t v41 = *((void *)a1 + 1);
    while ((*(unsigned char *)(v41 + 105) & 1) == 0)
    {
      v41 += 240;
      v40 -= 240;
      if (!v40) {
        goto LABEL_63;
      }
    }
  }
  else
  {
    uint64_t v41 = *((void *)a1 + 1);
  }
  if (v41 == *((void *)a1 + 1) + 240 * v39)
  {
LABEL_63:
    if (v34 <= v35) {
      return;
    }
    goto LABEL_64;
  }
  double v42 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a2));
  char v44 = v43;
  double v45 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a1));
  if (!v44 || !v46)
  {
    float v34 = a2[186];
    float v35 = a1[186];
    goto LABEL_63;
  }
  if (v42 <= v45) {
    return;
  }
LABEL_64:

  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a1, (uint64_t *)a2);
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,0>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>(a1, a2, a3, a4);
  float v10 = a5[186];
  float v11 = a4[186];
  if (v10 == v11)
  {
    uint64_t v12 = *(void *)a5;
    if (*(void *)a5)
    {
      uint64_t v13 = 240 * v12;
      uint64_t v14 = *((void *)a5 + 1);
      while ((*(unsigned char *)(v14 + 105) & 1) == 0)
      {
        v14 += 240;
        v13 -= 240;
        if (!v13) {
          goto LABEL_21;
        }
      }
    }
    else
    {
      uint64_t v14 = *((void *)a5 + 1);
    }
    if (v14 != *((void *)a5 + 1) + 240 * v12)
    {
      uint64_t v15 = *(void *)a4;
      if (*(void *)a4)
      {
        uint64_t v16 = 240 * v15;
        uint64_t v17 = *((void *)a4 + 1);
        while ((*(unsigned char *)(v17 + 105) & 1) == 0)
        {
          v17 += 240;
          v16 -= 240;
          if (!v16) {
            goto LABEL_21;
          }
        }
      }
      else
      {
        uint64_t v17 = *((void *)a4 + 1);
      }
      if (v17 != *((void *)a4 + 1) + 240 * v15)
      {
        double v18 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a5));
        char v20 = v19;
        double v21 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a4));
        if (v20 && v22)
        {
          if (v18 <= v21) {
            return;
          }
          goto LABEL_22;
        }
        float v10 = a5[186];
        float v11 = a4[186];
      }
    }
  }
LABEL_21:
  if (v10 <= v11) {
    return;
  }
LABEL_22:
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a4, (uint64_t *)a5);
  float v23 = a4[186];
  float v24 = a3[186];
  if (v23 == v24)
  {
    uint64_t v25 = *(void *)a4;
    if (*(void *)a4)
    {
      uint64_t v26 = 240 * v25;
      uint64_t v27 = *((void *)a4 + 1);
      while ((*(unsigned char *)(v27 + 105) & 1) == 0)
      {
        v27 += 240;
        v26 -= 240;
        if (!v26) {
          goto LABEL_42;
        }
      }
    }
    else
    {
      uint64_t v27 = *((void *)a4 + 1);
    }
    if (v27 != *((void *)a4 + 1) + 240 * v25)
    {
      uint64_t v28 = *(void *)a3;
      if (*(void *)a3)
      {
        uint64_t v29 = 240 * v28;
        uint64_t v30 = *((void *)a3 + 1);
        while ((*(unsigned char *)(v30 + 105) & 1) == 0)
        {
          v30 += 240;
          v29 -= 240;
          if (!v29) {
            goto LABEL_42;
          }
        }
      }
      else
      {
        uint64_t v30 = *((void *)a3 + 1);
      }
      if (v30 != *((void *)a3 + 1) + 240 * v28)
      {
        double v31 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a4));
        char v33 = v32;
        double v34 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a3));
        if (v33 && v35)
        {
          if (v31 <= v34) {
            return;
          }
          goto LABEL_43;
        }
        float v23 = a4[186];
        float v24 = a3[186];
      }
    }
  }
LABEL_42:
  if (v23 <= v24) {
    return;
  }
LABEL_43:
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a3, (uint64_t *)a4);
  float v36 = a3[186];
  float v37 = a2[186];
  if (v36 == v37)
  {
    uint64_t v38 = *(void *)a3;
    if (*(void *)a3)
    {
      uint64_t v39 = 240 * v38;
      uint64_t v40 = *((void *)a3 + 1);
      while ((*(unsigned char *)(v40 + 105) & 1) == 0)
      {
        v40 += 240;
        v39 -= 240;
        if (!v39) {
          goto LABEL_63;
        }
      }
    }
    else
    {
      uint64_t v40 = *((void *)a3 + 1);
    }
    if (v40 != *((void *)a3 + 1) + 240 * v38)
    {
      uint64_t v41 = *(void *)a2;
      if (*(void *)a2)
      {
        uint64_t v42 = 240 * v41;
        uint64_t v43 = *((void *)a2 + 1);
        while ((*(unsigned char *)(v43 + 105) & 1) == 0)
        {
          v43 += 240;
          v42 -= 240;
          if (!v42) {
            goto LABEL_63;
          }
        }
      }
      else
      {
        uint64_t v43 = *((void *)a2 + 1);
      }
      if (v43 != *((void *)a2 + 1) + 240 * v41)
      {
        double v44 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a3));
        char v46 = v45;
        double v47 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a2));
        if (v46 && v48)
        {
          if (v44 <= v47) {
            return;
          }
          goto LABEL_64;
        }
        float v36 = a3[186];
        float v37 = a2[186];
      }
    }
  }
LABEL_63:
  if (v36 <= v37) {
    return;
  }
LABEL_64:
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a2, (uint64_t *)a3);
  float v49 = a2[186];
  float v50 = a1[186];
  if (v49 != v50) {
    goto LABEL_84;
  }
  uint64_t v51 = *(void *)a2;
  if (*(void *)a2)
  {
    uint64_t v52 = 240 * v51;
    uint64_t v53 = *((void *)a2 + 1);
    while ((*(unsigned char *)(v53 + 105) & 1) == 0)
    {
      v53 += 240;
      v52 -= 240;
      if (!v52) {
        goto LABEL_84;
      }
    }
  }
  else
  {
    uint64_t v53 = *((void *)a2 + 1);
  }
  if (v53 == *((void *)a2 + 1) + 240 * v51) {
    goto LABEL_84;
  }
  uint64_t v54 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v55 = 240 * v54;
    uint64_t v56 = *((void *)a1 + 1);
    while ((*(unsigned char *)(v56 + 105) & 1) == 0)
    {
      v56 += 240;
      v55 -= 240;
      if (!v55) {
        goto LABEL_84;
      }
    }
  }
  else
  {
    uint64_t v56 = *((void *)a1 + 1);
  }
  if (v56 == *((void *)a1 + 1) + 240 * v54)
  {
LABEL_84:
    if (v49 <= v50) {
      return;
    }
    goto LABEL_85;
  }
  double v57 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a2));
  char v59 = v58;
  double v60 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a1));
  if (!v59 || !v61)
  {
    float v49 = a2[186];
    float v50 = a1[186];
    goto LABEL_84;
  }
  if (v57 <= v60) {
    return;
  }
LABEL_85:

  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a1, (uint64_t *)a2);
}

void std::__partial_sort[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,KB::Candidate *>(KB::Candidate *a1, KB::Candidate *this, uint64_t *a3)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (a1 != this)
  {
    BOOL v4 = (uint64_t *)this;
    uint64_t v5 = (uint64_t)a1;
    uint64_t v6 = this - a1;
    uint64_t v7 = (this - a1) / 1000;
    if (this - a1 >= 1001)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      uint64_t v10 = (uint64_t)a1 + 1000 * v8;
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>(v5, v7, v10);
        v10 -= 1000;
        --v9;
      }
      while (v9);
    }
    uint64_t v79 = v5;
    if (v4 != a3)
    {
      for (uint64_t i = v4; i != a3; i += 125)
      {
        float v12 = *((float *)i + 186);
        float v13 = *(float *)(v5 + 744);
        if (v12 == v13)
        {
          uint64_t v14 = *i;
          if (*i)
          {
            uint64_t v15 = 240 * v14;
            uint64_t v16 = i[1];
            while ((*(unsigned char *)(v16 + 105) & 1) == 0)
            {
              v16 += 240;
              v15 -= 240;
              if (!v15) {
                goto LABEL_28;
              }
            }
          }
          else
          {
            uint64_t v16 = i[1];
          }
          if (v16 != i[1] + 240 * v14)
          {
            uint64_t v17 = *(void *)v5;
            if (*(void *)v5)
            {
              uint64_t v18 = 240 * v17;
              uint64_t v19 = *(void *)(v5 + 8);
              while ((*(unsigned char *)(v19 + 105) & 1) == 0)
              {
                v19 += 240;
                v18 -= 240;
                if (!v18) {
                  goto LABEL_28;
                }
              }
            }
            else
            {
              uint64_t v19 = *(void *)(v5 + 8);
            }
            if (v19 != *(void *)(v5 + 8) + 240 * v17)
            {
              CFStringRef v20 = KB::Candidate::named_entity_timestamp((KB::Candidate *)i);
              double v21 = (KB::Candidate *)v5;
              double v22 = *(double *)&v20;
              char v24 = v23;
              double v25 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp(v21));
              if (v24 && v26)
              {
                BOOL v27 = v22 <= v25;
                uint64_t v5 = v79;
                if (v27) {
                  continue;
                }
LABEL_29:
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(i, (uint64_t *)v5);
                std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>(v5, v7, v5);
                continue;
              }
              float v12 = *((float *)i + 186);
              uint64_t v5 = v79;
              float v13 = *(float *)(v79 + 744);
            }
          }
        }
LABEL_28:
        if (v12 > v13) {
          goto LABEL_29;
        }
      }
    }
    if (v6 >= 1001)
    {
      int64_t v28 = v6 / 0x3E8uLL;
      do
      {
        uint64_t v78 = v4;
        KB::Candidate::Candidate((uint64_t)v80, v5);
        uint64_t v29 = 0;
        uint64_t v30 = v5;
        do
        {
          double v31 = (uint64_t *)v30;
          uint64_t v32 = v29 + 1;
          v30 += 1000 * (v29 + 1);
          uint64_t v33 = 2 * v29;
          uint64_t v29 = (2 * v29) | 1;
          uint64_t v34 = v33 + 2;
          if (v33 + 2 >= v28) {
            goto LABEL_58;
          }
          char v35 = &v31[125 * v32];
          float v36 = *((float *)v35 + 186);
          float v37 = *(float *)(v30 + 1744);
          if (v36 != v37) {
            goto LABEL_56;
          }
          uint64_t v38 = *(void *)v30;
          if (*(void *)v30)
          {
            uint64_t v39 = 240 * v38;
            uint64_t v40 = *(void *)(v30 + 8);
            while ((*(unsigned char *)(v40 + 105) & 1) == 0)
            {
              v40 += 240;
              v39 -= 240;
              if (!v39) {
                goto LABEL_56;
              }
            }
          }
          else
          {
            uint64_t v40 = *(void *)(v30 + 8);
          }
          if (v40 == *(void *)(v30 + 8) + 240 * v38) {
            goto LABEL_56;
          }
          uint64_t v41 = *(void *)(v30 + 1000);
          if (v41)
          {
            uint64_t v42 = 240 * v41;
            uint64_t v43 = *(void *)(v30 + 1008);
            while ((*(unsigned char *)(v43 + 105) & 1) == 0)
            {
              v43 += 240;
              v42 -= 240;
              if (!v42) {
                goto LABEL_56;
              }
            }
          }
          else
          {
            uint64_t v43 = *(void *)(v30 + 1008);
          }
          if (v43 == *(void *)(v30 + 1008) + 240 * v41) {
            goto LABEL_56;
          }
          double v44 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v30));
          char v46 = v45;
          double v47 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)(v30 + 1000)));
          if (!v46 || !v48)
          {
            float v36 = *((float *)v35 + 186);
            float v37 = *(float *)(v30 + 1744);
            uint64_t v5 = v79;
LABEL_56:
            if (v36 <= v37) {
              goto LABEL_58;
            }
LABEL_57:
            v30 += 1000;
            uint64_t v29 = v34;
            goto LABEL_58;
          }
          BOOL v27 = v44 <= v47;
          uint64_t v5 = v79;
          if (!v27) {
            goto LABEL_57;
          }
LABEL_58:
          KB::Candidate::operator=(v31, (uint64_t *)v30);
        }
        while (v29 <= (uint64_t)((unint64_t)(v28 - 2) >> 1));
        BOOL v4 = v78 - 125;
        if ((uint64_t *)v30 == v78 - 125)
        {
          KB::Candidate::operator=((uint64_t *)v30, v80);
          goto LABEL_108;
        }
        KB::Candidate::operator=((uint64_t *)v30, v78 - 125);
        KB::Candidate::operator=(v4, v80);
        uint64_t v49 = v30 - v5 + 1000;
        if (v49 < 1001) {
          goto LABEL_108;
        }
        unint64_t v50 = (v49 / 0x3E8uLL - 2) >> 1;
        unint64_t v51 = v5 + 1000 * v50;
        float v52 = *(float *)(v51 + 744);
        float v53 = *(float *)(v30 + 744);
        if (v52 != v53) {
          goto LABEL_82;
        }
        uint64_t v54 = *(void *)v51;
        if (*(void *)v51)
        {
          uint64_t v55 = 240 * v54;
          uint64_t v56 = *(void *)(v51 + 8);
          while ((*(unsigned char *)(v56 + 105) & 1) == 0)
          {
            v56 += 240;
            v55 -= 240;
            if (!v55) {
              goto LABEL_82;
            }
          }
        }
        else
        {
          uint64_t v56 = *(void *)(v51 + 8);
        }
        if (v56 == *(void *)(v51 + 8) + 240 * v54) {
          goto LABEL_82;
        }
        uint64_t v57 = *(void *)v30;
        if (*(void *)v30)
        {
          uint64_t v58 = 240 * v57;
          uint64_t v59 = *(void *)(v30 + 8);
          while ((*(unsigned char *)(v59 + 105) & 1) == 0)
          {
            v59 += 240;
            v58 -= 240;
            if (!v58) {
              goto LABEL_82;
            }
          }
        }
        else
        {
          uint64_t v59 = *(void *)(v30 + 8);
        }
        if (v59 == *(void *)(v30 + 8) + 240 * v57) {
          goto LABEL_82;
        }
        double v60 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v51));
        char v62 = v61;
        double v63 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v30));
        if (!v62 || !v64)
        {
          float v52 = *(float *)(v51 + 744);
          float v53 = *(float *)(v30 + 744);
          uint64_t v5 = v79;
LABEL_82:
          if (v52 <= v53) {
            goto LABEL_108;
          }
LABEL_83:
          KB::Candidate::Candidate((uint64_t)&v81, v30);
          while (1)
          {
            double v65 = (uint64_t *)v51;
            KB::Candidate::operator=((uint64_t *)v30, (uint64_t *)v51);
            if (!v50)
            {
LABEL_107:
              KB::Candidate::operator=(v65, &v81);
              KB::Candidate::~Candidate((KB::Candidate *)&v81);
              goto LABEL_108;
            }
            unint64_t v50 = (v50 - 1) >> 1;
            unint64_t v51 = v5 + 1000 * v50;
            float v66 = *(float *)(v51 + 744);
            float v67 = v83;
            if (v66 == v83)
            {
              uint64_t v68 = *(void *)v51;
              if (*(void *)v51)
              {
                uint64_t v69 = 240 * v68;
                uint64_t v70 = *(void *)(v51 + 8);
                while ((*(unsigned char *)(v70 + 105) & 1) == 0)
                {
                  v70 += 240;
                  v69 -= 240;
                  if (!v69) {
                    goto LABEL_106;
                  }
                }
              }
              else
              {
                uint64_t v70 = *(void *)(v51 + 8);
              }
              if (v70 != *(void *)(v51 + 8) + 240 * v68)
              {
                if (v81)
                {
                  uint64_t v71 = 240 * v81;
                  uint64_t v72 = v82;
                  while ((*(unsigned char *)(v72 + 105) & 1) == 0)
                  {
                    v72 += 240;
                    v71 -= 240;
                    if (!v71) {
                      goto LABEL_106;
                    }
                  }
                }
                else
                {
                  uint64_t v72 = v82;
                }
                if (v72 != v82 + 240 * v81)
                {
                  double v73 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)(v5 + 1000 * v50)));
                  char v75 = v74;
                  double v76 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v81));
                  if (v75 && v77)
                  {
                    BOOL v27 = v73 <= v76;
                    uint64_t v30 = (uint64_t)v65;
                    uint64_t v5 = v79;
                    if (v27) {
                      goto LABEL_107;
                    }
                    continue;
                  }
                  float v66 = *(float *)(v51 + 744);
                  float v67 = v83;
                  uint64_t v5 = v79;
                }
              }
            }
LABEL_106:
            uint64_t v30 = (uint64_t)v65;
            if (v66 <= v67) {
              goto LABEL_107;
            }
          }
        }
        uint64_t v5 = v79;
        if (v60 > v63) {
          goto LABEL_83;
        }
LABEL_108:
        KB::Candidate::~Candidate((KB::Candidate *)v80);
        BOOL v27 = v28-- <= 2;
      }
      while (!v27);
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>(float *a1, uint64_t *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  BOOL v4 = 1;
  switch(0x1CAC083126E978D5 * (((char *)a2 - (char *)a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2 - 125;
      float v6 = *((float *)a2 - 64);
      float v7 = a1[186];
      if (v6 != v7) {
        goto LABEL_78;
      }
      uint64_t v8 = *v5;
      if (*v5)
      {
        uint64_t v9 = 240 * v8;
        uint64_t v10 = *(a2 - 124);
        while ((*(unsigned char *)(v10 + 105) & 1) == 0)
        {
          v10 += 240;
          v9 -= 240;
          if (!v9) {
            goto LABEL_78;
          }
        }
      }
      else
      {
        uint64_t v10 = *(a2 - 124);
      }
      if (v10 == *(a2 - 124) + 240 * v8) {
        goto LABEL_78;
      }
      uint64_t v41 = *(void *)a1;
      if (*(void *)a1)
      {
        uint64_t v42 = 240 * v41;
        uint64_t v43 = *((void *)a1 + 1);
        while ((*(unsigned char *)(v43 + 105) & 1) == 0)
        {
          v43 += 240;
          v42 -= 240;
          if (!v42) {
            goto LABEL_78;
          }
        }
      }
      else
      {
        uint64_t v43 = *((void *)a1 + 1);
      }
      if (v43 == *((void *)a1 + 1) + 240 * v41) {
        goto LABEL_78;
      }
      double v44 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)(a2 - 125)));
      char v46 = v45;
      double v47 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)a1));
      if (v46 && v48)
      {
        if (v44 <= v47) {
          return 1;
        }
      }
      else
      {
        float v6 = *((float *)a2 - 64);
        float v7 = a1[186];
LABEL_78:
        if (v6 <= v7) {
          return 1;
        }
      }
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a1, a2 - 125);
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>(a1, (KB::Candidate *)(a1 + 250), (float *)a2 - 250);
      return v4;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>(a1, a1 + 250, a1 + 500, (float *)a2 - 250);
      return v4;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,0>(a1, a1 + 250, a1 + 500, a1 + 750, (float *)a2 - 250);
      return v4;
    default:
      uint64_t v11 = (uint64_t)(a1 + 500);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>(a1, (KB::Candidate *)(a1 + 250), a1 + 500);
      uint64_t v12 = (uint64_t)(a1 + 750);
      if (a1 + 750 == (float *)a2) {
        return 1;
      }
      int v13 = 0;
      break;
  }
  while (1)
  {
    float v14 = *(float *)(v12 + 744);
    float v15 = *(float *)(v11 + 744);
    if (v14 != v15) {
      break;
    }
    uint64_t v16 = *(void *)v12;
    if (*(void *)v12)
    {
      uint64_t v17 = 240 * v16;
      uint64_t v18 = *(void *)(v12 + 8);
      while ((*(unsigned char *)(v18 + 105) & 1) == 0)
      {
        v18 += 240;
        v17 -= 240;
        if (!v17) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      uint64_t v18 = *(void *)(v12 + 8);
    }
    if (v18 == *(void *)(v12 + 8) + 240 * v16) {
      break;
    }
    uint64_t v19 = *(void *)v11;
    if (*(void *)v11)
    {
      uint64_t v20 = 240 * v19;
      uint64_t v21 = *(void *)(v11 + 8);
      while ((*(unsigned char *)(v21 + 105) & 1) == 0)
      {
        v21 += 240;
        v20 -= 240;
        if (!v20) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      uint64_t v21 = *(void *)(v11 + 8);
    }
    if (v21 == *(void *)(v11 + 8) + 240 * v19) {
      break;
    }
    double v22 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v12));
    char v24 = v23;
    double v25 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v11));
    if (!v24 || !v26)
    {
      float v14 = *(float *)(v12 + 744);
      float v15 = *(float *)(v11 + 744);
      break;
    }
    if (v22 > v25) {
      goto LABEL_31;
    }
LABEL_58:
    uint64_t v11 = v12;
    v12 += 1000;
    if ((uint64_t *)v12 == a2) {
      return 1;
    }
  }
LABEL_30:
  if (v14 <= v15) {
    goto LABEL_58;
  }
LABEL_31:
  KB::Candidate::Candidate((uint64_t)&v50, v12);
  BOOL v27 = (uint64_t *)v12;
  while (1)
  {
    int64_t v28 = v27;
    BOOL v27 = (uint64_t *)v11;
    KB::Candidate::operator=(v28, (uint64_t *)v11);
    if ((float *)v11 == a1) {
      break;
    }
    v11 -= 1000;
    float v29 = v52;
    float v30 = *((float *)v27 - 64);
    if (v52 != v30) {
      goto LABEL_53;
    }
    if (v50)
    {
      uint64_t v31 = 240 * v50;
      uint64_t v32 = v51;
      while ((*(unsigned char *)(v32 + 105) & 1) == 0)
      {
        v32 += 240;
        v31 -= 240;
        if (!v31) {
          goto LABEL_53;
        }
      }
    }
    else
    {
      uint64_t v32 = v51;
    }
    if (v32 == v51 + 240 * v50) {
      goto LABEL_53;
    }
    uint64_t v33 = *(void *)v11;
    if (*(void *)v11)
    {
      uint64_t v34 = 240 * v33;
      uint64_t v35 = *(v27 - 124);
      while ((*(unsigned char *)(v35 + 105) & 1) == 0)
      {
        v35 += 240;
        v34 -= 240;
        if (!v34) {
          goto LABEL_53;
        }
      }
    }
    else
    {
      uint64_t v35 = *(v27 - 124);
    }
    if (v35 == *(v27 - 124) + 240 * v33) {
      goto LABEL_53;
    }
    double v36 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v50));
    char v38 = v37;
    double v39 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)(v27 - 125)));
    if (v38 && v40)
    {
      if (v36 <= v39) {
        goto LABEL_56;
      }
    }
    else
    {
      float v29 = v52;
      float v30 = *((float *)v27 - 64);
LABEL_53:
      if (v29 <= v30) {
        goto LABEL_56;
      }
    }
  }
  BOOL v27 = (uint64_t *)a1;
LABEL_56:
  KB::Candidate::operator=(v27, &v50);
  if (++v13 != 8)
  {
    KB::Candidate::~Candidate((KB::Candidate *)&v50);
    goto LABEL_58;
  }
  BOOL v4 = v12 + 1000 == (void)a2;
  KB::Candidate::~Candidate((KB::Candidate *)&v50);
  return v4;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= 0x1CAC083126E978D5 * ((a3 - a1) >> 3))
    {
      uint64_t v8 = (0x395810624DD2F1AALL * ((a3 - a1) >> 3)) | 1;
      uint64_t v9 = (float *)(a1 + 1000 * v8);
      uint64_t v10 = 0x395810624DD2F1AALL * ((a3 - a1) >> 3) + 2;
      if (v10 < a2)
      {
        uint64_t v11 = a1 + 1000 * v8;
        float v12 = *(float *)(v11 + 744);
        float v13 = v9[436];
        if (v12 == v13)
        {
          uint64_t v14 = *(void *)v9;
          if (*(void *)v9)
          {
            uint64_t v15 = 240 * v14;
            uint64_t v16 = *((void *)v9 + 1);
            while ((*(unsigned char *)(v16 + 105) & 1) == 0)
            {
              v16 += 240;
              v15 -= 240;
              if (!v15) {
                goto LABEL_24;
              }
            }
          }
          else
          {
            uint64_t v16 = *((void *)v9 + 1);
          }
          if (v16 != *((void *)v9 + 1) + 240 * v14)
          {
            uint64_t v17 = *((void *)v9 + 125);
            if (v17)
            {
              uint64_t v18 = 240 * v17;
              uint64_t v19 = *((void *)v9 + 126);
              while ((*(unsigned char *)(v19 + 105) & 1) == 0)
              {
                v19 += 240;
                v18 -= 240;
                if (!v18) {
                  goto LABEL_24;
                }
              }
            }
            else
            {
              uint64_t v19 = *((void *)v9 + 126);
            }
            if (v19 != *((void *)v9 + 126) + 240 * v17)
            {
              double v67 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)(a1 + 1000 * v8)));
              char v21 = v20;
              double v22 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)(v9 + 250)));
              if (v21 && v23)
              {
                if (v67 <= v22) {
                  goto LABEL_26;
                }
                goto LABEL_25;
              }
              float v12 = *(float *)(v11 + 744);
              float v13 = v9[436];
            }
          }
        }
LABEL_24:
        if (v12 > v13)
        {
LABEL_25:
          v9 += 250;
          uint64_t v8 = v10;
        }
      }
LABEL_26:
      float v24 = v9[186];
      float v25 = *(float *)(v4 + 744);
      if (v24 == v25)
      {
        uint64_t v26 = *(void *)v9;
        if (*(void *)v9)
        {
          uint64_t v27 = 240 * v26;
          uint64_t v28 = *((void *)v9 + 1);
          while ((*(unsigned char *)(v28 + 105) & 1) == 0)
          {
            v28 += 240;
            v27 -= 240;
            if (!v27) {
              goto LABEL_46;
            }
          }
        }
        else
        {
          uint64_t v28 = *((void *)v9 + 1);
        }
        if (v28 != *((void *)v9 + 1) + 240 * v26)
        {
          uint64_t v29 = *(void *)v4;
          if (*(void *)v4)
          {
            uint64_t v30 = 240 * v29;
            uint64_t v31 = *(void *)(v4 + 8);
            while ((*(unsigned char *)(v31 + 105) & 1) == 0)
            {
              v31 += 240;
              v30 -= 240;
              if (!v30) {
                goto LABEL_46;
              }
            }
          }
          else
          {
            uint64_t v31 = *(void *)(v4 + 8);
          }
          if (v31 != *(void *)(v4 + 8) + 240 * v29)
          {
            double v32 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v9));
            char v34 = v33;
            double v35 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v4));
            if (v34 && v36)
            {
              if (v32 > v35) {
                return;
              }
              goto LABEL_47;
            }
            float v24 = v9[186];
            float v25 = *(float *)(v4 + 744);
          }
        }
      }
LABEL_46:
      if (v24 > v25) {
        return;
      }
LABEL_47:
      KB::Candidate::Candidate((uint64_t)&v69, v4);
      while (1)
      {
        char v37 = (uint64_t *)v9;
        KB::Candidate::operator=((uint64_t *)v4, (uint64_t *)v9);
        if (v6 < v8)
        {
LABEL_93:
          KB::Candidate::operator=(v37, &v69);
          KB::Candidate::~Candidate((KB::Candidate *)&v69);
          return;
        }
        uint64_t v38 = 2 * v8;
        uint64_t v39 = (2 * v8) | 1;
        uint64_t v8 = v39;
        uint64_t v9 = (float *)(a1 + 1000 * v39);
        uint64_t v40 = v38 + 2;
        if (v38 + 2 < a2)
        {
          uint64_t v41 = a1 + 1000 * v39;
          float v42 = *(float *)(v41 + 744);
          float v43 = v9[436];
          if (v42 == v43)
          {
            uint64_t v44 = *(void *)v9;
            if (*(void *)v9)
            {
              uint64_t v45 = 240 * v44;
              uint64_t v46 = *((void *)v9 + 1);
              while ((*(unsigned char *)(v46 + 105) & 1) == 0)
              {
                v46 += 240;
                v45 -= 240;
                if (!v45) {
                  goto LABEL_70;
                }
              }
            }
            else
            {
              uint64_t v46 = *((void *)v9 + 1);
            }
            if (v46 != *((void *)v9 + 1) + 240 * v44)
            {
              uint64_t v47 = *((void *)v9 + 125);
              if (v47)
              {
                uint64_t v48 = 240 * v47;
                uint64_t v49 = *((void *)v9 + 126);
                while ((*(unsigned char *)(v49 + 105) & 1) == 0)
                {
                  v49 += 240;
                  v48 -= 240;
                  if (!v48) {
                    goto LABEL_70;
                  }
                }
              }
              else
              {
                uint64_t v49 = *((void *)v9 + 126);
              }
              if (v49 != *((void *)v9 + 126) + 240 * v47)
              {
                double v68 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v9));
                char v51 = v50;
                double v52 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)(v9 + 250)));
                if (v51 && v53)
                {
                  if (v68 <= v52) {
                    goto LABEL_72;
                  }
LABEL_71:
                  v9 += 250;
                  uint64_t v8 = v40;
                  goto LABEL_72;
                }
                float v42 = *(float *)(v41 + 744);
                float v43 = v9[436];
              }
            }
          }
LABEL_70:
          if (v42 > v43) {
            goto LABEL_71;
          }
        }
LABEL_72:
        float v54 = v9[186];
        float v55 = v71;
        if (v54 != v71) {
          goto LABEL_91;
        }
        uint64_t v56 = *(void *)v9;
        if (*(void *)v9)
        {
          uint64_t v57 = 240 * v56;
          uint64_t v58 = *((void *)v9 + 1);
          while ((*(unsigned char *)(v58 + 105) & 1) == 0)
          {
            v58 += 240;
            v57 -= 240;
            if (!v57) {
              goto LABEL_91;
            }
          }
        }
        else
        {
          uint64_t v58 = *((void *)v9 + 1);
        }
        if (v58 == *((void *)v9 + 1) + 240 * v56) {
          goto LABEL_91;
        }
        if (v69)
        {
          uint64_t v59 = 240 * v69;
          uint64_t v60 = v70;
          while ((*(unsigned char *)(v60 + 105) & 1) == 0)
          {
            v60 += 240;
            v59 -= 240;
            if (!v59) {
              goto LABEL_91;
            }
          }
        }
        else
        {
          uint64_t v60 = v70;
        }
        if (v60 == v70 + 240 * v69) {
          goto LABEL_91;
        }
        double v61 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)v9));
        char v63 = v62;
        double v64 = COERCE_DOUBLE(KB::Candidate::named_entity_timestamp((KB::Candidate *)&v69));
        if (!v63 || !v65)
        {
          float v54 = v9[186];
          float v55 = v71;
LABEL_91:
          BOOL v66 = v54 <= v55;
          goto LABEL_92;
        }
        BOOL v66 = v61 <= v64;
LABEL_92:
        uint64_t v4 = (uint64_t)v37;
        if (!v66) {
          goto LABEL_93;
        }
      }
    }
  }
}

void KB::CandidateCollection::sort_by_word_score(KB::CandidateCollection *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 1);
  unint64_t v2 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v1 - *(void *)this) >> 3));
  if (v1 == *(uint64_t **)this) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *,false>(*(void *)this, v1, v3, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *,false>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0x1CAC083126E978D5 * ((uint64_t)((uint64_t)a2 - v10) >> 3);
          if (!(!v5 & v4))
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((float *)a2 - 62) <= *(float *)(v10 + 752)) {
                  return;
                }
                char v36 = (uint64_t *)v10;
                char v37 = a2 - 125;
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(v10, v10 + 1000, (uint64_t)(a2 - 125));
                return;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(v10, v10 + 1000, v10 + 2000, (uint64_t)(a2 - 125));
                return;
              case 5uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(v10, v10 + 1000, v10 + 2000, v10 + 3000);
                if (*((float *)a2 - 62) <= *(float *)(v10 + 3752)) {
                  return;
                }
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)(v10 + 3000), a2 - 125);
                if (*(float *)(v10 + 3752) <= *(float *)(v10 + 2752)) {
                  return;
                }
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)(v10 + 2000), (uint64_t *)(v10 + 3000));
                if (*(float *)(v10 + 2752) <= *(float *)(v10 + 1752)) {
                  return;
                }
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)(v10 + 1000), (uint64_t *)(v10 + 2000));
                if (*(float *)(v10 + 1752) <= *(float *)(v10 + 752)) {
                  return;
                }
                char v36 = (uint64_t *)v10;
                char v37 = (uint64_t *)(v10 + 1000);
                break;
              default:
                JUMPOUT(0);
            }
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v36, v37);
            return;
          }
          if (v11 <= 23999)
          {
            if (a4)
            {
              if ((uint64_t *)v10 != a2)
              {
                uint64_t v38 = v10 + 1000;
                if ((uint64_t *)(v10 + 1000) != a2)
                {
                  uint64_t v39 = 0;
                  unint64_t v40 = v10;
                  do
                  {
                    float v41 = *(float *)(v40 + 1752);
                    float v42 = *(float *)(v40 + 752);
                    unint64_t v40 = v38;
                    if (v41 > v42)
                    {
                      KB::Candidate::Candidate((uint64_t)v49, v38);
                      uint64_t v43 = v39;
                      while (1)
                      {
                        KB::Candidate::operator=((uint64_t *)(v10 + v43 + 1000), (uint64_t *)(v10 + v43));
                        if (!v43) {
                          break;
                        }
                        float v44 = *(float *)(v10 + v43 - 248);
                        v43 -= 1000;
                        if (v50 <= v44)
                        {
                          uint64_t v45 = (uint64_t *)(v10 + v43 + 1000);
                          goto LABEL_75;
                        }
                      }
                      uint64_t v45 = (uint64_t *)v10;
LABEL_75:
                      KB::Candidate::operator=(v45, v49);
                      KB::Candidate::~Candidate((KB::Candidate *)v49);
                    }
                    uint64_t v38 = v40 + 1000;
                    v39 += 1000;
                  }
                  while ((uint64_t *)(v40 + 1000) != a2);
                }
              }
            }
            else if ((uint64_t *)v10 != a2)
            {
              uint64_t v46 = v10 + 1000;
              while ((uint64_t *)v46 != a2)
              {
                uint64_t v47 = v46;
                if (*(float *)(a1 + 1752) > *(float *)(a1 + 752))
                {
                  KB::Candidate::Candidate((uint64_t)v49, v46);
                  do
                  {
                    uint64_t v48 = (uint64_t *)a1;
                    KB::Candidate::operator=((uint64_t *)(a1 + 1000), (uint64_t *)a1);
                    a1 -= 1000;
                  }
                  while (v50 > *((float *)v48 - 62));
                  KB::Candidate::operator=(v48, v49);
                  KB::Candidate::~Candidate((KB::Candidate *)v49);
                }
                uint64_t v46 = v47 + 1000;
                a1 = v47;
              }
            }
            return;
          }
          if (!a3)
          {
            std::__partial_sort[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *,KB::Candidate *>(v10, a2, a2);
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (uint64_t *)(v10 + 1000 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1F401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1, a1 + 1000 * (v12 >> 1), (uint64_t)(a2 - 125));
            uint64_t v15 = 1000 * v13;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1 + 1000, v15 + a1 - 1000, (uint64_t)(a2 - 250));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1 + 2000, a1 + 1000 + v15, (uint64_t)(a2 - 375));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(v15 + a1 - 1000, (uint64_t)v14, a1 + 1000 + v15);
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a1, v14);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1 + 1000 * (v12 >> 1), a1, (uint64_t)(a2 - 125));
          }
          --a3;
          if ((a4 & 1) != 0 || *(float *)(a1 - 248) > *(float *)(a1 + 752)) {
            break;
          }
          KB::Candidate::Candidate((uint64_t)v49, a1);
          if (v50 <= *((float *)a2 - 62))
          {
            unint64_t v29 = a1 + 1000;
            do
            {
              unint64_t v10 = v29;
              if (v29 >= (unint64_t)a2) {
                break;
              }
              float v30 = *(float *)(v29 + 752);
              v29 += 1000;
            }
            while (v50 <= v30);
          }
          else
          {
            uint64_t v27 = a1;
            do
            {
              unint64_t v10 = v27 + 1000;
              float v28 = *(float *)(v27 + 1752);
              v27 += 1000;
            }
            while (v50 <= v28);
          }
          uint64_t v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            double v32 = a2;
            do
            {
              uint64_t v31 = v32 - 125;
              float v33 = *((float *)v32 - 62);
              v32 -= 125;
            }
            while (v50 > v33);
          }
          while (v10 < (unint64_t)v31)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)v10, v31);
            do
            {
              float v34 = *(float *)(v10 + 1752);
              v10 += 1000;
            }
            while (v50 <= v34);
            do
            {
              float v35 = *((float *)v31 - 62);
              v31 -= 125;
            }
            while (v50 > v35);
          }
          if (v10 - 1000 != a1) {
            KB::Candidate::operator=((uint64_t *)a1, (uint64_t *)(v10 - 1000));
          }
          KB::Candidate::operator=((uint64_t *)(v10 - 1000), v49);
          KB::Candidate::~Candidate((KB::Candidate *)v49);
          a4 = 0;
        }
        KB::Candidate::Candidate((uint64_t)v49, a1);
        uint64_t v16 = (uint64_t *)a1;
        do
        {
          uint64_t v17 = (uint64_t)v16;
          v16 += 125;
        }
        while (*(float *)(v17 + 1752) > v50);
        uint64_t v18 = a2;
        if (v17 == a1)
        {
          char v21 = a2;
          while (v16 < v21)
          {
            uint64_t v19 = v21 - 125;
            float v22 = *((float *)v21 - 62);
            v21 -= 125;
            if (v22 > v50) {
              goto LABEL_22;
            }
          }
          uint64_t v19 = v21;
        }
        else
        {
          do
          {
            uint64_t v19 = v18 - 125;
            float v20 = *((float *)v18 - 62);
            v18 -= 125;
          }
          while (v20 <= v50);
        }
LABEL_22:
        if (v16 < v19)
        {
          char v23 = v19;
          float v24 = v16;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v24, v23);
            do
            {
              uint64_t v17 = (uint64_t)v24;
              v24 += 125;
            }
            while (*(float *)(v17 + 1752) > v50);
            do
            {
              float v25 = *((float *)v23 - 62);
              v23 -= 125;
            }
            while (v25 <= v50);
          }
          while (v24 < v23);
        }
        if (v17 != a1) {
          KB::Candidate::operator=((uint64_t *)a1, (uint64_t *)v17);
        }
        KB::Candidate::operator=((uint64_t *)v17, v49);
        KB::Candidate::~Candidate((KB::Candidate *)v49);
        if (v16 >= v19) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *,false>(a1, v17, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = v17 + 1000;
      }
      char v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1, v17);
      unint64_t v10 = v17 + 1000;
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(v17 + 1000, (uint64_t)a2))break; {
      if ((v26 & 1) == 0)
      }
        goto LABEL_33;
    }
    a2 = (uint64_t *)v17;
    if ((v26 & 1) == 0) {
      continue;
    }
    break;
  }
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  float v6 = *(float *)(a2 + 752);
  float v7 = *(float *)(a3 + 752);
  if (v6 <= *(float *)(a1 + 752))
  {
    if (v7 <= v6) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a2, (uint64_t *)a3);
    if (*(float *)(a2 + 752) <= *(float *)(v5 + 752)) {
      return;
    }
    a1 = v5;
    uint64_t v8 = (uint64_t *)a2;
  }
  else
  {
    if (v7 <= v6)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a1, (uint64_t *)a2);
      if (*(float *)(a3 + 752) <= *(float *)(a2 + 752)) {
        return;
      }
      a1 = a2;
    }
    uint64_t v8 = (uint64_t *)a3;
  }

  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a1, v8);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1, a2, a3);
  if (*(float *)(a4 + 752) > *(float *)(a3 + 752))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a3, (uint64_t *)a4);
    if (*(float *)(a3 + 752) > *(float *)(a2 + 752))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a2, (uint64_t *)a3);
      if (*(float *)(a2 + 752) > *(float *)(a1 + 752))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
}

void std::__partial_sort[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *,KB::Candidate *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((uint64_t *)a1 != a2)
  {
    char v4 = a2;
    uint64_t v6 = (uint64_t)a2 - a1;
    uint64_t v7 = ((uint64_t)a2 - a1) / 1000;
    if ((uint64_t)a2 - a1 >= 1001)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      uint64_t v10 = a1 + 1000 * v8;
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1, v7, v10);
        v10 -= 1000;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      uint64_t v11 = v4;
      do
      {
        if (*((float *)v11 + 188) > *(float *)(a1 + 752))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v11, (uint64_t *)a1);
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1, v7, a1);
        }
        v11 += 125;
      }
      while (v11 != a3);
    }
    if (v6 >= 1001)
    {
      int64_t v12 = v6 / 0x3E8uLL;
      do
      {
        KB::Candidate::Candidate((uint64_t)v23, a1);
        uint64_t v13 = 0;
        uint64_t v14 = a1;
        do
        {
          uint64_t v15 = (uint64_t *)v14;
          uint64_t v16 = v13 + 1;
          v14 += 1000 * (v13 + 1);
          uint64_t v17 = 2 * v13;
          uint64_t v13 = (2 * v13) | 1;
          int64_t v18 = v17 + 2;
          if (v18 < v12 && *(float *)&v15[125 * v16 + 94] > *(float *)(v14 + 1752))
          {
            v14 += 1000;
            uint64_t v13 = v18;
          }
          KB::Candidate::operator=(v15, (uint64_t *)v14);
        }
        while (v13 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
        v4 -= 125;
        if ((uint64_t *)v14 == v4)
        {
          KB::Candidate::operator=((uint64_t *)v14, v23);
        }
        else
        {
          KB::Candidate::operator=((uint64_t *)v14, v4);
          KB::Candidate::operator=(v4, v23);
          uint64_t v19 = v14 - a1 + 1000;
          if (v19 >= 1001)
          {
            unint64_t v20 = (v19 / 0x3E8uLL - 2) >> 1;
            if (*(float *)(a1 + 1000 * v20 + 752) > *(float *)(v14 + 752))
            {
              KB::Candidate::Candidate((uint64_t)v24, v14);
              do
              {
                char v21 = (uint64_t *)v14;
                uint64_t v14 = a1 + 1000 * v20;
                KB::Candidate::operator=(v21, (uint64_t *)v14);
                if (!v20) {
                  break;
                }
                unint64_t v20 = (v20 - 1) >> 1;
              }
              while (*(float *)(a1 + 1000 * v20 + 752) > v25);
              KB::Candidate::operator=((uint64_t *)v14, v24);
              KB::Candidate::~Candidate((KB::Candidate *)v24);
            }
          }
        }
        KB::Candidate::~Candidate((KB::Candidate *)v23);
      }
      while (v12-- > 2);
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  BOOL v4 = 1;
  switch(0x1CAC083126E978D5 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*(float *)(a2 - 248) > *(float *)(a1 + 752)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a1, (uint64_t *)(a2 - 1000));
      }
      return v4;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1, a1 + 1000, a2 - 1000);
      return v4;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1, a1 + 1000, a1 + 2000, a2 - 1000);
      return v4;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1, a1 + 1000, a1 + 2000, a1 + 3000);
      if (*(float *)(a2 - 248) > *(float *)(a1 + 3752))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)(a1 + 3000), (uint64_t *)(a2 - 1000));
        if (*(float *)(a1 + 3752) > *(float *)(a1 + 2752))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)(a1 + 2000), (uint64_t *)(a1 + 3000));
          if (*(float *)(a1 + 2752) > *(float *)(a1 + 1752))
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)(a1 + 1000), (uint64_t *)(a1 + 2000));
            if (*(float *)(a1 + 1752) > *(float *)(a1 + 752)) {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>((uint64_t *)a1, (uint64_t *)(a1 + 1000));
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v5 = a1 + 2000;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(a1, a1 + 1000, a1 + 2000);
      uint64_t v6 = a1 + 3000;
      if (a1 + 3000 == a2) {
        return 1;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      break;
  }
  while (*(float *)(v6 + 752) <= *(float *)(v5 + 752))
  {
LABEL_14:
    uint64_t v5 = v6;
    v7 += 1000;
    v6 += 1000;
    if (v6 == a2) {
      return 1;
    }
  }
  KB::Candidate::Candidate((uint64_t)v13, v6);
  uint64_t v9 = v7;
  while (1)
  {
    KB::Candidate::operator=((uint64_t *)(a1 + v9 + 3000), (uint64_t *)(a1 + v9 + 2000));
    if (v9 == -2000) {
      break;
    }
    float v10 = *(float *)(a1 + v9 + 1752);
    v9 -= 1000;
    if (v14 <= v10)
    {
      uint64_t v11 = (uint64_t *)(a1 + v9 + 3000);
      goto LABEL_12;
    }
  }
  uint64_t v11 = (uint64_t *)a1;
LABEL_12:
  KB::Candidate::operator=(v11, v13);
  if (++v8 != 8)
  {
    KB::Candidate::~Candidate((KB::Candidate *)v13);
    goto LABEL_14;
  }
  BOOL v4 = v6 + 1000 == a2;
  KB::Candidate::~Candidate((KB::Candidate *)v13);
  return v4;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    BOOL v4 = (uint64_t *)a3;
    uint64_t v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= 0x1CAC083126E978D5 * ((a3 - a1) >> 3))
    {
      uint64_t v8 = (0x395810624DD2F1AALL * ((a3 - a1) >> 3)) | 1;
      uint64_t v9 = a1 + 1000 * v8;
      if (0x395810624DD2F1AALL * ((a3 - a1) >> 3) + 2 < a2 && *(float *)(a1 + 1000 * v8 + 752) > *(float *)(v9 + 1752))
      {
        v9 += 1000;
        uint64_t v8 = 0x395810624DD2F1AALL * ((a3 - a1) >> 3) + 2;
      }
      if (*(float *)(v9 + 752) <= *(float *)(a3 + 752))
      {
        KB::Candidate::Candidate((uint64_t)v12, a3);
        do
        {
          float v10 = (uint64_t *)v9;
          KB::Candidate::operator=(v4, (uint64_t *)v9);
          if (v6 < v8) {
            break;
          }
          uint64_t v11 = (2 * v8) | 1;
          uint64_t v9 = a1 + 1000 * v11;
          if (2 * v8 + 2 < a2 && *(float *)(a1 + 1000 * v11 + 752) > *(float *)(v9 + 1752))
          {
            v9 += 1000;
            uint64_t v11 = 2 * v8 + 2;
          }
          BOOL v4 = v10;
          uint64_t v8 = v11;
        }
        while (*(float *)(v9 + 752) <= v13);
        KB::Candidate::operator=(v10, v12);
        KB::Candidate::~Candidate((KB::Candidate *)v12);
      }
    }
  }
}

BOOL KB::CandidateCollection::is_empty(KB::CandidateCollection *this)
{
  return *(void *)this == *((void *)this + 1)
      && *((void *)this + 6) == *((void *)this + 7)
      && *((void *)this + 9) == *((void *)this + 10);
}

void KB::CandidateCollection::normalize_scores(float32x2_t **this)
{
  uint64_t v1 = *this;
  unint64_t v2 = this[1];
  if (*this != v2)
  {
    float v3 = v1[93].f32[0];
    unint64_t v4 = 0x1CAC083126E978D5 * (v2 - v1);
    float v5 = 0.0;
    if (v4 >= 2)
    {
      unsigned int v6 = 2;
      uint64_t v7 = 1;
      do
      {
        float v5 = v5 + expf(v1[125 * v7 + 93].f32[0] - v3);
        uint64_t v7 = v6;
      }
      while (v4 > v6++);
    }
    *(float *)v9.i32 = v3 + log1pf(v5);
    float32x2_t v10 = (float32x2_t)vdup_lane_s32(v9, 0);
    do
    {
      v1[93] = vsub_f32(v1[93], v10);
      v1 += 125;
    }
    while (v1 != v2);
  }
}

unsigned __int16 *KB::CandidateCollection::debug_data@<X0>(KB::CandidateCollection *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 6) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  KB::String::append((unsigned __int16 *)a2, "{linguistic={", 0xFFFFuLL);
  uint64_t v4 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      KB::Candidate::capitalized_string((KB::Candidate *)(v4 + 1000 * v5), (uint64_t)v20);
      KB::String::append((unsigned __int16 *)a2, (const KB::String *)v20);
      if (v22) {
        BOOL v7 = v21 == 1;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7) {
        free(v22);
      }
      uint64_t v4 = *(void *)this;
      unint64_t v8 = 0x1CAC083126E978D5 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
      if (v8 > v6)
      {
        KB::String::append((unsigned __int16 *)a2, ", ", 0xFFFFuLL);
        uint64_t v4 = *(void *)this;
        unint64_t v8 = 0x1CAC083126E978D5 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
      }
      unint64_t v5 = v6++;
    }
    while (v8 > v5);
  }
  KB::String::append((unsigned __int16 *)a2, "}, proactive={", 0xFFFFuLL);
  uint64_t v9 = *((void *)this + 6);
  if (*((void *)this + 7) != v9)
  {
    unint64_t v10 = 0;
    unsigned int v11 = 1;
    do
    {
      KB::Candidate::capitalized_string((KB::Candidate *)(v9 + 1000 * v10), (uint64_t)v20);
      KB::String::append((unsigned __int16 *)a2, (const KB::String *)v20);
      if (v22) {
        BOOL v12 = v21 == 1;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12) {
        free(v22);
      }
      uint64_t v9 = *((void *)this + 6);
      unint64_t v13 = 0x1CAC083126E978D5 * ((*((void *)this + 7) - v9) >> 3);
      if (v13 > v11)
      {
        KB::String::append((unsigned __int16 *)a2, ", ", 0xFFFFuLL);
        uint64_t v9 = *((void *)this + 6);
        unint64_t v13 = 0x1CAC083126E978D5 * ((*((void *)this + 7) - v9) >> 3);
      }
      unint64_t v10 = v11++;
    }
    while (v13 > v10);
  }
  KB::String::append((unsigned __int16 *)a2, "}, exact_typed={", 0xFFFFuLL);
  uint64_t v14 = *((void *)this + 9);
  if (*((void *)this + 10) != v14)
  {
    unint64_t v15 = 0;
    unsigned int v16 = 1;
    do
    {
      KB::Candidate::capitalized_string((KB::Candidate *)(v14 + 1000 * v15), (uint64_t)v20);
      KB::String::append((unsigned __int16 *)a2, (const KB::String *)v20);
      if (v22) {
        BOOL v17 = v21 == 1;
      }
      else {
        BOOL v17 = 0;
      }
      if (v17) {
        free(v22);
      }
      uint64_t v14 = *((void *)this + 9);
      unint64_t v18 = 0x1CAC083126E978D5 * ((*((void *)this + 10) - v14) >> 3);
      if (v18 > v16)
      {
        KB::String::append((unsigned __int16 *)a2, ", ", 0xFFFFuLL);
        uint64_t v14 = *((void *)this + 9);
        unint64_t v18 = 0x1CAC083126E978D5 * ((*((void *)this + 10) - v14) >> 3);
      }
      unint64_t v15 = v16++;
    }
    while (v18 > v15);
  }
  return KB::String::append((unsigned __int16 *)a2, "}}", 0xFFFFuLL);
}

uint64_t KB::CandidateCollection::addOnlySupplementalCandidates(uint64_t result, uint64_t a2)
{
  float v3 = (uint64_t *)result;
  uint64_t v4 = *(void **)a2;
  unint64_t v5 = *(void **)(a2 + 8);
  if (*(void **)a2 != v5)
  {
    do
    {
      if (*v4)
      {
        unsigned int v6 = (uint64_t *)(v4[1] + 224);
        uint64_t v7 = 240 * *v4;
        while (1)
        {
          uint64_t v8 = *v6;
          v6 += 30;
          if (v8) {
            break;
          }
          v7 -= 240;
          if (!v7) {
            goto LABEL_20;
          }
        }
        unint64_t v9 = v3[1];
        unint64_t v10 = v3[2];
        if (v9 >= v10)
        {
          uint64_t v12 = 0x1CAC083126E978D5 * ((uint64_t)(v9 - *v3) >> 3);
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) > 0x4189374BC6A7EFLL) {
LABEL_64:
          }
            abort();
          unint64_t v14 = 0x1CAC083126E978D5 * ((uint64_t)(v10 - *v3) >> 3);
          if (2 * v14 > v13) {
            unint64_t v13 = 2 * v14;
          }
          if (v14 >= 0x20C49BA5E353F7) {
            unint64_t v15 = 0x4189374BC6A7EFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          double v52 = v3 + 2;
          if (v15) {
            unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v15);
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = v15 + 1000 * v12;
          unint64_t v48 = v15;
          uint64_t v49 = v17;
          unint64_t v51 = v15 + 1000 * v16;
          KB::Candidate::Candidate(v17, (uint64_t)v4);
          uint64_t v50 = v17 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer(v3, &v48);
          uint64_t v11 = v3[1];
          BOOL result = std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v48);
        }
        else
        {
          BOOL result = KB::Candidate::Candidate(v9, (uint64_t)v4);
          uint64_t v11 = result + 1000;
        }
        v3[1] = v11;
      }
LABEL_20:
      v4 += 125;
    }
    while (v4 != v5);
  }
  unint64_t v18 = *(void **)(a2 + 48);
  uint64_t v19 = *(void **)(a2 + 56);
  if (v18 != v19)
  {
    unint64_t v20 = v3 + 6;
    do
    {
      if (*v18)
      {
        char v21 = (uint64_t *)(v18[1] + 224);
        uint64_t v22 = 240 * *v18;
        while (1)
        {
          uint64_t v23 = *v21;
          v21 += 30;
          if (v23) {
            break;
          }
          v22 -= 240;
          if (!v22) {
            goto LABEL_41;
          }
        }
        unint64_t v24 = v3[7];
        unint64_t v25 = v3[8];
        if (v24 >= v25)
        {
          uint64_t v27 = 0x1CAC083126E978D5 * ((uint64_t)(v24 - *v20) >> 3);
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) > 0x4189374BC6A7EFLL) {
            goto LABEL_64;
          }
          unint64_t v29 = 0x1CAC083126E978D5 * ((uint64_t)(v25 - *v20) >> 3);
          if (2 * v29 > v28) {
            unint64_t v28 = 2 * v29;
          }
          if (v29 >= 0x20C49BA5E353F7) {
            unint64_t v30 = 0x4189374BC6A7EFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          double v52 = v3 + 8;
          if (v30) {
            unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v30);
          }
          else {
            uint64_t v31 = 0;
          }
          uint64_t v32 = v30 + 1000 * v27;
          unint64_t v48 = v30;
          uint64_t v49 = v32;
          unint64_t v51 = v30 + 1000 * v31;
          KB::Candidate::Candidate(v32, (uint64_t)v18);
          uint64_t v50 = v32 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer(v3 + 6, &v48);
          uint64_t v26 = v3[7];
          BOOL result = std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v48);
        }
        else
        {
          BOOL result = KB::Candidate::Candidate(v24, (uint64_t)v18);
          uint64_t v26 = result + 1000;
        }
        v3[7] = v26;
      }
LABEL_41:
      v18 += 125;
    }
    while (v18 != v19);
  }
  float v33 = *(void **)(a2 + 72);
  float v34 = *(void **)(a2 + 80);
  if (v33 != v34)
  {
    float v35 = v3 + 9;
    do
    {
      if (*v33)
      {
        char v36 = (uint64_t *)(v33[1] + 224);
        uint64_t v37 = 240 * *v33;
        while (1)
        {
          uint64_t v38 = *v36;
          v36 += 30;
          if (v38) {
            break;
          }
          v37 -= 240;
          if (!v37) {
            goto LABEL_62;
          }
        }
        unint64_t v39 = v3[10];
        unint64_t v40 = v3[11];
        if (v39 >= v40)
        {
          uint64_t v42 = 0x1CAC083126E978D5 * ((uint64_t)(v39 - *v35) >> 3);
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) > 0x4189374BC6A7EFLL) {
            goto LABEL_64;
          }
          unint64_t v44 = 0x1CAC083126E978D5 * ((uint64_t)(v40 - *v35) >> 3);
          if (2 * v44 > v43) {
            unint64_t v43 = 2 * v44;
          }
          if (v44 >= 0x20C49BA5E353F7) {
            unint64_t v45 = 0x4189374BC6A7EFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          double v52 = v3 + 11;
          if (v45) {
            unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v45);
          }
          else {
            uint64_t v46 = 0;
          }
          uint64_t v47 = v45 + 1000 * v42;
          unint64_t v48 = v45;
          uint64_t v49 = v47;
          unint64_t v51 = v45 + 1000 * v46;
          KB::Candidate::Candidate(v47, (uint64_t)v33);
          uint64_t v50 = v47 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer(v3 + 9, &v48);
          uint64_t v41 = v3[10];
          BOOL result = std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v48);
        }
        else
        {
          BOOL result = KB::Candidate::Candidate(v39, (uint64_t)v33);
          uint64_t v41 = result + 1000;
        }
        v3[10] = v41;
      }
LABEL_62:
      v33 += 125;
    }
    while (v33 != v34);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_TIContactNameFilters_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TILanguageModelStr_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TIDynamicLexiconCandidateFilters_mm()
{
  int v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TIKeyboardInputManagerMecabra_mm()
{
  int v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TIKeyboardInputManager_mul_mm()
{
  int v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TISmartSelection_mm()
{
  int v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TICandidateFilter_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TILanguageModel_mm()
{
  int v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TIKeyboardFeatureSpecialization_mm()
{
  int v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TILanguageResourcesUtil_mm()
{
  int v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIRemoveAlternatesIfNoLinguisticCandidate_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TICandidateFilterFactory_mm()
{
  int v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TILanguageModelContainer_mm()
{
  int v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIIndicUtils_cpp()
{
  KB::String::String((KB::String *)&kVowelLetterYAPHALAA_beng, "অ‍্য");
  __cxa_atexit((void (*)(void *))KB::String::~String, &kVowelLetterYAPHALAA_beng, &dword_1E3F0E000);
  KB::String::String((KB::String *)&kVowelLetterYAPHALAA_orya, "ଅ‍୍ୟ");
  __cxa_atexit((void (*)(void *))KB::String::~String, &kVowelLetterYAPHALAA_orya, &dword_1E3F0E000);
  KB::String::String((KB::String *)&kVowelSignYAPHALAA_beng, "‍্য");
  __cxa_atexit((void (*)(void *))KB::String::~String, &kVowelSignYAPHALAA_beng, &dword_1E3F0E000);
  KB::String::String((KB::String *)&kVowelSignYAPHALAA_orya, "‍୍ୟ");

  return __cxa_atexit((void (*)(void *))KB::String::~String, &kVowelSignYAPHALAA_orya, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIInputManagerSpecialization_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIInputManager_translit_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIInputManager_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TICandidateFilterLibrary_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_CPSearchNode_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIContinuousPathCandidateFilters_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TILanguageModelLoader_mm()
{
  int v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIMultilingualCandidateFilters_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIBasicStrokeBuildManager_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TILanguageModelImplBase_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TICandidateFilterFlags_cpp()
{
  KB::String::String((KB::String *)&kGenericFlagDesc, "Generic Filter Stack");
  __cxa_atexit((void (*)(void *))KB::String::~String, &kGenericFlagDesc, &dword_1E3F0E000);
  KB::String::String((KB::String *)&kPreLMFlagDesc, "Pre LM Filter Stack");
  __cxa_atexit((void (*)(void *))KB::String::~String, &kPreLMFlagDesc, &dword_1E3F0E000);
  KB::String::String((KB::String *)&kPostLMFlagDesc, "Post LM Filter Stack");

  return __cxa_atexit((void (*)(void *))KB::String::~String, &kPostLMFlagDesc, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TICandidateFilter_Indic_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_CPContextualShapeRecognizer_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TIKeyboardInputManager_mm()
{
  int v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIMutatingCandidateFilters_cpp()
{
  v41[3] = *MEMORY[0x1E4F143B8];
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
  unint64_t v0 = (unint64_t)v38;
  std::string::basic_string[abi:nn180100]<0>(v38, "u");
  std::string::basic_string[abi:nn180100]<0>(v39, "you");
  std::string::basic_string[abi:nn180100]<0>(v40, "o");
  std::string::basic_string[abi:nn180100]<0>(v41, "oh");
  uint64_t v1 = 0;
  KB::RescoreShortWords::short_word_map = 0u;
  *(_OWORD *)&qword_1EBFF0A78 = 0u;
  dword_1EBFF0A88 = 1065353216;
  do
  {
    unint64_t v2 = (uint64_t **)&v38[6 * v1];
    int v3 = *((char *)v2 + 23);
    if (v3 >= 0) {
      uint64_t v4 = &v38[6 * v1];
    }
    else {
      uint64_t v4 = *v2;
    }
    if (v3 >= 0) {
      unint64_t v5 = *((unsigned __int8 *)v2 + 23);
    }
    else {
      unint64_t v5 = (unint64_t)v2[1];
    }
    unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
    unint64_t v7 = v6;
    unint64_t v8 = *((void *)&KB::RescoreShortWords::short_word_map + 1);
    if (*((void *)&KB::RescoreShortWords::short_word_map + 1))
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&KB::RescoreShortWords::short_word_map + 8));
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        unint64_t v0 = v6;
        if (v6 >= *((void *)&KB::RescoreShortWords::short_word_map + 1)) {
          unint64_t v0 = v6 % *((void *)&KB::RescoreShortWords::short_word_map + 1);
        }
      }
      else
      {
        unint64_t v0 = (*((void *)&KB::RescoreShortWords::short_word_map + 1) - 1) & v6;
      }
      uint64_t v11 = *(unsigned __int8 ***)(KB::RescoreShortWords::short_word_map + 8 * v0);
      if (v11)
      {
        for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
        {
          unint64_t v13 = *((void *)i + 1);
          if (v13 == v7)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)&v38[6 * v1])) {
              goto LABEL_80;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v0) {
              break;
            }
          }
        }
      }
    }
    unint64_t v14 = (char *)operator new(0x40uLL);
    *(void *)unint64_t v14 = 0;
    *((void *)v14 + 1) = v7;
    std::pair<std::string const,std::string>::pair[abi:nn180100]((std::string *)(v14 + 16), (long long *)&v38[6 * v1]);
    float v15 = (float)(unint64_t)(qword_1EBFF0A80 + 1);
    if (!v8 || (float)(*(float *)&dword_1EBFF0A88 * (float)v8) < v15)
    {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3) {
        BOOL v16 = 1;
      }
      unint64_t v17 = v16 | (2 * v8);
      unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_1EBFF0A88);
      if (v17 <= v18) {
        int8x8_t prime = (int8x8_t)v18;
      }
      else {
        int8x8_t prime = (int8x8_t)v17;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v8 = *((void *)&KB::RescoreShortWords::short_word_map + 1);
      if (*(void *)&prime > *((void *)&KB::RescoreShortWords::short_word_map + 1)) {
        goto LABEL_36;
      }
      if (*(void *)&prime < *((void *)&KB::RescoreShortWords::short_word_map + 1))
      {
        unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_1EBFF0A80 / *(float *)&dword_1EBFF0A88);
        if (*((void *)&KB::RescoreShortWords::short_word_map + 1) < 3uLL
          || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&KB::RescoreShortWords::short_word_map + 8)),
              v27.i16[0] = vaddlv_u8(v27),
              v27.u32[0] > 1uLL))
        {
          unint64_t v26 = std::__next_prime(v26);
        }
        else
        {
          uint64_t v28 = 1 << -(char)__clz(v26 - 1);
          if (v26 >= 2) {
            unint64_t v26 = v28;
          }
        }
        if (*(void *)&prime <= v26) {
          int8x8_t prime = (int8x8_t)v26;
        }
        if (*(void *)&prime >= v8)
        {
          unint64_t v8 = *((void *)&KB::RescoreShortWords::short_word_map + 1);
        }
        else
        {
          if (prime)
          {
LABEL_36:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v20 = operator new(8 * *(void *)&prime);
            char v21 = (void *)KB::RescoreShortWords::short_word_map;
            *(void *)&KB::RescoreShortWords::short_word_map = v20;
            if (v21) {
              operator delete(v21);
            }
            uint64_t v22 = 0;
            *((int8x8_t *)&KB::RescoreShortWords::short_word_map + 1) = prime;
            do
              *(void *)(KB::RescoreShortWords::short_word_map + 8 * v22++) = 0;
            while (*(void *)&prime != v22);
            uint64_t v23 = (void **)qword_1EBFF0A78;
            if (qword_1EBFF0A78)
            {
              unint64_t v24 = *(void *)(qword_1EBFF0A78 + 8);
              uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
              v25.i16[0] = vaddlv_u8(v25);
              if (v25.u32[0] > 1uLL)
              {
                if (v24 >= *(void *)&prime) {
                  v24 %= *(void *)&prime;
                }
              }
              else
              {
                v24 &= *(void *)&prime - 1;
              }
              *(void *)(KB::RescoreShortWords::short_word_map + 8 * v24) = &qword_1EBFF0A78;
              for (j = *v23; j; unint64_t v24 = v30)
              {
                unint64_t v30 = j[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(KB::RescoreShortWords::short_word_map + 8 * v30))
                  {
                    *(void *)(KB::RescoreShortWords::short_word_map + 8 * v30) = v23;
                    goto LABEL_61;
                  }
                  uint64_t *v23 = (void *)*j;
                  *uint64_t j = **(void **)(KB::RescoreShortWords::short_word_map + 8 * v30);
                  **(void **)(KB::RescoreShortWords::short_word_map + 8 * v30) = j;
                  uint64_t j = v23;
                }
                unint64_t v30 = v24;
LABEL_61:
                uint64_t v23 = (void **)j;
                uint64_t j = (void *)*j;
              }
            }
            unint64_t v8 = (unint64_t)prime;
            goto LABEL_65;
          }
          float v34 = (void *)KB::RescoreShortWords::short_word_map;
          *(void *)&KB::RescoreShortWords::short_word_map = 0;
          if (v34) {
            operator delete(v34);
          }
          unint64_t v8 = 0;
          *((void *)&KB::RescoreShortWords::short_word_map + 1) = 0;
        }
      }
LABEL_65:
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8) {
          unint64_t v0 = v7 % v8;
        }
        else {
          unint64_t v0 = v7;
        }
      }
      else
      {
        unint64_t v0 = (v8 - 1) & v7;
      }
    }
    uint64_t v31 = KB::RescoreShortWords::short_word_map;
    uint64_t v32 = *(void **)(KB::RescoreShortWords::short_word_map + 8 * v0);
    if (v32)
    {
      *(void *)unint64_t v14 = *v32;
LABEL_78:
      *uint64_t v32 = v14;
      goto LABEL_79;
    }
    *(void *)unint64_t v14 = qword_1EBFF0A78;
    qword_1EBFF0A78 = (uint64_t)v14;
    *(void *)(v31 + 8 * v0) = &qword_1EBFF0A78;
    if (*(void *)v14)
    {
      unint64_t v33 = *(void *)(*(void *)v14 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v33 >= v8) {
          v33 %= v8;
        }
      }
      else
      {
        v33 &= v8 - 1;
      }
      uint64_t v32 = (void *)(KB::RescoreShortWords::short_word_map + 8 * v33);
      goto LABEL_78;
    }
LABEL_79:
    ++qword_1EBFF0A80;
LABEL_80:
    ++v1;
  }
  while (v1 != 2);
  for (uint64_t k = 0; k != -12; k -= 6)
  {
    char v36 = &v38[k];
    if (SHIBYTE(v41[k + 2]) < 0) {
      operator delete((void *)v36[9]);
    }
    if (*((char *)v36 + 71) < 0) {
      operator delete((void *)v36[6]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::unordered_map<std::string,std::string>::~unordered_map[abi:nn180100], &KB::RescoreShortWords::short_word_map, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIInputRecognizer_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIFavoniusStrokeBuildManager_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TICPathRecognizerEnsemble_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_MCDrawInput_mm()
{
  unint64_t v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TIKeyboardInputManagerTransliteration_mm()
{
  unint64_t v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TILanguageModelImplStub_mm()
{
  unint64_t v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TILanguageSelectionController_mm()
{
  unint64_t v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
  int v1 = _os_feature_enabled_impl();
  uint64_t v2 = 2;
  if (v1) {
    uint64_t v2 = 3;
  }
  TILSCMaximumActiveInputModes = v2;
}

void _GLOBAL__sub_I_TIKeyboardInputManagerIndic_mm()
{
  unint64_t v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TICandidateFilterResources_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TILanguageModelOfflineLearningTask_mm()
{
  unint64_t v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TIKeyboardInputManager_Learning_mm()
{
  unint64_t v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TICandidateFilterConfiguration_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_CPSearch_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TITypologyLogger_mm()
{
  unint64_t v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

void _GLOBAL__sub_I_TIKeyboardInputManager_InlineCompletions_mm()
{
  unint64_t v0 = (void *)MEMORY[0x1E4E7C3D0]();
  __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TICompositeCandidateFilter_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TICandidateRefinery_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t _GLOBAL__sub_I_TIChooseTopQualityAutocorrection_cpp()
{
  return __cxa_atexit((void (*)(void *))KB::LikelihoodInfo::~LikelihoodInfo, &KB::k_invalid_likelihood_value, &dword_1E3F0E000);
}

uint64_t BMKeyboardTokenFrequencyTokenTypeFromString()
{
  return MEMORY[0x1F410C880]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1F410C8D0]();
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9738](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9740](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9748](c, data, *(void *)&len);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

uint64_t CEMCreateEmojiLocaleData()
{
  return MEMORY[0x1F4113BB0]();
}

uint64_t CEMEmojiLocaleDataCreateEmojiTokensForString()
{
  return MEMORY[0x1F4113BD8]();
}

uint64_t CEMEmojiLocaleDataGetLocaleIdentifier()
{
  return MEMORY[0x1F4113BE8]();
}

uint64_t CEMEmojiTokenCopyRelatedEmoji()
{
  return MEMORY[0x1F4113BF8]();
}

uint64_t CEMEmojiTokenCreateWithString()
{
  return MEMORY[0x1F4113C20]();
}

uint64_t CEMEmojiTokenGetString()
{
  return MEMORY[0x1F4113C58]();
}

uint64_t CEMEnumerateEmojiTokensInStringWithBlock()
{
  return MEMORY[0x1F4113C70]();
}

uint64_t CEMStringContainsEmoji()
{
  return MEMORY[0x1F4113C88]();
}

uint64_t CEMStringIsSingleEmoji()
{
  return MEMORY[0x1F4113C98]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7110]();
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1F40D7240](alloc, str, attributes);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7538](bundleID);
}

uint64_t CFBurstTrieContains()
{
  return MEMORY[0x1F40D7620]();
}

uint64_t CFBurstTrieCreate()
{
  return MEMORY[0x1F40D7630]();
}

uint64_t CFBurstTrieCreateFromMapBytes()
{
  return MEMORY[0x1F40D7640]();
}

uint64_t CFBurstTrieRelease()
{
  return MEMORY[0x1F40D7658]();
}

uint64_t CFBurstTrieSerializeWithFileDescriptor()
{
  return MEMORY[0x1F40D7668]();
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7740](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1F40D7770](theSet, theChar);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1F40D7A80](err);
}

CFStringRef CFErrorCopyFailureReason(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1F40D7A88](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C20](locale);
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1F40D7C48](locale, key);
}

uint64_t CFLog()
{
  return MEMORY[0x1F40D7C50]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E08](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F58](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FC0](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8558](string, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1F40D85A0](string);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1F40D85E0]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1F40D8680](tokenizer);
}

CFStringRef CFStringTokenizerCopyBestStringLanguage(CFStringRef string, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D8688](string, range.location, range.length);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1F40D8698](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x1F40D86A8](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x1F40D86C0](string, range, transform, reverse);
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1F40D8770](url);
}

CFStringRef CFURLCopyPathExtension(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1F40D8798](url);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D87F8](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8848](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88C0](allocator, URLString, baseURL);
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x1F40D8948](url, error);
}

Boolean CFURLSetResourcePropertyForKey(CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error)
{
  return MEMORY[0x1F40D8958](url, key, propertyValue, error);
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return MEMORY[0x1F40D8A20](userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1F40D8A28](allocator, flags, error, dictionary, timeout);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D8A40](allocator, userNotification, callout, order);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D9970](space, components);
}

void CGColorRelease(CGColorRef color)
{
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1F40D9A60](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF8]();
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
}

void CGContextSetTextMatrix(CGContextRef c, CGAffineTransform *t)
{
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1F40DA908](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1F40DAA98](image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9968](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E9998](data, options);
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1F40DB228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB310]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x1F41096C8]();
}

CFArrayRef CTFontCopyDefaultCascadeListForLanguages(CTFontRef font, CFArrayRef languagePrefList)
{
  return (CFArrayRef)MEMORY[0x1F40DF288](font, languagePrefList);
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x1F40DF338](font, matrix, attributes, size);
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  return (CTFontRef)MEMORY[0x1F40DF370](*(void *)&uiType, language, size);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1F40DF390](name, matrix, size);
}

CFTypeRef CTFontDescriptorCopyAttribute(CTFontDescriptorRef descriptor, CFStringRef attribute)
{
  return (CFTypeRef)MEMORY[0x1F40DF3A8](descriptor, attribute);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1F40DF408](attributes);
}

uint64_t CTFontDescriptorCreateWithAttributesAndOptions()
{
  return MEMORY[0x1F40DF410]();
}

BOOL CTFontGetGlyphsForCharacters(CTFontRef font, const UniChar *characters, CGGlyph *glyphs, CFIndex count)
{
  return MEMORY[0x1F40DF510](font, characters, glyphs, count);
}

CGFloat CTFontGetSize(CTFontRef font)
{
  MEMORY[0x1F40DF558](font);
  return result;
}

uint64_t CTFontInitializeShapingGlyphs()
{
  return MEMORY[0x1F40DF5F8]();
}

uint64_t CTFontShapeGlyphs()
{
  return MEMORY[0x1F40DF678]();
}

CTLineRef CTLineCreateTruncatedLine(CTLineRef line, double width, CTLineTruncationType truncationType, CTLineRef truncationToken)
{
  return (CTLineRef)MEMORY[0x1F40DF778](line, *(void *)&truncationType, truncationToken, width);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1F40DF790](attrString);
}

uint64_t CTLineCreateWithRunArray()
{
  return MEMORY[0x1F40DF798]();
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return (CFArrayRef)MEMORY[0x1F40DF7E0](line);
}

double CTLineGetTypographicBounds(CTLineRef line, CGFloat *ascent, CGFloat *descent, CGFloat *leading)
{
  MEMORY[0x1F40DF820](line, ascent, descent, leading);
  return result;
}

uint64_t CacheDeleteRegisterInfoCallbacks()
{
  return MEMORY[0x1F410DCF0]();
}

uint64_t DDResultGetCategory()
{
  return MEMORY[0x1F4117208]();
}

uint64_t DDResultGetRangeForURLification()
{
  return MEMORY[0x1F4117250]();
}

uint64_t DMGetUserDataDisposition()
{
  return MEMORY[0x1F41173C8]();
}

uint64_t ICLXEntryGetEntities()
{
  return MEMORY[0x1F4124D68]();
}

uint64_t ICLXEntryGetTransientLexicon()
{
  return MEMORY[0x1F4124D70]();
}

uint64_t ITCandidateCopyPrefix()
{
  return MEMORY[0x1F4124D78]();
}

uint64_t ITCandidateGetScore()
{
  return MEMORY[0x1F4124D80]();
}

uint64_t ITCandidateGetString()
{
  return MEMORY[0x1F4124D88]();
}

uint64_t ITCandidateGetStrokedPath()
{
  return MEMORY[0x1F4124D90]();
}

uint64_t ITCandidateGetUnshiftMask()
{
  return MEMORY[0x1F4124D98]();
}

uint64_t ITCandidateIsCompletion()
{
  return MEMORY[0x1F4124DA0]();
}

uint64_t ITCandidateIsMultiWord()
{
  return MEMORY[0x1F4124DA8]();
}

uint64_t ITCandidateIsValidWord()
{
  return MEMORY[0x1F4124DB0]();
}

uint64_t ITTouchTranscoderAddLexicon()
{
  return MEMORY[0x1F4124DB8]();
}

uint64_t ITTouchTranscoderCreateSession()
{
  return MEMORY[0x1F4124DC0]();
}

uint64_t ITTouchTranscoderCreateWithKeyboardLayout()
{
  return MEMORY[0x1F4124DC8]();
}

uint64_t ITTouchTranscoderRemoveLexicon()
{
  return MEMORY[0x1F4124DD8]();
}

uint64_t ITTouchTranscoderSessionAddEventWithTouchKeyInfo()
{
  return MEMORY[0x1F4124DE0]();
}

uint64_t ITTouchTranscoderSessionEnumerateCandidatesWithOptions()
{
  return MEMORY[0x1F4124DE8]();
}

uint64_t ITTouchTranscoderSupportsConfiguration()
{
  return MEMORY[0x1F4124DF0]();
}

uint64_t ITTouchTranscoderSupportsLocaleAndLayout()
{
  return MEMORY[0x1F4124DF8]();
}

uint64_t ITTouchTranscoderUpdateKeyboardLayout()
{
  return MEMORY[0x1F4124E00]();
}

uint64_t IXACanLogMessageAtLevel()
{
  return MEMORY[0x1F4163B90]();
}

uint64_t IXADefaultLogFacility()
{
  return MEMORY[0x1F4163B98]();
}

uint64_t IXAFeedbackLogFacility()
{
  return MEMORY[0x1F4163BA0]();
}

uint64_t IXASessionDetailsLogFacility()
{
  return MEMORY[0x1F4163BA8]();
}

uint64_t IXASessionEventsLogFacility()
{
  return MEMORY[0x1F4163BB0]();
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x1F412A878]();
}

uint64_t LMLanguageLikelihoodModelAddEvidenceForLanguage()
{
  return MEMORY[0x1F412A108]();
}

uint64_t LMLanguageLikelihoodModelGetEmojiUsageCountForApp()
{
  return MEMORY[0x1F412A110]();
}

uint64_t LMLanguageLikelihoodModelGetLanguagePriorProbabilities()
{
  return MEMORY[0x1F412A118]();
}

uint64_t LMLanguageLikelihoodModelGetLastOfflineAdaptationTime()
{
  return MEMORY[0x1F412A120]();
}

uint64_t LMLanguageLikelihoodModelGetUserModel()
{
  return MEMORY[0x1F412A128]();
}

uint64_t LMLanguageModelCreateStringForSpecialTokenID()
{
  return MEMORY[0x1F412A168]();
}

uint64_t LMLanguageModelPerformMaintenance()
{
  return MEMORY[0x1F412A1C8]();
}

uint64_t LMLexiconIDConverterCreateWithUnigramsPath()
{
  return MEMORY[0x1F412A278]();
}

uint64_t LMLexiconIDConverterDestroy()
{
  return MEMORY[0x1F412A280]();
}

uint64_t LMLexiconIDConverterGetStemData()
{
  return MEMORY[0x1F412A288]();
}

uint64_t LMLexiconIDConverterGetStemSuffixTokenID()
{
  return MEMORY[0x1F412A290]();
}

uint64_t LMLexiconIDConverterGetSuffixData()
{
  return MEMORY[0x1F412A298]();
}

uint64_t LMStreamTokenizerCopyBestStringLanguage()
{
  return MEMORY[0x1F412A2C8]();
}

uint64_t LMStreamTokenizerCreate()
{
  return MEMORY[0x1F412A2D0]();
}

uint64_t LMStreamTokenizerPopBytes()
{
  return MEMORY[0x1F412A2D8]();
}

uint64_t LMStreamTokenizerPushBytes()
{
  return MEMORY[0x1F412A2E0]();
}

uint64_t LMStreamTokenizerRelease()
{
  return MEMORY[0x1F412A2E8]();
}

uint64_t LMStreamTokenizerReset()
{
  return MEMORY[0x1F412A2F0]();
}

uint64_t LMVocabularyAddLemma()
{
  return MEMORY[0x1F412A2F8]();
}

uint64_t LMVocabularyEnumerateInflectionsOfLemma()
{
  return MEMORY[0x1F412A308]();
}

uint64_t LMVocabularyGetClassForTokenID()
{
  return MEMORY[0x1F412A310]();
}

uint64_t LMVocabularyGetSharedVocabulary()
{
  return MEMORY[0x1F412A318]();
}

uint64_t LMVocabularyGetTokenIDForLemma()
{
  return MEMORY[0x1F412A320]();
}

uint64_t LMVocabularyReset()
{
  return MEMORY[0x1F412A328]();
}

uint64_t LMVocabularySetLanguages()
{
  return MEMORY[0x1F412A330]();
}

uint64_t LXCursorConditionalProbability()
{
  return MEMORY[0x1F412A608]();
}

uint64_t LXCursorCreateByAdvancingWithUTF8()
{
  return MEMORY[0x1F412A620]();
}

uint64_t LXCursorEnumerateChildren()
{
  return MEMORY[0x1F412A628]();
}

uint64_t LXCursorEnumerateEntries()
{
  return MEMORY[0x1F412A630]();
}

uint64_t LXCursorEnumerateEntriesRecursively()
{
  return MEMORY[0x1F412A638]();
}

uint64_t LXCursorHasChildren()
{
  return MEMORY[0x1F412A648]();
}

uint64_t LXCursorHasEntries()
{
  return MEMORY[0x1F412A650]();
}

uint64_t LXCursorIsRoot()
{
  return MEMORY[0x1F412A660]();
}

uint64_t LXCursorLastTraversedCharacter()
{
  return MEMORY[0x1F412A668]();
}

uint64_t LXCursorTerminatesWordStem()
{
  return MEMORY[0x1F412A678]();
}

uint64_t LXCursorTerminationProbability()
{
  return MEMORY[0x1F412A680]();
}

uint64_t LXCursorUsageCount()
{
  return MEMORY[0x1F412A688]();
}

uint64_t LXCursorUsageCountRecursive()
{
  return MEMORY[0x1F412A690]();
}

uint64_t LXEntryCopyStoredString()
{
  return MEMORY[0x1F412A698]();
}

uint64_t LXEntryCopyString()
{
  return MEMORY[0x1F412A6A8]();
}

uint64_t LXEntryCreateMutable()
{
  return MEMORY[0x1F412A6B0]();
}

uint64_t LXEntryGetAffixData()
{
  return MEMORY[0x1F412A6C0]();
}

uint64_t LXEntryGetCategoryFlags()
{
  return MEMORY[0x1F412A6C8]();
}

uint64_t LXEntryGetMetaFlags()
{
  return MEMORY[0x1F412A6D8]();
}

uint64_t LXEntryGetPartialProbability()
{
  return MEMORY[0x1F412A6E0]();
}

uint64_t LXEntryGetPenaltyCount()
{
  return MEMORY[0x1F412A6E8]();
}

uint64_t LXEntryGetTimestamp()
{
  return MEMORY[0x1F412A6F8]();
}

uint64_t LXEntryGetTokenID()
{
  return MEMORY[0x1F412A700]();
}

uint64_t LXEntryGetUsageCount()
{
  return MEMORY[0x1F412A708]();
}

uint64_t LXLexiconAdd()
{
  return MEMORY[0x1F412A728]();
}

uint64_t LXLexiconAddEntryWithTokenID()
{
  return MEMORY[0x1F412A730]();
}

uint64_t LXLexiconAddWithCreationTime()
{
  return MEMORY[0x1F412A738]();
}

uint64_t LXLexiconCompareStrings()
{
  return MEMORY[0x1F412A748]();
}

uint64_t LXLexiconCopyEntryForTokenID()
{
  return MEMORY[0x1F412A750]();
}

uint64_t LXLexiconCopyName()
{
  return MEMORY[0x1F412A758]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x1F412A768]();
}

uint64_t LXLexiconCreateMutable()
{
  return MEMORY[0x1F412A770]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x1F412A778]();
}

uint64_t LXLexiconCreateTransient()
{
  return MEMORY[0x1F412A780]();
}

uint64_t LXLexiconEnumerateEntriesForString()
{
  return MEMORY[0x1F412A788]();
}

uint64_t LXLexiconGetFirstTokenIDForString()
{
  return MEMORY[0x1F412A798]();
}

uint64_t LXLexiconGetSortkeyBytes()
{
  return MEMORY[0x1F412A7A0]();
}

uint64_t LXLexiconGetTokenIDForUTF8String()
{
  return MEMORY[0x1F412A7A8]();
}

uint64_t LXLexiconIncrementUsageCount()
{
  return MEMORY[0x1F412A7B8]();
}

uint64_t LXLexiconRepositoryAddOrUpdate()
{
  return MEMORY[0x1F412A7D0]();
}

uint64_t LXLexiconRepositoryCreateView()
{
  return MEMORY[0x1F412A7D8]();
}

uint64_t LXLexiconWrite()
{
  return MEMORY[0x1F412A800]();
}

uint64_t LXLexiconWriteDebugDump()
{
  return MEMORY[0x1F412A808]();
}

uint64_t LXVulgarWordUsageDatabaseCanAutocorrect()
{
  return MEMORY[0x1F412A830]();
}

uint64_t LXVulgarWordUsageDatabaseCanAutocorrectSomewhere()
{
  return MEMORY[0x1F412A838]();
}

uint64_t LXVulgarWordUsageDatabaseCreate()
{
  return MEMORY[0x1F412A840]();
}

uint64_t LXVulgarWordUsageDatabaseDecrementUsageCount()
{
  return MEMORY[0x1F412A848]();
}

uint64_t LXVulgarWordUsageDatabaseIncrementUsageCount()
{
  return MEMORY[0x1F412A850]();
}

uint64_t LXVulgarWordUsageDatabasePerformMaintenance()
{
  return MEMORY[0x1F412A858]();
}

uint64_t LXVulgarWordUsageDatabaseReset()
{
  return MEMORY[0x1F412A860]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MGGetFloat32Answer()
{
  return MEMORY[0x1F417CE10]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1F417CE28]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1F417CE38]();
}

uint64_t MecabraAcceptInlineCandidates()
{
  return MEMORY[0x1F4180A98]();
}

uint64_t MecabraAdaptToUntokenizedText()
{
  return MEMORY[0x1F4180AA0]();
}

uint64_t MecabraAnalyzeGesturesWithContext()
{
  return MEMORY[0x1F4180AA8]();
}

uint64_t MecabraAnalyzeStringWithContext()
{
  return MEMORY[0x1F4180AB0]();
}

uint64_t MecabraCandidateCopySyllableLengthArrayInAnalysisString()
{
  return MEMORY[0x1F4180AC8]();
}

uint64_t MecabraCandidateCreateWordLocaleAtIndex()
{
  return MEMORY[0x1F4180AD0]();
}

uint64_t MecabraCandidateGetAnalysisString()
{
  return MEMORY[0x1F4180AD8]();
}

uint64_t MecabraCandidateGetAttributes()
{
  return MEMORY[0x1F4180AE0]();
}

uint64_t MecabraCandidateGetDictionaryReading()
{
  return MEMORY[0x1F4180AF0]();
}

uint64_t MecabraCandidateGetKind()
{
  return MEMORY[0x1F4180AF8]();
}

uint64_t MecabraCandidateGetNextPhraseBoundary()
{
  return MEMORY[0x1F4180B00]();
}

uint64_t MecabraCandidateGetSupplementalLexiconIdentifiers()
{
  return MEMORY[0x1F4180B08]();
}

uint64_t MecabraCandidateGetSupplementalLexiconItemPrefix()
{
  return MEMORY[0x1F4180B10]();
}

uint64_t MecabraCandidateGetSurface()
{
  return MEMORY[0x1F4180B18]();
}

uint64_t MecabraCandidateGetType()
{
  return MEMORY[0x1F4180B20]();
}

uint64_t MecabraCandidateGetWordCount()
{
  return MEMORY[0x1F4180B28]();
}

uint64_t MecabraCandidateGetWordDictionaryReadingLengthAtIndex()
{
  return MEMORY[0x1F4180B30]();
}

uint64_t MecabraCandidateGetWordLengthAtIndex()
{
  return MEMORY[0x1F4180B38]();
}

uint64_t MecabraCandidateGetWordReadingLengthAtIndex()
{
  return MEMORY[0x1F4180B40]();
}

uint64_t MecabraCandidateGetWubixingType()
{
  return MEMORY[0x1F4180B48]();
}

uint64_t MecabraCandidateIsAutocorrectionCandidate()
{
  return MEMORY[0x1F4180B58]();
}

uint64_t MecabraCandidateIsBilingualCandidate()
{
  return MEMORY[0x1F4180B60]();
}

uint64_t MecabraCandidateIsEmojiCandidate()
{
  return MEMORY[0x1F4180B68]();
}

uint64_t MecabraCandidateIsExtensionCandidate()
{
  return MEMORY[0x1F4180B70]();
}

uint64_t MecabraCandidateIsExtensionForCandidateBar()
{
  return MEMORY[0x1F4180B78]();
}

uint64_t MecabraCandidateIsOTAWordlistCandidate()
{
  return MEMORY[0x1F4180B80]();
}

uint64_t MecabraCandidateIsPartialCandidate()
{
  return MEMORY[0x1F4180B88]();
}

uint64_t MecabraCandidateIsRegionalCandidate()
{
  return MEMORY[0x1F4180B98]();
}

uint64_t MecabraCandidateIsSinglePhraseCandidate()
{
  return MEMORY[0x1F4180BA0]();
}

uint64_t MecabraCandidateIsSupplementalLexiconCandidate()
{
  return MEMORY[0x1F4180BA8]();
}

uint64_t MecabraCandidateIsUserWordCandidate()
{
  return MEMORY[0x1F4180BB0]();
}

uint64_t MecabraCandidateRelease()
{
  return MEMORY[0x1F4180BB8]();
}

uint64_t MecabraCandidateRetain()
{
  return MEMORY[0x1F4180BC0]();
}

uint64_t MecabraCandidateSetDisplayString()
{
  return MEMORY[0x1F4180BC8]();
}

uint64_t MecabraContextAddCandidate()
{
  return MEMORY[0x1F4180BD8]();
}

uint64_t MecabraContextAddInlineCandidate()
{
  return MEMORY[0x1F4180BE0]();
}

uint64_t MecabraContextCreateMutable()
{
  return MEMORY[0x1F4180BE8]();
}

uint64_t MecabraContextGetCandidateAtIndex()
{
  return MEMORY[0x1F4180BF0]();
}

uint64_t MecabraContextGetCandidateCount()
{
  return MEMORY[0x1F4180BF8]();
}

uint64_t MecabraContextGetInlineCandidateAtIndex()
{
  return MEMORY[0x1F4180C00]();
}

uint64_t MecabraContextGetInlineCandidateCount()
{
  return MEMORY[0x1F4180C08]();
}

uint64_t MecabraContextRelease()
{
  return MEMORY[0x1F4180C10]();
}

uint64_t MecabraContextRemoveCandidatesInRange()
{
  return MEMORY[0x1F4180C18]();
}

uint64_t MecabraContextSetAppContext()
{
  return MEMORY[0x1F4180C28]();
}

uint64_t MecabraConversionCandidateCreate()
{
  return MEMORY[0x1F4180C50]();
}

uint64_t MecabraCreate()
{
  return MEMORY[0x1F4180C58]();
}

uint64_t MecabraCreateCPGesture()
{
  return MEMORY[0x1F4180C60]();
}

uint64_t MecabraCreateCandidateFromContextString()
{
  return MEMORY[0x1F4180C68]();
}

uint64_t MecabraCreateFacemarkCandidates()
{
  return MEMORY[0x1F4180C70]();
}

uint64_t MecabraCreateLayoutKey()
{
  return MEMORY[0x1F4180C80]();
}

uint64_t MecabraCreateRemainingGestures()
{
  return MEMORY[0x1F4180C88]();
}

uint64_t MecabraCreateTypeGesture()
{
  return MEMORY[0x1F4180C90]();
}

uint64_t MecabraCreateTypeGestureWithTouchEvent()
{
  return MEMORY[0x1F4180C98]();
}

uint64_t MecabraCreateWithOptions()
{
  return MEMORY[0x1F4180CA0]();
}

uint64_t MecabraCreateWubixingCodesFromSurface()
{
  return MEMORY[0x1F4180CA8]();
}

uint64_t MecabraDeclareEndOfSentence()
{
  return MEMORY[0x1F4180CB0]();
}

uint64_t MecabraFlushDynamicData()
{
  return MEMORY[0x1F4180CC0]();
}

uint64_t MecabraGestureAddKeyAndLoglikelihoodPair()
{
  return MEMORY[0x1F4180CC8]();
}

uint64_t MecabraGetLastOfflineAdaptationTime()
{
  return MEMORY[0x1F4180CD0]();
}

uint64_t MecabraGetLengthForContextString()
{
  return MEMORY[0x1F4180CD8]();
}

uint64_t MecabraGetNextCandidate()
{
  return MEMORY[0x1F4180CE0]();
}

uint64_t MecabraPerformMaintenance()
{
  return MEMORY[0x1F4180CF0]();
}

uint64_t MecabraPredictionAnalyzeWithContext()
{
  return MEMORY[0x1F4180D10]();
}

uint64_t MecabraProactiveCandidateCreate()
{
  return MEMORY[0x1F4180D20]();
}

uint64_t MecabraResetLearningDictionaries()
{
  return MEMORY[0x1F4180D30]();
}

uint64_t MecabraSetAssetDataItemsForType()
{
  return MEMORY[0x1F4180D48]();
}

uint64_t MecabraSetDynamicLanguageModelAppContext()
{
  return MEMORY[0x1F4180D58]();
}

uint64_t MecabraSetKeyboardLayout()
{
  return MEMORY[0x1F4180D60]();
}

uint64_t NLEmojiPredictorCreate()
{
  return MEMORY[0x1F4130520]();
}

uint64_t NLEmojiPredictorCreateCandidatesForString()
{
  return MEMORY[0x1F4130528]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return (NSString *)MEMORY[0x1F40E7290]((__n128)aPoint, *(__n128 *)&aPoint.y);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1F40E72A0](range.location, range.length);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E72E0](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

uint64_t PFSceneTaxonomyNodeLocalizedLabel()
{
  return MEMORY[0x1F41407D8]();
}

uint64_t PFSceneTaxonomyNodeLocalizedSynonyms()
{
  return MEMORY[0x1F41407E0]();
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1F4145D90]();
}

uint64_t PLShouldLogRegisteredEvent()
{
  return MEMORY[0x1F4145DA8]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DD8](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DE0](query, result);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1F40F7128](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

uint64_t TCCAccessCopyBundleIdentifiersForService()
{
  return MEMORY[0x1F415CB70]();
}

uint64_t TIBundleForInputMode()
{
  return MEMORY[0x1F4163BB8]();
}

uint64_t TICanonicalInputModeName()
{
  return MEMORY[0x1F4163BC8]();
}

uint64_t TIDispatchAsync()
{
  return MEMORY[0x1F4163BF0]();
}

uint64_t TIDispatchSync()
{
  return MEMORY[0x1F4163BF8]();
}

uint64_t TIFeatureUsageAllowedValues()
{
  return MEMORY[0x1F4163C08]();
}

uint64_t TIGetAddressBookThresholdForInputMode()
{
  return MEMORY[0x1F4163C10]();
}

uint64_t TIGetDefaultInputModesForLanguage()
{
  return MEMORY[0x1F4163C18]();
}

uint64_t TIGetInputModeProperties()
{
  return MEMORY[0x1F4163C28]();
}

uint64_t TIGetStickerTaxonomyIdentifiers()
{
  return MEMORY[0x1F4163C38]();
}

uint64_t TIGetStickerTaxonomyIdentifiersAllowListSynonymExclusions()
{
  return MEMORY[0x1F4163C40]();
}

uint64_t TIISTypetoSiriMode()
{
  return MEMORY[0x1F4163C68]();
}

uint64_t TIInputManagerClassForInputMode()
{
  return MEMORY[0x1F4163C70]();
}

uint64_t TIInputModeGetBaseLanguage()
{
  return MEMORY[0x1F4163C78]();
}

uint64_t TIInputModeGetComponentsFromIdentifier()
{
  return MEMORY[0x1F4163C80]();
}

uint64_t TIInputModeGetFullInputModeIdentifier()
{
  return MEMORY[0x1F4163C88]();
}

uint64_t TIInputModeGetLanguage()
{
  return MEMORY[0x1F4163C90]();
}

uint64_t TIInputModeGetLanguageWithRegion()
{
  return MEMORY[0x1F4163C98]();
}

uint64_t TIInputModeGetMultilingualID()
{
  return MEMORY[0x1F4163CA0]();
}

uint64_t TIInputModeGetMultilingualSet()
{
  return MEMORY[0x1F4163CA8]();
}

uint64_t TIInputModeGetMultilingualSetFromInputModesWithPreferredLanguages()
{
  return MEMORY[0x1F4163CB8]();
}

uint64_t TIInputModeGetNormalizedIdentifier()
{
  return MEMORY[0x1F4163CC0]();
}

uint64_t TIInputModeGetNormalizedLevelsFromComponents()
{
  return MEMORY[0x1F4163CD0]();
}

uint64_t TIInputModeGetPreferredMultilingualLanguageModelLocale()
{
  return MEMORY[0x1F4163CD8]();
}

uint64_t TIInputModeGetRegion()
{
  return MEMORY[0x1F4163CE0]();
}

uint64_t TIInputModeGetSWLayout()
{
  return MEMORY[0x1F4163CE8]();
}

uint64_t TIInputModeGetVariant()
{
  return MEMORY[0x1F4163CF0]();
}

uint64_t TIInputModeIsTransliteration()
{
  return MEMORY[0x1F4163D00]();
}

uint64_t TIInputModeSupportsMultilingual()
{
  return MEMORY[0x1F4163D08]();
}

uint64_t TIInputModeUseMorphemeLevelLexicon()
{
  return MEMORY[0x1F4163D10]();
}

uint64_t TIIsRegisterLearningModeRejection()
{
  return MEMORY[0x1F4163D18]();
}

uint64_t TIKeyboardCandidateTypingEngineTypeToString()
{
  return MEMORY[0x1F4163D20]();
}

uint64_t TIKeyboardPopupVariantsForInputMode()
{
  return MEMORY[0x1F4163D28]();
}

uint64_t TIKeyboardShouldDisableAutocorrection()
{
  return MEMORY[0x1F4163D30]();
}

uint64_t TINgramModelPathForInputMode()
{
  return MEMORY[0x1F4163D40]();
}

uint64_t TIResourcePathForInputMode()
{
  return MEMORY[0x1F4163D48]();
}

uint64_t TIStatisticCandidateSourceAsString()
{
  return MEMORY[0x1F4163D58]();
}

uint64_t TIStatisticDistributionPushValue()
{
  return MEMORY[0x1F4163D60]();
}

uint64_t TIStatisticGetKey()
{
  return MEMORY[0x1F4163D68]();
}

uint64_t TIStatisticGetKeyForCandidateAccepted()
{
  return MEMORY[0x1F4163D70]();
}

uint64_t TIStatisticGetKeyForInputMode()
{
  return MEMORY[0x1F4163D80]();
}

uint64_t TIStatisticGetKeyForMultilingual()
{
  return MEMORY[0x1F4163D88]();
}

uint64_t TIStatisticScalarAddValue()
{
  return MEMORY[0x1F4163DA8]();
}

uint64_t TIStatisticScalarIncrement()
{
  return MEMORY[0x1F4163DB8]();
}

uint64_t TIStatisticScalarIncrementAutocorrectionKey()
{
  return MEMORY[0x1F4163DC8]();
}

uint64_t TIStatisticScalarSetBoolean()
{
  return MEMORY[0x1F4163DE0]();
}

uint64_t TIStatisticScalarSetValue()
{
  return MEMORY[0x1F4163DE8]();
}

uint64_t _AXSFullKeyboardAccessEnabled()
{
  return MEMORY[0x1F4178AD8]();
}

uint64_t _AXSVoiceOverTouchEnabled()
{
  return MEMORY[0x1F4179120]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _TIQueueBackground()
{
  return MEMORY[0x1F4163E00]();
}

uint64_t _TIQueueLow()
{
  return MEMORY[0x1F4163E08]();
}

uint64_t _TIQueueUserInitiated()
{
  return MEMORY[0x1F4163E10]();
}

uint64_t language_modeling::v1::Prediction::Prediction()
{
  return MEMORY[0x1F412A338]();
}

void language_modeling::v1::Prediction::~Prediction(language_modeling::v1::Prediction *this)
{
}

void language_modeling::v1::Probability::~Probability(language_modeling::v1::Probability *this)
{
}

uint64_t language_modeling::v1::LanguageModel::addLexicon()
{
  return MEMORY[0x1F412A350]();
}

uint64_t language_modeling::v1::LanguageModel::wireMemory(language_modeling::v1::LanguageModel *this)
{
  return MEMORY[0x1F412A358](this);
}

uint64_t language_modeling::v1::LanguageModel::unwireMemory(language_modeling::v1::LanguageModel *this)
{
  return MEMORY[0x1F412A360](this);
}

uint64_t language_modeling::v1::LanguageModel::addVocabulary(language_modeling::v1::LanguageModel *this, void *a2)
{
  return MEMORY[0x1F412A368](this, a2);
}

uint64_t language_modeling::v1::LanguageModel::removeLexicon()
{
  return MEMORY[0x1F412A370]();
}

uint64_t language_modeling::v1::LanguageModel::flushDynamicData(language_modeling::v1::LanguageModel *this)
{
  return MEMORY[0x1F412A378](this);
}

uint64_t language_modeling::v1::LanguageModel::reloadWithLocales(language_modeling::v1::LanguageModel *this, const __CFArray *a2)
{
  return MEMORY[0x1F412A380](this, a2);
}

uint64_t language_modeling::v1::LanguageModel::getLanguageLocales(language_modeling::v1::LanguageModel *this)
{
  return MEMORY[0x1F412A388](this);
}

uint64_t language_modeling::v1::LanguageModel::deallocateInternalBuffers(language_modeling::v1::LanguageModel *this)
{
  return MEMORY[0x1F412A390](this);
}

uint64_t language_modeling::v1::LanguageModel::init()
{
  return MEMORY[0x1F412A3A0]();
}

uint64_t language_modeling::v1::LanguageModel::LanguageModel(language_modeling::v1::LanguageModel *this)
{
  return MEMORY[0x1F412A3A8](this);
}

uint64_t language_modeling::v1::CompletionStem::set_unique_id(language_modeling::v1::CompletionStem *this)
{
  return MEMORY[0x1F412A3B8](this);
}

uint64_t language_modeling::v1::CompletionStem::try_push_back()
{
  return MEMORY[0x1F412A3C0]();
}

uint64_t language_modeling::v1::CompletionStem::set_score(language_modeling::v1::CompletionStem *this, double a2)
{
  return MEMORY[0x1F412A3C8](this, a2);
}

uint64_t language_modeling::v1::CompletionStem::CompletionStem()
{
  return MEMORY[0x1F412A3D0]();
}

uint64_t language_modeling::v1::CompletionStem::CompletionStem(language_modeling::v1::CompletionStem *this, const language_modeling::v1::CompletionStem *a2)
{
  return MEMORY[0x1F412A3D8](this, a2);
}

uint64_t language_modeling::v1::CompletionStem::CompletionStem(language_modeling::v1::CompletionStem *this)
{
  return MEMORY[0x1F412A3E0](this);
}

void language_modeling::v1::CompletionStem::~CompletionStem(language_modeling::v1::CompletionStem *this)
{
}

uint64_t language_modeling::v1::InlineCompletion::InlineCompletion()
{
  return MEMORY[0x1F412A3F0]();
}

{
  return MEMORY[0x1F412A3F8]();
}

void language_modeling::v1::InlineCompletion::~InlineCompletion(language_modeling::v1::InlineCompletion *this)
{
}

uint64_t language_modeling::v1::LinguisticContext::remove_first(language_modeling::v1::LinguisticContext *this)
{
  return MEMORY[0x1F412A410](this);
}

uint64_t language_modeling::v1::LinguisticContext::try_push_back()
{
  return MEMORY[0x1F412A418]();
}

uint64_t language_modeling::v1::LinguisticContext::set_predominant_locale()
{
  return MEMORY[0x1F412A420]();
}

uint64_t language_modeling::v1::LinguisticContext::clear(language_modeling::v1::LinguisticContext *this)
{
  return MEMORY[0x1F412A428](this);
}

uint64_t language_modeling::v1::LinguisticContext::pop_back(language_modeling::v1::LinguisticContext *this)
{
  return MEMORY[0x1F412A430](this);
}

uint64_t language_modeling::v1::LinguisticContext::push_back()
{
  return MEMORY[0x1F412A438]();
}

uint64_t language_modeling::v1::LinguisticContext::LinguisticContext()
{
  return MEMORY[0x1F412A440]();
}

uint64_t language_modeling::v1::LinguisticContext::LinguisticContext(language_modeling::v1::LinguisticContext *this, const language_modeling::v1::LinguisticContext *a2)
{
  return MEMORY[0x1F412A448](this, a2);
}

uint64_t language_modeling::v1::LinguisticContext::LinguisticContext(language_modeling::v1::LinguisticContext *this)
{
  return MEMORY[0x1F412A450](this);
}

void language_modeling::v1::LinguisticContext::~LinguisticContext(language_modeling::v1::LinguisticContext *this)
{
}

uint64_t language_modeling::v1::LinguisticContext::operator=()
{
  return MEMORY[0x1F412A460]();
}

{
  return MEMORY[0x1F412A468]();
}

uint64_t language_modeling::v1::convertAbsoluteTime(language_modeling::v1 *this, double a2)
{
  return MEMORY[0x1F412A470](this, a2);
}

uint64_t language_modeling::v1::LanguageModelSession::adaptToText()
{
  return MEMORY[0x1F412A478]();
}

uint64_t language_modeling::v1::LanguageModelSession::adaptToToken()
{
  return MEMORY[0x1F412A480]();
}

uint64_t language_modeling::v1::LanguageModelSession::addPriorText()
{
  return MEMORY[0x1F412A488]();
}

uint64_t language_modeling::v1::LanguageModelSession::clearPriorText(language_modeling::v1::LanguageModelSession *this)
{
  return MEMORY[0x1F412A490](this);
}

uint64_t language_modeling::v1::LanguageModelSession::unAdaptToToken()
{
  return MEMORY[0x1F412A498]();
}

uint64_t language_modeling::v1::LanguageModelSession::recordWordRevision()
{
  return MEMORY[0x1F412A4A0]();
}

uint64_t language_modeling::v1::LanguageModelSession::flushCacheAndRecencyData(language_modeling::v1::LanguageModelSession *this)
{
  return MEMORY[0x1F412A4A8](this);
}

uint64_t language_modeling::v1::LanguageModelSession::registerNegativeEvidence()
{
  return MEMORY[0x1F412A4B0]();
}

uint64_t language_modeling::v1::LanguageModelSession::clearDynamicLearningCache(language_modeling::v1::LanguageModelSession *this)
{
  return MEMORY[0x1F412A4B8](this);
}

uint64_t language_modeling::v1::LanguageModelSession::supportsNormalizedNameTokenProbability(language_modeling::v1::LanguageModelSession *this)
{
  return MEMORY[0x1F412A4D8](this);
}

uint64_t language_modeling::v1::LanguageModelSession::normalizedNameTokenConditionalProbability()
{
  return MEMORY[0x1F412A4E0]();
}

uint64_t language_modeling::v1::LanguageModelSession::supportsFragmentsBasedConditionalProbability(language_modeling::v1::LanguageModelSession *this)
{
  return MEMORY[0x1F412A4E8](this);
}

void language_modeling::v1::LanguageModelSession::~LanguageModelSession(language_modeling::v1::LanguageModelSession *this)
{
}

uint64_t LM::TrialParameters::createWithEncodedRepresentation(LM::TrialParameters *this, const __CFDictionary *a2)
{
  return MEMORY[0x1F412A4F8](this, a2);
}

uint64_t language_modeling::v1::Prediction::contextSize(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x1F412A500](this);
}

uint64_t language_modeling::v1::Prediction::probability(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x1F412A508](this);
}

uint64_t language_modeling::v1::Prediction::exactTokenSpan(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x1F412A510](this);
}

uint64_t language_modeling::v1::Prediction::log(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x1F412A518](this);
}

uint64_t language_modeling::v1::Prediction::source(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x1F412A520](this);
}

uint64_t language_modeling::v1::Prediction::string(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x1F412A528](this);
}

uint64_t language_modeling::v1::Prediction::tokenSpan(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x1F412A530](this);
}

uint64_t language_modeling::v1::Prediction::unique_id(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x1F412A538](this);
}

uint64_t language_modeling::v1::Probability::probability()
{
  return MEMORY[0x1F412A540]();
}

uint64_t language_modeling::v1::Probability::log(language_modeling::v1::Probability *this)
{
  return MEMORY[0x1F412A548](this);
}

uint64_t language_modeling::v1::Probability::flags(language_modeling::v1::Probability *this)
{
  return MEMORY[0x1F412A550](this);
}

uint64_t language_modeling::v1::LanguageModel::parameters(language_modeling::v1::LanguageModel *this)
{
  return MEMORY[0x1F412A558](this);
}

uint64_t language_modeling::v1::LanguageModel::makeSession()
{
  return MEMORY[0x1F412A560]();
}

uint64_t language_modeling::v1::LanguageModel::blocklistStatus()
{
  return MEMORY[0x1F412A570]();
}

uint64_t language_modeling::v1::LanguageModel::copyLinguisticDataFileInfo(language_modeling::v1::LanguageModel *this)
{
  return MEMORY[0x1F412A578](this);
}

uint64_t language_modeling::v1::CompletionStem::prefix(language_modeling::v1::CompletionStem *this)
{
  return MEMORY[0x1F412A580](this);
}

uint64_t language_modeling::v1::InlineCompletion::probability(language_modeling::v1::InlineCompletion *this)
{
  return MEMORY[0x1F412A588](this);
}

uint64_t language_modeling::v1::InlineCompletion::wordBoundaryAt(language_modeling::v1::InlineCompletion *this)
{
  return MEMORY[0x1F412A590](this);
}

uint64_t language_modeling::v1::InlineCompletion::log(language_modeling::v1::InlineCompletion *this)
{
  return MEMORY[0x1F412A598](this);
}

uint64_t language_modeling::v1::InlineCompletion::source(language_modeling::v1::InlineCompletion *this)
{
  return MEMORY[0x1F412A5A0](this);
}

uint64_t language_modeling::v1::InlineCompletion::string(language_modeling::v1::InlineCompletion *this)
{
  return MEMORY[0x1F412A5A8](this);
}

uint64_t language_modeling::v1::LinguisticContext::tokenSpan(language_modeling::v1::LinguisticContext *this)
{
  return MEMORY[0x1F412A5B0](this);
}

uint64_t language_modeling::v1::LanguageModelSession::canReasonAbout()
{
  return MEMORY[0x1F412A5B8]();
}

uint64_t language_modeling::v1::LanguageModelSession::extendedPredictions(language_modeling::v1::LanguageModelSession *this, const language_modeling::v1::LinguisticContext *a2)
{
  return MEMORY[0x1F412A5C0](this, a2);
}

uint64_t language_modeling::v1::LanguageModelSession::enumeratePredictions()
{
  return MEMORY[0x1F412A5D0]();
}

uint64_t language_modeling::v1::LanguageModelSession::conditionalProbability()
{
  return MEMORY[0x1F412A5D8]();
}

uint64_t language_modeling::v1::LanguageModelSession::enumerateInlineCompletions()
{
  return MEMORY[0x1F412A5E0]();
}

uint64_t language_modeling::v1::LanguageModelSession::detailedConditionalProbability()
{
  return MEMORY[0x1F412A5E8]();
}

{
  return MEMORY[0x1F412A5F0]();
}

uint64_t LM::TrialParameters::copyEncodedRepresentation(LM::TrialParameters *this)
{
  return MEMORY[0x1F412A5F8](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E380](this, __c, __pos);
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::directory_iterator::__dereference(const std::__fs::filesystem::directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)MEMORY[0x1F417E3B0](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  CFIndex v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3C0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  CFIndex v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3D8](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1F417E840]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E868]();
}

{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::__increment(std::__fs::filesystem::directory_iterator *this, std::error_code *__ec)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1F417EB70](this, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::directory_iterator(std::__fs::filesystem::directory_iterator *this, const std::__fs::filesystem::path *a2, std::error_code *a3, std::__fs::filesystem::directory_options a4)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1F417EB78](this, a2, a3, a4);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x1F417EBC8](a1, __ec);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1F417ECA0]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1F417EE58](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

float __exp10f(float a1)
{
  MEMORY[0x1F40C9B98](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

uint64_t _os_crash()
{
  return MEMORY[0x1F40C9FA0]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void _tlv_atexit(void (__cdecl *termFunc)(void *), void *objAddr)
{
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x1F41138D8]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

int atexit_b(void *a1)
{
  return MEMORY[0x1F40CA490](a1);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2E8](atoken);
}

int audit_token_to_pidversion(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2F0](atoken);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1F40CA570](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t character_is_tamil_script()
{
  return MEMORY[0x1F4163E18]();
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

uint64_t combine_with_accent()
{
  return MEMORY[0x1F4163E20]();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCA0](source);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1F40CC098](a1);
}

int fgetc(FILE *a1)
{
  return MEMORY[0x1F40CC0E8](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1F40CC100](a1, *(void *)&a2, a3);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1F40CC110](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1F40CC290](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1F40CC2E0](a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1F40CC2F0](*(void *)&a1, a2);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x1F40CC320](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

int getpagesize(void)
{
  return MEMORY[0x1F40CC480]();
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x1F40CC630](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  MEMORY[0x1F40CC640](a1, a2);
  return result;
}

uint64_t isH13ANEPresentOnIOS()
{
  return MEMORY[0x1F4163E30]();
}

uint64_t kac_get_log()
{
  return MEMORY[0x1F4163E38]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

long double log1p(long double __x)
{
  MEMORY[0x1F40CC890](__x);
  return result;
}

float log1pf(float a1)
{
  MEMORY[0x1F40CC898](a1);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40CC930]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

uint64_t memorystatus_control()
{
  return MEMORY[0x1F40CCD18]();
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCE78](a1, a2, *(void *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0F0](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x1F40CD658]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int pthread_main_np(void)
{
  return MEMORY[0x1F40CDA68]();
}

int putchar(int a1)
{
  return MEMORY[0x1F40CDBA8](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1F40CDC88](__ptr, __size);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1F40CDD10](__p, __ec);
}

int setvbuf(FILE *a1, char *a2, int a3, size_t a4)
{
  return MEMORY[0x1F40CDFD0](a1, a2, *(void *)&a3, a4);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F90](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  return MEMORY[0x1F4181FD0](a1, zName);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41822C0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

uint64_t strip_accent()
{
  return MEMORY[0x1F4163E48]();
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1F40CE1D8](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

kern_return_t task_generate_corpse(task_read_t task, mach_port_t *corpse_task_port)
{
  return MEMORY[0x1F40CE450](*(void *)&task, corpse_task_port);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1F417F718](*(void *)&c);
}

int32_t u_getIntPropertyValue(UChar32 c, UProperty which)
{
  return MEMORY[0x1F417F760](*(void *)&c, *(void *)&which);
}

UBool u_isalnum(UChar32 c)
{
  return MEMORY[0x1F417F7B0](*(void *)&c);
}

UBool u_isdigit(UChar32 c)
{
  return MEMORY[0x1F417F7C8](*(void *)&c);
}

UBool u_islower(UChar32 c)
{
  return MEMORY[0x1F417F7D0](*(void *)&c);
}

UBool u_ispunct(UChar32 c)
{
  return MEMORY[0x1F417F7E0](*(void *)&c);
}

UBool u_isspace(UChar32 c)
{
  return MEMORY[0x1F417F7E8](*(void *)&c);
}

UBool u_istitle(UChar32 c)
{
  return MEMORY[0x1F417F7F0](*(void *)&c);
}

UBool u_isupper(UChar32 c)
{
  return MEMORY[0x1F417F7F8](*(void *)&c);
}

UChar *__cdecl u_strFromUTF32(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (UChar *)MEMORY[0x1F417F830](dest, *(void *)&destCapacity, pDestLength, src, *(void *)&srcLength, pErrorCode);
}

UChar *__cdecl u_strFromUTF8(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (UChar *)MEMORY[0x1F417F838](dest, *(void *)&destCapacity, pDestLength, src, *(void *)&srcLength, pErrorCode);
}

int32_t u_strToLower(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F417F848](dest, *(void *)&destCapacity, src, *(void *)&srcLength, locale, pErrorCode);
}

int32_t u_strToTitle(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UBreakIterator *titleIter, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F417F850](dest, *(void *)&destCapacity, src, *(void *)&srcLength, titleIter, locale, pErrorCode);
}

char *__cdecl u_strToUTF8(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (char *)MEMORY[0x1F417F858](dest, *(void *)&destCapacity, pDestLength, src, *(void *)&srcLength, pErrorCode);
}

UChar32 u_tolower(UChar32 c)
{
  return MEMORY[0x1F417F8A8](*(void *)&c);
}

UChar32 u_totitle(UChar32 c)
{
  return MEMORY[0x1F417F8B0](*(void *)&c);
}

UChar32 u_toupper(UChar32 c)
{
  return MEMORY[0x1F417F8B8](*(void *)&c);
}

uint64_t ubrk_close()
{
  return MEMORY[0x1F417FA30]();
}

uint64_t ubrk_open()
{
  return MEMORY[0x1F417FA80]();
}

uint64_t ucol_getSortKey()
{
  return MEMORY[0x1F417FD68]();
}

uint64_t ucol_open()
{
  return MEMORY[0x1F417FDA0]();
}

uint64_t ucol_strcollUTF8()
{
  return MEMORY[0x1F417FDE8]();
}

uint64_t ulocdata_close()
{
  return MEMORY[0x1F41801E8]();
}

uint64_t ulocdata_getExemplarSet()
{
  return MEMORY[0x1F4180200]();
}

uint64_t ulocdata_open()
{
  return MEMORY[0x1F4180210]();
}

int ungetc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CE5D0](*(void *)&a1, a2);
}

uint64_t uscript_getCode()
{
  return MEMORY[0x1F41805C8]();
}

uint64_t uset_add()
{
  return MEMORY[0x1F4180680]();
}

uint64_t uset_addAll()
{
  return MEMORY[0x1F4180688]();
}

uint64_t uset_addRange()
{
  return MEMORY[0x1F4180698]();
}

uint64_t uset_close()
{
  return MEMORY[0x1F41806D0]();
}

uint64_t uset_contains()
{
  return MEMORY[0x1F41806E0]();
}

uint64_t uset_freeze()
{
  return MEMORY[0x1F41806F0]();
}

uint64_t uset_openEmpty()
{
  return MEMORY[0x1F4180718]();
}

uint64_t uset_removeRange()
{
  return MEMORY[0x1F4180738]();
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE690](a1, a2, a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE990](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1F40CE9D0](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE9E8](activity);
}

uint64_t xpc_connection_copy_bundle_id()
{
  return MEMORY[0x1F40CEB88]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}